2a5610c04a49f65ce385a6d3f101488b02bb85f1
==================================================
Few more places where parameterized collection constructors can be used
==================================================
Mark Thomas
==================================================
Wed Apr 22 21:18:59 2020 +0100
==================================================
ApplicationContext.java
Few more places where parameterized collection constructors can be used


==================================================
StandardContext.java
index 4e0192a96d..ce8e7188f9 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -1347,8 +1347,7 @@ public class ApplicationContext implements ServletContext {
     protected void clearAttributes() {
 
         // Create list of attributes to be removed
-        List<String> list = new ArrayList<>();
-        list.addAll(attributes.keySet());
+        List<String> list = new ArrayList<>(attributes.keySet());
 
         // Remove application originated attributes
         // (read only attributes will be left in place)

==================================================
BackupManager.java
index 3e786f1a03..9647bd2cf3 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -3531,9 +3531,7 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public String[] findParameters() {
-        List<String> parameterNames = new ArrayList<>(parameters.size());
-        parameterNames.addAll(parameters.keySet());
-        return parameterNames.toArray(new String[0]);
+        return parameters.keySet().toArray(new String[0]);
     }
 
 

==================================================
PersistentManagerBase.java
index 77cb5036ba..bd3ac830b9 100644
--- a/java/org/apache/catalina/ha/session/BackupManager.java
+++ b/java/org/apache/catalina/ha/session/BackupManager.java
@@ -269,10 +269,8 @@ public class BackupManager extends ClusterManagerBase
 
     @Override
     public Set<String> getSessionIdsFull() {
-        Set<String> sessionIds = new HashSet<>();
-        LazyReplicatedMap<String,Session> map =
-                (LazyReplicatedMap<String,Session>)sessions;
-        sessionIds.addAll(map.keySetFull());
+        LazyReplicatedMap<String,Session> map = (LazyReplicatedMap<String,Session>)sessions;
+        Set<String> sessionIds = new HashSet<>(map.keySetFull());
         return sessionIds;
     }
 

==================================================
ContextConfig.java
index b3badf4685..bb669ac1ca 100644
--- a/java/org/apache/catalina/session/PersistentManagerBase.java
+++ b/java/org/apache/catalina/session/PersistentManagerBase.java
@@ -650,11 +650,9 @@ public abstract class PersistentManagerBase extends ManagerBase
     public Set<String> getSessionIdsFull() {
         // In memory session ID list
         Set<String> sessionIds = new HashSet<>(sessions.keySet());
-        // Store session ID list
-        String[] storeKeys;
         try {
-            storeKeys = getStore().keys();
-            sessionIds.addAll(Arrays.asList(storeKeys));
+            // Store session ID list
+            sessionIds.addAll(Arrays.asList(getStore().keys()));
         } catch (IOException e) {
             log.warn(sm.getString("persistentManager.storeKeysException"));
         }

==================================================
AbstractHttp11Protocol.java
index c6e8a39587..2f3ebd0878 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -1183,8 +1183,7 @@ public class ContextConfig implements LifecycleListener {
         if (ok) {
             // Spec does not define an order.
             // Use ordered JARs followed by remaining JARs
-            Set<WebXml> resourceJars = new LinkedHashSet<>();
-            resourceJars.addAll(orderedFragments);
+            Set<WebXml> resourceJars = new LinkedHashSet<>(orderedFragments);
             for (WebXml fragment : fragments.values()) {
                 if (!resourceJars.contains(fragment)) {
                     resourceJars.add(fragment);

==================================================
StreamStateMachine.java
index 9ef07b042b..35141a192d 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -417,10 +417,9 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
         return allowedTrailerHeaders.contains(headerName);
     }
     public String getAllowedTrailerHeaders() {
-        // Chances of a size change between these lines are small enough that a
-        // sync is unnecessary.
-        List<String> copy = new ArrayList<>(allowedTrailerHeaders.size());
-        copy.addAll(allowedTrailerHeaders);
+        // Chances of a change during execution of this line are small enough
+        // that a sync is unnecessary.
+        List<String> copy = new ArrayList<>(allowedTrailerHeaders);
         return StringUtils.join(copy);
     }
     public void addAllowedTrailerHeader(String header) {

==================================================
PageInfo.java
index 596b670c86..948e7cdf6e 100644
--- a/java/org/apache/coyote/http2/StreamStateMachine.java
+++ b/java/org/apache/coyote/http2/StreamStateMachine.java
@@ -215,7 +215,7 @@ class StreamStateMachine {
         private final boolean canReset;
         private final boolean connectionErrorForInvalidFrame;
         private final Http2Error errorCodeForInvalidFrame;
-        private final Set<FrameType> frameTypesPermitted = new HashSet<>();
+        private final Set<FrameType> frameTypesPermitted;
 
         private State(boolean canRead, boolean canWrite, boolean canReset,
                 boolean connectionErrorForInvalidFrame, Http2Error errorCode,
@@ -225,7 +225,7 @@ class StreamStateMachine {
             this.canReset = canReset;
             this.connectionErrorForInvalidFrame = connectionErrorForInvalidFrame;
             this.errorCodeForInvalidFrame = errorCode;
-            frameTypesPermitted.addAll(Arrays.asList(frameTypes));
+            frameTypesPermitted = new HashSet<>(Arrays.asList(frameTypes));
         }
 
         public boolean isActive() {

==================================================
JspCServletContext.java
index 02c8d784d4..af9a100272 100644
--- a/java/org/apache/jasper/compiler/PageInfo.java
+++ b/java/org/apache/jasper/compiler/PageInfo.java
@@ -112,7 +112,6 @@ class PageInfo {
         this.jspPrefixMapper = new HashMap<>();
         this.xmlPrefixMapper = new HashMap<>();
         this.nonCustomTagPrefixMap = new HashMap<>();
-        this.imports = new Vector<>();
         this.dependants = new HashMap<>();
         this.includePrelude = new Vector<>();
         this.includeCoda = new Vector<>();
@@ -120,7 +119,7 @@ class PageInfo {
         this.prefixes = new HashSet<>();
 
         // Enter standard imports
-        imports.addAll(Constants.STANDARD_IMPORTS);
+        this.imports = new Vector<>(Constants.STANDARD_IMPORTS);
     }
 
     public boolean isTagFile() {

==================================================
GenericKeyedObjectPool.java
index bab8225b1c..80a9727a45 100644
--- a/java/org/apache/jasper/servlet/JspCServletContext.java
+++ b/java/org/apache/jasper/servlet/JspCServletContext.java
@@ -190,8 +190,7 @@ public class JspCServletContext implements ServletContext {
             throws JasperException {
         List<URL> resourceJars = new ArrayList<>();
         // Build list of potential resource JARs. Use same ordering as ContextConfig
-        Set<WebXml> resourceFragments = new LinkedHashSet<>();
-        resourceFragments.addAll(orderedFragments);
+        Set<WebXml> resourceFragments = new LinkedHashSet<>(orderedFragments);
         for (WebXml fragment : fragments) {
             if (!resourceFragments.contains(fragment)) {
                 resourceFragments.add(fragment);

==================================================
JSSEUtil.java
index 796faa2108..57629620e2 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/GenericKeyedObjectPool.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/GenericKeyedObjectPool.java
@@ -873,11 +873,11 @@ public class GenericKeyedObjectPool<K, T> extends BaseGenericObjectPool<T>
                 if(evictionIterator == null || !evictionIterator.hasNext()) {
                     if (evictionKeyIterator == null ||
                             !evictionKeyIterator.hasNext()) {
-                        final List<K> keyCopy = new ArrayList<>();
+                        final List<K> keyCopy;
                         final Lock readLock = keyLock.readLock();
                         readLock.lock();
                         try {
-                            keyCopy.addAll(poolKeyList);
+                            keyCopy = new ArrayList<>(poolKeyList);
                         } finally {
                             readLock.unlock();
                         }

==================================================
MemoryUserDatabaseTests.java
index 5f662de0db..918aa79c27 100644
--- a/java/org/apache/tomcat/util/net/jsse/JSSEUtil.java
+++ b/java/org/apache/tomcat/util/net/jsse/JSSEUtil.java
@@ -147,8 +147,7 @@ public class JSSEUtil extends SSLUtilBase {
                             }
                         }
                     } else {
-                        implementedCiphers = new HashSet<>(implementedCipherSuiteArray.length);
-                        implementedCiphers.addAll(Arrays.asList(implementedCipherSuiteArray));
+                        implementedCiphers = new HashSet<>(Arrays.asList(implementedCipherSuiteArray));
                     }
                     initialized = true;
                 }

==================================================
TesterOpenSSL.java
index bd73e28b38..9786238fea 100644
--- a/test/org/apache/catalina/users/MemoryUserDatabaseTests.java
+++ b/test/org/apache/catalina/users/MemoryUserDatabaseTests.java
@@ -176,10 +176,8 @@ public class MemoryUserDatabaseTests {
         assertPrincipalNames(new String[] { "testgroup", "othergroup"}, user.getGroups());
     }
 
-    private void assertPrincipalNames(String[] expectedNames, Iterator<? extends Principal> i)
-    {
-        HashSet<String> names = new HashSet<>(expectedNames.length);
-        names.addAll(Arrays.asList(expectedNames));
+    private void assertPrincipalNames(String[] expectedNames, Iterator<? extends Principal> i) {
+        HashSet<String> names = new HashSet<>(Arrays.asList(expectedNames));
 
         int j=0;
         while(i.hasNext()) {

==================================================
TestClose.java
index 5ff2a5c39d..a5ce647c66 100644
--- a/test/org/apache/tomcat/util/net/openssl/ciphers/TesterOpenSSL.java
+++ b/test/org/apache/tomcat/util/net/openssl/ciphers/TesterOpenSSL.java
@@ -366,8 +366,7 @@ public class TesterOpenSSL {
 
     public static Set<String> getOpenSSLCiphersAsSet(String specification) throws Exception {
         String[] ciphers = getOpenSSLCiphersAsExpression(specification).trim().split(":");
-        Set<String> result = new HashSet<>(ciphers.length);
-        result.addAll(Arrays.asList(ciphers));
+        Set<String> result = new HashSet<>(Arrays.asList(ciphers));
         return result;
     }
 

==================================================
