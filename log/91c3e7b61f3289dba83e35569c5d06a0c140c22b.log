91c3e7b61f3289dba83e35569c5d06a0c140c22b
==================================================
Removed unnecessary parentheses in return statements
==================================================
Emmanuel Bourg
==================================================
Tue May 9 22:22:59 2017 +0000
==================================================
SessionEvent.java
Removed unnecessary parentheses in return statements

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1794651 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ResourcesTask.java
index 7f77a867db..0193df8e38 100644
--- a/java/org/apache/catalina/SessionEvent.java
+++ b/java/org/apache/catalina/SessionEvent.java
@@ -71,9 +71,7 @@ public final class SessionEvent extends EventObject {
      * @return the event data of this event.
      */
     public Object getData() {
-
-        return (this.data);
-
+        return this.data;
     }
 
 
@@ -81,9 +79,7 @@ public final class SessionEvent extends EventObject {
      * @return the Session on which this event occurred.
      */
     public Session getSession() {
-
-        return (this.session);
-
+        return this.session;
     }
 
 
@@ -91,9 +87,7 @@ public final class SessionEvent extends EventObject {
      * @return the event type of this event.
      */
     public String getType() {
-
-        return (this.type);
-
+        return this.type;
     }
 
 

==================================================
ValidatorTask.java
index c0d57d6851..db282cbc40 100644
--- a/java/org/apache/catalina/ant/ResourcesTask.java
+++ b/java/org/apache/catalina/ant/ResourcesTask.java
@@ -45,7 +45,7 @@ public class ResourcesTask extends AbstractCatalinaTask {
     protected String type = null;
 
     public String getType() {
-        return (this.type);
+        return this.type;
     }
 
     public void setType(String type) {

==================================================
JMXAccessorTask.java
index 99b0e0aafa..3fb8269550 100644
--- a/java/org/apache/catalina/ant/ValidatorTask.java
+++ b/java/org/apache/catalina/ant/ValidatorTask.java
@@ -54,7 +54,7 @@ public class ValidatorTask extends BaseRedirectorHelperTask {
     protected String path = null;
 
     public String getPath() {
-        return (this.path);
+        return this.path;
     }
 
     public void setPath(String path) {

==================================================
FormAuthenticator.java
index 903bd3cd30..0b6381b74d 100644
--- a/java/org/apache/catalina/ant/jmx/JMXAccessorTask.java
+++ b/java/org/apache/catalina/ant/jmx/JMXAccessorTask.java
@@ -131,7 +131,7 @@ public class JMXAccessorTask extends BaseRedirectorHelperTask {
      * @return the name used at remote MbeanServer
      */
     public String getName() {
-        return (this.name);
+        return this.name;
     }
 
     public void setName(String objectName) {
@@ -200,7 +200,7 @@ public class JMXAccessorTask extends BaseRedirectorHelperTask {
      * @return The login password for the <code>Manager</code> application.
      */
     public String getPassword() {
-        return (this.password);
+        return this.password;
     }
 
     public void setPassword(String password) {
@@ -211,7 +211,7 @@ public class JMXAccessorTask extends BaseRedirectorHelperTask {
      * @return The login username for the <code>JMX</code> MBeanServer.
      */
     public String getUsername() {
-        return (this.username);
+        return this.username;
     }
 
     public void setUsername(String username) {
@@ -222,7 +222,7 @@ public class JMXAccessorTask extends BaseRedirectorHelperTask {
      * @return The URL of the <code>JMX JSR 160</code> MBeanServer to be used.
      */
     public String getUrl() {
-        return (this.url);
+        return this.url;
     }
 
     public void setUrl(String url) {
@@ -233,7 +233,7 @@ public class JMXAccessorTask extends BaseRedirectorHelperTask {
      * @return The Host of the <code>JMX JSR 160</code> MBeanServer to be used.
      */
     public String getHost() {
-        return (this.host);
+        return this.host;
     }
 
     public void setHost(String host) {
@@ -244,7 +244,7 @@ public class JMXAccessorTask extends BaseRedirectorHelperTask {
      * @return The Port of the <code>JMX JSR 160</code> MBeanServer to be used.
      */
     public String getPort() {
-        return (this.port);
+        return this.port;
     }
 
     public void setPort(String port) {

==================================================
SavedRequest.java
index 3920590474..74db58abc5 100644
--- a/java/org/apache/catalina/authenticator/FormAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/FormAuthenticator.java
@@ -687,19 +687,17 @@ public class FormAuthenticator
      * @return the original request URL
      */
     protected String savedRequestURL(Session session) {
-
         SavedRequest saved =
             (SavedRequest) session.getNote(Constants.FORM_REQUEST_NOTE);
         if (saved == null) {
-            return (null);
+            return null;
         }
         StringBuilder sb = new StringBuilder(saved.getRequestURI());
         if (saved.getQueryString() != null) {
             sb.append('?');
             sb.append(saved.getQueryString());
         }
-        return (sb.toString());
-
+        return sb.toString();
     }
 
 

==================================================
CoyoteAdapter.java
index bb3f6cf179..f494b50018 100644
--- a/java/org/apache/catalina/authenticator/SavedRequest.java
+++ b/java/org/apache/catalina/authenticator/SavedRequest.java
@@ -53,7 +53,7 @@ public final class SavedRequest {
     }
 
     public Iterator<Cookie> getCookies() {
-        return (cookies.iterator());
+        return cookies.iterator();
     }
 
 
@@ -75,15 +75,15 @@ public final class SavedRequest {
     }
 
     public Iterator<String> getHeaderNames() {
-        return (headers.keySet().iterator());
+        return headers.keySet().iterator();
     }
 
     public Iterator<String> getHeaderValues(String name) {
         ArrayList<String> values = headers.get(name);
         if (values == null)
-            return ((new ArrayList<String>()).iterator());
+            return new ArrayList<String>().iterator();
         else
-            return (values.iterator());
+            return values.iterator();
     }
 
 
@@ -97,7 +97,7 @@ public final class SavedRequest {
     }
 
     public Iterator<Locale> getLocales() {
-        return (locales.iterator());
+        return locales.iterator();
     }
 
 
@@ -107,7 +107,7 @@ public final class SavedRequest {
     private String method = null;
 
     public String getMethod() {
-        return (this.method);
+        return this.method;
     }
 
     public void setMethod(String method) {
@@ -121,7 +121,7 @@ public final class SavedRequest {
     private String queryString = null;
 
     public String getQueryString() {
-        return (this.queryString);
+        return this.queryString;
     }
 
     public void setQueryString(String queryString) {
@@ -135,7 +135,7 @@ public final class SavedRequest {
     private String requestURI = null;
 
     public String getRequestURI() {
-        return (this.requestURI);
+        return this.requestURI;
     }
 
     public void setRequestURI(String requestURI) {
@@ -150,7 +150,7 @@ public final class SavedRequest {
     private String decodedRequestURI = null;
 
     public String getDecodedRequestURI() {
-        return (this.decodedRequestURI);
+        return this.decodedRequestURI;
     }
 
     public void setDecodedRequestURI(String decodedRequestURI) {
@@ -164,7 +164,7 @@ public final class SavedRequest {
     private ByteChunk body = null;
 
     public ByteChunk getBody() {
-        return (this.body);
+        return this.body;
     }
 
     public void setBody(ByteChunk body) {
@@ -177,7 +177,7 @@ public final class SavedRequest {
     private String contentType = null;
 
     public String getContentType() {
-        return (this.contentType);
+        return this.contentType;
     }
 
     public void setContentType(String contentType) {

==================================================
CoyotePrincipal.java
index 44bc86dc95..ed8ac114ea 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -728,7 +728,7 @@ public class CoyoteAdapter implements Adapter {
                 // No session ID means no possibility of remap
                 if (contexts != null && sessionID != null) {
                     // Find the context associated with the session
-                    for (int i = (contexts.length); i > 0; i--) {
+                    for (int i = contexts.length; i > 0; i--) {
                         Context ctxt = contexts[i - 1];
                         if (ctxt.getManager().findSession(sessionID) != null) {
                             // We found a context. Is it the one that has

==================================================
Request.java
index 8e8ca2678f..1ae5608675 100644
--- a/java/org/apache/catalina/connector/CoyotePrincipal.java
+++ b/java/org/apache/catalina/connector/CoyotePrincipal.java
@@ -49,7 +49,7 @@ public class CoyotePrincipal implements Principal, Serializable {
 
     @Override
     public String getName() {
-        return (this.name);
+        return this.name;
     }
 
 
@@ -62,12 +62,10 @@ public class CoyotePrincipal implements Principal, Serializable {
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("CoyotePrincipal[");
         sb.append(this.name);
         sb.append("]");
-        return (sb.toString());
-
+        return sb.toString();
     }
 
 

==================================================
Response.java
index 4fa593e4c8..2bba049393 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -170,7 +170,7 @@ public class Request implements HttpServletRequest {
      * @return the Coyote request object
      */
     public org.apache.coyote.Request getCoyoteRequest() {
-        return (this.coyoteRequest);
+        return this.coyoteRequest;
     }
 
 
@@ -1247,7 +1247,7 @@ public class Request implements HttpServletRequest {
         }
 
         try {
-            return (servletContext.getRealPath(path));
+            return servletContext.getRealPath(path);
         } catch (IllegalArgumentException e) {
             return null;
         }
@@ -1360,7 +1360,7 @@ public class Request implements HttpServletRequest {
         if (path == null) {
             return null;
         } else if (path.startsWith("/")) {
-            return (context.getServletContext().getRequestDispatcher(path));
+            return context.getServletContext().getRequestDispatcher(path);
         }
 
         // Convert a request-relative path to a context-relative one
@@ -2353,7 +2353,7 @@ public class Request implements HttpServletRequest {
      */
     @Override
     public String getServletPath() {
-        return (mappingData.wrapperPath.toString());
+        return mappingData.wrapperPath.toString();
     }
 
 
@@ -2429,7 +2429,7 @@ public class Request implements HttpServletRequest {
     @Override
     @Deprecated
     public boolean isRequestedSessionIdFromUrl() {
-        return (isRequestedSessionIdFromURL());
+        return isRequestedSessionIdFromURL();
     }
 
 
@@ -2523,7 +2523,7 @@ public class Request implements HttpServletRequest {
         }
 
         // Check for a role defined directly as a <security-role>
-        return (realm.hasRole(getWrapper(), userPrincipal, role));
+        return realm.hasRole(getWrapper(), userPrincipal, role);
     }
 
 
@@ -2901,7 +2901,7 @@ public class Request implements HttpServletRequest {
         // There cannot be a session if no context has been assigned yet
         Context context = getContext();
         if (context == null) {
-            return (null);
+            return null;
         }
 
         // Return the current session if it exists and is valid
@@ -2909,13 +2909,13 @@ public class Request implements HttpServletRequest {
             session = null;
         }
         if (session != null) {
-            return (session);
+            return session;
         }
 
         // Return the requested session if it exists and is valid
         Manager manager = context.getManager();
         if (manager == null) {
-            return (null);      // Sessions are not supported
+            return null;      // Sessions are not supported
         }
         if (requestedSessionId != null) {
             try {
@@ -2928,13 +2928,13 @@ public class Request implements HttpServletRequest {
             }
             if (session != null) {
                 session.access();
-                return (session);
+                return session;
             }
         }
 
         // Create a new session if requested and the response is not committed
         if (!create) {
-            return (null);
+            return null;
         }
         if (response != null
                 && context.getServletContext()

==================================================
ResponseFacade.java
index c6d8f647a4..dfcbbbd47f 100644
--- a/java/org/apache/catalina/connector/Response.java
+++ b/java/org/apache/catalina/connector/Response.java
@@ -139,7 +139,7 @@ public class Response implements HttpServletResponse {
      * @return the Context within which this Request is being processed.
      */
     public Context getContext() {
-        return (request.getContext());
+        return request.getContext();
     }
 
 
@@ -330,9 +330,9 @@ public class Response implements HttpServletResponse {
      * @return <code>true</code> if the application has committed the response
      */
     public boolean isAppCommitted() {
-        return (this.appCommitted || isCommitted() || isSuspended()
+        return this.appCommitted || isCommitted() || isSuspended()
                 || ((getContentLength() > 0)
-                    && (getContentWritten() >= getContentLength())));
+                    && (getContentWritten() >= getContentLength()));
     }
 
 
@@ -345,7 +345,7 @@ public class Response implements HttpServletResponse {
      * @return the Request with which this Response is associated.
      */
     public org.apache.catalina.connector.Request getRequest() {
-        return (this.request);
+        return this.request;
     }
 
     /**
@@ -600,7 +600,7 @@ public class Response implements HttpServletResponse {
      */
     @Override
     public Locale getLocale() {
-        return (getCoyoteResponse().getLocale());
+        return getCoyoteResponse().getLocale();
     }
 
 
@@ -1161,13 +1161,11 @@ public class Response implements HttpServletResponse {
      */
     @Override
     public String encodeRedirectURL(String url) {
-
         if (isEncodeable(toAbsolute(url))) {
-            return (toEncoded(url, request.getSessionInternal().getIdInternal()));
+            return toEncoded(url, request.getSessionInternal().getIdInternal());
         } else {
-            return (url);
+            return url;
         }
-
     }
 
 
@@ -1184,7 +1182,7 @@ public class Response implements HttpServletResponse {
     @Override
     @Deprecated
     public String encodeRedirectUrl(String url) {
-        return (encodeRedirectURL(url));
+        return encodeRedirectURL(url);
     }
 
 
@@ -1213,9 +1211,9 @@ public class Response implements HttpServletResponse {
             } else if (url.equals(absolute) && !hasPath(url)) {
                 url += '/';
             }
-            return (toEncoded(url, request.getSessionInternal().getIdInternal()));
+            return toEncoded(url, request.getSessionInternal().getIdInternal());
         } else {
-            return (url);
+            return url;
         }
 
     }
@@ -1234,7 +1232,7 @@ public class Response implements HttpServletResponse {
     @Override
     @Deprecated
     public String encodeUrl(String url) {
-        return (encodeURL(url));
+        return encodeURL(url);
     }
 
 
@@ -1630,7 +1628,7 @@ public class Response implements HttpServletResponse {
     protected String toAbsolute(String location) {
 
         if (location == null) {
-            return (location);
+            return location;
         }
 
         boolean leadingSlash = location.startsWith("/");
@@ -1705,7 +1703,7 @@ public class Response implements HttpServletResponse {
 
         } else {
 
-            return (location);
+            return location;
 
         }
 
@@ -1834,9 +1832,8 @@ public class Response implements HttpServletResponse {
      * @return the encoded URL
      */
     protected String toEncoded(String url, String sessionId) {
-
         if ((url == null) || (sessionId == null)) {
-            return (url);
+            return url;
         }
 
         String path = url;
@@ -1862,8 +1859,7 @@ public class Response implements HttpServletResponse {
         }
         sb.append(anchor);
         sb.append(query);
-        return (sb.toString());
-
+        return sb.toString();
     }
 
 

==================================================
ApplicationContext.java
index 6767885de8..4656076a00 100644
--- a/java/org/apache/catalina/connector/ResponseFacade.java
+++ b/java/org/apache/catalina/connector/ResponseFacade.java
@@ -209,7 +209,7 @@ public class ResponseFacade implements HttpServletResponse {
         if (isFinished()) {
             response.setSuspended(true);
         }
-        return (sos);
+        return sos;
 
     }
 
@@ -226,7 +226,7 @@ public class ResponseFacade implements HttpServletResponse {
         if (isFinished()) {
             response.setSuspended(true);
         }
-        return (writer);
+        return writer;
 
     }
 
@@ -333,7 +333,7 @@ public class ResponseFacade implements HttpServletResponse {
                             sm.getString("responseFacade.nullResponse"));
         }
 
-        return (response.isAppCommitted());
+        return response.isAppCommitted();
     }
 
 

==================================================
ApplicationContextFacade.java
index 0ac897c9ee..906bd2e9d5 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -213,7 +213,7 @@ public class ApplicationContext implements ServletContext {
 
     @Override
     public Object getAttribute(String name) {
-        return (attributes.get(name));
+        return attributes.get(name);
     }
 
 
@@ -348,14 +348,14 @@ public class ApplicationContext implements ServletContext {
     public String getMimeType(String file) {
 
         if (file == null)
-            return (null);
+            return null;
         int period = file.lastIndexOf('.');
         if (period < 0)
-            return (null);
+            return null;
         String extension = file.substring(period + 1);
         if (extension.length() < 1)
-            return (null);
-        return (context.findMimeMapping(extension));
+            return null;
+        return context.findMimeMapping(extension);
 
     }
 
@@ -371,12 +371,12 @@ public class ApplicationContext implements ServletContext {
 
         // Validate the name argument
         if (name == null)
-            return (null);
+            return null;
 
         // Create and return a corresponding request dispatcher
         Wrapper wrapper = (Wrapper) context.findChild(name);
         if (wrapper == null)
-            return (null);
+            return null;
 
         return new ApplicationDispatcher(wrapper, null, null, null, null, null, name);
 
@@ -395,7 +395,7 @@ public class ApplicationContext implements ServletContext {
 
         // Validate the path argument
         if (path == null)
-            return (null);
+            return null;
         if (!path.startsWith("/"))
             throw new IllegalArgumentException
                 (sm.getString
@@ -412,7 +412,7 @@ public class ApplicationContext implements ServletContext {
 
         normalizedPath = RequestUtil.normalize(normalizedPath);
         if (normalizedPath == null)
-            return (null);
+            return null;
 
         if (getContext().getDispatchersUseEncodedPaths()) {
             // Decode
@@ -464,7 +464,7 @@ public class ApplicationContext implements ServletContext {
             uriCC.append(normalizedPath, 0, semicolon > 0 ? semicolon : pos);
             service.getMapper().map(context, uriMB, mappingData);
             if (mappingData.wrapper == null) {
-                return (null);
+                return null;
             }
             /*
              * Append any trailing path params (separated by ';') that were
@@ -477,13 +477,13 @@ public class ApplicationContext implements ServletContext {
         } catch (Exception e) {
             // Should never happen
             log(sm.getString("applicationContext.mapping.error"), e);
-            return (null);
+            return null;
         }
 
         Wrapper wrapper = mappingData.wrapper;
         String wrapperPath = mappingData.wrapperPath.toString();
         String pathInfo = mappingData.pathInfo.toString();
-        ServletMapping mapping = (new ApplicationMapping(mappingData)).getServletMapping();
+        ServletMapping mapping = new ApplicationMapping(mappingData).getServletMapping();
 
         mappingData.recycle();
 
@@ -1358,9 +1358,7 @@ public class ApplicationContext implements ServletContext {
      * @return the facade associated with this ApplicationContext.
      */
     protected ServletContext getFacade() {
-
-        return (this.facade);
-
+        return this.facade;
     }
 
 

==================================================
ApplicationDispatcher.java
index ed623f7ddb..8d506b9cf3 100644
--- a/java/org/apache/catalina/core/ApplicationContextFacade.java
+++ b/java/org/apache/catalina/core/ApplicationContextFacade.java
@@ -145,7 +145,7 @@ public class ApplicationContextFacade implements ServletContext {
             (theContext instanceof ApplicationContext)){
             theContext = ((ApplicationContext)theContext).getFacade();
         }
-        return (theContext);
+        return theContext;
     }
 
 

==================================================
ApplicationFilterConfig.java
index e88ed383d7..08dacc66e1 100644
--- a/java/org/apache/catalina/core/ApplicationDispatcher.java
+++ b/java/org/apache/catalina/core/ApplicationDispatcher.java
@@ -922,7 +922,7 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
         else
             ((ServletRequestWrapper) previous).setRequest(wrapper);
         state.wrapRequest = wrapper;
-        return (wrapper);
+        return wrapper;
 
     }
 
@@ -967,7 +967,7 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
         else
             ((ServletResponseWrapper) previous).setResponse(wrapper);
         state.wrapResponse = wrapper;
-        return (wrapper);
+        return wrapper;
 
     }
 

==================================================
ApplicationFilterFactory.java
index 96d36f3acc..5e63b8958a 100644
--- a/java/org/apache/catalina/core/ApplicationFilterConfig.java
+++ b/java/org/apache/catalina/core/ApplicationFilterConfig.java
@@ -152,7 +152,7 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
      */
     @Override
     public String getFilterName() {
-        return (filterDef.getFilterName());
+        return filterDef.getFilterName();
     }
 
     /**
@@ -174,7 +174,7 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
 
         Map<String,String> map = filterDef.getParameterMap();
         if (map == null) {
-            return (null);
+            return null;
         }
 
         return map.get(name);
@@ -214,15 +214,13 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("ApplicationFilterConfig[");
         sb.append("name=");
         sb.append(filterDef.getFilterName());
         sb.append(", filterClass=");
         sb.append(filterDef.getFilterClass());
         sb.append("]");
-        return (sb.toString());
-
+        return sb.toString();
     }
 
     // --------------------------------------------------------- Public Methods
@@ -257,7 +255,7 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
 
         // Return the existing filter instance, if any
         if (this.filter != null)
-            return (this.filter);
+            return this.filter;
 
         // Identify the class loader we will be using
         String filterClass = filterDef.getFilterClass();
@@ -265,7 +263,7 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
 
         initFilter();
 
-        return (this.filter);
+        return this.filter;
 
     }
 
@@ -293,9 +291,7 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
      * Return the filter definition we are configured for.
      */
     FilterDef getFilterDef() {
-
-        return (this.filterDef);
-
+        return this.filterDef;
     }
 
     /**

==================================================
ApplicationHttpRequest.java
index 977eec7bdb..053b35048d 100644
--- a/java/org/apache/catalina/core/ApplicationFilterFactory.java
+++ b/java/org/apache/catalina/core/ApplicationFilterFactory.java
@@ -85,7 +85,7 @@ public final class ApplicationFilterFactory {
 
         // If there are no filter mappings, we are done
         if ((filterMaps == null) || (filterMaps.length == 0))
-            return (filterChain);
+            return filterChain;
 
         // Acquire the information we will need to match filter mappings
         DispatcherType dispatcher =

==================================================
ApplicationPushBuilder.java
index 9be932c48e..b2f4ac6b00 100644
--- a/java/org/apache/catalina/core/ApplicationHttpRequest.java
+++ b/java/org/apache/catalina/core/ApplicationHttpRequest.java
@@ -261,7 +261,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      */
     @Override
     public Enumeration<String> getAttributeNames() {
-        return (new AttributeNamesEnumerator());
+        return new AttributeNamesEnumerator();
     }
 
 
@@ -315,13 +315,13 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
     public RequestDispatcher getRequestDispatcher(String path) {
 
         if (context == null)
-            return (null);
+            return null;
 
         // If the path is already context-relative, just pass it through
         if (path == null)
-            return (null);
+            return null;
         else if (path.startsWith("/"))
-            return (context.getServletContext().getRequestDispatcher(path));
+            return context.getServletContext().getRequestDispatcher(path);
 
         // Convert a request-relative path to a context-relative one
         String servletPath =
@@ -347,7 +347,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
             relative = requestPath + path;
         }
 
-        return (context.getServletContext().getRequestDispatcher(relative));
+        return context.getServletContext().getRequestDispatcher(relative);
 
     }
 
@@ -371,9 +371,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      */
     @Override
     public String getContextPath() {
-
-        return (this.contextPath);
-
+        return this.contextPath;
     }
 
 
@@ -384,7 +382,6 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      */
     @Override
     public String getParameter(String name) {
-
         parseParameters();
 
         String[] value = parameters.get(name);
@@ -392,7 +389,6 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
             return null;
         }
         return value[0];
-
     }
 
 
@@ -402,10 +398,8 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      */
     @Override
     public Map<String, String[]> getParameterMap() {
-
         parseParameters();
-        return (parameters);
-
+        return parameters;
     }
 
 
@@ -415,7 +409,6 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      */
     @Override
     public Enumeration<String> getParameterNames() {
-
         parseParameters();
         return Collections.enumeration(parameters.keySet());
     }
@@ -429,10 +422,8 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      */
     @Override
     public String[] getParameterValues(String name) {
-
         parseParameters();
         return parameters.get(name);
-
     }
 
 
@@ -441,9 +432,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      */
     @Override
     public String getPathInfo() {
-
-        return (this.pathInfo);
-
+        return this.pathInfo;
     }
 
 
@@ -467,9 +456,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      */
     @Override
     public String getQueryString() {
-
-        return (this.queryString);
-
+        return this.queryString;
     }
 
 
@@ -479,9 +466,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      */
     @Override
     public String getRequestURI() {
-
-        return (this.requestURI);
-
+        return this.requestURI;
     }
 
 
@@ -501,9 +486,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      */
     @Override
     public String getServletPath() {
-
-        return (this.servletPath);
-
+        return this.servletPath;
     }
 
 
@@ -519,7 +502,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      */
     @Override
     public HttpSession getSession() {
-        return (getSession(true));
+        return getSession(true);
     }
 
 
@@ -536,11 +519,11 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
 
             // There cannot be a session if no context has been assigned yet
             if (context == null)
-                return (null);
+                return null;
 
             // Return the current session if it exists and is valid
             if (session != null && session.isValid()) {
-                return (session.getSession());
+                return session.getSession();
             }
 
             HttpSession other = super.getSession(false);
@@ -784,10 +767,10 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
     protected int getSpecial(String name) {
         for (int i = 0; i < specials.length; i++) {
             if (specials[i].equals(name)) {
-                return (i);
+                return i;
             }
         }
-        return (-1);
+        return -1;
     }
 
 
@@ -948,7 +931,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
                 for (int i = pos + 1; i <= last; i++) {
                     if (getAttribute(specials[i]) != null) {
                         pos = i;
-                        return (specials[i]);
+                        return specials[i];
                     }
                 }
             }

==================================================
ApplicationRequest.java
index cfa474dbe3..d4893a38c3 100644
--- a/java/org/apache/catalina/core/ApplicationPushBuilder.java
+++ b/java/org/apache/catalina/core/ApplicationPushBuilder.java
@@ -82,7 +82,7 @@ public class ApplicationPushBuilder implements PushBuilder {
             current = ((ServletRequestWrapper) current).getRequest();
         }
         if (current instanceof Request) {
-            catalinaRequest = ((Request) current);
+            catalinaRequest = (Request) current;
             coyoteRequest = catalinaRequest.getCoyoteRequest();
         } else {
             throw new UnsupportedOperationException(sm.getString(

==================================================
ContainerBase.java
index 0c0125a31d..87c6c17fb0 100644
--- a/java/org/apache/catalina/core/ApplicationRequest.java
+++ b/java/org/apache/catalina/core/ApplicationRequest.java
@@ -104,7 +104,7 @@ class ApplicationRequest extends ServletRequestWrapper {
     public Object getAttribute(String name) {
 
         synchronized (attributes) {
-            return (attributes.get(name));
+            return attributes.get(name);
         }
 
     }

==================================================
NamingContextListener.java
index 494fad0978..9ca9bcdf0c 100644
--- a/java/org/apache/catalina/core/ContainerBase.java
+++ b/java/org/apache/catalina/core/ContainerBase.java
@@ -354,12 +354,10 @@ public abstract class ContainerBase extends LifecycleMBeanBase
      */
     @Override
     public Log getLogger() {
-
         if (logger != null)
-            return (logger);
+            return logger;
         logger = LogFactory.getLog(getLogName());
-        return (logger);
-
+        return logger;
     }
 
 
@@ -484,9 +482,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
      */
     @Override
     public String getName() {
-
-        return (name);
-
+        return name;
     }
 
 
@@ -517,9 +513,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
      * @return <code>true</code> if the children will be started
      */
     public boolean getStartChildren() {
-
-        return (startChildren);
-
+        return startChildren;
     }
 
 
@@ -543,9 +537,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
      */
     @Override
     public Container getParent() {
-
-        return (parent);
-
+        return parent;
     }
 
 
@@ -578,12 +570,11 @@ public abstract class ContainerBase extends LifecycleMBeanBase
     @Override
     public ClassLoader getParentClassLoader() {
         if (parentClassLoader != null)
-            return (parentClassLoader);
+            return parentClassLoader;
         if (parent != null) {
-            return (parent.getParentClassLoader());
+            return parent.getParentClassLoader();
         }
-        return (ClassLoader.getSystemClassLoader());
-
+        return ClassLoader.getSystemClassLoader();
     }
 
 
@@ -612,9 +603,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
      */
     @Override
     public Pipeline getPipeline() {
-
-        return (this.pipeline);
-
+        return this.pipeline;
     }
 
 
@@ -630,9 +619,9 @@ public abstract class ContainerBase extends LifecycleMBeanBase
         l.lock();
         try {
             if (realm != null)
-                return (realm);
+                return realm;
             if (parent != null)
-                return (parent.getRealm());
+                return parent.getRealm();
             return null;
         } finally {
             l.unlock();

==================================================
StandardContext.java
index ebfbc4a2c3..bd8b5acdee 100644
--- a/java/org/apache/catalina/core/NamingContextListener.java
+++ b/java/org/apache/catalina/core/NamingContextListener.java
@@ -179,7 +179,7 @@ public class NamingContextListener
      * @return the "name" property.
      */
     public String getName() {
-        return (this.name);
+        return this.name;
     }
 
 
@@ -761,7 +761,7 @@ public class NamingContextListener
                     ",name=" + quotedResourceName);
         }
 
-        return (name);
+        return name;
 
     }
 

==================================================
StandardEngine.java
index 869d46c8ad..4f082c247d 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -1208,9 +1208,7 @@ public class StandardContext extends ContainerBase
      * @return <code>true</code> if classloading delegates to the parent classloader first
      */
     public boolean getDelegate() {
-
-        return (this.delegate);
-
+        return this.delegate;
     }
 
 
@@ -1234,9 +1232,7 @@ public class StandardContext extends ContainerBase
      * @return true if the internal naming support is used.
      */
     public boolean isUseNaming() {
-
-        return (useNaming);
-
+        return useNaming;
     }
 
 
@@ -1285,7 +1281,7 @@ public class StandardContext extends ContainerBase
 
     @Override
     public Object[] getApplicationLifecycleListeners() {
-        return (applicationLifecycleListenersObjects);
+        return applicationLifecycleListenersObjects;
     }
 
 
@@ -1321,9 +1317,7 @@ public class StandardContext extends ContainerBase
      * @return the antiResourceLocking flag for this Context.
      */
     public boolean getAntiResourceLocking() {
-
-        return (this.antiResourceLocking);
-
+        return this.antiResourceLocking;
     }
 
 
@@ -1359,7 +1353,7 @@ public class StandardContext extends ContainerBase
             }
         }
 
-        return (this.charsetMapper);
+        return this.charsetMapper;
 
     }
 
@@ -1664,9 +1658,7 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public String getDisplayName() {
-
-        return (this.displayName);
-
+        return this.displayName;
     }
 
 
@@ -1713,9 +1705,7 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public boolean getDistributable() {
-
-        return (this.distributable);
-
+        return this.distributable;
     }
 
     /**
@@ -1739,9 +1729,7 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public String getDocBase() {
-
-        return (this.docBase);
-
+        return this.docBase;
     }
 
 
@@ -1753,9 +1741,7 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public void setDocBase(String docBase) {
-
         this.docBase = docBase;
-
     }
 
     public String getJ2EEApplication() {
@@ -1913,9 +1899,7 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public LoginConfig getLoginConfig() {
-
-        return (this.loginConfig);
-
+        return this.loginConfig;
     }
 
 
@@ -1972,12 +1956,10 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public NamingResourcesImpl getNamingResources() {
-
         if (namingResources == null) {
             setNamingResources(new NamingResourcesImpl());
         }
-        return (namingResources);
-
+        return namingResources;
     }
 
 
@@ -2038,7 +2020,7 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public String getPath() {
-        return (path);
+        return path;
     }
 
 
@@ -2080,9 +2062,7 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public String getPublicId() {
-
-        return (this.publicId);
-
+        return this.publicId;
     }
 
 
@@ -2111,9 +2091,7 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public boolean getReloadable() {
-
-        return (this.reloadable);
-
+        return this.reloadable;
     }
 
 
@@ -2122,9 +2100,7 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public boolean getOverride() {
-
-        return (this.override);
-
+        return this.override;
     }
 
 
@@ -2134,9 +2110,7 @@ public class StandardContext extends ContainerBase
      * Is only set as deployment has change docRoot!
      */
     public String getOriginalDocBase() {
-
-        return (this.originalDocBase);
-
+        return this.originalDocBase;
     }
 
     /**
@@ -2159,13 +2133,13 @@ public class StandardContext extends ContainerBase
     @Override
     public ClassLoader getParentClassLoader() {
         if (parentClassLoader != null)
-            return (parentClassLoader);
+            return parentClassLoader;
         if (getPrivileged()) {
             return this.getClass().getClassLoader();
         } else if (parent != null) {
-            return (parent.getParentClassLoader());
+            return parent.getParentClassLoader();
         }
-        return (ClassLoader.getSystemClassLoader());
+        return ClassLoader.getSystemClassLoader();
     }
 
 
@@ -2174,9 +2148,7 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public boolean getPrivileged() {
-
-        return (this.privileged);
-
+        return this.privileged;
     }
 
 
@@ -2252,14 +2224,12 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public ServletContext getServletContext() {
-
         if (context == null) {
             context = new ApplicationContext(this);
             if (altDDName != null)
                 context.setAttribute(Globals.ALT_DD_ATTR,altDDName);
         }
-        return (context.getFacade());
-
+        return context.getFacade();
     }
 
 
@@ -2269,9 +2239,7 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public int getSessionTimeout() {
-
-        return (this.sessionTimeout);
-
+        return this.sessionTimeout;
     }
 
 
@@ -2303,9 +2271,7 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public boolean getSwallowOutput() {
-
-        return (this.swallowOutput);
-
+        return this.swallowOutput;
     }
 
 
@@ -2332,9 +2298,7 @@ public class StandardContext extends ContainerBase
      * @return the value of the unloadDelay flag.
      */
     public long getUnloadDelay() {
-
-        return (this.unloadDelay);
-
+        return this.unloadDelay;
     }
 
 
@@ -2361,9 +2325,7 @@ public class StandardContext extends ContainerBase
      * @return unpack WAR flag.
      */
     public boolean getUnpackWAR() {
-
-        return (unpackWAR);
-
+        return unpackWAR;
     }
 
 
@@ -2373,9 +2335,7 @@ public class StandardContext extends ContainerBase
      * @param unpackWAR <code>true</code> to unpack WARs on deployment
      */
     public void setUnpackWAR(boolean unpackWAR) {
-
         this.unpackWAR = unpackWAR;
-
     }
 
 
@@ -2408,9 +2368,7 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public String getWrapperClass() {
-
-        return (this.wrapperClassName);
-
+        return this.wrapperClassName;
     }
 
 
@@ -2533,9 +2491,7 @@ public class StandardContext extends ContainerBase
      * @return the Locale to character set mapper class for this Context.
      */
     public String getCharsetMapperClass() {
-
-        return (this.charsetMapperClass);
-
+        return this.charsetMapperClass;
     }
 
 
@@ -2581,9 +2537,7 @@ public class StandardContext extends ContainerBase
      * @return the work directory for this Context.
      */
     public String getWorkDir() {
-
-        return (this.workDir);
-
+        return this.workDir;
     }
 
 
@@ -2619,9 +2573,7 @@ public class StandardContext extends ContainerBase
      * @return the clearReferencesStopThreads flag for this Context.
      */
     public boolean getClearReferencesStopThreads() {
-
-        return (this.clearReferencesStopThreads);
-
+        return this.clearReferencesStopThreads;
     }
 
 
@@ -2646,7 +2598,7 @@ public class StandardContext extends ContainerBase
      * @return the clearReferencesStopTimerThreads flag for this Context.
      */
     public boolean getClearReferencesStopTimerThreads() {
-        return (this.clearReferencesStopTimerThreads);
+        return this.clearReferencesStopTimerThreads;
     }
 
 
@@ -2672,7 +2624,7 @@ public class StandardContext extends ContainerBase
      * Context.
      */
     public boolean getClearReferencesHttpClientKeepAliveThread() {
-        return (this.clearReferencesHttpClientKeepAliveThread);
+        return this.clearReferencesHttpClientKeepAliveThread;
     }
 
 
@@ -3326,7 +3278,7 @@ public class StandardContext extends ContainerBase
     public ApplicationParameter[] findApplicationParameters() {
 
         synchronized (applicationParametersLock) {
-            return (applicationParameters);
+            return applicationParameters;
         }
 
     }
@@ -3338,9 +3290,7 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public SecurityConstraint[] findConstraints() {
-
-        return (constraints);
-
+        return constraints;
     }
 
 
@@ -3364,11 +3314,9 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public ErrorPage findErrorPage(String exceptionType) {
-
         synchronized (exceptionPages) {
-            return (exceptionPages.get(exceptionType));
+            return exceptionPages.get(exceptionType);
         }
-
     }
 
 
@@ -3391,7 +3339,7 @@ public class StandardContext extends ContainerBase
                     results[i] = results1[i];
                 for (int i = results1.length; i < results.length; i++)
                     results[i] = results2[i - results1.length];
-                return (results);
+                return results;
             }
         }
 
@@ -3406,11 +3354,9 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public FilterDef findFilterDef(String filterName) {
-
         synchronized (filterDefs) {
-            return (filterDefs.get(filterName));
+            return filterDefs.get(filterName);
         }
-
     }
 
 
@@ -3419,12 +3365,10 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public FilterDef[] findFilterDefs() {
-
         synchronized (filterDefs) {
             FilterDef results[] = new FilterDef[filterDefs.size()];
-            return (filterDefs.values().toArray(results));
+            return filterDefs.values().toArray(results);
         }
-
     }
 
 
@@ -3444,11 +3388,9 @@ public class StandardContext extends ContainerBase
      * @param name Name of the desired message destination
      */
     public MessageDestination findMessageDestination(String name) {
-
         synchronized (messageDestinations) {
-            return (messageDestinations.get(name));
+            return messageDestinations.get(name);
         }
-
     }
 
 
@@ -3458,13 +3400,11 @@ public class StandardContext extends ContainerBase
      * is returned.
      */
     public MessageDestination[] findMessageDestinations() {
-
         synchronized (messageDestinations) {
             MessageDestination results[] =
                 new MessageDestination[messageDestinations.size()];
-            return (messageDestinations.values().toArray(results));
+            return messageDestinations.values().toArray(results);
         }
-
     }
 
 
@@ -3475,9 +3415,7 @@ public class StandardContext extends ContainerBase
      * @param name Name of the desired message destination ref
      */
     public MessageDestinationRef findMessageDestinationRef(String name) {
-
         return namingResources.findMessageDestinationRef(name);
-
     }
 
 
@@ -3487,9 +3425,7 @@ public class StandardContext extends ContainerBase
      * is returned.
      */
     public MessageDestinationRef[] findMessageDestinationRefs() {
-
         return namingResources.findMessageDestinationRefs();
-
     }
 
 
@@ -3501,9 +3437,7 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public String findMimeMapping(String extension) {
-
-        return (mimeMappings.get(extension.toLowerCase(Locale.ENGLISH)));
-
+        return mimeMappings.get(extension.toLowerCase(Locale.ENGLISH));
     }
 
 
@@ -3513,13 +3447,10 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public String[] findMimeMappings() {
-
         synchronized (mimeMappings) {
             String results[] = new String[mimeMappings.size()];
-            return
-                (mimeMappings.keySet().toArray(results));
+            return mimeMappings.keySet().toArray(results);
         }
-
     }
 
 
@@ -3558,16 +3489,14 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public String findRoleMapping(String role) {
-
         String realRole = null;
         synchronized (roleMappings) {
             realRole = roleMappings.get(role);
         }
         if (realRole != null)
-            return (realRole);
+            return realRole;
         else
-            return (role);
-
+            return role;
     }
 
 
@@ -3597,11 +3526,9 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public String[] findSecurityRoles() {
-
         synchronized (securityRolesLock) {
-            return (securityRoles);
+            return securityRoles;
         }
-
     }
 
 
@@ -3613,11 +3540,9 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public String findServletMapping(String pattern) {
-
         synchronized (servletMappingsLock) {
-            return (servletMappings.get(pattern));
+            return servletMappings.get(pattern);
         }
-
     }
 
 
@@ -3662,16 +3587,14 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public int[] findStatusPages() {
-
         synchronized (statusPages) {
             int results[] = new int[statusPages.size()];
             Iterator<Integer> elements = statusPages.keySet().iterator();
             int i = 0;
             while (elements.hasNext())
                 results[i++] = elements.next().intValue();
-            return (results);
+            return results;
         }
-
     }
 
 
@@ -3713,11 +3636,9 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public String[] findWelcomeFiles() {
-
         synchronized (welcomeFilesLock) {
-            return (welcomeFiles);
+            return welcomeFiles;
         }
-
     }
 
 
@@ -3727,11 +3648,9 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public String[] findWrapperLifecycles() {
-
         synchronized (wrapperLifecyclesLock) {
-            return (wrapperLifecycles);
+            return wrapperLifecycles;
         }
-
     }
 
 
@@ -3741,11 +3660,9 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public String[] findWrapperListeners() {
-
         synchronized (wrapperListenersLock) {
-            return (wrapperListeners);
+            return wrapperListeners;
         }
-
     }
 
 
@@ -4627,9 +4544,7 @@ public class StandardContext extends ContainerBase
      * @return the filter config object
      */
     public FilterConfig findFilterConfig(String name) {
-
-        return (filterConfigs.get(name));
-
+        return filterConfigs.get(name);
     }
 
 
@@ -4744,7 +4659,7 @@ public class StandardContext extends ContainerBase
                 ok = false;
             }
         }
-        return (ok);
+        return ok;
 
     }
 
@@ -5638,15 +5553,15 @@ public class StandardContext extends ContainerBase
     protected String adjustURLPattern(String urlPattern) {
 
         if (urlPattern == null)
-            return (urlPattern);
+            return urlPattern;
         if (urlPattern.startsWith("/") || urlPattern.startsWith("*."))
-            return (urlPattern);
+            return urlPattern;
         if (!isServlet22())
-            return (urlPattern);
+            return urlPattern;
         if(log.isDebugEnabled())
             log.debug(sm.getString("standardContext.urlPattern.patternWarning",
                          urlPattern));
-        return ("/" + urlPattern);
+        return "/" + urlPattern;
 
     }
 
@@ -5902,9 +5817,7 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public boolean getPaused() {
-
-        return (this.paused);
-
+        return this.paused;
     }
 
 

==================================================
StandardHost.java
index c3e403bf90..2522de60af 100644
--- a/java/org/apache/catalina/core/StandardEngine.java
+++ b/java/org/apache/catalina/core/StandardEngine.java
@@ -131,9 +131,7 @@ public class StandardEngine extends ContainerBase implements Engine {
      */
     @Override
     public String getDefaultHost() {
-
-        return (defaultHost);
-
+        return defaultHost;
     }
 
 
@@ -184,9 +182,7 @@ public class StandardEngine extends ContainerBase implements Engine {
      */
     @Override
     public Service getService() {
-
-        return (this.service);
-
+        return this.service;
     }
 
 
@@ -337,11 +333,11 @@ public class StandardEngine extends ContainerBase implements Engine {
     @Override
     public ClassLoader getParentClassLoader() {
         if (parentClassLoader != null)
-            return (parentClassLoader);
+            return parentClassLoader;
         if (service != null) {
-            return (service.getParentClassLoader());
+            return service.getParentClassLoader();
         }
-        return (ClassLoader.getSystemClassLoader());
+        return ClassLoader.getSystemClassLoader();
     }
 
 

==================================================
StandardHostValve.java
index 89ceb9739f..7b62be4312 100644
--- a/java/org/apache/catalina/core/StandardHost.java
+++ b/java/org/apache/catalina/core/StandardHost.java
@@ -212,7 +212,7 @@ public class StandardHost extends ContainerBase implements Host {
      */
     @Override
     public String getAppBase() {
-        return (this.appBase);
+        return this.appBase;
     }
 
 
@@ -272,9 +272,7 @@ public class StandardHost extends ContainerBase implements Host {
      */
     @Override
     public String getXmlBase() {
-
-        return (this.xmlBase);
-
+        return this.xmlBase;
     }
 
 
@@ -288,11 +286,9 @@ public class StandardHost extends ContainerBase implements Host {
      */
     @Override
     public void setXmlBase(String xmlBase) {
-
         String oldXmlBase = this.xmlBase;
         this.xmlBase = xmlBase;
         support.firePropertyChange("xmlBase", oldXmlBase, this.xmlBase);
-
     }
 
 
@@ -354,9 +350,7 @@ public class StandardHost extends ContainerBase implements Host {
      */
     @Override
     public boolean getAutoDeploy() {
-
-        return (this.autoDeploy);
-
+        return this.autoDeploy;
     }
 
 
@@ -382,9 +376,7 @@ public class StandardHost extends ContainerBase implements Host {
      */
     @Override
     public String getConfigClass() {
-
-        return (this.configClass);
-
+        return this.configClass;
     }
 
 
@@ -410,9 +402,7 @@ public class StandardHost extends ContainerBase implements Host {
      * for new web applications.
      */
     public String getContextClass() {
-
-        return (this.contextClass);
-
+        return this.contextClass;
     }
 
 
@@ -439,9 +429,7 @@ public class StandardHost extends ContainerBase implements Host {
      */
     @Override
     public boolean getDeployOnStartup() {
-
-        return (this.deployOnStartup);
-
+        return this.deployOnStartup;
     }
 
 
@@ -465,9 +453,7 @@ public class StandardHost extends ContainerBase implements Host {
      * @return <code>true</code> if XML context descriptors should be deployed.
      */
     public boolean isDeployXML() {
-
         return deployXML;
-
     }
 
 
@@ -477,9 +463,7 @@ public class StandardHost extends ContainerBase implements Host {
      * @param deployXML <code>true</code> if context descriptors should be deployed
      */
     public void setDeployXML(boolean deployXML) {
-
         this.deployXML = deployXML;
-
     }
 
 
@@ -487,9 +471,7 @@ public class StandardHost extends ContainerBase implements Host {
      * @return the copy XML config file flag for this component.
      */
     public boolean isCopyXML() {
-
         return this.copyXML;
-
     }
 
 
@@ -499,9 +481,7 @@ public class StandardHost extends ContainerBase implements Host {
      * @param copyXML The new copy XML flag
      */
     public void setCopyXML(boolean copyXML) {
-
         this.copyXML = copyXML;
-
     }
 
 
@@ -510,9 +490,7 @@ public class StandardHost extends ContainerBase implements Host {
      * for new web applications.
      */
     public String getErrorReportValveClass() {
-
-        return (this.errorReportValveClass);
-
+        return this.errorReportValveClass;
     }
 
 
@@ -539,9 +517,7 @@ public class StandardHost extends ContainerBase implements Host {
      */
     @Override
     public String getName() {
-
-        return (name);
-
+        return name;
     }
 
 
@@ -573,9 +549,7 @@ public class StandardHost extends ContainerBase implements Host {
      * @return <code>true</code> if WARs should be unpacked on deployment.
      */
     public boolean isUnpackWARs() {
-
-        return (unpackWARs);
-
+        return unpackWARs;
     }
 
 
@@ -585,9 +559,7 @@ public class StandardHost extends ContainerBase implements Host {
      * @param unpackWARs <code>true</code> to unpack WARs on deployment
      */
     public void setUnpackWARs(boolean unpackWARs) {
-
         this.unpackWARs = unpackWARs;
-
     }
 
 
@@ -595,8 +567,7 @@ public class StandardHost extends ContainerBase implements Host {
      * @return host work directory base.
      */
     public String getWorkDir() {
-
-        return (workDir);
+        return workDir;
     }
 
 
@@ -606,7 +577,6 @@ public class StandardHost extends ContainerBase implements Host {
      * @param workDir the new base work folder for this host
      */
     public void setWorkDir(String workDir) {
-
         this.workDir = workDir;
     }
 
@@ -787,11 +757,9 @@ public class StandardHost extends ContainerBase implements Host {
      */
     @Override
     public String[] findAliases() {
-
         synchronized (aliasesLock) {
-            return (this.aliases);
+            return this.aliases;
         }
-
     }
 
 

==================================================
StandardPipeline.java
index 6b164feb05..7b6ea52533 100644
--- a/java/org/apache/catalina/core/StandardHostValve.java
+++ b/java/org/apache/catalina/core/StandardHostValve.java
@@ -424,14 +424,14 @@ final class StandardHostValve extends ValveBase {
         (Context context, Throwable exception) {
 
         if (exception == null) {
-            return (null);
+            return null;
         }
         Class<?> clazz = exception.getClass();
         String name = clazz.getName();
         while (!Object.class.equals(clazz)) {
             ErrorPage errorPage = context.findErrorPage(name);
             if (errorPage != null) {
-                return (errorPage);
+                return errorPage;
             }
             clazz = clazz.getSuperclass();
             if (clazz == null) {
@@ -439,7 +439,7 @@ final class StandardHostValve extends ValveBase {
             }
             name = clazz.getName();
         }
-        return (null);
+        return null;
 
     }
 }

==================================================
StandardServer.java
index add2ccc696..b6e17d8db4 100644
--- a/java/org/apache/catalina/core/StandardPipeline.java
+++ b/java/org/apache/catalina/core/StandardPipeline.java
@@ -137,9 +137,7 @@ public class StandardPipeline extends LifecycleBase implements Pipeline {
      */
     @Override
     public Container getContainer() {
-
-        return (this.container);
-
+        return this.container;
     }
 
 
@@ -150,9 +148,7 @@ public class StandardPipeline extends LifecycleBase implements Pipeline {
      */
     @Override
     public void setContainer(Container container) {
-
         this.container = container;
-
     }
 
 
@@ -239,9 +235,7 @@ public class StandardPipeline extends LifecycleBase implements Pipeline {
      */
     @Override
     public Valve getBasic() {
-
-        return (this.basic);
-
+        return this.basic;
     }
 
 

==================================================
StandardService.java
index 9a3c9ec5f4..82f4ff7007 100644
--- a/java/org/apache/catalina/core/StandardServer.java
+++ b/java/org/apache/catalina/core/StandardServer.java
@@ -187,9 +187,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
      */
     @Override
     public javax.naming.Context getGlobalNamingContext() {
-
-        return (this.globalNamingContext);
-
+        return this.globalNamingContext;
     }
 
 
@@ -198,11 +196,8 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
      *
      * @param globalNamingContext The new global naming resource context
      */
-    public void setGlobalNamingContext
-        (javax.naming.Context globalNamingContext) {
-
+    public void setGlobalNamingContext(javax.naming.Context globalNamingContext) {
         this.globalNamingContext = globalNamingContext;
-
     }
 
 
@@ -211,9 +206,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
      */
     @Override
     public NamingResourcesImpl getGlobalNamingResources() {
-
-        return (this.globalNamingResources);
-
+        return this.globalNamingResources;
     }
 
 
@@ -269,9 +262,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
      */
     @Override
     public int getPort() {
-
-        return (this.port);
-
+        return this.port;
     }
 
 
@@ -282,9 +273,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
      */
     @Override
     public void setPort(int port) {
-
         this.port = port;
-
     }
 
 
@@ -293,9 +282,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
      */
     @Override
     public String getAddress() {
-
-        return (this.address);
-
+        return this.address;
     }
 
 
@@ -306,9 +293,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
      */
     @Override
     public void setAddress(String address) {
-
         this.address = address;
-
     }
 
     /**
@@ -316,9 +301,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
      */
     @Override
     public String getShutdown() {
-
-        return (this.shutdown);
-
+        return this.shutdown;
     }
 
 
@@ -329,9 +312,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
      */
     @Override
     public void setShutdown(String shutdown) {
-
         this.shutdown = shutdown;
-
     }
 
 
@@ -552,19 +533,17 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
      */
     @Override
     public Service findService(String name) {
-
         if (name == null) {
-            return (null);
+            return null;
         }
         synchronized (servicesLock) {
             for (int i = 0; i < services.length; i++) {
                 if (name.equals(services[i].getName())) {
-                    return (services[i]);
+                    return services[i];
                 }
             }
         }
-        return (null);
-
+        return null;
     }
 
 
@@ -689,12 +668,10 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("StandardServer[");
         sb.append(getPort());
         sb.append("]");
-        return (sb.toString());
-
+        return sb.toString();
     }
 
 
@@ -898,11 +875,11 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
     @Override
     public ClassLoader getParentClassLoader() {
         if (parentClassLoader != null)
-            return (parentClassLoader);
+            return parentClassLoader;
         if (catalina != null) {
-            return (catalina.getParentClassLoader());
+            return catalina.getParentClassLoader();
         }
-        return (ClassLoader.getSystemClassLoader());
+        return ClassLoader.getSystemClassLoader();
     }
 
     /**

==================================================
StandardWrapper.java
index 6f1e80566b..b8852f8690 100644
--- a/java/org/apache/catalina/core/StandardService.java
+++ b/java/org/apache/catalina/core/StandardService.java
@@ -327,7 +327,7 @@ public class StandardService extends LifecycleMBeanBase implements Service {
         StringBuilder sb = new StringBuilder("StandardService[");
         sb.append(getName());
         sb.append("]");
-        return (sb.toString());
+        return sb.toString();
     }
 
 

==================================================
StandardWrapperFacade.java
index a0715c5d96..5ab11f473b 100644
--- a/java/org/apache/catalina/core/StandardWrapper.java
+++ b/java/org/apache/catalina/core/StandardWrapper.java
@@ -298,9 +298,7 @@ public class StandardWrapper extends ContainerBase
      */
     @Override
     public long getAvailable() {
-
-        return (this.available);
-
+        return this.available;
     }
 
 
@@ -315,7 +313,6 @@ public class StandardWrapper extends ContainerBase
      */
     @Override
     public void setAvailable(long available) {
-
         long oldAvailable = this.available;
         if (available > System.currentTimeMillis())
             this.available = available;
@@ -323,7 +320,6 @@ public class StandardWrapper extends ContainerBase
             this.available = 0L;
         support.firePropertyChange("available", Long.valueOf(oldAvailable),
                                    Long.valueOf(this.available));
-
     }
 
 
@@ -352,7 +348,7 @@ public class StandardWrapper extends ContainerBase
              */
              return Integer.MAX_VALUE;
         } else {
-            return (this.loadOnStartup);
+            return this.loadOnStartup;
         }
     }
 
@@ -406,9 +402,7 @@ public class StandardWrapper extends ContainerBase
      * thread model servlet is used.
      */
     public int getMaxInstances() {
-
-        return (this.maxInstances);
-
+        return this.maxInstances;
     }
 
 
@@ -454,9 +448,7 @@ public class StandardWrapper extends ContainerBase
      */
     @Override
     public String getRunAs() {
-
-        return (this.runAs);
-
+        return this.runAs;
     }
 
 
@@ -480,9 +472,7 @@ public class StandardWrapper extends ContainerBase
      */
     @Override
     public String getServletClass() {
-
-        return (this.servletClass);
-
+        return this.servletClass;
     }
 
 
@@ -1435,9 +1425,7 @@ public class StandardWrapper extends ContainerBase
      */
     @Override
     public String getInitParameter(String name) {
-
-        return (findInitParameter(name));
-
+        return findInitParameter(name);
     }
 
 
@@ -1463,14 +1451,12 @@ public class StandardWrapper extends ContainerBase
      */
     @Override
     public ServletContext getServletContext() {
-
         if (parent == null)
-            return (null);
+            return null;
         else if (!(parent instanceof Context))
-            return (null);
+            return null;
         else
-            return (((Context) parent).getServletContext());
-
+            return ((Context) parent).getServletContext();
     }
 
 
@@ -1479,9 +1465,7 @@ public class StandardWrapper extends ContainerBase
      */
     @Override
     public String getServletName() {
-
-        return (getName());
-
+        return getName();
     }
 
     public long getProcessingTime() {

==================================================
CsrfPreventionFilter.java
index f48b303db0..7dc506f0bf 100644
--- a/java/org/apache/catalina/core/StandardWrapperFacade.java
+++ b/java/org/apache/catalina/core/StandardWrapperFacade.java
@@ -81,7 +81,7 @@ public final class StandardWrapperFacade
                 context = ((ApplicationContext) context).getFacade();
             }
         }
-        return (context);
+        return context;
     }
 
 

==================================================
CollectedInfo.java
index 434a110369..ed6517c283 100644
--- a/java/org/apache/catalina/filters/CsrfPreventionFilter.java
+++ b/java/org/apache/catalina/filters/CsrfPreventionFilter.java
@@ -178,7 +178,7 @@ public class CsrfPreventionFilter extends CsrfPreventionFilterBase {
         private String addNonce(String url) {
 
             if ((url == null) || (nonce == null)) {
-                return (url);
+                return url;
             }
 
             String path = url;
@@ -205,7 +205,7 @@ public class CsrfPreventionFilter extends CsrfPreventionFilterBase {
             sb.append('=');
             sb.append(nonce);
             sb.append(anchor);
-            return (sb.toString());
+            return sb.toString();
         }
     }
 

==================================================
FarmWarDeployer.java
index c166ecfea7..3ecae4604a 100644
--- a/java/org/apache/catalina/ha/backend/CollectedInfo.java
+++ b/java/org/apache/catalina/ha/backend/CollectedInfo.java
@@ -83,7 +83,7 @@ public class CollectedInfo {
                 break; /* Done port and host are the expected ones */
         }
         if (objName == null)
-            throw(new Exception("Can't find connector for " + host + ":" + port));
+            throw new Exception("Can't find connector for " + host + ":" + port);
         this.port = iport;
         this.host = shost;
 
@@ -91,7 +91,7 @@ public class CollectedInfo {
 
     public void refresh() throws Exception {
         if (mBeanServer == null || objName == null) {
-            throw(new Exception("Not initialized!!!"));
+            throw new Exception("Not initialized!!!");
         }
         Integer imax = (Integer) mBeanServer.getAttribute(objName, "maxThreads");
 

==================================================
ClusterSessionListener.java
index 81cf96eb05..a65adb6e4f 100644
--- a/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
+++ b/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
@@ -700,9 +700,7 @@ public class FarmWarDeployer extends ClusterListener
      * @return the frequency of watcher checks.
      */
     public int getProcessDeployFrequency() {
-
-        return (this.processDeployFrequency);
-
+        return this.processDeployFrequency;
     }
 
     /**

==================================================
DeltaManager.java
index e9f5d28f3b..5af24b89fc 100644
--- a/java/org/apache/catalina/ha/session/ClusterSessionListener.java
+++ b/java/org/apache/catalina/ha/session/ClusterSessionListener.java
@@ -105,7 +105,7 @@ public class ClusterSessionListener extends ClusterListener {
      */
     @Override
     public boolean accept(ClusterMessage msg) {
-        return (msg instanceof SessionMessage);
+        return msg instanceof SessionMessage;
     }
 }
 

==================================================
DeltaSession.java
index 7b7dd69119..73f3049572 100644
--- a/java/org/apache/catalina/ha/session/DeltaManager.java
+++ b/java/org/apache/catalina/ha/session/DeltaManager.java
@@ -426,7 +426,7 @@ public class DeltaManager extends ClusterManagerBase{
         if (log.isDebugEnabled())
             log.debug(sm.getString("deltaManager.createSession.newSession",
                     session.getId(), Integer.valueOf(sessions.size())));
-        return (session);
+        return session;
     }
 
     /**

==================================================
SimpleTcpCluster.java
index 3e375f31b1..636a3de1a1 100644
--- a/java/org/apache/catalina/ha/session/DeltaSession.java
+++ b/java/org/apache/catalina/ha/session/DeltaSession.java
@@ -401,7 +401,8 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
                 }
             }
         }
-        return (this.isValid);
+
+        return this.isValid;
     }
 
     /**
@@ -498,7 +499,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
         sb.append("DeltaSession[");
         sb.append(id);
         sb.append("]");
-        return (sb.toString());
+        return sb.toString();
     }
 
     @Override

==================================================
WebappClassLoaderBase.java
index 302bf8aea7..40e3c8344c 100644
--- a/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java
+++ b/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java
@@ -224,7 +224,7 @@ public class SimpleTcpCluster extends LifecycleMBeanBase
      */
     @Override
     public Container getContainer() {
-        return (this.container);
+        return this.container;
     }
 
     /**

==================================================
WebappLoader.java
index 2d3d7676be..e7c7fd02d6 100644
--- a/java/org/apache/catalina/loader/WebappClassLoaderBase.java
+++ b/java/org/apache/catalina/loader/WebappClassLoaderBase.java
@@ -426,9 +426,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
      *   the parent first. The default in Tomcat is <code>false</code>.
      */
     public boolean getDelegate() {
-
-        return (this.delegate);
-
+        return this.delegate;
     }
 
 
@@ -522,7 +520,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
      * @return the clearReferencesStopThreads flag for this Context.
      */
     public boolean getClearReferencesStopThreads() {
-        return (this.clearReferencesStopThreads);
+        return this.clearReferencesStopThreads;
     }
 
 
@@ -541,7 +539,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
      * @return the clearReferencesStopTimerThreads flag for this Context.
      */
     public boolean getClearReferencesStopTimerThreads() {
-        return (this.clearReferencesStopTimerThreads);
+        return this.clearReferencesStopTimerThreads;
     }
 
 
@@ -560,7 +558,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
      * @return the clearReferencesLogFactoryRelease flag for this Context.
      */
     public boolean getClearReferencesLogFactoryRelease() {
-        return (this.clearReferencesLogFactoryRelease);
+        return this.clearReferencesLogFactoryRelease;
     }
 
 
@@ -581,7 +579,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
      * Context.
      */
     public boolean getClearReferencesHttpClientKeepAliveThread() {
-        return (this.clearReferencesHttpClientKeepAliveThread);
+        return this.clearReferencesHttpClientKeepAliveThread;
     }
 
 
@@ -743,7 +741,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
                 sb.append(transformer).append("\r\n");
             }
         }
-        return (sb.toString());
+        return sb.toString();
     }
 
 
@@ -849,7 +847,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
             }
             log.debug("      Loaded by " + cl.toString());
         }
-        return (clazz);
+        return clazz;
 
     }
 
@@ -987,7 +985,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
             if (url != null) {
                 if (log.isDebugEnabled())
                     log.debug("  --> Returning '" + url.toString() + "'");
-                return (url);
+                return url;
             }
         }
 
@@ -996,7 +994,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
         if (url != null) {
             if (log.isDebugEnabled())
                 log.debug("  --> Returning '" + url.toString() + "'");
-            return (url);
+            return url;
         }
 
         // (3) Delegate to parent unconditionally if not already attempted
@@ -1005,14 +1003,14 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
             if (url != null) {
                 if (log.isDebugEnabled())
                     log.debug("  --> Returning '" + url.toString() + "'");
-                return (url);
+                return url;
             }
         }
 
         // (4) Resource was not found
         if (log.isDebugEnabled())
             log.debug("  --> Resource not found, returning null");
-        return (null);
+        return null;
 
     }
 
@@ -1105,9 +1103,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
      */
     @Override
     public Class<?> loadClass(String name) throws ClassNotFoundException {
-
-        return (loadClass(name, false));
-
+        return loadClass(name, false);
     }
 
 
@@ -1154,7 +1150,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
                     log.debug("  Returning class from cache");
                 if (resolve)
                     resolveClass(clazz);
-                return (clazz);
+                return clazz;
             }
 
             // (0.1) Check our previously loaded class cache
@@ -1164,7 +1160,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
                     log.debug("  Returning class from cache");
                 if (resolve)
                     resolveClass(clazz);
-                return (clazz);
+                return clazz;
             }
 
             // (0.2) Try loading the class with the system class loader, to prevent
@@ -1195,7 +1191,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
                     if (clazz != null) {
                         if (resolve)
                             resolveClass(clazz);
-                        return (clazz);
+                        return clazz;
                     }
                 } catch (ClassNotFoundException e) {
                     // Ignore
@@ -1230,7 +1226,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
                             log.debug("  Loading class from parent");
                         if (resolve)
                             resolveClass(clazz);
-                        return (clazz);
+                        return clazz;
                     }
                 } catch (ClassNotFoundException e) {
                     // Ignore
@@ -1247,7 +1243,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
                         log.debug("  Loading class from local repository");
                     if (resolve)
                         resolveClass(clazz);
-                    return (clazz);
+                    return clazz;
                 }
             } catch (ClassNotFoundException e) {
                 // Ignore
@@ -1264,7 +1260,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
                             log.debug("  Loading class from parent");
                         if (resolve)
                             resolveClass(clazz);
-                        return (clazz);
+                        return clazz;
                     }
                 } catch (ClassNotFoundException e) {
                     // Ignore
@@ -1308,7 +1304,6 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
      */
     @Override
     protected PermissionCollection getPermissions(CodeSource codeSource) {
-
         String codeUrl = codeSource.getLocation().toString();
         PermissionCollection pc;
         if ((pc = loaderPC.get(codeUrl)) == null) {
@@ -1322,8 +1317,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
                 loaderPC.put(codeUrl,pc);
             }
         }
-        return (pc);
-
+        return pc;
     }
 
 

==================================================
ManagerServlet.java
index 91c6dc5e07..c28c370631 100644
--- a/java/org/apache/catalina/loader/WebappLoader.java
+++ b/java/org/apache/catalina/loader/WebappLoader.java
@@ -224,7 +224,7 @@ public class WebappLoader extends LifecycleMBeanBase
      * @return the ClassLoader class name.
      */
     public String getLoaderClass() {
-        return (this.loaderClass);
+        return this.loaderClass;
     }
 
 

==================================================
StatusTransformer.java
index c10d1c93ef..a9856c718f 100644
--- a/java/org/apache/catalina/manager/ManagerServlet.java
+++ b/java/org/apache/catalina/manager/ManagerServlet.java
@@ -231,9 +231,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
      */
     @Override
     public Wrapper getWrapper() {
-
-        return (this.wrapper);
-
+        return this.wrapper;
     }
 
 

==================================================
HostManagerServlet.java
index b95818d725..aa6bfa494f 100644
--- a/java/org/apache/catalina/manager/StatusTransformer.java
+++ b/java/org/apache/catalina/manager/StatusTransformer.java
@@ -947,7 +947,7 @@ public class StatusTransformer {
                 result.append(content[i]);
             }
         }
-        return (result.toString());
+        return result.toString();
 
     }
 

==================================================
Mapper.java
index 605c10293b..617bf707bf 100644
--- a/java/org/apache/catalina/manager/host/HostManagerServlet.java
+++ b/java/org/apache/catalina/manager/host/HostManagerServlet.java
@@ -141,9 +141,7 @@ public class HostManagerServlet
      */
     @Override
     public Wrapper getWrapper() {
-
-        return (this.wrapper);
-
+        return this.wrapper;
     }
 
 

==================================================
ContextResourceLinkMBean.java
index 091c34d964..efe1b98b75 100644
--- a/java/org/apache/catalina/mapper/Mapper.java
+++ b/java/org/apache/catalina/mapper/Mapper.java
@@ -1449,7 +1449,6 @@ public final class Mapper {
      * Find the position of the last slash in the given char chunk.
      */
     private static final int lastSlash(CharChunk name) {
-
         char[] c = name.getBuffer();
         int end = name.getEnd();
         int start = name.getStart();
@@ -1461,8 +1460,7 @@ public final class Mapper {
             }
         }
 
-        return (pos);
-
+        return pos;
     }
 
 
@@ -1470,7 +1468,6 @@ public final class Mapper {
      * Find the position of the nth slash, in the given char chunk.
      */
     private static final int nthSlash(CharChunk name, int n) {
-
         char[] c = name.getBuffer();
         int end = name.getEnd();
         int start = name.getStart();
@@ -1484,8 +1481,7 @@ public final class Mapper {
             }
         }
 
-        return (pos);
-
+        return pos;
     }
 
 

==================================================
ContextResourceMBean.java
index 061dce1bd7..7f688f19c6 100644
--- a/java/org/apache/catalina/mbeans/ContextResourceLinkMBean.java
+++ b/java/org/apache/catalina/mbeans/ContextResourceLinkMBean.java
@@ -75,13 +75,13 @@ public class ContextResourceLinkMBean extends BaseCatalinaMBean<ContextResourceL
 
         String value = null;
         if ("global".equals(name)) {
-            return (cl.getGlobal());
+            return cl.getGlobal();
         } else if ("description".equals(name)) {
-            return (cl.getDescription());
+            return cl.getDescription();
         } else if ("name".equals(name)) {
-            return (cl.getName());
+            return cl.getName();
         } else if ("type".equals(name)) {
-            return (cl.getType());
+            return cl.getType();
         } else {
             value = (String) cl.getProperty(name);
             if (value == null) {

==================================================
MBeanFactory.java
index 7721d0a9fa..4c955de3ab 100644
--- a/java/org/apache/catalina/mbeans/ContextResourceMBean.java
+++ b/java/org/apache/catalina/mbeans/ContextResourceMBean.java
@@ -74,15 +74,15 @@ public class ContextResourceMBean extends BaseCatalinaMBean<ContextResource> {
 
         String value = null;
         if ("auth".equals(name)) {
-            return (cr.getAuth());
+            return cr.getAuth();
         } else if ("description".equals(name)) {
-            return (cr.getDescription());
+            return cr.getDescription();
         } else if ("name".equals(name)) {
-            return (cr.getName());
+            return cr.getName();
         } else if ("scope".equals(name)) {
-            return (cr.getScope());
+            return cr.getScope();
         } else if ("type".equals(name)) {
-            return (cr.getType());
+            return cr.getType();
         } else {
             value = (String) cr.getProperty(name);
             if (value == null) {

==================================================
MBeanUtils.java
index d7360e50e0..a3755926e1 100644
--- a/java/org/apache/catalina/mbeans/MBeanFactory.java
+++ b/java/org/apache/catalina/mbeans/MBeanFactory.java
@@ -247,7 +247,7 @@ public class MBeanFactory {
             oname = ((JmxEnabled) realm).getObjectName();
         }
         if (oname != null) {
-            return (oname.toString());
+            return oname.toString();
         } else {
             return null;
         }
@@ -303,7 +303,7 @@ public class MBeanFactory {
         // Return the corresponding MBean name
         ObjectName coname = retobj.getObjectName();
 
-        return (coname.toString());
+        return coname.toString();
     }
 
 
@@ -515,7 +515,7 @@ public class MBeanFactory {
         engine.addChild(host);
 
         // Return the corresponding MBean name
-        return (host.getObjectName().toString());
+        return host.getObjectName().toString();
 
     }
 
@@ -576,7 +576,7 @@ public class MBeanFactory {
         }
         ObjectName oname = manager.getObjectName();
         if (oname != null) {
-            return (oname.toString());
+            return oname.toString();
         } else {
             return null;
         }
@@ -667,7 +667,7 @@ public class MBeanFactory {
         //ObjectName oname = loader.getObjectName();
         ObjectName oname =
             MBeanUtils.createObjectName(pname.getDomain(), loader);
-        return (oname.toString());
+        return oname.toString();
 
     }
 

==================================================
DataSourceRealm.java
index 765424ccd9..0992662ece 100644
--- a/java/org/apache/catalina/mbeans/MBeanUtils.java
+++ b/java/org/apache/catalina/mbeans/MBeanUtils.java
@@ -91,7 +91,7 @@ public class MBeanUtils {
         String className = component.getClass().getName();
         for (int i = 0; i < exceptions.length; i++) {
             if (className.equals(exceptions[i][0])) {
-                return (exceptions[i][1]);
+                return exceptions[i][1];
             }
         }
 
@@ -99,7 +99,7 @@ public class MBeanUtils {
         int period = className.lastIndexOf('.');
         if (period >= 0)
             className = className.substring(period + 1);
-        return (className);
+        return className;
 
     }
 
@@ -130,7 +130,7 @@ public class MBeanUtils {
             mserver.unregisterMBean(oname);
         }
         mserver.registerMBean(mbean, oname);
-        return (mbean);
+        return mbean;
 
     }
 
@@ -161,7 +161,7 @@ public class MBeanUtils {
             mserver.unregisterMBean(oname);
         }
         mserver.registerMBean(mbean, oname);
-        return (mbean);
+        return mbean;
 
     }
 
@@ -192,7 +192,7 @@ public class MBeanUtils {
             mserver.unregisterMBean(oname);
         }
         mserver.registerMBean(mbean, oname);
-        return (mbean);
+        return mbean;
 
     }
 
@@ -223,7 +223,7 @@ public class MBeanUtils {
             mserver.unregisterMBean(oname);
         }
         mserver.registerMBean(mbean, oname);
-        return (mbean);
+        return mbean;
 
     }
 
@@ -254,7 +254,7 @@ public class MBeanUtils {
             mserver.unregisterMBean(oname);
         }
         mserver.registerMBean(mbean, oname);
-        return (mbean);
+        return mbean;
 
     }
 
@@ -285,7 +285,7 @@ public class MBeanUtils {
             mserver.unregisterMBean(oname);
         }
         mserver.registerMBean(mbean, oname);
-        return (mbean);
+        return mbean;
 
     }
 
@@ -316,7 +316,7 @@ public class MBeanUtils {
             mserver.unregisterMBean(oname);
         }
         mserver.registerMBean(mbean, oname);
-        return (mbean);
+        return mbean;
 
     }
 
@@ -349,7 +349,7 @@ public class MBeanUtils {
                         ",context=" + cn.getDisplayName() +
                         ",name=" + environment.getName());
         }
-        return (name);
+        return name;
 
     }
 
@@ -386,7 +386,7 @@ public class MBeanUtils {
                     ",name=" + quotedResourceName);
         }
 
-        return (name);
+        return name;
 
     }
 
@@ -423,7 +423,7 @@ public class MBeanUtils {
                     ",name=" + quotedResourceLinkName);
         }
 
-        return (name);
+        return name;
 
     }
 
@@ -445,7 +445,7 @@ public class MBeanUtils {
         name = new ObjectName(domain + ":type=Group,groupname=" +
                               ObjectName.quote(group.getGroupname()) +
                               ",database=" + group.getUserDatabase().getId());
-        return (name);
+        return name;
 
     }
 
@@ -528,7 +528,7 @@ public class MBeanUtils {
         ObjectName name = null;
         name = new ObjectName(domain + ":type=UserDatabase,database=" +
                               userDatabase.getId());
-        return (name);
+        return name;
 
     }
 
@@ -538,7 +538,6 @@ public class MBeanUtils {
      * @return the singleton registry
      */
     public static synchronized Registry createRegistry() {
-
         if (registry == null) {
             registry = Registry.getRegistry(null, null);
             ClassLoader cl = MBeanUtils.class.getClassLoader();
@@ -559,8 +558,7 @@ public class MBeanUtils {
             registry.loadDescriptors("org.apache.catalina.storeconfig",  cl);
             registry.loadDescriptors("org.apache.tomcat.util.descriptor.web",  cl);
         }
-        return (registry);
-
+        return registry;
     }
 
 
@@ -571,12 +569,10 @@ public class MBeanUtils {
      * @return the singleton MBean server
      */
     public static synchronized MBeanServer createServer() {
-
         if (mserver == null) {
             mserver = Registry.getRegistry(null, null).getMBeanServer();
         }
-        return (mserver);
-
+        return mserver;
     }
 
 

==================================================
JAASRealm.java
index 6549ce8d07..3e3b92c2ea 100644
--- a/java/org/apache/catalina/realm/DataSourceRealm.java
+++ b/java/org/apache/catalina/realm/DataSourceRealm.java
@@ -456,9 +456,9 @@ public class DataSourceRealm extends RealmBase {
             return new GenericPrincipal(username, null, null);
         }
         try {
-            return (new GenericPrincipal(username,
+            return new GenericPrincipal(username,
                     getPassword(dbConnection, username),
-                    getRoles(dbConnection, username)));
+                    getRoles(dbConnection, username));
         } finally {
             close(dbConnection);
         }
@@ -540,7 +540,7 @@ public class DataSourceRealm extends RealmBase {
             dbConnection.prepareStatement(preparedCredentials);
 
         credentials.setString(1, username);
-        return (credentials);
+        return credentials;
 
     }
 
@@ -560,7 +560,7 @@ public class DataSourceRealm extends RealmBase {
             dbConnection.prepareStatement(preparedRoles);
 
         roles.setString(1, username);
-        return (roles);
+        return roles;
 
     }
 

==================================================
JDBCRealm.java
index b13ec62635..a372522331 100644
--- a/java/org/apache/catalina/realm/JAASRealm.java
+++ b/java/org/apache/catalina/realm/JAASRealm.java
@@ -247,7 +247,7 @@ public class JAASRealm extends RealmBase {
      protected String roleClassNames = null;
 
      public String getRoleClassNames() {
-         return (this.roleClassNames);
+         return this.roleClassNames;
      }
 
      /**
@@ -303,7 +303,7 @@ public class JAASRealm extends RealmBase {
      protected String userClassNames = null;
 
      public String getUserClassNames() {
-         return (this.userClassNames);
+         return this.userClassNames;
      }
 
      /**
@@ -401,7 +401,7 @@ public class JAASRealm extends RealmBase {
         } catch (Throwable e) {
             ExceptionUtils.handleThrowable(e);
             log.error(sm.getString("jaasRealm.unexpectedError"), e);
-            return (null);
+            return null;
         } finally {
             if(!isUseContextClassLoader()) {
               Thread.currentThread().setContextClassLoader(ocl);
@@ -419,27 +419,27 @@ public class JAASRealm extends RealmBase {
             if (subject == null) {
                 if( log.isDebugEnabled())
                     log.debug(sm.getString("jaasRealm.failedLogin", username));
-                return (null);
+                return null;
             }
         } catch (AccountExpiredException e) {
             if (log.isDebugEnabled())
                 log.debug(sm.getString("jaasRealm.accountExpired", username));
-            return (null);
+            return null;
         } catch (CredentialExpiredException e) {
             if (log.isDebugEnabled())
                 log.debug(sm.getString("jaasRealm.credentialExpired", username));
-            return (null);
+            return null;
         } catch (FailedLoginException e) {
             if (log.isDebugEnabled())
                 log.debug(sm.getString("jaasRealm.failedLogin", username));
-            return (null);
+            return null;
         } catch (LoginException e) {
             log.warn(sm.getString("jaasRealm.loginException", username), e);
-            return (null);
+            return null;
         } catch (Throwable e) {
             ExceptionUtils.handleThrowable(e);
             log.error(sm.getString("jaasRealm.unexpectedError"), e);
-            return (null);
+            return null;
         }
 
         if( log.isDebugEnabled())
@@ -449,13 +449,13 @@ public class JAASRealm extends RealmBase {
         Principal principal = createPrincipal(username, subject, loginContext);
         if (principal == null) {
             log.debug(sm.getString("jaasRealm.authenticateFailure", username));
-            return (null);
+            return null;
         }
         if (log.isDebugEnabled()) {
             log.debug(sm.getString("jaasRealm.authenticateSuccess", username));
         }
 
-        return (principal);
+        return principal;
         } catch( Throwable t) {
             log.error( "error ", t);
             return null;
@@ -470,9 +470,7 @@ public class JAASRealm extends RealmBase {
      */
     @Override
     protected String getPassword(String username) {
-
-        return (null);
-
+        return null;
     }
 
 

==================================================
JNDIRealm.java
index 70ff20d5c5..6e2ee26b31 100644
--- a/java/org/apache/catalina/realm/JDBCRealm.java
+++ b/java/org/apache/catalina/realm/JDBCRealm.java
@@ -322,7 +322,7 @@ public class JDBCRealm
 
 
                 // Return the Principal (if any)
-                return (principal);
+                return principal;
 
             } catch (SQLException e) {
 
@@ -404,7 +404,7 @@ public class JDBCRealm
         ArrayList<String> roles = getRoles(username);
 
         // Create and return a suitable Principal for this user
-        return (new GenericPrincipal(username, credentials, roles));
+        return new GenericPrincipal(username, credentials, roles);
     }
 
 
@@ -490,7 +490,7 @@ public class JDBCRealm
             preparedCredentials.setString(1, username);
         }
 
-        return (preparedCredentials);
+        return preparedCredentials;
     }
 
 
@@ -557,9 +557,9 @@ public class JDBCRealm
     @Override
     protected synchronized Principal getPrincipal(String username) {
 
-        return (new GenericPrincipal(username,
+        return new GenericPrincipal(username,
                                      getPassword(username),
-                                     getRoles(username)));
+                                     getRoles(username));
 
     }
 
@@ -633,7 +633,7 @@ public class JDBCRealm
 
         // Do nothing if there is a database connection already open
         if (dbConnection != null)
-            return (dbConnection);
+            return dbConnection;
 
         // Instantiate our database driver if necessary
         if (driver == null) {
@@ -658,7 +658,7 @@ public class JDBCRealm
                     "jdbcRealm.open.invalidurl",driverName, connectionURL));
         }
         dbConnection.setAutoCommit(false);
-        return (dbConnection);
+        return dbConnection;
 
     }
 
@@ -689,7 +689,7 @@ public class JDBCRealm
         }
 
         preparedRoles.setString(1, username);
-        return (preparedRoles);
+        return preparedRoles;
 
     }
 

==================================================
MemoryRealm.java
index 11c164ad2d..2d6dfa4894 100644
--- a/java/org/apache/catalina/realm/JNDIRealm.java
+++ b/java/org/apache/catalina/realm/JNDIRealm.java
@@ -1349,7 +1349,7 @@ public class JNDIRealm extends RealmBase {
                             if (containerLog.isDebugEnabled()) {
                                 containerLog.debug("Found roles: " + roles.toString());
                             }
-                            return (new GenericPrincipal(username, credentials, roles));
+                            return new GenericPrincipal(username, credentials, roles);
                         }
                     } catch (InvalidNameException ine) {
                         // Log the problem for posterity

==================================================
RealmBase.java
index 7944240801..d8611d2336 100644
--- a/java/org/apache/catalina/realm/MemoryRealm.java
+++ b/java/org/apache/catalina/realm/MemoryRealm.java
@@ -182,7 +182,6 @@ public class MemoryRealm  extends RealmBase {
      * the XML input file, creating a new one if necessary.
      */
     protected synchronized Digester getDigester() {
-
         if (digester == null) {
             digester = new Digester();
             digester.setValidating(false);
@@ -195,8 +194,7 @@ public class MemoryRealm  extends RealmBase {
             }
             digester.addRuleSet(new MemoryRuleSet());
         }
-        return (digester);
-
+        return digester;
     }
 
 
@@ -208,9 +206,9 @@ public class MemoryRealm  extends RealmBase {
 
         GenericPrincipal principal = principals.get(username);
         if (principal != null) {
-            return (principal.getPassword());
+            return principal.getPassword();
         } else {
-            return (null);
+            return null;
         }
 
     }

==================================================
UserDatabaseRealm.java
index 608f39ae7d..e675504da6 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -191,9 +191,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
      */
     @Override
     public Container getContainer() {
-
-        return (container);
-
+        return container;
     }
 
 
@@ -446,7 +444,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
     public Principal authenticate(X509Certificate certs[]) {
 
         if ((certs == null) || (certs.length < 1))
-            return (null);
+            return null;
 
         // Check the validity of each certificate in the chain
         if (log.isDebugEnabled())
@@ -461,14 +459,13 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
                 } catch (Exception e) {
                     if (log.isDebugEnabled())
                         log.debug("  Validity exception", e);
-                    return (null);
+                    return null;
                 }
             }
         }
 
         // Check the existence of the client Principal in our database
-        return (getPrincipal(certs[0]));
-
+        return getPrincipal(certs[0]);
     }
 
 
@@ -546,7 +543,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
         if ((constraints == null) || (constraints.length == 0)) {
             if (log.isDebugEnabled())
                 log.debug("  No applicable constraints defined");
-            return (null);
+            return null;
         }
 
         // Check each defined security constraint

==================================================
DefaultServlet.java
index 50fc2f050c..cb6e871307 100644
--- a/java/org/apache/catalina/realm/UserDatabaseRealm.java
+++ b/java/org/apache/catalina/realm/UserDatabaseRealm.java
@@ -154,15 +154,13 @@ public class UserDatabaseRealm
      */
     @Override
     protected String getPassword(String username) {
-
         User user = database.findUser(username);
 
         if (user == null) {
             return null;
         }
 
-        return (user.getPassword());
-
+        return user.getPassword();
     }
 
 

==================================================
FileStore.java
index b3b24c088c..fa6a36cbb8 100644
--- a/java/org/apache/catalina/servlets/DefaultServlet.java
+++ b/java/org/apache/catalina/servlets/DefaultServlet.java
@@ -1520,7 +1520,7 @@ public class DefaultServlet extends HttpServlet {
             StreamResult out = new StreamResult(osWriter);
             transformer.transform(xmlSource, out);
             osWriter.flush();
-            return (new ByteArrayInputStream(stream.toByteArray()));
+            return new ByteArrayInputStream(stream.toByteArray());
         } catch (TransformerException e) {
             throw new ServletException("XSL transformer error", e);
         } finally {
@@ -1681,7 +1681,7 @@ public class DefaultServlet extends HttpServlet {
         // Return an input stream to the underlying bytes
         writer.write(sb.toString());
         writer.flush();
-        return (new ByteArrayInputStream(stream.toByteArray()));
+        return new ByteArrayInputStream(stream.toByteArray());
 
     }
 

==================================================
ManagerBase.java
index f3446fb907..1843c3db05 100644
--- a/java/org/apache/catalina/session/FileStore.java
+++ b/java/org/apache/catalina/session/FileStore.java
@@ -173,14 +173,14 @@ public final class FileStore extends StoreBase {
         // Acquire the list of files in our storage directory
         File file = directory();
         if (file == null) {
-            return (new String[0]);
+            return new String[0];
         }
 
         String files[] = file.list();
 
         // Bugzilla 32130
         if((files == null) || (files.length < 1)) {
-            return (new String[0]);
+            return new String[0];
         }
 
         // Build and return the list of session identifiers

==================================================
StandardSession.java
index 884cd5258b..3c5ee11df4 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -401,18 +401,14 @@ public abstract class ManagerBase extends LifecycleMBeanBase implements Manager
      * @return The descriptive short name of this Manager implementation.
      */
     public String getName() {
-
-        return (name);
-
+        return name;
     }
 
     /**
      * @return The secure random number generator class name.
      */
     public String getSecureRandomClass() {
-
-        return (this.secureRandomClass);
-
+        return this.secureRandomClass;
     }
 
 
@@ -500,9 +496,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase implements Manager
      * @return The frequency of manager checks.
      */
     public int getProcessExpiresFrequency() {
-
-        return (this.processExpiresFrequency);
-
+        return this.processExpiresFrequency;
     }
 
     /**
@@ -671,14 +665,13 @@ public abstract class ManagerBase extends LifecycleMBeanBase implements Manager
             sessionCreationTiming.add(timing);
             sessionCreationTiming.poll();
         }
-        return (session);
-
+        return session;
     }
 
 
     @Override
     public Session createEmptySession() {
-        return (getNewSession());
+        return getNewSession();
     }
 
 
@@ -922,9 +915,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase implements Manager
      *         limit.
      */
     public int getMaxActiveSessions() {
-
-        return (this.maxActiveSessions);
-
+        return this.maxActiveSessions;
     }
 
 

==================================================
SSIServletRequestUtil.java
index a7ead00b33..ed1a0f8611 100644
--- a/java/org/apache/catalina/session/StandardSession.java
+++ b/java/org/apache/catalina/session/StandardSession.java
@@ -279,9 +279,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
      */
     @Override
     public String getAuthType() {
-
-        return (this.authType);
-
+        return this.authType;
     }
 
 
@@ -293,11 +291,9 @@ public class StandardSession implements HttpSession, Session, Serializable {
      */
     @Override
     public void setAuthType(String authType) {
-
         String oldAuthType = this.authType;
         this.authType = authType;
         support.firePropertyChange("authType", oldAuthType, this.authType);
-
     }
 
 
@@ -322,9 +318,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
      */
     @Override
     public String getId() {
-
-        return (this.id);
-
+        return this.id;
     }
 
 
@@ -333,9 +327,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
      */
     @Override
     public String getIdInternal() {
-
-        return (this.id);
-
+        return this.id;
     }
 
 
@@ -471,7 +463,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
                 (sm.getString("standardSession.getThisAccessedTime.ise"));
         }
 
-        return (this.thisAccessedTime);
+        return this.thisAccessedTime;
     }
 
     /**
@@ -480,7 +472,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
      */
     @Override
     public long getThisAccessedTimeInternal() {
-        return (this.thisAccessedTime);
+        return this.thisAccessedTime;
     }
 
     /**
@@ -498,7 +490,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
                 (sm.getString("standardSession.getLastAccessedTime.ise"));
         }
 
-        return (this.lastAccessedTime);
+        return this.lastAccessedTime;
     }
 
     /**
@@ -507,7 +499,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
      */
     @Override
     public long getLastAccessedTimeInternal() {
-        return (this.lastAccessedTime);
+        return this.lastAccessedTime;
     }
 
     /**
@@ -567,9 +559,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
      */
     @Override
     public int getMaxInactiveInterval() {
-
-        return (this.maxInactiveInterval);
-
+        return this.maxInactiveInterval;
     }
 
 
@@ -593,9 +583,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
      */
     @Override
     public void setNew(boolean isNew) {
-
         this.isNew = isNew;
-
     }
 
 
@@ -608,9 +596,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
      */
     @Override
     public Principal getPrincipal() {
-
-        return (this.principal);
-
+        return this.principal;
     }
 
 
@@ -952,9 +938,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
      */
     @Override
     public Object getNote(String name) {
-
-        return (notes.get(name));
-
+        return notes.get(name);
     }
 
 
@@ -964,9 +948,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
      */
     @Override
     public Iterator<String> getNoteNames() {
-
-        return (notes.keySet().iterator());
-
+        return notes.keySet().iterator();
     }
 
 
@@ -1039,13 +1021,11 @@ public class StandardSession implements HttpSession, Session, Serializable {
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder();
         sb.append("StandardSession[");
         sb.append(id);
         sb.append("]");
-        return (sb.toString());
-
+        return sb.toString();
     }
 
 
@@ -1099,13 +1079,11 @@ public class StandardSession implements HttpSession, Session, Serializable {
      */
     @Override
     public long getCreationTime() {
-
         if (!isValidInternal())
             throw new IllegalStateException
                 (sm.getString("standardSession.getCreationTime.ise"));
 
-        return (this.creationTime);
-
+        return this.creationTime;
     }
 
 
@@ -1142,11 +1120,9 @@ public class StandardSession implements HttpSession, Session, Serializable {
     @Override
     @Deprecated
     public javax.servlet.http.HttpSessionContext getSessionContext() {
-
         if (sessionContext == null)
             sessionContext = new StandardSessionContext();
-        return (sessionContext);
-
+        return sessionContext;
     }
 
 
@@ -1164,15 +1140,13 @@ public class StandardSession implements HttpSession, Session, Serializable {
      */
     @Override
     public Object getAttribute(String name) {
-
         if (!isValidInternal())
             throw new IllegalStateException
                 (sm.getString("standardSession.getAttribute.ise"));
 
         if (name == null) return null;
 
-        return (attributes.get(name));
-
+        return attributes.get(name);
     }
 
 
@@ -1212,7 +1186,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
     @Deprecated
     public Object getValue(String name) {
 
-        return (getAttribute(name));
+        return getAttribute(name);
 
     }
 
@@ -1230,13 +1204,11 @@ public class StandardSession implements HttpSession, Session, Serializable {
     @Override
     @Deprecated
     public String[] getValueNames() {
-
         if (!isValidInternal())
             throw new IllegalStateException
                 (sm.getString("standardSession.getValueNames.ise"));
 
-        return (keys());
-
+        return keys();
     }
 
 
@@ -1271,13 +1243,11 @@ public class StandardSession implements HttpSession, Session, Serializable {
      */
     @Override
     public boolean isNew() {
-
         if (!isValidInternal())
             throw new IllegalStateException
                 (sm.getString("standardSession.isNew.ise"));
 
-        return (this.isNew);
-
+        return this.isNew;
     }
 
 
@@ -1910,6 +1880,6 @@ final class StandardSessionContext
     @Override
     @Deprecated
     public HttpSession getSession(String id) {
-        return (null);
+        return null;
     }
 }

==================================================
Catalina.java
index 61b35948ec..9de34b6e2e 100644
--- a/java/org/apache/catalina/ssi/SSIServletRequestUtil.java
+++ b/java/org/apache/catalina/ssi/SSIServletRequestUtil.java
@@ -41,7 +41,7 @@ public class SSIServletRequestUtil {
                 result = (String)request.getAttribute(
                         RequestDispatcher.INCLUDE_SERVLET_PATH);
             if ((result == null) || (result.equals(""))) result = "/";
-            return (result);
+            return result;
         }
         // No, extract the desired path directly from the request
         String result = request.getPathInfo();

==================================================
ExpandWar.java
index cb83a01e4e..35428e7052 100644
--- a/java/org/apache/catalina/startup/Catalina.java
+++ b/java/org/apache/catalina/startup/Catalina.java
@@ -162,7 +162,7 @@ public class Catalina {
 
     public ClassLoader getParentClassLoader() {
         if (parentClassLoader != null) {
-            return (parentClassLoader);
+            return parentClassLoader;
         }
         return ClassLoader.getSystemClassLoader();
     }
@@ -181,7 +181,7 @@ public class Catalina {
      * @return <code>true</code> if naming is enabled.
      */
     public boolean isUseNaming() {
-        return (this.useNaming);
+        return this.useNaming;
     }
 
 
@@ -257,7 +257,7 @@ public class Catalina {
         if (!file.isAbsolute()) {
             file = new File(Bootstrap.getCatalinaBase(), configFile);
         }
-        return (file);
+        return file;
 
     }
 
@@ -386,7 +386,7 @@ public class Catalina {
         if (log.isDebugEnabled()) {
             log.debug("Digester for server.xml created " + ( t2-t1 ));
         }
-        return (digester);
+        return digester;
 
     }
 
@@ -431,7 +431,7 @@ public class Catalina {
                             "setServer",
                             "org.apache.catalina.Server");
 
-        return (digester);
+        return digester;
 
     }
 

==================================================
HomesUserDatabase.java
index 8b066f6cfa..053464f332 100644
--- a/java/org/apache/catalina/startup/ExpandWar.java
+++ b/java/org/apache/catalina/startup/ExpandWar.java
@@ -100,7 +100,7 @@ public class ExpandWar {
             if (!warTracker.exists() || warTracker.lastModified() == warLastModified) {
                 // No (detectable) changes to the WAR
                 success = true;
-                return (docBase.getAbsolutePath());
+                return docBase.getAbsolutePath();
             }
 
             // WAR must have been modified. Remove expanded directory.

==================================================
HostConfig.java
index a301af773e..35a5f9fd05 100644
--- a/java/org/apache/catalina/startup/HomesUserDatabase.java
+++ b/java/org/apache/catalina/startup/HomesUserDatabase.java
@@ -71,9 +71,7 @@ public final class HomesUserDatabase
      */
     @Override
     public UserConfig getUserConfig() {
-
-        return (this.userConfig);
-
+        return this.userConfig;
     }
 
 
@@ -84,10 +82,8 @@ public final class HomesUserDatabase
      */
     @Override
     public void setUserConfig(UserConfig userConfig) {
-
         this.userConfig = userConfig;
         init();
-
     }
 
 
@@ -101,9 +97,7 @@ public final class HomesUserDatabase
      */
     @Override
     public String getHome(String user) {
-
         return homes.get(user);
-
     }
 
 
@@ -112,9 +106,7 @@ public final class HomesUserDatabase
      */
     @Override
     public Enumeration<String> getUsers() {
-
-        return (homes.keys());
-
+        return homes.keys();
     }
 
 

==================================================
SetNextNamingRule.java
index 67a0145f0e..8d7dfac2ff 100644
--- a/java/org/apache/catalina/startup/HostConfig.java
+++ b/java/org/apache/catalina/startup/HostConfig.java
@@ -160,9 +160,7 @@ public class HostConfig implements LifecycleListener {
      * @return the Context implementation class name.
      */
     public String getContextClass() {
-
-        return (this.contextClass);
-
+        return this.contextClass;
     }
 
 
@@ -188,9 +186,7 @@ public class HostConfig implements LifecycleListener {
      * @return the deploy XML config file flag for this component.
      */
     public boolean isDeployXML() {
-
-        return (this.deployXML);
-
+        return this.deployXML;
     }
 
 
@@ -200,9 +196,7 @@ public class HostConfig implements LifecycleListener {
      * @param deployXML The new deploy XML flag
      */
     public void setDeployXML(boolean deployXML) {
-
         this.deployXML= deployXML;
-
     }
 
 
@@ -210,9 +204,7 @@ public class HostConfig implements LifecycleListener {
      * @return the copy XML config file flag for this component.
      */
     public boolean isCopyXML() {
-
-        return (this.copyXML);
-
+        return this.copyXML;
     }
 
 
@@ -232,9 +224,7 @@ public class HostConfig implements LifecycleListener {
      * @return the unpack WARs flag.
      */
     public boolean isUnpackWARs() {
-
-        return (this.unpackWARs);
-
+        return this.unpackWARs;
     }
 
 
@@ -244,9 +234,7 @@ public class HostConfig implements LifecycleListener {
      * @param unpackWARs The new unpack WARs flag
      */
     public void setUnpackWARs(boolean unpackWARs) {
-
         this.unpackWARs = unpackWARs;
-
     }
 
 
@@ -303,7 +291,7 @@ public class HostConfig implements LifecycleListener {
      * @return state of the application
      */
     public synchronized boolean isServiced(String name) {
-        return (serviced.contains(name));
+        return serviced.contains(name);
     }
 
 
@@ -367,7 +355,7 @@ public class HostConfig implements LifecycleListener {
         // Set the properties on that object (it doesn't matter if extra
         // properties are set)
         digester.addSetProperties("Context");
-        return (digester);
+        return digester;
     }
 
     protected File returnCanonicalPath(String path) {

==================================================
UserConfig.java
index 2cce76b3f6..c82fe06f9a 100644
--- a/java/org/apache/catalina/startup/SetNextNamingRule.java
+++ b/java/org/apache/catalina/startup/SetNextNamingRule.java
@@ -112,15 +112,13 @@ public class SetNextNamingRule extends Rule {
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("SetNextRule[");
         sb.append("methodName=");
         sb.append(methodName);
         sb.append(", paramType=");
         sb.append(paramType);
         sb.append("]");
-        return (sb.toString());
-
+        return sb.toString();
     }
 
 

==================================================
ConnectorStoreAppender.java
index 22baacff45..4d50c8f479 100644
--- a/java/org/apache/catalina/startup/UserConfig.java
+++ b/java/org/apache/catalina/startup/UserConfig.java
@@ -116,9 +116,7 @@ public final class UserConfig
      * @return the Context configuration class name.
      */
     public String getConfigClass() {
-
-        return (this.configClass);
-
+        return this.configClass;
     }
 
 
@@ -128,9 +126,7 @@ public final class UserConfig
      * @param configClass The new Context configuration class name.
      */
     public void setConfigClass(String configClass) {
-
         this.configClass = configClass;
-
     }
 
 
@@ -138,9 +134,7 @@ public final class UserConfig
      * @return the Context implementation class name.
      */
     public String getContextClass() {
-
-        return (this.contextClass);
-
+        return this.contextClass;
     }
 
 
@@ -150,9 +144,7 @@ public final class UserConfig
      * @param contextClass The new Context implementation class name.
      */
     public void setContextClass(String contextClass) {
-
         this.contextClass = contextClass;
-
     }
 
 
@@ -160,9 +152,7 @@ public final class UserConfig
      * @return the directory name for user web applications.
      */
     public String getDirectoryName() {
-
-        return (this.directoryName);
-
+        return this.directoryName;
     }
 
 
@@ -172,9 +162,7 @@ public final class UserConfig
      * @param directoryName The new directory name
      */
     public void setDirectoryName(String directoryName) {
-
         this.directoryName = directoryName;
-
     }
 
 
@@ -182,9 +170,7 @@ public final class UserConfig
      * @return the base directory containing user home directories.
      */
     public String getHomeBase() {
-
-        return (this.homeBase);
-
+        return this.homeBase;
     }
 
 
@@ -194,9 +180,7 @@ public final class UserConfig
      * @param homeBase The new base directory
      */
     public void setHomeBase(String homeBase) {
-
         this.homeBase = homeBase;
-
     }
 
 
@@ -204,9 +188,7 @@ public final class UserConfig
      * @return the user database class name for this component.
      */
     public String getUserClass() {
-
-        return (this.userClass);
-
+        return this.userClass;
     }
 
 
@@ -215,9 +197,7 @@ public final class UserConfig
      * @param userClass The user database class name
      */
     public void setUserClass(String userClass) {
-
         this.userClass = userClass;
-
     }
 
     /**

==================================================
StandardContextSF.java
index 72498dcf85..99b4de69c8 100644
--- a/java/org/apache/catalina/storeconfig/ConnectorStoreAppender.java
+++ b/java/org/apache/catalina/storeconfig/ConnectorStoreAppender.java
@@ -277,7 +277,7 @@ public class ConnectorStoreAppender extends StoreAppender {
         boolean isPrint = super.isPrintValue(bean, bean2, attrName, desc);
         if (isPrint) {
             if ("jkHome".equals(attrName)) {
-                Connector connector = ((Connector) bean);
+                Connector connector = (Connector) bean;
                 File catalinaBase = getCatalinaBase();
                 File jkHomeBase = getJkHomeBase((String) connector
                         .getProperty("jkHome"), catalinaBase);
@@ -295,7 +295,7 @@ public class ConnectorStoreAppender extends StoreAppender {
             file = file.getCanonicalFile();
         } catch (IOException e) {
         }
-        return (file);
+        return file;
     }
 
     protected File getJkHomeBase(String jkHome, File appBase) {
@@ -309,7 +309,7 @@ public class ConnectorStoreAppender extends StoreAppender {
         } catch (IOException e) {
             jkHomeBase = file;
         }
-        return (jkHomeBase);
+        return jkHomeBase;
     }
 
 }
\ No newline at end of file

==================================================
StoreAppender.java
index a6c5881380..38f4ee4f60 100644
--- a/java/org/apache/catalina/storeconfig/StandardContextSF.java
+++ b/java/org/apache/catalina/storeconfig/StandardContextSF.java
@@ -320,7 +320,7 @@ public class StandardContextSF extends StoreFactoryBase {
                 log.error(e);
             }
         }
-        return (file);
+        return file;
 
     }
 

==================================================
StoreContextAppender.java
index 776de6f2ab..e0ea861167 100644
--- a/java/org/apache/catalina/storeconfig/StoreAppender.java
+++ b/java/org/apache/catalina/storeconfig/StoreAppender.java
@@ -383,7 +383,7 @@ public class StoreAppender {
                 filtered.append(c);
             }
         }
-        return (filtered.toString());
+        return filtered.toString();
     }
 
     /**

==================================================
StoreFactoryBase.java
index b484727d27..48d18d720e 100644
--- a/java/org/apache/catalina/storeconfig/StoreContextAppender.java
+++ b/java/org/apache/catalina/storeconfig/StoreContextAppender.java
@@ -93,12 +93,11 @@ public class StoreContextAppender extends StoreAppender {
         } catch (IOException e) {
             appBase = file;
         }
-        return (appBase);
+        return appBase;
 
     }
 
     protected File getDocBase(StandardContext context, File appBase) {
-
         File docBase;
         String contextDocBase = context.getOriginalDocBase() ;
         if(contextDocBase == null)
@@ -111,8 +110,7 @@ public class StoreContextAppender extends StoreAppender {
         } catch (IOException e) {
             docBase = file;
         }
-        return (docBase);
-
+        return docBase;
     }
 
     /**

==================================================
StoreLoader.java
index 588ccdd265..ada8528fb2 100644
--- a/java/org/apache/catalina/storeconfig/StoreFactoryBase.java
+++ b/java/org/apache/catalina/storeconfig/StoreFactoryBase.java
@@ -52,9 +52,7 @@ public class StoreFactoryBase implements IStoreFactory {
      * <code>&lt;description&gt;/&lt;version&gt;</code>.
      */
     public String getInfo() {
-
-        return (info);
-
+        return info;
     }
 
     /**

==================================================
RxTaskPool.java
index 48cd0594ad..1bf1546b1c 100644
--- a/java/org/apache/catalina/storeconfig/StoreLoader.java
+++ b/java/org/apache/catalina/storeconfig/StoreLoader.java
@@ -135,7 +135,7 @@ public class StoreLoader {
         long t2 = System.currentTimeMillis();
         if (log.isDebugEnabled())
             log.debug("Digester for server-registry.xml created " + (t2 - t1));
-        return (digester);
+        return digester;
 
     }
 
@@ -159,7 +159,7 @@ public class StoreLoader {
         } catch (IOException e) {
             log.error(e);
         }
-        return (file);
+        return file;
     }
 
     /**

==================================================
BioSender.java
index 4b6b2fb90a..4a2c5b0115 100644
--- a/java/org/apache/catalina/tribes/transport/RxTaskPool.java
+++ b/java/org/apache/catalina/tribes/transport/RxTaskPool.java
@@ -86,7 +86,7 @@ public class RxTaskPool {
             }//while
             if ( worker != null ) used.add(worker);
         }
-        return (worker);
+        return worker;
     }
 
     public int available() {

==================================================
NioSender.java
index 266dc3ef3d..5109950253 100644
--- a/java/org/apache/catalina/tribes/transport/bio/BioSender.java
+++ b/java/org/apache/catalina/tribes/transport/bio/BioSender.java
@@ -173,7 +173,7 @@ public class BioSender extends AbstractSender {
           SenderState.getSenderState(getDestination()).setSuspect();
           if (log.isDebugEnabled())
               log.debug(sm.getString("bioSender.openSocket.failure",getAddress().getHostAddress(), Integer.valueOf(getPort()), Long.valueOf(0)), ex1);
-          throw (ex1);
+          throw ex1;
         }
 
      }

==================================================
AbstractGroup.java
index 7a766f23ab..6354deeac4 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioSender.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioSender.java
@@ -336,7 +336,7 @@ public class NioSender extends AbstractSender {
     }
 
     private ByteBuffer getBuffer(int size) {
-        return (getDirectBuffer()?ByteBuffer.allocateDirect(size):ByteBuffer.allocate(size));
+        return getDirectBuffer()?ByteBuffer.allocateDirect(size):ByteBuffer.allocate(size);
     }
 
     /**

==================================================
AbstractRole.java
index 521d261f99..17cbd6c0de 100644
--- a/java/org/apache/catalina/users/AbstractGroup.java
+++ b/java/org/apache/catalina/users/AbstractGroup.java
@@ -59,9 +59,7 @@ public abstract class AbstractGroup implements Group {
      */
     @Override
     public String getDescription() {
-
-        return (this.description);
-
+        return this.description;
     }
 
 
@@ -72,9 +70,7 @@ public abstract class AbstractGroup implements Group {
      */
     @Override
     public void setDescription(String description) {
-
         this.description = description;
-
     }
 
 
@@ -84,9 +80,7 @@ public abstract class AbstractGroup implements Group {
      */
     @Override
     public String getGroupname() {
-
-        return (this.groupname);
-
+        return this.groupname;
     }
 
 
@@ -98,9 +92,7 @@ public abstract class AbstractGroup implements Group {
      */
     @Override
     public void setGroupname(String groupname) {
-
         this.groupname = groupname;
-
     }
 
 
@@ -171,9 +163,7 @@ public abstract class AbstractGroup implements Group {
      */
     @Override
     public String getName() {
-
-        return (getGroupname());
-
+        return getGroupname();
     }
 
 

==================================================
AbstractUser.java
index d75b8a83fc..66cb207692 100644
--- a/java/org/apache/catalina/users/AbstractRole.java
+++ b/java/org/apache/catalina/users/AbstractRole.java
@@ -55,9 +55,7 @@ public abstract class AbstractRole implements Role {
      */
     @Override
     public String getDescription() {
-
-        return (this.description);
-
+        return this.description;
     }
 
 
@@ -68,9 +66,7 @@ public abstract class AbstractRole implements Role {
      */
     @Override
     public void setDescription(String description) {
-
         this.description = description;
-
     }
 
 
@@ -80,9 +76,7 @@ public abstract class AbstractRole implements Role {
      */
     @Override
     public String getRolename() {
-
-        return (this.rolename);
-
+        return this.rolename;
     }
 
 
@@ -94,9 +88,7 @@ public abstract class AbstractRole implements Role {
      */
     @Override
     public void setRolename(String rolename) {
-
         this.rolename = rolename;
-
     }
 
 
@@ -118,9 +110,7 @@ public abstract class AbstractRole implements Role {
      */
     @Override
     public String getName() {
-
-        return (getRolename());
-
+        return getRolename();
     }
 
 

==================================================
MemoryGroup.java
index 3eb6b1e838..6f1f99f9f6 100644
--- a/java/org/apache/catalina/users/AbstractUser.java
+++ b/java/org/apache/catalina/users/AbstractUser.java
@@ -64,9 +64,7 @@ public abstract class AbstractUser implements User {
      */
     @Override
     public String getFullName() {
-
-        return (this.fullName);
-
+        return this.fullName;
     }
 
 
@@ -77,9 +75,7 @@ public abstract class AbstractUser implements User {
      */
     @Override
     public void setFullName(String fullName) {
-
         this.fullName = fullName;
-
     }
 
 
@@ -97,9 +93,7 @@ public abstract class AbstractUser implements User {
      */
     @Override
     public String getPassword() {
-
-        return (this.password);
-
+        return this.password;
     }
 
 
@@ -112,9 +106,7 @@ public abstract class AbstractUser implements User {
      */
     @Override
     public void setPassword(String password) {
-
         this.password = password;
-
     }
 
 
@@ -131,9 +123,7 @@ public abstract class AbstractUser implements User {
      */
     @Override
     public String getUsername() {
-
-        return (this.username);
-
+        return this.username;
     }
 
 
@@ -145,9 +135,7 @@ public abstract class AbstractUser implements User {
      */
     @Override
     public void setUsername(String username) {
-
         this.username = username;
-
     }
 
 
@@ -232,9 +220,7 @@ public abstract class AbstractUser implements User {
      */
     @Override
     public String getName() {
-
-        return (getUsername());
-
+        return getUsername();
     }
 
 

==================================================
MemoryRole.java
index b95c1d8c25..05936424da 100644
--- a/java/org/apache/catalina/users/MemoryGroup.java
+++ b/java/org/apache/catalina/users/MemoryGroup.java
@@ -83,11 +83,9 @@ public class MemoryGroup extends AbstractGroup {
      */
     @Override
     public Iterator<Role> getRoles() {
-
         synchronized (roles) {
-            return (roles.iterator());
+            return roles.iterator();
         }
-
     }
 
 
@@ -96,9 +94,7 @@ public class MemoryGroup extends AbstractGroup {
      */
     @Override
     public UserDatabase getUserDatabase() {
-
-        return (this.database);
-
+        return this.database;
     }
 
 
@@ -107,7 +103,6 @@ public class MemoryGroup extends AbstractGroup {
      */
     @Override
     public Iterator<User> getUsers() {
-
         ArrayList<User> results = new ArrayList<>();
         Iterator<User> users = database.getUsers();
         while (users.hasNext()) {
@@ -116,8 +111,7 @@ public class MemoryGroup extends AbstractGroup {
                 results.add(user);
             }
         }
-        return (results.iterator());
-
+        return results.iterator();
     }
 
 
@@ -131,13 +125,11 @@ public class MemoryGroup extends AbstractGroup {
      */
     @Override
     public void addRole(Role role) {
-
         synchronized (roles) {
             if (!roles.contains(role)) {
                 roles.add(role);
             }
         }
-
     }
 
 
@@ -148,11 +140,9 @@ public class MemoryGroup extends AbstractGroup {
      */
     @Override
     public boolean isInRole(Role role) {
-
         synchronized (roles) {
-            return (roles.contains(role));
+            return roles.contains(role);
         }
-
     }
 
 
@@ -163,11 +153,9 @@ public class MemoryGroup extends AbstractGroup {
      */
     @Override
     public void removeRole(Role role) {
-
         synchronized (roles) {
             roles.remove(role);
         }
-
     }
 
 
@@ -176,11 +164,9 @@ public class MemoryGroup extends AbstractGroup {
      */
     @Override
     public void removeRoles() {
-
         synchronized (roles) {
             roles.clear();
         }
-
     }
 
 
@@ -189,7 +175,6 @@ public class MemoryGroup extends AbstractGroup {
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("<group groupname=\"");
         sb.append(groupname);
         sb.append("\"");
@@ -206,6 +191,6 @@ public class MemoryGroup extends AbstractGroup {
             }
         }
         sb.append("/>");
-        return (sb.toString());
+        return sb.toString();
     }
 }

==================================================
MemoryUser.java
index f1c64b6f20..e98fe32002 100644
--- a/java/org/apache/catalina/users/MemoryRole.java
+++ b/java/org/apache/catalina/users/MemoryRole.java
@@ -71,9 +71,7 @@ public class MemoryRole extends AbstractRole {
      */
     @Override
     public UserDatabase getUserDatabase() {
-
-        return (this.database);
-
+        return this.database;
     }
 
 
@@ -85,7 +83,6 @@ public class MemoryRole extends AbstractRole {
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("<role rolename=\"");
         sb.append(rolename);
         sb.append("\"");
@@ -95,8 +92,7 @@ public class MemoryRole extends AbstractRole {
             sb.append("\"");
         }
         sb.append("/>");
-        return (sb.toString());
-
+        return sb.toString();
     }
 
 

==================================================
MemoryUserDatabase.java
index fba062bf0f..fa00ef4ee7 100644
--- a/java/org/apache/catalina/users/MemoryUser.java
+++ b/java/org/apache/catalina/users/MemoryUser.java
@@ -91,11 +91,9 @@ public class MemoryUser extends AbstractUser {
      */
     @Override
     public Iterator<Group> getGroups() {
-
         synchronized (groups) {
-            return (groups.iterator());
+            return groups.iterator();
         }
-
     }
 
 
@@ -104,11 +102,9 @@ public class MemoryUser extends AbstractUser {
      */
     @Override
     public Iterator<Role> getRoles() {
-
         synchronized (roles) {
-            return (roles.iterator());
+            return roles.iterator();
         }
-
     }
 
 
@@ -117,9 +113,7 @@ public class MemoryUser extends AbstractUser {
      */
     @Override
     public UserDatabase getUserDatabase() {
-
-        return (this.database);
-
+        return this.database;
     }
 
 
@@ -167,11 +161,9 @@ public class MemoryUser extends AbstractUser {
      */
     @Override
     public boolean isInGroup(Group group) {
-
         synchronized (groups) {
-            return (groups.contains(group));
+            return groups.contains(group);
         }
-
     }
 
 
@@ -184,11 +176,9 @@ public class MemoryUser extends AbstractUser {
      */
     @Override
     public boolean isInRole(Role role) {
-
         synchronized (roles) {
-            return (roles.contains(role));
+            return roles.contains(role);
         }
-
     }
 
 

==================================================
MemoryUserDatabaseFactory.java
index 10bba762ce..4730173b02 100644
--- a/java/org/apache/catalina/users/MemoryUserDatabase.java
+++ b/java/org/apache/catalina/users/MemoryUserDatabase.java
@@ -143,11 +143,9 @@ public class MemoryUserDatabase implements UserDatabase {
      */
     @Override
     public Iterator<Group> getGroups() {
-
         synchronized (groups) {
-            return (groups.values().iterator());
+            return groups.values().iterator();
         }
-
     }
 
 
@@ -156,9 +154,7 @@ public class MemoryUserDatabase implements UserDatabase {
      */
     @Override
     public String getId() {
-
-        return (this.id);
-
+        return this.id;
     }
 
 
@@ -166,9 +162,7 @@ public class MemoryUserDatabase implements UserDatabase {
      * @return the relative or absolute pathname to the persistent storage file.
      */
     public String getPathname() {
-
-        return (this.pathname);
-
+        return this.pathname;
     }
 
 
@@ -190,9 +184,7 @@ public class MemoryUserDatabase implements UserDatabase {
      * @return the readonly status of the user database
      */
     public boolean getReadonly() {
-
-        return (this.readonly);
-
+        return this.readonly;
     }
 
 
@@ -213,11 +205,9 @@ public class MemoryUserDatabase implements UserDatabase {
      */
     @Override
     public Iterator<Role> getRoles() {
-
         synchronized (roles) {
-            return (roles.values().iterator());
+            return roles.values().iterator();
         }
-
     }
 
 
@@ -226,11 +216,9 @@ public class MemoryUserDatabase implements UserDatabase {
      */
     @Override
     public Iterator<User> getUsers() {
-
         synchronized (users) {
-            return (users.values().iterator());
+            return users.values().iterator();
         }
-
     }
 
 
@@ -266,7 +254,6 @@ public class MemoryUserDatabase implements UserDatabase {
      */
     @Override
     public Group createGroup(String groupname, String description) {
-
         if (groupname == null || groupname.length() == 0) {
             String msg = sm.getString("memoryUserDatabase.nullGroup");
             log.warn(msg);
@@ -277,8 +264,7 @@ public class MemoryUserDatabase implements UserDatabase {
         synchronized (groups) {
             groups.put(group.getGroupname(), group);
         }
-        return (group);
-
+        return group;
     }
 
 
@@ -290,7 +276,6 @@ public class MemoryUserDatabase implements UserDatabase {
      */
     @Override
     public Role createRole(String rolename, String description) {
-
         if (rolename == null || rolename.length() == 0) {
             String msg = sm.getString("memoryUserDatabase.nullRole");
             log.warn(msg);
@@ -301,8 +286,7 @@ public class MemoryUserDatabase implements UserDatabase {
         synchronized (roles) {
             roles.put(role.getRolename(), role);
         }
-        return (role);
-
+        return role;
     }
 
 
@@ -327,7 +311,7 @@ public class MemoryUserDatabase implements UserDatabase {
         synchronized (users) {
             users.put(user.getUsername(), user);
         }
-        return (user);
+        return user;
     }
 
 
@@ -615,7 +599,6 @@ public class MemoryUserDatabase implements UserDatabase {
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("MemoryUserDatabase[id=");
         sb.append(this.id);
         sb.append(",pathname=");
@@ -627,7 +610,7 @@ public class MemoryUserDatabase implements UserDatabase {
         sb.append(",userCount=");
         sb.append(this.users.size());
         sb.append("]");
-        return (sb.toString());
+        return sb.toString();
     }
 }
 
@@ -671,7 +654,7 @@ class MemoryGroupCreationFactory extends AbstractObjectCreationFactory {
                 }
             }
         }
-        return (group);
+        return group;
     }
 
     private final MemoryUserDatabase database;
@@ -695,7 +678,7 @@ class MemoryRoleCreationFactory extends AbstractObjectCreationFactory {
         }
         String description = attributes.getValue("description");
         Role role = database.createRole(rolename, description);
-        return (role);
+        return role;
     }
 
     private final MemoryUserDatabase database;
@@ -765,7 +748,7 @@ class MemoryUserCreationFactory extends AbstractObjectCreationFactory {
                 }
             }
         }
-        return (user);
+        return user;
     }
 
     private final MemoryUserDatabase database;

==================================================
CharsetMapper.java
index 3ad0b17e08..ac75a54eb5 100644
--- a/java/org/apache/catalina/users/MemoryUserDatabaseFactory.java
+++ b/java/org/apache/catalina/users/MemoryUserDatabaseFactory.java
@@ -76,11 +76,11 @@ public class MemoryUserDatabaseFactory implements ObjectFactory {
         // We only know how to deal with <code>javax.naming.Reference</code>s
         // that specify a class name of "org.apache.catalina.UserDatabase"
         if ((obj == null) || !(obj instanceof Reference)) {
-            return (null);
+            return null;
         }
         Reference ref = (Reference) obj;
         if (!"org.apache.catalina.UserDatabase".equals(ref.getClassName())) {
-            return (null);
+            return null;
         }
 
         // Create and configure a MemoryUserDatabase instance based on the
@@ -103,7 +103,7 @@ public class MemoryUserDatabaseFactory implements ObjectFactory {
         // Don't try something we know won't work
         if (!database.getReadonly())
             database.save();
-        return (database);
+        return database;
 
     }
 

==================================================
DOMWriter.java
index 4436985436..1d6df62f88 100644
--- a/java/org/apache/catalina/util/CharsetMapper.java
+++ b/java/org/apache/catalina/util/CharsetMapper.java
@@ -110,7 +110,7 @@ public class CharsetMapper {
                 charset = map.getProperty(locale.getLanguage());
             }
         }
-        return (charset);
+        return charset;
     }
 
 

==================================================
Extension.java
index 3877b41886..b339ddc45f 100644
--- a/java/org/apache/catalina/util/DOMWriter.java
+++ b/java/org/apache/catalina/util/DOMWriter.java
@@ -178,8 +178,7 @@ public class DOMWriter {
             }
         }
 
-        return (array);
-
+        return array;
     }
 
     /**
@@ -225,6 +224,6 @@ public class DOMWriter {
             }
         }
 
-        return (str.toString());
+        return str.toString();
     }
 }

==================================================
ManifestResource.java
index 442189b065..cf9489adc2 100644
--- a/java/org/apache/catalina/util/Extension.java
+++ b/java/org/apache/catalina/util/Extension.java
@@ -55,7 +55,7 @@ public final class Extension {
 
 
     public String getExtensionName() {
-        return (this.extensionName);
+        return this.extensionName;
     }
 
     public void setExtensionName(String extensionName) {
@@ -69,7 +69,7 @@ public final class Extension {
     private String implementationURL = null;
 
     public String getImplementationURL() {
-        return (this.implementationURL);
+        return this.implementationURL;
     }
 
     public void setImplementationURL(String implementationURL) {
@@ -84,7 +84,7 @@ public final class Extension {
     private String implementationVendor = null;
 
     public String getImplementationVendor() {
-        return (this.implementationVendor);
+        return this.implementationVendor;
     }
 
     public void setImplementationVendor(String implementationVendor) {
@@ -99,7 +99,7 @@ public final class Extension {
     private String implementationVendorId = null;
 
     public String getImplementationVendorId() {
-        return (this.implementationVendorId);
+        return this.implementationVendorId;
     }
 
     public void setImplementationVendorId(String implementationVendorId) {
@@ -114,7 +114,7 @@ public final class Extension {
     private String implementationVersion = null;
 
     public String getImplementationVersion() {
-        return (this.implementationVersion);
+        return this.implementationVersion;
     }
 
     public void setImplementationVersion(String implementationVersion) {
@@ -129,7 +129,7 @@ public final class Extension {
     private String specificationVendor = null;
 
     public String getSpecificationVendor() {
-        return (this.specificationVendor);
+        return this.specificationVendor;
     }
 
     public void setSpecificationVendor(String specificationVendor) {
@@ -144,7 +144,7 @@ public final class Extension {
     private String specificationVersion = null;
 
     public String getSpecificationVersion() {
-        return (this.specificationVersion);
+        return this.specificationVersion;
     }
 
     public void setSpecificationVersion(String specificationVersion) {
@@ -216,7 +216,6 @@ public final class Extension {
 
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("Extension[");
         sb.append(extensionName);
         if (implementationURL != null) {
@@ -244,8 +243,7 @@ public final class Extension {
             sb.append(specificationVersion);
         }
         sb.append("]");
-        return (sb.toString());
-
+        return sb.toString();
     }
 
 

==================================================
ResourceSet.java
index 7ce634f753..28c35986ec 100644
--- a/java/org/apache/catalina/util/ManifestResource.java
+++ b/java/org/apache/catalina/util/ManifestResource.java
@@ -117,7 +117,6 @@ public class ManifestResource {
 
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("ManifestResource[");
         sb.append(resourceName);
 
@@ -133,7 +132,7 @@ public class ManifestResource {
             case APPLICATION : sb.append(", resourceType=APPLICATION"); break;
         }
         sb.append("]");
-        return (sb.toString());
+        return sb.toString();
     }
 
 

==================================================
ServerInfo.java
index 40f86dbb56..4e6dc68102 100644
--- a/java/org/apache/catalina/util/ResourceSet.java
+++ b/java/org/apache/catalina/util/ResourceSet.java
@@ -104,9 +104,7 @@ public final class ResourceSet<T> extends HashSet<T> {
      * @return the locked state of this parameter map.
      */
     public boolean isLocked() {
-
-        return (this.locked);
-
+        return this.locked;
     }
 
 
@@ -116,9 +114,7 @@ public final class ResourceSet<T> extends HashSet<T> {
      * @param locked The new locked state
      */
     public void setLocked(boolean locked) {
-
         this.locked = locked;
-
     }
 
 
@@ -142,12 +138,10 @@ public final class ResourceSet<T> extends HashSet<T> {
      */
     @Override
     public boolean add(T o) {
-
         if (locked)
             throw new IllegalStateException
               (sm.getString("resourceSet.locked"));
-        return (super.add(o));
-
+        return super.add(o);
     }
 
 
@@ -177,12 +171,10 @@ public final class ResourceSet<T> extends HashSet<T> {
      */
     @Override
     public boolean remove(Object o) {
-
         if (locked)
             throw new IllegalStateException
               (sm.getString("resourceSet.locked"));
-        return (super.remove(o));
-
+        return super.remove(o);
     }
 
 

==================================================
AbstractAccessLogValve.java
index 44775a974e..020d926add 100644
--- a/java/org/apache/catalina/util/ServerInfo.java
+++ b/java/org/apache/catalina/util/ServerInfo.java
@@ -88,27 +88,21 @@ public class ServerInfo {
      * @return the server identification for this version of Tomcat.
      */
     public static String getServerInfo() {
-
-        return (serverInfo);
-
+        return serverInfo;
     }
 
     /**
      * @return the server built time for this version of Tomcat.
      */
     public static String getServerBuilt() {
-
-        return (serverBuilt);
-
+        return serverBuilt;
     }
 
     /**
      * @return the server's version number.
      */
     public static String getServerNumber() {
-
-        return (serverNumber);
-
+        return serverNumber;
     }
 
     public static void main(String args[]) {

==================================================
AccessLogValve.java
index 693bd45502..641ffaea7b 100644
--- a/java/org/apache/catalina/valves/AbstractAccessLogValve.java
+++ b/java/org/apache/catalina/valves/AbstractAccessLogValve.java
@@ -497,7 +497,7 @@ public abstract class AbstractAccessLogValve extends ValveBase implements Access
      * @return the format pattern.
      */
     public String getPattern() {
-        return (this.pattern);
+        return this.pattern;
     }
 
 
@@ -701,7 +701,7 @@ public abstract class AbstractAccessLogValve extends ValveBase implements Access
         } else {
             for (Locale l: Locale.getAvailableLocales()) {
                 if (name.equals(l.toString())) {
-                    return(l);
+                    return l;
                 }
             }
         }

==================================================
ResolverImpl.java
index 7d1c92f57a..35278e98c0 100644
--- a/java/org/apache/catalina/valves/AccessLogValve.java
+++ b/java/org/apache/catalina/valves/AccessLogValve.java
@@ -163,7 +163,7 @@ public class AccessLogValve extends AbstractAccessLogValve {
      * @return the directory in which we create log files.
      */
     public String getDirectory() {
-        return (directory);
+        return directory;
     }
 
 
@@ -203,7 +203,7 @@ public class AccessLogValve extends AbstractAccessLogValve {
      * @return the log file prefix.
      */
     public String getPrefix() {
-        return (prefix);
+        return prefix;
     }
 
 
@@ -282,7 +282,7 @@ public class AccessLogValve extends AbstractAccessLogValve {
      * @return the log file suffix.
      */
     public String getSuffix() {
-        return (suffix);
+        return suffix;
     }
 
 

==================================================
AjpAprProtocol.java
index 0e6b01b0d1..db972211be 100644
--- a/java/org/apache/catalina/valves/rewrite/ResolverImpl.java
+++ b/java/org/apache/catalina/valves/rewrite/ResolverImpl.java
@@ -159,11 +159,11 @@ public class ResolverImpl extends Resolver {
         } else {
             switch (type) {
             case 0:
-                return (resource.isDirectory());
+                return resource.isDirectory();
             case 1:
-                return (resource.isFile());
+                return resource.isFile();
             case 2:
-                return (resource.isFile() && resource.getContentLength() > 0);
+                return resource.isFile() && resource.getContentLength() > 0;
             default:
                 return false;
             }

==================================================
AjpNio2Protocol.java
index 936810f40c..92ad9c0504 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -57,6 +57,6 @@ public class AjpAprProtocol extends AbstractAjpProtocol<Long> {
 
     @Override
     protected String getNamePrefix() {
-        return ("ajp-apr");
+        return "ajp-apr";
     }
 }

==================================================
AjpNioProtocol.java
index eee83cce64..0a3e75b84f 100644
--- a/java/org/apache/coyote/ajp/AjpNio2Protocol.java
+++ b/java/org/apache/coyote/ajp/AjpNio2Protocol.java
@@ -44,6 +44,6 @@ public class AjpNio2Protocol extends AbstractAjpProtocol<Nio2Channel> {
 
     @Override
     protected String getNamePrefix() {
-        return ("ajp-nio2");
+        return "ajp-nio2";
     }
 }

==================================================
Http11Processor.java
index 6876f1857d..534cbc7c9f 100644
--- a/java/org/apache/coyote/ajp/AjpNioProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpNioProtocol.java
@@ -43,6 +43,6 @@ public class AjpNioProtocol extends AbstractAjpProtocol<NioChannel> {
 
     @Override
     protected String getNamePrefix() {
-        return ("ajp-nio");
+        return "ajp-nio";
     }
 }

==================================================
ELParser.java
index cb868fb05c..2881aba0b2 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -228,7 +228,7 @@ public class Http11Processor extends AbstractProcessor {
             // Check for compatible MIME-TYPE
             String[] compressibleMimeTypes = protocol.getCompressibleMimeTypes();
             if (compressibleMimeTypes != null) {
-                return (startsWithStringArray(compressibleMimeTypes, response.getContentType()));
+                return startsWithStringArray(compressibleMimeTypes, response.getContentType());
             }
         }
 

==================================================
AttributeParser.java
index 480c8dd674..5bca021fca 100644
--- a/java/org/apache/el/parser/ELParser.jjt
+++ b/java/org/apache/el/parser/ELParser.jjt
@@ -43,7 +43,7 @@ public class ELParser {
 
     public static Node parse(String ref) throws ELException {
         try {
-            return (new ELParser(new StringReader(ref))).CompositeExpression();
+            return new ELParser(new StringReader(ref)).CompositeExpression();
         } catch (ParseException pe) {
             throw new ELException(pe.getMessage());
         }

==================================================
JspRuntimeLibrary.java
index 69332f2861..2ce486231b 100644
--- a/java/org/apache/jasper/compiler/AttributeParser.java
+++ b/java/org/apache/jasper/compiler/AttributeParser.java
@@ -50,8 +50,8 @@ public class AttributeParser {
     public static String getUnquoted(String input, char quote,
             boolean isELIgnored, boolean isDeferredSyntaxAllowedAsLiteral,
             boolean strict, boolean quoteAttributeEL) {
-        return (new AttributeParser(input, quote, isELIgnored,
-                isDeferredSyntaxAllowedAsLiteral, strict, quoteAttributeEL)).getUnquoted();
+        return new AttributeParser(input, quote, isELIgnored,
+                isDeferredSyntaxAllowedAsLiteral, strict, quoteAttributeEL).getUnquoted();
     }
 
     /* The quoted input string. */

==================================================
SecurityUtil.java
index b51ddf674a..367fc8169d 100644
--- a/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
+++ b/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
@@ -835,9 +835,9 @@ public class JspRuntimeLibrary {
                                                 String relativePath) {
 
         if (relativePath.startsWith("/"))
-            return (relativePath);
+            return relativePath;
         if (!(request instanceof HttpServletRequest))
-            return (relativePath);
+            return relativePath;
         HttpServletRequest hrequest = (HttpServletRequest) request;
         String uri = (String) request.getAttribute(
                 RequestDispatcher.INCLUDE_SERVLET_PATH);

==================================================
JasperLoader.java
index 5ca7210a0d..01416830a1 100644
--- a/java/org/apache/jasper/security/SecurityUtil.java
+++ b/java/org/apache/jasper/security/SecurityUtil.java
@@ -51,7 +51,7 @@ public final class SecurityUtil{
     public static String filter(String message) {
 
         if (message == null)
-            return (null);
+            return null;
 
         char content[] = new char[message.length()];
         message.getChars(0, message.length(), content, 0);
@@ -74,7 +74,7 @@ public final class SecurityUtil{
                 result.append(content[i]);
             }
         }
-        return (result.toString());
+        return result.toString();
 
     }
 

==================================================
JspCServletContext.java
index bca41707b9..4f379392f2 100644
--- a/java/org/apache/jasper/servlet/JasperLoader.java
+++ b/java/org/apache/jasper/servlet/JasperLoader.java
@@ -56,8 +56,7 @@ public class JasperLoader extends URLClassLoader {
      */
     @Override
     public Class<?> loadClass(String name) throws ClassNotFoundException {
-
-        return (loadClass(name, false));
+        return loadClass(name, false);
     }
 
     /**
@@ -96,7 +95,7 @@ public class JasperLoader extends URLClassLoader {
         if (clazz != null) {
             if (resolve)
                 resolveClass(clazz);
-            return (clazz);
+            return clazz;
         }
 
         // (.5) Permission to access this class when using a SecurityManager

==================================================
LogFactory.java
index 04f99f3c75..bbad8f7262 100644
--- a/java/org/apache/jasper/servlet/JspCServletContext.java
+++ b/java/org/apache/jasper/servlet/JspCServletContext.java
@@ -358,14 +358,12 @@ public class JspCServletContext implements ServletContext {
      */
     @Override
     public InputStream getResourceAsStream(String path) {
-
         try {
-            return (getResource(path).openStream());
+            return getResource(path).openStream();
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
-            return (null);
+            return null;
         }
-
     }
 
 
@@ -383,10 +381,10 @@ public class JspCServletContext implements ServletContext {
             path += "/";
         String basePath = getRealPath(path);
         if (basePath == null)
-            return (thePaths);
+            return thePaths;
         File theBaseDir = new File(basePath);
         if (!theBaseDir.exists() || !theBaseDir.isDirectory())
-            return (thePaths);
+            return thePaths;
         String theFiles[] = theBaseDir.list();
         if (theFiles == null) {
             return thePaths;
@@ -398,7 +396,7 @@ public class JspCServletContext implements ServletContext {
             else if (testFile.isDirectory())
                 thePaths.add(path + theFiles[i] + "/");
         }
-        return (thePaths);
+        return thePaths;
 
     }
 
@@ -431,7 +429,7 @@ public class JspCServletContext implements ServletContext {
      */
     @Override
     public String getServletContextName() {
-        return (getServerInfo());
+        return getServerInfo();
     }
 
 
@@ -443,7 +441,7 @@ public class JspCServletContext implements ServletContext {
     @Override
     @Deprecated
     public Enumeration<String> getServletNames() {
-        return (new Vector<String>().elements());
+        return new Vector<String>().elements();
     }
 
 
@@ -455,7 +453,7 @@ public class JspCServletContext implements ServletContext {
     @Override
     @Deprecated
     public Enumeration<Servlet> getServlets() {
-        return (new Vector<Servlet>().elements());
+        return new Vector<Servlet>().elements();
     }
 
 

==================================================
ContextBindings.java
index 6717610e70..5187c08e6b 100644
--- a/java/org/apache/juli/logging/LogFactory.java
+++ b/java/org/apache/juli/logging/LogFactory.java
@@ -193,8 +193,7 @@ public class LogFactory {
      */
     public static Log getLog(Class<?> clazz)
         throws LogConfigurationException {
-        return (getFactory().getInstance(clazz));
-
+        return getFactory().getInstance(clazz);
     }
 
 
@@ -213,8 +212,7 @@ public class LogFactory {
      */
     public static Log getLog(String name)
         throws LogConfigurationException {
-        return (getFactory().getInstance(name));
-
+        return getFactory().getInstance(name);
     }
 
 

==================================================
NamingContext.java
index 0f2f282a37..ae509b27b7 100644
--- a/java/org/apache/naming/ContextBindings.java
+++ b/java/org/apache/naming/ContextBindings.java
@@ -200,7 +200,7 @@ public class ContextBindings {
      *         context, otherwise <code>false</code>
      */
     public static boolean isThreadBound() {
-        return (threadBindings.containsKey(Thread.currentThread()));
+        return threadBindings.containsKey(Thread.currentThread());
     }
 
 

==================================================
SelectorContext.java
index 53df2198d5..c0888a3f4b 100644
--- a/java/org/apache/naming/NamingContext.java
+++ b/java/org/apache/naming/NamingContext.java
@@ -832,7 +832,7 @@ public class NamingContext implements Context {
                     // Link relative to this context
                     return lookup(link.substring(1));
                 } else {
-                    return (new InitialContext(env)).lookup(link);
+                    return new InitialContext(env).lookup(link);
                 }
             } else if (entry.type == NamingEntry.REFERENCE) {
                 try {

==================================================
MailSessionFactory.java
index e957945dd7..0e263e307b 100644
--- a/java/org/apache/naming/SelectorContext.java
+++ b/java/org/apache/naming/SelectorContext.java
@@ -751,10 +751,10 @@ public class SelectorContext implements Context {
         throws NamingException {
 
         if ((!initialContext) && (name.startsWith(prefix))) {
-            return (name.substring(prefixLength));
+            return name.substring(prefixLength);
         } else {
             if (initialContext) {
-                return (name);
+                return name;
             } else {
                 throw new NamingException
                     (sm.getString("selectorContext.noJavaUrl"));

==================================================
ApplicationParameter.java
index ab32cca7be..fc87930762 100644
--- a/java/org/apache/naming/factory/MailSessionFactory.java
+++ b/java/org/apache/naming/factory/MailSessionFactory.java
@@ -94,7 +94,7 @@ public class MailSessionFactory implements ObjectFactory {
         // Return null if we cannot create an object of the requested type
         final Reference ref = (Reference) refObj;
         if (!ref.getClassName().equals(factoryType))
-            return (null);
+            return null;
 
         // Create a new Session inside a doPrivileged block, so that JavaMail
         // can read its default properties without throwing Security
@@ -147,7 +147,7 @@ public class MailSessionFactory implements ObjectFactory {
 
                     // Create and return the new Session object
                     Session session = Session.getInstance(props, auth);
-                    return (session);
+                    return session;
 
                 }
         } );

==================================================
ContextEjb.java
index 0feff17724..e280614c49 100644
--- a/java/org/apache/tomcat/util/descriptor/web/ApplicationParameter.java
+++ b/java/org/apache/tomcat/util/descriptor/web/ApplicationParameter.java
@@ -43,7 +43,7 @@ public class ApplicationParameter implements Serializable {
     private String description = null;
 
     public String getDescription() {
-        return (this.description);
+        return this.description;
     }
 
     public void setDescription(String description) {
@@ -57,7 +57,7 @@ public class ApplicationParameter implements Serializable {
     private String name = null;
 
     public String getName() {
-        return (this.name);
+        return this.name;
     }
 
     public void setName(String name) {
@@ -72,7 +72,7 @@ public class ApplicationParameter implements Serializable {
     private boolean override = true;
 
     public boolean getOverride() {
-        return (this.override);
+        return this.override;
     }
 
     public void setOverride(boolean override) {
@@ -86,7 +86,7 @@ public class ApplicationParameter implements Serializable {
     private String value = null;
 
     public String getValue() {
-        return (this.value);
+        return this.value;
     }
 
     public void setValue(String value) {
@@ -114,7 +114,7 @@ public class ApplicationParameter implements Serializable {
         sb.append(", override=");
         sb.append(override);
         sb.append("]");
-        return (sb.toString());
+        return sb.toString();
 
     }
 

==================================================
ContextEnvironment.java
index 97dfb601f9..41902534fb 100644
--- a/java/org/apache/tomcat/util/descriptor/web/ContextEjb.java
+++ b/java/org/apache/tomcat/util/descriptor/web/ContextEjb.java
@@ -40,7 +40,7 @@ public class ContextEjb extends ResourceBase {
     private String home = null;
 
     public String getHome() {
-        return (this.home);
+        return this.home;
     }
 
     public void setHome(String home) {
@@ -54,7 +54,7 @@ public class ContextEjb extends ResourceBase {
     private String link = null;
 
     public String getLink() {
-        return (this.link);
+        return this.link;
     }
 
     public void setLink(String link) {
@@ -67,7 +67,7 @@ public class ContextEjb extends ResourceBase {
     private String remote = null;
 
     public String getRemote() {
-        return (this.remote);
+        return this.remote;
     }
 
     public void setRemote(String remote) {
@@ -108,7 +108,7 @@ public class ContextEjb extends ResourceBase {
             sb.append(link);
         }
         sb.append("]");
-        return (sb.toString());
+        return sb.toString();
 
     }
 

==================================================
ContextHandler.java
index b49d896672..f51b250a8c 100644
--- a/java/org/apache/tomcat/util/descriptor/web/ContextEnvironment.java
+++ b/java/org/apache/tomcat/util/descriptor/web/ContextEnvironment.java
@@ -38,7 +38,7 @@ public class ContextEnvironment extends ResourceBase {
     private boolean override = true;
 
     public boolean getOverride() {
-        return (this.override);
+        return this.override;
     }
 
     public void setOverride(boolean override) {
@@ -52,7 +52,7 @@ public class ContextEnvironment extends ResourceBase {
     private String value = null;
 
     public String getValue() {
-        return (this.value);
+        return this.value;
     }
 
     public void setValue(String value) {
@@ -87,7 +87,7 @@ public class ContextEnvironment extends ResourceBase {
         sb.append(", override=");
         sb.append(override);
         sb.append("]");
-        return (sb.toString());
+        return sb.toString();
 
     }
 

==================================================
ContextLocalEjb.java
index 4b35fa32e8..281d718f3b 100644
--- a/java/org/apache/tomcat/util/descriptor/web/ContextHandler.java
+++ b/java/org/apache/tomcat/util/descriptor/web/ContextHandler.java
@@ -41,7 +41,7 @@ public class ContextHandler extends ResourceBase {
     private String handlerclass = null;
 
     public String getHandlerclass() {
-        return (this.handlerclass);
+        return this.handlerclass;
     }
 
     public void setHandlerclass(String handlerclass) {
@@ -147,7 +147,7 @@ public class ContextHandler extends ResourceBase {
             sb.append(this.listProperties());
         }
         sb.append("]");
-        return (sb.toString());
+        return sb.toString();
     }
 
 

==================================================
ContextResource.java
index 73ccafd6b2..29e8d5e3e9 100644
--- a/java/org/apache/tomcat/util/descriptor/web/ContextLocalEjb.java
+++ b/java/org/apache/tomcat/util/descriptor/web/ContextLocalEjb.java
@@ -38,7 +38,7 @@ public class ContextLocalEjb extends ResourceBase {
     private String home = null;
 
     public String getHome() {
-        return (this.home);
+        return this.home;
     }
 
     public void setHome(String home) {
@@ -52,7 +52,7 @@ public class ContextLocalEjb extends ResourceBase {
     private String link = null;
 
     public String getLink() {
-        return (this.link);
+        return this.link;
     }
 
     public void setLink(String link) {
@@ -66,7 +66,7 @@ public class ContextLocalEjb extends ResourceBase {
     private String local = null;
 
     public String getLocal() {
-        return (this.local);
+        return this.local;
     }
 
     public void setLocal(String local) {
@@ -107,7 +107,7 @@ public class ContextLocalEjb extends ResourceBase {
             sb.append(local);
         }
         sb.append("]");
-        return (sb.toString());
+        return sb.toString();
     }
 
 

==================================================
ContextResourceEnvRef.java
index affd9ddb91..f31905ad7c 100644
--- a/java/org/apache/tomcat/util/descriptor/web/ContextResource.java
+++ b/java/org/apache/tomcat/util/descriptor/web/ContextResource.java
@@ -40,7 +40,7 @@ public class ContextResource extends ResourceBase {
     private String auth = null;
 
     public String getAuth() {
-        return (this.auth);
+        return this.auth;
     }
 
     public void setAuth(String auth) {
@@ -54,7 +54,7 @@ public class ContextResource extends ResourceBase {
     private String scope = "Shareable";
 
     public String getScope() {
-        return (this.scope);
+        return this.scope;
     }
 
     public void setScope(String scope) {
@@ -124,7 +124,7 @@ public class ContextResource extends ResourceBase {
             sb.append(scope);
         }
         sb.append("]");
-        return (sb.toString());
+        return sb.toString();
     }
 
 

==================================================
ContextResourceLink.java
index 8902974732..ba3169c8d1 100644
--- a/java/org/apache/tomcat/util/descriptor/web/ContextResourceEnvRef.java
+++ b/java/org/apache/tomcat/util/descriptor/web/ContextResourceEnvRef.java
@@ -38,7 +38,7 @@ public class ContextResourceEnvRef extends ResourceBase {
     private boolean override = true;
 
     public boolean getOverride() {
-        return (this.override);
+        return this.override;
     }
 
     public void setOverride(boolean override) {
@@ -64,7 +64,7 @@ public class ContextResourceEnvRef extends ResourceBase {
         sb.append(", override=");
         sb.append(override);
         sb.append("]");
-        return (sb.toString());
+        return sb.toString();
     }
 
 

==================================================
ContextService.java
index 82e6de1cf2..e50dcf9d7e 100644
--- a/java/org/apache/tomcat/util/descriptor/web/ContextResourceLink.java
+++ b/java/org/apache/tomcat/util/descriptor/web/ContextResourceLink.java
@@ -42,7 +42,7 @@ public class ContextResourceLink extends ResourceBase {
     private String factory = null;
 
     public String getGlobal() {
-        return (this.global);
+        return this.global;
     }
 
     public void setGlobal(String global) {
@@ -77,7 +77,7 @@ public class ContextResourceLink extends ResourceBase {
             sb.append(getGlobal());
         }
         sb.append("]");
-        return (sb.toString());
+        return sb.toString();
     }
 
 

==================================================
ContextTransaction.java
index 45c6ccb1ab..eaa0d14f62 100644
--- a/java/org/apache/tomcat/util/descriptor/web/ContextService.java
+++ b/java/org/apache/tomcat/util/descriptor/web/ContextService.java
@@ -41,7 +41,7 @@ public class ContextService extends ResourceBase {
     private String displayname = null;
 
     public String getDisplayname() {
-        return (this.displayname);
+        return this.displayname;
     }
 
     public void setDisplayname(String displayname) {
@@ -54,7 +54,7 @@ public class ContextService extends ResourceBase {
     private String largeIcon = null;
 
     public String getLargeIcon() {
-        return (this.largeIcon);
+        return this.largeIcon;
     }
 
     public void setLargeIcon(String largeIcon) {
@@ -67,7 +67,7 @@ public class ContextService extends ResourceBase {
     private String smallIcon = null;
 
     public String getSmallIcon() {
-        return (this.smallIcon);
+        return this.smallIcon;
     }
 
     public void setSmallIcon(String smallIcon) {
@@ -95,7 +95,7 @@ public class ContextService extends ResourceBase {
     private String wsdlfile = null;
 
     public String getWsdlfile() {
-        return (this.wsdlfile);
+        return this.wsdlfile;
     }
 
     public void setWsdlfile(String wsdlfile) {
@@ -109,7 +109,7 @@ public class ContextService extends ResourceBase {
     private String jaxrpcmappingfile = null;
 
     public String getJaxrpcmappingfile() {
-        return (this.jaxrpcmappingfile);
+        return this.jaxrpcmappingfile;
     }
 
     public void setJaxrpcmappingfile(String jaxrpcmappingfile) {
@@ -130,7 +130,7 @@ public class ContextService extends ResourceBase {
     private String[] serviceqname = new String[2];
 
     public String[] getServiceqname() {
-        return (this.serviceqname);
+        return this.serviceqname;
     }
 
     public String getServiceqname(int i) {
@@ -258,7 +258,7 @@ public class ContextService extends ResourceBase {
             sb.append(handlers);
         }
         sb.append("]");
-        return (sb.toString());
+        return sb.toString();
     }
 
 

==================================================
ErrorPage.java
index ee1f605964..4f87ecd4fc 100644
--- a/java/org/apache/tomcat/util/descriptor/web/ContextTransaction.java
+++ b/java/org/apache/tomcat/util/descriptor/web/ContextTransaction.java
@@ -83,10 +83,8 @@ public class ContextTransaction implements Serializable {
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("Transaction[");
         sb.append("]");
-        return (sb.toString());
-
+        return sb.toString();
     }
 }

==================================================
FilterDef.java
index 731f7e1512..f55dc5aac4 100644
--- a/java/org/apache/tomcat/util/descriptor/web/ErrorPage.java
+++ b/java/org/apache/tomcat/util/descriptor/web/ErrorPage.java
@@ -60,9 +60,7 @@ public class ErrorPage implements Serializable {
      * @return the error code.
      */
     public int getErrorCode() {
-
-        return (this.errorCode);
-
+        return this.errorCode;
     }
 
 
@@ -72,9 +70,7 @@ public class ErrorPage implements Serializable {
      * @param errorCode The new error code
      */
     public void setErrorCode(int errorCode) {
-
         this.errorCode = errorCode;
-
     }
 
 
@@ -97,9 +93,7 @@ public class ErrorPage implements Serializable {
      * @return the exception type.
      */
     public String getExceptionType() {
-
-        return (this.exceptionType);
-
+        return this.exceptionType;
     }
 
 
@@ -109,9 +103,7 @@ public class ErrorPage implements Serializable {
      * @param exceptionType The new exception type
      */
     public void setExceptionType(String exceptionType) {
-
         this.exceptionType = exceptionType;
-
     }
 
 
@@ -119,9 +111,7 @@ public class ErrorPage implements Serializable {
      * @return the location.
      */
     public String getLocation() {
-
-        return (this.location);
-
+        return this.location;
     }
 
 
@@ -148,7 +138,6 @@ public class ErrorPage implements Serializable {
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("ErrorPage[");
         if (exceptionType == null) {
             sb.append("errorCode=");
@@ -160,8 +149,7 @@ public class ErrorPage implements Serializable {
         sb.append(", location=");
         sb.append(location);
         sb.append("]");
-        return (sb.toString());
-
+        return sb.toString();
     }
 
     public String getName() {

==================================================
FilterMap.java
index 04fd807e49..8d70c79eae 100644
--- a/java/org/apache/tomcat/util/descriptor/web/FilterDef.java
+++ b/java/org/apache/tomcat/util/descriptor/web/FilterDef.java
@@ -47,7 +47,7 @@ public class FilterDef implements Serializable {
     private String description = null;
 
     public String getDescription() {
-        return (this.description);
+        return this.description;
     }
 
     public void setDescription(String description) {
@@ -61,7 +61,7 @@ public class FilterDef implements Serializable {
     private String displayName = null;
 
     public String getDisplayName() {
-        return (this.displayName);
+        return this.displayName;
     }
 
     public void setDisplayName(String displayName) {
@@ -89,7 +89,7 @@ public class FilterDef implements Serializable {
     private String filterClass = null;
 
     public String getFilterClass() {
-        return (this.filterClass);
+        return this.filterClass;
     }
 
     public void setFilterClass(String filterClass) {
@@ -104,7 +104,7 @@ public class FilterDef implements Serializable {
     private String filterName = null;
 
     public String getFilterName() {
-        return (this.filterName);
+        return this.filterName;
     }
 
     public void setFilterName(String filterName) {
@@ -122,7 +122,7 @@ public class FilterDef implements Serializable {
     private String largeIcon = null;
 
     public String getLargeIcon() {
-        return (this.largeIcon);
+        return this.largeIcon;
     }
 
     public void setLargeIcon(String largeIcon) {
@@ -137,9 +137,7 @@ public class FilterDef implements Serializable {
     private final Map<String, String> parameters = new HashMap<>();
 
     public Map<String, String> getParameterMap() {
-
-        return (this.parameters);
-
+        return this.parameters;
     }
 
 
@@ -149,7 +147,7 @@ public class FilterDef implements Serializable {
     private String smallIcon = null;
 
     public String getSmallIcon() {
-        return (this.smallIcon);
+        return this.smallIcon;
     }
 
     public void setSmallIcon(String smallIcon) {
@@ -194,15 +192,13 @@ public class FilterDef implements Serializable {
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("FilterDef[");
         sb.append("filterName=");
         sb.append(this.filterName);
         sb.append(", filterClass=");
         sb.append(this.filterClass);
         sb.append("]");
-        return (sb.toString());
-
+        return sb.toString();
     }
 
 

==================================================
LoginConfig.java
index 44268b4cf8..707ffe76df 100644
--- a/java/org/apache/tomcat/util/descriptor/web/FilterMap.java
+++ b/java/org/apache/tomcat/util/descriptor/web/FilterMap.java
@@ -60,7 +60,7 @@ public class FilterMap extends XmlEncodingBase implements Serializable {
     private String filterName = null;
 
     public String getFilterName() {
-        return (this.filterName);
+        return this.filterName;
     }
 
     public void setFilterName(String filterName) {
@@ -77,7 +77,7 @@ public class FilterMap extends XmlEncodingBase implements Serializable {
         if (matchAllServletNames) {
             return new String[] {};
         } else {
-            return (this.servletNames);
+            return this.servletNames;
         }
     }
 
@@ -122,7 +122,7 @@ public class FilterMap extends XmlEncodingBase implements Serializable {
         if (matchAllUrlPatterns) {
             return new String[] {};
         } else {
-            return (this.urlPatterns);
+            return this.urlPatterns;
         }
     }
 
@@ -203,7 +203,6 @@ public class FilterMap extends XmlEncodingBase implements Serializable {
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("FilterMap[");
         sb.append("filterName=");
         sb.append(this.filterName);
@@ -216,8 +215,7 @@ public class FilterMap extends XmlEncodingBase implements Serializable {
             sb.append(urlPatterns[i]);
         }
         sb.append("]");
-        return (sb.toString());
-
+        return sb.toString();
     }
 
 

==================================================
MessageDestination.java
index cfc5d2e1e8..e1c69520c5 100644
--- a/java/org/apache/tomcat/util/descriptor/web/LoginConfig.java
+++ b/java/org/apache/tomcat/util/descriptor/web/LoginConfig.java
@@ -76,7 +76,7 @@ public class LoginConfig implements Serializable {
     private String authMethod = null;
 
     public String getAuthMethod() {
-        return (this.authMethod);
+        return this.authMethod;
     }
 
     public void setAuthMethod(String authMethod) {
@@ -90,7 +90,7 @@ public class LoginConfig implements Serializable {
     private String errorPage = null;
 
     public String getErrorPage() {
-        return (this.errorPage);
+        return this.errorPage;
     }
 
     public void setErrorPage(String errorPage) {
@@ -107,7 +107,7 @@ public class LoginConfig implements Serializable {
     private String loginPage = null;
 
     public String getLoginPage() {
-        return (this.loginPage);
+        return this.loginPage;
     }
 
     public void setLoginPage(String loginPage) {
@@ -125,7 +125,7 @@ public class LoginConfig implements Serializable {
     private String realmName = null;
 
     public String getRealmName() {
-        return (this.realmName);
+        return this.realmName;
     }
 
     public void setRealmName(String realmName) {
@@ -141,7 +141,6 @@ public class LoginConfig implements Serializable {
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("LoginConfig[");
         sb.append("authMethod=");
         sb.append(authMethod);
@@ -158,8 +157,7 @@ public class LoginConfig implements Serializable {
             sb.append(errorPage);
         }
         sb.append("]");
-        return (sb.toString());
-
+        return sb.toString();
     }
 
 

==================================================
MessageDestinationRef.java
index ffc7945354..be9fcfbb4c 100644
--- a/java/org/apache/tomcat/util/descriptor/web/MessageDestination.java
+++ b/java/org/apache/tomcat/util/descriptor/web/MessageDestination.java
@@ -38,7 +38,7 @@ public class MessageDestination extends ResourceBase {
     private String displayName = null;
 
     public String getDisplayName() {
-        return (this.displayName);
+        return this.displayName;
     }
 
     public void setDisplayName(String displayName) {
@@ -52,7 +52,7 @@ public class MessageDestination extends ResourceBase {
     private String largeIcon = null;
 
     public String getLargeIcon() {
-        return (this.largeIcon);
+        return this.largeIcon;
     }
 
     public void setLargeIcon(String largeIcon) {
@@ -66,7 +66,7 @@ public class MessageDestination extends ResourceBase {
     private String smallIcon = null;
 
     public String getSmallIcon() {
-        return (this.smallIcon);
+        return this.smallIcon;
     }
 
     public void setSmallIcon(String smallIcon) {
@@ -82,7 +82,6 @@ public class MessageDestination extends ResourceBase {
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("MessageDestination[");
         sb.append("name=");
         sb.append(getName());
@@ -103,7 +102,7 @@ public class MessageDestination extends ResourceBase {
             sb.append(getDescription());
         }
         sb.append("]");
-        return (sb.toString());
+        return sb.toString();
     }
 
 

==================================================
ResourceBase.java
index 40d264cfe4..25d9f67674 100644
--- a/java/org/apache/tomcat/util/descriptor/web/MessageDestinationRef.java
+++ b/java/org/apache/tomcat/util/descriptor/web/MessageDestinationRef.java
@@ -38,7 +38,7 @@ public class MessageDestinationRef extends ResourceBase {
     private String link = null;
 
     public String getLink() {
-        return (this.link);
+        return this.link;
     }
 
     public void setLink(String link) {
@@ -52,7 +52,7 @@ public class MessageDestinationRef extends ResourceBase {
     private String usage = null;
 
     public String getUsage() {
-        return (this.usage);
+        return this.usage;
     }
 
     public void setUsage(String usage) {
@@ -67,7 +67,6 @@ public class MessageDestinationRef extends ResourceBase {
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("MessageDestination[");
         sb.append("name=");
         sb.append(getName());
@@ -88,7 +87,7 @@ public class MessageDestinationRef extends ResourceBase {
             sb.append(getDescription());
         }
         sb.append("]");
-        return (sb.toString());
+        return sb.toString();
     }
 
 

==================================================
SecurityCollection.java
index 0d447b1b28..92a03f268f 100644
--- a/java/org/apache/tomcat/util/descriptor/web/ResourceBase.java
+++ b/java/org/apache/tomcat/util/descriptor/web/ResourceBase.java
@@ -42,7 +42,7 @@ public class ResourceBase implements Serializable, Injectable {
     private String description = null;
 
     public String getDescription() {
-        return (this.description);
+        return this.description;
     }
 
     public void setDescription(String description) {
@@ -58,7 +58,7 @@ public class ResourceBase implements Serializable, Injectable {
 
     @Override
     public String getName() {
-        return (this.name);
+        return this.name;
     }
 
     public void setName(String name) {
@@ -72,7 +72,7 @@ public class ResourceBase implements Serializable, Injectable {
     private String type = null;
 
     public String getType() {
-        return (this.type);
+        return this.type;
     }
 
     public void setType(String type) {
@@ -207,7 +207,7 @@ public class ResourceBase implements Serializable, Injectable {
     private NamingResources resources = null;
 
     public NamingResources getNamingResources() {
-        return (this.resources);
+        return this.resources;
     }
 
     public void setNamingResources(NamingResources resources) {

==================================================
SecurityConstraint.java
index c857f4afcf..45951bd997 100644
--- a/java/org/apache/tomcat/util/descriptor/web/SecurityCollection.java
+++ b/java/org/apache/tomcat/util/descriptor/web/SecurityCollection.java
@@ -112,9 +112,7 @@ public class SecurityCollection extends XmlEncodingBase implements Serializable
      * @return the description of this web resource collection.
      */
     public String getDescription() {
-
-        return (this.description);
-
+        return this.description;
     }
 
 
@@ -124,9 +122,7 @@ public class SecurityCollection extends XmlEncodingBase implements Serializable
      * @param description The new description
      */
     public void setDescription(String description) {
-
         this.description = description;
-
     }
 
 
@@ -134,9 +130,7 @@ public class SecurityCollection extends XmlEncodingBase implements Serializable
      * @return the name of this web resource collection.
      */
     public String getName() {
-
-        return (this.name);
-
+        return this.name;
     }
 
 
@@ -146,9 +140,7 @@ public class SecurityCollection extends XmlEncodingBase implements Serializable
      * @param name The new name
      */
     public void setName(String name) {
-
         this.name = name;
-
     }
 
 
@@ -260,9 +252,7 @@ public class SecurityCollection extends XmlEncodingBase implements Serializable
      * explicitly included.
      */
     public String[] findMethods() {
-
-        return (methods);
-
+        return methods;
     }
 
 
@@ -272,9 +262,7 @@ public class SecurityCollection extends XmlEncodingBase implements Serializable
      * methods are excluded.
      */
     public String[] findOmittedMethods() {
-
-        return (omittedMethods);
-
+        return omittedMethods;
     }
 
 
@@ -285,13 +273,11 @@ public class SecurityCollection extends XmlEncodingBase implements Serializable
      * @return <code>true</code> if the pattern is part of the collection
      */
     public boolean findPattern(String pattern) {
-
         for (int i = 0; i < patterns.length; i++) {
             if (patterns[i].equals(pattern))
                 return true;
         }
         return false;
-
     }
 
 
@@ -301,9 +287,7 @@ public class SecurityCollection extends XmlEncodingBase implements Serializable
      * returned.
      */
     public String[] findPatterns() {
-
-        return (patterns);
-
+        return patterns;
     }
 
 
@@ -402,7 +386,6 @@ public class SecurityCollection extends XmlEncodingBase implements Serializable
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("SecurityCollection[");
         sb.append(name);
         if (description != null) {
@@ -410,8 +393,7 @@ public class SecurityCollection extends XmlEncodingBase implements Serializable
             sb.append(description);
         }
         sb.append("]");
-        return (sb.toString());
-
+        return sb.toString();
     }
 
 

==================================================
SecurityRoleRef.java
index 1b9319256a..c63b386628 100644
--- a/java/org/apache/tomcat/util/descriptor/web/SecurityConstraint.java
+++ b/java/org/apache/tomcat/util/descriptor/web/SecurityConstraint.java
@@ -321,9 +321,7 @@ public class SecurityConstraint extends XmlEncodingBase implements Serializable
      * @return the roles array
      */
     public String[] findAuthRoles() {
-
-        return (authRoles);
-
+        return authRoles;
     }
 
 
@@ -335,15 +333,13 @@ public class SecurityConstraint extends XmlEncodingBase implements Serializable
      * @return the collection
      */
     public SecurityCollection findCollection(String name) {
-
         if (name == null)
-            return (null);
+            return null;
         for (int i = 0; i < collections.length; i++) {
             if (name.equals(collections[i].getName()))
-                return (collections[i]);
+                return collections[i];
         }
-        return (null);
-
+        return null;
     }
 
 
@@ -354,9 +350,7 @@ public class SecurityConstraint extends XmlEncodingBase implements Serializable
      * @return the collections array
      */
     public SecurityCollection[] findCollections() {
-
-        return (collections);
-
+        return collections;
     }
 
 
@@ -466,7 +460,6 @@ public class SecurityConstraint extends XmlEncodingBase implements Serializable
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("SecurityConstraint[");
         for (int i = 0; i < collections.length; i++) {
             if (i > 0)
@@ -474,8 +467,7 @@ public class SecurityConstraint extends XmlEncodingBase implements Serializable
             sb.append(collections[i].getName());
         }
         sb.append("]");
-        return (sb.toString());
-
+        return sb.toString();
     }
 
 

==================================================
ServletDef.java
index 264ba25551..360ea7cc3e 100644
--- a/java/org/apache/tomcat/util/descriptor/web/SecurityRoleRef.java
+++ b/java/org/apache/tomcat/util/descriptor/web/SecurityRoleRef.java
@@ -41,7 +41,7 @@ public class SecurityRoleRef implements Serializable {
     private String name = null;
 
     public String getName() {
-        return (this.name);
+        return this.name;
     }
 
     public void setName(String name) {
@@ -55,7 +55,7 @@ public class SecurityRoleRef implements Serializable {
     private String link = null;
 
     public String getLink() {
-        return (this.link);
+        return this.link;
     }
 
     public void setLink(String link) {
@@ -72,7 +72,6 @@ public class SecurityRoleRef implements Serializable {
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("SecurityRoleRef[");
         sb.append("name=");
         sb.append(name);
@@ -81,8 +80,7 @@ public class SecurityRoleRef implements Serializable {
             sb.append(link);
         }
         sb.append("]");
-        return (sb.toString());
-
+        return sb.toString();
     }
 
 

==================================================
AbstractObjectCreationFactory.java
index aa1adf0286..1499f7beba 100644
--- a/java/org/apache/tomcat/util/descriptor/web/ServletDef.java
+++ b/java/org/apache/tomcat/util/descriptor/web/ServletDef.java
@@ -46,7 +46,7 @@ public class ServletDef implements Serializable {
     private String description = null;
 
     public String getDescription() {
-        return (this.description);
+        return this.description;
     }
 
     public void setDescription(String description) {
@@ -60,7 +60,7 @@ public class ServletDef implements Serializable {
     private String displayName = null;
 
     public String getDisplayName() {
-        return (this.displayName);
+        return this.displayName;
     }
 
     public void setDisplayName(String displayName) {
@@ -74,7 +74,7 @@ public class ServletDef implements Serializable {
     private String smallIcon = null;
 
     public String getSmallIcon() {
-        return (this.smallIcon);
+        return this.smallIcon;
     }
 
     public void setSmallIcon(String smallIcon) {
@@ -87,7 +87,7 @@ public class ServletDef implements Serializable {
     private String largeIcon = null;
 
     public String getLargeIcon() {
-        return (this.largeIcon);
+        return this.largeIcon;
     }
 
     public void setLargeIcon(String largeIcon) {
@@ -102,7 +102,7 @@ public class ServletDef implements Serializable {
     private String servletName = null;
 
     public String getServletName() {
-        return (this.servletName);
+        return this.servletName;
     }
 
     public void setServletName(String servletName) {
@@ -120,7 +120,7 @@ public class ServletDef implements Serializable {
     private String servletClass = null;
 
     public String getServletClass() {
-        return (this.servletClass);
+        return this.servletClass;
     }
 
     public void setServletClass(String servletClass) {
@@ -134,7 +134,7 @@ public class ServletDef implements Serializable {
     private String jspFile = null;
 
     public String getJspFile() {
-        return (this.jspFile);
+        return this.jspFile;
     }
 
     public void setJspFile(String jspFile) {
@@ -149,9 +149,7 @@ public class ServletDef implements Serializable {
     private final Map<String, String> parameters = new HashMap<>();
 
     public Map<String, String> getParameterMap() {
-
-        return (this.parameters);
-
+        return this.parameters;
     }
 
     /**
@@ -178,7 +176,7 @@ public class ServletDef implements Serializable {
     private Integer loadOnStartup = null;
 
     public Integer getLoadOnStartup() {
-        return (this.loadOnStartup);
+        return this.loadOnStartup;
     }
 
     public void setLoadOnStartup(String loadOnStartup) {
@@ -192,7 +190,7 @@ public class ServletDef implements Serializable {
     private String runAs = null;
 
     public String getRunAs() {
-        return (this.runAs);
+        return this.runAs;
     }
 
     public void setRunAs(String runAs) {
@@ -206,7 +204,7 @@ public class ServletDef implements Serializable {
     private final Set<SecurityRoleRef> securityRoleRefs = new HashSet<>();
 
     public Set<SecurityRoleRef> getSecurityRoleRefs() {
-        return (this.securityRoleRefs);
+        return this.securityRoleRefs;
     }
 
     /**

==================================================
CallMethodRule.java
index d315669dd9..01faa5347c 100644
--- a/java/org/apache/tomcat/util/digester/AbstractObjectCreationFactory.java
+++ b/java/org/apache/tomcat/util/digester/AbstractObjectCreationFactory.java
@@ -59,9 +59,7 @@ public abstract class AbstractObjectCreationFactory
      */
     @Override
     public Digester getDigester() {
-
-        return (this.digester);
-
+        return this.digester;
     }
 
 
@@ -73,9 +71,7 @@ public abstract class AbstractObjectCreationFactory
      */
     @Override
     public void setDigester(Digester digester) {
-
         this.digester = digester;
-
     }
 
 

==================================================
CallParamRule.java
index 0c2896eda9..9337f2af14 100644
--- a/java/org/apache/tomcat/util/digester/CallMethodRule.java
+++ b/java/org/apache/tomcat/util/digester/CallMethodRule.java
@@ -452,7 +452,6 @@ public class CallMethodRule extends Rule {
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("CallMethodRule[");
         sb.append("methodName=");
         sb.append(methodName);
@@ -469,8 +468,7 @@ public class CallMethodRule extends Rule {
         }
         sb.append("}");
         sb.append("]");
-        return (sb.toString());
-
+        return sb.toString();
     }
 
 

==================================================
Digester.java
index 43aefe346b..a952f3a25c 100644
--- a/java/org/apache/tomcat/util/digester/CallParamRule.java
+++ b/java/org/apache/tomcat/util/digester/CallParamRule.java
@@ -191,7 +191,6 @@ public class CallParamRule extends Rule {
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("CallParamRule[");
         sb.append("paramIndex=");
         sb.append(paramIndex);
@@ -200,8 +199,7 @@ public class CallParamRule extends Rule {
         sb.append(", from stack=");
         sb.append(fromStack);
         sb.append("]");
-        return (sb.toString());
-
+        return sb.toString();
     }
 
 

==================================================
FactoryCreateRule.java
index b64838560f..c3f29231b9 100644
--- a/java/org/apache/tomcat/util/digester/Digester.java
+++ b/java/org/apache/tomcat/util/digester/Digester.java
@@ -318,17 +318,15 @@ public class Digester extends DefaultHandler2 {
      * @return the namespace URI
      */
     public String findNamespaceURI(String prefix) {
-
         ArrayStack<String> stack = namespaces.get(prefix);
         if (stack == null) {
-            return (null);
+            return null;
         }
         try {
             return stack.peek();
         } catch (EmptyStackException e) {
-            return (null);
+            return null;
         }
-
     }
 
 
@@ -344,18 +342,16 @@ public class Digester extends DefaultHandler2 {
      * @return the classloader
      */
     public ClassLoader getClassLoader() {
-
         if (this.classLoader != null) {
-            return (this.classLoader);
+            return this.classLoader;
         }
         if (this.useContextClassLoader) {
             ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
             if (classLoader != null) {
-                return (classLoader);
+                return classLoader;
             }
         }
-        return (this.getClass().getClassLoader());
-
+        return this.getClass().getClassLoader();
     }
 
 
@@ -367,9 +363,7 @@ public class Digester extends DefaultHandler2 {
      *  to revert to the standard rules
      */
     public void setClassLoader(ClassLoader classLoader) {
-
         this.classLoader = classLoader;
-
     }
 
 
@@ -377,9 +371,7 @@ public class Digester extends DefaultHandler2 {
      * @return the current depth of the element stack.
      */
     public int getCount() {
-
-        return (stack.size());
-
+        return stack.size();
     }
 
 
@@ -387,14 +379,12 @@ public class Digester extends DefaultHandler2 {
      * @return the name of the XML element that is currently being processed.
      */
     public String getCurrentElementName() {
-
         String elementName = match;
         int lastSlash = elementName.lastIndexOf('/');
         if (lastSlash >= 0) {
             elementName = elementName.substring(lastSlash + 1);
         }
-        return (elementName);
-
+        return elementName;
     }
 
 
@@ -402,9 +392,7 @@ public class Digester extends DefaultHandler2 {
      * @return the error handler for this Digester.
      */
     public ErrorHandler getErrorHandler() {
-
-        return (this.errorHandler);
-
+        return this.errorHandler;
     }
 
 
@@ -414,9 +402,7 @@ public class Digester extends DefaultHandler2 {
      * @param errorHandler The new error handler
      */
     public void setErrorHandler(ErrorHandler errorHandler) {
-
         this.errorHandler = errorHandler;
-
     }
 
 
@@ -447,8 +433,7 @@ public class Digester extends DefaultHandler2 {
                 factory.setFeature("http://apache.org/xml/features/validation/schema", true);
             }
         }
-        return (factory);
-
+        return factory;
     }
 
 
@@ -539,9 +524,7 @@ public class Digester extends DefaultHandler2 {
      * @return the "namespace aware" flag for parsers we create.
      */
     public boolean getNamespaceAware() {
-
-        return (this.namespaceAware);
-
+        return this.namespaceAware;
     }
 
 
@@ -551,9 +534,7 @@ public class Digester extends DefaultHandler2 {
      * @param namespaceAware The new "namespace aware" flag
      */
     public void setNamespaceAware(boolean namespaceAware) {
-
         this.namespaceAware = namespaceAware;
-
     }
 
 
@@ -571,9 +552,7 @@ public class Digester extends DefaultHandler2 {
      * parsing under, if any.
      */
     public String getPublicId() {
-
-        return (this.publicId);
-
+        return this.publicId;
     }
 
 
@@ -582,9 +561,7 @@ public class Digester extends DefaultHandler2 {
      * added <code>Rule</code> objects.
      */
     public String getRuleNamespaceURI() {
-
-        return (getRules().getNamespaceURI());
-
+        return getRules().getNamespaceURI();
     }
 
 
@@ -597,9 +574,7 @@ public class Digester extends DefaultHandler2 {
      *  regardless of the current namespace URI
      */
     public void setRuleNamespaceURI(String ruleNamespaceURI) {
-
         getRules().setNamespaceURI(ruleNamespaceURI);
-
     }
 
 
@@ -611,7 +586,7 @@ public class Digester extends DefaultHandler2 {
 
         // Return the parser we already created (if any)
         if (parser != null) {
-            return (parser);
+            return parser;
         }
 
         // Create a new parser
@@ -619,11 +594,10 @@ public class Digester extends DefaultHandler2 {
             parser = getFactory().newSAXParser();
         } catch (Exception e) {
             log.error("Digester.getParser: ", e);
-            return (null);
+            return null;
         }
 
-        return (parser);
-
+        return parser;
     }
 
 
@@ -644,8 +618,7 @@ public class Digester extends DefaultHandler2 {
     public Object getProperty(String property)
             throws SAXNotRecognizedException, SAXNotSupportedException {
 
-        return (getParser().getProperty(property));
-
+        return getParser().getProperty(property);
     }
 
 
@@ -656,13 +629,11 @@ public class Digester extends DefaultHandler2 {
      * @return the rules
      */
     public Rules getRules() {
-
         if (this.rules == null) {
             this.rules = new RulesBase();
             this.rules.setDigester(this);
         }
-        return (this.rules);
-
+        return this.rules;
     }
 
 
@@ -673,10 +644,8 @@ public class Digester extends DefaultHandler2 {
      * @param rules New Rules implementation
      */
     public void setRules(Rules rules) {
-
         this.rules = rules;
         this.rules.setDigester(this);
-
     }
 
 
@@ -684,9 +653,7 @@ public class Digester extends DefaultHandler2 {
      * @return the boolean as to whether the context classloader should be used.
      */
     public boolean getUseContextClassLoader() {
-
         return useContextClassLoader;
-
     }
 
 
@@ -710,9 +677,7 @@ public class Digester extends DefaultHandler2 {
      * @return the validating parser flag.
      */
     public boolean getValidating() {
-
-        return (this.validating);
-
+        return this.validating;
     }
 
 
@@ -723,9 +688,7 @@ public class Digester extends DefaultHandler2 {
      * @param validating The new validating parser flag.
      */
     public void setValidating(boolean validating) {
-
         this.validating = validating;
-
     }
 
 
@@ -733,9 +696,7 @@ public class Digester extends DefaultHandler2 {
      * @return the rules validation flag.
      */
     public boolean getRulesValidation() {
-
-        return (this.rulesValidation);
-
+        return this.rulesValidation;
     }
 
 
@@ -746,9 +707,7 @@ public class Digester extends DefaultHandler2 {
      * @param rulesValidation The new rules validation flag.
      */
     public void setRulesValidation(boolean rulesValidation) {
-
         this.rulesValidation = rulesValidation;
-
     }
 
 
@@ -756,9 +715,7 @@ public class Digester extends DefaultHandler2 {
      * @return the fake attributes list.
      */
     public Map<Class<?>, List<String>> getFakeAttributes() {
-
-        return (this.fakeAttributes);
-
+        return this.fakeAttributes;
     }
 
 
@@ -769,7 +726,6 @@ public class Digester extends DefaultHandler2 {
      * @return <code>true</code> if this is a fake attribute
      */
     public boolean isFakeAttribute(Object object, String name) {
-
         if (fakeAttributes == null) {
             return false;
         }
@@ -782,7 +738,6 @@ public class Digester extends DefaultHandler2 {
         } else {
             return result.contains(name);
         }
-
     }
 
 
@@ -1323,7 +1278,7 @@ public class Digester extends DefaultHandler2 {
                 if (log.isDebugEnabled()) {
                     log.debug(" Cannot resolve entity: '" + publicId + "'");
                 }
-                return (null);
+                return null;
 
             } else {
                 // try to resolve using system ID
@@ -1353,7 +1308,7 @@ public class Digester extends DefaultHandler2 {
         }
 
         try {
-            return (new InputSource(entityURL));
+            return new InputSource(entityURL);
         } catch (Exception e) {
             throw createSAXException(e);
         }
@@ -1444,13 +1399,11 @@ public class Digester extends DefaultHandler2 {
      * @exception SAXException if a parsing exception occurs
      */
     public Object parse(File file) throws IOException, SAXException {
-
         configure();
         InputSource input = new InputSource(new FileInputStream(file));
         input.setSystemId("file://" + file.getAbsolutePath());
         getXMLReader().parse(input);
-        return (root);
-
+        return root;
     }
 
 
@@ -1464,11 +1417,9 @@ public class Digester extends DefaultHandler2 {
      * @exception SAXException if a parsing exception occurs
      */
     public Object parse(InputSource input) throws IOException, SAXException {
-
         configure();
         getXMLReader().parse(input);
-        return (root);
-
+        return root;
     }
 
 
@@ -1482,12 +1433,10 @@ public class Digester extends DefaultHandler2 {
      * @exception SAXException if a parsing exception occurs
      */
     public Object parse(InputStream input) throws IOException, SAXException {
-
         configure();
         InputSource is = new InputSource(input);
         getXMLReader().parse(is);
-        return (root);
-
+        return root;
     }
 
 
@@ -1724,14 +1673,12 @@ public class Digester extends DefaultHandler2 {
      * @return the top object
      */
     public Object peek() {
-
         try {
-            return (stack.peek());
+            return stack.peek();
         } catch (EmptyStackException e) {
             log.warn("Empty stack (returning null)");
-            return (null);
+            return null;
         }
-
     }
 
 
@@ -1745,14 +1692,12 @@ public class Digester extends DefaultHandler2 {
      * @return the specified object
      */
     public Object peek(int n) {
-
         try {
-            return (stack.peek(n));
+            return stack.peek(n);
         } catch (EmptyStackException e) {
             log.warn("Empty stack (returning null)");
-            return (null);
+            return null;
         }
-
     }
 
 
@@ -1762,14 +1707,12 @@ public class Digester extends DefaultHandler2 {
      * @return the top object
      */
     public Object pop() {
-
         try {
-            return (stack.pop());
+            return stack.pop();
         } catch (EmptyStackException e) {
             log.warn("Empty stack (returning null)");
-            return (null);
+            return null;
         }
-
     }
 
 
@@ -1841,14 +1784,12 @@ public class Digester extends DefaultHandler2 {
      * @return the top object on the parameters stack
      */
     public Object peekParams() {
-
         try {
-            return (params.peek());
+            return params.peek();
         } catch (EmptyStackException e) {
             log.warn("Empty stack (returning null)");
-            return (null);
+            return null;
         }
-
     }
 
 
@@ -1861,17 +1802,15 @@ public class Digester extends DefaultHandler2 {
      * @return the top object on the parameters stack
      */
     public Object popParams() {
-
         try {
             if (log.isTraceEnabled()) {
                 log.trace("Popping params");
             }
-            return (params.pop());
+            return params.pop();
         } catch (EmptyStackException e) {
             log.warn("Empty stack (returning null)");
-            return (null);
+            return null;
         }
-
     }
 
 

==================================================
ObjectCreateRule.java
index 7dd127eb82..b6f7ad4b5e 100644
--- a/java/org/apache/tomcat/util/digester/FactoryCreateRule.java
+++ b/java/org/apache/tomcat/util/digester/FactoryCreateRule.java
@@ -168,14 +168,12 @@ public class FactoryCreateRule extends Rule {
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("FactoryCreateRule[");
         if (creationFactory != null) {
             sb.append("creationFactory=");
             sb.append(creationFactory);
         }
         sb.append("]");
-        return (sb.toString());
-
+        return sb.toString();
     }
 }

==================================================
RuleSetBase.java
index cbd1df5203..32ce1ebabb 100644
--- a/java/org/apache/tomcat/util/digester/ObjectCreateRule.java
+++ b/java/org/apache/tomcat/util/digester/ObjectCreateRule.java
@@ -145,15 +145,13 @@ public class ObjectCreateRule extends Rule {
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("ObjectCreateRule[");
         sb.append("className=");
         sb.append(className);
         sb.append(", attributeName=");
         sb.append(attributeName);
         sb.append("]");
-        return (sb.toString());
-
+        return sb.toString();
     }
 
 

==================================================
RulesBase.java
index b917540267..ffd2452a69 100644
--- a/java/org/apache/tomcat/util/digester/RuleSetBase.java
+++ b/java/org/apache/tomcat/util/digester/RuleSetBase.java
@@ -47,9 +47,7 @@ public abstract class RuleSetBase implements RuleSet {
      */
     @Override
     public String getNamespaceURI() {
-
-        return (this.namespaceURI);
-
+        return this.namespaceURI;
     }
 
 

==================================================
SetNextRule.java
index 2025af16bb..e76612a7ab 100644
--- a/java/org/apache/tomcat/util/digester/RulesBase.java
+++ b/java/org/apache/tomcat/util/digester/RulesBase.java
@@ -86,9 +86,7 @@ public class RulesBase implements Rules {
      */
     @Override
     public Digester getDigester() {
-
-        return (this.digester);
-
+        return this.digester;
     }
 
 
@@ -116,9 +114,7 @@ public class RulesBase implements Rules {
      */
     @Override
     public String getNamespaceURI() {
-
-        return (this.namespaceURI);
-
+        return this.namespaceURI;
     }
 
 
@@ -222,8 +218,7 @@ public class RulesBase implements Rules {
         if (rulesList == null) {
             rulesList = new ArrayList<>();
         }
-        return (rulesList);
-
+        return rulesList;
     }
 
 
@@ -236,9 +231,7 @@ public class RulesBase implements Rules {
      */
     @Override
     public List<Rule> rules() {
-
-        return (this.rules);
-
+        return this.rules;
     }
 
 
@@ -256,14 +249,13 @@ public class RulesBase implements Rules {
      * @return a rules list
      */
     protected List<Rule> lookup(String namespaceURI, String pattern) {
-
         // Optimize when no namespace URI is specified
         List<Rule> list = this.cache.get(pattern);
         if (list == null) {
-            return (null);
+            return null;
         }
         if ((namespaceURI == null) || (namespaceURI.length() == 0)) {
-            return (list);
+            return list;
         }
 
         // Select only Rules that match on the specified namespace URI
@@ -276,8 +268,7 @@ public class RulesBase implements Rules {
                 results.add(item);
             }
         }
-        return (results);
-
+        return results;
     }
 
 

==================================================
SetPropertiesRule.java
index 15f4a77373..bb8eb9f534 100644
--- a/java/org/apache/tomcat/util/digester/SetNextRule.java
+++ b/java/org/apache/tomcat/util/digester/SetNextRule.java
@@ -153,15 +153,13 @@ public class SetNextRule extends Rule {
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("SetNextRule[");
         sb.append("methodName=");
         sb.append(methodName);
         sb.append(", paramType=");
         sb.append(paramType);
         sb.append("]");
-        return (sb.toString());
-
+        return sb.toString();
     }
 
 

==================================================
AttributeInfo.java
index 761e1a5d8b..3ad71f6539 100644
--- a/java/org/apache/tomcat/util/digester/SetPropertiesRule.java
+++ b/java/org/apache/tomcat/util/digester/SetPropertiesRule.java
@@ -86,10 +86,8 @@ public class SetPropertiesRule extends Rule {
      */
     @Override
     public String toString() {
-
         StringBuilder sb = new StringBuilder("SetPropertiesRule[");
         sb.append("]");
-        return (sb.toString());
-
+        return sb.toString();
     }
 }

==================================================
BaseAttributeFilter.java
index b932fa007c..14342af92e 100644
--- a/java/org/apache/tomcat/util/modeler/AttributeInfo.java
+++ b/java/org/apache/tomcat/util/modeler/AttributeInfo.java
@@ -45,7 +45,7 @@ public class AttributeInfo extends FeatureInfo {
      * @return the display name of this attribute.
      */
     public String getDisplayName() {
-        return (this.displayName);
+        return this.displayName;
     }
 
     public void setDisplayName(String displayName) {
@@ -58,7 +58,7 @@ public class AttributeInfo extends FeatureInfo {
     public String getGetMethod() {
         if(getMethod == null)
             getMethod = getMethodName(getName(), true, isIs());
-        return (this.getMethod);
+        return this.getMethod;
     }
 
     public void setGetMethod(String getMethod) {
@@ -71,7 +71,7 @@ public class AttributeInfo extends FeatureInfo {
      *  with an "is" getter
      */
     public boolean isIs() {
-        return (this.is);
+        return this.is;
     }
 
     public void setIs(boolean is) {
@@ -84,7 +84,7 @@ public class AttributeInfo extends FeatureInfo {
      * @return <code>true</code> if readable
      */
     public boolean isReadable() {
-        return (this.readable);
+        return this.readable;
     }
 
     public void setReadable(boolean readable) {
@@ -98,7 +98,7 @@ public class AttributeInfo extends FeatureInfo {
     public String getSetMethod() {
         if( setMethod == null )
             setMethod = getMethodName(getName(), false, false);
-        return (this.setMethod);
+        return this.setMethod;
     }
 
     public void setSetMethod(String setMethod) {
@@ -110,7 +110,7 @@ public class AttributeInfo extends FeatureInfo {
      * @return <code>true</code> if writable
      */
     public boolean isWriteable() {
-        return (this.writeable);
+        return this.writeable;
     }
 
     public void setWriteable(boolean writeable) {
@@ -147,7 +147,6 @@ public class AttributeInfo extends FeatureInfo {
      * @return the method name
      */
     private String getMethodName(String name, boolean getter, boolean is) {
-
         StringBuilder sb = new StringBuilder();
         if (getter) {
             if (is)
@@ -158,8 +157,7 @@ public class AttributeInfo extends FeatureInfo {
             sb.append("set");
         sb.append(Character.toUpperCase(name.charAt(0)));
         sb.append(name.substring(1));
-        return (sb.toString());
-
+        return sb.toString();
     }
 
 

==================================================
BaseModelMBean.java
index befe287c18..029ecf9775 100644
--- a/java/org/apache/tomcat/util/modeler/BaseAttributeFilter.java
+++ b/java/org/apache/tomcat/util/modeler/BaseAttributeFilter.java
@@ -136,7 +136,7 @@ public class BaseAttributeFilter implements NotificationFilter {
             if (names.size() < 1)
                 return true;
             else
-                return (names.contains(acn.getAttributeName()));
+                return names.contains(acn.getAttributeName());
         }
 
     }

==================================================
BaseNotificationBroadcaster.java
index 5a031508f0..178221efd8 100644
--- a/java/org/apache/tomcat/util/modeler/BaseModelMBean.java
+++ b/java/org/apache/tomcat/util/modeler/BaseModelMBean.java
@@ -208,7 +208,7 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
 
         // Return the results of this method invocation
         // FIXME - should we validate the return type?
-        return (result);
+        return result;
     }
 
 
@@ -236,7 +236,7 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
                 // is the indication of a getter problem
             }
         }
-        return (response);
+        return response;
 
     }
 
@@ -321,7 +321,7 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
 
         // Return the results of this method invocation
         // FIXME - should we validate the return type?
-        return (result);
+        return result;
 
     }
 
@@ -484,7 +484,7 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
             }
         }
 
-        return (getAttributes(names));
+        return getAttributes(names);
 
     }
 
@@ -835,7 +835,7 @@ public class BaseModelMBean implements DynamicMBean, MBeanRegistration, ModelMBe
 
         // Copy remaining notifications as reported by the application
         System.arraycopy(current, 0, response, 2, current.length);
-        return (response);
+        return response;
 
     }
 

==================================================
FeatureInfo.java
index cc4dc92f62..f9f9af5f34 100644
--- a/java/org/apache/tomcat/util/modeler/BaseNotificationBroadcaster.java
+++ b/java/org/apache/tomcat/util/modeler/BaseNotificationBroadcaster.java
@@ -121,9 +121,7 @@ public class BaseNotificationBroadcaster implements NotificationBroadcaster {
      */
     @Override
     public MBeanNotificationInfo[] getNotificationInfo() {
-
-        return (new MBeanNotificationInfo[0]);
-
+        return new MBeanNotificationInfo[0];
     }
 
 

==================================================
ManagedBean.java
index c463a2f4d2..7eef16685d 100644
--- a/java/org/apache/tomcat/util/modeler/FeatureInfo.java
+++ b/java/org/apache/tomcat/util/modeler/FeatureInfo.java
@@ -48,7 +48,7 @@ public class FeatureInfo implements Serializable {
      * @return the human-readable description of this feature.
      */
     public String getDescription() {
-        return (this.description);
+        return this.description;
     }
 
     public void setDescription(String description) {
@@ -61,7 +61,7 @@ public class FeatureInfo implements Serializable {
      *  in the same collection.
      */
     public String getName() {
-        return (this.name);
+        return this.name;
     }
 
     public void setName(String name) {
@@ -72,7 +72,7 @@ public class FeatureInfo implements Serializable {
      * @return the fully qualified Java class name of this element.
      */
     public String getType() {
-        return (this.type);
+        return this.type;
     }
 
     public void setType(String type) {

==================================================
NotificationInfo.java
index 1670ec75f1..fc5c994676 100644
--- a/java/org/apache/tomcat/util/modeler/ManagedBean.java
+++ b/java/org/apache/tomcat/util/modeler/ManagedBean.java
@@ -209,7 +209,7 @@ public class ManagedBean implements java.io.Serializable {
      * by this descriptor.
      */
     public String getType() {
-        return (this.type);
+        return this.type;
     }
 
     public void setType(String type) {

==================================================
Registry.java
index 098ccf5cde..19159cf151 100644
--- a/java/org/apache/tomcat/util/modeler/NotificationInfo.java
+++ b/java/org/apache/tomcat/util/modeler/NotificationInfo.java
@@ -151,6 +151,6 @@ public class NotificationInfo extends FeatureInfo {
             readLock.unlock();
         }
         sb.append("]");
-        return (sb.toString());
+        return sb.toString();
     }
 }

==================================================
ExampleFilter.java
index 8339d191bb..512d7aaa09 100644
--- a/java/org/apache/tomcat/util/modeler/Registry.java
+++ b/java/org/apache/tomcat/util/modeler/Registry.java
@@ -170,7 +170,7 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
                 registry.guard != guard ) {
             return null;
         }
-        return (registry);
+        return registry;
     }
 
     // -------------------- Generic methods  --------------------

==================================================
