89989effabbb3eeee479d8846e19db7bdc52fcf5
==================================================
Align ActionCode.CLOSE
==================================================
Mark Thomas
==================================================
Fri Aug 12 07:45:44 2016 +0000
==================================================
AjpProcessor.java
Align ActionCode.CLOSE

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1756084 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11OutputBuffer.java
index 148fb320e4..fb4f8010c0 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -234,7 +234,7 @@ public class AjpProcessor extends AbstractProcessor {
     /**
      * Finished response.
      */
-    private boolean finished = false;
+    private boolean responseFinished = false;
 
 
     /**
@@ -371,7 +371,7 @@ public class AjpProcessor extends AbstractProcessor {
         case CLOSE: {
             action(ActionCode.COMMIT, null);
             try {
-                finish();
+                finishResponse();
             } catch (IOException e) {
                 setErrorState(ErrorState.CLOSE_CONNECTION_NOW, e);
             }
@@ -795,10 +795,10 @@ public class AjpProcessor extends AbstractProcessor {
             }
 
             // Finish the response if not done yet
-            if (!finished && getErrorState().isIoAllowed()) {
+            if (!responseFinished && getErrorState().isIoAllowed()) {
                 try {
                     action(ActionCode.COMMIT, null);
-                    finish();
+                    finishResponse();
                 } catch (IOException ioe){
                     setErrorState(ErrorState.CLOSE_CONNECTION_NOW, ioe);
                 } catch (Throwable t) {
@@ -856,7 +856,7 @@ public class AjpProcessor extends AbstractProcessor {
         waitingForBodyMessage = false;
         empty = true;
         replay = false;
-        finished = false;
+        responseFinished = false;
         certificates.recycle();
         swallowResponse = false;
         bytesWritten = 0;
@@ -1410,7 +1410,7 @@ public class AjpProcessor extends AbstractProcessor {
         // Calling code should ensure that there is no data in the buffers for
         // non-blocking writes.
         // TODO Validate the assertion above
-        if (!finished) {
+        if (!responseFinished) {
             if (ajpFlush) {
                 // Send the flush message
                 socketWrapper.write(true, flushMessageArray, 0, flushMessageArray.length);
@@ -1423,11 +1423,11 @@ public class AjpProcessor extends AbstractProcessor {
     /**
      * Finish AJP response.
      */
-    private void finish() throws IOException {
-        if (finished)
+    private void finishResponse() throws IOException {
+        if (responseFinished)
             return;
 
-        finished = true;
+        responseFinished = true;
 
         // Swallow the unread body packet if present
         if (waitingForBodyMessage || first && request.getContentLengthLong() > 0) {

==================================================
Http11Processor.java
index 7f0ee2f366..cb2fe22498 100644
--- a/java/org/apache/coyote/http11/Http11OutputBuffer.java
+++ b/java/org/apache/coyote/http11/Http11OutputBuffer.java
@@ -62,7 +62,7 @@ public class Http11OutputBuffer implements OutputBuffer {
     /**
      * Finished flag.
      */
-    protected boolean finished;
+    protected boolean responseFinished;
 
 
     /**
@@ -123,7 +123,7 @@ public class Http11OutputBuffer implements OutputBuffer {
         activeFilters = new OutputFilter[0];
         lastActiveFilter = -1;
 
-        finished = false;
+        responseFinished = false;
 
         outputStreamOutputBuffer = new SocketOutputBuffer();
     }
@@ -288,18 +288,18 @@ public class Http11OutputBuffer implements OutputBuffer {
         // Reset pointers
         pos = 0;
         lastActiveFilter = -1;
-        finished = false;
+        responseFinished = false;
         byteCount = 0;
     }
 
 
     /**
-     * End request.
+     * Finish writing the response.
      *
      * @throws IOException an underlying I/O error occurred
      */
-    public void endRequest() throws IOException {
-        if (finished) {
+    public void finishResponse() throws IOException {
+        if (responseFinished) {
             return;
         }
 
@@ -309,7 +309,7 @@ public class Http11OutputBuffer implements OutputBuffer {
 
         flushBuffer(true);
 
-        finished = true;
+        responseFinished = true;
     }
 
 

==================================================
StreamProcessor.java
index ae386802bc..7b160aa315 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -664,7 +664,7 @@ public class Http11Processor extends AbstractProcessor {
         case CLOSE: {
             action(ActionCode.COMMIT, null);
             try {
-                outputBuffer.endRequest();
+                finishResponse();
             } catch (IOException e) {
                 setErrorState(ErrorState.CLOSE_CONNECTION_NOW, e);
             }
@@ -721,7 +721,7 @@ public class Http11Processor extends AbstractProcessor {
         }
         case CLOSE_NOW: {
             // Block further output
-            outputBuffer.finished = true;
+            outputBuffer.responseFinished = true;
             setErrorState(ErrorState.CLOSE_NOW, null);
             break;
         }
@@ -948,7 +948,7 @@ public class Http11Processor extends AbstractProcessor {
         case UPGRADE: {
             upgradeToken = (UpgradeToken) param;
             // Stop further HTTP output
-            outputBuffer.finished = true;
+            outputBuffer.responseFinished = true;
             break;
         }
 
@@ -1785,7 +1785,7 @@ public class Http11Processor extends AbstractProcessor {
         if (getErrorState().isIoAllowed()) {
             try {
                 action(ActionCode.COMMIT, null);
-                outputBuffer.endRequest();
+                outputBuffer.finishResponse();
             } catch (IOException e) {
                 setErrorState(ErrorState.CLOSE_CONNECTION_NOW, e);
             } catch (Throwable t) {
@@ -1797,6 +1797,11 @@ public class Http11Processor extends AbstractProcessor {
     }
 
 
+    private void finishResponse() throws IOException {
+        outputBuffer.finishResponse();
+    }
+
+
     /**
      * Checks to see if the keep-alive loop should be broken, performing any
      * processing (e.g. sendfile handling) that may have an impact on whether

==================================================
