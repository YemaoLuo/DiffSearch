1d442a735cc3fd793030d05a0f8b9bbe71cb16cf
==================================================
Provide a better mechanism for the RewriteValve to inject a re-written request that avoids:
==================================================
Mark Thomas
==================================================
Fri Dec 12 15:49:26 2014 +0000
==================================================
CoyoteAdapter.java
Provide a better mechanism for the RewriteValve to inject a re-written request that avoids:
- NPEs appearing in the log every time the Valve re-writes a request.
- unnecessary duplication of post-processing in the adapter

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1644935 13f79535-47bb-0310-9956-ffa450edef68



==================================================
RewriteValve.java
index 3acf1d9211..8b65005332 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -415,6 +415,15 @@ public class CoyoteAdapter implements Adapter {
     }
 
 
+    @Override
+    public boolean prepare(org.apache.coyote.Request req, org.apache.coyote.Response res)
+            throws IOException, ServletException {
+        Request request = (Request) req.getNote(ADAPTER_NOTES);
+        Response response = (Response) res.getNote(ADAPTER_NOTES);
+
+        return postParseRequest(req, request, res, response);
+    }
+
 
     @Override
     public void errorDispatch(org.apache.coyote.Request req,

==================================================
Adapter.java
index bf1f85c571..5b15f35929 100644
--- a/java/org/apache/catalina/valves/rewrite/RewriteValve.java
+++ b/java/org/apache/catalina/valves/rewrite/RewriteValve.java
@@ -41,6 +41,8 @@ import org.apache.catalina.Host;
 import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleListener;
+import org.apache.catalina.Pipeline;
+import org.apache.catalina.connector.Connector;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
 import org.apache.catalina.util.LifecycleSupport;
@@ -486,8 +488,14 @@ public class RewriteValve extends ValveBase {
                     request.getMappingData().recycle();
                     // Reinvoke the whole request recursively
                     try {
-                        request.getConnector().getProtocolHandler().getAdapter().service
-                        (request.getCoyoteRequest(), response.getCoyoteResponse());
+                        Connector connector = request.getConnector();
+                        if (!connector.getProtocolHandler().getAdapter().prepare(
+                                request.getCoyoteRequest(), response.getCoyoteResponse())) {
+                            return;
+                        }
+                        Pipeline pipeline = connector.getService().getContainer().getPipeline();
+                        request.setAsyncSupported(pipeline.isAsyncSupported());
+                        pipeline.getFirst().invoke(request, response);
                     } catch (Exception e) {
                         // This doesn't actually happen in the Catalina adapter implementation
                     }
@@ -552,7 +560,9 @@ public class RewriteValve extends ValveBase {
      * Example:
      *  RewriteCond %{REMOTE_HOST}  ^host1.*  [OR]
      *
-     * @param line
+     * @param line A line from the rewrite configuration
+     *
+     * @return The condition, rule or map resulting from parsing the line
      */
     public static Object parse(String line) {
         StringTokenizer tokenizer = new StringTokenizer(line);

==================================================
