12f89ffd9121dd6ffb9d8f56e979bc8e9a715e04
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54724
==================================================
Mark Emlyn
==================================================
Tue Mar 19 19:49:51 2013 +0000
==================================================
WsSession.java
index 168c34402f..ae4f19968e 100644
--- a/java/org/apache/tomcat/websocket/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/LocalStrings.properties
@@ -49,6 +49,7 @@ wsRemoteEndpoint.noEncoder=No encoder specified for object of class [{0}]
 # as many as 4 bytes.
 wsSession.timeout=The WebSocket session timeout expired
 
+wsSession.closed=The WebSocket session has been closed and no method (apart from close()) may be called on a closed session
 wsSession.duplicateHandlerBinary=A binary message handler has already been configured
 wsSession.duplicateHandlerPong=A pong message handler has already been configured
 wsSession.duplicateHandlerText=A text message handler has already been configured

==================================================
TestWsWebSocketContainer.java
index 6c05a38f22..f7beedd16d 100644
--- a/java/org/apache/tomcat/websocket/WsSession.java
+++ b/java/org/apache/tomcat/websocket/WsSession.java
@@ -138,6 +138,7 @@ public class WsSession implements Session {
 
     @Override
     public WebSocketContainer getContainer() {
+        checkState();
         return webSocketContainer;
     }
 
@@ -145,6 +146,9 @@ public class WsSession implements Session {
     @SuppressWarnings("unchecked")
     @Override
     public void addMessageHandler(MessageHandler listener) {
+
+        checkState();
+
         Type t = Util.getMessageType(listener);
 
         if (t.equals(String.class)) {
@@ -180,6 +184,7 @@ public class WsSession implements Session {
 
     @Override
     public Set<MessageHandler> getMessageHandlers() {
+        checkState();
         Set<MessageHandler> result = new HashSet<>();
         if (binaryMessageHandler != null) {
             result.add(binaryMessageHandler);
@@ -196,6 +201,7 @@ public class WsSession implements Session {
 
     @Override
     public void removeMessageHandler(MessageHandler listener) {
+        checkState();
         if (listener == null) {
             return;
         }
@@ -216,24 +222,28 @@ public class WsSession implements Session {
 
     @Override
     public String getProtocolVersion() {
+        checkState();
         return Constants.WS_VERSION_HEADER_VALUE;
     }
 
 
     @Override
     public String getNegotiatedSubprotocol() {
+        checkState();
         return subProtocol;
     }
 
 
     @Override
     public List<Extension> getNegotiatedExtensions() {
+        checkState();
         return Collections.EMPTY_LIST;
     }
 
 
     @Override
     public boolean isSecure() {
+        checkState();
         return secure;
     }
 
@@ -246,54 +256,63 @@ public class WsSession implements Session {
 
     @Override
     public long getMaxIdleTimeout() {
+        checkState();
         return maxIdleTimeout;
     }
 
 
     @Override
     public void setMaxIdleTimeout(long timeout) {
+        checkState();
         this.maxIdleTimeout = timeout;
     }
 
 
     @Override
     public void setMaxBinaryMessageBufferSize(int max) {
+        checkState();
         this.maxBinaryMessageBufferSize = max;
     }
 
 
     @Override
     public int getMaxBinaryMessageBufferSize() {
+        checkState();
         return maxBinaryMessageBufferSize;
     }
 
 
     @Override
     public void setMaxTextMessageBufferSize(int max) {
+        checkState();
         this.maxTextMessageBufferSize = max;
     }
 
 
     @Override
     public int getMaxTextMessageBufferSize() {
+        checkState();
         return maxTextMessageBufferSize;
     }
 
 
     @Override
     public Set<Session> getOpenSessions() {
+        checkState();
         return webSocketContainer.getOpenSessions(localEndpoint.getClass());
     }
 
 
     @Override
     public RemoteEndpoint.Async getAsyncRemote() {
+        checkState();
         return remoteEndpointAsync;
     }
 
 
     @Override
     public RemoteEndpoint.Basic getBasicRemote() {
+        checkState();
         return remoteEndpointBasic;
     }
 
@@ -314,6 +333,9 @@ public class WsSession implements Session {
             if (state != State.OPEN) {
                 return;
             }
+
+            fireEndpointOnClose(closeReason);
+
             state = State.CLOSING;
 
             sendCloseMessage(closeReason);
@@ -331,6 +353,7 @@ public class WsSession implements Session {
         synchronized (stateLock) {
             if (state == State.OPEN) {
                 sendCloseMessage = true;
+                fireEndpointOnClose(closeReason);
             }
 
             state = State.CLOSED;
@@ -345,6 +368,19 @@ public class WsSession implements Session {
     }
 
 
+    private void fireEndpointOnClose(CloseReason closeReason) {
+
+        // Fire the onClose event
+        Thread t = Thread.currentThread();
+        ClassLoader cl = t.getContextClassLoader();
+        t.setContextClassLoader(applicationClassLoader);
+        try {
+            localEndpoint.onClose(this, closeReason);
+        } finally {
+            t.setContextClassLoader(cl);
+        }
+    }
+
     private void sendCloseMessage(CloseReason closeReason) {
         // 125 is maximum size for the payload of a control message
         ByteBuffer msg = ByteBuffer.allocate(125);
@@ -366,16 +402,6 @@ public class WsSession implements Session {
         } finally {
             webSocketContainer.unregisterSession(
                     localEndpoint.getClass(), this);
-
-            // Fire the onClose event
-            Thread t = Thread.currentThread();
-            ClassLoader cl = t.getContextClassLoader();
-            t.setContextClassLoader(applicationClassLoader);
-            try {
-                localEndpoint.onClose(this, closeReason);
-            } finally {
-                t.setContextClassLoader(cl);
-            }
         }
 
     }
@@ -383,30 +409,35 @@ public class WsSession implements Session {
 
     @Override
     public URI getRequestURI() {
+        checkState();
         return requestUri;
     }
 
 
     @Override
     public Map<String,List<String>> getRequestParameterMap() {
+        checkState();
         return requestParameterMap;
     }
 
 
     @Override
     public String getQueryString() {
+        checkState();
         return queryString;
     }
 
 
     @Override
     public Principal getUserPrincipal() {
+        checkState();
         return userPrincipal;
     }
 
 
     @Override
     public Map<String,String> getPathParameters() {
+        checkState();
         return pathParameters;
     }
 
@@ -419,6 +450,7 @@ public class WsSession implements Session {
 
     @Override
     public Map<String,Object> getUserProperties() {
+        checkState();
         return userProperties;
     }
 
@@ -465,6 +497,12 @@ public class WsSession implements Session {
     }
 
 
+    private void checkState() {
+        if (!isOpen()) {
+            throw new IllegalStateException(sm.getString("wsSession.closed"));
+        }
+    }
+
     private static enum State {
         OPEN,
         CLOSING,

==================================================
