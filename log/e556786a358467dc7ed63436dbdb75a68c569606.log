e556786a358467dc7ed63436dbdb75a68c569606
==================================================
Add the two new resolver types (stream and static) to Jasper in the correct order and modify JasperELResolver so the correct resolvers are skipped.
==================================================
Mark Emlyn
==================================================
Wed Jul 17 14:14:28 2013 +0000
==================================================
Validator.java
Add the two new resolver types (stream and static) to Jasper in the correct order and modify JasperELResolver so the correct resolvers are skipped.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1504148 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ELContextImpl.java
index d5acf4fa81..fbd3955b55 100644
--- a/java/org/apache/jasper/compiler/Validator.java
+++ b/java/org/apache/jasper/compiler/Validator.java
@@ -1215,7 +1215,8 @@ class Validator {
                                             attrs.getQName(i), attrs.getURI(i),
                                             attrs.getLocalName(i),
                                             attrs.getValue(i), false, el, false);
-                                    ELContextImpl ctx = new ELContextImpl();
+                                    ELContextImpl ctx = new ELContextImpl(
+                                            expressionFactory);
                                     ctx.setFunctionMapper(getFunctionMapper(el));
                                     try {
                                         jspAttrs[i].validateEL(this.pageInfo.getExpressionFactory(), ctx);
@@ -1377,7 +1378,8 @@ class Validator {
                         result = new Node.JspAttribute(tai, qName, uri,
                                 localName, value, false, el, dynamic);
 
-                        ELContextImpl ctx = new ELContextImpl();
+                        ELContextImpl ctx =
+                                new ELContextImpl(expressionFactory);
                         ctx.setFunctionMapper(getFunctionMapper(el));
 
                         try {
@@ -1564,7 +1566,7 @@ class Validator {
             validateFunctions(el, n);
 
             // test it out
-            ELContextImpl ctx = new ELContextImpl();
+            ELContextImpl ctx = new ELContextImpl(expressionFactory);
             ctx.setFunctionMapper(this.getFunctionMapper(el));
             ExpressionFactory ef = this.pageInfo.getExpressionFactory();
             try {

==================================================
ELResolverImpl.java
index dba2901802..4c73e42880 100644
--- a/java/org/apache/jasper/el/ELContextImpl.java
+++ b/java/org/apache/jasper/el/ELContextImpl.java
@@ -25,10 +25,12 @@ import javax.el.BeanELResolver;
 import javax.el.CompositeELResolver;
 import javax.el.ELContext;
 import javax.el.ELResolver;
+import javax.el.ExpressionFactory;
 import javax.el.FunctionMapper;
 import javax.el.ListELResolver;
 import javax.el.MapELResolver;
 import javax.el.ResourceBundleELResolver;
+import javax.el.StaticFieldELResolver;
 import javax.el.ValueExpression;
 import javax.el.VariableMapper;
 
@@ -95,8 +97,8 @@ public final class ELContextImpl extends ELContext {
 
     private VariableMapper variableMapper;
 
-    public ELContextImpl() {
-        this(getDefaultResolver());
+    public ELContextImpl(ExpressionFactory factory) {
+        this(getDefaultResolver(factory));
     }
 
     public ELContextImpl(ELResolver resolver) {
@@ -129,11 +131,11 @@ public final class ELContextImpl extends ELContext {
         this.variableMapper = variableMapper;
     }
 
-    public static ELResolver getDefaultResolver() {
+    public static ELResolver getDefaultResolver(ExpressionFactory factory) {
         if (Constants.IS_SECURITY_ENABLED) {
             CompositeELResolver defaultResolver = new CompositeELResolver();
-            // TODO ExpressionFactory.getStreamELResolver()
-            // TODO javax.el.StaticFieldResolver
+            defaultResolver.add(factory.getStreamELResolver());
+            defaultResolver.add(new StaticFieldELResolver());
             defaultResolver.add(new MapELResolver());
             defaultResolver.add(new ResourceBundleELResolver());
             defaultResolver.add(new ListELResolver());

==================================================
ExpressionEvaluatorImpl.java
index 5e0056d154..534789ccce 100644
--- a/java/org/apache/jasper/el/ELResolverImpl.java
+++ b/java/org/apache/jasper/el/ELResolverImpl.java
@@ -22,6 +22,7 @@ import java.util.Iterator;
 import javax.el.ELContext;
 import javax.el.ELException;
 import javax.el.ELResolver;
+import javax.el.ExpressionFactory;
 import javax.el.PropertyNotWritableException;
 import javax.servlet.jsp.el.VariableResolver;
 
@@ -31,9 +32,10 @@ public final class ELResolverImpl extends ELResolver {
     private final VariableResolver variableResolver;
     private final ELResolver elResolver;
 
-    public ELResolverImpl(VariableResolver variableResolver) {
+    public ELResolverImpl(VariableResolver variableResolver,
+            ExpressionFactory factory) {
         this.variableResolver = variableResolver;
-        this.elResolver = ELContextImpl.getDefaultResolver();
+        this.elResolver = ELContextImpl.getDefaultResolver(factory);
     }
 
     @Override

==================================================
ExpressionImpl.java
index d5160c3da7..a73ac34c29 100644
--- a/java/org/apache/jasper/el/ExpressionEvaluatorImpl.java
+++ b/java/org/apache/jasper/el/ExpressionEvaluatorImpl.java
@@ -39,12 +39,12 @@ public final class ExpressionEvaluatorImpl extends ExpressionEvaluator {
             FunctionMapper fMapper) throws ELException {
         try {
             ELContextImpl ctx =
-                new ELContextImpl(ELContextImpl.getDefaultResolver());
+                new ELContextImpl(ELContextImpl.getDefaultResolver(factory));
             if (fMapper != null) {
                 ctx.setFunctionMapper(new FunctionMapperImpl(fMapper));
             }
             ValueExpression ve = this.factory.createValueExpression(ctx, expression, expectedType);
-            return new ExpressionImpl(ve);
+            return new ExpressionImpl(ve, factory);
         } catch (javax.el.ELException e) {
             throw new ELParseException(e.getMessage());
         }

==================================================
JasperELResolver.java
index 67e8d6ae52..85e9ff394e 100644
--- a/java/org/apache/jasper/el/ExpressionImpl.java
+++ b/java/org/apache/jasper/el/ExpressionImpl.java
@@ -17,6 +17,7 @@
 package org.apache.jasper.el;
 
 import javax.el.ELContext;
+import javax.el.ExpressionFactory;
 import javax.el.ValueExpression;
 import javax.servlet.jsp.el.ELException;
 import javax.servlet.jsp.el.Expression;
@@ -26,15 +27,18 @@ import javax.servlet.jsp.el.VariableResolver;
 public final class ExpressionImpl extends Expression {
 
     private final ValueExpression ve;
+    private final ExpressionFactory factory;
 
-    public ExpressionImpl(ValueExpression ve) {
+
+    public ExpressionImpl(ValueExpression ve, ExpressionFactory factory) {
         this.ve = ve;
+        this.factory = factory;
     }
 
     @Override
     public Object evaluate(VariableResolver vResolver) throws ELException {
-        ELContext ctx = new ELContextImpl(new ELResolverImpl(vResolver));
+        ELContext ctx =
+                new ELContextImpl(new ELResolverImpl(vResolver, factory));
         return ve.getValue(ctx);
     }
-
 }

==================================================
JspApplicationContextImpl.java
index 5bd94380bf..d798b89232 100644
--- a/java/org/apache/jasper/el/JasperELResolver.java
+++ b/java/org/apache/jasper/el/JasperELResolver.java
@@ -29,6 +29,7 @@ import javax.el.ListELResolver;
 import javax.el.MapELResolver;
 import javax.el.PropertyNotFoundException;
 import javax.el.ResourceBundleELResolver;
+import javax.el.StaticFieldELResolver;
 import javax.servlet.jsp.el.ImplicitObjectELResolver;
 import javax.servlet.jsp.el.ScopedAttributeELResolver;
 
@@ -38,21 +39,24 @@ import javax.servlet.jsp.el.ScopedAttributeELResolver;
  */
 public class JasperELResolver extends CompositeELResolver {
 
+    private static final int STANDARD_RESOLVERS_COUNT = 9;
+
     private int size;
     private ELResolver[] resolvers;
     private final int appResolversSize;
 
-    public JasperELResolver(List<ELResolver> appResolvers) {
+    public JasperELResolver(List<ELResolver> appResolvers,
+            ELResolver streamResolver) {
         appResolversSize = appResolvers.size();
-        resolvers = new ELResolver[appResolversSize + 7];
+        resolvers = new ELResolver[appResolversSize + STANDARD_RESOLVERS_COUNT];
         size = 0;
 
         add(new ImplicitObjectELResolver());
         for (ELResolver appResolver : appResolvers) {
             add(appResolver);
         }
-        // TODO ExpressionFactory.getStreamELResolver()
-        // TODO javax.el.StaticFieldResolver
+        add(streamResolver);
+        add(new StaticFieldELResolver());
         add(new MapELResolver());
         add(new ResourceBundleELResolver());
         add(new ListELResolver());
@@ -82,7 +86,6 @@ public class JasperELResolver extends CompositeELResolver {
         throws NullPointerException, PropertyNotFoundException, ELException {
         context.setPropertyResolved(false);
 
-        // TODO Review this once the additional resolvers have been implemented
         int start;
         Object result = null;
 
@@ -95,9 +98,9 @@ public class JasperELResolver extends CompositeELResolver {
                     return result;
                 }
             }
-            // skip collection-based resolvers (map, resource, list, array, and
-            // bean)
-            start = index + 5;
+            // skip stream, static and collection-based resolvers (map,
+            // resource, list, array) and bean
+            start = index + 7;
         } else {
             // skip implicit resolver only
             start = 1;
@@ -125,8 +128,10 @@ public class JasperELResolver extends CompositeELResolver {
 
         Object result = null;
 
-        // skip implicit and call app resolvers
-        int index = 1 /* implicit */ + appResolversSize;
+        // skip implicit and call app resolvers, stream resolver and static
+        // resolver
+        int index = 1 /* implicit */ + appResolversSize +
+                2 /* stream + static */;
         for (int i = 1; i < index; i++) {
             result = resolvers[i].invoke(
                     context, base, targetMethod, paramTypes, params);
@@ -135,7 +140,7 @@ public class JasperELResolver extends CompositeELResolver {
             }
         }
 
-        // skip map, resource, list, and array resolvers
+        // skip collection (map, resource, list, and array) resolvers
         index += 4;
         // call bean and the rest of resolvers
         for (int i = index; i < size; i++) {

==================================================
TestBeanELResolver.java
index 300fd3b4ce..4b82f0308e 100644
--- a/java/org/apache/jasper/runtime/JspApplicationContextImpl.java
+++ b/java/org/apache/jasper/runtime/JspApplicationContextImpl.java
@@ -112,7 +112,8 @@ public class JspApplicationContextImpl implements JspApplicationContext {
     private ELResolver createELResolver() {
         this.instantiated = true;
         if (this.resolver == null) {
-            CompositeELResolver r = new JasperELResolver(this.resolvers);
+            CompositeELResolver r = new JasperELResolver(this.resolvers,
+                    expressionFactory.getStreamELResolver());
             this.resolver = r;
         }
         return this.resolver;

==================================================
TestResourceBundleELResolver.java
index aeb9d1f81e..805a69cf41 100644
--- a/test/javax/el/TestBeanELResolver.java
+++ b/test/javax/el/TestBeanELResolver.java
@@ -27,7 +27,7 @@ public class TestBeanELResolver {
     @Test
     public void testBug53421() {
         ExpressionFactory factory = ExpressionFactory.newInstance();
-        ELContext context = new ELContextImpl();
+        ELContext context = new ELContextImpl(factory);
 
         Bean bean = new Bean();
 

==================================================
TestELEvaluation.java
index ab4984f938..b4cf5a8d46 100644
--- a/test/javax/el/TestResourceBundleELResolver.java
+++ b/test/javax/el/TestResourceBundleELResolver.java
@@ -32,7 +32,7 @@ public class TestResourceBundleELResolver {
     @Test
     public void bug53001() {
         ExpressionFactory factory = ExpressionFactory.newInstance();
-        ELContext context = new ELContextImpl();
+        ELContext context = new ELContextImpl(factory);
 
         ResourceBundle rb = new TesterResourceBundle();
 

==================================================
TestMethodExpressionImpl.java
index cf8f5b1dc9..63ccd01ba0 100644
--- a/test/org/apache/el/TestELEvaluation.java
+++ b/test/org/apache/el/TestELEvaluation.java
@@ -199,9 +199,9 @@ public class TestELEvaluation {
     // ************************************************************************
 
     private String evaluateExpression(String expression) {
-        ELContextImpl ctx = new ELContextImpl();
-        ctx.setFunctionMapper(new FMapper());
         ExpressionFactoryImpl exprFactory = new ExpressionFactoryImpl();
+        ELContextImpl ctx = new ELContextImpl(exprFactory);
+        ctx.setFunctionMapper(new FMapper());
         ValueExpression ve = exprFactory.createValueExpression(ctx, expression,
                 String.class);
         return (String) ve.getValue(ctx);

==================================================
TestValueExpressionImpl.java
index ad42371a55..5886fbe65d 100644
--- a/test/org/apache/el/TestMethodExpressionImpl.java
+++ b/test/org/apache/el/TestMethodExpressionImpl.java
@@ -43,7 +43,7 @@ public class TestMethodExpressionImpl {
     @Before
     public void setUp() {
         factory = ExpressionFactory.newInstance();
-        context = new ELContextImpl();
+        context = new ELContextImpl(factory);
 
         TesterBeanA beanA = new TesterBeanA();
         beanA.setName("A");

==================================================
TestELParser.java
index b39dbcef8a..3d01cb24e3 100644
--- a/test/org/apache/el/TestValueExpressionImpl.java
+++ b/test/org/apache/el/TestValueExpressionImpl.java
@@ -40,7 +40,7 @@ public class TestValueExpressionImpl {
     @Test
     public void testGetValueReference() {
         ExpressionFactory factory = ExpressionFactory.newInstance();
-        ELContext context = new ELContextImpl();
+        ELContext context = new ELContextImpl(factory);
 
         TesterBeanB beanB = new TesterBeanB();
         beanB.setName("Tomcat");
@@ -66,7 +66,7 @@ public class TestValueExpressionImpl {
     @Test
     public void testGetValueReferenceVariable() {
         ExpressionFactory factory = ExpressionFactory.newInstance();
-        ELContext context = new ELContextImpl();
+        ELContext context = new ELContextImpl(factory);
 
         TesterBeanB beanB = new TesterBeanB();
         beanB.setName("Tomcat");
@@ -94,7 +94,7 @@ public class TestValueExpressionImpl {
     @Test
     public void testBug49345() {
         ExpressionFactory factory = ExpressionFactory.newInstance();
-        ELContext context = new ELContextImpl();
+        ELContext context = new ELContextImpl(factory);
 
         TesterBeanA beanA = new TesterBeanA();
         TesterBeanB beanB = new TesterBeanB();
@@ -123,7 +123,7 @@ public class TestValueExpressionImpl {
     @Test
     public void testBug50105() {
         ExpressionFactory factory = ExpressionFactory.newInstance();
-        ELContext context = new ELContextImpl();
+        ELContext context = new ELContextImpl(factory);
 
         TesterEnum testEnum = TesterEnum.APPLE;
 
@@ -146,7 +146,7 @@ public class TestValueExpressionImpl {
     @Test
     public void testBug51177ObjectMap() {
         ExpressionFactory factory = ExpressionFactory.newInstance();
-        ELContext context = new ELContextImpl();
+        ELContext context = new ELContextImpl(factory);
 
         Object o1 = "String value";
         Object o2 = Integer.valueOf(32);
@@ -173,7 +173,7 @@ public class TestValueExpressionImpl {
     @Test
     public void testBug51177ObjectList() {
         ExpressionFactory factory = ExpressionFactory.newInstance();
-        ELContext context = new ELContextImpl();
+        ELContext context = new ELContextImpl(factory);
 
         Object o1 = "String value";
         Object o2 = Integer.valueOf(32);
@@ -204,7 +204,7 @@ public class TestValueExpressionImpl {
     @Test
     public void testBug51544Bean() throws Exception {
         ExpressionFactory factory = ExpressionFactory.newInstance();
-        ELContext context = new ELContextImpl();
+        ELContext context = new ELContextImpl(factory);
 
         TesterBeanA beanA = new TesterBeanA();
         beanA.setValList(Collections.emptyList());
@@ -227,7 +227,7 @@ public class TestValueExpressionImpl {
     @Test
     public void testBug51544Direct() throws Exception {
         ExpressionFactory factory = ExpressionFactory.newInstance();
-        ELContext context = new ELContextImpl();
+        ELContext context = new ELContextImpl(factory);
 
         List<?> list = Collections.emptyList();
 

==================================================
TestAttributeParser.java
index ab12e0695a..ed7887f722 100644
--- a/test/org/apache/el/parser/TestELParser.java
+++ b/test/org/apache/el/parser/TestELParser.java
@@ -63,7 +63,7 @@ public class TestELParser {
     @Test
     public void testJavaKeyWordSuffix() {
         ExpressionFactory factory = ExpressionFactory.newInstance();
-        ELContext context = new ELContextImpl();
+        ELContext context = new ELContextImpl(factory);
 
         TesterBeanA beanA = new TesterBeanA();
         beanA.setInt("five");
@@ -85,7 +85,7 @@ public class TestELParser {
     @Test
     public void testJavaKeyWordIdentifier() {
         ExpressionFactory factory = ExpressionFactory.newInstance();
-        ELContext context = new ELContextImpl();
+        ELContext context = new ELContextImpl(factory);
 
         TesterBeanA beanA = new TesterBeanA();
         beanA.setInt("five");
@@ -106,7 +106,7 @@ public class TestELParser {
 
     private void testExpression(String expression, String expected) {
         ExpressionFactory factory = ExpressionFactory.newInstance();
-        ELContext context = new ELContextImpl();
+        ELContext context = new ELContextImpl(factory);
 
         ValueExpression ve = factory.createValueExpression(
                 context, expression, String.class);

==================================================
TestJasperELResolver.java
index c551bceb9c..39280fb808 100644
--- a/test/org/apache/jasper/compiler/TestAttributeParser.java
+++ b/test/org/apache/jasper/compiler/TestAttributeParser.java
@@ -171,9 +171,9 @@ public class TestAttributeParser {
 
     private String evalAttr(String expression, char quote) {
 
-        ELContextImpl ctx = new ELContextImpl();
-        ctx.setFunctionMapper(new FMapper());
         ExpressionFactoryImpl exprFactory = new ExpressionFactoryImpl();
+        ELContextImpl ctx = new ELContextImpl(exprFactory);
+        ctx.setFunctionMapper(new FMapper());
         ValueExpression ve = exprFactory.createValueExpression(ctx,
                 AttributeParser.getUnquoted(expression, quote, false, false,
                         false),

==================================================
