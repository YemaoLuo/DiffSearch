3e19b6947c067c896c978d56f645d5f6f8751bb5
==================================================
Validate the scheme pseudo-header in HTTP/2
==================================================
Mark Thomas
==================================================
Thu Feb 23 15:22:10 2023 +0000
==================================================
Stream.java
Validate the scheme pseudo-header in HTTP/2


==================================================
StreamProcessor.java
index 4a82c4a239..c5cc5f5f2f 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -149,6 +149,13 @@ class Stream extends AbstractNonZeroStream implements HeaderEmitter {
 
 
     private void prepareRequest() {
+        if (coyoteRequest.scheme().isNull()) {
+            if (handler.getProtocol().getHttp11Protocol().isSSLEnabled()) {
+                coyoteRequest.scheme().setString("https");
+            } else {
+                coyoteRequest.scheme().setString("http");
+            }
+        }
         MessageBytes hostValueMB = coyoteRequest.getMimeHeaders().getUniqueValue("host");
         if (hostValueMB == null) {
             throw new IllegalArgumentException();

==================================================
HttpParser.java
index 7398ce0de5..affc460a7b 100644
--- a/java/org/apache/coyote/http2/StreamProcessor.java
+++ b/java/org/apache/coyote/http2/StreamProcessor.java
@@ -484,6 +484,12 @@ class StreamProcessor extends AbstractProcessor {
             return false;
         }
 
+        // Scheme must adhere to RFC 3986
+        String scheme = request.scheme().toString();
+        if (!HttpParser.isScheme(scheme)) {
+            return false;
+        }
+
         // Invalid character in request target
         // (other checks such as valid %nn happen later)
         ByteChunk bc = request.requestURI().getByteChunk();

==================================================
TestHttp2Section_8_1.java
index 0758dd5915..6975e3b53f 100644
--- a/java/org/apache/tomcat/util/http/parser/HttpParser.java
+++ b/java/org/apache/tomcat/util/http/parser/HttpParser.java
@@ -47,6 +47,7 @@ public class HttpParser {
     private static final boolean[] IS_HTTP_PROTOCOL = new boolean[ARRAY_SIZE];
     private static final boolean[] IS_ALPHA = new boolean[ARRAY_SIZE];
     private static final boolean[] IS_NUMERIC = new boolean[ARRAY_SIZE];
+    private static final boolean[] IS_SCHEME = new boolean[ARRAY_SIZE];
     private static final boolean[] IS_UNRESERVED = new boolean[ARRAY_SIZE];
     private static final boolean[] IS_SUBDELIM = new boolean[ARRAY_SIZE];
     private static final boolean[] IS_USERINFO = new boolean[ARRAY_SIZE];
@@ -94,6 +95,10 @@ public class HttpParser {
                 IS_ALPHA[i] = true;
             }
 
+            if (IS_ALPHA[i] || IS_NUMERIC[i] || i == '+' || i == '-' || i == '.') {
+                IS_SCHEME[i] = true;
+            }
+
             if (IS_ALPHA[i] || IS_NUMERIC[i] || i == '-' || i == '.' || i == '_' || i == '~') {
                 IS_UNRESERVED[i] = true;
             }
@@ -319,6 +324,52 @@ public class HttpParser {
     }
 
 
+    public static boolean isScheme(int c) {
+        // Fast for valid scheme characters, slower for some incorrect
+        // ones
+        try {
+            return IS_SCHEME[c];
+        } catch (ArrayIndexOutOfBoundsException ex) {
+            return false;
+        }
+    }
+
+
+    /**
+     * Is the provided String a scheme as per RFC 3986?
+     * <br>
+     * Note: scheme = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
+     * <br>
+     * Since a scheme requires at least 1 ALPHA, {@code null} and the empty
+     * string ({@code ""}) are not considered to be valid tokens.
+     *
+     * @param s The string to test
+     *
+     * @return {@code true} if the string is a valid scheme, otherwise
+     *         {@code false}
+     */
+    public static boolean isScheme(String s) {
+        if (s == null) {
+            return false;
+        }
+        if (s.isEmpty()) {
+            return false;
+        }
+        char[] chars = s.toCharArray();
+        if (!isAlpha(chars[0])) {
+            return false;
+        }
+        if (chars.length > 1) {
+            for (int i = 1; i < chars.length; i++) {
+                if (!isScheme(chars[i])) {
+                    return false;
+                }
+            }
+        }
+        return true;
+    }
+
+
     public static boolean isUserInfo(int c) {
         // Fast for valid user info characters, slower for some incorrect
         // ones

==================================================
