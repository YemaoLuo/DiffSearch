ae050b72d6d3929084aece5dc15009e2583e87ce
==================================================
Refactor to reduce code duplication
==================================================
remm remm@apache.org
==================================================
Tue Jan 26 11:27:20 2021 +0100
==================================================
CloudMembershipProvider.java
Refactor to reduce code duplication

This is a workaround for DNS caching which would make the updates fail.
The Kubernetes provider which uses the API seems more dependable
overall, although it requires enabling the necessary access permission.


==================================================
DNSMembershipProvider.java
index 3c6315d049..319d13050a 100644
--- a/java/org/apache/catalina/tribes/membership/cloud/CloudMembershipProvider.java
+++ b/java/org/apache/catalina/tribes/membership/cloud/CloudMembershipProvider.java
@@ -127,38 +127,12 @@ public abstract class CloudMembershipProvider extends MembershipProviderBase imp
         Member[] announcedMembers = fetchMembers();
         // Add new members or refresh the members in the membership
         for (Member member : announcedMembers) {
-            if (membership.memberAlive(member)) {
-                if (log.isDebugEnabled()) {
-                    log.debug("Member added: " + member);
-                }
-                Runnable r = () -> {
-                    String name = Thread.currentThread().getName();
-                    try {
-                        Thread.currentThread().setName("CloudMembership-memberAdded");
-                        membershipListener.memberAdded(member);
-                    } finally {
-                        Thread.currentThread().setName(name);
-                    }
-                };
-                executor.execute(r);
-            }
+            updateMember(member, true);
         }
         // Remove non refreshed members from the membership
         Member[] expired = membership.expire(expirationTime);
         for (Member member : expired) {
-            if (log.isDebugEnabled()) {
-                log.debug("Member disappeared: " + member);
-            }
-            Runnable r = () -> {
-                String name = Thread.currentThread().getName();
-                try {
-                    Thread.currentThread().setName("CloudMembership-memberDisappeared");
-                    membershipListener.memberDisappeared(member);
-                } finally {
-                    Thread.currentThread().setName(name);
-                }
-            };
-            executor.execute(r);
+            updateMember(member, false);
         }
     }
 
@@ -168,6 +142,36 @@ public abstract class CloudMembershipProvider extends MembershipProviderBase imp
      */
     protected abstract Member[] fetchMembers();
 
+    /**
+     * Add or remove specified member.
+     * @param member the member to add
+     * @param add true if the member is added, false otherwise
+     */
+    protected void updateMember(Member member, boolean add) {
+        if (add && !membership.memberAlive(member)) {
+            return;
+        }
+        if (log.isDebugEnabled()) {
+            String message = add ? "Member added: " + member : "Member disappeared: " + member;
+            log.debug(message);
+        }
+        Runnable r = () -> {
+            String name = Thread.currentThread().getName();
+            try {
+                String threadName = add ? "CloudMembership-memberAdded" : "CloudMembership-memberDisappeared";
+                Thread.currentThread().setName(threadName);
+                if (add) {
+                    membershipListener.memberAdded(member);
+                } else {
+                    membershipListener.memberDisappeared(member);
+                }
+            } finally {
+                Thread.currentThread().setName(name);
+            }
+        };
+        executor.execute(r);
+    }
+
     @Override
     public void messageReceived(Serializable msg, Member sender) {
     }

==================================================
