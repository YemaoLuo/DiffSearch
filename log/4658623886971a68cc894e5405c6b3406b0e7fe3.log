4658623886971a68cc894e5405c6b3406b0e7fe3
==================================================
A couple of iterations of the UCDetector
==================================================
Mark Emlyn
==================================================
Sat Oct 13 22:11:33 2012 +0000
==================================================
Constants.java
A couple of iterations of the UCDetector

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1397960 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AnnotationDefault.java
index 5306682459..54265e2aeb 100644
--- a/java/org/apache/tomcat/util/bcel/Constants.java
+++ b/java/org/apache/tomcat/util/bcel/Constants.java
@@ -536,29 +536,4 @@ public interface Constants {
   public static final byte ITEM_Object     = 7;
   public static final byte ITEM_NewObject  = 8;
 
-  public static final String[] ITEM_NAMES = {
-    "Bogus", "Integer", "Float", "Double", "Long",
-    "Null", "InitObject", "Object", "NewObject"
-  };
-
-  /** Constants used to identify StackMapEntry types.
-   *
-   * For those types which can specify a range, the
-   * constant names the lowest value.
-   */
-  public static final int SAME_FRAME = 0;
-  public static final int SAME_LOCALS_1_STACK_ITEM_FRAME = 64;
-  public static final int SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED = 247;
-  public static final int CHOP_FRAME = 248;
-  public static final int SAME_FRAME_EXTENDED = 251;
-  public static final int APPEND_FRAME = 252;
-  public static final int FULL_FRAME = 255;
-
-  /** Constants that define the maximum value of
-   * those constants which store ranges. */
-
-  public static final int SAME_FRAME_MAX = 63;
-  public static final int SAME_LOCALS_1_STACK_ITEM_FRAME_MAX = 127;
-  public static final int CHOP_FRAME_MAX = 250;
-  public static final int APPEND_FRAME_MAX = 254;
 }

==================================================
Annotations.java
index 6f7f6f13be..15c5b92165 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationDefault.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationDefault.java
@@ -20,8 +20,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInputStream;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 /**
  * represents the default value of a annotation for a method info
  *
@@ -66,7 +64,7 @@ public class AnnotationDefault extends Attribute
     public AnnotationDefault(int name_index, int length,
             ElementValue defaultValue, ConstantPool constant_pool)
     {
-        super(Constants.ATTR_ANNOTATION_DEFAULT, name_index, length, constant_pool);
+        super(name_index, length, constant_pool);
     }
 
 

==================================================
Attribute.java
index df4244fe2e..32615a5719 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Annotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Annotations.java
@@ -34,14 +34,13 @@ public abstract class Annotations extends Attribute {
     private AnnotationEntry[] annotation_table;
 
     /**
-     * @param annotation_type the subclass type of the annotation
      * @param name_index Index pointing to the name <em>Code</em>
      * @param length Content length in bytes
      * @param file Input stream
      * @param constant_pool Array of constants
      */
-    public Annotations(byte annotation_type, int name_index, int length, DataInputStream file, ConstantPool constant_pool) throws IOException {
-        this(annotation_type, name_index, length, (AnnotationEntry[]) null, constant_pool);
+    public Annotations(int name_index, int length, DataInputStream file, ConstantPool constant_pool) throws IOException {
+        this(name_index, length, (AnnotationEntry[]) null, constant_pool);
         final int annotation_table_length = (file.readUnsignedShort());
         annotation_table = new AnnotationEntry[annotation_table_length];
         for (int i = 0; i < annotation_table_length; i++) {
@@ -51,14 +50,13 @@ public abstract class Annotations extends Attribute {
 
 
     /**
-     * @param annotation_type the subclass type of the annotation
      * @param name_index Index pointing to the name <em>Code</em>
      * @param length Content length in bytes
      * @param annotation_table the actual annotations
      * @param constant_pool Array of constants
      */
-    public Annotations(byte annotation_type, int name_index, int length, AnnotationEntry[] annotation_table, ConstantPool constant_pool) {
-        super(annotation_type, name_index, length, constant_pool);
+    public Annotations(int name_index, int length, AnnotationEntry[] annotation_table, ConstantPool constant_pool) {
+        super(name_index, length, constant_pool);
         setAnnotationTable(annotation_table);
     }
 

==================================================
ClassFormatException.java
index 42df613978..ceffa0b133 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
@@ -55,14 +55,11 @@ public abstract class Attribute implements Cloneable, Serializable
 
     protected int length; // Content length of attribute field
 
-    protected byte tag; // Tag to distiguish subclasses
-
     protected ConstantPool constant_pool;
 
-    protected Attribute(byte tag, int name_index, int length,
+    protected Attribute(int name_index, int length,
             ConstantPool constant_pool)
     {
-        this.tag = tag;
         this.name_index = name_index;
         this.length = length;
         this.constant_pool = constant_pool;
@@ -180,16 +177,6 @@ public abstract class Attribute implements Cloneable, Serializable
     }
 
 
-    /**
-     * @return Tag of attribute, i.e., its type. Value may not be altered, thus
-     *         there is no setTag() method.
-     */
-    public final byte getTag()
-    {
-        return tag;
-    }
-
-
     /**
      * Use copy() if you want to have a deep copy(), i.e., with all references
      * copied correctly.

==================================================
Code.java
index 7cde30fa83..a92c03aadd 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ClassFormatException.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ClassFormatException.java
@@ -37,8 +37,4 @@ public class ClassFormatException extends RuntimeException {
     public ClassFormatException(String s) {
         super(s);
     }
-
-    public ClassFormatException(String s, Throwable initCause) {
-        super(s, initCause);
-    }
 }

==================================================
ConstantInvokeDynamic.java
index 4072044f87..4f88cf7138 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Code.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Code.java
@@ -20,8 +20,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInputStream;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 /**
  * This class represents a chunk of Java byte code contained in a
  * method. It is instantiated by the
@@ -100,26 +98,13 @@ public final class Code extends Attribute {
      */
     public Code(int name_index, int length, byte[] code,
             CodeException[] exception_table, Attribute[] attributes, ConstantPool constant_pool) {
-        super(Constants.ATTR_CODE, name_index, length, constant_pool);
+        super(name_index, length, constant_pool);
         setCode(code);
         setExceptionTable(exception_table);
         setAttributes(attributes); // Overwrites length!
     }
 
 
-    /**
-     * @return LocalVariableTable of Code, if it has one
-     */
-    public LocalVariableTable getLocalVariableTable() {
-        for (int i = 0; i < attributes_count; i++) {
-            if (attributes[i] instanceof LocalVariableTable) {
-                return (LocalVariableTable) attributes[i];
-            }
-        }
-        return null;
-    }
-
-
     /**
      * @return the internal length of this code attribute (minus the first 6 bytes)
      * and excluding all its attributes

==================================================
ConstantMethodHandle.java
index 8a2a56aacb..3048f5bcac 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantInvokeDynamic.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantInvokeDynamic.java
@@ -32,8 +32,6 @@ import org.apache.tomcat.util.bcel.Constants;
 public final class ConstantInvokeDynamic extends Constant {
 
     private static final long serialVersionUID = 4310367359017396174L;
-    private int bootstrap_method_attr_index;
-    private int name_and_type_index;
 
 
     /**
@@ -43,24 +41,13 @@ public final class ConstantInvokeDynamic extends Constant {
      * @throws IOException
      */
     ConstantInvokeDynamic(DataInput file) throws IOException {
-        this(file.readUnsignedShort(), file.readUnsignedShort());
+        this();
+        file.readUnsignedShort();
+        file.readUnsignedShort();
     }
 
 
-    public ConstantInvokeDynamic(int bootstrap_method_attr_index,
-            int name_and_type_index) {
+    public ConstantInvokeDynamic() {
         super(Constants.CONSTANT_InvokeDynamic);
-        this.bootstrap_method_attr_index = bootstrap_method_attr_index;
-        this.name_and_type_index = name_and_type_index;
-    }
-
-
-    public int getBootstrapMethodAttrIndex() {
-        return bootstrap_method_attr_index;
-    }
-
-
-    public int getNameAndTypeIndex() {
-        return name_and_type_index;
     }
 }

==================================================
ConstantMethodType.java
index c14bfd6326..1794e1c127 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantMethodHandle.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantMethodHandle.java
@@ -32,8 +32,6 @@ import org.apache.tomcat.util.bcel.Constants;
 public final class ConstantMethodHandle extends Constant {
 
     private static final long serialVersionUID = -7875124116920198044L;
-    private int reference_kind;
-    private int reference_index;
 
 
     /**
@@ -43,23 +41,13 @@ public final class ConstantMethodHandle extends Constant {
      * @throws IOException
      */
     ConstantMethodHandle(DataInput file) throws IOException {
-        this(file.readUnsignedByte(), file.readUnsignedShort());
+        this();
+        file.readUnsignedByte();
+        file.readUnsignedShort();
     }
 
 
-    public ConstantMethodHandle(int reference_kind, int reference_index) {
+    public ConstantMethodHandle() {
         super(Constants.CONSTANT_MethodHandle);
-        this.reference_kind = reference_kind;
-        this.reference_index = reference_index;
-    }
-
-
-    public int getReferenceKind() {
-        return reference_kind;
-    }
-
-
-    public int getReferenceIndex() {
-        return reference_index;
     }
 }

==================================================
ConstantValue.java
index c95cc338bc..6fce73d39f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantMethodType.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantMethodType.java
@@ -32,7 +32,6 @@ import org.apache.tomcat.util.bcel.Constants;
 public final class ConstantMethodType extends Constant {
 
     private static final long serialVersionUID = 6750768220616618881L;
-    private int descriptor_index;
 
 
     /**
@@ -42,17 +41,12 @@ public final class ConstantMethodType extends Constant {
      * @throws IOException
      */
     ConstantMethodType(DataInput file) throws IOException {
-        this(file.readUnsignedShort());
+        this();
+        file.readUnsignedShort();
     }
 
 
-    public ConstantMethodType(int descriptor_index) {
+    public ConstantMethodType() {
         super(Constants.CONSTANT_MethodType);
-        this.descriptor_index = descriptor_index;
-    }
-
-
-    public int getDescriptorIndex() {
-        return descriptor_index;
     }
 }

==================================================
Deprecated.java
index 5769aff688..b31b5a1285 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantValue.java
@@ -19,8 +19,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInput;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 /**
  * This class is derived from <em>Attribute</em> and represents a constant
  * value, i.e., a default value for initializing a class field.
@@ -56,7 +54,7 @@ public final class ConstantValue extends Attribute {
      */
     public ConstantValue(int name_index, int length,
             ConstantPool constant_pool) {
-        super(Constants.ATTR_CONSTANT_VALUE, name_index, length, constant_pool);
+        super(name_index, length, constant_pool);
     }
 
 

==================================================
EnclosingMethod.java
index c0955fefb5..d874734ba1 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Deprecated.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Deprecated.java
@@ -20,8 +20,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInputStream;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 /**
  * This class is derived from <em>Attribute</em> and denotes that this is a
  * deprecated method.
@@ -44,7 +42,7 @@ public final class Deprecated extends Attribute {
      * @param constant_pool Array of constants
      */
     public Deprecated(int name_index, int length, byte[] bytes, ConstantPool constant_pool) {
-        super(Constants.ATTR_DEPRECATED, name_index, length, constant_pool);
+        super(name_index, length, constant_pool);
         this.bytes = bytes;
     }
 

==================================================
ExceptionTable.java
index fa866af886..1695db0f67 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/EnclosingMethod.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/EnclosingMethod.java
@@ -19,8 +19,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInputStream;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 /**
  * This attribute exists for local or
  * anonymous classes and ... there can be only one.
@@ -32,7 +30,7 @@ public class EnclosingMethod extends Attribute {
     // Ctors - and code to read an attribute in.
     public EnclosingMethod(int nameIndex, int len, DataInputStream dis,
             ConstantPool cpool) throws IOException {
-        super(Constants.ATTR_ENCLOSING_METHOD, nameIndex, len, cpool);
+        super(nameIndex, len, cpool);
         // Unused class index
         dis.readUnsignedShort();
         // Unused method index

==================================================
InnerClasses.java
index c9daab15dd..288cab2463 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ExceptionTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ExceptionTable.java
@@ -20,8 +20,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInputStream;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 /**
  * This class represents the table of exceptions that are thrown by a
  * method. This attribute may be used once per method.  The name of
@@ -49,7 +47,7 @@ public final class ExceptionTable extends Attribute {
      */
     public ExceptionTable(int name_index, int length, int[] exception_index_table,
             ConstantPool constant_pool) {
-        super(Constants.ATTR_EXCEPTIONS, name_index, length, constant_pool);
+        super(name_index, length, constant_pool);
         setExceptionIndexTable(exception_index_table);
     }
 

==================================================
LineNumber.java
index 61e86b1768..7faa049d6f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/InnerClasses.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/InnerClasses.java
@@ -20,8 +20,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInputStream;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 /**
  * This class is derived from <em>Attribute</em> and denotes that this class
  * is an Inner class of another.
@@ -47,7 +45,7 @@ public final class InnerClasses extends Attribute {
      */
     public InnerClasses(int name_index, int length, InnerClass[] inner_classes,
             ConstantPool constant_pool) {
-        super(Constants.ATTR_INNER_CLASSES, name_index, length, constant_pool);
+        super(name_index, length, constant_pool);
         setInnerClasses(inner_classes);
     }
 

==================================================
LineNumberTable.java
index 19c5992cd7..25f13a7fb4 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LineNumber.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LineNumber.java
@@ -18,7 +18,6 @@
 package org.apache.tomcat.util.bcel.classfile;
 
 import java.io.DataInput;
-import java.io.DataOutputStream;
 import java.io.IOException;
 import java.io.Serializable;
 
@@ -34,8 +33,6 @@ import java.io.Serializable;
 public final class LineNumber implements Cloneable, Serializable {
 
     private static final long serialVersionUID = 3393830630264494355L;
-    private int start_pc; // Program Counter (PC) corresponds to line
-    private int line_number; // number in source file
 
 
     /**
@@ -44,29 +41,8 @@ public final class LineNumber implements Cloneable, Serializable {
      * @throws IOException
      */
     LineNumber(DataInput file) throws IOException {
-        this(file.readUnsignedShort(), file.readUnsignedShort());
-    }
-
-
-    /**
-     * @param start_pc Program Counter (PC) corresponds to
-     * @param line_number line number in source file
-     */
-    public LineNumber(int start_pc, int line_number) {
-        this.start_pc = start_pc;
-        this.line_number = line_number;
-    }
-
-
-    /**
-     * Dump line number/pc pair to file stream in binary format.
-     *
-     * @param file Output file stream
-     * @throws IOException
-     */
-    public final void dump( DataOutputStream file ) throws IOException {
-        file.writeShort(start_pc);
-        file.writeShort(line_number);
+        file.readUnsignedShort();
+        file.readUnsignedShort();
     }
 
 

==================================================
LocalVariable.java
index a70ca7ac8f..224e8b3b82 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LineNumberTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LineNumberTable.java
@@ -20,8 +20,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInputStream;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 /**
  * This class represents a table of line numbers for debugging
  * purposes. This attribute is used by the <em>Code</em> attribute. It
@@ -47,7 +45,7 @@ public final class LineNumberTable extends Attribute {
      */
     public LineNumberTable(int name_index, int length, LineNumber[] line_number_table,
             ConstantPool constant_pool) {
-        super(Constants.ATTR_LINE_NUMBER_TABLE, name_index, length, constant_pool);
+        super(name_index, length, constant_pool);
         setLineNumberTable(line_number_table);
     }
 

==================================================
LocalVariableTable.java
index adbf272ee3..caf1b73555 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariable.java
@@ -34,9 +34,6 @@ import org.apache.tomcat.util.bcel.Constants;
 public final class LocalVariable implements Constants, Cloneable, Serializable {
 
     private static final long serialVersionUID = -914189896372081589L;
-    private int index; /* Variable is `index'th local variable on
-     * this method's frame.
-     */
 
 
     /**
@@ -49,15 +46,7 @@ public final class LocalVariable implements Constants, Cloneable, Serializable {
         file.readUnsignedShort();
         file.readUnsignedShort();
         file.readUnsignedShort();
-        this.index = file.readUnsignedShort();
-    }
-
-
-    /**
-     * @return index of register where variable is stored
-     */
-    public final int getIndex() {
-        return index;
+        file.readUnsignedShort();
     }
 
 

==================================================
LocalVariableTypeTable.java
index 22d2d95b01..d1d793405e 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTable.java
@@ -20,8 +20,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInputStream;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 /**
  * This class represents colection of local variables in a
  * method. This attribute is contained in the <em>Code</em> attribute.
@@ -46,7 +44,7 @@ public class LocalVariableTable extends Attribute {
      */
     public LocalVariableTable(int name_index, int length, LocalVariable[] local_variable_table,
             ConstantPool constant_pool) {
-        super(Constants.ATTR_LOCAL_VARIABLE_TABLE, name_index, length, constant_pool);
+        super(name_index, length, constant_pool);
         setLocalVariableTable(local_variable_table);
     }
 

==================================================
Method.java
index 56e59bc10d..c0cc719c87 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTypeTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTypeTable.java
@@ -19,8 +19,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInputStream;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 // The new table is used when generic types are about...
 
 //LocalVariableTable_attribute {
@@ -57,7 +55,7 @@ private int             local_variable_type_table_length; // Table of local
                                 LocalVariable[] local_variable_table,
                                 ConstantPool    constant_pool)
   {
-    super(Constants.ATTR_LOCAL_VARIABLE_TYPE_TABLE, name_index, length, constant_pool);
+    super(name_index, length, constant_pool);
     setLocalVariableTable(local_variable_table);
   }
 

==================================================
PMGClass.java
index 594926daba..4c5945f617 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Method.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Method.java
@@ -72,19 +72,6 @@ public final class Method extends FieldOrMethod {
     }
 
 
-    /**
-     * @return Code attribute of method, if any
-     */
-    public final Code getCode() {
-        for (int i = 0; i < attributes_count; i++) {
-            if (attributes[i] instanceof Code) {
-                return (Code) attributes[i];
-            }
-        }
-        return null;
-    }
-
-
     /**
      * Return value as defined by given BCELComparator strategy.
      * By default two method objects are said to be equal when

==================================================
ParameterAnnotations.java
index 2d7d76e4ba..048b6ef1e3 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/PMGClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/PMGClass.java
@@ -20,8 +20,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInput;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 /**
  * This class is derived from <em>Attribute</em> and represents a reference
  * to a PMG attribute.
@@ -57,7 +55,7 @@ public final class PMGClass extends Attribute {
      * @param constant_pool Array of constants
      */
     public PMGClass(int name_index, int length, ConstantPool constant_pool) {
-        super(Constants.ATTR_PMG, name_index, length, constant_pool);
+        super(name_index, length, constant_pool);
     }
 
 

==================================================
RuntimeInvisibleAnnotations.java
index eecb9fb85a..00d5d0231a 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ParameterAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ParameterAnnotations.java
@@ -35,15 +35,14 @@ public abstract class ParameterAnnotations extends Attribute {
 
 
     /**
-     * @param parameter_annotation_type the subclass type of the parameter annotation
      * @param name_index Index pointing to the name <em>Code</em>
      * @param length Content length in bytes
      * @param file Input stream
      * @param constant_pool Array of constants
      */
-    ParameterAnnotations(byte parameter_annotation_type, int name_index, int length,
+    ParameterAnnotations(int name_index, int length,
             DataInputStream file, ConstantPool constant_pool) throws IOException {
-        this(parameter_annotation_type, name_index, length, (ParameterAnnotationEntry[]) null,
+        this(name_index, length, (ParameterAnnotationEntry[]) null,
                 constant_pool);
         num_parameters = (file.readUnsignedByte());
         parameter_annotation_table = new ParameterAnnotationEntry[num_parameters];
@@ -54,15 +53,14 @@ public abstract class ParameterAnnotations extends Attribute {
 
 
     /**
-     * @param parameter_annotation_type the subclass type of the parameter annotation
      * @param name_index Index pointing to the name <em>Code</em>
      * @param length Content length in bytes
      * @param parameter_annotation_table the actual parameter annotations
      * @param constant_pool Array of constants
      */
-    public ParameterAnnotations(byte parameter_annotation_type, int name_index, int length,
+    public ParameterAnnotations(int name_index, int length,
             ParameterAnnotationEntry[] parameter_annotation_table, ConstantPool constant_pool) {
-        super(parameter_annotation_type, name_index, length, constant_pool);
+        super(name_index, length, constant_pool);
         setParameterAnnotationTable(parameter_annotation_table);
     }
 

==================================================
RuntimeInvisibleParameterAnnotations.java
index 8deb53696d..89623a1d3a 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/RuntimeInvisibleAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/RuntimeInvisibleAnnotations.java
@@ -20,8 +20,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInputStream;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 /**
  * represents an annotation that is represented in the class file but is not
  * provided to the JVM.
@@ -48,7 +46,7 @@ public class RuntimeInvisibleAnnotations extends Annotations
                                 DataInputStream file, ConstantPool constant_pool)
                                 throws IOException
     {
-        super(Constants.ATTR_RUNTIMEIN_VISIBLE_ANNOTATIONS, name_index, length,
+        super(name_index, length,
                 file, constant_pool);
     }
 

==================================================
RuntimeVisibleAnnotations.java
index 43730a2241..1f1a6de19b 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/RuntimeInvisibleParameterAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/RuntimeInvisibleParameterAnnotations.java
@@ -20,8 +20,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInputStream;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 /**
  * represents a parameter annotation that is represented in the class file
  * but is not provided to the JVM.
@@ -43,7 +41,7 @@ public class RuntimeInvisibleParameterAnnotations extends ParameterAnnotations {
      */
     RuntimeInvisibleParameterAnnotations(int name_index, int length, DataInputStream file,
             ConstantPool constant_pool) throws IOException {
-        super(Constants.ATTR_RUNTIMEIN_VISIBLE_PARAMETER_ANNOTATIONS, name_index, length, file,
+        super(name_index, length, file,
                 constant_pool);
     }
 

==================================================
RuntimeVisibleParameterAnnotations.java
index b4d8e0274b..cde8bf5016 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/RuntimeVisibleAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/RuntimeVisibleAnnotations.java
@@ -20,8 +20,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInputStream;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 /**
  * represents an annotation that is represented in the class file and is
  * provided to the JVM.
@@ -48,7 +46,7 @@ public class RuntimeVisibleAnnotations extends Annotations
             DataInputStream file, ConstantPool constant_pool)
             throws IOException
     {
-        super(Constants.ATTR_RUNTIME_VISIBLE_ANNOTATIONS, name_index, length,
+        super(name_index, length,
                 file, constant_pool);
     }
 

==================================================
Signature.java
index ad0acbedf2..0ea2ec1028 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/RuntimeVisibleParameterAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/RuntimeVisibleParameterAnnotations.java
@@ -20,8 +20,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInputStream;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 /**
  * represents a parameter annotation that is represented in the class file
  * and is provided to the JVM.
@@ -43,8 +41,7 @@ public class RuntimeVisibleParameterAnnotations extends ParameterAnnotations {
      */
     RuntimeVisibleParameterAnnotations(int name_index, int length, DataInputStream file,
             ConstantPool constant_pool) throws IOException {
-        super(Constants.ATTR_RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS, name_index, length, file,
-                constant_pool);
+        super(name_index, length, file, constant_pool);
     }
 
 

==================================================
SourceFile.java
index 822b6c4465..0299559b39 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Signature.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Signature.java
@@ -20,8 +20,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInput;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 /**
  * This class is derived from <em>Attribute</em> and represents a reference
  * to a GJ attribute.
@@ -56,7 +54,7 @@ public final class Signature extends Attribute {
      * @param constant_pool Array of constants
      */
     public Signature(int name_index, int length, ConstantPool constant_pool) {
-        super(Constants.ATTR_SIGNATURE, name_index, length, constant_pool);
+        super(name_index, length, constant_pool);
     }
 
 

==================================================
StackMap.java
index b8bc7d9cf9..d6adaec66d 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/SourceFile.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/SourceFile.java
@@ -20,8 +20,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInput;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 /**
  * This class is derived from <em>Attribute</em> and represents a reference
  * to the source file of this class.  At most one SourceFile attribute
@@ -60,7 +58,7 @@ public final class SourceFile extends Attribute {
      * associated with.
      */
     public SourceFile(int name_index, int length, ConstantPool constant_pool) {
-        super(Constants.ATTR_SOURCE_FILE, name_index, length, constant_pool);
+        super(name_index, length, constant_pool);
     }
 
 

==================================================
StackMapTable.java
index 2372873971..4f08aa25a7 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMap.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMap.java
@@ -20,8 +20,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInputStream;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 /**
  * This class represents a stack map attribute used for
  * preverification of Java classes for the <a
@@ -51,7 +49,7 @@ public final class StackMap extends Attribute {
      * @param constant_pool Array of constants
      */
     public StackMap(int name_index, int length, StackMapEntry[] map, ConstantPool constant_pool) {
-        super(Constants.ATTR_STACK_MAP, name_index, length, constant_pool);
+        super(name_index, length, constant_pool);
         setStackMap(map);
     }
 

==================================================
Synthetic.java
index 3e2a4681c4..4af4567e45 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapTable.java
@@ -20,8 +20,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInputStream;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 /**
  * This class represents a stack map attribute used for
  * preverification of Java classes for the <a
@@ -51,7 +49,7 @@ public final class StackMapTable extends Attribute {
      * @param constant_pool Array of constants
      */
     public StackMapTable(int name_index, int length, StackMapTableEntry[] map, ConstantPool constant_pool) {
-        super(Constants.ATTR_STACK_MAP_TABLE, name_index, length, constant_pool);
+        super(name_index, length, constant_pool);
         setStackMapTable(map);
     }
 

==================================================
Unknown.java
index 3037ada14a..801e4c91a5 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Synthetic.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Synthetic.java
@@ -20,8 +20,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInputStream;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 /**
  * This class is derived from <em>Attribute</em> and declares this class as
  * `synthetic', i.e., it needs special handling.  The JVM specification
@@ -50,7 +48,7 @@ public final class Synthetic extends Attribute {
      * with.
      */
     public Synthetic(int name_index, int length, byte[] bytes, ConstantPool constant_pool) {
-        super(Constants.ATTR_SYNTHETIC, name_index, length, constant_pool);
+        super(name_index, length, constant_pool);
         this.bytes = bytes;
     }
 

==================================================
Utility.java
index fbb76626b1..2f114283ee 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Unknown.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Unknown.java
@@ -58,7 +58,7 @@ public final class Unknown extends Attribute {
      * @param constant_pool Array of constants
      */
     public Unknown(int name_index, int length, byte[] bytes, ConstantPool constant_pool) {
-        super(Constants.ATTR_UNKNOWN, name_index, length, constant_pool);
+        super(name_index, length, constant_pool);
         this.bytes = bytes;
         name = ((ConstantUtf8) constant_pool.getConstant(name_index, Constants.CONSTANT_Utf8))
                 .getBytes();

==================================================
ByteSequence.java
index abc04813f3..c13c968d31 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Utility.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Utility.java
@@ -17,10 +17,6 @@
  */
 package org.apache.tomcat.util.bcel.classfile;
 
-import java.io.IOException;
-
-import org.apache.tomcat.util.bcel.Constants;
-import org.apache.tomcat.util.bcel.util.ByteSequence;
 
 /**
  * Utility functions that do not really belong to any class in particular.
@@ -30,325 +26,6 @@ import org.apache.tomcat.util.bcel.util.ByteSequence;
  */
 public abstract class Utility {
 
-    private static int unwrap( ThreadLocal<Integer> tl ) {
-        return tl.get().intValue();
-    }
-
-
-    private static void wrap( ThreadLocal<Integer> tl, int value ) {
-        tl.set(Integer.valueOf(value));
-    }
-
-    private static ThreadLocal<Integer> consumed_chars =
-            new ThreadLocal<Integer>() {
-        @Override
-        protected Integer initialValue() {
-            return Integer.valueOf(0);
-        }
-    };/* How many chars have been consumed
-     * during parsing in signatureToString().
-     * Read by methodSignatureToString().
-     * Set by side effect,but only internally.
-     */
-    private static boolean wide = false; /* The `WIDE' instruction is used in the
-     * byte code to allow 16-bit wide indices
-     * for local variables. This opcode
-     * precedes an `ILOAD', e.g.. The opcode
-     * immediately following takes an extra
-     * byte which is combined with the
-     * following byte to form a
-     * 16-bit value.
-     */
-
-
-    /**
-     * Convert bit field of flags into string such as `static final'.
-     *
-     * Special case: Classes compiled with new compilers and with the
-     * `ACC_SUPER' flag would be said to be "synchronized". This is
-     * because SUN used the same value for the flags `ACC_SUPER' and
-     * `ACC_SYNCHRONIZED'.
-     *
-     * @param  access_flags Access flags
-     * @param  for_class access flags are for class qualifiers ?
-     * @return String representation of flags
-     */
-    public static final String accessToString( int access_flags, boolean for_class ) {
-        StringBuilder buf = new StringBuilder();
-        int p = 0;
-        for (int i = 0; p < Constants.MAX_ACC_FLAG; i++) { // Loop through known flags
-            p = pow2(i);
-            if ((access_flags & p) != 0) {
-                /* Special case: Classes compiled with new compilers and with the
-                 * `ACC_SUPER' flag would be said to be "synchronized". This is
-                 * because SUN used the same value for the flags `ACC_SUPER' and
-                 * `ACC_SYNCHRONIZED'.
-                 */
-                if (for_class && ((p == Constants.ACC_SUPER) || (p == Constants.ACC_INTERFACE))) {
-                    continue;
-                }
-                buf.append(Constants.ACCESS_NAMES[i]).append(" ");
-            }
-        }
-        return buf.toString().trim();
-    }
-
-
-    /**
-     * Disassemble a stream of byte codes and return the
-     * string representation.
-     *
-     * @param  bytes stream of bytes
-     * @param  constant_pool Array of constants
-     * @param  verbose be verbose, e.g. print constant pool index
-     * @return String representation of byte code
-     *
-     * @throws IOException if a failure from reading from the bytes argument occurs
-     */
-    public static final String codeToString( ByteSequence bytes, ConstantPool constant_pool,
-            boolean verbose ) throws IOException {
-        short opcode = (short) bytes.readUnsignedByte();
-        int default_offset = 0, low, high, npairs;
-        int index, vindex, constant;
-        int[] match, jump_table;
-        int no_pad_bytes = 0, offset;
-        StringBuilder buf = new StringBuilder(Constants.OPCODE_NAMES[opcode]);
-        /* Special case: Skip (0-3) padding bytes, i.e., the
-         * following bytes are 4-byte-aligned
-         */
-        if ((opcode == Constants.TABLESWITCH) || (opcode == Constants.LOOKUPSWITCH)) {
-            int remainder = bytes.getIndex() % 4;
-            no_pad_bytes = (remainder == 0) ? 0 : 4 - remainder;
-            for (int i = 0; i < no_pad_bytes; i++) {
-                byte b;
-                if ((b = bytes.readByte()) != 0) {
-                    System.err.println("Warning: Padding byte != 0 in "
-                            + Constants.OPCODE_NAMES[opcode] + ":" + b);
-                }
-            }
-            // Both cases have a field default_offset in common
-            default_offset = bytes.readInt();
-        }
-        switch (opcode) {
-            /* Table switch has variable length arguments.
-             */
-            case Constants.TABLESWITCH:
-                low = bytes.readInt();
-                high = bytes.readInt();
-                offset = bytes.getIndex() - 12 - no_pad_bytes - 1;
-                default_offset += offset;
-                buf.append("\tdefault = ").append(default_offset).append(", low = ").append(low)
-                        .append(", high = ").append(high).append("(");
-                jump_table = new int[high - low + 1];
-                for (int i = 0; i < jump_table.length; i++) {
-                    jump_table[i] = offset + bytes.readInt();
-                    buf.append(jump_table[i]);
-                    if (i < jump_table.length - 1) {
-                        buf.append(", ");
-                    }
-                }
-                buf.append(")");
-                break;
-            /* Lookup switch has variable length arguments.
-             */
-            case Constants.LOOKUPSWITCH: {
-                npairs = bytes.readInt();
-                offset = bytes.getIndex() - 8 - no_pad_bytes - 1;
-                match = new int[npairs];
-                jump_table = new int[npairs];
-                default_offset += offset;
-                buf.append("\tdefault = ").append(default_offset).append(", npairs = ").append(
-                        npairs).append(" (");
-                for (int i = 0; i < npairs; i++) {
-                    match[i] = bytes.readInt();
-                    jump_table[i] = offset + bytes.readInt();
-                    buf.append("(").append(match[i]).append(", ").append(jump_table[i]).append(")");
-                    if (i < npairs - 1) {
-                        buf.append(", ");
-                    }
-                }
-                buf.append(")");
-            }
-                break;
-            /* Two address bytes + offset from start of byte stream form the
-             * jump target
-             */
-            case Constants.GOTO:
-            case Constants.IFEQ:
-            case Constants.IFGE:
-            case Constants.IFGT:
-            case Constants.IFLE:
-            case Constants.IFLT:
-            case Constants.JSR:
-            case Constants.IFNE:
-            case Constants.IFNONNULL:
-            case Constants.IFNULL:
-            case Constants.IF_ACMPEQ:
-            case Constants.IF_ACMPNE:
-            case Constants.IF_ICMPEQ:
-            case Constants.IF_ICMPGE:
-            case Constants.IF_ICMPGT:
-            case Constants.IF_ICMPLE:
-            case Constants.IF_ICMPLT:
-            case Constants.IF_ICMPNE:
-                buf.append("\t\t#").append((bytes.getIndex() - 1) + bytes.readShort());
-                break;
-            /* 32-bit wide jumps
-             */
-            case Constants.GOTO_W:
-            case Constants.JSR_W:
-                buf.append("\t\t#").append(((bytes.getIndex() - 1) + bytes.readInt()));
-                break;
-            /* Index byte references local variable (register)
-             */
-            case Constants.ALOAD:
-            case Constants.ASTORE:
-            case Constants.DLOAD:
-            case Constants.DSTORE:
-            case Constants.FLOAD:
-            case Constants.FSTORE:
-            case Constants.ILOAD:
-            case Constants.ISTORE:
-            case Constants.LLOAD:
-            case Constants.LSTORE:
-            case Constants.RET:
-                if (wide) {
-                    vindex = bytes.readUnsignedShort();
-                    wide = false; // Clear flag
-                } else {
-                    vindex = bytes.readUnsignedByte();
-                }
-                buf.append("\t\t%").append(vindex);
-                break;
-            /*
-             * Remember wide byte which is used to form a 16-bit address in the
-             * following instruction. Relies on that the method is called again with
-             * the following opcode.
-             */
-            case Constants.WIDE:
-                wide = true;
-                buf.append("\t(wide)");
-                break;
-            /* Array of basic type.
-             */
-            case Constants.NEWARRAY:
-                buf.append("\t\t<").append(Constants.TYPE_NAMES[bytes.readByte()]).append(">");
-                break;
-            /* Access object/class fields.
-             */
-            case Constants.GETFIELD:
-            case Constants.GETSTATIC:
-            case Constants.PUTFIELD:
-            case Constants.PUTSTATIC:
-                index = bytes.readUnsignedShort();
-                buf.append("\t\t").append(
-                        constant_pool.constantToString(index, Constants.CONSTANT_Fieldref)).append(
-                        (verbose ? " (" + index + ")" : ""));
-                break;
-            /* Operands are references to classes in constant pool
-             */
-            case Constants.NEW:
-            case Constants.CHECKCAST:
-                buf.append("\t");
-                //$FALL-THROUGH$
-            case Constants.INSTANCEOF:
-                index = bytes.readUnsignedShort();
-                buf.append("\t<").append(
-                        constant_pool.constantToString(index, Constants.CONSTANT_Class))
-                        .append(">").append((verbose ? " (" + index + ")" : ""));
-                break;
-            /* Operands are references to methods in constant pool
-             */
-            case Constants.INVOKESPECIAL:
-            case Constants.INVOKESTATIC:
-            case Constants.INVOKEVIRTUAL:
-                index = bytes.readUnsignedShort();
-                buf.append("\t").append(
-                        constant_pool.constantToString(index, Constants.CONSTANT_Methodref))
-                        .append((verbose ? " (" + index + ")" : ""));
-                break;
-            case Constants.INVOKEINTERFACE:
-                index = bytes.readUnsignedShort();
-                int nargs = bytes.readUnsignedByte(); // historical, redundant
-                buf.append("\t").append(
-                        constant_pool
-                                .constantToString(index, Constants.CONSTANT_InterfaceMethodref))
-                        .append(verbose ? " (" + index + ")\t" : "").append(nargs).append("\t")
-                        .append(bytes.readUnsignedByte()); // Last byte is a reserved space
-                break;
-            /* Operands are references to items in constant pool
-             */
-            case Constants.LDC_W:
-            case Constants.LDC2_W:
-                index = bytes.readUnsignedShort();
-                buf.append("\t\t").append(
-                        constant_pool.constantToString(index, constant_pool.getConstant(index)
-                                .getTag())).append((verbose ? " (" + index + ")" : ""));
-                break;
-            case Constants.LDC:
-                index = bytes.readUnsignedByte();
-                buf.append("\t\t").append(
-                        constant_pool.constantToString(index, constant_pool.getConstant(index)
-                                .getTag())).append((verbose ? " (" + index + ")" : ""));
-                break;
-            /* Array of references.
-             */
-            case Constants.ANEWARRAY:
-                index = bytes.readUnsignedShort();
-                buf.append("\t\t<").append(
-                        compactClassName(constant_pool.getConstantString(index,
-                                Constants.CONSTANT_Class), false)).append(">").append(
-                        (verbose ? " (" + index + ")" : ""));
-                break;
-            /* Multidimensional array of references.
-             */
-            case Constants.MULTIANEWARRAY: {
-                index = bytes.readUnsignedShort();
-                int dimensions = bytes.readUnsignedByte();
-                buf.append("\t<").append(
-                        compactClassName(constant_pool.getConstantString(index,
-                                Constants.CONSTANT_Class), false)).append(">\t").append(dimensions)
-                        .append((verbose ? " (" + index + ")" : ""));
-            }
-                break;
-            /* Increment local variable.
-             */
-            case Constants.IINC:
-                if (wide) {
-                    vindex = bytes.readUnsignedShort();
-                    constant = bytes.readShort();
-                    wide = false;
-                } else {
-                    vindex = bytes.readUnsignedByte();
-                    constant = bytes.readByte();
-                }
-                buf.append("\t\t%").append(vindex).append("\t").append(constant);
-                break;
-            default:
-                if (Constants.NO_OF_OPERANDS[opcode] > 0) {
-                    for (int i = 0; i < Constants.TYPE_OF_OPERANDS[opcode].length; i++) {
-                        buf.append("\t\t");
-                        switch (Constants.TYPE_OF_OPERANDS[opcode][i]) {
-                            case Constants.T_BYTE:
-                                buf.append(bytes.readByte());
-                                break;
-                            case Constants.T_SHORT:
-                                buf.append(bytes.readShort());
-                                break;
-                            case Constants.T_INT:
-                                buf.append(bytes.readInt());
-                                break;
-                            default: // Never reached
-                                System.err.println("Unreachable default case reached!");
-                                System.exit(-1);
-                        }
-                    }
-                }
-        }
-        return buf.toString();
-    }
-
-
     /**
      * Shorten long class name <em>str</em>, i.e., chop off the <em>prefix</em>,
      * if the
@@ -388,127 +65,6 @@ public abstract class Utility {
     }
 
 
-    // Guess what this does
-    private static final int pow2( int n ) {
-        return 1 << n;
-    }
-
-
-    /**
-     * The field signature represents the value of an argument to a function or
-     * the value of a variable. It is a series of bytes generated by the
-     * following grammar:
-     *
-     * <PRE>
-     * <field_signature> ::= <field_type>
-     * <field_type>      ::= <base_type>|<object_type>|<array_type>
-     * <base_type>       ::= B|C|D|F|I|J|S|Z
-     * <object_type>     ::= L<fullclassname>;
-     * <array_type>      ::= [<field_type>
-     *
-     * The meaning of the base types is as follows:
-     * B byte signed byte
-     * C char character
-     * D double double precision IEEE float
-     * F float single precision IEEE float
-     * I int integer
-     * J long long integer
-     * L<fullclassname>; ... an object of the given class
-     * S short signed short
-     * Z boolean true or false
-     * [<field sig> ... array
-     * </PRE>
-     *
-     * This method converts this string into a Java type declaration such as
-     * `String[]' and throws a `ClassFormatException' when the parsed type is
-     * invalid.
-     *
-     * @param  signature  Class signature
-     * @param chopit Flag that determines whether chopping is executed or not
-     * @return Java type declaration
-     * @throws ClassFormatException
-     */
-    public static final String signatureToString( String signature, boolean chopit ) {
-        //corrected concurrent private static field acess
-        wrap(consumed_chars, 1); // This is the default, read just one char like `B'
-        try {
-            switch (signature.charAt(0)) {
-                case 'B':
-                    return "byte";
-                case 'C':
-                    return "char";
-                case 'D':
-                    return "double";
-                case 'F':
-                    return "float";
-                case 'I':
-                    return "int";
-                case 'J':
-                    return "long";
-                case 'L': { // Full class name
-                    int index = signature.indexOf(';'); // Look for closing `;'
-                    if (index < 0) {
-                        throw new ClassFormatException("Invalid signature: " + signature);
-                    }
-                    //corrected concurrent private static field acess
-                    wrap(consumed_chars, index + 1); // "Lblabla;" `L' and `;' are removed
-                    return compactClassName(signature.substring(1, index), chopit);
-                }
-                case 'S':
-                    return "short";
-                case 'Z':
-                    return "boolean";
-                case '[': { // Array declaration
-                    int n;
-                    StringBuilder brackets;
-                    String type;
-                    int consumed_chars; // Shadows global var
-                    brackets = new StringBuilder(); // Accumulate []'s
-                    // Count opening brackets and look for optional size argument
-                    for (n = 0; signature.charAt(n) == '['; n++) {
-                        brackets.append("[]");
-                    }
-                    consumed_chars = n; // Remember value
-                    // The rest of the string denotes a `<field_type>'
-                    type = signatureToString(signature.substring(n), chopit);
-                    //corrected concurrent private static field acess
-                    //Utility.consumed_chars += consumed_chars; is replaced by:
-                    int _temp = unwrap(Utility.consumed_chars) + consumed_chars;
-                    wrap(Utility.consumed_chars, _temp);
-                    return type + brackets.toString();
-                }
-                case 'V':
-                    return "void";
-                default:
-                    throw new ClassFormatException("Invalid signature: `" + signature + "'");
-            }
-        } catch (StringIndexOutOfBoundsException e) { // Should never occur
-            throw new ClassFormatException("Invalid signature: " + signature, e);
-        }
-    }
-
-
-    /**
-     * Fillup char with up to length characters with char `fill' and justify it left or right.
-     *
-     * @param str string to format
-     * @param length length of desired string
-     * @param left_justify format left or right
-     * @param fill fill character
-     * @return formatted string
-     */
-    public static final String fillup( String str, int length, boolean left_justify, char fill ) {
-        int len = length - str.length();
-        char[] buf = new char[(len < 0) ? 0 : len];
-        for (int j = 0; j < buf.length; j++) {
-            buf[j] = fill;
-        }
-        if (left_justify) {
-            return str + new String(buf);
-        }
-        return new String(buf) + str;
-    }
-
     // A-Z, g-z, _, $
     private static final int FREE_CHARS = 48;
     static int[] CHAR_MAP = new int[FREE_CHARS];

==================================================
