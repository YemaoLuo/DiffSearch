95f1c92cccd856871e07de56da6bfb7d28dcb6ec
==================================================
Connector alignment - request line reading
==================================================
Mark Emlyn
==================================================
Tue Sep 6 15:45:08 2011 +0000
==================================================
AbstractHttp11Processor.java
Connector alignment - request line reading

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1165721 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index 29c9fdb916..c8448ba618 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -822,6 +822,14 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
     protected abstract void setRequestLineReadTimeout() throws IOException;
 
 
+    /**
+     * Defines how a connector handles an incomplete request line read.
+     * 
+     * @returns <code>true</code> if the processor should break out of the
+     *          processing loop, otherwise <code>false</code>.
+     */
+    protected abstract boolean handleIncompleteRequestLineRead();
+
     /**
      * After reading the request headers, we have to setup the request filters.
      */

==================================================
Http11NioProcessor.java
index 790c2e85e9..e4e32cc1a2 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -204,16 +204,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
                 setRequestLineReadTimeout();
                 
                 if (!inputBuffer.parseRequestLine(keptAlive)) {
-                    // This means that no data is available right now
-                    // (long keepalive), so that the processor should be recycled
-                    // and the method should return true
-                    openSocket = true;
-                    if (endpoint.isPaused()) {
-                        // 503 - Service unavailable
-                        response.setStatus(503);
-                        adapter.log(request, response, 0);
-                        error = true;
-                    } else {
+                    if (handleIncompleteRequestLineRead()) {
                         break;
                     }
                 }
@@ -388,10 +379,27 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
     }
 
 
+    @Override
+    protected boolean handleIncompleteRequestLineRead() {
+        // This means that no data is available right now
+        // (long keepalive), so that the processor should be recycled
+        // and the method should return true
+        openSocket = true;
+        if (endpoint.isPaused()) {
+            // 503 - Service unavailable
+            response.setStatus(503);
+            adapter.log(request, response, 0);
+            error = true;
+        } else {
+            return true;
+        }
+        return false;
+    }
+
+
     @Override
     protected void setCometTimeouts(SocketWrapper<Long> socketWrapper) {
         // NO-OP for APR/native
-        return;
     }
 
 

==================================================
Http11Processor.java
index d80cbe649d..be8114f88b 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -231,27 +231,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
                 setRequestLineReadTimeout();
                 
                 if (!inputBuffer.parseRequestLine(keptAlive)) {
-                    // Haven't finished reading the request so keep the socket
-                    // open
-                    openSocket = true;
-                    // Check to see if we have read any of the request line yet
-                    if (inputBuffer.getParsingRequestLinePhase()<2) {
-                        // No data read, OK to recycle the processor
-                        // Continue to use keep alive timeout
-                        if (keepAliveTimeout>0) {
-                            socketWrapper.setTimeout(keepAliveTimeout);
-                        }
-                    } else {
-                        // Started to read request line. Need to keep processor
-                        // associated with socket
-                        readComplete = false;
-                    }
-                    if (endpoint.isPaused()) {
-                        // 503 - Service unavailable
-                        response.setStatus(503);
-                        adapter.log(request, response, 0);
-                        error = true;
-                    } else {
+                    if (handleIncompleteRequestLineRead()) {
                         break;
                     }
                 }
@@ -430,6 +410,35 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
     }
 
 
+    @Override
+    protected boolean handleIncompleteRequestLineRead() {
+        // Haven't finished reading the request so keep the socket
+        // open
+        openSocket = true;
+        // Check to see if we have read any of the request line yet
+        if (inputBuffer.getParsingRequestLinePhase()<2) {
+            // No data read, OK to recycle the processor
+            // Continue to use keep alive timeout
+            if (keepAliveTimeout>0) {
+                socket.setTimeout(keepAliveTimeout);
+            }
+        } else {
+            // Started to read request line. Need to keep processor
+            // associated with socket
+            readComplete = false;
+        }
+        if (endpoint.isPaused()) {
+            // 503 - Service unavailable
+            response.setStatus(503);
+            adapter.log(request, response, 0);
+            error = true;
+        } else {
+            return true;
+        }
+        return false;
+    }
+
+
     @Override
     protected void setCometTimeouts(SocketWrapper<NioChannel> socketWrapper) {
         // Comet support

==================================================
