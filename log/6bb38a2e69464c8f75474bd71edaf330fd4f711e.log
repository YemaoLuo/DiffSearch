6bb38a2e69464c8f75474bd71edaf330fd4f711e
==================================================
Update WebSocket implementation to version 1.1 of the spec
==================================================
Mark Emlyn
==================================================
Mon Sep 22 13:09:57 2014 +0000
==================================================
Session.java
Update WebSocket implementation to version 1.1 of the spec

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1626765 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Util.java
index d6812a4229..88c83fcf1f 100644
--- a/java/javax/websocket/Session.java
+++ b/java/javax/websocket/Session.java
@@ -31,8 +31,22 @@ public interface Session extends Closeable {
      */
     WebSocketContainer getContainer();
 
-    void addMessageHandler(MessageHandler listener)
-            throws IllegalStateException;
+    /**
+     * Registers a {@link MessageHandler} for incoming messages. Only one
+     * {@link MessageHandler} may be registered for each message type (text,
+     * binary, pong). The message type will be derived at runtime from the
+     * provided {@link MessageHandler} instance. It is not always possible to do
+     * this so it is better to use
+     * {@link #addMessageHandler(Class, javax.websocket.MessageHandler.Partial)}
+     * or
+     * {@link #addMessageHandler(Class, javax.websocket.MessageHandler.Whole)}.
+     *
+     * @param listener  The message handler for a incoming message
+     *
+     * @throws IllegalStateException  If a message handler has already been
+     *                                registered for the associated message type
+     */
+    void addMessageHandler(MessageHandler listener) throws IllegalStateException;
 
     Set<MessageHandler> getMessageHandlers();
 
@@ -126,4 +140,34 @@ public interface Session extends Closeable {
      * this session is associated with.
      */
     Set<Session> getOpenSessions();
+
+    /**
+     * Registers a {@link MessageHandler} for partial incoming messages. Only
+     * one {@link MessageHandler} may be registered for each message type (text
+     * or binary, pong messages are never presented as partial messages).
+     *
+     * @param clazz     The type of message that the given handler is intended
+     *                  for
+     * @param listener  The message handler for a incoming message
+     *
+     * @throws IllegalStateException  If a message handler has already been
+     *                                registered for the associated message type
+     */
+    <T> void addMessageHandler(Class<T> clazz, MessageHandler.Partial<T> handler)
+            throws IllegalStateException;
+
+    /**
+     * Registers a {@link MessageHandler} for whole incoming messages. Only
+     * one {@link MessageHandler} may be registered for each message type (text,
+     * binary, pong).
+     *
+     * @param clazz     The type of message that the given handler is intended
+     *                  for
+     * @param listener  The message handler for a incoming message
+     *
+     * @throws IllegalStateException  If a message handler has already been
+     *                                registered for the associated message type
+     */
+    <T> void addMessageHandler(Class<T> clazz, MessageHandler.Whole<T> handler)
+            throws IllegalStateException;
 }

==================================================
WsSession.java
index 9464ac40cf..1785b913aa 100644
--- a/java/org/apache/tomcat/websocket/Util.java
+++ b/java/org/apache/tomcat/websocket/Util.java
@@ -353,12 +353,10 @@ public class Util {
     }
 
 
-    static Set<MessageHandlerResult> getMessageHandlers(
+    static Set<MessageHandlerResult> getMessageHandlers(Class<?> target,
             MessageHandler listener, EndpointConfig endpointConfig,
             Session session) {
 
-        Class<?> target = Util.getMessageType(listener);
-
         // Will never be more than 2 types
         Set<MessageHandlerResult> results = new HashSet<>(2);
 

==================================================
