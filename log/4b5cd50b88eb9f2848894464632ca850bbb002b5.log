4b5cd50b88eb9f2848894464632ca850bbb002b5
==================================================
More doco
==================================================
Filip Hanik
==================================================
Tue Jul 14 15:22:05 2009 +0000
==================================================
ConnectionState.java
More doco


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@793937 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ResetAbandonedTimer.java
index 991bf94189..c097e54842 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/ConnectionState.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/ConnectionState.java
@@ -28,7 +28,14 @@ import org.apache.tomcat.jdbc.pool.PoolConfiguration;
 import org.apache.tomcat.jdbc.pool.PooledConnection;
 
 /**
- * Interceptor that keep track of connection state to avoid roundtrips to the database
+ * Interceptor that keep track of connection state to avoid roundtrips to the database.
+ * The {@link org.apache.tomcat.jdbc.pool.ConnectionPool} is optimized to do as little work as possible.
+ * The pool itself doesn't remember settings like {@link java.sql.Connection#setAutoCommit(boolean)}, 
+ * {@link java.sql.Connection#setReadOnly(boolean)}, {@link java.sql.Connection#setCatalog(String)} or
+ * {@link java.sql.Connection#setTransactionIsolation(int)}. It relies on the application to remember how and when 
+ * these settings have been applied.
+ * In the cases where the application code doesn't know or want to keep track of the state, this interceptor helps cache the 
+ * state, and it also avoids roundtrips to the database asking for it.
  * @author fhanik
  *
  */

==================================================
StatementFinalizer.java
index fd0f56759e..9e5ec0a080 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/ResetAbandonedTimer.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/ResetAbandonedTimer.java
@@ -25,7 +25,10 @@ import org.apache.tomcat.jdbc.pool.ProxyConnection;
 
 /**
  * Class that resets the abandoned timer on any activity on the 
- * Connection or any successful query executions
+ * Connection or any successful query executions.
+ * This interceptor is useful for when you have a {@link org.apache.tomcat.jdbc.pool.PoolConfiguration#setRemoveAbandonedTimeout(int)}
+ * that is fairly low, and you want to reset the abandoned time each time any operation on the connection is performed
+ * This is useful for batch processing programs that use connections for extensive amount of times.
  * @author fhanik
  *
  */

==================================================
