c0de9f6421314ed4ed6b5ba4ca1494ef07993546
==================================================
Wire in flushBuffer()
==================================================
Mark Emlyn
==================================================
Wed May 1 15:57:40 2013 +0000
==================================================
AbstractOutputBuffer.java
Wire in flushBuffer()

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1478063 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InternalAprOutputBuffer.java
index c12d8f1c29..d6f2350850 100644
--- a/java/org/apache/coyote/http11/AbstractOutputBuffer.java
+++ b/java/org/apache/coyote/http11/AbstractOutputBuffer.java
@@ -573,6 +573,7 @@ public abstract class AbstractOutputBuffer<S> implements OutputBuffer {
 
     protected abstract boolean hasDataToWrite();
     protected abstract void setBlocking(boolean blocking);
+    protected abstract boolean isBlocking();
 
     /**
      * Writes any remaining buffered data.

==================================================
InternalNioOutputBuffer.java
index 49cb43012a..afe42b11cf 100644
--- a/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
@@ -106,7 +106,7 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
         super.flush();
 
         // Flush the current buffer
-        flushBuffer();
+        flushBuffer(isBlocking());
     }
 
 
@@ -147,7 +147,7 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
         if (lastActiveFilter != -1)
             activeFilters[lastActiveFilter].end();
 
-        flushBuffer();
+        flushBuffer(true);
 
         finished = true;
 
@@ -198,14 +198,18 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
     /**
      * Callback to write data from the buffer.
      */
-    private void flushBuffer()
-        throws IOException {
+    @Override
+    protected boolean flushBuffer(boolean block) throws IOException {
+        // TODO: Non-blocking IO not yet implemented so always block parameter
+        //       ignored
         if (bbuf.position() > 0) {
             if (Socket.sendbb(socket, 0, bbuf.position()) < 0) {
                 throw new IOException();
             }
             bbuf.clear();
         }
+        // TODO: Non-blocking IO not yet implemented so always returns false
+        return false;
     }
 
 
@@ -225,7 +229,7 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
 
 
     @Override
-    protected boolean flushBuffer(boolean block) throws IOException {
+    public boolean isBlocking() {
         // TODO
         return false;
     }
@@ -253,7 +257,7 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
             while (len > 0) {
                 int thisTime = len;
                 if (bbuf.position() == bbuf.capacity()) {
-                    flushBuffer();
+                    flushBuffer(isBlocking());
                 }
                 if (thisTime > bbuf.capacity() - bbuf.position()) {
                     thisTime = bbuf.capacity() - bbuf.position();

==================================================
InternalOutputBuffer.java
index b008ffd0e5..a498a30782 100644
--- a/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
@@ -394,6 +394,7 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer<NioChannel> {
         this.bufferedWriteSize = bufferedWriteSize;
     }
 
+    @Override
     public boolean isBlocking() {
         return bufferedWrite == null;
     }

==================================================
