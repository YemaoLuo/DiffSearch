179b42134946060f80e39a1cf821a6994001385a
==================================================
Use Objects.requireNonNull() to simplify code
==================================================
Mark Thomas
==================================================
Thu Jun 23 11:32:11 2016 +0000
==================================================
AccessLogAdapter.java
Use Objects.requireNonNull() to simplify code

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1749866 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractReplicatedMap.java
index a4c6889ca1..590878b1a0 100644
--- a/java/org/apache/catalina/core/AccessLogAdapter.java
+++ b/java/org/apache/catalina/core/AccessLogAdapter.java
@@ -17,6 +17,7 @@
 package org.apache.catalina.core;
 
 import java.util.Arrays;
+import java.util.Objects;
 
 import org.apache.catalina.AccessLog;
 import org.apache.catalina.connector.Request;
@@ -30,16 +31,12 @@ public class AccessLogAdapter implements AccessLog {
     private AccessLog[] logs;
 
     public AccessLogAdapter(AccessLog log) {
-        if (log == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(log);
         logs = new AccessLog[] { log };
     }
 
     public void add(AccessLog log) {
-        if (log == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(log);
         AccessLog newArray[] = Arrays.copyOf(logs, logs.length + 1);
         newArray[newArray.length - 1] = log;
         logs = newArray;

==================================================
ELResolverImpl.java
index 79320c5e15..d71a092a2c 100644
--- a/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
@@ -27,6 +27,7 @@ import java.util.HashMap;
 import java.util.Iterator;
 import java.util.LinkedHashSet;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
@@ -1121,9 +1122,7 @@ public abstract class AbstractReplicatedMap<K,V>
 
     @Override
     public boolean containsValue(Object value) {
-        if (value == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(value);
         Iterator<Map.Entry<K,MapEntry<K,V>>> i = innerMap.entrySet().iterator();
         while (i.hasNext()) {
             Map.Entry<K,MapEntry<K,V>> e = i.next();

==================================================
ManagedConcurrentWeakHashMap.java
index 534789ccce..3a143a338a 100644
--- a/java/org/apache/jasper/el/ELResolverImpl.java
+++ b/java/org/apache/jasper/el/ELResolverImpl.java
@@ -18,6 +18,7 @@
 package org.apache.jasper.el;
 
 import java.util.Iterator;
+import java.util.Objects;
 
 import javax.el.ELContext;
 import javax.el.ELException;
@@ -40,9 +41,7 @@ public final class ELResolverImpl extends ELResolver {
 
     @Override
     public Object getValue(ELContext context, Object base, Object property) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base == null) {
             context.setPropertyResolved(base, property);
@@ -64,9 +63,7 @@ public final class ELResolverImpl extends ELResolver {
 
     @Override
     public Class<?> getType(ELContext context, Object base, Object property) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base == null) {
             context.setPropertyResolved(base, property);
@@ -90,9 +87,7 @@ public final class ELResolverImpl extends ELResolver {
     @Override
     public void setValue(ELContext context, Object base, Object property,
             Object value) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base == null) {
             context.setPropertyResolved(base, property);
@@ -107,9 +102,7 @@ public final class ELResolverImpl extends ELResolver {
 
     @Override
     public boolean isReadOnly(ELContext context, Object base, Object property) {
-        if (context == null) {
-            throw new NullPointerException();
-        }
+        Objects.requireNonNull(context);
 
         if (base == null) {
             context.setPropertyResolved(base, property);

==================================================
SocketProcessorBase.java
index 5872a95e23..5ccad116fc 100644
--- a/java/org/apache/tomcat/util/collections/ManagedConcurrentWeakHashMap.java
+++ b/java/org/apache/tomcat/util/collections/ManagedConcurrentWeakHashMap.java
@@ -24,6 +24,7 @@ import java.util.AbstractSet;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
@@ -122,12 +123,6 @@ public class ManagedConcurrentWeakHashMap<K, V> extends AbstractMap<K, V> implem
         return new Key(key, null);
     }
 
-    private static void checkNotNull(Object value) {
-        if (value == null) {
-            throw new NullPointerException();
-        }
-    }
-
     @Override
     public int size() {
         return map.size();
@@ -164,7 +159,7 @@ public class ManagedConcurrentWeakHashMap<K, V> extends AbstractMap<K, V> implem
 
     @Override
     public V put(K key, V value) {
-        checkNotNull(value);
+        Objects.requireNonNull(value);
         return map.put(createStoreKey(key), value);
     }
 
@@ -183,7 +178,7 @@ public class ManagedConcurrentWeakHashMap<K, V> extends AbstractMap<K, V> implem
 
     @Override
     public V putIfAbsent(K key, V value) {
-        checkNotNull(value);
+        Objects.requireNonNull(value);
         Key storeKey = createStoreKey(key);
         V oldValue = map.putIfAbsent(storeKey, value);
         if (oldValue != null) { // ack that key has not been stored
@@ -202,13 +197,13 @@ public class ManagedConcurrentWeakHashMap<K, V> extends AbstractMap<K, V> implem
 
     @Override
     public boolean replace(K key, V oldValue, V newValue) {
-        checkNotNull(newValue);
+        Objects.requireNonNull(newValue);
         return map.replace(createLookupKey(key), oldValue, newValue);
     }
 
     @Override
     public V replace(K key, V value) {
-        checkNotNull(value);
+        Objects.requireNonNull(value);
         return map.replace(createLookupKey(key), value);
     }
 
@@ -259,7 +254,7 @@ public class ManagedConcurrentWeakHashMap<K, V> extends AbstractMap<K, V> implem
 
                             @Override
                             public V setValue(V value) {
-                                checkNotNull(value);
+                                Objects.requireNonNull(value);
                                 return en.setValue(value);
                             }
                         };

==================================================
Room.java
index 4948192fe9..1207ab0e20 100644
--- a/java/org/apache/tomcat/util/net/SocketProcessorBase.java
+++ b/java/org/apache/tomcat/util/net/SocketProcessorBase.java
@@ -16,6 +16,7 @@
  */
 package org.apache.tomcat.util.net;
 
+import java.util.Objects;
 
 public abstract class SocketProcessorBase<S> implements Runnable {
 
@@ -28,13 +29,9 @@ public abstract class SocketProcessorBase<S> implements Runnable {
 
 
     public void reset(SocketWrapperBase<S> socketWrapper, SocketEvent event) {
+        Objects.requireNonNull(event);
         this.socketWrapper = socketWrapper;
-        if (event == null) {
-            // Should never happen
-            throw new NullPointerException();
-        } else {
-            this.event = event;
-        }
+        this.event = event;
     }
 
 

==================================================
