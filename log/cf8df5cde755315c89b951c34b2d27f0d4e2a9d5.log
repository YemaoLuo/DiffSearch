cf8df5cde755315c89b951c34b2d27f0d4e2a9d5
==================================================
Sync with latest API from EG
==================================================
Mark Emlyn
==================================================
Wed Dec 5 22:51:58 2012 +0000
==================================================
ClientContainer.java
Sync with latest API from EG

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1417682 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ClientEndpointConfiguration.java
index ceea223df5..8ccfd683df 100644
--- a/java/javax/websocket/ClientContainer.java
+++ b/java/javax/websocket/ClientContainer.java
@@ -21,9 +21,14 @@ import java.util.Set;
 
 public interface ClientContainer {
 
-    void connectToServer(Object endpoint, URI path) throws DeploymentException;
+    Session connectToServer(Object endpoint, URI path)
+            throws DeploymentException;
 
-    Set<Session> getActiveSessions();
+    Session connectToServer(Endpoint endpoint,
+            ClientEndpointConfiguration clientEndpointConfiguration, URI path)
+            throws DeploymentException;
+
+    Set<Session> getOpenSessions();
 
     long getMaxSessionIdleTimeout();
 

==================================================
DefaultClientConfiguration.java
index c2c37af36d..c9127df084 100644
--- a/java/javax/websocket/ClientEndpointConfiguration.java
+++ b/java/javax/websocket/ClientEndpointConfiguration.java
@@ -23,4 +23,8 @@ public interface ClientEndpointConfiguration extends EndpointConfiguration {
     List<String> getPreferredSubprotocols();
 
     List<String> getExtensions();
+
+    void beforeRequest(HandshakeRequest handshakeRequest);
+
+    void afterResponse(HandshakeResponse handshakeResponse);
 }

==================================================
DefaultServerConfiguration.java
index 9afaaf6936..b0c7fcd175 100644
--- a/java/javax/websocket/DefaultClientConfiguration.java
+++ b/java/javax/websocket/DefaultClientConfiguration.java
@@ -66,4 +66,14 @@ public class DefaultClientConfiguration implements ClientEndpointConfiguration {
         this.decoders = decoders;
         return this;
     }
+
+    @Override
+    public void beforeRequest(HandshakeRequest handshakeRequest) {
+        // NO-OP
+    }
+
+    @Override
+    public void afterResponse(HandshakeResponse handshakeResponse) {
+        // NO-OP
+    }
 }

==================================================
Endpoint.java
index bb1b6c94fe..359604def6 100644
--- a/java/javax/websocket/DefaultServerConfiguration.java
+++ b/java/javax/websocket/DefaultServerConfiguration.java
@@ -20,7 +20,9 @@ import java.net.URI;
 import java.util.ArrayList;
 import java.util.List;
 
-public class DefaultServerConfiguration implements ServerEndpointConfiguration {
+public class DefaultServerConfiguration<T>
+        implements ServerEndpointConfiguration<T> {
+
     private String path;
     @SuppressWarnings("unused") // TODO Remove this once implemented
     private List<String> subprotocols = new ArrayList<>();
@@ -32,27 +34,33 @@ public class DefaultServerConfiguration implements ServerEndpointConfiguration {
     protected DefaultServerConfiguration() {
     }
 
+    @Override
+    public EndpointFactory<T> getEndpointFactory() {
+        // TODO
+        return null;
+    }
+
     public DefaultServerConfiguration(String path) {
         this.path = path;
     }
 
-    public DefaultServerConfiguration setEncoders(List<Encoder> encoders) {
+    public DefaultServerConfiguration<T> setEncoders(List<Encoder> encoders) {
         this.encoders = encoders;
         return this;
     }
 
-    public DefaultServerConfiguration setDecoders(List<Decoder> decoders) {
+    public DefaultServerConfiguration<T> setDecoders(List<Decoder> decoders) {
         this.decoders = decoders;
         return this;
     }
 
-    public DefaultServerConfiguration setSubprotocols(
+    public DefaultServerConfiguration<T> setSubprotocols(
             List<String> subprotocols) {
         this.subprotocols = subprotocols;
         return this;
     }
 
-    public DefaultServerConfiguration setExtensions(
+    public DefaultServerConfiguration<T> setExtensions(
             List<String> extensions) {
         this.extensions = extensions;
         return this;
@@ -64,7 +72,6 @@ public class DefaultServerConfiguration implements ServerEndpointConfiguration {
         return this.encoders;
     }
 
-
     @Override
     public List<Decoder> getDecoders() {
         return this.decoders;
@@ -81,7 +88,6 @@ public class DefaultServerConfiguration implements ServerEndpointConfiguration {
         return null;
     }
 
-
     @Override
     public List<String> getNegotiatedExtensions(
             List<String> requestedExtensions) {

==================================================
EndpointFactory.java
index a93800da6c..f73095b05d 100644
--- a/java/javax/websocket/Endpoint.java
+++ b/java/javax/websocket/Endpoint.java
@@ -18,8 +18,6 @@ package javax.websocket;
 
 public abstract class Endpoint {
 
-    public abstract EndpointConfiguration getEndpointConfiguration();
-
     /**
      * Event that is triggered when a new session starts.
      *

==================================================
ServerContainer.java
new file mode 100644
index 0000000000..909d5a75a6
--- /dev/null
+++ b/java/javax/websocket/EndpointFactory.java
@@ -0,0 +1,21 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.websocket;
+
+public interface EndpointFactory<T> {
+    T createEndpoint();
+}

==================================================
ServerEndpointConfiguration.java
index 9cb9bf8dfc..3758cca1ff 100644
--- a/java/javax/websocket/ServerContainer.java
+++ b/java/javax/websocket/ServerContainer.java
@@ -22,12 +22,14 @@ package javax.websocket;
 public interface ServerContainer extends ClientContainer {
 
     /**
-     * Publish the Endpoint in this ServerContainer.
+     * Publish the Endpoint asscoiated with the given configuration in this
+     * ServerContainer.
      *
-     * @param clazz The implementation class for the Endpoint
+     * @param clazz The configuration class for the Endpoint
      *
      * @throws DeploymentException  If the publish process fails for any reason
      */
-    void publishServer(Class<? extends Endpoint> clazz)
+    void publishServer(
+            Class<? extends ServerEndpointConfiguration<?>> clazz)
             throws DeploymentException;
 }

==================================================
Session.java
index 87540491dc..1d048eb0c1 100644
--- a/java/javax/websocket/ServerEndpointConfiguration.java
+++ b/java/javax/websocket/ServerEndpointConfiguration.java
@@ -19,7 +19,9 @@ package javax.websocket;
 import java.net.URI;
 import java.util.List;
 
-public interface ServerEndpointConfiguration extends EndpointConfiguration {
+public interface ServerEndpointConfiguration<T> extends EndpointConfiguration {
+
+    EndpointFactory<T> getEndpointFactory();
 
     String getNegotiatedSubprotocol(List<String> requestedSubprotocols);
 

==================================================
WebSocketEndpoint.java
index 5910d7f2b2..9275b6cb3e 100644
--- a/java/javax/websocket/Session.java
+++ b/java/javax/websocket/Session.java
@@ -26,8 +26,6 @@ public interface Session {
 
     ClientContainer getContainer();
 
-    void setEncoders(List<Encoder> encoders);
-
     void addMessageHandler(MessageHandler listener);
 
     Set<MessageHandler> getMessageHandlers();
@@ -44,7 +42,7 @@ public interface Session {
 
     long getInactiveTime();
 
-    boolean isActive();
+    boolean isOpen();
 
     long getTimeout();
 
@@ -67,4 +65,6 @@ public interface Session {
     String getQueryString();
 
     Map<String,String> getPathParameters();
+
+    Map<String,Object> getUserProperties();
 }

==================================================
WebSocketMessage.java
index 7332b72efb..918447c297 100644
--- a/java/javax/websocket/WebSocketEndpoint.java
+++ b/java/javax/websocket/WebSocketEndpoint.java
@@ -28,11 +28,13 @@ public @interface WebSocketEndpoint {
     /**
      * URI or URI-template that the annotated class should be mapped to.
      */
-    public String value();
+    String value();
 
-    public String[] subprotocols() default {};
+    String[] subprotocols() default {};
 
-    public Class<? extends Decoder>[] decoders() default {};
+    Class<? extends Decoder>[] decoders() default {};
 
-    public Class<? extends Encoder>[] encoders() default {};
+    Class<? extends Encoder>[] encoders() default {};
+
+    //Class<? extends EndpointFactory<?>> factory();
 }

==================================================
WebSocketPathParam.java
index 5accf930bf..4f45cbb173 100644
--- a/java/javax/websocket/WebSocketMessage.java
+++ b/java/javax/websocket/WebSocketMessage.java
@@ -24,5 +24,5 @@ import java.lang.annotation.Target;
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)
 public @interface WebSocketMessage {
-    public long maxMessageSize() default -1;
+    long maxMessageSize() default -1;
 }

==================================================
