8c92cc1bc0d055f0ca3c9072d6096a8fa539a25c
==================================================
Update HEAD tests after HTTP/2 test refactoring
==================================================
Mark Thomas
==================================================
Thu Jun 23 22:27:46 2022 +0100
==================================================
HttpServletDoHeadBaseTest.java
Update HEAD tests after HTTP/2 test refactoring


==================================================
TestHttpServletDoHeadValidWrite0.java
index cd1d0de0dd..3de57243ba 100644
--- a/test/jakarta/servlet/http/HttpServletDoHeadBaseTest.java
+++ b/test/jakarta/servlet/http/HttpServletDoHeadBaseTest.java
@@ -62,19 +62,19 @@ public class HttpServletDoHeadBaseTest extends Http2TestBase {
             Integer.valueOf(511), Integer.valueOf(512), Integer.valueOf(513),
             Integer.valueOf(1023), Integer.valueOf(1024), Integer.valueOf(1025) };
 
-    @Parameter(0)
+    @Parameter(2)
     public boolean useLegacy;
-    @Parameter(1)
+    @Parameter(3)
     public int bufferSize;
-    @Parameter(2)
+    @Parameter(4)
     public boolean useWriter;
-    @Parameter(3)
+    @Parameter(5)
     public int invalidWriteCount;
-    @Parameter(4)
+    @Parameter(6)
     public ResetType resetType;
-    @Parameter(5)
+    @Parameter(7)
     public int validWriteCount;
-    @Parameter(6)
+    @Parameter(8)
     public boolean explicitFlush;
 
     @Test

==================================================
TestHttpServletDoHeadValidWrite1.java
index 147d8797c6..dd0736a4c9 100644
--- a/test/jakarta/servlet/http/TestHttpServletDoHeadValidWrite0.java
+++ b/test/jakarta/servlet/http/TestHttpServletDoHeadValidWrite0.java
@@ -23,6 +23,8 @@ import java.util.List;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 
+import org.apache.coyote.http2.Http2TestBase;
+
 /*
  * Split into multiple tests as a single test takes so long it impacts the time
  * of an entire test run.
@@ -30,17 +32,22 @@ import org.junit.runners.Parameterized;
 @RunWith(Parameterized.class)
 public class TestHttpServletDoHeadValidWrite0 extends HttpServletDoHeadBaseTest {
 
-    @Parameterized.Parameters(name = "{index}: {0} {1} {2} {3} {4} {5} {6}")
+    @Parameterized.Parameters(name = "{index}: {0} {1} {2} {3} {4} {5} {6} {7} {8}")
     public static Collection<Object[]> parameters() {
+        Collection<Object[]> baseData = Http2TestBase.data();
 
         List<Object[]> parameterSets = new ArrayList<>();
-        for (Boolean l : booleans) {
-            for (Integer buf : BUFFERS) {
-                for (Boolean w : booleans) {
-                    for (Integer c1 : COUNTS) {
-                        for (ResetType rt : ResetType.values()) {
-                            for (Boolean f : booleans) {
-                                parameterSets.add(new Object[] { l, buf, w, c1, rt, Integer.valueOf(0), f });
+        for (Object[] base : baseData) {
+            for (Boolean l : booleans) {
+                for (Integer buf : BUFFERS) {
+                    for (Boolean w : booleans) {
+                        for (Integer c1 : COUNTS) {
+                            for (ResetType rt : ResetType.values()) {
+                                for (Boolean f : booleans) {
+                                    parameterSets.add(new Object[] {
+                                            base[0], base[1],
+                                            l, buf, w, c1, rt, Integer.valueOf(0), f });
+                                }
                             }
                         }
                     }

==================================================
TestHttpServletDoHeadValidWrite1023.java
index 0b47b58f1e..24c8a79984 100644
--- a/test/jakarta/servlet/http/TestHttpServletDoHeadValidWrite1.java
+++ b/test/jakarta/servlet/http/TestHttpServletDoHeadValidWrite1.java
@@ -23,6 +23,8 @@ import java.util.List;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 
+import org.apache.coyote.http2.Http2TestBase;
+
 /*
  * Split into multiple tests as a single test takes so long it impacts the time
  * of an entire test run.
@@ -30,17 +32,22 @@ import org.junit.runners.Parameterized;
 @RunWith(Parameterized.class)
 public class TestHttpServletDoHeadValidWrite1 extends HttpServletDoHeadBaseTest {
 
-    @Parameterized.Parameters(name = "{index}: {0} {1} {2} {3} {4} {5} {6}")
+    @Parameterized.Parameters(name = "{index}: {0} {1} {2} {3} {4} {5} {6} {7} {8}")
     public static Collection<Object[]> parameters() {
+        Collection<Object[]> baseData = Http2TestBase.data();
 
         List<Object[]> parameterSets = new ArrayList<>();
-        for (Boolean l : booleans) {
-            for (Integer buf : BUFFERS) {
-                for (Boolean w : booleans) {
-                    for (Integer c1 : COUNTS) {
-                        for (ResetType rt : ResetType.values()) {
-                            for (Boolean f : booleans) {
-                                parameterSets.add(new Object[] { l, buf, w, c1, rt, Integer.valueOf(1), f });
+        for (Object[] base : baseData) {
+            for (Boolean l : booleans) {
+                for (Integer buf : BUFFERS) {
+                    for (Boolean w : booleans) {
+                        for (Integer c1 : COUNTS) {
+                            for (ResetType rt : ResetType.values()) {
+                                for (Boolean f : booleans) {
+                                    parameterSets.add(new Object[] {
+                                            base[0], base[1],
+                                            l, buf, w, c1, rt, Integer.valueOf(1), f });
+                                }
                             }
                         }
                     }

==================================================
TestHttpServletDoHeadValidWrite1024.java
index 84466d5802..6355ba25f6 100644
--- a/test/jakarta/servlet/http/TestHttpServletDoHeadValidWrite1023.java
+++ b/test/jakarta/servlet/http/TestHttpServletDoHeadValidWrite1023.java
@@ -23,6 +23,8 @@ import java.util.List;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 
+import org.apache.coyote.http2.Http2TestBase;
+
 /*
  * Split into multiple tests as a single test takes so long it impacts the time
  * of an entire test run.
@@ -30,17 +32,22 @@ import org.junit.runners.Parameterized;
 @RunWith(Parameterized.class)
 public class TestHttpServletDoHeadValidWrite1023 extends HttpServletDoHeadBaseTest {
 
-    @Parameterized.Parameters(name = "{index}: {0} {1} {2} {3} {4} {5} {6}")
+    @Parameterized.Parameters(name = "{index}: {0} {1} {2} {3} {4} {5} {6} {7} {8}")
     public static Collection<Object[]> parameters() {
+        Collection<Object[]> baseData = Http2TestBase.data();
 
         List<Object[]> parameterSets = new ArrayList<>();
-        for (Boolean l : booleans) {
-            for (Integer buf : BUFFERS) {
-                for (Boolean w : booleans) {
-                    for (Integer c1 : COUNTS) {
-                        for (ResetType rt : ResetType.values()) {
-                            for (Boolean f : booleans) {
-                                parameterSets.add(new Object[] { l, buf, w, c1, rt, Integer.valueOf(1023), f });
+        for (Object[] base : baseData) {
+            for (Boolean l : booleans) {
+                for (Integer buf : BUFFERS) {
+                    for (Boolean w : booleans) {
+                        for (Integer c1 : COUNTS) {
+                            for (ResetType rt : ResetType.values()) {
+                                for (Boolean f : booleans) {
+                                    parameterSets.add(new Object[] {
+                                            base[0], base[1],
+                                            l, buf, w, c1, rt, Integer.valueOf(1023), f });
+                                }
                             }
                         }
                     }

==================================================
TestHttpServletDoHeadValidWrite1025.java
index 2f769397f2..6797d79f1e 100644
--- a/test/jakarta/servlet/http/TestHttpServletDoHeadValidWrite1024.java
+++ b/test/jakarta/servlet/http/TestHttpServletDoHeadValidWrite1024.java
@@ -23,6 +23,8 @@ import java.util.List;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 
+import org.apache.coyote.http2.Http2TestBase;
+
 /*
  * Split into multiple tests as a single test takes so long it impacts the time
  * of an entire test run.
@@ -30,17 +32,22 @@ import org.junit.runners.Parameterized;
 @RunWith(Parameterized.class)
 public class TestHttpServletDoHeadValidWrite1024 extends HttpServletDoHeadBaseTest {
 
-    @Parameterized.Parameters(name = "{index}: {0} {1} {2} {3} {4} {5} {6}")
+    @Parameterized.Parameters(name = "{index}: {0} {1} {2} {3} {4} {5} {6} {7} {8}")
     public static Collection<Object[]> parameters() {
+        Collection<Object[]> baseData = Http2TestBase.data();
 
         List<Object[]> parameterSets = new ArrayList<>();
-        for (Boolean l : booleans) {
-            for (Integer buf : BUFFERS) {
-                for (Boolean w : booleans) {
-                    for (Integer c1 : COUNTS) {
-                        for (ResetType rt : ResetType.values()) {
-                            for (Boolean f : booleans) {
-                                parameterSets.add(new Object[] { l, buf, w, c1, rt, Integer.valueOf(1024), f });
+        for (Object[] base : baseData) {
+            for (Boolean l : booleans) {
+                for (Integer buf : BUFFERS) {
+                    for (Boolean w : booleans) {
+                        for (Integer c1 : COUNTS) {
+                            for (ResetType rt : ResetType.values()) {
+                                for (Boolean f : booleans) {
+                                    parameterSets.add(new Object[] {
+                                            base[0], base[1],
+                                            l, buf, w, c1, rt, Integer.valueOf(1024), f });
+                                }
                             }
                         }
                     }

==================================================
TestHttpServletDoHeadValidWrite511.java
index a95cd8d322..5dd1e1dede 100644
--- a/test/jakarta/servlet/http/TestHttpServletDoHeadValidWrite1025.java
+++ b/test/jakarta/servlet/http/TestHttpServletDoHeadValidWrite1025.java
@@ -23,6 +23,8 @@ import java.util.List;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 
+import org.apache.coyote.http2.Http2TestBase;
+
 /*
  * Split into multiple tests as a single test takes so long it impacts the time
  * of an entire test run.
@@ -30,17 +32,22 @@ import org.junit.runners.Parameterized;
 @RunWith(Parameterized.class)
 public class TestHttpServletDoHeadValidWrite1025 extends HttpServletDoHeadBaseTest {
 
-    @Parameterized.Parameters(name = "{index}: {0} {1} {2} {3} {4} {5} {6}")
+    @Parameterized.Parameters(name = "{index}: {0} {1} {2} {3} {4} {5} {6} {7} {8}")
     public static Collection<Object[]> parameters() {
+        Collection<Object[]> baseData = Http2TestBase.data();
 
         List<Object[]> parameterSets = new ArrayList<>();
-        for (Boolean l : booleans) {
-            for (Integer buf : BUFFERS) {
-                for (Boolean w : booleans) {
-                    for (Integer c1 : COUNTS) {
-                        for (ResetType rt : ResetType.values()) {
-                            for (Boolean f : booleans) {
-                                parameterSets.add(new Object[] { l, buf, w, c1, rt, Integer.valueOf(1025), f });
+        for (Object[] base : baseData) {
+            for (Boolean l : booleans) {
+                for (Integer buf : BUFFERS) {
+                    for (Boolean w : booleans) {
+                        for (Integer c1 : COUNTS) {
+                            for (ResetType rt : ResetType.values()) {
+                                for (Boolean f : booleans) {
+                                    parameterSets.add(new Object[] {
+                                            base[0], base[1],
+                                            l, buf, w, c1, rt, Integer.valueOf(1025), f });
+                                }
                             }
                         }
                     }

==================================================
TestHttpServletDoHeadValidWrite512.java
index b201e7a1f9..b1fff86eed 100644
--- a/test/jakarta/servlet/http/TestHttpServletDoHeadValidWrite511.java
+++ b/test/jakarta/servlet/http/TestHttpServletDoHeadValidWrite511.java
@@ -23,6 +23,8 @@ import java.util.List;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 
+import org.apache.coyote.http2.Http2TestBase;
+
 /*
  * Split into multiple tests as a single test takes so long it impacts the time
  * of an entire test run.
@@ -30,17 +32,22 @@ import org.junit.runners.Parameterized;
 @RunWith(Parameterized.class)
 public class TestHttpServletDoHeadValidWrite511 extends HttpServletDoHeadBaseTest {
 
-    @Parameterized.Parameters(name = "{index}: {0} {1} {2} {3} {4} {5} {6}")
+    @Parameterized.Parameters(name = "{index}: {0} {1} {2} {3} {4} {5} {6} {7} {8}")
     public static Collection<Object[]> parameters() {
+        Collection<Object[]> baseData = Http2TestBase.data();
 
         List<Object[]> parameterSets = new ArrayList<>();
-        for (Boolean l : booleans) {
-            for (Integer buf : BUFFERS) {
-                for (Boolean w : booleans) {
-                    for (Integer c1 : COUNTS) {
-                        for (ResetType rt : ResetType.values()) {
-                            for (Boolean f : booleans) {
-                                parameterSets.add(new Object[] { l, buf, w, c1, rt, Integer.valueOf(511), f });
+        for (Object[] base : baseData) {
+            for (Boolean l : booleans) {
+                for (Integer buf : BUFFERS) {
+                    for (Boolean w : booleans) {
+                        for (Integer c1 : COUNTS) {
+                            for (ResetType rt : ResetType.values()) {
+                                for (Boolean f : booleans) {
+                                    parameterSets.add(new Object[] {
+                                            base[0], base[1],
+                                            l, buf, w, c1, rt, Integer.valueOf(511), f });
+                                }
                             }
                         }
                     }

==================================================
TestHttpServletDoHeadValidWrite513.java
index 0075eef79a..9d78b7659b 100644
--- a/test/jakarta/servlet/http/TestHttpServletDoHeadValidWrite512.java
+++ b/test/jakarta/servlet/http/TestHttpServletDoHeadValidWrite512.java
@@ -23,6 +23,8 @@ import java.util.List;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 
+import org.apache.coyote.http2.Http2TestBase;
+
 /*
  * Split into multiple tests as a single test takes so long it impacts the time
  * of an entire test run.
@@ -30,17 +32,22 @@ import org.junit.runners.Parameterized;
 @RunWith(Parameterized.class)
 public class TestHttpServletDoHeadValidWrite512 extends HttpServletDoHeadBaseTest {
 
-    @Parameterized.Parameters(name = "{index}: {0} {1} {2} {3} {4} {5} {6}")
+    @Parameterized.Parameters(name = "{index}: {0} {1} {2} {3} {4} {5} {6} {7} {8}")
     public static Collection<Object[]> parameters() {
+        Collection<Object[]> baseData = Http2TestBase.data();
 
         List<Object[]> parameterSets = new ArrayList<>();
-        for (Boolean l : booleans) {
-            for (Integer buf : BUFFERS) {
-                for (Boolean w : booleans) {
-                    for (Integer c1 : COUNTS) {
-                        for (ResetType rt : ResetType.values()) {
-                            for (Boolean f : booleans) {
-                                parameterSets.add(new Object[] { l, buf, w, c1, rt, Integer.valueOf(512), f });
+        for (Object[] base : baseData) {
+            for (Boolean l : booleans) {
+                for (Integer buf : BUFFERS) {
+                    for (Boolean w : booleans) {
+                        for (Integer c1 : COUNTS) {
+                            for (ResetType rt : ResetType.values()) {
+                                for (Boolean f : booleans) {
+                                    parameterSets.add(new Object[] {
+                                            base[0], base[1],
+                                            l, buf, w, c1, rt, Integer.valueOf(512), f });
+                                }
                             }
                         }
                     }

==================================================
