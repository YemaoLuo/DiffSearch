1bf4d7d49781f49e336b253781a79fbf05548530
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=43866
==================================================
Mark Thomas
==================================================
Mon Feb 26 10:00:12 2018 +0000
==================================================
Manager.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=43866
Add additional attributes to the Manager to provide control over which listeners are called when an attribute is added to the session when it has already been added under the same name. This is to aid clustering scenarios where setAttribute() is often called to signal that the attribute value has been mutated and needs to be replicated but it may not be required, or even desired, for the the associated listeners to be triggered. The default behaviour has not been changed.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1825351 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ManagerBase.java
index 4c8275fea2..ac9b8fb146 100644
--- a/java/org/apache/catalina/Manager.java
+++ b/java/org/apache/catalina/Manager.java
@@ -351,4 +351,73 @@ public interface Manager {
      *         otherwise {@code false}
      */
     public boolean willAttributeDistribute(String name, Object value);
+
+
+    /**
+     * When an attribute that is already present in the session is added again
+     * under the same name and the attribute implements {@link
+     * javax.servlet.http.HttpSessionBindingListener}, should
+     * {@link javax.servlet.http.HttpSessionBindingListener#valueUnbound(javax.servlet.http.HttpSessionBindingEvent)}
+     * be called followed by
+     * {@link javax.servlet.http.HttpSessionBindingListener#valueBound(javax.servlet.http.HttpSessionBindingEvent)}?
+     * <p>
+     * The default value is {@code false}.
+     *
+     * @return {@code true} if the listener will be notified, {@code false} if
+     *         it will not
+     */
+    public default boolean getNotifyBindingListenerOnUnchangedValue() {
+        return false;
+    }
+
+
+    /**
+     * Configure if
+     * {@link javax.servlet.http.HttpSessionBindingListener#valueUnbound(javax.servlet.http.HttpSessionBindingEvent)}
+     * be called followed by
+     * {@link javax.servlet.http.HttpSessionBindingListener#valueBound(javax.servlet.http.HttpSessionBindingEvent)}
+     * when an attribute that is already present in the session is added again
+     * under the same name and the attribute implements {@link
+     * javax.servlet.http.HttpSessionBindingListener}.
+     *
+     * @param notifyBindingListenerOnUnchangedValue {@code true} the listener
+     *                                              will be called, {@code
+     *                                              false} it will not
+     */
+    public void setNotifyBindingListenerOnUnchangedValue(
+            boolean notifyBindingListenerOnUnchangedValue);
+
+
+    /**
+     * When an attribute that is already present in the session is added again
+     * under the same name and a {@link
+     * javax.servlet.http.HttpSessionAttributeListener} is configured for the
+     * session should
+     * {@link javax.servlet.http.HttpSessionAttributeListener#attributeReplaced(javax.servlet.http.HttpSessionBindingEvent)}
+     * be called?
+     * <p>
+     * The default value is {@code true}.
+     *
+     * @return {@code true} if the listener will be notified, {@code false} if
+     *         it will not
+     */
+    public default boolean getNotifyAttributeListenerOnUnchangedValue() {
+        return true;
+    }
+
+
+    /**
+     * Configure if
+     * {@link javax.servlet.http.HttpSessionAttributeListener#attributeReplaced(javax.servlet.http.HttpSessionBindingEvent)}
+     * when an attribute that is already present in the session is added again
+     * under the same name and a {@link
+     * javax.servlet.http.HttpSessionAttributeListener} is configured for the
+     * session.
+     *
+     * @param notifyAttributeListenerOnUnchangedValue {@code true} the listener
+     *                                                will be called, {@code
+     *                                                false} it will not
+     */
+    public void setNotifyAttributeListenerOnUnchangedValue(
+            boolean notifyAttributeListenerOnUnchangedValue);
 }

==================================================
StandardSession.java
index 98c4231964..220c38e520 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -193,6 +193,10 @@ public abstract class ManagerBase extends LifecycleMBeanBase implements Manager
 
     private boolean warnOnSessionAttributeFilterFailure;
 
+    private boolean notifyBindingListenerOnUnchangedValue;
+
+    private boolean notifyAttributeListenerOnUnchangedValue = true;
+
 
     // ------------------------------------------------------------ Constructors
 
@@ -209,6 +213,31 @@ public abstract class ManagerBase extends LifecycleMBeanBase implements Manager
 
     // -------------------------------------------------------------- Properties
 
+    @Override
+    public boolean getNotifyAttributeListenerOnUnchangedValue() {
+        return notifyAttributeListenerOnUnchangedValue;
+    }
+
+
+
+    @Override
+    public void setNotifyAttributeListenerOnUnchangedValue(boolean notifyAttributeListenerOnUnchangedValue) {
+        this.notifyAttributeListenerOnUnchangedValue = notifyAttributeListenerOnUnchangedValue;
+    }
+
+
+    @Override
+    public boolean getNotifyBindingListenerOnUnchangedValue() {
+        return notifyBindingListenerOnUnchangedValue;
+    }
+
+
+    @Override
+    public void setNotifyBindingListenerOnUnchangedValue(boolean notifyBindingListenerOnUnchangedValue) {
+        this.notifyBindingListenerOnUnchangedValue = notifyBindingListenerOnUnchangedValue;
+    }
+
+
     /**
      * Obtain the regular expression used to filter session attribute based on
      * attribute name. The regular expression is anchored so it must match the

==================================================
