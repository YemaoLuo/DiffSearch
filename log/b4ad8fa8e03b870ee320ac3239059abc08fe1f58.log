b4ad8fa8e03b870ee320ac3239059abc08fe1f58
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63003
==================================================
Mark Thomas
==================================================
Wed Jan 23 16:33:47 2019 +0000
==================================================
Context.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63003
Extend the unloadDelay attribute on a Context to include in-flight asynchronous requests.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1851947 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AsyncContextImpl.java
index f979670207..192d1d24d1 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -1865,4 +1865,10 @@ public interface Context extends Container, ContextBind {
      *         otherwise <code>false</code>
      */
     public boolean getAllowMultipleLeadingForwardSlashInPath();
+
+
+    public void incrementInProgressAsyncCount();
+
+
+    public void decrementInProgressAsyncCount();
 }

==================================================
StandardContext.java
index e84d7f6303..1126de6f99 100644
--- a/java/org/apache/catalina/core/LocalStrings.properties
+++ b/java/org/apache/catalina/core/LocalStrings.properties
@@ -222,6 +222,7 @@ standardContext.setManager.start=Error starting new manager
 standardContext.setManager.stop=Error stopping old manager
 standardContext.startFailed=Context [{0}] startup failed due to previous errors
 standardContext.startingContext=Exception starting Context with name [{0}]
+standardContext.stop.asyncWaitInterrupted=Interrupt received while waiting unloadDelay milliseconds for in-flight asynchronous requests to complete. Context stop will continue without further delay.
 standardContext.stoppingContext=Exception stopping Context with name [{0}]
 standardContext.suspiciousUrl=Suspicious URL pattern: [{0}] in context [{1}], see sections 12.1 and 12.2 of the Servlet specification
 standardContext.threadBindingListenerError=An error occurred in the thread binding listener configured for Context [{0}]

==================================================
FailedContext.java
index 3a6cfb5d96..a61130c1bd 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -820,9 +820,23 @@ public class StandardContext extends ContainerBase
 
     private boolean allowMultipleLeadingForwardSlashInPath = false;
 
+    private final AtomicLong inProgressAsyncCount = new AtomicLong(0);
+
 
     // ----------------------------------------------------- Context Properties
 
+    @Override
+    public void incrementInProgressAsyncCount() {
+        inProgressAsyncCount.incrementAndGet();
+    }
+
+
+    @Override
+    public void decrementInProgressAsyncCount() {
+        inProgressAsyncCount.decrementAndGet();
+    }
+
+
     @Override
     public void setAllowMultipleLeadingForwardSlashInPath(
             boolean allowMultipleLeadingForwardSlashInPath) {
@@ -5316,6 +5330,22 @@ public class StandardContext extends ContainerBase
             broadcaster.sendNotification(notification);
         }
 
+        // Context has been removed from Mapper at this point (so no new
+        // requests will be mapped) but is still available.
+
+        // Give the in progress async requests a chance to complete
+        long limit = System.currentTimeMillis() + unloadDelay;
+        while (inProgressAsyncCount.get() > 0 && System.currentTimeMillis() < limit) {
+            try {
+                Thread.sleep(50);
+            } catch (InterruptedException e) {
+                log.info(sm.getString("standardContext.stop.asyncWaitInterrupted"), e);
+                break;
+            }
+        }
+
+        // Once the state is set to STOPPING, the Context will report itself as
+        // not available and any in progress async requests will timeout
         setState(LifecycleState.STOPPING);
 
         // Binding thread

==================================================
AbstractProcessor.java
index ff7cd25eba..83f9c455a6 100644
--- a/java/org/apache/catalina/startup/FailedContext.java
+++ b/java/org/apache/catalina/startup/FailedContext.java
@@ -809,4 +809,9 @@ public class FailedContext extends LifecycleMBeanBase implements Context {
     }
     @Override
     public boolean getAllowMultipleLeadingForwardSlashInPath() { return false; }
+
+    @Override
+    public void incrementInProgressAsyncCount() { /* NO-OP */ }
+    @Override
+    public void decrementInProgressAsyncCount() { /* NO-OP */ }
 }
\ No newline at end of file

==================================================
AsyncContextCallback.java
index 95fbbaaf4d..205a7891b2 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -639,6 +639,10 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
                 if ((now - asyncStart) > asyncTimeout) {
                     doTimeoutAsync();
                 }
+            } else if (!asyncStateMachine.isAvailable()) {
+                // Timeout the async process if the associated web application
+                // is no longer running.
+                doTimeoutAsync();
             }
         }
     }

==================================================
AsyncStateMachine.java
index 168479285f..c6573061f9 100644
--- a/java/org/apache/coyote/AsyncContextCallback.java
+++ b/java/org/apache/coyote/AsyncContextCallback.java
@@ -17,12 +17,20 @@
 package org.apache.coyote;
 
 /**
- * Provides a mechanism for the Coyote connectors to signal to a
- * {@link javax.servlet.AsyncContext} implementation that an action, such as
- * firing event listeners needs to be taken. It is implemented in this manner
- * so that the org.apache.coyote package does not have a dependency on the
+ * Provides a mechanism for the Coyote connectors to communicate with the
+ * {@link javax.servlet.AsyncContext}. It is implemented in this manner so that
+ * the org.apache.coyote package does not have a dependency on the
  * org.apache.catalina package.
  */
 public interface AsyncContextCallback {
     public void fireOnComplete();
+
+    /**
+     * Reports if the web application associated with this async request is
+     * available.
+     *
+     * @return {@code true} if the associated web application is available,
+     *         otherwise {@code false}
+     */
+    public boolean isAvailable();
 }

==================================================
TesterContext.java
index 0cb3348ca5..29b0caf258 100644
--- a/java/org/apache/coyote/AsyncStateMachine.java
+++ b/java/org/apache/coyote/AsyncStateMachine.java
@@ -483,6 +483,16 @@ class AsyncStateMachine {
     }
 
 
+    synchronized boolean isAvailable() {
+        if (asyncCtxt == null) {
+            // Async processing has probably been completed in another thread.
+            // Trigger a timeout to make sure the Processor is cleaned up.
+            return false;
+        }
+        return asyncCtxt.isAvailable();
+    }
+
+
     synchronized void recycle() {
         // Use lastAsyncStart to determine if this instance has been used since
         // it was last recycled. If it hasn't there is no need to recycle again

==================================================
