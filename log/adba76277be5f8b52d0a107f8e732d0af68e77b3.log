adba76277be5f8b52d0a107f8e732d0af68e77b3
==================================================
Whitespace removal from /java/org/apache/catalina/util
==================================================
Mark Emlyn
==================================================
Sat Oct 22 21:11:51 2011 +0000
==================================================
Base64.java
Whitespace removal from /java/org/apache/catalina/util

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1187792 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CharsetMapper.java
index f2fa111ad0..685110c763 100644
--- a/java/org/apache/catalina/util/Base64.java
+++ b/java/org/apache/catalina/util/Base64.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -194,9 +194,9 @@ public final class  Base64
         int start = base64DataBC.getStart();
         int end = base64DataBC.getEnd();
         byte[] base64Data = base64DataBC.getBuffer();
-        
+
         decodedDataCC.recycle();
-        
+
         // handle the edge case, so we don't have to worry about it later
         if(end - start == 0) { return; }
 
@@ -208,7 +208,7 @@ public final class  Base64
         int encodedIndex = 0;
         int dataIndex = start;
         char[] decodedData = null;
-        
+
         {
             // this sizes the output array properly - rlw
             int lastData = end - start;
@@ -275,9 +275,9 @@ public final class  Base64
         int start = base64DataBC.getStart();
         int end = base64DataBC.getEnd();
         byte[] base64Data = base64DataBC.getBuffer();
-        
+
         decodedDataBC.recycle();
-        
+
         // handle the edge case, so we don't have to worry about it later
         if(end - start == 0) { return; }
 
@@ -289,7 +289,7 @@ public final class  Base64
         int encodedIndex = 0;
         int dataIndex = start;
         byte[] decodedData = null;
-        
+
         {
             // this sizes the output array properly - rlw
             int lastData = end - start;

==================================================
ContextName.java
index 2f7bc17962..2957247355 100644
--- a/java/org/apache/catalina/util/CharsetMapper.java
+++ b/java/org/apache/catalina/util/CharsetMapper.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -104,11 +104,11 @@ public class CharsetMapper {
      * @param locale The locale for which to calculate a character set
      */
     public String getCharset(Locale locale) {
-        // Match full language_country_variant first, then language_country, 
+        // Match full language_country_variant first, then language_country,
         // then language only
         String charset = map.getProperty(locale.toString());
         if (charset == null) {
-            charset = map.getProperty(locale.getLanguage() + "_" 
+            charset = map.getProperty(locale.getLanguage() + "_"
                     + locale.getCountry());
             if (charset == null) {
                 charset = map.getProperty(locale.getLanguage());
@@ -117,7 +117,7 @@ public class CharsetMapper {
         return (charset);
     }
 
-    
+
     /**
      * The deployment descriptor can have a
      * locale-encoding-mapping-list element which describes the

==================================================
CustomObjectInputStream.java
index 68797c506a..c1e5a0eb61 100644
--- a/java/org/apache/catalina/util/ContextName.java
+++ b/java/org/apache/catalina/util/ContextName.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -31,27 +31,27 @@ public final class ContextName {
     private final String path;
     private final String version;
     private final String name;
-    
+
     /**
      * Creates an instance from a context name, display name, base name,
      * directory name, WAR name or context.xml name.
-     * 
+     *
      * @param name  The name to use as the basis for this object
      */
     public ContextName(String name) {
-        
+
         String tmp1 = name;
-        
+
         // Convert Context names and display names to base names
-        
+
         // Strip off any leading "/"
         if (tmp1.startsWith("/")) {
             tmp1 = tmp1.substring(1);
         }
-        
+
         // Replace any remaining /
         tmp1 = tmp1.replaceAll("/", FWD_SLASH_REPLACEMENT);
-        
+
         // Insert the ROOT name if required
         if (tmp1.startsWith(VERSION_MARKER) || "".equals(tmp1)) {
             tmp1 = ROOT_NAME + tmp1;
@@ -64,7 +64,7 @@ public final class ContextName {
         }
 
         baseName = tmp1;
-        
+
         String tmp2;
         // Extract version number
         int versionIndex = baseName.indexOf(VERSION_MARKER);
@@ -81,17 +81,17 @@ public final class ContextName {
         } else {
             path = "/" + tmp2.replaceAll(FWD_SLASH_REPLACEMENT, "/");
         }
-        
+
         if (versionIndex > -1) {
             this.name = path + VERSION_MARKER + version;
         } else {
             this.name = path;
         }
     }
-    
+
     /**
      * Construct an instance from a path and version.
-     * 
+     *
      * @param path      Context path to use
      * @param version   Context version to use
      */
@@ -109,7 +109,7 @@ public final class ContextName {
         } else {
             this.version = version;
         }
-        
+
         // Name is path + version
         if ("".equals(this.version)) {
             name = this.path;
@@ -135,15 +135,15 @@ public final class ContextName {
     public String getBaseName() {
         return baseName;
     }
-    
+
     public String getPath() {
         return path;
     }
-    
+
     public String getVersion() {
         return version;
     }
-    
+
     public String getName() {
         return name;
     }
@@ -155,15 +155,15 @@ public final class ContextName {
         } else {
             tmp.append(path);
         }
-        
+
         if (!"".equals(version)) {
             tmp.append(VERSION_MARKER);
             tmp.append(version);
         }
-        
+
         return tmp.toString();
     }
-    
+
     @Override
     public String toString() {
         return getDisplayName();

==================================================
DOMWriter.java
index c81040242f..a9ee35d9d4 100644
--- a/java/org/apache/catalina/util/CustomObjectInputStream.java
+++ b/java/org/apache/catalina/util/CustomObjectInputStream.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
DateTool.java
index 31b9fa1225..3ab58be30b 100644
--- a/java/org/apache/catalina/util/DOMWriter.java
+++ b/java/org/apache/catalina/util/DOMWriter.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -145,7 +145,7 @@ public class DOMWriter {
             // print element with attributes
          case Node.ELEMENT_NODE: {
                out.print('<');
-               if (this.qualifiedNames) { 
+               if (this.qualifiedNames) {
                   out.print(node.getNodeName());
                } else {
                   out.print(node.getLocalName());
@@ -159,7 +159,7 @@ public class DOMWriter {
                   } else {
                      out.print(attr.getLocalName());
                   }
-                  
+
                   out.print("=\"");
                   out.print(normalize(attr.getNodeValue()));
                   out.print('"');
@@ -223,7 +223,7 @@ public class DOMWriter {
                } else {
                   out.print(node.getLocalName());
                }
-               
+
                String data = node.getNodeValue();
                if ( data != null && data.length() > 0 ) {
                   out.print(' ');

==================================================
Enumerator.java
index 82cd8a39bf..e9821028c6 100644
--- a/java/org/apache/catalina/util/DateTool.java
+++ b/java/org/apache/catalina/util/DateTool.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -50,7 +50,7 @@ public class DateTool {
     public static final String RFC1123_PATTERN =
         "EEE, dd MMM yyyyy HH:mm:ss z";
 
-    /** 
+    /**
      * Format for http response header date field
      */
     public static final String HTTP_RESPONSE_DATE_HEADER =

==================================================
Extension.java
index a241540836..900aae22b6 100644
--- a/java/org/apache/catalina/util/Enumerator.java
+++ b/java/org/apache/catalina/util/Enumerator.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -100,7 +100,7 @@ public final class Enumerator<T> implements Enumeration<T> {
             while (iterator.hasNext()) {
                 list.add(iterator.next());
             }
-            this.iterator = list.iterator();   
+            this.iterator = list.iterator();
         }
 
     }

==================================================
ExtensionValidator.java
index a3329fdea3..4624fe5e3f 100644
--- a/java/org/apache/catalina/util/Extension.java
+++ b/java/org/apache/catalina/util/Extension.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -54,7 +54,7 @@ public final class Extension {
      * The name of the optional package being made available, or required.
      */
     private String extensionName = null;
-    
+
 
     public String getExtensionName() {
         return (this.extensionName);
@@ -163,7 +163,7 @@ public final class Extension {
     public void setFulfilled(boolean fulfilled) {
         this.fulfilled = fulfilled;
     }
-    
+
     public boolean isFulfilled() {
         return fulfilled;
     }

==================================================
IOTools.java
index c8a77bfdd6..1e907c5b06 100644
--- a/java/org/apache/catalina/util/ExtensionValidator.java
+++ b/java/org/apache/catalina/util/ExtensionValidator.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -63,7 +63,7 @@ public final class ExtensionValidator {
      */
     private static final StringManager sm =
         StringManager.getManager("org.apache.catalina.util");
-    
+
     private static volatile ArrayList<Extension> containerAvailableExtensions =
         null;
     private static ArrayList<ManifestResource> containerManifestResources =
@@ -75,10 +75,10 @@ public final class ExtensionValidator {
 
     /**
      *  This static initializer loads the container level extensions that are
-     *  available to all web applications. This method scans all extension 
-     *  directories available via the "java.ext.dirs" System property. 
+     *  available to all web applications. This method scans all extension
+     *  directories available via the "java.ext.dirs" System property.
      *
-     *  The System Class-Path is also scanned for jar files that may contain 
+     *  The System Class-Path is also scanned for jar files that may contain
      *  available extensions.
      */
     static {
@@ -86,7 +86,7 @@ public final class ExtensionValidator {
         // check for container level optional packages
         String systemClasspath = System.getProperty("java.class.path");
 
-        StringTokenizer strTok = new StringTokenizer(systemClasspath, 
+        StringTokenizer strTok = new StringTokenizer(systemClasspath,
                                                      File.pathSeparator);
 
         // build a list of jar files in the classpath
@@ -118,12 +118,12 @@ public final class ExtensionValidator {
     /**
      * Runtime validation of a Web Application.
      *
-     * This method uses JNDI to look up the resources located under a 
-     * <code>DirContext</code>. It locates Web Application MANIFEST.MF 
-     * file in the /META-INF/ directory of the application and all 
-     * MANIFEST.MF files in each JAR file located in the WEB-INF/lib 
-     * directory and creates an <code>ArrayList</code> of 
-     * <code>ManifestResorce<code> objects. These objects are then passed 
+     * This method uses JNDI to look up the resources located under a
+     * <code>DirContext</code>. It locates Web Application MANIFEST.MF
+     * file in the /META-INF/ directory of the application and all
+     * MANIFEST.MF files in each JAR file located in the WEB-INF/lib
+     * directory and creates an <code>ArrayList</code> of
+     * <code>ManifestResorce<code> objects. These objects are then passed
      * to the validateManifestResources method for validation.
      *
      * @param dirContext The JNDI root of the Web Application
@@ -133,14 +133,14 @@ public final class ExtensionValidator {
      * @return true if all required extensions satisfied
      */
     public static synchronized boolean validateApplication(
-                                           DirContext dirContext, 
+                                           DirContext dirContext,
                                            Context context)
                     throws IOException {
 
         String appName = context.getName();
         ArrayList<ManifestResource> appManifestResources =
             new ArrayList<ManifestResource>();
-        // If the application context is null it does not exist and 
+        // If the application context is null it does not exist and
         // therefore is not valid
         if (dirContext == null) return false;
         // Find the Manifest for the Web Application
@@ -160,7 +160,7 @@ public final class ExtensionValidator {
                     (sm.getString("extensionValidator.web-application-manifest"),
                     manifest, ManifestResource.WAR);
                 appManifestResources.add(mre);
-            } 
+            }
         } catch (NamingException nex) {
             // Application does not contain a MANIFEST.MF file
         } catch (NoSuchElementException nse) {
@@ -196,13 +196,13 @@ public final class ExtensionValidator {
                 if (jmanifest != null) {
                     ManifestResource mre = new ManifestResource(
                                                 binding.getName(),
-                                                jmanifest, 
+                                                jmanifest,
                                                 ManifestResource.APPLICATION);
                     appManifestResources.add(mre);
                 }
             }
         } catch (NamingException nex) {
-            // Jump out of the check for this application because it 
+            // Jump out of the check for this application because it
             // has no resources
         } finally {
             if (inputStream != null) {
@@ -240,20 +240,20 @@ public final class ExtensionValidator {
 
 
     /**
-     * Validates a <code>ArrayList</code> of <code>ManifestResource</code> 
-     * objects. This method requires an application name (which is the 
-     * context root of the application at runtime).  
+     * Validates a <code>ArrayList</code> of <code>ManifestResource</code>
+     * objects. This method requires an application name (which is the
+     * context root of the application at runtime).
      *
      * <code>false</false> is returned if the extension dependencies
-     * represented by any given <code>ManifestResource</code> objects 
+     * represented by any given <code>ManifestResource</code> objects
      * is not met.
      *
-     * This method should also provide static validation of a Web Application 
+     * This method should also provide static validation of a Web Application
      * if provided with the necessary parameters.
      *
-     * @param appName The name of the Application that will appear in the 
+     * @param appName The name of the Application that will appear in the
      *                error messages
-     * @param resources A list of <code>ManifestResource</code> objects 
+     * @param resources A list of <code>ManifestResource</code> objects
      *                  to be validated.
      *
      * @return true if manifest resource file requirements are met
@@ -261,7 +261,7 @@ public final class ExtensionValidator {
     private static boolean validateManifestResources(String appName,
             ArrayList<ManifestResource> resources) {
         boolean passes = true;
-        int failureCount = 0;        
+        int failureCount = 0;
         ArrayList<Extension> availableExtensions = null;
 
         Iterator<ManifestResource> it = resources.iterator();
@@ -334,18 +334,18 @@ public final class ExtensionValidator {
 
         return passes;
     }
-    
-   /* 
-    * Build this list of available extensions so that we do not have to 
-    * re-build this list every time we iterate through the list of required 
-    * extensions. All available extensions in all of the 
-    * <code>MainfestResource</code> objects will be added to a 
+
+   /*
+    * Build this list of available extensions so that we do not have to
+    * re-build this list every time we iterate through the list of required
+    * extensions. All available extensions in all of the
+    * <code>MainfestResource</code> objects will be added to a
     * <code>HashMap</code> which is returned on the first dependency list
-    * processing pass. 
+    * processing pass.
     *
     * The key is the name + implementation version.
     *
-    * NOTE: A list is built only if there is a dependency that needs 
+    * NOTE: A list is built only if there is a dependency that needs
     * to be checked (performance optimization).
     *
     * @param resources A list of <code>ManifestResource</code> objects
@@ -377,7 +377,7 @@ public final class ExtensionValidator {
 
         return availableList;
     }
-    
+
     /**
      * Return the Manifest from a jar file or war file
      *

==================================================
InstanceSupport.java
index 0da38f2abd..1c12ec9c77 100644
--- a/java/org/apache/catalina/util/IOTools.java
+++ b/java/org/apache/catalina/util/IOTools.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -24,7 +24,7 @@ import java.io.Writer;
 
 
 /**
- * Contains commonly needed I/O-related methods 
+ * Contains commonly needed I/O-related methods
  *
  * @author Dan Sandberg
  */
@@ -43,7 +43,7 @@ public class IOTools {
      * @param writer the writer to write to.
      * @param buf the char array to use as a buffer
      */
-    public static void flow( Reader reader, Writer writer, char[] buf ) 
+    public static void flow( Reader reader, Writer writer, char[] buf )
         throws IOException {
         int numRead;
         while ( (numRead = reader.read(buf) ) >= 0) {
@@ -54,32 +54,32 @@ public class IOTools {
     /**
      * @see #flow( Reader, Writer, char[] )
      */
-    public static void flow( Reader reader, Writer writer ) 
+    public static void flow( Reader reader, Writer writer )
         throws IOException {
         char[] buf = new char[DEFAULT_BUFFER_SIZE];
         flow( reader, writer, buf );
     }
 
     /**
-     * Read input from input stream and write it to output stream 
+     * Read input from input stream and write it to output stream
      * until there is no more input from input stream.
      *
      * @param is input stream the input stream to read from.
      * @param os output stream the output stream to write to.
      * @param buf the byte array to use as a buffer
      */
-    public static void flow( InputStream is, OutputStream os, byte[] buf ) 
+    public static void flow( InputStream is, OutputStream os, byte[] buf )
         throws IOException {
         int numRead;
         while ( (numRead = is.read(buf) ) >= 0) {
             os.write(buf, 0, numRead);
         }
-    }  
+    }
 
     /**
      * @see #flow( java.io.InputStream, java.io.OutputStream, byte[] )
-     */ 
-    public static void flow( InputStream is, OutputStream os ) 
+     */
+    public static void flow( InputStream is, OutputStream os )
         throws IOException {
         byte[] buf = new byte[DEFAULT_BUFFER_SIZE];
         flow( is, os, buf );

==================================================
LifecycleBase.java
index 42038d1985..d7dcc825e3 100644
--- a/java/org/apache/catalina/util/InstanceSupport.java
+++ b/java/org/apache/catalina/util/InstanceSupport.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -65,7 +65,7 @@ public final class InstanceSupport {
      * The set of registered InstanceListeners for event notifications.
      */
     private InstanceListener listeners[] = new InstanceListener[0];
-    
+
     private final Object listenersLock = new Object(); // Lock object for changes to listeners
 
 

==================================================
LifecycleMBeanBase.java
index 7e7c56c58e..24e9092d5a 100644
--- a/java/org/apache/catalina/util/LifecycleBase.java
+++ b/java/org/apache/catalina/util/LifecycleBase.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -35,7 +35,7 @@ import org.apache.tomcat.util.res.StringManager;
 public abstract class LifecycleBase implements Lifecycle {
 
     private static Log log = LogFactory.getLog(LifecycleBase.class);
-    
+
     private static StringManager sm =
         StringManager.getManager("org.apache.catalina.util");
 
@@ -79,10 +79,10 @@ public abstract class LifecycleBase implements Lifecycle {
         lifecycle.removeLifecycleListener(listener);
     }
 
-    
+
     /**
      * Allow sub classes to fire {@link Lifecycle} events.
-     * 
+     *
      * @param type  Event type
      * @param data  Data associated with event.
      */
@@ -90,7 +90,7 @@ public abstract class LifecycleBase implements Lifecycle {
         lifecycle.fireLifecycleEvent(type, data);
     }
 
-    
+
     @Override
     public final synchronized void init() throws LifecycleException {
         if (!state.equals(LifecycleState.NEW)) {
@@ -109,20 +109,20 @@ public abstract class LifecycleBase implements Lifecycle {
 
         setStateInternal(LifecycleState.INITIALIZED, null, false);
     }
-    
-    
+
+
     protected abstract void initInternal() throws LifecycleException;
-    
+
     /**
      * {@inheritDoc}
      */
     @Override
     public final synchronized void start() throws LifecycleException {
-        
+
         if (LifecycleState.STARTING_PREP.equals(state) ||
                 LifecycleState.STARTING.equals(state) ||
                 LifecycleState.STARTED.equals(state)) {
-            
+
             if (log.isDebugEnabled()) {
                 Exception e = new LifecycleException();
                 log.debug(sm.getString("lifecycleBase.alreadyStarted",
@@ -131,10 +131,10 @@ public abstract class LifecycleBase implements Lifecycle {
                 log.info(sm.getString("lifecycleBase.alreadyStarted",
                         toString()));
             }
-            
+
             return;
         }
-        
+
         if (state.equals(LifecycleState.NEW)) {
             init();
         } else if (!state.equals(LifecycleState.INITIALIZED) &&
@@ -162,7 +162,7 @@ public abstract class LifecycleBase implements Lifecycle {
             if (!state.equals(LifecycleState.STARTING)) {
                 invalidTransition(Lifecycle.AFTER_START_EVENT);
             }
-            
+
             setStateInternal(LifecycleState.STARTED, null, false);
         }
     }
@@ -172,13 +172,13 @@ public abstract class LifecycleBase implements Lifecycle {
      * Sub-classes must ensure that the state is changed to
      * {@link LifecycleState#STARTING} during the execution of this method.
      * Changing state will trigger the {@link Lifecycle#START_EVENT} event.
-     * 
+     *
      * If a component fails to start it may either throw a
      * {@link LifecycleException} which will cause it's parent to fail to start
      * or it can place itself in the error state in which case {@link #stop()}
      * will be called on the failed component but the parent component will
      * continue to start normally.
-     * 
+     *
      * @throws LifecycleException
      */
     protected abstract void startInternal() throws LifecycleException;
@@ -202,10 +202,10 @@ public abstract class LifecycleBase implements Lifecycle {
                 log.info(sm.getString("lifecycleBase.alreadyStopped",
                         toString()));
             }
-            
+
             return;
         }
-        
+
         if (state.equals(LifecycleState.NEW)) {
             state = LifecycleState.STOPPED;
             return;
@@ -216,7 +216,7 @@ public abstract class LifecycleBase implements Lifecycle {
                 !state.equals(LifecycleState.MUST_STOP)) {
             invalidTransition(Lifecycle.BEFORE_STOP_EVENT);
         }
-        
+
         if (state.equals(LifecycleState.FAILED)) {
             // Don't transition to STOPPING_PREP as that would briefly mark the
             // component as available but do ensure the BEFORE_STOP_EVENT is
@@ -256,7 +256,7 @@ public abstract class LifecycleBase implements Lifecycle {
      * Sub-classes must ensure that the state is changed to
      * {@link LifecycleState#STOPPING} during the execution of this method.
      * Changing state will trigger the {@link Lifecycle#STOP_EVENT} event.
-     * 
+     *
      * @throws LifecycleException
      */
     protected abstract void stopInternal() throws LifecycleException;
@@ -275,10 +275,10 @@ public abstract class LifecycleBase implements Lifecycle {
                 log.info(sm.getString("lifecycleBase.alreadyDestroyed",
                         toString()));
             }
-            
+
             return;
         }
-        
+
         if (!state.equals(LifecycleState.STOPPED) &&
                 !state.equals(LifecycleState.FAILED) &&
                 !state.equals(LifecycleState.NEW) &&
@@ -287,7 +287,7 @@ public abstract class LifecycleBase implements Lifecycle {
         }
 
         setStateInternal(LifecycleState.DESTROYING, null, false);
-        
+
         try {
             destroyInternal();
         } catch (Throwable t) {
@@ -296,13 +296,13 @@ public abstract class LifecycleBase implements Lifecycle {
             throw new LifecycleException(
                     sm.getString("lifecycleBase.destroyFail",toString()), t);
         }
-        
+
         setStateInternal(LifecycleState.DESTROYED, null, false);
     }
-    
-    
+
+
     protected abstract void destroyInternal() throws LifecycleException;
-    
+
     /**
      * {@inheritDoc}
      */
@@ -326,21 +326,21 @@ public abstract class LifecycleBase implements Lifecycle {
      * Calling this method will automatically fire any associated
      * {@link Lifecycle} event. It will also check that any attempted state
      * transition is valid for a sub-class.
-     * 
+     *
      * @param state The new state for this component
      */
     protected synchronized void setState(LifecycleState state)
             throws LifecycleException {
         setStateInternal(state, null, true);
     }
-    
-    
+
+
     /**
      * Provides a mechanism for sub-classes to update the component state.
      * Calling this method will automatically fire any associated
      * {@link Lifecycle} event. It will also check that any attempted state
      * transition is valid for a sub-class.
-     * 
+     *
      * @param state The new state for this component
      * @param data  The data to pass to the associated {@link Lifecycle} event
      */
@@ -351,11 +351,11 @@ public abstract class LifecycleBase implements Lifecycle {
 
     private synchronized void setStateInternal(LifecycleState state,
             Object data, boolean check) throws LifecycleException {
-        
+
         if (log.isDebugEnabled()) {
             log.debug(sm.getString("lifecycleBase.setState", this, state));
         }
-        
+
         if (check) {
             // Must have been triggered by one of the abstract methods (assume
             // code in this class is correct)
@@ -366,7 +366,7 @@ public abstract class LifecycleBase implements Lifecycle {
                 // a possible NPE further down the method
                 return;
             }
-            
+
             // Any method can transition to failed
             // startInternal() permits STARTING_PREP to STARTING
             // stopInternal() permits STOPPING_PREP to STOPPING and FAILED to
@@ -382,7 +382,7 @@ public abstract class LifecycleBase implements Lifecycle {
                 invalidTransition(state.name());
             }
         }
-        
+
         this.state = state;
         String lifecycleEvent = state.getLifecycleEvent();
         if (lifecycleEvent != null) {

==================================================
LifecycleSupport.java
index 2939d9215f..3beae1d882 100644
--- a/java/org/apache/catalina/util/LifecycleMBeanBase.java
+++ b/java/org/apache/catalina/util/LifecycleMBeanBase.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -35,16 +35,16 @@ public abstract class LifecycleMBeanBase extends LifecycleBase
         implements MBeanRegistration {
 
     private static Log log = LogFactory.getLog(LifecycleMBeanBase.class);
-    
+
     private static StringManager sm =
         StringManager.getManager("org.apache.catalina.util");
 
-    
+
     /* Cache components of the MBean registration. */
     private String domain = null;
     private ObjectName oname = null;
     protected MBeanServer mserver = null;
-    
+
     /**
      * Sub-classes wishing to perform additional initialization should override
      * this method, ensuring that super.initInternal() is the first call in the
@@ -52,17 +52,17 @@ public abstract class LifecycleMBeanBase extends LifecycleBase
      */
     @Override
     protected void initInternal() throws LifecycleException {
-        
+
         // If oname is not null then registration has already happened via
         // preRegister().
         if (oname == null) {
             mserver = Registry.getRegistry(null, null).getMBeanServer();
-            
+
             oname = register(this, getObjectNameKeyProperties());
         }
     }
 
-    
+
     /**
      * Sub-classes wishing to perform additional clean-up should override this
      * method, ensuring that super.destroyInternal() is the last call in the
@@ -73,17 +73,17 @@ public abstract class LifecycleMBeanBase extends LifecycleBase
         unregister(oname);
     }
 
-    
+
     /**
      * Specify the domain under which this component should be registered. Used
      * with components that cannot (easily) navigate the component hierarchy to
-     * determine the correct domain to use. 
+     * determine the correct domain to use.
      */
     public final void setDomain(String domain) {
         this.domain = domain;
     }
 
-    
+
     /**
      * Obtain the domain under which this component will be / has been
      * registered.
@@ -96,20 +96,20 @@ public abstract class LifecycleMBeanBase extends LifecycleBase
         if (domain == null) {
             domain = Globals.DEFAULT_MBEAN_DOMAIN;
         }
-        
+
         return domain;
     }
 
-    
+
     /**
      * Method implemented by sub-classes to identify the domain in which MBeans
      * should be registered.
-     * 
+     *
      * @return  The name of the domain to use to register MBeans.
      */
     protected abstract String getDomainInternal();
 
-    
+
     /**
      * Obtain the name under which this component has been registered with JMX.
      */
@@ -121,20 +121,20 @@ public abstract class LifecycleMBeanBase extends LifecycleBase
     /**
      * Allow sub-classes to specify the key properties component of the
      * {@link ObjectName} that will be used to register this component.
-     * 
+     *
      * @return  The string representation of the key properties component of the
      *          desired {@link ObjectName}
      */
     protected abstract String getObjectNameKeyProperties();
-    
-    
+
+
     /**
      * Utility method to enable sub-classes to easily register additional
      * components that don't implement {@link MBeanRegistration} with
      * an MBean server.<br/>
      * Note: This method should only be used once {@link #initInternal()} has
-     * been called and before {@link #destroyInternal()} has been called. 
-     * 
+     * been called and before {@link #destroyInternal()} has been called.
+     *
      * @param obj                       The object the register
      * @param objectNameKeyProperties   The key properties component of the
      *                                  object name to use to register the
@@ -144,7 +144,7 @@ public abstract class LifecycleMBeanBase extends LifecycleBase
      */
     protected final ObjectName register(Object obj,
             String objectNameKeyProperties) {
-        
+
         // Construct an object name with the right domain
         StringBuilder name = new StringBuilder(getDomain());
         name.append(':');
@@ -154,7 +154,7 @@ public abstract class LifecycleMBeanBase extends LifecycleBase
 
         try {
             on = new ObjectName(name.toString());
-            
+
             Registry.getRegistry(null, null).registerComponent(obj, on, null);
         } catch (MalformedObjectNameException e) {
             log.warn(sm.getString("lifecycleMBeanBase.registerFail", obj, name),
@@ -166,30 +166,30 @@ public abstract class LifecycleMBeanBase extends LifecycleBase
 
         return on;
     }
-    
-    
+
+
     /**
      * Utility method to enable sub-classes to easily unregister additional
      * components that don't implement {@link MBeanRegistration} with
      * an MBean server.<br/>
      * Note: This method should only be used once {@link #initInternal()} has
-     * been called and before {@link #destroyInternal()} has been called. 
-     * 
+     * been called and before {@link #destroyInternal()} has been called.
+     *
      * @param on    The name of the component to unregister
      */
     protected final void unregister(ObjectName on) {
-        
+
         // If null ObjectName, just return without complaint
         if (on == null) {
             return;
         }
-        
+
         // If the MBeanServer is null, log a warning & return
         if (mserver == null) {
             log.warn(sm.getString("lifecycleMBeanBase.unregisterNoServer", on));
             return;
         }
-        
+
         try {
             mserver.unregisterMBean(on);
         } catch (MBeanRegistrationException e) {
@@ -199,8 +199,8 @@ public abstract class LifecycleMBeanBase extends LifecycleBase
         }
 
     }
-    
-    
+
+
     /**
      * Not used - NOOP.
      */
@@ -209,7 +209,7 @@ public abstract class LifecycleMBeanBase extends LifecycleBase
         // NOOP
     }
 
-    
+
     /**
      * Not used - NOOP.
      */
@@ -218,7 +218,7 @@ public abstract class LifecycleMBeanBase extends LifecycleBase
         // NOOP
     }
 
-    
+
     /**
      * Not used - NOOP.
      */
@@ -235,7 +235,7 @@ public abstract class LifecycleMBeanBase extends LifecycleBase
     @Override
     public final ObjectName preRegister(MBeanServer server, ObjectName name)
             throws Exception {
-        
+
         this.mserver = server;
         this.oname = name;
         this.domain = name.getDomain();

==================================================
MD5Encoder.java
index 7a4d262d20..3231e6ab8a 100644
--- a/java/org/apache/catalina/util/LocalStrings.properties
+++ b/java/org/apache/catalina/util/LocalStrings.properties
@@ -42,6 +42,6 @@ requestUtil.urlDecode.uee=Unable to URL decode the specified input since the enc
 SecurityUtil.doAsPrivilege=An exception occurs when running the PrivilegedExceptionAction block.
 sessionIdGenerator.createRandom=Creation of SecureRandom instance for session ID generation using [{0}] took [{1}] milliseconds.
 sessionIdGenerator.random=Exception initializing random number generator of class [{0}]. Falling back to java.secure.SecureRandom
-sessionIdGenerator.randomAlgorithm=Exception initializing random number generator using algorithm [{0}] 
+sessionIdGenerator.randomAlgorithm=Exception initializing random number generator using algorithm [{0}]
 sessionIdGenerator.randomProviderException initializing random number generator using provider [{0}]
 

==================================================
MIME2Java.java
index 331ca36eb4..8fb3259963 100644
--- a/java/org/apache/catalina/util/MD5Encoder.java
+++ b/java/org/apache/catalina/util/MD5Encoder.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
ManifestResource.java
index 5485178799..c47c4778c8 100644
--- a/java/org/apache/catalina/util/MIME2Java.java
+++ b/java/org/apache/catalina/util/MIME2Java.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
ParameterMap.java
index eea96d92ba..55934d33ca 100644
--- a/java/org/apache/catalina/util/ManifestResource.java
+++ b/java/org/apache/catalina/util/ManifestResource.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -24,34 +24,34 @@ import java.util.jar.Manifest;
 /**
  *  Representation of a Manifest file and its available extensions and
  *  required extensions
- *  
+ *
  * @author Greg Murray
  * @author Justyna Horwat
  * @version $Id$
- * 
+ *
  */
 public class ManifestResource {
-    
+
     // ------------------------------------------------------------- Properties
 
     // These are the resource types for determining effect error messages
     public static final int SYSTEM = 1;
     public static final int WAR = 2;
     public static final int APPLICATION = 3;
-    
+
     private ArrayList<Extension> availableExtensions = null;
     private ArrayList<Extension> requiredExtensions = null;
-    
+
     private String resourceName = null;
     private int resourceType = -1;
-        
-    public ManifestResource(String resourceName, Manifest manifest, 
+
+    public ManifestResource(String resourceName, Manifest manifest,
                             int resourceType) {
         this.resourceName = resourceName;
         this.resourceType = resourceType;
         processManifest(manifest);
     }
-    
+
     /**
      * Gets the name of the resource
      *
@@ -69,16 +69,16 @@ public class ManifestResource {
     public ArrayList<Extension> getAvailableExtensions() {
         return availableExtensions;
     }
-    
+
     /**
      * Gets the list of required extensions
      *
      * @return List of required extensions
      */
     public ArrayList<Extension> getRequiredExtensions() {
-        return requiredExtensions;   
+        return requiredExtensions;
     }
-    
+
     // --------------------------------------------------------- Public Methods
 
     /**
@@ -89,7 +89,7 @@ public class ManifestResource {
     public int getAvailableExtensionCount() {
         return (availableExtensions != null) ? availableExtensions.size() : 0;
     }
-    
+
     /**
      * Gets the number of required extensions
      *
@@ -98,7 +98,7 @@ public class ManifestResource {
     public int getRequiredExtensionCount() {
         return (requiredExtensions != null) ? requiredExtensions.size() : 0;
     }
-    
+
     /**
      * Convenience method to check if this <code>ManifestResource</code>
      * has an requires extensions.
@@ -108,7 +108,7 @@ public class ManifestResource {
     public boolean requiresExtensions() {
         return (requiredExtensions != null) ? true : false;
     }
-    
+
     /**
      * Returns <code>true</code> if all required extension dependencies
      * have been meet for this <code>ManifestResource</code> object.
@@ -122,11 +122,11 @@ public class ManifestResource {
         Iterator<Extension> it = requiredExtensions.iterator();
         while (it.hasNext()) {
             Extension ext = it.next();
-            if (!ext.isFulfilled()) return false;            
+            if (!ext.isFulfilled()) return false;
         }
         return true;
     }
-    
+
     @Override
     public String toString() {
 
@@ -155,7 +155,7 @@ public class ManifestResource {
         availableExtensions = getAvailableExtensions(manifest);
         requiredExtensions = getRequiredExtensions(manifest);
     }
-    
+
     /**
      * Return the set of <code>Extension</code> objects representing optional
      * packages that are required by the application associated with the
@@ -202,7 +202,7 @@ public class ManifestResource {
         }
         return extensionList;
     }
-    
+
     /**
      * Return the set of <code>Extension</code> objects representing optional
      * packages that are bundled with the application associated with the
@@ -239,5 +239,5 @@ public class ManifestResource {
 
         return extensionList;
     }
-    
+
 }

==================================================
RequestUtil.java
index 66b2c26fc7..0534145bed 100644
--- a/java/org/apache/catalina/util/ParameterMap.java
+++ b/java/org/apache/catalina/util/ParameterMap.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
ResourceSet.java
index bf099a3b8c..f4eec32a5c 100644
--- a/java/org/apache/catalina/util/RequestUtil.java
+++ b/java/org/apache/catalina/util/RequestUtil.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -215,8 +215,8 @@ public final class RequestUtil {
     public static String URLDecode(String str) {
         return URLDecode(str, null);
     }
-    
-    
+
+
     /**
      * Decode and return the specified URL-encoded String. It is assumed the
      * string is not a query string.
@@ -230,7 +230,7 @@ public final class RequestUtil {
     public static String URLDecode(String str, String enc) {
         return URLDecode(str, enc, false);
     }
-    
+
     /**
      * Decode and return the specified URL-encoded String.
      *
@@ -303,7 +303,7 @@ public final class RequestUtil {
      * by a valid 2-digit hexadecimal number
      */
     public static String URLDecode(byte[] bytes, String enc, boolean isQuery) {
-    
+
         if (bytes == null)
             return null;
 
@@ -403,7 +403,7 @@ public final class RequestUtil {
             String encoding) throws UnsupportedEncodingException {
 
         Charset charset = B2CConverter.getCharset(encoding);
-        
+
         if (data != null && data.length > 0) {
             int    ix = 0;
             int    ox = 0;
@@ -426,8 +426,8 @@ public final class RequestUtil {
                         ox = 0;
                     } else {
                         data[ox++] = c;
-                    }                   
-                    break;  
+                    }
+                    break;
                 case '+':
                     data[ox++] = (byte)' ';
                     break;

==================================================
SchemaResolver.java
index 9c3cdcd8a2..75fb0adc75 100644
--- a/java/org/apache/catalina/util/ResourceSet.java
+++ b/java/org/apache/catalina/util/ResourceSet.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
ServerInfo.java
index 700ee0afb2..2134355fa9 100644
--- a/java/org/apache/catalina/util/SchemaResolver.java
+++ b/java/org/apache/catalina/util/SchemaResolver.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
SessionIdGenerator.java
index cdfb7bc610..2f3d4d8c48 100644
--- a/java/org/apache/catalina/util/ServerInfo.java
+++ b/java/org/apache/catalina/util/ServerInfo.java
@@ -74,7 +74,7 @@ public class ServerInfo {
             serverBuilt = "unknown";
         if (serverNumber == null)
             serverNumber = "7.0.x";
-        
+
     }
 
 
@@ -121,7 +121,7 @@ public class ServerInfo {
         System.out.println("JVM Version:    " +
                            System.getProperty("java.runtime.version"));
         System.out.println("JVM Vendor:     " +
-                           System.getProperty("java.vm.vendor"));                        
+                           System.getProperty("java.vm.vendor"));
     }
 
 }

==================================================
Strftime.java
index 0e6b1150ba..22a470278b 100644
--- a/java/org/apache/catalina/util/SessionIdGenerator.java
+++ b/java/org/apache/catalina/util/SessionIdGenerator.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -88,7 +88,7 @@ public class SessionIdGenerator {
 
     /**
      * Specify a non-default @{link {@link SecureRandom} implementation to use.
-     * 
+     *
      * @param secureRandomClass The fully-qualified class name
      */
     public void setSecureRandomClass(String secureRandomClass) {
@@ -98,7 +98,7 @@ public class SessionIdGenerator {
 
     /**
      * Specify a non-default algorithm to use to generate random numbers.
-     * 
+     *
      * @param secureRandomAlgorithm The name of the algorithm
      */
     public void setSecureRandomAlgorithm(String secureRandomAlgorithm) {
@@ -108,7 +108,7 @@ public class SessionIdGenerator {
 
     /**
      * Specify a non-default provider to use to generate random numbers.
-     * 
+     *
      * @param secureRandomProvider  The name of the provider
      */
     public void setSecureRandomProvider(String secureRandomProvider) {
@@ -119,7 +119,7 @@ public class SessionIdGenerator {
     /**
      * Specify the node identifier associated with this node which will be
      * included in the generated session ID.
-     * 
+     *
      * @param jvmRoute  The node identifier
      */
     public void setJvmRoute(String jvmRoute) {
@@ -129,7 +129,7 @@ public class SessionIdGenerator {
 
     /**
      * Specify the number of bytes for a session ID
-     * 
+     *
      * @param sessionIdLength   Number of bytes
      */
     public void setSessionIdLength(int sessionIdLength) {
@@ -174,8 +174,8 @@ public class SessionIdGenerator {
 
         return buffer.toString();
     }
-    
-    
+
+
     private void getRandomBytes(byte bytes[]) {
 
         SecureRandom random = randoms.poll();
@@ -185,8 +185,8 @@ public class SessionIdGenerator {
         random.nextBytes(bytes);
         randoms.add(random);
     }
-    
-    
+
+
     /**
      * Create a new random number generator instance we should use for
      * generating session identifiers.
@@ -194,7 +194,7 @@ public class SessionIdGenerator {
     private SecureRandom createSecureRandom() {
 
         SecureRandom result = null;
-        
+
         long t1 = System.currentTimeMillis();
         if (secureRandomClass != null) {
             try {
@@ -236,7 +236,7 @@ public class SessionIdGenerator {
                         secureRandomAlgorithm), e);
             }
         }
-        
+
         if (result == null) {
             // Nothing works - use platform default
             result = new SecureRandom();
@@ -244,7 +244,7 @@ public class SessionIdGenerator {
 
         // Force seeding to take place
         result.nextInt();
-        
+
         long t2=System.currentTimeMillis();
         if( (t2-t1) > 100 )
             log.info(sm.getString("sessionIdGenerator.createRandom",

==================================================
StringParser.java
index 22e847f2cd..f5acb6cd0e 100644
--- a/java/org/apache/catalina/util/Strftime.java
+++ b/java/org/apache/catalina/util/Strftime.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -26,7 +26,7 @@ import java.util.TimeZone;
 /**
  * Converts dates to strings using the same format specifiers as strftime
  *
- * Note: This does not mimic strftime perfectly.  Certain strftime commands, 
+ * Note: This does not mimic strftime perfectly.  Certain strftime commands,
  *       are not supported, and will convert as if they were literals.
  *
  *       Certain complicated commands, like those dealing with the week of the year
@@ -119,7 +119,7 @@ public class Strftime {
 
     /**
      * Create an instance of this date formatting class
-     * 
+     *
      * @param origFormat the strftime-style formatting string
      * @param locale the locale to use for locale-specific conversions
      */
@@ -197,7 +197,7 @@ public class Strftime {
                         buf.append("'");
                         inside = true;
                     }
-                    
+
                     buf.append(c);
                 }
             }
@@ -238,14 +238,14 @@ public class Strftime {
         //O and E are modifiers, they mean to present an alternative representation of the next char
         //we just handle the next char as if the O or E wasn't there
         if ( firstChar == 'O' || firstChar == 'E' ) {
-            if ( index + 1 < pattern.length() ) {               
+            if ( index + 1 < pattern.length() ) {
                 newInside = translateCommand( buf, pattern, index + 1, oldInside );
             } else {
                 buf.append( quote("%" + firstChar, oldInside ) );
             }
         } else {
             String command = translate.getProperty( String.valueOf( firstChar ) );
-            
+
             //If we don't find a format, treat it as a literal--That's what apache does
             if ( command == null ) {
                 buf.append( quote( "%" + firstChar, oldInside ) );

==================================================
TomcatCSS.java
index fa63bc8cbf..24bfa2125c 100644
--- a/java/org/apache/catalina/util/StringParser.java
+++ b/java/org/apache/catalina/util/StringParser.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
URLEncoder.java
index 354878eee2..89084b7292 100644
--- a/java/org/apache/catalina/util/TomcatCSS.java
+++ b/java/org/apache/catalina/util/TomcatCSS.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
XMLWriter.java
index 2a9ad43b58..304b28b809 100644
--- a/java/org/apache/catalina/util/URLEncoder.java
+++ b/java/org/apache/catalina/util/URLEncoder.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -25,7 +25,7 @@ import java.util.BitSet;
  *
  * This class is very similar to the java.net.URLEncoder class.
  *
- * Unfortunately, with java.net.URLEncoder there is no way to specify to the 
+ * Unfortunately, with java.net.URLEncoder there is no way to specify to the
  * java.net.URLEncoder which characters should NOT be encoded.
  *
  * This code was moved from DefaultServlet.java

==================================================
