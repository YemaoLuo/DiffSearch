3868d918b53480592de759fa48e9e4882303c0e5
==================================================
Complete generic type ID refactoring
==================================================
Mark Emlyn
==================================================
Wed Feb 20 18:22:32 2013 +0000
==================================================
Util.java
Complete generic type ID refactoring

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1448338 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WsSession.java
index 260036c66d..491974a011 100644
--- a/java/org/apache/tomcat/websocket/Util.java
+++ b/java/org/apache/tomcat/websocket/Util.java
@@ -16,6 +16,9 @@
  */
 package org.apache.tomcat.websocket;
 
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.lang.reflect.TypeVariable;
 import java.security.NoSuchAlgorithmException;
 import java.security.SecureRandom;
 import java.util.Queue;
@@ -23,6 +26,7 @@ import java.util.concurrent.ConcurrentLinkedQueue;
 
 import javax.websocket.CloseReason.CloseCode;
 import javax.websocket.CloseReason.CloseCodes;
+import javax.websocket.MessageHandler;
 
 /**
  * Utility class for internal use only within the
@@ -129,4 +133,76 @@ class Util {
 
         return result;
     }
+
+
+    static Class<?> getMessageType(MessageHandler listener) {
+        return (Class<?>) Util.getGenericType(MessageHandler.class,
+                listener.getClass());
+    }
+
+
+    private static <T> Object getGenericType(Class<T> type,
+            Class<? extends T> clazz) {
+
+        // Look to see if this class implements the generic MessageHandler<>
+        // interface
+
+        // Get all the interfaces
+        Type[] interfaces = clazz.getGenericInterfaces();
+        for (Type iface : interfaces) {
+            // Only need to check interfaces that use generics
+            if (iface instanceof ParameterizedType) {
+                ParameterizedType pi = (ParameterizedType) iface;
+                // Look for the MessageHandler<> interface
+                if (pi.getRawType() instanceof Class) {
+                    if (type.isAssignableFrom((Class<?>) pi.getRawType())) {
+                        return getTypeParameter(
+                                clazz, pi.getActualTypeArguments()[0]);
+                    }
+                }
+            }
+        }
+
+        // Interface not found on this class. Look at the superclass.
+        Class<? extends T> superClazz =
+                (Class<? extends T>) clazz.getSuperclass();
+
+        Object result = getGenericType(type, superClazz);
+        if (result instanceof Class<?>) {
+            // Superclass implements interface and defines explicit type for
+            // MessageHandler<>
+            return result;
+        } else if (result instanceof Integer) {
+            // Superclass implements interface and defines unknown type for
+            // MessageHandler<>
+            // Map that unknown type to the generic types defined in this class
+            ParameterizedType superClassType =
+                    (ParameterizedType) clazz.getGenericSuperclass();
+            return getTypeParameter(clazz,
+                    superClassType.getActualTypeArguments()[
+                            ((Integer) result).intValue()]);
+        } else {
+            // Error will be logged further up the call stack
+            return null;
+        }
+    }
+
+
+    /*
+     * For a generic parameter, return either the Class used or if the type
+     * is unknown, the index for the type in definition of the class
+     */
+    private static Object getTypeParameter(Class<?> clazz, Type argType) {
+        if (argType instanceof Class<?>) {
+            return argType;
+        } else {
+            TypeVariable<?>[] tvs = clazz.getTypeParameters();
+            for (int i = 0; i < tvs.length; i++) {
+                if (tvs[i].equals(argType)) {
+                    return Integer.valueOf(i);
+                }
+            }
+            return null;
+        }
+    }
 }

==================================================
TestUtil.java
index 9b5e506ed8..9b1ee88730 100644
--- a/java/org/apache/tomcat/websocket/WsSession.java
+++ b/java/org/apache/tomcat/websocket/WsSession.java
@@ -17,9 +17,7 @@
 package org.apache.tomcat.websocket;
 
 import java.io.IOException;
-import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
-import java.lang.reflect.TypeVariable;
 import java.net.URI;
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
@@ -120,7 +118,7 @@ public class WsSession implements Session {
     @SuppressWarnings("unchecked")
     @Override
     public void addMessageHandler(MessageHandler listener) {
-        Type t = getMessageType(listener);
+        Type t = Util.getMessageType(listener);
 
         if (t.equals(String.class)) {
             if (textMessageHandler != null) {
@@ -406,73 +404,4 @@ public class WsSession implements Session {
     }
 
     // Protected so unit tests can use it
-    protected static Class<?> getMessageType(MessageHandler listener) {
-        return (Class<?>) getGenericType(listener.getClass());
-    }
-
-
-    private static Object getGenericType(Class<? extends MessageHandler> clazz) {
-
-        // Look to see if this class implements the generic MessageHandler<>
-        // interface
-
-        // Get all the interfaces
-        Type[] interfaces = clazz.getGenericInterfaces();
-        for (Type iface : interfaces) {
-            // Only need to check interfaces that use generics
-            if (iface instanceof ParameterizedType) {
-                ParameterizedType pi = (ParameterizedType) iface;
-                // Look for the MessageHandler<> interface
-                if (pi.getRawType() instanceof Class) {
-                    if (MessageHandler.class.isAssignableFrom(
-                            (Class<?>) pi.getRawType())) {
-                        return getTypeParameter(
-                                clazz, pi.getActualTypeArguments()[0]);
-                    }
-                }
-            }
-        }
-
-        // Interface not found on this class. Look at the superclass.
-        Class<? extends MessageHandler> superClazz =
-                (Class<? extends MessageHandler>) clazz.getSuperclass();
-
-        Object result = getGenericType(superClazz);
-        if (result instanceof Class<?>) {
-            // Superclass implements interface and defines explicit type for
-            // MessageHandler<>
-            return result;
-        } else if (result instanceof Integer) {
-            // Superclass implements interface and defines unknown type for
-            // MessageHandler<>
-            // Map that unknown type to the generic types defined in this class
-            ParameterizedType superClassType =
-                    (ParameterizedType) clazz.getGenericSuperclass();
-            return getTypeParameter(clazz,
-                    superClassType.getActualTypeArguments()[
-                            ((Integer) result).intValue()]);
-        } else {
-            // Error will be logged further up the call stack
-            return null;
-        }
-    }
-
-
-    /*
-     * For a generic parameter, return either the Class used or if the type
-     * is unknown, the index for the type in definition of the class
-     */
-    private static Object getTypeParameter(Class<?> clazz, Type argType) {
-        if (argType instanceof Class<?>) {
-            return argType;
-        } else {
-            TypeVariable<?>[] tvs = clazz.getTypeParameters();
-            for (int i = 0; i < tvs.length; i++) {
-                if (tvs[i].equals(argType)) {
-                    return Integer.valueOf(i);
-                }
-            }
-            return null;
-        }
-    }
 }

==================================================
