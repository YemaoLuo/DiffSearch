a3a43c95e973b1a7eb90d6579f179782157afcbc
==================================================
1. Implement a query timeout intercept to allow for timeouts to be set when statemements are created
==================================================
Filip Hanik
==================================================
Sun Nov 20 18:24:16 2011 +0000
==================================================
ConnectionPool.java
index 61c573b90d..eeab83829e 100644
--- a/modules/jdbc-pool/doc/jdbc-pool.xml
+++ b/modules/jdbc-pool/doc/jdbc-pool.xml
@@ -416,6 +416,17 @@
            logged and a JMX notification gets sent once.
       </p>
     </attribute>
+    <attribute name="rollbackOnReturn" required="false">
+      <p>(boolean) If <code>autoCommit==false</code> then the pool can terminate the transaction by calling rollback on the connection as it is returned to the pool 
+          Default value is <code>false</code>.<br/>
+      </p>
+    </attribute>
+    <attribute name="commitOnReturn" required="false">
+      <p>(boolean) If <code>autoCommit==false</code> then the pool can complete the transaction by calling commit on the connection as it is returned to the pool 
+          If <code>rollbackOnReturn==true</code> then this attribute is ignored.
+          Default value is <code>false</code>.<br/>
+      </p>
+    </attribute>
     <attribute name="alternateUsernameAllowed" required="false">
       <p>(boolean) By default, the jdbc-pool will ignore the
          <a href="http://download.oracle.com/javase/6/docs/api/javax/sql/DataSource.html#getConnection(java.lang.String,%20java.lang.String)"><code>DataSource.getConnection(username,password)</code></a>
@@ -504,6 +515,18 @@
     <attributes>
     </attributes>
   </subsection>
+  <subsection name="org.apache.tomcat.jdbc.pool.interceptor.QueryTimeoutInterceptor">
+    <p>Automatically calls java.sql.Statement.setQueryTimeout(seconds) when a new statement is created.
+       The pool itself doesn't timeout the query, it is still up to the JDBC driver to enforce query timeouts.
+    </p>   
+    <attributes>
+      <attribute name="queryTimeout" required="true">
+        <p>(int as String) The number of seconds to set for the query timeout
+           The default value is <code>1000</code> milliseconds.
+        </p>
+      </attribute>
+    </attributes>  
+  </subsection>
   <subsection name="org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReport">
     <p>Keeps track of query performance and issues log entries when queries exceed a time threshold of fail.
        The log level used is <code>WARN</code>

==================================================
DataSourceProxy.java
index 2814cd000a..98cc3b78b8 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -777,6 +777,28 @@ public class ConnectionPool {
             }
         }
     }
+    /**
+     * return true if the connection TX termination succeeded
+     * @param con
+     * @return
+     */
+    protected boolean terminateTransaction(PooledConnection con) {
+        try {
+            boolean autocommit = con.getConnection().getAutoCommit();
+            if (!autocommit) {
+                if (this.getPoolProperties().getRollbackOnReturn()) {
+                    con.getConnection().rollback();
+                } else if (this.getPoolProperties().getCommitOnReturn()) {
+                    con.getConnection().commit();
+                }
+            }
+            return true;
+        } catch (SQLException x) {
+            log.warn("Unable to terminate transaction, connection will be closed.",x);
+            return false;
+        }
+        
+    }
 
     /**
      * Determines if a connection should be closed upon return to the pool.
@@ -788,6 +810,7 @@ public class ConnectionPool {
         if (con.isDiscarded()) return true;
         if (isClosed()) return true;
         if (!con.validate(action)) return true;
+        if (!terminateTransaction(con)) return true;
         if (getPoolProperties().getMaxAge()>0 ) {
             return (System.currentTimeMillis()-con.getLastConnected()) > getPoolProperties().getMaxAge();
         } else {

==================================================
PoolConfiguration.java
index 6d29230c53..1fc9868428 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
@@ -1194,4 +1194,32 @@ public class DataSourceProxy implements PoolConfiguration {
         getPoolProperties().setAlternateUsernameAllowed(alternateUsernameAllowed);
     }
 
+    /** 
+     * {@inheritDoc}
+     */
+    public void setCommitOnReturn(boolean commitOnReturn) {
+        getPoolProperties().setCommitOnReturn(commitOnReturn);
+    }
+
+    /** 
+     * {@inheritDoc}
+     */
+    public boolean getCommitOnReturn() {
+        return getPoolProperties().getCommitOnReturn();
+    }
+
+    /** 
+     * {@inheritDoc}
+     */
+    public void setRollbackOnReturn(boolean rollbackOnReturn) {
+        getPoolProperties().setRollbackOnReturn(rollbackOnReturn);
+    }
+
+    /** 
+     * {@inheritDoc}
+     */
+    public boolean getRollbackOnReturn() {
+        return getPoolProperties().getRollbackOnReturn();
+    }
+    
 }

==================================================
PoolProperties.java
index e02060f29e..5893754315 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java
@@ -793,6 +793,34 @@ public interface PoolConfiguration {
      * false if it is to be ignored.
      */
     public void setAlternateUsernameAllowed(boolean alternateUsernameAllowed);
+    /**
+     * Set to true if you want the connection pool to commit any pending transaction when a connection is returned.
+     * The default value is false, as this could result in committing data.
+     * This parameter is only looked at if the {@link java.sql.Connection#getAutoCommit()} returns false
+     * @param commitOnReturn set to true if the pool should call {@link java.sql.Connection#commit()} when a connection is returned to the pool. 
+     * Default is false 
+     */
+    public void setCommitOnReturn(boolean commitOnReturn);
+    
+    /**
+     * @see {@link PoolConfiguration#setCommitOnReturn(boolean)}
+     * @return
+     */
+    public boolean getCommitOnReturn();
+    
+    /**
+     * Set to true if you want the connection pool to rollback any pending transaction when a connection is returned.
+     * The default value is false, as this could result in committing data.
+     * This parameter is only looked at if the {@link java.sql.Connection#getAutoCommit()} returns false
+     * @param rollbackOnReturn set to true if the pool should call {@link java.sql.Connection#rollback()} when a connection is returned to the pool. 
+     * Default is false 
+     */
+    public void setRollbackOnReturn(boolean rollbackOnReturn);
+    
+    /**
+     * @see {@link PoolConfiguration#setRollbackOnReturn(boolean)}
+     * @return
+     */
+    public boolean getRollbackOnReturn();
 
-
-}
\ No newline at end of file
+}

==================================================
QueryTimeoutInterceptor.java
index 6072c3c53b..e6b56016e7 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
@@ -83,12 +83,13 @@ public class PoolProperties implements PoolConfiguration {
     protected Object dataSource = null;
     protected String dataSourceJNDI = null;
     protected boolean alternateUsernameAllowed = false;
-
-
+    protected boolean commitOnReturn = false;
+    protected boolean rollbackOnReturn = false;
+    
+    
     /**
      * {@inheritDoc}
      */
-
     @Override
     public void setAbandonWhenPercentageFull(int percentage) {
         if (percentage<0) abandonWhenPercentageFull = 0;
@@ -99,7 +100,6 @@ public class PoolProperties implements PoolConfiguration {
     /**
      * {@inheritDoc}
      */
-
     @Override
     public int getAbandonWhenPercentageFull() {
         return abandonWhenPercentageFull;
@@ -108,7 +108,6 @@ public class PoolProperties implements PoolConfiguration {
     /**
      * {@inheritDoc}
      */
-
     @Override
     public boolean isFairQueue() {
         return fairQueue;
@@ -117,7 +116,6 @@ public class PoolProperties implements PoolConfiguration {
     /**
      * {@inheritDoc}
      */
-
     @Override
     public void setFairQueue(boolean fairQueue) {
         this.fairQueue = fairQueue;
@@ -126,7 +124,6 @@ public class PoolProperties implements PoolConfiguration {
     /**
      * {@inheritDoc}
      */
-
     @Override
     public boolean isAccessToUnderlyingConnectionAllowed() {
         return accessToUnderlyingConnectionAllowed;
@@ -1164,4 +1161,32 @@ public class PoolProperties implements PoolConfiguration {
         this.alternateUsernameAllowed = alternateUsernameAllowed;
     }
 
+
+    /** 
+     * {@inheritDoc}
+     */
+    public void setCommitOnReturn(boolean commitOnReturn) {
+        this.commitOnReturn = commitOnReturn;        
+    }
+
+    /** 
+     * {@inheritDoc}
+     */
+    public boolean getCommitOnReturn() {
+        return this.commitOnReturn;
+    }
+
+    /** 
+     * {@inheritDoc}
+     */
+    public void setRollbackOnReturn(boolean rollbackOnReturn) {
+        this.rollbackOnReturn = rollbackOnReturn;
+    }
+
+    /** 
+     * {@inheritDoc}
+     */
+    public boolean getRollbackOnReturn() {
+        return this.rollbackOnReturn;
+    }
 }

==================================================
ConnectionPool.java
new file mode 100644
index 0000000000..64c06710e0
--- /dev/null
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/QueryTimeoutInterceptor.java
@@ -0,0 +1,39 @@
+package org.apache.tomcat.jdbc.pool.interceptor;
+
+import java.lang.reflect.Method;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.util.Map;
+
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.jdbc.pool.PoolProperties.InterceptorProperty;
+
+public class QueryTimeoutInterceptor extends AbstractCreateStatementInterceptor {
+    private static Log log = LogFactory.getLog(QueryTimeoutInterceptor.class);
+    int timeout;
+    
+    @Override
+    public void setProperties(Map<String,InterceptorProperty> properties) {
+        super.setProperties(properties);
+        timeout = properties.get("queryTimeout").getValueAsInt(-1);
+    }
+
+    @Override
+    public Object createStatement(Object proxy, Method method, Object[] args, Object statement, long time) {
+        if (statement instanceof Statement && timeout > 0) {
+            Statement s = (Statement)statement;
+            try {
+                s.setQueryTimeout(timeout);
+            }catch (SQLException x) {
+                log.warn("[QueryTimeoutInterceptor] Unable to set query timeout:"+x.getMessage(),x);
+            }
+        }
+        return statement;
+    }
+
+    @Override
+    public void closeInvoked() {
+    }
+
+}

==================================================
TestQueryTimeoutInterceptor.java
index 1672aac1f3..ea93db0994 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java
@@ -744,7 +744,34 @@ public class ConnectionPool extends NotificationBroadcasterSupport implements Co
     public void setValidator(Validator validator) {
         //noop
     }
+    
+    /** 
+     * {@inheritDoc}
+     */
+    public void setCommitOnReturn(boolean commitOnReturn) {
+        getPoolProperties().setCommitOnReturn(commitOnReturn);
+    }
 
+    /** 
+     * {@inheritDoc}
+     */
+    public boolean getCommitOnReturn() {
+        return getPoolProperties().getCommitOnReturn();
+    }
 
+    /** 
+     * {@inheritDoc}
+     */
+    public void setRollbackOnReturn(boolean rollbackOnReturn) {
+        getPoolProperties().setRollbackOnReturn(rollbackOnReturn);
+    }
+
+    /** 
+     * {@inheritDoc}
+     */
+    public boolean getRollbackOnReturn() {
+        return getPoolProperties().getRollbackOnReturn();
+    }
+    
 
 }

==================================================
Statement.java
new file mode 100644
index 0000000000..d4de44d5af
--- /dev/null
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestQueryTimeoutInterceptor.java
@@ -0,0 +1,66 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package org.apache.tomcat.jdbc.test;
+
+import java.sql.Connection;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.util.Arrays;
+import java.util.List;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+
+import javax.sql.PooledConnection;
+
+
+import org.apache.tomcat.jdbc.pool.interceptor.QueryTimeoutInterceptor;
+import org.apache.tomcat.jdbc.test.driver.Driver;
+
+
+public class TestQueryTimeoutInterceptor extends DefaultTestCase {
+
+    private static final int iterations = 500000; //(new Random(System.currentTimeMillis())).nextInt(1000000)+100000;
+    public TestQueryTimeoutInterceptor(String name) {
+        super(name);
+    }
+    
+    public void testTimeout() throws Exception {
+        long start = System.currentTimeMillis();
+        int timeout = 10;
+        int withoutuser =10;
+        int withuser = withoutuser;
+        this.init();
+        this.datasource.setMaxActive(withuser+withoutuser);
+        this.datasource.setJdbcInterceptors(QueryTimeoutInterceptor.class.getName()+"(queryTimeout="+timeout+")");
+        this.datasource.setDriverClassName(Driver.class.getName());
+        this.datasource.setUrl("jdbc:tomcat:test");
+        Connection con = this.datasource.getConnection();
+        Statement st = con.createStatement();
+        assertEquals(st.getClass().getName(),timeout,st.getQueryTimeout());
+        st.close();
+        st = con.prepareStatement("");
+        assertEquals(st.getClass().getName(),timeout,st.getQueryTimeout());
+        st.close();
+        st = con.prepareCall("");
+        assertEquals(st.getClass().getName(),timeout,st.getQueryTimeout());
+        st.close();
+        con.close();
+    }
+}

==================================================
