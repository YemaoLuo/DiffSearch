1c35c6dbd5f158f62a63c428f09537c876bd3735
==================================================
Place data holder rather than CrawlerSessionManagerValve in session
==================================================
Mark Thomas
==================================================
Wed May 1 11:43:03 2019 +0100
==================================================
CrawlerSessionManagerValve.java
Place data holder rather than CrawlerSessionManagerValve in session

Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63324
Refactor the CrawlerSessionManagerValve so that the object placed in the
session is compatible with session serialization with mem-cached.
Patch provided by Martin Lemanski.


==================================================
TestCrawlerSessionManagerValve.java
index a268d4b426..0a7968d414 100644
--- a/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java
+++ b/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java
@@ -17,6 +17,7 @@
 package org.apache.catalina.valves;
 
 import java.io.IOException;
+import java.io.Serializable;
 import java.util.Enumeration;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
@@ -42,7 +43,7 @@ import org.apache.juli.logging.LogFactory;
  * users - regardless of whether or not they provide a session token with their
  * requests.
  */
-public class CrawlerSessionManagerValve extends ValveBase implements HttpSessionBindingListener {
+public class CrawlerSessionManagerValve extends ValveBase {
 
     private static final Log log = LogFactory.getLog(CrawlerSessionManagerValve.class);
 
@@ -241,7 +242,8 @@ public class CrawlerSessionManagerValve extends ValveBase implements HttpSession
                     clientIdSessionId.put(clientIdentifier, s.getId());
                     sessionIdClientId.put(s.getId(), clientIdentifier);
                     // #valueUnbound() will be called on session expiration
-                    s.setAttribute(this.getClass().getName(), this);
+                    s.setAttribute(this.getClass().getName(),
+                            new CrawlerHttpSessionBindingListener(clientIdSessionId, clientIdentifier));
                     s.setMaxInactiveInterval(sessionInactiveInterval);
 
                     if (log.isDebugEnabled()) {
@@ -269,12 +271,22 @@ public class CrawlerSessionManagerValve extends ValveBase implements HttpSession
         return result.toString();
     }
 
+    private static class CrawlerHttpSessionBindingListener implements HttpSessionBindingListener, Serializable {
+        private static final long serialVersionUID = 1L;
 
-    @Override
-    public void valueUnbound(HttpSessionBindingEvent event) {
-        String clientIdentifier = sessionIdClientId.remove(event.getSession().getId());
-        if (clientIdentifier != null) {
-            clientIdSessionId.remove(clientIdentifier);
+        private final transient Map<String, String> clientIdSessionId;
+        private final transient String clientIdentifier;
+
+        private CrawlerHttpSessionBindingListener(Map<String, String> clientIdSessionId, String clientIdentifier) {
+            this.clientIdSessionId = clientIdSessionId;
+            this.clientIdentifier = clientIdentifier;
+        }
+
+        @Override
+        public void valueUnbound(HttpSessionBindingEvent event) {
+            if (clientIdentifier != null && clientIdSessionId != null) {
+                clientIdSessionId.remove(clientIdentifier, event.getSession().getId());
+            }
         }
     }
 }

==================================================
