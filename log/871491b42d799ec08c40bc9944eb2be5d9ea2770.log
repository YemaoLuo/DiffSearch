871491b42d799ec08c40bc9944eb2be5d9ea2770
==================================================
Javadoc fixes.
==================================================
Remy Maucherat
==================================================
Tue Jan 12 13:43:14 2016 +0000
==================================================
ContainerMBean.java
Javadoc fixes.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1724232 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ContextMBean.java
index 2b55528ad7..3911671f35 100644
--- a/java/org/apache/catalina/mbeans/ContainerMBean.java
+++ b/java/org/apache/catalina/mbeans/ContainerMBean.java
@@ -118,6 +118,7 @@ public class ContainerMBean extends BaseModelMBean {
      * Container.
      *
      * @param name Name of the existing child Container to be removed
+     * @throws MBeanException if the child cannot be removed
      */
     public void removeChild(String name) throws MBeanException{
         if(name != null){
@@ -139,8 +140,8 @@ public class ContainerMBean extends BaseModelMBean {
      * Adds a valve to this Container instance.
      *
      * @param valveType ClassName of the valve to be added
-     *
-     * @exception MBeanException if a component cannot be removed
+     * @return the MBean name of the new valve
+     * @throws MBeanException if adding the valve failed
      */
     public String addValve(String valveType) throws MBeanException{
         Valve valve = null;
@@ -222,7 +223,8 @@ public class ContainerMBean extends BaseModelMBean {
      * Add a LifecycleEvent listener to this component.
      *
      * @param type ClassName of the listener to add
-     */
+     * @throws MBeanException if adding the listener failed
+    */
     public void addLifecycleListener(String type) throws MBeanException{
         LifecycleListener listener = null;
         try {
@@ -254,6 +256,7 @@ public class ContainerMBean extends BaseModelMBean {
      *
      * @param type The ClassName of the listeners to be removed.
      * Note that all the listeners having given ClassName will be removed.
+     * @throws MBeanException propagated from the managed resource access
      */
     public void removeLifecycleListeners(String type) throws MBeanException{
         Container container=null;
@@ -279,6 +282,8 @@ public class ContainerMBean extends BaseModelMBean {
     /**
      * List the class name of each of the lifecycle listeners added to this
      * container.
+     * @return the lifecycle listeners class names
+     * @throws MBeanException propagated from the managed resource access
      */
     public String[] findLifecycleListenerNames() throws MBeanException {
         Container container = null;
@@ -306,6 +311,8 @@ public class ContainerMBean extends BaseModelMBean {
     /**
      * List the class name of each of the container listeners added to this
      * container.
+     * @return the container listeners class names
+     * @throws MBeanException propagated from the managed resource access
      */
     public String[] findContainerListenerNames() throws MBeanException {
         Container container = null;

==================================================
GroupMBean.java
index 6e0124c33f..1b407048b0 100644
--- a/java/org/apache/catalina/mbeans/ContextMBean.java
+++ b/java/org/apache/catalina/mbeans/ContextMBean.java
@@ -38,6 +38,8 @@ public class ContextMBean extends ContainerMBean {
 
      /**
      * Return the set of application parameters for this application.
+     * @return a string array with a representation of each parameter
+     * @throws MBeanException propagated from the managed resource access
      */
     public String[] findApplicationParameters() throws MBeanException {
 
@@ -65,6 +67,9 @@ public class ContextMBean extends ContainerMBean {
     /**
      * Return the security constraints for this web application.
      * If there are none, a zero-length array is returned.
+     * @return a string array with a representation of each
+     *  security constraint
+     * @throws MBeanException propagated from the managed resource access
      */
     public String[] findConstraints() throws MBeanException {
 
@@ -94,6 +99,8 @@ public class ContextMBean extends ContainerMBean {
      * if any; otherwise return <code>null</code>.
      *
      * @param errorCode Error code to look up
+     * @return a string representation of the error page
+     * @throws MBeanException propagated from the managed resource access
      */
     public String findErrorPage(int errorCode) throws MBeanException {
 
@@ -117,6 +124,8 @@ public class ContextMBean extends ContainerMBean {
      * if any; otherwise return <code>null</code>.
      *
      * @param exceptionType Exception type to look up
+     * @return a string representation of the error page
+     * @throws MBeanException propagated from the managed resource access
      */
     public String findErrorPage(String exceptionType) throws MBeanException {
 
@@ -138,6 +147,8 @@ public class ContextMBean extends ContainerMBean {
     /**
      * Return the set of defined error pages for all specified error codes
      * and exception types.
+     * @return a string array with a representation of each error page
+     * @throws MBeanException propagated from the managed resource access
      */
     public String[] findErrorPages() throws MBeanException {
 
@@ -167,6 +178,8 @@ public class ContextMBean extends ContainerMBean {
      * otherwise return <code>null</code>.
      *
      * @param name Filter name to look up
+     * @return a string representation of the filter definition
+     * @throws MBeanException propagated from the managed resource access
      */
     public String findFilterDef(String name) throws MBeanException {
 
@@ -188,6 +201,9 @@ public class ContextMBean extends ContainerMBean {
 
     /**
      * Return the set of defined filters for this Context.
+     * @return a string array with a representation of all
+     *  the filter definitions
+     * @throws MBeanException propagated from the managed resource access
      */
     public String[] findFilterDefs() throws MBeanException {
 
@@ -214,6 +230,8 @@ public class ContextMBean extends ContainerMBean {
 
     /**
      * Return the set of filter mappings for this Context.
+     * @return a string array with a representation of all the filter mappings
+     * @throws MBeanException propagated from the managed resource access
      */
     public String[] findFilterMaps() throws MBeanException {
 

==================================================
MBeanDumper.java
index ddf91f2054..472f4b2121 100644
--- a/java/org/apache/catalina/mbeans/GroupMBean.java
+++ b/java/org/apache/catalina/mbeans/GroupMBean.java
@@ -81,7 +81,7 @@ public class GroupMBean extends BaseModelMBean {
 
 
     /**
-     * Return the MBean Names of all authorized roles for this group.
+     * @return the MBean Names of all authorized roles for this group.
      */
     public String[] getRoles() {
 
@@ -108,7 +108,7 @@ public class GroupMBean extends BaseModelMBean {
 
 
     /**
-     * Return the MBean Names of all users that are members of this group.
+     * @return the MBean Names of all users that are members of this group.
      */
     public String[] getUsers() {
 

==================================================
MBeanFactory.java
index ac3be45e06..5f95199fcd 100644
--- a/java/org/apache/catalina/mbeans/MBeanDumper.java
+++ b/java/org/apache/catalina/mbeans/MBeanDumper.java
@@ -42,7 +42,9 @@ public class MBeanDumper {
 
     /**
      * The following code to dump MBeans has been copied from JMXProxyServlet.
-     *
+     * @param mbeanServer the MBean server
+     * @param names a set of object names for which to dump the info
+     * @return a string representation of the MBeans
      */
     public static String dumpBeans(MBeanServer mbeanServer, Set<ObjectName> names)
     {

==================================================
MBeanUtils.java
index cdd7074c54..b986fd012a 100644
--- a/java/org/apache/catalina/mbeans/MBeanFactory.java
+++ b/java/org/apache/catalina/mbeans/MBeanFactory.java
@@ -76,6 +76,7 @@ public class MBeanFactory {
 
     /**
      * Set the container that this factory was created for.
+     * @param container The associated container
      */
     public void setContainer(Object container) {
         this.container = container;
@@ -192,6 +193,7 @@ public class MBeanFactory {
      * @param parent MBean Name of the associated parent component
      * @param address The IP address on which to bind
      * @param port TCP port number to listen on
+     * @return the object name of the created connector
      *
      * @exception Exception if an MBean cannot be created or registered
      */
@@ -205,7 +207,13 @@ public class MBeanFactory {
      * Create a new DataSource Realm.
      *
      * @param parent MBean Name of the associated parent component
-     *
+     * @param dataSourceName the datasource name
+     * @param roleNameCol the column name for the role names
+     * @param userCredCol the column name for the user credentials
+     * @param userNameCol the column name for the user names
+     * @param userRoleTable the table name for the roles table
+     * @param userTable the table name for the users
+     * @return the object name of the created realm
      * @exception Exception if an MBean cannot be created or registered
      */
     public String createDataSourceRealm(String parent, String dataSourceName,
@@ -242,6 +250,7 @@ public class MBeanFactory {
      * @param parent MBean Name of the associated parent component
      * @param address The IP address on which to bind
      * @param port TCP port number to listen on
+     * @return the object name of the created connector
      *
      * @exception Exception if an MBean cannot be created or registered
      */
@@ -293,6 +302,7 @@ public class MBeanFactory {
      * @param parent MBean Name of the associated parent component
      * @param address The IP address on which to bind
      * @param port TCP port number to listen on
+     * @return the object name of the created connector
      *
      * @exception Exception if an MBean cannot be created or registered
      */
@@ -305,6 +315,11 @@ public class MBeanFactory {
      * Create a new JDBC Realm.
      *
      * @param parent MBean Name of the associated parent component
+     * @param driverName JDBC driver name
+     * @param connectionName the user name for the connection
+     * @param connectionPassword the password for the connection
+     * @param connectionURL the connection URL to the database
+     * @return the object name of the created realm
      *
      * @exception Exception if an MBean cannot be created or registered
      */
@@ -340,6 +355,7 @@ public class MBeanFactory {
      * Create a new JNDI Realm.
      *
      * @param parent MBean Name of the associated parent component
+     * @return the object name of the created realm
      *
      * @exception Exception if an MBean cannot be created or registered
      */
@@ -371,6 +387,7 @@ public class MBeanFactory {
      * Create a new Memory Realm.
      *
      * @param parent MBean Name of the associated parent component
+     * @return the object name of the created realm
      *
      * @exception Exception if an MBean cannot be created or registered
      */
@@ -402,6 +419,7 @@ public class MBeanFactory {
      * @param parent MBean Name of the associated parent component
      * @param path The context path for this Context
      * @param docBase Document base directory (or WAR) for this Context
+     * @return the object name of the created context
      *
      * @exception Exception if an MBean cannot be created or registered
      */
@@ -422,6 +440,7 @@ public class MBeanFactory {
      * @param docBase Document base directory (or WAR) for this Context
      * @param xmlValidation if XML descriptors should be validated
      * @param xmlNamespaceAware if the XML processor should namespace aware
+     * @return the object name of the created context
      *
      * @exception Exception if an MBean cannot be created or registered
      */
@@ -490,6 +509,7 @@ public class MBeanFactory {
      * @param deployOnStartup Deploy on server startup?
      * @param deployXML Should we deploy Context XML config files property?
      * @param unpackWARs Should we unpack WARs when auto deploying?
+     * @return the object name of the created host
      *
      * @exception Exception if an MBean cannot be created or registered
      */
@@ -532,6 +552,7 @@ public class MBeanFactory {
      * @param domain       Domain name for the container instance
      * @param defaultHost  Name of the default host to be used in the Engine
      * @param baseDir      Base directory value for Engine
+     * @return the object name of the created service
      *
      * @exception Exception if an MBean cannot be created or registered
      */
@@ -561,6 +582,7 @@ public class MBeanFactory {
      * Create a new StandardManager.
      *
      * @param parent MBean Name of the associated parent component
+     * @return the object name of the created manager
      *
      * @exception Exception if an MBean cannot be created or registered
      */
@@ -594,6 +616,7 @@ public class MBeanFactory {
      * @param parent MBean Name of the associated parent component
      * @param resourceName Global JNDI resource name of the associated
      *  UserDatabase
+     * @return the object name of the created realm
      *
      * @exception Exception if an MBean cannot be created or registered
      */
@@ -634,6 +657,7 @@ public class MBeanFactory {
      * @return  The MBean name of the {@link Valve} that was created or
      *          <code>null</code> if the {@link Valve} does not implement
      *          {@link JmxEnabled}.
+     * @exception Exception if an MBean cannot be created or registered
      */
     public String createValve(String className, String parent)
             throws Exception {
@@ -663,6 +687,7 @@ public class MBeanFactory {
      * Create a new Web Application Loader.
      *
      * @param parent MBean Name of the associated parent component
+     * @return the object name of the created loader
      *
      * @exception Exception if an MBean cannot be created or registered
      */

==================================================
MemoryUserDatabaseMBean.java
index 6f14f2ec16..765424ccd9 100644
--- a/java/org/apache/catalina/mbeans/MBeanUtils.java
+++ b/java/org/apache/catalina/mbeans/MBeanUtils.java
@@ -109,7 +109,7 @@ public class MBeanUtils {
      * <code>ContextEnvironment</code> object.
      *
      * @param environment The ContextEnvironment to be managed
-     *
+     * @return a new MBean
      * @exception Exception if an MBean cannot be created or registered
      */
     public static DynamicMBean createMBean(ContextEnvironment environment)
@@ -140,7 +140,7 @@ public class MBeanUtils {
      * <code>ContextResource</code> object.
      *
      * @param resource The ContextResource to be managed
-     *
+     * @return a new MBean
      * @exception Exception if an MBean cannot be created or registered
      */
     public static DynamicMBean createMBean(ContextResource resource)
@@ -171,7 +171,7 @@ public class MBeanUtils {
      * <code>ContextResourceLink</code> object.
      *
      * @param resourceLink The ContextResourceLink to be managed
-     *
+     * @return a new MBean
      * @exception Exception if an MBean cannot be created or registered
      */
     public static DynamicMBean createMBean(ContextResourceLink resourceLink)
@@ -202,7 +202,7 @@ public class MBeanUtils {
      * <code>Group</code> object.
      *
      * @param group The Group to be managed
-     *
+     * @return a new MBean
      * @exception Exception if an MBean cannot be created or registered
      */
     static DynamicMBean createMBean(Group group)
@@ -233,7 +233,7 @@ public class MBeanUtils {
      * <code>Role</code> object.
      *
      * @param role The Role to be managed
-     *
+     * @return a new MBean
      * @exception Exception if an MBean cannot be created or registered
      */
     static DynamicMBean createMBean(Role role)
@@ -264,7 +264,7 @@ public class MBeanUtils {
      * <code>User</code> object.
      *
      * @param user The User to be managed
-     *
+     * @return a new MBean
      * @exception Exception if an MBean cannot be created or registered
      */
     static DynamicMBean createMBean(User user)
@@ -295,7 +295,7 @@ public class MBeanUtils {
      * <code>UserDatabase</code> object.
      *
      * @param userDatabase The UserDatabase to be managed
-     *
+     * @return a new MBean
      * @exception Exception if an MBean cannot be created or registered
      */
     static DynamicMBean createMBean(UserDatabase userDatabase)
@@ -327,7 +327,7 @@ public class MBeanUtils {
      *
      * @param domain Domain in which this name is to be created
      * @param environment The ContextEnvironment to be named
-     *
+     * @return a new object name
      * @exception MalformedObjectNameException if a name cannot be created
      */
     public static ObjectName createObjectName(String domain,
@@ -360,7 +360,7 @@ public class MBeanUtils {
      *
      * @param domain Domain in which this name is to be created
      * @param resource The ContextResource to be named
-     *
+     * @return a new object name
      * @exception MalformedObjectNameException if a name cannot be created
      */
     public static ObjectName createObjectName(String domain,
@@ -397,7 +397,7 @@ public class MBeanUtils {
      *
      * @param domain Domain in which this name is to be created
      * @param resourceLink The ContextResourceLink to be named
-     *
+     * @return a new object name
      * @exception MalformedObjectNameException if a name cannot be created
      */
     public static ObjectName createObjectName(String domain,
@@ -434,7 +434,7 @@ public class MBeanUtils {
      *
      * @param domain Domain in which this name is to be created
      * @param group The Group to be named
-     *
+     * @return a new object name
      * @exception MalformedObjectNameException if a name cannot be created
      */
     static ObjectName createObjectName(String domain,
@@ -456,7 +456,7 @@ public class MBeanUtils {
      *
      * @param domain Domain in which this name is to be created
      * @param loader The Loader to be named
-     *
+     * @return a new object name
      * @exception MalformedObjectNameException if a name cannot be created
      */
     static ObjectName createObjectName(String domain, Loader loader)
@@ -480,7 +480,7 @@ public class MBeanUtils {
      *
      * @param domain Domain in which this name is to be created
      * @param role The Role to be named
-     *
+     * @return a new object name
      * @exception MalformedObjectNameException if a name cannot be created
      */
     static ObjectName createObjectName(String domain, Role role)
@@ -499,7 +499,7 @@ public class MBeanUtils {
      *
      * @param domain Domain in which this name is to be created
      * @param user The User to be named
-     *
+     * @return a new object name
      * @exception MalformedObjectNameException if a name cannot be created
      */
     static ObjectName createObjectName(String domain, User user)
@@ -518,7 +518,7 @@ public class MBeanUtils {
      *
      * @param domain Domain in which this name is to be created
      * @param userDatabase The UserDatabase to be named
-     *
+     * @return a new object name
      * @exception MalformedObjectNameException if a name cannot be created
      */
     static ObjectName createObjectName(String domain,
@@ -535,6 +535,7 @@ public class MBeanUtils {
     /**
      * Create and configure (if necessary) and return the registry of
      * managed object descriptions.
+     * @return the singleton registry
      */
     public static synchronized Registry createRegistry() {
 
@@ -567,6 +568,7 @@ public class MBeanUtils {
      * Create and configure (if necessary) and return the
      * <code>MBeanServer</code> with which we will be
      * registering our <code>DynamicMBean</code> implementations.
+     * @return the singleton MBean server
      */
     public static synchronized MBeanServer createServer() {
 

==================================================
NamingResourcesMBean.java
index 3a10fa97de..d0636aa57c 100644
--- a/java/org/apache/catalina/mbeans/MemoryUserDatabaseMBean.java
+++ b/java/org/apache/catalina/mbeans/MemoryUserDatabaseMBean.java
@@ -104,7 +104,7 @@ public class MemoryUserDatabaseMBean extends BaseModelMBean {
 
 
     /**
-     * Return the MBean Names of all groups defined in this database.
+     * @return the MBean Names of all groups defined in this database.
      */
     public String[] getGroups() {
 
@@ -121,7 +121,7 @@ public class MemoryUserDatabaseMBean extends BaseModelMBean {
 
 
     /**
-     * Return the MBean Names of all roles defined in this database.
+     * @return the MBean Names of all roles defined in this database.
      */
     public String[] getRoles() {
 
@@ -138,7 +138,7 @@ public class MemoryUserDatabaseMBean extends BaseModelMBean {
 
 
     /**
-     * Return the MBean Names of all users defined in this database.
+     * @return the MBean Names of all users defined in this database.
      */
     public String[] getUsers() {
 
@@ -162,6 +162,7 @@ public class MemoryUserDatabaseMBean extends BaseModelMBean {
      *
      * @param groupname Group name of the new group
      * @param description Description of the new group
+     * @return the new group object name
      */
     public String createGroup(String groupname, String description) {
 
@@ -185,6 +186,7 @@ public class MemoryUserDatabaseMBean extends BaseModelMBean {
      *
      * @param rolename Group name of the new group
      * @param description Description of the new group
+     * @return the new role object name
      */
     public String createRole(String rolename, String description) {
 
@@ -209,6 +211,7 @@ public class MemoryUserDatabaseMBean extends BaseModelMBean {
      * @param username User name of the new user
      * @param password Password for the new user
      * @param fullName Full name for the new user
+     * @return the new user object name
      */
     public String createUser(String username, String password,
                              String fullName) {
@@ -233,6 +236,7 @@ public class MemoryUserDatabaseMBean extends BaseModelMBean {
      * otherwise return <code>null</code>.
      *
      * @param groupname Group name to look up
+     * @return the group object name
      */
     public String findGroup(String groupname) {
 
@@ -260,6 +264,7 @@ public class MemoryUserDatabaseMBean extends BaseModelMBean {
      * otherwise return <code>null</code>.
      *
      * @param rolename Role name to look up
+     * @return the role object name
      */
     public String findRole(String rolename) {
 
@@ -287,6 +292,7 @@ public class MemoryUserDatabaseMBean extends BaseModelMBean {
      * otherwise return <code>null</code>.
      *
      * @param username User name to look up
+     * @return the user object name
      */
     public String findUser(String username) {
 

==================================================
ServiceMBean.java
index 184dc109c6..4169bbbc30 100644
--- a/java/org/apache/catalina/mbeans/NamingResourcesMBean.java
+++ b/java/org/apache/catalina/mbeans/NamingResourcesMBean.java
@@ -81,6 +81,7 @@ public class NamingResourcesMBean extends BaseModelMBean {
     /**
      * Return the MBean Names of the set of defined environment entries for
      * this web application
+     * @return an array of object names as strings
      */
     public String[] getEnvironments() {
         ContextEnvironment[] envs =
@@ -106,6 +107,7 @@ public class NamingResourcesMBean extends BaseModelMBean {
     /**
      * Return the MBean Names of all the defined resource references for this
      * application.
+     * @return an array of object names as strings
      */
     public String[] getResources() {
 
@@ -132,6 +134,7 @@ public class NamingResourcesMBean extends BaseModelMBean {
     /**
      * Return the MBean Names of all the defined resource link references for
      * this application.
+     * @return an array of object names as strings
      */
     public String[] getResourceLinks() {
 
@@ -163,6 +166,8 @@ public class NamingResourcesMBean extends BaseModelMBean {
      * @param envName New environment entry name
      * @param type The type of the new environment entry
      * @param value The value of the new environment entry
+     * @return the object name of the new environment entry
+     * @throws MalformedObjectNameException if the object name was invalid
      */
     public String addEnvironment(String envName, String type, String value)
         throws MalformedObjectNameException {
@@ -196,6 +201,8 @@ public class NamingResourcesMBean extends BaseModelMBean {
      *
      * @param resourceName New resource reference name
      * @param type New resource reference type
+     * @return the object name of the new resource
+     * @throws MalformedObjectNameException if the object name was invalid
      */
     public String addResource(String resourceName, String type)
         throws MalformedObjectNameException {
@@ -227,6 +234,8 @@ public class NamingResourcesMBean extends BaseModelMBean {
      *
      * @param resourceLinkName New resource link reference name
      * @param type New resource link reference type
+     * @return the object name of the new resource link
+     * @throws MalformedObjectNameException if the object name was invalid
      */
     public String addResourceLink(String resourceLinkName, String type)
         throws MalformedObjectNameException {

==================================================
UserMBean.java
index 8f10e54078..0aad7652c7 100644
--- a/java/org/apache/catalina/mbeans/ServiceMBean.java
+++ b/java/org/apache/catalina/mbeans/ServiceMBean.java
@@ -45,7 +45,7 @@ public class ServiceMBean extends BaseModelMBean {
      * @param isAjp Create a AJP/1.3 Connector
      * @param isSSL Create a secure Connector
      *
-     * @throws MBeanException
+     * @throws MBeanException error creating the connector
      */
     public void addConnector(String address, int port, boolean isAjp, boolean isSSL) throws MBeanException {
 
@@ -75,7 +75,7 @@ public class ServiceMBean extends BaseModelMBean {
     /**
      * Adds a named executor to the service
      * @param type Classname of the Executor to be added
-     * @throws MBeanException
+     * @throws MBeanException error creating the executor
      */
     public void addExecutor(String type) throws MBeanException {
 
@@ -107,7 +107,8 @@ public class ServiceMBean extends BaseModelMBean {
 
     /**
      * Find and return the set of Connectors associated with this Service.
-     * @throws MBeanException
+     * @return an array of string representations of the connectors
+     * @throws MBeanException error accessing the associated service
      */
     public String[] findConnectors() throws MBeanException {
 
@@ -134,8 +135,9 @@ public class ServiceMBean extends BaseModelMBean {
     }
 
     /**
-     * Retrieves all executors
-     * @throws MBeanException
+     * Retrieves all executors.
+     * @return an array of string representations of the executors
+     * @throws MBeanException error accessing the associated service
      */
     public String[] findExecutors() throws MBeanException {
 
@@ -163,7 +165,8 @@ public class ServiceMBean extends BaseModelMBean {
     /**
      * Retrieves executor by name
      * @param name Name of the executor to be retrieved
-     * @throws MBeanException
+     * @return a string representation of the executor
+     * @throws MBeanException error accessing the associated service
      */
     public String getExecutor(String name) throws MBeanException{
 

==================================================
CombinedRealm.java
index 477849bbef..0f64c8b355 100644
--- a/java/org/apache/catalina/mbeans/UserMBean.java
+++ b/java/org/apache/catalina/mbeans/UserMBean.java
@@ -82,7 +82,7 @@ public class UserMBean extends BaseModelMBean {
 
 
     /**
-     * Return the MBean Names of all groups this user is a member of.
+     * @return the MBean Names of all groups this user is a member of.
      */
     public String[] getGroups() {
 
@@ -109,7 +109,7 @@ public class UserMBean extends BaseModelMBean {
 
 
     /**
-     * Return the MBean Names of all roles assigned to this user.
+     * @return the MBean Names of all roles assigned to this user.
      */
     public String[] getRoles() {
 

==================================================
DataSourceRealm.java
index f6537201b2..f8e65e7635 100644
--- a/java/org/apache/catalina/realm/CombinedRealm.java
+++ b/java/org/apache/catalina/realm/CombinedRealm.java
@@ -58,6 +58,7 @@ public class CombinedRealm extends RealmBase {
     /**
      * Add a realm to the list of realms that will be used to authenticate
      * users.
+     * @param theRealm realm which should be wrapped by the combined realm
      */
     public void addRealm(Realm theRealm) {
         realms.add(theRealm);
@@ -71,7 +72,7 @@ public class CombinedRealm extends RealmBase {
 
 
     /**
-     * Return the set of Realms that this Realm is wrapping
+     * @return the set of Realms that this Realm is wrapping
      */
     public ObjectName[] getRealms() {
         ObjectName[] result = new ObjectName[realms.size()];
@@ -85,7 +86,7 @@ public class CombinedRealm extends RealmBase {
     }
 
     /**
-     * Return the list of Realms contained by this Realm.
+     * @return the list of Realms contained by this Realm.
      */
     public Realm[] getNestedRealms() {
         return realms.toArray(new Realm[0]);

==================================================
DigestCredentialHandlerBase.java
index 789b577509..220a812f5c 100644
--- a/java/org/apache/catalina/realm/DataSourceRealm.java
+++ b/java/org/apache/catalina/realm/DataSourceRealm.java
@@ -111,8 +111,7 @@ public class DataSourceRealm extends RealmBase {
 
 
     /**
-     * Return the name of the JNDI JDBC DataSource.
-     *
+     * @return the name of the JNDI JDBC DataSource.
      */
     public String getDataSourceName() {
         return dataSourceName;
@@ -128,7 +127,7 @@ public class DataSourceRealm extends RealmBase {
     }
 
     /**
-     * Return if the datasource will be looked up in the webapp JNDI Context.
+     * @return if the datasource will be looked up in the webapp JNDI Context.
      */
     public boolean getLocalDataSource() {
         return localDataSource;
@@ -145,8 +144,7 @@ public class DataSourceRealm extends RealmBase {
     }
 
     /**
-     * Return the column in the user role table that names a role.
-     *
+     * @return the column in the user role table that names a role.
      */
     public String getRoleNameCol() {
         return roleNameCol;
@@ -162,8 +160,7 @@ public class DataSourceRealm extends RealmBase {
     }
 
     /**
-     * Return the column in the user table that holds the user's credentials.
-     *
+     * @return the column in the user table that holds the user's credentials.
      */
     public String getUserCredCol() {
         return userCredCol;
@@ -179,8 +176,7 @@ public class DataSourceRealm extends RealmBase {
     }
 
     /**
-     * Return the column in the user table that holds the user's name.
-     *
+     * @return the column in the user table that holds the user's name.
      */
     public String getUserNameCol() {
         return userNameCol;
@@ -196,8 +192,7 @@ public class DataSourceRealm extends RealmBase {
     }
 
     /**
-     * Return the table that holds the relation between user's and roles.
-     *
+     * @return the table that holds the relation between user's and roles.
      */
     public String getUserRoleTable() {
         return userRoleTable;
@@ -213,8 +208,7 @@ public class DataSourceRealm extends RealmBase {
     }
 
     /**
-     * Return the table that holds user data..
-     *
+     * @return the table that holds user data..
      */
     public String getUserTable() {
         return userTable;
@@ -244,6 +238,7 @@ public class DataSourceRealm extends RealmBase {
      * @param username Username of the Principal to look up
      * @param credentials Password or other credentials to use in
      *  authenticating this username
+     * @return the associated principal, or <code>null</code> if there is none.
      */
     @Override
     public Principal authenticate(String username, String credentials) {
@@ -286,6 +281,7 @@ public class DataSourceRealm extends RealmBase {
      * @param username Username of the Principal to look up
      * @param credentials Password or other credentials to use in
      *  authenticating this username
+     * @return the associated principal, or <code>null</code> if there is none.
      */
     protected Principal authenticate(Connection dbConnection,
                                                String username,
@@ -388,7 +384,7 @@ public class DataSourceRealm extends RealmBase {
     }
 
     /**
-     * Return the password associated with the given principal's user name.
+     * @return the password associated with the given principal's user name.
      */
     @Override
     protected String getPassword(String username) {
@@ -412,6 +408,7 @@ public class DataSourceRealm extends RealmBase {
      * Return the password associated with the given principal's user name.
      * @param dbConnection The database connection to be used
      * @param username Username for which password should be retrieved
+     * @return the password for the specified user
      */
     protected String getPassword(Connection dbConnection,
                                  String username) {
@@ -438,6 +435,8 @@ public class DataSourceRealm extends RealmBase {
 
     /**
      * Return the Principal associated with the given user name.
+     * @param username the user name
+     * @return the principal object
      */
     @Override
     protected Principal getPrincipal(String username) {
@@ -457,7 +456,8 @@ public class DataSourceRealm extends RealmBase {
 
     /**
      * Return the roles associated with the given user name.
-     * @param username Username for which roles should be retrieved
+     * @param username User name for which roles should be retrieved
+     * @return an array list of the role names
      */
     protected ArrayList<String> getRoles(String username) {
 
@@ -479,7 +479,8 @@ public class DataSourceRealm extends RealmBase {
     /**
      * Return the roles associated with the given user name
      * @param dbConnection The database connection to be used
-     * @param username Username for which roles should be retrieved
+     * @param username User name for which roles should be retrieved
+     * @return an array list of the role names
      */
     protected ArrayList<String> getRoles(Connection dbConnection,
                                      String username) {
@@ -516,8 +517,8 @@ public class DataSourceRealm extends RealmBase {
      * to retrieve user credentials for the specified username.
      *
      * @param dbConnection The database connection to be used
-     * @param username Username for which credentials should be retrieved
-     *
+     * @param username User name for which credentials should be retrieved
+     * @return the prepared statement
      * @exception SQLException if a database error occurs
      */
     private PreparedStatement credentials(Connection dbConnection,
@@ -537,8 +538,8 @@ public class DataSourceRealm extends RealmBase {
      * to retrieve user roles for the specified username.
      *
      * @param dbConnection The database connection to be used
-     * @param username Username for which roles should be retrieved
-     *
+     * @param username User name for which roles should be retrieved
+     * @return the prepared statement
      * @exception SQLException if a database error occurs
      */
     private PreparedStatement roles(Connection dbConnection, String username)

==================================================
JAASRealm.java
index 3744426aa8..97bbdd2ff9 100644
--- a/java/org/apache/catalina/realm/DigestCredentialHandlerBase.java
+++ b/java/org/apache/catalina/realm/DigestCredentialHandlerBase.java
@@ -42,7 +42,7 @@ public abstract class DigestCredentialHandlerBase implements CredentialHandler {
 
 
     /**
-     * Return the number of iterations of the associated algorithm that will be
+     * @return the number of iterations of the associated algorithm that will be
      * used when creating a new stored credential for a given input credential.
      */
     public int getIterations() {
@@ -53,6 +53,7 @@ public abstract class DigestCredentialHandlerBase implements CredentialHandler {
     /**
      * Set the number of iterations of the associated algorithm that will be
      * used when creating a new stored credential for a given input credential.
+     * @param iterations the iterations count
      */
     public void setIterations(int iterations) {
         this.iterations = iterations;
@@ -60,7 +61,7 @@ public abstract class DigestCredentialHandlerBase implements CredentialHandler {
 
 
     /**
-     * Return the salt length that will be used when creating a new stored
+     * @return the salt length that will be used when creating a new stored
      * credential for a given input credential.
      */
     public int getSaltLength() {
@@ -71,6 +72,7 @@ public abstract class DigestCredentialHandlerBase implements CredentialHandler {
     /**
      * Set the salt length that will be used when creating a new stored
      * credential for a given input credential.
+     * @param saltLength the salt length
      */
     public void setSaltLength(int saltLength) {
         this.saltLength = saltLength;
@@ -80,6 +82,7 @@ public abstract class DigestCredentialHandlerBase implements CredentialHandler {
     /**
      * When checking input credentials against stored credentials will a warning
      * message be logged if invalid stored credentials are discovered?
+     * @return <code>true</code> if logging will occur
      */
     public boolean getLogInvalidStoredCredentials() {
         return logInvalidStoredCredentials;
@@ -90,6 +93,8 @@ public abstract class DigestCredentialHandlerBase implements CredentialHandler {
      * Set whether a warning message will be logged if invalid stored
      * credentials are discovered while checking input credentials against
      * stored credentials?
+     * @param logInvalidStoredCredentials <code>true</code> to log, the
+     *   default value is <code>false</code>
      */
     public void setLogInvalidStoredCredentials(boolean logInvalidStoredCredentials) {
         this.logInvalidStoredCredentials = logInvalidStoredCredentials;
@@ -189,7 +194,7 @@ public abstract class DigestCredentialHandlerBase implements CredentialHandler {
 
 
     /**
-     * Get the default salt length used by the {@link CredentialHandler}.
+     * @return the default salt length used by the {@link CredentialHandler}.
      */
     protected int getDefaultSaltLength() {
         return DEFAULT_SALT_LENGTH;
@@ -215,26 +220,29 @@ public abstract class DigestCredentialHandlerBase implements CredentialHandler {
     /**
      * Set the algorithm used to convert input credentials to stored
      * credentials.
+     * @param algorithm the algorithm
+     * @throws NoSuchAlgorithmException if the specified algorithm
+     *  is not supported
      */
     public abstract void setAlgorithm(String algorithm) throws NoSuchAlgorithmException;
 
 
     /**
-     * Get the algorithm used to convert input credentials to stored
+     * @return the algorithm used to convert input credentials to stored
      * credentials.
      */
     public abstract String getAlgorithm();
 
 
     /**
-     * Get the default number of iterations used by the
+     * @return the default number of iterations used by the
      * {@link CredentialHandler}.
      */
     protected abstract int getDefaultIterations();
 
 
     /**
-     * Obtain the logger for the CredentialHandler instance.
+     * @return the logger for the CredentialHandler instance.
      */
     protected abstract Log getLog();
 }

==================================================
JDBCRealm.java
index c7cf12c230..829a184c5d 100644
--- a/java/org/apache/catalina/realm/JAASRealm.java
+++ b/java/org/apache/catalina/realm/JAASRealm.java
@@ -178,28 +178,31 @@ public class JAASRealm extends RealmBase {
     // ------------------------------------------------------------- Properties
 
     /**
-     * Getter for the <code>configfile</code> member variable.
+     * @return the path of the JAAS configuration file.
      */
     public String getConfigFile() {
         return configFile;
     }
 
     /**
-     * Setter for the <code>configfile</code> member variable.
+     * Set the JAAS configuration file.
+     * @param configFile The JAAS configuration file
      */
     public void setConfigFile(String configFile) {
         this.configFile = configFile;
     }
 
     /**
-     * setter for the <code>appName</code> member variable
+     * Set the JAAS <code>LoginContext</code> app name.
+     * @param name The application name that will be used to retrieve
+     *  the set of relevant <code>LoginModule</code>s
      */
     public void setAppName(String name) {
         appName = name;
     }
 
     /**
-     * getter for the <code>appName</code> member variable
+     * @return the application name.
      */
     public String getAppName() {
         return appName;
@@ -258,6 +261,7 @@ public class JAASRealm extends RealmBase {
       * classes in the list must implement <code>java.security.Principal</code>.
       * The supplied list of classes will be parsed when {@link #start()} is
       * called.
+      * @param roleClassNames The class names list
       */
      public void setRoleClassNames(String roleClassNames) {
          this.roleClassNames = roleClassNames;
@@ -313,6 +317,7 @@ public class JAASRealm extends RealmBase {
       * users. The classes in the list must implement
       * <code>java.security.Principal</code>. The supplied list of classes will
       * be parsed when {@link #start()} is called.
+      * @param userClassNames The class names list
       */
     public void setUserClassNames(String userClassNames) {
         this.userClassNames = userClassNames;
@@ -328,6 +333,7 @@ public class JAASRealm extends RealmBase {
      * @param username Username of the <code>Principal</code> to look up
      * @param credentials Password or other credentials to use in
      *  authenticating this username
+     * @return the associated principal, or <code>null</code> if there is none.
      */
     @Override
     public Principal authenticate(String username, String credentials) {
@@ -349,6 +355,7 @@ public class JAASRealm extends RealmBase {
      * @param realmName     Realm name
      * @param md5a2         Second MD5 digest used to calculate the digest
      *                          MD5(Method + ":" + uri)
+     * @return the associated principal, or <code>null</code> if there is none.
      */
     @Override
     public Principal authenticate(String username, String clientDigest,
@@ -368,7 +375,10 @@ public class JAASRealm extends RealmBase {
 
 
     /**
-     * Perform the actual JAAS authentication
+     * Perform the actual JAAS authentication.
+     * @param username The user name
+     * @param callbackHandler The callback handler
+     * @return the associated principal, or <code>null</code> if there is none.
      */
     protected Principal authenticate(String username,
             CallbackHandler callbackHandler) {
@@ -459,7 +469,7 @@ public class JAASRealm extends RealmBase {
     }
 
     /**
-     * Return a short name for this <code>Realm</code> implementation.
+     * @return a short name for this <code>Realm</code> implementation.
      */
     @Override
     protected String getName() {
@@ -470,7 +480,7 @@ public class JAASRealm extends RealmBase {
 
 
     /**
-     * Return the password associated with the given principal's user name. This
+     * @return the password associated with the given principal's user name. This
      * always returns null as the JAASRealm has no way of obtaining this
      * information.
      */
@@ -483,7 +493,7 @@ public class JAASRealm extends RealmBase {
 
 
     /**
-     * Return the <code>Principal</code> associated with the given user name.
+     * @return the <code>Principal</code> associated with the given user name.
      */
     @Override
     protected Principal getPrincipal(String username) {
@@ -505,9 +515,11 @@ public class JAASRealm extends RealmBase {
      * Any remaining principal objects returned by the LoginModules are mapped to
      * roles, but only if their respective classes match one of the "role class" classes.
      * If a user Principal cannot be constructed, return <code>null</code>.
+     * @param username The associated user name
      * @param subject The <code>Subject</code> representing the logged-in user
      * @param loginContext Associated with the Principal so
      *                     {@link LoginContext#logout()} can be called later
+     * @return the principal object
      */
     protected Principal createPrincipal(String username, Subject subject,
             LoginContext loginContext) {
@@ -612,7 +624,8 @@ public class JAASRealm extends RealmBase {
 
 
     /**
-     * Load custom JAAS Configuration
+     * Load custom JAAS Configuration.
+     * @return the loaded configuration
      */
     protected Configuration getConfig() {
         try {

==================================================
JNDIRealm.java
index 21c1f7b392..554a3c5009 100644
--- a/java/org/apache/catalina/realm/JDBCRealm.java
+++ b/java/org/apache/catalina/realm/JDBCRealm.java
@@ -143,8 +143,7 @@ public class JDBCRealm
     // ------------------------------------------------------------- Properties
 
     /**
-     * Return the username to use to connect to the database.
-     *
+     * @return the username to use to connect to the database.
      */
     public String getConnectionName() {
         return connectionName;
@@ -160,8 +159,7 @@ public class JDBCRealm
     }
 
     /**
-     * Return the password to use to connect to the database.
-     *
+     * @return the password to use to connect to the database.
      */
     public String getConnectionPassword() {
         return connectionPassword;
@@ -177,8 +175,7 @@ public class JDBCRealm
     }
 
     /**
-     * Return the URL to use to connect to the database.
-     *
+     * @return the URL to use to connect to the database.
      */
     public String getConnectionURL() {
         return connectionURL;
@@ -194,8 +191,7 @@ public class JDBCRealm
     }
 
     /**
-     * Return the JDBC driver that will be used.
-     *
+     * @return the JDBC driver that will be used.
      */
     public String getDriverName() {
         return driverName;
@@ -211,8 +207,7 @@ public class JDBCRealm
     }
 
     /**
-     * Return the column in the user role table that names a role.
-     *
+     * @return the column in the user role table that names a role.
      */
     public String getRoleNameCol() {
         return roleNameCol;
@@ -228,8 +223,7 @@ public class JDBCRealm
     }
 
     /**
-     * Return the column in the user table that holds the user's credentials.
-     *
+     * @return the column in the user table that holds the user's credentials.
      */
     public String getUserCredCol() {
         return userCredCol;
@@ -245,8 +239,7 @@ public class JDBCRealm
     }
 
     /**
-     * Return the column in the user table that holds the user's name.
-     *
+     * @return the column in the user table that holds the user's name.
      */
     public String getUserNameCol() {
         return userNameCol;
@@ -262,8 +255,7 @@ public class JDBCRealm
     }
 
     /**
-     * Return the table that holds the relation between user's and roles.
-     *
+     * @return the table that holds the relation between user's and roles.
      */
     public String getUserRoleTable() {
         return userRoleTable;
@@ -279,8 +271,7 @@ public class JDBCRealm
     }
 
     /**
-     * Return the table that holds user data..
-     *
+     * @return the table that holds user data..
      */
     public String getUserTable() {
         return userTable;
@@ -311,6 +302,7 @@ public class JDBCRealm
      * @param username Username of the Principal to look up
      * @param credentials Password or other credentials to use in
      *  authenticating this username
+     * @return the associated principal, or <code>null</code> if there is none.
      */
     @Override
     public synchronized Principal authenticate(String username, String credentials) {
@@ -463,7 +455,7 @@ public class JDBCRealm
      *
      * @param dbConnection The database connection to be used
      * @param username Username for which credentials should be retrieved
-     *
+     * @return the prepared statement
      * @exception SQLException if a database error occurs
      */
     protected PreparedStatement credentials(Connection dbConnection,
@@ -498,7 +490,7 @@ public class JDBCRealm
 
 
     /**
-     * Return a short name for this Realm implementation.
+     * @return a short name for this Realm implementation.
      */
     @Override
     protected String getName() {
@@ -509,7 +501,9 @@ public class JDBCRealm
 
 
     /**
-     * Return the password associated with the given principal's user name.
+     * Get the password for the specified user.
+     * @param username The user name
+     * @return the password associated with the given principal's user name.
      */
     @Override
     protected synchronized String getPassword(String username) {
@@ -562,7 +556,9 @@ public class JDBCRealm
     }
 
     /**
-     * Return the Principal associated with the given user name.
+     * Get the principal associated with the specified user.
+     * @param username The user name
+     * @return the Principal associated with the given user name.
      */
     @Override
     protected synchronized Principal getPrincipal(String username) {
@@ -575,7 +571,9 @@ public class JDBCRealm
 
 
     /**
-     * Return the roles associated with the gven user name.
+     * Return the roles associated with the given user name.
+     * @param username The user name
+     * @return an array list of the role names
      */
     protected ArrayList<String> getRoles(String username) {
 
@@ -634,7 +632,7 @@ public class JDBCRealm
     /**
      * Open (if necessary) and return a database connection for use by
      * this Realm.
-     *
+     * @return the opened connection
      * @exception SQLException if a database error occurs
      */
     protected Connection open() throws SQLException {
@@ -677,7 +675,7 @@ public class JDBCRealm
      *
      * @param dbConnection The database connection to be used
      * @param username Username for which roles should be retrieved
-     *
+     * @return the prepared statement
      * @exception SQLException if a database error occurs
      */
     protected synchronized PreparedStatement roles(Connection dbConnection,

==================================================
MemoryRealm.java
index 775f486171..4f3a16ef75 100644
--- a/java/org/apache/catalina/realm/JNDIRealm.java
+++ b/java/org/apache/catalina/realm/JNDIRealm.java
@@ -501,7 +501,7 @@ public class JNDIRealm extends RealmBase {
     // ------------------------------------------------------------- Properties
 
     /**
-     * Return the type of authentication to use.
+     * @return the type of authentication to use.
      */
     public String getAuthentication() {
 
@@ -521,7 +521,7 @@ public class JNDIRealm extends RealmBase {
     }
 
     /**
-     * Return the connection username for this Realm.
+     * @return the connection username for this Realm.
      */
     public String getConnectionName() {
 
@@ -543,7 +543,7 @@ public class JNDIRealm extends RealmBase {
 
 
     /**
-     * Return the connection password for this Realm.
+     * @return the connection password for this Realm.
      */
     public String getConnectionPassword() {
 
@@ -565,7 +565,7 @@ public class JNDIRealm extends RealmBase {
 
 
     /**
-     * Return the connection URL for this Realm.
+     * @return the connection URL for this Realm.
      */
     public String getConnectionURL() {
 
@@ -587,7 +587,7 @@ public class JNDIRealm extends RealmBase {
 
 
     /**
-     * Return the JNDI context factory for this Realm.
+     * @return the JNDI context factory for this Realm.
      */
     public String getContextFactory() {
 
@@ -608,7 +608,7 @@ public class JNDIRealm extends RealmBase {
     }
 
     /**
-     * Return the derefAliases setting to be used.
+     * @return the derefAliases setting to be used.
      */
     public java.lang.String getDerefAliases() {
         return derefAliases;
@@ -624,7 +624,7 @@ public class JNDIRealm extends RealmBase {
     }
 
     /**
-     * Return the protocol to be used.
+     * @return the protocol to be used.
      */
     public String getProtocol() {
 
@@ -645,7 +645,7 @@ public class JNDIRealm extends RealmBase {
 
 
     /**
-     * Returns the current settings for handling PartialResultExceptions
+     * @return the current settings for handling PartialResultExceptions
      */
     public boolean getAdCompat () {
         return adCompat;
@@ -655,6 +655,7 @@ public class JNDIRealm extends RealmBase {
     /**
      * How do we handle PartialResultExceptions?
      * True: ignore all PartialResultExceptions.
+     * @param adCompat <code>true</code> to ignore patial results
      */
     public void setAdCompat (boolean adCompat) {
         this.adCompat = adCompat;
@@ -662,7 +663,7 @@ public class JNDIRealm extends RealmBase {
 
 
     /**
-     * Returns the current settings for handling JNDI referrals.
+     * @return the current settings for handling JNDI referrals.
      */
     public String getReferrals () {
         return referrals;
@@ -672,6 +673,7 @@ public class JNDIRealm extends RealmBase {
     /**
      * How do we handle JNDI referrals? ignore, follow, or throw
      * (see javax.naming.Context.REFERRAL for more information).
+     * @param referrals The referral handling
      */
     public void setReferrals (String referrals) {
         this.referrals = referrals;
@@ -679,7 +681,7 @@ public class JNDIRealm extends RealmBase {
 
 
     /**
-     * Return the base element for user searches.
+     * @return the base element for user searches.
      */
     public String getUserBase() {
 
@@ -701,7 +703,7 @@ public class JNDIRealm extends RealmBase {
 
 
     /**
-     * Return the message format pattern for selecting users in this Realm.
+     * @return the message format pattern for selecting users in this Realm.
      */
     public String getUserSearch() {
 
@@ -737,7 +739,7 @@ public class JNDIRealm extends RealmBase {
 
 
     /**
-     * Return the "search subtree for users" flag.
+     * @return the "search subtree for users" flag.
      */
     public boolean getUserSubtree() {
 
@@ -759,7 +761,7 @@ public class JNDIRealm extends RealmBase {
 
 
     /**
-     * Return the user role name attribute name for this Realm.
+     * @return the user role name attribute name for this Realm.
      */
     public String getUserRoleName() {
 
@@ -780,7 +782,7 @@ public class JNDIRealm extends RealmBase {
 
 
     /**
-     * Return the base element for role searches.
+     * @return the base element for role searches.
      */
     public String getRoleBase() {
 
@@ -806,7 +808,7 @@ public class JNDIRealm extends RealmBase {
 
 
     /**
-     * Return the role name attribute name for this Realm.
+     * @return the role name attribute name for this Realm.
      */
     public String getRoleName() {
 
@@ -828,7 +830,7 @@ public class JNDIRealm extends RealmBase {
 
 
     /**
-     * Return the message format pattern for selecting roles in this Realm.
+     * @return the message format pattern for selecting roles in this Realm.
      */
     public String getRoleSearch() {
 
@@ -864,7 +866,7 @@ public class JNDIRealm extends RealmBase {
 
 
     /**
-     * Return the "search subtree for roles" flag.
+     * @return the "search subtree for roles" flag.
      */
     public boolean getRoleSubtree() {
 
@@ -885,7 +887,7 @@ public class JNDIRealm extends RealmBase {
     }
 
     /**
-     * Return the "The nested group search flag" flag.
+     * @return the "The nested group search flag" flag.
      */
     public boolean getRoleNested() {
 
@@ -907,7 +909,7 @@ public class JNDIRealm extends RealmBase {
 
 
     /**
-     * Return the password attribute used to retrieve the user password.
+     * @return the password attribute used to retrieve the user password.
      */
     public String getUserPassword() {
 
@@ -937,7 +939,7 @@ public class JNDIRealm extends RealmBase {
     }
 
     /**
-     * Return the message format pattern for selecting users in this Realm.
+     * @return the message format pattern for selecting users in this Realm.
      */
     public String getUserPattern() {
 
@@ -1000,7 +1002,7 @@ public class JNDIRealm extends RealmBase {
 
 
     /**
-     * Return the common role
+     * @return the common role
      */
     public String getCommonRole() {
 
@@ -1022,7 +1024,7 @@ public class JNDIRealm extends RealmBase {
 
 
     /**
-     * Return the connection timeout.
+     * @return the connection timeout.
      */
     public String getConnectionTimeout() {
 
@@ -1244,6 +1246,7 @@ public class JNDIRealm extends RealmBase {
      * @param username Username of the Principal to look up
      * @param credentials Password or other credentials to use in
      *  authenticating this username
+     * @return the associated principal, or <code>null</code> if there is none.
      */
     @Override
     public Principal authenticate(String username, String credentials) {
@@ -1352,6 +1355,7 @@ public class JNDIRealm extends RealmBase {
      * @param username Username of the Principal to look up
      * @param credentials Password or other credentials to use in
      *  authenticating this username
+     * @return the associated principal, or <code>null</code> if there is none.
      *
      * @exception NamingException if a directory server error occurs
      */
@@ -1434,7 +1438,7 @@ public class JNDIRealm extends RealmBase {
      *
      * @param context The directory context
      * @param username Username to be looked up
-     *
+     * @return the User object
      * @exception NamingException if a directory server error occurs
      *
      * @see #getUser(DirContext, String, String, int)
@@ -1454,7 +1458,7 @@ public class JNDIRealm extends RealmBase {
      * @param context The directory context
      * @param username Username to be looked up
      * @param credentials User credentials (optional)
-     *
+     * @return the User object
      * @exception NamingException if a directory server error occurs
      *
      * @see #getUser(DirContext, String, String, int)
@@ -1481,7 +1485,7 @@ public class JNDIRealm extends RealmBase {
      * @param username Username to be looked up
      * @param credentials User credentials (optional)
      * @param curUserPattern Index into userPatternFormatArray
-     *
+     * @return the User object
      * @exception NamingException if a directory server error occurs
      */
     protected User getUser(DirContext context, String username,
@@ -1546,7 +1550,7 @@ public class JNDIRealm extends RealmBase {
      * @param attrIds String[]containing names of attributes to
      * @param dn Distinguished name of the user
      * retrieve.
-     *
+     * @return the User object
      * @exception NamingException if a directory server error occurs
      */
     protected User getUserByPattern(DirContext context,
@@ -1600,7 +1604,7 @@ public class JNDIRealm extends RealmBase {
      * @param credentials User credentials (optional)
      * @param attrIds String[]containing names of attributes to
      * @param curUserPattern Index into userPatternFormatArray
-     *
+     * @return the User object
      * @exception NamingException if a directory server error occurs
      * @see #getUserByPattern(DirContext, String, String[], String)
      */
@@ -1646,7 +1650,7 @@ public class JNDIRealm extends RealmBase {
      * @param context The directory context
      * @param username The username
      * @param attrIds String[]containing names of attributes to retrieve.
-     *
+     * @return the User object
      * @exception NamingException if a directory server error occurs
      */
     protected User getUserBySearch(DirContext context,
@@ -1750,7 +1754,7 @@ public class JNDIRealm extends RealmBase {
      * @param context The directory context
      * @param user The User to be authenticated
      * @param credentials The credentials presented by the user
-     *
+     * @return <code>true</code> if the credentials are validated
      * @exception NamingException if a directory server error occurs
      */
     protected boolean checkCredentials(DirContext context,
@@ -1786,7 +1790,7 @@ public class JNDIRealm extends RealmBase {
      * @param context The directory context
      * @param info The User to be authenticated
      * @param credentials Authentication credentials
-     *
+     * @return <code>true</code> if the credentials are validated
      * @exception NamingException if a directory server error occurs
      */
     protected boolean compareCredentials(DirContext context,
@@ -1813,7 +1817,7 @@ public class JNDIRealm extends RealmBase {
      * @param context The directory context
      * @param user The User to be authenticated
      * @param credentials Authentication credentials
-     *
+     * @return <code>true</code> if the credentials are validated
      * @exception NamingException if a directory server error occurs
      */
      protected boolean bindAsUser(DirContext context,
@@ -1862,6 +1866,7 @@ public class JNDIRealm extends RealmBase {
       * @param context      DirContext to configure
       * @param dn           Distinguished name of user
       * @param credentials  Credentials of user
+      * @exception NamingException if a directory server error occurs
       */
     private void userCredentialsAdd(DirContext context, String dn,
             String credentials) throws NamingException {
@@ -1876,6 +1881,7 @@ public class JNDIRealm extends RealmBase {
      * those attributes are not specified.
      *
       * @param context      DirContext to configure
+      * @exception NamingException if a directory server error occurs
      */
     private void userCredentialsRemove(DirContext context)
             throws NamingException {
@@ -1904,7 +1910,7 @@ public class JNDIRealm extends RealmBase {
      *
      * @param context The directory context we are searching
      * @param user The User to be checked
-     *
+     * @return the list of role names
      * @exception NamingException if a directory server error occurs
      */
     protected List<String> getRoles(DirContext context, User user)
@@ -2065,7 +2071,7 @@ public class JNDIRealm extends RealmBase {
      *
      * @param attrId Attribute name
      * @param attrs Attributes containing the required value
-     *
+     * @return the attribute value
      * @exception NamingException if a directory server error occurs
      */
     private String getAttributeValue(String attrId, Attributes attrs)
@@ -2099,7 +2105,7 @@ public class JNDIRealm extends RealmBase {
      * @param attrId Attribute name
      * @param attrs Attributes containing the new values
      * @param values ArrayList containing values found so far
-     *
+     * @return the list of attribute values
      * @exception NamingException if a directory server error occurs
      */
     private ArrayList<String> addAttributeValues(String attrId,
@@ -2163,7 +2169,7 @@ public class JNDIRealm extends RealmBase {
 
 
     /**
-     * Return a short name for this Realm implementation.
+     * @return a short name for this Realm implementation.
      */
     @Override
     protected String getName() {
@@ -2174,7 +2180,9 @@ public class JNDIRealm extends RealmBase {
 
 
     /**
-     * Return the password associated with the given principal's user name.
+     * Get the password for the specified user.
+     * @param username The user name
+     * @return the password associated with the given principal's user name.
      */
     @Override
     protected String getPassword(String username) {
@@ -2199,7 +2207,9 @@ public class JNDIRealm extends RealmBase {
     }
 
     /**
-     * Return the Principal associated with the given user name.
+     * Get the principal associated with the specified certificate.
+     * @param username The user name
+     * @return the Principal associated with the given certificate.
      */
     @Override
     protected Principal getPrincipal(String username) {
@@ -2283,7 +2293,12 @@ public class JNDIRealm extends RealmBase {
 
 
     /**
-     * Return the Principal associated with the given user name.
+     * Get the principal associated with the specified certificate.
+     * @param context The directory context
+     * @param username The user name
+     * @param gssCredential The credentials
+     * @return the Principal associated with the given certificate.
+     * @exception NamingException if a directory server error occurs
      */
     protected synchronized Principal getPrincipal(DirContext context,
             String username, GSSCredential gssCredential)
@@ -2344,7 +2359,7 @@ public class JNDIRealm extends RealmBase {
     /**
      * Open (if necessary) and return a connection to the configured
      * directory server for this Realm.
-     *
+     * @return the directory context
      * @exception NamingException if a directory server error occurs
      */
     protected DirContext open() throws NamingException {
@@ -2596,6 +2611,7 @@ public class JNDIRealm extends RealmBase {
      *
      * @param userPatternString - a string LDAP search paths surrounded by
      * parentheses
+     * @return a parsed string array
      */
     protected String[] parseUserPatternString(String userPatternString) {
 
@@ -2684,6 +2700,7 @@ public class JNDIRealm extends RealmBase {
      * @param base The base DN
      * @param result The search result
      * @return String containing the distinguished name
+     * @exception NamingException if a directory server error occurs
      */
     protected String getDistinguishedName(DirContext context, String base,
             SearchResult result) throws NamingException {

==================================================
RealmBase.java
index bb26c63c6a..54c24e1607 100644
--- a/java/org/apache/catalina/realm/MemoryRealm.java
+++ b/java/org/apache/catalina/realm/MemoryRealm.java
@@ -77,7 +77,7 @@ public class MemoryRealm  extends RealmBase {
     // ------------------------------------------------------------- Properties
 
     /**
-     * Return the pathname of our XML file containing user definitions.
+     * @return the pathname of our XML file containing user definitions.
      */
     public String getPathname() {
 
@@ -109,6 +109,7 @@ public class MemoryRealm  extends RealmBase {
      * @param username Username of the Principal to look up
      * @param credentials Password or other credentials to use in
      *  authenticating this username
+     * @return the associated principal, or <code>null</code> if there is none.
      */
     @Override
     public Principal authenticate(String username, String credentials) {
@@ -176,7 +177,7 @@ public class MemoryRealm  extends RealmBase {
 
 
     /**
-     * Return a configured <code>Digester</code> to use for processing
+     * @return a configured <code>Digester</code> to use for processing
      * the XML input file, creating a new one if necessary.
      */
     protected synchronized Digester getDigester() {
@@ -199,7 +200,7 @@ public class MemoryRealm  extends RealmBase {
 
 
     /**
-     * Return a short name for this Realm implementation.
+     * @return a short name for this Realm implementation.
      */
     @Override
     protected String getName() {
@@ -210,7 +211,7 @@ public class MemoryRealm  extends RealmBase {
 
 
     /**
-     * Return the password associated with the given principal's user name.
+     * @return the password associated with the given principal's user name.
      */
     @Override
     protected String getPassword(String username) {
@@ -226,7 +227,7 @@ public class MemoryRealm  extends RealmBase {
 
 
     /**
-     * Return the Principal associated with the given user name.
+     * @return the Principal associated with the given user name.
      */
     @Override
     protected Principal getPrincipal(String username) {

==================================================
UserDatabaseRealm.java
index fc25fca70a..108c7a87ea 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -299,6 +299,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
      * @param username Username of the Principal to look up
      * @param credentials Password or other credentials to use in
      *  authenticating this username
+     * @return the associated principal, or <code>null</code> if there is none.
      */
     @Override
     public Principal authenticate(String username, String credentials) {
@@ -1079,6 +1080,9 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
 
     /**
      * Return the digest associated with given principal's user name.
+     * @param username the user name
+     * @param realmName the realm name
+     * @return the digest for the specified user
      */
     protected String getDigest(String username, String realmName) {
         if (hasMessageDigest()) {
@@ -1121,20 +1125,24 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
 
 
     /**
-     * Return a short name for this Realm implementation, for use in
+     * @return a short name for this Realm implementation, for use in
      * log messages.
      */
     protected abstract String getName();
 
 
     /**
-     * Return the password associated with the given principal's user name.
+     * Get the password for the specified user.
+     * @param username The user name
+     * @return the password associated with the given principal's user name.
      */
     protected abstract String getPassword(String username);
 
 
     /**
-     * Return the Principal associated with the given certificate.
+     * Get the principal associated with the specified certificate.
+     * @param usercert The user certificate
+     * @return the Principal associated with the given certificate.
      */
     protected Principal getPrincipal(X509Certificate usercert) {
         String username = x509UsernameRetriever.getUsername(usercert);
@@ -1147,7 +1155,9 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
 
 
     /**
-     * Return the Principal associated with the given user name.
+     * Get the principal associated with the specified user.
+     * @param username The user name
+     * @return the Principal associated with the given user name.
      */
     protected abstract Principal getPrincipal(String username);
 
@@ -1168,6 +1178,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
      * with which this Realm is associated. If the server cannot be found (eg
      * because the container hierarchy is not complete), <code>null</code> is
      * returned.
+     * @return the Server associated with the realm
      */
     protected Server getServer() {
         Container c = container;

==================================================
SecurityUtil.java
index 3705413c50..3b13167ffc 100644
--- a/java/org/apache/catalina/realm/UserDatabaseRealm.java
+++ b/java/org/apache/catalina/realm/UserDatabaseRealm.java
@@ -75,7 +75,7 @@ public class UserDatabaseRealm
     // ------------------------------------------------------------- Properties
 
     /**
-     * Return the global JNDI name of the <code>UserDatabase</code> resource
+     * @return the global JNDI name of the <code>UserDatabase</code> resource
      * we will be using.
      */
     public String getResourceName() {

==================================================
