683d32e2f06938af4985b8e1f3e672f71e02b121
==================================================
Follow-up to 7c630a7
==================================================
Mark Thomas
==================================================
Mon Oct 4 19:47:15 2021 +0100
==================================================
BeanNameELResolver.java
Follow-up to 7c630a7

Fix a few tests that need correcting.
Restore some checks to ELResolvers that need them.


==================================================
StaticFieldELResolver.java
index ad65ccfcec..27bc01a01c 100644
--- a/java/jakarta/el/BeanNameELResolver.java
+++ b/java/jakarta/el/BeanNameELResolver.java
@@ -104,6 +104,7 @@ public class BeanNameELResolver extends ELResolver {
 
         try {
             if (beanNameResolver.isNameResolved(beanName)) {
+                Class<?> result = beanNameResolver.getBean(beanName).getClass();
                 context.setPropertyResolved(base, property);
 
                 /*
@@ -113,7 +114,7 @@ public class BeanNameELResolver extends ELResolver {
                     return null;
                 }
 
-                return beanNameResolver.getBean(beanName).getClass();
+                return result;
             }
         } catch (Throwable t) {
             Util.handleThrowable(t);

==================================================
TestBeanELResolver.java
index e164e9d4f0..d0de03c8ef 100644
--- a/java/jakarta/el/StaticFieldELResolver.java
+++ b/java/jakarta/el/StaticFieldELResolver.java
@@ -149,15 +149,26 @@ public class StaticFieldELResolver extends ELResolver {
 
             Class<?> clazz = ((ELClass) base).getKlass();
             String name = (String) property;
+            Exception exception = null;
             try {
-                clazz.getField(name);
-                /*
-                 * This resolver is always read-only so fall-through to return
-                 * null.
-                 */
-            } catch (IllegalArgumentException | NoSuchFieldException | SecurityException e) {
-                String msg = Util.message(context, "staticFieldELResolver.notFound", name, clazz.getName());
-                throw new PropertyNotFoundException(msg, e);
+                Field field = clazz.getField(name);
+                int modifiers = field.getModifiers();
+                if (Modifier.isStatic(modifiers) &&
+                        Modifier.isPublic(modifiers) &&
+                        Util.canAccess(null, field)) {
+                    // Resolver is read-only so returns null for resolved fields
+                    return null;
+                }
+            } catch (IllegalArgumentException | NoSuchFieldException |
+                    SecurityException e) {
+                exception = e;
+            }
+            String msg = Util.message(context, "staticFieldELResolver.notFound",
+                    name, clazz.getName());
+            if (exception == null) {
+                throw new PropertyNotFoundException(msg);
+            } else {
+                throw new PropertyNotFoundException(msg, exception);
             }
         }
         return null;

==================================================
TestStaticFieldELResolver.java
index 5da3667a7d..864e1a7c91 100644
--- a/test/jakarta/el/TestBeanELResolver.java
+++ b/test/jakarta/el/TestBeanELResolver.java
@@ -97,7 +97,8 @@ public class TestBeanELResolver {
 
         Class<?> result = resolver.getType(context, new Bean(), PROPERTY01_NAME);
 
-        Assert.assertEquals(String.class, result);
+        // Property is read-only so should return null
+        Assert.assertNull(result);
         Assert.assertTrue(context.isPropertyResolved());
     }
 

==================================================
