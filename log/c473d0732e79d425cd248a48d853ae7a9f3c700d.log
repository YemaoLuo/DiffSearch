c473d0732e79d425cd248a48d853ae7a9f3c700d
==================================================
Reduce visibility of constructors.
==================================================
Konstantin Kolinko
==================================================
Fri Sep 12 15:15:41 2014 +0000
==================================================
AccessFlags.java
Reduce visibility of constructors.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1624568 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AnnotationDefault.java
index 82ba0ffc53..8e12005c40 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AccessFlags.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AccessFlags.java
@@ -27,7 +27,7 @@ public abstract class AccessFlags {
 
     protected int access_flags;
 
-    public AccessFlags() {
+    AccessFlags() {
     }
 
     /**

==================================================
AnnotationElementValue.java
index 5c0ed0a15c..22d2bb33df 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationDefault.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationDefault.java
@@ -34,7 +34,7 @@ public class AnnotationDefault extends Attribute {
      * @param constant_pool
      *            Array of constants
      */
-    public AnnotationDefault(DataInputStream file, ConstantPool constant_pool)
+    AnnotationDefault(DataInputStream file, ConstantPool constant_pool)
             throws IOException {
         // Default value
         ElementValue.readElementValue(file, constant_pool);

==================================================
AnnotationEntry.java
index 3bfd98e45d..5b2117319b 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationElementValue.java
@@ -22,7 +22,7 @@ public class AnnotationElementValue extends ElementValue
     // For annotation element values, this is the annotation
     private AnnotationEntry annotationEntry;
 
-    public AnnotationElementValue(int type, AnnotationEntry annotationEntry,
+    AnnotationElementValue(int type, AnnotationEntry annotationEntry,
             ConstantPool cpool)
     {
         super(type, cpool);

==================================================
Annotations.java
index c3583a6bda..09c20c7411 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationEntry.java
@@ -57,7 +57,7 @@ public class AnnotationEntry implements Constants {
         return annotationEntry;
     }
 
-    public AnnotationEntry(int type_index, ConstantPool constant_pool) {
+    AnnotationEntry(int type_index, ConstantPool constant_pool) {
         this.type_index = type_index;
         this.constant_pool = constant_pool;
     }

==================================================
ArrayElementValue.java
index 6803c9dd45..5d71602d46 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Annotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Annotations.java
@@ -34,7 +34,7 @@ public abstract class Annotations extends Attribute {
      * @param file Input stream
      * @param constant_pool Array of constants
      */
-    public Annotations(DataInputStream file, ConstantPool constant_pool)
+    Annotations(DataInputStream file, ConstantPool constant_pool)
             throws IOException {
         final int annotation_table_length = (file.readUnsignedShort());
         annotation_table = new AnnotationEntry[annotation_table_length];

==================================================
Attribute.java
index 72045001c0..1da26fb805 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ArrayElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ArrayElementValue.java
@@ -22,7 +22,7 @@ public class ArrayElementValue extends ElementValue
     // For array types, this is the array
     private ElementValue[] evalues;
 
-    public ArrayElementValue(int type, ElementValue[] datums, ConstantPool cpool)
+    ArrayElementValue(int type, ElementValue[] datums, ConstantPool cpool)
     {
         super(type, cpool);
         if (type != ARRAY) {

==================================================
ClassElementValue.java
index 3387f1007e..07097532fd 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
@@ -34,6 +34,9 @@ import org.apache.tomcat.util.bcel.Constants;
  */
 public abstract class Attribute {
 
+    Attribute() {
+    }
+
     /*
      * Class method reads one attribute from the input data stream. This method
      * must not be accessible from the outside. It is called by the Field and

==================================================
ElementValue.java
index 09d272f673..3419461559 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ClassElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ClassElementValue.java
@@ -26,8 +26,7 @@ public class ClassElementValue extends ElementValue
     // For 'class' this points to the class entry in the cpool
     private int idx;
 
-    public ClassElementValue(int type, int idx, ConstantPool cpool)
-    {
+    ClassElementValue(int type, int idx, ConstantPool cpool) {
         super(type, cpool);
         this.idx = idx;
     }

==================================================
ElementValuePair.java
index 301146ed53..4302ff36ac 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ElementValue.java
@@ -31,8 +31,7 @@ public abstract class ElementValue
     protected ConstantPool cpool;
 
 
-    protected ElementValue(int type, ConstantPool cpool)
-    {
+    ElementValue(int type, ConstantPool cpool) {
         this.type = type;
         this.cpool = cpool;
     }

==================================================
EnumElementValue.java
index 54c829378d..f9affb5e09 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ElementValuePair.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ElementValuePair.java
@@ -33,9 +33,8 @@ public class ElementValuePair
 
     private int elementNameIndex;
 
-    public ElementValuePair(int elementNameIndex, ElementValue elementValue,
-            ConstantPool constantPool)
-    {
+    ElementValuePair(int elementNameIndex, ElementValue elementValue,
+            ConstantPool constantPool) {
         this.elementValue = elementValue;
         this.elementNameIndex = elementNameIndex;
         this.constantPool = constantPool;

==================================================
JavaClass.java
index b33c428824..6ee781a80f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/EnumElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/EnumElementValue.java
@@ -23,8 +23,7 @@ public class EnumElementValue extends ElementValue
 {
     private int valueIdx;
 
-    public EnumElementValue(int type, int valueIdx, ConstantPool cpool)
-    {
+    EnumElementValue(int type, int valueIdx, ConstantPool cpool) {
         super(type, cpool);
         if (type != ENUM_CONSTANT)
             throw new RuntimeException(

==================================================
RuntimeVisibleAnnotations.java
index 93925b1388..dcbefa3e1a 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
@@ -57,7 +57,7 @@ public class JavaClass extends AccessFlags {
      * @param interfaces Implemented interfaces
      * @param attributes Class attributes
      */
-    public JavaClass(int class_name_index, int superclass_name_index,
+    JavaClass(int class_name_index, int superclass_name_index,
             int access_flags, ConstantPool constant_pool, int[] interfaces,
             Attribute[] attributes) {
         if (interfaces == null) {

==================================================
SimpleElementValue.java
index 2ae22b4317..53aa39980c 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/RuntimeVisibleAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/RuntimeVisibleAnnotations.java
@@ -35,7 +35,7 @@ public class RuntimeVisibleAnnotations extends Annotations {
      * @param constant_pool
      *            Array of constants
      */
-    public RuntimeVisibleAnnotations(DataInputStream file,
+    RuntimeVisibleAnnotations(DataInputStream file,
             ConstantPool constant_pool) throws IOException {
         super(file, constant_pool);
     }

==================================================
