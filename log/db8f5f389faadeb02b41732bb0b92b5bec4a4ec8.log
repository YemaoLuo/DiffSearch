db8f5f389faadeb02b41732bb0b92b5bec4a4ec8
==================================================
Delete unused classes deprecated in TC5.
==================================================
Mark Emlyn
==================================================
Thu Jul 13 02:36:06 2006 +0000
==================================================
CGIProcessEnvironment.java
Delete unused classes deprecated in TC5.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@421482 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ProcessEnvironment.java
deleted file mode 100644
index b9e0f46fee..0000000000
--- a/java/org/apache/catalina/util/CGIProcessEnvironment.java
+++ /dev/null
@@ -1,448 +0,0 @@
-/*
- * Copyright 1999,2004 The Apache Software Foundation.
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-
-package org.apache.catalina.util;
-
-import java.io.File;
-import java.net.URLEncoder;
-import java.util.Enumeration;
-import java.util.Hashtable;
-import java.util.StringTokenizer;
-
-import javax.servlet.ServletContext;
-import javax.servlet.http.HttpServletRequest;
-
-
-/**
- * Encapsulates the CGI Process' environment and rules to derive
- * that environment from the servlet container and request information.
- * @author   Martin Dengler [root@martindengler.com]
- * @version  $Revision: 303237 $, $Date: 2004-09-17 01:23:37 +0200 (ven., 17 sept. 2004) $
- * @since    Tomcat 4.0
- */
-
-public class CGIProcessEnvironment extends ProcessEnvironment {
-    
-    
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( CGIProcessEnvironment.class );
-    
-    /** cgi command's query parameters */
-    private Hashtable queryParameters = null;
-
-    /**
-     *  The CGI search path will start at
-     *    webAppRootDir + File.separator + cgiPathPrefix
-     *    (or webAppRootDir alone if cgiPathPrefix is
-     *    null)
-     */
-    private String cgiPathPrefix = null;
-
-
-    /**
-     * Creates a ProcessEnvironment and derives the necessary environment,
-     * working directory, command, etc.  The cgi path prefix is initialized
-     * to "" (the empty string).
-     *
-     * @param  req       HttpServletRequest for information provided by
-     *                   the Servlet API
-     * @param  context   ServletContext for information provided by
-     *                   the Servlet API
-     */
-    public CGIProcessEnvironment(HttpServletRequest req,
-        ServletContext context) {
-            this(req, context, "");
-    }
-
-
-
-    /**
-     * Creates a ProcessEnvironment and derives the necessary environment,
-     * working directory, command, etc.
-     * @param req             HttpServletRequest for information provided by
-     *                        the Servlet API
-     * @param context         ServletContext for information provided by
-     *                        the Servlet API
-     * @param cgiPathPrefix   subdirectory of webAppRootDir below which the
-     *                        web app's CGIs may be stored; can be null or "".
-     */
-    public CGIProcessEnvironment(HttpServletRequest req,
-        ServletContext context, String cgiPathPrefix) {
-            this(req, context, cgiPathPrefix, 0);
-    }
-
-
-
-    /**
-     * Creates a ProcessEnvironment and derives the necessary environment,
-     * working directory, command, etc.
-     * @param req             HttpServletRequest for information provided by
-     *                        the Servlet API
-     * @param context         ServletContext for information provided by
-     *                        the Servlet API
-     * @param  debug          int debug level (0 == none, 6 == lots)
-     */
-    public CGIProcessEnvironment(HttpServletRequest req,
-        ServletContext context, int debug) {
-            this(req, context, "", 0);
-    }
-
-
-
-
-    /**
-     * Creates a ProcessEnvironment and derives the necessary environment,
-     * working directory, command, etc.
-     * @param req             HttpServletRequest for information provided by
-     *                        the Servlet API
-     * @param context         ServletContext for information provided by
-     *                        the Servlet API
-     * @param cgiPathPrefix   subdirectory of webAppRootDir below which the
-     *                        web app's CGIs may be stored; can be null or "".
-     * @param  debug          int debug level (0 == none, 6 == lots)
-     */
-    public CGIProcessEnvironment(HttpServletRequest req,
-        ServletContext context, String cgiPathPrefix, int debug) {
-            super(req, context, debug);
-            this.cgiPathPrefix = cgiPathPrefix;
-            queryParameters = new Hashtable();
-            Enumeration paramNames = req.getParameterNames();
-            while (paramNames != null && paramNames.hasMoreElements()) {
-                String param = paramNames.nextElement().toString();
-                if (param != null) {
-                    queryParameters.put(param,
-                        URLEncoder.encode(req.getParameter(param)));
-                }
-            }
-            this.valid = deriveProcessEnvironment(req);
-    }
-
-
-
-    /**
-     * Constructs the CGI environment to be supplied to the invoked CGI
-     * script; relies heavliy on Servlet API methods and findCGI
-     * @param    req request associated with the CGI invokation
-     * @return   true if environment was set OK, false if there was a problem
-     *           and no environment was set
-     */
-    protected boolean deriveProcessEnvironment(HttpServletRequest req) {
-        /*
-         * This method is slightly ugly; c'est la vie.
-         * "You cannot stop [ugliness], you can only hope to contain [it]"
-         * (apologies to Marv Albert regarding MJ)
-         */
-
-        Hashtable envp;
-        super.deriveProcessEnvironment(req);
-        envp = getEnvironment();
-
-        String sPathInfoOrig = null;
-        String sPathTranslatedOrig = null;
-        String sPathInfoCGI = null;
-        String sPathTranslatedCGI = null;
-        String sCGIFullPath = null;
-        String sCGIScriptName = null;
-        String sCGIFullName = null;
-        String sCGIName = null;
-        String[] sCGINames;
-        sPathInfoOrig = this.pathInfo;
-        sPathInfoOrig = sPathInfoOrig == null ? "" : sPathInfoOrig;
-        sPathTranslatedOrig = req.getPathTranslated();
-        sPathTranslatedOrig = sPathTranslatedOrig == null ? "" :
-            sPathTranslatedOrig;
-            sCGINames =
-                findCGI(sPathInfoOrig, getWebAppRootDir(), getContextPath(),
-                getServletPath(), cgiPathPrefix);
-        sCGIFullPath = sCGINames[0];
-        sCGIScriptName = sCGINames[1];
-        sCGIFullName = sCGINames[2];
-        sCGIName = sCGINames[3];
-        if (sCGIFullPath == null || sCGIScriptName == null
-            || sCGIFullName == null || sCGIName == null) {
-                return false;
-        }
-        envp.put("SERVER_SOFTWARE", "TOMCAT");
-        envp.put("SERVER_NAME", nullsToBlanks(req.getServerName()));
-        envp.put("GATEWAY_INTERFACE", "CGI/1.1");
-        envp.put("SERVER_PROTOCOL", nullsToBlanks(req.getProtocol()));
-        int port = req.getServerPort();
-        Integer iPort = (port == 0 ? new Integer(-1) : new Integer(port));
-        envp.put("SERVER_PORT", iPort.toString());
-        envp.put("REQUEST_METHOD", nullsToBlanks(req.getMethod()));
-
-        /*-
-        * PATH_INFO should be determined by using sCGIFullName:
-        * 1) Let sCGIFullName not end in a "/" (see method findCGI)
-        * 2) Let sCGIFullName equal the pathInfo fragment which
-        *    corresponds to the actual cgi script.
-        * 3) Thus, PATH_INFO = request.getPathInfo().substring(
-        *                      sCGIFullName.length())
-        *
-        * (see method findCGI, where the real work is done)
-        *
-        */
-
-        if (pathInfo == null ||
-            (pathInfo.substring(sCGIFullName.length()).length() <= 0)) {
-                sPathInfoCGI = "";
-        } else {
-            sPathInfoCGI = pathInfo.substring(sCGIFullName.length());
-        }
-        envp.put("PATH_INFO", sPathInfoCGI);
-
-        /*-
-        * PATH_TRANSLATED must be determined after PATH_INFO (and the
-        * implied real cgi-script) has been taken into account.
-        *
-        * The following example demonstrates:
-        *
-        * servlet info   = /servlet/cgigw/dir1/dir2/cgi1/trans1/trans2
-        * cgifullpath    = /servlet/cgigw/dir1/dir2/cgi1
-        * path_info      = /trans1/trans2
-        * webAppRootDir  = servletContext.getRealPath("/")
-        *
-        * path_translated = servletContext.getRealPath("/trans1/trans2")
-        *
-        * That is, PATH_TRANSLATED = webAppRootDir + sPathInfoCGI
-        * (unless sPathInfoCGI is null or blank, then the CGI
-        * specification dictates that the PATH_TRANSLATED metavariable
-        * SHOULD NOT be defined.
-        *
-        */
-
-        if (sPathInfoCGI != null && !("".equals(sPathInfoCGI))) {
-            sPathTranslatedCGI = getContext().getRealPath(sPathInfoCGI);
-        } else {
-            sPathTranslatedCGI = null;
-        }
-        if (sPathTranslatedCGI == null || "".equals(sPathTranslatedCGI)) {
-            //NOOP
-        } else {
-            envp.put("PATH_TRANSLATED", nullsToBlanks(sPathTranslatedCGI));
-        }
-        envp.put("SCRIPT_NAME", nullsToBlanks(sCGIScriptName));
-        envp.put("QUERY_STRING", nullsToBlanks(req.getQueryString()));
-        envp.put("REMOTE_HOST", nullsToBlanks(req.getRemoteHost()));
-        envp.put("REMOTE_ADDR", nullsToBlanks(req.getRemoteAddr()));
-        envp.put("AUTH_TYPE", nullsToBlanks(req.getAuthType()));
-        envp.put("REMOTE_USER", nullsToBlanks(req.getRemoteUser()));
-        envp.put("REMOTE_IDENT", ""); //not necessary for full compliance
-        envp.put("CONTENT_TYPE", nullsToBlanks(req.getContentType()));
-
-        /* Note CGI spec says CONTENT_LENGTH must be NULL ("") or undefined
-        * if there is no content, so we cannot put 0 or -1 in as per the
-        * Servlet API spec.
-        */
-
-        int contentLength = req.getContentLength();
-        String sContentLength = (contentLength <= 0 ? "" : (
-            new Integer(contentLength)).toString());
-        envp.put("CONTENT_LENGTH", sContentLength);
-        Enumeration headers = req.getHeaderNames();
-        String header = null;
-        while (headers.hasMoreElements()) {
-            header = null;
-            header = ((String)headers.nextElement()).toUpperCase();
-            //REMIND: rewrite multiple headers as if received as single
-            //REMIND: change character set
-            //REMIND: I forgot what the previous REMIND means
-            if ("AUTHORIZATION".equalsIgnoreCase(header)
-                || "PROXY_AUTHORIZATION".equalsIgnoreCase(header)) {
-                    //NOOP per CGI specification section 11.2
-            } else if ("HOST".equalsIgnoreCase(header)) {
-                String host = req.getHeader(header);
-                envp.put("HTTP_" + header.replace('-', '_'),
-                    host.substring(0, host.indexOf(":")));
-            } else {
-                envp.put("HTTP_" + header.replace('-', '_'),
-                    req.getHeader(header));
-            }
-        }
-        command = sCGIFullPath;
-        workingDirectory = new File(command.substring(0,
-            command.lastIndexOf(File.separator)));
-        envp.put("X_TOMCAT_COMMAND_PATH", command); //for kicks
-        this.setEnvironment(envp);
-        return true;
-    }
-
-
-    /**
-     * Resolves core information about the cgi script. <p> Example URI:
-     * <PRE> /servlet/cgigateway/dir1/realCGIscript/pathinfo1 </PRE> <ul>
-     * <LI><b>path</b> = $CATALINA_HOME/mywebapp/dir1/realCGIscript
-     * <LI><b>scriptName</b> = /servlet/cgigateway/dir1/realCGIscript</LI>
-     * <LI><b>cgiName</b> = /dir1/realCGIscript
-     * <LI><b>name</b> = realCGIscript
-     * </ul>
-     * </p>
-     * <p>
-     * CGI search algorithm: search the real path below
-     * &lt;my-webapp-root&gt; and find the first non-directory in
-     * the getPathTranslated("/"), reading/searching from left-to-right.
-     * </p>
-     * <p>
-     * The CGI search path will start at
-     * webAppRootDir + File.separator + cgiPathPrefix (or webAppRootDir
-     * alone if cgiPathPrefix is null).
-     * </p>
-     * <p>
-     * cgiPathPrefix is usually set by the calling servlet to the servlet's
-     * cgiPathPrefix init parameter
-     * </p>
-     *
-     * @param pathInfo       String from HttpServletRequest.getPathInfo()
-     * @param webAppRootDir  String from context.getRealPath("/")
-     * @param contextPath    String as from HttpServletRequest.getContextPath()
-     * @param servletPath    String as from HttpServletRequest.getServletPath()
-     * @param cgiPathPrefix  subdirectory of webAppRootDir below which the
-     *                       web app's CGIs may be stored; can be null.
-     * @return
-     * <ul> <li> <code>path</code>  -    full file-system path to valid cgi
-     *                                   script, or null if no cgi was found
-     * <li> <code>scriptName</code> -    CGI variable SCRIPT_NAME; the full
-     *                                   URL path to valid cgi script or
-     *                                   null if no cgi was found
-     * <li> <code>cgiName</code>    -    servlet pathInfo fragment
-     *                                   corresponding to the cgi script
-     *                                   itself, or null if not found
-     * <li> <code>name</code>       -    simple name (no directories) of
-     *                                   the cgi script, or null if no cgi
-     *                                   was found
-     * </ul>
-     * @since Tomcat 4.0
-     */
-    protected String[] findCGI(String pathInfo, String webAppRootDir,
-        String contextPath, String servletPath, String cgiPathPrefix) {
-            String path = null;
-            String name = null;
-            String scriptname = null;
-            String cginame = null;
-            if ((webAppRootDir != null)
-                && (webAppRootDir.lastIndexOf("/")
-                == (webAppRootDir.length() - 1))) {
-                    //strip the trailing "/" from the webAppRootDir
-                    webAppRootDir =
-                        webAppRootDir.substring(0,
-                        (webAppRootDir.length() - 1));
-            }
-            if (cgiPathPrefix != null) {
-                webAppRootDir = webAppRootDir + File.separator
-                    + cgiPathPrefix;
-            }
-            
-            if (log.isDebugEnabled()) {
-                log.debug("findCGI: start = [" + webAppRootDir
-                    + "], pathInfo = [" + pathInfo + "] ");
-            }
-            File currentLocation = new File(webAppRootDir);
-            StringTokenizer dirWalker = new StringTokenizer(pathInfo, "/");
-            while (!currentLocation.isFile() && dirWalker.hasMoreElements()) {
-                currentLocation = new
-                    File(currentLocation, (String) dirWalker.nextElement());
-                if (log.isDebugEnabled())  {
-                    log.debug("findCGI: traversing to [" + currentLocation + "]");
-                }
-            }
-            if (!currentLocation.isFile()) {
-                return new String[] { null, null, null, null };
-            } else {
-                if (log.isDebugEnabled())  {
-                    log.debug("findCGI: FOUND cgi at [" + currentLocation + "]");
-                }
-                path = currentLocation.getAbsolutePath();
-                name = currentLocation.getName();
-                cginame = currentLocation.getParent()
-                    .substring(webAppRootDir.length())
-                    + File.separator + name;
-                    if (".".equals(contextPath)) {
-                        scriptname = servletPath + cginame;
-                } else {
-                    scriptname = contextPath + servletPath + cginame;
-                }
-            }
-            if (log.isDebugEnabled())  {
-                log.debug("findCGI calc: name=" + name + ", path=" + path
-                    + ", scriptname=" + scriptname + ", cginame=" + cginame);
-            }
-            return new String[] { path, scriptname, cginame, name };
-    }
-
-
-    /**
-     * Print important CGI environment information in an
-     * easy-to-read HTML table
-     * @return  HTML string containing CGI environment info
-     */
-    public String toString() {
-        StringBuffer sb = new StringBuffer();
-        sb.append("<TABLE border=2>");
-        sb.append("<tr><th colspan=2 bgcolor=grey>");
-        sb.append("ProcessEnvironment Info</th></tr>");
-        sb.append("<tr><td>Debug Level</td><td>");
-        sb.append(debug);
-        sb.append("</td></tr>");
-        sb.append("<tr><td>Validity:</td><td>");
-        sb.append(isValid());
-        sb.append("</td></tr>");
-        if (isValid()) {
-            Enumeration envk = env.keys();
-            while (envk.hasMoreElements()) {
-                String s = (String)envk.nextElement();
-                sb.append("<tr><td>");
-                sb.append(s);
-                sb.append("</td><td>");
-                sb.append(blanksToString((String)env.get(s),
-                    "[will be set to blank]"));
-                    sb.append("</td></tr>");
-            }
-        }
-        sb.append("<tr><td colspan=2><HR></td></tr>");
-        sb.append("<tr><td>Derived Command</td><td>");
-        sb.append(nullsToBlanks(command));
-        sb.append("</td></tr>");
-        sb.append("<tr><td>Working Directory</td><td>");
-        if (workingDirectory != null) {
-            sb.append(workingDirectory.toString());
-        }
-        sb.append("</td></tr>");
-        sb.append("<tr><td colspan=2>Query Params</td></tr>");
-        Enumeration paramk = queryParameters.keys();
-        while (paramk.hasMoreElements()) {
-            String s = paramk.nextElement().toString();
-            sb.append("<tr><td>");
-            sb.append(s);
-            sb.append("</td><td>");
-            sb.append(queryParameters.get(s).toString());
-            sb.append("</td></tr>");
-        }
-
-        sb.append("</TABLE><p>end.");
-        return sb.toString();
-    }
-
-
-    /**
-     * Gets process' derived query parameters
-     * @return   process' query parameters
-     */
-    public Hashtable getParameters() {
-        return queryParameters;
-    }
-
-}

==================================================
ProcessHelper.java
deleted file mode 100644
index d97f775e04..0000000000
--- a/java/org/apache/catalina/util/ProcessEnvironment.java
+++ /dev/null
@@ -1,315 +0,0 @@
-/*
- * Copyright 1999,2004 The Apache Software Foundation.
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.catalina.util;
-
-import java.io.File;
-import java.util.Enumeration;
-import java.util.Hashtable;
-
-import javax.servlet.ServletContext;
-import javax.servlet.http.HttpServletRequest;
-
-
-
-/**
- * Encapsulates the Process environment and rules to derive
- * that environment from the servlet container and request information.
- * @author   Martin Dengler [root@martindengler.com]
- * @version  $Revision: 303236 $, $Date: 2004-09-17 01:19:54 +0200 (ven., 17 sept. 2004) $
- * @since    Tomcat 4.0
- */
-public class ProcessEnvironment {
-    
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( ProcessEnvironment.class );
-    
-    /** context of the enclosing servlet */
-    private ServletContext context = null;
-
-    /** real file system directory of the enclosing servlet's web app */
-    private String webAppRootDir = null;
-
-    /** context path of enclosing servlet */
-    private String contextPath = null;
-
-    /** pathInfo for the current request */
-    protected String pathInfo = null;
-
-    /** servlet URI of the enclosing servlet */
-    private String servletPath = null;
-
-    /** derived process environment */
-    protected Hashtable env = null;
-
-    /** command to be invoked */
-    protected String command = null;
-
-    /** whether or not this object is valid or not */
-    protected boolean valid = false;
-
-    /** the debugging detail level for this instance. */
-    protected int debug = 0;
-
-    /** process' desired working directory */
-    protected File workingDirectory = null;
-
-
-    /**
-     * Creates a ProcessEnvironment and derives the necessary environment,
-     * working directory, command, etc.
-     * @param  req       HttpServletRequest for information provided by
-     *                   the Servlet API
-     * @param  context   ServletContext for information provided by
-     *                   the Servlet API
-     */
-    public ProcessEnvironment(HttpServletRequest req,
-        ServletContext context) {
-        this(req, context, 0);
-    }
-
-
-    /**
-     * Creates a ProcessEnvironment and derives the necessary environment,
-     * working directory, command, etc.
-     * @param  req       HttpServletRequest for information provided by
-     *                   the Servlet API
-     * @param  context   ServletContext for information provided by
-     *                   the Servlet API
-     * @param  debug     int debug level (0 == none, 4 == medium, 6 == lots)
-     */
-    public ProcessEnvironment(HttpServletRequest req,
-        ServletContext context, int debug) {
-            this.debug = debug;
-            setupFromContext(context);
-            setupFromRequest(req);
-            this.valid = deriveProcessEnvironment(req);
-            if (log.isDebugEnabled()) 
-                log.debug(this.getClass().getName() + "() ctor, debug level " + 
-                          debug);
-    }
-
-
-    /**
-     * Uses the ServletContext to set some process variables
-     * @param  context   ServletContext for information provided by
-     *                   the Servlet API
-     */
-    protected void setupFromContext(ServletContext context) {
-        this.context = context;
-        this.webAppRootDir = context.getRealPath("/");
-    }
-
-
-    /**
-     * Uses the HttpServletRequest to set most process variables
-     * @param  req   HttpServletRequest for information provided by
-     *               the Servlet API
-     */
-    protected void setupFromRequest(HttpServletRequest req) {
-        this.contextPath = req.getContextPath();
-        this.pathInfo = req.getPathInfo();
-        this.servletPath = req.getServletPath();
-    }
-
-
-    /**
-     * Print important process environment information in an
-     * easy-to-read HTML table
-     * @return  HTML string containing process environment info
-     */
-    public String toString() {
-        StringBuffer sb = new StringBuffer();
-        sb.append("<TABLE border=2>");
-        sb.append("<tr><th colspan=2 bgcolor=grey>");
-        sb.append("ProcessEnvironment Info</th></tr>");
-        sb.append("<tr><td>Debug Level</td><td>");
-        sb.append(debug);
-        sb.append("</td></tr>");
-        sb.append("<tr><td>Validity:</td><td>");
-        sb.append(isValid());
-        sb.append("</td></tr>");
-        if (isValid()) {
-            Enumeration envk = env.keys();
-            while (envk.hasMoreElements()) {
-                String s = (String)envk.nextElement();
-                sb.append("<tr><td>");
-                sb.append(s);
-                sb.append("</td><td>");
-                sb.append(blanksToString((String)env.get(s),
-                    "[will be set to blank]"));
-                    sb.append("</td></tr>");
-            }
-        }
-        sb.append("<tr><td colspan=2><HR></td></tr>");
-        sb.append("<tr><td>Derived Command</td><td>");
-        sb.append(nullsToBlanks(command));
-        sb.append("</td></tr>");
-        sb.append("<tr><td>Working Directory</td><td>");
-        if (workingDirectory != null) {
-            sb.append(workingDirectory.toString());
-        }
-        sb.append("</td></tr>");
-        sb.append("</TABLE><p>end.");
-        return sb.toString();
-    }
-
-
-    /**
-     * Gets derived command string
-     * @return  command string
-     */
-    public String getCommand() {
-        return command;
-    }
-
-
-    /**
-     * Sets the desired command string
-     * @param   command String command as desired
-     * @return  command string
-     */
-    protected String setCommand(String command) {
-        return command;
-    }
-
-
-    /**
-     * Gets this process' derived working directory
-     * @return  working directory
-     */
-    public File getWorkingDirectory() {
-        return workingDirectory;
-    }
-
-
-    /**
-     * Gets process' environment
-     * @return   process' environment
-     */
-    public Hashtable getEnvironment() {
-        return env;
-    }
-
-
-    /**
-     * Sets process' environment
-     * @param    env process' environment
-     * @return   Hashtable to which the process' environment was set
-     */
-    public Hashtable setEnvironment(Hashtable env) {
-        this.env = env;
-        return this.env;
-    }
-
-
-    /**
-     * Gets validity status
-     * @return   true if this environment is valid, false otherwise
-     */
-    public boolean isValid() {
-        return valid;
-    }
-
-
-    /**
-     * Converts null strings to blank strings ("")
-     * @param    s string to be converted if necessary
-     * @return   a non-null string, either the original or the empty string
-     *           ("") if the original was <code>null</code>
-     */
-    protected String nullsToBlanks(String s) {
-        return nullsToString(s, "");
-    }
-
-
-    /**
-     * Converts null strings to another string
-     * @param    couldBeNull string to be converted if necessary
-     * @param    subForNulls string to return instead of a null string
-     * @return   a non-null string, either the original or the substitute
-     *           string if the original was <code>null</code>
-     */
-    protected String nullsToString(String couldBeNull, String subForNulls) {
-        return (couldBeNull == null ? subForNulls : couldBeNull);
-    }
-
-
-    /**
-     * Converts blank strings to another string
-     * @param    couldBeBlank string to be converted if necessary
-     * @param    subForBlanks string to return instead of a blank string
-     * @return   a non-null string, either the original or the substitute
-     *           string if the original was <code>null</code> or empty ("")
-     */
-    protected String blanksToString(String couldBeBlank,
-        String subForBlanks) {
-            return (("".equals(couldBeBlank) || couldBeBlank == null) ?
-                subForBlanks : couldBeBlank);
-    }
-
-
-    /**
-     * Constructs the Process environment to be supplied to the invoked
-     * process.  Defines an environment no environment variables.
-     * <p>
-     * Should be overriden by subclasses to perform useful setup.
-     * </p>
-     *
-     * @param    req request associated with the
-     *           Process' invocation
-     * @return   true if environment was set OK, false if there was a problem
-     *           and no environment was set
-     */
-    protected boolean deriveProcessEnvironment(HttpServletRequest req) {
-
-        Hashtable envp = new Hashtable();
-        command = getCommand();
-        if (command != null) {
-            workingDirectory = new
-                File(command.substring(0,
-                command.lastIndexOf(File.separator)));
-                envp.put("X_TOMCAT_COMMAND_PATH", command); //for kicks
-        }
-        this.env = envp;
-        return true;
-    }
-
-
-    /**
-     * Gets the root directory of the web application to which this process\
-     * belongs
-     * @return  root directory
-     */
-    public String getWebAppRootDir() {
-        return webAppRootDir;
-    }
-
-
-    public String getContextPath(){
-            return contextPath;
-        }
-
-
-    public ServletContext getContext(){
-            return context;
-        }
-
-
-    public String getServletPath(){
-            return servletPath;
-        }
-}

==================================================
