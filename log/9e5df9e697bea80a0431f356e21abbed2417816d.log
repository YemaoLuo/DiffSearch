9e5df9e697bea80a0431f356e21abbed2417816d
==================================================
Remove references to socketBuffer which appears only to have been used
==================================================
Mark Thomas
==================================================
Thu Jan 1 17:13:39 2015 +0000
==================================================
AbstractHttp11Processor.java
Remove references to socketBuffer which appears only to have been used
by BIO.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1648895 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractHttp11Protocol.java
index 2aaec401fd..b51a78d096 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -456,20 +456,6 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
         return disableUploadTimeout;
     }
 
-    /**
-     * Set the socket buffer flag.
-     */
-    public void setSocketBuffer(int socketBuffer) {
-        outputBuffer.setSocketBuffer(socketBuffer);
-    }
-
-    /**
-     * Get the socket buffer flag.
-     */
-    public int getSocketBuffer() {
-        return outputBuffer.getSocketBuffer();
-    }
-
     /**
      * Set the upload timeout.
      */

==================================================
AbstractOutputBuffer.java
index a074cf855e..feee77027e 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -36,13 +36,6 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     // ------------------------------------------------ HTTP specific properties
     // ------------------------------------------ managed in the ProtocolHandler
 
-    private int socketBuffer = 9000;
-    public int getSocketBuffer() { return socketBuffer; }
-    public void setSocketBuffer(int socketBuffer) {
-        this.socketBuffer = socketBuffer;
-    }
-
-
     /**
      * Maximum size of the post which will be saved when processing certain
      * requests, such as a POST.
@@ -239,7 +232,6 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
         processor.setNoCompressionUserAgents(getNoCompressionUserAgents());
         processor.setCompressableMimeTypes(getCompressableMimeTypes());
         processor.setRestrictedUserAgents(getRestrictedUserAgents());
-        processor.setSocketBuffer(getSocketBuffer());
         processor.setMaxSavePostSize(getMaxSavePostSize());
         processor.setServer(getServer());
     }

==================================================
