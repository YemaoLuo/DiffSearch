bd8ea9d0e46ccf1a6691c2acc3097f95594e0e2b
==================================================
Add getClassLoaderResources() support
==================================================
Mark Emlyn
==================================================
Mon Nov 4 23:54:37 2013 +0000
==================================================
WebResourceRoot.java
Add getClassLoaderResources() support

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1538809 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WebappClassLoader.java
index db82449919..c8d687874a 100644
--- a/java/org/apache/catalina/WebResourceRoot.java
+++ b/java/org/apache/catalina/WebResourceRoot.java
@@ -96,7 +96,7 @@ public interface WebResourceRoot extends Lifecycle {
     WebResource getResource(String path);
 
     /**
-     * Obtain the object(s) that represent the resource at the given path. Note
+     * Obtain the objects that represent the resource at the given path. Note
      * that the resource at that path may not exist. If the path does not
      * exist, the WebResource returned will be associated with the main
      * WebResourceSet. This will include all matches even if the resource would
@@ -106,7 +106,7 @@ public interface WebResourceRoot extends Lifecycle {
      * @param path  The path for the resource of interest relative to the root
      *              of the web application. It must start with '/'.
      *
-     * @return  The object that represents the resource at the given path
+     * @return  The objects that represents the resource at the given path
      */
     WebResource[] getResources(String path);
 
@@ -126,6 +126,23 @@ public interface WebResourceRoot extends Lifecycle {
      */
     WebResource getClassLoaderResource(String path);
 
+    /**
+     * Obtain the objects that represent the class loader resource at the given
+     * path. Note that the resource at that path may not exist. If the path does
+     * not exist, the WebResource returned will be associated with the main
+     * WebResourceSet. This will include all matches even if the resource would
+     * not normally be accessible (e.g. because it was overridden by another
+     * resource)
+     *
+     * @param path  The path for the class loader resource of interest relative
+     *              to the root of the class loader resources for the web
+     *              application. It must start with '/'.
+     *
+     * @return  The objects that represents the class loader resources at the
+     *          given path
+     */
+    WebResource[] getClassLoaderResources(String path);
+
     /**
      * Obtain the list of the names of all of the files and directories located
      * in the specified directory.

==================================================
StandardRoot.java
index 8dfd487147..82fa32461a 100644
--- a/java/org/apache/catalina/loader/WebappClassLoader.java
+++ b/java/org/apache/catalina/loader/WebappClassLoader.java
@@ -1163,36 +1163,13 @@ public class WebappClassLoader extends URLClassLoader
 
         LinkedHashSet<URL> result = new LinkedHashSet<>();
 
-        int jarFilesLength = jarFiles.length;
-
-        // Looking at the repository
-        // TODO Add support to WebResourceRoot for looking up class loader
-        //      resoucres
-        WebResource[] webResources = resources.getResources("/WEB-INF/classes/" + name);
+        WebResource[] webResources = resources.getClassLoaderResources("/" + name);
         for (WebResource webResource : webResources) {
             if (webResource.exists()) {
                 result.add(webResource.getURL());
             }
         }
 
-        // Looking at the JAR files
-        synchronized (jarFiles) {
-            if (openJARs()) {
-                for (int i = 0; i < jarFilesLength; i++) {
-                    JarEntry jarEntry = jarFiles[i].getJarEntry(name);
-                    if (jarEntry != null) {
-                        try {
-                            String jarFakeUrl = getURI(jarRealFiles[i]).toString();
-                            jarFakeUrl = "jar:" + jarFakeUrl + "!/" + name;
-                            result.add(new URL(jarFakeUrl));
-                        } catch (MalformedURLException e) {
-                            // Ignore
-                        }
-                    }
-                }
-            }
-        }
-
         return Collections.enumeration(result);
     }
 
@@ -2832,17 +2809,18 @@ public class WebappClassLoader extends URLClassLoader
         if ((entry == null) && (notFoundResources.containsKey(name)))
             return null;
 
+        if (entry == null) {
+            synchronized (notFoundResources) {
+                notFoundResources.put(name, name);
+            }
+            return null;
+        }
+
         JarEntry jarEntry = null;
 
         synchronized (jarFiles) {
 
             try {
-                if (entry == null) {
-                    synchronized (notFoundResources) {
-                        notFoundResources.put(name, name);
-                    }
-                    return null;
-                }
 
                 /* Only cache the binary content if there is some content
                  * available and either:

==================================================
