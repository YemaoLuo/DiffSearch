0c6c3d2ebccb7400f904c5093450696b9e243746
==================================================
Track listeners added by the FrameworkListener to remove them later
==================================================
remm remm@apache.org
==================================================
Mon Jun 3 18:02:54 2019 +0200
==================================================
ContainerBase.java
Track listeners added by the FrameworkListener to remove them later

Avoid duplicate REMOVE_CHILD_EVENT notification, one for removeChild and
a recursive one in child.destroy.


==================================================
FrameworkListener.java
index 8bbfaf8d12..ad99bf3fad 100644
--- a/java/org/apache/catalina/core/ContainerBase.java
+++ b/java/org/apache/catalina/core/ContainerBase.java
@@ -808,18 +808,22 @@ public abstract class ContainerBase extends LifecycleMBeanBase
             log.error(sm.getString("containerBase.child.stop"), e);
         }
 
+        boolean destroy = false;
         try {
             // child.destroy() may have already been called which would have
             // triggered this call. If that is the case, no need to destroy the
             // child again.
             if (!LifecycleState.DESTROYING.equals(child.getState())) {
                 child.destroy();
+                destroy = true;
             }
         } catch (LifecycleException e) {
             log.error(sm.getString("containerBase.child.destroy"), e);
         }
 
-        fireContainerEvent(REMOVE_CHILD_EVENT, child);
+        if (!destroy) {
+            fireContainerEvent(REMOVE_CHILD_EVENT, child);
+        }
 
         synchronized(children) {
             if (children.get(child.getName()) == null)

==================================================
ThreadLocalLeakPreventionListener.java
index 6e1944d68b..ba85ccb974 100644
--- a/java/org/apache/catalina/core/FrameworkListener.java
+++ b/java/org/apache/catalina/core/FrameworkListener.java
@@ -17,6 +17,8 @@
 
 package org.apache.catalina.core;
 
+import java.util.concurrent.ConcurrentHashMap;
+
 import org.apache.catalina.Container;
 import org.apache.catalina.ContainerEvent;
 import org.apache.catalina.ContainerListener;
@@ -36,6 +38,9 @@ import org.apache.catalina.Service;
  */
 public abstract class FrameworkListener implements LifecycleListener, ContainerListener {
 
+    protected final ConcurrentHashMap<Context, LifecycleListener> contextListeners =
+            new ConcurrentHashMap<>();
+
     /**
      * Create a lifecycle listener which will then be added to the specified context.
      * @param context the associated Context
@@ -71,7 +76,6 @@ public abstract class FrameworkListener implements LifecycleListener, ContainerL
                 registerListenersForEngine(engine);
             }
         }
-
     }
 
     protected void registerListenersForEngine(Engine engine) {
@@ -90,7 +94,9 @@ public abstract class FrameworkListener implements LifecycleListener, ContainerL
     }
 
     protected void registerContextListener(Context context) {
-        context.addLifecycleListener(createLifecycleListener(context));
+        LifecycleListener listener = createLifecycleListener(context);
+        contextListeners.put(context, listener);
+        context.addLifecycleListener(listener);
     }
 
     protected void processContainerAddChild(Container child) {
@@ -104,7 +110,12 @@ public abstract class FrameworkListener implements LifecycleListener, ContainerL
     }
 
     protected void processContainerRemoveChild(Container child) {
-        if (child instanceof Host || child instanceof Engine) {
+        if (child instanceof Context) {
+            LifecycleListener listener = contextListeners.remove(child);
+            if (listener != null) {
+                child.removeLifecycleListener(listener);
+            }
+        } else if (child instanceof Host || child instanceof Engine) {
             child.removeContainerListener(this);
         }
     }

==================================================
