fb5e3370f6e4b5370b1c78bf58644d5cfde21964
==================================================
isCloseRequired -> Closed
==================================================
Mark Thomas
==================================================
Sun Feb 22 18:49:22 2015 +0000
==================================================
UpgradeProcessor.java
index 9cb3a5a056..c9595bd565 100644
--- a/java/org/apache/coyote/http11/upgrade/LocalStrings.properties
+++ b/java/org/apache/coyote/http11/upgrade/LocalStrings.properties
@@ -25,11 +25,13 @@ upgrade.sis.isReady.ise=It is illegal to call isReady() when the ServletInputStr
 upgrade.sis.onErrorFail=onError processing for the registered ReadListener triggered this further error which was swallowed
 upgrade.sis.readListener.null=It is illegal to pass null to setReadListener()
 upgrade.sis.readListener.set=It is illegal to call setReadListener() more than once for the same upgraded connection
+upgrade.sis.read.closed=The InputStream has been closed
 upgrade.sis.read.ise=It is illegal to call any of the read() methods in non-blocking mode without first checking that there is data available by calling isReady()
 upgrade.sos.errorCloseFail=Failed to close OutputStream cleanly after a previous error
 upgrade.sos.canWrite.ise=It is illegal to call canWrite() when the ServletOutputStream is not in non-blocking mode (i.e. setWriteListener() must be called first)
 upgrade.sos.onErrorFail=onError processing for the registered WriteListener triggered this further error which was swallowed
 upgrade.sos.writeListener.null=It is illegal to pass null to setWriteListener()
 upgrade.sos.writeListener.set=It is illegal to call setWriteListener() more than once for the same upgraded connection
+upgrade.sos.write.closed=The OutputStream has been closed
 upgrade.sos.write.ise=It is illegal to call any of the write() methods in non-blocking mode without first checking that there is space available by calling isReady()
 

==================================================
UpgradeServletInputStream.java
index 6c05a34750..1eff8bb15e 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeProcessor.java
@@ -123,12 +123,12 @@ public class UpgradeProcessor implements Processor, WebConnection {
             }
             return SocketState.CLOSED;
         }
-        if (upgradeServletInputStream.isCloseRequired() ||
-                upgradeServletOutputStream.isCloseRequired()) {
+        if (upgradeServletInputStream.isClosed() ||
+                upgradeServletOutputStream.isClosed()) {
             if (log.isDebugEnabled()) {
                 log.debug(sm.getString("upgradeProcessor.requiredClose",
-                        Boolean.valueOf(upgradeServletInputStream.isCloseRequired()),
-                        Boolean.valueOf(upgradeServletOutputStream.isCloseRequired())));
+                        Boolean.valueOf(upgradeServletInputStream.isClosed()),
+                        Boolean.valueOf(upgradeServletOutputStream.isClosed())));
             }
             return SocketState.CLOSED;
         }

==================================================
UpgradeServletOutputStream.java
index 69152f2fb5..865682f448 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeServletInputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeServletInputStream.java
@@ -35,7 +35,7 @@ public class UpgradeServletInputStream extends ServletInputStream {
 
     private final SocketWrapperBase<?> socketWrapper;
 
-    private volatile boolean closeRequired = false;
+    private volatile boolean closed = false;
     // Start in blocking-mode
     private volatile Boolean ready = Boolean.TRUE;
     private volatile ReadListener listener = null;
@@ -66,6 +66,10 @@ public class UpgradeServletInputStream extends ServletInputStream {
                     sm.getString("upgrade.sis.isReady.ise"));
         }
 
+        if (closed) {
+            return false;
+        }
+
         // If we already know the current state, return it.
         if (ready != null) {
             return ready.booleanValue();
@@ -90,6 +94,10 @@ public class UpgradeServletInputStream extends ServletInputStream {
             throw new IllegalArgumentException(
                     sm.getString("upgrade.sis.readListener.set"));
         }
+        if (closed) {
+            throw new IllegalStateException(sm.getString("upgrade.sis.read.closed"));
+        }
+
         this.listener = listener;
         this.applicationLoader = Thread.currentThread().getContextClassLoader();
         // Switching to non-blocking. Don't know if data is available.
@@ -132,7 +140,7 @@ public class UpgradeServletInputStream extends ServletInputStream {
         try {
             return socketWrapper.read(listener == null, b, off, len);
         } catch (IOException ioe) {
-            closeRequired = true;
+            close();
             throw ioe;
         }
     }
@@ -141,14 +149,16 @@ public class UpgradeServletInputStream extends ServletInputStream {
 
     @Override
     public void close() throws IOException {
-        closeRequired = true;
+        closed = true;
     }
 
 
     private void preReadChecks() {
         if (listener != null && (ready == null || !ready.booleanValue())) {
-            throw new IllegalStateException(
-                    sm.getString("upgrade.sis.read.ise"));
+            throw new IllegalStateException(sm.getString("upgrade.sis.read.ise"));
+        }
+        if (closed) {
+            throw new IllegalStateException(sm.getString("upgrade.sis.read.closed"));
         }
         // No longer know if data is available
         ready = null;
@@ -163,7 +173,7 @@ public class UpgradeServletInputStream extends ServletInputStream {
         try {
             result = socketWrapper.read(listener == null, b, 0, 1);
         } catch (IOException ioe) {
-            closeRequired = true;
+            close();
             throw ioe;
         }
         if (result == 0) {
@@ -224,7 +234,7 @@ public class UpgradeServletInputStream extends ServletInputStream {
     }
 
 
-    final boolean isCloseRequired() {
-        return closeRequired;
+    final boolean isClosed() {
+        return closed;
     }
 }

==================================================
