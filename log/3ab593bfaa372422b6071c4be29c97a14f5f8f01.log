3ab593bfaa372422b6071c4be29c97a14f5f8f01
==================================================
Fix BZ 65736 replace forceString with a String setter lookup
==================================================
Mark Thomas
==================================================
Wed Mar 30 12:37:26 2022 +0100
==================================================
BeanFactory.java
Fix BZ 65736 replace forceString with a String setter lookup


==================================================
TestBeanFactory.java
index a4d1d570f7..cbd43355ee 100644
--- a/java/org/apache/naming/factory/LocalStrings.properties
+++ b/java/org/apache/naming/factory/LocalStrings.properties
@@ -14,6 +14,7 @@
 # limitations under the License.
 
 beanFactory.classNotFound=Class not found: [{0}]
+beanFactory.noForceString=The forceString option has been removed as a security hardening measure. Instead, if the setter method doesn't use String, a primitive or a primitive wrapper, the factory will look for a method with the same name as the setter that accepts a String and use that if found.
 beanFactory.noSetMethod=No set method found for property [{0}]
 beanFactory.noStringConversion=String conversion for property [{0}] of type [{1}] not available
 beanFactory.readOnlyProperty=Write not allowed for property [{0}]

==================================================
TesterBean.java
new file mode 100644
index 0000000000..ec85ff6136
--- /dev/null
+++ b/test/org/apache/naming/factory/TestBeanFactory.java
@@ -0,0 +1,67 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.naming.factory;
+
+import javax.naming.StringRefAddr;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.apache.naming.ResourceRef;
+
+public class TestBeanFactory {
+
+    private static final String IP_ADDRESS = "127.0.0.1";
+
+    @Test
+    public void testForceStringAlternativeWithout() throws Exception {
+        doTestForceStringAlternatove(false);
+    }
+
+
+    @Test
+    public void testForceStringAlternativeWith() throws Exception {
+        doTestForceStringAlternatove(true);
+    }
+
+
+    private void doTestForceStringAlternatove(boolean useForceString) throws Exception {
+
+        // Create the resource definition
+        ResourceRef resourceRef = new ResourceRef(TesterBean.class.getName(), null, null, null, false);
+        StringRefAddr server = new StringRefAddr("server", IP_ADDRESS);
+        resourceRef.add(server);
+        if (useForceString) {
+            StringRefAddr force = new StringRefAddr("forceString", "server");
+            resourceRef.add(force);
+        }
+
+        // Create the factory
+        BeanFactory factory = new BeanFactory();
+
+        // Use the factory to create the resource from the definition
+        Object obj = factory.getObjectInstance(resourceRef, null, null, null);
+
+        // Check the correct type was created
+        Assert.assertNotNull(obj);
+        Assert.assertEquals(obj.getClass(), TesterBean.class);
+        // Check the server field was set
+        TesterBean result = (TesterBean) obj;
+        Assert.assertNotNull(result.getServer());
+        Assert.assertEquals(IP_ADDRESS, result.getServer().getHostAddress());
+    }
+}

==================================================
