dfafe935fb136cce78d47936f812119476072094
==================================================
Extend clean-up to Server
==================================================
Mark Emlyn
==================================================
Thu Feb 2 10:32:34 2012 +0000
==================================================
Server.java
Extend clean-up to Server

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1239522 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ContainerBase.java
index 5114ab3451..dc4e10ffa4 100644
--- a/java/org/apache/catalina/Server.java
+++ b/java/org/apache/catalina/Server.java
@@ -18,6 +18,8 @@
 
 package org.apache.catalina;
 
+import java.io.File;
+
 import org.apache.catalina.deploy.NamingResources;
 import org.apache.catalina.startup.Catalina;
 
@@ -139,6 +141,34 @@ public interface Server extends Lifecycle {
      */
     public void setCatalina(Catalina catalina);
 
+
+    /**
+     * Obtain the configured base (instance) directory. Note that home and base
+     * may be the same (and are by default). If this is not set the value
+     * returned by {@link #getCatalinaHome()} will be used.
+     */
+    public File getCatalinaBase();
+
+    /**
+     * Set the configured base (instance) directory. Note that home and base
+     * may be the same (and are by default).
+     */
+    public void setCatalinaBase(File catalinaBase);
+
+
+    /**
+     * Obtain the configured home (binary) directory. Note that home and base
+     * may be the same (and are by default).
+     */
+    public File getCatalinaHome();
+
+    /**
+     * Set the configured home (binary) directory. Note that home and base
+     * may be the same (and are by default).
+     */
+    public void setCatalinaHome(File catalinaHome);
+
+
     // --------------------------------------------------------- Public Methods
 
 

==================================================
StandardEngine.java
index 2872faecf7..26a3dd4c43 100644
--- a/java/org/apache/catalina/core/ContainerBase.java
+++ b/java/org/apache/catalina/core/ContainerBase.java
@@ -294,8 +294,6 @@ public abstract class ContainerBase extends LifecycleMBeanBase
     protected ThreadPoolExecutor startStopExecutor;
 
 
-    private File catalinaBase = null;
-
     // ------------------------------------------------------------- Properties
 
     @Override
@@ -1336,37 +1334,14 @@ public abstract class ContainerBase extends LifecycleMBeanBase
     }
 
 
-    public void setCatalinaBase(File catalinaBase) {
-        this.catalinaBase = catalinaBase;
-    }
-
-
     @Override
     public File getCatalinaBase() {
 
-        if (catalinaBase != null) {
-            return catalinaBase;
-        }
-
-        if (parent != null) {
-            return parent.getCatalinaBase();
-        }
-
-        String base = System.getProperty(Globals.CATALINA_BASE_PROP);
-
-        if (base == null) {
-            base = System.getProperty(Globals.CATALINA_HOME_PROP);
-        }
-
-        if (base == null) {
-            // In theory this should never happen. In 'standard' usage the start
-            // scripts will set the system property. In embedded usage either
-            // the system property will be set or it will be set explicitly.
+        if (parent == null) {
             return null;
         }
 
-        catalinaBase =new File(base).getAbsoluteFile();
-        return catalinaBase;
+        return parent.getCatalinaBase();
     }
 
 

==================================================
StandardServer.java
index c7a3d8bc3b..a334e24fc4 100644
--- a/java/org/apache/catalina/core/StandardEngine.java
+++ b/java/org/apache/catalina/core/StandardEngine.java
@@ -18,6 +18,7 @@ package org.apache.catalina.core;
 
 import java.beans.PropertyChangeEvent;
 import java.beans.PropertyChangeListener;
+import java.io.File;
 import java.util.Locale;
 import java.util.concurrent.atomic.AtomicReference;
 
@@ -33,6 +34,7 @@ import org.apache.catalina.LifecycleEvent;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleListener;
 import org.apache.catalina.Realm;
+import org.apache.catalina.Server;
 import org.apache.catalina.Service;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
@@ -354,6 +356,23 @@ public class StandardEngine extends ContainerBase implements Engine {
         return (ClassLoader.getSystemClassLoader());
     }
 
+
+    @Override
+    public File getCatalinaBase() {
+        if (service != null) {
+            Server s = service.getServer();
+            if (s != null) {
+                File base = s.getCatalinaBase();
+                if (base != null) {
+                    return base;
+                }
+            }
+        }
+        // Fall-back
+        return super.getCatalinaBase();
+    }
+
+
     // -------------------- JMX registration  --------------------
 
     @Override

==================================================
MBeanFactory.java
index d6d8e1f06c..90cc705aaf 100644
--- a/java/org/apache/catalina/core/StandardServer.java
+++ b/java/org/apache/catalina/core/StandardServer.java
@@ -18,6 +18,7 @@ package org.apache.catalina.core;
 
 import java.beans.PropertyChangeListener;
 import java.beans.PropertyChangeSupport;
+import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.InetAddress;
@@ -160,8 +161,12 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
      */
     private volatile ServerSocket awaitSocket = null;
 
-    // ------------------------------------------------------------- Properties
+    private File catalinaHome = null;
+
+    private File catalinaBase = null;
+
 
+    // ------------------------------------------------------------- Properties
 
     /**
      * Return the global naming resources context.
@@ -583,9 +588,37 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
     }
 
 
-    // --------------------------------------------------------- Public Methods
+    @Override
+    public File getCatalinaBase() {
+        if (catalinaBase != null) {
+            return catalinaBase;
+        }
+
+        catalinaBase = getCatalinaHome();
+        return catalinaBase;
+    }
 
 
+    @Override
+    public void setCatalinaBase(File catalinaBase) {
+        this.catalinaBase = catalinaBase;
+    }
+
+
+    @Override
+    public File getCatalinaHome() {
+        return catalinaHome;
+    }
+
+
+    @Override
+    public void setCatalinaHome(File catalinaHome) {
+        this.catalinaHome = catalinaHome;
+    }
+
+
+    // --------------------------------------------------------- Public Methods
+
     /**
      * Add a property change listener to this component.
      *

==================================================
Tomcat.java
index edef4325ba..e8b7158dc0 100644
--- a/java/org/apache/catalina/mbeans/MBeanFactory.java
+++ b/java/org/apache/catalina/mbeans/MBeanFactory.java
@@ -683,7 +683,6 @@ public class MBeanFactory {
         engine.setDomain(domain);
         engine.setName(domain);
         engine.setDefaultHost(defaultHost);
-        engine.setCatalinaBase(new File(baseDir));
 
         Service service = new StandardService();
         service.setContainer(engine);

==================================================
