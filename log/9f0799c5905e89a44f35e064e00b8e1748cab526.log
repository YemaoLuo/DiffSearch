9f0799c5905e89a44f35e064e00b8e1748cab526
==================================================
Add some simple unit tests for goaway frames.
==================================================
Mark Thomas
==================================================
Wed Jul 1 13:53:52 2015 +0000
==================================================
HeaderSink.java
Add some simple unit tests for goaway frames.
These required several changes to HTTP/2 processing
- tracking pings to match ACKs with original pings
- tracking round trip time
- regular (every 10s) pings to track changes to round trip time
- differentiate between pausing and paused states

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1688655 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http2UpgradeHandler.java
new file mode 100644
index 0000000000..679fd6775e
--- /dev/null
+++ b/java/org/apache/coyote/http2/HeaderSink.java
@@ -0,0 +1,32 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.coyote.http2;
+
+import org.apache.coyote.http2.HpackDecoder.HeaderEmitter;
+
+/**
+ * Purpose of this class is to silently swallow any headers. It is used once
+ * the connection close process has started if headers for new streams are
+ * received.
+ */
+public class HeaderSink implements HeaderEmitter {
+
+    @Override
+    public void emitHeader(String name, String value, boolean neverIndex) {
+        // NO-OP
+    }
+}

==================================================
Http2TestBase.java
index cb6e6c535b..0c749ee867 100644
--- a/java/org/apache/coyote/http2/LocalStrings.properties
+++ b/java/org/apache/coyote/http2/LocalStrings.properties
@@ -61,6 +61,8 @@ http2Parser.processFrameWindowUpdate.invalidIncrement=Window update frame receiv
 http2Parser.processFrameWindowUpdate.invalidPayloadSize=Window update frame received with an invalid payload size of [{0}]
 http2Parser.swallow.debug=Connection [{0}], Stream [{1}], Swallowed [{2}] bytes
 
+pingManager.roundTripTime=Connection [{0}] Round trip time measured as [{1}]ns
+
 stream.closed=Connection [{0}], Stream [{1}], Unable to write to stream once it has been closed
 stream.header.debug=Connection [{0}], Stream [{1}], HTTP header [{2}], Value [{3}]
 stream.reprioritisation.debug=Connection [{0}], Stream [{1}], Exclusive [{2}], Parent [{3}], Weight [{4}]
@@ -75,12 +77,14 @@ streamStateMachine.invalidFrame=Connection [{0}], Stream [{1}], State [{2}], Fra
 upgradeHandler.allocate.debug=Connection [{0}], Stream [{1}], allocated [{2}] bytes
 upgradeHandler.allocate.left=Connection [{0}], Stream [{1}], [{2}] bytes unallocated - trying to allocate to children
 upgradeHandler.allocate.recipient=Connection [{0}], Stream [{1}], potential recipient [{2}] with weight [{3}]
+upgradeHandler.noNewStreams=Connection [{0}], Stream [{1}], Stream ignored as no new streams are permitted on this connection
 upgradeHandler.rst.debug=Connection [{0}], Stream [{1}], Error [{2}], RST (closing stream)
 upgradeHandler.goaway.debug=Connection [{0}], Goaway, Last stream [{1}], Error code [{2}], Debug data [{3}]
 upgradeHandler.init=Connection [{0}]
 upgradeHandler.invalidPreface=Connection [{0}], Invalid connection preface
 upgradeHandler.ioerror=Connection [{0}]
 upgradeHandler.pause.entry=Connection [{0}] Pausing
+upgradeHandler.pingFailed=Connection [{0}] Failed to send ping to client
 upgradeHandler.sendPrefaceFail=Failed to send preface to client
 upgradeHandler.socketCloseFailed=Error closing socket
 upgradeHandler.stream.closed=Stream [{0}] has been closed for some time

==================================================
TestHttp2Section_6_8.java
index 4580325b1a..a0caf0fe59 100644
--- a/test/org/apache/coyote/http2/Http2TestBase.java
+++ b/test/org/apache/coyote/http2/Http2TestBase.java
@@ -69,6 +69,12 @@ public abstract class Http2TestBase extends TomcatBaseTest {
     protected Http2Parser parser;
     protected OutputStream os;
 
+    private long pingAckDelayMillis = 0;
+
+
+    protected void setPingAckDelayMillis(long delay) {
+        pingAckDelayMillis = delay;
+    }
 
     /**
      * Standard setup. Creates HTTP/2 connection via HTTP upgrade and ensures
@@ -95,9 +101,11 @@ public abstract class Http2TestBase extends TomcatBaseTest {
         parser.readFrame(true);
         parser.readFrame(true);
         parser.readFrame(true);
+        parser.readFrame(true);
 
         Assert.assertEquals("0-Settings-End\n" +
                 "0-Settings-Ack\n" +
+                "0-Ping-[0,0,0,0,0,0,0,1]\n" +
                 getSimpleResponseTrace(1)
                 , output.getTrace());
         output.clearTrace();
@@ -489,6 +497,13 @@ public abstract class Http2TestBase extends TomcatBaseTest {
 
 
     void sendPing(int streamId, boolean ack, byte[] payload) throws IOException {
+        if (ack && pingAckDelayMillis > 0) {
+            try {
+                Thread.sleep(pingAckDelayMillis);
+            } catch (InterruptedException e) {
+                // Ignore
+            }
+        }
         byte[] pingHeader = new byte[9];
         // length
         ByteUtil.setThreeBytes(pingHeader, 0, payload.length);
@@ -643,7 +658,7 @@ public abstract class Http2TestBase extends TomcatBaseTest {
     }
 
 
-    static class TestOutput implements Output, HeaderEmitter {
+    class TestOutput implements Output, HeaderEmitter {
 
         private StringBuffer trace = new StringBuffer();
         private String lastStreamId = "0";
@@ -722,10 +737,12 @@ public abstract class Http2TestBase extends TomcatBaseTest {
 
 
         @Override
-        public void pingReceive(byte[] payload, boolean ack) {
+        public void pingReceive(byte[] payload, boolean ack) throws IOException {
             trace.append("0-Ping-");
             if (ack) {
                 trace.append("Ack-");
+            } else {
+                sendPing(0, true, payload);
             }
             trace.append('[');
             boolean first = true;

==================================================
