6d44f6aa52748df930f1563bb5598705eb75e1aa
==================================================
Fix double counting in tracking of in-flight async requests
==================================================
Mark Thomas
==================================================
Tue Sep 22 14:40:58 2020 +0100
==================================================
AsyncContextImpl.java
Fix double counting in tracking of in-flight async requests


==================================================
AsyncContextCallback.java
index 4d2dc4c6a1..b332922944 100644
--- a/java/org/apache/catalina/core/AsyncContextImpl.java
+++ b/java/org/apache/catalina/core/AsyncContextImpl.java
@@ -114,7 +114,6 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
         } finally {
             context.fireRequestDestroyEvent(request.getRequest());
             clearServletRequestResponse();
-            this.context.decrementInProgressAsyncCount();
             context.unbind(Globals.IS_SECURITY_ENABLED, oldCL);
         }
     }
@@ -207,16 +206,10 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
                     (AsyncDispatcher) requestDispatcher;
             final ServletRequest servletRequest = getRequest();
             final ServletResponse servletResponse = getResponse();
-            // https://bz.apache.org/bugzilla/show_bug.cgi?id=63246
-            // Take a local copy as the dispatch may complete the
-            // request/response and that in turn may trigger recycling of this
-            // object before the in-progress count can be decremented
-            final Context context = this.context;
             this.dispatch = new AsyncRunnable(
                     request, applicationDispatcher, servletRequest, servletResponse);
             this.request.getCoyoteRequest().action(ActionCode.ASYNC_DISPATCH, null);
             clearServletRequestResponse();
-            context.decrementInProgressAsyncCount();
         }
     }
 
@@ -458,6 +451,18 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
     }
 
 
+    @Override
+    public void incrementInProgressAsyncCount() {
+        context.incrementInProgressAsyncCount();
+    }
+
+
+    @Override
+    public void decrementInProgressAsyncCount() {
+        context.decrementInProgressAsyncCount();
+    }
+
+
     private void logDebug(String method) {
         String rHashCode;
         String crHashCode;

==================================================
AsyncStateMachine.java
index c1d742f5ce..9f9b925725 100644
--- a/java/org/apache/coyote/AsyncContextCallback.java
+++ b/java/org/apache/coyote/AsyncContextCallback.java
@@ -23,7 +23,7 @@ package org.apache.coyote;
  * org.apache.catalina package.
  */
 public interface AsyncContextCallback {
-    public void fireOnComplete();
+    void fireOnComplete();
 
     /**
      * Reports if the web application associated with this async request is
@@ -32,5 +32,21 @@ public interface AsyncContextCallback {
      * @return {@code true} if the associated web application is available,
      *         otherwise {@code false}
      */
-    public boolean isAvailable();
+    boolean isAvailable();
+
+    /**
+     * Used to notify the Context that async processing has started.
+     * Specifically, for the counting of in-progress async requests to work
+     * correctly, this must be called exactly once every time the
+     * {@link AsyncStateMachine} transitions from DISPATCHED to any other state.
+     */
+    void incrementInProgressAsyncCount();
+
+    /**
+     * Used to notify the Context that async processing has ended.
+     * Specifically, for the counting of in-progress async requests to work
+     * correctly, this must be called exactly once every time the
+     * {@link AsyncStateMachine} transitions to DISPATCHED from any other state.
+     */
+    void decrementInProgressAsyncCount();
 }

==================================================
