cfa7d933ba734869e8246100df8c231ec6b696cc
==================================================
Remove $Id keyword from files in catalina/tribes/**
==================================================
Konstantin Kolinko
==================================================
Fri Jan 24 19:05:01 2014 +0000
==================================================
ByteMessage.java
Remove $Id keyword from files in catalina/tribes/**

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1561115 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Channel.java
index 89f7b64f5a..91e6be808c 100644
--- a/java/org/apache/catalina/tribes/ByteMessage.java
+++ b/java/org/apache/catalina/tribes/ByteMessage.java
@@ -35,9 +35,7 @@ import java.io.ObjectOutput;
  * If you are using multiple applications on top of Tribes you should add some sort of header
  * so that you can decide with the <code>ChannelListener.accept()</code> whether this message was intended
  * for you.
- * @version $Id$
  */
-
 public class ByteMessage implements Externalizable {
     /**
      * Storage for the message to be sent

==================================================
ChannelException.java
index 0a81a8002d..2b05ca9e60 100644
--- a/java/org/apache/catalina/tribes/Channel.java
+++ b/java/org/apache/catalina/tribes/Channel.java
@@ -65,7 +65,6 @@ import java.io.Serializable;
  * </code></pre>
  *
  * For example usage @see org.apache.catalina.tribes.group.GroupChannel
- * @version $Id$
  */
 public interface Channel {
 

==================================================
ChannelInterceptor.java
index 6ce202f044..544eefb909 100644
--- a/java/org/apache/catalina/tribes/ChannelException.java
+++ b/java/org/apache/catalina/tribes/ChannelException.java
@@ -26,9 +26,7 @@ import java.util.ArrayList;
  * If an application is sending a message and some of the recipients fail to receive it,
  * the application can retrieve what recipients failed by using the <code>getFaultyMembers()</code>
  * method. This way, an application will always know if a message was delivered successfully or not.
- * @version $Id$
  */
-
 public class ChannelException extends Exception {
     private static final long serialVersionUID = 1L;
     /**

==================================================
ChannelReceiver.java
index 021ff64e02..37e2beff56 100644
--- a/java/org/apache/catalina/tribes/ChannelInterceptor.java
+++ b/java/org/apache/catalina/tribes/ChannelInterceptor.java
@@ -25,9 +25,7 @@ import org.apache.catalina.tribes.group.InterceptorPayload;
  * other actions when a message is sent or received.<br>
  * Interceptors are tied together in a linked list.
  * @see org.apache.catalina.tribes.group.ChannelInterceptorBase
- * @version $Id$
  */
-
 public interface ChannelInterceptor extends MembershipListener, Heartbeat {
 
     /**

==================================================
ChannelSender.java
index 5410f961e9..4484c6c7ff 100644
--- a/java/org/apache/catalina/tribes/ChannelReceiver.java
+++ b/java/org/apache/catalina/tribes/ChannelReceiver.java
@@ -23,7 +23,6 @@ package org.apache.catalina.tribes;
  * The <code>ChannelReceiver</code> interface is the data receiver component
  * at the bottom layer, the IO layer (for layers see the javadoc for the {@link Channel} interface).
  * This class may optionally implement a thread pool for parallel processing of incoming messages.
- * @version $Id$
  */
 public interface ChannelReceiver extends Heartbeat {
     public static final int MAX_UDP_SIZE = 65535;

==================================================
ManagedChannel.java
index c23156774d..5e14cf144e 100644
--- a/java/org/apache/catalina/tribes/ChannelSender.java
+++ b/java/org/apache/catalina/tribes/ChannelSender.java
@@ -26,7 +26,6 @@ import java.io.IOException;
  * at the bottom layer, the IO layer (for layers see the javadoc for the {@link Channel} interface).<br>
  * The channel sender must support "silent" members, ie, be able to send a message to a member
  * that is not in the membership, but is part of the destination parameter
- * @version $Id$
  */
 public interface ChannelSender extends Heartbeat
 {

==================================================
Member.java
index 1742ba9f22..3cbf4becb2 100644
--- a/java/org/apache/catalina/tribes/ManagedChannel.java
+++ b/java/org/apache/catalina/tribes/ManagedChannel.java
@@ -22,7 +22,6 @@ import java.util.Iterator;
  * Channel interface
  * A managed channel interface gives you access to the components of the channels
  * such as senders, receivers, interceptors etc for configurations purposes
- * @version $Id$
  */
 public interface ManagedChannel extends Channel {
 

==================================================
MembershipListener.java
index b59d7f9b45..4dccacc059 100644
--- a/java/org/apache/catalina/tribes/Member.java
+++ b/java/org/apache/catalina/tribes/Member.java
@@ -26,7 +26,6 @@ package org.apache.catalina.tribes;
  * The uniqueId defines the session id for the member. This is an important feature
  * since a member that has crashed and the starts up again on the same port/host is
  * not guaranteed to be the same member, so no state transfers will ever be confused
- * @version $Id$
  */
 public interface Member {
 

==================================================
MembershipService.java
index e73e9f1382..1641316739 100644
--- a/java/org/apache/catalina/tribes/MembershipListener.java
+++ b/java/org/apache/catalina/tribes/MembershipListener.java
@@ -21,11 +21,7 @@ package org.apache.catalina.tribes;
  * The MembershipListener interface is used as a callback to the
  * membership service. It has two methods that will notify the listener
  * when a member has joined the group and when a member has disappeared (crashed)
- *
- * @version $Id$
  */
-
-
 public interface MembershipListener {
     /**
      * A member was added to the group

==================================================
ChannelCoordinator.java
index 9f4dd430bf..7138686dd7 100644
--- a/java/org/apache/catalina/tribes/MembershipService.java
+++ b/java/org/apache/catalina/tribes/MembershipService.java
@@ -22,10 +22,7 @@ package org.apache.catalina.tribes;
  * MembershipService Interface<br>
  * The <code>MembershipService</code> interface is the membership component
  * at the bottom layer, the IO layer (for layers see the javadoc for the {@link Channel} interface).<br>
- * @version $Id$
  */
-
-
 public interface MembershipService {
 
     public static final int MBR_RX = Channel.MBR_RX_SEQ;

==================================================
ChannelInterceptorBase.java
index 095c3f2d03..1c92cd12a9 100644
--- a/java/org/apache/catalina/tribes/group/ChannelCoordinator.java
+++ b/java/org/apache/catalina/tribes/group/ChannelCoordinator.java
@@ -37,7 +37,6 @@ import org.apache.catalina.tribes.util.Logs;
  * The channel coordinator object coordinates the membership service,
  * the sender and the receiver.
  * This is the last interceptor in the chain.
- * @version $Id$
  */
 public class ChannelCoordinator extends ChannelInterceptorBase implements MessageListener {
     private ChannelReceiver clusterReceiver;

==================================================
GroupChannel.java
index 8559c49e5e..c1ca393f6b 100644
--- a/java/org/apache/catalina/tribes/group/ChannelInterceptorBase.java
+++ b/java/org/apache/catalina/tribes/group/ChannelInterceptorBase.java
@@ -23,9 +23,7 @@ import org.apache.catalina.tribes.Member;
 
 /**
  * Abstract class for the interceptor base class.
- * @version $Id$
  */
-
 public abstract class ChannelInterceptorBase implements ChannelInterceptor {
 
     private ChannelInterceptor next;

==================================================
ChannelData.java
index 408cee2e55..20d4820ec9 100644
--- a/java/org/apache/catalina/tribes/group/GroupChannel.java
+++ b/java/org/apache/catalina/tribes/group/GroupChannel.java
@@ -53,7 +53,6 @@ import org.apache.juli.logging.LogFactory;
  * message being sent and received with membership announcements.
  * The channel has an chain of interceptors that can modify the message or perform other logic.<br>
  * It manages a complete group, both membership and replication.
- * @version $Id$
  */
 public class GroupChannel extends ChannelInterceptorBase implements ManagedChannel {
     private static final Log log = LogFactory.getLog(GroupChannel.class);

==================================================
ListenCallback.java
index fb3dc5805c..885c696b1f 100644
--- a/java/org/apache/catalina/tribes/io/ChannelData.java
+++ b/java/org/apache/catalina/tribes/io/ChannelData.java
@@ -31,8 +31,6 @@ import org.apache.catalina.tribes.util.UUIDGenerator;
  * to another node. While the message is being processed by the different
  * interceptors, the message data can be manipulated as each interceptor seems appropriate.
  * @author Peter Rossbach
- * @version $Id$
- *
  */
 public class ChannelData implements ChannelMessage {
     private static final long serialVersionUID = 1L;

==================================================
ObjectReader.java
index 14bb627671..9207ce4098 100644
--- a/java/org/apache/catalina/tribes/io/ListenCallback.java
+++ b/java/org/apache/catalina/tribes/io/ListenCallback.java
@@ -27,7 +27,6 @@ import org.apache.catalina.tribes.ChannelMessage;
  * The listen callback interface is used by the replication system
  * when data has been received. The interface does not care about
  * objects and marshalling and just passes the bytes straight through.
- * @version $Id$
  */
 public interface ListenCallback
 {

==================================================
ReplicationStream.java
index 9daeab25b1..cc8edad250 100644
--- a/java/org/apache/catalina/tribes/io/ObjectReader.java
+++ b/java/org/apache/catalina/tribes/io/ObjectReader.java
@@ -33,8 +33,6 @@ import org.apache.juli.logging.LogFactory;
  * <code>XByteBuffer</code> until a full package has been received.
  * This object uses an XByteBuffer which is an extendable object buffer that also allows
  * for message encoding and decoding.
- *
- * @version $Id$
  */
 public class ObjectReader {
 

==================================================
XByteBuffer.java
index dbe8ee6c0b..1f0e2232a8 100644
--- a/java/org/apache/catalina/tribes/io/ReplicationStream.java
+++ b/java/org/apache/catalina/tribes/io/ReplicationStream.java
@@ -32,9 +32,7 @@ import java.lang.reflect.Proxy;
  *
  * @author Craig R. McClanahan
  * @author Bip Thelin
- * @version $Id$
  */
-
 public final class ReplicationStream extends ObjectInputStream {
 
 

==================================================
Constants.java
index 5fe37cdcd0..ffbc9f979b 100644
--- a/java/org/apache/catalina/tribes/io/XByteBuffer.java
+++ b/java/org/apache/catalina/tribes/io/XByteBuffer.java
@@ -42,7 +42,6 @@ import java.util.concurrent.atomic.AtomicInteger;
  * <li><b>DATA</b>      - should be as many bytes as the prev SIZE</li>
  * <li><b>END_DATA</b>  - 7 bytes - <i>TLF2003</i></lI>
  * </ul>
- * @version $Id$
  */
 public class XByteBuffer
 {

==================================================
McastService.java
index 29e3f05b08..b0a9dda156 100644
--- a/java/org/apache/catalina/tribes/membership/Constants.java
+++ b/java/org/apache/catalina/tribes/membership/Constants.java
@@ -23,7 +23,6 @@ import org.apache.catalina.tribes.util.Arrays;
  * package.
  *
  * @author Peter Rossbach
- * @version $Id$
  */
 public class Constants {
 

==================================================
McastServiceImpl.java
index 59ac89893a..e7986b4d0c 100644
--- a/java/org/apache/catalina/tribes/membership/McastService.java
+++ b/java/org/apache/catalina/tribes/membership/McastService.java
@@ -39,11 +39,7 @@ import org.apache.catalina.tribes.util.UUIDGenerator;
  * This is the representation of a multicast membership service.
  * This class is responsible for maintaining a list of active cluster nodes in the cluster.
  * If a node fails to send out a heartbeat, the node will be dismissed.
- *
- * @version $Id$
  */
-
-
 public class McastService implements MembershipService,MembershipListener,MessageListener {
 
     private static final org.apache.juli.logging.Log log =

==================================================
MemberImpl.java
index 2f82be78a8..c5b99d9c03 100644
--- a/java/org/apache/catalina/tribes/membership/McastServiceImpl.java
+++ b/java/org/apache/catalina/tribes/membership/McastServiceImpl.java
@@ -46,7 +46,6 @@ import org.apache.catalina.tribes.util.ExecutorFactory;
  * This is the low level implementation that handles the multicasting sockets.
  * Need to fix this, could use java.nio and only need one thread to send and receive, or
  * just use a timeout on the receive
- * @version $Id$
  */
 public class McastServiceImpl
 {

==================================================
Membership.java
index 480223f9de..b63ebb24ae 100644
--- a/java/org/apache/catalina/tribes/membership/MemberImpl.java
+++ b/java/org/apache/catalina/tribes/membership/MemberImpl.java
@@ -30,8 +30,6 @@ import org.apache.catalina.tribes.transport.SenderState;
  * A <b>membership</b> implementation using simple multicast.
  * This is the representation of a multicast member.
  * Carries the host, and port of the this or other cluster nodes.
- *
- * @version $Id$
  */
 public class MemberImpl implements Member, java.io.Externalizable {
 

==================================================
AbstractRxTask.java
index baa51185c0..89c5e0f042 100644
--- a/java/org/apache/catalina/tribes/membership/Membership.java
+++ b/java/org/apache/catalina/tribes/membership/Membership.java
@@ -35,7 +35,6 @@ import org.apache.catalina.tribes.Member;
  * If a node fails to send out a heartbeat, the node will be dismissed.
  *
  * @author Peter Rossbach
- * @version $Id$
  */
 public class Membership implements Cloneable {
 

==================================================
Constants.java
index f4f10e4553..11e52d43be 100644
--- a/java/org/apache/catalina/tribes/transport/AbstractRxTask.java
+++ b/java/org/apache/catalina/tribes/transport/AbstractRxTask.java
@@ -19,10 +19,6 @@ package org.apache.catalina.tribes.transport;
 
 import org.apache.catalina.tribes.io.ListenCallback;
 
-
-/**
- * @version $Id$
- */
 public abstract class AbstractRxTask implements Runnable
 {
 

==================================================
MultiPointSender.java
index 9696b0b441..85cf90321e 100644
--- a/java/org/apache/catalina/tribes/transport/Constants.java
+++ b/java/org/apache/catalina/tribes/transport/Constants.java
@@ -24,9 +24,7 @@ import org.apache.catalina.tribes.io.XByteBuffer;
  * Manifest constants for the <code>org.apache.catalina.tribes.transport</code>
  * package.
  * @author Peter Rossbach
- * @version $Id$
  */
-
 public class Constants {
 
     public static final String Package = "org.apache.catalina.tribes.transport";

==================================================
ReplicationTransmitter.java
index 40f0d7979b..0eb409ea34 100644
--- a/java/org/apache/catalina/tribes/transport/MultiPointSender.java
+++ b/java/org/apache/catalina/tribes/transport/MultiPointSender.java
@@ -21,10 +21,8 @@ import org.apache.catalina.tribes.ChannelMessage;
 import org.apache.catalina.tribes.Member;
 
 /**
- * @version $Id$
  * @since 5.5.16
  */
-
 public interface MultiPointSender extends DataSender
 {
     public void sendMessage(Member[] destination, ChannelMessage data) throws ChannelException;

==================================================
BioReceiver.java
index 8b36a51705..20f82c90ff 100644
--- a/java/org/apache/catalina/tribes/transport/ReplicationTransmitter.java
+++ b/java/org/apache/catalina/tribes/transport/ReplicationTransmitter.java
@@ -26,8 +26,6 @@ import org.apache.catalina.tribes.transport.nio.PooledParallelSender;
  * Transmit message to other cluster members
  * Actual senders are created based on the replicationMode
  * type
- *
- * @version $Id$
  */
 public class ReplicationTransmitter implements ChannelSender {
 

==================================================
BioReplicationTask.java
index a449170789..cf88ecfc32 100644
--- a/java/org/apache/catalina/tribes/transport/bio/BioReceiver.java
+++ b/java/org/apache/catalina/tribes/transport/bio/BioReceiver.java
@@ -27,10 +27,6 @@ import org.apache.catalina.tribes.transport.RxTaskPool;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
-/**
- *
- * @version $Id$
- */
 public class BioReceiver extends ReceiverBase implements Runnable {
 
     private static final Log log = LogFactory.getLog(BioReceiver.class);

==================================================
BioSender.java
index a3cbe99e21..8f2c40f457 100644
--- a/java/org/apache/catalina/tribes/transport/bio/BioReplicationTask.java
+++ b/java/org/apache/catalina/tribes/transport/bio/BioReplicationTask.java
@@ -40,9 +40,6 @@ import org.apache.juli.logging.LogFactory;
  * serviceChannel() method stores the key reference in the thread object then
  * calls notify() to wake it up. When the channel has been drained, the worker
  * thread returns itself to its parent pool.
- *
- *
- * @version $Id$
  */
 public class BioReplicationTask extends AbstractRxTask {
 

==================================================
MultipointBioSender.java
index 9e80e7e524..d426df47af 100644
--- a/java/org/apache/catalina/tribes/transport/bio/BioSender.java
+++ b/java/org/apache/catalina/tribes/transport/bio/BioSender.java
@@ -36,7 +36,6 @@ import org.apache.catalina.tribes.util.StringManager;
  * supported
  *
  * @author Peter Rossbach
- * @version $Id$
  * @since 5.5.16
  */
 public class BioSender extends AbstractSender {

==================================================
FastQueue.java
index b06c0f1f19..679c88c52a 100644
--- a/java/org/apache/catalina/tribes/transport/bio/MultipointBioSender.java
+++ b/java/org/apache/catalina/tribes/transport/bio/MultipointBioSender.java
@@ -30,11 +30,6 @@ import org.apache.catalina.tribes.io.XByteBuffer;
 import org.apache.catalina.tribes.transport.AbstractSender;
 import org.apache.catalina.tribes.transport.MultiPointSender;
 
-/**
- *
- * @version $Id$
- *
- */
 public class MultipointBioSender extends AbstractSender implements MultiPointSender {
     public MultipointBioSender() {
         // NO-OP

==================================================
LinkObject.java
index 719dd11b86..9551093f99 100644
--- a/java/org/apache/catalina/tribes/transport/bio/util/FastQueue.java
+++ b/java/org/apache/catalina/tribes/transport/bio/util/FastQueue.java
@@ -31,7 +31,6 @@ import org.apache.catalina.tribes.group.InterceptorPayload;
  *
  * FIXME add i18n support to log messages
  * @author Peter Rossbach
- * @version $Id$
  */
 public class FastQueue {
 

==================================================
NioReceiver.java
index 509b36f714..4567dfa4de 100644
--- a/java/org/apache/catalina/tribes/transport/bio/util/LinkObject.java
+++ b/java/org/apache/catalina/tribes/transport/bio/util/LinkObject.java
@@ -28,10 +28,7 @@ import org.apache.catalina.tribes.group.InterceptorPayload;
  * data object and a pointer to the next element.
  *
  * @author Peter Rossbach
- * @version $Id$
-
  */
-
 public class LinkObject {
 
     private final ChannelMessage msg;

==================================================
NioReplicationTask.java
index 1443325769..2702c0371c 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java
@@ -41,9 +41,6 @@ import org.apache.catalina.tribes.util.StringManager;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
-/**
- * @version $Id$
- */
 public class NioReceiver extends ReceiverBase implements Runnable {
 
     private static final Log log = LogFactory.getLog(NioReceiver.class);

==================================================
StringManager.java
index 520670e409..2e9c5727be 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioReplicationTask.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioReplicationTask.java
@@ -47,9 +47,6 @@ import org.apache.catalina.tribes.util.Logs;
  * serviceChannel() method stores the key reference in the thread object then
  * calls notify() to wake it up. When the channel has been drained, the worker
  * thread returns itself to its parent pool.
- *
- *
- * @version $Id$
  */
 public class NioReplicationTask extends AbstractRxTask {
 

==================================================
