5c2c6f359dcc255de2de4e2825deaa35e6e5847e
==================================================
Move the remaining Host specific ssl settings (sessionCacheSize and sessionTiemout) to SSLHostConfig
==================================================
Mark Thomas
==================================================
Thu May 7 08:18:11 2015 +0000
==================================================
AbstractHttp11JsseProtocol.java
Move the remaining Host specific ssl settings (sessionCacheSize and sessionTiemout) to SSLHostConfig

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1678142 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractHttp11Protocol.java
index 9d83aceb11..94bc80b59c 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11JsseProtocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11JsseProtocol.java
@@ -25,12 +25,6 @@ public abstract class AbstractHttp11JsseProtocol<S>
         super(endpoint);
     }
 
-    public void setSessionCacheSize(String s){getEndpoint().setSessionCacheSize(s);}
-    public String getSessionCacheSize(){ return getEndpoint().getSessionCacheSize();}
-
-    public void setSessionTimeout(String s){getEndpoint().setSessionTimeout(s);}
-    public String getSessionTimeout(){ return getEndpoint().getSessionTimeout();}
-
     public String getSslImplementationName() { return getEndpoint().getSslImplementationName(); }
     public void setSslImplementationName(String s) { getEndpoint().setSslImplementationName(s); }
 }

==================================================
AbstractEndpoint.java
index 344fbc7de9..ed86ac1c41 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -512,6 +512,18 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     }
 
 
+    public void setSessionCacheSize(int sessionCacheSize){
+        registerDefaultSSLHostConfig();
+        defaultSSLHostConfig.setSessionCacheSize(sessionCacheSize);
+    }
+
+
+    public void setSessionTimeout(int sessionTimeout){
+        registerDefaultSSLHostConfig();
+        defaultSSLHostConfig.setSessionTimeout(sessionTimeout);
+    }
+
+
     // ------------------------------------------------------------- Common code
 
     // Common configuration required for all new HTTP11 processors

==================================================
AbstractJsseEndpoint.java
index 1949113c5f..2688c228a0 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -963,14 +963,6 @@ public abstract class AbstractEndpoint<S> {
         this.sslImplementationName = s;
     }
 
-    private String sessionCacheSize = null;
-    public String getSessionCacheSize() { return sessionCacheSize;}
-    public void setSessionCacheSize(String s) { sessionCacheSize = s;}
-
-    private String sessionTimeout = "86400";
-    public String getSessionTimeout() { return sessionTimeout;}
-    public void setSessionTimeout(String s) { sessionTimeout = s;}
-
 
     protected final Set<SocketWrapperBase<S>> waitingRequests = Collections
             .newSetFromMap(new ConcurrentHashMap<SocketWrapperBase<S>, Boolean>());

==================================================
SSLHostConfig.java
index 6a58d3e5c1..d915d644ad 100644
--- a/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java
@@ -46,22 +46,13 @@ public abstract class AbstractJsseEndpoint<S> extends AbstractEndpoint<S> {
         if (isSSLEnabled()) {
             sslImplementation = SSLImplementation.getInstance(getSslImplementationName());
 
-            // TODO: Temp code until config refactoring is complete. Remove once
-            //       refactoring is complete.
-            if (sslHostConfigs.size() == 0) {
-                SSLHostConfig defaultSslHostConfig = new SSLHostConfig();
-                defaultSslHostConfig.setHostName(SSLHostConfig.DEFAULT_SSL_HOST_NAME);
-                sslHostConfigs.put(SSLHostConfig.DEFAULT_SSL_HOST_NAME, defaultSslHostConfig);
-            }
-
             for (SSLHostConfig sslHostConfig : sslHostConfigs.values()) {
-                SSLUtil sslUtil = sslImplementation.getSSLUtil(this, sslHostConfig);
+                SSLUtil sslUtil = sslImplementation.getSSLUtil(sslHostConfig);
                 SSLContext sslContext = sslUtil.createSSLContext();
                 sslContext.init(wrap(sslUtil.getKeyManagers(), sslHostConfig),
                         sslUtil.getTrustManagers(), null);
 
-                SSLSessionContext sessionContext =
-                    sslContext.getServerSessionContext();
+                SSLSessionContext sessionContext = sslContext.getServerSessionContext();
                 if (sessionContext != null) {
                     sslUtil.configureSessionContext(sessionContext);
                 }

==================================================
SSLImplementation.java
index eba97be9c3..8e724ae7cb 100644
--- a/java/org/apache/tomcat/util/net/SSLHostConfig.java
+++ b/java/org/apache/tomcat/util/net/SSLHostConfig.java
@@ -64,6 +64,8 @@ public class SSLHostConfig {
     private String certificateKeystoreProvider = System.getProperty("javax.net.ssl.keyStoreProvider");
     private String certificateKeystoreType = System.getProperty("javax.net.ssl.keyStoreType");
     private String keyManagerAlgorithm = KeyManagerFactory.getDefaultAlgorithm();
+    private int sessionCacheSize = 0;
+    private int sessionTimeout = 86400;
     private String sslProtocol = "TLS";
     private String trustManagerClassName;
     private String truststoreAlgorithm = TrustManagerFactory.getDefaultAlgorithm();
@@ -316,6 +318,28 @@ public class SSLHostConfig {
     }
 
 
+    public void setSessionCacheSize(int sessionCacheSize) {
+        setProperty("sessionCacheSize", Type.JSSE);
+        this.sessionCacheSize = sessionCacheSize;
+    }
+
+
+    public int getSessionCacheSize() {
+        return sessionCacheSize;
+    }
+
+
+    public void setSessionTimeout(int sessionTimeout) {
+        setProperty("sessionTimeout", Type.JSSE);
+        this.sessionTimeout = sessionTimeout;
+    }
+
+
+    public int getSessionTimeout() {
+        return sessionTimeout;
+    }
+
+
     public void setSslProtocol(String sslProtocol) {
         setProperty("sslProtocol", Type.JSSE);
         this.sslProtocol = sslProtocol;

==================================================
JSSEImplementation.java
index 765b0ce40a..8a5057cf0a 100644
--- a/java/org/apache/tomcat/util/net/SSLImplementation.java
+++ b/java/org/apache/tomcat/util/net/SSLImplementation.java
@@ -71,5 +71,5 @@ public abstract class SSLImplementation {
 
     public abstract SSLSupport getSSLSupport(SSLSession session);
 
-    public abstract SSLUtil getSSLUtil(AbstractEndpoint<?> ep, SSLHostConfig sslHostConfig);
+    public abstract SSLUtil getSSLUtil(SSLHostConfig sslHostConfig);
 }

==================================================
JSSESocketFactory.java
index 8c06c06227..73b1db7388 100644
--- a/java/org/apache/tomcat/util/net/jsse/JSSEImplementation.java
+++ b/java/org/apache/tomcat/util/net/jsse/JSSEImplementation.java
@@ -18,7 +18,6 @@ package org.apache.tomcat.util.net.jsse;
 
 import javax.net.ssl.SSLSession;
 
-import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.SSLHostConfig;
 import org.apache.tomcat.util.net.SSLImplementation;
 import org.apache.tomcat.util.net.SSLSupport;
@@ -51,7 +50,7 @@ public class JSSEImplementation extends SSLImplementation {
     }
 
     @Override
-    public SSLUtil getSSLUtil(AbstractEndpoint<?> endpoint, SSLHostConfig sslHostConfig) {
-        return new JSSESocketFactory(endpoint, sslHostConfig);
+    public SSLUtil getSSLUtil(SSLHostConfig sslHostConfig) {
+        return new JSSESocketFactory(sslHostConfig);
     }
 }

==================================================
TestCustomSsl.java
index 28c3e0ebec..c5f12cedeb 100644
--- a/java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java
+++ b/java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java
@@ -14,7 +14,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package org.apache.tomcat.util.net.jsse;
 
 import java.io.File;
@@ -55,8 +54,6 @@ import javax.net.ssl.X509KeyManager;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.util.net.AbstractEndpoint;
-import org.apache.tomcat.util.net.Constants;
 import org.apache.tomcat.util.net.SSLContext;
 import org.apache.tomcat.util.net.SSLHostConfig;
 import org.apache.tomcat.util.net.SSLUtil;
@@ -81,17 +78,12 @@ public class JSSESocketFactory implements SSLUtil {
     private static final StringManager sm =
         StringManager.getManager("org.apache.tomcat.util.net.jsse.res");
 
-    private static final int defaultSessionCacheSize = 0;
-    private static final int defaultSessionTimeout = 86400;
-
-    private final AbstractEndpoint<?> endpoint;
     private final SSLHostConfig sslHostConfig;
 
     private final String[] defaultServerProtocols;
 
 
-    public JSSESocketFactory (AbstractEndpoint<?> endpoint, SSLHostConfig sslHostConfig) {
-        this.endpoint = endpoint;
+    public JSSESocketFactory (SSLHostConfig sslHostConfig) {
         this.sslHostConfig = sslHostConfig;
 
         SSLContext context;
@@ -115,7 +107,7 @@ public class JSSESocketFactory implements SSLUtil {
             // the JSSE implementation just doesn't like creating unbound
             // sockets so allow the code to proceed.
             defaultServerProtocols = new String[0];
-            log.warn(sm.getString("jsse.noDefaultProtocols", endpoint.getName()));
+            log.warn(sm.getString("jsse.noDefaultProtocols", sslHostConfig.getHostName()));
             return;
         }
 
@@ -126,17 +118,15 @@ public class JSSESocketFactory implements SSLUtil {
             List<String> filteredProtocols = new ArrayList<>();
             for (String protocol : socket.getEnabledProtocols()) {
                 if (protocol.toUpperCase(Locale.ENGLISH).contains("SSL")) {
-                    log.debug(sm.getString("jsse.excludeDefaultProtocol",
-                            protocol));
+                    log.debug(sm.getString("jsse.excludeDefaultProtocol", protocol));
                     continue;
                 }
                 filteredProtocols.add(protocol);
             }
-            defaultServerProtocols = filteredProtocols
-                    .toArray(new String[filteredProtocols.size()]);
+            defaultServerProtocols =
+                    filteredProtocols.toArray(new String[filteredProtocols.size()]);
             if (defaultServerProtocols.length == 0) {
-                log.warn(sm.getString("jsse.noDefaultProtocols",
-                        endpoint.getName()));
+                log.warn(sm.getString("jsse.noDefaultProtocols", sslHostConfig.getHostName()));
             }
         } finally {
             try {
@@ -287,8 +277,7 @@ public class JSSESocketFactory implements SSLUtil {
 
         KeyStore ks = getStore(keystoreType, keystoreProvider, keystoreFile, keystorePass);
         if (keyAlias != null && !ks.isKeyEntry(keyAlias)) {
-            throw new IOException(
-                    sm.getString("jsse.alias_no_key_entry", keyAlias));
+            throw new IOException(sm.getString("jsse.alias_no_key_entry", keyAlias));
         }
 
         KeyManagerFactory kmf = KeyManagerFactory.getInstance(algorithm);
@@ -350,23 +339,8 @@ public class JSSESocketFactory implements SSLUtil {
 
     @Override
     public void configureSessionContext(SSLSessionContext sslSessionContext) {
-        int sessionCacheSize;
-        if (endpoint.getSessionCacheSize() != null) {
-            sessionCacheSize = Integer.parseInt(
-                    endpoint.getSessionCacheSize());
-        } else {
-            sessionCacheSize = defaultSessionCacheSize;
-        }
-
-        int sessionTimeout;
-        if (endpoint.getSessionTimeout() != null) {
-            sessionTimeout = Integer.parseInt(endpoint.getSessionTimeout());
-        } else {
-            sessionTimeout = defaultSessionTimeout;
-        }
-
-        sslSessionContext.setSessionCacheSize(sessionCacheSize);
-        sslSessionContext.setSessionTimeout(sessionTimeout);
+        sslSessionContext.setSessionCacheSize(sslHostConfig.getSessionCacheSize());
+        sslSessionContext.setSessionTimeout(sslHostConfig.getSessionTimeout());
     }
 
 
@@ -406,10 +380,6 @@ public class JSSESocketFactory implements SSLUtil {
         throws IOException, CRLException, CertificateException {
 
         File crlFile = new File(crlf);
-        if( !crlFile.isAbsolute() ) {
-            crlFile = new File(
-                    System.getProperty(Constants.CATALINA_BASE_PROP), crlf);
-        }
         Collection<? extends CRL> crls = null;
         try {
             CertificateFactory cf = CertificateFactory.getInstance("X.509");

==================================================
TesterBug50640SslImpl.java
index 7f30490471..eab8bf0a78 100644
--- a/test/org/apache/tomcat/util/net/TestCustomSsl.java
+++ b/test/org/apache/tomcat/util/net/TestCustomSsl.java
@@ -58,6 +58,9 @@ public class TestCustomSsl extends TomcatBaseTest {
 
         connector.setProperty("sslImplementationName",
                 "org.apache.tomcat.util.net.jsse.TesterBug50640SslImpl");
+
+        // This setting will break ssl configuration unless the custom
+        // implementation is used.
         connector.setProperty(TesterBug50640SslImpl.PROPERTY_NAME,
                 TesterBug50640SslImpl.PROPERTY_VALUE);
 

==================================================
