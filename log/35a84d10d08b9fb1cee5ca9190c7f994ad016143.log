35a84d10d08b9fb1cee5ca9190c7f994ad016143
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50582
==================================================
Mark Emlyn
==================================================
Sun Jan 16 12:55:55 2011 +0000
==================================================
CoyoteAdapter.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50582
Refactor access logging so chunked encoding is not forced if bytes sent is logged

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1059548 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AccessLogValve.java
index e4c3eab0ba..50580f34c5 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -404,6 +404,9 @@ public class CoyoteAdapter implements Adapter {
                 async = true;
             } else if (!comet) {
                 response.finishResponse();
+                ((Context) request.getMappingData().context).logAccess(request,
+                        response,
+                        System.currentTimeMillis() - req.getStartTime(), false);
                 req.action(ActionCode.POST_REQUEST , null);
             }
 
@@ -435,9 +438,10 @@ public class CoyoteAdapter implements Adapter {
 
         Request request = (Request) req.getNote(ADAPTER_NOTES);
         Response response = (Response) res.getNote(ADAPTER_NOTES);
-
+        boolean create = false;
+        
         if (request == null) {
-
+            create = true;
             // Create objects
             request = connector.createRequest();
             request.setCoyoteRequest(req);
@@ -460,8 +464,10 @@ public class CoyoteAdapter implements Adapter {
         connector.getService().getContainer().logAccess(
                 request, response, time, true);
         
-        request.recycle();
-        response.recycle();
+        if (create) {
+            request.recycle();
+            response.recycle();
+        }
     }
     
     

==================================================
JDBCAccessLogValve.java
index 2d8fd2583b..e5e426a042 100644
--- a/java/org/apache/catalina/valves/AccessLogValve.java
+++ b/java/org/apache/catalina/valves/AccessLogValve.java
@@ -538,36 +538,14 @@ public class AccessLogValve extends ValveBase implements AccessLog {
     @Override
     public void invoke(Request request, Response response) throws IOException,
             ServletException {
-        if (getState().isAvailable() && getEnabled()) {                
-            final String t1Name = AccessLogValve.class.getName()+".t1";
-            // Pass this request on to the next valve in our pipeline
-            long t1 = System.currentTimeMillis();
-            boolean asyncdispatch = request.isAsyncDispatching();
-            if (!asyncdispatch) {
-                request.setAttribute(t1Name, Long.valueOf(t1));
-            }
-    
-            getNext().invoke(request, response);
-    
-            //we're not done with the request
-            if (request.isAsyncDispatching()) {
-                return;
-            } else if (asyncdispatch && request.getAttribute(t1Name)!=null) {
-                t1 = ((Long)request.getAttribute(t1Name)).longValue();
-            }
-            
-            long t2 = System.currentTimeMillis();
-            long time = t2 - t1;
-
-            log(request,response, time);
-        } else
-            getNext().invoke(request, response);       
+        getNext().invoke(request, response);       
     }
 
     
     @Override
     public void log(Request request, Response response, long time) {
-        if (logElements == null || condition != null
+        if (!getState().isAvailable() || !getEnabled() ||
+                logElements == null || condition != null
                 && null != request.getRequest().getAttribute(condition)) {
             return;
         }
@@ -1057,7 +1035,9 @@ public class AccessLogValve extends ValveBase implements AccessLog {
         @Override
         public void addElement(StringBuilder buf, Date date, Request request,
                 Response response, long time) {
-            long length = response.getBytesWritten(true);
+            // Don't need to flush since trigger for log message is after the
+            // response has been committed
+            long length = response.getBytesWritten(false);
             if (length <= 0 && conversion) {
                 buf.append('-');
             } else {

==================================================
AbstractOutputBuffer.java
index b977cb9d0f..75539ed874 100644
--- a/java/org/apache/catalina/valves/JDBCAccessLogValve.java
+++ b/java/org/apache/catalina/valves/JDBCAccessLogValve.java
@@ -436,17 +436,18 @@ public final class JDBCAccessLogValve extends ValveBase implements AccessLog {
      * in a ServletException.
      */
     @Override
-    public void invoke(Request request, Response response) 
-        throws IOException, ServletException {
-        
+    public void invoke(Request request, Response response) throws IOException,
+            ServletException {
         getNext().invoke(request, response);
-
-        log (request, response, 0);
     }
 
 
     @Override
     public void log(Request request, Response response, long time) {
+        if (!getState().isAvailable()) {
+            return;
+        }
+
         final String EMPTY = "" ;
         
         String remoteHost;

==================================================
