55093a2bc3ccdd759c63ef52ee99ba7f05e8c34d
==================================================
Fix BZ 65272. Restore the use of LF as an HTTP line terminator
==================================================
Mark Thomas
==================================================
Wed Apr 28 18:23:07 2021 +0100
==================================================
Http11InputBuffer.java
Fix BZ 65272. Restore the use of LF as an HTTP line terminator



==================================================
TestHttp11InputBuffer.java
index 81a3a5a648..b5f769f02d 100644
--- a/java/org/apache/coyote/http11/Http11InputBuffer.java
+++ b/java/org/apache/coyote/http11/Http11InputBuffer.java
@@ -550,10 +550,15 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler
                 prevChr = chr;
                 chr = byteBuffer.get();
                 if (chr == Constants.CR) {
-                    // Possible end of request line. Need LF next.
+                    // Possible end of request line. Need LF next else invalid.
                 } else if (prevChr == Constants.CR && chr == Constants.LF) {
+                    // CRLF is the standard line terminator
                     end = pos - 1;
                     parsingRequestLineEol = true;
+                } else if (chr == Constants.LF) {
+                    // LF is an optional line terminator
+                    end = pos;
+                    parsingRequestLineEol = true;
                 } else if (prevChr == Constants.CR || !HttpParser.isHttpProtocol(chr)) {
                     String invalidProtocol = parseInvalid(parsingRequestLineStart, byteBuffer);
                     throw new IllegalArgumentException(sm.getString("iib.invalidHttpProtocol", invalidProtocol));
@@ -841,7 +846,8 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler
 
             if (chr == Constants.CR && prevChr != Constants.CR) {
                 // Possible start of CRLF - process the next byte.
-            } else if (prevChr == Constants.CR && chr == Constants.LF) {
+            } else if (chr == Constants.LF) {
+                // CRLF or LF is an acceptable line terminator
                 return HeaderParseStatus.DONE;
             } else {
                 if (prevChr == Constants.CR) {
@@ -953,7 +959,8 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler
                     chr = byteBuffer.get();
                     if (chr == Constants.CR) {
                         // Possible start of CRLF - process the next byte.
-                    } else if (prevChr == Constants.CR && chr == Constants.LF) {
+                    } else if (chr == Constants.LF) {
+                        // CRLF or LF is an acceptable line terminator
                         eol = true;
                     } else if (prevChr == Constants.CR) {
                         // Invalid value
@@ -1031,7 +1038,8 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler
             chr = byteBuffer.get();
             if (chr == Constants.CR) {
                 // Skip
-            } else if (prevChr == Constants.CR && chr == Constants.LF) {
+            } else if (chr == Constants.LF) {
+                // CRLF or LF is an acceptable line terminator
                 eol = true;
             } else {
                 headerData.lastSignificantChar = pos;

==================================================
TestHttp11InputBufferCRLF.java
index a1d50d01f8..e7b04dd4aa 100644
--- a/test/org/apache/coyote/http11/TestHttp11InputBuffer.java
+++ b/test/org/apache/coyote/http11/TestHttp11InputBuffer.java
@@ -198,6 +198,10 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
                 // TAB is allowed
                 continue;
             }
+            if (i == '\n') {
+                // LF is the optional line terminator
+                continue;
+            }
             doTestBug51557InvalidCharInValue((char) i);
             tearDown();
             setUp();
@@ -687,24 +691,6 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
     }
 
 
-    @Test
-    public void testInvalidEndOfRequestLine02() {
-
-        String[] request = new String[1];
-        request[0] =
-                "GET /test HTTP/1.1" + LF +
-                "Host: localhost:8080" + CRLF +
-                "Connection: close" + CRLF +
-                CRLF;
-
-        InvalidClient client = new InvalidClient(request);
-
-        client.doRequest();
-        Assert.assertTrue(client.getResponseLine(), client.isResponse400());
-        Assert.assertTrue(client.isResponseBodyOK());
-    }
-
-
     @Test
     public void testInvalidHeader01() {
 

==================================================
