f330c29c33068aa0726f70b655ec459ee06c28a3
==================================================
Partial fix for https://bz.apache.org/bugzilla/show_bug.cgi?id=47214
==================================================
Mark Thomas
==================================================
Wed Apr 5 15:13:24 2017 +0000
==================================================
CoyoteInputStream.java
Partial fix for https://bz.apache.org/bugzilla/show_bug.cgi?id=47214
Replace explicitly referenced anonymous inner classes in CoyoteInputStream with named inner classes.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1790289 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SecurityClassLoad.java
index 1e080531c8..b0afed5c10 100644
--- a/java/org/apache/catalina/connector/CoyoteInputStream.java
+++ b/java/org/apache/catalina/connector/CoyoteInputStream.java
@@ -70,16 +70,7 @@ public class CoyoteInputStream extends ServletInputStream {
         if (SecurityUtil.isPackageProtectionEnabled()) {
 
             try {
-                Integer result = AccessController
-                        .doPrivileged(new PrivilegedExceptionAction<Integer>() {
-
-                            @Override
-                            public Integer run() throws IOException {
-                                Integer integer = Integer.valueOf(ib.readByte());
-                                return integer;
-                            }
-
-                        });
+                Integer result = AccessController.doPrivileged(new PrivilegedRead(ib));
                 return result.intValue();
             } catch (PrivilegedActionException pae) {
                 Exception e = pae.getException();
@@ -99,16 +90,7 @@ public class CoyoteInputStream extends ServletInputStream {
 
         if (SecurityUtil.isPackageProtectionEnabled()) {
             try {
-                Integer result = AccessController
-                        .doPrivileged(new PrivilegedExceptionAction<Integer>() {
-
-                            @Override
-                            public Integer run() throws IOException {
-                                Integer integer = Integer.valueOf(ib.available());
-                                return integer;
-                            }
-
-                        });
+                Integer result = AccessController.doPrivileged(new PrivilegedAvailable(ib));
                 return result.intValue();
             } catch (PrivilegedActionException pae) {
                 Exception e = pae.getException();
@@ -135,16 +117,8 @@ public class CoyoteInputStream extends ServletInputStream {
 
         if (SecurityUtil.isPackageProtectionEnabled()) {
             try {
-                Integer result = AccessController
-                        .doPrivileged(new PrivilegedExceptionAction<Integer>() {
-
-                            @Override
-                            public Integer run() throws IOException {
-                                Integer integer = Integer.valueOf(ib.read(b, off, len));
-                                return integer;
-                            }
-
-                        });
+                Integer result = AccessController.doPrivileged(
+                        new PrivilegedReadArray(ib, b, off, len));
                 return result.intValue();
             } catch (PrivilegedActionException pae) {
                 Exception e = pae.getException();
@@ -176,16 +150,7 @@ public class CoyoteInputStream extends ServletInputStream {
 
         if (SecurityUtil.isPackageProtectionEnabled()) {
             try {
-                Integer result = AccessController
-                        .doPrivileged(new PrivilegedExceptionAction<Integer>() {
-
-                            @Override
-                            public Integer run() throws IOException {
-                                Integer integer = Integer.valueOf(ib.read(b));
-                                return integer;
-                            }
-
-                        });
+                Integer result = AccessController.doPrivileged(new PrivilegedReadBuffer(ib, b));
                 return result.intValue();
             } catch (PrivilegedActionException pae) {
                 Exception e = pae.getException();
@@ -211,15 +176,7 @@ public class CoyoteInputStream extends ServletInputStream {
 
         if (SecurityUtil.isPackageProtectionEnabled()) {
             try {
-                AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {
-
-                    @Override
-                    public Void run() throws IOException {
-                        ib.close();
-                        return null;
-                    }
-
-                });
+                AccessController.doPrivileged(new PrivilegedClose(ib));
             } catch (PrivilegedActionException pae) {
                 Exception e = pae.getException();
                 if (e instanceof IOException) {
@@ -256,4 +213,91 @@ public class CoyoteInputStream extends ServletInputStream {
             throw new IllegalStateException(sm.getString("coyoteInputStream.nbNotready"));
         }
     }
+
+
+    private static class PrivilegedAvailable implements PrivilegedExceptionAction<Integer> {
+
+        private final InputBuffer inputBuffer;
+
+        public PrivilegedAvailable(InputBuffer inputBuffer) {
+            this.inputBuffer = inputBuffer;
+        }
+
+        @Override
+        public Integer run() throws IOException {
+            return Integer.valueOf(inputBuffer.available());
+        }
+    }
+
+
+    private static class PrivilegedClose implements PrivilegedExceptionAction<Void> {
+
+        private final InputBuffer inputBuffer;
+
+        public PrivilegedClose(InputBuffer inputBuffer) {
+            this.inputBuffer = inputBuffer;
+        }
+
+        @Override
+        public Void run() throws IOException {
+            inputBuffer.close();
+            return null;
+        }
+    }
+
+
+    private static class PrivilegedRead implements PrivilegedExceptionAction<Integer> {
+
+        private final InputBuffer inputBuffer;
+
+        public PrivilegedRead(InputBuffer inputBuffer) {
+            this.inputBuffer = inputBuffer;
+        }
+
+        @Override
+        public Integer run() throws IOException {
+            Integer integer = Integer.valueOf(inputBuffer.readByte());
+            return integer;
+        }
+    }
+
+
+    private static class PrivilegedReadArray implements PrivilegedExceptionAction<Integer> {
+
+        private final InputBuffer inputBuffer;
+        private final byte[] buf;
+        private final int off;
+        private final int len;
+
+        public PrivilegedReadArray(InputBuffer inputBuffer, byte[] buf, int off, int len) {
+            this.inputBuffer = inputBuffer;
+            this.buf = buf;
+            this.off = off;
+            this.len = len;
+        }
+
+        @Override
+        public Integer run() throws IOException {
+            Integer integer = Integer.valueOf(inputBuffer.read(buf, off, len));
+            return integer;
+        }
+    }
+
+
+    private static class PrivilegedReadBuffer implements PrivilegedExceptionAction<Integer> {
+
+        private final InputBuffer inputBuffer;
+        private final ByteBuffer bb;
+
+        public PrivilegedReadBuffer(InputBuffer inputBuffer, ByteBuffer bb) {
+            this.inputBuffer = inputBuffer;
+            this.bb = bb;
+        }
+
+        @Override
+        public Integer run() throws IOException {
+            Integer integer = Integer.valueOf(inputBuffer.read(bb));
+            return integer;
+        }
+    }
 }

==================================================
