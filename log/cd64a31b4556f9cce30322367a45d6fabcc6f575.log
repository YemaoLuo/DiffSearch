cd64a31b4556f9cce30322367a45d6fabcc6f575
==================================================
Add i18n for util/net package.
==================================================
Remy Maucherat
==================================================
Mon Dec 10 20:01:37 2018 +0000
==================================================
AbstractEndpoint.java
Add i18n for util/net package.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1848627 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AprEndpoint.java
index 8ee01d473f..01da3cd34f 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -789,7 +789,7 @@ public abstract class AbstractEndpoint<S,U> {
                 return IntrospectionUtils.setProperty(this,name,value,false);
             }
         }catch ( Exception x ) {
-            getLog().error("Unable to set attribute \""+name+"\" to \""+value+"\"",x);
+            getLog().error(sm.getString("endpoint.setAttributeError", name, value), x);
             return false;
         }
     }

==================================================
Nio2Endpoint.java
index da83141798..8f5a6fdc9f 100644
--- a/java/org/apache/tomcat/util/net/LocalStrings.properties
+++ b/java/org/apache/tomcat/util/net/LocalStrings.properties
@@ -91,8 +91,14 @@ endpoint.invalidJmxNameSslHostCert=Unable to generate a valid JMX object name fo
 endpoint.jmxRegistrationFailed=Failed to register the JMX object with name [{0}]
 endpoint.jsse.noSslContext=No SSLContext could be found for the host name [{0}]
 endpoint.launch.fail=Failed to launch new runnable
+endpoint.nio.keyMustBeCancelled=Key must be cancelled
+endpoint.nio.keyProcessingError=Error processing selection key
+endpoint.nio.latchMustBeZero=Latch must be at count zero or null
+endpoint.nio.nullLatch=Latch cannot be null
+endpoint.nio.pollerEventError=Error processing poller event
 endpoint.nio.registerFail=Failed to register socket with selector from poller
 endpoint.nio.selectorCloseFail=Failed to close selector when closing the poller
+endpoint.nio.selectorLoopError=Error in selector loop
 endpoint.nio.stopLatchAwaitFail=The pollers did not stop within the expected time
 endpoint.nio.stopLatchAwaitInterrupted=This thread was interrupted while waiting for the pollers to stop
 endpoint.nio.timeoutCme=Exception during processing of timeouts. The code has been checked repeatedly and no concurrent modification has been found. If you are able to repeat this error please open a Tomcat bug and provide the steps to reproduce.
@@ -107,12 +113,16 @@ endpoint.pollerThreadStop=The poller thread failed to stop in a timely manner
 endpoint.portOffset.invalid=The value [{0}] for portOffset is not valid as portOffset may not be negative
 endpoint.process.fail=Error allocating socket processor
 endpoint.processing.fail=Error running socket processor
+endpoint.rejectedExecution=Socket processing request was rejected for [{0}]
 endpoint.removeDefaultSslHostConfig=The default SSLHostConfig (named [{0}]) may not be removed
 endpoint.sendfile.addfail=Sendfile failure: [{0}] [{1}]
 endpoint.sendfile.error=Unexpected sendfile error
+endpoint.sendfile.tooMuchData=Sendfile configured to send more data than was available
 endpoint.sendfileThreadStop=The sendfile thread failed to stop in a timely manner
 endpoint.serverSocket.closeFailed=Failed to close server socket for [{0}]
 endpoint.setAttribute=Set [{0}] to [{1}]
+endpoint.setAttributeError=Unable to set attribute [{0}] to [{1}]
+endpoint.socketOptionsError=Error setting socket options
 endpoint.timeout.err=Error processing socket timeout
 endpoint.unknownSslHostName=The SSL host name [{0}] is not recognised for this endpoint
 endpoint.warn.executorShutdown=The executor associated with thread pool [{0}] has not fully shutdown. Some application threads may still be running.
@@ -132,6 +142,11 @@ jsse.keystore_load_failed=Failed to load keystore type [{0}] with path [{1}] due
 jsse.ssl3=SSLv3 has been explicitly enabled. This protocol is known to be insecure.
 jsse.tls13.auth=The JSSE TLS 1.3 implementation does not support authentication after the initial handshake and is therefore incompatible with optional client authentication
 
+nioBlockingSelector.keyNotRegistered=Key no longer registered
+nioBlockingSelector.possibleLeak=Possible key leak, cancelling key in the finalizer
+nioBlockingSelector.processingError=Error processing selection key operations
+nioBlockingSelector.selectError=Error selecting key
+
 sniExtractor.clientHelloInvalid=The ClientHello message was not correctly formatted
 sniExtractor.clientHelloTooBig=The ClientHello was not presented in a single TLS record so no SNI information could be extracted
 

==================================================
NioBlockingSelector.java
index 83d155ee0c..24e58f527d 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -333,7 +333,7 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel,AsynchronousS
             return processSocket(socketWrapper, SocketEvent.OPEN_READ, false);
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
-            log.error("",t);
+            log.error(sm.getString("endpoint.socketOptionsError"),t);
         }
         // Tell to close the socket
         return false;

==================================================
NioEndpoint.java
index 0411ceabf4..62462e92d1 100644
--- a/java/org/apache/tomcat/util/net/NioBlockingSelector.java
+++ b/java/org/apache/tomcat/util/net/NioBlockingSelector.java
@@ -36,10 +36,12 @@ import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.collections.SynchronizedQueue;
 import org.apache.tomcat.util.collections.SynchronizedStack;
 import org.apache.tomcat.util.net.NioEndpoint.NioSocketWrapper;
+import org.apache.tomcat.util.res.StringManager;
 
 public class NioBlockingSelector {
 
     private static final Log log = LogFactory.getLog(NioBlockingSelector.class);
+    protected static final StringManager sm = StringManager.getManager(NioBlockingSelector.class);
 
     private static final AtomicInteger threadCounter = new AtomicInteger();
 
@@ -85,7 +87,9 @@ public class NioBlockingSelector {
     public int write(ByteBuffer buf, NioChannel socket, long writeTimeout)
             throws IOException {
         SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector());
-        if ( key == null ) throw new IOException("Key no longer registered");
+        if (key == null) {
+            throw new IOException(sm.getString("nioBlockingSelector.keyNotRegistered"));
+        }
         KeyReference reference = keyReferenceStack.pop();
         if (reference == null) {
             reference = new KeyReference();
@@ -157,7 +161,9 @@ public class NioBlockingSelector {
      */
     public int read(ByteBuffer buf, NioChannel socket, long readTimeout) throws IOException {
         SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector());
-        if ( key == null ) throw new IOException("Key no longer registered");
+        if (key == null) {
+            throw new IOException(sm.getString("nioBlockingSelector.keyNotRegistered"));
+        }
         KeyReference reference = keyReferenceStack.pop();
         if (reference == null) {
             reference = new KeyReference();
@@ -310,7 +316,7 @@ public class NioBlockingSelector {
                         continue;
                     } catch (Throwable x) {
                         ExceptionUtils.handleThrowable(x);
-                        log.error("",x);
+                        log.error(sm.getString("nioBlockingSelector.selectError"), x);
                         continue;
                     }
 
@@ -337,7 +343,7 @@ public class NioBlockingSelector {
                         }
                     }//while
                 }catch ( Throwable t ) {
-                    log.error("",t);
+                    log.error(sm.getString("nioBlockingSelector.processingError"), t);
                 }
             }
             events.clear();
@@ -467,7 +473,7 @@ public class NioBlockingSelector {
         @Override
         public void finalize() {
             if (key!=null && key.isValid()) {
-                log.warn("Possible key leak, cancelling key in the finalizer.");
+                log.warn(sm.getString("nioBlockingSelector.possibleLeak"));
                 try {key.cancel();}catch (Exception ignore){}
             }
         }

==================================================
