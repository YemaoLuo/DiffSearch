a6e4aedaf750dae023ef86503bc000642fd541b1
==================================================
Apply same UDS path perm approach in the AprEndpoint as in the NioEndpoint
==================================================
Michael Osipov
==================================================
Mon Feb 1 13:11:15 2021 +0100
==================================================
AprEndpoint.java
Apply same UDS path perm approach in the AprEndpoint as in the NioEndpoint



==================================================
NioEndpoint.java
index 37b1e81b10..9d212a1d5f 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -24,6 +24,7 @@ import java.nio.ByteBuffer;
 import java.nio.channels.CompletionHandler;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
+import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.nio.file.attribute.FileAttribute;
 import java.nio.file.attribute.PosixFilePermission;
@@ -393,13 +394,8 @@ public class AprEndpoint extends AbstractEndpoint<Long,Long> implements SNICallB
                 FileAttribute<Set<PosixFilePermission>> attrs =
                          PosixFilePermissions.asFileAttribute(PosixFilePermissions.fromString(
                                  getUnixDomainSocketPathPermissions()));
-                Files.setAttribute(Paths.get(getUnixDomainSocketPath()), attrs.name(), attrs.value());
-            }
-            else {
-                java.io.File file = Paths.get(getUnixDomainSocketPath()).toFile();
-                file.setReadable(true, false);
-                file.setWritable(true, false);
-                file.setExecutable(false, false);
+                Path path = Paths.get(getUnixDomainSocketPath());
+                Files.setAttribute(path, attrs.name(), attrs.value());
             }
         } else {
             if (OS.IS_WIN32 || OS.IS_WIN64) {

==================================================
