113c0bd72ba3720513382b2448eff18ffe31d3e3
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54284
==================================================
Mark Emlyn
==================================================
Mon Jan 7 19:08:58 2013 +0000
==================================================
ApplicationContext.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54284
As per clarification from the Servlet EG, anonymous Filters and Servlets are not permitted.
Patch by Violeta Georgieva.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1429969 13f79535-47bb-0310-9956-ffa450edef68



==================================================
FilterDef.java
index 24b529c311..367c49bbcb 100644
--- a/java/org/apache/catalina/core/LocalStrings.properties
+++ b/java/org/apache/catalina/core/LocalStrings.properties
@@ -21,6 +21,8 @@ applicationContext.addListener.ise=Listeners can not be added to context {0} as
 applicationContext.addRole.ise=Roles can not be added to context {0} as the context has been initialised
 applicationContext.addServlet.ise=Servlets can not be added to context {0} as the context has been initialised
 applicationContext.attributeEvent=Exception thrown by attributes event listener
+applicationContext.invalidFilterName=Unable to add filter definition due to invalid filter name [{0}].
+applicationContext.invalidServletName=Unable to add servlet definition due to invalid servlet name [{0}].
 applicationContext.mapping.error=Error during mapping
 applicationContext.requestDispatcher.iae=Path {0} does not start with a "/" character
 applicationContext.resourcePaths.iae=Path {0} does not start with a "/" character

==================================================
ServletDef.java
index 939e49a24c..9067ddb1e1 100644
--- a/java/org/apache/catalina/deploy/LocalStrings.properties
+++ b/java/org/apache/catalina/deploy/LocalStrings.properties
@@ -12,6 +12,9 @@
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 # See the License for the specific language governing permissions and
 # limitations under the License.
+filterDef.invalidFilterName=Invalid <filter-name> [{0}] in filter definition.
+
+servletDef.invalidServletName=Invalid <servlet-name> [{0}] in servlet definition.
 
 webXml.duplicateEnvEntry=Duplicate env-entry name [{0}]
 webXml.duplicateFilter=Duplicate filter name [{0}]

==================================================
TestApplicationContext.java
index 33cd282504..323b8c3e32 100644
--- a/java/org/apache/catalina/deploy/ServletDef.java
+++ b/java/org/apache/catalina/deploy/ServletDef.java
@@ -25,6 +25,8 @@ import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 
+import org.apache.tomcat.util.res.StringManager;
+
 
 /**
  * Representation of a servlet definition for a web application, as represented
@@ -35,6 +37,9 @@ public class ServletDef implements Serializable {
 
     private static final long serialVersionUID = 1L;
 
+    private static final StringManager sm =
+        StringManager.getManager(Constants.Package);
+
     // ------------------------------------------------------------- Properties
 
 
@@ -104,6 +109,10 @@ public class ServletDef implements Serializable {
     }
 
     public void setServletName(String servletName) {
+        if (servletName == null || servletName.equals("")) {
+            throw new IllegalArgumentException(
+                    sm.getString("servletDef.invalidServletName", servletName));
+        }
         this.servletName = servletName;
     }
 

==================================================
TestFilterDef.java
index 5e68a52511..370920d6c8 100644
--- a/test/org/apache/catalina/core/TestApplicationContext.java
+++ b/test/org/apache/catalina/core/TestApplicationContext.java
@@ -18,6 +18,9 @@ package org.apache.catalina.core;
 
 import java.io.File;
 
+import javax.servlet.Filter;
+import javax.servlet.Servlet;
+import javax.servlet.ServletContext;
 import javax.servlet.http.HttpServletResponse;
 
 import org.junit.Assert;
@@ -69,4 +72,40 @@ public class TestApplicationContext extends TomcatBaseTest {
         Assert.assertEquals(HttpServletResponse.SC_OK, rc);
         Assert.assertTrue(res.toString().contains("<p>OK</p>"));
     }
+
+
+    @Test(expected = IllegalArgumentException.class)
+    public void testAddFilterWithFilterNameNull() {
+        getServletContext().addFilter(null, (Filter) null);
+    }
+
+
+    @Test(expected = IllegalArgumentException.class)
+    public void testAddFilterWithFilterNameEmptyString() {
+        getServletContext().addFilter("", (Filter) null);
+    }
+
+
+    @Test(expected = IllegalArgumentException.class)
+    public void testAddServletWithServletNameNull() {
+        getServletContext().addServlet(null, (Servlet) null);
+    }
+
+
+    @Test(expected = IllegalArgumentException.class)
+    public void testAddServletWithServletNameEmptyString() {
+        getServletContext().addServlet("", (Servlet) null);
+    }
+
+
+    private ServletContext getServletContext() {
+        Tomcat tomcat = getTomcatInstance();
+
+        File appDir = new File("test/webapp-3.0");
+        // app dir is relative to server home
+        StandardContext standardContext = (StandardContext) tomcat.addWebapp(
+                null, "/test", appDir.getAbsolutePath());
+
+        return standardContext.getServletContext();
+    }
 }

==================================================
TestServletDef.java
new file mode 100644
index 0000000000..249ca2b199
--- /dev/null
+++ b/test/org/apache/catalina/deploy/TestFilterDef.java
@@ -0,0 +1,45 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.catalina.deploy;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+/**
+ * Test case for {@link FilterDef}.
+ */
+public class TestFilterDef {
+
+    @Test(expected = IllegalArgumentException.class)
+    public void testSetFilterNameNull() {
+        new FilterDef().setFilterName(null);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void testSetFilterNameEmptyString() {
+        new FilterDef().setFilterName("");
+    }
+
+    @Test
+    public void testSetFilterName() {
+        FilterDef filterDef = new FilterDef();
+        filterDef.setFilterName("test");
+        Assert.assertEquals("'test' is expected as filter name",
+            "test", filterDef.getFilterName());
+    }
+
+}
\ No newline at end of file

==================================================
