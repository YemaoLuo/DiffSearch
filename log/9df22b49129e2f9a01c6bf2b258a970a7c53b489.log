9df22b49129e2f9a01c6bf2b258a970a7c53b489
==================================================
Implement pruning of old streams
==================================================
Mark Thomas
==================================================
Fri Aug 21 10:23:23 2015 +0000
==================================================
Http2UpgradeHandler.java
Implement pruning of old streams

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1696925 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Stream.java
index 5685d7200b..0601df1b70 100644
--- a/java/org/apache/coyote/http2/LocalStrings.properties
+++ b/java/org/apache/coyote/http2/LocalStrings.properties
@@ -89,6 +89,10 @@ upgradeHandler.ioerror=Connection [{0}]
 upgradeHandler.noNewStreams=Connection [{0}], Stream [{1}], Stream ignored as no new streams are permitted on this connection
 upgradeHandler.pause.entry=Connection [{0}] Pausing
 upgradeHandler.pingFailed=Connection [{0}] Failed to send ping to client
+upgradeHandler.pruneIncomplete=Connection [{0}] Failed to fully prune the connection because streams were active / used in the priority tree. There are [{0}] too many streams
+upgradeHandler.pruneStart=Connection [{0}] Starting pruning of old streams. Limit is [{1}] and there are currently [{2}] streams.
+upgradeHandler.pruned=Connection [{0}] Pruned completed stream [{1}]
+upgradeHandler.prunedPriority=Connection [{0}] Pruned unused stream [{1}] that may have been part of the priority tree
 upgradeHandler.rst.debug=Connection [{0}], Stream [{1}], Error [{2}], RST (closing stream)
 upgradeHandler.sendPrefaceFail=Failed to send preface to client
 upgradeHandler.socketCloseFailed=Error closing socket

==================================================
StreamStateMachine.java
index 03ee745826..124a388590 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -279,6 +279,11 @@ public class Stream extends AbstractStream implements HeaderEmitter {
     }
 
 
+    boolean isClosedFinal() {
+        return state.isClosedFinal();
+    }
+
+
     void closeIfIdle() {
         state.closeIfIdle();
     }

==================================================
