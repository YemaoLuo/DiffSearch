e338cafed4c05f4113ed1d5bfa9ecd679104ad96
==================================================
Refactor to a single ConnectionHandler implementation
==================================================
Mark Thomas
==================================================
Sun Nov 8 16:53:26 2015 +0000
==================================================
AbstractProtocol.java
Refactor to a single ConnectionHandler implementation

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1713256 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractAjpProtocol.java
index 99001204a0..5557d1e222 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -657,9 +657,11 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
 
     // ------------------------------------------- Connection handler base class
 
-    protected abstract static class AbstractConnectionHandler<S,P extends Processor>
+    protected static class ConnectionHandler<S,P extends Processor>
             implements AbstractEndpoint.Handler<S> {
 
+        private final AbstractProtocol<S> proto;
+
         protected final RequestGroupInfo global = new RequestGroupInfo();
         protected final AtomicLong registerCount = new AtomicLong(0);
 
@@ -669,7 +671,13 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
         protected final RecycledProcessors<P,S> recycledProcessors =
                 new RecycledProcessors<>(this);
 
-        protected abstract AbstractProtocol<S> getProtocol();
+        public ConnectionHandler(AbstractProtocol<S> proto) {
+            this.proto = proto;
+        }
+
+        protected AbstractProtocol<S> getProtocol() {
+            return proto;
+        }
 
         protected Log getLog() {
             return getProtocol().getLog();
@@ -1010,10 +1018,10 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
     protected static class RecycledProcessors<P extends Processor, S>
             extends SynchronizedStack<Processor> {
 
-        private final transient AbstractConnectionHandler<S,P> handler;
+        private final transient ConnectionHandler<S,P> handler;
         protected final AtomicInteger size = new AtomicInteger(0);
 
-        public RecycledProcessors(AbstractConnectionHandler<S,P> handler) {
+        public RecycledProcessors(ConnectionHandler<S,P> handler) {
             this.handler = handler;
         }
 

==================================================
AbstractHttp11Protocol.java
index 55a4ba2860..34bd42cccb 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -48,7 +48,7 @@ public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
         setSoTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);
         // AJP does not use Send File
         getEndpoint().setUseSendfile(false);
-        AjpConnectionHandler<S> cHandler = new AjpConnectionHandler<>(this);
+        ConnectionHandler<S,AjpProcessor> cHandler = new ConnectionHandler<>(this);
         setHandler(cHandler);
         getEndpoint().setHandler(cHandler);
     }
@@ -175,20 +175,4 @@ public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
         // TODO should fail - throw IOE
         return null;
     }
-
-
-    protected static class AjpConnectionHandler<S>
-            extends AbstractConnectionHandler<S,AjpProcessor> {
-
-        private final AbstractAjpProtocol<S> proto;
-
-        public AjpConnectionHandler(AbstractAjpProtocol<S> proto) {
-            this.proto = proto;
-        }
-
-        @Override
-        protected AbstractAjpProtocol<S> getProtocol() {
-            return proto;
-        }
-    }
 }

==================================================
