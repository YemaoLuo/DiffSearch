3163f2ee6048cede3087771ce80276a5bd685559
==================================================
Fix Java 8 Javadoc errors in org.apache.tomcat.dbcp
==================================================
Mark Emlyn
==================================================
Mon Oct 13 16:06:18 2014 +0000
==================================================
BasicDataSource.java
Fix Java 8 Javadoc errors in org.apache.tomcat.dbcp

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1631454 13f79535-47bb-0310-9956-ffa450edef68



==================================================
package-info.java
index 75c0828a20..50c6e0ade8 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSource.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSource.java
@@ -1518,11 +1518,12 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * {@link #getRemoveAbandonedTimeout() removeAbandonedTimeout} seconds.</p>
      *
      * <p>Abandoned connections are identified and removed when
-     * {@link #getConnection()} is invoked and the following conditions hold
+     * {@link #getConnection()} is invoked and the following conditions hold:
+     * </p>
      * <ul><li>{@link #getRemoveAbandonedOnBorrow()} or
      *         {@link #getRemoveAbandonedOnMaintenance()} = true</li>
-     *     <li>{@link #getNumActive()} > {@link #getMaxTotal()} - 3 </li>
-     *     <li>{@link #getNumIdle()} < 2 </li></ul></p>
+     *     <li>{@link #getNumActive()} &gt; {@link #getMaxTotal()} - 3 </li>
+     *     <li>{@link #getNumIdle()} &lt; 2 </li></ul>
      *
      * @see #getRemoveAbandonedTimeout()
      */
@@ -1569,11 +1570,12 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * {@link #getRemoveAbandonedTimeout() removeAbandonedTimeout} seconds.</p>
      *
      * <p>Abandoned connections are identified and removed when
-     * {@link #getConnection()} is invoked and the following conditions hold
+     * {@link #getConnection()} is invoked and the following conditions hold:
+     * </p>
      * <ul><li>{@link #getRemoveAbandonedOnBorrow()} or
      *         {@link #getRemoveAbandonedOnMaintenance()} = true</li>
-     *     <li>{@link #getNumActive()} > {@link #getMaxTotal()} - 3 </li>
-     *     <li>{@link #getNumIdle()} < 2 </li></ul></p>
+     *     <li>{@link #getNumActive()} &gt; {@link #getMaxTotal()} - 3 </li>
+     *     <li>{@link #getNumIdle()} &lt; 2 </li></ul>
      *
      * @see #getRemoveAbandonedTimeout()
      */
@@ -1613,13 +1615,13 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * one of these to execute a query (using one of the execute methods)
      * resets the lastUsed property of the parent connection.</p>
      *
-     * <p>Abandoned connection cleanup happens when
-     * <code><ul>
+     * <p>Abandoned connection cleanup happens when:</p>
+     * <ul>
      * <li>{@link #getRemoveAbandonedOnBorrow()} or
      *     {@link #getRemoveAbandonedOnMaintenance()} = true</li>
      * <li>{@link #getNumIdle() numIdle} &lt; 2</li>
      * <li>{@link #getNumActive() numActive} &gt; {@link #getMaxTotal() maxTotal} - 3</li>
-     * </ul></code></p>
+     * </ul>
      *
      * <p>The default value is 300 seconds.</p>
      */
@@ -1864,6 +1866,47 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
         throw new SQLFeatureNotSupportedException();
     }
 
+    /**
+     * Manually invalidates a connection, effectively requesting the pool to try
+     * to close it, remove it from the pool and reclaim pool capacity.
+     *
+     * @throws IllegalStateException
+     *             if invalidating the connection failed.
+     * @since 2.1
+     */
+    public void invalidateConnection(Connection connection) throws IllegalStateException {
+        if (connection == null) {
+            return;
+        }
+        if (connectionPool == null) {
+            throw new IllegalStateException("Cannot invalidate connection: ConnectionPool is null.");
+        }
+
+        final PoolableConnection poolableConnection;
+        try {
+            poolableConnection = connection.unwrap(PoolableConnection.class);
+            if (poolableConnection == null) {
+                throw new IllegalStateException(
+                        "Cannot invalidate connection: Connection is not a poolable connection.");
+            }
+        } catch (SQLException e) {
+            throw new IllegalStateException("Cannot invalidate connection: Unwrapping poolable connection failed.", e);
+        }
+
+        // attempt to close the connection for good measure
+        try {
+            connection.close();
+        } catch (Exception e) {
+            // ignore any exceptions here
+        }
+
+        try {
+            connectionPool.invalidateObject(poolableConnection);
+        } catch (Exception e) {
+            throw new IllegalStateException("Invalidating connection threw unexpected exception", e);
+        }
+    }
+
     // ------------------------------------------------------ Protected Methods
 
 

==================================================
package-info.java
index 777977e16f..6395e29072 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/datasources/package-info.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/datasources/package-info.java
@@ -36,7 +36,7 @@
  * webapp:
  * </p>
  *
- * <code><pre>
+ * <code>
  *  &lt;Resource name="jdbc/bookstore" auth="Container"
  *             type="org.apache.tomcat.dbcp.dbcp2.datasources.PerUserPoolPoolDataSource"/&gt;
  *   &lt;ResourceParams name="jdbc/bookstore"&gt;
@@ -51,14 +51,14 @@
  *       &lt;name&gt;defaultMaxTotal&lt;/name&gt;&lt;value&gt;30&lt;/value&gt;
  *     &lt;/parameter&gt;
  *   &lt;/ResourceParams&gt;
- * </pre></code>
+ * </code>
  *
  * <p>
  * In web.xml.  Note that elements must be given in the order of the dtd
  * described in the servlet specification:
  * </p>
  *
- * <code><pre>
+ * <code>
  * &lt;resource-ref&gt;
  *   &lt;description&gt;
  *     Resource reference to a factory for java.sql.Connection
@@ -75,7 +75,7 @@
  *     Container
  *   &lt;/res-auth&gt;
  * &lt;/resource-ref&gt;
- * </pre></code>
+ * </code>
  *
  * <p>
  * Apache Tomcat deploys all objects configured similarly to above within the
@@ -90,7 +90,7 @@
  * below:
  * </p>
  *
- * <code><pre>
+ * <code>
  *
  *     Context ctx = new InitialContext();
  *     DataSource ds = (DataSource)
@@ -109,7 +109,7 @@
  *             con.close();
  *     }
  *
- * </pre></code>
+ * </code>
  *
  * <p>
  * The reference to the <code>DataSource</code> could be maintained, for
@@ -130,7 +130,7 @@
  * DriverAdapterCPDS as the backend source, though any CPDS is applicable.
  * </p>
  *
- * <code><pre>
+ * <code>
  *
  * public class Pool
  * {
@@ -158,13 +158,13 @@
  *     }
  * }
  *
- * </pre></code>
+ * </code>
  *
  * <p>
  * This class can then be used wherever a connection is needed:
  * </p>
  *
- * <code><pre>
+ * <code>
  *     Connection con = null;
  *     try
  *     {
@@ -178,6 +178,6 @@
  *         if (con != null)
  *             con.close();
  *     }
- * </pre></code>
+ * </code>
  */
 package org.apache.tomcat.dbcp.dbcp2.datasources;

==================================================
