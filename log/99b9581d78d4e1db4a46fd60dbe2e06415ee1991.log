99b9581d78d4e1db4a46fd60dbe2e06415ee1991
==================================================
Add comment to non-static loggers
==================================================
Mark Thomas
==================================================
Fri Jun 1 16:11:10 2018 +0000
==================================================
AuthenticatorBase.java
Add comment to non-static loggers

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1832698 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BasicAuthenticator.java
index 98ac2289fe..360b964d6b 100644
--- a/java/org/apache/catalina/authenticator/AuthenticatorBase.java
+++ b/java/org/apache/catalina/authenticator/AuthenticatorBase.java
@@ -90,7 +90,7 @@ import org.apache.tomcat.util.res.StringManager;
 public abstract class AuthenticatorBase extends ValveBase
         implements Authenticator, RegistrationListener {
 
-    private final Log log = LogFactory.getLog(AuthenticatorBase.class);
+    private final Log log = LogFactory.getLog(AuthenticatorBase.class); // must not be static
 
     /**
      * "Expires" header always set to Date(1), so generate once only

==================================================
DigestAuthenticator.java
index 963c1e933a..1ae71475d2 100644
--- a/java/org/apache/catalina/authenticator/BasicAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/BasicAuthenticator.java
@@ -45,7 +45,7 @@ import org.apache.tomcat.util.codec.binary.Base64;
  */
 public class BasicAuthenticator extends AuthenticatorBase {
 
-    private final Log log = LogFactory.getLog(BasicAuthenticator.class);
+    private final Log log = LogFactory.getLog(BasicAuthenticator.class); // must not be static
 
     private Charset charset = StandardCharsets.ISO_8859_1;
     private String charsetString = null;

==================================================
FormAuthenticator.java
index efd0341ae6..3fa26797d9 100644
--- a/java/org/apache/catalina/authenticator/DigestAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/DigestAuthenticator.java
@@ -45,7 +45,7 @@ import org.apache.tomcat.util.security.MD5Encoder;
  */
 public class DigestAuthenticator extends AuthenticatorBase {
 
-    private final Log log = LogFactory.getLog(DigestAuthenticator.class);
+    private final Log log = LogFactory.getLog(DigestAuthenticator.class); // must not be static
 
 
     // -------------------------------------------------------------- Constants

==================================================
SpnegoAuthenticator.java
index 9d57ffaa84..1b54ddd2e7 100644
--- a/java/org/apache/catalina/authenticator/FormAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/FormAuthenticator.java
@@ -52,7 +52,7 @@ import org.apache.tomcat.util.http.MimeHeaders;
 public class FormAuthenticator
     extends AuthenticatorBase {
 
-    private final Log log = LogFactory.getLog(FormAuthenticator.class);
+    private final Log log = LogFactory.getLog(FormAuthenticator.class); // must not be static
 
 
     // ----------------------------------------------------- Instance Variables

==================================================
AuthConfigFactoryImpl.java
index 59886b6016..a8f8834aa3 100644
--- a/java/org/apache/catalina/authenticator/SpnegoAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/SpnegoAuthenticator.java
@@ -54,7 +54,7 @@ import org.ietf.jgss.Oid;
  */
 public class SpnegoAuthenticator extends AuthenticatorBase {
 
-    private final Log log = LogFactory.getLog(SpnegoAuthenticator.class);
+    private final Log log = LogFactory.getLog(SpnegoAuthenticator.class); // must not be static
     private static final String AUTH_HEADER_VALUE_NEGOTIATE = "Negotiate";
 
     private String loginConfigName = Constants.DEFAULT_LOGIN_MODULE_NAME;

==================================================
CallbackHandlerImpl.java
index 44296dbc08..ee1dd5f589 100644
--- a/java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java
+++ b/java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java
@@ -40,7 +40,7 @@ import org.apache.tomcat.util.res.StringManager;
 
 public class AuthConfigFactoryImpl extends AuthConfigFactory {
 
-    private final Log log = LogFactory.getLog(AuthConfigFactoryImpl.class);
+    private final Log log = LogFactory.getLog(AuthConfigFactoryImpl.class); // must not be static
     private static final StringManager sm = StringManager.getManager(AuthConfigFactoryImpl.class);
 
     private static final String CONFIG_PATH = "conf/jaspic-providers.xml";

==================================================
ApplicationFilterConfig.java
index a32bd9ea46..aec01641a0 100644
--- a/java/org/apache/catalina/authenticator/jaspic/CallbackHandlerImpl.java
+++ b/java/org/apache/catalina/authenticator/jaspic/CallbackHandlerImpl.java
@@ -39,7 +39,7 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public class CallbackHandlerImpl implements CallbackHandler {
 
-    private final Log log = LogFactory.getLog(CallbackHandlerImpl.class);
+    private final Log log = LogFactory.getLog(CallbackHandlerImpl.class); // must not be static
     private static final StringManager sm = StringManager.getManager(CallbackHandlerImpl.class);
 
     private static CallbackHandler instance;

==================================================
StandardWrapper.java
index 9c5001f966..3d85edd4a1 100644
--- a/java/org/apache/catalina/core/ApplicationFilterConfig.java
+++ b/java/org/apache/catalina/core/ApplicationFilterConfig.java
@@ -61,7 +61,7 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
     static final StringManager sm =
         StringManager.getManager(Constants.Package);
 
-    private final Log log = LogFactory.getLog(ApplicationFilterConfig.class);
+    private final Log log = LogFactory.getLog(ApplicationFilterConfig.class); // must not be static
 
     /**
      * Empty String collection to serve as the basis for empty enumerations.

==================================================
AddDefaultCharsetFilter.java
index da13fa6ead..6d52279db8 100644
--- a/java/org/apache/catalina/core/StandardWrapper.java
+++ b/java/org/apache/catalina/core/StandardWrapper.java
@@ -74,7 +74,7 @@ import org.apache.tomcat.util.modeler.Util;
 public class StandardWrapper extends ContainerBase
     implements ServletConfig, Wrapper, NotificationEmitter {
 
-    private final Log log = LogFactory.getLog(StandardWrapper.class);
+    private final Log log = LogFactory.getLog(StandardWrapper.class); // must not be static
 
     protected static final String[] DEFAULT_SERVLET_METHODS = new String[] {
                                                     "GET", "HEAD", "POST" };

==================================================
CorsFilter.java
index d82bb9fc44..b146764b12 100644
--- a/java/org/apache/catalina/filters/AddDefaultCharsetFilter.java
+++ b/java/org/apache/catalina/filters/AddDefaultCharsetFilter.java
@@ -49,7 +49,7 @@ public class AddDefaultCharsetFilter extends FilterBase {
 
     // Log must be non-static as loggers are created per class-loader and this
     // Filter may be used in multiple class loaders
-    private final Log log = LogFactory.getLog(AddDefaultCharsetFilter.class);
+    private final Log log = LogFactory.getLog(AddDefaultCharsetFilter.class); // must not be static
 
     private static final String DEFAULT_ENCODING = "ISO-8859-1";
 

==================================================
CsrfPreventionFilterBase.java
index 2f6e9166bf..8226e6626e 100644
--- a/java/org/apache/catalina/filters/CorsFilter.java
+++ b/java/org/apache/catalina/filters/CorsFilter.java
@@ -79,7 +79,7 @@ import org.apache.tomcat.util.res.StringManager;
 public class CorsFilter extends GenericFilter {
 
     private static final long serialVersionUID = 1L;
-    private final Log log = LogFactory.getLog(CorsFilter.class);
+    private final Log log = LogFactory.getLog(CorsFilter.class); // must not be static
     private static final StringManager sm = StringManager.getManager(CorsFilter.class);
 
 

==================================================
ExpiresFilter.java
index 4e2d1334be..c0083f0945 100644
--- a/java/org/apache/catalina/filters/CsrfPreventionFilterBase.java
+++ b/java/org/apache/catalina/filters/CsrfPreventionFilterBase.java
@@ -31,7 +31,7 @@ public abstract class CsrfPreventionFilterBase extends FilterBase {
 
     // Log must be non-static as loggers are created per class-loader and this
     // Filter may be used in multiple class loaders
-    private final Log log = LogFactory.getLog(CsrfPreventionFilterBase.class);
+    private final Log log = LogFactory.getLog(CsrfPreventionFilterBase.class); // must not be static
 
     private String randomClass = SecureRandom.class.getName();
 

==================================================
FailedRequestFilter.java
index 5661465d70..b779ff84da 100644
--- a/java/org/apache/catalina/filters/ExpiresFilter.java
+++ b/java/org/apache/catalina/filters/ExpiresFilter.java
@@ -1052,7 +1052,7 @@ public class ExpiresFilter extends FilterBase {
 
     // Log must be non-static as loggers are created per class-loader and this
     // Filter may be used in multiple class loaders
-    private final Log log = LogFactory.getLog(ExpiresFilter.class);
+    private final Log log = LogFactory.getLog(ExpiresFilter.class); // must not be static
 
     private static final String PARAMETER_EXPIRES_BY_TYPE = "ExpiresByType";
 

==================================================
HttpHeaderSecurityFilter.java
index 9034fb156a..2e504e64dd 100644
--- a/java/org/apache/catalina/filters/FailedRequestFilter.java
+++ b/java/org/apache/catalina/filters/FailedRequestFilter.java
@@ -45,7 +45,7 @@ public class FailedRequestFilter extends FilterBase {
 
     // Log must be non-static as loggers are created per class-loader and this
     // Filter may be used in multiple class loaders
-    private final Log log = LogFactory.getLog(FailedRequestFilter.class);
+    private final Log log = LogFactory.getLog(FailedRequestFilter.class); // must not be static
 
     @Override
     protected Log getLogger() {

==================================================
RemoteAddrFilter.java
index 4a2e1bc02c..a41aca532c 100644
--- a/java/org/apache/catalina/filters/HttpHeaderSecurityFilter.java
+++ b/java/org/apache/catalina/filters/HttpHeaderSecurityFilter.java
@@ -38,7 +38,7 @@ public class HttpHeaderSecurityFilter extends FilterBase {
 
     // Log must be non-static as loggers are created per class-loader and this
     // Filter may be used in multiple class loaders
-    private final Log log = LogFactory.getLog(HttpHeaderSecurityFilter.class);
+    private final Log log = LogFactory.getLog(HttpHeaderSecurityFilter.class); // must not be static
 
     // HSTS
     private static final String HSTS_HEADER_NAME = "Strict-Transport-Security";

==================================================
RemoteCIDRFilter.java
index afc6f4e833..1239494dea 100644
--- a/java/org/apache/catalina/filters/RemoteAddrFilter.java
+++ b/java/org/apache/catalina/filters/RemoteAddrFilter.java
@@ -37,7 +37,7 @@ public final class RemoteAddrFilter extends RequestFilter {
 
     // Log must be non-static as loggers are created per class-loader and this
     // Filter may be used in multiple class loaders
-    private final Log log = LogFactory.getLog(RemoteAddrFilter.class);
+    private final Log log = LogFactory.getLog(RemoteAddrFilter.class); // must not be static
 
 
     /**

==================================================
RemoteHostFilter.java
index 9918f07245..01b655d2e0 100644
--- a/java/org/apache/catalina/filters/RemoteCIDRFilter.java
+++ b/java/org/apache/catalina/filters/RemoteCIDRFilter.java
@@ -46,7 +46,7 @@ public final class RemoteCIDRFilter extends FilterBase {
     /**
      * Our logger
      */
-    private final Log log = LogFactory.getLog(RemoteCIDRFilter.class);
+    private final Log log = LogFactory.getLog(RemoteCIDRFilter.class); // must not be static
 
     /**
      * The list of allowed {@link NetMask}s

==================================================
RemoteIpFilter.java
index 0ca08b11ff..ec10b53cf5 100644
--- a/java/org/apache/catalina/filters/RemoteHostFilter.java
+++ b/java/org/apache/catalina/filters/RemoteHostFilter.java
@@ -37,7 +37,7 @@ public final class RemoteHostFilter extends RequestFilter {
 
     // Log must be non-static as loggers are created per class-loader and this
     // Filter may be used in multiple class loaders
-    private final Log log = LogFactory.getLog(RemoteHostFilter.class);
+    private final Log log = LogFactory.getLog(RemoteHostFilter.class); // must not be static
 
 
     /**

==================================================
RequestDumperFilter.java
index 96aaafa449..a50979fde1 100644
--- a/java/org/apache/catalina/filters/RemoteIpFilter.java
+++ b/java/org/apache/catalina/filters/RemoteIpFilter.java
@@ -654,7 +654,7 @@ public class RemoteIpFilter extends GenericFilter {
 
     // Log must be non-static as loggers are created per class-loader and this
     // Filter may be used in multiple class loaders
-    private final Log log = LogFactory.getLog(RemoteIpFilter.class);
+    private final Log log = LogFactory.getLog(RemoteIpFilter.class); // must not be static
 
     protected static final String PROTOCOL_HEADER_PARAMETER = "protocolHeader";
 

==================================================
SetCharacterEncodingFilter.java
index 419e8425d3..766a42db83 100644
--- a/java/org/apache/catalina/filters/RequestDumperFilter.java
+++ b/java/org/apache/catalina/filters/RequestDumperFilter.java
@@ -66,7 +66,7 @@ public class RequestDumperFilter extends GenericFilter {
 
     // Log must be non-static as loggers are created per class-loader and this
     // Filter may be used in multiple class loaders
-    private final Log log = LogFactory.getLog(RequestDumperFilter.class);
+    private final Log log = LogFactory.getLog(RequestDumperFilter.class); // must not be static
 
 
     /**

==================================================
BackupManager.java
index 63e3357a4d..e196427ffb 100644
--- a/java/org/apache/catalina/filters/SetCharacterEncodingFilter.java
+++ b/java/org/apache/catalina/filters/SetCharacterEncodingFilter.java
@@ -56,7 +56,7 @@ public class SetCharacterEncodingFilter extends FilterBase {
 
     // Log must be non-static as loggers are created per class-loader and this
     // Filter may be used in multiple class loaders
-    private final Log log = LogFactory.getLog(SetCharacterEncodingFilter.class);
+    private final Log log = LogFactory.getLog(SetCharacterEncodingFilter.class); // must not be static
 
 
     // ----------------------------------------------------- Instance Variables

==================================================
ClusterManagerBase.java
index 4bdcf6dd4a..9533fe270a 100644
--- a/java/org/apache/catalina/ha/session/BackupManager.java
+++ b/java/org/apache/catalina/ha/session/BackupManager.java
@@ -38,7 +38,7 @@ import org.apache.tomcat.util.res.StringManager;
 public class BackupManager extends ClusterManagerBase
         implements MapOwner, DistributedManager {
 
-    private final Log log = LogFactory.getLog(BackupManager.class);
+    private final Log log = LogFactory.getLog(BackupManager.class); // must not be static
 
     /**
      * The string manager for this package.

==================================================
PersistentManagerBase.java
index 751e58bb6a..9935c67c9f 100644
--- a/java/org/apache/catalina/ha/session/ClusterManagerBase.java
+++ b/java/org/apache/catalina/ha/session/ClusterManagerBase.java
@@ -35,7 +35,7 @@ import org.apache.juli.logging.LogFactory;
 
 public abstract class ClusterManagerBase extends ManagerBase implements ClusterManager {
 
-    private final Log log = LogFactory.getLog(ClusterManagerBase.class);
+    private final Log log = LogFactory.getLog(ClusterManagerBase.class); // must not be static
 
     /**
      * A reference to the cluster

==================================================
AbstractReplicatedMap.java
index 3f1f565fa2..0a3cd88737 100644
--- a/java/org/apache/catalina/session/PersistentManagerBase.java
+++ b/java/org/apache/catalina/session/PersistentManagerBase.java
@@ -49,7 +49,7 @@ import org.apache.juli.logging.LogFactory;
 public abstract class PersistentManagerBase extends ManagerBase
         implements StoreManager {
 
-    private final Log log = LogFactory.getLog(PersistentManagerBase.class);
+    private final Log log = LogFactory.getLog(PersistentManagerBase.class); // must not be static
 
     // ---------------------------------------------------- Security Classes
 

==================================================
SessionIdGeneratorBase.java
index eb83851751..7c66d26319 100644
--- a/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
@@ -61,7 +61,7 @@ public abstract class AbstractReplicatedMap<K,V>
 
     protected static final StringManager sm = StringManager.getManager(AbstractReplicatedMap.class);
 
-    private final Log log = LogFactory.getLog(AbstractReplicatedMap.class);
+    private final Log log = LogFactory.getLog(AbstractReplicatedMap.class); // must not be static
 
     /**
      * The default initial capacity - MUST be a power of two.

==================================================
ConnectionSettingsBase.java
index e95ce720ef..ca3d6363c6 100644
--- a/java/org/apache/catalina/util/SessionIdGeneratorBase.java
+++ b/java/org/apache/catalina/util/SessionIdGeneratorBase.java
@@ -32,7 +32,7 @@ import org.apache.tomcat.util.res.StringManager;
 public abstract class SessionIdGeneratorBase extends LifecycleBase
         implements SessionIdGenerator {
 
-    private final Log log = LogFactory.getLog(SessionIdGeneratorBase.class);
+    private final Log log = LogFactory.getLog(SessionIdGeneratorBase.class); // must not be static
 
 
     private static final StringManager sm =

==================================================
EmbeddedServletOptions.java
index a4e65701eb..939e6d09b2 100644
--- a/java/org/apache/coyote/http2/ConnectionSettingsBase.java
+++ b/java/org/apache/coyote/http2/ConnectionSettingsBase.java
@@ -25,7 +25,7 @@ import org.apache.tomcat.util.res.StringManager;
 
 abstract class ConnectionSettingsBase<T extends Throwable> {
 
-    private final Log log = LogFactory.getLog(ConnectionSettingsBase.class);
+    private final Log log = LogFactory.getLog(ConnectionSettingsBase.class); // must not be static
     private final StringManager sm = StringManager.getManager(ConnectionSettingsBase.class);
 
     private final String connectionId;

==================================================
JspConfig.java
index 56f19c40cb..d9aded18fc 100644
--- a/java/org/apache/jasper/EmbeddedServletOptions.java
+++ b/java/org/apache/jasper/EmbeddedServletOptions.java
@@ -43,7 +43,7 @@ import org.apache.juli.logging.LogFactory;
 public final class EmbeddedServletOptions implements Options {
 
     // Logger
-    private final Log log = LogFactory.getLog(EmbeddedServletOptions.class);
+    private final Log log = LogFactory.getLog(EmbeddedServletOptions.class); // must not be static
 
     private Properties settings = new Properties();
 

==================================================
JspReader.java
index 6493c12699..493c8fbdc7 100644
--- a/java/org/apache/jasper/compiler/JspConfig.java
+++ b/java/org/apache/jasper/compiler/JspConfig.java
@@ -39,7 +39,7 @@ import org.apache.juli.logging.LogFactory;
 public class JspConfig {
 
     // Logger
-    private final Log log = LogFactory.getLog(JspConfig.class);
+    private final Log log = LogFactory.getLog(JspConfig.class); // must not be static
 
     private Vector<JspPropertyGroup> jspProperties = null;
     private final ServletContext ctxt;

==================================================
JspRuntimeContext.java
index fb22b5f5a6..55ea7d1314 100644
--- a/java/org/apache/jasper/compiler/JspReader.java
+++ b/java/org/apache/jasper/compiler/JspReader.java
@@ -49,7 +49,7 @@ class JspReader {
     /**
      * Logger.
      */
-    private final Log log = LogFactory.getLog(JspReader.class);
+    private final Log log = LogFactory.getLog(JspReader.class); // must not be static
 
     /**
      * The current spot in the file.

==================================================
SmapUtil.java
index 7b7b1d6874..c6606007c8 100644
--- a/java/org/apache/jasper/compiler/JspRuntimeContext.java
+++ b/java/org/apache/jasper/compiler/JspRuntimeContext.java
@@ -62,7 +62,7 @@ public final class JspRuntimeContext {
     /**
      * Logger
      */
-    private final Log log = LogFactory.getLog(JspRuntimeContext.class);
+    private final Log log = LogFactory.getLog(JspRuntimeContext.class); // must not be static
 
     /**
      * Counts how many times the webapp's JSPs have been reloaded.

==================================================
JasperInitializer.java
index fe231ca9ec..856b9eae61 100644
--- a/java/org/apache/jasper/compiler/SmapUtil.java
+++ b/java/org/apache/jasper/compiler/SmapUtil.java
@@ -159,7 +159,7 @@ public class SmapUtil {
     // Installation logic (from Robert Field, JSR-045 spec lead)
     private static class SDEInstaller {
 
-        private final Log log = LogFactory.getLog(SDEInstaller.class);
+        private final Log log = LogFactory.getLog(SDEInstaller.class); // must not be static
 
         static final String nameSDE = "SourceDebugExtension";
 

==================================================
JspServletWrapper.java
index c3c7c886aa..0fc5d3aaa3 100644
--- a/java/org/apache/jasper/servlet/JasperInitializer.java
+++ b/java/org/apache/jasper/servlet/JasperInitializer.java
@@ -41,7 +41,7 @@ import org.xml.sax.SAXException;
 public class JasperInitializer implements ServletContainerInitializer {
 
     private static final String MSG = "org.apache.jasper.servlet.JasperInitializer";
-    private final Log log = LogFactory.getLog(JasperInitializer.class);
+    private final Log log = LogFactory.getLog(JasperInitializer.class); // must not be static
 
     /**
      * Preload classes required at runtime by a JSP servlet so that

==================================================
TldScanner.java
index 09dc81412a..11c4e5f4a0 100644
--- a/java/org/apache/jasper/servlet/JspServletWrapper.java
+++ b/java/org/apache/jasper/servlet/JspServletWrapper.java
@@ -80,7 +80,7 @@ public class JspServletWrapper {
     }
 
     // Logger
-    private final Log log = LogFactory.getLog(JspServletWrapper.class);
+    private final Log log = LogFactory.getLog(JspServletWrapper.class); // must not be static
 
     private Servlet theServlet;
     private final String jspUri;

==================================================
TagPluginParser.java
index 9448f53b28..5956ca2142 100644
--- a/java/org/apache/jasper/servlet/TldScanner.java
+++ b/java/org/apache/jasper/servlet/TldScanner.java
@@ -53,7 +53,7 @@ import org.xml.sax.SAXException;
  * Scans for and loads Tag Library Descriptors contained in a web application.
  */
 public class TldScanner {
-    private final Log log = LogFactory.getLog(TldScanner.class);
+    private final Log log = LogFactory.getLog(TldScanner.class); // must not be static
     private static final String MSG = "org.apache.jasper.servlet.TldScanner";
     private static final String TLD_EXT = ".tld";
     private static final String WEB_INF = "/WEB-INF/";

==================================================
TldParser.java
index 866af11c0c..74eab8c5cc 100644
--- a/java/org/apache/tomcat/util/descriptor/tagplugin/TagPluginParser.java
+++ b/java/org/apache/tomcat/util/descriptor/tagplugin/TagPluginParser.java
@@ -37,7 +37,7 @@ import org.xml.sax.SAXException;
  * Parser for Tag Plugin descriptors.
  */
 public class TagPluginParser {
-    private final Log log = LogFactory.getLog(TagPluginParser.class);
+    private final Log log = LogFactory.getLog(TagPluginParser.class); // must not be static
     private static final String PREFIX = "tag-plugins/tag-plugin";
     private final Digester digester;
     private final Map<String, String> plugins = new HashMap<>();

==================================================
WebXml.java
index edd117b888..1c59516489 100644
--- a/java/org/apache/tomcat/util/descriptor/tld/TldParser.java
+++ b/java/org/apache/tomcat/util/descriptor/tld/TldParser.java
@@ -36,7 +36,7 @@ import org.xml.sax.SAXException;
  * Parses a Tag Library Descriptor.
  */
 public class TldParser {
-    private final Log log = LogFactory.getLog(TldParser.class);
+    private final Log log = LogFactory.getLog(TldParser.class); // must not be static
     private final Digester digester;
 
     public TldParser(boolean namespaceAware, boolean validation,

==================================================
WebXmlParser.java
index 6bcaa96685..fefc10f8e3 100644
--- a/java/org/apache/tomcat/util/descriptor/web/WebXml.java
+++ b/java/org/apache/tomcat/util/descriptor/web/WebXml.java
@@ -64,7 +64,7 @@ public class WebXml extends XmlEncodingBase implements DocumentProperties.Charse
     private static final StringManager sm =
         StringManager.getManager(Constants.PACKAGE_NAME);
 
-    private final Log log = LogFactory.getLog(WebXml.class);
+    private final Log log = LogFactory.getLog(WebXml.class); // must not be static
 
     /**
      * Global defaults are overridable but Servlets and Servlet mappings need to

==================================================
StandardJarScanner.java
index 312524f255..e728c240f7 100644
--- a/java/org/apache/tomcat/util/descriptor/web/WebXmlParser.java
+++ b/java/org/apache/tomcat/util/descriptor/web/WebXmlParser.java
@@ -31,7 +31,7 @@ import org.xml.sax.SAXParseException;
 
 public class WebXmlParser {
 
-    private final Log log = LogFactory.getLog(WebXmlParser.class);
+    private final Log log = LogFactory.getLog(WebXmlParser.class); // must not be static
 
     /**
      * The string resources for this package.

==================================================
WsFrameClient.java
index a1b89a1d66..9b12ce98a7 100644
--- a/java/org/apache/tomcat/util/scan/StandardJarScanner.java
+++ b/java/org/apache/tomcat/util/scan/StandardJarScanner.java
@@ -61,7 +61,7 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public class StandardJarScanner implements JarScanner {
 
-    private final Log log = LogFactory.getLog(StandardJarScanner.class);
+    private final Log log = LogFactory.getLog(StandardJarScanner.class); // must not be static
 
     /**
      * The string resources for this package.

==================================================
WsRemoteEndpointImplBase.java
index 5e0d1b6a14..f17b57ad9d 100644
--- a/java/org/apache/tomcat/websocket/WsFrameClient.java
+++ b/java/org/apache/tomcat/websocket/WsFrameClient.java
@@ -30,7 +30,7 @@ import org.apache.tomcat.util.res.StringManager;
 
 public class WsFrameClient extends WsFrameBase {
 
-    private final Log log = LogFactory.getLog(WsFrameClient.class);
+    private final Log log = LogFactory.getLog(WsFrameClient.class); // must not be static
     private static final StringManager sm = StringManager.getManager(WsFrameClient.class);
 
     private final AsyncChannelWrapper channel;

==================================================
WsSession.java
index 02d677d5b4..e3bee051bf 100644
--- a/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java
+++ b/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java
@@ -55,7 +55,7 @@ public abstract class WsRemoteEndpointImplBase implements RemoteEndpoint {
 
     protected static final SendResult SENDRESULT_OK = new SendResult();
 
-    private final Log log = LogFactory.getLog(WsRemoteEndpointImplBase.class);
+    private final Log log = LogFactory.getLog(WsRemoteEndpointImplBase.class); // must not be static
 
     private final StateMachine stateMachine = new StateMachine();
 

==================================================
WsWebSocketContainer.java
index 616a77f057..6b040c4e97 100644
--- a/java/org/apache/tomcat/websocket/WsSession.java
+++ b/java/org/apache/tomcat/websocket/WsSession.java
@@ -64,7 +64,7 @@ public class WsSession implements Session {
     private static final StringManager sm = StringManager.getManager(WsSession.class);
     private static AtomicLong ids = new AtomicLong(0);
 
-    private final Log log = LogFactory.getLog(WsSession.class);
+    private final Log log = LogFactory.getLog(WsSession.class); // must not be static
 
     private final Endpoint localEndpoint;
     private final WsRemoteEndpointImplBase wsRemoteEndpoint;

==================================================
PojoEndpointBase.java
index ce61c352c8..ff612c2a8a 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -87,7 +87,7 @@ public class WsWebSocketContainer implements WebSocketContainer, BackgroundProce
     private volatile AsynchronousChannelGroup asynchronousChannelGroup = null;
     private final Object asynchronousChannelGroupLock = new Object();
 
-    private final Log log = LogFactory.getLog(WsWebSocketContainer.class);
+    private final Log log = LogFactory.getLog(WsWebSocketContainer.class); // must not be static
     private final Map<Endpoint, Set<WsSession>> endpointSessionMap =
             new HashMap<>();
     private final Map<WsSession,WsSession> sessions = new ConcurrentHashMap<>();

==================================================
WsFrameServer.java
index 4f054e51a0..75615d41c5 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoEndpointBase.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoEndpointBase.java
@@ -39,7 +39,7 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public abstract class PojoEndpointBase extends Endpoint {
 
-    private final Log log = LogFactory.getLog(PojoEndpointBase.class);
+    private final Log log = LogFactory.getLog(PojoEndpointBase.class); // must not be static
     private static final StringManager sm = StringManager.getManager(PojoEndpointBase.class);
 
     private Object pojo;

==================================================
WsHttpUpgradeHandler.java
index 281a37a536..c1e369abfc 100644
--- a/java/org/apache/tomcat/websocket/server/WsFrameServer.java
+++ b/java/org/apache/tomcat/websocket/server/WsFrameServer.java
@@ -33,7 +33,7 @@ import org.apache.tomcat.websocket.WsSession;
 
 public class WsFrameServer extends WsFrameBase {
 
-    private final Log log = LogFactory.getLog(WsFrameServer.class);
+    private final Log log = LogFactory.getLog(WsFrameServer.class); // must not be static
     private static final StringManager sm = StringManager.getManager(WsFrameServer.class);
 
     private final SocketWrapperBase<?> socketWrapper;

==================================================
WsRemoteEndpointImplServer.java
index d8c329aa8d..0cde0e3672 100644
--- a/java/org/apache/tomcat/websocket/server/WsHttpUpgradeHandler.java
+++ b/java/org/apache/tomcat/websocket/server/WsHttpUpgradeHandler.java
@@ -46,7 +46,7 @@ import org.apache.tomcat.websocket.WsSession;
  */
 public class WsHttpUpgradeHandler implements InternalHttpUpgradeHandler {
 
-    private final Log log = LogFactory.getLog(WsHttpUpgradeHandler.class);
+    private final Log log = LogFactory.getLog(WsHttpUpgradeHandler.class); // must not be static
     private static final StringManager sm = StringManager.getManager(WsHttpUpgradeHandler.class);
 
     private final ClassLoader applicationClassLoader;

==================================================
