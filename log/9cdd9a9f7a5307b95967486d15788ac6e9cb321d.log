9cdd9a9f7a5307b95967486d15788ac6e9cb321d
==================================================
Revert Keep-Alive patch.
==================================================
Mladen Turk
==================================================
Fri Sep 29 14:58:32 2006 +0000
==================================================
ContextConfig.java
index 58ba947ef2..5651d53c24 100644
--- a/java/org/apache/catalina/connector/mbeans-descriptors.xml
+++ b/java/org/apache/catalina/connector/mbeans-descriptors.xml
@@ -93,10 +93,6 @@
           description="Maximum number of Keep-Alive requests to honor per connection"
                  type="int"/>
 
-    <attribute   name="keepAliveTimeout"
-          description="The number of seconds Tomcat will wait for a subsequent request before closing the connection"
-                 type="int"/>
-
     <attribute   name="maxPostSize"
           description="Maximum size in bytes of a POST which will be handled by the servlet API provided features"
                  type="int"/>

==================================================
AjpAprProtocol.java
index f9145bbd6a..f9ec1061f3 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -616,7 +616,6 @@ public class ContextConfig
                 source =
                     new InputSource("file://" + file.getAbsolutePath());
                 stream = new FileInputStream(file);
-                context.addWatchedResource(file.getAbsolutePath());
             }
         } catch (Exception e) {
             log.error(sm.getString("contextConfig.defaultMissing") 

==================================================
Http11AprProcessor.java
index 6a10a1d5b3..9a3f0387ed 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -68,7 +68,6 @@ public class AjpAprProtocol
         cHandler = new AjpConnectionHandler(this);
         setSoLinger(Constants.DEFAULT_CONNECTION_LINGER);
         setSoTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);
-        setKeepAliveTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);
         //setServerSoTimeout(Constants.DEFAULT_SERVER_SOCKET_TIMEOUT);
         setTcpNoDelay(Constants.DEFAULT_TCP_NO_DELAY);
     }
@@ -418,15 +417,6 @@ public class AjpAprProtocol
         setAttribute("soTimeout", "" + i);
     }
 
-    public int getKeepAliveTimeout() {
-        return ep.getKeepAliveTimeout();
-    }
-
-
-    public void setKeepAliveTimeout( int i ) {
-        ep.setKeepAliveTimeout(i);
-        setAttribute("keepAliveTimeout", "" + i);
-    }
     
     public void setRequiredSecret(String requiredSecret) {
         this.requiredSecret = requiredSecret;

==================================================
Http11AprProtocol.java
index e0c8588741..3b3daf4eee 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -208,6 +208,7 @@ public class Http11AprProcessor implements ActionHook {
      */
     protected int maxKeepAliveRequests = -1;
 
+
     /**
      * SSL enabled ?
      */
@@ -642,6 +643,7 @@ public class Http11AprProcessor implements ActionHook {
         return maxKeepAliveRequests;
     }
 
+
     /**
      * Set the maximum size of a POST which will be buffered in SSL mode.
      */

==================================================
Http11Processor.java
index 960b7a5c93..fd27184055 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -54,7 +54,6 @@ public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration
         cHandler = new Http11ConnectionHandler( this );
         setSoLinger(Constants.DEFAULT_CONNECTION_LINGER);
         setSoTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);
-        setKeepAliveTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);
         //setServerSoTimeout(Constants.DEFAULT_SERVER_SOCKET_TIMEOUT);
         setTcpNoDelay(Constants.DEFAULT_TCP_NO_DELAY);
     }
@@ -463,19 +462,6 @@ public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration
         setAttribute("maxKeepAliveRequests", "" + mkar);
     }
 
-    /**
-     * The number of seconds Tomcat will wait for a subsequent request
-     * before closing the connection. The default is the same as for
-     * Apache HTTP Server (15 000 milliseconds).
-     */
-    public int getKeepAliveTimeout() {
-        return ep.getKeepAliveTimeout();
-    }
-
-    public void setKeepAliveTimeout(int timeout) {
-        ep.setKeepAliveTimeout(timeout);
-    }
-
     /**
      * Return the Keep-Alive policy for the connection.
      */

==================================================
Http11Protocol.java
index a5fc68a36a..58c8230714 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -620,6 +620,7 @@ public class Http11Processor implements ActionHook {
         return maxKeepAliveRequests;
     }
 
+
     /**
      * Set the maximum size of a POST which will be buffered in SSL mode.
      */

==================================================
Generator.java
index 9483c816d5..a1a92abed7 100644
--- a/java/org/apache/coyote/http11/Http11Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Protocol.java
@@ -281,6 +281,7 @@ public class Http11Protocol
     public int getMaxKeepAliveRequests() { return maxKeepAliveRequests; }
     public void setMaxKeepAliveRequests(int mkar) { maxKeepAliveRequests = mkar; }
 
+
     // HTTP
     /**
      * This timeout represents the socket timeout which will be used while

==================================================
AprEndpoint.java
index 537bd7202a..bb20079e58 100644
--- a/java/org/apache/jasper/compiler/Generator.java
+++ b/java/org/apache/jasper/compiler/Generator.java
@@ -3276,7 +3276,7 @@ class Generator {
         out.printil("out = _jspx_out;");
         out.printil("if (out != null && out.getBufferSize() != 0)");
         out.pushIndent();
-        out.printil("try { out.clearBuffer(); } catch (java.io.IOException e) {}");
+        out.printil("out.clearBuffer();");
         out.popIndent();
 
         out

==================================================
