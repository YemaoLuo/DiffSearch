56fb94fde6b56de4f6ff5ad3f7243b5187693742
==================================================
Avoid IO peeking with NIO2 to read the request line (introduced in r1681742), as the processor and its buffer is no longer associated and may not be the one processing the request.
==================================================
Remy Maucherat
==================================================
Wed May 27 17:45:31 2015 +0000
==================================================
Http11InputBuffer.java
Avoid IO peeking with NIO2 to read the request line (introduced in r1681742), as the processor and its buffer is no longer associated and may not be the one processing the request.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1682087 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Nio2Endpoint.java
index e1ca80aff5..3114841964 100644
--- a/java/org/apache/coyote/http11/Http11InputBuffer.java
+++ b/java/org/apache/coyote/http11/Http11InputBuffer.java
@@ -398,6 +398,9 @@ public class Http11InputBuffer implements InputBuffer {
                         // Haven't read any request data yet so use the keep-alive
                         // timeout.
                         wrapper.setReadTimeout(wrapper.getEndpoint().getKeepAliveTimeout());
+                        if (!wrapper.isNonBlocking()) {
+                            return false;
+                        }
                     }
                     if (!fill(false)) {
                         // A read is pending, so no longer in initial state

==================================================
SocketWrapperBase.java
index f093d1634d..8979e7ce25 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -1316,6 +1316,10 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
             }
         }
 
+        @Override
+        public boolean isNonBlocking() {
+            return false;
+        }
 
         /*
          * This should only be called from a thread that currently holds a lock

==================================================
