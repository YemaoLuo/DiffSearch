2efe2c5bc02dd7d70402dbc693d3443a00d60132
==================================================
Removed calling to a JDK 1.6 method if its run under 1.5 and still take advantage of the JMX features
==================================================
Filip Hanik
==================================================
Sat Dec 20 00:45:46 2008 +0000
==================================================
ConnectionPool.java
index afb82e40f2..0cf0bba133 100644
--- a/modules/jdbc-pool/build.xml
+++ b/modules/jdbc-pool/build.xml
@@ -23,7 +23,7 @@
   <!-- See "build.properties.sample" in the top level directory for all     -->
   <property name="version.major"         value="1" />
   <property name="version.minor"         value="0" />
-  <property name="version.build"         value="9" />
+  <property name="version.build"         value="10" />
   <property name="version.patch"         value="-beta" />
   <property name="version"               value="${version.major}.${version.minor}.${version.build}${version.patch}" />
   <!-- property values you must customize for successful building!!!        -->

==================================================
PoolProperties.java
index 09fbd39f1c..afaebf64a8 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -353,6 +353,9 @@ public class ConnectionPool {
         PoolProperties.InterceptorDefinition[] proxies = getPoolProperties().getJdbcInterceptorsAsArray();
         for (int i=0; i<proxies.length; i++) {
             try {
+                if (log.isDebugEnabled()) {
+                    log.debug("Creating interceptor instance of class:"+proxies[i].getInterceptorClass());
+                }
                 proxies[i].getInterceptorClass().newInstance().poolStarted(this);
             }catch (Exception x) {
                 log.error("Unable to inform interceptor of pool start.",x);
@@ -771,7 +774,11 @@ public class ConnectionPool {
         try {
             MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
             ObjectName name = new ObjectName(POOL_JMX_TYPE_PREFIX+"ConnectionPool,name="+getName());
-            jmxPool = new org.apache.tomcat.jdbc.pool.jmx.ConnectionPool(this);
+            if ("1.5".equals(System.getProperty("java.specification.version"))) {
+                jmxPool = new org.apache.tomcat.jdbc.pool.jmx.ConnectionPool(this);
+            } else {
+                jmxPool = new org.apache.tomcat.jdbc.pool.jmx.ConnectionPool(this,true);
+            }
             mbs.registerMBean(jmxPool, name);
         } catch (Exception x) {
             log.warn("Unable to start JMX integration for connection pool. Instance["+getName()+"] can't be monitored.",x);

==================================================
ConnectionPool.java
index 98f55f4cae..b01ef64fd7 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
@@ -25,12 +25,16 @@ import java.util.Map;
 import java.util.Properties;
 import java.util.concurrent.atomic.AtomicInteger;
 
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+
 /**
  * @author Filip Hanik
  *
  */
 public class PoolProperties {
     public static final String PKG_PREFIX = "org.apache.tomcat.jdbc.pool.interceptor.";
+    protected static Log log = LogFactory.getLog(PoolProperties.class);
     
     protected static AtomicInteger poolCounter = new AtomicInteger(0);
     protected Properties dbProperties = new Properties();
@@ -460,8 +464,14 @@ public class PoolProperties {
         public Class<? extends JdbcInterceptor> getInterceptorClass() throws ClassNotFoundException {
             if (clazz==null) {
                 if (getClassName().indexOf(".")<0) {
+                    if (log.isDebugEnabled()) {
+                        log.debug("Loading interceptor class:"+PoolProperties.PKG_PREFIX+getClassName());
+                    }
                     clazz = Class.forName(PoolProperties.PKG_PREFIX+getClassName(), true, this.getClass().getClassLoader());
                 } else {
+                    if (log.isDebugEnabled()) {
+                        log.debug("Loading interceptor class:"+getClassName());
+                    }
                     clazz = Class.forName(getClassName(), true, this.getClass().getClassLoader());
                 }
             }

==================================================
