f3d3920e8e82fc8a4a35ecf1dcd643292ac8f2eb
==================================================
Preparatory work for https://issues.apache.org/bugzilla/show_bug.cgi?id=40881
==================================================
Mark Emlyn
==================================================
Thu Jul 23 17:39:51 2009 +0000
==================================================
DeltaRequest.java
Preparatory work for https://issues.apache.org/bugzilla/show_bug.cgi?id=40881
As proposed on the dev list, remove the Realm from GenericPrincipal

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@797162 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DeltaSession.java
index e7db78c7fb..f73c0bebf4 100644
--- a/java/org/apache/catalina/ha/session/DeltaRequest.java
+++ b/java/org/apache/catalina/ha/session/DeltaRequest.java
@@ -184,7 +184,7 @@ public class DeltaRequest implements Externalizable {
                     Principal p = null;
                     if ( info.getAction() == ACTION_SET ) {
                         SerializablePrincipal sp = (SerializablePrincipal)info.getValue();
-                        p = sp.getPrincipal(session.getManager().getContainer().getRealm());
+                        p = sp.getPrincipal();
                     }
                     session.setPrincipal(p,false);
                     break;

==================================================
SerializablePrincipal.java
index bac0ca7e84..bb12249ce4 100644
--- a/java/org/apache/catalina/ha/session/DeltaSession.java
+++ b/java/org/apache/catalina/ha/session/DeltaSession.java
@@ -598,7 +598,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
         boolean hasPrincipal = stream.readBoolean();
         principal = null;
         if (hasPrincipal) {
-            principal = SerializablePrincipal.readPrincipal(stream,getManager().getContainer().getRealm());
+            principal = SerializablePrincipal.readPrincipal(stream);
         }
 
         //        setId((String) stream.readObject());

==================================================
SimpleTcpReplicationManager.java
index 076981c338..419291a448 100644
--- a/java/org/apache/catalina/ha/session/SerializablePrincipal.java
+++ b/java/org/apache/catalina/ha/session/SerializablePrincipal.java
@@ -64,13 +64,12 @@ public class SerializablePrincipal  implements java.io.Serializable {
      * Construct a new Principal, associated with the specified Realm, for the
      * specified username and password.
      *
-     * @param realm The Realm that owns this Principal
      * @param name The username of the user represented by this Principal
      * @param password Credentials used to authenticate this user
      */
-    public SerializablePrincipal(Realm realm, String name, String password) {
+    public SerializablePrincipal(String name, String password) {
 
-        this(realm, name, password, null);
+        this(name, password, null);
 
     }
 
@@ -80,14 +79,13 @@ public class SerializablePrincipal  implements java.io.Serializable {
      * specified username and password, with the specified role names
      * (as Strings).
      *
-     * @param realm The Realm that owns this principal
      * @param name The username of the user represented by this Principal
      * @param password Credentials used to authenticate this user
      * @param roles List of roles (must be Strings) possessed by this user
      */
-    public SerializablePrincipal(Realm realm, String name, String password,
+    public SerializablePrincipal(String name, String password,
                             List<String> roles) {
-        this(realm, name, password, roles, null);
+        this(name, password, roles, null);
     }
 
     
@@ -96,17 +94,15 @@ public class SerializablePrincipal  implements java.io.Serializable {
      * specified username and password, with the specified role names
      * (as Strings).
      *
-     * @param realm The Realm that owns this principal
      * @param name The username of the user represented by this Principal
      * @param password Credentials used to authenticate this user
      * @param roles List of roles (must be Strings) possessed by this user
      * @param userPrincipal The user principal to be exposed to applications
      */
-    public SerializablePrincipal(Realm realm, String name, String password,
+    public SerializablePrincipal(String name, String password,
                             List<String> roles, Principal userPrincipal) {
 
         super();
-        this.realm = realm;
         this.name = name;
         this.password = password;
         if (roles != null) {
@@ -197,21 +193,20 @@ public class SerializablePrincipal  implements java.io.Serializable {
     public static SerializablePrincipal createPrincipal(GenericPrincipal principal)
     {
         if ( principal==null) return null;
-        return new SerializablePrincipal(principal.getRealm(),
-                                         principal.getName(),
+        return new SerializablePrincipal(principal.getName(),
                                          principal.getPassword(),
                                          principal.getRoles()!=null?Arrays.asList(principal.getRoles()):null,
                                          principal.getUserPrincipal()!=principal?principal.getUserPrincipal():null);
     }
 
-    public GenericPrincipal getPrincipal( Realm realm )
+    public GenericPrincipal getPrincipal()
     {
-        return new GenericPrincipal(realm, name, password,
+        return new GenericPrincipal(name, password,
                 getRoles()!=null?Arrays.asList(getRoles()):null,
                 userPrincipal);
     }
     
-    public static GenericPrincipal readPrincipal(ObjectInput in, Realm realm)
+    public static GenericPrincipal readPrincipal(ObjectInput in)
             throws IOException, ClassNotFoundException {
         String name = in.readUTF();
         boolean hasPwd = in.readBoolean();
@@ -231,7 +226,7 @@ public class SerializablePrincipal  implements java.io.Serializable {
                 throw e;
             }
         }
-        return new GenericPrincipal(realm,name,pwd,Arrays.asList(roles),
+        return new GenericPrincipal(name,pwd,Arrays.asList(roles),
                 userPrincipal);
     }
     

==================================================
DataSourceRealm.java
index d659abe819..32c925ae3a 100644
--- a/java/org/apache/catalina/ha/session/SimpleTcpReplicationManager.java
+++ b/java/org/apache/catalina/ha/session/SimpleTcpReplicationManager.java
@@ -434,7 +434,7 @@ public class SimpleTcpReplicationManager extends StandardManager implements Clus
                 p = (SerializablePrincipal)session_in.readObject();
             ((ReplicatedSession)session).readObjectData(session_in);
             if ( hasPrincipal )
-                session.setPrincipal(p.getPrincipal(getContainer().getRealm()));
+                session.setPrincipal(p.getPrincipal());
             ((ReplicatedSession)session).setId(sessionId,isNew);
             ReplicatedSession rsession = (ReplicatedSession)session; 
             rsession.setAccessCount(1);

==================================================
GenericPrincipal.java
index 5235d60299..b0c30d57c8 100644
--- a/java/org/apache/catalina/realm/DataSourceRealm.java
+++ b/java/org/apache/catalina/realm/DataSourceRealm.java
@@ -338,7 +338,7 @@ public class DataSourceRealm
         ArrayList<String> list = getRoles(dbConnection, username);
 
         // Create and return a suitable Principal for this user
-        return (new GenericPrincipal(this, username, credentials, list));
+        return (new GenericPrincipal(username, credentials, list));
 
     }
 
@@ -477,11 +477,10 @@ public class DataSourceRealm
     protected Principal getPrincipal(String username) {
     	Connection dbConnection = open();
         if (dbConnection == null) {
-            return new GenericPrincipal(this,username, null, null);
+            return new GenericPrincipal(username, null, null);
         }
         try {
-        	return (new GenericPrincipal(this,
-        			username,
+        	return (new GenericPrincipal(username,
 					getPassword(dbConnection, username),
 					getRoles(dbConnection, username)));
         } finally {

==================================================
JAASRealm.java
index 90e556d3a9..88f4b8d60e 100644
--- a/java/org/apache/catalina/realm/GenericPrincipal.java
+++ b/java/org/apache/catalina/realm/GenericPrincipal.java
@@ -25,8 +25,6 @@ import java.util.List;
 
 import javax.security.auth.login.LoginContext;
 
-import org.apache.catalina.Realm;
-
 
 /**
  * Generic implementation of <strong>java.security.Principal</strong> that
@@ -46,13 +44,12 @@ public class GenericPrincipal implements Principal {
      * Construct a new Principal, associated with the specified Realm, for the
      * specified username and password.
      *
-     * @param realm The Realm that owns this Principal
      * @param name The username of the user represented by this Principal
      * @param password Credentials used to authenticate this user
      */
-    public GenericPrincipal(Realm realm, String name, String password) {
+    public GenericPrincipal(String name, String password) {
 
-        this(realm, name, password, null);
+        this(name, password, null);
 
     }
 
@@ -62,14 +59,12 @@ public class GenericPrincipal implements Principal {
      * specified username and password, with the specified role names
      * (as Strings).
      *
-     * @param realm The Realm that owns this principal
      * @param name The username of the user represented by this Principal
      * @param password Credentials used to authenticate this user
      * @param roles List of roles (must be Strings) possessed by this user
      */
-    public GenericPrincipal(Realm realm, String name, String password,
-                            List<String> roles) {
-        this(realm, name, password, roles, null);
+    public GenericPrincipal(String name, String password, List<String> roles) {
+        this(name, password, roles, null);
     }
 
     /**
@@ -77,16 +72,15 @@ public class GenericPrincipal implements Principal {
      * specified username and password, with the specified role names
      * (as Strings).
      *
-     * @param realm The Realm that owns this principal
      * @param name The username of the user represented by this Principal
      * @param password Credentials used to authenticate this user
      * @param roles List of roles (must be Strings) possessed by this user
      * @param userPrincipal - the principal to be returned from the request 
      *        getUserPrincipal call if not null; if null, this will be returned
      */
-    public GenericPrincipal(Realm realm, String name, String password,
-                            List<String> roles, Principal userPrincipal) {
-        this(realm, name, password, roles, userPrincipal, null);
+    public GenericPrincipal(String name, String password, List<String> roles,
+            Principal userPrincipal) {
+        this(name, password, roles, userPrincipal, null);
     }
     
     /**
@@ -94,7 +88,6 @@ public class GenericPrincipal implements Principal {
      * specified username and password, with the specified role names
      * (as Strings).
      *
-     * @param realm The Realm that owns this principal
      * @param name The username of the user represented by this Principal
      * @param password Credentials used to authenticate this user
      * @param roles List of roles (must be Strings) possessed by this user
@@ -103,11 +96,9 @@ public class GenericPrincipal implements Principal {
      * @param loginContext  - If provided, this will be used to log out the user
      *        at the appropriate time
      */
-    public GenericPrincipal(Realm realm, String name, String password,
-                            List<String> roles, Principal userPrincipal,
-                            LoginContext loginContext) {
+    public GenericPrincipal(String name, String password, List<String> roles,
+            Principal userPrincipal, LoginContext loginContext) {
         super();
-        this.realm = realm;
         this.name = name;
         this.password = password;
         this.userPrincipal = userPrincipal;
@@ -145,20 +136,6 @@ public class GenericPrincipal implements Principal {
     }
 
 
-    /**
-     * The Realm with which this Principal is associated.
-     */
-    protected Realm realm = null;
-
-    public Realm getRealm() {
-        return (this.realm);
-    }
-
-    void setRealm( Realm realm ) {
-        this.realm=realm;
-    }
-
-
     /**
      * The set of roles associated with this user.
      */

==================================================
JDBCRealm.java
index 79e7464e53..d701070181 100644
--- a/java/org/apache/catalina/realm/JAASRealm.java
+++ b/java/org/apache/catalina/realm/JAASRealm.java
@@ -539,7 +539,7 @@ public class JAASRealm
         }
 
         // Return the resulting Principal for our authenticated user
-        return new GenericPrincipal(this, username, null, roles, userPrincipal,
+        return new GenericPrincipal(username, null, roles, userPrincipal,
                 loginContext);
     }
 

==================================================
JNDIRealm.java
index c176fc496f..9eae7b0be1 100644
--- a/java/org/apache/catalina/realm/JDBCRealm.java
+++ b/java/org/apache/catalina/realm/JDBCRealm.java
@@ -425,7 +425,7 @@ public class JDBCRealm
         ArrayList<String> roles = getRoles(username);
         
         // Create and return a suitable Principal for this user
-        return (new GenericPrincipal(this, username, credentials, roles));
+        return (new GenericPrincipal(username, credentials, roles));
 
     }
 
@@ -595,8 +595,7 @@ public class JDBCRealm
      */
     protected synchronized Principal getPrincipal(String username) {
 
-        return (new GenericPrincipal(this,
-                                     username,
+        return (new GenericPrincipal(username,
                                      getPassword(username),
                                      getRoles(username)));
 

==================================================
MemoryRealm.java
index f1c95fd1ed..4aed81a674 100644
--- a/java/org/apache/catalina/realm/JNDIRealm.java
+++ b/java/org/apache/catalina/realm/JNDIRealm.java
@@ -1025,8 +1025,7 @@ public class JNDIRealm extends RealmBase {
                                     containerLog.debug("Found role: " + it.next());
                                 }
                             }
-                            return (new GenericPrincipal(this,
-                                                         username,
+                            return (new GenericPrincipal(username,
                                                          credentials,
                                                          roles));
                         }
@@ -1061,7 +1060,7 @@ public class JNDIRealm extends RealmBase {
             }
 
             // Create and return a suitable Principal for this user
-            return (new GenericPrincipal(this, username, credentials, roles));
+            return (new GenericPrincipal(username, credentials, roles));
         }
     }
 
@@ -1883,7 +1882,7 @@ public class JNDIRealm extends RealmBase {
 
         User user = getUser(context, username);
 
-        return new GenericPrincipal(this, user.username, user.password ,
+        return new GenericPrincipal(user.username, user.password ,
                 getRoles(context, user));
     }
 

==================================================
RealmBase.java
index c9883bbd89..507be9788f 100644
--- a/java/org/apache/catalina/realm/MemoryRealm.java
+++ b/java/org/apache/catalina/realm/MemoryRealm.java
@@ -197,7 +197,7 @@ public class MemoryRealm  extends RealmBase {
 
         // Construct and cache the Principal for this user
         GenericPrincipal principal =
-            new GenericPrincipal(this, username, password, list);
+            new GenericPrincipal(username, password, list);
         principals.put(username, principal);
 
     }

==================================================
UserDatabaseRealm.java
index 42a4e144d9..ecacb682f5 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -870,10 +870,6 @@ public abstract class RealmBase
             return (false);
 
         GenericPrincipal gp = (GenericPrincipal) principal;
-        if (!(gp.getRealm() == this)) {
-            if(log.isDebugEnabled())
-                log.debug("Different realm " + this + " " + gp.getRealm());//    return (false);
-        }
         boolean result = gp.hasRole(role);
         if (log.isDebugEnabled()) {
             String name = principal.getName();

==================================================
Tomcat.java
index ff20ba5f38..c9db3ea590 100644
--- a/java/org/apache/catalina/realm/UserDatabaseRealm.java
+++ b/java/org/apache/catalina/realm/UserDatabaseRealm.java
@@ -228,7 +228,7 @@ public class UserDatabaseRealm
                 roles.add(role.getName());
             }
         }
-        return new GenericPrincipal(this, username, user.getPassword(), roles, user);
+        return new GenericPrincipal(username, user.getPassword(), roles, user);
     }
 
 

==================================================
TestSerializablePrincipal.java
index b4fc2ef3d8..d8f1552606 100644
--- a/java/org/apache/catalina/startup/Tomcat.java
+++ b/java/org/apache/catalina/startup/Tomcat.java
@@ -462,7 +462,7 @@ public class Tomcat {
                 if (p == null) {
                     String pass = userPass.get(username);
                     if (pass != null) {
-                        p = new GenericPrincipal(this, username, pass, 
+                        p = new GenericPrincipal(username, pass,
                                 userRoles.get(username));
                         userPrincipals.put(username, p);
                     }

==================================================
