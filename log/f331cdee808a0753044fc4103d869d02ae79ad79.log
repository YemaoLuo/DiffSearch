f331cdee808a0753044fc4103d869d02ae79ad79
==================================================
Add reflection for using Unix domain sockets
==================================================
remm remm@apache.org
==================================================
Tue Dec 22 11:27:35 2020 +0100
==================================================
GraalCompat.java
Add reflection for using Unix domain sockets

This requires Java 16.
Also remove the compat class for Graal, since it's was only used for one
method. Elsewhere, Graal incompatible code is filtered out using the
flag, so no need to do something else here (and
JreMemoryLeakPreventionListener the only caller already does not make
sense with AOT compilation, so it's not a problem to not even use the
flag). This will allow Graal to use the compat for the underlying JRE it
actually uses, like 8 or 11 at the moment.


==================================================
Jre16Compat.java
deleted file mode 100644
index 6187eb6a90..0000000000
--- a/java/org/apache/tomcat/util/compat/GraalCompat.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.apache.tomcat.util.compat;
-
-import java.io.IOException;
-
-class GraalCompat extends Jre9Compat {
-
-    private static final boolean GRAAL;
-
-    static {
-        boolean result = false;
-        try {
-            Class<?> nativeImageClazz = Class.forName("org.graalvm.nativeimage.ImageInfo");
-            result = Boolean.TRUE.equals(nativeImageClazz.getMethod("inImageCode").invoke(null));
-        } catch (ClassNotFoundException e) {
-            // Must be Graal
-        } catch (ReflectiveOperationException | IllegalArgumentException e) {
-            // Should never happen
-        }
-        GRAAL = result || System.getProperty("org.graalvm.nativeimage.imagecode") != null;
-    }
-
-    static boolean isSupported() {
-        // This property does not exist for a native image
-        return GRAAL;
-    }
-
-    @Override
-    public void disableCachingForJarUrlConnections() throws IOException {
-    }
-
-}

==================================================
JreCompat.java
new file mode 100644
index 0000000000..406824f188
--- /dev/null
+++ b/java/org/apache/tomcat/util/compat/Jre16Compat.java
@@ -0,0 +1,85 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.util.compat;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.net.ProtocolFamily;
+import java.net.SocketAddress;
+import java.net.StandardProtocolFamily;
+import java.nio.channels.ServerSocketChannel;
+
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.res.StringManager;
+
+class Jre16Compat extends Jre9Compat {
+
+    private static final Log log = LogFactory.getLog(Jre16Compat.class);
+    private static final StringManager sm = StringManager.getManager(Jre16Compat.class);
+
+    private static final Class<?> unixDomainSocketAddressClazz;
+    private static final Method openServerSocketChannelFamilyMethod;
+    private static final Method unixDomainSocketAddressOfMethod;
+
+    static {
+        Class<?> c1 = null;
+        Method m1 = null;
+        Method m2 = null;
+        try {
+            c1 = Class.forName("java.net.UnixDomainSocketAddress");
+            m1 = ServerSocketChannel.class.getMethod("open", ProtocolFamily.class);
+            m2 = c1.getMethod("of", String.class);
+        } catch (ClassNotFoundException e) {
+            if (c1 == null) {
+                // Must be pre-Java 16
+                log.debug(sm.getString("jre16Compat.javaPre16"), e);
+            }
+        } catch (ReflectiveOperationException | IllegalArgumentException e) {
+            // Should never happen
+            log.error(sm.getString("jre16Compat.unexpected"), e);
+        }
+        unixDomainSocketAddressClazz = c1;
+        openServerSocketChannelFamilyMethod = m1;
+        unixDomainSocketAddressOfMethod = m2;
+    }
+
+    static boolean isSupported() {
+        return unixDomainSocketAddressClazz != null;
+    }
+
+    @Override
+    public SocketAddress getUnixDomainSocketAddress(String path) {
+        try {
+            return (SocketAddress) unixDomainSocketAddressOfMethod.invoke(null, path);
+        } catch (IllegalAccessException | IllegalArgumentException
+                | InvocationTargetException e) {
+            throw new UnsupportedOperationException(e);
+        }
+    }
+
+    @Override
+    public ServerSocketChannel openUnixDomainServerSocketChannel() {
+        try {
+            return (ServerSocketChannel) openServerSocketChannelFamilyMethod.invoke
+                    (null, StandardProtocolFamily.valueOf("UNIX"));
+        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
+            throw new UnsupportedOperationException(e);
+        }
+    }
+
+}

==================================================
