1adbf79c273a75fedb759ed7152696fb5c4a74e7
==================================================
MessageDispatch15Interceptor was used to add Java 5 features to MessageDispatchInterceptor. Since the minimum Java version is now >=5 (and has been since Tomcat 6) there is no need for the separate implementation.
==================================================
Mark Thomas
==================================================
Wed Jan 6 16:54:38 2016 +0000
==================================================
SimpleTcpCluster.java
MessageDispatch15Interceptor was used to add Java 5 features to MessageDispatchInterceptor. Since the minimum Java version is now >=5 (and has been since Tomcat 6) there is no need for the separate implementation.
Merge the Java 5 features into MessageDispatchInterceptor and deprecate MessageDispatch15Interceptor

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1723368 13f79535-47bb-0310-9956-ffa450edef68



==================================================
GroupChannel.java
index db20bf77c8..69dc773696 100644
--- a/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java
+++ b/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java
@@ -52,7 +52,7 @@ import org.apache.catalina.tribes.ChannelListener;
 import org.apache.catalina.tribes.Member;
 import org.apache.catalina.tribes.MembershipListener;
 import org.apache.catalina.tribes.group.GroupChannel;
-import org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor;
+import org.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor;
 import org.apache.catalina.tribes.group.interceptors.TcpFailureDetector;
 import org.apache.catalina.util.LifecycleMBeanBase;
 import org.apache.juli.logging.Log;
@@ -564,7 +564,7 @@ public class SimpleTcpCluster extends LifecycleMBeanBase
         if ( clusterDeployer != null ) clusterDeployer.setCluster(this);
         if ( channel == null ) channel = new GroupChannel();
         if ( channel instanceof GroupChannel && !((GroupChannel)channel).getInterceptors().hasNext()) {
-            channel.addInterceptor(new MessageDispatch15Interceptor());
+            channel.addInterceptor(new MessageDispatchInterceptor());
             channel.addInterceptor(new TcpFailureDetector());
         }
         if (heartbeatBackgroundEnabled) channel.setHeartbeat(false);

==================================================
MessageDispatch15Interceptor.java
index b8066669fe..faba27edc8 100644
--- a/java/org/apache/catalina/tribes/group/GroupChannel.java
+++ b/java/org/apache/catalina/tribes/group/GroupChannel.java
@@ -38,7 +38,7 @@ import org.apache.catalina.tribes.MembershipListener;
 import org.apache.catalina.tribes.MembershipService;
 import org.apache.catalina.tribes.RemoteProcessException;
 import org.apache.catalina.tribes.UniqueId;
-import org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor;
+import org.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor;
 import org.apache.catalina.tribes.io.BufferPool;
 import org.apache.catalina.tribes.io.ChannelData;
 import org.apache.catalina.tribes.io.XByteBuffer;
@@ -372,7 +372,7 @@ public class GroupChannel extends ChannelInterceptorBase implements ManagedChann
     protected synchronized void setupDefaultStack() throws ChannelException {
         if (getFirstInterceptor() != null &&
                 ((getFirstInterceptor().getNext() instanceof ChannelCoordinator))) {
-            addInterceptor(new MessageDispatch15Interceptor());
+            addInterceptor(new MessageDispatchInterceptor());
         }
     }
 

==================================================
MessageDispatchInterceptor.java
index 8f1b3a4f14..514c5cefcf 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/MessageDispatch15Interceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/MessageDispatch15Interceptor.java
@@ -16,106 +16,13 @@
  */
 package org.apache.catalina.tribes.group.interceptors;
 
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicLong;
-
-import org.apache.catalina.tribes.ChannelMessage;
-import org.apache.catalina.tribes.Member;
-import org.apache.catalina.tribes.group.InterceptorPayload;
-import org.apache.catalina.tribes.transport.bio.util.LinkObject;
-import org.apache.catalina.tribes.util.ExecutorFactory;
-import org.apache.catalina.tribes.util.TcclThreadFactory;
-
 /**
- *
- * Same implementation as the MessageDispatchInterceptor
- * except it uses an atomic long for the currentSize calculation
- * and uses a thread pool for message sending.
- *
- * @version 1.0
+ * @deprecated Originally provided an optional implementation that used Java 5+
+ *             features. Now the minimum Java version is >=5, those features
+ *             have been added to {@link MessageDispatchInterceptor} which
+ *             should be used instead. This class will be removed in Tomcat
+ *             9.0.x onwards.
  */
-
+@Deprecated
 public class MessageDispatch15Interceptor extends MessageDispatchInterceptor {
-
-    protected final AtomicLong currentSize = new AtomicLong(0);
-    protected ExecutorService executor = null;
-    protected int maxThreads = 10;
-    protected int maxSpareThreads = 2;
-    protected long keepAliveTime = 5000;
-
-    @Override
-    public long getCurrentSize() {
-        return currentSize.get();
-    }
-
-    @Override
-    public long addAndGetCurrentSize(long inc) {
-        return currentSize.addAndGet(inc);
-    }
-
-    @Override
-    public long setAndGetCurrentSize(long value) {
-        currentSize.set(value);
-        return value;
-    }
-
-    @Override
-    public boolean addToQueue(ChannelMessage msg, Member[] destination, InterceptorPayload payload) {
-        final LinkObject obj = new LinkObject(msg,destination,payload);
-        Runnable r = new Runnable() {
-            @Override
-            public void run() {
-                sendAsyncData(obj);
-            }
-        };
-        executor.execute(r);
-        return true;
-    }
-
-    @Override
-    public LinkObject removeFromQueue() {
-        return null; //not used, thread pool contains its own queue.
-    }
-
-    @Override
-    public void startQueue() {
-        if ( run ) return;
-        executor = ExecutorFactory.newThreadPool(maxSpareThreads, maxThreads,
-                keepAliveTime, TimeUnit.MILLISECONDS,
-                new TcclThreadFactory("MessageDispatch15Interceptor.MessageDispatchThread"));
-        run = true;
-    }
-
-    @Override
-    public void stopQueue() {
-        run = false;
-        executor.shutdownNow();
-        setAndGetCurrentSize(0);
-    }
-
-    public long getKeepAliveTime() {
-        return keepAliveTime;
-    }
-
-    public int getMaxSpareThreads() {
-        return maxSpareThreads;
-    }
-
-    public int getMaxThreads() {
-        return maxThreads;
-    }
-
-    public void setKeepAliveTime(long keepAliveTime) {
-        this.keepAliveTime = keepAliveTime;
-    }
-
-    public void setMaxSpareThreads(int maxSpareThreads) {
-        this.maxSpareThreads = maxSpareThreads;
-    }
-
-    public void setMaxThreads(int maxThreads) {
-        this.maxThreads = maxThreads;
-    }
-
 }
\ No newline at end of file

==================================================
FastQueue.java
index 5c5952c116..8065010314 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/MessageDispatchInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/MessageDispatchInterceptor.java
@@ -16,6 +16,10 @@
  */
 package org.apache.catalina.tribes.group.interceptors;
 
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicLong;
+
 import org.apache.catalina.tribes.Channel;
 import org.apache.catalina.tribes.ChannelException;
 import org.apache.catalina.tribes.ChannelMessage;
@@ -23,55 +27,74 @@ import org.apache.catalina.tribes.Member;
 import org.apache.catalina.tribes.UniqueId;
 import org.apache.catalina.tribes.group.ChannelInterceptorBase;
 import org.apache.catalina.tribes.group.InterceptorPayload;
-import org.apache.catalina.tribes.transport.bio.util.FastQueue;
 import org.apache.catalina.tribes.transport.bio.util.LinkObject;
+import org.apache.catalina.tribes.util.ExecutorFactory;
 import org.apache.catalina.tribes.util.StringManager;
+import org.apache.catalina.tribes.util.TcclThreadFactory;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
 /**
- *
  * The message dispatcher is a way to enable asynchronous communication
  * through a channel. The dispatcher will look for the
  * <code>Channel.SEND_OPTIONS_ASYNCHRONOUS</code> flag to be set, if it is, it
  * will queue the message for delivery and immediately return to the sender.
- *
- * @version 1.0
  */
 public class MessageDispatchInterceptor extends ChannelInterceptorBase implements Runnable {
+
     private static final Log log = LogFactory.getLog(MessageDispatchInterceptor.class);
-    protected static final StringManager sm = StringManager.getManager(MessageDispatchInterceptor.class);
+    protected static final StringManager sm =
+            StringManager.getManager(MessageDispatchInterceptor.class);
 
     protected long maxQueueSize = 1024*1024*64; //64MB
-    protected final FastQueue queue = new FastQueue();
+    /**
+     * Deprecated. Unused. Will be removed in Tomcat 9.0.x.
+     */
+    @Deprecated
+    // Use fully qualified name to avoid deprecation warning on import.
+    protected final org.apache.catalina.tribes.transport.bio.util.FastQueue queue =
+            new org.apache.catalina.tribes.transport.bio.util.FastQueue();
     protected volatile boolean run = false;
+    /**
+     * Deprecated. Unused. Will be removed in Tomcat 9.0.x.
+     */
+    @Deprecated
     protected Thread msgDispatchThread = null;
-    protected long currentSize = 0;
     protected boolean useDeepClone = true;
     protected boolean alwaysSend = true;
 
+    protected final AtomicLong currentSize = new AtomicLong(0);
+    protected ExecutorService executor = null;
+    protected int maxThreads = 10;
+    protected int maxSpareThreads = 2;
+    protected long keepAliveTime = 5000;
+
+
     public MessageDispatchInterceptor() {
         setOptionFlag(Channel.SEND_OPTIONS_ASYNCHRONOUS);
     }
 
+
     @Override
     public void sendMessage(Member[] destination, ChannelMessage msg, InterceptorPayload payload)
             throws ChannelException {
         boolean async = (msg.getOptions() &
                 Channel.SEND_OPTIONS_ASYNCHRONOUS) == Channel.SEND_OPTIONS_ASYNCHRONOUS;
-        if ( async && run ) {
-            if ( (getCurrentSize()+msg.getMessage().getLength()) > maxQueueSize ) {
-                if ( alwaysSend ) {
+        if (async && run) {
+            if ((getCurrentSize()+msg.getMessage().getLength()) > maxQueueSize) {
+                if (alwaysSend) {
                     super.sendMessage(destination,msg,payload);
                     return;
                 } else {
                     throw new ChannelException(sm.getString("messageDispatchInterceptor.queue.full",
                             Long.toString(maxQueueSize), Long.toString(getCurrentSize())));
-                }//end if
-            }//end if
+                }
+            }
             //add to queue
-            if ( useDeepClone ) msg = (ChannelMessage)msg.deepclone();
-            if (!addToQueue(msg, destination, payload) ) {
+            if (useDeepClone) {
+                msg = (ChannelMessage)msg.deepclone();
+            }
+            if (!addToQueue(msg, destination, payload)) {
                 throw new ChannelException(
                         sm.getString("messageDispatchInterceptor.unableAdd.queue"));
             }
@@ -81,29 +104,46 @@ public class MessageDispatchInterceptor extends ChannelInterceptorBase implement
         }
     }
 
+
     public boolean addToQueue(ChannelMessage msg, Member[] destination,
             InterceptorPayload payload) {
-        return queue.add(msg,destination,payload);
+        final LinkObject obj = new LinkObject(msg, destination, payload);
+        Runnable r = new Runnable() {
+            @Override
+            public void run() {
+                sendAsyncData(obj);
+            }
+        };
+        executor.execute(r);
+        return true;
     }
 
+
+    /**
+     * @deprecated. Not used. The thread pool contains its own queue. This will
+     *              be removed in Tomcat 9.0.x onwards.
+     *
+     * @return Always null
+     */
     public LinkObject removeFromQueue() {
-        return queue.remove();
+        return null;
     }
 
+
     public void startQueue() {
-        msgDispatchThread = new Thread(this);
-        msgDispatchThread.setName("MessageDispatchInterceptor.MessageDispatchThread");
-        msgDispatchThread.setDaemon(true);
-        msgDispatchThread.setPriority(Thread.MAX_PRIORITY);
-        queue.setEnabled(true);
+        if (run) {
+            return;
+        }
+        executor = ExecutorFactory.newThreadPool(maxSpareThreads, maxThreads, keepAliveTime,
+                TimeUnit.MILLISECONDS,
+                new TcclThreadFactory("MessageDispatchInterceptor.MessageDispatchThread"));
         run = true;
-        msgDispatchThread.start();
     }
 
+
     public void stopQueue() {
         run = false;
-        msgDispatchThread.interrupt();
-        queue.setEnabled(false);
+        executor.shutdownNow();
         setAndGetCurrentSize(0);
     }
 
@@ -116,40 +156,82 @@ public class MessageDispatchInterceptor extends ChannelInterceptorBase implement
         super.setOptionFlag(flag);
     }
 
+
     public void setMaxQueueSize(long maxQueueSize) {
         this.maxQueueSize = maxQueueSize;
     }
 
+
     public void setUseDeepClone(boolean useDeepClone) {
         this.useDeepClone = useDeepClone;
     }
 
+
     public long getMaxQueueSize() {
         return maxQueueSize;
     }
 
+
     public boolean getUseDeepClone() {
         return useDeepClone;
     }
 
+
     public long getCurrentSize() {
-        return currentSize;
+        return currentSize.get();
     }
 
+
     public long addAndGetCurrentSize(long inc) {
-        synchronized (this) {
-            currentSize += inc;
-            return currentSize;
-        }
+        return currentSize.addAndGet(inc);
     }
 
+
     public long setAndGetCurrentSize(long value) {
-        synchronized (this) {
-            currentSize = value;
-            return value;
-        }
+        currentSize.set(value);
+        return value;
+    }
+
+
+    public long getKeepAliveTime() {
+        return keepAliveTime;
     }
 
+
+    public int getMaxSpareThreads() {
+        return maxSpareThreads;
+    }
+
+    public int getMaxThreads() {
+        return maxThreads;
+    }
+
+
+    public void setKeepAliveTime(long keepAliveTime) {
+        this.keepAliveTime = keepAliveTime;
+    }
+
+
+    public void setMaxSpareThreads(int maxSpareThreads) {
+        this.maxSpareThreads = maxSpareThreads;
+    }
+
+
+    public void setMaxThreads(int maxThreads) {
+        this.maxThreads = maxThreads;
+    }
+
+
+    public boolean isAlwaysSend() {
+        return alwaysSend;
+    }
+
+
+    public void setAlwaysSend(boolean alwaysSend) {
+        this.alwaysSend = alwaysSend;
+    }
+
+
     @Override
     public void start(int svc) throws ChannelException {
         //start the thread
@@ -158,9 +240,9 @@ public class MessageDispatchInterceptor extends ChannelInterceptorBase implement
                 // only start with the sender
                 if ( !run && ((svc & Channel.SND_TX_SEQ)==Channel.SND_TX_SEQ) ) {
                     startQueue();
-                }//end if
-            }//sync
-        }//end if
+                }
+            }
+        }
         super.start(svc);
     }
 
@@ -168,27 +250,29 @@ public class MessageDispatchInterceptor extends ChannelInterceptorBase implement
     @Override
     public void stop(int svc) throws ChannelException {
         //stop the thread
-        if ( run ) {
+        if (run) {
             synchronized (this) {
                 if ( run && ((svc & Channel.SND_TX_SEQ)==Channel.SND_TX_SEQ)) {
                     stopQueue();
-                }//end if
-            }//sync
-        }//end if
+                }
+            }
+        }
 
         super.stop(svc);
     }
 
+
     @Override
     public void run() {
-        while ( run ) {
+        while (run) {
             LinkObject link = removeFromQueue();
             if ( link == null ) continue; //should not happen unless we exceed wait time
             while ( link != null && run ) {
                 link = sendAsyncData(link);
-            }//while
-        }//while
-    }//run
+            }
+        }
+    }
+
 
     protected LinkObject sendAsyncData(LinkObject link) {
         ChannelMessage msg = link.data();
@@ -217,15 +301,7 @@ public class MessageDispatchInterceptor extends ChannelInterceptorBase implement
         } finally {
             addAndGetCurrentSize(-msg.getMessage().getLength());
             link = link.next();
-        }//try
+        }
         return link;
     }
-
-    public boolean isAlwaysSend() {
-        return alwaysSend;
-    }
-
-    public void setAlwaysSend(boolean alwaysSend) {
-        this.alwaysSend = alwaysSend;
-    }
 }

==================================================
ChannelCreator.java
index 6d32024141..4575518c52 100644
--- a/java/org/apache/catalina/tribes/transport/bio/util/FastQueue.java
+++ b/java/org/apache/catalina/tribes/transport/bio/util/FastQueue.java
@@ -33,7 +33,10 @@ import org.apache.juli.logging.LogFactory;
  * length when you have strange producer thread problems.
  *
  * @author Peter Rossbach
+ *
+ * @deprecated Unused. Will be removed in Tomcat 9.0.x.
  */
+@Deprecated
 public class FastQueue {
 
     private static final Log log = LogFactory.getLog(FastQueue.class);

==================================================
CoordinationDemo.java
index 93c58be2c2..a7a306484d 100644
--- a/test/org/apache/catalina/tribes/demos/ChannelCreator.java
+++ b/test/org/apache/catalina/tribes/demos/ChannelCreator.java
@@ -27,7 +27,6 @@ import org.apache.catalina.tribes.group.GroupChannel;
 import org.apache.catalina.tribes.group.interceptors.DomainFilterInterceptor;
 import org.apache.catalina.tribes.group.interceptors.FragmentationInterceptor;
 import org.apache.catalina.tribes.group.interceptors.GzipInterceptor;
-import org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor;
 import org.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor;
 import org.apache.catalina.tribes.group.interceptors.OrderInterceptor;
 import org.apache.catalina.tribes.group.interceptors.StaticMembershipInterceptor;
@@ -225,7 +224,7 @@ public class ChannelCreator {
         }
 
         if ( async ) {
-            MessageDispatchInterceptor mi = new MessageDispatch15Interceptor();
+            MessageDispatchInterceptor mi = new MessageDispatchInterceptor();
             mi.setMaxQueueSize(asyncsize);
             channel.addInterceptor(mi);
             System.out.println("Added MessageDispatchInterceptor");

==================================================
TestDataIntegrity.java
index dcb8cf0870..e214f404c8 100644
--- a/test/org/apache/catalina/tribes/demos/CoordinationDemo.java
+++ b/test/org/apache/catalina/tribes/demos/CoordinationDemo.java
@@ -24,7 +24,7 @@ import java.util.StringTokenizer;
 import org.apache.catalina.tribes.Channel;
 import org.apache.catalina.tribes.Member;
 import org.apache.catalina.tribes.group.GroupChannel;
-import org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor;
+import org.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor;
 import org.apache.catalina.tribes.group.interceptors.NonBlockingCoordinator;
 import org.apache.catalina.tribes.group.interceptors.TcpFailureDetector;
 import org.apache.catalina.tribes.transport.ReceiverBase;
@@ -371,7 +371,7 @@ public class CoordinationDemo {
             };
             channel.addInterceptor(interceptor);
             channel.addInterceptor(new TcpFailureDetector());
-            channel.addInterceptor(new MessageDispatch15Interceptor());
+            channel.addInterceptor(new MessageDispatchInterceptor());
             return channel;
         }
     }

==================================================
TestMulticastPackages.java
index aeeff398af..06806f995d 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestDataIntegrity.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestDataIntegrity.java
@@ -32,7 +32,7 @@ import org.apache.catalina.tribes.ManagedChannel;
 import org.apache.catalina.tribes.Member;
 import org.apache.catalina.tribes.TesterUtil;
 import org.apache.catalina.tribes.group.GroupChannel;
-import org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor;
+import org.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor;
 
 public class TestDataIntegrity {
     private int msgCount = 500;
@@ -44,9 +44,9 @@ public class TestDataIntegrity {
     @Before
     public void setUp() throws Exception {
         channel1 = new GroupChannel();
-        channel1.addInterceptor(new MessageDispatch15Interceptor());
+        channel1.addInterceptor(new MessageDispatchInterceptor());
         channel2 = new GroupChannel();
-        channel2.addInterceptor(new MessageDispatch15Interceptor());
+        channel2.addInterceptor(new MessageDispatchInterceptor());
         listener1 = new Listener();
         channel2.addChannelListener(listener1);
         TesterUtil.addRandomDomain(new ManagedChannel[] {channel1, channel2});

==================================================
TestUdpPackages.java
index 4d35faf1c5..7186e54b6b 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestMulticastPackages.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestMulticastPackages.java
@@ -35,7 +35,7 @@ import org.apache.catalina.tribes.ManagedChannel;
 import org.apache.catalina.tribes.Member;
 import org.apache.catalina.tribes.TesterUtil;
 import org.apache.catalina.tribes.group.GroupChannel;
-import org.apache.catalina.tribes.group.interceptors.MessageDispatch15Interceptor;
+import org.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor;
 import org.apache.catalina.tribes.group.interceptors.ThroughputInterceptor;
 import org.apache.catalina.tribes.io.XByteBuffer;
 import org.apache.catalina.tribes.transport.AbstractSender;
@@ -54,9 +54,9 @@ public class TestMulticastPackages {
     @Before
     public void setUp() throws Exception {
         channel1 = new GroupChannel();
-        channel1.addInterceptor(new MessageDispatch15Interceptor());
+        channel1.addInterceptor(new MessageDispatchInterceptor());
         channel2 = new GroupChannel();
-        channel2.addInterceptor(new MessageDispatch15Interceptor());
+        channel2.addInterceptor(new MessageDispatchInterceptor());
         ThroughputInterceptor tint = new ThroughputInterceptor();
         tint.setInterval(500);
         ThroughputInterceptor tint2 = new ThroughputInterceptor();

==================================================
