656b87501ea028b9f16b6345904933ded61486eb
==================================================
Use generics to improve type safetyness.
==================================================
Rainer Jung
==================================================
Thu Sep 18 17:03:38 2008 +0000
==================================================
ExpressionBuilder.java
Use generics to improve type safetyness.

Please check readExternal() in FunctionMapperImpl
and VariableMapperImpl. The type of the persisted
Map has changed. Does this pose a consistency
problem with other components or older, already
persisted Maps?


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@696714 13f79535-47bb-0310-9956-ffa450edef68



==================================================
FunctionMapperImpl.java
index f6546aa584..61d351cc19 100644
--- a/java/org/apache/el/lang/ExpressionBuilder.java
+++ b/java/org/apache/el/lang/ExpressionBuilder.java
@@ -50,7 +50,7 @@ import org.apache.el.util.MessageFactory;
  */
 public final class ExpressionBuilder implements NodeVisitor {
 
-    private static final ConcurrentCache cache = new ConcurrentCache(5000);
+    private static final ConcurrentCache<String, Node> cache = new ConcurrentCache<String, Node>(5000);
 
     private FunctionMapper fnMapper;
 
@@ -87,7 +87,7 @@ public final class ExpressionBuilder implements NodeVisitor {
             throw new ELException(MessageFactory.get("error.null"));
         }
 
-        Node n = (Node) cache.get(expr);
+        Node n = cache.get(expr);
         if (n == null) {
             try {
                 n = (new ELParser(new StringReader(expr)))

==================================================
VariableMapperImpl.java
index 4ca06cb7ea..2c41820c40 100644
--- a/java/org/apache/el/lang/FunctionMapperImpl.java
+++ b/java/org/apache/el/lang/FunctionMapperImpl.java
@@ -39,7 +39,7 @@ public class FunctionMapperImpl extends FunctionMapper implements
 
     private static final long serialVersionUID = 1L;
 
-    protected Map functions = null;
+    protected Map<String, Function> functions = null;
 
     /*
      * (non-Javadoc)
@@ -49,7 +49,7 @@ public class FunctionMapperImpl extends FunctionMapper implements
      */
     public Method resolveFunction(String prefix, String localName) {
         if (this.functions != null) {
-            Function f = (Function) this.functions.get(prefix + ":" + localName);
+            Function f = this.functions.get(prefix + ":" + localName);
             return f.getMethod();
         }
         return null;
@@ -57,7 +57,7 @@ public class FunctionMapperImpl extends FunctionMapper implements
 
     public void addFunction(String prefix, String localName, Method m) {
         if (this.functions == null) {
-            this.functions = new HashMap();
+            this.functions = new HashMap<String, Function>();
         }
         Function f = new Function(prefix, localName, m);
         synchronized (this) {
@@ -81,7 +81,7 @@ public class FunctionMapperImpl extends FunctionMapper implements
      */
     public void readExternal(ObjectInput in) throws IOException,
             ClassNotFoundException {
-        this.functions = (Map) in.readObject();
+        this.functions = (Map<String, Function>) in.readObject();
     }
 
     public static class Function implements Externalizable {

==================================================
