464a81464d69ac1dea073eb09b4426ac064ae6c1
==================================================
Implement setTimeout using an Action instead of an attribute
==================================================
Filip Hanik
==================================================
Mon May 28 11:39:15 2007 +0000
==================================================
CometEventImpl.java
Implement setTimeout using an Action instead of an attribute


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@542208 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CoyoteAdapter.java
index 9a1c4a9cb7..9828afde5b 100644
--- a/java/org/apache/catalina/connector/CometEventImpl.java
+++ b/java/org/apache/catalina/connector/CometEventImpl.java
@@ -26,6 +26,7 @@ import javax.servlet.http.HttpServletResponse;
 
 import org.apache.catalina.CometEvent;
 import org.apache.catalina.util.StringManager;
+import org.apache.coyote.ActionCode;
 
 public class CometEventImpl implements CometEvent {
 
@@ -121,7 +122,10 @@ public class CometEventImpl implements CometEvent {
     public void setTimeout(int timeout) throws IOException, ServletException,
             UnsupportedOperationException {
         if (request.getAttribute("org.apache.tomcat.comet.timeout.support") == Boolean.TRUE) {
-            request.setAttribute("org.apache.tomcat.comet.timeout", new Integer(timeout));
+            checkWorkerThread();
+            Integer to = new Integer(timeout);
+            request.action(ActionCode.ACTION_COMET_TIMEOUT,to);
+            //request.setAttribute("org.apache.tomcat.comet.timeout", to);
         } else {
             throw new UnsupportedOperationException();
         }
@@ -137,6 +141,10 @@ public class CometEventImpl implements CometEvent {
     
     public void configure(CometEvent.CometConfiguration... options)
         throws IOException, IllegalStateException {
+        checkWorkerThread();
+        if (getEventType()!=EventType.BEGIN) {
+            throw new IllegalStateException("Configure can only be called during the BEGIN event.");
+        }
         throw new UnsupportedOperationException();
     }
 
@@ -164,6 +172,16 @@ public class CometEventImpl implements CometEvent {
         throw new UnsupportedOperationException();        
     }
     
+    public String toString() {
+        StringBuffer buf = new StringBuffer("CometEventImpl[");
+        buf.append(super.toString());
+        buf.append("] Event:");
+        buf.append(getEventType());
+        buf.append(" SubType:");
+        buf.append(getEventSubType());
+        return buf.toString();
+    }
+
     protected void setWorkerThread() {
         threadCheck.set(threadCheckHolder);
     }

==================================================
Request.java
index 594683b3ea..537792776f 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -263,13 +263,14 @@ public class CoyoteAdapter
             // request parameters
             req.getRequestProcessor().setWorkerThreadName(Thread.currentThread().getName());
             if (postParseRequest(req, request, res, response)) {
+                event = request.getEvent();
+                if ( event!=null && (event instanceof CometEventImpl)) 
+                    ((CometEventImpl)event).setWorkerThread();
+
                 // Calling the container
                 connector.getContainer().getPipeline().getFirst().invoke(request, response);
 
                 if (request.isComet()) {
-                    event = request.getEvent();
-                    if ( event!=null && (event instanceof CometEventImpl)) 
-                        ((CometEventImpl)event).setWorkerThread();
 
                     if (!response.isClosed() && !response.isError()) {
                         if (request.getAvailable()) {

==================================================
Http11NioProcessor.java
index 80709c3532..e05ebdf22e 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -2259,6 +2259,9 @@ public class Request
     
     // ------------------------------------------------------ Protected Methods
 
+    protected void action(ActionCode actionCode, Object param) {
+        coyoteRequest.action(actionCode,param);
+    }
 
     protected Session doGetSession(boolean create) {
 

==================================================
Http11NioProtocol.java
index d5e281112a..f8c3c223ae 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -1218,6 +1218,14 @@ public class Http11NioProcessor implements ActionHook {
             request.setAvailable(inputBuffer.available());
         } else if (actionCode == ActionCode.ACTION_COMET_BEGIN) {
             comet = true;
+        } else if (actionCode == ActionCode.ACTION_COMET_TIMEOUT) {
+            if ( socket == null ) 
+                throw new IllegalStateException("Connection must be in Comet state to set the timeout");
+            NioEndpoint.KeyAttachment attach = (NioEndpoint.KeyAttachment)socket.getAttachment(false);
+            if ( param == null || (!(param instanceof Integer)) )
+                throw new IllegalArgumentException("Action parameter must be an Integer object to set the timeout");
+            Integer to = (Integer)param;
+            attach.setTimeout(to.longValue());
         } else if (actionCode == ActionCode.ACTION_COMET_END) {
             comet = false;
         }

==================================================
