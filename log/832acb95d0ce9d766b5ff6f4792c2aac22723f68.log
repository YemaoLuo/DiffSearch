832acb95d0ce9d766b5ff6f4792c2aac22723f68
==================================================
-Implements the base class of MembershipServiceBase.
==================================================
Keiichi Fujino
==================================================
Wed May 9 04:55:08 2018 +0000
==================================================
MembershipService.java
-Implements the base class of MembershipServiceBase.
-Add getMembershipProvider method in MembershipService.
-Make McastService subclass of MembershipServiceBase.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1831227 13f79535-47bb-0310-9956-ffa450edef68



==================================================
McastService.java
index f93ed8fda3..44f9a19e27 100644
--- a/java/org/apache/catalina/tribes/MembershipService.java
+++ b/java/org/apache/catalina/tribes/MembershipService.java
@@ -18,6 +18,7 @@
 package org.apache.catalina.tribes;
 
 
+
 /**
  * MembershipService Interface<br>
  * The <code>MembershipService</code> interface is the membership component
@@ -156,4 +157,9 @@ public interface MembershipService {
      */
     public void setChannel(Channel channel);
 
+    /**
+     * Get the MembershipProvider
+     * @return MembershipProvider
+     */
+    public MembershipProvider getMembershipProvider();
 }

==================================================
MembershipServiceBase.java
index a430405d99..14aacdc097 100644
--- a/java/org/apache/catalina/tribes/membership/McastService.java
+++ b/java/org/apache/catalina/tribes/membership/McastService.java
@@ -28,6 +28,7 @@ import org.apache.catalina.tribes.ChannelException;
 import org.apache.catalina.tribes.ChannelMessage;
 import org.apache.catalina.tribes.Member;
 import org.apache.catalina.tribes.MembershipListener;
+import org.apache.catalina.tribes.MembershipProvider;
 import org.apache.catalina.tribes.MembershipService;
 import org.apache.catalina.tribes.MessageListener;
 import org.apache.catalina.tribes.io.ChannelData;
@@ -46,7 +47,7 @@ import org.apache.juli.logging.LogFactory;
  * If a node fails to send out a heartbeat, the node will be dismissed.
  */
 public class McastService
-        implements MembershipService,MembershipListener,MessageListener, McastServiceMBean {
+        extends MembershipServiceBase implements MessageListener, McastServiceMBean {
 
     private static final Log log = LogFactory.getLog(McastService.class);
 
@@ -55,18 +56,11 @@ public class McastService
      */
     protected static final StringManager sm = StringManager.getManager(Constants.Package);
 
-    /**
-     * The implementation specific properties
-     */
-    protected Properties properties = new Properties();
     /**
      * A handle to the actual low level implementation
      */
     protected McastServiceImpl impl;
-    /**
-     * A membership listener delegate (should be the cluster :)
-     */
-    protected volatile MembershipListener listener;
+
     /**
      * A message listener delegate for broadcasts
      */
@@ -82,8 +76,6 @@ public class McastService
 
     protected byte[] domain;
 
-    private Channel channel;
-
     /**
      * the ObjectName of this McastService.
      */
@@ -122,14 +114,6 @@ public class McastService
         this.properties = properties;
     }
 
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public Properties getProperties() {
-        return properties;
-    }
-
     /**
      * @return the local member name
      */
@@ -291,16 +275,6 @@ public class McastService
         if ( properties.getProperty(name)==null) throw new IllegalArgumentException(sm.getString("mcastService.missing.property", name));
     }
 
-    /**
-     * Start broadcasting and listening to membership pings
-     * @throws java.lang.Exception if a IO error occurs
-     */
-    @Override
-    public void start() throws java.lang.Exception {
-        start(MembershipService.MBR_RX);
-        start(MembershipService.MBR_TX);
-    }
-
     @Override
     public void start(int level) throws java.lang.Exception {
         hasProperty(properties,"mcastPort");
@@ -409,71 +383,6 @@ public class McastService
         }
     }
 
-
-    /**
-     * Return all the members by name
-     */
-    @Override
-    public String[] getMembersByName() {
-        Member[] currentMembers = getMembers();
-        String [] membernames ;
-        if(currentMembers != null) {
-            membernames = new String[currentMembers.length];
-            for (int i = 0; i < currentMembers.length; i++) {
-                membernames[i] = currentMembers[i].toString() ;
-            }
-        } else
-            membernames = new String[0] ;
-        return membernames ;
-    }
-
-    /**
-     * Return the member by name
-     */
-    @Override
-    public Member findMemberByName(String name) {
-        Member[] currentMembers = getMembers();
-        for (int i = 0; i < currentMembers.length; i++) {
-            if (name.equals(currentMembers[i].toString()))
-                return currentMembers[i];
-        }
-        return null;
-    }
-
-    /**
-     * has members?
-     */
-    @Override
-    public boolean hasMembers() {
-       if ( impl == null || impl.membership == null ) return false;
-       return impl.membership.hasMembers();
-    }
-
-    @Override
-    public Member getMember(Member mbr) {
-        if ( impl == null || impl.membership == null ) return null;
-        return impl.membership.getMember(mbr);
-    }
-
-    /**
-     * Return all the members
-     */
-    protected static final Member[]EMPTY_MEMBERS = new Member[0];
-    @Override
-    public Member[] getMembers() {
-        if ( impl == null || impl.membership == null ) return EMPTY_MEMBERS;
-        return impl.membership.getMembers();
-    }
-    /**
-     * Add a membership listener, this version only supports one listener per service,
-     * so calling this method twice will result in only the second listener being active.
-     * @param listener The listener
-     */
-    @Override
-    public void setMembershipListener(MembershipListener listener) {
-        this.listener = listener;
-    }
-
     public void setMessageListener(MessageListener listener) {
         this.msglistener = listener;
     }
@@ -481,33 +390,6 @@ public class McastService
     public void removeMessageListener() {
         this.msglistener = null;
     }
-    /**
-     * Remove the membership listener
-     */
-    @Override
-    public void removeMembershipListener(){
-        listener = null;
-    }
-
-    @Override
-    public void memberAdded(Member member) {
-        MembershipListener listener = this.listener;
-        if (listener != null) {
-            listener.memberAdded(member);
-        }
-    }
-
-    /**
-     * Callback from the impl when a new member has been received
-     * @param member The member
-     */
-    @Override
-    public void memberDisappeared(Member member) {
-        MembershipListener listener = this.listener;
-        if (listener != null) {
-            listener.memberDisappeared(member);
-        }
-    }
 
     @Override
     public void messageReceived(ChannelMessage msg) {
@@ -599,13 +481,8 @@ public class McastService
     }
 
     @Override
-    public Channel getChannel() {
-        return channel;
-    }
-
-    @Override
-    public void setChannel(Channel channel) {
-        this.channel = channel;
+    public MembershipProvider getMembershipProvider() {
+        return impl;
     }
 
     protected void setDefaults(Properties properties) {

==================================================
