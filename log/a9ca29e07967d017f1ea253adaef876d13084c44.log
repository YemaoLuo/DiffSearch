a9ca29e07967d017f1ea253adaef876d13084c44
==================================================
Pull-up common dispatch() method
==================================================
Mark Thomas
==================================================
Tue Sep 29 22:05:19 2015 +0000
==================================================
AbstractProcessor.java
Pull-up common dispatch() method

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1705939 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpProcessor.java
index f1d2a135bb..a8222f284a 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -17,11 +17,14 @@
 package org.apache.coyote;
 
 import java.io.IOException;
+import java.io.InterruptedIOException;
 import java.util.concurrent.Executor;
 
+import javax.servlet.RequestDispatcher;
 import javax.servlet.http.HttpUpgradeHandler;
 
 import org.apache.juli.logging.Log;
+import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.net.SocketStatus;
@@ -219,6 +222,7 @@ public abstract class AbstractProcessor implements ActionHook, Processor {
     @Override
     public abstract SocketState process(SocketWrapperBase<?> socket) throws IOException;
 
+
     /**
      * Process an in-progress request that is not longer in standard HTTP mode.
      * Uses currently include Servlet 3.0 Async and HTTP upgrade connections.
@@ -226,7 +230,52 @@ public abstract class AbstractProcessor implements ActionHook, Processor {
      * HTTP requests.
      */
     @Override
-    public abstract SocketState dispatch(SocketStatus status);
+    public final SocketState dispatch(SocketStatus status) {
+
+        if (status == SocketStatus.OPEN_WRITE && response.getWriteListener() != null) {
+            asyncStateMachine.asyncOperation();
+            try {
+                if (flushBufferedWrite()) {
+                    return SocketState.LONG;
+                }
+            } catch (IOException ioe) {
+                if (getLog().isDebugEnabled()) {
+                    getLog().debug("Unable to write async data.", ioe);
+                }
+                status = SocketStatus.ASYNC_WRITE_ERROR;
+                request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, ioe);
+            }
+        } else if (status == SocketStatus.OPEN_READ && request.getReadListener() != null) {
+            dispatchNonBlockingRead();
+        }
+
+        RequestInfo rp = request.getRequestProcessor();
+        try {
+            rp.setStage(org.apache.coyote.Constants.STAGE_SERVICE);
+            if (!getAdapter().asyncDispatch(request, response, status)) {
+                setErrorState(ErrorState.CLOSE_NOW, null);
+            }
+        } catch (InterruptedIOException e) {
+            setErrorState(ErrorState.CLOSE_NOW, e);
+        } catch (Throwable t) {
+            ExceptionUtils.handleThrowable(t);
+            setErrorState(ErrorState.CLOSE_NOW, t);
+            getLog().error(sm.getString("http11processor.request.process"), t);
+        }
+
+        rp.setStage(org.apache.coyote.Constants.STAGE_ENDED);
+
+        if (getErrorState().isError()) {
+            request.updateCounters();
+            return SocketState.CLOSED;
+        } else if (isAsync()) {
+            return SocketState.LONG;
+        } else {
+            request.updateCounters();
+            return dispatchEndRequest();
+        }
+    }
+
 
     /**
      * Flush any pending writes. Used during non-blocking writes to flush any

==================================================
Http11Processor.java
index 6071afeb59..9adc753908 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -27,7 +27,6 @@ import java.security.cert.CertificateFactory;
 import java.security.cert.X509Certificate;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-import javax.servlet.RequestDispatcher;
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpUpgradeHandler;
 
@@ -617,54 +616,6 @@ public class AjpProcessor extends AbstractProcessor {
     }
 
 
-    @Override
-    public SocketState dispatch(SocketStatus status) {
-
-        if (status == SocketStatus.OPEN_WRITE && response.getWriteListener() != null) {
-            asyncStateMachine.asyncOperation();
-            try {
-                if (flushBufferedWrite()) {
-                    return SocketState.LONG;
-                }
-            } catch (IOException ioe) {
-                if (getLog().isDebugEnabled()) {
-                    getLog().debug("Unable to write async data.", ioe);
-                }
-                status = SocketStatus.ASYNC_WRITE_ERROR;
-                request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, ioe);
-            }
-        } else if (status == SocketStatus.OPEN_READ && request.getReadListener() != null) {
-            dispatchNonBlockingRead();
-        }
-
-        RequestInfo rp = request.getRequestProcessor();
-        try {
-            rp.setStage(org.apache.coyote.Constants.STAGE_SERVICE);
-            if (!getAdapter().asyncDispatch(request, response, status)) {
-                setErrorState(ErrorState.CLOSE_NOW, null);
-            }
-        } catch (InterruptedIOException e) {
-            setErrorState(ErrorState.CLOSE_NOW, e);
-        } catch (Throwable t) {
-            ExceptionUtils.handleThrowable(t);
-            setErrorState(ErrorState.CLOSE_NOW, t);
-            getLog().error(sm.getString("http11processor.request.process"), t);
-        }
-
-        rp.setStage(org.apache.coyote.Constants.STAGE_ENDED);
-
-        if (getErrorState().isError()) {
-            request.updateCounters();
-            return SocketState.CLOSED;
-        } else if (isAsync()) {
-            return SocketState.LONG;
-        } else {
-            request.updateCounters();
-            return dispatchEndRequest();
-        }
-    }
-
-
     @Override
     protected boolean flushBufferedWrite() throws IOException {
         if (hasDataToWrite()) {

==================================================
StreamProcessor.java
index 7b7dc0b099..c321983ea0 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -26,7 +26,6 @@ import java.util.Set;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.regex.Pattern;
 
-import javax.servlet.RequestDispatcher;
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpUpgradeHandler;
 
@@ -1694,54 +1693,6 @@ public class Http11Processor extends AbstractProcessor {
     }
 
 
-    @Override
-    public SocketState dispatch(SocketStatus status) {
-
-        if (status == SocketStatus.OPEN_WRITE && response.getWriteListener() != null) {
-            asyncStateMachine.asyncOperation();
-            try {
-                if (flushBufferedWrite()) {
-                    return SocketState.LONG;
-                }
-            } catch (IOException ioe) {
-                if (getLog().isDebugEnabled()) {
-                    getLog().debug("Unable to write async data.", ioe);
-                }
-                status = SocketStatus.ASYNC_WRITE_ERROR;
-                request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, ioe);
-            }
-        } else if (status == SocketStatus.OPEN_READ && request.getReadListener() != null) {
-            dispatchNonBlockingRead();
-        }
-
-        RequestInfo rp = request.getRequestProcessor();
-        try {
-            rp.setStage(org.apache.coyote.Constants.STAGE_SERVICE);
-            if (!getAdapter().asyncDispatch(request, response, status)) {
-                setErrorState(ErrorState.CLOSE_NOW, null);
-            }
-        } catch (InterruptedIOException e) {
-            setErrorState(ErrorState.CLOSE_NOW, e);
-        } catch (Throwable t) {
-            ExceptionUtils.handleThrowable(t);
-            setErrorState(ErrorState.CLOSE_NOW, t);
-            getLog().error(sm.getString("http11processor.request.process"), t);
-        }
-
-        rp.setStage(org.apache.coyote.Constants.STAGE_ENDED);
-
-        if (getErrorState().isError()) {
-            request.updateCounters();
-            return SocketState.CLOSED;
-        } else if (isAsync()) {
-            return SocketState.LONG;
-        } else {
-            request.updateCounters();
-            return dispatchEndRequest();
-        }
-    }
-
-
     @Override
     protected boolean flushBufferedWrite() throws IOException {
         if (outputBuffer.hasDataToWrite()) {

==================================================
