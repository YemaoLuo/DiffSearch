74a177bca707cf97bb535bf13a72dab90a1b835f
==================================================
Deprecate ELResolverImpl since it supports the deprecated EL implementation
==================================================
Mark Emlyn
==================================================
Tue Mar 20 20:48:52 2012 +0000
==================================================
ELContextImpl.java
Deprecate ELResolverImpl since it supports the deprecated EL implementation
Move the default EL resolver to the ELContextImpl so the deprecated code depends on undeprecated code rather than the other way around.
Fixes a handful of deprecation warnings

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1303138 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ELResolverImpl.java
index 2518a99175..34fbd4f9c9 100644
--- a/java/org/apache/jasper/el/ELContextImpl.java
+++ b/java/org/apache/jasper/el/ELContextImpl.java
@@ -20,12 +20,20 @@ import java.lang.reflect.Method;
 import java.util.HashMap;
 import java.util.Map;
 
+import javax.el.ArrayELResolver;
+import javax.el.BeanELResolver;
+import javax.el.CompositeELResolver;
 import javax.el.ELContext;
 import javax.el.ELResolver;
 import javax.el.FunctionMapper;
+import javax.el.ListELResolver;
+import javax.el.MapELResolver;
+import javax.el.ResourceBundleELResolver;
 import javax.el.ValueExpression;
 import javax.el.VariableMapper;
 
+import org.apache.jasper.Constants;
+
 /**
  * Implementation of ELContext
  *
@@ -62,6 +70,21 @@ public final class ELContextImpl extends ELContext {
 
     }
 
+    private static final ELResolver DefaultResolver;
+
+    static {
+        if (Constants.IS_SECURITY_ENABLED) {
+            DefaultResolver = null;
+        } else {
+            DefaultResolver = new CompositeELResolver();
+            ((CompositeELResolver) DefaultResolver).add(new MapELResolver());
+            ((CompositeELResolver) DefaultResolver).add(new ResourceBundleELResolver());
+            ((CompositeELResolver) DefaultResolver).add(new ListELResolver());
+            ((CompositeELResolver) DefaultResolver).add(new ArrayELResolver());
+            ((CompositeELResolver) DefaultResolver).add(new BeanELResolver());
+        }
+    }
+
     private final ELResolver resolver;
 
     private FunctionMapper functionMapper = NullFunctionMapper;
@@ -69,7 +92,7 @@ public final class ELContextImpl extends ELContext {
     private VariableMapper variableMapper;
 
     public ELContextImpl() {
-        this(ELResolverImpl.getDefaultResolver());
+        this(getDefaultResolver());
     }
 
     public ELContextImpl(ELResolver resolver) {
@@ -102,4 +125,17 @@ public final class ELContextImpl extends ELContext {
         this.variableMapper = variableMapper;
     }
 
+    public static ELResolver getDefaultResolver() {
+        if (Constants.IS_SECURITY_ENABLED) {
+            CompositeELResolver defaultResolver = new CompositeELResolver();
+            defaultResolver.add(new MapELResolver());
+            defaultResolver.add(new ResourceBundleELResolver());
+            defaultResolver.add(new ListELResolver());
+            defaultResolver.add(new ArrayELResolver());
+            defaultResolver.add(new BeanELResolver());
+            return defaultResolver;
+        } else {
+            return DefaultResolver;
+        }
+    }
 }

==================================================
ExpressionEvaluatorImpl.java
index a7a84cbe82..1a7a0123be 100644
--- a/java/org/apache/jasper/el/ELResolverImpl.java
+++ b/java/org/apache/jasper/el/ELResolverImpl.java
@@ -19,43 +19,22 @@ package org.apache.jasper.el;
 
 import java.util.Iterator;
 
-import javax.el.ArrayELResolver;
-import javax.el.BeanELResolver;
-import javax.el.CompositeELResolver;
 import javax.el.ELContext;
 import javax.el.ELException;
 import javax.el.ELResolver;
-import javax.el.ListELResolver;
-import javax.el.MapELResolver;
 import javax.el.PropertyNotFoundException;
 import javax.el.PropertyNotWritableException;
-import javax.el.ResourceBundleELResolver;
 import javax.servlet.jsp.el.VariableResolver;
 
-import org.apache.jasper.Constants;
-
+@Deprecated
 public final class ELResolverImpl extends ELResolver {
-    private static final ELResolver DefaultResolver;
-
-    static {
-        if (Constants.IS_SECURITY_ENABLED) {
-            DefaultResolver = null;
-        } else {
-            DefaultResolver = new CompositeELResolver();
-            ((CompositeELResolver) DefaultResolver).add(new MapELResolver());
-            ((CompositeELResolver) DefaultResolver).add(new ResourceBundleELResolver());
-            ((CompositeELResolver) DefaultResolver).add(new ListELResolver());
-            ((CompositeELResolver) DefaultResolver).add(new ArrayELResolver());
-            ((CompositeELResolver) DefaultResolver).add(new BeanELResolver());
-        }
-    }
 
     private final VariableResolver variableResolver;
     private final ELResolver elResolver;
 
     public ELResolverImpl(VariableResolver variableResolver) {
         this.variableResolver = variableResolver;
-        this.elResolver = getDefaultResolver();
+        this.elResolver = ELContextImpl.getDefaultResolver();
     }
 
     @Override
@@ -157,17 +136,12 @@ public final class ELResolverImpl extends ELResolver {
         return elResolver.getCommonPropertyType(context, base);
     }
 
+    /**
+     * @deprecated  Use {@link ELContextImpl#getDefaultResolver()} instead. This
+     *              method will be removed in Tomcat 8.0.x onwards.
+     */
+    @Deprecated
     public static ELResolver getDefaultResolver() {
-        if (Constants.IS_SECURITY_ENABLED) {
-            CompositeELResolver defaultResolver = new CompositeELResolver();
-            defaultResolver.add(new MapELResolver());
-            defaultResolver.add(new ResourceBundleELResolver());
-            defaultResolver.add(new ListELResolver());
-            defaultResolver.add(new ArrayELResolver());
-            defaultResolver.add(new BeanELResolver());
-            return defaultResolver;
-        } else {
-            return DefaultResolver;
-        }
+        return ELContextImpl.getDefaultResolver();
     }
 }

==================================================
