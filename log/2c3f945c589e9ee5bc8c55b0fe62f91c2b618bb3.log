2c3f945c589e9ee5bc8c55b0fe62f91c2b618bb3
==================================================
Add 'final' modifiers to fields.
==================================================
Konstantin Kolinko
==================================================
Fri Sep 12 16:57:06 2014 +0000
==================================================
AnnotationElementValue.java
Add 'final' modifiers to fields.
Remove several num_xxx fields that accompanied an xxx array.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1624592 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AnnotationEntry.java
index 5b2117319b..c34ec88b5c 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationElementValue.java
@@ -20,7 +20,7 @@ package org.apache.tomcat.util.bcel.classfile;
 public class AnnotationElementValue extends ElementValue
 {
     // For annotation element values, this is the annotation
-    private AnnotationEntry annotationEntry;
+    private final AnnotationEntry annotationEntry;
 
     AnnotationElementValue(int type, AnnotationEntry annotationEntry,
             ConstantPool cpool)

==================================================
ArrayElementValue.java
index 2f7efcc8bf..43f67df39d 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationEntry.java
@@ -35,6 +35,7 @@ public class AnnotationEntry implements Constants {
     private final int type_index;
     private final ConstantPool constant_pool;
 
+    // FIXME: add 'final'
     private List<ElementValuePair> element_value_pairs;
 
     /**

==================================================
ClassElementValue.java
index 1da26fb805..3256bf5d25 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ArrayElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ArrayElementValue.java
@@ -20,7 +20,7 @@ package org.apache.tomcat.util.bcel.classfile;
 public class ArrayElementValue extends ElementValue
 {
     // For array types, this is the array
-    private ElementValue[] evalues;
+    private final ElementValue[] evalues;
 
     ArrayElementValue(int type, ElementValue[] datums, ConstantPool cpool)
     {

==================================================
ClassParser.java
index 3419461559..a5be4964be 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ClassElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ClassElementValue.java
@@ -24,7 +24,7 @@ public class ClassElementValue extends ElementValue
     // For primitive types and string type, this points to the value entry in
     // the cpool
     // For 'class' this points to the class entry in the cpool
-    private int idx;
+    private final int idx;
 
     ClassElementValue(int type, int idx, ConstantPool cpool) {
         super(type, cpool);

==================================================
Constant.java
index ca190594b2..c2107faa00 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
@@ -42,8 +42,8 @@ public final class ClassParser {
 
     private static final int MAGIC = 0xCAFEBABE;
 
-    private DataInputStream file;
-    private String file_name;
+    private final DataInputStream file;
+    private final String file_name;
     private int class_name_index, superclass_name_index;
     private int access_flags; // Access rights of parsed class
     private int[] interfaces; // Names of implemented interfaces

==================================================
ConstantClass.java
index 41f70a59bd..799bcb3e21 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Constant.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Constant.java
@@ -39,7 +39,7 @@ public abstract class Constant {
      * need the tag as an index to select the corresponding class name from the
      * `CONSTANT_NAMES' array.
      */
-    protected byte tag;
+    protected final byte tag;
 
 
     Constant(byte tag) {

==================================================
ConstantDouble.java
index fe5df58ba2..4627c65958 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantClass.java
@@ -32,7 +32,7 @@ import org.apache.tomcat.util.bcel.Constants;
  */
 public final class ConstantClass extends Constant {
 
-    private int name_index; // Identical to ConstantString except for the name
+    private final int name_index; // Identical to ConstantString except for the name
 
 
     /**

==================================================
ConstantFloat.java
index df1bd8c457..895c91525c 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantDouble.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantDouble.java
@@ -32,7 +32,7 @@ import org.apache.tomcat.util.bcel.Constants;
  */
 public final class ConstantDouble extends Constant {
 
-    private double bytes;
+    private final double bytes;
 
 
     /**

==================================================
ConstantInteger.java
index 48129fc79d..044f58b038 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantFloat.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantFloat.java
@@ -32,7 +32,7 @@ import org.apache.tomcat.util.bcel.Constants;
  */
 public final class ConstantFloat extends Constant {
 
-    private float bytes;
+    private final float bytes;
 
 
     /**

==================================================
ConstantLong.java
index 4f71f1dbd0..c66065dfbd 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantInteger.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantInteger.java
@@ -32,7 +32,7 @@ import org.apache.tomcat.util.bcel.Constants;
  */
 public final class ConstantInteger extends Constant {
 
-    private int bytes;
+    private final int bytes;
 
 
     /**

==================================================
ElementValue.java
index 60d322bc12..46262f5f58 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantLong.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantLong.java
@@ -32,7 +32,7 @@ import org.apache.tomcat.util.bcel.Constants;
  */
 public final class ConstantLong extends Constant {
 
-    private long bytes;
+    private final long bytes;
 
 
     /**

==================================================
ElementValuePair.java
index 4302ff36ac..64a7d2b685 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ElementValue.java
@@ -26,9 +26,9 @@ import java.io.IOException;
  */
 public abstract class ElementValue
 {
-    protected int type;
+    protected final int type;
 
-    protected ConstantPool cpool;
+    protected final ConstantPool cpool;
 
 
     ElementValue(int type, ConstantPool cpool) {

==================================================
EnumElementValue.java
index f9affb5e09..656c6c3d16 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ElementValuePair.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ElementValuePair.java
@@ -27,11 +27,11 @@ import org.apache.tomcat.util.bcel.Constants;
  */
 public class ElementValuePair
 {
-    private ElementValue elementValue;
+    private final ElementValue elementValue;
 
-    private ConstantPool constantPool;
+    private final ConstantPool constantPool;
 
-    private int elementNameIndex;
+    private final int elementNameIndex;
 
     ElementValuePair(int elementNameIndex, ElementValue elementValue,
             ConstantPool constantPool) {

==================================================
ParameterAnnotationEntry.java
index 6ee781a80f..550f94fc7e 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/EnumElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/EnumElementValue.java
@@ -21,7 +21,7 @@ import org.apache.tomcat.util.bcel.Constants;
 
 public class EnumElementValue extends ElementValue
 {
-    private int valueIdx;
+    private final int valueIdx;
 
     EnumElementValue(int type, int valueIdx, ConstantPool cpool) {
         super(type, cpool);

==================================================
ParameterAnnotations.java
index cbb87df040..d680d96fe4 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ParameterAnnotationEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ParameterAnnotationEntry.java
@@ -30,8 +30,7 @@ import org.apache.tomcat.util.bcel.Constants;
  */
 public class ParameterAnnotationEntry implements Constants {
 
-    private int annotation_table_length;
-    private AnnotationEntry[] annotation_table;
+    private final AnnotationEntry[] annotation_table;
 
 
     /**
@@ -40,7 +39,7 @@ public class ParameterAnnotationEntry implements Constants {
      * @throws IOException
      */
     ParameterAnnotationEntry(DataInputStream file, ConstantPool constant_pool) throws IOException {
-        annotation_table_length = (file.readUnsignedShort());
+        int annotation_table_length = file.readUnsignedShort();
         annotation_table = new AnnotationEntry[annotation_table_length];
         for (int i = 0; i < annotation_table_length; i++) {
             annotation_table[i] = AnnotationEntry.read(file, constant_pool);

==================================================
SimpleElementValue.java
index ff75adc1b8..8e30e3d296 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ParameterAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ParameterAnnotations.java
@@ -28,8 +28,7 @@ import java.io.IOException;
  */
 public abstract class ParameterAnnotations extends Attribute {
 
-    private int num_parameters;
-    private ParameterAnnotationEntry[] parameter_annotation_table; // Table of parameter annotations
+    private final ParameterAnnotationEntry[] parameter_annotation_table; // Table of parameter annotations
 
 
     /**
@@ -38,22 +37,11 @@ public abstract class ParameterAnnotations extends Attribute {
      */
     ParameterAnnotations(DataInputStream file, ConstantPool constant_pool)
             throws IOException {
-        num_parameters = (file.readUnsignedByte());
+        int num_parameters = file.readUnsignedByte();
         parameter_annotation_table = new ParameterAnnotationEntry[num_parameters];
         for (int i = 0; i < num_parameters; i++) {
             parameter_annotation_table[i] = new ParameterAnnotationEntry(file, constant_pool);
         }
     }
 
-
-    /**
-     * @param parameter_annotation_table the entries to set in this parameter annotation
-     */
-    public final void setParameterAnnotationTable(
-            ParameterAnnotationEntry[] parameter_annotation_table ) {
-        this.parameter_annotation_table = parameter_annotation_table;
-        num_parameters = (parameter_annotation_table == null)
-                ? 0
-                : parameter_annotation_table.length;
-    }
 }

==================================================
