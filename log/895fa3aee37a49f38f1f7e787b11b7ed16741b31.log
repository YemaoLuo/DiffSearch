895fa3aee37a49f38f1f7e787b11b7ed16741b31
==================================================
Add @Override markers. Auto generated by Eclipse. Checked manually.
==================================================
Mark Emlyn
==================================================
Fri Sep 3 17:57:33 2010 +0000
==================================================
AnnotationDefault.java
Add @Override markers. Auto generated by Eclipse. Checked manually.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@992395 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AnnotationElementValue.java
index b35952141f..e5ecfca4af 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationDefault.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationDefault.java
@@ -82,11 +82,13 @@ public class AnnotationDefault extends Attribute
 
     
 
+    @Override
     public Attribute copy(ConstantPool _constant_pool)
     {
         throw new RuntimeException("Not implemented yet!");
     }
 
+    @Override
     public final void dump(DataOutputStream dos) throws IOException
     {
       super.dump(dos);

==================================================
ArrayElementValue.java
index d0ff611793..0965ea0eed 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationElementValue.java
@@ -35,12 +35,14 @@ public class AnnotationElementValue extends ElementValue
         this.annotationEntry = annotationEntry;
     }
 
+    @Override
     public void dump(DataOutputStream dos) throws IOException
     {
         dos.writeByte(type); // u1 type of value (ANNOTATION == '@')
         annotationEntry.dump(dos);
     }
 
+    @Override
     public String stringifyValue()
     {
         StringBuffer sb = new StringBuffer();
@@ -48,6 +50,7 @@ public class AnnotationElementValue extends ElementValue
         return sb.toString();
     }
 
+    @Override
     public String toString()
     {
         return stringifyValue();

==================================================
Attribute.java
index 8e9d31b3a1..c4c5639e17 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ArrayElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ArrayElementValue.java
@@ -25,6 +25,7 @@ public class ArrayElementValue extends ElementValue
     // For array types, this is the array
     private ElementValue[] evalues;
 
+    @Override
     public String toString()
     {
         StringBuffer sb = new StringBuffer();
@@ -48,6 +49,7 @@ public class ArrayElementValue extends ElementValue
         this.evalues = datums;
     }
 
+    @Override
     public void dump(DataOutputStream dos) throws IOException
     {
         dos.writeByte(type); // u1 type of value (ARRAY == '[')
@@ -58,6 +60,7 @@ public class ArrayElementValue extends ElementValue
         }
     }
 
+    @Override
     public String stringifyValue()
     {
         StringBuffer sb = new StringBuffer();

==================================================
ClassElementValue.java
index e38610a987..2ce8417a59 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
@@ -220,6 +220,7 @@ public abstract class Attribute implements Cloneable, Serializable
      * 
      * @return shallow copy of this attribute
      */
+    @Override
     public Object clone()
     {
         Object o = null;
@@ -242,6 +243,7 @@ public abstract class Attribute implements Cloneable, Serializable
     /**
      * @return attribute name.
      */
+    @Override
     public String toString()
     {
         return Constants.ATTRIBUTE_NAMES[tag];

==================================================
Code.java
index 3449592797..489d6a4f1b 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ClassElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ClassElementValue.java
@@ -39,6 +39,7 @@ public class ClassElementValue extends ElementValue
 
     
 
+    @Override
     public String stringifyValue()
     {
         ConstantUtf8 cu8 = (ConstantUtf8) cpool.getConstant(idx,
@@ -46,6 +47,7 @@ public class ClassElementValue extends ElementValue
         return cu8.getBytes();
     }
 
+    @Override
     public void dump(DataOutputStream dos) throws IOException
     {
         dos.writeByte(type); // u1 kind of value

==================================================
CodeException.java
index a9fe8a0746..a79f0905af 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Code.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Code.java
@@ -123,6 +123,7 @@ public final class Code extends Attribute {
      * @param file Output file stream
      * @throws IOException
      */
+    @Override
     public final void dump( DataOutputStream file ) throws IOException {
         super.dump(file);
         file.writeShort(max_stack);
@@ -259,6 +260,7 @@ public final class Code extends Attribute {
     /**
      * @return String representation of code chunk.
      */
+    @Override
     public final String toString() {
         return toString(true);
     }
@@ -269,6 +271,7 @@ public final class Code extends Attribute {
      * 
      * @param _constant_pool the constant pool to duplicate
      */
+    @Override
     public Attribute copy( ConstantPool _constant_pool ) {
         Code c = (Code) clone();
         if (code != null) {

==================================================
Constant.java
index 0c0e833489..4734dd3869 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/CodeException.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/CodeException.java
@@ -123,6 +123,7 @@ public final class CodeException implements Cloneable, Constants, Serializable {
     /**
      * @return String representation.
      */
+    @Override
     public final String toString() {
         return "CodeException(start_pc = " + start_pc + ", end_pc = " + end_pc + ", handler_pc = "
                 + handler_pc + ", catch_type = " + catch_type + ")";

==================================================
ConstantCP.java
index 833ae206c9..2fca08a7fe 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Constant.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Constant.java
@@ -38,6 +38,7 @@ public abstract class Constant implements Cloneable, Serializable {
     private static final long serialVersionUID = 2827409182154809454L;
     private static BCELComparator _cmp = new BCELComparator() {
 
+        @Override
         public boolean equals( Object o1, Object o2 ) {
             Constant THIS = (Constant) o1;
             Constant THAT = (Constant) o2;
@@ -45,6 +46,7 @@ public abstract class Constant implements Cloneable, Serializable {
         }
 
 
+        @Override
         public int hashCode( Object o ) {
             Constant THIS = (Constant) o;
             return THIS.toString().hashCode();
@@ -81,6 +83,7 @@ public abstract class Constant implements Cloneable, Serializable {
     /**
      * @return String representation.
      */
+    @Override
     public String toString() {
         return Constants.CONSTANT_NAMES[tag] + "[" + tag + "]";
     }
@@ -89,6 +92,7 @@ public abstract class Constant implements Cloneable, Serializable {
     
 
 
+    @Override
     public Object clone() throws CloneNotSupportedException {
         return super.clone();
     }
@@ -145,6 +149,7 @@ public abstract class Constant implements Cloneable, Serializable {
      * 
      * @see java.lang.Object#equals(java.lang.Object)
      */
+    @Override
     public boolean equals( Object obj ) {
         return _cmp.equals(this, obj);
     }
@@ -156,6 +161,7 @@ public abstract class Constant implements Cloneable, Serializable {
      * 
      * @see java.lang.Object#hashCode()
      */
+    @Override
     public int hashCode() {
         return _cmp.hashCode(this);
     }

==================================================
ConstantClass.java
index cf4ae71c49..e47ffd2945 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantCP.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantCP.java
@@ -70,6 +70,7 @@ public abstract class ConstantCP extends Constant {
      * @param file Output file stream
      * @throws IOException
      */
+    @Override
     public final void dump( DataOutputStream file ) throws IOException {
         file.writeByte(tag);
         file.writeShort(class_index);
@@ -105,6 +106,7 @@ public abstract class ConstantCP extends Constant {
     /**
      * @return String representation.
      */
+    @Override
     public final String toString() {
         return super.toString() + "(class_index = " + class_index + ", name_and_type_index = "
                 + name_and_type_index + ")";

==================================================
ConstantDouble.java
index b71853fa1d..d387355adb 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantClass.java
@@ -68,6 +68,7 @@ public final class ConstantClass extends Constant implements ConstantObject {
      * @param file Output file stream
      * @throws IOException
      */
+    @Override
     public final void dump( DataOutputStream file ) throws IOException {
         file.writeByte(tag);
         file.writeShort(name_index);
@@ -94,6 +95,7 @@ public final class ConstantClass extends Constant implements ConstantObject {
     /**
      * @return String representation.
      */
+    @Override
     public final String toString() {
         return super.toString() + "(name_index = " + name_index + ")";
     }

==================================================
ConstantFloat.java
index a0801a555c..38495953e3 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantDouble.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantDouble.java
@@ -67,6 +67,7 @@ public final class ConstantDouble extends Constant implements ConstantObject {
      * @param file Output file stream
      * @throws IOException
      */
+    @Override
     public final void dump( DataOutputStream file ) throws IOException {
         file.writeByte(tag);
         file.writeDouble(bytes);
@@ -87,6 +88,7 @@ public final class ConstantDouble extends Constant implements ConstantObject {
     /**
      * @return String representation.
      */
+    @Override
     public final String toString() {
         return super.toString() + "(bytes = " + bytes + ")";
     }

==================================================
ConstantInteger.java
index ea2f20cd7f..f72b408d42 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantFloat.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantFloat.java
@@ -67,6 +67,7 @@ public final class ConstantFloat extends Constant implements ConstantObject {
      * @param file Output file stream
      * @throws IOException
      */
+    @Override
     public final void dump( DataOutputStream file ) throws IOException {
         file.writeByte(tag);
         file.writeFloat(bytes);
@@ -87,6 +88,7 @@ public final class ConstantFloat extends Constant implements ConstantObject {
     /**
      * @return String representation.
      */
+    @Override
     public final String toString() {
         return super.toString() + "(bytes = " + bytes + ")";
     }

==================================================
ConstantLong.java
index 13554ba0c4..64da22644c 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantInteger.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantInteger.java
@@ -67,6 +67,7 @@ public final class ConstantInteger extends Constant implements ConstantObject {
      * @param file Output file stream
      * @throws IOException
      */
+    @Override
     public final void dump( DataOutputStream file ) throws IOException {
         file.writeByte(tag);
         file.writeInt(bytes);
@@ -87,6 +88,7 @@ public final class ConstantInteger extends Constant implements ConstantObject {
     /**
      * @return String representation.
      */
+    @Override
     public final String toString() {
         return super.toString() + "(bytes = " + bytes + ")";
     }

==================================================
ConstantNameAndType.java
index 6a3c1a89a9..c9d67105f9 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantLong.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantLong.java
@@ -67,6 +67,7 @@ public final class ConstantLong extends Constant implements ConstantObject {
      * @param file Output file stream
      * @throws IOException
      */
+    @Override
     public final void dump( DataOutputStream file ) throws IOException {
         file.writeByte(tag);
         file.writeLong(bytes);
@@ -87,6 +88,7 @@ public final class ConstantLong extends Constant implements ConstantObject {
     /**
      * @return String representation.
      */
+    @Override
     public final String toString() {
         return super.toString() + "(bytes = " + bytes + ")";
     }

==================================================
ConstantPool.java
index ededee5972..0a38d6ef8a 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantNameAndType.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantNameAndType.java
@@ -71,6 +71,7 @@ public final class ConstantNameAndType extends Constant {
      * @param file Output file stream
      * @throws IOException
      */
+    @Override
     public final void dump( DataOutputStream file ) throws IOException {
         file.writeByte(tag);
         file.writeShort(name_index);
@@ -109,6 +110,7 @@ public final class ConstantNameAndType extends Constant {
     /**
      * @return String representation
      */
+    @Override
     public final String toString() {
         return super.toString() + "(name_index = " + name_index + ", signature_index = "
                 + signature_index + ")";

==================================================
ConstantString.java
index 13b978705d..81d08aa55f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
@@ -275,6 +275,7 @@ public class ConstantPool implements Cloneable, Serializable {
     /**
      * @return String representation.
      */
+    @Override
     public String toString() {
         StringBuffer buf = new StringBuffer();
         for (int i = 1; i < constant_pool_count; i++) {

==================================================
ConstantUtf8.java
index 8a79e0dbd3..14cc108ab2 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantString.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantString.java
@@ -67,6 +67,7 @@ public final class ConstantString extends Constant implements ConstantObject {
      * @param file Output file stream
      * @throws IOException
      */
+    @Override
     public final void dump( DataOutputStream file ) throws IOException {
         file.writeByte(tag);
         file.writeShort(string_index);
@@ -87,6 +88,7 @@ public final class ConstantString extends Constant implements ConstantObject {
     /**
      * @return String representation.
      */
+    @Override
     public final String toString() {
         return super.toString() + "(string_index = " + string_index + ")";
     }

==================================================
ConstantValue.java
index f5fa65e782..21ed5be259 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantUtf8.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantUtf8.java
@@ -62,6 +62,7 @@ public final class ConstantUtf8 extends Constant {
      * @param file Output file stream
      * @throws IOException
      */
+    @Override
     public final void dump( DataOutputStream file ) throws IOException {
         file.writeByte(tag);
         file.writeUTF(bytes);
@@ -82,6 +83,7 @@ public final class ConstantUtf8 extends Constant {
     /**
      * @return String representation
      */
+    @Override
     public final String toString() {
         return super.toString() + "(\"" + Utility.replace(bytes, "\n", "\\n") + "\")";
     }

==================================================
Deprecated.java
index 5fa488ca9b..627bb8d7f4 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantValue.java
@@ -74,6 +74,7 @@ public final class ConstantValue extends Attribute {
      * @param file Output file stream
      * @throws IOException
      */
+    @Override
     public final void dump( DataOutputStream file ) throws IOException {
         super.dump(file);
         file.writeShort(constantvalue_index);
@@ -89,6 +90,7 @@ public final class ConstantValue extends Attribute {
     /**
      * @return String representation of constant value.
      */
+    @Override
     public final String toString() {
         Constant c = constant_pool.getConstant(constantvalue_index);
         String buf;
@@ -122,6 +124,7 @@ public final class ConstantValue extends Attribute {
     /**
      * @return deep copy of this attribute
      */
+    @Override
     public Attribute copy( ConstantPool _constant_pool ) {
         ConstantValue c = (ConstantValue) clone();
         c.constant_pool = _constant_pool;

==================================================
ElementValue.java
index c100527aef..99795e4691 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Deprecated.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Deprecated.java
@@ -78,6 +78,7 @@ public final class Deprecated extends Attribute {
      * @param file Output file stream
      * @throws IOException
      */
+    @Override
     public final void dump( DataOutputStream file ) throws IOException {
         super.dump(file);
         if (length > 0) {
@@ -95,6 +96,7 @@ public final class Deprecated extends Attribute {
     /**
      * @return attribute name
      */
+    @Override
     public final String toString() {
         return Constants.ATTRIBUTE_NAMES[Constants.ATTR_DEPRECATED];
     }
@@ -103,6 +105,7 @@ public final class Deprecated extends Attribute {
     /**
      * @return deep copy of this attribute
      */
+    @Override
     public Attribute copy( ConstantPool _constant_pool ) {
         Deprecated c = (Deprecated) clone();
         if (bytes != null) {

==================================================
EnclosingMethod.java
index 02627b8bb9..c21de14537 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ElementValue.java
@@ -32,6 +32,7 @@ public abstract class ElementValue
 
     protected ConstantPool cpool;
 
+    @Override
     public String toString()
     {
         return stringifyValue();

==================================================
EnumElementValue.java
index 86085c2afc..4592923944 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/EnclosingMethod.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/EnclosingMethod.java
@@ -55,12 +55,14 @@ public class EnclosingMethod extends Attribute {
         methodIndex = methodIdx;
     }
 
+    @Override
     public Attribute copy(ConstantPool constant_pool) {
         throw new RuntimeException("Not implemented yet!");
         // is this next line sufficient?
         // return (EnclosingMethod)clone();
     }
     
+    @Override
     public final void dump(DataOutputStream file) throws IOException {
         super.dump(file);
         file.writeShort(classIndex);

==================================================
ExceptionTable.java
index 697ef6d41d..3837e2ab10 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/EnumElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/EnumElementValue.java
@@ -40,6 +40,7 @@ public class EnumElementValue extends ElementValue
         this.valueIdx = valueIdx;
     }
 
+    @Override
     public void dump(DataOutputStream dos) throws IOException
     {
         dos.writeByte(type); // u1 type of value (ENUM_CONSTANT == 'e')
@@ -47,6 +48,7 @@ public class EnumElementValue extends ElementValue
         dos.writeShort(valueIdx); // u2
     }
 
+    @Override
     public String stringifyValue()
     {
         ConstantUtf8 cu8 = (ConstantUtf8) cpool.getConstant(valueIdx,

==================================================
Field.java
index e06dc142bb..2691e977a9 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ExceptionTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ExceptionTable.java
@@ -83,6 +83,7 @@ public final class ExceptionTable extends Attribute {
      * @param file Output file stream
      * @throws IOException
      */
+    @Override
     public final void dump( DataOutputStream file ) throws IOException {
         super.dump(file);
         file.writeShort(number_of_exceptions);
@@ -114,6 +115,7 @@ public final class ExceptionTable extends Attribute {
     /**
      * @return String representation, i.e., a list of thrown exceptions.
      */
+    @Override
     public final String toString() {
         StringBuffer buf = new StringBuffer();
         String str;
@@ -132,6 +134,7 @@ public final class ExceptionTable extends Attribute {
     /**
      * @return deep copy of this attribute
      */
+    @Override
     public Attribute copy( ConstantPool _constant_pool ) {
         ExceptionTable c = (ExceptionTable) clone();
         if (exception_index_table != null) {

==================================================
InnerClass.java
index f5f68e3465..0bb58e079e 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Field.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Field.java
@@ -35,6 +35,7 @@ public final class Field extends FieldOrMethod {
     private static final long serialVersionUID = 2646214544240375238L;
     private static BCELComparator _cmp = new BCELComparator() {
 
+        @Override
         public boolean equals( Object o1, Object o2 ) {
             Field THIS = (Field) o1;
             Field THAT = (Field) o2;
@@ -43,6 +44,7 @@ public final class Field extends FieldOrMethod {
         }
 
 
+        @Override
         public int hashCode( Object o ) {
             Field THIS = (Field) o;
             return THIS.getSignature().hashCode() ^ THIS.getName().hashCode();
@@ -88,6 +90,7 @@ public final class Field extends FieldOrMethod {
      *
      * @return String representation of field, including the signature.
      */
+    @Override
     public final String toString() {
         String name, signature, access; // Short cuts to constant pool
         // Get names from constant pool
@@ -130,6 +133,7 @@ public final class Field extends FieldOrMethod {
      * 
      * @see java.lang.Object#equals(java.lang.Object)
      */
+    @Override
     public boolean equals( Object obj ) {
         return _cmp.equals(this, obj);
     }
@@ -141,6 +145,7 @@ public final class Field extends FieldOrMethod {
      * 
      * @see java.lang.Object#hashCode()
      */
+    @Override
     public int hashCode() {
         return _cmp.hashCode(this);
     }

==================================================
InnerClasses.java
index c56ddea00b..bd0b390fe7 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/InnerClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/InnerClass.java
@@ -115,6 +115,7 @@ public final class InnerClass implements Cloneable, Serializable {
     /**
      * @return String representation.
      */
+    @Override
     public final String toString() {
         return "InnerClass(" + inner_class_index + ", " + outer_class_index + ", "
                 + inner_name_index + ", " + inner_access_flags + ")";

==================================================
JavaClass.java
index cb645dffeb..d87c505935 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/InnerClasses.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/InnerClasses.java
@@ -82,6 +82,7 @@ public final class InnerClasses extends Attribute {
      * @param file Output file stream
      * @throws IOException
      */
+    @Override
     public final void dump( DataOutputStream file ) throws IOException {
         super.dump(file);
         file.writeShort(number_of_classes);
@@ -106,6 +107,7 @@ public final class InnerClasses extends Attribute {
     /**
      * @return String representation.
      */
+    @Override
     public final String toString() {
         StringBuffer buf = new StringBuffer();
         for (int i = 0; i < number_of_classes; i++) {
@@ -118,6 +120,7 @@ public final class InnerClasses extends Attribute {
     /**
      * @return deep copy of this attribute
      */
+    @Override
     public Attribute copy( ConstantPool _constant_pool ) {
         InnerClasses c = (InnerClasses) clone();
         c.inner_classes = new InnerClass[number_of_classes];

==================================================
LineNumber.java
index 09783cc0ff..1529623f4c 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
@@ -61,6 +61,7 @@ public class JavaClass extends AccessFlags implements Cloneable, Comparable {
     
     private static BCELComparator _cmp = new BCELComparator() {
 
+        @Override
         public boolean equals( Object o1, Object o2 ) {
             JavaClass THIS = (JavaClass) o1;
             JavaClass THAT = (JavaClass) o2;
@@ -68,6 +69,7 @@ public class JavaClass extends AccessFlags implements Cloneable, Comparable {
         }
 
 
+        @Override
         public int hashCode( Object o ) {
             JavaClass THIS = (JavaClass) o;
             return THIS.getClassName().hashCode();
@@ -207,6 +209,7 @@ public class JavaClass extends AccessFlags implements Cloneable, Comparable {
     /**
      * @return String representing class contents.
      */
+    @Override
     public String toString() {
         String access = Utility.accessToString(access_flags, true);
         access = access.equals("") ? "" : (access + " ");
@@ -283,6 +286,7 @@ public class JavaClass extends AccessFlags implements Cloneable, Comparable {
      * 
      * @see java.lang.Object#equals(java.lang.Object)
      */
+    @Override
     public boolean equals( Object obj ) {
         return _cmp.equals(this, obj);
     }
@@ -292,6 +296,7 @@ public class JavaClass extends AccessFlags implements Cloneable, Comparable {
      * Return the natural ordering of two JavaClasses.
      * This ordering is based on the class name
      */
+    @Override
     public int compareTo( Object obj ) {
         return getClassName().compareTo(((JavaClass) obj).getClassName());
     }
@@ -303,6 +308,7 @@ public class JavaClass extends AccessFlags implements Cloneable, Comparable {
      * 
      * @see java.lang.Object#hashCode()
      */
+    @Override
     public int hashCode() {
         return _cmp.hashCode(this);
     }

==================================================
LineNumberTable.java
index ccc3e93e37..3851971905 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LineNumber.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LineNumber.java
@@ -91,6 +91,7 @@ public final class LineNumber implements Cloneable, Serializable {
     /**
      * @return String representation
      */
+    @Override
     public final String toString() {
         return "LineNumber(" + start_pc + ", " + line_number + ")";
     }

==================================================
LocalVariable.java
index 7f150ce8a7..69996d746e 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LineNumberTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LineNumberTable.java
@@ -81,6 +81,7 @@ public final class LineNumberTable extends Attribute {
      * @param file Output file stream
      * @throws IOException
      */
+    @Override
     public final void dump( DataOutputStream file ) throws IOException {
         super.dump(file);
         file.writeShort(line_number_table_length);
@@ -105,6 +106,7 @@ public final class LineNumberTable extends Attribute {
     /**
      * @return String representation.
      */
+    @Override
     public final String toString() {
         StringBuffer buf = new StringBuffer();
         StringBuffer line = new StringBuffer();
@@ -131,6 +133,7 @@ public final class LineNumberTable extends Attribute {
     /**
      * @return deep copy of this attribute
      */
+    @Override
     public Attribute copy( ConstantPool _constant_pool ) {
         LineNumberTable c = (LineNumberTable) clone();
         c.line_number_table = new LineNumber[line_number_table_length];

==================================================
LocalVariableTable.java
index f0e7328cc0..0f932c36ed 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariable.java
@@ -160,6 +160,7 @@ public final class LocalVariable implements Constants, Cloneable, Serializable {
     /**
      * @return string representation.
      */
+    @Override
     public final String toString() {
         String name = getName(), signature = Utility.signatureToString(getSignature());
         return "LocalVariable(start_pc = " + start_pc + ", length = " + length + ", index = "

==================================================
LocalVariableTypeTable.java
index e9e365e04e..cd363f6a4f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTable.java
@@ -80,6 +80,7 @@ public class LocalVariableTable extends Attribute {
      * @param file Output file stream
      * @throws IOException
      */
+    @Override
     public final void dump( DataOutputStream file ) throws IOException {
         super.dump(file);
         file.writeShort(local_variable_table_length);
@@ -121,6 +122,7 @@ public class LocalVariableTable extends Attribute {
     /**
      * @return String representation.
      */
+    @Override
     public final String toString() {
         StringBuffer buf = new StringBuffer();
         for (int i = 0; i < local_variable_table_length; i++) {
@@ -136,6 +138,7 @@ public class LocalVariableTable extends Attribute {
     /**
      * @return deep copy of this attribute
      */
+    @Override
     public Attribute copy( ConstantPool _constant_pool ) {
         LocalVariableTable c = (LocalVariableTable) clone();
         c.local_variable_table = new LocalVariable[local_variable_table_length];

==================================================
Method.java
index 6afe7adfa6..445be647e0 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTypeTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTypeTable.java
@@ -72,6 +72,7 @@ private int             local_variable_type_table_length; // Table of local
       local_variable_type_table[i] = new LocalVariable(dis, cpool);
   }
 
+  @Override
   public final void dump(DataOutputStream file) throws IOException
   {
     super.dump(file);
@@ -90,6 +91,7 @@ private int             local_variable_type_table_length; // Table of local
   /**
    * @return String representation.
    */ 
+  @Override
   public final String toString() {
     StringBuffer buf = new StringBuffer("");
 
@@ -105,6 +107,7 @@ private int             local_variable_type_table_length; // Table of local
   /**
    * @return deep copy of this attribute
    */
+  @Override
   public Attribute copy(ConstantPool constant_pool) {
     LocalVariableTypeTable c = (LocalVariableTypeTable)clone();
 

==================================================
PMGClass.java
index 135dff4c2d..0ee94348ad 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Method.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Method.java
@@ -36,6 +36,7 @@ public final class Method extends FieldOrMethod {
     private static final long serialVersionUID = -7447828891136739513L;
     private static BCELComparator _cmp = new BCELComparator() {
 
+        @Override
         public boolean equals( Object o1, Object o2 ) {
             Method THIS = (Method) o1;
             Method THAT = (Method) o2;
@@ -44,6 +45,7 @@ public final class Method extends FieldOrMethod {
         }
 
 
+        @Override
         public int hashCode( Object o ) {
             Method THIS = (Method) o;
             return THIS.getSignature().hashCode() ^ THIS.getName().hashCode();
@@ -128,6 +130,7 @@ public final class Method extends FieldOrMethod {
      *
      * @return String representation of the method.
      */
+    @Override
     public final String toString() {
         ConstantUtf8 c;
         String name, signature, access; // Short cuts to constant pool
@@ -180,6 +183,7 @@ public final class Method extends FieldOrMethod {
      * 
      * @see java.lang.Object#equals(java.lang.Object)
      */
+    @Override
     public boolean equals( Object obj ) {
         return _cmp.equals(this, obj);
     }
@@ -191,6 +195,7 @@ public final class Method extends FieldOrMethod {
      * 
      * @see java.lang.Object#hashCode()
      */
+    @Override
     public int hashCode() {
         return _cmp.hashCode(this);
     }

==================================================
RuntimeInvisibleAnnotations.java
index 774800be41..18310c7178 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/PMGClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/PMGClass.java
@@ -75,6 +75,7 @@ public final class PMGClass extends Attribute {
      * @param file Output file stream
      * @throws IOException
      */
+    @Override
     public final void dump( DataOutputStream file ) throws IOException {
         super.dump(file);
         file.writeShort(pmg_index);
@@ -117,6 +118,7 @@ public final class PMGClass extends Attribute {
     /**
      * @return String representation
      */
+    @Override
     public final String toString() {
         return "PMGClass(" + getPMGName() + ", " + getPMGClassName() + ")";
     }
@@ -125,6 +127,7 @@ public final class PMGClass extends Attribute {
     /**
      * @return deep copy of this attribute
      */
+    @Override
     public Attribute copy( ConstantPool _constant_pool ) {
         return (PMGClass) clone();
     }

==================================================
RuntimeInvisibleParameterAnnotations.java
index 7a15f92b0f..e353ea6c66 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/RuntimeInvisibleAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/RuntimeInvisibleAnnotations.java
@@ -56,12 +56,14 @@ public class RuntimeInvisibleAnnotations extends Annotations
     /**
      * @return deep copy of this attribute
      */
+    @Override
     public Attribute copy(ConstantPool constant_pool)
     {
         Annotations c = (Annotations) clone();
         return c;
     }
 
+    @Override
     public final void dump(DataOutputStream dos) throws IOException
     {
         super.dump(dos);

==================================================
RuntimeVisibleAnnotations.java
index 5d655e02bb..1ce80f6529 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/RuntimeInvisibleParameterAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/RuntimeInvisibleParameterAnnotations.java
@@ -51,6 +51,7 @@ public class RuntimeInvisibleParameterAnnotations extends ParameterAnnotations {
     /**
      * @return deep copy of this attribute
      */
+    @Override
     public Attribute copy( ConstantPool constant_pool ) {
         Annotations c = (Annotations) clone();
         return c;

==================================================
RuntimeVisibleParameterAnnotations.java
index 005dab9fac..247f1f88cc 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/RuntimeVisibleAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/RuntimeVisibleAnnotations.java
@@ -56,12 +56,14 @@ public class RuntimeVisibleAnnotations extends Annotations
     /**
      * @return deep copy of this attribute
      */
+    @Override
     public Attribute copy(ConstantPool constant_pool)
     {
         Annotations c = (Annotations) clone();
         return c;
     }
 
+    @Override
     public final void dump(DataOutputStream dos) throws IOException
     {
         super.dump(dos);

==================================================
Signature.java
index 12d023d6fe..4c403f949b 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/RuntimeVisibleParameterAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/RuntimeVisibleParameterAnnotations.java
@@ -51,6 +51,7 @@ public class RuntimeVisibleParameterAnnotations extends ParameterAnnotations {
     /**
      * @return deep copy of this attribute
      */
+    @Override
     public Attribute copy( ConstantPool constant_pool ) {
         Annotations c = (Annotations) clone();
         return c;

==================================================
SimpleElementValue.java
index 15b4f6501b..3e474c66f9 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Signature.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Signature.java
@@ -72,6 +72,7 @@ public final class Signature extends Attribute {
      * @param file Output file stream
      * @throws IOException
      */
+    @Override
     public final void dump( DataOutputStream file ) throws IOException {
         super.dump(file);
         file.writeShort(signature_index);
@@ -96,6 +97,7 @@ public final class Signature extends Attribute {
     /**
      * @return String representation
      */
+    @Override
     public final String toString() {
         String s = getSignature();
         return "Signature(" + s + ")";
@@ -105,6 +107,7 @@ public final class Signature extends Attribute {
     /**
      * @return deep copy of this attribute
      */
+    @Override
     public Attribute copy( ConstantPool _constant_pool ) {
         return (Signature) clone();
     }

==================================================
SourceFile.java
index 216180ad6e..25b8a2eebd 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/SimpleElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/SimpleElementValue.java
@@ -41,12 +41,14 @@ public class SimpleElementValue extends ElementValue
     }
     
 
+    @Override
     public String toString()
     {
         return stringifyValue();
     }
 
     // Whatever kind of value it is, return it as a string
+    @Override
     public String stringifyValue()
     {
         switch (type)
@@ -97,6 +99,7 @@ public class SimpleElementValue extends ElementValue
         }
     }
 
+    @Override
     public void dump(DataOutputStream dos) throws IOException
     {
         dos.writeByte(type); // u1 kind of value

==================================================
StackMap.java
index 529d69d38f..9fbb72d27f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/SourceFile.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/SourceFile.java
@@ -81,6 +81,7 @@ public final class SourceFile extends Attribute {
      * @param file Output file stream
      * @throws IOException
      */
+    @Override
     public final void dump( DataOutputStream file ) throws IOException {
         super.dump(file);
         file.writeShort(sourcefile_index);
@@ -106,6 +107,7 @@ public final class SourceFile extends Attribute {
     /**
      * @return String representation
      */
+    @Override
     public final String toString() {
         return "SourceFile(" + getSourceFileName() + ")";
     }
@@ -114,6 +116,7 @@ public final class SourceFile extends Attribute {
     /**
      * @return deep copy of this attribute
      */
+    @Override
     public Attribute copy( ConstantPool _constant_pool ) {
         return (SourceFile) clone();
     }

==================================================
StackMapEntry.java
index 694607ee23..411e63401b 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMap.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMap.java
@@ -82,6 +82,7 @@ public final class StackMap extends Attribute {
      * @param file Output file stream
      * @throws IOException
      */
+    @Override
     public final void dump( DataOutputStream file ) throws IOException {
         super.dump(file);
         file.writeShort(map_length);
@@ -106,6 +107,7 @@ public final class StackMap extends Attribute {
     /**
      * @return String representation.
      */
+    @Override
     public final String toString() {
         StringBuffer buf = new StringBuffer("StackMap(");
         for (int i = 0; i < map_length; i++) {
@@ -122,6 +124,7 @@ public final class StackMap extends Attribute {
     /**
      * @return deep copy of this attribute
      */
+    @Override
     public Attribute copy( ConstantPool _constant_pool ) {
         StackMap c = (StackMap) clone();
         c.map = new StackMapEntry[map_length];

==================================================
StackMapTable.java
index 39f914de38..25da5e7d11 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapEntry.java
@@ -92,6 +92,7 @@ public final class StackMapEntry implements Cloneable {
     /**
      * @return String representation.
      */
+    @Override
     public final String toString() {
         StringBuffer buf = new StringBuffer(64);
         buf.append("(offset=").append(byte_code_offset);

==================================================
StackMapTableEntry.java
index d299d9dea2..c717877ae1 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapTable.java
@@ -82,6 +82,7 @@ public final class StackMapTable extends Attribute {
      * @param file Output file stream
      * @throws IOException
      */
+    @Override
     public final void dump( DataOutputStream file ) throws IOException {
         super.dump(file);
         file.writeShort(map_length);
@@ -106,6 +107,7 @@ public final class StackMapTable extends Attribute {
     /**
      * @return String representation.
      */
+    @Override
     public final String toString() {
         StringBuffer buf = new StringBuffer("StackMapTable(");
         for (int i = 0; i < map_length; i++) {
@@ -122,6 +124,7 @@ public final class StackMapTable extends Attribute {
     /**
      * @return deep copy of this attribute
      */
+    @Override
     public Attribute copy( ConstantPool _constant_pool ) {
         StackMapTable c = (StackMapTable) clone();
         c.map = new StackMapTableEntry[map_length];

==================================================
StackMapType.java
index 5a4cb53fd0..bb4c85a998 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapTableEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapTableEntry.java
@@ -149,6 +149,7 @@ public final class StackMapTableEntry implements Cloneable {
     /**
      * @return String representation.
      */
+    @Override
     public final String toString() {
         StringBuffer buf = new StringBuffer(64);
         buf.append("(");

==================================================
Synthetic.java
index e84907d433..c19b0473ab 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapType.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapType.java
@@ -127,6 +127,7 @@ public final class StackMapType implements Cloneable {
     /**
      * @return String representation
      */
+    @Override
     public final String toString() {
         return "(type=" + Constants.ITEM_NAMES[type] + printIndex() + ")";
     }

==================================================
Unknown.java
index 8eee31c25a..50d6d1b5e7 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Synthetic.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Synthetic.java
@@ -84,6 +84,7 @@ public final class Synthetic extends Attribute {
      * @param file Output file stream
      * @throws IOException
      */
+    @Override
     public final void dump( DataOutputStream file ) throws IOException {
         super.dump(file);
         if (length > 0) {
@@ -101,6 +102,7 @@ public final class Synthetic extends Attribute {
     /**
      * @return String representation.
      */
+    @Override
     public final String toString() {
         StringBuffer buf = new StringBuffer("Synthetic");
         if (length > 0) {
@@ -113,6 +115,7 @@ public final class Synthetic extends Attribute {
     /**
      * @return deep copy of this attribute
      */
+    @Override
     public Attribute copy( ConstantPool _constant_pool ) {
         Synthetic c = (Synthetic) clone();
         if (bytes != null) {

==================================================
Utility.java
index 8c8071c653..b498b2856a 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Unknown.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Unknown.java
@@ -96,6 +96,7 @@ public final class Unknown extends Attribute {
      * @param file Output file stream
      * @throws IOException
      */
+    @Override
     public final void dump( DataOutputStream file ) throws IOException {
         super.dump(file);
         if (length > 0) {
@@ -110,6 +111,7 @@ public final class Unknown extends Attribute {
     /**
      * @return name of attribute.
      */
+    @Override
     public final String getName() {
         return name;
     }
@@ -121,6 +123,7 @@ public final class Unknown extends Attribute {
     /**
      * @return String representation.
      */
+    @Override
     public final String toString() {
         if (length == 0 || bytes == null) {
             return "(Unknown attribute " + name + ")";
@@ -140,6 +143,7 @@ public final class Unknown extends Attribute {
     /**
      * @return deep copy of this attribute
      */
+    @Override
     public Attribute copy( ConstantPool _constant_pool ) {
         Unknown c = (Unknown) clone();
         if (bytes != null) {

==================================================
