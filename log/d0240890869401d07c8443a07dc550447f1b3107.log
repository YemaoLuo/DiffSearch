d0240890869401d07c8443a07dc550447f1b3107
==================================================
StreamError needs the stream ID (so we know which stream to close)
==================================================
Mark Thomas
==================================================
Mon Jun 8 20:11:36 2015 +0000
==================================================
FrameType.java
StreamError needs the stream ID (so we know which stream to close)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1684266 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http2Parser.java
index 3861a45496..929136407c 100644
--- a/java/org/apache/coyote/http2/FrameType.java
+++ b/java/org/apache/coyote/http2/FrameType.java
@@ -56,22 +56,18 @@ public enum FrameType {
     }
 
 
-    public void checkStream(String connectionId, int streamId) throws Http2Exception {
-        if (streamId == 0 && !streamZero) {
-            throw new ConnectionError(sm.getString("frameType.checkStream.invalidForZero",
-                    connectionId, this), Error.PROTOCOL_ERROR);
-        } else if (streamId != 0 && !streamNonZero) {
-            throw new ConnectionError(sm.getString("frameType.checkStream.invalidForNonZero",
-                    connectionId, Integer.valueOf(streamId), this), Error.PROTOCOL_ERROR);
+    public void checkStream(int streamId) throws Http2Exception {
+        if (streamId == 0 && !streamZero || streamId != 0 && !streamNonZero) {
+            throw new ConnectionError(sm.getString("frameType.checkStream", this),
+                    Error.PROTOCOL_ERROR);
         }
     }
 
 
-    public void checkPayloadSize(String connectionId, int streamId, int payloadSize)
-            throws Http2Exception {
+    public void checkPayloadSize(int payloadSize) throws Http2Exception {
         if (payloadSizeValidator != null && !payloadSizeValidator.test(payloadSize)) {
             throw new ConnectionError(sm.getString("frameType.checkPayloadSize",
-                    connectionId, Integer.toString(streamId), this, Integer.toString(payloadSize)),
+                    Integer.toString(payloadSize), this),
                     Error.FRAME_SIZE_ERROR);
         }
     }

==================================================
Http2UpgradeHandler.java
index 0763e8662c..a4ccead132 100644
--- a/java/org/apache/coyote/http2/Http2Parser.java
+++ b/java/org/apache/coyote/http2/Http2Parser.java
@@ -86,9 +86,8 @@ class Http2Parser {
         try {
             validateFrame(expected, frameType, streamId, flags, payloadSize);
         } catch (StreamError se) {
-            // TODO debug log
             swallow(payloadSize);
-            return true;
+            throw se;
         }
 
         switch (frameType) {
@@ -313,7 +312,7 @@ class Http2Parser {
             } else {
                 throw new StreamError(
                         sm.getString("http2Parser.processFrameWindowUpdate.invalidIncrement"),
-                        Error.PROTOCOL_ERROR);
+                        Error.PROTOCOL_ERROR, streamId);
             }
         }
 
@@ -413,7 +412,7 @@ class Http2Parser {
 
         if (expected != null && frameType != expected) {
             throw new StreamError(sm.getString("http2Parser.processFrame.unexpectedType",
-                    expected, frameType), Error.PROTOCOL_ERROR);
+                    expected, frameType), Error.PROTOCOL_ERROR, streamId);
         }
 
         if (payloadSize > maxPayloadSize) {
@@ -435,8 +434,8 @@ class Http2Parser {
             }
         }
 
-        frameType.checkStream(connectionId, streamId);
-        frameType.checkPayloadSize(connectionId, streamId, payloadSize);
+        frameType.checkStream(streamId);
+        frameType.checkPayloadSize(payloadSize);
     }
 
 

==================================================
StreamError.java
index b8bd53c742..d20c71c58b 100644
--- a/java/org/apache/coyote/http2/LocalStrings.properties
+++ b/java/org/apache/coyote/http2/LocalStrings.properties
@@ -24,9 +24,8 @@ connectionSettings.maxFrameSizeInvalid=The requested maximum frame size of [{0}]
 connectionSettings.unknown=An unknown setting with identifier [{0}] and value [{1}] was ignored
 connectionSettings.windowSizeTooBig=The requested window size of [{0}] is bigger than the maximum permitted value of [{1}]
 
-frameType.checkPayloadSize=Connection [{0}], Stream [{1}], Frame type [{2}], Payload size of [{3}] is not valid for this frame type
-frameType.checkStream.invalidForZero=Connection [{0}], Stream [0], received a [{1}] frame which is not valid for stream zero
-frameType.checkStream.invalidForNonZero=Connection [{0}], Stream [{1}], received a [{2}] frame which is only valid for stream zero
+frameType.checkPayloadSize=Payload size of [{0}] is not valid for frame type [{1}]
+frameType.checkStream=Invalid frame type [{0}]
 
 hpack.integerEncodedOverTooManyOctets=HPACK variable length integer encoded over too many octets, max is {0}
 

==================================================
StreamStateMachine.java
index f2e9c2d7eb..72710953be 100644
--- a/java/org/apache/coyote/http2/StreamError.java
+++ b/java/org/apache/coyote/http2/StreamError.java
@@ -20,7 +20,15 @@ public class StreamError extends Http2Exception {
 
     private static final long serialVersionUID = 1L;
 
-    public StreamError(String msg, Error error) {
+    private final int streamId;
+
+    public StreamError(String msg, Error error, int streamId) {
         super(msg, error);
+        this.streamId = streamId;
+    }
+
+
+    public int getStreamId() {
+        return streamId;
     }
 }

==================================================
