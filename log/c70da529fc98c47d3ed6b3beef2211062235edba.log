c70da529fc98c47d3ed6b3beef2211062235edba
==================================================
Delete temporary files later to try an avoid issues with locked files
==================================================
Mark Thomas
==================================================
Thu Feb 25 13:41:35 2021 +0000
==================================================
TestSendFile.java
Delete temporary files later to try an avoid issues with locked files


==================================================
LoggingBaseTest.java
index abfffacf03..a5e2fdb73c 100644
--- a/test/org/apache/catalina/connector/TestSendFile.java
+++ b/test/org/apache/catalina/connector/TestSendFile.java
@@ -60,38 +60,31 @@ public class TestSendFile extends TomcatBaseTest {
         File[] files = new File[ITERATIONS];
         for (int i = 0; i < ITERATIONS; i++) {
             files[i] = generateFile(TEMP_DIR, "-" + i, EXPECTED_CONTENT_LENGTH * (i + 1));
+            addDeleteOnTearDown(files[i]);
         }
-        try {
 
-            for (int i = 0; i < ITERATIONS; i++) {
-                WritingServlet servlet = new WritingServlet(files[i]);
-                Tomcat.addServlet(root, "servlet" + i, servlet);
-                root.addServletMappingDecoded("/servlet" + i, "servlet" + i);
-            }
-
-            tomcat.start();
+        for (int i = 0; i < ITERATIONS; i++) {
+            WritingServlet servlet = new WritingServlet(files[i]);
+            Tomcat.addServlet(root, "servlet" + i, servlet);
+            root.addServletMappingDecoded("/servlet" + i, "servlet" + i);
+        }
 
-            ByteChunk bc = new ByteChunk();
-            Map<String, List<String>> respHeaders = new HashMap<>();
-            for (int i = 0; i < ITERATIONS; i++) {
-                long start = System.currentTimeMillis();
-                int rc = getUrl("http://localhost:" + getPort() + "/servlet" + i, bc, null,
-                        respHeaders);
-                Assert.assertEquals(HttpServletResponse.SC_OK, rc);
-                System.out.println("Client received " + bc.getLength() + " bytes in "
-                        + (System.currentTimeMillis() - start) + " ms.");
-                Assert.assertEquals("Expected [" + EXPECTED_CONTENT_LENGTH * (i + 1L) +
-                        "], was [" + bc.getLength() + "]",
-                        EXPECTED_CONTENT_LENGTH * (i + 1L), bc.getLength());
+        tomcat.start();
 
-                bc.recycle();
-            }
-        } finally {
-            for (File f : files) {
-                boolean deleteResult = f.delete();
-                System.out.println("Deleting [" + f.getAbsolutePath() + "] returned [" + deleteResult + "]");
-                Assert.assertTrue("Failed to clean up [" + f + "]", deleteResult);
-            }
+        ByteChunk bc = new ByteChunk();
+        Map<String, List<String>> respHeaders = new HashMap<>();
+        for (int i = 0; i < ITERATIONS; i++) {
+            long start = System.currentTimeMillis();
+            int rc = getUrl("http://localhost:" + getPort() + "/servlet" + i, bc, null,
+                    respHeaders);
+            Assert.assertEquals(HttpServletResponse.SC_OK, rc);
+            System.out.println("Client received " + bc.getLength() + " bytes in "
+                    + (System.currentTimeMillis() - start) + " ms.");
+            Assert.assertEquals("Expected [" + EXPECTED_CONTENT_LENGTH * (i + 1L) +
+                    "], was [" + bc.getLength() + "]",
+                    EXPECTED_CONTENT_LENGTH * (i + 1L), bc.getLength());
+
+            bc.recycle();
         }
     }
 

==================================================
