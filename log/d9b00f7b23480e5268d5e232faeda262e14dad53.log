d9b00f7b23480e5268d5e232faeda262e14dad53
==================================================
Add an SSLContext object to SSLHostConfig so the endpoints do not need to maintain a separate map of SNI host name to some SSLContext object
==================================================
Mark Thomas
==================================================
Wed Apr 29 13:47:20 2015 +0000
==================================================
AbstractEndpoint.java
Add an SSLContext object to SSLHostConfig so the endpoints do not need to maintain a separate map of SNI host name to some SSLContext object

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1676745 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractJsseEndpoint.java
index 9b5bb3dcaa..6ad8281691 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -43,8 +43,8 @@ import org.apache.tomcat.util.threads.ResizableExecutor;
 import org.apache.tomcat.util.threads.TaskQueue;
 import org.apache.tomcat.util.threads.TaskThreadFactory;
 import org.apache.tomcat.util.threads.ThreadPoolExecutor;
+
 /**
- *
  * @author Mladen Turk
  * @author Remy Maucherat
  */
@@ -231,6 +231,34 @@ public abstract class AbstractEndpoint<S> {
     }
     protected abstract SSLHostConfig.Type getSslConfigType();
 
+    protected SSLHostConfig getSSLHostConfig(String sniHostName) {
+        SSLHostConfig result = null;
+
+        if (sniHostName != null) {
+            // First choice - direct match
+            result = sslHostConfigs.get(sniHostName);
+            if (result != null) {
+                return result;
+            }
+            // Second choice, wildcard match
+            int indexOfDot = sniHostName.indexOf('.');
+            if (indexOfDot > -1) {
+                result = sslHostConfigs.get("*" + sniHostName.substring(indexOfDot));
+            }
+        }
+
+        // Fall-back. Use the default
+        if (result == null) {
+            result = sslHostConfigs.get(SSLHostConfig.DEFAULT_SSL_HOST_NAME);
+        }
+        if (result == null) {
+            // Should never happen.
+            throw new IllegalStateException();
+        }
+        return result;
+    }
+
+
     /**
      * Has the user requested that send file be used where possible?
      */

==================================================
SSLHostConfig.java
index d5e18a36a2..9739683940 100644
--- a/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java
@@ -16,9 +16,7 @@
  */
 package org.apache.tomcat.util.net;
 
-import java.util.HashMap;
 import java.util.Locale;
-import java.util.Map;
 
 import javax.net.ssl.KeyManager;
 import javax.net.ssl.SSLEngine;
@@ -32,7 +30,6 @@ import org.apache.tomcat.util.net.jsse.NioX509KeyManager;
 public abstract class AbstractJsseEndpoint<S> extends AbstractEndpoint<S> {
 
     private SSLImplementation sslImplementation = null;
-    private Map<String,SSLContextWrapper> sslContexts = new HashMap<>();
 
     public SSLImplementation getSslImplementation() {
         return sslImplementation;
@@ -69,14 +66,19 @@ public abstract class AbstractJsseEndpoint<S> extends AbstractEndpoint<S> {
                     sslUtil.configureSessionContext(sessionContext);
                 }
                 SSLContextWrapper sslContextWrapper = new SSLContextWrapper(sslContext, sslUtil);
-                sslContexts.put(sslHostConfig.getHostName(), sslContextWrapper);
+                sslHostConfig.setSslContext(sslContextWrapper);
             }
         }
     }
 
 
     protected SSLEngine createSSLEngine(String sniHostName) {
-        SSLContextWrapper sslContextWrapper = getSSLContextWrapper(sniHostName);
+        SSLHostConfig sslHostConfig = getSSLHostConfig(sniHostName);
+        SSLContextWrapper sslContextWrapper = (SSLContextWrapper) sslHostConfig.getSslContext();
+        if (sslContextWrapper == null) {
+            // TODO i18n
+            throw new IllegalStateException();
+        }
 
         SSLEngine engine = sslContextWrapper.getSSLContext().createSSLEngine();
         if ("false".equals(getClientAuth())) {
@@ -97,10 +99,11 @@ public abstract class AbstractJsseEndpoint<S> extends AbstractEndpoint<S> {
     }
 
 
-
     @Override
     public void unbind() throws Exception {
-        sslContexts.clear();
+        for (SSLHostConfig sslHostConfig : sslHostConfigs.values()) {
+            sslHostConfig.setSslContext(null);
+        }
     }
 
 
@@ -141,34 +144,6 @@ public abstract class AbstractJsseEndpoint<S> extends AbstractEndpoint<S> {
     }
 
 
-    private SSLContextWrapper getSSLContextWrapper(String sniHostName) {
-        SSLContextWrapper result = null;
-
-        if (sniHostName != null) {
-            // First choice - direct match
-            result = sslContexts.get(sniHostName);
-            if (result != null) {
-                return result;
-            }
-            // Second choice, wildcard match
-            int indexOfDot = sniHostName.indexOf('.');
-            if (indexOfDot > -1) {
-                result = sslContexts.get("*" + sniHostName.substring(indexOfDot));
-            }
-        }
-
-        // Fall-back. Use the default
-        if (result == null) {
-            result = sslContexts.get(SSLHostConfig.DEFAULT_SSL_HOST_NAME);
-        }
-        if (result == null) {
-            // Should never happen.
-            throw new IllegalStateException();
-        }
-        return result;
-    }
-
-
     private static class SSLContextWrapper {
 
         private final SSLContext sslContext;

==================================================
