68d130fcbe97ed03fbb2d01f74755bbb3f9f94f2
==================================================
Make the new way of handling processors work with the ability to read headers in a non blocking way
==================================================
Filip Hanik
==================================================
Tue May 29 20:26:49 2007 +0000
==================================================
Http11NioProcessor.java
Make the new way of handling processors work with the ability to read headers in a non blocking way


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@542644 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11NioProtocol.java
index dca4cb8819..4e6948b998 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -955,7 +955,8 @@ public class Http11NioProcessor implements ActionHook {
             }
         } else {
             if ( recycle ) recycle();
-            return (openSocket) ? SocketState.OPEN : SocketState.CLOSED;
+            //return (openSocket) ? (SocketState.OPEN) : SocketState.CLOSED;
+            return (openSocket) ? (recycle?SocketState.OPEN:SocketState.LONG) : SocketState.CLOSED;
         }
 
     }

==================================================
NioBlockingSelector.java
index defcaa4184..53e858efa0 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -622,6 +622,14 @@ public class Http11NioProtocol implements ProtocolHandler, MBeanRegistration
         public void releaseCaches() {
             recycledProcessors.clear();
         }
+        
+        public void release(NioChannel socket) {
+            Http11NioProcessor result = connections.remove(socket);
+            if ( result != null ) {
+                result.recycle();
+                recycledProcessors.offer(result);
+            }
+        }
 
         public SocketState event(NioChannel socket, SocketStatus status) {
             Http11NioProcessor result = connections.get(socket);
@@ -672,6 +680,8 @@ public class Http11NioProtocol implements ProtocolHandler, MBeanRegistration
         public SocketState process(NioChannel socket) {
             Http11NioProcessor processor = null;
             try {
+                processor = connections.remove(socket);
+                
                 if (processor == null) {
                     processor = recycledProcessors.poll();
                 }

==================================================
NioEndpoint.java
index eb49ba240e..79027d8bd9 100644
--- a/java/org/apache/tomcat/util/net/NioBlockingSelector.java
+++ b/java/org/apache/tomcat/util/net/NioBlockingSelector.java
@@ -99,7 +99,7 @@ public class NioBlockingSelector {
         socket.getPoller().addEvent(
             new Runnable() {
             public void run() {
-                key.cancel();
+                socket.getPoller().cancelledKey(key,SocketStatus.ERROR,false);
             }
         });
     }

==================================================
