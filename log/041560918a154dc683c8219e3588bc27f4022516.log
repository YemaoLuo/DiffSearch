041560918a154dc683c8219e3588bc27f4022516
==================================================
Fix some more of the Java 8 Javadoc errors in the org.apace.catalina package
==================================================
Mark Emlyn
==================================================
Mon Oct 13 13:38:25 2014 +0000
==================================================
WebResourceRoot.java
Fix some more of the Java 8 Javadoc errors in the org.apace.catalina package

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1631390 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Connector.java
index 31089dea80..61130f504c 100644
--- a/java/org/apache/catalina/WebResourceRoot.java
+++ b/java/org/apache/catalina/WebResourceRoot.java
@@ -27,15 +27,15 @@ import java.util.Set;
  * a Resource, the ResourceSets are processed in the following order:
  * <ol>
  * <li>Pre  - Resources defined by the &lt;PreResource&gt; element in the web
- *            application&apos;s context.xml. Resources will be searched in the
- *            order they were specified.</li>
+ *            application's context.xml. Resources will be searched in the order
+ *            they were specified.</li>
  * <li>Main - The main resources for the web application - i.e. the WAR or the
  *            directory containing the expanded WAR</li>
  * <li>JARs - Resource JARs as defined by the Servlet specification. JARs will
  *            be searched in the order they were added to the ResourceRoot.</li>
  * <li>Post - Resources defined by the &lt;PostResource&gt; element in the web
- *            application&apos;s context.xml. Resources will be searched in the
- *            order they were specified.</li>
+ *            application's context.xml. Resources will be searched in the order
+ *            they were specified.</li>
  * </ol>
  * The following conventions should be noted:
  * <ul>
@@ -378,14 +378,15 @@ public interface WebResourceRoot extends Lifecycle {
      *       logged and then closed.</li>
      * </ul>
      *
-     * @param trackLockedFiles @true to enable it, @false to disable it
+     * @param trackLockedFiles {@code true} to enable it, {@code false} to
+     *                         disable it
      */
     void setTrackLockedFiles(boolean trackLockedFiles);
 
     /**
      * Has the track locked files feature been enabled?
      *
-     * @return @true if it has been enabled, otherwise @false
+     * @return {@code true} if it has been enabled, otherwise {@code false}
      */
     boolean getTrackLockedFiles();
 

==================================================
ContainerBase.java
index 4af54b4d9f..479f3d27f7 100644
--- a/java/org/apache/catalina/connector/Connector.java
+++ b/java/org/apache/catalina/connector/Connector.java
@@ -829,7 +829,7 @@ public class Connector extends LifecycleMBeanBase  {
      * Enable the use of IP-based virtual hosting.
      *
      * @param useIPVHosts <code>true</code> if Hosts are identified by IP,
-     *                    <code>false/code> if Hosts are identified by name.
+     *                    <code>false</code> if Hosts are identified by name.
      */
     public void setUseIPVHosts(boolean useIPVHosts) {
         this.useIPVHosts = useIPVHosts;

==================================================
CorsFilter.java
index 7a6283b6cb..29948e35a2 100644
--- a/java/org/apache/catalina/core/ContainerBase.java
+++ b/java/org/apache/catalina/core/ContainerBase.java
@@ -84,6 +84,7 @@ import org.apache.tomcat.util.res.StringManager;
  * following <code>ContainerEvent</code> events to listeners who register
  * themselves with <code>addContainerListener()</code>:
  * <table border=1>
+ *   <caption>ContainerEvents fired by this implementation</caption>
  *   <tr>
  *     <th>Type</th>
  *     <th>Data</th>

==================================================
ExpiresFilter.java
index baf1bba723..b1a99f39a2 100644
--- a/java/org/apache/catalina/filters/CorsFilter.java
+++ b/java/org/apache/catalina/filters/CorsFilter.java
@@ -51,6 +51,7 @@ import org.apache.tomcat.util.res.StringManager;
  * <p>
  * By default, it also sets following request attributes, that help to
  * determine the nature of the request downstream.
+ * </p>
  * <ul>
  * <li><b>cors.isCorsRequest:</b> Flag to determine if the request is a CORS
  * request. Set to <code>true</code> if a CORS request; <code>false</code>
@@ -70,7 +71,6 @@ import org.apache.tomcat.util.res.StringManager;
  * <li><b>cors.request.headers:</b> Request headers sent as
  * 'Access-Control-Request-Headers' header, for pre-flight request.</li>
  * </ul>
- * </p>
  *
  * @see <a href="http://www.w3.org/TR/cors/">CORS specification</a>
  *

==================================================
RemoteIpFilter.java
index 4a06a130f6..5d06614560 100644
--- a/java/org/apache/catalina/filters/ExpiresFilter.java
+++ b/java/org/apache/catalina/filters/ExpiresFilter.java
@@ -81,7 +81,7 @@ import org.apache.juli.logging.LogFactory;
  * <tt>Expires</tt>&#x27; and &#x27; <tt>Cache-Control: max-age=</tt>&#x27;
  * headers to images, css and javascript</h2>
  *
- * <code><pre>
+ * <code>
  * &lt;web-app ...&gt;
  *    ...
  *    &lt;filter&gt;
@@ -108,7 +108,7 @@ import org.apache.juli.logging.LogFactory;
  *    &lt;/filter-mapping&gt;
  *    ...
  * &lt;/web-app&gt;
- * </pre></code>
+ * </code>
  *
  * <h2>Configuration Parameters</h2>
  *
@@ -147,7 +147,7 @@ import org.apache.juli.logging.LogFactory;
  * <strong>Example:</strong>
  * </p>
  *
- * <code><pre>
+ * <code>
  * &lt;init-param&gt;
  *    &lt;param-name&gt;ExpiresByType text/html&lt;/param-name&gt;&lt;param-value&gt;access plus 1 month 15   days 2 hours&lt;/param-value&gt;
  * &lt;/init-param&gt;
@@ -156,7 +156,7 @@ import org.apache.juli.logging.LogFactory;
  *    &lt;!-- 2592000 seconds = 30 days --&gt;
  *    &lt;param-name&gt;ExpiresByType image/gif&lt;/param-name&gt;&lt;param-value&gt;A2592000&lt;/param-value&gt;
  * &lt;/init-param&gt;
- * </pre></code>
+ * </code>
  * <p>
  * Note that this directive only has effect if <tt>ExpiresActive On</tt> has
  * been specified. It overrides, for the specified MIME type <i>only</i>, any
@@ -185,11 +185,11 @@ import org.apache.juli.logging.LogFactory;
  * Configuration sample :
  * </p>
  *
- * <code><pre>
+ * <code>
  * &lt;init-param&gt;
  *    &lt;param-name&gt;ExpiresExcludedResponseStatusCodes&lt;/param-name&gt;&lt;param-value&gt;302, 500, 503&lt;/param-value&gt;
  * &lt;/init-param&gt;
- * </pre></code>
+ * </code>
  *
  * <h3>ExpiresDefault</h3>
  * <p>
@@ -205,7 +205,7 @@ import org.apache.juli.logging.LogFactory;
  * defined in a more readable syntax of the form:
  * </p>
  *
- * <code><pre>
+ * <code>
  * &lt;init-param&gt;
  *    &lt;param-name&gt;ExpiresDefault&lt;/param-name&gt;&lt;param-value&gt;&lt;base&gt; [plus] {&lt;num&gt;   &lt;type&gt;}*&lt;/param-value&gt;
  * &lt;/init-param&gt;
@@ -213,19 +213,20 @@ import org.apache.juli.logging.LogFactory;
  * &lt;init-param&gt;
  *    &lt;param-name&gt;ExpiresByType type/encoding&lt;/param-name&gt;&lt;param-value&gt;&lt;base&gt; [plus]   {&lt;num&gt; &lt;type&gt;}*&lt;/param-value&gt;
  * &lt;/init-param&gt;
- * </pre></code>
+ * </code>
  * <p>
  * where <tt>&lt;base&gt;</tt> is one of:
+ * </p>
  * <ul>
  * <li><tt>access</tt></li>
  * <li><tt>now</tt> (equivalent to &#x27;<tt>access</tt>&#x27;)</li>
  * <li><tt>modification</tt></li>
  * </ul>
- * </p>
  * <p>
  * The <tt>plus</tt> keyword is optional. <tt>&lt;num&gt;</tt> should be an
  * integer value (acceptable to <tt>Integer.parseInt()</tt>), and
  * <tt>&lt;type&gt;</tt> is one of:
+ * </p>
  * <ul>
  * <li><tt>years</tt></li>
  * <li><tt>months</tt></li>
@@ -235,11 +236,12 @@ import org.apache.juli.logging.LogFactory;
  * <li><tt>minutes</tt></li>
  * <li><tt>seconds</tt></li>
  * </ul>
+ * <p>
  * For example, any of the following directives can be used to make documents
  * expire 1 month after being accessed, by default:
  * </p>
  *
- * <code><pre>
+ * <code>
  * &lt;init-param&gt;
  *    &lt;param-name&gt;ExpiresDefault&lt;/param-name&gt;&lt;param-value&gt;access plus 1 month&lt;/param-value&gt;
  * &lt;/init-param&gt;
@@ -251,13 +253,13 @@ import org.apache.juli.logging.LogFactory;
  * &lt;init-param&gt;
  *    &lt;param-name&gt;ExpiresDefault&lt;/param-name&gt;&lt;param-value&gt;access plus 30 days&lt;/param-value&gt;
  * &lt;/init-param&gt;
- * </pre></code>
+ * </code>
  * <p>
  * The expiry time can be fine-tuned by adding several &#x27;
  * <tt>&lt;num&gt; &lt;type&gt;</tt>&#x27; clauses:
  * </p>
  *
- * <code><pre>
+ * <code>
  * &lt;init-param&gt;
  *    &lt;param-name&gt;ExpiresByType text/html&lt;/param-name&gt;&lt;param-value&gt;access plus 1 month 15   days 2 hours&lt;/param-value&gt;
  * &lt;/init-param&gt;
@@ -265,7 +267,7 @@ import org.apache.juli.logging.LogFactory;
  * &lt;init-param&gt;
  *    &lt;param-name&gt;ExpiresByType image/gif&lt;/param-name&gt;&lt;param-value&gt;modification plus 5 hours 3   minutes&lt;/param-value&gt;
  * &lt;/init-param&gt;
- * </pre></code>
+ * </code>
  * <p>
  * Note that if you use a modification date based setting, the <tt>Expires</tt>
  * header will <strong>not</strong> be added to content that does not come from
@@ -275,6 +277,7 @@ import org.apache.juli.logging.LogFactory;
  * <h1>Expiration headers generation eligibility</h1>
  * <p>
  * A response is eligible to be enriched by <tt>ExpiresFilter</tt> if :
+ * </p>
  * <ol>
  * <li>no expiration header is defined (<tt>Expires</tt> header or the
  * <tt>max-age</tt> directive of the <tt>Cache-Control</tt> header),</li>
@@ -284,18 +287,18 @@ import org.apache.juli.logging.LogFactory;
  * defined the in <tt>ExpiresByType</tt> directives or the
  * <tt>ExpiresDefault</tt> directive is defined.</li>
  * </ol>
- * </p>
  * <p>
  * Note :
+ * </p>
  * <ul>
  * <li>If <tt>Cache-Control</tt> header contains other directives than
  * <tt>max-age</tt>, they are concatenated with the <tt>max-age</tt> directive
  * that is added by the <tt>ExpiresFilter</tt>.</li>
  * </ul>
- * </p>
  * <h1>Expiration configuration selection</h1>
  * <p>
  * The expiration configuration if elected according to the following algorithm:
+ * </p>
  * <ol>
  * <li><tt>ExpiresByType</tt> matching the exact content-type returned by
  * <tt>HttpServletResponse.getContentType()</tt> possibly including the charset
@@ -309,7 +312,6 @@ import org.apache.juli.logging.LogFactory;
  * &#x27;),</li>
  * <li><tt>ExpiresDefault</tt></li>
  * </ol>
- * </p>
  * <h1>Implementation Details</h1><h2>When to write the expiration headers ?</h2>
  * <p>
  * The <tt>ExpiresFilter</tt> traps the &#x27;on before write response
@@ -349,6 +351,7 @@ import org.apache.juli.logging.LogFactory;
  * </p>
  * <p>
  * Key methods to override for extension are :
+ * </p>
  * <ul>
  * <li>
  * {@link #isEligibleToExpirationHeaderGeneration(HttpServletRequest, XHttpServletResponse)}
@@ -356,7 +359,6 @@ import org.apache.juli.logging.LogFactory;
  * <li>
  * {@link #getExpirationDate(XHttpServletResponse)}</li>
  * </ul>
- * </p>
  * <h1>Troubleshooting</h1>
  * <p>
  * To troubleshoot, enable logging on the
@@ -366,14 +368,14 @@ import org.apache.juli.logging.LogFactory;
  * Extract of logging.properties
  * </p>
  *
- * <code><pre>
+ * <code>
  * org.apache.catalina.filters.ExpiresFilter.level = FINE
- * </pre></code>
+ * </code>
  * <p>
  * Sample of initialization log message :
  * </p>
  *
- * <code><pre>
+ * <code>
  * Mar 26, 2010 2:01:41 PM org.apache.catalina.filters.ExpiresFilter init
  * FINE: Filter initialized with configuration ExpiresFilter[
  *    excludedResponseStatusCode=[304],
@@ -382,26 +384,25 @@ import org.apache.juli.logging.LogFactory;
  *       image=ExpiresConfiguration[startingPoint=ACCESS_TIME, duration=[10 MINUTE]],
  *       text/css=ExpiresConfiguration[startingPoint=ACCESS_TIME, duration=[10 MINUTE]],
  *       application/javascript=ExpiresConfiguration[startingPoint=ACCESS_TIME, duration=[10 MINUTE]]}]
- * </pre></code>
+ * </code>
  * <p>
  * Sample of per-request log message where <tt>ExpiresFilter</tt> adds an
  * expiration date
  * </p>
  *
- * <code><pre>
+ * <code>
  * Mar 26, 2010 2:09:47 PM org.apache.catalina.filters.ExpiresFilter onBeforeWriteResponseBody
  * FINE: Request "/tomcat.gif" with response status "200" content-type "image/gif", set expiration date 3/26/10 2:19 PM
- * </pre></code>
+ * </code>
  * <p>
  * Sample of per-request log message where <tt>ExpiresFilter</tt> does not add
  * an expiration date
  * </p>
  *
- * <code><pre>
+ * <code>
  * Mar 26, 2010 2:10:27 PM org.apache.catalina.filters.ExpiresFilter onBeforeWriteResponseBody
  * FINE: Request "/docs/config/manager.html" with response status "200" content-type "text/html", no expiration configured
- * </pre></code>
- *
+ * </code>
  */
 public class ExpiresFilter extends FilterBase {
 

==================================================
WarWatcher.java
index 2780345201..db637891fc 100644
--- a/java/org/apache/catalina/filters/RemoteIpFilter.java
+++ b/java/org/apache/catalina/filters/RemoteIpFilter.java
@@ -65,6 +65,7 @@ import org.apache.juli.logging.LogFactory;
  * </p>
  * <p>
  * If the incoming <code>request.getRemoteAddr()</code> matches the servlet filter's list of internal proxies :
+ * </p>
  * <ul>
  * <li>Loop on the comma delimited list of IPs and hostnames passed by the preceding load balancer or proxy in the given request's Http
  * header named <code>$remoteIpHeader</code> (default value <code>x-forwarded-for</code>). Values are processed in right-to-left order.</li>
@@ -80,10 +81,8 @@ import org.apache.juli.logging.LogFactory;
  * <code>request.scheme = https</code> and <code>request.serverPort = 443</code>. Note that 443 can be overwritten with the
  * <code>$httpsServerPort</code> configuration parameter.</li>
  * </ul>
- * </p>
- * <p>
- * <strong>Configuration parameters:</strong>
  * <table border="1">
+ * <caption>Configuration parameters</caption>
  * <tr>
  * <th>XForwardedFilter property</th>
  * <th>Description</th>
@@ -115,7 +114,6 @@ import org.apache.juli.logging.LogFactory;
  *     <br>
  * By default, 10/8, 192.168/16, 169.254/16, 127/8 and 172.16/12 are allowed.</td>
  * </tr>
- * </tr>
  * <tr>
  * <td>proxiesHeader</td>
  * <td>Name of the http header created by this servlet filter to hold the list of proxies that have been processed in the incoming
@@ -163,7 +161,6 @@ import org.apache.juli.logging.LogFactory;
  * <td>443</td>
  * </tr>
  * </table>
- * </p>
  * <p>
  * <p>
  * <strong>Regular expression vs. IP address blocks:</strong> <code>mod_remoteip</code> allows to use address blocks (e.g.
@@ -172,14 +169,14 @@ import org.apache.juli.logging.LogFactory;
  * href="http://apr.apache.org/docs/apr/1.3/group__apr__network__io.html#gb74d21b8898b7c40bf7fd07ad3eb993d">apr_ipsubnet_test</a>, we rely on
  * regular expressions.
  * </p>
- * <hr/>
+ * <hr>
  * <p>
  * <strong>Sample with internal proxies</strong>
  * </p>
  * <p>
  * XForwardedFilter configuration:
  * </p>
- * <code><pre>
+ * <code>
  * &lt;filter&gt;
  *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;
  *    &lt;filter-class&gt;org.apache.catalina.filters.RemoteIpFilter&lt;/filter-class&gt;
@@ -205,10 +202,9 @@ import org.apache.juli.logging.LogFactory;
  *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;
  *    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
  *    &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;
- * &lt;/filter-mapping&gt;</pre></code>
- * <p>
- * Request values:
+ * &lt;/filter-mapping&gt;</code>
  * <table border="1">
+ * <caption>Request Values</caption>
  * <tr>
  * <th>property</th>
  * <th>Value Before RemoteIpFilter</th>
@@ -252,15 +248,14 @@ import org.apache.juli.logging.LogFactory;
  * </table>
  * Note : <code>x-forwarded-by</code> header is null because only internal proxies as been traversed by the request.
  * <code>x-forwarded-by</code> is null because all the proxies are trusted or internal.
- * </p>
- * <hr/>
+ * <hr>
  * <p>
  * <strong>Sample with trusted proxies</strong>
  * </p>
  * <p>
  * RemoteIpFilter configuration:
  * </p>
- * <code><pre>
+ * <code>
  * &lt;filter&gt;
  *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;
  *    &lt;filter-class&gt;org.apache.catalina.filters.RemoteIpFilter&lt;/filter-class&gt;
@@ -286,10 +281,9 @@ import org.apache.juli.logging.LogFactory;
  *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;
  *    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
  *    &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;
- * &lt;/filter-mapping&gt;</pre></code>
- * <p>
- * Request values:
+ * &lt;/filter-mapping&gt;</code>
  * <table border="1">
+ * <caption>Request Values</caption>
  * <tr>
  * <th>property</th>
  * <th>Value Before RemoteIpFilter</th>
@@ -311,17 +305,18 @@ import org.apache.juli.logging.LogFactory;
  * <td>proxy1, proxy2</td>
  * </tr>
  * </table>
+ * <p>
  * Note : <code>proxy1</code> and <code>proxy2</code> are both trusted proxies that come in <code>x-forwarded-for</code> header, they both
  * are migrated in <code>x-forwarded-by</code> header. <code>x-forwarded-by</code> is null because all the proxies are trusted or internal.
  * </p>
- * <hr/>
+ * <hr>
  * <p>
  * <strong>Sample with internal and trusted proxies</strong>
  * </p>
  * <p>
  * RemoteIpFilter configuration:
  * </p>
- * <code><pre>
+ * <code>
  * &lt;filter&gt;
  *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;
  *    &lt;filter-class&gt;org.apache.catalina.filters.RemoteIpFilter&lt;/filter-class&gt;
@@ -347,10 +342,9 @@ import org.apache.juli.logging.LogFactory;
  *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;
  *    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
  *    &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;
- * &lt;/filter-mapping&gt;</pre></code>
- * <p>
- * Request values:
+ * &lt;/filter-mapping&gt;</code>
  * <table border="1">
+ * <caption>Request Values</caption>
  * <tr>
  * <th>property</th>
  * <th>Value Before RemoteIpFilter</th>
@@ -372,18 +366,19 @@ import org.apache.juli.logging.LogFactory;
  * <td>proxy1, proxy2</td>
  * </tr>
  * </table>
+ * <p>
  * Note : <code>proxy1</code> and <code>proxy2</code> are both trusted proxies that come in <code>x-forwarded-for</code> header, they both
  * are migrated in <code>x-forwarded-by</code> header. As <code>192.168.0.10</code> is an internal proxy, it does not appear in
  * <code>x-forwarded-by</code>. <code>x-forwarded-by</code> is null because all the proxies are trusted or internal.
  * </p>
- * <hr/>
+ * <hr>
  * <p>
  * <strong>Sample with an untrusted proxy</strong>
  * </p>
  * <p>
  * RemoteIpFilter configuration:
  * </p>
- * <code><pre>
+ * <code>
  * &lt;filter&gt;
  *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;
  *    &lt;filter-class&gt;org.apache.catalina.filters.RemoteIpFilter&lt;/filter-class&gt;
@@ -409,10 +404,9 @@ import org.apache.juli.logging.LogFactory;
  *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;
  *    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
  *    &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;
- * &lt;/filter-mapping&gt;</pre></code>
- * <p>
- * Request values:
+ * &lt;/filter-mapping&gt;</code>
  * <table border="1">
+ * <caption>Request Values</caption>
  * <tr>
  * <th>property</th>
  * <th>Value Before RemoteIpFilter</th>
@@ -434,12 +428,13 @@ import org.apache.juli.logging.LogFactory;
  * <td>proxy1</td>
  * </tr>
  * </table>
+ * <p>
  * Note : <code>x-forwarded-by</code> holds the trusted proxy <code>proxy1</code>. <code>x-forwarded-by</code> holds
  * <code>140.211.11.130</code> because <code>untrusted-proxy</code> is not trusted and thus, we can not trust that
  * <code>untrusted-proxy</code> is the actual remote ip. <code>request.remoteAddr</code> is <code>untrusted-proxy</code> that is an IP
  * verified by <code>proxy1</code>.
  * </p>
- * <hr/>
+ * <hr>
  */
 public class RemoteIpFilter implements Filter {
     public static class XForwardedRequest extends HttpServletRequestWrapper {

==================================================
SimpleTcpCluster.java
index d06f421e36..397e776c11 100644
--- a/java/org/apache/catalina/ha/deploy/WarWatcher.java
+++ b/java/org/apache/catalina/ha/deploy/WarWatcher.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.catalina.ha.deploy;
 
 import java.io.File;
@@ -26,16 +25,13 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
 /**
- * <p>
  * The <b>WarWatcher </b> watches the deployDir for changes made to the
- * directory (adding new WAR files->deploy or remove WAR files->undeploy) And
- * notifies a listener of the changes made
- * </p>
+ * directory (adding new WAR files-&gt;deploy or remove WAR files-&gt;undeploy)
+ * and notifies a listener of the changes made.
  *
  * @author Peter Rossbach
  * @version 1.1
  */
-
 public class WarWatcher {
 
     /*--Static Variables----------------------------------------*/

==================================================
