c5f54bd8369240bc656a2922d9f115c3affc8922
==================================================
Improve processing of errors that are wrapped into InvocationTargetException.
==================================================
Konstantin Kolinko
==================================================
Sun Nov 13 23:39:25 2011 +0000
==================================================
TagHandlerPool.java
Improve processing of errors that are wrapped into InvocationTargetException.
Rethrow errors that must be rethrown.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1201546 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JspServletWrapper.java
index ab532c5597..5d2c9f9f74 100644
--- a/java/org/apache/jasper/runtime/TagHandlerPool.java
+++ b/java/org/apache/jasper/runtime/TagHandlerPool.java
@@ -22,6 +22,7 @@ import javax.servlet.jsp.JspException;
 import javax.servlet.jsp.tagext.Tag;
 
 import org.apache.jasper.Constants;
+import org.apache.jasper.util.ExceptionUtils;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.InstanceManager;
@@ -121,7 +122,9 @@ public class TagHandlerPool {
                 return instance;
             }
         } catch (Exception e) {
-            throw new JspException(e.getMessage(), e);
+            Throwable t = ExceptionUtils.unwrapInvocationTargetException(e);
+            ExceptionUtils.handleThrowable(t);
+            throw new JspException(e.getMessage(), t);
         }
     }
 
@@ -145,8 +148,10 @@ public class TagHandlerPool {
         try {
             instanceManager.destroyInstance(handler);
         } catch (Exception e) {
+            Throwable t = ExceptionUtils.unwrapInvocationTargetException(e);
+            ExceptionUtils.handleThrowable(t);
             log.warn("Error processing preDestroy on tag instance of " +
-                    handler.getClass().getName(), e);
+                    handler.getClass().getName(), t);
         }
     }
 
@@ -156,12 +161,15 @@ public class TagHandlerPool {
      */
     public synchronized void release() {
         for (int i = current; i >= 0; i--) {
-            handlers[i].release();
+            Tag handler = handlers[i];
+            handler.release();
             try {
-                instanceManager.destroyInstance(handlers[i]);
+                instanceManager.destroyInstance(handler);
             } catch (Exception e) {
-                log.warn("Error processing preDestroy on tag instance of " +
-                        handlers[i].getClass().getName(), e);
+                Throwable t = ExceptionUtils.unwrapInvocationTargetException(e);
+                ExceptionUtils.handleThrowable(t);
+                log.warn("Error processing preDestroy on tag instance of "
+                        + handler.getClass().getName(), t);
             }
         }
     }

==================================================
Set.java
index 679a7cc396..44a450656f 100644
--- a/java/org/apache/jasper/servlet/JspServletWrapper.java
+++ b/java/org/apache/jasper/servlet/JspServletWrapper.java
@@ -170,12 +170,11 @@ public class JspServletWrapper {
                     try {
                         InstanceManager instanceManager = InstanceManagerFactory.getInstanceManager(config);
                         servlet = (Servlet) instanceManager.newInstance(ctxt.getFQCN(), ctxt.getJspLoader());
-                    } catch (IllegalAccessException e) {
-                        throw new JasperException(e);
-                    } catch (InstantiationException e) {
-                        throw new JasperException(e);
                     } catch (Exception e) {
-                        throw new JasperException(e);
+                        Throwable t = ExceptionUtils
+                                .unwrapInvocationTargetException(e);
+                        ExceptionUtils.handleThrowable(t);
+                        throw new JasperException(t);
                     }
 
                     servlet.init(config);
@@ -481,9 +480,11 @@ public class JspServletWrapper {
             try {
                 instanceManager.destroyInstance(theServlet);
             } catch (Exception e) {
+                Throwable t = ExceptionUtils.unwrapInvocationTargetException(e);
+                ExceptionUtils.handleThrowable(t);
                 // Log any exception, since it can't be passed along
                 log.error(Localizer.getMessage("jsp.error.file.not.found",
-                        e.getMessage()), e);
+                        e.getMessage()), t);
             }
         }
     }

==================================================
