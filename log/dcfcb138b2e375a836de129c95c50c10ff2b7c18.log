dcfcb138b2e375a836de129c95c50c10ff2b7c18
==================================================
When timeouts occur process them as error events rather than closing the socket immediately so that the correct error handling (async listener, read/write listener) can be called.
==================================================
Mark Thomas
==================================================
Thu Jun 2 12:14:20 2016 +0000
==================================================
AbstractProcessor.java
When timeouts occur process them as error events rather than closing the socket immediately so that the correct error handling (async listener, read/write listener) can be called.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1746551 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AprEndpoint.java
index c0c715bd56..42bd26e1ad 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -195,6 +195,25 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
             }
         } else if (status == SocketEvent.OPEN_READ && request.getReadListener() != null) {
             dispatchNonBlockingRead();
+        } else if (status == SocketEvent.ERROR) {
+            // An I/O error occurred on a non-container thread. This includes:
+            // - read/write timeouts fired by the Poller (NIO & APR)
+            // - completion handler failures in NIO2
+
+            if (request.getAttribute(RequestDispatcher.ERROR_EXCEPTION) == null) {
+                // Because the error did not occur on a container thread the
+                // request's error attribute has not been set. If an exception
+                // is available from the socketWrapper, use it to set the
+                // request's error attribute here so it is visible to the error
+                // handling.
+                request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, socketWrapper.getError());
+            }
+
+            if (request.getReadListener() != null || response.getWriteListener() != null) {
+                // The error occurred during non-blocking I/O. Set the correct
+                // state else the error handling will trigger an ISE.
+                asyncStateMachine.asyncOperation();
+            }
         }
 
         RequestInfo rp = request.getRequestProcessor();

==================================================
NioEndpoint.java
index 907b112a9f..c571543a49 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -1462,10 +1462,9 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
                     log.debug(sm.getString("endpoint.debug.socketTimeout",
                             Long.valueOf(socket)));
                 }
-                removeFromPoller(socket);
-                destroySocket(socket);
-                addList.remove(socket);
-                closeList.remove(socket);
+                SocketWrapperBase<Long> socketWrapper = connections.get(Long.valueOf(socket));
+                socketWrapper.setError(new SocketTimeoutException());
+                processSocket(socketWrapper, SocketEvent.ERROR, true);
                 socket = timeouts.check(date);
             }
 

==================================================
