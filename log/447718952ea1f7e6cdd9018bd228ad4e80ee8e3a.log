447718952ea1f7e6cdd9018bd228ad4e80ee8e3a
==================================================
Clean-up - autoboxing
==================================================
Mark Emlyn
==================================================
Wed Sep 12 13:21:13 2012 +0000
==================================================
AprSocketContext.java
Clean-up - autoboxing

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1383926 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SpdyConnection.java
index f5b2f36169..22fa3c6b83 100644
--- a/java/org/apache/tomcat/jni/socket/AprSocketContext.java
+++ b/java/org/apache/tomcat/jni/socket/AprSocketContext.java
@@ -1023,7 +1023,7 @@ public class AprSocketContext {
                             boolean blocking = false;
 
                             synchronized (channels) {
-                                ch = channels.get(sock);
+                                ch = channels.get(Long.valueOf(sock));
                                 if (ch != null) {
                                     blocking = ch.isBlocking();
                                 } else {
@@ -1255,7 +1255,7 @@ public class AprSocketContext {
                 if (ch.isClosed()) {
                     synchronized (channels) {
                         ch.poller = null;
-                        channels.remove(ch.socket);
+                        channels.remove(Long.valueOf(ch.socket));
                     }
                     keepAliveCount.decrementAndGet();
                     ch.reset();
@@ -1289,7 +1289,7 @@ public class AprSocketContext {
                     failed = true;
                 } else {
                     polledCount.incrementAndGet();
-                    channels.put(up.socket, up);
+                    channels.put(Long.valueOf(up.socket), up);
                     up.setStatus(AprSocket.POLL);
                 }
             }

==================================================
DisposableConnectionFacade.java
index c97f1f48c3..7f1e2bee10 100644
--- a/java/org/apache/tomcat/spdy/SpdyConnection.java
+++ b/java/org/apache/tomcat/spdy/SpdyConnection.java
@@ -246,7 +246,8 @@ public abstract class SpdyConnection { // implements Runnable {
                         out.streamId = outStreamId;
                         outStreamId += 2;
                         synchronized(channels) {
-                            channels.put(out.streamId, out.stream);
+                            channels.put(Integer.valueOf(out.streamId),
+                                    out.stream);
                         }
                     }
 
@@ -286,7 +287,7 @@ public abstract class SpdyConnection { // implements Runnable {
                             out.stream.finSent = true;
                         }
                         if (out.stream.finRcvd && out.stream.finSent) {
-                            channels.remove(out.streamId);
+                            channels.remove(Integer.valueOf(out.streamId));
                         }
                     }
                 }
@@ -525,7 +526,7 @@ public abstract class SpdyConnection { // implements Runnable {
 
         List<Integer> ch = new ArrayList<>(channels.keySet());
         for (Integer i: ch) {
-            if (i > last) {
+            if (i.intValue() > last) {
                 SpdyStream stream = channels.remove(i);
                 if (stream != null) {
                     stream.onReset();
@@ -571,11 +572,12 @@ public abstract class SpdyConnection { // implements Runnable {
                             + inFrame.streamId
                             + " "
                             + ((errCode < RST_ERRORS.length) ? RST_ERRORS[errCode]
-                                    : errCode));
+                                    : Integer.valueOf(errCode)));
                 }
                 SpdyStream sch;
                 synchronized(channels) {
-                        sch = channels.remove(inFrame.streamId);
+                        sch = channels.remove(
+                                Integer.valueOf(inFrame.streamId));
                 }
                 // if RST stream is for a closed channel - we can ignore.
                 if (sch != null) {
@@ -590,7 +592,7 @@ public abstract class SpdyConnection { // implements Runnable {
                 SpdyStream ch = getSpdyContext().getStream(this);
 
                 synchronized (channels) {
-                    channels.put(inFrame.streamId, ch);
+                    channels.put(Integer.valueOf(inFrame.streamId), ch);
                 }
 
                 try {
@@ -607,7 +609,7 @@ public abstract class SpdyConnection { // implements Runnable {
             case TYPE_SYN_REPLY: {
                 SpdyStream sch;
                 synchronized(channels) {
-                    sch = channels.get(inFrame.streamId);
+                    sch = channels.get(Integer.valueOf(inFrame.streamId));
                 }
                 if (sch == null) {
                     abort("Missing channel");
@@ -640,7 +642,7 @@ public abstract class SpdyConnection { // implements Runnable {
             // Data frame
             SpdyStream sch;
             synchronized (channels) {
-                sch = channels.get(inFrame.streamId);
+                sch = channels.get(Integer.valueOf(inFrame.streamId));
             }
             if (sch == null) {
                 abort("Missing channel");
@@ -649,7 +651,7 @@ public abstract class SpdyConnection { // implements Runnable {
             sch.onDataFrame(inFrame);
             synchronized (channels) {
                 if (sch.finRcvd && sch.finSent) {
-                    channels.remove(inFrame.streamId);
+                    channels.remove(Integer.valueOf(inFrame.streamId));
                 }
             }
             inFrame = null;

==================================================
