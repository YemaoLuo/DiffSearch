a25c279289ee927c55c15265c2c09f2d674e2e76
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56620
==================================================
Mark Emlyn
==================================================
Mon Jun 16 13:55:50 2014 +0000
==================================================
Http11AprProcessor.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56620
Avoid bogus access log entries when pausing the NIO HTTP connector.
Ensure that any requests partially read before the connector is paused are logged in the access log with the correct start time.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1602865 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11Nio2Processor.java
index 8f852c7600..08a7f27cac 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -175,13 +175,6 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
         // (long keepalive), so that the processor should be recycled
         // and the method should return true
         openSocket = true;
-        if (endpoint.isPaused()) {
-            // 503 - Service unavailable
-            response.setStatus(503);
-            setErrorState(ErrorState.CLOSE_CLEAN, null);
-            getAdapter().log(request, response, 0);
-            return false;
-        }
         return true;
     }
 

==================================================
Http11NioProcessor.java
index 5ecd17902a..d9ea12fc4c 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Processor.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Processor.java
@@ -230,18 +230,22 @@ public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
                 socketWrapper.setTimeout(endpoint.getKeepAliveTimeout());
             }
         } else {
-            // Started to read request line. Need to keep processor
-            // associated with socket
-            readComplete = false;
-            // Make sure poller uses soTimeout from here onwards
-            socketWrapper.setTimeout(endpoint.getSoTimeout());
-        }
-        if (endpoint.isPaused()) {
-            // 503 - Service unavailable
-            response.setStatus(503);
-            setErrorState(ErrorState.CLOSE_CLEAN, null);
-            getAdapter().log(request, response, 0);
-            return false;
+            // Started to read request line.
+            if (request.getStartTime() < 0) {
+                request.setStartTime(System.currentTimeMillis());
+            }
+            if (endpoint.isPaused()) {
+                // Partially processed the request so need to respond
+                response.setStatus(503);
+                setErrorState(ErrorState.CLOSE_CLEAN, null);
+                getAdapter().log(request, response, 0);
+                return false;
+            } else {
+                // Need to keep processor associated with socket
+                readComplete = false;
+                // Make sure poller uses soTimeout from here onwards
+                socketWrapper.setTimeout(endpoint.getSoTimeout());
+            }
         }
         return true;
     }

==================================================
