01fec8b7a4314df705f41a6fae405a30a3ddf48e
==================================================
Fix handling expressions of the form:
==================================================
Mark Emlyn
==================================================
Thu Jul 18 13:57:17 2013 +0000
==================================================
AstFunction.java
Fix handling expressions of the form:
v = (x->y->x-y); v(2)(1)

There is still some further clean-up that can be done.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1504475 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AstLambdaExpression.java
index 09481ab334..c3434eabae 100644
--- a/java/org/apache/el/parser/AstFunction.java
+++ b/java/org/apache/el/parser/AstFunction.java
@@ -95,15 +95,19 @@ public final class AstFunction extends SimpleNode {
             Object obj =
                     ctx.getELResolver().getValue(ctx, null, this.localName);
             if (obj instanceof LambdaExpression) {
-                LambdaExpression le = (LambdaExpression) obj;
                 // Build arguments
-                // TODO handle multiple sets of arguments
-                int numArgs = this.jjtGetChild(0).jjtGetNumChildren();
-                Object[] args = new Object[numArgs];
-                for (int i = 0; i < numArgs; i++) {
-                    args[i] = jjtGetChild(0).jjtGetChild(i).getValue(ctx);
+                int i = 0;
+                while (obj instanceof LambdaExpression && i < this.jjtGetNumChildren()) {
+                    Node parameters = jjtGetChild(i);
+                    int numArgs = parameters.jjtGetNumChildren();
+                    Object[] args = new Object[numArgs];
+                    for (int j = 0; j < numArgs; j++) {
+                        args[j] = parameters.jjtGetChild(j).getValue(ctx);
+                    }
+                    obj = ((LambdaExpression) obj).invoke(args);
+                    i++;
                 }
-                return le.invoke(ctx, args);
+                return obj;
             }
         }
 

==================================================
TestAstLambdaExpression.java
index b4536d664a..4f7353118b 100644
--- a/java/org/apache/el/parser/AstLambdaExpression.java
+++ b/java/org/apache/el/parser/AstLambdaExpression.java
@@ -76,7 +76,7 @@ public class AstLambdaExpression extends SimpleNode {
         le.setELContext(ctx);
 
         if (jjtGetNumChildren() == 2) {
-            if (formalParameters.isEmpty()) {
+            if (formalParameters.isEmpty() && !(parent instanceof AstLambdaExpression)) {
                 // No formal parameters or method parameters so invoke the
                 // expression. If this is a nested expression inform the outer
                 // expression that an invocation has occurred so the correct set
@@ -130,7 +130,7 @@ public class AstLambdaExpression extends SimpleNode {
 
     public void incMethodParameterIndex() {
         Node parent = jjtGetParent();
-        if (parent instanceof AstLambdaExpression) {
+        if (parent instanceof LambdaExpression) {
             // Method parameter index is maintained by outermost lambda
             // expressions as that is where the parameters are
             ((AstLambdaExpression) parent).incMethodParameterIndex();

==================================================
