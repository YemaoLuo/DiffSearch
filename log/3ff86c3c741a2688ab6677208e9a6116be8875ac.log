3ff86c3c741a2688ab6677208e9a6116be8875ac
==================================================
WebSocket 1.0 implementation part 5 of many
==================================================
Mark Emlyn
==================================================
Thu Nov 29 19:28:44 2012 +0000
==================================================
PojoMethodMapping.java
WebSocket 1.0 implementation part 5 of many
Extract the POJO method mapping. Cache it and start to think about caching the path parameter mapping too.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1415330 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ServerContainerImpl.java
new file mode 100644
index 0000000000..ca113b696d
--- /dev/null
+++ b/java/org/apache/tomcat/websocket/PojoMethodMapping.java
@@ -0,0 +1,79 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.websocket;
+
+import java.lang.reflect.Method;
+
+import javax.websocket.WebSocketClose;
+import javax.websocket.WebSocketError;
+import javax.websocket.WebSocketOpen;
+
+public class PojoMethodMapping {
+
+    private final Method onOpen;
+    private final Method onClose;
+    private final Method onError;
+
+    public PojoMethodMapping(Class<?> clazzPojo, String path) {
+        Method open = null;
+        Method close = null;
+        Method error = null;
+        Method[] methods = clazzPojo.getMethods();
+        for (int i = 0; i < methods.length; i++) {
+            if (open == null &&
+                    methods[i].getAnnotation(WebSocketOpen.class) != null) {
+                open = methods[i];
+            } else if (close == null &&
+                    methods[i].getAnnotation(WebSocketClose.class) != null) {
+                close = methods[i];
+            } else if (error == null &&
+                    methods[i].getAnnotation(WebSocketError.class) != null) {
+                error = methods[i];
+            }
+        }
+        this.onOpen = open;
+        this.onClose = close;
+        this.onError = error;
+    }
+
+    public Method getOnOpen() {
+        return onOpen;
+    }
+
+    public Object[] getOnOpenArgs(String path) {
+        // TODO Auto-generated method stub
+        return null;
+    }
+
+    public Method getOnClose() {
+        return onClose;
+    }
+
+    public Object[] getOnCloseArgs(String path) {
+        // TODO Auto-generated method stub
+        return null;
+    }
+
+    public Method getOnError() {
+        return onError;
+    }
+
+    public Object[] getOnErrorArgs(String path) {
+        // TODO Auto-generated method stub
+        return null;
+    }
+}

==================================================
WsEndpointPojo.java
index c6064daf73..421393de00 100644
--- a/java/org/apache/tomcat/websocket/ServerContainerImpl.java
+++ b/java/org/apache/tomcat/websocket/ServerContainerImpl.java
@@ -78,6 +78,9 @@ public class ServerContainerImpl extends ClientContainerImpl implements
 
     private Map<String, Class<?>> pojoMap = new ConcurrentHashMap<>();
 
+    private Map<Class<?>, PojoMethodMapping> pojoMethodMap =
+            new ConcurrentHashMap<>();
+
 
     private ServerContainerImpl() {
         // Hide default constructor
@@ -146,6 +149,7 @@ public class ServerContainerImpl extends ClientContainerImpl implements
         }
 
         pojoMap.put(path.substring(0, path.length() - 2), pojo);
+        pojoMethodMap.put(pojo, new PojoMethodMapping(pojo, path));
         addWsServletMapping(path);
     }
 
@@ -170,10 +174,15 @@ public class ServerContainerImpl extends ClientContainerImpl implements
             return ep;
         }
 
+        // TODO Need to cache the pojoMethodMapping too
         Class<?> clazzPojo = pojoMap.get(servletPath);
         if (clazzPojo != null) {
-            Endpoint ep = new WsEndpointPojo(clazzPojo, servletPath);
-            return ep;
+            PojoMethodMapping mapping = pojoMethodMap.get(clazzPojo);
+            if (mapping != null) {
+                Endpoint ep = new WsEndpointPojo(clazzPojo,
+                        mapping, servletPath);
+                return ep;
+            }
         }
 
         throw new IllegalStateException(

==================================================
