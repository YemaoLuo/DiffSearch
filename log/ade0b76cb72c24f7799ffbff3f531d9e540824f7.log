ade0b76cb72c24f7799ffbff3f531d9e540824f7
==================================================
Remove code that was deprecated in r1188399
==================================================
Mark Emlyn
==================================================
Mon Oct 24 21:53:36 2011 +0000
==================================================
BasicAuthenticator.java
Remove code that was deprecated in r1188399

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1188402 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Constants.java
index e8927fd745..9cad1b1d7f 100644
--- a/java/org/apache/catalina/authenticator/BasicAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/BasicAuthenticator.java
@@ -22,6 +22,7 @@ package org.apache.catalina.authenticator;
 import java.io.IOException;
 import java.security.Principal;
 
+import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
 import org.apache.catalina.connector.Request;
@@ -136,8 +137,8 @@ public class BasicAuthenticator
 
             principal = context.getRealm().authenticate(username, password);
             if (principal != null) {
-                register(request, response, principal, Constants.BASIC_METHOD,
-                         username, password);
+                register(request, response, principal,
+                        HttpServletRequest.BASIC_AUTH, username, password);
                 return (true);
             }
         }
@@ -159,6 +160,6 @@ public class BasicAuthenticator
 
     @Override
     protected String getAuthMethod() {
-        return Constants.BASIC_METHOD;
+        return HttpServletRequest.BASIC_AUTH;
     }
 }

==================================================
DigestAuthenticator.java
index 3285b758e6..1f35b5289a 100644
--- a/java/org/apache/catalina/authenticator/Constants.java
+++ b/java/org/apache/catalina/authenticator/Constants.java
@@ -24,15 +24,7 @@ public class Constants {
     public static final String Package = "org.apache.catalina.authenticator";
 
     // Authentication methods for login configuration
-    // Servlet spec schemes
-    @Deprecated
-    public static final String BASIC_METHOD = "BASIC";
-    @Deprecated
-    public static final String CERT_METHOD = "CLIENT_CERT";
-    @Deprecated
-    public static final String DIGEST_METHOD = "DIGEST";
-    @Deprecated
-    public static final String FORM_METHOD = "FORM";
+    // Servlet spec schemes are defined in HttpServletRequest
     // Vendor specific schemes
     public static final String SPNEGO_METHOD = "SPNEGO";
 

==================================================
FormAuthenticator.java
index 7cfcb81136..3dbc88f0c4 100644
--- a/java/org/apache/catalina/authenticator/DigestAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/DigestAuthenticator.java
@@ -257,8 +257,7 @@ public class DigestAuthenticator extends AuthenticatorBase {
             if (principal != null) {
                 String username = parseUsername(authorization);
                 register(request, response, principal,
-                         Constants.DIGEST_METHOD,
-                         username, null);
+                        HttpServletRequest.DIGEST_AUTH, username, null);
                 return (true);
             }
         }
@@ -280,7 +279,7 @@ public class DigestAuthenticator extends AuthenticatorBase {
 
     @Override
     protected String getAuthMethod() {
-        return Constants.DIGEST_METHOD;
+        return HttpServletRequest.DIGEST_AUTH;
     }
 
 

==================================================
SSLAuthenticator.java
index 92d9c37cbe..dd216a696b 100644
--- a/java/org/apache/catalina/authenticator/FormAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/FormAuthenticator.java
@@ -28,6 +28,7 @@ import java.util.Locale;
 
 import javax.servlet.RequestDispatcher;
 import javax.servlet.http.Cookie;
+import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
 import org.apache.catalina.Realm;
@@ -187,8 +188,8 @@ public class FormAuthenticator
                     session.setNote(Constants.FORM_PRINCIPAL_NOTE, principal);
                     if (!matchRequest(request)) {
                         register(request, response, principal,
-                                 Constants.FORM_METHOD,
-                                 username, password);
+                                HttpServletRequest.FORM_AUTH,
+                                username, password);
                         return (true);
                     }
                 }
@@ -209,7 +210,7 @@ public class FormAuthenticator
             }
             principal = (Principal)
                 session.getNote(Constants.FORM_PRINCIPAL_NOTE);
-            register(request, response, principal, Constants.FORM_METHOD,
+            register(request, response, principal, HttpServletRequest.FORM_AUTH,
                      (String) session.getNote(Constants.SESS_USERNAME_NOTE),
                      (String) session.getNote(Constants.SESS_PASSWORD_NOTE));
             // If we're caching principals we no longer need the username
@@ -346,7 +347,7 @@ public class FormAuthenticator
 
     @Override
     protected String getAuthMethod() {
-        return Constants.FORM_METHOD;
+        return HttpServletRequest.FORM_AUTH;
     }
 
 

==================================================
SingleSignOnEntry.java
index b4930ad746..397167c235 100644
--- a/java/org/apache/catalina/authenticator/SSLAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/SSLAuthenticator.java
@@ -20,6 +20,7 @@ import java.io.IOException;
 import java.security.Principal;
 import java.security.cert.X509Certificate;
 
+import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
 import org.apache.catalina.Globals;
@@ -138,8 +139,8 @@ public class SSLAuthenticator extends AuthenticatorBase {
         }
 
         // Cache the principal (if requested) and record this authentication
-        register(request, response, principal, Constants.CERT_METHOD,
-                 null, null);
+        register(request, response, principal,
+                HttpServletRequest.CLIENT_CERT_AUTH, null, null);
         return (true);
 
     }
@@ -147,6 +148,6 @@ public class SSLAuthenticator extends AuthenticatorBase {
 
     @Override
     protected String getAuthMethod() {
-        return Constants.CERT_METHOD;
+        return HttpServletRequest.CLIENT_CERT_AUTH;
     }
 }

==================================================
InputBuffer.java
index 26aa6e1a3c..36c0265f20 100644
--- a/java/org/apache/catalina/authenticator/SingleSignOnEntry.java
+++ b/java/org/apache/catalina/authenticator/SingleSignOnEntry.java
@@ -18,6 +18,8 @@ package org.apache.catalina.authenticator;
 
 import java.security.Principal;
 
+import javax.servlet.http.HttpServletRequest;
+
 import org.apache.catalina.Session;
 
 /**
@@ -179,8 +181,8 @@ public class SingleSignOnEntry
         this.username = username;
         this.password = password;
         this.canReauthenticate =
-            (Constants.BASIC_METHOD.equals(authType)
-                || Constants.FORM_METHOD.equals(authType));
+            (HttpServletRequest.BASIC_AUTH.equals(authType)
+                || HttpServletRequest.FORM_AUTH.equals(authType));
     }
 
 }

==================================================
MapperListener.java
index 0829742ab3..a1e511204e 100644
--- a/java/org/apache/catalina/connector/InputBuffer.java
+++ b/java/org/apache/catalina/connector/InputBuffer.java
@@ -180,20 +180,8 @@ public class InputBuffer extends Reader
     }
 
 
-    /**
-     * Get associated Coyote request.
-     *
-     * @return the associated Coyote request
-     */
-    @Deprecated
-    public Request getRequest() {
-        return this.coyoteRequest;
-    }
-
-
     // --------------------------------------------------------- Public Methods
 
-
     /**
      * Recycle the output buffer.
      */

==================================================
OutputBuffer.java
index de9980242c..84086204a0 100644
--- a/java/org/apache/catalina/connector/MapperListener.java
+++ b/java/org/apache/catalina/connector/MapperListener.java
@@ -83,14 +83,6 @@ public class MapperListener extends LifecycleMBeanBase
     }
 
 
-    // --------------------------------------------------------- Public Methods
-
-    @Deprecated
-    public String getConnectorName() {
-        return this.connector.toString();
-    }
-
-
     // ------------------------------------------------------- Lifecycle Methods
 
     @Override

==================================================
Request.java
index 687868fa67..4fe42b7771 100644
--- a/java/org/apache/catalina/connector/OutputBuffer.java
+++ b/java/org/apache/catalina/connector/OutputBuffer.java
@@ -173,17 +173,6 @@ public class OutputBuffer extends Writer
     }
 
 
-    /**
-     * Get associated Coyote response.
-     *
-     * @return the associated Coyote response
-     */
-    @Deprecated
-    public Response getResponse() {
-        return this.coyoteResponse;
-    }
-
-
     /**
      * Is the response output suspended ?
      *

==================================================
Response.java
index 0f6f585cb9..08d3aaf2d7 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -277,13 +277,6 @@ public class Request
     protected Principal userPrincipal = null;
 
 
-    /**
-     * Session parsed flag.
-     */
-    @Deprecated
-    protected boolean sessionParsed = false;
-
-
     /**
      * Request parameters parsed flag.
      */
@@ -466,7 +459,6 @@ public class Request
         usingReader = false;
         userPrincipal = null;
         subject = null;
-        sessionParsed = false;
         parametersParsed = false;
         parts = null;
         partsParseException = null;
@@ -532,11 +524,6 @@ public class Request
         pathParameters.clear();
     }
 
-    @Deprecated
-    protected boolean isProcessing() {
-        return coyoteRequest.isProcessing();
-    }
-
     /**
      * Clear cached encoders (to save memory for Comet requests).
      */
@@ -635,19 +622,6 @@ public class Request
     }
 
 
-    /**
-     * Set the Host within which this Request is being processed.  This
-     * must be called as soon as the appropriate Host is identified, and
-     * before the Request is passed to a context.
-     *
-     * @param host The newly associated Host
-     */
-    @Deprecated
-    public void setHost(Host host) {
-        mappingData.host = host;
-    }
-
-
     /**
      * Mapping data.
      */
@@ -801,16 +775,6 @@ public class Request
     }
 
 
-    /**
-     * Return an Iterator containing the String names of all notes bindings
-     * that exist for this request.
-     */
-    @Deprecated
-    public Iterator<String> getNoteNames() {
-        return notes.keySet().iterator();
-    }
-
-
     /**
      * Remove any object bound to the specified name in the internal notes
      * for this request.
@@ -875,17 +839,6 @@ public class Request
     }
 
 
-    /**
-     * Set the name of the server (virtual host) to process this request.
-     *
-     * @param name The server name
-     */
-    @Deprecated
-    public void setServerName(String name) {
-        coyoteRequest.serverName().setString(name);
-    }
-
-
     /**
      * Set the port number of the server to process this request.
      *
@@ -1754,20 +1707,6 @@ public class Request
     }
 
 
-    /**
-     * Add a parameter name and corresponding set of values to this Request.
-     * (This is used when restoring the original request on a form based
-     * login).
-     *
-     * @param name Name of this request parameter
-     * @param values Corresponding values for this request parameter
-     */
-    @Deprecated
-    public void addParameter(String name, String values[]) {
-        coyoteRequest.getParameters().addParameterValues(name, values);
-    }
-
-
     /**
      * Clear the collection of Cookies associated with this Request.
      */
@@ -1777,15 +1716,6 @@ public class Request
     }
 
 
-    /**
-     * Clear the collection of Headers associated with this Request.
-     */
-    @Deprecated
-    public void clearHeaders() {
-        // Not used
-    }
-
-
     /**
      * Clear the collection of Locales associated with this Request.
      */
@@ -1794,15 +1724,6 @@ public class Request
     }
 
 
-    /**
-     * Clear the collection of parameters associated with this Request.
-     */
-    @Deprecated
-    public void clearParameters() {
-        // Not used
-    }
-
-
     /**
      * Set the authentication type used for this request, if any; otherwise
      * set the type to <code>null</code>.  Typical values are "BASIC",
@@ -1815,25 +1736,6 @@ public class Request
     }
 
 
-    /**
-     * Set the context path for this Request.  This will normally be called
-     * when the associated Context is mapping the Request to a particular
-     * Wrapper.
-     *
-     * @param path The context path
-     */
-    @Deprecated
-    public void setContextPath(String path) {
-
-        if (path == null) {
-            mappingData.contextPath.setString("");
-        } else {
-            mappingData.contextPath.setString(path);
-        }
-
-    }
-
-
     /**
      * Set the path information for this Request.  This will normally be called
      * when the associated Context is mapping the Request to a particular
@@ -1911,32 +1813,6 @@ public class Request
     }
 
 
-    /**
-     * Get the decoded request URI.
-     *
-     * @return the URL decoded request URI
-     */
-    @Deprecated
-    public MessageBytes getDecodedRequestURIMB() {
-        return coyoteRequest.decodedURI();
-    }
-
-
-    /**
-     * Set the servlet path for this Request.  This will normally be called
-     * when the associated Context is mapping the Request to a particular
-     * Wrapper.
-     *
-     * @param path The servlet path
-     */
-    @Deprecated
-    public void setServletPath(String path) {
-        if (path != null) {
-            mappingData.wrapperPath.setString(path);
-        }
-    }
-
-
     /**
      * Set the Principal who has been authenticated for this Request.  This
      * value is also used to calculate the value to be returned by the
@@ -1987,17 +1863,6 @@ public class Request
     }
 
 
-    /**
-     * Get the context path.
-     *
-     * @return the context path
-     */
-    @Deprecated
-    public MessageBytes getContextPathMB() {
-        return mappingData.contextPath;
-    }
-
-
     /**
      * Return the set of Cookies received with this Request.
      */
@@ -2013,17 +1878,6 @@ public class Request
     }
 
 
-    /**
-     * Set the set of cookies received with this Request.
-     */
-    @Deprecated
-    public void setCookies(Cookie[] cookies) {
-
-        this.cookies = cookies;
-
-    }
-
-
     /**
      * Return the value of the specified date header, if any; otherwise
      * return -1.
@@ -2123,17 +1977,6 @@ public class Request
     }
 
 
-    /**
-     * Get the path info.
-     *
-     * @return the path info
-     */
-    @Deprecated
-    public MessageBytes getPathInfoMB() {
-        return mappingData.pathInfo;
-    }
-
-
     /**
      * Return the extra path information for this request, translated
      * to a real path.
@@ -2256,17 +2099,6 @@ public class Request
     }
 
 
-    /**
-     * Get the servlet path.
-     *
-     * @return the servlet path
-     */
-    @Deprecated
-    public MessageBytes getServletPathMB() {
-        return mappingData.wrapperPath;
-    }
-
-
     /**
      * Return the session associated with this Request, creating one
      * if necessary.
@@ -2554,15 +2386,6 @@ public class Request
         coyoteRequest.action(ActionCode.COMET_SETTIMEOUT, Long.valueOf(timeout));
     }
 
-    /**
-     * Not part of Servlet 3 spec but probably should be.
-     * @return true if the requested session ID was obtained from the SSL session
-     */
-    @Deprecated
-    public boolean isRequestedSessionIdFromSSL() {
-        return requestedSessionSSL;
-    }
-
     /**
      * @throws IOException If an I/O error occurs
      * @throws IllegalStateException If the response has been committed

==================================================
JAASMemoryLoginModule.java
index c90128fd51..3b72148417 100644
--- a/java/org/apache/catalina/connector/mbeans-descriptors.xml
+++ b/java/org/apache/catalina/connector/mbeans-descriptors.xml
@@ -196,9 +196,17 @@
           group="Mapper"
            type="org.apache.catalina.connector.MapperListener">
 
-    <attribute name="connectorName"
-        description="Name of the associated connector"
-               type="java.lang.String"
-          writeable="false"/>
+    <attribute   name="stateName"
+          description="The name of the LifecycleState that this component is currently in"
+                 type="java.lang.String"
+                 writeable="false"/>
+
+    <operation name="start" description="Start" impact="ACTION" returnType="void" />
+    <operation name="stop" description="Stop" impact="ACTION" returnType="void" />
+    <operation name="pause" description="Start" impact="ACTION" returnType="void" />
+    <operation name="resume" description="Stop" impact="ACTION" returnType="void" />
+    <operation name="init" description="Init" impact="ACTION" returnType="void" />
+    <operation name="destroy" description="Destroy" impact="ACTION" returnType="void" />
+
   </mbean>
 </mbeans-descriptors>

==================================================
JAASRealm.java
index a581d83721..5782bdb377 100644
--- a/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
+++ b/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
@@ -34,9 +34,9 @@ import javax.security.auth.callback.UnsupportedCallbackException;
 import javax.security.auth.login.FailedLoginException;
 import javax.security.auth.login.LoginException;
 import javax.security.auth.spi.LoginModule;
+import javax.servlet.http.HttpServletRequest;
 
 import org.apache.catalina.Globals;
-import org.apache.catalina.authenticator.Constants;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.digester.Digester;
@@ -292,10 +292,10 @@ public class JAASMemoryLoginModule extends MemoryRealm implements LoginModule {
         if (authMethod == null) {
             // BASIC or FORM
             principal = super.authenticate(username, password);
-        } else if (authMethod.equals(Constants.DIGEST_METHOD)) {
+        } else if (authMethod.equals(HttpServletRequest.DIGEST_AUTH)) {
             principal = super.authenticate(username, password, nonce, nc,
                     cnonce, qop, realmName, md5a2);
-        } else if (authMethod.equals(Constants.CERT_METHOD)) {
+        } else if (authMethod.equals(HttpServletRequest.CLIENT_CERT_AUTH)) {
             principal = super.getPrincipal(username);
         } else {
             throw new LoginException("Unknown authentication method");

==================================================
