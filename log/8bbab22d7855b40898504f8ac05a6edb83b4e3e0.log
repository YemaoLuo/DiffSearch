8bbab22d7855b40898504f8ac05a6edb83b4e3e0
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48358
==================================================
Mark Emlyn
==================================================
Sun Apr 25 12:19:19 2010 +0000
==================================================
EmbeddedServletOptions.java
index a61ab24750..c1bde1730f 100644
--- a/conf/web.xml
+++ b/conf/web.xml
@@ -185,6 +185,14 @@
   <!--                       print statement per input line, to ease        -->
   <!--                       debugging?  [true]                             -->
   <!--                                                                      -->
+  <!--   maxLoadedJsps       The maximum number of JSPs that will be loaded -->
+  <!--                       for a web application. If more than this       -->
+  <!--                       number of JSPs are loaded, the least recently  -->
+  <!--                       used JSPs will be unloaded so that the number  -->
+  <!--                       of JSPs loaded at any one time does not exceed -->
+  <!--                       this limit. A value of zero or less indicates  -->
+  <!--                       no limit. [-1]                                 -->
+  <!--                                                                      -->
   <!--   modificationTestInterval                                           -->
   <!--                       Causes a JSP (and its dependent files) to not  -->
   <!--                       be checked for modification during the         -->

==================================================
JspC.java
index 3fdb0653a7..3fe5a8855a 100644
--- a/java/org/apache/jasper/EmbeddedServletOptions.java
+++ b/java/org/apache/jasper/EmbeddedServletOptions.java
@@ -186,6 +186,12 @@ public final class EmbeddedServletOptions implements Options {
     private boolean displaySourceFragment = true;
 
     
+    /**
+     * The maxim number of loaded jsps per web-application. If there are more
+     * jsps loaded, they will be unloaded.
+     */
+    private int maxLoadedJsps = -1;
+
     public String getProperty(String name ) {
         return settings.getProperty( name );
     }
@@ -382,6 +388,14 @@ public final class EmbeddedServletOptions implements Options {
         return displaySourceFragment;
     }
 
+    /**
+     * Should any jsps be unloaded? If set to a value greater than 0 eviction of jsps
+     * is started. Default: -1
+     * */
+    public int getMaxLoadedJsps() {
+        return maxLoadedJsps;
+    }
+
     /**
      * Create an EmbeddedServletOptions object using data available from
      * ServletConfig and ServletContext. 
@@ -663,6 +677,17 @@ public final class EmbeddedServletOptions implements Options {
             }
         }
         
+        String maxLoadedJsps = config.getInitParameter("maxLoadedJsps");
+        if (maxLoadedJsps != null) {
+            try {
+                this.maxLoadedJsps = Integer.parseInt(maxLoadedJsps);
+            } catch(NumberFormatException ex) {
+                if (log.isWarnEnabled()) {
+                    log.warn(Localizer.getMessage("jsp.warning.maxLoadedJsps", ""+this.maxLoadedJsps));
+                }
+            }
+        }
+
         // Setup the global Tag Libraries location cache for this
         // web-application.
         tldLocationsCache = new TldLocationsCache(context);

==================================================
Options.java
index afca8cf9a1..7eadb48630 100644
--- a/java/org/apache/jasper/JspC.java
+++ b/java/org/apache/jasper/JspC.java
@@ -444,6 +444,10 @@ public class JspC implements Options {
         return true;
     }
 
+    public int getMaxLoadedJsps() {
+        return -1;
+    }
+
     /**
      * {@inheritDoc}
      */

==================================================
JspRuntimeContext.java
index fcf011ced9..f7372feb5e 100644
--- a/java/org/apache/jasper/Options.java
+++ b/java/org/apache/jasper/Options.java
@@ -221,4 +221,10 @@ public interface Options {
      */
     public Map<String, TagLibraryInfo> getCache();
     
+    /**
+     * The maxim number of loaded jsps per web-application. If there are more
+     * jsps loaded, they will be unloaded. If unset or less than 0, no jsps
+     * are unloaded.
+     */
+    public int getMaxLoadedJsps();
 }

==================================================
JspServlet.java
index 409da71f8d..eb0273bb4a 100644
--- a/java/org/apache/jasper/resources/LocalStrings.properties
+++ b/java/org/apache/jasper/resources/LocalStrings.properties
@@ -176,6 +176,7 @@ jsp.warning.dumpSmap=Warning: Invalid value for the initParam dumpSmap. Will use
 jsp.warning.genchararray=Warning: Invalid value for the initParam genStrAsCharArray. Will use the default value of \"false\"
 jsp.warning.suppressSmap=Warning: Invalid value for the initParam suppressSmap. Will use the default value of \"false\"
 jsp.warning.displaySourceFragment=Warning: Invalid value for the initParam displaySourceFragment. Will use the default value of \"true\"
+jsp.warning.maxLoadedJsps=Warning: Invalid value for the initParam maxLoadedJsps. Will use the default value of \"-1\"
 jsp.error.badtaglib=Unable to open taglibrary {0} : {1}
 jsp.error.badGetReader=Cannot create a reader when the stream is not buffered
 jsp.warning.unknown.element.in.taglib=Unknown element ({0}) in taglib

==================================================
JspServletWrapper.java
index 6c36333e57..95d9e76787 100644
--- a/java/org/apache/jasper/servlet/JspServlet.java
+++ b/java/org/apache/jasper/servlet/JspServlet.java
@@ -286,6 +286,7 @@ public class JspServlet extends HttpServlet implements PeriodicEventListener {
 
 
     public void periodicEvent() {
+        rctxt.checkUnload();
         rctxt.checkCompile();
     }
 

==================================================
Entry.java
index 8f16a574c2..f4266d252a 100644
--- a/java/org/apache/jasper/servlet/JspServletWrapper.java
+++ b/java/org/apache/jasper/servlet/JspServletWrapper.java
@@ -40,6 +40,7 @@ import org.apache.jasper.compiler.JspRuntimeContext;
 import org.apache.jasper.compiler.Localizer;
 import org.apache.jasper.runtime.InstanceManagerFactory;
 import org.apache.jasper.runtime.JspSourceDependent;
+import org.apache.jasper.util.Entry;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.InstanceManager;
@@ -81,6 +82,7 @@ public class JspServletWrapper {
     private JasperException compileException;
     private long servletClassLastModifiedTime;
     private long lastModificationTest = 0L;
+    private Entry<JspServletWrapper> ticket;
 
     /*
      * JspServletWrapper for JSP pages.
@@ -273,6 +275,10 @@ public class JspServletWrapper {
         return tripCount--;
     }
 
+    public String getJspUri() {
+        return jspUri;
+    }
+
     public void service(HttpServletRequest request, 
                         HttpServletResponse response,
                         boolean precompile)
@@ -306,6 +312,10 @@ public class JspServletWrapper {
 
                     // The following sets reload to true, if necessary
                     ctxt.compile();
+                    
+                    if (options.getMaxLoadedJsps() > 0) {
+                        ctxt.getRuntimeContext().unloadJsp();
+                    }
                 }
             } else {
                 if (compileException != null) {
@@ -367,7 +377,14 @@ public class JspServletWrapper {
             } else {
                 theServlet.service(request, response);
             }
-
+            if (options.getMaxLoadedJsps() > 0) {
+                synchronized(this) {
+                    if (ticket == null)
+                        ticket = ctxt.getRuntimeContext().push(this);
+                    else
+                        ctxt.getRuntimeContext().makeFirst(ticket);
+                }
+            }
         } catch (UnavailableException ex) {
             String includeRequestUri = (String)
                 request.getAttribute("javax.servlet.include.request_uri");

==================================================
JspQueue.java
new file mode 100644
index 0000000000..60d1d8e5e1
--- /dev/null
+++ b/java/org/apache/jasper/util/Entry.java
@@ -0,0 +1,60 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.jasper.util;
+
+/**
+ * Implementation of a list entry. It exposes links to previous and next
+ * elements on package level only.
+ */
+public class Entry<T> {
+
+    /** The content this entry is valid for. */
+    private final T content;
+    /** Pointer to next element in queue. */
+    private Entry<T> next;
+    /** Pointer to previous element in queue. */
+    private Entry<T> previous;
+
+    public Entry(T object) {
+        content = object;
+    }
+
+    protected void setNext(final Entry<T> next) {
+        this.next = next;
+    }
+
+    protected void setPrevious(final Entry<T> previous) {
+        this.previous = previous;
+    }
+
+    public T getContent() {
+        return content;
+    }
+
+    public Entry<T> getPrevious() {
+        return previous;
+    }
+
+    public Entry<T> getNext() {
+        return next;
+    }
+
+    @Override
+    public String toString() {
+        return content.toString();
+    }
+}

==================================================
