679401356aed7c50a455fa73c0d0b24a06117384
==================================================
Refactoring to start to align dispatch() implementations across the processors
==================================================
Mark Thomas
==================================================
Tue Sep 29 21:26:56 2015 +0000
==================================================
AbstractProcessor.java
Refactoring to start to align dispatch() implementations across the processors

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1705928 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpProcessor.java
index 62b4d63f01..6c788e8913 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -228,6 +228,13 @@ public abstract class AbstractProcessor implements ActionHook, Processor {
     @Override
     public abstract SocketState dispatch(SocketStatus status);
 
+    /**
+     * Perform any necessary processing for a non-blocking read before
+     * dispatching to the adapter.
+     */
+    protected void dispatchNonBlockingRead() {
+        asyncStateMachine.asyncOperation();
+    }
 
     @Override
     public abstract HttpUpgradeHandler getHttpUpgradeHandler();

==================================================
Http11Processor.java
index 05b725e385..0f6cecb897 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -640,9 +640,7 @@ public class AjpProcessor extends AbstractProcessor {
                 request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, ioe);
             }
         } else if (status == SocketStatus.OPEN_READ && request.getReadListener() != null) {
-            if (available()) {
-                asyncStateMachine.asyncOperation();
-            }
+            dispatchNonBlockingRead();
         }
 
         RequestInfo rp = request.getRequestProcessor();
@@ -676,6 +674,12 @@ public class AjpProcessor extends AbstractProcessor {
         }
     }
 
+    @Override
+    protected void dispatchNonBlockingRead() {
+        if (available()) {
+            super.dispatchNonBlockingRead();
+        }
+    }
 
     /**
      * Process pipelined HTTP requests using the specified input and output

==================================================
StreamProcessor.java
index 7f164f44bf..a88eb58864 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -1721,7 +1721,7 @@ public class Http11Processor extends AbstractProcessor {
                 request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, ioe);
             }
         } else if (status == SocketStatus.OPEN_READ && request.getReadListener() != null) {
-            asyncStateMachine.asyncOperation();
+            dispatchNonBlockingRead();
         }
 
         RequestInfo rp = request.getRequestProcessor();

==================================================
