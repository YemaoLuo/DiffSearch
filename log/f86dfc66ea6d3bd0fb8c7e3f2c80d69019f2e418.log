f86dfc66ea6d3bd0fb8c7e3f2c80d69019f2e418
==================================================
Add rst stream processing
==================================================
Mark Thomas
==================================================
Thu Jun 4 20:24:32 2015 +0000
==================================================
AbstractStream.java
Add rst stream processing
Clean up some stream related debug log messages

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1683626 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http2Parser.java
index 6f31d03e93..c18c7e6246 100644
--- a/java/org/apache/coyote/http2/AbstractStream.java
+++ b/java/org/apache/coyote/http2/AbstractStream.java
@@ -20,8 +20,6 @@ import java.util.HashSet;
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicLong;
 
-import org.apache.juli.logging.Log;
-
 /**
  * Used to managed prioritisation.
  */
@@ -109,8 +107,6 @@ s     * @param increment
     }
 
 
-    protected abstract Log getLog();
-
     protected abstract String getConnectionId();
 
     protected abstract int getWeight();

==================================================
Http2UpgradeHandler.java
index 879fa6e80f..07adfae7e4 100644
--- a/java/org/apache/coyote/http2/Http2Parser.java
+++ b/java/org/apache/coyote/http2/Http2Parser.java
@@ -221,8 +221,11 @@ class Http2Parser {
 
 
     private void readRstFrame(int streamId, int payloadSize) throws IOException {
-        // TODO: Process this
-        swallow(payloadSize);
+        byte[] payload = new byte[4];
+        input.fill(true, payload);
+
+        long errorCode = ByteUtil.getFourBytes(payload, 0);
+        output.reset(streamId, errorCode);
     }
 
 
@@ -517,6 +520,9 @@ class Http2Parser {
         void reprioritise(int streamId, int parentStreamId, boolean exclusive, int weight);
         void headersEnd(int streamId);
 
+        // Reset frames
+        void reset(int streamId, long errorCode);
+
         // Settings frames
         void setting(int identifier, long value) throws IOException;
         void settingsEnd(boolean ack) throws IOException;

==================================================
Stream.java
index 7d0162d1f1..06e6585786 100644
--- a/java/org/apache/coyote/http2/LocalStrings.properties
+++ b/java/org/apache/coyote/http2/LocalStrings.properties
@@ -13,8 +13,6 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-abstractStream.reprioritisation.debug=Connection [{0}], Stream [{1}], Exclusive [{2}], Parent [{3}], Weight [{4}]
-
 connectionPrefaceParser.eos=Unexpected end of stream while reading opening client preface byte sequence. Only [{0}] bytes read.
 connectionPrefaceParser.ioError=Failed to read opening client preface byte sequence
 connectionPrefaceParser.mismatch=An unexpected byte sequence was received at the start of the client preface [{0}]
@@ -56,6 +54,8 @@ http2Parser.processFrameWindowUpdate.invalidIncrement=Window update frame receiv
 http2Parser.processFrameWindowUpdate.invalidPayloadSize=Window update frame received with an invalid payload size of [{0}]
 
 stream.header.debug=Connection [{0}], Stream [{1}], HTTP header [{2}], Value [{3}]
+stream.reprioritisation.debug=Connection [{0}], Stream [{1}], Exclusive [{2}], Parent [{3}], Weight [{4}]
+stream.reset.debug=Connection [{0}], Stream [{1}], Reset due to [{2}]
 stream.write=Connection [{0}], Stream [{1}]
 
 streamProcessor.httpupgrade.notsupported=HTTP upgrade is not supported within HTTP/2 streams

==================================================
Http2TestBase.java
index 38ab028a3f..22d533a92d 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -69,8 +69,8 @@ public class Stream extends AbstractStream implements HeaderEmitter {
 
 
     public void rePrioritise(AbstractStream parent, boolean exclusive, int weight) {
-        if (getLog().isDebugEnabled()) {
-            getLog().debug(sm.getString("abstractStream.reprioritisation.debug",
+        if (log.isDebugEnabled()) {
+            log.debug(sm.getString("stream.reprioritisation.debug",
                     getConnectionId(), getIdentifier(), Boolean.toString(exclusive),
                     parent.getIdentifier(), Integer.toString(weight)));
         }
@@ -96,6 +96,15 @@ public class Stream extends AbstractStream implements HeaderEmitter {
     }
 
 
+    public void reset(long errorCode) {
+        if (log.isDebugEnabled()) {
+            log.debug(sm.getString("stream.reset.debug", getConnectionId(), getIdentifier(),
+                    Long.toString(errorCode)));
+        }
+        state.recieveReset();
+    }
+
+
     @Override
     public void incrementWindowSize(int windowSizeIncrement) throws Http2Exception {
         // If this is zero then any thread that has been trying to write for
@@ -190,12 +199,6 @@ public class Stream extends AbstractStream implements HeaderEmitter {
     }
 
 
-    @Override
-    protected final Log getLog() {
-        return log;
-    }
-
-
     @Override
     protected final String getConnectionId() {
         return getParentStream().getConnectionId();

==================================================
