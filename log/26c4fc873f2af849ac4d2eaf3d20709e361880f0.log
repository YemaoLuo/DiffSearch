26c4fc873f2af849ac4d2eaf3d20709e361880f0
==================================================
Line lengths
==================================================
Mark Thomas
==================================================
Tue Jun 9 14:37:53 2015 +0000
==================================================
ClientAuth.java
Line lengths
Patch by fjodorver

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1684438 13f79535-47bb-0310-9956-ffa450edef68



==================================================
MessagePolicy.java
index 4910c56f60..b179bb2e85 100644
--- a/java/javax/security/auth/message/ClientAuth.java
+++ b/java/javax/security/auth/message/ClientAuth.java
@@ -24,5 +24,6 @@ public interface ClientAuth {
 
     AuthStatus secureRequest(MessageInfo messageInfo, Subject clientSubject) throws AuthException;
 
-    AuthStatus validateResponse(MessageInfo messageInfo, Subject clientSubject, Subject serviceSubject) throws AuthException;
+    AuthStatus validateResponse(MessageInfo messageInfo, Subject clientSubject,
+            Subject serviceSubject) throws AuthException;
 }

==================================================
ServerAuth.java
index 743a999a6a..6d610e42a3 100644
--- a/java/javax/security/auth/message/MessagePolicy.java
+++ b/java/javax/security/auth/message/MessagePolicy.java
@@ -21,7 +21,8 @@ public class MessagePolicy {
     private final TargetPolicy[] targetPolicies;
     private final boolean mandatory;
 
-    public MessagePolicy(TargetPolicy[] targetPolicies, boolean mandatory) throws IllegalArgumentException {
+    public MessagePolicy(TargetPolicy[] targetPolicies, boolean mandatory)
+            throws IllegalArgumentException {
         if (targetPolicies == null) {
             throw new IllegalArgumentException("targetPolicies is null");
         }
@@ -63,7 +64,8 @@ public class MessagePolicy {
         private final Target[] targets;
         private final ProtectionPolicy protectionPolicy;
 
-        public TargetPolicy(Target[] targets, ProtectionPolicy protectionPolicy) throws IllegalArgumentException {
+        public TargetPolicy(Target[] targets, ProtectionPolicy protectionPolicy)
+                throws IllegalArgumentException {
             if (protectionPolicy == null) {
                 throw new IllegalArgumentException("protectionPolicy is null");
             }

==================================================
CallerPrincipalCallback.java
index 6c4f61af93..04f9f964f3 100644
--- a/java/javax/security/auth/message/ServerAuth.java
+++ b/java/javax/security/auth/message/ServerAuth.java
@@ -24,5 +24,6 @@ public interface ServerAuth {
 
     AuthStatus secureResponse(MessageInfo messageInfo, Subject serviceSubject) throws AuthException;
 
-    AuthStatus validateRequest(MessageInfo messageInfo, Subject clientSubject, Subject serviceSubject) throws AuthException;
+    AuthStatus validateRequest(MessageInfo messageInfo, Subject clientSubject,
+            Subject serviceSubject) throws AuthException;
 }

==================================================
CertStoreCallback.java
index 35d1a71a4e..2c7010f680 100644
--- a/java/javax/security/auth/message/callback/CallerPrincipalCallback.java
+++ b/java/javax/security/auth/message/callback/CallerPrincipalCallback.java
@@ -22,7 +22,8 @@ import javax.security.auth.Subject;
 import javax.security.auth.callback.Callback;
 
 /**
- * Callback that enables an authentication module to inform the runtime of the call principal or name of the caller principal.
+ * Callback that enables an authentication module to inform the runtime of the
+ * call principal or name of the caller principal.
  */
 public class CallerPrincipalCallback implements Callback {
 

==================================================
PasswordValidationCallback.java
index 3ef4ca67b4..66b44ed54a 100644
--- a/java/javax/security/auth/message/callback/CertStoreCallback.java
+++ b/java/javax/security/auth/message/callback/CertStoreCallback.java
@@ -21,7 +21,8 @@ import java.security.cert.CertStore;
 import javax.security.auth.callback.Callback;
 
 /**
- * Callback that enables a runtime to inform authentication modules of the CertStore to use.
+ * Callback that enables a runtime to inform authentication modules of the
+ * CertStore to use.
  */
 public class CertStoreCallback implements Callback {
 

==================================================
PrivateKeyCallback.java
index 4de9b6a863..0dd456c2d9 100644
--- a/java/javax/security/auth/message/callback/PasswordValidationCallback.java
+++ b/java/javax/security/auth/message/callback/PasswordValidationCallback.java
@@ -23,8 +23,8 @@ import javax.security.auth.callback.Callback;
 
 
 /**
- * Callback that enables an authentication module to supply a username and password (to a runtime?) and determine if
- * the result of validation.
+ * Callback that enables an authentication module to supply a user name and
+ * password (to a runtime?) and determine if the result of validation.
  */
 public class PasswordValidationCallback implements Callback {
 

==================================================
SecretKeyCallback.java
index c1bf8f8e88..5dfb24ab2f 100644
--- a/java/javax/security/auth/message/callback/PrivateKeyCallback.java
+++ b/java/javax/security/auth/message/callback/PrivateKeyCallback.java
@@ -24,9 +24,10 @@ import javax.security.auth.callback.Callback;
 import javax.security.auth.x500.X500Principal;
 
 /**
- * Callback that enables an authentication module to request a certificate chain and private key from the runtime.
- * The information specifying the chain and key may be an alias, a digest, a subject key, or an issuer ID.
- * Other request types may be supported.
+ * Callback that enables an authentication module to request a certificate chain
+ * and private key from the runtime. The information specifying the chain and
+ * key may be an alias, a digest, a subject key, or an issuer ID. Other request
+ * types may be supported.
  */
 public class PrivateKeyCallback implements Callback {
 

==================================================
AuthConfigFactory.java
index 1643e9f625..5c2f2ecbca 100644
--- a/java/javax/security/auth/message/callback/SecretKeyCallback.java
+++ b/java/javax/security/auth/message/callback/SecretKeyCallback.java
@@ -20,8 +20,8 @@ import javax.crypto.SecretKey;
 import javax.security.auth.callback.Callback;
 
 /**
- * A callback enabling an authentication module to request a secret key from the runtime, by supplying an alias.
- * Other request types may also be supported.
+ * A callback enabling an authentication module to request a secret key from the
+ * runtime, by supplying an alias. Other request types may also be supported.
  */
 public class SecretKeyCallback implements Callback {
 

==================================================
AuthConfigProvider.java
index 7b5a6a9c92..25bd4ecfdb 100644
--- a/java/javax/security/auth/message/config/AuthConfigFactory.java
+++ b/java/javax/security/auth/message/config/AuthConfigFactory.java
@@ -16,7 +16,11 @@
  */
 package javax.security.auth.message.config;
 
+import java.security.AccessController;
+import java.security.PrivilegedAction;
 import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
+import java.security.Security;
 import java.util.Map;
 
 import javax.security.auth.AuthPermission;
@@ -24,7 +28,7 @@ import javax.security.auth.AuthPermission;
 public abstract class AuthConfigFactory {
 
     public static final String DEFAULT_FACTORY_SECURITY_PROPERTY = "authconfigprovider.factory";
-    private static final String DEFAULT_JASPI_AUTHCONFIGFACTORYIMPL = "org.apache.geronimo.components.jaspi.AuthConfigFactoryImpl";
+    private static final String DEFAULT_JASPI_AUTH_CONFIG_FACTORY_IMPL = "org.apache.geronimo.components.jaspi.AuthConfigFactoryImpl";
 
     private static AuthConfigFactory factory;
     private static ClassLoader contextClassLoader;
@@ -45,25 +49,15 @@ public abstract class AuthConfigFactory {
             sm.checkPermission(new AuthPermission("getAuthConfigFactory"));
         }
         if (factory == null) {
-            String className = java.security.AccessController
-                    .doPrivileged(new java.security.PrivilegedAction<String>() {
-                        @Override
-                        public String run() {
-                            return java.security.Security.getProperty(DEFAULT_FACTORY_SECURITY_PROPERTY);
-                        }
-                    });
-            if (className == null) {
-                className = DEFAULT_JASPI_AUTHCONFIGFACTORYIMPL;
-            }
+            final String className = getFactoryClassName();
             try {
-                final String finalClassName = className;
-                factory = java.security.AccessController
-                        .doPrivileged(new java.security.PrivilegedExceptionAction<AuthConfigFactory>() {
+                return AccessController
+                        .doPrivileged(new PrivilegedExceptionAction<AuthConfigFactory>() {
                             @Override
-                            public AuthConfigFactory run() throws ClassNotFoundException, InstantiationException,
-                                    IllegalAccessException {
+                            public AuthConfigFactory run() throws ClassNotFoundException,
+                                    InstantiationException, IllegalAccessException {
                                 // TODO Review this
-                                Class<?> clazz = Class.forName(finalClassName, true, contextClassLoader);
+                                Class<?> clazz = Class.forName(className, true, contextClassLoader);
                                 return (AuthConfigFactory) clazz.newInstance();
                             }
                         });
@@ -72,14 +66,27 @@ public abstract class AuthConfigFactory {
                 if (inner instanceof InstantiationException) {
                     throw (SecurityException) new SecurityException("AuthConfigFactory error:"
                             + inner.getCause().getMessage()).initCause(inner.getCause());
-                } else {
-                    throw (SecurityException) new SecurityException("AuthConfigFactory error: " + inner).initCause(inner);
                 }
+                throw (SecurityException) new SecurityException("AuthConfigFactory error: " + inner)
+                        .initCause(inner);
             }
         }
         return factory;
     }
 
+    private static String getFactoryClassName() {
+        String className = AccessController.doPrivileged(new PrivilegedAction<String>() {
+            @Override
+            public String run() {
+                return Security.getProperty(DEFAULT_FACTORY_SECURITY_PROPERTY);
+            }
+        });
+        if (className != null) {
+            return className;
+        }
+        return DEFAULT_JASPI_AUTH_CONFIG_FACTORY_IMPL;
+    }
+
     public static void setFactory(AuthConfigFactory factory) {
         SecurityManager sm = System.getSecurityManager();
         if (sm != null) {

==================================================
ClientAuthConfig.java
index 08a45d0099..9346f529c3 100644
--- a/java/javax/security/auth/message/config/AuthConfigProvider.java
+++ b/java/javax/security/auth/message/config/AuthConfigProvider.java
@@ -21,10 +21,11 @@ import javax.security.auth.message.AuthException;
 
 public interface AuthConfigProvider {
 
-    ClientAuthConfig getClientAuthConfig(String layer, String appContext, CallbackHandler handler) throws AuthException, SecurityException;
+    ClientAuthConfig getClientAuthConfig(String layer, String appContext, CallbackHandler handler)
+            throws AuthException, SecurityException;
 
-    ServerAuthConfig getServerAuthConfig(String layer, String appContext, CallbackHandler handler) throws AuthException, SecurityException;
+    ServerAuthConfig getServerAuthConfig(String layer, String appContext, CallbackHandler handler)
+            throws AuthException, SecurityException;
 
     void refresh();
 }
-

==================================================
ClientAuthModule.java
index b9077c8ca9..2c135845e4 100644
--- a/java/javax/security/auth/message/config/ClientAuthConfig.java
+++ b/java/javax/security/auth/message/config/ClientAuthConfig.java
@@ -21,9 +21,9 @@ import java.util.Map;
 import javax.security.auth.Subject;
 import javax.security.auth.message.AuthException;
 
-
 public interface ClientAuthConfig extends AuthConfig {
 
     @SuppressWarnings("rawtypes") // JASPIC API uses raw types
-    ClientAuthContext getAuthContext(String authContextID, Subject clientSubject, Map properties) throws AuthException;
+    ClientAuthContext getAuthContext(String authContextID, Subject clientSubject, Map properties)
+            throws AuthException;
 }

==================================================
ServerAuthModule.java
index 73a026a2fe..41d8f9f8d9 100644
--- a/java/javax/security/auth/message/module/ClientAuthModule.java
+++ b/java/javax/security/auth/message/module/ClientAuthModule.java
@@ -23,12 +23,12 @@ import javax.security.auth.message.AuthException;
 import javax.security.auth.message.ClientAuth;
 import javax.security.auth.message.MessagePolicy;
 
-
 public interface ClientAuthModule extends ClientAuth {
 
     @SuppressWarnings("rawtypes") // JASPIC API uses raw types
     Class[] getSupportedMessageTypes();
 
     @SuppressWarnings("rawtypes") // JASPIC API uses raw types
-    void initialize(MessagePolicy requestPolicy, MessagePolicy responsePolicy, CallbackHandler handler, Map options) throws AuthException;
+    void initialize(MessagePolicy requestPolicy, MessagePolicy responsePolicy,
+            CallbackHandler handler, Map options) throws AuthException;
 }

==================================================
