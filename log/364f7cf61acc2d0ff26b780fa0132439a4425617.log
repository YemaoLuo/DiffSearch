364f7cf61acc2d0ff26b780fa0132439a4425617
==================================================
Refactor compressableMimeType
==================================================
Mark Thomas
==================================================
Tue Apr 28 11:18:32 2015 +0000
==================================================
AbstractHttp11Protocol.java
Refactor compressableMimeType
Convert comma separated string to string array once and re-use it rather than converting for every new Processor

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1676477 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11Processor.java
index 6abaa18978..590a549b83 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -26,6 +26,7 @@ import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
+import java.util.StringTokenizer;
 import java.util.concurrent.ConcurrentHashMap;
 
 import javax.servlet.http.HttpUpgradeHandler;
@@ -131,16 +132,29 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     }
 
 
-    private String compressableMimeTypes = "text/html,text/xml,text/plain";
-    public String getCompressableMimeType() { return compressableMimeTypes; }
+    private String compressableMimeType = "text/html,text/xml,text/plain";
+    private String[] compressableMimeTypes = null;
+    public String getCompressableMimeType() { return compressableMimeType; }
     public void setCompressableMimeType(String valueS) {
-        compressableMimeTypes = valueS;
+        compressableMimeType = valueS;
+        compressableMimeTypes = null;
     }
-    public String getCompressableMimeTypes() {
-        return getCompressableMimeType();
-    }
-    public void setCompressableMimeTypes(String valueS) {
-        setCompressableMimeType(valueS);
+    public String[] getCompressableMimeTypes() {
+        String[] result = compressableMimeTypes;
+        if (result != null) {
+            return result;
+        }
+        List<String> values = new ArrayList<>();
+        StringTokenizer tokens = new StringTokenizer(compressableMimeType, ",");
+        while (tokens.hasMoreTokens()) {
+            String token = tokens.nextToken().trim();
+            if (token.length() > 0) {
+                values.add(token);
+            }
+        }
+        result = values.toArray(new String[values.size()]);
+        compressableMimeTypes = result;
+        return result;
     }
 
 

==================================================
