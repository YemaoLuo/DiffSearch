205ac60a42fb50dbff7150957aba85199f132a60
==================================================
Address session fixation by changing the session ID on authentication. This is enabled by default. This should be safe since this also happens when sessions migrate between nodes in a cluster. If an app can't handle a changing ID, then the feature can be disabled in the authenticator.  
==================================================
Mark Emlyn
==================================================
Fri Dec 11 17:30:59 2009 +0000
==================================================
Manager.java
Address session fixation by changing the session ID on authentication. This is enabled by default. This should be safe since this also happens when sessions migrate between nodes in a cluster. If an app can't handle a changing ID, then the feature can be disabled in the authenticator.  

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@889716 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AuthenticatorBase.java
index 36e170dc23..9689528c06 100644
--- a/java/org/apache/catalina/Manager.java
+++ b/java/org/apache/catalina/Manager.java
@@ -259,6 +259,15 @@ public interface Manager {
     public void addPropertyChangeListener(PropertyChangeListener listener);
 
 
+    /**
+     * Change the session ID of the current session to a new randomly generated
+     * session ID.
+     * 
+     * @param session   The session to change the session ID for
+     */
+    public void changeSessionId(Session session);
+    
+    
     /**
      * Get a session from the recycled ones or create a new empty one.
      * The PersistentManager manager does not need to create session data

==================================================
Request.java
index 8af48ae12b..51cea993aa 100644
--- a/java/org/apache/catalina/authenticator/AuthenticatorBase.java
+++ b/java/org/apache/catalina/authenticator/AuthenticatorBase.java
@@ -38,6 +38,7 @@ import org.apache.catalina.Context;
 import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleListener;
+import org.apache.catalina.Manager;
 import org.apache.catalina.Pipeline;
 import org.apache.catalina.Realm;
 import org.apache.catalina.Session;
@@ -122,6 +123,12 @@ public abstract class AuthenticatorBase
     protected boolean cache = true;
 
 
+    /**
+     * Should the session ID, if any, be changed upon a successful
+     * authentication to prevent a session fixation attack?
+     */
+    protected boolean changeSessionIdOnAuthentication = true;
+    
     /**
      * The Context to which this Valve is attached.
      */
@@ -513,6 +520,7 @@ public abstract class AuthenticatorBase
                  */
                 return;
             } 
+            
         }
     
         if (log.isDebugEnabled()) {
@@ -726,6 +734,13 @@ public abstract class AuthenticatorBase
         request.setUserPrincipal(principal);
 
         Session session = request.getSessionInternal(false);
+        
+        if (session != null && changeSessionIdOnAuthentication) {
+            Manager manager = request.getContext().getManager();
+            manager.changeSessionId(session);
+            request.changeSessionId(session.getId());
+        }
+
         // Cache the authentication information in our session, if any
         if (cache) {
             if (session != null) {

==================================================
JvmRouteBinderValve.java
index a73f204773..f0bfc3823d 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -2251,6 +2251,40 @@ public class Request
     }
 
 
+    /**
+     * Change the ID of the session that this request is associated with. There
+     * are several things that may trigger an ID change. These include mmoving
+     * between nodes in a cluster and session fixation prevention during the
+     * authentication process.
+     * 
+     * @param session   The session to change the session ID for
+     */
+    public void changeSessionId(String newSessionId) {
+        // This should only ever be called if there was an old session ID but
+        // double check to be sure
+        if (requestedSessionId != null && requestedSessionId.length() > 0) {
+            requestedSessionId = newSessionId;
+        }
+        
+        if (context != null && !context.getServletContext()
+                .getEffectiveSessionTrackingModes().contains(
+                        SessionTrackingMode.COOKIE))
+            return;
+        
+        if (response != null) {
+            Cookie newCookie =
+                ApplicationSessionCookieConfig.createSessionCookie(
+                        context.getServletContext().getSessionCookieConfig(),
+                        newSessionId,
+                        secure,
+                        context.getUseHttpOnly(),
+                        response.getConnector().getEmptySessionPath(),
+                        context.getEncodedPath());
+            response.addCookie(newCookie);
+        }
+    }
+
+    
     /**
      * Return the session associated with this Request, creating one
      * if necessary and requested.
@@ -2370,7 +2404,7 @@ public class Request
                 throw new ServletException(
                         sm.getString("coyoteRequest.authFail", username));
             }
-            // Assume if we have a non-null LogonConfig then we must have an
+            // Assume if we have a non-null LoginConfig then we must have an
             // authenticator
             context.getAuthenticator().register(this, getResponse(), principal,
                     authMethod, username, password);

==================================================
ManagerBase.java
index 80c2c2197d..015f0dc341 100644
--- a/java/org/apache/catalina/ha/session/JvmRouteBinderValve.java
+++ b/java/org/apache/catalina/ha/session/JvmRouteBinderValve.java
@@ -410,9 +410,8 @@ public class JvmRouteBinderValve extends ValveBase implements ClusterValve, Life
      *            new session id for node migration
      */
     protected void changeRequestSessionID(Request request, Response response, String sessionId, String newSessionID) {
-        request.setRequestedSessionId(newSessionID);
-        if(request.isRequestedSessionIdFromCookie())
-            setNewSessionCookie(request, response,newSessionID);
+        request.changeSessionId(newSessionID);
+
         // set original sessionid at request, to allow application detect the
         // change
         if (sessionIdAttribute != null && !"".equals(sessionIdAttribute)) {
@@ -454,6 +453,8 @@ public class JvmRouteBinderValve extends ValveBase implements ClusterValve, Life
      * @param request current request
      * @param response Tomcat Response
      * @param sessionId The session id
+     * 
+     * @deprecated Use {@link Request#changeSessionId(String)}
      */
     protected void setNewSessionCookie(Request request,
                                        Response response, String sessionId) {

==================================================
