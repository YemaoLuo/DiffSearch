0c9fd04a96070ec76bca898b927326f3376c10b6
==================================================
- Experiment with using soTimeout as the keepAliveTimeout if it's not specified (this way, the configuration behavior 
==================================================
Remy Maucherat
==================================================
Wed Nov 29 15:28:00 2006 +0000
==================================================
Constants.java
- Experiment with using soTimeout as the keepAliveTimeout if it's not specified (this way, the configuration behavior 
  remains the same as before - by default).

git-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@480598 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Constants.java
index f241742bc1..a5d533de9b 100644
--- a/java/org/apache/coyote/ajp/Constants.java
+++ b/java/org/apache/coyote/ajp/Constants.java
@@ -17,9 +17,8 @@
 
 package org.apache.coyote.ajp;
 
-import java.lang.IndexOutOfBoundsException;
 import java.util.Hashtable;
-import java.util.Locale;
+
 import org.apache.tomcat.util.buf.ByteChunk;
 
 
@@ -42,7 +41,6 @@ public final class Constants {
     public static final int DEFAULT_CONNECTION_LINGER = -1;
     public static final int DEFAULT_CONNECTION_TIMEOUT = -1;
     public static final int DEFAULT_CONNECTION_UPLOAD_TIMEOUT = 300000;
-    public static final int DEFAULT_KEEPALIVE_TIMEOUT = -1;
     public static final int DEFAULT_SERVER_SOCKET_TIMEOUT = 0;
     public static final boolean DEFAULT_TCP_NO_DELAY = true;
 

==================================================
Http11AprProtocol.java
index d763a6cd1e..ff07a60d10 100644
--- a/java/org/apache/coyote/http11/Constants.java
+++ b/java/org/apache/coyote/http11/Constants.java
@@ -39,7 +39,6 @@ public final class Constants {
     public static final int DEFAULT_CONNECTION_LINGER = -1;
     public static final int DEFAULT_CONNECTION_TIMEOUT = 60000;
     public static final int DEFAULT_CONNECTION_UPLOAD_TIMEOUT = 300000;
-    public static final int DEFAULT_KEEPALIVE_TIMEOUT = 60000;
     public static final int DEFAULT_SERVER_SOCKET_TIMEOUT = 0;
     public static final boolean DEFAULT_TCP_NO_DELAY = true;
     

==================================================
Http11Processor.java
index caf6c378d0..1f12d153d6 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -476,6 +476,10 @@ public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration
         ep.setKeepAliveTimeout(timeout);
     }
 
+    public boolean getKeepAlive() {
+        return ((maxKeepAliveRequests != 0) && (maxKeepAliveRequests != 1));
+    }
+
     /**
      * Set the keep-alive policy for this connection.
      */

==================================================
Http11Protocol.java
index fb27ae5371..0ce7ccf06e 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -190,7 +190,7 @@ public class Http11Processor implements ActionHook {
      * The number of seconds Tomcat will wait for a subsequent request
      * before closing the connection.
      */
-    protected int keepAliveTimeout = 15000;
+    protected int keepAliveTimeout = -1;
 
 
     /**

==================================================
AprEndpoint.java
index 881d332f91..c83e47e289 100644
--- a/java/org/apache/coyote/http11/Http11Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Protocol.java
@@ -71,7 +71,6 @@ public class Http11Protocol
     public Http11Protocol() {
         setSoLinger(Constants.DEFAULT_CONNECTION_LINGER);
         setSoTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);
-        setKeepAliveTimeout(Constants.DEFAULT_KEEPALIVE_TIMEOUT);
         //setServerSoTimeout(Constants.DEFAULT_SERVER_SOCKET_TIMEOUT);
         setTcpNoDelay(Constants.DEFAULT_TCP_NO_DELAY);
     }
@@ -292,16 +291,9 @@ public class Http11Protocol
      * before closing the connection. The default is the same as for
      * Apache HTTP Server (15 000 milliseconds).
      */
-    protected int keepAliveTimeout = 15000;
-    public int getKeepAliveTimeout()
-    {
-        return keepAliveTimeout;
-    }
-    
-    public void setKeepAliveTimeout(int timeout)
-    {
-        keepAliveTimeout = timeout;
-    }
+    protected int keepAliveTimeout = -1;
+    public int getKeepAliveTimeout() { return keepAliveTimeout; }
+    public void setKeepAliveTimeout(int timeout) { keepAliveTimeout = timeout; }
 
     // HTTP
     /**

==================================================
