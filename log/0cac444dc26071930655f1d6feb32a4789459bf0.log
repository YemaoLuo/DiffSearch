0cac444dc26071930655f1d6feb32a4789459bf0
==================================================
Refactor to add a json test. The json isn't a separate text file since I cannot put the license text in it.
==================================================
Remy Maucherat
==================================================
Tue Oct 9 09:21:51 2018 +0000
==================================================
KubernetesMembershipProvider.java
Refactor to add a json test. The json isn't a separate text file since I cannot put the license text in it.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1843232 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestKubernetesJson.java
index 3317f72456..9a3f236511 100644
--- a/java/org/apache/catalina/tribes/membership/cloud/KubernetesMembershipProvider.java
+++ b/java/org/apache/catalina/tribes/membership/cloud/KubernetesMembershipProvider.java
@@ -20,6 +20,7 @@ package org.apache.catalina.tribes.membership.cloud;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.io.Reader;
 import java.net.URLEncoder;
 import java.nio.file.FileSystems;
 import java.nio.file.Files;
@@ -56,8 +57,9 @@ public class KubernetesMembershipProvider extends CloudMembershipProvider {
 
         // Set up Kubernetes API parameters
         String namespace = getEnv("KUBERNETES_NAMESPACE", CUSTOM_ENV_PREFIX + "NAMESPACE");
-        if (namespace == null || namespace.length() == 0)
-            throw new RuntimeException(sm.getString("kubernetesMembershipProvider.noNamespace"));
+        if (namespace == null || namespace.length() == 0) {
+            throw new IllegalArgumentException(sm.getString("kubernetesMembershipProvider.noNamespace"));
+        }
 
         if (log.isDebugEnabled()) {
             log.debug(String.format("Namespace [%s] set; clustering enabled", namespace));
@@ -131,64 +133,70 @@ public class KubernetesMembershipProvider extends CloudMembershipProvider {
 
         List<MemberImpl> members = new ArrayList<>();
 
-        try (InputStream stream = streamProvider.openStream(url, headers, connectionTimeout, readTimeout)) {
-            JSONObject json = new JSONObject(new JSONTokener(new InputStreamReader(stream, "UTF-8")));
+        try (InputStream stream = streamProvider.openStream(url, headers, connectionTimeout, readTimeout);
+                InputStreamReader reader = new InputStreamReader(stream, "UTF-8")) {
+            parsePods(reader, members);
+        } catch (IOException e) {
+            log.error(sm.getString("kubernetesMembershipProvider.streamError"), e);
+        }
 
-            JSONArray items = json.getJSONArray("items");
+        return members.toArray(new Member[0]);
+    }
 
-            for (int i = 0; i < items.length(); i++) {
-                String phase;
-                String ip;
-                String name;
-                Instant creationTime;
+    protected void parsePods(Reader reader, List<MemberImpl> members)
+            throws IOException{
+        JSONObject json = new JSONObject(new JSONTokener(reader));
 
-                try {
-                    JSONObject item = items.getJSONObject(i);
-                    JSONObject status = item.getJSONObject("status");
-                    phase = status.getString("phase");
+        JSONArray items = json.getJSONArray("items");
 
-                    // Ignore shutdown pods
-                    if (!phase.equals("Running"))
-                        continue;
+        for (int i = 0; i < items.length(); i++) {
+            String phase;
+            String ip;
+            String name;
+            Instant creationTime;
 
-                    ip = status.getString("podIP");
+            try {
+                JSONObject item = items.getJSONObject(i);
+                JSONObject status = item.getJSONObject("status");
+                phase = status.getString("phase");
 
-                    // Get name & start time
-                    JSONObject metadata = item.getJSONObject("metadata");
-                    name = metadata.getString("name");
-                    String timestamp = metadata.getString("creationTimestamp");
-                    creationTime = Instant.parse(timestamp);
-                } catch (JSONException e) {
-                    log.warn(sm.getString("kubernetesMembershipProvider.jsonError"), e);
+                // Ignore shutdown pods
+                if (!phase.equals("Running"))
                     continue;
-                }
 
-                // We found ourselves, ignore
-                if (name.equals(hostName))
-                    continue;
+                ip = status.getString("podIP");
 
-                // id = md5(hostname)
-                byte[] id = md5.digest(name.getBytes());
-                long aliveTime = Duration.between(creationTime, startTime).getSeconds() * 1000; // aliveTime is in ms
-
-                MemberImpl member = null;
-                try {
-                    member = new MemberImpl(ip, port, aliveTime);
-                } catch (IOException e) {
-                    // Shouldn't happen:
-                    // an exception is thrown if hostname can't be resolved to IP, but we already provide an IP
-                    log.warn(sm.getString("kubernetesMembershipProvider.memberError"), e);
-                    continue;
-                }
+                // Get name & start time
+                JSONObject metadata = item.getJSONObject("metadata");
+                name = metadata.getString("name");
+                String timestamp = metadata.getString("creationTimestamp");
+                creationTime = Instant.parse(timestamp);
+            } catch (JSONException e) {
+                log.error(sm.getString("kubernetesMembershipProvider.jsonError"), e);
+                continue;
+            }
 
-                member.setUniqueId(id);
-                members.add(member);
+            // We found ourselves, ignore
+            if (name.equals(hostName))
+                continue;
+
+            // id = md5(hostname)
+            byte[] id = md5.digest(name.getBytes());
+            long aliveTime = Duration.between(creationTime, startTime).getSeconds() * 1000; // aliveTime is in ms
+
+            MemberImpl member = null;
+            try {
+                member = new MemberImpl(ip, port, aliveTime);
+            } catch (IOException e) {
+                // Shouldn't happen:
+                // an exception is thrown if hostname can't be resolved to IP, but we already provide an IP
+                log.error(sm.getString("kubernetesMembershipProvider.memberError"), e);
+                continue;
             }
-        } catch (IOException e) {
-            log.warn(sm.getString("kubernetesMembershipProvider.streamError"), e);
-        }
 
-        return members.toArray(new Member[0]);
+            member.setUniqueId(id);
+            members.add(member);
+        }
     }
 
 }

==================================================
