630fed5843666ae2b53c0b68131bcbfb991486bb
==================================================
Remove duplicate code on ManagerBase and DeltaManager.
==================================================
Keiichi Fujino
==================================================
Thu Feb 14 08:57:43 2013 +0000
==================================================
Manager.java
Remove duplicate code on ManagerBase and DeltaManager.
Introduce following interfaces.
  Manager#changeSessionId(Session, String)
  Session#tellChangedSessionId(String, String, boolean, boolean)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1446072 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Session.java
index 42cdbfcf76..c0112ff282 100644
--- a/java/org/apache/catalina/Manager.java
+++ b/java/org/apache/catalina/Manager.java
@@ -279,6 +279,15 @@ public interface Manager {
     public void changeSessionId(Session session);
 
 
+    /**
+     * Change the session ID of the current session to a specified session ID.
+     *
+     * @param session   The session to change the session ID for
+     * @param newId   new session ID
+     */
+    public void changeSessionId(Session session, String newId);
+
+
     /**
      * Get a session from the recycled ones or create a new empty one.
      * The PersistentManager manager does not need to create session data

==================================================
DeltaManager.java
index c289c52e6a..c403876732 100644
--- a/java/org/apache/catalina/Session.java
+++ b/java/org/apache/catalina/Session.java
@@ -327,4 +327,18 @@ public interface Session {
     public void setNote(String name, Object value);
 
 
+    /**
+     * Inform the listeners about the change session ID.
+     *
+     * @param newId  new session ID
+     * @param oldId  old session ID
+     * @param notifySessionListeners  Should any associated sessionListeners be
+     *        notified that session ID has been changed?     
+     * @param notifyContainerListeners  Should any associated ContainerListeners
+     *        be notified that session ID has been changed?
+     */
+    public void tellChangedSessionId(String newId, String oldId,
+            boolean notifySessionListeners, boolean notifyContainerListeners);
+
+
 }

==================================================
ManagerBase.java
index 6fc91ae519..6628aa20bd 100644
--- a/java/org/apache/catalina/ha/session/DeltaManager.java
+++ b/java/org/apache/catalina/ha/session/DeltaManager.java
@@ -526,13 +526,31 @@ public class DeltaManager extends ClusterManagerBase{
         changeSessionId(session, true);
     }
 
-    public void changeSessionId(Session session, boolean notify) {
-        // original sessionID
+    /**
+     * Change the session ID of the current session to a specified session ID.
+     *
+     * @param session   The session to change the session ID for
+     * @param newId   new session ID
+     */
+    @Override
+    public void changeSessionId(Session session, String newId) {
+        changeSessionId(session, newId, true);
+    }
+
+    protected void changeSessionId(Session session, boolean notify) {
         String orgSessionID = session.getId();
         super.changeSessionId(session);
-        if (notify && cluster.getMembers().length > 0) {
-            // changed sessionID
-            String newSessionID = session.getId();
+        if (notify) sendChangeSessionId(session.getId(), orgSessionID);
+    }
+
+    protected void changeSessionId(Session session, String newId, boolean notify) {
+        String orgSessionID = session.getId();
+        super.changeSessionId(session, newId);
+        if (notify) sendChangeSessionId(session.getId(), orgSessionID);
+    }
+
+    protected void sendChangeSessionId(String newSessionID, String orgSessionID) {
+        if (cluster.getMembers().length > 0) {
             try {
                 // serialize sessionID
                 byte[] data = serializeSessionId(newSessionID);
@@ -1469,35 +1487,8 @@ public class DeltaManager extends ClusterManagerBase{
         if (session != null) {
             String newSessionID = deserializeSessionId(msg.getSession());
             session.setPrimarySession(false);
-            session.setId(newSessionID, false);
-            if (notifyContainerListenersOnReplication) {
-                getContext().fireContainerEvent(Context.CHANGE_SESSION_ID_EVENT,
-                        new String[] {msg.getSessionID(), newSessionID});
-            }
-
-            if (notifySessionListenersOnReplication) {
-                Object listeners[] = getContext().
-                    getApplicationEventListeners();
-                if (listeners != null && listeners.length > 0) {
-                    HttpSessionEvent event =
-                        new HttpSessionEvent(session.getSession());
-
-                    for(Object listener : listeners) {
-                        if (!(listener instanceof HttpSessionIdListener))
-                            continue;
-
-                        HttpSessionIdListener idListener =
-                            (HttpSessionIdListener)listener;
-                        try {
-                            idListener.
-                                sessionIdChanged(event, msg.getSessionID());
-                        } catch (Throwable t) {
-                            log.error(sm.getString(
-                                "standardSession.sessionEvent"), t);
-                        }
-                    }
-                }
-            }
+            // change session id
+            changeSessionId(session, newSessionID, notifySessionListenersOnReplication, notifyContainerListenersOnReplication);
         }
     }
 

==================================================
StandardSession.java
index 1126334add..7cdb44aa0a 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -760,30 +760,27 @@ public abstract class ManagerBase extends LifecycleMBeanBase
      */
     @Override
     public void changeSessionId(Session session) {
+        String newId = generateSessionId();
+        changeSessionId(session, newId, true, true);
+    }
+
+    /**
+     * Change the session ID of the current session to a specified session ID.
+     *
+     * @param session   The session to change the session ID for
+     * @param newId   new session ID
+     */
+    @Override
+    public void changeSessionId(Session session, String newId) {
+        changeSessionId(session, newId, true, true);
+    }
+
+    protected void changeSessionId(Session session, String newId,
+            boolean notifySessionListeners, boolean notifyContainerListeners) {
         String oldId = session.getIdInternal();
-        session.setId(generateSessionId(), false);
-        String newId = session.getIdInternal();
-        context.fireContainerEvent(Context.CHANGE_SESSION_ID_EVENT,
-                new String[] {oldId, newId});
-
-        Object listeners[] = context.getApplicationEventListeners();
-        if (listeners != null && listeners.length > 0) {
-            HttpSessionEvent event =
-                new HttpSessionEvent(session.getSession());
-
-            for(Object listener : listeners) {
-                if (!(listener instanceof HttpSessionIdListener))
-                    continue;
-
-                HttpSessionIdListener idListener =
-                    (HttpSessionIdListener)listener;
-                try {
-                    idListener.sessionIdChanged(event, oldId);
-                } catch (Throwable t) {
-                    log.error(sm.getString("standardSession.sessionEvent"), t);
-                }
-            }
-        }
+        session.setId(newId, false);
+        session.tellChangedSessionId(newId, oldId,
+                notifySessionListeners, notifyContainerListeners);
     }
 
 

==================================================
