9a2ec523a63e5f862af069175af8006a510563a2
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63026
==================================================
Mark Thomas
==================================================
Wed Jan 23 14:45:34 2019 +0000
==================================================
JNDIRealm.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63026
Add a new attribute, forceDnHexEscape, to the JNDIRealm that forces escaping in the String representation of a distinguished name to use the \nn form. This may avoid issues with realms using Active Directory which appears to be more tolerant of optional escaping when the \nn form is used.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1851928 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestJNDIRealmConvertToHexEscape.java
index 090d64da82..d14e612d0e 100644
--- a/java/org/apache/catalina/realm/JNDIRealm.java
+++ b/java/org/apache/catalina/realm/JNDIRealm.java
@@ -497,8 +497,19 @@ public class JNDIRealm extends RealmBase {
      */
     private String sslProtocol;
 
+    private boolean forceDnHexEscape = false;
+
+
     // ------------------------------------------------------------- Properties
 
+    public boolean getForceDnHexEscape() {
+        return forceDnHexEscape;
+    }
+
+    public void setForceDnHexEscape(boolean forceDnHexEscape) {
+        this.forceDnHexEscape = forceDnHexEscape;
+    }
+
     /**
      * @return the type of authentication to use.
      */
@@ -2754,7 +2765,89 @@ public class JNDIRealm extends RealmBase {
                        resultName );
            }
         }
-        return name.toString();
+
+        if (getForceDnHexEscape()) {
+            // Bug 63026
+            return convertToHexEscape(name.toString());
+        } else {
+            return name.toString();
+        }
+    }
+
+
+    protected static String convertToHexEscape(String input) {
+        if (input.indexOf('\\') == -1) {
+            // No escaping present. Return original.
+            return input;
+        }
+
+        // +6 allows for 3 escaped characters by default
+        StringBuilder result = new StringBuilder(input.length() + 6);
+        boolean previousSlash = false;
+        for (int i = 0; i < input.length(); i++) {
+            char c = input.charAt(i);
+
+            if (previousSlash) {
+                switch (c) {
+                    case ' ': {
+                        result.append("\\20");
+                        break;
+                    }
+                    case '\"': {
+                        result.append("\\22");
+                        break;
+                    }
+                    case '#': {
+                        result.append("\\23");
+                        break;
+                    }
+                    case '+': {
+                        result.append("\\2B");
+                        break;
+                    }
+                    case ',': {
+                        result.append("\\2C");
+                        break;
+                    }
+                    case ';': {
+                        result.append("\\3B");
+                        break;
+                    }
+                    case '<': {
+                        result.append("\\3C");
+                        break;
+                    }
+                    case '=': {
+                        result.append("\\3D");
+                        break;
+                    }
+                    case '>': {
+                        result.append("\\3E");
+                        break;
+                    }
+                    case '\\': {
+                        result.append("\\5C");
+                        break;
+                    }
+                    default:
+                        result.append('\\');
+                        result.append(c);
+                }
+                previousSlash = false;
+            } else {
+                if (c == '\\') {
+                    previousSlash = true;
+                } else {
+                    result.append(c);
+                }
+            }
+        }
+
+        if (previousSlash) {
+            result.append('\\');
+        }
+
+        return result.toString();
     }
 
 

==================================================
