53c75bfc9948d0e47d3db19cd652caea31d417fd
==================================================
Make the manifest of the exploded WAR available to resources extracted from that WAR.
==================================================
Mark Thomas
==================================================
Thu Jul 2 19:42:30 2015 +0000
==================================================
DirResourceSet.java
Make the manifest of the exploded WAR available to resources extracted from that WAR.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1688896 13f79535-47bb-0310-9956-ffa450edef68



==================================================
FileResource.java
index 92bd02ec14..0ddb49b7db 100644
--- a/java/org/apache/catalina/webresources/DirResourceSet.java
+++ b/java/org/apache/catalina/webresources/DirResourceSet.java
@@ -17,10 +17,12 @@
 package org.apache.catalina.webresources;
 
 import java.io.File;
+import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Set;
+import java.util.jar.Manifest;
 
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.WebResource;
@@ -28,12 +30,16 @@ import org.apache.catalina.WebResourceRoot;
 import org.apache.catalina.WebResourceRoot.ResourceSetType;
 import org.apache.catalina.util.IOTools;
 import org.apache.catalina.util.ResourceSet;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * Represents a {@link org.apache.catalina.WebResourceSet} based on a directory.
  */
 public class DirResourceSet extends AbstractFileResourceSet {
 
+    private static final Log log = LogFactory.getLog(DirResourceSet.class);
+
     /**
      * A no argument constructor is required for this to work with the digester.
      */
@@ -102,7 +108,7 @@ public class DirResourceSet extends AbstractFileResourceSet {
             if (f.isDirectory() && path.charAt(path.length() - 1) != '/') {
                 path = path + '/';
             }
-            return new FileResource(root, path, f, isReadOnly());
+            return new FileResource(root, path, f, isReadOnly(), getManifest());
         } else {
             return new EmptyResource(root, path);
         }
@@ -248,4 +254,22 @@ public class DirResourceSet extends AbstractFileResourceSet {
                     getBase(), File.separator, getInternalPath()));
         }
     }
+
+    //-------------------------------------------------------- Lifecycle methods
+    @Override
+    protected void initInternal() throws LifecycleException {
+        super.initInternal();
+        // Is this an exploded web application?
+        if (getWebAppMount().equals("")) {
+            // Look for a manifest
+            File mf = file("META-INF/MANIFEST.MF", true);
+            if (mf != null && mf.isFile()) {
+                try (FileInputStream fis = new FileInputStream(mf)) {
+                    setManifest(new Manifest(fis));
+                } catch (IOException e) {
+                    log.warn(sm.getString("dirResourceSet.manifestFail", mf.getAbsolutePath()), e);
+                }
+            }
+        }
+    }
 }

==================================================
FileResourceSet.java
index 3e0da94c92..abfaf6834c 100644
--- a/java/org/apache/catalina/webresources/FileResource.java
+++ b/java/org/apache/catalina/webresources/FileResource.java
@@ -43,9 +43,10 @@ public class FileResource extends AbstractResource {
     private final File resource;
     private final String name;
     private final boolean readOnly;
+    private final Manifest manifest;
 
     public FileResource(WebResourceRoot root, String webAppPath,
-            File resource, boolean readOnly) {
+            File resource, boolean readOnly, Manifest manifest) {
         super(root,webAppPath);
         this.resource = resource;
 
@@ -67,6 +68,7 @@ public class FileResource extends AbstractResource {
         }
 
         this.readOnly = readOnly;
+        this.manifest = manifest;
     }
 
     @Override
@@ -218,7 +220,7 @@ public class FileResource extends AbstractResource {
 
     @Override
     public Manifest getManifest() {
-        return null;
+        return manifest;
     }
 
     @Override

==================================================
AbstractTestResourceSet.java
index 5bea7cc0b1..fe32ea3603 100644
--- a/java/org/apache/catalina/webresources/LocalStrings.properties
+++ b/java/org/apache/catalina/webresources/LocalStrings.properties
@@ -25,6 +25,7 @@ cache.backgroundEvictFail=The background cache eviction process was unable to fr
 cache.objectMaxSizeTooBig=The value of [{0}]kB for objectMaxSize is larger than the limit of maxSize/20 so has been reduced to [{1}]kB
 cache.objectMaxSizeTooBigBytes=The value specified for the maximum object size to cache [{0}]kB is greater than Integer.MAX_VALUE bytes which is the maximum size that can be cached. The limit will be set to Integer.MAX_VALUE bytes.
 
+dirResourceSet.manifestFail=Failed to read manifest from [{0}]
 dirResourceSet.notDirectory=The directory specified by base and internal path [{0}]{1}[{2}] does not exist.
 dirResourceSet.writeExists=The target of the write already exists
 dirResourceSet.writeNpe=The input stream may not be null

==================================================
