42d5e8214de2899e2878feb76fce25e4653b6387
==================================================
Move URL decoding util methods to support upcoming refactoring of
==================================================
Mark Emlyn
==================================================
Mon Jul 8 20:32:53 2013 +0000
==================================================
StandardContext.java
Move URL decoding util methods to support upcoming refactoring of
web.xml parsing.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1500934 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ErrorPage.java
index 195b3dd586..55480c3419 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -115,7 +115,6 @@ import org.apache.catalina.startup.TldConfig;
 import org.apache.catalina.util.CharsetMapper;
 import org.apache.catalina.util.ContextName;
 import org.apache.catalina.util.ExtensionValidator;
-import org.apache.catalina.util.RequestUtil;
 import org.apache.catalina.util.URLEncoder;
 import org.apache.catalina.webresources.StandardRoot;
 import org.apache.juli.logging.Log;
@@ -125,6 +124,7 @@ import org.apache.tomcat.InstanceManager;
 import org.apache.tomcat.JarScanner;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.IntrospectionUtils;
+import org.apache.tomcat.util.buf.UDecoder;
 import org.apache.tomcat.util.scan.StandardJarScanner;
 
 /**
@@ -3172,7 +3172,7 @@ public class StandardContext extends ContainerBase
         if (findChild(name) == null)
             throw new IllegalArgumentException
                 (sm.getString("standardContext.servletMap.name", name));
-        String decodedPattern = adjustURLPattern(RequestUtil.URLDecode(pattern));
+        String decodedPattern = adjustURLPattern(UDecoder.URLDecode(pattern));
         if (!validateURLPattern(decodedPattern))
             throw new IllegalArgumentException
                 (sm.getString("standardContext.servletMap.pattern", decodedPattern));

==================================================
FilterMap.java
index 3114fcc966..43707285f0 100644
--- a/java/org/apache/catalina/deploy/ErrorPage.java
+++ b/java/org/apache/catalina/deploy/ErrorPage.java
@@ -21,7 +21,7 @@ package org.apache.catalina.deploy;
 
 import java.io.Serializable;
 
-import org.apache.catalina.util.RequestUtil;
+import org.apache.tomcat.util.buf.UDecoder;
 
 
 /**
@@ -142,7 +142,7 @@ public class ErrorPage implements Serializable {
         //        if ((location == null) || !location.startsWith("/"))
         //            throw new IllegalArgumentException
         //                ("Error Page Location must start with a '/'");
-        this.location = RequestUtil.URLDecode(location);
+        this.location = UDecoder.URLDecode(location);
 
     }
 

==================================================
LoginConfig.java
index b29e915d2b..a42e137703 100644
--- a/java/org/apache/catalina/deploy/FilterMap.java
+++ b/java/org/apache/catalina/deploy/FilterMap.java
@@ -25,7 +25,7 @@ import java.util.Locale;
 
 import javax.servlet.DispatcherType;
 
-import org.apache.catalina.util.RequestUtil;
+import org.apache.tomcat.util.buf.UDecoder;
 
 
 /**
@@ -138,7 +138,7 @@ public class FilterMap implements Serializable {
         } else {
             String[] results = new String[urlPatterns.length + 1];
             System.arraycopy(urlPatterns, 0, results, 0, urlPatterns.length);
-            results[urlPatterns.length] = RequestUtil.URLDecode(urlPattern);
+            results[urlPatterns.length] = UDecoder.URLDecode(urlPattern);
             urlPatterns = results;
         }
     }

==================================================
SecurityCollection.java
index a97862c853..1d78d8990b 100644
--- a/java/org/apache/catalina/deploy/LoginConfig.java
+++ b/java/org/apache/catalina/deploy/LoginConfig.java
@@ -21,7 +21,7 @@ package org.apache.catalina.deploy;
 
 import java.io.Serializable;
 
-import org.apache.catalina.util.RequestUtil;
+import org.apache.tomcat.util.buf.UDecoder;
 
 
 /**
@@ -103,7 +103,7 @@ public class LoginConfig implements Serializable {
         //        if ((errorPage == null) || !errorPage.startsWith("/"))
         //            throw new IllegalArgumentException
         //                ("Error Page resource path must start with a '/'");
-        this.errorPage = RequestUtil.URLDecode(errorPage);
+        this.errorPage = UDecoder.URLDecode(errorPage);
     }
 
 
@@ -120,7 +120,7 @@ public class LoginConfig implements Serializable {
         //        if ((loginPage == null) || !loginPage.startsWith("/"))
         //            throw new IllegalArgumentException
         //                ("Login Page resource path must start with a '/'");
-        this.loginPage = RequestUtil.URLDecode(loginPage);
+        this.loginPage = UDecoder.URLDecode(loginPage);
     }
 
 

==================================================
WebdavServlet.java
index 67b117a437..223bf05028 100644
--- a/java/org/apache/catalina/deploy/SecurityCollection.java
+++ b/java/org/apache/catalina/deploy/SecurityCollection.java
@@ -21,7 +21,7 @@ package org.apache.catalina.deploy;
 
 import java.io.Serializable;
 
-import org.apache.catalina.util.RequestUtil;
+import org.apache.tomcat.util.buf.UDecoder;
 
 
 /**
@@ -214,7 +214,7 @@ public class SecurityCollection implements Serializable {
         if (pattern == null)
             return;
 
-        String decodedPattern = RequestUtil.URLDecode(pattern);
+        String decodedPattern = UDecoder.URLDecode(pattern);
         String results[] = new String[patterns.length + 1];
         for (int i = 0; i < patterns.length; i++) {
             results[i] = patterns[i];

==================================================
RequestUtil.java
index fe0cba6d1d..2c65341fc4 100644
--- a/java/org/apache/catalina/util/LocalStrings.properties
+++ b/java/org/apache/catalina/util/LocalStrings.properties
@@ -38,8 +38,6 @@ lifecycleMBeanBase.unregisterFail=Failed to unregister MBean with name [{0}] dur
 lifecycleMBeanBase.unregisterNoServer=No MBean server was available to unregister the MBean [{0}]
 requestUtil.convertHexDigit.notHex=[{0}] is not a hexadecimal digit
 requestUtil.parseParameters.uee=Unable to parse the parameters since the encoding [{0}] is not supported.
-requestUtil.urlDecode.missingDigit=The % character must be followed by two hexademical digits
-requestUtil.urlDecode.uee=Unable to URL decode the specified input since the encoding [{0}] is not supported.
 SecurityUtil.doAsPrivilege=An exception occurs when running the PrivilegedExceptionAction block.
 sessionIdGenerator.createRandom=Creation of SecureRandom instance for session ID generation using [{0}] took [{1}] milliseconds.
 sessionIdGenerator.random=Exception initializing random number generator of class [{0}]. Falling back to java.secure.SecureRandom

==================================================
UDecoder.java
index 4b4ccb975d..49b1af9f33 100644
--- a/java/org/apache/tomcat/util/buf/LocalStrings.properties
+++ b/java/org/apache/tomcat/util/buf/LocalStrings.properties
@@ -15,3 +15,7 @@
 
 b2cConverter.unknownEncoding=The character encoding [{0}] is not supported
 c2bConverter.recycleFailed=Failed to recycle the C2B Converter. Creating new BufferedWriter, WriteConvertor and IntermediateOutputStream.
+
+uDecoder.urlDecode.missingDigit=The % character must be followed by two hexademical digits
+uDecoder.convertHexDigit.notHex=[{0}] is not a hexadecimal digit
+uDecoder.urlDecode.uee=Unable to URL decode the specified input since the encoding [{0}] is not supported.

==================================================
TestUDecoder.java
index f3ce670ab1..fa0d92da35 100644
--- a/java/org/apache/tomcat/util/buf/UDecoder.java
+++ b/java/org/apache/tomcat/util/buf/UDecoder.java
@@ -18,6 +18,11 @@ package org.apache.tomcat.util.buf;
 
 import java.io.CharConversionException;
 import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.res.StringManager;
 
 /**
  *  All URL decoding happens here. This way we can reuse, review, optimize
@@ -29,6 +34,11 @@ import java.io.IOException;
  */
 public final class UDecoder {
 
+    private static final StringManager sm =
+            StringManager.getManager(Constants.Package);
+
+    private static final Log log = LogFactory.getLog(UDecoder.class);
+
     private static final boolean ALLOW_ENCODED_SLASH =
         Boolean.valueOf(System.getProperty("org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH", "false")).booleanValue();
 
@@ -266,6 +276,128 @@ public final class UDecoder {
     }
 
 
+    /**
+     * Decode and return the specified URL-encoded String.
+     * When the byte array is converted to a string, the system default
+     * character encoding is used...  This may be different than some other
+     * servers. It is assumed the string is not a query string.
+     *
+     * @param str The url-encoded string
+     *
+     * @exception IllegalArgumentException if a '%' character is not followed
+     * by a valid 2-digit hexadecimal number
+     */
+    public static String URLDecode(String str) {
+        return URLDecode(str, null);
+    }
+
+
+    /**
+     * Decode and return the specified URL-encoded String. It is assumed the
+     * string is not a query string.
+     *
+     * @param str The url-encoded string
+     * @param enc The encoding to use; if null, the default encoding is used. If
+     * an unsupported encoding is specified null will be returned
+     * @exception IllegalArgumentException if a '%' character is not followed
+     * by a valid 2-digit hexadecimal number
+     */
+    public static String URLDecode(String str, String enc) {
+        return URLDecode(str, enc, false);
+    }
+
+
+    /**
+     * Decode and return the specified URL-encoded String.
+     *
+     * @param str The url-encoded string
+     * @param enc The encoding to use; if null, the default encoding is used. If
+     * an unsupported encoding is specified null will be returned
+     * @param isQuery Is this a query string being processed
+     * @exception IllegalArgumentException if a '%' character is not followed
+     * by a valid 2-digit hexadecimal number
+     */
+    public static String URLDecode(String str, String enc, boolean isQuery) {
+        if (str == null)
+            return (null);
+
+        // use the specified encoding to extract bytes out of the
+        // given string so that the encoding is not lost. If an
+        // encoding is not specified, use ISO-8859-1
+        byte[] bytes = null;
+        try {
+            if (enc == null) {
+                bytes = str.getBytes(B2CConverter.ISO_8859_1);
+            } else {
+                bytes = str.getBytes(B2CConverter.getCharset(enc));
+            }
+        } catch (UnsupportedEncodingException uee) {
+            if (log.isDebugEnabled()) {
+                log.debug(sm.getString("uDecoder.urlDecode.uee", enc), uee);
+            }
+        }
+
+        return URLDecode(bytes, enc, isQuery);
+
+    }
+
+
+    /**
+     * Decode and return the specified URL-encoded byte array.
+     *
+     * @param bytes The url-encoded byte array
+     * @param enc The encoding to use; if null, the default encoding is used. If
+     * an unsupported encoding is specified null will be returned
+     * @param isQuery Is this a query string being processed
+     * @exception IllegalArgumentException if a '%' character is not followed
+     * by a valid 2-digit hexadecimal number
+     */
+    public static String URLDecode(byte[] bytes, String enc, boolean isQuery) {
+
+        if (bytes == null)
+            return null;
+
+        int len = bytes.length;
+        int ix = 0;
+        int ox = 0;
+        while (ix < len) {
+            byte b = bytes[ix++];     // Get byte to test
+            if (b == '+' && isQuery) {
+                b = (byte)' ';
+            } else if (b == '%') {
+                if (ix + 2 > len) {
+                    throw new IllegalArgumentException(
+                            sm.getString("requestUtil.urlDecode.missingDigit"));
+                }
+                b = (byte) ((convertHexDigit(bytes[ix++]) << 4)
+                            + convertHexDigit(bytes[ix++]));
+            }
+            bytes[ox++] = b;
+        }
+        if (enc != null) {
+            try {
+                return new String(bytes, 0, ox, B2CConverter.getCharset(enc));
+            } catch (UnsupportedEncodingException uee) {
+                if (log.isDebugEnabled()) {
+                    log.debug(sm.getString("uDecoder.urlDecode.uee", enc), uee);
+                }
+                return null;
+            }
+        }
+        return new String(bytes, 0, ox);
+
+    }
+
+
+    private static byte convertHexDigit( byte b ) {
+        if ((b >= '0') && (b <= '9')) return (byte)(b - '0');
+        if ((b >= 'a') && (b <= 'f')) return (byte)(b - 'a' + 10);
+        if ((b >= 'A') && (b <= 'F')) return (byte)(b - 'A' + 10);
+        throw new IllegalArgumentException(
+                sm.getString("uDecoder.convertHexDigit.notHex",
+                        Character.valueOf((char)b)));
+    }
+
 
     private static boolean isHexDigit( int c ) {
         return ( ( c>='0' && c<='9' ) ||
@@ -273,6 +405,7 @@ public final class UDecoder {
                  ( c>='A' && c<='F' ));
     }
 
+
     private static int x2c( byte b1, byte b2 ) {
         int digit= (b1>='A') ? ( (b1 & 0xDF)-'A') + 10 :
             (b1 -'0');
@@ -282,6 +415,7 @@ public final class UDecoder {
         return digit;
     }
 
+
     private static int x2c( char b1, char b2 ) {
         int digit= (b1>='A') ? ( (b1 & 0xDF)-'A') + 10 :
             (b1 -'0');
@@ -290,5 +424,4 @@ public final class UDecoder {
             (b2 -'0');
         return digit;
     }
-
 }

==================================================
