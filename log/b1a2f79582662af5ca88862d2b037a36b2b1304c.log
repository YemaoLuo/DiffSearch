b1a2f79582662af5ca88862d2b037a36b2b1304c
==================================================
Additional review of the fix for bug 60013
==================================================
Mark Thomas
==================================================
Fri Sep 9 13:44:46 2016 +0000
==================================================
RewriteRule.java
Additional review of the fix for bug 60013
After review of the httpd behaviour, update the Rewrite valve to better
align with httpd and modify the existing tests where they do not reflect
current httpd behaviour.
Add additional tests to cover various combinations of R, B, NE and QSA
flags along with UTF-8 values in original URIs, re-written URIs,
original query strings and re-written query strings.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1760022 13f79535-47bb-0310-9956-ffa450edef68



==================================================
RewriteValve.java
index c368386c6c..96bc84189c 100644
--- a/java/org/apache/catalina/valves/rewrite/RewriteRule.java
+++ b/java/org/apache/catalina/valves/rewrite/RewriteRule.java
@@ -38,7 +38,6 @@ public class RewriteRule {
             substitution.setSub(substitutionString);
             substitution.parse(maps);
             substitution.setEscapeBackReferences(isEscapeBackReferences());
-            substitution.setNoEscape(isNoescape());
         }
         // Parse the pattern
         int flags = 0;

==================================================
Substitution.java
index 521f0e159c..18a47de9cd 100644
--- a/java/org/apache/catalina/valves/rewrite/RewriteValve.java
+++ b/java/org/apache/catalina/valves/rewrite/RewriteValve.java
@@ -23,6 +23,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.StringReader;
+import java.net.URLDecoder;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Hashtable;
@@ -44,15 +45,54 @@ import org.apache.catalina.Pipeline;
 import org.apache.catalina.connector.Connector;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
+import org.apache.catalina.util.URLEncoder;
 import org.apache.catalina.valves.ValveBase;
 import org.apache.tomcat.util.buf.CharChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
-import org.apache.tomcat.util.buf.UDecoder;
 import org.apache.tomcat.util.buf.UriUtil;
 import org.apache.tomcat.util.http.RequestUtil;
 
 public class RewriteValve extends ValveBase {
 
+    static URLEncoder ENCODER = new URLEncoder();
+    static {
+        /*
+         * Replicates httpd's encoding
+         * Primarily aimed at encoding URI paths, so from the spec:
+         *
+         * pchar = unreserved / pct-encoded / sub-delims / ":" / "@"
+         *
+         * unreserved  = ALPHA / DIGIT / "-" / "." / "_" / "~"
+         *
+         * sub-delims = "!" / "$" / "&" / "'" / "(" / ")"
+         *              / "*" / "+" / "," / ";" / "="
+         */
+        // ALPHA and DIGIT are always treated as safe characters
+        // Add the remaining unreserved characters
+        ENCODER.addSafeCharacter('-');
+        ENCODER.addSafeCharacter('.');
+        ENCODER.addSafeCharacter('_');
+        ENCODER.addSafeCharacter('~');
+        // Add the sub-delims
+        ENCODER.addSafeCharacter('!');
+        ENCODER.addSafeCharacter('$');
+        ENCODER.addSafeCharacter('&');
+        ENCODER.addSafeCharacter('\'');
+        ENCODER.addSafeCharacter('(');
+        ENCODER.addSafeCharacter(')');
+        ENCODER.addSafeCharacter('*');
+        ENCODER.addSafeCharacter('+');
+        ENCODER.addSafeCharacter(',');
+        ENCODER.addSafeCharacter(';');
+        ENCODER.addSafeCharacter('=');
+        // Add the remaining literals
+        ENCODER.addSafeCharacter(':');
+        ENCODER.addSafeCharacter('@');
+        // Add '/' so it isn't encoded when we encode a path
+        ENCODER.addSafeCharacter('/');
+    }
+
+
     /**
      * The rewrite rules that the valve will use.
      */
@@ -285,13 +325,13 @@ public class RewriteValve extends ValveBase {
             // converted to a string
             MessageBytes urlMB = context ? request.getRequestPathMB() : request.getDecodedRequestURIMB();
             urlMB.toChars();
-            CharSequence url = urlMB.getCharChunk();
+            CharSequence urlDecoded = urlMB.getCharChunk();
             CharSequence host = request.getServerName();
             boolean rewritten = false;
             boolean done = false;
             for (int i = 0; i < rules.length; i++) {
                 RewriteRule rule = rules[i];
-                CharSequence test = (rule.isHost()) ? host : url;
+                CharSequence test = (rule.isHost()) ? host : urlDecoded;
                 CharSequence newtest = rule.evaluate(test, resolver);
                 if (newtest != null && !test.equals(newtest.toString())) {
                     if (container.getLogger().isDebugEnabled()) {
@@ -301,7 +341,7 @@ public class RewriteValve extends ValveBase {
                     if (rule.isHost()) {
                         host = newtest;
                     } else {
-                        url = newtest;
+                        urlDecoded = newtest;
                     }
                     rewritten = true;
                 }
@@ -323,35 +363,55 @@ public class RewriteValve extends ValveBase {
                 // - redirect (code)
                 if (rule.isRedirect() && newtest != null) {
                     // append the query string to the url if there is one and it hasn't been rewritten
-                    String queryString = request.getQueryString();
-                    StringBuffer urlString = new StringBuffer(url);
-                    if (queryString != null && queryString.length() > 0) {
-                        int index = urlString.indexOf("?");
-                        if (index != -1) {
-                            // if qsa is specified append the query
+                    String originalQueryStringEncoded = request.getQueryString();
+                    String urlStringDecoded = urlDecoded.toString();
+                    int index = urlStringDecoded.indexOf("?");
+                    String rewrittenQueryStringDecoded;
+                    if (index == -1) {
+                        rewrittenQueryStringDecoded = null;
+                    } else {
+                        rewrittenQueryStringDecoded = urlStringDecoded.substring(index + 1);
+                        urlStringDecoded = urlStringDecoded.substring(0, index);
+                    }
+
+                    StringBuffer urlStringEncoded = new StringBuffer(ENCODER.encode(urlStringDecoded, request.getConnector().getURIEncoding()));
+                    if (originalQueryStringEncoded != null && originalQueryStringEncoded.length() > 0) {
+                        if (rewrittenQueryStringDecoded == null) {
+                            urlStringEncoded.append('?');
+                            urlStringEncoded.append(originalQueryStringEncoded);
+                        } else {
                             if (rule.isQsappend()) {
-                                urlString.append('&');
-                                urlString.append(queryString);
-                            }
-                            // if the ? is the last character delete it, its only purpose was to
-                            // prevent the rewrite module from appending the query string
-                            else if (index == urlString.length() - 1) {
-                                urlString.deleteCharAt(index);
+                                // if qsa is specified append the query
+                                urlStringEncoded.append('?');
+                                urlStringEncoded.append(ENCODER.encode(rewrittenQueryStringDecoded, request.getConnector().getURIEncoding()));
+                                urlStringEncoded.append('&');
+                                urlStringEncoded.append(originalQueryStringEncoded);
+                            } else if (index == urlStringEncoded.length() - 1) {
+                                // if the ? is the last character delete it, its only purpose was to
+                                // prevent the rewrite module from appending the query string
+                                urlStringEncoded.deleteCharAt(index);
+                            } else {
+                                urlStringEncoded.append('?');
+                                urlStringEncoded.append(ENCODER.encode(rewrittenQueryStringDecoded, request.getConnector().getURIEncoding()));
                             }
-                        } else {
-                            urlString.append('?');
-                            urlString.append(queryString);
                         }
+                    } else if (rewrittenQueryStringDecoded != null) {
+                        urlStringEncoded.append('?');
+                        urlStringEncoded.append(ENCODER.encode(rewrittenQueryStringDecoded, request.getConnector().getURIEncoding()));
                     }
 
                     // Insert the context if
                     // 1. this valve is associated with a context
                     // 2. the url starts with a leading slash
                     // 3. the url isn't absolute
-                    if (context && urlString.charAt(0) == '/' && !UriUtil.hasScheme(urlString)) {
-                        urlString.insert(0, request.getContext().getEncodedPath());
+                    if (context && urlStringEncoded.charAt(0) == '/' && !UriUtil.hasScheme(urlStringEncoded)) {
+                        urlStringEncoded.insert(0, request.getContext().getEncodedPath());
+                    }
+                    if (rule.isNoescape()) {
+                        response.sendRedirect(URLDecoder.decode(urlStringEncoded.toString(), request.getConnector().getURIEncoding()));
+                    } else {
+                        response.sendRedirect(urlStringEncoded.toString());
                     }
-                    response.sendRedirect(urlString.toString());
                     response.setStatus(rule.getRedirectCode());
                     done = true;
                     break;
@@ -384,9 +444,9 @@ public class RewriteValve extends ValveBase {
                 // - qsappend
                 if (rule.isQsappend() && newtest != null) {
                     String queryString = request.getQueryString();
-                    String urlString = url.toString();
+                    String urlString = urlDecoded.toString();
                     if (urlString.indexOf('?') != -1 && queryString != null) {
-                        url = urlString + "&" + queryString;
+                        urlDecoded = urlString + "&" + queryString;
                     }
                 }
 
@@ -421,42 +481,46 @@ public class RewriteValve extends ValveBase {
             if (rewritten) {
                 if (!done) {
                     // See if we need to replace the query string
-                    String urlString = url.toString();
-                    String queryString = null;
-                    int queryIndex = urlString.indexOf('?');
+                    String urlStringDecoded = urlDecoded.toString();
+                    String queryStringDecoded = null;
+                    int queryIndex = urlStringDecoded.indexOf('?');
                     if (queryIndex != -1) {
-                        queryString = urlString.substring(queryIndex+1);
-                        urlString = urlString.substring(0, queryIndex);
+                        queryStringDecoded = urlStringDecoded.substring(queryIndex+1);
+                        urlStringDecoded = urlStringDecoded.substring(0, queryIndex);
                     }
-                    // Set the new 'original' URI
+                    // Save the current context path before re-writing starts
                     String contextPath = null;
                     if (context) {
                         contextPath = request.getContextPath();
                     }
+                    // Populated the encoded (i.e. undecoded) requestURI
                     request.getCoyoteRequest().requestURI().setString(null);
                     CharChunk chunk = request.getCoyoteRequest().requestURI().getCharChunk();
                     chunk.recycle();
                     if (context) {
+                        // This is neither decoded nor normalized
                         chunk.append(contextPath);
                     }
-                    chunk.append(urlString);
+                    chunk.append(ENCODER.encode(urlStringDecoded, request.getConnector().getURIEncoding()));
                     request.getCoyoteRequest().requestURI().toChars();
                     // Decoded and normalized URI
+                    // Rewriting may have denormalized the URL
+                    urlStringDecoded = RequestUtil.normalize(urlStringDecoded);
                     request.getCoyoteRequest().decodedURI().setString(null);
                     chunk = request.getCoyoteRequest().decodedURI().getCharChunk();
                     chunk.recycle();
                     if (context) {
-                        chunk.append(contextPath);
+                        // This is decoded and normalized
+                        chunk.append(request.getServletContext().getContextPath());
                     }
-                    chunk.append(RequestUtil.normalize(UDecoder.URLDecode(
-                            urlString, request.getConnector().getURIEncoding())));
+                    chunk.append(urlStringDecoded);
                     request.getCoyoteRequest().decodedURI().toChars();
                     // Set the new Query if there is one
-                    if (queryString != null) {
+                    if (queryStringDecoded != null) {
                         request.getCoyoteRequest().queryString().setString(null);
                         chunk = request.getCoyoteRequest().queryString().getCharChunk();
                         chunk.recycle();
-                        chunk.append(queryString);
+                        chunk.append(ENCODER.encode(queryStringDecoded, request.getConnector().getURIEncoding()));
                         request.getCoyoteRequest().queryString().toChars();
                     }
                     // Set the new host if it changed

==================================================
TestRewriteValve.java
index 30afa43911..d1b16dee05 100644
--- a/java/org/apache/catalina/valves/rewrite/Substitution.java
+++ b/java/org/apache/catalina/valves/rewrite/Substitution.java
@@ -20,25 +20,8 @@ import java.util.ArrayList;
 import java.util.Map;
 import java.util.regex.Matcher;
 
-import org.apache.catalina.util.URLEncoder;
-
 public class Substitution {
 
-    private static URLEncoder STATIC_ENCODER = new URLEncoder();
-    static {
-        // Defaults
-        STATIC_ENCODER.addSafeCharacter('~');
-        STATIC_ENCODER.addSafeCharacter('-');
-        STATIC_ENCODER.addSafeCharacter('_');
-        STATIC_ENCODER.addSafeCharacter('.');
-        STATIC_ENCODER.addSafeCharacter('*');
-        STATIC_ENCODER.addSafeCharacter('/');
-        // httpd doesn't encode these either
-        STATIC_ENCODER.addSafeCharacter('?');
-        STATIC_ENCODER.addSafeCharacter('=');
-    }
-
-
     public abstract class SubstitutionElement {
         public abstract String evaluate(Matcher rule, Matcher cond, Resolver resolver);
     }
@@ -48,11 +31,7 @@ public class Substitution {
 
         @Override
         public String evaluate(Matcher rule, Matcher cond, Resolver resolver) {
-            if (noEscape) {
-                return value;
-            } else {
-                return STATIC_ENCODER.encode(value, resolver.getUriEncoding());
-            }
+            return value;
         }
 
     }
@@ -66,7 +45,7 @@ public class Substitution {
                 //       We might want to consider providing a dedicated decoder
                 //       with an option to add additional safe characters to
                 //       provide users with more flexibility
-                return URLEncoder.DEFAULT.encode(rule.group(n), resolver.getUriEncoding());
+                return RewriteValve.ENCODER.encode(rule.group(n), resolver.getUriEncoding());
             } else {
                 return rule.group(n);
             }
@@ -139,11 +118,6 @@ public class Substitution {
         this.escapeBackReferences = escapeBackReferences;
     }
 
-    private boolean noEscape;
-    void setNoEscape(boolean noEscape) {
-        this.noEscape = noEscape;
-    }
-
     public void parse(Map<String, RewriteMap> maps) {
 
         ArrayList<SubstitutionElement> elements = new ArrayList<>();

==================================================
