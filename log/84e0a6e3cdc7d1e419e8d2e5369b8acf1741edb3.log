84e0a6e3cdc7d1e419e8d2e5369b8acf1741edb3
==================================================
Fix a few Java8 Javadoc warnings
==================================================
Mark Emlyn
==================================================
Thu Oct 23 11:18:20 2014 +0000
==================================================
MethodExpressionImpl.java
Fix a few Java8 Javadoc warnings

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1633791 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ValueExpressionImpl.java
index 9416b3ebf5..a3db932b1f 100644
--- a/java/org/apache/el/MethodExpressionImpl.java
+++ b/java/org/apache/el/MethodExpressionImpl.java
@@ -88,20 +88,10 @@ public final class MethodExpressionImpl extends MethodExpression implements
 
     private Class<?>[] paramTypes;
 
-    /**
-     *
-     */
     public MethodExpressionImpl() {
         super();
     }
 
-    /**
-     * @param expr
-     * @param node
-     * @param fnMapper
-     * @param expectedType
-     * @param paramTypes
-     */
     public MethodExpressionImpl(String expr, Node node,
             FunctionMapper fnMapper, VariableMapper varMapper,
             Class<?> expectedType, Class<?>[] paramTypes) {

==================================================
ELSupport.java
index 3b73658cb7..7ed3e26bac 100644
--- a/java/org/apache/el/ValueExpressionImpl.java
+++ b/java/org/apache/el/ValueExpressionImpl.java
@@ -102,9 +102,6 @@ public final class ValueExpressionImpl extends ValueExpression implements
         super();
     }
 
-    /**
-     *
-     */
     public ValueExpressionImpl(String expr, Node node, FunctionMapper fnMapper,
             VariableMapper varMapper, Class<?> expectedType) {
         this.expr = expr;

==================================================
FunctionMapperImpl.java
index dcf2a3de88..8dfbdaa1ca 100644
--- a/java/org/apache/el/lang/ELSupport.java
+++ b/java/org/apache/el/lang/ELSupport.java
@@ -150,7 +150,7 @@ public class ELSupport {
      * @param obj0 the first object
      * @param obj1 the second object
      * @return true if the objects are equal
-     * @throws ELException
+     * @throws ELException if one of the coercion fails
      */
     public static final boolean equals(final Object obj0, final Object obj1)
             throws ELException {
@@ -220,6 +220,8 @@ public class ELSupport {
      * Convert an object to Boolean.
      * Null and empty string are false.
      * @param obj the object to convert
+     * @param primitive is the target a primitive in which case coercion to null
+     *                  is not permitted
      * @return the Boolean value of the object
      * @throws ELException if object is not Boolean or String
      */
@@ -412,8 +414,8 @@ public class ELSupport {
     }
 
     /**
-     * Coerce an object to a string
-     * @param obj
+     * Coerce an object to a string.
+     * @param obj the object to convert
      * @return the String value of the object
      */
     public static final String coerceToString(final Object obj) {

==================================================
ArithmeticNode.java
index 9d76fca594..a302541691 100644
--- a/java/org/apache/el/lang/FunctionMapperImpl.java
+++ b/java/org/apache/el/lang/FunctionMapperImpl.java
@@ -96,9 +96,6 @@ public class FunctionMapperImpl extends FunctionMapper implements
         protected String prefix;
         protected String localName;
 
-        /**
-         *
-         */
         public Function(String prefix, String localName, Method m) {
             if (localName == null) {
                 throw new NullPointerException("LocalName cannot be null");

==================================================
BooleanNode.java
index dc101af4fe..b39091529a 100644
--- a/java/org/apache/el/parser/ArithmeticNode.java
+++ b/java/org/apache/el/parser/ArithmeticNode.java
@@ -14,22 +14,17 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.el.parser;
 
 import javax.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 
-
 /**
  * @author Jacob Hookom [jacob@hookom.net]
  */
 public abstract class ArithmeticNode extends SimpleNode {
 
-    /**
-     * @param i
-     */
     public ArithmeticNode(int i) {
         super(i);
     }

==================================================
Validation.java
index 69e9f5ab3d..2ef320c6bf 100644
--- a/java/org/apache/el/parser/BooleanNode.java
+++ b/java/org/apache/el/parser/BooleanNode.java
@@ -20,17 +20,15 @@ import javax.el.ELException;
 
 import org.apache.el.lang.EvaluationContext;
 
-
 /**
  * @author Jacob Hookom [jacob@hookom.net]
  */
 public abstract class BooleanNode extends SimpleNode {
-    /**
-     * @param i
-     */
+
     public BooleanNode(int i) {
         super(i);
     }
+
     @Override
     public Class<?> getType(EvaluationContext ctx)
             throws ELException {

==================================================
