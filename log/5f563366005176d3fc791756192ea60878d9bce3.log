5f563366005176d3fc791756192ea60878d9bce3
==================================================
Remove some more SPDY plumbing
==================================================
Mark Thomas
==================================================
Wed Apr 29 09:24:38 2015 +0000
==================================================
AbstractHttp11Protocol.java
Remove some more SPDY plumbing

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1676699 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProtocol.java
index a5a0d01f9c..1375274323 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -327,17 +327,6 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
         getEndpoint().setMaxKeepAliveRequests(mkar);
     }
 
-    protected NpnHandler<S> npnHandler;
-    @SuppressWarnings("unchecked")
-    public void setNpnHandler(String impl) {
-        try {
-            Class<?> c = Class.forName(impl);
-            npnHandler = (NpnHandler<S>) c.newInstance();
-        } catch (Exception ex) {
-            getLog().warn("Failed to init light protocol " + impl, ex);
-        }
-    }
-
 
     // ----------------------------------------------- HTTPS specific properties
     // -------------------------------------------- Handled via an SSLHostConfig

==================================================
Http11Nio2Protocol.java
index 59acc49121..93dabd74f8 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -21,7 +21,6 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.AprEndpoint;
 import org.apache.tomcat.util.net.AprEndpoint.Poller;
-import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 
 
@@ -171,15 +170,6 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
     }
 
 
-    @Override
-    public void start() throws Exception {
-        super.start();
-        if (npnHandler != null) {
-            long sslCtx = ((AprEndpoint) getEndpoint()).getJniSslContext();
-            npnHandler.init(getEndpoint(), sslCtx, getAdapter());
-        }
-    }
-
     // --------------------  Connection handler --------------------
 
     protected static class Http11ConnectionHandler
@@ -205,28 +195,6 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
             }
         }
 
-        @Override
-        public SocketState process(SocketWrapperBase<Long> socket,
-                SocketStatus status) {
-            if (getProtocol().npnHandler != null) {
-                Processor processor = null;
-                if (status == SocketStatus.OPEN_READ) {
-                    processor = connections.get(socket.getSocket());
-
-                }
-                if (processor == null) {
-                    // if not null - handled by http11
-                    SocketState socketState = getProtocol().npnHandler.process(socket, status);
-                    // handled by npn protocol.
-                    if (socketState == SocketState.CLOSED ||
-                            socketState == SocketState.LONG) {
-                        return socketState;
-                    }
-                }
-            }
-            return super.process(socket, status);
-        }
-
         @Override
         protected void longPoll(SocketWrapperBase<Long> socket, Processor processor) {
 

==================================================
Http11NioProtocol.java
index bdef63e50c..904d965547 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Protocol.java
@@ -23,7 +23,6 @@ import org.apache.tomcat.util.net.Nio2Channel;
 import org.apache.tomcat.util.net.Nio2Endpoint;
 import org.apache.tomcat.util.net.Nio2Endpoint.Handler;
 import org.apache.tomcat.util.net.Nio2Endpoint.Nio2SocketWrapper;
-import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 
 
@@ -47,16 +46,6 @@ public class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel>
     protected Log getLog() { return log; }
 
 
-    @Override
-    public void start() throws Exception {
-        super.start();
-        if (npnHandler != null) {
-            npnHandler.init(getEndpoint(), 0, getAdapter());
-        }
-    }
-
-
-
     // -------------------- Pool setup --------------------
 
     public void setAcceptorThreadPriority(int threadPriority) {
@@ -118,18 +107,6 @@ public class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel>
             }
         }
 
-        @Override
-        public SocketState process(SocketWrapperBase<Nio2Channel> socket,
-                SocketStatus status) {
-            if (getProtocol().npnHandler != null) {
-                SocketState ss = getProtocol().npnHandler.process(socket, status);
-                if (ss != SocketState.OPEN) {
-                    return ss;
-                }
-            }
-            return super.process(socket, status);
-        }
-
 
         @Override
         public void release(SocketWrapperBase<Nio2Channel> socket,

==================================================
NpnHandler.java
index 0a20fc06b6..ad3ac22434 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -25,7 +25,6 @@ import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.NioChannel;
 import org.apache.tomcat.util.net.NioEndpoint;
 import org.apache.tomcat.util.net.NioEndpoint.Handler;
-import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 
 
@@ -54,15 +53,6 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
     protected Log getLog() { return log; }
 
 
-    @Override
-    public void start() throws Exception {
-        super.start();
-        if (npnHandler != null) {
-            npnHandler.init(getEndpoint(), 0, getAdapter());
-        }
-    }
-
-
     // -------------------- Pool setup --------------------
 
     public void setPollerThreadCount(int count) {
@@ -169,18 +159,6 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
             }
         }
 
-        @Override
-        public SocketState process(SocketWrapperBase<NioChannel> socket,
-                SocketStatus status) {
-            if (getProtocol().npnHandler != null) {
-                SocketState ss = getProtocol().npnHandler.process(socket, status);
-                if (ss != SocketState.OPEN) {
-                    return ss;
-                }
-            }
-            return super.process(socket, status);
-        }
-
 
         @Override
         public void release(SocketWrapperBase<NioChannel> socket,

==================================================
