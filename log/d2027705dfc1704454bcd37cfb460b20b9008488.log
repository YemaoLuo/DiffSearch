d2027705dfc1704454bcd37cfb460b20b9008488
==================================================
Remove unused code. Move utility method that is only usedonce to where
==================================================
Mark Emlyn
==================================================
Sat Oct 22 19:23:17 2011 +0000
==================================================
Request.java
Remove unused code. Move utility method that is only usedonce to where
it is used.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1187754 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ContentType.java
index 7ae8f63e8b..d1a6e9cf7b 100644
--- a/java/org/apache/coyote/Request.java
+++ b/java/org/apache/coyote/Request.java
@@ -23,18 +23,17 @@ import java.util.HashMap;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.buf.UDecoder;
-import org.apache.tomcat.util.http.ContentType;
 import org.apache.tomcat.util.http.Cookies;
 import org.apache.tomcat.util.http.MimeHeaders;
 import org.apache.tomcat.util.http.Parameters;
 
 /**
- * This is a low-level, efficient representation of a server request. Most 
- * fields are GC-free, expensive operations are delayed until the  user code 
+ * This is a low-level, efficient representation of a server request. Most
+ * fields are GC-free, expensive operations are delayed until the  user code
  * needs the information.
  *
  * Processing is delegated to modules, using a hook mechanism.
- * 
+ *
  * This class is not intended for user code - it is used internally by tomcat
  * for processing the request in the most efficient way. Users ( servlets ) can
  * access the information using a facade, which provides the high-level view
@@ -50,7 +49,7 @@ import org.apache.tomcat.util.http.Parameters;
  * Tomcat defines a number of attributes:
  * <ul>
  *   <li>"org.apache.tomcat.request" - allows access to the low-level
- *       request object in trusted applications 
+ *       request object in trusted applications
  * </ul>
  *
  * @author James Duncan Davidson [duncan@eng.sun.com]
@@ -80,34 +79,34 @@ public final class Request {
 
 
     private int serverPort = -1;
-    private MessageBytes serverNameMB = MessageBytes.newInstance();
+    private final MessageBytes serverNameMB = MessageBytes.newInstance();
 
     private int remotePort;
     private int localPort;
 
-    private MessageBytes schemeMB = MessageBytes.newInstance();
+    private final MessageBytes schemeMB = MessageBytes.newInstance();
 
-    private MessageBytes methodMB = MessageBytes.newInstance();
-    private MessageBytes unparsedURIMB = MessageBytes.newInstance();
-    private MessageBytes uriMB = MessageBytes.newInstance();
-    private MessageBytes decodedUriMB = MessageBytes.newInstance();
-    private MessageBytes queryMB = MessageBytes.newInstance();
-    private MessageBytes protoMB = MessageBytes.newInstance();
+    private final MessageBytes methodMB = MessageBytes.newInstance();
+    private final MessageBytes unparsedURIMB = MessageBytes.newInstance();
+    private final MessageBytes uriMB = MessageBytes.newInstance();
+    private final MessageBytes decodedUriMB = MessageBytes.newInstance();
+    private final MessageBytes queryMB = MessageBytes.newInstance();
+    private final MessageBytes protoMB = MessageBytes.newInstance();
 
     // remote address/host
-    private MessageBytes remoteAddrMB = MessageBytes.newInstance();
-    private MessageBytes localNameMB = MessageBytes.newInstance();
-    private MessageBytes remoteHostMB = MessageBytes.newInstance();
-    private MessageBytes localAddrMB = MessageBytes.newInstance();
-     
-    private MimeHeaders headers = new MimeHeaders();
+    private final MessageBytes remoteAddrMB = MessageBytes.newInstance();
+    private final MessageBytes localNameMB = MessageBytes.newInstance();
+    private final MessageBytes remoteHostMB = MessageBytes.newInstance();
+    private final MessageBytes localAddrMB = MessageBytes.newInstance();
+
+    private final MimeHeaders headers = new MimeHeaders();
 
-    private MessageBytes instanceId = MessageBytes.newInstance();
+    private final MessageBytes instanceId = MessageBytes.newInstance();
 
     /**
      * Notes.
      */
-    private Object notes[] = new Object[Constants.MAX_NOTES];
+    private final Object notes[] = new Object[Constants.MAX_NOTES];
 
 
     /**
@@ -119,7 +118,7 @@ public final class Request {
     /**
      * URL decoder.
      */
-    private UDecoder urlDecoder = new UDecoder();
+    private final UDecoder urlDecoder = new UDecoder();
 
 
     /**
@@ -128,12 +127,12 @@ public final class Request {
     private long contentLength = -1;
     private MessageBytes contentTypeMB = null;
     private String charEncoding = null;
-    private Cookies cookies = new Cookies(headers);
-    private Parameters parameters = new Parameters();
+    private final Cookies cookies = new Cookies(headers);
+    private final Parameters parameters = new Parameters();
 
-    private MessageBytes remoteUser=MessageBytes.newInstance();
-    private MessageBytes authType=MessageBytes.newInstance();
-    private HashMap<String,Object> attributes=new HashMap<String,Object>();
+    private final MessageBytes remoteUser=MessageBytes.newInstance();
+    private final MessageBytes authType=MessageBytes.newInstance();
+    private final HashMap<String,Object> attributes=new HashMap<String,Object>();
 
     private Response response;
     private ActionHook hook;
@@ -143,7 +142,7 @@ public final class Request {
     private long startTime = 0L;
     private int available = 0;
 
-    private RequestInfo reqProcessorMX=new RequestInfo(this);
+    private final RequestInfo reqProcessorMX=new RequestInfo(this);
     // ------------------------------------------------------------- Properties
 
 
@@ -151,7 +150,7 @@ public final class Request {
      * Get the instance id (or JVM route). Currently Ajp is sending it with each
      * request. In future this should be fixed, and sent only once ( or
      * 'negotiated' at config time so both tomcat and apache share the same name.
-     * 
+     *
      * @return the instance id
      */
     public MessageBytes instanceId() {
@@ -174,11 +173,11 @@ public final class Request {
     public MessageBytes scheme() {
         return schemeMB;
     }
-    
+
     public MessageBytes method() {
         return methodMB;
     }
-    
+
     public MessageBytes unparsedURI() {
         return unparsedURIMB;
     }
@@ -198,8 +197,8 @@ public final class Request {
     public MessageBytes protocol() {
         return protoMB;
     }
-    
-    /** 
+
+    /**
      * Return the buffer holding the server name, if
      * any. Use isNull() to check if there is no value
      * set.
@@ -213,7 +212,7 @@ public final class Request {
     public int getServerPort() {
         return serverPort;
     }
-    
+
     public void setServerPort(int serverPort ) {
         this.serverPort=serverPort;
     }
@@ -228,24 +227,24 @@ public final class Request {
 
     public MessageBytes localName() {
         return localNameMB;
-    }    
+    }
 
     public MessageBytes localAddr() {
         return localAddrMB;
     }
-    
+
     public int getRemotePort(){
         return remotePort;
     }
-        
+
     public void setRemotePort(int port){
         this.remotePort = port;
     }
-    
+
     public int getLocalPort(){
         return localPort;
     }
-        
+
     public void setLocalPort(int port){
         this.localPort = port;
     }
@@ -258,10 +257,11 @@ public final class Request {
      */
     public String getCharacterEncoding() {
 
-        if (charEncoding != null)
+        if (charEncoding != null) {
             return charEncoding;
+        }
 
-        charEncoding = ContentType.getCharsetFromContentType(getContentType());
+        charEncoding = getCharsetFromContentType(getContentType());
         return charEncoding;
 
     }
@@ -287,7 +287,9 @@ public final class Request {
     }
 
     public long getContentLengthLong() {
-        if( contentLength > -1 ) return contentLength;
+        if( contentLength > -1 ) {
+            return contentLength;
+        }
 
         MessageBytes clB = headers.getUniqueValue("content-length");
         contentLength = (clB == null || clB.isNull()) ? -1 : clB.getLong();
@@ -297,8 +299,9 @@ public final class Request {
 
     public String getContentType() {
         contentType();
-        if ((contentTypeMB == null) || contentTypeMB.isNull()) 
+        if ((contentTypeMB == null) || contentTypeMB.isNull()) {
             return null;
+        }
         return contentTypeMB.toString();
     }
 
@@ -309,8 +312,9 @@ public final class Request {
 
 
     public MessageBytes contentType() {
-        if (contentTypeMB == null)
+        if (contentTypeMB == null) {
             contentTypeMB = headers.getValue("content-type");
+        }
         return contentTypeMB;
     }
 
@@ -334,16 +338,18 @@ public final class Request {
         this.response=response;
         response.setRequest( this );
     }
-    
+
     public void action(ActionCode actionCode, Object param) {
-        if( hook==null && response!=null )
+        if( hook==null && response!=null ) {
             hook=response.getHook();
-        
+        }
+
         if (hook != null) {
-            if( param==null ) 
+            if( param==null ) {
                 hook.action(actionCode, this);
-            else
+            } else {
                 hook.action(actionCode, param);
+            }
         }
     }
 
@@ -366,7 +372,7 @@ public final class Request {
 
     // -------------------- Other attributes --------------------
     // We can use notes for most - need to discuss what is of general interest
-    
+
     public void setAttribute( String name, Object o ) {
         attributes.put( name, o );
     }
@@ -378,7 +384,7 @@ public final class Request {
     public Object getAttribute(String name ) {
         return attributes.get(name);
     }
-    
+
     public MessageBytes getRemoteUser() {
         return remoteUser;
     }
@@ -417,7 +423,7 @@ public final class Request {
      * InputStream, this interface allows the app to process data in place, without copy.
      *
      */
-    public int doRead(ByteChunk chunk) 
+    public int doRead(ByteChunk chunk)
         throws IOException {
         int n = inputBuffer.doRead(chunk, this);
         if (n > 0) {
@@ -445,23 +451,23 @@ public final class Request {
     // -------------------- Per-Request "notes" --------------------
 
 
-    /** 
-     * Used to store private data. Thread data could be used instead - but 
+    /**
+     * Used to store private data. Thread data could be used instead - but
      * if you have the req, getting/setting a note is just a array access, may
      * be faster than ThreadLocal for very frequent operations.
-     * 
-     *  Example use: 
+     *
+     *  Example use:
      *   Jk:
      *     HandlerRequest.HOSTBUFFER = 10 CharChunk, buffer for Host decoding
      *     WorkerEnv: SSL_CERT_NOTE=16 - MessageBytes containing the cert
-     *                
+     *
      *   Catalina CoyoteAdapter:
-     *      ADAPTER_NOTES = 1 - stores the HttpServletRequest object ( req/res)             
-     *      
-     *   To avoid conflicts, note in the range 0 - 8 are reserved for the 
-     *   servlet container ( catalina connector, etc ), and values in 9 - 16 
-     *   for connector use. 
-     *   
+     *      ADAPTER_NOTES = 1 - stores the HttpServletRequest object ( req/res)
+     *
+     *   To avoid conflicts, note in the range 0 - 8 are reserved for the
+     *   servlet container ( catalina connector, etc ), and values in 9 - 16
+     *   for connector use.
+     *
      *   17-31 range is not allocated or used.
      */
     public final void setNote(int pos, Object value) {
@@ -474,7 +480,7 @@ public final class Request {
     }
 
 
-    // -------------------- Recycling -------------------- 
+    // -------------------- Recycling --------------------
 
 
     public void recycle() {
@@ -494,7 +500,7 @@ public final class Request {
         parameters.recycle();
 
         unparsedURIMB.recycle();
-        uriMB.recycle(); 
+        uriMB.recycle();
         decodedUriMB.recycle();
         queryMB.recycle();
         methodMB.recycle();
@@ -524,4 +530,35 @@ public final class Request {
     public boolean isProcessing() {
         return reqProcessorMX.getStage()==org.apache.coyote.Constants.STAGE_SERVICE;
     }
+
+    /**
+     * Parse the character encoding from the specified content type header.
+     * If the content type is null, or there is no explicit character encoding,
+     * <code>null</code> is returned.
+     *
+     * @param contentType a content type header
+     */
+    private static String getCharsetFromContentType(String contentType) {
+
+        if (contentType == null) {
+            return (null);
+        }
+        int start = contentType.indexOf("charset=");
+        if (start < 0) {
+            return (null);
+        }
+        String encoding = contentType.substring(start + 8);
+        int end = encoding.indexOf(';');
+        if (end >= 0) {
+            encoding = encoding.substring(0, end);
+        }
+        encoding = encoding.trim();
+        if ((encoding.length() > 2) && (encoding.startsWith("\""))
+            && (encoding.endsWith("\""))) {
+            encoding = encoding.substring(1, encoding.length() - 1);
+        }
+        return (encoding.trim());
+
+    }
+
 }

==================================================
MimeHeaders.java
deleted file mode 100644
index 183b0240ba..0000000000
--- a/java/org/apache/tomcat/util/http/ContentType.java
+++ /dev/null
@@ -1,99 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.apache.tomcat.util.http;
-
-
-/**
- * Useful methods for Content-Type processing
- *
- * @author James Duncan Davidson [duncan@eng.sun.com]
- * @author James Todd [gonzo@eng.sun.com]
- * @author Jason Hunter [jch@eng.sun.com]
- * @author Harish Prabandham
- * @author costin@eng.sun.com
- */
-public class ContentType {
-
-    /**
-     * Parse the character encoding from the specified content type header.
-     * If the content type is null, or there is no explicit character encoding,
-     * <code>null</code> is returned.
-     *
-     * @param contentType a content type header
-     */
-    public static String getCharsetFromContentType(String contentType) {
-
-        if (contentType == null) {
-            return (null);
-        }
-        int start = contentType.indexOf("charset=");
-        if (start < 0) {
-            return (null);
-        }
-        String encoding = contentType.substring(start + 8);
-        int end = encoding.indexOf(';');
-        if (end >= 0) {
-            encoding = encoding.substring(0, end);
-        }
-        encoding = encoding.trim();
-        if ((encoding.length() > 2) && (encoding.startsWith("\""))
-            && (encoding.endsWith("\""))) {
-            encoding = encoding.substring(1, encoding.length() - 1);
-        }
-        return (encoding.trim());
-
-    }
-
-
-    /**
-     * Returns true if the given content type contains a charset component,
-     * false otherwise.
-     *
-     * @param type Content type
-     * @return true if the given content type contains a charset component,
-     * false otherwise
-     */
-    public static boolean hasCharset(String type) {
-
-        boolean hasCharset = false;
-
-        int len = type.length();
-        int index = type.indexOf(';');
-        while (index != -1) {
-            index++;
-            while (index < len && Character.isSpace(type.charAt(index))) {
-                index++;
-            }
-            if (index+8 < len
-                    && type.charAt(index) == 'c'
-                    && type.charAt(index+1) == 'h'
-                    && type.charAt(index+2) == 'a'
-                    && type.charAt(index+3) == 'r'
-                    && type.charAt(index+4) == 's'
-                    && type.charAt(index+5) == 'e'
-                    && type.charAt(index+6) == 't'
-                    && type.charAt(index+7) == '=') {
-                hasCharset = true;
-                break;
-            }
-            index = type.indexOf(';', index);
-        }
-
-        return hasCharset;
-    }
-
-}

==================================================
Parameters.java
index 8d2373f552..c57fa6a123 100644
--- a/java/org/apache/tomcat/util/http/MimeHeaders.java
+++ b/java/org/apache/tomcat/util/http/MimeHeaders.java
@@ -253,15 +253,6 @@ public class MimeHeaders {
         return mhf.getValue();
     }
 
-    /** Create a new named header using translated char[].
-     */
-    public MessageBytes addValue(char c[], int startN, int len)
-    {
-        MimeHeaderField mhf=createHeader();
-        mhf.getName().setChars(c, startN, len);
-        return mhf.getValue();
-    }
-
     /** Allow "set" operations -
         return a MessageBytes container for the
         header value ( existing header or new
@@ -454,11 +445,6 @@ class ValuesEnumerator implements Enumeration<String> {
 }
 
 class MimeHeaderField {
-    // multiple headers with same name - a linked list will
-    // speed up name enumerations and search ( both cpu and
-    // GC)
-    MimeHeaderField next;
-    MimeHeaderField prev;
 
     protected final MessageBytes nameB = MessageBytes.newInstance();
     protected final MessageBytes valueB = MessageBytes.newInstance();
@@ -473,7 +459,6 @@ class MimeHeaderField {
     public void recycle() {
         nameB.recycle();
         valueB.recycle();
-        next=null;
     }
 
     public MessageBytes getName() {

==================================================
ServerCookie.java
index 656f965ad0..02bc28367b 100644
--- a/java/org/apache/tomcat/util/http/Parameters.java
+++ b/java/org/apache/tomcat/util/http/Parameters.java
@@ -32,13 +32,9 @@ import org.apache.tomcat.util.buf.UDecoder;
  */
 public final class Parameters {
 
-
     private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog(Parameters.class );
 
-    // Transition: we'll use the same Hashtable( String->String[] )
-    // for the beginning. When we are sure all accesses happen through
-    // this class - we can switch to MultiMap
     private final Hashtable<String,String[]> paramHashStringArray =
         new Hashtable<String,String[]>();
     private boolean didQueryParameters=false;

==================================================
