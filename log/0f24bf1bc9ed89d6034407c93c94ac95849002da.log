0f24bf1bc9ed89d6034407c93c94ac95849002da
==================================================
Rename Mapping to ServletMapping
==================================================
Mark Thomas
==================================================
Mon Feb 27 16:56:47 2017 +0000
==================================================
HttpServletRequest.java
Rename Mapping to ServletMapping

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1784597 13f79535-47bb-0310-9956-ffa450edef68



==================================================
HttpServletRequestWrapper.java
index 0f042af352..66a757b568 100644
--- a/java/javax/servlet/http/HttpServletRequest.java
+++ b/java/javax/servlet/http/HttpServletRequest.java
@@ -170,8 +170,8 @@ public interface HttpServletRequest extends ServletRequest {
      */
     public int getIntHeader(String name);
 
-    public default Mapping getMapping() {
-        return new Mapping() {
+    public default ServletMapping getServletMapping() {
+        return new ServletMapping() {
 
             @Override
             public String getMatchValue() {

==================================================
ServletMapping.java
index 236494f9a8..f7d4062449 100644
--- a/java/javax/servlet/http/HttpServletRequestWrapper.java
+++ b/java/javax/servlet/http/HttpServletRequestWrapper.java
@@ -119,8 +119,8 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * wrapped request object.
      */
     @Override
-    public Mapping getMapping() {
-        return this._getHttpServletRequest().getMapping();
+    public ServletMapping getServletMapping() {
+        return this._getHttpServletRequest().getServletMapping();
     }
 
     /**

==================================================
Request.java
similarity index 98%
rename from java/javax/servlet/http/Mapping.java
rename to java/javax/servlet/http/ServletMapping.java
index 695e012fdf..c2acc41c74 100644
--- a/java/javax/servlet/http/Mapping.java
+++ b/java/javax/servlet/http/ServletMapping.java
@@ -24,7 +24,7 @@ import javax.servlet.annotation.WebServlet;
  *
  * @since 4.0
  */
-public interface Mapping {
+public interface ServletMapping {
 
     /**
      * @return The value that was matched or the empty String if not known.

==================================================
RequestFacade.java
index caba7c6bbf..9c90a0b105 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -63,9 +63,9 @@ import javax.servlet.http.HttpServletRequestWrapper;
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpSession;
 import javax.servlet.http.HttpUpgradeHandler;
-import javax.servlet.http.Mapping;
 import javax.servlet.http.Part;
 import javax.servlet.http.PushBuilder;
+import javax.servlet.http.ServletMapping;
 
 import org.apache.catalina.Container;
 import org.apache.catalina.Context;
@@ -2167,8 +2167,8 @@ public class Request implements HttpServletRequest {
 
 
     @Override
-    public Mapping getMapping() {
-        return applicationMapping.getMapping();
+    public ServletMapping getServletMapping() {
+        return applicationMapping.getServletMapping();
     }
 
 

==================================================
ApplicationContext.java
index 19eb19ed60..fb17b5c921 100644
--- a/java/org/apache/catalina/connector/RequestFacade.java
+++ b/java/org/apache/catalina/connector/RequestFacade.java
@@ -38,9 +38,9 @@ import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpSession;
 import javax.servlet.http.HttpUpgradeHandler;
-import javax.servlet.http.Mapping;
 import javax.servlet.http.Part;
 import javax.servlet.http.PushBuilder;
+import javax.servlet.http.ServletMapping;
 
 import org.apache.catalina.Globals;
 import org.apache.catalina.security.SecurityUtil;
@@ -738,14 +738,14 @@ public class RequestFacade implements HttpServletRequest {
 
 
     @Override
-    public Mapping getMapping() {
+    public ServletMapping getServletMapping() {
 
         if (request == null) {
             throw new IllegalStateException(
                             sm.getString("requestFacade.nullRequest"));
         }
 
-        return request.getMapping();
+        return request.getServletMapping();
     }
 
 

==================================================
ApplicationDispatcher.java
index 59e9885d67..3ebd1639aa 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -54,7 +54,7 @@ import javax.servlet.descriptor.JspConfigDescriptor;
 import javax.servlet.http.HttpSessionAttributeListener;
 import javax.servlet.http.HttpSessionIdListener;
 import javax.servlet.http.HttpSessionListener;
-import javax.servlet.http.Mapping;
+import javax.servlet.http.ServletMapping;
 
 import org.apache.catalina.Container;
 import org.apache.catalina.Context;
@@ -481,7 +481,7 @@ public class ApplicationContext implements ServletContext {
         Wrapper wrapper = mappingData.wrapper;
         String wrapperPath = mappingData.wrapperPath.toString();
         String pathInfo = mappingData.pathInfo.toString();
-        Mapping mapping = (new ApplicationMapping(mappingData)).getMapping();
+        ServletMapping mapping = (new ApplicationMapping(mappingData)).getServletMapping();
 
         mappingData.recycle();
 

==================================================
ApplicationHttpRequest.java
index 0616a01c7d..0072d174fa 100644
--- a/java/org/apache/catalina/core/ApplicationDispatcher.java
+++ b/java/org/apache/catalina/core/ApplicationDispatcher.java
@@ -34,7 +34,7 @@ import javax.servlet.ServletResponseWrapper;
 import javax.servlet.UnavailableException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import javax.servlet.http.Mapping;
+import javax.servlet.http.ServletMapping;
 
 import org.apache.catalina.AsyncDispatcher;
 import org.apache.catalina.Context;
@@ -206,7 +206,7 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
      */
     public ApplicationDispatcher
         (Wrapper wrapper, String requestURI, String servletPath,
-         String pathInfo, String queryString, Mapping mapping, String name) {
+         String pathInfo, String queryString, ServletMapping mapping, String name) {
 
         super();
 
@@ -263,7 +263,7 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
     /**
      * The mapping for this RequestDispatcher.
      */
-    private final Mapping mapping;
+    private final ServletMapping mapping;
 
 
     /**
@@ -369,7 +369,7 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
                                       hrequest.getPathInfo());
                 wrequest.setAttribute(RequestDispatcher.FORWARD_QUERY_STRING,
                                       hrequest.getQueryString());
-                wrequest.setAttribute(RequestDispatcher.FORWARD_MAPPING, hrequest.getMapping());
+                wrequest.setAttribute(RequestDispatcher.FORWARD_MAPPING, hrequest.getServletMapping());
             }
 
             wrequest.setContextPath(contextPath);

==================================================
ApplicationMapping.java
index 4bf4cef97e..8b06faec28 100644
--- a/java/org/apache/catalina/core/ApplicationHttpRequest.java
+++ b/java/org/apache/catalina/core/ApplicationHttpRequest.java
@@ -33,8 +33,8 @@ import javax.servlet.ServletContext;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletRequestWrapper;
 import javax.servlet.http.HttpSession;
-import javax.servlet.http.Mapping;
 import javax.servlet.http.PushBuilder;
+import javax.servlet.http.ServletMapping;
 
 import org.apache.catalina.Context;
 import org.apache.catalina.Globals;
@@ -190,7 +190,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
     /**
      * The mapping for this request.
      */
-    private Mapping mapping = null;
+    private ServletMapping mapping = null;
 
 
     /**
@@ -506,7 +506,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
 
 
     @Override
-    public Mapping getMapping() {
+    public ServletMapping getServletMapping() {
         return mapping;
     }
 
@@ -690,7 +690,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
         queryString = request.getQueryString();
         requestURI = request.getRequestURI();
         servletPath = request.getServletPath();
-        mapping = request.getMapping();
+        mapping = request.getServletMapping();
     }
 
 
@@ -749,7 +749,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
     }
 
 
-    void setMapping(Mapping mapping) {
+    void setMapping(ServletMapping mapping) {
         this.mapping = mapping;
     }
 

==================================================
TestApplicationMapping.java
index 9bb4213c7c..85eab3fb14 100644
--- a/java/org/apache/catalina/core/ApplicationMapping.java
+++ b/java/org/apache/catalina/core/ApplicationMapping.java
@@ -16,8 +16,8 @@
  */
 package org.apache.catalina.core;
 
-import javax.servlet.http.Mapping;
 import javax.servlet.http.MappingMatch;
+import javax.servlet.http.ServletMapping;
 
 import org.apache.catalina.mapper.MappingData;
 
@@ -25,13 +25,13 @@ public class ApplicationMapping {
 
     private final MappingData mappingData;
 
-    private volatile Mapping mapping = null;
+    private volatile ServletMapping mapping = null;
 
     public ApplicationMapping(MappingData mappingData) {
         this.mappingData = mappingData;
     }
 
-    public Mapping getMapping() {
+    public ServletMapping getServletMapping() {
         if (mapping == null) {
             String servletName;
             if (mappingData.wrapper == null) {
@@ -74,7 +74,7 @@ public class ApplicationMapping {
         mapping = null;
     }
 
-    private static class MappingImpl implements Mapping {
+    private static class MappingImpl implements ServletMapping {
 
         private final String matchValue;
         private final String pattern;

==================================================
TesterHttpServletRequest.java
index 06ed5a6c84..40c760e32f 100644
--- a/test/org/apache/catalina/core/TestApplicationMapping.java
+++ b/test/org/apache/catalina/core/TestApplicationMapping.java
@@ -24,7 +24,7 @@ import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import javax.servlet.http.Mapping;
+import javax.servlet.http.ServletMapping;
 
 import org.junit.Assert;
 import org.junit.Test;
@@ -284,12 +284,12 @@ public class TestApplicationMapping extends TomcatBaseTest {
                 throws ServletException, IOException {
             resp.setContentType("text/plain;charset=UTF-8");
             PrintWriter pw = resp.getWriter();
-            Mapping mapping = req.getMapping();
+            ServletMapping mapping = req.getServletMapping();
             pw.println("MatchValue=[" + mapping.getMatchValue() + "]");
             pw.println("Pattern=[" + mapping.getPattern() + "]");
             pw.println("MatchType=[" + mapping.getMappingMatch() + "]");
             pw.println("ServletName=[" + mapping.getServletName() + "]");
-            Mapping includeMapping = (Mapping) req.getAttribute(RequestDispatcher.INCLUDE_MAPPING);
+            ServletMapping includeMapping = (ServletMapping) req.getAttribute(RequestDispatcher.INCLUDE_MAPPING);
             if (includeMapping != null) {
                 pw.println("IncludeMatchValue=[" + includeMapping.getMatchValue() + "]");
                 pw.println("IncludePattern=[" + includeMapping.getPattern() + "]");
@@ -297,7 +297,7 @@ public class TestApplicationMapping extends TomcatBaseTest {
                 pw.println("IncludeServletName=[" + includeMapping.getServletName() + "]");
 
             }
-            Mapping forwardMapping = (Mapping) req.getAttribute(RequestDispatcher.FORWARD_MAPPING);
+            ServletMapping forwardMapping = (ServletMapping) req.getAttribute(RequestDispatcher.FORWARD_MAPPING);
             if (forwardMapping != null) {
                 pw.println("ForwardMatchValue=[" + forwardMapping.getMatchValue() + "]");
                 pw.println("ForwardPattern=[" + forwardMapping.getPattern() + "]");

==================================================
