ade409a63a263a0f34d22375b15e6da49281461c
==================================================
Re-order methods in JASPIC API classes to align with order used in reference implementation make it easier to check for differences using javap
==================================================
Mark Thomas
==================================================
Wed Jun 10 09:25:25 2015 +0000
==================================================
AuthStatus.java
Re-order methods in JASPIC API classes to align with order used in reference implementation make it easier to check for differences using javap
Patch provided by fjodorver

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1684613 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ClientAuth.java
index d48ac9ee32..b9ca385086 100644
--- a/java/javax/security/auth/message/AuthStatus.java
+++ b/java/javax/security/auth/message/AuthStatus.java
@@ -18,11 +18,11 @@ package javax.security.auth.message;
 
 public class AuthStatus {
 
+    public static final AuthStatus SUCCESS = new AuthStatus("SUCCESS");
     public static final AuthStatus FAILURE = new AuthStatus("FAILURE");
-    public static final AuthStatus SEND_CONTINUE = new AuthStatus("SEND_CONTINUE");
-    public static final AuthStatus SEND_FAILURE = new AuthStatus("SEND_FAILURE");
     public static final AuthStatus SEND_SUCCESS = new AuthStatus("SEND_SUCCESS");
-    public static final AuthStatus SUCCESS = new AuthStatus("SUCCESS");
+    public static final AuthStatus SEND_FAILURE = new AuthStatus("SEND_FAILURE");
+    public static final AuthStatus SEND_CONTINUE = new AuthStatus("SEND_CONTINUE");
 
     private final String name;
 

==================================================
MessageInfo.java
index b179bb2e85..a537ef2a17 100644
--- a/java/javax/security/auth/message/ClientAuth.java
+++ b/java/javax/security/auth/message/ClientAuth.java
@@ -20,10 +20,11 @@ import javax.security.auth.Subject;
 
 public interface ClientAuth {
 
-    void cleanSubject(MessageInfo messageInfo, Subject subject) throws AuthException;
-
     AuthStatus secureRequest(MessageInfo messageInfo, Subject clientSubject) throws AuthException;
 
     AuthStatus validateResponse(MessageInfo messageInfo, Subject clientSubject,
             Subject serviceSubject) throws AuthException;
+
+    void cleanSubject(MessageInfo messageInfo, Subject subject) throws AuthException;
 }
+

==================================================
MessagePolicy.java
index 04131c9bee..dc3d263ec0 100644
--- a/java/javax/security/auth/message/MessageInfo.java
+++ b/java/javax/security/auth/message/MessageInfo.java
@@ -20,9 +20,6 @@ import java.util.Map;
 
 public interface MessageInfo {
 
-    @SuppressWarnings("rawtypes") // JASPIC API uses raw types
-    Map getMap();
-
     Object getRequestMessage();
 
     Object getResponseMessage();
@@ -30,4 +27,7 @@ public interface MessageInfo {
     void setRequestMessage(Object request);
 
     void setResponseMessage(Object response);
+
+    @SuppressWarnings("rawtypes") // JASPIC API uses raw types
+    Map getMap();
 }

==================================================
ServerAuth.java
index 6d610e42a3..bf474a916f 100644
--- a/java/javax/security/auth/message/MessagePolicy.java
+++ b/java/javax/security/auth/message/MessagePolicy.java
@@ -30,6 +30,10 @@ public class MessagePolicy {
         this.mandatory = mandatory;
     }
 
+    public boolean isMandatory() {
+        return mandatory;
+    }
+
     public TargetPolicy[] getTargetPolicies() {
         if (targetPolicies.length == 0) {
             return null;
@@ -37,15 +41,11 @@ public class MessagePolicy {
         return targetPolicies;
     }
 
-    public boolean isMandatory() {
-        return mandatory;
-    }
-
     public static interface ProtectionPolicy {
 
+        static String AUTHENTICATE_SENDER = "#authenticateSender";
         static String AUTHENTICATE_CONTENT = "#authenticateContent";
         static String AUTHENTICATE_RECIPIENT = "#authenticateRecipient";
-        static String AUTHENTICATE_SENDER = "#authenticateSender";
 
         String getID();
     }
@@ -54,9 +54,9 @@ public class MessagePolicy {
 
         Object get(MessageInfo messageInfo);
 
-        void put(MessageInfo messageInfo, Object data);
-
         void remove(MessageInfo messageInfo);
+
+        void put(MessageInfo messageInfo, Object data);
     }
 
     public static class TargetPolicy {

==================================================
CertStoreCallback.java
index 04f9f964f3..bb404f558b 100644
--- a/java/javax/security/auth/message/ServerAuth.java
+++ b/java/javax/security/auth/message/ServerAuth.java
@@ -20,10 +20,10 @@ import javax.security.auth.Subject;
 
 public interface ServerAuth {
 
-    void cleanSubject(MessageInfo messageInfo, Subject subject) throws AuthException;
+    AuthStatus validateRequest(MessageInfo messageInfo, Subject clientSubject,
+            Subject serviceSubject) throws AuthException;
 
     AuthStatus secureResponse(MessageInfo messageInfo, Subject serviceSubject) throws AuthException;
 
-    AuthStatus validateRequest(MessageInfo messageInfo, Subject clientSubject,
-            Subject serviceSubject) throws AuthException;
+    void cleanSubject(MessageInfo messageInfo, Subject subject) throws AuthException;
 }

==================================================
PasswordValidationCallback.java
index 66b44ed54a..13734e8ce0 100644
--- a/java/javax/security/auth/message/callback/CertStoreCallback.java
+++ b/java/javax/security/auth/message/callback/CertStoreCallback.java
@@ -28,11 +28,14 @@ public class CertStoreCallback implements Callback {
 
     private CertStore certStore;
 
-    public CertStore getCertStore() {
-        return certStore;
+    public CertStoreCallback() {
     }
 
     public void setCertStore(CertStore certStore) {
         this.certStore = certStore;
     }
+
+    public CertStore getCertStore() {
+        return certStore;
+    }
 }

==================================================
PrivateKeyCallback.java
index 2bcbb74e7d..2eaad2d898 100644
--- a/java/javax/security/auth/message/callback/PasswordValidationCallback.java
+++ b/java/javax/security/auth/message/callback/PasswordValidationCallback.java
@@ -55,11 +55,11 @@ public class PasswordValidationCallback implements Callback {
         password = new char[0];
     }
 
-    public boolean getResult() {
-        return result;
-    }
-
     public void setResult(boolean result) {
         this.result = result;
     }
+
+    public boolean getResult() {
+        return result;
+    }
 }

==================================================
SecretKeyCallback.java
index 5dfb24ab2f..76feefe194 100644
--- a/java/javax/security/auth/message/callback/PrivateKeyCallback.java
+++ b/java/javax/security/auth/message/callback/PrivateKeyCallback.java
@@ -43,17 +43,17 @@ public class PrivateKeyCallback implements Callback {
         return request;
     }
 
-    public Certificate[] getChain() {
-        return chain;
+    public void setKey(PrivateKey key, Certificate[] chain) {
+        this.key = key;
+        this.chain = chain;
     }
 
     public PrivateKey getKey() {
         return key;
     }
 
-    public void setKey(PrivateKey key, Certificate[] chain) {
-        this.key = key;
-        this.chain = chain;
+    public Certificate[] getChain() {
+        return chain;
     }
 
     public static interface Request {
@@ -76,7 +76,6 @@ public class PrivateKeyCallback implements Callback {
         private final byte[] digest;
         private final String algorithm;
 
-
         public DigestRequest(byte[] digest, String algorithm) {
             this.digest = digest;
             this.algorithm = algorithm;

==================================================
TrustStoreCallback.java
index 5c2f2ecbca..ff248fca8e 100644
--- a/java/javax/security/auth/message/callback/SecretKeyCallback.java
+++ b/java/javax/security/auth/message/callback/SecretKeyCallback.java
@@ -36,14 +36,14 @@ public class SecretKeyCallback implements Callback {
         return request;
     }
 
-    public SecretKey getKey() {
-        return key;
-    }
-
     public void setKey(SecretKey key) {
         this.key = key;
     }
 
+    public SecretKey getKey() {
+        return key;
+    }
+
     public static interface Request {
     }
 

==================================================
AuthConfig.java
index 597fa2ac92..8312e44fd9 100644
--- a/java/javax/security/auth/message/callback/TrustStoreCallback.java
+++ b/java/javax/security/auth/message/callback/TrustStoreCallback.java
@@ -28,11 +28,11 @@ public class TrustStoreCallback implements Callback {
 
     private KeyStore trustStore;
 
-    public KeyStore getTrustStore() {
-        return trustStore;
-    }
-
     public void setTrustStore(KeyStore trustStore) {
         this.trustStore = trustStore;
     }
+
+    public KeyStore getTrustStore() {
+        return trustStore;
+    }
 }

==================================================
AuthConfigFactory.java
index 1f1ba5d9fa..cf96ef7ab3 100644
--- a/java/javax/security/auth/message/config/AuthConfig.java
+++ b/java/javax/security/auth/message/config/AuthConfig.java
@@ -20,13 +20,13 @@ import javax.security.auth.message.MessageInfo;
 
 public interface AuthConfig {
 
+    String getMessageLayer();
+
     String getAppContext();
 
     String getAuthContextID(MessageInfo messageInfo) throws IllegalArgumentException;
 
-    String getMessageLayer();
+    void refresh();
 
     boolean isProtected();
-
-    void refresh();
 }

==================================================
ClientAuthModule.java
index ba8eae4311..b99348e986 100644
--- a/java/javax/security/auth/message/config/AuthConfigFactory.java
+++ b/java/javax/security/auth/message/config/AuthConfigFactory.java
@@ -43,7 +43,10 @@ public abstract class AuthConfigFactory {
         });
     }
 
-    public static AuthConfigFactory getFactory() {
+    public AuthConfigFactory() {
+    }
+
+    public static synchronized AuthConfigFactory getFactory() {
         SecurityManager sm = System.getSecurityManager();
         if (sm != null) {
             sm.checkPermission(new AuthPermission("getAuthConfigFactory"));
@@ -84,7 +87,7 @@ public abstract class AuthConfigFactory {
         return factory;
     }
 
-    public static void setFactory(AuthConfigFactory factory) {
+    public static synchronized void setFactory(AuthConfigFactory factory) {
         SecurityManager sm = System.getSecurityManager();
         if (sm != null) {
             sm.checkPermission(new AuthPermission("setAuthConfigFactory"));
@@ -92,39 +95,35 @@ public abstract class AuthConfigFactory {
         AuthConfigFactory.factory = factory;
     }
 
+    public abstract AuthConfigProvider getConfigProvider(String layer, String appContext,
+            RegistrationListener listener);
 
-    public AuthConfigFactory() {
-    }
+    @SuppressWarnings("rawtypes") // JASPIC API uses raw types
+    public abstract String registerConfigProvider(String className, Map properties, String layer,
+            String appContext, String description);
+
+    public abstract String registerConfigProvider(AuthConfigProvider provider, String layer,
+            String appContext, String description);
+
+    public abstract boolean removeRegistration(String registrationID);
 
     public abstract String[] detachListener(RegistrationListener listener, String layer,
             String appContext);
 
-    public abstract AuthConfigProvider getConfigProvider(String layer, String appContext,
-            RegistrationListener listener);
+    public abstract String[] getRegistrationIDs(AuthConfigProvider provider);
 
     public abstract RegistrationContext getRegistrationContext(String registrationID);
 
-    public abstract String[] getRegistrationIDs(AuthConfigProvider provider);
-
     public abstract void refresh();
 
-    public abstract String registerConfigProvider(AuthConfigProvider provider, String layer,
-            String appContext, String description);
-
-    @SuppressWarnings("rawtypes") // JASPIC API uses raw types
-    public abstract String registerConfigProvider(String className, Map properties, String layer,
-            String appContext, String description);
-
-    public abstract boolean removeRegistration(String registrationID);
-
     public static interface RegistrationContext {
 
+        String getMessageLayer();
+
         String getAppContext();
 
         String getDescription();
 
-        String getMessageLayer();
-
         boolean isPersistent();
     }
 }

==================================================
ServerAuthModule.java
index 41d8f9f8d9..6cb5c4ee10 100644
--- a/java/javax/security/auth/message/module/ClientAuthModule.java
+++ b/java/javax/security/auth/message/module/ClientAuthModule.java
@@ -25,10 +25,10 @@ import javax.security.auth.message.MessagePolicy;
 
 public interface ClientAuthModule extends ClientAuth {
 
-    @SuppressWarnings("rawtypes") // JASPIC API uses raw types
-    Class[] getSupportedMessageTypes();
-
     @SuppressWarnings("rawtypes") // JASPIC API uses raw types
     void initialize(MessagePolicy requestPolicy, MessagePolicy responsePolicy,
             CallbackHandler handler, Map options) throws AuthException;
+
+    @SuppressWarnings("rawtypes") // JASPIC API uses raw types
+    Class[] getSupportedMessageTypes();
 }

==================================================
