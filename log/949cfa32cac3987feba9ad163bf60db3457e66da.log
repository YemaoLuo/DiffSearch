949cfa32cac3987feba9ad163bf60db3457e66da
==================================================
Deprecate lifecycle states that were never used and could never be used.
==================================================
Mark Thomas
==================================================
Tue Jan 19 19:34:04 2016 +0000
==================================================
Lifecycle.java
Deprecate lifecycle states that were never used and could never be used.
Add new Lifecycle.SingleUse marker interface as a replacement for
MUST_DESTROY
Document how to use FAILED as a work-around for MUST_STOP
Code clean-up

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1725599 13f79535-47bb-0310-9956-ffa450edef68



==================================================
LifecycleState.java
index 1b5263b122..3dfd7ea565 100644
--- a/java/org/apache/catalina/Lifecycle.java
+++ b/java/org/apache/catalina/Lifecycle.java
@@ -35,25 +35,17 @@ package org.apache.catalina;
  * | |           |auto          |     |                                        |
  * | |          \|/    start() \|/   \|/     auto          auto         stop() |
  * | |      INITIALIZED --»-- STARTING_PREP --»- STARTING --»- STARTED --»---  |
- * | |         |                                                  |         |  |
- * | |         |                                                  |         |  |
- * | |         |                                                  |         |  |
- * | |destroy()|                                                  |         |  |
- * | --»-----«--       auto                    auto               |         |  |
- * |     |       ---------«----- MUST_STOP ---------------------«--         |  |
- * |     |       |                                                          |  |
- * |    \|/      ---------------------------«--------------------------------  ^
- * |     |       |                                                             |
- * |     |      \|/            auto                 auto              start()  |
- * |     |  STOPPING_PREP ------»----- STOPPING ------»----- STOPPED ----»------
- * |     |                                ^                  |  |  ^
- * |     |               stop()           |                  |  |  |
- * |     |       --------------------------                  |  |  |
- * |     |       |                                  auto     |  |  |
- * |     |       |                  MUST_DESTROY------«-------  |  |
- * |     |       |                    |                         |  |
- * |     |       |                    |auto                     |  |
- * |     |       |    destroy()      \|/              destroy() |  |
+ * | |         |                                                            |  |
+ * | |destroy()|                                                            |  |
+ * | --»-----«--    ------------------------«--------------------------------  ^
+ * |     |          |                                                          |
+ * |     |         \|/          auto                 auto              start() |
+ * |     |     STOPPING_PREP ----»---- STOPPING ------»----- STOPPED -----»-----
+ * |    \|/                               ^                     |  ^
+ * |     |               stop()           |                     |  |
+ * |     |       --------------------------                     |  |
+ * |     |       |                                              |  |
+ * |     |       |    destroy()                       destroy() |  |
  * |     |    FAILED ----»------ DESTROYING ---«-----------------  |
  * |     |                        ^     |                          |
  * |     |     destroy()          |     |auto                      |
@@ -79,14 +71,6 @@ package org.apache.catalina;
  * does not start all its sub-components. When the component is stopped, it will
  * try to stop all sub-components - even those it didn't start.
  *
- * MUST_STOP is used to indicate that the {@link #stop()} should be called on
- * the component as soon as {@link #start()} exits. It is typically used when a
- * component has failed to start.
- *
- * MUST_DESTROY is used to indicate that the {@link #destroy()} should be called on
- * the component as soon as {@link #stop()} exits. It is typically used when a
- * component is not designed to be restarted.
- *
  * Attempting any other transition will throw {@link LifecycleException}.
  *
  * </pre>
@@ -94,9 +78,6 @@ package org.apache.catalina;
  * methods that trigger the changed. No {@link LifecycleEvent}s are fired if the
  * attempted transition is not valid.
  *
- * TODO: Not all components may transition from STOPPED to STARTING_PREP. These
- *       components should use MUST_DESTROY to signal this.
- *
  * @author Craig R. McClanahan
  */
 public interface Lifecycle {
@@ -325,4 +306,14 @@ public interface Lifecycle {
      * @return The name of the current component state.
      */
     public String getStateName();
+
+
+    /**
+     * Marker interface used to indicate that the instance should only be used
+     * once. Calling {@link #stop()} on an instance that supports this interface
+     * will automatically call {@link #destroy()} after {@link #stop()}
+     * completes.
+     */
+    public interface SingleUse {
+    }
 }

==================================================
LifecycleBase.java
index e43c42f942..04309ebde9 100644
--- a/java/org/apache/catalina/LifecycleState.java
+++ b/java/org/apache/catalina/LifecycleState.java
@@ -33,7 +33,23 @@ public enum LifecycleState {
     DESTROYING(false, Lifecycle.BEFORE_DESTROY_EVENT),
     DESTROYED(false, Lifecycle.AFTER_DESTROY_EVENT),
     FAILED(false, null),
+    /**
+     * @deprecated Unused. Will be removed in Tomcat 9.0.x. The state transition
+     *             checking in {@link org.apache.catalina.util.LifecycleBase}
+     *             makes it impossible to use this state. The intended behaviour
+     *             can be obtained by setting the state to
+     *             {@link LifecycleState#FAILED} in
+     *             <code>LifecycleBase.startInternal()</code>
+     */
+    @Deprecated
     MUST_STOP(true, null),
+    /**
+     * @deprecated Unused. Will be removed in Tomcat 9.0.x. The state transition
+     *             checking in {@link org.apache.catalina.util.LifecycleBase}
+     *             makes it impossible to use this state. The intended behaviour
+     *             can be obtained by implementing {@link Lifecycle.SingleUse}.
+     */
+    @Deprecated
     MUST_DESTROY(false, null);
 
     private final boolean available;

==================================================
