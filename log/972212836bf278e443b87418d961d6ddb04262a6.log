972212836bf278e443b87418d961d6ddb04262a6
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=51408
==================================================
Mark Emlyn
==================================================
Thu Jan 19 15:04:34 2012 +0000
==================================================
AbstractCatalinaTask.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=51408
Don't use Charset.defaultCharset(). Use ISO-8859-1 charset explicitly.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1233415 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DigestAuthenticator.java
index 1338925026..41712ed4d4 100644
--- a/java/org/apache/catalina/ant/AbstractCatalinaTask.java
+++ b/java/org/apache/catalina/ant/AbstractCatalinaTask.java
@@ -26,9 +26,9 @@ import java.io.InputStreamReader;
 import java.net.HttpURLConnection;
 import java.net.URL;
 import java.net.URLConnection;
-import java.nio.charset.Charset;
 
 import org.apache.catalina.util.Base64;
+import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.Project;
 
@@ -202,7 +202,7 @@ public abstract class AbstractCatalinaTask extends BaseRedirectorHelperTask {
             // Set up an authorization header with our credentials
             String input = username + ":" + password;
             String output =
-                Base64.encode(input.getBytes(Charset.defaultCharset()));
+                Base64.encode(input.getBytes(B2CConverter.ISO_8859_1));
             hconn.setRequestProperty("Authorization",
                                      "Basic " + output);
 

==================================================
JNDIRealm.java
index 3dbc88f0c4..3975efe847 100644
--- a/java/org/apache/catalina/authenticator/DigestAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/DigestAuthenticator.java
@@ -20,7 +20,6 @@ package org.apache.catalina.authenticator;
 
 
 import java.io.IOException;
-import java.nio.charset.Charset;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.security.Principal;
@@ -38,6 +37,7 @@ import org.apache.catalina.deploy.LoginConfig;
 import org.apache.catalina.util.MD5Encoder;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.buf.B2CConverter;
 
 
 
@@ -368,7 +368,7 @@ public class DigestAuthenticator extends AuthenticatorBase {
         byte[] buffer;
         synchronized (md5Helper) {
             buffer = md5Helper.digest(
-                    ipTimeKey.getBytes(Charset.defaultCharset()));
+                    ipTimeKey.getBytes(B2CConverter.ISO_8859_1));
         }
 
         return currentTime + ":" + md5Encoder.encode(buffer);
@@ -619,7 +619,7 @@ public class DigestAuthenticator extends AuthenticatorBase {
             byte[] buffer = null;
             synchronized (md5Helper) {
                 buffer = md5Helper.digest(
-                        serverIpTimeKey.getBytes(Charset.defaultCharset()));
+                        serverIpTimeKey.getBytes(B2CConverter.ISO_8859_1));
             }
             String md5ServerIpTimeKey = md5Encoder.encode(buffer);
             if (!md5ServerIpTimeKey.equals(md5clientIpTimeKey)) {
@@ -681,7 +681,7 @@ public class DigestAuthenticator extends AuthenticatorBase {
 
             byte[] buffer;
             synchronized (md5Helper) {
-                buffer = md5Helper.digest(a2.getBytes(Charset.defaultCharset()));
+                buffer = md5Helper.digest(a2.getBytes(B2CConverter.ISO_8859_1));
             }
             String md5a2 = md5Encoder.encode(buffer);
 

==================================================
RealmBase.java
index 5677f75bed..5c2b7d00ab 100644
--- a/java/org/apache/catalina/realm/JNDIRealm.java
+++ b/java/org/apache/catalina/realm/JNDIRealm.java
@@ -20,7 +20,6 @@ package org.apache.catalina.realm;
 import java.io.IOException;
 import java.net.URI;
 import java.net.URISyntaxException;
-import java.nio.charset.Charset;
 import java.security.Principal;
 import java.text.MessageFormat;
 import java.util.ArrayList;
@@ -55,6 +54,7 @@ import javax.naming.directory.SearchResult;
 
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.util.Base64;
+import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.CharChunk;
 import org.ietf.jgss.GSSCredential;
@@ -1513,7 +1513,7 @@ public class JNDIRealm extends RealmBase {
                 synchronized (this) {
                     password = password.substring(5);
                     md.reset();
-                    md.update(credentials.getBytes(Charset.defaultCharset()));
+                    md.update(credentials.getBytes(B2CConverter.ISO_8859_1));
                     String digestedPassword = Base64.encode(md.digest());
                     validated = password.equals(digestedPassword);
                 }
@@ -1524,12 +1524,12 @@ public class JNDIRealm extends RealmBase {
                     password = password.substring(6);
 
                     md.reset();
-                    md.update(credentials.getBytes(Charset.defaultCharset()));
+                    md.update(credentials.getBytes(B2CConverter.ISO_8859_1));
 
                     // Decode stored password.
                     ByteChunk pwbc = new ByteChunk(password.length());
                     try {
-                        pwbc.append(password.getBytes(Charset.defaultCharset()),
+                        pwbc.append(password.getBytes(B2CConverter.ISO_8859_1),
                                 0, password.length());
                     } catch (IOException e) {
                         // Should never happen

==================================================
WebdavServlet.java
index a2ffd80390..2d9152cd0b 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -241,7 +241,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
 
     protected Charset getDigestCharset() throws UnsupportedEncodingException {
         if (digestEncoding == null) {
-            return Charset.defaultCharset();
+            return B2CConverter.ISO_8859_1;
         } else {
             return B2CConverter.getCharset(getDigestEncoding());
         }

==================================================
RequestUtil.java
index 181b0ec974..692fef6aaa 100644
--- a/java/org/apache/catalina/servlets/WebdavServlet.java
+++ b/java/org/apache/catalina/servlets/WebdavServlet.java
@@ -24,7 +24,6 @@ import java.io.IOException;
 import java.io.StringReader;
 import java.io.StringWriter;
 import java.io.Writer;
-import java.nio.charset.Charset;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.text.SimpleDateFormat;
@@ -57,6 +56,7 @@ import org.apache.catalina.util.XMLWriter;
 import org.apache.naming.resources.CacheEntry;
 import org.apache.naming.resources.Resource;
 import org.apache.naming.resources.ResourceAttributes;
+import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.http.FastHttpDateFormat;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
@@ -1153,7 +1153,7 @@ public class WebdavServlet
                 + lock.expiresAt + "-" + System.currentTimeMillis() + "-"
                 + secret;
             String lockToken = md5Encoder.encode(md5Helper.digest(
-                    lockTokenStr.getBytes(Charset.defaultCharset())));
+                    lockTokenStr.getBytes(B2CConverter.ISO_8859_1)));
 
             if ( (exists) && (object instanceof DirContext) &&
                  (lock.depth == maxDepth) ) {

==================================================
AccessLogValve.java
index f4eec32a5c..50b518630b 100644
--- a/java/org/apache/catalina/util/RequestUtil.java
+++ b/java/org/apache/catalina/util/RequestUtil.java
@@ -247,11 +247,11 @@ public final class RequestUtil {
 
         // use the specified encoding to extract bytes out of the
         // given string so that the encoding is not lost. If an
-        // encoding is not specified, let it use platform default
+        // encoding is not specified, use ISO-8859-1
         byte[] bytes = null;
         try {
             if (enc == null) {
-                bytes = str.getBytes(Charset.defaultCharset());
+                bytes = str.getBytes(B2CConverter.ISO_8859_1);
             } else {
                 bytes = str.getBytes(B2CConverter.getCharset(enc));
             }

==================================================
SSLValve.java
index d4a2ac66b2..b01fbea47a 100644
--- a/java/org/apache/catalina/valves/AccessLogValve.java
+++ b/java/org/apache/catalina/valves/AccessLogValve.java
@@ -1092,7 +1092,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
             }
         }
         if (charset == null) {
-            charset = Charset.defaultCharset();
+            charset = B2CConverter.ISO_8859_1;
         }
 
         try {

==================================================
BufferedInputFilter.java
index 09d76b49e1..d7462b5737 100644
--- a/java/org/apache/catalina/valves/SSLValve.java
+++ b/java/org/apache/catalina/valves/SSLValve.java
@@ -18,7 +18,6 @@ package org.apache.catalina.valves;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
-import java.nio.charset.Charset;
 import java.security.NoSuchProviderException;
 import java.security.cert.CertificateFactory;
 import java.security.cert.X509Certificate;
@@ -30,6 +29,7 @@ import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.buf.B2CConverter;
 
 /**
  * When using mod_proxy_http, the client SSL information is not included in the
@@ -97,7 +97,7 @@ public class SSLValve extends ValveBase {
             String strcerts = strcert4.concat("\n-----END CERTIFICATE-----\n");
             // ByteArrayInputStream bais = new ByteArrayInputStream(strcerts.getBytes("UTF-8"));
             ByteArrayInputStream bais = new ByteArrayInputStream(
-                    strcerts.getBytes(Charset.defaultCharset()));
+                    strcerts.getBytes(B2CConverter.ISO_8859_1));
             X509Certificate jsseCerts[] = null;
             String providerName = (String) request.getConnector().getProperty(
                     "clientCertProvider");

==================================================
ChunkedInputFilter.java
index 077787be07..db428c26ab 100644
--- a/java/org/apache/coyote/http11/filters/BufferedInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/BufferedInputFilter.java
@@ -18,11 +18,11 @@
 package org.apache.coyote.http11.filters;
 
 import java.io.IOException;
-import java.nio.charset.Charset;
 
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.Request;
 import org.apache.coyote.http11.InputFilter;
+import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 
 /**
@@ -48,7 +48,7 @@ public class BufferedInputFilter implements InputFilter {
     // ----------------------------------------------------- Static Initializer
 
     static {
-        ENCODING.setBytes(ENCODING_NAME.getBytes(Charset.defaultCharset()), 0,
+        ENCODING.setBytes(ENCODING_NAME.getBytes(B2CConverter.ISO_8859_1), 0,
                 ENCODING_NAME.length());
     }
 

==================================================
IdentityInputFilter.java
index caf0e69a18..9c20d5361f 100644
--- a/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java
@@ -19,12 +19,12 @@ package org.apache.coyote.http11.filters;
 
 import java.io.EOFException;
 import java.io.IOException;
-import java.nio.charset.Charset;
 
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.Request;
 import org.apache.coyote.http11.Constants;
 import org.apache.coyote.http11.InputFilter;
+import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.HexUtils;
 import org.apache.tomcat.util.buf.MessageBytes;
@@ -51,7 +51,7 @@ public class ChunkedInputFilter implements InputFilter {
 
 
     static {
-        ENCODING.setBytes(ENCODING_NAME.getBytes(Charset.defaultCharset()), 0,
+        ENCODING.setBytes(ENCODING_NAME.getBytes(B2CConverter.ISO_8859_1), 0,
                 ENCODING_NAME.length());
     }
 

==================================================
VoidInputFilter.java
index e8fd8f5fd3..0ddcd24627 100644
--- a/java/org/apache/coyote/http11/filters/IdentityInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/IdentityInputFilter.java
@@ -18,11 +18,11 @@
 package org.apache.coyote.http11.filters;
 
 import java.io.IOException;
-import java.nio.charset.Charset;
 
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.Request;
 import org.apache.coyote.http11.InputFilter;
+import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 
 /**
@@ -44,7 +44,7 @@ public class IdentityInputFilter implements InputFilter {
 
 
     static {
-        ENCODING.setBytes(ENCODING_NAME.getBytes(Charset.defaultCharset()), 0,
+        ENCODING.setBytes(ENCODING_NAME.getBytes(B2CConverter.ISO_8859_1), 0,
                 ENCODING_NAME.length());
     }
 

==================================================
Constants.java
index 25f21f8ac4..0e1e3afd09 100644
--- a/java/org/apache/coyote/http11/filters/VoidInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/VoidInputFilter.java
@@ -18,11 +18,11 @@
 package org.apache.coyote.http11.filters;
 
 import java.io.IOException;
-import java.nio.charset.Charset;
 
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.Request;
 import org.apache.coyote.http11.InputFilter;
+import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 
 /**
@@ -45,7 +45,7 @@ public class VoidInputFilter implements InputFilter {
 
 
     static {
-        ENCODING.setBytes(ENCODING_NAME.getBytes(Charset.defaultCharset()), 0,
+        ENCODING.setBytes(ENCODING_NAME.getBytes(B2CConverter.ISO_8859_1), 0,
                 ENCODING_NAME.length());
     }
 

==================================================
SmapUtil.java
index 442858e7e1..ca5663a3ad 100644
--- a/java/org/apache/jasper/Constants.java
+++ b/java/org/apache/jasper/Constants.java
@@ -17,6 +17,7 @@
 
 package org.apache.jasper;
 
+import java.nio.charset.Charset;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
@@ -219,4 +220,9 @@ public class Constants {
      * the tomcat instance installation path
      */
     public static final String CATALINA_BASE_PROP = "catalina.base";
+
+    /**
+     * Retain reference to default character set so we don't have to look it up.
+     */
+    public static final Charset ISO_8859_1 = Charset.forName("ISO-8859-1");
 }

==================================================
Constants.java
index a4e93aa104..e47ccad6b0 100644
--- a/java/org/apache/jasper/compiler/SmapUtil.java
+++ b/java/org/apache/jasper/compiler/SmapUtil.java
@@ -25,11 +25,11 @@ import java.io.IOException;
 import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
 import java.io.UnsupportedEncodingException;
-import java.nio.charset.Charset;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
 
+import org.apache.jasper.Constants;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.JspCompilationContext;
 
@@ -161,7 +161,7 @@ public class SmapUtil {
         for (int i = 0; i < smap.length; i += 2) {
             File outServlet = new File(smap[i]);
             SDEInstaller.install(outServlet,
-                    smap[i+1].getBytes(Charset.defaultCharset()));
+                    smap[i+1].getBytes(Constants.ISO_8859_1));
         }
     }
 

==================================================
ProxyDirContext.java
index 0deff58f41..7b55f08211 100644
--- a/java/org/apache/naming/resources/Constants.java
+++ b/java/org/apache/naming/resources/Constants.java
@@ -18,6 +18,8 @@
 
 package org.apache.naming.resources;
 
+import java.nio.charset.Charset;
+
 
 /**
  * Static constants for this package.
@@ -29,4 +31,9 @@ public final class Constants {
         "java.protocol.handler.pkgs";
 
     public static final String Package = "org.apache.naming.resources";
+
+    /**
+     * Retain reference to default character set so we don't have to look it up.
+     */
+    public static final Charset ISO_8859_1 = Charset.forName("ISO-8859-1");
 }

==================================================
MessageBytes.java
index ef88a50867..e4f4409669 100644
--- a/java/org/apache/naming/resources/ProxyDirContext.java
+++ b/java/org/apache/naming/resources/ProxyDirContext.java
@@ -21,7 +21,6 @@ package org.apache.naming.resources;
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.nio.charset.Charset;
 import java.util.Hashtable;
 
 import javax.naming.Binding;
@@ -280,7 +279,7 @@ public class ProxyDirContext implements DirContext {
             return object;
         } else {
             return new Resource(new ByteArrayInputStream
-                (object.toString().getBytes(Charset.defaultCharset())));
+                (object.toString().getBytes(Constants.ISO_8859_1)));
         }
     }
 
@@ -1437,7 +1436,7 @@ public class ProxyDirContext implements DirContext {
                     entry.resource = (Resource) object;
                 } else {
                     entry.resource = new Resource(new ByteArrayInputStream
-                        (object.toString().getBytes(Charset.defaultCharset())));
+                        (object.toString().getBytes(Constants.ISO_8859_1)));
                 }
                 Attributes attributes = dirContext.getAttributes(parseName(name));
                 if (!(attributes instanceof ResourceAttributes)) {
@@ -1600,7 +1599,7 @@ public class ProxyDirContext implements DirContext {
                     entry.resource = (Resource) object;
                 } else {
                     entry.resource = new Resource(new ByteArrayInputStream
-                        (object.toString().getBytes(Charset.defaultCharset())));
+                        (object.toString().getBytes(Constants.ISO_8859_1)));
                 }
             } catch (NamingException e) {
                 exists = false;

==================================================
