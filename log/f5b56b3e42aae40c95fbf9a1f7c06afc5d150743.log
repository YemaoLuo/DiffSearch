f5b56b3e42aae40c95fbf9a1f7c06afc5d150743
==================================================
Refactor the code that searches for a matching error page by working up the class hierarchy of an exception type to ErrorPageSupport to enable re-use.
==================================================
Mark Thomas
==================================================
Fri Feb 9 14:04:42 2018 +0000
==================================================
Context.java
Refactor the code that searches for a matching error page by working up the class hierarchy of an exception type to ErrorPageSupport to enable re-use.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1823658 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StandardContext.java
index 12d3daa1bc..491d976036 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -969,14 +969,31 @@ public interface Context extends Container, ContextBind {
 
 
     /**
+     * @param exceptionType Exception type to look up
+     *
      * @return the error page entry for the specified Java exception type,
-     * if any; otherwise return <code>null</code>.
+     *         if any; otherwise return {@code null}.
      *
-     * @param exceptionType Exception type to look up
+     * @deprecated Unused. Will be removed in Tomcat 10.
+     *             Use {@link #findErrorPage(Throwable)} instead.
      */
+    @Deprecated
     public ErrorPage findErrorPage(String exceptionType);
 
 
+    /**
+     * Find and return the ErrorPage instance for the specified exception's
+     * class, or an ErrorPage instance for the closest superclass for which
+     * there is such a definition.  If no associated ErrorPage instance is
+     * found, return <code>null</code>.
+     *
+     * @param throwable The exception type for which to find an ErrorPage
+     *
+     * @return the error page entry for the specified Java exception type,
+     *         if any; otherwise return {@code null}.
+     */
+    public ErrorPage findErrorPage(Throwable throwable);
+
 
     /**
      * @return the set of defined error pages for all specified error codes

==================================================
StandardHostValve.java
index 9307afc5b1..107e1285df 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -3278,18 +3278,19 @@ public class StandardContext extends ContainerBase
     }
 
 
-    /**
-     * Return the error page entry for the specified Java exception type,
-     * if any; otherwise return <code>null</code>.
-     *
-     * @param exceptionType Exception type to look up
-     */
     @Override
+    @Deprecated
     public ErrorPage findErrorPage(String exceptionType) {
         return errorPageSupport.find(exceptionType);
     }
 
 
+    @Override
+    public ErrorPage findErrorPage(Throwable exceptionType) {
+        return errorPageSupport.find(exceptionType);
+    }
+
+
     /**
      * Return the set of defined error pages for all specified error codes
      * and exception types.

==================================================
ContextMBean.java
index 1119ced128..cb24526418 100644
--- a/java/org/apache/catalina/core/StandardHostValve.java
+++ b/java/org/apache/catalina/core/StandardHostValve.java
@@ -293,9 +293,9 @@ final class StandardHostValve extends ValveBase {
             return;
         }
 
-        ErrorPage errorPage = findErrorPage(context, throwable);
+        ErrorPage errorPage = context.findErrorPage(throwable);
         if ((errorPage == null) && (realError != throwable)) {
-            errorPage = findErrorPage(context, realError);
+            errorPage = context.findErrorPage(realError);
         }
 
         if (errorPage != null) {
@@ -397,40 +397,6 @@ final class StandardHostValve extends ValveBase {
             // Report our failure to process this custom page
             container.getLogger().error("Exception Processing " + errorPage, t);
             return false;
-
         }
     }
-
-
-    /**
-     * Find and return the ErrorPage instance for the specified exception's
-     * class, or an ErrorPage instance for the closest superclass for which
-     * there is such a definition.  If no associated ErrorPage instance is
-     * found, return <code>null</code>.
-     *
-     * @param context The Context in which to search
-     * @param exception The exception for which to find an ErrorPage
-     */
-    private static ErrorPage findErrorPage
-        (Context context, Throwable exception) {
-
-        if (exception == null) {
-            return null;
-        }
-        Class<?> clazz = exception.getClass();
-        String name = clazz.getName();
-        while (!Object.class.equals(clazz)) {
-            ErrorPage errorPage = context.findErrorPage(name);
-            if (errorPage != null) {
-                return errorPage;
-            }
-            clazz = clazz.getSuperclass();
-            if (clazz == null) {
-                break;
-            }
-            name = clazz.getName();
-        }
-        return null;
-
-    }
 }

==================================================
FailedContext.java
index 7d1f6b6761..39255ff5a1 100644
--- a/java/org/apache/catalina/mbeans/ContextMBean.java
+++ b/java/org/apache/catalina/mbeans/ContextMBean.java
@@ -88,13 +88,30 @@ public class ContextMBean extends BaseCatalinaMBean<Context> {
      * @param exceptionType Exception type to look up
      * @return a string representation of the error page
      * @throws MBeanException propagated from the managed resource access
+     * @deprecated Unused. Will be removed in Tomcat 10.
+     *             Use {@link #findErrorPage(Throwable)} instead.
      */
+    @Deprecated
     public String findErrorPage(String exceptionType) throws MBeanException {
         Context context = doGetManagedResource();
         return context.findErrorPage(exceptionType).toString();
     }
 
 
+    /**
+     * Return the error page entry for the specified Java exception type,
+     * if any; otherwise return <code>null</code>.
+     *
+     * @param exceptionType Exception type to look up
+     * @return a string representation of the error page
+     * @throws MBeanException propagated from the managed resource access
+     */
+    public String findErrorPage(Throwable exceptionType) throws MBeanException {
+        Context context = doGetManagedResource();
+        return context.findErrorPage(exceptionType).toString();
+    }
+
+
     /**
      * Return the set of defined error pages for all specified error codes
      * and exception types.

==================================================
ErrorPageSupport.java
index 5df803fa4e..fad0c08f75 100644
--- a/java/org/apache/catalina/startup/FailedContext.java
+++ b/java/org/apache/catalina/startup/FailedContext.java
@@ -510,6 +510,8 @@ public class FailedContext extends LifecycleMBeanBase implements Context {
     @Override
     public ErrorPage findErrorPage(String exceptionType) { return null; }
     @Override
+    public ErrorPage findErrorPage(Throwable throwable) { return null; }
+    @Override
     public ErrorPage[] findErrorPages() { return null; }
     @Override
     public void removeErrorPage(ErrorPage errorPage) { /* NO-OP */ }

==================================================
TesterContext.java
index cc748a52ac..c3a377faab 100644
--- a/java/org/apache/catalina/util/ErrorPageSupport.java
+++ b/java/org/apache/catalina/util/ErrorPageSupport.java
@@ -61,11 +61,44 @@ public class ErrorPageSupport {
     }
 
 
+    /**
+     * Find the ErrorPage, if any, for the named exception type.
+     *
+     * @param exceptionType The fully qualified class name of the exception type
+     *
+     * @return The ErrorPage for the named exception type, or {@code null} if
+     *         none is configured
+     *
+     * @deprecated Unused. Will be removed in Tomcat 10.
+     *             Use {@link #find(Throwable)} instead.
+     */
+    @Deprecated
     public ErrorPage find(String exceptionType) {
         return exceptionPages.get(exceptionType);
     }
 
 
+    public ErrorPage find(Throwable exceptionType) {
+        if (exceptionType == null) {
+            return null;
+        }
+        Class<?> clazz = exceptionType.getClass();
+        String name = clazz.getName();
+        while (!Object.class.equals(clazz)) {
+            ErrorPage errorPage = exceptionPages.get(name);
+            if (errorPage != null) {
+                return errorPage;
+            }
+            clazz = clazz.getSuperclass();
+            if (clazz == null) {
+                break;
+            }
+            name = clazz.getName();
+        }
+        return null;
+    }
+
+
     public ErrorPage[] findAll() {
         Set<ErrorPage> errorPages = new HashSet<>();
         errorPages.addAll(exceptionPages.values());

==================================================
