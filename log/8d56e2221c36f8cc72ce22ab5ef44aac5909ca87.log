8d56e2221c36f8cc72ce22ab5ef44aac5909ca87
==================================================
- Package rename the commons-logging impl that was in sandbox.
==================================================
Remy Maucherat
==================================================
Sun Oct 8 15:27:16 2006 +0000
==================================================
CometEvent.java
- Package rename the commons-logging impl that was in sandbox.
- Thanks to the package renaming feature of IDEs, it's possible to revert that in 2 minutes :)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@454158 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Container.java
index 2cc9dc1a5d..c38baade60 100644
--- a/java/org/apache/catalina/CometEvent.java
+++ b/java/org/apache/catalina/CometEvent.java
@@ -34,7 +34,7 @@ public interface CometEvent {
     /**
      * Enumeration describing the major events that the container can invoke 
      * the CometProcessors event() method with
-     * BEGIN - will be called by the main service method of the servlet at the beginning 
+     * BEGIN - will be called at the beginning 
      *  of the processing of the connection. It can be used to initialize any relevant 
      *  fields using the request and response objects. Between the end of the processing 
      *  of this event, and the beginning of the processing of the end or error events,
@@ -67,7 +67,8 @@ public interface CometEvent {
     
     /**
      * Event details
-     * TIMEOUT - the connection timed out (sub type of ERROR)
+     * TIMEOUT - the connection timed out (sub type of ERROR); note that this ERROR type is not fatal, and
+     *   the connection will not be closed unless the servlet uses the close method of the event
      * CLIENT_DISCONNECT - the client connection was closed (sub type of ERROR)
      * IOEXCEPTION - an IO exception occurred, such as invalid content, for example, an invalid chunk block (sub type of ERROR)
      * WEBAPP_RELOAD - the webapplication is being reloaded (sub type of END)

==================================================
AuthenticatorBase.java
index df2a7506dd..f2e334bf64 100644
--- a/java/org/apache/catalina/Container.java
+++ b/java/org/apache/catalina/Container.java
@@ -23,9 +23,9 @@ import java.io.IOException;
 import javax.servlet.ServletException;
 import javax.naming.directory.DirContext;
 
-import org.apache.commons.logging.Log;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
+import org.apache.juli.logging.Log;
 
 
 /**

==================================================
BasicAuthenticator.java
index 80c24aaed9..a8a71c6e9b 100644
--- a/java/org/apache/catalina/authenticator/AuthenticatorBase.java
+++ b/java/org/apache/catalina/authenticator/AuthenticatorBase.java
@@ -48,8 +48,8 @@ import org.apache.catalina.util.DateTool;
 import org.apache.catalina.util.LifecycleSupport;
 import org.apache.catalina.util.StringManager;
 import org.apache.catalina.valves.ValveBase;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 
 /**

==================================================
DigestAuthenticator.java
index 45f15c9238..a8ce22447f 100644
--- a/java/org/apache/catalina/authenticator/BasicAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/BasicAuthenticator.java
@@ -27,8 +27,8 @@ import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
 import org.apache.catalina.deploy.LoginConfig;
 import org.apache.catalina.util.Base64;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.CharChunk;
 import org.apache.tomcat.util.buf.MessageBytes;

==================================================
FormAuthenticator.java
index 78822a0953..c834e8c3fe 100644
--- a/java/org/apache/catalina/authenticator/DigestAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/DigestAuthenticator.java
@@ -26,14 +26,14 @@ import java.util.StringTokenizer;
 
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 
 import org.apache.catalina.Realm;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
 import org.apache.catalina.deploy.LoginConfig;
 import org.apache.catalina.util.MD5Encoder;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 
 

==================================================
Connector.java
index e4dd68f856..e7ed472dd4 100644
--- a/java/org/apache/catalina/authenticator/FormAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/FormAuthenticator.java
@@ -34,9 +34,9 @@ import org.apache.catalina.Session;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
 import org.apache.catalina.deploy.LoginConfig;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.coyote.ActionCode;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.CharChunk;
 import org.apache.tomcat.util.buf.MessageBytes;

==================================================
CoyoteAdapter.java
index 4c748ea30e..b9ad616eb4 100644
--- a/java/org/apache/catalina/connector/Connector.java
+++ b/java/org/apache/catalina/connector/Connector.java
@@ -34,10 +34,10 @@ import org.apache.catalina.Service;
 import org.apache.catalina.core.StandardEngine;
 import org.apache.catalina.util.LifecycleSupport;
 import org.apache.catalina.util.StringManager;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.coyote.Adapter;
 import org.apache.coyote.ProtocolHandler;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.IntrospectionUtils;
 import org.apache.tomcat.util.http.mapper.Mapper;
 import org.apache.tomcat.util.modeler.Registry;

==================================================
MapperListener.java
index 8203e26eb4..eb89e1e041 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -24,10 +24,10 @@ import org.apache.catalina.Context;
 import org.apache.catalina.Globals;
 import org.apache.catalina.Wrapper;
 import org.apache.catalina.util.StringManager;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.coyote.ActionCode;
 import org.apache.coyote.Adapter;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.CharChunk;

==================================================
ApplicationDispatcher.java
index f07af9d8b0..730e345f4d 100644
--- a/java/org/apache/catalina/connector/MapperListener.java
+++ b/java/org/apache/catalina/connector/MapperListener.java
@@ -25,8 +25,8 @@ import javax.management.NotificationListener;
 import javax.management.ObjectInstance;
 import javax.management.ObjectName;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 
 import org.apache.tomcat.util.http.mapper.Mapper;

==================================================
AprLifecycleListener.java
index eaffefb869..c8fee93d95 100644
--- a/java/org/apache/catalina/core/ApplicationDispatcher.java
+++ b/java/org/apache/catalina/core/ApplicationDispatcher.java
@@ -46,8 +46,8 @@ import org.apache.catalina.connector.Response;
 import org.apache.catalina.connector.ResponseFacade;
 import org.apache.catalina.util.InstanceSupport;
 import org.apache.catalina.util.StringManager;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * Standard implementation of <code>RequestDispatcher</code> that allows a

==================================================
ContainerBase.java
index 0805f35a1b..a456fe8439 100644
--- a/java/org/apache/catalina/core/AprLifecycleListener.java
+++ b/java/org/apache/catalina/core/AprLifecycleListener.java
@@ -22,8 +22,8 @@ import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleEvent;
 import org.apache.catalina.LifecycleListener;
 import org.apache.catalina.util.StringManager;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 
 /**

==================================================
JasperListener.java
index 74ce013ebd..6a67bb2d12 100644
--- a/java/org/apache/catalina/core/ContainerBase.java
+++ b/java/org/apache/catalina/core/ContainerBase.java
@@ -52,8 +52,8 @@ import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
 import org.apache.catalina.util.LifecycleSupport;
 import org.apache.catalina.util.StringManager;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.naming.resources.ProxyDirContext;
 import org.apache.tomcat.util.modeler.Registry;
 
@@ -121,8 +121,8 @@ import org.apache.tomcat.util.modeler.Registry;
 public abstract class ContainerBase
     implements Container, Lifecycle, Pipeline, MBeanRegistration, Serializable {
 
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( ContainerBase.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( ContainerBase.class );
 
     /**
      * Perform addChild with the permissions of this class.

==================================================
NamingContextListener.java
index 766ba11121..3756c13733 100644
--- a/java/org/apache/catalina/core/JasperListener.java
+++ b/java/org/apache/catalina/core/JasperListener.java
@@ -21,8 +21,8 @@ import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleEvent;
 import org.apache.catalina.LifecycleListener;
 import org.apache.catalina.util.StringManager;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 
 /**

==================================================
StandardContext.java
index fe9249748d..60abf52b34 100644
--- a/java/org/apache/catalina/core/NamingContextListener.java
+++ b/java/org/apache/catalina/core/NamingContextListener.java
@@ -52,8 +52,8 @@ import org.apache.catalina.deploy.ContextResourceLink;
 import org.apache.catalina.deploy.ContextTransaction;
 import org.apache.catalina.deploy.NamingResources;
 import org.apache.catalina.util.StringManager;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.naming.ContextAccessController;
 import org.apache.naming.ContextBindings;
 import org.apache.naming.EjbRef;

==================================================
StandardEngine.java
index f4bd9b6614..afac9f312d 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -91,8 +91,8 @@ import org.apache.catalina.util.DefaultAnnotationProcessor;
 import org.apache.catalina.util.ExtensionValidator;
 import org.apache.catalina.util.RequestUtil;
 import org.apache.catalina.util.URLEncoder;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.naming.ContextBindings;
 import org.apache.naming.resources.BaseDirContext;
 import org.apache.naming.resources.DirContextURLStreamHandler;

==================================================
StandardHost.java
index a85a6e9bee..4c000a9408 100644
--- a/java/org/apache/catalina/core/StandardEngine.java
+++ b/java/org/apache/catalina/core/StandardEngine.java
@@ -33,8 +33,8 @@ import org.apache.catalina.Realm;
 import org.apache.catalina.Service;
 import org.apache.catalina.realm.JAASRealm;
 import org.apache.catalina.util.ServerInfo;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.modeler.Registry;
 import org.apache.tomcat.util.modeler.modules.MbeansSource;
 

==================================================
StandardHostValve.java
index c7f4daf2ce..71f0539850 100644
--- a/java/org/apache/catalina/core/StandardHost.java
+++ b/java/org/apache/catalina/core/StandardHost.java
@@ -47,8 +47,8 @@ public class StandardHost
  {
     /* Why do we implement deployer and delegate to deployer ??? */
 
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( StandardHost.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( StandardHost.class );
     
     // ----------------------------------------------------------- Constructors
 

==================================================
StandardPipeline.java
index 64813215a5..e367512fc1 100644
--- a/java/org/apache/catalina/core/StandardHostValve.java
+++ b/java/org/apache/catalina/core/StandardHostValve.java
@@ -36,8 +36,8 @@ import org.apache.catalina.deploy.ErrorPage;
 import org.apache.catalina.util.RequestUtil;
 import org.apache.catalina.util.StringManager;
 import org.apache.catalina.valves.ValveBase;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 
 /**

==================================================
StandardServer.java
index c953d1e574..388cbdb4c6 100644
--- a/java/org/apache/catalina/core/StandardPipeline.java
+++ b/java/org/apache/catalina/core/StandardPipeline.java
@@ -32,8 +32,8 @@ import org.apache.catalina.Valve;
 import org.apache.catalina.util.LifecycleSupport;
 import org.apache.catalina.util.StringManager;
 import org.apache.catalina.valves.ValveBase;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.modeler.Registry;
 
 

==================================================
StandardService.java
index 09a1d10aa0..1232600bed 100644
--- a/java/org/apache/catalina/core/StandardServer.java
+++ b/java/org/apache/catalina/core/StandardServer.java
@@ -43,8 +43,8 @@ import org.apache.catalina.deploy.NamingResources;
 import org.apache.catalina.util.LifecycleSupport;
 import org.apache.catalina.util.StringManager;
 import org.apache.catalina.util.ServerInfo;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.buf.StringCache;
 import org.apache.tomcat.util.modeler.Registry;
 

==================================================
StandardWrapper.java
index 7b17adb43b..1c46a2a110 100644
--- a/java/org/apache/catalina/core/StandardService.java
+++ b/java/org/apache/catalina/core/StandardService.java
@@ -34,8 +34,8 @@ import org.apache.catalina.ServerFactory;
 import org.apache.catalina.connector.Connector;
 import org.apache.catalina.util.LifecycleSupport;
 import org.apache.catalina.util.StringManager;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.modeler.Registry;
 
 

==================================================
StandardWrapperValve.java
index b0756ffd7c..ad68a131a0 100644
--- a/java/org/apache/catalina/core/StandardWrapper.java
+++ b/java/org/apache/catalina/core/StandardWrapper.java
@@ -76,8 +76,8 @@ public class StandardWrapper
     extends ContainerBase
     implements ServletConfig, Wrapper, NotificationEmitter {
 
-    protected static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( StandardWrapper.class );
+    protected static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( StandardWrapper.class );
 
     protected static final String[] DEFAULT_SERVLET_METHODS = new String[] {
                                                     "GET", "HEAD", "POST" };

==================================================
SecurityCollection.java
index f180194559..25a335a6d7 100644
--- a/java/org/apache/catalina/core/StandardWrapperValve.java
+++ b/java/org/apache/catalina/core/StandardWrapperValve.java
@@ -36,8 +36,8 @@ import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
 import org.apache.catalina.util.StringManager;
 import org.apache.catalina.valves.ValveBase;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.log.SystemLogHandler;
 

==================================================
CatalinaCluster.java
index b3d9874c90..482793d4b9 100644
--- a/java/org/apache/catalina/deploy/SecurityCollection.java
+++ b/java/org/apache/catalina/deploy/SecurityCollection.java
@@ -20,8 +20,8 @@ package org.apache.catalina.deploy;
 
 import org.apache.catalina.util.RequestUtil;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 import java.io.Serializable;
 

==================================================
ClusterListener.java
index 52bac116fd..c4dd07a096 100644
--- a/java/org/apache/catalina/ha/CatalinaCluster.java
+++ b/java/org/apache/catalina/ha/CatalinaCluster.java
@@ -24,7 +24,7 @@ import org.apache.catalina.Manager;
 import org.apache.catalina.Valve;
 import org.apache.catalina.tribes.Channel;
 import org.apache.catalina.tribes.Member;
-import org.apache.commons.logging.Log;
+import org.apache.juli.logging.Log;
 
 
 

==================================================
ReplicatedContext.java
index 6d7aa60876..8661e4b08f 100644
--- a/java/org/apache/catalina/ha/ClusterListener.java
+++ b/java/org/apache/catalina/ha/ClusterListener.java
@@ -36,7 +36,7 @@ import org.apache.catalina.tribes.Member;
  */
 public abstract class ClusterListener implements ChannelListener {
 
-    public static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(ClusterListener.class);
+    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ClusterListener.class);
 
 
     //--Instance Variables--------------------------------------

==================================================
FarmWarDeployer.java
index 680fae0f97..eb9c1ec836 100644
--- a/java/org/apache/catalina/ha/context/ReplicatedContext.java
+++ b/java/org/apache/catalina/ha/context/ReplicatedContext.java
@@ -33,7 +33,7 @@ import org.apache.catalina.tribes.tipis.LazyReplicatedMap;
  */
 public class ReplicatedContext extends StandardContext {
     private int mapSendOptions = Channel.SEND_OPTIONS_DEFAULT;
-    public static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog( ReplicatedContext.class );
+    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( ReplicatedContext.class );
 
     protected static long DEFAULT_REPL_TIMEOUT = 15000;//15 seconds
     

==================================================
FileMessageFactory.java
index 11ec1f2827..78d88cb077 100644
--- a/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
+++ b/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
@@ -57,7 +57,7 @@ import org.apache.tomcat.util.modeler.Registry;
  */
 public class FarmWarDeployer extends ClusterListener implements ClusterDeployer, FileChangeListener {
     /*--Static Variables----------------------------------------*/
-    public static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
+    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory
             .getLog(FarmWarDeployer.class);
     /**
      * The descriptive information about this implementation.

==================================================
WarWatcher.java
index 43354eaa55..21d9643c7d 100644
--- a/java/org/apache/catalina/ha/deploy/FileMessageFactory.java
+++ b/java/org/apache/catalina/ha/deploy/FileMessageFactory.java
@@ -38,7 +38,7 @@ import java.io.FileNotFoundException;
  */
 public class FileMessageFactory {
     /*--Static Variables----------------------------------------*/
-    public static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
+    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory
             .getLog(FileMessageFactory.class);
 
     /**

==================================================
BackupManager.java
index f7aaa4ce0c..1249448bd6 100644
--- a/java/org/apache/catalina/ha/deploy/WarWatcher.java
+++ b/java/org/apache/catalina/ha/deploy/WarWatcher.java
@@ -36,7 +36,7 @@ import java.util.Iterator;
 public class WarWatcher {
 
     /*--Static Variables----------------------------------------*/
-    public static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
+    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory
             .getLog(WarWatcher.class);
 
     /*--Instance Variables--------------------------------------*/

==================================================
DeltaManager.java
index 879c1098b3..5461a52754 100644
--- a/java/org/apache/catalina/ha/session/BackupManager.java
+++ b/java/org/apache/catalina/ha/session/BackupManager.java
@@ -34,7 +34,7 @@ import org.apache.catalina.tribes.tipis.LazyReplicatedMap;
  */
 public class BackupManager extends StandardManager implements ClusterManager
 {
-    public static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog( BackupManager.class );
+    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( BackupManager.class );
 
     protected static long DEFAULT_REPL_TIMEOUT = 15000;//15 seconds
 

==================================================
DeltaRequest.java
index 600e25a6bf..7082963008 100644
--- a/java/org/apache/catalina/ha/session/DeltaManager.java
+++ b/java/org/apache/catalina/ha/session/DeltaManager.java
@@ -67,7 +67,7 @@ import org.apache.catalina.ha.ClusterManager;
 public class DeltaManager extends ClusterManagerBase{
 
     // ---------------------------------------------------- Security Classes
-    public static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(DeltaManager.class);
+    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(DeltaManager.class);
 
     /**
      * The string manager for this package.

==================================================
DeltaSession.java
index e81c07f3a5..9a2c378616 100644
--- a/java/org/apache/catalina/ha/session/DeltaRequest.java
+++ b/java/org/apache/catalina/ha/session/DeltaRequest.java
@@ -39,8 +39,8 @@ import java.io.ObjectOutputStream;
 
 public class DeltaRequest implements Externalizable {
 
-    public static org.apache.commons.logging.Log log =
-        org.apache.commons.logging.LogFactory.getLog( DeltaRequest.class );
+    public static org.apache.juli.logging.Log log =
+        org.apache.juli.logging.LogFactory.getLog( DeltaRequest.class );
 
     /**
      * The string manager for this package.

==================================================
JvmRouteBinderValve.java
index 1f1b49417f..8f5d7dfbfa 100644
--- a/java/org/apache/catalina/ha/session/DeltaSession.java
+++ b/java/org/apache/catalina/ha/session/DeltaSession.java
@@ -56,7 +56,7 @@ import java.util.concurrent.atomic.AtomicInteger;
 
 public class DeltaSession extends StandardSession implements Externalizable,ClusterSession,ReplicatedMapEntry {
 
-    public static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(DeltaSession.class);
+    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(DeltaSession.class);
 
     /**
      * The string manager for this package.

==================================================
JvmRouteSessionIDBinderLifecycleListener.java
index e77c3b3228..f35845182a 100644
--- a/java/org/apache/catalina/ha/session/JvmRouteBinderValve.java
+++ b/java/org/apache/catalina/ha/session/JvmRouteBinderValve.java
@@ -84,7 +84,7 @@ import org.apache.catalina.valves.ValveBase;
 public class JvmRouteBinderValve extends ValveBase implements ClusterValve, Lifecycle {
 
     /*--Static Variables----------------------------------------*/
-    public static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
+    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory
             .getLog(JvmRouteBinderValve.class);
 
     /**

==================================================
SimpleTcpReplicationManager.java
index 316238be22..998654d2ba 100644
--- a/java/org/apache/catalina/ha/session/JvmRouteSessionIDBinderLifecycleListener.java
+++ b/java/org/apache/catalina/ha/session/JvmRouteSessionIDBinderLifecycleListener.java
@@ -28,8 +28,8 @@ import org.apache.catalina.core.StandardHost;
 import org.apache.catalina.ha.CatalinaCluster;
 import org.apache.catalina.ha.ClusterListener;
 import org.apache.catalina.util.StringManager;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.modeler.ManagedBean;
 import org.apache.tomcat.util.modeler.Registry;
 

==================================================
ReplicationValve.java
index 9f3bb330e5..36cabe1859 100644
--- a/java/org/apache/catalina/ha/session/SimpleTcpReplicationManager.java
+++ b/java/org/apache/catalina/ha/session/SimpleTcpReplicationManager.java
@@ -58,7 +58,7 @@ import org.apache.catalina.Loader;
  */
 public class SimpleTcpReplicationManager extends StandardManager implements ClusterManager
 {
-    public static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog( SimpleTcpReplicationManager.class );
+    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( SimpleTcpReplicationManager.class );
 
     //the channel configuration
     protected String mChannelConfig = null;

==================================================
SimpleTcpCluster.java
index 198204dee2..b00f76a017 100644
--- a/java/org/apache/catalina/ha/tcp/ReplicationValve.java
+++ b/java/org/apache/catalina/ha/tcp/ReplicationValve.java
@@ -62,8 +62,8 @@ import org.apache.catalina.valves.ValveBase;
 public class ReplicationValve
     extends ValveBase implements ClusterValve {
     
-    private static org.apache.commons.logging.Log log =
-        org.apache.commons.logging.LogFactory.getLog( ReplicationValve.class );
+    private static org.apache.juli.logging.Log log =
+        org.apache.juli.logging.LogFactory.getLog( ReplicationValve.class );
 
     // ----------------------------------------------------- Instance Variables
 

==================================================
WebappClassLoader.java
index 832e3eadb6..71037f76a7 100644
--- a/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java
+++ b/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java
@@ -50,8 +50,8 @@ import org.apache.catalina.tribes.MembershipListener;
 import org.apache.catalina.tribes.group.GroupChannel;
 import org.apache.catalina.util.LifecycleSupport;
 import org.apache.catalina.util.StringManager;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.IntrospectionUtils;
 
 /**

==================================================
WebappLoader.java
index fb839a7d38..b7983aab04 100644
--- a/java/org/apache/catalina/loader/WebappClassLoader.java
+++ b/java/org/apache/catalina/loader/WebappClassLoader.java
@@ -105,8 +105,8 @@ public class WebappClassLoader
     implements Reloader, Lifecycle
  {
 
-    protected static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( WebappClassLoader.class );
+    protected static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( WebappClassLoader.class );
 
     protected class PrivilegedFindResource
         implements PrivilegedAction {
@@ -1633,7 +1633,7 @@ public class WebappClassLoader
         IntrospectionUtils.clear();
         
         // Clear the classloader reference in common-logging
-        org.apache.commons.logging.LogFactory.release(this);
+        org.apache.juli.logging.LogFactory.release(this);
         
         // Clear the classloader reference in the VM's bean introspector
         java.beans.Introspector.flushCaches();

==================================================
GlobalResourcesLifecycleListener.java
index b7db51fdce..07b08880cd 100644
--- a/java/org/apache/catalina/loader/WebappLoader.java
+++ b/java/org/apache/catalina/loader/WebappLoader.java
@@ -1190,8 +1190,8 @@ public class WebappLoader
     }
 
 
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( WebappLoader.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( WebappLoader.class );
 
     private ObjectName oname;
     private MBeanServer mserver;

==================================================
MBeanFactory.java
index d98fd1e242..53737bb0d9 100644
--- a/java/org/apache/catalina/mbeans/GlobalResourcesLifecycleListener.java
+++ b/java/org/apache/catalina/mbeans/GlobalResourcesLifecycleListener.java
@@ -31,8 +31,8 @@ import org.apache.catalina.LifecycleListener;
 import org.apache.catalina.Role;
 import org.apache.catalina.User;
 import org.apache.catalina.UserDatabase;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.modeler.Registry;
 
 

==================================================
MBeanUtils.java
index 9e6855af63..2e00f9e9da 100644
--- a/java/org/apache/catalina/mbeans/MBeanFactory.java
+++ b/java/org/apache/catalina/mbeans/MBeanFactory.java
@@ -66,8 +66,8 @@ import org.apache.tomcat.util.modeler.Registry;
 
 public class MBeanFactory extends BaseModelMBean {
 
-    private static org.apache.commons.logging.Log log = 
-        org.apache.commons.logging.LogFactory.getLog(MBeanFactory.class);
+    private static org.apache.juli.logging.Log log = 
+        org.apache.juli.logging.LogFactory.getLog(MBeanFactory.class);
 
     /**
      * The <code>MBeanServer</code> for this application.

==================================================
ServerLifecycleListener.java
index 71ae2a8cfb..e042e79de4 100644
--- a/java/org/apache/catalina/mbeans/MBeanUtils.java
+++ b/java/org/apache/catalina/mbeans/MBeanUtils.java
@@ -47,8 +47,8 @@ import org.apache.catalina.deploy.ContextResource;
 import org.apache.catalina.deploy.ContextResourceLink;
 import org.apache.catalina.deploy.NamingResources;
 import org.apache.catalina.valves.ValveBase;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.IntrospectionUtils;
 import org.apache.tomcat.util.modeler.ManagedBean;
 import org.apache.tomcat.util.modeler.Registry;

==================================================
JAASCallbackHandler.java
index c8bdcaec19..4d694e8d65 100644
--- a/java/org/apache/catalina/mbeans/ServerLifecycleListener.java
+++ b/java/org/apache/catalina/mbeans/ServerLifecycleListener.java
@@ -47,8 +47,8 @@ import org.apache.catalina.deploy.ContextEnvironment;
 import org.apache.catalina.deploy.ContextResource;
 import org.apache.catalina.deploy.ContextResourceLink;
 import org.apache.catalina.deploy.NamingResources;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 
 /**

==================================================
JAASMemoryLoginModule.java
index 6b7d30222d..2ec00f30cd 100644
--- a/java/org/apache/catalina/realm/JAASCallbackHandler.java
+++ b/java/org/apache/catalina/realm/JAASCallbackHandler.java
@@ -26,8 +26,8 @@ import javax.security.auth.callback.PasswordCallback;
 import javax.security.auth.callback.UnsupportedCallbackException;
 
 import org.apache.catalina.util.StringManager;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * <p>Implementation of the JAAS <code>CallbackHandler</code> interface,

==================================================
JAASRealm.java
index 2794fb2f60..d1311a1770 100644
--- a/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
+++ b/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
@@ -41,8 +41,8 @@ import org.apache.catalina.connector.Request;
 import org.apache.catalina.deploy.SecurityConstraint;
 import org.apache.catalina.util.RequestUtil;
 import org.apache.catalina.util.StringManager;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.digester.Digester;
 
 

==================================================
MemoryRealm.java
index 5b57a903a6..45755598b3 100644
--- a/java/org/apache/catalina/realm/JAASRealm.java
+++ b/java/org/apache/catalina/realm/JAASRealm.java
@@ -33,8 +33,8 @@ import javax.security.auth.login.LoginException;
 import org.apache.catalina.Container;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.util.StringManager;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 
 /**

==================================================
RealmBase.java
index 5a924af322..f67a14ca8d 100644
--- a/java/org/apache/catalina/realm/MemoryRealm.java
+++ b/java/org/apache/catalina/realm/MemoryRealm.java
@@ -26,8 +26,8 @@ import java.util.Map;
 import org.apache.catalina.Container;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.util.StringManager;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.digester.Digester;
 
 

==================================================
SecurityConfig.java
index f70d94a2ed..501420c8ed 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -50,8 +50,8 @@ import org.apache.catalina.util.HexUtils;
 import org.apache.catalina.util.LifecycleSupport;
 import org.apache.catalina.util.MD5Encoder;
 import org.apache.catalina.util.StringManager;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.modeler.Registry;
 
 /**

==================================================
SecurityUtil.java
index b066acd234..5f151fa094 100644
--- a/java/org/apache/catalina/security/SecurityConfig.java
+++ b/java/org/apache/catalina/security/SecurityConfig.java
@@ -27,8 +27,8 @@ import org.apache.catalina.startup.CatalinaProperties;
 public final class SecurityConfig{
     private static SecurityConfig singleton = null;
 
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( SecurityConfig.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( SecurityConfig.class );
 
     
     private final static String PACKAGE_ACCESS =  "sun.,"

==================================================
ManagerBase.java
index a2870514cc..902aa29c27 100644
--- a/java/org/apache/catalina/security/SecurityUtil.java
+++ b/java/org/apache/catalina/security/SecurityUtil.java
@@ -63,8 +63,8 @@ public final class SecurityUtil{
      */
     private static HashMap objectCache = new HashMap();
         
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( SecurityUtil.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( SecurityUtil.class );
     
     private static String PACKAGE = "org.apache.catalina.security";
     

==================================================
PersistentManagerBase.java
index a5bad57907..cf74cb2c36 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -48,8 +48,8 @@ import org.apache.catalina.Session;
 import org.apache.catalina.core.StandardContext;
 import org.apache.catalina.core.StandardHost;
 import org.apache.catalina.util.StringManager;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.modeler.Registry;
 
 

==================================================
Bootstrap.java
index ae73a5d952..51264d0660 100644
--- a/java/org/apache/catalina/session/PersistentManagerBase.java
+++ b/java/org/apache/catalina/session/PersistentManagerBase.java
@@ -31,10 +31,10 @@ import org.apache.catalina.LifecycleListener;
 import org.apache.catalina.Session;
 import org.apache.catalina.Store;
 import org.apache.catalina.util.LifecycleSupport;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 
 import org.apache.catalina.security.SecurityUtil;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 /**
  * Extends the <b>ManagerBase</b> class to implement most of the
  * functionality required by a Manager which supports any kind of

==================================================
Catalina.java
index 09f658bf95..bb8cfea546 100644
--- a/java/org/apache/catalina/startup/Bootstrap.java
+++ b/java/org/apache/catalina/startup/Bootstrap.java
@@ -30,8 +30,8 @@ import javax.management.MBeanServerFactory;
 import javax.management.ObjectName;
 
 import org.apache.catalina.security.SecurityClassLoad;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 
 /**

==================================================
CatalinaProperties.java
index 8d5fa74397..974dab6315 100644
--- a/java/org/apache/catalina/startup/Catalina.java
+++ b/java/org/apache/catalina/startup/Catalina.java
@@ -649,8 +649,8 @@ public class Catalina extends Embedded {
     }
     
     
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( Catalina.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( Catalina.class );
 
 }
 

==================================================
ClassLoaderFactory.java
index 6720d6a129..296f59bff1 100644
--- a/java/org/apache/catalina/startup/CatalinaProperties.java
+++ b/java/org/apache/catalina/startup/CatalinaProperties.java
@@ -37,8 +37,8 @@ public class CatalinaProperties {
 
     // ------------------------------------------------------- Static Variables
 
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( CatalinaProperties.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( CatalinaProperties.class );
 
     private static Properties properties = null;
 

==================================================
ClusterRuleSetFactory.java
index 1d7a297dcb..243d9f6223 100644
--- a/java/org/apache/catalina/startup/ClassLoaderFactory.java
+++ b/java/org/apache/catalina/startup/ClassLoaderFactory.java
@@ -23,8 +23,8 @@ import java.net.URL;
 import java.util.ArrayList;
 
 import org.apache.catalina.loader.StandardClassLoader;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 
 /**

==================================================
ContextConfig.java
index 4ea91e82f1..64dddb66a5 100644
--- a/java/org/apache/catalina/startup/ClusterRuleSetFactory.java
+++ b/java/org/apache/catalina/startup/ClusterRuleSetFactory.java
@@ -21,8 +21,10 @@ package org.apache.catalina.startup;
 import org.apache.tomcat.util.digester.Digester;
 import org.apache.tomcat.util.digester.RuleSetBase;
 import java.lang.reflect.Constructor;
-import org.apache.commons.logging.LogFactory;
-import org.apache.commons.logging.Log;
+
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+
 import java.lang.reflect.InvocationTargetException;
 public class ClusterRuleSetFactory {
     

==================================================
DigesterFactory.java
index f9145bbd6a..62f0e54acd 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -69,8 +69,8 @@ import org.xml.sax.SAXParseException;
 public class ContextConfig
     implements LifecycleListener {
 
-    protected static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( ContextConfig.class );
+    protected static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( ContextConfig.class );
 
     // ----------------------------------------------------- Instance Variables
 

==================================================
Embedded.java
index 048d182d1b..6e319fb01e 100644
--- a/java/org/apache/catalina/startup/DigesterFactory.java
+++ b/java/org/apache/catalina/startup/DigesterFactory.java
@@ -32,8 +32,8 @@ public class DigesterFactory {
     /**
      * The log.
      */
-   protected static org.apache.commons.logging.Log log = 
-       org.apache.commons.logging.LogFactory.getLog(DigesterFactory.class);
+   protected static org.apache.juli.logging.Log log = 
+       org.apache.juli.logging.LogFactory.getLog(DigesterFactory.class);
 
     /**
      * The XML entiry resolver used by the Digester.

==================================================
EngineConfig.java
index cd177031cd..efb440fff2 100644
--- a/java/org/apache/catalina/startup/Embedded.java
+++ b/java/org/apache/catalina/startup/Embedded.java
@@ -43,8 +43,8 @@ import org.apache.catalina.loader.WebappLoader;
 import org.apache.catalina.security.SecurityConfig;
 import org.apache.catalina.util.LifecycleSupport;
 import org.apache.catalina.util.StringManager;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.IntrospectionUtils;
 import org.apache.tomcat.util.log.SystemLogHandler;
 

==================================================
ExpandWar.java
index 19e3375ba0..d8ffc8e4e1 100644
--- a/java/org/apache/catalina/startup/EngineConfig.java
+++ b/java/org/apache/catalina/startup/EngineConfig.java
@@ -37,8 +37,8 @@ public class EngineConfig
     implements LifecycleListener {
 
 
-    protected static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( EngineConfig.class );
+    protected static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( EngineConfig.class );
 
     // ----------------------------------------------------- Instance Variables
 

==================================================
HostConfig.java
index fbf12a4307..da35c76e1d 100644
--- a/java/org/apache/catalina/startup/ExpandWar.java
+++ b/java/org/apache/catalina/startup/ExpandWar.java
@@ -32,8 +32,8 @@ import java.util.jar.JarFile;
 
 import org.apache.catalina.Host;
 import org.apache.catalina.util.StringManager;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * Expand out a WAR in a Host's appBase.

==================================================
TldConfig.java
index 189f1582ab..5046945739 100644
--- a/java/org/apache/catalina/startup/HostConfig.java
+++ b/java/org/apache/catalina/startup/HostConfig.java
@@ -56,8 +56,8 @@ import org.apache.tomcat.util.modeler.Registry;
 public class HostConfig
     implements LifecycleListener {
     
-    protected static org.apache.commons.logging.Log log=
-         org.apache.commons.logging.LogFactory.getLog( HostConfig.class );
+    protected static org.apache.juli.logging.Log log=
+         org.apache.juli.logging.LogFactory.getLog( HostConfig.class );
 
     // ----------------------------------------------------- Instance Variables
 

==================================================
Tool.java
index 04dc2f4508..fc20acccd9 100644
--- a/java/org/apache/catalina/startup/TldConfig.java
+++ b/java/org/apache/catalina/startup/TldConfig.java
@@ -64,8 +64,8 @@ public final class TldConfig  {
     // Names of JARs that are known not to contain any TLDs
     private static HashSet noTldJars;
 
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( TldConfig.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( TldConfig.class );
 
     private static final String FILE_URL_PREFIX = "file:";
     private static final int FILE_URL_PREFIX_LEN = FILE_URL_PREFIX.length();

==================================================
UserConfig.java
index 2fc50e6d67..f54bd81920 100644
--- a/java/org/apache/catalina/startup/Tool.java
+++ b/java/org/apache/catalina/startup/Tool.java
@@ -22,8 +22,8 @@ import java.io.File;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 
 /**

==================================================
ChannelInterceptorBase.java
index 4319cdce06..240c3607a3 100644
--- a/java/org/apache/catalina/startup/UserConfig.java
+++ b/java/org/apache/catalina/startup/UserConfig.java
@@ -44,8 +44,8 @@ public final class UserConfig
     implements LifecycleListener {
 
 
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( UserConfig.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( UserConfig.class );
 
     
     // ----------------------------------------------------- Instance Variables

==================================================
GroupChannel.java
index e67199ccd7..d23829a3d5 100644
--- a/java/org/apache/catalina/tribes/group/ChannelInterceptorBase.java
+++ b/java/org/apache/catalina/tribes/group/ChannelInterceptorBase.java
@@ -28,7 +28,7 @@ import org.apache.catalina.tribes.Member;
 
 public abstract class ChannelInterceptorBase implements ChannelInterceptor {
 
-    protected static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(
+    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(
         ChannelInterceptorBase.class);
 
     private ChannelInterceptor next;

==================================================
RpcChannel.java
index 69f7f1d061..161144fade 100644
--- a/java/org/apache/catalina/tribes/group/GroupChannel.java
+++ b/java/org/apache/catalina/tribes/group/GroupChannel.java
@@ -625,7 +625,7 @@ public class GroupChannel extends ChannelInterceptorBase implements ManagedChann
      * @version 1.0
      */
     public static class HeartbeatThread extends Thread {
-        protected static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(HeartbeatThread.class);
+        protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(HeartbeatThread.class);
         protected static int counter = 1;
         protected static synchronized int inc() {
             return counter++;

==================================================
DomainFilterInterceptor.java
index e73dcb662f..873a961c77 100644
--- a/java/org/apache/catalina/tribes/group/RpcChannel.java
+++ b/java/org/apache/catalina/tribes/group/RpcChannel.java
@@ -31,7 +31,7 @@ import org.apache.catalina.tribes.util.UUIDGenerator;
  * @author Filip Hanik
  */
 public class RpcChannel implements ChannelListener{
-    protected static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(RpcChannel.class);
+    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(RpcChannel.class);
     
     public static final int FIRST_REPLY = 1;
     public static final int MAJORITY_REPLY = 2;

==================================================
FragmentationInterceptor.java
index ebe4e94e9f..395bd0af90 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/DomainFilterInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/DomainFilterInterceptor.java
@@ -32,7 +32,7 @@ import java.util.Arrays;
  */
 public class DomainFilterInterceptor extends ChannelInterceptorBase {
 
-    private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog( DomainFilterInterceptor.class );
+    private static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( DomainFilterInterceptor.class );
 
     protected Membership membership = null;
     

==================================================
MessageDispatchInterceptor.java
index cdd615babd..bbf15ab862 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/FragmentationInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/FragmentationInterceptor.java
@@ -40,7 +40,7 @@ import org.apache.catalina.tribes.io.XByteBuffer;
  * @version 1.0
  */
 public class FragmentationInterceptor extends ChannelInterceptorBase {
-    private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog( FragmentationInterceptor.class );
+    private static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( FragmentationInterceptor.class );
     
     protected HashMap fragpieces = new HashMap();
     private int maxSize = 1024*100;

==================================================
TcpFailureDetector.java
index a9eb91715b..7819208645 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/MessageDispatchInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/MessageDispatchInterceptor.java
@@ -37,7 +37,7 @@ import org.apache.catalina.tribes.UniqueId;
  * @version 1.0
  */
 public class MessageDispatchInterceptor extends ChannelInterceptorBase implements Runnable {
-    protected static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(MessageDispatchInterceptor.class);
+    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(MessageDispatchInterceptor.class);
 
     protected long maxQueueSize = 1024*1024*64; //64MB
     protected FastQueue queue = new FastQueue();

==================================================
ThroughputInterceptor.java
index 10418e75ab..f9da96f9a1 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/TcpFailureDetector.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/TcpFailureDetector.java
@@ -57,7 +57,7 @@ import java.net.ConnectException;
  */
 public class TcpFailureDetector extends ChannelInterceptorBase {
     
-    private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog( TcpFailureDetector.class );
+    private static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( TcpFailureDetector.class );
     
     protected static byte[] TCP_FAIL_DETECT = new byte[] {
         79, -89, 115, 72, 121, -126, 67, -55, -97, 111, -119, -128, -95, 91, 7, 20,

==================================================
TwoPhaseCommitInterceptor.java
index 972a7c569e..fe99d49961 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/ThroughputInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/ThroughputInterceptor.java
@@ -36,7 +36,7 @@ import java.util.concurrent.atomic.AtomicLong;
  * @version 1.0
  */
 public class ThroughputInterceptor extends ChannelInterceptorBase {
-    protected static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(ThroughputInterceptor.class);
+    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ThroughputInterceptor.class);
 
     double mbTx = 0;
     double mbAppTx = 0;

==================================================
BufferPool.java
index bb531493fb..5d2b9f4e15 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/TwoPhaseCommitInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/TwoPhaseCommitInterceptor.java
@@ -43,7 +43,7 @@ public class TwoPhaseCommitInterceptor extends ChannelInterceptorBase {
 
     public static final byte[] START_DATA = new byte[] {113, 1, -58, 2, -34, -60, 75, -78, -101, -12, 32, -29, 32, 111, -40, 4};
     public static final byte[] END_DATA = new byte[] {54, -13, 90, 110, 47, -31, 75, -24, -81, -29, 36, 52, -58, 77, -110, 56};
-    private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(TwoPhaseCommitInterceptor.class);
+    private static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(TwoPhaseCommitInterceptor.class);
 
     protected HashMap messages = new HashMap();
     protected long expire = 1000 * 60; //one minute expiration

==================================================
ObjectReader.java
index 48b5e8b916..b3dc19290e 100644
--- a/java/org/apache/catalina/tribes/io/BufferPool.java
+++ b/java/org/apache/catalina/tribes/io/BufferPool.java
@@ -15,9 +15,9 @@
  */
 package org.apache.catalina.tribes.io;
 
-import org.apache.commons.logging.LogFactory;
 
-import org.apache.commons.logging.Log;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  *

==================================================
XByteBuffer.java
index c69e8d23ec..fd6dbc0603 100644
--- a/java/org/apache/catalina/tribes/io/ObjectReader.java
+++ b/java/org/apache/catalina/tribes/io/ObjectReader.java
@@ -36,7 +36,7 @@ import org.apache.catalina.tribes.ChannelMessage;
  */
 public class ObjectReader {
 
-    protected static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(ObjectReader.class);
+    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ObjectReader.class);
 
     private XByteBuffer buffer;
     

==================================================
McastService.java
index 609965cc92..0b493fa3f1 100644
--- a/java/org/apache/catalina/tribes/io/XByteBuffer.java
+++ b/java/org/apache/catalina/tribes/io/XByteBuffer.java
@@ -46,8 +46,8 @@ import java.nio.ByteBuffer;
 public class XByteBuffer
 {
     
-    public static org.apache.commons.logging.Log log =
-        org.apache.commons.logging.LogFactory.getLog( XByteBuffer.class );
+    public static org.apache.juli.logging.Log log =
+        org.apache.juli.logging.LogFactory.getLog( XByteBuffer.class );
     
     /**
      * This is a package header, 7 bytes (FLT2002)

==================================================
McastServiceImpl.java
index 4a7aeb9623..fa42b8986b 100644
--- a/java/org/apache/catalina/tribes/membership/McastService.java
+++ b/java/org/apache/catalina/tribes/membership/McastService.java
@@ -38,8 +38,8 @@ import java.io.IOException;
 
 public class McastService implements MembershipService,MembershipListener {
 
-    private static org.apache.commons.logging.Log log =
-        org.apache.commons.logging.LogFactory.getLog( McastService.class );
+    private static org.apache.juli.logging.Log log =
+        org.apache.juli.logging.LogFactory.getLog( McastService.class );
 
     /**
      * The string manager for this package.

==================================================
AbstractReplicatedMap.java
index 999b1f0121..cbab1eedd5 100644
--- a/java/org/apache/catalina/tribes/membership/McastServiceImpl.java
+++ b/java/org/apache/catalina/tribes/membership/McastServiceImpl.java
@@ -42,8 +42,8 @@ import java.net.InetSocketAddress;
  */
 public class McastServiceImpl
 {
-    private static org.apache.commons.logging.Log log =
-        org.apache.commons.logging.LogFactory.getLog( McastService.class );
+    private static org.apache.juli.logging.Log log =
+        org.apache.juli.logging.LogFactory.getLog( McastService.class );
     
     protected static int MAX_PACKET_SIZE = 65535;
     /**

==================================================
LazyReplicatedMap.java
index 2ac75e9df1..8460e85d0a 100644
--- a/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
@@ -42,9 +42,10 @@ import org.apache.catalina.tribes.group.RpcCallback;
 import org.apache.catalina.tribes.group.RpcChannel;
 import org.apache.catalina.tribes.io.XByteBuffer;
 import org.apache.catalina.tribes.membership.MemberImpl;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.catalina.tribes.util.Arrays;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+
 import java.util.ConcurrentModificationException;
 
 /**

==================================================
ReplicatedMap.java
index ccfc1d42ee..badd99cd9b 100644
--- a/java/org/apache/catalina/tribes/tipis/LazyReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/LazyReplicatedMap.java
@@ -65,7 +65,7 @@ import org.apache.catalina.tribes.UniqueId;
  */
 public class LazyReplicatedMap extends AbstractReplicatedMap 
     implements RpcCallback, ChannelListener, MembershipListener {
-    protected static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(LazyReplicatedMap.class);
+    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(LazyReplicatedMap.class);
     
     
     

==================================================
ReceiverBase.java
index 01bb3ba610..c0cfbb9553 100644
--- a/java/org/apache/catalina/tribes/tipis/ReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/ReplicatedMap.java
@@ -50,7 +50,7 @@ import org.apache.catalina.tribes.group.RpcCallback;
  */
 public class ReplicatedMap extends AbstractReplicatedMap implements RpcCallback, ChannelListener, MembershipListener {
 
-    protected static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(ReplicatedMap.class);
+    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ReplicatedMap.class);
 
 //------------------------------------------------------------------------------
 //              CONSTRUCTORS / DESTRUCTORS

==================================================
ReplicationTransmitter.java
index 091bb9320a..1d6872f7a0 100644
--- a/java/org/apache/catalina/tribes/transport/ReceiverBase.java
+++ b/java/org/apache/catalina/tribes/transport/ReceiverBase.java
@@ -24,7 +24,7 @@ import org.apache.catalina.tribes.ChannelMessage;
 import org.apache.catalina.tribes.ChannelReceiver;
 import org.apache.catalina.tribes.MessageListener;
 import org.apache.catalina.tribes.io.ListenCallback;
-import org.apache.commons.logging.Log;
+import org.apache.juli.logging.Log;
 
 /**
  * <p>Title: </p>
@@ -43,7 +43,7 @@ public abstract class ReceiverBase implements ChannelReceiver, ListenCallback, T
     public static final int OPTION_DIRECT_BUFFER = 0x0004;
 
 
-    protected static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(ReceiverBase.class);
+    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ReceiverBase.class);
     
     private MessageListener listener;
     private String host = "auto";

==================================================
BioReceiver.java
index 6b3b18a460..d2f33b52cd 100644
--- a/java/org/apache/catalina/tribes/transport/ReplicationTransmitter.java
+++ b/java/org/apache/catalina/tribes/transport/ReplicationTransmitter.java
@@ -32,7 +32,7 @@ import org.apache.catalina.tribes.transport.nio.PooledParallelSender;
  * @version $Revision: 379956 $ $Date: 2006-02-22 16:57:35 -0600 (Wed, 22 Feb 2006) $
  */
 public class ReplicationTransmitter implements ChannelSender {
-    private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(ReplicationTransmitter.class);
+    private static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ReplicationTransmitter.class);
 
     /**
      * The descriptive information about this implementation.

==================================================
BioReplicationThread.java
index ab4b67b03a..ac083dd7c9 100644
--- a/java/org/apache/catalina/tribes/transport/bio/BioReceiver.java
+++ b/java/org/apache/catalina/tribes/transport/bio/BioReceiver.java
@@ -40,7 +40,7 @@ import org.apache.catalina.tribes.transport.WorkerThread;
  */
 public class BioReceiver extends ReceiverBase implements Runnable, ChannelReceiver, ListenCallback {
 
-    protected static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(BioReceiver.class);
+    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(BioReceiver.class);
 
     protected ServerSocket serverSocket;
 

==================================================
BioSender.java
index eacf6eb486..80c8fff470 100644
--- a/java/org/apache/catalina/tribes/transport/bio/BioReplicationThread.java
+++ b/java/org/apache/catalina/tribes/transport/bio/BioReplicationThread.java
@@ -46,7 +46,7 @@ import org.apache.catalina.tribes.io.BufferPool;
 public class BioReplicationThread extends WorkerThread {
 
 
-    protected static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog( BioReplicationThread.class );
+    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( BioReplicationThread.class );
     
     protected Socket socket;
     protected ObjectReader reader;

==================================================
FastQueue.java
index 8a1aead8eb..2b97624011 100644
--- a/java/org/apache/catalina/tribes/transport/bio/BioSender.java
+++ b/java/org/apache/catalina/tribes/transport/bio/BioSender.java
@@ -44,7 +44,7 @@ import org.apache.catalina.tribes.util.StringManager;
  */
 public class BioSender extends AbstractSender implements DataSender {
 
-    private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(BioSender.class);
+    private static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(BioSender.class);
 
     /**
      * The string manager for this package.

==================================================
NioReceiver.java
index 0c34e3c391..439c530c26 100644
--- a/java/org/apache/catalina/tribes/transport/bio/util/FastQueue.java
+++ b/java/org/apache/catalina/tribes/transport/bio/util/FastQueue.java
@@ -34,7 +34,7 @@ import org.apache.catalina.tribes.group.InterceptorPayload;
  */
 public class FastQueue {
 
-    private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(FastQueue.class);
+    private static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(FastQueue.class);
 
     /**
      * This is the actual queue

==================================================
NioReplicationThread.java
index 7cf5e2843d..6b391665ce 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java
@@ -43,7 +43,7 @@ import java.nio.channels.CancelledKeyException;
  */
 public class NioReceiver extends ReceiverBase implements Runnable, ChannelReceiver, ListenCallback {
 
-    protected static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(NioReceiver.class);
+    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(NioReceiver.class);
 
     /**
      * The string manager for this package.

==================================================
NioSender.java
index d19f131453..49bcc35740 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioReplicationThread.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioReplicationThread.java
@@ -48,7 +48,7 @@ import org.apache.catalina.tribes.util.Logs;
  */
 public class NioReplicationThread extends WorkerThread {
     
-    private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog( NioReplicationThread.class );
+    private static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( NioReplicationThread.class );
     
     private ByteBuffer buffer = null;
     private SelectionKey key;

==================================================
ParallelNioSender.java
index 906b8a2a9d..c133fe6e66 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioSender.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioSender.java
@@ -47,7 +47,7 @@ import org.apache.catalina.tribes.RemoteProcessException;
  */
 public class NioSender extends AbstractSender implements DataSender{
 
-    protected static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(NioSender.class);
+    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(NioSender.class);
 
     
     

==================================================
Logs.java
index 5e92c5e6d3..b444451ddc 100644
--- a/java/org/apache/catalina/tribes/transport/nio/ParallelNioSender.java
+++ b/java/org/apache/catalina/tribes/transport/nio/ParallelNioSender.java
@@ -51,7 +51,7 @@ import org.apache.catalina.tribes.UniqueId;
  */
 public class ParallelNioSender extends AbstractSender implements MultiPointSender {
     
-    protected static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(ParallelNioSender.class);
+    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ParallelNioSender.class);
     protected long selectTimeout = 5000; //default 5 seconds, same as send timeout
     protected Selector selector;
     protected HashMap nioSenders = new HashMap();

==================================================
StringManager.java
index 2485894586..05a50de22c 100644
--- a/java/org/apache/catalina/tribes/util/Logs.java
+++ b/java/org/apache/catalina/tribes/util/Logs.java
@@ -15,8 +15,8 @@
  */
 package org.apache.catalina.tribes.util;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 /**
  * 
  * Simple class that holds references to global loggers

==================================================
MemoryUserDatabase.java
index 77f1122186..5eb32757fd 100644
--- a/java/org/apache/catalina/tribes/util/StringManager.java
+++ b/java/org/apache/catalina/tribes/util/StringManager.java
@@ -55,8 +55,8 @@ public class StringManager {
 
     private ResourceBundle bundle;
 
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( StringManager.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( StringManager.class );
 
     /**
      * Creates a new StringManager for a given package. This is a

==================================================
ExtensionValidator.java
index 22256ce2c3..ead544cd63 100644
--- a/java/org/apache/catalina/users/MemoryUserDatabase.java
+++ b/java/org/apache/catalina/users/MemoryUserDatabase.java
@@ -31,8 +31,8 @@ import org.apache.catalina.Role;
 import org.apache.catalina.User;
 import org.apache.catalina.UserDatabase;
 import org.apache.catalina.util.StringManager;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.digester.Digester;
 import org.apache.tomcat.util.digester.ObjectCreationFactory;
 import org.xml.sax.Attributes;

==================================================
StringManager.java
index 04c886d20d..4b01cc787a 100644
--- a/java/org/apache/catalina/util/ExtensionValidator.java
+++ b/java/org/apache/catalina/util/ExtensionValidator.java
@@ -51,8 +51,8 @@ import org.apache.naming.resources.Resource;
  */
 public final class ExtensionValidator {
 
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog(ExtensionValidator.class);
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog(ExtensionValidator.class);
 
     /**
      * The string resources for this package.

==================================================
ExtendedAccessLogValve.java
index 386381e632..c5d10d3129 100644
--- a/java/org/apache/catalina/util/StringManager.java
+++ b/java/org/apache/catalina/util/StringManager.java
@@ -55,8 +55,8 @@ public class StringManager {
 
     private ResourceBundle bundle;
     
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( StringManager.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( StringManager.class );
     
     /**
      * Creates a new StringManager for a given package. This is a

==================================================
RequestDumperValve.java
index ea1dfc12fc..fd07af27ce 100644
--- a/java/org/apache/catalina/valves/ExtendedAccessLogValve.java
+++ b/java/org/apache/catalina/valves/ExtendedAccessLogValve.java
@@ -43,8 +43,8 @@ import org.apache.catalina.connector.Response;
 import org.apache.catalina.util.LifecycleSupport;
 import org.apache.catalina.util.ServerInfo;
 import org.apache.catalina.util.StringManager;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 
 

==================================================
ValveBase.java
index c5b5041fd2..d1f596866e 100644
--- a/java/org/apache/catalina/valves/RequestDumperValve.java
+++ b/java/org/apache/catalina/valves/RequestDumperValve.java
@@ -27,7 +27,7 @@ import javax.servlet.http.Cookie;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
 import org.apache.catalina.util.StringManager;
-import org.apache.commons.logging.Log;
+import org.apache.juli.logging.Log;
 
 
 /**

==================================================
AjpAprProcessor.java
index 9d45284e9c..79762c8d0d 100644
--- a/java/org/apache/catalina/valves/ValveBase.java
+++ b/java/org/apache/catalina/valves/ValveBase.java
@@ -39,8 +39,8 @@ import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
 import org.apache.catalina.core.ContainerBase;
 import org.apache.catalina.util.StringManager;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 
 /**

==================================================
AjpAprProtocol.java
index 04d4bc8a8a..21ea657eda 100644
--- a/java/org/apache/coyote/ajp/AjpAprProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpAprProcessor.java
@@ -60,8 +60,8 @@ public class AjpAprProcessor implements ActionHook {
     /**
      * Logger.
      */
-    protected static org.apache.commons.logging.Log log
-        = org.apache.commons.logging.LogFactory.getLog(AjpAprProcessor.class);
+    protected static org.apache.juli.logging.Log log
+        = org.apache.juli.logging.LogFactory.getLog(AjpAprProcessor.class);
 
     /**
      * The string manager for this package.

==================================================
AjpMessage.java
index 9a3f0387ed..48c47771b3 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -51,8 +51,8 @@ public class AjpAprProtocol
     implements ProtocolHandler, MBeanRegistration {
     
     
-    protected static org.apache.commons.logging.Log log =
-        org.apache.commons.logging.LogFactory.getLog(AjpAprProtocol.class);
+    protected static org.apache.juli.logging.Log log =
+        org.apache.juli.logging.LogFactory.getLog(AjpAprProtocol.class);
 
     /**
      * The string manager for this package.

==================================================
AjpProcessor.java
index e0283182dd..ec5e69ea04 100644
--- a/java/org/apache/coyote/ajp/AjpMessage.java
+++ b/java/org/apache/coyote/ajp/AjpMessage.java
@@ -37,8 +37,8 @@ import org.apache.tomcat.util.res.StringManager;
 public class AjpMessage {
 
 
-    protected static org.apache.commons.logging.Log log =
-        org.apache.commons.logging.LogFactory.getLog(AjpMessage.class);
+    protected static org.apache.juli.logging.Log log =
+        org.apache.juli.logging.LogFactory.getLog(AjpMessage.class);
 
     /**
      * The string manager for this package.

==================================================
AjpProtocol.java
index 10dcf036ef..8c224d8c3e 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -60,8 +60,8 @@ public class AjpProcessor implements ActionHook {
     /**
      * Logger.
      */
-    protected static org.apache.commons.logging.Log log
-        = org.apache.commons.logging.LogFactory.getLog(AjpProcessor.class);
+    protected static org.apache.juli.logging.Log log
+        = org.apache.juli.logging.LogFactory.getLog(AjpProcessor.class);
 
     /**
      * The string manager for this package.

==================================================
Http11AprProcessor.java
index 75e5aac198..bbb28318df 100644
--- a/java/org/apache/coyote/ajp/AjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpProtocol.java
@@ -51,8 +51,8 @@ public class AjpProtocol
     implements ProtocolHandler, MBeanRegistration {
     
     
-    protected static org.apache.commons.logging.Log log =
-        org.apache.commons.logging.LogFactory.getLog(AjpProtocol.class);
+    protected static org.apache.juli.logging.Log log =
+        org.apache.juli.logging.LogFactory.getLog(AjpProtocol.class);
 
     /**
      * The string manager for this package.

==================================================
Http11AprProtocol.java
index 3b3daf4eee..21e96df6d6 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -68,8 +68,8 @@ public class Http11AprProcessor implements ActionHook {
     /**
      * Logger.
      */
-    protected static org.apache.commons.logging.Log log
-        = org.apache.commons.logging.LogFactory.getLog(Http11AprProcessor.class);
+    protected static org.apache.juli.logging.Log log
+        = org.apache.juli.logging.LogFactory.getLog(Http11AprProcessor.class);
 
     /**
      * The string manager for this package.

==================================================
Http11NioProcessor.java
index fd27184055..359672ef4a 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -738,8 +738,8 @@ public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration
         }
     }
 
-    protected static org.apache.commons.logging.Log log
-        = org.apache.commons.logging.LogFactory.getLog(Http11AprProtocol.class);
+    protected static org.apache.juli.logging.Log log
+        = org.apache.juli.logging.LogFactory.getLog(Http11AprProtocol.class);
 
     // -------------------- Various implementation classes --------------------
 

==================================================
Http11NioProtocol.java
index b9d535c818..19700de97d 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -65,8 +65,8 @@ public class Http11NioProcessor implements ActionHook {
     /**
      * Logger.
      */
-    protected static org.apache.commons.logging.Log log
-        = org.apache.commons.logging.LogFactory.getLog(Http11NioProcessor.class);
+    protected static org.apache.juli.logging.Log log
+        = org.apache.juli.logging.LogFactory.getLog(Http11NioProcessor.class);
 
     /**
      * The string manager for this package.

==================================================
Http11Processor.java
index fb2b12d35f..84c14c0e10 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -692,8 +692,8 @@ public class Http11NioProtocol implements ProtocolHandler, MBeanRegistration
         }
     }
 
-    protected static org.apache.commons.logging.Log log
-        = org.apache.commons.logging.LogFactory.getLog(Http11NioProtocol.class);
+    protected static org.apache.juli.logging.Log log
+        = org.apache.juli.logging.LogFactory.getLog(Http11NioProtocol.class);
 
     // -------------------- Various implementation classes --------------------
 

==================================================
Http11Protocol.java
index 58c8230714..f90212be4a 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -63,8 +63,8 @@ public class Http11Processor implements ActionHook {
     /**
      * Logger.
      */
-    protected static org.apache.commons.logging.Log log
-        = org.apache.commons.logging.LogFactory.getLog(Http11Processor.class);
+    protected static org.apache.juli.logging.Log log
+        = org.apache.juli.logging.LogFactory.getLog(Http11Processor.class);
 
     /**
      * The string manager for this package.
@@ -753,13 +753,7 @@ public class Http11Processor implements ActionHook {
 
         int threadRatio = (endpoint.getCurrentThreadsBusy() * 100)
                 / endpoint.getMaxThreads();
-        if ((threadRatio > 33) && (threadRatio <= 66)) {
-            soTimeout = soTimeout / 2;
-        } else if ((threadRatio > 66) && (threadRatio <= 90)) {
-            soTimeout = soTimeout / 3;
-            keepAliveLeft = 1;
-        } else if (threadRatio > 90) {
-            soTimeout = soTimeout / 20;
+        if (threadRatio > 75) {
             keepAliveLeft = 1;
         }
         

==================================================
EmbeddedServletOptions.java
index a1a92abed7..ca219d04cc 100644
--- a/java/org/apache/coyote/http11/Http11Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Protocol.java
@@ -54,8 +54,8 @@ public class Http11Protocol
     implements ProtocolHandler, MBeanRegistration {
 
 
-    protected static org.apache.commons.logging.Log log
-        = org.apache.commons.logging.LogFactory.getLog(Http11Protocol.class);
+    protected static org.apache.juli.logging.Log log
+        = org.apache.juli.logging.LogFactory.getLog(Http11Protocol.class);
 
     /**
      * The string manager for this package.

==================================================
JspC.java
index 9904d4876c..e4f2da1fc3 100644
--- a/java/org/apache/jasper/EmbeddedServletOptions.java
+++ b/java/org/apache/jasper/EmbeddedServletOptions.java
@@ -27,8 +27,8 @@ import org.apache.jasper.compiler.JspConfig;
 import org.apache.jasper.compiler.TagPluginManager;
 import org.apache.jasper.compiler.Localizer;
 import org.apache.jasper.xmlparser.ParserUtils;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * A class to hold all init parameters specific to the JSP engine. 

==================================================
JspCompilationContext.java
index 5f667bf486..1a22a240df 100644
--- a/java/org/apache/jasper/JspC.java
+++ b/java/org/apache/jasper/JspC.java
@@ -39,8 +39,6 @@ import java.util.Stack;
 import java.util.StringTokenizer;
 import java.util.Vector;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.jasper.compiler.Compiler;
 import org.apache.jasper.compiler.JspConfig;
 import org.apache.jasper.compiler.JspRuntimeContext;
@@ -48,6 +46,8 @@ import org.apache.jasper.compiler.Localizer;
 import org.apache.jasper.compiler.TagPluginManager;
 import org.apache.jasper.compiler.TldLocationsCache;
 import org.apache.jasper.servlet.JspCServletContext;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 import org.apache.tools.ant.AntClassLoader;
 import org.apache.tools.ant.Project;

==================================================
Compiler.java
index a72a72eda9..87b7581196 100644
--- a/java/org/apache/jasper/JspCompilationContext.java
+++ b/java/org/apache/jasper/JspCompilationContext.java
@@ -52,8 +52,8 @@ import org.apache.jasper.servlet.JspServletWrapper;
  */
 public class JspCompilationContext {
 
-    protected org.apache.commons.logging.Log log =
-        org.apache.commons.logging.LogFactory.getLog(JspCompilationContext.class);
+    protected org.apache.juli.logging.Log log =
+        org.apache.juli.logging.LogFactory.getLog(JspCompilationContext.class);
 
     protected Map<String, URL> tagFileJarUrls;
     protected boolean isPackagedTagFile;

==================================================
JspConfig.java
index 4b1b43d6aa..66cd1e61ba 100644
--- a/java/org/apache/jasper/compiler/Compiler.java
+++ b/java/org/apache/jasper/compiler/Compiler.java
@@ -44,7 +44,7 @@ import org.apache.jasper.servlet.JspServletWrapper;
  */
 public abstract class Compiler {
     
-    protected org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
+    protected org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory
             .getLog(Compiler.class);
 
     // ----------------------------------------------------- Instance Variables

==================================================
JspReader.java
index c5ca8dc12d..e501ebc4b8 100644
--- a/java/org/apache/jasper/compiler/JspConfig.java
+++ b/java/org/apache/jasper/compiler/JspConfig.java
@@ -23,11 +23,11 @@ import java.net.URL;
 
 import javax.servlet.ServletContext;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.xmlparser.ParserUtils;
 import org.apache.jasper.xmlparser.TreeNode;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.xml.sax.InputSource;
 
 /**

==================================================
JspRuntimeContext.java
index 324d1977b0..cb42855792 100644
--- a/java/org/apache/jasper/compiler/JspReader.java
+++ b/java/org/apache/jasper/compiler/JspReader.java
@@ -26,10 +26,10 @@ import java.util.jar.JarFile;
 import java.net.URL;
 import java.net.MalformedURLException;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.JspCompilationContext;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * JspReader is an input buffer for the JSP parser. It should allow

==================================================
SmapUtil.java
index f8e0911513..4d6a08083c 100644
--- a/java/org/apache/jasper/compiler/JspRuntimeContext.java
+++ b/java/org/apache/jasper/compiler/JspRuntimeContext.java
@@ -32,14 +32,14 @@ import java.util.concurrent.ConcurrentHashMap;
 import javax.servlet.ServletContext;
 import javax.servlet.jsp.JspFactory;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.jasper.Constants;
 import org.apache.jasper.JspCompilationContext;
 import org.apache.jasper.Options;
 import org.apache.jasper.runtime.JspFactoryImpl;
 import org.apache.jasper.security.SecurityClassLoad;
 import org.apache.jasper.servlet.JspServletWrapper;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * Class for tracking JSP compile time file dependencies when the

==================================================
TagLibraryInfoImpl.java
index 8ff4a38f43..789d58e4b3 100644
--- a/java/org/apache/jasper/compiler/SmapUtil.java
+++ b/java/org/apache/jasper/compiler/SmapUtil.java
@@ -43,8 +43,8 @@ import org.apache.jasper.JspCompilationContext;
  */
 public class SmapUtil {
 
-    private org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( SmapUtil.class );
+    private org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( SmapUtil.class );
 
     //*********************************************************************
     // Constants
@@ -188,8 +188,8 @@ public class SmapUtil {
     // Installation logic (from Robert Field, JSR-045 spec lead)
     private static class SDEInstaller {
 
-        private org.apache.commons.logging.Log log=
-            org.apache.commons.logging.LogFactory.getLog( SDEInstaller.class );
+        private org.apache.juli.logging.Log log=
+            org.apache.juli.logging.LogFactory.getLog( SDEInstaller.class );
 
         static final String nameSDE = "SourceDebugExtension";
 

==================================================
TldLocationsCache.java
index 3726e37166..e4f91af7ee 100644
--- a/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java
+++ b/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java
@@ -44,12 +44,12 @@ import javax.servlet.jsp.tagext.TagVariableInfo;
 import javax.servlet.jsp.tagext.ValidationMessage;
 import javax.servlet.jsp.tagext.VariableInfo;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.JspCompilationContext;
 import org.apache.jasper.xmlparser.ParserUtils;
 import org.apache.jasper.xmlparser.TreeNode;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * Implementation of the TagLibraryInfo class from the JSP spec.

==================================================
HttpJspBase.java
index f8b8b1a3bd..e3b86e2048 100644
--- a/java/org/apache/jasper/compiler/TldLocationsCache.java
+++ b/java/org/apache/jasper/compiler/TldLocationsCache.java
@@ -35,12 +35,12 @@ import org.xml.sax.InputSource;
 
 import javax.servlet.ServletContext;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.jasper.Constants;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.xmlparser.ParserUtils;
 import org.apache.jasper.xmlparser.TreeNode;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * A container for all tag libraries that are defined "globally"

==================================================
JspFactoryImpl.java
index 71efd1a55e..ce9803c1cf 100644
--- a/java/org/apache/jasper/runtime/HttpJspBase.java
+++ b/java/org/apache/jasper/runtime/HttpJspBase.java
@@ -59,7 +59,7 @@ public abstract class HttpJspBase
                     factory.getClass().getClassLoader().loadClass( basePackage +
                                                                    "servlet.JspServletWrapper");
                 } catch (ClassNotFoundException ex) {
-                    org.apache.commons.logging.LogFactory.getLog( HttpJspBase.class )
+                    org.apache.juli.logging.LogFactory.getLog( HttpJspBase.class )
                         .error("Jasper JspRuntimeContext preload of class failed: " +
                                        ex.getMessage(), ex);
                 }

==================================================
PageContextImpl.java
index e1293b27e2..92891b4d45 100644
--- a/java/org/apache/jasper/runtime/JspFactoryImpl.java
+++ b/java/org/apache/jasper/runtime/JspFactoryImpl.java
@@ -28,8 +28,8 @@ import javax.servlet.jsp.JspEngineInfo;
 import javax.servlet.jsp.PageContext;
 
 import org.apache.jasper.util.SimplePool;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * Implementation of JspFactory.

==================================================
TagHandlerPool.java
index 6610da7bf4..722345d884 100644
--- a/java/org/apache/jasper/runtime/PageContextImpl.java
+++ b/java/org/apache/jasper/runtime/PageContextImpl.java
@@ -46,8 +46,6 @@ import javax.servlet.jsp.el.ExpressionEvaluator;
 import javax.servlet.jsp.el.VariableResolver;
 import javax.servlet.jsp.tagext.BodyContent;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.jasper.Constants;
 import org.apache.jasper.compiler.Localizer;
 import org.apache.jasper.el.ELContextImpl;
@@ -56,6 +54,8 @@ import org.apache.jasper.el.FunctionMapperImpl;
 import org.apache.jasper.el.VariableResolverImpl;
 import org.apache.jasper.security.SecurityUtil;
 import org.apache.jasper.util.Enumerator;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * Implementation of the PageContext class from the JSP spec. Also doubles as a

==================================================
SecurityClassLoad.java
index 45729273ab..7003c73e46 100644
--- a/java/org/apache/jasper/runtime/TagHandlerPool.java
+++ b/java/org/apache/jasper/runtime/TagHandlerPool.java
@@ -21,9 +21,9 @@ import javax.servlet.jsp.JspException;
 import javax.servlet.jsp.tagext.Tag;
 
 import org.apache.AnnotationProcessor;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.jasper.Constants;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * Pool of tag handlers that can be reused.

==================================================
JspServlet.java
index fb48df59fd..4a70abcae7 100644
--- a/java/org/apache/jasper/security/SecurityClassLoad.java
+++ b/java/org/apache/jasper/security/SecurityClassLoad.java
@@ -27,8 +27,8 @@ package org.apache.jasper.security;
 
 public final class SecurityClassLoad {
 
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( SecurityClassLoad.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( SecurityClassLoad.class );
 
     public static void securityClassLoad(ClassLoader loader){
 

==================================================
JspServletWrapper.java
index b9acb43104..15d6f584db 100644
--- a/java/org/apache/jasper/servlet/JspServlet.java
+++ b/java/org/apache/jasper/servlet/JspServlet.java
@@ -28,14 +28,14 @@ import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
 import org.apache.PeriodicEventListener;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 
 import org.apache.jasper.Constants;
 import org.apache.jasper.EmbeddedServletOptions;
 import org.apache.jasper.Options;
 import org.apache.jasper.compiler.JspRuntimeContext;
 import org.apache.jasper.compiler.Localizer;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * The JSP engine (a.k.a Jasper).

==================================================
ParserUtils.java
index 8e9ac22199..b0d9d6430c 100644
--- a/java/org/apache/jasper/servlet/JspServletWrapper.java
+++ b/java/org/apache/jasper/servlet/JspServletWrapper.java
@@ -37,8 +37,6 @@ import javax.servlet.http.HttpServletResponse;
 import javax.servlet.jsp.tagext.TagInfo;
 
 import org.apache.AnnotationProcessor;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.JspCompilationContext;
 import org.apache.jasper.Options;
@@ -47,6 +45,8 @@ import org.apache.jasper.compiler.JavacErrorDetail;
 import org.apache.jasper.compiler.JspRuntimeContext;
 import org.apache.jasper.compiler.Localizer;
 import org.apache.jasper.runtime.JspSourceDependent;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * The JSP engine (a.k.a Jasper).

==================================================
UCSReader.java
index e897b2761f..f7ca0aaf4d 100644
--- a/java/org/apache/jasper/xmlparser/ParserUtils.java
+++ b/java/org/apache/jasper/xmlparser/ParserUtils.java
@@ -23,11 +23,11 @@ import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.parsers.ParserConfigurationException;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
 import org.apache.jasper.Constants;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.compiler.Localizer;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.w3c.dom.Comment;
 import org.w3c.dom.Document;
 import org.w3c.dom.NamedNodeMap;

==================================================
UTF8Reader.java
index 192545040c..e2c702320d 100644
--- a/java/org/apache/jasper/xmlparser/UCSReader.java
+++ b/java/org/apache/jasper/xmlparser/UCSReader.java
@@ -30,8 +30,8 @@ import java.io.Reader;
  */
 public class UCSReader extends Reader {
 
-    private org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( UCSReader.class );
+    private org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( UCSReader.class );
     
     //
     // Constants

==================================================
AprImpl.java
index 5a9f6e6b1e..83477529ba 100644
--- a/java/org/apache/jasper/xmlparser/UTF8Reader.java
+++ b/java/org/apache/jasper/xmlparser/UTF8Reader.java
@@ -30,8 +30,8 @@ import org.apache.jasper.compiler.Localizer;
 public class UTF8Reader
     extends Reader {
 
-    private org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( UTF8Reader.class );
+    private org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( UTF8Reader.class );
     
     //
     // Constants

==================================================
ChannelJni.java
index f6294811cb..74b7f7571d 100644
--- a/java/org/apache/jk/apr/AprImpl.java
+++ b/java/org/apache/jk/apr/AprImpl.java
@@ -311,6 +311,6 @@ public class AprImpl extends JkHandler { // This will be o.a.t.util.handler.TcHa
                 log.debug( "Error loading native library ", ex);
         }
     }
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( AprImpl.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( AprImpl.class );
 }

==================================================
ChannelNioSocket.java
index 5836f8b116..1a05afe647 100644
--- a/java/org/apache/jk/common/ChannelJni.java
+++ b/java/org/apache/jk/common/ChannelJni.java
@@ -185,7 +185,7 @@ public class ChannelJni extends JniHandler implements JkChannel {
         return 0;
     }    
 
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( ChannelJni.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( ChannelJni.class );
 
 }

==================================================
ChannelSocket.java
index 037df5379d..ac620d4e4a 100644
--- a/java/org/apache/jk/common/ChannelNioSocket.java
+++ b/java/org/apache/jk/common/ChannelNioSocket.java
@@ -84,8 +84,8 @@ import org.apache.tomcat.util.threads.ThreadPoolRunnable;
  */
 public class ChannelNioSocket extends JkHandler
     implements NotificationBroadcaster, JkChannel {
-    private static org.apache.commons.logging.Log log =
-        org.apache.commons.logging.LogFactory.getLog( ChannelNioSocket.class );
+    private static org.apache.juli.logging.Log log =
+        org.apache.juli.logging.LogFactory.getLog( ChannelNioSocket.class );
 
     private int startPort=8009;
     private int maxPort=8019; // 0 for backward compat.

==================================================
ChannelUn.java
index 184abd3374..331c740c89 100644
--- a/java/org/apache/jk/common/ChannelSocket.java
+++ b/java/org/apache/jk/common/ChannelSocket.java
@@ -75,8 +75,8 @@ import org.apache.tomcat.util.threads.ThreadPoolRunnable;
  */
 public class ChannelSocket extends JkHandler
     implements NotificationBroadcaster, JkChannel {
-    private static org.apache.commons.logging.Log log =
-        org.apache.commons.logging.LogFactory.getLog( ChannelSocket.class );
+    private static org.apache.juli.logging.Log log =
+        org.apache.juli.logging.LogFactory.getLog( ChannelSocket.class );
 
     private int startPort=8009;
     private int maxPort=8019; // 0 for backward compat.

==================================================
HandlerDispatch.java
index 3248f8437f..9232fcd79a 100644
--- a/java/org/apache/jk/common/ChannelUn.java
+++ b/java/org/apache/jk/common/ChannelUn.java
@@ -354,8 +354,8 @@ public class ChannelUn extends JniHandler implements JkChannel {
         return ("jk-" + encodedAddr);
     }
 
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( ChannelUn.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( ChannelUn.class );
 }
 
 class AprAcceptor implements ThreadPoolRunnable {

==================================================
HandlerRequest.java
index d40b14c151..c50b31d80b 100644
--- a/java/org/apache/jk/common/HandlerDispatch.java
+++ b/java/org/apache/jk/common/HandlerDispatch.java
@@ -33,8 +33,8 @@ import org.apache.jk.core.MsgContext;
  */
 public class HandlerDispatch extends JkHandler
 {
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( HandlerDispatch.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( HandlerDispatch.class );
 
     public HandlerDispatch() 
     {

==================================================
JkInputStream.java
index 482a868c00..88a81072ef 100644
--- a/java/org/apache/jk/common/HandlerRequest.java
+++ b/java/org/apache/jk/common/HandlerRequest.java
@@ -62,8 +62,8 @@ import org.apache.tomcat.util.threads.ThreadWithAttributes;
  */
 public class HandlerRequest extends JkHandler
 {
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( HandlerRequest.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( HandlerRequest.class );
 
     /*
      * Note for Host parsing.

==================================================
JkMX.java
index 7d59a4ff01..1b619e203b 100644
--- a/java/org/apache/jk/common/JkInputStream.java
+++ b/java/org/apache/jk/common/JkInputStream.java
@@ -35,8 +35,8 @@ import org.apache.tomcat.util.http.MimeHeaders;
 /** Generic input stream impl on top of ajp
  */
 public class JkInputStream implements InputBuffer, OutputBuffer {
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( JkInputStream.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( JkInputStream.class );
 
     private Msg bodyMsg = new MsgAjp();
     private Msg outputMsg = new MsgAjp();

==================================================
JniHandler.java
index e1c7d6af6c..07c3ee2bce 100644
--- a/java/org/apache/jk/common/JkMX.java
+++ b/java/org/apache/jk/common/JkMX.java
@@ -386,8 +386,8 @@ public class JkMX extends JkHandler
         return objN;
     }
 
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( JkMX.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( JkMX.class );
 
 
 }

==================================================
MsgAjp.java
index 28120164f2..eb7859cbb9 100644
--- a/java/org/apache/jk/common/JniHandler.java
+++ b/java/org/apache/jk/common/JniHandler.java
@@ -312,6 +312,6 @@ public class JniHandler extends JkHandler {
         return status;
     }
 
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( JniHandler.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( JniHandler.class );
 }

==================================================
Shm.java
index b1436a380d..86baac3f5c 100644
--- a/java/org/apache/jk/common/MsgAjp.java
+++ b/java/org/apache/jk/common/MsgAjp.java
@@ -38,8 +38,8 @@ import org.apache.tomcat.util.buf.MessageBytes;
  * @author Costin Manolache
  */
 public class MsgAjp extends Msg {
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( MsgAjp.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( MsgAjp.class );
 
     // that's the original buffer size in ajp13 - otherwise we'll get interoperability problems.
     private byte buf[]=new byte[8*1024]; 

==================================================
Shm14.java
index 7571b96478..dcc0fac356 100644
--- a/java/org/apache/jk/common/Shm.java
+++ b/java/org/apache/jk/common/Shm.java
@@ -253,8 +253,8 @@ public class Shm extends JniHandler {
         return 0;
     }    
 
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( Shm.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( Shm.class );
 
     
     //-------------------- Main - use the shm functions from ant or CLI ------

==================================================
ApacheConfig.java
index 085d3d9f6d..21f757efdb 100644
--- a/java/org/apache/jk/common/Shm14.java
+++ b/java/org/apache/jk/common/Shm14.java
@@ -35,8 +35,8 @@ public class Shm14 extends Shm {
     
     // Not ready yet.
     
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( Shm14.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( Shm14.class );
     
     MappedByteBuffer bb;
 

==================================================
BaseJkConfig.java
index 533f109c6a..d8aaa32fe7 100644
--- a/java/org/apache/jk/config/ApacheConfig.java
+++ b/java/org/apache/jk/config/ApacheConfig.java
@@ -116,8 +116,8 @@ import org.apache.catalina.Host;
  */
 public class ApacheConfig  extends BaseJkConfig { 
 
-    private static org.apache.commons.logging.Log log =
-        org.apache.commons.logging.LogFactory.getLog(ApacheConfig.class);
+    private static org.apache.juli.logging.Log log =
+        org.apache.juli.logging.LogFactory.getLog(ApacheConfig.class);
 
     /** default path to mod_jk .conf location */
     public static final String MOD_JK_CONFIG = "conf/auto/mod_jk.conf";

==================================================
IISConfig.java
index 8cefe21e45..6552de2b5b 100644
--- a/java/org/apache/jk/config/BaseJkConfig.java
+++ b/java/org/apache/jk/config/BaseJkConfig.java
@@ -91,8 +91,8 @@ import org.apache.catalina.Server;
         @version $Revision: 299988 $
  */
 public class BaseJkConfig  implements LifecycleListener {
-    private static org.apache.commons.logging.Log log =
-        org.apache.commons.logging.LogFactory.getLog(BaseJkConfig.class);
+    private static org.apache.juli.logging.Log log =
+        org.apache.juli.logging.LogFactory.getLog(BaseJkConfig.class);
 
     protected File configHome = null;
     protected File workersConfig = null;

==================================================
NSConfig.java
index fd9b9e46a9..e737a2b874 100644
--- a/java/org/apache/jk/config/IISConfig.java
+++ b/java/org/apache/jk/config/IISConfig.java
@@ -93,8 +93,8 @@ import org.apache.catalina.Context;
     @author Bill Barker
  */
 public class IISConfig extends BaseJkConfig  { 
-    private static org.apache.commons.logging.Log log =
-        org.apache.commons.logging.LogFactory.getLog(IISConfig.class);
+    private static org.apache.juli.logging.Log log =
+        org.apache.juli.logging.LogFactory.getLog(IISConfig.class);
 
     public static final String WORKERS_CONFIG = "/conf/jk/workers.properties";
     public static final String URI_WORKERS_MAP_CONFIG = "/conf/auto/uriworkermap.properties";

==================================================
WebXml2Jk.java
index 885de8bd65..9c0c8eb9cc 100644
--- a/java/org/apache/jk/config/NSConfig.java
+++ b/java/org/apache/jk/config/NSConfig.java
@@ -96,8 +96,8 @@ import org.apache.catalina.Context;
     @author Bill Barker
  */
 public class NSConfig  extends BaseJkConfig { 
-    private static org.apache.commons.logging.Log log =
-        org.apache.commons.logging.LogFactory.getLog(NSConfig.class);
+    private static org.apache.juli.logging.Log log =
+        org.apache.juli.logging.LogFactory.getLog(NSConfig.class);
 
     public static final String WORKERS_CONFIG = "/conf/jk/workers.properties";
     public static final String NS_CONFIG = "/conf/auto/obj.conf";

==================================================
MsgContext.java
index 1ab15772a6..835f41f574 100644
--- a/java/org/apache/jk/config/WebXml2Jk.java
+++ b/java/org/apache/jk/config/WebXml2Jk.java
@@ -347,8 +347,8 @@ public class WebXml2Jk {
 
     }
 
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( WebXml2Jk.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( WebXml2Jk.class );
 
     
     // -------------------- DOM utils --------------------

==================================================
JkCoyoteHandler.java
index da2eaaeb84..1a4bc315a6 100644
--- a/java/org/apache/jk/core/MsgContext.java
+++ b/java/org/apache/jk/core/MsgContext.java
@@ -43,10 +43,10 @@ import org.apache.jk.common.JkInputStream;
  * @author Costin Manolache
  */
 public class MsgContext implements ActionHook {
-    private static org.apache.commons.logging.Log log =
-        org.apache.commons.logging.LogFactory.getLog(MsgContext.class);
-    private static org.apache.commons.logging.Log logTime=
-        org.apache.commons.logging.LogFactory.getLog( "org.apache.jk.REQ_TIME" );
+    private static org.apache.juli.logging.Log log =
+        org.apache.juli.logging.LogFactory.getLog(MsgContext.class);
+    private static org.apache.juli.logging.Log logTime=
+        org.apache.juli.logging.LogFactory.getLog( "org.apache.jk.REQ_TIME" );
 
     private int type;
     private Object notes[]=new Object[32];

==================================================
JkMain.java
index 684b4d6a60..cf22609ddb 100644
--- a/java/org/apache/jk/server/JkCoyoteHandler.java
+++ b/java/org/apache/jk/server/JkCoyoteHandler.java
@@ -49,8 +49,8 @@ import org.apache.tomcat.util.net.SSLSupport;
  * jmx:notification-handler name="org.apache.coyote.ACTION_COMMIT
  */
 public class JkCoyoteHandler extends JkHandler implements ProtocolHandler {
-    protected static org.apache.commons.logging.Log log 
-        = org.apache.commons.logging.LogFactory.getLog(JkCoyoteHandler.class);
+    protected static org.apache.juli.logging.Log log 
+        = org.apache.juli.logging.LogFactory.getLog(JkCoyoteHandler.class);
     // Set debug on this logger to see the container request time
 
     // ----------------------------------------------------------- DoPrivileged

==================================================
DirectJDKLog.java
index 1f80e51519..7a21947a6f 100644
--- a/java/org/apache/jk/server/JkMain.java
+++ b/java/org/apache/jk/server/JkMain.java
@@ -641,8 +641,8 @@ public class JkMain implements MBeanRegistration
         }
     }
 
-    static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( JkMain.class );
+    static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( JkMain.class );
 
     protected String domain;
     protected ObjectName oname;

==================================================
Log.java
new file mode 100644
index 0000000000..6c0ce9aff0
--- /dev/null
+++ b/java/org/apache/juli/logging/DirectJDKLog.java
@@ -0,0 +1,182 @@
+/*
+ * Copyright 2001-2004 The Apache Software Foundation.
+ * Copyright 2004 Costin Manolache
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */ 
+
+package org.apache.juli.logging;
+
+import java.util.logging.ConsoleHandler;
+import java.util.logging.Formatter;
+import java.util.logging.Handler;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+
+/** 
+ * Hardcoded java.util.logging commons-logging implementation.
+ * 
+ * In addition, it curr 
+ * 
+ */
+class DirectJDKLog implements Log {
+    // no reason to hide this - but good reasons to not hide
+    public Logger logger;
+    
+    /** Alternate config reader and console format 
+     */
+    private static final String SIMPLE_FMT="org.apache.tomcat.util.log.JdkLoggerFormatter";
+    private static final String SIMPLE_CFG="org.apache.tomcat.util.log.JdkLoggerConfig";
+
+    static {
+        if( System.getProperty("java.util.logging.config.class") ==null  &&
+                System.getProperty("java.util.logging.config.file") ==null ) {
+            // default configuration - it sucks. Let's override at least the 
+            // formatter for the console
+            try {
+                Class.forName(SIMPLE_CFG).newInstance();                
+            } catch( Throwable t ) {                
+            }
+            try {
+                Formatter fmt=(Formatter)Class.forName(SIMPLE_FMT).newInstance();
+                // it is also possible that the user modifed jre/lib/logging.properties - 
+                // but that's really stupid in most cases
+                Logger root=Logger.getLogger("");
+                Handler handlers[]=root.getHandlers();
+                for( int i=0; i< handlers.length; i++ ) {
+                    // I only care about console - that's what's used in default config anyway
+                    if( handlers[i] instanceof  ConsoleHandler ) {
+                        handlers[i].setFormatter(fmt);
+                    }
+                }
+            } catch( Throwable t ) {
+                // maybe it wasn't included - the ugly default will be used.
+            }
+            
+        }
+    }
+    
+    public DirectJDKLog(String name ) {
+        logger=Logger.getLogger(name);        
+    }
+    
+    public final boolean isErrorEnabled() {
+        return logger.isLoggable(Level.SEVERE);
+    }
+    
+    public final boolean isWarnEnabled() {
+        return logger.isLoggable(Level.WARNING); 
+    }
+    
+    public final boolean isInfoEnabled() {
+        return logger.isLoggable(Level.INFO);
+    }
+    
+    public final boolean isDebugEnabled() {
+        return logger.isLoggable(Level.FINE);
+    }
+    
+    public final boolean isFatalEnabled() {
+        return logger.isLoggable(Level.SEVERE);
+    }
+    
+    public final boolean isTraceEnabled() {
+        return logger.isLoggable(Level.FINER);
+    }
+    
+    public final void debug(Object message) {
+        log(Level.FINE, String.valueOf(message), null);
+    }
+    
+    public final void debug(Object message, Throwable t) {
+        log(Level.FINE, String.valueOf(message), t);
+    }
+    
+    public final void trace(Object message) {
+        log(Level.FINER, String.valueOf(message), null);
+    }
+    
+    public final void trace(Object message, Throwable t) {
+        log(Level.FINER, String.valueOf(message), t);
+    }
+    
+    public final void info(Object message) {
+        log(Level.INFO, String.valueOf(message), null);
+    }
+    
+    public final void info(Object message, Throwable t) {        
+        log(Level.INFO, String.valueOf(message), t);
+    }
+    
+    public final void warn(Object message) {
+        log(Level.WARNING, String.valueOf(message), null);
+    }
+    
+    public final void warn(Object message, Throwable t) {
+        log(Level.WARNING, String.valueOf(message), t);
+    }
+    
+    public final void error(Object message) {
+        log(Level.SEVERE, String.valueOf(message), null);
+    }
+    
+    public final void error(Object message, Throwable t) {
+        log(Level.SEVERE, String.valueOf(message), t);
+    }
+    
+    public final void fatal(Object message) {
+        log(Level.SEVERE, String.valueOf(message), null);
+    }
+    
+    public final void fatal(Object message, Throwable t) {
+        log(Level.SEVERE, String.valueOf(message), t);
+    }    
+
+    // from commons logging. This would be my number one reason why java.util.logging
+    // is bad - design by comitee can be really bad ! The impact on performance of 
+    // using java.util.logging - and the ugliness if you need to wrap it - is far
+    // worse than the unfriendly and uncommon default format for logs. 
+    
+    private void log( Level level, String msg, Throwable ex ) {
+        if (logger.isLoggable(level)) {
+            // Hack (?) to get the stack trace.
+            Throwable dummyException=new Throwable();
+            StackTraceElement locations[]=dummyException.getStackTrace();
+            // Caller will be the third element
+            String cname="unknown";
+            String method="unknown";
+            if( locations!=null && locations.length >2 ) {
+                StackTraceElement caller=locations[2];
+                cname=caller.getClassName();
+                method=caller.getMethodName();
+            }
+            if( ex==null ) {
+                logger.logp( level, cname, method, msg );
+            } else {
+                logger.logp( level, cname, method, msg, ex );
+            }
+        }
+    }        
+
+    // for LogFactory
+    static void release() {
+        
+    }
+    
+    static Log getInstance(String name) {
+        return new DirectJDKLog( name );
+    }
+}
+
+

==================================================
LogConfigurationException.java
new file mode 100644
index 0000000000..4ba99ac6a1
--- /dev/null
+++ b/java/org/apache/juli/logging/Log.java
@@ -0,0 +1,233 @@
+/*
+ * Copyright 2001-2004 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */ 
+
+
+package org.apache.juli.logging;
+
+/**
+ * <p>A simple logging interface abstracting logging APIs.  In order to be
+ * instantiated successfully by {@link LogFactory}, classes that implement
+ * this interface must have a constructor that takes a single String
+ * parameter representing the "name" of this Log.</p>
+ *
+ * <p> The six logging levels used by <code>Log</code> are (in order):
+ * <ol>
+ * <li>trace (the least serious)</li>
+ * <li>debug</li>
+ * <li>info</li>
+ * <li>warn</li>
+ * <li>error</li>
+ * <li>fatal (the most serious)</li>
+ * </ol>
+ * The mapping of these log levels to the concepts used by the underlying
+ * logging system is implementation dependent.
+ * The implemention should ensure, though, that this ordering behaves
+ * as expected.</p>
+ *
+ * <p>Performance is often a logging concern.
+ * By examining the appropriate property,
+ * a component can avoid expensive operations (producing information
+ * to be logged).</p>
+ *
+ * <p> For example,
+ * <code><pre>
+ *    if (log.isDebugEnabled()) {
+ *        ... do something expensive ...
+ *        log.debug(theResult);
+ *    }
+ * </pre></code>
+ * </p>
+ *
+ * <p>Configuration of the underlying logging system will generally be done
+ * external to the Logging APIs, through whatever mechanism is supported by
+ * that system.</p>
+ *
+ * @author <a href="mailto:sanders@apache.org">Scott Sanders</a>
+ * @author Rod Waldhoff
+ * @version $Id: Log.java 155426 2005-02-26 13:10:49Z dirkv $
+ */
+public interface Log {
+
+
+    // ----------------------------------------------------- Logging Properties
+
+
+    /**
+     * <p> Is debug logging currently enabled? </p>
+     *
+     * <p> Call this method to prevent having to perform expensive operations
+     * (for example, <code>String</code> concatenation)
+     * when the log level is more than debug. </p>
+     */
+    public boolean isDebugEnabled();
+
+
+    /**
+     * <p> Is error logging currently enabled? </p>
+     *
+     * <p> Call this method to prevent having to perform expensive operations
+     * (for example, <code>String</code> concatenation)
+     * when the log level is more than error. </p>
+     */
+    public boolean isErrorEnabled();
+
+
+    /**
+     * <p> Is fatal logging currently enabled? </p>
+     *
+     * <p> Call this method to prevent having to perform expensive operations
+     * (for example, <code>String</code> concatenation)
+     * when the log level is more than fatal. </p>
+     */
+    public boolean isFatalEnabled();
+
+
+    /**
+     * <p> Is info logging currently enabled? </p>
+     *
+     * <p> Call this method to prevent having to perform expensive operations
+     * (for example, <code>String</code> concatenation)
+     * when the log level is more than info. </p>
+     */
+    public boolean isInfoEnabled();
+
+
+    /**
+     * <p> Is trace logging currently enabled? </p>
+     *
+     * <p> Call this method to prevent having to perform expensive operations
+     * (for example, <code>String</code> concatenation)
+     * when the log level is more than trace. </p>
+     */
+    public boolean isTraceEnabled();
+
+
+    /**
+     * <p> Is warn logging currently enabled? </p>
+     *
+     * <p> Call this method to prevent having to perform expensive operations
+     * (for example, <code>String</code> concatenation)
+     * when the log level is more than warn. </p>
+     */
+    public boolean isWarnEnabled();
+
+
+    // -------------------------------------------------------- Logging Methods
+
+
+    /**
+     * <p> Log a message with trace log level. </p>
+     *
+     * @param message log this message
+     */
+    public void trace(Object message);
+
+
+    /**
+     * <p> Log an error with trace log level. </p>
+     *
+     * @param message log this message
+     * @param t log this cause
+     */
+    public void trace(Object message, Throwable t);
+
+
+    /**
+     * <p> Log a message with debug log level. </p>
+     *
+     * @param message log this message
+     */
+    public void debug(Object message);
+
+
+    /**
+     * <p> Log an error with debug log level. </p>
+     *
+     * @param message log this message
+     * @param t log this cause
+     */
+    public void debug(Object message, Throwable t);
+
+
+    /**
+     * <p> Log a message with info log level. </p>
+     *
+     * @param message log this message
+     */
+    public void info(Object message);
+
+
+    /**
+     * <p> Log an error with info log level. </p>
+     *
+     * @param message log this message
+     * @param t log this cause
+     */
+    public void info(Object message, Throwable t);
+
+
+    /**
+     * <p> Log a message with warn log level. </p>
+     *
+     * @param message log this message
+     */
+    public void warn(Object message);
+
+
+    /**
+     * <p> Log an error with warn log level. </p>
+     *
+     * @param message log this message
+     * @param t log this cause
+     */
+    public void warn(Object message, Throwable t);
+
+
+    /**
+     * <p> Log a message with error log level. </p>
+     *
+     * @param message log this message
+     */
+    public void error(Object message);
+
+
+    /**
+     * <p> Log an error with error log level. </p>
+     *
+     * @param message log this message
+     * @param t log this cause
+     */
+    public void error(Object message, Throwable t);
+
+
+    /**
+     * <p> Log a message with fatal log level. </p>
+     *
+     * @param message log this message
+     */
+    public void fatal(Object message);
+
+
+    /**
+     * <p> Log an error with fatal log level. </p>
+     *
+     * @param message log this message
+     * @param t log this cause
+     */
+    public void fatal(Object message, Throwable t);
+
+
+}

==================================================
LogFactory.java
new file mode 100644
index 0000000000..70dff41600
--- /dev/null
+++ b/java/org/apache/juli/logging/LogConfigurationException.java
@@ -0,0 +1,91 @@
+/*
+ * Copyright 2001-2004 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */ 
+
+package org.apache.juli.logging;
+
+
+/**
+ * <p>An exception that is thrown only if a suitable <code>LogFactory</code>
+ * or <code>Log</code> instance cannot be created by the corresponding
+ * factory methods.</p>
+ *
+ * @author Craig R. McClanahan
+ * @version $Revision: 155426 $ $Date: 2005-02-26 05:10:49 -0800 (Sat, 26 Feb 2005) $
+ */
+
+public class LogConfigurationException extends RuntimeException {
+
+
+    /**
+     * Construct a new exception with <code>null</code> as its detail message.
+     */
+    public LogConfigurationException() {
+        super();
+    }
+
+
+    /**
+     * Construct a new exception with the specified detail message.
+     *
+     * @param message The detail message
+     */
+    public LogConfigurationException(String message) {
+        super(message);
+    }
+
+
+    /**
+     * Construct a new exception with the specified cause and a derived
+     * detail message.
+     *
+     * @param cause The underlying cause
+     */
+    public LogConfigurationException(Throwable cause) {
+        this( ((cause == null) ? null : cause.toString()), cause);
+    }
+
+
+    /**
+     * Construct a new exception with the specified detail message and cause.
+     *
+     * @param message The detail message
+     * @param cause The underlying cause
+     */
+    public LogConfigurationException(String message, Throwable cause) {
+
+        super(message);
+        this.cause = cause; // Two-argument version requires JDK 1.4 or later
+
+    }
+
+
+    /**
+     * The underlying cause of this exception.
+     */
+    protected Throwable cause = null;
+
+
+    /**
+     * Return the underlying cause of this exception (if any).
+     */
+    public Throwable getCause() {
+
+        return (this.cause);
+
+    }
+
+
+}

==================================================
NamingContext.java
new file mode 100644
index 0000000000..d185fc0d4c
--- /dev/null
+++ b/java/org/apache/juli/logging/package.html
@@ -0,0 +1,21 @@
+<body>
+
+<h3>Overview</h3>
+
+
+<p>This implementation of commons-logging uses a  commons-logging.jar
+ specific to a particular logging framework, instead of discovery. This takes 
+out the guessing, is simpler, faster and more robust. Just like you chose a 
+logging implementation, you should also use a matching commons-logging - for
+example you download log4j.jar and commons-logging-log4j.jar, or use jdk 
+logging and use commons-logging-jdk.jar.</p>
+
+<p>A similar packaging is used by Eclipse SWT - they provide a common widget API,
+ but each platform uses a different implementation jar - instead of using a complex 
+ discovery/plugin mechanism.
+</p> 
+
+<p>This package generates commons-logging-jdk14.jar - i.e. the java.util implementation
+of commons-logging api.<p>
+
+</body>

==================================================
FileDirContext.java
index f7a47e3db2..a9875c011c 100644
--- a/java/org/apache/naming/NamingContext.java
+++ b/java/org/apache/naming/NamingContext.java
@@ -54,8 +54,8 @@ public class NamingContext implements Context {
     protected static final NameParser nameParser = new NameParserImpl();
 
 
-    private static org.apache.commons.logging.Log log =
-        org.apache.commons.logging.LogFactory.getLog(NamingContext.class);
+    private static org.apache.juli.logging.Log log =
+        org.apache.juli.logging.LogFactory.getLog(NamingContext.class);
 
 
     // ----------------------------------------------------------- Constructors

==================================================
WARDirContext.java
index 4dd80ee9a9..d55aa1494d 100644
--- a/java/org/apache/naming/resources/FileDirContext.java
+++ b/java/org/apache/naming/resources/FileDirContext.java
@@ -49,8 +49,8 @@ import org.apache.naming.NamingEntry;
 
 public class FileDirContext extends BaseDirContext {
 
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( FileDirContext.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( FileDirContext.class );
 
     // -------------------------------------------------------------- Constants
 

==================================================
DomUtil.java
index 20ccd87bf6..32a8f14a4e 100644
--- a/java/org/apache/naming/resources/WARDirContext.java
+++ b/java/org/apache/naming/resources/WARDirContext.java
@@ -52,8 +52,8 @@ import org.apache.naming.NamingEntry;
 
 public class WARDirContext extends BaseDirContext {
 
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( WARDirContext.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( WARDirContext.class );
     
     // ----------------------------------------------------------- Constructors
 

==================================================
IntrospectionUtils.java
index 402952da5a..8b0f0a1904 100644
--- a/java/org/apache/tomcat/util/DomUtil.java
+++ b/java/org/apache/tomcat/util/DomUtil.java
@@ -44,8 +44,8 @@ import org.xml.sax.SAXException;
  * @author Costin Manolache
  */
 public class DomUtil {
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( DomUtil.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( DomUtil.class );
 
     // -------------------- DOM utils --------------------
 

==================================================
B2CConverter.java
index c8774f1008..1dd2ee3d98 100644
--- a/java/org/apache/tomcat/util/IntrospectionUtils.java
+++ b/java/org/apache/tomcat/util/IntrospectionUtils.java
@@ -37,8 +37,8 @@ import java.util.Vector;
 public final class IntrospectionUtils {
 
     
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( IntrospectionUtils.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( IntrospectionUtils.class );
     
     /**
      * Call execute() - any ant-like task should work

==================================================
Base64.java
index dd2cb33700..52d1caa1b5 100644
--- a/java/org/apache/tomcat/util/buf/B2CConverter.java
+++ b/java/org/apache/tomcat/util/buf/B2CConverter.java
@@ -36,8 +36,8 @@ import java.io.UnsupportedEncodingException;
 public class B2CConverter {
     
     
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( B2CConverter.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( B2CConverter.class );
     
     private IntermediateInputStream iis;
     private ReadConvertor conv;

==================================================
C2BConverter.java
index 6a34336178..ae3b003098 100644
--- a/java/org/apache/tomcat/util/buf/Base64.java
+++ b/java/org/apache/tomcat/util/buf/Base64.java
@@ -33,8 +33,8 @@ package org.apache.tomcat.util.buf;
 public final class Base64 {
 
 
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( Base64.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( Base64.class );
     
     static private final int  BASELENGTH         = 255;
     static private final int  LOOKUPLENGTH       = 63;

==================================================
StringCache.java
index 1d372165c7..10daa93fba 100644
--- a/java/org/apache/tomcat/util/buf/C2BConverter.java
+++ b/java/org/apache/tomcat/util/buf/C2BConverter.java
@@ -30,8 +30,8 @@ import java.io.UnsupportedEncodingException;
  */
 public final class C2BConverter {
     
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog(C2BConverter.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog(C2BConverter.class );
     
     private IntermediateOutputStream ios;
     private WriteConvertor conv;

==================================================
UDecoder.java
index 0ee27aa2cf..0dd6b2d77b 100644
--- a/java/org/apache/tomcat/util/buf/StringCache.java
+++ b/java/org/apache/tomcat/util/buf/StringCache.java
@@ -29,8 +29,8 @@ import java.util.TreeMap;
 public class StringCache {
 
 
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( StringCache.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( StringCache.class );
     
     
     // ------------------------------------------------------- Static Variables

==================================================
UEncoder.java
index 950d0771ed..2d4d5d4682 100644
--- a/java/org/apache/tomcat/util/buf/UDecoder.java
+++ b/java/org/apache/tomcat/util/buf/UDecoder.java
@@ -29,8 +29,8 @@ import java.io.IOException;
  */
 public final class UDecoder {
     
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog(UDecoder.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog(UDecoder.class );
     
     public UDecoder() 
     {

==================================================
UTF8Decoder.java
index 627bc96f69..b15a73a2f4 100644
--- a/java/org/apache/tomcat/util/buf/UEncoder.java
+++ b/java/org/apache/tomcat/util/buf/UEncoder.java
@@ -33,8 +33,8 @@ import java.util.BitSet;
  */
 public final class UEncoder {
 
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog(UEncoder.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog(UEncoder.class );
     
     // Not static - the set may differ ( it's better than adding
     // an extra check for "/", "+", etc

==================================================
SimpleHashtable.java
index f189176aef..b6a1e960e2 100644
--- a/java/org/apache/tomcat/util/buf/UTF8Decoder.java
+++ b/java/org/apache/tomcat/util/buf/UTF8Decoder.java
@@ -33,8 +33,8 @@ import java.io.IOException;
 public final class UTF8Decoder extends B2CConverter {
     
     
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog(UTF8Decoder.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog(UTF8Decoder.class );
     
     // may have state !!
     

==================================================
SimplePool.java
index eb07fd9ad5..c55ee298f6 100644
--- a/java/org/apache/tomcat/util/collections/SimpleHashtable.java
+++ b/java/org/apache/tomcat/util/collections/SimpleHashtable.java
@@ -58,8 +58,8 @@ import java.util.Enumeration;
 public final class SimpleHashtable implements Enumeration
 {
     
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog( SimpleHashtable.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog( SimpleHashtable.class );
     
     // entries ...
     private Entry		table[];

==================================================
Digester.java
index fcd6212622..91720628ca 100644
--- a/java/org/apache/tomcat/util/collections/SimplePool.java
+++ b/java/org/apache/tomcat/util/collections/SimplePool.java
@@ -27,8 +27,8 @@ package org.apache.tomcat.util.collections;
 public final class SimplePool  {
     
     
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog(SimplePool.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog(SimplePool.class );
     
     /*
      * Where the threads are held.

==================================================
GenericParser.java
index 2b857a787b..055ead376b 100644
--- a/java/org/apache/tomcat/util/digester/Digester.java
+++ b/java/org/apache/tomcat/util/digester/Digester.java
@@ -35,8 +35,8 @@ import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.parsers.SAXParser;
 import javax.xml.parsers.SAXParserFactory;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.IntrospectionUtils;
 import org.xml.sax.Attributes;
 import org.xml.sax.EntityResolver;

==================================================
XercesParser.java
index 6b29afb09c..2273232061 100644
--- a/java/org/apache/tomcat/util/digester/GenericParser.java
+++ b/java/org/apache/tomcat/util/digester/GenericParser.java
@@ -24,8 +24,8 @@ import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.parsers.SAXParser;
 import javax.xml.parsers.SAXParserFactory;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.xml.sax.SAXException;
 import org.xml.sax.SAXNotRecognizedException;
 

==================================================
Cookies.java
index d4eff02af9..9b1efd5842 100644
--- a/java/org/apache/tomcat/util/digester/XercesParser.java
+++ b/java/org/apache/tomcat/util/digester/XercesParser.java
@@ -25,8 +25,8 @@ import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.parsers.SAXParser;
 import javax.xml.parsers.SAXParserFactory;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.xml.sax.SAXException;
 import org.xml.sax.SAXNotRecognizedException;
 import org.xml.sax.SAXNotSupportedException;

==================================================
Parameters.java
index 83253b81c9..64a3d69584 100644
--- a/java/org/apache/tomcat/util/http/Cookies.java
+++ b/java/org/apache/tomcat/util/http/Cookies.java
@@ -34,8 +34,8 @@ import org.apache.tomcat.util.buf.MessageBytes;
  */
 public final class Cookies { // extends MultiMap {
 
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog(Cookies.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog(Cookies.class );
     
     // expected average number of cookies per request
     public static final int INITIAL_SIZE=4; 

==================================================
ServerCookie.java
index f11d44bfb5..f43d194ddb 100644
--- a/java/org/apache/tomcat/util/http/Parameters.java
+++ b/java/org/apache/tomcat/util/http/Parameters.java
@@ -33,8 +33,8 @@ import org.apache.tomcat.util.collections.MultiMap;
 public final class Parameters extends MultiMap {
 
     
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog(Parameters.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog(Parameters.class );
     
     // Transition: we'll use the same Hashtable( String->String[] )
     // for the beginning. When we are sure all accesses happen through

==================================================
Mapper.java
index 39bb88d379..d3668e32df 100644
--- a/java/org/apache/tomcat/util/http/ServerCookie.java
+++ b/java/org/apache/tomcat/util/http/ServerCookie.java
@@ -36,8 +36,8 @@ import org.apache.tomcat.util.buf.MessageBytes;
 public class ServerCookie implements Serializable {
     
     
-    private static org.apache.commons.logging.Log log=
-        org.apache.commons.logging.LogFactory.getLog(ServerCookie.class );
+    private static org.apache.juli.logging.Log log=
+        org.apache.juli.logging.LogFactory.getLog(ServerCookie.class );
     
     private MessageBytes name=MessageBytes.newInstance();
     private MessageBytes value=MessageBytes.newInstance();

==================================================
BaseModelMBean.java
index 0a253e80f7..7ee3bd43ab 100644
--- a/java/org/apache/tomcat/util/http/mapper/Mapper.java
+++ b/java/org/apache/tomcat/util/http/mapper/Mapper.java
@@ -34,8 +34,8 @@ import java.util.ArrayList;
 public final class Mapper {
 
 
-    private static org.apache.commons.logging.Log logger =
-        org.apache.commons.logging.LogFactory.getLog(Mapper.class);
+    private static org.apache.juli.logging.Log logger =
+        org.apache.juli.logging.LogFactory.getLog(Mapper.class);
     // ----------------------------------------------------- Instance Variables
 
 

==================================================
Registry.java
index f5284e5e7b..17f744cee3 100644
--- a/java/org/apache/tomcat/util/modeler/BaseModelMBean.java
+++ b/java/org/apache/tomcat/util/modeler/BaseModelMBean.java
@@ -45,8 +45,8 @@ import javax.management.RuntimeOperationsException;
 import javax.management.modelmbean.InvalidTargetObjectTypeException;
 import javax.management.modelmbean.ModelMBeanNotificationBroadcaster;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /*
  * Changes from commons.modeler:

==================================================
MbeansDescriptorsDOMSource.java
index 42b896f1dc..755f3e78d9 100644
--- a/java/org/apache/tomcat/util/modeler/Registry.java
+++ b/java/org/apache/tomcat/util/modeler/Registry.java
@@ -38,8 +38,8 @@ import javax.management.MBeanServerFactory;
 import javax.management.MalformedObjectNameException;
 import javax.management.ObjectName;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.modeler.modules.ModelerSource;
 
 /*

==================================================
MbeansDescriptorsDigesterSource.java
index 1228a7b446..de8ee7d6ac 100644
--- a/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsDOMSource.java
+++ b/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsDOMSource.java
@@ -21,8 +21,8 @@ import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.List;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.DomUtil;
 import org.apache.tomcat.util.modeler.AttributeInfo;
 import org.apache.tomcat.util.modeler.ManagedBean;

==================================================
MbeansDescriptorsIntrospectionSource.java
index ce760922e4..05364318c8 100644
--- a/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsDigesterSource.java
+++ b/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsDigesterSource.java
@@ -24,8 +24,8 @@ import java.util.List;
 
 import org.apache.tomcat.util.digester.Digester;
 import org.apache.tomcat.util.modeler.Registry;
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 public class MbeansDescriptorsDigesterSource extends ModelerSource
 {

==================================================
MbeansDescriptorsSerSource.java
index ca70ba6fdd..8d4a882bc2 100644
--- a/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsIntrospectionSource.java
+++ b/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsIntrospectionSource.java
@@ -27,8 +27,8 @@ import java.util.List;
 
 import javax.management.ObjectName;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.modeler.AttributeInfo;
 import org.apache.tomcat.util.modeler.ManagedBean;
 import org.apache.tomcat.util.modeler.OperationInfo;

==================================================
MbeansSource.java
index f8bc07a58e..894c33efdb 100644
--- a/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsSerSource.java
+++ b/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsSerSource.java
@@ -6,8 +6,8 @@ import java.net.URL;
 import java.util.ArrayList;
 import java.util.List;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.modeler.ManagedBean;
 import org.apache.tomcat.util.modeler.Registry;
 

==================================================
AprEndpoint.java
index 1686e96c36..a564df8651 100644
--- a/java/org/apache/tomcat/util/modeler/modules/MbeansSource.java
+++ b/java/org/apache/tomcat/util/modeler/modules/MbeansSource.java
@@ -14,8 +14,8 @@ import javax.management.ObjectName;
 import javax.management.loading.MLet;
 import javax.xml.transform.TransformerException;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.DomUtil;
 import org.apache.tomcat.util.modeler.AttributeInfo;
 import org.apache.tomcat.util.modeler.BaseModelMBean;

==================================================
BaseEndpoint.java
index 617f9a016b..bda77e5437 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -21,8 +21,8 @@ import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.concurrent.Executor;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.jni.Address;
 import org.apache.tomcat.jni.Error;
 import org.apache.tomcat.jni.File;

==================================================
JIoEndpoint.java
index aac6a83f67..e19eba0815 100644
--- a/java/org/apache/tomcat/util/net/BaseEndpoint.java
+++ b/java/org/apache/tomcat/util/net/BaseEndpoint.java
@@ -19,8 +19,8 @@ package org.apache.tomcat.util.net;
 import java.net.InetAddress;
 import java.util.concurrent.Executor;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.res.StringManager;
 
 /**

==================================================
NioEndpoint.java
index d7f0c5c7ec..4a5b74b83c 100644
--- a/java/org/apache/tomcat/util/net/JIoEndpoint.java
+++ b/java/org/apache/tomcat/util/net/JIoEndpoint.java
@@ -23,8 +23,8 @@ import java.net.ServerSocket;
 import java.net.Socket;
 import java.util.concurrent.Executor;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.res.StringManager;
 
 /**

==================================================
PoolTcpEndpoint.java
index b2c8bae752..9c994f58cf 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -40,8 +40,8 @@ import javax.net.ssl.SSLContext;
 import javax.net.ssl.SSLEngine;
 import javax.net.ssl.TrustManagerFactory;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.SecureNioChannel.ApplicationBufferHandler;
 import org.apache.tomcat.util.res.StringManager;
 

==================================================
SSLImplementation.java
index d56f63391b..b7084db1f1 100644
--- a/java/org/apache/tomcat/util/net/PoolTcpEndpoint.java
+++ b/java/org/apache/tomcat/util/net/PoolTcpEndpoint.java
@@ -27,8 +27,8 @@ import java.security.AccessControlException;
 import java.util.Stack;
 import java.util.Vector;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.res.StringManager;
 import org.apache.tomcat.util.threads.ThreadPool;
 import org.apache.tomcat.util.threads.ThreadPoolRunnable;

==================================================
JSSEImplementation.java
index 4d9169b37d..3dfb916b9e 100644
--- a/java/org/apache/tomcat/util/net/SSLImplementation.java
+++ b/java/org/apache/tomcat/util/net/SSLImplementation.java
@@ -26,8 +26,8 @@ import javax.net.ssl.SSLSession;
    @author EKR
 */
 abstract public class SSLImplementation {
-    private static org.apache.commons.logging.Log logger =
-        org.apache.commons.logging.LogFactory.getLog(SSLImplementation.class);
+    private static org.apache.juli.logging.Log logger =
+        org.apache.juli.logging.LogFactory.getLog(SSLImplementation.class);
 
     // The default implementations in our search path
     private static final String PureTLSImplementationClass=

==================================================
JSSESocketFactory.java
index 5b7d3b3ced..2a0c8cb33c 100644
--- a/java/org/apache/tomcat/util/net/jsse/JSSEImplementation.java
+++ b/java/org/apache/tomcat/util/net/jsse/JSSEImplementation.java
@@ -34,8 +34,8 @@ public class JSSEImplementation extends SSLImplementation
 {
     static final String SSLSocketClass = "javax.net.ssl.SSLSocket";
 
-    static org.apache.commons.logging.Log logger = 
-        org.apache.commons.logging.LogFactory.getLog(JSSEImplementation.class);
+    static org.apache.juli.logging.Log logger = 
+        org.apache.juli.logging.LogFactory.getLog(JSSEImplementation.class);
 
     private JSSEFactory factory = null;
 

==================================================
JSSESupport.java
index 8d0faaef47..6566a10bb1 100644
--- a/java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java
+++ b/java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java
@@ -87,8 +87,8 @@ public class JSSESocketFactory
     private static final String defaultKeystoreFile
         = System.getProperty("user.home") + "/.keystore";
     private static final String defaultKeyPass = "changeit";
-    static org.apache.commons.logging.Log log =
-        org.apache.commons.logging.LogFactory.getLog(JSSESocketFactory.class);
+    static org.apache.juli.logging.Log log =
+        org.apache.juli.logging.LogFactory.getLog(JSSESocketFactory.class);
 
     protected boolean initialized;
     protected String clientAuth = "false";

==================================================
ThreadPool.java
index b61f170e02..f009a39184 100644
--- a/java/org/apache/tomcat/util/net/jsse/JSSESupport.java
+++ b/java/org/apache/tomcat/util/net/jsse/JSSESupport.java
@@ -49,8 +49,8 @@ import org.apache.tomcat.util.net.SSLSupport;
 
 class JSSESupport implements SSLSupport {
     
-    private static org.apache.commons.logging.Log log =
-        org.apache.commons.logging.LogFactory.getLog(JSSESupport.class);
+    private static org.apache.juli.logging.Log log =
+        org.apache.juli.logging.LogFactory.getLog(JSSESupport.class);
 
     protected SSLSocket ssl;
     protected SSLSession session;

==================================================
