540998a04b6301a4d5754a300007ca9be494b4ae
==================================================
Need to put all locales in order before adding them to the locales collection - not just those from the first header.
==================================================
Mark Emlyn
==================================================
Fri Aug 15 07:34:43 2014 +0000
==================================================
Request.java
Need to put all locales in order before adding them to the locales collection - not just those from the first header.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1618112 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestRequest.java
index 0788fd0c39..38daac7a88 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -3086,26 +3086,33 @@ public class Request
 
         localesParsed = true;
 
+        // Store the accumulated languages that have been requested in
+        // a local collection, sorted by the quality value (so we can
+        // add Locales in descending order).  The values will be ArrayLists
+        // containing the corresponding Locales to be added
+        TreeMap<Double, ArrayList<Locale>> locales = new TreeMap<>();
+
         Enumeration<String> values = getHeaders("accept-language");
 
         while (values.hasMoreElements()) {
             String value = values.nextElement();
-            parseLocalesHeader(value);
+            parseLocalesHeader(value, locales);
         }
 
+        // Process the quality values in highest->lowest order (due to
+        // negating the Double value when creating the key)
+        for (ArrayList<Locale> list : locales.values()) {
+            for (Locale locale : list) {
+                addLocale(locale);
+            }
+        }
     }
 
 
     /**
      * Parse accept-language header value.
      */
-    protected void parseLocalesHeader(String value) {
-
-        // Store the accumulated languages that have been requested in
-        // a local collection, sorted by the quality value (so we can
-        // add Locales in descending order).  The values will be ArrayLists
-        // containing the corresponding Locales to be added
-        TreeMap<Double, ArrayList<Locale>> locales = new TreeMap<>();
+    protected void parseLocalesHeader(String value, TreeMap<Double, ArrayList<Locale>> locales) {
 
         // Preprocess the value to remove all whitespace
         int white = value.indexOf(' ');
@@ -3200,17 +3207,7 @@ public class Request
                 locales.put(key, values);
             }
             values.add(locale);
-
-        }
-
-        // Process the quality values in highest->lowest order (due to
-        // negating the Double value when creating the key)
-        for (ArrayList<Locale> list : locales.values()) {
-            for (Locale locale : list) {
-                addLocale(locale);
-            }
         }
-
     }
 
 

==================================================
TesterRequest.java
index b2b5597244..e6314bd636 100644
--- a/test/org/apache/catalina/connector/TestRequest.java
+++ b/test/org/apache/catalina/connector/TestRequest.java
@@ -27,6 +27,7 @@ import java.net.URL;
 import java.util.ArrayList;
 import java.util.Enumeration;
 import java.util.List;
+import java.util.Locale;
 import java.util.TreeMap;
 
 import javax.servlet.ServletException;
@@ -39,8 +40,8 @@ import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
+import org.junit.Assert;
 import org.junit.Test;
-
 import org.apache.catalina.Context;
 import org.apache.catalina.authenticator.BasicAuthenticator;
 import org.apache.catalina.filters.FailedRequestFilter;
@@ -795,4 +796,35 @@ public class TestRequest extends TomcatBaseTest {
             resp.getWriter().print(req.getContextPath());
         }
     }
+
+    @Test
+    public void getLocaleMultipleHeaders01() throws Exception {
+        TesterRequest req = new TesterRequest();
+
+        req.addHeader("accept-language", "en;q=0.5");
+        req.addHeader("accept-language", "en-gb");
+
+        Locale actual = req.getLocale();
+        Locale expected = Locale.forLanguageTag("en-gb");
+
+        Assert.assertEquals(expected, actual);
+    }
+
+    /*
+     * Reverse header order of getLocaleMultipleHeaders01() and make sure the
+     * result is the same.
+     */
+    @Test
+    public void getLocaleMultipleHeaders02() throws Exception {
+        TesterRequest req = new TesterRequest();
+
+        req.addHeader("accept-language", "en-gb");
+        req.addHeader("accept-language", "en;q=0.5");
+
+        Locale actual = req.getLocale();
+        Locale expected = Locale.forLanguageTag("en-gb");
+
+        Assert.assertEquals(expected, actual);
+    }
+
 }

==================================================
