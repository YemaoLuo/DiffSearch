e5672803d2aeb635cfd332f119de72463fa48107
==================================================
More refactoring to align the dispatch() method between Processors
==================================================
Mark Thomas
==================================================
Tue Sep 29 21:54:39 2015 +0000
==================================================
AbstractProcessor.java
More refactoring to align the dispatch() method between Processors

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1705930 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpProcessor.java
index 6c788e8913..a1e0bc618b 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -228,6 +228,18 @@ public abstract class AbstractProcessor implements ActionHook, Processor {
     @Override
     public abstract SocketState dispatch(SocketStatus status);
 
+    /**
+     * Flush any pending writes. Used during non-blocking writes to flush any
+     * remaining data from a previous incomplete write.
+     *
+     * @return <code>true</code> if data remains to be flushed at the end of
+     *         method
+     *
+     * @throws IOException If an I/O error occurs while attempting to flush the
+     *         data
+     */
+    protected abstract boolean flushBufferedWrite() throws IOException ;
+
     /**
      * Perform any necessary processing for a non-blocking read before
      * dispatching to the adapter.

==================================================
Http11Processor.java
index 0f6cecb897..f0881436dd 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -623,14 +623,8 @@ public class AjpProcessor extends AbstractProcessor {
         if (status == SocketStatus.OPEN_WRITE && response.getWriteListener() != null) {
             asyncStateMachine.asyncOperation();
             try {
-                if (hasDataToWrite()) {
-                    socketWrapper.flush(false);
-                    if (hasDataToWrite()) {
-                        // There is data to write but go via Response to
-                        // maintain a consistent view of non-blocking state
-                        response.checkRegisterForWrite();
-                        return SocketState.LONG;
-                    }
+                if (flushBufferedWrite()) {
+                    return SocketState.LONG;
                 }
             } catch (IOException ioe) {
                 if (getLog().isDebugEnabled()) {
@@ -646,7 +640,7 @@ public class AjpProcessor extends AbstractProcessor {
         RequestInfo rp = request.getRequestProcessor();
         try {
             rp.setStage(org.apache.coyote.Constants.STAGE_SERVICE);
-            if(!getAdapter().asyncDispatch(request, response, status)) {
+            if (!getAdapter().asyncDispatch(request, response, status)) {
                 setErrorState(ErrorState.CLOSE_NOW, null);
             }
         } catch (InterruptedIOException e) {
@@ -674,6 +668,20 @@ public class AjpProcessor extends AbstractProcessor {
         }
     }
 
+    @Override
+    protected boolean flushBufferedWrite() throws IOException {
+        if (hasDataToWrite()) {
+            socketWrapper.flush(false);
+            if (hasDataToWrite()) {
+                // There is data to write but go via Response to
+                // maintain a consistent view of non-blocking state
+                response.checkRegisterForWrite();
+                return true;
+            }
+        }
+        return false;
+    }
+
     @Override
     protected void dispatchNonBlockingRead() {
         if (available()) {

==================================================
StreamProcessor.java
index 6468e81786..db3d5cd01a 100644
--- a/java/org/apache/coyote/http2/LocalStrings.properties
+++ b/java/org/apache/coyote/http2/LocalStrings.properties
@@ -72,7 +72,6 @@ stream.write=Connection [{0}], Stream [{1}]
 
 stream.outputBuffer.flush.debug=Connection [{0}], Stream [{1}], flushing output with buffer at position [{2}], writeInProgress [{3}] and closed [{4}]
 
-streamProcessor.dispatch=Connection [{0}], Stream [{1}], status [{2}]
 streamProcessor.httpupgrade.notsupported=HTTP upgrade is not supported within HTTP/2 streams
 streamProcessor.process.loopend=Connection [{0}], Stream [{1}], loop end, state [{2}], dispatches [{3}]
 streamProcessor.process.loopstart=Connection [{0}], Stream [{1}], loop start, status [{2}], dispatches [{3}]

==================================================
