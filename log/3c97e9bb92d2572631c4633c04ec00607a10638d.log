3c97e9bb92d2572631c4633c04ec00607a10638d
==================================================
Add a test for closure of idle streams and fix the bugs it identified.
==================================================
Mark Thomas
==================================================
Wed Jun 10 20:02:11 2015 +0000
==================================================
Http2UpgradeHandler.java
Add a test for closure of idle streams and fix the bugs it identified.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1684757 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http2TestBase.java
index bef90b5b24..24030b8363 100644
--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java
@@ -119,7 +119,8 @@ public class Http2UpgradeHandler extends AbstractStream implements InternalHttpU
     private final Map<Integer,Stream> streams = new HashMap<>();
     private volatile int activeRemoteStreamCount = 0;
     private volatile int maxRemoteStreamId = 0;
-    private volatile int maxActiveRemoteStreamId = 0;
+    // Start at -1 so the 'add 2' logic in closeIdleStreams() works
+    private volatile int maxActiveRemoteStreamId = -1;
 
     // Tracking for when the connection is blocked (windowSize < 1)
     private final Object backLogLock = new Object();
@@ -141,6 +142,7 @@ public class Http2UpgradeHandler extends AbstractStream implements InternalHttpU
             Stream stream = new Stream(key, this, coyoteRequest);
             streams.put(key, stream);
             maxRemoteStreamId = 1;
+            maxActiveRemoteStreamId = 1;
             activeRemoteStreamCount = 1;
         }
     }
@@ -803,7 +805,7 @@ public class Http2UpgradeHandler extends AbstractStream implements InternalHttpU
 
     private void closeIdleStreams(int newMaxActiveRemoteStreamId) throws Http2Exception {
         for (int i = maxActiveRemoteStreamId + 2; i < newMaxActiveRemoteStreamId; i += 2) {
-            Stream stream = getStream(newMaxActiveRemoteStreamId, false);
+            Stream stream = getStream(i, false);
             if (stream != null) {
                 stream.closeIfIdle();
             }

==================================================
TestHttp2Section_5_1.java
index 08cd08efbb..92fd11c68b 100644
--- a/test/org/apache/coyote/http2/Http2TestBase.java
+++ b/test/org/apache/coyote/http2/Http2TestBase.java
@@ -43,7 +43,6 @@ import org.apache.coyote.http2.Http2Parser.Output;
 import org.apache.tomcat.util.codec.binary.Base64;
 import org.apache.tomcat.util.http.MimeHeaders;
 
-
 /**
  * Tests for compliance with the <a href="https://tools.ietf.org/html/rfc7540">
  * HTTP/2 specification</a>.
@@ -409,6 +408,26 @@ public abstract class Http2TestBase extends TomcatBaseTest {
         os.flush();
     }
 
+
+    void sendPriority(int streamId, int streamDependencyId, int weight) throws IOException {
+        byte[] priorityFrame = new byte[14];
+        // length
+        ByteUtil.setThreeBytes(priorityFrame, 0, 5);
+        // type
+        priorityFrame[3] = FrameType.PRIORITY.getIdByte();
+        // No flags
+        // Stream ID
+        ByteUtil.set31Bits(priorityFrame, 5, streamId);
+
+        // Payload
+        ByteUtil.set31Bits(priorityFrame, 9, streamDependencyId);
+        ByteUtil.setOneBytes(priorityFrame, 13, weight);
+
+        os.write(priorityFrame);
+        os.flush();
+    }
+
+
     private static class TestInput implements Http2Parser.Input {
 
         private final InputStream is;

==================================================
