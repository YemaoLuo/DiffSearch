e09a256fc285b6703e6737a8527a1ccde6f51ac7
==================================================
Remove deprecated code
==================================================
Mark Thomas
==================================================
Wed Oct 18 10:40:01 2017 +0000
==================================================
StatusTransformer.java
Remove deprecated code

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1812490 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StoreAppender.java
index d0ec7fd1f4..a241bd1bd5 100644
--- a/java/org/apache/catalina/manager/StatusTransformer.java
+++ b/java/org/apache/catalina/manager/StatusTransformer.java
@@ -907,81 +907,6 @@ public class StatusTransformer {
     }
 
 
-    /**
-     * Filter the specified message string for characters that are sensitive
-     * in HTML.  This avoids potential attacks caused by including JavaScript
-     * codes in the request URL that is often reported in error messages.
-     *
-     * @param obj The message string to be filtered
-     * @return filtered HTML content
-     *
-     * @deprecated This method will be removed in Tomcat 9
-     */
-    @Deprecated
-    public static String filter(Object obj) {
-
-        if (obj == null)
-            return "?";
-        String message = obj.toString();
-
-        char content[] = new char[message.length()];
-        message.getChars(0, message.length(), content, 0);
-        StringBuilder result = new StringBuilder(content.length + 50);
-        for (int i = 0; i < content.length; i++) {
-            switch (content[i]) {
-            case '<':
-                result.append("&lt;");
-                break;
-            case '>':
-                result.append("&gt;");
-                break;
-            case '&':
-                result.append("&amp;");
-                break;
-            case '"':
-                result.append("&quot;");
-                break;
-            default:
-                result.append(content[i]);
-            }
-        }
-        return result.toString();
-
-    }
-
-
-    /**
-     * Escape the 5 entities defined by XML.
-     * @param s The message string to be filtered
-     * @return filtered XML content
-     *
-     * @deprecated This method will be removed in Tomcat 9
-     */
-    @Deprecated
-    public static String filterXml(String s) {
-        if (s == null)
-            return "";
-        StringBuilder sb = new StringBuilder();
-        for (int i = 0; i < s.length(); i++) {
-            char c = s.charAt(i);
-            if (c == '<') {
-                sb.append("&lt;");
-            } else if (c == '>') {
-                sb.append("&gt;");
-            } else if (c == '\'') {
-                sb.append("&apos;");
-            } else if (c == '&') {
-                sb.append("&amp;");
-            } else if (c == '"') {
-                sb.append("&quot;");
-            } else {
-                sb.append(c);
-            }
-        }
-        return sb.toString();
-    }
-
-
     /**
      * Display the given size in bytes, either as KB or MB.
      *

==================================================
RequestUtil.java
index 452122e090..e4fdc8b996 100644
--- a/java/org/apache/catalina/storeconfig/StoreAppender.java
+++ b/java/org/apache/catalina/storeconfig/StoreAppender.java
@@ -356,36 +356,6 @@ public class StoreAppender {
         writer.print("\"");
     }
 
-    /**
-     * Given a string, this method replaces all occurrences of '&lt;', '&gt;',
-     * '&amp;', and '"'.
-     * @param input The string to escape
-     * @return the escaped string
-     * @deprecated This method will be removed in Tomcat 9
-     */
-    @Deprecated
-    public String convertStr(String input) {
-
-        StringBuffer filtered = new StringBuffer(input.length());
-        char c;
-        for (int i = 0; i < input.length(); i++) {
-            c = input.charAt(i);
-            if (c == '<') {
-                filtered.append("&lt;");
-            } else if (c == '>') {
-                filtered.append("&gt;");
-            } else if (c == '\'') {
-                filtered.append("&apos;");
-            } else if (c == '"') {
-                filtered.append("&quot;");
-            } else if (c == '&') {
-                filtered.append("&amp;");
-            } else {
-                filtered.append(c);
-            }
-        }
-        return filtered.toString();
-    }
 
     /**
      * Is the specified property type one for which we should generate a

==================================================
JspUtil.java
index bbb97f75e5..ce6ffa7e42 100644
--- a/java/org/apache/catalina/util/RequestUtil.java
+++ b/java/org/apache/catalina/util/RequestUtil.java
@@ -26,49 +26,6 @@ import javax.servlet.http.HttpServletRequest;
  */
 public final class RequestUtil {
 
-    /**
-     * Filter the specified message string for characters that are sensitive
-     * in HTML.  This avoids potential attacks caused by including JavaScript
-     * codes in the request URL that is often reported in error messages.
-     *
-     * @param message The message string to be filtered
-     *
-     * @return the filtered message
-     *
-     * @deprecated This method will be removed in Tomcat 9
-     */
-    @Deprecated
-    public static String filter(String message) {
-
-        if (message == null) {
-            return null;
-        }
-
-        char content[] = new char[message.length()];
-        message.getChars(0, message.length(), content, 0);
-        StringBuilder result = new StringBuilder(content.length + 50);
-        for (int i = 0; i < content.length; i++) {
-            switch (content[i]) {
-            case '<':
-                result.append("&lt;");
-                break;
-            case '>':
-                result.append("&gt;");
-                break;
-            case '&':
-                result.append("&amp;");
-                break;
-            case '"':
-                result.append("&quot;");
-                break;
-            default:
-                result.append(content[i]);
-            }
-        }
-        return result.toString();
-    }
-
-
     /**
      * Build an appropriate return value for
      * {@link HttpServletRequest#getRequestURL()} based on the provided

==================================================
SecurityUtil.java
index ddab02e228..1e1528f066 100644
--- a/java/org/apache/jasper/compiler/JspUtil.java
+++ b/java/org/apache/jasper/compiler/JspUtil.java
@@ -215,37 +215,6 @@ public class JspUtil {
         // XXX *could* move EL-syntax validation here... (sb)
     }
 
-    /**
-     * Escape the 5 entities defined by XML.
-     * @param s String to escape
-     * @return XML escaped string
-     * @deprecated This method will be removed in Tomcat 9
-     */
-    @Deprecated
-    public static String escapeXml(String s) {
-        if (s == null) {
-            return null;
-        }
-        StringBuilder sb = new StringBuilder();
-        for (int i = 0; i < s.length(); i++) {
-            char c = s.charAt(i);
-            if (c == '<') {
-                sb.append("&lt;");
-            } else if (c == '>') {
-                sb.append("&gt;");
-            } else if (c == '\'') {
-                sb.append("&apos;");
-            } else if (c == '&') {
-                sb.append("&amp;");
-            } else if (c == '"') {
-                sb.append("&quot;");
-            } else {
-                sb.append(c);
-            }
-        }
-        return sb.toString();
-    }
-
     public static class ValidAttribute {
 
         private final String name;

==================================================
