682e71c6fa5d348bac5cab0f7623dd04de047d58
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60853
==================================================
Mark Thomas
==================================================
Tue Mar 21 14:13:11 2017 +0000
==================================================
AbstractProtocol.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60853
Expose the SSLHostConfig and SSLHostConfigCertificate objects via JMX.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1787973 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SSLHostConfig.java
index 84fbd155ad..02aa5ab41a 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -19,6 +19,7 @@ package org.apache.coyote;
 import java.net.InetAddress;
 import java.nio.ByteBuffer;
 import java.util.Collections;
+import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
@@ -42,6 +43,8 @@ import org.apache.tomcat.util.collections.SynchronizedStack;
 import org.apache.tomcat.util.modeler.Registry;
 import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler;
+import org.apache.tomcat.util.net.SSLHostConfig;
+import org.apache.tomcat.util.net.SSLHostConfigCertificate;
 import org.apache.tomcat.util.net.SocketEvent;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 import org.apache.tomcat.util.res.StringManager;
@@ -74,6 +77,10 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
     protected ObjectName tpOname = null;
 
 
+    private Set<ObjectName> sslOnames = new HashSet<>();
+    private Set<ObjectName> sslCertOnames = new HashSet<>();
+
+
     /**
      * Unique ID for this connector. Only used if the connector is configured
      * to use a random port as the port will change if stop(), start() is
@@ -533,7 +540,7 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
 
         if (this.domain != null) {
             try {
-                tpOname = new ObjectName(domain + ":" + "type=ThreadPool,name=" + getName());
+                tpOname = new ObjectName(domain + ":type=ThreadPool,name=" + getName());
                 Registry.getRegistry(null, null).registerComponent(endpoint, tpOname, null);
             } catch (Exception e) {
                 getLog().error(sm.getString( "abstractProtocolHandler.mbeanRegistrationFailed",
@@ -542,6 +549,22 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
             rgOname = new ObjectName(domain + ":type=GlobalRequestProcessor,name=" + getName());
             Registry.getRegistry(null, null).registerComponent(
                     getHandler().getGlobal(), rgOname, null);
+
+            for (SSLHostConfig sslHostConfig : getEndpoint().findSslHostConfigs()) {
+                ObjectName sslOname = new ObjectName(domain + ":type=SSLHostConfig,ThreadPool=" +
+                        getName() + ",name=" + sslHostConfig.getHostName());
+                Registry.getRegistry(null, null).registerComponent(sslHostConfig, sslOname, null);
+                sslOnames.add(sslOname);
+                for (SSLHostConfigCertificate sslHostConfigCert : sslHostConfig.getCertificates()) {
+                    ObjectName sslCertOname = new ObjectName(domain +
+                            ":type=SSLHostConfigCertificate,ThreadPool=" + getName() +
+                            ",Host=" + sslHostConfig.getHostName() +
+                            ",name=" + sslHostConfigCert.getType());
+                    Registry.getRegistry(null, null).registerComponent(
+                            sslHostConfigCert, sslCertOname, null);
+                    sslCertOnames.add(sslCertOname);
+                }
+            }
         }
 
         String endpointName = getName();
@@ -640,6 +663,12 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
             if (rgOname != null) {
                 Registry.getRegistry(null, null).unregisterComponent(rgOname);
             }
+            for (ObjectName oname : sslOnames) {
+                Registry.getRegistry(null, null).unregisterComponent(oname);
+            }
+            for (ObjectName oname : sslCertOnames) {
+                Registry.getRegistry(null, null).unregisterComponent(oname);
+            }
         }
     }
 

==================================================
