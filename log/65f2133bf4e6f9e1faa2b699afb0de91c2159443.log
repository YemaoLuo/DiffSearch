65f2133bf4e6f9e1faa2b699afb0de91c2159443
==================================================
Add some plumbing in preparation for wss support on the client side
==================================================
Mark Emlyn
==================================================
Mon Mar 25 23:21:34 2013 +0000
==================================================
AsyncChannelWrapper.java
Add some plumbing in preparation for wss support on the client side

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1460928 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AsyncChannelWrapperNonSecure.java
new file mode 100644
index 0000000000..64ea303dbb
--- /dev/null
+++ b/java/org/apache/tomcat/websocket/AsyncChannelWrapper.java
@@ -0,0 +1,38 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.websocket;
+
+import java.nio.ByteBuffer;
+import java.nio.channels.CompletionHandler;
+import java.util.concurrent.Future;
+import java.util.concurrent.TimeUnit;
+
+public interface AsyncChannelWrapper {
+
+    Future<Integer> read(ByteBuffer dst);
+
+    <A> void read(ByteBuffer dst, A attachment,
+            CompletionHandler<Integer,? super A> handler);
+
+    Future<Integer> write(ByteBuffer src);
+
+    <A> void write(ByteBuffer[] srcs, int offset, int length, long timeout,
+            TimeUnit unit, A attachment,
+            CompletionHandler<Long,? super A> handler);
+
+    void close();
+}

==================================================
AsyncChannelWrapperSecure.java
new file mode 100644
index 0000000000..6d4884728e
--- /dev/null
+++ b/java/org/apache/tomcat/websocket/AsyncChannelWrapperNonSecure.java
@@ -0,0 +1,67 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.websocket;
+
+import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.nio.channels.AsynchronousSocketChannel;
+import java.nio.channels.CompletionHandler;
+import java.util.concurrent.Future;
+import java.util.concurrent.TimeUnit;
+
+public class AsyncChannelWrapperNonSecure implements AsyncChannelWrapper {
+
+    private final AsynchronousSocketChannel socketChannel;
+
+    public AsyncChannelWrapperNonSecure(
+            AsynchronousSocketChannel socketChannel) {
+        this.socketChannel = socketChannel;
+    }
+
+    @Override
+    public Future<Integer> read(ByteBuffer dst) {
+        return socketChannel.read(dst);
+    }
+
+    @Override
+    public <A> void read(ByteBuffer dst, A attachment,
+            CompletionHandler<Integer,? super A> handler) {
+        socketChannel.read(dst, attachment, handler);
+    }
+
+    @Override
+    public Future<Integer> write(ByteBuffer src) {
+        return socketChannel.write(src);
+    }
+
+    @Override
+    public <A> void write(ByteBuffer[] srcs, int offset, int length,
+            long timeout, TimeUnit unit, A attachment,
+            CompletionHandler<Long,? super A> handler) {
+        socketChannel.write(
+                srcs, offset, length, timeout, unit, attachment, handler);
+    }
+
+    @Override
+    public void close() {
+        try {
+            socketChannel.close();
+        } catch (IOException e) {
+            // Ignore
+        }
+    }
+}

==================================================
SendHandlerToCompletionHandler.java
index f938332f8b..c10d924c13 100644
--- a/java/org/apache/tomcat/websocket/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/LocalStrings.properties
@@ -66,6 +66,7 @@ wsWebSocketContainer.defaultConfiguratorFaill=Failed to create the default confi
 wsWebSocketContainer.endpointCreateFail=Failed to create a local endpoint of type [{0}]
 wsWebSocketContainer.httpRequestFailed=The HTTP request to initiate the WebSocket conenction failed
 wsWebSocketContainer.invalidHeader=Unable to parse HTTP header as no colon is present to delimit header name and header value in [{0}]. The header has been skipped.
+wsWebSocketContainer.invalidScheme=The requested scheme, [{0}], is not supported. The supported schemes are ws and wss
 wsWebSocketContainer.invalidStatus=The HTTP response from the server [{0}] did not permit the HTTP upgrade to WebSocket
 wsWebSocketContainer.invalidSubProtocol=The WebSocket server returned multiple values for the Sec-WebSocket-Protocol header
 wsWebSocketContainer.maxBuffer=This implementation limits the maximum size of a buffer to Integer.MAX_VALUE

==================================================
WsFrameClient.java
new file mode 100644
index 0000000000..d910a93103
--- /dev/null
+++ b/java/org/apache/tomcat/websocket/SendHandlerToCompletionHandler.java
@@ -0,0 +1,42 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.websocket;
+
+import java.nio.channels.CompletionHandler;
+
+import javax.websocket.SendHandler;
+import javax.websocket.SendResult;
+
+public class SendHandlerToCompletionHandler
+        implements CompletionHandler<Long,Void> {
+
+    private SendHandler handler;
+
+    public SendHandlerToCompletionHandler(SendHandler handler) {
+        this.handler = handler;
+    }
+
+    @Override
+    public void completed(Long result, Void attachment) {
+        handler.onResult(new SendResult());
+    }
+
+    @Override
+    public void failed(Throwable exc, Void attachment) {
+        handler.onResult(new SendResult(exc));
+    }
+}

==================================================
WsRemoteEndpointImplClient.java
index 0ee00bef4d..a5d71b8fbd 100644
--- a/java/org/apache/tomcat/websocket/WsFrameClient.java
+++ b/java/org/apache/tomcat/websocket/WsFrameClient.java
@@ -18,7 +18,6 @@ package org.apache.tomcat.websocket;
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
-import java.nio.channels.AsynchronousSocketChannel;
 import java.nio.channels.CompletionHandler;
 
 import javax.websocket.CloseReason;
@@ -27,10 +26,10 @@ import javax.websocket.CloseReason.CloseCodes;
 public class WsFrameClient extends WsFrameBase {
 
     private final ByteBuffer response;
-    private final AsynchronousSocketChannel channel;
+    private final AsyncChannelWrapper channel;
     private final CompletionHandler<Integer,Void> handler;
 
-    public WsFrameClient(ByteBuffer response, AsynchronousSocketChannel channel,
+    public WsFrameClient(ByteBuffer response, AsyncChannelWrapper channel,
             WsSession wsSession) {
         super(wsSession);
         this.response = response;

==================================================
WsWebSocketContainer.java
index 47ba6ddcf0..2da2768f4d 100644
--- a/java/org/apache/tomcat/websocket/WsRemoteEndpointImplClient.java
+++ b/java/org/apache/tomcat/websocket/WsRemoteEndpointImplClient.java
@@ -16,20 +16,16 @@
  */
 package org.apache.tomcat.websocket;
 
-import java.io.IOException;
 import java.nio.ByteBuffer;
-import java.nio.channels.AsynchronousSocketChannel;
-import java.nio.channels.CompletionHandler;
 import java.util.concurrent.TimeUnit;
 
 import javax.websocket.SendHandler;
-import javax.websocket.SendResult;
 
 public class WsRemoteEndpointImplClient extends WsRemoteEndpointImplBase {
 
-    private final AsynchronousSocketChannel channel;
+    private final AsyncChannelWrapper channel;
 
-    public WsRemoteEndpointImplClient(AsynchronousSocketChannel channel) {
+    public WsRemoteEndpointImplClient(AsyncChannelWrapper channel) {
         this.channel = channel;
     }
 
@@ -55,31 +51,6 @@ public class WsRemoteEndpointImplClient extends WsRemoteEndpointImplBase {
 
     @Override
     protected void close() {
-        try {
-            channel.close();
-        } catch (IOException ignore) {
-            // Ignore
-        }
-    }
-
-
-    private static class SendHandlerToCompletionHandler
-            implements CompletionHandler<Long,Void> {
-
-        private SendHandler handler;
-
-        public SendHandlerToCompletionHandler(SendHandler handler) {
-            this.handler = handler;
-        }
-
-        @Override
-        public void completed(Long result, Void attachment) {
-            handler.onResult(new SendResult());
-        }
-
-        @Override
-        public void failed(Throwable exc, Void attachment) {
-            handler.onResult(new SendResult(exc));
-        }
+        channel.close();
     }
 }

==================================================
