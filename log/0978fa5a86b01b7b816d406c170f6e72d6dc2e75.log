0978fa5a86b01b7b816d406c170f6e72d6dc2e75
==================================================
Clean-up
==================================================
Mark Emlyn
==================================================
Tue Aug 31 18:25:58 2010 +0000
==================================================
AbstractHttp11Protocol.java
Clean-up

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@991281 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProtocol.java
index 884dbbb2b3..8835334b4f 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -53,7 +53,9 @@ public abstract class AbstractHttp11Protocol implements ProtocolHandler, MBeanRe
      * The adapter, used to call the connector.
      */
     protected Adapter adapter;
+    @Override
     public void setAdapter(Adapter adapter) { this.adapter = adapter; }
+    @Override
     public Adapter getAdapter() { return adapter; }
 
     
@@ -63,6 +65,7 @@ public abstract class AbstractHttp11Protocol implements ProtocolHandler, MBeanRe
     /**
      * Pass config info
      */
+    @Override
     public void setAttribute(String name, Object value) {
         if (getLog().isTraceEnabled()) {
             getLog().trace(sm.getString("http11protocol.setattribute", name, value));
@@ -70,10 +73,12 @@ public abstract class AbstractHttp11Protocol implements ProtocolHandler, MBeanRe
         attributes.put(name, value);
     }
 
+    @Override
     public Object getAttribute(String key) {
         return attributes.get(key);
     }
 
+    @Override
     public Iterator<String> getAttributeNames() {
         return attributes.keySet().iterator();
     }
@@ -116,6 +121,7 @@ public abstract class AbstractHttp11Protocol implements ProtocolHandler, MBeanRe
     }
     
     
+    @Override
     public void pause() throws Exception {
         try {
             endpoint.pause();
@@ -127,6 +133,7 @@ public abstract class AbstractHttp11Protocol implements ProtocolHandler, MBeanRe
             getLog().info(sm.getString("http11protocol.pause", getName()));
     }
 
+    @Override
     public void resume() throws Exception {
         try {
             endpoint.resume();
@@ -138,6 +145,7 @@ public abstract class AbstractHttp11Protocol implements ProtocolHandler, MBeanRe
             getLog().info(sm.getString("http11protocol.resume", getName()));
     }
 
+    @Override
     public void destroy() throws Exception {
         if(getLog().isInfoEnabled())
             getLog().info(sm.getString("http11protocol.stop", getName()));
@@ -302,6 +310,7 @@ public abstract class AbstractHttp11Protocol implements ProtocolHandler, MBeanRe
     public void setServer( String server ) { this.server = server; }
     public String getServer() { return server; }
     
+    @Override
     public Executor getExecutor() { return endpoint.getExecutor(); }
     public void setExecutor(Executor executor) { endpoint.setExecutor(executor); }
     
@@ -391,12 +400,11 @@ public abstract class AbstractHttp11Protocol implements ProtocolHandler, MBeanRe
         return endpoint.getAllowUnsafeLegacyRenegotiation();
     }
     
+    @Override
     public abstract void init() throws Exception;
-    public abstract void start() throws Exception;
     
     // -------------------- JMX related methods --------------------
 
-    // *
     protected String domain;
     protected ObjectName oname;
     protected MBeanServer mserver;
@@ -409,6 +417,7 @@ public abstract class AbstractHttp11Protocol implements ProtocolHandler, MBeanRe
         return domain;
     }
 
+    @Override
     public ObjectName preRegister(MBeanServer server,
                                   ObjectName name) throws Exception {
         oname=name;
@@ -417,13 +426,19 @@ public abstract class AbstractHttp11Protocol implements ProtocolHandler, MBeanRe
         return name;
     }
 
+    @Override
     public void postRegister(Boolean registrationDone) {
+        // NOOP
     }
 
+    @Override
     public void preDeregister() throws Exception {
+        // NOOP
     }
 
+    @Override
     public void postDeregister() {
+        // NOOP
     }
 
 

==================================================
Http11NioProtocol.java
index b09e86e510..72405cb22d 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -72,6 +72,7 @@ public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration {
 
     /** Pass config info
      */
+    @Override
     public void setAttribute( String name, Object value ) {
         if( log.isTraceEnabled())
             log.trace(sm.getString("http11protocol.setattribute", name, value));
@@ -79,12 +80,14 @@ public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration {
         attributes.put(name, value);
     }
 
+    @Override
     public Object getAttribute( String key ) {
         if( log.isTraceEnabled())
             log.trace(sm.getString("http11protocol.getattribute", key));
         return attributes.get(key);
     }
 
+    @Override
     public Iterator<String> getAttributeNames() {
         return attributes.keySet().iterator();
     }
@@ -93,12 +96,15 @@ public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration {
      * The adapter, used to call the connector.
      */
     protected Adapter adapter;
+    @Override
     public void setAdapter(Adapter adapter) { this.adapter = adapter; }
+    @Override
     public Adapter getAdapter() { return adapter; }
 
 
     /** Start the protocol
      */
+    @Override
     public void init() throws Exception {
         endpoint.setName(getName());
         endpoint.setHandler(cHandler);
@@ -117,6 +123,7 @@ public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration {
     ObjectName tpOname;
     ObjectName rgOname;
 
+    @Override
     public void start() throws Exception {
         if( this.domain != null ) {
             try {
@@ -143,6 +150,7 @@ public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration {
             log.info(sm.getString("http11protocol.start", getName()));
     }
 
+    @Override
     public void pause() throws Exception {
         try {
             endpoint.pause();
@@ -154,6 +162,7 @@ public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration {
             log.info(sm.getString("http11protocol.pause", getName()));
     }
 
+    @Override
     public void resume() throws Exception {
         try {
             endpoint.resume();
@@ -165,6 +174,7 @@ public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration {
             log.info(sm.getString("http11protocol.resume", getName()));
     }
 
+    @Override
     public void destroy() throws Exception {
         if(log.isInfoEnabled())
             log.info(sm.getString("http11protocol.stop", getName()));
@@ -200,6 +210,7 @@ public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration {
     public int getProcessorCache() { return this.processorCache; }
     public void setProcessorCache(int processorCache) { this.processorCache = processorCache; }
 
+    @Override
     public Executor getExecutor() { return endpoint.getExecutor(); }
     public void setExecutor(Executor executor) { endpoint.setExecutor(executor); }
     
@@ -521,6 +532,7 @@ public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration {
             this.proto = proto;
         }
 
+        @Override
         public SocketState event(long socket, SocketStatus status) {
             Http11AprProcessor result = connections.get(Long.valueOf(socket));
             
@@ -567,6 +579,7 @@ public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration {
             return state;
         }
         
+        @Override
         public SocketState process(long socket) {
             Http11AprProcessor processor = recycledProcessors.poll();
             try {
@@ -613,6 +626,7 @@ public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration {
             return SocketState.CLOSED;
         }
 
+        @Override
         public SocketState asyncDispatch(long socket, SocketStatus status) {
             Http11AprProcessor result = connections.get(Long.valueOf(socket));
             
@@ -730,6 +744,7 @@ public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration {
         return domain;
     }
 
+    @Override
     public ObjectName preRegister(MBeanServer server,
                                   ObjectName name) throws Exception {
         oname=name;
@@ -738,12 +753,15 @@ public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration {
         return name;
     }
 
+    @Override
     public void postRegister(Boolean registrationDone) {
     }
 
+    @Override
     public void preDeregister() throws Exception {
     }
 
+    @Override
     public void postDeregister() {
     }
 }

==================================================
Http11Protocol.java
index ba75621700..0e52c04cff 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -256,10 +256,12 @@ public class Http11NioProtocol extends AbstractHttp11Protocol {
             this.proto = proto;
         }
         
+        @Override
         public void releaseCaches() {
             recycledProcessors.clear();
         }
         
+        @Override
         public void release(SocketChannel socket) {
             if (log.isDebugEnabled()) 
                 log.debug("Iterating through our connections to release a socket channel:"+socket);
@@ -280,6 +282,7 @@ public class Http11NioProtocol extends AbstractHttp11Protocol {
                 log.debug("Done iterating through our connections to release a socket channel:"+socket +" released:"+released);
         }
         
+        @Override
         public void release(NioChannel socket) {
             Http11NioProcessor result = connections.remove(socket);
             if ( result != null ) {
@@ -288,6 +291,7 @@ public class Http11NioProtocol extends AbstractHttp11Protocol {
             }
         }
 
+        @Override
         public SocketState event(NioChannel socket, SocketStatus status) {
             Http11NioProcessor result = connections.get(socket);
             NioEndpoint.KeyAttachment att = (NioEndpoint.KeyAttachment)socket.getAttachment(false);
@@ -339,6 +343,7 @@ public class Http11NioProtocol extends AbstractHttp11Protocol {
             return state;
         }
 
+        @Override
         public SocketState process(NioChannel socket) {
             Http11NioProcessor processor = null;
             try {

==================================================
