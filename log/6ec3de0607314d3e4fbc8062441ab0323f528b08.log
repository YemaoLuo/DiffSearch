6ec3de0607314d3e4fbc8062441ab0323f528b08
==================================================
More lambda expression implementation. Handle the case of an expression without any formal parameters.
==================================================
Mark Emlyn
==================================================
Sun Jul 14 21:20:43 2013 +0000
==================================================
AstLambdaExpression.java
More lambda expression implementation. Handle the case of an expression without any formal parameters.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1503060 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AstLambdaExpressionOrInvocation.java
index d7270c5eb1..7eb53c80f0 100644
--- a/java/org/apache/el/parser/AstLambdaExpression.java
+++ b/java/org/apache/el/parser/AstLambdaExpression.java
@@ -40,7 +40,10 @@ public class AstLambdaExpression extends SimpleNode {
         AstLambdaParameters formalParameters =
                 (AstLambdaParameters) children[0];
 
-        int paramCount = formalParameters.children.length;
+        int paramCount = 0;
+        if (formalParameters.children != null) {
+            paramCount = formalParameters.children.length;
+        }
         int argCount = 0;
         if (paramValues != null) {
             argCount = paramValues.length;
@@ -52,7 +55,7 @@ public class AstLambdaExpression extends SimpleNode {
 
         // Build the argument map
         Map<String,Object> lambdaArgumnents = new HashMap<>();
-        for (int i = 0; i < formalParameters.children.length; i++) {
+        for (int i = 0; i < paramCount; i++) {
             lambdaArgumnents.put(formalParameters.children[i].getImage(),
                     paramValues[i]);
         }

==================================================
TestAstLambdaExpression.java
index d7ea8e753d..9efed1744e 100644
--- a/java/org/apache/el/parser/AstLambdaExpressionOrInvocation.java
+++ b/java/org/apache/el/parser/AstLambdaExpressionOrInvocation.java
@@ -31,19 +31,17 @@ public class AstLambdaExpressionOrInvocation extends SimpleNode {
     @Override
     public Object getValue(EvaluationContext ctx) throws ELException {
 
-        if (children.length == 2) {
-            AstLambdaExpression lambdaExpression =
-                    (AstLambdaExpression) children[0];
-
-
-            Object[] args =
-                    ((AstMethodParameters) children[1]).getParameters(ctx);
+        AstLambdaExpression lambdaExpression =
+                (AstLambdaExpression) children[0];
 
-            return lambdaExpression.invoke(ctx, null, args);
+        Object[] args;
+        if (children.length == 2) {
+            args = ((AstMethodParameters) children[1]).getParameters(ctx);
+        } else {
+            // No parameters - just the expression
+            args = null;
         }
-
-        // TODO Auto-generated method stub
-        return super.getValue(ctx);
+        return lambdaExpression.invoke(ctx, null, args);
     }
 }
 /* JavaCC - OriginalChecksum=6b3dd15b31540457a41bd55974037ed9 (do not edit this line) */

==================================================
