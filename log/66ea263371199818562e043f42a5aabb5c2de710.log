66ea263371199818562e043f42a5aabb5c2de710
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=51661
==================================================
Mark Emlyn
==================================================
Sun Aug 26 22:15:41 2012 +0000
==================================================
Constants.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=51661
Merge updates from Commons BCEL that provide the limited Java 7 support required for Tomcat's cut-down BCEL fork.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1377532 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Constant.java
index 6ea36b7a0b..5306682459 100644
--- a/java/org/apache/tomcat/util/bcel/Constants.java
+++ b/java/org/apache/tomcat/util/bcel/Constants.java
@@ -94,13 +94,23 @@ public interface Constants {
   /** Marks a constant pool entry as a name and type.  */
   public static final byte CONSTANT_NameAndType        = 12;
 
+  /** Marks a constant pool entry as a Method Handle.  */
+  public static final byte CONSTANT_MethodHandle       = 15;
+
+  /** Marks a constant pool entry as a Method Type.    */
+  public static final byte CONSTANT_MethodType         = 16;
+
+  /** Marks a constant pool entry as an Invoke Dynamic */
+  public static final byte CONSTANT_InvokeDynamic      = 18;
+
   /** The names of the types of entries in a constant pool. */
   public static final String[] CONSTANT_NAMES = {
     "", "CONSTANT_Utf8", "", "CONSTANT_Integer",
     "CONSTANT_Float", "CONSTANT_Long", "CONSTANT_Double",
     "CONSTANT_Class", "CONSTANT_String", "CONSTANT_Fieldref",
     "CONSTANT_Methodref", "CONSTANT_InterfaceMethodref",
-    "CONSTANT_NameAndType" };
+    "CONSTANT_NameAndType", "CONSTANT_MethodHandle",
+    "CONSTANT_MethodType", "CONSTANT_InvokeDynamic" };
 
   /** Java VM opcode.
    * @see <a href="http://java.sun.com/docs/books/jvms/second_edition/html/Instructions2.doc.html">Opcode definitions in The Java Virtual Machine Specification</a> */

==================================================
ConstantInvokeDynamic.java
index 1e9bf73432..23fa969138 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Constant.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Constant.java
@@ -123,6 +123,12 @@ public abstract class Constant implements Cloneable, Serializable {
                 return new ConstantNameAndType(file);
             case Constants.CONSTANT_Utf8:
                 return new ConstantUtf8(file);
+            case Constants.CONSTANT_MethodHandle:
+                return new ConstantMethodHandle(file);
+            case Constants.CONSTANT_MethodType:
+                return new ConstantMethodType(file);
+            case Constants.CONSTANT_InvokeDynamic:
+                return new ConstantInvokeDynamic(file);
             default:
                 throw new ClassFormatException("Invalid byte tag in constant pool: " + b);
         }

==================================================
ConstantMethodHandle.java
new file mode 100644
index 0000000000..bc03306b6f
--- /dev/null
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantInvokeDynamic.java
@@ -0,0 +1,95 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ */
+package org.apache.tomcat.util.bcel.classfile;
+
+import java.io.DataInput;
+import java.io.IOException;
+
+import org.apache.tomcat.util.bcel.Constants;
+
+/**
+ * This class is derived from the abstract
+ * <A HREF="org.apache.bcel.classfile.Constant.html">Constant</A> class
+ * and represents a reference to a invoke dynamic.
+ *
+ * @see     Constant
+ */
+public final class ConstantInvokeDynamic extends Constant {
+
+    private static final long serialVersionUID = 4310367359017396174L;
+    private int bootstrap_method_attr_index;
+    private int name_and_type_index;
+
+
+    /**
+     * Initialize from another object.
+     */
+    public ConstantInvokeDynamic(ConstantInvokeDynamic c) {
+        this(c.getBootstrapMethodAttrIndex(), c.getNameAndTypeIndex());
+    }
+
+
+    /**
+     * Initialize instance from file data.
+     *
+     * @param file Input stream
+     * @throws IOException
+     */
+    ConstantInvokeDynamic(DataInput file) throws IOException {
+        this(file.readUnsignedShort(), file.readUnsignedShort());
+    }
+
+
+    public ConstantInvokeDynamic(int bootstrap_method_attr_index,
+            int name_and_type_index) {
+        super(Constants.CONSTANT_InvokeDynamic);
+        this.bootstrap_method_attr_index = bootstrap_method_attr_index;
+        this.name_and_type_index = name_and_type_index;
+    }
+
+
+    public int getBootstrapMethodAttrIndex() {
+        return bootstrap_method_attr_index;
+    }
+
+
+    public void setBootstrapMethodAttrIndex(int bootstrap_method_attr_index) {
+        this.bootstrap_method_attr_index = bootstrap_method_attr_index;
+    }
+
+
+    public int getNameAndTypeIndex() {
+        return name_and_type_index;
+    }
+
+
+    public void setNameAndTypeIndex(int name_and_type_index) {
+        this.name_and_type_index = name_and_type_index;
+    }
+
+
+    /**
+     * @return String representation
+     */
+    @Override
+    public final String toString() {
+        return super.toString() + "(bootstrap_method_attr_index = " +
+                bootstrap_method_attr_index + ", name_and_type_index = " +
+                name_and_type_index + ")";
+    }
+}

==================================================
ConstantMethodType.java
new file mode 100644
index 0000000000..9ba58f38f5
--- /dev/null
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantMethodHandle.java
@@ -0,0 +1,93 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ */
+package org.apache.tomcat.util.bcel.classfile;
+
+import java.io.DataInput;
+import java.io.IOException;
+
+import org.apache.tomcat.util.bcel.Constants;
+
+/**
+ * This class is derived from the abstract
+ * <A HREF="org.apache.bcel.classfile.Constant.html">Constant</A> class
+ * and represents a reference to a method handle.
+ *
+ * @see     Constant
+ */
+public final class ConstantMethodHandle extends Constant {
+
+    private static final long serialVersionUID = -7875124116920198044L;
+    private int reference_kind;
+    private int reference_index;
+
+
+    /**
+     * Initialize from another object.
+     */
+    public ConstantMethodHandle(ConstantMethodHandle c) {
+        this(c.getReferenceKind(), c.getReferenceIndex());
+    }
+
+
+    /**
+     * Initialize instance from file data.
+     *
+     * @param file Input stream
+     * @throws IOException
+     */
+    ConstantMethodHandle(DataInput file) throws IOException {
+        this(file.readUnsignedByte(), file.readUnsignedShort());
+    }
+
+
+    public ConstantMethodHandle(int reference_kind, int reference_index) {
+        super(Constants.CONSTANT_MethodHandle);
+        this.reference_kind = reference_kind;
+        this.reference_index = reference_index;
+    }
+
+
+    public int getReferenceKind() {
+        return reference_kind;
+    }
+
+
+    public void setReferenceKind(int reference_kind) {
+        this.reference_kind = reference_kind;
+    }
+
+
+    public int getReferenceIndex() {
+        return reference_index;
+    }
+
+
+    public void setReferenceIndex(int reference_index) {
+        this.reference_index = reference_index;
+    }
+
+
+    /**
+     * @return String representation
+     */
+    @Override
+    public final String toString() {
+        return super.toString() + "(reference_kind = " + reference_kind +
+                ", reference_index = " + reference_index + ")";
+    }
+}

==================================================
