518662f604961dd6c4f84e8f1ba064a2d04d8a06
==================================================
https://issues.apache.org/bugzilla/show_bug.cgi?id=50864
==================================================
Filip Hanik
==================================================
Tue Apr 10 16:29:42 2012 +0000
==================================================
ConnectionPool.java
https://issues.apache.org/bugzilla/show_bug.cgi?id=50864
Add in the ability to configure most pool properties even while the pool is running


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1311844 13f79535-47bb-0310-9956-ffa450edef68



==================================================
PoolProperties.java
index f8ab7a4756..02ba883060 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -442,11 +442,7 @@ public class ConnectionPool {
             idle = new ArrayBlockingQueue<PooledConnection>(properties.getMaxActive(),properties.isFairQueue());
         }
 
-        //if the evictor thread is supposed to run, start it now
-        if (properties.isPoolSweeperEnabled()) {
-            poolCleaner = new PoolCleaner(this, properties.getTimeBetweenEvictionRunsMillis());
-            poolCleaner.start();
-        } //end if
+        initializePoolCleaner(properties);
 
         //create JMX MBean
         if (this.getPoolProperties().isJmxEnabled()) createMBean();
@@ -496,6 +492,15 @@ public class ConnectionPool {
     }
 
 
+    public void initializePoolCleaner(PoolConfiguration properties) {
+        //if the evictor thread is supposed to run, start it now
+        if (properties.isPoolSweeperEnabled()) {
+            poolCleaner = new PoolCleaner(this, properties.getTimeBetweenEvictionRunsMillis());
+            poolCleaner.start();
+        } //end if
+    }
+
+
 //===============================================================================
 //         CONNECTION POOLING IMPL LOGIC
 //===============================================================================

==================================================
ConnectionPool.java
index 68b11919e1..b4ca97f039 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
@@ -42,55 +42,55 @@ public class PoolProperties implements PoolConfiguration, Cloneable, Serializabl
     public static final int DEFAULT_MAX_ACTIVE = 100;
 
     protected static AtomicInteger poolCounter = new AtomicInteger(0);
-    protected Properties dbProperties = new Properties();
-    protected String url = null;
-    protected String driverClassName = null;
-    protected Boolean defaultAutoCommit = null;
-    protected Boolean defaultReadOnly = null;
-    protected int defaultTransactionIsolation = DataSourceFactory.UNKNOWN_TRANSACTIONISOLATION;
-    protected String defaultCatalog = null;
-    protected String connectionProperties;
-    protected int initialSize = 10;
-    protected int maxActive = DEFAULT_MAX_ACTIVE;
-    protected int maxIdle = maxActive;
-    protected int minIdle = initialSize;
-    protected int maxWait = 30000;
-    protected String validationQuery;
-    protected String validatorClassName;
-    protected Validator validator;
-    protected boolean testOnBorrow = false;
-    protected boolean testOnReturn = false;
-    protected boolean testWhileIdle = false;
-    protected int timeBetweenEvictionRunsMillis = 5000;
-    protected int numTestsPerEvictionRun;
-    protected int minEvictableIdleTimeMillis = 60000;
-    protected final boolean accessToUnderlyingConnectionAllowed = true;
-    protected boolean removeAbandoned = false;
-    protected int removeAbandonedTimeout = 60;
-    protected boolean logAbandoned = false;
-    protected String name = "Tomcat Connection Pool["+(poolCounter.addAndGet(1))+"-"+System.identityHashCode(PoolProperties.class)+"]";
-    protected String password;
-    protected String username;
-    protected long validationInterval = 30000;
-    protected boolean jmxEnabled = true;
-    protected String initSQL;
-    protected boolean testOnConnect =false;
-    protected String jdbcInterceptors=null;
-    protected boolean fairQueue = true;
-    protected boolean useEquals = true;
-    protected int abandonWhenPercentageFull = 0;
-    protected long maxAge = 0;
-    protected boolean useLock = false;
-    protected InterceptorDefinition[] interceptors = null;
-    protected int suspectTimeout = 0;
-    protected Object dataSource = null;
-    protected String dataSourceJNDI = null;
-    protected boolean alternateUsernameAllowed = false;
-    protected boolean commitOnReturn = false;
-    protected boolean rollbackOnReturn = false;
-    protected boolean useDisposableConnectionFacade = true;
-    protected boolean logValidationErrors = false;
-    protected boolean propagateInterruptState = false;
+    private volatile Properties dbProperties = new Properties();
+    private volatile String url = null;
+    private volatile String driverClassName = null;
+    private volatile Boolean defaultAutoCommit = null;
+    private volatile Boolean defaultReadOnly = null;
+    private volatile int defaultTransactionIsolation = DataSourceFactory.UNKNOWN_TRANSACTIONISOLATION;
+    private volatile String defaultCatalog = null;
+    private volatile String connectionProperties;
+    private volatile int initialSize = 10;
+    private volatile int maxActive = DEFAULT_MAX_ACTIVE;
+    private volatile int maxIdle = maxActive;
+    private volatile int minIdle = initialSize;
+    private volatile int maxWait = 30000;
+    private volatile String validationQuery;
+    private volatile String validatorClassName;
+    private volatile Validator validator;
+    private volatile boolean testOnBorrow = false;
+    private volatile boolean testOnReturn = false;
+    private volatile boolean testWhileIdle = false;
+    private volatile int timeBetweenEvictionRunsMillis = 5000;
+    private volatile int numTestsPerEvictionRun;
+    private volatile int minEvictableIdleTimeMillis = 60000;
+    private volatile boolean accessToUnderlyingConnectionAllowed = true;
+    private volatile boolean removeAbandoned = false;
+    private volatile int removeAbandonedTimeout = 60;
+    private volatile boolean logAbandoned = false;
+    private volatile String name = "Tomcat Connection Pool["+(poolCounter.addAndGet(1))+"-"+System.identityHashCode(PoolProperties.class)+"]";
+    private volatile String password;
+    private volatile String username;
+    private volatile long validationInterval = 30000;
+    private volatile boolean jmxEnabled = true;
+    private volatile String initSQL;
+    private volatile boolean testOnConnect =false;
+    private volatile String jdbcInterceptors=null;
+    private volatile boolean fairQueue = true;
+    private volatile boolean useEquals = true;
+    private volatile int abandonWhenPercentageFull = 0;
+    private volatile long maxAge = 0;
+    private volatile boolean useLock = false;
+    private volatile InterceptorDefinition[] interceptors = null;
+    private volatile int suspectTimeout = 0;
+    private volatile Object dataSource = null;
+    private volatile String dataSourceJNDI = null;
+    private volatile boolean alternateUsernameAllowed = false;
+    private volatile boolean commitOnReturn = false;
+    private volatile boolean rollbackOnReturn = false;
+    private volatile boolean useDisposableConnectionFacade = true;
+    private volatile boolean logValidationErrors = false;
+    private volatile boolean propagateInterruptState = false;
 
 
     /**

==================================================
