a76669c43c225a0cd61f69691ff087203d947e94
==================================================
Use foreach loops instead of while+iterator loops
==================================================
Emmanuel Bourg
==================================================
Wed May 10 08:26:05 2017 +0000
==================================================
Request.java
Use foreach loops instead of while+iterator loops

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1794684 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ApplicationContext.java
index 2bba049393..10a03442e2 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -33,7 +33,6 @@ import java.util.Collections;
 import java.util.Enumeration;
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
@@ -2882,10 +2881,7 @@ public class Request implements HttpServletRequest {
     @Override
     public Part getPart(String name) throws IOException, IllegalStateException,
             ServletException {
-        Collection<Part> c = getParts();
-        Iterator<Part> iterator = c.iterator();
-        while (iterator.hasNext()) {
-            Part part = iterator.next();
+        for (Part part : getParts()) {
             if (name.equals(part.getName())) {
                 return part;
             }

==================================================
ContainerBase.java
index fad9bfc2a9..9dfb694564 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -30,7 +30,6 @@ import java.util.Enumeration;
 import java.util.EventListener;
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -1338,16 +1337,13 @@ public class ApplicationContext implements ServletContext {
 
         // Create list of attributes to be removed
         List<String> list = new ArrayList<>();
-        Iterator<String> iter = attributes.keySet().iterator();
-        while (iter.hasNext()) {
-            list.add(iter.next());
+        for (String s : attributes.keySet()) {
+            list.add(s);
         }
 
         // Remove application originated attributes
         // (read only attributes will be left in place)
-        Iterator<String> keys = list.iterator();
-        while (keys.hasNext()) {
-            String key = keys.next();
+        for (String key : list) {
             removeAttribute(key);
         }
 

==================================================
CollectedInfo.java
index 9ca9bcdf0c..a6344afd69 100644
--- a/java/org/apache/catalina/core/ContainerBase.java
+++ b/java/org/apache/catalina/core/ContainerBase.java
@@ -23,7 +23,6 @@ import java.security.AccessController;
 import java.security.PrivilegedAction;
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.List;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.Callable;
@@ -1273,9 +1272,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
 
     public ObjectName[] getChildren() {
         List<ObjectName> names = new ArrayList<>(children.size());
-        Iterator<Container>  it = children.values().iterator();
-        while (it.hasNext()) {
-            Object next = it.next();
+        for (Container next : children.values()) {
             if (next instanceof ContainerBase) {
                 names.add(((ContainerBase)next).getObjectName());
             }

==================================================
BackupManager.java
index 3ecae4604a..6cb05c72a9 100644
--- a/java/org/apache/catalina/ha/backend/CollectedInfo.java
+++ b/java/org/apache/catalina/ha/backend/CollectedInfo.java
@@ -20,7 +20,6 @@ package org.apache.catalina.ha.backend;
 
 /* for MBean to read ready and busy */
 
-import java.util.Iterator;
 import java.util.Set;
 
 import javax.management.MBeanServer;
@@ -58,9 +57,7 @@ public class CollectedInfo {
         String onStr = "*:type=ThreadPool,*";
         ObjectName objectName = new ObjectName(onStr);
         Set<ObjectInstance> set = mBeanServer.queryMBeans(objectName, null);
-        Iterator<ObjectInstance> iterator = set.iterator();
-        while (iterator.hasNext()) {
-            ObjectInstance oi = iterator.next();
+        for (ObjectInstance oi : set) {
             objName = oi.getObjectName();
             String name = objName.getKeyProperty("name");
 

==================================================
WebappClassLoaderBase.java
index 077301721d..6716387193 100644
--- a/java/org/apache/catalina/ha/session/BackupManager.java
+++ b/java/org/apache/catalina/ha/session/BackupManager.java
@@ -17,7 +17,6 @@
 package org.apache.catalina.ha.session;
 
 import java.util.HashSet;
-import java.util.Iterator;
 import java.util.Set;
 
 import org.apache.catalina.DistributedManager;
@@ -257,9 +256,8 @@ public class BackupManager extends ClusterManagerBase
         Set<String> sessionIds = new HashSet<>();
         LazyReplicatedMap<String,Session> map =
                 (LazyReplicatedMap<String,Session>)sessions;
-        Iterator<String> keys = map.keySetFull().iterator();
-        while (keys.hasNext()) {
-            sessionIds.add(keys.next());
+        for (String id : map.keySetFull()) {
+            sessionIds.add(id);
         }
         return sessionIds;
     }

==================================================
StatusTransformer.java
index 352564fe92..e9f0213c7d 100644
--- a/java/org/apache/catalina/loader/WebappClassLoaderBase.java
+++ b/java/org/apache/catalina/loader/WebappClassLoaderBase.java
@@ -1309,9 +1309,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
         if ((pc = loaderPC.get(codeUrl)) == null) {
             pc = super.getPermissions(codeSource);
             if (pc != null) {
-                Iterator<Permission> perms = permissionList.iterator();
-                while (perms.hasNext()) {
-                    Permission p = perms.next();
+                for (Permission p : permissionList) {
                     pc.add(p);
                 }
                 loaderPC.put(codeUrl,pc);

==================================================
HTMLHostManagerServlet.java
index aa6bfa494f..85b52cf77a 100644
--- a/java/org/apache/catalina/manager/StatusTransformer.java
+++ b/java/org/apache/catalina/manager/StatusTransformer.java
@@ -710,9 +710,8 @@ public class StatusTransformer {
             Set<ObjectName> managersON =
                 mBeanServer.queryNames(queryManager, null);
             ObjectName managerON = null;
-            Iterator<ObjectName> iterator2 = managersON.iterator();
-            while (iterator2.hasNext()) {
-                managerON = iterator2.next();
+            for (ObjectName aManagersON : managersON) {
+                managerON = aManagersON;
             }
 
             ObjectName queryJspMonitor = new ObjectName
@@ -755,9 +754,7 @@ public class StatusTransformer {
             ObjectName servletObjectName = new ObjectName(onStr);
             Set<ObjectInstance> set =
                 mBeanServer.queryMBeans(servletObjectName, null);
-            Iterator<ObjectInstance> iterator = set.iterator();
-            while (iterator.hasNext()) {
-                ObjectInstance oi = iterator.next();
+            for (ObjectInstance oi : set) {
                 writeWrapper(writer, oi.getObjectName(), mBeanServer, mode);
             }
 
@@ -833,9 +830,7 @@ public class StatusTransformer {
         int jspCount = 0;
         int jspReloadCount = 0;
 
-        Iterator<ObjectName> iter = jspMonitorONs.iterator();
-        while (iter.hasNext()) {
-            ObjectName jspMonitorON = iter.next();
+        for (ObjectName jspMonitorON : jspMonitorONs) {
             Object obj = mBeanServer.getAttribute(jspMonitorON, "jspCount");
             jspCount += ((Integer) obj).intValue();
             obj = mBeanServer.getAttribute(jspMonitorON, "jspReloadCount");

==================================================
MBeanDumper.java
index 87334eb206..c764cce8b0 100644
--- a/java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java
+++ b/java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java
@@ -23,7 +23,6 @@ import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.net.URLEncoder;
 import java.text.MessageFormat;
-import java.util.Iterator;
 import java.util.Map;
 import java.util.TreeMap;
 
@@ -332,10 +331,7 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
         String hostsRemove =
             smClient.getString("htmlHostManagerServlet.hostsRemove");
 
-        Iterator<Map.Entry<String,String>> iterator =
-            sortedHostNamesMap.entrySet().iterator();
-        while (iterator.hasNext()) {
-            Map.Entry<String,String> entry = iterator.next();
+        for (Map.Entry<String, String> entry : sortedHostNamesMap.entrySet()) {
             String hostName = entry.getKey();
             Host host = (Host) engine.findChild(hostName);
 

==================================================
JAASRealm.java
index 5f95199fcd..cc0d9ce11d 100644
--- a/java/org/apache/catalina/mbeans/MBeanDumper.java
+++ b/java/org/apache/catalina/mbeans/MBeanDumper.java
@@ -17,7 +17,6 @@
 package org.apache.catalina.mbeans;
 
 import java.lang.reflect.Array;
-import java.util.Iterator;
 import java.util.Set;
 
 import javax.management.JMRuntimeException;
@@ -49,9 +48,7 @@ public class MBeanDumper {
     public static String dumpBeans(MBeanServer mbeanServer, Set<ObjectName> names)
     {
         StringBuilder buf = new StringBuilder();
-        Iterator<ObjectName> it=names.iterator();
-        while( it.hasNext()) {
-            ObjectName oname=it.next();
+        for (ObjectName oname : names) {
             buf.append("Name: ");
             buf.append(oname.toString());
             buf.append(CRLF);

==================================================
ManagerBase.java
index a372522331..2c7f309ce8 100644
--- a/java/org/apache/catalina/realm/JAASRealm.java
+++ b/java/org/apache/catalina/realm/JAASRealm.java
@@ -23,7 +23,6 @@ import java.net.URISyntaxException;
 import java.net.URL;
 import java.security.Principal;
 import java.util.ArrayList;
-import java.util.Iterator;
 import java.util.List;
 
 import javax.security.auth.Subject;
@@ -511,10 +510,7 @@ public class JAASRealm extends RealmBase {
         Principal userPrincipal = null;
 
         // Scan the Principals for this Subject
-        Iterator<Principal> principals = subject.getPrincipals().iterator();
-        while (principals.hasNext()) {
-            Principal principal = principals.next();
-
+        for (Principal principal : subject.getPrincipals()) {
             String principalClass = principal.getClass().getName();
 
             if( log.isDebugEnabled() ) {

==================================================
StandardManager.java
index 3c5ee11df4..0e17ff2281 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -25,7 +25,6 @@ import java.util.Date;
 import java.util.Deque;
 import java.util.Enumeration;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
@@ -984,11 +983,9 @@ public abstract class ManagerBase extends LifecycleMBeanBase implements Manager
         // Init
         int counter = 0;
         int result = 0;
-        Iterator<SessionTiming> iter = copy.iterator();
 
         // Calculate average
-        while (iter.hasNext()) {
-            SessionTiming timing = iter.next();
+        for (SessionTiming timing : copy) {
             if (timing != null) {
                 int timeAlive = timing.getDuration();
                 counter++;
@@ -1044,11 +1041,9 @@ public abstract class ManagerBase extends LifecycleMBeanBase implements Manager
         long oldest = now;
         int counter = 0;
         int result = 0;
-        Iterator<SessionTiming> iter = sessionTiming.iterator();
 
         // Calculate rate
-        while (iter.hasNext()) {
-            SessionTiming timing = iter.next();
+        for (SessionTiming timing : sessionTiming) {
             if (timing != null) {
                 counter++;
                 if (timing.getTimestamp() < oldest) {
@@ -1075,9 +1070,8 @@ public abstract class ManagerBase extends LifecycleMBeanBase implements Manager
      */
     public String listSessionIds() {
         StringBuilder sb = new StringBuilder();
-        Iterator<String> keys = sessions.keySet().iterator();
-        while (keys.hasNext()) {
-            sb.append(keys.next()).append(" ");
+        for (String s : sessions.keySet()) {
+            sb.append(s).append(" ");
         }
         return sb.toString();
     }

==================================================
SSIPrintenv.java
index 82de69f128..7422a8dce0 100644
--- a/java/org/apache/catalina/session/StandardManager.java
+++ b/java/org/apache/catalina/session/StandardManager.java
@@ -29,7 +29,6 @@ import java.security.AccessController;
 import java.security.PrivilegedActionException;
 import java.security.PrivilegedExceptionAction;
 import java.util.ArrayList;
-import java.util.Iterator;
 import java.util.List;
 
 import javax.servlet.ServletContext;
@@ -307,10 +306,8 @@ public class StandardManager extends ManagerBase {
                 }
                 // Write the number of active sessions, followed by the details
                 oos.writeObject(Integer.valueOf(sessions.size()));
-                Iterator<Session> elements = sessions.values().iterator();
-                while (elements.hasNext()) {
-                    StandardSession session =
-                        (StandardSession) elements.next();
+                for (Session s : sessions.values()) {
+                    StandardSession session = (StandardSession) s;
                     list.add(session);
                     session.passivate();
                     session.writeObjectData(oos);
@@ -322,9 +319,7 @@ public class StandardManager extends ManagerBase {
         if (log.isDebugEnabled()) {
             log.debug("Expiring " + list.size() + " persisted sessions");
         }
-        Iterator<StandardSession> expires = list.iterator();
-        while (expires.hasNext()) {
-            StandardSession session = expires.next();
+        for (StandardSession session : list) {
             try {
                 session.expire(false);
             } catch (Throwable t) {

==================================================
ConnectorStoreAppender.java
index c9287273f4..97470b2d69 100644
--- a/java/org/apache/catalina/ssi/SSIPrintenv.java
+++ b/java/org/apache/catalina/ssi/SSIPrintenv.java
@@ -19,7 +19,7 @@ package org.apache.catalina.ssi;
 
 import java.io.PrintWriter;
 import java.util.Collection;
-import java.util.Iterator;
+
 /**
  * Implements the Server-side #printenv command
  *
@@ -40,9 +40,7 @@ public class SSIPrintenv implements SSICommand {
             writer.write(errorMessage);
         } else {
             Collection<String> variableNames = ssiMediator.getVariableNames();
-            Iterator<String> iter = variableNames.iterator();
-            while (iter.hasNext()) {
-                String variableName = iter.next();
+            for (String variableName : variableNames) {
                 String variableValue = ssiMediator
                         .getVariableValue(variableName);
                 //This shouldn't happen, since all the variable names must

==================================================
GroupChannel.java
index cee8ccecbe..af0374ce9e 100644
--- a/java/org/apache/catalina/storeconfig/ConnectorStoreAppender.java
+++ b/java/org/apache/catalina/storeconfig/ConnectorStoreAppender.java
@@ -26,7 +26,6 @@ import java.io.PrintWriter;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 
@@ -78,9 +77,7 @@ public class ConnectorStoreAppender extends StoreAppender {
         List<String> propertyKeys = getPropertyKeys(connector);
         // Create blank instance
         Object bean2 = new Connector(protocol);//defaultInstance(bean);
-        Iterator<String> propertyIterator = propertyKeys.iterator();
-        while (propertyIterator.hasNext()) {
-            String key = propertyIterator.next();
+        for (String key : propertyKeys) {
             Object value = IntrospectionUtils.getProperty(bean, key);
             if (desc.isTransientAttribute(key)) {
                 continue; // Skip the specified exceptions

==================================================
Membership.java
index 866c26132a..95164f5a2f 100644
--- a/java/org/apache/catalina/tribes/group/GroupChannel.java
+++ b/java/org/apache/catalina/tribes/group/GroupChannel.java
@@ -186,17 +186,13 @@ public class GroupChannel extends ChannelInterceptorBase
     @Override
     public void heartbeat() {
         super.heartbeat();
-        Iterator<MembershipListener> membershipListenerIterator = membershipListeners.iterator();
-        while ( membershipListenerIterator.hasNext() ) {
-            MembershipListener listener = membershipListenerIterator.next();
+        for (MembershipListener listener : membershipListeners) {
             if ( listener instanceof Heartbeat ) ((Heartbeat)listener).heartbeat();
         }
-        Iterator<ChannelListener> channelListenerIterator = channelListeners.iterator();
-        while ( channelListenerIterator.hasNext() ) {
-            ChannelListener listener = channelListenerIterator.next();
+
+        for (ChannelListener listener : channelListeners) {
             if ( listener instanceof Heartbeat ) ((Heartbeat)listener).heartbeat();
         }
-
     }
 
 

==================================================
AbstractReplicatedMap.java
index c696834571..0bbe3a7a04 100644
--- a/java/org/apache/catalina/tribes/membership/Membership.java
+++ b/java/org/apache/catalina/tribes/membership/Membership.java
@@ -21,7 +21,6 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Comparator;
 import java.util.HashMap;
-import java.util.Iterator;
 
 import org.apache.catalina.tribes.Member;
 
@@ -209,9 +208,7 @@ public class Membership implements Cloneable {
             }
 
             ArrayList<Member> list = null;
-            Iterator<MbrEntry> i = map.values().iterator();
-            while (i.hasNext()) {
-                MbrEntry entry = i.next();
+            for (MbrEntry entry : map.values()) {
                 if (entry.hasExpired(maxtime)) {
                     if (list == null) {
                         // Only need a list when members are expired (smaller gc)

==================================================
ReplicatedMap.java
index acee1ad282..4ea22274b2 100644
--- a/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
@@ -502,12 +502,9 @@ public abstract class AbstractReplicatedMap<K,V>
      * @param complete boolean
      */
     public void replicate(boolean complete) {
-        Iterator<Map.Entry<K,MapEntry<K,V>>> i = innerMap.entrySet().iterator();
-        while (i.hasNext()) {
-            Map.Entry<?,?> e = i.next();
+        for (Entry<K, MapEntry<K, V>> e : innerMap.entrySet()) {
             replicate(e.getKey(), complete);
-        } //while
-
+        }
     }
 
     public void transferState() {
@@ -575,9 +572,7 @@ public abstract class AbstractReplicatedMap<K,V>
         if (mapmsg.getMsgType() == MapMessage.MSG_STATE || mapmsg.getMsgType() == MapMessage.MSG_STATE_COPY) {
             synchronized (stateMutex) { //make sure we dont do two things at the same time
                 ArrayList<MapMessage> list = new ArrayList<>();
-                Iterator<Map.Entry<K,MapEntry<K,V>>> i = innerMap.entrySet().iterator();
-                while (i.hasNext()) {
-                    Map.Entry<?,?> e = i.next();
+                for (Entry<K, MapEntry<K, V>> e : innerMap.entrySet()) {
                     MapEntry<K,V> entry = innerMap.get(e.getKey());
                     if ( entry != null && entry.isSerializable() ) {
                         boolean copy = (mapmsg.getMsgType() == MapMessage.MSG_STATE_COPY);
@@ -795,9 +790,7 @@ public abstract class AbstractReplicatedMap<K,V>
         }
         if ( memberAdded ) {
             synchronized (stateMutex) {
-                Iterator<Map.Entry<K,MapEntry<K,V>>> i = innerMap.entrySet().iterator();
-                while (i.hasNext()) {
-                    Map.Entry<K,MapEntry<K,V>> e = i.next();
+                for (Entry<K, MapEntry<K, V>> e : innerMap.entrySet()) {
                     MapEntry<K,V> entry = innerMap.get(e.getKey());
                     if ( entry == null ) continue;
                     if (entry.isPrimary() && (entry.getBackupNodes() == null || entry.getBackupNodes().length == 0)) {
@@ -1122,9 +1115,9 @@ public abstract class AbstractReplicatedMap<K,V>
     public void clear(boolean notify) {
         if ( notify ) {
             //only delete active keys
-            Iterator<K> keys = keySet().iterator();
-            while (keys.hasNext())
-                remove(keys.next());
+            for (K k : keySet()) {
+                remove(k);
+            }
         } else {
             innerMap.clear();
         }
@@ -1133,9 +1126,7 @@ public abstract class AbstractReplicatedMap<K,V>
     @Override
     public boolean containsValue(Object value) {
         Objects.requireNonNull(value);
-        Iterator<Map.Entry<K,MapEntry<K,V>>> i = innerMap.entrySet().iterator();
-        while (i.hasNext()) {
-            Map.Entry<K,MapEntry<K,V>> e = i.next();
+        for (Entry<K, MapEntry<K, V>> e : innerMap.entrySet()) {
             MapEntry<K,V> entry = innerMap.get(e.getKey());
             if (entry!=null && entry.isActive() && value.equals(entry.getValue())) return true;
         }
@@ -1168,9 +1159,7 @@ public abstract class AbstractReplicatedMap<K,V>
     @Override
     public Set<Map.Entry<K,V>> entrySet() {
         LinkedHashSet<Map.Entry<K,V>> set = new LinkedHashSet<>(innerMap.size());
-        Iterator<Map.Entry<K,MapEntry<K,V>>> i = innerMap.entrySet().iterator();
-        while ( i.hasNext() ) {
-            Map.Entry<?,?> e = i.next();
+        for (Entry<K, MapEntry<K, V>> e : innerMap.entrySet()) {
             Object key = e.getKey();
             MapEntry<K,V> entry = innerMap.get(key);
             if ( entry != null && entry.isActive() ) {
@@ -1185,9 +1174,7 @@ public abstract class AbstractReplicatedMap<K,V>
         //todo implement
         //should only return keys where this is active.
         LinkedHashSet<K> set = new LinkedHashSet<>(innerMap.size());
-        Iterator<Map.Entry<K,MapEntry<K,V>>> i = innerMap.entrySet().iterator();
-        while ( i.hasNext() ) {
-            Map.Entry<K,MapEntry<K,V>> e = i.next();
+        for (Entry<K, MapEntry<K, V>> e : innerMap.entrySet()) {
             K key = e.getKey();
             MapEntry<K,V> entry = innerMap.get(key);
             if ( entry!=null && entry.isActive() ) set.add(key);
@@ -1221,9 +1208,7 @@ public abstract class AbstractReplicatedMap<K,V>
     @Override
     public Collection<V> values() {
         List<V> values = new ArrayList<>();
-        Iterator<Map.Entry<K,MapEntry<K,V>>> i = innerMap.entrySet().iterator();
-        while ( i.hasNext() ) {
-            Map.Entry<K,MapEntry<K,V>> e = i.next();
+        for (Entry<K, MapEntry<K, V>> e : innerMap.entrySet()) {
             MapEntry<K,V> entry = innerMap.get(e.getKey());
             if (entry!=null && entry.isActive() && entry.getValue()!=null) values.add(entry.getValue());
         }

==================================================
NioReceiver.java
index 6ed6cccd64..d0189ef9e7 100644
--- a/java/org/apache/catalina/tribes/tipis/ReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/ReplicatedMap.java
@@ -19,7 +19,6 @@ package org.apache.catalina.tribes.tipis;
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 
@@ -189,9 +188,7 @@ public class ReplicatedMap<K,V> extends AbstractReplicatedMap<K,V> {
         if (log.isInfoEnabled())
             log.info(sm.getString("replicatedMap.member.disappeared", member));
         long start = System.currentTimeMillis();
-        Iterator<Map.Entry<K,MapEntry<K,V>>> i = innerMap.entrySet().iterator();
-        while (i.hasNext()) {
-            Map.Entry<K,MapEntry<K,V>> e = i.next();
+        for (Entry<K, MapEntry<K, V>> e : innerMap.entrySet()) {
             MapEntry<K,V> entry = innerMap.get(e.getKey());
             if (entry==null) continue;
             if (entry.isPrimary()) {
@@ -254,9 +251,7 @@ public class ReplicatedMap<K,V> extends AbstractReplicatedMap<K,V> {
         if ( memberAdded ) {
             synchronized (stateMutex) {
                 Member[] backup = getMapMembers();
-                Iterator<Map.Entry<K,MapEntry<K,V>>> i = innerMap.entrySet().iterator();
-                while (i.hasNext()) {
-                    Map.Entry<K,MapEntry<K,V>> e = i.next();
+                for (Entry<K, MapEntry<K, V>> e : innerMap.entrySet()) {
                     MapEntry<K,V> entry = innerMap.get(e.getKey());
                     if ( entry == null ) continue;
                     if (entry.isPrimary() && !inSet(member,entry.getBackupNodes())) {

==================================================
ExtensionValidator.java
index c1b1d4ea1f..25f74faa9c 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java
@@ -369,10 +369,8 @@ public class NioReceiver extends ReceiverBase implements Runnable, NioReceiverMB
         Selector selector = this.selector.getAndSet(null);
         if (selector == null) return;
         try {
-            Iterator<SelectionKey> it = selector.keys().iterator();
             // look at each key in the selected set
-            while (it.hasNext()) {
-                SelectionKey key = it.next();
+            for (SelectionKey key : selector.keys()) {
                 key.channel().close();
                 key.attach(null);
                 key.cancel();

==================================================
ManifestResource.java
index f29a242f7d..3ce787f0d5 100644
--- a/java/org/apache/catalina/util/ExtensionValidator.java
+++ b/java/org/apache/catalina/util/ExtensionValidator.java
@@ -21,7 +21,6 @@ import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.ArrayList;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
 import java.util.StringTokenizer;
@@ -210,9 +209,7 @@ public final class ExtensionValidator {
         int failureCount = 0;
         List<Extension> availableExtensions = null;
 
-        Iterator<ManifestResource> it = resources.iterator();
-        while (it.hasNext()) {
-            ManifestResource mre = it.next();
+        for (ManifestResource mre : resources) {
             ArrayList<Extension> requiredList = mre.getRequiredExtensions();
             if (requiredList == null) {
                 continue;
@@ -231,15 +228,11 @@ public final class ExtensionValidator {
             }
 
             // iterate through the list of required extensions
-            Iterator<Extension> rit = requiredList.iterator();
-            while (rit.hasNext()) {
+            for (Extension requiredExt : requiredList) {
                 boolean found = false;
-                Extension requiredExt = rit.next();
                 // check the application itself for the extension
                 if (availableExtensions != null) {
-                    Iterator<Extension> ait = availableExtensions.iterator();
-                    while (ait.hasNext()) {
-                        Extension targetExt = ait.next();
+                    for (Extension targetExt : availableExtensions) {
                         if (targetExt.isCompatibleWith(requiredExt)) {
                             requiredExt.setFulfilled(true);
                             found = true;
@@ -249,10 +242,7 @@ public final class ExtensionValidator {
                 }
                 // check the container level list for the extension
                 if (!found && containerAvailableExtensions != null) {
-                    Iterator<Extension> cit =
-                        containerAvailableExtensions.iterator();
-                    while (cit.hasNext()) {
-                        Extension targetExt = cit.next();
+                    for (Extension targetExt : containerAvailableExtensions) {
                         if (targetExt.isCompatibleWith(requiredExt)) {
                             requiredExt.setFulfilled(true);
                             found = true;
@@ -303,14 +293,10 @@ public final class ExtensionValidator {
 
         List<Extension> availableList = null;
 
-        Iterator<ManifestResource> it = resources.iterator();
-        while (it.hasNext()) {
-            ManifestResource mre = it.next();
+        for (ManifestResource mre : resources) {
             ArrayList<Extension> list = mre.getAvailableExtensions();
             if (list != null) {
-                Iterator<Extension> values = list.iterator();
-                while (values.hasNext()) {
-                    Extension ext = values.next();
+                for (Extension ext : list) {
                     if (availableList == null) {
                         availableList = new ArrayList<>();
                         availableList.add(ext);

==================================================
RewriteValve.java
index 28c35986ec..50776d2904 100644
--- a/java/org/apache/catalina/util/ManifestResource.java
+++ b/java/org/apache/catalina/util/ManifestResource.java
@@ -17,7 +17,6 @@
 package org.apache.catalina.util;
 
 import java.util.ArrayList;
-import java.util.Iterator;
 import java.util.jar.Attributes;
 import java.util.jar.Manifest;
 
@@ -107,9 +106,7 @@ public class ManifestResource {
         if (requiredExtensions == null) {
             return true;
         }
-        Iterator<Extension> it = requiredExtensions.iterator();
-        while (it.hasNext()) {
-            Extension ext = it.next();
+        for (Extension ext : requiredExtensions) {
             if (!ext.isFulfilled()) return false;
         }
         return true;

==================================================
AbstractArchiveResourceSet.java
index 9e80c4570d..d53e0e8227 100644
--- a/java/org/apache/catalina/valves/rewrite/RewriteValve.java
+++ b/java/org/apache/catalina/valves/rewrite/RewriteValve.java
@@ -27,7 +27,6 @@ import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Hashtable;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.StringTokenizer;
@@ -260,9 +259,7 @@ public class RewriteValve extends ValveBase {
     @Override
     protected synchronized void stopInternal() throws LifecycleException {
         super.stopInternal();
-        Iterator<RewriteMap> values = maps.values().iterator();
-        while (values.hasNext()) {
-            RewriteMap map = values.next();
+        for (RewriteMap map : maps.values()) {
             if (map instanceof Lifecycle) {
                 ((Lifecycle) map).stop();
             }

==================================================
Http2UpgradeHandler.java
index 195b8a8840..4f6f4a0e88 100644
--- a/java/org/apache/catalina/webresources/AbstractArchiveResourceSet.java
+++ b/java/org/apache/catalina/webresources/AbstractArchiveResourceSet.java
@@ -22,7 +22,6 @@ import java.io.InputStream;
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.Map;
 import java.util.Set;
 import java.util.jar.JarEntry;
@@ -76,9 +75,7 @@ public abstract class AbstractArchiveResourceSet extends AbstractResourceSet {
             if (pathInJar.length() > 0 && pathInJar.charAt(0) == '/') {
                 pathInJar = pathInJar.substring(1);
             }
-            Iterator<String> entries = getArchiveEntries(false).keySet().iterator();
-            while (entries.hasNext()) {
-                String name = entries.next();
+            for (String name : getArchiveEntries(false).keySet()) {
                 if (name.length() > pathInJar.length() &&
                         name.startsWith(pathInJar)) {
                     if (name.charAt(name.length() - 1) == '/') {
@@ -135,9 +132,7 @@ public abstract class AbstractArchiveResourceSet extends AbstractResourceSet {
                 }
             }
 
-            Iterator<String> entries = getArchiveEntries(false).keySet().iterator();
-            while (entries.hasNext()) {
-                String name = entries.next();
+            for (String name : getArchiveEntries(false).keySet()) {
                 if (name.length() > pathInJar.length() &&
                         name.startsWith(pathInJar)) {
                     int nextSlash = name.indexOf('/', pathInJar.length());

==================================================
JspC.java
index 0f7d33fbf1..53319f14ec 100644
--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java
@@ -999,9 +999,7 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
         TreeSet<Integer> candidatesStepTwo = new TreeSet<>();
         TreeSet<Integer> candidatesStepThree = new TreeSet<>();
 
-        Iterator<Entry<Integer,Stream>> entryIter = streams.entrySet().iterator();
-        while (entryIter.hasNext()) {
-            Entry<Integer,Stream> entry = entryIter.next();
+        for (Entry<Integer, Stream> entry : streams.entrySet()) {
             Stream stream = entry.getValue();
             // Never remove active streams
             if (stream.isActive()) {
@@ -1022,9 +1020,7 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
         }
 
         // Process the step one list
-        Iterator<Integer> stepOneIter = candidatesStepOne.iterator();
-        while (stepOneIter.hasNext()) {
-            Integer streamIdToRemove = stepOneIter.next();
+        for (Integer streamIdToRemove : candidatesStepOne) {
             // Remove this childless stream
             Stream removedStream = streams.remove(streamIdToRemove);
             removedStream.detachFromParent();
@@ -1050,9 +1046,7 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
         }
 
         // Process the P2 list
-        Iterator<Integer> stepTwoIter = candidatesStepTwo.iterator();
-        while (stepTwoIter.hasNext()) {
-            Integer streamIdToRemove = stepTwoIter.next();
+        for (Integer streamIdToRemove : candidatesStepTwo) {
             removeStreamFromPriorityTree(streamIdToRemove);
             toClose--;
             if (log.isDebugEnabled()) {

==================================================
Compiler.java
index 382b2e6999..9a096ace05 100644
--- a/java/org/apache/jasper/JspC.java
+++ b/java/org/apache/jasper/JspC.java
@@ -34,7 +34,6 @@ import java.net.URLClassLoader;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -1390,9 +1389,7 @@ public class JspC extends Task implements Options {
 
             initWebXml();
 
-            Iterator<String> iter = pages.iterator();
-            while (iter.hasNext()) {
-                String nextjsp = iter.next();
+            for (String nextjsp : pages) {
                 File fjsp = new File(nextjsp);
                 if (!fjsp.isAbsolute()) {
                     fjsp = new File(uriRootF, nextjsp);

==================================================
ELNode.java
index 2da20fb29c..b24fae2fa7 100644
--- a/java/org/apache/jasper/compiler/Compiler.java
+++ b/java/org/apache/jasper/compiler/Compiler.java
@@ -26,7 +26,6 @@ import java.io.UnsupportedEncodingException;
 import java.net.JarURLConnection;
 import java.net.URL;
 import java.net.URLConnection;
-import java.util.Iterator;
 import java.util.Map;
 import java.util.Map.Entry;
 
@@ -491,9 +490,7 @@ public abstract class Compiler {
             return false;
         }
 
-        Iterator<Entry<String,Long>> it = depends.entrySet().iterator();
-        while (it.hasNext()) {
-            Entry<String,Long> include = it.next();
+        for (Entry<String, Long> include : depends.entrySet()) {
             try {
                 String key = include.getKey();
                 URL includeUrl;

==================================================
Generator.java
index baad450f39..6051456c60 100644
--- a/java/org/apache/jasper/compiler/ELNode.java
+++ b/java/org/apache/jasper/compiler/ELNode.java
@@ -207,9 +207,7 @@ abstract class ELNode {
          * @throws JasperException if an error occurs while visiting a node
          */
         public void visit(Visitor v) throws JasperException {
-            Iterator<ELNode> iter = list.iterator();
-            while (iter.hasNext()) {
-                ELNode n = iter.next();
+            for (ELNode n : list) {
                 n.accept(v);
             }
         }
@@ -226,9 +224,7 @@ abstract class ELNode {
          * @return true if the expression contains a ${...}
          */
         public boolean containsEL() {
-            Iterator<ELNode> iter = list.iterator();
-            while (iter.hasNext()) {
-                ELNode n = iter.next();
+            for (ELNode n : list) {
                 if (n instanceof Root) {
                     return true;
                 }

==================================================
JspConfig.java
index c5c5acb110..ce29953a8e 100644
--- a/java/org/apache/jasper/compiler/Generator.java
+++ b/java/org/apache/jasper/compiler/Generator.java
@@ -33,7 +33,6 @@ import java.util.Enumeration;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Hashtable;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -571,10 +570,9 @@ class Generator {
      * generation)
      */
     private void genPreambleImports() {
-        Iterator<String> iter = pageInfo.getImports().iterator();
-        while (iter.hasNext()) {
+        for (String i : pageInfo.getImports()) {
             out.printin("import ");
-            out.print(iter.next());
+            out.print(i);
             out.println(";");
         }
 
@@ -601,9 +599,7 @@ class Generator {
             out.printin("_jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(");
             out.print("" + dependants.size());
             out.println(");");
-            Iterator<Entry<String,Long>> iter = dependants.entrySet().iterator();
-            while (iter.hasNext()) {
-                Entry<String,Long> entry = iter.next();
+            for (Entry<String, Long> entry : dependants.entrySet()) {
                 out.printin("_jspx_dependants.put(\"");
                 out.print(entry.getKey());
                 out.print("\", Long.valueOf(");

==================================================
JspDocumentParser.java
index e4092d4efb..6493c12699 100644
--- a/java/org/apache/jasper/compiler/JspConfig.java
+++ b/java/org/apache/jasper/compiler/JspConfig.java
@@ -19,7 +19,6 @@ package org.apache.jasper.compiler;
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Iterator;
 import java.util.Vector;
 
 import javax.servlet.ServletContext;
@@ -255,10 +254,7 @@ public class JspConfig {
         JspPropertyGroup bufferMatch = null;
         JspPropertyGroup errorOnUndeclaredNamespaceMatch = null;
 
-        Iterator<JspPropertyGroup> iter = jspProperties.iterator();
-        while (iter.hasNext()) {
-
-            JspPropertyGroup jpg = iter.next();
+        for (JspPropertyGroup jpg : jspProperties) {
             JspProperty jp = jpg.getJspProperty();
 
             // (arrays will be the same length)
@@ -404,10 +400,7 @@ public class JspConfig {
             uriExtension = uri.substring(index+1);
         }
 
-        Iterator<JspPropertyGroup> iter = jspProperties.iterator();
-        while (iter.hasNext()) {
-
-            JspPropertyGroup jpg = iter.next();
+        for (JspPropertyGroup jpg : jspProperties) {
 
             String extension = jpg.getExtension();
             String path = jpg.getPath();

==================================================
JspRuntimeContext.java
index add6535f69..11d43f103d 100644
--- a/java/org/apache/jasper/compiler/JspDocumentParser.java
+++ b/java/org/apache/jasper/compiler/JspDocumentParser.java
@@ -21,7 +21,6 @@ import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.security.AccessController;
 import java.util.Collection;
-import java.util.Iterator;
 
 import javax.servlet.jsp.tagext.TagFileInfo;
 import javax.servlet.jsp.tagext.TagInfo;
@@ -239,14 +238,12 @@ class JspDocumentParser
      */
     private void addInclude(Node parent, Collection<String> files) throws SAXException {
         if (files != null) {
-            Iterator<String> iter = files.iterator();
-            while (iter.hasNext()) {
-                String file = iter.next();
+            for (String file : files) {
                 AttributesImpl attrs = new AttributesImpl();
                 attrs.addAttribute("", "file", "file", "CDATA", file);
 
                 // Create a dummy Include directive node
-                    Node includeDir =
+                Node includeDir =
                         new Node.IncludeDirective(attrs, null, // XXX
     parent);
                 processIncludeDirective(file, includeDir);

==================================================
Node.java
index 1b6e32ecfe..d01c5a1a17 100644
--- a/java/org/apache/jasper/compiler/JspRuntimeContext.java
+++ b/java/org/apache/jasper/compiler/JspRuntimeContext.java
@@ -28,7 +28,6 @@ import java.security.CodeSource;
 import java.security.PermissionCollection;
 import java.security.Policy;
 import java.security.cert.Certificate;
-import java.util.Iterator;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -283,9 +282,8 @@ public final class JspRuntimeContext {
      * Process a "destroy" event for this web application context.
      */
     public void destroy() {
-        Iterator<JspServletWrapper> servlets = jsps.values().iterator();
-        while (servlets.hasNext()) {
-            servlets.next().destroy();
+        for (JspServletWrapper jspServletWrapper : jsps.values()) {
+            jspServletWrapper.destroy();
         }
     }
 

==================================================
PageDataImpl.java
index 01b6f50e00..687b19c663 100644
--- a/java/org/apache/jasper/compiler/Node.java
+++ b/java/org/apache/jasper/compiler/Node.java
@@ -17,7 +17,6 @@
 package org.apache.jasper.compiler;
 
 import java.util.ArrayList;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Vector;
 
@@ -2386,9 +2385,7 @@ abstract class Node implements TagConstants {
          * @throws JasperException if an error occurs while visiting a node
          */
         public void visit(Visitor v) throws JasperException {
-            Iterator<Node> iter = list.iterator();
-            while (iter.hasNext()) {
-                Node n = iter.next();
+            for (Node n : list) {
                 n.accept(v);
             }
         }

==================================================
Parser.java
index 1240622d46..b6183b6bb0 100644
--- a/java/org/apache/jasper/compiler/PageDataImpl.java
+++ b/java/org/apache/jasper/compiler/PageDataImpl.java
@@ -20,7 +20,6 @@ import java.io.ByteArrayInputStream;
 import java.io.CharArrayWriter;
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;
-import java.util.ListIterator;
 
 import javax.servlet.jsp.tagext.PageData;
 
@@ -552,15 +551,14 @@ class PageDataImpl extends PageData implements TagConstants {
             if (n.getImports().size() > 0) {
                 // Concatenate names of imported classes/packages
                 boolean first = true;
-                ListIterator<String> iter = n.getImports().listIterator();
-                while (iter.hasNext()) {
+                for (String i : n.getImports()) {
                     if (first) {
                         first = false;
                         buf.append("  import=\"");
                     } else {
                         buf.append(",");
                     }
-                    buf.append(JspUtil.getExprInXml(iter.next()));
+                    buf.append(JspUtil.getExprInXml(i));
                 }
                 buf.append("\"\n");
             }

==================================================
SmapUtil.java
index ec7cc41298..9de1f1e2b4 100644
--- a/java/org/apache/jasper/compiler/Parser.java
+++ b/java/org/apache/jasper/compiler/Parser.java
@@ -19,7 +19,6 @@ package org.apache.jasper.compiler;
 import java.io.CharArrayWriter;
 import java.io.FileNotFoundException;
 import java.util.Collection;
-import java.util.Iterator;
 
 import javax.servlet.jsp.tagext.TagAttributeInfo;
 import javax.servlet.jsp.tagext.TagFileInfo;
@@ -387,9 +386,7 @@ class Parser implements TagConstants {
      */
     private void addInclude(Node parent, Collection<String> files) throws JasperException {
         if (files != null) {
-            Iterator<String> iter = files.iterator();
-            while (iter.hasNext()) {
-                String file = iter.next();
+            for (String file : files) {
                 AttributesImpl attrs = new AttributesImpl();
                 attrs.addAttribute("", "file", "file", "CDATA", file);
 

==================================================
TagFileProcessor.java
index 9f4e926aca..43a8ce5861 100644
--- a/java/org/apache/jasper/compiler/SmapUtil.java
+++ b/java/org/apache/jasper/compiler/SmapUtil.java
@@ -27,7 +27,6 @@ import java.io.PrintWriter;
 import java.io.UnsupportedEncodingException;
 import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.Map;
 
 import org.apache.jasper.JasperException;
@@ -124,9 +123,7 @@ public class SmapUtil {
         smapInfo[1] = g.getString();
 
         int count = 2;
-        Iterator<Map.Entry<String,SmapStratum>> iter = map.entrySet().iterator();
-        while (iter.hasNext()) {
-            Map.Entry<String,SmapStratum> entry = iter.next();
+        for (Map.Entry<String, SmapStratum> entry : map.entrySet()) {
             String innerClass = entry.getKey();
             s = entry.getValue();
             s.optimizeLineSection();

==================================================
JspContextWrapper.java
index 77fd293f88..7eb527ffda 100644
--- a/java/org/apache/jasper/compiler/TagFileProcessor.java
+++ b/java/org/apache/jasper/compiler/TagFileProcessor.java
@@ -19,7 +19,6 @@ package org.apache.jasper.compiler;
 
 import java.io.IOException;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Vector;
@@ -596,10 +595,8 @@ class TagFileProcessor {
                     try {
                         Object tagIns = tagClazz.newInstance();
                         if (tagIns instanceof JspSourceDependent) {
-                            Iterator<Entry<String,Long>> iter = ((JspSourceDependent)
-                                    tagIns).getDependants().entrySet().iterator();
-                            while (iter.hasNext()) {
-                                Entry<String,Long> entry = iter.next();
+                            for (Entry<String, Long> entry : ((JspSourceDependent)
+                                    tagIns).getDependants().entrySet()) {
                                 parentPageInfo.addDependant(entry.getKey(),
                                         entry.getValue());
                             }
@@ -703,9 +700,7 @@ class TagFileProcessor {
      *            If non-null, remove only the class file with with this name.
      */
     public void removeProtoTypeFiles(String classFileName) {
-        Iterator<Compiler> iter = tempVector.iterator();
-        while (iter.hasNext()) {
-            Compiler c = iter.next();
+        for (Compiler c : tempVector) {
             if (classFileName == null) {
                 c.removeGeneratedClassFiles();
             } else if (classFileName.equals(c.getCompilationContext()

==================================================
ServiceRefFactory.java
index 5197ea0e61..765edf378b 100644
--- a/java/org/apache/jasper/runtime/JspContextWrapper.java
+++ b/java/org/apache/jasper/runtime/JspContextWrapper.java
@@ -454,9 +454,7 @@ public class JspContextWrapper extends PageContext implements VariableResolver {
      */
     private void saveNestedVariables() {
         if (nestedVars != null) {
-            Iterator<String> iter = nestedVars.iterator();
-            while (iter.hasNext()) {
-                String varName = iter.next();
+            for (String varName : nestedVars) {
                 varName = findAlias(varName);
                 Object obj = invokingJspCtxt.getAttribute(varName);
                 if (obj != null) {
@@ -471,9 +469,7 @@ public class JspContextWrapper extends PageContext implements VariableResolver {
      */
     private void restoreNestedVariables() {
         if (nestedVars != null) {
-            Iterator<String> iter = nestedVars.iterator();
-            while (iter.hasNext()) {
-                String varName = iter.next();
+            for (String varName : nestedVars) {
                 varName = findAlias(varName);
                 Object obj = originalNestedVars.get(varName);
                 if (obj != null) {

==================================================
Txt2Html.java
index f15bae7d74..8b960e4c11 100644
--- a/java/org/apache/naming/factory/webservices/ServiceRefFactory.java
+++ b/java/org/apache/naming/factory/webservices/ServiceRefFactory.java
@@ -181,11 +181,10 @@ public class ServiceRefFactory implements ObjectFactory {
                     Method m = serviceInterfaceClass.getMethod("setEndpointAddress",
                             new Class[] { java.lang.String.class,
                             java.lang.String.class });
-                    for (Iterator<String> i = ports.keySet().iterator(); i.hasNext();) {
-                        String portName = i.next();
+                    for (String portName : ports.keySet()) {
                         Port port = wsdlservice.getPort(portName);
                         String endpoint = getSOAPLocation(port);
-                        m.invoke(service, new Object[] {port.getName(), endpoint });
+                        m.invoke(service, new Object[]{port.getName(), endpoint});
                         portComponentRef.put(endpoint, new QName(port.getName()));
                     }
                 } catch (Exception e) {
@@ -301,10 +300,10 @@ public class ServiceRefFactory implements ObjectFactory {
                     handlerInfo.setHandlerConfig(config);
 
                     if (!portNames.isEmpty()) {
-                        Iterator<String> iter = portNames.iterator();
-                        while (iter.hasNext())
-                            initHandlerChain(new QName(iter.next()), handlerRegistry,
+                        for (String portName : portNames) {
+                            initHandlerChain(new QName(portName), handlerRegistry,
                                     handlerInfo, soaproles);
+                        }
                     } else {
                         Enumeration<QName> e = portComponentRef.elements();
                         while(e.hasMoreElements())
@@ -330,9 +329,7 @@ public class ServiceRefFactory implements ObjectFactory {
         String endpoint = null;
         @SuppressWarnings("unchecked")
         List<ExtensibilityElement> extensions = port.getExtensibilityElements();
-        for (Iterator<ExtensibilityElement> i = extensions.iterator();
-                i.hasNext();) {
-            ExtensibilityElement ext = i.next();
+        for (ExtensibilityElement ext : extensions) {
             if (ext instanceof SOAPAddress) {
                 SOAPAddress addr = (SOAPAddress) ext;
                 endpoint = addr.getLocationURI();

==================================================
DelegatingConnection.java
index 6ba82a8dc6..40b848490d 100644
--- a/java/org/apache/tomcat/buildutil/Txt2Html.java
+++ b/java/org/apache/tomcat/buildutil/Txt2Html.java
@@ -25,7 +25,6 @@ import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
-import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
 
@@ -97,9 +96,7 @@ public class Txt2Html
         int count = 0;
 
         // Step through each file and convert.
-        Iterator<FileSet> iter = filesets.iterator();
-        while( iter.hasNext() ) {
-            FileSet fs = iter.next();
+        for (FileSet fs : filesets) {
             DirectoryScanner ds = fs.getDirectoryScanner(getProject());
             File basedir = ds.getBasedir();
             String[] files = ds.getIncludedFiles();

==================================================
InstanceKeyDataSourceFactory.java
index 3a19a7d594..3668f846fe 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/DelegatingConnection.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/DelegatingConnection.java
@@ -35,7 +35,6 @@ import java.sql.Savepoint;
 import java.sql.Statement;
 import java.sql.Struct;
 import java.util.Collections;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
@@ -634,9 +633,7 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         // DBCP-288. Not all the traced objects will be statements
         final List<AbandonedTrace> traces = getTrace();
         if(traces != null && traces.size() > 0) {
-            final Iterator<AbandonedTrace> traceIter = traces.iterator();
-            while (traceIter.hasNext()) {
-                final Object trace = traceIter.next();
+            for (AbandonedTrace trace : traces) {
                 if (trace instanceof Statement) {
                     ((Statement) trace).close();
                 } else if (trace instanceof ResultSet) {

==================================================
PoolUtils.java
index 393eeae1ea..df8ff034cc 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/datasources/InstanceKeyDataSourceFactory.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/datasources/InstanceKeyDataSourceFactory.java
@@ -20,7 +20,6 @@ import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.util.Hashtable;
-import java.util.Iterator;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Properties;
@@ -45,9 +44,7 @@ abstract class InstanceKeyDataSourceFactory implements ObjectFactory {
 
     static synchronized String registerNewInstance(final InstanceKeyDataSource ds) {
         int max = 0;
-        final Iterator<String> i = instanceMap.keySet().iterator();
-        while (i.hasNext()) {
-            final String s = i.next();
+        for (String s : instanceMap.keySet()) {
             if (s != null) {
                 try {
                     max = Math.max(max, Integer.parseInt(s));
@@ -75,10 +72,8 @@ abstract class InstanceKeyDataSourceFactory implements ObjectFactory {
      */
     public static void closeAll() throws Exception {
         //Get iterator to loop over all instances of this datasource.
-        final Iterator<Entry<String,InstanceKeyDataSource>> instanceIterator =
-            instanceMap.entrySet().iterator();
-        while (instanceIterator.hasNext()) {
-            instanceIterator.next().getValue().close();
+        for (Entry<String, InstanceKeyDataSource> stringInstanceKeyDataSourceEntry : instanceMap.entrySet()) {
+            stringInstanceKeyDataSourceEntry.getValue().close();
         }
         instanceMap.clear();
     }

==================================================
GenericKeyedObjectPool.java
index cf593d279f..2c7f3195fc 100644
--- a/java/org/apache/tomcat/dbcp/pool2/PoolUtils.java
+++ b/java/org/apache/tomcat/dbcp/pool2/PoolUtils.java
@@ -19,7 +19,6 @@ package org.apache.tomcat.dbcp.pool2;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.Map;
 import java.util.NoSuchElementException;
 import java.util.Timer;
@@ -191,9 +190,7 @@ public final class PoolUtils {
             throw new IllegalArgumentException("keys must not be null.");
         }
         final Map<K, TimerTask> tasks = new HashMap<>(keys.size());
-        final Iterator<K> iter = keys.iterator();
-        while (iter.hasNext()) {
-            final K key = iter.next();
+        for (K key : keys) {
             final TimerTask task = checkMinIdle(keyedPool, key, minIdle, period);
             tasks.put(key, task);
         }
@@ -283,9 +280,8 @@ public final class PoolUtils {
         if (keys == null) {
             throw new IllegalArgumentException("keys must not be null.");
         }
-        final Iterator<K> iter = keys.iterator();
-        while (iter.hasNext()) {
-            prefill(keyedPool, iter.next(), count);
+        for (K key : keys) {
+            prefill(keyedPool, key, count);
         }
     }
 

==================================================
GenericObjectPool.java
index 9f7429ddce..addd920064 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/GenericKeyedObjectPool.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/GenericKeyedObjectPool.java
@@ -607,10 +607,8 @@ public class GenericKeyedObjectPool<K,T> extends BaseGenericObjectPool<T>
      */
     @Override
     public void clear() {
-        final Iterator<K> iter = poolMap.keySet().iterator();
-
-        while (iter.hasNext()) {
-            clear(iter.next());
+        for (K k : poolMap.keySet()) {
+            clear(k);
         }
     }
 
@@ -716,9 +714,8 @@ public class GenericKeyedObjectPool<K,T> extends BaseGenericObjectPool<T>
             jmxUnregister();
 
             // Release any threads that were waiting for an object
-            final Iterator<ObjectDeque<T>> iter = poolMap.values().iterator();
-            while (iter.hasNext()) {
-                iter.next().getIdleObjects().interuptTakeWaiters();
+            for (ObjectDeque<T> deque : poolMap.values()) {
+                deque.getIdleObjects().interuptTakeWaiters();
             }
             // This clear cleans up the keys now any waiting threads have been
             // interrupted
@@ -1347,9 +1344,7 @@ public class GenericKeyedObjectPool<K,T> extends BaseGenericObjectPool<T>
     public Map<String,Integer> getNumActivePerKey() {
         final HashMap<String,Integer> result = new HashMap<>();
 
-        final Iterator<Entry<K,ObjectDeque<T>>> iter = poolMap.entrySet().iterator();
-        while (iter.hasNext()) {
-            final Entry<K,ObjectDeque<T>> entry = iter.next();
+        for (Entry<K, ObjectDeque<T>> entry : poolMap.entrySet()) {
             if (entry != null) {
                 final K key = entry.getKey();
                 final ObjectDeque<T> objectDequeue = entry.getValue();
@@ -1376,11 +1371,10 @@ public class GenericKeyedObjectPool<K,T> extends BaseGenericObjectPool<T>
         int result = 0;
 
         if (getBlockWhenExhausted()) {
-            final Iterator<ObjectDeque<T>> iter = poolMap.values().iterator();
 
-            while (iter.hasNext()) {
+            for (ObjectDeque<T> deque : poolMap.values()) {
                 // Assume no overflow
-                result += iter.next().getIdleObjects().getTakeQueueLength();
+                result += deque.getIdleObjects().getTakeQueueLength();
             }
         }
 

==================================================
SoftReferenceObjectPool.java
index 980aa8a93b..823ceb67ed 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/GenericObjectPool.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/GenericObjectPool.java
@@ -18,7 +18,6 @@ package org.apache.tomcat.dbcp.pool2.impl;
 
 import java.util.ArrayList;
 import java.util.HashSet;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.NoSuchElementException;
@@ -1035,9 +1034,7 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
         final long timeout =
                 now - (ac.getRemoveAbandonedTimeout() * 1000L);
         final List<PooledObject<T>> remove = new ArrayList<>();
-        final Iterator<PooledObject<T>> it = allObjects.values().iterator();
-        while (it.hasNext()) {
-            final PooledObject<T> pooledObject = it.next();
+        for (PooledObject<T> pooledObject : allObjects.values()) {
             synchronized (pooledObject) {
                 if (pooledObject.getState() == PooledObjectState.ALLOCATED &&
                         pooledObject.getLastUsedTime() <= timeout) {
@@ -1048,9 +1045,7 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
         }
 
         // Now remove the abandoned objects
-        final Iterator<PooledObject<T>> itr = remove.iterator();
-        while (itr.hasNext()) {
-            final PooledObject<T> pooledObject = itr.next();
+        for (PooledObject<T> pooledObject : remove) {
             if (ac.getLogAbandoned()) {
                 pooledObject.printStackTrace(ac.getLogWriter());
             }

==================================================
SecurityConstraint.java
index c89864780e..3033033046 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/SoftReferenceObjectPool.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/SoftReferenceObjectPool.java
@@ -327,10 +327,8 @@ public class SoftReferenceObjectPool<T> extends BaseObjectPool<T> {
     @Override
     public synchronized void clear() {
         if (null != factory) {
-            final Iterator<PooledSoftReference<T>> iter = idleReferences.iterator();
-            while (iter.hasNext()) {
+            for (PooledSoftReference<T> ref : idleReferences) {
                 try {
-                    final PooledSoftReference<T> ref = iter.next();
                     if (null != ref.getObject()) {
                         factory.destroyObject(ref);
                     }
@@ -385,9 +383,7 @@ public class SoftReferenceObjectPool<T> extends BaseObjectPool<T> {
      * @return PooledSoftReference wrapping a soft reference to obj
      */
     private PooledSoftReference<T> findReference(final T obj) {
-        final Iterator<PooledSoftReference<T>> iterator = allReferences.iterator();
-        while (iterator.hasNext()) {
-            final PooledSoftReference<T> reference = iterator.next();
+        for (PooledSoftReference<T> reference : allReferences) {
             if (reference.getObject() != null && reference.getObject().equals(obj)) {
                 return reference;
             }

==================================================
Digester.java
index c63b386628..fc6b41c5dc 100644
--- a/java/org/apache/tomcat/util/descriptor/web/SecurityConstraint.java
+++ b/java/org/apache/tomcat/util/descriptor/web/SecurityConstraint.java
@@ -22,7 +22,6 @@ import java.util.Arrays;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -550,9 +549,7 @@ public class SecurityConstraint extends XmlEncodingBase implements Serializable
         // Add the per method constraints
         Collection<HttpMethodConstraintElement> methods =
             element.getHttpMethodConstraints();
-        Iterator<HttpMethodConstraintElement> methodIter = methods.iterator();
-        while (methodIter.hasNext()) {
-            HttpMethodConstraintElement methodElement = methodIter.next();
+        for (HttpMethodConstraintElement methodElement : methods) {
             SecurityConstraint constraint =
                 createConstraint(methodElement, urlPattern, true);
             // There will always be a single collection
@@ -566,9 +563,8 @@ public class SecurityConstraint extends XmlEncodingBase implements Serializable
         if (constraint != null) {
             // There will always be a single collection
             SecurityCollection collection = constraint.findCollections()[0];
-            Iterator<String> ommittedMethod = element.getMethodNames().iterator();
-            while (ommittedMethod.hasNext()) {
-                collection.addOmittedMethod(ommittedMethod.next());
+            for (String name : element.getMethodNames()) {
+                collection.addOmittedMethod(name);
             }
 
             result.add(constraint);

==================================================
RulesBase.java
index c3f29231b9..b0e4b4dc57 100644
--- a/java/org/apache/tomcat/util/digester/Digester.java
+++ b/java/org/apache/tomcat/util/digester/Digester.java
@@ -27,7 +27,6 @@ import java.net.URISyntaxException;
 import java.security.Permission;
 import java.util.EmptyStackException;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.PropertyPermission;
@@ -827,9 +826,7 @@ public class Digester extends DefaultHandler2 {
         }
 
         // Fire "finish" events for all defined rules
-        Iterator<Rule> rules = getRules().rules().iterator();
-        while (rules.hasNext()) {
-            Rule rule = rules.next();
+        for (Rule rule : getRules().rules()) {
             try {
                 rule.finish();
             } catch (Exception e) {

==================================================
BaseNotificationBroadcaster.java
index ccf2958877..544c7dc388 100644
--- a/java/org/apache/tomcat/util/digester/RulesBase.java
+++ b/java/org/apache/tomcat/util/digester/RulesBase.java
@@ -21,7 +21,6 @@ package org.apache.tomcat.util.digester;
 
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.List;
 
 
@@ -99,9 +98,7 @@ public class RulesBase implements Rules {
     public void setDigester(Digester digester) {
 
         this.digester = digester;
-        Iterator<Rule> items = rules.iterator();
-        while (items.hasNext()) {
-            Rule item = items.next();
+        for (Rule item : rules) {
             item.setDigester(digester);
         }
 
@@ -200,9 +197,7 @@ public class RulesBase implements Rules {
         if ((rulesList == null) || (rulesList.size() < 1)) {
             // Find the longest key, ie more discriminant
             String longKey = "";
-            Iterator<String> keys = this.cache.keySet().iterator();
-            while (keys.hasNext()) {
-                String key = keys.next();
+            for (String key : this.cache.keySet()) {
                 if (key.startsWith("*/")) {
                     if (pattern.equals(key.substring(2)) ||
                         pattern.endsWith(key.substring(1))) {
@@ -260,9 +255,7 @@ public class RulesBase implements Rules {
 
         // Select only Rules that match on the specified namespace URI
         List<Rule> results = new ArrayList<>();
-        Iterator<Rule> items = list.iterator();
-        while (items.hasNext()) {
-            Rule item = items.next();
+        for (Rule item : list) {
             if ((namespaceURI.equals(item.getNamespaceURI())) ||
                     (item.getNamespaceURI() == null)) {
                 results.add(item);

==================================================
Registry.java
index f9f9af5f34..7566bb3da0 100644
--- a/java/org/apache/tomcat/util/modeler/BaseNotificationBroadcaster.java
+++ b/java/org/apache/tomcat/util/modeler/BaseNotificationBroadcaster.java
@@ -82,10 +82,7 @@ public class BaseNotificationBroadcaster implements NotificationBroadcaster {
             // Optimization to coalesce attribute name filters
             if (filter instanceof BaseAttributeFilter) {
                 BaseAttributeFilter newFilter = (BaseAttributeFilter) filter;
-                Iterator<BaseNotificationBroadcasterEntry> items =
-                    entries.iterator();
-                while (items.hasNext()) {
-                    BaseNotificationBroadcasterEntry item = items.next();
+                for (BaseNotificationBroadcasterEntry item : entries) {
                     if ((item.listener == listener) &&
                         (item.filter != null) &&
                         (item.filter instanceof BaseAttributeFilter) &&
@@ -159,10 +156,7 @@ public class BaseNotificationBroadcaster implements NotificationBroadcaster {
     public void sendNotification(Notification notification) {
 
         synchronized (entries) {
-            Iterator<BaseNotificationBroadcasterEntry> items =
-                entries.iterator();
-            while (items.hasNext()) {
-                BaseNotificationBroadcasterEntry item = items.next();
+            for (BaseNotificationBroadcasterEntry item : entries) {
                 if ((item.filter != null) &&
                     (!item.filter.isNotificationEnabled(notification)))
                     continue;

==================================================
MbeansDescriptorsDigesterSource.java
index 6a8123c8d5..057b10dddf 100644
--- a/java/org/apache/tomcat/util/modeler/Registry.java
+++ b/java/org/apache/tomcat/util/modeler/Registry.java
@@ -259,9 +259,7 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
         if( mbeans==null ) {
             return;
         }
-        Iterator<ObjectName> itr = mbeans.iterator();
-        while(itr.hasNext()) {
-            ObjectName current = itr.next();
+        for (ObjectName current : mbeans) {
             try {
                 if(current == null) {
                     continue;

==================================================
AbstractJsseEndpoint.java
index ae875aa269..bfcaff1edf 100644
--- a/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsDigesterSource.java
+++ b/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsDigesterSource.java
@@ -21,7 +21,6 @@ package org.apache.tomcat.util.modeler.modules;
 import java.io.InputStream;
 import java.net.URL;
 import java.util.ArrayList;
-import java.util.Iterator;
 import java.util.List;
 
 import javax.management.ObjectName;
@@ -176,9 +175,8 @@ public class MbeansDescriptorsDigesterSource extends ModelerSource
             }
 
         }
-        Iterator<ManagedBean> iter = loadedMbeans.iterator();
-        while (iter.hasNext()) {
-            registry.addManagedBean(iter.next());
+        for (ManagedBean loadedMbean : loadedMbeans) {
+            registry.addManagedBean(loadedMbean);
         }
     }
 }

==================================================
StandardJarScanner.java
index d255e882d1..e8f6c4ac05 100644
--- a/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java
@@ -21,7 +21,6 @@ import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.nio.channels.NetworkChannel;
 import java.util.ArrayList;
-import java.util.Iterator;
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Set;
@@ -217,9 +216,7 @@ public abstract class AbstractJsseEndpoint<S,U> extends AbstractEndpoint<S,U> {
             candidateCiphers.retainAll(serverCiphers);
         }
 
-        Iterator<Cipher> candidateIter = candidateCiphers.iterator();
-        while (candidateIter.hasNext()) {
-            Cipher candidate = candidateIter.next();
+        for (Cipher candidate : candidateCiphers) {
             for (SSLHostConfigCertificate certificate : certificates) {
                 if (certificate.getType().isCompatibleWith(candidate.getAu())) {
                     return certificate;

==================================================
WsWebSocketContainer.java
index 5238d3c627..86a4152602 100644
--- a/java/org/apache/tomcat/util/scan/StandardJarScanner.java
+++ b/java/org/apache/tomcat/util/scan/StandardJarScanner.java
@@ -176,9 +176,7 @@ public class StandardJarScanner implements JarScanner {
         // Scan WEB-INF/lib
         Set<String> dirList = context.getResourcePaths(Constants.WEB_INF_LIB);
         if (dirList != null) {
-            Iterator<String> it = dirList.iterator();
-            while (it.hasNext()) {
-                String path = it.next();
+            for (String path : dirList) {
                 if (path.endsWith(Constants.JAR_EXT) &&
                         getJarScanFilter().check(scanType,
                                 path.substring(path.lastIndexOf('/')+1))) {

==================================================
WsWriteTimeout.java
index 4204978655..8217cae96c 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -36,7 +36,6 @@ import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
@@ -613,9 +612,7 @@ public class WsWebSocketContainer implements WebSocketContainer, BackgroundProce
         result.put(HTTP_VERSION_BYTES);
 
         // Headers
-        Iterator<Entry<String,List<String>>> iter = reqHeaders.entrySet().iterator();
-        while (iter.hasNext()) {
-            Entry<String,List<String>> entry = iter.next();
+        for (Entry<String, List<String>> entry : reqHeaders.entrySet()) {
             addHeader(result, entry.getKey(), entry.getValue());
         }
 

==================================================
