b9308c3316dcc9f6351396c1e457c5258fd69d17
==================================================
Partial revert of r1383935. Some of this code is required. A closer review is required.
==================================================
Mark Emlyn
==================================================
Wed Sep 12 14:00:42 2012 +0000
==================================================
Registry.java
Partial revert of r1383935. Some of this code is required. A closer review is required.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1383945 13f79535-47bb-0310-9956-ffa450edef68



==================================================
MbeansDescriptorsDigesterSource.java
index ff79027856..eb9a45e5f9 100644
--- a/java/org/apache/tomcat/util/modeler/Registry.java
+++ b/java/org/apache/tomcat/util/modeler/Registry.java
@@ -482,7 +482,7 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
             }
 
             // introspection
-            load("MbeansDescriptorsIntrospectionSource", beanClass);
+            load("MbeansDescriptorsIntrospectionSource", beanClass, type);
 
             managed=findManagedBean(type);
             if( managed==null ) {
@@ -535,20 +535,23 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
      *
      * @param sourceType
      * @param source
+     * @param param
      * @return List of descriptors
      * @throws Exception
      */
-    public List<ObjectName> load( String sourceType, Object source)
-            throws Exception {
+    public List<ObjectName> load( String sourceType, Object source,
+            String param) throws Exception {
         if( log.isTraceEnabled()) {
             log.trace("load " + source );
         }
         String location=null;
+        String type=null;
         Object inputsource=null;
 
         if( source instanceof URL ) {
             URL url=(URL)source;
             location=url.toString();
+            type=param;
             inputsource=url.openStream();
             if( sourceType == null ) {
                 sourceType = sourceTypeFromExt(location);
@@ -556,13 +559,16 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
         } else if( source instanceof File ) {
             location=((File)source).getAbsolutePath();
             inputsource=new FileInputStream((File)source);
+            type=param;
             if( sourceType == null ) {
                 sourceType = sourceTypeFromExt(location);
             }
         } else if( source instanceof InputStream ) {
+            type=param;
             inputsource=source;
         } else if( source instanceof Class<?> ) {
             location=((Class<?>)source).getName();
+            type=param;
             inputsource=source;
             if( sourceType== null ) {
                 sourceType="MbeansDescriptorsIntrospectionSource";
@@ -574,7 +580,7 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
         }
         ModelerSource ds=getModelerSource(sourceType);
         List<ObjectName> mbeans =
-            ds.loadDescriptors(this, inputsource);
+            ds.loadDescriptors(this, type, inputsource);
 
         return mbeans;
     }
@@ -659,7 +665,7 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
         log.debug( "Found " + dURL);
         searchedPaths.put( packageName,  dURL );
         try {
-            load("MbeansDescriptorsDigesterSource", dURL);
+            load("MbeansDescriptorsDigesterSource", dURL, null);
         } catch(Exception ex ) {
             log.error("Error loading " + dURL);
         }

==================================================
MbeansDescriptorsIntrospectionSource.java
index 61441c7d95..15e2f04c6d 100644
--- a/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsDigesterSource.java
+++ b/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsDigesterSource.java
@@ -38,6 +38,7 @@ public class MbeansDescriptorsDigesterSource extends ModelerSource
             LogFactory.getLog(MbeansDescriptorsDigesterSource.class);
 
     private Registry registry;
+    private String type;
     private final List<ObjectName> mbeans = new ArrayList<>();
     private static volatile Digester digester = null;
 
@@ -136,14 +137,23 @@ public class MbeansDescriptorsDigesterSource extends ModelerSource
     }
 
 
+    /** Used if a single component is loaded
+     *
+     * @param type
+     */
+    public void setType( String type ) {
+       this.type=type;
+    }
+
     public void setSource( Object source ) {
         this.source=source;
     }
 
     @Override
-    public List<ObjectName> loadDescriptors( Registry registry, Object source)
-            throws Exception {
+    public List<ObjectName> loadDescriptors( Registry registry, String type,
+            Object source) throws Exception {
         setRegistry(registry);
+        setType(type);
         setSource(source);
         execute();
         return mbeans;

==================================================
MbeansDescriptorsSerSource.java
index 138ac18107..7efb963c91 100644
--- a/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsIntrospectionSource.java
+++ b/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsIntrospectionSource.java
@@ -61,9 +61,10 @@ public class MbeansDescriptorsIntrospectionSource extends ModelerSource
     }
 
     @Override
-    public List<ObjectName> loadDescriptors(Registry registry, Object source)
-            throws Exception {
+    public List<ObjectName> loadDescriptors(Registry registry, String type,
+            Object source) throws Exception {
         setRegistry(registry);
+        setType(type);
         setSource(source);
         execute();
         return mbeans;

==================================================
ModelerSource.java
index 42789d7350..46165fe7c8 100644
--- a/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsSerSource.java
+++ b/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsSerSource.java
@@ -30,24 +30,34 @@ import org.apache.tomcat.util.modeler.ManagedBean;
 import org.apache.tomcat.util.modeler.Registry;
 
 
-public class MbeansDescriptorsSerSource extends ModelerSource {
-
+public class MbeansDescriptorsSerSource extends ModelerSource
+{
     private static final Log log = LogFactory.getLog(MbeansDescriptorsSerSource.class);
     private Registry registry;
+    private String type;
     private final List<ObjectName> mbeans=new ArrayList<>();
 
     public void setRegistry(Registry reg) {
         this.registry=reg;
     }
 
+    /** Used if a single component is loaded
+     *
+     * @param type
+     */
+    public void setType( String type ) {
+       this.type=type;
+    }
+
     public void setSource( Object source ) {
         this.source=source;
     }
 
     @Override
-    public List<ObjectName> loadDescriptors( Registry registry, Object source)
-            throws Exception {
+    public List<ObjectName> loadDescriptors( Registry registry, String type,
+            Object source) throws Exception {
         setRegistry(registry);
+        setType(type);
         setSource(source);
         execute();
         return mbeans;

==================================================
