4e18c3ba15900ba1336185811b3159bf7760afef
==================================================
Add support for the length attribute to ArrayELResolver
==================================================
Mark Thomas
==================================================
Wed Apr 12 22:25:19 2023 +0100
==================================================
ArrayELResolver.java
Add support for the length attribute to ArrayELResolver


==================================================
TestValueExpressionImpl.java
index f256a069a6..88176320ed 100644
--- a/java/jakarta/el/ArrayELResolver.java
+++ b/java/jakarta/el/ArrayELResolver.java
@@ -24,6 +24,8 @@ import java.util.Objects;
  */
 public class ArrayELResolver extends ELResolver {
 
+    private static final String LENGTH_PROPERTY_NAME = "length";
+
     private final boolean readOnly;
 
     /**
@@ -73,6 +75,9 @@ public class ArrayELResolver extends ELResolver {
 
         if (base != null && base.getClass().isArray()) {
             context.setPropertyResolved(base, property);
+            if (LENGTH_PROPERTY_NAME.equals(property)) {
+                return Integer.valueOf(Array.getLength(base));
+            }
             int idx = coerce(property);
             if (idx < 0 || idx >= Array.getLength(base)) {
                 return null;

==================================================
TesterBeanA.java
index 4577bf2b5b..de56634df4 100644
--- a/test/org/apache/el/TestValueExpressionImpl.java
+++ b/test/org/apache/el/TestValueExpressionImpl.java
@@ -328,4 +328,60 @@ public class TestValueExpressionImpl extends ELBaseTest {
         Assert.assertNotNull(result);
         Assert.assertTrue(result.isEmpty());
     }
+
+
+    @Test
+    public void testArrayLength01() {
+        ExpressionFactory factory = ExpressionFactory.newInstance();
+        ELContext context = new ELContextImpl();
+
+        TesterBeanA beanA = new TesterBeanA();
+        beanA.setValArray(new String[3]);
+
+        ValueExpression var = factory.createValueExpression(beanA, TesterBeanA.class);
+        context.getVariableMapper().setVariable("beanA", var);
+
+        ValueExpression ve = factory.createValueExpression(context, "${beanA.valArray.length}", Integer.class);
+
+        // Check the result
+        Integer result = (Integer) ve.getValue(context);
+        Assert.assertEquals(Integer.valueOf(3), result);
+    }
+
+
+    @Test
+    public void testArrayLength02() {
+        ExpressionFactory factory = ExpressionFactory.newInstance();
+        ELContext context = new ELContextImpl();
+
+        TesterBeanA beanA = new TesterBeanA();
+        beanA.setValArray(new String[0]);
+
+        ValueExpression var = factory.createValueExpression(beanA, TesterBeanA.class);
+        context.getVariableMapper().setVariable("beanA", var);
+
+        ValueExpression ve = factory.createValueExpression(context, "${beanA.valArray.length}", Integer.class);
+
+        // Check the result
+        Integer result = (Integer) ve.getValue(context);
+        Assert.assertEquals(Integer.valueOf(0), result);
+    }
+
+
+    @Test
+    public void testArrayLength03() {
+        ExpressionFactory factory = ExpressionFactory.newInstance();
+        ELContext context = new ELContextImpl();
+
+        TesterBeanA beanA = new TesterBeanA();
+
+        ValueExpression var = factory.createValueExpression(beanA, TesterBeanA.class);
+        context.getVariableMapper().setVariable("beanA", var);
+
+        ValueExpression ve = factory.createValueExpression(context, "${beanA.valArray.length}", Integer.class);
+
+        // Check the result
+        Integer result = (Integer) ve.getValue(context);
+        Assert.assertNull(result);
+    }
 }

==================================================
