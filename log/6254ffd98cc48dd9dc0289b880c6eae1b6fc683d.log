6254ffd98cc48dd9dc0289b880c6eae1b6fc683d
==================================================
Add support for limiting trailer header count and size
==================================================
Mark Thomas
==================================================
Tue Oct 25 13:54:09 2016 +0000
==================================================
AbstractProcessor.java
Add support for limiting trailer header count and size

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1766533 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CloseNowException.java
index 40e5322f85..f4c70139e8 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -269,6 +269,8 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
             action(ActionCode.COMMIT, null);
             try {
                 finishResponse();
+            } catch (CloseNowException cne) {
+                setErrorState(ErrorState.CLOSE_NOW, cne);
             } catch (IOException e) {
                 setErrorState(ErrorState.CLOSE_CONNECTION_NOW, e);
             }

==================================================
Constants.java
new file mode 100644
index 0000000000..ff15125de3
--- /dev/null
+++ b/java/org/apache/coyote/CloseNowException.java
@@ -0,0 +1,51 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.coyote;
+
+import java.io.IOException;
+
+/**
+ * This exception is thrown to signal to the Tomcat internals that an error has
+ * occurred that requires the connection to be closed. For multiplexed protocols
+ * such as HTTP/2, this means the channel must be closed but the connection can
+ * continue. For non-multiplexed protocols, the connection must be closed. It
+ * corresponds to {@link ErrorState#CLOSE_NOW}.
+ */
+public class CloseNowException extends IOException {
+
+    private static final long serialVersionUID = 1L;
+
+
+    public CloseNowException() {
+        super();
+    }
+
+
+    public CloseNowException(String message, Throwable cause) {
+        super(message, cause);
+    }
+
+
+    public CloseNowException(String message) {
+        super(message);
+    }
+
+
+    public CloseNowException(Throwable cause) {
+        super(cause);
+    }
+}

==================================================
Http2Protocol.java
index ff2bb7ef90..2da5d68221 100644
--- a/java/org/apache/coyote/http2/Constants.java
+++ b/java/org/apache/coyote/http2/Constants.java
@@ -25,7 +25,9 @@ public class Constants {
     static final int DEFAULT_HEADER_READ_BUFFER_SIZE = 1024;
 
     // Limits
+    static final int DEFAULT_MAX_COOKIE_COUNT = 200;
     static final int DEFAULT_MAX_HEADER_COUNT = 100;
     static final int DEFAULT_MAX_HEADER_SIZE = 8 * 1024;
-    static final int DEFAULT_MAX_COOKIE_COUNT = 200;
+    static final int DEFAULT_MAX_TRAILER_COUNT = 100;
+    static final int DEFAULT_MAX_TRAILER_SIZE = 8 * 1024;
 }

==================================================
Http2UpgradeHandler.java
index 96ccc5b3cd..58b78a8fd4 100644
--- a/java/org/apache/coyote/http2/Http2Protocol.java
+++ b/java/org/apache/coyote/http2/Http2Protocol.java
@@ -67,6 +67,8 @@ public class Http2Protocol implements UpgradeProtocol {
     private int maxCookieCount = Constants.DEFAULT_MAX_COOKIE_COUNT;
     private int maxHeaderCount = Constants.DEFAULT_MAX_HEADER_COUNT;
     private int maxHeaderSize = Constants.DEFAULT_MAX_HEADER_SIZE;
+    private int maxTrailerCount = Constants.DEFAULT_MAX_TRAILER_COUNT;
+    private int maxTrailerSize = Constants.DEFAULT_MAX_TRAILER_SIZE;
 
 
     @Override
@@ -111,6 +113,8 @@ public class Http2Protocol implements UpgradeProtocol {
         result.setMaxCookieCount(getMaxCookieCount());
         result.setMaxHeaderCount(getMaxHeaderCount());
         result.setMaxHeaderSize(getMaxHeaderSize());
+        result.setMaxTrailerCount(getMaxTrailerCount());
+        result.setMaxTrailerSize(getMaxTrailerSize());
         return result;
     }
 
@@ -236,6 +240,16 @@ public class Http2Protocol implements UpgradeProtocol {
     }
 
 
+    public void setMaxCookieCount(int maxCookieCount) {
+        this.maxCookieCount = maxCookieCount;
+    }
+
+
+    public int getMaxCookieCount() {
+        return maxCookieCount;
+    }
+
+
     public void setMaxHeaderCount(int maxHeaderCount) {
         this.maxHeaderCount = maxHeaderCount;
     }
@@ -256,12 +270,22 @@ public class Http2Protocol implements UpgradeProtocol {
     }
 
 
-    public void setMaxCookieCount(int maxCookieCount) {
-        this.maxCookieCount = maxCookieCount;
+    public void setMaxTrailerCount(int maxTrailerCount) {
+        this.maxTrailerCount = maxTrailerCount;
     }
 
 
-    public int getMaxCookieCount() {
-        return maxCookieCount;
+    public int getMaxTrailerCount() {
+        return maxTrailerCount;
+    }
+
+
+    public void setMaxTrailerSize(int maxTrailerSize) {
+        this.maxTrailerSize = maxTrailerSize;
+    }
+
+
+    public int getMaxTrailerSize() {
+        return maxTrailerSize;
     }
 }

==================================================
Stream.java
index 7061f528e4..c82fe4f2a1 100644
--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java
@@ -37,6 +37,7 @@ import java.util.concurrent.atomic.AtomicReference;
 import javax.servlet.http.WebConnection;
 
 import org.apache.coyote.Adapter;
+import org.apache.coyote.CloseNowException;
 import org.apache.coyote.ProtocolException;
 import org.apache.coyote.Request;
 import org.apache.coyote.Response;
@@ -148,6 +149,10 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
     // Limits
     private Set<String> allowedTrailerHeaders = Collections.emptySet();
     private int maxCookieCount = Constants.DEFAULT_MAX_COOKIE_COUNT;
+    private int maxHeaderCount = Constants.DEFAULT_MAX_HEADER_COUNT;
+    private int maxHeaderSize = Constants.DEFAULT_MAX_HEADER_SIZE;
+    private int maxTrailerCount = Constants.DEFAULT_MAX_TRAILER_COUNT;
+    private int maxTrailerSize = Constants.DEFAULT_MAX_TRAILER_SIZE;
 
 
     Http2UpgradeHandler(Adapter adapter, Request coyoteRequest) {
@@ -513,6 +518,10 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
                     stream.getIdentifier()));
         }
 
+        if (!stream.canWrite()) {
+            return;
+        }
+
         prepareHeaders(coyoteResponse);
 
         byte[] header = new byte[9];
@@ -633,6 +642,8 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
             log.debug(sm.getString("upgradeHandler.writeBody", connectionId, stream.getIdentifier(),
                     Integer.toString(len)));
         }
+        // Need to check this now since sending end of stream will change this.
+        boolean writeable = stream.canWrite();
         byte[] header = new byte[9];
         ByteUtil.setThreeBytes(header, 0, len);
         header[3] = FrameType.DATA.getIdByte();
@@ -643,17 +654,19 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
                 activeRemoteStreamCount.decrementAndGet();
             }
         }
-        ByteUtil.set31Bits(header, 5, stream.getIdentifier().intValue());
-        synchronized (socketWrapper) {
-            try {
-                socketWrapper.write(true, header, 0, header.length);
-                int orgLimit = data.limit();
-                data.limit(data.position() + len);
-                socketWrapper.write(true, data);
-                data.limit(orgLimit);
-                socketWrapper.flush(true);
-            } catch (IOException ioe) {
-                handleAppInitiatedIOException(ioe);
+        if (writeable) {
+            ByteUtil.set31Bits(header, 5, stream.getIdentifier().intValue());
+            synchronized (socketWrapper) {
+                try {
+                    socketWrapper.write(true, header, 0, header.length);
+                    int orgLimit = data.limit();
+                    data.limit(data.position() + len);
+                    socketWrapper.write(true, data);
+                    data.limit(orgLimit);
+                    socketWrapper.flush(true);
+                } catch (IOException ioe) {
+                    handleAppInitiatedIOException(ioe);
+                }
             }
         }
     }
@@ -681,6 +694,9 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
      */
     void writeWindowUpdate(Stream stream, int increment, boolean applicationInitiated)
             throws IOException {
+        if (!stream.canWrite()) {
+            return;
+        }
         synchronized (socketWrapper) {
             // Build window update frame for stream 0
             byte[] frame = new byte[13];
@@ -722,8 +738,9 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
             do {
                 synchronized (this) {
                     if (!stream.canWrite()) {
-                        throw new IOException(sm.getString("upgradeHandler.stream.notWritable",
-                                stream.getConnectionId(), stream.getIdentifier()));
+                        throw new CloseNowException(
+                                sm.getString("upgradeHandler.stream.notWritable",
+                                        stream.getConnectionId(), stream.getIdentifier()));
                     }
                     long windowSize = getWindowSize();
                     if (windowSize < 1 || backLogSize > 0) {
@@ -1114,23 +1131,53 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
     }
 
 
+    public void setMaxCookieCount(int maxCookieCount) {
+        this.maxCookieCount = maxCookieCount;
+    }
+
+
+    public int getMaxCookieCount() {
+        return maxCookieCount;
+    }
+
+
     public void setMaxHeaderCount(int maxHeaderCount) {
-        getHpackDecoder().setMaxHeaderCount(maxHeaderCount);
+        this.maxHeaderCount = maxHeaderCount;
+    }
+
+
+    public int getMaxHeaderCount() {
+        return maxHeaderCount;
     }
 
 
     public void setMaxHeaderSize(int maxHeaderSize) {
-        getHpackDecoder().setMaxHeaderSize(maxHeaderSize);
+        this.maxHeaderSize = maxHeaderSize;
     }
 
 
-    public void setMaxCookieCount(int maxCookieCount) {
-        this.maxCookieCount = maxCookieCount;
+    public int getMaxHeaderSize() {
+        return maxHeaderSize;
     }
 
 
-    public int getMaxCookieCount() {
-        return maxCookieCount;
+    public void setMaxTrailerCount(int maxTrailerCount) {
+        this.maxTrailerCount = maxTrailerCount;
+    }
+
+
+    public int getMaxTrailerCount() {
+        return maxTrailerCount;
+    }
+
+
+    public void setMaxTrailerSize(int maxTrailerSize) {
+        this.maxTrailerSize = maxTrailerSize;
+    }
+
+
+    public int getMaxTrailerSize() {
+        return maxTrailerSize;
     }
 
 

==================================================
TestHttp2Limits.java
index 8bca8bd8d4..7e20984d05 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -24,6 +24,7 @@ import java.security.PrivilegedExceptionAction;
 import java.util.Iterator;
 
 import org.apache.coyote.ActionCode;
+import org.apache.coyote.CloseNowException;
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.OutputBuffer;
 import org.apache.coyote.Request;
@@ -171,8 +172,8 @@ class Stream extends AbstractStream implements HeaderEmitter {
         long windowSize = getWindowSize();
         while (windowSize < 1) {
             if (!canWrite()) {
-                throw new IOException(sm.getString("stream.notWritable", getConnectionId(),
-                        getIdentifier()));
+                throw new CloseNowException(sm.getString("stream.notWritable",
+                        getConnectionId(), getIdentifier()));
             }
             try {
                 if (block) {
@@ -358,8 +359,12 @@ class Stream extends AbstractStream implements HeaderEmitter {
     final void receivedStartOfHeaders() {
         if (headerState == HEADER_STATE_START) {
             headerState = HEADER_STATE_PSEUDO;
+            handler.getHpackDecoder().setMaxHeaderCount(handler.getMaxHeaderCount());
+            handler.getHpackDecoder().setMaxHeaderSize(handler.getMaxHeaderSize());
         } else if (headerState == HEADER_STATE_PSEUDO || headerState == HEADER_STATE_REGULAR) {
             headerState = HEADER_STATE_TRAILER;
+            handler.getHpackDecoder().setMaxHeaderCount(handler.getMaxTrailerCount());
+            handler.getHpackDecoder().setMaxHeaderSize(handler.getMaxTrailerSize());
         }
         // Parser will catch attempt to send a headers frame after the stream
         // has closed.

==================================================
