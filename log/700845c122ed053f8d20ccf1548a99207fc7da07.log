700845c122ed053f8d20ccf1548a99207fc7da07
==================================================
If the socket is closed (i.e. due to an error) no need to postProcess
==================================================
Mark Emlyn
==================================================
Wed Jun 29 11:19:55 2011 +0000
==================================================
AjpAprProtocol.java
If the socket is closed (i.e. due to an error) no need to postProcess

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1141048 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpNioProtocol.java
index 676f43aa69..ccb3e96a4e 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -152,7 +152,7 @@ public class AjpAprProtocol extends AbstractAjpProtocol {
                         state = processor.process(socket);
                     }
 
-                    if (processor.isAsync()) {
+                    if (state == SocketState.CLOSED && processor.isAsync()) {
                         state = processor.asyncPostProcess();
                     }
                 } while (state == SocketState.ASYNC_END);

==================================================
AjpProtocol.java
index c889568a26..51d4988dba 100644
--- a/java/org/apache/coyote/ajp/AjpNioProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpNioProtocol.java
@@ -190,7 +190,7 @@ public class AjpNioProtocol extends AbstractAjpProtocol {
                         state = processor.process(socket);
                     }
 
-                    if (processor.isAsync()) {
+                    if (state == SocketState.CLOSED && processor.isAsync()) {
                         state = processor.asyncPostProcess();
                     }
                 } while (state == SocketState.ASYNC_END);

==================================================
Http11AprProtocol.java
index dea78cf5d4..2898957934 100644
--- a/java/org/apache/coyote/ajp/AjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpProtocol.java
@@ -143,7 +143,7 @@ public class AjpProtocol extends AbstractAjpProtocol {
                         state = processor.process(socket);
                     }
     
-                    if (processor.isAsync()) {
+                    if (state == SocketState.CLOSED && processor.isAsync()) {
                         state = processor.asyncPostProcess();
                     }
                 } while (state == SocketState.ASYNC_END);

==================================================
Http11NioProtocol.java
index 0cbd589c66..5c7de18f2f 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -237,7 +237,7 @@ public class Http11AprProtocol extends AbstractHttp11Protocol {
                         state = processor.process(socket);
                     }
 
-                    if (processor.isAsync()) {
+                    if (state != SocketState.CLOSED && processor.isAsync()) {
                         state = processor.asyncPostProcess();
                     }
                 } while (state == SocketState.ASYNC_END);

==================================================
Http11Protocol.java
index bfb979a6c3..8550889c4a 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -266,7 +266,7 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
                         state = processor.process(socket);
                     }
 
-                    if (processor.isAsync()) {
+                    if (state != SocketState.CLOSED && processor.isAsync()) {
                         state = processor.asyncPostProcess();
                     }
                 } while (state == SocketState.ASYNC_END);

==================================================
