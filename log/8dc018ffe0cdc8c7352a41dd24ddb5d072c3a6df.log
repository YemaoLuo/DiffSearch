8dc018ffe0cdc8c7352a41dd24ddb5d072c3a6df
==================================================
Remove more STM references
==================================================
Mark Thomas
==================================================
Tue Sep 21 12:50:18 2021 +0100
==================================================
Container.java
Remove more STM references


==================================================
Wrapper.java
index 98dd2bee35..0881a702fb 100644
--- a/java/org/apache/catalina/Container.java
+++ b/java/org/apache/catalina/Container.java
@@ -43,9 +43,7 @@ import org.apache.juli.logging.Log;
  *     of Contexts.
  * <li><b>Context</b> - Representation of a single ServletContext, which will
  *     typically contain one or more Wrappers for the supported servlets.
- * <li><b>Wrapper</b> - Representation of an individual servlet definition
- *     (which may support multiple servlet instances if the servlet itself
- *     implements SingleThreadModel).
+ * <li><b>Wrapper</b> - Representation of an individual servlet definition.
  * </ul>
  * A given deployment of Catalina need not include Containers at all of the
  * levels described above.  For example, an administration application

==================================================
StandardWrapper.java
index 160e6f6a74..b40252eeae 100644
--- a/java/org/apache/catalina/Wrapper.java
+++ b/java/org/apache/catalina/Wrapper.java
@@ -31,8 +31,7 @@ import jakarta.servlet.UnavailableException;
  * <p>
  * Implementations of Wrapper are responsible for managing the servlet life
  * cycle for their underlying servlet class, including calling init() and
- * destroy() at appropriate times, as well as respecting the existence of
- * the SingleThreadModel declaration on the servlet class itself.
+ * destroy() at appropriate times.
  * <p>
  * The parent Container attached to a Wrapper will generally be an
  * implementation of Context, representing the servlet context (and
@@ -190,12 +189,8 @@ public interface Wrapper extends Container {
 
     /**
      * Allocate an initialized instance of this Servlet that is ready to have
-     * its <code>service()</code> method called.  If the Servlet class does
-     * not implement <code>SingleThreadModel</code>, the (only) initialized
-     * instance may be returned immediately.  If the Servlet class implements
-     * <code>SingleThreadModel</code>, the Wrapper implementation must ensure
-     * that this instance is not allocated again until it is deallocated by a
-     * call to <code>deallocate()</code>.
+     * its <code>service()</code> method called.  The previously initialized
+     * instance may be returned immediately.
      *
      * @exception ServletException if the Servlet init() method threw
      *  an exception
@@ -206,9 +201,7 @@ public interface Wrapper extends Container {
 
 
     /**
-     * Return this previously allocated servlet to the pool of available
-     * instances.  If this servlet class does not implement SingleThreadModel,
-     * no action is actually required.
+     * Decrement the allocation count for the servlet instance.
      *
      * @param servlet The servlet to be returned
      *

==================================================
StandardWrapperValve.java
index 83599aeb82..22aef41475 100644
--- a/java/org/apache/catalina/core/StandardWrapper.java
+++ b/java/org/apache/catalina/core/StandardWrapper.java
@@ -110,8 +110,7 @@ public class StandardWrapper extends ContainerBase
     protected final NotificationBroadcasterSupport broadcaster;
 
     /**
-     * The count of allocations that are currently active (even if they
-     * are for the same instance, as will be true on a non-STM servlet).
+     * The count of allocations that are currently active.
      */
     protected final AtomicInteger countAllocated = new AtomicInteger(0);
 
@@ -679,11 +678,8 @@ public class StandardWrapper extends ContainerBase
                 if (instance == null) {
                     try {
                         if (log.isDebugEnabled()) {
-                            log.debug("Allocating non-STM instance");
+                            log.debug("Allocating instance");
                         }
-
-                        // Note: We don't know if the Servlet implements
-                        // SingleThreadModel until we have loaded it.
                         instance = loadServlet();
                         newInstance = true;
                         // Increment here to prevent a race condition
@@ -703,7 +699,7 @@ public class StandardWrapper extends ContainerBase
         }
 
         if (log.isTraceEnabled()) {
-            log.trace("  Returning non-STM instance");
+            log.trace("  Returning instance");
         }
         // For new instances, count will have been incremented at the
         // time of creation
@@ -1123,7 +1119,6 @@ public class StandardWrapper extends ContainerBase
         unloading = true;
 
         // Loaf a while if the current instance is allocated
-        // (possibly more than once if non-STM)
         if (countAllocated.get() > 0) {
             int nRetries = 0;
             long delay = unloadDelay / 20;

==================================================
