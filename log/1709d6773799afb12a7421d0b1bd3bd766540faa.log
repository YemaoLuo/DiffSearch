1709d6773799afb12a7421d0b1bd3bd766540faa
==================================================
Add support for encrypted PKCS#1 keys. Based on #511. Thanks to jfclere
==================================================
Mark Thomas
==================================================
Tue May 10 13:02:01 2022 +0100
==================================================
PEMFile.java
Add support for encrypted PKCS#1 keys. Based on #511. Thanks to jfclere


==================================================
TestPEMFile.java
index 5db30d9e19..ab02cc8f7d 100644
--- a/java/org/apache/tomcat/util/net/jsse/PEMFile.java
+++ b/java/org/apache/tomcat/util/net/jsse/PEMFile.java
@@ -27,6 +27,8 @@ import java.security.AlgorithmParameters;
 import java.security.GeneralSecurityException;
 import java.security.InvalidKeyException;
 import java.security.KeyFactory;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
 import java.security.PrivateKey;
 import java.security.cert.CertificateEncodingException;
 import java.security.cert.CertificateException;
@@ -43,7 +45,9 @@ import javax.crypto.Cipher;
 import javax.crypto.EncryptedPrivateKeyInfo;
 import javax.crypto.SecretKey;
 import javax.crypto.SecretKeyFactory;
+import javax.crypto.spec.IvParameterSpec;
 import javax.crypto.spec.PBEKeySpec;
+import javax.crypto.spec.SecretKeySpec;
 
 import org.apache.tomcat.util.buf.Asn1Parser;
 import org.apache.tomcat.util.buf.Asn1Writer;
@@ -113,7 +117,16 @@ public class PEMFile {
                     part = null;
                 } else if (part != null && !line.contains(":") && !line.startsWith(" ")) {
                     part.content += line;
-                }
+                } else if (part != null && line.contains(":") && !line.startsWith(" ")) {
+                    /* Something like DEK-Info: DES-EDE3-CBC,B5A53CB8B7E50064 */
+                    if (line.startsWith("DEK-Info: ")) {
+                        String[] pieces = line.split(" ");
+                        pieces = pieces[1].split(",");
+                        if (pieces.length == 2) {
+                            part.algorithm = pieces[0];
+                            part.ivHex = pieces[1];
+                        }
+                    }                }
             }
         }
 
@@ -129,7 +142,7 @@ public class PEMFile {
                     privateKey = part.toPrivateKey(password, keyAlgorithm, Format.PKCS8);
                     break;
                 case Part.RSA_PRIVATE_KEY:
-                    privateKey = part.toPrivateKey(null, keyAlgorithm, Format.PKCS1);
+                    privateKey = part.toPrivateKey(password, keyAlgorithm, Format.PKCS1);
                     break;
                 case Part.CERTIFICATE:
                 case Part.X509_CERTIFICATE:
@@ -153,6 +166,8 @@ public class PEMFile {
 
         public String type;
         public String content = "";
+        public String algorithm = null;
+        public String ivHex = null;
 
         private byte[] decode() {
             return Base64.decodeBase64(content);
@@ -183,15 +198,60 @@ public class PEMFile {
                     }
                 }
             } else {
-                EncryptedPrivateKeyInfo privateKeyInfo = new EncryptedPrivateKeyInfo(decode());
-                String pbeAlgorithm = getPBEAlgorithm(privateKeyInfo);
-                SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(pbeAlgorithm);
-                SecretKey secretKey = secretKeyFactory.generateSecret(new PBEKeySpec(password.toCharArray()));
-
-                Cipher cipher = Cipher.getInstance(pbeAlgorithm);
-                cipher.init(Cipher.DECRYPT_MODE, secretKey, privateKeyInfo.getAlgParameters());
+                if (algorithm == null) {
+                    // PKCS 8
+                    EncryptedPrivateKeyInfo privateKeyInfo = new EncryptedPrivateKeyInfo(decode());
+                    String pbeAlgorithm = getPBEAlgorithm(privateKeyInfo);
+                    SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(pbeAlgorithm);
+                    SecretKey secretKey = secretKeyFactory.generateSecret(new PBEKeySpec(password.toCharArray()));
+
+                    Cipher cipher = Cipher.getInstance(pbeAlgorithm);
+                    cipher.init(Cipher.DECRYPT_MODE, secretKey, privateKeyInfo.getAlgParameters());
+
+                    keySpec = privateKeyInfo.getKeySpec(cipher);
+                } else {
+                    // PKCS 1
+                    String secretKeyAlgorithm;
+                    String cipherTransformation;
+                    int keyLength;
+
+                    // Is there a generic way to derive these three values from
+                    // just the algorithm name?
+                    switch (algorithm) {
+                        case "DES-CBC": {
+                            secretKeyAlgorithm = "DES";
+                            cipherTransformation = "DES/CBC/PKCS5Padding";
+                            keyLength = 8;
+                            break;
+                        }
+                        case "DES-EDE3-CBC": {
+                            secretKeyAlgorithm = "DESede";
+                            cipherTransformation = "DESede/CBC/PKCS5Padding";
+                            keyLength = 24;
+                            break;
+                        }
+                        case "AES-256-CBC": {
+                            secretKeyAlgorithm = "AES";
+                            cipherTransformation = "AES/CBC/PKCS5Padding";
+                            keyLength = 32;
+                            break;
+                        }
+                        default:
+                            // This will almost certainly trigger errors
+                            secretKeyAlgorithm = algorithm;
+                            cipherTransformation = algorithm;
+                            keyLength = 8;
+                            break;
+                    }
 
-                keySpec = privateKeyInfo.getKeySpec(cipher);
+                    byte[] iv = fromHex(ivHex);
+                    byte[] key = deriveKey(keyLength, password, iv);
+                    SecretKey secretKey = new SecretKeySpec(key, secretKeyAlgorithm);
+                    Cipher cipher = Cipher.getInstance(cipherTransformation);
+                    cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(iv));
+                    byte[] pkcs1 = cipher.doFinal(decode());
+                    keySpec = parsePKCS1(pkcs1);
+                }
             }
 
             InvalidKeyException exception = new InvalidKeyException(sm.getString("pemFile.parseError", filename));
@@ -234,6 +294,29 @@ public class PEMFile {
         }
 
 
+        private byte[] deriveKey(int keyLength, String password, byte[] iv) throws NoSuchAlgorithmException {
+            // PBKDF1-MD5 as specified by PKCS#5
+            byte[] key = new byte[keyLength];
+
+            int insertPosition = 0;
+
+            MessageDigest digest = MessageDigest.getInstance("MD5");
+            byte[] pw = password.getBytes(StandardCharsets.UTF_8);
+
+            while (insertPosition < keyLength) {
+                digest.update(pw);
+                digest.update(iv, 0, 8);
+                byte[] round = digest.digest();
+                digest.update(round);
+
+                System.arraycopy(round, 0, key, insertPosition, Math.min(keyLength - insertPosition, round.length));
+                insertPosition += round.length;
+            }
+
+            return key;
+        }
+
+
         /*
          * RFC5915: SEQ
          *           INT               value = 1
@@ -332,6 +415,18 @@ public class PEMFile {
             return new RSAPrivateCrtKeySpec(p.parseInt(), p.parseInt(), p.parseInt(), p.parseInt(),
                     p.parseInt(), p.parseInt(), p.parseInt(), p.parseInt());
         }
+
+
+
+        private byte[] fromHex(String hexString) {
+            byte[] bytes = new byte[hexString.length() / 2];
+            for (int i = 0; i < hexString.length(); i += 2)
+            {
+                bytes[i / 2] = (byte) ((Character.digit(hexString.charAt(i), 16) << 4)
+                    + Character.digit(hexString.charAt(i + 1), 16));
+            }
+            return bytes;
+        }
     }
 
 

==================================================
