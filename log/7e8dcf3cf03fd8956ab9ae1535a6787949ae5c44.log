7e8dcf3cf03fd8956ab9ae1535a6787949ae5c44
==================================================
Deprecate Manager.distributable and Manager.maxInactiveInterval since they exist in both the Context and the Manager and the Context values always take precedence.
==================================================
asf-sync-process asf-sync-process@unknown
==================================================
Tue Jan 19 23:43:15 2016 +0000
==================================================
Manager.java
Deprecate Manager.distributable and Manager.maxInactiveInterval since they exist in both the Context and the Manager and the Context values always take precedence.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1725652 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BackupManager.java
index be55bab7f4..700de44145 100644
--- a/java/org/apache/catalina/Manager.java
+++ b/java/org/apache/catalina/Manager.java
@@ -66,7 +66,11 @@ public interface Manager {
      *
      * @return {@code true} if this manager is marked as distributable otherwise
      *         {@code false}
+     *
+     * @deprecated Ignored. {@link Context#getDistributable()} always takes
+     *             precedence. Will be removed in Tomcat 9.0.x.
      */
+    @Deprecated
     public boolean getDistributable();
 
 
@@ -76,7 +80,11 @@ public interface Manager {
      * manager must implement Serializable.
      *
      * @param distributable The new distributable flag
+     *
+     * @deprecated Ignored. {@link Context#getDistributable()} always takes
+     *             precedence. Will be removed in Tomcat 9.0.x.
      */
+    @Deprecated
     public void setDistributable(boolean distributable);
 
 
@@ -85,7 +93,11 @@ public interface Manager {
      * will be considered inactive.
      *
      * @return The default maximum inactive interval in seconds
+     *
+     * @deprecated Ignored. {@link Context#getSessionTimeout()} always takes
+     *             precedence. Will be removed in Tomcat 9.0.x.
      */
+    @Deprecated
     public int getMaxInactiveInterval();
 
 
@@ -94,7 +106,11 @@ public interface Manager {
      * for Sessions created by this Manager.
      *
      * @param interval The new default value
+     *
+     * @deprecated Ignored. {@link Context#getSessionTimeout()} always takes
+     *             precedence. Will be removed in Tomcat 9.0.x.
      */
+    @Deprecated
     public void setMaxInactiveInterval(int interval);
 
 

==================================================
ClusterManagerBase.java
index bf3ce094b6..5fb90e8a79 100644
--- a/java/org/apache/catalina/ha/session/BackupManager.java
+++ b/java/org/apache/catalina/ha/session/BackupManager.java
@@ -186,11 +186,6 @@ public class BackupManager extends ClusterManagerBase
         super.stopInternal();
     }
 
-    @Override
-    public void setDistributable(boolean dist) {
-        this.distributable = dist;
-    }
-
     @Override
     public void setName(String name) {
         this.name = name;

==================================================
DeltaManager.java
index 317068aee8..300e0533fb 100644
--- a/java/org/apache/catalina/ha/session/ClusterManagerBase.java
+++ b/java/org/apache/catalina/ha/session/ClusterManagerBase.java
@@ -189,7 +189,6 @@ public abstract class ClusterManagerBase extends ManagerBase implements ClusterM
     protected void clone(ClusterManagerBase copy) {
         copy.setName("Clone-from-" + getName());
         copy.setMaxActiveSessions(getMaxActiveSessions());
-        copy.setMaxInactiveInterval(getMaxInactiveInterval());
         copy.setProcessExpiresFrequency(getProcessExpiresFrequency());
         copy.setNotifyListenersOnReplication(isNotifyListenersOnReplication());
         copy.setSessionAttributeNameFilter(getSessionAttributeNameFilter());

==================================================
ManagerBase.java
index 05ccf6eae8..20be53761c 100644
--- a/java/org/apache/catalina/ha/session/DeltaManager.java
+++ b/java/org/apache/catalina/ha/session/DeltaManager.java
@@ -1305,7 +1305,7 @@ public class DeltaManager extends ClusterManagerBase{
         session.setCreationTime(msg.getTimestamp());
         // use container maxInactiveInterval so that session will expire correctly
         // in case of primary transfer
-        session.setMaxInactiveInterval(getMaxInactiveInterval(), false);
+        session.setMaxInactiveInterval(getContext().getSessionTimeout() * 60, false);
         session.access();
         session.setId(msg.getSessionID(), notifySessionListenersOnReplication);
         session.resetDeltaRequest();

==================================================
TestPersistentManager.java
index 3ddae36c47..8936a0e13e 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -17,7 +17,6 @@
 package org.apache.catalina.session;
 
 
-import java.beans.PropertyChangeEvent;
 import java.beans.PropertyChangeListener;
 import java.beans.PropertyChangeSupport;
 import java.io.IOException;
@@ -59,8 +58,7 @@ import org.apache.tomcat.util.res.StringManager;
  *
  * @author Craig R. McClanahan
  */
-public abstract class ManagerBase extends LifecycleMBeanBase
-        implements Manager, PropertyChangeListener {
+public abstract class ManagerBase extends LifecycleMBeanBase implements Manager {
 
     private final Log log = LogFactory.getLog(ManagerBase.class); // must not be static
 
@@ -76,7 +74,11 @@ public abstract class ManagerBase extends LifecycleMBeanBase
      * The distributable flag for Sessions created by this Manager.  If this
      * flag is set to <code>true</code>, any user attributes added to a
      * session controlled by this Manager must be Serializable.
+     *
+     * @deprecated Ignored. {@link Context#getDistributable()} always takes
+     *             precedence. Will be removed in Tomcat 9.0.x.
      */
+    @Deprecated
     protected boolean distributable;
 
 
@@ -89,7 +91,11 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     /**
      * The default maximum inactive interval for Sessions created by
      * this Manager.
+     *
+     * @deprecated Ignored. {@link Context#getSessionTimeout()} always takes
+     *             precedence. Will be removed in Tomcat 9.0.x.
      */
+    @Deprecated
     protected int maxInactiveInterval = 30 * 60;
 
     /**
@@ -371,43 +377,39 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
+    @Deprecated
     @Override
     public boolean getDistributable() {
-        return this.distributable;
+        Context context = getContext();
+        if (context == null) {
+            return false;
+        }
+        return context.getDistributable();
     }
 
 
-    /**
-     * {@inheritDoc}
-     * <p>
-     * Session attributes do not need to implement {@link java.io.Serializable}
-     * if they are excluded from distribution by
-     * {@link #willAttributeDistribute(String, Object)}.
-     */
+    @Deprecated
     @Override
     public void setDistributable(boolean distributable) {
-
-        boolean oldDistributable = this.distributable;
-        this.distributable = distributable;
-        support.firePropertyChange("distributable",
-                                   Boolean.valueOf(oldDistributable),
-                                   Boolean.valueOf(this.distributable));
+        // NO-OP
     }
 
 
+    @Deprecated
     @Override
     public int getMaxInactiveInterval() {
-        return this.maxInactiveInterval;
+        Context context = getContext();
+        if (context == null) {
+            return -1;
+        }
+        return context.getSessionTimeout() * 60;
     }
 
 
+    @Deprecated
     @Override
     public void setMaxInactiveInterval(int interval) {
-        int oldMaxInactiveInterval = this.maxInactiveInterval;
-        this.maxInactiveInterval = interval;
-        support.firePropertyChange("maxInactiveInterval",
-                                   Integer.valueOf(oldMaxInactiveInterval),
-                                   Integer.valueOf(this.maxInactiveInterval));
+        // NO-OP
     }
 
 
@@ -600,23 +602,17 @@ public abstract class ManagerBase extends LifecycleMBeanBase
 
     }
 
+
     @Override
     protected void initInternal() throws LifecycleException {
-
         super.initInternal();
 
         if (context == null) {
             throw new LifecycleException(sm.getString("managerBase.contextNull"));
         }
-
-        // Copy current values from Context
-        setMaxInactiveInterval(this.context.getSessionTimeout() * 60);
-        setDistributable(getContext().getDistributable());
-
-        // Track any further changes in those values
-        this.context.addPropertyChangeListener(this);
     }
 
+
     @Override
     protected void startInternal() throws LifecycleException {
 
@@ -656,6 +652,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
         }
     }
 
+
     @Override
     protected void stopInternal() throws LifecycleException {
         if (sessionIdGenerator instanceof Lifecycle) {
@@ -664,17 +661,6 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
-    @Override
-    protected void destroyInternal() throws LifecycleException {
-        // De-register from the old Context (if any)
-        if (this.context != null) {
-            this.context.removePropertyChangeListener(this);
-        }
-
-        super.destroyInternal();
-    }
-
-
     @Override
     public void add(Session session) {
         sessions.put(session.getIdInternal(), session);
@@ -1325,30 +1311,6 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
-    // ----------------------------------------- PropertyChangeListener Methods
-
-    @Override
-    public void propertyChange(PropertyChangeEvent event) {
-
-        // Validate the source of this event
-        if (!(event.getSource() instanceof Context))
-            return;
-
-        // Process a relevant property change
-        if (event.getPropertyName().equals("sessionTimeout")) {
-            try {
-                setMaxInactiveInterval(
-                        ((Integer) event.getNewValue()).intValue() * 60);
-            } catch (NumberFormatException e) {
-                log.error(sm.getString("managerBase.sessionTimeout",
-                        event.getNewValue()));
-            }
-        } else if (event.getPropertyName().equals("distributable")) {
-            setDistributable(((Boolean) event.getNewValue()).booleanValue());
-        }
-    }
-
-
     // ----------------------------------------------------------- Inner classes
 
     protected static final class SessionTiming {

==================================================
