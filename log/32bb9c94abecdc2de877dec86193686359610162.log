32bb9c94abecdc2de877dec86193686359610162
==================================================
No need to test dispatches.hasNext() more than once.
==================================================
Mark Emlyn
==================================================
Sun Oct 6 21:59:06 2013 +0000
==================================================
AbstractProtocol.java
No need to test dispatches.hasNext() more than once.
Add some additional comments.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1529702 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SocketWrapper.java
index 4970fa5398..c4b084eaf4 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -620,16 +620,12 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
                 Iterator<DispatchType> dispatches = null;
                 do {
                     if (dispatches != null) {
-                        if (dispatches.hasNext()) {
-                            // Associate with the processor with the connection as
-                            // these calls may result in a nested call to process()
-                            connections.put(socket, processor);
-                            DispatchType nextDispatch = dispatches.next();
-                            state = processor.asyncDispatch(
-                                    nextDispatch.getSocketStatus());
-                        } else {
-                            dispatches = null;
-                        }
+                        // Associate with the processor with the connection as
+                        // these calls may result in a nested call to process()
+                        connections.put(socket, processor);
+                        DispatchType nextDispatch = dispatches.next();
+                        state = processor.asyncDispatch(
+                                nextDispatch.getSocketStatus());
                     } else if (status == SocketStatus.DISCONNECT &&
                             !processor.isComet()) {
                         // Do nothing here, just wait for it to get recycled
@@ -677,11 +673,13 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
                                 "], State out: [" + state + "]");
                     }
                     if (dispatches == null || !dispatches.hasNext()) {
+                        // Only returns non-null iterator if there are
+                        // dispatches to process.
                         dispatches = wrapper.getIteratorAndClearDispatches();
                     }
                 } while (state == SocketState.ASYNC_END ||
                         state == SocketState.UPGRADING ||
-                        dispatches != null && dispatches.hasNext() && state != SocketState.CLOSED);
+                        dispatches != null && state != SocketState.CLOSED);
 
                 if (state == SocketState.LONG) {
                     // In the middle of processing a request/response. Keep the

==================================================
