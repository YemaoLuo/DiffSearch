886d41db14ce9417eecb30d6b2f3d6e8695b1b30
==================================================
- add utility functions to TesterSupport to access
==================================================
Rainer Jung
==================================================
Thu Apr 12 04:38:45 2018 +0000
==================================================
TesterSupport.java
- add utility functions to TesterSupport to access
  OpenSSL library availability and version number.
- use the new version number access to fix test
  for OpenSSLConf for older version of OpenSSL
  (before 1.1.1-pre3).


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1828946 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestOpenSSLConf.java
index 2e05e1ca5b..ffed6009de 100644
--- a/test/org/apache/tomcat/util/net/TesterSupport.java
+++ b/test/org/apache/tomcat/util/net/TesterSupport.java
@@ -50,6 +50,9 @@ import org.apache.catalina.core.AprLifecycleListener;
 import org.apache.catalina.core.StandardServer;
 import org.apache.catalina.startup.TesterMapRealm;
 import org.apache.catalina.startup.Tomcat;
+import org.apache.tomcat.jni.Library;
+import org.apache.tomcat.jni.LibraryNotFoundError;
+import org.apache.tomcat.jni.SSL;
 import org.apache.tomcat.util.descriptor.web.LoginConfig;
 import org.apache.tomcat.util.descriptor.web.SecurityCollection;
 import org.apache.tomcat.util.descriptor.web.SecurityConstraint;
@@ -67,6 +70,8 @@ public final class TesterSupport {
     public static final String JKS_KEY_PASS = "tomcatpass";
     public static final String LOCALHOST_CERT_PEM = SSL_DIR + "localhost-cert.pem";
     public static final String LOCALHOST_KEY_PEM = SSL_DIR + "localhost-key.pem";
+    public static final boolean OPENSSL_AVAILABLE;
+    public static final int OPENSSL_VERSION;
 
     public static final String ROLE = "testrole";
 
@@ -74,6 +79,29 @@ public final class TesterSupport {
     private static String lastUsage = "NONE";
     private static Principal[] lastRequestedIssuers = new Principal[0];
 
+    static {
+        boolean available = false;
+        int version = 0;
+        try {
+            Library.initialize(null);
+            available = true;
+            version = SSL.version();
+            Library.terminate();
+        } catch (Exception | LibraryNotFoundError ex) {
+            // Ignore
+        }
+        OPENSSL_AVAILABLE = available;
+        OPENSSL_VERSION = version;
+    }
+
+    public static boolean isOpensslAvailable() {
+        return OPENSSL_AVAILABLE;
+    }
+
+    public static int getOpensslVersion() {
+        return OPENSSL_VERSION;
+    }
+
     public static void initSsl(Tomcat tomcat) {
         initSsl(tomcat, LOCALHOST_JKS, null, null);
     }

==================================================
