ae71a53b65a255e0ba2292b83d761ce9c65068d1
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56588
==================================================
Mark Emlyn
==================================================
Wed Jun 4 21:18:55 2014 +0000
==================================================
Context.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56588
Remove unnecessary code - essentially revert r1492307 - that is no longer required now that Jasper is initialized via an SCI.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1600505 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StandardContext.java
index 1ce7344e9d..005587d498 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -31,7 +31,6 @@ import javax.servlet.descriptor.JspConfigDescriptor;
 import org.apache.catalina.deploy.NamingResourcesImpl;
 import org.apache.tomcat.InstanceManager;
 import org.apache.tomcat.JarScanner;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.util.descriptor.web.ApplicationParameter;
 import org.apache.tomcat.util.descriptor.web.ErrorPage;
 import org.apache.tomcat.util.descriptor.web.FilterDef;
@@ -727,7 +726,7 @@ public interface Context extends Container {
      *
      * @param listener Java class name of a listener class
      */
-    public void addApplicationListener(ApplicationListener listener);
+    public void addApplicationListener(String listener);
 
 
     /**
@@ -905,7 +904,7 @@ public interface Context extends Container {
      * Return the set of application listener class names configured
      * for this application.
      */
-    public ApplicationListener[] findApplicationListeners();
+    public String[] findApplicationListeners();
 
 
     /**

==================================================
ContextConfig.java
index f00b79bd28..72d0830697 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -116,7 +116,6 @@ import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.IntrospectionUtils;
 import org.apache.tomcat.util.buf.UDecoder;
 import org.apache.tomcat.util.descriptor.XmlIdentifiers;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.util.descriptor.web.ApplicationParameter;
 import org.apache.tomcat.util.descriptor.web.ErrorPage;
 import org.apache.tomcat.util.descriptor.web.FilterDef;
@@ -228,8 +227,7 @@ public class StandardContext extends ContainerBase
      * application, in the order they were encountered in the resulting merged
      * web.xml file.
      */
-    private ApplicationListener applicationListeners[] =
-            new ApplicationListener[0];
+    private String applicationListeners[] = new String[0];
 
     private final Object applicationListenersLock = new Object();
 
@@ -2663,15 +2661,13 @@ public class StandardContext extends ContainerBase
      * @param listener Java class name of a listener class
      */
     @Override
-    public void addApplicationListener(ApplicationListener listener) {
+    public void addApplicationListener(String listener) {
 
         synchronized (applicationListenersLock) {
-            ApplicationListener results[] =
-                    new ApplicationListener[applicationListeners.length + 1];
+            String results[] = new String[applicationListeners.length + 1];
             for (int i = 0; i < applicationListeners.length; i++) {
                 if (listener.equals(applicationListeners[i])) {
-                    log.info(sm.getString(
-                            "standardContext.duplicateListener",listener));
+                    log.info(sm.getString("standardContext.duplicateListener",listener));
                     return;
                 }
                 results[i] = applicationListeners[i];
@@ -2682,7 +2678,6 @@ public class StandardContext extends ContainerBase
         fireContainerEvent("addApplicationListener", listener);
 
         // FIXME - add instance if already started?
-
     }
 
 
@@ -3289,10 +3284,8 @@ public class StandardContext extends ContainerBase
      * for this application.
      */
     @Override
-    public ApplicationListener[] findApplicationListeners() {
-
-        return (applicationListeners);
-
+    public String[] findApplicationListeners() {
+        return applicationListeners;
     }
 
 
@@ -3813,7 +3806,7 @@ public class StandardContext extends ContainerBase
             // Make sure this welcome file is currently present
             int n = -1;
             for (int i = 0; i < applicationListeners.length; i++) {
-                if (applicationListeners[i].getClassName().equals(listener)) {
+                if (applicationListeners.equals(listener)) {
                     n = i;
                     break;
                 }
@@ -3823,8 +3816,7 @@ public class StandardContext extends ContainerBase
 
             // Remove the specified constraint
             int j = 0;
-            ApplicationListener results[] =
-                    new ApplicationListener[applicationListeners.length - 1];
+            String results[] = new String[applicationListeners.length - 1];
             for (int i = 0; i < applicationListeners.length; i++) {
                 if (i != n)
                     results[j++] = applicationListeners[i];
@@ -3837,7 +3829,6 @@ public class StandardContext extends ContainerBase
         fireContainerEvent("removeApplicationListener", listener);
 
         // FIXME - behavior if already started?
-
     }
 
 
@@ -4677,7 +4668,7 @@ public class StandardContext extends ContainerBase
             log.debug("Configuring application event listeners");
 
         // Instantiate the required listeners
-        ApplicationListener listeners[] = findApplicationListeners();
+        String listeners[] = findApplicationListeners();
         Object results[] = new Object[listeners.length];
         boolean ok = true;
         Set<Object> noPluggabilityListeners = new HashSet<>();
@@ -4686,18 +4677,13 @@ public class StandardContext extends ContainerBase
                 getLogger().debug(" Configuring event listener class '" +
                     listeners[i] + "'");
             try {
-                ApplicationListener listener = listeners[i];
-                results[i] = instanceManager.newInstance(
-                        listener.getClassName());
-                if (listener.isPluggabilityBlocked()) {
-                    noPluggabilityListeners.add(results[i]);
-                }
+                String listener = listeners[i];
+                results[i] = instanceManager.newInstance(listener);
             } catch (Throwable t) {
                 t = ExceptionUtils.unwrapInvocationTargetException(t);
                 ExceptionUtils.handleThrowable(t);
-                getLogger().error
-                    (sm.getString("standardContext.applicationListener",
-                                  listeners[i].getClassName()), t);
+                getLogger().error(sm.getString(
+                        "standardContext.applicationListener", listeners[i]), t);
                 ok = false;
             }
         }
@@ -5599,7 +5585,7 @@ public class StandardContext extends ContainerBase
         // Bugzilla 32867
         distributable = false;
 
-        applicationListeners = new ApplicationListener[0];
+        applicationListeners = new String[0];
         applicationEventListenersObjects = new Object[0];
         applicationLifecycleListenersObjects = new Object[0];
         jspConfigDescriptor = null;

==================================================
FailedContext.java
index a86ce6aaa3..12d343d0ac 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -79,7 +79,6 @@ import org.apache.tomcat.util.bcel.classfile.ElementValue;
 import org.apache.tomcat.util.bcel.classfile.ElementValuePair;
 import org.apache.tomcat.util.bcel.classfile.JavaClass;
 import org.apache.tomcat.util.descriptor.XmlErrorHandler;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.util.descriptor.web.ContextEjb;
 import org.apache.tomcat.util.descriptor.web.ContextEnvironment;
 import org.apache.tomcat.util.descriptor.web.ContextLocalEjb;
@@ -1269,8 +1268,7 @@ public class ContextConfig implements LifecycleListener {
         }
         context.setJspConfigDescriptor(webxml.getJspConfigDescriptor());
         for (String listener : webxml.getListeners()) {
-            context.addApplicationListener(
-                    new ApplicationListener(listener, false));
+            context.addApplicationListener(listener);
         }
         for (Entry<String, String> entry :
                 webxml.getLocaleEncodingMappings().entrySet()) {

==================================================
WebAnnotationSet.java
index 69127e615b..b2227f9559 100644
--- a/java/org/apache/catalina/startup/FailedContext.java
+++ b/java/org/apache/catalina/startup/FailedContext.java
@@ -55,7 +55,6 @@ import org.apache.catalina.util.LifecycleMBeanBase;
 import org.apache.juli.logging.Log;
 import org.apache.tomcat.InstanceManager;
 import org.apache.tomcat.JarScanner;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.util.descriptor.web.ApplicationParameter;
 import org.apache.tomcat.util.descriptor.web.ErrorPage;
 import org.apache.tomcat.util.descriptor.web.FilterDef;
@@ -480,9 +479,9 @@ public class FailedContext extends LifecycleMBeanBase implements Context {
     public boolean getLogEffectiveWebXml() { return false; }
 
     @Override
-    public void addApplicationListener(ApplicationListener listener) { /* NO-OP */ }
+    public void addApplicationListener(String listener) { /* NO-OP */ }
     @Override
-    public ApplicationListener[] findApplicationListeners() { return null; }
+    public String[] findApplicationListeners() { return null; }
     @Override
     public void removeApplicationListener(String listener) { /* NO-OP */ }
 

==================================================
ApplicationListener.java
index da2323467f..0880a54a12 100644
--- a/java/org/apache/catalina/startup/WebAnnotationSet.java
+++ b/java/org/apache/catalina/startup/WebAnnotationSet.java
@@ -28,7 +28,6 @@ import org.apache.catalina.Container;
 import org.apache.catalina.Context;
 import org.apache.catalina.Wrapper;
 import org.apache.catalina.util.Introspection;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.util.descriptor.web.ContextEnvironment;
 import org.apache.tomcat.util.descriptor.web.ContextResource;
 import org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef;
@@ -77,11 +76,9 @@ public class WebAnnotationSet {
      */
     protected static void loadApplicationListenerAnnotations(Context context) {
         Class<?> classClass = null;
-        ApplicationListener[] applicationListeners =
-                context.findApplicationListeners();
+        String[] applicationListeners = context.findApplicationListeners();
         for (int i = 0; i < applicationListeners.length; i++) {
-            classClass = Introspection.loadClass(context,
-                    applicationListeners[i].getClassName());
+            classClass = Introspection.loadClass(context, applicationListeners[i]);
             if (classClass == null) {
                 continue;
             }

==================================================
TestFormAuthenticator.java
deleted file mode 100644
index 653a765341..0000000000
--- a/java/org/apache/tomcat/util/descriptor/web/ApplicationListener.java
+++ /dev/null
@@ -1,72 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.tomcat.util.descriptor.web;
-
-/**
- * Enables additional attributes other than just the name to be recorded for
- * an application listener.
- */
-public class ApplicationListener {
-
-    private final String className;
-    private final boolean pluggabilityBlocked;
-
-    public ApplicationListener(String className,
-            boolean pluggabilityBlocked) {
-        this.className = className;
-        this.pluggabilityBlocked = pluggabilityBlocked;
-    }
-
-
-    public String getClassName() {
-        return className;
-    }
-
-
-    public boolean isPluggabilityBlocked() {
-        return pluggabilityBlocked;
-    }
-
-
-    @Override
-    public int hashCode() {
-        final int prime = 31;
-        int result = 1;
-        result = prime * result + ((className == null) ? 0 : className.hashCode());
-        return result;
-    }
-
-
-    @Override
-    public boolean equals(Object obj) {
-        if (this == obj) {
-            return true;
-        }
-        if (!(obj instanceof ApplicationListener)) {
-            return false;
-        }
-        ApplicationListener other = (ApplicationListener) obj;
-        if (className == null) {
-            if (other.className != null) {
-                return false;
-            }
-        } else if (!className.equals(other.className)) {
-            return false;
-        }
-        return true;
-    }
-}
\ No newline at end of file

==================================================
TestAsyncContextImpl.java
index 031c304f08..69195137c2 100644
--- a/test/org/apache/catalina/authenticator/TestFormAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestFormAuthenticator.java
@@ -39,7 +39,6 @@ import org.apache.catalina.startup.TesterMapRealm;
 import org.apache.catalina.startup.TesterServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.util.descriptor.web.LoginConfig;
 import org.apache.tomcat.util.descriptor.web.SecurityCollection;
 import org.apache.tomcat.util.descriptor.web.SecurityConstraint;
@@ -648,8 +647,7 @@ public class TestFormAuthenticator extends TomcatBaseTest {
                     appDir.getAbsolutePath());
             setUseCookies(clientShouldUseCookies);
             ctx.setCookies(serverShouldUseCookies);
-            ctx.addApplicationListener(new ApplicationListener(
-                    WsContextListener.class.getName(), false));
+            ctx.addApplicationListener(WsContextListener.class.getName());
 
             TesterMapRealm realm = new TesterMapRealm();
             realm.addUser("tomcat", "tomcat");

==================================================
TestNamingContextListener.java
index 4aad1b247e..1d0db46eee 100644
--- a/test/org/apache/catalina/core/TestAsyncContextImpl.java
+++ b/test/org/apache/catalina/core/TestAsyncContextImpl.java
@@ -56,7 +56,6 @@ import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.catalina.valves.TesterAccessLogValve;
 import org.apache.tomcat.util.buf.ByteChunk;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.util.descriptor.web.ErrorPage;
 
 public class TestAsyncContextImpl extends TomcatBaseTest {
@@ -493,8 +492,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
             }
          }
 
-        ctx.addApplicationListener(new ApplicationListener(
-                TrackingRequestListener.class.getName(), false));
+        ctx.addApplicationListener(TrackingRequestListener.class.getName());
 
         TesterAccessLogValve alv = new TesterAccessLogValve();
         ctx.getPipeline().addValve(alv);
@@ -641,8 +639,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         wrapper2.setAsyncSupported(true);
         ctx.addServletMapping("/stage2", "nonasync");
 
-        ctx.addApplicationListener(new ApplicationListener(
-                TrackingRequestListener.class.getName(), false));
+        ctx.addApplicationListener(TrackingRequestListener.class.getName());
 
         TesterAccessLogValve alv = new TesterAccessLogValve();
         ctx.getPipeline().addValve(alv);
@@ -972,8 +969,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         Tomcat.addServlet(ctx, "error", error);
         ctx.addServletMapping("/stage2", "error");
 
-        ctx.addApplicationListener(new ApplicationListener(
-                TrackingRequestListener.class.getName(), false));
+        ctx.addApplicationListener(TrackingRequestListener.class.getName());
 
         TesterAccessLogValve alv = new TesterAccessLogValve();
         ctx.getPipeline().addValve(alv);
@@ -1598,8 +1594,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
             ctx.addErrorPage(ep);
         }
 
-        ctx.addApplicationListener(new ApplicationListener(
-                TrackingRequestListener.class.getName(), false));
+        ctx.addApplicationListener(TrackingRequestListener.class.getName());
 
         TesterAccessLogValve alv = new TesterAccessLogValve();
         ctx.getPipeline().addValve(alv);

==================================================
TesterContext.java
index d838ce2c8f..3c8592c14e 100644
--- a/test/org/apache/catalina/core/TestNamingContextListener.java
+++ b/test/org/apache/catalina/core/TestNamingContextListener.java
@@ -29,7 +29,6 @@ import org.junit.Test;
 import org.apache.catalina.LifecycleState;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.util.descriptor.web.ContextEnvironment;
 
 public class TestNamingContextListener extends TomcatBaseTest {
@@ -62,8 +61,7 @@ public class TestNamingContextListener extends TomcatBaseTest {
         environment.setValue(BUG49132_VALUE);
         ctx.getNamingResources().addEnvironment(environment);
 
-        ctx.addApplicationListener(new ApplicationListener(
-                Bug49132Listener.class.getName(), false));
+        ctx.addApplicationListener(Bug49132Listener.class.getName());
 
         tomcat.start();
 
@@ -117,8 +115,7 @@ public class TestNamingContextListener extends TomcatBaseTest {
         environmentB.setValue(BUG54096_ValueB);
         ctx.getNamingResources().addEnvironment(environmentB);
 
-        ctx.addApplicationListener(new ApplicationListener(
-                Bug54096Listener.class.getName(), false));
+        ctx.addApplicationListener(Bug54096Listener.class.getName());
 
         tomcat.start();
 

==================================================
TestDefaultServlet.java
index 6fa1b8e4c3..119c0ef404 100644
--- a/test/org/apache/catalina/core/TesterContext.java
+++ b/test/org/apache/catalina/core/TesterContext.java
@@ -56,7 +56,6 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.InstanceManager;
 import org.apache.tomcat.JarScanner;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.util.descriptor.web.ApplicationParameter;
 import org.apache.tomcat.util.descriptor.web.ErrorPage;
 import org.apache.tomcat.util.descriptor.web.FilterDef;
@@ -699,7 +698,7 @@ public class TesterContext implements Context {
     }
 
     @Override
-    public void addApplicationListener(ApplicationListener listener) {
+    public void addApplicationListener(String listener) {
         // NO-OP
     }
 
@@ -790,7 +789,7 @@ public class TesterContext implements Context {
     }
 
     @Override
-    public ApplicationListener[] findApplicationListeners() {
+    public String[] findApplicationListeners() {
         return null;
     }
 

==================================================
TestWebdavServlet.java
index cb82f600b5..28b5f72c5a 100644
--- a/test/org/apache/catalina/servlets/TestDefaultServlet.java
+++ b/test/org/apache/catalina/servlets/TestDefaultServlet.java
@@ -45,7 +45,6 @@ import org.apache.catalina.startup.SimpleHttpClient;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.tomcat.util.buf.ByteChunk;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.websocket.server.WsContextListener;
 
 public class TestDefaultServlet extends TomcatBaseTest {
@@ -159,8 +158,7 @@ public class TestDefaultServlet extends TomcatBaseTest {
         // app dir is relative to server home
         org.apache.catalina.Context ctx =
             tomcat.addWebapp(null, "/examples", appDir.getAbsolutePath());
-        ctx.addApplicationListener(new ApplicationListener(
-                WsContextListener.class.getName(), false));
+        ctx.addApplicationListener(WsContextListener.class.getName());
 
         // Override the default servlet with our own mappings
         Tomcat.addServlet(ctx, "default2", new DefaultServlet());

==================================================
TestListener.java
index d8bf2d0acf..dbfa2a518c 100644
--- a/test/org/apache/catalina/servlets/TestWebdavServlet.java
+++ b/test/org/apache/catalina/servlets/TestWebdavServlet.java
@@ -30,7 +30,6 @@ import org.junit.Test;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.tomcat.util.buf.ByteChunk;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.websocket.server.WsContextListener;
 
 public class TestWebdavServlet extends TomcatBaseTest {
@@ -95,8 +94,7 @@ public class TestWebdavServlet extends TomcatBaseTest {
 
         Tomcat.addServlet(ctx, "webdav", new WebdavServlet());
         ctx.addServletMapping("/webdav/*", "webdav");
-        ctx.addApplicationListener(new ApplicationListener(
-                WsContextListener.class.getName(), false));
+        ctx.addApplicationListener(WsContextListener.class.getName());
 
         tomcat.start();
 

==================================================
TestTomcat.java
index 2c70dda042..e5a40a0f6a 100644
--- a/test/org/apache/catalina/startup/TestListener.java
+++ b/test/org/apache/catalina/startup/TestListener.java
@@ -30,7 +30,6 @@ import static org.junit.Assert.assertTrue;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 
 public class TestListener extends TomcatBaseTest {
 
@@ -65,8 +64,7 @@ public class TestListener extends TomcatBaseTest {
 
         // SCL2 pretends to be in web.xml, and tries to install a
         // ServletContextInitializer.
-        context.addApplicationListener(new ApplicationListener(
-                SCL2.class.getName(), false));
+        context.addApplicationListener(SCL2.class.getName());
         tomcat.start();
 
         //check that the ServletContextInitializer wasn't initialized.

==================================================
TestELInterpreterFactory.java
index 5b8cf5eb48..b3d4d8b0b4 100644
--- a/test/org/apache/catalina/startup/TestTomcat.java
+++ b/test/org/apache/catalina/startup/TestTomcat.java
@@ -43,7 +43,6 @@ import org.junit.Test;
 
 import org.apache.catalina.core.StandardContext;
 import org.apache.tomcat.util.buf.ByteChunk;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.util.descriptor.web.ContextEnvironment;
 import org.apache.tomcat.util.descriptor.web.ContextResourceLink;
 import org.apache.tomcat.websocket.server.WsContextListener;
@@ -205,8 +204,7 @@ public class TestTomcat extends TomcatBaseTest {
         // app dir is relative to server home
         org.apache.catalina.Context ctxt  = tomcat.addWebapp(
                 null, "/examples", appDir.getAbsolutePath());
-        ctxt.addApplicationListener(new ApplicationListener(
-                WsContextListener.class.getName(), false));
+        ctxt.addApplicationListener(WsContextListener.class.getName());
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
@@ -222,8 +220,7 @@ public class TestTomcat extends TomcatBaseTest {
         // app dir is relative to server home
         org.apache.catalina.Context ctxt  = tomcat.addWebapp(
                 null, "/examples", appDir.getAbsolutePath());
-        ctxt.addApplicationListener(new ApplicationListener(
-                WsContextListener.class.getName(), false));
+        ctxt.addApplicationListener(WsContextListener.class.getName());
 
         tomcat.start();
 
@@ -343,8 +340,7 @@ public class TestTomcat extends TomcatBaseTest {
         // app dir is relative to server home
         org.apache.catalina.Context ctx =
             tomcat.addWebapp(null, "/examples", appDir.getAbsolutePath());
-        ctx.addApplicationListener(new ApplicationListener(
-                WsContextListener.class.getName(), false));
+        ctx.addApplicationListener(WsContextListener.class.getName());
 
         Tomcat.addServlet(ctx, "testGetResource", new GetResource());
         ctx.addServletMapping("/testGetResource", "testGetResource");

==================================================
TestCustomSsl.java
index d7a6e00f2a..b22f09dfa9 100644
--- a/test/org/apache/jasper/compiler/TestELInterpreterFactory.java
+++ b/test/org/apache/jasper/compiler/TestELInterpreterFactory.java
@@ -30,7 +30,6 @@ import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.jasper.JspCompilationContext;
 import org.apache.jasper.compiler.ELInterpreterFactory.DefaultELInterpreter;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 
 public class TestELInterpreterFactory extends TomcatBaseTest {
 
@@ -79,8 +78,7 @@ public class TestELInterpreterFactory extends TomcatBaseTest {
         context.removeAttribute(ELInterpreter.class.getName());
 
         ctx.stop();
-        ctx.addApplicationListener((new ApplicationListener(
-                Bug54239Listener.class.getName(), false)));
+        ctx.addApplicationListener(Bug54239Listener.class.getName());
         ctx.start();
 
         interpreter = ELInterpreterFactory.getELInterpreter(ctx.getServletContext());

==================================================
TestSsl.java
index 4d87a44557..d2b93b5876 100644
--- a/test/org/apache/tomcat/util/net/TestCustomSsl.java
+++ b/test/org/apache/tomcat/util/net/TestCustomSsl.java
@@ -35,7 +35,6 @@ import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.coyote.ProtocolHandler;
 import org.apache.coyote.http11.AbstractHttp11JsseProtocol;
 import org.apache.tomcat.util.buf.ByteChunk;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.util.net.jsse.TesterBug50640SslImpl;
 import org.apache.tomcat.websocket.server.WsContextListener;
 
@@ -75,8 +74,7 @@ public class TestCustomSsl extends TomcatBaseTest {
         File appDir = new File(getBuildDirectory(), "webapps/examples");
         Context ctxt  = tomcat.addWebapp(
                 null, "/examples", appDir.getAbsolutePath());
-        ctxt.addApplicationListener(new ApplicationListener(
-                WsContextListener.class.getName(), false));
+        ctxt.addApplicationListener(WsContextListener.class.getName());
 
         tomcat.start();
         ByteChunk res = getUrl("https://localhost:" + getPort() +

==================================================
TestWebSocketFrameClient.java
index 37584ec372..0ce47deb80 100644
--- a/test/org/apache/tomcat/util/net/TestSsl.java
+++ b/test/org/apache/tomcat/util/net/TestSsl.java
@@ -41,7 +41,6 @@ import org.apache.catalina.startup.TesterServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.tomcat.util.buf.ByteChunk;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.websocket.server.WsContextListener;
 
 /**
@@ -60,8 +59,7 @@ public class TestSsl extends TomcatBaseTest {
         File appDir = new File(getBuildDirectory(), "webapps/examples");
         org.apache.catalina.Context ctxt  = tomcat.addWebapp(
                 null, "/examples", appDir.getAbsolutePath());
-        ctxt.addApplicationListener(new ApplicationListener(
-                WsContextListener.class.getName(), false));
+        ctxt.addApplicationListener(WsContextListener.class.getName());
 
         TesterSupport.initSsl(tomcat);
 
@@ -80,8 +78,7 @@ public class TestSsl extends TomcatBaseTest {
         File appDir = new File(getBuildDirectory(), "webapps/examples");
         org.apache.catalina.Context ctxt  = tomcat.addWebapp(
                 null, "/examples", appDir.getAbsolutePath());
-        ctxt.addApplicationListener(new ApplicationListener(
-                WsContextListener.class.getName(), false));
+        ctxt.addApplicationListener(WsContextListener.class.getName());
 
         TesterSupport.initSsl(tomcat, "localhost-copy1.jks", "changeit",
                 "tomcatpass");

==================================================
TestWebSocketFrameClientSSL.java
index a63485d49e..cad8a1bcb2 100644
--- a/test/org/apache/tomcat/websocket/TestWebSocketFrameClient.java
+++ b/test/org/apache/tomcat/websocket/TestWebSocketFrameClient.java
@@ -33,7 +33,6 @@ import org.apache.catalina.Context;
 import org.apache.catalina.servlets.DefaultServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.websocket.TesterMessageCountClient.BasicText;
 import org.apache.tomcat.websocket.TesterMessageCountClient.TesterProgrammaticEndpoint;
 
@@ -46,8 +45,7 @@ public class TestWebSocketFrameClient extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                TesterFirehoseServer.Config.class.getName(), false));
+        ctx.addApplicationListener(TesterFirehoseServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 

==================================================
TestWsPingPongMessages.java
index 113acea9fb..95d95c7c83 100644
--- a/test/org/apache/tomcat/websocket/TestWebSocketFrameClientSSL.java
+++ b/test/org/apache/tomcat/websocket/TestWebSocketFrameClientSSL.java
@@ -35,7 +35,6 @@ import org.apache.catalina.Context;
 import org.apache.catalina.servlets.DefaultServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.util.net.TesterSupport;
 import org.apache.tomcat.websocket.TesterMessageCountClient.BasicText;
 import org.apache.tomcat.websocket.TesterMessageCountClient.SleepingText;
@@ -50,8 +49,7 @@ public class TestWebSocketFrameClientSSL extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                TesterFirehoseServer.Config.class.getName(), false));
+        ctx.addApplicationListener(TesterFirehoseServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 
@@ -106,8 +104,7 @@ public class TestWebSocketFrameClientSSL extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                TesterFirehoseServer.Config.class.getName(), false));
+        ctx.addApplicationListener(TesterFirehoseServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 

==================================================
TestWsRemoteEndpoint.java
index b88ed18cb2..7d537df90b 100644
--- a/test/org/apache/tomcat/websocket/TestWsPingPongMessages.java
+++ b/test/org/apache/tomcat/websocket/TestWsPingPongMessages.java
@@ -34,7 +34,6 @@ import org.apache.catalina.Context;
 import org.apache.catalina.servlets.DefaultServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.websocket.TesterMessageCountClient.TesterEndpoint;
 import org.apache.tomcat.websocket.TesterMessageCountClient.TesterProgrammaticEndpoint;
 
@@ -50,8 +49,7 @@ public class TestWsPingPongMessages extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx = tomcat.addContext("",
                 System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                TesterEchoServer.Config.class.getName(), false));
+        ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
 
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");

==================================================
TestWsSubprotocols.java
index dda7727b79..bdcb7d1f4d 100644
--- a/test/org/apache/tomcat/websocket/TestWsRemoteEndpoint.java
+++ b/test/org/apache/tomcat/websocket/TestWsRemoteEndpoint.java
@@ -39,7 +39,6 @@ import org.apache.catalina.Context;
 import org.apache.catalina.servlets.DefaultServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.websocket.TesterMessageCountClient.AsyncBinary;
 import org.apache.tomcat.websocket.TesterMessageCountClient.AsyncHandler;
 import org.apache.tomcat.websocket.TesterMessageCountClient.AsyncText;
@@ -86,8 +85,7 @@ public class TestWsRemoteEndpoint extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                TesterEchoServer.Config.class.getName(), false));
+        ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 

==================================================
TestWsWebSocketContainer.java
index 1f8e244e0d..639e47a37f 100644
--- a/test/org/apache/tomcat/websocket/TestWsSubprotocols.java
+++ b/test/org/apache/tomcat/websocket/TestWsSubprotocols.java
@@ -40,7 +40,6 @@ import org.apache.catalina.Context;
 import org.apache.catalina.servlets.DefaultServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.websocket.TesterMessageCountClient.TesterProgrammaticEndpoint;
 import org.apache.tomcat.websocket.server.Constants;
 import org.apache.tomcat.websocket.server.WsContextListener;
@@ -53,8 +52,7 @@ public class TestWsSubprotocols extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx = tomcat.addContext("",
                 System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(Config.class
-                .getName(), false));
+        ctx.addApplicationListener(Config.class.getName());
 
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");

==================================================
TesterConnectionLimit.java
index 09d198a94c..47c9ab9314 100644
--- a/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
+++ b/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
@@ -50,7 +50,6 @@ import org.apache.catalina.servlets.DefaultServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.coyote.http11.Http11Protocol;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.util.net.TesterSupport;
 import org.apache.tomcat.websocket.TesterMessageCountClient.BasicBinary;
 import org.apache.tomcat.websocket.TesterMessageCountClient.BasicHandler;
@@ -84,8 +83,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                TesterEchoServer.Config.class.getName(), false));
+        ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 
@@ -121,8 +119,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                TesterEchoServer.Config.class.getName(), false));
+        ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
 
         tomcat.start();
 
@@ -141,8 +138,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                TesterEchoServer.Config.class.getName(), false));
+        ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
 
         tomcat.start();
 
@@ -209,8 +205,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                TesterEchoServer.Config.class.getName(), false));
+        ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 
@@ -319,8 +314,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                BlockingConfig.class.getName(), false));
+        ctx.addApplicationListener(BlockingConfig.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 
@@ -411,8 +405,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                ConstantTxConfig.class.getName(), false));
+        ctx.addApplicationListener(ConstantTxConfig.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 
@@ -624,8 +617,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                TesterEchoServer.Config.class.getName(), false));
+        ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 
@@ -674,8 +666,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                TesterEchoServer.Config.class.getName(), false));
+        ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 
@@ -733,8 +724,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                TesterEchoServer.Config.class.getName(), false));
+        ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 
@@ -820,8 +810,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                TesterEchoServer.Config.class.getName(), false));
+        ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 
@@ -905,8 +894,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                TesterEchoServer.Config.class.getName(), false));
+        ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 

==================================================
TestEncodingDecoding.java
index 38abe178b2..9796aea8cf 100644
--- a/test/org/apache/tomcat/websocket/TesterConnectionLimit.java
+++ b/test/org/apache/tomcat/websocket/TesterConnectionLimit.java
@@ -31,7 +31,6 @@ import org.apache.catalina.Context;
 import org.apache.catalina.servlets.DefaultServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.websocket.TesterMessageCountClient.TesterProgrammaticEndpoint;
 
 
@@ -47,8 +46,7 @@ public class TesterConnectionLimit extends TomcatBaseTest{
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                TesterEchoServer.Config.class.getName(), false));
+        ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 

==================================================
TestPojoEndpointBase.java
index 40ee1eb54c..c49f2dedc2 100644
--- a/test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java
+++ b/test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java
@@ -53,7 +53,6 @@ import org.apache.catalina.Context;
 import org.apache.catalina.servlets.DefaultServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.websocket.pojo.TesterUtil.ServerConfigListener;
 import org.apache.tomcat.websocket.pojo.TesterUtil.SingletonConfigurator;
 import org.apache.tomcat.websocket.server.WsContextListener;
@@ -72,8 +71,7 @@ public class TestEncodingDecoding extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                ProgramaticServerEndpointConfig.class.getName(), false));
+        ctx.addApplicationListener(ProgramaticServerEndpointConfig.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 
@@ -124,8 +122,7 @@ public class TestEncodingDecoding extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                ServerConfigListener.class.getName(), false));
+        ctx.addApplicationListener(ServerConfigListener.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 
@@ -185,8 +182,7 @@ public class TestEncodingDecoding extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                ServerConfigListener.class.getName(), false));
+        ctx.addApplicationListener(ServerConfigListener.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 

==================================================
TestPojoMethodMapping.java
index 1297f6af27..c76cb83a80 100644
--- a/test/org/apache/tomcat/websocket/pojo/TestPojoEndpointBase.java
+++ b/test/org/apache/tomcat/websocket/pojo/TestPojoEndpointBase.java
@@ -37,7 +37,6 @@ import org.apache.catalina.Context;
 import org.apache.catalina.servlets.DefaultServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.websocket.TestUtil;
 import org.apache.tomcat.websocket.pojo.TesterUtil.ServerConfigListener;
 import org.apache.tomcat.websocket.pojo.TesterUtil.SingletonConfigurator;
@@ -56,8 +55,7 @@ public class TestPojoEndpointBase extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                ServerConfigListener.class.getName(), false));
+        ctx.addApplicationListener(ServerConfigListener.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 
@@ -89,8 +87,7 @@ public class TestPojoEndpointBase extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                ServerConfigListener.class.getName(), false));
+        ctx.addApplicationListener(ServerConfigListener.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 

==================================================
TestWsServerContainer.java
index 92f99028dd..ff428140fa 100644
--- a/test/org/apache/tomcat/websocket/pojo/TestPojoMethodMapping.java
+++ b/test/org/apache/tomcat/websocket/pojo/TestPojoMethodMapping.java
@@ -36,7 +36,6 @@ import org.apache.catalina.Context;
 import org.apache.catalina.servlets.DefaultServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.websocket.pojo.TesterUtil.ServerConfigListener;
 import org.apache.tomcat.websocket.pojo.TesterUtil.SimpleClient;
 import org.apache.tomcat.websocket.pojo.TesterUtil.SingletonConfigurator;
@@ -59,8 +58,7 @@ public class TestPojoMethodMapping extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                ServerConfigListener.class.getName(), false));
+        ctx.addApplicationListener(ServerConfigListener.class.getName());
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 

==================================================
