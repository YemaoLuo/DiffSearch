d438fa14adba74485970c4c60cf26c80d709ca22
==================================================
Take advantage of newly exposed Charset constants
==================================================
Mark Emlyn
==================================================
Thu Jan 19 15:13:16 2012 +0000
==================================================
Base64.java
Take advantage of newly exposed Charset constants

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1233423 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ByteChunk.java
index 685110c763..2e2d392b60 100644
--- a/java/org/apache/catalina/util/Base64.java
+++ b/java/org/apache/catalina/util/Base64.java
@@ -17,8 +17,6 @@
 
 package org.apache.catalina.util;
 
-import java.io.UnsupportedEncodingException;
-
 import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.CharChunk;
@@ -172,15 +170,7 @@ public final class  Base64
             encodedData[encodedIndex + 3] = PAD;
         }
 
-        String result;
-        try {
-            result = new String(encodedData,
-                    B2CConverter.getCharset("ISO-8859-1"));
-        } catch (UnsupportedEncodingException e) {
-            // Should never happen but in case it does...
-            result = new String(encodedData);
-        }
-        return result;
+        return new String(encodedData, B2CConverter.ISO_8859_1);
     }
 
     /**

==================================================
TesterParametersPerformance.java
index dba037a27b..b1f8266689 100644
--- a/java/org/apache/tomcat/util/buf/ByteChunk.java
+++ b/java/org/apache/tomcat/util/buf/ByteChunk.java
@@ -18,7 +18,6 @@ package org.apache.tomcat.util.buf;
 
 import java.io.IOException;
 import java.io.Serializable;
-import java.io.UnsupportedEncodingException;
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 import java.nio.charset.Charset;
@@ -100,17 +99,7 @@ public final class ByteChunk implements Cloneable, Serializable {
         as most standards seem to converge, but the servlet API requires
         8859_1, and this object is used mostly for servlets.
     */
-    public static final Charset DEFAULT_CHARSET;
-
-    static {
-        Charset c = null;
-        try {
-            c = B2CConverter.getCharset("ISO-8859-1");
-        } catch (UnsupportedEncodingException e) {
-            // Should never happen since all JVMs must support ISO-8859-1
-        }
-        DEFAULT_CHARSET = c;
-    }
+    public static final Charset DEFAULT_CHARSET = B2CConverter.ISO_8859_1;
 
     // byte[]
     private byte[] buff;

==================================================
