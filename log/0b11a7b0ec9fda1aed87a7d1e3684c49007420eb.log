0b11a7b0ec9fda1aed87a7d1e3684c49007420eb
==================================================
Use StringManager to provide i18n support in the org.apache.catalina.tribes.io package.
==================================================
Keiichi Fujino
==================================================
Thu May 21 09:51:41 2015 +0000
==================================================
BufferPool.java
Use StringManager to provide i18n support in the org.apache.catalina.tribes.io package.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1680790 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ObjectReader.java
new file mode 100644
index 0000000000..1e82de4f3d
--- /dev/null
+++ b/java/org/apache/catalina/tribes/io/LocalStrings.properties
@@ -0,0 +1,24 @@
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+bufferPool.created=Created a buffer pool with max size:{0} bytes of type: {1}
+objectReader.retrieveFailed.socketReceiverBufferSize=Unable to retrieve the socket receiver buffer size, setting to default 43800 bytes.
+replicationStream.conflict=conflicting non-public interface class loaders
+xByteBuffer.size.larger.buffer=Size is larger than existing buffer.
+xByteBuffer.unableTrim=Can''t trim more bytes than are available. length:{0} trim:{1}
+xByteBuffer.discarded.invalidHeader=Discarded the package, invalid header
+xByteBuffer.no.package=No package exists in XByteBuffer
+xByteBuffer.unableCreate=Unable to create data package, buffer is too small.
+xByteBuffer.wrong.class=Message has the wrong class. It should implement Serializable, instead it is:{0}
\ No newline at end of file

==================================================
ReplicationStream.java
index cc8edad250..6ea307e703 100644
--- a/java/org/apache/catalina/tribes/io/ObjectReader.java
+++ b/java/org/apache/catalina/tribes/io/ObjectReader.java
@@ -22,6 +22,7 @@ import java.nio.ByteBuffer;
 import java.nio.channels.SocketChannel;
 
 import org.apache.catalina.tribes.ChannelMessage;
+import org.apache.catalina.tribes.util.StringManager;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
@@ -37,6 +38,7 @@ import org.apache.juli.logging.LogFactory;
 public class ObjectReader {
 
     private static final Log log = LogFactory.getLog(ObjectReader.class);
+    protected static final StringManager sm = StringManager.getManager(ObjectReader.class);
 
     private XByteBuffer buffer;
 
@@ -65,7 +67,7 @@ public class ObjectReader {
             this.buffer = new XByteBuffer(socket.getReceiveBufferSize(), true);
         }catch ( IOException x ) {
             //unable to get buffer size
-            log.warn("Unable to retrieve the socket receiver buffer size, setting to default 43800 bytes.");
+            log.warn(sm.getString("objectReader.retrieveFailed.socketReceiverBufferSize"));
             this.buffer = new XByteBuffer(43800,true);
         }
     }

==================================================
XByteBuffer.java
index 1f0e2232a8..e1261c1d86 100644
--- a/java/org/apache/catalina/tribes/io/ReplicationStream.java
+++ b/java/org/apache/catalina/tribes/io/ReplicationStream.java
@@ -25,6 +25,8 @@ import java.io.ObjectStreamClass;
 import java.lang.reflect.Modifier;
 import java.lang.reflect.Proxy;
 
+import org.apache.catalina.tribes.util.StringManager;
+
 /**
  * Custom subclass of <code>ObjectInputStream</code> that loads from the
  * class loader for this web application.  This allows classes defined only
@@ -35,6 +37,7 @@ import java.lang.reflect.Proxy;
  */
 public final class ReplicationStream extends ObjectInputStream {
 
+    protected static final StringManager sm = StringManager.getManager(ReplicationStream.class);
 
     /**
      * The class loader we will use to resolve classes.
@@ -119,7 +122,7 @@ public final class ReplicationStream extends ObjectInputStream {
                 if (hasNonPublicInterface) {
                     if (nonPublicLoader != cl.getClassLoader()) {
                         throw new IllegalAccessError(
-                                "conflicting non-public interface class loaders");
+                                sm.getString("replicationStream.conflict"));
                     }
                 } else {
                     nonPublicLoader = cl.getClassLoader();

==================================================
