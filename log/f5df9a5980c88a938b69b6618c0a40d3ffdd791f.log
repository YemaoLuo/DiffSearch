f5df9a5980c88a938b69b6618c0a40d3ffdd791f
==================================================
Align keep-alive disable capability across all HTTP processors
==================================================
Mark Emlyn
==================================================
Tue Aug 16 15:45:46 2011 +0000
==================================================
AbstractHttp11Processor.java
Align keep-alive disable capability across all HTTP processors

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1158331 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index bc28feb011..0baadc0dc0 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -777,6 +777,14 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
     abstract void actionInternal(ActionCode actionCode, Object param);
     
 
+    /**
+     * Processors (currently only HTTP BIO) may elect to disable HTTP keep-alive
+     * in some circumstances. This method allows the processor implementation to
+     * determine if keep-alive should be disabled or not. 
+     */
+    protected abstract boolean disableKeepAlive();
+
+
     /**
      * After reading the request headers, we have to setup the request filters.
      */

==================================================
Http11NioProcessor.java
index df0076ded0..dd62aa38a6 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -184,6 +184,10 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
 
         long soTimeout = endpoint.getSoTimeout();
 
+        if (disableKeepAlive()) {
+            socketWrapper.setKeepAliveLeft(0);
+        }
+
         boolean keptAlive = false;
         boolean openSocket = false;
         boolean sendfileInProgress = false;
@@ -352,6 +356,12 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
     }
 
 
+    @Override
+    protected boolean disableKeepAlive() {
+        return false;
+    }
+
+
     @Override
     protected void resetTimeouts() {
         // NOOP for APR

==================================================
Http11Processor.java
index c0dd5762d4..564e2fba29 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -213,6 +213,10 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
         
         long soTimeout = endpoint.getSoTimeout();
 
+        if (disableKeepAlive()) {
+            socketWrapper.setKeepAliveLeft(0);
+        }
+
         boolean keptAlive = false;
         boolean openSocket = false;
         boolean readComplete = true;
@@ -398,6 +402,12 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
     }
 
 
+    @Override
+    protected boolean disableKeepAlive() {
+        return false;
+    }
+
+
     @Override
     public void recycleInternal() {
         socket = null;

==================================================
