89c3cb56a2c44421290eaee7ffe06be323631fb2
==================================================
Removed use of ThreadLocal. Added some Javadoc comments.
==================================================
Mark Thomas
==================================================
Wed Jun 17 08:47:03 2015 +0000
==================================================
JaspicAuthenticator.java
Removed use of ThreadLocal. Added some Javadoc comments.
Patch provided by fjodorver.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1685947 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JaspicCallbackHandler.java
index a3843a48de..4e7a0a11ca 100644
--- a/java/org/apache/catalina/authenticator/jaspic/JaspicAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/jaspic/JaspicAuthenticator.java
@@ -34,10 +34,14 @@ import javax.servlet.http.HttpServletResponse;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.authenticator.AuthenticatorBase;
 import org.apache.catalina.connector.Request;
-
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
+/**
+ * Security valve which implements JASPIC authentication
+ * @author Fjodor Vershinin
+ *
+ */
 public class JaspicAuthenticator extends AuthenticatorBase {
 
     private static final Log log = LogFactory.getLog(JaspicAuthenticator.class);
@@ -45,35 +49,44 @@ public class JaspicAuthenticator extends AuthenticatorBase {
     private static final String AUTH_TYPE = "JASPIC";
     private static final String MESSAGE_LAYER = "HttpServlet";
 
-    private JaspicCallbackHandler callbackHandler;
     private Subject serviceSubject;
 
     @SuppressWarnings("rawtypes")
     private Map authProperties = null;
 
-
     @Override
     protected synchronized void startInternal() throws LifecycleException {
         super.startInternal();
-        callbackHandler = new JaspicCallbackHandler(container.getRealm());
         serviceSubject = new Subject();
     }
 
-
     @Override
     public boolean authenticate(Request request, HttpServletResponse response) throws IOException {
         MessageInfo messageInfo = new MessageInfoImpl(request, response, true);
+        JaspicCallbackHandler callbackHandler = getJaspicCallbackHandler();
+
         AuthConfigFactory factory = AuthConfigFactory.getFactory();
-        String appContext = request.getLocalName() + " " + request.getContextPath();
+        String appContext = getAppContextId(request);
 
-        AuthConfigProvider configProvider =
-                factory.getConfigProvider(MESSAGE_LAYER, appContext, null);
-        ServerAuthConfig authConfig = getAuthConfig(appContext, configProvider);
-        String authContextId = authConfig.getAuthContextID(messageInfo);
+        AuthConfigProvider configProvider = factory.getConfigProvider(MESSAGE_LAYER, appContext,
+                null);
+        if (configProvider == null) {
+            handleUnauthorizedRequest(response, null);
+            return false;
+        }
 
-        ServerAuthContext authContext = null;
-        authContext = getAuthContext(authConfig, authContextId, authProperties, authContext);
-        AuthStatus authStatus = validateRequest(messageInfo, authContext);
+        AuthStatus authStatus;
+        try {
+            ServerAuthConfig authConfig = configProvider.getServerAuthConfig(MESSAGE_LAYER,
+                    appContext, callbackHandler);
+            String messageAuthContextId = authConfig.getAuthContextID(messageInfo);
+            ServerAuthContext authContext = authConfig.getAuthContext(messageAuthContextId,
+                    serviceSubject, authProperties);
+            authStatus = authContext.validateRequest(messageInfo, new Subject(), serviceSubject);
+        } catch (AuthException e) {
+            handleUnauthorizedRequest(response, e);
+            return false;
+        }
 
         if (authStatus == AuthStatus.SUCCESS) {
             Principal principal = callbackHandler.getPrincipal();
@@ -82,52 +95,33 @@ public class JaspicAuthenticator extends AuthenticatorBase {
             }
             return true;
         }
-
         return false;
     }
 
-
-    private AuthStatus validateRequest(MessageInfo messageInfo, ServerAuthContext authContext) {
-        Subject clientSubject = new Subject();
-        try {
-            return authContext.validateRequest(messageInfo, clientSubject, serviceSubject);
-        } catch (AuthException e) {
-            throw new IllegalStateException(e);
-        }
-    }
-
-
-    @SuppressWarnings("rawtypes")
-    private ServerAuthContext getAuthContext(ServerAuthConfig authConfig, String authContextId,
-            Map authProperties, ServerAuthContext authContext) {
-        try {
-            return authConfig.getAuthContext(authContextId, serviceSubject, authProperties);
-        } catch (AuthException e) {
-            throw new IllegalStateException(e);
-        }
-    }
-
-
     @Override
     public void login(String userName, String password, Request request) throws ServletException {
         throw new IllegalStateException("not implemented yet!");
     }
 
-
     @Override
     public void logout(Request request) {
         throw new IllegalStateException("not implemented yet!");
     }
 
+    private void handleUnauthorizedRequest(HttpServletResponse response, AuthException e)
+            throws IOException {
+        log.error(sm.getString("authenticator.unauthorized"), e);
+        response.sendError(HttpServletResponse.SC_UNAUTHORIZED,
+                sm.getString("authenticator.unauthorized"));
+    }
 
-    private ServerAuthConfig getAuthConfig(String appContext, AuthConfigProvider configProvider) {
-        try {
-            return configProvider.getServerAuthConfig(MESSAGE_LAYER, appContext, callbackHandler);
-        } catch (AuthException e) {
-            throw new IllegalStateException(e);
-        }
+    private String getAppContextId(Request request) {
+        return request.getServletContext().getVirtualServerName() + " " + request.getContextPath();
     }
 
+    private JaspicCallbackHandler getJaspicCallbackHandler() {
+        return new JaspicCallbackHandler(container.getRealm());
+    }
 
     @Override
     protected String getAuthMethod() {

==================================================
PrincipalGroupCallback.java
index 10c2aef476..8310a1c0c4 100644
--- a/java/org/apache/catalina/authenticator/jaspic/JaspicCallbackHandler.java
+++ b/java/org/apache/catalina/authenticator/jaspic/JaspicCallbackHandler.java
@@ -17,7 +17,6 @@
 package org.apache.catalina.authenticator.jaspic;
 
 import java.io.IOException;
-import java.security.Principal;
 import java.util.Collections;
 
 import javax.security.auth.Subject;
@@ -32,12 +31,17 @@ import org.apache.catalina.Realm;
 import org.apache.catalina.realm.GenericPrincipal;
 import org.apache.tomcat.util.res.StringManager;
 
+/**
+ * Callback handler which converts callbacks to realm
+ * @author Fjodor Vershinin
+ *
+ */
 public class JaspicCallbackHandler implements CallbackHandler {
     protected static final StringManager sm = StringManager.getManager(JaspicCallbackHandler.class);
 
     private Realm realm;
 
-    private ThreadLocal<PrincipalGroupCallback> principalGroupCallback = new ThreadLocal<>();
+    private PrincipalGroupCallback principalGroupCallback = new PrincipalGroupCallback();
 
     public JaspicCallbackHandler(Realm realm) {
         this.realm = realm;
@@ -45,21 +49,24 @@ public class JaspicCallbackHandler implements CallbackHandler {
 
     @Override
     public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
-        principalGroupCallback.set(new PrincipalGroupCallback());
+        if (callbacks == null) {
+            return;
+        }
         for (Callback callback : callbacks) {
             handleCallback(callback);
         }
     }
 
-    public Principal getPrincipal() {
-        return principalGroupCallback.get().getPrincipal();
+    public GenericPrincipal getPrincipal() {
+        return principalGroupCallback.getPrincipal();
     }
 
     private void handleCallback(Callback callback) {
+
         if (callback instanceof CallerPrincipalCallback) {
-            principalGroupCallback.get().addCallback(callback);
+            principalGroupCallback.setCallerPrincipalCallback((CallerPrincipalCallback) callback);
         } else if (callback instanceof GroupPrincipalCallback) {
-            principalGroupCallback.get().addCallback(callback);
+            principalGroupCallback.setCallerPrincipalCallback((GroupPrincipalCallback) callback);
         } else if (callback instanceof PasswordValidationCallback) {
             handlePasswordValidationCallback((PasswordValidationCallback) callback);
         } else {

==================================================
