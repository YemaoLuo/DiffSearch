d8354c788184a047248ed09f970e1ee17a6bd19d
==================================================
As per EG discussion, implement SERVLET_SPEC-73
==================================================
Mark Thomas
==================================================
Tue Mar 8 14:12:21 2016 +0000
==================================================
Request.java
As per EG discussion, implement SERVLET_SPEC-73

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1734095 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ApplicationMapping.java
index c9c81fe52f..229de2bd50 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -484,6 +484,7 @@ public class Request implements HttpServletRequest {
         }
 
         mappingData.recycle();
+        applicationMapping.recycle();
 
         applicationRequest = null;
         if (Globals.IS_SECURITY_ENABLED || Connector.RECYCLE_FACADES) {
@@ -622,6 +623,7 @@ public class Request implements HttpServletRequest {
      * Mapping data.
      */
     protected final MappingData mappingData = new MappingData();
+    private final ApplicationMapping applicationMapping = new ApplicationMapping(mappingData);
 
     /**
      * @return mapping data.
@@ -2179,7 +2181,7 @@ public class Request implements HttpServletRequest {
 
     @Override
     public Mapping getMapping() {
-        return new ApplicationMapping(mappingData);
+        return applicationMapping.getMapping();
     }
 
 

==================================================
Mapper.java
index d59c8484f0..c12bcbb758 100644
--- a/java/org/apache/catalina/core/ApplicationMapping.java
+++ b/java/org/apache/catalina/core/ApplicationMapping.java
@@ -21,30 +21,81 @@ import javax.servlet.http.MappingMatch;
 
 import org.apache.catalina.mapper.MappingData;
 
-public class ApplicationMapping implements Mapping {
+public class ApplicationMapping {
 
-    private final String matchValue;
-    private final String pattern;
-    private final MappingMatch mappingMatch;
+    private final MappingData mappingData;
+
+    private volatile Mapping mapping = null;
 
     public ApplicationMapping(MappingData mappingData) {
-        matchValue = mappingData.matchValue;
-        pattern = mappingData.matchPattern;
-        mappingMatch = mappingData.matchType;
+        this.mappingData = mappingData;
     }
 
-    @Override
-    public String getMatchValue() {
-        return matchValue;
+    public Mapping getMapping() {
+        if (mapping == null) {
+            switch (mappingData.matchType) {
+                case CONTEXT_ROOT:
+                    mapping = new MappingImpl("", "", mappingData.matchType);
+                    break;
+                case DEFAULT:
+                    mapping = new MappingImpl("/", "/", mappingData.matchType);
+                    break;
+                case EXACT:
+                    mapping = new MappingImpl(mappingData.wrapperPath.toString(),
+                            mappingData.wrapperPath.toString(), mappingData.matchType);
+                    break;
+                case EXTENSION:
+                    String path = mappingData.wrapperPath.toString();
+                    int extIndex = path.lastIndexOf('.');
+                    mapping = new MappingImpl(path.substring(0, extIndex),
+                            "*" + path.substring(extIndex), mappingData.matchType);
+                    break;
+                case PATH:
+                    mapping = new MappingImpl(mappingData.pathInfo.toString(),
+                            mappingData.wrapperPath.toString() + "/*",
+                            mappingData.matchType);
+                    break;
+                case IMPLICIT:
+                    // Treat IMPLICIT as UNKNOWN since Tomcat doesn't use
+                    // implicit mappings
+                case UNKNOWN:
+                    mapping = new MappingImpl("", "", mappingData.matchType);
+                    break;
+            }
+        }
+
+        return mapping;
     }
 
-    @Override
-    public String getPattern() {
-        return pattern;
+    public void recycle() {
+        mapping = null;
     }
 
-    @Override
-    public MappingMatch getMatchType() {
-        return mappingMatch;
+    private static class MappingImpl implements Mapping {
+
+        private final String matchValue;
+        private final String pattern;
+        private final MappingMatch mappingType;
+
+        public MappingImpl(String matchValue, String pattern, MappingMatch mappingType) {
+            this.matchValue = matchValue;
+            this.pattern = pattern;
+            this.mappingType = mappingType;
+        }
+
+        @Override
+        public String getMatchValue() {
+            return matchValue;
+        }
+
+        @Override
+        public String getPattern() {
+            return pattern;
+        }
+
+        @Override
+        public MappingMatch getMatchType() {
+            return mappingType;
+        }
     }
 }

==================================================
MappingData.java
index 0d2efa833c..a8ce5ad957 100644
--- a/java/org/apache/catalina/mapper/Mapper.java
+++ b/java/org/apache/catalina/mapper/Mapper.java
@@ -25,6 +25,8 @@ import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CopyOnWriteArrayList;
 
+import javax.servlet.http.MappingMatch;
+
 import org.apache.catalina.Context;
 import org.apache.catalina.Host;
 import org.apache.catalina.WebResource;
@@ -992,6 +994,7 @@ public final class Mapper {
                     (path.getBuffer(), path.getStart(), path.getLength());
                 mappingData.wrapperPath.setChars
                     (path.getBuffer(), path.getStart(), path.getLength());
+                mappingData.matchType = MappingMatch.DEFAULT;
             }
             // Redirection to a folder
             char[] buf = path.getBuffer();
@@ -1040,8 +1043,10 @@ public final class Mapper {
                 mappingData.wrapperPath.setString("");
                 // This seems wrong but it is what the spec says...
                 mappingData.contextPath.setString("");
+                mappingData.matchType = MappingMatch.CONTEXT_ROOT;
             } else {
                 mappingData.wrapperPath.setString(wrapper.name);
+                mappingData.matchType = MappingMatch.EXACT;
             }
         }
     }
@@ -1093,6 +1098,7 @@ public final class Mapper {
                     (path.getBuffer(), path.getOffset(), path.getLength());
                 mappingData.wrapper = wrappers[pos].object;
                 mappingData.jspWildCard = wrappers[pos].jspWildCard;
+                mappingData.matchType = MappingMatch.PATH;
             }
         }
     }
@@ -1137,6 +1143,7 @@ public final class Mapper {
                     mappingData.requestPath.setChars(buf, servletPath, pathEnd
                             - servletPath);
                     mappingData.wrapper = wrapper.object;
+                    mappingData.matchType = MappingMatch.EXTENSION;
                 }
                 path.setOffset(servletPath);
                 path.setEnd(pathEnd);

==================================================
TestApplicationMapping.java
index a8ab8213ef..61b65f5a2a 100644
--- a/java/org/apache/catalina/mapper/MappingData.java
+++ b/java/org/apache/catalina/mapper/MappingData.java
@@ -46,8 +46,6 @@ public class MappingData {
     public final MessageBytes redirectPath = MessageBytes.newInstance();
 
     // Fields used by ApplicationMapping to implement javax.servlet.http.Mapping
-    public String matchValue = "";
-    public String matchPattern = "";
     public MappingMatch matchType = MappingMatch.UNKNOWN;
 
     public void recycle() {
@@ -62,8 +60,6 @@ public class MappingData {
         wrapperPath.recycle();
         pathInfo.recycle();
         redirectPath.recycle();
-        matchValue = "";
-        matchPattern= "";
         matchType = MappingMatch.UNKNOWN;
     }
 }

==================================================
