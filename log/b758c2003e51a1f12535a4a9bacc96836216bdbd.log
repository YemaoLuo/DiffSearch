b758c2003e51a1f12535a4a9bacc96836216bdbd
==================================================
The assumption that contexts will always be file system based or that resources will always be extracted to the work does not hold true, particularly for custom DirContext implementations. Don't make the assumption and clean-up up the redundant field that is no longer required.
==================================================
Mark Emlyn
==================================================
Mon Nov 9 20:43:47 2009 +0000
==================================================
ApplicationContext.java
The assumption that contexts will always be file system based or that resources will always be extracted to the work does not hold true, particularly for custom DirContext implementations. Don't make the assumption and clean-up up the redundant field that is no longer required.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@834220 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StandardContext.java
index 45499d670a..0f939f3609 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -19,7 +19,6 @@
 package org.apache.catalina.core;
 
 
-import java.io.File;
 import java.io.InputStream;
 import java.net.MalformedURLException;
 import java.net.URL;
@@ -90,10 +89,9 @@ public class ApplicationContext
      *
      * @param context The associated Context instance
      */
-    public ApplicationContext(String basePath, StandardContext context) {
+    public ApplicationContext(StandardContext context) {
         super();
         this.context = context;
-        this.basePath = basePath;
         
         // Populate session tracking modes
         populateSessionTrackingModes();
@@ -157,12 +155,6 @@ public class ApplicationContext
       StringManager.getManager(Constants.Package);
 
 
-    /**
-     * Base path.
-     */
-    private String basePath = null;
-
-
     /**
      * Thread local data used during request dispatch.
      */
@@ -492,37 +484,21 @@ public class ApplicationContext
             throw new MalformedURLException(sm.getString("applicationContext.requestDispatcher.iae", path));
 
         
-        path = RequestUtil.normalize(path);
-        if (path == null)
+        String normPath = RequestUtil.normalize(path);
+        if (normPath == null)
             return (null);
 
-        String libPath = "/WEB-INF/lib/";
-        if ((path.startsWith(libPath)) && (path.endsWith(".jar"))) {
-            File jarFile = null;
-            if (context.isFilesystemBased()) {
-                jarFile = new File(basePath, path);
-            } else {
-                jarFile = new File(context.getWorkPath(), path);
-            }
-            if (jarFile.exists()) {
-                return jarFile.toURI().toURL();
-            } else {
-                return null;
-            }
-        } else {
-
-            DirContext resources = context.getResources();
-            if (resources != null) {
-                String fullPath = context.getName() + path;
-                String hostName = context.getParent().getName();
-                try {
-                    resources.lookup(path);
-                    return new URL
-                        ("jndi", "", 0, getJNDIUri(hostName, fullPath),
-                         new DirContextURLStreamHandler(resources));
-                } catch (Exception e) {
-                    // Ignore
-                }
+        DirContext resources = context.getResources();
+        if (resources != null) {
+            String fullPath = context.getName() + normPath;
+            String hostName = context.getParent().getName();
+            try {
+                resources.lookup(path);
+                return new URL
+                    ("jndi", "", 0, getJNDIUri(hostName, fullPath),
+                     new DirContextURLStreamHandler(resources));
+            } catch (Exception e) {
+                // Ignore
             }
         }
 

==================================================
ReplicatedContext.java
index da9569f1ed..7a1e27e453 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -1758,7 +1758,7 @@ public class StandardContext
     public ServletContext getServletContext() {
 
         if (context == null) {
-            context = new ApplicationContext(getBasePath(), this);
+            context = new ApplicationContext(this);
             if (altDDName != null)
                 context.setAttribute(Globals.ALT_DD_ATTR,altDDName);
         }

==================================================
DefaultJarScanner.java
index 424afefd65..73f6ae7086 100644
--- a/java/org/apache/catalina/ha/context/ReplicatedContext.java
+++ b/java/org/apache/catalina/ha/context/ReplicatedContext.java
@@ -54,7 +54,7 @@ public class ReplicatedContext extends StandardContext implements LifecycleListe
         super.addLifecycleListener(this);            
         try {
             CatalinaCluster catclust = (CatalinaCluster)this.getCluster();
-            if (this.context == null) this.context = new ReplApplContext(this.getBasePath(), this);
+            if (this.context == null) this.context = new ReplApplContext(this);
             if ( catclust != null ) {
                 ReplicatedMap map = new ReplicatedMap(this,catclust.getChannel(),DEFAULT_REPL_TIMEOUT,
                                                       getName(),getClassLoaders());
@@ -116,7 +116,7 @@ public class ReplicatedContext extends StandardContext implements LifecycleListe
     @Override
     public ServletContext getServletContext() {
         if (context == null) {
-            context = new ReplApplContext(getBasePath(), this);
+            context = new ReplApplContext(this);
             if (getAltDDName() != null)
                 context.setAttribute(Globals.ALT_DD_ATTR,getAltDDName());
         }
@@ -130,8 +130,8 @@ public class ReplicatedContext extends StandardContext implements LifecycleListe
         protected ConcurrentHashMap<String, Object> tomcatAttributes =
             new ConcurrentHashMap<String, Object>();
         
-        public ReplApplContext(String basePath, ReplicatedContext context) {
-            super(basePath,context);
+        public ReplApplContext(ReplicatedContext context) {
+            super(context);
         }
         
         protected ReplicatedContext getParent() {

==================================================
