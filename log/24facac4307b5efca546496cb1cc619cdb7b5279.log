24facac4307b5efca546496cb1cc619cdb7b5279
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49698
==================================================
Mark Emlyn
==================================================
Sat Aug 28 11:07:39 2010 +0000
==================================================
AsyncContextImpl.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49698
Allow listeners to call complete when a async request times out
Add a test case based on pero's previous timeout test case

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@990342 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestAsyncContextImpl.java
index a15ca27b62..955e77c193 100644
--- a/java/org/apache/catalina/core/AsyncContextImpl.java
+++ b/java/org/apache/catalina/core/AsyncContextImpl.java
@@ -51,7 +51,7 @@ public class AsyncContextImpl implements AsyncContext {
     
     public static enum AsyncState {
         NOT_STARTED, STARTED, DISPATCHING, DISPATCHED, COMPLETING, TIMING_OUT,
-        ERROR_DISPATCHING
+        TIMING_OUT_NEED_COMPLETE, ERROR_DISPATCHING
     }
     
     private static final Log log = LogFactory.getLog(AsyncContextImpl.class);
@@ -82,13 +82,19 @@ public class AsyncContextImpl implements AsyncContext {
         }
         if (state.get()==AsyncState.COMPLETING) {
             //do nothing
-        } else if (state.compareAndSet(AsyncState.DISPATCHED, AsyncState.COMPLETING) ||
-                   state.compareAndSet(AsyncState.STARTED, AsyncState.COMPLETING)) {
+        } else if (state.compareAndSet(AsyncState.DISPATCHED,
+                           AsyncState.COMPLETING) ||
+                   state.compareAndSet(AsyncState.STARTED,
+                           AsyncState.COMPLETING) ||
+                   state.compareAndSet(AsyncState.TIMING_OUT_NEED_COMPLETE,
+                           AsyncState.COMPLETING)) {
             AtomicBoolean dispatched = new AtomicBoolean(false);
-            request.getCoyoteRequest().action(ActionCode.ACTION_ASYNC_COMPLETE,dispatched);
+            request.getCoyoteRequest().action(ActionCode.ACTION_ASYNC_COMPLETE,
+                    dispatched);
             if (!dispatched.get()) doInternalComplete(false);
         } else {
-            throw new IllegalStateException("Complete not allowed. Invalid state:"+state.get());
+            throw new IllegalStateException(
+                    "Complete not allowed. Invalid state:"+state.get());
         }
        
     }
@@ -296,10 +302,14 @@ public class AsyncContextImpl implements AsyncContext {
     }
     
     public void doInternalDispatch() throws ServletException, IOException {
-        if (this.state.compareAndSet(AsyncState.TIMING_OUT, AsyncState.COMPLETING)) {
+        if (this.state.compareAndSet(AsyncState.TIMING_OUT,
+                AsyncState.TIMING_OUT_NEED_COMPLETE)) {
             log.debug("TIMING OUT!");
             boolean listenerInvoked = false;
-            for (AsyncListenerWrapper listener : listeners) {
+            List<AsyncListenerWrapper> listenersCopy =
+                new ArrayList<AsyncListenerWrapper>();
+            listenersCopy.addAll(listeners);
+            for (AsyncListenerWrapper listener : listenersCopy) {
                 listener.fireOnTimeout(event);
                 listenerInvoked = true;
             }

==================================================
