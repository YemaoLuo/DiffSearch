adbf44245a06075fc4328615ac01dea391a7c7e2
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=52850
==================================================
Mark Emlyn
==================================================
Fri Mar 9 19:08:49 2012 +0000
==================================================
WebappClassLoader.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=52850
Enable the memoey leak protection code to play nicely with IBM JVMs as
well as Oracle JVMs.
Extend test case coverage of memory leak protection.
Patch provided by Rohit Kelapure.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1298983 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestWebappClassLoaderExecutorMemoryLeak.java
index a1d8112a32..139ebc7479 100644
--- a/java/org/apache/catalina/loader/WebappClassLoader.java
+++ b/java/org/apache/catalina/loader/WebappClassLoader.java
@@ -27,6 +27,7 @@ import java.io.InputStream;
 import java.lang.ref.Reference;
 import java.lang.ref.WeakReference;
 import java.lang.reflect.Field;
+import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.net.MalformedURLException;
@@ -2244,8 +2245,7 @@ public class WebappClassLoader
                     }
 
                     // TimerThread can be stopped safely so treat separately
-                    if (thread.getClass().getName().equals(
-                            "java.util.TimerThread") &&
+                    if (thread.getClass().getName().startsWith("java.util.Timer") &&
                             clearReferencesStopTimerThreads) {
                         clearReferencesStopTimerThread(thread);
                         continue;
@@ -2268,20 +2268,28 @@ public class WebappClassLoader
                     // If the thread has been started via an executor, try
                     // shutting down the executor
                     try {
-                        Field targetField =
-                            thread.getClass().getDeclaredField("target");
-                        targetField.setAccessible(true);
-                        Object target = targetField.get(thread);
-
-                        if (target != null &&
-                                target.getClass().getCanonicalName().equals(
-                                "java.util.concurrent.ThreadPoolExecutor.Worker")) {
-                            Field executorField =
-                                target.getClass().getDeclaredField("this$0");
-                            executorField.setAccessible(true);
-                            Object executor = executorField.get(target);
-                            if (executor instanceof ThreadPoolExecutor) {
-                                ((ThreadPoolExecutor) executor).shutdownNow();
+
+                        Field targetField = null;
+                        try {
+                            targetField = thread.getClass().getDeclaredField("target");
+                        }catch (NoSuchFieldException nfe){
+                            targetField = thread.getClass().getDeclaredField("runnable");
+                        }
+                        if (null != targetField){
+                            targetField.setAccessible(true);
+                            Object target = targetField.get(thread);
+
+                            if (target != null &&
+                                    target.getClass().getCanonicalName() != null
+                                    && target.getClass().getCanonicalName().equals(
+                                    "java.util.concurrent.ThreadPoolExecutor.Worker")) {
+                                Field executorField =
+                                    target.getClass().getDeclaredField("this$0");
+                                executorField.setAccessible(true);
+                                Object executor = executorField.get(target);
+                                if (executor instanceof ThreadPoolExecutor) {
+                                    ((ThreadPoolExecutor) executor).shutdownNow();
+                                }
                             }
                         }
                     } catch (SecurityException e) {
@@ -2350,21 +2358,33 @@ public class WebappClassLoader
         // - queue.clear()
 
         try {
-            Field newTasksMayBeScheduledField =
-                thread.getClass().getDeclaredField("newTasksMayBeScheduled");
-            newTasksMayBeScheduledField.setAccessible(true);
-            Field queueField = thread.getClass().getDeclaredField("queue");
-            queueField.setAccessible(true);
 
-            Object queue = queueField.get(thread);
+            try {
+                Field newTasksMayBeScheduledField =
+                    thread.getClass().getDeclaredField("newTasksMayBeScheduled");
+                newTasksMayBeScheduledField.setAccessible(true);
+                Field queueField = thread.getClass().getDeclaredField("queue");
+                queueField.setAccessible(true);
 
-            Method clearMethod = queue.getClass().getDeclaredMethod("clear");
-            clearMethod.setAccessible(true);
+                Object queue = queueField.get(thread);
 
-            synchronized(queue) {
-                newTasksMayBeScheduledField.setBoolean(thread, false);
-                clearMethod.invoke(queue);
-                queue.notify();  // In case queue was already empty.
+                Method clearMethod = queue.getClass().getDeclaredMethod("clear");
+                clearMethod.setAccessible(true);
+
+                synchronized(queue) {
+                    newTasksMayBeScheduledField.setBoolean(thread, false);
+                    clearMethod.invoke(queue);
+                    queue.notify();  // In case queue was already empty.
+                }
+
+            }catch (NoSuchFieldException nfe){
+                Method cancelMethod = thread.getClass().getDeclaredMethod("cancel");
+                if (null != cancelMethod){
+                    synchronized(thread) {
+                        cancelMethod.setAccessible(true);
+                        cancelMethod.invoke(thread);
+                    }
+                }
             }
 
             log.error(sm.getString("webappClassLoader.warnTimerThread",
@@ -2394,21 +2414,29 @@ public class WebappClassLoader
             inheritableThreadLocalsField.setAccessible(true);
             // Make the underlying array of ThreadLoad.ThreadLocalMap.Entry objects
             // accessible
-            Class<?> tlmClass =
-                Class.forName("java.lang.ThreadLocal$ThreadLocalMap");
+            Class<?> tlmClass = Class.forName("java.lang.ThreadLocal$ThreadLocalMap");
             Field tableField = tlmClass.getDeclaredField("table");
             tableField.setAccessible(true);
+            Method expungeStaleEntriesMethod = tlmClass.getDeclaredMethod("expungeStaleEntries");
+            expungeStaleEntriesMethod.setAccessible(true);
 
             for (int i = 0; i < threads.length; i++) {
                 Object threadLocalMap;
                 if (threads[i] != null) {
+
                     // Clear the first map
                     threadLocalMap = threadLocalsField.get(threads[i]);
-                    checkThreadLocalMapForLeaks(threadLocalMap, tableField);
+                    if (null != threadLocalMap){
+                        expungeStaleEntriesMethod.invoke(threadLocalMap);
+                        checkThreadLocalMapForLeaks(threadLocalMap, tableField);
+                    }
+
                     // Clear the second map
-                    threadLocalMap =
-                        inheritableThreadLocalsField.get(threads[i]);
-                    checkThreadLocalMapForLeaks(threadLocalMap, tableField);
+                    threadLocalMap =inheritableThreadLocalsField.get(threads[i]);
+                    if (null != threadLocalMap){
+                        expungeStaleEntriesMethod.invoke(threadLocalMap);
+                        checkThreadLocalMapForLeaks(threadLocalMap, tableField);
+                    }
                 }
             }
         } catch (SecurityException e) {
@@ -2426,6 +2454,12 @@ public class WebappClassLoader
         } catch (IllegalAccessException e) {
             log.warn(sm.getString("webappClassLoader.checkThreadLocalsForLeaksFail",
                     contextName), e);
+        } catch (InvocationTargetException e) {
+            log.warn(sm.getString("webappClassLoader.checkThreadLocalsForLeaksFail",
+                    contextName), e);
+        } catch (NoSuchMethodException e) {
+            log.warn(sm.getString("webappClassLoader.checkThreadLocalsForLeaksFail",
+                    contextName), e);
         }
     }
 
@@ -2529,7 +2563,7 @@ public class WebappClassLoader
 
         ClassLoader cl = clazz.getClassLoader();
         while (cl != null) {
-            if(cl == this) {
+            if (cl == this) {
                 return true;
             }
             cl = cl.getParent();

==================================================
TestWebappClassLoaderThreadLocalMemoryLeak.java
new file mode 100644
index 0000000000..840b576d5c
--- /dev/null
+++ b/test/org/apache/catalina/loader/TestWebappClassLoaderExecutorMemoryLeak.java
@@ -0,0 +1,126 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.loader;
+
+import java.io.IOException;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import junit.framework.Assert;
+
+import org.apache.catalina.Context;
+import org.apache.catalina.core.StandardContext;
+import org.apache.catalina.startup.Tomcat;
+import org.apache.catalina.startup.TomcatBaseTest;
+import org.junit.Test;
+
+public class TestWebappClassLoaderExecutorMemoryLeak extends TomcatBaseTest {
+
+    @Test
+    public void testTimerThreadLeak() throws Exception {
+        Tomcat tomcat = getTomcatInstance();
+
+        // Must have a real docBase - just use temp
+        Context ctx = tomcat.addContext("",
+                System.getProperty("java.io.tmpdir"));
+
+        if (ctx instanceof StandardContext) {
+            ((StandardContext) ctx).setClearReferencesStopThreads(true);
+        }
+
+        Tomcat.addServlet(ctx, "taskServlet", new ExecutorServlet());
+        ctx.addServletMapping("/", "taskServlet");
+
+        tomcat.start();
+
+        // This will trigger the timer & thread creation
+        getUrl("http://localhost:" + getPort() + "/");
+
+        // Stop the context
+        ctx.stop();
+
+        // If the thread still exists, we have a thread/memory leak
+        try {
+            Thread.sleep(1000);
+        } catch (InterruptedException ie) {
+            // ignore
+        }
+
+        Assert.assertTrue(ExecutorServlet.tpe.isShutdown());
+        Assert.assertTrue(ExecutorServlet.tpe.isTerminated());
+    }
+
+    static class ExecutorServlet extends HttpServlet {
+
+        private static final long serialVersionUID = 1L;
+
+        int nTasks = 5;
+        long n = 1000L;
+        int tpSize = 10;
+
+        public static ThreadPoolExecutor tpe;
+
+        @Override
+        protected void doGet(HttpServletRequest req, HttpServletResponse resp)
+                throws ServletException, IOException {
+
+            resp.getWriter().println(
+                    "The current thread served " + this + " servlet");
+            tpe = new ThreadPoolExecutor(tpSize, tpSize, 50000L,
+                    TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());
+
+            Task[] tasks = new Task[nTasks];
+            for (int i = 0; i < nTasks; i++) {
+                tasks[i] = new Task("Task " + i);
+                tpe.execute(tasks[i]);
+            }
+            resp.getWriter().println("Started " + nTasks +
+                    " never ending tasks using the ThreadPoolExecutor");
+            resp.getWriter().flush();
+        }
+
+        class Task implements Runnable {
+
+            String _id;
+
+            public Task(String id) {
+                this._id = id;
+            }
+
+            @Override
+            public void run() {
+                try {
+                    while (!Thread.currentThread().isInterrupted()) {
+                        Thread.sleep(20000);
+                        System.out.println(Thread.currentThread().getClass()
+                                + " [" + Thread.currentThread().getName()
+                                + "] executing " + this._id);
+                    }
+                } catch (InterruptedException e) {
+                    System.out.println(Thread.currentThread().getClass() + " ["
+                            + Thread.currentThread().getName() + "] EXITING");
+                }
+            }
+        }
+    }
+}

==================================================
