fca2646517537fd85505d448f9a09422b4619db8
==================================================
Delete some deprecated code planned for removal in Tomcat 10
==================================================
Mark Thomas
==================================================
Wed Jan 15 09:21:03 2020 +0000
==================================================
Context.java
Delete some deprecated code planned for removal in Tomcat 10


==================================================
Globals.java
index a41f2a0430..6edaf1edc9 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -978,19 +978,6 @@ public interface Context extends Container, ContextBind {
     public ErrorPage findErrorPage(int errorCode);
 
 
-    /**
-     * @param exceptionType Exception type to look up
-     *
-     * @return the error page entry for the specified Java exception type,
-     *         if any; otherwise return {@code null}.
-     *
-     * @deprecated Unused. Will be removed in Tomcat 10.
-     *             Use {@link #findErrorPage(Throwable)} instead.
-     */
-    @Deprecated
-    public ErrorPage findErrorPage(String exceptionType);
-
-
     /**
      * Find and return the ErrorPage instance for the specified exception's
      * class, or an ErrorPage instance for the closest superclass for which
@@ -1109,31 +1096,6 @@ public interface Context extends Container, ContextBind {
     public String[] findServletMappings();
 
 
-    /**
-     * @return the context-relative URI of the error page for the specified
-     * HTTP status code, if any; otherwise return <code>null</code>.
-     *
-     * @param status HTTP status code to look up
-     *
-     * @deprecated Unused. Will be removed in Tomcat 10.
-     *             Use {@link #findErrorPage(int)} instead.
-     */
-    @Deprecated
-    public String findStatusPage(int status);
-
-
-    /**
-     * @return the set of HTTP status codes for which error pages have
-     * been specified.  If none are specified, a zero-length array
-     * is returned.
-     *
-     * @deprecated Unused. Will be removed in Tomcat 10.
-     *             Use {@link #findErrorPages()} instead.
-     */
-    @Deprecated
-    public int[] findStatusPages();
-
-
     /**
      * @return the associated ThreadBindingListener.
      */

==================================================
Manager.java
index 70ef0cdf0e..640b944aaa 100644
--- a/java/org/apache/catalina/Globals.java
+++ b/java/org/apache/catalina/Globals.java
@@ -112,21 +112,6 @@ public final class Globals {
         "org.apache.catalina.NAMED";
 
 
-    /**
-     * The servlet context attribute under which we store a flag used
-     * to mark this request as having been processed by the SSIServlet.
-     * We do this because of the pathInfo mangling happening when using
-     * the CGIServlet in conjunction with the SSI servlet. (value stored
-     * as an object of type String)
-     *
-     * @deprecated Unused. This is no longer used as the CGIO servlet now has
-     *             generic handling for when it is used as an include.
-     *             This will be removed in Tomcat 10
-     */
-    @Deprecated
-    public static final String SSI_FLAG_ATTR = "org.apache.catalina.ssi.SSIServlet";
-
-
     /**
      * The subject under which the AccessControlContext is running.
      */

==================================================
Realm.java
index d63355190a..fb1d306f48 100644
--- a/java/org/apache/catalina/Manager.java
+++ b/java/org/apache/catalina/Manager.java
@@ -210,19 +210,6 @@ public interface Manager {
     public void addPropertyChangeListener(PropertyChangeListener listener);
 
 
-    /**
-     * Change the session ID of the current session to a new randomly generated
-     * session ID.
-     *
-     * @param session   The session to change the session ID for
-     *
-     * @deprecated Use {@link #rotateSessionId(Session)}.
-     *             Will be removed in Tomcat 10
-     */
-    @Deprecated
-    public void changeSessionId(Session session);
-
-
     /**
      * Change the session ID of the current session to a new randomly generated
      * session ID.

==================================================
StandardContext.java
index 7fa8f54403..fd030fa549 100644
--- a/java/org/apache/catalina/Realm.java
+++ b/java/org/apache/catalina/Realm.java
@@ -121,17 +121,12 @@ public interface Realm extends Contained {
     /**
      * Try to authenticate using a {@link GSSName}
      *
-     * Note that this default method will be turned into an abstract one in
-     * Tomcat 10.
-     *
      * @param gssName The {@link GSSName} of the principal to look up
      * @param gssCredential The {@link GSSCredential} of the principal, may be
      *                      {@code null}
      * @return the associated principal, or {@code null} if there is none
      */
-    public default Principal authenticate(GSSName gssName, GSSCredential gssCredential) {
-        return null;
-    }
+    public Principal authenticate(GSSName gssName, GSSCredential gssCredential);
 
 
     /**
@@ -225,16 +220,6 @@ public interface Realm extends Contained {
     public void removePropertyChangeListener(PropertyChangeListener listener);
 
 
-    /**
-     * Return roles associated with given principal
-     * @param principal the {@link Principal} to get the roles for.
-     * @return principal roles
-     * @deprecated This will be removed in Tomcat 10.
-     */
-    @Deprecated
-    public String[] getRoles(Principal principal);
-
-
     /**
      * Return the availability of the realm for authentication.
      * @return <code>true</code> if the realm is able to perform authentication

==================================================
CorsFilter.java
index 545aaf237b..5f2e8b17b9 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -3361,13 +3361,6 @@ public class StandardContext extends ContainerBase
     }
 
 
-    @Override
-    @Deprecated
-    public ErrorPage findErrorPage(String exceptionType) {
-        return errorPageSupport.find(exceptionType);
-    }
-
-
     @Override
     public ErrorPage findErrorPage(Throwable exceptionType) {
         return errorPageSupport.find(exceptionType);
@@ -3576,36 +3569,6 @@ public class StandardContext extends ContainerBase
     }
 
 
-    @Override
-    @Deprecated
-    public String findStatusPage(int status) {
-
-        ErrorPage errorPage = findErrorPage(status);
-        if (errorPage != null) {
-            return errorPage.getLocation();
-        }
-        return null;
-    }
-
-
-    @Override
-    @Deprecated
-    public int[] findStatusPages() {
-        ErrorPage[] errorPages = findErrorPages();
-        int size = errorPages.length;
-        int temp[] = new int[size];
-        int count = 0;
-        for (int i = 0; i < size; i++) {
-            if (errorPages[i].getExceptionType() == null) {
-                temp[count++] = errorPages[i].getErrorCode();
-            }
-        }
-        int result[] = new int[count];
-        System.arraycopy(temp, 0, result, 0, count);
-        return result;
-    }
-
-
     /**
      * @return <code>true</code> if the specified welcome file is defined
      * for this Context; otherwise return <code>false</code>.

==================================================
ExpiresFilter.java
index c9690c961f..004bc69113 100644
--- a/java/org/apache/catalina/filters/CorsFilter.java
+++ b/java/org/apache/catalina/filters/CorsFilter.java
@@ -18,7 +18,6 @@ package org.apache.catalina.filters;
 
 import java.io.IOException;
 import java.io.ObjectInputStream;
-import java.net.URI;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
@@ -771,27 +770,6 @@ public class CorsFilter extends GenericFilter {
     }
 
 
-    /**
-     * Checks if a given origin is valid or not. Criteria:
-     * <ul>
-     * <li>If an encoded character is present in origin, it's not valid.</li>
-     * <li>If origin is "null", it's valid.</li>
-     * <li>Origin should be a valid {@link URI}</li>
-     * </ul>
-     *
-     * @param origin The origin URI
-     * @return <code>true</code> if the origin was valid
-     * @see <a href="http://tools.ietf.org/html/rfc952">RFC952</a>
-     *
-     * @deprecated This will be removed in Tomcat 10
-     *             Use {@link RequestUtil#isValidOrigin(String)}
-     */
-    @Deprecated
-    protected static boolean isValidOrigin(String origin) {
-        return RequestUtil.isValidOrigin(origin);
-    }
-
-
     /**
      * Determines if any origin is allowed to make CORS request.
      *
@@ -926,15 +904,6 @@ public class CorsFilter extends GenericFilter {
 
     // -------------------------------------------------- CORS Request Headers
 
-    /**
-     * The Vary header indicates allows disabling proxy caching by indicating
-     * the the response depends on the origin.
-     *
-     * @deprecated Unused. Will be removed in Tomcat 10
-     */
-    @Deprecated
-    public static final String REQUEST_HEADER_VARY = "Vary";
-
     /**
      * The Origin header indicates where the cross-origin request or preflight
      * request originates from.

==================================================
DeltaManager.java
index f3eaf58e52..be907833b5 100644
--- a/java/org/apache/catalina/filters/ExpiresFilter.java
+++ b/java/org/apache/catalina/filters/ExpiresFilter.java
@@ -1249,27 +1249,6 @@ public class ExpiresFilter extends FilterBase {
     }
 
 
-    /**
-     * Returns the expiration date of the given {@link XHttpServletResponse} or
-     * {@code null} if no expiration date has been configured for the
-     * declared content type.
-     * <p>
-     * {@code protected} for extension.
-     *
-     * @param response The wrapped HTTP response
-     *
-     * @return the expiration date
-     * @see HttpServletResponse#getContentType()
-     *
-     * @deprecated  Will be removed in Tomcat 10.
-     *              Use {@link #getExpirationDate(HttpServletRequest, XHttpServletResponse)}
-     */
-    @Deprecated
-    protected Date getExpirationDate(XHttpServletResponse response) {
-        return getExpirationDate((HttpServletRequest) null, response);
-    }
-
-
     /**
      * Returns the expiration date of the given {@link XHttpServletResponse} or
      * {@code null} if no expiration date has been configured for the

==================================================
ManagerServlet.java
index 09584fcc6d..99d42851fe 100644
--- a/java/org/apache/catalina/ha/session/DeltaManager.java
+++ b/java/org/apache/catalina/ha/session/DeltaManager.java
@@ -471,23 +471,6 @@ public class DeltaManager extends ClusterManagerBase{
         return new DeltaSession(this);
     }
 
-    /**
-     * Get new session class to be used in the doLoad() method.
-     *
-     * @return a new session
-     *
-     * @deprecated Unused. This will be removed in Tomcat 10.
-     */
-    @Deprecated
-    protected DeltaSession getNewDeltaSession() {
-        return new DeltaSession(this);
-    }
-
-    @Override
-    public void changeSessionId(Session session) {
-        rotateSessionId(session);
-    }
-
     @Override
     public String rotateSessionId(Session session) {
         return rotateSessionId(session, true);
@@ -498,18 +481,6 @@ public class DeltaManager extends ClusterManagerBase{
         changeSessionId(session, newId, true);
     }
 
-    /**
-     * @param session The session
-     * @param notify Notify change
-     * @deprecated Will be removed in Tomcat 10
-     */
-    @Deprecated
-    protected void changeSessionId(Session session, boolean notify) {
-        String orgSessionID = session.getId();
-        super.changeSessionId(session);
-        if (notify) sendChangeSessionId(session.getId(), orgSessionID);
-    }
-
     protected String rotateSessionId(Session session, boolean notify) {
         String orgSessionID = session.getId();
         String newId = super.rotateSessionId(session);
@@ -571,58 +542,6 @@ public class DeltaManager extends ClusterManagerBase{
         return sessionId;
     }
 
-    /**
-     * Load Deltarequest from external node
-     * Load the Class at container classloader
-     * @see DeltaRequest#readExternal(java.io.ObjectInput)
-     * @param session Corresponding session
-     * @param data message data
-     * @return The request
-     * @throws ClassNotFoundException Serialization error
-     * @throws IOException IO error with serialization
-     *
-     * @deprecated Unused. This will be removed in Tomcat 10.
-     *             Calling this method may result in a deadlock. See:
-     *             https://bz.apache.org/bugzilla/show_bug.cgi?id=62841
-     */
-    @Deprecated
-    protected DeltaRequest deserializeDeltaRequest(DeltaSession session, byte[] data)
-            throws ClassNotFoundException, IOException {
-        session.lock();
-        try {
-            ReplicationStream ois = getReplicationStream(data);
-            session.getDeltaRequest().readExternal(ois);
-            ois.close();
-            return session.getDeltaRequest();
-        } finally {
-            session.unlock();
-        }
-    }
-
-    /**
-     * serialize DeltaRequest
-     * @see DeltaRequest#writeExternal(java.io.ObjectOutput)
-     *
-     * @param session Associated session
-     * @param deltaRequest The request to serialize
-     * @return serialized delta request
-     * @throws IOException IO error with serialization
-     *
-     * @deprecated Unused. This will be removed in Tomcat 10.
-     *             Calling this method may result in a deadlock. See:
-     *             https://bz.apache.org/bugzilla/show_bug.cgi?id=62841
-     */
-    @Deprecated
-    protected byte[] serializeDeltaRequest(DeltaSession session, DeltaRequest deltaRequest)
-            throws IOException {
-        session.lock();
-        try {
-            return deltaRequest.serialize();
-        } finally {
-            session.unlock();
-        }
-    }
-
     /**
      * Load sessions from other cluster node.
      * FIXME replace currently sessions with same id without notification.

==================================================
ContextMBean.java
index e58955ac53..5c87831c3d 100644
--- a/java/org/apache/catalina/manager/ManagerServlet.java
+++ b/java/org/apache/catalina/manager/ManagerServlet.java
@@ -1170,29 +1170,6 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
     }
 
 
-    /**
-     * List the resources of the given context.
-     *
-     * @param writer Writer to render to
-     * @param prefix Path for recursion
-     * @param namingContext The naming context for lookups
-     * @param type Fully qualified class name of the resource type of interest,
-     *  or <code>null</code> to list resources of all types
-     * @param clazz Unused
-     * @param smClient i18n support for current client's locale
-     *
-     * @deprecated Use {@link #printResources(PrintWriter, String,
-     *             javax.naming.Context, String, StringManager)}
-     *             This method will be removed in Tomcat 10.x onwards
-     */
-    @Deprecated
-    protected void printResources(PrintWriter writer, String prefix,
-            javax.naming.Context namingContext,
-            String type, Class<?> clazz, StringManager smClient) {
-        printResources(writer, prefix, namingContext, type, smClient);
-    }
-
-
     /**
      * List the resources of the given context.
      * @param writer Writer to render to

==================================================
RealmBase.java
index 39255ff5a1..d36ad25ea6 100644
--- a/java/org/apache/catalina/mbeans/ContextMBean.java
+++ b/java/org/apache/catalina/mbeans/ContextMBean.java
@@ -81,23 +81,6 @@ public class ContextMBean extends BaseCatalinaMBean<Context> {
     }
 
 
-    /**
-     * Return the error page entry for the specified Java exception type,
-     * if any; otherwise return <code>null</code>.
-     *
-     * @param exceptionType Exception type to look up
-     * @return a string representation of the error page
-     * @throws MBeanException propagated from the managed resource access
-     * @deprecated Unused. Will be removed in Tomcat 10.
-     *             Use {@link #findErrorPage(Throwable)} instead.
-     */
-    @Deprecated
-    public String findErrorPage(String exceptionType) throws MBeanException {
-        Context context = doGetManagedResource();
-        return context.findErrorPage(exceptionType).toString();
-    }
-
-
     /**
      * Return the error page entry for the specified Java exception type,
      * if any; otherwise return <code>null</code>.

==================================================
DefaultServlet.java
index f3aa8ab432..d9917cf407 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -1559,15 +1559,4 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
             throw new LifecycleException(sm.getString("realmBase.createUsernameRetriever.ClassCastException", className), e);
         }
     }
-
-
-    @Override
-    public String[] getRoles(Principal principal) {
-        if (principal instanceof GenericPrincipal) {
-            return ((GenericPrincipal) principal).getRoles();
-        }
-
-        String className = principal.getClass().getSimpleName();
-        throw new IllegalStateException(sm.getString("realmBase.cannotGetRoles", className));
-    }
 }

==================================================
ManagerBase.java
index 1590cb6574..2a69ab7e7d 100644
--- a/java/org/apache/catalina/servlets/DefaultServlet.java
+++ b/java/org/apache/catalina/servlets/DefaultServlet.java
@@ -1608,30 +1608,6 @@ public class DefaultServlet extends HttpServlet {
     }
 
 
-    /**
-     * Return an InputStream to an XML representation of the contents this
-     * directory.
-     *
-     * @param contextPath Context path to which our internal paths are relative
-     * @param resource    The associated resource
-     * @param xsltSource  The XSL stylesheet
-     * @param encoding    The encoding to use to process the readme (if any)
-     *
-     * @return the XML data
-     *
-     * @throws IOException an IO error occurred
-     * @throws ServletException rendering error
-     * @deprecated Unused. Will be removed in Tomcat 10
-     * @deprecated Use {@link #render(HttpServletRequest, String, WebResource, String)} instead
-     */
-    @Deprecated
-    protected InputStream renderXml(String contextPath, WebResource resource, Source xsltSource,
-            String encoding)
-        throws ServletException, IOException
-    {
-        return renderXml(null, contextPath, resource, xsltSource, encoding);
-    }
-
     /**
      * Return an InputStream to an XML representation of the contents this
      * directory.
@@ -1765,27 +1741,6 @@ public class DefaultServlet extends HttpServlet {
         }
     }
 
-    /**
-     * Return an InputStream to an HTML representation of the contents of this
-     * directory.
-     *
-     * @param contextPath Context path to which our internal paths are relative
-     * @param resource    The associated resource
-     * @param encoding    The encoding to use to process the readme (if any)
-     *
-     * @return the HTML data
-     *
-     * @throws IOException an IO error occurred
-     *
-     * @deprecated Unused. Will be removed in Tomcat 10
-     * @deprecated Use {@link #renderHtml(HttpServletRequest, String, WebResource, String)} instead
-     */
-    @Deprecated
-    protected InputStream renderHtml(String contextPath, WebResource resource, String encoding)
-        throws IOException {
-        return renderHtml(null, contextPath, resource, encoding);
-    }
-
     /**
      * Return an InputStream to an HTML representation of the contents of this
      * directory.

==================================================
FailedContext.java
index 5e769c8657..1e91a319c6 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -751,12 +751,6 @@ public abstract class ManagerBase extends LifecycleMBeanBase implements Manager
     }
 
 
-    @Override
-    public void changeSessionId(Session session) {
-        rotateSessionId(session);
-    }
-
-
     @Override
     public String rotateSessionId(Session session) {
         String newId = generateSessionId();

==================================================
AbstractRxTask.java
index b26256197d..aebbd0dfcf 100644
--- a/java/org/apache/catalina/startup/FailedContext.java
+++ b/java/org/apache/catalina/startup/FailedContext.java
@@ -508,8 +508,6 @@ public class FailedContext extends LifecycleMBeanBase implements Context {
     @Override
     public ErrorPage findErrorPage(int errorCode) { return null; }
     @Override
-    public ErrorPage findErrorPage(String exceptionType) { return null; }
-    @Override
     public ErrorPage findErrorPage(Throwable throwable) { return null; }
     @Override
     public ErrorPage[] findErrorPages() { return null; }
@@ -610,11 +608,6 @@ public class FailedContext extends LifecycleMBeanBase implements Context {
     @Override
     public Wrapper createWrapper() { return null; }
 
-    @Override
-    public String findStatusPage(int status) { return null; }
-    @Override
-    public int[] findStatusPages() { return null; }
-
     @Override
     public boolean fireRequestInitEvent(ServletRequest request) { return false; }
     @Override

==================================================
ConcurrentDateFormat.java
index f8e8956f6b..8494c366d4 100644
--- a/java/org/apache/catalina/tribes/transport/AbstractRxTask.java
+++ b/java/org/apache/catalina/tribes/transport/AbstractRxTask.java
@@ -26,8 +26,6 @@ public abstract class AbstractRxTask implements Runnable
 
     private ListenCallback callback;
     private RxTaskPool pool;
-    @Deprecated
-    private boolean doRun = true;
     private int options;
     protected boolean useBufferPool = true;
 
@@ -47,18 +45,6 @@ public abstract class AbstractRxTask implements Runnable
         this.callback = callback;
     }
 
-    /**
-     * Sets doRun field which is unused.
-     *
-     * @param doRun New value
-     *
-     * @deprecated Will be removed in Tomcat 10
-     */
-    @Deprecated
-    public void setDoRun(boolean doRun) {
-        this.doRun = doRun;
-    }
-
     public RxTaskPool getTaskPool() {
         return pool;
     }
@@ -71,20 +57,8 @@ public abstract class AbstractRxTask implements Runnable
         return callback;
     }
 
-    /**
-     * Gets doRun field which is unused.
-     *
-     * @return Current field value
-     *
-     * @deprecated Will be removed in Tomcat 10
-     */
-    @Deprecated
-    public boolean isDoRun() {
-        return doRun;
-    }
-
     public void close() {
-        doRun = false;
+        // NO-OP
     }
 
     public void setUseBufferPool(boolean usebufpool) {

==================================================
TesterContext.java
deleted file mode 100644
index 7408938fa6..0000000000
--- a/java/org/apache/catalina/util/ConcurrentDateFormat.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.catalina.util;
-
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.Locale;
-import java.util.Queue;
-import java.util.TimeZone;
-import java.util.concurrent.ConcurrentLinkedQueue;
-
-/**
- * A thread safe wrapper around {@link SimpleDateFormat} that does not make use
- * of ThreadLocal and - broadly - only creates enough SimpleDateFormat objects
- * to satisfy the concurrency requirements.
- *
- * @deprecated Unused. This will be removed in Tomcat 10.
- *             Use {@link org.apache.tomcat.util.http.ConcurrentDateFormat}
- */
-@Deprecated
-public class ConcurrentDateFormat {
-
-    private final String format;
-    private final Locale locale;
-    private final TimeZone timezone;
-    private final Queue<SimpleDateFormat> queue = new ConcurrentLinkedQueue<>();
-
-    public static final String RFC1123_DATE = "EEE, dd MMM yyyy HH:mm:ss zzz";
-    public static final TimeZone GMT = TimeZone.getTimeZone("GMT");
-
-    private static final ConcurrentDateFormat FORMAT_RFC1123;
-
-    static {
-        FORMAT_RFC1123 = new ConcurrentDateFormat(RFC1123_DATE, Locale.US, GMT);
-    }
-
-    public static String formatRfc1123(Date date) {
-        return FORMAT_RFC1123.format(date);
-    }
-
-    public ConcurrentDateFormat(String format, Locale locale,
-            TimeZone timezone) {
-        this.format = format;
-        this.locale = locale;
-        this.timezone = timezone;
-        SimpleDateFormat initial = createInstance();
-        queue.add(initial);
-    }
-
-    public String format(Date date) {
-        SimpleDateFormat sdf = queue.poll();
-        if (sdf == null) {
-            sdf = createInstance();
-        }
-        String result = sdf.format(date);
-        queue.add(sdf);
-        return result;
-    }
-
-    private SimpleDateFormat createInstance() {
-        SimpleDateFormat sdf = new SimpleDateFormat(format, locale);
-        sdf.setTimeZone(timezone);
-        return sdf;
-    }
-}

==================================================
