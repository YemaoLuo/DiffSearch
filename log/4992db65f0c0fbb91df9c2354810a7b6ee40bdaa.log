4992db65f0c0fbb91df9c2354810a7b6ee40bdaa
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=61264
==================================================
Mark Thomas
==================================================
Sun Jul 9 20:25:21 2017 +0000
==================================================
Request.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=61264
Correct a regression in the refactoring to use Charset rather than String to store request character encoding that prevented getReader() throwing an UnsupportedEncodingException if the user agent specifies an unsupported character encoding.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1801386 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SSIServletExternalResolver.java
index a60c344b83..ff49d5d94a 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -957,9 +957,9 @@ public class Request implements HttpServletRequest {
      */
     @Override
     public String getCharacterEncoding() {
-        Charset charset = coyoteRequest.getCharset();
-        if (charset != null) {
-            return charset.name();
+        String characterEncoding = coyoteRequest.getCharacterEncoding();
+        if (characterEncoding != null) {
+            return characterEncoding;
         }
 
         Context context = getContext();
@@ -972,7 +972,12 @@ public class Request implements HttpServletRequest {
 
 
     private Charset getCharset() {
-        Charset charset = coyoteRequest.getCharset();
+        Charset charset = null;
+        try {
+            charset = coyoteRequest.getCharset();
+        } catch (UnsupportedEncodingException e) {
+            // Ignore
+        }
         if (charset != null) {
             return charset;
         }

==================================================
Request.java
index 381e0d2647..6f0be3917a 100644
--- a/java/org/apache/catalina/ssi/SSIServletExternalResolver.java
+++ b/java/org/apache/catalina/ssi/SSIServletExternalResolver.java
@@ -18,6 +18,7 @@ package org.apache.catalina.ssi;
 
 
 import java.io.IOException;
+import java.io.UnsupportedEncodingException;
 import java.net.URL;
 import java.net.URLConnection;
 import java.nio.charset.Charset;
@@ -251,7 +252,11 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
                         // Get encoding settings from request / connector if
                         // possible
                         if (req instanceof Request) {
-                            requestCharset = ((Request)req).getCoyoteRequest().getCharset();
+                            try {
+                                requestCharset = ((Request)req).getCoyoteRequest().getCharset();
+                            } catch (UnsupportedEncodingException e) {
+                                // Ignore
+                            }
                             Connector connector =  ((Request)req).getConnector();
                             uriCharset = connector.getURICharset();
                             useBodyEncodingForURI = connector.getUseBodyEncodingForURI();

==================================================
TestRequest.java
index fec590d4ba..2752e5cec8 100644
--- a/java/org/apache/coyote/Request.java
+++ b/java/org/apache/coyote/Request.java
@@ -131,6 +131,10 @@ public final class Request {
     private long contentLength = -1;
     private MessageBytes contentTypeMB = null;
     private Charset charset = null;
+    // Retain the original, user specified character encoding so it can be
+    // returned even if it is invalid
+    private String characterEncoding = null;
+
     /**
      * Is there an expectation ?
      */
@@ -301,12 +305,32 @@ public final class Request {
      *         call has been made to that method try to obtain if from the
      *         content type.
      */
-    public Charset getCharset() {
-        if (charset != null) {
-            return charset;
+    public String getCharacterEncoding() {
+        if (characterEncoding == null) {
+            characterEncoding = getCharsetFromContentType(getContentType());
         }
 
-        charset = getCharsetFromContentType(getContentType());
+        return characterEncoding;
+    }
+
+
+    /**
+     * Get the character encoding used for this request.
+     *
+     * @return The value set via {@link #setCharset(Charset)} or if no
+     *         call has been made to that method try to obtain if from the
+     *         content type.
+     *
+     * @throws UnsupportedEncodingException If the user agent has specified an
+     *         invalid character encoding
+     */
+    public Charset getCharset() throws UnsupportedEncodingException {
+        if (charset == null) {
+            getCharacterEncoding();
+            if (characterEncoding != null) {
+                charset = B2CConverter.getCharset(characterEncoding);
+            }
+         }
 
         return charset;
     }
@@ -314,6 +338,7 @@ public final class Request {
 
     public void setCharset(Charset charset) {
         this.charset = charset;
+        this.characterEncoding = charset.name();
     }
 
 
@@ -586,6 +611,7 @@ public final class Request {
         contentLength = -1;
         contentTypeMB = null;
         charset = null;
+        characterEncoding = null;
         expectation = false;
         headers.recycle();
         trailerFields.clear();
@@ -647,7 +673,7 @@ public final class Request {
      *
      * @param contentType a content type header
      */
-    private static Charset getCharsetFromContentType(String contentType) {
+    private static String getCharsetFromContentType(String contentType) {
 
         if (contentType == null) {
             return null;
@@ -667,14 +693,6 @@ public final class Request {
             encoding = encoding.substring(1, encoding.length() - 1);
         }
 
-        Charset result = null;
-
-        try {
-            result = B2CConverter.getCharset(encoding.trim());
-        } catch (UnsupportedEncodingException e) {
-            // Ignore
-        }
-
-        return result;
+        return encoding.trim();
     }
 }

==================================================
