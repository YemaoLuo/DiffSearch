4b6bfe773c3b9a2deaa852e74ea28e32d351f0c9
==================================================
Code improvements to limit manual changes in generated code. No functional changes.
==================================================
Remy Maucherat
==================================================
Wed Oct 10 14:32:33 2018 +0000
==================================================
JSONParser.java
Code improvements to limit manual changes in generated code. No functional changes.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1843456 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JSONParserTokenManager.java
index 5d49588672..fee2d59f05 100644
--- a/java/org/apache/tomcat/util/json/JSONParser.jj
+++ b/java/org/apache/tomcat/util/json/JSONParser.jj
@@ -25,9 +25,8 @@ options {
     SUPPORT_CLASS_VISIBILITY_PUBLIC=true;
     FORCE_LA_CHECK=true;
     CACHE_TOKENS=true;
-    SANITY_CHECK = true;
+    SANITY_CHECK=true;
     STATIC=false;
-  //KEEP_LINE_COLUMN=true;
 }
 
 PARSER_BEGIN(JSONParser)
@@ -51,60 +50,58 @@ PARSER_BEGIN(JSONParser)
 
 package org.apache.tomcat.util.json;
 
-import java.io.*;
-import java.util.*;
-import java.math.*;
-
 /**
-* Basic JSON parser generated by JavaCC. It consumes the input provided through the constructor when 
+* Basic JSON parser generated by JavaCC. It consumes the input provided through the constructor when
 * {@code parseObject()}, {@code parseList()}, or {@code parse()} are called, and there is no way to directly
 * reset the state.
-* Set the {@code fallbackToString} property if you want to enable
-* unparsable constructs (such as unquoted strings) to be handled as Strings: otherwise, they are a parse
-* error.
-*
-* <p />
-*
-* This class makes no pretenses towards being thread safe.
 */
+@SuppressWarnings("all") // Ignore warnings in generated code
 public class JSONParser {
 
     private boolean nativeNumbers = false;
 
     public JSONParser(String input) {
-    this(new StringReader(input));
-  }
+        this(new java.io.StringReader(input));
+    }
 
     /**
-    * Parses a JSON object into a Java {@code Map}.
-    */
-    public LinkedHashMap<String,Object> parseObject() throws ParseException { 
-        LinkedHashMap<String,Object> toReturn = object(); 
-        if(!ensureEOF()) throw new IllegalStateException("Expected EOF, but still had content to parse");
+     * Parses a JSON object into a Java {@code Map}.
+     */
+    public java.util.LinkedHashMap<String, Object> parseObject() throws ParseException {
+        java.util.LinkedHashMap<String, Object> toReturn = object(); 
+        if (!ensureEOF()) {
+            throw new IllegalStateException("Expected EOF, but still had content to parse");
+        }
         return toReturn;
     }
 
     /**
-    * Parses a JSON array into a Java {@code List}.
-    */
-    public ArrayList<Object> parseArray() throws ParseException {   
-        ArrayList<Object> toReturn = list(); 
-        if(!ensureEOF()) throw new IllegalStateException("Expected EOF, but still had content to parse");
+     * Parses a JSON array into a Java {@code List}.
+     */
+    public java.util.ArrayList<Object> parseArray() throws ParseException {   
+        java.util.ArrayList<Object> toReturn = list(); 
+        if (!ensureEOF()) {
+            throw new IllegalStateException("Expected EOF, but still had content to parse");
+        }
         return toReturn;
     }
 
     /**
-    * Parses any JSON-parseable object, returning the value. 
-    */
+     * Parses any JSON-parseable object, returning the value.
+     */
     public Object parse() throws ParseException { 
         Object toReturn = anything(); 
-        if(!ensureEOF()) throw new IllegalStateException("Expected EOF, but still had content to parse");
+        if (!ensureEOF()) {
+            throw new IllegalStateException("Expected EOF, but still had content to parse");
+        }
         return toReturn;
     }
 
     private static String substringBefore(String str, char delim) {
         int pos = str.indexOf(delim);
-        if(pos == -1) return str;
+        if (pos == -1) {
+            return str;
+        }
         return str.substring(0, pos);
     }
 
@@ -125,8 +122,8 @@ SKIP: {
     <C_SINGLE_COMMENT: "//" (~["\n","\r","\f"])* <EOL>>
 | <C_MULTILINE_COMMENT: "/*" (~[])* "*/">
 | <SH_SINGLE_COMMENT: "#" (~["\n","\r","\f"])* <EOL>>
-| <WHITESPACE: " " | "\t"> 
-| <EOL: "\n" | "\r" | "\f"> 
+| <WHITESPACE: " " | "\t">
+| <EOL: "\n" | "\r" | "\f">
 }
 
 // Common tokens
@@ -154,13 +151,13 @@ TOKEN:{
 | <#DIGIT: (<DIGIT_NONZERO> | <ZERO>) >
 | <NUMBER_INTEGER:
         ("-")?
-        ( (<ZERO>)+ | ( <DIGIT_NONZERO> (<DIGIT>)* ) ) 
+        ( (<ZERO>)+ | ( <DIGIT_NONZERO> (<DIGIT>)* ) )
     >
-| <NUMBER_DECIMAL: 
-        ("-")?  
-        ( (<ZERO>)+ | ( <DIGIT_NONZERO> (<DIGIT>)* ) ) 
-        ("." 
-            (<DIGIT>)+  
+| <NUMBER_DECIMAL:
+        ("-")?
+        ( (<ZERO>)+ | ( <DIGIT_NONZERO> (<DIGIT>)* ) )
+        ("."
+            (<DIGIT>)+
             (
                 ["e","E"]
                 ("+" | "-")?
@@ -210,7 +207,7 @@ boolean ensureEOF() : {}{
     { return true; }
 }
 
-Object anything() : { 
+Object anything() : {
     Object x;
 }{
     ( x = object()
@@ -227,7 +224,7 @@ String objectKey() : {
     (
         key = string()
     | key = symbol()
-    | ( 
+    | (
         nullValue()
         { key = null; }
         )
@@ -239,14 +236,14 @@ String objectKey() : {
     { return key; }
 }
 
-LinkedHashMap<String,Object> object() : {
-    final LinkedHashMap<String,Object> map = new LinkedHashMap<String,Object>();
+java.util.LinkedHashMap<String, Object> object() : {
+    final java.util.LinkedHashMap<String, Object> map = new java.util.LinkedHashMap<String, Object>();
     String key;
     Object value;
 }{
     <BRACE_OPEN>
     [
-        key = objectKey() 
+        key = objectKey()
         <COLON>
         value = anything()
         { map.put(key, value); }
@@ -264,8 +261,8 @@ LinkedHashMap<String,Object> object() : {
     { return map; }
 }
 
-ArrayList<Object> list() : {
-    final ArrayList<Object> list = new ArrayList<Object>(); 
+java.util.ArrayList<Object> list() : {
+    final java.util.ArrayList<Object> list = new java.util.ArrayList<Object>();
     Object value;
 }{
     <BRACKET_OPEN>
@@ -283,7 +280,7 @@ ArrayList<Object> list() : {
     <BRACKET_CLOSE>
     { 
         list.trimToSize();
-        return list; 
+        return list;
     }
 }
 
@@ -313,7 +310,7 @@ Boolean booleanValue(): {
         ) | (
             <FALSE>
             { b = Boolean.FALSE; }
-        )   
+        )
     )
     { return b; }
 }
@@ -323,20 +320,20 @@ Number number(): {
 }{ 
     (
         t = <NUMBER_DECIMAL>
-        { 
-            if(nativeNumbers) {
+        {
+            if (nativeNumbers) {
                 return new Long(t.image);
             } else {
-                return new BigDecimal(t.image); 
+                return new java.math.BigDecimal(t.image);
             }
         }
     ) | (
         t = <NUMBER_INTEGER>
-        { 
-            if(nativeNumbers) {
+        {
+            if (nativeNumbers) {
                 return new Double(t.image);
             } else {
-                return new BigInteger(substringBefore(t.image, '.')); 
+                return new java.math.BigInteger(substringBefore(t.image, '.'));
             }
         }
     )
@@ -345,7 +342,7 @@ Number number(): {
 String string() : {
     String s;
 }{
-    ( s = doubleQuoteString() 
+    ( s = doubleQuoteString()
     | s = singleQuoteString()
     )
     { return s; }
@@ -358,9 +355,9 @@ String doubleQuoteString() : {
         { return ""; }
     ) | (
         <STRING_DOUBLE_NONEMPTY>
-        { 
+        {
             String image = token.image;
-            return image.substring(1, image.length()-1); 
+            return image.substring(1, image.length() - 1);
         }
     )
 }
@@ -372,9 +369,9 @@ String singleQuoteString() : {
         { return ""; }
     ) | (
         <STRING_SINGLE_NONEMPTY>
-        { 
+        {
             String image = token.image;
-            return image.substring(1, image.length()-1); 
+            return image.substring(1, image.length() - 1);
         }
     )
 }

==================================================
