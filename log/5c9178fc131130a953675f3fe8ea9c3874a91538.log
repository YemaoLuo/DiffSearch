5c9178fc131130a953675f3fe8ea9c3874a91538
==================================================
Adjusted the timeout for abandoned, its in seconds
==================================================
Filip Hanik
==================================================
Tue Oct 28 20:31:00 2008 +0000
==================================================
ConnectionPool.java
index 8aff55a077..3abbb38ded 100644
--- a/modules/jdbc-pool/doc/jdbc-pool.xml
+++ b/modules/jdbc-pool/doc/jdbc-pool.xml
@@ -257,6 +257,12 @@
       <p>(int) Property not used. The default value is <code>false</code>.</p>
     </attribute>
    
+    <attribute name="fairQueue" required="false">
+      <p>(boolean) Set to true if you wish that calls to getConnection should be treated
+         fairly in a true FIFO fashion. This uses the <code>org.apache.tomcat.jdbc.pool.FairBlockingQueue</code> 
+         implementation for the list of the idle connections. The default value is <code>false</code>.
+      </p>
+    </attribute>
 
 
   </attributes>

==================================================
DefaultTestCase.java
index 8627a87a8a..03c4d9e3a2 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -514,7 +514,7 @@ public class ConnectionPool {
             //if the connection pool is closed
             //close the connection instead of returning it
             release(con);
-            return;
+            return; 
         } //end if
 
         if (con != null) {
@@ -552,7 +552,7 @@ public class ConnectionPool {
 
     public void checkAbandoned() {
         try {
-            long now = System.currentTimeMillis();
+            if (busy.size()==0) return;
             Iterator<PooledConnection> locked = busy.iterator();
             while (locked.hasNext()) {
                 PooledConnection con = locked.next();
@@ -564,6 +564,7 @@ public class ConnectionPool {
                     if (idle.contains(con))
                         continue;
                     long time = con.getTimestamp();
+                    long now = System.currentTimeMillis();
                     if ((now - time) > con.getAbandonTimeout()) {
                         busy.remove(con);
                         abandon(con);
@@ -587,6 +588,7 @@ public class ConnectionPool {
 
     public void checkIdle() {
         try {
+            if (idle.size()==0) return;
             long now = System.currentTimeMillis();
             Iterator<PooledConnection> unlocked = idle.iterator();
             while ( (idle.size()>=getPoolProperties().getMinIdle()) && unlocked.hasNext()) {
@@ -621,6 +623,7 @@ public class ConnectionPool {
 
     public void testAllIdle() {
         try {
+            if (idle.size()==0) return;
             Iterator<PooledConnection> unlocked = idle.iterator();
             while (unlocked.hasNext()) {
                 PooledConnection con = unlocked.next();

==================================================
TestTimeout.java
index dafa9666a5..9b83810ce6 100644
--- a/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/DefaultTestCase.java
+++ b/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/DefaultTestCase.java
@@ -50,7 +50,7 @@ public class DefaultTestCase extends TestCase {
         p.setMaxActive(threadcount);
         p.setInitialSize(threadcount);
         p.setMaxWait(10000);
-        p.setRemoveAbandonedTimeout(10000);
+        p.setRemoveAbandonedTimeout(10);
         p.setMinEvictableIdleTimeMillis(10000);
         p.setMinIdle(threadcount);
         p.setLogAbandoned(false);

==================================================
