7fa8a5a10b02d4abe61fd260b02f729dc6216f18
==================================================
Add i18n for the storeconfig package. Also filter out tomcat-web.xml that has been added.
==================================================
Remy Maucherat
==================================================
Thu Dec 6 10:51:04 2018 +0000
==================================================
GlobalNamingResourcesSF.java
Add i18n for the storeconfig package. Also filter out tomcat-web.xml that has been added.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1848282 13f79535-47bb-0310-9956-ffa450edef68



==================================================
NamingResourcesSF.java
index 48c1eb41ff..035034016f 100644
--- a/java/org/apache/catalina/storeconfig/LocalStrings.properties
+++ b/java/org/apache/catalina/storeconfig/LocalStrings.properties
@@ -22,8 +22,22 @@ config.storeServerError=Error storing server
 factory.storeNoDescriptor=Descriptor for element class [{0}] not configured!
 factory.storeTag=store tag [{0}] ( Object: [{1}] )
 
+globalNamingResourcesSF.noFactory=Cannot find NamingResources store factory
+globalNamingResourcesSF.wrongElement=Wrong element [{0}]
+
 registry.loadClassFailed=Failed to load class [{0}]
 
+standardContextSF.canonicalPathError=Failed to obtain the canonical path of the configuration file [{0}]
+standardContextSF.cannotWriteFile=Cannot write file at [{0}]
+standardContextSF.moveFailed=Context original file at [{0}] is null, not a file or not writable
+standardContextSF.storeContext=Store context [{0}] configuration separately at path [{1}]
+standardContextSF.storeContextWithBackup=Store context [{0}] configuration separately with backup at path [{1}]
+
 storeConfigListener.loadError=Error loading StoreConfig
 storeConfigListener.notServer=The listener was added to component other than the Server and will therefore be ignored
 storeConfigListener.registerError=Error registering StoreConfig MBean
+
+storeFactory.noDescriptor=Descriptor for element [{0}].[{1}] not configured
+
+storeFileMover.directoryCreationError=Cannot create directory [{0}]
+storeFileMover.renameError=Cannot rename [{0}] to [{1}]

==================================================
StandardContextSF.java
index 603d8c85f7..8bf0adff0e 100644
--- a/java/org/apache/catalina/storeconfig/NamingResourcesSF.java
+++ b/java/org/apache/catalina/storeconfig/NamingResourcesSF.java
@@ -50,9 +50,7 @@ public class NamingResourcesSF extends StoreFactoryBase {
                         + " )");
             storeChildren(aWriter, indent, aElement, elementDesc);
         } else {
-            if (log.isWarnEnabled())
-                log.warn("Descriptor for element" + aElement.getClass()
-                        + " not configured!");
+            log.warn(sm.getString("storeFactory.noDescriptor", aElement.getClass(), "NamingResources"));
         }
     }
 

==================================================
StoreFileMover.java
index 4cb625bc81..ff6e472eb7 100644
--- a/java/org/apache/catalina/storeconfig/StandardContextSF.java
+++ b/java/org/apache/catalina/storeconfig/StandardContextSF.java
@@ -125,15 +125,11 @@ public class StandardContextSF extends StoreFactoryBase {
                         config.getPath());
             }
             if( (!config.isFile()) || (!config.canWrite())) {
-                log.error("Cannot write context output file at "
-                            + configFile + ", not saving.");
-                throw new IOException("Context save file at "
-                                      + configFile
-                                      + " not a file, or not writable.");
+                throw new IOException(sm.getString("standardContextSF.cannotWriteFile", configFile));
+            }
+            if (log.isInfoEnabled()) {
+                log.info(sm.getString("standardContextSF.storeContext", aContext.getPath(), config));
             }
-            if (log.isInfoEnabled())
-                log.info("Store Context " + aContext.getPath()
-                        + " separate at file " + config);
             try (FileOutputStream fos = new FileOutputStream(config);
                     PrintWriter writer = new PrintWriter(new OutputStreamWriter(
                             fos , getRegistry().getEncoding()))) {
@@ -159,24 +155,16 @@ public class StandardContextSF extends StoreFactoryBase {
                     || (mover.getConfigOld().isDirectory())
                     || (mover.getConfigOld().exists() &&
                             !mover.getConfigOld().canWrite())) {
-                log.error("Cannot move orignal context output file at "
-                        + mover.getConfigOld());
-                throw new IOException("Context original file at "
-                        + mover.getConfigOld()
-                        + " is null, not a file or not writable.");
+                throw new IOException(sm.getString("standardContextSF.moveFailed", mover.getConfigOld()));
             }
             File dir = mover.getConfigSave().getParentFile();
             if (dir != null && dir.isDirectory() && (!dir.canWrite())) {
-                log.error("Cannot save context output file at "
-                        + mover.getConfigSave());
-                throw new IOException("Context save file at "
-                        + mover.getConfigSave() + " is not writable.");
+                throw new IOException(sm.getString("standardContextSF.cannotWriteFile", mover.getConfigSave()));
+            }
+            if (log.isInfoEnabled()) {
+                log.info(sm.getString("standardContextSF.storeContextWithBackup",
+                        aContext.getPath(), mover.getConfigSave()));
             }
-            if (log.isInfoEnabled())
-                log.info("Store Context " + aContext.getPath()
-                        + " separate with backup (at file "
-                        + mover.getConfigSave() + " )");
-
             try (PrintWriter writer = mover.getWriter()) {
                 storeXMLHead(writer);
                 super.store(writer, -2, aContext);
@@ -317,7 +305,7 @@ public class StandardContextSF extends StoreFactoryBase {
             try {
                 file = file.getCanonicalFile();
             } catch (IOException e) {
-                log.error(e);
+                log.error(sm.getString("standardContextSF.canonicalPathError"), e);
             }
         }
         return file;
@@ -346,11 +334,11 @@ public class StandardContextSF extends StoreFactoryBase {
         String confHostDefault = new File(configBase, "context.xml.default")
                 .getCanonicalPath();
         String configFile = (context.getConfigFile() != null ? new File(context.getConfigFile().toURI()).getCanonicalPath() : null);
-        String webxml = "WEB-INF/web.xml" ;
+        String webxml = "WEB-INF/web.xml";
+        String tomcatwebxml = "WEB-INF/tomcat-web.xml";
 
         List<String> resource = new ArrayList<>();
         for (int i = 0; i < wresources.length; i++) {
-
             if (wresources[i].equals(confContext))
                 continue;
             if (wresources[i].equals(confWeb))
@@ -361,6 +349,8 @@ public class StandardContextSF extends StoreFactoryBase {
                 continue;
             if (wresources[i].equals(webxml))
                 continue;
+            if (wresources[i].equals(tomcatwebxml))
+                continue;
             resource.add(wresources[i]);
         }
         return resource.toArray(new String[resource.size()]);

==================================================
WatchedResourceSF.java
index faefca751f..a59b9c1270 100644
--- a/java/org/apache/catalina/storeconfig/StoreFileMover.java
+++ b/java/org/apache/catalina/storeconfig/StoreFileMover.java
@@ -23,6 +23,8 @@ import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
 import java.sql.Timestamp;
 
+import org.apache.tomcat.util.res.StringManager;
+
 /**
  * Move server.xml or context.xml as backup
  *
@@ -30,6 +32,8 @@ import java.sql.Timestamp;
  */
 public class StoreFileMover {
 
+    protected static final StringManager sm = StringManager.getManager(Constants.Package);
+
     private String filename = "conf/server.xml";
 
     private String encoding = "UTF-8";
@@ -141,7 +145,7 @@ public class StoreFileMover {
         }
         if (!configNew.getParentFile().exists()) {
             if (!configNew.getParentFile().mkdirs()) {
-                throw new IllegalStateException("Cannot create directory " + configNew);
+                throw new IllegalStateException(sm.getString("storeFileMover.directoryCreationError", configNew));
             }
         }
         String sb = getTimeTag();
@@ -160,21 +164,18 @@ public class StoreFileMover {
         if (configOld.renameTo(configSave)) {
             if (!configNew.renameTo(configOld)) {
                 configSave.renameTo(configOld);
-                throw new IOException("Cannot rename "
-                        + configNew.getAbsolutePath() + " to "
-                        + configOld.getAbsolutePath());
+                throw new IOException(sm.getString("storeFileMover.renameError",
+                        configNew.getAbsolutePath(), configOld.getAbsolutePath()));
             }
         } else {
             if (!configOld.exists()) {
                 if (!configNew.renameTo(configOld)) {
-                    throw new IOException("Cannot move "
-                            + configNew.getAbsolutePath() + " to "
-                            + configOld.getAbsolutePath());
+                    throw new IOException(sm.getString("storeFileMover.renameError",
+                            configNew.getAbsolutePath(), configOld.getAbsolutePath()));
                 }
             } else {
-                throw new IOException("Cannot rename "
-                    + configOld.getAbsolutePath() + " to "
-                    + configSave.getAbsolutePath());
+                throw new IOException(sm.getString("storeFileMover.renameError",
+                        configOld.getAbsolutePath(), configSave.getAbsolutePath()));
             }
         }
     }

==================================================
WrapperLifecycleSF.java
index a97e4140b9..7e5dafd0b4 100644
--- a/java/org/apache/catalina/storeconfig/WatchedResourceSF.java
+++ b/java/org/apache/catalina/storeconfig/WatchedResourceSF.java
@@ -47,8 +47,8 @@ public class WatchedResourceSF extends StoreFactoryBase {
                 getStoreAppender().printTagArray(aWriter, "WatchedResource",
                         indent, resources);
             }
-        } else
-            log.warn("Descriptor for element" + aElement.getClass()
-                    + ".[WatchedResource] not configured!");
+        } else {
+            log.warn(sm.getString("storeFactory.noDescriptor", aElement.getClass(), "WatchedResource"));
+        }
     }
 }
\ No newline at end of file

==================================================
WrapperListenerSF.java
index d4aab43ae9..89aa667b63 100644
--- a/java/org/apache/catalina/storeconfig/WrapperLifecycleSF.java
+++ b/java/org/apache/catalina/storeconfig/WrapperLifecycleSF.java
@@ -47,8 +47,8 @@ public class WrapperLifecycleSF extends StoreFactoryBase {
                 getStoreAppender().printTagArray(aWriter, "WrapperLifecycle",
                         indent, listeners);
             }
-        } else
-            log.warn("Descriptor for element" + aElement.getClass()
-                    + ".[WrapperLifecycle] not configured!");
+        } else {
+            log.warn(sm.getString("storeFactory.noDescriptor", aElement.getClass(), "WrapperLifecycle"));
+        }
     }
 }
\ No newline at end of file

==================================================
