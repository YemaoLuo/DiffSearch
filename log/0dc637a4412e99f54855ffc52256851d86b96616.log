0dc637a4412e99f54855ffc52256851d86b96616
==================================================
Global search and replace:
==================================================
Mark Thomas
==================================================
Wed Mar 18 11:08:56 2015 +0000
==================================================
BasicAuthenticator.java
Global search and replace:
return (true); -> return true;
return (false); -> return false;
It won't catch all the unnecessary use if () but it is a good start.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1667500 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SSLAuthenticator.java
index a8100ccb98..175d74d41a 100644
--- a/java/org/apache/catalina/authenticator/BasicAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/BasicAuthenticator.java
@@ -85,7 +85,7 @@ public class BasicAuthenticator extends AuthenticatorBase {
                 if (principal != null) {
                     register(request, response, principal,
                         HttpServletRequest.BASIC_AUTH, username, password);
-                    return (true);
+                    return true;
                 }
             }
             catch (IllegalArgumentException iae) {
@@ -102,7 +102,7 @@ public class BasicAuthenticator extends AuthenticatorBase {
         value.append('\"');
         response.setHeader(AUTH_HEADER_NAME, value.toString());
         response.sendError(HttpServletResponse.SC_UNAUTHORIZED);
-        return (false);
+        return false;
 
     }
 

==================================================
Response.java
index 2d184bbb8f..be9da9a050 100644
--- a/java/org/apache/catalina/authenticator/SSLAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/SSLAuthenticator.java
@@ -85,13 +85,13 @@ public class SSLAuthenticator extends AuthenticatorBase {
             }
             response.sendError(HttpServletResponse.SC_UNAUTHORIZED,
                                sm.getString("authenticator.unauthorized"));
-            return (false);
+            return false;
         }
 
         // Cache the principal (if requested) and record this authentication
         register(request, response, principal,
                 HttpServletRequest.CLIENT_CERT_AUTH, null, null);
-        return (true);
+        return true;
 
     }
 

==================================================
ApplicationFilterFactory.java
index 4d05cd0300..9292b2e566 100644
--- a/java/org/apache/catalina/connector/Response.java
+++ b/java/org/apache/catalina/connector/Response.java
@@ -1458,22 +1458,22 @@ public class Response
     protected boolean isEncodeable(final String location) {
 
         if (location == null) {
-            return (false);
+            return false;
         }
 
         // Is this an intra-document reference?
         if (location.startsWith("#")) {
-            return (false);
+            return false;
         }
 
         // Are we in a valid session that is not using cookies?
         final Request hreq = request;
         final Session session = hreq.getSessionInternal(false);
         if (session == null) {
-            return (false);
+            return false;
         }
         if (hreq.isRequestedSessionIdFromCookie()) {
-            return (false);
+            return false;
         }
 
         // Is URL encoding permitted
@@ -1503,15 +1503,15 @@ public class Response
         try {
             url = new URL(location);
         } catch (MalformedURLException e) {
-            return (false);
+            return false;
         }
 
         // Does this URL match down to (and including) the context path?
         if (!hreq.getScheme().equalsIgnoreCase(url.getProtocol())) {
-            return (false);
+            return false;
         }
         if (!hreq.getServerName().equalsIgnoreCase(url.getHost())) {
-            return (false);
+            return false;
         }
         int serverPort = hreq.getServerPort();
         if (serverPort == -1) {
@@ -1530,25 +1530,25 @@ public class Response
             }
         }
         if (serverPort != urlPort) {
-            return (false);
+            return false;
         }
 
         String contextPath = getContext().getPath();
         if (contextPath != null) {
             String file = url.getFile();
             if ((file == null) || !file.startsWith(contextPath)) {
-                return (false);
+                return false;
             }
             String tok = ";" +
                     SessionConfig.getSessionUriParamName(request.getContext()) +
                     "=" + session.getIdInternal();
             if( file.indexOf(tok, contextPath.length()) >= 0 ) {
-                return (false);
+                return false;
             }
         }
 
         // This URL belongs to our web application, so it is encodeable
-        return (true);
+        return true;
 
     }
 

==================================================
ApplicationHttpRequest.java
index d8c9978a3a..9aec0860a9 100644
--- a/java/org/apache/catalina/core/ApplicationFilterFactory.java
+++ b/java/org/apache/catalina/core/ApplicationFilterFactory.java
@@ -173,22 +173,22 @@ public final class ApplicationFilterFactory {
         // Check the specific "*" special URL pattern, which also matches
         // named dispatches
         if (filterMap.getMatchAllUrlPatterns())
-            return (true);
+            return true;
 
         if (requestPath == null)
-            return (false);
+            return false;
 
         // Match on context relative request path
         String[] testPaths = filterMap.getURLPatterns();
 
         for (int i = 0; i < testPaths.length; i++) {
             if (matchFiltersURL(testPaths[i], requestPath)) {
-                return (true);
+                return true;
             }
         }
 
         // No match
-        return (false);
+        return false;
 
     }
 
@@ -204,25 +204,25 @@ public final class ApplicationFilterFactory {
     private boolean matchFiltersURL(String testPath, String requestPath) {
 
         if (testPath == null)
-            return (false);
+            return false;
 
         // Case 1 - Exact Match
         if (testPath.equals(requestPath))
-            return (true);
+            return true;
 
         // Case 2 - Path Match ("/.../*")
         if (testPath.equals("/*"))
-            return (true);
+            return true;
         if (testPath.endsWith("/*")) {
             if (testPath.regionMatches(0, requestPath, 0,
                                        testPath.length() - 2)) {
                 if (requestPath.length() == (testPath.length() - 2)) {
-                    return (true);
+                    return true;
                 } else if ('/' == requestPath.charAt(testPath.length() - 2)) {
-                    return (true);
+                    return true;
                 }
             }
-            return (false);
+            return false;
         }
 
         // Case 3 - Extension Match
@@ -239,7 +239,7 @@ public final class ApplicationFilterFactory {
         }
 
         // Case 4 - "Default" Match
-        return (false); // NOTE - Not relevant for selecting filters
+        return false; // NOTE - Not relevant for selecting filters
 
     }
 
@@ -256,16 +256,16 @@ public final class ApplicationFilterFactory {
                                         String servletName) {
 
         if (servletName == null) {
-            return (false);
+            return false;
         }
         // Check the specific "*" special servlet name
         else if (filterMap.getMatchAllServletNames()) {
-            return (true);
+            return true;
         } else {
             String[] servletNames = filterMap.getServletNames();
             for (int i = 0; i < servletNames.length; i++) {
                 if (servletName.equals(servletNames[i])) {
-                    return (true);
+                    return true;
                 }
             }
             return false;

==================================================
ApplicationRequest.java
index e5c2769f56..ef80f9b759 100644
--- a/java/org/apache/catalina/core/ApplicationHttpRequest.java
+++ b/java/org/apache/catalina/core/ApplicationHttpRequest.java
@@ -585,12 +585,12 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
 
             String requestedSessionId = getRequestedSessionId();
             if (requestedSessionId == null)
-                return (false);
+                return false;
             if (context == null)
-                return (false);
+                return false;
             Manager manager = context.getManager();
             if (manager == null)
-                return (false);
+                return false;
             Session session = null;
             try {
                 session = manager.findSession(requestedSessionId);
@@ -598,9 +598,9 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
                 // Ignore
             }
             if ((session != null) && session.isValid()) {
-                return (true);
+                return true;
             } else {
-                return (false);
+                return false;
             }
 
         } else {
@@ -768,9 +768,9 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
 
         for (int i = 0; i < specials.length; i++) {
             if (specials[i].equals(name))
-                return (true);
+                return true;
         }
-        return (false);
+        return false;
 
     }
 
@@ -800,10 +800,10 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
         for (int i = 0; i < specials.length; i++) {
             if (specials[i].equals(name)) {
                 specialAttributes[i] = value;
-                return (true);
+                return true;
             }
         }
-        return (false);
+        return false;
     }
 
 
@@ -816,10 +816,10 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
         for (int i = 0; i < specials.length; i++) {
             if (specials[i].equals(name)) {
                 specialAttributes[i] = null;
-                return (true);
+                return true;
             }
         }
-        return (false);
+        return false;
     }
 
 

==================================================
StandardContext.java
index 23a852cf6c..d60e94665e 100644
--- a/java/org/apache/catalina/core/ApplicationRequest.java
+++ b/java/org/apache/catalina/core/ApplicationRequest.java
@@ -199,9 +199,9 @@ class ApplicationRequest extends ServletRequestWrapper {
 
         for (int i = 0; i < specials.length; i++) {
             if (specials[i].equals(name))
-                return (true);
+                return true;
         }
-        return (false);
+        return false;
 
     }
 

==================================================
StandardHostValve.java
index 9abe57a71d..93d0c87028 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -3536,10 +3536,10 @@ public class StandardContext extends ContainerBase
         synchronized (securityRolesLock) {
             for (int i = 0; i < securityRoles.length; i++) {
                 if (role.equals(securityRoles[i]))
-                    return (true);
+                    return true;
             }
         }
-        return (false);
+        return false;
 
     }
 
@@ -3640,10 +3640,10 @@ public class StandardContext extends ContainerBase
         synchronized (welcomeFilesLock) {
             for (int i = 0; i < welcomeFiles.length; i++) {
                 if (name.equals(welcomeFiles[i]))
-                    return (true);
+                    return true;
             }
         }
-        return (false);
+        return false;
 
     }
 
@@ -4606,7 +4606,7 @@ public class StandardContext extends ContainerBase
             }
             filterConfigs.clear();
         }
-        return (true);
+        return true;
 
     }
 
@@ -4655,7 +4655,7 @@ public class StandardContext extends ContainerBase
         }
         if (!ok) {
             getLogger().error(sm.getString("standardContext.applicationSkipped"));
-            return (false);
+            return false;
         }
 
         // Sort listeners in two arrays
@@ -6105,9 +6105,9 @@ public class StandardContext extends ContainerBase
     private boolean validateURLPattern(String urlPattern) {
 
         if (urlPattern == null)
-            return (false);
+            return false;
         if (urlPattern.indexOf('\n') >= 0 || urlPattern.indexOf('\r') >= 0) {
-            return (false);
+            return false;
         }
         if (urlPattern.equals("")) {
             return true;
@@ -6115,16 +6115,16 @@ public class StandardContext extends ContainerBase
         if (urlPattern.startsWith("*.")) {
             if (urlPattern.indexOf('/') < 0) {
                 checkUnusualURLPattern(urlPattern);
-                return (true);
+                return true;
             } else
-                return (false);
+                return false;
         }
         if ( (urlPattern.startsWith("/")) &&
                 (urlPattern.indexOf("*.") < 0)) {
             checkUnusualURLPattern(urlPattern);
-            return (true);
+            return true;
         } else
-            return (false);
+            return false;
 
     }
 

==================================================
StandardWrapper.java
index 6d6f537add..4d19f7ccb0 100644
--- a/java/org/apache/catalina/core/StandardHostValve.java
+++ b/java/org/apache/catalina/core/StandardHostValve.java
@@ -396,13 +396,13 @@ final class StandardHostValve extends ValveBase {
             }
 
             // Indicate that we have successfully processed this custom page
-            return (true);
+            return true;
 
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
             // Report our failure to process this custom page
             container.getLogger().error("Exception Processing " + errorPage, t);
-            return (false);
+            return false;
 
         }
     }

==================================================
JAASMemoryLoginModule.java
index 01b4a7009e..e5606ef459 100644
--- a/java/org/apache/catalina/core/StandardWrapper.java
+++ b/java/org/apache/catalina/core/StandardWrapper.java
@@ -1660,7 +1660,7 @@ public class StandardWrapper extends ContainerBase
     protected boolean isContainerProvidedServlet(String classname) {
 
         if (classname.startsWith("org.apache.catalina.")) {
-            return (true);
+            return true;
         }
         try {
             Class<?> clazz =
@@ -1668,7 +1668,7 @@ public class StandardWrapper extends ContainerBase
             return (ContainerServlet.class.isAssignableFrom(clazz));
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
-            return (false);
+            return false;
         }
 
     }

==================================================
JNDIRealm.java
index 9887ca2370..400b763078 100644
--- a/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
+++ b/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
@@ -139,7 +139,7 @@ public class JAASMemoryLoginModule extends MemoryRealm implements LoginModule {
 
         // If our authentication was not successful, just return false
         if (principal == null)
-            return (false);
+            return false;
 
         // Clean up if overall authentication failed
         if (committed)
@@ -149,7 +149,7 @@ public class JAASMemoryLoginModule extends MemoryRealm implements LoginModule {
             principal = null;
         }
         log.debug("Abort");
-        return (true);
+        return true;
 
     }
 
@@ -171,7 +171,7 @@ public class JAASMemoryLoginModule extends MemoryRealm implements LoginModule {
 
         // If authentication was not successful, just return false
         if (principal == null)
-            return (false);
+            return false;
 
         // Add our Principal to the Subject if needed
         if (!subject.getPrincipals().contains(principal)) {
@@ -189,7 +189,7 @@ public class JAASMemoryLoginModule extends MemoryRealm implements LoginModule {
         }
 
         committed = true;
-        return (true);
+        return true;
 
     }
 
@@ -299,7 +299,7 @@ public class JAASMemoryLoginModule extends MemoryRealm implements LoginModule {
 
         // Report results based on success or failure
         if (principal != null) {
-            return (true);
+            return true;
         } else {
             throw new
                 FailedLoginException("Username or password is incorrect");
@@ -322,7 +322,7 @@ public class JAASMemoryLoginModule extends MemoryRealm implements LoginModule {
         subject.getPrincipals().remove(principal);
         committed = false;
         principal = null;
-        return (true);
+        return true;
 
     }
 

==================================================
RealmBase.java
index 5863c11d78..3335c87c33 100644
--- a/java/org/apache/catalina/realm/JNDIRealm.java
+++ b/java/org/apache/catalina/realm/JNDIRealm.java
@@ -1799,7 +1799,7 @@ public class JNDIRealm extends RealmBase {
             containerLog.trace("  validating credentials");
 
         if (info == null || credentials == null)
-            return (false);
+            return false;
 
         String password = info.getPassword();
 
@@ -1822,11 +1822,11 @@ public class JNDIRealm extends RealmBase {
          throws NamingException {
 
          if (credentials == null || user == null)
-             return (false);
+             return false;
 
          String dn = user.getDN();
          if (dn == null)
-             return (false);
+             return false;
 
          // Validate the credentials specified by the user
          if (containerLog.isTraceEnabled()) {

==================================================
LoaderSF.java
index fae3eacad2..ac4521d212 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -939,7 +939,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
         throws IOException {
 
         if (constraints == null || constraints.length == 0)
-            return (true);
+            return true;
 
         // Which user principal have we already authenticated?
         Principal principal = request.getPrincipal();
@@ -1062,7 +1062,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
         // Should be overridden in JAASRealm - to avoid pretty inefficient conversions
         if ((principal == null) || (role == null) ||
             !(principal instanceof GenericPrincipal))
-            return (false);
+            return false;
 
         GenericPrincipal gp = (GenericPrincipal) principal;
         boolean result = gp.hasRole(role);
@@ -1100,7 +1100,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
         if (constraints == null || constraints.length == 0) {
             if (log.isDebugEnabled())
                 log.debug("  No applicable security constraint defined");
-            return (true);
+            return true;
         }
         for(int i=0; i < constraints.length; i++) {
             SecurityConstraint constraint = constraints[i];
@@ -1108,12 +1108,12 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
             if (userConstraint == null) {
                 if (log.isDebugEnabled())
                     log.debug("  No applicable user data constraint defined");
-                return (true);
+                return true;
             }
             if (userConstraint.equals(Constants.NONE_TRANSPORT)) {
                 if (log.isDebugEnabled())
                     log.debug("  User data constraint has no restrictions");
-                return (true);
+                return true;
             }
 
         }
@@ -1121,7 +1121,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
         if (request.getRequest().isSecure()) {
             if (log.isDebugEnabled())
                 log.debug("  User data constraint already satisfied");
-            return (true);
+            return true;
         }
         // Initialize variables we need to determine the appropriate action
         int redirectPort = request.getConnector().getRedirectPort();
@@ -1133,7 +1133,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
             response.sendError
                 (HttpServletResponse.SC_FORBIDDEN,
                  request.getRequestURI());
-            return (false);
+            return false;
         }
 
         // Redirect to the corresponding SSL port
@@ -1165,7 +1165,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
         if (log.isDebugEnabled())
             log.debug("  Redirecting to " + file.toString());
         response.sendRedirect(file.toString());
-        return (false);
+        return false;
 
     }
 

==================================================
ManagerSF.java
index 14a0d82bce..873517af8f 100644
--- a/java/org/apache/catalina/storeconfig/LoaderSF.java
+++ b/java/org/apache/catalina/storeconfig/LoaderSF.java
@@ -71,14 +71,14 @@ public class LoaderSF extends StoreFactoryBase {
     protected boolean isDefaultLoader(Loader loader) {
 
         if (!(loader instanceof WebappLoader)) {
-            return (false);
+            return false;
         }
         WebappLoader wloader = (WebappLoader) loader;
         if ((wloader.getDelegate() != false)
                 || !wloader.getLoaderClass().equals(
                         "org.apache.catalina.loader.WebappClassLoader")) {
-            return (false);
+            return false;
         }
-        return (true);
+        return true;
     }
 }

==================================================
StoreAppender.java
index f8dc6a1a6b..ae3be39ec8 100644
--- a/java/org/apache/catalina/storeconfig/ManagerSF.java
+++ b/java/org/apache/catalina/storeconfig/ManagerSF.java
@@ -72,9 +72,9 @@ public class ManagerSF extends StoreFactoryBase {
 
         if (!"SESSIONS.ser".equals(smanager.getPathname())
                 || (smanager.getMaxActiveSessions() != -1)) {
-            return (false);
+            return false;
         }
-        return (true);
+        return true;
 
     }
 

==================================================
Extension.java
index d586c43428..550d32b82c 100644
--- a/java/org/apache/catalina/storeconfig/StoreAppender.java
+++ b/java/org/apache/catalina/storeconfig/StoreAppender.java
@@ -383,10 +383,10 @@ public class StoreAppender {
 
         for (int i = 0; i < persistables.length; i++) {
             if (persistables[i] == clazz || persistables[i].isAssignableFrom(clazz)) {
-                return (true);
+                return true;
             }
         }
-        return (false);
+        return false;
 
     }
 }

==================================================
JspServlet.java
index c26b0d66c2..31c83d76bf 100644
--- a/java/org/apache/catalina/util/Extension.java
+++ b/java/org/apache/catalina/util/Extension.java
@@ -181,35 +181,35 @@ public final class Extension {
 
         // Extension Name must match
         if (extensionName == null)
-            return (false);
+            return false;
         if (!extensionName.equals(required.getExtensionName()))
-            return (false);
+            return false;
 
         // If specified, available specification version must be >= required
         if (required.getSpecificationVersion() != null) {
             if (!isNewer(specificationVersion,
                          required.getSpecificationVersion()))
-                return (false);
+                return false;
         }
 
         // If specified, Implementation Vendor ID must match
         if (required.getImplementationVendorId() != null) {
             if (implementationVendorId == null)
-                return (false);
+                return false;
             if (!implementationVendorId.equals(required
                     .getImplementationVendorId()))
-                return (false);
+                return false;
         }
 
         // If specified, Implementation version must be >= required
         if (required.getImplementationVersion() != null) {
             if (!isNewer(implementationVersion,
                          required.getImplementationVersion()))
-                return (false);
+                return false;
         }
 
         // This available optional package satisfies the requirements
-        return (true);
+        return true;
 
     }
 
@@ -268,9 +268,9 @@ public final class Extension {
         throws NumberFormatException {
 
         if ((first == null) || (second == null))
-            return (false);
+            return false;
         if (first.equals(second))
-            return (true);
+            return true;
 
         StringTokenizer fTok = new StringTokenizer(first, ".", true);
         StringTokenizer sTok = new StringTokenizer(second, ".", true);
@@ -286,16 +286,16 @@ public final class Extension {
             else
                 sVersion = 0;
             if (fVersion < sVersion)
-                return (false);
+                return false;
             else if (fVersion > sVersion)
-                return (true);
+                return true;
             if (fTok.hasMoreTokens())   // Swallow the periods
                 fTok.nextToken();
             if (sTok.hasMoreTokens())
                 sTok.nextToken();
         }
 
-        return (true);  // Exact match
+        return true;  // Exact match
 
     }
 

==================================================
SecurityCollection.java
index 48693596e6..dd0de880d0 100644
--- a/java/org/apache/jasper/servlet/JspServlet.java
+++ b/java/org/apache/jasper/servlet/JspServlet.java
@@ -235,22 +235,22 @@ public class JspServlet extends HttpServlet implements PeriodicEventListener {
 
         String queryString = request.getQueryString();
         if (queryString == null) {
-            return (false);
+            return false;
         }
         int start = queryString.indexOf(Constants.PRECOMPILE);
         if (start < 0) {
-            return (false);
+            return false;
         }
         queryString =
             queryString.substring(start + Constants.PRECOMPILE.length());
         if (queryString.length() == 0) {
-            return (true);             // ?jsp_precompile
+            return true;             // ?jsp_precompile
         }
         if (queryString.startsWith("&")) {
-            return (true);             // ?jsp_precompile&foo=bar...
+            return true;             // ?jsp_precompile&foo=bar...
         }
         if (!queryString.startsWith("=")) {
-            return (false);            // part of some other name or value
+            return false;            // part of some other name or value
         }
         int limit = queryString.length();
         int ampersand = queryString.indexOf("&");
@@ -259,14 +259,14 @@ public class JspServlet extends HttpServlet implements PeriodicEventListener {
         }
         String value = queryString.substring(1, limit);
         if (value.equals("true")) {
-            return (true);             // ?jsp_precompile=true
+            return true;             // ?jsp_precompile=true
         } else if (value.equals("false")) {
             // Spec says if jsp_precompile=false, the request should not
             // be delivered to the JSP page; the easiest way to implement
             // this is to set the flag to true, and precompile the page anyway.
             // This still conforms to the spec, since it says the
             // precompilation request can be ignored.
-            return (true);             // ?jsp_precompile=false
+            return true;             // ?jsp_precompile=false
         } else {
             throw new ServletException("Cannot have request parameter " +
                                        Constants.PRECOMPILE + " set to " +

==================================================
SecurityConstraint.java
index 9800b41101..f213a46fa5 100644
--- a/java/org/apache/tomcat/util/descriptor/web/SecurityCollection.java
+++ b/java/org/apache/tomcat/util/descriptor/web/SecurityCollection.java
@@ -229,7 +229,7 @@ public class SecurityCollection implements Serializable {
     public boolean findMethod(String method) {
 
         if (methods.length == 0 && omittedMethods.length == 0)
-            return (true);
+            return true;
         if (methods.length > 0) {
             for (int i = 0; i < methods.length; i++) {
                 if (methods[i].equals(method))
@@ -280,9 +280,9 @@ public class SecurityCollection implements Serializable {
 
         for (int i = 0; i < patterns.length; i++) {
             if (patterns[i].equals(pattern))
-                return (true);
+                return true;
         }
-        return (false);
+        return false;
 
     }
 

==================================================
BaseAttributeFilter.java
index e032de2363..3c1a2485f2 100644
--- a/java/org/apache/tomcat/util/descriptor/web/SecurityConstraint.java
+++ b/java/org/apache/tomcat/util/descriptor/web/SecurityConstraint.java
@@ -293,12 +293,12 @@ public class SecurityConstraint implements Serializable {
     public boolean findAuthRole(String role) {
 
         if (role == null)
-            return (false);
+            return false;
         for (int i = 0; i < authRoles.length; i++) {
             if (role.equals(authRoles[i]))
-                return (true);
+                return true;
         }
-        return (false);
+        return false;
 
     }
 
@@ -358,7 +358,7 @@ public class SecurityConstraint implements Serializable {
 
         // We cannot match without a valid request method
         if (method == null)
-            return (false);
+            return false;
 
         // Check all of the collections included in this constraint
         for (int i = 0; i < collections.length; i++) {
@@ -367,12 +367,12 @@ public class SecurityConstraint implements Serializable {
             String patterns[] = collections[i].findPatterns();
             for (int j = 0; j < patterns.length; j++) {
                 if (matchPattern(uri, patterns[j]))
-                    return (true);
+                    return true;
             }
         }
 
         // No collection included in this constraint matches this request
-        return (false);
+        return false;
 
     }
 
@@ -488,24 +488,24 @@ public class SecurityConstraint implements Serializable {
 
         // Check for exact match
         if (path.equals(pattern))
-            return (true);
+            return true;
 
         // Check for path prefix matching
         if (pattern.startsWith("/") && pattern.endsWith("/*")) {
             pattern = pattern.substring(0, pattern.length() - 2);
             if (pattern.length() == 0)
-                return (true);  // "/*" is the same as "/"
+                return true;  // "/*" is the same as "/"
             if (path.endsWith("/"))
                 path = path.substring(0, path.length() - 1);
             while (true) {
                 if (pattern.equals(path))
-                    return (true);
+                    return true;
                 int slash = path.lastIndexOf('/');
                 if (slash <= 0)
                     break;
                 path = path.substring(0, slash);
             }
-            return (false);
+            return false;
         }
 
         // Check for suffix matching
@@ -514,16 +514,16 @@ public class SecurityConstraint implements Serializable {
             int period = path.lastIndexOf('.');
             if ((slash >= 0) && (period > slash) &&
                 path.endsWith(pattern.substring(1))) {
-                return (true);
+                return true;
             }
-            return (false);
+            return false;
         }
 
         // Check for universal mapping
         if (pattern.equals("/"))
-            return (true);
+            return true;
 
-        return (false);
+        return false;
 
     }
 

==================================================
URL.java
index 529c251482..2d82c0d057 100644
--- a/java/org/apache/tomcat/util/modeler/BaseAttributeFilter.java
+++ b/java/org/apache/tomcat/util/modeler/BaseAttributeFilter.java
@@ -124,16 +124,16 @@ public class BaseAttributeFilter implements NotificationFilter {
     public boolean isNotificationEnabled(Notification notification) {
 
         if (notification == null)
-            return (false);
+            return false;
         if (!(notification instanceof AttributeChangeNotification))
-            return (false);
+            return false;
         AttributeChangeNotification acn =
             (AttributeChangeNotification) notification;
         if (!AttributeChangeNotification.ATTRIBUTE_CHANGE.equals(acn.getType()))
-            return (false);
+            return false;
         synchronized (names) {
             if (names.size() < 1)
-                return (true);
+                return true;
             else
                 return (names.contains(acn.getAttributeName()));
         }

==================================================
