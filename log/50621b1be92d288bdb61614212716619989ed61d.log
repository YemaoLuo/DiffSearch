50621b1be92d288bdb61614212716619989ed61d
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=58178
==================================================
Mark Thomas
==================================================
Thu Aug 6 18:17:35 2015 +0000
==================================================
Generator.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=58178
Fix the second part of this bug - El and imports for tag files.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1694548 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JspContextWrapper.java
index e2f4a0dc02..2f766dc429 100644
--- a/java/org/apache/jasper/compiler/Generator.java
+++ b/java/org/apache/jasper/compiler/Generator.java
@@ -3631,13 +3631,14 @@ class Generator {
         out.printin("public final class ");
         out.println(className);
         out.printil("    extends javax.servlet.jsp.tagext.SimpleTagSupport");
-        out.printin("    implements org.apache.jasper.runtime.JspSourceDependent");
+        out.printin("    implements org.apache.jasper.runtime.JspSourceDependent,");
+        out.println();
+        out.printin("                 org.apache.jasper.runtime.JspSourceImports");
         if (tagInfo.hasDynamicAttributes()) {
             out.println(",");
             out.printin("               javax.servlet.jsp.tagext.DynamicAttributes");
         }
         out.println(" {");
-        out.println();
         out.pushIndent();
 
         /*
@@ -3906,9 +3907,9 @@ class Generator {
             out.println(");");
         }
         if (aliasSeen) {
-            out.printil("this.jspContext = new org.apache.jasper.runtime.JspContextWrapper(ctx, _jspx_nested, _jspx_at_begin, _jspx_at_end, aliasMap);");
+            out.printil("this.jspContext = new org.apache.jasper.runtime.JspContextWrapper(this, ctx, _jspx_nested, _jspx_at_begin, _jspx_at_end, aliasMap);");
         } else {
-            out.printil("this.jspContext = new org.apache.jasper.runtime.JspContextWrapper(ctx, _jspx_nested, _jspx_at_begin, _jspx_at_end, null);");
+            out.printil("this.jspContext = new org.apache.jasper.runtime.JspContextWrapper(this, ctx, _jspx_nested, _jspx_at_begin, _jspx_at_end, null);");
         }
         out.popIndent();
         out.printil("}");

==================================================
TestJspContextWrapper.java
index 14ac9cdd6c..9af183f43d 100644
--- a/java/org/apache/jasper/runtime/JspContextWrapper.java
+++ b/java/org/apache/jasper/runtime/JspContextWrapper.java
@@ -26,6 +26,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
+import java.util.Set;
 
 import javax.el.ELContext;
 import javax.el.ELResolver;
@@ -47,6 +48,7 @@ import javax.servlet.jsp.el.ELException;
 import javax.servlet.jsp.el.ExpressionEvaluator;
 import javax.servlet.jsp.el.VariableResolver;
 import javax.servlet.jsp.tagext.BodyContent;
+import javax.servlet.jsp.tagext.JspTag;
 import javax.servlet.jsp.tagext.VariableInfo;
 
 import org.apache.jasper.compiler.Localizer;
@@ -66,6 +68,8 @@ import org.apache.jasper.compiler.Localizer;
 @SuppressWarnings("deprecation") // Have to support old JSP EL API
 public class JspContextWrapper extends PageContext implements VariableResolver {
 
+    private final JspTag jspTag;
+
     // Invoking JSP context
     private final PageContext invokingJspCtxt;
 
@@ -90,9 +94,10 @@ public class JspContextWrapper extends PageContext implements VariableResolver {
 
     private final PageContext rootJspCtxt;
 
-    public JspContextWrapper(JspContext jspContext,
+    public JspContextWrapper(JspTag jspTag, JspContext jspContext,
             ArrayList<String> nestedVars, ArrayList<String> atBeginVars,
             ArrayList<String> atEndVars, Map<String,String> aliases) {
+        this.jspTag = jspTag;
         this.invokingJspCtxt = (PageContext) jspContext;
         if (jspContext instanceof JspContextWrapper) {
             rootJspCtxt = ((JspContextWrapper)jspContext).rootJspCtxt;
@@ -502,7 +507,7 @@ public class JspContextWrapper extends PageContext implements VariableResolver {
     @Override
     public ELContext getELContext() {
         if (elContext == null) {
-            elContext = new ELContextWrapper(rootJspCtxt.getELContext(), this);
+            elContext = new ELContextWrapper(rootJspCtxt.getELContext(), jspTag, this);
         }
         return elContext;
     }
@@ -511,10 +516,13 @@ public class JspContextWrapper extends PageContext implements VariableResolver {
     static class ELContextWrapper extends ELContext {
 
         private final ELContext wrapped;
+        private final JspTag jspTag;
         private final PageContext pageContext;
+        private ImportHandler importHandler;
 
-        private ELContextWrapper(ELContext wrapped, PageContext pageContext) {
+        private ELContextWrapper(ELContext wrapped, JspTag jspTag, PageContext pageContext) {
             this.wrapped = wrapped;
+            this.jspTag = jspTag;
             this.pageContext = pageContext;
         }
 
@@ -552,7 +560,25 @@ public class JspContextWrapper extends PageContext implements VariableResolver {
 
         @Override
         public ImportHandler getImportHandler() {
-            return wrapped.getImportHandler();
+            if (importHandler == null) {
+                importHandler = new ImportHandler();
+                if (jspTag instanceof JspSourceImports) {
+                    Set<String> packageImports = ((JspSourceImports) jspTag).getPackageImports();
+                    if (packageImports != null) {
+                        for (String packageImport : packageImports) {
+                            importHandler.importPackage(packageImport);
+                        }
+                    }
+                    Set<String> classImports = ((JspSourceImports) jspTag).getClassImports();
+                    if (classImports != null) {
+                        for (String classImport : classImports) {
+                            importHandler.importClass(classImport);
+                        }
+                    }
+                }
+
+            }
+            return importHandler;
         }
 
         @Override

==================================================
