242b86a621c32e883b168889edc389121c800b48
==================================================
Improve debug logging for connection settings (include the connection ID)
==================================================
Mark Thomas
==================================================
Thu Oct 22 18:48:35 2015 +0000
==================================================
ConnectionSettingsBase.java
Improve debug logging for connection settings (include the connection ID)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1710074 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ConnectionSettingsLocal.java
index 65de6835ee..ca39f42740 100644
--- a/java/org/apache/coyote/http2/ConnectionSettingsBase.java
+++ b/java/org/apache/coyote/http2/ConnectionSettingsBase.java
@@ -28,6 +28,8 @@ public abstract class ConnectionSettingsBase<T extends Throwable> {
     private final Log log = LogFactory.getLog(ConnectionSettingsBase.class);
     private final StringManager sm = StringManager.getManager(ConnectionSettingsBase.class);
 
+    private final String connectionId;
+
     // Limits
     protected static final int MAX_WINDOW_SIZE = (1 << 31) - 1;
     protected static final int MIN_MAX_FRAME_SIZE = 1 << 14;
@@ -46,7 +48,8 @@ public abstract class ConnectionSettingsBase<T extends Throwable> {
     protected Map<Setting,Long> pending = new HashMap<>();
 
 
-    public ConnectionSettingsBase() {
+    public ConnectionSettingsBase(String connectionId) {
+        this.connectionId = connectionId;
         // Set up the defaults
         current.put(Setting.HEADER_TABLE_SIZE,      Long.valueOf(DEFAULT_HEADER_TABLE_SIZE));
         current.put(Setting.ENABLE_PUSH,            Long.valueOf(DEFAULT_ENABLE_PUSH ? 1 : 0));
@@ -59,7 +62,8 @@ public abstract class ConnectionSettingsBase<T extends Throwable> {
 
     public void set(Setting setting, long value) throws T {
         if (log.isDebugEnabled()) {
-            log.debug(sm.getString("connectionSettings.debug", setting, Long.toString(value)));
+            log.debug(sm.getString("connectionSettings.debug",
+                    connectionId, setting, Long.toString(value)));
         }
 
         switch(setting) {
@@ -83,7 +87,8 @@ public abstract class ConnectionSettingsBase<T extends Throwable> {
             break;
         case UNKNOWN:
             // Unrecognised. Ignore it.
-            log.warn(sm.getString("connectionSettings.unknown", setting, Long.toString(value)));
+            log.warn(sm.getString("connectionSettings.unknown",
+                    connectionId, setting, Long.toString(value)));
             return;
         }
 
@@ -173,7 +178,7 @@ public abstract class ConnectionSettingsBase<T extends Throwable> {
         // Need to put a sensible limit on this. Start with 16k (default is 4k)
         if (headerTableSize > (16 * 1024)) {
             String msg = sm.getString("connectionSettings.headerTableSizeLimit",
-                    Long.toString(headerTableSize));
+                    connectionId, Long.toString(headerTableSize));
             throwException(msg, Http2Error.PROTOCOL_ERROR);
         }
     }
@@ -184,7 +189,7 @@ public abstract class ConnectionSettingsBase<T extends Throwable> {
         // will never be negative
         if (enablePush > 1) {
             String msg = sm.getString("connectionSettings.enablePushInvalid",
-                    Long.toString(enablePush));
+                    connectionId, Long.toString(enablePush));
             throwException(msg, Http2Error.PROTOCOL_ERROR);
         }
     }
@@ -193,7 +198,7 @@ public abstract class ConnectionSettingsBase<T extends Throwable> {
     private void validateInitialWindowSize(long initialWindowSize) throws T {
         if (initialWindowSize > MAX_WINDOW_SIZE) {
             String msg = sm.getString("connectionSettings.windowSizeTooBig",
-                    Long.toString(initialWindowSize), Long.toString(MAX_WINDOW_SIZE));
+                    connectionId, Long.toString(initialWindowSize), Long.toString(MAX_WINDOW_SIZE));
             throwException(msg, Http2Error.FLOW_CONTROL_ERROR);
         }
     }
@@ -202,7 +207,7 @@ public abstract class ConnectionSettingsBase<T extends Throwable> {
     private void validateMaxFrameSize(long maxFrameSize) throws T {
         if (maxFrameSize < MIN_MAX_FRAME_SIZE || maxFrameSize > MAX_MAX_FRAME_SIZE) {
             String msg = sm.getString("connectionSettings.maxFrameSizeInvalid",
-                    Long.toString(maxFrameSize), Integer.toString(MIN_MAX_FRAME_SIZE),
+                    connectionId, Long.toString(maxFrameSize), Integer.toString(MIN_MAX_FRAME_SIZE),
                     Integer.toString(MAX_MAX_FRAME_SIZE));
             throwException(msg, Http2Error.PROTOCOL_ERROR);
         }

==================================================
ConnectionSettingsRemote.java
index 690a0fed77..e2b4d379e6 100644
--- a/java/org/apache/coyote/http2/ConnectionSettingsLocal.java
+++ b/java/org/apache/coyote/http2/ConnectionSettingsLocal.java
@@ -34,6 +34,12 @@ public class ConnectionSettingsLocal extends ConnectionSettingsBase<IllegalArgum
 
     private boolean sendInProgress = false;
 
+
+    public ConnectionSettingsLocal(String connectionId) {
+        super(connectionId);
+    }
+
+
     @Override
     protected synchronized void set(Setting setting, Long value) {
         checkSend();

==================================================
Http2UpgradeHandler.java
index 4879368eb2..914d7fe5b7 100644
--- a/java/org/apache/coyote/http2/ConnectionSettingsRemote.java
+++ b/java/org/apache/coyote/http2/ConnectionSettingsRemote.java
@@ -22,6 +22,11 @@ package org.apache.coyote.http2;
  */
 public class ConnectionSettingsRemote extends ConnectionSettingsBase<ConnectionException> {
 
+    public ConnectionSettingsRemote(String connectionId) {
+        super(connectionId);
+    }
+
+
     @Override
     void throwException(String msg, Http2Error error) throws ConnectionException {
         throw new ConnectionException(msg, error);

==================================================
Http2TestBase.java
index 97d1540e38..07bd840237 100644
--- a/java/org/apache/coyote/http2/LocalStrings.properties
+++ b/java/org/apache/coyote/http2/LocalStrings.properties
@@ -21,12 +21,12 @@ connectionPrefaceParser.eos=Unexpected end of stream while reading opening clien
 connectionPrefaceParser.ioError=Failed to read opening client preface byte sequence
 connectionPrefaceParser.mismatch=An unexpected byte sequence was received at the start of the client preface [{0}]
 
-connectionSettings.debug=Parameter type [{0}] set to [{1}]
-connectionSettings.enablePushInvalid=The requested value for enable push [{0}] is not one of the permitted values (zero or one)
-connectionSettings.headerTableSizeLimit=Attempted to set a header table size of [{0}] but the limit is 16k
-connectionSettings.maxFrameSizeInvalid=The requested maximum frame size of [{0}] is ouside the permitted range of [{1}] to [{2}]
-connectionSettings.unknown=An unknown setting with identifier [{0}] and value [{1}] was ignored
-connectionSettings.windowSizeTooBig=The requested window size of [{0}] is bigger than the maximum permitted value of [{1}]
+connectionSettings.debug=Connection [{0}], Parameter type [{1}] set to [{2}]
+connectionSettings.enablePushInvalid=Connection [{0}], The requested value for enable push [{1}] is not one of the permitted values (zero or one)
+connectionSettings.headerTableSizeLimit=Connection [{0}], Attempted to set a header table size of [{1}] but the limit is 16k
+connectionSettings.maxFrameSizeInvalid=Connection [{0}], The requested maximum frame size of [{1}] is outside the permitted range of [{2}] to [{3}]
+connectionSettings.unknown=Connection [{0}], An unknown setting with identifier [{1}] and value [{2}] was ignored
+connectionSettings.windowSizeTooBig=Connection [{0}], The requested window size of [{1}] is bigger than the maximum permitted value of [{2}]
 
 frameType.checkPayloadSize=Payload size of [{0}] is not valid for frame type [{1}]
 frameType.checkStream=Invalid frame type [{0}]

==================================================
