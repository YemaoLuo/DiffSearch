878387ba5c732d5c3dd924d96d0c2511e156311d
==================================================
Relax parsing of 1#token to align with RFC 7230 section 7
==================================================
Mark Thomas
==================================================
Wed Jun 16 09:45:31 2021 +0100
==================================================
TokenList.java
Relax parsing of 1#token to align with RFC 7230 section 7


==================================================
TestTokenList.java
index 01ac449644..ec69d3c4a3 100644
--- a/java/org/apache/tomcat/util/http/parser/TokenList.java
+++ b/java/org/apache/tomcat/util/http/parser/TokenList.java
@@ -35,11 +35,12 @@ public class TokenList {
      * parsed values to lower case.
      *
      * @param inputs     The headers to parse
-     * @param collection The Collection (usually a list of a set) to which the
+     * @param collection The Collection (usually a list or a set) to which the
      *                       parsed tokens should be added
      *
-     * @return {@code} true if the header values were parsed cleanly, otherwise
-     *         {@code false} (e.g. if a non-token value was encountered)
+     * @return {@code} true if the header values were parsed cleanly and at
+     *         least one token was found, otherwise {@code false} (e.g. if a
+     *         non-token value was encountered)
      *
      * @throws IOException If an I/O error occurs reading the header
      */
@@ -59,14 +60,15 @@ public class TokenList {
 
     /**
      * Parses a header of the form 1#token, forcing all parsed values to lower
-     * case. This is typically used when header values are case-insensitive.
+     * case.
      *
      * @param input      The header to parse
-     * @param collection The Collection (usually a list of a set) to which the
+     * @param collection The Collection (usually a list or a set) to which the
      *                       parsed tokens should be added
      *
-     * @return {@code} true if the header was parsed cleanly, otherwise
-     *         {@code false} (e.g. if a non-token value was encountered)
+     * @return {@code} true if the header values were parsed cleanly and at
+     *         least one token was found, otherwise {@code false} (e.g. if a
+     *         non-token value was encountered)
      *
      * @throws IOException If an I/O error occurs reading the header
      */
@@ -75,17 +77,20 @@ public class TokenList {
         boolean valid = false;
 
         do {
-            String fieldName = HttpParser.readToken(input);
-            if (fieldName == null) {
-                // Invalid field-name, skip to the next one
-                invalid = true;
-                HttpParser.skipUntil(input, 0, ',');
+            String element = HttpParser.readToken(input);
+            if (element == null) {
+                // No token found. Could be empty element (which is OK for
+                // 1#token - see RFC 7230 section 7) or a non-token.
+                if (HttpParser.skipConstant(input, ",") != SkipResult.FOUND) {
+                    // Non-token element, skip to the next one
+                    invalid = true;
+                    HttpParser.skipUntil(input, 0, ',');
+                }
                 continue;
             }
 
-            if (fieldName.length() == 0) {
-                // Unexpected EOF. Should have been a token.
-                invalid = true;
+            if (element.length() == 0) {
+                // EOF after empty element
                 break;
             }
 
@@ -93,11 +98,11 @@ public class TokenList {
             if (skipResult == SkipResult.EOF) {
                 // EOF
                 valid = true;
-                collection.add(fieldName.toLowerCase(Locale.ENGLISH));
+                collection.add(element.toLowerCase(Locale.ENGLISH));
                 break;
             } else if (skipResult == SkipResult.FOUND) {
                 valid = true;
-                collection.add(fieldName.toLowerCase(Locale.ENGLISH));
+                collection.add(element.toLowerCase(Locale.ENGLISH));
                 continue;
             } else {
                 // Not a token - ignore it
@@ -108,7 +113,7 @@ public class TokenList {
         } while (true);
 
         // Only return true if at least one valid token was read and no invalid
-        // entries were found
+        // elements were found
         return valid && !invalid;
     }
 }

==================================================
