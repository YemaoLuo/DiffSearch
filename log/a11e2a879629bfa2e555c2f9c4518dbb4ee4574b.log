a11e2a879629bfa2e555c2f9c4518dbb4ee4574b
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=56777
==================================================
Mark Thomas
==================================================
Tue Sep 29 14:04:20 2015 +0000
==================================================
MemoryRealm.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=56777
Allow trust stores, keystores, CRLs and the tomcat-users.xml file to be loaded from URLs as well as the file system.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1705866 13f79535-47bb-0310-9956-ffa450edef68



==================================================
MemoryUserDatabase.java
index dc65036343..7bf1e35900 100644
--- a/java/org/apache/catalina/realm/MemoryRealm.java
+++ b/java/org/apache/catalina/realm/MemoryRealm.java
@@ -16,7 +16,8 @@
  */
 package org.apache.catalina.realm;
 
-import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
 import java.security.Principal;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -26,6 +27,7 @@ import org.apache.catalina.LifecycleException;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.digester.Digester;
+import org.apache.tomcat.util.file.ConfigFileLoader;
 
 
 /**
@@ -241,31 +243,26 @@ public class MemoryRealm  extends RealmBase {
      */
     @Override
     protected void startInternal() throws LifecycleException {
+        String pathName = getPathname();
+        try (InputStream is = ConfigFileLoader.getInputStream(pathName)) {
+            // Load the contents of the database file
+            if (log.isDebugEnabled()) {
+                log.debug(sm.getString("memoryRealm.loadPath", pathName));
+            }
 
-        // Validate the existence of our database file
-        File file = new File(pathname);
-        if (!file.isAbsolute())
-            file = new File(getContainer().getCatalinaBase(), pathname);
-        if (!file.exists() || !file.canRead())
-            throw new LifecycleException
-                (sm.getString("memoryRealm.loadExist",
-                              file.getAbsolutePath()));
-
-        // Load the contents of the database file
-        if (log.isDebugEnabled())
-            log.debug(sm.getString("memoryRealm.loadPath",
-                             file.getAbsolutePath()));
-        Digester digester = getDigester();
-        try {
-            synchronized (digester) {
-                digester.push(this);
-                digester.parse(file);
+            Digester digester = getDigester();
+            try {
+                synchronized (digester) {
+                    digester.push(this);
+                    digester.parse(is);
+                }
+            } catch (Exception e) {
+                throw new LifecycleException(sm.getString("memoryRealm.readXml"), e);
+            } finally {
+                digester.reset();
             }
-        } catch (Exception e) {
-            throw new LifecycleException
-                (sm.getString("memoryRealm.readXml"), e);
-        } finally {
-            digester.reset();
+        } catch (IOException ioe) {
+            throw new LifecycleException(sm.getString("memoryRealm.loadExist", pathName), ioe);
         }
 
         super.startInternal();

==================================================
JSSESocketFactory.java
index 342f2354cd..e3d2c436d3 100644
--- a/java/org/apache/catalina/users/MemoryUserDatabase.java
+++ b/java/org/apache/catalina/users/MemoryUserDatabase.java
@@ -17,9 +17,9 @@
 package org.apache.catalina.users;
 
 import java.io.File;
-import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
 import java.util.HashMap;
@@ -34,6 +34,7 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.digester.AbstractObjectCreationFactory;
 import org.apache.tomcat.util.digester.Digester;
+import org.apache.tomcat.util.file.ConfigFileLoader;
 import org.apache.tomcat.util.res.StringManager;
 import org.xml.sax.Attributes;
 
@@ -394,41 +395,29 @@ public class MemoryUserDatabase implements UserDatabase {
                 groups.clear();
                 roles.clear();
 
-                // Construct a reader for the XML input file (if it exists)
-                File file = new File(pathname);
-                if (!file.isAbsolute()) {
-                    file = new File(System.getProperty(Globals.CATALINA_BASE_PROP),
-                                    pathname);
-                }
-                if (!file.exists()) {
-                    log.error(sm.getString("memoryUserDatabase.fileNotFound",
-                            file.getAbsolutePath()));
+                String pathName = getPathname();
+                try (InputStream is = ConfigFileLoader.getInputStream(getPathname())) {
+                    // Construct a digester to read the XML input file
+                    Digester digester = new Digester();
+                    try {
+                        digester.setFeature(
+                                "http://apache.org/xml/features/allow-java-encodings", true);
+                    } catch (Exception e) {
+                        log.warn(sm.getString("memoryUserDatabase.xmlFeatureEncoding"), e);
+                    }
+                    digester.addFactoryCreate("tomcat-users/group",
+                            new MemoryGroupCreationFactory(this), true);
+                    digester.addFactoryCreate("tomcat-users/role",
+                            new MemoryRoleCreationFactory(this), true);
+                    digester.addFactoryCreate("tomcat-users/user",
+                            new MemoryUserCreationFactory(this), true);
+
+                    // Parse the XML input to load this database
+                    digester.parse(is);
+                } catch (IOException ioe) {
+                    log.error(sm.getString("memoryUserDatabase.fileNotFound", pathName));
                     return;
                 }
-
-                // Construct a digester to read the XML input file
-                Digester digester = new Digester();
-                try {
-                    digester.setFeature(
-                            "http://apache.org/xml/features/allow-java-encodings",
-                            true);
-                } catch (Exception e) {
-                    log.warn(sm.getString("memoryUserDatabase.xmlFeatureEncoding"), e);
-                }
-                digester.addFactoryCreate
-                    ("tomcat-users/group",
-                     new MemoryGroupCreationFactory(this), true);
-                digester.addFactoryCreate
-                    ("tomcat-users/role",
-                     new MemoryRoleCreationFactory(this), true);
-                digester.addFactoryCreate
-                    ("tomcat-users/user",
-                     new MemoryUserCreationFactory(this), true);
-
-                // Parse the XML input file to load this database
-                try (FileInputStream fis =  new FileInputStream(file)) {
-                    digester.parse(fis);
-                }
             }
         }
     }

==================================================
