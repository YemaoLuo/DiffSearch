0827d1ce4200ad030a9c3496349b240fefeb53a7
==================================================
Check requirements of functional interface rather than annotation
==================================================
Mark Thomas
==================================================
Fri Jul 9 13:07:14 2021 +0100
==================================================
ELSupport.java
Check requirements of functional interface rather than annotation

The annotation is only a recommendation so check to see if type meets
the requirements of a functional interface rather than relying on the
annotation.


==================================================
TestELSupport.java
index 3f8fa7842a..bc1b67a648 100644
--- a/java/org/apache/el/lang/ELSupport.java
+++ b/java/org/apache/el/lang/ELSupport.java
@@ -592,7 +592,7 @@ public class ELSupport {
             return result;
         }
 
-        if (obj instanceof LambdaExpression && type.getAnnotation(FunctionalInterface.class) != null) {
+        if (obj instanceof LambdaExpression && isFunctionalInterface(type)) {
             T result = coerceToFunctionalInterface(ctx, (LambdaExpression) obj, type);
             return result;
         }
@@ -687,6 +687,61 @@ public class ELSupport {
     }
 
 
+    static boolean isFunctionalInterface(Class<?> type) {
+
+        if (!type.isInterface()) {
+            return false;
+        }
+
+        boolean foundAbstractMethod = false;
+        Method[] methods = type.getMethods();
+        for (Method method : methods) {
+            if (Modifier.isAbstract(method.getModifiers())) {
+                // Abstract methods that override one of the public methods
+                // of Object don't count
+                if (overridesObjectMethod(method)) {
+                    continue;
+                }
+                if (foundAbstractMethod) {
+                    // Found more than one
+                    return false;
+                } else {
+                    foundAbstractMethod = true;
+                }
+            }
+        }
+        return foundAbstractMethod;
+    }
+
+
+    private static boolean overridesObjectMethod(Method method) {
+        // There are three methods that can be overridden
+        if ("equals".equals(method.getName())) {
+            if (method.getReturnType().equals(boolean.class)) {
+                if (method.getParameterCount() == 1) {
+                    if (method.getParameterTypes()[0].equals(Object.class)) {
+                        return true;
+                    }
+                }
+            }
+        } else if ("hashCode".equals(method.getName())) {
+            if (method.getReturnType().equals(int.class)) {
+                if (method.getParameterCount() == 0) {
+                    return true;
+                }
+            }
+        } else if ("toString".equals(method.getName())) {
+            if (method.getReturnType().equals(String.class)) {
+                if (method.getParameterCount() == 0) {
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+
+
     private ELSupport() {
         // Uility class - hide default constructor;
     }

==================================================
