7ab97204c397402b18b59621228c114c5d6bb7f0
==================================================
Basic implementation for CSRF protection for REST.
==================================================
Violeta Georgieva
==================================================
Fri Oct 16 22:27:47 2015 +0000
==================================================
Constants.java
Basic implementation for CSRF protection for REST.
Documentation will follow.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1709120 13f79535-47bb-0310-9956-ffa450edef68



==================================================
RestCsrfPreventionFilter.java
index 5882a526b8..8a15de31b1 100644
--- a/java/org/apache/catalina/filters/LocalStrings.properties
+++ b/java/org/apache/catalina/filters/LocalStrings.properties
@@ -48,3 +48,4 @@ httpHeaderSecurityFilter.committed=Unable to add HTTP headers since response is
 httpHeaderSecurityFilter.clickjack.invalid=An invalid value [{0}] was specified for the anti click-jacking header
 
 remoteIpFilter.invalidLocation=Failed to modify the rewrite location [{0}] to use scheme [{1}] and port [{2}]
+restCsrfPreventionFilter.invalidNonce=CSRF nonce validation failed
\ No newline at end of file

==================================================
TestRestCsrfPreventionFilter.java
new file mode 100644
index 0000000000..9fb469496e
--- /dev/null
+++ b/java/org/apache/catalina/filters/RestCsrfPreventionFilter.java
@@ -0,0 +1,183 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.filters;
+
+import java.io.IOException;
+import java.util.Objects;
+import java.util.function.Predicate;
+import java.util.regex.Pattern;
+
+import javax.servlet.FilterChain;
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import javax.servlet.http.HttpSession;
+
+/**
+ * Provides basic CSRF protection for REST APIs.
+ * The filter assumes that:
+ * <ul>
+ * <li>The filter is mapped to /*</li>
+ * <li>The clients have adapted the transfer of the nonce through the 'X-CSRF-Token' header.</li>
+ * </ul>
+ *
+ * <pre>
+ * Positive scenario:
+ *           Client                            Server
+ *              |                                 |
+ *              | GET Fetch Request              \| JSESSIONID
+ *              |---------------------------------| X-CSRF-Token
+ *              |                                /| pair generation
+ *              |/Response to Fetch Request       |
+ *              |---------------------------------|
+ * JSESSIONID   |\                                |
+ * X-CSRF-Token |                                 |
+ * pair cached  | POST Request with valid nonce  \| JSESSIONID
+ *              |---------------------------------| X-CSRF-Token
+ *              |                                /| pair validation
+ *              |/ Response to POST Request       |
+ *              |---------------------------------|
+ *              |\                                |
+ *
+ * Negative scenario:
+ *           Client                            Server
+ *              |                                 |
+ *              | POST Request without nonce     \| JSESSIONID
+ *              |---------------------------------| X-CSRF-Token
+ *              |                                /| pair validation
+ *              |/Request is rejected             |
+ *              |---------------------------------|
+ *              |\                                |
+ *
+ *           Client                            Server
+ *              |                                 |
+ *              | POST Request with invalid nonce\| JSESSIONID
+ *              |---------------------------------| X-CSRF-Token
+ *              |                                /| pair validation
+ *              |/Request is rejected             |
+ *              |---------------------------------|
+ *              |\                                |
+ * </pre>
+ */
+public class RestCsrfPreventionFilter extends CsrfPreventionFilterBase {
+    private static enum MethodType {
+        NON_MODIFYING_METHOD, MODIFYING_METHOD
+    }
+
+    private static final Pattern NON_MODIFYING_METHODS_PATTERN = Pattern.compile("GET|HEAD|OPTIONS");
+    private static final Predicate<String> nonModifyingMethods = m -> m != null &&
+            NON_MODIFYING_METHODS_PATTERN.matcher(m).matches();
+
+    @Override
+    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
+            throws IOException, ServletException {
+
+        if (request instanceof HttpServletRequest &&
+                response instanceof HttpServletResponse) {
+            MethodType mType = MethodType.MODIFYING_METHOD;
+            if (nonModifyingMethods.test(((HttpServletRequest) request).getMethod())) {
+                mType = MethodType.NON_MODIFYING_METHOD;
+            }
+
+            RestCsrfPreventionStrategy strategy;
+            switch (mType) {
+            case NON_MODIFYING_METHOD:
+                strategy = new FetchRequest();
+                break;
+            default:
+                strategy = new StateChangingRequest();
+                break;
+            }
+
+            if (!strategy.apply((HttpServletRequest) request, (HttpServletResponse) response)) {
+                return;
+            }
+        }
+        chain.doFilter(request, response);
+    }
+
+    private static interface RestCsrfPreventionStrategy {
+        static final NonceSupplier<HttpServletRequest> nonceFromRequest = (r, k) -> r.getHeader(k);
+        static final NonceSupplier<HttpSession> nonceFromSession = (s, k) -> Objects.isNull(s) ? null
+                : (String) s.getAttribute(k);
+
+        static final NonceConsumer<HttpServletResponse> nonceToResponse = (r, k, v) -> r.setHeader(
+                k, v);
+        static final NonceConsumer<HttpSession> nonceToSession = (s, k, v) -> s.setAttribute(k, v);
+
+        boolean apply(HttpServletRequest request, HttpServletResponse response) throws IOException;
+    }
+
+    private class StateChangingRequest implements RestCsrfPreventionStrategy {
+
+        @Override
+        public boolean apply(HttpServletRequest request, HttpServletResponse response)
+                throws IOException {
+            if (isValidStateChangingRequest(
+                    nonceFromRequest.getNonce(request, Constants.CSRF_REST_NONCE_HEADER_NAME),
+                    nonceFromSession.getNonce(request.getSession(false), Constants.CSRF_REST_NONCE_SESSION_ATTR_NAME))) {
+                return true;
+            }
+
+            nonceToResponse.setNonce(response, Constants.CSRF_REST_NONCE_HEADER_NAME,
+                    Constants.CSRF_REST_NONCE_HEADER_REQUIRED_VALUE);
+            response.sendError(getDenyStatus(),
+                    sm.getString("restCsrfPreventionFilter.invalidNonce"));
+            return false;
+        }
+
+        private boolean isValidStateChangingRequest(String reqNonce, String sessionNonce) {
+            return Objects.nonNull(reqNonce) && Objects.nonNull(sessionNonce)
+                    && Objects.equals(reqNonce, sessionNonce);
+        }
+    }
+
+    private class FetchRequest implements RestCsrfPreventionStrategy {
+        private final Predicate<String> fetchRequest = s -> Constants.CSRF_REST_NONCE_HEADER_FETCH_VALUE
+                .equalsIgnoreCase(s);
+
+        @Override
+        public boolean apply(HttpServletRequest request, HttpServletResponse response) {
+            if (fetchRequest.test(
+                    nonceFromRequest.getNonce(request, Constants.CSRF_REST_NONCE_HEADER_NAME))) {
+                String nonceFromSessionStr = nonceFromSession.getNonce(request.getSession(false),
+                        Constants.CSRF_REST_NONCE_SESSION_ATTR_NAME);
+                if (nonceFromSessionStr == null) {
+                    nonceFromSessionStr = generateNonce();
+                    nonceToSession.setNonce(Objects.requireNonNull(request.getSession(true)),
+                            Constants.CSRF_REST_NONCE_SESSION_ATTR_NAME, nonceFromSessionStr);
+                }
+                nonceToResponse.setNonce(response, Constants.CSRF_REST_NONCE_HEADER_NAME,
+                        nonceFromSessionStr);
+            }
+            return true;
+        }
+
+    }
+
+    @FunctionalInterface
+    private static interface NonceSupplier<T> {
+        String getNonce(T supplier, String key);
+    }
+
+    @FunctionalInterface
+    private static interface NonceConsumer<T> {
+        void setNonce(T consumer, String key, String value);
+    }
+}

==================================================
