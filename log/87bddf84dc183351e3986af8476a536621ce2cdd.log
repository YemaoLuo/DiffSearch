87bddf84dc183351e3986af8476a536621ce2cdd
==================================================
Remove the oomParachute as discissed on the dev list
==================================================
Mark Thomas
==================================================
Tue May 5 15:29:49 2015 +0000
==================================================
Http11Nio2Protocol.java
Remove the oomParachute as discissed on the dev list

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1677839 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11NioProtocol.java
index 904d965547..863d399654 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Protocol.java
@@ -57,13 +57,6 @@ public class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel>
     }
 
 
-    // -------------------- Tcp setup --------------------
-
-    public void setOomParachute(int oomParachute) {
-        ((Nio2Endpoint)getEndpoint()).setOomParachute(oomParachute);
-    }
-
-
     // ----------------------------------------------------- JMX related methods
 
     @Override

==================================================
Nio2Endpoint.java
index ad3ac22434..adf1fc011e 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -88,11 +88,6 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
     }
 
 
-    // -------------------- Tcp setup --------------------
-    public void setOomParachute(int oomParachute) {
-        ((NioEndpoint)getEndpoint()).setOomParachute(oomParachute);
-    }
-
     // ----------------------------------------------------- JMX related methods
 
     @Override

==================================================
NioEndpoint.java
index b43524fe43..679b7e2c47 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -73,11 +73,6 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
      */
     private AsynchronousServerSocketChannel serverSock = null;
 
-    /**
-     * The size of the OOM parachute.
-     */
-    private int oomParachute = 1024*1024;
-
     /**
      * Allows detecting if a completion handler completes inline.
      */
@@ -90,24 +85,6 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
 
     private volatile boolean allClosed;
 
-    /**
-     * The oom parachute, when an OOM error happens,
-     * will release the data, giving the JVM instantly
-     * a chunk of data to be able to recover with.
-     */
-    private byte[] oomParachuteData = null;
-
-    /**
-     * Make sure this string has already been allocated
-     */
-    private static final String oomParachuteMsg =
-        "SEVERE:Memory usage is low, parachute is non existent, your system may start failing.";
-
-    /**
-     * Keep track of OOM warning messages.
-     */
-    private long lastParachuteCheck = System.currentTimeMillis();
-
     /**
      * Cache for SocketProcessor objects
      */
@@ -151,14 +128,6 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
         return false;
     }
 
-    public void setOomParachute(int oomParachute) {
-        this.oomParachute = oomParachute;
-    }
-
-    public void setOomParachuteData(byte[] oomParachuteData) {
-        this.oomParachuteData = oomParachuteData;
-    }
-
 
     /**
      * Port in use.
@@ -183,35 +152,12 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
     }
 
 
-    // --------------------------------------------------------- OOM Parachute Methods
-
-    protected void checkParachute() {
-        boolean para = reclaimParachute(false);
-        if (!para && (System.currentTimeMillis()-lastParachuteCheck)>10000) {
-            try {
-                log.fatal(oomParachuteMsg);
-            }catch (Throwable t) {
-                ExceptionUtils.handleThrowable(t);
-                System.err.println(oomParachuteMsg);
-            }
-            lastParachuteCheck = System.currentTimeMillis();
-        }
-    }
-
-    protected boolean reclaimParachute(boolean force) {
-        if ( oomParachuteData != null ) return true;
-        if ( oomParachute > 0 && ( force || (Runtime.getRuntime().freeMemory() > (oomParachute*2))) )
-            oomParachuteData = new byte[oomParachute];
-        return oomParachuteData != null;
-    }
-
     protected void releaseCaches() {
         if (useCaches) {
             this.nioChannels.clear();
             this.processorCache.clear();
         }
         if ( handler != null ) handler.recycle();
-
     }
 
     // --------------------------------------------------------- Public Methods
@@ -261,8 +207,6 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
 
         // Initialize SSL if needed
         initialiseSsl();
-
-        if (oomParachute>0) reclaimParachute(true);
     }
 
 
@@ -398,15 +342,6 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
         return socketProperties.getRxBufSize();
     }
 
-    public int getOomParachute() {
-        return oomParachute;
-    }
-
-    public byte[] getOomParachuteData() {
-        return oomParachuteData;
-    }
-
-
     @Override
     protected AbstractEndpoint.Acceptor createAcceptor() {
         return new Acceptor();
@@ -1742,20 +1677,6 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
                             nioChannels.push(socket.getSocket());
                         }
                     }
-                } catch (OutOfMemoryError oom) {
-                    try {
-                        oomParachuteData = null;
-                        log.error("", oom);
-                        closeSocket(socket);
-                        releaseCaches();
-                    } catch (Throwable oomt) {
-                        try {
-                            System.err.println(oomParachuteMsg);
-                            oomt.printStackTrace();
-                        } catch (Throwable letsHopeWeDontGetHere){
-                            ExceptionUtils.handleThrowable(letsHopeWeDontGetHere);
-                        }
-                    }
                 } catch (VirtualMachineError vme) {
                     ExceptionUtils.handleThrowable(vme);
                 } catch (Throwable t) {

==================================================
