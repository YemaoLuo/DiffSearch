0736a81497ed9b04c3ccc1a1aec21e036a9afcac
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=61736
==================================================
Mark Thomas
==================================================
Thu Nov 16 13:30:26 2017 +0000
==================================================
NioBlockingSelector.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=61736
Improve performance of NIO connector when clients leave large time gaps between network packets.
Patch provided by Zilong Song.
This closes #81

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1815451 13f79535-47bb-0310-9956-ffa450edef68



==================================================
NioEndpoint.java
index a89618d0e9..77030dc681 100644
--- a/java/org/apache/tomcat/util/net/NioBlockingSelector.java
+++ b/java/org/apache/tomcat/util/net/NioBlockingSelector.java
@@ -263,10 +263,25 @@ public class NioBlockingSelector {
             boolean result = false;
             Runnable r = null;
             result = (events.size() > 0);
-            while ( (r = events.poll()) != null ) {
+
+            /* We only poll and run the runnable events when we start this
+             * method. Further events added to the queue later will be delayed
+             * to the next execution of this method.
+             *
+             * We do in this way, because running event from the events queue
+             * may lead the working thread to add more events to the queue (for
+             * example, the worker thread may add another RunnableAdd event when
+             * waken up by a previous RunnableAdd event who got an invalid
+             * SelectionKey). Trying to consume all the events in an increasing
+             * queue till it's empty, will make the loop hard to be terminated,
+             * which will kill a lot of time, and greatly affect performance of
+             * the poller loop.
+             */
+            for (int i = 0, size = events.size(); i < size && (r = events.poll()) != null; i++) {
                 r.run();
                 result = true;
             }
+
             return result;
         }
 

==================================================
