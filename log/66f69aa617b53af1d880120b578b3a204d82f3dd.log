66f69aa617b53af1d880120b578b3a204d82f3dd
==================================================
Code clean-up
==================================================
Mark Thomas
==================================================
Tue Sep 29 18:53:40 2015 +0000
==================================================
ValidatorTask.java
Code clean-up
File.canRead() includes a check for File.exists()

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1705910 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JAASMemoryLoginModule.java
index 97b3fc3dd1..3fa75cc166 100644
--- a/java/org/apache/catalina/ant/ValidatorTask.java
+++ b/java/org/apache/catalina/ant/ValidatorTask.java
@@ -80,7 +80,7 @@ public class ValidatorTask extends BaseRedirectorHelperTask {
         }
 
         File file = new File(path, Constants.ApplicationWebXml);
-        if ((!file.exists()) || (!file.canRead())) {
+        if (!file.canRead()) {
             throw new BuildException("Cannot find web.xml");
         }
 

==================================================
ClassLoaderFactory.java
index 400b763078..2852dc8c55 100644
--- a/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
+++ b/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
@@ -347,7 +347,7 @@ public class JAASMemoryLoginModule extends MemoryRealm implements LoginModule {
                 file = new File(catalinaBase, pathname);
             }
         }
-        if (!file.exists() || !file.canRead()) {
+        if (!file.canRead()) {
             log.warn("Cannot load configuration file " + file.getAbsolutePath());
             return;
         }

==================================================
UserConfig.java
index dbefa5e259..f604046e05 100644
--- a/java/org/apache/catalina/startup/ClassLoaderFactory.java
+++ b/java/org/apache/catalina/startup/ClassLoaderFactory.java
@@ -85,7 +85,7 @@ public final class ClassLoaderFactory {
         if (unpacked != null) {
             for (int i = 0; i < unpacked.length; i++)  {
                 File file = unpacked[i];
-                if (!file.exists() || !file.canRead())
+                if (!file.canRead())
                     continue;
                 file = new File(file.getCanonicalPath() + File.separator);
                 URL url = file.toURI().toURL();
@@ -99,8 +99,7 @@ public final class ClassLoaderFactory {
         if (packed != null) {
             for (int i = 0; i < packed.length; i++) {
                 File directory = packed[i];
-                if (!directory.isDirectory() || !directory.exists() ||
-                    !directory.canRead())
+                if (!directory.isDirectory() || !directory.canRead())
                     continue;
                 String filenames[] = directory.list();
                 for (int j = 0; j < filenames.length; j++) {
@@ -231,7 +230,7 @@ public final class ClassLoaderFactory {
     private static boolean validateFile(File file,
             RepositoryType type) throws IOException {
         if (RepositoryType.DIR == type || RepositoryType.GLOB == type) {
-            if (!file.exists() || !file.isDirectory() || !file.canRead()) {
+            if (!file.isDirectory() || !file.canRead()) {
                 String msg = "Problem with directory [" + file +
                         "], exists: [" + file.exists() +
                         "], isDirectory: [" + file.isDirectory() +
@@ -256,7 +255,7 @@ public final class ClassLoaderFactory {
                 return false;
             }
         } else if (RepositoryType.JAR == type) {
-            if (!file.exists() || !file.canRead()) {
+            if (!file.canRead()) {
                 log.warn("Problem with JAR file [" + file +
                         "], exists: [" + file.exists() +
                         "], canRead: [" + file.canRead() + "]");

==================================================
