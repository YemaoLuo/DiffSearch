2a480b22c4bda0b38c90d1ca0d62602d6816c62c
==================================================
Expose the option to register an APR Socket for write as well as read events. This is currently unused but will be required by the Servlet 3.1 non-blocking IO code.
==================================================
Mark Emlyn
==================================================
Tue Oct 16 22:16:18 2012 +0000
==================================================
AjpAprProtocol.java
Expose the option to register an APR Socket for write as well as read events. This is currently unused but will be required by the Servlet 3.1 non-blocking IO code.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1399022 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProtocol.java
index 8dfa39c31d..cc391c7ce2 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -135,7 +135,8 @@ public class AjpAprProtocol extends AbstractAjpProtocol {
             if (addToPoller) {
                 ((AprEndpoint)proto.endpoint).getPoller().add(
                         socket.getSocket().longValue(),
-                        proto.endpoint.getKeepAliveTimeout());
+                        proto.endpoint.getKeepAliveTimeout(),
+                        AprEndpoint.Poller.FLAGS_READ);
             }
         }
 

==================================================
AprEndpoint.java
index 1df1c6d76b..03c93d9771 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -251,7 +251,8 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
             if (addToPoller && proto.endpoint.isRunning()) {
                 ((AprEndpoint)proto.endpoint).getPoller().add(
                         socket.getSocket().longValue(),
-                        proto.endpoint.getKeepAliveTimeout());
+                        proto.endpoint.getKeepAliveTimeout(),
+                        AprEndpoint.Poller.FLAGS_READ);
             }
         }
 
@@ -296,7 +297,8 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
                 if (proto.endpoint.isRunning()) {
                     ((AprEndpoint) proto.endpoint).getCometPoller().add(
                             socket.getSocket().longValue(),
-                            proto.endpoint.getSoTimeout());
+                            proto.endpoint.getSoTimeout(),
+                            AprEndpoint.Poller.FLAGS_READ);
                 } else {
                     // Process a STOP directly
                     ((AprEndpoint) proto.endpoint).processSocket(
@@ -307,7 +309,8 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
                 // Upgraded
                 ((AprEndpoint) proto.endpoint).getPoller().add(
                         socket.getSocket().longValue(),
-                        (processor.getUpgradeInbound().getReadTimeout()));
+                        processor.getUpgradeInbound().getReadTimeout(),
+                        AprEndpoint.Poller.FLAGS_READ);
             }
         }
 

==================================================
