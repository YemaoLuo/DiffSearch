4811db1d0681aa3237a11dfc1540219ad1f88916
==================================================
Fix IDE warnings after switching to Java 8
==================================================
Mark Emlyn
==================================================
Mon Nov 3 13:10:04 2014 +0000
==================================================
ExpressionFactory.java
Fix IDE warnings after switching to Java 8

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1636345 13f79535-47bb-0310-9956-ffa450edef68



==================================================
PoolingConnection.java
index db5d7a93c2..41f041d11a 100644
--- a/java/javax/el/ExpressionFactory.java
+++ b/java/javax/el/ExpressionFactory.java
@@ -336,7 +336,7 @@ public abstract class ExpressionFactory {
         }
 
         public void setFactoryClass(Class<?> clazz) {
-            ref = new WeakReference<Class<?>>(clazz);
+            ref = new WeakReference<>(clazz);
         }
     }
 

==================================================
TestAbstractAjpProcessor.java
index aaa33035da..5c9deebade 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/PoolingConnection.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/PoolingConnection.java
@@ -321,23 +321,23 @@ public class PoolingConnection extends DelegatingConnection<Connection>
                 @SuppressWarnings({"rawtypes", "unchecked"}) // Unable to find way to avoid this
                 PoolablePreparedStatement pps = new PoolablePreparedStatement(
                         getDelegate().prepareStatement(key.getSql()), key, _pstmtPool, this);
-                return new DefaultPooledObject<DelegatingPreparedStatement>(pps);
+                return new DefaultPooledObject<>(pps);
             }
-            return new DefaultPooledObject<DelegatingPreparedStatement>(
+            return new DefaultPooledObject<>(
                     new PoolableCallableStatement(getDelegate().prepareCall( key.getSql()), key, _pstmtPool, this));
         } else if (null == key.getResultSetType() && null == key.getResultSetConcurrency()){
             @SuppressWarnings({"rawtypes", "unchecked"}) // Unable to find way to avoid this
             PoolablePreparedStatement pps = new PoolablePreparedStatement(
                     getDelegate().prepareStatement(key.getSql(), key.getAutoGeneratedKeys().intValue()), key, _pstmtPool, this);
-            return new DefaultPooledObject<DelegatingPreparedStatement>(pps);
+            return new DefaultPooledObject<>(pps);
         } else { // Both _resultSetType and _resultSetConcurrency are non-null here (both or neither are set by constructors)
             if(key.getStmtType() == StatementType.PREPARED_STATEMENT) {
                 @SuppressWarnings({"rawtypes", "unchecked"}) // Unable to find way to avoid this
                 PoolablePreparedStatement pps = new PoolablePreparedStatement(getDelegate().prepareStatement(
                         key.getSql(), key.getResultSetType().intValue(),key.getResultSetConcurrency().intValue()), key, _pstmtPool, this);
-                return new DefaultPooledObject<DelegatingPreparedStatement>(pps);
+                return new DefaultPooledObject<>(pps);
             }
-            return new DefaultPooledObject<DelegatingPreparedStatement>(
+            return new DefaultPooledObject<>(
                     new PoolableCallableStatement( getDelegate().prepareCall(
                             key.getSql(),key.getResultSetType().intValue(), key.getResultSetConcurrency().intValue()), key, _pstmtPool, this));
         }

==================================================
