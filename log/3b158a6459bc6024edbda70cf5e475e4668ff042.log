3b158a6459bc6024edbda70cf5e475e4668ff042
==================================================
Changes to FastRemovalDequeue:
==================================================
Rainer Jung
==================================================
Fri Oct 29 22:44:52 2010 +0000
==================================================
JspRuntimeContext.java
Changes to FastRemovalDequeue:
- Make queue thread safe and remove external synchronisation
- Provide maximal size to queue
- Include size checking when adding entries
- Return handle to displaced entries when queue overflows
  while adding a new entry
- Explicitely invalidate queue entries on removal by using
  new field "valid"

Changes to JspRuntimeContext:
- Initialize FastRemovalDequeue with correct size
- No more external synchronisation for FastRemovalDequeue
- Private utility method to unload a wrapper
- Check for displaced wrapper when adding a new wrapper
  to the queue and unload it

Changes to JspServletWrapper:
- No more explicit overflow check for the queue. It's now
  done implicitely when adding to the queue.


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1028935 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JspServletWrapper.java
index 5185df6a0c..ef21a5ac4c 100644
--- a/java/org/apache/jasper/compiler/JspRuntimeContext.java
+++ b/java/org/apache/jasper/compiler/JspRuntimeContext.java
@@ -155,6 +155,11 @@ public final class JspRuntimeContext {
                 && options.getCheckInterval() > 0) {
             lastCheck = System.currentTimeMillis();
         }                                            
+
+        if (options.getMaxLoadedJsps() > 0) {
+            jspQueue = new FastRemovalDequeue<JspServletWrapper>(options.getMaxLoadedJsps());
+        }
+
     }
 
     // ----------------------------------------------------- Instance Variables
@@ -178,7 +183,7 @@ public final class JspRuntimeContext {
     /**
      * Keeps JSP pages ordered by last access. 
      */
-    private FastRemovalDequeue<JspServletWrapper> jspQueue = new FastRemovalDequeue<JspServletWrapper>();
+    private FastRemovalDequeue<JspServletWrapper> jspQueue = null;
 
     // ------------------------------------------------------ Public Methods
 
@@ -213,15 +218,18 @@ public final class JspRuntimeContext {
 
     /**
      * Push a newly compiled JspServletWrapper into the queue at first
-     * execution of jsp.
+     * execution of jsp. Destroy any JSP the has been replaced in the queue.
      *
      * @param jsw Servlet wrapper for jsp.
      * @return a ticket that can be pushed to front of queue at later execution times.
      * */
     public FastRemovalDequeue<JspServletWrapper>.Entry push(JspServletWrapper jsw) {
-        synchronized (jspQueue) {
-            return jspQueue.push(jsw);
+        FastRemovalDequeue<JspServletWrapper>.Entry entry = jspQueue.push(jsw);
+        JspServletWrapper replaced = entry.getReplaced();
+        if (replaced != null) {
+            unloadJspServletWrapper(replaced);
         }
+        return entry;
     }
     
     /**
@@ -230,9 +238,7 @@ public final class JspRuntimeContext {
      * @param ticket the ticket for the jsp.
      * */
     public void makeYoungest(FastRemovalDequeue<JspServletWrapper>.Entry ticket) {
-        synchronized(jspQueue) {
-            jspQueue.moveFirst(ticket);
-        }
+        jspQueue.moveFirst(ticket);
     }
     
     /**
@@ -500,6 +506,13 @@ public final class JspRuntimeContext {
         return new SecurityHolder(source, permissions);
     }
 
+    private void unloadJspServletWrapper(JspServletWrapper jsw) {
+        removeWrapper(jsw.getJspUri());
+        synchronized(jsw) {
+            jsw.destroy();
+        }
+    }
+
     /**
      * Method used by background thread to check if any JSP's should be destroyed.
      * If JSP's to be unloaded are found, they will be destroyed.
@@ -522,11 +535,8 @@ public final class JspRuntimeContext {
             }
         }
         if (jsw != null) {
-            removeWrapper(jsw.getJspUri());
-            synchronized(jsw) {
-                jsw.destroy();
-                return true;
-            }
+            unloadJspServletWrapper(jsw);
+            return true;
         }
         return false;
     }

==================================================
FastRemovalDequeue.java
index 811fe19731..a6dc6e5aed 100644
--- a/java/org/apache/jasper/servlet/JspServletWrapper.java
+++ b/java/org/apache/jasper/servlet/JspServletWrapper.java
@@ -377,7 +377,6 @@ public class JspServletWrapper {
                 synchronized(this) {
                     if (ticket == null) {
                         ticket = ctxt.getRuntimeContext().push(this);
-                        ctxt.getRuntimeContext().unloadJsp();
                     } else {
                         ctxt.getRuntimeContext().makeYoungest(ticket);
                     }

==================================================
