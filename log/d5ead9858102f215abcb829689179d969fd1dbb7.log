d5ead9858102f215abcb829689179d969fd1dbb7
==================================================
Harden FORM authentication by limiting session duration
==================================================
Mark Thomas
==================================================
Thu Mar 9 10:25:00 2023 +0000
==================================================
Session.java
Harden FORM authentication by limiting session duration

If the session is created by the FORM authentication process, limit the
duration of the session (120s by default) to limit the time the saved
request body must be retained.


==================================================
FormAuthenticator.java
index 4ec7aca0ed..da3a4f2b55 100644
--- a/java/org/apache/catalina/Session.java
+++ b/java/org/apache/catalina/Session.java
@@ -206,6 +206,15 @@ public interface Session {
     void setMaxInactiveInterval(int interval);
 
 
+    /**
+     * Returns whether the session was created during the current request.
+     *
+     * @return {@code true} if the session was created during the current
+     *         request.
+     */
+    boolean isNew();
+
+
     /**
      * Set the <code>isNew</code> flag for this session.
      *

==================================================
SavedRequest.java
index 5abdb07998..9ac928caae 100644
--- a/java/org/apache/catalina/authenticator/FormAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/FormAuthenticator.java
@@ -68,6 +68,13 @@ public class FormAuthenticator extends AuthenticatorBase {
      */
     protected String landingPage = null;
 
+    /**
+     * If the authentication process creates a session, this is the maximum session timeout (in seconds) during the
+     * authentication process. Once authentication is complete, the default session timeout will apply. Sessions that
+     * exist before the authentication process starts will retain their original session timeout throughout.
+     */
+    protected int authenticationSessionTimeout = 120;
+
 
     // ------------------------------------------------------------- Properties
 
@@ -111,9 +118,32 @@ public class FormAuthenticator extends AuthenticatorBase {
     }
 
 
-    // ------------------------------------------------------ Protected Methods
+    /**
+     * Returns the maximum session timeout to be used during authentication if the authentication process creates a
+     * session.
+     *
+     * @return the maximum session timeout to be used during authentication if the authentication process creates a
+     *             session
+     */
+    public int getAuthenticationSessionTimeout() {
+        return authenticationSessionTimeout;
+    }
 
 
+    /**
+     * Configures the maximum session timeout to be used during authentication if the authentication process creates a
+     * session.
+     *
+     * @param authenticationSessionTimeout The maximum session timeout to use duriing authentication if the
+     *                                         authentication process creates a session
+     */
+    public void setAuthenticationSessionTimeout(int authenticationSessionTimeout) {
+        this.authenticationSessionTimeout = authenticationSessionTimeout;
+    }
+
+
+    // ------------------------------------------------------ Protected Methods
+
     /**
      * Authenticate the user making this request, based on the specified login configuration. Return <code>true</code>
      * if any specified constraint has been satisfied, or <code>false</code> if we have created a response challenge
@@ -616,6 +646,10 @@ public class FormAuthenticator extends AuthenticatorBase {
         request.getQueryString();
         request.getProtocol();
 
+        if (saved.getOriginalMaxInactiveInterval() > 0) {
+            session.setMaxInactiveInterval(saved.getOriginalMaxInactiveInterval());
+        }
+
         return true;
     }
 
@@ -681,6 +715,14 @@ public class FormAuthenticator extends AuthenticatorBase {
         saved.setRequestURI(request.getRequestURI());
         saved.setDecodedRequestURI(request.getDecodedRequestURI());
 
+        if (session.isNew()) {
+            int originalMaxInactiveInterval = session.getMaxInactiveInterval();
+            if (originalMaxInactiveInterval > getAuthenticationSessionTimeout()) {
+                saved.setOriginalMaxInactiveInterval(originalMaxInactiveInterval);
+                session.setMaxInactiveInterval(getAuthenticationSessionTimeout());
+            }
+        }
+
         // Stash the SavedRequest in our session for later use
         session.setNote(Constants.FORM_REQUEST_NOTE, saved);
     }

==================================================
DummyProxySession.java
index c82a4d7a8c..8b9f08b618 100644
--- a/java/org/apache/catalina/authenticator/SavedRequest.java
+++ b/java/org/apache/catalina/authenticator/SavedRequest.java
@@ -163,6 +163,7 @@ public final class SavedRequest implements Serializable {
         this.body = body;
     }
 
+
     /**
      * The content type of the request, used if this is a POST.
      */
@@ -175,4 +176,18 @@ public final class SavedRequest implements Serializable {
     public void setContentType(String contentType) {
         this.contentType = contentType;
     }
+
+
+    /**
+     * The original maxInactiveInterval for the session.
+     */
+    private int originalMaxInactiveInterval = -1;
+
+    public int getOriginalMaxInactiveInterval() {
+        return originalMaxInactiveInterval;
+    }
+
+    public void setOriginalMaxInactiveInterval(int originalMaxInactiveInterval) {
+        this.originalMaxInactiveInterval = originalMaxInactiveInterval;
+    }
 }

==================================================
