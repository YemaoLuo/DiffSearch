869c6f41dc54c87710f1717221ebe4e66211b495
==================================================
Fix bug https://issues.apache.org/bugzilla/show_bug.cgi?id=50477
==================================================
Filip Hanik
==================================================
Thu Jan 6 23:53:11 2011 +0000
==================================================
ConnectionPool.java
index 70a0c729d5..2a0361ba04 100644
--- a/modules/jdbc-pool/.classpath
+++ b/modules/jdbc-pool/.classpath
@@ -6,5 +6,6 @@
 	<classpathentry kind="var" path="TOMCAT_LIBS_BASE/tomcat7-deps/dbcp/tomcat-dbcp.jar" sourcepath="/TOMCAT_LIBS_BASE/tomcat6-deps/dbcp/src/java"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
 	<classpathentry combineaccessrules="false" kind="src" path="/tomcat-7.0.x"/>
+	<classpathentry kind="lib" path="includes/h2/bin/h2-1.2.129.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

==================================================
Async0IdleTestBug50477.java
index db63722d45..63bf0b7257 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -140,6 +140,10 @@ public class ConnectionPool {
      * @throws SQLException
      */
     public Future<Connection> getConnectionAsync() throws SQLException {
+        PooledConnection pc = this.borrowConnection(0, null, null);
+        if (pc!=null) {
+            return new ConnectionFuture(pc);
+        } 
         //we can only retrieve a future if the underlying queue supports it.
         if (idle instanceof FairBlockingQueue<?>) {
             Future<PooledConnection> pcf = ((FairBlockingQueue<PooledConnection>)idle).pollAsync();
@@ -1040,15 +1044,21 @@ public class ConnectionPool {
         Connection result = null;
         SQLException cause = null;
         AtomicBoolean cancelled = new AtomicBoolean(false);
+        volatile PooledConnection pc = null;
         public ConnectionFuture(Future<PooledConnection> pcf) {
             this.pcFuture = pcf;
         }
         
+        public ConnectionFuture(PooledConnection pc) {
+            this.pc = pc;
+        }
         /**
          * {@inheritDoc}
          */
         public boolean cancel(boolean mayInterruptIfRunning) {
-            if ((!cancelled.get()) && cancelled.compareAndSet(false, true)) {
+            if (pc!=null) {
+                return false;
+            } else if ((!cancelled.get()) && cancelled.compareAndSet(false, true)) {
                 //cancel by retrieving the connection and returning it to the pool
                 ConnectionPool.this.cancellator.execute(this);
             }
@@ -1070,7 +1080,7 @@ public class ConnectionPool {
          * {@inheritDoc}
          */
         public Connection get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
-            PooledConnection pc = pcFuture.get(timeout,unit);
+            PooledConnection pc = this.pc!=null?this.pc:pcFuture.get(timeout,unit);
             if (pc!=null) {
                 if (result!=null) return result;
                 if (configured.compareAndSet(false, true)) {
@@ -1097,14 +1107,14 @@ public class ConnectionPool {
          * {@inheritDoc}
          */
         public boolean isCancelled() {
-            return pcFuture.isCancelled() || cancelled.get();
+            return pc==null && (pcFuture.isCancelled() || cancelled.get());
         }
 
         /**
          * {@inheritDoc}
          */
         public boolean isDone() {
-            return pcFuture.isDone();
+            return pc!=null || pcFuture.isDone();
         }
         
         /**

==================================================
