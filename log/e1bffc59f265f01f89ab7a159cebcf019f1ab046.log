e1bffc59f265f01f89ab7a159cebcf019f1ab046
==================================================
- Fix apparent issues for caches configuration (socket properties is likely not set yet, and the channel pool size was not using the right property).
==================================================
Remy Maucherat
==================================================
Wed Jun 18 09:03:37 2014 +0000
==================================================
Nio2Endpoint.java
- Fix apparent issues for caches configuration (socket properties is likely not set yet, and the channel pool size was not using the right property).
- Still not convinced about the usefulness of these caches even if raw benchmarks could show some slight improvements, so keep them disabled in NIO2.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1603376 13f79535-47bb-0310-9956-ffa450edef68



==================================================
NioEndpoint.java
index 28e3036157..49fb7d26d8 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -111,23 +111,17 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
     /**
      * Cache for SocketProcessor objects
      */
-    private final SynchronizedStack<SocketProcessor> processorCache =
-            new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,
-                    socketProperties.getProcessorCache());
+    private SynchronizedStack<SocketProcessor> processorCache;
 
     /**
-     * Cache for key attachment objects
+     * Cache for socket wrapper objects
      */
-    private final SynchronizedStack<Nio2SocketWrapper> socketWrapperCache =
-            new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,
-                    socketProperties.getSocketWrapperCache());
+    private SynchronizedStack<Nio2SocketWrapper> socketWrapperCache;
 
     /**
      * Bytebuffer cache, each channel holds a set of buffers (two, except for SSL holds four)
      */
-    private final SynchronizedStack<Nio2Channel> nioChannels =
-            new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,
-                    socketProperties.getBufferPoolSize());
+    private SynchronizedStack<Nio2Channel> nioChannels;
 
 
     // ------------------------------------------------------------- Properties
@@ -356,6 +350,15 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
                 createExecutor();
             }
 
+            if (useCaches) {
+                processorCache = new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,
+                        socketProperties.getProcessorCache());
+                socketWrapperCache = new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,
+                        socketProperties.getSocketWrapperCache());
+                nioChannels = new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,
+                        socketProperties.getBufferPool());
+            }
+
             initializeConnectionLatch();
             startAcceptorThreads();
 

==================================================
