a7b14f70ebc1a24e4c8a0a944467a8a61a9c6278
==================================================
Improve performance of unit tests and hopefully fix intermittent unit
==================================================
Mark Emlyn
==================================================
Wed Sep 11 13:44:59 2013 +0000
==================================================
TestWebSocketFrameClient.java
Improve performance of unit tests and hopefully fix intermittent unit
test failure.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1521835 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestWsPingPongMessages.java
index 622c152d77..1b41fed4b4 100644
--- a/test/org/apache/tomcat/websocket/TestWebSocketFrameClient.java
+++ b/test/org/apache/tomcat/websocket/TestWebSocketFrameClient.java
@@ -17,7 +17,7 @@
 package org.apache.tomcat.websocket;
 
 import java.net.URI;
-import java.util.List;
+import java.util.Queue;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
@@ -79,7 +79,7 @@ public class TestWebSocketFrameClient extends TomcatBaseTest {
         handler.getLatch().await(TesterFirehoseServer.WAIT_TIME_MILLIS,
                 TimeUnit.MILLISECONDS);
 
-        List<String> messages = handler.getMessages();
+        Queue<String> messages = handler.getMessages();
         Assert.assertEquals(
                 TesterFirehoseServer.MESSAGE_COUNT, messages.size());
         for (String message : messages) {

==================================================
TestWsWebSocketContainer.java
index c2d7629e05..b88ed18cb2 100644
--- a/test/org/apache/tomcat/websocket/TestWsPingPongMessages.java
+++ b/test/org/apache/tomcat/websocket/TestWsPingPongMessages.java
@@ -80,7 +80,7 @@ public class TestWsPingPongMessages extends TomcatBaseTest {
         boolean latchResult = handler.getLatch().await(10, TimeUnit.SECONDS);
         Assert.assertTrue(latchResult);
         Assert.assertArrayEquals(applicationData.array(),
-                (handler.getMessages().get(0)).getApplicationData().array());
+                (handler.getMessages().peek()).getApplicationData().array());
     }
 
     public static class PongMessageHandler extends

==================================================
TesterMessageCountClient.java
index e956fbc3c6..f972b0d7a3 100644
--- a/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
+++ b/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
@@ -19,7 +19,7 @@ package org.apache.tomcat.websocket;
 import java.net.SocketTimeoutException;
 import java.net.URI;
 import java.nio.ByteBuffer;
-import java.util.List;
+import java.util.Queue;
 import java.util.Set;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutionException;
@@ -105,9 +105,9 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
 
         Assert.assertTrue(latchResult);
 
-        List<String> messages = handler.getMessages();
+        Queue<String> messages = handler.getMessages();
         Assert.assertEquals(1, messages.size());
-        Assert.assertEquals(MESSAGE_STRING_1, messages.get(0));
+        Assert.assertEquals(MESSAGE_STRING_1, messages.peek());
     }
 
 
@@ -263,14 +263,14 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
 
         Assert.assertTrue(latchResult);
 
-        List<?> messages = handler.getMessages();
+        Queue<?> messages = handler.getMessages();
         if (pass) {
             Assert.assertEquals(1, messages.size());
             if (isTextMessage) {
-                Assert.assertEquals(MESSAGE_TEXT_4K, messages.get(0));
+                Assert.assertEquals(MESSAGE_TEXT_4K, messages.peek());
             } else {
                 Assert.assertEquals(ByteBuffer.wrap(MESSAGE_BINARY_4K),
-                        messages.get(0));
+                        messages.peek());
             }
         } else {
             // When the message exceeds the buffer size, the WebSocket is
@@ -807,9 +807,9 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
 
         Assert.assertTrue(latchResult);
 
-        List<String> messages = handler.getMessages();
+        Queue<String> messages = handler.getMessages();
         Assert.assertEquals(1, messages.size());
-        Assert.assertEquals(MESSAGE_STRING_1, messages.get(0));
+        Assert.assertEquals(MESSAGE_STRING_1, messages.peek());
     }
 
 

==================================================
