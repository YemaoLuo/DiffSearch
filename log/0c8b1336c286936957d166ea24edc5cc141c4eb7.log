0c8b1336c286936957d166ea24edc5cc141c4eb7
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63249
==================================================
Mark Thomas
==================================================
Wed Mar 13 19:05:02 2019 +0000
==================================================
ApplicationFilterConfig.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63249

Use a consistent log level (WARN) when logging the failure to register
or deregister a JMX Bean.


==================================================
StandardWrapper.java
index cb3186c0bf..7c2ea61a56 100644
--- a/java/org/apache/catalina/core/ApplicationFilterConfig.java
+++ b/java/org/apache/catalina/core/ApplicationFilterConfig.java
@@ -357,30 +357,27 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
         }
         try {
             oname = new ObjectName(onameStr);
-            Registry.getRegistry(null, null).registerComponent(this, oname,
-                    null);
+            Registry.getRegistry(null, null).registerComponent(this, oname, null);
         } catch (Exception ex) {
-            log.info(sm.getString("applicationFilterConfig.jmxRegisterFail",
+            log.warn(sm.getString("applicationFilterConfig.jmxRegisterFail",
                     getFilterClass(), getFilterName()), ex);
         }
     }
 
+
     private void unregisterJMX() {
         // unregister this component
         if (oname != null) {
             try {
                 Registry.getRegistry(null, null).unregisterComponent(oname);
                 if (log.isDebugEnabled())
-                    log.debug(sm.getString(
-                            "applicationFilterConfig.jmxUnregister",
+                    log.debug(sm.getString("applicationFilterConfig.jmxUnregister",
                             getFilterClass(), getFilterName()));
             } catch(Exception ex) {
-                log.error(sm.getString(
-                        "applicationFilterConfig.jmxUnregisterFail",
+                log.warn(sm.getString("applicationFilterConfig.jmxUnregisterFail",
                         getFilterClass(), getFilterName()), ex);
             }
         }
-
     }
 
 

==================================================
WebappLoader.java
index c20d0767f0..a28dd73411 100644
--- a/java/org/apache/catalina/core/StandardWrapper.java
+++ b/java/org/apache/catalina/core/StandardWrapper.java
@@ -988,10 +988,9 @@ public class StandardWrapper extends ContainerBase
 
             try {
                 jspMonitorON = new ObjectName(oname.toString());
-                Registry.getRegistry(null, null)
-                    .registerComponent(instance, jspMonitorON, null);
+                Registry.getRegistry(null, null).registerComponent(instance, jspMonitorON, null);
             } catch (Exception ex) {
-                log.info(sm.getString("standardWrapper.jspMonitorError", instance));
+                log.warn(sm.getString("standardWrapper.jspMonitorError", instance));
             }
         }
     }

==================================================
HostConfig.java
index a035e77c5f..0080778752 100644
--- a/java/org/apache/catalina/loader/WebappLoader.java
+++ b/java/org/apache/catalina/loader/WebappLoader.java
@@ -455,7 +455,7 @@ public class WebappLoader extends LifecycleMBeanBase
                         context.getParent().getName() + ",context=" + contextName);
                 Registry.getRegistry(null, null).unregisterComponent(cloname);
             } catch (Exception e) {
-                log.error(sm.getString("webappLoader.stopError"), e);
+                log.warn(sm.getString("webappLoader.stopError"), e);
             }
         }
 

==================================================
