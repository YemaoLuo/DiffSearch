bfa7f4cf2eceb4df6b588f939e44b3edd842d8e7
==================================================
Refactoring: HTTP/1.1 - HTTP/2 alignment
==================================================
Mark Thomas
==================================================
Thu Nov 30 10:20:02 2017 +0000
==================================================
Http11OutputBuffer.java
Refactoring: HTTP/1.1 - HTTP/2 alignment

Pull up end() method from OutputFilter to OutputBuffer

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1816696 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11Processor.java
index f4a3bfd93b..3ef1d117d2 100644
--- a/java/org/apache/coyote/http11/Http11OutputBuffer.java
+++ b/java/org/apache/coyote/http11/Http11OutputBuffer.java
@@ -276,12 +276,8 @@ public class Http11OutputBuffer implements HttpOutputBuffer {
     }
 
 
-    /**
-     * Finish writing the response.
-     *
-     * @throws IOException an underlying I/O error occurred
-     */
-    public void finishResponse() throws IOException {
+    @Override
+    public void end() throws IOException {
         if (responseFinished) {
             return;
         }
@@ -290,7 +286,7 @@ public class Http11OutputBuffer implements HttpOutputBuffer {
             activeFilters[lastActiveFilter].end();
         }
 
-        flushBuffer(true);
+        outputStreamOutputBuffer.end();
 
         responseFinished = true;
     }
@@ -562,5 +558,10 @@ public class Http11OutputBuffer implements HttpOutputBuffer {
         public long getBytesWritten() {
             return byteCount;
         }
+
+        @Override
+        public void end() throws IOException {
+            socketWrapper.flush(true);
+        }
     }
 }

==================================================
HttpOutputBuffer.java
index 5885ecdb8a..bec4dc9ff3 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -1141,7 +1141,7 @@ public class Http11Processor extends AbstractProcessor {
         if (getErrorState().isIoAllowed()) {
             try {
                 action(ActionCode.COMMIT, null);
-                outputBuffer.finishResponse();
+                outputBuffer.end();
             } catch (IOException e) {
                 setErrorState(ErrorState.CLOSE_CONNECTION_NOW, e);
             } catch (Throwable t) {
@@ -1155,7 +1155,7 @@ public class Http11Processor extends AbstractProcessor {
 
     @Override
     protected final void finishResponse() throws IOException {
-        outputBuffer.finishResponse();
+        outputBuffer.end();
     }
 
 

==================================================
OutputFilter.java
index fd95eb6ffc..1c206b55b7 100644
--- a/java/org/apache/coyote/http11/HttpOutputBuffer.java
+++ b/java/org/apache/coyote/http11/HttpOutputBuffer.java
@@ -16,8 +16,18 @@
  */
 package org.apache.coyote.http11;
 
+import java.io.IOException;
+
 import org.apache.coyote.OutputBuffer;
 
 public interface HttpOutputBuffer extends OutputBuffer {
 
+    /**
+     * Finish writing the current response. It is acceptable to write extra
+     * bytes using {@link #doWrite(java.nio.ByteBuffer)} during the execution of
+     * this method.
+     *
+     * @throws IOException If an I/O error occurs while writing to the client
+     */
+    public void end() throws IOException;
 }

==================================================
TesterOutputBuffer.java
index 7b5411a810..97cdc0ac30 100644
--- a/java/org/apache/coyote/http11/OutputFilter.java
+++ b/java/org/apache/coyote/http11/OutputFilter.java
@@ -16,8 +16,6 @@
  */
 package org.apache.coyote.http11;
 
-import java.io.IOException;
-
 import org.apache.coyote.Response;
 
 /**
@@ -49,13 +47,4 @@ public interface OutputFilter extends HttpOutputBuffer {
      * @param buffer The next buffer instance
      */
     public void setBuffer(HttpOutputBuffer buffer);
-
-
-    /**
-     * End the current request. It is acceptable to write extra bytes using
-     * buffer.doWrite during the execution of this method.
-     *
-     * @throws IOException If an I/O error occurs while writing to the client
-     */
-    public void end() throws IOException;
 }

==================================================
