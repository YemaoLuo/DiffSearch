4cfe66798144b4dd3cac5b13d9059857a91c3443
==================================================
Additional fix required for async I/O and HTTP/2 'swallow output'
==================================================
Mark Thomas
==================================================
Mon Apr 8 23:00:13 2019 +0100
==================================================
Stream.java
Additional fix required for async I/O and HTTP/2 'swallow output'


==================================================
StreamProcessor.java
index 7337eb900e..0bb12a0eb5 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -607,10 +607,10 @@ class Stream extends AbstractStream implements HeaderEmitter {
 
 
     final void receivedEndOfStream() throws ConnectionException {
-        long contentLengthHeader = coyoteRequest.getContentLengthLong();
-        if (contentLengthHeader > -1 && contentLengthReceived != contentLengthHeader) {
+        if (isContentLengthInconsistent()) {
             throw new ConnectionException(sm.getString("stream.header.contentLength",
-                    getConnectionId(), getIdentifier(), Long.valueOf(contentLengthHeader),
+                    getConnectionId(), getIdentifier(),
+                    Long.valueOf(coyoteRequest.getContentLengthLong()),
                     Long.valueOf(contentLengthReceived)), Http2Error.PROTOCOL_ERROR);
         }
         state.receivedEndOfStream();
@@ -620,6 +620,15 @@ class Stream extends AbstractStream implements HeaderEmitter {
     }
 
 
+    final boolean isContentLengthInconsistent() {
+        long contentLengthHeader = coyoteRequest.getContentLengthLong();
+        if (contentLengthHeader > -1 && contentLengthReceived != contentLengthHeader) {
+            return true;
+        }
+        return false;
+    }
+
+
     final void sentHeaders() {
         state.sentHeaders();
     }

==================================================
