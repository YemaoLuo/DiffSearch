09750d22c9b071a66f08f75c5903a542abb1227a
==================================================
Implement the assign syntax.
==================================================
Mark Emlyn
==================================================
Sun Jul 14 19:17:07 2013 +0000
==================================================
AstAssign.java
Implement the assign syntax.
Includes the initial unit tests for this syntax.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1503034 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestAstAssign.java
index 6a2fd5da7f..f6cb7850cf 100644
--- a/java/org/apache/el/parser/AstAssign.java
+++ b/java/org/apache/el/parser/AstAssign.java
@@ -17,10 +17,34 @@
 /* Generated By:JJTree: Do not edit this line. AstAssign.java Version 4.3 */
 package org.apache.el.parser;
 
-public
-class AstAssign extends SimpleNode {
-  public AstAssign(int id) {
-    super(id);
-  }
+import javax.el.ELException;
+
+import org.apache.el.lang.EvaluationContext;
+
+public class AstAssign extends SimpleNode {
+
+    public AstAssign(int id) {
+        super(id);
+    }
+
+
+    @Override
+    public Object getValue(EvaluationContext ctx) throws ELException {
+        Object value = children[1].getValue(ctx);
+
+        children[0].setValue(ctx, value);
+
+        return value;
+    }
+
+
+    @Override
+    public Class<?> getType(EvaluationContext ctx) throws ELException {
+        Object value = children[1].getValue(ctx);
+
+        children[0].setValue(ctx, value);
+
+        return children[1].getType(ctx);
+    }
 }
 /* JavaCC - OriginalChecksum=151e58546054b618e758d7dc172cc7b5 (do not edit this line) */

==================================================
TesterBeanB.java
new file mode 100644
index 0000000000..88a61ec5b4
--- /dev/null
+++ b/test/org/apache/el/parser/TestAstAssign.java
@@ -0,0 +1,83 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.el.parser;
+
+import javax.el.ELContext;
+import javax.el.ELManager;
+import javax.el.ELProcessor;
+import javax.el.ExpressionFactory;
+import javax.el.ValueExpression;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class TestAstAssign {
+
+    @Test
+    public void testGetValue01() {
+        ELProcessor processor = new ELProcessor();
+        processor.defineBean("bean01", new TesterBeanB());
+
+        Object result = processor.getValue(
+                "bean01.text = 'hello'", String.class);
+
+        Assert.assertEquals("hello", result);
+    }
+
+
+    @Test
+    public void testGetValue02() {
+        ELProcessor processor = new ELProcessor();
+        processor.defineBean("bean01", new TesterBeanB());
+
+        Object result = processor.getValue(
+                "bean01.text = 'hello'; bean01.text", String.class);
+
+        Assert.assertEquals("hello", result);
+    }
+
+
+
+    @Test
+    public void testGetType01() {
+        ELProcessor processor = new ELProcessor();
+        ELContext context = processor.getELManager().getELContext();
+        ExpressionFactory factory = ELManager.getExpressionFactory();
+
+        processor.defineBean("bean01", new TesterBeanB());
+        ValueExpression ve = factory.createValueExpression(
+                context, "${bean01.text = 'hello'}", String.class);
+
+        Assert.assertEquals(String.class, ve.getType(context));
+        Assert.assertEquals("hello", ve.getValue(context));
+    }
+
+
+    @Test
+    public void testGetType02() {
+        ELProcessor processor = new ELProcessor();
+        ELContext context = processor.getELManager().getELContext();
+        ExpressionFactory factory = ELManager.getExpressionFactory();
+
+        processor.defineBean("bean01", new TesterBeanB());
+        ValueExpression ve = factory.createValueExpression(
+                context, "${bean01.text = 'hello'; bean01.text}", String.class);
+
+        Assert.assertEquals(String.class, ve.getType(context));
+        Assert.assertEquals("hello", ve.getValue(context));
+    }
+}

==================================================
