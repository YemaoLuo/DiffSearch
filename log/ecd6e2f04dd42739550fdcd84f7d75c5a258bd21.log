ecd6e2f04dd42739550fdcd84f7d75c5a258bd21
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50360
==================================================
Mark Emlyn
==================================================
Thu Dec 9 19:49:24 2010 +0000
==================================================
AbstractEndpoint.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50360
Add an option to control when the socket is bound

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1044110 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AprEndpoint.java
index 0744891333..e1c48b3e69 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -97,6 +97,10 @@ public abstract class AbstractEndpoint {
         public void recycle();
     }
 
+    protected enum BindState {
+        UNBOUND, BOUND_ON_INIT, BOUND_ON_START
+    }
+
     // Standard SSL Configuration attributes
     // JSSE
     // Standard configuration attribute names
@@ -142,11 +146,6 @@ public abstract class AbstractEndpoint {
      */
     protected volatile boolean paused = false;
 
-    /**
-     * Track the initialization state of the endpoint.
-     */
-    protected boolean initialized = false;
-
     /**
      * Are we using an internal executor
      */
@@ -201,6 +200,17 @@ public abstract class AbstractEndpoint {
     public void setBacklog(int backlog) { if (backlog > 0) this.backlog = backlog; }
     public int getBacklog() { return backlog; }
 
+    /**
+     * Controls when the Endpoint binds the port. <code>true</code>, the default
+     * binds the port on {@link #init()} and unbinds it on {@link #destroy()}.
+     * If set to <code>false</code> the port is bound on {@link #start()} and
+     * unbound on {@link #stop()}.  
+     */
+    private boolean bindOnInit = true;
+    public boolean getBindOnInit() { return bindOnInit; }
+    public void setBindOnInit(boolean b) { this.bindOnInit = b; }
+    private BindState bindState = BindState.UNBOUND;
+
     /**
      * Keepalive timeout, if lesser or equal to 0 then soTimeout will be used.
      */
@@ -503,8 +513,34 @@ public abstract class AbstractEndpoint {
     }
 
 
-    public abstract void init() throws Exception;
-    public abstract void start() throws Exception;
+    // ------------------------------------------------------- Lifecycle methods
+
+    /*
+     * NOTE: There is no maintenance of state or checking for valid transitions
+     * within this class other than ensuring that bind/unbind are called in the
+     * right place. It is expected that the calling code will maintain state and
+     * prevent invalid state transitions.
+     */
+
+    public abstract void bind() throws Exception;
+    public abstract void unbind() throws Exception;
+    public abstract void startInternal() throws Exception;
+    public abstract void stopInternal() throws Exception;
+
+    public final void init() throws Exception {
+        if (bindOnInit) {
+            bind();
+            bindState = BindState.BOUND_ON_INIT;
+        }
+    }
+    
+    public final void start() throws Exception {
+        if (bindState == BindState.UNBOUND) {
+            bind();
+            bindState = BindState.BOUND_ON_START;
+        }
+        startInternal();
+    }
 
     /**
      * Pause the endpoint, which will stop it accepting new connections.
@@ -532,8 +568,21 @@ public abstract class AbstractEndpoint {
         }
     }
 
-    public abstract void stop() throws Exception;
-    public abstract void destroy() throws Exception;
+    public final void stop() throws Exception {
+        stopInternal();
+        if (bindState == BindState.BOUND_ON_START) {
+            unbind();
+            bindState = BindState.UNBOUND;
+        }
+    }
+
+    public final void destroy() throws Exception {
+        if (bindState == BindState.BOUND_ON_INIT) {
+            unbind();
+            bindState = BindState.UNBOUND;
+        }
+    }
+
 
     public String adjustRelativePath(String path, String relativeTo) {
         String newPath = path;

==================================================
JIoEndpoint.java
index 994cc886b8..393b44eb2c 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -365,11 +365,7 @@ public class AprEndpoint extends AbstractEndpoint {
      * Initialize the endpoint.
      */
     @Override
-    public void init()
-        throws Exception {
-
-        if (initialized)
-            return;
+    public void bind() throws Exception {
 
         // Create the root APR memory pool
         try {
@@ -518,9 +514,6 @@ public class AprEndpoint extends AbstractEndpoint {
             // For now, sendfile is not supported with SSL
             useSendfile = false;
         }
-
-        initialized = true;
-
     }
 
 
@@ -528,12 +521,8 @@ public class AprEndpoint extends AbstractEndpoint {
      * Start the APR endpoint, creating acceptor, poller and sendfile threads.
      */
     @Override
-    public void start()
-        throws Exception {
-        // Initialize socket if not done before
-        if (!initialized) {
-            init();
-        }
+    public void startInternal() throws Exception {
+
         if (!running) {
             running = true;
             paused = false;
@@ -602,7 +591,7 @@ public class AprEndpoint extends AbstractEndpoint {
      * Stop the endpoint. This will cause all processing threads to stop.
      */
     @Override
-    public void stop() {
+    public void stopInternal() {
         if (!paused) {
             pause();
         }
@@ -665,7 +654,7 @@ public class AprEndpoint extends AbstractEndpoint {
      * Deallocate APR memory pools, and close server socket.
      */
     @Override
-    public void destroy() throws Exception {
+    public void unbind() throws Exception {
         if (running) {
             stop();
         }
@@ -691,8 +680,6 @@ public class AprEndpoint extends AbstractEndpoint {
         }
 
         handler.recycle();
-
-        initialized = false;
     }
 
 

==================================================
NioEndpoint.java
index 1ca3c923b0..38893e6131 100644
--- a/java/org/apache/tomcat/util/net/JIoEndpoint.java
+++ b/java/org/apache/tomcat/util/net/JIoEndpoint.java
@@ -324,12 +324,8 @@ public class JIoEndpoint extends AbstractEndpoint {
     // -------------------- Public methods --------------------
 
     @Override
-    public void init()
-        throws Exception {
+    public void bind() throws Exception {
 
-        if (initialized)
-            return;
-        
         // Initialize thread count defaults for acceptor
         if (acceptorThreadCount == 0) {
             acceptorThreadCount = 1;
@@ -365,15 +361,11 @@ public class JIoEndpoint extends AbstractEndpoint {
             }
         }
         
-        initialized = true;
     }
     
     @Override
-    public void start() throws Exception {
-        // Initialize socket if not done before
-        if (!initialized) {
-            init();
-        }
+    public void startInternal() throws Exception {
+
         if (!running) {
             running = true;
             paused = false;
@@ -402,7 +394,7 @@ public class JIoEndpoint extends AbstractEndpoint {
     }
 
     @Override
-    public void stop() {
+    public void stopInternal() {
         if (!paused) {
             pause();
         }
@@ -417,7 +409,7 @@ public class JIoEndpoint extends AbstractEndpoint {
      * Deallocate APR memory pools, and close server socket.
      */
     @Override
-    public void destroy() throws Exception {
+    public void unbind() throws Exception {
         if (running) {
             stop();
         }
@@ -431,7 +423,6 @@ public class JIoEndpoint extends AbstractEndpoint {
             serverSocket = null;
         }
         handler.recycle();
-        initialized = false ;
     }
 
 

==================================================
TestXxxEndpoint.java
index 11d557ae87..c48101ec7a 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -455,11 +455,7 @@ public class NioEndpoint extends AbstractEndpoint {
      * Initialize the endpoint.
      */
     @Override
-    public void init()
-        throws Exception {
-
-        if (initialized)
-            return;
+    public void bind() throws Exception {
 
         serverSock = ServerSocketChannel.open();
         socketProperties.setProperties(serverSock.socket());
@@ -545,8 +541,6 @@ public class NioEndpoint extends AbstractEndpoint {
         
         if (oomParachute>0) reclaimParachute(true);
         selectorPool.open();
-        initialized = true;
-
     }
     
     public KeyManager[] wrap(KeyManager[] managers) {
@@ -567,12 +561,8 @@ public class NioEndpoint extends AbstractEndpoint {
      * Start the NIO endpoint, creating acceptor, poller threads.
      */
     @Override
-    public void start()
-        throws Exception {
-        // Initialize socket if not done before
-        if (!initialized) {
-            init();
-        }
+    public void startInternal() throws Exception {
+
         if (!running) {
             running = true;
             paused = false;
@@ -607,7 +597,7 @@ public class NioEndpoint extends AbstractEndpoint {
      * Stop the endpoint. This will cause all processing threads to stop.
      */
     @Override
-    public void stop() {
+    public void stopInternal() {
         if (!paused) {
             pause();
         }
@@ -634,7 +624,7 @@ public class NioEndpoint extends AbstractEndpoint {
      * Deallocate NIO memory pools, and close server socket.
      */
     @Override
-    public void destroy() throws Exception {
+    public void unbind() throws Exception {
         if (log.isDebugEnabled()) {
             log.debug("Destroy initiated for "+new InetSocketAddress(getAddress(),getPort()));
         }
@@ -646,7 +636,6 @@ public class NioEndpoint extends AbstractEndpoint {
         serverSock.close();
         serverSock = null;
         sslContext = null;
-        initialized = false;
         releaseCaches();
         selectorPool.close();
         if (log.isDebugEnabled()) {

==================================================
