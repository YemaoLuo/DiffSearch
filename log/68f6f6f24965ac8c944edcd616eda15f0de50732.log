68f6f6f24965ac8c944edcd616eda15f0de50732
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55240
==================================================
Mark Emlyn
==================================================
Thu Jul 11 18:08:17 2013 +0000
==================================================
AbstractProcessor.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55240
Prevent looping after Poller stop and ensure that streams for upgraded connections are closed if possible.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1502304 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AprProcessor.java
index 0c72da55e1..60b8723fde 100644
--- a/java/org/apache/coyote/http11/upgrade/AbstractProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/AbstractProcessor.java
@@ -26,6 +26,7 @@ import javax.servlet.http.WebConnection;
 
 import org.apache.coyote.Processor;
 import org.apache.coyote.Request;
+import org.apache.juli.logging.Log;
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.net.SSLSupport;
 import org.apache.tomcat.util.net.SocketStatus;
@@ -37,6 +38,7 @@ public abstract class AbstractProcessor<S>
 
     protected static final StringManager sm =
             StringManager.getManager(Constants.Package);
+    protected abstract Log getLog();
 
     private final HttpUpgradeHandler httpUpgradeHandler;
     private final AbstractServletInputStream upgradeServletInputStream;
@@ -93,6 +95,20 @@ public abstract class AbstractProcessor<S>
             upgradeServletInputStream.onDataAvailable();
         } else if (status == SocketStatus.OPEN_WRITE) {
             upgradeServletOutputStream.onWritePossible();
+        } else if (status == SocketStatus.STOP) {
+            try {
+                upgradeServletInputStream.close();
+            } catch (IOException ioe) {
+                getLog().debug(sm.getString(
+                        "abstractProcessor.isCloseFail", ioe));
+            }
+            try {
+                upgradeServletOutputStream.close();
+            } catch (IOException ioe) {
+                getLog().debug(sm.getString(
+                        "abstractProcessor.osCloseFail", ioe));
+            }
+            return SocketState.CLOSED;
         } else {
             // Unexpected state
             return SocketState.CLOSED;

==================================================
BioProcessor.java
index fd510b804b..41f51301d4 100644
--- a/java/org/apache/coyote/http11/upgrade/AprProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/AprProcessor.java
@@ -18,12 +18,18 @@ package org.apache.coyote.http11.upgrade;
 
 import javax.servlet.http.HttpUpgradeHandler;
 
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.jni.Socket;
 import org.apache.tomcat.util.net.AprEndpoint;
 import org.apache.tomcat.util.net.SocketWrapper;
 
 public class AprProcessor extends AbstractProcessor<Long> {
 
+    private static final Log log = LogFactory.getLog(AprProcessor.class);
+    @Override
+    protected Log getLog() {return log;}
+
     private static final int INFINITE_TIMEOUT = -1;
 
     public AprProcessor(SocketWrapper<Long> wrapper,

==================================================
NioProcessor.java
index 3e5b8f2523..340ecbcb08 100644
--- a/java/org/apache/coyote/http11/upgrade/LocalStrings.properties
+++ b/java/org/apache/coyote/http11/upgrade/LocalStrings.properties
@@ -13,6 +13,9 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
+abstractProcessor.isCloseFail=Failed to close input stream associated with upgraded connection
+abstractProcessor.osCloseFail=Failed to close output stream associated with upgraded connection
+
 upgrade.sis.isFinished.ise=It is illegal to call isFinished() when the ServletInputStream is not in non-blocking mode (i.e. setReadListener() must be called first)
 upgrade.sis.isReady.ise=It is illegal to call isReady() when the ServletInputStream is not in non-blocking mode (i.e. setReadListener() must be called first)
 upgrade.sis.readListener.null=It is illegal to pass null to setReadListener()

==================================================
NioEndpoint.java
index 51a79dc29d..948a240ecb 100644
--- a/java/org/apache/coyote/http11/upgrade/NioProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/NioProcessor.java
@@ -18,12 +18,18 @@ package org.apache.coyote.http11.upgrade;
 
 import javax.servlet.http.HttpUpgradeHandler;
 
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.NioChannel;
 import org.apache.tomcat.util.net.NioSelectorPool;
 import org.apache.tomcat.util.net.SocketWrapper;
 
 public class NioProcessor extends AbstractProcessor<NioChannel> {
 
+    private static final Log log = LogFactory.getLog(NioProcessor.class);
+    @Override
+    protected Log getLog() {return log;}
+
     private static final int INFINITE_TIMEOUT = -1;
 
     public NioProcessor(SocketWrapper<NioChannel> wrapper,

==================================================
