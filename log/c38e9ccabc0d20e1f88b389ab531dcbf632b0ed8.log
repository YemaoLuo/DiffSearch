c38e9ccabc0d20e1f88b389ab531dcbf632b0ed8
==================================================
Remove dependency on StandardContext from WebappLoader
==================================================
Mark Emlyn
==================================================
Wed Feb 1 11:32:56 2012 +0000
==================================================
StandardContext.java
index 85107bf6c1..df8f0befc5 100644
--- a/java/org/apache/catalina/core/LocalStrings.properties
+++ b/java/org/apache/catalina/core/LocalStrings.properties
@@ -123,6 +123,7 @@ standardContext.startFailed=Context [{0}] startup failed due to previous errors
 standardContext.startingContext=Exception starting Context with name [{0}]
 standardContext.stoppingContext=Exception stopping Context with name [{0}]
 standardContext.urlPattern.patternWarning=WARNING: URL pattern {0} must start with a ''/'' in Servlet 2.4
+standardContext.webappClassLoader.missingProperty=Unable to set the web application class loader property [{0}] to [{1}] as the property does not exist.
 standardContext.workPath=Exception obtaining work path for context [{0}]
 standardContext.workCreateException=Failed to determine absolute work directory from directory [{0}] and CATALINA_HOME [{1}] for context [{2}]
 standardContext.workCreateFail=Failed to create work directory [{0}] for context [{1}]

==================================================
WebappLoader.java
index e71ae9a125..65f0efd203 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -116,6 +116,7 @@ import org.apache.naming.resources.WARDirContext;
 import org.apache.tomcat.InstanceManager;
 import org.apache.tomcat.JarScanner;
 import org.apache.tomcat.util.ExceptionUtils;
+import org.apache.tomcat.util.IntrospectionUtils;
 import org.apache.tomcat.util.modeler.Registry;
 import org.apache.tomcat.util.scan.StandardJarScanner;
 
@@ -5032,6 +5033,16 @@ public class StandardContext extends ContainerBase
 
                 // since the loader just started, the webapp classloader is now
                 // created.
+                setClassLoaderProperty("antiJARLocking", getAntiJARLocking());
+                setClassLoaderProperty("clearReferencesStatic",
+                        getClearReferencesStatic());
+                setClassLoaderProperty("clearReferencesStopThreads",
+                        getClearReferencesStopThreads());
+                setClassLoaderProperty("clearReferencesStopTimerThreads",
+                        getClearReferencesStopTimerThreads());
+                setClassLoaderProperty("clearReferencesHttpClientKeepAliveThread",
+                        getClearReferencesHttpClientKeepAliveThread());
+
                 // By calling unbindThread and bindThread in a row, we setup the
                 // current Thread CCL to be the webapp classloader
                 unbindThread(oldCCL);
@@ -5232,6 +5243,16 @@ public class StandardContext extends ContainerBase
         }
     }
 
+    private void setClassLoaderProperty(String name, boolean value) {
+        ClassLoader cl = getLoader().getClassLoader();
+        if (IntrospectionUtils.setProperty(cl, name, Boolean.toString(value))) {
+            // Failed to set
+            log.info(sm.getString(
+                    "standardContext.webappClassLoader.missingProperty",
+                    name, Boolean.toString(value)));
+        }
+    }
+
     private Map<String, Map<String, String>> buildInjectionMap(NamingResources namingResources) {
         Map<String, Map<String, String>> injectionMap = new HashMap<String, Map<String, String>>();
         for (Injectable resource: namingResources.findLocalEjbs()) {

==================================================
