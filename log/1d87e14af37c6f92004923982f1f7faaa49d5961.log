1d87e14af37c6f92004923982f1f7faaa49d5961
==================================================
Update to draft v12 of WebSocket API
==================================================
Mark Emlyn
==================================================
Mon Feb 11 14:57:27 2013 +0000
==================================================
CloseReason.java
Update to draft v12 of WebSocket API
Align current implementation with draft

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1444808 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ContainerProvider.java
index f1f1512dc6..ef88d135d8 100644
--- a/java/javax/websocket/CloseReason.java
+++ b/java/javax/websocket/CloseReason.java
@@ -34,6 +34,12 @@ public class CloseReason {
         return reasonPhrase;
     }
 
+    @Override
+    public String toString() {
+        return "CloseReason: code [" + closeCode.getCode() +
+                "], reason [" + reasonPhrase + "]";
+    }
+
     public interface CloseCode {
         int getCode();
     }
@@ -62,6 +68,52 @@ public class CloseReason {
             this.code = code;
         }
 
+        public static CloseCode getCloseCode(final int code) {
+            if (code > 2999 && code < 5000) {
+                return new CloseCode() {
+                    @Override
+                    public int getCode() {
+                        return code;
+                    }
+                };
+            }
+            switch (code) {
+                case 1000:
+                    return CloseCodes.NORMAL_CLOSURE;
+                case 1001:
+                    return CloseCodes.GOING_AWAY;
+                case 1002:
+                    return CloseCodes.PROTOCOL_ERROR;
+                case 1003:
+                    return CloseCodes.CANNOT_ACCEPT;
+                case 1004:
+                    return CloseCodes.RESERVED;
+                case 1005:
+                    return CloseCodes.NO_STATUS_CODE;
+                case 1006:
+                    return CloseCodes.CLOSED_ABNORMALLY;
+                case 1007:
+                    return CloseCodes.NOT_CONSISTENT;
+                case 1008:
+                    return CloseCodes.VIOLATED_POLICY;
+                case 1009:
+                    return CloseCodes.TOO_BIG;
+                case 1010:
+                    return CloseCodes.NO_EXTENSION;
+                case 1011:
+                    return CloseCodes.UNEXPECTED_CONDITION;
+                case 1012:
+                    return CloseCodes.SERVICE_RESTART;
+                case 1013:
+                    return CloseCodes.TRY_AGAIN_LATER;
+                case 1015:
+                    return CloseCodes.TLS_HANDSHAKE_FAILURE;
+                default:
+                    throw new IllegalArgumentException(
+                            "Invalid close code: [" + code + "]");
+            }
+        }
+
         @Override
         public int getCode() {
             return code;

==================================================
DefaultClientConfiguration.java
index 9210ea7995..fc4df3e549 100644
--- a/java/javax/websocket/ContainerProvider.java
+++ b/java/javax/websocket/ContainerProvider.java
@@ -20,7 +20,7 @@ package javax.websocket;
  * Provides access to the implementation. This version of the API is hard-coded
  * to use the Apache Tomcat WebSocket implementation.
  */
-public class ContainerProvider {
+public abstract class ContainerProvider {
 
     private static final String DEFAULT_PROVIDER_CLASS_NAME =
             "org.apache.tomcat.websocket.WsWebSocketContainer";
@@ -40,7 +40,7 @@ public class ContainerProvider {
      * Create a new ClientContainer used to create outgoing WebSocket
      * connections.
      */
-    public static WebSocketContainer createClientContainer() {
+    public static WebSocketContainer getWebSocketContainer() {
         WebSocketContainer result = null;
         try {
             result = clazz.newInstance();

==================================================
RemoteEndpoint.java
index 528a89ec55..9dfa2ec86c 100644
--- a/java/javax/websocket/DefaultClientConfiguration.java
+++ b/java/javax/websocket/DefaultClientConfiguration.java
@@ -42,7 +42,7 @@ public class DefaultClientConfiguration implements ClientEndpointConfiguration {
         return extensions;
     }
 
-    public ClientEndpointConfiguration setExtensions(
+    public DefaultClientConfiguration setExtensions(
             List<Extension> extensions) {
         this.extensions = extensions;
         return this;
@@ -53,7 +53,7 @@ public class DefaultClientConfiguration implements ClientEndpointConfiguration {
         return encoders;
     }
 
-    public ClientEndpointConfiguration setEncoders(List<Encoder> encoders) {
+    public DefaultClientConfiguration setEncoders(List<Encoder> encoders) {
         this.encoders = encoders;
         return this;
     }
@@ -63,7 +63,7 @@ public class DefaultClientConfiguration implements ClientEndpointConfiguration {
         return decoders;
     }
 
-    public ClientEndpointConfiguration setDecoders(List<Decoder> decoders) {
+    public DefaultClientConfiguration setDecoders(List<Decoder> decoders) {
         this.decoders = decoders;
         return this;
     }

==================================================
Session.java
index 421ef189df..6135a88c17 100644
--- a/java/javax/websocket/RemoteEndpoint.java
+++ b/java/javax/websocket/RemoteEndpoint.java
@@ -43,7 +43,7 @@ public interface RemoteEndpoint {
      * Flush any currently batched messages to the remote endpoint. This method
      * will block until the flush completes.
      */
-    void flushBatch();
+    void flushBatch() throws IOException;
 
     /**
      * Obtain the timeout (in milliseconds) for sending a message

==================================================
WebSocketContainer.java
index 9cb38f3642..5d635f0d50 100644
--- a/java/javax/websocket/Session.java
+++ b/java/javax/websocket/Session.java
@@ -52,9 +52,25 @@ public interface Session extends Closeable {
 
     void setTimeout(long seconds);
 
-    void setMaximumMessageSize(long length);
+    /**
+     * Set the current maximum buffer size (in bytes) for binary messages.
+     */
+    void setMaxBinaryMessageBufferSize(int max);
 
-    long getMaximumMessageSize();
+    /**
+     * Get the current maximum buffer size (in bytes) for binary messages.
+     */
+    int getMaxBinaryMessageBufferSize();
+
+    /**
+     * Set the current maximum buffer size (in characters) for text messages.
+     */
+    void setMaxTextMessageBufferSize(int max);
+
+    /**
+     * Get the current maximum buffer size (in characters) for text messages.
+     */
+    int getMaxTextMessageBufferSize();
 
     RemoteEndpoint getRemote();
 
@@ -90,4 +106,6 @@ public interface Session extends Closeable {
     Map<String,Object> getUserProperties();
 
     Principal getUserPrincipal();
+
+    Set<Session> getOpenSessions();
 }

==================================================
WsRemoteEndpointBase.java
index 4deebb33af..8ac8a77e7d 100644
--- a/java/javax/websocket/WebSocketContainer.java
+++ b/java/javax/websocket/WebSocketContainer.java
@@ -55,31 +55,29 @@ public interface WebSocketContainer {
             ClientEndpointConfiguration clientEndpointConfiguration, URI path)
             throws DeploymentException;
 
-    Set<Session> getOpenSessions();
-
     long getMaxSessionIdleTimeout();
 
     void setMaxSessionIdleTimeout(long timeout);
 
     /**
-     * Get the current maximum buffer size (in bytes) for binary messages.
+     * Get the default maximum buffer size (in bytes) for binary messages.
      */
-    long getMaxBinaryMessageBufferSize();
+    int getDefaultMaxBinaryMessageBufferSize();
 
     /**
-     * Set the current maximum buffer size (in bytes) for binary messages.
+     * Set the default maximum buffer size (in bytes) for binary messages.
      */
-    void setMaxBinaryMessageBufferSize(long max);
+    void setDefaultMaxBinaryMessageBufferSize(int max);
 
     /**
-     * Get the current maximum buffer size (in characters) for text messages.
+     * Get the default maximum buffer size (in characters) for text messages.
      */
-    long getMaxTextMessageBufferSize();
+    int getDefaultMaxTextMessageBufferSize();
 
     /**
-     * Set the current maximum buffer size (in characters) for text messages.
+     * Set the default maximum buffer size (in characters) for text messages.
      */
-    void setMaxTextMessageBufferSize(long max);
+    void setDefaultMaxTextMessageBufferSize(int max);
 
     Set<Extension> getInstalledExtensions();
 }

==================================================
WsSession.java
index 112d1f8a41..14a453f01f 100644
--- a/java/org/apache/tomcat/websocket/WsRemoteEndpointBase.java
+++ b/java/org/apache/tomcat/websocket/WsRemoteEndpointBase.java
@@ -84,7 +84,11 @@ public abstract class WsRemoteEndpointBase implements RemoteEndpoint {
 
         if (oldValue && !batchingAllowed) {
             // Just disabled batched. Must flush.
-            flushBatch();
+            try {
+                flushBatch();
+            } catch (IOException e) {
+                // TODO Log this? Runtime exception? Something else?
+            }
         }
     }
 
@@ -96,12 +100,8 @@ public abstract class WsRemoteEndpointBase implements RemoteEndpoint {
 
 
     @Override
-    public void flushBatch() {
-        try {
-            startMessageBlock(Constants.INTERNAL_OPCODE_FLUSH, null, true);
-        } catch (IOException e) {
-            // TODO Log this? Runtime exception? Something else?
-        }
+    public void flushBatch() throws IOException {
+        startMessageBlock(Constants.INTERNAL_OPCODE_FLUSH, null, true);
     }
 
 

==================================================
WsWebSocketContainer.java
index be75324750..92e296dce0 100644
--- a/java/org/apache/tomcat/websocket/WsSession.java
+++ b/java/org/apache/tomcat/websocket/WsSession.java
@@ -206,19 +206,43 @@ public class WsSession implements Session {
     }
 
 
+
+
     @Override
-    public void setMaximumMessageSize(long length) {
+    public void setMaxBinaryMessageBufferSize(int max) {
         // TODO Auto-generated method stub
+
     }
 
 
     @Override
-    public long getMaximumMessageSize() {
+    public int getMaxBinaryMessageBufferSize() {
         // TODO Auto-generated method stub
         return 0;
     }
 
 
+    @Override
+    public void setMaxTextMessageBufferSize(int max) {
+        // TODO Auto-generated method stub
+
+    }
+
+
+    @Override
+    public int getMaxTextMessageBufferSize() {
+        // TODO Auto-generated method stub
+        return 0;
+    }
+
+
+    @Override
+    public Set<Session> getOpenSessions() {
+        // TODO Auto-generated method stub
+        return null;
+    }
+
+
     @Override
     public RemoteEndpoint getRemote() {
         return wsRemoteEndpoint;

==================================================
ServerContainerImpl.java
index d731cd2d52..f7d0b7bc73 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -342,13 +342,6 @@ public class WsWebSocketContainer implements WebSocketContainer {
     }
 
 
-    @Override
-    public Set<Session> getOpenSessions() {
-        // TODO Auto-generated method stub
-        return null;
-    }
-
-
     @Override
     public long getMaxSessionIdleTimeout() {
         // TODO Auto-generated method stub
@@ -363,34 +356,26 @@ public class WsWebSocketContainer implements WebSocketContainer {
 
 
     @Override
-    public long getMaxBinaryMessageBufferSize() {
+    public int getDefaultMaxBinaryMessageBufferSize() {
         return maxBinaryMessageBufferSize;
     }
 
 
     @Override
-    public void setMaxBinaryMessageBufferSize(long max) {
-        if (max > Integer.MAX_VALUE) {
-            throw new IllegalArgumentException(
-                    sm.getString("wsWebSocketContainer.maxBuffer"));
-        }
-        maxBinaryMessageBufferSize = (int) max;
+    public void setDefaultMaxBinaryMessageBufferSize(int max) {
+        maxBinaryMessageBufferSize = max;
     }
 
 
     @Override
-    public long getMaxTextMessageBufferSize() {
+    public int getDefaultMaxTextMessageBufferSize() {
         return maxTextMessageBufferSize;
     }
 
 
     @Override
-    public void setMaxTextMessageBufferSize(long max) {
-        if (max > Integer.MAX_VALUE) {
-            throw new IllegalArgumentException(
-                    sm.getString("wsWebSocketContainer.maxBuffer"));
-        }
-        maxTextMessageBufferSize = (int) max;
+    public void setDefaultMaxTextMessageBufferSize(int max) {
+        maxTextMessageBufferSize = max;
     }
 
 

==================================================
WsProtocolHandler.java
index 6ce2edd254..10644038e4 100644
--- a/java/org/apache/tomcat/websocket/server/ServerContainerImpl.java
+++ b/java/org/apache/tomcat/websocket/server/ServerContainerImpl.java
@@ -100,13 +100,13 @@ public class ServerContainerImpl extends WsWebSocketContainer {
         String value = servletContext.getInitParameter(
                 Constants.BINARY_BUFFER_SIZE_SERVLET_CONTEXT_INIT_PARAM);
         if (value != null) {
-            setMaxBinaryMessageBufferSize(Long.parseLong(value));
+            setDefaultMaxBinaryMessageBufferSize(Integer.parseInt(value));
         }
 
         value = servletContext.getInitParameter(
                 Constants.TEXT_BUFFER_SIZE_SERVLET_CONTEXT_INIT_PARAM);
         if (value != null) {
-            setMaxTextMessageBufferSize(Long.parseLong(value));
+            setDefaultMaxTextMessageBufferSize(Integer.parseInt(value));
         }
 
         // Update the timeout thread name

==================================================
TestWsRemoteEndpoint.java
index 9da7a0d247..41abfe5e74 100644
--- a/java/org/apache/tomcat/websocket/server/WsProtocolHandler.java
+++ b/java/org/apache/tomcat/websocket/server/WsProtocolHandler.java
@@ -88,8 +88,8 @@ public class WsProtocolHandler implements ProtocolHandler {
                     ep, wsRemoteEndpointServer, webSocketContainer);
             WsFrameServer wsFrame = new WsFrameServer(
                     sis,
-                    (int) webSocketContainer.getMaxBinaryMessageBufferSize(),
-                    (int) webSocketContainer.getMaxTextMessageBufferSize(),
+                    webSocketContainer.getDefaultMaxBinaryMessageBufferSize(),
+                    webSocketContainer.getDefaultMaxTextMessageBufferSize(),
                     wsSession);
             sis.setReadListener(new WsReadListener(this, wsFrame));
             sos.setWriteListener(

==================================================
TestWsWebSocketContainer.java
index b66383ea6c..43abd9443b 100644
--- a/test/org/apache/tomcat/websocket/TestWsRemoteEndpoint.java
+++ b/test/org/apache/tomcat/websocket/TestWsRemoteEndpoint.java
@@ -60,7 +60,7 @@ public class TestWsRemoteEndpoint extends TomcatBaseTest {
         ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
 
         WebSocketContainer wsContainer =
-                ContainerProvider.createClientContainer();
+                ContainerProvider.getWebSocketContainer();
 
         tomcat.start();
 

==================================================
