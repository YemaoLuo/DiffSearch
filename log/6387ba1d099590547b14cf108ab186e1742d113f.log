6387ba1d099590547b14cf108ab186e1742d113f
==================================================
Move Processor creation from the ConnectionHandler to the Protocol
==================================================
Mark Thomas
==================================================
Sun Nov 8 16:53:16 2015 +0000
==================================================
AbstractProtocol.java
Move Processor creation from the ConnectionHandler to the Protocol

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1713254 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractAjpProtocol.java
index 129d440453..cca3779615 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -419,6 +419,15 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
     protected abstract UpgradeProtocol getNegotiatedProtocol(String name);
 
 
+    /**
+     * Create and configure a new Processor instance for the current protocol
+     * implementation.
+     *
+     * @return A fully configured Processor instance that is ready to use
+     */
+    protected abstract Processor createProcessor();
+
+
     // ----------------------------------------------------- JMX related methods
 
     protected String domain;
@@ -722,7 +731,8 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
                     processor = recycledProcessors.pop();
                 }
                 if (processor == null) {
-                    processor = createProcessor();
+                    processor = getProtocol().createProcessor();
+                    register(processor);
                 }
 
                 processor.setSslSupport(
@@ -867,8 +877,6 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
             return SocketState.CLOSED;
         }
 
-        protected abstract P createProcessor();
-
 
         protected void longPoll(SocketWrapperBase<?> socket, Processor processor) {
             if (!processor.isAsync()) {
@@ -930,7 +938,7 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
                 UpgradeToken upgradeToken) throws IOException;
 
 
-        protected void register(AbstractProcessor processor) {
+        protected void register(Processor processor) {
             if (getProtocol().getDomain() != null) {
                 synchronized (this) {
                     try {

==================================================
AbstractHttp11Protocol.java
index 71434e70e8..689dff4555 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -19,6 +19,7 @@ package org.apache.coyote.ajp;
 import java.nio.ByteBuffer;
 
 import org.apache.coyote.AbstractProtocol;
+import org.apache.coyote.Processor;
 import org.apache.coyote.UpgradeProtocol;
 import org.apache.coyote.UpgradeToken;
 import org.apache.tomcat.util.net.AbstractEndpoint;
@@ -155,15 +156,19 @@ public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
     }
 
 
-    protected void configureProcessor(AjpProcessor processor) {
+    @Override
+    protected Processor createProcessor() {
+        AjpProcessor processor = new AjpProcessor(getPacketSize(), getEndpoint());
         processor.setAdapter(getAdapter());
         processor.setTomcatAuthentication(getTomcatAuthentication());
         processor.setTomcatAuthorization(getTomcatAuthorization());
         processor.setRequiredSecret(requiredSecret);
         processor.setKeepAliveTimeout(getKeepAliveTimeout());
         processor.setClientCertProvider(getClientCertProvider());
+        return processor;
     }
 
+
     protected static class AjpConnectionHandler<S>
             extends AbstractConnectionHandler<S,AjpProcessor> {
 
@@ -179,15 +184,6 @@ public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
         }
 
 
-        @Override
-        protected AjpProcessor createProcessor() {
-            AjpProcessor processor = new AjpProcessor(proto.getPacketSize(), proto.getEndpoint());
-            proto.configureProcessor(processor);
-            register(processor);
-            return processor;
-        }
-
-
         @Override
         protected AjpProcessor createUpgradeProcessor(SocketWrapperBase<?> socket,
                 ByteBuffer leftoverInput, UpgradeToken upgradeToken) {

==================================================
