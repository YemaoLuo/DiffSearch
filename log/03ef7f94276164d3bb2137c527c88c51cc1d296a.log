03ef7f94276164d3bb2137c527c88c51cc1d296a
==================================================
Start to strip out the unused classes
==================================================
Mark Emlyn
==================================================
Sun Oct 14 14:26:18 2012 +0000
==================================================
Code.java
Start to strip out the unused classes

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1398089 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CodeException.java
index 5787ccd31b..cb59af3a14 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Code.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Code.java
@@ -35,7 +35,6 @@ import java.io.IOException;
  * @version $Id$
  * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
  * @see     Attribute
- * @see     CodeException
  * @see     LineNumberTable
  * @see LocalVariableTable
  */
@@ -45,7 +44,6 @@ public final class Code extends Attribute {
     private int code_length; // Length of code in bytes
     private byte[] code; // Actual byte code
     private int exception_table_length;
-    private CodeException[] exception_table; // Table of handled exceptions
     private int attributes_count; // Attributes of code: LineNumber
     private Attribute[] attributes; // or LocalVariable
 
@@ -59,8 +57,8 @@ public final class Code extends Attribute {
     Code(int name_index, int length, DataInputStream file, ConstantPool constant_pool)
             throws IOException {
         // Initialize with some default values which will be overwritten later
-        this(name_index, length, (byte[]) null,
-                (CodeException[]) null, (Attribute[]) null, constant_pool);
+        this(name_index, length, (byte[]) null, (Attribute[]) null,
+                constant_pool);
         file.readUnsignedShort();   // Unused max_stack
         file.readUnsignedShort();   // Unused max_locals
         code_length = file.readInt();
@@ -70,9 +68,8 @@ public final class Code extends Attribute {
          * handler is active, i.e., a try { ... } catch() block.
          */
         exception_table_length = file.readUnsignedShort();
-        exception_table = new CodeException[exception_table_length];
         for (int i = 0; i < exception_table_length; i++) {
-            exception_table[i] = new CodeException(file);
+            Utility.swallowCodeException(file);
         }
         /* Read all attributes, currently `LineNumberTable' and
          * `LocalVariableTable'
@@ -94,15 +91,13 @@ public final class Code extends Attribute {
      * @param name_index Index pointing to the name <em>Code</em>
      * @param length Content length in bytes
      * @param code Actual byte code
-     * @param exception_table Table of handled exceptions
      * @param attributes Attributes of code: LineNumber or LocalVariable
      * @param constant_pool Array of constants
      */
     public Code(int name_index, int length, byte[] code,
-            CodeException[] exception_table, Attribute[] attributes, ConstantPool constant_pool) {
+            Attribute[] attributes, ConstantPool constant_pool) {
         super(name_index, length, constant_pool);
         setCode(code);
-        setExceptionTable(exception_table);
         setAttributes(attributes); // Overwrites length!
     }
 
@@ -151,14 +146,4 @@ public final class Code extends Attribute {
         code_length = (code == null) ? 0 : code.length;
         length = calculateLength(); // Adjust length
     }
-
-
-    /**
-     * @param exception_table exception table
-     */
-    public final void setExceptionTable( CodeException[] exception_table ) {
-        this.exception_table = exception_table;
-        exception_table_length = (exception_table == null) ? 0 : exception_table.length;
-        length = calculateLength(); // Adjust length
-    }
 }

==================================================
InnerClass.java
deleted file mode 100644
index a17d84437f..0000000000
--- a/java/org/apache/tomcat/util/bcel/classfile/CodeException.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- */
-package org.apache.tomcat.util.bcel.classfile;
-
-import java.io.DataInput;
-import java.io.IOException;
-import java.io.Serializable;
-
-import org.apache.tomcat.util.bcel.Constants;
-
-/**
- * This class represents an entry in the exception table of the <em>Code</em>
- * attribute and is used only there. It contains a range in which a
- * particular exception handler is active.
- *
- * @version $Id$
- * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
- * @see     Code
- */
-public final class CodeException implements Cloneable, Constants, Serializable {
-
-    private static final long serialVersionUID = -6351674720658890686L;
-
-
-    /**
-     * Construct object from file stream.
-     * @param file Input stream
-     * @throws IOException
-     */
-    CodeException(DataInput file) throws IOException {
-        file.readUnsignedShort();   // Unused start_pc
-        file.readUnsignedShort();   // Unused end_pc
-        file.readUnsignedShort();   // Unused handler_pc
-        file.readUnsignedShort();   // Unused catch_type
-    }
-}

==================================================
InnerClasses.java
deleted file mode 100644
index 1897d25ff6..0000000000
--- a/java/org/apache/tomcat/util/bcel/classfile/InnerClass.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- */
-package org.apache.tomcat.util.bcel.classfile;
-
-import java.io.DataInput;
-import java.io.IOException;
-import java.io.Serializable;
-
-/**
- * This class represents a inner class attribute, i.e., the class
- * indices of the inner and outer classes, the name and the attributes
- * of the inner class.
- *
- * @version $Id$
- * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
- * @see InnerClasses
- */
-public final class InnerClass implements Cloneable, Serializable {
-
-    private static final long serialVersionUID = -4964694103982806087L;
-
-    /**
-     * Construct object from file stream.
-     * @param file Input stream
-     * @throws IOException
-     */
-    InnerClass(DataInput file) throws IOException {
-        file.readUnsignedShort();   // Unused inner_class_index
-        file.readUnsignedShort();   // Unused outer_class_index
-        file.readUnsignedShort();   // Unused inner_name_index
-        file.readUnsignedShort();   // Unused inner_access_flags
-    }
-}

==================================================
Utility.java
index ff04bb266e..958b576eb5 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/InnerClasses.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/InnerClasses.java
@@ -33,23 +33,9 @@ import java.io.IOException;
 public final class InnerClasses extends Attribute {
 
     private static final long serialVersionUID = 54179484605570305L;
-    private InnerClass[] inner_classes;
     private int number_of_classes;
 
 
-    /**
-     * @param name_index Index in constant pool to CONSTANT_Utf8
-     * @param length Content length in bytes
-     * @param inner_classes array of inner classes attributes
-     * @param constant_pool Array of constants
-     */
-    public InnerClasses(int name_index, int length, InnerClass[] inner_classes,
-            ConstantPool constant_pool) {
-        super(name_index, length, constant_pool);
-        setInnerClasses(inner_classes);
-    }
-
-
     /**
      * Construct object from file stream.
      *
@@ -61,20 +47,10 @@ public final class InnerClasses extends Attribute {
      */
     InnerClasses(int name_index, int length, DataInputStream file, ConstantPool constant_pool)
             throws IOException {
-        this(name_index, length, (InnerClass[]) null, constant_pool);
+        super(name_index, length, constant_pool);
         number_of_classes = file.readUnsignedShort();
-        inner_classes = new InnerClass[number_of_classes];
         for (int i = 0; i < number_of_classes; i++) {
-            inner_classes[i] = new InnerClass(file);
+            Utility.swallowInnerClass(file);
         }
     }
-
-
-    /**
-     * @param inner_classes the array of inner classes
-     */
-    public final void setInnerClasses( InnerClass[] inner_classes ) {
-        this.inner_classes = inner_classes;
-        number_of_classes = (inner_classes == null) ? 0 : inner_classes.length;
-    }
 }

==================================================
