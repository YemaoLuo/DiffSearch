2162c11d51ce440ce76008ddbff1e54be5830c1f
==================================================
More prep for https://bz.apache.org/bugzilla/show_bug.cgi?id=63781
==================================================
Mark Thomas
==================================================
Fri Oct 4 10:29:03 2019 +0100
==================================================
Jre9Compat.java
More prep for https://bz.apache.org/bugzilla/show_bug.cgi?id=63781

The EL impl as well as the API needs access to JreCompat.canAccess()
Keep the isPublic check separate from the acccess check



==================================================
JreCompat.java
index e1b75a7513..27187132a8 100644
--- a/java/javax/el/Jre9Compat.java
+++ b/java/javax/el/Jre9Compat.java
@@ -19,6 +19,13 @@ package javax.el;
 import java.lang.reflect.AccessibleObject;
 import java.lang.reflect.Method;
 
+/*
+ * This is a cut down version of org.apache.tomcat.util.Jre9Compat that provides
+ * only the methods required by the EL implementation.
+ *
+ * This class is duplicated in org.apache.el.util
+ * When making changes keep the two in sync.
+ */
 class Jre9Compat extends JreCompat {
 
     private static final Method canAccessMethod;
@@ -41,7 +48,7 @@ class Jre9Compat extends JreCompat {
 
 
     @Override
-    public boolean canAcccess(Class<?> type, Object base, AccessibleObject accessibleObject) {
+    public boolean canAcccess(Object base, AccessibleObject accessibleObject) {
         try {
             return ((Boolean) canAccessMethod.invoke(accessibleObject, base)).booleanValue();
         } catch (ReflectiveOperationException | IllegalArgumentException e) {

==================================================
Jre9Compat.java
index b01d94e8b5..6d68ed0eeb 100644
--- a/java/javax/el/JreCompat.java
+++ b/java/javax/el/JreCompat.java
@@ -17,11 +17,13 @@
 package javax.el;
 
 import java.lang.reflect.AccessibleObject;
-import java.lang.reflect.Modifier;
 
 /*
  * This is cut down version of org.apache.tomcat.util.JreCompat that provides
  * only the methods required by the EL implementation.
+ *
+ * This class is duplicated in org.apache.el.util
+ * When making changes keep the two in sync.
  */
 class JreCompat {
 
@@ -42,19 +44,17 @@ class JreCompat {
 
 
     /**
-     * Is the accessibleObject of the given type accessible on the provided
-     * instance of that type.
+     * Is the accessibleObject accessible (as a result of appropriate module
+     * exports) on the provided instance?
      *
-     * @param type  The type the accessible object belongs to
-     * @param base  The specific instance of the type to be tested. Unused prior
-     *                  to Java 9.
+     * @param base  The specific instance to be tested.
      * @param accessibleObject  The method/field/constructor to be tested.
-     *                              Unused prior to Java 9.
      *
      * @return {code true} if the AccessibleObject can be accessed otherwise
      *         {code false}
      */
-    public boolean canAcccess(Class<?> type, Object base, AccessibleObject accessibleObject) {
-        return Modifier.isPublic(type.getModifiers());
+    public boolean canAcccess(Object base, AccessibleObject accessibleObject) {
+        // Java 8 doesn't support modules so default to true
+        return true;
     }
 }

==================================================
JreCompat.java
new file mode 100644
index 0000000000..b4d10d7b69
--- /dev/null
+++ b/java/org/apache/el/util/Jre9Compat.java
@@ -0,0 +1,58 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.el.util;
+
+import java.lang.reflect.AccessibleObject;
+import java.lang.reflect.Method;
+
+/*
+ * This is a cut down version of org.apache.tomcat.util.Jre9Compat that provides
+ * only the methods required by the EL implementation.
+ *
+ * This class is duplicated in javax.el
+ * When making changes keep the two in sync.
+ */
+class Jre9Compat extends JreCompat {
+
+    private static final Method canAccessMethod;
+
+
+    static {
+        Method m1 = null;
+        try {
+            m1 = AccessibleObject.class.getMethod("canAccess", new Class<?>[] { Object.class });
+        } catch (NoSuchMethodException e) {
+            // Expected for Java 8
+        }
+        canAccessMethod = m1;
+    }
+
+
+    public static boolean isSupported() {
+        return canAccessMethod != null;
+    }
+
+
+    @Override
+    public boolean canAcccess(Object base, AccessibleObject accessibleObject) {
+        try {
+            return ((Boolean) canAccessMethod.invoke(accessibleObject, base)).booleanValue();
+        } catch (ReflectiveOperationException | IllegalArgumentException e) {
+            return false;
+        }
+    }
+}

==================================================
Jre9Compat.java
new file mode 100644
index 0000000000..7ef8b877e5
--- /dev/null
+++ b/java/org/apache/el/util/JreCompat.java
@@ -0,0 +1,60 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.el.util;
+
+import java.lang.reflect.AccessibleObject;
+
+/*
+ * This is a cut down version of org.apache.tomcat.util.JreCompat that provides
+ * only the methods required by the EL implementation.
+ *
+ * This class is duplicated in javax.el
+ * When making changes keep the two in sync.
+ */
+class JreCompat {
+
+    private static final JreCompat instance;
+
+    static {
+        if (Jre9Compat.isSupported()) {
+            instance = new Jre9Compat();
+        } else {
+            instance = new JreCompat();
+        }
+    }
+
+
+    public static JreCompat getInstance() {
+        return instance;
+    }
+
+
+    /**
+     * Is the accessibleObject accessible (as a result of appropriate module
+     * exports) on the provided instance?
+     *
+     * @param base  The specific instance to be tested.
+     * @param accessibleObject  The method/field/constructor to be tested.
+     *
+     * @return {code true} if the AccessibleObject can be accessed otherwise
+     *         {code false}
+     */
+    public boolean canAcccess(Object base, AccessibleObject accessibleObject) {
+        // Java 8 doesn't support modules so default to true
+        return true;
+    }
+}

==================================================
JreCompat.java
index b20c2b5d05..98adc3d0eb 100644
--- a/java/org/apache/tomcat/util/compat/Jre9Compat.java
+++ b/java/org/apache/tomcat/util/compat/Jre9Compat.java
@@ -246,7 +246,7 @@ class Jre9Compat extends JreCompat {
 
 
     @Override
-    public boolean canAcccess(Class<?> type, Object base, AccessibleObject accessibleObject) {
+    public boolean canAcccess(Object base, AccessibleObject accessibleObject) {
         try {
             return ((Boolean) canAccessMethod.invoke(accessibleObject, base)).booleanValue();
         } catch (ReflectiveOperationException | IllegalArgumentException e) {

==================================================
