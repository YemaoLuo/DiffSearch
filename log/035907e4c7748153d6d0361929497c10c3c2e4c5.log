035907e4c7748153d6d0361929497c10c3c2e4c5
==================================================
Fix remaining Autobahn test failures with APR/native.
==================================================
Mark Emlyn
==================================================
Thu Jan 17 15:02:19 2013 +0000
==================================================
AprServletInputStream.java
Fix remaining Autobahn test failures with APR/native.
Once a close message has been received do not process any more messages from that connection.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1434704 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AprServletOutputStream.java
index 540b43d5a3..27ca0db7b9 100644
--- a/java/org/apache/coyote/http11/upgrade/AprServletInputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/AprServletInputStream.java
@@ -32,6 +32,7 @@ public class AprServletInputStream extends AbstractServletInputStream {
     private final Lock blockingStatusReadLock;
     private final WriteLock blockingStatusWriteLock;
     private volatile boolean eagain = false;
+    private volatile boolean closed = false;
 
 
     public AprServletInputStream(SocketWrapper<Long> wrapper) {
@@ -52,6 +53,9 @@ public class AprServletInputStream extends AbstractServletInputStream {
         try {
             blockingStatusReadLock.lock();
             if (wrapper.getBlockingStatus() == block) {
+                if (closed) {
+                    throw new IOException(sm.getString("apr.closed"));
+                }
                 result = Socket.recv(socket, b, off, len);
                 readDone = true;
             }
@@ -69,6 +73,9 @@ public class AprServletInputStream extends AbstractServletInputStream {
                 try {
                     blockingStatusReadLock.lock();
                     blockingStatusWriteLock.unlock();
+                    if (closed) {
+                        throw new IOException(sm.getString("apr.closed"));
+                    }
                     result = Socket.recv(socket, b, off, len);
                 } finally {
                     blockingStatusReadLock.unlock();
@@ -103,7 +110,8 @@ public class AprServletInputStream extends AbstractServletInputStream {
 
     @Override
     protected void doClose() throws IOException {
-        // NO-OP
-        // Let AbstractProcessor trigger the close
+        closed = true;
+        // AbstractProcessor needs to trigger the close as multiple closes for
+        // APR/native sockets will cause problems.
     }
 }

==================================================
