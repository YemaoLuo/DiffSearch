e67a33f15d980cba3efbb272985b610a7609e686
==================================================
Remaining fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=48644
==================================================
Mark Emlyn
==================================================
Mon Sep 27 22:29:30 2010 +0000
==================================================
Library.java
Remaining fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=48644
Some Throwables must always be re-thrown

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1001939 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Digester.java
index 17a8ebaf57..e26b53ca05 100644
--- a/java/org/apache/tomcat/jni/Library.java
+++ b/java/org/apache/tomcat/jni/Library.java
@@ -17,6 +17,8 @@
 
 package org.apache.tomcat.jni;
 
+import org.apache.tomcat.util.ExceptionUtils;
+
 /** Library
  *
  * @author Mladen Turk
@@ -43,6 +45,7 @@ public final class Library {
                 loaded = true;
             }
             catch (Throwable e) {
+                ExceptionUtils.handleThrowable(e);
                 String name = System.mapLibraryName(NAMES[i]);
                 String path = System.getProperty("java.library.path");
                 String sep = System.getProperty("path.separator");

==================================================
FileUploadBase.java
index aae5e27081..195da2a122 100644
--- a/java/org/apache/tomcat/util/digester/Digester.java
+++ b/java/org/apache/tomcat/util/digester/Digester.java
@@ -37,6 +37,7 @@ import javax.xml.parsers.SAXParserFactory;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.IntrospectionUtils;
 import org.xml.sax.Attributes;
 import org.xml.sax.EntityResolver;
@@ -100,6 +101,7 @@ public class Digester extends DefaultHandler {
                     sources[0] = src;
                     initialized = true;
                 } catch (Throwable t) {
+                    ExceptionUtils.handleThrowable(t);
                     LogFactory.getLog("org.apache.commons.digester.Digester").
                         error("Unable to load property source["+className+"].",t);
                 }

==================================================
Streams.java
index 687204afe2..ccd949557c 100644
--- a/java/org/apache/tomcat/util/http/fileupload/FileUploadBase.java
+++ b/java/org/apache/tomcat/util/http/fileupload/FileUploadBase.java
@@ -340,7 +340,7 @@ public abstract class FileUploadBase {
                     FileItem fileItem = iterator.next();
                     try {
                         fileItem.delete();
-                    } catch (Throwable e) {
+                    } catch (Exception e) {
                         // ignore it
                     }
                 }

==================================================
AprEndpoint.java
index 20b04845c5..00b311c529 100644
--- a/java/org/apache/tomcat/util/http/fileupload/util/Streams.java
+++ b/java/org/apache/tomcat/util/http/fileupload/util/Streams.java
@@ -119,14 +119,14 @@ public final class Streams {
             if (in != null) {
                 try {
                     in.close();
-                } catch (Throwable t) {
+                } catch (IOException ioe) {
                     /* Ignore me */
                 }
             }
             if (pClose  &&  out != null) {
                 try {
                     out.close();
-                } catch (Throwable t) {
+                } catch (IOException ioe) {
                     /* Ignore me */
                 }
             }

==================================================
JIoEndpoint.java
index 93a445866e..ce40830b98 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -39,6 +39,7 @@ import org.apache.tomcat.jni.SSLContext;
 import org.apache.tomcat.jni.SSLSocket;
 import org.apache.tomcat.jni.Socket;
 import org.apache.tomcat.jni.Status;
+import org.apache.tomcat.util.ExceptionUtils;
 
 
 /**
@@ -723,6 +724,7 @@ public class AprEndpoint extends AbstractEndpoint {
             }
 
         } catch (Throwable t) {
+            ExceptionUtils.handleThrowable(t);
             if (log.isDebugEnabled()) {
                 if (step == 2) {
                     log.debug(sm.getString("endpoint.err.handshake"), t);
@@ -770,6 +772,7 @@ public class AprEndpoint extends AbstractEndpoint {
             log.warn("Socket processing request was rejected for:"+socket,x);
             return false;
         } catch (Throwable t) {
+            ExceptionUtils.handleThrowable(t);
             // This means we got an OOM or similar creating a thread, or that
             // the pool and its queue are full
             log.error(sm.getString("endpoint.process.fail"), t);
@@ -791,6 +794,7 @@ public class AprEndpoint extends AbstractEndpoint {
             log.warn("Socket processing request was rejected for:"+socket,x);
             return false;
         } catch (Throwable t) {
+            ExceptionUtils.handleThrowable(t);
             // This means we got an OOM or similar creating a thread, or that
             // the pool and its queue are full
             log.error(sm.getString("endpoint.process.fail"), t);
@@ -834,6 +838,7 @@ public class AprEndpoint extends AbstractEndpoint {
             log.warn("Socket processing request was rejected for:"+socket,x);
             return false;
         } catch (Throwable t) {
+            ExceptionUtils.handleThrowable(t);
             // This means we got an OOM or similar creating a thread, or that
             // the pool and its queue are full
             log.error(sm.getString("endpoint.process.fail"), t);
@@ -873,6 +878,7 @@ public class AprEndpoint extends AbstractEndpoint {
             log.warn("Socket processing request was rejected for:"+socket,x);
             return false;
         } catch (Throwable t) {
+            ExceptionUtils.handleThrowable(t);
             // This means we got an OOM or similar creating a thread, or that
             // the pool and its queue are full
             log.error(sm.getString("endpoint.process.fail"), t);
@@ -945,6 +951,7 @@ public class AprEndpoint extends AbstractEndpoint {
                         destroySocket(socket);
                     }
                 } catch (Throwable t) {
+                    ExceptionUtils.handleThrowable(t);
                     if (running) log.error(sm.getString("endpoint.accept.fail"), t);
                 }
 
@@ -1230,6 +1237,7 @@ public class AprEndpoint extends AbstractEndpoint {
                         }
                     }
                 } catch (Throwable t) {
+                    ExceptionUtils.handleThrowable(t);
                     log.error(sm.getString("endpoint.poll.error"), t);
                 }
 
@@ -1560,6 +1568,7 @@ public class AprEndpoint extends AbstractEndpoint {
                         }
                     }
                 } catch (Throwable t) {
+                    ExceptionUtils.handleThrowable(t);
                     log.error(sm.getString("endpoint.poll.error"), t);
                 }
             }

==================================================
NioBlockingSelector.java
index 0c489adb08..441c85a5ff 100644
--- a/java/org/apache/tomcat/util/net/JIoEndpoint.java
+++ b/java/org/apache/tomcat/util/net/JIoEndpoint.java
@@ -31,6 +31,7 @@ import java.util.concurrent.RejectedExecutionException;
 import org.apache.catalina.Globals;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
 
 
@@ -226,6 +227,7 @@ public class JIoEndpoint extends AbstractEndpoint {
                         log.error(sm.getString("endpoint.accept.fail"), npe);
                     }
                 } catch (Throwable t) {
+                    ExceptionUtils.handleThrowable(t);
                     log.error(sm.getString("endpoint.accept.fail"), t);
                 }
                 // The processor will recycle itself when it finishes
@@ -267,6 +269,7 @@ public class JIoEndpoint extends AbstractEndpoint {
                         // SSL handshake
                         serverSocketFactory.handshake(socket.getSocket());
                     } catch (Throwable t) {
+                        ExceptionUtils.handleThrowable(t);
                         if (log.isDebugEnabled()) {
                             log.debug(sm.getString("endpoint.err.handshake"), t);
                         }
@@ -484,6 +487,7 @@ public class JIoEndpoint extends AbstractEndpoint {
             // Close the socket
             return false;
         } catch (Throwable t) {
+            ExceptionUtils.handleThrowable(t);
             log.error(sm.getString("endpoint.err.unexpected"), t);
             // Close the socket
             return false;
@@ -519,6 +523,7 @@ public class JIoEndpoint extends AbstractEndpoint {
             log.warn("Socket processing request was rejected for:"+socket,x);
             return false;
         } catch (Throwable t) {
+            ExceptionUtils.handleThrowable(t);
             // This means we got an OOM or similar creating a thread, or that
             // the pool and its queue are full
             log.error(sm.getString("endpoint.process.fail"), t);
@@ -572,6 +577,7 @@ public class JIoEndpoint extends AbstractEndpoint {
                 }
             }
         } catch (Throwable t) {
+            ExceptionUtils.handleThrowable(t);
             // This means we got an OOM or similar creating a thread, or that
             // the pool and its queue are full
             log.error(sm.getString("endpoint.process.fail"), t);

==================================================
NioEndpoint.java
index 231259830b..8a97571af8 100644
--- a/java/org/apache/tomcat/util/net/NioBlockingSelector.java
+++ b/java/org/apache/tomcat/util/net/NioBlockingSelector.java
@@ -33,6 +33,7 @@ import java.util.concurrent.atomic.AtomicInteger;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.MutableInteger;
 import org.apache.tomcat.util.net.NioEndpoint.KeyAttachment;
 
@@ -328,6 +329,7 @@ public class NioBlockingSelector {
                         if ( log.isDebugEnabled() ) log.debug("Possibly encountered sun bug 5076772 on windows JDK 1.5",x);
                         continue;
                     } catch (Throwable x) {
+                        ExceptionUtils.handleThrowable(x);
                         log.error("",x);
                         continue;
                     }

==================================================
