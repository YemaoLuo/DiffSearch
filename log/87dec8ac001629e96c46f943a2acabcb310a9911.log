87dec8ac001629e96c46f943a2acabcb310a9911
==================================================
Finish converting TLD parsing to using Digester. 
==================================================
Jeremy Boynes
==================================================
Fri Aug 16 05:55:40 2013 +0000
==================================================
Tag.java
Finish converting TLD parsing to using Digester. 
TldParser now handles all TLD content required by Jasper rather than the minimum needed for listener scanning.
Added test TLD files outside the test webapps to test edge cases.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1514588 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TagFile.java
index 58de71798b..255b0f4217 100644
--- a/java/org/apache/tomcat/util/descriptor/tld/Tag.java
+++ b/java/org/apache/tomcat/util/descriptor/tld/Tag.java
@@ -16,23 +16,31 @@
  */
 package org.apache.tomcat.util.descriptor.tld;
 
+import java.util.ArrayList;
 import java.util.List;
 
+import javax.servlet.jsp.tagext.TagAttributeInfo;
+import javax.servlet.jsp.tagext.TagInfo;
+import javax.servlet.jsp.tagext.TagVariableInfo;
+
 /**
- *
+ * Model of a tag define in a tag library descriptor.
+ * This represents the information as parsed from the XML but differs from
+ * TagInfo in that is does not provide a link back to the tag library that
+ * defined it.
  */
 public class Tag {
     private String name;
     private String tagClass;
     private String teiClass;
-    private String bodyContent;
+    private String bodyContent = TagInfo.BODY_CONTENT_JSP;
     private String displayName;
     private String smallIcon;
     private String largeIcon;
     private String info;
     private boolean dynamicAttributes;
-    private List<Variable> variables;
-    private List<Attribute> attributes;
+    private List<TagAttributeInfo> attributes;
+    private List<TagVariableInfo> variables;
 
     public String getName() {
         return name;
@@ -106,144 +114,17 @@ public class Tag {
         this.dynamicAttributes = dynamicAttributes;
     }
 
-    public static class Variable {
-        private String nameGiven;
-        private String nameFromAttribute;
-        private String className;
-        private boolean declare;
-        private int scope;
-
-        public String getNameGiven() {
-            return nameGiven;
-        }
-
-        public void setNameGiven(String nameGiven) {
-            this.nameGiven = nameGiven;
-        }
-
-        public String getNameFromAttribute() {
-            return nameFromAttribute;
-        }
-
-        public void setNameFromAttribute(String nameFromAttribute) {
-            this.nameFromAttribute = nameFromAttribute;
-        }
-
-        public String getClassName() {
-            return className;
-        }
-
-        public void setClassName(String className) {
-            this.className = className;
-        }
-
-        public boolean isDeclare() {
-            return declare;
-        }
-
-        public void setDeclare(boolean declare) {
-            this.declare = declare;
-        }
-
-        public int getScope() {
-            return scope;
-        }
-
-        public void setScope(int scope) {
-            this.scope = scope;
+    public List<TagAttributeInfo> getAttributes() {
+        if (attributes == null) {
+            attributes = new ArrayList<>();
         }
+        return attributes;
     }
 
-    public static class Attribute {
-        private String name;
-        private boolean required;
-        private String type;
-        private boolean requestTime;
-        private boolean fragment;
-        private String description;
-        private boolean deferredValue;
-        private boolean deferredMethod;
-        private String expectedTypeName;
-        private String methodSignature;
-
-        public String getName() {
-            return name;
-        }
-
-        public void setName(String name) {
-            this.name = name;
-        }
-
-        public boolean isRequired() {
-            return required;
-        }
-
-        public void setRequired(boolean required) {
-            this.required = required;
-        }
-
-        public String getType() {
-            return type;
-        }
-
-        public void setType(String type) {
-            this.type = type;
-        }
-
-        public boolean isRequestTime() {
-            return requestTime;
-        }
-
-        public void setRequestTime(boolean requestTime) {
-            this.requestTime = requestTime;
-        }
-
-        public boolean isFragment() {
-            return fragment;
-        }
-
-        public void setFragment(boolean fragment) {
-            this.fragment = fragment;
-        }
-
-        public String getDescription() {
-            return description;
-        }
-
-        public void setDescription(String description) {
-            this.description = description;
-        }
-
-        public boolean isDeferredValue() {
-            return deferredValue;
-        }
-
-        public void setDeferredValue(boolean deferredValue) {
-            this.deferredValue = deferredValue;
-        }
-
-        public boolean isDeferredMethod() {
-            return deferredMethod;
-        }
-
-        public void setDeferredMethod(boolean deferredMethod) {
-            this.deferredMethod = deferredMethod;
-        }
-
-        public String getExpectedTypeName() {
-            return expectedTypeName;
-        }
-
-        public void setExpectedTypeName(String expectedTypeName) {
-            this.expectedTypeName = expectedTypeName;
-        }
-
-        public String getMethodSignature() {
-            return methodSignature;
-        }
-
-        public void setMethodSignature(String methodSignature) {
-            this.methodSignature = methodSignature;
+    public List<TagVariableInfo> getVariables() {
+        if (variables == null) {
+            variables = new ArrayList<>();
         }
+        return variables;
     }
 }

==================================================
TaglibXml.java
index f74bc62793..9fafdc5107 100644
--- a/java/org/apache/tomcat/util/descriptor/tld/TagFile.java
+++ b/java/org/apache/tomcat/util/descriptor/tld/TagFile.java
@@ -17,7 +17,9 @@
 package org.apache.tomcat.util.descriptor.tld;
 
 /**
- *
+ * Bare-bone model of a tag file loaded from a TLD.
+ * This does not contain the tag-specific attributes that requiring parsing
+ * the actual tag file to derive.
  */
 public class TagFile {
     private String name;

==================================================
TldParser.java
index 527832b76c..80b8443e13 100644
--- a/java/org/apache/tomcat/util/descriptor/tld/TaglibXml.java
+++ b/java/org/apache/tomcat/util/descriptor/tld/TaglibXml.java
@@ -38,6 +38,7 @@ public class TaglibXml {
     private String info;
     private Validator validator;
     private List<Tag> tags;
+    private List<TagFile> tagFiles;
     private List<String> listeners;
     private List<FunctionInfo> functions;
 
@@ -100,6 +101,17 @@ public class TaglibXml {
         return tags;
     }
 
+    public void addTagFile(TagFile tag) {
+        if (tagFiles == null) {
+            tagFiles = new ArrayList<>();
+        }
+        tagFiles.add(tag);
+    }
+
+    public List<TagFile> getTagFiles() {
+        return tagFiles;
+    }
+
     public void addListener(String listener) {
         if (listeners == null) {
             listeners = new ArrayList<>();
@@ -111,11 +123,11 @@ public class TaglibXml {
         return listeners;
     }
 
-    public void addFunction(FunctionInfo functionInfo) {
+    public void addFunction(String name, String klass, String signature) {
         if (functions == null) {
             functions = new ArrayList<>();
         }
-        functions.add(functionInfo);
+        functions.add(new FunctionInfo(name, klass, signature));
     }
 
     public List<FunctionInfo> getFunctions() {

==================================================
TldRuleSet.java
index f15c892942..741b9cb8bf 100644
--- a/java/org/apache/tomcat/util/descriptor/tld/TldParser.java
+++ b/java/org/apache/tomcat/util/descriptor/tld/TldParser.java
@@ -52,6 +52,10 @@ public class TldParser {
             digester.parse(source);
             if (!handler.getWarnings().isEmpty() || !handler.getErrors().isEmpty()) {
                 handler.logFindings(LOG, source.getSystemId());
+                if (!handler.getErrors().isEmpty()) {
+                    // throw the first to indicate there was a error during processing
+                    throw handler.getErrors().iterator().next();
+                }
             }
             return taglibXml;
         } finally {

==================================================
Validator.java
index 92eda40db3..9ad738c66a 100644
--- a/java/org/apache/tomcat/util/descriptor/tld/TldRuleSet.java
+++ b/java/org/apache/tomcat/util/descriptor/tld/TldRuleSet.java
@@ -16,6 +16,12 @@
  */
 package org.apache.tomcat.util.descriptor.tld;
 
+import java.lang.reflect.Method;
+
+import javax.servlet.jsp.tagext.TagAttributeInfo;
+import javax.servlet.jsp.tagext.TagVariableInfo;
+import javax.servlet.jsp.tagext.VariableInfo;
+
 import org.apache.tomcat.util.digester.Digester;
 import org.apache.tomcat.util.digester.Rule;
 import org.apache.tomcat.util.digester.RuleSetBase;
@@ -26,7 +32,10 @@ import org.xml.sax.Attributes;
  */
 public class TldRuleSet extends RuleSetBase {
     private static final String PREFIX = "taglib";
+    private static final String VALIDATOR_PREFIX = PREFIX + "/validator";
     private static final String TAG_PREFIX = PREFIX + "/tag";
+    private static final String TAGFILE_PREFIX = PREFIX + "/tag-file";
+    private static final String FUNCTION_PREFIX = PREFIX + "/function";
 
     @Override
     public void addRuleInstances(Digester digester) {
@@ -52,8 +61,18 @@ public class TldRuleSet extends RuleSetBase {
         digester.addCallMethod(PREFIX + "/description", "setInfo", 0);
         digester.addCallMethod(PREFIX + "/listener/listener-class", "addListener", 0);
 
+        // validator
+        digester.addObjectCreate(VALIDATOR_PREFIX, Validator.class.getName());
+        digester.addCallMethod(VALIDATOR_PREFIX + "/validator-class", "setValidatorClass", 0);
+        digester.addCallMethod(VALIDATOR_PREFIX + "/init-param", "addInitParam", 2);
+        digester.addCallParam(VALIDATOR_PREFIX + "/init-param/param-name", 0);
+        digester.addCallParam(VALIDATOR_PREFIX + "/init-param/param-value", 1);
+        digester.addSetNext(VALIDATOR_PREFIX, "setValidator", Validator.class.getName());
+
+
         // tag
         digester.addObjectCreate(TAG_PREFIX, Tag.class.getName());
+        addDescriptionGroup(digester, TAG_PREFIX);
         digester.addCallMethod(TAG_PREFIX + "/name", "setName", 0);
         digester.addCallMethod(TAG_PREFIX + "/tagclass", "setTagClass", 0);
         digester.addCallMethod(TAG_PREFIX + "/tag-class", "setTagClass", 0);
@@ -61,6 +80,280 @@ public class TldRuleSet extends RuleSetBase {
         digester.addCallMethod(TAG_PREFIX + "/tei-class", "setTeiClass", 0);
         digester.addCallMethod(TAG_PREFIX + "/bodycontent", "setBodyContent", 0);
         digester.addCallMethod(TAG_PREFIX + "/body-content", "setBodyContent", 0);
+
+        digester.addRule(TAG_PREFIX + "/variable", new ScriptVariableRule());
+        digester.addCallMethod(TAG_PREFIX + "/variable/name-given", "setNameGiven", 0);
+        digester.addCallMethod(TAG_PREFIX + "/variable/name-from-attribute",
+                "setNameFromAttribute", 0);
+        digester.addCallMethod(TAG_PREFIX + "/variable/variable-class", "setClassName", 0);
+        digester.addRule(TAG_PREFIX + "/variable/declare",
+                new GenericBooleanRule(Variable.class, "setDeclare"));
+        digester.addCallMethod(TAG_PREFIX + "/variable/scope", "setScope", 0);
+
+        digester.addRule(TAG_PREFIX + "/attribute", new TagAttributeRule());
+        digester.addCallMethod(TAG_PREFIX + "/attribute/description", "setDescription", 0);
+        digester.addCallMethod(TAG_PREFIX + "/attribute/name", "setName", 0);
+        digester.addRule(TAG_PREFIX + "/attribute/required",
+                new GenericBooleanRule(Attribute.class, "setRequired"));
+        digester.addRule(TAG_PREFIX + "/attribute/rtexprvalue",
+                new GenericBooleanRule(Attribute.class, "setRequestTime"));
+        digester.addCallMethod(TAG_PREFIX + "/attribute/type", "setType", 0);
+        digester.addCallMethod(TAG_PREFIX + "/attribute/deferred-value", "setDeferredValue");
+        digester.addCallMethod(TAG_PREFIX + "/attribute/deferred-value/type",
+                "setExpectedTypeName", 0);
+        digester.addCallMethod(TAG_PREFIX + "/attribute/deferred-method", "setDeferredMethod");
+        digester.addCallMethod(TAG_PREFIX + "/attribute/deferred-method/method-signature",
+                "setMethodSignature", 0);
+        digester.addRule(TAG_PREFIX + "/attribute/fragment",
+                new GenericBooleanRule(Attribute.class, "setFragment"));
+
+        digester.addRule(TAG_PREFIX + "/dynamic-attributes",
+                new GenericBooleanRule(Tag.class, "setDynamicAttributes"));
         digester.addSetNext(TAG_PREFIX, "addTag", Tag.class.getName());
+
+        // tag-file
+        digester.addObjectCreate(TAGFILE_PREFIX, TagFile.class.getName());
+        addDescriptionGroup(digester, TAGFILE_PREFIX);
+        digester.addCallMethod(TAGFILE_PREFIX + "/name", "setName", 0);
+        digester.addCallMethod(TAGFILE_PREFIX + "/path", "setPath", 0);
+        digester.addSetNext(TAGFILE_PREFIX, "addTagFile", TagFile.class.getName());
+
+        // function
+        digester.addCallMethod(FUNCTION_PREFIX, "addFunction", 3);
+        digester.addCallParam(FUNCTION_PREFIX + "/name", 0);
+        digester.addCallParam(FUNCTION_PREFIX + "/function-class", 1);
+        digester.addCallParam(FUNCTION_PREFIX + "/function-signature", 2);
+    }
+
+    private void addDescriptionGroup(Digester digester, String prefix) {
+        digester.addCallMethod(prefix + "/info", "setInfo", 0);
+        digester.addCallMethod(prefix + "small-icon", "setSmallIcon", 0);
+        digester.addCallMethod(prefix + "large-icon", "setLargeIcon", 0);
+
+        digester.addCallMethod(prefix + "/description", "setInfo", 0);
+        digester.addCallMethod(prefix + "/display-name", "setDisplayName", 0);
+        digester.addCallMethod(prefix + "/icon/small-icon", "setSmallIcon", 0);
+        digester.addCallMethod(prefix + "/icon/large-icon", "setLargeIcon", 0);
+    }
+
+    private static class TagAttributeRule extends Rule {
+        @Override
+        public void begin(String namespace, String name, Attributes attributes) throws Exception {
+            TaglibXml taglibXml = (TaglibXml) digester.peek(digester.getCount() - 1);
+            digester.push(new Attribute("1.2".equals(taglibXml.getJspVersion())));
+        }
+
+        @Override
+        public void end(String namespace, String name) throws Exception {
+            Attribute attribute = (Attribute) digester.pop();
+            Tag tag = (Tag) digester.peek();
+            tag.getAttributes().add(attribute.toTagAttributeInfo());
+        }
+    }
+
+    public static class Attribute {
+        private final boolean allowShortNames;
+        private String name;
+        private boolean required;
+        private String type;
+        private boolean requestTime;
+        private boolean fragment;
+        private String description;
+        private boolean deferredValue;
+        private boolean deferredMethod;
+        private String expectedTypeName;
+        private String methodSignature;
+
+        private Attribute(boolean allowShortNames) {
+            this.allowShortNames = allowShortNames;
+        }
+
+        public void setName(String name) {
+            this.name = name;
+        }
+
+        public void setRequired(boolean required) {
+            this.required = required;
+        }
+
+        public void setType(String type) {
+            if (allowShortNames) {
+                switch (type) {
+                    case "Boolean":
+                        this.type = "java.lang.Boolean";
+                        break;
+                    case "Character":
+                        this.type = "java.lang.Character";
+                        break;
+                    case "Byte":
+                        this.type = "java.lang.Byte";
+                        break;
+                    case "Short":
+                        this.type = "java.lang.Short";
+                        break;
+                    case "Integer":
+                        this.type = "java.lang.Integer";
+                        break;
+                    case "Long":
+                        this.type = "java.lang.Long";
+                        break;
+                    case "Float":
+                        this.type = "java.lang.Float";
+                        break;
+                    case "Double":
+                        this.type = "java.lang.Double";
+                        break;
+                    case "String":
+                        this.type = "java.lang.String";
+                        break;
+                    case "Object":
+                        this.type = "java.lang.Object";
+                        break;
+                    default:
+                        this.type = type;
+                        break;
+                }
+            } else {
+                this.type = type;
+            }
+        }
+
+        public void setRequestTime(boolean requestTime) {
+            this.requestTime = requestTime;
+        }
+
+        public void setFragment(boolean fragment) {
+            this.fragment = fragment;
+        }
+
+        public void setDescription(String description) {
+            this.description = description;
+        }
+
+        public void setDeferredValue() {
+            this.deferredValue = true;
+        }
+
+        public void setDeferredMethod() {
+            this.deferredMethod = true;
+        }
+
+        public void setExpectedTypeName(String expectedTypeName) {
+            this.expectedTypeName = expectedTypeName;
+        }
+
+        public void setMethodSignature(String methodSignature) {
+            this.methodSignature = methodSignature;
+        }
+
+        public TagAttributeInfo toTagAttributeInfo() {
+            if (fragment) {
+                // JSP8.5.2: for a fragment type is fixed and rexprvalue is true
+                type = "javax.servlet.jsp.tagext.JspFragment";
+                requestTime = true;
+            } else if (deferredValue) {
+                type = "javax.el.ValueExpression";
+                if (expectedTypeName == null) {
+                    expectedTypeName = "java.lang.Object";
+                }
+            } else if (deferredMethod) {
+                type = "javax.el.MethodExpression";
+                if (methodSignature == null) {
+                    methodSignature = "java.lang.Object method()";
+                }
+            }
+
+            // According to JSP spec, for static values (those determined at
+            // translation time) the type is fixed at java.lang.String.
+            if (!requestTime && type == null) {
+                type = "java.lang.String";
+            }
+
+            return new TagAttributeInfo(
+                    name,
+                    required,
+                    type,
+                    requestTime,
+                    fragment,
+                    description,
+                    deferredValue,
+                    deferredMethod,
+                    expectedTypeName,
+                    methodSignature);
+        }
+    }
+
+    private static class ScriptVariableRule extends Rule {
+        @Override
+        public void begin(String namespace, String name, Attributes attributes) throws Exception {
+            digester.push(new Variable());
+        }
+
+        @Override
+        public void end(String namespace, String name) throws Exception {
+            Variable variable = (Variable) digester.pop();
+            Tag tag = (Tag) digester.peek();
+            tag.getVariables().add(variable.toTagVariableInfo());
+        }
+    }
+
+    public static class Variable {
+        private String nameGiven;
+        private String nameFromAttribute;
+        private String className = "java.lang.String";
+        private boolean declare;
+        private int scope = VariableInfo.NESTED;
+
+        public void setNameGiven(String nameGiven) {
+            this.nameGiven = nameGiven;
+        }
+
+        public void setNameFromAttribute(String nameFromAttribute) {
+            this.nameFromAttribute = nameFromAttribute;
+        }
+
+        public void setClassName(String className) {
+            this.className = className;
+        }
+
+        public void setDeclare(boolean declare) {
+            this.declare = declare;
+        }
+
+        public void setScope(String scopeName) {
+            switch (scopeName) {
+                case "NESTED":
+                    scope = VariableInfo.NESTED;
+                    break;
+                case "AT_BEGIN":
+                    scope = VariableInfo.AT_BEGIN;
+                    break;
+                case "AT_END":
+                    scope = VariableInfo.AT_END;
+                    break;
+            }
+        }
+
+        public TagVariableInfo toTagVariableInfo() {
+            return new TagVariableInfo(nameGiven, nameFromAttribute, className, declare, scope);
+        }
+    }
+
+    private static class GenericBooleanRule extends Rule {
+        private final Method setter;
+
+        private GenericBooleanRule(Class<?> type, String setterName) {
+            try {
+                this.setter = type.getMethod(setterName, Boolean.TYPE);
+            } catch (NoSuchMethodException e) {
+                throw new IllegalArgumentException(e);
+            }
+        }
+
+        @Override
+        public void body(String namespace, String name, String text) throws Exception {
+            boolean value = "true".equalsIgnoreCase(text) || "yes".equalsIgnoreCase(text);
+            setter.invoke(digester.peek(), value);
+        }
     }
 }

==================================================
TestTldParser.java
index 5db654cdef..2174b5d3f6 100644
--- a/java/org/apache/tomcat/util/descriptor/tld/Validator.java
+++ b/java/org/apache/tomcat/util/descriptor/tld/Validator.java
@@ -23,15 +23,15 @@ import java.util.Map;
  * Model of a Tag Library Validator from the XML descriptor.
  */
 public class Validator {
-    private String validationClass;
+    private String validatorClass;
     private Map<String, String> initParams;
 
-    public String getValidationClass() {
-        return validationClass;
+    public String getValidatorClass() {
+        return validatorClass;
     }
 
-    public void setValidationClass(String validationClass) {
-        this.validationClass = validationClass;
+    public void setValidatorClass(String validatorClass) {
+        this.validatorClass = validatorClass;
     }
 
     public void addInitParam(String name, String value) {

==================================================
