f2ceaa8673ab98ba3a5d2ccdb410e86e3796931f
==================================================
Ensure all additions to the Poller go through the SocketWrapper so it
==================================================
Mark Thomas
==================================================
Wed Mar 11 19:57:07 2015 +0000
==================================================
AjpAprProtocol.java
Ensure all additions to the Poller go through the SocketWrapper so it
can check if the socket has been closed first.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1665986 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProtocol.java
index 1dee0b93d3..2f025cfc85 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -90,9 +90,8 @@ public class AjpAprProtocol extends AbstractAjpProtocol<Long> {
             processor.recycle();
             recycledProcessors.push(processor);
             if (addToPoller) {
-                ((AprEndpoint)getProtocol().getEndpoint()).getPoller().add(
-                        socket.getSocket().longValue(),
-                        getProtocol().getEndpoint().getKeepAliveTimeout(), true, false);
+                socket.setReadTimeout(getProtocol().getEndpoint().getKeepAliveTimeout());
+                socket.registerReadInterest();
             }
         }
     }

==================================================
AprEndpoint.java
index 108b73ba98..470a1df4d0 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -221,9 +221,8 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
             processor.recycle();
             recycledProcessors.push(processor);
             if (addToPoller && getProtocol().getEndpoint().isRunning()) {
-                ((AprEndpoint)getProtocol().getEndpoint()).getPoller().add(
-                        socket.getSocket().longValue(),
-                        getProtocol().getEndpoint().getKeepAliveTimeout(), true, false);
+                socket.setReadTimeout(getProtocol().getEndpoint().getKeepAliveTimeout());
+                socket.registerReadInterest();
             }
         }
 
@@ -262,7 +261,7 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
                     // Connector has been stopped
                     release(socket, processor, false);
                 } else {
-                    p.add(socket.getSocket().longValue(), -1, true, false);
+                    socket.registerReadInterest();
                 }
             }
         }

==================================================
