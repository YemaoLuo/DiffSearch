f6d674b6ffb90e5ab89063c4c9a0e7756126d619
==================================================
Fix reported boxing warnings.
==================================================
Remy Maucherat
==================================================
Mon Mar 10 14:08:43 2014 +0000
==================================================
AjpNio2Processor.java
Fix reported boxing warnings.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1575946 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InternalNio2InputBuffer.java
index 06ae4a81cd..64f5cfebb5 100644
--- a/java/org/apache/coyote/ajp/AjpNio2Processor.java
+++ b/java/org/apache/coyote/ajp/AjpNio2Processor.java
@@ -64,7 +64,7 @@ public class AjpNio2Processor extends AbstractAjpProcessor<Nio2Channel> {
             public void completed(Integer nBytes, SocketWrapper<Nio2Channel> attachment) {
                 boolean notify = false;
                 synchronized (writeCompletionHandler) {
-                    if (nBytes < 0) {
+                    if (nBytes.intValue() < 0) {
                         failed(new IOException(sm.getString("ajpprocessor.failedsend")), attachment);
                         return;
                     }
@@ -158,7 +158,8 @@ public class AjpNio2Processor extends AbstractAjpProcessor<Nio2Channel> {
             writeBuffer.put(src, offset, length);
             writeBuffer.flip();
             try {
-                result = socketWrapper.getSocket().write(writeBuffer).get(socketWrapper.getTimeout(), TimeUnit.MILLISECONDS);
+                result = socketWrapper.getSocket().write(writeBuffer)
+                        .get(socketWrapper.getTimeout(), TimeUnit.MILLISECONDS).intValue();
             } catch (InterruptedException | ExecutionException
                     | TimeoutException e) {
                 throw new IOException(sm.getString("ajpprocessor.failedsend"), e);
@@ -228,7 +229,8 @@ public class AjpNio2Processor extends AbstractAjpProcessor<Nio2Channel> {
                 flipped = false;
                 readBuffer.limit(n);
                 try {
-                    nRead = socketWrapper.getSocket().read(readBuffer).get(socketWrapper.getTimeout(), TimeUnit.MILLISECONDS);
+                    nRead = socketWrapper.getSocket().read(readBuffer)
+                            .get(socketWrapper.getTimeout(), TimeUnit.MILLISECONDS).intValue();
                 } catch (InterruptedException | ExecutionException
                         | TimeoutException e) {
                     throw new IOException(sm.getString("ajpprocessor.failedread"), e);

==================================================
InternalNio2OutputBuffer.java
index 42c16c8d83..6a5ad8018e 100644
--- a/java/org/apache/coyote/http11/InternalNio2InputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNio2InputBuffer.java
@@ -753,7 +753,7 @@ public class InternalNio2InputBuffer extends AbstractInputBuffer<Nio2Channel> {
             public void completed(Integer nBytes, SocketWrapper<Nio2Channel> attachment) {
                 boolean notify = false;
                 synchronized (completionHandler) {
-                    if (nBytes < 0) {
+                    if (nBytes.intValue() < 0) {
                         failed(new ClosedChannelException(), attachment);
                         return;
                     }
@@ -817,7 +817,8 @@ public class InternalNio2InputBuffer extends AbstractInputBuffer<Nio2Channel> {
                 byteBuffer.clear();
                 flipped = false;
                 try {
-                    nRead = socket.getSocket().read(byteBuffer).get(socket.getTimeout(), TimeUnit.MILLISECONDS);
+                    nRead = socket.getSocket().read(byteBuffer)
+                            .get(socket.getTimeout(), TimeUnit.MILLISECONDS).intValue();
                 } catch (InterruptedException | ExecutionException
                         | TimeoutException e) {
                     throw new EOFException(sm.getString("iib.eof.error"));

==================================================
Nio2ServletInputStream.java
index 791dd66b5e..c06e6fc12b 100644
--- a/java/org/apache/coyote/http11/InternalNio2OutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNio2OutputBuffer.java
@@ -115,7 +115,7 @@ public class InternalNio2OutputBuffer extends AbstractOutputBuffer<Nio2Channel>
             public void completed(Integer nBytes, SocketWrapper<Nio2Channel> attachment) {
                 boolean notify = false;
                 synchronized (completionHandler) {
-                    if (nBytes < 0) {
+                    if (nBytes.intValue() < 0) {
                         failed(new IOException(sm.getString("iob.failedwrite")), attachment);
                         return;
                     }
@@ -162,7 +162,7 @@ public class InternalNio2OutputBuffer extends AbstractOutputBuffer<Nio2Channel>
             public void completed(Long nBytes, ByteBuffer[] attachment) {
                 boolean notify = false;
                 synchronized (completionHandler) {
-                    if (nBytes < 0) {
+                    if (nBytes.longValue() < 0) {
                         failed(new IOException(sm.getString("iob.failedwrite")), attachment);
                         return;
                     }
@@ -410,7 +410,7 @@ public class InternalNio2OutputBuffer extends AbstractOutputBuffer<Nio2Channel>
                     Nio2Endpoint.startInline();
                     if (bufferedWrites.size() > 0) {
                         // Gathering write of the main buffer plus all leftovers
-                        ArrayList<ByteBuffer> arrayList = new ArrayList<ByteBuffer>();
+                        ArrayList<ByteBuffer> arrayList = new ArrayList<>();
                         if (byteBuffer.hasRemaining()) {
                             arrayList.add(byteBuffer);
                         }

==================================================
Nio2ServletOutputStream.java
index 5dcb59c77c..0e07a34fd0 100644
--- a/java/org/apache/coyote/http11/upgrade/Nio2ServletInputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/Nio2ServletInputStream.java
@@ -45,13 +45,13 @@ public class Nio2ServletInputStream extends AbstractServletInputStream {
             @Override
             public void completed(Integer nBytes, SocketWrapper<Nio2Channel> attachment) {
                 synchronized (completionHandler) {
-                    if (nBytes < 0) {
+                    if (nBytes.intValue() < 0) {
                         failed(new ClosedChannelException(), attachment);
                         return;
                     }
                     readPending = false;
                 }
-                if (nBytes > 0) {
+                if (nBytes.intValue() > 0) {
                     if (!Nio2Endpoint.isInline()) {
                         try {
                             onDataAvailable();
@@ -205,7 +205,7 @@ public class Nio2ServletInputStream extends AbstractServletInputStream {
             flipped = false;
             try {
                 nRead = channel.read(readBuffer)
-                        .get(wrapper.getTimeout(), TimeUnit.MILLISECONDS);
+                        .get(wrapper.getTimeout(), TimeUnit.MILLISECONDS).intValue();
                 readPending = false;
             } catch (InterruptedException | ExecutionException
                     | TimeoutException e) {

==================================================
Nio2Channel.java
index 2ecd9d2d7f..6829698b54 100644
--- a/java/org/apache/coyote/http11/upgrade/Nio2ServletOutputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/Nio2ServletOutputStream.java
@@ -46,7 +46,7 @@ public class Nio2ServletOutputStream extends AbstractServletOutputStream<Nio2Cha
             @Override
             public void completed(Integer nBytes, SocketWrapper<Nio2Channel> attachment) {
                 synchronized (completionHandler) {
-                    if (nBytes < 0) {
+                    if (nBytes.intValue() < 0) {
                         failed(new ClosedChannelException(), attachment);
                         return;
                     }
@@ -122,7 +122,7 @@ public class Nio2ServletOutputStream extends AbstractServletOutputStream<Nio2Cha
             buffer.put(b, off, len);
             buffer.flip();
             try {
-                written = channel.write(buffer).get(writeTimeout, TimeUnit.MILLISECONDS);
+                written = channel.write(buffer).get(writeTimeout, TimeUnit.MILLISECONDS).intValue();
             } catch (InterruptedException | ExecutionException
                     | TimeoutException e) {
                 onError(e);

==================================================
Nio2Endpoint.java
index fe027fa973..fd9ce7de2e 100644
--- a/java/org/apache/tomcat/util/net/Nio2Channel.java
+++ b/java/org/apache/tomcat/util/net/Nio2Channel.java
@@ -199,6 +199,7 @@ public class Nio2Channel implements AsynchronousByteChannel {
         }
     };
 
+    @SuppressWarnings("unused")
     public Future<Boolean> flush()
             throws IOException {
         return DONE;

==================================================
SecureNio2Channel.java
index 110c1db918..bbefe77143 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -757,6 +757,7 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
             super(channel);
         }
 
+        @Override
         public void reset(Nio2Channel channel, long soTimeout) {
             super.reset(channel, soTimeout);
             upgradeInit = false;
@@ -794,6 +795,7 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
             long timeout = super.getTimeout();
             return (timeout > 0) ? timeout : Long.MAX_VALUE;
         }
+        @Override
         public void setUpgraded(boolean upgraded) {
             if (upgraded && !isUpgraded()) {
                 upgradeInit = true;
@@ -911,7 +913,7 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
 
         @Override
         public synchronized void completed(Integer nBytes, SocketWrapper<Nio2Channel> attachment) {
-            if (nBytes < 0) {
+            if (nBytes.intValue() < 0) {
                 failed(new ClosedChannelException(), attachment);
                 return;
             }
@@ -983,13 +985,18 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
             // If not using SSL and direct buffers are not used, the
             // idea of sendfile is to avoid memory copies, so allocate a
             // direct buffer
-            int BUFFER_SIZE;
+            int bufferSize;
             try {
-                BUFFER_SIZE = socket.getSocket().getIOChannel().getOption(StandardSocketOptions.SO_SNDBUF);
+                Integer bufferSizeInteger = socket.getSocket().getIOChannel().getOption(StandardSocketOptions.SO_SNDBUF);
+                if (bufferSizeInteger != null) {
+                    bufferSize = bufferSizeInteger.intValue();
+                } else {
+                    bufferSize = 8192;
+                }
             } catch (IOException e) {
-                BUFFER_SIZE = 8192;
+                bufferSize = 8192;
             }
-            buffer = ByteBuffer.allocateDirect(BUFFER_SIZE);
+            buffer = ByteBuffer.allocateDirect(bufferSize);
         } else {
             buffer = socket.getSocket().getBufHandler().getWriteBuffer();
         }
@@ -1008,7 +1015,7 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
 
                 @Override
                 public void completed(Integer nw, SendfileData attachment) {
-                    if (nw < 0) { // Reach the end of stream
+                    if (nw.intValue() < 0) { // Reach the end of stream
                         closeSocket(socket, SocketStatus.DISCONNECT);
                         try {
                             attachment.fchannel.close();
@@ -1018,8 +1025,8 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
                         return;
                     }
 
-                    attachment.pos += nw;
-                    attachment.length -= nw;
+                    attachment.pos += nw.intValue();
+                    attachment.length -= nw.intValue();
 
                     if (attachment.length <= 0) {
                         socket.setSendfileData(null);

==================================================
SocketProperties.java
index 08b8feb982..87054db11f 100644
--- a/java/org/apache/tomcat/util/net/SecureNio2Channel.java
+++ b/java/org/apache/tomcat/util/net/SecureNio2Channel.java
@@ -70,7 +70,7 @@ public class SecureNio2Channel extends Nio2Channel  {
         handshakeReadCompletionHandler = new CompletionHandler<Integer, SocketWrapper<Nio2Channel>>() {
             @Override
             public void completed(Integer result, SocketWrapper<Nio2Channel> attachment) {
-                if (result < 0) {
+                if (result.intValue() < 0) {
                     failed(new IOException("Error"), attachment);
                     return;
                 }
@@ -84,7 +84,7 @@ public class SecureNio2Channel extends Nio2Channel  {
         handshakeWriteCompletionHandler = new CompletionHandler<Integer, SocketWrapper<Nio2Channel>>() {
             @Override
             public void completed(Integer result, SocketWrapper<Nio2Channel> attachment) {
-                if (result < 0) {
+                if (result.intValue() < 0) {
                     failed(new IOException("Error"), attachment);
                     return;
                 }
@@ -157,17 +157,17 @@ public class SecureNio2Channel extends Nio2Channel  {
         @Override
         public Boolean get() throws InterruptedException,
                 ExecutionException {
-            int result = integer.get();
-            return result >= 0;
+            int result = integer.get().intValue();
+            return Boolean.valueOf(result >= 0);
         }
         @Override
         public Boolean get(long timeout, TimeUnit unit)
                 throws InterruptedException, ExecutionException,
                 TimeoutException {
-            int result = integer.get(timeout, unit);
-            return result >= 0;
+            int result = integer.get(timeout, unit).intValue();
+            return Boolean.valueOf(result >= 0);
         }
-    };
+    }
 
     /**
      * Flush the channel.
@@ -408,7 +408,7 @@ public class SecureNio2Channel extends Nio2Channel  {
         sslEngine.closeOutbound();
 
         try {
-            if (!flush().get(endpoint.getSoTimeout(), TimeUnit.MILLISECONDS)) {
+            if (!flush().get(endpoint.getSoTimeout(), TimeUnit.MILLISECONDS).booleanValue()) {
                 throw new IOException("Remaining data in the network buffer, can't send SSL close message, force a close with close(true) instead");
             }
         } catch (InterruptedException | ExecutionException | TimeoutException e) {
@@ -474,10 +474,10 @@ public class SecureNio2Channel extends Nio2Channel  {
         protected Integer unwrap(int netread) throws ExecutionException {
             //are we in the middle of closing or closed?
             if (closing || closed)
-                return -1;
+                return Integer.valueOf(-1);
             //did we reach EOF? if so send EOF up one layer.
             if (netread == -1)
-                return -1;
+                return Integer.valueOf(-1);
             //the data read
             int read = 0;
             //the SSL engine result
@@ -513,7 +513,7 @@ public class SecureNio2Channel extends Nio2Channel  {
                     throw new ExecutionException(new IOException("Unable to unwrap data, invalid status: " + unwrap.getStatus()));
                 }
             } while ((netInBuffer.position() != 0)); //continue to unwrapping as long as the input buffer has stuff
-            return (read);
+            return Integer.valueOf(read);
         }
     }
 
@@ -536,14 +536,14 @@ public class SecureNio2Channel extends Nio2Channel  {
         }
         @Override
         public Integer get() throws InterruptedException, ExecutionException {
-            int netread = integer.get();
+            int netread = integer.get().intValue();
             return unwrap(netread);
         }
         @Override
         public Integer get(long timeout, TimeUnit unit)
                 throws InterruptedException, ExecutionException,
                 TimeoutException {
-            int netread = integer.get(timeout, unit);
+            int netread = integer.get(timeout, unit).intValue();
             return unwrap(netread);
         }
     }
@@ -613,7 +613,7 @@ public class SecureNio2Channel extends Nio2Channel  {
                 throw new ExecutionException(t);
             }
             integer.get();
-            return written;
+            return Integer.valueOf(written);
         }
         @Override
         public Integer get(long timeout, TimeUnit unit)
@@ -623,7 +623,7 @@ public class SecureNio2Channel extends Nio2Channel  {
                 throw new ExecutionException(t);
             }
             integer.get(timeout, unit);
-            return written;
+            return Integer.valueOf(written);
         }
     }
 
@@ -649,7 +649,7 @@ public class SecureNio2Channel extends Nio2Channel  {
 
         @Override
         public void completed(Integer nBytes, A attach) {
-            if (nBytes < 0) {
+            if (nBytes.intValue() < 0) {
                 handler.failed(new ClosedChannelException(), attach);
                 return;
             }
@@ -686,7 +686,7 @@ public class SecureNio2Channel extends Nio2Channel  {
                     }
                 } while ((netInBuffer.position() != 0)); //continue to unwrapping as long as the input buffer has stuff
                 // If everything is OK, so complete
-                handler.completed(read, attach);
+                handler.completed(Integer.valueOf(read), attach);
             } catch (Exception e) {
                 // The operation must fails
                 handler.failed(e, attach);
@@ -704,15 +704,15 @@ public class SecureNio2Channel extends Nio2Channel  {
             final CompletionHandler<Integer, ? super A> handler) {
         //are we in the middle of closing or closed?
         if (closing || closed) {
-            handler.completed(-1, attachment);
+            handler.completed(Integer.valueOf(-1), attachment);
             return;
         }
         //did we finish our handshake?
         if (!handshakeComplete)
             throw new IllegalStateException("Handshake incomplete, you must complete handshake before reading data.");
-        ReadCompletionHandler<A> readCompletionHandler = new ReadCompletionHandler<A>(dst, handler);
+        ReadCompletionHandler<A> readCompletionHandler = new ReadCompletionHandler<>(dst, handler);
         if (netInBuffer.position() > 0 ) {
-            readCompletionHandler.completed(netInBuffer.position(), attachment);
+            readCompletionHandler.completed(Integer.valueOf(netInBuffer.position()), attachment);
         } else {
             sc.read(netInBuffer, timeout, unit, attachment, readCompletionHandler);
         }
@@ -746,12 +746,12 @@ public class SecureNio2Channel extends Nio2Channel  {
                     new CompletionHandler<Integer, A>() {
                 @Override
                 public void completed(Integer nBytes, A attach) {
-                    if (nBytes < 0) {
+                    if (nBytes.intValue() < 0) {
                         handler.failed(new ClosedChannelException(), attach);
                     } else {
                         // Call the handler completed method with the
                         // consumed bytes number
-                        handler.completed(written, attach);
+                        handler.completed(Integer.valueOf(written), attach);
                     }
                 }
                 @Override
@@ -795,11 +795,11 @@ public class SecureNio2Channel extends Nio2Channel  {
         }
         @Override
         public void completed(Integer nBytes, GatherState<A> attachment) {
-            if (nBytes < 0) {
+            if (nBytes.intValue() < 0) {
                 state.handler.failed(new ClosedChannelException(), state.attachment);
             } else {
                 if (state.pos == state.offset + state.length) {
-                    state.handler.completed(state.writeCount, state.attachment);
+                    state.handler.completed(Long.valueOf(state.writeCount), state.attachment);
                     return;
                 }
                 try {
@@ -859,7 +859,7 @@ public class SecureNio2Channel extends Nio2Channel  {
                 return;
             }
             // Write data to the channel
-            sc.write(netOutBuffer, timeout, unit, state, new GatherCompletionHandler<A>(state));
+            sc.write(netOutBuffer, timeout, unit, state, new GatherCompletionHandler<>(state));
         } catch (Throwable exp) {
             handler.failed(exp, attachment);
         }

==================================================
