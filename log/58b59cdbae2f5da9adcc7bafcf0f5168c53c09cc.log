58b59cdbae2f5da9adcc7bafcf0f5168c53c09cc
==================================================
getLastAccess() is only called from NIO so no need to call access() from
==================================================
Mark Emlyn
==================================================
Wed Nov 12 10:48:46 2014 +0000
==================================================
InternalAprOutputBuffer.java
getLastAccess() is only called from NIO so no need to call access() from
code that is not part of NIO.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1638745 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InternalNio2OutputBuffer.java
index 392f146302..262eebee45 100644
--- a/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
@@ -184,8 +184,6 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
             offset = offset + thisTime;
         }
 
-        wrapper.access();
-
         if (!isBlocking() && length>0) {
             // Buffer the remaining data
             addToBuffers(buf, offset, length);
@@ -208,8 +206,6 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
     protected synchronized boolean flushBuffer(boolean block)
             throws IOException {
 
-        wrapper.access();
-
         if (hasMoreDataToFlush()) {
             writeToSocket(block);
         }

==================================================
AprEndpoint.java
index 05ee47202e..6f324627d3 100644
--- a/java/org/apache/coyote/http11/InternalNio2OutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNio2OutputBuffer.java
@@ -294,8 +294,6 @@ public class InternalNio2OutputBuffer extends AbstractOutputBuffer<Nio2Channel>
 
         ByteBuffer writeByteBuffer = socket.getSocket().getBufHandler().getWriteBuffer();
 
-        socket.access();
-
         if (isBlocking()) {
             while (length > 0) {
                 int thisTime = transfer(buf, offset, length, writeByteBuffer);
@@ -416,8 +414,6 @@ public class InternalNio2OutputBuffer extends AbstractOutputBuffer<Nio2Channel>
         } else {
             synchronized (completionHandler) {
                 if (hasPermit || writePending.tryAcquire()) {
-                    //prevent timeout for async
-                    socket.access();
                     if (!flipped) {
                         byteBuffer.flip();
                         flipped = true;

==================================================
Nio2Endpoint.java
index be32f2b220..662fb5d28a 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -2275,7 +2275,6 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
                         closeSocket(socket.getSocket().longValue());
                         socket = null;
                     } else if (state == Handler.SocketState.LONG) {
-                        socket.access();
                         if (socket.isAsync()) {
                             waitingRequests.add(socket);
                         }
@@ -2337,12 +2336,10 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
                 closeSocket(socket.getSocket().longValue());
                 socket.reset(null, 1);
             } else if (state == Handler.SocketState.LONG) {
-                socket.access();
                 if (socket.isAsync()) {
                     waitingRequests.add(socket);
                 }
             } else if (state == Handler.SocketState.ASYNC_END) {
-                socket.access();
                 SocketProcessor proc = new SocketProcessor(socket,
                         SocketStatus.OPEN_READ);
                 getExecutor().execute(proc);

==================================================
