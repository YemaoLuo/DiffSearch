dd8d1e941d0675fb2faad315b5a0613711278a67
==================================================
Remove unused parameters
==================================================
Mark Emlyn
==================================================
Sat Oct 1 14:49:59 2011 +0000
==================================================
NioSender.java
Remove unused parameters

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1178005 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ParallelNioSender.java
index 8cedb54198..6330f18543 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioSender.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioSender.java
@@ -98,7 +98,7 @@ public class NioSender extends AbstractSender {
                 return false;
             }//end if
         } else if ( key.isWritable() ) {
-            boolean writecomplete = write(key);
+            boolean writecomplete = write();
             if ( writecomplete ) {
                 //we are completed, should we read an ack?
                 if ( waitForAck ) {
@@ -108,7 +108,7 @@ public class NioSender extends AbstractSender {
                     //if not, we are ready, setMessage will reregister us for another write interest
                     //do a health check, we have no way of verify a disconnected
                     //socket since we don't register for OP_READ on waitForAck=false
-                    read(key);//this causes overhead
+                    read();//this causes overhead
                     setRequestCount(getRequestCount()+1);
                     return true;
                 }
@@ -117,7 +117,7 @@ public class NioSender extends AbstractSender {
                 key.interestOps(key.interestOps()|SelectionKey.OP_WRITE);
             }//end if
         } else if ( key.isReadable() ) {
-            boolean readcomplete = read(key);
+            boolean readcomplete = read();
             if ( readcomplete ) {
                 setRequestCount(getRequestCount()+1);
                 return true;
@@ -160,7 +160,7 @@ public class NioSender extends AbstractSender {
 
 
 
-    protected boolean read(SelectionKey key) throws IOException {
+    protected boolean read() throws IOException {
         //if there is no message here, we are done
         if ( current == null ) return true;
         int read = isUdpBased()?dataChannel.read(readbuf) : socketChannel.read(readbuf);
@@ -183,7 +183,7 @@ public class NioSender extends AbstractSender {
     }
 
 
-    protected boolean write(SelectionKey key) throws IOException {
+    protected boolean write() throws IOException {
         if ( (!isConnected()) || (this.socketChannel==null && this.dataChannel==null)) {
             throw new IOException("NioSender is not connected, this should not occur.");
         }

==================================================
