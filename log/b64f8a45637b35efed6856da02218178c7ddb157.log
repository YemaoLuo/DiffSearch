b64f8a45637b35efed6856da02218178c7ddb157
==================================================
63182: Avoid extra notifications when using non container threads on read causing thread safety problems. Tentative fix, but the pattern is clearly causing a thread safety problem there. Also move ContainerMarkerThread, but leave the old location around for compatibility.
==================================================
Remy Maucherat
==================================================
Tue Feb 19 14:58:00 2019 +0000
==================================================
ContainerThreadMarker.java
63182: Avoid extra notifications when using non container threads on read causing thread safety problems. Tentative fix, but the pattern is clearly causing a thread safety problem there. Also move ContainerMarkerThread, but leave the old location around for compatibility.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1853886 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ContainerThreadMarker.java
index 617c24665c..0ba2ef0c66 100644
--- a/java/org/apache/coyote/ContainerThreadMarker.java
+++ b/java/org/apache/coyote/ContainerThreadMarker.java
@@ -24,22 +24,15 @@ package org.apache.coyote;
  */
 public class ContainerThreadMarker {
 
-    private static final ThreadLocal<Boolean> marker = new ThreadLocal<>();
-
     public static boolean isContainerThread() {
-        Boolean flag = marker.get();
-        if (flag == null) {
-            return false;
-        } else {
-            return flag.booleanValue();
-        }
+        return org.apache.tomcat.util.net.ContainerThreadMarker.isContainerThread();
     }
 
     public static void set() {
-        marker.set(Boolean.TRUE);
+        org.apache.tomcat.util.net.ContainerThreadMarker.set();
     }
 
     public static void clear() {
-        marker.set(Boolean.FALSE);
+        org.apache.tomcat.util.net.ContainerThreadMarker.clear();
     }
 }

==================================================
Nio2Endpoint.java
new file mode 100644
index 0000000000..2ab6f682d8
--- /dev/null
+++ b/java/org/apache/tomcat/util/net/ContainerThreadMarker.java
@@ -0,0 +1,45 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.util.net;
+
+/**
+ * Used to mark threads that have been allocated by the container to process
+ * data from an incoming connection. Application created threads are not
+ * container threads and neither are threads taken from the container thread
+ * pool to execute AsyncContext.start(Runnable).
+ */
+public class ContainerThreadMarker {
+
+    private static final ThreadLocal<Boolean> marker = new ThreadLocal<>();
+
+    public static boolean isContainerThread() {
+        Boolean flag = marker.get();
+        if (flag == null) {
+            return false;
+        } else {
+            return flag.booleanValue();
+        }
+    }
+
+    public static void set() {
+        marker.set(Boolean.TRUE);
+    }
+
+    public static void clear() {
+        marker.set(Boolean.FALSE);
+    }
+}

==================================================
TestNonBlockingAPI.java
index 1e3796be74..e7e1ad83d4 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -811,7 +811,7 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel,AsynchronousS
                     socketBufferHandler.configureReadBufferForRead();
                     nRead = Math.min(nRead, len);
                     socketBufferHandler.getReadBuffer().get(b, off, nRead);
-                } else if (nRead == 0 && !block) {
+                } else if (nRead == 0 && !block && ContainerThreadMarker.isContainerThread()) {
                     readInterest = true;
                 }
 
@@ -876,7 +876,7 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel,AsynchronousS
                     // data that was just read
                     if (nRead > 0) {
                         nRead = populateReadBuffer(to);
-                    } else if (nRead == 0 && !block) {
+                    } else if (nRead == 0 && !block && ContainerThreadMarker.isContainerThread()) {
                         readInterest = true;
                     }
                 }

==================================================
