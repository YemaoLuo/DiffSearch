b2351daa94b954b6cea753a88557c2139a21791c
==================================================
Fix some more deprecation warnings when building with Java 9.
==================================================
Mark Thomas
==================================================
Thu Oct 5 13:13:44 2017 +0000
==================================================
GenericNamingResourcesFactory.java
Fix some more deprecation warnings when building with Java 9.
Use of Class.newInstance() in jdbc-pool

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1811205 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ConnectionPool.java
index 38329d2f88..d947b17895 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/naming/GenericNamingResourcesFactory.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/naming/GenericNamingResourcesFactory.java
@@ -63,8 +63,7 @@ public class GenericNamingResourcesFactory implements ObjectFactory {
             ClassLoaderUtil.loadClass(
                 type,
                 GenericNamingResourcesFactory.class.getClassLoader(),
-                Thread.currentThread().getContextClassLoader())
-            .newInstance();
+                Thread.currentThread().getContextClassLoader()).getDeclaredConstructor().newInstance();
 
         while (refs.hasMoreElements()) {
             RefAddr addr = refs.nextElement();

==================================================
PoolProperties.java
index f880a75ea7..cee84b4db8 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -302,7 +302,7 @@ public class ConnectionPool {
             for (int i=proxies.length-1; i>=0; i--) {
                 try {
                     //create a new instance
-                    JdbcInterceptor interceptor = proxies[i].getInterceptorClass().newInstance();
+                    JdbcInterceptor interceptor = proxies[i].getInterceptorClass().getDeclaredConstructor().newInstance();
                     //configure properties
                     interceptor.setProperties(proxies[i].getProperties());
                     //setup the chain
@@ -415,7 +415,7 @@ public class ConnectionPool {
         PoolProperties.InterceptorDefinition[] proxies = getPoolProperties().getJdbcInterceptorsAsArray();
         for (int i=0; i<proxies.length; i++) {
             try {
-                JdbcInterceptor interceptor = proxies[i].getInterceptorClass().newInstance();
+                JdbcInterceptor interceptor = proxies[i].getInterceptorClass().getDeclaredConstructor().newInstance();
                 interceptor.setProperties(proxies[i].getProperties());
                 interceptor.poolClosed(this);
             }catch (Exception x) {
@@ -462,7 +462,7 @@ public class ConnectionPool {
                 if (log.isDebugEnabled()) {
                     log.debug("Creating interceptor instance of class:"+proxies[i].getInterceptorClass());
                 }
-                JdbcInterceptor interceptor = proxies[i].getInterceptorClass().newInstance();
+                JdbcInterceptor interceptor = proxies[i].getInterceptorClass().getDeclaredConstructor().newInstance();
                 interceptor.setProperties(proxies[i].getProperties());
                 interceptor.poolStarted(this);
             }catch (Exception x) {

==================================================
PooledConnection.java
index 96178e1dd1..6d826bfabf 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
@@ -773,16 +773,16 @@ public class PoolProperties implements PoolConfiguration, Cloneable, Serializabl
                 PoolProperties.class.getClassLoader(),
                 Thread.currentThread().getContextClassLoader()
             );
-            validator = validatorClass.newInstance();
+            validator = validatorClass.getDeclaredConstructor().newInstance();
         } catch (ClassNotFoundException e) {
             log.warn("The class "+className+" cannot be found.", e);
         } catch (ClassCastException e) {
             log.warn("The class "+className+" does not implement the Validator interface.", e);
-        } catch (InstantiationException e) {
-            log.warn("An object of class "+className+" cannot be instantiated. Make sure that "+
-                     "it includes an implicit or explicit no-arg constructor.", e);
         } catch (IllegalAccessException e) {
             log.warn("The class "+className+" or its no-arg constructor are inaccessible.", e);
+        } catch (ReflectiveOperationException | IllegalArgumentException | SecurityException e) {
+            log.warn("An object of class "+className+" cannot be instantiated. Make sure that "+
+                     "it includes an implicit or explicit no-arg constructor.", e);
         }
     }
 

==================================================
