d9023fb63990eea9c6d9fbf8b34744b576d413d6
==================================================
WebSocket 1.0 implementation part 10 of many
==================================================
Mark Emlyn
==================================================
Tue Dec 11 14:37:37 2012 +0000
==================================================
Constants.java
WebSocket 1.0 implementation part 10 of many
WsSession only needs to support one message handler of each type so store each individually rather than in a HashSet.
Add the handling for Ping and Close control messages to WsFrame.


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1420198 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WsFrame.java
index 95926f12e1..df0c8363b8 100644
--- a/java/org/apache/tomcat/websocket/Constants.java
+++ b/java/org/apache/tomcat/websocket/Constants.java
@@ -25,6 +25,14 @@ public class Constants {
 
     protected static final String SERVLET_NAME = WsServlet.class.getName();
 
+    // OP Codes
+    public static final byte OPCODE_CONTINUATION = 0x00;
+    public static final byte OPCODE_TEXT = 0x01;
+    public static final byte OPCODE_BINARY = 0x02;
+    public static final byte OPCODE_CLOSE = 0x08;
+    public static final byte OPCODE_PING = 0x09;
+    public static final byte OPCODE_PONG = 0x0A;
+
     private Constants() {
         // Hide default constructor
     }

==================================================
WsPingMessage.java
index c0121ccfdd..7fabc58e8a 100644
--- a/java/org/apache/tomcat/websocket/WsFrame.java
+++ b/java/org/apache/tomcat/websocket/WsFrame.java
@@ -18,6 +18,7 @@ package org.apache.tomcat.websocket;
 
 import java.io.EOFException;
 import java.io.IOException;
+import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
 
 import javax.servlet.ServletInputStream;
@@ -91,6 +92,10 @@ public class WsFrame {
     }
 
 
+    /**
+     * @return <code>true</code> if sufficient data was present to process all
+     *         of the initial header
+     */
     private boolean processInitialHeader() throws IOException {
         // Need at least two bytes of data to do this
         if (pos < 2) {
@@ -115,6 +120,10 @@ public class WsFrame {
     }
 
 
+    /**
+     * @return <code>true</code> if sufficient data was present to complete the
+     *         processing of the header
+     */
     private boolean processRemainingHeader() throws IOException {
         // Initial 2 bytes already read + 4 for the mask
         headerLength = 6;
@@ -155,8 +164,26 @@ public class WsFrame {
     }
 
 
-    private boolean processData() {
-        if (pos < (headerLength + payloadLength)) {
+    private boolean processData() throws IOException {
+        if (isControl()) {
+            if (!isPayloadComplete()) {
+                return false;
+            }
+            if (opCode == Constants.OPCODE_CLOSE) {
+                wsSession.close();
+            } else if (opCode == Constants.OPCODE_PING) {
+                wsSession.getPingMessageHandler().onMessage(
+                        new WsPingMessage(getPayload()));
+            } else if (opCode == Constants.OPCODE_PONG) {
+                // TODO
+                // Validate the PONG?
+            } else {
+                // TODO i18n
+                throw new UnsupportedOperationException();
+            }
+            return true;
+        }
+        if (isPayloadComplete()) {
             // TODO Check if partial messages supported
             if (inputBuffer.length - pos > 0) {
                 return false;
@@ -184,6 +211,24 @@ public class WsFrame {
     }
 
 
+    private boolean isPayloadComplete() {
+        return pos < (headerLength + payloadLength);
+    }
+
+    private ByteBuffer getPayload() {
+        ByteBuffer result;
+        if (isPayloadComplete()) {
+            result = ByteBuffer.allocate((int) payloadLength);
+            System.arraycopy(inputBuffer, headerLength, result.array(), 0,
+                    (int) payloadLength);
+        } else {
+            // TODO Handle partial payloads
+            result = null;
+        }
+
+        return result;
+    }
+
     protected static long byteArrayToLong(byte[] b, int start, int len)
             throws IOException {
 

==================================================
WsProtocolHandler.java
new file mode 100644
index 0000000000..a20a6469d1
--- /dev/null
+++ b/java/org/apache/tomcat/websocket/WsPingMessage.java
@@ -0,0 +1,35 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.websocket;
+
+import java.nio.ByteBuffer;
+
+import javax.websocket.PingMessage;
+
+public class WsPingMessage implements PingMessage {
+
+    private final ByteBuffer applicationData;
+
+    public WsPingMessage(ByteBuffer applicationData) {
+        this.applicationData = applicationData;
+    }
+
+    @Override
+    public ByteBuffer getApplicationData() {
+        return applicationData;
+    }
+}

==================================================
WsSession.java
index b0d15c7fb9..200e0ad8a8 100644
--- a/java/org/apache/tomcat/websocket/WsProtocolHandler.java
+++ b/java/org/apache/tomcat/websocket/WsProtocolHandler.java
@@ -38,7 +38,7 @@ public class WsProtocolHandler implements ProtocolHandler {
     public WsProtocolHandler(Endpoint ep) {
         this.ep = ep;
         applicationClassLoader = Thread.currentThread().getContextClassLoader();
-        wsSession = new WsSession();
+        wsSession = new WsSession(ep);
     }
 
     @Override

==================================================
