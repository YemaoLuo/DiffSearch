db85a65acfeda725a91ccb54cb201b5ad24967f6
==================================================
Fix IDE nags
==================================================
Mark Thomas
==================================================
Fri Dec 7 19:44:40 2018 +0000
==================================================
ExpiresFilter.java
Fix IDE nags

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1848418 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CollectedInfo.java
index 5b8e78424a..0801b0906d 100644
--- a/java/org/apache/catalina/filters/ExpiresFilter.java
+++ b/java/org/apache/catalina/filters/ExpiresFilter.java
@@ -1071,7 +1071,8 @@ public class ExpiresFilter extends FilterBase {
             try {
                 ints[i] = Integer.parseInt(intAsString);
             } catch (NumberFormatException e) {
-                throw new RuntimeException(sm.getString("expiresFilter.numberError", i, commaDelimitedInts));
+                throw new RuntimeException(sm.getString("expiresFilter.numberError",
+                        Integer.valueOf(i), commaDelimitedInts));
             }
         }
         return ints;

==================================================
TcpSender.java
index 3d69b552c8..c409898543 100644
--- a/java/org/apache/catalina/ha/backend/CollectedInfo.java
+++ b/java/org/apache/catalina/ha/backend/CollectedInfo.java
@@ -94,7 +94,8 @@ public class CollectedInfo {
             shost = null;
         }
         if (objName == null) {
-            throw new Exception(sm.getString("collectedInfo.noConnector", host, port));
+            throw new Exception(sm.getString("collectedInfo.noConnector",
+                    host, Integer.valueOf(port)));
         }
         this.port = iport;
         this.host = shost;

==================================================
FileMessageFactory.java
index 73d564e2c4..760e1a0b02 100644
--- a/java/org/apache/catalina/ha/backend/TcpSender.java
+++ b/java/org/apache/catalina/ha/backend/TcpSender.java
@@ -143,7 +143,7 @@ public class TcpSender
                 responseStatus = responseStatus.substring(responseStatus.indexOf(' ') + 1, responseStatus.indexOf(' ', responseStatus.indexOf(' ') + 1));
                 int status = Integer.parseInt(responseStatus);
                 if (status != 200) {
-                    log.error(sm.getString("tcpSender.responseErrorCode", status));
+                    log.error(sm.getString("tcpSender.responseErrorCode", Integer.valueOf(status)));
                     close(i);
                     continue;
                 }

==================================================
NonBlockingCoordinator.java
index eef8fb20c4..88b34f013b 100644
--- a/java/org/apache/catalina/ha/deploy/FileMessageFactory.java
+++ b/java/org/apache/catalina/ha/deploy/FileMessageFactory.java
@@ -245,7 +245,7 @@ public class FileMessageFactory {
         if (msg.getMessageNumber() <= lastMessageProcessed.get()) {
             // Duplicate of message already processed
             log.warn(sm.getString("fileMessageFactory.duplicateMessage", msg.getContextName(), msg.getFileName(),
-                    HexUtils.toHexString(msg.getData()), msg.getDataLength()));
+                    HexUtils.toHexString(msg.getData()), Integer.valueOf(msg.getDataLength())));
             return false;
         }
 
@@ -254,7 +254,7 @@ public class FileMessageFactory {
         if (previous != null) {
             // Duplicate of message not yet processed
             log.warn(sm.getString("fileMessageFactory.duplicateMessage", msg.getContextName(), msg.getFileName(),
-                    HexUtils.toHexString(msg.getData()), msg.getDataLength()));
+                    HexUtils.toHexString(msg.getData()), Integer.valueOf(msg.getDataLength())));
             return false;
         }
 
@@ -351,6 +351,7 @@ public class FileMessageFactory {
      * @throws Exception An error occurred
      * @deprecated
      */
+    @Deprecated
     public static void main(String[] args) throws Exception {
         System.out.println("Usage: FileMessageFactory fileToBeRead fileToBeWritten");
         System.out.println("Usage: This will make a copy of the file on the local file system");

==================================================
