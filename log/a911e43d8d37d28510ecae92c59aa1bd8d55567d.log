a911e43d8d37d28510ecae92c59aa1bd8d55567d
==================================================
Code clean-up for javax.el
==================================================
Mark Emlyn
==================================================
Thu Jul 12 16:40:55 2012 +0000
==================================================
BeanELResolver.java
Code clean-up for javax.el
 - Add final prompted by UCDetector
 - Java 7 use of <>

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1360806 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ELContext.java
index a1e8cc50e8..57c43b7ec3 100644
--- a/java/javax/el/BeanELResolver.java
+++ b/java/javax/el/BeanELResolver.java
@@ -61,7 +61,7 @@ public class BeanELResolver extends ELResolver {
     private final boolean readOnly;
 
     private final ConcurrentCache<String, BeanProperties> cache =
-        new ConcurrentCache<String, BeanProperties>(CACHE_SIZE);
+        new ConcurrentCache<>(CACHE_SIZE);
 
     public BeanELResolver() {
         this.readOnly = false;
@@ -218,7 +218,7 @@ public class BeanELResolver extends ELResolver {
 
         public BeanProperties(Class<?> type) throws ELException {
             this.type = type;
-            this.properties = new HashMap<String, BeanProperty>();
+            this.properties = new HashMap<>();
             try {
                 BeanInfo info = Introspector.getBeanInfo(this.type);
                 PropertyDescriptor[] pds = info.getPropertyDescriptors();
@@ -365,8 +365,8 @@ public class BeanELResolver extends ELResolver {
 
         public ConcurrentCache(int size) {
             this.size = size;
-            this.eden = new ConcurrentHashMap<K,V>(size);
-            this.longterm = new WeakHashMap<K,V>(size);
+            this.eden = new ConcurrentHashMap<>(size);
+            this.longterm = new WeakHashMap<>(size);
         }
 
         public V get(K key) {

==================================================
ExpressionFactory.java
index 0b0af42e59..e5b39db75f 100644
--- a/java/javax/el/ELContext.java
+++ b/java/javax/el/ELContext.java
@@ -55,7 +55,7 @@ public abstract class ELContext {
         }
 
         if (this.map == null) {
-            this.map = new HashMap<Class<?>, Object>();
+            this.map = new HashMap<>();
         }
 
         this.map.put(key, contextObject);

==================================================
ListELResolver.java
index d4fdf68dc7..03145590f3 100644
--- a/java/javax/el/ExpressionFactory.java
+++ b/java/javax/el/ExpressionFactory.java
@@ -55,8 +55,8 @@ public abstract class ExpressionFactory {
     private static final String PROPERTY_FILE;
 
     private static final CacheValue nullTcclFactory = new CacheValue();
-    private static ConcurrentMap<CacheKey, CacheValue> factoryCache
-        = new ConcurrentHashMap<CacheKey, CacheValue>();
+    private static final ConcurrentMap<CacheKey, CacheValue> factoryCache =
+            new ConcurrentHashMap<>();
 
     static {
         if (IS_SECURITY_ENABLED) {
@@ -240,7 +240,7 @@ public abstract class ExpressionFactory {
 
         public CacheKey(ClassLoader cl) {
             hash = cl.hashCode();
-            ref = new WeakReference<ClassLoader>(cl);
+            ref = new WeakReference<>(cl);
         }
 
         @Override

==================================================
MapELResolver.java
index 18a7adf691..4cf85e3cd2 100644
--- a/java/javax/el/ListELResolver.java
+++ b/java/javax/el/ListELResolver.java
@@ -29,7 +29,7 @@ public class ListELResolver extends ELResolver {
     private final boolean readOnly;
 
     private static final Class<?> UNMODIFIABLE =
-        Collections.unmodifiableList(new ArrayList<Object>()).getClass();
+        Collections.unmodifiableList(new ArrayList<>()).getClass();
 
     public ListELResolver() {
         this.readOnly = false;

==================================================
ResourceBundleELResolver.java
index a1fc543866..062cdce723 100644
--- a/java/javax/el/MapELResolver.java
+++ b/java/javax/el/MapELResolver.java
@@ -27,8 +27,8 @@ import java.util.Map;
 
 public class MapELResolver extends ELResolver {
 
-    private static final Class<?> UNMODIFIABLE = Collections.unmodifiableMap(
-            new HashMap<Object, Object>()).getClass();
+    private static final Class<?> UNMODIFIABLE =
+            Collections.unmodifiableMap(new HashMap<>()).getClass();
 
     private final boolean readOnly;
 
@@ -117,7 +117,7 @@ public class MapELResolver extends ELResolver {
     public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
         if (base instanceof Map<?, ?>) {
             Iterator<?> itr = ((Map<?, ?>) base).keySet().iterator();
-            List<FeatureDescriptor> feats = new ArrayList<FeatureDescriptor>();
+            List<FeatureDescriptor> feats = new ArrayList<>();
             Object key;
             FeatureDescriptor desc;
             while (itr.hasNext()) {

==================================================
