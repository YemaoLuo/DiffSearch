c79369cdd0224223dd92fb784a15acabaa510047
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=57142
==================================================
Mark Thomas
==================================================
Thu Nov 27 21:16:40 2014 +0000
==================================================
Generator.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=57142
Page imports need to be visible to EL

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1642233 13f79535-47bb-0310-9956-ffa450edef68



==================================================
PageInfo.java
index 8a4c88c58f..4f033da829 100644
--- a/java/org/apache/jasper/compiler/Generator.java
+++ b/java/org/apache/jasper/compiler/Generator.java
@@ -712,6 +712,34 @@ class Generator {
         out.printil("out = pageContext.getOut();");
         out.printil("_jspx_out = out;");
         out.println();
+
+        if (pageInfo.isELUsed()) {
+            // If EL is going to be used on this page then make sure that the
+            // EL Context is properly configured with the imports.
+            // The clarification provided in https://java.net/jira/browse/JSP-44
+            // is the the page import directive applies both to the scripting
+            // environment and to the EL environment.
+            out.printin("javax.el.ImportHandler _jspx_handler = pageContext.getELContext().getImportHandler();");
+            out.println();
+            for (String importName : pageInfo.getImports()) {
+                if (importName == null) {
+                    continue;
+                }
+                String trimmed = importName.trim();
+                if (trimmed.length() == 0) {
+                    continue;
+                }
+                if (trimmed.endsWith(".*")) {
+                    out.printin("_jspx_handler.importPackage(\"");
+                    out.print(trimmed.substring(0, trimmed.length() - 2));
+                    out.println("\");");
+                } else {
+                    out.printin("_jspx_handler.importClass(\"");
+                    out.print(trimmed);
+                    out.println("\");");
+                }
+            }
+        }
     }
 
     /**

==================================================
Validator.java
index b8948dd7f5..66cb5868b3 100644
--- a/java/org/apache/jasper/compiler/PageInfo.java
+++ b/java/org/apache/jasper/compiler/PageInfo.java
@@ -72,6 +72,7 @@ class PageInfo {
 
     private String isELIgnoredValue;
     private boolean isELIgnored = false;
+    private boolean isELUsed = false;
 
     // JSP 2.1
     private String deferredSyntaxAllowedAsLiteralValue;
@@ -677,6 +678,27 @@ class PageInfo {
         return isELIgnored;
     }
 
+    /**
+     * Marks the current page as using EL. This allows an optimisation when
+     * generating the page. The imports need to be added to the EL Context but
+     * this is wasteful if the EL Context is never going to be used. The
+     * associated field allows the Generator to determine whether or not to
+     * configure the imports.
+     */
+    public void setELUsed() {
+        isELUsed = true;
+    }
+
+    /**
+     * Is expression language used on this page.
+     *
+     * @return <code>true</code> if expression language is used, otherwise
+     *         <code>false</code>
+     */
+    public boolean isELUsed() {
+        return isELUsed;
+    }
+
     public void putNonCustomTagPrefix(String prefix, Mark where) {
         nonCustomTagPrefixMap.put(prefix, where);
     }

==================================================
TestELInJsp.java
index 6bbc900c78..a74fc47783 100644
--- a/java/org/apache/jasper/compiler/Validator.java
+++ b/java/org/apache/jasper/compiler/Validator.java
@@ -730,6 +730,10 @@ class Validator {
             if (pageInfo.isELIgnored())
                 return;
 
+            // EL is known to be used on this page. Mark the PageInfo
+            // accordingly.
+            pageInfo.setELUsed();
+
             // JSP.2.2 - '#{' not allowed in template text
             if (n.getType() == '#') {
                 if (!pageInfo.isDeferredSyntaxAllowedAsLiteral()) {
@@ -1120,6 +1124,12 @@ class Validator {
                     }
                 }
 
+                if (elExpression) {
+                    // EL is known to be used on this page. Mark the PageInfo
+                    // accordingly.
+                    pageInfo.setELUsed();
+                }
+
                 boolean expression = runtimeExpression || elExpression;
 
                 // When attribute is not an expression,
@@ -1376,6 +1386,9 @@ class Validator {
 
                         if (el.containsEL()) {
                             validateFunctions(el, n);
+                            // EL is known to be used on this page. Mark the
+                            // PageInfo accordingly.
+                            pageInfo.setELUsed();
                         } else {
                             // Get text with \$ and \# escaping removed.
                             // Should be a single Text node

==================================================
