1827fcc475edca20646874636b7900d9f9ed2a15
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63205
==================================================
Mark Thomas
==================================================
Fri Mar 1 22:18:45 2019 +0000
==================================================
SSLUtilBase.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63205

Work-around the known JRE bug
(https://bugs.openjdk.java.net/browse/JDK-8157404) by copying the
InputStream for a KeyStore into memory and then loading the KeyStore
from the in-memory copy.


==================================================
KeyStoreUtil.java
index 5700622606..848f12d82e 100644
--- a/java/org/apache/tomcat/util/net/SSLUtilBase.java
+++ b/java/org/apache/tomcat/util/net/SSLUtilBase.java
@@ -62,6 +62,7 @@ import org.apache.tomcat.util.net.SSLHostConfig.CertificateVerification;
 import org.apache.tomcat.util.net.jsse.JSSEKeyManager;
 import org.apache.tomcat.util.net.jsse.PEMFile;
 import org.apache.tomcat.util.res.StringManager;
+import org.apache.tomcat.util.security.KeyStoreUtil;
 
 /**
  * Common base class for {@link SSLUtil} implementations.
@@ -205,7 +206,7 @@ public abstract class SSLUtilBase implements SSLUtil {
                         "JKS".equalsIgnoreCase(type) || "PKCS12".equalsIgnoreCase(type))) {
                     storePass = pass.toCharArray();
                 }
-                ks.load(istream, storePass);
+                KeyStoreUtil.load(ks, istream, storePass);
             }
         } catch (FileNotFoundException fnfe) {
             throw fnfe;

==================================================
WsWebSocketContainer.java
new file mode 100644
index 0000000000..65bb5d7c9c
--- /dev/null
+++ b/java/org/apache/tomcat/util/security/KeyStoreUtil.java
@@ -0,0 +1,69 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.util.security;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.security.KeyStore;
+import java.security.NoSuchAlgorithmException;
+import java.security.cert.CertificateException;
+
+public class KeyStoreUtil {
+
+    private KeyStoreUtil() {
+        // Utility class
+    }
+
+    /**
+     * Loads a KeyStore from an InputStream working around the known JDK bug
+     * https://bugs.openjdk.java.net/browse/JDK-8157404.
+     *
+     * @param keystore The KeyStore to load from the InputStream
+     * @param is The InputStream to use to populate the KeyStore
+     * @param storePass The password to access the KeyStore
+     *
+     * @throws IOException
+     *              If an I/O occurs reading from the given InputStream
+     * @throws CertificateException
+     *              If one or more certificates can't be loaded into the
+     *              KeyStore
+     * @throws NoSuchAlgorithmException
+     *              If the algorithm specified to validate the integrity of the
+     *              KeyStore cannot be found
+     */
+    public static void load(KeyStore keystore, InputStream is, char[] storePass)
+            throws NoSuchAlgorithmException, CertificateException, IOException {
+        if (is == null) {
+            keystore.load(null, storePass);
+        } else {
+            ByteArrayOutputStream baos = new ByteArrayOutputStream();
+            byte[] buf = new byte[8192];
+            int numRead;
+            while ((numRead = is.read(buf)) >= 0) {
+                baos.write(buf, 0, numRead);
+            }
+            baos.close();
+            // Don't close is. That remains the callers responsibilty.
+
+            ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
+
+            keystore.load(bais, storePass);
+        }
+    }
+}

==================================================
