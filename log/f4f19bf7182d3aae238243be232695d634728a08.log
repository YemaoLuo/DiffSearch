f4f19bf7182d3aae238243be232695d634728a08
==================================================
With removal of BIO, all endpoints support polling
==================================================
Mark Emlyn
==================================================
Tue Nov 4 16:13:55 2014 +0000
==================================================
AbstractHttp11Processor.java
With removal of BIO, all endpoints support polling

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1636631 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractHttp11Protocol.java
index 297d94dc7a..f22e556ac7 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -973,11 +973,7 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
         openSocket = false;
         sendfileInProgress = false;
         readComplete = true;
-        if (endpoint.getUsePolling()) {
-            keptAlive = false;
-        } else {
-            keptAlive = socketWrapper.isKeptAlive();
-        }
+        keptAlive = false;
 
         if (disableKeepAlive()) {
             socketWrapper.setKeepAliveLeft(0);

==================================================
AbstractEndpoint.java
index 866472e536..2c1d43a30c 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -16,7 +16,6 @@
  */
 package org.apache.coyote.http11;
 
-
 import org.apache.coyote.AbstractProtocol;
 
 public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {

==================================================
AprEndpoint.java
index 2ac8f9c281..0b650c98b4 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -821,7 +821,6 @@ public abstract class AbstractEndpoint<S> {
     // Some of these are always hard-coded, some are hard-coded to false (i.e.
     // the endpoint does not support them) and some are configurable.
     public abstract boolean getUseSendfile();
-    public abstract boolean getUsePolling();
 
     protected LimitLatch initializeConnectionLatch() {
         if (maxConnections==-1) return null;

==================================================
Nio2Endpoint.java
index a4275701b8..8d7942442a 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -159,10 +159,6 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
     public boolean getUseSendfile() { return useSendfile; }
 
 
-    @Override
-    public boolean getUsePolling() { return true; } // Always supported
-
-
     /**
      * Sendfile thread count.
      */

==================================================
NioEndpoint.java
index 9f742ff02e..dd8e8e7f5b 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -151,9 +151,6 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
     public Handler getHandler() { return handler; }
 
 
-    @Override
-    public boolean getUsePolling() { return true; } // Always supported
-
     public void setSocketProperties(SocketProperties socketProperties) {
         this.socketProperties = socketProperties;
     }

==================================================
