1677d9dda288da801deeed3bfc7282fca002e07c
==================================================
use the request processor to see if we are doing the action during a call or not
==================================================
Filip Hanik
==================================================
Fri Aug 31 21:23:30 2007 +0000
==================================================
CometEventImpl.java
use the request processor to see if we are doing the action during a call or not


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@571592 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CoyoteAdapter.java
index cfac7a2305..25f2f73385 100644
--- a/java/org/apache/catalina/connector/CometEventImpl.java
+++ b/java/org/apache/catalina/connector/CometEventImpl.java
@@ -45,7 +45,6 @@ public class CometEventImpl implements CometEvent {
         this.response = response;
         //default behavior is to only listen for read events
         register(CometOperation.OP_READ);
-        setWorkerThread();
     }
 
 
@@ -85,10 +84,6 @@ public class CometEventImpl implements CometEvent {
      */
     protected boolean blocking = true;
 
-    protected WorkerThreadCheck threadCheck = new WorkerThreadCheck();
-
-    private static final Object threadCheckHolder = new Object();
-    
     // --------------------------------------------------------- Public Methods
 
     /**
@@ -154,7 +149,6 @@ public class CometEventImpl implements CometEvent {
     }
     
     public void configureBlocking(boolean blocking) throws IllegalStateException {
-        checkWorkerThread();
         if ( getEventType() != EventType.BEGIN ) throw new IllegalStateException("Can only be configured during the BEGIN event.");
         MutableBoolean bool = new MutableBoolean(blocking);
         request.action(ActionCode.ACTION_COMET_CONFIGURE_BLOCKING,bool);
@@ -191,29 +185,9 @@ public class CometEventImpl implements CometEvent {
         return buf.toString();
     }
 
-    protected void setWorkerThread() {
-        threadCheck.set(threadCheckHolder);
-    }
-    
-    protected void unsetWorkerThread() {
-        threadCheck.set(null);
-    }
-
-    protected void checkWorkerThread() throws IllegalStateException {
-        //throw exception if not on worker thread
-        if ( !(threadCheck.get() == threadCheckHolder) ) 
-            throw new IllegalStateException("The operation can only be performed when invoked by a Tomcat worker thread.");
-    }
-    
     protected Integer translate(int op) {
         return new Integer(op);
     }
     
-    //inner class used to keep track if the current thread is a worker thread.
-    private static class WorkerThreadCheck extends ThreadLocal {
-        
-    }
-    
-    
 
 }

==================================================
Http11NioProcessor.java
index 4f1e3813ab..268302e510 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -121,8 +121,6 @@ public class CoyoteAdapter
             boolean read = false;
             CometEvent event = request.getEvent();
             try {
-                if ( event!=null && (event instanceof CometEventImpl)) 
-                    ((CometEventImpl)event).setWorkerThread();
                 if (status == SocketStatus.OPEN_CALLBACK) {
                     if (response.isClosed()) {
                         // The event has been closed asynchronously, so call end instead of
@@ -243,9 +241,6 @@ public class CoyoteAdapter
                 error = true;
                 return false;
             } finally {
-                if ( event!=null && (event instanceof CometEventImpl)) 
-                    ((CometEventImpl)event).unsetWorkerThread();
-
                 req.getRequestProcessor().setWorkerThreadName(null);
                 // Recycle the wrapper request and response
                 if (error || response.isClosed() || !request.isComet()) {
@@ -340,9 +335,6 @@ public class CoyoteAdapter
         } catch (Throwable t) {
             log.error(sm.getString("coyoteAdapter.service"), t);
         } finally {
-            if ( event!=null && (event instanceof CometEventImpl)) 
-                ((CometEventImpl)event).unsetWorkerThread();
-
             req.getRequestProcessor().setWorkerThreadName(null);
             // Recycle the wrapper request and response
             if (!comet) {

==================================================
