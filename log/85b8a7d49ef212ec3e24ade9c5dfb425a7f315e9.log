85b8a7d49ef212ec3e24ade9c5dfb425a7f315e9
==================================================
Pull up protocol field and createProcessor()
==================================================
Mark Thomas
==================================================
Sun Nov 23 22:51:19 2014 +0000
==================================================
AbstractAjpProtocol.java
Pull up protocol field and createProcessor()

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1641288 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpAprProtocol.java
index 80d7db3347..09c7345920 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -56,6 +56,17 @@ public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
     }
 
 
+    /**
+     * {@inheritDoc}
+     *
+     * Overridden to make getter accessible to other classes in this package.
+     */
+    @Override
+    protected AbstractEndpoint<S> getEndpoint() {
+        return super.getEndpoint();
+    }
+
+
     // ------------------------------------------------- AJP specific properties
     // ------------------------------------------ managed in the ProtocolHandler
 
@@ -103,6 +114,27 @@ public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
     protected abstract static class AbstractAjpConnectionHandler<S>
             extends AbstractConnectionHandler<S,AjpProcessor<S>> {
 
+        private final AbstractAjpProtocol<S> proto;
+
+        public AbstractAjpConnectionHandler(AbstractAjpProtocol<S> proto) {
+            this.proto = proto;
+        }
+
+        @Override
+        protected AbstractAjpProtocol<S> getProtocol() {
+            return proto;
+        }
+
+
+        @Override
+        protected AjpProcessor<S> createProcessor() {
+            AjpProcessor<S> processor =
+                    new AjpProcessor<>(proto.getPacketSize(), proto.getEndpoint());
+            proto.configureProcessor(processor);
+            register(processor);
+            return processor;
+        }
+
         @Override
         protected void initSsl(SocketWrapperBase<S> socket, Processor<S> processor) {
             // NOOP for AJP

==================================================
AjpNio2Protocol.java
index cf980a536c..59c4a936e9 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -16,7 +16,6 @@
  */
 package org.apache.coyote.ajp;
 
-import org.apache.coyote.AbstractProtocol;
 import org.apache.coyote.Processor;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -31,7 +30,6 @@ import org.apache.tomcat.util.net.SocketWrapperBase;
  */
 public class AjpAprProtocol extends AbstractAjpProtocol<Long> {
 
-
     private static final Log log = LogFactory.getLog(AjpAprProtocol.class);
 
     @Override
@@ -63,7 +61,6 @@ public class AjpAprProtocol extends AbstractAjpProtocol<Long> {
 
     // ----------------------------------------------------- Instance Variables
 
-
     /**
      * Connection handler for AJP.
      */
@@ -72,7 +69,6 @@ public class AjpAprProtocol extends AbstractAjpProtocol<Long> {
 
     // --------------------------------------------------------- Public Methods
 
-
     public int getPollTime() { return ((AprEndpoint)getEndpoint()).getPollTime(); }
     public void setPollTime(int pollTime) { ((AprEndpoint)getEndpoint()).setPollTime(pollTime); }
 
@@ -91,20 +87,12 @@ public class AjpAprProtocol extends AbstractAjpProtocol<Long> {
 
     // --------------------------------------  AjpConnectionHandler Inner Class
 
-
     protected static class AjpConnectionHandler
             extends AbstractAjpConnectionHandler<Long>
             implements Handler {
 
-        protected final AjpAprProtocol proto;
-
         public AjpConnectionHandler(AjpAprProtocol proto) {
-            this.proto = proto;
-        }
-
-        @Override
-        protected AbstractProtocol<Long> getProtocol() {
-            return proto;
+            super(proto);
         }
 
         @Override
@@ -123,20 +111,10 @@ public class AjpAprProtocol extends AbstractAjpProtocol<Long> {
             processor.recycle(isSocketClosing);
             recycledProcessors.push(processor);
             if (addToPoller) {
-                ((AprEndpoint)proto.getEndpoint()).getPoller().add(
+                ((AprEndpoint)getProtocol().getEndpoint()).getPoller().add(
                         socket.getSocket().longValue(),
-                        proto.getEndpoint().getKeepAliveTimeout(), true, false);
+                        getProtocol().getEndpoint().getKeepAliveTimeout(), true, false);
             }
         }
-
-
-        @Override
-        protected AjpProcessor<Long> createProcessor() {
-            AjpProcessor<Long> processor =
-                    new AjpProcessor<>(proto.getPacketSize(), proto.getEndpoint());
-            proto.configureProcessor(processor);
-            register(processor);
-            return processor;
-        }
     }
 }

==================================================
AjpNioProtocol.java
index 9307a5948e..271f5b0f71 100644
--- a/java/org/apache/coyote/ajp/AjpNio2Protocol.java
+++ b/java/org/apache/coyote/ajp/AjpNio2Protocol.java
@@ -18,7 +18,6 @@ package org.apache.coyote.ajp;
 
 import javax.net.ssl.SSLEngine;
 
-import org.apache.coyote.AbstractProtocol;
 import org.apache.coyote.Processor;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -35,7 +34,6 @@ import org.apache.tomcat.util.net.SocketWrapperBase;
  */
 public class AjpNio2Protocol extends AbstractAjpProtocol<Nio2Channel> {
 
-
     private static final Log log = LogFactory.getLog(AjpNio2Protocol.class);
 
     @Override
@@ -50,7 +48,6 @@ public class AjpNio2Protocol extends AbstractAjpProtocol<Nio2Channel> {
 
     // ------------------------------------------------------------ Constructor
 
-
     public AjpNio2Protocol() {
         super(new Nio2Endpoint());
         cHandler = new AjpConnectionHandler(this);
@@ -60,7 +57,6 @@ public class AjpNio2Protocol extends AbstractAjpProtocol<Nio2Channel> {
 
     // ----------------------------------------------------- Instance Variables
 
-
     /**
      * Connection handler for AJP.
      */
@@ -77,20 +73,12 @@ public class AjpNio2Protocol extends AbstractAjpProtocol<Nio2Channel> {
 
     // --------------------------------------  AjpConnectionHandler Inner Class
 
-
     protected static class AjpConnectionHandler
             extends AbstractAjpConnectionHandler<Nio2Channel>
             implements Handler {
 
-        protected final AjpNio2Protocol proto;
-
         public AjpConnectionHandler(AjpNio2Protocol proto) {
-            this.proto = proto;
-        }
-
-        @Override
-        protected AbstractProtocol<Nio2Channel> getProtocol() {
-            return proto;
+            super(proto);
         }
 
         @Override
@@ -135,15 +123,6 @@ public class AjpNio2Protocol extends AbstractAjpProtocol<Nio2Channel> {
             recycledProcessors.push(processor);
         }
 
-        @Override
-        protected AjpProcessor<Nio2Channel> createProcessor() {
-            AjpProcessor<Nio2Channel> processor =
-                    new AjpProcessor<>(proto.getPacketSize(), proto.getEndpoint());
-            proto.configureProcessor(processor);
-            register(processor);
-            return processor;
-        }
-
         @Override
         public void onCreateSSLEngine(SSLEngine engine) {
         }
@@ -151,7 +130,7 @@ public class AjpNio2Protocol extends AbstractAjpProtocol<Nio2Channel> {
         @Override
         public void closeAll() {
             for (Nio2Channel channel : connections.keySet()) {
-                ((Nio2Endpoint) proto.getEndpoint()).closeSocket(channel.getSocket());
+                ((Nio2Endpoint) getProtocol().getEndpoint()).closeSocket(channel.getSocket());
             }
         }
     }

==================================================
