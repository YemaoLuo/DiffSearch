c0426acdd090d29a5a3e8ed337e7c726a0d0814c
==================================================
Add methods of get the idle time from last client access time to org.apache.catalina.Session. 
==================================================
Keiichi Fujino
==================================================
Wed Mar 12 05:04:06 2014 +0000
==================================================
Session.java
Add methods of get the idle time from last client access time to org.apache.catalina.Session. 

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1576582 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DeltaSession.java
index 68b7803d85..98ef804879 100644
--- a/java/org/apache/catalina/Session.java
+++ b/java/org/apache/catalina/Session.java
@@ -165,6 +165,17 @@ public interface Session {
      */
     public long getLastAccessedTimeInternal();
 
+    /**
+     * Return the idle time (in milliseconds) from last client access time.
+     */
+    public long getIdleTime();
+
+    /**
+     * Return the idle time from last client access time without invalidation check
+     * @see #getIdleTime()
+     */
+    public long getIdleTimeInternal();
+
     /**
      * Return the Manager within which this Session is valid.
      */

==================================================
DummyProxySession.java
index b9537f0d2f..ee5dcc1d98 100644
--- a/java/org/apache/catalina/ha/session/DeltaSession.java
+++ b/java/org/apache/catalina/ha/session/DeltaSession.java
@@ -386,13 +386,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
             return true;
         }
         if (maxInactiveInterval > 0) {
-            long timeNow = System.currentTimeMillis();
-            int timeIdle;
-            if (LAST_ACCESS_AT_START) {
-                timeIdle = (int) ((timeNow - lastAccessedTime) / 1000L);
-            } else {
-                timeIdle = (int) ((timeNow - thisAccessedTime) / 1000L);
-            }
+            int timeIdle = (int) (getIdleTimeInternal() / 1000L);
             if (isPrimarySession()) {
                 if (timeIdle >= maxInactiveInterval) {
                     expire(true);

==================================================
ManagerServlet.java
index b7f143ce30..63d930e720 100644
--- a/java/org/apache/catalina/manager/DummyProxySession.java
+++ b/java/org/apache/catalina/manager/DummyProxySession.java
@@ -88,6 +88,16 @@ public class DummyProxySession implements Session {
         return 0;
     }
 
+    @Override
+    public long getIdleTime() {
+        return 0;
+    }
+
+    @Override
+    public long getIdleTimeInternal() {
+        return 0;
+    }
+
     @Override
     public Manager getManager() {
         return null;

==================================================
PersistentManagerBase.java
index 76525e1a6d..4416f1509d 100644
--- a/java/org/apache/catalina/manager/ManagerServlet.java
+++ b/java/org/apache/catalina/manager/ManagerServlet.java
@@ -45,7 +45,6 @@ import org.apache.catalina.Container;
 import org.apache.catalina.ContainerServlet;
 import org.apache.catalina.Context;
 import org.apache.catalina.Engine;
-import org.apache.catalina.Globals;
 import org.apache.catalina.Host;
 import org.apache.catalina.Manager;
 import org.apache.catalina.Server;
@@ -157,19 +156,6 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
 
     private static final long serialVersionUID = 1L;
 
-    protected static final boolean LAST_ACCESS_AT_START;
-
-    static {
-        String lastAccessAtStart = System.getProperty(
-                "org.apache.catalina.session.StandardSession.LAST_ACCESS_AT_START");
-        if (lastAccessAtStart == null) {
-            LAST_ACCESS_AT_START = Globals.STRICT_SERVLET_COMPLIANCE;
-        } else {
-            LAST_ACCESS_AT_START =
-                Boolean.valueOf(lastAccessAtStart).booleanValue();
-        }
-    }
-
     // ----------------------------------------------------- Instance Variables
 
 
@@ -1181,14 +1167,8 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             int [] timeout = new int[maxCount];
             int notimeout = 0;
             int expired = 0;
-            long now = System.currentTimeMillis();
             for (int i = 0; i < sessions.length; i++) {
-                int time;
-                if (LAST_ACCESS_AT_START) {
-                    time = (int) ((now - sessions[i].getLastAccessedTimeInternal()) / 1000L);
-                } else {
-                    time = (int) ((now - sessions[i].getThisAccessedTimeInternal()) / 1000L);
-                }
+                int time = (int) (sessions[i].getIdleTimeInternal() / 1000L);
                 if (idle >= 0 && time >= idle*60) {
                     sessions[i].expire();
                     expired++;

==================================================
StandardSession.java
index 6afeab6350..a562757c92 100644
--- a/java/org/apache/catalina/session/PersistentManagerBase.java
+++ b/java/org/apache/catalina/session/PersistentManagerBase.java
@@ -889,7 +889,6 @@ public abstract class PersistentManagerBase extends ManagerBase
             return;
 
         Session sessions[] = findSessions();
-        long timeNow = System.currentTimeMillis();
 
         // Swap out all sessions idle longer than maxIdleSwap
         if (maxIdleSwap >= 0) {
@@ -898,12 +897,7 @@ public abstract class PersistentManagerBase extends ManagerBase
                 synchronized (session) {
                     if (!session.isValid())
                         continue;
-                    int timeIdle;
-                    if (StandardSession.LAST_ACCESS_AT_START) {
-                        timeIdle = (int) ((timeNow - session.getLastAccessedTime()) / 1000L);
-                    } else {
-                        timeIdle = (int) ((timeNow - session.getThisAccessedTime()) / 1000L);
-                    }
+                    int timeIdle = (int) (session.getIdleTime() / 1000L);
                     if (timeIdle > maxIdleSwap && timeIdle > minIdleSwap) {
                         if (session.accessCount != null &&
                                 session.accessCount.get() > 0) {
@@ -948,17 +942,11 @@ public abstract class PersistentManagerBase extends ManagerBase
                  Integer.valueOf(sessions.length)));
 
         int toswap = sessions.length - getMaxActiveSessions();
-        long timeNow = System.currentTimeMillis();
 
         for (int i = 0; i < sessions.length && toswap > 0; i++) {
             StandardSession session =  (StandardSession) sessions[i];
             synchronized (session) {
-                int timeIdle;
-                if (StandardSession.LAST_ACCESS_AT_START) {
-                    timeIdle = (int) ((timeNow - session.getLastAccessedTime()) / 1000L);
-                } else {
-                    timeIdle = (int) ((timeNow - session.getThisAccessedTime()) / 1000L);
-                }
+                int timeIdle = (int) (session.getIdleTime() / 1000L);
                 if (timeIdle > minIdleSwap) {
                     if (session.accessCount != null &&
                             session.accessCount.get() > 0) {
@@ -992,7 +980,6 @@ public abstract class PersistentManagerBase extends ManagerBase
             return;
 
         Session sessions[] = findSessions();
-        long timeNow = System.currentTimeMillis();
 
         // Back up all sessions idle longer than maxIdleBackup
         if (maxIdleBackup >= 0) {
@@ -1001,12 +988,7 @@ public abstract class PersistentManagerBase extends ManagerBase
                 synchronized (session) {
                     if (!session.isValid())
                         continue;
-                    int timeIdle;
-                    if (StandardSession.LAST_ACCESS_AT_START) {
-                        timeIdle = (int) ((timeNow - session.getLastAccessedTime()) / 1000L);
-                    } else {
-                        timeIdle = (int) ((timeNow - session.getThisAccessedTime()) / 1000L);
-                    }
+                    int timeIdle = (int) (session.getIdleTime() / 1000L);
                     if (timeIdle > maxIdleBackup) {
                         if (log.isDebugEnabled())
                             log.debug(sm.getString

==================================================
