bdb3c4589fb28ca121c032dafaa0170cb29ee7eb
==================================================
Remove some unnecessary restrictions. Aligns with Servlet 6.0
==================================================
Mark Thomas
==================================================
Thu Nov 18 16:48:34 2021 +0000
==================================================
ServletContext.java
Remove some unnecessary restrictions. Aligns with Servlet 6.0


==================================================
StandardContext.java
index 6a61c2d9ee..8f93735163 100644
--- a/java/jakarta/servlet/ServletContext.java
+++ b/java/jakarta/servlet/ServletContext.java
@@ -121,14 +121,6 @@ public interface ServletContext {
      *
      * @return The major version declared in web.xml
      *
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
-     *
      * @since Servlet 3.0
      */
     public int getEffectiveMajorVersion();
@@ -139,14 +131,6 @@ public interface ServletContext {
      *
      * @return The minor version declared in web.xml
      *
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
-     *
      * @since Servlet 3.0
      */
     public int getEffectiveMinorVersion();
@@ -795,15 +779,10 @@ public interface ServletContext {
      * SessionTrackingMode#SSL} is supported if at least one of the connectors
      * used by this context has the attribute <code>secure</code> set to
      * <code>true</code>.
+     *
      * @return The set of default session tracking modes for this web
      *         application
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
+     *
      * @since Servlet 3.0
      */
     public Set<SessionTrackingMode> getDefaultSessionTrackingModes();
@@ -811,15 +790,10 @@ public interface ServletContext {
     /**
      * Obtains the currently enabled session tracking modes for this web
      * application.
+     *
      * @return The value supplied via {@link #setSessionTrackingModes(Set)} if
      *         one was previously set, else return the defaults
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
+     *
      * @since Servlet 3.0
      */
     public Set<SessionTrackingMode> getEffectiveSessionTrackingModes();
@@ -887,13 +861,7 @@ public interface ServletContext {
 
     /**
      * @return TODO
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
+     *
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     public JspConfigDescriptor getJspConfigDescriptor();
@@ -903,15 +871,9 @@ public interface ServletContext {
      *
      * @return The associated web application class loader
      *
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
      * @throws SecurityException if access to the class loader is prevented by a
      *         SecurityManager
+     *
      * @since Servlet 3.0
      */
     public ClassLoader getClassLoader();
@@ -940,6 +902,7 @@ public interface ServletContext {
      *
      * @return The primary name of the virtual host on which this context is
      *         deployed
+     *
      * @since Servlet 3.1
      */
     public String getVirtualServerName();
@@ -949,14 +912,6 @@ public interface ServletContext {
      *
      * @return The current default session timeout in minutes
      *
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
-     *
      * @since Servlet 4.0
      */
     public int getSessionTimeout();
@@ -987,14 +942,6 @@ public interface ServletContext {
      * @return The character encoding name or {@code null} if no default has
      *         been specified
      *
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
-     *
      * @since Servlet 4.0
      */
     public String getRequestCharacterEncoding();
@@ -1026,14 +973,6 @@ public interface ServletContext {
      * @return The character encoding name or {@code null} if no default has
      *         been specified
      *
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
-     *
      * @since Servlet 4.0
      */
     public String getResponseCharacterEncoding();

==================================================
TesterTldListener.java
index 47c20e1a4f..ebc544807b 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -6441,14 +6441,12 @@ public class StandardContext extends ContainerBase
 
         @Override
         public int getEffectiveMajorVersion() {
-            throw new UnsupportedOperationException(
-                    sm.getString("noPluggabilityServletContext.notAllowed"));
+            return sc.getEffectiveMajorVersion();
         }
 
         @Override
         public int getEffectiveMinorVersion() {
-            throw new UnsupportedOperationException(
-                    sm.getString("noPluggabilityServletContext.notAllowed"));
+            return sc.getEffectiveMinorVersion();
         }
 
         @Override
@@ -6641,14 +6639,12 @@ public class StandardContext extends ContainerBase
 
         @Override
         public Set<SessionTrackingMode> getDefaultSessionTrackingModes() {
-            throw new UnsupportedOperationException(
-                    sm.getString("noPluggabilityServletContext.notAllowed"));
+            return sc.getDefaultSessionTrackingModes();
         }
 
         @Override
         public Set<SessionTrackingMode> getEffectiveSessionTrackingModes() {
-            throw new UnsupportedOperationException(
-                    sm.getString("noPluggabilityServletContext.notAllowed"));
+            return sc.getEffectiveSessionTrackingModes();
         }
 
         @Override
@@ -6678,14 +6674,12 @@ public class StandardContext extends ContainerBase
 
         @Override
         public JspConfigDescriptor getJspConfigDescriptor() {
-            throw new UnsupportedOperationException(
-                    sm.getString("noPluggabilityServletContext.notAllowed"));
+            return sc.getJspConfigDescriptor();
         }
 
         @Override
         public ClassLoader getClassLoader() {
-            throw new UnsupportedOperationException(
-                    sm.getString("noPluggabilityServletContext.notAllowed"));
+            return sc.getClassLoader();
         }
 
         @Override
@@ -6701,8 +6695,7 @@ public class StandardContext extends ContainerBase
 
         @Override
         public int getSessionTimeout() {
-            throw new UnsupportedOperationException(
-                    sm.getString("noPluggabilityServletContext.notAllowed"));
+            return sc.getSessionTimeout();
         }
 
         @Override
@@ -6713,8 +6706,7 @@ public class StandardContext extends ContainerBase
 
         @Override
         public String getRequestCharacterEncoding() {
-            throw new UnsupportedOperationException(
-                    sm.getString("noPluggabilityServletContext.notAllowed"));
+            return sc.getRequestCharacterEncoding();
         }
 
         @Override
@@ -6725,8 +6717,7 @@ public class StandardContext extends ContainerBase
 
         @Override
         public String getResponseCharacterEncoding() {
-            throw new UnsupportedOperationException(
-                    sm.getString("noPluggabilityServletContext.notAllowed"));
+            return sc.getResponseCharacterEncoding();
         }
 
         @Override

==================================================
