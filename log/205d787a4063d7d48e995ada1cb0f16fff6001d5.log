205d787a4063d7d48e995ada1cb0f16fff6001d5
==================================================
Pull up writeBufferFlipped flag
==================================================
Mark Thomas
==================================================
Thu Jan 1 17:13:49 2015 +0000
==================================================
AbstractOutputBuffer.java
Pull up writeBufferFlipped flag

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1648897 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InternalAprOutputBuffer.java
index 34b1229c69..27461b9c62 100644
--- a/java/org/apache/coyote/http11/AbstractOutputBuffer.java
+++ b/java/org/apache/coyote/http11/AbstractOutputBuffer.java
@@ -101,6 +101,7 @@ public abstract class AbstractOutputBuffer<S> implements OutputBuffer {
     protected long byteCount = 0;
 
     protected ByteBuffer socketWriteBuffer;
+    protected volatile boolean writeBufferFlipped;
 
     /**
      * For "non-blocking" writes use an external set of buffers. Although the
@@ -314,6 +315,7 @@ public abstract class AbstractOutputBuffer<S> implements OutputBuffer {
         // Sub-classes may wish to do more than this.
         nextRequest();
         bufferedWrites.clear();
+        writeBufferFlipped = false;
     }
 
     /**

==================================================
InternalNio2OutputBuffer.java
index 1aabd659fd..d886561f7f 100644
--- a/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
@@ -71,13 +71,6 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
     private SocketWrapperBase<Long> wrapper;
 
 
-    /**
-     * <code>false</code> if socketWriteBuffer is ready to be written to and
-     * <code>true</code> is ready to be read from.
-     */
-    private volatile boolean flipped = false;
-
-
     private AbstractEndpoint<Long> endpoint;
 
 
@@ -103,7 +96,6 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
     public void recycle() {
         super.recycle();
         socketWriteBuffer.clear();
-        flipped = false;
         socket = 0;
         wrapper = null;
     }
@@ -153,7 +145,7 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
 
         // If bbuf is currently being used for writes, add this data to the
         // write buffer
-        if (flipped) {
+        if (writeBufferFlipped) {
             addToBuffers(buf, offset, length);
             return;
         }
@@ -264,8 +256,8 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
     }
 
     private synchronized void writeToSocket() throws IOException {
-        if (!flipped) {
-            flipped = true;
+        if (!writeBufferFlipped) {
+            writeBufferFlipped = true;
             socketWriteBuffer.flip();
         }
 
@@ -283,7 +275,7 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
 
         if (socketWriteBuffer.remaining() == 0) {
             socketWriteBuffer.clear();
-            flipped = false;
+            writeBufferFlipped = false;
         }
         // If there is data left in the buffer the socket will be registered for
         // write further up the stack. This is to ensure the socket is only
@@ -305,8 +297,8 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
 
     @Override
     protected synchronized boolean hasMoreDataToFlush() {
-        return (flipped && socketWriteBuffer.remaining() > 0) ||
-                (!flipped && socketWriteBuffer.position() > 0);
+        return (writeBufferFlipped && socketWriteBuffer.remaining() > 0) ||
+                (!writeBufferFlipped && socketWriteBuffer.position() > 0);
     }
 
 

==================================================
InternalNioOutputBuffer.java
index 49759da3d0..0a201503d8 100644
--- a/java/org/apache/coyote/http11/InternalNio2OutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNio2OutputBuffer.java
@@ -66,11 +66,6 @@ public class InternalNio2OutputBuffer extends AbstractOutputBuffer<Nio2Channel>
      */
     protected volatile boolean interest = false;
 
-    /**
-     * Track if the byte buffer is flipped
-     */
-    protected volatile boolean flipped = false;
-
     /**
      * The completion handler used for asynchronous write operations
      */
@@ -226,7 +221,6 @@ public class InternalNio2OutputBuffer extends AbstractOutputBuffer<Nio2Channel>
         super.recycle();
         socket = null;
         e = null;
-        flipped = false;
         interest = false;
         if (writePending.availablePermits() != 1) {
             writePending.drainPermits();
@@ -239,8 +233,8 @@ public class InternalNio2OutputBuffer extends AbstractOutputBuffer<Nio2Channel>
     @Override
     public void nextRequest() {
         super.nextRequest();
-        flipped = false;
         interest = false;
+        writeBufferFlipped = false;
     }
 
     // ------------------------------------------------ HTTP/1.1 Output Methods
@@ -386,9 +380,9 @@ public class InternalNio2OutputBuffer extends AbstractOutputBuffer<Nio2Channel>
                     }
                     bufferedWrites.clear();
                 }
-                if (!flipped) {
+                if (!writeBufferFlipped) {
                     socketWriteBuffer.flip();
-                    flipped = true;
+                    writeBufferFlipped = true;
                 }
                 while (socketWriteBuffer.hasRemaining()) {
                     if (socket.getSocket().write(socketWriteBuffer).get(socket.getTimeout(), TimeUnit.MILLISECONDS).intValue() < 0) {
@@ -407,14 +401,14 @@ public class InternalNio2OutputBuffer extends AbstractOutputBuffer<Nio2Channel>
                 throw new SocketTimeoutException();
             }
             socketWriteBuffer.clear();
-            flipped = false;
+            writeBufferFlipped = false;
             return false;
         } else {
             synchronized (completionHandler) {
                 if (hasPermit || writePending.tryAcquire()) {
-                    if (!flipped) {
+                    if (!writeBufferFlipped) {
                         socketWriteBuffer.flip();
-                        flipped = true;
+                        writeBufferFlipped = true;
                     }
                     Nio2Endpoint.startInline();
                     if (bufferedWrites.size() > 0) {
@@ -443,7 +437,7 @@ public class InternalNio2OutputBuffer extends AbstractOutputBuffer<Nio2Channel>
                     if (writePending.availablePermits() > 0) {
                         if (socketWriteBuffer.remaining() == 0) {
                             socketWriteBuffer.clear();
-                            flipped = false;
+                            writeBufferFlipped = false;
                         }
                     }
                 }
@@ -462,8 +456,8 @@ public class InternalNio2OutputBuffer extends AbstractOutputBuffer<Nio2Channel>
 
     @Override
     protected boolean hasMoreDataToFlush() {
-        return (flipped && socketWriteBuffer.remaining() > 0) ||
-                (!flipped && socketWriteBuffer.position() > 0);
+        return (writeBufferFlipped && socketWriteBuffer.remaining() > 0) ||
+                (!writeBufferFlipped && socketWriteBuffer.position() > 0);
     }
 
     @Override

==================================================
