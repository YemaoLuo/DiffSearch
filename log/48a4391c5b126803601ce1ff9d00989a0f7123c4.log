48a4391c5b126803601ce1ff9d00989a0f7123c4
==================================================
Follow up to r1767250: rename backlog to acceptCount in ProcotolHandler and Endpoint
==================================================
Mark Thomas
==================================================
Mon Oct 31 15:22:07 2016 +0000
==================================================
AbstractProtocol.java
Follow up to r1767250: rename backlog to acceptCount in ProcotolHandler and Endpoint

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1767304 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractEndpoint.java
index 4df34b543b..e2355753f0 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -233,8 +233,8 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
     }
 
 
-    public int getBacklog() { return endpoint.getBacklog(); }
-    public void setBacklog(int backlog) { endpoint.setBacklog(backlog); }
+    public int getAcceptCount() { return endpoint.getAcceptCount(); }
+    public void setAcceptCount(int acceptCount) { endpoint.setAcceptCount(acceptCount); }
 
 
     public boolean getTcpNoDelay() { return endpoint.getTcpNoDelay(); }

==================================================
AprEndpoint.java
index 2719dbc115..c953bd908b 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -386,13 +386,13 @@ public abstract class AbstractEndpoint<S> {
     public void setAddress(InetAddress address) { this.address = address; }
 
     /**
-     * Allows the server developer to specify the backlog that
+     * Allows the server developer to specify the acceptCount (backlog) that
      * should be used for server sockets. By default, this value
      * is 100.
      */
-    private int backlog = 100;
-    public void setBacklog(int backlog) { if (backlog > 0) this.backlog = backlog; }
-    public int getBacklog() { return backlog; }
+    private int acceptCount = 100;
+    public void setAcceptCount(int acceptCount) { if (acceptCount > 0) this.acceptCount = acceptCount; }
+    public int getAcceptCount() { return acceptCount; }
 
     /**
      * Controls when the Endpoint binds the port. <code>true</code>, the default

==================================================
Nio2Endpoint.java
index 4095232794..1e576f96c5 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -312,7 +312,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
             throw new Exception(sm.getString("endpoint.init.bind", "" + ret, Error.strerror(ret)));
         }
         // Start listening on the server socket
-        ret = Socket.listen(serverSock, getBacklog());
+        ret = Socket.listen(serverSock, getAcceptCount());
         if (ret != 0) {
             throw new Exception(sm.getString("endpoint.init.listen", "" + ret, Error.strerror(ret)));
         }

==================================================
NioEndpoint.java
index 22abb57cc4..913dc24983 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -173,7 +173,7 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
         serverSock = AsynchronousServerSocketChannel.open(threadGroup);
         socketProperties.setProperties(serverSock);
         InetSocketAddress addr = (getAddress()!=null?new InetSocketAddress(getAddress(),getPort()):new InetSocketAddress(getPort()));
-        serverSock.bind(addr,getBacklog());
+        serverSock.bind(addr,getAcceptCount());
 
         // Initialize thread count defaults for acceptor, poller
         if (acceptorThreadCount != 1) {

==================================================
