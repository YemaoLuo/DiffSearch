10d54061621887a1d867c59772e12276653116e5
==================================================
Fix problem with req.getServerPort() returning wrong value for HTTP/2
==================================================
Mark Thomas
==================================================
Wed Jun 29 13:38:45 2016 +0000
==================================================
CoyoteAdapter.java
Fix problem with req.getServerPort() returning wrong value for HTTP/2
Remove duplicate implementations to CoyoteAdapter and use the same approach for all

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1750634 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpProcessor.java
index 9775fc824d..2f358b4d18 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -555,6 +555,13 @@ public class CoyoteAdapter implements Adapter {
         int proxyPort = connector.getProxyPort();
         if (proxyPort != 0) {
             req.setServerPort(proxyPort);
+        } else if (req.getServerPort() == -1) {
+            // Not explicitly set. Use default ports based on the scheme
+            if (req.scheme().equals("https")) {
+                req.setServerPort(443);
+            } else {
+                req.setServerPort(80);
+            }
         }
         if (proxyName != null) {
             req.serverName().setString(proxyName);

==================================================
Http11Processor.java
index 8c96c10407..5a762af098 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -1303,13 +1303,6 @@ public class AjpProcessor extends AbstractProcessor {
         }
 
         if (colonPos < 0) {
-            if (request.scheme().equalsIgnoreCase("https")) {
-                // 443 - Default HTTPS port
-                request.setServerPort(443);
-            } else {
-                // 80 - Default HTTTP port
-                request.setServerPort(80);
-            }
             request.serverName().setChars(hostNameC, 0, valueL);
         } else {
 

==================================================
Http2UpgradeHandler.java
index d1d44d713e..18e225be10 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -1668,13 +1668,6 @@ public class Http11Processor extends AbstractProcessor {
         }
 
         if (colonPos < 0) {
-            if (!endpoint.isSSLEnabled()) {
-                // 80 - Default HTTP port
-                request.setServerPort(80);
-            } else {
-                // 443 - Default HTTPS port
-                request.setServerPort(443);
-            }
             request.serverName().setChars(hostNameC, 0, valueL);
         } else {
             request.serverName().setChars(hostNameC, 0, colonPos);

==================================================
Stream.java
index 0e59f60cee..635da5e633 100644
--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java
@@ -1036,11 +1036,6 @@ public class Http2UpgradeHandler extends AbstractStream implements InternalHttpU
     }
 
 
-    String getProperty(String key) {
-        return socketWrapper.getEndpoint().getProperty(key);
-    }
-
-
     @Override
     protected final String getConnectionId() {
         return connectionId;

==================================================
