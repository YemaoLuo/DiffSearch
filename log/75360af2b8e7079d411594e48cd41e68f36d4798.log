75360af2b8e7079d411594e48cd41e68f36d4798
==================================================
Complete implementation of SessionCookieConfig
==================================================
Mark Emlyn
==================================================
Fri Aug 7 19:15:54 2009 +0000
==================================================
Request.java
Complete implementation of SessionCookieConfig

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@802146 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ApplicationContext.java
index 078778caad..1c3bfa192f 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -48,7 +48,6 @@ import javax.servlet.ServletRequest;
 import javax.servlet.ServletRequestAttributeEvent;
 import javax.servlet.ServletRequestAttributeListener;
 import javax.servlet.ServletResponse;
-import javax.servlet.SessionCookieConfig;
 import javax.servlet.SessionTrackingMode;
 import javax.servlet.http.Cookie;
 import javax.servlet.http.HttpServletRequest;
@@ -63,6 +62,7 @@ import org.apache.catalina.Manager;
 import org.apache.catalina.Realm;
 import org.apache.catalina.Session;
 import org.apache.catalina.Wrapper;
+import org.apache.catalina.core.ApplicationSessionCookieConfig;
 import org.apache.catalina.core.AsyncContextImpl;
 import org.apache.catalina.realm.GenericPrincipal;
 import org.apache.catalina.util.Enumerator;
@@ -2384,9 +2384,15 @@ public class Request
                && getContext().getServletContext().
                        getEffectiveSessionTrackingModes().contains(
                                SessionTrackingMode.COOKIE)) {
-            Cookie cookie = new Cookie(Globals.SESSION_COOKIE_NAME,
-                                       session.getIdInternal());
-            configureSessionCookie(cookie);
+            Cookie cookie =
+                ApplicationSessionCookieConfig.createSessionCookie(
+                        context.getServletContext().getSessionCookieConfig(),
+                        session.getIdInternal(),
+                        isSecure(),
+                        context.getUseHttpOnly(),
+                        connector.getEmptySessionPath(),
+                        context.getEncodedPath());
+            
             response.addCookieInternal(cookie);
         }
 
@@ -2399,50 +2405,6 @@ public class Request
 
     }
 
-    /**
-     * Configures the given JSESSIONID cookie.
-     *
-     * @param cookie The JSESSIONID cookie to be configured
-     */
-    protected void configureSessionCookie(Cookie cookie) {
-        SessionCookieConfig scc =
-            context.getServletContext().getSessionCookieConfig();
-
-        cookie.setMaxAge(-1);
-
-        if (scc != null) {
-            cookie.setComment(scc.getComment());
-        }
-
-        if (scc != null) {
-            cookie.setDomain(scc.getDomain());
-        }
-
-        if ((scc != null && scc.isSecure()) || isSecure()) {
-            cookie.setSecure(true);
-        }
-
-        if ((scc != null && scc.isHttpOnly()) ||
-                context.getUseHttpOnly()) {
-            cookie.setHttpOnly(true);
-        }
-        
-        if (!connector.getEmptySessionPath() &&
-                scc != null && scc.getPath() != null) {
-            cookie.setPath(scc.getPath());
-        } else {
-            String contextPath = null;
-            if (!connector.getEmptySessionPath() && (getContext() != null)) {
-                contextPath = getContext().getEncodedPath();
-            }
-            if ((contextPath != null) && (contextPath.length() > 0)) {
-                cookie.setPath(contextPath);
-            } else {
-                cookie.setPath("/");
-            }
-        }
-    }
-    
     protected String unescape(String s) {
         if (s==null) return null;
         if (s.indexOf('\\') == -1) return s;

==================================================
ApplicationSessionCookieConfig.java
index 5cd227f301..ed9d131036 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -171,7 +171,8 @@ public class ApplicationContext
     /**
      * Session Cookie config
      */
-    private SessionCookieConfig sessionCookieConfig;
+    private SessionCookieConfig sessionCookieConfig =
+        new ApplicationSessionCookieConfig();
     
     /**
      * Session tracking modes

==================================================
JvmRouteBinderValve.java
new file mode 100644
index 0000000000..09bc54f3fc
--- /dev/null
+++ b/java/org/apache/catalina/core/ApplicationSessionCookieConfig.java
@@ -0,0 +1,159 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.catalina.core;
+
+import javax.servlet.SessionCookieConfig;
+import javax.servlet.http.Cookie;
+
+import org.apache.catalina.Globals;
+
+public class ApplicationSessionCookieConfig implements SessionCookieConfig {
+
+    private boolean httpOnly;
+    private boolean secure;
+    private int maxAge = -1;
+    private String comment;
+    private String domain;
+    private String name;
+    private String path;
+    
+    @Override
+    public String getComment() {
+        return comment;
+    }
+
+    @Override
+    public String getDomain() {
+        return domain;
+    }
+
+    @Override
+    public int getMaxAge() {
+        return maxAge;
+    }
+
+    @Override
+    public String getName() {
+        return name;
+    }
+
+    @Override
+    public String getPath() {
+        return path;
+    }
+
+    @Override
+    public boolean isHttpOnly() {
+        return httpOnly;
+    }
+
+    @Override
+    public boolean isSecure() {
+        return secure;
+    }
+
+    @Override
+    public void setComment(String comment) {
+        this.comment = comment;
+    }
+
+    @Override
+    public void setDomain(String domain) {
+        this.domain = domain;
+    }
+
+    @Override
+    public void setHttpOnly(boolean httpOnly) {
+        this.httpOnly = httpOnly;
+    }
+
+    @Override
+    public void setMaxAge(int maxAge) {
+        this.maxAge = maxAge;
+    }
+
+    @Override
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    @Override
+    public void setPath(String path) {
+        this.path = path;
+    }
+
+    @Override
+    public void setSecure(boolean secure) {
+        this.secure = secure;
+    }
+
+    /**
+     * Creates a new session cookie for the given session ID
+     *
+     * @param scc         The default session cookie configuration
+     * @param sessionId   The ID of the session for which the cookie will be
+     *                    created
+     * @param secure      Should session cookie be configured as secure
+     * @param httpOnly    Should session cookie be configured as httpOnly
+     * @param emptyPath   Should session cookie be configured with empty path
+     * @param contextPath Context path to use if required       
+     */
+    public static Cookie createSessionCookie(SessionCookieConfig scc,
+            String sessionId, boolean secure, boolean httpOnly,
+            boolean emptyPath, String contextPath) {
+
+       // Session config can over-ride default name  
+       String cookieName = scc.getName();
+       if (cookieName == null) {
+           cookieName = Globals.SESSION_COOKIE_NAME;
+       }
+       Cookie cookie = new Cookie(cookieName, sessionId);
+       
+       // Just apply the defaults.
+       cookie.setMaxAge(scc.getMaxAge());
+       cookie.setComment(scc.getComment());
+       // Avoid possible NPE
+       if (scc.getDomain() != null) {
+           cookie.setDomain(scc.getDomain());
+       }
+
+       // Always set secure if the request is secure
+       if (scc.isSecure() || secure) {
+           cookie.setSecure(true);
+       }
+
+       // Always set httpOnly if the context is configured for that
+       if (scc.isHttpOnly() || httpOnly) {
+           cookie.setHttpOnly(true);
+       }
+       
+       // Don't set the path if the connector is configured to over-ride
+       if (!emptyPath && scc.getPath() != null) {
+           cookie.setPath(scc.getPath());
+       } else {
+           if (!emptyPath && contextPath != null && (contextPath.length() > 0)) {
+               cookie.setPath(contextPath);
+           } else {
+               cookie.setPath("/");
+           }
+       }
+       return cookie;
+   }
+   
+ 
+}

==================================================
