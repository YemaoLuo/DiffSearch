2240c8db50e953e72940327c3f0ff6fb002446d2
==================================================
A few OWB cleanups based on review
==================================================
remm remm@apache.org
==================================================
Fri Nov 15 12:12:58 2019 +0100
==================================================
OpenWebBeansContextLifecycleListener.java
index 1db0fda28d..4be4fb8090 100644
--- a/modules/owb/pom.xml
+++ b/modules/owb/pom.xml
@@ -95,7 +95,7 @@
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-shade-plugin</artifactId>
-                <version>3.0.0</version>
+                <version>3.2.1</version>
                 <!--<version>3.2.2</version>-->
                 <executions>
                     <execution>
@@ -106,7 +106,8 @@
                         <configuration>
                             <createDependencyReducedPom>false</createDependencyReducedPom>
                             <transformers>
-                                <!--<transformer implementation="org.apache.maven.plugins.shade.resource.properties.OpenWebBeansPropertiesTransformer"/>-->
+                                <transformer implementation="org.apache.openwebbeans.maven.shade.OpenWebBeansPropertiesTransformer" />
+                                <!-- With Shade 3.2.2 <transformer implementation="org.apache.maven.plugins.shade.resource.properties.OpenWebBeansPropertiesTransformer"/>-->
                                 <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                     <mainClass>${mainClass}</mainClass>
                                 </transformer>
@@ -114,6 +115,14 @@
                         </configuration>
                     </execution>
                 </executions>
+                <!-- Remove after Shade 3.2.2 -->
+                <dependencies>
+                    <dependency>
+                        <groupId>org.apache.openwebbeans</groupId>
+                        <artifactId>openwebbeans-maven</artifactId>
+                        <version>${project.version}</version>
+                    </dependency>
+                </dependencies>
             </plugin>
         </plugins>
     </build>

==================================================
OpenWebBeansListener.java
index 909c7f47b7..e926cd7775 100644
--- a/modules/owb/src/main/java/org/apache/webbeans/web/tomcat/OpenWebBeansContextLifecycleListener.java
+++ b/modules/owb/src/main/java/org/apache/webbeans/web/tomcat/OpenWebBeansContextLifecycleListener.java
@@ -35,6 +35,26 @@ import org.apache.webbeans.servlet.WebBeansConfigurationListener;
  */
 public class OpenWebBeansContextLifecycleListener implements LifecycleListener {
 
+    /**
+     * Add security valve.
+     */
+    protected boolean addSecurityValve = true;
+
+    /**
+     * @return true to add the security valve
+     */
+    public boolean getAddSecurityValve() {
+        return addSecurityValve;
+    }
+
+    /**
+     * Configure if a security valve will be added
+     * @param addSecurityValve the addSecurityValve to set
+     */
+    public void setAddSecurityValve(boolean addSecurityValve) {
+        this.addSecurityValve = addSecurityValve;
+    }
+
     /**
      * Start without a beans.xml file.
      */
@@ -88,15 +108,17 @@ public class OpenWebBeansContextLifecycleListener implements LifecycleListener {
                             ((Lifecycle) pipeline).addLifecycleListener(this);
                         }
                     }
-                    // Add security valve
-                    boolean securityValveFound = false;
-                    for (Valve valve : pipeline.getValves()) {
-                        if (valve instanceof OpenWebBeansSecurityValve) {
-                            securityValveFound = true;
+                    if (getAddSecurityValve()) {
+                        // Add security valve
+                        boolean securityValveFound = false;
+                        for (Valve valve : pipeline.getValves()) {
+                            if (valve instanceof OpenWebBeansSecurityValve) {
+                                securityValveFound = true;
+                            }
+                        }
+                        if (!securityValveFound) {
+                            pipeline.addValve(new OpenWebBeansSecurityValve());
                         }
-                    }
-                    if (!securityValveFound) {
-                        pipeline.addValve(new OpenWebBeansSecurityValve());
                     }
                 }
             }

==================================================
OpenWebBeansSecurityFilter.java
index dcab4746ee..9e74d1e27a 100644
--- a/modules/owb/src/main/java/org/apache/webbeans/web/tomcat/OpenWebBeansListener.java
+++ b/modules/owb/src/main/java/org/apache/webbeans/web/tomcat/OpenWebBeansListener.java
@@ -35,10 +35,31 @@ public class OpenWebBeansListener extends FrameworkListener {
     @Override
     protected LifecycleListener createLifecycleListener(Context context) {
         OpenWebBeansContextLifecycleListener listener = new OpenWebBeansContextLifecycleListener();
+        listener.setAddSecurityValve(getAddSecurityValve());
         listener.setStartWithoutBeansXml(getStartWithoutBeansXml());
         return listener;
     }
 
+    /**
+     * Add security valve.
+     */
+    protected boolean addSecurityValve = true;
+
+    /**
+     * @return true to add the security valve
+     */
+    public boolean getAddSecurityValve() {
+        return addSecurityValve;
+    }
+
+    /**
+     * Configure if a security valve will be added
+     * @param addSecurityValve the addSecurityValve to set
+     */
+    public void setAddSecurityValve(boolean addSecurityValve) {
+        this.addSecurityValve = addSecurityValve;
+    }
+
     /**
      * Start without a beans.xml file.
      */

==================================================
TomcatPlugin.java
new file mode 100644
index 0000000000..2526cdf60f
--- /dev/null
+++ b/modules/owb/src/main/java/org/apache/webbeans/web/tomcat/OpenWebBeansSecurityFilter.java
@@ -0,0 +1,65 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.webbeans.web.tomcat;
+
+import java.io.IOException;
+import java.security.Principal;
+
+import javax.servlet.Filter;
+import javax.servlet.FilterChain;
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpServletRequest;
+
+
+/**
+ * Filter which sets the UserPrincipal into a ThreadLocal
+ * to make it injectable via a CDI Producer. This is an alternative
+ * to the valve to allow configuration at the webapp level as well.
+ */
+public class OpenWebBeansSecurityFilter implements Filter {
+
+    private static ThreadLocal<Principal> principal = new ThreadLocal<>();
+
+    public static Principal getPrincipal() {
+        return principal.get();
+    }
+
+    @Override
+    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
+            throws IOException, ServletException {
+        try {
+            if (request instanceof HttpServletRequest) {
+                Principal p = ((HttpServletRequest) request).getUserPrincipal();
+                if (p != null) {
+                    principal.set(p);
+                }
+            }
+
+            // continue with the request
+            chain.doFilter(request, response);
+        } finally {
+            if (principal.get() != null) {
+                principal.remove();
+            }
+        }
+    }
+
+}

==================================================
