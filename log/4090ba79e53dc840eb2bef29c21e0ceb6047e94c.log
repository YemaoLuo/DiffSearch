4090ba79e53dc840eb2bef29c21e0ceb6047e94c
==================================================
Add the ability for Tomcat internal components, mainly Valves, to wrap the request and response that will be passed to the application.
==================================================
Mark Thomas
==================================================
Thu Feb 11 21:39:35 2016 +0000
==================================================
Request.java
index 31fb025115..9282e3ff9e 100644
--- a/java/org/apache/catalina/connector/LocalStrings.properties
+++ b/java/org/apache/catalina/connector/LocalStrings.properties
@@ -70,9 +70,11 @@ inputBuffer.requiresNonBlocking=Not available in non blocking mode
 outputBuffer.writeNull=The String argument to write(String,int,int) may not be null
 
 request.asyncNotSupported=A filter or servlet of the current chain does not support asynchronous operations.
+request.illegalWrap=The request wrapper must wrap the request obtained from getRequest()
 
 requestFacade.nullRequest=The request object has been recycled and is no longer associated with this facade
 
+response.illegalWrap=The response wrapper must wrap the response obtained from getResponse()
 response.sendRedirectFail=Failed to redirect to [{0}]
 
 responseFacade.nullResponse=The response object has been recycled and is no longer associated with this facade

==================================================
Response.java
index 59e090387f..7d2193cd62 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -59,6 +59,7 @@ import javax.servlet.ServletResponse;
 import javax.servlet.SessionTrackingMode;
 import javax.servlet.http.Cookie;
 import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletRequestWrapper;
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpSession;
 import javax.servlet.http.HttpUpgradeHandler;
@@ -412,6 +413,8 @@ public class Request implements HttpServletRequest {
 
     protected Boolean asyncSupported = null;
 
+    private HttpServletRequest applicationRequest = null;
+
 
     // --------------------------------------------------------- Public Methods
 
@@ -480,6 +483,7 @@ public class Request implements HttpServletRequest {
 
         mappingData.recycle();
 
+        applicationRequest = null;
         if (Globals.IS_SECURITY_ENABLED || Connector.RECYCLE_FACADES) {
             if (facade != null) {
                 facade.clear();
@@ -630,6 +634,7 @@ public class Request implements HttpServletRequest {
      */
     protected RequestFacade facade = null;
 
+
     /**
      * @return the <code>ServletRequest</code> for which this object
      * is the facade.  This method must be implemented by a subclass.
@@ -638,7 +643,31 @@ public class Request implements HttpServletRequest {
         if (facade == null) {
             facade = new RequestFacade(this);
         }
-        return facade;
+        if (applicationRequest == null) {
+            applicationRequest = facade;
+        }
+        return applicationRequest;
+    }
+
+
+    /**
+     * Set a wrapped HttpServletRequest to pass to the application. Components
+     * wishing to wrap the request should obtain the request via
+     * {@link #getRequest()}, wrap it and then call this method with the
+     * wrapped request.
+     *
+     * @param applicationRequest The wrapped request to pass to the application
+     */
+    public void setRequest(HttpServletRequest applicationRequest) {
+        // Check the wrapper wraps this request
+        ServletRequest r = applicationRequest;
+        while (r instanceof HttpServletRequestWrapper) {
+            r = ((HttpServletRequestWrapper) r).getRequest();
+        }
+        if (r != facade) {
+            throw new IllegalArgumentException(sm.getString("request.illegalWrap"));
+        }
+        this.applicationRequest = applicationRequest;
     }
 
 

==================================================
