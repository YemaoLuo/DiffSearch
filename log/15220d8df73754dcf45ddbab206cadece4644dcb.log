15220d8df73754dcf45ddbab206cadece4644dcb
==================================================
Remove more Java 9+ references
==================================================
Mark Thomas
==================================================
Wed Jul 28 17:46:07 2021 +0100
==================================================
ELProcessor.java
index 91b7c83d8f..d40cb1ca40 100644
--- a/conf/catalina.policy
+++ b/conf/catalina.policy
@@ -50,11 +50,10 @@ grant codeBase "file:${java.home}/lib/ext/-" {
         permission java.security.AllPermission;
 };
 
-// This permission is required when using javac to compile JSPs on Java 9
-// onwards
-//grant codeBase "jrt:/jdk.compiler" {
-//        permission java.security.AllPermission;
-//};
+// This permission is required when using javac to compile JSPs
+grant codeBase "jrt:/jdk.compiler" {
+        permission java.security.AllPermission;
+};
 
 
 // ========== CATALINA CODE PERMISSIONS =======================================

==================================================
StandardContext.java
index cead8de4cc..2d3f492d35 100644
--- a/java/jakarta/el/LocalStrings.properties
+++ b/java/jakarta/el/LocalStrings.properties
@@ -29,7 +29,7 @@ expressionFactory.readFailed=Failed to read [{0}]
 importHandler.ambiguousImport=The class [{0}] could not be imported as it conflicts with [{1}] which has already been imported
 importHandler.ambiguousStaticImport=The static import [{0}] could not be processed as it conflicts with [{1}] which has already been imported
 importHandler.classNotFound=The class [{0}] could not be imported as it could not be found
-importHandler.invalidClass=The class [{0}] must be public, in an exported package (for Java 9+), non-abstract and not an interface
+importHandler.invalidClass=The class [{0}] must be public, in an exported package, non-abstract and not an interface
 importHandler.invalidClassName=Name of class to import [{0}] must include a package
 importHandler.invalidClassNameForStatic=The class [{0}] specified for static import [{1}] is not valid
 importHandler.invalidStaticName=Name of static method or field to import [{0}] must include a class
@@ -45,7 +45,7 @@ propertyReadError=Error reading [{1}] on type [{0}]
 propertyWriteError=Error writing [{1}] on type [{0}]
 
 staticFieldELResolver.methodNotFound=No matching public static method named [{0}] found on class [{1}]
-staticFieldELResolver.notFound=No public static field named [{0}] was found on (exported for Java 9+) class [{1}]
+staticFieldELResolver.notFound=No public static field named [{0}] was found on exported class [{1}]
 staticFieldELResolver.notWriteable=Writing to static fields (in this case field [{0}] on class [{1}]) is not permitted
 
 util.method.ambiguous=Unable to find unambiguous method: {0}.{1}({2})

==================================================
WebappClassLoaderBase.java
index 521c90ff99..cb6e4a56b9 100644
--- a/java/org/apache/catalina/loader/LocalStrings.properties
+++ b/java/org/apache/catalina/loader/LocalStrings.properties
@@ -13,9 +13,9 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-webappClassLoader.addExportsJavaIo=When running on Java 9 or later you need to add "--add-opens=java.base/java.io={0}" to the JVM command line arguments to enable ObjectStream cache memory leak protection. Alternatively, you can suppress this warning by disabling ObjectStream class cache memory leak protection.
-webappClassLoader.addExportsRmi=When running on Java 9 or later you need to add "--add-opens=java.rmi/sun.rmi.transport={0}" to the JVM command line arguments to enable RMI Target memory leak detection. Alternatively, you can suppress this warning by disabling RMI Target memory leak detection.
-webappClassLoader.addExportsThreadLocal=When running on Java 9 or later you need to add "--add-opens=java.base/java.lang={0}" to the JVM command line arguments to enable ThreadLocal memory leak detection. Alternatively, you can suppress this warning by disabling ThreadLocal memory leak detection.
+webappClassLoader.addExportsJavaIo=You need to add "--add-opens=java.base/java.io={0}" to the JVM command line arguments to enable ObjectStream cache memory leak protection. Alternatively, you can suppress this warning by disabling ObjectStream class cache memory leak protection.
+webappClassLoader.addExportsRmi=You need to add "--add-opens=java.rmi/sun.rmi.transport={0}" to the JVM command line arguments to enable RMI Target memory leak detection. Alternatively, you can suppress this warning by disabling RMI Target memory leak detection.
+webappClassLoader.addExportsThreadLocalYou need to add "--add-opens=java.base/java.lang={0}" to the JVM command line arguments to enable ThreadLocal memory leak detection. Alternatively, you can suppress this warning by disabling ThreadLocal memory leak detection.
 webappClassLoader.addPermissionNoCanonicalFile=Unable to obtain a canonical file path from the URL [{0}]
 webappClassLoader.addPermissionNoProtocol=The protocol [{0}] in the URL [{1}] is not supported so no read permission was granted for resources located at this URL
 webappClassLoader.addTransformer=Added class file transformer [{0}] to web application [{1}].

==================================================
Generator.java
index b0828617cc..12ca9abd75 100644
--- a/java/org/apache/catalina/loader/WebappClassLoaderBase.java
+++ b/java/org/apache/catalina/loader/WebappClassLoaderBase.java
@@ -338,8 +338,8 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
 
     /**
      * Enables the RMI Target memory leak detection to be controlled. This is
-     * necessary since the detection can only work on Java 9 if some of the
-     * modularity checks are disabled.
+     * necessary since the detection can only work if some of the modularity
+     * checks are disabled.
      */
     private boolean clearReferencesRmiTargets = true;
 

==================================================
WsSci.java
index 68d8f56981..d916aafd98 100644
--- a/java/org/apache/tomcat/util/compat/LocalStrings_zh_CN.properties
+++ b/java/org/apache/tomcat/util/compat/LocalStrings_zh_CN.properties
@@ -16,8 +16,4 @@
 jre16Compat.javaPre16=类未找到，因此假设代码在Java16之前的JVM上运行
 jre16Compat.unexpected=无法创建对Java16中类和方法的引用
 
-jre9Compat.unexpected=创建对Java 9类的依赖和方法失败
-
-jreCompat.noApplicationProtocol=Java 运行时不支持 SSLEngine.getApplicationProtocol()。要使用该功能你必须使用 Java 9。
-jreCompat.noApplicationProtocols=Java Runtime不支持SSLParamerters.setApplicationProtocols(),必须使用Java 9才能使用这个特性。
 jreCompat.noUnixDomainSocket=Java运行环境不支持Unix域名套接字。你必须使用Java16来运行该特性。

==================================================
TestEncryptInterceptor.java
index 8b07ce3275..9e7e063634 100644
--- a/java/org/apache/tomcat/websocket/server/WsSci.java
+++ b/java/org/apache/tomcat/websocket/server/WsSci.java
@@ -66,7 +66,7 @@ public class WsSci implements ServletContainerInitializer {
                         Modifier.isInterface(modifiers) ||
                         isExported(clazz)) {
                     // Non-public, abstract, interface or not in an exported
-                    // package (Java 9+) - skip it.
+                    // package - skip it.
                     continue;
                 }
                 // Protect against scanning the WebSocket API JARs

==================================================
TestGenerator.java
index 753aaa52d4..0bd282b41e 100644
--- a/test/org/apache/catalina/tribes/group/interceptors/TestEncryptInterceptor.java
+++ b/test/org/apache/catalina/tribes/group/interceptors/TestEncryptInterceptor.java
@@ -72,7 +72,7 @@ public class TestEncryptInterceptor {
     @BeforeClass
     public static void setupClass() {
         Security.setProperty("jdk.tls.disabledAlgorithms", "");
-        Security.setProperty("crypto.policy", "unlimited"); // For Java 9+
+        Security.setProperty("crypto.policy", "unlimited");
     }
 
     @AfterClass

==================================================
