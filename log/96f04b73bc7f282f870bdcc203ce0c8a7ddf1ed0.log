96f04b73bc7f282f870bdcc203ce0c8a7ddf1ed0
==================================================
Refactoring: HTTP/1.1 - HTTP/2 alignment
==================================================
Mark Thomas
==================================================
Thu Nov 30 10:20:16 2017 +0000
==================================================
Http11OutputBuffer.java
Refactoring: HTTP/1.1 - HTTP/2 alignment

Add flush() to HttpOutputBuffer and chain filter implementations

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1816698 13f79535-47bb-0310-9956-ffa450edef68



==================================================
HttpOutputBuffer.java
index 112a1d9c9c..9623f3c9d7 100644
--- a/java/org/apache/coyote/http11/Http11OutputBuffer.java
+++ b/java/org/apache/coyote/http11/Http11OutputBuffer.java
@@ -210,32 +210,41 @@ public class Http11OutputBuffer implements HttpOutputBuffer {
     }
 
 
-    // --------------------------------------------------------- Public Methods
+    // ----------------------------------------------- HttpOutputBuffer Methods
 
     /**
      * Flush the response.
      *
      * @throws IOException an underlying I/O error occurred
      */
+    @Override
     public void flush() throws IOException {
-        // go through the filters and if there is gzip filter
-        // invoke it to flush
-        for (int i = 0; i <= lastActiveFilter; i++) {
-            if (activeFilters[i] instanceof GzipOutputFilter) {
-                if (log.isDebugEnabled()) {
-                    log.debug("Flushing the gzip filter at position " + i +
-                            " of the filter chain...");
-                }
-                ((GzipOutputFilter) activeFilters[i]).flush();
-                break;
-            }
+        if (lastActiveFilter == -1) {
+            outputStreamOutputBuffer.flush();
+        } else {
+            activeFilters[lastActiveFilter].flush();
+        }
+    }
+
+
+    @Override
+    public void end() throws IOException {
+        if (responseFinished) {
+            return;
         }
 
-        // Flush the current buffer(s)
-        flushBuffer(isBlocking());
+        if (lastActiveFilter == -1) {
+            outputStreamOutputBuffer.end();
+        } else {
+            activeFilters[lastActiveFilter].end();
+        }
+
+        responseFinished = true;
     }
 
 
+    // --------------------------------------------------------- Public Methods
+
     /**
      * Reset the header buffer if an error occurs during the writing of the
      * headers so the error response can be written.
@@ -276,22 +285,6 @@ public class Http11OutputBuffer implements HttpOutputBuffer {
     }
 
 
-    @Override
-    public void end() throws IOException {
-        if (responseFinished) {
-            return;
-        }
-
-        if (lastActiveFilter == -1) {
-            outputStreamOutputBuffer.end();
-        } else {
-            activeFilters[lastActiveFilter].end();
-        }
-
-        responseFinished = true;
-    }
-
-
     public void init(SocketWrapperBase<?> socketWrapper) {
         this.socketWrapper = socketWrapper;
     }
@@ -563,5 +556,10 @@ public class Http11OutputBuffer implements HttpOutputBuffer {
         public void end() throws IOException {
             socketWrapper.flush(true);
         }
+
+        @Override
+        public void flush() throws IOException {
+            socketWrapper.flush(isBlocking());
+        }
     }
 }

==================================================
ChunkedOutputFilter.java
index 1c206b55b7..ca71d47b00 100644
--- a/java/org/apache/coyote/http11/HttpOutputBuffer.java
+++ b/java/org/apache/coyote/http11/HttpOutputBuffer.java
@@ -30,4 +30,11 @@ public interface HttpOutputBuffer extends OutputBuffer {
      * @throws IOException If an I/O error occurs while writing to the client
      */
     public void end() throws IOException;
+
+    /**
+     * Flushes any unwritten data to the client.
+     *
+     * @throws IOException If an I/O error occurs while flushing
+     */
+    public void flush() throws IOException;
 }

==================================================
GzipOutputFilter.java
index ca933edb71..05b14c981b 100644
--- a/java/org/apache/coyote/http11/filters/ChunkedOutputFilter.java
+++ b/java/org/apache/coyote/http11/filters/ChunkedOutputFilter.java
@@ -151,6 +151,13 @@ public class ChunkedOutputFilter implements OutputFilter {
     }
 
 
+    @Override
+    public void flush() throws IOException {
+        // No data buffered in this filter. Flush next buffer.
+        buffer.flush();
+    }
+
+
     @Override
     public void end() throws IOException {
 

==================================================
IdentityOutputFilter.java
index 4c38a53ae4..18d18a3e7a 100644
--- a/java/org/apache/coyote/http11/filters/GzipOutputFilter.java
+++ b/java/org/apache/coyote/http11/filters/GzipOutputFilter.java
@@ -87,7 +87,8 @@ public class GzipOutputFilter implements OutputFilter {
     /**
      * Added to allow flushing to happen for the gzip'ed outputstream
      */
-    public void flush() {
+    @Override
+    public void flush() throws IOException {
         if (compressionStream != null) {
             try {
                 if (log.isDebugEnabled()) {
@@ -100,6 +101,7 @@ public class GzipOutputFilter implements OutputFilter {
                 }
             }
         }
+        buffer.flush();
     }
 
 

==================================================
VoidOutputFilter.java
index cc483cae8a..8c44d8552a 100644
--- a/java/org/apache/coyote/http11/filters/IdentityOutputFilter.java
+++ b/java/org/apache/coyote/http11/filters/IdentityOutputFilter.java
@@ -111,6 +111,13 @@ public class IdentityOutputFilter implements OutputFilter {
     }
 
 
+    @Override
+    public void flush() throws IOException {
+        // No data buffered in this filter. Flush next buffer.
+        buffer.flush();
+    }
+
+
     @Override
     public void end() throws IOException {
         buffer.end();

==================================================
TesterOutputBuffer.java
index 81f7c08f7f..4c0ec70d09 100644
--- a/java/org/apache/coyote/http11/filters/VoidOutputFilter.java
+++ b/java/org/apache/coyote/http11/filters/VoidOutputFilter.java
@@ -59,6 +59,12 @@ public class VoidOutputFilter implements OutputFilter {
     }
 
 
+    @Override
+    public void flush() throws IOException {
+        // NO-OP
+    }
+
+
     @Override
     public void recycle() {
         // NOOP: Nothing to recycle

==================================================
