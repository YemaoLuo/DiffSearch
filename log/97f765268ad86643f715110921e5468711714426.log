97f765268ad86643f715110921e5468711714426
==================================================
Remove code that is NO-OP in all remaining implementations.
==================================================
Mark Thomas
==================================================
Sun Nov 23 22:49:21 2014 +0000
==================================================
AbstractHttp11Processor.java
Remove code that is NO-OP in all remaining implementations.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1641265 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index 6957af7714..f446802eb8 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -916,12 +916,6 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
     abstract void actionInternal(ActionCode actionCode, Object param);
 
 
-    /**
-     * Configures the timeout to be used for reading the request line.
-     */
-    protected abstract void setRequestLineReadTimeout() throws IOException;
-
-
     /**
      * Defines how a connector handles an incomplete request line read.
      *
@@ -969,8 +963,6 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
 
             // Parsing the request header
             try {
-                setRequestLineReadTimeout();
-
                 if (!getInputBuffer().parseRequestLine(keptAlive)) {
                     if (handleIncompleteRequestLineRead()) {
                         break;

==================================================
Http11Nio2Processor.java
index 6af7a64ba6..af321d12dc 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -17,7 +17,6 @@
 package org.apache.coyote.http11;
 
 import java.io.ByteArrayInputStream;
-import java.io.IOException;
 import java.security.cert.CertificateFactory;
 import java.security.cert.X509Certificate;
 
@@ -93,30 +92,6 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
     // --------------------------------------------------------- Public Methods
 
 
-    @Override
-    protected void setRequestLineReadTimeout() throws IOException {
-        // Timeouts while in the poller are handled entirely by the poller
-        // Only need to be concerned with socket timeouts
-
-        // APR uses simulated blocking so if some request line data is present
-        // then it must all be presented (with the normal socket timeout).
-
-        // When entering the processing loop for the first time there will
-        // always be some data to read so the keep-alive timeout is not required
-
-        // For the second and subsequent executions of the processing loop, if
-        // there is no request line data present then no further data will be
-        // read from the socket. If there is request line data present then it
-        // must all be presented (with the normal socket timeout)
-
-        // When the socket is created it is given the correct timeout.
-        // sendfile may change the timeout but will restore it
-        // This processor may change the timeout for uploads but will restore it
-
-        // NO-OP
-    }
-
-
     @Override
     protected boolean handleIncompleteRequestLineRead() {
         // This means that no data is available right now

==================================================
Http11NioProcessor.java
index c0c762450d..ca65e2e0ff 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Processor.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Processor.java
@@ -120,27 +120,6 @@ public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
     }
 
 
-    @Override
-    protected void setRequestLineReadTimeout() throws IOException {
-        // socket.setTimeout()
-        //     - timeout used by poller
-        // socket.getSocket().getIOChannel().socket().setSoTimeout()
-        //     - timeout used for blocking reads
-
-        // When entering the processing loop there will always be data to read
-        // so no point changing timeouts at this point
-
-        // For the second and subsequent executions of the processing loop, a
-        // non-blocking read is used so again no need to set the timeouts
-
-        // Because NIO supports non-blocking reading of the request line and
-        // headers the timeouts need to be set when returning the socket to
-        // the poller rather than here.
-
-        // NO-OP
-    }
-
-
     @Override
     protected boolean handleIncompleteRequestLineRead() {
         // Haven't finished reading the request so keep the socket

==================================================
