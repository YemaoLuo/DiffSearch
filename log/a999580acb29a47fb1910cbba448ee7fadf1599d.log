a999580acb29a47fb1910cbba448ee7fadf1599d
==================================================
Fix BZ-66508 - avoid delay on close after write error with NIO2
==================================================
Mark Thomas
==================================================
Wed Mar 8 18:23:05 2023 +0000
==================================================
WsHttpUpgradeHandler.java
Fix BZ-66508 - avoid delay on close after write error with NIO2

https://bz.apache.org/bugzilla/show_bug.cgi?id=66508


==================================================
WsRemoteEndpointImplServer.java
index ef39f74136..22e9c93ff3 100644
--- a/java/org/apache/tomcat/websocket/server/WsHttpUpgradeHandler.java
+++ b/java/org/apache/tomcat/websocket/server/WsHttpUpgradeHandler.java
@@ -16,6 +16,7 @@
  */
 package org.apache.tomcat.websocket.server;
 
+import java.io.EOFException;
 import java.io.IOException;
 import java.util.List;
 import java.util.Map;
@@ -241,11 +242,22 @@ public class WsHttpUpgradeHandler implements InternalHttpUpgradeHandler {
     private void close(CloseReason cr) {
         /*
          * Any call to this method is a result of a problem reading from the
-         * client. At this point that state of the connection is unknown.
-         * Attempt to send a close frame to the client and then close the socket
-         * immediately. There is no point in waiting for a close frame from the
-         * client because there is no guarantee that we can recover from
-         * whatever messed up state the client put the connection into.
+         * client. At this point that state of the connection is unknown. First
+         * attempt to clear the handler for any in-flight message write (that
+         * probably failed). If using NIO2 is is possible that the original
+         * error occurred on a write but this method was called during a read.
+         * The in-progress write will block the sending of the close frame
+         * unless the handler is cleared (effectively signalling the write
+         * failed).
+         */
+        wsRemoteEndpointServer.clearHandler(new EOFException(), true);
+
+        /* Then:
+         *  - send a close frame to the client
+         * - close the socket immediately.
+         * There is no point in waiting for a close frame from the client
+         * because there is no guarantee that we can recover from whatever
+         * messed up state the client put the connection into.
          */
         wsSession.onClose(cr);
     }

==================================================
