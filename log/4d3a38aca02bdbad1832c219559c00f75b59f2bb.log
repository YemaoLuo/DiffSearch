4d3a38aca02bdbad1832c219559c00f75b59f2bb
==================================================
Java8 Javadoc fixes
==================================================
Mark Thomas
==================================================
Wed Jan 21 13:08:06 2015 +0000
==================================================
ManagedConcurrentWeakHashMap.java
Java8 Javadoc fixes

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1653531 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SynchronizedQueue.java
index 0d2e758ebb..5872a95e23 100644
--- a/java/org/apache/tomcat/util/collections/ManagedConcurrentWeakHashMap.java
+++ b/java/org/apache/tomcat/util/collections/ManagedConcurrentWeakHashMap.java
@@ -33,6 +33,9 @@ import java.util.concurrent.ConcurrentMap;
  * <code>WeakHashMap</code> this class does not handle dead keys during common
  * access operations, but expects you to call its {@link #maintain()} method
  * periodically. Both keys and values are expected to be not-<code>null</code>.
+ *
+ * @param <K> The type of keys used with the Map instance
+ * @param <V> The type of values used with the Map instance
  */
 public class ManagedConcurrentWeakHashMap<K, V> extends AbstractMap<K, V> implements
         ConcurrentMap<K, V> {

==================================================
SynchronizedStack.java
index 95e8bcd6d1..44c9352b86 100644
--- a/java/org/apache/tomcat/util/collections/SynchronizedQueue.java
+++ b/java/org/apache/tomcat/util/collections/SynchronizedQueue.java
@@ -22,6 +22,8 @@ package org.apache.tomcat.util.collections;
  * create an unbounded queue with no requirement to shrink the queue. The aim is
  * to provide the bare minimum of required functionality as quickly as possible
  * with minimum garbage.
+ *
+ * @param <T> The type of object managed by this queue
  */
 public class SynchronizedQueue<T> {
 

==================================================
