6877e1fc34dd09e4d6cae4c098c9b5bc56b69747
==================================================
Generics for o.a.c.tribes.util
==================================================
Mark Emlyn
==================================================
Wed Dec 24 15:24:08 2008 +0000
==================================================
Arrays.java
Generics for o.a.c.tribes.util

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@729321 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StringManager.java
index 5b92e0f592..5f2cbf3861 100644
--- a/java/org/apache/catalina/tribes/util/Arrays.java
+++ b/java/org/apache/catalina/tribes/util/Arrays.java
@@ -132,7 +132,8 @@ public class Arrays {
     public static Member[] merge(Member[] m1, Member[] m2) {
         AbsoluteOrder.absoluteOrder(m1);
         AbsoluteOrder.absoluteOrder(m2);
-        ArrayList list = new ArrayList(java.util.Arrays.asList(m1));
+        ArrayList<Member> list =
+            new ArrayList<Member>(java.util.Arrays.asList(m1));
         for (int i=0; i<m2.length; i++) if ( !list.contains(m2[i]) ) list.add(m2[i]);
         Member[] result = new Member[list.size()];
         list.toArray(result);
@@ -145,13 +146,13 @@ public class Arrays {
     }
     
     public static Member[] diff(Membership complete, Membership local, MemberImpl ignore) {
-        ArrayList result = new ArrayList();
+        ArrayList<Member> result = new ArrayList<Member>();
         MemberImpl[] comp = complete.getMembers();
         for ( int i=0; i<comp.length; i++ ) {
             if ( ignore!=null && ignore.equals(comp[i]) ) continue;
             if ( local.getMember(comp[i]) == null ) result.add(comp[i]);
         }
-        return (MemberImpl[])result.toArray(new MemberImpl[result.size()]);
+        return result.toArray(new MemberImpl[result.size()]);
     }
     
     public static Member[] remove(Member[] all, Member remove) {
@@ -159,10 +160,10 @@ public class Arrays {
     }
     
     public static Member[] extract(Member[] all, Member[] remove) {
-        List alist = java.util.Arrays.asList(all);
-        ArrayList list = new ArrayList(alist);
+        List<Member> alist = java.util.Arrays.asList(all);
+        ArrayList<Member> list = new ArrayList<Member>(alist);
         for (int i=0; i<remove.length; i++ ) list.remove(remove[i]);
-        return (Member[])list.toArray(new Member[list.size()]);
+        return list.toArray(new Member[list.size()]);
     }
     
     public static int indexOf(Member member, Member[] members) {

==================================================
