0d78891330245c9fc0ab0dd1f5c1b2c0ca04e93b
==================================================
Move useServerCipherSuitesOrder/SSLHonorCipherOrder to SSLHostConfig
==================================================
Mark Thomas
==================================================
Fri May 1 10:33:43 2015 +0000
==================================================
AbstractHttp11Protocol.java
Move useServerCipherSuitesOrder/SSLHonorCipherOrder to SSLHostConfig

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1677107 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProtocol.java
index 1687d70664..c383f59602 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -382,21 +382,25 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
         defaultSSLHostConfig.setCertificateKeyFile(certificateKeyFile);
     }
 
+
     public void setAlgorithm(String keyManagerAlgorithm) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setKeyManagerAlgorithm(keyManagerAlgorithm);
     }
 
+
     public void setClientAuth(String certificateVerification) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCertificateVerification(certificateVerification);
     }
 
+
     public void setSSLVerifyClient(String certificateVerification) {
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCertificateVerification(certificateVerification);
     }
 
+
     public void setTrustMaxCertLength(int certificateVerificationDepth){
         registerDefaultSSLHostConfig();
         defaultSSLHostConfig.setCertificateVerificationDepth(certificateVerificationDepth);
@@ -407,6 +411,16 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     }
 
 
+    public void setUseServerCipherSuitesOrder(boolean honorCipherOrder) {
+        registerDefaultSSLHostConfig();
+        defaultSSLHostConfig.setHonorCipherOrder(honorCipherOrder);
+    }
+    public void setSSLHonorCipherOrder(boolean honorCipherOrder) {
+        registerDefaultSSLHostConfig();
+        defaultSSLHostConfig.setHonorCipherOrder(honorCipherOrder);
+    }
+
+
     // ------------------------------------------------------------- Common code
 
     // Common configuration required for all new HTTP11 processors

==================================================
AbstractJsseEndpoint.java
index c21ea55a0d..0499a11c4b 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -86,16 +86,6 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
     public String getSSLCipherSuite() { return ((AprEndpoint)getEndpoint()).getSSLCipherSuite(); }
     public void setSSLCipherSuite(String SSLCipherSuite) { ((AprEndpoint)getEndpoint()).setSSLCipherSuite(SSLCipherSuite); }
 
-    /**
-     * SSL honor cipher order.
-     *
-     * Set to <code>true</code> to enforce the <i>server's</i> cipher order
-     * instead of the default which is to allow the client to choose a
-     * preferred cipher.
-     */
-    public boolean getSSLHonorCipherOrder() { return ((AprEndpoint)getEndpoint()).getSSLHonorCipherOrder(); }
-    public void setSSLHonorCipherOrder(boolean SSLHonorCipherOrder) { ((AprEndpoint)getEndpoint()).setSSLHonorCipherOrder(SSLHonorCipherOrder); }
-
 
     /**
      * SSL certificate chain file.

==================================================
AprEndpoint.java
index 8e2df14451..953781be40 100644
--- a/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java
@@ -98,11 +98,9 @@ public abstract class AbstractJsseEndpoint<S> extends AbstractEndpoint<S> {
         engine.setEnabledCipherSuites(sslContextWrapper.getEnabledCiphers());
         engine.setEnabledProtocols(sslContextWrapper.getEnabledProtocols());
 
-        // Force server cipher suite order to be honored
         SSLParameters sslParameters = engine.getSSLParameters();
-        sslParameters.setUseCipherSuitesOrder(true);
-        // Following line may not be required. Depends if JRE takes a defensive
-        // copy. Keep the line to avoid any possible issues.
+        sslParameters.setUseCipherSuitesOrder(sslHostConfig.getHonorCipherOrder());
+        // In case the getter returns a defensive copy
         engine.setSSLParameters(sslParameters);
 
         return engine;

==================================================
SSLHostConfig.java
index 1a7fcbe6e0..18e5eda595 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -279,19 +279,6 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
     public void setSSLInsecureRenegotiation(boolean SSLInsecureRenegotiation) { this.SSLInsecureRenegotiation = SSLInsecureRenegotiation; }
     public boolean getSSLInsecureRenegotiation() { return SSLInsecureRenegotiation; }
 
-    protected boolean SSLHonorCipherOrder = false;
-    /**
-     * Configures whether or not this endpoint enforces the server's preference
-     * order ciphers.
-     *
-     * @param SSLHonorCipherOrder   Set to <code>true</code> to enforce the
-     *                              server's cipher order instead of the default
-     *                              which is to allow the client to choose a
-     *                              preferred cipher.
-     */
-    public void setSSLHonorCipherOrder(boolean SSLHonorCipherOrder) { this.SSLHonorCipherOrder = SSLHonorCipherOrder; }
-    public boolean getSSLHonorCipherOrder() { return SSLHonorCipherOrder; }
-
     /**
      * Disables compression of the SSL stream. This thwarts CRIME attack
      * and possibly improves performance by not compressing uncompressible
@@ -532,7 +519,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
                 }
 
                 // Set cipher order: client (default) or server
-                if (SSLHonorCipherOrder) {
+                if (sslHostConfig.getHonorCipherOrder()) {
                     boolean orderCiphersSupported = false;
                     try {
                         orderCiphersSupported = SSL.hasOp(SSL.SSL_OP_CIPHER_SERVER_PREFERENCE);

==================================================
