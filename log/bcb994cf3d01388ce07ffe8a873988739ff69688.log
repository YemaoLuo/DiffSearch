bcb994cf3d01388ce07ffe8a873988739ff69688
==================================================
BZ 48967: Replace strings "catalina.base" and "catalina.home"
==================================================
Rainer Jung
==================================================
Thu Sep 2 14:52:11 2010 +0000
==================================================
Globals.java
BZ 48967: Replace strings "catalina.base" and "catalina.home"
by globally defined constants.

Patch provided by Marc Guillemot.


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@991959 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Connector.java
index fb6425322b..f74d00d00c 100644
--- a/java/org/apache/catalina/Globals.java
+++ b/java/org/apache/catalina/Globals.java
@@ -329,4 +329,16 @@ public final class Globals {
      * Default domain for MBeans if none can be determined
      */
     public static final String DEFAULT_MBEAN_DOMAIN = "Catalina";
+
+    /**
+     * Name of the system property containing
+     * the tomcat product installation path
+     */
+    public static final String CATALINA_HOME_PROP = "catalina.home";
+
+    /**
+     * Name of the system property containing
+     * the tomcat instance installation path
+     */
+    public static final String CATALINA_BASE_PROP = "catalina.base";
 }

==================================================
StandardContext.java
index 66ee01334f..47328d5052 100644
--- a/java/org/apache/catalina/connector/Connector.java
+++ b/java/org/apache/catalina/connector/Connector.java
@@ -22,6 +22,7 @@ import java.util.HashMap;
 
 import javax.management.ObjectName;
 
+import org.apache.catalina.Globals;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleState;
 import org.apache.catalina.Service;
@@ -857,7 +858,7 @@ public class Connector extends LifecycleMBeanBase  {
         protocolHandler.setAdapter(adapter);
 
         IntrospectionUtils.setProperty(protocolHandler, "jkHome",
-                                       System.getProperty("catalina.base"));
+                                       System.getProperty(Globals.CATALINA_BASE_PROP));
 
         try {
             protocolHandler.init();

==================================================
FarmWarDeployer.java
index 4475aa69ed..a2b7dcfa20 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -5138,7 +5138,7 @@ public class StandardContext extends ContainerBase
      * entire servlet container (i.e. the Engine container if present).
      */
     protected File engineBase() {
-        String base=System.getProperty("catalina.base");
+        String base=System.getProperty(Globals.CATALINA_BASE_PROP);
         if( base == null ) {
             StandardEngine eng=(StandardEngine)this.getParent().getParent();
             base=eng.getBaseDir();
@@ -5257,7 +5257,7 @@ public class StandardContext extends ContainerBase
      */
     public File getConfigBase() {
         File configBase = 
-            new File(System.getProperty("catalina.base"), "conf");
+            new File(System.getProperty(Globals.CATALINA_BASE_PROP), "conf");
         if (!configBase.exists()) {
             return null;
         }

==================================================
ManagerServlet.java
index 43cd4824a6..ce9a4f7835 100644
--- a/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
+++ b/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
@@ -28,6 +28,7 @@ import javax.management.ObjectName;
 import org.apache.catalina.Container;
 import org.apache.catalina.Context;
 import org.apache.catalina.Engine;
+import org.apache.catalina.Globals;
 import org.apache.catalina.Host;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.ha.CatalinaCluster;
@@ -172,7 +173,7 @@ public class FarmWarDeployer extends ClusterListener implements ClusterDeployer,
             }
         }
          
-        configBase = new File(System.getProperty("catalina.base"), "conf");
+        configBase = new File(System.getProperty(Globals.CATALINA_BASE_PROP), "conf");
         if (engine != null) {
             configBase = new File(configBase, engine.getName());
         } 
@@ -537,7 +538,7 @@ public class FarmWarDeployer extends ClusterListener implements ClusterDeployer,
 
         File file = new File(host.getAppBase());
         if (!file.isAbsolute())
-            file = new File(System.getProperty("catalina.base"), host
+            file = new File(System.getProperty(Globals.CATALINA_BASE_PROP), host
                     .getAppBase());
         try {
             appBase = file.getCanonicalFile();

==================================================
HostManagerServlet.java
index 1855ef245b..577272b9a9 100644
--- a/java/org/apache/catalina/manager/ManagerServlet.java
+++ b/java/org/apache/catalina/manager/ManagerServlet.java
@@ -45,6 +45,7 @@ import org.apache.catalina.Container;
 import org.apache.catalina.ContainerServlet;
 import org.apache.catalina.Context;
 import org.apache.catalina.Engine;
+import org.apache.catalina.Globals;
 import org.apache.catalina.Host;
 import org.apache.catalina.Manager;
 import org.apache.catalina.Role;
@@ -461,10 +462,10 @@ public class ManagerServlet
         String appBase = ((Host) context.getParent()).getAppBase();
         deployed = new File(appBase);
         if (!deployed.isAbsolute()) {
-            deployed = new File(System.getProperty("catalina.base"),
+            deployed = new File(System.getProperty(Globals.CATALINA_BASE_PROP),
                                 appBase);
         }
-        configBase = new File(System.getProperty("catalina.base"), "conf");
+        configBase = new File(System.getProperty(Globals.CATALINA_BASE_PROP), "conf");
         Container container = context;
         Container host = null;
         Container engine = null;
@@ -1425,7 +1426,7 @@ public class ManagerServlet
 
         File file = new File(host.getAppBase());
         if (!file.isAbsolute())
-            file = new File(System.getProperty("catalina.base"),
+            file = new File(System.getProperty(Globals.CATALINA_BASE_PROP),
                             host.getAppBase());
         try {
             appBase = file.getCanonicalFile();

==================================================
JAASMemoryLoginModule.java
index 07d5305eec..fe8cd9d9e5 100644
--- a/java/org/apache/catalina/manager/host/HostManagerServlet.java
+++ b/java/org/apache/catalina/manager/host/HostManagerServlet.java
@@ -38,6 +38,7 @@ import org.apache.catalina.Container;
 import org.apache.catalina.ContainerServlet;
 import org.apache.catalina.Context;
 import org.apache.catalina.Engine;
+import org.apache.catalina.Globals;
 import org.apache.catalina.Host;
 import org.apache.catalina.Wrapper;
 import org.apache.catalina.core.ContainerBase;
@@ -364,7 +365,7 @@ public class HostManagerServlet
             file = new File(appBase);
         }
         if (!file.isAbsolute())
-            file = new File(System.getProperty("catalina.base"), file.getPath());
+            file = new File(System.getProperty(Globals.CATALINA_BASE_PROP), file.getPath());
         try {
             appBaseFile = file.getCanonicalFile();
         } catch (IOException e) {
@@ -674,7 +675,7 @@ public class HostManagerServlet
      */
     protected File getConfigBase(String hostName) {
         File configBase = 
-            new File(System.getProperty("catalina.base"), "conf");
+            new File(System.getProperty(Globals.CATALINA_BASE_PROP), "conf");
         if (!configBase.exists()) {
             return null;
         }

==================================================
MemoryRealm.java
index 35e8aa5c4c..3fb1d8f13f 100644
--- a/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
+++ b/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
@@ -35,6 +35,7 @@ import javax.security.auth.login.FailedLoginException;
 import javax.security.auth.login.LoginException;
 import javax.security.auth.spi.LoginModule;
 
+import org.apache.catalina.Globals;
 import org.apache.catalina.authenticator.Constants;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -339,7 +340,7 @@ public class JAASMemoryLoginModule extends MemoryRealm implements LoginModule {
         // Validate the existence of our configuration file
         File file = new File(pathname);
         if (!file.isAbsolute())
-            file = new File(System.getProperty("catalina.base"), pathname);
+            file = new File(System.getProperty(Globals.CATALINA_BASE_PROP), pathname);
         if (!file.exists() || !file.canRead()) {
             log.warn("Cannot load configuration file " + file.getAbsolutePath());
             return;

==================================================
Bootstrap.java
index a9edd18c4e..5d692249e7 100644
--- a/java/org/apache/catalina/realm/MemoryRealm.java
+++ b/java/org/apache/catalina/realm/MemoryRealm.java
@@ -25,6 +25,7 @@ import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Map;
 
+import org.apache.catalina.Globals;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.util.LifecycleBase;
 import org.apache.juli.logging.Log;
@@ -289,7 +290,7 @@ public class MemoryRealm  extends RealmBase {
         // Validate the existence of our database file
         File file = new File(pathname);
         if (!file.isAbsolute())
-            file = new File(System.getProperty("catalina.base"), pathname);
+            file = new File(System.getProperty(Globals.CATALINA_BASE_PROP), pathname);
         if (!file.exists() || !file.canRead())
             throw new LifecycleException
                 (sm.getString("memoryRealm.loadExist",

==================================================
Catalina.java
index 0b59517eee..c50a5c0761 100644
--- a/java/org/apache/catalina/startup/Bootstrap.java
+++ b/java/org/apache/catalina/startup/Bootstrap.java
@@ -31,6 +31,7 @@ import javax.management.MBeanServer;
 import javax.management.MBeanServerFactory;
 import javax.management.ObjectName;
 
+import org.apache.catalina.Globals;
 import org.apache.catalina.security.SecurityClassLoad;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -57,8 +58,8 @@ public final class Bootstrap {
     // -------------------------------------------------------------- Constants
 
 
-    protected static final String CATALINA_HOME_TOKEN = "${catalina.home}";
-    protected static final String CATALINA_BASE_TOKEN = "${catalina.base}";
+    protected static final String CATALINA_HOME_TOKEN = "${" + Globals.CATALINA_HOME_PROP + "}";
+    protected static final String CATALINA_BASE_TOKEN = "${" + Globals.CATALINA_BASE_PROP + "}";
 
 
     // ------------------------------------------------------- Static Variables
@@ -425,11 +426,11 @@ public final class Bootstrap {
     }
 
     public void setCatalinaHome(String s) {
-        System.setProperty( "catalina.home", s );
+        System.setProperty(Globals.CATALINA_HOME_PROP, s);
     }
 
     public void setCatalinaBase(String s) {
-        System.setProperty( "catalina.base", s );
+        System.setProperty(Globals.CATALINA_BASE_PROP, s);
     }
 
 
@@ -439,13 +440,13 @@ public final class Bootstrap {
      */
     private void setCatalinaBase() {
 
-        if (System.getProperty("catalina.base") != null)
+        if (System.getProperty(Globals.CATALINA_BASE_PROP) != null)
             return;
-        if (System.getProperty("catalina.home") != null)
-            System.setProperty("catalina.base",
-                               System.getProperty("catalina.home"));
+        if (System.getProperty(Globals.CATALINA_HOME_PROP) != null)
+            System.setProperty(Globals.CATALINA_BASE_PROP,
+                               System.getProperty(Globals.CATALINA_HOME_PROP));
         else
-            System.setProperty("catalina.base",
+            System.setProperty(Globals.CATALINA_BASE_PROP,
                                System.getProperty("user.dir"));
 
     }
@@ -457,23 +458,23 @@ public final class Bootstrap {
      */
     private void setCatalinaHome() {
 
-        if (System.getProperty("catalina.home") != null)
+        if (System.getProperty(Globals.CATALINA_HOME_PROP) != null)
             return;
         File bootstrapJar = 
             new File(System.getProperty("user.dir"), "bootstrap.jar");
         if (bootstrapJar.exists()) {
             try {
                 System.setProperty
-                    ("catalina.home", 
+                    (Globals.CATALINA_HOME_PROP, 
                      (new File(System.getProperty("user.dir"), ".."))
                      .getCanonicalPath());
             } catch (Exception e) {
                 // Ignore
-                System.setProperty("catalina.home",
+                System.setProperty(Globals.CATALINA_HOME_PROP,
                                    System.getProperty("user.dir"));
             }
         } else {
-            System.setProperty("catalina.home",
+            System.setProperty(Globals.CATALINA_HOME_PROP,
                                System.getProperty("user.dir"));
         }
 
@@ -484,7 +485,7 @@ public final class Bootstrap {
      * Get the value of the catalina.home environment variable.
      */
     public static String getCatalinaHome() {
-        return System.getProperty("catalina.home",
+        return System.getProperty(Globals.CATALINA_HOME_PROP,
                                   System.getProperty("user.dir"));
     }
 
@@ -493,7 +494,7 @@ public final class Bootstrap {
      * Get the value of the catalina.base environment variable.
      */
     public static String getCatalinaBase() {
-        return System.getProperty("catalina.base", getCatalinaHome());
+        return System.getProperty(Globals.CATALINA_BASE_PROP, getCatalinaHome());
     }
 
 

==================================================
CatalinaProperties.java
index 048c3b041d..3c87d85272 100644
--- a/java/org/apache/catalina/startup/Catalina.java
+++ b/java/org/apache/catalina/startup/Catalina.java
@@ -31,6 +31,7 @@ import java.util.List;
 import java.util.logging.LogManager;
 
 import org.apache.catalina.Container;
+import org.apache.catalina.Globals;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.Server;
 import org.apache.catalina.core.StandardServer;
@@ -268,7 +269,7 @@ public class Catalina {
 
         File file = new File(configFile);
         if (!file.isAbsolute())
-            file = new File(System.getProperty("catalina.base"), configFile);
+            file = new File(System.getProperty(Globals.CATALINA_BASE_PROP), configFile);
         return (file);
 
     }
@@ -681,21 +682,21 @@ public class Catalina {
 
     protected void initDirs() {
 
-        String catalinaHome = System.getProperty("catalina.home");
+        String catalinaHome = System.getProperty(Globals.CATALINA_HOME_PROP);
         if (catalinaHome == null) {
             // Backwards compatibility patch for J2EE RI 1.3
             String j2eeHome = System.getProperty("com.sun.enterprise.home");
             if (j2eeHome != null) {
                 catalinaHome=System.getProperty("com.sun.enterprise.home");
-            } else if (System.getProperty("catalina.base") != null) {
-                catalinaHome = System.getProperty("catalina.base");
+            } else if (System.getProperty(Globals.CATALINA_BASE_PROP) != null) {
+                catalinaHome = System.getProperty(Globals.CATALINA_BASE_PROP);
             } else {
                 // Use IntrospectionUtils and guess the dir
                 catalinaHome = IntrospectionUtils.guessInstall
-                    ("catalina.home", "catalina.base", "catalina.jar");
+                    (Globals.CATALINA_HOME_PROP, Globals.CATALINA_BASE_PROP, "catalina.jar");
                 if (catalinaHome == null) {
                     catalinaHome = IntrospectionUtils.guessInstall
-                        ("tomcat.install", "catalina.home", "tomcat.jar");
+                        ("tomcat.install", Globals.CATALINA_HOME_PROP, "tomcat.jar");
                 }
             }
         }
@@ -712,14 +713,14 @@ public class Catalina {
                     catalinaHome = home.getAbsolutePath();
                 }
             }
-            System.setProperty("catalina.home", catalinaHome);
+            System.setProperty(Globals.CATALINA_HOME_PROP, catalinaHome);
         }
 
-        if (System.getProperty("catalina.base") == null) {
-            System.setProperty("catalina.base",
+        if (System.getProperty(Globals.CATALINA_BASE_PROP) == null) {
+            System.setProperty(Globals.CATALINA_BASE_PROP,
                                catalinaHome);
         } else {
-            String catalinaBase = System.getProperty("catalina.base");
+            String catalinaBase = System.getProperty(Globals.CATALINA_BASE_PROP);
             File base = new File(catalinaBase);
             if (!base.isAbsolute()) {
                 try {
@@ -728,7 +729,7 @@ public class Catalina {
                     catalinaBase = base.getAbsolutePath();
                 }
             }
-            System.setProperty("catalina.base", catalinaBase);
+            System.setProperty(Globals.CATALINA_BASE_PROP, catalinaBase);
         }
         
         String temp = System.getProperty("java.io.tmpdir");

==================================================
Embedded.java
index 0028275efe..69c2f5f059 100644
--- a/java/org/apache/catalina/startup/CatalinaProperties.java
+++ b/java/org/apache/catalina/startup/CatalinaProperties.java
@@ -25,6 +25,7 @@ import java.net.URL;
 import java.util.Enumeration;
 import java.util.Properties;
 
+import org.apache.catalina.Globals;
 import org.apache.tomcat.util.ExceptionUtils;
 
 
@@ -87,6 +88,11 @@ public class CatalinaProperties {
         InputStream is = null;
         Throwable error = null;
 
+        ClassLoader cl = CatalinaProperties.class.getClassLoader();
+        System.err.println("CatalinaProprties: cl=" + cl.toString());
+        if ((cl = cl.getParent()) != null) {
+            System.err.println("CatalinaProprties: parent cl=" + cl.toString());
+        }
         try {
             String configUrl = getConfigUrl();
             if (configUrl != null) {
@@ -150,7 +156,7 @@ public class CatalinaProperties {
      * Get the value of the catalina.home environment variable.
      */
     private static String getCatalinaHome() {
-        return System.getProperty("catalina.home",
+        return System.getProperty(Globals.CATALINA_HOME_PROP,
                                   System.getProperty("user.dir"));
     }
     
@@ -159,7 +165,7 @@ public class CatalinaProperties {
      * Get the value of the catalina.base environment variable.
      */
     private static String getCatalinaBase() {
-        return System.getProperty("catalina.base", getCatalinaHome());
+        return System.getProperty(Globals.CATALINA_BASE_PROP, getCatalinaHome());
     }
 
 

==================================================
ExpandWar.java
index 26c1cbdf95..55279d0a6c 100644
--- a/java/org/apache/catalina/startup/Embedded.java
+++ b/java/org/apache/catalina/startup/Embedded.java
@@ -28,6 +28,7 @@ import org.apache.catalina.Authenticator;
 import org.apache.catalina.Container;
 import org.apache.catalina.Context;
 import org.apache.catalina.Engine;
+import org.apache.catalina.Globals;
 import org.apache.catalina.Host;
 import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleException;
@@ -282,20 +283,20 @@ public class Embedded  extends StandardService {
         return await;
     }
 
-    public void setCatalinaHome( String s ) {
-        System.setProperty( "catalina.home", s);
+    public void setCatalinaHome(String s) {
+        System.setProperty(Globals.CATALINA_HOME_PROP, s);
     }
 
-    public void setCatalinaBase( String s ) {
-        System.setProperty( "catalina.base", s);
+    public void setCatalinaBase(String s) {
+        System.setProperty(Globals.CATALINA_BASE_PROP, s);
     }
 
     public String getCatalinaHome() {
-        return System.getProperty("catalina.home");
+        return System.getProperty(Globals.CATALINA_HOME_PROP);
     }
 
     public String getCatalinaBase() {
-        return System.getProperty("catalina.base");
+        return System.getProperty(Globals.CATALINA_BASE_PROP);
     }
 
 
@@ -902,21 +903,21 @@ public class Embedded  extends StandardService {
 
     protected void initDirs() {
 
-        String catalinaHome = System.getProperty("catalina.home");
+        String catalinaHome = System.getProperty(Globals.CATALINA_HOME_PROP);
         if (catalinaHome == null) {
             // Backwards compatibility patch for J2EE RI 1.3
             String j2eeHome = System.getProperty("com.sun.enterprise.home");
             if (j2eeHome != null) {
                 catalinaHome=System.getProperty("com.sun.enterprise.home");
-            } else if (System.getProperty("catalina.base") != null) {
-                catalinaHome = System.getProperty("catalina.base");
+            } else if (System.getProperty(Globals.CATALINA_BASE_PROP) != null) {
+                catalinaHome = System.getProperty(Globals.CATALINA_BASE_PROP);
             } else {
                 // Use IntrospectionUtils and guess the dir
                 catalinaHome = IntrospectionUtils.guessInstall
-                    ("catalina.home", "catalina.base", "catalina.jar");
+                    (Globals.CATALINA_HOME_PROP, Globals.CATALINA_BASE_PROP, "catalina.jar");
                 if (catalinaHome == null) {
                     catalinaHome = IntrospectionUtils.guessInstall
-                        ("tomcat.install", "catalina.home", "tomcat.jar");
+                        ("tomcat.install", Globals.CATALINA_HOME_PROP, "tomcat.jar");
                 }
             }
         }
@@ -933,14 +934,14 @@ public class Embedded  extends StandardService {
                     catalinaHome = home.getAbsolutePath();
                 }
             }
-            System.setProperty("catalina.home", catalinaHome);
+            System.setProperty(Globals.CATALINA_HOME_PROP, catalinaHome);
         }
 
-        if (System.getProperty("catalina.base") == null) {
-            System.setProperty("catalina.base",
+        if (System.getProperty(Globals.CATALINA_BASE_PROP) == null) {
+            System.setProperty(Globals.CATALINA_BASE_PROP,
                                catalinaHome);
         } else {
-            String catalinaBase = System.getProperty("catalina.base");
+            String catalinaBase = System.getProperty(Globals.CATALINA_BASE_PROP);
             File base = new File(catalinaBase);
             if (!base.isAbsolute()) {
                 try {
@@ -949,7 +950,7 @@ public class Embedded  extends StandardService {
                     catalinaBase = base.getAbsolutePath();
                 }
             }
-            System.setProperty("catalina.base", catalinaBase);
+            System.setProperty(Globals.CATALINA_BASE_PROP, catalinaBase);
         }
         
         String temp = System.getProperty("java.io.tmpdir");

==================================================
HostConfig.java
index de3e051496..e9fdcdcfd9 100644
--- a/java/org/apache/catalina/startup/ExpandWar.java
+++ b/java/org/apache/catalina/startup/ExpandWar.java
@@ -31,6 +31,7 @@ import java.util.Enumeration;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 
+import org.apache.catalina.Globals;
 import org.apache.catalina.Host;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -78,7 +79,7 @@ public class ExpandWar {
         // Make sure that there is no such directory already existing
         File appBase = new File(host.getAppBase());
         if (!appBase.isAbsolute()) {
-            appBase = new File(System.getProperty("catalina.base"),
+            appBase = new File(System.getProperty(Globals.CATALINA_BASE_PROP),
                                host.getAppBase());
         }
         if (!appBase.exists() || !appBase.isDirectory()) {
@@ -193,7 +194,7 @@ public class ExpandWar {
         // Make the appBase absolute
         File appBase = new File(host.getAppBase());
         if (!appBase.isAbsolute()) {
-            appBase = new File(System.getProperty("catalina.base"),
+            appBase = new File(System.getProperty(Globals.CATALINA_BASE_PROP),
                                host.getAppBase());
         }
         

==================================================
Tomcat.java
index 11f91fc05a..d44b9c4d54 100644
--- a/java/org/apache/catalina/startup/HostConfig.java
+++ b/java/org/apache/catalina/startup/HostConfig.java
@@ -41,6 +41,7 @@ import javax.management.ObjectName;
 import org.apache.catalina.Container;
 import org.apache.catalina.Context;
 import org.apache.catalina.Engine;
+import org.apache.catalina.Globals;
 import org.apache.catalina.Host;
 import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleEvent;
@@ -437,7 +438,7 @@ public class HostConfig
     
     protected File returnCanonicalPath(String path) {
         File file = new File(path);
-        File base = new File(System.getProperty("catalina.base"));
+        File base = new File(System.getProperty(Globals.CATALINA_BASE_PROP));
         if (!file.isAbsolute())
             file = new File(base,path);
         try {

==================================================
Tool.java
index 7dc46171de..f1b5588b28 100644
--- a/java/org/apache/catalina/startup/Tomcat.java
+++ b/java/org/apache/catalina/startup/Tomcat.java
@@ -32,6 +32,7 @@ import javax.servlet.ServletException;
 import org.apache.catalina.Container;
 import org.apache.catalina.Context;
 import org.apache.catalina.Engine;
+import org.apache.catalina.Globals;
 import org.apache.catalina.Host;
 import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleEvent;
@@ -539,10 +540,10 @@ public class Tomcat {
     
     protected void initBaseDir() {
         if (basedir == null) {
-            basedir = System.getProperty("catalina.base");
+            basedir = System.getProperty(Globals.CATALINA_BASE_PROP);
         }
         if (basedir == null) {
-            basedir = System.getProperty("catalina.home");
+            basedir = System.getProperty(Globals.CATALINA_HOME_PROP);
         }
         if (basedir == null) {
             // Create a temp dir.
@@ -558,8 +559,8 @@ public class Tomcat {
                 }
             }
         }
-        System.setProperty("catalina.home", basedir);
-        System.setProperty("catalina.base", basedir);
+        System.setProperty(Globals.CATALINA_HOME_PROP, basedir);
+        System.setProperty(Globals.CATALINA_BASE_PROP, basedir);
     }
 
     static String[] silences = new String[] {

==================================================
MemoryUserDatabase.java
index dbbe0669f2..27a2600ec3 100644
--- a/java/org/apache/catalina/startup/Tool.java
+++ b/java/org/apache/catalina/startup/Tool.java
@@ -23,6 +23,7 @@ import java.io.File;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 
+import org.apache.catalina.Globals;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
@@ -87,7 +88,7 @@ public final class Tool {
     /**
      * The pathname of our installation base directory.
      */
-    private static String catalinaHome = System.getProperty("catalina.home");
+    private static String catalinaHome = System.getProperty(Globals.CATALINA_HOME_PROP);
 
 
     /**
@@ -120,7 +121,7 @@ public final class Tool {
 
         // Verify that "catalina.home" was passed.
         if (catalinaHome == null) {
-            log.error("Must set 'catalina.home' system property");
+            log.error("Must set '" + Globals.CATALINA_HOME_PROP + "' system property");
             System.exit(1);
         }
 

==================================================
AccessLogValve.java
index 43989e28cb..d729714e3c 100644
--- a/java/org/apache/catalina/users/MemoryUserDatabase.java
+++ b/java/org/apache/catalina/users/MemoryUserDatabase.java
@@ -28,6 +28,7 @@ import java.io.PrintWriter;
 import java.util.HashMap;
 import java.util.Iterator;
 
+import org.apache.catalina.Globals;
 import org.apache.catalina.Group;
 import org.apache.catalina.Role;
 import org.apache.catalina.User;
@@ -379,7 +380,7 @@ public class MemoryUserDatabase implements UserDatabase {
                 // Construct a reader for the XML input file (if it exists)
                 File file = new File(pathname);
                 if (!file.isAbsolute()) {
-                    file = new File(System.getProperty("catalina.base"),
+                    file = new File(System.getProperty(Globals.CATALINA_BASE_PROP),
                                     pathname);
                 }
                 if (!file.exists()) {
@@ -491,7 +492,7 @@ public class MemoryUserDatabase implements UserDatabase {
 
         File file = new File(pathname);
         if (!file.isAbsolute()) {
-            file = new File(System.getProperty("catalina.base"),
+            file = new File(System.getProperty(Globals.CATALINA_BASE_PROP),
                             pathname);
         }
         File dir = file.getParentFile();
@@ -522,7 +523,7 @@ public class MemoryUserDatabase implements UserDatabase {
         File fileNew = new File(pathnameNew);
         if (!fileNew.isAbsolute()) {
             fileNew =
-                new File(System.getProperty("catalina.base"), pathnameNew);
+                new File(System.getProperty(Globals.CATALINA_BASE_PROP), pathnameNew);
         }
         PrintWriter writer = null;
         try {
@@ -578,13 +579,13 @@ public class MemoryUserDatabase implements UserDatabase {
         File fileOld = new File(pathnameOld);
         if (!fileOld.isAbsolute()) {
             fileOld =
-                new File(System.getProperty("catalina.base"), pathnameOld);
+                new File(System.getProperty(Globals.CATALINA_BASE_PROP), pathnameOld);
         }
         fileOld.delete();
         File fileOrig = new File(pathname);
         if (!fileOrig.isAbsolute()) {
             fileOrig =
-                new File(System.getProperty("catalina.base"), pathname);
+                new File(System.getProperty(Globals.CATALINA_BASE_PROP), pathname);
         }
         if (fileOrig.exists()) {
             fileOld.delete();

==================================================
AntCompiler.java
index 2513b2110f..c3a614ba41 100644
--- a/java/org/apache/catalina/valves/AccessLogValve.java
+++ b/java/org/apache/catalina/valves/AccessLogValve.java
@@ -37,6 +37,7 @@ import javax.servlet.http.Cookie;
 import javax.servlet.http.HttpSession;
 
 import org.apache.catalina.AccessLog;
+import org.apache.catalina.Globals;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleState;
 import org.apache.catalina.connector.Request;
@@ -724,7 +725,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
         // Create the directory if necessary
         File dir = new File(directory);
         if (!dir.isAbsolute())
-            dir = new File(System.getProperty("catalina.base"), directory);
+            dir = new File(System.getProperty(Globals.CATALINA_BASE_PROP), directory);
         dir.mkdirs();
 
         // Open the current log file

==================================================
AbstractEndpoint.java
index be95ffab31..d59a89096e 100644
--- a/java/org/apache/jasper/compiler/AntCompiler.java
+++ b/java/org/apache/jasper/compiler/AntCompiler.java
@@ -24,6 +24,7 @@ import java.io.IOException;
 import java.io.PrintStream;
 import java.util.StringTokenizer;
 
+import org.apache.catalina.Globals;
 import org.apache.jasper.JasperException;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -74,8 +75,8 @@ public class AntCompiler extends Compiler {
         logger.setErrorPrintStream(System.err);
         logger.setMessageOutputLevel(Project.MSG_INFO);
         project.addBuildListener( logger);
-        if (System.getProperty("catalina.home") != null) {
-            project.setBasedir( System.getProperty("catalina.home"));
+        if (System.getProperty(Globals.CATALINA_HOME_PROP) != null) {
+            project.setBasedir(System.getProperty(Globals.CATALINA_HOME_PROP));
         }
         
         if( options.getCompiler() != null ) {

==================================================
JSSESocketFactory.java
index c650f60019..8c89c15517 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -25,6 +25,7 @@ import java.util.concurrent.TimeUnit;
 
 import javax.net.ssl.KeyManagerFactory;
 
+import org.apache.catalina.Globals;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.IntrospectionUtils;
@@ -466,7 +467,7 @@ public abstract class AbstractEndpoint {
     private String keystoreFile = System.getProperty("user.home")+"/.keystore";
     public String getKeystoreFile() { return keystoreFile;}
     public void setKeystoreFile(String s ) { 
-        String file = adjustRelativePath(s,System.getProperty("catalina.base"));
+        String file = adjustRelativePath(s, System.getProperty(Globals.CATALINA_BASE_PROP));
         this.keystoreFile = file; 
     }
 
@@ -513,7 +514,7 @@ public abstract class AbstractEndpoint {
     private String truststoreFile = System.getProperty("javax.net.ssl.trustStore");
     public String getTruststoreFile() {return truststoreFile;}
     public void setTruststoreFile(String s) {
-        String file = adjustRelativePath(s,System.getProperty("catalina.base"));
+        String file = adjustRelativePath(s, System.getProperty(Globals.CATALINA_BASE_PROP));
         this.truststoreFile = file;
     }
 

==================================================
