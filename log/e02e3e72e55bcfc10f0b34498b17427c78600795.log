e02e3e72e55bcfc10f0b34498b17427c78600795
==================================================
Add in voted on fixes
==================================================
Filip Hanik
==================================================
Fri Oct 19 02:16:41 2007 +0000
==================================================
ConnectorCreateRule.java
index d361496c4c..19a80ef8a4 100644
--- a/java/org/apache/catalina/loader/mbeans-descriptors.xml
+++ b/java/org/apache/catalina/loader/mbeans-descriptors.xml
@@ -72,4 +72,9 @@
                 group="Loader"
                  type="org.apache.catalina.loader.WebappClassLoader" />
 
+  <mbean         name="VirtualWebappLoader"
+          description="Extension of the webapp class loader with additional features"
+               domain="Catalina"
+                group="Loader"
+                 type="org.apache.catalina.loader.VirtualWebappLoader" />
 </mbeans-descriptors>

==================================================
McastServiceImpl.java
index d4bd869408..06d75bc6b4 100644
--- a/java/org/apache/catalina/startup/ConnectorCreateRule.java
+++ b/java/org/apache/catalina/startup/ConnectorCreateRule.java
@@ -27,6 +27,8 @@ import org.apache.catalina.Service;
 import org.apache.catalina.Executor;
 import org.apache.tomcat.util.IntrospectionUtils;
 import java.lang.reflect.Method;
+import org.apache.juli.logging.LogFactory;
+import org.apache.juli.logging.Log;
 
 
 /**
@@ -35,7 +37,7 @@ import java.lang.reflect.Method;
 
 public class ConnectorCreateRule extends Rule {
 
-
+    protected static Log log = LogFactory.getLog(ConnectorCreateRule.class);
     // --------------------------------------------------------- Public Methods
 
 
@@ -58,7 +60,11 @@ public class ConnectorCreateRule extends Rule {
     
     public void _setExecutor(Connector con, Executor ex) throws Exception {
         Method m = IntrospectionUtils.findMethod(con.getProtocolHandler().getClass(),"setExecutor",new Class[] {java.util.concurrent.Executor.class});
-        m.invoke(con.getProtocolHandler(),new Object[] {ex});
+        if (m!=null) {
+            m.invoke(con.getProtocolHandler(), new Object[] {ex});
+        }else {
+            log.warn("Connector ["+con+"] does not support external executors. Method setExecutor(java.util.concurrent.Executor) not found.");
+        }
     }
 
 

==================================================
Compiler.java
index e5ae5ab87d..c17affa1c7 100644
--- a/java/org/apache/catalina/tribes/membership/McastServiceImpl.java
+++ b/java/org/apache/catalina/tribes/membership/McastServiceImpl.java
@@ -29,6 +29,7 @@ import java.util.Arrays;
 import org.apache.catalina.tribes.Channel;
 import org.apache.catalina.tribes.Member;
 import org.apache.catalina.tribes.MembershipListener;
+import java.net.BindException;
 
 /**
  * A <b>membership</b> implementation using simple multicast.
@@ -182,8 +183,22 @@ public class McastServiceImpl
     }
     
     protected void setupSocket() throws IOException {
-        if (mcastBindAddress != null) socket = new MulticastSocket(new InetSocketAddress(mcastBindAddress, port));
-        else socket = new MulticastSocket(port);
+        if (mcastBindAddress != null) {
+            try {
+                log.info("Attempting to bind the multicast socket to "+address+":"+port);
+                socket = new MulticastSocket(new InetSocketAddress(address,port));
+            } catch (BindException e) {
+                /*
+                 * On some plattforms (e.g. Linux) it is not possible to bind
+                 * to the multicast address. In this case only bind to the
+                 * port.
+                 */
+                log.info("Binding to multicast address, failed. Binding to port only.");
+                socket = new MulticastSocket(port);
+            }
+        } else {
+            socket = new MulticastSocket(port);
+        }
         socket.setLoopbackMode(false); //hint that we don't need loop back messages
         if (mcastBindAddress != null) {
 			if(log.isInfoEnabled())

==================================================
NioBlockingSelector.java
index fbe95a051c..8b4e32fdc0 100644
--- a/java/org/apache/jasper/compiler/Compiler.java
+++ b/java/org/apache/jasper/compiler/Compiler.java
@@ -141,23 +141,9 @@ public abstract class Compiler {
 
         ctxt.checkOutputDir();
         String javaFileName = ctxt.getServletJavaFileName();
-        ServletWriter writer = null;
 
+        ServletWriter writer = null;
         try {
-            // Setup the ServletWriter
-            String javaEncoding = ctxt.getOptions().getJavaEncoding();
-            OutputStreamWriter osw = null;
-
-            try {
-                osw = new OutputStreamWriter(
-                        new FileOutputStream(javaFileName), javaEncoding);
-            } catch (UnsupportedEncodingException ex) {
-                errDispatcher.jspError("jsp.error.needAlternateJavaEncoding",
-                        javaEncoding);
-            }
-
-            writer = new ServletWriter(new PrintWriter(osw));
-            ctxt.setWriter(writer);
 
             // Reset the temporary variable counter for the generator.
             JspUtil.resetTemporaryVariableName();
@@ -168,6 +154,7 @@ public abstract class Compiler {
 
             if (ctxt.isPrototypeMode()) {
                 // generate prototype .java file for the tag file
+                writer = setupContextWriter(javaFileName);
                 Generator.generate(writer, this, pageNodes);
                 writer.close();
                 writer = null;
@@ -207,6 +194,7 @@ public abstract class Compiler {
             ELFunctionMapper.map(this, pageNodes);
 
             // generate servlet .java file
+            writer = setupContextWriter(javaFileName);
             Generator.generate(writer, this, pageNodes);
             writer.close();
             writer = null;
@@ -259,6 +247,26 @@ public abstract class Compiler {
         return smapStr;
     }
 
+	private ServletWriter setupContextWriter(String javaFileName)
+			throws FileNotFoundException, JasperException {
+		ServletWriter writer;
+		// Setup the ServletWriter
+		String javaEncoding = ctxt.getOptions().getJavaEncoding();
+		OutputStreamWriter osw = null;
+
+		try {
+		    osw = new OutputStreamWriter(
+		            new FileOutputStream(javaFileName), javaEncoding);
+		} catch (UnsupportedEncodingException ex) {
+		    errDispatcher.jspError("jsp.error.needAlternateJavaEncoding",
+		            javaEncoding);
+		}
+
+		writer = new ServletWriter(new PrintWriter(osw));
+		ctxt.setWriter(writer);
+		return writer;
+	}
+
     /**
      * Compile the servlet from .java file to .class file
      */

==================================================
NioSelectorPool.java
index eb49ba240e..7a9d36676e 100644
--- a/java/org/apache/tomcat/util/net/NioBlockingSelector.java
+++ b/java/org/apache/tomcat/util/net/NioBlockingSelector.java
@@ -47,10 +47,6 @@ public class NioBlockingSelector {
         boolean timedout = false;
         int keycount = 1; //assume we can write
         long time = System.currentTimeMillis(); //start the timeout timer
-        if (socket.getBufHandler().getWriteBuffer() != buf) {
-            socket.getBufHandler().getWriteBuffer().put(buf);
-            buf = socket.getBufHandler().getWriteBuffer();
-        }
         try {
             while ( (!timedout) && buf.hasRemaining()) {
                 if (keycount > 0) { //only write if we were registered for a write

==================================================
SecureNioChannel.java
index 5562b4d9c4..f5852a012e 100644
--- a/java/org/apache/tomcat/util/net/NioSelectorPool.java
+++ b/java/org/apache/tomcat/util/net/NioSelectorPool.java
@@ -139,10 +139,6 @@ public class NioSelectorPool {
         boolean timedout = false;
         int keycount = 1; //assume we can write
         long time = System.currentTimeMillis(); //start the timeout timer
-        if ( socket.getBufHandler().getWriteBuffer()!= buf ) {
-            socket.getBufHandler().getWriteBuffer().put(buf);
-            buf = socket.getBufHandler().getWriteBuffer();
-        }
         try {
             while ( (!timedout) && buf.hasRemaining() ) {
                 int cnt = 0;

==================================================
