46fe08123ecc72da75f6bc009173736e91df1ebd
==================================================
Refactor AuthenticatorBase to support future plans for the JASPIC implementation.
==================================================
Mark Thomas
==================================================
Tue Feb 9 14:22:29 2016 +0000
==================================================
AuthenticatorBase.java
Refactor AuthenticatorBase to support future plans for the JASPIC implementation.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1729390 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BasicAuthenticator.java
index ccbd3e8bb9..833cad5957 100644
--- a/java/org/apache/catalina/authenticator/AuthenticatorBase.java
+++ b/java/org/apache/catalina/authenticator/AuthenticatorBase.java
@@ -669,6 +669,12 @@ public abstract class AuthenticatorBase extends ValveBase implements Authenticat
     }
 
 
+    @Override
+    public boolean authenticate(Request request, HttpServletResponse response) throws IOException {
+        return doAuthenticate(request, response);
+    }
+
+
     /**
      * Authenticate the user making this request, based on the login
      * configuration of the {@link Context} with which this Authenticator is
@@ -681,9 +687,11 @@ public abstract class AuthenticatorBase extends ValveBase implements Authenticat
      *
      * @exception IOException if an input/output error occurs
      */
-    @Override
-    public abstract boolean authenticate(Request request,
-            HttpServletResponse response) throws IOException;
+    protected boolean doAuthenticate(Request request, HttpServletResponse response)
+            throws IOException {
+        // Defaults to false in case sub-class doesn't implement this method.
+        return false;
+    }
 
 
     /**

==================================================
DigestAuthenticator.java
index f77dfa8d49..1266e93742 100644
--- a/java/org/apache/catalina/authenticator/BasicAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/BasicAuthenticator.java
@@ -14,11 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-
 package org.apache.catalina.authenticator;
 
-
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.security.Principal;
@@ -33,8 +30,6 @@ import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.codec.binary.Base64;
 
-
-
 /**
  * An <b>Authenticator</b> and <b>Valve</b> implementation of HTTP BASIC
  * Authentication, as outlined in RFC 2617:  "HTTP Authentication: Basic
@@ -43,24 +38,14 @@ import org.apache.tomcat.util.codec.binary.Base64;
  * @author Craig R. McClanahan
  */
 public class BasicAuthenticator extends AuthenticatorBase {
+
     private static final Log log = LogFactory.getLog(BasicAuthenticator.class);
 
 
     // --------------------------------------------------------- Public Methods
 
-    /**
-     * Authenticate the user making this request, based on the specified
-     * login configuration.  Return <code>true</code> if any specified
-     * constraint has been satisfied, or <code>false</code> if we have
-     * created a response challenge already.
-     *
-     * @param request Request we are processing
-     * @param response Response we are creating
-     *
-     * @exception IOException if an input/output error occurs
-     */
     @Override
-    public boolean authenticate(Request request, HttpServletResponse response)
+    protected boolean doAuthenticate(Request request, HttpServletResponse response)
             throws IOException {
 
         if (checkForCachedAuthentication(request, response, true)) {

==================================================
FormAuthenticator.java
index a8c4c27ebc..5e5beaf99c 100644
--- a/java/org/apache/catalina/authenticator/DigestAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/DigestAuthenticator.java
@@ -182,19 +182,8 @@ public class DigestAuthenticator extends AuthenticatorBase {
 
     // --------------------------------------------------------- Public Methods
 
-    /**
-     * Authenticate the user making this request, based on the specified
-     * login configuration.  Return <code>true</code> if any specified
-     * constraint has been satisfied, or <code>false</code> if we have
-     * created a response challenge already.
-     *
-     * @param request Request we are processing
-     * @param response Response we are creating
-     *
-     * @exception IOException if an input/output error occurs
-     */
     @Override
-    public boolean authenticate(Request request, HttpServletResponse response)
+    protected boolean doAuthenticate(Request request, HttpServletResponse response)
             throws IOException {
 
         // NOTE: We don't try to reauthenticate using any existing SSO session,

==================================================
NonLoginAuthenticator.java
index 2f2429b9fc..2a6b78ffc3 100644
--- a/java/org/apache/catalina/authenticator/FormAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/FormAuthenticator.java
@@ -117,20 +117,8 @@ public class FormAuthenticator
 
     // --------------------------------------------------------- Public Methods
 
-
-    /**
-     * Authenticate the user making this request, based on the specified
-     * login configuration.  Return <code>true</code> if any specified
-     * constraint has been satisfied, or <code>false</code> if we have
-     * created a response challenge already.
-     *
-     * @param request Request we are processing
-     * @param response Response we are creating
-     *
-     * @exception IOException if an input/output error occurs
-     */
     @Override
-    public boolean authenticate(Request request, HttpServletResponse response)
+    protected boolean doAuthenticate(Request request, HttpServletResponse response)
             throws IOException {
 
         if (checkForCachedAuthentication(request, response, true)) {

==================================================
SSLAuthenticator.java
index 3018fff50b..dfdcee0b12 100644
--- a/java/org/apache/catalina/authenticator/NonLoginAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/NonLoginAuthenticator.java
@@ -74,7 +74,7 @@ public final class NonLoginAuthenticator extends AuthenticatorBase {
      * @exception IOException if an input/output error occurs
      */
     @Override
-    public boolean authenticate(Request request, HttpServletResponse response)
+    protected boolean doAuthenticate(Request request, HttpServletResponse response)
         throws IOException {
 
         // Don't try and use SSO to authenticate since there is no auth

==================================================
SpnegoAuthenticator.java
index 22368706cf..cd2bd3b646 100644
--- a/java/org/apache/catalina/authenticator/SSLAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/SSLAuthenticator.java
@@ -35,18 +35,8 @@ public class SSLAuthenticator extends AuthenticatorBase {
 
     // --------------------------------------------------------- Public Methods
 
-    /**
-     * Authenticate the user by checking for the existence of a certificate
-     * chain, validating it against the trust manager for the connector and then
-     * validating the user's identity against the configured Realm.
-     *
-     * @param request Request we are processing
-     * @param response Response we are creating
-     *
-     * @exception IOException if an input/output error occurs
-     */
     @Override
-    public boolean authenticate(Request request, HttpServletResponse response)
+    protected boolean doAuthenticate(Request request, HttpServletResponse response)
             throws IOException {
 
         // NOTE: We don't try to reauthenticate using any existing SSO session,

==================================================
