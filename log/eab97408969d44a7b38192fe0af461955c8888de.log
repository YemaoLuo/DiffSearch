eab97408969d44a7b38192fe0af461955c8888de
==================================================
Remove SecurityManagaer support from the EL API
==================================================
Mark Thomas
==================================================
Wed Jan 11 18:29:04 2023 +0000
==================================================
BeanELResolver.java
Remove SecurityManagaer support from the EL API


==================================================
ELProcessor.java
index c470b92734..9b99ef50db 100644
--- a/java/jakarta/el/BeanELResolver.java
+++ b/java/jakarta/el/BeanELResolver.java
@@ -22,8 +22,6 @@ import java.beans.Introspector;
 import java.beans.PropertyDescriptor;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
-import java.security.AccessController;
-import java.security.PrivilegedAction;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Objects;
@@ -39,14 +37,7 @@ public class BeanELResolver extends ELResolver {
     private static final String CACHE_SIZE_PROP = "org.apache.el.BeanELResolver.CACHE_SIZE";
 
     static {
-        String cacheSizeStr;
-        if (System.getSecurityManager() == null) {
-            cacheSizeStr = System.getProperty(CACHE_SIZE_PROP, "1000");
-        } else {
-            cacheSizeStr = AccessController.doPrivileged(
-                    (PrivilegedAction<String>) () -> System.getProperty(CACHE_SIZE_PROP, "1000"));
-        }
-        CACHE_SIZE = Integer.parseInt(cacheSizeStr);
+        CACHE_SIZE = Integer.parseInt(System.getProperty(CACHE_SIZE_PROP, "1000"));
     }
 
     private final boolean readOnly;

==================================================
ExpressionFactory.java
index 736ca9ce09..df2fc0120c 100644
--- a/java/jakarta/el/ELProcessor.java
+++ b/java/jakarta/el/ELProcessor.java
@@ -96,7 +96,7 @@ public class ELProcessor {
         Class<?> clazz = context.getImportHandler().resolveClass(className);
 
         if (clazz == null) {
-            clazz = Class.forName(className, true, Util.getContextClassLoader());
+            clazz = Class.forName(className, true, Thread.currentThread().getContextClassLoader());
         }
 
         if (!Modifier.isPublic(clazz.getModifiers())) {

==================================================
ImportHandler.java
index aeacc00b8c..2eca6205df 100644
--- a/java/jakarta/el/ExpressionFactory.java
+++ b/java/jakarta/el/ExpressionFactory.java
@@ -25,8 +25,6 @@ import java.lang.ref.WeakReference;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
-import java.security.AccessController;
-import java.security.PrivilegedAction;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Properties;
@@ -42,27 +40,14 @@ import java.util.concurrent.locks.ReentrantReadWriteLock;
  */
 public abstract class ExpressionFactory {
 
-    private static final boolean IS_SECURITY_ENABLED = (System.getSecurityManager() != null);
-
     private static final String PROPERTY_NAME = "jakarta.el.ExpressionFactory";
 
-    private static final String PROPERTY_FILE;
+    private static final String PROPERTY_FILE =
+            System.getProperty("java.home") + File.separator + "lib" + File.separator + "el.properties";
 
     private static final CacheValue nullTcclFactory = new CacheValue();
     private static final Map<CacheKey, CacheValue> factoryCache = new ConcurrentHashMap<>();
 
-    static {
-        if (IS_SECURITY_ENABLED) {
-            PROPERTY_FILE = AccessController.doPrivileged(
-                    (PrivilegedAction<String>) () -> System.getProperty("java.home") + File.separator +
-                            "lib" + File.separator + "el.properties"
-            );
-        } else {
-            PROPERTY_FILE = System.getProperty("java.home") + File.separator + "lib" +
-                    File.separator + "el.properties";
-        }
-    }
-
     /**
      * Create a new {@link ExpressionFactory}. The class to use is determined by
      * the following search order:
@@ -89,7 +74,7 @@ public abstract class ExpressionFactory {
     public static ExpressionFactory newInstance(Properties properties) {
         ExpressionFactory result = null;
 
-        ClassLoader tccl = Util.getContextClassLoader();
+        ClassLoader tccl = Thread.currentThread().getContextClassLoader();
 
         CacheValue cacheValue;
         Class<?> clazz;
@@ -323,20 +308,12 @@ public abstract class ExpressionFactory {
         // First services API
         className = getClassNameServices(tccl);
         if (className == null) {
-            if (IS_SECURITY_ENABLED) {
-                className = AccessController.doPrivileged((PrivilegedAction<String>) ExpressionFactory::getClassNameJreDir);
-            } else {
-                // Second el.properties file
-                className = getClassNameJreDir();
-            }
+            // Second el.properties file
+            className = getClassNameJreDir();
         }
         if (className == null) {
-            if (IS_SECURITY_ENABLED) {
-                className = AccessController.doPrivileged((PrivilegedAction<String>) ExpressionFactory::getClassNameSysProp);
-            } else {
-                // Third system property
-                className = getClassNameSysProp();
-            }
+            // Third system property
+            className = getClassNameSysProp();
         }
         if (className == null) {
             // Fourth - default

==================================================
Util.java
index 93f1052a26..75faffc689 100644
--- a/java/jakarta/el/ImportHandler.java
+++ b/java/jakarta/el/ImportHandler.java
@@ -447,7 +447,7 @@ public class ImportHandler {
 
     private Class<?> findClass(String name, boolean throwException) {
         Class<?> clazz;
-        ClassLoader cl = Util.getContextClassLoader();
+        ClassLoader cl = Thread.currentThread().getContextClassLoader();
         try {
             clazz = cl.loadClass(name);
         } catch (ClassNotFoundException e) {

==================================================
