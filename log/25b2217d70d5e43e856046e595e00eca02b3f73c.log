25b2217d70d5e43e856046e595e00eca02b3f73c
==================================================
Start to document SSLHostConfig
==================================================
Mark Thomas
==================================================
Tue Apr 21 19:07:58 2015 +0000
==================================================
AbstractHttp11Protocol.java
Start to document SSLHostConfig
Tweak implementation to align with how my thinking evolved while writing the docs so far

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1675185 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SSLHostConfig.java
index 3e60f2dc24..700f90fb09 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -302,8 +302,9 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
 
 
     /**
-     * Maximum number of requests which can be performed over a keepalive
-     * connection. The default is the same as for Apache HTTP Server.
+     * @return The maximum number of requests which can be performed over a
+     *         keep-alive connection. The default is the same as for Apache HTTP
+     *         Server (100).
      */
     public int getMaxKeepAliveRequests() {
         return getEndpoint().getMaxKeepAliveRequests();
@@ -327,6 +328,15 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     // ----------------------------------------------- HTTPS specific properties
     // -------------------------------------------- Handled via an SSLHostConfig
 
+    private String defaultSSLHostConfigName = SSLHostConfig.DEFAULT_SSL_HOST_NAME;
+    public String getDefaultSSLHostConfigName() {
+        return defaultSSLHostConfigName;
+    }
+    public void setDefaultSSLHostConfigName(String defaultSSLHostConfigName) {
+        this.defaultSSLHostConfigName = defaultSSLHostConfigName;
+    }
+
+
     @Override
     public void addSslHostConfig(SSLHostConfig sslHostConfig) {
         getEndpoint().addSslHostConfig(sslHostConfig);
@@ -337,7 +347,7 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     private void registerDefaultSSLHostConfig() {
         if (defaultSSLHostConfig == null) {
             defaultSSLHostConfig = new SSLHostConfig();
-            defaultSSLHostConfig.setHostName(SSLHostConfig.DEFAULT_SSL_HOST_NAME);
+            defaultSSLHostConfig.setHostName(getDefaultSSLHostConfigName());
             getEndpoint().addSslHostConfig(defaultSSLHostConfig);
         }
     }

==================================================
