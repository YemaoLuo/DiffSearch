401f4bc7c5140813496c140604a228c638df9bf5
==================================================
Add support for the assignment and semicolon operator to the parser. The new nodes (the Ast*.java files) are just the auto-generated skeletons and some - if not all - will need some work before these new expression elements are fully implemented.
==================================================
Mark Emlyn
==================================================
Sat Jul 13 20:40:39 2013 +0000
==================================================
AstAssign.java
Add support for the assignment and semicolon operator to the parser. The new nodes (the Ast*.java files) are just the auto-generated skeletons and some - if not all - will need some work before these new expression elements are fully implemented.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1502876 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AstSemicolon.java
new file mode 100644
index 0000000000..6a2fd5da7f
--- /dev/null
+++ b/java/org/apache/el/parser/AstAssign.java
@@ -0,0 +1,26 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/* Generated By:JJTree: Do not edit this line. AstAssign.java Version 4.3 */
+package org.apache.el.parser;
+
+public
+class AstAssign extends SimpleNode {
+  public AstAssign(int id) {
+    super(id);
+  }
+}
+/* JavaCC - OriginalChecksum=151e58546054b618e758d7dc172cc7b5 (do not edit this line) */

==================================================
ELParser.java
new file mode 100644
index 0000000000..94b11d48e7
--- /dev/null
+++ b/java/org/apache/el/parser/AstSemicolon.java
@@ -0,0 +1,26 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/* Generated By:JJTree: Do not edit this line. AstSemicolon.java Version 4.3 */
+package org.apache.el.parser;
+
+public
+class AstSemicolon extends SimpleNode {
+  public AstSemicolon(int id) {
+    super(id);
+  }
+}
+/* JavaCC - OriginalChecksum=ce956594ca572a4e452fe4f084a03099 (do not edit this line) */

==================================================
ELParserConstants.java
index 32a9b63743..5bb5ae4b01 100644
--- a/java/org/apache/el/parser/ELParser.jjt
+++ b/java/org/apache/el/parser/ELParser.jjt
@@ -83,7 +83,7 @@ void DeferredExpression() #DeferredExpression : {}
 
 /*
  * DynamicExpression
- * ${..} Expressions
+ * ${...} Expressions
  */
 void DynamicExpression() #DynamicExpression : {}
 {
@@ -96,7 +96,23 @@ void DynamicExpression() #DynamicExpression : {}
  */
 void Expression() : {}
 {
-    Choice()
+    Semicolon()
+}
+
+/*
+ * Semicolon
+ */
+void Semicolon() : {}
+{
+    Assignment() ( <SEMICOLON> Assignment() #Semicolon(2) )*
+}
+
+/*
+ * Assignment
+ */
+void Assignment() : {}
+{
+    Choice() ( LOOKAHEAD(2) <ASSIGN> Assignment() #Assign(2) )*
 }
 
 /*
@@ -440,6 +456,7 @@ java.util.Deque<Integer> deque = new java.util.ArrayDeque<Integer>();
 |    < LBRACK : "[" >
 |    < RBRACK : "]" >
 |    < COLON : ":" >
+|    < SEMICOLON : ";" >
 |    < COMMA : "," >
 |    < GT0 : ">" >
 |    < GT1 : "gt" >
@@ -469,6 +486,7 @@ java.util.Deque<Integer> deque = new java.util.ArrayDeque<Integer>();
 |    < DIV1 : "div" >
 |    < MOD0 : "%" >
 |    < MOD1 : "mod" >
+|    < ASSIGN : "=" >
 |    < IDENTIFIER : (<LETTER>|<IMPL_OBJ_START>) (<LETTER>|<DIGIT>)* >
 |    < FUNCTIONSUFFIX : (<IDENTIFIER>) >
 |    < #IMPL_OBJ_START: "#" >

==================================================
ELParserTokenManager.java
index 8cabca350a..94650912cd 100644
--- a/java/org/apache/el/parser/ELParserConstants.java
+++ b/java/org/apache/el/parser/ELParserConstants.java
@@ -47,75 +47,79 @@ public interface ELParserConstants {
   /** RegularExpression Id. */
   int COLON = 22;
   /** RegularExpression Id. */
-  int COMMA = 23;
+  int SEMICOLON = 23;
   /** RegularExpression Id. */
-  int GT0 = 24;
+  int COMMA = 24;
   /** RegularExpression Id. */
-  int GT1 = 25;
+  int GT0 = 25;
   /** RegularExpression Id. */
-  int LT0 = 26;
+  int GT1 = 26;
   /** RegularExpression Id. */
-  int LT1 = 27;
+  int LT0 = 27;
   /** RegularExpression Id. */
-  int GE0 = 28;
+  int LT1 = 28;
   /** RegularExpression Id. */
-  int GE1 = 29;
+  int GE0 = 29;
   /** RegularExpression Id. */
-  int LE0 = 30;
+  int GE1 = 30;
   /** RegularExpression Id. */
-  int LE1 = 31;
+  int LE0 = 31;
   /** RegularExpression Id. */
-  int EQ0 = 32;
+  int LE1 = 32;
   /** RegularExpression Id. */
-  int EQ1 = 33;
+  int EQ0 = 33;
   /** RegularExpression Id. */
-  int NE0 = 34;
+  int EQ1 = 34;
   /** RegularExpression Id. */
-  int NE1 = 35;
+  int NE0 = 35;
   /** RegularExpression Id. */
-  int NOT0 = 36;
+  int NE1 = 36;
   /** RegularExpression Id. */
-  int NOT1 = 37;
+  int NOT0 = 37;
   /** RegularExpression Id. */
-  int AND0 = 38;
+  int NOT1 = 38;
   /** RegularExpression Id. */
-  int AND1 = 39;
+  int AND0 = 39;
   /** RegularExpression Id. */
-  int OR0 = 40;
+  int AND1 = 40;
   /** RegularExpression Id. */
-  int OR1 = 41;
+  int OR0 = 41;
   /** RegularExpression Id. */
-  int EMPTY = 42;
+  int OR1 = 42;
   /** RegularExpression Id. */
-  int INSTANCEOF = 43;
+  int EMPTY = 43;
   /** RegularExpression Id. */
-  int MULT = 44;
+  int INSTANCEOF = 44;
   /** RegularExpression Id. */
-  int PLUS = 45;
+  int MULT = 45;
   /** RegularExpression Id. */
-  int MINUS = 46;
+  int PLUS = 46;
   /** RegularExpression Id. */
-  int QUESTIONMARK = 47;
+  int MINUS = 47;
   /** RegularExpression Id. */
-  int DIV0 = 48;
+  int QUESTIONMARK = 48;
   /** RegularExpression Id. */
-  int DIV1 = 49;
+  int DIV0 = 49;
   /** RegularExpression Id. */
-  int MOD0 = 50;
+  int DIV1 = 50;
   /** RegularExpression Id. */
-  int MOD1 = 51;
+  int MOD0 = 51;
   /** RegularExpression Id. */
-  int IDENTIFIER = 52;
+  int MOD1 = 52;
   /** RegularExpression Id. */
-  int FUNCTIONSUFFIX = 53;
+  int ASSIGN = 53;
   /** RegularExpression Id. */
-  int IMPL_OBJ_START = 54;
+  int IDENTIFIER = 54;
   /** RegularExpression Id. */
-  int LETTER = 55;
+  int FUNCTIONSUFFIX = 55;
   /** RegularExpression Id. */
-  int DIGIT = 56;
+  int IMPL_OBJ_START = 56;
   /** RegularExpression Id. */
-  int ILLEGAL_CHARACTER = 57;
+  int LETTER = 57;
+  /** RegularExpression Id. */
+  int DIGIT = 58;
+  /** RegularExpression Id. */
+  int ILLEGAL_CHARACTER = 59;
 
   /** Lexical state. */
   int DEFAULT = 0;
@@ -149,6 +153,7 @@ public interface ELParserConstants {
     "\"[\"",
     "\"]\"",
     "\":\"",
+    "\";\"",
     "\",\"",
     "\">\"",
     "\"gt\"",
@@ -178,6 +183,7 @@ public interface ELParserConstants {
     "\"div\"",
     "\"%\"",
     "\"mod\"",
+    "\"=\"",
     "<IDENTIFIER>",
     "<FUNCTIONSUFFIX>",
     "\"#\"",

==================================================
ELParserTreeConstants.java
index abf7ff9ff1..8dbf0b4fb1 100644
--- a/java/org/apache/el/parser/ELParserTokenManager.java
+++ b/java/org/apache/el/parser/ELParserTokenManager.java
@@ -264,28 +264,28 @@ private final int jjStopStringLiteralDfa_2(int pos, long active0)
       case 0:
          if ((active0 & 0x20000L) != 0L)
             return 1;
-         if ((active0 & 0xa0eaaaa01c000L) != 0L)
+         if ((active0 & 0x141d555401c000L) != 0L)
          {
-            jjmatchedKind = 52;
+            jjmatchedKind = 54;
             return 30;
          }
          return -1;
       case 1:
-         if ((active0 & 0x20aaa000000L) != 0L)
+         if ((active0 & 0x41554000000L) != 0L)
             return 30;
-         if ((active0 & 0xa0ca00001c000L) != 0L)
+         if ((active0 & 0x1419400001c000L) != 0L)
          {
-            jjmatchedKind = 52;
+            jjmatchedKind = 54;
             jjmatchedPos = 1;
             return 30;
          }
          return -1;
       case 2:
-         if ((active0 & 0xa00a000000000L) != 0L)
+         if ((active0 & 0x14014000000000L) != 0L)
             return 30;
-         if ((active0 & 0xc000001c000L) != 0L)
+         if ((active0 & 0x18000001c000L) != 0L)
          {
-            jjmatchedKind = 52;
+            jjmatchedKind = 54;
             jjmatchedPos = 2;
             return 30;
          }
@@ -293,51 +293,51 @@ private final int jjStopStringLiteralDfa_2(int pos, long active0)
       case 3:
          if ((active0 & 0x14000L) != 0L)
             return 30;
-         if ((active0 & 0xc0000008000L) != 0L)
+         if ((active0 & 0x180000008000L) != 0L)
          {
-            jjmatchedKind = 52;
+            jjmatchedKind = 54;
             jjmatchedPos = 3;
             return 30;
          }
          return -1;
       case 4:
-         if ((active0 & 0x40000008000L) != 0L)
+         if ((active0 & 0x80000008000L) != 0L)
             return 30;
-         if ((active0 & 0x80000000000L) != 0L)
+         if ((active0 & 0x100000000000L) != 0L)
          {
-            jjmatchedKind = 52;
+            jjmatchedKind = 54;
             jjmatchedPos = 4;
             return 30;
          }
          return -1;
       case 5:
-         if ((active0 & 0x80000000000L) != 0L)
+         if ((active0 & 0x100000000000L) != 0L)
          {
-            jjmatchedKind = 52;
+            jjmatchedKind = 54;
             jjmatchedPos = 5;
             return 30;
          }
          return -1;
       case 6:
-         if ((active0 & 0x80000000000L) != 0L)
+         if ((active0 & 0x100000000000L) != 0L)
          {
-            jjmatchedKind = 52;
+            jjmatchedKind = 54;
             jjmatchedPos = 6;
             return 30;
          }
          return -1;
       case 7:
-         if ((active0 & 0x80000000000L) != 0L)
+         if ((active0 & 0x100000000000L) != 0L)
          {
-            jjmatchedKind = 52;
+            jjmatchedKind = 54;
             jjmatchedPos = 7;
             return 30;
          }
          return -1;
       case 8:
-         if ((active0 & 0x80000000000L) != 0L)
+         if ((active0 & 0x100000000000L) != 0L)
          {
-            jjmatchedKind = 52;
+            jjmatchedKind = 54;
             jjmatchedPos = 8;
             return 30;
          }
@@ -355,70 +355,73 @@ private int jjMoveStringLiteralDfa0_2()
    switch(curChar)
    {
       case 33:
-         jjmatchedKind = 36;
-         return jjMoveStringLiteralDfa1_2(0x400000000L);
+         jjmatchedKind = 37;
+         return jjMoveStringLiteralDfa1_2(0x800000000L);
       case 37:
-         return jjStopAtPos(0, 50);
+         return jjStopAtPos(0, 51);
       case 38:
-         return jjMoveStringLiteralDfa1_2(0x4000000000L);
+         return jjMoveStringLiteralDfa1_2(0x8000000000L);
       case 40:
          return jjStopAtPos(0, 18);
       case 41:
          return jjStopAtPos(0, 19);
       case 42:
-         return jjStopAtPos(0, 44);
-      case 43:
          return jjStopAtPos(0, 45);
+      case 43:
+         return jjStopAtPos(0, 46);
       case 44:
-         return jjStopAtPos(0, 23);
+         return jjStopAtPos(0, 24);
       case 45:
-         return jjStopAtPos(0, 46);
+         return jjStopAtPos(0, 47);
       case 46:
          return jjStartNfaWithStates_2(0, 17, 1);
       case 47:
-         return jjStopAtPos(0, 48);
+         return jjStopAtPos(0, 49);
       case 58:
          return jjStopAtPos(0, 22);
+      case 59:
+         return jjStopAtPos(0, 23);
       case 60:
-         jjmatchedKind = 26;
-         return jjMoveStringLiteralDfa1_2(0x40000000L);
+         jjmatchedKind = 27;
+         return jjMoveStringLiteralDfa1_2(0x80000000L);
       case 61:
-         return jjMoveStringLiteralDfa1_2(0x100000000L);
+         jjmatchedKind = 53;
+         return jjMoveStringLiteralDfa1_2(0x200000000L);
       case 62:
-         jjmatchedKind = 24;
-         return jjMoveStringLiteralDfa1_2(0x10000000L);
+         jjmatchedKind = 25;
+         return jjMoveStringLiteralDfa1_2(0x20000000L);
       case 63:
-         return jjStopAtPos(0, 47);
+         return jjStopAtPos(0, 48);
       case 91:
          return jjStopAtPos(0, 20);
       case 93:
          return jjStopAtPos(0, 21);
       case 97:
-         return jjMoveStringLiteralDfa1_2(0x8000000000L);
+         return jjMoveStringLiteralDfa1_2(0x10000000000L);
       case 100:
-         return jjMoveStringLiteralDfa1_2(0x2000000000000L);
+         return jjMoveStringLiteralDfa1_2(0x4000000000000L);
       case 101:
-         return jjMoveStringLiteralDfa1_2(0x40200000000L);
+         return jjMoveStringLiteralDfa1_2(0x80400000000L);
       case 102:
          return jjMoveStringLiteralDfa1_2(0x8000L);
       case 103:
-         return jjMoveStringLiteralDfa1_2(0x22000000L);
+         return jjMoveStringLiteralDfa1_2(0x44000000L);
       case 105:
-         return jjMoveStringLiteralDfa1_2(0x80000000000L);
+         return jjMoveStringLiteralDfa1_2(0x100000000000L);
       case 108:
-         return jjMoveStringLiteralDfa1_2(0x88000000L);
+         return jjMoveStringLiteralDfa1_2(0x110000000L);
       case 109:
-         return jjMoveStringLiteralDfa1_2(0x8000000000000L);
+         return jjMoveStringLiteralDfa1_2(0x10000000000000L);
       case 110:
-         return jjMoveStringLiteralDfa1_2(0x2800010000L);
+         return jjMoveStringLiteralDfa1_2(0x5000010000L);
       case 111:
-         return jjMoveStringLiteralDfa1_2(0x20000000000L);
+         return jjMoveStringLiteralDfa1_2(0x40000000000L);
       case 116:
          return jjMoveStringLiteralDfa1_2(0x4000L);
       case 123:
          return jjStopAtPos(0, 8);
       case 124:
-         return jjMoveStringLiteralDfa1_2(0x10000000000L);
+         return jjMoveStringLiteralDfa1_2(0x20000000000L);
       case 125:
          return jjStopAtPos(0, 9);
       default :
@@ -435,56 +438,56 @@ private int jjMoveStringLiteralDfa1_2(long active0)
    switch(curChar)
    {
       case 38:
-         if ((active0 & 0x4000000000L) != 0L)
-            return jjStopAtPos(1, 38);
+         if ((active0 & 0x8000000000L) != 0L)
+            return jjStopAtPos(1, 39);
          break;
       case 61:
-         if ((active0 & 0x10000000L) != 0L)
-            return jjStopAtPos(1, 28);
-         else if ((active0 & 0x40000000L) != 0L)
-            return jjStopAtPos(1, 30);
-         else if ((active0 & 0x100000000L) != 0L)
-            return jjStopAtPos(1, 32);
-         else if ((active0 & 0x400000000L) != 0L)
-            return jjStopAtPos(1, 34);
+         if ((active0 & 0x20000000L) != 0L)
+            return jjStopAtPos(1, 29);
+         else if ((active0 & 0x80000000L) != 0L)
+            return jjStopAtPos(1, 31);
+         else if ((active0 & 0x200000000L) != 0L)
+            return jjStopAtPos(1, 33);
+         else if ((active0 & 0x800000000L) != 0L)
+            return jjStopAtPos(1, 35);
          break;
       case 97:
          return jjMoveStringLiteralDfa2_2(active0, 0x8000L);
       case 101:
-         if ((active0 & 0x20000000L) != 0L)
-            return jjStartNfaWithStates_2(1, 29, 30);
-         else if ((active0 & 0x80000000L) != 0L)
-            return jjStartNfaWithStates_2(1, 31, 30);
-         else if ((active0 & 0x800000000L) != 0L)
-            return jjStartNfaWithStates_2(1, 35, 30);
+         if ((active0 & 0x40000000L) != 0L)
+            return jjStartNfaWithStates_2(1, 30, 30);
+         else if ((active0 & 0x100000000L) != 0L)
+            return jjStartNfaWithStates_2(1, 32, 30);
+         else if ((active0 & 0x1000000000L) != 0L)
+            return jjStartNfaWithStates_2(1, 36, 30);
          break;
       case 105:
-         return jjMoveStringLiteralDfa2_2(active0, 0x2000000000000L);
+         return jjMoveStringLiteralDfa2_2(active0, 0x4000000000000L);
       case 109:
-         return jjMoveStringLiteralDfa2_2(active0, 0x40000000000L);
+         return jjMoveStringLiteralDfa2_2(active0, 0x80000000000L);
       case 110:
-         return jjMoveStringLiteralDfa2_2(active0, 0x88000000000L);
+         return jjMoveStringLiteralDfa2_2(active0, 0x110000000000L);
       case 111:
-         return jjMoveStringLiteralDfa2_2(active0, 0x8002000000000L);
+         return jjMoveStringLiteralDfa2_2(active0, 0x10004000000000L);
       case 113:
-         if ((active0 & 0x200000000L) != 0L)
-            return jjStartNfaWithStates_2(1, 33, 30);
+         if ((active0 & 0x400000000L) != 0L)
+            return jjStartNfaWithStates_2(1, 34, 30);
          break;
       case 114:
-         if ((active0 & 0x20000000000L) != 0L)
-            return jjStartNfaWithStates_2(1, 41, 30);
+         if ((active0 & 0x40000000000L) != 0L)
+            return jjStartNfaWithStates_2(1, 42, 30);
          return jjMoveStringLiteralDfa2_2(active0, 0x4000L);
       case 116:
-         if ((active0 & 0x2000000L) != 0L)
-            return jjStartNfaWithStates_2(1, 25, 30);
-         else if ((active0 & 0x8000000L) != 0L)
-            return jjStartNfaWithStates_2(1, 27, 30);
+         if ((active0 & 0x4000000L) != 0L)
+            return jjStartNfaWithStates_2(1, 26, 30);
+         else if ((active0 & 0x10000000L) != 0L)
+            return jjStartNfaWithStates_2(1, 28, 30);
          break;
       case 117:
          return jjMoveStringLiteralDfa2_2(active0, 0x10000L);
       case 124:
-         if ((active0 & 0x10000000000L) != 0L)
-            return jjStopAtPos(1, 40);
+         if ((active0 & 0x20000000000L) != 0L)
+            return jjStopAtPos(1, 41);
          break;
       default :
          break;
@@ -503,26 +506,26 @@ private int jjMoveStringLiteralDfa2_2(long old0, long active0)
    switch(curChar)
    {
       case 100:
-         if ((active0 & 0x8000000000L) != 0L)
-            return jjStartNfaWithStates_2(2, 39, 30);
-         else if ((active0 & 0x8000000000000L) != 0L)
-            return jjStartNfaWithStates_2(2, 51, 30);
+         if ((active0 & 0x10000000000L) != 0L)
+            return jjStartNfaWithStates_2(2, 40, 30);
+         else if ((active0 & 0x10000000000000L) != 0L)
+            return jjStartNfaWithStates_2(2, 52, 30);
          break;
       case 108:
          return jjMoveStringLiteralDfa3_2(active0, 0x18000L);
       case 112:
-         return jjMoveStringLiteralDfa3_2(active0, 0x40000000000L);
-      case 115:
          return jjMoveStringLiteralDfa3_2(active0, 0x80000000000L);
+      case 115:
+         return jjMoveStringLiteralDfa3_2(active0, 0x100000000000L);
       case 116:
-         if ((active0 & 0x2000000000L) != 0L)
-            return jjStartNfaWithStates_2(2, 37, 30);
+         if ((active0 & 0x4000000000L) != 0L)
+            return jjStartNfaWithStates_2(2, 38, 30);
          break;
       case 117:
          return jjMoveStringLiteralDfa3_2(active0, 0x4000L);
       case 118:
-         if ((active0 & 0x2000000000000L) != 0L)
-            return jjStartNfaWithStates_2(2, 49, 30);
+         if ((active0 & 0x4000000000000L) != 0L)
+            return jjStartNfaWithStates_2(2, 50, 30);
          break;
       default :
          break;
@@ -551,7 +554,7 @@ private int jjMoveStringLiteralDfa3_2(long old0, long active0)
       case 115:
          return jjMoveStringLiteralDfa4_2(active0, 0x8000L);
       case 116:
-         return jjMoveStringLiteralDfa4_2(active0, 0xc0000000000L);
+         return jjMoveStringLiteralDfa4_2(active0, 0x180000000000L);
       default :
          break;
    }
@@ -569,14 +572,14 @@ private int jjMoveStringLiteralDfa4_2(long old0, long active0)
    switch(curChar)
    {
       case 97:
-         return jjMoveStringLiteralDfa5_2(active0, 0x80000000000L);
+         return jjMoveStringLiteralDfa5_2(active0, 0x100000000000L);
       case 101:
          if ((active0 & 0x8000L) != 0L)
             return jjStartNfaWithStates_2(4, 15, 30);
          break;
       case 121:
-         if ((active0 & 0x40000000000L) != 0L)
-            return jjStartNfaWithStates_2(4, 42, 30);
+         if ((active0 & 0x80000000000L) != 0L)
+            return jjStartNfaWithStates_2(4, 43, 30);
          break;
       default :
          break;
@@ -595,7 +598,7 @@ private int jjMoveStringLiteralDfa5_2(long old0, long active0)
    switch(curChar)
    {
       case 110:
-         return jjMoveStringLiteralDfa6_2(active0, 0x80000000000L);
+         return jjMoveStringLiteralDfa6_2(active0, 0x100000000000L);
       default :
          break;
    }
@@ -613,7 +616,7 @@ private int jjMoveStringLiteralDfa6_2(long old0, long active0)
    switch(curChar)
    {
       case 99:
-         return jjMoveStringLiteralDfa7_2(active0, 0x80000000000L);
+         return jjMoveStringLiteralDfa7_2(active0, 0x100000000000L);
       default :
          break;
    }
@@ -631,7 +634,7 @@ private int jjMoveStringLiteralDfa7_2(long old0, long active0)
    switch(curChar)
    {
       case 101:
-         return jjMoveStringLiteralDfa8_2(active0, 0x80000000000L);
+         return jjMoveStringLiteralDfa8_2(active0, 0x100000000000L);
       default :
          break;
    }
@@ -649,7 +652,7 @@ private int jjMoveStringLiteralDfa8_2(long old0, long active0)
    switch(curChar)
    {
       case 111:
-         return jjMoveStringLiteralDfa9_2(active0, 0x80000000000L);
+         return jjMoveStringLiteralDfa9_2(active0, 0x100000000000L);
       default :
          break;
    }
@@ -667,8 +670,8 @@ private int jjMoveStringLiteralDfa9_2(long old0, long active0)
    switch(curChar)
    {
       case 102:
-         if ((active0 & 0x80000000000L) != 0L)
-            return jjStartNfaWithStates_2(9, 43, 30);
+         if ((active0 & 0x100000000000L) != 0L)
+            return jjStartNfaWithStates_2(9, 44, 30);
          break;
       default :
          break;
@@ -728,8 +731,8 @@ private int jjMoveNfa_2(int startState, int curPos)
                   }
                   else if ((0x1800000000L & l) != 0L)
                   {
-                     if (kind > 52)
-                        kind = 52;
+                     if (kind > 54)
+                        kind = 54;
                      jjCheckNAddTwoStates(28, 29);
                   }
                   else if (curChar == 39)
@@ -742,14 +745,14 @@ private int jjMoveNfa_2(int startState, int curPos)
                case 30:
                   if ((0x3ff001000000000L & l) != 0L)
                   {
-                     if (kind > 53)
-                        kind = 53;
+                     if (kind > 55)
+                        kind = 55;
                      jjCheckNAdd(29);
                   }
                   if ((0x3ff001000000000L & l) != 0L)
                   {
-                     if (kind > 52)
-                        kind = 52;
+                     if (kind > 54)
+                        kind = 54;
                      jjCheckNAdd(28);
                   }
                   break;
@@ -864,22 +867,22 @@ private int jjMoveNfa_2(int startState, int curPos)
                case 27:
                   if ((0x1800000000L & l) == 0L)
                      break;
-                  if (kind > 52)
-                     kind = 52;
+                  if (kind > 54)
+                     kind = 54;
                   jjCheckNAddTwoStates(28, 29);
                   break;
                case 28:
                   if ((0x3ff001000000000L & l) == 0L)
                      break;
-                  if (kind > 52)
-                     kind = 52;
+                  if (kind > 54)
+                     kind = 54;
                   jjCheckNAdd(28);
                   break;
                case 29:
                   if ((0x3ff001000000000L & l) == 0L)
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 55)
+                     kind = 55;
                   jjCheckNAdd(29);
                   break;
                default : break;
@@ -896,21 +899,21 @@ private int jjMoveNfa_2(int startState, int curPos)
                case 0:
                   if ((0x7fffffe87fffffeL & l) == 0L)
                      break;
-                  if (kind > 52)
-                     kind = 52;
+                  if (kind > 54)
+                     kind = 54;
                   jjCheckNAddTwoStates(28, 29);
                   break;
                case 30:
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
-                     if (kind > 53)
-                        kind = 53;
+                     if (kind > 55)
+                        kind = 55;
                      jjCheckNAdd(29);
                   }
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
-                     if (kind > 52)
-                        kind = 52;
+                     if (kind > 54)
+                        kind = 54;
                      jjCheckNAdd(28);
                   }
                   break;
@@ -953,15 +956,15 @@ private int jjMoveNfa_2(int startState, int curPos)
                case 28:
                   if ((0x7fffffe87fffffeL & l) == 0L)
                      break;
-                  if (kind > 52)
-                     kind = 52;
+                  if (kind > 54)
+                     kind = 54;
                   jjCheckNAdd(28);
                   break;
                case 29:
                   if ((0x7fffffe87fffffeL & l) == 0L)
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 55)
+                     kind = 55;
                   jjCheckNAdd(29);
                   break;
                default : break;
@@ -982,21 +985,21 @@ private int jjMoveNfa_2(int startState, int curPos)
                case 0:
                   if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                      break;
-                  if (kind > 52)
-                     kind = 52;
+                  if (kind > 54)
+                     kind = 54;
                   jjCheckNAddTwoStates(28, 29);
                   break;
                case 30:
                   if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                   {
-                     if (kind > 52)
-                        kind = 52;
+                     if (kind > 54)
+                        kind = 54;
                      jjCheckNAdd(28);
                   }
                   if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                   {
-                     if (kind > 53)
-                        kind = 53;
+                     if (kind > 55)
+                        kind = 55;
                      jjCheckNAdd(29);
                   }
                   break;
@@ -1011,15 +1014,15 @@ private int jjMoveNfa_2(int startState, int curPos)
                case 28:
                   if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                      break;
-                  if (kind > 52)
-                     kind = 52;
+                  if (kind > 54)
+                     kind = 54;
                   jjCheckNAdd(28);
                   break;
                case 29:
                   if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 55)
+                     kind = 55;
                   jjCheckNAdd(29);
                   break;
                default : break;
@@ -1046,28 +1049,28 @@ private final int jjStopStringLiteralDfa_1(int pos, long active0)
       case 0:
          if ((active0 & 0x20000L) != 0L)
             return 1;
-         if ((active0 & 0xa0eaaaa01c000L) != 0L)
+         if ((active0 & 0x141d555401c000L) != 0L)
          {
-            jjmatchedKind = 52;
+            jjmatchedKind = 54;
             return 30;
          }
          return -1;
       case 1:
-         if ((active0 & 0x20aaa000000L) != 0L)
+         if ((active0 & 0x41554000000L) != 0L)
             return 30;
-         if ((active0 & 0xa0ca00001c000L) != 0L)
+         if ((active0 & 0x1419400001c000L) != 0L)
          {
-            jjmatchedKind = 52;
+            jjmatchedKind = 54;
             jjmatchedPos = 1;
             return 30;
          }
          return -1;
       case 2:
-         if ((active0 & 0xa00a000000000L) != 0L)
+         if ((active0 & 0x14014000000000L) != 0L)
             return 30;
-         if ((active0 & 0xc000001c000L) != 0L)
+         if ((active0 & 0x18000001c000L) != 0L)
          {
-            jjmatchedKind = 52;
+            jjmatchedKind = 54;
             jjmatchedPos = 2;
             return 30;
          }
@@ -1075,51 +1078,51 @@ private final int jjStopStringLiteralDfa_1(int pos, long active0)
       case 3:
          if ((active0 & 0x14000L) != 0L)
             return 30;
-         if ((active0 & 0xc0000008000L) != 0L)
+         if ((active0 & 0x180000008000L) != 0L)
          {
-            jjmatchedKind = 52;
+            jjmatchedKind = 54;
             jjmatchedPos = 3;
             return 30;
          }
          return -1;
       case 4:
-         if ((active0 & 0x40000008000L) != 0L)
+         if ((active0 & 0x80000008000L) != 0L)
             return 30;
-         if ((active0 & 0x80000000000L) != 0L)
+         if ((active0 & 0x100000000000L) != 0L)
          {
-            jjmatchedKind = 52;
+            jjmatchedKind = 54;
             jjmatchedPos = 4;
             return 30;
          }
          return -1;
       case 5:
-         if ((active0 & 0x80000000000L) != 0L)
+         if ((active0 & 0x100000000000L) != 0L)
          {
-            jjmatchedKind = 52;
+            jjmatchedKind = 54;
             jjmatchedPos = 5;
             return 30;
          }
          return -1;
       case 6:
-         if ((active0 & 0x80000000000L) != 0L)
+         if ((active0 & 0x100000000000L) != 0L)
          {
-            jjmatchedKind = 52;
+            jjmatchedKind = 54;
             jjmatchedPos = 6;
             return 30;
          }
          return -1;
       case 7:
-         if ((active0 & 0x80000000000L) != 0L)
+         if ((active0 & 0x100000000000L) != 0L)
          {
-            jjmatchedKind = 52;
+            jjmatchedKind = 54;
             jjmatchedPos = 7;
             return 30;
          }
          return -1;
       case 8:
-         if ((active0 & 0x80000000000L) != 0L)
+         if ((active0 & 0x100000000000L) != 0L)
          {
-            jjmatchedKind = 52;
+            jjmatchedKind = 54;
             jjmatchedPos = 8;
             return 30;
          }
@@ -1137,70 +1140,73 @@ private int jjMoveStringLiteralDfa0_1()
    switch(curChar)
    {
       case 33:
-         jjmatchedKind = 36;
-         return jjMoveStringLiteralDfa1_1(0x400000000L);
+         jjmatchedKind = 37;
+         return jjMoveStringLiteralDfa1_1(0x800000000L);
       case 37:
-         return jjStopAtPos(0, 50);
+         return jjStopAtPos(0, 51);
       case 38:
-         return jjMoveStringLiteralDfa1_1(0x4000000000L);
+         return jjMoveStringLiteralDfa1_1(0x8000000000L);
       case 40:
          return jjStopAtPos(0, 18);
       case 41:
          return jjStopAtPos(0, 19);
       case 42:
-         return jjStopAtPos(0, 44);
-      case 43:
          return jjStopAtPos(0, 45);
+      case 43:
+         return jjStopAtPos(0, 46);
       case 44:
-         return jjStopAtPos(0, 23);
+         return jjStopAtPos(0, 24);
       case 45:
-         return jjStopAtPos(0, 46);
+         return jjStopAtPos(0, 47);
       case 46:
          return jjStartNfaWithStates_1(0, 17, 1);
       case 47:
-         return jjStopAtPos(0, 48);
+         return jjStopAtPos(0, 49);
       case 58:
          return jjStopAtPos(0, 22);
+      case 59:
+         return jjStopAtPos(0, 23);
       case 60:
-         jjmatchedKind = 26;
-         return jjMoveStringLiteralDfa1_1(0x40000000L);
+         jjmatchedKind = 27;
+         return jjMoveStringLiteralDfa1_1(0x80000000L);
       case 61:
-         return jjMoveStringLiteralDfa1_1(0x100000000L);
+         jjmatchedKind = 53;
+         return jjMoveStringLiteralDfa1_1(0x200000000L);
       case 62:
-         jjmatchedKind = 24;
-         return jjMoveStringLiteralDfa1_1(0x10000000L);
+         jjmatchedKind = 25;
+         return jjMoveStringLiteralDfa1_1(0x20000000L);
       case 63:
-         return jjStopAtPos(0, 47);
+         return jjStopAtPos(0, 48);
       case 91:
          return jjStopAtPos(0, 20);
       case 93:
          return jjStopAtPos(0, 21);
       case 97:
-         return jjMoveStringLiteralDfa1_1(0x8000000000L);
+         return jjMoveStringLiteralDfa1_1(0x10000000000L);
       case 100:
-         return jjMoveStringLiteralDfa1_1(0x2000000000000L);
+         return jjMoveStringLiteralDfa1_1(0x4000000000000L);
       case 101:
-         return jjMoveStringLiteralDfa1_1(0x40200000000L);
+         return jjMoveStringLiteralDfa1_1(0x80400000000L);
       case 102:
          return jjMoveStringLiteralDfa1_1(0x8000L);
       case 103:
-         return jjMoveStringLiteralDfa1_1(0x22000000L);
+         return jjMoveStringLiteralDfa1_1(0x44000000L);
       case 105:
-         return jjMoveStringLiteralDfa1_1(0x80000000000L);
+         return jjMoveStringLiteralDfa1_1(0x100000000000L);
       case 108:
-         return jjMoveStringLiteralDfa1_1(0x88000000L);
+         return jjMoveStringLiteralDfa1_1(0x110000000L);
       case 109:
-         return jjMoveStringLiteralDfa1_1(0x8000000000000L);
+         return jjMoveStringLiteralDfa1_1(0x10000000000000L);
       case 110:
-         return jjMoveStringLiteralDfa1_1(0x2800010000L);
+         return jjMoveStringLiteralDfa1_1(0x5000010000L);
       case 111:
-         return jjMoveStringLiteralDfa1_1(0x20000000000L);
+         return jjMoveStringLiteralDfa1_1(0x40000000000L);
       case 116:
          return jjMoveStringLiteralDfa1_1(0x4000L);
       case 123:
          return jjStopAtPos(0, 8);
       case 124:
-         return jjMoveStringLiteralDfa1_1(0x10000000000L);
+         return jjMoveStringLiteralDfa1_1(0x20000000000L);
       case 125:
          return jjStopAtPos(0, 9);
       default :
@@ -1217,56 +1223,56 @@ private int jjMoveStringLiteralDfa1_1(long active0)
    switch(curChar)
    {
       case 38:
-         if ((active0 & 0x4000000000L) != 0L)
-            return jjStopAtPos(1, 38);
+         if ((active0 & 0x8000000000L) != 0L)
+            return jjStopAtPos(1, 39);
          break;
       case 61:
-         if ((active0 & 0x10000000L) != 0L)
-            return jjStopAtPos(1, 28);
-         else if ((active0 & 0x40000000L) != 0L)
-            return jjStopAtPos(1, 30);
-         else if ((active0 & 0x100000000L) != 0L)
-            return jjStopAtPos(1, 32);
-         else if ((active0 & 0x400000000L) != 0L)
-            return jjStopAtPos(1, 34);
+         if ((active0 & 0x20000000L) != 0L)
+            return jjStopAtPos(1, 29);
+         else if ((active0 & 0x80000000L) != 0L)
+            return jjStopAtPos(1, 31);
+         else if ((active0 & 0x200000000L) != 0L)
+            return jjStopAtPos(1, 33);
+         else if ((active0 & 0x800000000L) != 0L)
+            return jjStopAtPos(1, 35);
          break;
       case 97:
          return jjMoveStringLiteralDfa2_1(active0, 0x8000L);
       case 101:
-         if ((active0 & 0x20000000L) != 0L)
-            return jjStartNfaWithStates_1(1, 29, 30);
-         else if ((active0 & 0x80000000L) != 0L)
-            return jjStartNfaWithStates_1(1, 31, 30);
-         else if ((active0 & 0x800000000L) != 0L)
-            return jjStartNfaWithStates_1(1, 35, 30);
+         if ((active0 & 0x40000000L) != 0L)
+            return jjStartNfaWithStates_1(1, 30, 30);
+         else if ((active0 & 0x100000000L) != 0L)
+            return jjStartNfaWithStates_1(1, 32, 30);
+         else if ((active0 & 0x1000000000L) != 0L)
+            return jjStartNfaWithStates_1(1, 36, 30);
          break;
       case 105:
-         return jjMoveStringLiteralDfa2_1(active0, 0x2000000000000L);
+         return jjMoveStringLiteralDfa2_1(active0, 0x4000000000000L);
       case 109:
-         return jjMoveStringLiteralDfa2_1(active0, 0x40000000000L);
+         return jjMoveStringLiteralDfa2_1(active0, 0x80000000000L);
       case 110:
-         return jjMoveStringLiteralDfa2_1(active0, 0x88000000000L);
+         return jjMoveStringLiteralDfa2_1(active0, 0x110000000000L);
       case 111:
-         return jjMoveStringLiteralDfa2_1(active0, 0x8002000000000L);
+         return jjMoveStringLiteralDfa2_1(active0, 0x10004000000000L);
       case 113:
-         if ((active0 & 0x200000000L) != 0L)
-            return jjStartNfaWithStates_1(1, 33, 30);
+         if ((active0 & 0x400000000L) != 0L)
+            return jjStartNfaWithStates_1(1, 34, 30);
          break;
       case 114:
-         if ((active0 & 0x20000000000L) != 0L)
-            return jjStartNfaWithStates_1(1, 41, 30);
+         if ((active0 & 0x40000000000L) != 0L)
+            return jjStartNfaWithStates_1(1, 42, 30);
          return jjMoveStringLiteralDfa2_1(active0, 0x4000L);
       case 116:
-         if ((active0 & 0x2000000L) != 0L)
-            return jjStartNfaWithStates_1(1, 25, 30);
-         else if ((active0 & 0x8000000L) != 0L)
-            return jjStartNfaWithStates_1(1, 27, 30);
+         if ((active0 & 0x4000000L) != 0L)
+            return jjStartNfaWithStates_1(1, 26, 30);
+         else if ((active0 & 0x10000000L) != 0L)
+            return jjStartNfaWithStates_1(1, 28, 30);
          break;
       case 117:
          return jjMoveStringLiteralDfa2_1(active0, 0x10000L);
       case 124:
-         if ((active0 & 0x10000000000L) != 0L)
-            return jjStopAtPos(1, 40);
+         if ((active0 & 0x20000000000L) != 0L)
+            return jjStopAtPos(1, 41);
          break;
       default :
          break;
@@ -1285,26 +1291,26 @@ private int jjMoveStringLiteralDfa2_1(long old0, long active0)
    switch(curChar)
    {
       case 100:
-         if ((active0 & 0x8000000000L) != 0L)
-            return jjStartNfaWithStates_1(2, 39, 30);
-         else if ((active0 & 0x8000000000000L) != 0L)
-            return jjStartNfaWithStates_1(2, 51, 30);
+         if ((active0 & 0x10000000000L) != 0L)
+            return jjStartNfaWithStates_1(2, 40, 30);
+         else if ((active0 & 0x10000000000000L) != 0L)
+            return jjStartNfaWithStates_1(2, 52, 30);
          break;
       case 108:
          return jjMoveStringLiteralDfa3_1(active0, 0x18000L);
       case 112:
-         return jjMoveStringLiteralDfa3_1(active0, 0x40000000000L);
-      case 115:
          return jjMoveStringLiteralDfa3_1(active0, 0x80000000000L);
+      case 115:
+         return jjMoveStringLiteralDfa3_1(active0, 0x100000000000L);
       case 116:
-         if ((active0 & 0x2000000000L) != 0L)
-            return jjStartNfaWithStates_1(2, 37, 30);
+         if ((active0 & 0x4000000000L) != 0L)
+            return jjStartNfaWithStates_1(2, 38, 30);
          break;
       case 117:
          return jjMoveStringLiteralDfa3_1(active0, 0x4000L);
       case 118:
-         if ((active0 & 0x2000000000000L) != 0L)
-            return jjStartNfaWithStates_1(2, 49, 30);
+         if ((active0 & 0x4000000000000L) != 0L)
+            return jjStartNfaWithStates_1(2, 50, 30);
          break;
       default :
          break;
@@ -1333,7 +1339,7 @@ private int jjMoveStringLiteralDfa3_1(long old0, long active0)
       case 115:
          return jjMoveStringLiteralDfa4_1(active0, 0x8000L);
       case 116:
-         return jjMoveStringLiteralDfa4_1(active0, 0xc0000000000L);
+         return jjMoveStringLiteralDfa4_1(active0, 0x180000000000L);
       default :
          break;
    }
@@ -1351,14 +1357,14 @@ private int jjMoveStringLiteralDfa4_1(long old0, long active0)
    switch(curChar)
    {
       case 97:
-         return jjMoveStringLiteralDfa5_1(active0, 0x80000000000L);
+         return jjMoveStringLiteralDfa5_1(active0, 0x100000000000L);
       case 101:
          if ((active0 & 0x8000L) != 0L)
             return jjStartNfaWithStates_1(4, 15, 30);
          break;
       case 121:
-         if ((active0 & 0x40000000000L) != 0L)
-            return jjStartNfaWithStates_1(4, 42, 30);
+         if ((active0 & 0x80000000000L) != 0L)
+            return jjStartNfaWithStates_1(4, 43, 30);
          break;
       default :
          break;
@@ -1377,7 +1383,7 @@ private int jjMoveStringLiteralDfa5_1(long old0, long active0)
    switch(curChar)
    {
       case 110:
-         return jjMoveStringLiteralDfa6_1(active0, 0x80000000000L);
+         return jjMoveStringLiteralDfa6_1(active0, 0x100000000000L);
       default :
          break;
    }
@@ -1395,7 +1401,7 @@ private int jjMoveStringLiteralDfa6_1(long old0, long active0)
    switch(curChar)
    {
       case 99:
-         return jjMoveStringLiteralDfa7_1(active0, 0x80000000000L);
+         return jjMoveStringLiteralDfa7_1(active0, 0x100000000000L);
       default :
          break;
    }
@@ -1413,7 +1419,7 @@ private int jjMoveStringLiteralDfa7_1(long old0, long active0)
    switch(curChar)
    {
       case 101:
-         return jjMoveStringLiteralDfa8_1(active0, 0x80000000000L);
+         return jjMoveStringLiteralDfa8_1(active0, 0x100000000000L);
       default :
          break;
    }
@@ -1431,7 +1437,7 @@ private int jjMoveStringLiteralDfa8_1(long old0, long active0)
    switch(curChar)
    {
       case 111:
-         return jjMoveStringLiteralDfa9_1(active0, 0x80000000000L);
+         return jjMoveStringLiteralDfa9_1(active0, 0x100000000000L);
       default :
          break;
    }
@@ -1449,8 +1455,8 @@ private int jjMoveStringLiteralDfa9_1(long old0, long active0)
    switch(curChar)
    {
       case 102:
-         if ((active0 & 0x80000000000L) != 0L)
-            return jjStartNfaWithStates_1(9, 43, 30);
+         if ((active0 & 0x100000000000L) != 0L)
+            return jjStartNfaWithStates_1(9, 44, 30);
          break;
       default :
          break;
@@ -1492,8 +1498,8 @@ private int jjMoveNfa_1(int startState, int curPos)
                   }
                   else if ((0x1800000000L & l) != 0L)
                   {
-                     if (kind > 52)
-                        kind = 52;
+                     if (kind > 54)
+                        kind = 54;
                      jjCheckNAddTwoStates(28, 29);
                   }
                   else if (curChar == 39)
@@ -1506,14 +1512,14 @@ private int jjMoveNfa_1(int startState, int curPos)
                case 30:
                   if ((0x3ff001000000000L & l) != 0L)
                   {
-                     if (kind > 53)
-                        kind = 53;
+                     if (kind > 55)
+                        kind = 55;
                      jjCheckNAdd(29);
                   }
                   if ((0x3ff001000000000L & l) != 0L)
                   {
-                     if (kind > 52)
-                        kind = 52;
+                     if (kind > 54)
+                        kind = 54;
                      jjCheckNAdd(28);
                   }
                   break;
@@ -1628,22 +1634,22 @@ private int jjMoveNfa_1(int startState, int curPos)
                case 27:
                   if ((0x1800000000L & l) == 0L)
                      break;
-                  if (kind > 52)
-                     kind = 52;
+                  if (kind > 54)
+                     kind = 54;
                   jjCheckNAddTwoStates(28, 29);
                   break;
                case 28:
                   if ((0x3ff001000000000L & l) == 0L)
                      break;
-                  if (kind > 52)
-                     kind = 52;
+                  if (kind > 54)
+                     kind = 54;
                   jjCheckNAdd(28);
                   break;
                case 29:
                   if ((0x3ff001000000000L & l) == 0L)
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 55)
+                     kind = 55;
                   jjCheckNAdd(29);
                   break;
                default : break;
@@ -1660,21 +1666,21 @@ private int jjMoveNfa_1(int startState, int curPos)
                case 0:
                   if ((0x7fffffe87fffffeL & l) == 0L)
                      break;
-                  if (kind > 52)
-                     kind = 52;
+                  if (kind > 54)
+                     kind = 54;
                   jjCheckNAddTwoStates(28, 29);
                   break;
                case 30:
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
-                     if (kind > 53)
-                        kind = 53;
+                     if (kind > 55)
+                        kind = 55;
                      jjCheckNAdd(29);
                   }
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
-                     if (kind > 52)
-                        kind = 52;
+                     if (kind > 54)
+                        kind = 54;
                      jjCheckNAdd(28);
                   }
                   break;
@@ -1717,15 +1723,15 @@ private int jjMoveNfa_1(int startState, int curPos)
                case 28:
                   if ((0x7fffffe87fffffeL & l) == 0L)
                      break;
-                  if (kind > 52)
-                     kind = 52;
+                  if (kind > 54)
+                     kind = 54;
                   jjCheckNAdd(28);
                   break;
                case 29:
                   if ((0x7fffffe87fffffeL & l) == 0L)
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 55)
+                     kind = 55;
                   jjCheckNAdd(29);
                   break;
                default : break;
@@ -1746,21 +1752,21 @@ private int jjMoveNfa_1(int startState, int curPos)
                case 0:
                   if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                      break;
-                  if (kind > 52)
-                     kind = 52;
+                  if (kind > 54)
+                     kind = 54;
                   jjCheckNAddTwoStates(28, 29);
                   break;
                case 30:
                   if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                   {
-                     if (kind > 52)
-                        kind = 52;
+                     if (kind > 54)
+                        kind = 54;
                      jjCheckNAdd(28);
                   }
                   if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                   {
-                     if (kind > 53)
-                        kind = 53;
+                     if (kind > 55)
+                        kind = 55;
                      jjCheckNAdd(29);
                   }
                   break;
@@ -1775,15 +1781,15 @@ private int jjMoveNfa_1(int startState, int curPos)
                case 28:
                   if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                      break;
-                  if (kind > 52)
-                     kind = 52;
+                  if (kind > 54)
+                     kind = 54;
                   jjCheckNAdd(28);
                   break;
                case 29:
                   if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                      break;
-                  if (kind > 53)
-                     kind = 53;
+                  if (kind > 55)
+                     kind = 55;
                   jjCheckNAdd(29);
                   break;
                default : break;
@@ -1845,11 +1851,11 @@ private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, lo
 public static final String[] jjstrLiteralImages = {
 "", null, "\44\173", "\43\173", null, null, null, null, "\173", "\175", null,
 null, null, null, "\164\162\165\145", "\146\141\154\163\145", "\156\165\154\154",
-"\56", "\50", "\51", "\133", "\135", "\72", "\54", "\76", "\147\164", "\74",
+"\56", "\50", "\51", "\133", "\135", "\72", "\73", "\54", "\76", "\147\164", "\74",
 "\154\164", "\76\75", "\147\145", "\74\75", "\154\145", "\75\75", "\145\161", "\41\75",
 "\156\145", "\41", "\156\157\164", "\46\46", "\141\156\144", "\174\174", "\157\162",
 "\145\155\160\164\171", "\151\156\163\164\141\156\143\145\157\146", "\52", "\53", "\55", "\77", "\57",
-"\144\151\166", "\45", "\155\157\144", null, null, null, null, null, null, };
+"\144\151\166", "\45", "\155\157\144", "\75", null, null, null, null, null, null, };
 
 /** Lexer state names. */
 public static final String[] lexStateNames = {
@@ -1862,10 +1868,10 @@ public static final String[] lexStateNames = {
 public static final int[] jjnewLexState = {
    -1, -1, 1, 1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-   -1, -1, -1, -1, -1, -1, -1, -1,
+   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 };
 static final long[] jjtoToken = {
-   0x23fffffffffef0fL,
+   0x8ffffffffffef0fL,
 };
 static final long[] jjtoSkip = {
    0xf0L,
@@ -1993,18 +1999,18 @@ public Token getNextToken()
        jjmatchedKind = 0x7fffffff;
        jjmatchedPos = 0;
        curPos = jjMoveStringLiteralDfa0_1();
-       if (jjmatchedPos == 0 && jjmatchedKind > 57)
+       if (jjmatchedPos == 0 && jjmatchedKind > 59)
        {
-          jjmatchedKind = 57;
+          jjmatchedKind = 59;
        }
        break;
      case 2:
        jjmatchedKind = 0x7fffffff;
        jjmatchedPos = 0;
        curPos = jjMoveStringLiteralDfa0_2();
-       if (jjmatchedPos == 0 && jjmatchedKind > 57)
+       if (jjmatchedPos == 0 && jjmatchedKind > 59)
        {
-          jjmatchedKind = 57;
+          jjmatchedKind = 59;
        }
        break;
    }

==================================================
