750452db3b86dfc39cb81ebde82a93c494ba1d0b
==================================================
Remove unused code.
==================================================
Mark Thomas
==================================================
Fri Jan 16 12:15:12 2015 +0000
==================================================
Processor.java
Remove unused code.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1652395 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpAprProtocol.java
index 32dd298c5e..f5abb6126c 100644
--- a/java/org/apache/coyote/Processor.java
+++ b/java/org/apache/coyote/Processor.java
@@ -49,7 +49,11 @@ public interface Processor<S> {
 
     Request getRequest();
 
-    void recycle(boolean socketClosing);
+    /**
+     * Recycle the processor, ready for the next request which may be on the
+     * same connection or a different connection.
+     */
+    void recycle();
 
     void setSslSupport(SSLSupport sslSupport);
 

==================================================
AjpNio2Protocol.java
index 42233556c1..badc366313 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -92,7 +92,7 @@ public class AjpAprProtocol extends AbstractAjpProtocol<Long> {
         public void release(SocketWrapperBase<Long> socket,
                 Processor<Long> processor, boolean isSocketClosing,
                 boolean addToPoller) {
-            processor.recycle(isSocketClosing);
+            processor.recycle();
             recycledProcessors.push(processor);
             if (addToPoller) {
                 ((AprEndpoint)getProtocol().getEndpoint()).getPoller().add(

==================================================
AjpNioProtocol.java
index 1cfa632c9f..d7b818073e 100644
--- a/java/org/apache/coyote/ajp/AjpNio2Protocol.java
+++ b/java/org/apache/coyote/ajp/AjpNio2Protocol.java
@@ -87,7 +87,7 @@ public class AjpNio2Protocol extends AbstractAjpProtocol<Nio2Channel> {
             Processor<Nio2Channel> processor =
                     connections.remove(socket.getSocket());
             if (processor != null) {
-                processor.recycle(true);
+                processor.recycle();
                 recycledProcessors.push(processor);
             }
         }
@@ -105,7 +105,7 @@ public class AjpNio2Protocol extends AbstractAjpProtocol<Nio2Channel> {
                         "], isSocketClosing: [" + isSocketClosing +
                         "], addToPoller: [" + addToPoller + "]");
             }
-            processor.recycle(isSocketClosing);
+            processor.recycle();
             recycledProcessors.push(processor);
         }
 

==================================================
AjpProcessor.java
index bc08613a92..f30074f191 100644
--- a/java/org/apache/coyote/ajp/AjpNioProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpNioProtocol.java
@@ -95,7 +95,7 @@ public class AjpNioProtocol extends AbstractAjpProtocol<NioChannel> {
                 if (entry.getKey().getIOChannel()==socket) {
                     it.remove();
                     Processor<NioChannel> result = entry.getValue();
-                    result.recycle(true);
+                    result.recycle();
                     unregister(result);
                     released = true;
                     break;
@@ -115,7 +115,7 @@ public class AjpNioProtocol extends AbstractAjpProtocol<NioChannel> {
             Processor<NioChannel> processor =
                     connections.remove(socket.getSocket());
             if (processor != null) {
-                processor.recycle(true);
+                processor.recycle();
                 recycledProcessors.push(processor);
             }
         }
@@ -128,7 +128,7 @@ public class AjpNioProtocol extends AbstractAjpProtocol<NioChannel> {
         public void release(SocketWrapperBase<NioChannel> socket,
                 Processor<NioChannel> processor, boolean isSocketClosing,
                 boolean addToPoller) {
-            processor.recycle(isSocketClosing);
+            processor.recycle();
             recycledProcessors.push(processor);
             if (addToPoller) {
                 socket.getSocket().getPoller().add(socket.getSocket());

==================================================
AbstractHttp11Processor.java
index 5ac60dc67f..33ba239579 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -731,7 +731,7 @@ public class AjpProcessor<S> extends AbstractProcessor<S> {
                 int type = requestHeaderMessage.getByte();
                 if (type == Constants.JK_AJP13_CPING_REQUEST) {
                     if (endpoint.isPaused()) {
-                        recycle(true);
+                        recycle();
                         break;
                     }
                     cping = true;
@@ -741,7 +741,7 @@ public class AjpProcessor<S> extends AbstractProcessor<S> {
                     } catch (IOException e) {
                         setErrorState(ErrorState.CLOSE_NOW, e);
                     }
-                    recycle(false);
+                    recycle();
                     continue;
                 } else if(type != Constants.JK_AJP13_FORWARD_REQUEST) {
                     // Unexpected packet type. Unread body packets should have
@@ -833,7 +833,7 @@ public class AjpProcessor<S> extends AbstractProcessor<S> {
                 socketWrapper.setTimeout(keepAliveTimeout);
             }
 
-            recycle(false);
+            recycle();
         }
 
         rp.setStage(org.apache.coyote.Constants.STAGE_ENDED);
@@ -874,16 +874,8 @@ public class AjpProcessor<S> extends AbstractProcessor<S> {
     }
 
 
-    /**
-     * Recycle the processor, ready for the next request which may be on the
-     * same connection or a different connection.
-     *
-     * @param socketClosing Indicates if the socket is about to be closed
-     *                      allowing the processor to perform any additional
-     *                      clean-up that may be required
-     */
     @Override
-    public void recycle(boolean socketClosing) {
+    public void recycle() {
         getAdapter().checkRecycled(request, response);
 
         asyncStateMachine.recycle();

==================================================
Http11AprProtocol.java
index bb7b159198..e282da691f 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -1776,7 +1776,7 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
 
 
     @Override
-    public final void recycle(boolean isSocketClosing) {
+    public final void recycle() {
         getAdapter().checkRecycled(request, response);
 
         if (getInputBuffer() != null) {

==================================================
Http11Nio2Protocol.java
index b967a9fdfc..895912b4f6 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -242,7 +242,7 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
         public void release(SocketWrapperBase<Long> socket,
                 Processor<Long> processor, boolean isSocketClosing,
                 boolean addToPoller) {
-            processor.recycle(isSocketClosing);
+            processor.recycle();
             recycledProcessors.push(processor);
             if (addToPoller && proto.getEndpoint().isRunning()) {
                 ((AprEndpoint)proto.getEndpoint()).getPoller().add(

==================================================
Http11NioProtocol.java
index b339be3670..2acae23b36 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Protocol.java
@@ -134,7 +134,7 @@ public class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel>
             Processor<Nio2Channel> processor =
                 connections.remove(socket.getSocket());
             if (processor != null) {
-                processor.recycle(true);
+                processor.recycle();
                 recycledProcessors.push(processor);
             }
         }
@@ -165,7 +165,7 @@ public class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel>
         public void release(SocketWrapperBase<Nio2Channel> socket,
                 Processor<Nio2Channel> processor, boolean isSocketClosing,
                 boolean addToPoller) {
-            processor.recycle(isSocketClosing);
+            processor.recycle();
             recycledProcessors.push(processor);
             if (socket.isAsync()) {
                 ((Nio2Endpoint) proto.getEndpoint()).removeTimeout(socket);

==================================================
UpgradeProcessor.java
index da3dc8a37a..ca88af8683 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -167,7 +167,7 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
                 if (entry.getKey().getIOChannel()==socket) {
                     it.remove();
                     Processor<NioChannel> result = entry.getValue();
-                    result.recycle(true);
+                    result.recycle();
                     unregister(result);
                     released = true;
                     break;
@@ -186,7 +186,7 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
             Processor<NioChannel> processor =
                 connections.remove(socket.getSocket());
             if (processor != null) {
-                processor.recycle(true);
+                processor.recycle();
                 recycledProcessors.push(processor);
             }
         }
@@ -217,7 +217,7 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
         public void release(SocketWrapperBase<NioChannel> socket,
                 Processor<NioChannel> processor, boolean isSocketClosing,
                 boolean addToPoller) {
-            processor.recycle(isSocketClosing);
+            processor.recycle();
             recycledProcessors.push(processor);
             if (addToPoller) {
                 socket.getSocket().getPoller().add(socket.getSocket());

==================================================
SpdyProcessor.java
index c554d0dfa7..9abf38de7f 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeProcessor.java
@@ -125,7 +125,7 @@ public class UpgradeProcessor<S> implements Processor<S>, WebConnection {
 
 
     @Override
-    public final void recycle(boolean socketClosing) {
+    public final void recycle() {
         // Currently a NO-OP as upgrade processors are not recycled.
     }
 

==================================================
