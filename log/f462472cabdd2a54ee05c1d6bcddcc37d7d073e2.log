f462472cabdd2a54ee05c1d6bcddcc37d7d073e2
==================================================
Tests cases for https://java.net/jira/browse/WEBSOCKET_SPEC-232
==================================================
Mark Thomas
==================================================
Wed Dec 10 14:59:38 2014 +0000
==================================================
TestWsRemoteEndpoint.java
Tests cases for https://java.net/jira/browse/WEBSOCKET_SPEC-232

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1644443 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TesterEchoServer.java
index 5c0f227dfd..b692f5dd80 100644
--- a/test/org/apache/tomcat/websocket/TestWsRemoteEndpoint.java
+++ b/test/org/apache/tomcat/websocket/TestWsRemoteEndpoint.java
@@ -70,6 +70,16 @@ public class TestWsRemoteEndpoint extends TomcatBaseTest {
         doTestWriter(TesterProgrammaticEndpoint.class, true, TEST_MESSAGE_5K);
     }
 
+    @Test
+    public void testWriterZeroLengthAnnotation() throws Exception {
+        doTestWriter(TesterAnnotatedEndpoint.class, true, "");
+    }
+
+    @Test
+    public void testWriterZeroLengthProgrammatic() throws Exception {
+        doTestWriter(TesterProgrammaticEndpoint.class, true, "");
+    }
+
     @Test
     public void testStreamAnnotation() throws Exception {
         doTestWriter(TesterAnnotatedEndpoint.class, false, TEST_MESSAGE_5K);
@@ -162,20 +172,77 @@ public class TestWsRemoteEndpoint extends TomcatBaseTest {
         int offset = 0;
         int i = 0;
         for (String result : results) {
-            // First may be a fragment
-            Assert.assertEquals(SEQUENCE.substring(offset, S_LEN),
-                    result.substring(0, S_LEN - offset));
-            i = S_LEN - offset;
-            while (i + S_LEN < result.length()) {
-                if (!SEQUENCE.equals(result.substring(i, i + S_LEN))) {
+            if (testMessage.length() == 0) {
+                Assert.assertEquals(0, result.length());
+            } else {
+                // First may be a fragment
+                Assert.assertEquals(SEQUENCE.substring(offset, S_LEN),
+                        result.substring(0, S_LEN - offset));
+                i = S_LEN - offset;
+                while (i + S_LEN < result.length()) {
+                    if (!SEQUENCE.equals(result.substring(i, i + S_LEN))) {
+                        Assert.fail();
+                    }
+                    i += S_LEN;
+                }
+                offset = result.length() - i;
+                if (!SEQUENCE.substring(0, offset).equals(result.substring(i))) {
                     Assert.fail();
                 }
-                i += S_LEN;
-            }
-            offset = result.length() - i;
-            if (!SEQUENCE.substring(0, offset).equals(result.substring(i))) {
-                Assert.fail();
             }
         }
     }
+
+    @Test
+    public void testWriterErrorAnnotation() throws Exception {
+        doTestWriterError(TesterAnnotatedEndpoint.class);
+    }
+
+    @Test
+    public void testWriterErrorProgrammatic() throws Exception {
+        doTestWriterError(TesterProgrammaticEndpoint.class);
+    }
+
+    private void doTestWriterError(Class<?> clazz) throws Exception {
+        Tomcat tomcat = getTomcatInstance();
+        // No file system docBase required
+        Context ctx = tomcat.addContext("", null);
+        ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
+        Tomcat.addServlet(ctx, "default", new DefaultServlet());
+        ctx.addServletMapping("/", "default");
+
+        WebSocketContainer wsContainer = ContainerProvider.getWebSocketContainer();
+
+        tomcat.start();
+
+        Session wsSession;
+        URI uri = new URI("ws://localhost:" + getPort() + TesterEchoServer.Config.PATH_WRITER_ERROR);
+        if (Endpoint.class.isAssignableFrom(clazz)) {
+            @SuppressWarnings("unchecked")
+            Class<? extends Endpoint> endpointClazz = (Class<? extends Endpoint>) clazz;
+            wsSession = wsContainer.connectToServer(endpointClazz, Builder.create().build(), uri);
+        } else {
+            wsSession = wsContainer.connectToServer(clazz, uri);
+        }
+
+        CountDownLatch latch = new CountDownLatch(1);
+        TesterEndpoint tep = (TesterEndpoint) wsSession.getUserProperties().get("endpoint");
+        tep.setLatch(latch);
+        AsyncHandler<?> handler;
+        handler = new AsyncText(latch);
+
+        wsSession.addMessageHandler(handler);
+
+        // This should trigger the error
+        wsSession.getBasicRemote().sendText("Start");
+
+        boolean latchResult = handler.getLatch().await(10, TimeUnit.SECONDS);
+
+        Assert.assertTrue(latchResult);
+
+        @SuppressWarnings("unchecked")
+        List<String> messages = (List<String>) handler.getMessages();
+
+        Assert.assertEquals(0, messages.size());
+    }
 }

==================================================
