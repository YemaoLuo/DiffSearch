5b6ff1894787fd7214c6a40af6238cf8506e79fd
==================================================
Partial code clean-up for o.a.catalina.tribes
==================================================
Mark Emlyn
==================================================
Sun Jul 22 19:53:06 2012 +0000
==================================================
OrderInterceptor.java
Partial code clean-up for o.a.catalina.tribes
 - Add final prompted by UCDetector
 - Java 7 use of <>

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1364416 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SimpleCoordinator.java
index 1306909948..680c1d0ff6 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/OrderInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/OrderInterceptor.java
@@ -54,9 +54,9 @@ import org.apache.catalina.tribes.io.XByteBuffer;
  * @version 1.1
  */
 public class OrderInterceptor extends ChannelInterceptorBase {
-    private HashMap<Member, Counter> outcounter = new HashMap<Member, Counter>();
-    private HashMap<Member, Counter> incounter = new HashMap<Member, Counter>();
-    private HashMap<Member, MessageOrder> incoming = new HashMap<Member, MessageOrder>();
+    private final HashMap<Member, Counter> outcounter = new HashMap<>();
+    private final HashMap<Member, Counter> incounter = new HashMap<>();
+    private final HashMap<Member, MessageOrder> incoming = new HashMap<>();
     private long expire = 3000;
     private boolean forwardExpired = true;
     private int maxQueue = Integer.MAX_VALUE;
@@ -212,7 +212,7 @@ public class OrderInterceptor extends ChannelInterceptorBase {
     }
 
     protected static class Counter {
-        private AtomicInteger value = new AtomicInteger(0);
+        private final AtomicInteger value = new AtomicInteger(0);
 
         public int getCounter() {
             return value.get();
@@ -228,9 +228,9 @@ public class OrderInterceptor extends ChannelInterceptorBase {
     }
 
     protected static class MessageOrder {
-        private long received = System.currentTimeMillis();
+        private final long received = System.currentTimeMillis();
         private MessageOrder next;
-        private int msgNr;
+        private final int msgNr;
         private ChannelMessage msg = null;
         public MessageOrder(int msgNr,ChannelMessage msg) {
             this.msgNr = msgNr;

==================================================
StaticMembershipInterceptor.java
index e32e7c06bb..a6933bbac2 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/SimpleCoordinator.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/SimpleCoordinator.java
@@ -35,7 +35,7 @@ public class SimpleCoordinator extends ChannelInterceptorBase {
 
     private Member[] view;
 
-    private AtomicBoolean membershipChanged = new AtomicBoolean();
+    private final AtomicBoolean membershipChanged = new AtomicBoolean();
 
     private void membershipChanged() {
         membershipChanged.set(true);

==================================================
TcpFailureDetector.java
index f40d97bafe..2d0851a4c2 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/StaticMembershipInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/StaticMembershipInterceptor.java
@@ -26,7 +26,7 @@ import org.apache.catalina.tribes.group.ChannelInterceptorBase;
 
 public class StaticMembershipInterceptor
     extends ChannelInterceptorBase {
-    protected ArrayList<Member> members = new ArrayList<Member>();
+    protected final ArrayList<Member> members = new ArrayList<>();
     protected Member localMember = null;
 
     public StaticMembershipInterceptor() {

==================================================
TcpPingInterceptor.java
index ecd93a2a9d..6a014288ba 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/TcpFailureDetector.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/TcpFailureDetector.java
@@ -61,7 +61,7 @@ public class TcpFailureDetector extends ChannelInterceptorBase {
 
     private static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( TcpFailureDetector.class );
 
-    protected static byte[] TCP_FAIL_DETECT = new byte[] {
+    protected static final byte[] TCP_FAIL_DETECT = new byte[] {
         79, -89, 115, 72, 121, -126, 67, -55, -97, 111, -119, -128, -95, 91, 7, 20,
         125, -39, 82, 91, -21, -15, 67, -102, -73, 126, -66, -113, -127, 103, 30, -74,
         55, 21, -66, -121, 69, 126, 76, -88, -65, 10, 77, 19, 83, 56, 21, 50,
@@ -79,9 +79,9 @@ public class TcpFailureDetector extends ChannelInterceptorBase {
 
     protected Membership membership = null;
 
-    protected HashMap<Member, Long> removeSuspects = new HashMap<Member, Long>();
+    protected final HashMap<Member, Long> removeSuspects = new HashMap<>();
 
-    protected HashMap<Member, Long> addSuspects = new HashMap<Member, Long>();
+    protected final HashMap<Member, Long> addSuspects = new HashMap<>();
 
     @Override
     public void sendMessage(Member[] destination, ChannelMessage msg, InterceptorPayload payload) throws ChannelException {

==================================================
ThroughputInterceptor.java
index afffa2ef9a..6d3fa0b783 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java
@@ -43,7 +43,7 @@ public class TcpPingInterceptor extends ChannelInterceptorBase {
 
     private static final Log log = LogFactory.getLog(TcpPingInterceptor.class);
 
-    protected static byte[] TCP_PING_DATA = new byte[] {
+    protected static final byte[] TCP_PING_DATA = new byte[] {
         79, -89, 115, 72, 121, -33, 67, -55, -97, 111, -119, -128, -95, 91, 7, 20,
         125, -39, 82, 91, -21, -33, 67, -102, -73, 126, -66, -113, -127, 103, 30, -74,
         55, 21, -66, -121, 69, 33, 76, -88, -65, 10, 77, 19, 83, 56, 21, 50,
@@ -55,7 +55,7 @@ public class TcpPingInterceptor extends ChannelInterceptorBase {
     protected boolean staticOnly = false;
     protected volatile boolean running = true;
     protected PingThread thread = null;
-    protected static AtomicInteger cnt = new AtomicInteger(0);
+    protected static final AtomicInteger cnt = new AtomicInteger(0);
 
     WeakReference<TcpFailureDetector> failureDetector = null;
     WeakReference<StaticMembershipInterceptor> staticMembers = null;
@@ -75,9 +75,9 @@ public class TcpPingInterceptor extends ChannelInterceptorBase {
         ChannelInterceptor next = getNext();
         while ( next != null ) {
             if ( next instanceof TcpFailureDetector )
-                failureDetector = new WeakReference<TcpFailureDetector>((TcpFailureDetector)next);
+                failureDetector = new WeakReference<>((TcpFailureDetector)next);
             if ( next instanceof StaticMembershipInterceptor )
-                staticMembers = new WeakReference<StaticMembershipInterceptor>((StaticMembershipInterceptor)next);
+                staticMembers = new WeakReference<>((StaticMembershipInterceptor)next);
             next = next.getNext();
         }
 

==================================================
TwoPhaseCommitInterceptor.java
index 70009763e1..e6711a8d53 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/ThroughputInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/ThroughputInterceptor.java
@@ -46,14 +46,14 @@ public class ThroughputInterceptor extends ChannelInterceptorBase {
     double mbRx = 0;
     double timeTx = 0;
     double lastCnt = 0;
-    AtomicLong msgTxCnt = new AtomicLong(1);
-    AtomicLong msgRxCnt = new AtomicLong(0);
-    AtomicLong msgTxErr = new AtomicLong(0);
+    final AtomicLong msgTxCnt = new AtomicLong(1);
+    final AtomicLong msgRxCnt = new AtomicLong(0);
+    final AtomicLong msgTxErr = new AtomicLong(0);
     int interval = 10000;
-    AtomicInteger access = new AtomicInteger(0);
+    final AtomicInteger access = new AtomicInteger(0);
     long txStart = 0;
     long rxStart = 0;
-    DecimalFormat df = new DecimalFormat("#0.00");
+    final DecimalFormat df = new DecimalFormat("#0.00");
 
 
     @Override

==================================================
