4807afb9af66d84caff314833f28d3154d0ddd0c
==================================================
More migration to SSLHostConfig
==================================================
Mark Thomas
==================================================
Fri May 1 18:52:24 2015 +0000
==================================================
AbstractHttp11JsseProtocol.java
More migration to SSLHostConfig
keyPass/SSLPassword -> certificateKeyPassword
keystorePass -> certificateKeystorePassword

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1677206 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractHttp11Protocol.java
index e30386d2dd..7d9f917291 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11JsseProtocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11JsseProtocol.java
@@ -25,9 +25,6 @@ public abstract class AbstractHttp11JsseProtocol<S>
         super(endpoint);
     }
 
-    public String getKeystorePass() { return getEndpoint().getKeystorePass();}
-    public void setKeystorePass(String s ) { getEndpoint().setKeystorePass(s);}
-
     public String getKeystoreType() { return getEndpoint().getKeystoreType();}
     public void setKeystoreType(String s ) { getEndpoint().setKeystoreType(s);}
 
@@ -44,9 +41,6 @@ public abstract class AbstractHttp11JsseProtocol<S>
     public String getKeyAlias() { return getEndpoint().getKeyAlias();}
     public void setKeyAlias(String s ) { getEndpoint().setKeyAlias(s);}
 
-    public String getKeyPass() { return getEndpoint().getKeyPass();}
-    public void setKeyPass(String s ) { getEndpoint().setKeyPass(s);}
-
     public void setTruststoreFile(String f){ getEndpoint().setTruststoreFile(f);}
     public String getTruststoreFile(){ return getEndpoint().getTruststoreFile();}
 

==================================================
Http11AprProtocol.java
index 2e7ed36d9c..54fe61f187 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -430,6 +430,21 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
         defaultSSLHostConfig.setCiphers(ciphers);
     }
 
+    public void setKeystorePass(String certificateKeystorePassword) {
+        registerDefaultSSLHostConfig();
+        defaultSSLHostConfig.setCertificateKeystorePassword(certificateKeystorePassword);
+    }
+
+    public void setKeyPass(String certificateKeyPassword) {
+        registerDefaultSSLHostConfig();
+        defaultSSLHostConfig.setCertificateKeyPassword(certificateKeyPassword);
+    }
+    public void setSSLPassword(String certificateKeyPassword) {
+        registerDefaultSSLHostConfig();
+        defaultSSLHostConfig.setCertificateKeyPassword(certificateKeyPassword);
+    }
+
+
 
     // ------------------------------------------------------------- Common code
 

==================================================
AbstractEndpoint.java
index ece2e99552..40ba12b6fe 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -72,14 +72,6 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
 
     // --------------------  SSL related properties --------------------
 
-    /**
-     * SSL password (if a cert is encrypted, and no password has been provided, a callback
-     * will ask for a password).
-     */
-    public String getSSLPassword() { return ((AprEndpoint)getEndpoint()).getSSLPassword(); }
-    public void setSSLPassword(String SSLPassword) { ((AprEndpoint)getEndpoint()).setSSLPassword(SSLPassword); }
-
-
     /**
      * SSL certificate chain file.
      */

==================================================
AprEndpoint.java
index d2d616fb4b..896252e6d0 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -982,10 +982,6 @@ public abstract class AbstractEndpoint<S> {
         this.sslImplementationName = s;
     }
 
-    private String keystorePass = null;
-    public String getKeystorePass() { return keystorePass;}
-    public void setKeystorePass(String s ) { this.keystorePass = s;}
-
     private String keystoreType = "JKS";
     public String getKeystoreType() { return keystoreType;}
     public void setKeystoreType(String s ) { this.keystoreType = s;}
@@ -1002,10 +998,6 @@ public abstract class AbstractEndpoint<S> {
     public String getKeyAlias() { return keyAlias;}
     public void setKeyAlias(String s ) { keyAlias = s;}
 
-    private String keyPass = null;
-    public String getKeyPass() { return keyPass;}
-    public void setKeyPass(String s ) { this.keyPass = s;}
-
     private String truststoreFile = System.getProperty("javax.net.ssl.trustStore");
     public String getTruststoreFile() {return truststoreFile;}
     public void setTruststoreFile(String s) {

==================================================
SSLHostConfig.java
index 03dc74cb78..5bf1c35d05 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -208,15 +208,6 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
     }
 
 
-    /**
-     * SSL password (if a cert is encrypted, and no password has been provided, a callback
-     * will ask for a password).
-     */
-    protected String SSLPassword = null;
-    public String getSSLPassword() { return SSLPassword; }
-    public void setSSLPassword(String SSLPassword) { this.SSLPassword = SSLPassword; }
-
-
     /**
      * SSL certificate chain file.
      */
@@ -566,7 +557,8 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
                 SSLContext.setCipherSuite(ctx, sslHostConfig.getCiphers());
                 // Load Server key and certificate
                 SSLContext.setCertificate(ctx, sslHostConfig.getCertificateFile(),
-                        sslHostConfig.getCertificateKeyFile(), SSLPassword, SSL.SSL_AIDX_RSA);
+                        sslHostConfig.getCertificateKeyFile(),
+                        sslHostConfig.getCertificateKeyPassword(), SSL.SSL_AIDX_RSA);
                 // Set certificate chain file
                 SSLContext.setCertificateChainFile(ctx, SSLCertificateChainFile, false);
                 // Support Client Certificates

==================================================
JSSESocketFactory.java
index f0d9ee7ea3..d57d92b6b4 100644
--- a/java/org/apache/tomcat/util/net/SSLHostConfig.java
+++ b/java/org/apache/tomcat/util/net/SSLHostConfig.java
@@ -45,6 +45,7 @@ public class SSLHostConfig {
     // Configuration properties
 
     // Common
+    private String certificateKeyPassword = null;
     private CertificateVerification certificateVerification = CertificateVerification.NONE;
     private int certificateVerificationDepth = 10;
     private String ciphers = "HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!kRSA";
@@ -52,6 +53,7 @@ public class SSLHostConfig {
 
     private Set<String> protocols = new HashSet<>();
     // JSSE
+    private String certificateKeystorePassword = "changeit";
     private String certificateKeystoreFile = System.getProperty("user.home")+"/.keystore";
     private String keyManagerAlgorithm = KeyManagerFactory.getDefaultAlgorithm();
     // OpenSSL
@@ -105,6 +107,16 @@ public class SSLHostConfig {
 
     // ----------------------------------------- Common configuration properties
 
+    public void setCertificateKeyPassword(String certificateKeyPassword) {
+        this.certificateKeyPassword = certificateKeyPassword;
+    }
+
+
+    public String getCertificateKeyPassword() {
+        return certificateKeyPassword;
+    }
+
+
     public void setCertificateVerification(String certificateVerification) {
         this.certificateVerification = CertificateVerification.fromString(certificateVerification);
     }
@@ -207,14 +219,13 @@ public class SSLHostConfig {
 
     // ---------------------------------- JSSE specific configuration properties
 
-    public void setKeyManagerAlgorithm(String keyManagerAlgorithm) {
-        setProperty("keyManagerAlgorithm", Type.JSSE);
-        this.keyManagerAlgorithm = keyManagerAlgorithm;
+    public void setCertificateKeystorePassword(String certificateKeystorePassword) {
+        this.certificateKeystorePassword = certificateKeystorePassword;
     }
 
 
-    public String getKeyManagerAlgorithm() {
-        return keyManagerAlgorithm;
+    public String getCertificateKeystorePassword() {
+        return certificateKeystorePassword;
     }
 
 
@@ -229,6 +240,17 @@ public class SSLHostConfig {
     }
 
 
+    public void setKeyManagerAlgorithm(String keyManagerAlgorithm) {
+        setProperty("keyManagerAlgorithm", Type.JSSE);
+        this.keyManagerAlgorithm = keyManagerAlgorithm;
+    }
+
+
+    public String getKeyManagerAlgorithm() {
+        return keyManagerAlgorithm;
+    }
+
+
     // ------------------------------- OpenSSL specific configuration properties
 
     public void setCertificateFile(String certificateFile) {

==================================================
