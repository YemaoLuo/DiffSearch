8eec78331b2e50e1c7e364eb952a845be237077a
==================================================
UCDetector: Remove unused constructors
==================================================
Mark Emlyn
==================================================
Tue Feb 19 20:36:34 2013 +0000
==================================================
CallMethodRule.java
UCDetector: Remove unused constructors

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1447907 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CallParamRule.java
index 59a3ec18bf..263662d581 100644
--- a/java/org/apache/tomcat/util/digester/CallMethodRule.java
+++ b/java/org/apache/tomcat/util/digester/CallMethodRule.java
@@ -124,51 +124,6 @@ public class CallMethodRule extends Rule {
     }
 
 
-    /**
-     * Construct a "call method" rule with the specified method name and
-     * parameter types. If <code>paramCount</code> is set to zero the rule
-     * will use the body of this element as the single argument of the
-     * method, unless <code>paramTypes</code> is null or empty, in this
-     * case the rule will call the specified method with no arguments.
-     *
-     * @param targetOffset location of the target object. Positive numbers are
-     * relative to the top of the digester object stack. Negative numbers
-     * are relative to the bottom of the stack. Zero implies the top
-     * object on the stack.
-     * @param methodName Method name of the parent method to call
-     * @param paramCount The number of parameters to collect, or
-     *  zero for a single argument from the body of this element
-     * @param paramTypes The Java class names of the arguments
-     *  (if you wish to use a primitive type, specify the corresponding
-     *  Java wrapper class instead, such as <code>java.lang.Boolean</code>
-     *  for a <code>boolean</code> parameter)
-     */
-    public CallMethodRule(  int targetOffset,
-                            String methodName,
-                            int paramCount,
-                            String paramTypes[]) {
-
-        this.targetOffset = targetOffset;
-        this.methodName = methodName;
-        this.paramCount = paramCount;
-        if (paramTypes == null) {
-            this.paramTypes = new Class[paramCount];
-            for (int i = 0; i < this.paramTypes.length; i++) {
-                this.paramTypes[i] = String.class;
-            }
-            this.paramClassNames = null;
-        } else {
-            // copy the parameter class names into an array
-            // the classes will be loaded when the digester is set
-            this.paramClassNames = new String[paramTypes.length];
-            for (int i = 0; i < this.paramClassNames.length; i++) {
-                this.paramClassNames[i] = paramTypes[i];
-            }
-        }
-
-    }
-
-
     /**
      * Construct a "call method" rule with the specified method name and
      * parameter types. If <code>paramCount</code> is set to zero the rule

==================================================
FactoryCreateRule.java
index 9329a3bf0e..fcfddb3360 100644
--- a/java/org/apache/tomcat/util/digester/CallParamRule.java
+++ b/java/org/apache/tomcat/util/digester/CallParamRule.java
@@ -67,28 +67,6 @@ public class CallParamRule extends Rule {
     }
 
 
-    /**
-     * Construct a "call parameter" rule.
-     *
-     * @param paramIndex The zero-relative parameter number
-     * @param fromStack should this parameter be taken from the top of the stack?
-     */
-    public CallParamRule(int paramIndex, boolean fromStack) {
-        this(null, paramIndex, 0, fromStack);
-    }
-
-    /**
-     * Constructs a "call parameter" rule which sets a parameter from the stack.
-     * If the stack contains too few objects, then the parameter will be set to null.
-     *
-     * @param paramIndex The zero-relative parameter number
-     * @param stackIndex the index of the object which will be passed as a parameter.
-     * The zeroth object is the top of the stack, 1 is the next object down and so on.
-     */
-    public CallParamRule(int paramIndex, int stackIndex) {
-        this(null, paramIndex, stackIndex, true);
-    }
-
     private CallParamRule(String attributeName, int paramIndex, int stackIndex,
             boolean fromStack) {
         this.attributeName = attributeName;

==================================================
ObjectCreateRule.java
index 15dfe4ccba..97a6fdf84b 100644
--- a/java/org/apache/tomcat/util/digester/FactoryCreateRule.java
+++ b/java/org/apache/tomcat/util/digester/FactoryCreateRule.java
@@ -41,42 +41,8 @@ public class FactoryCreateRule extends Rule {
     /** Stock to manage */
     private ArrayStack<Boolean> exceptionIgnoredStack;
 
-    // ----------------------------------------------------------- Constructors
-
-
-    /**
-     * Construct a factory create rule that will use the specified
-     * class name to create an {@link ObjectCreationFactory} which will
-     * then be used to create an object and push it on the stack.
-     *
-     * @param className Java class name of the object creation factory class
-     * @param ignoreCreateExceptions if true, exceptions thrown by the object
-     *  creation factory
-     * will be ignored.
-     */
-    public FactoryCreateRule(String className, boolean ignoreCreateExceptions) {
-
-        this(className, null, ignoreCreateExceptions);
-
-    }
-
-
-    /**
-     * Construct a factory create rule that will use the specified
-     * class to create an {@link ObjectCreationFactory} which will
-     * then be used to create an object and push it on the stack.
-     *
-     * @param clazz Java class name of the object creation factory class
-     * @param ignoreCreateExceptions if true, exceptions thrown by the
-     *  object creation factory
-     * will be ignored.
-     */
-    public FactoryCreateRule(Class<?> clazz, boolean ignoreCreateExceptions) {
-
-        this(clazz, null, ignoreCreateExceptions);
-
-    }
 
+    // ----------------------------------------------------------- Constructors
 
     /**
      * Construct a factory create rule that will use the specified

==================================================
SetNextRule.java
index ba9d2defab..cbd1df5203 100644
--- a/java/org/apache/tomcat/util/digester/ObjectCreateRule.java
+++ b/java/org/apache/tomcat/util/digester/ObjectCreateRule.java
@@ -46,18 +46,6 @@ public class ObjectCreateRule extends Rule {
     }
 
 
-    /**
-     * Construct an object create rule with the specified class.
-     *
-     * @param clazz Java class name of the object to be created
-     */
-    public ObjectCreateRule(Class<?> clazz) {
-
-        this(clazz.getName(), (String) null);
-
-    }
-
-
     /**
      * Construct an object create rule with the specified class name and an
      * optional attribute name containing an override.
@@ -75,24 +63,8 @@ public class ObjectCreateRule extends Rule {
     }
 
 
-    /**
-     * Construct an object create rule with the specified class and an
-     * optional attribute name containing an override.
-     *
-     * @param attributeName Attribute name which, if present, contains an
-     * @param clazz Java class name of the object to be created
-     *  override of the class name to create
-     */
-    public ObjectCreateRule(String attributeName,
-                            Class<?> clazz) {
-
-        this(clazz.getName(), attributeName);
-
-    }
-
     // ----------------------------------------------------- Instance Variables
 
-
     /**
      * The attribute containing an override class name if it is present.
      */

==================================================
SetPropertiesRule.java
index cb03520986..15f4a77373 100644
--- a/java/org/apache/tomcat/util/digester/SetNextRule.java
+++ b/java/org/apache/tomcat/util/digester/SetNextRule.java
@@ -36,20 +36,6 @@ public class SetNextRule extends Rule {
 
     // ----------------------------------------------------------- Constructors
 
-    /**
-     * Construct a "set next" rule with the specified method name.  The
-     * method's argument type is assumed to be the class of the
-     * child object.
-     *
-     * @param methodName Method name of the parent method to call
-     */
-    public SetNextRule(String methodName) {
-
-        this(methodName, null);
-
-    }
-
-
     /**
      * Construct a "set next" rule with the specified method name.
      *

==================================================
