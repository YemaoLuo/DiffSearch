4087d97f697345bfd085ae3089f74a90d27aceaa
==================================================
Code clean-up for o.a.catalina.realm
==================================================
Mark Emlyn
==================================================
Sun Jul 15 19:34:05 2012 +0000
==================================================
CombinedRealm.java
Code clean-up for o.a.catalina.realm
 - Add final prompted by UCDetector
 - Java 7 use of <>

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1361768 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DataSourceRealm.java
index 493e3de236..54599ec7f9 100644
--- a/java/org/apache/catalina/realm/CombinedRealm.java
+++ b/java/org/apache/catalina/realm/CombinedRealm.java
@@ -48,7 +48,7 @@ public class CombinedRealm extends RealmBase {
     /**
      * The list of Realms contained by this Realm.
      */
-    protected List<Realm> realms = new LinkedList<Realm>();
+    protected final List<Realm> realms = new LinkedList<>();
 
     /**
      * Descriptive information about this Realm implementation.

==================================================
GenericPrincipal.java
index 10767c059d..edc881889c 100644
--- a/java/org/apache/catalina/realm/DataSourceRealm.java
+++ b/java/org/apache/catalina/realm/DataSourceRealm.java
@@ -513,7 +513,7 @@ public class DataSourceRealm extends RealmBase {
         try {
             stmt = roles(dbConnection, username);
             rs = stmt.executeQuery();
-            list = new ArrayList<String>();
+            list = new ArrayList<>();
 
             while (rs.next()) {
                 String role = rs.getString(1);

==================================================
JAASCallbackHandler.java
index 525eea7b24..b0d3592c36 100644
--- a/java/org/apache/catalina/realm/GenericPrincipal.java
+++ b/java/org/apache/catalina/realm/GenericPrincipal.java
@@ -125,9 +125,10 @@ public class GenericPrincipal implements TomcatPrincipal {
         this.name = name;
         this.password = password;
         this.userPrincipal = userPrincipal;
-        if (roles != null) {
-            this.roles = new String[roles.size()];
-            this.roles = roles.toArray(this.roles);
+        if (roles == null) {
+            this.roles = new String[0];
+        } else {
+            this.roles = roles.toArray(new String[roles.size()]);
             if (this.roles.length > 1)
                 Arrays.sort(this.roles);
         }
@@ -142,7 +143,7 @@ public class GenericPrincipal implements TomcatPrincipal {
     /**
      * The username of the user represented by this Principal.
      */
-    protected String name = null;
+    protected final String name;
 
     @Override
     public String getName() {
@@ -154,7 +155,7 @@ public class GenericPrincipal implements TomcatPrincipal {
      * The authentication credentials for the user represented by
      * this Principal.
      */
-    protected String password = null;
+    protected final String password;
 
     public String getPassword() {
         return (this.password);
@@ -164,7 +165,7 @@ public class GenericPrincipal implements TomcatPrincipal {
     /**
      * The set of roles associated with this user.
      */
-    protected String roles[] = new String[0];
+    protected final String roles[];
 
     public String[] getRoles() {
         return (this.roles);
@@ -174,7 +175,7 @@ public class GenericPrincipal implements TomcatPrincipal {
     /**
      * The authenticated Principal to be exposed to applications.
      */
-    protected Principal userPrincipal = null;
+    protected final Principal userPrincipal;
 
     @Override
     public Principal getUserPrincipal() {
@@ -190,7 +191,7 @@ public class GenericPrincipal implements TomcatPrincipal {
      * The JAAS LoginContext, if any, used to authenticate this Principal.
      * Kept so we can call logout().
      */
-    protected LoginContext loginContext = null;
+    protected final LoginContext loginContext;
 
 
     /**

==================================================
JAASRealm.java
index 8dedd516f0..bd3bc0c227 100644
--- a/java/org/apache/catalina/realm/JAASCallbackHandler.java
+++ b/java/org/apache/catalina/realm/JAASCallbackHandler.java
@@ -65,16 +65,8 @@ public class JAASCallbackHandler implements CallbackHandler {
     public JAASCallbackHandler(JAASRealm realm, String username,
                                String password) {
 
-        super();
-        this.realm = realm;
-        this.username = username;
-
-        if (realm.hasMessageDigest()) {
-            this.password = realm.digest(password);
-        }
-        else {
-            this.password = password;
-        }
+        this(realm, username, password, null, null, null, null, null, null,
+                null);
     }
 
 
@@ -97,7 +89,15 @@ public class JAASCallbackHandler implements CallbackHandler {
                                String password, String nonce, String nc,
                                String cnonce, String qop, String realmName,
                                String md5a2, String authMethod) {
-        this(realm, username, password);
+        this.realm = realm;
+        this.username = username;
+
+        if (realm.hasMessageDigest()) {
+            this.password = realm.digest(password);
+        }
+        else {
+            this.password = password;
+        }
         this.nonce = nonce;
         this.nc = nc;
         this.cnonce = cnonce;
@@ -118,53 +118,53 @@ public class JAASCallbackHandler implements CallbackHandler {
     /**
      * The password to be authenticated with.
      */
-    protected String password = null;
+    protected final String password;
 
 
     /**
      * The associated <code>JAASRealm</code> instance.
      */
-    protected JAASRealm realm = null;
+    protected final JAASRealm realm;
 
     /**
      * The username to be authenticated with.
      */
-    protected String username = null;
+    protected final String username;
 
     /**
      * Server generated nonce.
      */
-    protected String nonce = null;
+    protected final String nonce;
 
     /**
      * Nonce count.
      */
-    protected String nc = null;
+    protected final String nc;
 
     /**
      * Client generated nonce.
      */
-    protected String cnonce = null;
+    protected final String cnonce;
 
     /**
      * Quality of protection applied to the message.
      */
-    protected String qop;
+    protected final String qop;
 
     /**
      * Realm name.
      */
-    protected String realmName;
+    protected final String realmName;
 
     /**
      * Second MD5 digest.
      */
-    protected String md5a2;
+    protected final String md5a2;
 
     /**
      * The authentication method to be used. If null, assume BASIC/FORM.
      */
-    protected String authMethod;
+    protected final String authMethod;
 
     // --------------------------------------------------------- Public Methods
 

==================================================
JDBCRealm.java
index b08fb9bcad..a524a3e7de 100644
--- a/java/org/apache/catalina/realm/JAASRealm.java
+++ b/java/org/apache/catalina/realm/JAASRealm.java
@@ -149,13 +149,13 @@ public class JAASRealm
     /**
      * The list of role class names, split out for easy processing.
      */
-    protected List<String> roleClasses = new ArrayList<String>();
+    protected final List<String> roleClasses = new ArrayList<>();
 
 
     /**
      * The set of user class names, split out for easy processing.
      */
-    protected List<String> userClasses = new ArrayList<String>();
+    protected final List<String> userClasses = new ArrayList<>();
 
 
     /**
@@ -491,7 +491,7 @@ public class JAASRealm
             LoginContext loginContext) {
         // Prepare to scan the Principals for this Subject
 
-        List<String> roles = new ArrayList<String>();
+        List<String> roles = new ArrayList<>();
         Principal userPrincipal = null;
 
         // Scan the Principals for this Subject

==================================================
JNDIRealm.java
index 5c3dc6ecfe..80abe4d618 100644
--- a/java/org/apache/catalina/realm/JDBCRealm.java
+++ b/java/org/apache/catalina/realm/JDBCRealm.java
@@ -622,7 +622,7 @@ public class JDBCRealm
 
                 try {
                     // Accumulate the user's roles
-                    ArrayList<String> roleList = new ArrayList<String>();
+                    ArrayList<String> roleList = new ArrayList<>();
                     stmt = roles(dbConnection, username);
                     rs = stmt.executeQuery();
                     while (rs.next()) {

==================================================
LockOutRealm.java
index 9030aa48a3..bca9f218b3 100644
--- a/java/org/apache/catalina/realm/JNDIRealm.java
+++ b/java/org/apache/catalina/realm/JNDIRealm.java
@@ -1246,7 +1246,7 @@ public class JNDIRealm extends RealmBase {
         User user = null;
 
         // Get attributes to retrieve from user entry
-        ArrayList<String> list = new ArrayList<String>();
+        ArrayList<String> list = new ArrayList<>();
         if (userPassword != null)
             list.add(userPassword);
         if (userRoleName != null)
@@ -1718,7 +1718,7 @@ public class JNDIRealm extends RealmBase {
             containerLog.trace("  getRoles(" + dn + ")");
 
         // Start with roles retrieved from the user entry
-        List<String> list = new ArrayList<String>();
+        List<String> list = new ArrayList<>();
         List<String> userRoles = user.getRoles();
         if (userRoles != null) {
             list.addAll(userRoles);
@@ -1772,7 +1772,7 @@ public class JNDIRealm extends RealmBase {
         if (results == null)
             return (list);  // Should never happen, but just in case ...
 
-        HashMap<String, String> groupMap = new HashMap<String, String>();
+        HashMap<String, String> groupMap = new HashMap<>();
         try {
             while (results.hasMore()) {
                 SearchResult result = results.next();
@@ -1805,9 +1805,9 @@ public class JNDIRealm extends RealmBase {
             // Directory Groups". It avoids group slurping and handles cyclic group memberships as well.
             // See http://middleware.internet2.edu/dir/ for details
 
-            Map<String, String> newGroups = new HashMap<String,String>(groupMap);
+            Map<String, String> newGroups = new HashMap<>(groupMap);
             while (!newGroups.isEmpty()) {
-                Map<String, String> newThisRound = new HashMap<String, String>(); // Stores the groups we find in this iteration
+                Map<String, String> newThisRound = new HashMap<>(); // Stores the groups we find in this iteration
 
                 for (Entry<String, String> group : newGroups.entrySet()) {
                     filter = roleFormat.format(new String[] { group.getKey(), group.getValue(), group.getValue() });
@@ -1903,7 +1903,7 @@ public class JNDIRealm extends RealmBase {
         if (attrId == null || attrs == null)
             return values;
         if (values == null)
-            values = new ArrayList<String>();
+            values = new ArrayList<>();
         Attribute attr = attrs.get(attrId);
         if (attr == null)
             return (values);
@@ -2151,7 +2151,7 @@ public class JNDIRealm extends RealmBase {
      */
     protected Hashtable<String,String> getDirectoryContextEnvironment() {
 
-        Hashtable<String,String> env = new Hashtable<String,String>();
+        Hashtable<String,String> env = new Hashtable<>();
 
         // Configure our directory context environment.
         if (containerLog.isDebugEnabled() && connectionAttempt == 0)
@@ -2250,7 +2250,7 @@ public class JNDIRealm extends RealmBase {
     protected String[] parseUserPatternString(String userPatternString) {
 
         if (userPatternString != null) {
-            ArrayList<String> pathList = new ArrayList<String>();
+            ArrayList<String> pathList = new ArrayList<>();
             int startParenLoc = userPatternString.indexOf('(');
             if (startParenLoc == -1) {
                 // no parens here; return whole thing

==================================================
MemoryRealm.java
index 40fe6c5d6a..c11cbac396 100644
--- a/java/org/apache/catalina/realm/LockOutRealm.java
+++ b/java/org/apache/catalina/realm/LockOutRealm.java
@@ -424,7 +424,7 @@ public class LockOutRealm extends CombinedRealm {
 
 
     protected static class LockRecord {
-        private AtomicInteger failures = new AtomicInteger(0);
+        private final AtomicInteger failures = new AtomicInteger(0);
         private long lastFailureTime = 0;
 
         public int getFailures() {

==================================================
MemoryRuleSet.java
index 475dc51035..b0659ac1ef 100644
--- a/java/org/apache/catalina/realm/MemoryRealm.java
+++ b/java/org/apache/catalina/realm/MemoryRealm.java
@@ -71,8 +71,7 @@ public class MemoryRealm  extends RealmBase {
     /**
      * The set of valid Principals for this Realm, keyed by user name.
      */
-    private Map<String,GenericPrincipal> principals =
-        new HashMap<String,GenericPrincipal>();
+    private final Map<String,GenericPrincipal> principals = new HashMap<>();
 
 
     // ------------------------------------------------------------- Properties
@@ -154,7 +153,7 @@ public class MemoryRealm  extends RealmBase {
     void addUser(String username, String password, String roles) {
 
         // Accumulate the list of roles for this user
-        ArrayList<String> list = new ArrayList<String>();
+        ArrayList<String> list = new ArrayList<>();
         roles += ",";
         while (true) {
             int comma = roles.indexOf(',');

==================================================
RealmBase.java
index cd0db12992..e1e5832c5b 100644
--- a/java/org/apache/catalina/realm/MemoryRuleSet.java
+++ b/java/org/apache/catalina/realm/MemoryRuleSet.java
@@ -42,7 +42,7 @@ public class MemoryRuleSet extends RuleSetBase {
     /**
      * The matching pattern prefix to use for recognizing our elements.
      */
-    protected String prefix = null;
+    protected final String prefix;
 
 
     // ------------------------------------------------------------ Constructor

==================================================
UserDatabaseRealm.java
index 63d98adcad..264a7a68ca 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -129,7 +129,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
     /**
      * The property change support for this component.
      */
-    protected PropertyChangeSupport support = new PropertyChangeSupport(this);
+    protected final PropertyChangeSupport support = new PropertyChangeSupport(this);
 
 
     /**
@@ -576,7 +576,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
                         found = true;
                         if(collection[j].findMethod(method)) {
                             if(results == null) {
-                                results = new ArrayList<SecurityConstraint>();
+                                results = new ArrayList<>();
                             }
                             results.add(constraints[i]);
                         }
@@ -645,7 +645,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
                     }
                     if(collection[j].findMethod(method)) {
                         if(results == null) {
-                            results = new ArrayList<SecurityConstraint>();
+                            results = new ArrayList<>();
                         }
                         results.add(constraints[i]);
                     }
@@ -703,7 +703,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
                 found = true;
                 if(collection[pos].findMethod(method)) {
                     if(results == null) {
-                        results = new ArrayList<SecurityConstraint>();
+                        results = new ArrayList<>();
                     }
                     results.add(constraints[i]);
                 }
@@ -747,7 +747,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
                 }
                 if(matched) {
                     if(results == null) {
-                        results = new ArrayList<SecurityConstraint>();
+                        results = new ArrayList<>();
                     }
                     results.add(constraints[i]);
                 }
@@ -1378,7 +1378,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
 
     protected static class AllRolesMode {
 
-        private String name;
+        private final String name;
         /** Use the strict servlet spec interpretation which requires that the user
          * have one of the web-app/security-role/role-name
          */
@@ -1438,7 +1438,6 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
             return new X509SubjectDnRetriever();
 
         try {
-            @SuppressWarnings("unchecked")
             Class<? extends X509UsernameRetriever> clazz = (Class<? extends X509UsernameRetriever>)Class.forName(className);
             return clazz.newInstance();
         } catch (ClassNotFoundException e) {

==================================================
