15790b8df3c8ba5b5ca5a85ec61953d6204e2a33
==================================================
Simplify. ISE should be impossible. There is only one container thread at a time. To get this far thread must be in STARTED stated which means no ISE will be thrown.
==================================================
Mark Thomas
==================================================
Tue Sep 29 21:18:16 2015 +0000
==================================================
AjpProcessor.java
Simplify. ISE should be impossible. There is only one container thread at a time. To get this far thread must be in STARTED stated which means no ISE will be thrown.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1705926 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11Processor.java
index 2f6aad8f17..05b725e385 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -621,35 +621,27 @@ public class AjpProcessor extends AbstractProcessor {
     public SocketState dispatch(SocketStatus status) {
 
         if (status == SocketStatus.OPEN_WRITE && response.getWriteListener() != null) {
+            asyncStateMachine.asyncOperation();
             try {
-                asyncStateMachine.asyncOperation();
-                try {
+                if (hasDataToWrite()) {
+                    socketWrapper.flush(false);
                     if (hasDataToWrite()) {
-                        socketWrapper.flush(false);
-                        if (hasDataToWrite()) {
-                            // There is data to write but go via Response to
-                            // maintain a consistent view of non-blocking state
-                            response.checkRegisterForWrite();
-                            return SocketState.LONG;
-                        }
+                        // There is data to write but go via Response to
+                        // maintain a consistent view of non-blocking state
+                        response.checkRegisterForWrite();
+                        return SocketState.LONG;
                     }
-                } catch (IOException x) {
-                    if (getLog().isDebugEnabled()) {
-                        getLog().debug("Unable to write async data.",x);
-                    }
-                    status = SocketStatus.ASYNC_WRITE_ERROR;
-                    request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, x);
                 }
-            } catch (IllegalStateException x) {
-                socketWrapper.registerWriteInterest();
+            } catch (IOException ioe) {
+                if (getLog().isDebugEnabled()) {
+                    getLog().debug("Unable to write async data.", ioe);
+                }
+                status = SocketStatus.ASYNC_WRITE_ERROR;
+                request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, ioe);
             }
         } else if (status == SocketStatus.OPEN_READ && request.getReadListener() != null) {
-            try {
-                if (available()) {
-                    asyncStateMachine.asyncOperation();
-                }
-            } catch (IllegalStateException x) {
-                socketWrapper.registerReadInterest();
+            if (available()) {
+                asyncStateMachine.asyncOperation();
             }
         }
 

==================================================
StreamProcessor.java
index edb7e41c62..e9de7a192c 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -1714,26 +1714,15 @@ public class Http11Processor extends AbstractProcessor {
                         return SocketState.LONG;
                     }
                 }
-            } catch (IOException | IllegalStateException x) {
-                // IOE - Problem writing to socket
-                // ISE - Request/Response not in correct state for async write
+            } catch (IOException ioe) {
                 if (log.isDebugEnabled()) {
-                    log.debug("Unable to write async data.",x);
+                    log.debug("Unable to write async data.", ioe);
                 }
                 status = SocketStatus.ASYNC_WRITE_ERROR;
-                request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, x);
+                request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, ioe);
             }
         } else if (status == SocketStatus.OPEN_READ && request.getReadListener() != null) {
-            try {
-                asyncStateMachine.asyncOperation();
-            } catch (IllegalStateException x) {
-                // ISE - Request/Response not in correct state for async read
-                if (log.isDebugEnabled()) {
-                    log.debug("Unable to read async data.",x);
-                }
-                status = SocketStatus.ASYNC_READ_ERROR;
-                request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, x);
-            }
+            asyncStateMachine.asyncOperation();
         }
 
         RequestInfo rp = request.getRequestProcessor();

==================================================
