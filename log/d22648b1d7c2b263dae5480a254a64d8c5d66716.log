d22648b1d7c2b263dae5480a254a64d8c5d66716
==================================================
Fix various typos in threshold
==================================================
Mark Thomas
==================================================
Thu Sep 5 12:38:52 2019 +0100
==================================================
Http2Protocol.java
Fix various typos in threshold



==================================================
Http2UpgradeHandler.java
index ce84ce53fd..6232f35261 100644
--- a/java/org/apache/coyote/http2/Http2Protocol.java
+++ b/java/org/apache/coyote/http2/Http2Protocol.java
@@ -86,8 +86,8 @@ public class Http2Protocol implements UpgradeProtocol {
     private int maxTrailerSize = Constants.DEFAULT_MAX_TRAILER_SIZE;
     private int overheadCountFactor = DEFAULT_OVERHEAD_COUNT_FACTOR;
     private int overheadContinuationThreshold = DEFAULT_OVERHEAD_CONTINUATION_THRESHOLD;
-    private int overheadDataThreadhold = DEFAULT_OVERHEAD_DATA_THRESHOLD;
-    private int overheadWindowUpdateThreadhold = DEFAULT_OVERHEAD_WINDOW_UPDATE_THRESHOLD;
+    private int overheadDataThreshold = DEFAULT_OVERHEAD_DATA_THRESHOLD;
+    private int overheadWindowUpdateThreshold = DEFAULT_OVERHEAD_WINDOW_UPDATE_THRESHOLD;
 
     private boolean initiatePingDisabled = false;
     private boolean useSendfile = true;
@@ -326,33 +326,33 @@ public class Http2Protocol implements UpgradeProtocol {
     }
 
 
-    public int getOverheadContinuationThreshhold() {
+    public int getOverheadContinuationThreshold() {
         return overheadContinuationThreshold;
     }
 
 
-    public void setOverheadContinuationThreshhold(int overheadContinuationThreshold) {
+    public void setOverheadContinuationThreshold(int overheadContinuationThreshold) {
         this.overheadContinuationThreshold = overheadContinuationThreshold;
     }
 
 
-    public int getOverheadDataThreadhold() {
-        return overheadDataThreadhold;
+    public int getOverheadDataThreshold() {
+        return overheadDataThreshold;
     }
 
 
-    public void setOverheadDataThreadhold(int overheadDataThreadhold) {
-        this.overheadDataThreadhold = overheadDataThreadhold;
+    public void setOverheadDataThreshold(int overheadDataThreshold) {
+        this.overheadDataThreshold = overheadDataThreshold;
     }
 
 
-    public int getOverheadWindowUpdateThreadhold() {
-        return overheadWindowUpdateThreadhold;
+    public int getOverheadWindowUpdateThreshold() {
+        return overheadWindowUpdateThreshold;
     }
 
 
-    public void setOverheadWindowUpdateThreadhold(int overheadWindowUpdateThreadhold) {
-        this.overheadWindowUpdateThreadhold = overheadWindowUpdateThreadhold;
+    public void setOverheadWindowUpdateThreshold(int overheadWindowUpdateThreshold) {
+        this.overheadWindowUpdateThreshold = overheadWindowUpdateThreshold;
     }
 
 

==================================================
TestHttp2Section_5_2.java
index b13176571b..15385f6034 100644
--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java
@@ -1340,7 +1340,7 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
         // the overhead count unless it is the final DATA frame where small
         // payloads are expected.
         if (!endOfStream) {
-            int overheadThreshold = protocol.getOverheadDataThreadhold();
+            int overheadThreshold = protocol.getOverheadDataThreshold();
             if (payloadSize < overheadThreshold) {
                 if (payloadSize == 0) {
                     // Avoid division by zero
@@ -1470,7 +1470,7 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
         // they are small and the frame isn't the final header frame then that
         // is indicative of an abusive client
         if (!endOfHeaders) {
-            int overheadThreshold = getProtocol().getOverheadContinuationThreshhold();
+            int overheadThreshold = getProtocol().getOverheadContinuationThreshold();
             if (payloadSize < overheadThreshold) {
                 if (payloadSize == 0) {
                     // Avoid division by zero
@@ -1582,7 +1582,7 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
 
     @Override
     public void incrementWindowSize(int streamId, int increment) throws Http2Exception {
-        int overheadThreshold = protocol.getOverheadWindowUpdateThreadhold();
+        int overheadThreshold = protocol.getOverheadWindowUpdateThreshold();
 
         if (streamId == 0) {
             // Check for small increments which are inefficient

==================================================
TestHttp2Section_5_3.java
index ad55980724..7bef2f0566 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_5_2.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_5_2.java
@@ -42,7 +42,7 @@ public class TestHttp2Section_5_2 extends Http2TestBase {
 
         // This test uses small window updates that will trigger the excessive
         // overhead protection so disable it.
-        http2Protocol.setOverheadWindowUpdateThreadhold(0);
+        http2Protocol.setOverheadWindowUpdateThreshold(0);
 
         // Set the default window size to 1024 bytes
         sendSettings(0, false, new SettingValue(4, 1024));

==================================================
