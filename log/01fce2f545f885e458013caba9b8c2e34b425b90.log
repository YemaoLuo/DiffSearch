01fce2f545f885e458013caba9b8c2e34b425b90
==================================================
Use base collection types in private code
==================================================
Emmanuel Bourg
==================================================
Tue May 9 23:15:45 2017 +0000
==================================================
SavedRequest.java
Use base collection types in private code

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1794661 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ApplicationContext.java
index f494b50018..4cf8c7c1c6 100644
--- a/java/org/apache/catalina/authenticator/SavedRequest.java
+++ b/java/org/apache/catalina/authenticator/SavedRequest.java
@@ -20,9 +20,12 @@ package org.apache.catalina.authenticator;
 
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Locale;
+import java.util.Map;
 
 import javax.servlet.http.Cookie;
 
@@ -42,11 +45,10 @@ import org.apache.tomcat.util.buf.ByteChunk;
  */
 public final class SavedRequest {
 
-
     /**
      * The set of Cookies associated with this Request.
      */
-    private final ArrayList<Cookie> cookies = new ArrayList<>();
+    private final List<Cookie> cookies = new ArrayList<>();
 
     public void addCookie(Cookie cookie) {
         cookies.add(cookie);
@@ -59,14 +61,14 @@ public final class SavedRequest {
 
     /**
      * The set of Headers associated with this Request.  Each key is a header
-     * name, while the value is a ArrayList containing one or more actual
+     * name, while the value is a List containing one or more actual
      * values for this header.  The values are returned as an Iterator when
      * you ask for them.
      */
-    private final HashMap<String,ArrayList<String>> headers = new HashMap<>();
+    private final Map<String, List<String>> headers = new HashMap<>();
 
     public void addHeader(String name, String value) {
-        ArrayList<String> values = headers.get(name);
+        List<String> values = headers.get(name);
         if (values == null) {
             values = new ArrayList<>();
             headers.put(name, values);
@@ -79,9 +81,9 @@ public final class SavedRequest {
     }
 
     public Iterator<String> getHeaderValues(String name) {
-        ArrayList<String> values = headers.get(name);
+        List<String> values = headers.get(name);
         if (values == null)
-            return new ArrayList<String>().iterator();
+            return Collections.emptyIterator();
         else
             return values.iterator();
     }
@@ -90,7 +92,7 @@ public final class SavedRequest {
     /**
      * The set of Locales associated with this Request.
      */
-    private final ArrayList<Locale> locales = new ArrayList<>();
+    private final List<Locale> locales = new ArrayList<>();
 
     public void addLocale(Locale locale) {
         locales.add(locale);

==================================================
ApplicationHttpRequest.java
index 906bd2e9d5..fad9bfc2a9 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -1337,7 +1337,7 @@ public class ApplicationContext implements ServletContext {
     protected void clearAttributes() {
 
         // Create list of attributes to be removed
-        ArrayList<String> list = new ArrayList<>();
+        List<String> list = new ArrayList<>();
         Iterator<String> iter = attributes.keySet().iterator();
         while (iter.hasNext()) {
             list.add(iter.next());

==================================================
StandardContext.java
index b2f4ac6b00..46f40918dd 100644
--- a/java/org/apache/catalina/core/ApplicationHttpRequest.java
+++ b/java/org/apache/catalina/core/ApplicationHttpRequest.java
@@ -26,6 +26,7 @@ import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Enumeration;
+import java.util.List;
 import java.util.Map;
 import java.util.NoSuchElementException;
 
@@ -814,7 +815,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      */
     private String[] mergeValues(String[] values1, String[] values2) {
 
-        ArrayList<Object> results = new ArrayList<>();
+        List<Object> results = new ArrayList<>();
 
         if (values1 == null) {
             // Skip - nothing to merge

==================================================
StandardPipeline.java
index 4f082c247d..6b0a0d1178 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -370,22 +370,21 @@ public class StandardContext extends ContainerBase
      * The exception pages for this web application, keyed by fully qualified
      * class name of the Java exception.
      */
-    private HashMap<String, ErrorPage> exceptionPages = new HashMap<>();
+    private Map<String, ErrorPage> exceptionPages = new HashMap<>();
 
 
     /**
      * The set of filter configurations (and associated filter instances) we
      * have initialized, keyed by filter name.
      */
-    private HashMap<String, ApplicationFilterConfig> filterConfigs =
-            new HashMap<>();
+    private Map<String, ApplicationFilterConfig> filterConfigs = new HashMap<>();
 
 
     /**
      * The set of filter definitions for this application, keyed by
      * filter name.
      */
-    private HashMap<String, FilterDef> filterDefs = new HashMap<>();
+    private Map<String, FilterDef> filterDefs = new HashMap<>();
 
 
     /**
@@ -443,7 +442,7 @@ public class StandardContext extends ContainerBase
     /**
      * The MIME mappings for this web application, keyed by extension.
      */
-    private HashMap<String, String> mimeMappings = new HashMap<>();
+    private Map<String, String> mimeMappings = new HashMap<>();
 
 
     /**
@@ -517,7 +516,7 @@ public class StandardContext extends ContainerBase
      * The security role mappings for this application, keyed by role
      * name (as used within the application).
      */
-    private HashMap<String, String> roleMappings = new HashMap<>();
+    private Map<String, String> roleMappings = new HashMap<>();
 
 
     /**
@@ -532,7 +531,7 @@ public class StandardContext extends ContainerBase
      * The servlet mappings for this web application, keyed by
      * matching pattern.
      */
-    private HashMap<String, String> servletMappings = new HashMap<>();
+    private Map<String, String> servletMappings = new HashMap<>();
 
     private final Object servletMappingsLock = new Object();
 
@@ -552,7 +551,7 @@ public class StandardContext extends ContainerBase
      * HTTP status code (as an Integer). Note status code zero is used for the
      * default error page.
      */
-    private HashMap<Integer, ErrorPage> statusPages = new HashMap<>();
+    private Map<Integer, ErrorPage> statusPages = new HashMap<>();
 
 
     /**
@@ -4584,8 +4583,8 @@ public class StandardContext extends ContainerBase
         }
 
         // Sort listeners in two arrays
-        ArrayList<Object> eventListeners = new ArrayList<>();
-        ArrayList<Object> lifecycleListeners = new ArrayList<>();
+        List<Object> eventListeners = new ArrayList<>();
+        List<Object> lifecycleListeners = new ArrayList<>();
         for (int i = 0; i < results.length; i++) {
             if ((results[i] instanceof ServletContextAttributeListener)
                 || (results[i] instanceof ServletRequestAttributeListener)

==================================================
StandardWrapper.java
index b6e17d8db4..1c3354f299 100644
--- a/java/org/apache/catalina/core/StandardPipeline.java
+++ b/java/org/apache/catalina/core/StandardPipeline.java
@@ -20,6 +20,7 @@ package org.apache.catalina.core;
 
 
 import java.util.ArrayList;
+import java.util.List;
 import java.util.Set;
 
 import javax.management.ObjectName;
@@ -372,7 +373,7 @@ public class StandardPipeline extends LifecycleBase implements Pipeline {
     @Override
     public Valve[] getValves() {
 
-        ArrayList<Valve> valveList = new ArrayList<>();
+        List<Valve> valveList = new ArrayList<>();
         Valve current = first;
         if (current == null) {
             current = basic;
@@ -388,7 +389,7 @@ public class StandardPipeline extends LifecycleBase implements Pipeline {
 
     public ObjectName[] getValveObjectNames() {
 
-        ArrayList<ObjectName> valveList = new ArrayList<>();
+        List<ObjectName> valveList = new ArrayList<>();
         Valve current = first;
         if (current == null) {
             current = basic;

==================================================
NamingResourcesImpl.java
index 5ab11f473b..1425cf17d9 100644
--- a/java/org/apache/catalina/core/StandardWrapper.java
+++ b/java/org/apache/catalina/core/StandardWrapper.java
@@ -25,6 +25,7 @@ import java.util.Collections;
 import java.util.Enumeration;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.Set;
 import java.util.Stack;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
@@ -560,7 +561,7 @@ public class StandardWrapper extends ContainerBase
             return DEFAULT_SERVLET_METHODS;
         }
 
-        HashSet<String> allow = new HashSet<>();
+        Set<String> allow = new HashSet<>();
         allow.add("TRACE");
         allow.add("OPTIONS");
 

==================================================
DeltaSession.java
index 0817523c57..50aec726bc 100644
--- a/java/org/apache/catalina/deploy/NamingResourcesImpl.java
+++ b/java/org/apache/catalina/deploy/NamingResourcesImpl.java
@@ -24,6 +24,7 @@ import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.Map;
 import java.util.Set;
 
 import javax.naming.NamingException;
@@ -103,27 +104,27 @@ public class NamingResourcesImpl extends LifecycleMBeanBase
     /**
      * The EJB resource references for this web application, keyed by name.
      */
-    private final HashMap<String, ContextEjb> ejbs = new HashMap<>();
+    private final Map<String, ContextEjb> ejbs = new HashMap<>();
 
 
     /**
      * The environment entries for this web application, keyed by name.
      */
-    private final HashMap<String, ContextEnvironment> envs = new HashMap<>();
+    private final Map<String, ContextEnvironment> envs = new HashMap<>();
 
 
     /**
      * The local  EJB resource references for this web application, keyed by
      * name.
      */
-    private final HashMap<String, ContextLocalEjb> localEjbs = new HashMap<>();
+    private final Map<String, ContextLocalEjb> localEjbs = new HashMap<>();
 
 
     /**
      * The message destination references for this web application,
      * keyed by name.
      */
-    private final HashMap<String, MessageDestinationRef> mdrs = new HashMap<>();
+    private final Map<String, MessageDestinationRef> mdrs = new HashMap<>();
 
 
     /**

==================================================
JdbcLeakPrevention.java
index 636a3de1a1..d61817ec14 100644
--- a/java/org/apache/catalina/ha/session/DeltaSession.java
+++ b/java/org/apache/catalina/ha/session/DeltaSession.java
@@ -28,6 +28,7 @@ import java.io.WriteAbortedException;
 import java.security.Principal;
 import java.util.ArrayList;
 import java.util.Hashtable;
+import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.locks.Lock;
@@ -833,8 +834,8 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
 
         // Accumulate the names of serializable and non-serializable attributes
         String keys[] = keys();
-        ArrayList<String> saveNames = new ArrayList<>();
-        ArrayList<Object> saveValues = new ArrayList<>();
+        List<String> saveNames = new ArrayList<>();
+        List<Object> saveValues = new ArrayList<>();
         for (int i = 0; i < keys.length; i++) {
             Object value = null;
             value = attributes.get(keys[i]);

==================================================
WebappClassLoaderBase.java
index a6acd1807a..913fec5c6d 100644
--- a/java/org/apache/catalina/loader/JdbcLeakPrevention.java
+++ b/java/org/apache/catalina/loader/JdbcLeakPrevention.java
@@ -25,6 +25,7 @@ import java.util.ArrayList;
 import java.util.Enumeration;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 
 /**
  * This class is loaded by {@link WebappClassLoaderBase} to enable it to
@@ -52,7 +53,7 @@ public class JdbcLeakPrevention {
          * ensuring that both original drivers and any loaded as a result of the
          * side-effects are all de-registered.
          */
-        HashSet<Driver> originalDrivers = new HashSet<>();
+        Set<Driver> originalDrivers = new HashSet<>();
         Enumeration<Driver> drivers = DriverManager.getDrivers();
         while (drivers.hasMoreElements()) {
             originalDrivers.add(drivers.nextElement());

==================================================
GroupMBean.java
index e7c7fd02d6..352564fe92 100644
--- a/java/org/apache/catalina/loader/WebappClassLoaderBase.java
+++ b/java/org/apache/catalina/loader/WebappClassLoaderBase.java
@@ -280,7 +280,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
     protected boolean delegate = false;
 
 
-    private final HashMap<String,Long> jarModificationTimes = new HashMap<>();
+    private final Map<String,Long> jarModificationTimes = new HashMap<>();
 
 
     /**

==================================================
JmxRemoteLifecycleListener.java
index eb44fcafc2..3b2b74e2c1 100644
--- a/java/org/apache/catalina/mbeans/GroupMBean.java
+++ b/java/org/apache/catalina/mbeans/GroupMBean.java
@@ -18,6 +18,7 @@ package org.apache.catalina.mbeans;
 
 import java.util.ArrayList;
 import java.util.Iterator;
+import java.util.List;
 
 import javax.management.MBeanException;
 import javax.management.MalformedObjectNameException;
@@ -71,7 +72,7 @@ public class GroupMBean extends BaseModelMBean {
     public String[] getRoles() {
 
         Group group = (Group) this.resource;
-        ArrayList<String> results = new ArrayList<>();
+        List<String> results = new ArrayList<>();
         Iterator<Role> roles = group.getRoles();
         while (roles.hasNext()) {
             Role role = null;
@@ -96,7 +97,7 @@ public class GroupMBean extends BaseModelMBean {
     public String[] getUsers() {
 
         Group group = (Group) this.resource;
-        ArrayList<String> results = new ArrayList<>();
+        List<String> results = new ArrayList<>();
         Iterator<User> users = group.getUsers();
         while (users.hasNext()) {
             User user = null;

==================================================
MemoryUserDatabaseMBean.java
index 5795ec5352..992b6a2dd5 100644
--- a/java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java
+++ b/java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java
@@ -36,6 +36,7 @@ import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Locale;
+import java.util.Map;
 
 import javax.management.remote.JMXConnectorServer;
 import javax.management.remote.JMXServiceURL;
@@ -211,7 +212,7 @@ public class JmxRemoteLifecycleListener implements LifecycleListener {
             System.setProperty("java.rmi.server.randomIDs", "true");
 
             // Create the environment
-            HashMap<String,Object> env = new HashMap<>();
+            Map<String,Object> env = new HashMap<>();
 
             RMIClientSocketFactory registryCsf = null;
             RMIServerSocketFactory registrySsf = null;
@@ -296,7 +297,7 @@ public class JmxRemoteLifecycleListener implements LifecycleListener {
 
     private JMXConnectorServer createServer(String serverName,
             String bindAddress, int theRmiRegistryPort, int theRmiServerPort,
-            HashMap<String,Object> theEnv,
+            Map<String,Object> theEnv,
             RMIClientSocketFactory registryCsf, RMIServerSocketFactory registrySsf,
             RMIClientSocketFactory serverCsf, RMIServerSocketFactory serverSsf) {
 

==================================================
NamingResourcesMBean.java
index b9b56f6621..d9c8128ace 100644
--- a/java/org/apache/catalina/mbeans/MemoryUserDatabaseMBean.java
+++ b/java/org/apache/catalina/mbeans/MemoryUserDatabaseMBean.java
@@ -18,6 +18,7 @@ package org.apache.catalina.mbeans;
 
 import java.util.ArrayList;
 import java.util.Iterator;
+import java.util.List;
 
 import javax.management.MBeanException;
 import javax.management.MalformedObjectNameException;
@@ -95,7 +96,7 @@ public class MemoryUserDatabaseMBean extends BaseModelMBean {
      */
     public String[] getGroups() {
         UserDatabase database = (UserDatabase) this.resource;
-        ArrayList<String> results = new ArrayList<>();
+        List<String> results = new ArrayList<>();
         Iterator<Group> groups = database.getGroups();
         while (groups.hasNext()) {
             Group group = groups.next();
@@ -110,7 +111,7 @@ public class MemoryUserDatabaseMBean extends BaseModelMBean {
      */
     public String[] getRoles() {
         UserDatabase database = (UserDatabase) this.resource;
-        ArrayList<String> results = new ArrayList<>();
+        List<String> results = new ArrayList<>();
         Iterator<Role> roles = database.getRoles();
         while (roles.hasNext()) {
             Role role = roles.next();
@@ -125,7 +126,7 @@ public class MemoryUserDatabaseMBean extends BaseModelMBean {
      */
     public String[] getUsers() {
         UserDatabase database = (UserDatabase) this.resource;
-        ArrayList<String> results = new ArrayList<>();
+        List<String> results = new ArrayList<>();
         Iterator<User> users = database.getUsers();
         while (users.hasNext()) {
             User user = users.next();

==================================================
UserMBean.java
index 61014cfb7c..20f40d149b 100644
--- a/java/org/apache/catalina/mbeans/NamingResourcesMBean.java
+++ b/java/org/apache/catalina/mbeans/NamingResourcesMBean.java
@@ -17,6 +17,7 @@
 package org.apache.catalina.mbeans;
 
 import java.util.ArrayList;
+import java.util.List;
 
 import javax.management.MBeanException;
 import javax.management.MalformedObjectNameException;
@@ -78,7 +79,7 @@ public class NamingResourcesMBean extends BaseModelMBean {
      */
     public String[] getEnvironments() {
         ContextEnvironment[] envs = ((NamingResourcesImpl)this.resource).findEnvironments();
-        ArrayList<String> results = new ArrayList<>();
+        List<String> results = new ArrayList<>();
         for (int i = 0; i < envs.length; i++) {
             try {
                 ObjectName oname = MBeanUtils.createObjectName(managed.getDomain(), envs[i]);
@@ -101,7 +102,7 @@ public class NamingResourcesMBean extends BaseModelMBean {
      */
     public String[] getResources() {
         ContextResource[] resources = ((NamingResourcesImpl)this.resource).findResources();
-        ArrayList<String> results = new ArrayList<>();
+        List<String> results = new ArrayList<>();
         for (int i = 0; i < resources.length; i++) {
             try {
                 ObjectName oname = MBeanUtils.createObjectName(managed.getDomain(), resources[i]);
@@ -125,7 +126,7 @@ public class NamingResourcesMBean extends BaseModelMBean {
     public String[] getResourceLinks() {
         ContextResourceLink[] resourceLinks =
                 ((NamingResourcesImpl)this.resource).findResourceLinks();
-        ArrayList<String> results = new ArrayList<>();
+        List<String> results = new ArrayList<>();
         for (int i = 0; i < resourceLinks.length; i++) {
             try {
                 ObjectName oname =

==================================================
JNDIRealm.java
index abb87085d4..feaf727fc0 100644
--- a/java/org/apache/catalina/mbeans/UserMBean.java
+++ b/java/org/apache/catalina/mbeans/UserMBean.java
@@ -18,6 +18,7 @@ package org.apache.catalina.mbeans;
 
 import java.util.ArrayList;
 import java.util.Iterator;
+import java.util.List;
 
 import javax.management.MBeanException;
 import javax.management.MalformedObjectNameException;
@@ -79,7 +80,7 @@ public class UserMBean extends BaseModelMBean {
     public String[] getGroups() {
 
         User user = (User) this.resource;
-        ArrayList<String> results = new ArrayList<>();
+        List<String> results = new ArrayList<>();
         Iterator<Group> groups = user.getGroups();
         while (groups.hasNext()) {
             Group group = null;
@@ -105,7 +106,7 @@ public class UserMBean extends BaseModelMBean {
     public String[] getRoles() {
 
         User user = (User) this.resource;
-        ArrayList<String> results = new ArrayList<>();
+        List<String> results = new ArrayList<>();
         Iterator<Role> roles = user.getRoles();
         while (roles.hasNext()) {
             Role role = null;

==================================================
MemoryRealm.java
index 2d6dfa4894..cc8993c290 100644
--- a/java/org/apache/catalina/realm/JNDIRealm.java
+++ b/java/org/apache/catalina/realm/JNDIRealm.java
@@ -1448,7 +1448,7 @@ public class JNDIRealm extends RealmBase {
         User user = null;
 
         // Get attributes to retrieve from user entry
-        ArrayList<String> list = new ArrayList<>();
+        List<String> list = new ArrayList<>();
         if (userPassword != null)
             list.add(userPassword);
         if (userRoleName != null)
@@ -1934,7 +1934,7 @@ public class JNDIRealm extends RealmBase {
         if (results == null)
             return list;  // Should never happen, but just in case ...
 
-        HashMap<String, String> groupMap = new HashMap<>();
+        Map<String, String> groupMap = new HashMap<>();
         try {
             while (results.hasMore()) {
                 SearchResult result = results.next();
@@ -2589,7 +2589,7 @@ public class JNDIRealm extends RealmBase {
     protected String[] parseUserPatternString(String userPatternString) {
 
         if (userPatternString != null) {
-            ArrayList<String> pathList = new ArrayList<>();
+            List<String> pathList = new ArrayList<>();
             int startParenLoc = userPatternString.indexOf('(');
             if (startParenLoc == -1) {
                 // no parens here; return whole thing

==================================================
FileStore.java
index d8611d2336..21bae6d071 100644
--- a/java/org/apache/catalina/realm/MemoryRealm.java
+++ b/java/org/apache/catalina/realm/MemoryRealm.java
@@ -21,6 +21,7 @@ import java.io.InputStream;
 import java.security.Principal;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 
 import org.apache.catalina.LifecycleException;
@@ -155,7 +156,7 @@ public class MemoryRealm  extends RealmBase {
     void addUser(String username, String password, String roles) {
 
         // Accumulate the list of roles for this user
-        ArrayList<String> list = new ArrayList<>();
+        List<String> list = new ArrayList<>();
         roles += ",";
         while (true) {
             int comma = roles.indexOf(',');

==================================================
JDBCStore.java
index 1843c3db05..3c50022c9a 100644
--- a/java/org/apache/catalina/session/FileStore.java
+++ b/java/org/apache/catalina/session/FileStore.java
@@ -25,6 +25,7 @@ import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.util.ArrayList;
+import java.util.List;
 
 import javax.servlet.ServletContext;
 
@@ -184,7 +185,7 @@ public final class FileStore extends StoreBase {
         }
 
         // Build and return the list of session identifiers
-        ArrayList<String> list = new ArrayList<>();
+        List<String> list = new ArrayList<>();
         int n = FILE_EXT.length();
         for (int i = 0; i < files.length; i++) {
             if (files[i].endsWith(FILE_EXT)) {

==================================================
StandardManager.java
index c7f888de0d..0caa293e80 100644
--- a/java/org/apache/catalina/session/JDBCStore.java
+++ b/java/org/apache/catalina/session/JDBCStore.java
@@ -31,6 +31,7 @@ import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.util.ArrayList;
+import java.util.List;
 import java.util.Properties;
 
 import javax.naming.Context;
@@ -502,7 +503,7 @@ public class JDBCStore extends StoreBase {
                             preparedKeysSql.setLong(2, System.currentTimeMillis());
                         }
                         try (ResultSet rst = preparedKeysSql.executeQuery()) {
-                            ArrayList<String> tmpkeys = new ArrayList<>();
+                            List<String> tmpkeys = new ArrayList<>();
                             if (rst != null) {
                                 while (rst.next()) {
                                     tmpkeys.add(rst.getString(1));

==================================================
StandardSession.java
index 2195886009..82de69f128 100644
--- a/java/org/apache/catalina/session/StandardManager.java
+++ b/java/org/apache/catalina/session/StandardManager.java
@@ -30,6 +30,7 @@ import java.security.PrivilegedActionException;
 import java.security.PrivilegedExceptionAction;
 import java.util.ArrayList;
 import java.util.Iterator;
+import java.util.List;
 
 import javax.servlet.ServletContext;
 
@@ -294,7 +295,7 @@ public class StandardManager extends ManagerBase {
         }
 
         // Keep a note of sessions that are expired
-        ArrayList<StandardSession> list = new ArrayList<>();
+        List<StandardSession> list = new ArrayList<>();
 
         try (FileOutputStream fos = new FileOutputStream(file.getAbsolutePath());
                 BufferedOutputStream bos = new BufferedOutputStream(fos);

==================================================
Catalina.java
index ed1a0f8611..30f54f7b9c 100644
--- a/java/org/apache/catalina/session/StandardSession.java
+++ b/java/org/apache/catalina/session/StandardSession.java
@@ -1640,8 +1640,8 @@ public class StandardSession implements HttpSession, Session, Serializable {
 
         // Accumulate the names of serializable and non-serializable attributes
         String keys[] = keys();
-        ArrayList<String> saveNames = new ArrayList<>();
-        ArrayList<Object> saveValues = new ArrayList<>();
+        List<String> saveNames = new ArrayList<>();
+        List<Object> saveValues = new ArrayList<>();
         for (int i = 0; i < keys.length; i++) {
             Object value = attributes.get(keys[i]);
             if (value == null) {

==================================================
ContextConfig.java
index 35428e7052..6a76344197 100644
--- a/java/org/apache/catalina/startup/Catalina.java
+++ b/java/org/apache/catalina/startup/Catalina.java
@@ -28,6 +28,7 @@ import java.net.Socket;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.logging.LogManager;
 
 import org.apache.catalina.Container;
@@ -272,8 +273,8 @@ public class Catalina {
         Digester digester = new Digester();
         digester.setValidating(false);
         digester.setRulesValidation(true);
-        HashMap<Class<?>, List<String>> fakeAttributes = new HashMap<>();
-        ArrayList<String> attrs = new ArrayList<>();
+        Map<Class<?>, List<String>> fakeAttributes = new HashMap<>();
+        List<String> attrs = new ArrayList<>();
         attrs.add("className");
         fakeAttributes.put(Object.class, attrs);
         digester.setFakeAttributes(fakeAttributes);

==================================================
Tool.java
index 8b34e4995c..68365fa1ce 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -433,8 +433,8 @@ public class ContextConfig implements LifecycleListener {
         Digester digester = new Digester();
         digester.setValidating(false);
         digester.setRulesValidation(true);
-        HashMap<Class<?>, List<String>> fakeAttributes = new HashMap<>();
-        ArrayList<String> attrs = new ArrayList<>();
+        Map<Class<?>, List<String>> fakeAttributes = new HashMap<>();
+        List<String> attrs = new ArrayList<>();
         attrs.add("className");
         fakeAttributes.put(Object.class, attrs);
         digester.setFakeAttributes(fakeAttributes);
@@ -2546,7 +2546,7 @@ public class ContextConfig implements LifecycleListener {
     }
 
     protected String[] processAnnotationsStringArray(ElementValue ev) {
-        ArrayList<String> values = new ArrayList<>();
+        List<String> values = new ArrayList<>();
         if (ev instanceof ArrayElementValue) {
             ElementValue[] arrayValues =
                 ((ArrayElementValue) ev).getElementValuesArray();

==================================================
ConnectorStoreAppender.java
index 818dd70ca6..07d58965d2 100644
--- a/java/org/apache/catalina/startup/Tool.java
+++ b/java/org/apache/catalina/startup/Tool.java
@@ -22,6 +22,7 @@ package org.apache.catalina.startup;
 import java.io.File;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
+import java.util.List;
 
 import org.apache.catalina.Globals;
 import org.apache.juli.logging.Log;
@@ -157,8 +158,8 @@ public final class Tool {
         // Construct the class loader we will be using
         ClassLoader classLoader = null;
         try {
-            ArrayList<File> packed = new ArrayList<>();
-            ArrayList<File> unpacked = new ArrayList<>();
+            List<File> packed = new ArrayList<>();
+            List<File> unpacked = new ArrayList<>();
             unpacked.add(new File(catalinaHome, "classes"));
             packed.add(new File(catalinaHome, "lib"));
             if (common) {

==================================================
StandardContextSF.java
index 99b4de69c8..cee8ccecbe 100644
--- a/java/org/apache/catalina/storeconfig/ConnectorStoreAppender.java
+++ b/java/org/apache/catalina/storeconfig/ConnectorStoreAppender.java
@@ -119,7 +119,7 @@ public class ConnectorStoreAppender extends StoreAppender {
      */
     protected List<String> getPropertyKeys(Connector bean)
             throws IntrospectionException {
-        ArrayList<String> propertyKeys = new ArrayList<>();
+        List<String> propertyKeys = new ArrayList<>();
         // Acquire the list of properties for this bean
         ProtocolHandler protocolHandler = bean.getProtocolHandler();
         // Acquire the list of properties for this bean

==================================================
RpcChannel.java
index 38f4ee4f60..fa64e6dbc2 100644
--- a/java/org/apache/catalina/storeconfig/StandardContextSF.java
+++ b/java/org/apache/catalina/storeconfig/StandardContextSF.java
@@ -225,7 +225,7 @@ public class StandardContextSF extends StoreFactoryBase {
             StandardContext context = (StandardContext) aContext;
             // Store nested <Listener> elements
             LifecycleListener listeners[] = context.findLifecycleListeners();
-            ArrayList<LifecycleListener> listenersArray = new ArrayList<>();
+            List<LifecycleListener> listenersArray = new ArrayList<>();
             for (LifecycleListener listener : listeners) {
                 if (!(listener instanceof ThreadLocalLeakPreventionListener)) {
                     listenersArray.add(listener);

==================================================
OrderInterceptor.java
index 9798f407eb..ed8cff7e41 100644
--- a/java/org/apache/catalina/tribes/group/RpcChannel.java
+++ b/java/org/apache/catalina/tribes/group/RpcChannel.java
@@ -20,6 +20,7 @@ import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
+import java.util.Map;
 
 import org.apache.catalina.tribes.Channel;
 import org.apache.catalina.tribes.ChannelException;
@@ -49,7 +50,7 @@ public class RpcChannel implements ChannelListener {
     private byte[] rpcId;
     private int replyMessageOptions = 0;
 
-    private final HashMap<RpcCollectorKey, RpcCollector> responseMap = new HashMap<>();
+    private final Map<RpcCollectorKey, RpcCollector> responseMap = new HashMap<>();
 
     /**
      * Create an RPC channel. You can have several RPC channels attached to a group

==================================================
AbstractReplicatedMap.java
index a91ee24b73..ed9dfb9109 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/OrderInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/OrderInterceptor.java
@@ -18,6 +18,7 @@
 package org.apache.catalina.tribes.group.interceptors;
 
 import java.util.HashMap;
+import java.util.Map;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 
@@ -55,9 +56,9 @@ import org.apache.catalina.tribes.util.StringManager;
  */
 public class OrderInterceptor extends ChannelInterceptorBase {
     protected static final StringManager sm = StringManager.getManager(OrderInterceptor.class);
-    private final HashMap<Member, Counter> outcounter = new HashMap<>();
-    private final HashMap<Member, Counter> incounter = new HashMap<>();
-    private final HashMap<Member, MessageOrder> incoming = new HashMap<>();
+    private final Map<Member, Counter> outcounter = new HashMap<>();
+    private final Map<Member, Counter> incounter = new HashMap<>();
+    private final Map<Member, MessageOrder> incoming = new HashMap<>();
     private long expire = 3000;
     private boolean forwardExpired = true;
     private int maxQueue = Integer.MAX_VALUE;

==================================================
ReplicatedMap.java
index 8f7184bd51..acee1ad282 100644
--- a/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
@@ -26,6 +26,7 @@ import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.LinkedHashSet;
+import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
@@ -822,7 +823,7 @@ public abstract class AbstractReplicatedMap<K,V>
     }
 
     public Member[] excludeFromSet(Member[] mbrs, Member[] set) {
-        ArrayList<Member> result = new ArrayList<>();
+        List<Member> result = new ArrayList<>();
         for (int i=0; i<set.length; i++ ) {
             boolean include = true;
             for (int j=0; j<mbrs.length && include; j++ )
@@ -1219,7 +1220,7 @@ public abstract class AbstractReplicatedMap<K,V>
 
     @Override
     public Collection<V> values() {
-        ArrayList<V> values = new ArrayList<>();
+        List<V> values = new ArrayList<>();
         Iterator<Map.Entry<K,MapEntry<K,V>>> i = innerMap.entrySet().iterator();
         while ( i.hasNext() ) {
             Map.Entry<K,MapEntry<K,V>> e = i.next();

==================================================
Arrays.java
index ae9498b750..6ed6cccd64 100644
--- a/java/org/apache/catalina/tribes/tipis/ReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/ReplicatedMap.java
@@ -20,6 +20,7 @@ import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
 
 import org.apache.catalina.tribes.Channel;
@@ -153,7 +154,7 @@ public class ReplicatedMap<K,V> extends AbstractReplicatedMap<K,V> {
         } catch (ChannelException e) {
             FaultyMember[] faultyMembers = e.getFaultyMembers();
             if (faultyMembers.length == 0) throw e;
-            ArrayList<Member> faulty = new ArrayList<>();
+            List<Member> faulty = new ArrayList<>();
             for (FaultyMember faultyMember : faultyMembers) {
                 if (!(faultyMember.getCause() instanceof RemoteProcessException)) {
                     faulty.add(faultyMember.getMember());

==================================================
MemoryGroup.java
index 16f12ace10..8ecf061b79 100644
--- a/java/org/apache/catalina/tribes/util/Arrays.java
+++ b/java/org/apache/catalina/tribes/util/Arrays.java
@@ -153,7 +153,7 @@ public class Arrays {
     }
 
     public static Member[] diff(Membership complete, Membership local, Member ignore) {
-        ArrayList<Member> result = new ArrayList<>();
+        List<Member> result = new ArrayList<>();
         Member[] comp = complete.getMembers();
         for ( int i=0; i<comp.length; i++ ) {
             if ( ignore!=null && ignore.equals(comp[i]) ) continue;

==================================================
ExtensionValidator.java
index 05936424da..2d793e6ffb 100644
--- a/java/org/apache/catalina/users/MemoryGroup.java
+++ b/java/org/apache/catalina/users/MemoryGroup.java
@@ -21,6 +21,7 @@ package org.apache.catalina.users;
 
 import java.util.ArrayList;
 import java.util.Iterator;
+import java.util.List;
 
 import org.apache.catalina.Role;
 import org.apache.catalina.User;
@@ -103,7 +104,7 @@ public class MemoryGroup extends AbstractGroup {
      */
     @Override
     public Iterator<User> getUsers() {
-        ArrayList<User> results = new ArrayList<>();
+        List<User> results = new ArrayList<>();
         Iterator<User> users = database.getUsers();
         while (users.hasNext()) {
             User user = users.next();

==================================================
AbstractAccessLogValve.java
index 2b35802744..f29a242f7d 100644
--- a/java/org/apache/catalina/util/ExtensionValidator.java
+++ b/java/org/apache/catalina/util/ExtensionValidator.java
@@ -22,6 +22,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Locale;
 import java.util.StringTokenizer;
 import java.util.jar.JarInputStream;
@@ -56,9 +57,8 @@ public final class ExtensionValidator {
     private static final StringManager sm =
             StringManager.getManager("org.apache.catalina.util");
 
-    private static volatile ArrayList<Extension> containerAvailableExtensions =
-            null;
-    private static final ArrayList<ManifestResource> containerManifestResources =
+    private static volatile List<Extension> containerAvailableExtensions = null;
+    private static final List<ManifestResource> containerManifestResources =
             new ArrayList<>();
 
 
@@ -129,7 +129,7 @@ public final class ExtensionValidator {
                     throws IOException {
 
         String appName = context.getName();
-        ArrayList<ManifestResource> appManifestResources = new ArrayList<>();
+        List<ManifestResource> appManifestResources = new ArrayList<>();
 
         // Web application manifest
         WebResource resource = resources.getResource("/META-INF/MANIFEST.MF");
@@ -205,10 +205,10 @@ public final class ExtensionValidator {
      * @return true if manifest resource file requirements are met
      */
     private static boolean validateManifestResources(String appName,
-            ArrayList<ManifestResource> resources) {
+            List<ManifestResource> resources) {
         boolean passes = true;
         int failureCount = 0;
-        ArrayList<Extension> availableExtensions = null;
+        List<Extension> availableExtensions = null;
 
         Iterator<ManifestResource> it = resources.iterator();
         while (it.hasNext()) {
@@ -298,10 +298,10 @@ public final class ExtensionValidator {
     *
     * @return HashMap Map of available extensions
     */
-    private static ArrayList<Extension> buildAvailableExtensionsList(
-            ArrayList<ManifestResource> resources) {
+    private static List<Extension> buildAvailableExtensionsList(
+            List<ManifestResource> resources) {
 
-        ArrayList<Extension> availableList = null;
+        List<Extension> availableList = null;
 
         Iterator<ManifestResource> it = resources.iterator();
         while (it.hasNext()) {

==================================================
RewriteValve.java
index 641ffaea7b..02af98b9be 100644
--- a/java/org/apache/catalina/valves/AbstractAccessLogValve.java
+++ b/java/org/apache/catalina/valves/AbstractAccessLogValve.java
@@ -28,6 +28,7 @@ import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
+import java.util.Map;
 import java.util.TimeZone;
 
 import javax.servlet.ServletException;
@@ -332,7 +333,7 @@ public abstract class AbstractAccessLogValve extends ValveBase implements Access
         private final Locale cacheDefaultLocale;
         private final DateFormatCache parent;
         protected final Cache cLFCache;
-        private final HashMap<String, Cache> formatCache = new HashMap<>();
+        private final Map<String, Cache> formatCache = new HashMap<>();
 
         protected DateFormatCache(int size, Locale loc, DateFormatCache parent) {
             cacheSize = size;

==================================================
Substitution.java
index 5adff68c8d..9e80c4570d 100644
--- a/java/org/apache/catalina/valves/rewrite/RewriteValve.java
+++ b/java/org/apache/catalina/valves/rewrite/RewriteValve.java
@@ -28,6 +28,7 @@ import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Hashtable;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
 import java.util.StringTokenizer;
 
@@ -201,8 +202,8 @@ public class RewriteValve extends ValveBase {
     }
 
     protected void parse(BufferedReader reader) throws LifecycleException {
-        ArrayList<RewriteRule> rules = new ArrayList<>();
-        ArrayList<RewriteCond> conditions = new ArrayList<>();
+        List<RewriteRule> rules = new ArrayList<>();
+        List<RewriteCond> conditions = new ArrayList<>();
         while (true) {
             try {
                 String line = reader.readLine();

==================================================
StandardRoot.java
index d723192475..441ae4b3c5 100644
--- a/java/org/apache/catalina/valves/rewrite/Substitution.java
+++ b/java/org/apache/catalina/valves/rewrite/Substitution.java
@@ -17,6 +17,7 @@
 package org.apache.catalina.valves.rewrite;
 
 import java.util.ArrayList;
+import java.util.List;
 import java.util.Map;
 import java.util.regex.Matcher;
 
@@ -126,7 +127,7 @@ public class Substitution {
 
     public void parse(Map<String, RewriteMap> maps) {
 
-        ArrayList<SubstitutionElement> elements = new ArrayList<>();
+        List<SubstitutionElement> elements = new ArrayList<>();
         int pos = 0;
         int percentPos = 0;
         int dollarPos = 0;

==================================================
RequestGroupInfo.java
index cc389d6bc8..cb7c9ef2da 100644
--- a/java/org/apache/catalina/webresources/StandardRoot.java
+++ b/java/org/apache/catalina/webresources/StandardRoot.java
@@ -142,7 +142,7 @@ public class StandardRoot extends LifecycleMBeanBase implements WebResourceRoot
         path = validate(path);
 
         // Set because we don't want duplicates
-        HashSet<String> result = new HashSet<>();
+        Set<String> result = new HashSet<>();
         for (List<WebResourceSet> list : allResources) {
             for (WebResourceSet webResourceSet : list) {
                 if (!webResourceSet.getClassLoaderOnly()) {

==================================================
Http2AsyncUpgradeHandler.java
index c5568b1af0..4f6fec2af3 100644
--- a/java/org/apache/coyote/RequestGroupInfo.java
+++ b/java/org/apache/coyote/RequestGroupInfo.java
@@ -17,13 +17,14 @@
 package org.apache.coyote;
 
 import java.util.ArrayList;
+import java.util.List;
 
 /** This can be moved to top level ( eventually with a better name ).
  *  It is currently used only as a JMX artifact, to aggregate the data
  *  collected from each RequestProcessor thread.
  */
 public class RequestGroupInfo {
-    private final ArrayList<RequestInfo> processors = new ArrayList<>();
+    private final List<RequestInfo> processors = new ArrayList<>();
     private long deadMaxTime = 0;
     private long deadProcessingTime = 0;
     private int deadRequestCount = 0;

==================================================
AstMethodParameters.java
index 5aca12e169..7fb26b1ced 100644
--- a/java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java
@@ -20,6 +20,7 @@ import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.nio.channels.CompletionHandler;
 import java.util.ArrayList;
+import java.util.List;
 import java.util.concurrent.TimeUnit;
 
 import org.apache.coyote.Adapter;
@@ -268,7 +269,7 @@ public class Http2AsyncUpgradeHandler extends Http2UpgradeHandler {
         private byte[] header;
         private ByteBuffer payload;
 
-        private final ArrayList<ByteBuffer> bufs = new ArrayList<>();
+        private final List<ByteBuffer> bufs = new ArrayList<>();
 
         public AsyncHeaderFrameBuffers(int initialPayloadSize) {
             this.payloadSize = initialPayloadSize;

==================================================
JspC.java
index 29fe15e1e1..bc33b4cdc3 100644
--- a/java/org/apache/el/parser/AstMethodParameters.java
+++ b/java/org/apache/el/parser/AstMethodParameters.java
@@ -19,6 +19,7 @@
 package org.apache.el.parser;
 
 import java.util.ArrayList;
+import java.util.List;
 
 import org.apache.el.lang.EvaluationContext;
 
@@ -28,7 +29,7 @@ public final class AstMethodParameters extends SimpleNode {
     }
 
     public Object[] getParameters(EvaluationContext ctx) {
-        ArrayList<Object> params = new ArrayList<>();
+        List<Object> params = new ArrayList<>();
         for (int i = 0; i < this.jjtGetNumChildren(); i++) {
             params.add(this.jjtGetChild(i).getValue(ctx));
         }

==================================================
ELFunctionMapper.java
index 34ce120dbf..382b2e6999 100644
--- a/java/org/apache/jasper/JspC.java
+++ b/java/org/apache/jasper/JspC.java
@@ -1566,7 +1566,7 @@ public class JspC extends Task implements Options {
         }
 
         // Turn the classPath into URLs
-        ArrayList<URL> urls = new ArrayList<>();
+        List<URL> urls = new ArrayList<>();
         StringTokenizer tokenizer = new StringTokenizer(classPath,
                                                         File.pathSeparator);
         while (tokenizer.hasMoreTokens()) {

==================================================
ErrorDispatcher.java
index 8271783639..2cb9e8ac27 100644
--- a/java/org/apache/jasper/compiler/ELFunctionMapper.java
+++ b/java/org/apache/jasper/compiler/ELFunctionMapper.java
@@ -23,6 +23,7 @@ import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
 
 import javax.servlet.jsp.tagext.FunctionInfo;
@@ -81,7 +82,7 @@ public class ELFunctionMapper {
          * Use a global name map to facilitate reuse of function maps.
          * The key used is prefix:function:uri.
          */
-        private final HashMap<String, String> gMap = new HashMap<>();
+        private final Map<String, String> gMap = new HashMap<>();
 
         @Override
         public void visit(Node.ParamAction n) throws JasperException {

==================================================
Generator.java
index f9bf3b316c..2ecc675a04 100644
--- a/java/org/apache/jasper/compiler/ErrorDispatcher.java
+++ b/java/org/apache/jasper/compiler/ErrorDispatcher.java
@@ -21,6 +21,7 @@ import java.io.IOException;
 import java.io.StringReader;
 import java.net.MalformedURLException;
 import java.util.ArrayList;
+import java.util.List;
 
 import org.apache.jasper.JasperException;
 import org.apache.jasper.JspCompilationContext;
@@ -316,7 +317,7 @@ public class ErrorDispatcher {
                                 String errMsg, String fname, Node.Nodes page)
                 throws IOException, JasperException {
 
-        ArrayList<JavacErrorDetail> errors = new ArrayList<>();
+        List<JavacErrorDetail> errors = new ArrayList<>();
         StringBuilder errMsgBuf = null;
         int lineNum = -1;
         JavacErrorDetail javacError = null;

==================================================
JDTCompiler.java
index 8e767bf2b2..c5c5acb110 100644
--- a/java/org/apache/jasper/compiler/Generator.java
+++ b/java/org/apache/jasper/compiler/Generator.java
@@ -4266,7 +4266,7 @@ class Generator {
         // True if the helper class should be generated.
         private boolean used = false;
 
-        private ArrayList<Fragment> fragments = new ArrayList<>();
+        private List<Fragment> fragments = new ArrayList<>();
 
         private String className;
 

==================================================
TagFileProcessor.java
index a98deda435..ce0f53f44a 100644
--- a/java/org/apache/jasper/compiler/JDTCompiler.java
+++ b/java/org/apache/jasper/compiler/JDTCompiler.java
@@ -29,6 +29,7 @@ import java.io.InputStreamReader;
 import java.io.Reader;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.StringTokenizer;
@@ -85,7 +86,7 @@ public class JDTCompiler extends org.apache.jasper.compiler.Compiler {
         final ClassLoader classLoader = ctxt.getJspLoader();
         String[] fileNames = new String[] {sourceFile};
         String[] classNames = new String[] {targetClassName};
-        final ArrayList<JavacErrorDetail> problemList = new ArrayList<>();
+        final List<JavacErrorDetail> problemList = new ArrayList<>();
 
         class CompilationUnit implements ICompilationUnit {
 

==================================================
Validator.java
index d8c28128f5..77fd293f88 100644
--- a/java/org/apache/jasper/compiler/TagFileProcessor.java
+++ b/java/org/apache/jasper/compiler/TagFileProcessor.java
@@ -20,6 +20,7 @@ package org.apache.jasper.compiler;
 import java.io.IOException;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Vector;
 
@@ -127,9 +128,9 @@ class TagFileProcessor {
 
         private static final String TAG_DYNAMIC = "the dynamic-attributes attribute of the tag directive";
 
-        private HashMap<String,NameEntry> nameTable = new HashMap<>();
+        private Map<String,NameEntry> nameTable = new HashMap<>();
 
-        private HashMap<String,NameEntry> nameFromTable = new HashMap<>();
+        private Map<String,NameEntry> nameFromTable = new HashMap<>();
 
         public TagFileDirectiveVisitor(Compiler compiler,
                 TagLibraryInfo tagLibInfo, String name, String path) {
@@ -422,7 +423,7 @@ class TagFileProcessor {
         private void checkUniqueName(String name, String type, Node n,
                 TagAttributeInfo attr) throws JasperException {
 
-            HashMap<String, NameEntry> table = (VAR_NAME_FROM.equals(type)) ? nameFromTable : nameTable;
+            Map<String, NameEntry> table = (VAR_NAME_FROM.equals(type)) ? nameFromTable : nameTable;
             NameEntry nameEntry = table.get(name);
             if (nameEntry != null) {
                 if (!TAG_DYNAMIC.equals(type) ||

==================================================
ServiceRefFactory.java
index f0d80d142d..cb8a7752bc 100644
--- a/java/org/apache/jasper/compiler/Validator.java
+++ b/java/org/apache/jasper/compiler/Validator.java
@@ -22,7 +22,9 @@ import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Hashtable;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Locale;
+import java.util.Map;
 
 import javax.el.ELException;
 import javax.el.ExpressionFactory;
@@ -1660,7 +1662,7 @@ class Validator {
                 throws JasperException {
             FunctionInfo funcInfo = func.getFunctionInfo();
             String signature = funcInfo.getFunctionSignature();
-            ArrayList<String> params = new ArrayList<>();
+            List<String> params = new ArrayList<>();
             // Signature is of the form
             // <return-type> S <method-name S? '('
             // < <arg-type> ( ',' <arg-type> )* )? ')'
@@ -1693,7 +1695,7 @@ class Validator {
 
             class ValidateFunctionMapper extends FunctionMapper {
 
-                private HashMap<String, Method> fnmap = new HashMap<>();
+                private Map<String, Method> fnmap = new HashMap<>();
 
                 @Override
                 public void mapFunction(String prefix, String localName,

==================================================
GenericObjectPool.java
index e400229fce..f15bae7d74 100644
--- a/java/org/apache/naming/factory/webservices/ServiceRefFactory.java
+++ b/java/org/apache/naming/factory/webservices/ServiceRefFactory.java
@@ -243,7 +243,7 @@ public class ServiceRefFactory implements ObjectFactory {
             if (((ServiceRef) ref).getHandlersSize() > 0) {
 
                 HandlerRegistry handlerRegistry = service.getHandlerRegistry();
-                ArrayList<String> soaproles = new ArrayList<>();
+                List<String> soaproles = new ArrayList<>();
 
                 while (((ServiceRef) ref).getHandlersSize() > 0) {
                     HandlerRef handlerRef = ((ServiceRef) ref).getHandler();
@@ -262,9 +262,9 @@ public class ServiceRefFactory implements ObjectFactory {
 
                     // Load all datas relative to the handler : SOAPHeaders, config init element,
                     // portNames to be set on
-                    ArrayList<QName> headers = new ArrayList<>();
+                    List<QName> headers = new ArrayList<>();
                     Hashtable<String,String> config = new Hashtable<>();
-                    ArrayList<String> portNames = new ArrayList<>();
+                    List<String> portNames = new ArrayList<>();
                     for (int i = 0; i < handlerRef.size(); i++)
                         if (HandlerRef.HANDLER_LOCALPART.equals(handlerRef.get(i).getType())) {
                             String localpart = "";
@@ -343,7 +343,7 @@ public class ServiceRefFactory implements ObjectFactory {
 
 
     private void initHandlerChain(QName portName, HandlerRegistry handlerRegistry,
-            HandlerInfo handlerInfo, ArrayList<String> soaprolesToAdd) {
+            HandlerInfo handlerInfo, List<String> soaprolesToAdd) {
         HandlerChain handlerChain = (HandlerChain) handlerRegistry.getHandlerChain(portName);
         @SuppressWarnings("unchecked")
         Iterator<Handler> iter = handlerChain.iterator();

==================================================
ContextHandler.java
index 3e4975707b..980aa8a93b 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/GenericObjectPool.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/GenericObjectPool.java
@@ -19,6 +19,7 @@ package org.apache.tomcat.dbcp.pool2.impl;
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
 import java.util.NoSuchElementException;
 import java.util.Set;
@@ -1033,7 +1034,7 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
         final long now = System.currentTimeMillis();
         final long timeout =
                 now - (ac.getRemoveAbandonedTimeout() * 1000L);
-        final ArrayList<PooledObject<T>> remove = new ArrayList<>();
+        final List<PooledObject<T>> remove = new ArrayList<>();
         final Iterator<PooledObject<T>> it = allObjects.values().iterator();
         while (it.hasNext()) {
             final PooledObject<T> pooledObject = it.next();

==================================================
ContextService.java
index 281d718f3b..c0ee25c865 100644
--- a/java/org/apache/tomcat/util/descriptor/web/ContextHandler.java
+++ b/java/org/apache/tomcat/util/descriptor/web/ContextHandler.java
@@ -19,6 +19,8 @@ package org.apache.tomcat.util.descriptor.web;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
 
 
 /**
@@ -57,7 +59,7 @@ public class ContextHandler extends ResourceBase {
      * soapHeader[0] : namespaceURI
      * soapHeader[1] : localpart
      */
-    private final HashMap<String, String> soapHeaders = new HashMap<>();
+    private final Map<String, String> soapHeaders = new HashMap<>();
 
     public Iterator<String> getLocalparts() {
         return soapHeaders.keySet().iterator();
@@ -83,7 +85,7 @@ public class ContextHandler extends ResourceBase {
     /**
      * The soapRole.
      */
-    private final ArrayList<String> soapRoles = new ArrayList<>();
+    private final List<String> soapRoles = new ArrayList<>();
 
     public String getSoapRole(int i) {
         return this.soapRoles.get(i);
@@ -100,7 +102,7 @@ public class ContextHandler extends ResourceBase {
     /**
      * The portName.
      */
-    private final ArrayList<String> portNames = new ArrayList<>();
+    private final List<String> portNames = new ArrayList<>();
 
     public String getPortName(int i) {
         return this.portNames.get(i);

==================================================
ContextTransaction.java
index eaa0d14f62..cefdc5633c 100644
--- a/java/org/apache/tomcat/util/descriptor/web/ContextService.java
+++ b/java/org/apache/tomcat/util/descriptor/web/ContextService.java
@@ -19,6 +19,7 @@ package org.apache.tomcat.util.descriptor.web;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.Map;
 
 
 /**
@@ -186,7 +187,7 @@ public class ContextService extends ResourceBase {
      *
      * The instantiation of the handler have to be done.
      */
-    private final HashMap<String, ContextHandler> handlers = new HashMap<>();
+    private final Map<String, ContextHandler> handlers = new HashMap<>();
 
     public Iterator<String> getHandlers() {
         return handlers.keySet().iterator();

==================================================
FilterMap.java
index 4f87ecd4fc..5a9e9e0d7a 100644
--- a/java/org/apache/tomcat/util/descriptor/web/ContextTransaction.java
+++ b/java/org/apache/tomcat/util/descriptor/web/ContextTransaction.java
@@ -21,6 +21,7 @@ package org.apache.tomcat.util.descriptor.web;
 import java.io.Serializable;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.Map;
 
 
 /**
@@ -39,7 +40,7 @@ public class ContextTransaction implements Serializable {
     /**
      * Holder for our configured properties.
      */
-    private final HashMap<String, Object> properties = new HashMap<>();
+    private final Map<String, Object> properties = new HashMap<>();
 
     /**
      * @param name The property name

==================================================
ResourceBase.java
index 707ffe76df..766f65d013 100644
--- a/java/org/apache/tomcat/util/descriptor/web/FilterMap.java
+++ b/java/org/apache/tomcat/util/descriptor/web/FilterMap.java
@@ -18,6 +18,7 @@ package org.apache.tomcat.util.descriptor.web;
 
 import java.io.Serializable;
 import java.util.ArrayList;
+import java.util.List;
 import java.util.Locale;
 
 import javax.servlet.DispatcherType;
@@ -176,7 +177,7 @@ public class FilterMap extends XmlEncodingBase implements Serializable {
     }
 
     public String[] getDispatcherNames() {
-        ArrayList<String> result = new ArrayList<>();
+        List<String> result = new ArrayList<>();
         if ((dispatcherMapping & FORWARD) > 0) {
             result.add(DispatcherType.FORWARD.name());
         }

==================================================
RulesBase.java
index 92a03f268f..a97a34a4e8 100644
--- a/java/org/apache/tomcat/util/descriptor/web/ResourceBase.java
+++ b/java/org/apache/tomcat/util/descriptor/web/ResourceBase.java
@@ -21,7 +21,7 @@ import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
-
+import java.util.Map;
 
 
 /**
@@ -83,7 +83,7 @@ public class ResourceBase implements Serializable, Injectable {
     /**
      * Holder for our configured properties.
      */
-    private final HashMap<String, Object> properties = new HashMap<>();
+    private final Map<String, Object> properties = new HashMap<>();
 
     /**
      * @param name The property name

==================================================
BaseAttributeFilter.java
index e76612a7ab..ccf2958877 100644
--- a/java/org/apache/tomcat/util/digester/RulesBase.java
+++ b/java/org/apache/tomcat/util/digester/RulesBase.java
@@ -259,7 +259,7 @@ public class RulesBase implements Rules {
         }
 
         // Select only Rules that match on the specified namespace URI
-        ArrayList<Rule> results = new ArrayList<>();
+        List<Rule> results = new ArrayList<>();
         Iterator<Rule> items = list.iterator();
         while (items.hasNext()) {
             Rule item = items.next();

==================================================
Registry.java
index 029ecf9775..30a02a1a6d 100644
--- a/java/org/apache/tomcat/util/modeler/BaseAttributeFilter.java
+++ b/java/org/apache/tomcat/util/modeler/BaseAttributeFilter.java
@@ -20,6 +20,7 @@ package org.apache.tomcat.util.modeler;
 
 
 import java.util.HashSet;
+import java.util.Set;
 
 import javax.management.AttributeChangeNotification;
 import javax.management.Notification;
@@ -63,7 +64,7 @@ public class BaseAttributeFilter implements NotificationFilter {
      * The set of attribute names that are accepted by this filter.  If this
      * list is empty, all attribute names are accepted.
      */
-    private HashSet<String> names = new HashSet<>();
+    private Set<String> names = new HashSet<>();
 
 
     // --------------------------------------------------------- Public Methods

==================================================
MbeansDescriptorsDigesterSource.java
index 512d7aaa09..6a8123c8d5 100644
--- a/java/org/apache/tomcat/util/modeler/Registry.java
+++ b/java/org/apache/tomcat/util/modeler/Registry.java
@@ -28,6 +28,7 @@ import java.util.HashMap;
 import java.util.Hashtable;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 
 import javax.management.DynamicMBean;
 import javax.management.MBeanAttributeInfo;
@@ -97,14 +98,14 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
      * The set of ManagedBean instances for the beans this registry
      * knows about, keyed by name.
      */
-    private HashMap<String,ManagedBean> descriptors = new HashMap<>();
+    private Map<String,ManagedBean> descriptors = new HashMap<>();
 
     /** List of managed beans, keyed by class name
      */
-    private HashMap<String,ManagedBean> descriptorsByClass = new HashMap<>();
+    private Map<String,ManagedBean> descriptorsByClass = new HashMap<>();
 
     // map to avoid duplicated searching or loading descriptors
-    private HashMap<String,URL> searchedPaths = new HashMap<>();
+    private Map<String,URL> searchedPaths = new HashMap<>();
 
     private Object guard;
 

==================================================
AprEndpoint.java
index bd439ece6e..ae875aa269 100644
--- a/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsDigesterSource.java
+++ b/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsDigesterSource.java
@@ -157,7 +157,7 @@ public class MbeansDescriptorsDigesterSource extends ModelerSource
 
         InputStream stream = (InputStream) source;
 
-        ArrayList<ManagedBean> loadedMbeans = new ArrayList<>();
+        List<ManagedBean> loadedMbeans = new ArrayList<>();
         synchronized(dLock) {
             if (digester == null) {
                 digester = createDigester();

==================================================
Nio2Endpoint.java
index 1723f32c27..6401bcb805 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -534,7 +534,7 @@ public class AprEndpoint extends AbstractEndpoint<Long,Long> implements SNICallB
         }
 
         if (negotiableProtocols.size() > 0) {
-            ArrayList<String> protocols = new ArrayList<>();
+            List<String> protocols = new ArrayList<>();
             protocols.addAll(negotiableProtocols);
             protocols.add("http/1.1");
             String[] protocolsArray = protocols.toArray(new String[0]);
@@ -1786,7 +1786,7 @@ public class AprEndpoint extends AbstractEndpoint<Long,Long> implements SNICallB
              *        are populated.
              *        The array is event, socket, event, socket etc.
              */
-            HashMap<Long,Long> merged = new HashMap<>(startCount);
+            Map<Long,Long> merged = new HashMap<>(startCount);
             for (int n = 0; n < startCount; n++) {
                 Long newValue = merged.merge(Long.valueOf(desc[2*n+1]), Long.valueOf(desc[2*n]),
                         (v1, v2) -> Long.valueOf(v1.longValue() | v2.longValue()));

==================================================
OpenSSLContext.java
index 41c8ae3eae..4ad90d4dd4 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -33,6 +33,7 @@ import java.nio.channels.FileChannel;
 import java.nio.channels.NetworkChannel;
 import java.nio.file.StandardOpenOption;
 import java.util.ArrayList;
+import java.util.List;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Future;
@@ -565,7 +566,7 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel,AsynchronousS
                         } else if (bufferedWrites.size() > 0) {
                             nestedWriteCompletionCount.get().incrementAndGet();
                             // Continue writing data using a gathering write
-                            ArrayList<ByteBuffer> arrayList = new ArrayList<>();
+                            List<ByteBuffer> arrayList = new ArrayList<>();
                             if (attachment.hasRemaining()) {
                                 arrayList.add(attachment);
                             }
@@ -623,7 +624,7 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel,AsynchronousS
                         } else if (bufferedWrites.size() > 0 || arrayHasData(attachment)) {
                             // Continue writing data
                             nestedWriteCompletionCount.get().incrementAndGet();
-                            ArrayList<ByteBuffer> arrayList = new ArrayList<>();
+                            List<ByteBuffer> arrayList = new ArrayList<>();
                             for (ByteBuffer buffer : attachment) {
                                 if (buffer.hasRemaining()) {
                                     arrayList.add(buffer);
@@ -1282,7 +1283,7 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel,AsynchronousS
                     socketBufferHandler.configureWriteBufferForRead();
                     if (bufferedWrites.size() > 0) {
                         // Gathering write of the main buffer plus all leftovers
-                        ArrayList<ByteBuffer> arrayList = new ArrayList<>();
+                        List<ByteBuffer> arrayList = new ArrayList<>();
                         if (socketBufferHandler.getWriteBuffer().hasRemaining()) {
                             arrayList.add(socketBufferHandler.getWriteBuffer());
                         }

==================================================
WsWebSocketContainer.java
index a6716d1b41..9a9edfd7a4 100644
--- a/java/org/apache/tomcat/util/net/openssl/OpenSSLContext.java
+++ b/java/org/apache/tomcat/util/net/openssl/OpenSSLContext.java
@@ -323,7 +323,7 @@ public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
             }
 
             if (negotiableProtocols != null && negotiableProtocols.size() > 0) {
-                ArrayList<String> protocols = new ArrayList<>();
+                List<String> protocols = new ArrayList<>();
                 protocols.addAll(negotiableProtocols);
                 protocols.add("http/1.1");
                 String[] protocolsArray = protocols.toArray(new String[0]);

==================================================
ConnectionPool.java
index 846cd4ff73..4204978655 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -508,7 +508,7 @@ public class WsWebSocketContainer implements WebSocketContainer, BackgroundProce
 
 
     Set<Session> getOpenSessions(Endpoint endpoint) {
-        HashSet<Session> result = new HashSet<>();
+        Set<Session> result = new HashSet<>();
         synchronized (endPointSessionMapLock) {
             Set<WsSession> sessions = endpointSessionMap.get(endpoint);
             if (sessions != null) {

==================================================
EchoAttributesTag.java
index 8a69d69951..f880a75ea7 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -1381,7 +1381,7 @@ public class ConnectionPool {
 
 
     private static volatile Timer poolCleanTimer = null;
-    private static HashSet<PoolCleaner> cleaners = new HashSet<>();
+    private static Set<PoolCleaner> cleaners = new HashSet<>();
 
     private static synchronized void registerCleaner(PoolCleaner cleaner) {
         unregisterCleaner(cleaner);

==================================================
