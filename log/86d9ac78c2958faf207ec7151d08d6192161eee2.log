86d9ac78c2958faf207ec7151d08d6192161eee2
==================================================
Javadoc fixes.
==================================================
Remy Maucherat
==================================================
Fri Jan 8 16:12:22 2016 +0000
==================================================
CorsFilter.java
Javadoc fixes.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1723752 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CsrfPreventionFilterBase.java
index a5cabd7ad9..bc56548af9 100644
--- a/java/org/apache/catalina/filters/CorsFilter.java
+++ b/java/org/apache/catalina/filters/CorsFilter.java
@@ -202,14 +202,11 @@ public final class CorsFilter extends GenericFilter {
     /**
      * Handles a CORS request of type {@link CORSRequestType}.SIMPLE.
      *
-     * @param request
-     *            The {@link HttpServletRequest} object.
-     * @param response
-     *            The {@link HttpServletResponse} object.
-     * @param filterChain
-     *            The {@link FilterChain} object.
-     * @throws IOException
-     * @throws ServletException
+     * @param request The {@link HttpServletRequest} object.
+     * @param response The {@link HttpServletResponse} object.
+     * @param filterChain The {@link FilterChain} object.
+     * @throws IOException an IO error occurred
+     * @throws ServletException Servlet error propagation
      * @see <a href="http://www.w3.org/TR/cors/#resource-requests">Simple
      *      Cross-Origin Request, Actual Request, and Redirects</a>
      */
@@ -288,14 +285,11 @@ public final class CorsFilter extends GenericFilter {
     /**
      * Handles CORS pre-flight request.
      *
-     * @param request
-     *            The {@link HttpServletRequest} object.
-     * @param response
-     *            The {@link HttpServletResponse} object.
-     * @param filterChain
-     *            The {@link FilterChain} object.
-     * @throws IOException
-     * @throws ServletException
+     * @param request The {@link HttpServletRequest} object.
+     * @param response The {@link HttpServletResponse} object.
+     * @param filterChain The {@link FilterChain} object.
+     * @throws IOException an IO error occurred
+     * @throws ServletException Servlet error propagation
      */
     protected void handlePreflightCORS(final HttpServletRequest request,
             final HttpServletResponse response, final FilterChain filterChain)
@@ -403,14 +397,11 @@ public final class CorsFilter extends GenericFilter {
      * it is not a cross-origin request. This implementation, just forwards the
      * request down the filter chain.
      *
-     * @param request
-     *            The {@link HttpServletRequest} object.
-     * @param response
-     *            The {@link HttpServletResponse} object.
-     * @param filterChain
-     *            The {@link FilterChain} object.
-     * @throws IOException
-     * @throws ServletException
+     * @param request The {@link HttpServletRequest} object.
+     * @param response The {@link HttpServletResponse} object.
+     * @param filterChain The {@link FilterChain} object.
+     * @throws IOException an IO error occurred
+     * @throws ServletException Servlet error propagation
      */
     private void handleNonCORS(final HttpServletRequest request,
             final HttpServletResponse response, final FilterChain filterChain)
@@ -423,12 +414,9 @@ public final class CorsFilter extends GenericFilter {
     /**
      * Handles a CORS request that violates specification.
      *
-     * @param request
-     *            The {@link HttpServletRequest} object.
-     * @param response
-     *            The {@link HttpServletResponse} object.
-     * @param filterChain
-     *            The {@link FilterChain} object.
+     * @param request The {@link HttpServletRequest} object.
+     * @param response The {@link HttpServletResponse} object.
+     * @param filterChain The {@link FilterChain} object.
      */
     private void handleInvalidCORS(final HttpServletRequest request,
             final HttpServletResponse response, final FilterChain filterChain) {
@@ -471,10 +459,8 @@ public final class CorsFilter extends GenericFilter {
      * 'Access-Control-Request-Headers' header, for pre-flight request.</li>
      * </ul>
      *
-     * @param request
-     *            The {@link HttpServletRequest} object.
-     * @param corsRequestType
-     *            The {@link CORSRequestType} object.
+     * @param request The {@link HttpServletRequest} object.
+     * @param corsRequestType The {@link CORSRequestType} object.
      */
     protected static void decorateCORSProperties(
             final HttpServletRequest request,
@@ -543,10 +529,8 @@ public final class CorsFilter extends GenericFilter {
      * Joins elements of {@link Set} into a string, where each element is
      * separated by the provided separator.
      *
-     * @param elements
-     *            The {@link Set} containing elements to join together.
-     * @param joinSeparator
-     *            The character to be used for separating elements.
+     * @param elements The {@link Set} containing elements to join together.
+     * @param joinSeparator The character to be used for separating elements.
      * @return The joined {@link String}; <code>null</code> if elements
      *         {@link Set} is null.
      */
@@ -580,7 +564,8 @@ public final class CorsFilter extends GenericFilter {
     /**
      * Determines the request type.
      *
-     * @param request
+     * @param request The HTTP Servlet request
+     * @return the CORS type
      */
     protected CORSRequestType checkRequestType(final HttpServletRequest request) {
         CORSRequestType requestType = CORSRequestType.INVALID_CORS;
@@ -668,7 +653,7 @@ public final class CorsFilter extends GenericFilter {
     }
 
 
-    /*
+    /**
      * Return the lower case, trimmed value of the media type from the content
      * type.
      */
@@ -826,7 +811,8 @@ public final class CorsFilter extends GenericFilter {
      * <li>Origin should be a valid {@link URI}</li>
      * </ul>
      *
-     * @param origin
+     * @param origin The origin URI
+     * @return <code>true</code> if the origin was valid
      * @see <a href="http://tools.ietf.org/html/rfc952">RFC952</a>
      */
     protected static boolean isValidOrigin(String origin) {

==================================================
ExpiresFilter.java
index ada2121ac8..ab642f44f9 100644
--- a/java/org/apache/catalina/filters/CsrfPreventionFilterBase.java
+++ b/java/org/apache/catalina/filters/CsrfPreventionFilterBase.java
@@ -43,7 +43,7 @@ public abstract class CsrfPreventionFilterBase extends FilterBase {
     }
 
     /**
-     * Return response status code that is used to reject denied request.
+     * @return response status code that is used to reject denied request.
      */
     public int getDenyStatus() {
         return denyStatus;
@@ -95,6 +95,8 @@ public abstract class CsrfPreventionFilterBase extends FilterBase {
      * Generate a once time token (nonce) for authenticating subsequent
      * requests. The nonce generation is a simplified version of
      * ManagerBase.generateSessionId().
+     *
+     * @return the generated nonce
      */
     protected String generateNonce() {
         byte random[] = new byte[16];

==================================================
RemoteIpFilter.java
index 2618b87f09..4e46877ad1 100644
--- a/java/org/apache/catalina/filters/ExpiresFilter.java
+++ b/java/org/apache/catalina/filters/ExpiresFilter.java
@@ -1086,6 +1086,7 @@ public class ExpiresFilter extends FilterBase {
     /**
      * Convert a given comma delimited list of strings into an array of String
      *
+     * @param commaDelimitedStrings the string to be split
      * @return array of patterns (non {@code null})
      */
     protected static String[] commaDelimitedListToStringArray(
@@ -1095,8 +1096,10 @@ public class ExpiresFilter extends FilterBase {
     }
 
     /**
-     * Return {@code true} if the given {@code str} contains the given
+     * @return {@code true} if the given {@code str} contains the given
      * {@code searchStr}.
+     * @param str String that will be searched
+     * @param searchStr The substring to search
      */
     protected static boolean contains(String str, String searchStr) {
         if (str == null || searchStr == null) {
@@ -1107,6 +1110,8 @@ public class ExpiresFilter extends FilterBase {
 
     /**
      * Convert an array of ints into a comma delimited string
+     * @param ints The int array
+     * @return a comma separated string
      */
     protected static String intsToCommaDelimitedString(int[] ints) {
         if (ints == null) {
@@ -1125,7 +1130,8 @@ public class ExpiresFilter extends FilterBase {
     }
 
     /**
-     * Return {@code true} if the given {@code str} is
+     * @param str The String to check
+     * @return {@code true} if the given {@code str} is
      * {@code null} or has a zero characters length.
      */
     protected static boolean isEmpty(String str) {
@@ -1133,7 +1139,8 @@ public class ExpiresFilter extends FilterBase {
     }
 
     /**
-     * Return {@code true} if the given {@code str} has at least one
+     * @param str The String to check
+     * @return {@code true} if the given {@code str} has at least one
      * character (can be a withespace).
      */
     protected static boolean isNotEmpty(String str) {
@@ -1141,7 +1148,7 @@ public class ExpiresFilter extends FilterBase {
     }
 
     /**
-     * Return {@code true} if the given {@code string} starts with the
+     * @return {@code true} if the given {@code string} starts with the
      * given {@code prefix} ignoring case.
      *
      * @param string
@@ -1161,7 +1168,7 @@ public class ExpiresFilter extends FilterBase {
     }
 
     /**
-     * Return the subset of the given {@code str} that is before the first
+     * @return the subset of the given {@code str} that is before the first
      * occurence of the given {@code separator}. Return {@code null}
      * if the given {@code str} or the given {@code separator} is
      * null. Return and empty string if the {@code separator} is empty.
@@ -1255,6 +1262,8 @@ public class ExpiresFilter extends FilterBase {
      * {@code protected} for extension.
      * </p>
      *
+     * @param response The Servlet response
+     * @return the expiration date
      * @see HttpServletResponse#getContentType()
      */
     protected Date getExpirationDate(XHttpServletResponse response) {
@@ -1331,6 +1340,9 @@ public class ExpiresFilter extends FilterBase {
      * <p>
      * {@code protected} for extension.
      * </p>
+     * @param configuration The parsed expires
+     * @param response The Servlet response
+     * @return the expiration date
      */
     protected Date getExpirationDate(ExpiresConfiguration configuration,
             XHttpServletResponse response) {
@@ -1411,10 +1423,12 @@ public class ExpiresFilter extends FilterBase {
     }
 
     /**
-     *
      * <p>
      * {@code protected} for extension.
      * </p>
+     * @param request The Servlet request
+     * @param response The Servlet response
+     * @return <code>true</code> if an expire header may be added
      */
     protected boolean isEligibleToExpirationHeaderGeneration(
             HttpServletRequest request, XHttpServletResponse response) {
@@ -1463,6 +1477,8 @@ public class ExpiresFilter extends FilterBase {
      * {@link HttpServletResponse#getContentType()} costs {@code String}
      * objects instantiations (as of Tomcat 7).
      * </p>
+     * @param request The Servlet request
+     * @param response The Servlet response
      */
     public void onBeforeWriteResponseBody(HttpServletRequest request,
             XHttpServletResponse response) {
@@ -1504,7 +1520,8 @@ public class ExpiresFilter extends FilterBase {
      * '{@code access plus 1 month 15 days 2 hours}' or
      * '{@code modification 1 day 2 hours 5 seconds}'
      *
-     * @param inputLine
+     * @param inputLine the input
+     * @return the parsed expires
      */
     protected ExpiresConfiguration parseExpiresConfiguration(String inputLine) {
         String line = inputLine.trim();

==================================================
RequestFilter.java
index 48d4b2159a..a77c860c7f 100644
--- a/java/org/apache/catalina/filters/RemoteIpFilter.java
+++ b/java/org/apache/catalina/filters/RemoteIpFilter.java
@@ -163,7 +163,6 @@ import org.apache.juli.logging.LogFactory;
  * </tr>
  * </table>
  * <p>
- * <p>
  * <strong>Regular expression vs. IP address blocks:</strong> <code>mod_remoteip</code> allows to use address blocks (e.g.
  * <code>192.168/16</code>) to configure <code>RemoteIPInternalProxy</code> and <code>RemoteIPTrustedProxy</code> ; as the JVM doesn't have a
  * library similar to <a
@@ -681,6 +680,7 @@ public class RemoteIpFilter extends GenericFilter {
     /**
      * Convert a given comma delimited list of regular expressions into an array of String
      *
+     * @param commaDelimitedStrings The string to split
      * @return array of patterns (non <code>null</code>)
      */
     protected static String[] commaDelimitedListToStringArray(String commaDelimitedStrings) {
@@ -689,7 +689,10 @@ public class RemoteIpFilter extends GenericFilter {
     }
 
     /**
-     * Convert an array of strings in a comma delimited string
+     * Convert a list of strings in a comma delimited string.
+     *
+     * @param stringList List of strings
+     * @return concatenated string
      */
     protected static String listToCommaDelimitedString(List<String> stringList) {
         if (stringList == null) {
@@ -890,6 +893,7 @@ public class RemoteIpFilter extends GenericFilter {
 
     /**
      * Wrap the incoming <code>request</code> in a {@link XForwardedRequest} if the http header <code>x-forwareded-for</code> is not empty.
+     * {@inheritDoc}
      */
     @Override
     public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
@@ -1000,12 +1004,13 @@ public class RemoteIpFilter extends GenericFilter {
      * <p>
      * If <code>true</code>, the return values for both {@link
      * ServletRequest#getLocalPort()} and {@link ServletRequest#getServerPort()}
-     * wil be modified by this Filter rather than just
+     * will be modified by this Filter rather than just
      * {@link ServletRequest#getServerPort()}.
      * </p>
      * <p>
      * Default value : <code>false</code>
      * </p>
+     * @param changeLocalPort The new flag value
      */
     public void setChangeLocalPort(boolean changeLocalPort) {
         this.changeLocalPort = changeLocalPort;
@@ -1019,6 +1024,7 @@ public class RemoteIpFilter extends GenericFilter {
      * <p>
      * Default value : 80
      * </p>
+     * @param httpServerPort The server port to use
      */
     public void setHttpServerPort(int httpServerPort) {
         this.httpServerPort = httpServerPort;
@@ -1031,6 +1037,7 @@ public class RemoteIpFilter extends GenericFilter {
      * <p>
      * Default value : 443
      * </p>
+     * @param httpsServerPort The server port to use
      */
     public void setHttpsServerPort(int httpsServerPort) {
         this.httpsServerPort = httpsServerPort;
@@ -1043,6 +1050,7 @@ public class RemoteIpFilter extends GenericFilter {
      * <p>
      * Default value : 10\.\d{1,3}\.\d{1,3}\.\d{1,3}|192\.168\.\d{1,3}\.\d{1,3}|169\.254.\d{1,3}.\d{1,3}|127\.\d{1,3}\.\d{1,3}\.\d{1,3}
      * </p>
+     * @param internalProxies The regexp
      */
     public void setInternalProxies(String internalProxies) {
         if (internalProxies == null || internalProxies.length() == 0) {
@@ -1054,13 +1062,14 @@ public class RemoteIpFilter extends GenericFilter {
 
     /**
      * <p>
-     * Header that holds the incoming port, usally named
+     * Header that holds the incoming port, usually named
      * <code>X-Forwarded-Port</code>. If <code>null</code>,
      * {@link #httpServerPort} or {@link #httpsServerPort} will be used.
      * </p>
      * <p>
      * Default value : <code>null</code>
      * </p>
+     * @param portHeader The header name
      */
     public void setPortHeader(String portHeader) {
         this.portHeader = portHeader;
@@ -1068,12 +1077,13 @@ public class RemoteIpFilter extends GenericFilter {
 
     /**
      * <p>
-     * Header that holds the incoming protocol, usally named <code>X-Forwarded-Proto</code>. If <code>null</code>, request.scheme and
+     * Header that holds the incoming protocol, usually named <code>X-Forwarded-Proto</code>. If <code>null</code>, request.scheme and
      * request.secure will not be modified.
      * </p>
      * <p>
      * Default value : <code>null</code>
      * </p>
+     * @param protocolHeader The header name
      */
     public void setProtocolHeader(String protocolHeader) {
         this.protocolHeader = protocolHeader;
@@ -1086,6 +1096,7 @@ public class RemoteIpFilter extends GenericFilter {
      * <p>
      * Default value : <code>https</code>
      * </p>
+     * @param protocolHeaderHttpsValue The header value
      */
     public void setProtocolHeaderHttpsValue(String protocolHeaderHttpsValue) {
         this.protocolHeaderHttpsValue = protocolHeaderHttpsValue;
@@ -1106,6 +1117,7 @@ public class RemoteIpFilter extends GenericFilter {
      * <p>
      * Default value : <code>X-Forwarded-By</code>
      * </p>
+     * @param proxiesHeader The header name
      */
     public void setProxiesHeader(String proxiesHeader) {
         this.proxiesHeader = proxiesHeader;
@@ -1121,6 +1133,7 @@ public class RemoteIpFilter extends GenericFilter {
      * <p>
      * Default value : <code>X-Forwarded-For</code>
      * </p>
+     * @param remoteIpHeader The header name
      */
     public void setRemoteIpHeader(String remoteIpHeader) {
         this.remoteIpHeader = remoteIpHeader;
@@ -1157,6 +1170,7 @@ public class RemoteIpFilter extends GenericFilter {
      * <p>
      * Default value : empty list, no external proxy is trusted.
      * </p>
+     * @param trustedProxies The trusted proxies regexp
      */
     public void setTrustedProxies(String trustedProxies) {
         if (trustedProxies == null || trustedProxies.length() == 0) {

==================================================
SetCharacterEncodingFilter.java
index 859c36fee6..87a96583db 100644
--- a/java/org/apache/catalina/filters/RequestFilter.java
+++ b/java/org/apache/catalina/filters/RequestFilter.java
@@ -82,7 +82,7 @@ public abstract class RequestFilter extends FilterBase {
 
 
     /**
-     * Return the regular expression used to test for allowed requests for this
+     * @return the regular expression used to test for allowed requests for this
      * Filter, if any; otherwise, return <code>null</code>.
      */
     public String getAllow() {
@@ -109,7 +109,7 @@ public abstract class RequestFilter extends FilterBase {
 
 
     /**
-     * Return the regular expression used to test for denied requests for this
+     * @return the regular expression used to test for denied requests for this
      * Filter, if any; otherwise, return <code>null</code>.
      */
     public String getDeny() {
@@ -136,7 +136,7 @@ public abstract class RequestFilter extends FilterBase {
 
 
     /**
-     * Return response status code that is used to reject denied request.
+     * @return response status code that is used to reject denied request.
      */
     public int getDenyStatus() {
         return denyStatus;
@@ -145,6 +145,8 @@ public abstract class RequestFilter extends FilterBase {
 
     /**
      * Set response status code that is used to reject denied request.
+     *
+     * @param denyStatus The status code for deny
      */
     public void setDenyStatus(int denyStatus) {
         this.denyStatus = denyStatus;
@@ -189,6 +191,7 @@ public abstract class RequestFilter extends FilterBase {
      * @param property The request property on which to filter
      * @param request The servlet request to be processed
      * @param response The servlet response to be processed
+     * @param chain The filter chain
      *
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet error occurs

==================================================
CatalinaCluster.java
index 885d7886e1..96e151da08 100644
--- a/java/org/apache/catalina/filters/SetCharacterEncodingFilter.java
+++ b/java/org/apache/catalina/filters/SetCharacterEncodingFilter.java
@@ -128,6 +128,7 @@ public class SetCharacterEncodingFilter extends FilterBase {
      * filter.
      *
      * @param request The servlet request we are processing
+     * @return the encoding that was configured
      */
     protected String selectEncoding(ServletRequest request) {
         return this.encoding;

==================================================
ClusterDeployer.java
index 1fe54cddc7..a9b79fb6bf 100644
--- a/java/org/apache/catalina/ha/CatalinaCluster.java
+++ b/java/org/apache/catalina/ha/CatalinaCluster.java
@@ -48,21 +48,17 @@ public interface CatalinaCluster extends Cluster {
     public void send(ClusterMessage msg, Member dest);
 
     /**
-     * Returns that cluster has members.
+     * @return <code>true</code> if the cluster has members.
      */
     public boolean hasMembers();
 
     /**
-     * Returns all the members currently participating in the cluster.
-     *
-     * @return Member[]
+     * @return an array containing all the members currently participating in the cluster.
      */
     public Member[] getMembers();
 
     /**
-     * Return the member that represents this node.
-     *
-     * @return Member
+     * @return the member that represents this node.
      */
     public Member getLocalMember();
 
@@ -81,11 +77,25 @@ public interface CatalinaCluster extends Cluster {
      */
     public Map<String,ClusterManager> getManagers();
 
+    /**
+     * Get Manager
+     * @param name The manager name
+     * @return The manager
+     */
     public Manager getManager(String name);
+
+    /**
+     * Get a new cluster name for a manager.
+     * @param name Override name (optional)
+     * @param manager The manager
+     * @return the manager name in the cluster
+     */
     public String getManagerName(String name, Manager manager);
+
     public Valve[] getValves();
 
     public void setChannel(Channel channel);
+
     public Channel getChannel();
 
 

==================================================
ClusterManager.java
index b2da59fd93..8763e66163 100644
--- a/java/org/apache/catalina/ha/ClusterDeployer.java
+++ b/java/org/apache/catalina/ha/ClusterDeployer.java
@@ -37,7 +37,7 @@ public interface ClusterDeployer extends ChannelListener {
 
     /**
      * Stops the cluster deployer, the owning container will invoke this
-     * @throws LifecycleException
+     * @throws LifecycleException Error stopping cluster deployer
      */
     public void stop() throws LifecycleException;
 

==================================================
Sender.java
index 1cac8ea997..09353d0802 100644
--- a/java/org/apache/catalina/ha/ClusterManager.java
+++ b/java/org/apache/catalina/ha/ClusterManager.java
@@ -70,7 +70,7 @@ public interface ClusterManager extends Manager {
 
    /**
     * Set the name of the manager, at host /context name and at engine hostname+/context
-    * @param name
+    * @param name The manager name
     * @since 5.5.10
     */
    public void setName(String name);

==================================================
TcpSender.java
index 191a19c554..885744567c 100644
--- a/java/org/apache/catalina/ha/backend/Sender.java
+++ b/java/org/apache/catalina/ha/backend/Sender.java
@@ -18,19 +18,23 @@
 
 package org.apache.catalina.ha.backend;
 
-/*
- * Interface to send data to proxies
- *
+/**
+ * Interface to send data to proxies.
  */
 public interface Sender {
 
   /**
    * Set the configuration parameters
+   * @param config The heartbeat listener configuration
+   * @throws Exception An error occurred
    */
   public void init(HeartbeatListener config) throws Exception;
 
   /**
    * Send the message to the proxies
+   * @param mess The message that will be sent
+   * @return <code>0</code> if no error occurred, <code>-1</code> otherwise
+   * @throws Exception An error occurred
    */
   public int send(String mess) throws Exception;
 }

==================================================
FarmWarDeployer.java
index 00d6100da9..af80512734 100644
--- a/java/org/apache/catalina/ha/backend/TcpSender.java
+++ b/java/org/apache/catalina/ha/backend/TcpSender.java
@@ -180,6 +180,7 @@ public class TcpSender
 
     /**
      * Close connection.
+     * @param i The index of the connection that will be closed
      */
     protected void close(int i) {
         try {

==================================================
FileMessageFactory.java
index 82a9165e57..a9ccebd1c5 100644
--- a/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
+++ b/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
@@ -287,12 +287,12 @@ public class FarmWarDeployer extends ClusterListener
     }
 
     /**
-     * create factory for all transported war files
+     * Create factory for all transported war files
      *
-     * @param msg
+     * @param msg The file
      * @return Factory for all app message (war files)
-     * @throws java.io.FileNotFoundException
-     * @throws java.io.IOException
+     * @throws java.io.FileNotFoundException Missing file error
+     * @throws java.io.IOException Other IO error
      */
     public synchronized FileMessageFactory getFactory(FileMessage msg)
             throws java.io.FileNotFoundException, java.io.IOException {
@@ -307,9 +307,9 @@ public class FarmWarDeployer extends ClusterListener
     }
 
     /**
-     * Remove file (war) from messages)
+     * Remove file (war) from messages
      *
-     * @param msg
+     * @param msg The file
      */
     public void removeFactory(FileMessage msg) {
         fileFactories.remove(msg.getFileName());
@@ -320,8 +320,7 @@ public class FarmWarDeployer extends ClusterListener
      * receiver to accept or decline the message, In the future, when messages
      * get big, the accept method will only take a message header
      *
-     * @param msg
-     *            ClusterMessage
+     * @param msg ClusterMessage
      * @return boolean - returns true to indicate that messageReceived should be
      *         invoked. If false is returned, the messageReceived method will
      *         not be invoked.
@@ -440,7 +439,7 @@ public class FarmWarDeployer extends ClusterListener
 
     }
 
-    /*
+    /**
      * Modification from watchDir war detected!
      *
      * @see org.apache.catalina.ha.deploy.FileChangeListener#fileModified(File)
@@ -477,7 +476,7 @@ public class FarmWarDeployer extends ClusterListener
         }
     }
 
-    /*
+    /**
      * War remove from watchDir
      *
      * @see org.apache.catalina.ha.deploy.FileChangeListener#fileRemoved(File)
@@ -497,6 +496,8 @@ public class FarmWarDeployer extends ClusterListener
 
     /**
      * Invoke the remove method on the deployer.
+     * @param contextName The context to remove
+     * @throws Exception If an error occurs removing the context
      */
     protected void remove(String contextName) throws Exception {
         // TODO Handle remove also work dir content !
@@ -556,7 +557,7 @@ public class FarmWarDeployer extends ClusterListener
         }
     }
 
-    /*
+    /**
      * Call watcher to check for deploy changes
      *
      * @see org.apache.catalina.ha.ClusterDeployer#backgroundProcess()
@@ -578,7 +579,9 @@ public class FarmWarDeployer extends ClusterListener
     /*--Deployer Operations ------------------------------------*/
 
     /**
-     * Invoke the check method on the deployer.
+     * Check a context for deployment operations.
+     * @param name The context name
+     * @throws Exception Error invoking the deployer
      */
     protected void check(String name) throws Exception {
         String[] params = { name };
@@ -587,7 +590,10 @@ public class FarmWarDeployer extends ClusterListener
     }
 
     /**
-     * Invoke the check method on the deployer.
+     * Verified if a context is being services.
+     * @param name The context name
+     * @return <code>true</code> if the context is being serviced
+     * @throws Exception Error invoking the deployer
      */
     protected boolean isServiced(String name) throws Exception {
         String[] params = { name };
@@ -598,7 +604,9 @@ public class FarmWarDeployer extends ClusterListener
     }
 
     /**
-     * Invoke the check method on the deployer.
+     * Mark a context as being services.
+     * @param name The context name
+     * @throws Exception Error invoking the deployer
      */
     protected void addServiced(String name) throws Exception {
         String[] params = { name };
@@ -607,7 +615,9 @@ public class FarmWarDeployer extends ClusterListener
     }
 
     /**
-     * Invoke the check method on the deployer.
+     * Mark a context as no longer being serviced.
+     * @param name The context name
+     * @throws Exception Error invoking the deployer
      */
     protected void removeServiced(String name) throws Exception {
         String[] params = { name };
@@ -687,7 +697,7 @@ public class FarmWarDeployer extends ClusterListener
     }
 
     /**
-     * Return the frequency of watcher checks.
+     * @return the frequency of watcher checks.
      */
     public int getProcessDeployFrequency() {
 

==================================================
WarWatcher.java
index 426f20ea70..5f999ec217 100644
--- a/java/org/apache/catalina/ha/deploy/FileMessageFactory.java
+++ b/java/org/apache/catalina/ha/deploy/FileMessageFactory.java
@@ -333,9 +333,8 @@ public class FileMessageFactory {
      * asked to do. Invoked by readMessage/writeMessage before those methods
      * proceed.
      *
-     * @param openForWrite
-     *            boolean
-     * @throws IllegalArgumentException
+     * @param openForWrite The value to check
+     * @throws IllegalArgumentException if the state is not the expected one
      */
     protected void checkState(boolean openForWrite)
             throws IllegalArgumentException {
@@ -360,7 +359,7 @@ public class FileMessageFactory {
      * @param args
      *            String[], args[0] - read from filename, args[1] write to
      *            filename
-     * @throws Exception
+     * @throws Exception An error occurred
      */
     public static void main(String[] args) throws Exception {
 

==================================================
ClusterManagerBase.java
index e770541468..bbec31a634 100644
--- a/java/org/apache/catalina/ha/deploy/WarWatcher.java
+++ b/java/org/apache/catalina/ha/deploy/WarWatcher.java
@@ -112,7 +112,7 @@ public class WarWatcher {
 
     /**
      * add cluster war to the watcher state
-     * @param warfile
+     * @param warfile The WAR to add
      */
     protected void addWarInfo(File warfile) {
         WarInfo info = currentStatus.get(warfile.getAbsolutePath());

==================================================
DeltaManager.java
index 58319814c1..aa889e66a4 100644
--- a/java/org/apache/catalina/ha/session/ClusterManagerBase.java
+++ b/java/org/apache/catalina/ha/session/ClusterManagerBase.java
@@ -136,7 +136,8 @@ public abstract class ClusterManagerBase extends ManagerBase implements ClusterM
     /**
      * Check whether the given session attribute should be distributed
      *
-     * @return true if the attribute should be distributed
+     * @param name The attribute name
+     * @return <code>true</code> if the attribute should be distributed
      */
     public boolean willAttributeDistribute(String name) {
         if (sessionAttributePattern == null) {
@@ -171,9 +172,9 @@ public abstract class ClusterManagerBase extends ManagerBase implements ClusterM
      * Open Stream and use correct ClassLoader (Container) Switch
      * ThreadClassLoader
      *
-     * @param data
+     * @param data The data
      * @return The object input stream
-     * @throws IOException
+     * @throws IOException An error occurred
      */
     @Override
     public ReplicationStream getReplicationStream(byte[] data) throws IOException {

==================================================
DeltaRequest.java
index d2a3c01b5c..e0e5a569e1 100644
--- a/java/org/apache/catalina/ha/session/DeltaManager.java
+++ b/java/org/apache/catalina/ha/session/DeltaManager.java
@@ -296,16 +296,15 @@ public class DeltaManager extends ClusterManagerBase{
     }
 
     /**
-     * is session state transfered complete?
-     *
+     * @return <code>true</code> if the state transfer is complete.
      */
     public boolean getStateTransfered() {
         return stateTransfered;
     }
 
     /**
-     * set that state ist complete transfered
-     * @param stateTransfered
+     * Set that state transfered is complete
+     * @param stateTransfered Fag value
      */
     public void setStateTransfered(boolean stateTransfered) {
         this.stateTransfered = stateTransfered;
@@ -320,7 +319,7 @@ public class DeltaManager extends ClusterManagerBase{
     }
 
     /**
-     * @return Returns the sendAllSessionsWaitTime in msec
+     * @return the sendAllSessionsWaitTime in msec
      */
     public int getSendAllSessionsWaitTime() {
         return sendAllSessionsWaitTime;
@@ -334,7 +333,7 @@ public class DeltaManager extends ClusterManagerBase{
     }
 
     /**
-     * @return Returns the stateTimestampDrop.
+     * @return the stateTimestampDrop.
      */
     public boolean isStateTimestampDrop() {
         return stateTimestampDrop;
@@ -349,7 +348,7 @@ public class DeltaManager extends ClusterManagerBase{
 
     /**
      *
-     * @return Returns the sendAllSessions.
+     * @return the sendAllSessions.
      */
     public boolean isSendAllSessions() {
         return sendAllSessions;
@@ -363,7 +362,7 @@ public class DeltaManager extends ClusterManagerBase{
     }
 
     /**
-     * @return Returns the sendAllSessionsSize.
+     * @return the sendAllSessionsSize.
      */
     public int getSendAllSessionsSize() {
         return sendAllSessionsSize;
@@ -377,7 +376,7 @@ public class DeltaManager extends ClusterManagerBase{
     }
 
     /**
-     * @return Returns the notifySessionListenersOnReplication.
+     * @return the notifySessionListenersOnReplication.
      */
     public boolean isNotifySessionListenersOnReplication() {
         return notifySessionListenersOnReplication;
@@ -419,6 +418,7 @@ public class DeltaManager extends ClusterManagerBase{
      * session. If a new session cannot be created for any reason, return
      * <code>null</code>.
      *
+     * @param sessionId The session id that should be used for the session
      * @exception IllegalStateException
      *                if a new session cannot be instantiated for any reason
      *
@@ -440,7 +440,8 @@ public class DeltaManager extends ClusterManagerBase{
      * create new session with check maxActiveSessions and send session creation
      * to other cluster nodes.
      *
-     * @param distribute
+     * @param sessionId The session id that should be used for the session
+     * @param distribute <code>true</code> to replicate the new session
      * @return The session
      */
     public Session createSession(String sessionId, boolean distribute) {
@@ -455,9 +456,9 @@ public class DeltaManager extends ClusterManagerBase{
     }
 
     /**
-     * Send create session evt to all backup node
-     * @param sessionId
-     * @param session
+     * Send create session event to all backup node
+     * @param sessionId The session id of the session
+     * @param session The session object
      */
     protected void sendCreateSession(String sessionId, DeltaSession session) {
         if(cluster.getMembers().length > 0 ) {
@@ -497,6 +498,7 @@ public class DeltaManager extends ClusterManagerBase{
 
     /**
      * Get new session class to be used in the doLoad() method.
+     * @return a new session
      */
     protected DeltaSession getNewDeltaSession() {
         return new DeltaSession(this);
@@ -558,6 +560,8 @@ public class DeltaManager extends ClusterManagerBase{
 
     /**
      * serialize sessionID
+     * @param sessionId Session id to serialize
+     * @return byte array with serialized session id
      * @throws IOException if an input/output error occurs
      */
     protected byte[] serializeSessionId(String sessionId) throws IOException {
@@ -571,6 +575,8 @@ public class DeltaManager extends ClusterManagerBase{
 
     /**
      * Load sessionID
+     * @param data serialized session id
+     * @return session id
      * @throws IOException if an input/output error occurs
      */
     protected String deserializeSessionId(byte[] data) throws IOException {
@@ -584,11 +590,11 @@ public class DeltaManager extends ClusterManagerBase{
      * Load Deltarequest from external node
      * Load the Class at container classloader
      * @see DeltaRequest#readExternal(java.io.ObjectInput)
-     * @param session
+     * @param session Corresponding session
      * @param data message data
      * @return The request
-     * @throws ClassNotFoundException
-     * @throws IOException
+     * @throws ClassNotFoundException Serialization error
+     * @throws IOException IO error with serialization
      */
     protected DeltaRequest deserializeDeltaRequest(DeltaSession session, byte[] data)
             throws ClassNotFoundException, IOException {
@@ -607,9 +613,10 @@ public class DeltaManager extends ClusterManagerBase{
      * serialize DeltaRequest
      * @see DeltaRequest#writeExternal(java.io.ObjectOutput)
      *
-     * @param deltaRequest
+     * @param session Associated session
+     * @param deltaRequest The request to serialize
      * @return serialized delta request
-     * @throws IOException
+     * @throws IOException IO error with serialization
      */
     protected byte[] serializeDeltaRequest(DeltaSession session, DeltaRequest deltaRequest)
             throws IOException {
@@ -625,6 +632,7 @@ public class DeltaManager extends ClusterManagerBase{
      * Load sessions from other cluster node.
      * FIXME replace currently sessions with same id without notification.
      * FIXME SSO handling is not really correct with the session replacement!
+     * @param data Serialized data
      * @exception ClassNotFoundException
      *                if a serialized class cannot be found during the reload
      * @exception IOException
@@ -684,6 +692,8 @@ public class DeltaManager extends ClusterManagerBase{
      * mechanism, if any. If persistence is not supported, this method returns
      * without doing anything.
      *
+     * @param currentSessions Sessions to serialize
+     * @return serialized data
      * @exception IOException
      *                if an input/output error occurs
      */
@@ -835,8 +845,9 @@ public class DeltaManager extends ClusterManagerBase{
     }
 
     /**
-     * Wait that cluster session state is transfer or timeout after 60 Sec
+     * Wait that cluster session state is transfered or timeout after 60 Sec
      * With stateTransferTimeout == -1 wait that backup is transfered (forever mode)
+     * @param beforeSendTime Start instant of the operation
      */
     protected void waitForSendAllSessions(long beforeSendTime) {
         long reqStart = System.currentTimeMillis();
@@ -1237,8 +1248,8 @@ public class DeltaManager extends ClusterManagerBase{
 
     /**
      * handle receive session state is complete transfered
-     * @param msg
-     * @param sender
+     * @param msg Session message
+     * @param sender Member which sent the message
      */
     protected void handleALL_SESSION_TRANSFERCOMPLETE(SessionMessage msg, Member sender) {
         counterReceive_EVT_ALL_SESSION_TRANSFERCOMPLETE++ ;
@@ -1252,10 +1263,10 @@ public class DeltaManager extends ClusterManagerBase{
 
     /**
      * handle receive session delta
-     * @param msg
-     * @param sender
-     * @throws IOException
-     * @throws ClassNotFoundException
+     * @param msg Session message
+     * @param sender Member which sent the message
+     * @throws IOException IO error with serialization
+     * @throws ClassNotFoundException Serialization error
      */
     protected void handleSESSION_DELTA(SessionMessage msg, Member sender)
             throws IOException, ClassNotFoundException {
@@ -1280,9 +1291,9 @@ public class DeltaManager extends ClusterManagerBase{
 
     /**
      * handle receive session is access at other node ( primary session is now false)
-     * @param msg
-     * @param sender
-     * @throws IOException
+     * @param msg Session message
+     * @param sender Member which sent the message
+     * @throws IOException Propagated IO error
      */
     protected void handleSESSION_ACCESSED(SessionMessage msg,Member sender) throws IOException {
         counterReceive_EVT_SESSION_ACCESSED++;
@@ -1300,9 +1311,9 @@ public class DeltaManager extends ClusterManagerBase{
 
     /**
      * handle receive session is expire at other node ( expire session also here)
-     * @param msg
-     * @param sender
-     * @throws IOException
+     * @param msg Session message
+     * @param sender Member which sent the message
+     * @throws IOException Propagated IO error
      */
     protected void handleSESSION_EXPIRED(SessionMessage msg,Member sender) throws IOException {
         counterReceive_EVT_SESSION_EXPIRED++;
@@ -1318,8 +1329,8 @@ public class DeltaManager extends ClusterManagerBase{
 
     /**
      * handle receive new session is created at other node (create backup - primary false)
-     * @param msg
-     * @param sender
+     * @param msg Session message
+     * @param sender Member which sent the message
      */
     protected void handleSESSION_CREATED(SessionMessage msg,Member sender) {
         counterReceive_EVT_SESSION_CREATED++;
@@ -1344,10 +1355,10 @@ public class DeltaManager extends ClusterManagerBase{
 
     /**
      * handle receive sessions from other not ( restart )
-     * @param msg
-     * @param sender
-     * @throws ClassNotFoundException
-     * @throws IOException
+     * @param msg Session message
+     * @param sender Member which sent the message
+     * @throws ClassNotFoundException Serialization error
+     * @throws IOException IO error with serialization
      */
     protected void handleALL_SESSION_DATA(SessionMessage msg,Member sender)
             throws ClassNotFoundException, IOException {
@@ -1368,9 +1379,9 @@ public class DeltaManager extends ClusterManagerBase{
      * a) send all sessions with one message
      * b) send session at blocks
      * After sending send state is complete transfered
-     * @param msg
-     * @param sender
-     * @throws IOException
+     * @param msg Session message
+     * @param sender Member which sent the message
+     * @throws IOException IO error sending messages
      */
     protected void handleGET_ALL_SESSIONS(SessionMessage msg, Member sender) throws IOException {
         counterReceive_EVT_GET_ALL_SESSIONS++;
@@ -1417,9 +1428,9 @@ public class DeltaManager extends ClusterManagerBase{
 
     /**
      * handle receive change sessionID at other node
-     * @param msg
-     * @param sender
-     * @throws IOException
+     * @param msg Session message
+     * @param sender Member which sent the message
+     * @throws IOException IO error with serialization
      */
     protected void handleCHANGE_SESSION_ID(SessionMessage msg,Member sender) throws IOException {
         counterReceive_EVT_CHANGE_SESSION_ID++;
@@ -1435,8 +1446,8 @@ public class DeltaManager extends ClusterManagerBase{
 
     /**
      * handle receive no context manager.
-     * @param msg
-     * @param sender
+     * @param msg Session message
+     * @param sender Member which sent the message
      */
     protected void handleALL_SESSION_NOCONTEXTMANAGER(SessionMessage msg, Member sender) {
         counterReceive_EVT_ALL_SESSION_NOCONTEXTMANAGER++ ;
@@ -1448,10 +1459,10 @@ public class DeltaManager extends ClusterManagerBase{
 
     /**
      * send a block of session to sender
-     * @param sender
-     * @param currentSessions
-     * @param sendTimestamp
-     * @throws IOException
+     * @param sender Sender member
+     * @param currentSessions Sessions to send
+     * @param sendTimestamp Timestamp
+     * @throws IOException IO error sending messages
      */
     protected void sendSessions(Member sender, Session[] currentSessions,long sendTimestamp)
             throws IOException {

==================================================
DeltaSession.java
index d487bc9c14..c5c5a57920 100644
--- a/java/org/apache/catalina/ha/session/DeltaRequest.java
+++ b/java/org/apache/catalina/ha/session/DeltaRequest.java
@@ -300,7 +300,7 @@ public class DeltaRequest implements Externalizable {
      * @see DeltaRequest#writeExternal(java.io.ObjectOutput)
      *
      * @return serialized delta request
-     * @throws IOException
+     * @throws IOException IO error serializing
      */
     protected byte[] serialize() throws IOException {
         ByteArrayOutputStream bos = new ByteArrayOutputStream();

==================================================
ReplicationValve.java
index a5dbbba518..ff94915efb 100644
--- a/java/org/apache/catalina/ha/session/DeltaSession.java
+++ b/java/org/apache/catalina/ha/session/DeltaSession.java
@@ -128,8 +128,8 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
 
     /**
      * Returns a diff and sets the dirty map to false
-     * @return byte[]
-     * @throws IOException
+     * @return a serialized view of the difference
+     * @throws IOException IO error serializing
      */
     @Override
     public byte[] getDiff() throws IOException {
@@ -153,10 +153,10 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
 
     /**
      * Applies a diff to an existing object.
-     * @param diff byte[]
-     * @param offset int
-     * @param length int
-     * @throws IOException
+     * @param diff Serialized diff data
+     * @param offset Array offset
+     * @param length Array length
+     * @throws IOException IO error deserializing
      */
     @Override
     public void applyDiff(byte[] diff, int offset, int length) throws IOException, ClassNotFoundException {

==================================================
SendMessageData.java
index ad0e251eea..8fac6b2132 100644
--- a/java/org/apache/catalina/ha/tcp/ReplicationValve.java
+++ b/java/org/apache/catalina/ha/tcp/ReplicationValve.java
@@ -118,7 +118,7 @@ public class ReplicationValve
     }
 
     /**
-     * @return Returns the cluster.
+     * @return the cluster.
      */
     @Override
     public CatalinaCluster getCluster() {
@@ -134,7 +134,7 @@ public class ReplicationValve
     }
 
     /**
-     * @return Returns the filter
+     * @return the filter
      */
     public String getFilter() {
        if (filter == null) {
@@ -167,7 +167,7 @@ public class ReplicationValve
     }
 
     /**
-     * @return Returns the primaryIndicator.
+     * @return the primaryIndicator.
      */
     public boolean isPrimaryIndicator() {
         return primaryIndicator;
@@ -181,7 +181,7 @@ public class ReplicationValve
     }
 
     /**
-     * @return Returns the primaryIndicatorName.
+     * @return the primaryIndicatorName.
      */
     public String getPrimaryIndicatorName() {
         return primaryIndicatorName;
@@ -196,6 +196,7 @@ public class ReplicationValve
 
     /**
      * Calc processing stats
+     * @return <code>true</code> if statistics are enabled
      */
     public boolean doStatistics() {
         return doProcessingStats;
@@ -203,6 +204,8 @@ public class ReplicationValve
 
     /**
      * Set Calc processing stats
+     *
+     * @param doProcessingStats New flag value
      * @see #resetStatistics()
      */
     public void setStatistics(boolean doProcessingStats) {
@@ -210,49 +213,49 @@ public class ReplicationValve
     }
 
     /**
-     * @return Returns the lastSendTime.
+     * @return the lastSendTime.
      */
     public long getLastSendTime() {
         return lastSendTime;
     }
 
     /**
-     * @return Returns the nrOfRequests.
+     * @return the nrOfRequests.
      */
     public long getNrOfRequests() {
         return nrOfRequests;
     }
 
     /**
-     * @return Returns the nrOfFilterRequests.
+     * @return the nrOfFilterRequests.
      */
     public long getNrOfFilterRequests() {
         return nrOfFilterRequests;
     }
 
     /**
-     * @return Returns the nrOfCrossContextSendRequests.
+     * @return the nrOfCrossContextSendRequests.
      */
     public long getNrOfCrossContextSendRequests() {
         return nrOfCrossContextSendRequests;
     }
 
     /**
-     * @return Returns the nrOfSendRequests.
+     * @return the nrOfSendRequests.
      */
     public long getNrOfSendRequests() {
         return nrOfSendRequests;
     }
 
     /**
-     * @return Returns the totalRequestTime.
+     * @return the totalRequestTime.
      */
     public long getTotalRequestTime() {
         return totalRequestTime;
     }
 
     /**
-     * @return Returns the totalSendTime.
+     * @return the totalSendTime.
      */
     public long getTotalSendTime() {
         return totalSendTime;
@@ -385,12 +388,6 @@ public class ReplicationValve
 
     // --------------------------------------------------------- Protected Methods
 
-    /**
-     * @param request
-     * @param totalstart
-     * @param isCrossContext
-     * @param clusterManager
-     */
     protected void sendReplicationMessage(Request request, long totalstart, boolean isCrossContext, ClusterManager clusterManager) {
         //this happens after the request
         long start = 0;
@@ -534,7 +531,7 @@ public class ReplicationValve
 
     /**
      * check for session invalidations
-     * @param manager
+     * @param manager Associated manager
      */
     protected void sendInvalidSessions(ClusterManager manager) {
         String[] invalidIds=manager.getInvalidatedSessions();
@@ -561,8 +558,8 @@ public class ReplicationValve
 
     /**
      * Protocol cluster replications stats
-     * @param requestTime
-     * @param clusterTime
+     * @param requestTime Request time
+     * @param clusterTime Cluster time
      */
     protected  void updateStats(long requestTime, long clusterTime) {
         // TODO: Async requests may trigger multiple replication requests. How,
@@ -594,8 +591,8 @@ public class ReplicationValve
      * Mark Request that processed at primary node with attribute
      * primaryIndicatorName
      *
-     * @param request
-     * @throws IOException
+     * @param request The Servlet request
+     * @throws IOException IO error finding session
      */
     protected void createPrimaryIndicator(Request request) throws IOException {
         String id = request.getRequestedSessionId();

==================================================
SimpleTcpCluster.java
index 304152b967..bccfab31af 100644
--- a/java/org/apache/catalina/ha/tcp/SendMessageData.java
+++ b/java/org/apache/catalina/ha/tcp/SendMessageData.java
@@ -30,9 +30,9 @@ public class SendMessageData {
 
 
     /**
-     * @param message
-     * @param destination
-     * @param exception
+     * @param message The message to send
+     * @param destination Member destination
+     * @param exception Associated error
      */
     public SendMessageData(Object message, Member destination,
             Exception exception) {
@@ -43,19 +43,19 @@ public class SendMessageData {
     }
 
     /**
-     * @return Returns the destination.
+     * @return the destination.
      */
     public Member getDestination() {
         return destination;
     }
     /**
-     * @return Returns the exception.
+     * @return the exception.
      */
     public Exception getException() {
         return exception;
     }
     /**
-     * @return Returns the message.
+     * @return the message.
      */
     public Object getMessage() {
         return message;

==================================================
ManagerBase.java
index 69dc773696..7243d9c956 100644
--- a/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java
+++ b/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java
@@ -269,6 +269,7 @@ public class SimpleTcpCluster extends LifecycleMBeanBase
     /**
      * Get the cluster listeners associated with this cluster. If this Array has
      * no listeners registered, a zero-length array is returned.
+     * @return the listener array
      */
     public ClusterListener[] findClusterListeners() {
         if (clusterListeners.size() > 0) {
@@ -283,6 +284,7 @@ public class SimpleTcpCluster extends LifecycleMBeanBase
     /**
      * Add cluster message listener and register cluster to this listener.
      *
+     * @param listener The new listener
      * @see org.apache.catalina.ha.CatalinaCluster#addClusterListener(org.apache.catalina.ha.ClusterListener)
      */
     @Override
@@ -296,6 +298,7 @@ public class SimpleTcpCluster extends LifecycleMBeanBase
     /**
      * Remove message listener and deregister Cluster from listener.
      *
+     * @param listener The listener to remove
      * @see org.apache.catalina.ha.CatalinaCluster#removeClusterListener(org.apache.catalina.ha.ClusterListener)
      */
     @Override
@@ -307,7 +310,7 @@ public class SimpleTcpCluster extends LifecycleMBeanBase
     }
 
     /**
-     * get current Deployer
+     * @return the current Deployer
      */
     @Override
     public org.apache.catalina.ha.ClusterDeployer getClusterDeployer() {
@@ -316,6 +319,7 @@ public class SimpleTcpCluster extends LifecycleMBeanBase
 
     /**
      * set a new Deployer, must be set before cluster started!
+     * @param clusterDeployer The associated deployer
      */
     @Override
     public void setClusterDeployer(
@@ -438,6 +442,7 @@ public class SimpleTcpCluster extends LifecycleMBeanBase
     /**
      * Remove an application from cluster replication bus.
      *
+     * @param manager The manager
      * @see org.apache.catalina.Cluster#removeManager(Manager)
      */
     @Override
@@ -453,11 +458,6 @@ public class SimpleTcpCluster extends LifecycleMBeanBase
         }
     }
 
-    /**
-     * @param name
-     * @param manager
-     * @return TODO
-     */
     @Override
     public String getManagerName(String name, Manager manager) {
         String clusterName = name ;
@@ -475,11 +475,6 @@ public class SimpleTcpCluster extends LifecycleMBeanBase
         return clusterName;
     }
 
-    /*
-     * Get Manager
-     *
-     * @see org.apache.catalina.ha.CatalinaCluster#getManager(java.lang.String)
-     */
     @Override
     public Manager getManager(String name) {
         return managers.get(name);

==================================================
StandardSession.java
index cc99ecab93..1e128fcda6 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -778,6 +778,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
 
     /**
      * Get new session class to be used in the doLoad() method.
+     * @return a new session for use with this manager
      */
     protected StandardSession getNewSession() {
         return new StandardSession(this);
@@ -786,6 +787,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
 
     /**
      * Generate and return a new session identifier.
+     * @return a new session id
      */
     protected String generateSessionId() {
 

==================================================
ReplicatedMapEntry.java
index 16dfb0162b..2b19fb895a 100644
--- a/java/org/apache/catalina/session/StandardSession.java
+++ b/java/org/apache/catalina/session/StandardSession.java
@@ -1563,7 +1563,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
 
 
     /**
-     * Return the <code>isValid</code> flag for this session without any expiration
+     * @return the <code>isValid</code> flag for this session without any expiration
      * check.
      */
     protected boolean isValidInternal() {
@@ -1721,6 +1721,8 @@ public class StandardSession implements HttpSession, Session, Serializable {
     /**
      * Exclude standard attributes that cannot be serialized.
      * @param name the attribute's name
+     * @return <code>true</code> if the specified attribute should be
+     *    excluded from serialization
      */
     protected boolean exclude(String name){
 
@@ -1760,7 +1762,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
 
 
     /**
-     * Return the names of all currently defined session attributes
+     * @return the names of all currently defined session attributes
      * as an array of Strings.  If there are no defined attributes, a
      * zero-length array is returned.
      */

==================================================
RuleSet.java
index d717c9991e..2110eaef7d 100644
--- a/java/org/apache/catalina/tribes/tipis/ReplicatedMapEntry.java
+++ b/java/org/apache/catalina/tribes/tipis/ReplicatedMapEntry.java
@@ -64,18 +64,19 @@ public interface ReplicatedMapEntry extends Serializable {
 
     /**
      * Returns a diff and sets the dirty map to false
-     * @return byte[]
-     * @throws IOException
+     * @return Serialized diff data
+     * @throws IOException IO error serializing
      */
     public byte[] getDiff() throws IOException;
 
 
     /**
      * Applies a diff to an existing object.
-     * @param diff byte[]
-     * @param offset int
-     * @param length int
-     * @throws IOException
+     * @param diff Serialized diff data
+     * @param offset Array offset
+     * @param length Array length
+     * @throws IOException IO error deserializing
+     * @throws ClassNotFoundException Serialization error
      */
     public void applyDiff(byte[] diff, int offset, int length) throws IOException, ClassNotFoundException;
 
@@ -118,13 +119,13 @@ public interface ReplicatedMapEntry extends Serializable {
     public void setVersion(long version);
 
     /**
-     * Return the last replicate time.
+     * @return the last replicate time.
      */
     public long getLastTimeReplicated();
 
     /**
      * Set the last replicate time.
-     * @param lastTimeReplicated
+     * @param lastTimeReplicated New timestamp
      */
     public void setLastTimeReplicated(long lastTimeReplicated);
 

==================================================
