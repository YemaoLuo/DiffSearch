50795b5cd767e5f06db7c9348c187c12c0537644
==================================================
More URL -> URI refactoring
==================================================
Mark Thomas
==================================================
Wed Nov 16 15:28:40 2022 +0000
==================================================
CatalinaProperties.java
More URL -> URI refactoring


==================================================
ClassLoaderFactory.java
index 9bdad9d300..2bf690705b 100644
--- a/java/org/apache/catalina/startup/CatalinaProperties.java
+++ b/java/org/apache/catalina/startup/CatalinaProperties.java
@@ -69,7 +69,7 @@ public class CatalinaProperties {
                     // No '/'. Must be a file name rather than a URL
                     fileName = configUrl;
                 } else {
-                    is = (new URI(configUrl)).toURL().openStream();
+                    is = new URI(configUrl).toURL().openStream();
                 }
             }
         } catch (Throwable t) {

==================================================
JarResourceRoot.java
index a104f57b66..394e8a0606 100644
--- a/java/org/apache/catalina/startup/ClassLoaderFactory.java
+++ b/java/org/apache/catalina/startup/ClassLoaderFactory.java
@@ -296,7 +296,7 @@ public final class ClassLoaderFactory {
         // the URL will be used as is. It is therefore necessary to ensure that
         // the sequence "!/" is not present in a class loader URL.
         String result = urlString.replaceAll("!/", "%21/");
-        return (new URI(result)).toURL();
+        return new URI(result).toURL();
     }
 
 
@@ -304,7 +304,7 @@ public final class ClassLoaderFactory {
         // Could be a directory or a file
         String fileUrlString = file.toURI().toString();
         fileUrlString = fileUrlString.replaceAll("!/", "%21/");
-        return (new URI(fileUrlString)).toURL();
+        return new URI(fileUrlString).toURL();
     }
 
 

==================================================
Compiler.java
index 48d1d366e0..fc11a47b05 100644
--- a/java/org/apache/catalina/webresources/JarResourceRoot.java
+++ b/java/org/apache/catalina/webresources/JarResourceRoot.java
@@ -126,7 +126,7 @@ public class JarResourceRoot extends AbstractResource {
     public URL getURL() {
         String url = baseUrl + "!/";
         try {
-            return (new URI(url)).toURL();
+            return new URI(url).toURL();
         } catch (MalformedURLException | URISyntaxException e) {
             if (log.isDebugEnabled()) {
                 log.debug(sm.getString("fileResource.getUrlFail", url), e);
@@ -138,7 +138,7 @@ public class JarResourceRoot extends AbstractResource {
     @Override
     public URL getCodeBase() {
         try {
-            return (new URI(baseUrl)).toURL();
+            return new URI(baseUrl).toURL();
         } catch (MalformedURLException | URISyntaxException e) {
             if (getLog().isDebugEnabled()) {
                 getLog().debug(sm.getString("fileResource.getUrlFail", baseUrl), e);

==================================================
TagLibraryInfoImpl.java
index b38edae2be..6dca35c4a3 100644
--- a/java/org/apache/jasper/compiler/Compiler.java
+++ b/java/org/apache/jasper/compiler/Compiler.java
@@ -23,6 +23,7 @@ import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
 import java.io.UnsupportedEncodingException;
 import java.net.JarURLConnection;
+import java.net.URI;
 import java.net.URL;
 import java.net.URLConnection;
 import java.util.Map;
@@ -520,12 +521,12 @@ public abstract class Compiler {
                     // Assume we constructed this correctly
                     int entryStart = key.lastIndexOf("!/");
                     String entry = key.substring(entryStart + 2);
-                    try (Jar jar = JarFactory.newInstance(new URL(key.substring(4, entryStart)))) {
+                    try (Jar jar = JarFactory.newInstance(new URI(key.substring(4, entryStart)).toURL())) {
                         includeLastModified = jar.getLastModified(entry);
                     }
                 } else {
                     if (key.startsWith("jar:") || key.startsWith("file:")) {
-                        includeUrl = new URL(key);
+                        includeUrl = new URI(key).toURL();
                     } else {
                         includeUrl = ctxt.getResource(include.getKey());
                     }

==================================================
JspCServletContext.java
index d481e0d454..efdce96b05 100644
--- a/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java
+++ b/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java
@@ -255,7 +255,7 @@ class TagLibraryInfoImpl extends TagLibraryInfo implements TagConstants {
             try {
                 // Can't use RequestUtils.normalize since that package is not
                 // available to Jasper.
-                uri = (new URI(uri)).normalize().toString();
+                uri = new URI(uri).normalize().toString();
                 if (uri.startsWith("../")) {
                     // Trying to go outside context root
                     err.jspError("jsp.error.taglibDirective.uriInvalid", uri);

==================================================
TldPreScanned.java
index 3cb4e1de5c..36301beec0 100644
--- a/java/org/apache/jasper/servlet/JspCServletContext.java
+++ b/java/org/apache/jasper/servlet/JspCServletContext.java
@@ -21,6 +21,8 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.PrintWriter;
 import java.net.MalformedURLException;
+import java.net.URI;
+import java.net.URISyntaxException;
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -385,8 +387,12 @@ public class JspCServletContext implements ServletContext {
         // Strip leading '/'
         path = path.substring(1);
 
-        URL url = new URL(myResourceBaseURL, path);
-        try (InputStream is = url.openStream()) {
+        URL url = null;
+        try {
+            URI uri = new URI(myResourceBaseURL.toExternalForm() + path);
+            url = uri.toURL();
+            try (InputStream is = url.openStream()) {
+            }
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
             url = null;
@@ -399,9 +405,9 @@ public class JspCServletContext implements ServletContext {
             for (URL jarUrl : resourceJARs) {
                 try (Jar jar = JarFactory.newInstance(jarUrl)) {
                     if (jar.exists(jarPath)) {
-                        return new URL(jar.getURL(jarPath));
+                        return new URI(jar.getURL(jarPath)).toURL();
                     }
-                } catch (IOException ioe) {
+                } catch (IOException | URISyntaxException ioe) {
                     // Ignore
                 }
             }

==================================================
