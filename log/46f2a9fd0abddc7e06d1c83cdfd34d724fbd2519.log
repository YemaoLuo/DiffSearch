46f2a9fd0abddc7e06d1c83cdfd34d724fbd2519
==================================================
Refactoring (with an eye on 57708)
==================================================
Mark Thomas
==================================================
Tue Mar 17 14:20:59 2015 +0000
==================================================
AuthenticatorBase.java
Refactoring (with an eye on 57708)
Don't pass authentication method around unnecessarily.
Remove unnecessary ()

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1667314 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BasicAuthenticator.java
index a92abee21f..eb50c4abc4 100644
--- a/java/org/apache/catalina/authenticator/AuthenticatorBase.java
+++ b/java/org/apache/catalina/authenticator/AuthenticatorBase.java
@@ -783,22 +783,20 @@ public abstract class AuthenticatorBase extends ValveBase implements Authenticat
      * @param request The servlet request we are processing
      * @param response The servlet response we are generating
      * @param principal The authenticated Principal to be registered
-     * @param authType The authentication type to be registered
      * @param username Username used to authenticate (if any)
      * @param password Password used to authenticate (if any)
      */
-    public void register(Request request, HttpServletResponse response,
-                            Principal principal, String authType,
+    public void register(Request request, HttpServletResponse response, Principal principal,
                             String username, String password) {
 
         if (log.isDebugEnabled()) {
             String name = (principal == null) ? "none" : principal.getName();
-            log.debug("Authenticated '" + name + "' with type '" + authType +
+            log.debug("Authenticated '" + name + "' with type '" + getAuthMethod() +
                     "'");
         }
 
         // Cache the authentication information in our request
-        request.setAuthType(authType);
+        request.setAuthType(getAuthMethod());
         request.setUserPrincipal(principal);
 
         Session session = request.getSessionInternal(false);
@@ -824,7 +822,7 @@ public abstract class AuthenticatorBase extends ValveBase implements Authenticat
         // Cache the authentication information in our session, if any
         if (cache) {
             if (session != null) {
-                session.setAuthType(authType);
+                session.setAuthType(getAuthMethod());
                 session.setPrincipal(principal);
                 if (username != null) {
                     session.setNote(Constants.SESS_USERNAME_NOTE, username);
@@ -873,7 +871,7 @@ public abstract class AuthenticatorBase extends ValveBase implements Authenticat
             response.addCookie(cookie);
 
             // Register this principal with our SSO valve
-            sso.register(ssoId, principal, authType, username, password);
+            sso.register(ssoId, principal, getAuthMethod(), username, password);
             request.setNote(Constants.REQ_SSOID_NOTE, ssoId);
 
         } else {
@@ -884,7 +882,7 @@ public abstract class AuthenticatorBase extends ValveBase implements Authenticat
                 return;
             } else {
                 // Update the SSO session with the latest authentication data
-                sso.update(ssoId, principal, authType, username, password);
+                sso.update(ssoId, principal, getAuthMethod(), username, password);
             }
         }
 
@@ -905,8 +903,7 @@ public abstract class AuthenticatorBase extends ValveBase implements Authenticat
     public void login(String username, String password, Request request)
             throws ServletException {
         Principal principal = doLogin(request, username, password);
-        register(request, request.getResponse(), principal,
-                    getAuthMethod(), username, password);
+        register(request, request.getResponse(), principal, username, password);
     }
 
     protected abstract String getAuthMethod();
@@ -931,9 +928,7 @@ public abstract class AuthenticatorBase extends ValveBase implements Authenticat
 
     @Override
     public void logout(Request request) {
-        register(request, request.getResponse(), null,
-                null, null, null);
-
+        register(request, request.getResponse(), null, null, null);
     }
 
     /**

==================================================
DigestAuthenticator.java
index a8100ccb98..3ba55b089a 100644
--- a/java/org/apache/catalina/authenticator/BasicAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/BasicAuthenticator.java
@@ -83,9 +83,8 @@ public class BasicAuthenticator extends AuthenticatorBase {
 
                 Principal principal = context.getRealm().authenticate(username, password);
                 if (principal != null) {
-                    register(request, response, principal,
-                        HttpServletRequest.BASIC_AUTH, username, password);
-                    return (true);
+                    register(request, response, principal, username, password);
+                    return true;
                 }
             }
             catch (IllegalArgumentException iae) {
@@ -102,7 +101,7 @@ public class BasicAuthenticator extends AuthenticatorBase {
         value.append('\"');
         response.setHeader(AUTH_HEADER_NAME, value.toString());
         response.sendError(HttpServletResponse.SC_UNAUTHORIZED);
-        return (false);
+        return false;
 
     }
 

==================================================
FormAuthenticator.java
index 1b62024233..b43729f37a 100644
--- a/java/org/apache/catalina/authenticator/DigestAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/DigestAuthenticator.java
@@ -221,9 +221,7 @@ public class DigestAuthenticator extends AuthenticatorBase {
                 }
 
                 if (principal != null && !digestInfo.isNonceStale()) {
-                    register(request, response, principal,
-                            HttpServletRequest.DIGEST_AUTH,
-                            digestInfo.getUsername(), null);
+                    register(request, response, principal, digestInfo.getUsername(), null);
                     return true;
                 }
             }

==================================================
SSLAuthenticator.java
index 9bfac7eae4..482c733559 100644
--- a/java/org/apache/catalina/authenticator/FormAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/FormAuthenticator.java
@@ -161,9 +161,7 @@ public class FormAuthenticator
                 if (principal != null) {
                     session.setNote(Constants.FORM_PRINCIPAL_NOTE, principal);
                     if (!matchRequest(request)) {
-                        register(request, response, principal,
-                                HttpServletRequest.FORM_AUTH,
-                                username, password);
+                        register(request, response, principal, username, password);
                         return true;
                     }
                 }
@@ -184,7 +182,7 @@ public class FormAuthenticator
             }
             principal = (Principal)
                 session.getNote(Constants.FORM_PRINCIPAL_NOTE);
-            register(request, response, principal, HttpServletRequest.FORM_AUTH,
+            register(request, response, principal,
                      (String) session.getNote(Constants.SESS_USERNAME_NOTE),
                      (String) session.getNote(Constants.SESS_PASSWORD_NOTE));
             // If we're caching principals we no longer need the username

==================================================
SpnegoAuthenticator.java
index 2d184bbb8f..5e1514fe84 100644
--- a/java/org/apache/catalina/authenticator/SSLAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/SSLAuthenticator.java
@@ -85,13 +85,12 @@ public class SSLAuthenticator extends AuthenticatorBase {
             }
             response.sendError(HttpServletResponse.SC_UNAUTHORIZED,
                                sm.getString("authenticator.unauthorized"));
-            return (false);
+            return false;
         }
 
         // Cache the principal (if requested) and record this authentication
-        register(request, response, principal,
-                HttpServletRequest.CLIENT_CERT_AUTH, null, null);
-        return (true);
+        register(request, response, principal, null, null);
+        return true;
 
     }
 

==================================================
