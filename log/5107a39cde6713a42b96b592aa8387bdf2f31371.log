5107a39cde6713a42b96b592aa8387bdf2f31371
==================================================
Further work on https://bz.apache.org/bugzilla/show_bug.cgi?id=57136
==================================================
Mark Thomas
==================================================
Thu Nov 5 19:55:00 2015 +0000
==================================================
EmbeddedServletOptions.java
Further work on https://bz.apache.org/bugzilla/show_bug.cgi?id=57136
Add a configuration option that allows EL expressions in attribute values to use JSP attribute quoting or not. The default (and specification compliant behaviour) is not to.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1712859 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JspC.java
index c48899a8cd..65940ff2f2 100644
--- a/java/org/apache/jasper/EmbeddedServletOptions.java
+++ b/java/org/apache/jasper/EmbeddedServletOptions.java
@@ -205,6 +205,8 @@ public final class EmbeddedServletOptions implements Options {
      */
     private boolean strictQuoteEscaping = true;
 
+    private boolean quoteAttributeEL = false;
+
     public String getProperty(String name ) {
         return settings.getProperty( name );
     }
@@ -215,6 +217,15 @@ public final class EmbeddedServletOptions implements Options {
         }
     }
 
+    public void setQuoteAttributeEL(boolean b) {
+        this.quoteAttributeEL = b;
+    }
+
+    @Override
+    public boolean getQuoteAttributeEL() {
+        return quoteAttributeEL;
+    }
+
     /**
      * Are we keeping generated code around?
      */
@@ -765,6 +776,18 @@ public final class EmbeddedServletOptions implements Options {
             }
         }
 
+        String quoteAttributeEL = config.getInitParameter("quoteAttributeEL");
+        if (quoteAttributeEL != null) {
+            if (quoteAttributeEL.equalsIgnoreCase("true")) {
+                this.quoteAttributeEL = true;
+            } else if (quoteAttributeEL.equalsIgnoreCase("false")) {
+                this.quoteAttributeEL = false;
+            } else {
+                if (log.isWarnEnabled()) {
+                    log.warn(Localizer.getMessage("jsp.warning.quoteAttributeEL"));
+                }
+            }
+        }
 
         // Setup the global Tag Libraries location cache for this
         // web-application.

==================================================
Options.java
index bf5d5fcd11..d4cf663c6f 100644
--- a/java/org/apache/jasper/JspC.java
+++ b/java/org/apache/jasper/JspC.java
@@ -137,6 +137,7 @@ public class JspC extends Task implements Options {
     protected static final String SWITCH_VALIDATE_XML = "-validateXml";
     protected static final String SWITCH_NO_BLOCK_EXTERNAL = "-no-blockExternal";
     protected static final String SWITCH_NO_STRICT_QUOTE_ESCAPING = "-no-strictQuoteEscaping";
+    protected static final String SWITCH_QUOTE_ATTRIBUTE_EL = "-quoteAttributeEL";
     protected static final String SHOW_SUCCESS ="-s";
     protected static final String LIST_ERRORS = "-l";
     protected static final int INC_WEBXML = 10;
@@ -171,6 +172,7 @@ public class JspC extends Task implements Options {
     protected boolean validateXml;
     protected boolean blockExternal = true;
     protected boolean strictQuoteEscaping = true;
+    protected boolean quoteAttributeEL = false;
     protected boolean xpoweredBy;
     protected boolean mappedFile = false;
     protected boolean poolingEnabled = true;
@@ -387,6 +389,8 @@ public class JspC extends Task implements Options {
                 setBlockExternal(false);
             } else if (tok.equals(SWITCH_NO_STRICT_QUOTE_ESCAPING)) {
                 setStrictQuoteEscaping(false);
+            } else if (tok.equals(SWITCH_QUOTE_ATTRIBUTE_EL)) {
+                setQuoteAttributeEL(true);
             } else {
                 if (tok.startsWith("-")) {
                     throw new JasperException("Unrecognized option: " + tok +
@@ -903,6 +907,15 @@ public class JspC extends Task implements Options {
         return strictQuoteEscaping;
     }
 
+    public void setQuoteAttributeEL(boolean b) {
+        quoteAttributeEL = b;
+    }
+
+    @Override
+    public boolean getQuoteAttributeEL() {
+        return quoteAttributeEL;
+    }
+
     public void setListErrors( boolean b ) {
         listErrors = b;
     }

==================================================
AttributeParser.java
index 298fcaabd8..fc9564a22f 100644
--- a/java/org/apache/jasper/Options.java
+++ b/java/org/apache/jasper/Options.java
@@ -237,4 +237,10 @@ public interface Options {
      *         the JSP specification should be applied to scriplet expression.
      */
     public boolean getStrictQuoteEscaping();
+
+    /**
+     * @return {@code true} if EL expressions used within attributes should have
+     *         the quoting rules in JSP.1.6 applied to the expression.
+     */
+    public boolean getQuoteAttributeEL();
 }

==================================================
Parser.java
index fbfa439ee9..dfcc2fe087 100644
--- a/java/org/apache/jasper/compiler/AttributeParser.java
+++ b/java/org/apache/jasper/compiler/AttributeParser.java
@@ -41,15 +41,16 @@ public class AttributeParser {
      *                      Are deferred expressions treated as literals?
      * @param strict        Should the rules of JSP.1.6 for escpaing quotes be
      *                      strictly applied?
+     * @param quoteAttributeEL
      * @return              An unquoted JSP attribute that, if it contains
      *                      expression language can be safely passed to the EL
      *                      processor without fear of ambiguity.
      */
     public static String getUnquoted(String input, char quote,
             boolean isELIgnored, boolean isDeferredSyntaxAllowedAsLiteral,
-            boolean strict) {
+            boolean strict, boolean quoteAttributeEL) {
         return (new AttributeParser(input, quote, isELIgnored,
-                isDeferredSyntaxAllowedAsLiteral, strict)).getUnquoted();
+                isDeferredSyntaxAllowedAsLiteral, strict, quoteAttributeEL)).getUnquoted();
     }
 
     /* The quoted input string. */
@@ -70,6 +71,8 @@ public class AttributeParser {
      */
     private final boolean strict;
 
+    private final boolean quoteAttributeEL;
+
     /* The type ($ or #) of expression. Literals have a type of null. */
     private final char type;
 
@@ -94,13 +97,14 @@ public class AttributeParser {
      */
     private AttributeParser(String input, char quote,
             boolean isELIgnored, boolean isDeferredSyntaxAllowedAsLiteral,
-            boolean strict) {
+            boolean strict, boolean quoteAttributeEL) {
         this.input = input;
         this.quote = quote;
         this.isELIgnored = isELIgnored;
         this.isDeferredSyntaxAllowedAsLiteral =
             isDeferredSyntaxAllowedAsLiteral;
         this.strict = strict;
+        this.quoteAttributeEL = quoteAttributeEL;
         this.type = getType(input);
         this.size = input.length();
         result = new StringBuilder(size);
@@ -189,7 +193,12 @@ public class AttributeParser {
         boolean insideLiteral = false;
         char literalQuote = 0;
         while (i < size && !endEL) {
-            char ch = input.charAt(i++);
+            char ch;
+            if (quoteAttributeEL) {
+                ch = nextChar();
+            } else {
+                ch = input.charAt(i++);
+            }
             if (ch == '\'' || ch == '\"') {
                 if (insideLiteral) {
                     if (literalQuote == ch) {
@@ -203,7 +212,11 @@ public class AttributeParser {
             } else if (ch == '\\') {
                 result.append(ch);
                 if (insideLiteral && size < i) {
-                    ch = input.charAt(i++);
+                    if (quoteAttributeEL) {
+                        ch = nextChar();
+                    } else {
+                        ch = input.charAt(i++);
+                    }
                     result.append(ch);
                 }
             } else if (ch == '}') {

==================================================
TestELInJsp.java
index ff1d18bc95..6a3bbf73f8 100644
--- a/java/org/apache/jasper/compiler/Parser.java
+++ b/java/org/apache/jasper/compiler/Parser.java
@@ -264,8 +264,11 @@ class Parser implements TagConstants {
      * ('%>"' | TRANSLATION_ERROR)
      */
     private String parseAttributeValue(String qName, String watch, boolean ignoreEL) throws JasperException {
+        boolean quoteAttributeEL = ctxt.getOptions().getQuoteAttributeEL();
         Mark start = reader.mark();
-        Mark stop = reader.skipUntilIgnoreEsc(watch, ignoreEL);
+        // In terms of finding the end of the value, quoting EL is equivalent to
+        // ignoring it.
+        Mark stop = reader.skipUntilIgnoreEsc(watch, ignoreEL || quoteAttributeEL);
         if (stop == null) {
             err.jspError(start, "jsp.error.attribute.unterminated", qName);
         }
@@ -282,7 +285,8 @@ class Parser implements TagConstants {
             ret = AttributeParser.getUnquoted(reader.getText(start, stop),
                     quote, isElIgnored,
                     pageInfo.isDeferredSyntaxAllowedAsLiteral(),
-                    ctxt.getOptions().getStrictQuoteEscaping());
+                    ctxt.getOptions().getStrictQuoteEscaping(),
+                    quoteAttributeEL);
         } catch (IllegalArgumentException iae) {
             err.jspError(start, iae.getMessage());
         }

==================================================
TestAttributeParser.java
index 5be9246bbf..792c5e7571 100644
--- a/test/org/apache/el/TestELInJsp.java
+++ b/test/org/apache/el/TestELInJsp.java
@@ -16,6 +16,7 @@
  */
 package org.apache.el;
 
+import java.io.File;
 import java.math.BigDecimal;
 import java.util.Collections;
 
@@ -24,7 +25,11 @@ import javax.servlet.DispatcherType;
 import org.junit.Assert;
 import org.junit.Test;
 
+import org.apache.catalina.Wrapper;
+import org.apache.catalina.core.StandardContext;
+import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.jasper.servlet.JasperInitializer;
 import org.apache.tomcat.util.buf.ByteChunk;
 
 /**
@@ -289,10 +294,43 @@ public class TestELInJsp extends TomcatBaseTest {
     }
 
     @Test
-    public void testELMisc() throws Exception {
-        getTomcatInstanceTestWebapp(false, true);
+    public void testELMiscNoQuoteAttributeEL() throws Exception {
+        doTestELMisc(false);
+    }
+
+    @Test
+    public void testELMiscWithQuoteAttributeEL() throws Exception {
+        doTestELMisc(true);
+    }
+
+    private void doTestELMisc(boolean quoteAttributeEL) throws Exception {
+        Tomcat tomcat = getTomcatInstance();
+
+        // Create the context (don't use addWebapp as we want to modify the
+        // JSP Servlet settings).
+        File appDir = new File("test/webapp");
+        StandardContext ctxt = (StandardContext) tomcat.addContext(
+                null, "/test", appDir.getAbsolutePath());
+
+        ctxt.addServletContainerInitializer(new JasperInitializer(), null);
+
+        // Configure the defaults and then tweak the JSP servlet settings
+        // Note: Min value for maxLoadedJsps is 2
+        Tomcat.initWebappDefaults(ctxt);
+        Wrapper w = (Wrapper) ctxt.findChild("jsp");
+
+        String jspName;
+        if (quoteAttributeEL) {
+            jspName = "/test/el-misc-with-quote-attribute-el.jsp";
+            w.addInitParameter("quoteAttributeEL", "true");
+        } else {
+            jspName = "/test/el-misc-no-quote-attribute-el.jsp";
+            w.addInitParameter("quoteAttributeEL", "false");
+        }
+
+        tomcat.start();
 
-        ByteChunk res = getUrl("http://localhost:" + getPort() + "/test/el-misc.jsp");
+        ByteChunk res = getUrl("http://localhost:" + getPort() + jspName);
         String result = res.toString();
 
         assertEcho(result, "00-\\\\\\\"${'hello world'}");

==================================================
