83cab6d624be4618cdbc2fa01d68470e35c15dac
==================================================
Refactoring towards a fix for BZ 59823
==================================================
Mark Thomas
==================================================
Thu Aug 4 13:24:20 2016 +0000
==================================================
AuthenticatorBase.java
Refactoring towards a fix for BZ 59823
Move the authenticate() implementation to the base class so JASPIC
processing can be included

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1755180 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BasicAuthenticator.java
index 83f8144b15..72093cf0f4 100644
--- a/java/org/apache/catalina/authenticator/AuthenticatorBase.java
+++ b/java/org/apache/catalina/authenticator/AuthenticatorBase.java
@@ -641,8 +641,33 @@ public abstract class AuthenticatorBase extends ValveBase
         }
     }
 
+
+    @Override
+    public boolean authenticate(Request request, HttpServletResponse response) throws IOException {
+        return doAuthenticate(request, response);
+    }
+
+
     // ------------------------------------------------------ Protected Methods
 
+    /**
+     * Provided for sub-classes to implement their specific authentication
+     * mechanism.
+     *
+     * @param request The request that triggered the authentication
+     * @param resonse The response associated with the request
+     *
+     * @return {@code true} if the the user was authenticated, otherwise {@code
+     *         false}, in which case an authentication challenge will have been
+     *         written to the response
+     *
+     * @throws IOException If an I/O problem occurred during the authentication
+     *                     process
+     */
+    protected abstract boolean doAuthenticate(Request request, HttpServletResponse resonse)
+            throws IOException;
+
+
     /**
      * Look for the X509 certificate chain in the Request under the key
      * <code>javax.servlet.request.X509Certificate</code>. If not found, trigger

==================================================
DigestAuthenticator.java
index f77dfa8d49..1a5742a9ad 100644
--- a/java/org/apache/catalina/authenticator/BasicAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/BasicAuthenticator.java
@@ -48,19 +48,8 @@ public class BasicAuthenticator extends AuthenticatorBase {
 
     // --------------------------------------------------------- Public Methods
 
-    /**
-     * Authenticate the user making this request, based on the specified
-     * login configuration.  Return <code>true</code> if any specified
-     * constraint has been satisfied, or <code>false</code> if we have
-     * created a response challenge already.
-     *
-     * @param request Request we are processing
-     * @param response Response we are creating
-     *
-     * @exception IOException if an input/output error occurs
-     */
     @Override
-    public boolean authenticate(Request request, HttpServletResponse response)
+    protected boolean doAuthenticate(Request request, HttpServletResponse response)
             throws IOException {
 
         if (checkForCachedAuthentication(request, response, true)) {

==================================================
FormAuthenticator.java
index a8c4c27ebc..8a1e8b3fcf 100644
--- a/java/org/apache/catalina/authenticator/DigestAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/DigestAuthenticator.java
@@ -194,7 +194,7 @@ public class DigestAuthenticator extends AuthenticatorBase {
      * @exception IOException if an input/output error occurs
      */
     @Override
-    public boolean authenticate(Request request, HttpServletResponse response)
+    protected boolean doAuthenticate(Request request, HttpServletResponse response)
             throws IOException {
 
         // NOTE: We don't try to reauthenticate using any existing SSO session,

==================================================
NonLoginAuthenticator.java
index 2f2429b9fc..d2ce061e8e 100644
--- a/java/org/apache/catalina/authenticator/FormAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/FormAuthenticator.java
@@ -130,7 +130,7 @@ public class FormAuthenticator
      * @exception IOException if an input/output error occurs
      */
     @Override
-    public boolean authenticate(Request request, HttpServletResponse response)
+    protected boolean doAuthenticate(Request request, HttpServletResponse response)
             throws IOException {
 
         if (checkForCachedAuthentication(request, response, true)) {

==================================================
SSLAuthenticator.java
index 3018fff50b..dfdcee0b12 100644
--- a/java/org/apache/catalina/authenticator/NonLoginAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/NonLoginAuthenticator.java
@@ -74,7 +74,7 @@ public final class NonLoginAuthenticator extends AuthenticatorBase {
      * @exception IOException if an input/output error occurs
      */
     @Override
-    public boolean authenticate(Request request, HttpServletResponse response)
+    protected boolean doAuthenticate(Request request, HttpServletResponse response)
         throws IOException {
 
         // Don't try and use SSO to authenticate since there is no auth

==================================================
SpnegoAuthenticator.java
index 22368706cf..10a03cf64c 100644
--- a/java/org/apache/catalina/authenticator/SSLAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/SSLAuthenticator.java
@@ -46,7 +46,7 @@ public class SSLAuthenticator extends AuthenticatorBase {
      * @exception IOException if an input/output error occurs
      */
     @Override
-    public boolean authenticate(Request request, HttpServletResponse response)
+    protected boolean doAuthenticate(Request request, HttpServletResponse response)
             throws IOException {
 
         // NOTE: We don't try to reauthenticate using any existing SSO session,

==================================================
