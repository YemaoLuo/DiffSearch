4eb13707282b00d64766bb7da0c1ddf3e92fee41
==================================================
When using the fair queue, use a much more efficient idle connection handling by using a FILO queue
==================================================
Filip Hanik
==================================================
Wed Apr 15 05:44:43 2009 +0000
==================================================
ConnectionPool.java
When using the fair queue, use a much more efficient idle connection handling by using a FILO queue
so that connections are reused properly


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@765054 13f79535-47bb-0310-9956-ffa450edef68



==================================================
FairBlockingQueue.java
index dbb7471401..2cea90d2b6 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -630,7 +630,7 @@ public class ConnectionPool {
                             con.validate(PooledConnection.VALIDATE_RETURN)) {
                         con.setStackTrace(null);
                         con.setTimestamp(System.currentTimeMillis());
-                        if ((idle.size()>=poolProperties.getMaxIdle()) || (!idle.offer(con))) {
+                        if (((idle.size()>=poolProperties.getMaxIdle()) && !poolProperties.isPoolSweeperEnabled()) || (!idle.offer(con))) {
                             if (log.isDebugEnabled()) {
                                 log.debug("Connection ["+con+"] will be closed and not returned to the pool, idle["+idle.size()+"]>=maxIdle["+poolProperties.getMaxIdle()+"] idle.offer failed.");
                             }
@@ -920,7 +920,7 @@ public class ConnectionPool {
                     try {
                         if (pool.getPoolProperties().isRemoveAbandoned())
                             pool.checkAbandoned();
-                        if (pool.getPoolProperties().getMaxIdle()<pool.idle.size())
+                        if (pool.getPoolProperties().getMinIdle()<pool.idle.size())
                             pool.checkIdle();
                         if (pool.getPoolProperties().isTestWhileIdle())
                             pool.testAllIdle();

==================================================
PoolProperties.java
index 636bddca7e..67f83e5f36 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java
@@ -63,7 +63,7 @@ public class FairBlockingQueue<E> implements BlockingQueue<E> {
                 c = waiters.poll();
                 c.setItem(e);
             } else {
-                items.add(e);
+                items.addFirst(e);
             }
         } finally {
             lock.unlock();

==================================================
ConnectionPool.java
index 4e46675181..c16f7a834d 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
@@ -45,7 +45,7 @@ public class PoolProperties {
     protected String connectionProperties;
     protected int initialSize = 10;
     protected int maxActive = 100;
-    protected int maxIdle = maxActive;
+    protected int maxIdle = Integer.MAX_VALUE;
     protected int minIdle = initialSize;
     protected int maxWait = 30000;
     protected String validationQuery;

==================================================
