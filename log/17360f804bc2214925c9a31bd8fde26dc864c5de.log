17360f804bc2214925c9a31bd8fde26dc864c5de
==================================================
Relax the restriction added in r1644989. Expand the unit tests.
==================================================
Mark Thomas
==================================================
Tue Feb 24 09:11:01 2015 +0000
==================================================
ApplicationContext.java
Relax the restriction added in r1644989. Expand the unit tests.
While the Javadoc for getContext(String) could be clearer, the intended behaviour appears to mapping rather than an exact match because:
- there is no way with an excat match to obtain the ROOT context
- "Returns a ServletContext object that corresponds to a specified URL on the server."

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1661867 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestApplicationContext.java
index 778f27a13a..97c2bfcbe0 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -248,8 +248,9 @@ public class ApplicationContext
     public ServletContext getContext(String uri) {
 
         // Validate the format of the specified argument
-        if ((uri == null) || (!uri.startsWith("/")))
-            return (null);
+        if (uri == null || !uri.startsWith("/")) {
+            return null;
+        }
 
         Context child = null;
         try {
@@ -280,12 +281,7 @@ public class ApplicationContext
 
                 MappingData mappingData = new MappingData();
                 ((Engine) host.getParent()).getService().getMapper().map(hostMB, pathMB, null, mappingData);
-
-                // Must be an exact match. It is no good returning the ROOT
-                // context if the caller is looking for "/something-else"
-                if (mappingData.context.getPath().equals(uri)) {
-                    child = mappingData.context;
-                }
+                child = mappingData.context;
             }
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);

==================================================
