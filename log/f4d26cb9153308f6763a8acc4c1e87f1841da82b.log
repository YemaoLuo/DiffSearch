f4d26cb9153308f6763a8acc4c1e87f1841da82b
==================================================
Javadocs fix: @returns -> @return.
==================================================
Rainer Jung
==================================================
Mon Aug 2 12:52:11 2010 +0000
==================================================
FilterConfig.java
Javadocs fix: @returns -> @return.


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@981490 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ApplicationContext.java
index 89b55beef1..79fffd2203 100644
--- a/java/javax/servlet/FilterConfig.java
+++ b/java/javax/servlet/FilterConfig.java
@@ -39,8 +39,8 @@ public interface FilterConfig {
      * Returns a reference to the {@link ServletContext} in which the caller is
      * executing.
      * 
-     * @returns {@link ServletContext} object, used by the caller to interact
-     *          with its servlet container
+     * @return {@link ServletContext} object, used by the caller to interact
+     *         with its servlet container
      * 
      * @seeServletContext
      */
@@ -55,8 +55,8 @@ public interface FilterConfig {
      *            <code>String</code> specifying the name of the initialization
      *            parameter
      * 
-     * @returns <code>String</code> containing the value of the initialization
-     *          parameter
+     * @return <code>String</code> containing the value of the initialization
+     *         parameter
      */
     public String getInitParameter(String name);
 
@@ -65,8 +65,8 @@ public interface FilterConfig {
      * <code>Enumeration</code> of <code>String</code> objects, or an empty
      * <code>Enumeration</code> if the filter has no initialization parameters.
      * 
-     * @returns <code>Enumeration</code> of <code>String</code> objects
-     *          containing the names of the filter's initialization parameters
+     * @return <code>Enumeration</code> of <code>String</code> objects
+     *         containing the names of the filter's initialization parameters
      */
     public Enumeration<String> getInitParameterNames();
 

==================================================
JmxRemoteLifecycleListener.java
index aa662d5dcb..fde811e553 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -863,7 +863,7 @@ public class ApplicationContext
      * Add filter to context.
      * @param   filterName  Name of filter to add
      * @param   filterClass Name of filter class
-     * @returns <code>null</code> if the filter has already been fully defined,
+     * @return  <code>null</code> if the filter has already been fully defined,
      *          else a {@link FilterRegistration.Dynamic} object that can be
      *          used to further configure the filter
      * @throws IllegalStateException if the context has already been initialised
@@ -883,7 +883,7 @@ public class ApplicationContext
      * Add filter to context.
      * @param   filterName  Name of filter to add
      * @param   filter      Filter to add
-     * @returns <code>null</code> if the filter has already been fully defined,
+     * @return  <code>null</code> if the filter has already been fully defined,
      *          else a {@link FilterRegistration.Dynamic} object that can be
      *          used to further configure the filter
      * @throws IllegalStateException if the context has already been initialised
@@ -903,7 +903,7 @@ public class ApplicationContext
      * Add filter to context.
      * @param   filterName  Name of filter to add
      * @param   filterClass Class of filter to add
-     * @returns <code>null</code> if the filter has already been fully defined,
+     * @return  <code>null</code> if the filter has already been fully defined,
      *          else a {@link FilterRegistration.Dynamic} object that can be
      *          used to further configure the filter
      * @throws IllegalStateException if the context has already been initialised
@@ -992,7 +992,7 @@ public class ApplicationContext
      * Add servlet to context.
      * @param   servletName  Name of servlet to add
      * @param   servletClass Name of servlet class
-     * @returns <code>null</code> if the servlet has already been fully defined,
+     * @return  <code>null</code> if the servlet has already been fully defined,
      *          else a {@link ServletRegistration.Dynamic} object that can be
      *          used to further configure the servlet
      * @throws IllegalStateException if the context has already been initialised
@@ -1012,7 +1012,7 @@ public class ApplicationContext
      * Add servlet to context.
      * @param   servletName Name of servlet to add
      * @param   servlet     Servlet instance to add
-     * @returns <code>null</code> if the servlet has already been fully defined,
+     * @return  <code>null</code> if the servlet has already been fully defined,
      *          else a {@link ServletRegistration.Dynamic} object that can be
      *          used to further configure the servlet
      * @throws IllegalStateException if the context has already been initialised
@@ -1032,7 +1032,7 @@ public class ApplicationContext
      * Add servlet to context.
      * @param   servletName  Name of servlet to add
      * @param   servletClass Class of servlet to add
-     * @returns <code>null</code> if the servlet has already been fully defined,
+     * @return  <code>null</code> if the servlet has already been fully defined,
      *          else a {@link ServletRegistration.Dynamic} object that can be
      *          used to further configure the servlet
      * @throws IllegalStateException if the context has already been initialised

==================================================
XMLEncodingDetector.java
index 61a7c79a4f..43328796a4 100644
--- a/java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java
+++ b/java/org/apache/catalina/mbeans/JmxRemoteLifecycleListener.java
@@ -77,7 +77,7 @@ public class JmxRemoteLifecycleListener implements LifecycleListener {
     /**
      * Get the port on which the Platform RMI server is exported. This is the
      * port that is normally chosen by the RMI stack.
-     * @returns The port number
+     * @return The port number
      */
     public int getRmiServerPortPlatform() {
         return rmiServerPortPlatform;
@@ -94,7 +94,7 @@ public class JmxRemoteLifecycleListener implements LifecycleListener {
     
     /**
      * Get the port on which the Platform RMI registry is exported.
-     * @returns The port number
+     * @return The port number
      */
     public int getRmiRegistryPortPlatform() {
         return rmiRegistryPortPlatform;
@@ -112,7 +112,7 @@ public class JmxRemoteLifecycleListener implements LifecycleListener {
      * Get the flag that indicates that local ports should be used for all
      * connections. If using SSH tunnels, or similar, this should be set to
      * true to ensure the RMI client uses the tunnel.
-     * @returns <code>true</code> if local ports should be used
+     * @return <code>true</code> if local ports should be used
      */
     public boolean getUseLocalPorts() {
         return useLocalPorts;

==================================================
