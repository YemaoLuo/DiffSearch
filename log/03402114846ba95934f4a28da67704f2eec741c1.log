03402114846ba95934f4a28da67704f2eec741c1
==================================================
Fix spdy stream closing / removing from channels
==================================================
Costin Manolache
==================================================
Wed Mar 14 04:37:44 2012 +0000
==================================================
SpdyConnection.java
Fix spdy stream closing / removing from channels
Fix/simplify draining.
Use the java6 compression by default - not only avoids jzlib depenency, but it's also 20..30% faster.
Refactor creation of sockets to allow Jetty-style java7 NPN.



git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1300461 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SpdyContext.java
index 51ab86efba..9d064a7e58 100644
--- a/java/org/apache/tomcat/spdy/SpdyConnection.java
+++ b/java/org/apache/tomcat/spdy/SpdyConnection.java
@@ -138,18 +138,19 @@ public abstract class SpdyConnection { // implements Runnable {
      */
     SpdyFrame out;
 
-    boolean draining = false;
-
     private int goAway = Integer.MAX_VALUE;
 
     public SpdyConnection(SpdyContext spdyContext) {
         this.spdyContext = spdyContext;
         outCondition = framerLock.newCondition();
+        if (spdyContext.compression) {
+            setCompressSupport(new CompressDeflater6());
+        }
     }
 
     @Override
     public String toString() {
-        return "SpdyCon open=" + channels.size();
+        return "SpdyCon open=" + channels.size() + " " + lastChannel;
     }
 
     public void dump(PrintWriter out) {
@@ -205,15 +206,7 @@ public abstract class SpdyConnection { // implements Runnable {
 
     public void drain() {
         synchronized (nbDrain) {
-            if (draining) {
-                return;
-            }
-            draining = true;
-        }
-
-        _drain();
-        synchronized (nbDrain) {
-            draining = false;
+            _drain();
         }
     }
 
@@ -308,9 +301,13 @@ public abstract class SpdyConnection { // implements Runnable {
                 }
 
                 synchronized (channels) {
-                    if (out.stream != null &&
-                            out.stream.finRcvd && out.stream.finSent) {
-                        channels.remove(out.streamId);
+                    if (out.stream != null) {
+                        if (out.isHalfClose()) {
+                            out.stream.finSent = true;
+                        }
+                        if (out.stream.finRcvd && out.stream.finSent) {
+                            channels.remove(out.streamId);
+                        }
                     }
                 }
                 out = null;
@@ -345,7 +342,7 @@ public abstract class SpdyConnection { // implements Runnable {
     public void send(SpdyFrame oframe, SpdyStream proc)
             throws IOException {
         queueFrame(oframe, proc, oframe.pri == 0 ? outQueue : prioriyQueue);
-        nonBlockingDrain();
+        drain();
     }
 
     private void queueFrame(SpdyFrame oframe, SpdyStream proc,

==================================================
SpdyContextJni.java
index e41d26548a..853f694eb0 100644
--- a/java/org/apache/tomcat/spdy/SpdyContext.java
+++ b/java/org/apache/tomcat/spdy/SpdyContext.java
@@ -51,8 +51,8 @@ public class SpdyContext {
 
     public static boolean debug = false;
 
-    boolean tls = true;
-    boolean compression = true;
+    protected boolean tls = true;
+    protected boolean compression = false;
 
     /**
      * Get a frame - frames are heavy buffers, may be reused.

==================================================
SpdyContextProxy.java
index d5dce62087..04f86267cb 100644
--- a/java/org/apache/tomcat/spdy/SpdyContextJni.java
+++ b/java/org/apache/tomcat/spdy/SpdyContextJni.java
@@ -30,6 +30,8 @@ public class SpdyContextJni extends SpdyContext {
     //AprSocketContext socketCtx;
 
     public SpdyContextJni() {
+        compression = true;
+        tls = true;
         con = new AprSocketContext();
         //if (insecureCerts) {
         con.customVerification(new TlsCertVerifier() {
@@ -144,10 +146,6 @@ public class SpdyContextJni extends SpdyContext {
 
         public SpdyConnectionAprSocket(SpdyContext spdyContext) {
             super(spdyContext);
-            //setCompressSupport(new CompressJzlib());
-            if (spdyContext.compression) {
-                setCompressSupport(new CompressDeflater6());
-            }
         }
 
         public void setSocket(AprSocket ch) {

==================================================
