9982079146feaea59e3af5fd96cf676b92ec1dee
==================================================
AbstractHttp11Processor is already obtaining the keep-alive timeout
==================================================
Mark Thomas
==================================================
Wed Jan 28 12:46:59 2015 +0000
==================================================
AbstractHttp11Processor.java
AbstractHttp11Processor is already obtaining the keep-alive timeout
directly from the Endpoint in some places so refactor to obtain it this
way consistently.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1655284 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractHttp11Protocol.java
index d8f1d317fc..72a0e9fb12 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -161,11 +161,6 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
      */
     protected int maxKeepAliveRequests = -1;
 
-    /**
-     * The number of seconds Tomcat will wait for a subsequent request
-     * before closing the connection.
-     */
-    protected int keepAliveTimeout = -1;
 
     /**
      * Maximum timeout on uploads. 5 minutes as in Apache HTTPD server.
@@ -427,21 +422,6 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
         return maxKeepAliveRequests;
     }
 
-    /**
-     * Set the Keep-Alive timeout.
-     */
-    public void setKeepAliveTimeout(int timeout) {
-        keepAliveTimeout = timeout;
-    }
-
-
-    /**
-     * Return the number Keep-Alive timeout.
-     */
-    public int getKeepAliveTimeout() {
-        return keepAliveTimeout;
-    }
-
 
     /**
      * Set the maximum size of a POST which will be buffered in SSL mode.

==================================================
Http11Nio2Processor.java
index fd3931d327..80ae6ed16a 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -217,7 +217,6 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     protected void configureProcessor(AbstractHttp11Processor<S> processor) {
         processor.setAdapter(getAdapter());
         processor.setMaxKeepAliveRequests(getMaxKeepAliveRequests());
-        processor.setKeepAliveTimeout(getKeepAliveTimeout());
         processor.setConnectionUploadTimeout(getConnectionUploadTimeout());
         processor.setDisableUploadTimeout(getDisableUploadTimeout());
         processor.setCompressionMinSize(getCompressionMinSize());

==================================================
Http11NioProcessor.java
index 8935d7ae1f..dc25f39b8c 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Processor.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Processor.java
@@ -81,13 +81,12 @@ public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
     protected void resetTimeouts() {
         if (!getErrorState().isError() && socketWrapper != null &&
                 asyncStateMachine.isAsyncDispatching()) {
-            long soTimeout = endpoint.getSoTimeout();
 
-            //reset the timeout
+            // Reset the timeout
             if (keepAlive) {
-                socketWrapper.setTimeout(keepAliveTimeout);
+                socketWrapper.setTimeout(endpoint.getKeepAliveTimeout());
             } else {
-                socketWrapper.setTimeout(soTimeout);
+                socketWrapper.setTimeout(endpoint.getSoTimeout());
             }
         }
     }

==================================================
