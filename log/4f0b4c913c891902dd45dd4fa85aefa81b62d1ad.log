4f0b4c913c891902dd45dd4fa85aefa81b62d1ad
==================================================
Add plumbing to support lookup-name. It is still ultimately a NO-OP but the contents of web.xml and annotations is now read into the right places.
==================================================
Mark Thomas
==================================================
Tue Mar 20 22:26:56 2018 +0000
==================================================
WebAnnotationSet.java
Add plumbing to support lookup-name. It is still ultimately a NO-OP but the contents of web.xml and annotations is now read into the right places.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1827363 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ResourceBase.java
index 852bda8339..b90f8500fa 100644
--- a/java/org/apache/catalina/startup/WebAnnotationSet.java
+++ b/java/org/apache/catalina/startup/WebAnnotationSet.java
@@ -334,10 +334,9 @@ public class WebAnnotationSet {
 
             resource.setName(name);
             resource.setType(type);
-
             resource.setDescription(annotation.description());
-
             resource.setValue(annotation.mappedName());
+            resource.setLookupName(annotation.lookup());
 
             context.getNamingResources().addEnvironment(resource);
 
@@ -348,9 +347,9 @@ public class WebAnnotationSet {
 
             service.setName(name);
             service.setWsdlfile(annotation.mappedName());
-
             service.setType(type);
             service.setDescription(annotation.description());
+            service.setLookupName(annotation.lookup());
 
             context.getNamingResources().addService(service);
 
@@ -379,6 +378,7 @@ public class WebAnnotationSet {
             resource.setScope(annotation.shareable() ? "Shareable" : "Unshareable");
             resource.setProperty("mappedName", annotation.mappedName());
             resource.setDescription(annotation.description());
+            resource.setLookupName(annotation.lookup());
 
             context.getNamingResources().addResource(resource);
 
@@ -390,9 +390,9 @@ public class WebAnnotationSet {
 
             resource.setName(name);
             resource.setType(type);
-
             resource.setUsage(annotation.mappedName());
             resource.setDescription(annotation.description());
+            resource.setLookupName(annotation.lookup());
 
             context.getNamingResources().addMessageDestinationRef(resource);
 
@@ -408,9 +408,9 @@ public class WebAnnotationSet {
 
             resource.setName(name);
             resource.setType(type);
-
             resource.setProperty("mappedName", annotation.mappedName());
             resource.setDescription(annotation.description());
+            resource.setLookupName(annotation.lookup());
 
             context.getNamingResources().addResourceEnvRef(resource);
         }

==================================================
WebRuleSet.java
index a97a34a4e8..eab1e9090d 100644
--- a/java/org/apache/tomcat/util/descriptor/web/ResourceBase.java
+++ b/java/org/apache/tomcat/util/descriptor/web/ResourceBase.java
@@ -80,6 +80,17 @@ public class ResourceBase implements Serializable, Injectable {
     }
 
 
+    private String lookupName = null;
+
+    public String getLookupName() {
+        return lookupName;
+    }
+
+    public void setLookupName(String lookupName) {
+        this.lookupName = lookupName;
+    }
+
+
     /**
      * Holder for our configured properties.
      */
@@ -136,14 +147,12 @@ public class ResourceBase implements Serializable, Injectable {
     public int hashCode() {
         final int prime = 31;
         int result = 1;
-        result = prime * result +
-                ((description == null) ? 0 : description.hashCode());
-        result = prime * result +
-                ((injectionTargets == null) ? 0 : injectionTargets.hashCode());
+        result = prime * result + ((description == null) ? 0 : description.hashCode());
+        result = prime * result + ((injectionTargets == null) ? 0 : injectionTargets.hashCode());
         result = prime * result + ((name == null) ? 0 : name.hashCode());
-        result = prime * result +
-                ((properties == null) ? 0 : properties.hashCode());
+        result = prime * result + ((properties == null) ? 0 : properties.hashCode());
         result = prime * result + ((type == null) ? 0 : type.hashCode());
+        result = prime * result + ((lookupName == null) ? 0 : lookupName.hashCode());
         return result;
     }
 
@@ -195,12 +204,17 @@ public class ResourceBase implements Serializable, Injectable {
         } else if (!type.equals(other.type)) {
             return false;
         }
+        if (lookupName == null) {
+            if (other.lookupName != null) {
+                return false;
+            }
+        } else if (!lookupName.equals(other.lookupName)) {
+            return false;
+        }
         return true;
     }
 
 
-    // -------------------------------------------------------- Package Methods
-
     /**
      * The NamingResources with which we are associated (if any).
      */

==================================================
WebXml.java
index 28478bf72e..5fee965b47 100644
--- a/java/org/apache/tomcat/util/descriptor/web/WebRuleSet.java
+++ b/java/org/apache/tomcat/util/descriptor/web/WebRuleSet.java
@@ -498,6 +498,7 @@ public class WebRuleSet implements RuleSet {
                                "setHome", 0);
         digester.addRule(fullPrefix + "/ejb-local-ref/mapped-name",
                          new MappedNameRule());
+        digester.addCallMethod(fullPrefix + "/ejb-local-ref/lookup-name", "setLookupName", 0);
         configureInjectionRules(digester, "web-app/ejb-local-ref/");
 
         //ejb-ref
@@ -520,6 +521,7 @@ public class WebRuleSet implements RuleSet {
                                "setRemote", 0);
         digester.addRule(fullPrefix + "/ejb-ref/mapped-name",
                          new MappedNameRule());
+        digester.addCallMethod(fullPrefix + "/ejb-ref/lookup-name", "setLookupName", 0);
         configureInjectionRules(digester, "web-app/ejb-ref/");
 
         //env-entry
@@ -539,6 +541,7 @@ public class WebRuleSet implements RuleSet {
                                "setValue", 0);
         digester.addRule(fullPrefix + "/env-entry/mapped-name",
                          new MappedNameRule());
+        digester.addCallMethod(fullPrefix + "/env-entry/lookup-name", "setLookupName", 0);
         configureInjectionRules(digester, "web-app/env-entry/");
 
         //resource-env-ref
@@ -553,6 +556,7 @@ public class WebRuleSet implements RuleSet {
                 "setType", 0);
         digester.addRule(fullPrefix + "/resource-env-ref/mapped-name",
                          new MappedNameRule());
+        digester.addCallMethod(fullPrefix + "/resource-env-ref/lookup-name", "setLookupName", 0);
         configureInjectionRules(digester, "web-app/resource-env-ref/");
 
         //message-destination
@@ -573,6 +577,7 @@ public class WebRuleSet implements RuleSet {
                                "setName", 0);
         digester.addRule(fullPrefix + "/message-destination/mapped-name",
                          new MappedNameRule());
+        digester.addCallMethod(fullPrefix + "/message-destination/lookup-name", "setLookupName", 0);
 
         //message-destination-ref
         digester.addObjectCreate(fullPrefix + "/message-destination-ref",
@@ -592,6 +597,8 @@ public class WebRuleSet implements RuleSet {
                                "setUsage", 0);
         digester.addRule(fullPrefix + "/message-destination-ref/mapped-name",
                          new MappedNameRule());
+        digester.addCallMethod(fullPrefix + "/message-destination-ref/lookup-name",
+                "setLookupName", 0);
         configureInjectionRules(digester, "web-app/message-destination-ref/");
 
         //resource-ref
@@ -612,6 +619,7 @@ public class WebRuleSet implements RuleSet {
                                "setType", 0);
         digester.addRule(fullPrefix + "/resource-ref/mapped-name",
                          new MappedNameRule());
+        digester.addCallMethod(fullPrefix + "/resource-ref/lookup-name", "setLookupName", 0);
         configureInjectionRules(digester, "web-app/resource-ref/");
 
         //service-ref
@@ -671,6 +679,7 @@ public class WebRuleSet implements RuleSet {
                                "addPortName", 0);
         digester.addRule(fullPrefix + "/service-ref/mapped-name",
                          new MappedNameRule());
+        digester.addCallMethod(fullPrefix + "/service-ref/lookup-name", "setLookupName", 0);
         configureInjectionRules(digester, "web-app/service-ref/");
     }
 

==================================================
