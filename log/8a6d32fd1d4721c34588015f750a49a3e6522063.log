8a6d32fd1d4721c34588015f750a49a3e6522063
==================================================
Explicitly restrict HTTP upgraded connections to a max of one thread for read and another for write.
==================================================
Mark Emlyn
==================================================
Mon Apr 29 11:32:58 2013 +0000
==================================================
AprEndpoint.java
Explicitly restrict HTTP upgraded connections to a max of one thread for read and another for write.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1476972 13f79535-47bb-0310-9956-ffa450edef68



==================================================
NioEndpoint.java
index 73235a9324..051726d0d3 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -2172,8 +2172,10 @@ public class AprEndpoint extends AbstractEndpoint {
             // Upgraded connections need to allow multiple threads to access the
             // connection at the same time to enable blocking IO to be used when
             // Servlet 3.1 NIO has been configured
-            if (socket.isUpgraded()) {
-                doRun();
+            if (socket.isUpgraded() && SocketStatus.OPEN_WRITE == status) {
+                synchronized (socket.getWriteThreadLock()) {
+                    doRun();
+                }
             } else {
                 synchronized (socket) {
                     doRun();

==================================================
SocketWrapper.java
index a3ace5252c..0fda374da2 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -1533,8 +1533,11 @@ public class NioEndpoint extends AbstractEndpoint {
             // Upgraded connections need to allow multiple threads to access the
             // connection at the same time to enable blocking IO to be used when
             // NIO has been configured
-            if (ka != null && ka.isUpgraded()) {
-                doRun(key, ka);
+            if (ka != null && ka.isUpgraded() &&
+                    SocketStatus.OPEN_WRITE == status) {
+                synchronized (ka.getWriteThreadLock()) {
+                    doRun(key, ka);
+                }
             } else {
                 synchronized (socket) {
                     doRun(key, ka);

==================================================
