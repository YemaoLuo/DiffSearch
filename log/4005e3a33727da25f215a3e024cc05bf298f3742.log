4005e3a33727da25f215a3e024cc05bf298f3742
==================================================
EL 3.0
==================================================
Mark Emlyn
==================================================
Wed Jul 3 21:16:40 2013 +0000
==================================================
ELManager.java
EL 3.0
Add new classes and methods

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1499561 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ExpressionFactory.java
new file mode 100644
index 0000000000..c3d60eaed7
--- /dev/null
+++ b/java/javax/el/ELManager.java
@@ -0,0 +1,90 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.el;
+
+import java.lang.reflect.Method;
+import java.util.Map;
+
+/**
+ * @since EL 3.0
+ */
+public class ELManager {
+
+    private StandardELContext context = null;
+
+    public static ExpressionFactory getExpressionFactory() {
+        return Util.getExpressionFactory();
+    }
+
+    public StandardELContext getELContext() {
+        if (context == null) {
+            context = new StandardELContext(getExpressionFactory());
+        }
+
+        return context;
+    }
+
+    public ELContext setELContext(ELContext context) {
+        StandardELContext oldContext = this.context;
+        this.context = new StandardELContext(context);
+        return oldContext;
+    }
+
+    public void addBeanNameResolver(BeanNameResolver beanNameResolver) {
+        getELContext().addELResolver(new BeanNameELResolver(beanNameResolver));
+    }
+
+    public void addELResolver(ELResolver resolver) {
+        getELContext().addELResolver(resolver);
+    }
+
+    public void mapFunction(String prefix, String function, Method method) {
+        getELContext().getFunctionMapper().mapFunction(
+                prefix, function, method);
+    }
+
+    public void setVariable(String variable, ValueExpression expression) {
+        getELContext().getVariableMapper().setVariable(variable, expression);
+    }
+
+    public void importStatic(String staticMemberName)
+            throws javax.el.ELException {
+        getELContext().getImportHandler().importStatic(staticMemberName);
+    }
+
+    public void importClass(String className) throws javax.el.ELException {
+        getELContext().getImportHandler().importClass(className);
+    }
+
+    public void importPackage(String packageName) {
+        getELContext().getImportHandler().importPackage(packageName);
+    }
+
+    public Object defineBean(String name, Object bean) {
+        Map<String,Object> localBeans = getELContext().getLocalBeans();
+
+        if (bean == null) {
+            return localBeans.remove(name);
+        } else {
+            return localBeans.put(name, bean);
+        }
+    }
+
+    public void addEvaluationListener(EvaluationListener listener) {
+        getELContext().addEvaluationListener(listener);
+    }
+}

==================================================
StandardELContext.java
index 03145590f3..4c0eb862db 100644
--- a/java/javax/el/ExpressionFactory.java
+++ b/java/javax/el/ExpressionFactory.java
@@ -28,8 +28,10 @@ import java.io.UnsupportedEncodingException;
 import java.lang.ref.WeakReference;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
+import java.util.Map;
 import java.util.Properties;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
@@ -86,21 +88,6 @@ public abstract class ExpressionFactory {
         }
     }
 
-    public abstract Object coerceToType(Object obj, Class<?> expectedType)
-            throws ELException;
-
-    public abstract ValueExpression createValueExpression(ELContext context,
-            String expression, Class<?> expectedType)
-            throws NullPointerException, ELException;
-
-    public abstract ValueExpression createValueExpression(Object instance,
-            Class<?> expectedType);
-
-    public abstract MethodExpression createMethodExpression(ELContext context,
-            String expression, Class<?> expectedReturnType,
-            Class<?>[] expectedParamTypes) throws ELException,
-            NullPointerException;
-
     /**
      * Create a new {@link ExpressionFactory}. The class to use is determined by
      * the following search order:
@@ -229,6 +216,35 @@ public abstract class ExpressionFactory {
         return result;
     }
 
+    public abstract ValueExpression createValueExpression(ELContext context,
+            String expression, Class<?> expectedType)
+            throws NullPointerException, ELException;
+
+    public abstract ValueExpression createValueExpression(Object instance,
+            Class<?> expectedType);
+
+    public abstract MethodExpression createMethodExpression(ELContext context,
+            String expression, Class<?> expectedReturnType,
+            Class<?>[] expectedParamTypes) throws ELException,
+            NullPointerException;
+
+    public abstract Object coerceToType(Object obj, Class<?> expectedType)
+            throws ELException;
+
+    /**
+     * @since EL 3.0
+     */
+    public ELResolver getStreamELResolver() {
+        return null;
+    }
+
+    /**
+     * @since EL 3.0
+     */
+    public Map<String,Method> getInitFunctionMap() {
+        return null;
+    }
+
     /**
      * Key used to cache ExpressionFactory discovery information per class
      * loader. The class loader reference is never {@code null}, because

==================================================
