b5f3d471a44d6329498197c7426d6fc1abe7f58c
==================================================
Add a boolean return to the abstract processSocket() method facilitate the merging of the two processSocket() methods in each of the end points.
==================================================
Mark Thomas
==================================================
Wed Jun 1 21:06:43 2016 +0000
==================================================
AbstractEndpoint.java
Add a boolean return to the abstract processSocket() method facilitate the merging of the two processSocket() methods in each of the end points.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1746495 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AprEndpoint.java
index 1e4a6529a7..025df0d867 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -774,8 +774,10 @@ public abstract class AbstractEndpoint<S> {
      * @param socketStatus  The input status to the processing
      * @param dispatch      Should the processing be performed on a new
      *                          container thread
+     *
+     * @return if processing was triggered successfully
      */
-    public abstract void processSocket(SocketWrapperBase<S> socketWrapper,
+    public abstract boolean processSocket(SocketWrapperBase<S> socketWrapper,
             SocketEvent socketStatus, boolean dispatch);
 
 

==================================================
Nio2Endpoint.java
index 74bd52db2b..ce5b3c2d69 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -833,7 +833,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
 
 
     @Override
-    public void processSocket(SocketWrapperBase<Long> socket, SocketEvent status,
+    public boolean processSocket(SocketWrapperBase<Long> socket, SocketEvent status,
             boolean dispatch) {
         try {
             // Synchronisation is required here as this code may be called as a
@@ -850,12 +850,15 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
             }
         } catch (RejectedExecutionException ree) {
             log.warn(sm.getString("endpoint.executor.fail", socket) , ree);
+            return false;
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
             // This means we got an OOM or similar creating a thread, or that
             // the pool and its queue are full
             log.error(sm.getString("endpoint.process.fail"), t);
+            return false;
         }
+        return true;
     }
 
     private void closeSocket(long socket) {

==================================================
NioEndpoint.java
index dc9db643a3..de126202b4 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -377,9 +377,9 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
     }
 
     @Override
-    public void processSocket(SocketWrapperBase<Nio2Channel> socketWrapper,
+    public boolean  processSocket(SocketWrapperBase<Nio2Channel> socketWrapper,
             SocketEvent socketStatus, boolean dispatch) {
-        processSocket0(socketWrapper, socketStatus, dispatch);
+        return processSocket0(socketWrapper, socketStatus, dispatch);
     }
 
     protected boolean processSocket0(SocketWrapperBase<Nio2Channel> socketWrapper, SocketEvent status, boolean dispatch) {

==================================================
