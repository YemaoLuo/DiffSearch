cd9229edca8cb27642e31b031ba23c6e618c14ac
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=53062
==================================================
Mark Emlyn
==================================================
Thu May 10 20:06:15 2012 +0000
==================================================
Response.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=53062
Normalize redirect URLs constructed from relative paths

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1336864 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CharChunk.java
index 67080a920d..47bbc7eee0 100644
--- a/java/org/apache/catalina/connector/Response.java
+++ b/java/org/apache/catalina/connector/Response.java
@@ -1560,7 +1560,7 @@ public class Response
             redirectURLCC.recycle();
             // Add the scheme
             String scheme = request.getScheme();
-                try {
+            try {
                 redirectURLCC.append(scheme, 0, scheme.length());
                 redirectURLCC.append(':');
                 redirectURLCC.append(location, 0, location.length());
@@ -1619,6 +1619,8 @@ public class Response
                     redirectURLCC.append('/');
                 }
                 redirectURLCC.append(location, 0, location.length());
+
+                normalize(redirectURLCC);
             } catch (IOException e) {
                 IllegalArgumentException iae =
                     new IllegalArgumentException(location);
@@ -1636,6 +1638,77 @@ public class Response
 
     }
 
+    /*
+     * Removes /./ and /../ sequences from absolute URLs.
+     * Code borrowed heavily from CoyoteAdapter.normalize()
+     */
+    private void normalize(CharChunk cc) {
+        if (cc.endsWith("/.") || cc.endsWith("/..")) {
+            try {
+                cc.append('/');
+            } catch (IOException e) {
+                throw new IllegalArgumentException(cc.toString(), e);
+            }
+        }
+
+        char[] c = cc.getChars();
+        int start = cc.getStart();
+        int end = cc.getEnd();
+        int index = 0;
+        int startIndex = 0;
+
+        // Advance past the first three / characters (should place index just
+        // scheme://host[:port]
+
+        for (int i = 0; i < 3; i++) {
+            startIndex = cc.indexOf('/', startIndex + 1);
+        }
+
+        // Remove /./
+        index = startIndex;
+        while (true) {
+            index = cc.indexOf("/./", 0, 3, index);
+            if (index < 0) {
+                break;
+            }
+            copyChars(c, start + index, start + index + 2,
+                      end - start - index - 2);
+            end = end - 2;
+            cc.setEnd(end);
+        }
+
+        // Remove /../
+        index = startIndex;
+        int pos;
+        while (true) {
+            index = cc.indexOf("/../", 0, 4, index);
+            if (index < 0) {
+                break;
+            }
+            // Prevent from going outside our context
+            if (index == startIndex) {
+                throw new IllegalArgumentException();
+            }
+            int index2 = -1;
+            for (pos = start + index - 1; (pos >= 0) && (index2 < 0); pos --) {
+                if (c[pos] == (byte) '/') {
+                    index2 = pos;
+                }
+            }
+            copyChars(c, start + index2, start + index + 3,
+                      end - start - index - 3);
+            end = end + index2 - index - 3;
+            cc.setEnd(end);
+            index = index2;
+        }
+    }
+
+    private void copyChars(char[] c, int dest, int src, int len) {
+        for (int pos = 0; pos < len; pos++) {
+            c[pos + dest] = c[pos + src];
+        }
+    }
+
 
     /**
      * Determine if an absolute URL has a path component

==================================================
TestResponse.java
index dbaacdcf19..b5c0622cb9 100644
--- a/java/org/apache/tomcat/util/buf/CharChunk.java
+++ b/java/org/apache/tomcat/util/buf/CharChunk.java
@@ -557,6 +557,25 @@ public final class CharChunk implements Cloneable, Serializable, CharSequence {
     }
 
 
+    /**
+     * Returns true if the message bytes end with the specified string.
+     * @param s the string
+     */
+    public boolean endsWith(String s) {
+        char[] c = buff;
+        int len = s.length();
+        if (c == null || len > end-start) {
+            return false;
+        }
+        int off = end - len;
+        for (int i = 0; i < len; i++) {
+            if (c[off++] != s.charAt(i)) {
+                return false;
+            }
+        }
+        return true;
+    }
+
     // -------------------- Hash code  --------------------
 
     // normal hash.

==================================================
TestResponsePerformance.java
index ff029a6a15..ac016aa3eb 100644
--- a/test/org/apache/catalina/connector/TestResponse.java
+++ b/test/org/apache/catalina/connector/TestResponse.java
@@ -33,6 +33,7 @@ import javax.servlet.http.HttpSession;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -161,6 +162,66 @@ public class TestResponse extends TomcatBaseTest {
         assertEquals("OK", bc.toString());
     }
 
+
+    @Test
+    public void testBug53062a() throws Exception {
+        Request req = new TesterMockRequest();
+        Response resp = new Response();
+        resp.setRequest(req);
+
+        String result = resp.toAbsolute("./bar.html");
+
+        Assert.assertEquals("http://localhost:8080/level1/level2/bar.html",
+                result);
+    }
+
+
+    @Test
+    public void testBug53062b() throws Exception {
+        Request req = new TesterMockRequest();
+        Response resp = new Response();
+        resp.setRequest(req);
+
+        String result = resp.toAbsolute(".");
+
+        Assert.assertEquals("http://localhost:8080/level1/level2/", result);
+    }
+
+
+    @Test
+    public void testBug53062c() throws Exception {
+        Request req = new TesterMockRequest();
+        Response resp = new Response();
+        resp.setRequest(req);
+
+        String result = resp.toAbsolute("..");
+
+        Assert.assertEquals("http://localhost:8080/level1/", result);
+    }
+
+
+    @Test
+    public void testBug53062d() throws Exception {
+        Request req = new TesterMockRequest();
+        Response resp = new Response();
+        resp.setRequest(req);
+
+        String result = resp.toAbsolute(".././..");
+
+        Assert.assertEquals("http://localhost:8080/", result);
+    }
+
+
+    @Test(expected=IllegalArgumentException.class)
+    public void testBug53062e() throws Exception {
+        Request req = new TesterMockRequest();
+        Response resp = new Response();
+        resp.setRequest(req);
+
+        resp.toAbsolute("../../..");
+    }
+
+
     private static final class Bug52811Servlet extends HttpServlet {
         private static final long serialVersionUID = 1L;
 

==================================================
