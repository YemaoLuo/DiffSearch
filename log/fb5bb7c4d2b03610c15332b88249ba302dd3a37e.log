fb5bb7c4d2b03610c15332b88249ba302dd3a37e
==================================================
Follow up to r1634089.
==================================================
Mark Emlyn
==================================================
Fri Oct 24 23:27:40 2014 +0000
==================================================
ELParser.java
Follow up to r1634089.
Fix some additional test failures with the stricter escaping rules.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1634161 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Parser.java
index e0965aafb3..02b72da698 100644
--- a/java/org/apache/jasper/compiler/ELParser.java
+++ b/java/org/apache/jasper/compiler/ELParser.java
@@ -244,13 +244,15 @@ public class ELParser {
         for (int i = 0; i < len; i++) {
             char ch = input.charAt(i);
             if (ch =='$' || (!isDeferredSyntaxAllowedAsLiteral && ch == '#')) {
-                if (output == null) {
-                    output = new StringBuilder(len + 20);
+                if (i + 1 < len && input.charAt(i + 1) == '{') {
+                    if (output == null) {
+                        output = new StringBuilder(len + 20);
+                    }
+                    output.append(input.substring(lastAppend, i));
+                    lastAppend = i + 1;
+                    output.append('\\');
+                    output.append(ch);
                 }
-                output.append(input.substring(lastAppend, i));
-                lastAppend = i + 1;
-                output.append('\\');
-                output.append(ch);
             }
         }
         if (output == null) {

==================================================
TestParser.java
index cab5c4eb0d..7e39f2ee52 100644
--- a/java/org/apache/jasper/compiler/Parser.java
+++ b/java/org/apache/jasper/compiler/Parser.java
@@ -1283,16 +1283,9 @@ class Parser implements TagConstants {
             return;
 
         CharArrayWriter ttext = new CharArrayWriter();
-        // Output the first character
-        int ch = reader.nextChar();
-        if (ch == '\\') {
-            reader.pushChar();
-        } else {
-            ttext.write(ch);
-        }
 
         while (reader.hasMoreInput()) {
-            ch = reader.nextChar();
+            int ch = reader.nextChar();
             if (ch == '<') {
                 // Check for "<\%"
                 if (reader.nextChar() == '\\') {
@@ -1302,13 +1295,21 @@ class Parser implements TagConstants {
                     } else {
                         reader.pushChar();
                         reader.pushChar();
-                        reader.pushChar();
-                        break;
+                        if (ttext.size() == 0) {
+                            ttext.append('<');
+                        } else {
+                            reader.pushChar();
+                            break;
+                        }
                     }
                 } else {
                     reader.pushChar();
-                    reader.pushChar();
-                    break;
+                    if (ttext.size() == 0) {
+                        ttext.append('<');
+                    } else {
+                        reader.pushChar();
+                        break;
+                    }
                 }
             } else if (ch == '\\' && !pageInfo.isELIgnored()) {
                 int next = reader.nextChar();
@@ -1325,7 +1326,8 @@ class Parser implements TagConstants {
                     ttext.append('\\');
                     reader.pushChar();
                 }
-            } else if ((ch == '$' || ch == '#') && !pageInfo.isELIgnored()) {
+            } else if ((ch == '$' || ch == '#' && !pageInfo.isDeferredSyntaxAllowedAsLiteral()) &&
+                    !pageInfo.isELIgnored()) {
                 if (reader.nextChar() == '{') {
                     reader.pushChar();
                     reader.pushChar();

==================================================
