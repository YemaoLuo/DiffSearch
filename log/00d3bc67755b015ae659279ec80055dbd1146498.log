00d3bc67755b015ae659279ec80055dbd1146498
==================================================
Implemented a way to get a delegate using standard APIs rather than custom handling
==================================================
Filip Hanik
==================================================
Mon Dec 22 22:11:41 2008 +0000
==================================================
ConnectionPool.java
index 0cf0bba133..cffd9fa6da 100644
--- a/modules/jdbc-pool/build.xml
+++ b/modules/jdbc-pool/build.xml
@@ -23,7 +23,7 @@
   <!-- See "build.properties.sample" in the top level directory for all     -->
   <property name="version.major"         value="1" />
   <property name="version.minor"         value="0" />
-  <property name="version.build"         value="10" />
+  <property name="version.build"         value="11" />
   <property name="version.patch"         value="-beta" />
   <property name="version"               value="${version.major}.${version.minor}.${version.build}${version.patch}" />
   <!-- property values you must customize for successful building!!!        -->

==================================================
JdbcInterceptor.java
index afaebf64a8..b6f07e2b5d 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -248,7 +248,7 @@ public class ConnectionPool {
     public Constructor getProxyConstructor() throws NoSuchMethodException {
         //cache the constructor
         if (proxyClassConstructor == null ) {
-            Class proxyClass = Proxy.getProxyClass(ConnectionPool.class.getClassLoader(), new Class[] {java.sql.Connection.class});
+            Class proxyClass = Proxy.getProxyClass(ConnectionPool.class.getClassLoader(), new Class[] {java.sql.Connection.class,javax.sql.PooledConnection.class});
             proxyClassConstructor = proxyClass.getConstructor(new Class[] { InvocationHandler.class });
         }
         return proxyClassConstructor;

==================================================
ProxyConnection.java
index 6c568420ae..7d14c42b38 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/JdbcInterceptor.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/JdbcInterceptor.java
@@ -29,9 +29,10 @@ import org.apache.tomcat.jdbc.pool.PoolProperties.InterceptorProperty;
  * @version 1.0
  */
 public abstract class JdbcInterceptor implements InvocationHandler {
-    public  static final String CLOSE_VAL = "close";
-    public  static final String TOSTRING_VAL = "toString";
-    public  static final String ISCLOSED_VAL = "isClosed"; 
+    public static final String CLOSE_VAL = "close";
+    public static final String TOSTRING_VAL = "toString";
+    public static final String ISCLOSED_VAL = "isClosed"; 
+    public static final String GETCONNECTION_VAL = "getConnection";
     
     protected Map<String,InterceptorProperty> properties = null; 
     

==================================================
TestGetConnection.java
index a3094da3bf..da62ebb9a6 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ProxyConnection.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ProxyConnection.java
@@ -80,6 +80,8 @@ public class ProxyConnection extends JdbcInterceptor {
             return null;
         } else if (compare(TOSTRING_VAL,method)) {
             return this.toString();
+        } else if (compare(GETCONNECTION_VAL,method) && connection!=null) {
+            return connection.getConnection();
         }
         if (isClosed()) throw new SQLException("Connection has already been closed.");
         return method.invoke(connection.getConnection(),args);

==================================================
