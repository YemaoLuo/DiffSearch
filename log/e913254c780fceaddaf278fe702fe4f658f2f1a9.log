e913254c780fceaddaf278fe702fe4f658f2f1a9
==================================================
Whitespace removal from /java/org/apache/catalina/core
==================================================
Mark Emlyn
==================================================
Sat Oct 22 21:08:51 2011 +0000
==================================================
AccessLogAdapter.java
Whitespace removal from /java/org/apache/catalina/core

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1187787 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ApplicationContext.java
index 935858d15a..a4c6889ca1 100644
--- a/java/org/apache/catalina/core/AccessLogAdapter.java
+++ b/java/org/apache/catalina/core/AccessLogAdapter.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
ApplicationContextFacade.java
index bfd68bcc3f..e9eba152e1 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -99,7 +99,7 @@ public class ApplicationContext
 
     static {
         STRICT_SERVLET_COMPLIANCE = Globals.STRICT_SERVLET_COMPLIANCE;
-        
+
         String requireSlash = System.getProperty(
                 "org.apache.catalina.core.ApplicationContext.GET_RESOURCE_REQUIRE_SLASH");
         if (requireSlash == null) {
@@ -122,7 +122,7 @@ public class ApplicationContext
     public ApplicationContext(StandardContext context) {
         super();
         this.context = context;
-        
+
         // Populate session tracking modes
         populateSessionTrackingModes();
     }
@@ -194,7 +194,7 @@ public class ApplicationContext
      */
     private SessionCookieConfig sessionCookieConfig =
         new ApplicationSessionCookieConfig();
-    
+
     /**
      * Session tracking modes
      */
@@ -303,7 +303,7 @@ public class ApplicationContext
         }
     }
 
-    
+
     /**
      * Return the main path associated with this context.
      */
@@ -311,7 +311,7 @@ public class ApplicationContext
     public String getContextPath() {
         return context.getPath();
     }
-    
+
 
     /**
      * Return the value of the specified initialization parameter, or
@@ -396,7 +396,7 @@ public class ApplicationContext
         Wrapper wrapper = (Wrapper) context.findChild(name);
         if (wrapper == null)
             return (null);
-        
+
         return new ApplicationDispatcher(wrapper, null, null, null, null, name);
 
     }
@@ -445,7 +445,7 @@ public class ApplicationContext
         if (normalizedPath == null)
             return (null);
 
-        pos = normalizedPath.length(); 
+        pos = normalizedPath.length();
 
         // Use the thread local URI and mapping data
         DispatchData dd = dispatchData.get();
@@ -496,10 +496,10 @@ public class ApplicationContext
         String pathInfo = mappingData.pathInfo.toString();
 
         mappingData.recycle();
-        
+
         // Construct a RequestDispatcher to process this request
         return new ApplicationDispatcher
-            (wrapper, uriCC.toString(), wrapperPath, pathInfo, 
+            (wrapper, uriCC.toString(), wrapperPath, pathInfo,
              queryString, null);
 
     }
@@ -524,7 +524,7 @@ public class ApplicationContext
                 !path.startsWith("/") && GET_RESOURCE_REQUIRE_SLASH)
             throw new MalformedURLException(sm.getString(
                     "applicationContext.requestDispatcher.iae", path));
-        
+
         String normPath = RequestUtil.normalize(path);
         if (normPath == null)
             return (null);
@@ -724,7 +724,7 @@ public class ApplicationContext
     @Override
     @Deprecated
     public void log(Exception exception, String message) {
-        
+
         context.getLogger().error(message, exception);
 
     }
@@ -738,7 +738,7 @@ public class ApplicationContext
      */
     @Override
     public void log(String message, Throwable throwable) {
-        
+
         context.getLogger().error(message, throwable);
 
     }
@@ -896,11 +896,11 @@ public class ApplicationContext
     @Override
     public FilterRegistration.Dynamic addFilter(String filterName,
             String filterClass) throws IllegalStateException {
-        
+
         return addFilter(filterName, filterClass, null);
     }
 
-    
+
     /**
      * Add filter to context.
      * @param   filterName  Name of filter to add
@@ -918,11 +918,11 @@ public class ApplicationContext
     @Override
     public FilterRegistration.Dynamic addFilter(String filterName,
             Filter filter) throws IllegalStateException {
-        
+
         return addFilter(filterName, null, filter);
     }
 
-    
+
     /**
      * Add filter to context.
      * @param   filterName  Name of filter to add
@@ -940,13 +940,13 @@ public class ApplicationContext
     @Override
     public FilterRegistration.Dynamic addFilter(String filterName,
             Class<? extends Filter> filterClass) throws IllegalStateException {
-        
+
         return addFilter(filterName, filterClass.getName(), null);
     }
 
     private FilterRegistration.Dynamic addFilter(String filterName,
             String filterClass, Filter filter) throws IllegalStateException {
-        
+
         if (!context.getState().equals(LifecycleState.STARTING_PREP)) {
             //TODO Spec breaking enhancement to ignore this restriction
             throw new IllegalStateException(
@@ -962,7 +962,7 @@ public class ApplicationContext
         // {@link javax.servlet.annotation.WebListener}.
 
         FilterDef filterDef = context.findFilterDef(filterName);
-        
+
         // Assume a 'complete' FilterRegistration is one that has a class and
         // a name
         if (filterDef == null) {
@@ -982,10 +982,10 @@ public class ApplicationContext
             filterDef.setFilterClass(filter.getClass().getName());
             filterDef.setFilter(filter);
         }
-        
+
         return new ApplicationFilterRegistration(filterDef, context);
-    } 
-    
+    }
+
     @Override
     public <T extends Filter> T createFilter(Class<T> c)
     throws ServletException {
@@ -1016,7 +1016,7 @@ public class ApplicationContext
         return new ApplicationFilterRegistration(filterDef, context);
     }
 
-    
+
     /**
      * Add servlet to context.
      * @param   servletName  Name of servlet to add
@@ -1034,7 +1034,7 @@ public class ApplicationContext
     @Override
     public ServletRegistration.Dynamic addServlet(String servletName,
             String servletClass) throws IllegalStateException {
-        
+
         return addServlet(servletName, servletClass, null);
     }
 
@@ -1060,7 +1060,7 @@ public class ApplicationContext
         return addServlet(servletName, null, servlet);
     }
 
-    
+
     /**
      * Add servlet to context.
      * @param   servletName  Name of servlet to add
@@ -1085,14 +1085,14 @@ public class ApplicationContext
 
     private ServletRegistration.Dynamic addServlet(String servletName,
             String servletClass, Servlet servlet) throws IllegalStateException {
-        
+
         if (!context.getState().equals(LifecycleState.STARTING_PREP)) {
             //TODO Spec breaking enhancement to ignore this restriction
             throw new IllegalStateException(
                     sm.getString("applicationContext.addServlet.ise",
                             getContextPath()));
         }
-        
+
         // TODO SERVLET3
         // throw UnsupportedOperationException - if this context was passed to the
         // {@link ServletContextListener#contextInitialized(javax.servlet.ServletContextEvent)}
@@ -1101,7 +1101,7 @@ public class ApplicationContext
         // {@link javax.servlet.annotation.WebListener}.
 
         Wrapper wrapper = (Wrapper) context.findChild(servletName);
-        
+
         // Assume a 'complete' ServletRegistration is one that has a class and
         // a name
         if (wrapper == null) {
@@ -1158,10 +1158,10 @@ public class ApplicationContext
         if (wrapper == null) {
             return null;
         }
-        
+
         return new ApplicationServletRegistration(wrapper, context);
     }
-    
+
 
     /**
      * By default {@link SessionTrackingMode#URL} is always supported, {@link
@@ -1178,15 +1178,15 @@ public class ApplicationContext
 
     private void populateSessionTrackingModes() {
         // URL re-writing is always enabled by default
-        defaultSessionTrackingModes = EnumSet.of(SessionTrackingMode.URL); 
+        defaultSessionTrackingModes = EnumSet.of(SessionTrackingMode.URL);
         supportedSessionTrackingModes = EnumSet.of(SessionTrackingMode.URL);
-        
+
         if (context.getCookies()) {
             defaultSessionTrackingModes.add(SessionTrackingMode.COOKIE);
             supportedSessionTrackingModes.add(SessionTrackingMode.COOKIE);
         }
 
-        // SSL not enabled by default as it can only used on its own 
+        // SSL not enabled by default as it can only used on its own
         // Context > Host > Engine > Service
         Service s = ((Engine) context.getParent().getParent()).getService();
         Connector[] connectors = s.findConnectors();
@@ -1196,7 +1196,7 @@ public class ApplicationContext
                 supportedSessionTrackingModes.add(SessionTrackingMode.SSL);
                 break;
             }
-        } 
+        }
     }
 
     /**
@@ -1233,7 +1233,7 @@ public class ApplicationContext
                     sm.getString("applicationContext.setSessionTracking.ise",
                             getContextPath()));
         }
-        
+
         // Check that only supported tracking modes have been requested
         for (SessionTrackingMode sessionTrackingMode : sessionTrackingModes) {
             if (!supportedSessionTrackingModes.contains(sessionTrackingMode)) {
@@ -1251,7 +1251,7 @@ public class ApplicationContext
                         getContextPath()));
             }
         }
-        
+
         this.sessionTrackingModes = sessionTrackingModes;
     }
 
@@ -1261,12 +1261,12 @@ public class ApplicationContext
         if (parameters.containsKey(name)) {
             return false;
         }
-        
+
         parameters.put(name, value);
         return true;
     }
-    
-    
+
+
     @Override
     public void addListener(Class<? extends EventListener> listenerClass) {
         EventListener listener;
@@ -1283,7 +1283,7 @@ public class ApplicationContext
 
     @Override
     public void addListener(String className) {
-        
+
         try {
             Object obj = context.getInstanceManager().newInstance(className);
 
@@ -1316,7 +1316,7 @@ public class ApplicationContext
                     "applicationContext.addListener.iae.cnfe", className),
                     e);
         }
-        
+
     }
 
 
@@ -1334,7 +1334,7 @@ public class ApplicationContext
         // method of a {@link ServletContextListener} that was not declared
         // in web.xml, a web-fragment or annotated with
         // {@link javax.servlet.annotation.WebListener}.
-        
+
         boolean match = false;
         if (t instanceof ServletContextAttributeListener ||
                 t instanceof ServletRequestListener ||
@@ -1343,16 +1343,16 @@ public class ApplicationContext
             context.addApplicationEventListener(t);
             match = true;
         }
-        
+
         if (t instanceof HttpSessionListener
                 || (t instanceof ServletContextListener &&
                         newServletContextListenerAllowed)) {
             context.addApplicationLifecycleListener(t);
             match = true;
         }
-        
+
         if (match) return;
-        
+
         if (t instanceof ServletContextListener) {
             throw new IllegalArgumentException(sm.getString(
                     "applicationContext.addListener.iae.sclNotAllowed",
@@ -1398,20 +1398,20 @@ public class ApplicationContext
 
     @Override
     public void declareRoles(String... roleNames) {
-        
+
         if (!context.getState().equals(LifecycleState.STARTING_PREP)) {
             //TODO Spec breaking enhancement to ignore this restriction
             throw new IllegalStateException(
                     sm.getString("applicationContext.addRole.ise",
                             getContextPath()));
         }
-        
+
         if (roleNames == null) {
             throw new IllegalArgumentException(
                     sm.getString("applicationContext.roles.iae",
                             getContextPath()));
         }
-        
+
         for (String role : roleNames) {
             if (role == null || "".equals(role)) {
                 throw new IllegalArgumentException(
@@ -1440,7 +1440,7 @@ public class ApplicationContext
                         new RuntimePermission("getClassLoader"));
             }
         }
-        
+
         return result;
     }
 
@@ -1461,7 +1461,7 @@ public class ApplicationContext
     public Map<String, ? extends FilterRegistration> getFilterRegistrations() {
         Map<String, ApplicationFilterRegistration> result =
             new HashMap<String, ApplicationFilterRegistration>();
-        
+
         FilterDef[] filterDefs = context.findFilterDefs();
         for (FilterDef filterDef : filterDefs) {
             result.put(filterDef.getFilterName(),
@@ -1482,7 +1482,7 @@ public class ApplicationContext
     public Map<String, ? extends ServletRegistration> getServletRegistrations() {
         Map<String, ApplicationServletRegistration> result =
             new HashMap<String, ApplicationServletRegistration>();
-        
+
         Container[] wrappers = context.findChildren();
         for (Container wrapper : wrappers) {
             result.put(((Wrapper) wrapper).getName(),
@@ -1493,12 +1493,12 @@ public class ApplicationContext
         return result;
     }
 
-    
+
     // -------------------------------------------------------- Package Methods
     protected StandardContext getContext() {
         return this.context;
     }
-    
+
     protected Map<String,String> getReadonlyAttributes() {
         return this.readOnlyAttributes;
     }
@@ -1521,10 +1521,10 @@ public class ApplicationContext
             String key = keys.next();
             removeAttribute(key);
         }
-        
+
     }
-    
-    
+
+
     /**
      * Return the facade associated with this ApplicationContext.
      */
@@ -1549,7 +1549,7 @@ public class ApplicationContext
     protected void setNewServletContextListenerAllowed(boolean allowed) {
         this.newServletContextListenerAllowed = allowed;
     }
-    
+
     /**
      * List resource paths (recursively), and store all of them in the given
      * Set.
@@ -1580,13 +1580,13 @@ public class ApplicationContext
      */
     private static String getJNDIUri(String hostName, String path) {
         String result;
-        
+
         if (path.startsWith("/")) {
             result = "/" + hostName + path;
         } else {
             result = "/" + hostName + "/" + path;
         }
-        
+
         return result;
     }
 

==================================================
ApplicationDispatcher.java
index f2b3422705..4cae3954a9 100644
--- a/java/org/apache/catalina/core/ApplicationContextFacade.java
+++ b/java/org/apache/catalina/core/ApplicationContextFacade.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -59,20 +59,20 @@ import org.apache.tomcat.util.ExceptionUtils;
  */
 
 public class ApplicationContextFacade implements ServletContext {
-        
+
     // ---------------------------------------------------------- Attributes
     /**
      * Cache Class object used for reflection.
      */
     private HashMap<String,Class<?>[]> classCache;
-    
-    
+
+
     /**
      * Cache method object.
      */
     private HashMap<String,Method> objectCache;
-    
-    
+
+
     // ----------------------------------------------------------- Constructors
 
 
@@ -85,13 +85,13 @@ public class ApplicationContextFacade implements ServletContext {
     public ApplicationContextFacade(ApplicationContext context) {
         super();
         this.context = context;
-        
+
         classCache = new HashMap<String,Class<?>[]>();
         objectCache = new HashMap<String,Method>();
         initClassCache();
     }
-    
-    
+
+
     private void initClassCache(){
         Class<?>[] clazz = new Class[]{String.class};
         classCache.put("getContext", clazz);
@@ -188,7 +188,7 @@ public class ApplicationContextFacade implements ServletContext {
         throws MalformedURLException {
         if (Globals.IS_SECURITY_ENABLED) {
             try {
-                return (URL) invokeMethod(context, "getResource", 
+                return (URL) invokeMethod(context, "getResource",
                                           new Object[]{path});
             } catch(Throwable t) {
                 if (t instanceof MalformedURLException){
@@ -205,7 +205,7 @@ public class ApplicationContextFacade implements ServletContext {
     @Override
     public InputStream getResourceAsStream(String path) {
         if (SecurityUtil.isPackageProtectionEnabled()) {
-            return (InputStream) doPrivileged("getResourceAsStream", 
+            return (InputStream) doPrivileged("getResourceAsStream",
                                               new Object[]{path});
         } else {
             return context.getResourceAsStream(path);
@@ -216,7 +216,7 @@ public class ApplicationContextFacade implements ServletContext {
     @Override
     public RequestDispatcher getRequestDispatcher(final String path) {
         if (SecurityUtil.isPackageProtectionEnabled()) {
-            return (RequestDispatcher) doPrivileged("getRequestDispatcher", 
+            return (RequestDispatcher) doPrivileged("getRequestDispatcher",
                                                     new Object[]{path});
         } else {
             return context.getRequestDispatcher(path);
@@ -227,7 +227,7 @@ public class ApplicationContextFacade implements ServletContext {
     @Override
     public RequestDispatcher getNamedDispatcher(String name) {
         if (SecurityUtil.isPackageProtectionEnabled()) {
-            return (RequestDispatcher) doPrivileged("getNamedDispatcher", 
+            return (RequestDispatcher) doPrivileged("getNamedDispatcher",
                                                     new Object[]{name});
         } else {
             return context.getNamedDispatcher(name);
@@ -244,7 +244,7 @@ public class ApplicationContextFacade implements ServletContext {
         throws ServletException {
         if (SecurityUtil.isPackageProtectionEnabled()) {
             try {
-                return (Servlet) invokeMethod(context, "getServlet", 
+                return (Servlet) invokeMethod(context, "getServlet",
                                               new Object[]{name});
             } catch (Throwable t) {
                 ExceptionUtils.handleThrowable(t);
@@ -307,7 +307,7 @@ public class ApplicationContextFacade implements ServletContext {
     @Deprecated
     public void log(Exception exception, String msg) {
         if (SecurityUtil.isPackageProtectionEnabled()) {
-            doPrivileged("log", new Class[]{Exception.class, String.class}, 
+            doPrivileged("log", new Class[]{Exception.class, String.class},
                          new Object[]{exception,msg});
         } else {
             context.log(exception, msg);
@@ -318,7 +318,7 @@ public class ApplicationContextFacade implements ServletContext {
     @Override
     public void log(String message, Throwable throwable) {
         if (SecurityUtil.isPackageProtectionEnabled()) {
-            doPrivileged("log", new Class[]{String.class, Throwable.class}, 
+            doPrivileged("log", new Class[]{String.class, Throwable.class},
                          new Object[]{message, throwable});
         } else {
             context.log(message, throwable);
@@ -349,7 +349,7 @@ public class ApplicationContextFacade implements ServletContext {
     @Override
     public String getInitParameter(String name) {
         if (SecurityUtil.isPackageProtectionEnabled()) {
-            return (String) doPrivileged("getInitParameter", 
+            return (String) doPrivileged("getInitParameter",
                                          new Object[]{name});
         } else {
             return context.getInitParameter(name);
@@ -420,7 +420,7 @@ public class ApplicationContextFacade implements ServletContext {
         }
     }
 
-       
+
     @Override
     public String getContextPath() {
         if (SecurityUtil.isPackageProtectionEnabled()) {
@@ -430,7 +430,7 @@ public class ApplicationContextFacade implements ServletContext {
         }
     }
 
-       
+
     @Override
     public FilterRegistration.Dynamic addFilter(String filterName,
             String className) {
@@ -472,7 +472,7 @@ public class ApplicationContextFacade implements ServletContext {
     throws ServletException {
         if (SecurityUtil.isPackageProtectionEnabled()) {
             try {
-                return (T) invokeMethod(context, "createFilter", 
+                return (T) invokeMethod(context, "createFilter",
                                               new Object[]{c});
             } catch (Throwable t) {
                 ExceptionUtils.handleThrowable(t);
@@ -496,8 +496,8 @@ public class ApplicationContextFacade implements ServletContext {
             return context.getFilterRegistration(filterName);
         }
     }
-    
-    
+
+
     @Override
     public ServletRegistration.Dynamic addServlet(String servletName,
             String className) {
@@ -540,7 +540,7 @@ public class ApplicationContextFacade implements ServletContext {
     throws ServletException {
         if (SecurityUtil.isPackageProtectionEnabled()) {
             try {
-                return (T) invokeMethod(context, "createServlet", 
+                return (T) invokeMethod(context, "createServlet",
                                               new Object[]{c});
             } catch (Throwable t) {
                 ExceptionUtils.handleThrowable(t);
@@ -554,7 +554,7 @@ public class ApplicationContextFacade implements ServletContext {
         }
     }
 
-    
+
     @Override
     public ServletRegistration getServletRegistration(String servletName) {
         if (SecurityUtil.isPackageProtectionEnabled()) {
@@ -564,8 +564,8 @@ public class ApplicationContextFacade implements ServletContext {
             return context.getServletRegistration(servletName);
         }
     }
-    
-    
+
+
     @Override
     @SuppressWarnings("unchecked") // doPrivileged() returns the correct type
     public Set<SessionTrackingMode> getDefaultSessionTrackingModes() {
@@ -662,7 +662,7 @@ public class ApplicationContextFacade implements ServletContext {
             throws ServletException {
         if (SecurityUtil.isPackageProtectionEnabled()) {
             try {
-                return (T) invokeMethod(context, "createListener", 
+                return (T) invokeMethod(context, "createListener",
                                               new Object[]{c});
             } catch (Throwable t) {
                 ExceptionUtils.handleThrowable(t);
@@ -756,7 +756,7 @@ public class ApplicationContextFacade implements ServletContext {
     }
 
     /**
-     * Use reflection to invoke the requested method. Cache the method object 
+     * Use reflection to invoke the requested method. Cache the method object
      * to speed up the process
      * @param methodName The method to call.
      * @param params The arguments passed to the called method.
@@ -769,9 +769,9 @@ public class ApplicationContextFacade implements ServletContext {
         }
     }
 
-    
+
     /**
-     * Use reflection to invoke the requested method. Cache the method object 
+     * Use reflection to invoke the requested method. Cache the method object
      * to speed up the process
      * @param appContext The AppliationContext object on which the method
      *                   will be invoked
@@ -779,8 +779,8 @@ public class ApplicationContextFacade implements ServletContext {
      * @param params The arguments passed to the called method.
      */
     private Object invokeMethod(ApplicationContext appContext,
-                                final String methodName, 
-                                Object[] params) 
+                                final String methodName,
+                                Object[] params)
         throws Throwable{
 
         try{
@@ -790,7 +790,7 @@ public class ApplicationContextFacade implements ServletContext {
                     .getMethod(methodName, classCache.get(methodName));
                 objectCache.put(methodName, method);
             }
-            
+
             return executeMethod(method,appContext,params);
         } catch (Exception ex){
             handleException(ex);
@@ -799,15 +799,15 @@ public class ApplicationContextFacade implements ServletContext {
             params = null;
         }
     }
-    
+
     /**
-     * Use reflection to invoke the requested method. Cache the method object 
+     * Use reflection to invoke the requested method. Cache the method object
      * to speed up the process
      * @param methodName The method to invoke.
      * @param clazz The class where the method is.
      * @param params The arguments passed to the called method.
-     */    
-    private Object doPrivileged(final String methodName, 
+     */
+    private Object doPrivileged(final String methodName,
                                 final Class<?>[] clazz,
                                 Object[] params) {
 
@@ -826,8 +826,8 @@ public class ApplicationContextFacade implements ServletContext {
             params = null;
         }
     }
-    
-    
+
+
     /**
      * Executes the method of the specified <code>ApplicationContext</code>
      * @param method The method object to be invoked.
@@ -835,13 +835,13 @@ public class ApplicationContextFacade implements ServletContext {
      *                   will be invoked
      * @param params The arguments passed to the called method.
      */
-    private Object executeMethod(final Method method, 
+    private Object executeMethod(final Method method,
                                  final ApplicationContext context,
-                                 final Object[] params) 
-            throws PrivilegedActionException, 
+                                 final Object[] params)
+            throws PrivilegedActionException,
                    IllegalAccessException,
                    InvocationTargetException {
-                                     
+
         if (SecurityUtil.isPackageProtectionEnabled()){
            return AccessController.doPrivileged(new PrivilegedExceptionAction<Object>(){
                 @Override
@@ -851,10 +851,10 @@ public class ApplicationContextFacade implements ServletContext {
             });
         } else {
             return method.invoke(context, params);
-        }        
+        }
     }
 
-    
+
     /**
      *
      * Throw the real exception.
@@ -864,18 +864,18 @@ public class ApplicationContextFacade implements ServletContext {
         throws Throwable {
 
         Throwable realException;
-        
+
         if (ex instanceof PrivilegedActionException) {
             ex = ((PrivilegedActionException) ex).getException();
         }
-        
+
         if (ex instanceof InvocationTargetException) {
             realException =
                 ((InvocationTargetException) ex).getTargetException();
         } else {
             realException = ex;
-        }   
-        
+        }
+
         throw realException;
     }
 

==================================================
ApplicationFilterChain.java
index 82d2632f87..aced5a1c80 100644
--- a/java/org/apache/catalina/core/ApplicationDispatcher.java
+++ b/java/org/apache/catalina/core/ApplicationDispatcher.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -74,7 +74,7 @@ final class ApplicationDispatcher
 
     static {
         STRICT_SERVLET_COMPLIANCE = Globals.STRICT_SERVLET_COMPLIANCE;
-        
+
         String wrapSameObject = System.getProperty(
                 "org.apache.catalina.core.ApplicationDispatcher.WRAP_SAME_OBJECT");
         if (wrapSameObject == null) {
@@ -118,13 +118,13 @@ final class ApplicationDispatcher
         @Override
         public Void run() throws ServletException, IOException {
             DispatcherType type = DispatcherType.INCLUDE;
-            if (request.getDispatcherType()==DispatcherType.ASYNC) type = DispatcherType.ASYNC; 
+            if (request.getDispatcherType()==DispatcherType.ASYNC) type = DispatcherType.ASYNC;
             doInclude(request,response,type);
             return null;
         }
     }
 
-    
+
     /**
      * Used to pass state when the request dispatcher is used. Using instance
      * variables causes threading issues and state is too complex to pass and
@@ -148,7 +148,7 @@ final class ApplicationDispatcher
          * The outermost response that will be passed on to the invoked servlet.
          */
         ServletResponse outerResponse = null;
-        
+
         /**
          * The request wrapper we have created and installed (if any).
          */
@@ -159,7 +159,7 @@ final class ApplicationDispatcher
          * The response wrapper we have created and installed (if any).
          */
         ServletResponse wrapResponse = null;
-        
+
         /**
          * Are we performing an include() instead of a forward()?
          */
@@ -313,7 +313,7 @@ final class ApplicationDispatcher
     private void doForward(ServletRequest request, ServletResponse response)
         throws ServletException, IOException
     {
-        
+
         // Reset any output that has been buffered, but keep headers/cookies
         if (response.isCommitted()) {
             throw new IllegalStateException
@@ -369,7 +369,7 @@ final class ApplicationDispatcher
                 wrequest.setAttribute(RequestDispatcher.FORWARD_QUERY_STRING,
                                       hrequest.getQueryString());
             }
- 
+
             wrequest.setContextPath(contextPath);
             wrequest.setRequestURI(requestURI);
             wrequest.setServletPath(servletPath);
@@ -390,9 +390,9 @@ final class ApplicationDispatcher
             ((ResponseFacade) response).finish();
         } else {
             // Servlet SRV.6.2.2. The Request/Response may have been wrapped
-            // and may no longer be instance of RequestFacade 
+            // and may no longer be instance of RequestFacade
             if (wrapper.getLogger().isDebugEnabled()){
-                wrapper.getLogger().debug( " The Response is vehiculed using a wrapper: " 
+                wrapper.getLogger().debug( " The Response is vehiculed using a wrapper: "
                            + response.getClass().getName() );
             }
 
@@ -416,7 +416,7 @@ final class ApplicationDispatcher
 
     }
 
-    
+
     /**
      * Prepare the request based on the filter configuration.
      * @param request The servlet request we are processing
@@ -426,15 +426,15 @@ final class ApplicationDispatcher
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet error occurs
      */
-    private void processRequest(ServletRequest request, 
+    private void processRequest(ServletRequest request,
                                 ServletResponse response,
                                 State state)
         throws IOException, ServletException {
-                
+
         DispatcherType disInt = (DispatcherType) request.getAttribute(ApplicationFilterFactory.DISPATCHER_TYPE_ATTR);
         if (disInt != null) {
             boolean doInvoke = true;
-            
+
             if (context.getFireRequestListenersOnForwards() &&
                     !context.fireRequestInitEvent(request)) {
                 doInvoke = false;
@@ -452,15 +452,15 @@ final class ApplicationDispatcher
                 } else {
                     invoke(state.outerRequest, response, state);
                 }
-                
+
                 if (context.getFireRequestListenersOnForwards()) {
                     context.fireRequestDestroyEvent(request);
                 }
             }
         }
     }
-    
-    
+
+
     /**
      * Combine the servletPath and the pathInfo. If pathInfo is
      * <code>null</code> it is ignored. If servletPath is <code>null</code> then
@@ -506,7 +506,7 @@ final class ApplicationDispatcher
             }
         } else {
             DispatcherType type = DispatcherType.INCLUDE;
-            if (request.getDispatcherType()==DispatcherType.ASYNC) type = DispatcherType.ASYNC; 
+            if (request.getDispatcherType()==DispatcherType.ASYNC) type = DispatcherType.ASYNC;
             doInclude(request,response,type);
         }
     }
@@ -521,7 +521,7 @@ final class ApplicationDispatcher
             // Check SRV.8.2 / SRV.14.2.5.1 compliance
             checkSameObjects(request, response);
         }
-        
+
         // Create a wrapped response to use for this request
         wrapResponse(state);
 
@@ -564,7 +564,7 @@ final class ApplicationDispatcher
                                       queryString);
                 wrequest.setQueryParams(queryString);
             }
-            
+
             wrequest.setAttribute(ApplicationFilterFactory.DISPATCHER_TYPE_ATTR,
                     type);
             wrequest.setAttribute(
@@ -620,7 +620,7 @@ final class ApplicationDispatcher
         // Check for the servlet being marked unavailable
         if (wrapper.isUnavailable()) {
             wrapper.getLogger().warn(
-                    sm.getString("applicationDispatcher.isUnavailable", 
+                    sm.getString("applicationDispatcher.isUnavailable",
                     wrapper.getName()));
             long available = wrapper.getAvailable();
             if ((available > 0L) && (available < Long.MAX_VALUE))
@@ -649,12 +649,12 @@ final class ApplicationDispatcher
                               wrapper.getName()), e);
             servlet = null;
         }
-                
+
         // Get the FilterChain Here
         ApplicationFilterFactory factory = ApplicationFilterFactory.getInstance();
         ApplicationFilterChain filterChain = factory.createFilterChain(request,
                                                                 wrapper,servlet);
-        
+
         // Call the service() method for the allocated servlet instance
         try {
             support.fireInstanceEvent(InstanceEvent.BEFORE_DISPATCH_EVENT,
@@ -732,14 +732,14 @@ final class ApplicationDispatcher
         // Reset the old context class loader
         if (oldCCL != null)
             Thread.currentThread().setContextClassLoader(oldCCL);
-        
+
         // Unwrap request/response if needed
         // See Bugzilla 30949
         unwrapRequest(state);
         unwrapResponse(state);
         // Recycle request if necessary (also BZ 30949)
         recycleRequestWrapper(state);
-        
+
         // Rethrow an exception if one was thrown by the invoked servlet
         if (ioException != null)
             throw ioException;
@@ -786,7 +786,7 @@ final class ApplicationDispatcher
         }
 
     }
-    
+
     /**
      * Unwrap the response if we have wrapped it.
      */
@@ -857,7 +857,7 @@ final class ApplicationDispatcher
             if ((state.outerRequest instanceof ApplicationHttpRequest) ||
                 (state.outerRequest instanceof Request) ||
                 (state.outerRequest instanceof HttpServletRequest)) {
-                HttpServletRequest houterRequest = 
+                HttpServletRequest houterRequest =
                     (HttpServletRequest) state.outerRequest;
                 Object contextPath = houterRequest.getAttribute(
                         RequestDispatcher.INCLUDE_CONTEXT_PATH);
@@ -932,15 +932,15 @@ final class ApplicationDispatcher
             ApplicationFilterChain.getLastServicedRequest();
         ServletResponse originalResponse =
             ApplicationFilterChain.getLastServicedResponse();
-        
-        // Some forwards, eg from valves will not set original values 
+
+        // Some forwards, eg from valves will not set original values
         if (originalRequest == null || originalResponse == null) {
             return;
         }
-        
+
         boolean same = false;
         ServletRequest dispatchedRequest = appRequest;
-        
+
         //find the request that was passed into the service method
         while (originalRequest instanceof ServletRequestWrapper &&
                 ((ServletRequestWrapper) originalRequest).getRequest()!=null ) {
@@ -963,13 +963,13 @@ final class ApplicationDispatcher
             throw new ServletException(sm.getString(
                     "applicationDispatcher.specViolation.request"));
         }
-        
+
         same = false;
         ServletResponse dispatchedResponse = appResponse;
-        
+
         //find the response that was passed into the service method
         while (originalResponse instanceof ServletResponseWrapper &&
-                ((ServletResponseWrapper) originalResponse).getResponse() != 
+                ((ServletResponseWrapper) originalResponse).getResponse() !=
                     null ) {
             originalResponse =
                 ((ServletResponseWrapper) originalResponse).getResponse();
@@ -979,7 +979,7 @@ final class ApplicationDispatcher
             if (originalResponse.equals(dispatchedResponse)) {
                 same = true;
             }
-            
+
             if (!same && dispatchedResponse instanceof ServletResponseWrapper) {
                 dispatchedResponse =
                     ((ServletResponseWrapper) dispatchedResponse).getResponse();

==================================================
ApplicationFilterConfig.java
index ec87d31651..b3f61ce58a 100644
--- a/java/org/apache/catalina/core/ApplicationFilterChain.java
+++ b/java/org/apache/catalina/core/ApplicationFilterChain.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -95,12 +95,12 @@ final class ApplicationFilterChain implements FilterChain, CometFilterChain {
     /**
      * Filters.
      */
-    private ApplicationFilterConfig[] filters = 
+    private ApplicationFilterConfig[] filters =
         new ApplicationFilterConfig[0];
 
 
     /**
-     * The int which is used to maintain the current position 
+     * The int which is used to maintain the current position
      * in the filter chain.
      */
     private int pos = 0;
@@ -131,35 +131,35 @@ final class ApplicationFilterChain implements FilterChain, CometFilterChain {
      */
     private InstanceSupport support = null;
 
-    
+
     /**
-     * Static class array used when the SecurityManager is turned on and 
+     * Static class array used when the SecurityManager is turned on and
      * <code>doFilter</code> is invoked.
      */
-    private static Class<?>[] classType = new Class[]{ServletRequest.class, 
+    private static Class<?>[] classType = new Class[]{ServletRequest.class,
                                                       ServletResponse.class,
                                                       FilterChain.class};
-                                                   
+
     /**
-     * Static class array used when the SecurityManager is turned on and 
+     * Static class array used when the SecurityManager is turned on and
      * <code>service</code> is invoked.
-     */                                                 
+     */
     private static Class<?>[] classTypeUsedInService = new Class[]{
                                                          ServletRequest.class,
                                                          ServletResponse.class};
 
     /**
-     * Static class array used when the SecurityManager is turned on and 
+     * Static class array used when the SecurityManager is turned on and
      * <code>doFilterEvent</code> is invoked.
      */
-    private static Class<?>[] cometClassType = 
+    private static Class<?>[] cometClassType =
         new Class[]{ CometEvent.class, CometFilterChain.class};
-                                                   
+
     /**
-     * Static class array used when the SecurityManager is turned on and 
+     * Static class array used when the SecurityManager is turned on and
      * <code>event</code> is invoked.
-     */                                                 
-    private static Class<?>[] classTypeUsedInEvent = 
+     */
+    private static Class<?>[] classTypeUsedInEvent =
         new Class[] { CometEvent.class };
 
 
@@ -188,7 +188,7 @@ final class ApplicationFilterChain implements FilterChain, CometFilterChain {
                 java.security.AccessController.doPrivileged(
                     new java.security.PrivilegedExceptionAction<Void>() {
                         @Override
-                        public Void run() 
+                        public Void run()
                             throws ServletException, IOException {
                             internalDoFilter(req,res);
                             return null;
@@ -211,7 +211,7 @@ final class ApplicationFilterChain implements FilterChain, CometFilterChain {
         }
     }
 
-    private void internalDoFilter(ServletRequest request, 
+    private void internalDoFilter(ServletRequest request,
                                   ServletResponse response)
         throws IOException, ServletException {
 
@@ -223,7 +223,7 @@ final class ApplicationFilterChain implements FilterChain, CometFilterChain {
                 filter = filterConfig.getFilter();
                 support.fireInstanceEvent(InstanceEvent.BEFORE_FILTER_EVENT,
                                           filter, request, response);
-                
+
                 if (request.isAsyncSupported() && "false".equalsIgnoreCase(
                         filterConfig.getFilterDef().getAsyncSupported())) {
                     request.setAttribute(Globals.ASYNC_SUPPORTED_ATTR,
@@ -232,14 +232,14 @@ final class ApplicationFilterChain implements FilterChain, CometFilterChain {
                 if( Globals.IS_SECURITY_ENABLED ) {
                     final ServletRequest req = request;
                     final ServletResponse res = response;
-                    Principal principal = 
+                    Principal principal =
                         ((HttpServletRequest) req).getUserPrincipal();
 
                     Object[] args = new Object[]{req, res, this};
                     SecurityUtil.doAsPrivilege
                         ("doFilter", filter, classType, args, principal);
-                    
-                } else {  
+
+                } else {
                     filter.doFilter(request, response, this);
                 }
 
@@ -288,19 +288,19 @@ final class ApplicationFilterChain implements FilterChain, CometFilterChain {
             // Use potentially wrapped request from this point
             if ((request instanceof HttpServletRequest) &&
                 (response instanceof HttpServletResponse)) {
-                    
+
                 if( Globals.IS_SECURITY_ENABLED ) {
                     final ServletRequest req = request;
                     final ServletResponse res = response;
-                    Principal principal = 
+                    Principal principal =
                         ((HttpServletRequest) req).getUserPrincipal();
                     Object[] args = new Object[]{req, res};
                     SecurityUtil.doAsPrivilege("service",
                                                servlet,
-                                               classTypeUsedInService, 
+                                               classTypeUsedInService,
                                                args,
-                                               principal);   
-                } else {  
+                                               principal);
+                } else {
                     servlet.service(request, response);
                 }
             } else {
@@ -338,9 +338,9 @@ final class ApplicationFilterChain implements FilterChain, CometFilterChain {
 
     /**
      * Process the event, using the security manager if the option is enabled.
-     * 
+     *
      * @param event the event to process
-     * 
+     *
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet exception occurs
      */
@@ -354,7 +354,7 @@ final class ApplicationFilterChain implements FilterChain, CometFilterChain {
                 java.security.AccessController.doPrivileged(
                     new java.security.PrivilegedExceptionAction<Void>() {
                         @Override
-                        public Void run() 
+                        public Void run()
                             throws ServletException, IOException {
                             internalDoFilterEvent(ev);
                             return null;
@@ -377,29 +377,29 @@ final class ApplicationFilterChain implements FilterChain, CometFilterChain {
         }
     }
 
-    
+
     /**
      * The last request passed to a servlet for servicing from the current
      * thread.
-     * 
-     * @return The last request to be serviced. 
+     *
+     * @return The last request to be serviced.
      */
     public static ServletRequest getLastServicedRequest() {
         return lastServicedRequest.get();
     }
 
-    
+
     /**
      * The last response passed to a servlet for servicing from the current
      * thread.
-     * 
-     * @return The last response to be serviced. 
+     *
+     * @return The last response to be serviced.
      */
     public static ServletResponse getLastServicedResponse() {
         return lastServicedResponse.get();
     }
-    
-    
+
+
     private void internalDoFilterEvent(CometEvent event)
         throws IOException, ServletException {
 
@@ -417,14 +417,14 @@ final class ApplicationFilterChain implements FilterChain, CometFilterChain {
 
                 if( Globals.IS_SECURITY_ENABLED ) {
                     final CometEvent ev = event;
-                    Principal principal = 
+                    Principal principal =
                         ev.getHttpServletRequest().getUserPrincipal();
 
                     Object[] args = new Object[]{ev, this};
                     SecurityUtil.doAsPrivilege("doFilterEvent", filter,
                             cometClassType, args, principal);
 
-                } else {  
+                } else {
                     filter.doFilterEvent(event, this);
                 }
 
@@ -470,15 +470,15 @@ final class ApplicationFilterChain implements FilterChain, CometFilterChain {
                     */
             if( Globals.IS_SECURITY_ENABLED ) {
                 final CometEvent ev = event;
-                Principal principal = 
+                Principal principal =
                     ev.getHttpServletRequest().getUserPrincipal();
                 Object[] args = new Object[]{ ev };
                 SecurityUtil.doAsPrivilege("event",
                         servlet,
-                        classTypeUsedInEvent, 
+                        classTypeUsedInEvent,
                         args,
                         principal);
-            } else {  
+            } else {
                 ((CometProcessor) servlet).event(event);
             }
             /*

==================================================
ApplicationFilterFactory.java
index 2797a576f8..35a8904f81 100644
--- a/java/org/apache/catalina/core/ApplicationFilterConfig.java
+++ b/java/org/apache/catalina/core/ApplicationFilterConfig.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -179,7 +179,7 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
     @Override
     public Enumeration<String> getInitParameterNames() {
         Map<String,String> map = filterDef.getParameterMap();
-        
+
         if (map == null) {
             return (new Enumerator<String>(new ArrayList<String>()));
         }
@@ -250,9 +250,9 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
         // Identify the class loader we will be using
         String filterClass = filterDef.getFilterClass();
         this.filter = (Filter) getInstanceManager().newInstance(filterClass);
-        
+
         initFilter();
-        
+
         return (this.filter);
 
     }
@@ -272,7 +272,7 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
         } else {
             filter.init(this);
         }
-        
+
         // Expose filter via JMX
         registerJMX();
     }
@@ -293,7 +293,7 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
     void release() {
 
         unregisterJMX();
-        
+
         if (this.filter != null)
         {
             if (Globals.IS_SECURITY_ENABLED) {
@@ -386,7 +386,7 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
                 instanceManager = new DefaultInstanceManager(null,
                         new HashMap<String, Map<String, String>>(),
                         context,
-                        getClass().getClassLoader()); 
+                        getClass().getClassLoader());
             }
         }
         return instanceManager;
@@ -426,7 +426,7 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
                     getFilterClass(), getFilterName()), ex);
         }
     }
-    
+
     private void unregisterJMX() {
         // unregister this component
         if (oname != null) {

==================================================
ApplicationFilterRegistration.java
index 57fbf9866e..f969ee37d3 100644
--- a/java/org/apache/catalina/core/ApplicationFilterFactory.java
+++ b/java/org/apache/catalina/core/ApplicationFilterFactory.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -30,7 +30,7 @@ import org.apache.catalina.connector.Request;
 import org.apache.catalina.deploy.FilterMap;
 
 /**
- * Factory for the creation and caching of Filters and creation 
+ * Factory for the creation and caching of Filters and creation
  * of Filter Chains.
  *
  * @author Greg Murray
@@ -44,9 +44,9 @@ public final class ApplicationFilterFactory {
     // -------------------------------------------------------------- Constants
 
 
-    public static final String DISPATCHER_TYPE_ATTR = 
+    public static final String DISPATCHER_TYPE_ATTR =
         Globals.DISPATCHER_TYPE_ATTR;
-    public static final String DISPATCHER_REQUEST_PATH_ATTR = 
+    public static final String DISPATCHER_REQUEST_PATH_ATTR =
         Globals.DISPATCHER_REQUEST_PATH_ATTR;
 
     private static ApplicationFilterFactory factory = null;
@@ -85,23 +85,23 @@ public final class ApplicationFilterFactory {
         (ServletRequest request, Wrapper wrapper, Servlet servlet) {
 
         // get the dispatcher type
-        DispatcherType dispatcher = null; 
+        DispatcherType dispatcher = null;
         if (request.getAttribute(DISPATCHER_TYPE_ATTR) != null) {
             dispatcher = (DispatcherType) request.getAttribute(DISPATCHER_TYPE_ATTR);
         }
         String requestPath = null;
         Object attribute = request.getAttribute(DISPATCHER_REQUEST_PATH_ATTR);
-        
+
         if (attribute != null){
             requestPath = attribute.toString();
         }
-        
+
         // If there is no servlet to execute, return null
         if (servlet == null)
             return (null);
 
         boolean comet = false;
-        
+
         // Create and initialize a filter chain object
         ApplicationFilterChain filterChain = null;
         if (request instanceof Request) {
@@ -159,7 +159,7 @@ public final class ApplicationFilterFactory {
                 try {
                     isCometFilter = filterConfig.getFilter() instanceof CometFilter;
                 } catch (Exception e) {
-                    // Note: The try catch is there because getFilter has a lot of 
+                    // Note: The try catch is there because getFilter has a lot of
                     // declared exceptions. However, the filter is allocated much
                     // earlier
                 }
@@ -189,7 +189,7 @@ public final class ApplicationFilterFactory {
                 try {
                     isCometFilter = filterConfig.getFilter() instanceof CometFilter;
                 } catch (Exception e) {
-                    // Note: The try catch is there because getFilter has a lot of 
+                    // Note: The try catch is there because getFilter has a lot of
                     // declared exceptions. However, the filter is allocated much
                     // earlier
                 }
@@ -224,24 +224,24 @@ public final class ApplicationFilterFactory {
         // named dispatches
         if (filterMap.getMatchAllUrlPatterns())
             return (true);
-        
+
         if (requestPath == null)
             return (false);
 
         // Match on context relative request path
         String[] testPaths = filterMap.getURLPatterns();
-        
+
         for (int i = 0; i < testPaths.length; i++) {
             if (matchFiltersURL(testPaths[i], requestPath)) {
                 return (true);
             }
         }
-        
+
         // No match
         return (false);
-        
+
     }
-    
+
 
     /**
      * Return <code>true</code> if the context-relative request path
@@ -252,7 +252,7 @@ public final class ApplicationFilterFactory {
      * @param requestPath Context-relative request path of this request
      */
     private boolean matchFiltersURL(String testPath, String requestPath) {
-        
+
         if (testPath == null)
             return (false);
 
@@ -264,7 +264,7 @@ public final class ApplicationFilterFactory {
         if (testPath.equals("/*"))
             return (true);
         if (testPath.endsWith("/*")) {
-            if (testPath.regionMatches(0, requestPath, 0, 
+            if (testPath.regionMatches(0, requestPath, 0,
                                        testPath.length() - 2)) {
                 if (requestPath.length() == (testPath.length() - 2)) {
                     return (true);
@@ -279,9 +279,9 @@ public final class ApplicationFilterFactory {
         if (testPath.startsWith("*.")) {
             int slash = requestPath.lastIndexOf('/');
             int period = requestPath.lastIndexOf('.');
-            if ((slash >= 0) && (period > slash) 
+            if ((slash >= 0) && (period > slash)
                 && (period != requestPath.length() - 1)
-                && ((requestPath.length() - period) 
+                && ((requestPath.length() - period)
                     == (testPath.length() - 1))) {
                 return (testPath.regionMatches(2, requestPath, period + 1,
                                                testPath.length() - 2));
@@ -302,7 +302,7 @@ public final class ApplicationFilterFactory {
      * @param filterMap Filter mapping being checked
      * @param servletName Servlet name being checked
      */
-    private boolean matchFiltersServlet(FilterMap filterMap, 
+    private boolean matchFiltersServlet(FilterMap filterMap,
                                         String servletName) {
 
         if (servletName == null) {

==================================================
ApplicationHttpRequest.java
index 93a6227d82..f60e53cd5e 100644
--- a/java/org/apache/catalina/core/ApplicationFilterRegistration.java
+++ b/java/org/apache/catalina/core/ApplicationFilterRegistration.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -40,15 +40,15 @@ public class ApplicationFilterRegistration
      */
     private static final StringManager sm =
       StringManager.getManager(Constants.Package);
-    
+
     private FilterDef filterDef;
     private Context context;
-    
+
     public ApplicationFilterRegistration(FilterDef filterDef,
             Context context) {
         this.filterDef = filterDef;
         this.context = context;
-        
+
     }
 
     @Override
@@ -57,20 +57,20 @@ public class ApplicationFilterRegistration
             String... servletNames) {
 
         FilterMap filterMap = new FilterMap();
-        
+
         filterMap.setFilterName(filterDef.getFilterName());
-        
+
         if (dispatcherTypes != null) {
             for (DispatcherType dispatcherType : dispatcherTypes) {
                 filterMap.setDispatcher(dispatcherType.name());
             }
         }
-        
+
         if (servletNames != null) {
             for (String servletName : servletNames) {
                 filterMap.addServletName(servletName);
             }
-        
+
             if (isMatchAfter) {
                 context.addFilterMapBefore(filterMap);
             } else {
@@ -94,12 +94,12 @@ public class ApplicationFilterRegistration
                 filterMap.setDispatcher(dispatcherType.name());
             }
         }
-        
+
         if (urlPatterns != null) {
             for (String urlPattern : urlPatterns) {
                 filterMap.addURLPattern(urlPattern);
             }
-        
+
             if (isMatchAfter) {
                 context.addFilterMapBefore(filterMap);
             } else {
@@ -107,15 +107,15 @@ public class ApplicationFilterRegistration
             }
         }
         // else error?
-        
+
     }
 
     @Override
     public Collection<String> getServletNameMappings() {
         Collection<String> result = new HashSet<String>();
-        
+
         FilterMap[] filterMaps = context.findFilterMaps();
-        
+
         for (FilterMap filterMap : filterMaps) {
             if (filterMap.getFilterName().equals(filterDef.getFilterName())) {
                 for (String servletName : filterMap.getServletNames()) {
@@ -129,9 +129,9 @@ public class ApplicationFilterRegistration
     @Override
     public Collection<String> getUrlPatternMappings() {
         Collection<String> result = new HashSet<String>();
-        
+
         FilterMap[] filterMaps = context.findFilterMaps();
-        
+
         for (FilterMap filterMap : filterMaps) {
             if (filterMap.getFilterName().equals(filterDef.getFilterName())) {
                 for (String urlPattern : filterMap.getURLPatterns()) {
@@ -175,7 +175,7 @@ public class ApplicationFilterRegistration
         if (getInitParameter(name) != null) {
             return false;
         }
-        
+
         filterDef.addInitParameter(name, value);
 
         return true;
@@ -183,9 +183,9 @@ public class ApplicationFilterRegistration
 
     @Override
     public Set<String> setInitParameters(Map<String, String> initParameters) {
-        
+
         Set<String> conflicts = new HashSet<String>();
-        
+
         for (Map.Entry<String, String> entry : initParameters.entrySet()) {
             if (entry.getKey() == null || entry.getValue() == null) {
                 throw new IllegalArgumentException(sm.getString(
@@ -202,7 +202,7 @@ public class ApplicationFilterRegistration
         for (Map.Entry<String, String> entry : initParameters.entrySet()) {
             setInitParameter(entry.getKey(), entry.getValue());
         }
-        
+
         return conflicts;
     }
 
@@ -210,5 +210,5 @@ public class ApplicationFilterRegistration
     public void setAsyncSupported(boolean asyncSupported) {
         filterDef.setAsyncSupported(Boolean.valueOf(asyncSupported).toString());
     }
-    
+
 }

==================================================
ApplicationHttpResponse.java
index c67ee43a5c..99afbfb3d9 100644
--- a/java/org/apache/catalina/core/ApplicationHttpRequest.java
+++ b/java/org/apache/catalina/core/ApplicationHttpRequest.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -73,9 +73,9 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
       RequestDispatcher.INCLUDE_SERVLET_PATH,
       RequestDispatcher.INCLUDE_PATH_INFO,
       RequestDispatcher.INCLUDE_QUERY_STRING,
-      RequestDispatcher.FORWARD_REQUEST_URI, 
+      RequestDispatcher.FORWARD_REQUEST_URI,
       RequestDispatcher.FORWARD_CONTEXT_PATH,
-      RequestDispatcher.FORWARD_SERVLET_PATH, 
+      RequestDispatcher.FORWARD_SERVLET_PATH,
       RequestDispatcher.FORWARD_PATH_INFO,
       RequestDispatcher.FORWARD_QUERY_STRING };
 
@@ -186,7 +186,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      * Special attributes.
      */
     protected Object[] specialAttributes = new Object[specials.length];
-    
+
 
     // ------------------------------------------------- ServletRequest Methods
 
@@ -205,7 +205,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
             if ( requestDispatcherPath != null ){
                 return requestDispatcherPath.toString();
             } else {
-                return null;   
+                return null;
             }
         }
 
@@ -213,10 +213,10 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
         if (pos == -1) {
             return getRequest().getAttribute(name);
         } else {
-            if ((specialAttributes[pos] == null) 
+            if ((specialAttributes[pos] == null)
                 && (specialAttributes[5] == null) && (pos >= 5)) {
                 // If it's a forward special attribute, and null, it means this
-                // is an include, so we check the wrapped request since 
+                // is an include, so we check the wrapped request since
                 // the request could have been forwarded before the include
                 return getRequest().getAttribute(name);
             } else {
@@ -296,7 +296,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
             return (context.getServletContext().getRequestDispatcher(path));
 
         // Convert a request-relative path to a context-relative one
-        String servletPath = 
+        String servletPath =
             (String) getAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH);
         if (servletPath == null)
             servletPath = getServletPath();
@@ -323,10 +323,10 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
 
     }
 
-    
+
     /**
      * Override the getDispatcherType() method of the wrapped request.
-     * 
+     *
      */
     @Override
     public DispatcherType getDispatcherType() {
@@ -521,7 +521,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
     public HttpSession getSession(boolean create) {
 
         if (crossContext) {
-            
+
             // There cannot be a session if no context has been assigned yet
             if (context == null)
                 return (null);
@@ -534,7 +534,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
             HttpSession other = super.getSession(false);
             if (create && (other == null)) {
                 // First create a session in the first context: the problem is
-                // that the top level request is the only one which can 
+                // that the top level request is the only one which can
                 // create the cookie safely
                 other = super.getSession(true);
             }
@@ -550,7 +550,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
                     // Ignore
                 }
                 if (localSession == null && create) {
-                    localSession = 
+                    localSession =
                         context.getManager().createSession(other.getId());
                 }
                 if (localSession != null) {
@@ -629,7 +629,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
         if (orig == null)
             return (new HashMap<String, String[]>());
         HashMap<String, String[]> dest = new HashMap<String, String[]>();
-        
+
         for (Map.Entry<String, String[]> entry : orig.entrySet()) {
             dest.put(entry.getKey(), entry.getValue());
         }
@@ -686,7 +686,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
 
         // Initialize the attributes for this request
         dispatcherType = (DispatcherType)request.getAttribute(Globals.DISPATCHER_TYPE_ATTR);
-        requestDispatcherPath = 
+        requestDispatcherPath =
             request.getAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR);
 
         // Initialize the path elements for this request
@@ -774,7 +774,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
     /**
      * Get a special attribute.
      *
-     * @return the special attribute pos, or -1 if it is not a special 
+     * @return the special attribute pos, or -1 if it is not a special
      *         attribute
      */
     protected int getSpecial(String name) {
@@ -789,7 +789,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
 
     /**
      * Set a special attribute.
-     * 
+     *
      * @return true if the attribute was a special attribute, false otherwise
      */
     protected boolean setSpecial(String name, Object value) {
@@ -805,7 +805,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
 
     /**
      * Remove a special attribute.
-     * 
+     *
      * @return true if the attribute was a special attribute, false otherwise
      */
     protected boolean removeSpecial(String name) {
@@ -918,7 +918,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
 
         @Override
         public boolean hasMoreElements() {
-            return ((pos != last) || (next != null) 
+            return ((pos != last) || (next != null)
                     || ((next = findNext()) != null));
         }
 

==================================================
ApplicationJspConfigDescriptor.java
index e9075fa6eb..492fba3960 100644
--- a/java/org/apache/catalina/core/ApplicationHttpResponse.java
+++ b/java/org/apache/catalina/core/ApplicationHttpResponse.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
ApplicationJspPropertyGroupDescriptor.java
index 067ad3b348..fd051d6d9b 100644
--- a/java/org/apache/catalina/core/ApplicationJspConfigDescriptor.java
+++ b/java/org/apache/catalina/core/ApplicationJspConfigDescriptor.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
ApplicationRequest.java
index f3671eb566..754a1230d8 100644
--- a/java/org/apache/catalina/core/ApplicationJspPropertyGroupDescriptor.java
+++ b/java/org/apache/catalina/core/ApplicationJspPropertyGroupDescriptor.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -30,142 +30,142 @@ public class ApplicationJspPropertyGroupDescriptor
 
     JspPropertyGroup jspPropertyGroup;
 
-    
+
     public ApplicationJspPropertyGroupDescriptor(
             JspPropertyGroup jspPropertyGroup) {
         this.jspPropertyGroup = jspPropertyGroup;
     }
 
-    
+
     @Override
     public String getBuffer() {
         String result = null;
-        
+
         if (jspPropertyGroup.getBuffer() != null) {
             result = jspPropertyGroup.getBuffer().toString();
         }
-        
+
         return result;
     }
 
-    
+
     @Override
     public String getDefaultContentType() {
         String result = null;
-        
+
         if (jspPropertyGroup.getDefaultContentType() != null) {
             result = jspPropertyGroup.getDefaultContentType().toString();
         }
-        
+
         return result;
     }
 
-    
+
     @Override
     public String getDeferredSyntaxAllowedAsLiteral() {
         String result = null;
-        
+
         if (jspPropertyGroup.getDeferredSyntax() != null) {
             result = jspPropertyGroup.getDeferredSyntax().toString();
         }
-        
+
         return result;
     }
 
-    
+
     @Override
     public String getElIgnored() {
         String result = null;
-        
+
         if (jspPropertyGroup.getElIgnored() != null) {
             result = jspPropertyGroup.getElIgnored().toString();
         }
-        
+
         return result;
     }
 
-    
+
     @Override
     public String getErrorOnUndeclaredNamespace() {
         String result = null;
-        
+
         if (jspPropertyGroup.getErrorOnUndeclaredNamespace() != null) {
             result =
                 jspPropertyGroup.getErrorOnUndeclaredNamespace().toString();
         }
-        
+
         return result;
     }
 
-    
+
     @Override
     public Collection<String> getIncludeCodas() {
         return jspPropertyGroup.getIncludeCodas();
     }
 
-    
+
     @Override
     public Collection<String> getIncludePreludes() {
         return jspPropertyGroup.getIncludePreludes();
     }
 
-    
+
     @Override
     public String getIsXml() {
         String result = null;
-        
+
         if (jspPropertyGroup.getIsXml() != null) {
             result = jspPropertyGroup.getIsXml().toString();
         }
-        
+
         return result;
     }
 
-    
+
     @Override
     public String getPageEncoding() {
         String result = null;
-        
+
         if (jspPropertyGroup.getPageEncoding() != null) {
             result = jspPropertyGroup.getPageEncoding().toString();
         }
-        
+
         return result;
     }
 
-    
+
     @Override
     public String getScriptingInvalid() {
         String result = null;
-        
+
         if (jspPropertyGroup.getScriptingInvalid() != null) {
             result = jspPropertyGroup.getScriptingInvalid().toString();
         }
-        
+
         return result;
     }
 
-    
+
     @Override
     public String getTrimDirectiveWhitespaces() {
         String result = null;
-        
+
         if (jspPropertyGroup.getTrimWhitespace() != null) {
             result = jspPropertyGroup.getTrimWhitespace().toString();
         }
-        
+
         return result;
     }
 
-    
+
     @Override
     public Collection<String> getUrlPatterns() {
         Collection<String> result = new HashSet<String>();
-        
+
         if (jspPropertyGroup.getUrlPattern() != null) {
             result.add(jspPropertyGroup.getUrlPattern());
         }
-        
+
         return result;
     }
 

==================================================
ApplicationResponse.java
index 6ebae47cd6..6e525d1aab 100644
--- a/java/org/apache/catalina/core/ApplicationRequest.java
+++ b/java/org/apache/catalina/core/ApplicationRequest.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -60,9 +60,9 @@ class ApplicationRequest extends ServletRequestWrapper {
       RequestDispatcher.INCLUDE_SERVLET_PATH,
       RequestDispatcher.INCLUDE_PATH_INFO,
       RequestDispatcher.INCLUDE_QUERY_STRING,
-      RequestDispatcher.FORWARD_REQUEST_URI, 
+      RequestDispatcher.FORWARD_REQUEST_URI,
       RequestDispatcher.FORWARD_CONTEXT_PATH,
-      RequestDispatcher.FORWARD_SERVLET_PATH, 
+      RequestDispatcher.FORWARD_SERVLET_PATH,
       RequestDispatcher.FORWARD_PATH_INFO,
       RequestDispatcher.FORWARD_QUERY_STRING };
 

==================================================
ApplicationServletRegistration.java
index 5e88879353..c54cba43fb 100644
--- a/java/org/apache/catalina/core/ApplicationResponse.java
+++ b/java/org/apache/catalina/core/ApplicationResponse.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
ApplicationSessionCookieConfig.java
index 707a88d529..5a1af54d4a 100644
--- a/java/org/apache/catalina/core/ApplicationServletRegistration.java
+++ b/java/org/apache/catalina/core/ApplicationServletRegistration.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -41,15 +41,15 @@ public class ApplicationServletRegistration
      */
     private static final StringManager sm =
       StringManager.getManager(Constants.Package);
-    
+
     private Wrapper wrapper;
     private Context context;
-    
+
     public ApplicationServletRegistration(Wrapper wrapper,
             Context context) {
         this.wrapper = wrapper;
         this.context = context;
-        
+
     }
 
     @Override
@@ -65,9 +65,9 @@ public class ApplicationServletRegistration
     @Override
     public Map<String, String> getInitParameters() {
         ParameterMap<String,String> result = new ParameterMap<String,String>();
-        
+
         String[] parameterNames = wrapper.findInitParameters();
-        
+
         for (String parameterName : parameterNames) {
             result.put(parameterName, wrapper.findInitParameter(parameterName));
         }
@@ -91,7 +91,7 @@ public class ApplicationServletRegistration
         if (getInitParameter(name) != null) {
             return false;
         }
-        
+
         wrapper.addInitParameter(name, value);
 
         return true;
@@ -99,9 +99,9 @@ public class ApplicationServletRegistration
 
     @Override
     public Set<String> setInitParameters(Map<String, String> initParameters) {
-        
+
         Set<String> conflicts = new HashSet<String>();
-        
+
         for (Map.Entry<String, String> entry : initParameters.entrySet()) {
             if (entry.getKey() == null || entry.getValue() == null) {
                 throw new IllegalArgumentException(sm.getString(
@@ -151,7 +151,7 @@ public class ApplicationServletRegistration
                     "applicationServletRegistration.setServletSecurity.iae",
                     getName(), context.getName()));
         }
-        
+
         if (!context.getState().equals(LifecycleState.STARTING_PREP)) {
             throw new IllegalStateException(sm.getString(
                     "applicationServletRegistration.setServletSecurity.ise",
@@ -167,9 +167,9 @@ public class ApplicationServletRegistration
         if (urlPatterns == null) {
             return Collections.emptySet();
         }
-        
+
         Set<String> conflicts = new HashSet<String>();
-        
+
         for (String urlPattern : urlPatterns) {
             String wrapperName = context.findServletMapping(urlPattern);
             if (wrapperName != null) {
@@ -187,7 +187,7 @@ public class ApplicationServletRegistration
         if (!conflicts.isEmpty()) {
             return conflicts;
         }
-        
+
         for (String urlPattern : urlPatterns) {
             context.addServletMapping(urlPattern, wrapper.getName());
         }
@@ -199,7 +199,7 @@ public class ApplicationServletRegistration
 
         Set<String> result = new HashSet<String>();
         String servletName = wrapper.getName();
-        
+
         String[] urlPatterns = context.findServletMappings();
         for (String urlPattern : urlPatterns) {
             String name = context.findServletMapping(urlPattern);
@@ -214,5 +214,5 @@ public class ApplicationServletRegistration
     public String getRunAsRole() {
         return wrapper.getRunAs();
     }
-    
+
 }

==================================================
ApplicationTaglibDescriptor.java
index af6607a5a9..ba7a0bf430 100644
--- a/java/org/apache/catalina/core/ApplicationSessionCookieConfig.java
+++ b/java/org/apache/catalina/core/ApplicationSessionCookieConfig.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -26,7 +26,7 @@ public class ApplicationSessionCookieConfig implements SessionCookieConfig {
 
     private static final String DEFAULT_SESSION_COOKIE_NAME = "JSESSIONID";
     private static final String DEFAULT_SESSION_PARAMETER_NAME = "jsessionid";
-    
+
     private boolean httpOnly;
     private boolean secure;
     private int maxAge = -1;
@@ -34,7 +34,7 @@ public class ApplicationSessionCookieConfig implements SessionCookieConfig {
     private String domain;
     private String name;
     private String path;
-    
+
     @Override
     public String getComment() {
         return comment;
@@ -125,11 +125,11 @@ public class ApplicationSessionCookieConfig implements SessionCookieConfig {
         //       3. Defaults
 
         Cookie cookie = new Cookie(getSessionCookieName(context), sessionId);
-       
+
         // Just apply the defaults.
         cookie.setMaxAge(scc.getMaxAge());
         cookie.setComment(scc.getComment());
-       
+
         if (context.getSessionCookieDomain() == null) {
             // Avoid possible NPE
             if (scc.getDomain() != null) {
@@ -148,7 +148,7 @@ public class ApplicationSessionCookieConfig implements SessionCookieConfig {
         if (scc.isHttpOnly() || context.getUseHttpOnly()) {
             cookie.setHttpOnly(true);
         }
-       
+
         String contextPath = context.getSessionCookiePath();
         if (contextPath == null || contextPath.length() == 0) {
             contextPath = scc.getPath();
@@ -175,10 +175,10 @@ public class ApplicationSessionCookieConfig implements SessionCookieConfig {
 
         return cookie;
     }
-    
-    
+
+
     private static String getConfiguredSessionCookieName(Context context) {
-        
+
         // Priority is:
         // 1. Cookie name defined in context
         // 2. Cookie name configured for app
@@ -188,7 +188,7 @@ public class ApplicationSessionCookieConfig implements SessionCookieConfig {
             if (cookieName != null && cookieName.length() > 0) {
                 return cookieName;
             }
-            
+
             SessionCookieConfig scc =
                 context.getServletContext().getSessionCookieConfig();
             cookieName = scc.getName();
@@ -199,37 +199,37 @@ public class ApplicationSessionCookieConfig implements SessionCookieConfig {
 
         return null;
     }
-    
-    
+
+
     /**
      * Determine the name to use for the session cookie for the provided
      * context.
      * @param context
      */
     public static String getSessionCookieName(Context context) {
-    
+
         String result = getConfiguredSessionCookieName(context);
-        
+
         if (result == null) {
-            result = DEFAULT_SESSION_COOKIE_NAME; 
+            result = DEFAULT_SESSION_COOKIE_NAME;
         }
-        
-        return result; 
+
+        return result;
     }
-    
+
     /**
      * Determine the name to use for the session cookie for the provided
      * context.
      * @param context
      */
     public static String getSessionUriParamName(Context context) {
-        
+
         String result = getConfiguredSessionCookieName(context);
-        
+
         if (result == null) {
-            result = DEFAULT_SESSION_PARAMETER_NAME; 
+            result = DEFAULT_SESSION_PARAMETER_NAME;
         }
-        
-        return result; 
+
+        return result;
     }
 }

==================================================
AsyncContextImpl.java
index bc5f681b18..7e0c2ca9c9 100644
--- a/java/org/apache/catalina/core/ApplicationTaglibDescriptor.java
+++ b/java/org/apache/catalina/core/ApplicationTaglibDescriptor.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -23,7 +23,7 @@ public class ApplicationTaglibDescriptor implements TaglibDescriptor {
 
     private String location;
     private String uri;
-    
+
     public ApplicationTaglibDescriptor(String location, String uri) {
         this.location = location;
         this.uri = uri;

==================================================
AsyncListenerWrapper.java
index 33c6fb1e0d..d5892adcac 100644
--- a/java/org/apache/catalina/core/AsyncContextImpl.java
+++ b/java/org/apache/catalina/core/AsyncContextImpl.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -50,14 +50,14 @@ import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.InstanceManager;
 import org.apache.tomcat.util.res.StringManager;
 /**
- * 
+ *
  * @author fhanik
  *
  */
 public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
-    
+
     private static final Log log = LogFactory.getLog(AsyncContextImpl.class);
-    
+
     protected static final StringManager sm =
         StringManager.getManager(Constants.Package);
 
@@ -71,7 +71,7 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
     private AsyncEvent event = null;
     private Request request;
     private volatile InstanceManager instanceManager;
-    
+
     public AsyncContextImpl(Request request) {
         if (log.isDebugEnabled()) {
             logDebug("Constructor");
@@ -103,11 +103,11 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
             }
         }
     }
-    
+
     public boolean timeout() throws IOException {
         AtomicBoolean result = new AtomicBoolean();
         request.getCoyoteRequest().action(ActionCode.ASYNC_TIMEOUT, result);
-        
+
         if (result.get()) {
             boolean listenerInvoked = false;
             List<AsyncListenerWrapper> listenersCopy =
@@ -179,7 +179,7 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
                 }
             }
         };
-        
+
         this.dispatch = run;
         this.request.getCoyoteRequest().action(ActionCode.ASYNC_DISPATCH, null);
     }
@@ -205,7 +205,7 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
         Runnable wrapper = new RunnableWrapper(run, context);
         this.request.getCoyoteRequest().action(ActionCode.ASYNC_RUN, wrapper);
     }
-    
+
     @Override
     public void addListener(AsyncListener listener) {
         check();
@@ -250,7 +250,7 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
         }
         return listener;
     }
-    
+
     public void recycle() {
         if (log.isDebugEnabled()) {
             logDebug("recycle    ");
@@ -276,7 +276,7 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
 
     public void setStarted(Context context, ServletRequest request,
             ServletResponse response, boolean originalRequestResponse) {
-        
+
         this.request.getCoyoteRequest().action(
                 ActionCode.ASYNC_START, this);
 
@@ -285,7 +285,7 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
         this.servletResponse = response;
         this.hasOriginalRequestAndResponse = originalRequestResponse;
         this.event = new AsyncEvent(this, request, response);
-        
+
         List<AsyncListenerWrapper> listenersCopy =
             new ArrayList<AsyncListenerWrapper>();
         listenersCopy.addAll(listeners);
@@ -327,7 +327,7 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
         }
     }
 
-    
+
     @Override
     public long getTimeout() {
         check();
@@ -362,7 +362,7 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
         }
     }
 
-    
+
     private void logDebug(String method) {
         String rHashCode;
         String crHashCode;
@@ -424,7 +424,7 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
                 instanceManager = new DefaultInstanceManager(null,
                         new HashMap<String, Map<String, String>>(),
                         context,
-                        getClass().getClassLoader()); 
+                        getClass().getClassLoader());
             }
         }
         return instanceManager;
@@ -440,12 +440,12 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
     private static class DebugException extends Exception {
         private static final long serialVersionUID = 1L;
     }
-    
+
     private static class RunnableWrapper implements Runnable {
 
         private Runnable wrapped = null;
         private Context context = null;
-        
+
         public RunnableWrapper(Runnable wrapped, Context ctxt) {
             this.wrapped = wrapped;
             this.context = ctxt;
@@ -460,7 +460,7 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
             } else {
                 oldCL = Thread.currentThread().getContextClassLoader();
             }
-            
+
             try {
                 if (Globals.IS_SECURITY_ENABLED) {
                     PrivilegedAction<Void> pa = new PrivilegedSetTccl(
@@ -480,7 +480,7 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
                 }
             }
         }
-        
+
     }
 
 

==================================================
Constants.java
index 9c274ed000..e90aeb69af 100644
--- a/java/org/apache/catalina/core/AsyncListenerWrapper.java
+++ b/java/org/apache/catalina/core/AsyncListenerWrapper.java
@@ -22,20 +22,20 @@ import javax.servlet.AsyncEvent;
 import javax.servlet.AsyncListener;
 
 /**
- * TODO SERVLET3 - async 
+ * TODO SERVLET3 - async
  * @author fhanik
  *
  */
 public class AsyncListenerWrapper {
 
     private AsyncListener listener = null;
-    
-    
+
+
     public void fireOnStartAsync(AsyncEvent event) throws IOException {
         listener.onStartAsync(event);
     }
 
-    
+
     public void fireOnComplete(AsyncEvent event) throws IOException {
         listener.onComplete(event);
     }
@@ -45,7 +45,7 @@ public class AsyncListenerWrapper {
         listener.onTimeout(event);
     }
 
-    
+
     public void fireOnError(AsyncEvent event) throws IOException {
         listener.onError(event);
     }
@@ -55,7 +55,7 @@ public class AsyncListenerWrapper {
         return listener;
     }
 
-    
+
     public void setListener(AsyncListener listener) {
         this.listener = listener;
     }

==================================================
ContainerBase.java
index 25d86b45fb..9532c23246 100644
--- a/java/org/apache/catalina/core/Constants.java
+++ b/java/org/apache/catalina/core/Constants.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
JreMemoryLeakPreventionListener.java
index 4880445ecf..f8d6fbef27 100644
--- a/java/org/apache/catalina/core/ContainerBase.java
+++ b/java/org/apache/catalina/core/ContainerBase.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -112,9 +112,9 @@ import org.apache.tomcat.util.res.StringManager;
  * </table>
  * Subclasses that fire additional events should document them in the
  * class comments of the implementation class.
- * 
- * TODO: Review synchronisation around background processing. See bug 47024. 
- * 
+ *
+ * TODO: Review synchronisation around background processing. See bug 47024.
+ *
  * @author Craig R. McClanahan
  */
 public abstract class ContainerBase extends LifecycleMBeanBase
@@ -185,7 +185,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
      * Associated logger name.
      */
     protected String logName = null;
-    
+
 
     /**
      * The Manager implementation with which this Container is associated.
@@ -198,7 +198,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
      */
     protected Cluster cluster = null;
 
-    
+
     /**
      * The human-readable name of this Container.
      */
@@ -279,10 +279,10 @@ public abstract class ContainerBase extends LifecycleMBeanBase
     /**
      * Get the delay between the invocation of the backgroundProcess method on
      * this container and its children. Child containers will not be invoked
-     * if their delay value is not negative (which would mean they are using 
-     * their own thread). Setting this to a positive value will cause 
-     * a thread to be spawn. After waiting the specified amount of time, 
-     * the thread will invoke the executePeriodic method on this container 
+     * if their delay value is not negative (which would mean they are using
+     * their own thread). Setting this to a positive value will cause
+     * a thread to be spawn. After waiting the specified amount of time,
+     * the thread will invoke the executePeriodic method on this container
      * and all its children.
      */
     @Override
@@ -294,8 +294,8 @@ public abstract class ContainerBase extends LifecycleMBeanBase
     /**
      * Set the delay between the invocation of the execute method on this
      * container and its children.
-     * 
-     * @param delay The delay in seconds between the invocation of 
+     *
+     * @param delay The delay in seconds between the invocation of
      *              backgroundProcess methods
      */
     @Override
@@ -727,8 +727,8 @@ public abstract class ContainerBase extends LifecycleMBeanBase
     @Override
     public synchronized void setResources(DirContext resources) {
         // Called from StandardContext.setResources()
-        //              <- StandardContext.start() 
-        //              <- ContainerBase.addChildInternal() 
+        //              <- StandardContext.start()
+        //              <- ContainerBase.addChildInternal()
 
         // Change components if necessary
         DirContext oldResources = this.resources;
@@ -886,7 +886,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
     public ContainerListener[] findContainerListeners() {
 
         synchronized (listeners) {
-            ContainerListener[] results = 
+            ContainerListener[] results =
                 new ContainerListener[listeners.size()];
             return listeners.toArray(results);
         }
@@ -930,13 +930,13 @@ public abstract class ContainerBase extends LifecycleMBeanBase
         if (child == null) {
             return;
         }
-        
+
         synchronized(children) {
             if (children.get(child.getName()) == null)
                 return;
             children.remove(child.getName());
         }
-        
+
         try {
             if (child.getState().isAvailable()) {
                 child.stop();
@@ -944,9 +944,9 @@ public abstract class ContainerBase extends LifecycleMBeanBase
         } catch (LifecycleException e) {
             log.error("ContainerBase.removeChild: stop: ", e);
         }
-        
+
         fireContainerEvent(REMOVE_CHILD_EVENT, child);
-        
+
         try {
             // child.destroy() may have already been called which would have
             // triggered this call. If that is the case, no need to destroy the
@@ -1104,7 +1104,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
         super.destroyInternal();
     }
 
-    
+
     /**
      * Check this container for an access log and if none is found, look to the
      * parent. If there is no parent and still none is found, use the NoOp
@@ -1113,14 +1113,14 @@ public abstract class ContainerBase extends LifecycleMBeanBase
     @Override
     public void logAccess(Request request, Response response, long time,
             boolean useDefault) {
-        
+
         boolean logged = false;
-        
+
         if (getAccessLog() != null) {
             getAccessLog().log(request, response, time);
             logged = true;
         }
-        
+
         if (getParent() != null) {
             // No need to use default logger once request/response has been logged
             // once
@@ -1130,7 +1130,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
 
     @Override
     public AccessLog getAccessLog() {
-        
+
         if (accessLogScanComplete) {
             return accessLog;
         }
@@ -1186,7 +1186,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
      */
     @Override
     public void backgroundProcess() {
-        
+
         if (!getState().isAvailable())
             return;
 
@@ -1194,28 +1194,28 @@ public abstract class ContainerBase extends LifecycleMBeanBase
             try {
                 cluster.backgroundProcess();
             } catch (Exception e) {
-                log.warn(sm.getString("containerBase.backgroundProcess.cluster", cluster), e);                
+                log.warn(sm.getString("containerBase.backgroundProcess.cluster", cluster), e);
             }
         }
         if (loader != null) {
             try {
                 loader.backgroundProcess();
             } catch (Exception e) {
-                log.warn(sm.getString("containerBase.backgroundProcess.loader", loader), e);                
+                log.warn(sm.getString("containerBase.backgroundProcess.loader", loader), e);
             }
         }
         if (manager != null) {
             try {
                 manager.backgroundProcess();
             } catch (Exception e) {
-                log.warn(sm.getString("containerBase.backgroundProcess.manager", manager), e);                
+                log.warn(sm.getString("containerBase.backgroundProcess.manager", manager), e);
             }
         }
         if (realm != null) {
             try {
                 realm.backgroundProcess();
             } catch (Exception e) {
-                log.warn(sm.getString("containerBase.backgroundProcess.realm", realm), e);                
+                log.warn(sm.getString("containerBase.backgroundProcess.realm", realm), e);
             }
         }
         Valve current = pipeline.getFirst();
@@ -1223,7 +1223,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
             try {
                 current.backgroundProcess();
             } catch (Exception e) {
-                log.warn(sm.getString("containerBase.backgroundProcess.valve", current), e);                
+                log.warn(sm.getString("containerBase.backgroundProcess.valve", current), e);
             }
             current = current.getNext();
         }
@@ -1275,16 +1275,16 @@ public abstract class ContainerBase extends LifecycleMBeanBase
             } else if (name.startsWith("##")) {
                 name = "/" + name;
             }
-            loggerName = "[" + name + "]" 
+            loggerName = "[" + name + "]"
                 + ((loggerName != null) ? ("." + loggerName) : "");
             current = current.getParent();
         }
         logName = ContainerBase.class.getName() + "." + loggerName;
         return logName;
-        
+
     }
 
-    
+
     // -------------------- JMX and Registration  --------------------
 
     @Override
@@ -1305,7 +1305,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
         return result;
     }
 
-    
+
     // -------------------- Background Thread --------------------
 
     /**
@@ -1354,7 +1354,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
 
 
     /**
-     * Private thread class to invoke the backgroundProcess method 
+     * Private thread class to invoke the backgroundProcess method
      * of this container and its children after a fixed delay.
      */
     protected class ContainerBackgroundProcessor implements Runnable {
@@ -1369,7 +1369,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
                 }
                 if (!threadDone) {
                     Container parent = (Container) getMappingObject();
-                    ClassLoader cl = 
+                    ClassLoader cl =
                         Thread.currentThread().getContextClassLoader();
                     if (parent.getLoader() != null) {
                         cl = parent.getLoader().getClassLoader();

==================================================
NamingContextListener.java
index 7b44627c31..ef4490aae5 100644
--- a/java/org/apache/catalina/core/LocalStrings_es.properties
+++ b/java/org/apache/catalina/core/LocalStrings_es.properties
@@ -130,7 +130,7 @@ standardContext.notStarted = A\u00FAn no se ha arrancado el Contexto [{0}]
 standardContext.notWrapper = El Hijo de un Contexto debe de ser un Arropador (Wrapper)
 standardContext.parameter.duplicate = Duplicado par\u00E1metro de inicializaci\u00F3n de contexto [{0}]
 standardContext.parameter.required = Es necesario poner nombre de par\u00E1metro y valor de par\u00E1metro
-standardContext.pathInvalid = Una ruta de contexto debe de ser o una cadena vac\u00EDa o comenzar con "/". La ruta [{0}] no cumple con estos criterios y ha sido cambiada por [{1}] 
+standardContext.pathInvalid = Una ruta de contexto debe de ser o una cadena vac\u00EDa o comenzar con "/". La ruta [{0}] no cumple con estos criterios y ha sido cambiada por [{1}]
 standardContext.reloadingCompleted = Se ha completado la Regarga de este Contexto
 standardContext.reloadingFailed = Fall\u00F3 la recarga de este Contexto debido a errores previos
 standardContext.reloadingStarted = Ha comenzado la recarga de Contexto [{0}]
@@ -245,8 +245,8 @@ standardWrapper.unloading = No puedo reservar espacio para servlet {0} porque es
 standardWrapper.waiting = Esperando por {0} instancia(s) para recuperar su espacio reservado
 threadLocalLeakPreventionListener.lifecycleEvent.error = Excepci\u00F3n procesando evento de ciclo de vida {0}
 threadLocalLeakPreventionListener.containerEvent.error = Excepci\u00F3n procesando evento de contenedor {0}
-defaultInstanceManager.restrictedServletsResource = No se ha hallado el fichero de propiedades restringidas de servlets 
+defaultInstanceManager.restrictedServletsResource = No se ha hallado el fichero de propiedades restringidas de servlets
 defaultInstanceManager.privilegedServlet = El Servlet de clase {0} es privilegiado y no puede ser cargado mediante esta aplicaci\u00F3n
-defaultInstanceManager.restrictedFiltersResource = No se ha hallado el fichero de propiedades restringidas de filtros 
+defaultInstanceManager.restrictedFiltersResource = No se ha hallado el fichero de propiedades restringidas de filtros
 defaultInstanceManager.privilegedFilter = El filtro de clase {0} es privilegiado y no puede ser cargado mediante esta apliaci\u00F3n web
-defaultInstanceManager.restrictedListenersResources = No se ha hallado el fichero de propiedades restringidas de escuchadores 
+defaultInstanceManager.restrictedListenersResources = No se ha hallado el fichero de propiedades restringidas de escuchadores

==================================================
StandardContext.java
index 8ab2c294f9..7974f0bb16 100644
--- a/java/org/apache/catalina/core/NamingContextListener.java
+++ b/java/org/apache/catalina/core/NamingContextListener.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -89,8 +89,8 @@ public class NamingContextListener
 
 
     protected Log logger = log;
-    
-    
+
+
     /**
      * Name of the associated naming context.
      */
@@ -132,13 +132,13 @@ public class NamingContextListener
      */
     protected javax.naming.Context envCtx = null;
 
-    
+
     /**
      * Objectnames hashtable.
      */
     protected HashMap<String, ObjectName> objectNames =
         new HashMap<String, ObjectName>();
-    
+
 
     /**
      * The string manager for this package.
@@ -167,14 +167,14 @@ public class NamingContextListener
         this.name = name;
     }
 
-    
+
     /**
      * Return the comp context.
      */
     public javax.naming.Context getCompContext() {
         return this.compCtx;
     }
-    
+
 
     /**
      * Return the env context.
@@ -182,7 +182,7 @@ public class NamingContextListener
     public javax.naming.Context getEnvContext() {
         return this.envCtx;
     }
-    
+
 
     /**
      * Return the associated naming context.
@@ -249,7 +249,7 @@ public class NamingContextListener
                 ContextAccessController.setReadOnly(getName());
                 try {
                     ContextBindings.bindClassLoader
-                        (container, container, 
+                        (container, container,
                          ((Container) container).getLoader().getClassLoader());
                 } catch (NamingException e) {
                     logger.error(sm.getString("naming.bindFailed", e));
@@ -261,7 +261,7 @@ public class NamingContextListener
                     (namingContext);
                 try {
                     ContextBindings.bindClassLoader
-                        (container, container, 
+                        (container, container,
                          this.getClass().getClassLoader());
                 } catch (NamingException e) {
                     logger.error(sm.getString("naming.bindFailed", e));
@@ -285,19 +285,19 @@ public class NamingContextListener
 
             if (container instanceof Context) {
                 ContextBindings.unbindClassLoader
-                    (container, container, 
+                    (container, container,
                      ((Container) container).getLoader().getClassLoader());
             }
 
             if (container instanceof Server) {
                 namingResources.removePropertyChangeListener(this);
                 ContextBindings.unbindClassLoader
-                    (container, container, 
+                    (container, container,
                      this.getClass().getClassLoader());
             }
 
             ContextAccessController.unsetSecurityToken(getName(), container);
-            
+
             // unregister mbeans.
             Collection<ObjectName> names = objectNames.values();
             for (ObjectName objectName : names) {
@@ -348,7 +348,7 @@ public class NamingContextListener
 
             String environmentName = (String) event.getData();
             if (environmentName != null) {
-                ContextEnvironment env = 
+                ContextEnvironment env =
                     namingResources.findEnvironment(environmentName);
                 addEnvironment(env);
             }
@@ -357,7 +357,7 @@ public class NamingContextListener
 
             String localEjbName = (String) event.getData();
             if (localEjbName != null) {
-                ContextLocalEjb localEjb = 
+                ContextLocalEjb localEjb =
                     namingResources.findLocalEjb(localEjbName);
                 addLocalEjb(localEjb);
             }
@@ -366,7 +366,7 @@ public class NamingContextListener
 
             String resourceName = (String) event.getData();
             if (resourceName != null) {
-                ContextResource resource = 
+                ContextResource resource =
                     namingResources.findResource(resourceName);
                 addResource(resource);
             }
@@ -375,7 +375,7 @@ public class NamingContextListener
 
             String resourceLinkName = (String) event.getData();
             if (resourceLinkName != null) {
-                ContextResourceLink resourceLink = 
+                ContextResourceLink resourceLink =
                     namingResources.findResourceLink(resourceLinkName);
                 addResourceLink(resourceLink);
             }
@@ -384,7 +384,7 @@ public class NamingContextListener
 
             String resourceEnvRefName = (String) event.getData();
             if (resourceEnvRefName != null) {
-                ContextResourceEnvRef resourceEnvRef = 
+                ContextResourceEnvRef resourceEnvRef =
                     namingResources.findResourceEnvRef(resourceEnvRefName);
                 addResourceEnvRef(resourceEnvRef);
             }
@@ -393,7 +393,7 @@ public class NamingContextListener
 
             String serviceName = (String) event.getData();
             if (serviceName != null) {
-                ContextService service = 
+                ContextService service =
                     namingResources.findService(serviceName);
                 addService(service);
             }
@@ -556,14 +556,14 @@ public class NamingContextListener
             }
         } else if (name.equals("resourceEnvRef")) {
             if (oldValue != null) {
-                ContextResourceEnvRef resourceEnvRef = 
+                ContextResourceEnvRef resourceEnvRef =
                     (ContextResourceEnvRef) oldValue;
                 if (resourceEnvRef.getName() != null) {
                     removeResourceEnvRef(resourceEnvRef.getName());
                 }
             }
             if (newValue != null) {
-                ContextResourceEnvRef resourceEnvRef = 
+                ContextResourceEnvRef resourceEnvRef =
                     (ContextResourceEnvRef) newValue;
                 if (resourceEnvRef.getName() != null) {
                     addResourceEnvRef(resourceEnvRef);
@@ -627,7 +627,7 @@ public class NamingContextListener
         }
 
         // Resource links
-        ContextResourceLink[] resourceLinks = 
+        ContextResourceLink[] resourceLinks =
             namingResources.findResourceLinks();
         for (i = 0; i < resourceLinks.length; i++) {
             addResourceLink(resourceLinks[i]);
@@ -646,7 +646,7 @@ public class NamingContextListener
         }
 
         // Environment entries
-        ContextEnvironment[] contextEnvironments = 
+        ContextEnvironment[] contextEnvironments =
             namingResources.findEnvironments();
         for (i = 0; i < contextEnvironments.length; i++) {
             addEnvironment(contextEnvironments[i]);
@@ -680,7 +680,7 @@ public class NamingContextListener
                     }
                 }
             } catch (NameAlreadyBoundException e) {
-                // Ignore because UserTransaction was obviously 
+                // Ignore because UserTransaction was obviously
                 // added via ResourceLink
             } catch (NamingException e) {
                 logger.error(sm.getString("naming.bindFailed", e));
@@ -690,7 +690,7 @@ public class NamingContextListener
         // Binding the resources directory context
         if (container instanceof Context) {
             try {
-                compCtx.bind("Resources", 
+                compCtx.bind("Resources",
                              ((Container) container).getResources());
             } catch (NamingException e) {
                 logger.error(sm.getString("naming.bindFailed", e));
@@ -720,30 +720,30 @@ public class NamingContextListener
         if (domain == null) {
             domain = "Catalina";
         }
-        
+
         ObjectName name = null;
         String quotedResourceName = ObjectName.quote(resource.getName());
-        if (container instanceof Server) {        
+        if (container instanceof Server) {
             name = new ObjectName(domain + ":type=DataSource" +
-                        ",class=" + resource.getType() + 
+                        ",class=" + resource.getType() +
                         ",name=" + quotedResourceName);
-        } else if (container instanceof Context) {                    
+        } else if (container instanceof Context) {
             String contextName = ((Context)container).getName();
             if (!contextName.startsWith("/"))
                 contextName = "/" + contextName;
             Host host = (Host) ((Context)container).getParent();
             name = new ObjectName(domain + ":type=DataSource" +
-                        ",context=" + contextName + 
+                        ",context=" + contextName +
                         ",host=" + host.getName() +
                         ",class=" + resource.getType() +
                         ",name=" + quotedResourceName);
         }
-        
+
         return (name);
 
     }
 
-    
+
     /**
      * Set the specified EJBs in the naming context.
      */
@@ -890,7 +890,7 @@ public class NamingContextListener
                     wsdlURL = ((Context) container).
                                                     getServletContext().
                                                     getResource("/" + service.getWsdlfile());
-                    logger.debug("  Changing service ref wsdl file for /" 
+                    logger.debug("  Changing service ref wsdl file for /"
                                 + service.getWsdlfile());
                 } catch (MalformedURLException e) {
                     logger.error(sm.getString("naming.wsdlFailed", e));
@@ -924,7 +924,7 @@ public class NamingContextListener
                     jaxrpcURL = ((Context) container).
                                                     getServletContext().
                                                     getResource("/" + service.getJaxrpcmappingfile());
-                    logger.debug("  Changing service ref jaxrpc file for /" 
+                    logger.debug("  Changing service ref jaxrpc file for /"
                                 + service.getJaxrpcmappingfile());
                 } catch (MalformedURLException e) {
                     logger.error(sm.getString("naming.wsdlFailed", e));
@@ -981,7 +981,7 @@ public class NamingContextListener
 
         try {
             if (logger.isDebugEnabled()) {
-                logger.debug("  Adding service ref " 
+                logger.debug("  Adding service ref "
                              + service.getName() + "  " + ref);
             }
             createSubcontexts(envCtx, service.getName());
@@ -1013,7 +1013,7 @@ public class NamingContextListener
         }
         try {
             if (logger.isDebugEnabled()) {
-                logger.debug("  Adding resource ref " 
+                logger.debug("  Adding resource ref "
                              + resource.getName() + "  " + ref);
             }
             createSubcontexts(envCtx, resource.getName());
@@ -1033,7 +1033,7 @@ public class NamingContextListener
                 logger.warn(sm.getString("naming.jmxRegistrationFailed", e));
             }
         }
-        
+
     }
 
 
@@ -1081,8 +1081,8 @@ public class NamingContextListener
                 ref.add(refAddr);
             }
         }
-        javax.naming.Context ctx = 
-            "UserTransaction".equals(resourceLink.getName()) 
+        javax.naming.Context ctx =
+            "UserTransaction".equals(resourceLink.getName())
             ? compCtx : envCtx;
         try {
             if (logger.isDebugEnabled())

==================================================
StandardEngine.java
index 788e8a1566..b26e20899f 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -188,7 +188,7 @@ public class StandardContext extends ContainerBase
      * &lt;multipart-config&gt; element.
      */
     protected boolean allowCasualMultipartParsing = false;
-     
+
     /**
      * Control whether remaining request data will be read
      * (swallowed) even if the request violates a data size constraint.
@@ -218,33 +218,33 @@ public class StandardContext extends ContainerBase
      */
     private boolean antiJARLocking = false;
 
-    
+
     /**
      * The antiResourceLocking flag for this Context.
      */
     private boolean antiResourceLocking = false;
 
-    
+
     /**
      * The set of application listener class names configured for this
      * application, in the order they were encountered in the web.xml file.
      */
     private String applicationListeners[] = new String[0];
-    
+
     private final Object applicationListenersLock = new Object();
 
 
     /**
      * The set of instantiated application event listener objects</code>.
      */
-    private Object applicationEventListenersObjects[] = 
+    private Object applicationEventListenersObjects[] =
         new Object[0];
 
 
     /**
      * The set of instantiated application lifecycle listener objects</code>.
      */
-    private Object applicationLifecycleListenersObjects[] = 
+    private Object applicationLifecycleListenersObjects[] =
         new Object[0];
 
 
@@ -253,8 +253,8 @@ public class StandardContext extends ContainerBase
      */
     private Map<ServletContainerInitializer,Set<Class<?>>> initializers =
         new LinkedHashMap<ServletContainerInitializer,Set<Class<?>>>();
-    
-    
+
+
     /**
      * The set of application parameters defined for this application.
      */
@@ -262,13 +262,13 @@ public class StandardContext extends ContainerBase
         new ApplicationParameter[0];
 
     private final Object applicationParametersLock = new Object();
-    
+
 
     /**
-     * The broadcaster that sends j2ee notifications. 
+     * The broadcaster that sends j2ee notifications.
      */
     private NotificationBroadcasterSupport broadcaster = null;
-    
+
     /**
      * The Locale to character set mapper for this application.
      */
@@ -299,7 +299,7 @@ public class StandardContext extends ContainerBase
      */
     private volatile SecurityConstraint constraints[] =
             new SecurityConstraint[0];
-    
+
     private final Object constraintsLock = new Object();
 
 
@@ -327,12 +327,12 @@ public class StandardContext extends ContainerBase
      */
     private boolean crossContext = false;
 
-    
+
     /**
      * Encoded path.
      */
     private String encodedPath = null;
-    
+
 
     /**
      * Unencoded path for this web application.
@@ -353,13 +353,13 @@ public class StandardContext extends ContainerBase
     private String displayName = null;
 
 
-    /** 
+    /**
      * Override the default context xml location.
      */
     private String defaultContextXml;
 
 
-    /** 
+    /**
      * Override the default web xml location.
      */
     private String defaultWebXml;
@@ -433,7 +433,7 @@ public class StandardContext extends ContainerBase
     /**
      * The mapper associated with this context.
      */
-    private org.apache.tomcat.util.http.mapper.Mapper mapper = 
+    private org.apache.tomcat.util.http.mapper.Mapper mapper =
         new org.apache.tomcat.util.http.mapper.Mapper();
 
 
@@ -511,8 +511,8 @@ public class StandardContext extends ContainerBase
      * The original document root for this web application.
      */
     private String originalDocBase = null;
-    
-    
+
+
     /**
      * The privileged flag for this web application.
      */
@@ -551,7 +551,7 @@ public class StandardContext extends ContainerBase
      */
     private HashMap<String, String> servletMappings =
         new HashMap<String, String>();
-    
+
     private final Object servletMappingsLock = new Object();
 
 
@@ -564,7 +564,7 @@ public class StandardContext extends ContainerBase
      * The notification sequence number.
      */
     private AtomicLong sequenceNumber = new AtomicLong(0);
-    
+
     /**
      * The status code error pages for this web application, keyed by
      * HTTP status code (as an Integer).
@@ -695,9 +695,9 @@ public class StandardContext extends ContainerBase
     private long startTime;
     private long tldScanTime;
 
-    /** 
+    /**
      * Name of the engine. If null, the domain is used.
-     */ 
+     */
     private String j2EEApplication="none";
     private String j2EEServer="none";
 
@@ -735,34 +735,34 @@ public class StandardContext extends ContainerBase
      */
     private boolean saveConfig = true;
 
-    
+
     /**
      * The name to use for session cookies. <code>null</code> indicates that
      * the name is controlled by the application.
      */
     private String sessionCookieName;
-    
-    
+
+
     /**
      * The flag that indicates that session cookies should use HttpOnly
      */
     private boolean useHttpOnly = true;
 
-    
+
     /**
      * The domain to use for session cookies. <code>null</code> indicates that
      * the domain is controlled by the application.
      */
     private String sessionCookieDomain;
-    
-    
+
+
     /**
      * The path to use for session cookies. <code>null</code> indicates that
      * the path is controlled by the application.
      */
     private String sessionCookiePath;
-    
-    
+
+
     /**
      * Is a / added to the end of the session cookie path to ensure browsers,
      * particularly IE, don't send a session cookie for context /foo with
@@ -773,7 +773,7 @@ public class StandardContext extends ContainerBase
 
     /**
      * The Jar scanner to use to search for Jars that might contain
-     * configuration information such as TLDs or web-fragment.xml files. 
+     * configuration information such as TLDs or web-fragment.xml files.
      */
     private JarScanner jarScanner = null;
 
@@ -784,10 +784,10 @@ public class StandardContext extends ContainerBase
      * some issues reported with log4j when this option is true. Applications
      * without memory leaks using recent JVMs should operate correctly with this
      * option set to <code>false</code>. If not specified, the default value of
-     * <code>false</code> will be used. 
+     * <code>false</code> will be used.
      */
     private boolean clearReferencesStatic = false;
-    
+
     /**
      * Should Tomcat attempt to terminate threads that have been started by the
      * web application? Stopping threads is performed via the deprecated (for
@@ -823,14 +823,14 @@ public class StandardContext extends ContainerBase
      * StandardThreadExecutor of ThreadPoolExecutor be set to a positive value.
      */
     private boolean renewThreadsWhenStoppingContext = true;
-    
+
     /**
      * Should the effective web.xml be logged when the context starts?
      */
     private boolean logEffectiveWebXml = false;
 
     private int effectiveMajorVersion = 3;
-    
+
     private int effectiveMinorVersion = 0;
 
     private JspConfigDescriptor jspConfigDescriptor =
@@ -841,7 +841,7 @@ public class StandardContext extends ContainerBase
     private String webappVersion = "";
 
     private boolean addWebinfClassesResources = false;
-    
+
     private boolean fireRequestListenersOnForwards = false;
 
     /**
@@ -854,9 +854,9 @@ public class StandardContext extends ContainerBase
 
     private boolean sendRedirectBody = false;
 
-    
+
     // ----------------------------------------------------- Context Properties
-    
+
     @Override
     public boolean getSendRedirectBody() {
         return sendRedirectBody;
@@ -980,12 +980,12 @@ public class StandardContext extends ContainerBase
     public void setEffectiveMinorVersion(int effectiveMinorVersion) {
         this.effectiveMinorVersion = effectiveMinorVersion;
     }
-    
+
     @Override
     public void setLogEffectiveWebXml(boolean logEffectiveWebXml) {
         this.logEffectiveWebXml = logEffectiveWebXml;
     }
-    
+
     @Override
     public boolean getLogEffectiveWebXml() {
         return logEffectiveWebXml;
@@ -995,7 +995,7 @@ public class StandardContext extends ContainerBase
     public Authenticator getAuthenticator() {
         if (this instanceof Authenticator)
             return (Authenticator) this;
-        
+
         Pipeline pipeline = getPipeline();
         if (pipeline != null) {
             Valve basic = pipeline.getBasic();
@@ -1009,7 +1009,7 @@ public class StandardContext extends ContainerBase
         }
         return null;
     }
-    
+
     @Override
     public JarScanner getJarScanner() {
         if (jarScanner == null) {
@@ -1024,7 +1024,7 @@ public class StandardContext extends ContainerBase
         this.jarScanner = jarScanner;
     }
 
-     
+
     public InstanceManager getInstanceManager() {
        return instanceManager;
     }
@@ -1034,7 +1034,7 @@ public class StandardContext extends ContainerBase
        this.instanceManager = instanceManager;
     }
 
-    
+
     @Override
     public String getEncodedPath() {
         return encodedPath;
@@ -1173,7 +1173,7 @@ public class StandardContext extends ContainerBase
 
 
     /**
-     * Return the list of resource aliases. 
+     * Return the list of resource aliases.
      */
     public String getAliases() {
         return this.aliases;
@@ -1194,8 +1194,8 @@ public class StandardContext extends ContainerBase
                     getName()));
         }
     }
-    
-    
+
+
     /**
      * Set the current alias configuration. The list of aliases should be of the
      * form "/aliasPath1=docBase1,/aliasPath2=docBase2" where aliasPathN must
@@ -1205,11 +1205,11 @@ public class StandardContext extends ContainerBase
     public void setAliases(String aliases) {
         this.aliases = aliases;
     }
-    
-    
+
+
     /**
      * Add a ServletContainerInitializer instance to this web application.
-     * 
+     *
      * @param sci       The instance to add
      * @param classes   The classes in which the initializer expressed an
      *                  interest
@@ -1220,7 +1220,7 @@ public class StandardContext extends ContainerBase
         initializers.put(sci, classes);
     }
 
-    
+
     /**
      * Return the "follow standard delegation model" flag used to configure
      * our ClassLoader.
@@ -1315,8 +1315,8 @@ public class StandardContext extends ContainerBase
         newListeners[len] = listener;
         applicationEventListenersObjects = newListeners;
     }
-    
-    
+
+
     /**
      * Return the set of initialized application lifecycle listener objects,
      * in the order they were specified in the web application deployment
@@ -1356,7 +1356,7 @@ public class StandardContext extends ContainerBase
         applicationLifecycleListenersObjects = newListeners;
     }
 
-    
+
     /**
      * Return the antiJARLocking flag for this Context.
      */
@@ -1539,12 +1539,12 @@ public class StandardContext extends ContainerBase
                                    this.cookies);
 
     }
-    
-    
+
+
     /**
      * Gets the name to use for session cookies. Overrides any setting that
      * may be specified by the application.
-     * 
+     *
      * @return  The value of the default session cookie name or null if not
      *          specified
      */
@@ -1552,12 +1552,12 @@ public class StandardContext extends ContainerBase
     public String getSessionCookieName() {
         return sessionCookieName;
     }
-    
-    
+
+
     /**
      * Sets the name to use for session cookies. Overrides any setting that
      * may be specified by the application.
-     * 
+     *
      * @param sessionCookieName   The name to use
      */
     @Override
@@ -1568,10 +1568,10 @@ public class StandardContext extends ContainerBase
                 oldSessionCookieName, sessionCookieName);
     }
 
-    
+
     /**
      * Gets the value of the use HttpOnly cookies for session cookies flag.
-     * 
+     *
      * @return <code>true</code> if the HttpOnly flag should be set on session
      *         cookies
      */
@@ -1583,7 +1583,7 @@ public class StandardContext extends ContainerBase
 
     /**
      * Sets the use HttpOnly cookies for session cookies flag.
-     * 
+     *
      * @param useHttpOnly   Set to <code>true</code> to use HttpOnly cookies
      *                          for session cookies
      */
@@ -1595,12 +1595,12 @@ public class StandardContext extends ContainerBase
                 oldUseHttpOnly,
                 this.useHttpOnly);
     }
-    
-    
+
+
     /**
      * Gets the domain to use for session cookies. Overrides any setting that
      * may be specified by the application.
-     * 
+     *
      * @return  The value of the default session cookie domain or null if not
      *          specified
      */
@@ -1608,12 +1608,12 @@ public class StandardContext extends ContainerBase
     public String getSessionCookieDomain() {
         return sessionCookieDomain;
     }
-    
-    
+
+
     /**
      * Sets the domain to use for session cookies. Overrides any setting that
      * may be specified by the application.
-     * 
+     *
      * @param sessionCookieDomain   The domain to use
      */
     @Override
@@ -1623,12 +1623,12 @@ public class StandardContext extends ContainerBase
         support.firePropertyChange("sessionCookieDomain",
                 oldSessionCookieDomain, sessionCookieDomain);
     }
-    
+
 
     /**
      * Gets the path to use for session cookies. Overrides any setting that
      * may be specified by the application.
-     * 
+     *
      * @return  The value of the default session cookie path or null if not
      *          specified
      */
@@ -1636,12 +1636,12 @@ public class StandardContext extends ContainerBase
     public String getSessionCookiePath() {
         return sessionCookiePath;
     }
-    
-    
+
+
     /**
      * Sets the path to use for session cookies. Overrides any setting that
      * may be specified by the application.
-     * 
+     *
      * @param sessionCookiePath   The path to use
      */
     @Override
@@ -1651,7 +1651,7 @@ public class StandardContext extends ContainerBase
         support.firePropertyChange("sessionCookiePath",
                 oldSessionCookiePath, sessionCookiePath);
     }
-    
+
 
     @Override
     public boolean getSessionCookiePathUsesTrailingSlash() {
@@ -1698,12 +1698,12 @@ public class StandardContext extends ContainerBase
         return defaultContextXml;
     }
 
-    /** 
+    /**
      * Set the location of the default context xml that will be used.
      * If not absolute, it'll be made relative to the engine's base dir
      * ( which defaults to catalina.base system property ).
      *
-     * @param defaultContextXml The default web xml 
+     * @param defaultContextXml The default web xml
      */
     public void setDefaultContextXml(String defaultContextXml) {
         this.defaultContextXml = defaultContextXml;
@@ -1713,12 +1713,12 @@ public class StandardContext extends ContainerBase
         return defaultWebXml;
     }
 
-    /** 
+    /**
      * Set the location of the default web xml that will be used.
      * If not absolute, it'll be made relative to the engine's base dir
      * ( which defaults to catalina.base system property ).
      *
-     * @param defaultWebXml The default web xml 
+     * @param defaultWebXml The default web xml
      */
     public void setDefaultWebXml(String defaultWebXml) {
         this.defaultWebXml = defaultWebXml;
@@ -1904,12 +1904,12 @@ public class StandardContext extends ContainerBase
     public boolean getIgnoreAnnotations() {
         return this.ignoreAnnotations;
     }
-    
-    
+
+
     /**
-     * Set the boolean on the annotations parsing for this web 
+     * Set the boolean on the annotations parsing for this web
      * application.
-     * 
+     *
      * @param ignoreAnnotations The boolean on the annotations parsing
      */
     @Override
@@ -1919,8 +1919,8 @@ public class StandardContext extends ContainerBase
         support.firePropertyChange("ignoreAnnotations", oldIgnoreAnnotations,
                 this.ignoreAnnotations);
     }
-    
-    
+
+
     /**
      * Return the login configuration descriptor for this web application.
      */
@@ -2019,7 +2019,7 @@ public class StandardContext extends ContainerBase
         }
         support.firePropertyChange("namingResources",
                                    oldNamingResources, this.namingResources);
-        
+
         if (getState() == LifecycleState.NEW ||
                 getState() == LifecycleState.INITIALIZING ||
                 getState() == LifecycleState.INITIALIZED) {
@@ -2030,12 +2030,12 @@ public class StandardContext extends ContainerBase
             // file
             // If started now, a second start will be attempted when the context
             // starts
-            
+
             // In both cases, return and let context init the namingResources
             // when it starts
             return;
         }
-        
+
         if (oldNamingResources != null) {
             try {
                 oldNamingResources.stop();
@@ -2066,7 +2066,7 @@ public class StandardContext extends ContainerBase
 
     /**
      * Set the context path for this Context.
-     * 
+     *
      * @param path The new context path
      */
     @Override
@@ -2160,7 +2160,7 @@ public class StandardContext extends ContainerBase
 
         this.originalDocBase = docBase;
     }
-    
+
 
     /**
      * Return the parent class loader (if any) for this web application.
@@ -2179,7 +2179,7 @@ public class StandardContext extends ContainerBase
         return (ClassLoader.getSystemClassLoader());
     }
 
-    
+
     /**
      * Return the privileged flag for this web application.
      */
@@ -2362,7 +2362,7 @@ public class StandardContext extends ContainerBase
     /**
      * Set the value of the unloadDelay flag, which represents the amount
      * of ms that the container will wait when unloading servlets.
-     * Setting this to a small value may cause more requests to fail 
+     * Setting this to a small value may cause more requests to fail
      * to complete when stopping a web application.
      *
      * @param unloadDelay The new value
@@ -2424,7 +2424,7 @@ public class StandardContext extends ContainerBase
         this.wrapperClassName = wrapperClassName;
 
         try {
-            wrapperClass = Class.forName(wrapperClassName);         
+            wrapperClass = Class.forName(wrapperClassName);
             if (!StandardWrapper.class.isAssignableFrom(wrapperClass)) {
                 throw new IllegalArgumentException(
                     sm.getString("standardContext.invalidWrapperClass",
@@ -2478,7 +2478,7 @@ public class StandardContext extends ContainerBase
 
     }
 
-    
+
     @Override
     public JspConfigDescriptor getJspConfigDescriptor() {
         return jspConfigDescriptor;
@@ -2516,9 +2516,9 @@ public class StandardContext extends ContainerBase
 
     /** Get the absolute path to the work dir.
      *  To avoid duplication.
-     * 
+     *
      * @return The work path
-     */ 
+     */
     public String getWorkPath() {
         if (getWorkDir() == null) {
             return null;
@@ -2538,7 +2538,7 @@ public class StandardContext extends ContainerBase
         }
         return workDir.getAbsolutePath();
     }
-    
+
     /**
      * Return the work directory for this Context.
      */
@@ -2913,7 +2913,7 @@ public class StandardContext extends ContainerBase
         fireContainerEvent("addFilterMap", filterMap);
     }
 
-    
+
     /**
      * Add a filter mapping to this Context before the mappings defined in the
      * deployment descriptor but after any other mappings added via this method.
@@ -2945,8 +2945,8 @@ public class StandardContext extends ContainerBase
             throw new IllegalArgumentException
                 (sm.getString("standardContext.filterMap.name", filterName));
 
-        if (!filterMap.getMatchAllServletNames() && 
-            !filterMap.getMatchAllUrlPatterns() && 
+        if (!filterMap.getMatchAllServletNames() &&
+            !filterMap.getMatchAllUrlPatterns() &&
             (servletNames.length == 0) && (urlPatterns.length == 0))
             throw new IllegalArgumentException
                 (sm.getString("standardContext.filterMap.either"));
@@ -3489,8 +3489,8 @@ public class StandardContext extends ContainerBase
     public Context findMappingObject() {
         return (Context) getMappingObject();
     }
-    
-    
+
+
     /**
      * Return the message destination with the specified name, if any;
      * otherwise, return <code>null</code>.
@@ -3758,7 +3758,7 @@ public class StandardContext extends ContainerBase
 
 
     /**
-     * Return the set of watched resources for this Context. If none are 
+     * Return the set of watched resources for this Context. If none are
      * defined, a zero length array will be returned.
      */
     @Override
@@ -3767,8 +3767,8 @@ public class StandardContext extends ContainerBase
             return watchedResources;
         }
     }
-    
-    
+
+
     /**
      * Return the set of welcome files defined for this Context.  If none are
      * defined, a zero-length array is returned.
@@ -4241,12 +4241,12 @@ public class StandardContext extends ContainerBase
     /**
      * Remove the specified watched resource name from the list associated
      * with this Context.
-     * 
+     *
      * @param name Name of the watched resource to be removed
      */
     @Override
     public void removeWatchedResource(String name) {
-        
+
         synchronized (watchedResourcesLock) {
 
             // Make sure this watched resource is currently present
@@ -4274,8 +4274,8 @@ public class StandardContext extends ContainerBase
         fireContainerEvent("removeWatchedResource", name);
 
     }
-    
-    
+
+
     /**
      * Remove the specified welcome file name from the list recognized
      * by this Context.
@@ -4404,7 +4404,7 @@ public class StandardContext extends ContainerBase
      * StandardContext
      */
     public long getProcessingTime() {
-        
+
         long result = 0;
 
         Container[] children = findChildren();
@@ -4491,7 +4491,7 @@ public class StandardContext extends ContainerBase
         /**
          * Add a filter mapping at the end of the current set of filter
          * mappings.
-         * 
+         *
          * @param filterMap
          *            The filter mapping to be added
          */
@@ -4506,7 +4506,7 @@ public class StandardContext extends ContainerBase
         /**
          * Add a filter mapping before the mappings defined in the deployment
          * descriptor but after any other mappings added via this method.
-         * 
+         *
          * @param filterMap
          *            The filter mapping to be added
          */
@@ -4700,7 +4700,7 @@ public class StandardContext extends ContainerBase
         // Ensure context is not null
         getServletContext();
         context.setNewServletContextListenerAllowed(false);
-        
+
         Object instances[] = getApplicationLifecycleListeners();
         if (instances == null)
             return (ok);
@@ -4796,7 +4796,7 @@ public class StandardContext extends ContainerBase
                 }
             }
         }
-        
+
         setApplicationEventListeners(null);
         setApplicationLifecycleListeners(null);
 
@@ -4837,7 +4837,7 @@ public class StandardContext extends ContainerBase
                 ((BaseDirContext) webappResources).allocate();
                 // Alias support
                 ((BaseDirContext) webappResources).setAliases(getAliases());
-                
+
                 if (effectiveMajorVersion >=3 && addWebinfClassesResources) {
                     try {
                         DirContext webInfCtx =
@@ -4858,8 +4858,8 @@ public class StandardContext extends ContainerBase
                 if (!contextName.startsWith("/")) {
                     contextName = "/" + contextName;
                 }
-                ObjectName resourcesName = 
-                    new ObjectName(this.getDomain() + ":type=Cache,host=" 
+                ObjectName resourcesName =
+                    new ObjectName(this.getDomain() + ":type=Cache,host="
                                    + getHostname() + ",context=" + contextName);
                 Registry.getRegistry(null, null).registerComponent
                     (proxyDirContext.getCache(), resourcesName, null);
@@ -4897,10 +4897,10 @@ public class StandardContext extends ContainerBase
                     if (!contextName.startsWith("/")) {
                         contextName = "/" + contextName;
                     }
-                    ObjectName resourcesName = 
+                    ObjectName resourcesName =
                         new ObjectName(this.getDomain()
-                                       + ":type=Cache,host=" 
-                                       + getHostname() + ",context=" 
+                                       + ":type=Cache,host="
+                                       + getHostname() + ",context="
                                        + contextName);
                     Registry.getRegistry(null, null)
                         .unregisterComponent(resourcesName);
@@ -4976,7 +4976,7 @@ public class StandardContext extends ContainerBase
         if(log.isDebugEnabled())
             log.debug("Starting " + getBaseName());
 
-        // Send j2ee.state.starting notification 
+        // Send j2ee.state.starting notification
         if (this.getObjectName() != null) {
             Notification notification = new Notification("j2ee.state.starting",
                     this.getObjectName(), sequenceNumber.getAndIncrement());
@@ -4991,7 +4991,7 @@ public class StandardContext extends ContainerBase
         if (namingResources != null) {
             namingResources.start();
         }
-        
+
         // Add missing components as necessary
         if (webappResources == null) {   // (1) Required by Loader
             if (log.isDebugEnabled())
@@ -5056,19 +5056,19 @@ public class StandardContext extends ContainerBase
                 setNamingContextListener(ncl);
             }
         }
-        
+
         // Standard container startup
         if (log.isDebugEnabled())
             log.debug("Processing standard container startup");
 
-        
+
         // Binding thread
         ClassLoader oldCCL = bindThread();
 
         try {
 
             if (ok) {
-                
+
                 // Start our subordinate components, if any
                 if ((loader != null) && (loader instanceof Lifecycle))
                     ((Lifecycle) loader).start();
@@ -5080,13 +5080,13 @@ public class StandardContext extends ContainerBase
                 unbindThread(oldCCL);
                 oldCCL = bindThread();
 
-                // Initialize logger again. Other components might have used it too early, 
+                // Initialize logger again. Other components might have used it too early,
                 // so it should be reset.
                 logger = null;
                 getLogger();
                 if ((logger != null) && (logger instanceof Lifecycle))
                     ((Lifecycle) logger).start();
-                
+
                 if ((cluster != null) && (cluster instanceof Lifecycle))
                     ((Lifecycle) cluster).start();
                 if ((realm != null) && (realm instanceof Lifecycle))
@@ -5096,7 +5096,7 @@ public class StandardContext extends ContainerBase
 
                 // Notify our interested LifecycleListeners
                 fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, null);
-                
+
                 // Start our child containers, if not already started
                 for (Container child : findChildren()) {
                     if (!child.getState().isAvailable()) {
@@ -5109,7 +5109,7 @@ public class StandardContext extends ContainerBase
                 if (pipeline instanceof Lifecycle) {
                     ((Lifecycle) pipeline).start();
                 }
-                
+
                 // Acquire clustered manager
                 Manager contextManager = null;
                 if (manager == null) {
@@ -5128,8 +5128,8 @@ public class StandardContext extends ContainerBase
                     } else {
                         contextManager = new StandardManager();
                     }
-                } 
-                
+                }
+
                 // Configure default manager if none was specified
                 if (contextManager != null) {
                     if (log.isDebugEnabled()) {
@@ -5184,7 +5184,7 @@ public class StandardContext extends ContainerBase
 
         DedicatedThreadExecutor temporaryExecutor = new DedicatedThreadExecutor();
         try {
-            
+
             // Create context attributes that will be required
             if (ok) {
                 getServletContext().setAttribute(
@@ -5229,13 +5229,13 @@ public class StandardContext extends ContainerBase
                     ok = false;
                 }
             }
-            
+
             try {
                 // Start manager
                 if ((manager != null) && (manager instanceof Lifecycle)) {
                     ((Lifecycle) getManager()).start();
                 }
-    
+
                 // Start ContainerBackgroundProcessor thread
                 super.threadStart();
             } catch(Exception e) {
@@ -5265,7 +5265,7 @@ public class StandardContext extends ContainerBase
                     ok = false;
                 }
             }
-            
+
             // Load and initialize all "load on startup" servlets
             if (ok) {
                 // we do it in a dedicated thread for memory leak protection, in
@@ -5284,7 +5284,7 @@ public class StandardContext extends ContainerBase
                     }
                 });
             }
-            
+
         } finally {
             // Unbinding thread
             unbindThread(oldCCL);
@@ -5300,16 +5300,16 @@ public class StandardContext extends ContainerBase
         }
 
         startTime=System.currentTimeMillis();
-        
-        // Send j2ee.state.running notification 
+
+        // Send j2ee.state.running notification
         if (ok && (this.getObjectName() != null)) {
-            Notification notification = 
+            Notification notification =
                 new Notification("j2ee.state.running", this.getObjectName(),
                                  sequenceNumber.getAndIncrement());
             broadcaster.sendNotification(notification);
         }
 
-        // Close all JARs right away to avoid always opening a peak number 
+        // Close all JARs right away to avoid always opening a peak number
         // of files on startup
         if (getLoader() instanceof WebappLoader) {
             ((WebappLoader) getLoader()).closeJARs(true);
@@ -5365,7 +5365,7 @@ public class StandardContext extends ContainerBase
         }
     }
 
-    
+
 
     /**
      * Merge the context initialization parameters specified in the application
@@ -5375,7 +5375,7 @@ public class StandardContext extends ContainerBase
      */
     private void mergeParameters() {
         Map<String,String> mergedParams = new HashMap<String,String>();
-        
+
         String names[] = findParameters();
         for (int i = 0; i < names.length; i++) {
             mergedParams.put(names[i], findParameter(names[i]));
@@ -5392,7 +5392,7 @@ public class StandardContext extends ContainerBase
                 mergedParams.put(params[i].getName(), params[i].getValue());
             }
         }
-        
+
         ServletContext sc = getServletContext();
         for (Map.Entry<String,String> entry : mergedParams.entrySet()) {
             sc.setInitParameter(entry.getKey(), entry.getValue());
@@ -5411,14 +5411,14 @@ public class StandardContext extends ContainerBase
     @Override
     protected synchronized void stopInternal() throws LifecycleException {
 
-        // Send j2ee.state.stopping notification 
+        // Send j2ee.state.stopping notification
         if (this.getObjectName() != null) {
-            Notification notification = 
-                new Notification("j2ee.state.stopping", this.getObjectName(), 
+            Notification notification =
+                new Notification("j2ee.state.stopping", this.getObjectName(),
                                  sequenceNumber.getAndIncrement());
             broadcaster.sendNotification(notification);
         }
-        
+
         setState(LifecycleState.STOPPING);
 
         // Binding thread
@@ -5447,13 +5447,13 @@ public class StandardContext extends ContainerBase
                                 return;
                             }
                         }
-            
+
                         // Stop our filters
                         filterStop();
-            
+
                         // Stop ContainerBackgroundProcessor thread
                         threadStop();
-            
+
                         if (manager != null && manager instanceof Lifecycle &&
                                 ((Lifecycle) manager).getState().isAvailable()) {
                             try {
@@ -5463,7 +5463,7 @@ public class StandardContext extends ContainerBase
                                 return;
                             }
                         }
-            
+
                         // Stop our application listeners
                         listenerStop();
                     }finally{
@@ -5471,7 +5471,7 @@ public class StandardContext extends ContainerBase
                     }
                 }
             };
-            
+
             Thread t = new Thread(stop);
             t.setName("stop children - " + getObjectName().toString());
             t.start();
@@ -5495,11 +5495,11 @@ public class StandardContext extends ContainerBase
             // JNDI resources are unbound in CONFIGURE_STOP_EVENT so stop
             // naming resoucres before they are unbound since NamingResoucres
             // does a JNDI lookup to retrieve the resource. This needs to be
-            // after the application has finished with the resource 
+            // after the application has finished with the resource
             if (namingResources != null) {
                 namingResources.stop();
             }
-            
+
             fireLifecycleEvent(Lifecycle.CONFIGURE_STOP_EVENT, null);
 
             // Stop the Valves in our pipeline (including the basic), if any
@@ -5535,24 +5535,24 @@ public class StandardContext extends ContainerBase
 
         }
 
-        // Send j2ee.state.stopped notification 
+        // Send j2ee.state.stopped notification
         if (this.getObjectName() != null) {
-            Notification notification = 
-                new Notification("j2ee.state.stopped", this.getObjectName(), 
+            Notification notification =
+                new Notification("j2ee.state.stopped", this.getObjectName(),
                                 sequenceNumber.getAndIncrement());
             broadcaster.sendNotification(notification);
         }
-        
+
         // Reset application context
         context = null;
 
-        // This object will no longer be visible or used. 
+        // This object will no longer be visible or used.
         try {
             resetContext();
         } catch( Exception ex ) {
             log.error( "Error reseting context " + this + " " + ex, ex );
         }
-        
+
         //reset the instance manager
         instanceManager = null;
 
@@ -5562,20 +5562,20 @@ public class StandardContext extends ContainerBase
     }
 
     /** Destroy needs to clean up the context completely.
-     * 
-     * The problem is that undoing all the config in start() and restoring 
+     *
+     * The problem is that undoing all the config in start() and restoring
      * a 'fresh' state is impossible. After stop()/destroy()/init()/start()
      * we should have the same state as if a fresh start was done - i.e
-     * read modified web.xml, etc. This can only be done by completely 
+     * read modified web.xml, etc. This can only be done by completely
      * removing the context object and remapping a new one, or by cleaning
      * up everything.
-     * 
+     *
      * XXX Should this be done in stop() ?
-     * 
-     */ 
+     *
+     */
     @Override
     protected void destroyInternal() throws LifecycleException {
-        
+
         if ((manager != null) && (manager instanceof Lifecycle)) {
             ((Lifecycle) manager).destroy();
         }
@@ -5594,10 +5594,10 @@ public class StandardContext extends ContainerBase
 
         // If in state NEW when destroy is called, the object name will never
         // have been set so the notification can't be created
-        if (getObjectName() != null) { 
-            // Send j2ee.object.deleted notification 
-            Notification notification = 
-                new Notification("j2ee.object.deleted", this.getObjectName(), 
+        if (getObjectName() != null) {
+            // Send j2ee.object.deleted notification
+            Notification notification =
+                new Notification("j2ee.object.deleted", this.getObjectName(),
                                  sequenceNumber.getAndIncrement());
             broadcaster.sendNotification(notification);
         }
@@ -5612,11 +5612,11 @@ public class StandardContext extends ContainerBase
 
         super.destroyInternal();
     }
-    
+
     private void resetContext() throws Exception {
         // Restore the original state ( pre reading web.xml in start )
         // If you extend this - override this method and make sure to clean up
-        
+
         // Don't reset anything that is read from a <Context.../> element since
         // <Context .../> elements are read at initialisation will not be read
         // again for this object
@@ -5632,9 +5632,9 @@ public class StandardContext extends ContainerBase
         applicationEventListenersObjects = new Object[0];
         applicationLifecycleListenersObjects = new Object[0];
         jspConfigDescriptor = new ApplicationJspConfigDescriptor();
-        
+
         initializers.clear();
-        
+
         createdServlets.clear();
 
         if(log.isDebugEnabled())
@@ -5887,14 +5887,14 @@ public class StandardContext extends ContainerBase
     return namingContextName;
     }
 
-    
+
     /**
      * Naming context listener accessor.
      */
     public NamingContextListener getNamingContextListener() {
         return namingContextListener;
     }
-    
+
 
     /**
      * Naming context listener setter.
@@ -5902,7 +5902,7 @@ public class StandardContext extends ContainerBase
     public void setNamingContextListener(NamingContextListener namingContextListener) {
         this.namingContextListener = namingContextListener;
     }
-    
+
 
     /**
      * Return the request processing paused flag for this Context.
@@ -5933,7 +5933,7 @@ public class StandardContext extends ContainerBase
 
         if ((instances != null) && (instances.length > 0)) {
 
-            ServletRequestEvent event = 
+            ServletRequestEvent event =
                     new ServletRequestEvent(getServletContext(), request);
 
             for (int i = 0; i < instances.length; i++) {
@@ -5943,7 +5943,7 @@ public class StandardContext extends ContainerBase
                     continue;
                 ServletRequestListener listener =
                     (ServletRequestListener) instances[i];
-                
+
                 try {
                     listener.requestInitialized(event);
                 } catch (Throwable t) {
@@ -5966,7 +5966,7 @@ public class StandardContext extends ContainerBase
 
         if ((instances != null) && (instances.length > 0)) {
 
-            ServletRequestEvent event = 
+            ServletRequestEvent event =
                 new ServletRequestEvent(getServletContext(), request);
 
             for (int i = 0; i < instances.length; i++) {
@@ -5977,7 +5977,7 @@ public class StandardContext extends ContainerBase
                     continue;
                 ServletRequestListener listener =
                     (ServletRequestListener) instances[j];
-                
+
                 try {
                     listener.requestDestroyed(event);
                 } catch (Throwable t) {
@@ -6130,10 +6130,10 @@ public class StandardContext extends ContainerBase
     /**
      * JSR77 deploymentDescriptor attribute
      *
-     * @return string deployment descriptor 
+     * @return string deployment descriptor
      */
     public String getDeploymentDescriptor() {
-    
+
         InputStream stream = null;
         ServletContext servletContext = getServletContext();
         if (servletContext != null) {
@@ -6162,17 +6162,17 @@ public class StandardContext extends ContainerBase
             }
         }
 
-        return sb.toString(); 
+        return sb.toString();
     }
-    
-    
+
+
     /**
      * JSR77 servlets attribute
      *
      * @return list of all servlets ( we know about )
      */
     public String[] getServlets() {
-        
+
         String[] result = null;
 
         Container[] children = findChildren();
@@ -6185,7 +6185,7 @@ public class StandardContext extends ContainerBase
 
         return result;
     }
-    
+
 
     @Override
     protected String getObjectNameKeyProperties() {
@@ -6200,7 +6200,7 @@ public class StandardContext extends ContainerBase
 
         return keyProperties.toString();
     }
-    
+
     private String getObjectKeyPropertiesNameOnly() {
         StringBuilder result = new StringBuilder("name=//");
         String hostname = getParent().getName();
@@ -6209,7 +6209,7 @@ public class StandardContext extends ContainerBase
         } else {
             result.append(hostname);
         }
-        
+
         String contextName = getName();
         if (!contextName.startsWith("/")) {
             result.append('/');
@@ -6222,7 +6222,7 @@ public class StandardContext extends ContainerBase
     @Override
     protected void initInternal() throws LifecycleException {
         super.initInternal();
-        
+
         if (processTlds) {
             this.addLifecycleListener(new TldConfig());
         }
@@ -6232,7 +6232,7 @@ public class StandardContext extends ContainerBase
             namingResources.init();
         }
 
-        // Send j2ee.object.created notification 
+        // Send j2ee.object.created notification
         if (this.getObjectName() != null) {
             Notification notification = new Notification("j2ee.object.created",
                     this.getObjectName(), sequenceNumber.getAndIncrement());
@@ -6241,17 +6241,17 @@ public class StandardContext extends ContainerBase
     }
 
 
-    /* Remove a JMX notficationListener 
+    /* Remove a JMX notficationListener
      * @see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)
      */
     @Override
-    public void removeNotificationListener(NotificationListener listener, 
+    public void removeNotificationListener(NotificationListener listener,
             NotificationFilter filter, Object object) throws ListenerNotFoundException {
         broadcaster.removeNotificationListener(listener,filter,object);
     }
-    
+
     private MBeanNotificationInfo[] notificationInfo;
-    
+
     /* Get JMX Broadcaster Info
      * @TODO use StringManager for international support!
      * @TODO This two events we not send j2ee.state.failed and j2ee.attribute.changed!
@@ -6266,7 +6266,7 @@ public class StandardContext extends ContainerBase
                     "j2ee.object.created"},
                     Notification.class.getName(),
                     "web application is created"
-                    ), 
+                    ),
                     new MBeanNotificationInfo(new String[] {
                     "j2ee.state.starting"},
                     Notification.class.getName(),
@@ -6293,34 +6293,34 @@ public class StandardContext extends ContainerBase
                     "web application is deleted"
                     )
             };
-            
+
         }
-        
+
         return notificationInfo;
     }
-    
-    
+
+
     /* Add a JMX-NotificationListener
      * @see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)
      */
     @Override
-    public void addNotificationListener(NotificationListener listener, 
+    public void addNotificationListener(NotificationListener listener,
             NotificationFilter filter, Object object) throws IllegalArgumentException {
         broadcaster.addNotificationListener(listener,filter,object);
     }
-    
-    
+
+
     /**
-     * Remove a JMX-NotificationListener 
+     * Remove a JMX-NotificationListener
      * @see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)
      */
     @Override
-    public void removeNotificationListener(NotificationListener listener) 
+    public void removeNotificationListener(NotificationListener listener)
     throws ListenerNotFoundException {
         broadcaster.removeNotificationListener(listener);
     }
-    
-    
+
+
     // ------------------------------------------------------------- Attributes
 
 
@@ -6336,7 +6336,7 @@ public class StandardContext extends ContainerBase
 
     /**
      * Return the naming resources associated with this web application.
-     * FIXME: Fooling introspection ... 
+     * FIXME: Fooling introspection ...
      */
     public javax.naming.directory.DirContext findStaticResources() {
 
@@ -6361,7 +6361,7 @@ public class StandardContext extends ContainerBase
      */
     @Override
     public void setXmlValidation(boolean webXmlValidation){
-        
+
         this.webXmlValidation = webXmlValidation;
 
     }
@@ -6395,17 +6395,17 @@ public class StandardContext extends ContainerBase
     @Override
     public void setXmlNamespaceAware(boolean webXmlNamespaceAware){
         this.webXmlNamespaceAware= webXmlNamespaceAware;
-    }    
+    }
 
 
     /**
      * Set the validation feature of the XML parser used when
-     * parsing tlds files. 
+     * parsing tlds files.
      * @param tldValidation true to enable xml instance validation
      */
     @Override
     public void setTldValidation(boolean tldValidation){
-        
+
         this.tldValidation = tldValidation;
 
     }
@@ -6454,70 +6454,70 @@ public class StandardContext extends ContainerBase
     @Override
     public void setTldNamespaceAware(boolean tldNamespaceAware){
         this.tldNamespaceAware= tldNamespaceAware;
-    }    
+    }
 
 
-    /** 
-     * Support for "stateManageable" JSR77 
+    /**
+     * Support for "stateManageable" JSR77
      */
     public boolean isStateManageable() {
         return true;
     }
-    
+
     public void startRecursive() throws LifecycleException {
         // nothing to start recursive, the servlets will be started by load-on-startup
         start();
     }
-    
+
     /**
      * The J2EE Server ObjectName this module is deployed on.
-     */     
+     */
     private String server = null;
-    
+
     /**
      * The Java virtual machines on which this module is running.
-     */       
+     */
     private String[] javaVMs = null;
-    
+
     public String getServer() {
         return server;
     }
-        
+
     public String setServer(String server) {
         return this.server=server;
     }
-        
+
     public String[] getJavaVMs() {
         return javaVMs;
     }
-        
+
     public String[] setJavaVMs(String[] javaVMs) {
         return this.javaVMs = javaVMs;
     }
-    
+
     /**
      * Gets the time this context was started.
      *
      * @return Time (in milliseconds since January 1, 1970, 00:00:00) when this
-     * context was started 
+     * context was started
      */
     public long getStartTime() {
         return startTime;
     }
-    
+
     public boolean isEventProvider() {
         return false;
     }
-    
+
     public boolean isStatisticsProvider() {
         return false;
     }
 
     private abstract static class RunnableWithLifecycleException
             implements Runnable {
-        
+
         protected LifecycleException le = null;
-        
+
         public LifecycleException getLifecycleException() {
             return le;
         }

==================================================
StandardHost.java
index 9e87c8ba2b..a4707b3b46 100644
--- a/java/org/apache/catalina/core/StandardEngine.java
+++ b/java/org/apache/catalina/core/StandardEngine.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -122,7 +122,7 @@ public class StandardEngine extends ContainerBase implements Engine {
     public Realm getRealm() {
         Realm configured=super.getRealm();
         // If no set realm has been called - default to JAAS
-        // This can be overridden at engine, context and host level  
+        // This can be overridden at engine, context and host level
         if( configured==null ) {
             configured=new JAASRealm();
             this.setRealm( configured );
@@ -160,7 +160,7 @@ public class StandardEngine extends ContainerBase implements Engine {
                                    this.defaultHost);
 
     }
-    
+
 
     /**
      * Set the cluster-wide unique identifier for this Engine.
@@ -263,7 +263,7 @@ public class StandardEngine extends ContainerBase implements Engine {
      */
     @Override
     protected synchronized void startInternal() throws LifecycleException {
-        
+
         // Log our server identification information
         if(log.isInfoEnabled())
             log.info( "Starting Servlet Engine: " + ServerInfo.getServerInfo());
@@ -272,7 +272,7 @@ public class StandardEngine extends ContainerBase implements Engine {
         super.startInternal();
     }
 
-    
+
     /**
      * Return a String representation of this component.
      */
@@ -297,7 +297,7 @@ public class StandardEngine extends ContainerBase implements Engine {
             boolean useDefault) {
 
         boolean logged = false;
-        
+
         if (getAccessLog() != null) {
             accessLog.log(request, response, time);
             logged = true;
@@ -386,7 +386,7 @@ public class StandardEngine extends ContainerBase implements Engine {
         public void setRequestAttributesEnabled(
                 boolean requestAttributesEnabled) {
             // NOOP
-            
+
         }
 
         @Override
@@ -395,7 +395,7 @@ public class StandardEngine extends ContainerBase implements Engine {
             return false;
         }
     }
-    
+
     protected static final class AccessLogListener
             implements PropertyChangeListener, LifecycleListener,
             ContainerListener {

==================================================
StandardPipeline.java
index e983fee63b..e94f3ba181 100644
--- a/java/org/apache/catalina/core/StandardHost.java
+++ b/java/org/apache/catalina/core/StandardHost.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -55,7 +55,7 @@ public class StandardHost extends ContainerBase implements Host {
 
     private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( StandardHost.class );
-    
+
     // ----------------------------------------------------------- Constructors
 
 
@@ -77,7 +77,7 @@ public class StandardHost extends ContainerBase implements Host {
      * The set of aliases for this Host.
      */
     private String[] aliases = new String[0];
-    
+
     private final Object aliasesLock = new Object();
 
 
@@ -134,7 +134,7 @@ public class StandardHost extends ContainerBase implements Host {
 
 
     /**
-     * The Java class name of the default error reporter implementation class 
+     * The Java class name of the default error reporter implementation class
      * for deployed web applications.
      */
     private String errorReportValveClass =
@@ -158,15 +158,15 @@ public class StandardHost extends ContainerBase implements Host {
      */
      private boolean createDirs = true;
 
-     
+
      /**
       * Track the class loaders for the child web applications so memory leaks
       * can be detected.
       */
      private Map<ClassLoader, String> childClassLoaders =
          new WeakHashMap<ClassLoader, String>();
-     
-     
+
+
      /**
       * Any file or directory in {@link #appBase} that this pattern matches will
       * be ignored by the automatic deployment process (both
@@ -193,20 +193,20 @@ public class StandardHost extends ContainerBase implements Host {
      */
     @Override
     public File getAppBaseFile() {
-        
+
         if (appBaseFile != null) {
             return appBaseFile;
         }
 
         File file = new File(getAppBase());
-        
+
         // If not absolute, make it absolute
         if (!file.isAbsolute()) {
             // This system property should always be set
             file = new File(System.getProperty(Globals.CATALINA_BASE_PROP),
                     file.getPath());
         }
-        
+
         // Make it canonical if possible
         try {
             file = file.getCanonicalFile();
@@ -284,7 +284,7 @@ public class StandardHost extends ContainerBase implements Host {
     }
 
     /**
-     * Return the value of the auto deploy flag.  If true, it indicates that 
+     * Return the value of the auto deploy flag.  If true, it indicates that
      * this host's child webapps will be dynamically deployed.
      */
     @Override
@@ -297,7 +297,7 @@ public class StandardHost extends ContainerBase implements Host {
 
     /**
      * Set the auto deploy flag value for this host.
-     * 
+     *
      * @param autoDeploy The new auto deploy flag
      */
     @Override
@@ -305,7 +305,7 @@ public class StandardHost extends ContainerBase implements Host {
 
         boolean oldAutoDeploy = this.autoDeploy;
         this.autoDeploy = autoDeploy;
-        support.firePropertyChange("autoDeploy", oldAutoDeploy, 
+        support.firePropertyChange("autoDeploy", oldAutoDeploy,
                                    this.autoDeploy);
 
     }
@@ -368,8 +368,8 @@ public class StandardHost extends ContainerBase implements Host {
 
 
     /**
-     * Return the value of the deploy on startup flag.  If true, it indicates 
-     * that this host's child webapps should be discovered and automatically 
+     * Return the value of the deploy on startup flag.  If true, it indicates
+     * that this host's child webapps should be discovered and automatically
      * deployed at startup time.
      */
     @Override
@@ -382,7 +382,7 @@ public class StandardHost extends ContainerBase implements Host {
 
     /**
      * Set the deploy on startup flag value for this host.
-     * 
+     *
      * @param deployOnStartup The new deploy on startup flag
      */
     @Override
@@ -390,7 +390,7 @@ public class StandardHost extends ContainerBase implements Host {
 
         boolean oldDeployOnStartup = this.deployOnStartup;
         this.deployOnStartup = deployOnStartup;
-        support.firePropertyChange("deployOnStartup", oldDeployOnStartup, 
+        support.firePropertyChange("deployOnStartup", oldDeployOnStartup,
                                    this.deployOnStartup);
 
     }
@@ -436,8 +436,8 @@ public class StandardHost extends ContainerBase implements Host {
         this.copyXML= copyXML;
 
     }
-    
-    
+
+
     /**
      * Return the Java class name of the error report valve class
      * for new web applications.
@@ -460,12 +460,12 @@ public class StandardHost extends ContainerBase implements Host {
         String oldErrorReportValveClassClass = this.errorReportValveClass;
         this.errorReportValveClass = errorReportValveClass;
         support.firePropertyChange("errorReportValveClass",
-                                   oldErrorReportValveClassClass, 
+                                   oldErrorReportValveClassClass,
                                    this.errorReportValveClass);
 
     }
-    
-    
+
+
     /**
      * Return the canonical, fully qualified, name of the virtual host
      * this Container represents.
@@ -549,7 +549,7 @@ public class StandardHost extends ContainerBase implements Host {
     public String getDeployIgnore() {
         if (deployIgnore == null) {
             return null;
-        } 
+        }
         return this.deployIgnore.toString();
     }
 
@@ -584,7 +584,7 @@ public class StandardHost extends ContainerBase implements Host {
             this.deployIgnore = Pattern.compile(deployIgnore);
         }
         support.firePropertyChange("deployIgnore",
-                                   oldDeployIgnore, 
+                                   oldDeployIgnore,
                                    deployIgnore);
     }
 
@@ -656,8 +656,8 @@ public class StandardHost extends ContainerBase implements Host {
             }
         }
     }
-    
-    
+
+
     /**
      * Attempt to identify the contexts that have a class loader memory leak.
      * This is usually triggered on context reload. Note: This method attempts
@@ -665,11 +665,11 @@ public class StandardHost extends ContainerBase implements Host {
      * caution on a production system.
      */
     public String[] findReloadedContextMemoryLeaks() {
-        
+
         System.gc();
-        
+
         List<String> result = new ArrayList<String>();
-        
+
         for (Map.Entry<ClassLoader, String> entry :
                 childClassLoaders.entrySet()) {
             ClassLoader cl = entry.getKey();
@@ -679,7 +679,7 @@ public class StandardHost extends ContainerBase implements Host {
                 }
             }
         }
-        
+
         return result.toArray(new String[result.size()]);
     }
 
@@ -754,7 +754,7 @@ public class StandardHost extends ContainerBase implements Host {
         return (sb.toString());
 
     }
-    
+
     /**
      * Start this component and implement the requirements
      * of {@link org.apache.catalina.util.LifecycleBase#startInternal()}.
@@ -764,7 +764,7 @@ public class StandardHost extends ContainerBase implements Host {
      */
     @Override
     protected synchronized void startInternal() throws LifecycleException {
-        
+
         // Set error report valve
         String errorValve = getErrorReportValveClass();
         if ((errorValve != null) && (!errorValve.equals(""))) {
@@ -828,5 +828,5 @@ public class StandardHost extends ContainerBase implements Host {
 
         return keyProperties.toString();
     }
-    
+
 }

==================================================
StandardServer.java
index 72132e2d4a..dda2d49970 100644
--- a/java/org/apache/catalina/core/StandardPipeline.java
+++ b/java/org/apache/catalina/core/StandardPipeline.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -102,9 +102,9 @@ public class StandardPipeline extends LifecycleBase
      */
     protected Valve first = null;
 
-    
+
     // --------------------------------------------------------- Public Methods
-    
+
     @Override
     public boolean isAsyncSupported() {
         Valve valve = (first!=null)?first:basic;
@@ -113,7 +113,7 @@ public class StandardPipeline extends LifecycleBase
             supported = supported & valve.isAsyncSupported();
             valve = valve.getNext();
         }
-        return supported; 
+        return supported;
     }
 
 
@@ -149,7 +149,7 @@ public class StandardPipeline extends LifecycleBase
         // NOOP
     }
 
-    
+
     /**
      * Start {@link Valve}s) in this pipeline and implement the requirements
      * of {@link LifecycleBase#startInternal()}.
@@ -199,7 +199,7 @@ public class StandardPipeline extends LifecycleBase
         }
     }
 
-    
+
     @Override
     protected void destroyInternal() {
         Valve[] valves = getValves();
@@ -208,7 +208,7 @@ public class StandardPipeline extends LifecycleBase
         }
     }
 
-    
+
     /**
      * Return a String representation of this component.
      */
@@ -298,7 +298,7 @@ public class StandardPipeline extends LifecycleBase
             }
             current = current.getNext();
         }
-        
+
         this.basic = valve;
 
     }
@@ -325,7 +325,7 @@ public class StandardPipeline extends LifecycleBase
      */
     @Override
     public void addValve(Valve valve) {
-    
+
         // Validate that we can add this Valve
         if (valve instanceof Contained)
             ((Contained) valve).setContainer(this.container);
@@ -356,7 +356,7 @@ public class StandardPipeline extends LifecycleBase
                 current = current.getNext();
             }
         }
-        
+
         container.fireContainerEvent(Container.ADD_VALVE_EVENT, valve);
     }
 
@@ -447,7 +447,7 @@ public class StandardPipeline extends LifecycleBase
         } catch (LifecycleException e) {
             log.error("StandardPipeline.removeValve: destroy: ", e);
         }
-        
+
         container.fireContainerEvent(Container.REMOVE_VALVE_EVENT, valve);
     }
 
@@ -457,7 +457,7 @@ public class StandardPipeline extends LifecycleBase
         if (first != null) {
             return first;
         }
-        
+
         return basic;
     }
 }

==================================================
StandardService.java
index a4afcb4ee4..d6d8e1f06c 100644
--- a/java/org/apache/catalina/core/StandardServer.java
+++ b/java/org/apache/catalina/core/StandardServer.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -56,7 +56,7 @@ import org.apache.tomcat.util.res.StringManager;
 public final class StandardServer extends LifecycleMBeanBase implements Server {
 
     private static final Log log = LogFactory.getLog(StandardServer.class);
-   
+
 
     // ------------------------------------------------------------ Constructor
 
@@ -145,7 +145,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
     protected PropertyChangeSupport support = new PropertyChangeSupport(this);
 
     private volatile boolean stopAwait = false;
-    
+
     private Catalina catalina = null;
 
     private ClassLoader parentClassLoader = null;
@@ -305,8 +305,8 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
     public Catalina getCatalina() {
         return catalina;
     }
-    
-    
+
+
     /**
      * Set the outer Catalina startup/shutdown component if present.
      */
@@ -314,7 +314,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
     public void setCatalina(Catalina catalina) {
         this.catalina = catalina;
     }
-    
+
     // --------------------------------------------------------- Server Methods
 
 
@@ -372,7 +372,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
 
     /**
      * Wait until a proper shutdown command is received, then return.
-     * This keeps the main thread alive - the thread pool listening for http 
+     * This keeps the main thread alive - the thread pool listening for http
      * connections is daemon threads.
      */
     @Override
@@ -418,7 +418,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
                 if (serverSocket == null) {
                     break;
                 }
-    
+
                 // Wait for the next connection
                 Socket socket = null;
                 StringBuilder command = new StringBuilder();
@@ -531,8 +531,8 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
         return (services);
 
     }
-    
-    /** 
+
+    /**
      * Return the JMX service names.
      */
     public ObjectName[] getServiceNames() {
@@ -638,7 +638,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
      */
     public synchronized void storeConfig() throws Exception {
         ObjectName sname = new ObjectName("Catalina:type=StoreConfig");
-        mserver.invoke(sname, "storeConfig", null, null);            
+        mserver.invoke(sname, "storeConfig", null, null);
     }
 
 
@@ -654,13 +654,13 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
      *  by the persistence mechanism
      */
     public synchronized void storeContext(Context context) throws Exception {
-        
-        ObjectName sname = null;    
+
+        ObjectName sname = null;
         try {
            sname = new ObjectName("Catalina:type=StoreConfig");
            if(mserver.isRegistered(sname)) {
                mserver.invoke(sname, "store",
-                   new Object[] {context}, 
+                   new Object[] {context},
                    new String [] { "java.lang.String"});
            } else
                log.error("StoreConfig mbean not registered" + sname);
@@ -668,7 +668,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
             ExceptionUtils.handleThrowable(t);
             log.error(t);
         }
- 
+
     }
 
 
@@ -701,7 +701,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
         setState(LifecycleState.STARTING);
 
         globalNamingResources.start();
-        
+
         // Start our defined Services
         synchronized (services) {
             for (int i = 0; i < services.length; i++) {
@@ -723,14 +723,14 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
 
         setState(LifecycleState.STOPPING);
         fireLifecycleEvent(CONFIGURE_STOP_EVENT, null);
-        
+
         // Stop our defined Services
         for (int i = 0; i < services.length; i++) {
             services[i].stop();
         }
 
         globalNamingResources.stop();
-        
+
         stopAwait();
     }
 
@@ -740,7 +740,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
      */
     @Override
     protected void initInternal() throws LifecycleException {
-        
+
         super.initInternal();
 
         // Register global String cache
@@ -753,16 +753,16 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
         MBeanFactory factory = new MBeanFactory();
         factory.setContainer(this);
         onameMBeanFactory = register(factory, "type=MBeanFactory");
-        
+
         // Register the naming resources
         globalNamingResources.init();
-        
+
         // Initialize our defined Services
         for (int i = 0; i < services.length; i++) {
             services[i].init();
         }
     }
-    
+
     @Override
     protected void destroyInternal() throws LifecycleException {
         // Destroy our defined Services
@@ -771,11 +771,11 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
         }
 
         globalNamingResources.destroy();
-        
+
         unregister(onameMBeanFactory);
-        
+
         unregister(onameStringCache);
-                
+
         super.destroyInternal();
     }
 
@@ -805,10 +805,10 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
                                    this.parentClassLoader);
     }
 
-    
+
     private ObjectName onameStringCache;
     private ObjectName onameMBeanFactory;
-    
+
     /**
      * Obtain the MBean domain for this server. The domain is obtained using
      * the following search order:
@@ -819,9 +819,9 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
      */
     @Override
     protected String getDomainInternal() {
-        
+
         String domain = null;
-        
+
         Service[] services = findServices();
         if (services.length > 0) {
             Service service = services[0];
@@ -832,7 +832,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
         return domain;
     }
 
-    
+
     @Override
     protected final String getObjectNameKeyProperties() {
         return "type=Server";

==================================================
StandardThreadExecutor.java
index b5f6132ed5..6271a5032e 100644
--- a/java/org/apache/catalina/core/StandardService.java
+++ b/java/org/apache/catalina/core/StandardService.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -51,7 +51,7 @@ import org.apache.tomcat.util.res.StringManager;
 public class StandardService extends LifecycleMBeanBase implements Service {
 
     private static final Log log = LogFactory.getLog(StandardService.class);
-   
+
 
     // ----------------------------------------------------- Instance Variables
 
@@ -82,9 +82,9 @@ public class StandardService extends LifecycleMBeanBase implements Service {
      * The set of Connectors associated with this Service.
      */
     protected Connector connectors[] = new Connector[0];
-    
+
     /**
-     * 
+     *
      */
     protected ArrayList<Executor> executors = new ArrayList<Executor>();
 
@@ -518,7 +518,7 @@ public class StandardService extends LifecycleMBeanBase implements Service {
     protected void initInternal() throws LifecycleException {
 
         super.initInternal();
-        
+
         if (container != null) {
             container.init();
         }
@@ -547,7 +547,7 @@ public class StandardService extends LifecycleMBeanBase implements Service {
             }
         }
     }
-    
+
     @Override
     protected void destroyInternal() throws LifecycleException {
         // Destroy our defined Connectors
@@ -602,7 +602,7 @@ public class StandardService extends LifecycleMBeanBase implements Service {
     }
     @Override
     protected String getDomainInternal() {
-        
+
         return MBeanUtils.getDomain(this);
     }
 

==================================================
StandardWrapper.java
index e203680ef2..04da7f5937 100644
--- a/java/org/apache/catalina/core/StandardThreadExecutor.java
+++ b/java/org/apache/catalina/core/StandardThreadExecutor.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -31,7 +31,7 @@ import org.apache.tomcat.util.threads.ThreadPoolExecutor;
 
 public class StandardThreadExecutor extends LifecycleMBeanBase
         implements Executor, ResizableExecutor {
-    
+
     // ---------------------------------------------- Properties
     /**
      * Default thread priority
@@ -42,37 +42,37 @@ public class StandardThreadExecutor extends LifecycleMBeanBase
      * Run threads in daemon or non-daemon state
      */
     protected boolean daemon = true;
-    
+
     /**
      * Default name prefix for the thread name
      */
     protected String namePrefix = "tomcat-exec-";
-    
+
     /**
      * max number of threads
      */
     protected int maxThreads = 200;
-    
+
     /**
      * min number of threads
      */
     protected int minSpareThreads = 25;
-    
+
     /**
      * idle time in milliseconds
      */
     protected int maxIdleTime = 60000;
-    
+
     /**
      * The executor we use for this component
      */
     protected ThreadPoolExecutor executor = null;
-    
+
     /**
      * the name of this thread pool
      */
     protected String name;
-    
+
     /**
      * prestart threads?
      */
@@ -82,15 +82,15 @@ public class StandardThreadExecutor extends LifecycleMBeanBase
      * The maximum number of elements that can queue up before we reject them
      */
     protected int maxQueueSize = Integer.MAX_VALUE;
-    
+
     /**
      * After a context is stopped, threads in the pool are renewed. To avoid
      * renewing all threads at the same time, this delay is observed between 2
      * threads being renewed.
      */
-    protected long threadRenewalDelay = 
+    protected long threadRenewalDelay =
         org.apache.tomcat.util.threads.Constants.DEFAULT_THREAD_RENEWAL_DELAY;
-    
+
     private TaskQueue taskqueue = null;
     // ---------------------------------------------- Constructors
     public StandardThreadExecutor() {
@@ -99,13 +99,13 @@ public class StandardThreadExecutor extends LifecycleMBeanBase
 
 
     // ---------------------------------------------- Public Methods
-    
+
     @Override
     protected void initInternal() throws LifecycleException {
         super.initInternal();
     }
 
-    
+
     /**
      * Start the component and implement the requirements
      * of {@link org.apache.catalina.util.LifecycleBase#startInternal()}.
@@ -144,23 +144,23 @@ public class StandardThreadExecutor extends LifecycleMBeanBase
         taskqueue = null;
     }
 
-    
+
     @Override
     protected void destroyInternal() throws LifecycleException {
         super.destroyInternal();
     }
 
-    
+
     @Override
     public void execute(Runnable command, long timeout, TimeUnit unit) {
         if ( executor != null ) {
             executor.execute(command,timeout,unit);
-        } else { 
+        } else {
             throw new IllegalStateException("StandardThreadExecutor not started.");
         }
     }
-    
-    
+
+
     @Override
     public void execute(Runnable command) {
         if ( executor != null ) {
@@ -172,7 +172,7 @@ public class StandardThreadExecutor extends LifecycleMBeanBase
             }
         } else throw new IllegalStateException("StandardThreadPool not started.");
     }
-    
+
     public void contextStopping() {
         if (executor != null) {
             executor.contextStopping();
@@ -254,15 +254,15 @@ public class StandardThreadExecutor extends LifecycleMBeanBase
     public void setName(String name) {
         this.name = name;
     }
-    
+
     public void setMaxQueueSize(int size) {
         this.maxQueueSize = size;
     }
-    
+
     public int getMaxQueueSize() {
         return maxQueueSize;
     }
-    
+
     public long getThreadRenewalDelay() {
         return threadRenewalDelay;
     }
@@ -317,7 +317,7 @@ public class StandardThreadExecutor extends LifecycleMBeanBase
     public boolean resizeQueue(int capacity) {
         return false;
     }
-    
+
 
     @Override
     protected String getDomainInternal() {

==================================================
StandardWrapperFacade.java
index ec3cf6dbd3..37d655f4b3 100644
--- a/java/org/apache/catalina/core/StandardWrapper.java
+++ b/java/org/apache/catalina/core/StandardWrapper.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -113,12 +113,12 @@ public class StandardWrapper extends ContainerBase
      * servlet is considered permanent.
      */
     protected long available = 0L;
-    
+
     /**
-     * The broadcaster that sends j2ee notifications. 
+     * The broadcaster that sends j2ee notifications.
      */
     protected NotificationBroadcasterSupport broadcaster = null;
-    
+
     /**
      * The count of allocations that are currently active (even if they
      * are for the same instance, as will be true on a non-STM servlet).
@@ -223,12 +223,12 @@ public class StandardWrapper extends ContainerBase
      */
     protected Stack<Servlet> instancePool = null;
 
-    
+
     /**
      * Wait time for servlet unload in ms.
      */
     protected long unloadDelay = 2000;
-    
+
 
     /**
      * True if this StandardWrapper is for the JspServlet
@@ -251,12 +251,12 @@ public class StandardWrapper extends ContainerBase
     protected StandardWrapperValve swValve;
     protected long loadTime=0;
     protected int classLoadTime=0;
-    
+
     /**
      * Multipart config
      */
     protected MultipartConfigElement multipartConfigElement = null;
-    
+
     /**
      * Async support
      */
@@ -270,22 +270,22 @@ public class StandardWrapper extends ContainerBase
     protected volatile boolean servletSecurityAnnotationScanRequired = false;
 
     private boolean overridable = false;
-    
+
     /**
-     * Static class array used when the SecurityManager is turned on and 
+     * Static class array used when the SecurityManager is turned on and
      * <code>Servlet.init</code> is invoked.
      */
     protected static Class<?>[] classType = new Class[]{ServletConfig.class};
-    
-    
+
+
     /**
-     * Static class array used when the SecurityManager is turned on and 
+     * Static class array used when the SecurityManager is turned on and
      * <code>Servlet.service</code>  is invoked.
-     */                                                 
+     */
     protected static Class<?>[] classTypeUsedInService = new Class[]{
                                                          ServletRequest.class,
                                                          ServletResponse.class};
-    
+
 
     // ------------------------------------------------------------- Properties
 
@@ -548,11 +548,11 @@ public class StandardWrapper extends ContainerBase
 
         // Short-cuts
         // If singleThreadModel is true, must have already checked this
-        // If instance != null, must have already loaded 
+        // If instance != null, must have already loaded
         if (singleThreadModel || instance != null) {
             return singleThreadModel;
         }
-        
+
         // The logic to determine this safely is more complex than one might
         // expect. allocate() already has the necessary logic so re-use it.
         try {
@@ -599,7 +599,7 @@ public class StandardWrapper extends ContainerBase
     public String[] getServletMethods() throws ServletException {
 
         instance = loadServlet();
-        
+
         Class<? extends Servlet> servletClazz = instance.getClass();
         if (!javax.servlet.http.HttpServlet.class.isAssignableFrom(
                                                         servletClazz)) {
@@ -639,8 +639,8 @@ public class StandardWrapper extends ContainerBase
     public Servlet getServlet() {
         return instance;
     }
-    
-    
+
+
     /**
      * Set the associated servlet instance.
      */
@@ -649,7 +649,7 @@ public class StandardWrapper extends ContainerBase
         instance = servlet;
     }
 
-    
+
     /**
      * {@inheritDoc}
      */
@@ -669,19 +669,19 @@ public class StandardWrapper extends ContainerBase
     @Override
     public void backgroundProcess() {
         super.backgroundProcess();
-        
+
         if (!getState().isAvailable())
             return;
-        
+
         if (getServlet() != null && (getServlet() instanceof PeriodicEventListener)) {
             ((PeriodicEventListener) getServlet()).periodicEvent();
         }
     }
-    
-    
+
+
     /**
      * Extract the root cause from a servlet exception.
-     * 
+     *
      * @param e The servlet exception
      */
     public static Throwable getRootCause(ServletException e) {
@@ -801,7 +801,7 @@ public class StandardWrapper extends ContainerBase
               (sm.getString("standardWrapper.unloading", getName()));
 
         boolean newInstance = false;
-        
+
         // If not SingleThreadedModel, return the same instance every time
         if (!singleThreadModel) {
 
@@ -1021,7 +1021,7 @@ public class StandardWrapper extends ContainerBase
     @Override
     public synchronized void load() throws ServletException {
         instance = loadServlet();
-        
+
         if (!instanceInitialized) {
             initServlet(instance);
         }
@@ -1029,12 +1029,12 @@ public class StandardWrapper extends ContainerBase
         if (isJspServlet) {
             StringBuilder oname =
                 new StringBuilder(MBeanUtils.getDomain(getParent()));
-            
+
             oname.append(":type=JspMonitor,name=");
             oname.append(getName());
-            
+
             oname.append(getWebModuleKeyProperties());
-            
+
             try {
                 jspMonitorON = new ObjectName(oname.toString());
                 Registry.getRegistry(null, null)
@@ -1147,7 +1147,7 @@ public class StandardWrapper extends ContainerBase
 
     /**
      * {@inheritDoc}
-     * @throws ClassNotFoundException 
+     * @throws ClassNotFoundException
      */
     @Override
     public void servletSecurityAnnotationScan() throws ServletException {
@@ -1172,7 +1172,7 @@ public class StandardWrapper extends ContainerBase
         servletSecurityAnnotationScanRequired = false;
 
         Context ctxt = (Context) getParent();
-        
+
         if (ctxt.getIgnoreAnnotations()) {
             return;
         }
@@ -1188,7 +1188,7 @@ public class StandardWrapper extends ContainerBase
 
     private synchronized void initServlet(Servlet servlet)
             throws ServletException {
-        
+
         if (instanceInitialized && !singleThreadModel) return;
 
         // Call the initialization method of this servlet
@@ -1383,28 +1383,28 @@ public class StandardWrapper extends ContainerBase
             if (swallowOutput) {
                 SystemLogHandler.startCapture();
             }
-    
+
             // Call the servlet destroy() method
             try {
                 instanceSupport.fireInstanceEvent
                   (InstanceEvent.BEFORE_DESTROY_EVENT, instance);
-    
+
                 if( Globals.IS_SECURITY_ENABLED) {
                     SecurityUtil.doAsPrivilege("destroy",
                                                instance);
-                    SecurityUtil.remove(instance);                           
+                    SecurityUtil.remove(instance);
                 } else {
                     instance.destroy();
                 }
-                
+
                 instanceSupport.fireInstanceEvent
                   (InstanceEvent.AFTER_DESTROY_EVENT, instance);
-    
+
                 // Annotation processing
                 if (!((Context) getParent()).getIgnoreAnnotations()) {
                    ((StandardContext)getParent()).getInstanceManager().destroyInstance(instance);
                 }
-    
+
             } catch (Throwable t) {
                 ExceptionUtils.handleThrowable(t);
                 instanceSupport.fireInstanceEvent
@@ -1445,7 +1445,7 @@ public class StandardWrapper extends ContainerBase
                     Servlet s = instancePool.pop();
                     if (Globals.IS_SECURITY_ENABLED) {
                         SecurityUtil.doAsPrivilege("destroy", s);
-                        SecurityUtil.remove(instance);                           
+                        SecurityUtil.remove(instance);
                     } else {
                         s.destroy();
                     }
@@ -1608,7 +1608,7 @@ public class StandardWrapper extends ContainerBase
     public boolean isAsyncSupported() {
         return asyncSupported;
     }
-    
+
     @Override
     public void setAsyncSupported(boolean asyncSupported) {
         this.asyncSupported = asyncSupported;
@@ -1618,7 +1618,7 @@ public class StandardWrapper extends ContainerBase
     public boolean isEnabled() {
         return enabled;
     }
-    
+
     @Override
     public void setEnabled(boolean enabled) {
         this.enabled = enabled;
@@ -1694,24 +1694,24 @@ public class StandardWrapper extends ContainerBase
      */
     @Override
     protected synchronized void startInternal() throws LifecycleException {
-    
-        // Send j2ee.state.starting notification 
+
+        // Send j2ee.state.starting notification
         if (this.getObjectName() != null) {
-            Notification notification = new Notification("j2ee.state.starting", 
-                                                        this.getObjectName(), 
+            Notification notification = new Notification("j2ee.state.starting",
+                                                        this.getObjectName(),
                                                         sequenceNumber++);
             broadcaster.sendNotification(notification);
         }
-        
+
         // Start up this component
         super.startInternal();
 
         setAvailable(0L);
 
-        // Send j2ee.state.running notification 
+        // Send j2ee.state.running notification
         if (this.getObjectName() != null) {
-            Notification notification = 
-                new Notification("j2ee.state.running", this.getObjectName(), 
+            Notification notification =
+                new Notification("j2ee.state.running", this.getObjectName(),
                                 sequenceNumber++);
             broadcaster.sendNotification(notification);
         }
@@ -1730,15 +1730,15 @@ public class StandardWrapper extends ContainerBase
     protected synchronized void stopInternal() throws LifecycleException {
 
         setAvailable(Long.MAX_VALUE);
-        
-        // Send j2ee.state.stopping notification 
+
+        // Send j2ee.state.stopping notification
         if (this.getObjectName() != null) {
-            Notification notification = 
-                new Notification("j2ee.state.stopping", this.getObjectName(), 
+            Notification notification =
+                new Notification("j2ee.state.stopping", this.getObjectName(),
                                 sequenceNumber++);
             broadcaster.sendNotification(notification);
         }
-        
+
         // Shut down our servlet instance (if it has been initialized)
         try {
             unload();
@@ -1750,39 +1750,39 @@ public class StandardWrapper extends ContainerBase
         // Shut down this component
         super.stopInternal();
 
-        // Send j2ee.state.stoppped notification 
+        // Send j2ee.state.stoppped notification
         if (this.getObjectName() != null) {
-            Notification notification = 
-                new Notification("j2ee.state.stopped", this.getObjectName(), 
+            Notification notification =
+                new Notification("j2ee.state.stopped", this.getObjectName(),
                                 sequenceNumber++);
             broadcaster.sendNotification(notification);
         }
-        
-        // Send j2ee.object.deleted notification 
-        Notification notification = 
-            new Notification("j2ee.object.deleted", this.getObjectName(), 
+
+        // Send j2ee.object.deleted notification
+        Notification notification =
+            new Notification("j2ee.object.deleted", this.getObjectName(),
                             sequenceNumber++);
         broadcaster.sendNotification(notification);
 
     }
 
-    
+
     @Override
     protected String getObjectNameKeyProperties() {
 
         StringBuilder keyProperties =
             new StringBuilder("j2eeType=Servlet,name=");
-        
+
         keyProperties.append(getName());
-        
+
         keyProperties.append(getWebModuleKeyProperties());
 
         return keyProperties.toString();
     }
-        
+
 
     private String getWebModuleKeyProperties() {
-        
+
         StringBuilder keyProperties = new StringBuilder(",WebModule=//");
         String hostName = getParent().getParent().getName();
         if (hostName == null) {
@@ -1790,7 +1790,7 @@ public class StandardWrapper extends ContainerBase
         } else {
             keyProperties.append(hostName);
         }
-        
+
         String contextName = ((Context) getParent()).getName();
         if (!contextName.startsWith("/")) {
             keyProperties.append('/');
@@ -1801,7 +1801,7 @@ public class StandardWrapper extends ContainerBase
         if (parent instanceof StandardContext) {
             ctx = (StandardContext) getParent();
         }
-        
+
         keyProperties.append(",J2EEApplication=");
         if (ctx == null) {
             keyProperties.append("none");
@@ -1814,22 +1814,22 @@ public class StandardWrapper extends ContainerBase
         } else {
             keyProperties.append(ctx.getJ2EEServer());
         }
-        
+
         return keyProperties.toString();
     }
-    
-    
-    /* Remove a JMX notficationListener 
+
+
+    /* Remove a JMX notficationListener
      * @see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)
      */
     @Override
-    public void removeNotificationListener(NotificationListener listener, 
+    public void removeNotificationListener(NotificationListener listener,
             NotificationFilter filter, Object object) throws ListenerNotFoundException {
         broadcaster.removeNotificationListener(listener,filter,object);
     }
-    
+
     protected MBeanNotificationInfo[] notificationInfo;
-    
+
     /* Get JMX Broadcaster Info
      * @TODO use StringManager for international support!
      * @TODO This two events we not send j2ee.state.failed and j2ee.attribute.changed!
@@ -1844,7 +1844,7 @@ public class StandardWrapper extends ContainerBase
                     "j2ee.object.created"},
                     Notification.class.getName(),
                     "servlet is created"
-                    ), 
+                    ),
                     new MBeanNotificationInfo(new String[] {
                     "j2ee.state.starting"},
                     Notification.class.getName(),
@@ -1875,40 +1875,40 @@ public class StandardWrapper extends ContainerBase
 
         return notificationInfo;
     }
-    
-    
+
+
     /* Add a JMX-NotificationListener
      * @see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)
      */
     @Override
-    public void addNotificationListener(NotificationListener listener, 
+    public void addNotificationListener(NotificationListener listener,
             NotificationFilter filter, Object object) throws IllegalArgumentException {
         broadcaster.addNotificationListener(listener,filter,object);
     }
-    
-    
+
+
     /**
-     * Remove a JMX-NotificationListener 
+     * Remove a JMX-NotificationListener
      * @see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)
      */
     @Override
-    public void removeNotificationListener(NotificationListener listener) 
+    public void removeNotificationListener(NotificationListener listener)
         throws ListenerNotFoundException {
         broadcaster.removeNotificationListener(listener);
     }
-    
-    
+
+
      // ------------------------------------------------------------- Attributes
-        
-        
+
+
     public boolean isEventProvider() {
         return false;
     }
-    
+
     public boolean isStateManageable() {
         return false;
     }
-    
+
     public boolean isStatisticsProvider() {
         return false;
     }

==================================================
StandardWrapperValve.java
index 74023cacee..21331723a7 100644
--- a/java/org/apache/catalina/core/StandardWrapperFacade.java
+++ b/java/org/apache/catalina/core/StandardWrapperFacade.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
ThreadLocalLeakPreventionListener.java
index 9e27fcb0c6..52f89e7234 100644
--- a/java/org/apache/catalina/core/StandardWrapperValve.java
+++ b/java/org/apache/catalina/core/StandardWrapperValve.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -56,7 +56,7 @@ final class StandardWrapperValve
     public StandardWrapperValve() {
         super(true);
     }
-    
+
     // ----------------------------------------------------- Instance Variables
 
 
@@ -103,7 +103,7 @@ final class StandardWrapperValve
         StandardWrapper wrapper = (StandardWrapper) getContainer();
         Servlet servlet = null;
         Context context = (Context) wrapper.getParent();
-        
+
         // Check for the application being marked unavailable
         if (!context.getAvailable()) {
             response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE,
@@ -165,15 +165,15 @@ final class StandardWrapperValve
 
         // Identify if the request is Comet related now that the servlet has been allocated
         boolean comet = false;
-        if (servlet instanceof CometProcessor 
+        if (servlet instanceof CometProcessor
                 && request.getAttribute("org.apache.tomcat.comet.support") == Boolean.TRUE) {
             comet = true;
             request.setComet(true);
         }
-        
+
         MessageBytes requestPathMB = request.getRequestPathMB();
         DispatcherType dispatcherType = DispatcherType.REQUEST;
-        if (request.getDispatcherType()==DispatcherType.ASYNC) dispatcherType = DispatcherType.ASYNC; 
+        if (request.getDispatcherType()==DispatcherType.ASYNC) dispatcherType = DispatcherType.ASYNC;
         request.setAttribute
             (ApplicationFilterFactory.DISPATCHER_TYPE_ATTR,
              dispatcherType);
@@ -185,7 +185,7 @@ final class StandardWrapperValve
             ApplicationFilterFactory.getInstance();
         ApplicationFilterChain filterChain =
             factory.createFilterChain(request, wrapper, servlet);
-        
+
         // Reset comet flag value after creating the filter chain
         request.setComet(false);
 
@@ -199,12 +199,12 @@ final class StandardWrapperValve
                         SystemLogHandler.startCapture();
                         if (request.isAsyncDispatching()) {
                             //TODO SERVLET3 - async
-                            ((AsyncContextImpl)request.getAsyncContext()).doInternalDispatch(); 
+                            ((AsyncContextImpl)request.getAsyncContext()).doInternalDispatch();
                         } else if (comet) {
                             filterChain.doFilterEvent(request.getEvent());
                             request.setComet(true);
                         } else {
-                            filterChain.doFilter(request.getRequest(), 
+                            filterChain.doFilter(request.getRequest(),
                                     response.getResponse());
                         }
                     } finally {
@@ -330,7 +330,7 @@ final class StandardWrapperValve
     /**
      * Process a Comet event. The main differences here are to not use sendError
      * (the response is committed), to avoid creating a new filter chain
-     * (which would work but be pointless), and a few very minor tweaks. 
+     * (which would work but be pointless), and a few very minor tweaks.
      *
      * @param request The servlet request to be processed
      * @param response The servlet response to be created
@@ -343,13 +343,13 @@ final class StandardWrapperValve
     @Override
     public void event(Request request, Response response, CometEvent event)
         throws IOException, ServletException {
-        
+
         // Initialize local variables we may need
         Throwable throwable = null;
         // This should be a Request attribute...
         long t1=System.currentTimeMillis();
         // FIXME: Add a flag to count the total amount of events processed ? requestCount++;
-        
+
         StandardWrapper wrapper = (StandardWrapper) getContainer();
         if (wrapper == null) {
             // Context has been shutdown. Nothing to do here.
@@ -361,7 +361,7 @@ final class StandardWrapperValve
 
         // Check for the application being marked unavailable
         boolean unavailable = !context.getAvailable() || wrapper.isUnavailable();
-        
+
         // Allocate a servlet instance to process this request
         try {
             if (!unavailable) {
@@ -391,7 +391,7 @@ final class StandardWrapperValve
             (ApplicationFilterFactory.DISPATCHER_REQUEST_PATH_ATTR,
              requestPathMB);
         // Get the current (unchanged) filter chain for this request
-        ApplicationFilterChain filterChain = 
+        ApplicationFilterChain filterChain =
             (ApplicationFilterChain) request.getFilterChain();
 
         // Call the filter chain for this request
@@ -556,7 +556,7 @@ final class StandardWrapperValve
     public void setErrorCount(int errorCount) {
         this.errorCount = errorCount;
     }
-    
+
     @Override
     protected void initInternal() throws LifecycleException {
         // NOOP - Don't register this Valve in JMX

==================================================
