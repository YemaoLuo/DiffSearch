35394e76b32d4ee5e3efb29b20249f982da136f4
==================================================
Update Commons Codec. No functional change.
==================================================
Mark Thomas
==================================================
Tue Nov 29 14:49:34 2022 +0000
==================================================
Base64.java
index a50c237c4f..c3db5d047f 100644
--- a/MERGE.txt
+++ b/MERGE.txt
@@ -45,7 +45,7 @@ Unused code is removed
 Sub-tree:
 src/main/java/org/apache/commons/codec
 The SHA1 ID / tag for the most recent commit to be merged to Tomcat is:
-fd44e6b491c9d606d0b91ac0029269d265024cd9 (2021-09-01)
+ae32a3f2fa6b722b8ad67bd125a52edb78932314 (2022-11-29)
 Note: Only classes required for Base64 encoding/decoding. The rest are removed.
 
 FileUpload

==================================================
BaseNCodec.java
index 5666e9ba3e..b8a79fa8d6 100644
--- a/java/org/apache/tomcat/util/codec/binary/Base64.java
+++ b/java/org/apache/tomcat/util/codec/binary/Base64.java
@@ -353,7 +353,7 @@ public class Base64 extends BaseNCodec {
      * </p>
      *
      * @param lineLength
-     *            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of
+     *            Each line of encoded data will be at most of the given length (rounded down to the nearest multiple of
      *            4). If lineLength &lt;= 0, then the output will not be divided into lines (chunks). Ignored when
      *            decoding.
      * @since 1.4
@@ -376,7 +376,7 @@ public class Base64 extends BaseNCodec {
      * </p>
      *
      * @param lineLength
-     *            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of
+     *            Each line of encoded data will be at most of the given length (rounded down to the nearest multiple of
      *            4). If lineLength &lt;= 0, then the output will not be divided into lines (chunks). Ignored when
      *            decoding.
      * @param lineSeparator
@@ -403,7 +403,7 @@ public class Base64 extends BaseNCodec {
      * </p>
      *
      * @param lineLength
-     *            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of
+     *            Each line of encoded data will be at most of the given length (rounded down to the nearest multiple of
      *            4). If lineLength &lt;= 0, then the output will not be divided into lines (chunks). Ignored when
      *            decoding.
      * @param lineSeparator
@@ -462,8 +462,8 @@ public class Base64 extends BaseNCodec {
      * https://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/
      * </p>
      *
-     * @param in
-     *            byte[] array of ascii data to base64 decode.
+     * @param input
+     *            byte[] array of ASCII data to base64 decode.
      * @param inPos
      *            Position to start reading data from.
      * @param inAvail
@@ -472,7 +472,7 @@ public class Base64 extends BaseNCodec {
      *            the context to be used
      */
     @Override
-    void decode(final byte[] in, int inPos, final int inAvail, final Context context) {
+    void decode(final byte[] input, int inPos, final int inAvail, final Context context) {
         if (context.eof) {
             return;
         }
@@ -481,7 +481,7 @@ public class Base64 extends BaseNCodec {
         }
         for (int i = 0; i < inAvail; i++) {
             final byte[] buffer = ensureBufferSize(decodeSize, context);
-            final byte b = in[inPos++];
+            final byte b = input[inPos++];
             if (b == pad) {
                 // We're done.
                 context.eof = true;
@@ -629,7 +629,7 @@ public class Base64 extends BaseNCodec {
      *
      * @param octet
      *            The value to test
-     * @return {@code true} if the value is defined in the the Base64 alphabet {@code false} otherwise.
+     * @return {@code true} if the value is defined in the Base64 alphabet {@code false} otherwise.
      */
     @Override
     protected boolean isInAlphabet(final byte octet) {

==================================================
StringUtils.java
index 6c1a7be4a3..09e647ff97 100644
--- a/java/org/apache/tomcat/util/codec/binary/BaseNCodec.java
+++ b/java/org/apache/tomcat/util/codec/binary/BaseNCodec.java
@@ -40,7 +40,7 @@ public abstract class BaseNCodec {
     static class Context {
 
         /**
-         * Place holder for the bytes we're dealing with for our based logic.
+         * Placeholder for the bytes we're dealing with for our based logic.
          * Bitwise operations store and extract the encoding or decoding from this variable.
          */
         int ibitWorkArea;
@@ -78,9 +78,6 @@ public abstract class BaseNCodec {
          */
         int modulus;
 
-        Context() {
-        }
-
         /**
          * Returns a String useful for debugging (especially within a debugger.)
          *
@@ -188,9 +185,7 @@ public abstract class BaseNCodec {
         // Integer.MAX_VALUE length array.
         // The result is that we may have to allocate an array of this size more than once if
         // the capacity must be expanded again.
-        return (minCapacity > MAX_BUFFER_SIZE) ?
-            minCapacity :
-            MAX_BUFFER_SIZE;
+        return Math.max(minCapacity, MAX_BUFFER_SIZE);
     }
 
     /**
@@ -217,7 +212,8 @@ public abstract class BaseNCodec {
         return b;
     }
 
-    protected final byte pad; // instance variable just in case it needs to vary later
+    /** Pad byte. Instance variable just in case it needs to vary later. */
+    protected final byte pad;
 
     /** Number of bytes in each full block of unencoded data, e.g. 4 for Base64 and 5 for Base32 */
     private final int unencodedBlockSize;
@@ -228,7 +224,7 @@ public abstract class BaseNCodec {
     /**
      * Chunksize for encoding. Not used when decoding.
      * A value of zero or less implies no chunking of the encoded data.
-     * Rounded down to nearest multiple of encodedBlockSize.
+     * Rounded down to the nearest multiple of encodedBlockSize.
      */
     protected final int lineLength;
 
@@ -426,7 +422,7 @@ public abstract class BaseNCodec {
      *
      * @param pArray byte[] array which will later be encoded
      *
-     * @return amount of space needed to encoded the supplied array.
+     * @return amount of space needed to encode the supplied array.
      * Returns a long since a max-len array will require &gt; Integer.MAX_VALUE
      */
     public long getEncodedLength(final byte[] pArray) {

==================================================
