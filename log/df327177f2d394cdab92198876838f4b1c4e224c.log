df327177f2d394cdab92198876838f4b1c4e224c
==================================================
Switch from ignoring unavoidable generics warnings in Eclipse to
==================================================
Mark Emlyn
==================================================
Thu Aug 8 18:07:43 2013 +0000
==================================================
StandardELContext.java
index 10f04eab5f..8a3164fe03 100644
--- a/build.xml
+++ b/build.xml
@@ -558,9 +558,7 @@
            excludes="**/.svn/**"
            encoding="ISO-8859-1"
            includeAntRuntime="true" >
-      <!-- Uncomment this to show unchecked warnings:
       <compilerarg value="-Xlint:unchecked"/>
-      -->
       <include name="org/apache/tomcat/buildutil/CheckEol*" />
     </javac>
 
@@ -613,9 +611,7 @@
            excludes="**/.svn/**"
            encoding="ISO-8859-1"
            includeAntRuntime="true" >
-      <!-- Uncomment this to show unchecked warnings:
       <compilerarg value="-Xlint:unchecked"/>
-      -->
       <classpath refid="compile.classpath" />
         <exclude name="org/apache/naming/factory/webservices/**" />
         <exclude name="org/apache/tomcat/spdy/NetSupportJava7*" unless="npn.exists"/>

==================================================
ContainerProvider.java
index f18b86aa15..d313483e50 100644
--- a/java/javax/el/StandardELContext.java
+++ b/java/javax/el/StandardELContext.java
@@ -75,7 +75,8 @@ public class StandardELContext extends ELContext {
 
     // Can't use Class<?> because API needs to match specification
     @Override
-    public void putContext(Class key, Object contextObject) {
+    public void putContext(@SuppressWarnings("rawtypes") Class key,
+            Object contextObject) {
         if (wrappedContext == null) {
             super.putContext(key, contextObject);
         } else {
@@ -84,7 +85,7 @@ public class StandardELContext extends ELContext {
     }
 
     @Override
-    public Object getContext(Class key) {
+    public Object getContext(@SuppressWarnings("rawtypes") Class key) {
         if (wrappedContext == null) {
             return super.getContext(key);
         } else {

==================================================
ServerEndpointConfig.java
index 774efe2657..7b78dc59f2 100644
--- a/java/javax/websocket/ContainerProvider.java
+++ b/java/javax/websocket/ContainerProvider.java
@@ -44,6 +44,7 @@ public abstract class ContainerProvider {
         // Fall-back. Also used by unit tests
         if (result == null) {
             try {
+                @SuppressWarnings("unchecked")
                 Class<WebSocketContainer> clazz =
                         (Class<WebSocketContainer>) Class.forName(
                                 DEFAULT_PROVIDER_CLASS_NAME);

==================================================
Request.java
index ee5408f6d1..117deb51b9 100644
--- a/java/javax/websocket/server/ServerEndpointConfig.java
+++ b/java/javax/websocket/server/ServerEndpointConfig.java
@@ -170,6 +170,7 @@ public interface ServerEndpointConfig extends EndpointConfig {
             // Fall-back. Also used by unit tests
             if (result == null) {
                 try {
+                    @SuppressWarnings("unchecked")
                     Class<Configurator> clazz =
                             (Class<Configurator>) Class.forName(
                                     DEFAULT_IMPL_CLASSNAME);

==================================================
ApplicationContext.java
index ff3875a84b..6de5b1063e 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -1876,6 +1876,7 @@ public class Request
      *
      * @since Servlet 3.1
      */
+    @SuppressWarnings("unchecked")
     @Override
     public <T extends HttpUpgradeHandler> T upgrade(
             Class<T> httpUpgradeHandlerClass) throws java.io.IOException, ServletException {

==================================================
AsyncContextImpl.java
index c86e1b0677..dfc6d9a414 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -926,6 +926,7 @@ public class ApplicationContext
     public <T extends Filter> T createFilter(Class<T> c)
     throws ServletException {
         try {
+            @SuppressWarnings("unchecked")
             T filter = (T) context.getInstanceManager().newInstance(c.getName());
             return filter;
         } catch (IllegalAccessException e) {
@@ -1068,6 +1069,7 @@ public class ApplicationContext
     public <T extends Servlet> T createServlet(Class<T> c)
     throws ServletException {
         try {
+            @SuppressWarnings("unchecked")
             T servlet = (T) context.getInstanceManager().newInstance(c.getName());
             context.dynamicServletCreated(servlet);
             return servlet;
@@ -1295,6 +1297,7 @@ public class ApplicationContext
     public <T extends EventListener> T createListener(Class<T> c)
             throws ServletException {
         try {
+            @SuppressWarnings("unchecked")
             T listener =
                 (T) context.getInstanceManager().newInstance(c);
             if (listener instanceof ServletContextListener ||

==================================================
CsrfPreventionFilter.java
index 13b7814373..c4c07d9237 100644
--- a/java/org/apache/catalina/core/AsyncContextImpl.java
+++ b/java/org/apache/catalina/core/AsyncContextImpl.java
@@ -282,6 +282,7 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
         listeners.add(wrapper);
     }
 
+    @SuppressWarnings("unchecked")
     @Override
     public <T extends AsyncListener> T createListener(Class<T> clazz)
             throws ServletException {

==================================================
WebappClassLoader.java
index 311990a106..98083557c2 100644
--- a/java/org/apache/catalina/filters/CsrfPreventionFilter.java
+++ b/java/org/apache/catalina/filters/CsrfPreventionFilter.java
@@ -176,6 +176,7 @@ public class CsrfPreventionFilter extends FilterBase {
 
             HttpSession session = req.getSession(false);
 
+            @SuppressWarnings("unchecked")
             LruCache<String> nonceCache = (session == null) ? null
                     : (LruCache<String>) session.getAttribute(
                             Constants.CSRF_NONCE_SESSION_ATTR_NAME);

==================================================
JAASRealm.java
index e231643b4d..0aead958ee 100644
--- a/java/org/apache/catalina/loader/WebappClassLoader.java
+++ b/java/org/apache/catalina/loader/WebappClassLoader.java
@@ -1800,6 +1800,7 @@ public class WebappClassLoader
                 defineClass("org.apache.catalina.loader.JdbcLeakPrevention",
                     classBytes, 0, offset, this.getClass().getProtectionDomain());
             Object obj = lpClass.newInstance();
+            @SuppressWarnings("unchecked")
             List<String> driverNames = (List<String>) obj.getClass().getMethod(
                     "clearJdbcDriverRegistrations").invoke(obj);
             for (String name : driverNames) {
@@ -1828,6 +1829,7 @@ public class WebappClassLoader
 
     private final void clearReferencesStaticFinal() {
 
+        @SuppressWarnings("unchecked")
         Collection<ResourceEntry> values =
             ((HashMap<String,ResourceEntry>) resourceEntries.clone()).values();
         Iterator<ResourceEntry> loadedClasses = values.iterator();

==================================================
RealmBase.java
index da30fbda74..a2ff7e2588 100644
--- a/java/org/apache/catalina/realm/JAASRealm.java
+++ b/java/org/apache/catalina/realm/JAASRealm.java
@@ -629,6 +629,7 @@ public class JAASRealm extends RealmBase {
                 URL resource = Thread.currentThread().getContextClassLoader().
                         getResource(configFile);
                 URI uri = resource.toURI();
+                @SuppressWarnings("unchecked")
                 Class<Configuration> sunConfigFile = (Class<Configuration>)
                         Class.forName("com.sun.security.auth.login.ConfigFile");
                 Constructor<Configuration> constructor =

==================================================
WebappServiceLoader.java
index 9a6328a70f..e5a96e2971 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -1415,6 +1415,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
             return new X509SubjectDnRetriever();
 
         try {
+            @SuppressWarnings("unchecked")
             Class<? extends X509UsernameRetriever> clazz = (Class<? extends X509UsernameRetriever>)Class.forName(className);
             return clazz.newInstance();
         } catch (ClassNotFoundException e) {

==================================================
TwoPhaseCommitInterceptor.java
index 70f594a015..49767a52ee 100644
--- a/java/org/apache/catalina/startup/WebappServiceLoader.java
+++ b/java/org/apache/catalina/startup/WebappServiceLoader.java
@@ -82,6 +82,7 @@ public class WebappServiceLoader<T> {
 
         // if the ServletContext has ORDERED_LIBS, then use that to specify the
         // set of JARs from WEB-INF/lib that should be used for loading services
+        @SuppressWarnings("unchecked")
         List<String> orderedLibs =
                 (List<String>) context.getAttribute(ServletContext.ORDERED_LIBS);
         if (orderedLibs != null) {

==================================================
Membership.java
index aa33e58890..b928958af7 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/TwoPhaseCommitInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/TwoPhaseCommitInterceptor.java
@@ -116,6 +116,7 @@ public class TwoPhaseCommitInterceptor extends ChannelInterceptorBase {
     public void heartbeat() {
         try {
             long now = System.currentTimeMillis();
+            @SuppressWarnings("unchecked")
             Map.Entry<UniqueId,MapEntry>[] entries = messages.entrySet().toArray(new Map.Entry[messages.size()]);
             for (int i=0; i<entries.length; i++ ) {
                 MapEntry entry = entries[i].getValue();

==================================================
AbstractReplicatedMap.java
index d44255334a..79652f1292 100644
--- a/java/org/apache/catalina/tribes/membership/Membership.java
+++ b/java/org/apache/catalina/tribes/membership/Membership.java
@@ -69,6 +69,7 @@ public class Membership implements Cloneable {
     public Object clone() {
         synchronized (membersLock) {
             Membership clone = new Membership(local, memberComparator);
+            @SuppressWarnings("unchecked")
             final HashMap<Member, MbrEntry> tmpclone = (HashMap<Member, MbrEntry>) map.clone();
             clone.map = tmpclone;
             clone.members = new Member[members.length];

==================================================
MultipointBioSender.java
index 84c7939366..ef3c82370d 100644
--- a/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
@@ -377,6 +377,7 @@ public abstract class AbstractReplicatedMap<K,V>
 
     public Member[] getMapMembersExcl(Member[] exclude) {
         synchronized (mapMembers) {
+            @SuppressWarnings("unchecked")
             HashMap<Member, Long> list = (HashMap<Member, Long>)mapMembers.clone();
             for (int i=0; i<exclude.length;i++) list.remove(exclude[i]);
             return getMapMembers(list);
@@ -1007,6 +1008,7 @@ public abstract class AbstractReplicatedMap<K,V>
     public void putAll(Map<? extends K, ? extends V> m) {
         Iterator<?> i = m.entrySet().iterator();
         while ( i.hasNext() ) {
+            @SuppressWarnings("unchecked")
             Map.Entry<K,V> entry = (Map.Entry<K,V>) i.next();
             put(entry.getKey(),entry.getValue());
         }
@@ -1247,6 +1249,7 @@ public abstract class AbstractReplicatedMap<K,V>
          * @throws IOException
          * @throws ClassNotFoundException
          */
+        @SuppressWarnings("unchecked")
         public void apply(byte[] data, int offset, int length, boolean diff) throws IOException, ClassNotFoundException {
             if (isDiffable() && diff) {
                 ReplicatedMapEntry rentry = (ReplicatedMapEntry) value;

==================================================
AbstractHttp11Processor.java
index e46dea310f..0a610bc22f 100644
--- a/java/org/apache/catalina/tribes/transport/bio/MultipointBioSender.java
+++ b/java/org/apache/catalina/tribes/transport/bio/MultipointBioSender.java
@@ -139,6 +139,7 @@ public class MultipointBioSender extends AbstractSender implements MultiPointSen
     @Override
     public boolean keepalive() {
         boolean result = false;
+        @SuppressWarnings("unchecked")
         Map.Entry<Member,BioSender>[] entries = bioSenders.entrySet().toArray(new Map.Entry[bioSenders.size()]);
         for ( int i=0; i<entries.length; i++ ) {
             BioSender sender = entries[i].getValue();

==================================================
AbstractHttp11Protocol.java
index 9ba9c0c3df..0d012b5a29 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -790,6 +790,7 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
             InputFilter savedBody = new SavedRequestInputFilter(body);
             savedBody.setRequest(request);
 
+            @SuppressWarnings("unchecked")
             AbstractInputBuffer<S> internalBuffer = (AbstractInputBuffer<S>)
                 request.getInputBuffer();
             internalBuffer.addActiveFilter(savedBody);

==================================================
EvaluationContext.java
index 5f4d7dc3c3..62cf74bc0d 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -177,6 +177,7 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol {
     }
 
     protected NpnHandler<S> npnHandler;
+    @SuppressWarnings("unchecked")
     public void setNpnHandler(String impl) {
         try {
             Class<?> c = Class.forName(impl);

==================================================
FunctionMapperImpl.java
index 2d51e2c0f4..f0a48a87c1 100644
--- a/java/org/apache/el/lang/EvaluationContext.java
+++ b/java/org/apache/el/lang/EvaluationContext.java
@@ -59,7 +59,7 @@ public final class EvaluationContext extends ELContext {
 
     @Override
     // Can't use Class<?> because API needs to match specification in superclass
-    public Object getContext(Class key) {
+    public Object getContext(@SuppressWarnings("rawtypes") Class key) {
         return elContext.getContext(key);
     }
 
@@ -75,7 +75,8 @@ public final class EvaluationContext extends ELContext {
 
     @Override
     // Can't use Class<?> because API needs to match specification in superclass
-    public void putContext(Class key, Object contextObject) {
+    public void putContext(@SuppressWarnings("rawtypes") Class key,
+            Object contextObject) {
         elContext.putContext(key, contextObject);
     }
 

==================================================
VariableMapperImpl.java
index f61d1321bb..9d76fca594 100644
--- a/java/org/apache/el/lang/FunctionMapperImpl.java
+++ b/java/org/apache/el/lang/FunctionMapperImpl.java
@@ -80,6 +80,7 @@ public class FunctionMapperImpl extends FunctionMapper implements
      *
      * @see java.io.Externalizable#readExternal(java.io.ObjectInput)
      */
+    @SuppressWarnings("unchecked")
     @Override
     public void readExternal(ObjectInput in) throws IOException,
             ClassNotFoundException {

==================================================
ELContextWrapper.java
index ee3910e17f..4fdcf7f376 100644
--- a/java/org/apache/el/lang/VariableMapperImpl.java
+++ b/java/org/apache/el/lang/VariableMapperImpl.java
@@ -52,6 +52,7 @@ public class VariableMapperImpl extends VariableMapper implements Externalizable
         }
     }
 
+    @SuppressWarnings("unchecked")
     @Override
     public void readExternal(ObjectInput in) throws IOException,
             ClassNotFoundException {

==================================================
ExpressionEvaluatorImpl.java
index a26613695b..8c18293469 100644
--- a/java/org/apache/jasper/el/ELContextWrapper.java
+++ b/java/org/apache/jasper/el/ELContextWrapper.java
@@ -55,7 +55,7 @@ public final class ELContextWrapper extends ELContext {
     }
 
     @Override
-    public Object getContext(Class key) {
+    public Object getContext(@SuppressWarnings("rawtypes") Class key) {
         return this.target.getContext(key);
     }
 
@@ -70,7 +70,8 @@ public final class ELContextWrapper extends ELContext {
     }
 
     @Override
-    public void putContext(Class key, Object contextObject) throws NullPointerException {
+    public void putContext(@SuppressWarnings("rawtypes") Class key,
+            Object contextObject) throws NullPointerException {
         this.target.putContext(key, contextObject);
     }
 

==================================================
ServiceProxy.java
index a73ac34c29..0a2a8a762f 100644
--- a/java/org/apache/jasper/el/ExpressionEvaluatorImpl.java
+++ b/java/org/apache/jasper/el/ExpressionEvaluatorImpl.java
@@ -35,7 +35,8 @@ public final class ExpressionEvaluatorImpl extends ExpressionEvaluator {
     }
 
     @Override
-    public Expression parseExpression(String expression, Class expectedType,
+    public Expression parseExpression(String expression,
+            @SuppressWarnings("rawtypes") Class expectedType,
             FunctionMapper fMapper) throws ELException {
         try {
             ELContextImpl ctx =
@@ -51,7 +52,8 @@ public final class ExpressionEvaluatorImpl extends ExpressionEvaluator {
     }
 
     @Override
-    public Object evaluate(String expression, Class expectedType,
+    public Object evaluate(String expression,
+            @SuppressWarnings("rawtypes") Class expectedType,
             VariableResolver vResolver, FunctionMapper fMapper)
             throws ELException {
         return this.parseExpression(expression, expectedType, fMapper).evaluate(vResolver);

==================================================
ServiceRefFactory.java
index bcce0fc2b1..5341688a2f 100644
--- a/java/org/apache/naming/factory/webservices/ServiceProxy.java
+++ b/java/org/apache/naming/factory/webservices/ServiceProxy.java
@@ -103,7 +103,8 @@ public class ServiceProxy implements InvocationHandler {
         String nameString = name.getLocalPart();
         Class<?> serviceendpointClass = (Class<?>) args[1];
 
-        for (Iterator<QName> ports = service.getPorts(); ports.hasNext();) {
+        for (@SuppressWarnings("unchecked")
+        Iterator<QName> ports = service.getPorts(); ports.hasNext();) {
             QName portName = ports.next();
             String portnameString = portName.getLocalPart();
             if (portnameString.equals(nameString)) {

==================================================
ManagedConcurrentWeakHashMap.java
index 4b0bb7bfce..e400229fce 100644
--- a/java/org/apache/naming/factory/webservices/ServiceRefFactory.java
+++ b/java/org/apache/naming/factory/webservices/ServiceRefFactory.java
@@ -176,6 +176,7 @@ public class ServiceRefFactory implements ObjectFactory {
                     Definition def = reader.readWSDL((new URL(wsdlRefAddr)).toExternalForm());
 
                     javax.wsdl.Service wsdlservice = def.getService(serviceQname);
+                    @SuppressWarnings("unchecked")
                     Map<String,?> ports = wsdlservice.getPorts();
                     Method m = serviceInterfaceClass.getMethod("setEndpointAddress",
                             new Class[] { java.lang.String.class,
@@ -327,6 +328,7 @@ public class ServiceRefFactory implements ObjectFactory {
      */
     private String getSOAPLocation(Port port) {
         String endpoint = null;
+        @SuppressWarnings("unchecked")
         List<ExtensibilityElement> extensions = port.getExtensibilityElements();
         for (Iterator<ExtensibilityElement> i = extensions.iterator();
                 i.hasNext();) {
@@ -343,6 +345,7 @@ public class ServiceRefFactory implements ObjectFactory {
     private void initHandlerChain(QName portName, HandlerRegistry handlerRegistry,
             HandlerInfo handlerInfo, ArrayList<String> soaprolesToAdd) {
         HandlerChain handlerChain = (HandlerChain) handlerRegistry.getHandlerChain(portName);
+        @SuppressWarnings("unchecked")
         Iterator<Handler> iter = handlerChain.iterator();
         while (iter.hasNext()) {
             Handler handler = iter.next();

==================================================
Util.java
index 5907f83957..0d2e758ebb 100644
--- a/java/org/apache/tomcat/util/collections/ManagedConcurrentWeakHashMap.java
+++ b/java/org/apache/tomcat/util/collections/ManagedConcurrentWeakHashMap.java
@@ -243,6 +243,7 @@ public class ManagedConcurrentWeakHashMap<K, V> extends AbstractMap<K, V> implem
                         return new Map.Entry<K, V>() {
                             private final Map.Entry<Key, V> en = it.next();
 
+                            @SuppressWarnings("unchecked")
                             @Override
                             public K getKey() {
                                 return (K) en.getKey().get();

==================================================
PojoEndpointServer.java
index 4e9b169b08..8c2be55a0a 100644
--- a/java/org/apache/tomcat/websocket/Util.java
+++ b/java/org/apache/tomcat/websocket/Util.java
@@ -197,6 +197,7 @@ public class Util {
         }
 
         // Interface not found on this class. Look at the superclass.
+        @SuppressWarnings("unchecked")
         Class<? extends T> superClazz =
                 (Class<? extends T>) clazz.getSuperclass();
 
@@ -368,6 +369,7 @@ public class Util {
             try {
                 List<Class<? extends Decoder>> decoders =
                         endpointConfig.getDecoders();
+                @SuppressWarnings("unchecked")
                 List<DecoderEntry> decoderEntries = getDecoders(
                         decoders.toArray(new Class[decoders.size()]));
                 decoderMatch = new DecoderMatch(target, decoderEntries);

==================================================
PoolProperties.java
index 9ebebeb0fe..77ef83defd 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoEndpointServer.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoEndpointServer.java
@@ -56,6 +56,7 @@ public class PojoEndpointServer extends PojoEndpointBase {
         }
         setPojo(pojo);
 
+        @SuppressWarnings("unchecked")
         Map<String,String> pathParameters =
                 (Map<String, String>) sec.getUserProperties().get(
                         POJO_PATH_PARAM_KEY);

==================================================
StatementCache.java
index f7c9df63cf..79413fc353 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
@@ -754,6 +754,7 @@ public class PoolProperties implements PoolConfiguration, Cloneable, Serializabl
         }
 
         try {
+            @SuppressWarnings("unchecked")
             Class<Validator> validatorClass = (Class<Validator>)Class.forName(className);
             validator = validatorClass.newInstance();
         } catch (ClassNotFoundException e) {

==================================================
TestStandardContextResources.java
index a6cafb67e7..cc61a1911d 100644
--- a/res/ide-support/eclipse/java-compiler-errors-warnings.txt
+++ b/res/ide-support/eclipse/java-compiler-errors-warnings.txt
@@ -67,7 +67,7 @@ Unnecessary code
 
 Generic types
  - All                                  - W
-   [x] Ignore unavoidable generic type problems
+   [ ] Ignore unavoidable generic type problems
 
 Annotations
  - All                                  - W

==================================================
TestCsrfPreventionFilter.java
index fe35ef098b..cff72286d2 100644
--- a/test/org/apache/catalina/core/TestStandardContextResources.java
+++ b/test/org/apache/catalina/core/TestStandardContextResources.java
@@ -88,6 +88,7 @@ public class TestStandardContextResources extends TomcatBaseTest {
 
         // For BZ 54391. Relative ordering is specified in resources2.jar.
         // It is not absolute-ordering, so there may be other jars in the list
+        @SuppressWarnings("unchecked")
         List<String> orderedLibs = (List<String>) ctx.getServletContext()
                 .getAttribute(ServletContext.ORDERED_LIBS);
         if (orderedLibs.size() > 2) {

==================================================
TestWsRemoteEndpoint.java
index a16086782a..04187e5d1d 100644
--- a/test/org/apache/catalina/filters/TestCsrfPreventionFilter.java
+++ b/test/org/apache/catalina/filters/TestCsrfPreventionFilter.java
@@ -83,6 +83,7 @@ public class TestCsrfPreventionFilter extends TomcatBaseTest {
         ByteArrayInputStream bais =
             new ByteArrayInputStream(baos.toByteArray());
         ObjectInputStream ois = new ObjectInputStream(bais);
+        @SuppressWarnings("unchecked")
         LruCache<String> cache2 = (LruCache<String>) ois.readObject();
 
         cache2.add("key7");

==================================================
