434f23b1ecadbbf12929071144cd33cdcf38864f
==================================================
Align the process methods some more.
==================================================
Mark Emlyn
==================================================
Fri Jul 8 11:49:50 2011 +0000
==================================================
AjpAprProtocol.java
Align the process methods some more.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1144272 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpProtocol.java
index 661b68e24a..b0266358ef 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -129,6 +129,17 @@ public class AjpAprProtocol extends AbstractAjpProtocol {
             recycledProcessors.clear();
         }
         
+        /**
+         * Expected to be used by the handler once the processor is no longer
+         * required.
+         */
+        public void release(SocketWrapper<Long> socket,
+                AjpAprProcessor processor, boolean isSocketClosing) {
+            processor.recycle(isSocketClosing);
+            recycledProcessors.offer(processor);
+        }
+
+
         @Override
         public SocketState process(SocketWrapper<Long> socket,
                 SocketStatus status) {
@@ -165,13 +176,12 @@ public class AjpAprProtocol extends AbstractAjpProtocol {
                 } else if (state == SocketState.OPEN){
                     // In keep-alive but between requests. OK to recycle
                     // processor. Continue to poll for the next request.
-                    processor.recycle(false);
-                    recycledProcessors.offer(processor);
+                    release(socket, processor, false);
                     ((AprEndpoint)proto.endpoint).getPoller().add(
                             socket.getSocket().longValue());
                 } else {
-                    processor.recycle(true);
-                    recycledProcessors.offer(processor);
+                    // Connection closed. OK to recycle the processor.
+                    release(socket, processor, true);
                 }
                 return state;
             } catch(java.net.SocketException e) {
@@ -193,8 +203,7 @@ public class AjpAprProtocol extends AbstractAjpProtocol {
                 // less-than-verbose logs.
                 log.error(sm.getString("ajpprotocol.proto.error"), e);
             }
-            processor.recycle(true);
-            recycledProcessors.offer(processor);
+            release(socket, processor, true);
             return SocketState.CLOSED;
         }
 

==================================================
