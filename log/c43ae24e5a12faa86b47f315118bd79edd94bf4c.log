c43ae24e5a12faa86b47f315118bd79edd94bf4c
==================================================
Simplify read and write registration for non-blocking I/O.
==================================================
Mark Thomas
==================================================
Wed Jan 28 13:07:37 2015 +0000
==================================================
AjpProcessor.java
Simplify read and write registration for non-blocking I/O.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1655292 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AprEndpoint.java
index fded7dc6b8..9000ae358d 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -582,7 +582,7 @@ public class AjpProcessor<S> extends AbstractProcessor<S> {
         }
         case NB_READ_INTEREST: {
             if (!endOfStream) {
-                socketWrapper.regsiterForEvent(true, false);
+                socketWrapper.registerReadInterest();
             }
             break;
         }
@@ -644,7 +644,7 @@ public class AjpProcessor<S> extends AbstractProcessor<S> {
                     request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, x);
                 }
             } catch (IllegalStateException x) {
-                socketWrapper.regsiterForEvent(false, true);
+                socketWrapper.registerWriteInterest();
             }
         } else if (status == SocketStatus.OPEN_READ &&
                 request.getReadListener() != null) {
@@ -653,7 +653,7 @@ public class AjpProcessor<S> extends AbstractProcessor<S> {
                     asyncStateMachine.asyncOperation();
                 }
             } catch (IllegalStateException x) {
-                socketWrapper.regsiterForEvent(true, false);
+                socketWrapper.registerReadInterest();
             }
         }
 

==================================================
Nio2Endpoint.java
index 984074d112..cdb02fc7d9 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -2629,20 +2629,15 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
 
         @Override
         public void registerReadInterest() {
-            regsiterForEvent(true, false);
+            ((AprEndpoint) getEndpoint()).getPoller().add(
+                    getSocket().longValue(), -1, true, false);
         }
 
 
         @Override
         public void registerWriteInterest() {
-            regsiterForEvent(false, true);
-        }
-
-
-        @Override
-        public void regsiterForEvent(boolean read, boolean write) {
             ((AprEndpoint) getEndpoint()).getPoller().add(
-                    getSocket().longValue(), -1, read, write);
+                    getSocket().longValue(), -1, false, true);
         }
 
 

==================================================
NioEndpoint.java
index cb15a89a9e..f85a22fb19 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -1284,12 +1284,6 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
         }
 
 
-        @Override
-        public void regsiterForEvent(boolean read, boolean write) {
-            // NO-OP. Appropriate handlers will already have been registered.
-        }
-
-
         public void awaitBytes() {
             if (getSocket() == null) {
                 return;

==================================================
SocketWrapperBase.java
index 160c21cd43..26f7b5a57d 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -1570,22 +1570,6 @@ public class NioEndpoint extends AbstractEndpoint<NioChannel> {
         }
 
 
-        @Override
-        public void regsiterForEvent(boolean read, boolean write) {
-            SelectionKey key = getSocket().getIOChannel().keyFor(
-                    getSocket().getPoller().getSelector());
-            if (read) {
-                this.interestOps(this.interestOps() | SelectionKey.OP_READ);
-                key.interestOps(key.interestOps() | SelectionKey.OP_READ);
-            }
-            if (write) {
-                this.interestOps(this.interestOps() | SelectionKey.OP_WRITE);
-                key.interestOps(key.interestOps() | SelectionKey.OP_READ);
-            }
-        }
-
-
-
         @Override
         public SendfileDataBase createSendfileData(String filename, long pos, long length) {
             return new SendfileData(filename, pos, length);

==================================================
