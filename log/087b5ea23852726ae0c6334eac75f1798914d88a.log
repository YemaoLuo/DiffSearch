087b5ea23852726ae0c6334eac75f1798914d88a
==================================================
Code clean-up
==================================================
Mark Emlyn
==================================================
Thu Aug 16 22:19:30 2012 +0000
==================================================
ELFunctionMapper.java
Code clean-up
 - Java 7 <>
 - UCDetector use of final

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1374086 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ELNode.java
index 409e0429e1..4cb50b7068 100644
--- a/java/org/apache/jasper/compiler/ELFunctionMapper.java
+++ b/java/org/apache/jasper/compiler/ELFunctionMapper.java
@@ -74,7 +74,7 @@ public class ELFunctionMapper {
          * Use a global name map to facilitate reuse of function maps.
          * The key used is prefix:function:uri.
          */
-        private HashMap<String, String> gMap = new HashMap<String, String>();
+        private final HashMap<String, String> gMap = new HashMap<>();
 
         @Override
         public void visit(Node.ParamAction n) throws JasperException {
@@ -163,9 +163,8 @@ public class ELFunctionMapper {
 
             // Only care about functions in ELNode's
             class Fvisitor extends ELNode.Visitor {
-                ArrayList<ELNode.Function> funcs =
-                    new ArrayList<ELNode.Function>();
-                HashMap<String, String> keyMap = new HashMap<String, String>();
+                final ArrayList<ELNode.Function> funcs = new ArrayList<>();
+                final HashMap<String, String> keyMap = new HashMap<>();
                 @Override
                 public void visit(ELNode.Function n) throws JasperException {
                     String key = n.getPrefix() + ":" + n.getName();

==================================================
ELParser.java
index 0cfe4129a7..25d9187867 100644
--- a/java/org/apache/jasper/compiler/ELNode.java
+++ b/java/org/apache/jasper/compiler/ELNode.java
@@ -48,8 +48,8 @@ abstract class ELNode {
      */
     public static class Root extends ELNode {
 
-        private ELNode.Nodes expr;
-    private char type;
+        private final ELNode.Nodes expr;
+        private final char type;
 
         Root(ELNode.Nodes expr, char type) {
             this.expr = expr;
@@ -75,7 +75,7 @@ abstract class ELNode {
      */
     public static class Text extends ELNode {
 
-        private String text;
+        private final String text;
 
         Text(String text) {
             this.text = text;
@@ -97,7 +97,7 @@ abstract class ELNode {
      */
     public static class ELText extends ELNode {
 
-        private String text;
+        private final String text;
 
         ELText(String text) {
             this.text = text;
@@ -120,8 +120,8 @@ abstract class ELNode {
      */
     public static class Function extends ELNode {
 
-        private String prefix;
-        private String name;
+        private final String prefix;
+        private final String name;
         private String uri;
         private FunctionInfo functionInfo;
         private String methodName;
@@ -187,10 +187,10 @@ abstract class ELNode {
            EL expression, for communication to Generator.
          */
         String mapName = null;        // The function map associated this EL
-        private List<ELNode> list;
+        private final List<ELNode> list;
 
         public Nodes() {
-            list = new ArrayList<ELNode>();
+            list = new ArrayList<>();
         }
 
         public void add(ELNode en) {

==================================================
