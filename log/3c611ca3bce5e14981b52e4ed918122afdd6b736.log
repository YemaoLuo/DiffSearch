3c611ca3bce5e14981b52e4ed918122afdd6b736
==================================================
Remove some unused code. Tested the basics and all seems OK.
==================================================
Mark Emlyn
==================================================
Sat May 23 19:05:31 2009 +0000
==================================================
MBeanUtils.java
Remove some unused code. Tested the basics and all seems OK.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@777990 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StandardContextMBean.java
index 00fce9b1f8..e79abce1c7 100644
--- a/java/org/apache/catalina/mbeans/MBeanUtils.java
+++ b/java/org/apache/catalina/mbeans/MBeanUtils.java
@@ -138,69 +138,6 @@ public class MBeanUtils {
 
     }
 
-
-    /**
-     * Create, register, and return an MBean for this
-     * <code>Connector</code> object.
-     *
-     * @param connector The Connector to be managed
-     *
-     * @exception Exception if an MBean cannot be created or registered
-     */
-    static DynamicMBean createMBean(Connector connector)
-        throws Exception {
-
-        String mname = createManagedName(connector);
-        ManagedBean managed = registry.findManagedBean(mname);
-        if (managed == null) {
-            Exception e = new Exception("ManagedBean is not found with "+mname);
-            throw new MBeanException(e);
-        }
-        String domain = managed.getDomain();
-        if (domain == null)
-            domain = mserver.getDefaultDomain();
-        DynamicMBean mbean = managed.createMBean(connector);
-        ObjectName oname = createObjectName(domain, connector);
-        if( mserver.isRegistered( oname ))  {
-            mserver.unregisterMBean(oname);
-        }
-        mserver.registerMBean(mbean, oname);
-        return (mbean);
-
-    }
-
-
-    /**
-     * Create, register, and return an MBean for this
-     * <code>Context</code> object.
-     *
-     * @param context The Context to be managed
-     *
-     * @exception Exception if an MBean cannot be created or registered
-     */
-    static DynamicMBean createMBean(Context context)
-        throws Exception {
-
-        String mname = createManagedName(context);
-        ManagedBean managed = registry.findManagedBean(mname);
-        if (managed == null) {
-            Exception e = new Exception("ManagedBean is not found with "+mname);
-            throw new MBeanException(e);
-        }
-        String domain = managed.getDomain();
-        if (domain == null)
-            domain = mserver.getDefaultDomain();
-        DynamicMBean mbean = managed.createMBean(context);
-        ObjectName oname = createObjectName(domain, context);
-        if( mserver.isRegistered(oname)) {
-            log.debug("Already registered " + oname);
-            mserver.unregisterMBean(oname);
-        }
-        mserver.registerMBean(mbean, oname);
-        return (mbean);
-
-    }
-
     
     /**
      * Create, register, and return an MBean for this
@@ -294,36 +231,6 @@ public class MBeanUtils {
 
     }    
  
-    /**
-     * Create, register, and return an MBean for this
-     * <code>Engine</code> object.
-     *
-     * @param engine The Engine to be managed
-     *
-     * @exception Exception if an MBean cannot be created or registered
-     */
-    static DynamicMBean createMBean(Engine engine)
-        throws Exception {
-
-        String mname = createManagedName(engine);
-        ManagedBean managed = registry.findManagedBean(mname);
-        if (managed == null) {
-            Exception e = new Exception("ManagedBean is not found with "+mname);
-            throw new MBeanException(e);
-        }
-        String domain = managed.getDomain();
-        if (domain == null)
-            domain = mserver.getDefaultDomain();
-        DynamicMBean mbean = managed.createMBean(engine);
-        ObjectName oname = createObjectName(domain, engine);
-        if( mserver.isRegistered( oname ))  {
-            mserver.unregisterMBean(oname);
-        }
-        mserver.registerMBean(mbean, oname);
-        return (mbean);
-
-    }
-
 
     /**
      * Create, register, and return an MBean for this
@@ -356,37 +263,6 @@ public class MBeanUtils {
     }
 
 
-    /**
-     * Create, register, and return an MBean for this
-     * <code>Host</code> object.
-     *
-     * @param host The Host to be managed
-     *
-     * @exception Exception if an MBean cannot be created or registered
-     */
-    static DynamicMBean createMBean(Host host)
-        throws Exception {
-
-        String mname = createManagedName(host);
-        ManagedBean managed = registry.findManagedBean(mname);
-        if (managed == null) {
-            Exception e = new Exception("ManagedBean is not found with "+mname);
-            throw new MBeanException(e);
-        }
-        String domain = managed.getDomain();
-        if (domain == null)
-            domain = mserver.getDefaultDomain();
-        DynamicMBean mbean = managed.createMBean(host);
-        ObjectName oname = createObjectName(domain, host);
-        if( mserver.isRegistered( oname ))  {
-            mserver.unregisterMBean(oname);
-        }
-        mserver.registerMBean(mbean, oname);
-        return (mbean);
-
-    }
-
-
     /**
      * Create, register, and return an MBean for this
      * <code>Loader</code> object.
@@ -418,36 +294,6 @@ public class MBeanUtils {
 
     }
 
-    /**
-     * Create, register, and return an MBean for this
-     * <code>Manager</code> object.
-     *
-     * @param manager The Manager to be managed
-     *
-     * @exception Exception if an MBean cannot be created or registered
-     */
-    static DynamicMBean createMBean(Manager manager)
-        throws Exception {
-
-        String mname = createManagedName(manager);
-        ManagedBean managed = registry.findManagedBean(mname);
-        if (managed == null) {
-            Exception e = new Exception("ManagedBean is not found with "+mname);
-            throw new MBeanException(e);
-        }
-        String domain = managed.getDomain();
-        if (domain == null)
-            domain = mserver.getDefaultDomain();
-        DynamicMBean mbean = managed.createMBean(manager);
-        ObjectName oname = createObjectName(domain, manager);
-        if( mserver.isRegistered( oname ))  {
-            mserver.unregisterMBean(oname);
-        }
-        mserver.registerMBean(mbean, oname);
-        return (mbean);
-
-    }
-
 
     /**
      * Create, register, and return an MBean for this
@@ -511,37 +357,6 @@ public class MBeanUtils {
     }
 
     
-    /**
-     * Create, register, and return an MBean for this
-     * <code>Realm</code> object.
-     *
-     * @param realm The Realm to be managed
-     *
-     * @exception Exception if an MBean cannot be created or registered
-     */
-    static DynamicMBean createMBean(Realm realm)
-        throws Exception {
-
-        String mname = createManagedName(realm);
-        ManagedBean managed = registry.findManagedBean(mname);
-        if (managed == null) {
-            Exception e = new Exception("ManagedBean is not found with "+mname);
-            throw new MBeanException(e);
-        }
-        String domain = managed.getDomain();
-        if (domain == null)
-            domain = mserver.getDefaultDomain();
-        DynamicMBean mbean = managed.createMBean(realm);
-        ObjectName oname = createObjectName(domain, realm);
-        if( mserver.isRegistered( oname ))  {
-            mserver.unregisterMBean(oname);
-        }
-        mserver.registerMBean(mbean, oname);
-        return (mbean);
-
-    }
-
-
     /**
      * Create, register, and return an MBean for this
      * <code>Role</code> object.
@@ -573,68 +388,6 @@ public class MBeanUtils {
     }
 
 
-    /**
-     * Create, register, and return an MBean for this
-     * <code>Server</code> object.
-     *
-     * @param server The Server to be managed
-     *
-     * @exception Exception if an MBean cannot be created or registered
-     */
-    static DynamicMBean createMBean(Server server)
-        throws Exception {
-
-        String mname = createManagedName(server);
-        ManagedBean managed = registry.findManagedBean(mname);
-        if (managed == null) {
-            Exception e = new Exception("ManagedBean is not found with "+mname);
-            throw new MBeanException(e);
-        }
-        String domain = managed.getDomain();
-        if (domain == null)
-            domain = mserver.getDefaultDomain();
-        DynamicMBean mbean = managed.createMBean(server);
-        ObjectName oname = createObjectName(domain, server);
-        if( mserver.isRegistered( oname ))  {
-            mserver.unregisterMBean(oname);
-        }
-        mserver.registerMBean(mbean, oname);
-        return (mbean);
-
-    }
-
-
-    /**
-     * Create, register, and return an MBean for this
-     * <code>Service</code> object.
-     *
-     * @param service The Service to be managed
-     *
-     * @exception Exception if an MBean cannot be created or registered
-     */
-    static DynamicMBean createMBean(Service service)
-        throws Exception {
-
-        String mname = createManagedName(service);
-        ManagedBean managed = registry.findManagedBean(mname);
-        if (managed == null) {
-            Exception e = new Exception("ManagedBean is not found with "+mname);
-            throw new MBeanException(e);
-        }
-        String domain = managed.getDomain();
-        if (domain == null)
-            domain = mserver.getDefaultDomain();
-        DynamicMBean mbean = managed.createMBean(service);
-        ObjectName oname = createObjectName(domain, service);
-        if( mserver.isRegistered( oname ))  {
-            mserver.unregisterMBean(oname);
-        }
-        mserver.registerMBean(mbean, oname);
-        return (mbean);
-
-    }
-
-
     /**
      * Create, register, and return an MBean for this
      * <code>User</code> object.
@@ -697,36 +450,6 @@ public class MBeanUtils {
     }
 
 
-    /**
-     * Create, register, and return an MBean for this
-     * <code>Valve</code> object.
-     *
-     * @param valve The Valve to be managed
-     *
-     * @exception Exception if an MBean cannot be created or registered
-     */
-    static DynamicMBean createMBean(Valve valve)
-        throws Exception {
-
-        String mname = createManagedName(valve);
-        ManagedBean managed = registry.findManagedBean(mname);
-        if (managed == null) {
-            Exception e = new Exception("ManagedBean is not found with "+mname);
-            throw new MBeanException(e);
-        }
-        String domain = managed.getDomain();
-        if (domain == null)
-            domain = mserver.getDefaultDomain();
-        DynamicMBean mbean = managed.createMBean(valve);
-        ObjectName oname = createObjectName(domain, valve);
-        if( mserver.isRegistered( oname ))  {
-            mserver.unregisterMBean(oname);
-        }
-        mserver.registerMBean(mbean, oname);
-        return (mbean);
-
-    }
-
     /**
      * Create an <code>ObjectName</code> for this
      * <code>Connector</code> object.

==================================================
StandardEngineMBean.java
deleted file mode 100644
index 7a76f06f91..0000000000
--- a/java/org/apache/catalina/mbeans/StandardContextMBean.java
+++ /dev/null
@@ -1,358 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.catalina.mbeans;
-
-import java.util.ArrayList;
-
-import javax.management.MBeanException;
-import javax.management.MalformedObjectNameException;
-import javax.management.ObjectName;
-import javax.management.RuntimeOperationsException;
-
-import org.apache.catalina.core.StandardContext;
-import org.apache.catalina.deploy.ContextEnvironment;
-import org.apache.catalina.deploy.ContextResource;
-import org.apache.catalina.deploy.ContextResourceLink;
-import org.apache.catalina.deploy.NamingResources;
-import org.apache.tomcat.util.modeler.BaseModelMBean;
-import org.apache.tomcat.util.modeler.ManagedBean;
-import org.apache.tomcat.util.modeler.Registry;
-
-/**
- * <p>A <strong>ModelMBean</strong> implementation for the
- * <code>org.apache.catalina.core.StandardContext</code> component.</p>
- *
- * @author Amy Roh
- * @version $Revision$ $Date$
- */
-
-public class StandardContextMBean extends BaseModelMBean {
-
-
-    // ----------------------------------------------------------- Constructors
-
-
-    /**
-     * Construct a <code>ModelMBean</code> with default
-     * <code>ModelMBeanInfo</code> information.
-     *
-     * @exception MBeanException if the initializer of an object
-     *  throws an exception
-     * @exception RuntimeOperationsException if an IllegalArgumentException
-     *  occurs
-     */
-    public StandardContextMBean()
-        throws MBeanException, RuntimeOperationsException {
-
-        super();
-
-    }
-    
-
-    // ----------------------------------------------------- Instance Variables
-    
-    
-    /**
-     * The configuration information registry for our managed beans.
-     */
-    protected Registry registry = MBeanUtils.createRegistry();
-
-    /**
-     * The <code>ManagedBean</code> information describing this MBean.
-     */
-    protected ManagedBean managed =
-        registry.findManagedBean("StandardContext");
-
-    
-    // ------------------------------------------------------------- Attributes
-
-    
-    /**
-     * Return the naming resources associated with this web application.
-     */
-    private NamingResources getNamingResources() {
-        
-        return ((StandardContext)this.resource).getNamingResources();
-    
-    }
-    
-    /**
-     * Return the naming resources associated with this web application.
-     */
-    public void reload() {
-        
-        ((StandardContext)this.resource).reload();
-    
-    }
-    
-    
-    /**
-     * Return the MBean Names of the set of defined environment entries for  
-     * this web application
-     */
-    public String[] getEnvironments() {
-        ContextEnvironment[] envs = getNamingResources().findEnvironments();
-        ArrayList<String> results = new ArrayList<String>();
-        for (int i = 0; i < envs.length; i++) {
-            try {
-                ObjectName oname =
-                    MBeanUtils.createObjectName(managed.getDomain(), envs[i]);
-                results.add(oname.toString());
-            } catch (MalformedObjectNameException e) {
-                IllegalArgumentException iae = new IllegalArgumentException
-                    ("Cannot create object name for environment " + envs[i]);
-                iae.initCause(e);
-                throw iae;
-            }
-        }
-        return results.toArray(new String[results.size()]);
-
-    }
-    
-    
-    /**
-     * Return the MBean Names of all the defined resource references for this
-     * application.
-     */
-    public String[] getResources() {
-        
-        ContextResource[] resources = getNamingResources().findResources();
-        ArrayList<String> results = new ArrayList<String>();
-        for (int i = 0; i < resources.length; i++) {
-            try {
-                ObjectName oname =
-                    MBeanUtils.createObjectName(managed.getDomain(), resources[i]);
-                results.add(oname.toString());
-            } catch (MalformedObjectNameException e) {
-                IllegalArgumentException iae = new IllegalArgumentException
-                    ("Cannot create object name for resource " + resources[i]);
-                iae.initCause(e);
-                throw iae;
-            }
-        }
-        return results.toArray(new String[results.size()]);
-
-    }
-
-      
-    /**
-     * Return the MBean Names of all the defined resource links for this 
-     * application
-     */
-    public String[] getResourceLinks() {
-        
-        ContextResourceLink[] links = getNamingResources().findResourceLinks();
-        ArrayList<String> results = new ArrayList<String>();
-        for (int i = 0; i < links.length; i++) {
-            try {
-                ObjectName oname =
-                    MBeanUtils.createObjectName(managed.getDomain(), links[i]);
-                results.add(oname.toString());
-            } catch (MalformedObjectNameException e) {
-                IllegalArgumentException iae = new IllegalArgumentException
-                    ("Cannot create object name for resource " + links[i]);
-                iae.initCause(e);
-                throw iae;
-            }
-        }
-        return results.toArray(new String[results.size()]);
-
-    }
-
-
-    /**
-     * Return the naming resources associated with this web application.
-     */
-    public javax.naming.directory.DirContext getStaticResources() {
-
-        return ((StandardContext)this.resource).getResources();
-
-    }
-
-
-    /**
-     * Return the naming resources associated with this web application.
-     */
-    public String[] getWelcomeFiles() {
-
-        return ((StandardContext)this.resource).findWelcomeFiles();
-
-    }
-
-
-    // ------------------------------------------------------------- Operations
-
-
-    /**
-     * Add an environment entry for this web application.
-     *
-     * @param envName New environment entry name
-     */
-    public String addEnvironment(String envName, String type) 
-        throws MalformedObjectNameException {
-
-        NamingResources nresources = getNamingResources();
-        if (nresources == null) {
-            return null;
-        }
-        ContextEnvironment env = nresources.findEnvironment(envName);
-        if (env != null) {
-            throw new IllegalArgumentException
-                ("Invalid environment name - already exists '" + envName + "'");
-        }
-        env = new ContextEnvironment();
-        env.setName(envName);
-        env.setType(type);
-        nresources.addEnvironment(env);
-        
-        // Return the corresponding MBean name
-        ManagedBean managed = registry.findManagedBean("ContextEnvironment");
-        ObjectName oname =
-            MBeanUtils.createObjectName(managed.getDomain(), env);
-        return (oname.toString());
-        
-    }
-
-    
-    /**
-     * Add a resource reference for this web application.
-     *
-     * @param resourceName New resource reference name
-     */
-    public String addResource(String resourceName, String type) 
-        throws MalformedObjectNameException {
-        
-        NamingResources nresources = getNamingResources();
-        if (nresources == null) {
-            return null;
-        }
-        ContextResource resource = nresources.findResource(resourceName);
-        if (resource != null) {
-            throw new IllegalArgumentException
-                ("Invalid resource name - already exists'" + resourceName + "'");
-        }
-        resource = new ContextResource();
-        resource.setName(resourceName);
-        resource.setType(type);
-        nresources.addResource(resource);
-        
-        // Return the corresponding MBean name
-        ManagedBean managed = registry.findManagedBean("ContextResource");
-        ObjectName oname =
-            MBeanUtils.createObjectName(managed.getDomain(), resource);
-        return (oname.toString());
-    }
-
-    
-    /**
-     * Add a resource link for this web application.
-     *
-     * @param resourceLinkName New resource link name
-     */
-    public String addResourceLink(String resourceLinkName, String global, 
-                String name, String type) throws MalformedObjectNameException {
-        
-        NamingResources nresources = getNamingResources();
-        if (nresources == null) {
-            return null;
-        }
-        ContextResourceLink resourceLink = 
-                                nresources.findResourceLink(resourceLinkName);
-        if (resourceLink != null) {
-            throw new IllegalArgumentException
-                ("Invalid resource link name - already exists'" + 
-                                                        resourceLinkName + "'");
-        }
-        resourceLink = new ContextResourceLink();
-        resourceLink.setGlobal(global);
-        resourceLink.setName(resourceLinkName);
-        resourceLink.setType(type);
-        nresources.addResourceLink(resourceLink);
-        
-        // Return the corresponding MBean name
-        ManagedBean managed = registry.findManagedBean("ContextResourceLink");
-        ObjectName oname =
-            MBeanUtils.createObjectName(managed.getDomain(), resourceLink);
-        return (oname.toString());
-    }    
-    
-    
-    /**
-     * Remove any environment entry with the specified name.
-     *
-     * @param envName Name of the environment entry to remove
-     */
-    public void removeEnvironment(String envName) {
-
-        NamingResources nresources = getNamingResources();
-        if (nresources == null) {
-            return;
-        }
-        ContextEnvironment env = nresources.findEnvironment(envName);
-        if (env == null) {
-            throw new IllegalArgumentException
-                ("Invalid environment name '" + envName + "'");
-        }
-        nresources.removeEnvironment(envName);
-
-    }
-    
-    
-    /**
-     * Remove any resource reference with the specified name.
-     *
-     * @param resourceName Name of the resource reference to remove
-     */
-    public void removeResource(String resourceName) {
-
-        resourceName = ObjectName.unquote(resourceName);
-        NamingResources nresources = getNamingResources();
-        if (nresources == null) {
-            return;
-        }
-        ContextResource resource = nresources.findResource(resourceName);
-        if (resource == null) {
-            throw new IllegalArgumentException
-                ("Invalid resource name '" + resourceName + "'");
-        }
-        nresources.removeResource(resourceName);
-    }
-    
-    
-    /**
-     * Remove any resource link with the specified name.
-     *
-     * @param resourceLinkName Name of the resource reference to remove
-     */
-    public void removeResourceLink(String resourceLinkName) {
-
-        resourceLinkName = ObjectName.unquote(resourceLinkName);
-        NamingResources nresources = getNamingResources();
-        if (nresources == null) {
-            return;
-        }
-        ContextResourceLink resource = nresources.findResourceLink(resourceLinkName);
-        if (resource == null) {
-            throw new IllegalArgumentException
-                ("Invalid resource name '" + resourceLinkName + "'");
-        }
-        nresources.removeResourceLink(resourceLinkName);
-    }
- 
-    
-}

==================================================
StandardHostMBean.java
deleted file mode 100644
index 7da7e7d40e..0000000000
--- a/java/org/apache/catalina/mbeans/StandardEngineMBean.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.catalina.mbeans;
-
-
-import javax.management.MBeanException;
-import javax.management.RuntimeOperationsException;
-
-import org.apache.tomcat.util.modeler.BaseModelMBean;
-
-
-/**
- * <p>A <strong>ModelMBean</strong> implementation for the
- * <code>org.apache.catalina.core.StandardEngine</code> component.</p>
- *
- * @author Craig R. McClanahan
- * @version $Revision$ $Date$
- */
-
-public class StandardEngineMBean extends BaseModelMBean {
-
-    // ----------------------------------------------------------- Constructors
-
-
-    /**
-     * Construct a <code>ModelMBean</code> with default
-     * <code>ModelMBeanInfo</code> information.
-     *
-     * @exception MBeanException if the initializer of an object
-     *  throws an exception
-     * @exception RuntimeOperationsException if an IllegalArgumentException
-     *  occurs
-     */
-    public StandardEngineMBean()
-        throws MBeanException, RuntimeOperationsException {
-
-        super();
-
-    }
-
-
-    // ------------------------------------------------------------- Attributes
-
-
-
-    // ------------------------------------------------------------- Operations
-
-
-}

==================================================
StandardServerMBean.java
deleted file mode 100644
index cb9002415b..0000000000
--- a/java/org/apache/catalina/mbeans/StandardHostMBean.java
+++ /dev/null
@@ -1,150 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.catalina.mbeans;
-
-
-import javax.management.MBeanException;
-import javax.management.MBeanServer;
-import javax.management.RuntimeOperationsException;
-
-import org.apache.catalina.Valve;
-import org.apache.catalina.core.StandardHost;
-import org.apache.tomcat.util.modeler.BaseModelMBean;
-import org.apache.tomcat.util.modeler.ManagedBean;
-import org.apache.tomcat.util.modeler.Registry;
-
-
-/**
- * <p>A <strong>ModelMBean</strong> implementation for the
- * <code>org.apache.catalina.core.StandardHost</code> component.</p>
- *
- * @author Amy Roh
- * @version $Revision$ $Date$
- */
-
-public class StandardHostMBean extends BaseModelMBean {
-
-    /**
-     * The <code>MBeanServer</code> for this application.
-     */
-    private static MBeanServer mserver = MBeanUtils.createServer();
-
-    // ----------------------------------------------------------- Constructors
-
-
-    /**
-     * Construct a <code>ModelMBean</code> with default
-     * <code>ModelMBeanInfo</code> information.
-     *
-     * @exception MBeanException if the initializer of an object
-     *  throws an exception
-     * @exception RuntimeOperationsException if an IllegalArgumentException
-     *  occurs
-     */
-    public StandardHostMBean()
-        throws MBeanException, RuntimeOperationsException {
-
-        super();
-
-    }
-
-
-    // ------------------------------------------------------------- Attributes
-
-
-
-    // ------------------------------------------------------------- Operations
-
-
-   /**
-     * Add an alias name that should be mapped to this Host
-     *
-     * @param alias The alias to be added
-     *
-     * @exception Exception if an MBean cannot be created or registered
-     */
-    public void addAlias(String alias)
-        throws Exception {
-
-        StandardHost host = (StandardHost) this.resource;
-        host.addAlias(alias);
-
-    }
-
-
-   /**
-     * Return the set of alias names for this Host
-     *
-     * @exception Exception if an MBean cannot be created or registered
-     */
-    public String [] findAliases()
-        throws Exception {
-
-        StandardHost host = (StandardHost) this.resource;
-        return host.findAliases();
-
-    }
-
-
-   /**
-     * Return the MBean Names of the Valves assoicated with this Host
-     *
-     * @exception Exception if an MBean cannot be created or registered
-     */
-    public String [] getValves()
-        throws Exception {
-
-        Registry registry = MBeanUtils.createRegistry();
-        StandardHost host = (StandardHost) this.resource;
-        String mname = MBeanUtils.createManagedName(host);
-        ManagedBean managed = registry.findManagedBean(mname);
-        String domain = null;
-        if (managed != null) {
-            domain = managed.getDomain();
-        }
-        if (domain == null)
-            domain = mserver.getDefaultDomain();
-        Valve [] valves = host.getValves();
-        String [] mbeanNames = new String[valves.length];
-        for (int i = 0; i < valves.length; i++) {
-            mbeanNames[i] =
-                MBeanUtils.createObjectName(domain, valves[i]).toString();
-        }
-
-        return mbeanNames;
-
-    }
-
-
-   /**
-     * Return the specified alias name from the aliases for this Host
-     *
-     * @param alias Alias name to be removed
-     *
-     * @exception Exception if an MBean cannot be created or registered
-     */
-    public void removeAlias(String alias)
-        throws Exception {
-
-        StandardHost host = (StandardHost) this.resource;
-        host.removeAlias(alias);
-
-    }
-
-
-}

==================================================
StandardServiceMBean.java
deleted file mode 100644
index e74d227c1e..0000000000
--- a/java/org/apache/catalina/mbeans/StandardServerMBean.java
+++ /dev/null
@@ -1,93 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.catalina.mbeans;
-
-
-import javax.management.InstanceNotFoundException;
-import javax.management.MBeanException;
-import javax.management.RuntimeOperationsException;
-import org.apache.catalina.Server;
-import org.apache.catalina.ServerFactory;
-import org.apache.catalina.core.StandardServer;
-import org.apache.tomcat.util.modeler.BaseModelMBean;
-
-
-/**
- * <p>A <strong>ModelMBean</strong> implementation for the
- * <code>org.apache.catalina.core.StandardServer</code> component.</p>
- *
- * @author Amy Roh
- * @version $Revision$ $Date$
- */
-
-public class StandardServerMBean extends BaseModelMBean {
-
-
-    // ----------------------------------------------------------- Constructors
-
-
-    /**
-     * Construct a <code>ModelMBean</code> with default
-     * <code>ModelMBeanInfo</code> information.
-     *
-     * @exception MBeanException if the initializer of an object
-     *  throws an exception
-     * @exception RuntimeOperationsException if an IllegalArgumentException
-     *  occurs
-     */
-    public StandardServerMBean()
-        throws MBeanException, RuntimeOperationsException {
-
-        super();
-
-    }
-
-
-    // ------------------------------------------------------------- Attributes
-
-
-    // ------------------------------------------------------------- Operations
-
-
-    /**
-     * Write the configuration information for this entire <code>Server</code>
-     * out to the server.xml configuration file.
-     *
-     * @exception InstanceNotFoundException if the managed resource object
-     *  cannot be found
-     * @exception MBeanException if the initializer of the object throws
-     *  an exception, or persistence is not supported
-     * @exception RuntimeOperationsException if an exception is reported
-     *  by the persistence mechanism
-     */
-    public synchronized void store() throws InstanceNotFoundException,
-        MBeanException, RuntimeOperationsException {
-
-        Server server = ServerFactory.getServer();
-        if (server instanceof StandardServer) {
-            try {
-                ((StandardServer) server).storeConfig();
-            } catch (Exception e) {
-                throw new MBeanException(e, "Error updating conf/server.xml");
-            }
-        }
-
-    }
-
-
-}

==================================================
