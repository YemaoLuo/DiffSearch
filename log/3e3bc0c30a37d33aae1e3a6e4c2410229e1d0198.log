3e3bc0c30a37d33aae1e3a6e4c2410229e1d0198
==================================================
Fix some FindBugs warnings - all unclosed streams. These could potentially lead to locked files and maybe memory leaks.
==================================================
Mark Emlyn
==================================================
Tue Dec 7 18:36:39 2010 +0000
==================================================
ExpressionFactory.java
Fix some FindBugs warnings - all unclosed streams. These could potentially lead to locked files and maybe memory leaks.
Fix some other simple FindBugs/Eclipse warnings in affected files.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1043157 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StandardContext.java
index 6f441367cd..7f4a2401e1 100644
--- a/java/javax/el/ExpressionFactory.java
+++ b/java/javax/el/ExpressionFactory.java
@@ -219,9 +219,9 @@ public abstract class ExpressionFactory {
 
         if (is != null) {
             String line = null;
+            BufferedReader br = null;
             try {
-                BufferedReader br =
-                    new BufferedReader(new InputStreamReader(is, "UTF-8"));
+                br = new BufferedReader(new InputStreamReader(is, "UTF-8"));
                 line = br.readLine();
                 if (line != null && line.trim().length() > 0) {
                     return line.trim();
@@ -233,11 +233,14 @@ public abstract class ExpressionFactory {
                 throw new ELException("Failed to read " + SERVICE_RESOURCE_NAME,
                         e);
             } finally {
+                try {
+                    if (br != null) {
+                        br.close();
+                    }
+                } catch (IOException ioe) {/*Ignore*/}
                 try {
                     is.close();
-                } catch (IOException ioe) {
-                    // Ignore
-                }
+                } catch (IOException ioe) {/*Ignore*/}
             }
         }
         

==================================================
JDTCompiler.java
index d6be6309ff..a6245463da 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -5897,21 +5897,26 @@ public class StandardContext extends ContainerBase
         if (stream == null) {
             return "";
         }
-        BufferedReader br = new BufferedReader(
-                                new InputStreamReader(stream));
         StringBuilder sb = new StringBuilder();
-        String strRead = "";
+        BufferedReader br = null;
         try {
+            br = new BufferedReader(new InputStreamReader(stream));
+            String strRead = "";
             while (strRead != null) {
                 sb.append(strRead);
                 strRead = br.readLine();
             }
         } catch (IOException e) {
             return "";
+        } finally {
+            if (br != null) {
+                try {
+                    br.close();
+                } catch (IOException ioe) {/*Ignore*/}
+            }
         }
 
         return sb.toString(); 
-    
     }
     
     

==================================================
NioEndpoint.java
index 5af0d3f1cb..3435bc2be6 100644
--- a/java/org/apache/jasper/compiler/JDTCompiler.java
+++ b/java/org/apache/jasper/compiler/JDTCompiler.java
@@ -98,17 +98,21 @@ public class JDTCompiler extends org.apache.jasper.compiler.Compiler {
                 this.sourceFile = sourceFile;
             }
 
+            @Override
             public char[] getFileName() {
                 return sourceFile.toCharArray();
             }
             
+            @Override
             public char[] getContents() {
                 char[] result = null;
                 FileInputStream is = null;
+                Reader reader = null;
                 try {
                     is = new FileInputStream(sourceFile);
-                    Reader reader = 
-                        new BufferedReader(new InputStreamReader(is, ctxt.getOptions().getJavaEncoding()));
+                     
+                    reader = new BufferedReader(new InputStreamReader(is,
+                            ctxt.getOptions().getJavaEncoding()));
                     char[] chars = new char[8192];
                     StringBuilder buf = new StringBuilder();
                     int count;
@@ -121,17 +125,21 @@ public class JDTCompiler extends org.apache.jasper.compiler.Compiler {
                 } catch (IOException e) {
                     log.error("Compilation error", e);
                 } finally {
+                    if (reader != null) {
+                        try {
+                            reader.close();
+                        } catch (IOException ioe) {/*Ignore*/}
+                    }
                     if (is != null) {
                         try {
                             is.close();
-                        } catch (IOException exc) {
-                            // Ignore
-                        }
+                        } catch (IOException exc) {/*Ignore*/}
                     }
                 }
                 return result;
             }
             
+            @Override
             public char[] getMainTypeName() {
                 int dot = className.lastIndexOf('.');
                 if (dot > 0) {
@@ -140,6 +148,7 @@ public class JDTCompiler extends org.apache.jasper.compiler.Compiler {
                 return className.toCharArray();
             }
             
+            @Override
             public char[][] getPackageName() {
                 StringTokenizer izer = 
                     new StringTokenizer(className, ".");
@@ -154,6 +163,7 @@ public class JDTCompiler extends org.apache.jasper.compiler.Compiler {
 
         final INameEnvironment env = new INameEnvironment() {
 
+                @Override
                 public NameEnvironmentAnswer 
                     findType(char[][] compoundTypeName) {
                     String result = "";
@@ -166,6 +176,7 @@ public class JDTCompiler extends org.apache.jasper.compiler.Compiler {
                     return findType(result);
                 }
 
+                @Override
                 public NameEnvironmentAnswer 
                     findType(char[] typeName, 
                              char[][] packageName) {
@@ -238,6 +249,7 @@ public class JDTCompiler extends org.apache.jasper.compiler.Compiler {
                     return is == null;
                 }
 
+                @Override
                 public boolean isPackage(char[][] parentPackageName, 
                                          char[] packageName) {
                     String result = "";
@@ -261,6 +273,7 @@ public class JDTCompiler extends org.apache.jasper.compiler.Compiler {
                     return isPackage(result);
                 }
 
+                @Override
                 public void cleanup() {
                 }
 
@@ -367,6 +380,7 @@ public class JDTCompiler extends org.apache.jasper.compiler.Compiler {
             new DefaultProblemFactory(Locale.getDefault());
         
         final ICompilerRequestor requestor = new ICompilerRequestor() {
+                @Override
                 public void acceptResult(CompilationResult result) {
                     try {
                         if (result.hasProblems()) {

==================================================
