b3b1cd21c878d7528e38a3c58a77dc36fbc3d8b7
==================================================
Remove redundant modifiers
==================================================
Mark Thomas
==================================================
Tue Feb 14 17:21:09 2023 +0000
==================================================
Generated.java
Remove redundant modifiers

Identified by CheckStyle
~80% fixed automatically by Eclipse
~20% reviewed manually

Based on PR #578 by Dimitrios Soumis


==================================================
Resource.java
index 8348127a84..e13713dd50 100644
--- a/java/jakarta/annotation/Generated.java
+++ b/java/jakarta/annotation/Generated.java
@@ -37,13 +37,13 @@ public @interface Generated {
      * @return The name of the code generator. It is recommended that the fully
      *         qualified name of the code generator is used.
      */
-    public String[] value();
+    String[] value();
     /**
      * @return The date the code was generated
      */
-    public String date() default "";
+    String date() default "";
     /**
      * @return Additional comments (if any) related to the code generation
      */
-    public String comments() default "";
+    String comments() default "";
 }

==================================================
Resources.java
index a80c573938..b779288923 100644
--- a/java/jakarta/annotation/Resource.java
+++ b/java/jakarta/annotation/Resource.java
@@ -37,7 +37,7 @@ public @interface Resource {
     /**
      * The AuthenticationType, either CONTAINER or APPLICATION
      */
-    public enum AuthenticationType {
+    enum AuthenticationType {
         /**
          * Container authentication
          */
@@ -51,39 +51,39 @@ public @interface Resource {
     /**
      * @return a String with the name of the resource
      */
-    public String name() default "";
+    String name() default "";
 
     /**
      * Uses generics since Common Annotations 1.2.
      *
      * @return The type for instances of this resource
      */
-    public Class<?> type() default Object.class;
+    Class<?> type() default Object.class;
 
     /**
      * @return the AuthenticationType of the resource default CONTAINER
      */
-    public AuthenticationType authenticationType() default AuthenticationType.CONTAINER;
+    AuthenticationType authenticationType() default AuthenticationType.CONTAINER;
 
     /**
      * @return true (default) if the resource is shareable, or false if not
      */
-    public boolean shareable() default true;
+    boolean shareable() default true;
 
     /**
      * @return a string with the description for the resource
      */
-    public String description() default "";
+    String description() default "";
 
     /**
      * @return a string with the mappedName of the resource
      */
-    public String mappedName() default "";
+    String mappedName() default "";
 
     /**
      * @since Common Annotations 1.1
      *
      * @return The name of the entry, if any, to use for this resource
      */
-    public String lookup() default "";
+    String lookup() default "";
 }

==================================================
DeclareRoles.java
index 17c154bda8..6ade76d6a6 100644
--- a/java/jakarta/annotation/Resources.java
+++ b/java/jakarta/annotation/Resources.java
@@ -35,5 +35,5 @@ public @interface Resources {
     /**
      * @return a Resource[] with the value of this Resources
      */
-    public Resource[] value();
+    Resource[] value();
 }

==================================================
RolesAllowed.java
index 0f2eb21e90..3762af6a94 100644
--- a/java/jakarta/annotation/security/DeclareRoles.java
+++ b/java/jakarta/annotation/security/DeclareRoles.java
@@ -33,5 +33,5 @@ public @interface DeclareRoles {
     /**
      * @return a String[] with the roles
      */
-    public String[] value();
+    String[] value();
 }

==================================================
RunAs.java
index 9bb62b578b..77cd130b40 100644
--- a/java/jakarta/annotation/security/RolesAllowed.java
+++ b/java/jakarta/annotation/security/RolesAllowed.java
@@ -33,5 +33,5 @@ public @interface RolesAllowed {
     /**
      * @return a String[] of the allowed roles
      */
-    public String[] value();
+    String[] value();
 }

==================================================
ArrayELResolver.java
index 33fe2762e4..d5029b7ecc 100644
--- a/java/jakarta/annotation/security/RunAs.java
+++ b/java/jakarta/annotation/security/RunAs.java
@@ -33,5 +33,5 @@ public @interface RunAs {
     /**
      * @return a String with the value for RunAs
      */
-    public String value();
+    String value();
 }

==================================================
BeanELResolver.java
index f7deded09e..116f164e43 100644
--- a/java/jakarta/el/ArrayELResolver.java
+++ b/java/jakarta/el/ArrayELResolver.java
@@ -134,14 +134,14 @@ public class ArrayELResolver extends ELResolver {
         return null;
     }
 
-    private static final void checkBounds(Object base, int idx) {
+    private static void checkBounds(Object base, int idx) {
         if (idx < 0 || idx >= Array.getLength(base)) {
             throw new PropertyNotFoundException(
                     new ArrayIndexOutOfBoundsException(idx).getMessage());
         }
     }
 
-    private static final int coerce(Object property) {
+    private static int coerce(Object property) {
         if (property instanceof Number) {
             return ((Number) property).intValue();
         }

==================================================
ELContextListener.java
index 37f37d2769..d63500ed10 100644
--- a/java/jakarta/el/BeanELResolver.java
+++ b/java/jakarta/el/BeanELResolver.java
@@ -188,7 +188,7 @@ public class BeanELResolver extends ELResolver {
 
         private final Class<?> type;
 
-        public BeanProperties(Class<?> type) throws ELException {
+        BeanProperties(Class<?> type) throws ELException {
             this.type = type;
             this.properties = new HashMap<>();
             try {
@@ -252,7 +252,7 @@ public class BeanELResolver extends ELResolver {
 
         private Method write;
 
-        public BeanProperty(Class<?> owner, PropertyDescriptor descriptor) {
+        BeanProperty(Class<?> owner, PropertyDescriptor descriptor) {
             this.owner = owner;
             this.descriptor = descriptor;
             this.type = descriptor.getPropertyType();
@@ -292,7 +292,7 @@ public class BeanELResolver extends ELResolver {
         }
     }
 
-    private final BeanProperty property(ELContext ctx, Object base,
+    private BeanProperty property(ELContext ctx, Object base,
             Object property) {
         Class<?> type = base.getClass();
         String prop = property.toString();
@@ -312,7 +312,7 @@ public class BeanELResolver extends ELResolver {
         private final Map<K,V> eden;
         private final Map<K,V> longterm;
 
-        public ConcurrentCache(int size) {
+        ConcurrentCache(int size) {
             this.size = size;
             this.eden = new ConcurrentHashMap<>(size);
             this.longterm = new WeakHashMap<>(size);

==================================================
ELProcessor.java
index 8b7bf268bf..99da2c7514 100644
--- a/java/jakarta/el/ELContextListener.java
+++ b/java/jakarta/el/ELContextListener.java
@@ -22,6 +22,6 @@ package jakarta.el;
  */
 public interface ELContextListener extends java.util.EventListener {
 
-    public void contextCreated(ELContextEvent event);
+    void contextCreated(ELContextEvent event);
 
 }

==================================================
ExpressionFactory.java
index df2fc0120c..c602ad8868 100644
--- a/java/jakarta/el/ELProcessor.java
+++ b/java/jakarta/el/ELProcessor.java
@@ -216,7 +216,7 @@ public class ELProcessor {
         private final String name;
         private final String[] parameterTypeNames;
 
-        public MethodSignature(ELContext context, String methodName,
+        MethodSignature(ELContext context, String methodName,
                 String className) throws NoSuchMethodException {
 
             int paramIndex = methodName.indexOf('(');

==================================================
ListELResolver.java
index a23625d0dc..1999547313 100644
--- a/java/jakarta/el/ExpressionFactory.java
+++ b/java/jakarta/el/ExpressionFactory.java
@@ -239,7 +239,7 @@ public abstract class ExpressionFactory {
         private final int hash;
         private final WeakReference<ClassLoader> ref;
 
-        public CacheKey(ClassLoader cl) {
+        CacheKey(ClassLoader cl) {
             hash = cl.hashCode();
             ref = new WeakReference<>(cl);
         }
@@ -270,7 +270,7 @@ public abstract class ExpressionFactory {
         private String className;
         private WeakReference<Class<?>> ref;
 
-        public CacheValue() {
+        CacheValue() {
         }
 
         public ReadWriteLock getLock() {
@@ -357,7 +357,7 @@ public abstract class ExpressionFactory {
         return null;
     }
 
-    private static final String getClassNameSysProp() {
+    private static String getClassNameSysProp() {
         String value = System.getProperty(PROPERTY_NAME);
         if (value != null && value.trim().length() > 0) {
             return value.trim();

==================================================
StandardELContext.java
index a3b64bf51c..f0fcc86da7 100644
--- a/java/jakarta/el/ListELResolver.java
+++ b/java/jakarta/el/ListELResolver.java
@@ -138,7 +138,7 @@ public class ListELResolver extends ELResolver {
         return null;
     }
 
-    private static final int coerce(Object property) {
+    private static int coerce(Object property) {
         if (property instanceof Number) {
             return ((Number) property).intValue();
         }

==================================================
Util.java
index 669a072627..9f04060ac0 100644
--- a/java/jakarta/el/StandardELContext.java
+++ b/java/jakarta/el/StandardELContext.java
@@ -147,7 +147,7 @@ public class StandardELContext extends ELContext {
 
         private final Map<String,Object> beans;
 
-        public StandardBeanNameResolver(Map<String,Object> beans) {
+        StandardBeanNameResolver(Map<String,Object> beans) {
             this.beans = beans;
         }
 
@@ -183,7 +183,7 @@ public class StandardELContext extends ELContext {
 
         private final Map<String,Method> methods = new HashMap<>();
 
-        public StandardFunctionMapper(Map<String,Method> initFunctionMap) {
+        StandardFunctionMapper(Map<String,Method> initFunctionMap) {
             if (initFunctionMap != null) {
                 methods.putAll(initFunctionMap);
             }

==================================================
MessagePolicy.java
index fb5efaf80d..6a9f313c80 100644
--- a/java/jakarta/el/Util.java
+++ b/java/jakarta/el/Util.java
@@ -145,7 +145,7 @@ class Util {
         private final int hash;
         private final WeakReference<ClassLoader> ref;
 
-        public CacheKey(ClassLoader key) {
+        CacheKey(ClassLoader key) {
             hash = key.hashCode();
             ref = new WeakReference<>(key);
         }
@@ -175,7 +175,7 @@ class Util {
         private final ReadWriteLock lock = new ReentrantReadWriteLock();
         private WeakReference<ExpressionFactory> ref;
 
-        public CacheValue() {
+        CacheValue() {
         }
 
         public ReadWriteLock getLock() {
@@ -380,7 +380,7 @@ class Util {
     }
 
 
-    private static final String paramString(Class<?>[] types) {
+    private static String paramString(Class<?>[] types) {
         if (types != null) {
             StringBuilder sb = new StringBuilder();
             for (Class<?> type : types) {
@@ -681,7 +681,7 @@ class Util {
     private static class MethodWrapper extends Wrapper<Method> {
         private final Method m;
 
-        public MethodWrapper(Method m) {
+        MethodWrapper(Method m) {
             this.m = m;
         }
 
@@ -709,7 +709,7 @@ class Util {
     private static class ConstructorWrapper extends Wrapper<Constructor<?>> {
         private final Constructor<?> c;
 
-        public ConstructorWrapper(Constructor<?> c) {
+        ConstructorWrapper(Constructor<?> c) {
             this.c = c;
         }
 
@@ -747,7 +747,7 @@ class Util {
         private final int varArgsCount;
         private final boolean bridge;
 
-        public MatchResult(boolean varArgs, int exactCount, int assignableCount, int coercibleCount, int varArgsCount,
+        MatchResult(boolean varArgs, int exactCount, int assignableCount, int coercibleCount, int varArgsCount,
                 boolean bridge) {
             this.varArgs = varArgs;
             this.exactCount = exactCount;

==================================================
PrivateKeyCallback.java
index 603705cd20..f58aaf5605 100644
--- a/java/jakarta/security/auth/message/MessagePolicy.java
+++ b/java/jakarta/security/auth/message/MessagePolicy.java
@@ -40,16 +40,16 @@ public class MessagePolicy {
         return targetPolicies;
     }
 
-    public static interface ProtectionPolicy {
+    public interface ProtectionPolicy {
 
-        static String AUTHENTICATE_SENDER = "#authenticateSender";
-        static String AUTHENTICATE_CONTENT = "#authenticateContent";
-        static String AUTHENTICATE_RECIPIENT = "#authenticateRecipient";
+        String AUTHENTICATE_SENDER = "#authenticateSender";
+        String AUTHENTICATE_CONTENT = "#authenticateContent";
+        String AUTHENTICATE_RECIPIENT = "#authenticateRecipient";
 
         String getID();
     }
 
-    public static interface Target {
+    public interface Target {
 
         Object get(MessageInfo messageInfo);
 

==================================================
SecretKeyCallback.java
index fb9d43b086..c489c5166f 100644
--- a/java/jakarta/security/auth/message/callback/PrivateKeyCallback.java
+++ b/java/jakarta/security/auth/message/callback/PrivateKeyCallback.java
@@ -56,7 +56,7 @@ public class PrivateKeyCallback implements Callback {
         return chain;
     }
 
-    public static interface Request {
+    public interface Request {
     }
 
     public static class AliasRequest implements Request {

==================================================
AuthConfigFactory.java
index 71c6a4ddda..7e16ea42da 100644
--- a/java/jakarta/security/auth/message/callback/SecretKeyCallback.java
+++ b/java/jakarta/security/auth/message/callback/SecretKeyCallback.java
@@ -44,7 +44,7 @@ public class SecretKeyCallback implements Callback {
         return key;
     }
 
-    public static interface Request {
+    public interface Request {
     }
 
     public static class AliasRequest implements Request {

==================================================
AsyncContext.java
index 011db630bd..c6ccf3cc9f 100644
--- a/java/jakarta/security/auth/message/config/AuthConfigFactory.java
+++ b/java/jakarta/security/auth/message/config/AuthConfigFactory.java
@@ -147,7 +147,7 @@ public abstract class AuthConfigFactory {
         return DEFAULT_JASPI_AUTHCONFIGFACTORYIMPL;
     }
 
-    public static interface RegistrationContext {
+    public interface RegistrationContext {
 
         String getMessageLayer();
 

==================================================
Filter.java
index aafb05724e..91b2c60634 100644
--- a/java/jakarta/servlet/AsyncContext.java
+++ b/java/jakarta/servlet/AsyncContext.java
@@ -26,37 +26,37 @@ public interface AsyncContext {
     /**
      * The attribute name for the URI of the async request
      */
-    public static final String ASYNC_REQUEST_URI =
+    String ASYNC_REQUEST_URI =
             "jakarta.servlet.async.request_uri";
 
     /**
      * The attribute name for the Context Path of the async request
      */
-    public static final String ASYNC_CONTEXT_PATH  =
+    String ASYNC_CONTEXT_PATH  =
             "jakarta.servlet.async.context_path";
 
     /**
      * The attribute name for the Mapping of the async request
      */
-    public static final String ASYNC_MAPPING =
+    String ASYNC_MAPPING =
             "jakarta.servlet.async.mapping";
 
     /**
      * The attribute name for the Path Info of the async request
      */
-    public static final String ASYNC_PATH_INFO =
+    String ASYNC_PATH_INFO =
             "jakarta.servlet.async.path_info";
 
     /**
      * The attribute name for the Servlet Path of the async request
      */
-    public static final String ASYNC_SERVLET_PATH =
+    String ASYNC_SERVLET_PATH =
             "jakarta.servlet.async.servlet_path";
 
     /**
      * The attribute name for the Query String of the async request
      */
-    public static final String ASYNC_QUERY_STRING =
+    String ASYNC_QUERY_STRING =
             "jakarta.servlet.async.query_string";
 
     /**

==================================================
FilterChain.java
index dbbe71821d..4473ec3d7f 100644
--- a/java/jakarta/servlet/Filter.java
+++ b/java/jakarta/servlet/Filter.java
@@ -65,7 +65,7 @@ public interface Filter {
      *
      * @throws ServletException if the initialisation fails
      */
-    public default void init(FilterConfig filterConfig) throws ServletException {}
+    default void init(FilterConfig filterConfig) throws ServletException {}
 
     /**
      * The <code>doFilter</code> method of the Filter is called by the container
@@ -98,7 +98,7 @@ public interface Filter {
      *                     processing of the request
      * @throws ServletException if the processing fails for any other reason
      */
-    public void doFilter(ServletRequest request, ServletResponse response,
+    void doFilter(ServletRequest request, ServletResponse response,
             FilterChain chain) throws IOException, ServletException;
 
     /**
@@ -116,5 +116,5 @@ public interface Filter {
      *
      * The default implementation is a NO-OP.
      */
-    public default void destroy() {}
+    default void destroy() {}
 }

==================================================
FilterConfig.java
index 67ef19833e..d227808886 100644
--- a/java/jakarta/servlet/FilterChain.java
+++ b/java/jakarta/servlet/FilterChain.java
@@ -44,7 +44,7 @@ public interface FilterChain {
      *                     request
      * @throws ServletException if the processing fails for any other reason
      */
-    public void doFilter(ServletRequest request, ServletResponse response)
+    void doFilter(ServletRequest request, ServletResponse response)
             throws IOException, ServletException;
 
 }

==================================================
FilterRegistration.java
index a7875651dc..a888ec7e16 100644
--- a/java/jakarta/servlet/FilterConfig.java
+++ b/java/jakarta/servlet/FilterConfig.java
@@ -33,7 +33,7 @@ public interface FilterConfig {
      * @return The filter-name of this filter as defined in the deployment
      *         descriptor.
      */
-    public String getFilterName();
+    String getFilterName();
 
     /**
      * Returns a reference to the {@link ServletContext} in which the caller is
@@ -44,7 +44,7 @@ public interface FilterConfig {
      *
      * @see ServletContext
      */
-    public ServletContext getServletContext();
+    ServletContext getServletContext();
 
     /**
      * Returns a <code>String</code> containing the value of the named
@@ -58,7 +58,7 @@ public interface FilterConfig {
      * @return <code>String</code> containing the value of the initialization
      *         parameter
      */
-    public String getInitParameter(String name);
+    String getInitParameter(String name);
 
     /**
      * Returns the names of the filter's initialization parameters as an
@@ -68,6 +68,6 @@ public interface FilterConfig {
      * @return <code>Enumeration</code> of <code>String</code> objects
      *         containing the names of the filter's initialization parameters
      */
-    public Enumeration<String> getInitParameterNames();
+    Enumeration<String> getInitParameterNames();
 
 }

==================================================
ReadListener.java
index 1d1c9c167a..d75f7643aa 100644
--- a/java/jakarta/servlet/FilterRegistration.java
+++ b/java/jakarta/servlet/FilterRegistration.java
@@ -41,7 +41,7 @@ public interface FilterRegistration extends Registration {
      * @throws IllegalStateException if the associated ServletContext has
      *                               already been initialised
      */
-    public void addMappingForServletNames(
+    void addMappingForServletNames(
             EnumSet<DispatcherType> dispatcherTypes,
             boolean isMatchAfter, String... servletNames);
 
@@ -51,7 +51,7 @@ public interface FilterRegistration extends Registration {
      *
      * @return a Collection of the Servlet name mappings
      */
-    public Collection<String> getServletNameMappings();
+    Collection<String> getServletNameMappings();
 
     /**
      * Add a mapping for this filter to one or more URL patterns.
@@ -68,7 +68,7 @@ public interface FilterRegistration extends Registration {
      * @throws IllegalStateException if the associated ServletContext has
      *                               already been initialised
      */
-    public void addMappingForUrlPatterns(
+    void addMappingForUrlPatterns(
             EnumSet<DispatcherType> dispatcherTypes,
             boolean isMatchAfter, String... urlPatterns);
 
@@ -78,13 +78,13 @@ public interface FilterRegistration extends Registration {
      *
      * @return a Collection of the URL pattern mappings
      */
-    public Collection<String> getUrlPatternMappings();
+    Collection<String> getUrlPatternMappings();
 
     /**
      * Interface through which a Filter registered via one of the addFilter
      * methods on ServletContext may be further configured.
      */
-    public static interface Dynamic extends FilterRegistration, Registration.Dynamic {
+    interface Dynamic extends FilterRegistration, Registration.Dynamic {
         // No additional methods
     }
 }

==================================================
Registration.java
index c31bba6170..08488ec4bc 100644
--- a/java/jakarta/servlet/ReadListener.java
+++ b/java/jakarta/servlet/ReadListener.java
@@ -34,19 +34,19 @@ public interface ReadListener extends java.util.EventListener{
      *
      * @throws IOException id an I/O error occurs while processing the event
      */
-    public abstract void onDataAvailable() throws IOException;
+    void onDataAvailable() throws IOException;
 
     /**
      * Invoked when the request body has been fully read.
      *
      * @throws IOException id an I/O error occurs while processing the event
      */
-    public abstract void onAllDataRead() throws IOException;
+    void onAllDataRead() throws IOException;
 
     /**
      * Invoked if an error occurs while reading the request body.
      *
      * @param throwable The exception that occurred
      */
-    public abstract void onError(java.lang.Throwable throwable);
+    void onError(java.lang.Throwable throwable);
 }

==================================================
RequestDispatcher.java
index 3213fa47b4..b88c41e1cd 100644
--- a/java/jakarta/servlet/Registration.java
+++ b/java/jakarta/servlet/Registration.java
@@ -31,14 +31,14 @@ public interface Registration {
      *
      * @return the name of the Servlet.
      */
-    public String getName();
+    String getName();
 
     /**
      * Obtain the name of the implementation class for the Servlet.
      *
      * @return the name of the implementation class for the Servlet.
      */
-    public String getClassName();
+    String getClassName();
 
     /**
      * Add an initialisation parameter if not already added.
@@ -53,7 +53,7 @@ public interface Registration {
      * @throws IllegalStateException if the ServletContext associated with this
      *         registration has already been initialised
      */
-    public boolean setInitParameter(String name, String value);
+    boolean setInitParameter(String name, String value);
 
     /**
      * Get the value of an initialisation parameter.
@@ -62,7 +62,7 @@ public interface Registration {
      *
      * @return The value of the named initialisation parameter
      */
-    public String getInitParameter(String name);
+    String getInitParameter(String name);
 
     /**
      * Add multiple initialisation parameters. If any of the supplied
@@ -79,7 +79,7 @@ public interface Registration {
      * @throws IllegalStateException if the ServletContext associated with this
      *         registration has already been initialised
      */
-    public Set<String> setInitParameters(Map<String,String> initParameters);
+    Set<String> setInitParameters(Map<String,String> initParameters);
 
     /**
      * Get the names and values of all the initialisation parameters.
@@ -87,14 +87,14 @@ public interface Registration {
      * @return A Map of initialisation parameter names and associated values
      *         keyed by name
      */
-    public Map<String, String> getInitParameters();
+    Map<String, String> getInitParameters();
 
     /**
      * Interface through which a Servlet or Filter registered via one of the
      * addServlet or addFilter methods, respectively, on ServletContext may be
      * further configured.
      */
-    public interface Dynamic extends Registration {
+    interface Dynamic extends Registration {
 
         /**
          * Mark this Servlet/Filter as supported asynchronous processing.
@@ -105,6 +105,6 @@ public interface Registration {
          * @throws IllegalStateException if the ServletContext associated with
          *         this registration has already been initialised
          */
-        public void setAsyncSupported(boolean isAsyncSupported);
+        void setAsyncSupported(boolean isAsyncSupported);
     }
 }

==================================================
Servlet.java
index 190d3099fb..6ff68dd4cb 100644
--- a/java/jakarta/servlet/RequestDispatcher.java
+++ b/java/jakarta/servlet/RequestDispatcher.java
@@ -44,7 +44,7 @@ public interface RequestDispatcher {
      *
      * @since Servlet 3.0
      */
-    static final String FORWARD_REQUEST_URI = "jakarta.servlet.forward.request_uri";
+    String FORWARD_REQUEST_URI = "jakarta.servlet.forward.request_uri";
 
     /**
      * The name of the request attribute that should be set by the container
@@ -55,7 +55,7 @@ public interface RequestDispatcher {
      *
      * @since Servlet 3.0
      */
-    static final String FORWARD_CONTEXT_PATH = "jakarta.servlet.forward.context_path";
+    String FORWARD_CONTEXT_PATH = "jakarta.servlet.forward.context_path";
 
     /**
      * The name of the request attribute that should be set by the container
@@ -66,7 +66,7 @@ public interface RequestDispatcher {
      *
      * @since Servlet 4.0
      */
-    static final String FORWARD_MAPPING = "jakarta.servlet.forward.mapping";
+    String FORWARD_MAPPING = "jakarta.servlet.forward.mapping";
 
     /**
      * The name of the request attribute that should be set by the container
@@ -77,7 +77,7 @@ public interface RequestDispatcher {
      *
      * @since Servlet 3.0
      */
-    static final String FORWARD_PATH_INFO = "jakarta.servlet.forward.path_info";
+    String FORWARD_PATH_INFO = "jakarta.servlet.forward.path_info";
 
     /**
      * The name of the request attribute that should be set by the container
@@ -88,7 +88,7 @@ public interface RequestDispatcher {
      *
      * @since Servlet 3.0
      */
-    static final String FORWARD_SERVLET_PATH = "jakarta.servlet.forward.servlet_path";
+    String FORWARD_SERVLET_PATH = "jakarta.servlet.forward.servlet_path";
 
     /**
      * The name of the request attribute that should be set by the container
@@ -99,7 +99,7 @@ public interface RequestDispatcher {
      *
      * @since Servlet 3.0
      */
-    static final String FORWARD_QUERY_STRING = "jakarta.servlet.forward.query_string";
+    String FORWARD_QUERY_STRING = "jakarta.servlet.forward.query_string";
 
     /**
      * The name of the request attribute that should be set by the container
@@ -111,7 +111,7 @@ public interface RequestDispatcher {
      *
      * @since Servlet 3.0
      */
-    static final String INCLUDE_REQUEST_URI = "jakarta.servlet.include.request_uri";
+    String INCLUDE_REQUEST_URI = "jakarta.servlet.include.request_uri";
 
     /**
      * The name of the request attribute that should be set by the container
@@ -123,7 +123,7 @@ public interface RequestDispatcher {
      *
      * @since Servlet 3.0
      */
-    static final String INCLUDE_CONTEXT_PATH = "jakarta.servlet.include.context_path";
+    String INCLUDE_CONTEXT_PATH = "jakarta.servlet.include.context_path";
 
     /**
      * The name of the request attribute that should be set by the container
@@ -135,7 +135,7 @@ public interface RequestDispatcher {
      *
      * @since Servlet 3.0
      */
-    static final String INCLUDE_PATH_INFO = "jakarta.servlet.include.path_info";
+    String INCLUDE_PATH_INFO = "jakarta.servlet.include.path_info";
 
     /**
      * The name of the request attribute that should be set by the container
@@ -147,7 +147,7 @@ public interface RequestDispatcher {
      *
      * @since Servlet 4.0
      */
-    static final String INCLUDE_MAPPING = "jakarta.servlet.include.mapping";
+    String INCLUDE_MAPPING = "jakarta.servlet.include.mapping";
 
     /**
      * The name of the request attribute that should be set by the container
@@ -159,7 +159,7 @@ public interface RequestDispatcher {
      *
      * @since Servlet 3.0
      */
-    static final String INCLUDE_SERVLET_PATH = "jakarta.servlet.include.servlet_path";
+    String INCLUDE_SERVLET_PATH = "jakarta.servlet.include.servlet_path";
 
     /**
      * The name of the request attribute that should be set by the container
@@ -171,7 +171,7 @@ public interface RequestDispatcher {
      *
      * @since Servlet 3.0
      */
-    static final String INCLUDE_QUERY_STRING = "jakarta.servlet.include.query_string";
+    String INCLUDE_QUERY_STRING = "jakarta.servlet.include.query_string";
 
     /**
      * The name of the request attribute that should be set by the container
@@ -181,7 +181,7 @@ public interface RequestDispatcher {
      *
      * @since Servlet 3.0
      */
-    public static final String ERROR_EXCEPTION = "jakarta.servlet.error.exception";
+    String ERROR_EXCEPTION = "jakarta.servlet.error.exception";
 
     /**
      * The name of the request attribute that should be set by the container
@@ -191,7 +191,7 @@ public interface RequestDispatcher {
      *
      * @since Servlet 3.0
      */
-    public static final String ERROR_EXCEPTION_TYPE = "jakarta.servlet.error.exception_type";
+    String ERROR_EXCEPTION_TYPE = "jakarta.servlet.error.exception_type";
 
     /**
      * The name of the request attribute that should be set by the container
@@ -201,7 +201,7 @@ public interface RequestDispatcher {
      *
      * @since Servlet 3.0
      */
-    public static final String ERROR_MESSAGE = "jakarta.servlet.error.message";
+    String ERROR_MESSAGE = "jakarta.servlet.error.message";
 
     /**
      * The name of the request attribute that should be set by the container
@@ -211,7 +211,7 @@ public interface RequestDispatcher {
      *
      * @since Servlet 3.0
      */
-    public static final String ERROR_REQUEST_URI = "jakarta.servlet.error.request_uri";
+    String ERROR_REQUEST_URI = "jakarta.servlet.error.request_uri";
 
     /**
      * The name of the request attribute under which the query string for request whose processing caused the error is
@@ -219,7 +219,7 @@ public interface RequestDispatcher {
      *
      * @since Servlet 6.1
      */
-    static final String ERROR_QUERY_STRING = "jakarta.servlet.error.query_string";
+    String ERROR_QUERY_STRING = "jakarta.servlet.error.query_string";
 
     /**
      * The name of the request attribute that should be set by the container
@@ -229,7 +229,7 @@ public interface RequestDispatcher {
      *
      * @since Servlet 3.0
      */
-    public static final String ERROR_SERVLET_NAME = "jakarta.servlet.error.servlet_name";
+    String ERROR_SERVLET_NAME = "jakarta.servlet.error.servlet_name";
 
     /**
      * The name of the request attribute that should be set by the container
@@ -239,7 +239,7 @@ public interface RequestDispatcher {
      *
      * @since Servlet 3.0
      */
-    public static final String ERROR_STATUS_CODE = "jakarta.servlet.error.status_code";
+    String ERROR_STATUS_CODE = "jakarta.servlet.error.status_code";
 
     /**
      * Forwards a request from a servlet to another resource (servlet, JSP file,
@@ -284,7 +284,7 @@ public interface RequestDispatcher {
      * @exception IllegalStateException
      *                if the response was already committed
      */
-    public void forward(ServletRequest request, ServletResponse response)
+    void forward(ServletRequest request, ServletResponse response)
             throws ServletException, IOException;
 
     /**
@@ -318,6 +318,6 @@ public interface RequestDispatcher {
      * @exception IOException
      *                if the included resource throws this exception
      */
-    public void include(ServletRequest request, ServletResponse response)
+    void include(ServletRequest request, ServletResponse response)
             throws ServletException, IOException;
 }

==================================================
ServletConfig.java
index 2ee76a1b71..f19b751711 100644
--- a/java/jakarta/servlet/Servlet.java
+++ b/java/jakarta/servlet/Servlet.java
@@ -84,7 +84,7 @@ public interface Servlet {
      * @see UnavailableException
      * @see #getServletConfig
      */
-    public void init(ServletConfig config) throws ServletException;
+    void init(ServletConfig config) throws ServletException;
 
     /**
      * Returns a {@link ServletConfig} object, which contains initialization and
@@ -102,7 +102,7 @@ public interface Servlet {
      *
      * @see #init
      */
-    public ServletConfig getServletConfig();
+    ServletConfig getServletConfig();
 
     /**
      * Called by the servlet container to allow the servlet to respond to a
@@ -143,7 +143,7 @@ public interface Servlet {
      * @exception IOException
      *                if an input or output exception occurs
      */
-    public void service(ServletRequest req, ServletResponse res)
+    void service(ServletRequest req, ServletResponse res)
             throws ServletException, IOException;
 
     /**
@@ -156,7 +156,7 @@ public interface Servlet {
      *
      * @return a <code>String</code> containing servlet information
      */
-    public String getServletInfo();
+    String getServletInfo();
 
     /**
      * Called by the servlet container to indicate to a servlet that the servlet
@@ -172,5 +172,5 @@ public interface Servlet {
      * sure that any persistent state is synchronized with the servlet's current
      * state in memory.
      */
-    public void destroy();
+    void destroy();
 }

==================================================
ServletContext.java
index a8cdfc3ec1..ee3f0d8a60 100644
--- a/java/jakarta/servlet/ServletConfig.java
+++ b/java/jakarta/servlet/ServletConfig.java
@@ -32,7 +32,7 @@ public interface ServletConfig {
      *
      * @return the name of the servlet instance
      */
-    public String getServletName();
+    String getServletName();
 
     /**
      * Returns a reference to the {@link ServletContext} in which the caller is
@@ -42,7 +42,7 @@ public interface ServletConfig {
      *         with its servlet container
      * @see ServletContext
      */
-    public ServletContext getServletContext();
+    ServletContext getServletContext();
 
     /**
      * Returns a <code>String</code> containing the value of the named
@@ -55,7 +55,7 @@ public interface ServletConfig {
      * @return a <code>String</code> containing the value of the initialization
      *         parameter
      */
-    public String getInitParameter(String name);
+    String getInitParameter(String name);
 
     /**
      * Returns the names of the servlet's initialization parameters as an
@@ -65,5 +65,5 @@ public interface ServletConfig {
      * @return an <code>Enumeration</code> of <code>String</code> objects
      *         containing the names of the servlet's initialization parameters
      */
-    public Enumeration<String> getInitParameterNames();
+    Enumeration<String> getInitParameterNames();
 }

==================================================
ServletContextAttributeListener.java
index cf5696f466..604d9aef56 100644
--- a/java/jakarta/servlet/ServletContext.java
+++ b/java/jakarta/servlet/ServletContext.java
@@ -56,7 +56,7 @@ public interface ServletContext {
      * The name of the ServletContext attribute that holds the temporary file
      * location for the web application.
      */
-    public static final String TEMPDIR = "jakarta.servlet.context.tempdir";
+    String TEMPDIR = "jakarta.servlet.context.tempdir";
 
     /**
      * The name of the ServletContext attribute that holds the ordered list of
@@ -64,7 +64,7 @@ public interface ServletContext {
      *
      * @since Servlet 3.0
      */
-    public static final String ORDERED_LIBS = "jakarta.servlet.context.orderedLibs";
+    String ORDERED_LIBS = "jakarta.servlet.context.orderedLibs";
 
     /**
      * Return the main path associated with this context.
@@ -73,7 +73,7 @@ public interface ServletContext {
      *
      * @since Servlet 2.5
      */
-    public String getContextPath();
+    String getContextPath();
 
     /**
      * Returns a <code>ServletContext</code> object that corresponds to a
@@ -96,7 +96,7 @@ public interface ServletContext {
      *         to restrict this access.
      * @see RequestDispatcher
      */
-    public ServletContext getContext(String uripath);
+    ServletContext getContext(String uripath);
 
     /**
      * Returns the major version of the Java Servlet API that this servlet
@@ -105,7 +105,7 @@ public interface ServletContext {
      *
      * @return 6
      */
-    public int getMajorVersion();
+    int getMajorVersion();
 
     /**
      * Returns the minor version of the Servlet API that this servlet container
@@ -114,7 +114,7 @@ public interface ServletContext {
      *
      * @return 0
      */
-    public int getMinorVersion();
+    int getMinorVersion();
 
     /**
      * Obtain the major version of the servlet specification for which this web
@@ -124,7 +124,7 @@ public interface ServletContext {
      *
      * @since Servlet 3.0
      */
-    public int getEffectiveMajorVersion();
+    int getEffectiveMajorVersion();
 
     /**
      * Obtain the minor version of the servlet specification for which this web
@@ -134,7 +134,7 @@ public interface ServletContext {
      *
      * @since Servlet 3.0
      */
-    public int getEffectiveMinorVersion();
+    int getEffectiveMinorVersion();
 
     /**
      * Returns the MIME type of the specified file, or <code>null</code> if the
@@ -147,7 +147,7 @@ public interface ServletContext {
      *            a <code>String</code> specifying the name of a file
      * @return a <code>String</code> specifying the file's MIME type
      */
-    public String getMimeType(String file);
+    String getMimeType(String file);
 
     /**
      * Returns a directory-like listing of all the paths to resources within the
@@ -178,7 +178,7 @@ public interface ServletContext {
      *         supplied path.
      * @since Servlet 2.3
      */
-    public Set<String> getResourcePaths(String path);
+    Set<String> getResourcePaths(String path);
 
     /**
      * Returns a URL to the resource that is mapped to a specified path. The
@@ -215,7 +215,7 @@ public interface ServletContext {
      * @exception MalformedURLException
      *                if the pathname is not given in the correct form
      */
-    public URL getResource(String path) throws MalformedURLException;
+    URL getResource(String path) throws MalformedURLException;
 
     /**
      * Returns the resource located at the named path as an
@@ -243,7 +243,7 @@ public interface ServletContext {
      * @return the <code>InputStream</code> returned to the servlet, or
      *         <code>null</code> if no resource exists at the specified path
      */
-    public InputStream getResourceAsStream(String path);
+    InputStream getResourceAsStream(String path);
 
     /**
      * Returns a {@link RequestDispatcher} object that acts as a wrapper for the
@@ -266,7 +266,7 @@ public interface ServletContext {
      * @see RequestDispatcher
      * @see ServletContext#getContext
      */
-    public RequestDispatcher getRequestDispatcher(String path);
+    RequestDispatcher getRequestDispatcher(String path);
 
     /**
      * Returns a {@link RequestDispatcher} object that acts as a wrapper for the
@@ -290,7 +290,7 @@ public interface ServletContext {
      * @see ServletContext#getContext
      * @see ServletConfig#getServletName
      */
-    public RequestDispatcher getNamedDispatcher(String name);
+    RequestDispatcher getNamedDispatcher(String name);
 
     /**
      * Writes the specified message to a servlet log file, usually an event log.
@@ -301,7 +301,7 @@ public interface ServletContext {
      *            a <code>String</code> specifying the message to be written to
      *            the log file
      */
-    public void log(String msg);
+    void log(String msg);
 
     /**
      * Writes an explanatory message and a stack trace for a given
@@ -314,7 +314,7 @@ public interface ServletContext {
      * @param throwable
      *            the <code>Throwable</code> error or exception
      */
-    public void log(String message, Throwable throwable);
+    void log(String message, Throwable throwable);
 
     /**
      * Returns a <code>String</code> containing the real path for a given
@@ -335,7 +335,7 @@ public interface ServletContext {
      * @return a <code>String</code> specifying the real path, or null if the
      *         translation cannot be performed
      */
-    public String getRealPath(String path);
+    String getRealPath(String path);
 
     /**
      * Returns the name and version of the servlet container on which the
@@ -353,7 +353,7 @@ public interface ServletContext {
      * @return a <code>String</code> containing at least the servlet container
      *         name and version number
      */
-    public String getServerInfo();
+    String getServerInfo();
 
     /**
      * Returns a <code>String</code> containing the value of the named
@@ -374,7 +374,7 @@ public interface ServletContext {
      *         <code>null</code>
      * @see ServletConfig#getInitParameter
      */
-    public String getInitParameter(String name);
+    String getInitParameter(String name);
 
     /**
      * Returns the names of the context's initialization parameters as an
@@ -386,7 +386,7 @@ public interface ServletContext {
      * @see ServletConfig#getInitParameter
      */
 
-    public Enumeration<String> getInitParameterNames();
+    Enumeration<String> getInitParameterNames();
 
     /**
      * Set the given initialisation parameter to the given value.
@@ -408,7 +408,7 @@ public interface ServletContext {
      *         <code>null</code>
      * @since Servlet 3.0
      */
-    public boolean setInitParameter(String name, String value);
+    boolean setInitParameter(String name, String value);
 
     /**
      * Returns the servlet container attribute with the given name, or
@@ -431,7 +431,7 @@ public interface ServletContext {
      *         <code>null</code>
      * @see ServletContext#getAttributeNames
      */
-    public Object getAttribute(String name);
+    Object getAttribute(String name);
 
     /**
      * Returns an <code>Enumeration</code> containing the attribute names
@@ -442,7 +442,7 @@ public interface ServletContext {
      *
      * @see #getAttribute
      */
-    public Enumeration<String> getAttributeNames();
+    Enumeration<String> getAttributeNames();
 
     /**
      * Binds an object to a given attribute name in this servlet context. If the
@@ -466,7 +466,7 @@ public interface ServletContext {
      * @throws NullPointerException If the provided attribute name is
      *         <code>null</code>
      */
-    public void setAttribute(String name, Object object);
+    void setAttribute(String name, Object object);
 
     /**
      * Removes the attribute with the given name from the servlet context. After
@@ -480,7 +480,7 @@ public interface ServletContext {
      *            a <code>String</code> specifying the name of the attribute to
      *            be removed
      */
-    public void removeAttribute(String name);
+    void removeAttribute(String name);
 
     /**
      * Returns the name of this web application corresponding to this
@@ -491,7 +491,7 @@ public interface ServletContext {
      *         declared in the deployment descriptor.
      * @since Servlet 2.3
      */
-    public String getServletContextName();
+    String getServletContextName();
 
     /**
      * Register a servlet implementation for use in this ServletContext.
@@ -509,7 +509,7 @@ public interface ServletContext {
      *    use this method.
      * @since Servlet 3.0
      */
-    public ServletRegistration.Dynamic addServlet(String servletName, String className);
+    ServletRegistration.Dynamic addServlet(String servletName, String className);
 
     /**
      * Register a servlet instance for use in this ServletContext.
@@ -527,7 +527,7 @@ public interface ServletContext {
      *    use this method.
      * @since Servlet 3.0
      */
-    public ServletRegistration.Dynamic addServlet(String servletName, Servlet servlet);
+    ServletRegistration.Dynamic addServlet(String servletName, Servlet servlet);
 
     /**
      * Add servlet to the context.
@@ -547,7 +547,7 @@ public interface ServletContext {
      *    use this method.
      * @since Servlet 3.0
      */
-    public ServletRegistration.Dynamic addServlet(String servletName,
+    ServletRegistration.Dynamic addServlet(String servletName,
             Class<? extends Servlet> servletClass);
 
     /**
@@ -563,7 +563,7 @@ public interface ServletContext {
      *
      * @since Servlet 4.0
      */
-    public ServletRegistration.Dynamic addJspFile(String jspName, String jspFile);
+    ServletRegistration.Dynamic addJspFile(String jspName, String jspFile);
 
     /**
      * Create an Servlet instance using the given class. The instance is just
@@ -585,7 +585,7 @@ public interface ServletContext {
      *
      * @since Servlet 3.0
      */
-    public <T extends Servlet> T createServlet(Class<T> c)
+    <T extends Servlet> T createServlet(Class<T> c)
             throws ServletException;
 
     /**
@@ -607,7 +607,7 @@ public interface ServletContext {
      *
      * @since Servlet 3.0
      */
-    public ServletRegistration getServletRegistration(String servletName);
+    ServletRegistration getServletRegistration(String servletName);
 
     /**
      * Obtain a Map of servlet names to servlet registrations for all servlets
@@ -626,7 +626,7 @@ public interface ServletContext {
      *
      * @since Servlet 3.0
      */
-    public Map<String, ? extends ServletRegistration> getServletRegistrations();
+    Map<String, ? extends ServletRegistration> getServletRegistrations();
 
     /**
      * Add filter to context.
@@ -646,7 +646,7 @@ public interface ServletContext {
      *             If the context has already been initialised
      * @since Servlet 3.0
      */
-    public FilterRegistration.Dynamic addFilter(String filterName, String className);
+    FilterRegistration.Dynamic addFilter(String filterName, String className);
 
     /**
      * Add filter to context.
@@ -666,7 +666,7 @@ public interface ServletContext {
      *             If the context has already been initialised
      * @since Servlet 3.0
      */
-    public FilterRegistration.Dynamic addFilter(String filterName, Filter filter);
+    FilterRegistration.Dynamic addFilter(String filterName, Filter filter);
 
     /**
      * Add filter to context.
@@ -686,7 +686,7 @@ public interface ServletContext {
      *             If the context has already been initialised
      * @since Servlet 3.0
      */
-    public FilterRegistration.Dynamic addFilter(String filterName,
+    FilterRegistration.Dynamic addFilter(String filterName,
             Class<? extends Filter> filterClass);
 
     /**
@@ -709,7 +709,7 @@ public interface ServletContext {
      *
      * @since Servlet 3.0
      */
-    public <T extends Filter> T createFilter(Class<T> c) throws ServletException;
+    <T extends Filter> T createFilter(Class<T> c) throws ServletException;
 
     /**
      * TODO SERVLET3 - Add comments
@@ -724,7 +724,7 @@ public interface ServletContext {
      *    use this method.
      * @since Servlet 3.0
      */
-    public FilterRegistration getFilterRegistration(String filterName);
+    FilterRegistration getFilterRegistration(String filterName);
 
     /**
      * @return TODO
@@ -737,7 +737,7 @@ public interface ServletContext {
      *    use this method.
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
-    public Map<String, ? extends FilterRegistration> getFilterRegistrations();
+    Map<String, ? extends FilterRegistration> getFilterRegistrations();
 
     /**
      * @return TODO
@@ -750,7 +750,7 @@ public interface ServletContext {
      *    use this method.
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
-    public SessionCookieConfig getSessionCookieConfig();
+    SessionCookieConfig getSessionCookieConfig();
 
     /**
      * Configures the available session tracking modes for this web application.
@@ -771,7 +771,7 @@ public interface ServletContext {
      *    use this method.
      * @since Servlet 3.0
      */
-    public void setSessionTrackingModes(
+    void setSessionTrackingModes(
             Set<SessionTrackingMode> sessionTrackingModes);
 
     /**
@@ -788,7 +788,7 @@ public interface ServletContext {
      *
      * @since Servlet 3.0
      */
-    public Set<SessionTrackingMode> getDefaultSessionTrackingModes();
+    Set<SessionTrackingMode> getDefaultSessionTrackingModes();
 
     /**
      * Obtains the currently enabled session tracking modes for this web
@@ -799,7 +799,7 @@ public interface ServletContext {
      *
      * @since Servlet 3.0
      */
-    public Set<SessionTrackingMode> getEffectiveSessionTrackingModes();
+    Set<SessionTrackingMode> getEffectiveSessionTrackingModes();
 
     /**
      * TODO SERVLET3 - Add comments
@@ -813,7 +813,7 @@ public interface ServletContext {
      *    use this method.
      * @since Servlet 3.0
      */
-    public void addListener(String className);
+    void addListener(String className);
 
     /**
      * TODO SERVLET3 - Add comments
@@ -828,7 +828,7 @@ public interface ServletContext {
      *    use this method.
      * @since Servlet 3.0
      */
-    public <T extends EventListener> void addListener(T t);
+    <T extends EventListener> void addListener(T t);
 
     /**
      * TODO SERVLET3 - Add comments
@@ -842,7 +842,7 @@ public interface ServletContext {
      *    use this method.
      * @since Servlet 3.0
      */
-    public void addListener(Class<? extends EventListener> listenerClass);
+    void addListener(Class<? extends EventListener> listenerClass);
 
     /**
      * TODO SERVLET3 - Add comments
@@ -859,7 +859,7 @@ public interface ServletContext {
      *    use this method.
      * @since Servlet 3.0
      */
-    public <T extends EventListener> T createListener(Class<T> c)
+    <T extends EventListener> T createListener(Class<T> c)
             throws ServletException;
 
     /**
@@ -867,7 +867,7 @@ public interface ServletContext {
      *
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
-    public JspConfigDescriptor getJspConfigDescriptor();
+    JspConfigDescriptor getJspConfigDescriptor();
 
     /**
      * Get the web application class loader associated with this ServletContext.
@@ -876,7 +876,7 @@ public interface ServletContext {
      *
      * @since Servlet 3.0
      */
-    public ClassLoader getClassLoader();
+    ClassLoader getClassLoader();
 
     /**
      * Add to the declared roles for this ServletContext.
@@ -894,7 +894,7 @@ public interface ServletContext {
      *         initialised
      * @since Servlet 3.0
      */
-    public void declareRoles(String... roleNames);
+    void declareRoles(String... roleNames);
 
     /**
      * Get the primary name of the virtual host on which this context is
@@ -905,7 +905,7 @@ public interface ServletContext {
      *
      * @since Servlet 3.1
      */
-    public String getVirtualServerName();
+    String getVirtualServerName();
 
     /**
      * Get the default session timeout.
@@ -914,7 +914,7 @@ public interface ServletContext {
      *
      * @since Servlet 4.0
      */
-    public int getSessionTimeout();
+    int getSessionTimeout();
 
     /**
      * Set the default session timeout. This method may only be called before
@@ -934,7 +934,7 @@ public interface ServletContext {
      *
      * @since Servlet 4.0
      */
-    public void setSessionTimeout(int sessionTimeout);
+    void setSessionTimeout(int sessionTimeout);
 
     /**
      * Get the default character encoding for reading request bodies.
@@ -944,7 +944,7 @@ public interface ServletContext {
      *
      * @since Servlet 4.0
      */
-    public String getRequestCharacterEncoding();
+    String getRequestCharacterEncoding();
 
     /**
      * Set the default character encoding to use for reading request bodies.
@@ -965,7 +965,7 @@ public interface ServletContext {
      *
      * @since Servlet 4.0
      */
-    public void setRequestCharacterEncoding(String encoding);
+    void setRequestCharacterEncoding(String encoding);
 
     /**
      * Sets the request character encoding for this ServletContext.
@@ -985,7 +985,7 @@ public interface ServletContext {
      *
      * @since Servlet 6.1
      */
-    public default void setRequestCharacterEncoding(Charset encoding) {
+    default void setRequestCharacterEncoding(Charset encoding) {
         setRequestCharacterEncoding(encoding.name());
     }
 
@@ -997,7 +997,7 @@ public interface ServletContext {
      *
      * @since Servlet 4.0
      */
-    public String getResponseCharacterEncoding();
+    String getResponseCharacterEncoding();
 
     /**
      * Sets the response character encoding for this ServletContext.
@@ -1017,7 +1017,7 @@ public interface ServletContext {
      *
      * @since Servlet 6.1
      */
-    public default void setResponseCharacterEncoding(Charset encoding) {
+    default void setResponseCharacterEncoding(Charset encoding) {
         setResponseCharacterEncoding(encoding.name());
     }
 
@@ -1040,5 +1040,5 @@ public interface ServletContext {
      *
      * @since Servlet 4.0
      */
-    public void setResponseCharacterEncoding(String encoding);
+    void setResponseCharacterEncoding(String encoding);
 }

==================================================
ServletContextListener.java
index ded0ca87ea..c217778108 100644
--- a/java/jakarta/servlet/ServletContextAttributeListener.java
+++ b/java/jakarta/servlet/ServletContextAttributeListener.java
@@ -36,7 +36,7 @@ public interface ServletContextAttributeListener extends EventListener {
      * The default implementation is a NO-OP.
      * @param scae Information about the new attribute
      */
-    public default void attributeAdded(ServletContextAttributeEvent scae) {
+    default void attributeAdded(ServletContextAttributeEvent scae) {
     }
 
     /**
@@ -45,7 +45,7 @@ public interface ServletContextAttributeListener extends EventListener {
      * The default implementation is a NO-OP.
      * @param scae Information about the removed attribute
      */
-    public default void attributeRemoved(ServletContextAttributeEvent scae) {
+    default void attributeRemoved(ServletContextAttributeEvent scae) {
     }
 
     /**
@@ -54,6 +54,6 @@ public interface ServletContextAttributeListener extends EventListener {
      * The default implementation is a NO-OP.
      * @param scae Information about the replaced attribute
      */
-    public default void attributeReplaced(ServletContextAttributeEvent scae) {
+    default void attributeReplaced(ServletContextAttributeEvent scae) {
     }
 }

==================================================
ServletRegistration.java
index 88327efe97..991a77a2fe 100644
--- a/java/jakarta/servlet/ServletContextListener.java
+++ b/java/jakarta/servlet/ServletContextListener.java
@@ -37,7 +37,7 @@ public interface ServletContextListener extends EventListener {
      * The default implementation is a NO-OP.
      * @param sce Information about the ServletContext that was initialized
      */
-    public default void contextInitialized(ServletContextEvent sce) {
+    default void contextInitialized(ServletContextEvent sce) {
     }
 
     /**
@@ -47,6 +47,6 @@ public interface ServletContextListener extends EventListener {
      * The default implementation is a NO-OP.
      * @param sce Information about the ServletContext that was destroyed
      */
-    public default void contextDestroyed(ServletContextEvent sce) {
+    default void contextDestroyed(ServletContextEvent sce) {
     }
 }

==================================================
ServletRequest.java
index f2c80cf21e..699f486479 100644
--- a/java/jakarta/servlet/ServletRegistration.java
+++ b/java/jakarta/servlet/ServletRegistration.java
@@ -44,7 +44,7 @@ public interface ServletRegistration extends Registration {
      * @throws IllegalStateException if the associated ServletContext has
      *                                  already been initialised
      */
-    public Set<String> addMapping(String... urlPatterns);
+    Set<String> addMapping(String... urlPatterns);
 
     /**
      * Gets the currently available mappings of the Servlet represented by this
@@ -56,7 +56,7 @@ public interface ServletRegistration extends Registration {
      * @return a (possibly empty) Collection of the currently available mappings
      * of the Servlet represented by this ServletRegistration
      */
-    public Collection<String> getMappings();
+    Collection<String> getMappings();
 
     /**
      * Obtain the name of the user / group under which the Servlet has been
@@ -65,13 +65,13 @@ public interface ServletRegistration extends Registration {
      * @return the name of the user / group or {@code null} if none has been
      *         specified
      */
-    public String getRunAsRole();
+    String getRunAsRole();
 
     /**
      * Interface through which a Servlet registered via one of the addServlet
      * methods on ServletContext may be further configured.
      */
-    public static interface Dynamic extends ServletRegistration, Registration.Dynamic {
+    interface Dynamic extends ServletRegistration, Registration.Dynamic {
 
         /**
          * Set the loadOnStartup order for the Servlet
@@ -80,7 +80,7 @@ public interface ServletRegistration extends Registration {
          *                      started (higher numbers are started after lower
          *                      numbers)
          */
-        public void setLoadOnStartup(int loadOnStartup);
+        void setLoadOnStartup(int loadOnStartup);
 
         /**
          * Add security constraints to this Servlet.
@@ -90,7 +90,7 @@ public interface ServletRegistration extends Registration {
          * @return urls currently mapped to this registration that are already
          *         present in web.xml
          */
-        public Set<String> setServletSecurity(ServletSecurityElement constraint);
+        Set<String> setServletSecurity(ServletSecurityElement constraint);
 
         /**
          * Set the multi-part configuration for the associated Servlet. To clear
@@ -100,7 +100,7 @@ public interface ServletRegistration extends Registration {
          * @param multipartConfig The configuration to associate with the
          *                        Servlet
          */
-        public void setMultipartConfig(MultipartConfigElement multipartConfig);
+        void setMultipartConfig(MultipartConfigElement multipartConfig);
 
         /**
          * Set the name of the user / group under which the Servlet should be
@@ -108,6 +108,6 @@ public interface ServletRegistration extends Registration {
          *
          * @param roleName name of the user / group or {@code null} if none
          */
-        public void setRunAsRole(String roleName);
+        void setRunAsRole(String roleName);
     }
 }

==================================================
ServletRequestAttributeListener.java
index ed0272a528..047a38d514 100644
--- a/java/jakarta/servlet/ServletRequest.java
+++ b/java/jakarta/servlet/ServletRequest.java
@@ -63,7 +63,7 @@ public interface ServletRequest {
      * @return an <code>Object</code> containing the value of the attribute, or
      *         <code>null</code> if the attribute does not exist
      */
-    public Object getAttribute(String name);
+    Object getAttribute(String name);
 
     /**
      * Returns an <code>Enumeration</code> containing the names of the
@@ -74,7 +74,7 @@ public interface ServletRequest {
      * @return an <code>Enumeration</code> of strings containing the names of the
      *         request's attributes
      */
-    public Enumeration<String> getAttributeNames();
+    Enumeration<String> getAttributeNames();
 
     /**
      * Returns the name of the character encoding used in the body of this
@@ -92,7 +92,7 @@ public interface ServletRequest {
      *         encoding, or <code>null</code> if the request does not specify a
      *         character encoding
      */
-    public String getCharacterEncoding();
+    String getCharacterEncoding();
 
     /**
      * Overrides the name of the character encoding used in the body of this
@@ -105,7 +105,7 @@ public interface ServletRequest {
      * @throws UnsupportedEncodingException
      *             if this is not a valid encoding
      */
-    public void setCharacterEncoding(String encoding) throws UnsupportedEncodingException;
+    void setCharacterEncoding(String encoding) throws UnsupportedEncodingException;
 
 
     /**
@@ -120,7 +120,7 @@ public interface ServletRequest {
      *
      * @since Servlet 6.1
      */
-    public default void setCharacterEncoding(Charset encoding) {
+    default void setCharacterEncoding(Charset encoding) {
         try {
             setCharacterEncoding(encoding.name());
         } catch (UnsupportedEncodingException e) {
@@ -136,7 +136,7 @@ public interface ServletRequest {
      * @return an integer containing the length of the request body or -1 if the
      *         length is not known or is greater than {@link Integer#MAX_VALUE}
      */
-    public int getContentLength();
+    int getContentLength();
 
     /**
      * Returns the length, in bytes, of the request body and made available by
@@ -147,7 +147,7 @@ public interface ServletRequest {
      *         the length is not known
      * @since Servlet 3.1
      */
-    public long getContentLengthLong();
+    long getContentLengthLong();
 
     /**
      * Returns the MIME type of the body of the request, or <code>null</code> if
@@ -157,7 +157,7 @@ public interface ServletRequest {
      * @return a <code>String</code> containing the name of the MIME type of the
      *         request, or null if the type is not known
      */
-    public String getContentType();
+    String getContentType();
 
     /**
      * Retrieves the body of the request as binary data using a
@@ -172,7 +172,7 @@ public interface ServletRequest {
      * @exception IOException
      *                if an input or output exception occurred
      */
-    public ServletInputStream getInputStream() throws IOException;
+    ServletInputStream getInputStream() throws IOException;
 
     /**
      * Returns the value of a request parameter as a <code>String</code>, or
@@ -199,7 +199,7 @@ public interface ServletRequest {
      *         parameter
      * @see #getParameterValues
      */
-    public String getParameter(String name);
+    String getParameter(String name);
 
     /**
      * Returns an <code>Enumeration</code> of <code>String</code> objects
@@ -212,7 +212,7 @@ public interface ServletRequest {
      *         or an empty <code>Enumeration</code> if the request has no
      *         parameters
      */
-    public Enumeration<String> getParameterNames();
+    Enumeration<String> getParameterNames();
 
     /**
      * Returns an array of <code>String</code> objects containing all of the
@@ -228,7 +228,7 @@ public interface ServletRequest {
      *         values
      * @see #getParameter
      */
-    public String[] getParameterValues(String name);
+    String[] getParameterValues(String name);
 
     /**
      * Returns a java.util.Map of the parameters of this request. Request
@@ -241,7 +241,7 @@ public interface ServletRequest {
      *         of type String. The values in the parameter map are of type
      *         String array.
      */
-    public Map<String, String[]> getParameterMap();
+    Map<String, String[]> getParameterMap();
 
     /**
      * Returns the name and version of the protocol the request uses in the form
@@ -252,7 +252,7 @@ public interface ServletRequest {
      * @return a <code>String</code> containing the protocol name and version
      *         number
      */
-    public String getProtocol();
+    String getProtocol();
 
     /**
      * Returns the name of the scheme used to make this request, for example,
@@ -262,7 +262,7 @@ public interface ServletRequest {
      * @return a <code>String</code> containing the name of the scheme used to
      *         make this request
      */
-    public String getScheme();
+    String getScheme();
 
     /**
      * Returns the host name of the server to which the request was sent. It is
@@ -271,7 +271,7 @@ public interface ServletRequest {
      *
      * @return a <code>String</code> containing the name of the server
      */
-    public String getServerName();
+    String getServerName();
 
     /**
      * Returns the port number to which the request was sent. It is the value of
@@ -280,7 +280,7 @@ public interface ServletRequest {
      *
      * @return an integer specifying the port number
      */
-    public int getServerPort();
+    int getServerPort();
 
     /**
      * Retrieves the body of the request as character data using a
@@ -299,7 +299,7 @@ public interface ServletRequest {
      *                if an input or output exception occurred
      * @see #getInputStream
      */
-    public BufferedReader getReader() throws IOException;
+    BufferedReader getReader() throws IOException;
 
     /**
      * Returns the Internet Protocol (IP) address of the client or last proxy
@@ -309,7 +309,7 @@ public interface ServletRequest {
      * @return a <code>String</code> containing the IP address of the client
      *         that sent the request
      */
-    public String getRemoteAddr();
+    String getRemoteAddr();
 
     /**
      * Returns the fully qualified name of the client or the last proxy that
@@ -321,7 +321,7 @@ public interface ServletRequest {
      * @return a <code>String</code> containing the fully qualified name of the
      *         client
      */
-    public String getRemoteHost();
+    String getRemoteHost();
 
     /**
      * Stores an attribute in this request. Attributes are reset between
@@ -346,7 +346,7 @@ public interface ServletRequest {
      * @param o
      *            the <code>Object</code> to be stored
      */
-    public void setAttribute(String name, Object o);
+    void setAttribute(String name, Object o);
 
     /**
      * Removes an attribute from this request. This method is not generally
@@ -363,7 +363,7 @@ public interface ServletRequest {
      *            a <code>String</code> specifying the name of the attribute to
      *            remove
      */
-    public void removeAttribute(String name);
+    void removeAttribute(String name);
 
     /**
      * Returns the preferred <code>Locale</code> that the client will accept
@@ -373,7 +373,7 @@ public interface ServletRequest {
      *
      * @return the preferred <code>Locale</code> for the client
      */
-    public Locale getLocale();
+    Locale getLocale();
 
     /**
      * Returns an <code>Enumeration</code> of <code>Locale</code> objects
@@ -386,7 +386,7 @@ public interface ServletRequest {
      * @return an <code>Enumeration</code> of preferred <code>Locale</code>
      *         objects for the client
      */
-    public Enumeration<Locale> getLocales();
+    Enumeration<Locale> getLocales();
 
     /**
      * Returns a boolean indicating whether this request was made using a secure
@@ -395,7 +395,7 @@ public interface ServletRequest {
      * @return a boolean indicating if the request was made using a secure
      *         channel
      */
-    public boolean isSecure();
+    boolean isSecure();
 
     /**
      * Returns a {@link RequestDispatcher} object that acts as a wrapper for the
@@ -423,7 +423,7 @@ public interface ServletRequest {
      * @see RequestDispatcher
      * @see ServletContext#getRequestDispatcher
      */
-    public RequestDispatcher getRequestDispatcher(String path);
+    RequestDispatcher getRequestDispatcher(String path);
 
     /**
      * Returns the Internet Protocol (IP) source port of the client or last
@@ -433,7 +433,7 @@ public interface ServletRequest {
      *
      * @since Servlet 2.4
      */
-    public int getRemotePort();
+    int getRemotePort();
 
     /**
      * Returns the host name of the Internet Protocol (IP) interface on which
@@ -443,7 +443,7 @@ public interface ServletRequest {
      *         the request was received.
      * @since Servlet 2.4
      */
-    public String getLocalName();
+    String getLocalName();
 
     /**
      * Returns the Internet Protocol (IP) address of the interface on which the
@@ -453,7 +453,7 @@ public interface ServletRequest {
      *         request was received.
      * @since Servlet 2.4
      */
-    public String getLocalAddr();
+    String getLocalAddr();
 
     /**
      * Returns the Internet Protocol (IP) port number of the interface on which
@@ -463,20 +463,20 @@ public interface ServletRequest {
      *
      * @since Servlet 2.4
      */
-    public int getLocalPort();
+    int getLocalPort();
 
     /**
      * @return TODO
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
-    public ServletContext getServletContext();
+    ServletContext getServletContext();
 
     /**
      * @return TODO
      * @throws IllegalStateException If async is not supported for this request
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
-    public AsyncContext startAsync() throws IllegalStateException;
+    AsyncContext startAsync() throws IllegalStateException;
 
     /**
      * @param servletRequest    The ServletRequest with which to initialise the
@@ -487,20 +487,20 @@ public interface ServletRequest {
      * @throws IllegalStateException If async is not supported for this request
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
-    public AsyncContext startAsync(ServletRequest servletRequest,
+    AsyncContext startAsync(ServletRequest servletRequest,
             ServletResponse servletResponse) throws IllegalStateException;
 
     /**
      * @return TODO
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
-    public boolean isAsyncStarted();
+    boolean isAsyncStarted();
 
     /**
      * @return TODO
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
-    public boolean isAsyncSupported();
+    boolean isAsyncSupported();
 
     /**
      * Get the current AsyncContext.
@@ -512,13 +512,13 @@ public interface ServletRequest {
      *
      * @since Servlet 3.0
      */
-    public AsyncContext getAsyncContext();
+    AsyncContext getAsyncContext();
 
     /**
      * @return TODO
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
-    public DispatcherType getDispatcherType();
+    DispatcherType getDispatcherType();
 
     /**
      * Obtain a unique (within the lifetime of the Servlet container) identifier

==================================================
ServletRequestListener.java
index 28a8631f92..a4a8912132 100644
--- a/java/jakarta/servlet/ServletRequestAttributeListener.java
+++ b/java/jakarta/servlet/ServletRequestAttributeListener.java
@@ -37,7 +37,7 @@ public interface ServletRequestAttributeListener extends EventListener {
      * The default implementation is a NO-OP.
      * @param srae Information about the new request attribute
      */
-    public default void attributeAdded(ServletRequestAttributeEvent srae) {
+    default void attributeAdded(ServletRequestAttributeEvent srae) {
     }
 
     /**
@@ -46,7 +46,7 @@ public interface ServletRequestAttributeListener extends EventListener {
      * The default implementation is a NO-OP.
      * @param srae Information about the removed request attribute
      */
-    public default void attributeRemoved(ServletRequestAttributeEvent srae) {
+    default void attributeRemoved(ServletRequestAttributeEvent srae) {
     }
 
     /**
@@ -55,7 +55,7 @@ public interface ServletRequestAttributeListener extends EventListener {
      * The default implementation is a NO-OP.
      * @param srae Information about the replaced request attribute
      */
-    public default void attributeReplaced(ServletRequestAttributeEvent srae) {
+    default void attributeReplaced(ServletRequestAttributeEvent srae) {
     }
 }
 

==================================================
ServletResponse.java
index 45087440ea..5ad6e79b0f 100644
--- a/java/jakarta/servlet/ServletRequestListener.java
+++ b/java/jakarta/servlet/ServletRequestListener.java
@@ -35,7 +35,7 @@ public interface ServletRequestListener extends EventListener {
      * The default implementation is a NO-OP.
      * @param sre Information about the request
      */
-    public default void requestDestroyed (ServletRequestEvent sre) {
+    default void requestDestroyed (ServletRequestEvent sre) {
     }
 
     /**
@@ -43,6 +43,6 @@ public interface ServletRequestListener extends EventListener {
      * The default implementation is a NO-OP.
      * @param sre Information about the request
      */
-    public default void requestInitialized (ServletRequestEvent sre) {
+    default void requestInitialized (ServletRequestEvent sre) {
     }
 }

==================================================
SessionCookieConfig.java
index 8de3e7d642..fc5af22132 100644
--- a/java/jakarta/servlet/ServletResponse.java
+++ b/java/jakarta/servlet/ServletResponse.java
@@ -82,7 +82,7 @@ public interface ServletResponse {
      * @return a <code>String</code> specifying the name of the character
      *         encoding, for example, <code>UTF-8</code>
      */
-    public String getCharacterEncoding();
+    String getCharacterEncoding();
 
     /**
      * Returns the content type used for the MIME body sent in this response.
@@ -98,7 +98,7 @@ public interface ServletResponse {
      *         <code>text/html; charset=UTF-8</code>, or null
      * @since Servlet 2.4
      */
-    public String getContentType();
+    String getContentType();
 
     /**
      * Returns a {@link ServletOutputStream} suitable for writing binary data in
@@ -116,7 +116,7 @@ public interface ServletResponse {
      *                if an input or output exception occurred
      * @see #getWriter
      */
-    public ServletOutputStream getOutputStream() throws IOException;
+    ServletOutputStream getOutputStream() throws IOException;
 
     /**
      * Returns a <code>PrintWriter</code> object that can send character text to
@@ -145,7 +145,7 @@ public interface ServletResponse {
      * @see #getOutputStream
      * @see #setCharacterEncoding
      */
-    public PrintWriter getWriter() throws IOException;
+    PrintWriter getWriter() throws IOException;
 
     /**
      * Sets the character encoding (MIME charset) of the response being sent to
@@ -181,7 +181,7 @@ public interface ServletResponse {
      *
      * @since Servlet 2.4
      */
-    public void setCharacterEncoding(String charset);
+    void setCharacterEncoding(String charset);
 
     /**
      * Sets the character encoding (MIME charset) of the response being sent to
@@ -214,7 +214,7 @@ public interface ServletResponse {
      *
      * @since Servlet 6.1
      */
-    public default void setCharacterEncoding(Charset encoding) {
+    default void setCharacterEncoding(Charset encoding) {
         setCharacterEncoding(encoding.name());
     }
 
@@ -226,7 +226,7 @@ public interface ServletResponse {
      *            an integer specifying the length of the content being returned
      *            to the client; sets the Content-Length header
      */
-    public void setContentLength(int len);
+    void setContentLength(int len);
 
     /**
      * Sets the length of the content body in the response In HTTP servlets,
@@ -238,7 +238,7 @@ public interface ServletResponse {
      *
      * @since Servlet 3.1
      */
-    public void setContentLengthLong(long length);
+    void setContentLengthLong(long length);
 
     /**
      * Sets the content type of the response being sent to the client, if the
@@ -266,7 +266,7 @@ public interface ServletResponse {
      * @see #getOutputStream
      * @see #getWriter
      */
-    public void setContentType(String type);
+    void setContentType(String type);
 
     /**
      * Sets the preferred buffer size for the body of the response. The servlet
@@ -291,7 +291,7 @@ public interface ServletResponse {
      * @see #isCommitted
      * @see #reset
      */
-    public void setBufferSize(int size);
+    void setBufferSize(int size);
 
     /**
      * Returns the actual buffer size used for the response. If no buffering is
@@ -303,7 +303,7 @@ public interface ServletResponse {
      * @see #isCommitted
      * @see #reset
      */
-    public int getBufferSize();
+    int getBufferSize();
 
     /**
      * Forces any content in the buffer to be written to the client. A call to
@@ -317,7 +317,7 @@ public interface ServletResponse {
      * @see #isCommitted
      * @see #reset
      */
-    public void flushBuffer() throws IOException;
+    void flushBuffer() throws IOException;
 
     /**
      * Clears the content of the underlying buffer in the response without
@@ -331,7 +331,7 @@ public interface ServletResponse {
      *
      * @since Servlet 2.3
      */
-    public void resetBuffer();
+    void resetBuffer();
 
     /**
      * Returns a boolean indicating if the response has been committed. A
@@ -343,7 +343,7 @@ public interface ServletResponse {
      * @see #flushBuffer
      * @see #reset
      */
-    public boolean isCommitted();
+    boolean isCommitted();
 
     /**
      * Clears any data that exists in the buffer as well as the status code and
@@ -357,7 +357,7 @@ public interface ServletResponse {
      * @see #flushBuffer
      * @see #isCommitted
      */
-    public void reset();
+    void reset();
 
     /**
      * Sets the locale of the response, if the response has not been committed
@@ -395,7 +395,7 @@ public interface ServletResponse {
      * @see #setCharacterEncoding(String)
      * @see #setCharacterEncoding(Charset)
      */
-    public void setLocale(Locale loc);
+    void setLocale(Locale loc);
 
     /**
      * Returns the locale specified for this response using the
@@ -408,6 +408,6 @@ public interface ServletResponse {
      *
      * @see #setLocale
      */
-    public Locale getLocale();
+    Locale getLocale();
 
 }

==================================================
WriteListener.java
index 7d03bd252d..10b3f2a169 100644
--- a/java/jakarta/servlet/SessionCookieConfig.java
+++ b/java/jakarta/servlet/SessionCookieConfig.java
@@ -34,14 +34,14 @@ public interface SessionCookieConfig {
      * @throws IllegalStateException if the associated ServletContext has
      *         already been initialised
      */
-    public void setName(String name);
+    void setName(String name);
 
     /**
      * Obtain the name to use for the session cookies.
      *
      * @return the name to use for session cookies.
      */
-    public String getName();
+    String getName();
 
     /**
      * Sets the domain for the session cookie
@@ -51,14 +51,14 @@ public interface SessionCookieConfig {
      * @throws IllegalStateException if the associated ServletContext has
      *         already been initialised
      */
-    public void setDomain(String domain);
+    void setDomain(String domain);
 
     /**
      * Obtain the domain to use for session cookies.
      *
      * @return the domain to use for session cookies.
      */
-    public String getDomain();
+    String getDomain();
 
     /**
      * Sets the path of the session cookie.
@@ -68,7 +68,7 @@ public interface SessionCookieConfig {
      * @throws IllegalStateException if the associated ServletContext has
      *         already been initialised
      */
-    public void setPath(String path);
+    void setPath(String path);
 
     /**
      * Obtain the path to use for session cookies. This is normally the context
@@ -76,7 +76,7 @@ public interface SessionCookieConfig {
      *
      * @return The path to use for session cookies.
      */
-    public String getPath();
+    String getPath();
 
     /**
      * If called, this method has no effect.
@@ -89,7 +89,7 @@ public interface SessionCookieConfig {
      * @deprecated This is no longer required with RFC 6265
      */
     @Deprecated(since = "Servlet 6.0", forRemoval = true)
-    public void setComment(String comment);
+    void setComment(String comment);
 
     /**
      * With the adoption of support for RFC 6265, this method should no longer be used.
@@ -99,7 +99,7 @@ public interface SessionCookieConfig {
      * @deprecated This is no longer required with RFC 6265
      */
     @Deprecated(since = "Servlet 6.0", forRemoval = true)
-    public String getComment();
+    String getComment();
 
     /**
      * Sets the httpOnly flag for the session cookie.
@@ -109,14 +109,14 @@ public interface SessionCookieConfig {
      * @throws IllegalStateException if the associated ServletContext has
      *         already been initialised
      */
-    public void setHttpOnly(boolean httpOnly);
+    void setHttpOnly(boolean httpOnly);
 
     /**
      * Will session cookies be created with the httpOnly flag set?
      *
      * @return {@code true} if the flag should be set, otherwise {@code false}
      */
-    public boolean isHttpOnly();
+    boolean isHttpOnly();
 
     /**
      * Sets the secure flag for the session cookie.
@@ -126,14 +126,14 @@ public interface SessionCookieConfig {
      * @throws IllegalStateException if the associated ServletContext has
      *         already been initialised
      */
-    public void setSecure(boolean secure);
+    void setSecure(boolean secure);
 
     /**
      * Will session cookies be created with the secure flag set?
      *
      * @return {@code true} if the flag should be set, otherwise {@code false}
      */
-    public boolean isSecure();
+    boolean isSecure();
 
     /**
      * Sets the maximum age.
@@ -142,14 +142,14 @@ public interface SessionCookieConfig {
      * @throws IllegalStateException if the associated ServletContext has
      *         already been initialised
      */
-    public void setMaxAge(int MaxAge);
+    void setMaxAge(int MaxAge);
 
     /**
      * Obtain the maximum age to set for a session cookie.
      *
      * @return the maximum age in seconds
      */
-    public int getMaxAge();
+    int getMaxAge();
 
     /**
      * Sets the value for the given session cookie attribute. When a value is
@@ -170,7 +170,7 @@ public interface SessionCookieConfig {
      *
      * @since Servlet 6.0
      */
-    public void setAttribute(String name, String value);
+    void setAttribute(String name, String value);
 
     /**
      * Obtain the value for a sesison cookie given attribute. Values returned
@@ -183,7 +183,7 @@ public interface SessionCookieConfig {
      *
      * @since Servlet 6.0
      */
-    public String getAttribute(String name);
+    String getAttribute(String name);
 
     /**
      * Obtain the Map of attributes and values (excluding version) for this
@@ -193,5 +193,5 @@ public interface SessionCookieConfig {
      *
      * @since Servlet 6.0
      */
-    public Map<String,String> getAttributes();
+    Map<String,String> getAttributes();
 }

==================================================
JspConfigDescriptor.java
index 6052e210fc..074875db9c 100644
--- a/java/jakarta/servlet/WriteListener.java
+++ b/java/jakarta/servlet/WriteListener.java
@@ -34,12 +34,12 @@ public interface WriteListener extends java.util.EventListener{
      *
      * @throws IOException if an I/O error occurs while processing this event
      */
-    public void onWritePossible() throws IOException;
+    void onWritePossible() throws IOException;
 
     /**
      * Invoked if an error occurs while writing the response.
      *
      * @param throwable The throwable that represents the error that occurred
      */
-    public void onError(java.lang.Throwable throwable);
+    void onError(java.lang.Throwable throwable);
 }
\ No newline at end of file

==================================================
JspPropertyGroupDescriptor.java
index 78b78de59f..baee57a4cf 100644
--- a/java/jakarta/servlet/descriptor/JspConfigDescriptor.java
+++ b/java/jakarta/servlet/descriptor/JspConfigDescriptor.java
@@ -34,7 +34,7 @@ public interface JspConfigDescriptor {
      *
      * @return the tag library descriptors
      */
-    public Collection<TaglibDescriptor> getTaglibs();
+    Collection<TaglibDescriptor> getTaglibs();
 
     /**
      * Provide the set of JSP property groups obtained from the
@@ -43,5 +43,5 @@ public interface JspConfigDescriptor {
      *
      * @return the JSP property groups
      */
-    public Collection<JspPropertyGroupDescriptor> getJspPropertyGroups();
+    Collection<JspPropertyGroupDescriptor> getJspPropertyGroups();
 }

==================================================
TaglibDescriptor.java
index 84555c0c8f..34fac21246 100644
--- a/java/jakarta/servlet/descriptor/JspPropertyGroupDescriptor.java
+++ b/java/jakarta/servlet/descriptor/JspPropertyGroupDescriptor.java
@@ -30,14 +30,14 @@ public interface JspPropertyGroupDescriptor {
      *
      * @return the patterns to which this group applies
      */
-    public Collection<String> getUrlPatterns();
+    Collection<String> getUrlPatterns();
 
     /**
      * Is Expression Language ignored for this group?
      *
      * @return {@code true} if EL is ignored, otherwise {@code false}
      */
-    public String getElIgnored();
+    String getElIgnored();
 
     /**
      * Will the use of an unknown identifier in EL within a JSP page trigger an
@@ -47,21 +47,21 @@ public interface JspPropertyGroupDescriptor {
      *
      * @since Servlet 6.0
      */
-    public String getErrorOnELNotFound();
+    String getErrorOnELNotFound();
 
     /**
      * Obtain the page encoding for this group.
      *
      * @return the page encoding for this group
      */
-    public String getPageEncoding();
+    String getPageEncoding();
 
     /**
      * Is scripting disabled for this group?
      *
      * @return {@code true} if scripting is disabled, otherwise {@code false}
      */
-    public String getScriptingInvalid();
+    String getScriptingInvalid();
 
     /**
      * Should the JSPs in this group be treated as JSP documents?
@@ -69,21 +69,21 @@ public interface JspPropertyGroupDescriptor {
      * @return {@code true} if the JSPs should be treated as JSP documents,
      *         otherwise {@code false}
      */
-    public String getIsXml();
+    String getIsXml();
 
     /**
      * Obtain the preludes to include for this group.
      *
      * @return the preludes to include for this group
      */
-    public Collection<String> getIncludePreludes();
+    Collection<String> getIncludePreludes();
 
     /**
      * Obtain the codas to include for this group.
      *
      * @return the codas to include for this group.
      */
-    public Collection<String> getIncludeCodas();
+    Collection<String> getIncludeCodas();
 
     /**
      * Is the deferred El syntax <code>#{...}</code> allowed to be used as a
@@ -92,7 +92,7 @@ public interface JspPropertyGroupDescriptor {
      * @return {@code true} if the deferred EL syntax is allowed to be used as
      *         a literal, otherwise {@code false}
      */
-    public String getDeferredSyntaxAllowedAsLiteral();
+    String getDeferredSyntaxAllowedAsLiteral();
 
     /**
      * Should the JSPs in this group have template text that only contains
@@ -101,21 +101,21 @@ public interface JspPropertyGroupDescriptor {
      * @return {@code true} if the whitespace be removed, otherwise
      *         {@code false}
      */
-    public String getTrimDirectiveWhitespaces();
+    String getTrimDirectiveWhitespaces();
 
     /**
      * Obtain the default content type this group of JSP pages.#
      *
      * @return the default content type this group of JSP pages
      */
-    public String getDefaultContentType();
+    String getDefaultContentType();
 
     /**
      * Obtain the per-page buffer configuration for this group of JSP pages.
      *
      * @return the per-page buffer configuration for this group of JSP pages
      */
-    public String getBuffer();
+    String getBuffer();
 
     /**
      * Should an error be raised at translation time for a page in this group if
@@ -124,5 +124,5 @@ public interface JspPropertyGroupDescriptor {
      * @return {@code true} if an error should be raised, otherwise
      *         {@code false}
      */
-    public String getErrorOnUndeclaredNamespace();
+    String getErrorOnUndeclaredNamespace();
 }

==================================================
HttpServlet.java
index 4971093ba3..545377dc09 100644
--- a/java/jakarta/servlet/descriptor/TaglibDescriptor.java
+++ b/java/jakarta/servlet/descriptor/TaglibDescriptor.java
@@ -28,12 +28,12 @@ public interface TaglibDescriptor {
      *
      * @return the URI for the tag library
      */
-    public String getTaglibURI();
+    String getTaglibURI();
 
     /**
      * Obtain the location of the tag library.
      *
      * @return the location of the tag library
      */
-    public String getTaglibLocation();
+    String getTaglibLocation();
 }

==================================================
HttpServletRequest.java
index 930529fdde..7f3c3e8901 100644
--- a/java/jakarta/servlet/http/HttpServlet.java
+++ b/java/jakarta/servlet/http/HttpServlet.java
@@ -850,7 +850,7 @@ public abstract class HttpServlet extends GenericServlet {
         private final String encoding;
         private PrintWriter pw;
 
-        public NoBodyPrintWriter(NoBodyOutputStream out, String encoding) throws UnsupportedEncodingException {
+        NoBodyPrintWriter(NoBodyOutputStream out, String encoding) throws UnsupportedEncodingException {
             super(out);
             this.out = out;
             this.encoding = encoding;
@@ -1018,7 +1018,7 @@ public abstract class HttpServlet extends GenericServlet {
 
         private final NoBodyResponse noBodyResponse;
 
-        public NoBodyAsyncContextListener(NoBodyResponse noBodyResponse) {
+        NoBodyAsyncContextListener(NoBodyResponse noBodyResponse) {
             this.noBodyResponse = noBodyResponse;
         }
 

==================================================
HttpServletResponse.java
index 050620b735..5e20cfdcad 100644
--- a/java/jakarta/servlet/http/HttpServletRequest.java
+++ b/java/jakarta/servlet/http/HttpServletRequest.java
@@ -36,19 +36,19 @@ public interface HttpServletRequest extends ServletRequest {
     /**
      * String identifier for Basic authentication. Value "BASIC"
      */
-    public static final String BASIC_AUTH = "BASIC";
+    String BASIC_AUTH = "BASIC";
     /**
      * String identifier for Form authentication. Value "FORM"
      */
-    public static final String FORM_AUTH = "FORM";
+    String FORM_AUTH = "FORM";
     /**
      * String identifier for Client Certificate authentication. Value "CLIENT_CERT"
      */
-    public static final String CLIENT_CERT_AUTH = "CLIENT_CERT";
+    String CLIENT_CERT_AUTH = "CLIENT_CERT";
     /**
      * String identifier for Digest authentication. Value "DIGEST"
      */
-    public static final String DIGEST_AUTH = "DIGEST";
+    String DIGEST_AUTH = "DIGEST";
 
     /**
      * Returns the name of the authentication scheme used to protect the servlet. All servlet containers support basic,
@@ -61,7 +61,7 @@ public interface HttpServletRequest extends ServletRequest {
      *             comparison) or the container-specific string indicating the authentication scheme, or
      *             <code>null</code> if the request was not authenticated.
      */
-    public String getAuthType();
+    String getAuthType();
 
     /**
      * Returns an array containing all of the <code>Cookie</code> objects the client sent with this request. This method
@@ -70,7 +70,7 @@ public interface HttpServletRequest extends ServletRequest {
      * @return an array of all the <code>Cookies</code> included with this request, or <code>null</code> if the request
      *             has no cookies
      */
-    public Cookie[] getCookies();
+    Cookie[] getCookies();
 
     /**
      * Returns the value of the specified request header as a <code>long</code> value that represents a
@@ -90,7 +90,7 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @exception IllegalArgumentException If the header value can't be converted to a date
      */
-    public long getDateHeader(String name);
+    long getDateHeader(String name);
 
     /**
      * Returns the value of the specified request header as a <code>String</code>. If the request did not include a
@@ -103,7 +103,7 @@ public interface HttpServletRequest extends ServletRequest {
      * @return a <code>String</code> containing the value of the requested header, or <code>null</code> if the request
      *             does not have a header of that name
      */
-    public String getHeader(String name);
+    String getHeader(String name);
 
     /**
      * Returns all the values of the specified request header as an <code>Enumeration</code> of <code>String</code>
@@ -121,7 +121,7 @@ public interface HttpServletRequest extends ServletRequest {
      *             any headers of that name return an empty enumeration. If the container does not allow access to
      *             header information, return null
      */
-    public Enumeration<String> getHeaders(String name);
+    Enumeration<String> getHeaders(String name);
 
     /**
      * Returns an enumeration of all the header names this request contains. If the request has no headers, this method
@@ -133,7 +133,7 @@ public interface HttpServletRequest extends ServletRequest {
      * @return an enumeration of all the header names sent with this request; if the request has no headers, an empty
      *             enumeration; if the servlet container does not allow servlets to use this method, <code>null</code>
      */
-    public Enumeration<String> getHeaderNames();
+    Enumeration<String> getHeaderNames();
 
     /**
      * Returns the value of the specified request header as an <code>int</code>. If the request does not have a header
@@ -149,14 +149,14 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @exception NumberFormatException If the header value can't be converted to an <code>int</code>
      */
-    public int getIntHeader(String name);
+    int getIntHeader(String name);
 
     /**
      * Obtain the mapping information for this request.
      *
      * @return the mapping information for this request
      */
-    public default HttpServletMapping getHttpServletMapping() {
+    default HttpServletMapping getHttpServletMapping() {
         return new HttpServletMapping() {
 
             @Override
@@ -187,7 +187,7 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @return a <code>String</code> specifying the name of the method with which this request was made
      */
-    public String getMethod();
+    String getMethod();
 
     /**
      * Returns any extra path information associated with the URL the client sent when it made this request. The extra
@@ -202,7 +202,7 @@ public interface HttpServletRequest extends ServletRequest {
      *             after the servlet path but before the query string in the request URL; or {@code null} if the URL
      *             does not have any extra path information
      */
-    public String getPathInfo();
+    String getPathInfo();
 
     /**
      * Returns any extra path information after the servlet name but before the query string, and translates it to a
@@ -215,7 +215,7 @@ public interface HttpServletRequest extends ServletRequest {
      * @return a <code>String</code> specifying the real path, or <code>null</code> if the URL does not have any extra
      *             path information
      */
-    public String getPathTranslated();
+    String getPathTranslated();
 
     /**
      * Obtain a builder for generating push requests. {@link PushBuilder} documents how this request will be used as the
@@ -229,7 +229,7 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @since Servlet 4.0
      */
-    public default PushBuilder newPushBuilder() {
+    default PushBuilder newPushBuilder() {
         return null;
     }
 
@@ -240,7 +240,7 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @return a <code>String</code> specifying the portion of the request URI that indicates the context of the request
      */
-    public String getContextPath();
+    String getContextPath();
 
     /**
      * Returns the query string that is contained in the request URL after the path. This method returns
@@ -249,7 +249,7 @@ public interface HttpServletRequest extends ServletRequest {
      * @return a <code>String</code> containing the query string or <code>null</code> if the URL contains no query
      *             string. The value is not decoded by the container.
      */
-    public String getQueryString();
+    String getQueryString();
 
     /**
      * Returns the login of the user making this request, if the user has been authenticated, or <code>null</code> if
@@ -259,7 +259,7 @@ public interface HttpServletRequest extends ServletRequest {
      * @return a <code>String</code> specifying the login of the user making this request, or <code>null</code> if the
      *             user login is not known
      */
-    public String getRemoteUser();
+    String getRemoteUser();
 
     /**
      * Returns a boolean indicating whether the authenticated user is included in the specified logical "role". Roles
@@ -271,7 +271,7 @@ public interface HttpServletRequest extends ServletRequest {
      * @return a <code>boolean</code> indicating whether the user making this request belongs to a given role;
      *             <code>false</code> if the user has not been authenticated
      */
-    public boolean isUserInRole(String role);
+    boolean isUserInRole(String role);
 
     /**
      * Returns a <code>java.security.Principal</code> object containing the name of the current authenticated user. If
@@ -280,7 +280,7 @@ public interface HttpServletRequest extends ServletRequest {
      * @return a <code>java.security.Principal</code> containing the name of the user making this request;
      *             <code>null</code> if the user has not been authenticated
      */
-    public java.security.Principal getUserPrincipal();
+    java.security.Principal getUserPrincipal();
 
     /**
      * Returns the session ID specified by the client. This may not be the same as the ID of the current valid session
@@ -291,7 +291,7 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @see #isRequestedSessionIdValid
      */
-    public String getRequestedSessionId();
+    String getRequestedSessionId();
 
     /**
      * Returns the part of this request's URL from the protocol name up to the query string in the first line of the
@@ -321,7 +321,7 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @see #getRequestURL
      */
-    public String getRequestURI();
+    String getRequestURI();
 
     /**
      * Reconstructs the URL the client used to make the request. The returned URL contains a protocol, server name, port
@@ -334,7 +334,7 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @return a <code>StringBuffer</code> object containing the reconstructed URL
      */
-    public StringBuffer getRequestURL();
+    StringBuffer getRequestURL();
 
     /**
      * Returns the part of this request's URL that calls the servlet. This path starts with a "/" character and includes
@@ -351,7 +351,7 @@ public interface HttpServletRequest extends ServletRequest {
      *             being called, as specified in the request URL, or an empty string if the servlet used to process the
      *             request is matched using the "/*" pattern.
      */
-    public String getServletPath();
+    String getServletPath();
 
     /**
      * Returns the current <code>HttpSession</code> associated with this request or, if there is no current session and
@@ -372,7 +372,7 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @see #getSession()
      */
-    public HttpSession getSession(boolean create);
+    HttpSession getSession(boolean create);
 
     /**
      * Returns the current session associated with this request, or if the request does not have a session, creates one.
@@ -381,7 +381,7 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @see #getSession(boolean)
      */
-    public HttpSession getSession();
+    HttpSession getSession();
 
     /**
      * Changes the session ID of the session associated with this request. This method does not create a new session
@@ -393,7 +393,7 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @since Servlet 3.1
      */
-    public String changeSessionId();
+    String changeSessionId();
 
     /**
      * Checks whether the requested session ID is still valid.
@@ -404,7 +404,7 @@ public interface HttpServletRequest extends ServletRequest {
      * @see #getRequestedSessionId
      * @see #getSession
      */
-    public boolean isRequestedSessionIdValid();
+    boolean isRequestedSessionIdValid();
 
     /**
      * Checks whether the requested session ID came in as a cookie.
@@ -413,7 +413,7 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @see #getSession
      */
-    public boolean isRequestedSessionIdFromCookie();
+    boolean isRequestedSessionIdFromCookie();
 
     /**
      * Checks whether the requested session ID came in as part of the request URL.
@@ -422,7 +422,7 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @see #getSession
      */
-    public boolean isRequestedSessionIdFromURL();
+    boolean isRequestedSessionIdFromURL();
 
     /**
      * Triggers the same authentication process as would be triggered if the request is for a resource that is protected
@@ -440,7 +440,7 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @since Servlet 3.0
      */
-    public boolean authenticate(HttpServletResponse response) throws IOException, ServletException;
+    boolean authenticate(HttpServletResponse response) throws IOException, ServletException;
 
     /**
      * Authenticate the provided user name and password and then associated the authenticated user with the request.
@@ -454,7 +454,7 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @since Servlet 3.0
      */
-    public void login(String username, String password) throws ServletException;
+    void login(String username, String password) throws ServletException;
 
     /**
      * Removes any authenticated user from the request.
@@ -463,7 +463,7 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @since Servlet 3.0
      */
-    public void logout() throws ServletException;
+    void logout() throws ServletException;
 
     /**
      * Return a collection of all uploaded Parts.
@@ -476,7 +476,7 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @since Servlet 3.0
      */
-    public Collection<Part> getParts() throws IOException, ServletException;
+    Collection<Part> getParts() throws IOException, ServletException;
 
     /**
      * Gets the named Part or null if the Part does not exist. Triggers upload of all Parts.
@@ -491,7 +491,7 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @since Servlet 3.0
      */
-    public Part getPart(String name) throws IOException, ServletException;
+    Part getPart(String name) throws IOException, ServletException;
 
     /**
      * Start the HTTP upgrade process and create and instance of the provided protocol handler class. The connection
@@ -508,7 +508,7 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @since Servlet 3.1
      */
-    public <T extends HttpUpgradeHandler> T upgrade(Class<T> httpUpgradeHandlerClass)
+    <T extends HttpUpgradeHandler> T upgrade(Class<T> httpUpgradeHandlerClass)
             throws java.io.IOException, ServletException;
 
     /**
@@ -518,7 +518,7 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @since Servlet 4.0
      */
-    public default Map<String, String> getTrailerFields() {
+    default Map<String, String> getTrailerFields() {
         return Collections.emptyMap();
     }
 
@@ -536,7 +536,7 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @since Servlet 4.0
      */
-    public default boolean isTrailerFieldsReady() {
+    default boolean isTrailerFieldsReady() {
         return true;
     }
 }

==================================================
HttpSession.java
index d633678eda..daacbc212b 100644
--- a/java/jakarta/servlet/http/HttpServletResponse.java
+++ b/java/jakarta/servlet/http/HttpServletResponse.java
@@ -39,7 +39,7 @@ public interface HttpServletResponse extends ServletResponse {
      *
      * @param cookie the Cookie to return to the client
      */
-    public void addCookie(Cookie cookie);
+    void addCookie(Cookie cookie);
 
     /**
      * Returns a boolean indicating whether the named response header has already been set.
@@ -48,7 +48,7 @@ public interface HttpServletResponse extends ServletResponse {
      *
      * @return <code>true</code> if the named response header has already been set; <code>false</code> otherwise
      */
-    public boolean containsHeader(String name);
+    boolean containsHeader(String name);
 
     /**
      * Encodes the specified URL by including the session ID in it, or, if encoding is not needed, returns the URL
@@ -63,7 +63,7 @@ public interface HttpServletResponse extends ServletResponse {
      *
      * @return the encoded URL if encoding is needed; the unchanged URL otherwise.
      */
-    public String encodeURL(String url);
+    String encodeURL(String url);
 
     /**
      * Encodes the specified URL for use in the <code>sendRedirect</code> method or, if encoding is not needed, returns
@@ -80,7 +80,7 @@ public interface HttpServletResponse extends ServletResponse {
      *
      * @see #sendRedirect
      */
-    public String encodeRedirectURL(String url);
+    String encodeRedirectURL(String url);
 
     /**
      * Sends an error response to the client using the specified status code and clears the output buffer. The server
@@ -98,7 +98,7 @@ public interface HttpServletResponse extends ServletResponse {
      * @exception IOException           If an input or output exception occurs
      * @exception IllegalStateException If the response was committed
      */
-    public void sendError(int sc, String msg) throws IOException;
+    void sendError(int sc, String msg) throws IOException;
 
     /**
      * Sends an error response to the client using the specified status code and clears the buffer. This is equivalent
@@ -109,7 +109,7 @@ public interface HttpServletResponse extends ServletResponse {
      * @exception IOException           If an input or output exception occurs
      * @exception IllegalStateException If the response was committed before this method call
      */
-    public void sendError(int sc) throws IOException;
+    void sendError(int sc) throws IOException;
 
     /**
      * Sends a temporary redirect response to the client using the specified redirect location URL. This method can
@@ -127,7 +127,7 @@ public interface HttpServletResponse extends ServletResponse {
      * @exception IllegalStateException If the response was committed or if a partial URL is given and cannot be
      *                                      converted into a valid URL
      */
-    public void sendRedirect(String location) throws IOException;
+    void sendRedirect(String location) throws IOException;
 
     /**
      * Sets a response header with the given name and date-value. The date is specified in terms of milliseconds since
@@ -140,7 +140,7 @@ public interface HttpServletResponse extends ServletResponse {
      * @see #containsHeader
      * @see #addDateHeader
      */
-    public void setDateHeader(String name, long date);
+    void setDateHeader(String name, long date);
 
     /**
      * Adds a response header with the given name and date-value. The date is specified in terms of milliseconds since
@@ -151,7 +151,7 @@ public interface HttpServletResponse extends ServletResponse {
      *
      * @see #setDateHeader
      */
-    public void addDateHeader(String name, long date);
+    void addDateHeader(String name, long date);
 
     /**
      * Sets a response header with the given name and value. If the header had already been set, the new value
@@ -165,7 +165,7 @@ public interface HttpServletResponse extends ServletResponse {
      * @see #containsHeader
      * @see #addHeader
      */
-    public void setHeader(String name, String value);
+    void setHeader(String name, String value);
 
     /**
      * Adds a response header with the given name and value. This method allows response headers to have multiple
@@ -177,7 +177,7 @@ public interface HttpServletResponse extends ServletResponse {
      *
      * @see #setHeader
      */
-    public void addHeader(String name, String value);
+    void addHeader(String name, String value);
 
     /**
      * Sets a response header with the given name and integer value. If the header had already been set, the new value
@@ -190,7 +190,7 @@ public interface HttpServletResponse extends ServletResponse {
      * @see #containsHeader
      * @see #addIntHeader
      */
-    public void setIntHeader(String name, int value);
+    void setIntHeader(String name, int value);
 
     /**
      * Adds a response header with the given name and integer value. This method allows response headers to have
@@ -201,7 +201,7 @@ public interface HttpServletResponse extends ServletResponse {
      *
      * @see #setIntHeader
      */
-    public void addIntHeader(String name, int value);
+    void addIntHeader(String name, int value);
 
     /**
      * Sets the status code for this response. This method is used to set the return status code when there is no error
@@ -214,7 +214,7 @@ public interface HttpServletResponse extends ServletResponse {
      *
      * @see #sendError
      */
-    public void setStatus(int sc);
+    void setStatus(int sc);
 
     /**
      * Get the HTTP status code for this Response.
@@ -223,7 +223,7 @@ public interface HttpServletResponse extends ServletResponse {
      *
      * @since Servlet 3.0
      */
-    public int getStatus();
+    int getStatus();
 
     /**
      * Return the value for the specified header, or <code>null</code> if this header has not been set. If more than one
@@ -237,7 +237,7 @@ public interface HttpServletResponse extends ServletResponse {
      *
      * @since Servlet 3.0
      */
-    public String getHeader(String name);
+    String getHeader(String name);
 
     /**
      * Return a Collection of all the header values associated with the specified header name.
@@ -249,7 +249,7 @@ public interface HttpServletResponse extends ServletResponse {
      *
      * @since Servlet 3.0
      */
-    public Collection<String> getHeaders(String name);
+    Collection<String> getHeaders(String name);
 
     /**
      * Get the header names set for this HTTP response.
@@ -258,7 +258,7 @@ public interface HttpServletResponse extends ServletResponse {
      *
      * @since Servlet 3.0
      */
-    public Collection<String> getHeaderNames();
+    Collection<String> getHeaderNames();
 
     /**
      * Configure the supplier of the trailer headers. The supplier will be called in the scope of the thread that
@@ -273,7 +273,7 @@ public interface HttpServletResponse extends ServletResponse {
      *
      * @since Servlet 4.0
      */
-    public default void setTrailerFields(Supplier<Map<String, String>> supplier) {
+    default void setTrailerFields(Supplier<Map<String, String>> supplier) {
         // NO-OP
     }
 
@@ -285,7 +285,7 @@ public interface HttpServletResponse extends ServletResponse {
      *
      * @since Servlet 4.0
      */
-    public default Supplier<Map<String, String>> getTrailerFields() {
+    default Supplier<Map<String, String>> getTrailerFields() {
         return null;
     }
 
@@ -296,253 +296,253 @@ public interface HttpServletResponse extends ServletResponse {
     /**
      * Status code (100) indicating the client can continue.
      */
-    public static final int SC_CONTINUE = 100;
+    int SC_CONTINUE = 100;
 
     /**
      * Status code (101) indicating the server is switching protocols according to Upgrade header.
      */
-    public static final int SC_SWITCHING_PROTOCOLS = 101;
+    int SC_SWITCHING_PROTOCOLS = 101;
 
     /**
      * Status code (200) indicating the request succeeded normally.
      */
-    public static final int SC_OK = 200;
+    int SC_OK = 200;
 
     /**
      * Status code (201) indicating the request succeeded and created a new resource on the server.
      */
-    public static final int SC_CREATED = 201;
+    int SC_CREATED = 201;
 
     /**
      * Status code (202) indicating that a request was accepted for processing, but was not completed.
      */
-    public static final int SC_ACCEPTED = 202;
+    int SC_ACCEPTED = 202;
 
     /**
      * Status code (203) indicating that the meta information presented by the client did not originate from the server.
      */
-    public static final int SC_NON_AUTHORITATIVE_INFORMATION = 203;
+    int SC_NON_AUTHORITATIVE_INFORMATION = 203;
 
     /**
      * Status code (204) indicating that the request succeeded but that there was no new information to return.
      */
-    public static final int SC_NO_CONTENT = 204;
+    int SC_NO_CONTENT = 204;
 
     /**
      * Status code (205) indicating that the agent <em>SHOULD</em> reset the document view which caused the request to
      * be sent.
      */
-    public static final int SC_RESET_CONTENT = 205;
+    int SC_RESET_CONTENT = 205;
 
     /**
      * Status code (206) indicating that the server has fulfilled the partial GET request for the resource.
      */
-    public static final int SC_PARTIAL_CONTENT = 206;
+    int SC_PARTIAL_CONTENT = 206;
 
     /**
      * Status code (300) indicating that the requested resource corresponds to any one of a set of representations, each
      * with its own specific location.
      */
-    public static final int SC_MULTIPLE_CHOICES = 300;
+    int SC_MULTIPLE_CHOICES = 300;
 
     /**
      * Status code (301) indicating that the resource has permanently moved to a new location, and that future
      * references should use a new URI with their requests.
      */
-    public static final int SC_MOVED_PERMANENTLY = 301;
+    int SC_MOVED_PERMANENTLY = 301;
 
     /**
      * Status code (302) indicating that the resource has temporarily moved to another location, but that future
      * references should still use the original URI to access the resource. This definition is being retained for
      * backwards compatibility. SC_FOUND is now the preferred definition.
      */
-    public static final int SC_MOVED_TEMPORARILY = 302;
+    int SC_MOVED_TEMPORARILY = 302;
 
     /**
      * Status code (302) indicating that the resource reside temporarily under a different URI. Since the redirection
      * might be altered on occasion, the client should continue to use the Request-URI for future requests.(HTTP/1.1) To
      * represent the status code (302), it is recommended to use this variable.
      */
-    public static final int SC_FOUND = 302;
+    int SC_FOUND = 302;
 
     /**
      * Status code (303) indicating that the response to the request can be found under a different URI.
      */
-    public static final int SC_SEE_OTHER = 303;
+    int SC_SEE_OTHER = 303;
 
     /**
      * Status code (304) indicating that a conditional GET operation found that the resource was available and not
      * modified.
      */
-    public static final int SC_NOT_MODIFIED = 304;
+    int SC_NOT_MODIFIED = 304;
 
     /**
      * Status code (305) indicating that the requested resource <em>MUST</em> be accessed through the proxy given by the
      * <code><em>Location</em></code> field.
      */
-    public static final int SC_USE_PROXY = 305;
+    int SC_USE_PROXY = 305;
 
     /**
      * Status code (307) indicating that the requested resource resides temporarily under a different URI. The temporary
      * URI <em>SHOULD</em> be given by the <code><em>Location</em></code> field in the response.
      */
-    public static final int SC_TEMPORARY_REDIRECT = 307;
+    int SC_TEMPORARY_REDIRECT = 307;
 
     /**
      * Status code (308) indicating that the requested resource resides permanently under a different URI. The new URI
      * <em>SHOULD</em> be given by the <code><em>Location</em></code> field in the response.
      */
-    public static final int SC_PERMANENT_REDIRECT = 308;
+    int SC_PERMANENT_REDIRECT = 308;
 
     /**
      * Status code (400) indicating the request sent by the client was syntactically incorrect.
      */
-    public static final int SC_BAD_REQUEST = 400;
+    int SC_BAD_REQUEST = 400;
 
     /**
      * Status code (401) indicating that the request requires HTTP authentication.
      */
-    public static final int SC_UNAUTHORIZED = 401;
+    int SC_UNAUTHORIZED = 401;
 
     /**
      * Status code (402) reserved for future use.
      */
-    public static final int SC_PAYMENT_REQUIRED = 402;
+    int SC_PAYMENT_REQUIRED = 402;
 
     /**
      * Status code (403) indicating the server understood the request but refused to fulfill it.
      */
-    public static final int SC_FORBIDDEN = 403;
+    int SC_FORBIDDEN = 403;
 
     /**
      * Status code (404) indicating that the requested resource is not available.
      */
-    public static final int SC_NOT_FOUND = 404;
+    int SC_NOT_FOUND = 404;
 
     /**
      * Status code (405) indicating that the method specified in the <code><em>Request-Line</em></code> is not allowed
      * for the resource identified by the <code><em>Request-URI</em></code>.
      */
-    public static final int SC_METHOD_NOT_ALLOWED = 405;
+    int SC_METHOD_NOT_ALLOWED = 405;
 
     /**
      * Status code (406) indicating that the resource identified by the request is only capable of generating response
      * entities which have content characteristics not acceptable according to the accept headers sent in the request.
      */
-    public static final int SC_NOT_ACCEPTABLE = 406;
+    int SC_NOT_ACCEPTABLE = 406;
 
     /**
      * Status code (407) indicating that the client <em>MUST</em> first authenticate itself with the proxy.
      */
-    public static final int SC_PROXY_AUTHENTICATION_REQUIRED = 407;
+    int SC_PROXY_AUTHENTICATION_REQUIRED = 407;
 
     /**
      * Status code (408) indicating that the client did not produce a request within the time that the server was
      * prepared to wait.
      */
-    public static final int SC_REQUEST_TIMEOUT = 408;
+    int SC_REQUEST_TIMEOUT = 408;
 
     /**
      * Status code (409) indicating that the request could not be completed due to a conflict with the current state of
      * the resource.
      */
-    public static final int SC_CONFLICT = 409;
+    int SC_CONFLICT = 409;
 
     /**
      * Status code (410) indicating that the resource is no longer available at the server and no forwarding address is
      * known. This condition <em>SHOULD</em> be considered permanent.
      */
-    public static final int SC_GONE = 410;
+    int SC_GONE = 410;
 
     /**
      * Status code (411) indicating that the request cannot be handled without a defined
      * <code><em>Content-Length</em></code>.
      */
-    public static final int SC_LENGTH_REQUIRED = 411;
+    int SC_LENGTH_REQUIRED = 411;
 
     /**
      * Status code (412) indicating that the precondition given in one or more of the request-header fields evaluated to
      * false when it was tested on the server.
      */
-    public static final int SC_PRECONDITION_FAILED = 412;
+    int SC_PRECONDITION_FAILED = 412;
 
     /**
      * Status code (413) indicating that the server is refusing to process the request because the request entity is
      * larger than the server is willing or able to process.
      */
-    public static final int SC_REQUEST_ENTITY_TOO_LARGE = 413;
+    int SC_REQUEST_ENTITY_TOO_LARGE = 413;
 
     /**
      * Status code (414) indicating that the server is refusing to service the request because the
      * <code><em>Request-URI</em></code> is longer than the server is willing to interpret.
      */
-    public static final int SC_REQUEST_URI_TOO_LONG = 414;
+    int SC_REQUEST_URI_TOO_LONG = 414;
 
     /**
      * Status code (415) indicating that the server is refusing to service the request because the entity of the request
      * is in a format not supported by the requested resource for the requested method.
      */
-    public static final int SC_UNSUPPORTED_MEDIA_TYPE = 415;
+    int SC_UNSUPPORTED_MEDIA_TYPE = 415;
 
     /**
      * Status code (416) indicating that the server cannot serve the requested byte range.
      */
-    public static final int SC_REQUESTED_RANGE_NOT_SATISFIABLE = 416;
+    int SC_REQUESTED_RANGE_NOT_SATISFIABLE = 416;
 
     /**
      * Status code (417) indicating that the server could not meet the expectation given in the Expect request header.
      */
-    public static final int SC_EXPECTATION_FAILED = 417;
+    int SC_EXPECTATION_FAILED = 417;
 
     /**
      * Status code (421) indicating that the server is unwilling or unable to produce an authoritative response for the
      * target URI.
      */
-    public static final int SC_MISDIRECTED_REQUEST = 421;
+    int SC_MISDIRECTED_REQUEST = 421;
 
     /**
      * Status code (422) indicating that the server understands the content type of the request but is unable to process
      * the contained instructions.
      */
-    public static final int SC_UNPROCESSABLE_CONTENT = 422;
+    int SC_UNPROCESSABLE_CONTENT = 422;
 
     /**
      * Status code (426) indicating that the server refuses to perform the request using the current protocol but may be
      * willing to do so after the client upgrades to a different protocol. The server must include an appropriate
      * {@code Upgrade} header in the response.
      */
-    public static final int SC_UPGRADE_REQUIRED = 426;
+    int SC_UPGRADE_REQUIRED = 426;
 
     /**
      * Status code (500) indicating an error inside the HTTP server which prevented it from fulfilling the request.
      */
-    public static final int SC_INTERNAL_SERVER_ERROR = 500;
+    int SC_INTERNAL_SERVER_ERROR = 500;
 
     /**
      * Status code (501) indicating the HTTP server does not support the functionality needed to fulfill the request.
      */
-    public static final int SC_NOT_IMPLEMENTED = 501;
+    int SC_NOT_IMPLEMENTED = 501;
 
     /**
      * Status code (502) indicating that the HTTP server received an invalid response from a server it consulted when
      * acting as a proxy or gateway.
      */
-    public static final int SC_BAD_GATEWAY = 502;
+    int SC_BAD_GATEWAY = 502;
 
     /**
      * Status code (503) indicating that the HTTP server is temporarily overloaded, and unable to handle the request.
      */
-    public static final int SC_SERVICE_UNAVAILABLE = 503;
+    int SC_SERVICE_UNAVAILABLE = 503;
 
     /**
      * Status code (504) indicating that the server did not receive a timely response from the upstream server while
      * acting as a gateway or proxy.
      */
-    public static final int SC_GATEWAY_TIMEOUT = 504;
+    int SC_GATEWAY_TIMEOUT = 504;
 
     /**
      * Status code (505) indicating that the server does not support or refuses to support the HTTP protocol version
      * that was used in the request message.
      */
-    public static final int SC_HTTP_VERSION_NOT_SUPPORTED = 505;
+    int SC_HTTP_VERSION_NOT_SUPPORTED = 505;
 }

==================================================
HttpSessionActivationListener.java
index fdea4e1365..ecadd1e9bf 100644
--- a/java/jakarta/servlet/http/HttpSession.java
+++ b/java/jakarta/servlet/http/HttpSession.java
@@ -64,7 +64,7 @@ public interface HttpSession {
      *
      * @exception IllegalStateException if this method is called on an invalidated session
      */
-    public long getCreationTime();
+    long getCreationTime();
 
     /**
      * Returns a string containing the unique identifier assigned to this session. The identifier is assigned by the
@@ -74,7 +74,7 @@ public interface HttpSession {
      *
      * @exception IllegalStateException if this method is called on an invalidated session
      */
-    public String getId();
+    String getId();
 
     /**
      * Returns the last time the client sent a request associated with this session, as the number of milliseconds since
@@ -88,7 +88,7 @@ public interface HttpSession {
      *
      * @exception IllegalStateException if this method is called on an invalidated session
      */
-    public long getLastAccessedTime();
+    long getLastAccessedTime();
 
     /**
      * Returns the ServletContext to which this session belongs.
@@ -97,7 +97,7 @@ public interface HttpSession {
      *
      * @since Servlet 2.3
      */
-    public ServletContext getServletContext();
+    ServletContext getServletContext();
 
     /**
      * Specifies the time, in seconds, between client requests before the servlet container will invalidate this
@@ -105,7 +105,7 @@ public interface HttpSession {
      *
      * @param interval An integer specifying the number of seconds
      */
-    public void setMaxInactiveInterval(int interval);
+    void setMaxInactiveInterval(int interval);
 
     /**
      * Returns the maximum time interval, in seconds, that the servlet container will keep this session open between
@@ -117,7 +117,7 @@ public interface HttpSession {
      *
      * @see #setMaxInactiveInterval
      */
-    public int getMaxInactiveInterval();
+    int getMaxInactiveInterval();
 
     /**
      * Returns the object bound with the specified name in this session, or <code>null</code> if no object is bound
@@ -129,7 +129,7 @@ public interface HttpSession {
      *
      * @exception IllegalStateException if this method is called on an invalidated session
      */
-    public Object getAttribute(String name);
+    Object getAttribute(String name);
 
     /**
      * Returns an <code>Enumeration</code> of <code>String</code> objects containing the names of all the objects bound
@@ -140,7 +140,7 @@ public interface HttpSession {
      *
      * @exception IllegalStateException if this method is called on an invalidated session
      */
-    public Enumeration<String> getAttributeNames();
+    Enumeration<String> getAttributeNames();
 
     /**
      * Binds an object to this session, using the name specified. If an object of the same name is already bound to the
@@ -161,7 +161,7 @@ public interface HttpSession {
      *
      * @exception IllegalStateException if this method is called on an invalidated session
      */
-    public void setAttribute(String name, Object value);
+    void setAttribute(String name, Object value);
 
     /**
      * Removes the object bound with the specified name from this session. If the session does not have an object bound
@@ -175,14 +175,14 @@ public interface HttpSession {
      *
      * @exception IllegalStateException if this method is called on an invalidated session
      */
-    public void removeAttribute(String name);
+    void removeAttribute(String name);
 
     /**
      * Invalidates this session then unbinds any objects bound to it.
      *
      * @exception IllegalStateException if this method is called on an already invalidated session
      */
-    public void invalidate();
+    void invalidate();
 
     /**
      * Returns <code>true</code> if the client does not yet know about the session or if the client chooses not to join
@@ -193,5 +193,5 @@ public interface HttpSession {
      *
      * @exception IllegalStateException if this method is called on an already invalidated session
      */
-    public boolean isNew();
+    boolean isNew();
 }

==================================================
HttpSessionAttributeListener.java
index 3c3b9c16c0..625fe5e2ba 100644
--- a/java/jakarta/servlet/http/HttpSessionActivationListener.java
+++ b/java/jakarta/servlet/http/HttpSessionActivationListener.java
@@ -32,7 +32,7 @@ public interface HttpSessionActivationListener extends EventListener {
      *
      * @param se Information about the session this is about to be passivated
      */
-    public default void sessionWillPassivate(HttpSessionEvent se) {
+    default void sessionWillPassivate(HttpSessionEvent se) {
     }
 
     /**
@@ -40,7 +40,7 @@ public interface HttpSessionActivationListener extends EventListener {
      *
      * @param se Information about the session this has just been activated
      */
-    public default void sessionDidActivate(HttpSessionEvent se) {
+    default void sessionDidActivate(HttpSessionEvent se) {
     }
 }
 

==================================================
HttpSessionBindingListener.java
index d935a06cf7..4d0031277a 100644
--- a/java/jakarta/servlet/http/HttpSessionAttributeListener.java
+++ b/java/jakarta/servlet/http/HttpSessionAttributeListener.java
@@ -32,7 +32,7 @@ public interface HttpSessionAttributeListener extends EventListener {
      *
      * @param se Information about the added attribute
      */
-    public default void attributeAdded(HttpSessionBindingEvent se) {
+    default void attributeAdded(HttpSessionBindingEvent se) {
     }
 
     /**
@@ -41,7 +41,7 @@ public interface HttpSessionAttributeListener extends EventListener {
      *
      * @param se Information about the removed attribute
      */
-    public default void attributeRemoved(HttpSessionBindingEvent se) {
+    default void attributeRemoved(HttpSessionBindingEvent se) {
     }
 
     /**
@@ -50,6 +50,6 @@ public interface HttpSessionAttributeListener extends EventListener {
      *
      * @param se Information about the replaced attribute
      */
-    public default void attributeReplaced(HttpSessionBindingEvent se) {
+    default void attributeReplaced(HttpSessionBindingEvent se) {
     }
 }

==================================================
HttpSessionIdListener.java
index f7df501d4a..5c16e735e6 100644
--- a/java/jakarta/servlet/http/HttpSessionBindingListener.java
+++ b/java/jakarta/servlet/http/HttpSessionBindingListener.java
@@ -36,7 +36,7 @@ public interface HttpSessionBindingListener extends EventListener {
      *
      * @see #valueUnbound
      */
-    public default void valueBound(HttpSessionBindingEvent event) {
+    default void valueBound(HttpSessionBindingEvent event) {
     }
 
     /**
@@ -47,6 +47,6 @@ public interface HttpSessionBindingListener extends EventListener {
      *
      * @see #valueBound
      */
-    public default void valueUnbound(HttpSessionBindingEvent event) {
+    default void valueUnbound(HttpSessionBindingEvent event) {
     }
 }

==================================================
HttpSessionListener.java
index 39fa05f283..e48ec3da25 100644
--- a/java/jakarta/servlet/http/HttpSessionIdListener.java
+++ b/java/jakarta/servlet/http/HttpSessionIdListener.java
@@ -37,5 +37,5 @@ public interface HttpSessionIdListener extends EventListener {
      * @param se           the notification event
      * @param oldSessionId the old session ID
      */
-    public void sessionIdChanged(HttpSessionEvent se, String oldSessionId);
+    void sessionIdChanged(HttpSessionEvent se, String oldSessionId);
 }

==================================================
Part.java
index 2db74b38ec..bd3fd17e90 100644
--- a/java/jakarta/servlet/http/HttpSessionListener.java
+++ b/java/jakarta/servlet/http/HttpSessionListener.java
@@ -34,7 +34,7 @@ public interface HttpSessionListener extends EventListener {
      *
      * @param se the notification event
      */
-    public default void sessionCreated(HttpSessionEvent se) {
+    default void sessionCreated(HttpSessionEvent se) {
     }
 
     /**
@@ -42,6 +42,6 @@ public interface HttpSessionListener extends EventListener {
      *
      * @param se the notification event
      */
-    public default void sessionDestroyed(HttpSessionEvent se) {
+    default void sessionDestroyed(HttpSessionEvent se) {
     }
 }

==================================================
HttpJspPage.java
index 9f740029b4..f60a259e25 100644
--- a/java/jakarta/servlet/http/Part.java
+++ b/java/jakarta/servlet/http/Part.java
@@ -35,21 +35,21 @@ public interface Part {
      *
      * @throws IOException if an I/O occurs while obtaining the stream
      */
-    public InputStream getInputStream() throws IOException;
+    InputStream getInputStream() throws IOException;
 
     /**
      * Obtain the content type passed by the browser.
      *
      * @return The content type passed by the browser or <code>null</code> if not defined.
      */
-    public String getContentType();
+    String getContentType();
 
     /**
      * Obtain the name of the field in the multipart form corresponding to this part.
      *
      * @return The name of the field in the multipart form corresponding to this part.
      */
-    public String getName();
+    String getName();
 
     /**
      * If this part represents an uploaded file, gets the file name submitted in the upload. Returns {@code null} if no
@@ -59,14 +59,14 @@ public interface Part {
      *
      * @since Servlet 3.1
      */
-    public String getSubmittedFileName();
+    String getSubmittedFileName();
 
     /**
      * Obtain the size of this part.
      *
      * @return The size of the part if bytes
      */
-    public long getSize();
+    long getSize();
 
     /**
      * A convenience method to write an uploaded part to disk. The client code is not concerned with whether or not the
@@ -80,7 +80,7 @@ public interface Part {
      *
      * @throws IOException if an I/O occurs while attempting to write the part
      */
-    public void write(String fileName) throws IOException;
+    void write(String fileName) throws IOException;
 
     /**
      * Deletes the underlying storage for a part, including deleting any associated temporary disk file. Although the
@@ -93,7 +93,7 @@ public interface Part {
      *
      * @throws IOException if an I/O occurs while attempting to delete the part
      */
-    public void delete() throws IOException;
+    void delete() throws IOException;
 
     /**
      * Obtains the value of the specified part header as a String. If there are multiple headers with the same name,
@@ -103,7 +103,7 @@ public interface Part {
      *
      * @return The header value or <code>null</code> if the header is not present
      */
-    public String getHeader(String name);
+    String getHeader(String name);
 
     /**
      * Obtain all the values of the specified part header.
@@ -113,12 +113,12 @@ public interface Part {
      * @return All the values of the specified part header. If the part did not include any headers of the specified
      *             name, this method returns an empty Collection.
      */
-    public Collection<String> getHeaders(String name);
+    Collection<String> getHeaders(String name);
 
     /**
      * Get the header names provided for this part.
      *
      * @return a Collection of all the header names provided for this part.
      */
-    public Collection<String> getHeaderNames();
+    Collection<String> getHeaderNames();
 }

==================================================
JspApplicationContext.java
index c247e7b83c..2f757f8964 100644
--- a/java/jakarta/servlet/jsp/HttpJspPage.java
+++ b/java/jakarta/servlet/jsp/HttpJspPage.java
@@ -54,7 +54,7 @@ public interface HttpJspPage extends JspPage {
      * @throws IOException Thrown if an error occurred while writing the
      *     response for this page.
      */
-    public void _jspService(HttpServletRequest request,
+    void _jspService(HttpServletRequest request,
                             HttpServletResponse response)
         throws ServletException, IOException;
 }

==================================================
JspPage.java
index 5d05934559..47d06006e9 100644
--- a/java/jakarta/servlet/jsp/JspApplicationContext.java
+++ b/java/jakarta/servlet/jsp/JspApplicationContext.java
@@ -39,7 +39,7 @@ public interface JspApplicationContext {
      *
      * @param listener The listener to add
      */
-    public void addELContextListener(ELContextListener listener);
+    void addELContextListener(ELContextListener listener);
 
     /**
      * <p>
@@ -65,7 +65,7 @@ public interface JspApplicationContext {
      *             if called after the application's
      *             <code>ServletContextListeners</code> have been initialized.
      */
-    public void addELResolver(ELResolver resolver);
+    void addELResolver(ELResolver resolver);
 
     /**
      * <p>
@@ -75,6 +75,6 @@ public interface JspApplicationContext {
      *
      * @return an <code>ExpressionFactory</code> implementation
      */
-    public ExpressionFactory getExpressionFactory();
+    ExpressionFactory getExpressionFactory();
 
 }

==================================================
ImplicitObjectELResolver.java
index 4e4026a372..078e22623c 100644
--- a/java/jakarta/servlet/jsp/JspPage.java
+++ b/java/jakarta/servlet/jsp/JspPage.java
@@ -74,7 +74,7 @@ public interface JspPage extends Servlet {
      *
      * A JSP page should redefine the init() method from Servlet.
      */
-    public void jspInit();
+    void jspInit();
 
     /**
      * The jspDestroy() method is invoked when the JSP page is about to be
@@ -85,6 +85,6 @@ public interface JspPage extends Servlet {
      *
      * A JSP page should redefine the destroy() method from Servlet.
      */
-    public void jspDestroy();
+    void jspDestroy();
 
 }

==================================================
BodyTag.java
index 1acb1fe2b8..084fb1520d 100644
--- a/java/jakarta/servlet/jsp/el/ImplicitObjectELResolver.java
+++ b/java/jakarta/servlet/jsp/el/ImplicitObjectELResolver.java
@@ -191,7 +191,7 @@ public class ImplicitObjectELResolver extends ELResolver {
 
         private Map<String,Object> sessionScope;
 
-        public ScopeManager(PageContext page) {
+        ScopeManager(PageContext page) {
             this.page = page;
         }
 
@@ -522,7 +522,7 @@ public class ImplicitObjectELResolver extends ELResolver {
 
             private final String key;
 
-            public ScopeEntry(String key) {
+            ScopeEntry(String key) {
                 this.key = key;
             }
 

==================================================
DynamicAttributes.java
index f1b5d0720d..9e5c128acf 100644
--- a/java/jakarta/servlet/jsp/tagext/BodyTag.java
+++ b/java/jakarta/servlet/jsp/tagext/BodyTag.java
@@ -106,7 +106,7 @@ public interface BodyTag extends IterationTag {
      * BodyTag. This is an illegal return value for doStartTag when the class
      * does not implement BodyTag.
      */
-    public static final int EVAL_BODY_BUFFERED = 2;
+    int EVAL_BODY_BUFFERED = 2;
 
     /**
      * Set the bodyContent property. This method is invoked by the JSP page

==================================================
IterationTag.java
index f26019598d..e5d1a289e9 100644
--- a/java/jakarta/servlet/jsp/tagext/DynamicAttributes.java
+++ b/java/jakarta/servlet/jsp/tagext/DynamicAttributes.java
@@ -45,5 +45,5 @@ public interface DynamicAttributes {
      *     signal that it does not accept the given attribute.  The
      *     container must not call doStartTag() or doTag() for this tag.
      */
-    public void setDynamicAttribute(String uri, String localName, Object value) throws JspException;
+    void setDynamicAttribute(String uri, String localName, Object value) throws JspException;
 }

==================================================
JspIdConsumer.java
index 0d261b21c0..e820ebd5ca 100644
--- a/java/jakarta/servlet/jsp/tagext/IterationTag.java
+++ b/java/jakarta/servlet/jsp/tagext/IterationTag.java
@@ -78,7 +78,7 @@ public interface IterationTag extends Tag {
      * Request the reevaluation of some body.
      * Returned from doAfterBody.
      */
-    public static final int EVAL_BODY_AGAIN = 2;
+    int EVAL_BODY_AGAIN = 2;
 
     /**
      * Process body (re)evaluation.  This method is invoked by the

==================================================
SimpleTag.java
index a6950d0d75..23ac83f34c 100644
--- a/java/jakarta/servlet/jsp/tagext/JspIdConsumer.java
+++ b/java/jakarta/servlet/jsp/tagext/JspIdConsumer.java
@@ -27,5 +27,5 @@ public interface JspIdConsumer {
      *
      * @param jspId The unique Id
      */
-    public void setJspId(String jspId);
+    void setJspId(String jspId);
 }

==================================================
Tag.java
index 972eece862..e15fc6ca25 100644
--- a/java/jakarta/servlet/jsp/tagext/SimpleTag.java
+++ b/java/jakarta/servlet/jsp/tagext/SimpleTag.java
@@ -94,7 +94,7 @@ public interface SimpleTag extends JspTag {
      * @throws java.io.IOException If there was an error writing to the
      *     output stream.
      */
-    public void doTag()
+    void doTag()
         throws jakarta.servlet.jsp.JspException, java.io.IOException;
 
     /**
@@ -105,14 +105,14 @@ public interface SimpleTag extends JspTag {
      *
      * @param parent the tag that encloses this tag
      */
-    public void setParent( JspTag parent );
+    void setParent( JspTag parent );
 
     /**
      * Returns the parent of this tag, for collaboration purposes.
      *
      * @return the parent of this tag
      */
-    public JspTag getParent();
+    JspTag getParent();
 
     /**
      * Called by the container to provide this tag handler with
@@ -122,7 +122,7 @@ public interface SimpleTag extends JspTag {
      * @param pc the page context for this invocation
      * @see Tag#setPageContext
      */
-    public void setJspContext( JspContext pc );
+    void setJspContext( JspContext pc );
 
     /**
      * Provides the body of this tag as a JspFragment object, able to be
@@ -134,7 +134,7 @@ public interface SimpleTag extends JspTag {
      *
      * @param jspBody The fragment encapsulating the body of this tag.
      */
-    public void setJspBody( JspFragment jspBody );
+    void setJspBody( JspFragment jspBody );
 
 
 }

==================================================
Status.java
index aefa1cb7e0..cd5291fcfb 100644
--- a/java/jakarta/servlet/jsp/tagext/Tag.java
+++ b/java/jakarta/servlet/jsp/tagext/Tag.java
@@ -95,28 +95,28 @@ public interface Tag extends JspTag {
      * Valid return value for doStartTag and doAfterBody.
      */
 
-    public static final int SKIP_BODY = 0;
+    int SKIP_BODY = 0;
 
     /**
      * Evaluate body into existing out stream.
      * Valid return value for doStartTag.
      */
 
-    public static final int EVAL_BODY_INCLUDE = 1;
+    int EVAL_BODY_INCLUDE = 1;
 
     /**
      * Skip the rest of the page.
      * Valid return value for doEndTag.
      */
 
-    public static final int SKIP_PAGE = 5;
+    int SKIP_PAGE = 5;
 
     /**
      * Continue evaluating the page.
      * Valid return value for doEndTag().
      */
 
-    public static final int EVAL_PAGE = 6;
+    int EVAL_PAGE = 6;
 
     // Setters for Tag handler data
 

==================================================
Synchronization.java
index 9c68a50ed0..9b113fc406 100644
--- a/java/jakarta/transaction/Status.java
+++ b/java/jakarta/transaction/Status.java
@@ -17,14 +17,14 @@
 package jakarta.transaction;
 
 public interface Status {
-    public static final int STATUS_ACTIVE = 0;
-    public static final int STATUS_MARKED_ROLLBACK = 1;
-    public static final int STATUS_PREPARED = 2;
-    public static final int STATUS_COMMITTED = 3;
-    public static final int STATUS_ROLLEDBACK = 4;
-    public static final int STATUS_UNKNOWN = 5;
-    public static final int STATUS_NO_TRANSACTION = 6;
-    public static final int STATUS_PREPARING = 7;
-    public static final int STATUS_COMMITTING = 8;
-    public static final int STATUS_ROLLING_BACK = 9;
+    int STATUS_ACTIVE = 0;
+    int STATUS_MARKED_ROLLBACK = 1;
+    int STATUS_PREPARED = 2;
+    int STATUS_COMMITTED = 3;
+    int STATUS_ROLLEDBACK = 4;
+    int STATUS_UNKNOWN = 5;
+    int STATUS_NO_TRANSACTION = 6;
+    int STATUS_PREPARING = 7;
+    int STATUS_COMMITTING = 8;
+    int STATUS_ROLLING_BACK = 9;
 }

==================================================
Transaction.java
index 2fe66d86bc..129c1d741b 100644
--- a/java/jakarta/transaction/Synchronization.java
+++ b/java/jakarta/transaction/Synchronization.java
@@ -17,6 +17,6 @@
 package jakarta.transaction;
 
 public interface Synchronization {
-    public void beforeCompletion();
-    public void afterCompletion(int status);
+    void beforeCompletion();
+    void afterCompletion(int status);
 }

==================================================
TransactionManager.java
index 4cfced6db5..b7922acf5a 100644
--- a/java/jakarta/transaction/Transaction.java
+++ b/java/jakarta/transaction/Transaction.java
@@ -20,23 +20,23 @@ import javax.transaction.xa.XAResource;
 
 public interface Transaction {
 
-    public void commit() throws RollbackException, HeuristicMixedException,
+    void commit() throws RollbackException, HeuristicMixedException,
             HeuristicRollbackException, SecurityException,
             IllegalStateException, SystemException;
 
-    public boolean delistResource(XAResource xaRes, int flag)
+    boolean delistResource(XAResource xaRes, int flag)
             throws IllegalStateException, SystemException;
 
-    public boolean enlistResource(XAResource xaRes)
+    boolean enlistResource(XAResource xaRes)
             throws RollbackException, IllegalStateException, SystemException;
 
-    public int getStatus() throws SystemException;
+    int getStatus() throws SystemException;
 
-    public void registerSynchronization(Synchronization sync)
+    void registerSynchronization(Synchronization sync)
             throws RollbackException, IllegalStateException, SystemException;
 
-    public void rollback() throws IllegalStateException, SystemException;
+    void rollback() throws IllegalStateException, SystemException;
 
-    public void setRollbackOnly() throws IllegalStateException, SystemException;
+    void setRollbackOnly() throws IllegalStateException, SystemException;
 
 }

==================================================
ClientEndpoint.java
index caddaab443..86cfdf78d7 100644
--- a/java/jakarta/transaction/TransactionManager.java
+++ b/java/jakarta/transaction/TransactionManager.java
@@ -17,25 +17,25 @@
 package jakarta.transaction;
 
 public interface TransactionManager {
-    public void begin() throws NotSupportedException, SystemException;
+    void begin() throws NotSupportedException, SystemException;
 
-    public void commit() throws RollbackException, HeuristicMixedException,
+    void commit() throws RollbackException, HeuristicMixedException,
             HeuristicRollbackException, SecurityException,
             IllegalStateException, SystemException;
 
-    public int getStatus() throws SystemException;
+    int getStatus() throws SystemException;
 
-    public Transaction getTransaction() throws SystemException;
+    Transaction getTransaction() throws SystemException;
 
-    public void resume(Transaction tobj) throws InvalidTransactionException,
+    void resume(Transaction tobj) throws InvalidTransactionException,
             IllegalStateException, SystemException;
 
-    public void rollback()
+    void rollback()
             throws IllegalStateException, SecurityException, SystemException;
 
-    public void setRollbackOnly() throws IllegalStateException, SystemException;
+    void setRollbackOnly() throws IllegalStateException, SystemException;
 
-    public void setTransactionTimeout(int seconds) throws SystemException;
+    void setTransactionTimeout(int seconds) throws SystemException;
 
-    public Transaction suspend() throws SystemException;
+    Transaction suspend() throws SystemException;
 }

==================================================
ClientEndpointConfig.java
index 4c44b0716a..fb19ad0cd1 100644
--- a/java/jakarta/websocket/ClientEndpoint.java
+++ b/java/jakarta/websocket/ClientEndpoint.java
@@ -29,6 +29,6 @@ public @interface ClientEndpoint {
     String[] subprotocols() default {};
     Class<? extends Decoder>[] decoders() default {};
     Class<? extends Encoder>[] encoders() default {};
-    public Class<? extends Configurator> configurator()
+    Class<? extends Configurator> configurator()
             default Configurator.class;
 }

==================================================
DefaultClientEndpointConfig.java
index fbf752b82f..e74d4675f9 100644
--- a/java/jakarta/websocket/ClientEndpointConfig.java
+++ b/java/jakarta/websocket/ClientEndpointConfig.java
@@ -30,9 +30,9 @@ public interface ClientEndpointConfig extends EndpointConfig {
 
     SSLContext getSSLContext();
 
-    public Configurator getConfigurator();
+    Configurator getConfigurator();
 
-    public final class Builder {
+    final class Builder {
 
         private static final Configurator DEFAULT_CONFIGURATOR =
                 new Configurator() {};
@@ -121,7 +121,7 @@ public interface ClientEndpointConfig extends EndpointConfig {
     }
 
 
-    public class Configurator {
+    class Configurator {
 
         /**
          * Provides the client with a mechanism to inspect and/or modify the headers

==================================================
HandshakeResponse.java
index cf2980937d..456c0d613f 100644
--- a/java/jakarta/websocket/DefaultClientEndpointConfig.java
+++ b/java/jakarta/websocket/DefaultClientEndpointConfig.java
@@ -79,7 +79,7 @@ final class DefaultClientEndpointConfig implements ClientEndpointConfig {
 
 
     @Override
-    public final Map<String, Object> getUserProperties() {
+    public Map<String, Object> getUserProperties() {
         return userProperties;
     }
 

==================================================
DefaultServerEndpointConfig.java
index 6754020cb5..e5faf9d801 100644
--- a/java/jakarta/websocket/HandshakeResponse.java
+++ b/java/jakarta/websocket/HandshakeResponse.java
@@ -24,7 +24,7 @@ public interface HandshakeResponse {
     /**
      * Name of the WebSocket accept HTTP header.
      */
-    public static final String SEC_WEBSOCKET_ACCEPT = "Sec-WebSocket-Accept";
+    String SEC_WEBSOCKET_ACCEPT = "Sec-WebSocket-Accept";
 
     Map<String,List<String>> getHeaders();
 }

==================================================
HandshakeRequest.java
index e0122f2faa..7dc0a3ebe0 100644
--- a/java/jakarta/websocket/server/DefaultServerEndpointConfig.java
+++ b/java/jakarta/websocket/server/DefaultServerEndpointConfig.java
@@ -79,17 +79,17 @@ final class DefaultServerEndpointConfig implements ServerEndpointConfig {
     }
 
     @Override
-    public final Map<String, Object> getUserProperties() {
+    public Map<String, Object> getUserProperties() {
         return userProperties;
     }
 
     @Override
-    public final List<String> getSubprotocols() {
+    public List<String> getSubprotocols() {
         return subprotocols;
     }
 
     @Override
-    public final List<Extension> getExtensions() {
+    public List<Extension> getExtensions() {
         return extensions;
     }
 }

==================================================
ServerContainer.java
index 2edb554608..0d9c37dfc9 100644
--- a/java/jakarta/websocket/server/HandshakeRequest.java
+++ b/java/jakarta/websocket/server/HandshakeRequest.java
@@ -26,10 +26,10 @@ import java.util.Map;
  */
 public interface HandshakeRequest {
 
-    static final String SEC_WEBSOCKET_KEY = "Sec-WebSocket-Key";
-    static final String SEC_WEBSOCKET_PROTOCOL = "Sec-WebSocket-Protocol";
-    static final String SEC_WEBSOCKET_VERSION = "Sec-WebSocket-Version";
-    static final String SEC_WEBSOCKET_EXTENSIONS= "Sec-WebSocket-Extensions";
+    String SEC_WEBSOCKET_KEY = "Sec-WebSocket-Key";
+    String SEC_WEBSOCKET_PROTOCOL = "Sec-WebSocket-Protocol";
+    String SEC_WEBSOCKET_VERSION = "Sec-WebSocket-Version";
+    String SEC_WEBSOCKET_EXTENSIONS= "Sec-WebSocket-Extensions";
 
     Map<String,List<String>> getHeaders();
 

==================================================
ServerEndpoint.java
index dbeaaea876..5f8b1c0ad5 100644
--- a/java/jakarta/websocket/server/ServerContainer.java
+++ b/java/jakarta/websocket/server/ServerContainer.java
@@ -26,9 +26,9 @@ import jakarta.websocket.WebSocketContainer;
  * Provides the ability to deploy endpoints programmatically.
  */
 public interface ServerContainer extends WebSocketContainer {
-    public abstract void addEndpoint(Class<?> clazz) throws DeploymentException;
+    void addEndpoint(Class<?> clazz) throws DeploymentException;
 
-    public abstract void addEndpoint(ServerEndpointConfig sec) throws DeploymentException;
+    void addEndpoint(ServerEndpointConfig sec) throws DeploymentException;
 
     /**
      * Upgrade the HTTP connection represented by the {@code HttpServletRequest} and {@code HttpServletResponse} to the
@@ -57,6 +57,6 @@ public interface ServerContainer extends WebSocketContainer {
      *
      * @since WebSocket 2.0
      */
-    public void upgradeHttpToWebSocket(Object httpServletRequest, Object httpServletResponse, ServerEndpointConfig sec,
+    void upgradeHttpToWebSocket(Object httpServletRequest, Object httpServletResponse, ServerEndpointConfig sec,
             Map<String,String> pathParameters) throws IOException, DeploymentException;
 }

==================================================
ServerEndpointConfig.java
index 9c7f013070..e8ba09a198 100644
--- a/java/jakarta/websocket/server/ServerEndpoint.java
+++ b/java/jakarta/websocket/server/ServerEndpoint.java
@@ -41,6 +41,6 @@ public @interface ServerEndpoint {
 
     Class<? extends Encoder>[] encoders() default {};
 
-    public Class<? extends ServerEndpointConfig.Configurator> configurator()
+    Class<? extends ServerEndpointConfig.Configurator> configurator()
             default ServerEndpointConfig.Configurator.class;
 }

==================================================
WebServiceRef.java
index 8de6603669..472fc36195 100644
--- a/java/jakarta/websocket/server/ServerEndpointConfig.java
+++ b/java/jakarta/websocket/server/ServerEndpointConfig.java
@@ -50,7 +50,7 @@ public interface ServerEndpointConfig extends EndpointConfig {
     Configurator getConfigurator();
 
 
-    public final class Builder {
+    final class Builder {
 
         public static Builder create(
                 Class<?> endpointClass, String path) {
@@ -149,7 +149,7 @@ public interface ServerEndpointConfig extends EndpointConfig {
     }
 
 
-    public class Configurator {
+    class Configurator {
 
         private static volatile Configurator defaultImpl = null;
         private static final Object defaultImplLock = new Object();

==================================================
WebServiceRefs.java
index d90a037f33..653cbbf9be 100644
--- a/java/jakarta/xml/ws/WebServiceRef.java
+++ b/java/jakarta/xml/ws/WebServiceRef.java
@@ -25,11 +25,11 @@ import java.lang.annotation.Target;
 @Retention(RetentionPolicy.RUNTIME)
 
 public @interface WebServiceRef {
-    public String name() default "";
+    String name() default "";
     @SuppressWarnings("rawtypes") // Can't use Class<?> because API needs to match specification
-    public Class type() default java.lang.Object.class;
+    Class type() default java.lang.Object.class;
     @SuppressWarnings("rawtypes") // Can't use Class<?> because API needs to match specification
-    public Class value() default java.lang.Object.class;
-    public String wsdlLocation() default "";
-    public String mappedName() default "";
+    Class value() default java.lang.Object.class;
+    String wsdlLocation() default "";
+    String mappedName() default "";
 }

==================================================
AccessLog.java
index f15f98a22c..0b69d9e1f2 100644
--- a/java/jakarta/xml/ws/WebServiceRefs.java
+++ b/java/jakarta/xml/ws/WebServiceRefs.java
@@ -25,5 +25,5 @@ import java.lang.annotation.Target;
 @Retention(RetentionPolicy.RUNTIME)
 
 public @interface WebServiceRefs {
-    public WebServiceRef[] value();
+    WebServiceRef[] value();
 }

==================================================
AsyncDispatcher.java
index f96b30825c..046facc265 100644
--- a/java/org/apache/catalina/AccessLog.java
+++ b/java/org/apache/catalina/AccessLog.java
@@ -36,35 +36,35 @@ public interface AccessLog {
      * Name of request attribute used to override the remote address recorded by
      * the AccessLog.
      */
-    public static final String REMOTE_ADDR_ATTRIBUTE =
+    String REMOTE_ADDR_ATTRIBUTE =
             "org.apache.catalina.AccessLog.RemoteAddr";
 
     /**
      * Name of request attribute used to override remote host name recorded by
      * the AccessLog.
      */
-    public static final String REMOTE_HOST_ATTRIBUTE =
+    String REMOTE_HOST_ATTRIBUTE =
             "org.apache.catalina.AccessLog.RemoteHost";
 
     /**
      * Name of request attribute used to override the protocol recorded by the
      * AccessLog.
      */
-    public static final String PROTOCOL_ATTRIBUTE =
+    String PROTOCOL_ATTRIBUTE =
             "org.apache.catalina.AccessLog.Protocol";
 
     /**
      * Name of request attribute used to override the server name recorded by
      * the AccessLog.
      */
-    public static final String SERVER_NAME_ATTRIBUTE =
+    String SERVER_NAME_ATTRIBUTE =
             "org.apache.catalina.AccessLog.ServerName";
 
     /**
      * Name of request attribute used to override the server port recorded by
      * the AccessLog.
      */
-    public static final String SERVER_PORT_ATTRIBUTE =
+    String SERVER_PORT_ATTRIBUTE =
             "org.apache.catalina.AccessLog.ServerPort";
 
 
@@ -79,7 +79,7 @@ public interface AccessLog {
      *                  versions prior to 10, the time unit was
      *                  milliseconds
      */
-    public void log(Request request, Response response, long time);
+    void log(Request request, Response response, long time);
 
     /**
      * Should this valve use request attributes for IP address, hostname,
@@ -98,12 +98,12 @@ public interface AccessLog {
      *                                  to be used, <code>false</code> causes
      *                                  the original values to be used.
      */
-    public void setRequestAttributesEnabled(boolean requestAttributesEnabled);
+    void setRequestAttributesEnabled(boolean requestAttributesEnabled);
 
     /**
      * @see #setRequestAttributesEnabled(boolean)
      * @return <code>true</code> if the attributes will be logged, otherwise
      *         <code>false</code>
      */
-    public boolean getRequestAttributesEnabled();
+    boolean getRequestAttributesEnabled();
 }

==================================================
Authenticator.java
index 52d3373ce8..84271d8519 100644
--- a/java/org/apache/catalina/AsyncDispatcher.java
+++ b/java/org/apache/catalina/AsyncDispatcher.java
@@ -34,6 +34,6 @@ public interface AsyncDispatcher {
      * @throws IOException      if an I/O error occurs while processing the
      *                          dispatch
      */
-    public void dispatch(ServletRequest request, ServletResponse response)
+    void dispatch(ServletRequest request, ServletResponse response)
             throws ServletException, IOException;
 }

==================================================
Cluster.java
index d33b7b8940..1a050d4c16 100644
--- a/java/org/apache/catalina/Authenticator.java
+++ b/java/org/apache/catalina/Authenticator.java
@@ -47,11 +47,11 @@ public interface Authenticator {
      *
      * @exception IOException if an input/output error occurs
      */
-    public boolean authenticate(Request request, HttpServletResponse response)
+    boolean authenticate(Request request, HttpServletResponse response)
             throws IOException;
 
-    public void login(String userName, String password, Request request)
+    void login(String userName, String password, Request request)
             throws ServletException;
 
-    public void logout(Request request);
+    void logout(Request request);
 }

==================================================
Container.java
index e76f1dd7e7..6e216800ba 100644
--- a/java/org/apache/catalina/Cluster.java
+++ b/java/org/apache/catalina/Cluster.java
@@ -36,7 +36,7 @@ public interface Cluster extends Contained {
      *
      * @return The name of the cluster associated with this server
      */
-    public String getClusterName();
+    String getClusterName();
 
 
     /**
@@ -45,7 +45,7 @@ public interface Cluster extends Contained {
      *
      * @param clusterName The clustername to join
      */
-    public void setClusterName(String clusterName);
+    void setClusterName(String clusterName);
 
 
     /**
@@ -57,7 +57,7 @@ public interface Cluster extends Contained {
      *
      * @return The newly created Manager instance
      */
-    public Manager createManager(String name);
+    Manager createManager(String name);
 
 
     /**
@@ -66,14 +66,14 @@ public interface Cluster extends Contained {
      * cluster that this manager is participating in the cluster.
      * @param manager Manager
      */
-    public void registerManager(Manager manager);
+    void registerManager(Manager manager);
 
 
     /**
      * Removes a manager from the cluster
      * @param manager Manager
      */
-    public void removeManager(Manager manager);
+    void removeManager(Manager manager);
 
 
     /**
@@ -81,5 +81,5 @@ public interface Cluster extends Contained {
      * invoked inside the classloading context of this container. Unexpected
      * throwables will be caught and logged.
      */
-    public void backgroundProcess();
+    void backgroundProcess();
 }

==================================================
ContainerListener.java
index 0881a702fb..fd897dc0f9 100644
--- a/java/org/apache/catalina/Container.java
+++ b/java/org/apache/catalina/Container.java
@@ -84,28 +84,28 @@ public interface Container extends Lifecycle {
      * The ContainerEvent event type sent when a child container is added
      * by <code>addChild()</code>.
      */
-    public static final String ADD_CHILD_EVENT = "addChild";
+    String ADD_CHILD_EVENT = "addChild";
 
 
     /**
      * The ContainerEvent event type sent when a valve is added
      * by <code>addValve()</code>, if this Container supports pipelines.
      */
-    public static final String ADD_VALVE_EVENT = "addValve";
+    String ADD_VALVE_EVENT = "addValve";
 
 
     /**
      * The ContainerEvent event type sent when a child container is removed
      * by <code>removeChild()</code>.
      */
-    public static final String REMOVE_CHILD_EVENT = "removeChild";
+    String REMOVE_CHILD_EVENT = "removeChild";
 
 
     /**
      * The ContainerEvent event type sent when a valve is removed
      * by <code>removeValve()</code>, if this Container supports pipelines.
      */
-    public static final String REMOVE_VALVE_EVENT = "removeValve";
+    String REMOVE_VALVE_EVENT = "removeValve";
 
 
     // ------------------------------------------------------------- Properties
@@ -117,14 +117,14 @@ public interface Container extends Lifecycle {
      *         no associated Logger, return the Logger associated with the
      *         parent Container (if any); otherwise return <code>null</code>.
      */
-    public Log getLogger();
+    Log getLogger();
 
 
     /**
      * Return the logger name that the container will use.
      * @return the abbreviated name of this container for logging messages
      */
-    public String getLogName();
+    String getLogName();
 
 
     /**
@@ -132,7 +132,7 @@ public interface Container extends Lifecycle {
      *
      * @return the JMX name associated with this container.
      */
-    public ObjectName getObjectName();
+    ObjectName getObjectName();
 
 
     /**
@@ -141,7 +141,7 @@ public interface Container extends Lifecycle {
      *
      * @return The JMX domain name
      */
-    public String getDomain();
+    String getDomain();
 
 
     /**
@@ -151,7 +151,7 @@ public interface Container extends Lifecycle {
      * @return          A string suitable for appending to the ObjectName
      *
      */
-    public String getMBeanKeyProperties();
+    String getMBeanKeyProperties();
 
 
     /**
@@ -160,7 +160,7 @@ public interface Container extends Lifecycle {
      *
      * @return The Pipeline
      */
-    public Pipeline getPipeline();
+    Pipeline getPipeline();
 
 
     /**
@@ -170,7 +170,7 @@ public interface Container extends Lifecycle {
      *         no associated Cluster, return the Cluster associated with our
      *         parent Container (if any); otherwise return <code>null</code>.
      */
-    public Cluster getCluster();
+    Cluster getCluster();
 
 
     /**
@@ -178,7 +178,7 @@ public interface Container extends Lifecycle {
      *
      * @param cluster the Cluster with which this Container is associated.
      */
-    public void setCluster(Cluster cluster);
+    void setCluster(Cluster cluster);
 
 
     /**
@@ -195,7 +195,7 @@ public interface Container extends Lifecycle {
      *         indicates that background processing will be managed by the
      *         parent.
      */
-    public int getBackgroundProcessorDelay();
+    int getBackgroundProcessorDelay();
 
 
     /**
@@ -205,7 +205,7 @@ public interface Container extends Lifecycle {
      * @param delay The delay in seconds between the invocation of
      *              backgroundProcess methods
      */
-    public void setBackgroundProcessorDelay(int delay);
+    void setBackgroundProcessorDelay(int delay);
 
 
     /**
@@ -215,7 +215,7 @@ public interface Container extends Lifecycle {
      *
      * @return The human readable name of this container.
      */
-    public String getName();
+    String getName();
 
 
     /**
@@ -229,7 +229,7 @@ public interface Container extends Lifecycle {
      *  added to the children of a parent Container (after which the name
      *  may not be changed)
      */
-    public void setName(String name);
+    void setName(String name);
 
 
     /**
@@ -239,7 +239,7 @@ public interface Container extends Lifecycle {
      *         there is one. If there is no defined parent, return
      *         <code>null</code>.
      */
-    public Container getParent();
+    Container getParent();
 
 
     /**
@@ -253,7 +253,7 @@ public interface Container extends Lifecycle {
      * @exception IllegalArgumentException if this Container refuses to become
      *  attached to the specified Container
      */
-    public void setParent(Container container);
+    void setParent(Container container);
 
 
     /**
@@ -263,7 +263,7 @@ public interface Container extends Lifecycle {
      *         {@link #getParent()}.{@link #getParentClassLoader()}. If no
      *         parent has been set, return the system class loader.
      */
-    public ClassLoader getParentClassLoader();
+    ClassLoader getParentClassLoader();
 
 
     /**
@@ -274,7 +274,7 @@ public interface Container extends Lifecycle {
      *
      * @param parent The new parent class loader
      */
-    public void setParentClassLoader(ClassLoader parent);
+    void setParentClassLoader(ClassLoader parent);
 
 
     /**
@@ -284,7 +284,7 @@ public interface Container extends Lifecycle {
      *         Realm associated with the parent Container (if any); otherwise
      *         return <code>null</code>.
      */
-    public Realm getRealm();
+    Realm getRealm();
 
 
     /**
@@ -292,7 +292,7 @@ public interface Container extends Lifecycle {
      *
      * @param realm The newly associated Realm
      */
-    public void setRealm(Realm realm);
+    void setRealm(Realm realm);
 
 
     /**
@@ -302,7 +302,7 @@ public interface Container extends Lifecycle {
      * @param resourceName The resource file name
      * @return the configuration path
      */
-    public static String getConfigPath(Container container, String resourceName) {
+    static String getConfigPath(Container container, String resourceName) {
         StringBuilder result = new StringBuilder();
         Container host = null;
         Container engine = null;
@@ -335,7 +335,7 @@ public interface Container extends Lifecycle {
      * @param container The container to start from
      * @return the Service, or null if not found
      */
-    public static Service getService(Container container) {
+    static Service getService(Container container) {
         while (container != null && !(container instanceof Engine)) {
             container = container.getParent();
         }
@@ -354,7 +354,7 @@ public interface Container extends Lifecycle {
      * invoked inside the classloading context of this container. Unexpected
      * throwables will be caught and logged.
      */
-    public void backgroundProcess();
+    void backgroundProcess();
 
 
     /**
@@ -374,7 +374,7 @@ public interface Container extends Lifecycle {
      * @exception IllegalStateException if this Container does not support
      *  child Containers
      */
-    public void addChild(Container child);
+    void addChild(Container child);
 
 
     /**
@@ -382,7 +382,7 @@ public interface Container extends Lifecycle {
      *
      * @param listener The listener to add
      */
-    public void addContainerListener(ContainerListener listener);
+    void addContainerListener(ContainerListener listener);
 
 
     /**
@@ -390,7 +390,7 @@ public interface Container extends Lifecycle {
      *
      * @param listener The listener to add
      */
-    public void addPropertyChangeListener(PropertyChangeListener listener);
+    void addPropertyChangeListener(PropertyChangeListener listener);
 
 
     /**
@@ -401,7 +401,7 @@ public interface Container extends Lifecycle {
      * @return The child Container with the given name or <code>null</code> if
      *         no such child exists.
      */
-    public Container findChild(String name);
+    Container findChild(String name);
 
 
     /**
@@ -410,7 +410,7 @@ public interface Container extends Lifecycle {
      * @return An array containing all children of this container. If this
      *         Container has no children, a zero-length array is returned.
      */
-    public Container[] findChildren();
+    Container[] findChildren();
 
 
     /**
@@ -420,7 +420,7 @@ public interface Container extends Lifecycle {
      *         Container. If this Container has no registered container
      *         listeners, a zero-length array is returned.
      */
-    public ContainerListener[] findContainerListeners();
+    ContainerListener[] findContainerListeners();
 
 
     /**
@@ -429,7 +429,7 @@ public interface Container extends Lifecycle {
      *
      * @param child Existing child Container to be removed
      */
-    public void removeChild(Container child);
+    void removeChild(Container child);
 
 
     /**
@@ -437,7 +437,7 @@ public interface Container extends Lifecycle {
      *
      * @param listener The listener to remove
      */
-    public void removeContainerListener(ContainerListener listener);
+    void removeContainerListener(ContainerListener listener);
 
 
     /**
@@ -445,7 +445,7 @@ public interface Container extends Lifecycle {
      *
      * @param listener The listener to remove
      */
-    public void removePropertyChangeListener(PropertyChangeListener listener);
+    void removePropertyChangeListener(PropertyChangeListener listener);
 
 
     /**
@@ -456,7 +456,7 @@ public interface Container extends Lifecycle {
      * @param type Event type
      * @param data Event data
      */
-    public void fireContainerEvent(String type, Object data);
+    void fireContainerEvent(String type, Object data);
 
 
     /**
@@ -470,7 +470,7 @@ public interface Container extends Lifecycle {
      * @param   useDefault  Flag that indicates that the request/response should
      *                      be logged in the engine's default access log
      */
-    public void logAccess(Request request, Response response, long time,
+    void logAccess(Request request, Response response, long time,
             boolean useDefault);
 
 
@@ -483,7 +483,7 @@ public interface Container extends Lifecycle {
      * @return The AccessLog to use for a request/response destined for this
      *         container
      */
-    public AccessLog getAccessLog();
+    AccessLog getAccessLog();
 
 
     /**
@@ -494,7 +494,7 @@ public interface Container extends Lifecycle {
      * @return The currently configured number of threads used to start/stop
      *         children associated with this container
      */
-    public int getStartStopThreads();
+    int getStartStopThreads();
 
 
     /**
@@ -503,7 +503,7 @@ public interface Container extends Lifecycle {
      * children to be processed in parallel.
      * @param   startStopThreads    The new number of threads to be used
      */
-    public void setStartStopThreads(int startStopThreads);
+    void setStartStopThreads(int startStopThreads);
 
 
     /**
@@ -511,7 +511,7 @@ public interface Container extends Lifecycle {
      *
      * @return  The location of CATALINA_BASE.
      */
-    public File getCatalinaBase();
+    File getCatalinaBase();
 
 
     /**
@@ -519,5 +519,5 @@ public interface Container extends Lifecycle {
      *
      * @return The location of CATALINA_HOME.
      */
-    public File getCatalinaHome();
+    File getCatalinaHome();
 }

==================================================
ContainerServlet.java
index 9d120ee5ec..ae7275836c 100644
--- a/java/org/apache/catalina/ContainerListener.java
+++ b/java/org/apache/catalina/ContainerListener.java
@@ -32,7 +32,7 @@ public interface ContainerListener {
      *
      * @param event ContainerEvent that has occurred
      */
-    public void containerEvent(ContainerEvent event);
+    void containerEvent(ContainerEvent event);
 
 
 }

==================================================
Context.java
index be999b1d89..3db927d25f 100644
--- a/java/org/apache/catalina/ContainerServlet.java
+++ b/java/org/apache/catalina/ContainerServlet.java
@@ -32,7 +32,7 @@ public interface ContainerServlet {
      *
      * @return The Wrapper with which this Servlet is associated.
      */
-    public Wrapper getWrapper();
+    Wrapper getWrapper();
 
 
     /**
@@ -40,5 +40,5 @@ public interface ContainerServlet {
      *
      * @param wrapper The new associated Wrapper
      */
-    public void setWrapper(Wrapper wrapper);
+    void setWrapper(Wrapper wrapper);
 }

==================================================
DistributedManager.java
index 1d7bc4ab9f..c3a881b385 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -66,22 +66,22 @@ public interface Context extends Container, ContextBind {
     /**
      * Container event for adding a welcome file.
      */
-    public static final String ADD_WELCOME_FILE_EVENT = "addWelcomeFile";
+    String ADD_WELCOME_FILE_EVENT = "addWelcomeFile";
 
     /**
      * Container event for removing a wrapper.
      */
-    public static final String REMOVE_WELCOME_FILE_EVENT = "removeWelcomeFile";
+    String REMOVE_WELCOME_FILE_EVENT = "removeWelcomeFile";
 
     /**
      * Container event for clearing welcome files.
      */
-    public static final String  CLEAR_WELCOME_FILES_EVENT = "clearWelcomeFiles";
+    String  CLEAR_WELCOME_FILES_EVENT = "clearWelcomeFiles";
 
     /**
      * Container event for changing the ID of a session.
      */
-    public static final String CHANGE_SESSION_ID_EVENT = "changeSessionId";
+    String CHANGE_SESSION_ID_EVENT = "changeSessionId";
 
 
     // ------------------------------------------------------------- Properties
@@ -94,7 +94,7 @@ public interface Context extends Container, ContextBind {
      *    "multipart config" to parse multipart/form-data requests,
      *    <code>false</code> otherwise.
      */
-    public boolean getAllowCasualMultipartParsing();
+    boolean getAllowCasualMultipartParsing();
 
 
    /**
@@ -106,7 +106,7 @@ public interface Context extends Container, ContextBind {
      * @param allowCasualMultipartParsing <code>true</code> to allow such
      *        casual parsing, <code>false</code> otherwise.
      */
-    public void setAllowCasualMultipartParsing(boolean allowCasualMultipartParsing);
+    void setAllowCasualMultipartParsing(boolean allowCasualMultipartParsing);
 
 
     /**
@@ -116,7 +116,7 @@ public interface Context extends Container, ContextBind {
      *         this web application in the order they were specified in the web
      *         application deployment descriptor
      */
-    public Object[] getApplicationEventListeners();
+    Object[] getApplicationEventListeners();
 
 
     /**
@@ -126,7 +126,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param listeners The set of instantiated listener objects.
      */
-    public void setApplicationEventListeners(Object listeners[]);
+    void setApplicationEventListeners(Object listeners[]);
 
 
     /**
@@ -136,7 +136,7 @@ public interface Context extends Container, ContextBind {
      *         for this web application in the order they were specified in the
      *         web application deployment descriptor
      */
-    public Object[] getApplicationLifecycleListeners();
+    Object[] getApplicationLifecycleListeners();
 
 
     /**
@@ -146,7 +146,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param listeners The set of instantiated listener objects.
      */
-    public void setApplicationLifecycleListeners(Object listeners[]);
+    void setApplicationLifecycleListeners(Object listeners[]);
 
 
     /**
@@ -159,7 +159,7 @@ public interface Context extends Container, ContextBind {
      *
      * @return The name of the character set to use with the given Locale
      */
-    public String getCharset(Locale locale);
+    String getCharset(Locale locale);
 
 
     /**
@@ -167,7 +167,7 @@ public interface Context extends Container, ContextBind {
      *
      * @return The URL of the XML descriptor for this context
      */
-    public URL getConfigFile();
+    URL getConfigFile();
 
 
     /**
@@ -175,7 +175,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param configFile The URL of the XML descriptor for this context.
      */
-    public void setConfigFile(URL configFile);
+    void setConfigFile(URL configFile);
 
 
     /**
@@ -184,7 +184,7 @@ public interface Context extends Container, ContextBind {
      * @return <code>true</code> if the Context has been correctly configured,
      *         otherwise <code>false</code>
      */
-    public boolean getConfigured();
+    boolean getConfigured();
 
 
     /**
@@ -194,7 +194,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param configured The new correctly configured flag
      */
-    public void setConfigured(boolean configured);
+    void setConfigured(boolean configured);
 
 
     /**
@@ -204,7 +204,7 @@ public interface Context extends Container, ContextBind {
      *         session IDs for this web application, otherwise
      *         <code>false</code>
      */
-    public boolean getCookies();
+    boolean getCookies();
 
 
     /**
@@ -212,7 +212,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param cookies The new flag
      */
-    public void setCookies(boolean cookies);
+    void setCookies(boolean cookies);
 
 
     /**
@@ -222,7 +222,7 @@ public interface Context extends Container, ContextBind {
      * @return  The value of the default session cookie name or null if not
      *          specified
      */
-    public String getSessionCookieName();
+    String getSessionCookieName();
 
 
     /**
@@ -231,7 +231,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param sessionCookieName   The name to use
      */
-    public void setSessionCookieName(String sessionCookieName);
+    void setSessionCookieName(String sessionCookieName);
 
 
     /**
@@ -240,7 +240,7 @@ public interface Context extends Container, ContextBind {
      * @return <code>true</code> if the HttpOnly flag should be set on session
      *         cookies
      */
-    public boolean getUseHttpOnly();
+    boolean getUseHttpOnly();
 
 
     /**
@@ -249,7 +249,7 @@ public interface Context extends Container, ContextBind {
      * @param useHttpOnly   Set to <code>true</code> to use HttpOnly cookies
      *                          for session cookies
      */
-    public void setUseHttpOnly(boolean useHttpOnly);
+    void setUseHttpOnly(boolean useHttpOnly);
 
 
     /**
@@ -259,7 +259,7 @@ public interface Context extends Container, ContextBind {
      * @return  The value of the default session cookie domain or null if not
      *          specified
      */
-    public String getSessionCookieDomain();
+    String getSessionCookieDomain();
 
 
     /**
@@ -268,7 +268,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param sessionCookieDomain   The domain to use
      */
-    public void setSessionCookieDomain(String sessionCookieDomain);
+    void setSessionCookieDomain(String sessionCookieDomain);
 
 
     /**
@@ -278,7 +278,7 @@ public interface Context extends Container, ContextBind {
      * @return  The value of the default session cookie path or null if not
      *          specified
      */
-    public String getSessionCookiePath();
+    String getSessionCookiePath();
 
 
     /**
@@ -287,7 +287,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param sessionCookiePath   The path to use
      */
-    public void setSessionCookiePath(String sessionCookiePath);
+    void setSessionCookiePath(String sessionCookiePath);
 
 
     /**
@@ -298,7 +298,7 @@ public interface Context extends Container, ContextBind {
      * @return <code>true</code> if the slash is added, otherwise
      *         <code>false</code>
      */
-    public boolean getSessionCookiePathUsesTrailingSlash();
+    boolean getSessionCookiePathUsesTrailingSlash();
 
 
     /**
@@ -310,7 +310,7 @@ public interface Context extends Container, ContextBind {
      *                                             slash is should be added,
      *                                             otherwise <code>false</code>
      */
-    public void setSessionCookiePathUsesTrailingSlash(
+    void setSessionCookiePathUsesTrailingSlash(
             boolean sessionCookiePathUsesTrailingSlash);
 
 
@@ -320,7 +320,7 @@ public interface Context extends Container, ContextBind {
      * @return <code>true</code> if cross-contest requests are allowed from this
      *         web applications, otherwise <code>false</code>
      */
-    public boolean getCrossContext();
+    boolean getCrossContext();
 
 
     /**
@@ -328,7 +328,7 @@ public interface Context extends Container, ContextBind {
      *
      * @return the name
      */
-    public String getAltDDName();
+    String getAltDDName();
 
 
     /**
@@ -336,7 +336,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param altDDName The new name
      */
-    public void setAltDDName(String altDDName) ;
+    void setAltDDName(String altDDName) ;
 
 
     /**
@@ -344,7 +344,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param crossContext The new cross contexts flag
      */
-    public void setCrossContext(boolean crossContext);
+    void setCrossContext(boolean crossContext);
 
 
     /**
@@ -352,7 +352,7 @@ public interface Context extends Container, ContextBind {
      *
      * @return The current value of the flag
      */
-    public boolean getDenyUncoveredHttpMethods();
+    boolean getDenyUncoveredHttpMethods();
 
 
     /**
@@ -360,7 +360,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param denyUncoveredHttpMethods The new deny-uncovered-http-methods flag
      */
-    public void setDenyUncoveredHttpMethods(boolean denyUncoveredHttpMethods);
+    void setDenyUncoveredHttpMethods(boolean denyUncoveredHttpMethods);
 
 
     /**
@@ -368,7 +368,7 @@ public interface Context extends Container, ContextBind {
      *
      * @return The display name
      */
-    public String getDisplayName();
+    String getDisplayName();
 
 
     /**
@@ -376,7 +376,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param displayName The new display name
      */
-    public void setDisplayName(String displayName);
+    void setDisplayName(String displayName);
 
 
     /**
@@ -384,7 +384,7 @@ public interface Context extends Container, ContextBind {
      *
      * @return The value of the distributable flag for this web application.
      */
-    public boolean getDistributable();
+    boolean getDistributable();
 
 
     /**
@@ -392,7 +392,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param distributable The new distributable flag
      */
-    public void setDistributable(boolean distributable);
+    void setDistributable(boolean distributable);
 
 
     /**
@@ -401,7 +401,7 @@ public interface Context extends Container, ContextBind {
      * @return An absolute pathname or a relative (to the Host's appBase)
      *         pathname.
      */
-    public String getDocBase();
+    String getDocBase();
 
 
     /**
@@ -411,7 +411,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param docBase The new document root
      */
-    public void setDocBase(String docBase);
+    void setDocBase(String docBase);
 
 
     /**
@@ -419,7 +419,7 @@ public interface Context extends Container, ContextBind {
      *
      * @return The URL encoded (with UTF-8) context path
      */
-    public String getEncodedPath();
+    String getEncodedPath();
 
 
     /**
@@ -428,7 +428,7 @@ public interface Context extends Container, ContextBind {
      * @return {@code true} if annotation parsing is disabled for this web
      *         application
      */
-    public boolean getIgnoreAnnotations();
+    boolean getIgnoreAnnotations();
 
 
     /**
@@ -437,7 +437,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param ignoreAnnotations The boolean on the annotations parsing
      */
-    public void setIgnoreAnnotations(boolean ignoreAnnotations);
+    void setIgnoreAnnotations(boolean ignoreAnnotations);
 
 
     /**
@@ -448,7 +448,7 @@ public interface Context extends Container, ContextBind {
      * @return {@code true} if metadata is complete for this web
      *         application
      */
-    public boolean getMetadataComplete();
+    boolean getMetadataComplete();
 
 
     /**
@@ -457,13 +457,13 @@ public interface Context extends Container, ContextBind {
      *
      * @param metadataComplete The boolean on the metadata complete flag
      */
-    public void setMetadataComplete(boolean metadataComplete);
+    void setMetadataComplete(boolean metadataComplete);
 
 
     /**
      * @return the login configuration descriptor for this web application.
      */
-    public LoginConfig getLoginConfig();
+    LoginConfig getLoginConfig();
 
 
     /**
@@ -471,13 +471,13 @@ public interface Context extends Container, ContextBind {
      *
      * @param config The new login configuration
      */
-    public void setLoginConfig(LoginConfig config);
+    void setLoginConfig(LoginConfig config);
 
 
     /**
      * @return the naming resources associated with this web application.
      */
-    public NamingResourcesImpl getNamingResources();
+    NamingResourcesImpl getNamingResources();
 
 
     /**
@@ -485,13 +485,13 @@ public interface Context extends Container, ContextBind {
      *
      * @param namingResources The new naming resources
      */
-    public void setNamingResources(NamingResourcesImpl namingResources);
+    void setNamingResources(NamingResourcesImpl namingResources);
 
 
     /**
      * @return the context path for this web application.
      */
-    public String getPath();
+    String getPath();
 
 
     /**
@@ -499,14 +499,14 @@ public interface Context extends Container, ContextBind {
      *
      * @param path The new context path
      */
-    public void setPath(String path);
+    void setPath(String path);
 
 
     /**
      * @return the public identifier of the deployment descriptor DTD that is
      * currently being parsed.
      */
-    public String getPublicId();
+    String getPublicId();
 
 
     /**
@@ -515,13 +515,13 @@ public interface Context extends Container, ContextBind {
      *
      * @param publicId The public identifier
      */
-    public void setPublicId(String publicId);
+    void setPublicId(String publicId);
 
 
     /**
      * @return the reloadable flag for this web application.
      */
-    public boolean getReloadable();
+    boolean getReloadable();
 
 
     /**
@@ -529,13 +529,13 @@ public interface Context extends Container, ContextBind {
      *
      * @param reloadable The new reloadable flag
      */
-    public void setReloadable(boolean reloadable);
+    void setReloadable(boolean reloadable);
 
 
     /**
      * @return the override flag for this web application.
      */
-    public boolean getOverride();
+    boolean getOverride();
 
 
     /**
@@ -543,13 +543,13 @@ public interface Context extends Container, ContextBind {
      *
      * @param override The new override flag
      */
-    public void setOverride(boolean override);
+    void setOverride(boolean override);
 
 
     /**
      * @return the privileged flag for this web application.
      */
-    public boolean getPrivileged();
+    boolean getPrivileged();
 
 
     /**
@@ -557,20 +557,20 @@ public interface Context extends Container, ContextBind {
      *
      * @param privileged The new privileged flag
      */
-    public void setPrivileged(boolean privileged);
+    void setPrivileged(boolean privileged);
 
 
     /**
      * @return the Servlet context for which this Context is a facade.
      */
-    public ServletContext getServletContext();
+    ServletContext getServletContext();
 
 
     /**
      * @return the default session timeout (in minutes) for this
      * web application.
      */
-    public int getSessionTimeout();
+    int getSessionTimeout();
 
 
     /**
@@ -579,7 +579,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param timeout The new default session timeout
      */
-    public void setSessionTimeout(int timeout);
+    void setSessionTimeout(int timeout);
 
 
     /**
@@ -589,7 +589,7 @@ public interface Context extends Container, ContextBind {
      * @return <code>true</code> if data will be swallowed (default),
      *    <code>false</code> otherwise.
      */
-    public boolean getSwallowAbortedUploads();
+    boolean getSwallowAbortedUploads();
 
 
     /**
@@ -599,12 +599,12 @@ public interface Context extends Container, ContextBind {
      * @param swallowAbortedUploads <code>false</code> to disable
      *        swallowing, <code>true</code> otherwise (default).
      */
-    public void setSwallowAbortedUploads(boolean swallowAbortedUploads);
+    void setSwallowAbortedUploads(boolean swallowAbortedUploads);
 
     /**
      * @return the value of the swallowOutput flag.
      */
-    public boolean getSwallowOutput();
+    boolean getSwallowOutput();
 
 
     /**
@@ -614,14 +614,14 @@ public interface Context extends Container, ContextBind {
      *
      * @param swallowOutput The new value
      */
-    public void setSwallowOutput(boolean swallowOutput);
+    void setSwallowOutput(boolean swallowOutput);
 
 
     /**
      * @return the Java class name of the Wrapper implementation used
      * for servlets registered in this Context.
      */
-    public String getWrapperClass();
+    String getWrapperClass();
 
 
     /**
@@ -630,7 +630,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param wrapperClass The new wrapper class
      */
-    public void setWrapperClass(String wrapperClass);
+    void setWrapperClass(String wrapperClass);
 
 
     /**
@@ -639,7 +639,7 @@ public interface Context extends Container, ContextBind {
      *
      * @return true if namespace awareness is enabled.
      */
-    public boolean getXmlNamespaceAware();
+    boolean getXmlNamespaceAware();
 
 
     /**
@@ -648,7 +648,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param xmlNamespaceAware true to enable namespace awareness
      */
-    public void setXmlNamespaceAware(boolean xmlNamespaceAware);
+    void setXmlNamespaceAware(boolean xmlNamespaceAware);
 
 
     /**
@@ -657,7 +657,7 @@ public interface Context extends Container, ContextBind {
      *
      * @return true if validation is enabled.
      */
-    public boolean getXmlValidation();
+    boolean getXmlValidation();
 
 
     /**
@@ -666,7 +666,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param xmlValidation true to enable xml validation
      */
-    public void setXmlValidation(boolean xmlValidation);
+    void setXmlValidation(boolean xmlValidation);
 
 
     /**
@@ -675,7 +675,7 @@ public interface Context extends Container, ContextBind {
      *
      * @return true if access to external entities is blocked
      */
-    public boolean getXmlBlockExternal();
+    boolean getXmlBlockExternal();
 
 
     /**
@@ -685,7 +685,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param xmlBlockExternal true to block external entities
      */
-    public void setXmlBlockExternal(boolean xmlBlockExternal);
+    void setXmlBlockExternal(boolean xmlBlockExternal);
 
 
     /**
@@ -694,7 +694,7 @@ public interface Context extends Container, ContextBind {
      *
      * @return true if validation is enabled.
      */
-    public boolean getTldValidation();
+    boolean getTldValidation();
 
 
     /**
@@ -703,7 +703,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param tldValidation true to enable xml validation
      */
-    public void setTldValidation(boolean tldValidation);
+    void setTldValidation(boolean tldValidation);
 
 
     /**
@@ -711,20 +711,20 @@ public interface Context extends Container, ContextBind {
      * context.
      * @return  The Jar Scanner configured for this context.
      */
-    public JarScanner getJarScanner();
+    JarScanner getJarScanner();
 
     /**
      * Set the Jar Scanner to be used to scan for JAR resources for this
      * context.
      * @param jarScanner    The Jar Scanner to be used for this context.
      */
-    public void setJarScanner(JarScanner jarScanner);
+    void setJarScanner(JarScanner jarScanner);
 
     /**
      * @return the {@link Authenticator} that is used by this context. This is
      *         always non-{@code null} for a started Context
      */
-    public Authenticator getAuthenticator();
+    Authenticator getAuthenticator();
 
     /**
      * Set whether or not the effective web.xml for this context should be
@@ -733,7 +733,7 @@ public interface Context extends Container, ContextBind {
      * @param logEffectiveWebXml set to <code>true</code> to log the complete
      *        web.xml that will be used for the webapp
      */
-    public void setLogEffectiveWebXml(boolean logEffectiveWebXml);
+    void setLogEffectiveWebXml(boolean logEffectiveWebXml);
 
     /**
      * Should the effective web.xml for this context be logged on context start?
@@ -741,19 +741,19 @@ public interface Context extends Container, ContextBind {
      * @return true if the reconstructed web.xml that will be used for the
      *   webapp should be logged
      */
-    public boolean getLogEffectiveWebXml();
+    boolean getLogEffectiveWebXml();
 
     /**
      * @return the instance manager associated with this context.
      */
-    public InstanceManager getInstanceManager();
+    InstanceManager getInstanceManager();
 
     /**
      * Set the instance manager associated with this context.
      *
      * @param instanceManager the new instance manager instance
      */
-    public void setInstanceManager(InstanceManager instanceManager);
+    void setInstanceManager(InstanceManager instanceManager);
 
     /**
      * Sets the regular expression that specifies which container provided SCIs
@@ -766,7 +766,7 @@ public interface Context extends Container, ContextBind {
      *                           qualified class name of each container provided
      *                           SCI should be checked
      */
-    public void setContainerSciFilter(String containerSciFilter);
+    void setContainerSciFilter(String containerSciFilter);
 
     /**
      * Obtains the regular expression that specifies which container provided
@@ -778,21 +778,21 @@ public interface Context extends Container, ContextBind {
      * @return The regular expression against which the fully qualified class
      *         name of each container provided SCI will be checked
      */
-    public String getContainerSciFilter();
+    String getContainerSciFilter();
 
 
     /**
      * @return the value of the parallel annotation scanning flag.  If true,
      * it will dispatch scanning to the utility executor.
      */
-    public boolean getParallelAnnotationScanning();
+    boolean getParallelAnnotationScanning();
 
     /**
      * Set the parallel annotation scanning value.
      *
      * @param parallelAnnotationScanning new parallel annotation scanning flag
      */
-    public void setParallelAnnotationScanning(boolean parallelAnnotationScanning);
+    void setParallelAnnotationScanning(boolean parallelAnnotationScanning);
 
 
     // --------------------------------------------------------- Public Methods
@@ -803,7 +803,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param listener Java class name of a listener class
      */
-    public void addApplicationListener(String listener);
+    void addApplicationListener(String listener);
 
 
     /**
@@ -811,7 +811,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param parameter The new application parameter
      */
-    public void addApplicationParameter(ApplicationParameter parameter);
+    void addApplicationParameter(ApplicationParameter parameter);
 
 
     /**
@@ -819,7 +819,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param constraint The security constraint that should be added
      */
-    public void addConstraint(SecurityConstraint constraint);
+    void addConstraint(SecurityConstraint constraint);
 
 
     /**
@@ -827,7 +827,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param errorPage The error page definition to be added
      */
-    public void addErrorPage(ErrorPage errorPage);
+    void addErrorPage(ErrorPage errorPage);
 
 
     /**
@@ -835,7 +835,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param filterDef The filter definition to be added
      */
-    public void addFilterDef(FilterDef filterDef);
+    void addFilterDef(FilterDef filterDef);
 
 
     /**
@@ -843,7 +843,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param filterMap The filter mapping to be added
      */
-    public void addFilterMap(FilterMap filterMap);
+    void addFilterMap(FilterMap filterMap);
 
     /**
      * Add a filter mapping to this Context before the mappings defined in the
@@ -855,7 +855,7 @@ public interface Context extends Container, ContextBind {
      *  does not match an existing filter definition, or the filter mapping
      *  is malformed
      */
-    public void addFilterMapBefore(FilterMap filterMap);
+    void addFilterMapBefore(FilterMap filterMap);
 
 
     /**
@@ -864,7 +864,7 @@ public interface Context extends Container, ContextBind {
      * @param locale locale to map an encoding for
      * @param encoding encoding to be used for a give locale
      */
-    public void addLocaleEncodingMappingParameter(String locale, String encoding);
+    void addLocaleEncodingMappingParameter(String locale, String encoding);
 
 
     /**
@@ -874,7 +874,7 @@ public interface Context extends Container, ContextBind {
      * @param extension Filename extension being mapped
      * @param mimeType Corresponding MIME type
      */
-    public void addMimeMapping(String extension, String mimeType);
+    void addMimeMapping(String extension, String mimeType);
 
 
     /**
@@ -884,7 +884,7 @@ public interface Context extends Container, ContextBind {
      * @param name Name of the new parameter
      * @param value Value of the new  parameter
      */
-    public void addParameter(String name, String value);
+    void addParameter(String name, String value);
 
 
     /**
@@ -893,7 +893,7 @@ public interface Context extends Container, ContextBind {
      * @param role Security role used in the application
      * @param link Actual security role to check for
      */
-    public void addRoleMapping(String role, String link);
+    void addRoleMapping(String role, String link);
 
 
     /**
@@ -901,7 +901,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param role New security role
      */
-    public void addSecurityRole(String role);
+    void addSecurityRole(String role);
 
 
     /**
@@ -911,7 +911,7 @@ public interface Context extends Container, ContextBind {
      * @param pattern URL pattern to be mapped
      * @param name Name of the corresponding servlet to execute
      */
-    public default void addServletMappingDecoded(String pattern, String name) {
+    default void addServletMappingDecoded(String pattern, String name) {
         addServletMappingDecoded(pattern, name, false);
     }
 
@@ -925,7 +925,7 @@ public interface Context extends Container, ContextBind {
      * @param jspWildcard true if name identifies the JspServlet
      * and pattern contains a wildcard; false otherwise
      */
-    public void addServletMappingDecoded(String pattern, String name,
+    void addServletMappingDecoded(String pattern, String name,
             boolean jspWildcard);
 
 
@@ -935,7 +935,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param name Path to the resource, relative to docBase
      */
-    public void addWatchedResource(String name);
+    void addWatchedResource(String name);
 
 
     /**
@@ -943,7 +943,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param name New welcome file name
      */
-    public void addWelcomeFile(String name);
+    void addWelcomeFile(String name);
 
 
     /**
@@ -952,7 +952,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param listener Java class name of a LifecycleListener class
      */
-    public void addWrapperLifecycle(String listener);
+    void addWrapperLifecycle(String listener);
 
 
     /**
@@ -961,7 +961,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param listener Java class name of a ContainerListener class
      */
-    public void addWrapperListener(String listener);
+    void addWrapperListener(String listener);
 
 
     /**
@@ -970,7 +970,7 @@ public interface Context extends Container, ContextBind {
      * configuration with custom Context implementations.
      * @return the instance manager
      */
-    public InstanceManager createInstanceManager();
+    InstanceManager createInstanceManager();
 
     /**
      * Factory method to create and return a new Wrapper instance, of
@@ -980,27 +980,27 @@ public interface Context extends Container, ContextBind {
      *
      * @return a newly created wrapper instance that is used to wrap a Servlet
      */
-    public Wrapper createWrapper();
+    Wrapper createWrapper();
 
 
     /**
      * @return the set of application listener class names configured
      * for this application.
      */
-    public String[] findApplicationListeners();
+    String[] findApplicationListeners();
 
 
     /**
      * @return the set of application parameters for this application.
      */
-    public ApplicationParameter[] findApplicationParameters();
+    ApplicationParameter[] findApplicationParameters();
 
 
     /**
      * @return the set of security constraints for this web application.
      * If there are none, a zero-length array is returned.
      */
-    public SecurityConstraint[] findConstraints();
+    SecurityConstraint[] findConstraints();
 
 
     /**
@@ -1009,7 +1009,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param errorCode Error code to look up
      */
-    public ErrorPage findErrorPage(int errorCode);
+    ErrorPage findErrorPage(int errorCode);
 
 
     /**
@@ -1023,14 +1023,14 @@ public interface Context extends Container, ContextBind {
      * @return the error page entry for the specified Java exception type,
      *         if any; otherwise return {@code null}.
      */
-    public ErrorPage findErrorPage(Throwable throwable);
+    ErrorPage findErrorPage(Throwable throwable);
 
 
     /**
      * @return the set of defined error pages for all specified error codes
      * and exception types.
      */
-    public ErrorPage[] findErrorPages();
+    ErrorPage[] findErrorPages();
 
 
     /**
@@ -1039,19 +1039,19 @@ public interface Context extends Container, ContextBind {
      *
      * @param filterName Filter name to look up
      */
-    public FilterDef findFilterDef(String filterName);
+    FilterDef findFilterDef(String filterName);
 
 
     /**
      * @return the set of defined filters for this Context.
      */
-    public FilterDef[] findFilterDefs();
+    FilterDef[] findFilterDefs();
 
 
     /**
      * @return the set of filter mappings for this Context.
      */
-    public FilterMap[] findFilterMaps();
+    FilterMap[] findFilterMaps();
 
 
     /**
@@ -1060,14 +1060,14 @@ public interface Context extends Container, ContextBind {
      *
      * @param extension Extension to map to a MIME type
      */
-    public String findMimeMapping(String extension);
+    String findMimeMapping(String extension);
 
 
     /**
      * @return the extensions for which MIME mappings are defined.  If there
      * are none, a zero-length array is returned.
      */
-    public String[] findMimeMappings();
+    String[] findMimeMappings();
 
 
     /**
@@ -1076,7 +1076,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param name Name of the parameter to return
      */
-    public String findParameter(String name);
+    String findParameter(String name);
 
 
     /**
@@ -1084,7 +1084,7 @@ public interface Context extends Container, ContextBind {
      * for this Context.  If no parameters are defined, a zero-length
      * array is returned.
      */
-    public String[] findParameters();
+    String[] findParameters();
 
 
     /**
@@ -1095,7 +1095,7 @@ public interface Context extends Container, ContextBind {
      * @param role Security role to map
      * @return The role name that was mapped to the specified role
      */
-    public String findRoleMapping(String role);
+    String findRoleMapping(String role);
 
 
     /**
@@ -1104,14 +1104,14 @@ public interface Context extends Container, ContextBind {
      *
      * @param role Security role to verify
      */
-    public boolean findSecurityRole(String role);
+    boolean findSecurityRole(String role);
 
 
     /**
      * @return the security roles defined for this application.  If none
      * have been defined, a zero-length array is returned.
      */
-    public String[] findSecurityRoles();
+    String[] findSecurityRoles();
 
 
     /**
@@ -1120,20 +1120,20 @@ public interface Context extends Container, ContextBind {
      *
      * @param pattern Pattern for which a mapping is requested
      */
-    public String findServletMapping(String pattern);
+    String findServletMapping(String pattern);
 
 
     /**
      * @return the patterns of all defined servlet mappings for this
      * Context.  If no mappings are defined, a zero-length array is returned.
      */
-    public String[] findServletMappings();
+    String[] findServletMappings();
 
 
     /**
      * @return the associated ThreadBindingListener.
      */
-    public ThreadBindingListener getThreadBindingListener();
+    ThreadBindingListener getThreadBindingListener();
 
 
     /**
@@ -1142,14 +1142,14 @@ public interface Context extends Container, ContextBind {
      * @param threadBindingListener Set the listener that will receive
      *       notifications when entering and exiting the application scope
      */
-    public void setThreadBindingListener(ThreadBindingListener threadBindingListener);
+    void setThreadBindingListener(ThreadBindingListener threadBindingListener);
 
 
     /**
      * @return the set of watched resources for this Context. If none are
      * defined, a zero length array will be returned.
      */
-    public String[] findWatchedResources();
+    String[] findWatchedResources();
 
 
     /**
@@ -1158,28 +1158,28 @@ public interface Context extends Container, ContextBind {
      *
      * @param name Welcome file to verify
      */
-    public boolean findWelcomeFile(String name);
+    boolean findWelcomeFile(String name);
 
 
     /**
      * @return the set of welcome files defined for this Context.  If none are
      * defined, a zero-length array is returned.
      */
-    public String[] findWelcomeFiles();
+    String[] findWelcomeFiles();
 
 
     /**
      * @return the set of LifecycleListener classes that will be added to
      * newly created Wrappers automatically.
      */
-    public String[] findWrapperLifecycles();
+    String[] findWrapperLifecycles();
 
 
     /**
      * @return the set of ContainerListener classes that will be added to
      * newly created Wrappers automatically.
      */
-    public String[] findWrapperListeners();
+    String[] findWrapperListeners();
 
 
     /**
@@ -1190,7 +1190,7 @@ public interface Context extends Container, ContextBind {
      * @return <code>true</code> if the listeners fire successfully, else
      *         <code>false</code>
      */
-    public boolean fireRequestInitEvent(ServletRequest request);
+    boolean fireRequestInitEvent(ServletRequest request);
 
     /**
      * Notify all {@link jakarta.servlet.ServletRequestListener}s that a request
@@ -1200,7 +1200,7 @@ public interface Context extends Container, ContextBind {
      * @return <code>true</code> if the listeners fire successfully, else
      *         <code>false</code>
      */
-    public boolean fireRequestDestroyEvent(ServletRequest request);
+    boolean fireRequestDestroyEvent(ServletRequest request);
 
     /**
      * Reload this web application, if reloading is supported.
@@ -1208,7 +1208,7 @@ public interface Context extends Container, ContextBind {
      * @exception IllegalStateException if the <code>reloadable</code>
      *  property is set to <code>false</code>.
      */
-    public void reload();
+    void reload();
 
 
     /**
@@ -1217,7 +1217,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param listener Java class name of the listener to be removed
      */
-    public void removeApplicationListener(String listener);
+    void removeApplicationListener(String listener);
 
 
     /**
@@ -1226,7 +1226,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param name Name of the application parameter to remove
      */
-    public void removeApplicationParameter(String name);
+    void removeApplicationParameter(String name);
 
 
     /**
@@ -1234,7 +1234,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param constraint Constraint to be removed
      */
-    public void removeConstraint(SecurityConstraint constraint);
+    void removeConstraint(SecurityConstraint constraint);
 
 
     /**
@@ -1243,7 +1243,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param errorPage The error page definition to be removed
      */
-    public void removeErrorPage(ErrorPage errorPage);
+    void removeErrorPage(ErrorPage errorPage);
 
 
     /**
@@ -1252,7 +1252,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param filterDef Filter definition to be removed
      */
-    public void removeFilterDef(FilterDef filterDef);
+    void removeFilterDef(FilterDef filterDef);
 
 
     /**
@@ -1260,7 +1260,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param filterMap The filter mapping to be removed
      */
-    public void removeFilterMap(FilterMap filterMap);
+    void removeFilterMap(FilterMap filterMap);
 
 
     /**
@@ -1269,7 +1269,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param extension Extension to remove the mapping for
      */
-    public void removeMimeMapping(String extension);
+    void removeMimeMapping(String extension);
 
 
     /**
@@ -1278,7 +1278,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param name Name of the parameter to remove
      */
-    public void removeParameter(String name);
+    void removeParameter(String name);
 
 
     /**
@@ -1286,7 +1286,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param role Security role (as used in the application) to remove
      */
-    public void removeRoleMapping(String role);
+    void removeRoleMapping(String role);
 
 
     /**
@@ -1294,7 +1294,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param role Security role to remove
      */
-    public void removeSecurityRole(String role);
+    void removeSecurityRole(String role);
 
 
     /**
@@ -1303,7 +1303,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param pattern URL pattern of the mapping to remove
      */
-    public void removeServletMapping(String pattern);
+    void removeServletMapping(String pattern);
 
 
     /**
@@ -1312,7 +1312,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param name Name of the watched resource to be removed
      */
-    public void removeWatchedResource(String name);
+    void removeWatchedResource(String name);
 
 
     /**
@@ -1321,7 +1321,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param name Name of the welcome file to be removed
      */
-    public void removeWelcomeFile(String name);
+    void removeWelcomeFile(String name);
 
 
     /**
@@ -1330,7 +1330,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param listener Class name of a LifecycleListener class to be removed
      */
-    public void removeWrapperLifecycle(String listener);
+    void removeWrapperLifecycle(String listener);
 
 
     /**
@@ -1339,7 +1339,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param listener Class name of a ContainerListener class to be removed
      */
-    public void removeWrapperListener(String listener);
+    void removeWrapperListener(String listener);
 
 
     /**
@@ -1348,14 +1348,14 @@ public interface Context extends Container, ContextBind {
      *
      * @param path The path to the desired resource
      */
-    public String getRealPath(String path);
+    String getRealPath(String path);
 
 
     /**
      * @return the effective major version of the Servlet spec used by this
      * context.
      */
-    public int getEffectiveMajorVersion();
+    int getEffectiveMajorVersion();
 
 
     /**
@@ -1364,14 +1364,14 @@ public interface Context extends Container, ContextBind {
      *
      * @param major Set the version number
      */
-    public void setEffectiveMajorVersion(int major);
+    void setEffectiveMajorVersion(int major);
 
 
     /**
      * @return the effective minor version of the Servlet spec used by this
      * context.
      */
-    public int getEffectiveMinorVersion();
+    int getEffectiveMinorVersion();
 
 
     /**
@@ -1380,14 +1380,14 @@ public interface Context extends Container, ContextBind {
      *
      * @param minor Set the version number
      */
-    public void setEffectiveMinorVersion(int minor);
+    void setEffectiveMinorVersion(int minor);
 
 
     /**
      * @return the JSP configuration for this context.
      * Will be null if there is no JSP configuration.
      */
-    public JspConfigDescriptor getJspConfigDescriptor();
+    JspConfigDescriptor getJspConfigDescriptor();
 
 
     /**
@@ -1396,7 +1396,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param descriptor the new JSP configuration
      */
-    public void setJspConfigDescriptor(JspConfigDescriptor descriptor);
+    void setJspConfigDescriptor(JspConfigDescriptor descriptor);
 
 
     /**
@@ -1406,7 +1406,7 @@ public interface Context extends Container, ContextBind {
      * @param classes   The classes in which the initializer expressed an
      *                  interest
      */
-    public void addServletContainerInitializer(
+    void addServletContainerInitializer(
             ServletContainerInitializer sci, Set<Class<?>> classes);
 
 
@@ -1415,7 +1415,7 @@ public interface Context extends Container, ContextBind {
      *
      * @return <code>true</code> if the context has been paused
      */
-    public boolean getPaused();
+    boolean getPaused();
 
 
     /**
@@ -1444,14 +1444,14 @@ public interface Context extends Container, ContextBind {
      *
      * @param resourceOnlyServlets The Servlet names comma separated list
      */
-    public void setResourceOnlyServlets(String resourceOnlyServlets);
+    void setResourceOnlyServlets(String resourceOnlyServlets);
 
     /**
      * Obtains the list of Servlets that expect a resource to be present.
      *
      * @return  A comma separated list of Servlet names as used in web.xml
      */
-    public String getResourceOnlyServlets();
+    String getResourceOnlyServlets();
 
     /**
      * Checks the named Servlet to see if it expects a resource to be present.
@@ -1460,13 +1460,13 @@ public interface Context extends Container, ContextBind {
      * @return              <code>true</code> if the Servlet expects a resource,
      *                      otherwise <code>false</code>
      */
-    public boolean isResourceOnlyServlet(String servletName);
+    boolean isResourceOnlyServlet(String servletName);
 
     /**
      * @return the base name to use for WARs, directories or context.xml files
      * for this context.
      */
-    public String getBaseName();
+    String getBaseName();
 
     /**
      * Set the version of this web application - used to differentiate
@@ -1476,14 +1476,14 @@ public interface Context extends Container, ContextBind {
      * @param webappVersion The webapp version associated with the context,
      *    which should be unique
      */
-    public void setWebappVersion(String webappVersion);
+    void setWebappVersion(String webappVersion);
 
     /**
      * @return The version of this web application, used to differentiate
      * different versions of the same web application when using parallel
      * deployment. If not specified, defaults to the empty string.
      */
-    public String getWebappVersion();
+    String getWebappVersion();
 
     /**
      * Configure whether or not requests listeners will be fired on forwards for
@@ -1491,13 +1491,13 @@ public interface Context extends Container, ContextBind {
      *
      * @param enable <code>true</code> to fire request listeners when forwarding
      */
-    public void setFireRequestListenersOnForwards(boolean enable);
+    void setFireRequestListenersOnForwards(boolean enable);
 
     /**
      * @return whether or not requests listeners will be fired on forwards for
      * this Context.
      */
-    public boolean getFireRequestListenersOnForwards();
+    boolean getFireRequestListenersOnForwards();
 
     /**
      * Configures if a user presents authentication credentials, whether the
@@ -1507,14 +1507,14 @@ public interface Context extends Container, ContextBind {
      * @param enable <code>true</code> to perform authentication even outside
      *    security constraints
      */
-    public void setPreemptiveAuthentication(boolean enable);
+    void setPreemptiveAuthentication(boolean enable);
 
     /**
      * @return if a user presents authentication credentials, will the
      * context will process them when the request is for a non-protected
      * resource.
      */
-    public boolean getPreemptiveAuthentication();
+    boolean getPreemptiveAuthentication();
 
     /**
      * Configures if a response body is included when a redirect response is
@@ -1522,43 +1522,43 @@ public interface Context extends Container, ContextBind {
      *
      * @param enable <code>true</code> to send a response body for redirects
      */
-    public void setSendRedirectBody(boolean enable);
+    void setSendRedirectBody(boolean enable);
 
     /**
      * @return if the context is configured to include a response body as
      * part of a redirect response.
      */
-    public boolean getSendRedirectBody();
+    boolean getSendRedirectBody();
 
     /**
      * @return the Loader with which this Context is associated.
      */
-    public Loader getLoader();
+    Loader getLoader();
 
     /**
      * Set the Loader with which this Context is associated.
      *
      * @param loader The newly associated loader
      */
-    public void setLoader(Loader loader);
+    void setLoader(Loader loader);
 
     /**
      * @return the Resources with which this Context is associated.
      */
-    public WebResourceRoot getResources();
+    WebResourceRoot getResources();
 
     /**
      * Set the Resources object with which this Context is associated.
      *
      * @param resources The newly associated Resources
      */
-    public void setResources(WebResourceRoot resources);
+    void setResources(WebResourceRoot resources);
 
     /**
      * @return the Manager with which this Context is associated.  If there is
      * no associated Manager, return <code>null</code>.
      */
-    public Manager getManager();
+    Manager getManager();
 
 
     /**
@@ -1566,7 +1566,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param manager The newly associated Manager
      */
-    public void setManager(Manager manager);
+    void setManager(Manager manager);
 
     /**
      * Sets the flag that indicates if /WEB-INF/classes should be treated like
@@ -1575,14 +1575,14 @@ public interface Context extends Container, ContextBind {
      *
      * @param addWebinfClassesResources The new value for the flag
      */
-    public void setAddWebinfClassesResources(boolean addWebinfClassesResources);
+    void setAddWebinfClassesResources(boolean addWebinfClassesResources);
 
     /**
      * @return the flag that indicates if /WEB-INF/classes should be treated like
      * an exploded JAR and JAR resources made available as if they were in a
      * JAR.
      */
-    public boolean getAddWebinfClassesResources();
+    boolean getAddWebinfClassesResources();
 
     /**
      * Add a post construct method definition for the given class, if there is
@@ -1597,7 +1597,7 @@ public interface Context extends Container, ContextBind {
      *             <code>NULL</code>; if there is already post construct method
      *             definition for the given class
      */
-    public void addPostConstructMethod(String clazz, String method);
+    void addPostConstructMethod(String clazz, String method);
 
     /**
      * Add a pre destroy method definition for the given class, if there is an
@@ -1612,7 +1612,7 @@ public interface Context extends Container, ContextBind {
      *             <code>NULL</code>; if there is already pre destroy method
      *             definition for the given class
      */
-    public void addPreDestroyMethod(String clazz, String method);
+    void addPreDestroyMethod(String clazz, String method);
 
     /**
      * Removes the post construct method definition for the given class, if it
@@ -1621,7 +1621,7 @@ public interface Context extends Container, ContextBind {
      * @param clazz
      *            Fully qualified class name
      */
-    public void removePostConstructMethod(String clazz);
+    void removePostConstructMethod(String clazz);
 
     /**
      * Removes the pre destroy method definition for the given class, if it
@@ -1630,7 +1630,7 @@ public interface Context extends Container, ContextBind {
      * @param clazz
      *            Fully qualified class name
      */
-    public void removePreDestroyMethod(String clazz);
+    void removePreDestroyMethod(String clazz);
 
     /**
      * Returns the method name that is specified as post construct method for
@@ -1644,7 +1644,7 @@ public interface Context extends Container, ContextBind {
      *         the given class, if it exists; otherwise <code>NULL</code> will
      *         be returned.
      */
-    public String findPostConstructMethod(String clazz);
+    String findPostConstructMethod(String clazz);
 
     /**
      * Returns the method name that is specified as pre destroy method for the
@@ -1657,7 +1657,7 @@ public interface Context extends Container, ContextBind {
      *         given class, if it exists; otherwise <code>NULL</code> will be
      *         returned.
      */
-    public String findPreDestroyMethod(String clazz);
+    String findPreDestroyMethod(String clazz);
 
     /**
      * Returns a map with keys - fully qualified class names of the classes that
@@ -1668,7 +1668,7 @@ public interface Context extends Container, ContextBind {
      *         have post construct methods and the values are the corresponding
      *         method names.
      */
-    public Map<String, String> findPostConstructMethods();
+    Map<String, String> findPostConstructMethods();
 
     /**
      * Returns a map with keys - fully qualified class names of the classes that
@@ -1679,13 +1679,13 @@ public interface Context extends Container, ContextBind {
      *         have pre destroy methods and the values are the corresponding
      *         method names.
      */
-    public Map<String, String> findPreDestroyMethods();
+    Map<String, String> findPreDestroyMethods();
 
     /**
      * @return  the token necessary for operations on the associated JNDI naming
      * context.
      */
-    public Object getNamingToken();
+    Object getNamingToken();
 
     /**
      * Sets the {@link CookieProcessor} that will be used to process cookies
@@ -1696,13 +1696,13 @@ public interface Context extends Container, ContextBind {
      * @throws IllegalArgumentException If a {@code null} CookieProcessor is
      *         specified
      */
-    public void setCookieProcessor(CookieProcessor cookieProcessor);
+    void setCookieProcessor(CookieProcessor cookieProcessor);
 
     /**
      * @return the {@link CookieProcessor} that will be used to process cookies
      * for this Context.
      */
-    public CookieProcessor getCookieProcessor();
+    CookieProcessor getCookieProcessor();
 
     /**
      * When a client provides the ID for a new session, should that ID be
@@ -1721,7 +1721,7 @@ public interface Context extends Container, ContextBind {
      * @param validateClientProvidedNewSessionId
      *          {@code true} if validation should be applied
      */
-    public void setValidateClientProvidedNewSessionId(boolean validateClientProvidedNewSessionId);
+    void setValidateClientProvidedNewSessionId(boolean validateClientProvidedNewSessionId);
 
     /**
      * Will client provided session IDs be validated (see {@link
@@ -1730,7 +1730,7 @@ public interface Context extends Container, ContextBind {
      * @return {@code true} if validation will be applied. Otherwise, {@code
      *         false}
      */
-    public boolean getValidateClientProvidedNewSessionId();
+    boolean getValidateClientProvidedNewSessionId();
 
     /**
      * If enabled, requests for a web application context root will be
@@ -1740,7 +1740,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param mapperContextRootRedirectEnabled Should the redirects be enabled?
      */
-    public void setMapperContextRootRedirectEnabled(boolean mapperContextRootRedirectEnabled);
+    void setMapperContextRootRedirectEnabled(boolean mapperContextRootRedirectEnabled);
 
     /**
      * Determines if requests for a web application context root will be
@@ -1751,7 +1751,7 @@ public interface Context extends Container, ContextBind {
      * @return {@code true} if the Mapper level redirect is enabled for this
      *         Context.
      */
-    public boolean getMapperContextRootRedirectEnabled();
+    boolean getMapperContextRootRedirectEnabled();
 
     /**
      * If enabled, requests for a directory will be redirected (adding a
@@ -1760,7 +1760,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param mapperDirectoryRedirectEnabled Should the redirects be enabled?
      */
-    public void setMapperDirectoryRedirectEnabled(boolean mapperDirectoryRedirectEnabled);
+    void setMapperDirectoryRedirectEnabled(boolean mapperDirectoryRedirectEnabled);
 
     /**
      * Determines if requests for a directory will be redirected (adding a
@@ -1770,7 +1770,7 @@ public interface Context extends Container, ContextBind {
      * @return {@code true} if the Mapper level redirect is enabled for this
      *         Context.
      */
-    public boolean getMapperDirectoryRedirectEnabled();
+    boolean getMapperDirectoryRedirectEnabled();
 
     /**
      * Controls whether HTTP 1.1 and later location headers generated by a call
@@ -1790,7 +1790,7 @@ public interface Context extends Container, ContextBind {
      * @param useRelativeRedirects {@code true} to use relative redirects and
      *                             {@code false} to use absolute redirects
      */
-    public void setUseRelativeRedirects(boolean useRelativeRedirects);
+    void setUseRelativeRedirects(boolean useRelativeRedirects);
 
     /**
      * Will HTTP 1.1 and later location headers generated by a call to
@@ -1802,7 +1802,7 @@ public interface Context extends Container, ContextBind {
      *
      * @see #setUseRelativeRedirects(boolean)
      */
-    public boolean getUseRelativeRedirects();
+    boolean getUseRelativeRedirects();
 
     /**
      * Are paths used in calls to obtain a request dispatcher expected to be
@@ -1813,7 +1813,7 @@ public interface Context extends Container, ContextBind {
      * @param dispatchersUseEncodedPaths {@code true} to use encoded paths,
      *        otherwise {@code false}
      */
-    public void setDispatchersUseEncodedPaths(boolean dispatchersUseEncodedPaths);
+    void setDispatchersUseEncodedPaths(boolean dispatchersUseEncodedPaths);
 
     /**
      * Are paths used in calls to obtain a request dispatcher expected to be
@@ -1824,35 +1824,35 @@ public interface Context extends Container, ContextBind {
      * @return {@code true} if encoded paths will be used, otherwise
      *         {@code false}
      */
-    public boolean getDispatchersUseEncodedPaths();
+    boolean getDispatchersUseEncodedPaths();
 
     /**
      * Set the default request body encoding for this web application.
      *
      * @param encoding The default encoding
      */
-    public void setRequestCharacterEncoding(String encoding);
+    void setRequestCharacterEncoding(String encoding);
 
     /**
      * Get the default request body encoding for this web application.
      *
      * @return The default request body encoding
      */
-    public String getRequestCharacterEncoding();
+    String getRequestCharacterEncoding();
 
     /**
      * Set the default response body encoding for this web application.
      *
      * @param encoding The default encoding
      */
-    public void setResponseCharacterEncoding(String encoding);
+    void setResponseCharacterEncoding(String encoding);
 
     /**
      * Get the default response body encoding for this web application.
      *
      * @return The default response body encoding
      */
-    public String getResponseCharacterEncoding();
+    String getResponseCharacterEncoding();
 
     /**
      * Configure if, when returning a context path from {@link
@@ -1861,7 +1861,7 @@ public interface Context extends Container, ContextBind {
      *
      * @param allowMultipleLeadingForwardSlashInPath The new value for the flag
      */
-    public void setAllowMultipleLeadingForwardSlashInPath(
+    void setAllowMultipleLeadingForwardSlashInPath(
             boolean allowMultipleLeadingForwardSlashInPath);
 
     /**
@@ -1872,13 +1872,13 @@ public interface Context extends Container, ContextBind {
      * @return <code>true</code> if multiple leading '/' characters are allowed,
      *         otherwise <code>false</code>
      */
-    public boolean getAllowMultipleLeadingForwardSlashInPath();
+    boolean getAllowMultipleLeadingForwardSlashInPath();
 
 
-    public void incrementInProgressAsyncCount();
+    void incrementInProgressAsyncCount();
 
 
-    public void decrementInProgressAsyncCount();
+    void decrementInProgressAsyncCount();
 
 
     /**
@@ -1889,7 +1889,7 @@ public interface Context extends Container, ContextBind {
      * @param createUploadTargets {@code true} if Tomcat should attempt to
      *          create the upload target, otherwise {@code false}
      */
-    public void setCreateUploadTargets(boolean createUploadTargets);
+    void setCreateUploadTargets(boolean createUploadTargets);
 
 
     /**
@@ -1900,7 +1900,7 @@ public interface Context extends Container, ContextBind {
      * @return {@code true} if Tomcat will attempt to create an upload target
      *         otherwise {@code false}
      */
-    public boolean getCreateUploadTargets();
+    boolean getCreateUploadTargets();
 
 
     /**
@@ -1912,14 +1912,14 @@ public interface Context extends Container, ContextBind {
      * else the default value will be <code>false</code>.
      * @return the flag value
      */
-    public boolean getAlwaysAccessSession();
+    boolean getAlwaysAccessSession();
 
 
     /**
      * Set the session access behavior.
      * @param alwaysAccessSession the new flag value
      */
-    public void setAlwaysAccessSession(boolean alwaysAccessSession);
+    void setAlwaysAccessSession(boolean alwaysAccessSession);
 
 
     /**
@@ -1934,7 +1934,7 @@ public interface Context extends Container, ContextBind {
      * else the default value will be <code>false</code>.
      * @return the flag value
      */
-    public boolean getContextGetResourceRequiresSlash();
+    boolean getContextGetResourceRequiresSlash();
 
 
     /**
@@ -1943,7 +1943,7 @@ public interface Context extends Container, ContextBind {
      * a leading &quot;/&quot;.
      * @param contextGetResourceRequiresSlash the new flag value
      */
-    public void setContextGetResourceRequiresSlash(boolean contextGetResourceRequiresSlash);
+    void setContextGetResourceRequiresSlash(boolean contextGetResourceRequiresSlash);
 
 
     /**
@@ -1955,12 +1955,12 @@ public interface Context extends Container, ContextBind {
      * else the default value will be <code>false</code>.
      * @return the flag value
      */
-    public boolean getDispatcherWrapsSameObject();
+    boolean getDispatcherWrapsSameObject();
 
 
     /**
      * Allow disabling the object wrap check in the request dispatcher.
      * @param dispatcherWrapsSameObject the new flag value
      */
-    public void setDispatcherWrapsSameObject(boolean dispatcherWrapsSameObject);
+    void setDispatcherWrapsSameObject(boolean dispatcherWrapsSameObject);
 }

==================================================
Engine.java
index dbe015a52a..2ac5fd4e59 100644
--- a/java/org/apache/catalina/DistributedManager.java
+++ b/java/org/apache/catalina/DistributedManager.java
@@ -39,12 +39,12 @@ public interface DistributedManager {
      *
      * @return  The total session count across the cluster.
      */
-    public int getActiveSessionsFull();
+    int getActiveSessionsFull();
 
     /**
      * Returns the list of all sessions IDS (primary, backup and proxy).
      *
      * @return  The complete set of sessions IDs across the cluster.
      */
-    public Set<String> getSessionIdsFull();
+    Set<String> getSessionIdsFull();
 }

==================================================
Executor.java
index 66b4411411..201e93ccff 100644
--- a/java/org/apache/catalina/Engine.java
+++ b/java/org/apache/catalina/Engine.java
@@ -45,7 +45,7 @@ public interface Engine extends Container {
     /**
      * @return the default host name for this Engine.
      */
-    public String getDefaultHost();
+    String getDefaultHost();
 
 
     /**
@@ -53,13 +53,13 @@ public interface Engine extends Container {
      *
      * @param defaultHost The new default host
      */
-    public void setDefaultHost(String defaultHost);
+    void setDefaultHost(String defaultHost);
 
 
     /**
      * @return the JvmRouteId for this engine.
      */
-    public String getJvmRoute();
+    String getJvmRoute();
 
 
     /**
@@ -68,13 +68,13 @@ public interface Engine extends Container {
      * @param jvmRouteId the (new) JVM Route ID. Each Engine within a cluster
      *        must have a unique JVM Route ID.
      */
-    public void setJvmRoute(String jvmRouteId);
+    void setJvmRoute(String jvmRouteId);
 
 
     /**
      * @return the <code>Service</code> with which we are associated (if any).
      */
-    public Service getService();
+    Service getService();
 
 
     /**
@@ -82,5 +82,5 @@ public interface Engine extends Container {
      *
      * @param service The service that owns this Engine
      */
-    public void setService(Service service);
+    void setService(Service service);
 }

==================================================
Group.java
index 5ea6a12ce3..bf9b5754f0 100644
--- a/java/org/apache/catalina/Executor.java
+++ b/java/org/apache/catalina/Executor.java
@@ -18,5 +18,5 @@ package org.apache.catalina;
 
 public interface Executor extends java.util.concurrent.Executor, Lifecycle {
 
-    public String getName();
+    String getName();
 }
\ No newline at end of file

==================================================
Host.java
index 05ece8ba88..9cf329e58e 100644
--- a/java/org/apache/catalina/Group.java
+++ b/java/org/apache/catalina/Group.java
@@ -34,7 +34,7 @@ public interface Group extends Principal {
     /**
      * @return the description of this group.
      */
-    public String getDescription();
+    String getDescription();
 
 
     /**
@@ -42,14 +42,14 @@ public interface Group extends Principal {
      *
      * @param description The new description
      */
-    public void setDescription(String description);
+    void setDescription(String description);
 
 
     /**
      * @return the group name of this group, which must be unique
      * within the scope of a {@link UserDatabase}.
      */
-    public String getGroupname();
+    String getGroupname();
 
 
     /**
@@ -58,25 +58,25 @@ public interface Group extends Principal {
      *
      * @param groupname The new group name
      */
-    public void setGroupname(String groupname);
+    void setGroupname(String groupname);
 
 
     /**
      * @return the set of {@link Role}s assigned specifically to this group.
      */
-    public Iterator<Role> getRoles();
+    Iterator<Role> getRoles();
 
 
     /**
      * @return the {@link UserDatabase} within which this Group is defined.
      */
-    public UserDatabase getUserDatabase();
+    UserDatabase getUserDatabase();
 
 
     /**
      * @return the set of {@link User}s that are members of this group.
      */
-    public Iterator<User> getUsers();
+    Iterator<User> getUsers();
 
 
     // --------------------------------------------------------- Public Methods
@@ -86,7 +86,7 @@ public interface Group extends Principal {
      *
      * @param role The new role
      */
-    public void addRole(Role role);
+    void addRole(Role role);
 
 
     /**
@@ -97,7 +97,7 @@ public interface Group extends Principal {
      * @return <code>true</code> if the group is assigned to the specified role
      *         otherwise <code>false</code>
      */
-    public boolean isInRole(Role role);
+    boolean isInRole(Role role);
 
 
     /**
@@ -105,13 +105,13 @@ public interface Group extends Principal {
      *
      * @param role The old role
      */
-    public void removeRole(Role role);
+    void removeRole(Role role);
 
 
     /**
      * Remove all {@link Role}s from those assigned to this group.
      */
-    public void removeRoles();
+    void removeRoles();
 
 
 }

==================================================
Lifecycle.java
index ba585f0273..f9af68e9ae 100644
--- a/java/org/apache/catalina/Host.java
+++ b/java/org/apache/catalina/Host.java
@@ -53,14 +53,14 @@ public interface Host extends Container {
      * The ContainerEvent event type sent when a new alias is added
      * by <code>addAlias()</code>.
      */
-    public static final String ADD_ALIAS_EVENT = "addAlias";
+    String ADD_ALIAS_EVENT = "addAlias";
 
 
     /**
      * The ContainerEvent event type sent when an old alias is removed
      * by <code>removeAlias()</code>.
      */
-    public static final String REMOVE_ALIAS_EVENT = "removeAlias";
+    String REMOVE_ALIAS_EVENT = "removeAlias";
 
 
     // ------------------------------------------------------------- Properties
@@ -72,7 +72,7 @@ public interface Host extends Container {
      * If null, the base path defaults to
      * ${catalina.base}/conf/&lt;engine name&gt;/&lt;host name&gt; directory
      */
-    public String getXmlBase();
+    String getXmlBase();
 
     /**
      * Set the Xml root for this Host.  This can be an absolute
@@ -81,19 +81,19 @@ public interface Host extends Container {
      * ${catalina.base}/conf/&lt;engine name&gt;/&lt;host name&gt; directory
      * @param xmlBase The new XML root
      */
-    public void setXmlBase(String xmlBase);
+    void setXmlBase(String xmlBase);
 
     /**
      * @return a default configuration path of this Host. The file will be
      * canonical if possible.
      */
-    public File getConfigBaseFile();
+    File getConfigBaseFile();
 
     /**
      * @return the application root for this Host.  This can be an absolute
      * pathname, a relative pathname, or a URL.
      */
-    public String getAppBase();
+    String getAppBase();
 
 
     /**
@@ -101,7 +101,7 @@ public interface Host extends Container {
      * will be canonical if possible. There is no guarantee that that the
      * appBase exists.
      */
-    public File getAppBaseFile();
+    File getAppBaseFile();
 
 
     /**
@@ -110,14 +110,14 @@ public interface Host extends Container {
      *
      * @param appBase The new application root
      */
-    public void setAppBase(String appBase);
+    void setAppBase(String appBase);
 
 
     /**
      * @return the legacy (Java EE) application root for this Host.  This can be
      * an absolute pathname, a relative pathname, or a URL.
      */
-    public String getLegacyAppBase();
+    String getLegacyAppBase();
 
 
     /**
@@ -125,7 +125,7 @@ public interface Host extends Container {
      * Host. The file will be canonical if possible. There is no guarantee that
      * that the appBase exists.
      */
-    public File getLegacyAppBaseFile();
+    File getLegacyAppBaseFile();
 
 
     /**
@@ -134,7 +134,7 @@ public interface Host extends Container {
      *
      * @param legacyAppBase The new legacy application root
      */
-    public void setLegacyAppBase(String legacyAppBase);
+    void setLegacyAppBase(String legacyAppBase);
 
 
     /**
@@ -142,7 +142,7 @@ public interface Host extends Container {
      * this host's child webapps should be discovered and automatically
      * deployed dynamically.
      */
-    public boolean getAutoDeploy();
+    boolean getAutoDeploy();
 
 
     /**
@@ -150,14 +150,14 @@ public interface Host extends Container {
      *
      * @param autoDeploy The new auto deploy flag
      */
-    public void setAutoDeploy(boolean autoDeploy);
+    void setAutoDeploy(boolean autoDeploy);
 
 
     /**
      * @return the Java class name of the context configuration class
      * for new web applications.
      */
-    public String getConfigClass();
+    String getConfigClass();
 
 
     /**
@@ -166,7 +166,7 @@ public interface Host extends Container {
      *
      * @param configClass The new context configuration class
      */
-    public void setConfigClass(String configClass);
+    void setConfigClass(String configClass);
 
 
     /**
@@ -174,7 +174,7 @@ public interface Host extends Container {
      * that this host's child webapps should be discovered and automatically
      * deployed.
      */
-    public boolean getDeployOnStartup();
+    boolean getDeployOnStartup();
 
 
     /**
@@ -182,7 +182,7 @@ public interface Host extends Container {
      *
      * @param deployOnStartup The new deploy on startup flag
      */
-    public void setDeployOnStartup(boolean deployOnStartup);
+    void setDeployOnStartup(boolean deployOnStartup);
 
 
     /**
@@ -190,7 +190,7 @@ public interface Host extends Container {
      * the host's appBase that will be ignored by the automatic deployment
      * process.
      */
-    public String getDeployIgnore();
+    String getDeployIgnore();
 
 
     /**
@@ -198,7 +198,7 @@ public interface Host extends Container {
      * directories in the host's appBase that will be ignored by the automatic
      * deployment process.
      */
-    public Pattern getDeployIgnorePattern();
+    Pattern getDeployIgnorePattern();
 
 
     /**
@@ -208,7 +208,7 @@ public interface Host extends Container {
      *
      * @param deployIgnore A regular expression matching file names
      */
-    public void setDeployIgnore(String deployIgnore);
+    void setDeployIgnore(String deployIgnore);
 
 
     /**
@@ -216,7 +216,7 @@ public interface Host extends Container {
      * is primarily for use by components deploying contexts that want to do
      * this in a multi-threaded manner.
      */
-    public ExecutorService getStartStopExecutor();
+    ExecutorService getStartStopExecutor();
 
 
     /**
@@ -224,7 +224,7 @@ public interface Host extends Container {
      * unless they already exist.
      * @return true if the Host will attempt to create directories
      */
-    public boolean getCreateDirs();
+    boolean getCreateDirs();
 
 
     /**
@@ -233,7 +233,7 @@ public interface Host extends Container {
      *
      * @param createDirs The new value for this flag
      */
-    public void setCreateDirs(boolean createDirs);
+    void setCreateDirs(boolean createDirs);
 
 
     /**
@@ -241,7 +241,7 @@ public interface Host extends Container {
      * versions of applications deployed using parallel deployment. This only
      * takes effect is {@link #getAutoDeploy()} also returns <code>true</code>.
      */
-    public boolean getUndeployOldVersions();
+    boolean getUndeployOldVersions();
 
 
     /**
@@ -251,7 +251,7 @@ public interface Host extends Container {
      *
      * @param undeployOldVersions The new value for this flag
      */
-    public void setUndeployOldVersions(boolean undeployOldVersions);
+    void setUndeployOldVersions(boolean undeployOldVersions);
 
 
     // --------------------------------------------------------- Public Methods
@@ -261,14 +261,14 @@ public interface Host extends Container {
      *
      * @param alias The alias to be added
      */
-    public void addAlias(String alias);
+    void addAlias(String alias);
 
 
     /**
      * @return the set of alias names for this Host.  If none are defined,
      * a zero length array is returned.
      */
-    public String[] findAliases();
+    String[] findAliases();
 
 
     /**
@@ -276,5 +276,5 @@ public interface Host extends Container {
      *
      * @param alias Alias name to be removed
      */
-    public void removeAlias(String alias);
+    void removeAlias(String alias);
 }

==================================================
LifecycleListener.java
index 3dfd7ea565..5095a596f4 100644
--- a/java/org/apache/catalina/Lifecycle.java
+++ b/java/org/apache/catalina/Lifecycle.java
@@ -89,67 +89,67 @@ public interface Lifecycle {
     /**
      * The LifecycleEvent type for the "component before init" event.
      */
-    public static final String BEFORE_INIT_EVENT = "before_init";
+    String BEFORE_INIT_EVENT = "before_init";
 
 
     /**
      * The LifecycleEvent type for the "component after init" event.
      */
-    public static final String AFTER_INIT_EVENT = "after_init";
+    String AFTER_INIT_EVENT = "after_init";
 
 
     /**
      * The LifecycleEvent type for the "component start" event.
      */
-    public static final String START_EVENT = "start";
+    String START_EVENT = "start";
 
 
     /**
      * The LifecycleEvent type for the "component before start" event.
      */
-    public static final String BEFORE_START_EVENT = "before_start";
+    String BEFORE_START_EVENT = "before_start";
 
 
     /**
      * The LifecycleEvent type for the "component after start" event.
      */
-    public static final String AFTER_START_EVENT = "after_start";
+    String AFTER_START_EVENT = "after_start";
 
 
     /**
      * The LifecycleEvent type for the "component stop" event.
      */
-    public static final String STOP_EVENT = "stop";
+    String STOP_EVENT = "stop";
 
 
     /**
      * The LifecycleEvent type for the "component before stop" event.
      */
-    public static final String BEFORE_STOP_EVENT = "before_stop";
+    String BEFORE_STOP_EVENT = "before_stop";
 
 
     /**
      * The LifecycleEvent type for the "component after stop" event.
      */
-    public static final String AFTER_STOP_EVENT = "after_stop";
+    String AFTER_STOP_EVENT = "after_stop";
 
 
     /**
      * The LifecycleEvent type for the "component after destroy" event.
      */
-    public static final String AFTER_DESTROY_EVENT = "after_destroy";
+    String AFTER_DESTROY_EVENT = "after_destroy";
 
 
     /**
      * The LifecycleEvent type for the "component before destroy" event.
      */
-    public static final String BEFORE_DESTROY_EVENT = "before_destroy";
+    String BEFORE_DESTROY_EVENT = "before_destroy";
 
 
     /**
      * The LifecycleEvent type for the "periodic" event.
      */
-    public static final String PERIODIC_EVENT = "periodic";
+    String PERIODIC_EVENT = "periodic";
 
 
     /**
@@ -158,7 +158,7 @@ public interface Lifecycle {
      * need to signal when configuration should be performed - usually after
      * {@link #BEFORE_START_EVENT} and before {@link #START_EVENT}.
      */
-    public static final String CONFIGURE_START_EVENT = "configure_start";
+    String CONFIGURE_START_EVENT = "configure_start";
 
 
     /**
@@ -167,7 +167,7 @@ public interface Lifecycle {
      * need to signal when de-configuration should be performed - usually after
      * {@link #STOP_EVENT} and before {@link #AFTER_STOP_EVENT}.
      */
-    public static final String CONFIGURE_STOP_EVENT = "configure_stop";
+    String CONFIGURE_STOP_EVENT = "configure_stop";
 
 
     // --------------------------------------------------------- Public Methods
@@ -178,7 +178,7 @@ public interface Lifecycle {
      *
      * @param listener The listener to add
      */
-    public void addLifecycleListener(LifecycleListener listener);
+    void addLifecycleListener(LifecycleListener listener);
 
 
     /**
@@ -188,7 +188,7 @@ public interface Lifecycle {
      *         life cycle. If this component has no listeners registered, a
      *         zero-length array is returned.
      */
-    public LifecycleListener[] findLifecycleListeners();
+    LifecycleListener[] findLifecycleListeners();
 
 
     /**
@@ -196,7 +196,7 @@ public interface Lifecycle {
      *
      * @param listener The listener to remove
      */
-    public void removeLifecycleListener(LifecycleListener listener);
+    void removeLifecycleListener(LifecycleListener listener);
 
 
     /**
@@ -211,7 +211,7 @@ public interface Lifecycle {
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
      */
-    public void init() throws LifecycleException;
+    void init() throws LifecycleException;
 
     /**
      * Prepare for the beginning of active use of the public methods other than
@@ -239,7 +239,7 @@ public interface Lifecycle {
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
      */
-    public void start() throws LifecycleException;
+    void start() throws LifecycleException;
 
 
     /**
@@ -273,7 +273,7 @@ public interface Lifecycle {
      * @exception LifecycleException if this component detects a fatal error
      *  that needs to be reported
      */
-    public void stop() throws LifecycleException;
+    void stop() throws LifecycleException;
 
     /**
      * Prepare to discard the object. The following {@link LifecycleEvent}s will
@@ -286,7 +286,7 @@ public interface Lifecycle {
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
      */
-    public void destroy() throws LifecycleException;
+    void destroy() throws LifecycleException;
 
 
     /**
@@ -294,7 +294,7 @@ public interface Lifecycle {
      *
      * @return The current state of the source component.
      */
-    public LifecycleState getState();
+    LifecycleState getState();
 
 
     /**
@@ -305,7 +305,7 @@ public interface Lifecycle {
      *
      * @return The name of the current component state.
      */
-    public String getStateName();
+    String getStateName();
 
 
     /**
@@ -314,6 +314,6 @@ public interface Lifecycle {
      * will automatically call {@link #destroy()} after {@link #stop()}
      * completes.
      */
-    public interface SingleUse {
+    interface SingleUse {
     }
 }

==================================================
LifecycleState.java
index 09824e9714..0efe7eae46 100644
--- a/java/org/apache/catalina/LifecycleListener.java
+++ b/java/org/apache/catalina/LifecycleListener.java
@@ -33,7 +33,7 @@ public interface LifecycleListener {
      *
      * @param event LifecycleEvent that has occurred
      */
-    public void lifecycleEvent(LifecycleEvent event);
+    void lifecycleEvent(LifecycleEvent event);
 
 
 }

==================================================
Loader.java
index dccb253a43..717e58792f 100644
--- a/java/org/apache/catalina/LifecycleState.java
+++ b/java/org/apache/catalina/LifecycleState.java
@@ -37,7 +37,7 @@ public enum LifecycleState {
     private final boolean available;
     private final String lifecycleEvent;
 
-    private LifecycleState(boolean available, String lifecycleEvent) {
+    LifecycleState(boolean available, String lifecycleEvent) {
         this.available = available;
         this.lifecycleEvent = lifecycleEvent;
     }

==================================================
Manager.java
index 66c080d05b..667acf76c5 100644
--- a/java/org/apache/catalina/Loader.java
+++ b/java/org/apache/catalina/Loader.java
@@ -55,19 +55,19 @@ public interface Loader {
      * invoked inside the classloading context of this container. Unexpected
      * throwables will be caught and logged.
      */
-    public void backgroundProcess();
+    void backgroundProcess();
 
 
     /**
      * @return the Java class loader to be used by this Container.
      */
-    public ClassLoader getClassLoader();
+    ClassLoader getClassLoader();
 
 
     /**
      * @return the Context with which this Loader has been associated.
      */
-    public Context getContext();
+    Context getContext();
 
 
     /**
@@ -75,14 +75,14 @@ public interface Loader {
      *
      * @param context The associated Context
      */
-    public void setContext(Context context);
+    void setContext(Context context);
 
 
     /**
      * @return the "follow standard delegation model" flag used to configure
      * our ClassLoader.
      */
-    public boolean getDelegate();
+    boolean getDelegate();
 
 
     /**
@@ -91,7 +91,7 @@ public interface Loader {
      *
      * @param delegate The new flag
      */
-    public void setDelegate(boolean delegate);
+    void setDelegate(boolean delegate);
 
 
     /**
@@ -99,7 +99,7 @@ public interface Loader {
      *
      * @param listener The listener to add
      */
-    public void addPropertyChangeListener(PropertyChangeListener listener);
+    void addPropertyChangeListener(PropertyChangeListener listener);
 
 
     /**
@@ -109,7 +109,7 @@ public interface Loader {
      * @return <code>true</code> when the repository has been modified,
      *         <code>false</code> otherwise
      */
-    public boolean modified();
+    boolean modified();
 
 
     /**
@@ -117,5 +117,5 @@ public interface Loader {
      *
      * @param listener The listener to remove
      */
-    public void removePropertyChangeListener(PropertyChangeListener listener);
+    void removePropertyChangeListener(PropertyChangeListener listener);
 }

==================================================
Pipeline.java
index 3cab011a00..db66fab3a2 100644
--- a/java/org/apache/catalina/Manager.java
+++ b/java/org/apache/catalina/Manager.java
@@ -46,7 +46,7 @@ public interface Manager {
      *
      * @return The associated Context
      */
-    public Context getContext();
+    Context getContext();
 
 
     /**
@@ -58,13 +58,13 @@ public interface Manager {
      *
      * @param context The newly associated Context
      */
-    public void setContext(Context context);
+    void setContext(Context context);
 
 
     /**
      * @return the session id generator
      */
-    public SessionIdGenerator getSessionIdGenerator();
+    SessionIdGenerator getSessionIdGenerator();
 
 
     /**
@@ -72,7 +72,7 @@ public interface Manager {
      *
      * @param sessionIdGenerator The session id generator
      */
-    public void setSessionIdGenerator(SessionIdGenerator sessionIdGenerator);
+    void setSessionIdGenerator(SessionIdGenerator sessionIdGenerator);
 
 
     /**
@@ -80,7 +80,7 @@ public interface Manager {
      *
      * @return Total number of sessions created by this manager.
      */
-    public long getSessionCounter();
+    long getSessionCounter();
 
 
     /**
@@ -88,7 +88,7 @@ public interface Manager {
      *
      * @param sessionCounter Total number of sessions created by this manager.
      */
-    public void setSessionCounter(long sessionCounter);
+    void setSessionCounter(long sessionCounter);
 
 
     /**
@@ -98,7 +98,7 @@ public interface Manager {
      * @return Maximum number of sessions that have been active at the same
      * time
      */
-    public int getMaxActive();
+    int getMaxActive();
 
 
     /**
@@ -108,7 +108,7 @@ public interface Manager {
      * @param maxActive Maximum number of sessions that have been active at
      * the same time.
      */
-    public void setMaxActive(int maxActive);
+    void setMaxActive(int maxActive);
 
 
     /**
@@ -116,7 +116,7 @@ public interface Manager {
      *
      * @return Number of currently active sessions
      */
-    public int getActiveSessions();
+    int getActiveSessions();
 
 
     /**
@@ -124,7 +124,7 @@ public interface Manager {
      *
      * @return Number of sessions that have expired
      */
-    public long getExpiredSessions();
+    long getExpiredSessions();
 
 
     /**
@@ -132,7 +132,7 @@ public interface Manager {
      *
      * @param expiredSessions Number of sessions that have expired
      */
-    public void setExpiredSessions(long expiredSessions);
+    void setExpiredSessions(long expiredSessions);
 
 
     /**
@@ -141,7 +141,7 @@ public interface Manager {
      *
      * @return Number of rejected sessions
      */
-    public int getRejectedSessions();
+    int getRejectedSessions();
 
 
     /**
@@ -151,7 +151,7 @@ public interface Manager {
      * @return Longest time (in seconds) that an expired session had been
      * alive.
      */
-    public int getSessionMaxAliveTime();
+    int getSessionMaxAliveTime();
 
 
     /**
@@ -161,7 +161,7 @@ public interface Manager {
      * @param sessionMaxAliveTime Longest time (in seconds) that an expired
      * session had been alive.
      */
-    public void setSessionMaxAliveTime(int sessionMaxAliveTime);
+    void setSessionMaxAliveTime(int sessionMaxAliveTime);
 
 
     /**
@@ -171,7 +171,7 @@ public interface Manager {
      * @return Average time (in seconds) that expired sessions had been
      * alive.
      */
-    public int getSessionAverageAliveTime();
+    int getSessionAverageAliveTime();
 
 
     /**
@@ -180,7 +180,7 @@ public interface Manager {
      *
      * @return  The current rate (in sessions per minute) of session creation
      */
-    public int getSessionCreateRate();
+    int getSessionCreateRate();
 
 
     /**
@@ -189,7 +189,7 @@ public interface Manager {
      *
      * @return  The current rate (in sessions per minute) of session expiration
      */
-    public int getSessionExpireRate();
+    int getSessionExpireRate();
 
 
     // --------------------------------------------------------- Public Methods
@@ -199,7 +199,7 @@ public interface Manager {
      *
      * @param session Session to be added
      */
-    public void add(Session session);
+    void add(Session session);
 
 
     /**
@@ -207,7 +207,7 @@ public interface Manager {
      *
      * @param listener The listener to add
      */
-    public void addPropertyChangeListener(PropertyChangeListener listener);
+    void addPropertyChangeListener(PropertyChangeListener listener);
 
 
     /**
@@ -218,7 +218,7 @@ public interface Manager {
      *
      * @return  The new session ID
      */
-    public default String rotateSessionId(Session session) {
+    default String rotateSessionId(Session session) {
         String newSessionId = null;
         // Assume there new Id is a duplicate until we prove it isn't. The
         // chances of a duplicate are extremely low but the current ManagerBase
@@ -245,7 +245,7 @@ public interface Manager {
      * @param session   The session to change the session ID for
      * @param newId   new session ID
      */
-    public void changeSessionId(Session session, String newId);
+    void changeSessionId(Session session, String newId);
 
 
     /**
@@ -255,7 +255,7 @@ public interface Manager {
      *
      * @return An empty Session object
      */
-    public Session createEmptySession();
+    Session createEmptySession();
 
 
     /**
@@ -275,7 +275,7 @@ public interface Manager {
      * @return An empty Session object with the given ID or a newly created
      *         session ID if none was specified
      */
-    public Session createSession(String sessionId);
+    Session createSession(String sessionId);
 
 
     /**
@@ -292,7 +292,7 @@ public interface Manager {
      * @return the request session or {@code null} if a session with the
      *         requested ID could not be found
      */
-    public Session findSession(String id) throws IOException;
+    Session findSession(String id) throws IOException;
 
 
     /**
@@ -301,7 +301,7 @@ public interface Manager {
      *
      * @return All the currently active sessions managed by this manager
      */
-    public Session[] findSessions();
+    Session[] findSessions();
 
 
     /**
@@ -313,7 +313,7 @@ public interface Manager {
      *  found during the reload
      * @exception IOException if an input/output error occurs
      */
-    public void load() throws ClassNotFoundException, IOException;
+    void load() throws ClassNotFoundException, IOException;
 
 
     /**
@@ -321,7 +321,7 @@ public interface Manager {
      *
      * @param session Session to be removed
      */
-    public void remove(Session session);
+    void remove(Session session);
 
 
     /**
@@ -330,7 +330,7 @@ public interface Manager {
      * @param session   Session to be removed
      * @param update    Should the expiration statistics be updated
      */
-    public void remove(Session session, boolean update);
+    void remove(Session session, boolean update);
 
 
     /**
@@ -338,7 +338,7 @@ public interface Manager {
      *
      * @param listener The listener to remove
      */
-    public void removePropertyChangeListener(PropertyChangeListener listener);
+    void removePropertyChangeListener(PropertyChangeListener listener);
 
 
     /**
@@ -348,7 +348,7 @@ public interface Manager {
      *
      * @exception IOException if an input/output error occurs
      */
-    public void unload() throws IOException;
+    void unload() throws IOException;
 
 
     /**
@@ -356,7 +356,7 @@ public interface Manager {
      * basis and allows the manager to implement
      * a method that executes periodic tasks, such as expiring sessions etc.
      */
-    public void backgroundProcess();
+    void backgroundProcess();
 
 
     /**
@@ -370,7 +370,7 @@ public interface Manager {
      * @return {@code true} if the Manager would distribute the given attribute
      *         otherwise {@code false}
      */
-    public boolean willAttributeDistribute(String name, Object value);
+    boolean willAttributeDistribute(String name, Object value);
 
 
     /**
@@ -386,7 +386,7 @@ public interface Manager {
      * @return {@code true} if the listener will be notified, {@code false} if
      *         it will not
      */
-    public default boolean getNotifyBindingListenerOnUnchangedValue() {
+    default boolean getNotifyBindingListenerOnUnchangedValue() {
         return false;
     }
 
@@ -404,7 +404,7 @@ public interface Manager {
      *                                              will be called, {@code
      *                                              false} it will not
      */
-    public void setNotifyBindingListenerOnUnchangedValue(
+    void setNotifyBindingListenerOnUnchangedValue(
             boolean notifyBindingListenerOnUnchangedValue);
 
 
@@ -421,7 +421,7 @@ public interface Manager {
      * @return {@code true} if the listener will be notified, {@code false} if
      *         it will not
      */
-    public default boolean getNotifyAttributeListenerOnUnchangedValue() {
+    default boolean getNotifyAttributeListenerOnUnchangedValue() {
         return true;
     }
 
@@ -438,7 +438,7 @@ public interface Manager {
      *                                                will be called, {@code
      *                                                false} it will not
      */
-    public void setNotifyAttributeListenerOnUnchangedValue(
+    void setNotifyAttributeListenerOnUnchangedValue(
             boolean notifyAttributeListenerOnUnchangedValue);
 
 
@@ -451,7 +451,7 @@ public interface Manager {
      * else the default value will be <code>false</code>.
      * @return the flag value
      */
-    public default boolean getSessionActivityCheck() {
+    default boolean getSessionActivityCheck() {
         return Globals.STRICT_SERVLET_COMPLIANCE;
     }
 
@@ -462,7 +462,7 @@ public interface Manager {
      * least one active request will always be considered valid.
      * @param sessionActivityCheck the new flag value
      */
-    public void setSessionActivityCheck(boolean sessionActivityCheck);
+    void setSessionActivityCheck(boolean sessionActivityCheck);
 
 
     /**
@@ -476,7 +476,7 @@ public interface Manager {
      * else the default value will be <code>false</code>.
      * @return the flag value
      */
-    public default boolean getSessionLastAccessAtStart() {
+    default boolean getSessionLastAccessAtStart() {
         return Globals.STRICT_SERVLET_COMPLIANCE;
     }
 
@@ -489,6 +489,6 @@ public interface Manager {
      * is calculated.
      * @param sessionLastAccessAtStart the new flag value
      */
-    public void setSessionLastAccessAtStart(boolean sessionLastAccessAtStart);
+    void setSessionLastAccessAtStart(boolean sessionLastAccessAtStart);
 
 }

==================================================
Realm.java
index 58d2670fa7..67ce9540cc 100644
--- a/java/org/apache/catalina/Pipeline.java
+++ b/java/org/apache/catalina/Pipeline.java
@@ -42,7 +42,7 @@ public interface Pipeline extends Contained {
      * @return the Valve instance that has been distinguished as the basic
      * Valve for this Pipeline (if any).
      */
-    public Valve getBasic();
+    Valve getBasic();
 
 
     /**
@@ -57,7 +57,7 @@ public interface Pipeline extends Contained {
      *
      * @param valve Valve to be distinguished as the basic Valve
      */
-    public void setBasic(Valve valve);
+    void setBasic(Valve valve);
 
 
     /**
@@ -83,7 +83,7 @@ public interface Pipeline extends Contained {
      * @exception IllegalStateException if the specified Valve is already
      *  associated with a different Container
      */
-    public void addValve(Valve valve);
+    void addValve(Valve valve);
 
 
     /**
@@ -91,7 +91,7 @@ public interface Pipeline extends Contained {
      * Container, including the basic Valve (if any).  If there are no
      * such Valves, a zero-length array is returned.
      */
-    public Valve[] getValves();
+    Valve[] getValves();
 
 
     /**
@@ -106,21 +106,21 @@ public interface Pipeline extends Contained {
      *
      * @param valve Valve to be removed
      */
-    public void removeValve(Valve valve);
+    void removeValve(Valve valve);
 
 
     /**
      * @return the Valve instance that has been distinguished as the basic
      * Valve for this Pipeline (if any).
      */
-    public Valve getFirst();
+    Valve getFirst();
 
 
     /**
      * Returns true if all the valves in this pipeline support async, false otherwise
      * @return true if all the valves in this pipeline support async, false otherwise
      */
-    public boolean isAsyncSupported();
+    boolean isAsyncSupported();
 
 
     /**
@@ -131,5 +131,5 @@ public interface Pipeline extends Contained {
      *               Valve in this Pipeline that does not support async will be
      *               added
      */
-    public void findNonAsyncValves(Set<String> result);
+    void findNonAsyncValves(Set<String> result);
 }

==================================================
Role.java
index fd030fa549..769db66e85 100644
--- a/java/org/apache/catalina/Realm.java
+++ b/java/org/apache/catalina/Realm.java
@@ -42,7 +42,7 @@ public interface Realm extends Contained {
     /**
      * @return the CredentialHandler configured for this Realm.
      */
-    public CredentialHandler getCredentialHandler();
+    CredentialHandler getCredentialHandler();
 
 
     /**
@@ -50,7 +50,7 @@ public interface Realm extends Contained {
      *
      * @param credentialHandler the {@link CredentialHandler} to use
      */
-    public void setCredentialHandler(CredentialHandler credentialHandler);
+    void setCredentialHandler(CredentialHandler credentialHandler);
 
 
     /**
@@ -58,7 +58,7 @@ public interface Realm extends Contained {
      *
      * @param listener The listener to add
      */
-    public void addPropertyChangeListener(PropertyChangeListener listener);
+    void addPropertyChangeListener(PropertyChangeListener listener);
 
 
     /**
@@ -68,7 +68,7 @@ public interface Realm extends Contained {
      * @return the associated principal, or <code>null</code> if none is
      *         associated.
      */
-    public Principal authenticate(String username);
+    Principal authenticate(String username);
 
 
     /**
@@ -80,7 +80,7 @@ public interface Realm extends Contained {
      * authenticating this username
      * @return the associated principal, or <code>null</code> if there is none
      */
-    public Principal authenticate(String username, String credentials);
+    Principal authenticate(String username, String credentials);
 
 
     /**
@@ -101,7 +101,7 @@ public interface Realm extends Contained {
      * MD5(Method + ":" + uri)
      * @return the associated principal, or <code>null</code> if there is none.
      */
-    public Principal authenticate(String username, String digest,
+    Principal authenticate(String username, String digest,
                                   String nonce, String nc, String cnonce,
                                   String qop, String realm,
                                   String md5a2);
@@ -115,7 +115,7 @@ public interface Realm extends Contained {
      *                   credentials in the returned Principal?
      * @return the associated principal, or <code>null</code> if there is none
      */
-    public Principal authenticate(GSSContext gssContext, boolean storeCreds);
+    Principal authenticate(GSSContext gssContext, boolean storeCreds);
 
 
     /**
@@ -126,7 +126,7 @@ public interface Realm extends Contained {
      *                      {@code null}
      * @return the associated principal, or {@code null} if there is none
      */
-    public Principal authenticate(GSSName gssName, GSSCredential gssCredential);
+    Principal authenticate(GSSName gssName, GSSCredential gssCredential);
 
 
     /**
@@ -136,7 +136,7 @@ public interface Realm extends Contained {
      *  the array being the certificate of the client itself.
      * @return the associated principal, or <code>null</code> if there is none
      */
-    public Principal authenticate(X509Certificate certs[]);
+    Principal authenticate(X509Certificate certs[]);
 
 
     /**
@@ -144,7 +144,7 @@ public interface Realm extends Contained {
      * invoked inside the classloading context of this container. Unexpected
      * throwables will be caught and logged.
      */
-    public void backgroundProcess();
+    void backgroundProcess();
 
 
     /**
@@ -156,7 +156,7 @@ public interface Realm extends Contained {
      * @return the configured {@link SecurityConstraint}, of <code>null</code>
      *         if there is none
      */
-    public SecurityConstraint [] findSecurityConstraints(Request request,
+    SecurityConstraint [] findSecurityConstraints(Request request,
                                                      Context context);
 
 
@@ -172,7 +172,7 @@ public interface Realm extends Contained {
      *
      * @exception IOException if an input/output error occurs
      */
-    public boolean hasResourcePermission(Request request,
+    boolean hasResourcePermission(Request request,
                                          Response response,
                                          SecurityConstraint [] constraint,
                                          Context context)
@@ -190,7 +190,7 @@ public interface Realm extends Contained {
      *         security role, within the context of this Realm; otherwise return
      *         <code>false</code>.
      */
-    public boolean hasRole(Wrapper wrapper, Principal principal, String role);
+    boolean hasRole(Wrapper wrapper, Principal principal, String role);
 
 
     /**
@@ -206,7 +206,7 @@ public interface Realm extends Contained {
      *
      * @exception IOException if an input/output error occurs
      */
-    public boolean hasUserDataPermission(Request request,
+    boolean hasUserDataPermission(Request request,
                                          Response response,
                                          SecurityConstraint []constraint)
         throws IOException;
@@ -217,14 +217,14 @@ public interface Realm extends Contained {
      *
      * @param listener The listener to remove
      */
-    public void removePropertyChangeListener(PropertyChangeListener listener);
+    void removePropertyChangeListener(PropertyChangeListener listener);
 
 
     /**
      * Return the availability of the realm for authentication.
      * @return <code>true</code> if the realm is able to perform authentication
      */
-    public default boolean isAvailable() {
+    default boolean isAvailable() {
         return true;
     }
 }

==================================================
Server.java
index e4a0c22985..18fea5e3e3 100644
--- a/java/org/apache/catalina/Role.java
+++ b/java/org/apache/catalina/Role.java
@@ -36,7 +36,7 @@ public interface Role extends Principal {
     /**
      * @return the description of this role.
      */
-    public String getDescription();
+    String getDescription();
 
 
     /**
@@ -44,14 +44,14 @@ public interface Role extends Principal {
      *
      * @param description The new description
      */
-    public void setDescription(String description);
+    void setDescription(String description);
 
 
     /**
      * @return the role name of this role, which must be unique
      * within the scope of a {@link UserDatabase}.
      */
-    public String getRolename();
+    String getRolename();
 
 
     /**
@@ -60,13 +60,13 @@ public interface Role extends Principal {
      *
      * @param rolename The new role name
      */
-    public void setRolename(String rolename);
+    void setRolename(String rolename);
 
 
     /**
      * @return the {@link UserDatabase} within which this Role is defined.
      */
-    public UserDatabase getUserDatabase();
+    UserDatabase getUserDatabase();
 
 
 }

==================================================
Service.java
index 4c5d25c419..eff7279523 100644
--- a/java/org/apache/catalina/Server.java
+++ b/java/org/apache/catalina/Server.java
@@ -48,7 +48,7 @@ public interface Server extends Lifecycle {
     /**
      * @return the global naming resources.
      */
-    public NamingResourcesImpl getGlobalNamingResources();
+    NamingResourcesImpl getGlobalNamingResources();
 
 
     /**
@@ -56,14 +56,14 @@ public interface Server extends Lifecycle {
      *
      * @param globalNamingResources The new global naming resources
      */
-    public void setGlobalNamingResources
+    void setGlobalNamingResources
         (NamingResourcesImpl globalNamingResources);
 
 
     /**
      * @return the global naming resources context.
      */
-    public javax.naming.Context getGlobalNamingContext();
+    javax.naming.Context getGlobalNamingContext();
 
 
     /**
@@ -72,7 +72,7 @@ public interface Server extends Lifecycle {
      * @see #getPortOffset()
      * @see #getPortWithOffset()
      */
-    public int getPort();
+    int getPort();
 
 
     /**
@@ -82,7 +82,7 @@ public interface Server extends Lifecycle {
      *
      * @see #setPortOffset(int)
      */
-    public void setPort(int port);
+    void setPort(int port);
 
     /**
      * Get the number that offsets the port used for shutdown commands.
@@ -91,7 +91,7 @@ public interface Server extends Lifecycle {
      *
      * @return the port offset
      */
-    public int getPortOffset();
+    int getPortOffset();
 
     /**
      * Set the number that offsets the server port used for shutdown commands.
@@ -100,7 +100,7 @@ public interface Server extends Lifecycle {
      *
      * @param portOffset sets the port offset
      */
-    public void setPortOffset(int portOffset);
+    void setPortOffset(int portOffset);
 
     /**
      * Get the actual port on which server is listening for the shutdown commands.
@@ -109,12 +109,12 @@ public interface Server extends Lifecycle {
      *
      * @return the port with offset
      */
-    public int getPortWithOffset();
+    int getPortWithOffset();
 
     /**
      * @return the address on which we listen to for shutdown commands.
      */
-    public String getAddress();
+    String getAddress();
 
 
     /**
@@ -122,13 +122,13 @@ public interface Server extends Lifecycle {
      *
      * @param address The new address
      */
-    public void setAddress(String address);
+    void setAddress(String address);
 
 
     /**
      * @return the shutdown command string we are waiting for.
      */
-    public String getShutdown();
+    String getShutdown();
 
 
     /**
@@ -136,7 +136,7 @@ public interface Server extends Lifecycle {
      *
      * @param shutdown The new shutdown command
      */
-    public void setShutdown(String shutdown);
+    void setShutdown(String shutdown);
 
 
     /**
@@ -144,7 +144,7 @@ public interface Server extends Lifecycle {
      * {@link #getCatalina()} {@link Catalina#getParentClassLoader()}. If
      * catalina has not been set, return the system class loader.
      */
-    public ClassLoader getParentClassLoader();
+    ClassLoader getParentClassLoader();
 
 
     /**
@@ -152,20 +152,20 @@ public interface Server extends Lifecycle {
      *
      * @param parent The new parent class loader
      */
-    public void setParentClassLoader(ClassLoader parent);
+    void setParentClassLoader(ClassLoader parent);
 
 
     /**
      * @return the outer Catalina startup/shutdown component if present.
      */
-    public Catalina getCatalina();
+    Catalina getCatalina();
 
     /**
      * Set the outer Catalina startup/shutdown component if present.
      *
      * @param catalina the outer Catalina component
      */
-    public void setCatalina(Catalina catalina);
+    void setCatalina(Catalina catalina);
 
 
     /**
@@ -173,7 +173,7 @@ public interface Server extends Lifecycle {
      * may be the same (and are by default). If this is not set the value
      * returned by {@link #getCatalinaHome()} will be used.
      */
-    public File getCatalinaBase();
+    File getCatalinaBase();
 
     /**
      * Set the configured base (instance) directory. Note that home and base
@@ -181,14 +181,14 @@ public interface Server extends Lifecycle {
      *
      * @param catalinaBase the configured base directory
      */
-    public void setCatalinaBase(File catalinaBase);
+    void setCatalinaBase(File catalinaBase);
 
 
     /**
      * @return the configured home (binary) directory. Note that home and base
      * may be the same (and are by default).
      */
-    public File getCatalinaHome();
+    File getCatalinaHome();
 
     /**
      * Set the configured home (binary) directory. Note that home and base
@@ -196,21 +196,21 @@ public interface Server extends Lifecycle {
      *
      * @param catalinaHome the configured home directory
      */
-    public void setCatalinaHome(File catalinaHome);
+    void setCatalinaHome(File catalinaHome);
 
 
     /**
      * Get the utility thread count.
      * @return the thread count
      */
-    public int getUtilityThreads();
+    int getUtilityThreads();
 
 
     /**
      * Set the utility thread count.
      * @param utilityThreads the new thread count
      */
-    public void setUtilityThreads(int utilityThreads);
+    void setUtilityThreads(int utilityThreads);
 
 
     // --------------------------------------------------------- Public Methods
@@ -221,13 +221,13 @@ public interface Server extends Lifecycle {
      *
      * @param service The Service to be added
      */
-    public void addService(Service service);
+    void addService(Service service);
 
 
     /**
      * Wait until a proper shutdown command is received, then return.
      */
-    public void await();
+    void await();
 
 
     /**
@@ -236,13 +236,13 @@ public interface Server extends Lifecycle {
      * @param name Name of the Service to be returned
      * @return the specified Service, or <code>null</code> if none exists.
      */
-    public Service findService(String name);
+    Service findService(String name);
 
 
     /**
      * @return the set of Services defined within this Server.
      */
-    public Service[] findServices();
+    Service[] findServices();
 
 
     /**
@@ -251,18 +251,18 @@ public interface Server extends Lifecycle {
      *
      * @param service The Service to be removed
      */
-    public void removeService(Service service);
+    void removeService(Service service);
 
 
     /**
      * @return the token necessary for operations on the associated JNDI naming
      * context.
      */
-    public Object getNamingToken();
+    Object getNamingToken();
 
     /**
      * @return the utility executor managed by the Service.
      */
-    public ScheduledExecutorService getUtilityExecutor();
+    ScheduledExecutorService getUtilityExecutor();
 
 }

==================================================
Session.java
index 32daaa8e11..0d7b37a6a3 100644
--- a/java/org/apache/catalina/Service.java
+++ b/java/org/apache/catalina/Service.java
@@ -39,7 +39,7 @@ public interface Service extends Lifecycle {
      * @return the <code>Engine</code> that handles requests for all
      * <code>Connectors</code> associated with this Service.
      */
-    public Engine getContainer();
+    Engine getContainer();
 
     /**
      * Set the <code>Engine</code> that handles requests for all
@@ -47,51 +47,51 @@ public interface Service extends Lifecycle {
      *
      * @param engine The new Engine
      */
-    public void setContainer(Engine engine);
+    void setContainer(Engine engine);
 
     /**
      * @return the name of this Service.
      */
-    public String getName();
+    String getName();
 
     /**
      * Set the name of this Service.
      *
      * @param name The new service name
      */
-    public void setName(String name);
+    void setName(String name);
 
     /**
      * @return the <code>Server</code> with which we are associated (if any).
      */
-    public Server getServer();
+    Server getServer();
 
     /**
      * Set the <code>Server</code> with which we are associated (if any).
      *
      * @param server The server that owns this Service
      */
-    public void setServer(Server server);
+    void setServer(Server server);
 
     /**
      * @return the parent class loader for this component. If not set, return
      * {@link #getServer()} {@link Server#getParentClassLoader()}. If no server
      * has been set, return the system class loader.
      */
-    public ClassLoader getParentClassLoader();
+    ClassLoader getParentClassLoader();
 
     /**
      * Set the parent class loader for this service.
      *
      * @param parent The new parent class loader
      */
-    public void setParentClassLoader(ClassLoader parent);
+    void setParentClassLoader(ClassLoader parent);
 
     /**
      * @return the domain under which this container will be / has been
      * registered.
      */
-    public String getDomain();
+    String getDomain();
 
 
     // --------------------------------------------------------- Public Methods
@@ -102,14 +102,14 @@ public interface Service extends Lifecycle {
      *
      * @param connector The Connector to be added
      */
-    public void addConnector(Connector connector);
+    void addConnector(Connector connector);
 
     /**
      * Find and return the set of Connectors associated with this Service.
      *
      * @return the set of associated Connectors
      */
-    public Connector[] findConnectors();
+    Connector[] findConnectors();
 
     /**
      * Remove the specified Connector from the set associated from this
@@ -118,32 +118,32 @@ public interface Service extends Lifecycle {
      *
      * @param connector The Connector to be removed
      */
-    public void removeConnector(Connector connector);
+    void removeConnector(Connector connector);
 
     /**
      * Adds a named executor to the service
      * @param ex Executor
      */
-    public void addExecutor(Executor ex);
+    void addExecutor(Executor ex);
 
     /**
      * Retrieves all executors
      * @return Executor[]
      */
-    public Executor[] findExecutors();
+    Executor[] findExecutors();
 
     /**
      * Retrieves executor by name, null if not found
      * @param name String
      * @return Executor
      */
-    public Executor getExecutor(String name);
+    Executor getExecutor(String name);
 
     /**
      * Removes an executor from the service
      * @param ex Executor
      */
-    public void removeExecutor(Executor ex);
+    void removeExecutor(Executor ex);
 
     /**
      * @return the mapper associated with this Service.

==================================================
SessionIdGenerator.java
index 5047a4814d..4ec7aca0ed 100644
--- a/java/org/apache/catalina/Session.java
+++ b/java/org/apache/catalina/Session.java
@@ -39,25 +39,25 @@ public interface Session {
     /**
      * The SessionEvent event type when a session is created.
      */
-    public static final String SESSION_CREATED_EVENT = "createSession";
+    String SESSION_CREATED_EVENT = "createSession";
 
 
     /**
      * The SessionEvent event type when a session is destroyed.
      */
-    public static final String SESSION_DESTROYED_EVENT = "destroySession";
+    String SESSION_DESTROYED_EVENT = "destroySession";
 
 
     /**
      * The SessionEvent event type when a session is activated.
      */
-    public static final String SESSION_ACTIVATED_EVENT = "activateSession";
+    String SESSION_ACTIVATED_EVENT = "activateSession";
 
 
     /**
      * The SessionEvent event type when a session is passivated.
      */
-    public static final String SESSION_PASSIVATED_EVENT = "passivateSession";
+    String SESSION_PASSIVATED_EVENT = "passivateSession";
 
 
     // ------------------------------------------------------------- Properties
@@ -67,7 +67,7 @@ public interface Session {
      * @return the authentication type used to authenticate our cached
      * Principal, if any.
      */
-    public String getAuthType();
+    String getAuthType();
 
 
     /**
@@ -76,20 +76,20 @@ public interface Session {
      *
      * @param authType The new cached authentication type
      */
-    public void setAuthType(String authType);
+    void setAuthType(String authType);
 
 
     /**
      * @return the creation time for this session.
      */
-    public long getCreationTime();
+    long getCreationTime();
 
 
     /**
      * @return the creation time for this session, bypassing the session validity
      * checks.
      */
-    public long getCreationTimeInternal();
+    long getCreationTimeInternal();
 
 
     /**
@@ -98,19 +98,19 @@ public interface Session {
      *
      * @param time The new creation time
      */
-    public void setCreationTime(long time);
+    void setCreationTime(long time);
 
 
     /**
      * @return the session identifier for this session.
      */
-    public String getId();
+    String getId();
 
 
     /**
      * @return the session identifier for this session.
      */
-    public String getIdInternal();
+    String getIdInternal();
 
 
     /**
@@ -119,7 +119,7 @@ public interface Session {
      *
      * @param id The new session identifier
      */
-    public void setId(String id);
+    void setId(String id);
 
 
     /**
@@ -130,7 +130,7 @@ public interface Session {
      * @param notify    Should any associated listeners be notified that a new
      *                      session has been created?
      */
-    public void setId(String id, boolean notify);
+    void setId(String id, boolean notify);
 
 
     /**
@@ -140,13 +140,13 @@ public interface Session {
      * a value associated with the session, do not affect the access time.
      * This one gets updated whenever a request starts.
      */
-    public long getThisAccessedTime();
+    long getThisAccessedTime();
 
     /**
      * @return the last client access time without invalidation check
      * @see #getThisAccessedTime()
      */
-    public long getThisAccessedTimeInternal();
+    long getThisAccessedTimeInternal();
 
     /**
      * @return the last time the client sent a request associated with this
@@ -155,29 +155,29 @@ public interface Session {
      * a value associated with the session, do not affect the access time.
      * This one gets updated whenever a request finishes.
      */
-    public long getLastAccessedTime();
+    long getLastAccessedTime();
 
     /**
      * @return the last client access time without invalidation check
      * @see #getLastAccessedTime()
      */
-    public long getLastAccessedTimeInternal();
+    long getLastAccessedTimeInternal();
 
     /**
      * @return the idle time (in milliseconds) from last client access time.
      */
-    public long getIdleTime();
+    long getIdleTime();
 
     /**
      * @return the idle time from last client access time without invalidation check
      * @see #getIdleTime()
      */
-    public long getIdleTimeInternal();
+    long getIdleTimeInternal();
 
     /**
      * @return the Manager within which this Session is valid.
      */
-    public Manager getManager();
+    Manager getManager();
 
 
     /**
@@ -185,7 +185,7 @@ public interface Session {
      *
      * @param manager The new Manager
      */
-    public void setManager(Manager manager);
+    void setManager(Manager manager);
 
 
     /**
@@ -193,7 +193,7 @@ public interface Session {
      * before the servlet container will invalidate the session.  A negative
      * time indicates that the session should never time out.
      */
-    public int getMaxInactiveInterval();
+    int getMaxInactiveInterval();
 
 
     /**
@@ -203,7 +203,7 @@ public interface Session {
      *
      * @param interval The new maximum interval
      */
-    public void setMaxInactiveInterval(int interval);
+    void setMaxInactiveInterval(int interval);
 
 
     /**
@@ -211,7 +211,7 @@ public interface Session {
      *
      * @param isNew The new value for the <code>isNew</code> flag
      */
-    public void setNew(boolean isNew);
+    void setNew(boolean isNew);
 
 
     /**
@@ -221,7 +221,7 @@ public interface Session {
      * <code>Realm.authenticate()</code> calls on every request.  If there
      * is no current associated Principal, return <code>null</code>.
      */
-    public Principal getPrincipal();
+    Principal getPrincipal();
 
 
     /**
@@ -232,14 +232,14 @@ public interface Session {
      *
      * @param principal The new Principal, or <code>null</code> if none
      */
-    public void setPrincipal(Principal principal);
+    void setPrincipal(Principal principal);
 
 
     /**
      * @return the <code>HttpSession</code> for which this object
      * is the facade.
      */
-    public HttpSession getSession();
+    HttpSession getSession();
 
 
     /**
@@ -247,13 +247,13 @@ public interface Session {
      *
      * @param isValid The new value for the <code>isValid</code> flag
      */
-    public void setValid(boolean isValid);
+    void setValid(boolean isValid);
 
 
     /**
      * @return <code>true</code> if the session is still valid
      */
-    public boolean isValid();
+    boolean isValid();
 
 
     // --------------------------------------------------------- Public Methods
@@ -264,7 +264,7 @@ public interface Session {
      * should be called by the context when a request comes in for a particular
      * session, even if the application does not reference it.
      */
-    public void access();
+    void access();
 
 
     /**
@@ -273,20 +273,20 @@ public interface Session {
      * @param listener the SessionListener instance that should be notified
      *   for session events
      */
-    public void addSessionListener(SessionListener listener);
+    void addSessionListener(SessionListener listener);
 
 
     /**
      * End access to the session.
      */
-    public void endAccess();
+    void endAccess();
 
 
     /**
      * Perform the internal processing required to invalidate this session,
      * without triggering an exception if the session has already expired.
      */
-    public void expire();
+    void expire();
 
 
     /**
@@ -295,21 +295,21 @@ public interface Session {
      *
      * @param name Name of the note to be returned
      */
-    public Object getNote(String name);
+    Object getNote(String name);
 
 
     /**
      * @return an Iterator containing the String names of all notes bindings
      * that exist for this session.
      */
-    public Iterator<String> getNoteNames();
+    Iterator<String> getNoteNames();
 
 
     /**
      * Release all object references, and initialize instance variables, in
      * preparation for reuse of this object.
      */
-    public void recycle();
+    void recycle();
 
 
     /**
@@ -318,7 +318,7 @@ public interface Session {
      *
      * @param name Name of the note to be removed
      */
-    public void removeNote(String name);
+    void removeNote(String name);
 
 
     /**
@@ -327,7 +327,7 @@ public interface Session {
      * @param listener remove the session listener, which will no longer be
      *     notified
      */
-    public void removeSessionListener(SessionListener listener);
+    void removeSessionListener(SessionListener listener);
 
 
     /**
@@ -337,7 +337,7 @@ public interface Session {
      * @param name Name to which the object should be bound
      * @param value Object to be bound to the specified name
      */
-    public void setNote(String name, Object value);
+    void setNote(String name, Object value);
 
 
     /**
@@ -350,7 +350,7 @@ public interface Session {
      * @param notifyContainerListeners  Should any associated ContainerListeners
      *        be notified that session ID has been changed?
      */
-    public void tellChangedSessionId(String newId, String oldId,
+    void tellChangedSessionId(String newId, String oldId,
             boolean notifySessionListeners, boolean notifyContainerListeners);
 
 
@@ -372,5 +372,5 @@ public interface Session {
      * @return {@code true} if distribution is supported, otherwise {@code
      *         false}
      */
-    public boolean isAttributeDistributable(String name, Object value);
+    boolean isAttributeDistributable(String name, Object value);
 }

==================================================
SessionListener.java
index b11a4c3256..09a08dfb19 100644
--- a/java/org/apache/catalina/SessionIdGenerator.java
+++ b/java/org/apache/catalina/SessionIdGenerator.java
@@ -22,7 +22,7 @@ public interface SessionIdGenerator {
      * @return the node identifier associated with this node which will be
      * included in the generated session ID.
      */
-    public String getJvmRoute();
+    String getJvmRoute();
 
     /**
      * Specify the node identifier associated with this node which will be
@@ -30,26 +30,26 @@ public interface SessionIdGenerator {
      *
      * @param jvmRoute  The node identifier
      */
-    public void setJvmRoute(String jvmRoute);
+    void setJvmRoute(String jvmRoute);
 
     /**
      * @return the number of bytes for a session ID
      */
-    public int getSessionIdLength();
+    int getSessionIdLength();
 
     /**
      * Specify the number of bytes for a session ID
      *
      * @param sessionIdLength   Number of bytes
      */
-    public void setSessionIdLength(int sessionIdLength);
+    void setSessionIdLength(int sessionIdLength);
 
     /**
      * Generate and return a new session identifier.
      *
      * @return the newly generated session id
      */
-    public String generateSessionId();
+    String generateSessionId();
 
     /**
      * Generate and return a new session identifier.
@@ -57,5 +57,5 @@ public interface SessionIdGenerator {
      * @param route   node identifier to include in generated id
      * @return the newly generated session id
      */
-    public String generateSessionId(String route);
+    String generateSessionId(String route);
 }

==================================================
Store.java
index fe717509cb..47516abe02 100644
--- a/java/org/apache/catalina/SessionListener.java
+++ b/java/org/apache/catalina/SessionListener.java
@@ -32,7 +32,7 @@ public interface SessionListener extends EventListener {
      *
      * @param event SessionEvent that has occurred
      */
-    public void sessionEvent(SessionEvent event);
+    void sessionEvent(SessionEvent event);
 
 
 }

==================================================
ThreadBindingListener.java
index ccf582d4f7..9512121526 100644
--- a/java/org/apache/catalina/Store.java
+++ b/java/org/apache/catalina/Store.java
@@ -37,7 +37,7 @@ public interface Store {
     /**
      * @return the Manager instance associated with this Store.
      */
-    public Manager getManager();
+    Manager getManager();
 
 
     /**
@@ -45,7 +45,7 @@ public interface Store {
      *
      * @param manager The Manager which will use this Store.
      */
-    public void setManager(Manager manager);
+    void setManager(Manager manager);
 
 
     /**
@@ -53,7 +53,7 @@ public interface Store {
      *
      * @exception IOException if an input/output error occurs
      */
-    public int getSize() throws IOException;
+    int getSize() throws IOException;
 
 
     // --------------------------------------------------------- Public Methods
@@ -64,7 +64,7 @@ public interface Store {
      *
      * @param listener The listener to add
      */
-    public void addPropertyChangeListener(PropertyChangeListener listener);
+    void addPropertyChangeListener(PropertyChangeListener listener);
 
 
     /**
@@ -74,7 +74,7 @@ public interface Store {
      *
      * @exception IOException if an input/output error occurred
      */
-    public String[] keys() throws IOException;
+    String[] keys() throws IOException;
 
 
     /**
@@ -88,7 +88,7 @@ public interface Store {
      * @exception IOException if an input/output error occurs
      * @return the loaded Session instance
      */
-    public Session load(String id)
+    Session load(String id)
         throws ClassNotFoundException, IOException;
 
 
@@ -101,7 +101,7 @@ public interface Store {
      *
      * @exception IOException if an input/output error occurs
      */
-    public void remove(String id) throws IOException;
+    void remove(String id) throws IOException;
 
 
     /**
@@ -109,7 +109,7 @@ public interface Store {
      *
      * @exception IOException if an input/output error occurs
      */
-    public void clear() throws IOException;
+    void clear() throws IOException;
 
 
     /**
@@ -117,7 +117,7 @@ public interface Store {
      *
      * @param listener The listener to remove
      */
-    public void removePropertyChangeListener(PropertyChangeListener listener);
+    void removePropertyChangeListener(PropertyChangeListener listener);
 
 
     /**
@@ -128,7 +128,7 @@ public interface Store {
      *
      * @exception IOException if an input/output error occurs
      */
-    public void save(Session session) throws IOException;
+    void save(Session session) throws IOException;
 
 
 }

==================================================
User.java
index 4dbf138b4b..f901e534ad 100644
--- a/java/org/apache/catalina/ThreadBindingListener.java
+++ b/java/org/apache/catalina/ThreadBindingListener.java
@@ -23,7 +23,7 @@ package org.apache.catalina;
  */
 public interface ThreadBindingListener {
 
-    public void bind();
-    public void unbind();
+    void bind();
+    void unbind();
 
 }

==================================================
UserDatabase.java
index fb339b979d..eb51a1b807 100644
--- a/java/org/apache/catalina/User.java
+++ b/java/org/apache/catalina/User.java
@@ -39,7 +39,7 @@ public interface User extends Principal {
     /**
      * @return the full name of this user.
      */
-    public String getFullName();
+    String getFullName();
 
 
     /**
@@ -47,13 +47,13 @@ public interface User extends Principal {
      *
      * @param fullName The new full name
      */
-    public void setFullName(String fullName);
+    void setFullName(String fullName);
 
 
     /**
      * @return the set of {@link Group}s to which this user belongs.
      */
-    public Iterator<Group> getGroups();
+    Iterator<Group> getGroups();
 
 
     /**
@@ -61,7 +61,7 @@ public interface User extends Principal {
      * identifier of an encoding scheme surrounded by curly braces, such as
      * <code>{md5}xxxxx</code>.
      */
-    public String getPassword();
+    String getPassword();
 
 
     /**
@@ -71,26 +71,26 @@ public interface User extends Principal {
      *
      * @param password The new logon password
      */
-    public void setPassword(String password);
+    void setPassword(String password);
 
 
     /**
      * @return the set of {@link Role}s assigned specifically to this user.
      */
-    public Iterator<Role> getRoles();
+    Iterator<Role> getRoles();
 
 
     /**
      * @return the {@link UserDatabase} within which this User is defined.
      */
-    public UserDatabase getUserDatabase();
+    UserDatabase getUserDatabase();
 
 
     /**
      * @return the logon username of this user, which must be unique
      * within the scope of a {@link UserDatabase}.
      */
-    public String getUsername();
+    String getUsername();
 
 
     /**
@@ -99,7 +99,7 @@ public interface User extends Principal {
      *
      * @param username The new logon username
      */
-    public void setUsername(String username);
+    void setUsername(String username);
 
 
     // --------------------------------------------------------- Public Methods
@@ -110,7 +110,7 @@ public interface User extends Principal {
      *
      * @param group The new group
      */
-    public void addGroup(Group group);
+    void addGroup(Group group);
 
 
     /**
@@ -118,7 +118,7 @@ public interface User extends Principal {
      *
      * @param role The new role
      */
-    public void addRole(Role role);
+    void addRole(Role role);
 
 
     /**
@@ -127,7 +127,7 @@ public interface User extends Principal {
      * @param group The group to check
      * @return <code>true</code> if the user is in the specified group
      */
-    public boolean isInGroup(Group group);
+    boolean isInGroup(Group group);
 
 
     /**
@@ -138,7 +138,7 @@ public interface User extends Principal {
      * @param role The role to check
      * @return <code>true</code> if the user has the specified role
      */
-    public boolean isInRole(Role role);
+    boolean isInRole(Role role);
 
 
     /**
@@ -146,13 +146,13 @@ public interface User extends Principal {
      *
      * @param group The old group
      */
-    public void removeGroup(Group group);
+    void removeGroup(Group group);
 
 
     /**
      * Remove all {@link Group}s from those this user belongs to.
      */
-    public void removeGroups();
+    void removeGroups();
 
 
     /**
@@ -160,13 +160,13 @@ public interface User extends Principal {
      *
      * @param role The old role
      */
-    public void removeRole(Role role);
+    void removeRole(Role role);
 
 
     /**
      * Remove all {@link Role}s from those assigned to this user.
      */
-    public void removeRoles();
+    void removeRoles();
 
 
 }

==================================================
Valve.java
index 713cc1d324..e07b90b812 100644
--- a/java/org/apache/catalina/UserDatabase.java
+++ b/java/org/apache/catalina/UserDatabase.java
@@ -34,25 +34,25 @@ public interface UserDatabase {
     /**
      * @return the set of {@link Group}s defined in this user database.
      */
-    public Iterator<Group> getGroups();
+    Iterator<Group> getGroups();
 
 
     /**
      * @return the unique global identifier of this user database.
      */
-    public String getId();
+    String getId();
 
 
     /**
      * @return the set of {@link Role}s defined in this user database.
      */
-    public Iterator<Role> getRoles();
+    Iterator<Role> getRoles();
 
 
     /**
      * @return the set of {@link User}s defined in this user database.
      */
-    public Iterator<User> getUsers();
+    Iterator<User> getUsers();
 
 
     // --------------------------------------------------------- Public Methods
@@ -62,7 +62,7 @@ public interface UserDatabase {
      *
      * @exception Exception if any exception is thrown during closing
      */
-    public void close() throws Exception;
+    void close() throws Exception;
 
 
     /**
@@ -72,7 +72,7 @@ public interface UserDatabase {
      * @param description The description of this group
      * @return The new group
      */
-    public Group createGroup(String groupname, String description);
+    Group createGroup(String groupname, String description);
 
 
     /**
@@ -82,7 +82,7 @@ public interface UserDatabase {
      * @param description The description of this role
      * @return The new role
      */
-    public Role createRole(String rolename, String description);
+    Role createRole(String rolename, String description);
 
 
     /**
@@ -93,7 +93,7 @@ public interface UserDatabase {
      * @param fullName The full name of the new user
      * @return The new user
      */
-    public User createUser(String username, String password, String fullName);
+    User createUser(String username, String password, String fullName);
 
 
     /**
@@ -102,7 +102,7 @@ public interface UserDatabase {
      *
      * @param groupname Name of the group to return
      */
-    public Group findGroup(String groupname);
+    Group findGroup(String groupname);
 
 
     /**
@@ -111,7 +111,7 @@ public interface UserDatabase {
      *
      * @param rolename Name of the role to return
      */
-    public Role findRole(String rolename);
+    Role findRole(String rolename);
 
 
     /**
@@ -120,7 +120,7 @@ public interface UserDatabase {
      *
      * @param username Name of the user to return
      */
-    public User findUser(String username);
+    User findUser(String username);
 
 
     /**
@@ -128,7 +128,7 @@ public interface UserDatabase {
      *
      * @exception Exception if any exception is thrown during opening
      */
-    public void open() throws Exception;
+    void open() throws Exception;
 
 
     /**
@@ -136,7 +136,7 @@ public interface UserDatabase {
      *
      * @param group The group to be removed
      */
-    public void removeGroup(Group group);
+    void removeGroup(Group group);
 
 
     /**
@@ -144,7 +144,7 @@ public interface UserDatabase {
      *
      * @param role The role to be removed
      */
-    public void removeRole(Role role);
+    void removeRole(Role role);
 
 
     /**
@@ -152,7 +152,7 @@ public interface UserDatabase {
      *
      * @param user The user to be removed
      */
-    public void removeUser(User user);
+    void removeUser(User user);
 
 
     /**
@@ -161,7 +161,7 @@ public interface UserDatabase {
      *
      * @param group The group that has been modified
      */
-    public default void modifiedGroup(Group group) {}
+    default void modifiedGroup(Group group) {}
 
 
     /**
@@ -170,7 +170,7 @@ public interface UserDatabase {
      *
      * @param role The role that has been modified
      */
-    public default void modifiedRole(Role role) {}
+    default void modifiedRole(Role role) {}
 
 
     /**
@@ -179,7 +179,7 @@ public interface UserDatabase {
      *
      * @param user The user that has been modified
      */
-    public default void modifiedUser(User user) {}
+    default void modifiedUser(User user) {}
 
 
     /**
@@ -188,14 +188,14 @@ public interface UserDatabase {
      *
      * @exception Exception if any exception is thrown during saving
      */
-    public void save() throws Exception;
+    void save() throws Exception;
 
 
     /**
      * Perform any background processing (e.g. checking for changes in persisted
      * storage) required for the user database.
      */
-    public default void backgroundProcess() {
+    default void backgroundProcess() {
         // NO-OP by default
     }
 
@@ -205,7 +205,7 @@ public interface UserDatabase {
      *
      * @return true
      */
-    public default boolean isAvailable() {
+    default boolean isAvailable() {
         return true;
     }
 
@@ -217,7 +217,7 @@ public interface UserDatabase {
      *
      * @return false
      */
-    public default boolean isSparse() {
+    default boolean isSparse() {
         return false;
     }
 }

==================================================
Wrapper.java
index 699cc1e51d..b986d27e80 100644
--- a/java/org/apache/catalina/Valve.java
+++ b/java/org/apache/catalina/Valve.java
@@ -45,7 +45,7 @@ public interface Valve {
     /**
      * @return the next Valve in the pipeline containing this Valve, if any.
      */
-    public Valve getNext();
+    Valve getNext();
 
 
     /**
@@ -53,7 +53,7 @@ public interface Valve {
      *
      * @param valve The new next valve, or <code>null</code> if none
      */
-    public void setNext(Valve valve);
+    void setNext(Valve valve);
 
 
     //---------------------------------------------------------- Public Methods
@@ -64,7 +64,7 @@ public interface Valve {
      * invoked inside the classloading context of this container. Unexpected
      * throwables will be caught and logged.
      */
-    public void backgroundProcess();
+    void backgroundProcess();
 
 
     /**
@@ -114,9 +114,9 @@ public interface Valve {
      * @exception ServletException if a servlet error occurs, or is thrown
      *  by a subsequently invoked Valve, Filter, or Servlet
      */
-    public void invoke(Request request, Response response)
+    void invoke(Request request, Response response)
         throws IOException, ServletException;
 
 
-    public boolean isAsyncSupported();
+    boolean isAsyncSupported();
 }

==================================================
AuthConfigFactoryImpl.java
index b40252eeae..0803161df9 100644
--- a/java/org/apache/catalina/Wrapper.java
+++ b/java/org/apache/catalina/Wrapper.java
@@ -48,12 +48,12 @@ public interface Wrapper extends Container {
     /**
      * Container event for adding a wrapper.
      */
-    public static final String ADD_MAPPING_EVENT = "addMapping";
+    String ADD_MAPPING_EVENT = "addMapping";
 
     /**
      * Container event for removing a wrapper.
      */
-    public static final String REMOVE_MAPPING_EVENT = "removeMapping";
+    String REMOVE_MAPPING_EVENT = "removeMapping";
 
     // ------------------------------------------------------------- Properties
 
@@ -65,7 +65,7 @@ public interface Wrapper extends Container {
      * the servlet is currently available.  A value equal to Long.MAX_VALUE
      * is considered to mean that unavailability is permanent.
      */
-    public long getAvailable();
+    long getAvailable();
 
 
     /**
@@ -76,14 +76,14 @@ public interface Wrapper extends Container {
      *
      * @param available The new available date/time
      */
-    public void setAvailable(long available);
+    void setAvailable(long available);
 
 
     /**
      * @return the load-on-startup order value (negative value means
      * load on first call).
      */
-    public int getLoadOnStartup();
+    int getLoadOnStartup();
 
 
     /**
@@ -92,13 +92,13 @@ public interface Wrapper extends Container {
      *
      * @param value New load-on-startup value
      */
-    public void setLoadOnStartup(int value);
+    void setLoadOnStartup(int value);
 
 
     /**
      * @return the run-as identity for this servlet.
      */
-    public String getRunAs();
+    String getRunAs();
 
 
     /**
@@ -106,13 +106,13 @@ public interface Wrapper extends Container {
      *
      * @param runAs New run-as identity value
      */
-    public void setRunAs(String runAs);
+    void setRunAs(String runAs);
 
 
     /**
      * @return the fully qualified servlet class name for this servlet.
      */
-    public String getServletClass();
+    String getServletClass();
 
 
     /**
@@ -120,7 +120,7 @@ public interface Wrapper extends Container {
      *
      * @param servletClass Servlet class name
      */
-    public void setServletClass(String servletClass);
+    void setServletClass(String servletClass);
 
 
     /**
@@ -135,19 +135,19 @@ public interface Wrapper extends Container {
      *
      * @throws ServletException If the target servlet cannot be loaded
      */
-    public String[] getServletMethods() throws ServletException;
+    String[] getServletMethods() throws ServletException;
 
 
     /**
      * @return <code>true</code> if this Servlet is currently unavailable.
      */
-    public boolean isUnavailable();
+    boolean isUnavailable();
 
 
     /**
      * @return the associated Servlet instance.
      */
-    public Servlet getServlet();
+    Servlet getServlet();
 
 
     /**
@@ -155,7 +155,7 @@ public interface Wrapper extends Container {
      *
      * @param servlet The associated Servlet
      */
-    public void setServlet(Servlet servlet);
+    void setServlet(Servlet servlet);
 
     // --------------------------------------------------------- Public Methods
 
@@ -166,7 +166,7 @@ public interface Wrapper extends Container {
      * @param name Name of this initialization parameter to add
      * @param value Value of this initialization parameter to add
      */
-    public void addInitParameter(String name, String value);
+    void addInitParameter(String name, String value);
 
 
     /**
@@ -174,7 +174,7 @@ public interface Wrapper extends Container {
      *
      * @param mapping The new wrapper mapping
      */
-    public void addMapping(String mapping);
+    void addMapping(String mapping);
 
 
     /**
@@ -184,7 +184,7 @@ public interface Wrapper extends Container {
      * @param name Role name used within this servlet
      * @param link Role name used within the web application
      */
-    public void addSecurityReference(String name, String link);
+    void addSecurityReference(String name, String link);
 
 
     /**
@@ -197,7 +197,7 @@ public interface Wrapper extends Container {
      * @exception ServletException if a loading error occurs
      * @return a new Servlet instance
      */
-    public Servlet allocate() throws ServletException;
+    Servlet allocate() throws ServletException;
 
 
     /**
@@ -207,7 +207,7 @@ public interface Wrapper extends Container {
      *
      * @exception ServletException if a deallocation error occurs
      */
-    public void deallocate(Servlet servlet) throws ServletException;
+    void deallocate(Servlet servlet) throws ServletException;
 
 
     /**
@@ -216,20 +216,20 @@ public interface Wrapper extends Container {
      *
      * @param name Name of the requested initialization parameter
      */
-    public String findInitParameter(String name);
+    String findInitParameter(String name);
 
 
     /**
      * @return the names of all defined initialization parameters for this
      * servlet.
      */
-    public String[] findInitParameters();
+    String[] findInitParameters();
 
 
     /**
      * @return the mappings associated with this wrapper.
      */
-    public String[] findMappings();
+    String[] findMappings();
 
 
     /**
@@ -238,20 +238,20 @@ public interface Wrapper extends Container {
      *
      * @param name Security role reference used within this servlet
      */
-    public String findSecurityReference(String name);
+    String findSecurityReference(String name);
 
 
     /**
      * @return the set of security role reference names associated with
      * this servlet, if any; otherwise return a zero-length array.
      */
-    public String[] findSecurityReferences();
+    String[] findSecurityReferences();
 
 
     /**
      * Increment the error count value used when monitoring.
      */
-    public void incrementErrorCount();
+    void incrementErrorCount();
 
 
     /**
@@ -263,7 +263,7 @@ public interface Wrapper extends Container {
      * @exception ServletException if the Servlet init() method threw
      *  an exception or if some other loading problem occurs
      */
-    public void load() throws ServletException;
+    void load() throws ServletException;
 
 
     /**
@@ -271,7 +271,7 @@ public interface Wrapper extends Container {
      *
      * @param name Name of the initialization parameter to remove
      */
-    public void removeInitParameter(String name);
+    void removeInitParameter(String name);
 
 
     /**
@@ -279,7 +279,7 @@ public interface Wrapper extends Container {
      *
      * @param mapping The pattern to remove
      */
-    public void removeMapping(String mapping);
+    void removeMapping(String mapping);
 
 
     /**
@@ -287,7 +287,7 @@ public interface Wrapper extends Container {
      *
      * @param name Security role used within this servlet to be removed
      */
-    public void removeSecurityReference(String name);
+    void removeSecurityReference(String name);
 
 
     /**
@@ -297,7 +297,7 @@ public interface Wrapper extends Container {
      * @param unavailable The exception that occurred, or <code>null</code>
      *  to mark this Servlet as permanently unavailable
      */
-    public void unavailable(UnavailableException unavailable);
+    void unavailable(UnavailableException unavailable);
 
 
     /**
@@ -309,7 +309,7 @@ public interface Wrapper extends Container {
      *
      * @exception ServletException if an unload error occurs
      */
-    public void unload() throws ServletException;
+    void unload() throws ServletException;
 
 
     /**
@@ -317,7 +317,7 @@ public interface Wrapper extends Container {
      * multi-part configuration has been defined, then <code>null</code> will be
      * returned.
      */
-    public MultipartConfigElement getMultipartConfigElement();
+    MultipartConfigElement getMultipartConfigElement();
 
 
     /**
@@ -326,7 +326,7 @@ public interface Wrapper extends Container {
      *
      * @param multipartConfig The configuration associated with the Servlet
      */
-    public void setMultipartConfigElement(
+    void setMultipartConfigElement(
             MultipartConfigElement multipartConfig);
 
     /**
@@ -335,40 +335,40 @@ public interface Wrapper extends Container {
      *
      * @return <code>true</code> if the Servlet supports async
      */
-    public boolean isAsyncSupported();
+    boolean isAsyncSupported();
 
     /**
      * Set the async support for the associated Servlet.
      *
      * @param asyncSupport the new value
      */
-    public void setAsyncSupported(boolean asyncSupport);
+    void setAsyncSupported(boolean asyncSupport);
 
     /**
      * Is the associated Servlet enabled? Defaults to <code>true</code>.
      *
      * @return <code>true</code> if the Servlet is enabled
      */
-    public boolean isEnabled();
+    boolean isEnabled();
 
     /**
      * Sets the enabled attribute for the associated servlet.
      *
      * @param enabled the new value
      */
-    public void setEnabled(boolean enabled);
+    void setEnabled(boolean enabled);
 
     /**
      * Is the Servlet overridable by a ServletContainerInitializer?
      *
      * @return <code>true</code> if the Servlet can be overridden in a ServletContainerInitializer
      */
-    public boolean isOverridable();
+    boolean isOverridable();
 
     /**
      * Sets the overridable attribute for this Servlet.
      *
      * @param overridable the new value
      */
-    public void setOverridable(boolean overridable);
+    void setOverridable(boolean overridable);
 }

==================================================
Request.java
index 644e76a2bc..41c1de3973 100644
--- a/java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java
+++ b/java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java
@@ -542,7 +542,7 @@ public class AuthConfigFactoryImpl extends AuthConfigFactory {
         private final RegistrationListener listener;
 
 
-        public RegistrationListenerWrapper(String messageLayer, String appContext,
+        RegistrationListenerWrapper(String messageLayer, String appContext,
                 RegistrationListener listener) {
             this.messageLayer = messageLayer;
             this.appContext = appContext;
@@ -570,7 +570,7 @@ public class AuthConfigFactoryImpl extends AuthConfigFactory {
 
         private final ServerAuthModule module;
 
-        public SingleModuleServerAuthContext(ServerAuthModule module) {
+        SingleModuleServerAuthContext(ServerAuthModule module) {
             this.module = module;
         }
 
@@ -597,7 +597,7 @@ public class AuthConfigFactoryImpl extends AuthConfigFactory {
         private final ServerAuthContext context;
         private final String appContext;
 
-        public SingleContextServerAuthConfig(ServerAuthContext context, String appContext) {
+        SingleContextServerAuthConfig(ServerAuthContext context, String appContext) {
             this.context = context;
             this.appContext = appContext;
         }
@@ -638,7 +638,7 @@ public class AuthConfigFactoryImpl extends AuthConfigFactory {
 
         private final ServerAuthConfig serverAuthConfig;
 
-        public SingleConfigAuthConfigProvider(ServerAuthConfig serverAuthConfig) {
+        SingleConfigAuthConfigProvider(ServerAuthConfig serverAuthConfig) {
             this.serverAuthConfig = serverAuthConfig;
         }
 

==================================================
ApplicationContext.java
index 8297363352..41fd4f62cb 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -3379,7 +3379,7 @@ public class Request implements HttpServletRequest {
 
     // ----------------------------------------------------- Special attributes handling
 
-    private static interface SpecialAttributeAdapter {
+    private interface SpecialAttributeAdapter {
         Object get(Request request, String name);
 
         void set(Request request, String name, Object value);

==================================================
ApplicationDispatcher.java
index 6e95d1c7df..a04a7706b0 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -1261,7 +1261,7 @@ public class ApplicationContext implements ServletContext {
         public MessageBytes uriMB;
         public MappingData mappingData;
 
-        public DispatchData() {
+        DispatchData() {
             uriMB = MessageBytes.newInstance();
             CharChunk uriCC = uriMB.getCharChunk();
             uriCC.setLimit(-1);

==================================================
ApplicationHttpRequest.java
index 15946f97c2..60976a5587 100644
--- a/java/org/apache/catalina/core/ApplicationDispatcher.java
+++ b/java/org/apache/catalina/core/ApplicationDispatcher.java
@@ -122,7 +122,7 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
      * @param mapping     The mapping for this resource (if any)
      * @param name        Servlet name (if a named dispatcher was created) else <code>null</code>
      */
-    public ApplicationDispatcher(Wrapper wrapper, String requestURI, String servletPath, String pathInfo,
+    ApplicationDispatcher(Wrapper wrapper, String requestURI, String servletPath, String pathInfo,
             String queryString, HttpServletMapping mapping, String name) {
 
         super();

==================================================
ApplicationHttpResponse.java
index f4df803edb..46118f0161 100644
--- a/java/org/apache/catalina/core/ApplicationHttpRequest.java
+++ b/java/org/apache/catalina/core/ApplicationHttpRequest.java
@@ -95,7 +95,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      * @param context      The target context for the wrapped request
      * @param crossContext {@code true} if the wrapped request will be a cross-context request, otherwise {@code false}
      */
-    public ApplicationHttpRequest(HttpServletRequest request, Context context, boolean crossContext) {
+    ApplicationHttpRequest(HttpServletRequest request, Context context, boolean crossContext) {
 
         super(request);
         this.context = context;

==================================================
ApplicationMapping.java
index 2942c84a0c..73ae1eddf6 100644
--- a/java/org/apache/catalina/core/ApplicationHttpResponse.java
+++ b/java/org/apache/catalina/core/ApplicationHttpResponse.java
@@ -47,7 +47,7 @@ class ApplicationHttpResponse extends HttpServletResponseWrapper {
      * @param included <code>true</code> if this response is being processed by a
      *                     <code>RequestDispatcher.include()</code> call
      */
-    public ApplicationHttpResponse(HttpServletResponse response, boolean included) {
+    ApplicationHttpResponse(HttpServletResponse response, boolean included) {
 
         super(response);
         setIncluded(included);

==================================================
ApplicationRequest.java
index 52389434ab..fd3cd06f3e 100644
--- a/java/org/apache/catalina/core/ApplicationMapping.java
+++ b/java/org/apache/catalina/core/ApplicationMapping.java
@@ -87,7 +87,7 @@ public class ApplicationMapping {
         private final MappingMatch mappingType;
         private final String servletName;
 
-        public MappingImpl(String matchValue, String pattern, MappingMatch mappingType, String servletName) {
+        MappingImpl(String matchValue, String pattern, MappingMatch mappingType, String servletName) {
             this.matchValue = matchValue;
             this.pattern = pattern;
             this.mappingType = mappingType;

==================================================
ApplicationResponse.java
index 6e2ff1993a..050aa92145 100644
--- a/java/org/apache/catalina/core/ApplicationRequest.java
+++ b/java/org/apache/catalina/core/ApplicationRequest.java
@@ -64,7 +64,7 @@ class ApplicationRequest extends ServletRequestWrapper {
      *
      * @param request The servlet request being wrapped
      */
-    public ApplicationRequest(ServletRequest request) {
+    ApplicationRequest(ServletRequest request) {
 
         super(request);
         setRequest(request);

==================================================
AsyncContextImpl.java
index 2408a0efc1..2173f0a597 100644
--- a/java/org/apache/catalina/core/ApplicationResponse.java
+++ b/java/org/apache/catalina/core/ApplicationResponse.java
@@ -45,7 +45,7 @@ class ApplicationResponse extends ServletResponseWrapper {
      * @param included <code>true</code> if this response is being processed by a
      *                     <code>RequestDispatcher.include()</code> call
      */
-    public ApplicationResponse(ServletResponse response, boolean included) {
+    ApplicationResponse(ServletResponse response, boolean included) {
 
         super(response);
         setIncluded(included);

==================================================
ContainerBase.java
index 6f2fa4e8de..3d2bf5f8c6 100644
--- a/java/org/apache/catalina/core/AsyncContextImpl.java
+++ b/java/org/apache/catalina/core/AsyncContextImpl.java
@@ -510,7 +510,7 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
         private final Context context;
         private final org.apache.coyote.Request coyoteRequest;
 
-        public RunnableWrapper(Runnable wrapped, Context ctxt, org.apache.coyote.Request coyoteRequest) {
+        RunnableWrapper(Runnable wrapped, Context ctxt, org.apache.coyote.Request coyoteRequest) {
             this.wrapped = wrapped;
             this.context = ctxt;
             this.coyoteRequest = coyoteRequest;
@@ -547,7 +547,7 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
         private final ServletRequest servletRequest;
         private final ServletResponse servletResponse;
 
-        public AsyncRunnable(Request request, AsyncDispatcher applicationDispatcher, ServletRequest servletRequest,
+        AsyncRunnable(Request request, AsyncDispatcher applicationDispatcher, ServletRequest servletRequest,
                 ServletResponse servletResponse) {
             this.request = request;
             this.applicationDispatcher = applicationDispatcher;

==================================================
DefaultInstanceManager.java
index 057a9fd3cc..9dc018be15 100644
--- a/java/org/apache/catalina/core/ContainerBase.java
+++ b/java/org/apache/catalina/core/ContainerBase.java
@@ -1290,7 +1290,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase implements Contai
 
         private Container child;
 
-        public StartChild(Container child) {
+        StartChild(Container child) {
             this.child = child;
         }
 
@@ -1305,7 +1305,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase implements Contai
 
         private Container child;
 
-        public StopChild(Container child) {
+        StopChild(Container child) {
             this.child = child;
         }
 

==================================================
StandardContext.java
index b2676c7480..b4d0e856b2 100644
--- a/java/org/apache/catalina/core/DefaultInstanceManager.java
+++ b/java/org/apache/catalina/core/DefaultInstanceManager.java
@@ -653,7 +653,7 @@ public class DefaultInstanceManager implements InstanceManager {
         private final String name;
         private final AnnotationCacheEntryType type;
 
-        public AnnotationCacheEntry(String accessibleObjectName, Class<?>[] paramTypes, String name,
+        AnnotationCacheEntry(String accessibleObjectName, Class<?>[] paramTypes, String name,
                 AnnotationCacheEntryType type) {
             this.accessibleObjectName = accessibleObjectName;
             this.paramTypes = paramTypes;

==================================================
StandardContextValve.java
index be5d325a72..323a39cb12 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -6048,7 +6048,7 @@ public class StandardContext extends ContainerBase implements Context, Notificat
 
         private final ServletContext sc;
 
-        public NoPluggabilityServletContext(ServletContext sc) {
+        NoPluggabilityServletContext(ServletContext sc) {
             this.sc = sc;
         }
 

==================================================
StandardEngineValve.java
index 85fe03aa3e..a1499dbf96 100644
--- a/java/org/apache/catalina/core/StandardContextValve.java
+++ b/java/org/apache/catalina/core/StandardContextValve.java
@@ -41,7 +41,7 @@ final class StandardContextValve extends ValveBase {
 
     private static final StringManager sm = StringManager.getManager(StandardContextValve.class);
 
-    public StandardContextValve() {
+    StandardContextValve() {
         super(true);
     }
 
@@ -57,7 +57,7 @@ final class StandardContextValve extends ValveBase {
      * @exception ServletException if a servlet error occurred
      */
     @Override
-    public final void invoke(Request request, Response response) throws IOException, ServletException {
+    public void invoke(Request request, Response response) throws IOException, ServletException {
 
         // Disallow any direct access to resources under WEB-INF or META-INF
         MessageBytes requestPathMB = request.getRequestPathMB();

==================================================
StandardHostValve.java
index 5e21a1c418..5c3f0cea03 100644
--- a/java/org/apache/catalina/core/StandardEngineValve.java
+++ b/java/org/apache/catalina/core/StandardEngineValve.java
@@ -35,7 +35,7 @@ import org.apache.catalina.valves.ValveBase;
 final class StandardEngineValve extends ValveBase {
 
     // ------------------------------------------------------ Constructor
-    public StandardEngineValve() {
+    StandardEngineValve() {
         super(true);
     }
 
@@ -53,7 +53,7 @@ final class StandardEngineValve extends ValveBase {
      * @exception ServletException if a servlet error occurred
      */
     @Override
-    public final void invoke(Request request, Response response) throws IOException, ServletException {
+    public void invoke(Request request, Response response) throws IOException, ServletException {
 
         // Select the Host to be used for this Request
         Host host = request.getHost();

==================================================
StandardServer.java
index 474d0be5e3..9814a3cc28 100644
--- a/java/org/apache/catalina/core/StandardHostValve.java
+++ b/java/org/apache/catalina/core/StandardHostValve.java
@@ -59,7 +59,7 @@ final class StandardHostValve extends ValveBase {
 
     // ------------------------------------------------------ Constructor
 
-    public StandardHostValve() {
+    StandardHostValve() {
         super(true);
     }
 
@@ -77,7 +77,7 @@ final class StandardHostValve extends ValveBase {
      * @exception ServletException if a servlet error occurred
      */
     @Override
-    public final void invoke(Request request, Response response) throws IOException, ServletException {
+    public void invoke(Request request, Response response) throws IOException, ServletException {
 
         // Select the Context to be used for this Request
         Context context = request.getContext();

==================================================
StandardWrapperValve.java
index 7dfa3276b6..6b5f4f181f 100644
--- a/java/org/apache/catalina/core/StandardServer.java
+++ b/java/org/apache/catalina/core/StandardServer.java
@@ -472,7 +472,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
     /**
      * @return The period between two lifecycle events, in seconds
      */
-    public final int getPeriodicEventDelay() {
+    public int getPeriodicEventDelay() {
         return periodicEventDelay;
     }
 
@@ -482,7 +482,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
      *
      * @param periodicEventDelay The period in seconds, negative or zero will disable events
      */
-    public final void setPeriodicEventDelay(int periodicEventDelay) {
+    public void setPeriodicEventDelay(int periodicEventDelay) {
         this.periodicEventDelay = periodicEventDelay;
     }
 
@@ -1075,7 +1075,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
 
 
     @Override
-    protected final String getObjectNameKeyProperties() {
+    protected String getObjectNameKeyProperties() {
         return "type=Server";
     }
 

==================================================
CsrfPreventionFilter.java
index cfed5bd8ce..5426004930 100644
--- a/java/org/apache/catalina/core/StandardWrapperValve.java
+++ b/java/org/apache/catalina/core/StandardWrapperValve.java
@@ -53,7 +53,7 @@ final class StandardWrapperValve extends ValveBase {
 
     // ------------------------------------------------------ Constructor
 
-    public StandardWrapperValve() {
+    StandardWrapperValve() {
         super(true);
     }
 
@@ -82,7 +82,7 @@ final class StandardWrapperValve extends ValveBase {
      * @exception ServletException if a servlet error occurred
      */
     @Override
-    public final void invoke(Request request, Response response) throws IOException, ServletException {
+    public void invoke(Request request, Response response) throws IOException, ServletException {
 
         // Initialize local variables we may need
         boolean unavailable = false;

==================================================
ExpiresFilter.java
index 349e755c14..28769a0b59 100644
--- a/java/org/apache/catalina/filters/CsrfPreventionFilter.java
+++ b/java/org/apache/catalina/filters/CsrfPreventionFilter.java
@@ -324,7 +324,7 @@ public class CsrfPreventionFilter extends CsrfPreventionFilterBase {
     }
 
 
-    protected static interface NonceCache<T> extends Serializable {
+    protected interface NonceCache<T> extends Serializable {
         void add(T nonce);
 
         boolean contains(T nonce);

==================================================
HttpHeaderSecurityFilter.java
index 4ea79d6cbb..9994d5e91e 100644
--- a/java/org/apache/catalina/filters/ExpiresFilter.java
+++ b/java/org/apache/catalina/filters/ExpiresFilter.java
@@ -451,7 +451,7 @@ public class ExpiresFilter extends FilterBase {
 
         private final int calendarField;
 
-        private DurationUnit(int calendarField) {
+        DurationUnit(int calendarField) {
             this.calendarField = calendarField;
         }
 

==================================================
RestCsrfPreventionFilter.java
index e20ace2d95..d4870a6214 100644
--- a/java/org/apache/catalina/filters/HttpHeaderSecurityFilter.java
+++ b/java/org/apache/catalina/filters/HttpHeaderSecurityFilter.java
@@ -254,7 +254,7 @@ public class HttpHeaderSecurityFilter extends FilterBase {
 
         private final String headerValue;
 
-        private XFrameOption(String headerValue) {
+        XFrameOption(String headerValue) {
             this.headerValue = headerValue;
         }
 

==================================================
CatalinaCluster.java
index f542976f4d..d21ffd3495 100644
--- a/java/org/apache/catalina/filters/RestCsrfPreventionFilter.java
+++ b/java/org/apache/catalina/filters/RestCsrfPreventionFilter.java
@@ -125,14 +125,14 @@ public class RestCsrfPreventionFilter extends CsrfPreventionFilterBase {
         chain.doFilter(request, response);
     }
 
-    private static interface RestCsrfPreventionStrategy {
-        static final NonceSupplier<HttpServletRequest, String> nonceFromRequestHeader = HttpServletRequest::getHeader;
-        static final NonceSupplier<HttpServletRequest, String[]> nonceFromRequestParams = ServletRequest::getParameterValues;
-        static final NonceSupplier<HttpSession, String> nonceFromSession = (s, k) -> Objects.isNull(s) ? null
+    private interface RestCsrfPreventionStrategy {
+        NonceSupplier<HttpServletRequest, String> nonceFromRequestHeader = HttpServletRequest::getHeader;
+        NonceSupplier<HttpServletRequest, String[]> nonceFromRequestParams = ServletRequest::getParameterValues;
+        NonceSupplier<HttpSession, String> nonceFromSession = (s, k) -> Objects.isNull(s) ? null
                 : (String) s.getAttribute(k);
 
-        static final NonceConsumer<HttpServletResponse> nonceToResponse = HttpServletResponse::setHeader;
-        static final NonceConsumer<HttpSession> nonceToSession = HttpSession::setAttribute;
+        NonceConsumer<HttpServletResponse> nonceToResponse = HttpServletResponse::setHeader;
+        NonceConsumer<HttpSession> nonceToSession = HttpSession::setAttribute;
 
         boolean apply(HttpServletRequest request, HttpServletResponse response) throws IOException;
     }
@@ -220,12 +220,12 @@ public class RestCsrfPreventionFilter extends CsrfPreventionFilterBase {
     }
 
     @FunctionalInterface
-    private static interface NonceSupplier<T, R> {
+    private interface NonceSupplier<T, R> {
         R getNonce(T supplier, String key);
     }
 
     @FunctionalInterface
-    private static interface NonceConsumer<T> {
+    private interface NonceConsumer<T> {
         void setNonce(T consumer, String key, String value);
     }
 

==================================================
ClusterDeployer.java
index 0b603eff52..7246d586d9 100644
--- a/java/org/apache/catalina/ha/CatalinaCluster.java
+++ b/java/org/apache/catalina/ha/CatalinaCluster.java
@@ -36,7 +36,7 @@ public interface CatalinaCluster extends Cluster {
      * Sends a message to all the members in the cluster
      * @param msg ClusterMessage
      */
-    public void send(ClusterMessage msg);
+    void send(ClusterMessage msg);
 
     /**
      * Sends a message to a specific member in the cluster.
@@ -44,7 +44,7 @@ public interface CatalinaCluster extends Cluster {
      * @param msg ClusterMessage
      * @param dest Member
      */
-    public void send(ClusterMessage msg, Member dest);
+    void send(ClusterMessage msg, Member dest);
 
     /**
      * Sends a message with the specified sendOptions to a specific member in the cluster.
@@ -53,44 +53,44 @@ public interface CatalinaCluster extends Cluster {
      * @param dest Member
      * @param sendOptions sendOptions
      */
-    public void send(ClusterMessage msg, Member dest, int sendOptions);
+    void send(ClusterMessage msg, Member dest, int sendOptions);
 
     /**
      * @return <code>true</code> if the cluster has members.
      */
-    public boolean hasMembers();
+    boolean hasMembers();
 
     /**
      * @return an array containing all the members currently participating in the cluster.
      */
-    public Member[] getMembers();
+    Member[] getMembers();
 
     /**
      * @return the member that represents this node.
      */
-    public Member getLocalMember();
+    Member getLocalMember();
 
-    public void addValve(Valve valve);
+    void addValve(Valve valve);
 
-    public void addClusterListener(ClusterListener listener);
+    void addClusterListener(ClusterListener listener);
 
-    public void removeClusterListener(ClusterListener listener);
+    void removeClusterListener(ClusterListener listener);
 
-    public void setClusterDeployer(ClusterDeployer deployer);
+    void setClusterDeployer(ClusterDeployer deployer);
 
-    public ClusterDeployer getClusterDeployer();
+    ClusterDeployer getClusterDeployer();
 
     /**
      * @return The map of managers
      */
-    public Map<String,ClusterManager> getManagers();
+    Map<String,ClusterManager> getManagers();
 
     /**
      * Get Manager
      * @param name The manager name
      * @return The manager
      */
-    public Manager getManager(String name);
+    Manager getManager(String name);
 
     /**
      * Get a new cluster name for a manager.
@@ -98,13 +98,13 @@ public interface CatalinaCluster extends Cluster {
      * @param manager The manager
      * @return the manager name in the cluster
      */
-    public String getManagerName(String name, Manager manager);
+    String getManagerName(String name, Manager manager);
 
-    public Valve[] getValves();
+    Valve[] getValves();
 
-    public void setChannel(Channel channel);
+    void setChannel(Channel channel);
 
-    public Channel getChannel();
+    Channel getChannel();
 
 
 }

==================================================
ClusterManager.java
index 9bc5826f18..47f385b781 100644
--- a/java/org/apache/catalina/ha/ClusterDeployer.java
+++ b/java/org/apache/catalina/ha/ClusterDeployer.java
@@ -32,13 +32,13 @@ public interface ClusterDeployer extends ChannelListener {
      * Start the cluster deployer, the owning container will invoke this
      * @throws Exception - if failure to start cluster
      */
-    public void start() throws Exception;
+    void start() throws Exception;
 
     /**
      * Stops the cluster deployer, the owning container will invoke this
      * @throws LifecycleException Error stopping cluster deployer
      */
-    public void stop() throws LifecycleException;
+    void stop() throws LifecycleException;
 
     /**
      * Install a new web application, whose web application archive is at the
@@ -62,7 +62,7 @@ public interface ClusterDeployer extends ChannelListener {
      * @exception IOException if an input/output error was encountered
      *  during installation
      */
-    public void install(String contextName, File webapp) throws IOException;
+    void install(String contextName, File webapp) throws IOException;
 
     /**
      * Remove an existing web application, attached to the specified context
@@ -82,23 +82,23 @@ public interface ClusterDeployer extends ChannelListener {
      * @exception IOException if an input/output error occurs during
      *  removal
      */
-    public void remove(String contextName, boolean undeploy) throws IOException;
+    void remove(String contextName, boolean undeploy) throws IOException;
 
     /**
      * call from container Background Process
      */
-    public void backgroundProcess();
+    void backgroundProcess();
 
     /**
      * Returns the cluster the cluster deployer is associated with
      * @return CatalinaCluster
      */
-    public CatalinaCluster getCluster();
+    CatalinaCluster getCluster();
 
     /**
      * Associates the cluster deployer with a cluster
      * @param cluster CatalinaCluster
      */
-    public void setCluster(CatalinaCluster cluster);
+    void setCluster(CatalinaCluster cluster);
 
 }

==================================================
ClusterMessage.java
index 875b3a40a1..4dc9fdf4ec 100644
--- a/java/org/apache/catalina/ha/ClusterManager.java
+++ b/java/org/apache/catalina/ha/ClusterManager.java
@@ -38,7 +38,7 @@ public interface ClusterManager extends Manager {
     * receiving replication messages.
     * @param msg - the message received.
     */
-   public void messageDataReceived(ClusterMessage msg);
+   void messageDataReceived(ClusterMessage msg);
 
    /**
     * When the request has been completed, the replication valve
@@ -50,7 +50,7 @@ public interface ClusterManager extends Manager {
     * @param sessionId - the sessionId that just completed.
     * @return a SessionMessage to be sent.
     */
-   public ClusterMessage requestCompleted(String sessionId);
+   ClusterMessage requestCompleted(String sessionId);
 
    /**
     * When the manager expires session not tied to a request.
@@ -58,25 +58,25 @@ public interface ClusterManager extends Manager {
     * that should expire and that should be sent across the wire.
     * @return String[] The invalidated sessions
     */
-   public String[] getInvalidatedSessions();
+   String[] getInvalidatedSessions();
 
    /**
     * Return the name of the manager, at host /context name and at engine hostname+/context.
     * @return String
     * @since 5.5.10
     */
-   public String getName();
+   String getName();
 
    /**
     * Set the name of the manager, at host /context name and at engine hostname+/context
     * @param name The manager name
     * @since 5.5.10
     */
-   public void setName(String name);
+   void setName(String name);
 
-   public CatalinaCluster getCluster();
+   CatalinaCluster getCluster();
 
-   public void setCluster(CatalinaCluster cluster);
+   void setCluster(CatalinaCluster cluster);
 
    /**
     * Open stream and use correct ClassLoader (Container), switching thread
@@ -86,11 +86,11 @@ public interface ClusterManager extends Manager {
     * @return The object input stream
     * @throws IOException An error occurred
     */
-   public ReplicationStream getReplicationStream(byte[] data) throws IOException;
+   ReplicationStream getReplicationStream(byte[] data) throws IOException;
 
-   public ReplicationStream getReplicationStream(byte[] data, int offset, int length) throws IOException;
+   ReplicationStream getReplicationStream(byte[] data, int offset, int length) throws IOException;
 
-   public boolean isNotifyListenersOnReplication();
+   boolean isNotifyListenersOnReplication();
 
-   public ClusterManager cloneFromTemplate();
+   ClusterManager cloneFromTemplate();
 }

==================================================
ClusterSession.java
index db637ebabb..452df35d1c 100644
--- a/java/org/apache/catalina/ha/ClusterMessage.java
+++ b/java/org/apache/catalina/ha/ClusterMessage.java
@@ -21,9 +21,9 @@ import java.io.Serializable;
 import org.apache.catalina.tribes.Member;
 
 public interface ClusterMessage extends Serializable {
-    public Member getAddress();
-    public void setAddress(Member member);
-    public String getUniqueId();
-    public long getTimestamp();
-    public void setTimestamp(long timestamp);
+    Member getAddress();
+    void setAddress(Member member);
+    String getUniqueId();
+    long getTimestamp();
+    void setTimestamp(long timestamp);
 }

==================================================
ClusterValve.java
index 61ad6d77b5..c8b3a5f583 100644
--- a/java/org/apache/catalina/ha/ClusterSession.java
+++ b/java/org/apache/catalina/ha/ClusterSession.java
@@ -26,13 +26,13 @@ public interface ClusterSession extends Session, HttpSession {
     * case, the manager can expire it upon timeout.
     * @return True if this session is primary
     */
-   public boolean isPrimarySession();
+   boolean isPrimarySession();
 
    /**
     * Sets whether this is the primary session or not.
     * @param primarySession Flag value
     */
-   public void setPrimarySession(boolean primarySession);
+   void setPrimarySession(boolean primarySession);
 
 
 }

==================================================
Sender.java
index 4fc0fc2754..6a3a26bcf9 100644
--- a/java/org/apache/catalina/ha/ClusterValve.java
+++ b/java/org/apache/catalina/ha/ClusterValve.java
@@ -28,11 +28,11 @@ public interface ClusterValve extends Valve{
      * Returns the cluster the cluster deployer is associated with
      * @return CatalinaCluster
      */
-    public CatalinaCluster getCluster();
+    CatalinaCluster getCluster();
 
     /**
      * Associates the cluster deployer with a cluster
      * @param cluster CatalinaCluster
      */
-    public void setCluster(CatalinaCluster cluster);
+    void setCluster(CatalinaCluster cluster);
 }

==================================================
FileChangeListener.java
index 4a161a2986..7c0d618e04 100644
--- a/java/org/apache/catalina/ha/backend/Sender.java
+++ b/java/org/apache/catalina/ha/backend/Sender.java
@@ -26,7 +26,7 @@ public interface Sender {
    * @param config The heartbeat listener configuration
    * @throws Exception An error occurred
    */
-  public void init(HeartbeatListener config) throws Exception;
+  void init(HeartbeatListener config) throws Exception;
 
   /**
    * Send the message to the proxies
@@ -34,5 +34,5 @@ public interface Sender {
    * @return <code>0</code> if no error occurred, <code>-1</code> otherwise
    * @throws Exception An error occurred
    */
-  public int send(String mess) throws Exception;
+  int send(String mess) throws Exception;
 }

==================================================
DeltaRequest.java
index 4aefc4cb7c..ac43b5701a 100644
--- a/java/org/apache/catalina/ha/deploy/FileChangeListener.java
+++ b/java/org/apache/catalina/ha/deploy/FileChangeListener.java
@@ -18,6 +18,6 @@ package org.apache.catalina.ha.deploy;
 import java.io.File;
 
 public interface FileChangeListener {
-    public void fileModified(File f);
-    public void fileRemoved(File f);
+    void fileModified(File f);
+    void fileRemoved(File f);
 }

==================================================
SessionMessage.java
index 57154a8e3c..4246f3397b 100644
--- a/java/org/apache/catalina/ha/session/DeltaRequest.java
+++ b/java/org/apache/catalina/ha/session/DeltaRequest.java
@@ -347,11 +347,11 @@ public class DeltaRequest implements Externalizable {
         private int action;
         private int type;
 
-        public AttributeInfo() {
+        AttributeInfo() {
             this(-1, -1, null, null);
         }
 
-        public AttributeInfo(int type,
+        AttributeInfo(int type,
                              int action,
                              String name,
                              Object value) {

==================================================
WebappClassLoaderBase.java
index 83384a4ed5..96dcc66fe0 100644
--- a/java/org/apache/catalina/ha/session/SessionMessage.java
+++ b/java/org/apache/catalina/ha/session/SessionMessage.java
@@ -39,68 +39,68 @@ public interface SessionMessage extends ClusterMessage {
     /**
      * Event type used when a session has been created on a node
      */
-    public static final int EVT_SESSION_CREATED = 1;
+    int EVT_SESSION_CREATED = 1;
     /**
      * Event type used when a session has expired
      */
-    public static final int EVT_SESSION_EXPIRED = 2;
+    int EVT_SESSION_EXPIRED = 2;
 
     /**
      * Event type used when a session has been accessed (ie, last access time
      * has been updated. This is used so that the replicated sessions will not expire
      * on the network
      */
-    public static final int EVT_SESSION_ACCESSED = 3;
+    int EVT_SESSION_ACCESSED = 3;
     /**
      * Event type used when a server comes online for the first time.
      * The first thing the newly started server wants to do is to grab the
      * all the sessions from one of the nodes and keep the same state in there
      */
-    public static final int EVT_GET_ALL_SESSIONS = 4;
+    int EVT_GET_ALL_SESSIONS = 4;
     /**
      * Event type used when an attribute has been added to a session,
      * the attribute will be sent to all the other nodes in the cluster
      */
-    public static final int EVT_SESSION_DELTA  = 13;
+    int EVT_SESSION_DELTA  = 13;
 
     /**
      * When a session state is transferred, this is the event.
      */
-    public static final int EVT_ALL_SESSION_DATA = 12;
+    int EVT_ALL_SESSION_DATA = 12;
 
     /**
      * When a session state is complete transferred, this is the event.
      */
-    public static final int EVT_ALL_SESSION_TRANSFERCOMPLETE = 14;
+    int EVT_ALL_SESSION_TRANSFERCOMPLETE = 14;
 
     /**
      * Event type used when a sessionID has been changed.
      */
-    public static final int EVT_CHANGE_SESSION_ID = 15;
+    int EVT_CHANGE_SESSION_ID = 15;
 
     /**
      * Event type used when context manager doesn't exist.
      * This is used when the manager which send a session state does not exist.
      */
-    public static final int EVT_ALL_SESSION_NOCONTEXTMANAGER = 16;
+    int EVT_ALL_SESSION_NOCONTEXTMANAGER = 16;
 
-    public String getContextName();
+    String getContextName();
 
-    public String getEventTypeString();
+    String getEventTypeString();
 
     /**
      * returns the event type
      * @return one of the event types EVT_XXXX
      */
-    public int getEventType();
+    int getEventType();
     /**
      * @return the serialized data for the session
      */
-    public byte[] getSession();
+    byte[] getSession();
     /**
      * @return the session ID for the session
      */
-    public String getSessionID();
+    String getSessionID();
 
 
 }//SessionMessage

==================================================
Mapper.java
index c334e1bf19..9ef7dad1d2 100644
--- a/java/org/apache/catalina/loader/WebappClassLoaderBase.java
+++ b/java/org/apache/catalina/loader/WebappClassLoaderBase.java
@@ -1563,7 +1563,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
      *
      * If only apps cleaned up after themselves...
      */
-    private final void clearReferencesJdbc() {
+    private void clearReferencesJdbc() {
         // We know roughly how big the class will be (~ 1K) so allow 2k as a
         // starting point
         byte[] classBytes = new byte[2048];
@@ -2533,7 +2533,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
         private final Enumeration<URL>[] sources;
         private int index = 0;
 
-        public CombinedEnumeration(Enumeration<URL> enum1, Enumeration<URL> enum2) {
+        CombinedEnumeration(Enumeration<URL> enum1, Enumeration<URL> enum2) {
             @SuppressWarnings("unchecked")
             Enumeration<URL>[] sources = new Enumeration[] { enum1, enum2 };
             this.sources = sources;

==================================================
MBeanFactory.java
index d8a35c9203..9a3cfd833f 100644
--- a/java/org/apache/catalina/mapper/Mapper.java
+++ b/java/org/apache/catalina/mapper/Mapper.java
@@ -705,7 +705,7 @@ public final class Mapper {
      *
      * @throws IOException If an error occurs while manipulating the URI during the mapping
      */
-    private final void internalMap(CharChunk host, CharChunk uri, String version, MappingData mappingData)
+    private void internalMap(CharChunk host, CharChunk uri, String version, MappingData mappingData)
             throws IOException {
 
         if (mappingData.host != null) {
@@ -829,7 +829,7 @@ public final class Mapper {
      *
      * @throws IOException if the buffers are too small to hold the results of the mapping.
      */
-    private final void internalMapWrapper(ContextVersion contextVersion, CharChunk path, MappingData mappingData)
+    private void internalMapWrapper(ContextVersion contextVersion, CharChunk path, MappingData mappingData)
             throws IOException {
 
         int pathOffset = path.getOffset();
@@ -1006,7 +1006,7 @@ public final class Mapper {
     /**
      * Exact mapping.
      */
-    private final void internalMapExactWrapper(MappedWrapper[] wrappers, CharChunk path, MappingData mappingData) {
+    private void internalMapExactWrapper(MappedWrapper[] wrappers, CharChunk path, MappingData mappingData) {
         if (path.length() == 0) {
             /*
              * Looking for a context root mapped servlet but that will be stored under the name "/"
@@ -1033,7 +1033,7 @@ public final class Mapper {
     /**
      * Wildcard mapping.
      */
-    private final void internalMapWildcardWrapper(MappedWrapper[] wrappers, int nesting, CharChunk path,
+    private void internalMapWildcardWrapper(MappedWrapper[] wrappers, int nesting, CharChunk path,
             MappingData mappingData) {
 
         int pathEnd = path.getEnd();
@@ -1086,7 +1086,7 @@ public final class Mapper {
      * @param mappingData      Mapping data for result
      * @param resourceExpected Is this mapping expecting to find a resource
      */
-    private final void internalMapExtensionWrapper(MappedWrapper[] wrappers, CharChunk path, MappingData mappingData,
+    private void internalMapExtensionWrapper(MappedWrapper[] wrappers, CharChunk path, MappingData mappingData,
             boolean resourceExpected) {
         char[] buf = path.getBuffer();
         int pathEnd = path.getEnd();
@@ -1127,7 +1127,7 @@ public final class Mapper {
      * Find a map element given its name in a sorted array of map elements. This will return the index for the closest
      * inferior or equal item in the given array.
      */
-    private static final <T> int find(MapElement<T>[] map, CharChunk name) {
+    private static <T> int find(MapElement<T>[] map, CharChunk name) {
         return find(map, name, name.getStart(), name.getEnd());
     }
 
@@ -1136,7 +1136,7 @@ public final class Mapper {
      * Find a map element given its name in a sorted array of map elements. This will return the index for the closest
      * inferior or equal item in the given array.
      */
-    private static final <T> int find(MapElement<T>[] map, CharChunk name, int start, int end) {
+    private static <T> int find(MapElement<T>[] map, CharChunk name, int start, int end) {
 
         int a = 0;
         int b = map.length - 1;
@@ -1180,7 +1180,7 @@ public final class Mapper {
      * Find a map element given its name in a sorted array of map elements. This will return the index for the closest
      * inferior or equal item in the given array.
      */
-    private static final <T> int findIgnoreCase(MapElement<T>[] map, CharChunk name) {
+    private static <T> int findIgnoreCase(MapElement<T>[] map, CharChunk name) {
         return findIgnoreCase(map, name, name.getStart(), name.getEnd());
     }
 
@@ -1189,7 +1189,7 @@ public final class Mapper {
      * Find a map element given its name in a sorted array of map elements. This will return the index for the closest
      * inferior or equal item in the given array.
      */
-    private static final <T> int findIgnoreCase(MapElement<T>[] map, CharChunk name, int start, int end) {
+    private static <T> int findIgnoreCase(MapElement<T>[] map, CharChunk name, int start, int end) {
 
         int a = 0;
         int b = map.length - 1;
@@ -1235,7 +1235,7 @@ public final class Mapper {
      *
      * @see #exactFind(MapElement[], String)
      */
-    private static final <T> int find(MapElement<T>[] map, String name) {
+    private static <T> int find(MapElement<T>[] map, String name) {
 
         int a = 0;
         int b = map.length - 1;
@@ -1282,7 +1282,7 @@ public final class Mapper {
      *
      * @see #find(MapElement[], String)
      */
-    private static final <T, E extends MapElement<T>> E exactFind(E[] map, String name) {
+    private static <T, E extends MapElement<T>> E exactFind(E[] map, String name) {
         int pos = find(map, name);
         if (pos >= 0) {
             E result = map[pos];
@@ -1297,7 +1297,7 @@ public final class Mapper {
      * Find a map element given its name in a sorted array of map elements. This will return the element that you were
      * searching for. Otherwise it will return <code>null</code>.
      */
-    private static final <T, E extends MapElement<T>> E exactFind(E[] map, CharChunk name) {
+    private static <T, E extends MapElement<T>> E exactFind(E[] map, CharChunk name) {
         int pos = find(map, name);
         if (pos >= 0) {
             E result = map[pos];
@@ -1314,7 +1314,7 @@ public final class Mapper {
      *
      * @see #findIgnoreCase(MapElement[], CharChunk)
      */
-    private static final <T, E extends MapElement<T>> E exactFindIgnoreCase(E[] map, CharChunk name) {
+    private static <T, E extends MapElement<T>> E exactFindIgnoreCase(E[] map, CharChunk name) {
         int pos = findIgnoreCase(map, name);
         if (pos >= 0) {
             E result = map[pos];
@@ -1329,7 +1329,7 @@ public final class Mapper {
     /**
      * Compare given char chunk with String. Return -1, 0 or +1 if inferior, equal, or superior to the String.
      */
-    private static final int compare(CharChunk name, int start, int end, String compareTo) {
+    private static int compare(CharChunk name, int start, int end, String compareTo) {
         int result = 0;
         char[] c = name.getBuffer();
         int len = compareTo.length();
@@ -1358,7 +1358,7 @@ public final class Mapper {
      * Compare given char chunk with String ignoring case. Return -1, 0 or +1 if inferior, equal, or superior to the
      * String.
      */
-    private static final int compareIgnoreCase(CharChunk name, int start, int end, String compareTo) {
+    private static int compareIgnoreCase(CharChunk name, int start, int end, String compareTo) {
         int result = 0;
         char[] c = name.getBuffer();
         int len = compareTo.length();
@@ -1386,7 +1386,7 @@ public final class Mapper {
     /**
      * Find the position of the last slash in the given char chunk.
      */
-    private static final int lastSlash(CharChunk name) {
+    private static int lastSlash(CharChunk name) {
         char[] c = name.getBuffer();
         int end = name.getEnd();
         int start = name.getStart();
@@ -1405,7 +1405,7 @@ public final class Mapper {
     /**
      * Find the position of the nth slash, in the given char chunk.
      */
-    private static final int nthSlash(CharChunk name, int n) {
+    private static int nthSlash(CharChunk name, int n) {
         char[] c = name.getBuffer();
         int end = name.getEnd();
         int start = name.getStart();
@@ -1426,7 +1426,7 @@ public final class Mapper {
     /**
      * Return the slash count in a given string.
      */
-    private static final int slashCount(String name) {
+    private static int slashCount(String name) {
         int pos = -1;
         int count = 0;
         while ((pos = name.indexOf('/', pos + 1)) != -1) {
@@ -1439,7 +1439,7 @@ public final class Mapper {
     /**
      * Insert into the right place in a sorted MapElement array, and prevent duplicates.
      */
-    private static final <T> boolean insertMap(MapElement<T>[] oldMap, MapElement<T>[] newMap,
+    private static <T> boolean insertMap(MapElement<T>[] oldMap, MapElement<T>[] newMap,
             MapElement<T> newElement) {
         int pos = find(oldMap, newElement.name);
         if ((pos != -1) && (newElement.name.equals(oldMap[pos].name))) {
@@ -1455,7 +1455,7 @@ public final class Mapper {
     /**
      * Insert into the right place in a sorted MapElement array.
      */
-    private static final <T> boolean removeMap(MapElement<T>[] oldMap, MapElement<T>[] newMap, String name) {
+    private static <T> boolean removeMap(MapElement<T>[] oldMap, MapElement<T>[] newMap, String name) {
         int pos = find(oldMap, name);
         if ((pos != -1) && (name.equals(oldMap[pos].name))) {
             System.arraycopy(oldMap, 0, newMap, 0, pos);

==================================================
GenericPrincipal.java
index f1a65b7eb5..4ece19c135 100644
--- a/java/org/apache/catalina/mbeans/MBeanFactory.java
+++ b/java/org/apache/catalina/mbeans/MBeanFactory.java
@@ -90,7 +90,7 @@ public class MBeanFactory {
      * @param t path string
      * @return empty string if t==null || t.equals("/")
      */
-    private final String getPathStr(String t) {
+    private String getPathStr(String t) {
         if (t == null || t.equals("/")) {
             return "";
         }

==================================================
MemoryRuleSet.java
index 6728b76789..d9cabf3ba3 100644
--- a/java/org/apache/catalina/realm/GenericPrincipal.java
+++ b/java/org/apache/catalina/realm/GenericPrincipal.java
@@ -262,7 +262,7 @@ public class GenericPrincipal implements TomcatPrincipal, Serializable {
         private final Principal principal;
         private final Map<String, Object> attributes;
 
-        public SerializablePrincipal(String name, String[] roles, Principal principal, Map<String, Object> attributes) {
+        SerializablePrincipal(String name, String[] roles, Principal principal, Map<String, Object> attributes) {
             this.name = name;
             this.roles = roles;
             if (principal instanceof Serializable) {

==================================================
X509UsernameRetriever.java
index b8d1227884..9d795bf9ab 100644
--- a/java/org/apache/catalina/realm/MemoryRuleSet.java
+++ b/java/org/apache/catalina/realm/MemoryRuleSet.java
@@ -90,7 +90,7 @@ final class MemoryUserRule extends Rule {
     /**
      * Construct a new instance of this <code>Rule</code>.
      */
-    public MemoryUserRule() {
+    MemoryUserRule() {
         // No initialisation required
     }
 

==================================================
DefaultServlet.java
index d4bc630b3a..f8042c8da1 100644
--- a/java/org/apache/catalina/realm/X509UsernameRetriever.java
+++ b/java/org/apache/catalina/realm/X509UsernameRetriever.java
@@ -29,5 +29,5 @@ public interface X509UsernameRetriever {
      *
      * @return An appropriate user name obtained from one or more fields in the certificate.
      */
-    public String getUsername(X509Certificate cert);
+    String getUsername(X509Certificate cert);
 }

==================================================
WebdavServlet.java
index b48161aeae..44f801285a 100644
--- a/java/org/apache/catalina/servlets/DefaultServlet.java
+++ b/java/org/apache/catalina/servlets/DefaultServlet.java
@@ -2657,7 +2657,7 @@ public class DefaultServlet extends HttpServlet {
          */
         protected Comparator<WebResource> resourceLastModifiedComparatorAsc;
 
-        public SortManager(boolean directoriesFirst) {
+        SortManager(boolean directoriesFirst) {
             resourceNameComparator = Comparator.comparing(WebResource::getName);
             resourceNameComparatorAsc = resourceNameComparator.reversed();
             resourceSizeComparator =
@@ -2801,7 +2801,7 @@ public class DefaultServlet extends HttpServlet {
             final char column;
             final boolean ascending;
 
-            public Order(char column, boolean ascending) {
+            Order(char column, boolean ascending) {
                 this.column = column;
                 this.ascending = ascending;
             }
@@ -2837,7 +2837,7 @@ public class DefaultServlet extends HttpServlet {
     }
 
 
-    static enum BomConfig {
+    enum BomConfig {
         /**
          * BoM is stripped if present and any BoM found used to determine the
          * encoding used to read the resource.
@@ -2858,7 +2858,7 @@ public class DefaultServlet extends HttpServlet {
         final boolean stripBom;
         final boolean useBomEncoding;
 
-        private BomConfig(String configurationValue, boolean stripBom, boolean useBomEncoding) {
+        BomConfig(String configurationValue, boolean stripBom, boolean useBomEncoding) {
             this.configurationValue = configurationValue;
             this.stripBom = stripBom;
             this.useBomEncoding = useBomEncoding;

==================================================
ExpressionParseTree.java
index 36bf46a269..876d804f41 100644
--- a/java/org/apache/catalina/servlets/WebdavServlet.java
+++ b/java/org/apache/catalina/servlets/WebdavServlet.java
@@ -370,7 +370,7 @@ public class WebdavServlet extends DefaultServlet {
      * @param path the full path of the resource being accessed
      * @return <code>true</code> if the resource specified is under a special path
      */
-    private final boolean isSpecialPath(final String path) {
+    private boolean isSpecialPath(final String path) {
         return !allowSpecialPaths && (
                 path.toUpperCase(Locale.ENGLISH).startsWith("/WEB-INF") ||
                 path.toUpperCase(Locale.ENGLISH).startsWith("/META-INF"));
@@ -2225,7 +2225,7 @@ public class WebdavServlet extends DefaultServlet {
 
         private static final long serialVersionUID = 1L;
 
-        public LockInfo(int maxDepth) {
+        LockInfo(int maxDepth) {
             this.maxDepth = maxDepth;
         }
 
@@ -2345,7 +2345,7 @@ public class WebdavServlet extends DefaultServlet {
     private static class WebdavResolver implements EntityResolver {
         private ServletContext context;
 
-        public WebdavResolver(ServletContext theContext) {
+        WebdavResolver(ServletContext theContext) {
             context = theContext;
         }
 

==================================================
SSICommand.java
index c6bb29ffa6..ce535d268e 100644
--- a/java/org/apache/catalina/ssi/ExpressionParseTree.java
+++ b/java/org/apache/catalina/ssi/ExpressionParseTree.java
@@ -243,7 +243,7 @@ public class ExpressionParseTree {
         String resolved = null;
 
 
-        public StringNode(String value) {
+        StringNode(String value) {
             this.value = new StringBuilder(value);
         }
 

==================================================
SSIExternalResolver.java
index 3c47b097b0..ef195b70a8 100644
--- a/java/org/apache/catalina/ssi/SSICommand.java
+++ b/java/org/apache/catalina/ssi/SSICommand.java
@@ -44,7 +44,7 @@ public interface SSICommand {
      * @throws SSIStopProcessingException
      *             if SSI processing should be aborted
      */
-    public long process(SSIMediator ssiMediator, String commandName,
+    long process(SSIMediator ssiMediator, String commandName,
             String[] paramNames, String[] paramValues, PrintWriter writer)
             throws SSIStopProcessingException;
 }
\ No newline at end of file

==================================================
Catalina.java
index 5a4a935545..469e4f54f3 100644
--- a/java/org/apache/catalina/ssi/SSIExternalResolver.java
+++ b/java/org/apache/catalina/ssi/SSIExternalResolver.java
@@ -33,10 +33,10 @@ public interface SSIExternalResolver {
      * @param variableNames
      *            the collection to add to
      */
-    public void addVariableNames(Collection<String> variableNames);
+    void addVariableNames(Collection<String> variableNames);
 
 
-    public String getVariableValue(String name);
+    String getVariableValue(String name);
 
 
     /**
@@ -49,7 +49,7 @@ public interface SSIExternalResolver {
      * @param value
      *            of the variable
      */
-    public void setVariableValue(String name, String value);
+    void setVariableValue(String name, String value);
 
 
     /**
@@ -59,18 +59,18 @@ public interface SSIExternalResolver {
      *
      * @return the data
      */
-    public Date getCurrentDate();
+    Date getCurrentDate();
 
 
-    public long getFileSize(String path, boolean virtual) throws IOException;
+    long getFileSize(String path, boolean virtual) throws IOException;
 
 
-    public long getFileLastModified(String path, boolean virtual)
+    long getFileLastModified(String path, boolean virtual)
             throws IOException;
 
 
-    public String getFileText(String path, boolean virtual) throws IOException;
+    String getFileText(String path, boolean virtual) throws IOException;
 
 
-    public void log(String message, Throwable throwable);
+    void log(String message, Throwable throwable);
 }
\ No newline at end of file

==================================================
ContextConfig.java
index 2d71330314..66db702f69 100644
--- a/java/org/apache/catalina/startup/Catalina.java
+++ b/java/org/apache/catalina/startup/Catalina.java
@@ -980,7 +980,7 @@ public class Catalina {
 
 
     public interface ServerXml {
-        public void load(Catalina catalina);
+        void load(Catalina catalina);
     }
 
 
@@ -1023,7 +1023,7 @@ public class Catalina {
 
     final class SetParentClassLoaderRule extends Rule {
 
-        public SetParentClassLoaderRule(ClassLoader parentClassLoader) {
+        SetParentClassLoaderRule(ClassLoader parentClassLoader) {
 
             this.parentClassLoader = parentClassLoader;
 

==================================================
HostConfig.java
index 3dcf9fa95f..765f109689 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -552,7 +552,7 @@ public class ContextConfig implements LifecycleListener {
 
 
     public interface ContextXml {
-        public void load(Context context);
+        void load(Context context);
     }
 
 
@@ -2556,7 +2556,7 @@ public class ContextConfig implements LifecycleListener {
         return EMPTY_SCI_SET;
     }
 
-    private static final String getClassName(String internalForm) {
+    private static String getClassName(String internalForm) {
         if (!internalForm.startsWith("L")) {
             return internalForm;
         }
@@ -2865,7 +2865,7 @@ public class ContextConfig implements LifecycleListener {
         private final long globalTimeStamp;
         private final long hostTimeStamp;
 
-        public DefaultWebXmlCacheEntry(WebXml webXml, long globalTimeStamp,
+        DefaultWebXmlCacheEntry(WebXml webXml, long globalTimeStamp,
                 long hostTimeStamp) {
             this.webXml = webXml;
             this.globalTimeStamp = globalTimeStamp;
@@ -2904,7 +2904,7 @@ public class ContextConfig implements LifecycleListener {
 
         private Set<ServletContainerInitializer> sciSet = null;
 
-        public JavaClassCacheEntry(JavaClass javaClass) {
+        JavaClassCacheEntry(JavaClass javaClass) {
             superclassName = javaClass.getSuperclassName();
             interfaceNames = javaClass.getInterfaceNames();
         }

==================================================
UserConfig.java
index 937332291b..7b10f5c494 100644
--- a/java/org/apache/catalina/startup/HostConfig.java
+++ b/java/org/apache/catalina/startup/HostConfig.java
@@ -1878,7 +1878,7 @@ public class HostConfig implements LifecycleListener {
         private ContextName cn;
         private File descriptor;
 
-        public DeployDescriptor(HostConfig config, ContextName cn,
+        DeployDescriptor(HostConfig config, ContextName cn,
                 File descriptor) {
             this.config = config;
             this.cn = cn;
@@ -1901,7 +1901,7 @@ public class HostConfig implements LifecycleListener {
         private ContextName cn;
         private File war;
 
-        public DeployWar(HostConfig config, ContextName cn, File war) {
+        DeployWar(HostConfig config, ContextName cn, File war) {
             this.config = config;
             this.cn = cn;
             this.war = war;
@@ -1923,7 +1923,7 @@ public class HostConfig implements LifecycleListener {
         private ContextName cn;
         private File dir;
 
-        public DeployDirectory(HostConfig config, ContextName cn, File dir) {
+        DeployDirectory(HostConfig config, ContextName cn, File dir) {
             this.config = config;
             this.cn = cn;
             this.dir = dir;
@@ -1947,7 +1947,7 @@ public class HostConfig implements LifecycleListener {
         private File source;
         private File destination;
 
-        public MigrateApp(HostConfig config, ContextName cn, File source, File destination) {
+        MigrateApp(HostConfig config, ContextName cn, File source, File destination) {
             this.config = config;
             this.cn = cn;
             this.source = source;
@@ -1990,7 +1990,7 @@ public class HostConfig implements LifecycleListener {
          *                 to be deleted
          * @param newDocBase The new docBase for the Context
          */
-        public ExpandedDirectoryRemovalListener(File toDelete, String newDocBase) {
+        ExpandedDirectoryRemovalListener(File toDelete, String newDocBase) {
             this.toDelete = toDelete;
             this.newDocBase = newDocBase;
         }

==================================================
UserDatabase.java
index 1d6eca85c9..c83fbaaf80 100644
--- a/java/org/apache/catalina/startup/UserConfig.java
+++ b/java/org/apache/catalina/startup/UserConfig.java
@@ -413,7 +413,7 @@ public final class UserConfig
         private String user;
         private String home;
 
-        public DeployUserDirectory(UserConfig config, String user, String home) {
+        DeployUserDirectory(UserConfig config, String user, String home) {
             this.config = config;
             this.user = user;
             this.home= home;

==================================================
Channel.java
index 34c85ca6a3..6ba238dafb 100644
--- a/java/org/apache/catalina/startup/UserDatabase.java
+++ b/java/org/apache/catalina/startup/UserDatabase.java
@@ -35,7 +35,7 @@ public interface UserDatabase {
     /**
      * @return the UserConfig listener with which we are associated.
      */
-    public UserConfig getUserConfig();
+    UserConfig getUserConfig();
 
 
     /**
@@ -43,7 +43,7 @@ public interface UserDatabase {
      *
      * @param userConfig The new UserConfig listener
      */
-    public void setUserConfig(UserConfig userConfig);
+    void setUserConfig(UserConfig userConfig);
 
 
     // ------------------------------------------------------- Public Methods
@@ -54,13 +54,13 @@ public interface UserDatabase {
      *
      * @param user User for which a home directory should be retrieved
      */
-    public String getHome(String user);
+    String getHome(String user);
 
 
     /**
      * @return an enumeration of the usernames defined on this server.
      */
-    public Enumeration<String> getUsers();
+    Enumeration<String> getUsers();
 
 
 }

==================================================
ChannelInterceptor.java
index f55b8dd06c..32359bda17 100644
--- a/java/org/apache/catalina/tribes/Channel.java
+++ b/java/org/apache/catalina/tribes/Channel.java
@@ -81,7 +81,7 @@ public interface Channel {
      * @see #start(int)
      * @see #stop(int)
      */
-    public static final int DEFAULT = 15;
+    int DEFAULT = 15;
 
     /**
      * Start and stop sequences can be controlled by these constants
@@ -91,7 +91,7 @@ public interface Channel {
      * @see #start(int)
      * @see #stop(int)
      */
-    public static final int SND_RX_SEQ = 1;
+    int SND_RX_SEQ = 1;
 
     /**
      * Start and stop sequences can be controlled by these constants
@@ -101,7 +101,7 @@ public interface Channel {
      * @see #start(int)
      * @see #stop(int)
      */
-    public static final int SND_TX_SEQ = 2;
+    int SND_TX_SEQ = 2;
 
     /**
      * Start and stop sequences can be controlled by these constants
@@ -112,7 +112,7 @@ public interface Channel {
      * @see #start(int)
      * @see #stop(int)
      */
-    public static final int MBR_RX_SEQ = 4;
+    int MBR_RX_SEQ = 4;
 
     /**
      * Start and stop sequences can be controlled by these constants
@@ -122,7 +122,7 @@ public interface Channel {
      * @see #start(int)
      * @see #stop(int)
      */
-    public static final int MBR_TX_SEQ = 8;
+    int MBR_TX_SEQ = 8;
 
     /**
      * Send options, when a message is sent, it can have an option flag
@@ -135,7 +135,7 @@ public interface Channel {
      * @see #send(Member[], Serializable , int)
      * @see #send(Member[], Serializable, int, ErrorHandler)
      */
-    public static final int SEND_OPTIONS_BYTE_MESSAGE = 0x0001;
+    int SEND_OPTIONS_BYTE_MESSAGE = 0x0001;
 
     /**
      * Send options, when a message is sent, it can have an option flag
@@ -147,7 +147,7 @@ public interface Channel {
      * @see #send(Member[], Serializable , int)
      * @see #send(Member[], Serializable, int, ErrorHandler)
      */
-    public static final int SEND_OPTIONS_USE_ACK = 0x0002;
+    int SEND_OPTIONS_USE_ACK = 0x0002;
 
     /**
      * Send options, when a message is sent, it can have an option flag
@@ -160,7 +160,7 @@ public interface Channel {
      * @see #send(Member[], Serializable , int)
      * @see #send(Member[], Serializable, int, ErrorHandler)
      */
-    public static final int SEND_OPTIONS_SYNCHRONIZED_ACK = 0x0004;
+    int SEND_OPTIONS_SYNCHRONIZED_ACK = 0x0004;
 
     /**
      * Send options, when a message is sent, it can have an option flag
@@ -172,7 +172,7 @@ public interface Channel {
      * @see #send(Member[], Serializable , int)
      * @see #send(Member[], Serializable, int, ErrorHandler)
      */
-    public static final int SEND_OPTIONS_ASYNCHRONOUS = 0x0008;
+    int SEND_OPTIONS_ASYNCHRONOUS = 0x0008;
 
     /**
      * Send options, when a message is sent, it can have an option flag
@@ -183,7 +183,7 @@ public interface Channel {
      * @see #send(Member[], Serializable , int)
      * @see #send(Member[], Serializable, int, ErrorHandler)
      */
-    public static final int SEND_OPTIONS_SECURE = 0x0010;
+    int SEND_OPTIONS_SECURE = 0x0010;
 
     /**
      * Send options. When a message is sent with this flag on
@@ -191,7 +191,7 @@ public interface Channel {
      * @see #send(Member[], Serializable , int)
      * @see #send(Member[], Serializable, int, ErrorHandler)
      */
-    public static final int SEND_OPTIONS_UDP =  0x0020;
+    int SEND_OPTIONS_UDP =  0x0020;
 
     /**
      * Send options. When a message is sent with this flag on
@@ -199,7 +199,7 @@ public interface Channel {
      * @see #send(Member[], Serializable , int)
      * @see #send(Member[], Serializable, int, ErrorHandler)
      */
-    public static final int SEND_OPTIONS_MULTICAST =  0x0040;
+    int SEND_OPTIONS_MULTICAST =  0x0040;
 
     /**
      * Send options, when a message is sent, it can have an option flag
@@ -212,14 +212,14 @@ public interface Channel {
      * @see #send(Member[], Serializable , int)
      * @see #send(Member[], Serializable, int, ErrorHandler)
      */
-    public static final int SEND_OPTIONS_DEFAULT = SEND_OPTIONS_USE_ACK;
+    int SEND_OPTIONS_DEFAULT = SEND_OPTIONS_USE_ACK;
 
 
     /**
      * Adds an interceptor to the channel message chain.
      * @param interceptor ChannelInterceptor
      */
-    public void addInterceptor(ChannelInterceptor interceptor);
+    void addInterceptor(ChannelInterceptor interceptor);
 
     /**
      * Starts up the channel. This can be called multiple times for individual services to start
@@ -234,7 +234,7 @@ public interface Channel {
      * transmit the correct information, it has to be started after the replication receiver.
      * @throws ChannelException if a startup error occurs or the service is already started or an error occurs.
      */
-    public void start(int svc) throws ChannelException;
+    void start(int svc) throws ChannelException;
 
     /**
      * Shuts down the channel. This can be called multiple times for individual services to shutdown
@@ -247,7 +247,7 @@ public interface Channel {
      * SND_RX_SEQ - stops the replication receiver<BR>
      * @throws ChannelException if a startup error occurs or the service is already stopped or an error occurs.
      */
-    public void stop(int svc) throws ChannelException;
+    void stop(int svc) throws ChannelException;
 
     /**
      * Send a message to one or more members in the cluster
@@ -264,7 +264,7 @@ public interface Channel {
      * @see #SEND_OPTIONS_ASYNCHRONOUS
      * @see #SEND_OPTIONS_SYNCHRONIZED_ACK
      */
-    public UniqueId send(Member[] destination, Serializable msg, int options) throws ChannelException;
+    UniqueId send(Member[] destination, Serializable msg, int options) throws ChannelException;
 
     /**
      * Send a message to one or more members in the cluster
@@ -275,7 +275,7 @@ public interface Channel {
      * @return a unique Id that identifies the message that is sent
      * @exception ChannelException - if a serialization error happens.
      */
-    public UniqueId send(Member[] destination, Serializable msg, int options, ErrorHandler handler) throws ChannelException;
+    UniqueId send(Member[] destination, Serializable msg, int options, ErrorHandler handler) throws ChannelException;
 
     /**
      * Sends a heart beat through the interceptor stacks
@@ -286,14 +286,14 @@ public interface Channel {
      * and invoking this method.
      * @see #setHeartbeat(boolean)
      */
-    public void heartbeat();
+    void heartbeat();
 
     /**
      * Enables or disables internal heartbeat.
      * @param enable boolean - default value is implementation specific
      * @see #heartbeat()
      */
-    public void setHeartbeat(boolean enable);
+    void setHeartbeat(boolean enable);
 
     /**
      * Add a membership listener, will get notified when a new member joins, leaves or crashes
@@ -302,7 +302,7 @@ public interface Channel {
      * @param listener MembershipListener
      * @see MembershipListener
      */
-    public void addMembershipListener(MembershipListener listener);
+    void addMembershipListener(MembershipListener listener);
 
     /**
      * Add a channel listener, this is a callback object when messages are received
@@ -312,33 +312,33 @@ public interface Channel {
      * @see ChannelListener
      * @see Heartbeat
      */
-    public void addChannelListener(ChannelListener listener);
+    void addChannelListener(ChannelListener listener);
 
     /**
      * remove a membership listener, listeners are removed based on Object.hashCode and Object.equals
      * @param listener MembershipListener
      * @see MembershipListener
      */
-    public void removeMembershipListener(MembershipListener listener);
+    void removeMembershipListener(MembershipListener listener);
     /**
      * remove a channel listener, listeners are removed based on Object.hashCode and Object.equals
      * @param listener ChannelListener
      * @see ChannelListener
      */
-    public void removeChannelListener(ChannelListener listener);
+    void removeChannelListener(ChannelListener listener);
 
     /**
      * Returns true if there are any members in the group,
      * this call is the same as <code>getMembers().length &gt; 0</code>
      * @return boolean - true if there are any members automatically discovered
      */
-    public boolean hasMembers() ;
+    boolean hasMembers() ;
 
     /**
      * Get all current group members
      * @return all members or empty array, never null
      */
-    public Member[] getMembers() ;
+    Member[] getMembers() ;
 
     /**
      * Return the member that represents this node. This is also the data
@@ -347,7 +347,7 @@ public interface Channel {
      * since the membership service started.
      * @return Member
      */
-    public Member getLocalMember(boolean incAlive);
+    Member getLocalMember(boolean incAlive);
 
     /**
      * Returns the member from the membership service with complete and
@@ -360,31 +360,31 @@ public interface Channel {
      * @param mbr Member
      * @return Member
      */
-    public Member getMember(Member mbr);
+    Member getMember(Member mbr);
 
     /**
      * Return the name of this channel.
      * @return channel name
      */
-    public String getName();
+    String getName();
 
     /**
      * Set the name of this channel
      * @param name The new channel name
      */
-    public void setName(String name);
+    void setName(String name);
 
     /**
      * Return executor that can be used for utility tasks.
      * @return the executor
      */
-    public ScheduledExecutorService getUtilityExecutor();
+    ScheduledExecutorService getUtilityExecutor();
 
     /**
      * Set the executor that can be used for utility tasks.
      * @param utilityExecutor the executor
      */
-    public void setUtilityExecutor(ScheduledExecutorService utilityExecutor);
+    void setUtilityExecutor(ScheduledExecutorService utilityExecutor);
 
     /**
      * Translates the name of an option to its integer value.  Valid option names are "asynchronous" (alias "async"),
@@ -392,7 +392,7 @@ public interface Channel {
      * @param opt The name of the option
      * @return the int value of the passed option name
      */
-    public static int getSendOptionValue(String opt){
+    static int getSendOptionValue(String opt){
 
         switch (opt){
 
@@ -429,7 +429,7 @@ public interface Channel {
      * @param input A comma separated list of options, e.g. "async, multicast"
      * @return a bitwise ORd value of the passed option names
      */
-    public static int parseSendOptions(String input){
+    static int parseSendOptions(String input){
 
         try {
             return Integer.parseInt(input);
@@ -453,7 +453,7 @@ public interface Channel {
      * @param input the int value of SendOptions
      * @return the human-friendly string representation in a reverse order (i.e. the last option will be shown first)
      */
-    public static String getSendOptionsAsString(int input){
+    static String getSendOptionsAsString(int input){
 
         // allOptionNames must be in order of the bits of the available options
         final String[] allOptionNames = new String[]{ "byte", "use_ack", "sync", "async", "secure", "udp", "multicast" };

==================================================
ChannelListener.java
index aad9a8f515..2beb56a39f 100644
--- a/java/org/apache/catalina/tribes/ChannelInterceptor.java
+++ b/java/org/apache/catalina/tribes/ChannelInterceptor.java
@@ -40,38 +40,38 @@ public interface ChannelInterceptor extends MembershipListener, Heartbeat {
      * @return int
      * @see ChannelMessage#getOptions()
      */
-    public int getOptionFlag();
+    int getOptionFlag();
 
     /**
      * Sets the option flag
      * @param flag int
      * @see #getOptionFlag()
      */
-    public void setOptionFlag(int flag);
+    void setOptionFlag(int flag);
 
     /**
      * Set the next interceptor in the list of interceptors
      * @param next ChannelInterceptor
      */
-    public void setNext(ChannelInterceptor next) ;
+    void setNext(ChannelInterceptor next) ;
 
     /**
      * Retrieve the next interceptor in the list
      * @return ChannelInterceptor - returns the next interceptor in the list or null if no more interceptors exist
      */
-    public ChannelInterceptor getNext();
+    ChannelInterceptor getNext();
 
     /**
      * Set the previous interceptor in the list
      * @param previous ChannelInterceptor
      */
-    public void setPrevious(ChannelInterceptor previous);
+    void setPrevious(ChannelInterceptor previous);
 
     /**
      * Retrieve the previous interceptor in the list
      * @return ChannelInterceptor - returns the previous interceptor in the list or null if no more interceptors exist
      */
-    public ChannelInterceptor getPrevious();
+    ChannelInterceptor getPrevious();
 
     /**
      * The <code>sendMessage</code> method is called when a message is being sent to one more destinations.
@@ -90,7 +90,7 @@ public interface ChannelInterceptor extends MembershipListener, Heartbeat {
      * @see ErrorHandler
      * @see InterceptorPayload
      */
-    public void sendMessage(Member[] destination, ChannelMessage msg, InterceptorPayload payload) throws ChannelException;
+    void sendMessage(Member[] destination, ChannelMessage msg, InterceptorPayload payload) throws ChannelException;
 
     /**
      * the <code>messageReceived</code> is invoked when a message is received.
@@ -98,29 +98,28 @@ public interface ChannelInterceptor extends MembershipListener, Heartbeat {
      * if it has been overwritten.
      * @param data ChannelMessage
      */
-    public void messageReceived(ChannelMessage data);
+    void messageReceived(ChannelMessage data);
 
     /**
      * The <code>heartbeat()</code> method gets invoked periodically
      * to allow interceptors to clean up resources, time out object and
      * perform actions that are unrelated to sending/receiving data.
      */
-    @Override
-    public void heartbeat();
+    @Override void heartbeat();
 
     /**
      * Intercepts the <code>Channel.hasMembers()</code> method
      * @return boolean - if the channel has members in its membership group
      * @see Channel#hasMembers()
      */
-    public boolean hasMembers() ;
+    boolean hasMembers() ;
 
     /**
      * Intercepts the <code>Channel.getMembers()</code> method
      * @return Member[]
      * @see Channel#getMembers()
      */
-    public Member[] getMembers() ;
+    Member[] getMembers() ;
 
     /**
      * Intercepts the <code>Channel.getLocalMember(boolean)</code> method
@@ -128,7 +127,7 @@ public interface ChannelInterceptor extends MembershipListener, Heartbeat {
      * @return Member
      * @see Channel#getLocalMember(boolean)
      */
-    public Member getLocalMember(boolean incAliveTime) ;
+    Member getLocalMember(boolean incAliveTime) ;
 
     /**
      * Intercepts the <code>Channel.getMember(Member)</code> method
@@ -136,7 +135,7 @@ public interface ChannelInterceptor extends MembershipListener, Heartbeat {
      * @return Member - the actual member information, including stay alive
      * @see Channel#getMember(Member)
      */
-    public Member getMember(Member mbr);
+    Member getMember(Member mbr);
 
     /**
      * Starts up the channel. This can be called multiple times for individual services to start
@@ -150,7 +149,7 @@ public interface ChannelInterceptor extends MembershipListener, Heartbeat {
      * @throws ChannelException if a startup error occurs or the service is already started.
      * @see Channel
      */
-    public void start(int svc) throws ChannelException;
+    void start(int svc) throws ChannelException;
 
     /**
      * Shuts down the channel. This can be called multiple times for individual services to shutdown
@@ -164,21 +163,21 @@ public interface ChannelInterceptor extends MembershipListener, Heartbeat {
      * @throws ChannelException if a startup error occurs or the service is already started.
      * @see Channel
      */
-    public void stop(int svc) throws ChannelException;
+    void stop(int svc) throws ChannelException;
 
-    public void fireInterceptorEvent(InterceptorEvent event);
+    void fireInterceptorEvent(InterceptorEvent event);
 
     /**
      * Return the channel that is related to this interceptor
      * @return Channel
      */
-    public Channel getChannel();
+    Channel getChannel();
 
     /**
      * Set the channel that is related to this interceptor
      * @param channel The channel
      */
-    public void setChannel(Channel channel);
+    void setChannel(Channel channel);
 
     interface InterceptorEvent {
         int getEventType();

==================================================
ChannelMessage.java
index c99478006c..7871271b06 100644
--- a/java/org/apache/catalina/tribes/ChannelListener.java
+++ b/java/org/apache/catalina/tribes/ChannelListener.java
@@ -35,7 +35,7 @@ public interface ChannelListener {
      * @param msg Serializable
      * @param sender - the source of the message
      */
-    public void messageReceived(Serializable msg, Member sender);
+    void messageReceived(Serializable msg, Member sender);
 
     /**
      * Invoked by the channel to determine if the listener will process this message or not.
@@ -43,21 +43,19 @@ public interface ChannelListener {
      * @param sender Member
      * @return boolean
      */
-    public boolean accept(Serializable msg, Member sender);
+    boolean accept(Serializable msg, Member sender);
 
     /**
      * @param listener Object
      * @return boolean
      * @see Object#equals(Object)
      */
-    @Override
-    public boolean equals(Object listener);
+    @Override boolean equals(Object listener);
 
     /**
      * @return int
      * @see Object#hashCode()
      */
-    @Override
-    public int hashCode();
+    @Override int hashCode();
 
 }

==================================================
ChannelReceiver.java
index 70de5dd55f..4421c569ed 100644
--- a/java/org/apache/catalina/tribes/ChannelMessage.java
+++ b/java/org/apache/catalina/tribes/ChannelMessage.java
@@ -37,45 +37,45 @@ public interface ChannelMessage extends Serializable, Cloneable {
      * that originally sent it.
      * @return the source or reply-to address of this message
      */
-    public Member getAddress();
+    Member getAddress();
 
     /**
      * Sets the source or reply-to address of this message
      * @param member Member
      */
-    public void setAddress(Member member);
+    void setAddress(Member member);
 
     /**
      * Timestamp of when the message was created.
      * @return long timestamp in milliseconds
      */
-    public long getTimestamp();
+    long getTimestamp();
 
     /**
      * Sets the timestamp of this message.
      *
      * @param timestamp The timestamp
      */
-    public void setTimestamp(long timestamp);
+    void setTimestamp(long timestamp);
 
     /**
      * Each message must have a globally unique Id.
      * interceptors heavily depend on this id for message processing
      * @return byte
      */
-    public byte[] getUniqueId();
+    byte[] getUniqueId();
 
     /**
      * The byte buffer that contains the actual message payload
      * @param buf XByteBuffer
      */
-    public void setMessage(XByteBuffer buf);
+    void setMessage(XByteBuffer buf);
 
     /**
      * returns the byte buffer that contains the actual message payload
      * @return XByteBuffer
      */
-    public XByteBuffer getMessage();
+    XByteBuffer getMessage();
 
     /**
      * The message options is a 32 bit flag set
@@ -84,24 +84,24 @@ public interface ChannelMessage extends Serializable, Cloneable {
      * @see ChannelInterceptor#getOptionFlag
      * @return int - the option bits set for this message
      */
-    public int getOptions();
+    int getOptions();
 
     /**
      * sets the option bits for this message
      * @param options int
      * @see #getOptions()
      */
-    public void setOptions(int options);
+    void setOptions(int options);
 
     /**
      * Shallow clone, what gets cloned depends on the implementation
      * @return ChannelMessage
      */
-    public Object clone();
+    Object clone();
 
     /**
      * Deep clone, all fields MUST get cloned
      * @return ChannelMessage
      */
-    public Object deepclone();
+    Object deepclone();
 }

==================================================
ChannelSender.java
index af5e828040..f181ef5a53 100644
--- a/java/org/apache/catalina/tribes/ChannelReceiver.java
+++ b/java/org/apache/catalina/tribes/ChannelReceiver.java
@@ -24,69 +24,69 @@ package org.apache.catalina.tribes;
  * This class may optionally implement a thread pool for parallel processing of incoming messages.
  */
 public interface ChannelReceiver extends Heartbeat {
-    public static final int MAX_UDP_SIZE = 65535;
+    int MAX_UDP_SIZE = 65535;
 
     /**
      * Start listening for incoming messages on the host/port
      * @throws java.io.IOException Listen failed
      */
-    public void start() throws java.io.IOException;
+    void start() throws java.io.IOException;
 
     /**
      * Stop listening for messages
      */
-    public void stop();
+    void stop();
 
     /**
      * String representation of the IPv4 or IPv6 address that this host is listening
      * to.
      * @return the host that this receiver is listening to
      */
-    public String getHost();
+    String getHost();
 
 
     /**
      * Returns the listening port
      * @return port
      */
-    public int getPort();
+    int getPort();
 
     /**
      * Returns the secure listening port
      * @return port, -1 if a secure port is not activated
      */
-    public int getSecurePort();
+    int getSecurePort();
 
     /**
      * Returns the UDP port
      * @return port, -1 if the UDP port is not activated.
      */
-    public int getUdpPort();
+    int getUdpPort();
 
     /**
      * Sets the message listener to receive notification of incoming
      * @param listener MessageListener
      * @see MessageListener
      */
-    public void setMessageListener(MessageListener listener);
+    void setMessageListener(MessageListener listener);
 
     /**
      * Returns the message listener that is associated with this receiver
      * @return MessageListener
      * @see MessageListener
      */
-    public MessageListener getMessageListener();
+    MessageListener getMessageListener();
 
     /**
      * Return the channel that is related to this ChannelReceiver
      * @return Channel
      */
-    public Channel getChannel();
+    Channel getChannel();
 
     /**
      * Set the channel that is related to this ChannelReceiver
      * @param channel The channel
      */
-    public void setChannel(Channel channel);
+    void setChannel(Channel channel);
 
 }

==================================================
ErrorHandler.java
index 92fb298ee5..4f7ab4b8ad 100644
--- a/java/org/apache/catalina/tribes/ChannelSender.java
+++ b/java/org/apache/catalina/tribes/ChannelSender.java
@@ -33,30 +33,29 @@ public interface ChannelSender extends Heartbeat
      * Optional. This can be an empty implementation, that does nothing
      * @param member Member
      */
-    public void add(Member member);
+    void add(Member member);
     /**
      * Notification that a member has been removed or crashed.
      * Can be used to clean up open connections etc
      * @param member Member
      */
-    public void remove(Member member);
+    void remove(Member member);
 
     /**
      * Start the channel sender
      * @throws IOException if preprocessing takes place and an error happens
      */
-    public void start() throws IOException;
+    void start() throws IOException;
 
     /**
      * Stop the channel sender
      */
-    public void stop();
+    void stop();
 
     /**
      * A channel heartbeat, use this method to clean up resources
      */
-    @Override
-    public void heartbeat() ;
+    @Override void heartbeat() ;
 
     /**
      * Send a message to one or more recipients.
@@ -66,18 +65,18 @@ public interface ChannelSender extends Heartbeat
      * individual send failures on a per member basis, using ChannelException.addFaultyMember
      * @see ChannelException#addFaultyMember(Member,java.lang.Exception)
      */
-    public void sendMessage(ChannelMessage message, Member[] destination) throws ChannelException;
+    void sendMessage(ChannelMessage message, Member[] destination) throws ChannelException;
 
     /**
      * Return the channel that is related to this ChannelSender
      * @return Channel
      */
-    public Channel getChannel();
+    Channel getChannel();
 
     /**
      * Set the channel that is related to this ChannelSender
      * @param channel The channel
      */
-    public void setChannel(Channel channel);
+    void setChannel(Channel channel);
 
 }

==================================================
Heartbeat.java
index 09bcfcc950..f5d24f3fdd 100644
--- a/java/org/apache/catalina/tribes/ErrorHandler.java
+++ b/java/org/apache/catalina/tribes/ErrorHandler.java
@@ -29,13 +29,13 @@ public interface ErrorHandler {
      * @param id - the unique id for the message
      * @see Channel#send(Member[], java.io.Serializable, int, ErrorHandler)
      */
-    public void handleError(ChannelException x, UniqueId id);
+    void handleError(ChannelException x, UniqueId id);
 
     /**
      * Invoked when the message has been sent successfully.
      * @param id - the unique id for the message
      * @see Channel#send(Member[], java.io.Serializable, int, ErrorHandler)
      */
-    public void handleCompletion(UniqueId id);
+    void handleCompletion(UniqueId id);
 
 }
\ No newline at end of file

==================================================
JmxChannel.java
index 7ccfc37bb0..a3436516b5 100644
--- a/java/org/apache/catalina/tribes/Heartbeat.java
+++ b/java/org/apache/catalina/tribes/Heartbeat.java
@@ -28,6 +28,6 @@ public interface Heartbeat {
     /**
      * Heartbeat invocation for resources cleanup etc
      */
-    public void heartbeat();
+    void heartbeat();
 
 }
\ No newline at end of file

==================================================
ManagedChannel.java
index 9c448ad577..8dc822d5eb 100644
--- a/java/org/apache/catalina/tribes/JmxChannel.java
+++ b/java/org/apache/catalina/tribes/JmxChannel.java
@@ -25,36 +25,36 @@ public interface JmxChannel extends MBeanRegistration {
      * If set to true, this channel is registered with jmx.
      * @return true if this channel will be registered with jmx.
      */
-    public boolean isJmxEnabled();
+    boolean isJmxEnabled();
 
     /**
      * If set to true, this channel is registered with jmx.
      * @param jmxEnabled set to true if this channel should be registered with jmx.
      */
-    public void setJmxEnabled(boolean jmxEnabled);
+    void setJmxEnabled(boolean jmxEnabled);
 
     /**
      * Return the jmx domain which this channel is registered.
      * @return jmxDomain
      */
-    public String getJmxDomain();
+    String getJmxDomain();
 
     /**
      * Set the jmx domain which this channel should be registered.
      * @param jmxDomain The jmx domain which this channel should be registered.
      */
-    public void setJmxDomain(String jmxDomain);
+    void setJmxDomain(String jmxDomain);
 
     /**
      * Return the jmx prefix which will be used with channel ObjectName.
      * @return jmxPrefix
      */
-    public String getJmxPrefix();
+    String getJmxPrefix();
 
     /**
      * Set the jmx prefix which will be used with channel ObjectName.
      * @param jmxPrefix The jmx prefix which will be used with channel ObjectName.
      */
-    public void setJmxPrefix(String jmxPrefix);
+    void setJmxPrefix(String jmxPrefix);
 
 }

==================================================
Member.java
index 3cbf4becb2..ef6914e694 100644
--- a/java/org/apache/catalina/tribes/ManagedChannel.java
+++ b/java/org/apache/catalina/tribes/ManagedChannel.java
@@ -30,47 +30,47 @@ public interface ManagedChannel extends Channel {
      * @param sender ChannelSender
      * @see ChannelSender
      */
-    public void setChannelSender(ChannelSender sender);
+    void setChannelSender(ChannelSender sender);
 
     /**
      * Sets the channel receiver
      * @param receiver ChannelReceiver
      * @see ChannelReceiver
      */
-    public void setChannelReceiver(ChannelReceiver receiver);
+    void setChannelReceiver(ChannelReceiver receiver);
 
     /**
      * Sets the membership service
      * @param service MembershipService
      * @see MembershipService
      */
-    public void setMembershipService(MembershipService service);
+    void setMembershipService(MembershipService service);
 
     /**
      * returns the channel sender
      * @return ChannelSender
      * @see ChannelSender
      */
-    public ChannelSender getChannelSender();
+    ChannelSender getChannelSender();
 
     /**
      * returns the channel receiver
      * @return ChannelReceiver
      * @see ChannelReceiver
      */
-    public ChannelReceiver getChannelReceiver();
+    ChannelReceiver getChannelReceiver();
 
     /**
      * Returns the membership service
      * @return MembershipService
      * @see MembershipService
      */
-    public MembershipService getMembershipService();
+    MembershipService getMembershipService();
 
     /**
      * Returns the interceptor stack
      * @return Iterator
      * @see Channel#addInterceptor(ChannelInterceptor)
      */
-    public Iterator<ChannelInterceptor> getInterceptors();
+    Iterator<ChannelInterceptor> getInterceptors();
 }

==================================================
MembershipListener.java
index f8ce61f1d1..a21ad7660b 100644
--- a/java/org/apache/catalina/tribes/Member.java
+++ b/java/org/apache/catalina/tribes/Member.java
@@ -34,26 +34,26 @@ public interface Member extends Serializable {
      * When a member leaves the cluster, the payload of the memberDisappeared member
      * will be the following bytes. This indicates a soft shutdown, and not a crash
      */
-    public static final byte[] SHUTDOWN_PAYLOAD = new byte[] {66, 65, 66, 89, 45, 65, 76, 69, 88};
+    byte[] SHUTDOWN_PAYLOAD = new byte[] {66, 65, 66, 89, 45, 65, 76, 69, 88};
 
     /**
      * @return the name of this node, should be unique within the group.
      */
-    public String getName();
+    String getName();
 
     /**
      * Returns the listen host for the ChannelReceiver implementation
      * @return IPv4 or IPv6 representation of the host address this member listens to incoming data
      * @see ChannelReceiver
      */
-    public byte[] getHost();
+    byte[] getHost();
 
     /**
      * Returns the listen port for the ChannelReceiver implementation
      * @return the listen port for this member, -1 if its not listening on an insecure port
      * @see ChannelReceiver
      */
-    public int getPort();
+    int getPort();
 
     /**
      * Returns the secure listen port for the ChannelReceiver implementation.
@@ -61,13 +61,13 @@ public interface Member extends Serializable {
      * @return the listen port for this member, -1 if its not listening on a secure port
      * @see ChannelReceiver
      */
-    public int getSecurePort();
+    int getSecurePort();
 
     /**
      * Returns the UDP port that this member is listening to for UDP messages.
      * @return the listen UDP port for this member, -1 if its not listening on a UDP port
      */
-    public int getUdpPort();
+    int getUdpPort();
 
 
     /**
@@ -76,54 +76,54 @@ public interface Member extends Serializable {
      * broadcasting its membership to the group.
      * @return nr of milliseconds since this member started.
      */
-    public long getMemberAliveTime();
+    long getMemberAliveTime();
 
-    public void setMemberAliveTime(long memberAliveTime);
+    void setMemberAliveTime(long memberAliveTime);
 
     /**
      * The current state of the member
      * @return boolean - true if the member is functioning correctly
      */
-    public boolean isReady();
+    boolean isReady();
     /**
      * The current state of the member
      * @return boolean - true if the member is suspect, but the crash has not been confirmed
      */
-    public boolean isSuspect();
+    boolean isSuspect();
 
     /**
      * @return boolean - true if the member has been confirmed to malfunction
      */
-    public boolean isFailing();
+    boolean isFailing();
 
     /**
      * returns a UUID unique for this member over all sessions.
      * If the member crashes and restarts, the uniqueId will be different.
      * @return byte[]
      */
-    public byte[] getUniqueId();
+    byte[] getUniqueId();
 
     /**
      * returns the payload associated with this member
      * @return byte[]
      */
-    public byte[] getPayload();
+    byte[] getPayload();
 
-    public void setPayload(byte[] payload);
+    void setPayload(byte[] payload);
 
     /**
      * returns the command associated with this member
      * @return byte[]
      */
-    public byte[] getCommand();
+    byte[] getCommand();
 
-    public void setCommand(byte[] command);
+    void setCommand(byte[] command);
 
     /**
      * Domain for this cluster
      * @return byte[]
      */
-    public byte[] getDomain();
+    byte[] getDomain();
 
     /**
      * Highly optimized version of serializing a member into a byte array
@@ -131,7 +131,7 @@ public interface Member extends Serializable {
      * @param getalive  calculate memberAlive time
      * @return the data as a byte array
      */
-    public byte[] getData(boolean getalive);
+    byte[] getData(boolean getalive);
 
     /**
      * Highly optimized version of serializing a member into a byte array
@@ -140,19 +140,19 @@ public interface Member extends Serializable {
      * @param reset     reset the cached data package, and create a new one
      * @return the data as a byte array
      */
-    public byte[] getData(boolean getalive, boolean reset);
+    byte[] getData(boolean getalive, boolean reset);
 
     /**
      * Length of a message obtained by {@link #getData(boolean)} or
      * {@link #getData(boolean, boolean)}.
      * @return the data length
      */
-    public int getDataLength();
+    int getDataLength();
 
     /**
      * @return boolean - true if the member is local member
      */
-    public boolean isLocal();
+    boolean isLocal();
 
-    public void setLocal(boolean local);
+    void setLocal(boolean local);
 }

==================================================
MembershipProvider.java
index 4534a37650..fe0c00975f 100644
--- a/java/org/apache/catalina/tribes/MembershipListener.java
+++ b/java/org/apache/catalina/tribes/MembershipListener.java
@@ -26,7 +26,7 @@ public interface MembershipListener {
      * A member was added to the group
      * @param member Member - the member that was added
      */
-    public void memberAdded(Member member);
+    void memberAdded(Member member);
 
     /**
      * A member was removed from the group<br>
@@ -34,6 +34,6 @@ public interface MembershipListener {
      * @param member Member
      * @see Member#SHUTDOWN_PAYLOAD
      */
-    public void memberDisappeared(Member member);
+    void memberDisappeared(Member member);
 
 }
\ No newline at end of file

==================================================
MembershipService.java
index 1ed6a4b102..1167ed9186 100644
--- a/java/org/apache/catalina/tribes/MembershipProvider.java
+++ b/java/org/apache/catalina/tribes/MembershipProvider.java
@@ -20,19 +20,19 @@ import java.util.Properties;
 
 public interface MembershipProvider {
 
-    public void init(Properties properties) throws Exception;
+    void init(Properties properties) throws Exception;
 
-    public void start(int level) throws java.lang.Exception;
+    void start(int level) throws java.lang.Exception;
 
-    public boolean stop(int level) throws java.lang.Exception;
+    boolean stop(int level) throws java.lang.Exception;
 
-    public void setMembershipListener(MembershipListener listener);
+    void setMembershipListener(MembershipListener listener);
 
-    public void setMembershipService(MembershipService service);
+    void setMembershipService(MembershipService service);
 
-    public boolean hasMembers();
+    boolean hasMembers();
 
-    public Member getMember(Member mbr);
+    Member getMember(Member mbr);
 
-    public Member[] getMembers();
+    Member[] getMembers();
 }

==================================================
MessageListener.java
index 03cdbcda63..c5919d909a 100644
--- a/java/org/apache/catalina/tribes/MembershipService.java
+++ b/java/org/apache/catalina/tribes/MembershipService.java
@@ -25,8 +25,8 @@ package org.apache.catalina.tribes;
  */
 public interface MembershipService {
 
-    public static final int MBR_RX = Channel.MBR_RX_SEQ;
-    public static final int MBR_TX = Channel.MBR_TX_SEQ;
+    int MBR_RX = Channel.MBR_RX_SEQ;
+    int MBR_TX = Channel.MBR_TX_SEQ;
 
     /**
      * Sets the properties for the membership service. This must be called before
@@ -34,12 +34,12 @@ public interface MembershipService {
      * The properties are implementation specific.
      * @param properties - to be used to configure the membership service.
      */
-    public void setProperties(java.util.Properties properties);
+    void setProperties(java.util.Properties properties);
 
     /**
      * @return the properties for the configuration used.
      */
-    public java.util.Properties getProperties();
+    java.util.Properties getProperties();
 
     /**
      * Starts the membership service. If a membership listeners is added
@@ -47,7 +47,7 @@ public interface MembershipService {
      * Performs a start level 1 and 2
      * @throws java.lang.Exception if the service fails to start.
      */
-    public void start() throws java.lang.Exception;
+    void start() throws java.lang.Exception;
 
     /**
      * Starts the membership service. If a membership listeners is added
@@ -57,7 +57,7 @@ public interface MembershipService {
      * @throws java.lang.Exception if the service fails to start.
      * @throws java.lang.IllegalArgumentException if the level is incorrect.
      */
-    public void start(int level) throws java.lang.Exception;
+    void start(int level) throws java.lang.Exception;
 
 
     /**
@@ -67,24 +67,24 @@ public interface MembershipService {
      * stops broad casting the server
      * @throws java.lang.IllegalArgumentException if the level is incorrect.
      */
-    public void stop(int level);
+    void stop(int level);
 
     /**
      * @return true if the the group contains members
      */
-    public boolean hasMembers();
+    boolean hasMembers();
 
     /**
      * Retrieve the specified member from the membership.
      * @param mbr The member to retrieve
      * @return the member
      */
-    public Member getMember(Member mbr);
+    Member getMember(Member mbr);
 
     /**
      * @return a list of all the members in the cluster.
      */
-    public Member[] getMembers();
+    Member[] getMembers();
 
     /**
      * Get the local member.
@@ -92,19 +92,19 @@ public interface MembershipService {
      * @param incAliveTime <code>true</code> to set the alive time
      *  on the local member
      */
-    public Member getLocalMember(boolean incAliveTime);
+    Member getLocalMember(boolean incAliveTime);
 
     /**
      * @return all members by name
      */
-    public String[] getMembersByName();
+    String[] getMembersByName();
 
     /**
      * Get a member.
      * @param name The member name
      * @return the member
      */
-    public Member findMemberByName(String name);
+    Member findMemberByName(String name);
 
     /**
      * Sets the local member properties for broadcasting.
@@ -114,51 +114,51 @@ public interface MembershipService {
      * @param securePort Use a secure port
      * @param udpPort Use UDP
      */
-    public void setLocalMemberProperties(String listenHost, int listenPort, int securePort, int udpPort);
+    void setLocalMemberProperties(String listenHost, int listenPort, int securePort, int udpPort);
 
     /**
      * Sets the membership listener, only one listener can be added.
      * If you call this method twice, the last listener will be used.
      * @param listener The listener
      */
-    public void setMembershipListener(MembershipListener listener);
+    void setMembershipListener(MembershipListener listener);
 
     /**
      * Removes the membership listener.
      */
-    public void removeMembershipListener();
+    void removeMembershipListener();
 
     /**
      * Set a payload to be broadcasted with each membership
      * broadcast.
      * @param payload byte[]
      */
-    public void setPayload(byte[] payload);
+    void setPayload(byte[] payload);
 
-    public void setDomain(byte[] domain);
+    void setDomain(byte[] domain);
 
     /**
      * Broadcasts a message to all members.
      * @param message The message to broadcast
      * @throws ChannelException Message broadcast failed
      */
-    public void broadcast(ChannelMessage message) throws ChannelException;
+    void broadcast(ChannelMessage message) throws ChannelException;
 
     /**
      * Return the channel that is related to this MembershipService
      * @return Channel
      */
-    public Channel getChannel();
+    Channel getChannel();
 
     /**
      * Set the channel that is related to this MembershipService
      * @param channel The channel
      */
-    public void setChannel(Channel channel);
+    void setChannel(Channel channel);
 
     /**
      * Get the MembershipProvider
      * @return MembershipProvider
      */
-    public MembershipProvider getMembershipProvider();
+    MembershipProvider getMembershipProvider();
 }

==================================================
ExtendedRpcCallback.java
index e62b84da14..bcd07e9ab4 100644
--- a/java/org/apache/catalina/tribes/MessageListener.java
+++ b/java/org/apache/catalina/tribes/MessageListener.java
@@ -26,7 +26,7 @@ public interface MessageListener {
      * Receive a message from the IO components in the Channel stack
      * @param msg ChannelMessage
      */
-    public void messageReceived(ChannelMessage msg);
+    void messageReceived(ChannelMessage msg);
 
-    public boolean accept(ChannelMessage msg);
+    boolean accept(ChannelMessage msg);
 }

==================================================
GroupChannelMBean.java
index 015b47953f..c5e460be8e 100644
--- a/java/org/apache/catalina/tribes/group/ExtendedRpcCallback.java
+++ b/java/org/apache/catalina/tribes/group/ExtendedRpcCallback.java
@@ -33,7 +33,7 @@ public interface ExtendedRpcCallback extends RpcCallback {
      * @param sender - the sender requested that reply
      * @param reason - the reason the reply failed
      */
-    public void replyFailed(Serializable request, Serializable response, Member sender, Exception reason);
+    void replyFailed(Serializable request, Serializable response, Member sender, Exception reason);
 
     /**
      * The reply succeeded
@@ -41,5 +41,5 @@ public interface ExtendedRpcCallback extends RpcCallback {
      * @param response - the reply message to the original message
      * @param sender - the sender requested that reply
      */
-    public void replySucceeded(Serializable request, Serializable response, Member sender);
+    void replySucceeded(Serializable request, Serializable response, Member sender);
 }

==================================================
RpcCallback.java
index 693b54e155..83bbaa6487 100644
--- a/java/org/apache/catalina/tribes/group/GroupChannelMBean.java
+++ b/java/org/apache/catalina/tribes/group/GroupChannelMBean.java
@@ -28,35 +28,35 @@ import org.apache.catalina.tribes.UniqueId;
 public interface GroupChannelMBean {
 
     // Attributes
-    public boolean getOptionCheck();
+    boolean getOptionCheck();
 
-    public boolean getHeartbeat();
+    boolean getHeartbeat();
 
-    public long getHeartbeatSleeptime();
+    long getHeartbeatSleeptime();
 
     // Operations
-    public void start(int svc) throws ChannelException;
+    void start(int svc) throws ChannelException;
 
-    public void stop(int svc) throws ChannelException;
+    void stop(int svc) throws ChannelException;
 
-    public UniqueId send(Member[] destination, Serializable msg, int options)
+    UniqueId send(Member[] destination, Serializable msg, int options)
             throws ChannelException;
 
-    public UniqueId send(Member[] destination, Serializable msg, int options, ErrorHandler handler)
+    UniqueId send(Member[] destination, Serializable msg, int options, ErrorHandler handler)
             throws ChannelException;
 
-    public void addMembershipListener(MembershipListener listener);
+    void addMembershipListener(MembershipListener listener);
 
-    public void addChannelListener(ChannelListener listener);
+    void addChannelListener(ChannelListener listener);
 
-    public void removeMembershipListener(MembershipListener listener);
+    void removeMembershipListener(MembershipListener listener);
 
-    public void removeChannelListener(ChannelListener listener);
+    void removeChannelListener(ChannelListener listener);
 
-    public boolean hasMembers() ;
+    boolean hasMembers() ;
 
-    public Member[] getMembers() ;
+    Member[] getMembers() ;
 
-    public Member getLocalMember(boolean incAlive);
+    Member getLocalMember(boolean incAlive);
 
 }

==================================================
DomainFilterInterceptorMBean.java
index 494a1e2b3c..83ee4ec339 100644
--- a/java/org/apache/catalina/tribes/group/RpcCallback.java
+++ b/java/org/apache/catalina/tribes/group/RpcCallback.java
@@ -32,7 +32,7 @@ public interface RpcCallback {
      * @param sender Member
      * @return Serializable object, <code>null</code> if no reply should be sent
      */
-    public Serializable replyRequest(Serializable msg, Member sender);
+    Serializable replyRequest(Serializable msg, Member sender);
 
     /**
      * If the reply has already been sent to the requesting thread,
@@ -40,6 +40,6 @@ public interface RpcCallback {
      * @param msg The message
      * @param sender Member
      */
-    public void leftOver(Serializable msg, Member sender);
+    void leftOver(Serializable msg, Member sender);
 
 }
\ No newline at end of file

==================================================
EncryptInterceptor.java
index 1c0ba27669..462e23b0b6 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/DomainFilterInterceptorMBean.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/DomainFilterInterceptorMBean.java
@@ -18,12 +18,12 @@ package org.apache.catalina.tribes.group.interceptors;
 
 public interface DomainFilterInterceptorMBean {
 
-    public int getOptionFlag();
+    int getOptionFlag();
 
-    public byte[] getDomain();
+    byte[] getDomain();
 
-    public int getLogInterval();
+    int getLogInterval();
 
-    public void setLogInterval(int logInterval);
+    void setLogInterval(int logInterval);
 
 }

==================================================
EncryptInterceptorMBean.java
index e2a48f7429..a209864e45 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/EncryptInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/EncryptInterceptor.java
@@ -394,7 +394,7 @@ public class EncryptInterceptor extends ChannelInterceptorBase implements Encryp
          */
         private final ConcurrentLinkedQueue<SecureRandom> randomPool;
 
-        public BaseEncryptionManager(String algorithm, SecretKeySpec secretKey, String providerName)
+        BaseEncryptionManager(String algorithm, SecretKeySpec secretKey, String providerName)
             throws NoSuchAlgorithmException, NoSuchPaddingException, NoSuchProviderException {
             this.algorithm = algorithm;
             this.providerName = providerName;
@@ -591,7 +591,7 @@ public class EncryptInterceptor extends ChannelInterceptorBase implements Encryp
      */
     private static class GCMEncryptionManager extends BaseEncryptionManager
     {
-        public GCMEncryptionManager(String algorithm, SecretKeySpec secretKey, String providerName)
+        GCMEncryptionManager(String algorithm, SecretKeySpec secretKey, String providerName)
                 throws NoSuchAlgorithmException, NoSuchPaddingException, NoSuchProviderException {
             super(algorithm, secretKey, providerName);
         }
@@ -613,7 +613,7 @@ public class EncryptInterceptor extends ChannelInterceptorBase implements Encryp
     {
         private static final long serialVersionUID = 1L;
 
-        public ChannelConfigException(String message) {
+        ChannelConfigException(String message) {
             super(message);
         }
     }

==================================================
FragmentationInterceptorMBean.java
index dcf0f7ba69..04c3b4e6e9 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/EncryptInterceptorMBean.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/EncryptInterceptorMBean.java
@@ -19,13 +19,13 @@ package org.apache.catalina.tribes.group.interceptors;
 public interface EncryptInterceptorMBean {
 
     // Config
-    public int getOptionFlag();
-    public void setOptionFlag(int optionFlag);
+    int getOptionFlag();
+    void setOptionFlag(int optionFlag);
 
-    public void setEncryptionAlgorithm(String algorithm);
-    public String getEncryptionAlgorithm();
-    public void setEncryptionKey(byte[] key);
-    public byte[] getEncryptionKey();
-    public void setProviderName(String provider);
-    public String getProviderName();
+    void setEncryptionAlgorithm(String algorithm);
+    String getEncryptionAlgorithm();
+    void setEncryptionKey(byte[] key);
+    byte[] getEncryptionKey();
+    void setProviderName(String provider);
+    String getProviderName();
 }

==================================================
GzipInterceptorMBean.java
index 3af82c1180..6c47440e53 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/FragmentationInterceptorMBean.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/FragmentationInterceptorMBean.java
@@ -19,11 +19,11 @@ package org.apache.catalina.tribes.group.interceptors;
 public interface FragmentationInterceptorMBean {
 
     // Attributes
-    public int getMaxSize();
+    int getMaxSize();
 
-    public long getExpire();
+    long getExpire();
 
-    public void setMaxSize(int maxSize);
+    void setMaxSize(int maxSize);
 
-    public void setExpire(long expire);
+    void setExpire(long expire);
 }
\ No newline at end of file

==================================================
MessageDispatchInterceptorMBean.java
index d0287ef1ef..07f30c01ac 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/GzipInterceptorMBean.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/GzipInterceptorMBean.java
@@ -19,13 +19,13 @@ package org.apache.catalina.tribes.group.interceptors;
 public interface GzipInterceptorMBean {
 
     // Config
-    public int getOptionFlag();
-    public void setOptionFlag(int optionFlag);
+    int getOptionFlag();
+    void setOptionFlag(int optionFlag);
 
     /**
      * @return the minimum payload size for compression to be enabled.
      */
-    public int getCompressionMinSize();
+    int getCompressionMinSize();
     /**
      * Set the minimum payload size for compression to be enabled. A value of
      * zero or less means compression will always be used. If not explicitly
@@ -33,26 +33,26 @@ public interface GzipInterceptorMBean {
      *
      * @param compressionMinSize The new minimum payload size
      */
-    public void setCompressionMinSize(int compressionMinSize);
+    void setCompressionMinSize(int compressionMinSize);
 
     /**
      * @return {@code true} if the interceptor is configured to collect
      *         statistics, otherwise {@code false}
      */
-    public boolean getStatsEnabled();
+    boolean getStatsEnabled();
     /**
      * Configure whether the interceptor collects statistics.
      *
      * @param statsEnabled {@code true} to enable statistics collections,
      *        otherwise {@code false}
      */
-    public void setStatsEnabled(boolean statsEnabled);
+    void setStatsEnabled(boolean statsEnabled);
 
     /**
      * @return If statistics collection is enabled, the number of messages
      *         between statistics reports being written to the log.
      */
-    public int getInterval();
+    int getInterval();
     /**
      * If statistics collection is enabled, set the number of messages between
      * statistics reports being written to the log. A value of zero or less
@@ -60,20 +60,20 @@ public interface GzipInterceptorMBean {
      *
      * @param interval The new interval between reports
      */
-    public void setInterval(int interval);
+    void setInterval(int interval);
 
     // Stats
-    public int getCount();
-    public int getCountCompressedTX();
-    public int getCountUncompressedTX();
-    public int getCountCompressedRX();
-    public int getCountUncompressedRX();
-    public long getSizeTX();
-    public long getCompressedSizeTX();
-    public long getUncompressedSizeTX();
-    public long getSizeRX();
-    public long getCompressedSizeRX();
-    public long getUncompressedSizeRX();
-    public void reset();
-    public void report();
+    int getCount();
+    int getCountCompressedTX();
+    int getCountUncompressedTX();
+    int getCountCompressedRX();
+    int getCountUncompressedRX();
+    long getSizeTX();
+    long getCompressedSizeTX();
+    long getUncompressedSizeTX();
+    long getSizeRX();
+    long getCompressedSizeRX();
+    long getUncompressedSizeRX();
+    void reset();
+    void report();
 }

==================================================
StaticMembershipInterceptorMBean.java
index fba1849a14..be539b682b 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/MessageDispatchInterceptorMBean.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/MessageDispatchInterceptorMBean.java
@@ -18,29 +18,29 @@ package org.apache.catalina.tribes.group.interceptors;
 
 public interface MessageDispatchInterceptorMBean {
 
-    public int getOptionFlag();
+    int getOptionFlag();
 
-    public boolean isAlwaysSend();
+    boolean isAlwaysSend();
 
-    public void setAlwaysSend(boolean alwaysSend);
+    void setAlwaysSend(boolean alwaysSend);
 
-    public long getMaxQueueSize();
+    long getMaxQueueSize();
 
-    public long getCurrentSize();
+    long getCurrentSize();
 
-    public long getKeepAliveTime();
+    long getKeepAliveTime();
 
-    public int getMaxSpareThreads();
+    int getMaxSpareThreads();
 
-    public int getMaxThreads();
+    int getMaxThreads();
 
     // pool stats
-    public int getPoolSize();
+    int getPoolSize();
 
-    public int getActiveCount();
+    int getActiveCount();
 
-    public long getTaskCount();
+    long getTaskCount();
 
-    public long getCompletedTaskCount();
+    long getCompletedTaskCount();
 
 }

==================================================
TcpFailureDetectorMBean.java
index ffffbf140f..b090237a11 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/StaticMembershipInterceptorMBean.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/StaticMembershipInterceptorMBean.java
@@ -20,7 +20,7 @@ import org.apache.catalina.tribes.Member;
 
 public interface StaticMembershipInterceptorMBean  {
 
-    public int getOptionFlag();
+    int getOptionFlag();
 
-    public Member getLocalMember(boolean incAlive);
+    Member getLocalMember(boolean incAlive);
 }
\ No newline at end of file

==================================================
TcpPingInterceptorMBean.java
index 76baf14283..a31b75e819 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/TcpFailureDetectorMBean.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/TcpFailureDetectorMBean.java
@@ -18,29 +18,29 @@ package org.apache.catalina.tribes.group.interceptors;
 
 public interface TcpFailureDetectorMBean {
 
-    public int getOptionFlag();
+    int getOptionFlag();
 
     // Attributes
-    public long getConnectTimeout();
+    long getConnectTimeout();
 
-    public boolean getPerformSendTest();
+    boolean getPerformSendTest();
 
-    public boolean getPerformReadTest();
+    boolean getPerformReadTest();
 
-    public long getReadTestTimeout();
+    long getReadTestTimeout();
 
-    public int getRemoveSuspectsTimeout();
+    int getRemoveSuspectsTimeout();
 
-    public void setPerformReadTest(boolean performReadTest);
+    void setPerformReadTest(boolean performReadTest);
 
-    public void setPerformSendTest(boolean performSendTest);
+    void setPerformSendTest(boolean performSendTest);
 
-    public void setReadTestTimeout(long readTestTimeout);
+    void setReadTestTimeout(long readTestTimeout);
 
-    public void setConnectTimeout(long connectTimeout);
+    void setConnectTimeout(long connectTimeout);
 
-    public void setRemoveSuspectsTimeout(int removeSuspectsTimeout);
+    void setRemoveSuspectsTimeout(int removeSuspectsTimeout);
 
     // Operations
-    public void checkMembers(boolean checkAll);
+    void checkMembers(boolean checkAll);
 }
\ No newline at end of file

==================================================
ThroughputInterceptorMBean.java
index 50d10939e7..dac051507c 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptorMBean.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptorMBean.java
@@ -18,10 +18,10 @@ package org.apache.catalina.tribes.group.interceptors;
 
 public interface TcpPingInterceptorMBean {
 
-    public int getOptionFlag();
+    int getOptionFlag();
 
-    public long getInterval();
+    long getInterval();
 
-    public boolean getUseThread();
+    boolean getUseThread();
 
 }

==================================================
ListenCallback.java
index ab4af12c5a..e40b17732f 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/ThroughputInterceptorMBean.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/ThroughputInterceptorMBean.java
@@ -20,35 +20,35 @@ import java.util.concurrent.atomic.AtomicLong;
 
 public interface ThroughputInterceptorMBean {
 
-    public int getOptionFlag();
+    int getOptionFlag();
 
     // Attributes
-    public int getInterval();
+    int getInterval();
 
-    public void setInterval(int interval);
+    void setInterval(int interval);
 
     // stats
-    public double getLastCnt();
+    double getLastCnt();
 
-    public double getMbAppTx();
+    double getMbAppTx();
 
-    public double getMbRx();
+    double getMbRx();
 
-    public double getMbTx();
+    double getMbTx();
 
-    public AtomicLong getMsgRxCnt();
+    AtomicLong getMsgRxCnt();
 
-    public AtomicLong getMsgTxCnt();
+    AtomicLong getMsgTxCnt();
 
-    public AtomicLong getMsgTxErr();
+    AtomicLong getMsgTxErr();
 
-    public long getRxStart();
+    long getRxStart();
 
-    public double getTimeTx();
+    double getTimeTx();
 
-    public long getTxStart();
+    long getTxStart();
 
     // Operations
-    public void report(double timeTx);
+    void report(double timeTx);
 
 }

==================================================
McastServiceMBean.java
index c23a9e775e..66a17412e2 100644
--- a/java/org/apache/catalina/tribes/io/ListenCallback.java
+++ b/java/org/apache/catalina/tribes/io/ListenCallback.java
@@ -34,6 +34,6 @@ public interface ListenCallback
      * been received from one of the cluster nodes.
      * @param data - the message bytes received from the cluster/replication system
      */
-     public void messageDataReceived(ChannelMessage data);
+     void messageDataReceived(ChannelMessage data);
 
 }
\ No newline at end of file

==================================================
StaticMembershipServiceMBean.java
index 9d035af8b0..9b7684095a 100644
--- a/java/org/apache/catalina/tribes/membership/McastServiceMBean.java
+++ b/java/org/apache/catalina/tribes/membership/McastServiceMBean.java
@@ -23,38 +23,38 @@ import org.apache.catalina.tribes.Member;
 public interface McastServiceMBean {
 
     // Attributes
-    public String getAddress();
+    String getAddress();
 
-    public int getPort();
+    int getPort();
 
-    public long getFrequency();
+    long getFrequency();
 
-    public long getDropTime();
+    long getDropTime();
 
-    public String getBind();
+    String getBind();
 
-    public int getTtl();
+    int getTtl();
 
-    public byte[] getDomain();
+    byte[] getDomain();
 
-    public int getSoTimeout();
+    int getSoTimeout();
 
-    public boolean getRecoveryEnabled();
+    boolean getRecoveryEnabled();
 
-    public int getRecoveryCounter();
+    int getRecoveryCounter();
 
-    public long getRecoverySleepTime();
+    long getRecoverySleepTime();
 
-    public boolean getLocalLoopbackDisabled();
+    boolean getLocalLoopbackDisabled();
 
-    public String getLocalMemberName();
+    String getLocalMemberName();
 
     // Operation
-    public Properties getProperties();
+    Properties getProperties();
 
-    public boolean hasMembers();
+    boolean hasMembers();
 
-    public String[] getMembersByName();
+    String[] getMembersByName();
 
-    public Member findMemberByName(String name);
+    Member findMemberByName(String name);
 }

==================================================
CloudMembershipServiceMBean.java
index 7c17398c1c..d6a2721f64 100644
--- a/java/org/apache/catalina/tribes/membership/StaticMembershipServiceMBean.java
+++ b/java/org/apache/catalina/tribes/membership/StaticMembershipServiceMBean.java
@@ -23,22 +23,22 @@ import org.apache.catalina.tribes.Member;
 public interface StaticMembershipServiceMBean {
 
     // Attributes
-    public long getExpirationTime();
+    long getExpirationTime();
 
-    public int getConnectTimeout();
+    int getConnectTimeout();
 
-    public long getRpcTimeout();
+    long getRpcTimeout();
 
-    public boolean getUseThread();
+    boolean getUseThread();
 
-    public long getPingInterval();
+    long getPingInterval();
 
     // Operation
-    public Properties getProperties();
+    Properties getProperties();
 
-    public boolean hasMembers();
+    boolean hasMembers();
 
-    public String[] getMembersByName();
+    String[] getMembersByName();
 
-    public Member findMemberByName(String name);
+    Member findMemberByName(String name);
 }

==================================================
StreamProvider.java
index a97ec614bf..7817c550ca 100644
--- a/java/org/apache/catalina/tribes/membership/cloud/CloudMembershipServiceMBean.java
+++ b/java/org/apache/catalina/tribes/membership/cloud/CloudMembershipServiceMBean.java
@@ -23,18 +23,18 @@ import org.apache.catalina.tribes.Member;
 public interface CloudMembershipServiceMBean {
 
     // Attributes
-    public int getConnectTimeout();
+    int getConnectTimeout();
 
-    public int getReadTimeout();
+    int getReadTimeout();
 
-    public long getExpirationTime();
+    long getExpirationTime();
 
     // Operation
-    public Properties getProperties();
+    Properties getProperties();
 
-    public boolean hasMembers();
+    boolean hasMembers();
 
-    public String[] getMembersByName();
+    String[] getMembersByName();
 
-    public Member findMemberByName(String name);
+    Member findMemberByName(String name);
 }

==================================================
AbstractReplicatedMap.java
index 4c4c374f75..7488864467 100644
--- a/java/org/apache/catalina/tribes/membership/cloud/StreamProvider.java
+++ b/java/org/apache/catalina/tribes/membership/cloud/StreamProvider.java
@@ -30,5 +30,5 @@ public interface StreamProvider {
      * @return the stream
      * @throws IOException when an error occurs
      */
-    public InputStream openStream(String url, Map<String, String> headers, int connectTimeout, int readTimeout) throws IOException;
+    InputStream openStream(String url, Map<String, String> headers, int connectTimeout, int readTimeout) throws IOException;
 }

==================================================
ReplicatedMapEntry.java
index d040a7262d..333f3ae6c8 100644
--- a/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
@@ -154,8 +154,8 @@ public abstract class AbstractReplicatedMap<K,V>
 //              map owner interface
 //------------------------------------------------------------------------------
 
-    public static interface MapOwner {
-        public void objectMadePrimary(Object key, Object value);
+    public interface MapOwner {
+        void objectMadePrimary(Object key, Object value);
     }
 
 //------------------------------------------------------------------------------
@@ -1728,7 +1728,7 @@ public abstract class AbstractReplicatedMap<K,V>
 
         private final boolean available;
 
-        private State(boolean available) {
+        State(boolean available) {
             this.available = available;
         }
 

==================================================
DataSender.java
index 8bc5b5fbdf..7b97aef157 100644
--- a/java/org/apache/catalina/tribes/tipis/ReplicatedMapEntry.java
+++ b/java/org/apache/catalina/tribes/tipis/ReplicatedMapEntry.java
@@ -48,21 +48,21 @@ public interface ReplicatedMapEntry extends Serializable {
      * and is not in a locked state
      * @return boolean
      */
-    public boolean isDirty();
+    boolean isDirty();
 
     /**
      * If this returns true, the map will extract the diff using getDiff()
      * Otherwise it will serialize the entire object.
      * @return boolean
      */
-    public boolean isDiffable();
+    boolean isDiffable();
 
     /**
      * Returns a diff and sets the dirty map to false
      * @return Serialized diff data
      * @throws IOException IO error serializing
      */
-    public byte[] getDiff() throws IOException;
+    byte[] getDiff() throws IOException;
 
 
     /**
@@ -73,22 +73,22 @@ public interface ReplicatedMapEntry extends Serializable {
      * @throws IOException IO error deserializing
      * @throws ClassNotFoundException Serialization error
      */
-    public void applyDiff(byte[] diff, int offset, int length) throws IOException, ClassNotFoundException;
+    void applyDiff(byte[] diff, int offset, int length) throws IOException, ClassNotFoundException;
 
     /**
      * Resets the current diff state and resets the dirty flag
      */
-    public void resetDiff();
+    void resetDiff();
 
     /**
      * Lock during serialization
      */
-    public void lock();
+    void lock();
 
     /**
      * Unlock after serialization
      */
-    public void unlock();
+    void unlock();
 
     /**
      * This method is called after the object has been
@@ -97,7 +97,7 @@ public interface ReplicatedMapEntry extends Serializable {
      *
      * @param owner Object
      */
-    public void setOwner(Object owner);
+    void setOwner(Object owner);
 
     /**
      * For accuracy checking, a serialized attribute can contain a version number
@@ -105,34 +105,34 @@ public interface ReplicatedMapEntry extends Serializable {
      * The replicated map can use this to ensure accuracy on a periodic basis
      * @return long - the version number or -1 if the data is not versioned
      */
-    public long getVersion();
+    long getVersion();
 
     /**
      * Forces a certain version to a replicated map entry<br>
      * @param version long
      */
-    public void setVersion(long version);
+    void setVersion(long version);
 
     /**
      * @return the last replicate time.
      */
-    public long getLastTimeReplicated();
+    long getLastTimeReplicated();
 
     /**
      * Set the last replicate time.
      * @param lastTimeReplicated New timestamp
      */
-    public void setLastTimeReplicated(long lastTimeReplicated);
+    void setLastTimeReplicated(long lastTimeReplicated);
 
     /**
      * If this returns true, to replicate that an object has been accessed
      * @return boolean
      */
-    public boolean isAccessReplicate();
+    boolean isAccessReplicate();
 
     /**
      * Access to an existing object.
      */
-    public void accessEntry();
+    void accessEntry();
 
 }
\ No newline at end of file

==================================================
MultiPointSender.java
index 4088686994..b804989865 100644
--- a/java/org/apache/catalina/tribes/transport/DataSender.java
+++ b/java/org/apache/catalina/tribes/transport/DataSender.java
@@ -19,15 +19,15 @@ package org.apache.catalina.tribes.transport;
 import java.io.IOException;
 
 public interface DataSender {
-    public void connect() throws IOException;
-    public void disconnect();
-    public boolean isConnected();
-    public void setRxBufSize(int size);
-    public void setTxBufSize(int size);
-    public boolean keepalive();
-    public void setTimeout(long timeout);
-    public void setKeepAliveCount(int maxRequests);
-    public void setKeepAliveTime(long keepAliveTimeInMs);
-    public int getRequestCount();
-    public long getConnectTime();
+    void connect() throws IOException;
+    void disconnect();
+    boolean isConnected();
+    void setRxBufSize(int size);
+    void setTxBufSize(int size);
+    boolean keepalive();
+    void setTimeout(long timeout);
+    void setKeepAliveCount(int maxRequests);
+    void setKeepAliveTime(long keepAliveTimeInMs);
+    int getRequestCount();
+    long getConnectTime();
 }
\ No newline at end of file

==================================================
PooledSender.java
index bc519e8573..bdf1347f66 100644
--- a/java/org/apache/catalina/tribes/transport/MultiPointSender.java
+++ b/java/org/apache/catalina/tribes/transport/MultiPointSender.java
@@ -24,9 +24,9 @@ import org.apache.catalina.tribes.Member;
  */
 public interface MultiPointSender extends DataSender
 {
-    public void sendMessage(Member[] destination, ChannelMessage data) throws ChannelException;
-    public void setMaxRetryAttempts(int attempts);
-    public void setDirectBuffer(boolean directBuf);
-    public void add(Member member);
-    public void remove(Member member);
+    void sendMessage(Member[] destination, ChannelMessage data) throws ChannelException;
+    void setMaxRetryAttempts(int attempts);
+    void setDirectBuffer(boolean directBuf);
+    void add(Member member);
+    void remove(Member member);
 }

==================================================
RxTaskPool.java
index 70ea59476e..89106e9c85 100644
--- a/java/org/apache/catalina/tribes/transport/PooledSender.java
+++ b/java/org/apache/catalina/tribes/transport/PooledSender.java
@@ -120,7 +120,7 @@ public abstract class PooledSender extends AbstractSender implements MultiPointS
 
         private boolean isOpen = true;
 
-        public SenderQueue(PooledSender parent, int limit) {
+        SenderQueue(PooledSender parent, int limit) {
             this.limit = limit;
             this.parent = parent;
             notinuse = new ArrayList<>();

==================================================
NioReceiverMBean.java
index bafe307b0c..5a04e73b9a 100644
--- a/java/org/apache/catalina/tribes/transport/RxTaskPool.java
+++ b/java/org/apache/catalina/tribes/transport/RxTaskPool.java
@@ -147,7 +147,7 @@ public class RxTaskPool {
         return this.creator;
     }
 
-    public static interface TaskCreator  {
-        public AbstractRxTask createRxTask();
+    public interface TaskCreator  {
+        AbstractRxTask createRxTask();
     }
 }

==================================================
PooledParallelSenderMBean.java
index 473f803e17..acf7e7f172 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioReceiverMBean.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioReceiverMBean.java
@@ -20,59 +20,59 @@ package org.apache.catalina.tribes.transport.nio;
 public interface NioReceiverMBean {
 
     // Receiver Attributes
-    public String getAddress();
+    String getAddress();
 
-    public boolean getDirect();
+    boolean getDirect();
 
-    public int getPort();
+    int getPort();
 
-    public int getAutoBind();
+    int getAutoBind();
 
-    public int getSecurePort();
+    int getSecurePort();
 
-    public int getUdpPort();
+    int getUdpPort();
 
-    public long getSelectorTimeout();
+    long getSelectorTimeout();
 
-    public int getMaxThreads();
+    int getMaxThreads();
 
-    public int getMinThreads();
+    int getMinThreads();
 
-    public long getMaxIdleTime();
+    long getMaxIdleTime();
 
-    public boolean getOoBInline();
+    boolean getOoBInline();
 
-    public int getRxBufSize();
+    int getRxBufSize();
 
-    public int getTxBufSize();
+    int getTxBufSize();
 
-    public int getUdpRxBufSize();
+    int getUdpRxBufSize();
 
-    public int getUdpTxBufSize();
+    int getUdpTxBufSize();
 
-    public boolean getSoKeepAlive();
+    boolean getSoKeepAlive();
 
-    public boolean getSoLingerOn();
+    boolean getSoLingerOn();
 
-    public int getSoLingerTime();
+    int getSoLingerTime();
 
-    public boolean getSoReuseAddress();
+    boolean getSoReuseAddress();
 
-    public boolean getTcpNoDelay();
+    boolean getTcpNoDelay();
 
-    public int getTimeout();
+    int getTimeout();
 
-    public boolean getUseBufferPool();
+    boolean getUseBufferPool();
 
-    public boolean isListening();
+    boolean isListening();
 
     // pool stats
-    public int getPoolSize();
+    int getPoolSize();
 
-    public int getActiveCount();
+    int getActiveCount();
 
-    public long getTaskCount();
+    long getTaskCount();
 
-    public long getCompletedTaskCount();
+    long getCompletedTaskCount();
 
 }

==================================================
ExecutorFactory.java
index 9fca94fa07..cc7876885a 100644
--- a/java/org/apache/catalina/tribes/transport/nio/PooledParallelSenderMBean.java
+++ b/java/org/apache/catalina/tribes/transport/nio/PooledParallelSenderMBean.java
@@ -19,50 +19,50 @@ package org.apache.catalina.tribes.transport.nio;
 public interface PooledParallelSenderMBean {
 
     // Transport Attributes
-    public int getRxBufSize();
+    int getRxBufSize();
 
-    public int getTxBufSize();
+    int getTxBufSize();
 
-    public int getUdpRxBufSize();
+    int getUdpRxBufSize();
 
-    public int getUdpTxBufSize();
+    int getUdpTxBufSize();
 
-    public boolean getDirectBuffer();
+    boolean getDirectBuffer();
 
-    public int getKeepAliveCount();
+    int getKeepAliveCount();
 
-    public long getKeepAliveTime();
+    long getKeepAliveTime();
 
-    public long getTimeout();
+    long getTimeout();
 
-    public int getMaxRetryAttempts();
+    int getMaxRetryAttempts();
 
-    public boolean getOoBInline();
+    boolean getOoBInline();
 
-    public boolean getSoKeepAlive();
+    boolean getSoKeepAlive();
 
-    public boolean getSoLingerOn();
+    boolean getSoLingerOn();
 
-    public int getSoLingerTime();
+    int getSoLingerTime();
 
-    public boolean getSoReuseAddress();
+    boolean getSoReuseAddress();
 
-    public int getSoTrafficClass();
+    int getSoTrafficClass();
 
-    public boolean getTcpNoDelay();
+    boolean getTcpNoDelay();
 
-    public boolean getThrowOnFailedAck();
+    boolean getThrowOnFailedAck();
 
     // PooledSender Attributes
-    public int getPoolSize();
+    int getPoolSize();
 
-    public long getMaxWait();
+    long getMaxWait();
 
     // Operation
-    public boolean isConnected();
+    boolean isConnected();
 
-    public int getInPoolSize();
+    int getInPoolSize();
 
-    public int getInUsePoolSize();
+    int getInUsePoolSize();
 
 }
\ No newline at end of file

==================================================
MemoryUserDatabase.java
index f14fd9dd1a..2f2cdfdcc5 100644
--- a/java/org/apache/catalina/tribes/util/ExecutorFactory.java
+++ b/java/org/apache/catalina/tribes/util/ExecutorFactory.java
@@ -46,25 +46,25 @@ public class ExecutorFactory {
 
     // ---------------------------------------------- TribesThreadPoolExecutor Inner Class
     private static class TribesThreadPoolExecutor extends ThreadPoolExecutor {
-        public TribesThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,
+        TribesThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,
                 BlockingQueue<Runnable> workQueue, RejectedExecutionHandler handler) {
             super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, handler);
             prestartAllCoreThreads();
         }
 
-        public TribesThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,
+        TribesThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,
                 BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) {
             super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);
             prestartAllCoreThreads();
         }
 
-        public TribesThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,
+        TribesThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,
                 BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory) {
             super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory);
             prestartAllCoreThreads();
         }
 
-        public TribesThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,
+        TribesThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,
                 BlockingQueue<Runnable> workQueue) {
             super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);
             prestartAllCoreThreads();
@@ -91,7 +91,7 @@ public class ExecutorFactory {
 
         transient ThreadPoolExecutor parent = null;
 
-        public TaskQueue() {
+        TaskQueue() {
             super();
         }
 

==================================================
ToStringUtil.java
index 614d855c5f..292ea3d2e8 100644
--- a/java/org/apache/catalina/users/MemoryUserDatabase.java
+++ b/java/org/apache/catalina/users/MemoryUserDatabase.java
@@ -775,7 +775,7 @@ public class MemoryUserDatabase implements UserDatabase {
  */
 class MemoryGroupCreationFactory extends AbstractObjectCreationFactory {
 
-    public MemoryGroupCreationFactory(MemoryUserDatabase database) {
+    MemoryGroupCreationFactory(MemoryUserDatabase database) {
         this.database = database;
     }
 
@@ -828,7 +828,7 @@ class MemoryGroupCreationFactory extends AbstractObjectCreationFactory {
  */
 class MemoryRoleCreationFactory extends AbstractObjectCreationFactory {
 
-    public MemoryRoleCreationFactory(MemoryUserDatabase database) {
+    MemoryRoleCreationFactory(MemoryUserDatabase database) {
         this.database = database;
     }
 
@@ -859,7 +859,7 @@ class MemoryRoleCreationFactory extends AbstractObjectCreationFactory {
  */
 class MemoryUserCreationFactory extends AbstractObjectCreationFactory {
 
-    public MemoryUserCreationFactory(MemoryUserDatabase database) {
+    MemoryUserCreationFactory(MemoryUserDatabase database) {
         this.database = database;
     }
 

==================================================
AbstractAccessLogValve.java
index d87ace8a41..d1602bf423 100644
--- a/java/org/apache/catalina/util/ToStringUtil.java
+++ b/java/org/apache/catalina/util/ToStringUtil.java
@@ -46,7 +46,7 @@ public class ToStringUtil {
     }
 
 
-    private static final String containedToString(Object contained, Object container,
+    private static String containedToString(Object contained, Object container,
             String containerTypeName) {
         StringBuilder sb = new StringBuilder(contained.getClass().getSimpleName());
         sb.append('[');

==================================================
StuckThreadDetectionValve.java
index 73852569fa..f3a664e675 100644
--- a/java/org/apache/catalina/valves/AbstractAccessLogValve.java
+++ b/java/org/apache/catalina/valves/AbstractAccessLogValve.java
@@ -801,7 +801,7 @@ public abstract class AbstractAccessLogValve extends ValveBase implements Access
      * AccessLogElement writes the partial message into the buffer.
      */
     protected interface AccessLogElement {
-        public void addElement(CharArrayWriter buf, Date date, Request request,
+        void addElement(CharArrayWriter buf, Date date, Request request,
                 Response response, long time);
     }
 
@@ -816,7 +816,7 @@ public abstract class AbstractAccessLogValve extends ValveBase implements Access
      * state-less.
      */
     protected interface CachedElement {
-        public void cache(Request request);
+        void cache(Request request);
     }
 
     /**

==================================================
ResolverImpl.java
index d7105cc4d7..9c3ca82510 100644
--- a/java/org/apache/catalina/valves/StuckThreadDetectionValve.java
+++ b/java/org/apache/catalina/valves/StuckThreadDetectionValve.java
@@ -300,7 +300,7 @@ public class StuckThreadDetectionValve extends ValveBase {
          */
         private boolean interrupted;
 
-        public MonitoredThread(Thread thread, String requestUri,
+        MonitoredThread(Thread thread, String requestUri,
                 boolean interruptible) {
             this.thread = thread;
             this.requestUri = requestUri;
@@ -400,7 +400,7 @@ public class StuckThreadDetectionValve extends ValveBase {
         private final long threadId;
         private final long totalActiveTime;
 
-        public CompletedStuckThread(Thread thread, long totalActiveTime) {
+        CompletedStuckThread(Thread thread, long totalActiveTime) {
             this.threadName = thread.getName();
             this.threadId = thread.getId();
             this.totalActiveTime = totalActiveTime;

==================================================
RewriteMap.java
index f6adc5a128..ce66f860a7 100644
--- a/java/org/apache/catalina/valves/rewrite/ResolverImpl.java
+++ b/java/org/apache/catalina/valves/rewrite/ResolverImpl.java
@@ -347,7 +347,7 @@ public class ResolverImpl extends Resolver {
         }
     }
 
-    private static final String emptyStringIfNull(String value) {
+    private static String emptyStringIfNull(String value) {
         if (value == null) {
             return "";
         } else {

==================================================
CachedResource.java
index 5ca73e7c1e..6077c276f5 100644
--- a/java/org/apache/catalina/valves/rewrite/RewriteMap.java
+++ b/java/org/apache/catalina/valves/rewrite/RewriteMap.java
@@ -43,7 +43,7 @@ public interface RewriteMap {
      * @param params the optional parameter
      * @return value is currently ignored
      */
-    public String setParameters(String params);
+    String setParameters(String params);
 
     /**
      * Optional parameters that can be defined through the {@code RewriteMap}
@@ -72,5 +72,5 @@ public interface RewriteMap {
      * @param key used by the actual implementation to generate a mapped value
      * @return mapped value or {@code null}
      */
-    public String lookup(String key);
+    String lookup(String key);
 }

==================================================
JarContents.java
index e142a8dc90..9f7fca6640 100644
--- a/java/org/apache/catalina/webresources/CachedResource.java
+++ b/java/org/apache/catalina/webresources/CachedResource.java
@@ -415,7 +415,7 @@ public class CachedResource implements WebResource {
 
         private URL associatedURL = null;
 
-        public CachedResourceURLStreamHandler(URL resourceURL, StandardRoot root, String webAppPath,
+        CachedResourceURLStreamHandler(URL resourceURL, StandardRoot root, String webAppPath,
                 boolean usesClassLoaderResources) {
             this.resourceURL = resourceURL;
             this.root = root;

==================================================
JarWarResourceSet.java
index 205077efa5..e5a5d9d69c 100644
--- a/java/org/apache/catalina/webresources/JarContents.java
+++ b/java/org/apache/catalina/webresources/JarContents.java
@@ -121,7 +121,7 @@ public final class JarContents {
      *
      * @return Whether the prefix of the path is known to be in this jar.
      */
-    public final boolean mightContainResource(String path, String webappRoot) {
+    public boolean mightContainResource(String path, String webappRoot) {
         int startPos = 0;
         if (path.startsWith(webappRoot)) {
             startPos = webappRoot.length();

==================================================
ActionHook.java
index d9a047819b..0ed30d8e05 100644
--- a/java/org/apache/catalina/webresources/JarWarResourceSet.java
+++ b/java/org/apache/catalina/webresources/JarWarResourceSet.java
@@ -244,7 +244,7 @@ public class JarWarResourceSet extends AbstractArchiveResourceSet {
         private final int version;
         private final JarEntry jarEntry;
 
-        public VersionedJarEntry(int version, JarEntry jarEntry) {
+        VersionedJarEntry(int version, JarEntry jarEntry) {
             this.version = version;
             this.jarEntry = jarEntry;
         }

==================================================
Adapter.java
index 3411e16674..7b54c17c30 100644
--- a/java/org/apache/coyote/ActionHook.java
+++ b/java/org/apache/coyote/ActionHook.java
@@ -33,5 +33,5 @@ public interface ActionHook {
      * @param actionCode Type of the action
      * @param param      Action parameter
      */
-    public void action(ActionCode actionCode, Object param);
+    void action(ActionCode actionCode, Object param);
 }

==================================================
AsyncStateMachine.java
index ee0f1f5b29..f85b1f2e8e 100644
--- a/java/org/apache/coyote/Adapter.java
+++ b/java/org/apache/coyote/Adapter.java
@@ -43,7 +43,7 @@ public interface Adapter {
      *                          Tomcat should be able to handle and log any other exception ( including runtime
      *                          exceptions )
      */
-    public void service(Request req, Response res) throws Exception;
+    void service(Request req, Response res) throws Exception;
 
     /**
      * Prepare the given request/response for processing. This method requires that the request object has been
@@ -57,11 +57,11 @@ public interface Adapter {
      *
      * @throws Exception If the processing fails unexpectedly
      */
-    public boolean prepare(Request req, Response res) throws Exception;
+    boolean prepare(Request req, Response res) throws Exception;
 
-    public boolean asyncDispatch(Request req, Response res, SocketEvent status) throws Exception;
+    boolean asyncDispatch(Request req, Response res, SocketEvent status) throws Exception;
 
-    public void log(Request req, Response res, long time);
+    void log(Request req, Response res, long time);
 
     /**
      * Assert that request and response have been recycled. If they have not then log a warning and force a recycle.
@@ -71,12 +71,12 @@ public interface Adapter {
      * @param req Request
      * @param res Response
      */
-    public void checkRecycled(Request req, Response res);
+    void checkRecycled(Request req, Response res);
 
     /**
      * Provide the name of the domain to use to register MBeans for components associated with the connector.
      *
      * @return The MBean domain name
      */
-    public String getDomain();
+    String getDomain();
 }

==================================================
ContinueResponseTiming.java
index 73fc3640cb..9686b4919b 100644
--- a/java/org/apache/coyote/AsyncStateMachine.java
+++ b/java/org/apache/coyote/AsyncStateMachine.java
@@ -148,7 +148,7 @@ class AsyncStateMachine {
         private final boolean isCompleting;
         private final boolean isDispatching;
 
-        private AsyncState(boolean isAsync, boolean isStarted, boolean isCompleting, boolean isDispatching) {
+        AsyncState(boolean isAsync, boolean isStarted, boolean isCompleting, boolean isDispatching) {
             this.isAsync = isAsync;
             this.isStarted = isStarted;
             this.isCompleting = isCompleting;

==================================================
ErrorState.java
index 923fe41237..2978e50328 100644
--- a/java/org/apache/coyote/ContinueResponseTiming.java
+++ b/java/org/apache/coyote/ContinueResponseTiming.java
@@ -66,7 +66,7 @@ public enum ContinueResponseTiming {
     private final String configValue;
 
 
-    private ContinueResponseTiming(String configValue) {
+    ContinueResponseTiming(String configValue) {
         this.configValue = configValue;
     }
 

==================================================
InputBuffer.java
index 34836563da..9724e65a20 100644
--- a/java/org/apache/coyote/ErrorState.java
+++ b/java/org/apache/coyote/ErrorState.java
@@ -50,7 +50,7 @@ public enum ErrorState {
     private final boolean ioAllowed;
     private final boolean connectionIoAllowed;
 
-    private ErrorState(boolean error, int severity, boolean ioAllowed, boolean connectionIoAllowed) {
+    ErrorState(boolean error, int severity, boolean ioAllowed, boolean connectionIoAllowed) {
         this.error = error;
         this.severity = severity;
         this.ioAllowed = ioAllowed;

==================================================
OutputBuffer.java
index b7fd824fc9..d9c27ff11a 100644
--- a/java/org/apache/coyote/InputBuffer.java
+++ b/java/org/apache/coyote/InputBuffer.java
@@ -36,7 +36,7 @@ public interface InputBuffer {
      *
      * @throws IOException If an I/O error occurs reading from the input stream
      */
-    public int doRead(ApplicationBufferHandler handler) throws IOException;
+    int doRead(ApplicationBufferHandler handler) throws IOException;
 
 
     /**
@@ -45,6 +45,6 @@ public interface InputBuffer {
      *
      * @return The number of bytes that can be read without blocking
      */
-    public int available();
+    int available();
 
 }

==================================================
ProtocolHandler.java
index e694bdd273..f4ba643bb9 100644
--- a/java/org/apache/coyote/OutputBuffer.java
+++ b/java/org/apache/coyote/OutputBuffer.java
@@ -36,7 +36,7 @@ public interface OutputBuffer {
      *
      * @throws IOException an underlying I/O error occurred
      */
-    public int doWrite(ByteBuffer chunk) throws IOException;
+    int doWrite(ByteBuffer chunk) throws IOException;
 
 
     /**
@@ -44,5 +44,5 @@ public interface OutputBuffer {
      *
      * @return Bytes written for the current request
      */
-    public long getBytesWritten();
+    long getBytesWritten();
 }

==================================================
Request.java
index 1b38d9d843..e11c091a2e 100644
--- a/java/org/apache/coyote/ProtocolHandler.java
+++ b/java/org/apache/coyote/ProtocolHandler.java
@@ -38,7 +38,7 @@ public interface ProtocolHandler {
      *
      * @return the adapter
      */
-    public Adapter getAdapter();
+    Adapter getAdapter();
 
 
     /**
@@ -46,7 +46,7 @@ public interface ProtocolHandler {
      *
      * @param adapter The adapter to associate
      */
-    public void setAdapter(Adapter adapter);
+    void setAdapter(Adapter adapter);
 
 
     /**
@@ -54,7 +54,7 @@ public interface ProtocolHandler {
      *
      * @return The executor used to process requests
      */
-    public Executor getExecutor();
+    Executor getExecutor();
 
 
     /**
@@ -62,7 +62,7 @@ public interface ProtocolHandler {
      *
      * @param executor the executor
      */
-    public void setExecutor(Executor executor);
+    void setExecutor(Executor executor);
 
 
     /**
@@ -70,7 +70,7 @@ public interface ProtocolHandler {
      *
      * @return the executor
      */
-    public ScheduledExecutorService getUtilityExecutor();
+    ScheduledExecutorService getUtilityExecutor();
 
 
     /**
@@ -78,7 +78,7 @@ public interface ProtocolHandler {
      *
      * @param utilityExecutor the executor
      */
-    public void setUtilityExecutor(ScheduledExecutorService utilityExecutor);
+    void setUtilityExecutor(ScheduledExecutorService utilityExecutor);
 
 
     /**
@@ -86,7 +86,7 @@ public interface ProtocolHandler {
      *
      * @throws Exception If the protocol handler fails to initialise
      */
-    public void init() throws Exception;
+    void init() throws Exception;
 
 
     /**
@@ -94,7 +94,7 @@ public interface ProtocolHandler {
      *
      * @throws Exception If the protocol handler fails to start
      */
-    public void start() throws Exception;
+    void start() throws Exception;
 
 
     /**
@@ -102,7 +102,7 @@ public interface ProtocolHandler {
      *
      * @throws Exception If the protocol handler fails to pause
      */
-    public void pause() throws Exception;
+    void pause() throws Exception;
 
 
     /**
@@ -110,7 +110,7 @@ public interface ProtocolHandler {
      *
      * @throws Exception If the protocol handler fails to resume
      */
-    public void resume() throws Exception;
+    void resume() throws Exception;
 
 
     /**
@@ -118,7 +118,7 @@ public interface ProtocolHandler {
      *
      * @throws Exception If the protocol handler fails to stop
      */
-    public void stop() throws Exception;
+    void stop() throws Exception;
 
 
     /**
@@ -126,14 +126,14 @@ public interface ProtocolHandler {
      *
      * @throws Exception If the protocol handler fails to destroy
      */
-    public void destroy() throws Exception;
+    void destroy() throws Exception;
 
 
     /**
      * Close the server socket (to prevent further connections) if the server socket was bound on {@link #start()}
      * (rather than on {@link #init()} but do not perform any further shutdown.
      */
-    public void closeServerSocketGraceful();
+    void closeServerSocketGraceful();
 
 
     /**
@@ -144,7 +144,7 @@ public interface ProtocolHandler {
      *
      * @return The wait time, if any remaining when the method returned
      */
-    public long awaitConnectionsClose(long waitMillis);
+    long awaitConnectionsClose(long waitMillis);
 
 
     /**
@@ -152,7 +152,7 @@ public interface ProtocolHandler {
      *
      * @return <code>true</code> if this Protocol Handler supports sendfile, otherwise <code>false</code>
      */
-    public boolean isSendfileSupported();
+    boolean isSendfileSupported();
 
 
     /**
@@ -160,7 +160,7 @@ public interface ProtocolHandler {
      *
      * @param sslHostConfig the configuration
      */
-    public void addSslHostConfig(SSLHostConfig sslHostConfig);
+    void addSslHostConfig(SSLHostConfig sslHostConfig);
 
 
     /**
@@ -168,7 +168,7 @@ public interface ProtocolHandler {
      *
      * @return the configurations
      */
-    public SSLHostConfig[] findSslHostConfigs();
+    SSLHostConfig[] findSslHostConfigs();
 
 
     /**
@@ -176,7 +176,7 @@ public interface ProtocolHandler {
      *
      * @param upgradeProtocol the protocol
      */
-    public void addUpgradeProtocol(UpgradeProtocol upgradeProtocol);
+    void addUpgradeProtocol(UpgradeProtocol upgradeProtocol);
 
 
     /**
@@ -184,7 +184,7 @@ public interface ProtocolHandler {
      *
      * @return the protocols
      */
-    public UpgradeProtocol[] findUpgradeProtocols();
+    UpgradeProtocol[] findUpgradeProtocols();
 
 
     /**
@@ -193,7 +193,7 @@ public interface ProtocolHandler {
      *
      * @return the desired buffer size, or -1 if not relevant
      */
-    public default int getDesiredBufferSize() {
+    default int getDesiredBufferSize() {
         return -1;
     }
 
@@ -204,7 +204,7 @@ public interface ProtocolHandler {
      *
      * @return the id
      */
-    public default String getId() {
+    default String getId() {
         return null;
     }
 
@@ -224,7 +224,7 @@ public interface ProtocolHandler {
      * @throws NoSuchMethodException     Exception occurred
      * @throws SecurityException         Exception occurred
      */
-    public static ProtocolHandler create(String protocol)
+    static ProtocolHandler create(String protocol)
             throws ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException,
             InvocationTargetException, NoSuchMethodException, SecurityException {
         if (protocol == null || "HTTP/1.1".equals(protocol) ||

==================================================
Response.java
index 448bcfa9c3..3278af6ab6 100644
--- a/java/org/apache/coyote/Request.java
+++ b/java/org/apache/coyote/Request.java
@@ -755,12 +755,12 @@ public final class Request {
      * @param pos   Index to use to store the note
      * @param value The value to store at that index
      */
-    public final void setNote(int pos, Object value) {
+    public void setNote(int pos, Object value) {
         notes[pos] = value;
     }
 
 
-    public final Object getNote(int pos) {
+    public Object getNote(int pos) {
         return notes[pos];
     }
 

==================================================
UpgradeProtocol.java
index 0a0cfb16ca..571b1bd8ab 100644
--- a/java/org/apache/coyote/Response.java
+++ b/java/org/apache/coyote/Response.java
@@ -186,12 +186,12 @@ public final class Response {
 
     // -------------------- Per-Response "notes" --------------------
 
-    public final void setNote(int pos, Object value) {
+    public void setNote(int pos, Object value) {
         notes[pos] = value;
     }
 
 
-    public final Object getNote(int pos) {
+    public Object getNote(int pos) {
         return notes[pos];
     }
 

==================================================
UpgradeToken.java
index a70f12f342..96db49e0c2 100644
--- a/java/org/apache/coyote/UpgradeProtocol.java
+++ b/java/org/apache/coyote/UpgradeProtocol.java
@@ -29,13 +29,13 @@ public interface UpgradeProtocol {
      * @return The name that clients will use to request an upgrade to this protocol via an HTTP/1.1 upgrade request or
      *             <code>null</code> if upgrade via an HTTP/1.1 upgrade request is not supported.
      */
-    public String getHttpUpgradeName(boolean isSSLEnabled);
+    String getHttpUpgradeName(boolean isSSLEnabled);
 
     /**
      * @return The byte sequence as listed in the IANA registry for this protocol or <code>null</code> if upgrade via
      *             ALPN is not supported.
      */
-    public byte[] getAlpnIdentifier();
+    byte[] getAlpnIdentifier();
 
     /**
      * @return The name of the protocol as listed in the IANA registry if and only if {@link #getAlpnIdentifier()}
@@ -50,7 +50,7 @@ public interface UpgradeProtocol {
      * Implementation note: Tomcat assumes that the UTF-8 encoding of this name will not exceed 255 bytes. Tomcat's
      * behaviour if longer names are used is undefined.
      */
-    public String getAlpnName();
+    String getAlpnName();
 
     /**
      * @param socketWrapper The socketWrapper for the connection that requires a processor
@@ -59,7 +59,7 @@ public interface UpgradeProtocol {
      *
      * @return A processor instance for processing a connection using this protocol.
      */
-    public Processor getProcessor(SocketWrapperBase<?> socketWrapper, Adapter adapter);
+    Processor getProcessor(SocketWrapperBase<?> socketWrapper, Adapter adapter);
 
 
     /**
@@ -69,7 +69,7 @@ public interface UpgradeProtocol {
      *
      * @return An instance of the HTTP upgrade handler for this protocol
      */
-    public InternalHttpUpgradeHandler getInternalUpgradeHandler(SocketWrapperBase<?> socketWrapper, Adapter adapter,
+    InternalHttpUpgradeHandler getInternalUpgradeHandler(SocketWrapperBase<?> socketWrapper, Adapter adapter,
             Request request);
 
 
@@ -80,7 +80,7 @@ public interface UpgradeProtocol {
      *
      * @return <code>true</code> if the request is accepted, otherwise <code>false</code>
      */
-    public boolean accept(Request request);
+    boolean accept(Request request);
 
 
     /**
@@ -92,7 +92,7 @@ public interface UpgradeProtocol {
      * @param protocol The HTTP/1.1 protocol implementation that will initially handle any connections passed to this
      *                     UpgradeProtocol via the HTTP upgrade mechanism
      */
-    public default void setHttp11Protocol(AbstractHttp11Protocol<?> protocol) {
+    default void setHttp11Protocol(AbstractHttp11Protocol<?> protocol) {
         // NO-OP
     }
 }

==================================================
Constants.java
index 6ffee20569..b1985a56f1 100644
--- a/java/org/apache/coyote/UpgradeToken.java
+++ b/java/org/apache/coyote/UpgradeToken.java
@@ -39,19 +39,19 @@ public final class UpgradeToken {
         this.protocol = protocol;
     }
 
-    public final ContextBind getContextBind() {
+    public ContextBind getContextBind() {
         return contextBind;
     }
 
-    public final HttpUpgradeHandler getHttpUpgradeHandler() {
+    public HttpUpgradeHandler getHttpUpgradeHandler() {
         return httpUpgradeHandler;
     }
 
-    public final InstanceManager getInstanceManager() {
+    public InstanceManager getInstanceManager() {
         return instanceManager;
     }
 
-    public final String getProtocol() {
+    public String getProtocol() {
         return protocol;
     }
 }

==================================================
HttpOutputBuffer.java
index 1da971b589..6c7cd9abb3 100644
--- a/java/org/apache/coyote/ajp/Constants.java
+++ b/java/org/apache/coyote/ajp/Constants.java
@@ -139,7 +139,7 @@ public final class Constants {
      * @param code the coded value
      * @return the string value of the method
      */
-    public static final String getMethodForCode(final int code) {
+    public static String getMethodForCode(final int code) {
         return methodTransArray[code];
     }
 
@@ -184,7 +184,7 @@ public final class Constants {
      * @param code the coded value
      * @return the string value of the header name
      */
-    public static final String getHeaderForCode(final int code) {
+    public static String getHeaderForCode(final int code) {
         return headerTransArray[code];
     }
 
@@ -208,7 +208,7 @@ public final class Constants {
      * @param code the coded value
      * @return the string value of the header
      */
-    public static final String getResponseHeaderForCode(final int code) {
+    public static String getResponseHeaderForCode(final int code) {
         return responseTransArray[code];
     }
 
@@ -226,7 +226,7 @@ public final class Constants {
         }
     }
 
-    public static final int getResponseAjpIndex(String header) {
+    public static int getResponseAjpIndex(String header) {
         Integer i = responseTransMap.get(header);
         if (i == null) {
             return 0;

==================================================
InputFilter.java
index ca71d47b00..6127000ad6 100644
--- a/java/org/apache/coyote/http11/HttpOutputBuffer.java
+++ b/java/org/apache/coyote/http11/HttpOutputBuffer.java
@@ -29,12 +29,12 @@ public interface HttpOutputBuffer extends OutputBuffer {
      *
      * @throws IOException If an I/O error occurs while writing to the client
      */
-    public void end() throws IOException;
+    void end() throws IOException;
 
     /**
      * Flushes any unwritten data to the client.
      *
      * @throws IOException If an I/O error occurs while flushing
      */
-    public void flush() throws IOException;
+    void flush() throws IOException;
 }

==================================================
OutputFilter.java
index a5a6d042f5..cc76bed06f 100644
--- a/java/org/apache/coyote/http11/InputFilter.java
+++ b/java/org/apache/coyote/http11/InputFilter.java
@@ -34,13 +34,13 @@ public interface InputFilter extends InputBuffer {
      *
      * @param request The request to be associated with this filter
      */
-    public void setRequest(Request request);
+    void setRequest(Request request);
 
 
     /**
      * Make the filter ready to process the next request.
      */
-    public void recycle();
+    void recycle();
 
 
     /**
@@ -50,7 +50,7 @@ public interface InputFilter extends InputBuffer {
      *         the value read from the HTTP headers which will also be a
      *         ByteChunk
      */
-    public ByteChunk getEncodingName();
+    ByteChunk getEncodingName();
 
 
     /**
@@ -58,7 +58,7 @@ public interface InputFilter extends InputBuffer {
      *
      * @param buffer The next buffer
      */
-    public void setBuffer(InputBuffer buffer);
+    void setBuffer(InputBuffer buffer);
 
 
     /**
@@ -71,7 +71,7 @@ public interface InputFilter extends InputBuffer {
      *
      * @throws IOException If an error happens
      */
-    public long end() throws IOException;
+    long end() throws IOException;
 
 
     /**
@@ -80,5 +80,5 @@ public interface InputFilter extends InputBuffer {
      * @return {@code true} if the request body has been fully read, otherwise
      *         {@code false}
      */
-    public boolean isFinished();
+    boolean isFinished();
 }

==================================================
UpgradeServletInputStream.java
index 97cdc0ac30..d2481554e0 100644
--- a/java/org/apache/coyote/http11/OutputFilter.java
+++ b/java/org/apache/coyote/http11/OutputFilter.java
@@ -32,13 +32,13 @@ public interface OutputFilter extends HttpOutputBuffer {
      *
      * @param response The response to associate with this OutputFilter
      */
-    public void setResponse(Response response);
+    void setResponse(Response response);
 
 
     /**
      * Make the filter ready to process the next request.
      */
-    public void recycle();
+    void recycle();
 
 
     /**
@@ -46,5 +46,5 @@ public interface OutputFilter extends HttpOutputBuffer {
      *
      * @param buffer The next buffer instance
      */
-    public void setBuffer(HttpOutputBuffer buffer);
+    void setBuffer(HttpOutputBuffer buffer);
 }

==================================================
UpgradeServletOutputStream.java
index 562ec5e3f4..5f9111568e 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeServletInputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeServletInputStream.java
@@ -240,7 +240,7 @@ public class UpgradeServletInputStream extends ServletInputStream {
     }
 
 
-    private final void onError(Throwable t) {
+    private void onError(Throwable t) {
         if (listener == null) {
             return;
         }

==================================================
FrameType.java
index 74ade3025d..c1c26607f3 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeServletOutputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeServletOutputStream.java
@@ -262,7 +262,7 @@ public class UpgradeServletOutputStream extends ServletOutputStream {
     }
 
 
-    private final void onError(Throwable t) {
+    private void onError(Throwable t) {
         if (listener == null) {
             return;
         }

==================================================
Http2AsyncUpgradeHandler.java
index dd80903bd9..da0614c453 100644
--- a/java/org/apache/coyote/http2/FrameType.java
+++ b/java/org/apache/coyote/http2/FrameType.java
@@ -45,7 +45,7 @@ enum FrameType {
     private final boolean payloadErrorFatal;
 
 
-    private FrameType(int id, boolean streamZero, boolean streamNonZero, IntPredicate payloadSizeValidator,
+    FrameType(int id, boolean streamZero, boolean streamNonZero, IntPredicate payloadSizeValidator,
             boolean payloadErrorFatal) {
         this.id = id;
         this.streamZero = streamZero;

==================================================
Http2Error.java
index 1deee89072..629924e02e 100644
--- a/java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java
@@ -517,7 +517,7 @@ public class Http2AsyncUpgradeHandler extends Http2UpgradeHandler {
 
         private final List<ByteBuffer> bufs = new ArrayList<>();
 
-        public AsyncHeaderFrameBuffers(int initialPayloadSize) {
+        AsyncHeaderFrameBuffers(int initialPayloadSize) {
             this.payloadSize = initialPayloadSize;
         }
 

==================================================
Http2Parser.java
index 4a47f22e79..0a0eae4d64 100644
--- a/java/org/apache/coyote/http2/Http2Error.java
+++ b/java/org/apache/coyote/http2/Http2Error.java
@@ -36,7 +36,7 @@ enum Http2Error {
 
     private final long code;
 
-    private Http2Error(long code) {
+    Http2Error(long code) {
         this.code = code;
     }
 

==================================================
Http2UpgradeHandler.java
index 8a2ac5f5d3..1eb0def3f6 100644
--- a/java/org/apache/coyote/http2/Http2Parser.java
+++ b/java/org/apache/coyote/http2/Http2Parser.java
@@ -712,7 +712,7 @@ class Http2Parser {
     /**
      * Interface that must be implemented by the source of data for the parser.
      */
-    static interface Input {
+    interface Input {
 
         /**
          * Fill the given array with data unless non-blocking is requested and no data is available. If any data is
@@ -748,7 +748,7 @@ class Http2Parser {
     /**
      * Interface that must be implemented to receive notifications from the parser as it processes incoming frames.
      */
-    static interface Output {
+    interface Output {
 
         HpackDecoder getHpackDecoder();
 

==================================================
Setting.java
index c65edcd049..cdd704f603 100644
--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java
@@ -1922,7 +1922,7 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
 
         private final boolean newStreamsAllowed;
 
-        private ConnectionState(boolean newStreamsAllowed) {
+        ConnectionState(boolean newStreamsAllowed) {
             this.newStreamsAllowed = newStreamsAllowed;
         }
 
@@ -1932,18 +1932,18 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
     }
 
 
-    protected static interface HeaderFrameBuffers {
-        public void startFrame();
+    protected interface HeaderFrameBuffers {
+        void startFrame();
 
-        public void endFrame() throws IOException;
+        void endFrame() throws IOException;
 
-        public void endHeaders() throws IOException;
+        void endHeaders() throws IOException;
 
-        public byte[] getHeader();
+        byte[] getHeader();
 
-        public ByteBuffer getPayload();
+        ByteBuffer getPayload();
 
-        public void expandPayload();
+        void expandPayload();
     }
 
 
@@ -1952,7 +1952,7 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
         private final byte[] header;
         private ByteBuffer payload;
 
-        public DefaultHeaderFrameBuffers(int initialPayloadSize) {
+        DefaultHeaderFrameBuffers(int initialPayloadSize) {
             header = new byte[9];
             payload = ByteBuffer.allocate(initialPayloadSize);
         }

==================================================
Stream.java
index 1ff490f48f..f0cd6c2533 100644
--- a/java/org/apache/coyote/http2/Setting.java
+++ b/java/org/apache/coyote/http2/Setting.java
@@ -28,7 +28,7 @@ enum Setting {
 
     private final int id;
 
-    private Setting(int id) {
+    Setting(int id) {
         this.id = id;
     }
 
@@ -41,7 +41,7 @@ enum Setting {
         return Integer.toString(id);
     }
 
-    static final Setting valueOf(int i) {
+    static Setting valueOf(int i) {
         switch (i) {
             case 1: {
                 return HEADER_TABLE_SIZE;

==================================================
StreamRunnable.java
index ae491f6339..4a82c4a239 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -942,7 +942,7 @@ class Stream extends AbstractNonZeroStream implements HeaderEmitter {
             return dataLeft;
         }
 
-        private final synchronized boolean flush(boolean writeInProgress, boolean block) throws IOException {
+        private synchronized boolean flush(boolean writeInProgress, boolean block) throws IOException {
             if (log.isDebugEnabled()) {
                 log.debug(sm.getString("stream.outputBuffer.flush.debug", getConnectionId(), getIdAsString(),
                         Integer.toString(buffer.position()), Boolean.toString(writeInProgress),
@@ -1255,7 +1255,7 @@ class Stream extends AbstractNonZeroStream implements HeaderEmitter {
         }
 
 
-        private final void ensureBuffersExist() {
+        private void ensureBuffersExist() {
             if (inBuffer == null && !closed) {
                 // The client must obey Tomcat's window size when sending so
                 // this is the initial window size set by Tomcat that the client

==================================================
StreamStateMachine.java
index 76fa70bd2d..51967d18d5 100644
--- a/java/org/apache/coyote/http2/StreamRunnable.java
+++ b/java/org/apache/coyote/http2/StreamRunnable.java
@@ -24,7 +24,7 @@ class StreamRunnable implements Runnable {
     private final SocketEvent event;
 
 
-    public StreamRunnable(StreamProcessor processor, SocketEvent event) {
+    StreamRunnable(StreamProcessor processor, SocketEvent event) {
         this.processor = processor;
         this.event = event;
     }

==================================================
ELArithmetic.java
index 389f4e5c6c..bafb24193a 100644
--- a/java/org/apache/coyote/http2/StreamStateMachine.java
+++ b/java/org/apache/coyote/http2/StreamStateMachine.java
@@ -219,7 +219,7 @@ class StreamStateMachine {
         private final Http2Error errorCodeForInvalidFrame;
         private final Set<FrameType> frameTypesPermitted;
 
-        private State(boolean canRead, boolean canWrite, boolean canReset, boolean connectionErrorForInvalidFrame,
+        State(boolean canRead, boolean canWrite, boolean canReset, boolean connectionErrorForInvalidFrame,
                 Http2Error errorCode, FrameType... frameTypes) {
             this.canRead = canRead;
             this.canWrite = canWrite;

==================================================
ELSupport.java
index 70538619c0..de7dacae1b 100644
--- a/java/org/apache/el/lang/ELArithmetic.java
+++ b/java/org/apache/el/lang/ELArithmetic.java
@@ -369,15 +369,15 @@ public abstract class ELArithmetic {
         super();
     }
 
-    protected abstract Number add(final Number num0, final Number num1);
+    protected abstract Number add(Number num0, Number num1);
 
-    protected abstract Number multiply(final Number num0, final Number num1);
+    protected abstract Number multiply(Number num0, Number num1);
 
-    protected abstract Number subtract(final Number num0, final Number num1);
+    protected abstract Number subtract(Number num0, Number num1);
 
-    protected abstract Number mod(final Number num0, final Number num1);
+    protected abstract Number mod(Number num0, Number num1);
 
-    protected abstract Number coerce(final Number num);
+    protected abstract Number coerce(Number num);
 
     protected final Number coerce(final Object obj) {
 
@@ -397,9 +397,9 @@ public abstract class ELArithmetic {
         throw new ELException(MessageFactory.get("error.convert", obj, obj.getClass(), "Number"));
     }
 
-    protected abstract Number coerce(final String str);
+    protected abstract Number coerce(String str);
 
-    protected abstract Number divide(final Number num0, final Number num1);
+    protected abstract Number divide(Number num0, Number num1);
 
-    protected abstract boolean matches(final Object obj0, final Object obj1);
+    protected abstract boolean matches(Object obj0, Object obj1);
 }

==================================================
ExpressionBuilder.java
index d5737db3c0..d663450a4a 100644
--- a/java/org/apache/el/lang/ELSupport.java
+++ b/java/org/apache/el/lang/ELSupport.java
@@ -256,7 +256,7 @@ public class ELSupport {
                 obj, obj.getClass(), Boolean.class));
     }
 
-    private static final Character coerceToCharacter(final ELContext ctx, final Object obj)
+    private static Character coerceToCharacter(final ELContext ctx, final Object obj)
             throws ELException {
 
         if (ctx != null) {

==================================================
AstIdentifier.java
index 2b7ab404d9..2859f42872 100644
--- a/java/org/apache/el/lang/ExpressionBuilder.java
+++ b/java/org/apache/el/lang/ExpressionBuilder.java
@@ -82,12 +82,12 @@ public final class ExpressionBuilder implements NodeVisitor {
         }
     }
 
-    public static final Node createNode(String expr) throws ELException {
+    public static Node createNode(String expr) throws ELException {
         Node n = createNodeInternal(expr);
         return n;
     }
 
-    private static final Node createNodeInternal(String expr)
+    private static Node createNodeInternal(String expr)
             throws ELException {
         if (expr == null) {
             throw new ELException(MessageFactory.get("error.null"));
@@ -272,11 +272,11 @@ public final class ExpressionBuilder implements NodeVisitor {
         private Object[] stack;
 
 
-        public SynchronizedStack() {
+        SynchronizedStack() {
             this(DEFAULT_SIZE, DEFAULT_LIMIT);
         }
 
-        public SynchronizedStack(int size, int limit) {
+        SynchronizedStack(int size, int limit) {
             this.size = size;
             this.limit = limit;
             stack = new Object[size];

==================================================
AstValue.java
index 237604c401..4565536faf 100644
--- a/java/org/apache/el/parser/AstIdentifier.java
+++ b/java/org/apache/el/parser/AstIdentifier.java
@@ -204,7 +204,7 @@ public final class AstIdentifier extends SimpleNode {
     }
 
 
-    private final MethodExpression getMethodExpression(EvaluationContext ctx)
+    private MethodExpression getMethodExpression(EvaluationContext ctx)
             throws ELException {
         Object obj = null;
 

==================================================
ELParserTreeConstants.java
index 06a952e2a0..2bd5205fdf 100644
--- a/java/org/apache/el/parser/AstValue.java
+++ b/java/org/apache/el/parser/AstValue.java
@@ -65,7 +65,7 @@ public final class AstValue extends SimpleNode {
         return result;
     }
 
-    private final Target getTarget(EvaluationContext ctx) throws ELException {
+    private Target getTarget(EvaluationContext ctx) throws ELException {
         // evaluate expr-a to value-a
         Object base = this.children[0].getValue(ctx);
 

==================================================
Node.java
index 353ccffa32..c442896b74 100644
--- a/java/org/apache/el/parser/ELParserTreeConstants.java
+++ b/java/org/apache/el/parser/ELParserTreeConstants.java
@@ -3,52 +3,52 @@ package org.apache.el.parser;
 
 public interface ELParserTreeConstants
 {
-  public int JJTCOMPOSITEEXPRESSION = 0;
-  public int JJTLITERALEXPRESSION = 1;
-  public int JJTDEFERREDEXPRESSION = 2;
-  public int JJTDYNAMICEXPRESSION = 3;
-  public int JJTVOID = 4;
-  public int JJTSEMICOLON = 5;
-  public int JJTASSIGN = 6;
-  public int JJTLAMBDAEXPRESSION = 7;
-  public int JJTLAMBDAPARAMETERS = 8;
-  public int JJTCHOICE = 9;
-  public int JJTOR = 10;
-  public int JJTAND = 11;
-  public int JJTEQUAL = 12;
-  public int JJTNOTEQUAL = 13;
-  public int JJTLESSTHAN = 14;
-  public int JJTGREATERTHAN = 15;
-  public int JJTLESSTHANEQUAL = 16;
-  public int JJTGREATERTHANEQUAL = 17;
-  public int JJTCONCATENATION = 18;
-  public int JJTPLUS = 19;
-  public int JJTMINUS = 20;
-  public int JJTMULT = 21;
-  public int JJTDIV = 22;
-  public int JJTMOD = 23;
-  public int JJTNEGATIVE = 24;
-  public int JJTNOT = 25;
-  public int JJTEMPTY = 26;
-  public int JJTVALUE = 27;
-  public int JJTDOTSUFFIX = 28;
-  public int JJTBRACKETSUFFIX = 29;
-  public int JJTMETHODPARAMETERS = 30;
-  public int JJTSETDATA = 31;
-  public int JJTLISTDATA = 32;
-  public int JJTMAPDATA = 33;
-  public int JJTMAPENTRY = 34;
-  public int JJTIDENTIFIER = 35;
-  public int JJTFUNCTION = 36;
-  public int JJTTRUE = 37;
-  public int JJTFALSE = 38;
-  public int JJTFLOATINGPOINT = 39;
-  public int JJTINTEGER = 40;
-  public int JJTSTRING = 41;
-  public int JJTNULL = 42;
+  int JJTCOMPOSITEEXPRESSION = 0;
+  int JJTLITERALEXPRESSION = 1;
+  int JJTDEFERREDEXPRESSION = 2;
+  int JJTDYNAMICEXPRESSION = 3;
+  int JJTVOID = 4;
+  int JJTSEMICOLON = 5;
+  int JJTASSIGN = 6;
+  int JJTLAMBDAEXPRESSION = 7;
+  int JJTLAMBDAPARAMETERS = 8;
+  int JJTCHOICE = 9;
+  int JJTOR = 10;
+  int JJTAND = 11;
+  int JJTEQUAL = 12;
+  int JJTNOTEQUAL = 13;
+  int JJTLESSTHAN = 14;
+  int JJTGREATERTHAN = 15;
+  int JJTLESSTHANEQUAL = 16;
+  int JJTGREATERTHANEQUAL = 17;
+  int JJTCONCATENATION = 18;
+  int JJTPLUS = 19;
+  int JJTMINUS = 20;
+  int JJTMULT = 21;
+  int JJTDIV = 22;
+  int JJTMOD = 23;
+  int JJTNEGATIVE = 24;
+  int JJTNOT = 25;
+  int JJTEMPTY = 26;
+  int JJTVALUE = 27;
+  int JJTDOTSUFFIX = 28;
+  int JJTBRACKETSUFFIX = 29;
+  int JJTMETHODPARAMETERS = 30;
+  int JJTSETDATA = 31;
+  int JJTLISTDATA = 32;
+  int JJTMAPDATA = 33;
+  int JJTMAPENTRY = 34;
+  int JJTIDENTIFIER = 35;
+  int JJTFUNCTION = 36;
+  int JJTTRUE = 37;
+  int JJTFALSE = 38;
+  int JJTFLOATINGPOINT = 39;
+  int JJTINTEGER = 40;
+  int JJTSTRING = 41;
+  int JJTNULL = 42;
 
 
-  public String[] jjtNodeName = {
+  String[] jjtNodeName = {
     "CompositeExpression",
     "LiteralExpression",
     "DeferredExpression",

==================================================
NodeVisitor.java
index ec7e86a815..d7c559bffb 100644
--- a/java/org/apache/el/parser/Node.java
+++ b/java/org/apache/el/parser/Node.java
@@ -38,52 +38,52 @@ public interface Node {
 
   /** This method is called after the node has been made the current
     node.  It indicates that child nodes can now be added to it. */
-  public void jjtOpen();
+  void jjtOpen();
 
   /** This method is called after all the child nodes have been
     added. */
-  public void jjtClose();
+  void jjtClose();
 
   /** This pair of methods are used to inform the node of its
     parent. */
-  public void jjtSetParent(Node n);
-  public Node jjtGetParent();
+  void jjtSetParent(Node n);
+  Node jjtGetParent();
 
   /** This method tells the node to add its argument to the node's
     list of children.  */
-  public void jjtAddChild(Node n, int i);
+  void jjtAddChild(Node n, int i);
 
   /** This method returns a child node.  The children are numbered
      from zero, left to right. */
-  public Node jjtGetChild(int i);
+  Node jjtGetChild(int i);
 
   /** Return the number of children the node has. */
-  public int jjtGetNumChildren();
+  int jjtGetNumChildren();
 
-  public String getImage();
+  String getImage();
 
-  public Object getValue(EvaluationContext ctx) throws ELException;
-  public void setValue(EvaluationContext ctx, Object value) throws ELException;
-  public Class<?> getType(EvaluationContext ctx) throws ELException;
-  public boolean isReadOnly(EvaluationContext ctx) throws ELException;
-  public void accept(NodeVisitor visitor) throws Exception;
-  public MethodInfo getMethodInfo(EvaluationContext ctx, Class<?>[] paramTypes)
+  Object getValue(EvaluationContext ctx) throws ELException;
+  void setValue(EvaluationContext ctx, Object value) throws ELException;
+  Class<?> getType(EvaluationContext ctx) throws ELException;
+  boolean isReadOnly(EvaluationContext ctx) throws ELException;
+  void accept(NodeVisitor visitor) throws Exception;
+  MethodInfo getMethodInfo(EvaluationContext ctx, Class<?>[] paramTypes)
           throws ELException;
-  public Object invoke(EvaluationContext ctx, Class<?>[] paramTypes,
+  Object invoke(EvaluationContext ctx, Class<?>[] paramTypes,
           Object[] paramValues) throws ELException;
 
   /**
    * @since EL 2.2
    */
-  public ValueReference getValueReference(EvaluationContext ctx);
+  ValueReference getValueReference(EvaluationContext ctx);
 
   /**
    * @since EL 2.2
    */
-  public boolean isParametersProvided();
+  boolean isParametersProvided();
 
   /**
    * @since EL 5.0
    */
-  public MethodReference getMethodReference(EvaluationContext ctx);
+  MethodReference getMethodReference(EvaluationContext ctx);
 }

==================================================
Stream.java
index 25d920c83a..52504ea5dc 100644
--- a/java/org/apache/el/parser/NodeVisitor.java
+++ b/java/org/apache/el/parser/NodeVisitor.java
@@ -20,5 +20,5 @@ package org.apache.el.parser;
  * @author Jacob Hookom [jacob@hookom.net]
  */
 public interface NodeVisitor {
-    public void visit(Node node) throws Exception;
+    void visit(Node node) throws Exception;
 }

==================================================
StreamELResolverImpl.java
index c2ac84a22e..4f9241e488 100644
--- a/java/org/apache/el/stream/Stream.java
+++ b/java/org/apache/el/stream/Stream.java
@@ -139,7 +139,7 @@ public class Stream {
             }
 
             @SuppressWarnings({ "rawtypes", "unchecked" })
-            private final void sort() {
+            private void sort() {
                 List list = new ArrayList<>();
                 while (iterator.hasNext()) {
                     list.add(iterator.next());
@@ -169,7 +169,7 @@ public class Stream {
             }
 
             @SuppressWarnings({ "rawtypes", "unchecked" })
-            private final void sort(LambdaExpression le) {
+            private void sort(LambdaExpression le) {
                 List list = new ArrayList<>();
                 Comparator<Object> c = new LambdaExpressionComparator(le);
                 while (iterator.hasNext()) {
@@ -472,7 +472,7 @@ public class Stream {
 
         private final LambdaExpression le;
 
-        public LambdaExpressionComparator(LambdaExpression le) {
+        LambdaExpressionComparator(LambdaExpression le) {
             this.le = le;
         }
 

==================================================
ReflectionUtil.java
index 1d228ea0ab..dd26066372 100644
--- a/java/org/apache/el/stream/StreamELResolverImpl.java
+++ b/java/org/apache/el/stream/StreamELResolverImpl.java
@@ -79,7 +79,7 @@ public class StreamELResolverImpl extends ELResolver {
         private final int size;
         private int index = 0;
 
-        public ArrayIterator(Object base) {
+        ArrayIterator(Object base) {
             this.base = base;
             size = Array.getLength(base);
         }

==================================================
Options.java
index 381937b01d..57e651646e 100644
--- a/java/org/apache/el/util/ReflectionUtil.java
+++ b/java/org/apache/el/util/ReflectionUtil.java
@@ -461,7 +461,7 @@ public class ReflectionUtil {
     }
 
 
-    private static final String paramString(Class<?>[] types) {
+    private static String paramString(Class<?>[] types) {
         if (types != null) {
             StringBuilder sb = new StringBuilder();
             for (Class<?> type : types) {
@@ -493,7 +493,7 @@ public class ReflectionUtil {
         private final int varArgsCount;
         private final boolean bridge;
 
-        public MatchResult(boolean varArgs, int exactCount, int assignableCount, int coercibleCount, int varArgsCount,
+        MatchResult(boolean varArgs, int exactCount, int assignableCount, int coercibleCount, int varArgsCount,
                 boolean bridge) {
             this.varArgs = varArgs;
             this.exactCount = exactCount;

==================================================
ELInterpreter.java
index d47c7089e1..6bccdeb7ba 100644
--- a/java/org/apache/jasper/Options.java
+++ b/java/org/apache/jasper/Options.java
@@ -40,34 +40,34 @@ public interface Options {
      * is invalid.
      * @return <code>true</code> to get an error
      */
-    public boolean getErrorOnUseBeanInvalidClassAttribute();
+    boolean getErrorOnUseBeanInvalidClassAttribute();
 
     /**
      * @return <code>true</code> to keep the generated source
      */
-    public boolean getKeepGenerated();
+    boolean getKeepGenerated();
 
     /**
      * @return <code>true</code> if tag handler pooling is enabled,
      *  <code>false</code> otherwise.
      */
-    public boolean isPoolingEnabled();
+    boolean isPoolingEnabled();
 
     /**
      * @return <code>true</code> if HTML mapped Servlets are supported.
      */
-    public boolean getMappedFile();
+    boolean getMappedFile();
 
     /**
      * @return <code>true</code> if debug information in included
      *  in compiled classes.
      */
-    public boolean getClassDebugInfo();
+    boolean getClassDebugInfo();
 
     /**
      * @return background compile thread check interval in seconds
      */
-    public int getCheckInterval();
+    int getCheckInterval();
 
     /**
      * Main development flag, which enables detailed error reports with
@@ -76,26 +76,26 @@ public interface Options {
      *  in production.
      * @return <code>true</code> if Jasper is in development mode
      */
-    public boolean getDevelopment();
+    boolean getDevelopment();
 
     /**
      * @return <code>true</code> to include a source fragment in exception
      *  messages.
      */
-    public boolean getDisplaySourceFragment();
+    boolean getDisplaySourceFragment();
 
     /**
      * @return <code>true</code> to suppress generation of SMAP info for
      *  JSR45 debugging.
      */
-    public boolean isSmapSuppressed();
+    boolean isSmapSuppressed();
 
     /**
      * This setting is ignored if suppressSmap() is <code>true</code>.
      * @return <code>true</code> to write SMAP info for JSR45 debugging to a
      * file.
      */
-    public boolean isSmapDumped();
+    boolean isSmapDumped();
 
     /**
      * @return {@link TrimSpacesOption#TRUE} to remove template text that
@@ -107,17 +107,17 @@ public interface Options {
      *         replace any sequence of whitespace and new lines within template
      *         text with a single new line.
      */
-    public TrimSpacesOption getTrimSpaces();
+    TrimSpacesOption getTrimSpaces();
 
     /**
      * @return the work folder
      */
-    public File getScratchDir();
+    File getScratchDir();
 
     /**
      * @return the classpath used to compile generated Servlets
      */
-    public String getClassPath();
+    String getClassPath();
 
     /**
      * Compiler to use.
@@ -130,22 +130,22 @@ public interface Options {
      * Apache Ant documentation for the possible values.
      * @return the compiler name
      */
-    public String getCompiler();
+    String getCompiler();
 
     /**
      * @return the compiler target VM, e.g. 1.8.
      */
-    public String getCompilerTargetVM();
+    String getCompilerTargetVM();
 
     /**
      * @return the compiler source VM, e.g. 1.8.
      */
-    public String getCompilerSourceVM();
+    String getCompilerSourceVM();
 
     /**
      * @return Jasper Java compiler class to use.
      */
-    public String getCompilerClassName();
+    String getCompilerClassName();
 
     /**
      * The cache that maps URIs, resource paths and parsed TLD files for the
@@ -157,12 +157,12 @@ public interface Options {
      * @return the instance of the TldLocationsCache
      *  for the web-application.
      */
-    public TldCache getTldCache();
+    TldCache getTldCache();
 
     /**
      * @return Java platform encoding to generate the JSP page servlet.
      */
-    public String getJavaEncoding();
+    String getJavaEncoding();
 
     /**
      * The boolean flag to tell Ant whether to fork JSP page compilations.
@@ -172,22 +172,22 @@ public interface Options {
      * a <code>javac</code> Apache Ant task).
      * @return <code>true</code> to fork a process during compilation
      */
-    public boolean getFork();
+    boolean getFork();
 
     /**
      * @return JSP configuration information specified in web.xml.
      */
-    public JspConfig getJspConfig();
+    JspConfig getJspConfig();
 
     /**
      * @return <code>true</code> to generate a X-Powered-By response header.
      */
-    public boolean isXpoweredBy();
+    boolean isXpoweredBy();
 
     /**
      * @return a Tag Plugin Manager
      */
-    public TagPluginManager getTagPluginManager();
+    TagPluginManager getTagPluginManager();
 
     /**
      * Indicates whether text strings are to be generated as char arrays.
@@ -195,24 +195,24 @@ public interface Options {
      * @return <code>true</code> if text strings are to be generated as char
      *         arrays, <code>false</code> otherwise
      */
-    public boolean genStringAsCharArray();
+    boolean genStringAsCharArray();
 
     /**
      * @return modification test interval.
      */
-    public int getModificationTestInterval();
+    int getModificationTestInterval();
 
 
     /**
      * @return <code>true</code> if re-compile will occur on a failure.
      */
-    public boolean getRecompileOnFail();
+    boolean getRecompileOnFail();
 
     /**
      * @return <code>true</code> is caching is enabled
      *  (used for precompilation).
      */
-    public boolean isCaching();
+    boolean isCaching();
 
     /**
      * The web-application wide cache for the TagLibraryInfo tag library
@@ -225,7 +225,7 @@ public interface Options {
      *
      * @return the Map(String uri, TagLibraryInfo tld) instance.
      */
-    public Map<String, TagLibraryInfo> getCache();
+    Map<String, TagLibraryInfo> getCache();
 
     /**
      * The maximum number of loaded jsps per web-application. If there are more
@@ -233,31 +233,31 @@ public interface Options {
      * are unloaded.
      * @return The JSP count
      */
-    public int getMaxLoadedJsps();
+    int getMaxLoadedJsps();
 
     /**
      * @return the idle time in seconds after which a JSP is unloaded.
      * If unset or less or equal than 0, no jsps are unloaded.
      */
-    public int getJspIdleTimeout();
+    int getJspIdleTimeout();
 
     /**
      * @return {@code true} if the quote escaping required by section JSP.1.6 of
      *         the JSP specification should be applied to scriplet expression.
      */
-    public boolean getStrictQuoteEscaping();
+    boolean getStrictQuoteEscaping();
 
     /**
      * @return {@code true} if EL expressions used within attributes should have
      *         the quoting rules in JSP.1.6 applied to the expression.
      */
-    public boolean getQuoteAttributeEL();
+    boolean getQuoteAttributeEL();
 
     /**
      * @return the name of the variable that will be used in the generated
      * JSP code for the expression factory
      */
-    public default String getVariableForExpressionFactory() {
+    default String getVariableForExpressionFactory() {
         return "_el_expressionfactory";
     }
 
@@ -265,7 +265,7 @@ public interface Options {
      * @return the name of the variable that will be used in the generated
      * JSP code for the instance manager
      */
-    public default String getVariableForInstanceManager() {
+    default String getVariableForInstanceManager() {
         return "_jsp_instancemanager";
     }
 
@@ -273,7 +273,7 @@ public interface Options {
      * @return {@code true} if tag pooling is disabled with page that uses
      * extends.
      */
-    public default boolean getPoolTagsWithExtends() {
+    default boolean getPoolTagsWithExtends() {
         return false;
     }
 
@@ -282,7 +282,7 @@ public interface Options {
      * used in jsp:getProperty action to be previously "introduced"
      * to the JSP processor (see JSP.5.3) is enforced.
      */
-    public default boolean getStrictGetProperty() {
+    default boolean getStrictGetProperty() {
         return true;
     }
 
@@ -290,14 +290,14 @@ public interface Options {
      * @return {@code true} if the strict white space rules are
      * applied.
      */
-    public default boolean getStrictWhitespace() {
+    default boolean getStrictWhitespace() {
         return true;
     }
 
     /**
      * @return the default base class for generated JSP Servlets
      */
-    public default String getJspServletBase() {
+    default String getJspServletBase() {
         return "org.apache.jasper.runtime.HttpJspBase";
     }
 
@@ -307,7 +307,7 @@ public interface Options {
      * from JSPs go.
      * @return the method name
      */
-    public default String getServiceMethodName() {
+    default String getServiceMethodName() {
         return "_jspService";
     }
 
@@ -316,7 +316,7 @@ public interface Options {
      * Other servlet engines may choose to support this attribute if they
      * want to have this JSP engine running on them.
      */
-    public default String getServletClasspathAttribute() {
+    default String getServletClasspathAttribute() {
         return "org.apache.catalina.jsp_classpath";
     }
 
@@ -324,28 +324,28 @@ public interface Options {
      * @return The query parameter that causes the JSP engine to just
      * pregenerated the servlet but not invoke it.
      */
-    public default String getJspPrecompilationQueryParameter() {
+    default String getJspPrecompilationQueryParameter() {
         return "jsp_precompile";
     }
 
     /**
      * @return The default package name for compiled jsp pages.
      */
-    public default String getGeneratedJspPackageName() {
+    default String getGeneratedJspPackageName() {
         return "org.apache.jsp";
     }
 
     /**
      * @return The default package name for tag handlers generated from tag files.
      */
-    public default String getGeneratedTagFilePackageName() {
+    default String getGeneratedTagFilePackageName() {
         return "org.apache.jsp.tag";
     }
 
     /**
      * @return Prefix to use for generated temporary variable names
      */
-    public default String getTempVariableNamePrefix() {
+    default String getTempVariableNamePrefix() {
         return "_jspx_temp";
     }
 
@@ -353,7 +353,7 @@ public interface Options {
      * @return {@code true} if the container instance manager will be used
      * to create the bean instances
      */
-    public default boolean getUseInstanceManagerForTags() {
+    default boolean getUseInstanceManagerForTags() {
         return false;
     }
 
@@ -365,7 +365,7 @@ public interface Options {
      *
      * @return {@code true} to include the timestamp, otherwise don't include it
      */
-    public default boolean getGeneratedJavaAddTimestamp() {
+    default boolean getGeneratedJavaAddTimestamp() {
         return true;
     }
 }

==================================================
ELNode.java
index 0bff249ba1..73b0ffb595 100644
--- a/java/org/apache/jasper/compiler/ELInterpreter.java
+++ b/java/org/apache/jasper/compiler/ELInterpreter.java
@@ -40,7 +40,7 @@ public interface ELInterpreter {
      * @param fnmapvar Variable pointing to a function map.
      * @return a String representing a call to the EL interpreter.
      */
-    public String interpreterCall(JspCompilationContext context,
+    String interpreterCall(JspCompilationContext context,
             boolean isTagFile, String expression,
             Class<?> expectedType, String fnmapvar);
 }

==================================================
EncodingDetector.java
index b0234d6e94..0c99ce3bd5 100644
--- a/java/org/apache/jasper/compiler/ELNode.java
+++ b/java/org/apache/jasper/compiler/ELNode.java
@@ -190,7 +190,7 @@ abstract class ELNode {
         private String mapName = null;    // The function map associated this EL
         private final List<ELNode> list;
 
-        public Nodes() {
+        Nodes() {
             list = new ArrayList<>();
         }
 

==================================================
ErrorDispatcher.java
index 98d94da45b..bac9ade2ee 100644
--- a/java/org/apache/jasper/compiler/EncodingDetector.java
+++ b/java/org/apache/jasper/compiler/EncodingDetector.java
@@ -202,7 +202,7 @@ class EncodingDetector {
         public final String encoding;
         public final int skip;
 
-        public BomResult(String encoding,  int skip) {
+        BomResult(String encoding,  int skip) {
             this.encoding = encoding;
             this.skip = skip;
         }

==================================================
ErrorHandler.java
index 912b4a2e70..3b144498c9 100644
--- a/java/org/apache/jasper/compiler/ErrorDispatcher.java
+++ b/java/org/apache/jasper/compiler/ErrorDispatcher.java
@@ -481,7 +481,7 @@ public class ErrorDispatcher {
          *
          * @param lineNum Source line number in the generated servlet code
          */
-        public ErrorVisitor(int lineNum) {
+        ErrorVisitor(int lineNum) {
             this.lineNum = lineNum;
         }
 

==================================================
Generator.java
index b5e06a1453..8c8740e097 100644
--- a/java/org/apache/jasper/compiler/ErrorHandler.java
+++ b/java/org/apache/jasper/compiler/ErrorHandler.java
@@ -41,7 +41,7 @@ public interface ErrorHandler {
      * @param exception Parse exception
      * @throws JasperException An error occurred
      */
-    public void jspError(String fname, int line, int column, String msg,
+    void jspError(String fname, int line, int column, String msg,
             Exception exception) throws JasperException;
 
     /**
@@ -51,7 +51,7 @@ public interface ErrorHandler {
      * @param exception Parse exception
      * @throws JasperException An error occurred
      */
-    public void jspError(String msg, Exception exception)
+    void jspError(String msg, Exception exception)
             throws JasperException;
 
     /**
@@ -61,7 +61,7 @@ public interface ErrorHandler {
      * compilation errors
      * @throws JasperException An error occurred
      */
-    public void javacError(JavacErrorDetail[] details)
+    void javacError(JavacErrorDetail[] details)
             throws JasperException;
 
     /**
@@ -71,6 +71,6 @@ public interface ErrorHandler {
      * @param exception Compilation exception
      * @throws JasperException An error occurred
      */
-    public void javacError(String errorReport, Exception exception)
+    void javacError(String errorReport, Exception exception)
             throws JasperException;
 }

==================================================
ImplicitTagLibraryInfo.java
index 90d8e355e0..2ba69837e7 100644
--- a/java/org/apache/jasper/compiler/Generator.java
+++ b/java/org/apache/jasper/compiler/Generator.java
@@ -932,7 +932,7 @@ class Generator {
 
         private final boolean useInstanceManagerForTags;
 
-        public GenerateVisitor(boolean isTagFile, ServletWriter out,
+        GenerateVisitor(boolean isTagFile, ServletWriter out,
                 ArrayList<GenBuffer> methodsBuffered,
                 FragmentHelperClass fragmentHelperClass,
                 boolean useInstanceManagerForTags) {
@@ -3952,7 +3952,7 @@ class Generator {
 
             private int id;
 
-            public Fragment(int id, Node node) {
+            Fragment(int id, Node node) {
                 this.id = id;
                 genBuffer = new GenBuffer(null, node.getBody());
             }
@@ -3976,7 +3976,7 @@ class Generator {
         // Buffer for entire helper class
         private GenBuffer classBuffer = new GenBuffer();
 
-        public FragmentHelperClass(String className) {
+        FragmentHelperClass(String className) {
             this.className = className;
         }
 

==================================================
JasperTagInfo.java
index d934407b71..9d70eee31a 100644
--- a/java/org/apache/jasper/compiler/ImplicitTagLibraryInfo.java
+++ b/java/org/apache/jasper/compiler/ImplicitTagLibraryInfo.java
@@ -66,7 +66,7 @@ class ImplicitTagLibraryInfo extends TagLibraryInfo {
     private final List<TagFileInfo> list;
 
 
-    public ImplicitTagLibraryInfo(JspCompilationContext ctxt,
+    ImplicitTagLibraryInfo(JspCompilationContext ctxt,
             ParserController pc,
             PageInfo pi,
             String prefix,

==================================================
JspDocumentParser.java
index cf9052d062..9d11b6180f 100644
--- a/java/org/apache/jasper/compiler/JasperTagInfo.java
+++ b/java/org/apache/jasper/compiler/JasperTagInfo.java
@@ -32,7 +32,7 @@ class JasperTagInfo extends TagInfo {
 
     private final String dynamicAttrsMapName;
 
-    public JasperTagInfo(String tagName,
+    JasperTagInfo(String tagName,
             String tagClassName,
             String bodyContent,
             String infoString,

==================================================
JspReader.java
index 9a155e7e7e..f7cecf24c1 100644
--- a/java/org/apache/jasper/compiler/JspDocumentParser.java
+++ b/java/org/apache/jasper/compiler/JspDocumentParser.java
@@ -111,7 +111,7 @@ class JspDocumentParser
     /*
      * Constructor
      */
-    public JspDocumentParser(
+    JspDocumentParser(
         ParserController pc,
         String path,
         boolean isTagFile,

==================================================
JspUtil.java
index 94ff0675af..20efad478a 100644
--- a/java/org/apache/jasper/compiler/JspReader.java
+++ b/java/org/apache/jasper/compiler/JspReader.java
@@ -78,7 +78,7 @@ class JspReader {
      * @throws FileNotFoundException If the JSP file is not found (or is unreadable)
      * @throws IOException If an IO-level error occurs, e.g. reading the file
      */
-    public JspReader(JspCompilationContext ctxt,
+    JspReader(JspCompilationContext ctxt,
                      String fname,
                      String encoding,
                      Jar jar,
@@ -100,7 +100,7 @@ class JspReader {
      *
      * @throws JasperException If an error occurs parsing the JSP file
      */
-    public JspReader(JspCompilationContext ctxt,
+    JspReader(JspCompilationContext ctxt,
                      String fname,
                      InputStreamReader reader,
                      ErrorDispatcher err)

==================================================
Node.java
index 6a63a54a16..113e2f682c 100644
--- a/java/org/apache/jasper/compiler/JspUtil.java
+++ b/java/org/apache/jasper/compiler/JspUtil.java
@@ -775,7 +775,7 @@ public class JspUtil {
      *
      * @return Legal Java identifier corresponding to the given identifier
      */
-    private static final String makeJavaIdentifier(String identifier,
+    private static String makeJavaIdentifier(String identifier,
             boolean periodToUnderscore) {
         StringBuilder modifiedIdentifier = new StringBuilder(identifier.length());
         if (!Character.isJavaIdentifierStart(identifier.charAt(0))) {

==================================================
PageDataImpl.java
index 95f43f5fe4..0de36d57f6 100644
--- a/java/org/apache/jasper/compiler/Node.java
+++ b/java/org/apache/jasper/compiler/Node.java
@@ -93,7 +93,7 @@ abstract class Node implements TagConstants {
     /**
      * Zero-arg Constructor.
      */
-    public Node() {
+    Node() {
     }
 
     /**
@@ -104,7 +104,7 @@ abstract class Node implements TagConstants {
      * @param parent
      *            The enclosing node
      */
-    public Node(Mark start, Node parent) {
+    Node(Mark start, Node parent) {
         this.startMark = start;
         addToParent(parent);
     }
@@ -123,7 +123,7 @@ abstract class Node implements TagConstants {
      * @param parent
      *            The enclosing node
      */
-    public Node(String qName, String localName, Attributes attrs, Mark start,
+    Node(String qName, String localName, Attributes attrs, Mark start,
             Node parent) {
         this.qName = qName;
         this.localName = localName;
@@ -151,7 +151,7 @@ abstract class Node implements TagConstants {
      * @param parent
      *            The enclosing node
      */
-    public Node(String qName, String localName, Attributes attrs,
+    Node(String qName, String localName, Attributes attrs,
             Attributes nonTaglibXmlnsAttrs, Attributes taglibAttrs, Mark start,
             Node parent) {
         this.qName = qName;
@@ -170,7 +170,7 @@ abstract class Node implements TagConstants {
      * local name @param text The text associated with this node @param start
      * The location of the jsp page @param parent The enclosing node
      */
-    public Node(String qName, String localName, String text, Mark start,
+    Node(String qName, String localName, String text, Mark start,
             Node parent) {
         this.qName = qName;
         this.localName = localName;
@@ -541,7 +541,7 @@ abstract class Node implements TagConstants {
      */
     public static class JspRoot extends Node {
 
-        public JspRoot(String qName, Attributes attrs,
+        JspRoot(String qName, Attributes attrs,
                 Attributes nonTaglibXmlnsAttrs, Attributes taglibAttrs,
                 Mark start, Node parent) {
             super(qName, ROOT_ACTION, attrs, nonTaglibXmlnsAttrs, taglibAttrs,
@@ -561,11 +561,11 @@ abstract class Node implements TagConstants {
 
         private final List<String> imports;
 
-        public PageDirective(Attributes attrs, Mark start, Node parent) {
+        PageDirective(Attributes attrs, Mark start, Node parent) {
             this(JSP_PAGE_DIRECTIVE_ACTION, attrs, null, null, start, parent);
         }
 
-        public PageDirective(String qName, Attributes attrs,
+        PageDirective(String qName, Attributes attrs,
                 Attributes nonTaglibXmlnsAttrs, Attributes taglibAttrs,
                 Mark start, Node parent) {
             super(qName, PAGE_DIRECTIVE_ACTION, attrs, nonTaglibXmlnsAttrs,
@@ -626,11 +626,11 @@ abstract class Node implements TagConstants {
      */
     public static class IncludeDirective extends Node {
 
-        public IncludeDirective(Attributes attrs, Mark start, Node parent) {
+        IncludeDirective(Attributes attrs, Mark start, Node parent) {
             this(JSP_INCLUDE_DIRECTIVE_ACTION, attrs, null, null, start, parent);
         }
 
-        public IncludeDirective(String qName, Attributes attrs,
+        IncludeDirective(String qName, Attributes attrs,
                 Attributes nonTaglibXmlnsAttrs, Attributes taglibAttrs,
                 Mark start, Node parent) {
             super(qName, INCLUDE_DIRECTIVE_ACTION, attrs, nonTaglibXmlnsAttrs,
@@ -648,7 +648,7 @@ abstract class Node implements TagConstants {
      */
     public static class TaglibDirective extends Node {
 
-        public TaglibDirective(Attributes attrs, Mark start, Node parent) {
+        TaglibDirective(Attributes attrs, Mark start, Node parent) {
             super(JSP_TAGLIB_DIRECTIVE_ACTION, TAGLIB_DIRECTIVE_ACTION, attrs,
                     start, parent);
         }
@@ -665,11 +665,11 @@ abstract class Node implements TagConstants {
     public static class TagDirective extends Node {
         private final List<String> imports;
 
-        public TagDirective(Attributes attrs, Mark start, Node parent) {
+        TagDirective(Attributes attrs, Mark start, Node parent) {
             this(JSP_TAG_DIRECTIVE_ACTION, attrs, null, null, start, parent);
         }
 
-        public TagDirective(String qName, Attributes attrs,
+        TagDirective(String qName, Attributes attrs,
                 Attributes nonTaglibXmlnsAttrs, Attributes taglibAttrs,
                 Mark start, Node parent) {
             super(qName, TAG_DIRECTIVE_ACTION, attrs, nonTaglibXmlnsAttrs,
@@ -715,12 +715,12 @@ abstract class Node implements TagConstants {
      */
     public static class AttributeDirective extends Node {
 
-        public AttributeDirective(Attributes attrs, Mark start, Node parent) {
+        AttributeDirective(Attributes attrs, Mark start, Node parent) {
             this(JSP_ATTRIBUTE_DIRECTIVE_ACTION, attrs, null, null, start,
                     parent);
         }
 
-        public AttributeDirective(String qName, Attributes attrs,
+        AttributeDirective(String qName, Attributes attrs,
                 Attributes nonTaglibXmlnsAttrs, Attributes taglibAttrs,
                 Mark start, Node parent) {
             super(qName, ATTRIBUTE_DIRECTIVE_ACTION, attrs,
@@ -738,12 +738,12 @@ abstract class Node implements TagConstants {
      */
     public static class VariableDirective extends Node {
 
-        public VariableDirective(Attributes attrs, Mark start, Node parent) {
+        VariableDirective(Attributes attrs, Mark start, Node parent) {
             this(JSP_VARIABLE_DIRECTIVE_ACTION, attrs, null, null, start,
                     parent);
         }
 
-        public VariableDirective(String qName, Attributes attrs,
+        VariableDirective(String qName, Attributes attrs,
                 Attributes nonTaglibXmlnsAttrs, Attributes taglibAttrs,
                 Mark start, Node parent) {
             super(qName, VARIABLE_DIRECTIVE_ACTION, attrs, nonTaglibXmlnsAttrs,
@@ -761,11 +761,11 @@ abstract class Node implements TagConstants {
      */
     public static class InvokeAction extends Node {
 
-        public InvokeAction(Attributes attrs, Mark start, Node parent) {
+        InvokeAction(Attributes attrs, Mark start, Node parent) {
             this(JSP_INVOKE_ACTION, attrs, null, null, start, parent);
         }
 
-        public InvokeAction(String qName, Attributes attrs,
+        InvokeAction(String qName, Attributes attrs,
                 Attributes nonTaglibXmlnsAttrs, Attributes taglibAttrs,
                 Mark start, Node parent) {
             super(qName, INVOKE_ACTION, attrs, nonTaglibXmlnsAttrs,
@@ -783,11 +783,11 @@ abstract class Node implements TagConstants {
      */
     public static class DoBodyAction extends Node {
 
-        public DoBodyAction(Attributes attrs, Mark start, Node parent) {
+        DoBodyAction(Attributes attrs, Mark start, Node parent) {
             this(JSP_DOBODY_ACTION, attrs, null, null, start, parent);
         }
 
-        public DoBodyAction(String qName, Attributes attrs,
+        DoBodyAction(String qName, Attributes attrs,
                 Attributes nonTaglibXmlnsAttrs, Attributes taglibAttrs,
                 Mark start, Node parent) {
             super(qName, DOBODY_ACTION, attrs, nonTaglibXmlnsAttrs,
@@ -805,7 +805,7 @@ abstract class Node implements TagConstants {
      */
     public static class Comment extends Node {
 
-        public Comment(String text, Mark start, Node parent) {
+        Comment(String text, Mark start, Node parent) {
             super(null, null, text, start, parent);
         }
 
@@ -820,12 +820,12 @@ abstract class Node implements TagConstants {
      */
     public abstract static class ScriptingElement extends Node {
 
-        public ScriptingElement(String qName, String localName, String text,
+        ScriptingElement(String qName, String localName, String text,
                 Mark start, Node parent) {
             super(qName, localName, text, start, parent);
         }
 
-        public ScriptingElement(String qName, String localName,
+        ScriptingElement(String qName, String localName,
                 Attributes nonTaglibXmlnsAttrs, Attributes taglibAttrs,
                 Mark start, Node parent) {
             super(qName, localName, null, nonTaglibXmlnsAttrs, taglibAttrs,
@@ -877,12 +877,12 @@ abstract class Node implements TagConstants {
      */
     public static class Declaration extends ScriptingElement {
 
-        public Declaration(String text, Mark start, Node parent) {
+        Declaration(String text, Mark start, Node parent) {
             super(JSP_DECLARATION_ACTION, DECLARATION_ACTION, text, start,
                     parent);
         }
 
-        public Declaration(String qName, Attributes nonTaglibXmlnsAttrs,
+        Declaration(String qName, Attributes nonTaglibXmlnsAttrs,
                 Attributes taglibAttrs, Mark start, Node parent) {
             super(qName, DECLARATION_ACTION, nonTaglibXmlnsAttrs, taglibAttrs,
                     start, parent);
@@ -900,11 +900,11 @@ abstract class Node implements TagConstants {
      */
     public static class Expression extends ScriptingElement {
 
-        public Expression(String text, Mark start, Node parent) {
+        Expression(String text, Mark start, Node parent) {
             super(JSP_EXPRESSION_ACTION, EXPRESSION_ACTION, text, start, parent);
         }
 
-        public Expression(String qName, Attributes nonTaglibXmlnsAttrs,
+        Expression(String qName, Attributes nonTaglibXmlnsAttrs,
                 Attributes taglibAttrs, Mark start, Node parent) {
             super(qName, EXPRESSION_ACTION, nonTaglibXmlnsAttrs, taglibAttrs,
                     start, parent);
@@ -921,11 +921,11 @@ abstract class Node implements TagConstants {
      */
     public static class Scriptlet extends ScriptingElement {
 
-        public Scriptlet(String text, Mark start, Node parent) {
+        Scriptlet(String text, Mark start, Node parent) {
             super(JSP_SCRIPTLET_ACTION, SCRIPTLET_ACTION, text, start, parent);
         }
 
-        public Scriptlet(String qName, Attributes nonTaglibXmlnsAttrs,
+        Scriptlet(String qName, Attributes nonTaglibXmlnsAttrs,
                 Attributes taglibAttrs, Mark start, Node parent) {
             super(qName, SCRIPTLET_ACTION, nonTaglibXmlnsAttrs, taglibAttrs,
                     start, parent);
@@ -947,7 +947,7 @@ abstract class Node implements TagConstants {
 
         private final char type;
 
-        public ELExpression(char type, String text, Mark start, Node parent) {
+        ELExpression(char type, String text, Mark start, Node parent) {
             super(null, null, text, start, parent);
             this.type = type;
         }
@@ -977,11 +977,11 @@ abstract class Node implements TagConstants {
 
         private JspAttribute value;
 
-        public ParamAction(Attributes attrs, Mark start, Node parent) {
+        ParamAction(Attributes attrs, Mark start, Node parent) {
             this(JSP_PARAM_ACTION, attrs, null, null, start, parent);
         }
 
-        public ParamAction(String qName, Attributes attrs,
+        ParamAction(String qName, Attributes attrs,
                 Attributes nonTaglibXmlnsAttrs, Attributes taglibAttrs,
                 Mark start, Node parent) {
             super(qName, PARAM_ACTION, attrs, nonTaglibXmlnsAttrs, taglibAttrs,
@@ -1009,11 +1009,11 @@ abstract class Node implements TagConstants {
 
         private JspAttribute page;
 
-        public IncludeAction(Attributes attrs, Mark start, Node parent) {
+        IncludeAction(Attributes attrs, Mark start, Node parent) {
             this(JSP_INCLUDE_ACTION, attrs, null, null, start, parent);
         }
 
-        public IncludeAction(String qName, Attributes attrs,
+        IncludeAction(String qName, Attributes attrs,
                 Attributes nonTaglibXmlnsAttrs, Attributes taglibAttrs,
                 Mark start, Node parent) {
             super(qName, INCLUDE_ACTION, attrs, nonTaglibXmlnsAttrs,
@@ -1041,11 +1041,11 @@ abstract class Node implements TagConstants {
 
         private JspAttribute page;
 
-        public ForwardAction(Attributes attrs, Mark start, Node parent) {
+        ForwardAction(Attributes attrs, Mark start, Node parent) {
             this(JSP_FORWARD_ACTION, attrs, null, null, start, parent);
         }
 
-        public ForwardAction(String qName, Attributes attrs,
+        ForwardAction(String qName, Attributes attrs,
                 Attributes nonTaglibXmlnsAttrs, Attributes taglibAttrs,
                 Mark start, Node parent) {
             super(qName, FORWARD_ACTION, attrs, nonTaglibXmlnsAttrs,
@@ -1071,11 +1071,11 @@ abstract class Node implements TagConstants {
      */
     public static class GetProperty extends Node {
 
-        public GetProperty(Attributes attrs, Mark start, Node parent) {
+        GetProperty(Attributes attrs, Mark start, Node parent) {
             this(JSP_GET_PROPERTY_ACTION, attrs, null, null, start, parent);
         }
 
-        public GetProperty(String qName, Attributes attrs,
+        GetProperty(String qName, Attributes attrs,
                 Attributes nonTaglibXmlnsAttrs, Attributes taglibAttrs,
                 Mark start, Node parent) {
             super(qName, GET_PROPERTY_ACTION, attrs, nonTaglibXmlnsAttrs,
@@ -1095,11 +1095,11 @@ abstract class Node implements TagConstants {
 
         private JspAttribute value;
 
-        public SetProperty(Attributes attrs, Mark start, Node parent) {
+        SetProperty(Attributes attrs, Mark start, Node parent) {
             this(JSP_SET_PROPERTY_ACTION, attrs, null, null, start, parent);
         }
 
-        public SetProperty(String qName, Attributes attrs,
+        SetProperty(String qName, Attributes attrs,
                 Attributes nonTaglibXmlnsAttrs, Attributes taglibAttrs,
                 Mark start, Node parent) {
             super(qName, SET_PROPERTY_ACTION, attrs, nonTaglibXmlnsAttrs,
@@ -1127,11 +1127,11 @@ abstract class Node implements TagConstants {
 
         private JspAttribute beanName;
 
-        public UseBean(Attributes attrs, Mark start, Node parent) {
+        UseBean(Attributes attrs, Mark start, Node parent) {
             this(JSP_USE_BEAN_ACTION, attrs, null, null, start, parent);
         }
 
-        public UseBean(String qName, Attributes attrs,
+        UseBean(String qName, Attributes attrs,
                 Attributes nonTaglibXmlnsAttrs, Attributes taglibAttrs,
                 Mark start, Node parent) {
             super(qName, USE_BEAN_ACTION, attrs, nonTaglibXmlnsAttrs,
@@ -1159,7 +1159,7 @@ abstract class Node implements TagConstants {
 
         private JspAttribute[] jspAttrs;
 
-        public UninterpretedTag(String qName, String localName,
+        UninterpretedTag(String qName, String localName,
                 Attributes attrs, Attributes nonTaglibXmlnsAttrs,
                 Attributes taglibAttrs, Mark start, Node parent) {
             super(qName, localName, attrs, nonTaglibXmlnsAttrs, taglibAttrs,
@@ -1189,11 +1189,11 @@ abstract class Node implements TagConstants {
 
         private JspAttribute nameAttr;
 
-        public JspElement(Attributes attrs, Mark start, Node parent) {
+        JspElement(Attributes attrs, Mark start, Node parent) {
             this(JSP_ELEMENT_ACTION, attrs, null, null, start, parent);
         }
 
-        public JspElement(String qName, Attributes attrs,
+        JspElement(String qName, Attributes attrs,
                 Attributes nonTaglibXmlnsAttrs, Attributes taglibAttrs,
                 Mark start, Node parent) {
             super(qName, ELEMENT_ACTION, attrs, nonTaglibXmlnsAttrs,
@@ -1233,7 +1233,7 @@ abstract class Node implements TagConstants {
      */
     public static class JspOutput extends Node {
 
-        public JspOutput(String qName, Attributes attrs,
+        JspOutput(String qName, Attributes attrs,
                 Attributes nonTaglibXmlnsAttrs, Attributes taglibAttrs,
                 Mark start, Node parent) {
             super(qName, OUTPUT_ACTION, attrs, nonTaglibXmlnsAttrs,
@@ -1318,7 +1318,7 @@ abstract class Node implements TagConstants {
 
         private final ChildInfo childInfo = new ChildInfo();
 
-        public ChildInfoBase(String qName, String localName, Attributes attrs,
+        ChildInfoBase(String qName, String localName, Attributes attrs,
                 Attributes nonTaglibXmlnsAttrs, Attributes taglibAttrs, Mark start,
                 Node parent) {
             super(qName, localName, attrs, nonTaglibXmlnsAttrs, taglibAttrs, start, parent);
@@ -1394,7 +1394,7 @@ abstract class Node implements TagConstants {
         /*
          * Constructor for custom action implemented by tag handler.
          */
-        public CustomTag(String qName, String prefix, String localName,
+        CustomTag(String qName, String prefix, String localName,
                 String uri, Attributes attrs, Mark start, Node parent,
                 TagInfo tagInfo, Class<?> tagHandlerClass) {
             this(qName, prefix, localName, uri, attrs, null, null, start,
@@ -1404,7 +1404,7 @@ abstract class Node implements TagConstants {
         /*
          * Constructor for custom action implemented by tag handler.
          */
-        public CustomTag(String qName, String prefix, String localName,
+        CustomTag(String qName, String prefix, String localName,
                 String uri, Attributes attrs, Attributes nonTaglibXmlnsAttrs,
                 Attributes taglibAttrs, Mark start, Node parent,
                 TagInfo tagInfo, Class<?> tagHandlerClass) {
@@ -1435,7 +1435,7 @@ abstract class Node implements TagConstants {
         /*
          * Constructor for custom action implemented by tag file.
          */
-        public CustomTag(String qName, String prefix, String localName,
+        CustomTag(String qName, String prefix, String localName,
                 String uri, Attributes attrs, Mark start, Node parent,
                 TagFileInfo tagFileInfo) {
             this(qName, prefix, localName, uri, attrs, null, null, start,
@@ -1445,7 +1445,7 @@ abstract class Node implements TagConstants {
         /*
          * Constructor for custom action implemented by tag file.
          */
-        public CustomTag(String qName, String prefix, String localName,
+        CustomTag(String qName, String prefix, String localName,
                 String uri, Attributes attrs, Attributes nonTaglibXmlnsAttrs,
                 Attributes taglibAttrs, Mark start, Node parent,
                 TagFileInfo tagFileInfo) {
@@ -1749,7 +1749,7 @@ abstract class Node implements TagConstants {
 
         private CustomTag tag; // The tag this attribute belongs to
 
-        public AttributeGenerator(Mark start, String name, CustomTag tag) {
+        AttributeGenerator(Mark start, String name, CustomTag tag) {
             super(start, null);
             this.name = name;
             this.tag = tag;
@@ -1774,7 +1774,7 @@ abstract class Node implements TagConstants {
      */
     public static class JspText extends Node {
 
-        public JspText(String qName, Attributes nonTaglibXmlnsAttrs,
+        JspText(String qName, Attributes nonTaglibXmlnsAttrs,
                 Attributes taglibAttrs, Mark start, Node parent) {
             super(qName, TEXT_ACTION, null, nonTaglibXmlnsAttrs, taglibAttrs,
                     start, parent);
@@ -1807,11 +1807,11 @@ abstract class Node implements TagConstants {
 
         private String prefix;
 
-        public NamedAttribute(Attributes attrs, Mark start, Node parent) {
+        NamedAttribute(Attributes attrs, Mark start, Node parent) {
             this(JSP_ATTRIBUTE_ACTION, attrs, null, null, start, parent);
         }
 
-        public NamedAttribute(String qName, Attributes attrs,
+        NamedAttribute(String qName, Attributes attrs,
                 Attributes nonTaglibXmlnsAttrs, Attributes taglibAttrs,
                 Mark start, Node parent) {
 
@@ -1917,11 +1917,11 @@ abstract class Node implements TagConstants {
      */
     public static class JspBody extends ChildInfoBase {
 
-        public JspBody(Mark start, Node parent) {
+        JspBody(Mark start, Node parent) {
             this(JSP_BODY_ACTION, null, null, start, parent);
         }
 
-        public JspBody(String qName, Attributes nonTaglibXmlnsAttrs,
+        JspBody(String qName, Attributes nonTaglibXmlnsAttrs,
                 Attributes taglibAttrs, Mark start, Node parent) {
             super(qName, BODY_ACTION, null, nonTaglibXmlnsAttrs, taglibAttrs,
                     start, parent);
@@ -1940,7 +1940,7 @@ abstract class Node implements TagConstants {
 
         private ArrayList<Integer> extraSmap = null;
 
-        public TemplateText(String text, Mark start, Node parent) {
+        TemplateText(String text, Mark start, Node parent) {
             super(null, null, text, start, parent);
         }
 
@@ -2249,11 +2249,11 @@ abstract class Node implements TagConstants {
 
         private boolean generatedInBuffer;
 
-        public Nodes() {
+        Nodes() {
             list = new ArrayList<>();
         }
 
-        public Nodes(Node.Root root) {
+        Nodes(Node.Root root) {
             this.root = root;
             list = new ArrayList<>();
             list.add(root);

==================================================
ParserController.java
index 0fd952a4a5..7bb624c00c 100644
--- a/java/org/apache/jasper/compiler/PageDataImpl.java
+++ b/java/org/apache/jasper/compiler/PageDataImpl.java
@@ -63,7 +63,7 @@ class PageDataImpl extends PageData implements TagConstants {
      *
      * @throws JasperException If an error occurs
      */
-    public PageDataImpl(Node.Nodes page, Compiler compiler)
+    PageDataImpl(Node.Nodes page, Compiler compiler)
                 throws JasperException {
 
         // First pass
@@ -113,7 +113,7 @@ class PageDataImpl extends PageData implements TagConstants {
         /*
          * Constructor
          */
-        public FirstPassVisitor(Node.Root root, PageInfo pageInfo) {
+        FirstPassVisitor(Node.Root root, PageInfo pageInfo) {
             this.root = root;
             this.pageInfo = pageInfo;
             this.rootAttrs = new AttributesImpl();
@@ -247,7 +247,7 @@ class PageDataImpl extends PageData implements TagConstants {
         /*
          * Constructor
          */
-        public SecondPassVisitor(Node.Root root, StringBuilder buf,
+        SecondPassVisitor(Node.Root root, StringBuilder buf,
                                  Compiler compiler, String jspIdPrefix) {
             this.root = root;
             this.buf = buf;

==================================================
ScriptingVariabler.java
index e32d24c1bf..2cba1fbb14 100644
--- a/java/org/apache/jasper/compiler/ParserController.java
+++ b/java/org/apache/jasper/compiler/ParserController.java
@@ -71,7 +71,7 @@ class ParserController implements TagConstants {
     /*
      * Constructor
      */
-    public ParserController(JspCompilationContext ctxt, Compiler compiler) {
+    ParserController(JspCompilationContext ctxt, Compiler compiler) {
         this.ctxt = ctxt;
         this.compiler = compiler;
         this.err = compiler.getErrorDispatcher();

==================================================
TagConstants.java
index 9fae846c42..fe733e43e8 100644
--- a/java/org/apache/jasper/compiler/ScriptingVariabler.java
+++ b/java/org/apache/jasper/compiler/ScriptingVariabler.java
@@ -66,7 +66,7 @@ class ScriptingVariabler {
         private final ErrorDispatcher err;
         private final Map<String, Integer> scriptVars;
 
-        public ScriptingVariableVisitor(ErrorDispatcher err) {
+        ScriptingVariableVisitor(ErrorDispatcher err) {
             this.err = err;
             scriptVars = new HashMap<>();
         }

==================================================
TagFileProcessor.java
index 25564ffac4..2633d37744 100644
--- a/java/org/apache/jasper/compiler/TagConstants.java
+++ b/java/org/apache/jasper/compiler/TagConstants.java
@@ -18,89 +18,89 @@ package org.apache.jasper.compiler;
 
 public interface TagConstants {
 
-    public static final String JSP_URI = "http://java.sun.com/JSP/Page";
+    String JSP_URI = "http://java.sun.com/JSP/Page";
 
-    public static final String DIRECTIVE_ACTION = "directive.";
+    String DIRECTIVE_ACTION = "directive.";
 
-    public static final String ROOT_ACTION = "root";
-    public static final String JSP_ROOT_ACTION = "jsp:root";
+    String ROOT_ACTION = "root";
+    String JSP_ROOT_ACTION = "jsp:root";
 
-    public static final String PAGE_DIRECTIVE_ACTION = "directive.page";
-    public static final String JSP_PAGE_DIRECTIVE_ACTION = "jsp:directive.page";
+    String PAGE_DIRECTIVE_ACTION = "directive.page";
+    String JSP_PAGE_DIRECTIVE_ACTION = "jsp:directive.page";
 
-    public static final String INCLUDE_DIRECTIVE_ACTION = "directive.include";
-    public static final String JSP_INCLUDE_DIRECTIVE_ACTION = "jsp:directive.include";
+    String INCLUDE_DIRECTIVE_ACTION = "directive.include";
+    String JSP_INCLUDE_DIRECTIVE_ACTION = "jsp:directive.include";
 
-    public static final String DECLARATION_ACTION = "declaration";
-    public static final String JSP_DECLARATION_ACTION = "jsp:declaration";
+    String DECLARATION_ACTION = "declaration";
+    String JSP_DECLARATION_ACTION = "jsp:declaration";
 
-    public static final String SCRIPTLET_ACTION = "scriptlet";
-    public static final String JSP_SCRIPTLET_ACTION = "jsp:scriptlet";
+    String SCRIPTLET_ACTION = "scriptlet";
+    String JSP_SCRIPTLET_ACTION = "jsp:scriptlet";
 
-    public static final String EXPRESSION_ACTION = "expression";
-    public static final String JSP_EXPRESSION_ACTION = "jsp:expression";
+    String EXPRESSION_ACTION = "expression";
+    String JSP_EXPRESSION_ACTION = "jsp:expression";
 
-    public static final String USE_BEAN_ACTION = "useBean";
-    public static final String JSP_USE_BEAN_ACTION = "jsp:useBean";
+    String USE_BEAN_ACTION = "useBean";
+    String JSP_USE_BEAN_ACTION = "jsp:useBean";
 
-    public static final String SET_PROPERTY_ACTION = "setProperty";
-    public static final String JSP_SET_PROPERTY_ACTION = "jsp:setProperty";
+    String SET_PROPERTY_ACTION = "setProperty";
+    String JSP_SET_PROPERTY_ACTION = "jsp:setProperty";
 
-    public static final String GET_PROPERTY_ACTION = "getProperty";
-    public static final String JSP_GET_PROPERTY_ACTION = "jsp:getProperty";
+    String GET_PROPERTY_ACTION = "getProperty";
+    String JSP_GET_PROPERTY_ACTION = "jsp:getProperty";
 
-    public static final String INCLUDE_ACTION = "include";
-    public static final String JSP_INCLUDE_ACTION = "jsp:include";
+    String INCLUDE_ACTION = "include";
+    String JSP_INCLUDE_ACTION = "jsp:include";
 
-    public static final String FORWARD_ACTION = "forward";
-    public static final String JSP_FORWARD_ACTION = "jsp:forward";
+    String FORWARD_ACTION = "forward";
+    String JSP_FORWARD_ACTION = "jsp:forward";
 
-    public static final String PARAM_ACTION = "param";
-    public static final String JSP_PARAM_ACTION = "jsp:param";
+    String PARAM_ACTION = "param";
+    String JSP_PARAM_ACTION = "jsp:param";
 
-    public static final String TEXT_ACTION = "text";
-    public static final String JSP_TEXT_ACTION = "jsp:text";
-    public static final String JSP_TEXT_ACTION_END = "</jsp:text>";
+    String TEXT_ACTION = "text";
+    String JSP_TEXT_ACTION = "jsp:text";
+    String JSP_TEXT_ACTION_END = "</jsp:text>";
 
-    public static final String ATTRIBUTE_ACTION = "attribute";
-    public static final String JSP_ATTRIBUTE_ACTION = "jsp:attribute";
+    String ATTRIBUTE_ACTION = "attribute";
+    String JSP_ATTRIBUTE_ACTION = "jsp:attribute";
 
-    public static final String BODY_ACTION = "body";
-    public static final String JSP_BODY_ACTION = "jsp:body";
+    String BODY_ACTION = "body";
+    String JSP_BODY_ACTION = "jsp:body";
 
-    public static final String ELEMENT_ACTION = "element";
-    public static final String JSP_ELEMENT_ACTION = "jsp:element";
+    String ELEMENT_ACTION = "element";
+    String JSP_ELEMENT_ACTION = "jsp:element";
 
-    public static final String OUTPUT_ACTION = "output";
-    public static final String JSP_OUTPUT_ACTION = "jsp:output";
+    String OUTPUT_ACTION = "output";
+    String JSP_OUTPUT_ACTION = "jsp:output";
 
-    public static final String TAGLIB_DIRECTIVE_ACTION = "taglib";
-    public static final String JSP_TAGLIB_DIRECTIVE_ACTION = "jsp:taglib";
+    String TAGLIB_DIRECTIVE_ACTION = "taglib";
+    String JSP_TAGLIB_DIRECTIVE_ACTION = "jsp:taglib";
 
     /*
      * Tag Files
      */
-    public static final String INVOKE_ACTION = "invoke";
-    public static final String JSP_INVOKE_ACTION = "jsp:invoke";
+    String INVOKE_ACTION = "invoke";
+    String JSP_INVOKE_ACTION = "jsp:invoke";
 
-    public static final String DOBODY_ACTION = "doBody";
-    public static final String JSP_DOBODY_ACTION = "jsp:doBody";
+    String DOBODY_ACTION = "doBody";
+    String JSP_DOBODY_ACTION = "jsp:doBody";
 
     /*
      * Tag File Directives
      */
-    public static final String TAG_DIRECTIVE_ACTION = "directive.tag";
-    public static final String JSP_TAG_DIRECTIVE_ACTION = "jsp:directive.tag";
+    String TAG_DIRECTIVE_ACTION = "directive.tag";
+    String JSP_TAG_DIRECTIVE_ACTION = "jsp:directive.tag";
 
-    public static final String ATTRIBUTE_DIRECTIVE_ACTION = "directive.attribute";
-    public static final String JSP_ATTRIBUTE_DIRECTIVE_ACTION = "jsp:directive.attribute";
+    String ATTRIBUTE_DIRECTIVE_ACTION = "directive.attribute";
+    String JSP_ATTRIBUTE_DIRECTIVE_ACTION = "jsp:directive.attribute";
 
-    public static final String VARIABLE_DIRECTIVE_ACTION = "directive.variable";
-    public static final String JSP_VARIABLE_DIRECTIVE_ACTION = "jsp:directive.variable";
+    String VARIABLE_DIRECTIVE_ACTION = "directive.variable";
+    String JSP_VARIABLE_DIRECTIVE_ACTION = "jsp:directive.variable";
 
     /*
      * Directive attributes
      */
-    public static final String URN_JSPTAGDIR = "urn:jsptagdir:";
-    public static final String URN_JSPTLD = "urn:jsptld:";
+    String URN_JSPTAGDIR = "urn:jsptagdir:";
+    String URN_JSPTLD = "urn:jsptld:";
 }

==================================================
TagLibraryInfoImpl.java
index 80935cbb13..0663155bd1 100644
--- a/java/org/apache/jasper/compiler/TagFileProcessor.java
+++ b/java/org/apache/jasper/compiler/TagFileProcessor.java
@@ -133,7 +133,7 @@ class TagFileProcessor {
 
         private Map<String,NameEntry> nameFromTable = new HashMap<>();
 
-        public TagFileDirectiveVisitor(Compiler compiler,
+        TagFileDirectiveVisitor(Compiler compiler,
                 TagLibraryInfo tagLibInfo, String name, String path) {
             err = compiler.getErrorDispatcher();
             this.tagLibInfo = tagLibInfo;

==================================================
TagPluginManager.java
index efdce96b05..d7f1ab4847 100644
--- a/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java
+++ b/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java
@@ -106,7 +106,7 @@ class TagLibraryInfoImpl extends TagLibraryInfo implements TagConstants {
     }
 
 
-    public TagLibraryInfoImpl(JspCompilationContext ctxt, ParserController pc,
+    TagLibraryInfoImpl(JspCompilationContext ctxt, ParserController pc,
             PageInfo pi, String prefix, String uriIn,
             TldResourcePath tldResourcePath, ErrorDispatcher err)
             throws JasperException {

==================================================
TextOptimizer.java
index a8a282be83..d92dbd14d5 100644
--- a/java/org/apache/jasper/compiler/TagPluginManager.java
+++ b/java/org/apache/jasper/compiler/TagPluginManager.java
@@ -133,7 +133,7 @@ public class TagPluginManager {
         private final TagPluginManager manager;
         private final PageInfo pageInfo;
 
-        public NodeVisitor(TagPluginManager manager, PageInfo pageInfo) {
+        NodeVisitor(TagPluginManager manager, PageInfo pageInfo) {
             this.manager = manager;
             this.pageInfo = pageInfo;
         }

==================================================
TldCache.java
index 98c0e411ec..d5e9ffdd47 100644
--- a/java/org/apache/jasper/compiler/TextOptimizer.java
+++ b/java/org/apache/jasper/compiler/TextOptimizer.java
@@ -38,7 +38,7 @@ public class TextOptimizer {
         private Node.TemplateText firstTextNode = null;
         private StringBuilder textBuffer;
 
-        public TextCatVisitor(Compiler compiler) {
+        TextCatVisitor(Compiler compiler) {
             options = compiler.getCompilationContext().getOptions();
             pageInfo = compiler.getPageInfo();
         }

==================================================
JasperELResolver.java
index 446f80e044..ceb6d00b41 100644
--- a/java/org/apache/jasper/compiler/TldCache.java
+++ b/java/org/apache/jasper/compiler/TldCache.java
@@ -154,7 +154,7 @@ public class TldCache {
         private volatile long webAppPathLastModified;
         private volatile long entryLastModified;
 
-        public TaglibXmlCacheEntry(TaglibXml taglibXml, long webAppPathLastModified,
+        TaglibXmlCacheEntry(TaglibXml taglibXml, long webAppPathLastModified,
                 long entryLastModified) {
             this.taglibXml = taglibXml;
             this.webAppPathLastModified = webAppPathLastModified;

==================================================
JspFactoryImpl.java
index c29d3e1bf4..5f462a1125 100644
--- a/java/org/apache/jasper/el/JasperELResolver.java
+++ b/java/org/apache/jasper/el/JasperELResolver.java
@@ -175,7 +175,7 @@ public class JasperELResolver extends CompositeELResolver {
     /*
      * Copied from org.apache.el.lang.ELSupport#coerceToString(ELContext,Object)
      */
-    private static final String coerceToString(final Object obj) {
+    private static String coerceToString(final Object obj) {
         if (obj == null) {
             return "";
         } else if (obj instanceof String) {

==================================================
JspSourceDependent.java
index db15ca1965..c7183ddcd8 100644
--- a/java/org/apache/jasper/runtime/JspFactoryImpl.java
+++ b/java/org/apache/jasper/runtime/JspFactoryImpl.java
@@ -102,7 +102,7 @@ public class JspFactoryImpl extends JspFactory {
 
         private int current = -1;
 
-        public PageContextPool(int poolSize) {
+        PageContextPool(int poolSize) {
             this.pool = new PageContext[poolSize];
         }
 

==================================================
JspWriterImpl.java
index f9c98be947..819e356b1f 100644
--- a/java/org/apache/jasper/runtime/JspSourceDependent.java
+++ b/java/org/apache/jasper/runtime/JspSourceDependent.java
@@ -34,6 +34,6 @@ public interface JspSourceDependent {
     * has a source dependency on the file.
     * @return the map of dependent resources
     */
-    public Map<String,Long> getDependants();
+    Map<String,Long> getDependants();
 
 }

==================================================
PageContextImpl.java
index c837508093..1f72189ab3 100644
--- a/java/org/apache/jasper/runtime/JspWriterImpl.java
+++ b/java/org/apache/jasper/runtime/JspWriterImpl.java
@@ -147,7 +147,7 @@ public class JspWriterImpl extends JspWriter {
         nextChar = 0;
     }
 
-    private final void bufferOverflow() throws IOException {
+    private void bufferOverflow() throws IOException {
         throw new IOException(Localizer.getMessage("jsp.error.overflow"));
     }
 

==================================================
FastRemovalDequeue.java
index 26d313de08..fe27e29ef2 100644
--- a/java/org/apache/jasper/runtime/PageContextImpl.java
+++ b/java/org/apache/jasper/runtime/PageContextImpl.java
@@ -467,7 +467,7 @@ public class PageContextImpl extends PageContext {
         return servlet;
     }
 
-    private final String getAbsolutePathRelativeToContext(String relativeUrlPath) {
+    private String getAbsolutePathRelativeToContext(String relativeUrlPath) {
         String path = relativeUrlPath;
 
         if (!path.startsWith("/")) {

==================================================
AsyncFileHandler.java
index e2c3ef497a..2241ed638c 100644
--- a/java/org/apache/jasper/util/FastRemovalDequeue.java
+++ b/java/org/apache/jasper/util/FastRemovalDequeue.java
@@ -275,11 +275,11 @@ public class FastRemovalDequeue<T> {
             content = object;
         }
 
-        private final boolean getValid() {
+        private boolean getValid() {
             return valid;
         }
 
-        private final void invalidate() {
+        private void invalidate() {
             this.valid = false;
             this.previous = null;
             this.next = null;
@@ -293,7 +293,7 @@ public class FastRemovalDequeue<T> {
             return replaced;
         }
 
-        private final void setReplaced(final T replaced) {
+        private void setReplaced(final T replaced) {
             this.replaced = replaced;
         }
 
@@ -301,19 +301,19 @@ public class FastRemovalDequeue<T> {
             this.replaced = null;
         }
 
-        private final Entry getNext() {
+        private Entry getNext() {
             return next;
         }
 
-        private final void setNext(final Entry next) {
+        private void setNext(final Entry next) {
             this.next = next;
         }
 
-        private final Entry getPrevious() {
+        private Entry getPrevious() {
             return previous;
         }
 
-        private final void setPrevious(final Entry previous) {
+        private void setPrevious(final Entry previous) {
             this.previous = previous;
         }
 

==================================================
OneLineFormatter.java
index 7f8b065d61..ac667c4c6f 100644
--- a/java/org/apache/juli/AsyncFileHandler.java
+++ b/java/org/apache/juli/AsyncFileHandler.java
@@ -150,7 +150,7 @@ public class AsyncFileHandler extends FileHandler {
          */
         private final AtomicInteger handlerCount = new AtomicInteger();
 
-        public LoggerExecutorService(final int overflowDropType, final int maxRecords) {
+        LoggerExecutorService(final int overflowDropType, final int maxRecords) {
             super(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingDeque<>(maxRecords), THREAD_FACTORY);
             switch (overflowDropType) {
                 case OVERFLOW_DROP_LAST:

==================================================
DirectJDKLog.java
index 00e8ffb82f..f91bc8f0fb 100644
--- a/java/org/apache/juli/OneLineFormatter.java
+++ b/java/org/apache/juli/OneLineFormatter.java
@@ -247,7 +247,7 @@ public class OneLineFormatter extends Formatter {
 
         private final int cacheSize;
 
-        public ThreadNameCache(int cacheSize) {
+        ThreadNameCache(int cacheSize) {
             super(cacheSize, 0.75f, true);
             this.cacheSize = cacheSize;
         }
@@ -265,7 +265,7 @@ public class OneLineFormatter extends Formatter {
      */
     private static class IndentingPrintWriter extends PrintWriter {
 
-        public IndentingPrintWriter(Writer out) {
+        IndentingPrintWriter(Writer out) {
             super(out);
         }
 
@@ -277,7 +277,7 @@ public class OneLineFormatter extends Formatter {
     }
 
 
-    private static enum MillisHandling {
+    private enum MillisHandling {
         NONE, APPEND, REPLACE_S, REPLACE_SS, REPLACE_SSS,
     }
 }

==================================================
Log.java
index adf9177483..90ca719c12 100644
--- a/java/org/apache/juli/logging/DirectJDKLog.java
+++ b/java/org/apache/juli/logging/DirectJDKLog.java
@@ -57,7 +57,7 @@ class DirectJDKLog implements Log {
         }
     }
 
-    public DirectJDKLog(String name ) {
+    DirectJDKLog(String name ) {
         logger=Logger.getLogger(name);
     }
 

==================================================
InstanceManagerBindings.java
index 2acc0c27cf..270eeee36e 100644
--- a/java/org/apache/juli/logging/Log.java
+++ b/java/org/apache/juli/logging/Log.java
@@ -73,7 +73,7 @@ public interface Log {
      * @return <code>true</code> if debug level logging is enabled, otherwise
      *         <code>false</code>
      */
-    public boolean isDebugEnabled();
+    boolean isDebugEnabled();
 
 
     /**
@@ -86,7 +86,7 @@ public interface Log {
      * @return <code>true</code> if error level logging is enabled, otherwise
      *         <code>false</code>
      */
-    public boolean isErrorEnabled();
+    boolean isErrorEnabled();
 
 
     /**
@@ -99,7 +99,7 @@ public interface Log {
      * @return <code>true</code> if fatal level logging is enabled, otherwise
      *         <code>false</code>
      */
-    public boolean isFatalEnabled();
+    boolean isFatalEnabled();
 
 
     /**
@@ -112,7 +112,7 @@ public interface Log {
      * @return <code>true</code> if info level logging is enabled, otherwise
      *         <code>false</code>
      */
-    public boolean isInfoEnabled();
+    boolean isInfoEnabled();
 
 
     /**
@@ -125,7 +125,7 @@ public interface Log {
      * @return <code>true</code> if trace level logging is enabled, otherwise
      *         <code>false</code>
      */
-    public boolean isTraceEnabled();
+    boolean isTraceEnabled();
 
 
     /**
@@ -138,7 +138,7 @@ public interface Log {
      * @return <code>true</code> if warn level logging is enabled, otherwise
      *         <code>false</code>
      */
-    public boolean isWarnEnabled();
+    boolean isWarnEnabled();
 
 
     // -------------------------------------------------------- Logging Methods
@@ -149,7 +149,7 @@ public interface Log {
      *
      * @param message log this message
      */
-    public void trace(Object message);
+    void trace(Object message);
 
 
     /**
@@ -158,7 +158,7 @@ public interface Log {
      * @param message log this message
      * @param t log this cause
      */
-    public void trace(Object message, Throwable t);
+    void trace(Object message, Throwable t);
 
 
     /**
@@ -166,7 +166,7 @@ public interface Log {
      *
      * @param message log this message
      */
-    public void debug(Object message);
+    void debug(Object message);
 
 
     /**
@@ -175,7 +175,7 @@ public interface Log {
      * @param message log this message
      * @param t log this cause
      */
-    public void debug(Object message, Throwable t);
+    void debug(Object message, Throwable t);
 
 
     /**
@@ -183,7 +183,7 @@ public interface Log {
      *
      * @param message log this message
      */
-    public void info(Object message);
+    void info(Object message);
 
 
     /**
@@ -192,7 +192,7 @@ public interface Log {
      * @param message log this message
      * @param t log this cause
      */
-    public void info(Object message, Throwable t);
+    void info(Object message, Throwable t);
 
 
     /**
@@ -200,7 +200,7 @@ public interface Log {
      *
      * @param message log this message
      */
-    public void warn(Object message);
+    void warn(Object message);
 
 
     /**
@@ -209,7 +209,7 @@ public interface Log {
      * @param message log this message
      * @param t log this cause
      */
-    public void warn(Object message, Throwable t);
+    void warn(Object message, Throwable t);
 
 
     /**
@@ -217,7 +217,7 @@ public interface Log {
      *
      * @param message log this message
      */
-    public void error(Object message);
+    void error(Object message);
 
 
     /**
@@ -226,7 +226,7 @@ public interface Log {
      * @param message log this message
      * @param t log this cause
      */
-    public void error(Object message, Throwable t);
+    void error(Object message, Throwable t);
 
 
     /**
@@ -234,7 +234,7 @@ public interface Log {
      *
      * @param message log this message
      */
-    public void fatal(Object message);
+    void fatal(Object message);
 
 
     /**
@@ -243,7 +243,7 @@ public interface Log {
      * @param message log this message
      * @param t log this cause
      */
-    public void fatal(Object message, Throwable t);
+    void fatal(Object message, Throwable t);
 
 
 }

==================================================
JarScanner.java
index a91d0c16db..7b22eb3228 100644
--- a/java/org/apache/tomcat/InstanceManagerBindings.java
+++ b/java/org/apache/tomcat/InstanceManagerBindings.java
@@ -23,13 +23,13 @@ public final class InstanceManagerBindings {
 
     private static final Map<ClassLoader, InstanceManager> bindings = new ConcurrentHashMap<>();
 
-    public static final void bind(ClassLoader classLoader, InstanceManager instanceManager) {
+    public static void bind(ClassLoader classLoader, InstanceManager instanceManager) {
         bindings.put(classLoader, instanceManager);
     }
-    public static final void unbind(ClassLoader classLoader) {
+    public static void unbind(ClassLoader classLoader) {
         bindings.remove(classLoader);
     }
-    public static final InstanceManager get(ClassLoader classLoader) {
+    public static InstanceManager get(ClassLoader classLoader) {
         return bindings.get(classLoader);
     }
 }

==================================================
JarScannerCallback.java
index c5ca8a9dcf..f92e78fe36 100644
--- a/java/org/apache/tomcat/JarScanner.java
+++ b/java/org/apache/tomcat/JarScanner.java
@@ -36,10 +36,10 @@ public interface JarScanner {
      *                      WEB-INF/lib
      * @param callback      The handler to process any JARs found
      */
-    public void scan(JarScanType scanType, ServletContext context,
+    void scan(JarScanType scanType, ServletContext context,
             JarScannerCallback callback);
 
-    public JarScanFilter getJarScanFilter();
+    JarScanFilter getJarScanFilter();
 
-    public void setJarScanFilter(JarScanFilter jarScanFilter);
+    void setJarScanFilter(JarScanFilter jarScanFilter);
 }

==================================================
PeriodicEventListener.java
index 991e123b40..92669cf3ef 100644
--- a/java/org/apache/tomcat/JarScannerCallback.java
+++ b/java/org/apache/tomcat/JarScannerCallback.java
@@ -37,7 +37,7 @@ public interface JarScannerCallback {
      *
      * @throws IOException if an I/O error occurs while scanning the JAR
      */
-    public void scan(Jar jar, String webappPath, boolean isWebapp)
+    void scan(Jar jar, String webappPath, boolean isWebapp)
             throws IOException;
 
     /**
@@ -53,7 +53,7 @@ public interface JarScannerCallback {
      *
      * @throws IOException if an I/O error occurs while scanning the JAR
      */
-    public void scan(File file, String webappPath, boolean isWebapp) throws IOException;
+    void scan(File file, String webappPath, boolean isWebapp) throws IOException;
 
     /**
      * A directory structure was found within the web application at
@@ -63,5 +63,5 @@ public interface JarScannerCallback {
      *
      * @throws IOException if an I/O error occurs while scanning WEB-INF/classes
      */
-    public void scanWebInfClasses() throws IOException;
+    void scanWebInfClasses() throws IOException;
 }

==================================================
CheckEol.java
index 11c1e37e62..8a1204ab2f 100644
--- a/java/org/apache/tomcat/PeriodicEventListener.java
+++ b/java/org/apache/tomcat/PeriodicEventListener.java
@@ -20,5 +20,5 @@ public interface PeriodicEventListener {
     /**
      * Execute a periodic task, such as reloading, etc.
      */
-    public void periodicEvent();
+    void periodicEvent();
 }

==================================================
Import.java
index 771b9bc38c..96dd39fe7d 100644
--- a/java/org/apache/tomcat/buildutil/CheckEol.java
+++ b/java/org/apache/tomcat/buildutil/CheckEol.java
@@ -142,7 +142,7 @@ public class CheckEol extends Task {
         private final int line;
         private final String value;
 
-        public CheckFailure(File file, int line, String value) {
+        CheckFailure(File file, int line, String value) {
             this.file = file;
             this.line = line;
             this.value = value;

==================================================
LifetimeExceededException.java
index 0c6b8eeefe..6b703888ec 100644
--- a/java/org/apache/tomcat/buildutil/translate/Import.java
+++ b/java/org/apache/tomcat/buildutil/translate/Import.java
@@ -100,7 +100,7 @@ public class Import {
         public final String key;
         public final String group;
 
-        public CompositeKey(String in) {
+        CompositeKey(String in) {
             int posPkg = in.indexOf(Constants.END_PACKAGE_MARKER);
             pkg = in.substring(0, posPkg).replace(Constants.JAVA_EE_SUBSTRING, Constants.JAKARTA_EE_SUBSTRING);
             key = in.substring(posPkg + Constants.END_PACKAGE_MARKER.length());

==================================================
ObjectNameWrapper.java
index 24c0e8ba1e..6f9f84efa4 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/LifetimeExceededException.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/LifetimeExceededException.java
@@ -30,7 +30,7 @@ final class LifetimeExceededException extends SQLException {
     /**
      * Constructs a new instance.
      */
-    public LifetimeExceededException() {
+    LifetimeExceededException() {
     }
 
     /**
@@ -38,7 +38,7 @@ final class LifetimeExceededException extends SQLException {
      *
      * @param reason a description of the exception
      */
-    public LifetimeExceededException(final String reason) {
+    LifetimeExceededException(final String reason) {
         super(reason);
     }
 }

==================================================
CPDSConnectionFactory.java
index f882245fb7..5f81329bb3 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/ObjectNameWrapper.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/ObjectNameWrapper.java
@@ -61,7 +61,7 @@ final class ObjectNameWrapper {
 
     private final ObjectName objectName;
 
-    public ObjectNameWrapper(final ObjectName objectName) {
+    ObjectNameWrapper(final ObjectName objectName) {
         this.objectName = objectName;
     }
 

==================================================
KeyedCPDSConnectionFactory.java
index eb90bc0a15..3f28aeb50a 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/datasources/CPDSConnectionFactory.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/datasources/CPDSConnectionFactory.java
@@ -84,7 +84,7 @@ final class CPDSConnectionFactory
      *            The password to use to create connections
      * @since 2.10.0
      */
-    public CPDSConnectionFactory(final ConnectionPoolDataSource cpds, final String validationQuery,
+    CPDSConnectionFactory(final ConnectionPoolDataSource cpds, final String validationQuery,
             final Duration validationQueryTimeoutDuration, final boolean rollbackAfterValidation, final String userName,
         final char[] userPassword) {
         this.cpds = cpds;
@@ -113,7 +113,7 @@ final class CPDSConnectionFactory
      *            The password to use to create connections
      * @since 2.10.0
      */
-    public CPDSConnectionFactory(final ConnectionPoolDataSource cpds, final String validationQuery, final Duration validationQueryTimeoutDuration,
+    CPDSConnectionFactory(final ConnectionPoolDataSource cpds, final String validationQuery, final Duration validationQueryTimeoutDuration,
         final boolean rollbackAfterValidation, final String userName, final String userPassword) {
         this(cpds, validationQuery, validationQueryTimeoutDuration, rollbackAfterValidation, userName, Utils.toCharArray(userPassword));
     }
@@ -139,7 +139,7 @@ final class CPDSConnectionFactory
      * @deprecated Use {@link #CPDSConnectionFactory(ConnectionPoolDataSource, String, Duration, boolean, String, char[])}.
      */
     @Deprecated
-    public CPDSConnectionFactory(final ConnectionPoolDataSource cpds, final String validationQuery,
+    CPDSConnectionFactory(final ConnectionPoolDataSource cpds, final String validationQuery,
             final int validationQueryTimeoutSeconds, final boolean rollbackAfterValidation, final String userName,
         final char[] userPassword) {
         this.cpds = cpds;
@@ -169,7 +169,7 @@ final class CPDSConnectionFactory
      * @deprecated Use {@link #CPDSConnectionFactory(ConnectionPoolDataSource, String, Duration, boolean, String, String)}.
      */
     @Deprecated
-    public CPDSConnectionFactory(final ConnectionPoolDataSource cpds, final String validationQuery, final int validationQueryTimeoutSeconds,
+    CPDSConnectionFactory(final ConnectionPoolDataSource cpds, final String validationQuery, final int validationQueryTimeoutSeconds,
             final boolean rollbackAfterValidation, final String userName, final String userPassword) {
         this(cpds, validationQuery, validationQueryTimeoutSeconds, rollbackAfterValidation, userName, Utils.toCharArray(userPassword));
     }

==================================================
PoolUtils.java
index a67d4a4dd8..816fd06bce 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/datasources/KeyedCPDSConnectionFactory.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/datasources/KeyedCPDSConnectionFactory.java
@@ -81,7 +81,7 @@ final class KeyedCPDSConnectionFactory implements KeyedPooledObjectFactory<UserP
      *            whether a rollback should be issued after {@link #validateObject validating} {@link Connection}s.
      * @since 2.10.0
      */
-    public KeyedCPDSConnectionFactory(final ConnectionPoolDataSource cpds, final String validationQuery,
+    KeyedCPDSConnectionFactory(final ConnectionPoolDataSource cpds, final String validationQuery,
             final Duration validationQueryTimeoutSeconds, final boolean rollbackAfterValidation) {
         this.cpds = cpds;
         this.validationQuery = validationQuery;
@@ -105,7 +105,7 @@ final class KeyedCPDSConnectionFactory implements KeyedPooledObjectFactory<UserP
      * @deprecated Use {@link #KeyedCPDSConnectionFactory(ConnectionPoolDataSource, String, Duration, boolean)}.
      */
     @Deprecated
-    public KeyedCPDSConnectionFactory(final ConnectionPoolDataSource cpds, final String validationQuery,
+    KeyedCPDSConnectionFactory(final ConnectionPoolDataSource cpds, final String validationQuery,
             final int validationQueryTimeoutSeconds, final boolean rollbackAfterValidation) {
         this(cpds, validationQuery, Duration.ofSeconds(validationQueryTimeoutSeconds), rollbackAfterValidation);
     }

==================================================
BaseGenericObjectPool.java
index d2d304d81c..0cce5c8e52 100644
--- a/java/org/apache/tomcat/dbcp/pool2/PoolUtils.java
+++ b/java/org/apache/tomcat/dbcp/pool2/PoolUtils.java
@@ -61,7 +61,7 @@ public final class PoolUtils {
          * @param factor
          *            erosion factor
          */
-        public ErodingFactor(final float factor) {
+        ErodingFactor(final float factor) {
             this.factor = factor;
             nextShrinkMillis = System.currentTimeMillis() + (long) (900000 * factor); // now + 15 min * factor
             idleHighWaterMark = 1;
@@ -151,7 +151,7 @@ public final class PoolUtils {
          *            events
          * @see #erodingFactor
          */
-        public ErodingKeyedObjectPool(final KeyedObjectPool<K, V> keyedPool,
+        ErodingKeyedObjectPool(final KeyedObjectPool<K, V> keyedPool,
                 final float factor) {
             this(keyedPool, new ErodingFactor(factor));
         }
@@ -341,7 +341,7 @@ public final class PoolUtils {
          *            events
          * @see #factor
          */
-        public ErodingObjectPool(final ObjectPool<T> pool, final float factor) {
+        ErodingObjectPool(final ObjectPool<T> pool, final float factor) {
             this.pool = pool;
             this.factor = new ErodingFactor(factor);
         }
@@ -484,7 +484,7 @@ public final class PoolUtils {
          * @param factor
          *            erosion factor
          */
-        public ErodingPerKeyKeyedObjectPool(
+        ErodingPerKeyKeyedObjectPool(
                 final KeyedObjectPool<K, V> keyedPool, final float factor) {
             super(keyedPool, null);
             this.factor = factor;

==================================================
CallStack.java
index 039340b50c..c5d248ee72 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/BaseGenericObjectPool.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/BaseGenericObjectPool.java
@@ -207,7 +207,7 @@ public abstract class BaseGenericObjectPool<T> extends BaseObject {
          *
          * @param instance object to wrap
          */
-        public IdentityWrapper(final T instance) {
+        IdentityWrapper(final T instance) {
             this.instance = instance;
         }
 

==================================================
GenericKeyedObjectPool.java
index 399dc04ac2..9320fe42a7 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/CallStack.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/CallStack.java
@@ -49,5 +49,5 @@ public interface CallStack {
      * @param writer a PrintWriter to write the current stack trace to if available
      * @return true if a stack trace was available to print or false if nothing was printed
      */
-    boolean printStackTrace(final PrintWriter writer);
+    boolean printStackTrace(PrintWriter writer);
 }

==================================================
InterruptibleReentrantLock.java
index 0ac5dac569..7a6ee55b20 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/GenericKeyedObjectPool.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/GenericKeyedObjectPool.java
@@ -128,7 +128,7 @@ public class GenericKeyedObjectPool<K, T> extends BaseGenericObjectPool<T>
          * @param fairness true means client threads waiting to borrow / return instances
          * will be served as if waiting in a FIFO queue.
          */
-        public ObjectDeque(final boolean fairness) {
+        ObjectDeque(final boolean fairness) {
             idleObjects = new LinkedBlockingDeque<>(fairness);
         }
 

==================================================
LinkedBlockingDeque.java
index 2ef7637cf9..ec06e0101f 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/InterruptibleReentrantLock.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/InterruptibleReentrantLock.java
@@ -39,7 +39,7 @@ class InterruptibleReentrantLock extends ReentrantLock {
      * @param fairness true means threads should acquire contended locks as if
      * waiting in a FIFO queue
      */
-    public InterruptibleReentrantLock(final boolean fairness) {
+    InterruptibleReentrantLock(final boolean fairness) {
         super(fairness);
     }
 

==================================================
SSLContext.java
index 60a131b493..6e0c73d565 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/LinkedBlockingDeque.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/LinkedBlockingDeque.java
@@ -311,7 +311,7 @@ class LinkedBlockingDeque<E> extends AbstractQueue<E>
      * Creates a {@code LinkedBlockingDeque} with a capacity of
      * {@link Integer#MAX_VALUE}.
      */
-    public LinkedBlockingDeque() {
+    LinkedBlockingDeque() {
         this(Integer.MAX_VALUE);
     }
 
@@ -321,7 +321,7 @@ class LinkedBlockingDeque<E> extends AbstractQueue<E>
      * @param fairness true means threads waiting on the deque should be served
      * as if waiting in a FIFO request queue
      */
-    public LinkedBlockingDeque(final boolean fairness) {
+    LinkedBlockingDeque(final boolean fairness) {
         this(Integer.MAX_VALUE, fairness);
     }
 
@@ -338,7 +338,7 @@ class LinkedBlockingDeque<E> extends AbstractQueue<E>
      * @throws NullPointerException if the specified collection or any
      *         of its elements are null
      */
-    public LinkedBlockingDeque(final Collection<? extends E> c) {
+    LinkedBlockingDeque(final Collection<? extends E> c) {
         this(Integer.MAX_VALUE);
         lock.lock(); // Never contended, but necessary for visibility
         try {
@@ -359,7 +359,7 @@ class LinkedBlockingDeque<E> extends AbstractQueue<E>
      * @param capacity the capacity of this deque
      * @throws IllegalArgumentException if {@code capacity} is less than 1
      */
-    public LinkedBlockingDeque(final int capacity) {
+    LinkedBlockingDeque(final int capacity) {
         this(capacity, false);
     }
 
@@ -372,7 +372,7 @@ class LinkedBlockingDeque<E> extends AbstractQueue<E>
      * as if waiting in a FIFO request queue
      * @throws IllegalArgumentException if {@code capacity} is less than 1
      */
-    public LinkedBlockingDeque(final int capacity, final boolean fairness) {
+    LinkedBlockingDeque(final int capacity, final boolean fairness) {
         if (capacity <= 0) {
             throw new IllegalArgumentException();
         }

==================================================
IntrospectionUtils.java
index b26324f321..730a38ce80 100644
--- a/java/org/apache/tomcat/jni/SSLContext.java
+++ b/java/org/apache/tomcat/jni/SSLContext.java
@@ -360,7 +360,7 @@ public final class SSLContext {
      * select an OpenSSL SSLContext based on the host name requested by the
      * client.
      */
-    public static interface SNICallBack {
+    public interface SNICallBack {
 
         /**
          * This callback is made during the TLS handshake when the client uses
@@ -373,7 +373,7 @@ public final class SSLContext {
          *         SSLContext to use for the given host or zero if no SSLContext
          *         could be identified
          */
-        public long getSslContext(String sniHostName);
+        long getSslContext(String sniHostName);
     }
 
     /**

==================================================
ConstantUtf8.java
index 1bfd980bb0..92e478ee97 100644
--- a/java/org/apache/tomcat/util/IntrospectionUtils.java
+++ b/java/org/apache/tomcat/util/IntrospectionUtils.java
@@ -591,7 +591,7 @@ public final class IntrospectionUtils {
     // -------------------- Get property --------------------
     // This provides a layer of abstraction
 
-    public static interface PropertySource {
-        public String getProperty(String key);
+    public interface PropertySource {
+        String getProperty(String key);
     }
 }

==================================================
ByteChunk.java
index 0656931d67..0de93ab177 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantUtf8.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantUtf8.java
@@ -56,7 +56,7 @@ public final class ConstantUtf8 extends Constant {
     /**
      * @return Data converted to string.
      */
-    public final String getBytes() {
+    public String getBytes() {
         return value;
     }
 }

==================================================
CharChunk.java
index c2a3d86b55..b8e060e81b 100644
--- a/java/org/apache/tomcat/util/buf/ByteChunk.java
+++ b/java/org/apache/tomcat/util/buf/ByteChunk.java
@@ -74,7 +74,7 @@ public final class ByteChunk extends AbstractChunk {
      *
      * Same as java.nio.channels.ReadableByteChannel
      */
-    public static interface ByteInputChannel {
+    public interface ByteInputChannel {
 
         /**
          * Read new bytes.
@@ -83,7 +83,7 @@ public final class ByteChunk extends AbstractChunk {
          *
          * @throws IOException If an I/O error occurs during reading
          */
-        public int realReadBytes() throws IOException;
+        int realReadBytes() throws IOException;
     }
 
     /**
@@ -92,7 +92,7 @@ public final class ByteChunk extends AbstractChunk {
      *
      * Same as java.nio.channel.WritableByteChannel.
      */
-    public static interface ByteOutputChannel {
+    public interface ByteOutputChannel {
 
         /**
          * Send the bytes ( usually the internal conversion buffer ). Expect 8k
@@ -103,7 +103,7 @@ public final class ByteChunk extends AbstractChunk {
          * @param len length that will be written
          * @throws IOException If an I/O occurs while writing the bytes
          */
-        public void realWriteBytes(byte buf[], int off, int len) throws IOException;
+        void realWriteBytes(byte buf[], int off, int len) throws IOException;
 
 
         /**
@@ -113,7 +113,7 @@ public final class ByteChunk extends AbstractChunk {
          * @param from bytes that will be written
          * @throws IOException If an I/O occurs while writing the bytes
          */
-        public void realWriteBytes(ByteBuffer from) throws IOException;
+        void realWriteBytes(ByteBuffer from) throws IOException;
     }
 
     // --------------------
@@ -823,7 +823,7 @@ public final class ByteChunk extends AbstractChunk {
      * @param value to convert to byte array
      * @return the byte array value
      */
-    public static final byte[] convertToBytes(String value) {
+    public static byte[] convertToBytes(String value) {
         byte[] result = new byte[value.length()];
         for (int i = 0; i < value.length(); i++) {
             result[i] = (byte) value.charAt(i);

==================================================
UDecoder.java
index 51fa20489a..411f79b5a9 100644
--- a/java/org/apache/tomcat/util/buf/CharChunk.java
+++ b/java/org/apache/tomcat/util/buf/CharChunk.java
@@ -35,7 +35,7 @@ public final class CharChunk extends AbstractChunk implements CharSequence {
     /**
      * Input interface, used when the buffer is empty.
      */
-    public static interface CharInputChannel {
+    public interface CharInputChannel {
 
         /**
          * Read new characters.
@@ -44,14 +44,14 @@ public final class CharChunk extends AbstractChunk implements CharSequence {
          *
          * @throws IOException If an I/O error occurs during reading
          */
-        public int realReadChars() throws IOException;
+        int realReadChars() throws IOException;
     }
 
     /**
      * When we need more space we'll either grow the buffer ( up to the limit )
      * or send it to a channel.
      */
-    public static interface CharOutputChannel {
+    public interface CharOutputChannel {
 
         /**
          * Send the bytes ( usually the internal conversion buffer ). Expect 8k
@@ -62,7 +62,7 @@ public final class CharChunk extends AbstractChunk implements CharSequence {
          * @param len length that will be written
          * @throws IOException If an I/O occurs while writing the characters
          */
-        public void realWriteChars(char buf[], int off, int len) throws IOException;
+        void realWriteChars(char buf[], int off, int len) throws IOException;
     }
 
     // --------------------

==================================================
UEncoder.java
index 7648a7ec4e..094d50ef9a 100644
--- a/java/org/apache/tomcat/util/buf/UDecoder.java
+++ b/java/org/apache/tomcat/util/buf/UDecoder.java
@@ -39,7 +39,7 @@ public final class UDecoder {
 
     private static class DecodeException extends CharConversionException {
         private static final long serialVersionUID = 1L;
-        public DecodeException(String s) {
+        DecodeException(String s) {
             super(s);
         }
 

==================================================
CaseInsensitiveKeyMap.java
index d52946cd9f..e84fd238d2 100644
--- a/java/org/apache/tomcat/util/buf/UEncoder.java
+++ b/java/org/apache/tomcat/util/buf/UEncoder.java
@@ -41,7 +41,7 @@ public final class UEncoder {
             return this.safeChars;
         }
 
-        private SafeCharsSet(String additionalSafeChars) {
+        SafeCharsSet(String additionalSafeChars) {
             safeChars = initialSafeChars();
             for (char c : additionalSafeChars.toCharArray()) {
                 safeChars.set(c);

==================================================
ManagedConcurrentWeakHashMap.java
index d33a6dd6fd..eb4b981c8a 100644
--- a/java/org/apache/tomcat/util/collections/CaseInsensitiveKeyMap.java
+++ b/java/org/apache/tomcat/util/collections/CaseInsensitiveKeyMap.java
@@ -96,7 +96,7 @@ public class CaseInsensitiveKeyMap<V> extends AbstractMap<String,V> {
 
         private final Set<Entry<Key,V>> entrySet;
 
-        public EntrySet(Set<Map.Entry<Key,V>> entrySet) {
+        EntrySet(Set<Map.Entry<Key,V>> entrySet) {
             this.entrySet = entrySet;
         }
 
@@ -116,7 +116,7 @@ public class CaseInsensitiveKeyMap<V> extends AbstractMap<String,V> {
 
         private final Iterator<Entry<Key,V>> iterator;
 
-        public EntryIterator(Iterator<Entry<Key,V>> iterator) {
+        EntryIterator(Iterator<Entry<Key,V>> iterator) {
             this.iterator = iterator;
         }
 
@@ -143,7 +143,7 @@ public class CaseInsensitiveKeyMap<V> extends AbstractMap<String,V> {
         private final String key;
         private final V value;
 
-        public EntryImpl(String key, V value) {
+        EntryImpl(String key, V value) {
             this.key = key;
             this.value = value;
         }

==================================================
Injectable.java
index 53f3e778f4..630f989a37 100644
--- a/java/org/apache/tomcat/util/collections/ManagedConcurrentWeakHashMap.java
+++ b/java/org/apache/tomcat/util/collections/ManagedConcurrentWeakHashMap.java
@@ -64,7 +64,7 @@ public class ManagedConcurrentWeakHashMap<K, V> extends AbstractMap<K, V> implem
         private final int hash;
         private boolean dead;
 
-        public Key(Object key, ReferenceQueue<Object> queue) {
+        Key(Object key, ReferenceQueue<Object> queue) {
             super(key, queue);
             hash = key.hashCode();
         }

==================================================
WebRuleSet.java
index 4df7ac87a7..ee02171af5 100644
--- a/java/org/apache/tomcat/util/descriptor/web/Injectable.java
+++ b/java/org/apache/tomcat/util/descriptor/web/Injectable.java
@@ -19,7 +19,7 @@ package org.apache.tomcat.util.descriptor.web;
 import java.util.List;
 
 public interface Injectable {
-    public String getName();
-    public void addInjectionTarget(String injectionTargetName, String jndiName);
-    public List<InjectionTarget> getInjectionTargets();
+    String getName();
+    void addInjectionTarget(String injectionTargetName, String jndiName);
+    List<InjectionTarget> getInjectionTargets();
 }

==================================================
Digester.java
index 61d379968c..69360d320a 100644
--- a/java/org/apache/tomcat/util/descriptor/web/WebRuleSet.java
+++ b/java/org/apache/tomcat/util/descriptor/web/WebRuleSet.java
@@ -721,7 +721,7 @@ public class WebRuleSet implements RuleSet {
  */
 final class SetLoginConfig extends Rule {
     boolean isLoginConfigSet = false;
-    public SetLoginConfig() {
+    SetLoginConfig() {
         // NO-OP
     }
 
@@ -744,7 +744,7 @@ final class SetLoginConfig extends Rule {
  */
 final class SetJspConfig extends Rule {
     boolean isJspConfigSet = false;
-    public SetJspConfig() {
+    SetJspConfig() {
         // NO-OP
     }
 
@@ -767,7 +767,7 @@ final class SetJspConfig extends Rule {
  */
 final class SetSessionConfig extends Rule {
     boolean isSessionConfigSet = false;
-    public SetSessionConfig() {
+    SetSessionConfig() {
         // NO-OP
     }
 
@@ -791,7 +791,7 @@ final class SetSessionConfig extends Rule {
 
 final class SetAuthConstraintRule extends Rule {
 
-    public SetAuthConstraintRule() {
+    SetAuthConstraintRule() {
         // NO-OP
     }
 
@@ -823,7 +823,7 @@ final class SetAuthConstraintRule extends Rule {
  */
 final class SetDistributableRule extends Rule {
 
-    public SetDistributableRule() {
+    SetDistributableRule() {
         // NO-OP
     }
 
@@ -853,7 +853,7 @@ final class SetDistributableRule extends Rule {
  */
 final class SetDenyUncoveredHttpMethodsRule extends Rule {
 
-    public SetDenyUncoveredHttpMethodsRule() {
+    SetDenyUncoveredHttpMethodsRule() {
         // NO-OP
     }
 
@@ -884,7 +884,7 @@ final class SetDenyUncoveredHttpMethodsRule extends Rule {
 
 final class SetPublicIdRule extends Rule {
 
-    public SetPublicIdRule(String method) {
+    SetPublicIdRule(String method) {
         this.method = method;
     }
 
@@ -934,7 +934,7 @@ final class SetPublicIdRule extends Rule {
 
 final class ServletDefCreateRule extends Rule {
 
-    public ServletDefCreateRule() {
+    ServletDefCreateRule() {
         // NO-OP
     }
 
@@ -978,7 +978,7 @@ final class ServletDefCreateRule extends Rule {
  */
 final class CallParamMultiRule extends CallParamRule {
 
-    public CallParamMultiRule(int paramIndex) {
+    CallParamMultiRule(int paramIndex) {
         super(paramIndex);
     }
 
@@ -1008,7 +1008,7 @@ final class CallMethodMultiRule extends CallMethodRule {
 
     final int multiParamIndex;
 
-    public CallMethodMultiRule(String methodName, int paramCount, int multiParamIndex) {
+    CallMethodMultiRule(String methodName, int paramCount, int multiParamIndex) {
         super(methodName, paramCount);
         this.multiParamIndex = multiParamIndex;
     }
@@ -1125,7 +1125,7 @@ final class CallMethodMultiRule extends CallMethodRule {
 
 final class IgnoreAnnotationsRule extends Rule {
 
-    public IgnoreAnnotationsRule() {
+    IgnoreAnnotationsRule() {
         // NO-OP
     }
 
@@ -1165,7 +1165,7 @@ final class IgnoreAnnotationsRule extends Rule {
 
 final class VersionRule extends Rule {
 
-    public VersionRule() {
+    VersionRule() {
         // NO-OP
     }
 
@@ -1200,7 +1200,7 @@ final class NameRule extends Rule {
 
     boolean isNameSet = false;
 
-    public NameRule() {
+    NameRule() {
         // NO-OP
     }
 
@@ -1239,7 +1239,7 @@ final class AbsoluteOrderingRule extends Rule {
     boolean isAbsoluteOrderingSet = false;
     private final boolean fragment;
 
-    public AbsoluteOrderingRule(boolean fragment) {
+    AbsoluteOrderingRule(boolean fragment) {
         this.fragment = fragment;
     }
 
@@ -1280,7 +1280,7 @@ final class RelativeOrderingRule extends Rule {
     boolean isRelativeOrderingSet = false;
     private final boolean fragment;
 
-    public RelativeOrderingRule(boolean fragment) {
+    RelativeOrderingRule(boolean fragment) {
         this.fragment = fragment;
     }
 
@@ -1306,7 +1306,7 @@ final class RelativeOrderingRule extends Rule {
  */
 final class SoapHeaderRule extends Rule {
 
-    public SoapHeaderRule() {
+    SoapHeaderRule() {
         // NO-OP
     }
 
@@ -1350,7 +1350,7 @@ final class SoapHeaderRule extends Rule {
  */
 final class ServiceQnameRule extends Rule {
 
-    public ServiceQnameRule() {
+    ServiceQnameRule() {
         // NO-OP
     }
 
@@ -1400,7 +1400,7 @@ final class TaglibLocationRule extends Rule {
 
     final boolean isServlet24OrLater;
 
-    public TaglibLocationRule(boolean isServlet24OrLater) {
+    TaglibLocationRule(boolean isServlet24OrLater) {
         this.isServlet24OrLater = isServlet24OrLater;
     }
 
@@ -1423,7 +1423,7 @@ final class TaglibLocationRule extends Rule {
  */
 final class MappedNameRule extends Rule {
 
-    public MappedNameRule() {
+    MappedNameRule() {
         // NO-OP
     }
 
@@ -1461,7 +1461,7 @@ final class LifecycleCallbackRule extends CallMethodRule {
 
     private final boolean postConstruct;
 
-    public LifecycleCallbackRule(String methodName, int paramCount,
+    LifecycleCallbackRule(String methodName, int paramCount,
             boolean postConstruct) {
         super(methodName, paramCount);
         this.postConstruct = postConstruct;
@@ -1490,7 +1490,7 @@ final class LifecycleCallbackRule extends CallMethodRule {
 
 final class SetOverrideRule extends Rule {
 
-    public SetOverrideRule() {
+    SetOverrideRule() {
         // no-op
     }
 

==================================================
DocumentProperties.java
index b9584460d3..b08b6076c1 100644
--- a/java/org/apache/tomcat/util/digester/Digester.java
+++ b/java/org/apache/tomcat/util/digester/Digester.java
@@ -2055,7 +2055,7 @@ public class Digester extends DefaultHandler2 {
         private final PropertySource[] source;
         private final ClassLoader classLoader;
 
-        public EntityResolverWrapper(EntityResolver entityResolver, PropertySource[] source, ClassLoader classLoader) {
+        EntityResolverWrapper(EntityResolver entityResolver, PropertySource[] source, ClassLoader classLoader) {
             this.entityResolver = entityResolver;
             this.source = source;
             this.classLoader = classLoader;
@@ -2083,7 +2083,7 @@ public class Digester extends DefaultHandler2 {
 
         private final EntityResolver2 entityResolver2;
 
-        public EntityResolver2Wrapper(EntityResolver2 entityResolver, PropertySource[] source,
+        EntityResolver2Wrapper(EntityResolver2 entityResolver, PropertySource[] source,
                 ClassLoader classLoader) {
             super(entityResolver, source, classLoader);
             this.entityResolver2 = entityResolver;

==================================================
ObjectCreationFactory.java
index 1e8029b448..c688ee6f97 100644
--- a/java/org/apache/tomcat/util/digester/DocumentProperties.java
+++ b/java/org/apache/tomcat/util/digester/DocumentProperties.java
@@ -27,7 +27,7 @@ public interface DocumentProperties {
     /**
      * The character encoding used by the source XML document.
      */
-    public interface Charset {
-        public void setCharset(java.nio.charset.Charset charset);
+    interface Charset {
+        void setCharset(java.nio.charset.Charset charset);
     }
 }

==================================================
Rules.java
index 28e659292a..39cbda25da 100644
--- a/java/org/apache/tomcat/util/digester/ObjectCreationFactory.java
+++ b/java/org/apache/tomcat/util/digester/ObjectCreationFactory.java
@@ -39,13 +39,13 @@ public interface ObjectCreationFactory {
      * @return the created object
      * @throws Exception any exception thrown will be propagated upwards
      */
-    public Object createObject(Attributes attributes) throws Exception;
+    Object createObject(Attributes attributes) throws Exception;
 
     /**
      * @return the {@link Digester} that was set by the
      * {@link FactoryCreateRule} upon initialization.
      */
-    public Digester getDigester();
+    Digester getDigester();
 
     /**
      * Set the {@link Digester} to allow the implementation to do logging,
@@ -53,6 +53,6 @@ public interface ObjectCreationFactory {
      *
      * @param digester parent Digester object
      */
-    public void setDigester(Digester digester);
+    void setDigester(Digester digester);
 
 }

==================================================
ConfigurationSource.java
index 4782249892..d22a3658cc 100644
--- a/java/org/apache/tomcat/util/digester/Rules.java
+++ b/java/org/apache/tomcat/util/digester/Rules.java
@@ -32,7 +32,7 @@ public interface Rules {
      * @return the Digester instance with which this Rules instance is
      * associated.
      */
-    public Digester getDigester();
+    Digester getDigester();
 
 
     /**
@@ -40,7 +40,7 @@ public interface Rules {
      *
      * @param digester The newly associated Digester instance
      */
-    public void setDigester(Digester digester);
+    void setDigester(Digester digester);
 
 
     // --------------------------------------------------------- Public Methods
@@ -51,13 +51,13 @@ public interface Rules {
      * @param pattern Nesting pattern to be matched for this Rule
      * @param rule Rule instance to be registered
      */
-    public void add(String pattern, Rule rule);
+    void add(String pattern, Rule rule);
 
 
     /**
      * Clear all existing Rule instance registrations.
      */
-    public void clear();
+    void clear();
 
 
     /**
@@ -72,7 +72,7 @@ public interface Rules {
      * @param pattern Nesting pattern to be matched
      * @return a rules list
      */
-    public List<Rule> match(String namespaceURI, String pattern);
+    List<Rule> match(String namespaceURI, String pattern);
 
 
     /**
@@ -83,5 +83,5 @@ public interface Rules {
      * method.
      * @return a rules list
      */
-    public List<Rule> rules();
+    List<Rule> rules();
 }

==================================================
FastHttpDateFormat.java
index 4dec49ac5f..8a93d2a78e 100644
--- a/java/org/apache/tomcat/util/file/ConfigurationSource.java
+++ b/java/org/apache/tomcat/util/file/ConfigurationSource.java
@@ -37,7 +37,7 @@ import org.apache.tomcat.util.buf.UriUtil;
  */
 public interface ConfigurationSource {
 
-    public static final ConfigurationSource DEFAULT = new ConfigurationSource() {
+    ConfigurationSource DEFAULT = new ConfigurationSource() {
         protected final File userDir = new File(System.getProperty("user.dir"));
         protected final URI userDirUri = userDir.toURI();
         @Override
@@ -84,7 +84,7 @@ public interface ConfigurationSource {
      * Represents a resource: a stream to the resource associated with
      * its URI.
      */
-    public class Resource implements AutoCloseable {
+    class Resource implements AutoCloseable {
         private final InputStream inputStream;
         private final URI uri;
         public Resource(InputStream inputStream, URI uri) {
@@ -122,7 +122,7 @@ public interface ConfigurationSource {
      * @return the server.xml as an InputStream
      * @throws IOException if an error occurs or if the resource does not exist
      */
-    public default Resource getServerXml()
+    default Resource getServerXml()
             throws IOException {
         return getConfResource("server.xml");
     }
@@ -133,7 +133,7 @@ public interface ConfigurationSource {
      * @return the web.xml as an InputStream
      * @throws IOException if an error occurs or if the resource does not exist
      */
-    public default Resource getSharedWebXml()
+    default Resource getSharedWebXml()
             throws IOException {
         return getConfResource("web.xml");
     }
@@ -144,7 +144,7 @@ public interface ConfigurationSource {
      * @return the resource as an InputStream
      * @throws IOException if an error occurs or if the resource does not exist
      */
-    public default Resource getConfResource(String name)
+    default Resource getConfResource(String name)
             throws IOException {
         String fullName = "conf/" + name;
         return getResource(fullName);
@@ -156,7 +156,7 @@ public interface ConfigurationSource {
      * @return the resource
      * @throws IOException if an error occurs or if the resource does not exist
      */
-    public Resource getResource(String name)
+    Resource getResource(String name)
             throws IOException;
 
     /**
@@ -165,6 +165,6 @@ public interface ConfigurationSource {
      * @param name The resource name
      * @return a URI representing the resource location
      */
-    public URI getURI(String name);
+    URI getURI(String name);
 
 }

==================================================
MimeHeaders.java
index 932208bf0c..91d192c501 100644
--- a/java/org/apache/tomcat/util/http/FastHttpDateFormat.java
+++ b/java/org/apache/tomcat/util/http/FastHttpDateFormat.java
@@ -92,7 +92,7 @@ public final class FastHttpDateFormat {
      * Get the current date in HTTP format.
      * @return the HTTP date
      */
-    public static final String getCurrentDate() {
+    public static String getCurrentDate() {
         long now = System.currentTimeMillis();
         // Handle case where time moves backwards (e.g. system time corrected)
         if (Math.abs(now - currentDateGenerated) > 1000) {
@@ -108,7 +108,7 @@ public final class FastHttpDateFormat {
      * @param value The date
      * @return the HTTP date
      */
-    public static final String formatDate(long value) {
+    public static String formatDate(long value) {
         Long longValue = Long.valueOf(value);
         String cachedDate = formatCache.get(longValue);
         if (cachedDate != null) {
@@ -127,7 +127,7 @@ public final class FastHttpDateFormat {
      * @return the date as a long or <code>-1</code> if the value cannot be
      *         parsed
      */
-    public static final long parseDate(String value) {
+    public static long parseDate(String value) {
 
         Long cachedDate = parseCache.get(value);
         if (cachedDate != null) {

==================================================
ResponseUtil.java
index 375cb5071e..b2b56b7d2e 100644
--- a/java/org/apache/tomcat/util/http/MimeHeaders.java
+++ b/java/org/apache/tomcat/util/http/MimeHeaders.java
@@ -430,7 +430,7 @@ class NamesEnumerator implements Enumeration<String> {
     private String next;
     private final MimeHeaders headers;
 
-    public NamesEnumerator(MimeHeaders headers) {
+    NamesEnumerator(MimeHeaders headers) {
         this.headers=headers;
         pos=0;
         size = headers.size();
@@ -522,7 +522,7 @@ class MimeHeaderField {
     /**
      * Creates a new, uninitialized header field.
      */
-    public MimeHeaderField() {
+    MimeHeaderField() {
         // NO-OP
     }
 

==================================================
Cookie.java
index a39359e04a..c767f12d8b 100644
--- a/java/org/apache/tomcat/util/http/ResponseUtil.java
+++ b/java/org/apache/tomcat/util/http/ResponseUtil.java
@@ -108,7 +108,7 @@ public class ResponseUtil {
     }
 
 
-    private static interface Adapter {
+    private interface Adapter {
 
         Collection<String> getHeaders(String name);
 
@@ -121,7 +121,7 @@ public class ResponseUtil {
     private static final class HeaderAdapter implements Adapter {
         private final MimeHeaders headers;
 
-        public HeaderAdapter(MimeHeaders headers) {
+        HeaderAdapter(MimeHeaders headers) {
             this.headers = headers;
         }
 
@@ -150,7 +150,7 @@ public class ResponseUtil {
     private static final class ResponseAdapter implements Adapter {
         private final HttpServletResponse response;
 
-        public ResponseAdapter(HttpServletResponse response) {
+        ResponseAdapter(HttpServletResponse response) {
             this.response = response;
         }
 

==================================================
Host.java
index 8801f0f5e9..8b80543bf9 100644
--- a/java/org/apache/tomcat/util/http/parser/Cookie.java
+++ b/java/org/apache/tomcat/util/http/parser/Cookie.java
@@ -254,7 +254,7 @@ public class Cookie {
         private int limit;
         private int position = 0;
 
-        public ByteBuffer(byte[] bytes, int offset, int len) {
+        ByteBuffer(byte[] bytes, int offset, int len) {
             this.bytes = bytes;
             this.position = offset;
             this.limit = offset + len;

==================================================
HttpParser.java
index f1fc6a33c3..b867adc205 100644
--- a/java/org/apache/tomcat/util/http/parser/Host.java
+++ b/java/org/apache/tomcat/util/http/parser/Host.java
@@ -91,7 +91,7 @@ public class Host {
         private int pos;
         private int mark;
 
-        public MessageBytesReader(MessageBytes mb) {
+        MessageBytesReader(MessageBytes mb) {
             ByteChunk bc = mb.getByteChunk();
             bytes = bc.getBytes();
             pos = bc.getOffset();

==================================================
BaseNotificationBroadcaster.java
index 21ba58967d..0758dd5915 100644
--- a/java/org/apache/tomcat/util/http/parser/HttpParser.java
+++ b/java/org/apache/tomcat/util/http/parser/HttpParser.java
@@ -979,7 +979,7 @@ public class HttpParser {
         private final boolean allowsEnd;
         private final String errorMsg;
 
-        private DomainParseState(boolean mayContinue, boolean allowsHyphen, boolean allowsPeriod,
+        DomainParseState(boolean mayContinue, boolean allowsHyphen, boolean allowsPeriod,
                 boolean allowsEnd, String errorMsg) {
             this.mayContinue = mayContinue;
             this.allowsHyphen = allowsHyphen;

==================================================
RegistryMBean.java
index 07773d1853..e00aeb156a 100644
--- a/java/org/apache/tomcat/util/modeler/BaseNotificationBroadcaster.java
+++ b/java/org/apache/tomcat/util/modeler/BaseNotificationBroadcaster.java
@@ -167,7 +167,7 @@ public class BaseNotificationBroadcaster implements NotificationBroadcaster {
 
 class BaseNotificationBroadcasterEntry {
 
-    public BaseNotificationBroadcasterEntry(NotificationListener listener,
+    BaseNotificationBroadcasterEntry(NotificationListener listener,
                                             NotificationFilter filter,
                                             Object handback) {
         this.listener = listener;

==================================================
AbstractEndpoint.java
index 3a8f1284d8..fa650a7982 100644
--- a/java/org/apache/tomcat/util/modeler/RegistryMBean.java
+++ b/java/org/apache/tomcat/util/modeler/RegistryMBean.java
@@ -47,7 +47,7 @@ public interface RegistryMBean {
      *      errors
      * @throws Exception Error invoking operation
      */
-    public void invoke(List<ObjectName> mbeans, String operation, boolean failFirst)
+    void invoke(List<ObjectName> mbeans, String operation, boolean failFirst)
             throws Exception;
 
     /**
@@ -81,7 +81,7 @@ public interface RegistryMBean {
      *
      * @since 1.1
      */
-    public void registerComponent(Object bean, String oname, String type)
+    void registerComponent(Object bean, String oname, String type)
            throws Exception;
 
     /**
@@ -92,7 +92,7 @@ public interface RegistryMBean {
      *
      * @since 1.1
      */
-    public void unregisterComponent(String oname);
+    void unregisterComponent(String oname);
 
 
      /**
@@ -104,7 +104,7 @@ public interface RegistryMBean {
       * @return  A unique id for the domain:name combination
       * @since 1.1
       */
-    public int getId(String domain, String name);
+    int getId(String domain, String name);
 
 
     /**
@@ -114,5 +114,5 @@ public interface RegistryMBean {
      * It will be called automatically if the Registry is unregistered.
      * @since 1.1
      */
-    public void stop();
+    void stop();
 }

==================================================
ApplicationBufferHandler.java
index ee91fd7121..7839849c38 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -72,12 +72,12 @@ public abstract class AbstractEndpoint<S,U> {
 
     protected static final StringManager sm = StringManager.getManager(AbstractEndpoint.class);
 
-    public static interface Handler<S> {
+    public interface Handler<S> {
 
         /**
          * Different types of socket states to react upon.
          */
-        public enum SocketState {
+        enum SocketState {
             // TODO Add a new state to the AsyncStateMachine and remove
             //      ASYNC_END (if possible)
             OPEN, CLOSED, LONG, ASYNC_END, SENDFILE, UPGRADING, UPGRADED, ASYNC_IO, SUSPENDED
@@ -92,7 +92,7 @@ public abstract class AbstractEndpoint<S,U> {
          *
          * @return The state of the socket after processing
          */
-        public SocketState process(SocketWrapperBase<S> socket,
+        SocketState process(SocketWrapperBase<S> socket,
                 SocketEvent status);
 
 
@@ -101,7 +101,7 @@ public abstract class AbstractEndpoint<S,U> {
          *
          * @return the GlobalRequestProcessor
          */
-        public Object getGlobal();
+        Object getGlobal();
 
 
         /**
@@ -109,7 +109,7 @@ public abstract class AbstractEndpoint<S,U> {
          *
          * @param socketWrapper The socketWrapper to release resources for
          */
-        public void release(SocketWrapperBase<S> socketWrapper);
+        void release(SocketWrapperBase<S> socketWrapper);
 
 
         /**
@@ -118,13 +118,13 @@ public abstract class AbstractEndpoint<S,U> {
          * afterwards but it is possible that the endpoint will be resumed so
          * the handler should not assume that a stop will follow.
          */
-        public void pause();
+        void pause();
 
 
         /**
          * Recycle resources associated with the handler.
          */
-        public void recycle();
+        void recycle();
     }
 
     protected enum BindState {
@@ -136,7 +136,7 @@ public abstract class AbstractEndpoint<S,U> {
         private final boolean bound;
         private final boolean wasBound;
 
-        private BindState(boolean bound, boolean wasBound) {
+        BindState(boolean bound, boolean wasBound) {
             this.bound = bound;
             this.wasBound = wasBound;
         }

==================================================
DispatchType.java
index 8362416fae..d0a41b466c 100644
--- a/java/org/apache/tomcat/util/net/ApplicationBufferHandler.java
+++ b/java/org/apache/tomcat/util/net/ApplicationBufferHandler.java
@@ -24,9 +24,9 @@ import java.nio.ByteBuffer;
  */
 public interface ApplicationBufferHandler {
 
-    static final ByteBuffer EMPTY_BUFFER = ByteBuffer.allocate(0);
+    ByteBuffer EMPTY_BUFFER = ByteBuffer.allocate(0);
 
-    static ApplicationBufferHandler EMPTY = new ApplicationBufferHandler() {
+    ApplicationBufferHandler EMPTY = new ApplicationBufferHandler() {
         @Override
         public void expand(int newSize) {
         }
@@ -39,10 +39,10 @@ public interface ApplicationBufferHandler {
         }
     };
 
-    public void setByteBuffer(ByteBuffer buffer);
+    void setByteBuffer(ByteBuffer buffer);
 
-    public ByteBuffer getByteBuffer();
+    ByteBuffer getByteBuffer();
 
-    public void expand(int size);
+    void expand(int size);
 
 }

==================================================
SSLContext.java
index 9b8a07808c..5914c87044 100644
--- a/java/org/apache/tomcat/util/net/DispatchType.java
+++ b/java/org/apache/tomcat/util/net/DispatchType.java
@@ -28,7 +28,7 @@ public enum DispatchType {
 
     private final SocketEvent status;
 
-    private DispatchType(SocketEvent status) {
+    DispatchType(SocketEvent status) {
         this.status = status;
     }
 

==================================================
SSLHostConfig.java
index fcf161a2dc..0074782c02 100644
--- a/java/org/apache/tomcat/util/net/SSLContext.java
+++ b/java/org/apache/tomcat/util/net/SSLContext.java
@@ -34,20 +34,20 @@ import javax.net.ssl.TrustManager;
  */
 public interface SSLContext {
 
-    public void init(KeyManager[] kms, TrustManager[] tms,
+    void init(KeyManager[] kms, TrustManager[] tms,
             SecureRandom sr) throws KeyManagementException;
 
-    public void destroy();
+    void destroy();
 
-    public SSLSessionContext getServerSessionContext();
+    SSLSessionContext getServerSessionContext();
 
-    public SSLEngine createSSLEngine();
+    SSLEngine createSSLEngine();
 
-    public SSLServerSocketFactory getServerSocketFactory();
+    SSLServerSocketFactory getServerSocketFactory();
 
-    public SSLParameters getSupportedSSLParameters();
+    SSLParameters getSupportedSSLParameters();
 
-    public X509Certificate[] getCertificateChain(String alias);
+    X509Certificate[] getCertificateChain(String alias);
 
-    public X509Certificate[] getAcceptedIssuers();
+    X509Certificate[] getAcceptedIssuers();
 }

==================================================
SSLHostConfigCertificate.java
index 9a06c52fff..eddd3a1595 100644
--- a/java/org/apache/tomcat/util/net/SSLHostConfig.java
+++ b/java/org/apache/tomcat/util/net/SSLHostConfig.java
@@ -793,7 +793,7 @@ public class SSLHostConfig implements Serializable {
 
         private final boolean optional;
 
-        private CertificateVerification(boolean optional) {
+        CertificateVerification(boolean optional) {
             this.optional = optional;
         }
 

==================================================
SSLSessionManager.java
index ba0e238d10..d1f4cc4a25 100644
--- a/java/org/apache/tomcat/util/net/SSLHostConfigCertificate.java
+++ b/java/org/apache/tomcat/util/net/SSLHostConfigCertificate.java
@@ -278,7 +278,7 @@ public class SSLHostConfigCertificate implements Serializable {
 
         private final Set<Authentication> compatibleAuthentications;
 
-        private Type(Authentication... authentications) {
+        Type(Authentication... authentications) {
             compatibleAuthentications = new HashSet<>();
             if (authentications != null) {
                 compatibleAuthentications.addAll(Arrays.asList(authentications));

==================================================
SSLSupport.java
index 0dfadb054d..17e1dd94f2 100644
--- a/java/org/apache/tomcat/util/net/SSLSessionManager.java
+++ b/java/org/apache/tomcat/util/net/SSLSessionManager.java
@@ -24,5 +24,5 @@ public interface SSLSessionManager {
     /**
      * Invalidate the SSL session
      */
-    public void invalidateSession();
+    void invalidateSession();
 }

==================================================
SSLUtil.java
index 1e59b3a63c..d98e205ba4 100644
--- a/java/org/apache/tomcat/util/net/SSLSupport.java
+++ b/java/org/apache/tomcat/util/net/SSLSupport.java
@@ -26,53 +26,53 @@ public interface SSLSupport {
     /**
      * The Request attribute key for the cipher suite.
      */
-    public static final String CIPHER_SUITE_KEY =
+    String CIPHER_SUITE_KEY =
             "jakarta.servlet.request.cipher_suite";
 
     /**
      * The Request attribute key for the key size.
      */
-    public static final String KEY_SIZE_KEY = "jakarta.servlet.request.key_size";
+    String KEY_SIZE_KEY = "jakarta.servlet.request.key_size";
 
     /**
      * The Request attribute key for the client certificate chain.
      */
-    public static final String CERTIFICATE_KEY =
+    String CERTIFICATE_KEY =
             "jakarta.servlet.request.X509Certificate";
 
     /**
      * The Request attribute key for the session id.
      * This one is a Tomcat extension to the Servlet spec.
      */
-    public static final String SESSION_ID_KEY =
+    String SESSION_ID_KEY =
             "jakarta.servlet.request.ssl_session_id";
 
     /**
      * The request attribute key for the session manager.
      * This one is a Tomcat extension to the Servlet spec.
      */
-    public static final String SESSION_MGR =
+    String SESSION_MGR =
             "jakarta.servlet.request.ssl_session_mgr";
 
     /**
      * The request attribute key under which the String indicating the protocol
      * that created the SSL socket is recorded - e.g. TLSv1 or TLSv1.2 etc.
      */
-    public static final String PROTOCOL_VERSION_KEY =
+    String PROTOCOL_VERSION_KEY =
             "org.apache.tomcat.util.net.secure_protocol_version";
 
     /**
      * The request attribute key under which the String indicating the ciphers
      * requested by the client are recorded.
      */
-    public static final String REQUESTED_CIPHERS_KEY =
+    String REQUESTED_CIPHERS_KEY =
             "org.apache.tomcat.util.net.secure_requested_ciphers";
 
     /**
      * The request attribute key under which the String indicating the protocols
      * requested by the client are recorded.
      */
-    public static final String REQUESTED_PROTOCOL_VERSIONS_KEY =
+    String REQUESTED_PROTOCOL_VERSIONS_KEY =
             "org.apache.tomcat.util.net.secure_requested_protocol_versions";
 
     /**
@@ -83,7 +83,7 @@ public interface SSLSupport {
      *
      * @throws IOException If an error occurs trying to obtain the cipher suite
      */
-    public String getCipherSuite() throws IOException;
+    String getCipherSuite() throws IOException;
 
     /**
      * The client certificate chain (if any).
@@ -95,7 +95,7 @@ public interface SSLSupport {
      * @throws IOException If an error occurs trying to obtain the certificate
      *                     chain
      */
-    public X509Certificate[] getPeerCertificateChain() throws IOException;
+    X509Certificate[] getPeerCertificateChain() throws IOException;
 
     /**
      * The server certificate chain (if any) that were sent to the peer.
@@ -104,7 +104,7 @@ public interface SSLSupport {
      *         certificate first, followed by those of any certificate
      *         authorities
      */
-    public default X509Certificate[] getLocalCertificateChain() {
+    default X509Certificate[] getLocalCertificateChain() {
         return null;
     }
 
@@ -126,7 +126,7 @@ public interface SSLSupport {
      *
      * @throws IOException If an error occurs trying to obtain the key size
      */
-    public Integer getKeySize() throws IOException;
+    Integer getKeySize() throws IOException;
 
     /**
      * The current session Id.
@@ -135,7 +135,7 @@ public interface SSLSupport {
      *
      * @throws IOException If an error occurs trying to obtain the session ID
      */
-    public String getSessionId() throws IOException;
+    String getSessionId() throws IOException;
 
     /**
      * @return the protocol String indicating how the SSL socket was created
@@ -144,7 +144,7 @@ public interface SSLSupport {
      * @throws IOException If an error occurs trying to obtain the protocol
      *   information from the socket
      */
-    public String getProtocol() throws IOException;
+    String getProtocol() throws IOException;
 
     /**
      * @return the list of SSL/TLS protocol versions requested by the client
@@ -152,7 +152,7 @@ public interface SSLSupport {
      * @throws IOException If an error occurs trying to obtain the client
      *   requested protocol information from the socket
      */
-    public String getRequestedProtocols() throws IOException;
+    String getRequestedProtocols() throws IOException;
 
     /**
     * @return the list of SSL/TLS ciphers requested by the client
@@ -160,5 +160,5 @@ public interface SSLSupport {
      * @throws IOException If an error occurs trying to obtain the client
      *   request cipher information from the socket
     */
-   public String getRequestedCiphers() throws IOException;
+   String getRequestedCiphers() throws IOException;
 }

==================================================
SocketWrapperBase.java
index c65f7a23fa..c2272d694d 100644
--- a/java/org/apache/tomcat/util/net/SSLUtil.java
+++ b/java/org/apache/tomcat/util/net/SSLUtil.java
@@ -29,13 +29,13 @@ import javax.net.ssl.TrustManager;
  */
 public interface SSLUtil {
 
-    public SSLContext createSSLContext(List<String> negotiableProtocols) throws Exception;
+    SSLContext createSSLContext(List<String> negotiableProtocols) throws Exception;
 
-    public KeyManager[] getKeyManagers() throws Exception;
+    KeyManager[] getKeyManagers() throws Exception;
 
-    public TrustManager[] getTrustManagers() throws Exception;
+    TrustManager[] getTrustManagers() throws Exception;
 
-    public void configureSessionContext(SSLSessionContext sslSessionContext);
+    void configureSessionContext(SSLSessionContext sslSessionContext);
 
     /**
      * The set of enabled protocols is the intersection of the implemented
@@ -49,7 +49,7 @@ public interface SSLUtil {
      * @throws IllegalArgumentException  If there is no intersection between the
      *         implemented and configured protocols
      */
-    public String[] getEnabledProtocols() throws IllegalArgumentException;
+    String[] getEnabledProtocols() throws IllegalArgumentException;
 
     /**
      * The set of enabled ciphers is the intersection of the implemented ciphers
@@ -65,18 +65,18 @@ public interface SSLUtil {
      * @throws IllegalArgumentException  If there is no intersection between the
      *         implemented and configured ciphers
      */
-    public String[] getEnabledCiphers() throws IllegalArgumentException;
+    String[] getEnabledCiphers() throws IllegalArgumentException;
 
     /**
      * Optional interface that can be implemented by
      * {@link javax.net.ssl.SSLEngine}s to indicate that they support ALPN and
      * can provided the protocol agreed with the client.
      */
-    public interface ProtocolInfo {
+    interface ProtocolInfo {
         /**
          * ALPN information.
          * @return the protocol selected using ALPN
          */
-        public String getNegotiatedProtocol();
+        String getNegotiatedProtocol();
     }
 }

==================================================
OpenSSLX509Certificate.java
index 4c54200b96..ae6ee0e019 100644
--- a/java/org/apache/tomcat/util/net/SocketWrapperBase.java
+++ b/java/org/apache/tomcat/util/net/SocketWrapperBase.java
@@ -904,7 +904,7 @@ public abstract class SocketWrapperBase<E> {
          *
          * @return The call, if any, to make to the completion handler
          */
-        public CompletionHandlerCall callHandler(CompletionState state, ByteBuffer[] buffers,
+        CompletionHandlerCall callHandler(CompletionState state, ByteBuffer[] buffers,
                 int offset, int length);
     }
 

==================================================
Cipher.java
index a3eddce8c0..fb15ab7346 100644
--- a/java/org/apache/tomcat/util/net/openssl/OpenSSLX509Certificate.java
+++ b/java/org/apache/tomcat/util/net/openssl/OpenSSLX509Certificate.java
@@ -37,7 +37,7 @@ final class OpenSSLX509Certificate extends X509Certificate {
     private final byte[] bytes;
     private X509Certificate wrapped;
 
-    public OpenSSLX509Certificate(byte[] bytes) {
+    OpenSSLX509Certificate(byte[] bytes) {
         this.bytes = bytes;
     }
 

==================================================
OpenSSLCipherConfigurationParser.java
index ea64076b19..a5aee1292d 100644
--- a/java/org/apache/tomcat/util/net/openssl/ciphers/Cipher.java
+++ b/java/org/apache/tomcat/util/net/openssl/ciphers/Cipher.java
@@ -5011,7 +5011,7 @@ public enum Cipher {
      */
     private final int alg_bits;
 
-    private Cipher(int id, String openSSLAlias, KeyExchange kx, Authentication au, Encryption enc,
+    Cipher(int id, String openSSLAlias, KeyExchange kx, Authentication au, Encryption enc,
             MessageDigest mac, Protocol protocol, boolean export, EncryptionLevel level,
             boolean fipsCompatible, int strength_bits, int alg_bits, String[] jsseAltNames,
             String[] openSSlAltNames) {

==================================================
Protocol.java
index caea7441f4..ee1c6c6db1 100644
--- a/java/org/apache/tomcat/util/net/openssl/ciphers/OpenSSLCipherConfigurationParser.java
+++ b/java/org/apache/tomcat/util/net/openssl/ciphers/OpenSSLCipherConfigurationParser.java
@@ -394,7 +394,7 @@ public class OpenSSLCipherConfigurationParser {
 
     private static final Map<String,String> jsseToOpenSSL = new HashMap<>();
 
-    private static final void init() {
+    private static void init() {
 
         for (Cipher cipher : Cipher.values()) {
             String alias = cipher.getOpenSSLAlias();

==================================================
StandardJarScanner.java
index de69077b74..53477df6dd 100644
--- a/java/org/apache/tomcat/util/net/openssl/ciphers/Protocol.java
+++ b/java/org/apache/tomcat/util/net/openssl/ciphers/Protocol.java
@@ -28,7 +28,7 @@ public enum Protocol {
 
     private final String openSSLName;
 
-    private Protocol(String openSSLName) {
+    Protocol(String openSSLName) {
         this.openSSLName = openSSLName;
     }
 

==================================================
LimitLatch.java
index 99f8cf8484..b577a5e43f 100644
--- a/java/org/apache/tomcat/util/scan/StandardJarScanner.java
+++ b/java/org/apache/tomcat/util/scan/StandardJarScanner.java
@@ -483,7 +483,7 @@ public class StandardJarScanner implements JarScanner {
         private final boolean jar;
         private final String name;
 
-        public ClassPathEntry(URL url) {
+        ClassPathEntry(URL url) {
             String path = url.getPath();
             int end = path.lastIndexOf(Constants.JAR_EXT);
             if (end != -1) {

==================================================
ResizableExecutor.java
index 840ec55f86..c4bd3e8acc 100644
--- a/java/org/apache/tomcat/util/threads/LimitLatch.java
+++ b/java/org/apache/tomcat/util/threads/LimitLatch.java
@@ -35,7 +35,7 @@ public class LimitLatch {
     private class Sync extends AbstractQueuedSynchronizer {
         private static final long serialVersionUID = 1L;
 
-        public Sync() {
+        Sync() {
         }
 
         @Override

==================================================
ObjectReflectionPropertyInspector.java
index f111b36302..f73957e4fd 100644
--- a/java/org/apache/tomcat/util/threads/ResizableExecutor.java
+++ b/java/org/apache/tomcat/util/threads/ResizableExecutor.java
@@ -25,9 +25,9 @@ public interface ResizableExecutor extends Executor {
      *
      * @return the number of threads
      */
-    public int getPoolSize();
+    int getPoolSize();
 
-    public int getMaxThreads();
+    int getMaxThreads();
 
     /**
      * Returns the approximate number of threads that are actively executing
@@ -35,10 +35,10 @@ public interface ResizableExecutor extends Executor {
      *
      * @return the number of threads
      */
-    public int getActiveCount();
+    int getActiveCount();
 
-    public boolean resizePool(int corePoolSize, int maximumPoolSize);
+    boolean resizePool(int corePoolSize, int maximumPoolSize);
 
-    public boolean resizeQueue(int capacity);
+    boolean resizeQueue(int capacity);
 
 }

==================================================
AsyncChannelWrapperSecure.java
index 752d0405a9..547ef571fb 100644
--- a/java/org/apache/tomcat/util/xreflection/ObjectReflectionPropertyInspector.java
+++ b/java/org/apache/tomcat/util/xreflection/ObjectReflectionPropertyInspector.java
@@ -62,7 +62,7 @@ public final class ObjectReflectionPropertyInspector {
         );
     }
 
-    private static final Set<Class<?>> getKnownClasses() throws ClassNotFoundException {
+    private static Set<Class<?>> getKnownClasses() throws ClassNotFoundException {
         return
             Collections.unmodifiableSet(new LinkedHashSet<>(
                     Arrays.asList(

==================================================
AuthenticationType.java
index 34485e90b7..e90774a052 100644
--- a/java/org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java
+++ b/java/org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java
@@ -180,7 +180,7 @@ public class AsyncChannelWrapperSecure implements AsyncChannelWrapper {
         private final int length;
         private final WrapperFuture<Long,?> future;
 
-        public WriteTask(ByteBuffer[] srcs, int offset, int length,
+        WriteTask(ByteBuffer[] srcs, int offset, int length,
                 WrapperFuture<Long,?> future) {
             this.srcs = srcs;
             this.future = future;
@@ -255,7 +255,7 @@ public class AsyncChannelWrapperSecure implements AsyncChannelWrapper {
         private final ByteBuffer dest;
         private final WrapperFuture<Integer,?> future;
 
-        public ReadTask(ByteBuffer dest, WrapperFuture<Integer,?> future) {
+        ReadTask(ByteBuffer dest, WrapperFuture<Integer,?> future) {
             this.dest = dest;
             this.future = future;
         }
@@ -356,7 +356,7 @@ public class AsyncChannelWrapperSecure implements AsyncChannelWrapper {
         private HandshakeStatus handshakeStatus;
         private Status resultStatus;
 
-        public WebSocketSslHandshakeThread(WrapperFuture<Void,Void> hFuture) {
+        WebSocketSslHandshakeThread(WrapperFuture<Void,Void> hFuture) {
             this.hFuture = hFuture;
         }
 
@@ -458,11 +458,11 @@ public class AsyncChannelWrapperSecure implements AsyncChannelWrapper {
         private volatile Throwable throwable = null;
         private CountDownLatch completionLatch = new CountDownLatch(1);
 
-        public WrapperFuture() {
+        WrapperFuture() {
             this(null, null);
         }
 
-        public WrapperFuture(CompletionHandler<T,A> handler, A attachment) {
+        WrapperFuture(CompletionHandler<T,A> handler, A attachment) {
             this.handler = handler;
             this.attachment = attachment;
         }
@@ -528,7 +528,7 @@ public class AsyncChannelWrapperSecure implements AsyncChannelWrapper {
 
         private final Future<Long> wrapped;
 
-        public LongToIntegerFuture(Future<Long> wrapped) {
+        LongToIntegerFuture(Future<Long> wrapped) {
             this.wrapped = wrapped;
         }
 

==================================================
BackgroundProcessManager.java
index a88ea94358..32d64334d5 100644
--- a/java/org/apache/tomcat/websocket/AuthenticationType.java
+++ b/java/org/apache/tomcat/websocket/AuthenticationType.java
@@ -36,7 +36,7 @@ public enum AuthenticationType {
     private final String userPasswordProperty;
     private final String userRealmProperty;
 
-    private AuthenticationType(String authorizationHeaderName, String authenticateHeaderName, String userNameProperty,
+    AuthenticationType(String authorizationHeaderName, String authenticateHeaderName, String userNameProperty,
             String userPasswordProperty, String userRealmProperty) {
         this.authorizationHeaderName = authorizationHeaderName;
         this.authenticateHeaderName = authenticateHeaderName;

==================================================
FutureToSendHandler.java
index f55c058290..f7dedb8db0 100644
--- a/java/org/apache/tomcat/websocket/BackgroundProcessManager.java
+++ b/java/org/apache/tomcat/websocket/BackgroundProcessManager.java
@@ -124,7 +124,7 @@ public class BackgroundProcessManager {
         private final BackgroundProcessManager manager;
         private volatile boolean running = true;
 
-        public WsBackgroundThread(BackgroundProcessManager manager) {
+        WsBackgroundThread(BackgroundProcessManager manager) {
             setName("WebSocket background processing");
             this.manager = manager;
         }

==================================================
MessagePart.java
index 5882eef68f..7940b419a6 100644
--- a/java/org/apache/tomcat/websocket/FutureToSendHandler.java
+++ b/java/org/apache/tomcat/websocket/FutureToSendHandler.java
@@ -40,7 +40,7 @@ class FutureToSendHandler implements Future<Void>, SendHandler {
     private final WsSession wsSession;
     private volatile AtomicReference<SendResult> result = new AtomicReference<>(null);
 
-    public FutureToSendHandler(WsSession wsSession) {
+    FutureToSendHandler(WsSession wsSession) {
         this.wsSession = wsSession;
     }
 

==================================================
Util.java
index 506289b245..44b7629041 100644
--- a/java/org/apache/tomcat/websocket/MessagePart.java
+++ b/java/org/apache/tomcat/websocket/MessagePart.java
@@ -29,7 +29,7 @@ class MessagePart {
     private volatile SendHandler endHandler;
     private final long blockingWriteTimeoutExpiry;
 
-    public MessagePart( boolean fin, int rsv, byte opCode, ByteBuffer payload,
+    MessagePart( boolean fin, int rsv, byte opCode, ByteBuffer payload,
             SendHandler intermediateHandler, SendHandler endHandler,
             long blockingWriteTimeoutExpiry) {
         this.fin = fin;

==================================================
WsFrameClient.java
index e41c9559f1..e362b19d27 100644
--- a/java/org/apache/tomcat/websocket/Util.java
+++ b/java/org/apache/tomcat/websocket/Util.java
@@ -660,7 +660,7 @@ public class Util {
         private final int index;
         private int dimension;
 
-        public TypeResult(Class<?> clazz, int index, int dimension) {
+        TypeResult(Class<?> clazz, int index, int dimension) {
             this.clazz= clazz;
             this.index = index;
             this.dimension = dimension;

==================================================
WsRemoteEndpointImplBase.java
index f056f58c11..1d80d4fb0e 100644
--- a/java/org/apache/tomcat/websocket/WsFrameClient.java
+++ b/java/org/apache/tomcat/websocket/WsFrameClient.java
@@ -120,7 +120,7 @@ public class WsFrameClient extends WsFrameBase {
      * Fatal error. Usually an I/O error. Try and send notifications. Make sure
      * socket is closed.
      */
-    private final void close(Throwable t) {
+    private void close(Throwable t) {
         changeReadState(ReadState.CLOSING);
         CloseReason cr;
         if (t instanceof WsIOException) {

==================================================
WsWebSocketContainer.java
index cbc1a72d24..cfa3d3e9a3 100644
--- a/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java
+++ b/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java
@@ -553,7 +553,7 @@ public abstract class WsRemoteEndpointImplBase implements RemoteEndpoint {
         private final WsRemoteEndpointImplBase endpoint;
         private final SendHandler handler;
 
-        public EndMessageHandler(WsRemoteEndpointImplBase endpoint,
+        EndMessageHandler(WsRemoteEndpointImplBase endpoint,
                 SendHandler handler) {
             this.endpoint = endpoint;
             this.handler = handler;
@@ -580,7 +580,7 @@ public abstract class WsRemoteEndpointImplBase implements RemoteEndpoint {
 
         private final WsRemoteEndpointImplBase endpoint;
 
-        public IntermediateMessageHandler(WsRemoteEndpointImplBase endpoint) {
+        IntermediateMessageHandler(WsRemoteEndpointImplBase endpoint) {
             this.endpoint = endpoint;
         }
 
@@ -827,7 +827,7 @@ public abstract class WsRemoteEndpointImplBase implements RemoteEndpoint {
         private final WsRemoteEndpointImplBase endpoint;
         private volatile boolean isDone = false;
 
-        public TextMessageSendHandler(SendHandler handler, CharBuffer message,
+        TextMessageSendHandler(SendHandler handler, CharBuffer message,
                 boolean isLast, CharsetEncoder encoder,
                 ByteBuffer encoderBuffer, WsRemoteEndpointImplBase endpoint) {
             this.handler = handler;
@@ -884,7 +884,7 @@ public abstract class WsRemoteEndpointImplBase implements RemoteEndpoint {
         private final WsRemoteEndpointImplBase endpoint;
         private volatile int maskIndex = 0;
 
-        public OutputBufferSendHandler(SendHandler completion,
+        OutputBufferSendHandler(SendHandler completion,
                 long blockingWriteTimeoutExpiry,
                 ByteBuffer headerBuffer, ByteBuffer payload, byte[] mask,
                 ByteBuffer outputBuffer, boolean flushRequired,
@@ -982,7 +982,7 @@ public abstract class WsRemoteEndpointImplBase implements RemoteEndpoint {
         private final ByteBuffer outputBuffer;
         private final SendHandler handler;
 
-        public OutputBufferFlushSendHandler(ByteBuffer outputBuffer, SendHandler handler) {
+        OutputBufferFlushSendHandler(ByteBuffer outputBuffer, SendHandler handler) {
             this.outputBuffer = outputBuffer;
             this.handler = handler;
         }
@@ -1005,7 +1005,7 @@ public abstract class WsRemoteEndpointImplBase implements RemoteEndpoint {
         private volatile boolean closed = false;
         private volatile boolean used = false;
 
-        public WsOutputStream(WsRemoteEndpointImplBase endpoint) {
+        WsOutputStream(WsRemoteEndpointImplBase endpoint) {
             this.endpoint = endpoint;
         }
 
@@ -1100,7 +1100,7 @@ public abstract class WsRemoteEndpointImplBase implements RemoteEndpoint {
         private volatile boolean closed = false;
         private volatile boolean used = false;
 
-        public WsWriter(WsRemoteEndpointImplBase endpoint) {
+        WsWriter(WsRemoteEndpointImplBase endpoint) {
             this.endpoint = endpoint;
         }
 
@@ -1177,7 +1177,7 @@ public abstract class WsRemoteEndpointImplBase implements RemoteEndpoint {
         private final Class<?> clazz;
         private final Encoder encoder;
 
-        public EncoderEntry(Class<?> clazz, Encoder encoder) {
+        EncoderEntry(Class<?> clazz, Encoder encoder) {
             this.clazz = clazz;
             this.encoder = encoder;
         }
@@ -1282,7 +1282,7 @@ public abstract class WsRemoteEndpointImplBase implements RemoteEndpoint {
         private final SendHandler handler;
         private final StateMachine stateMachine;
 
-        public StateUpdateSendHandler(SendHandler handler, StateMachine stateMachine) {
+        StateUpdateSendHandler(SendHandler handler, StateMachine stateMachine) {
             this.handler = handler;
             this.stateMachine = stateMachine;
         }

==================================================
PojoMethodMapping.java
index 273b9945cc..fff9ca2a37 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -1096,7 +1096,7 @@ public class WsWebSocketContainer implements WebSocketContainer, BackgroundProce
         private final int status;
         private final HandshakeResponse handshakeResponse;
 
-        public HttpResponse(int status, HandshakeResponse handshakeResponse) {
+        HttpResponse(int status, HandshakeResponse handshakeResponse) {
             this.status = status;
             this.handshakeResponse = handshakeResponse;
         }

==================================================
UriTemplate.java
index 75e8a3237d..e86dc57aa4 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java
@@ -388,7 +388,7 @@ public class PojoMethodMapping {
         private DecoderMatch decoderMatch = null;
         private long maxMessageSize = -1;
 
-        public MessageHandlerInfo(Method m, List<DecoderEntry> decoderEntries)
+        MessageHandlerInfo(Method m, List<DecoderEntry> decoderEntries)
                 throws DeploymentException {
 
             this.m = m;

==================================================
WsServerContainer.java
index ab5339550e..fd33cd34ad 100644
--- a/java/org/apache/tomcat/websocket/server/UriTemplate.java
+++ b/java/org/apache/tomcat/websocket/server/UriTemplate.java
@@ -160,7 +160,7 @@ public class UriTemplate {
         private final int parameterIndex;
         private final String value;
 
-        public Segment(int parameterIndex, String value) {
+        Segment(int parameterIndex, String value) {
             this.parameterIndex = parameterIndex;
             this.value = value;
         }

==================================================
PoolConfiguration.java
index 1ea4117a0a..27533e97f9 100644
--- a/java/org/apache/tomcat/websocket/server/WsServerContainer.java
+++ b/java/org/apache/tomcat/websocket/server/WsServerContainer.java
@@ -458,7 +458,7 @@ public class WsServerContainer extends WsWebSocketContainer
         private final UriTemplate uriTemplate;
         private final boolean fromAnnotatedPojo;
 
-        public TemplatePathMatch(ServerEndpointConfig config, UriTemplate uriTemplate,
+        TemplatePathMatch(ServerEndpointConfig config, UriTemplate uriTemplate,
                 boolean fromAnnotatedPojo) {
             this.config = config;
             this.uriTemplate = uriTemplate;
@@ -486,7 +486,7 @@ public class WsServerContainer extends WsWebSocketContainer
         private final ServerEndpointConfig config;
         private final boolean fromAnnotatedPojo;
 
-        public ExactPathMatch(ServerEndpointConfig config, boolean fromAnnotatedPojo) {
+        ExactPathMatch(ServerEndpointConfig config, boolean fromAnnotatedPojo) {
             this.config = config;
             this.fromAnnotatedPojo = fromAnnotatedPojo;
         }

==================================================
PooledConnectionMBean.java
index 6fbf62f7fb..a6c59b9ad9 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java
@@ -32,7 +32,7 @@ public interface PoolConfiguration {
     /**
      * JMX prefix for interceptors that register themselves with JMX
      */
-    public static final String PKG_PREFIX = "org.apache.tomcat.jdbc.pool.interceptor.";
+    String PKG_PREFIX = "org.apache.tomcat.jdbc.pool.interceptor.";
 
     /**
      * Connections that have been abandoned (timed out) wont get closed and reported up unless the number of connections in use are
@@ -42,7 +42,7 @@ public interface PoolConfiguration {
      * closure as soon as removeAbandonedTimeout has been reached.
      * @param percentage a value between 0 and 100 to indicate when connections that have been abandoned/timed out are considered abandoned
      */
-    public void setAbandonWhenPercentageFull(int percentage);
+    void setAbandonWhenPercentageFull(int percentage);
 
     /**
      * Connections that have been abandoned (timed out) wont get closed and reported up unless the number of connections in use are
@@ -52,13 +52,13 @@ public interface PoolConfiguration {
      * closure as soon as removeAbandonedTimeout has been reached.
      * @return percentage - a value between 0 and 100 to indicate when connections that have been abandoned/timed out are considered abandoned
      */
-    public int getAbandonWhenPercentageFull();
+    int getAbandonWhenPercentageFull();
 
     /**
      * Returns <code>true</code> if a fair queue is being used by the connection pool
      * @return <code>true</code> if a fair waiting queue is being used
      */
-    public boolean isFairQueue();
+    boolean isFairQueue();
 
     /**
      * Set to true if you wish that calls to getConnection
@@ -68,7 +68,7 @@ public interface PoolConfiguration {
      * This flag is required when you want to use asynchronous connection retrieval.
      * @param fairQueue <code>true</code> to use a fair queue
      */
-    public void setFairQueue(boolean fairQueue);
+    void setFairQueue(boolean fairQueue);
 
     /**
      * Property not used. Access is always allowed.
@@ -76,13 +76,13 @@ public interface PoolConfiguration {
      * or call getConnection through reflection or cast the object as {@link javax.sql.PooledConnection}
      * @return <code>true</code>
      */
-    public boolean isAccessToUnderlyingConnectionAllowed();
+    boolean isAccessToUnderlyingConnectionAllowed();
 
     /**
      * No-op
      * @param accessToUnderlyingConnectionAllowed parameter ignored
      */
-    public void setAccessToUnderlyingConnectionAllowed(boolean accessToUnderlyingConnectionAllowed);
+    void setAccessToUnderlyingConnectionAllowed(boolean accessToUnderlyingConnectionAllowed);
 
     /**
      * The connection properties that will be sent to the JDBC driver when establishing new connections.
@@ -91,7 +91,7 @@ public interface PoolConfiguration {
      * The default value is null.
      * @return the connection properties
      */
-    public String getConnectionProperties();
+    String getConnectionProperties();
 
     /**
      * The properties that will be passed into {@link java.sql.Driver#connect(String, Properties)} method.
@@ -99,70 +99,70 @@ public interface PoolConfiguration {
      * @param connectionProperties properties - Format of the string is [propertyName=property;]*
      * Example: prop1=value1;prop2=value2
      */
-    public void setConnectionProperties(String connectionProperties);
+    void setConnectionProperties(String connectionProperties);
 
     /**
      * Returns the database properties that are passed into the {@link java.sql.Driver#connect(String, Properties)} method.
      * @return database properties that are passed into the {@link java.sql.Driver#connect(String, Properties)} method.
      */
-    public Properties getDbProperties();
+    Properties getDbProperties();
 
     /**
      * Overrides the database properties passed into the  {@link java.sql.Driver#connect(String, Properties)} method.
      * @param dbProperties The database properties
      */
-    public void setDbProperties(Properties dbProperties);
+    void setDbProperties(Properties dbProperties);
 
     /**
      * The default auto-commit state of connections created by this pool.
      * If not set (null), default is JDBC driver default (If set to null then the {@link java.sql.Connection#setAutoCommit(boolean)} method will not be called.)
      * @return the default auto commit setting, null is Driver default.
      */
-    public Boolean isDefaultAutoCommit();
+    Boolean isDefaultAutoCommit();
 
     /**
      * The default auto-commit state of connections created by this pool.
      * If not set (null), default is JDBC driver default (If set to null then the {@link java.sql.Connection#setAutoCommit(boolean)} method will not be called.)
      * @return the default auto commit setting, null is Driver default.
      */
-    public Boolean getDefaultAutoCommit();
+    Boolean getDefaultAutoCommit();
 
     /**
      * The default auto-commit state of connections created by this pool.
      * If not set (null), default is JDBC driver default (If set to null then the {@link java.sql.Connection#setAutoCommit(boolean)} method will not be called.)
      * @param defaultAutoCommit default auto commit setting, null is Driver default.
      */
-    public void setDefaultAutoCommit(Boolean defaultAutoCommit);
+    void setDefaultAutoCommit(Boolean defaultAutoCommit);
 
     /**
      * If non null, during connection creation the method {@link java.sql.Connection#setCatalog(String)} will be called with the set value.
      * @return the default catalog, null if not set and accepting the driver default.
      */
-    public String getDefaultCatalog();
+    String getDefaultCatalog();
 
     /**
      * If non null, during connection creation the method {@link java.sql.Connection#setCatalog(String)} will be called with the set value.
      * @param defaultCatalog null if not set and accepting the driver default.
      */
-    public void setDefaultCatalog(String defaultCatalog);
+    void setDefaultCatalog(String defaultCatalog);
 
     /**
      * If non null, during connection creation the method {@link java.sql.Connection#setReadOnly(boolean)} will be called with the set value.
      * @return null if not set and accepting the driver default otherwise the read only value
      */
-    public Boolean isDefaultReadOnly();
+    Boolean isDefaultReadOnly();
 
     /**
      * If non null, during connection creation the method {@link java.sql.Connection#setReadOnly(boolean)} will be called with the set value.
      * @return null if not set and accepting the driver default otherwise the read only value
      */
-    public Boolean getDefaultReadOnly();
+    Boolean getDefaultReadOnly();
 
     /**
      * If non null, during connection creation the method {@link java.sql.Connection#setReadOnly(boolean)} will be called with the set value.
      * @param defaultReadOnly null if not set and accepting the driver default.
      */
-    public void setDefaultReadOnly(Boolean defaultReadOnly);
+    void setDefaultReadOnly(Boolean defaultReadOnly);
 
 
     /**
@@ -170,7 +170,7 @@ public interface PoolConfiguration {
      * {@link java.sql.Connection#setTransactionIsolation(int)} will not be called during connection creation.
      * @return driver transaction isolation level, or -1 {@link DataSourceFactory#UNKNOWN_TRANSACTIONISOLATION} if not set.
      */
-    public int getDefaultTransactionIsolation();
+    int getDefaultTransactionIsolation();
 
     /**
      * If set to {@link DataSourceFactory#UNKNOWN_TRANSACTIONISOLATION} the method
@@ -181,26 +181,26 @@ public interface PoolConfiguration {
      * {@link java.sql.Connection#TRANSACTION_SERIALIZABLE} or {@link DataSourceFactory#UNKNOWN_TRANSACTIONISOLATION}
      * The last value will not be set on the connection.
      */
-    public void setDefaultTransactionIsolation(int defaultTransactionIsolation);
+    void setDefaultTransactionIsolation(int defaultTransactionIsolation);
 
     /**
      * The fully qualified Java class name of the JDBC driver to be used. The driver has to be accessible from the same classloader as tomcat-jdbc.jar
      * @return fully qualified JDBC driver name.
      */
-    public String getDriverClassName();
+    String getDriverClassName();
 
     /**
      * The fully qualified Java class name of the JDBC driver to be used. The driver has to be accessible from the same classloader as tomcat-jdbc.jar
      * @param driverClassName a fully qualified Java class name of a {@link java.sql.Driver} implementation.
      */
-    public void setDriverClassName(String driverClassName);
+    void setDriverClassName(String driverClassName);
 
     /**
      * Returns the number of connections that will be established when the connection pool is started.
      * Default value is 10
      * @return number of connections to be started when pool is started
      */
-    public int getInitialSize();
+    int getInitialSize();
 
     /**
      * Set the number of connections that will be established when the connection pool is started.
@@ -209,7 +209,7 @@ public interface PoolConfiguration {
      * @param initialSize the number of connections to be established.
      *
      */
-    public void setInitialSize(int initialSize);
+    void setInitialSize(int initialSize);
 
     /**
      * boolean flag to set if stack traces should be logged for application code which abandoned a Connection.
@@ -217,7 +217,7 @@ public interface PoolConfiguration {
      * The default value is false.
      * @return true if the connection pool logs stack traces when connections are borrowed from the pool.
      */
-    public boolean isLogAbandoned();
+    boolean isLogAbandoned();
 
     /**
      * boolean flag to set if stack traces should be logged for application code which abandoned a Connection.
@@ -225,19 +225,19 @@ public interface PoolConfiguration {
      * The default value is false.
      * @param logAbandoned set to true if stack traces should be recorded when {@link DataSource#getConnection()} is called.
      */
-    public void setLogAbandoned(boolean logAbandoned);
+    void setLogAbandoned(boolean logAbandoned);
 
     /**
      * The maximum number of active connections that can be allocated from this pool at the same time. The default value is 100
      * @return the maximum number of connections used by this pool
      */
-    public int getMaxActive();
+    int getMaxActive();
 
     /**
      * The maximum number of active connections that can be allocated from this pool at the same time. The default value is 100
      * @param maxActive hard limit for number of managed connections by this pool
      */
-    public void setMaxActive(int maxActive);
+    void setMaxActive(int maxActive);
 
 
     /**
@@ -247,7 +247,7 @@ public interface PoolConfiguration {
      * Default value is maxActive:100
      * @return the maximum number of idle connections.
      */
-    public int getMaxIdle();
+    int getMaxIdle();
 
     /**
      * The maximum number of connections that should be kept in the idle pool if {@link #isPoolSweeperEnabled()} returns false.
@@ -256,7 +256,7 @@ public interface PoolConfiguration {
      * Default value is maxActive:100
      * @param maxIdle the maximum size of the idle pool
      */
-    public void setMaxIdle(int maxIdle);
+    void setMaxIdle(int maxIdle);
 
     /**
      * The maximum number of milliseconds that the pool will wait (when there are no available connections and the
@@ -264,7 +264,7 @@ public interface PoolConfiguration {
      * before throwing an exception. Default value is 30000 (30 seconds)
      * @return the number of milliseconds to wait for a connection to become available if the pool is maxed out.
      */
-    public int getMaxWait();
+    int getMaxWait();
 
     /**
      * The maximum number of milliseconds that the pool will wait (when there are no available connections and the
@@ -272,21 +272,21 @@ public interface PoolConfiguration {
      * before throwing an exception. Default value is 30000 (30 seconds)
      * @param maxWait the maximum number of milliseconds to wait.
      */
-    public void setMaxWait(int maxWait);
+    void setMaxWait(int maxWait);
 
     /**
      * The minimum amount of time an object must sit idle in the pool before it is eligible for eviction.
      * The default value is 60000 (60 seconds).
      * @return the minimum amount of idle time in milliseconds before a connection is considered idle and eligible for eviction.
      */
-    public int getMinEvictableIdleTimeMillis();
+    int getMinEvictableIdleTimeMillis();
 
     /**
      * The minimum amount of time an object must sit idle in the pool before it is eligible for eviction.
      * The default value is 60000 (60 seconds).
      * @param minEvictableIdleTimeMillis the number of milliseconds a connection must be idle to be eligible for eviction.
      */
-    public void setMinEvictableIdleTimeMillis(int minEvictableIdleTimeMillis);
+    void setMinEvictableIdleTimeMillis(int minEvictableIdleTimeMillis);
 
     /**
      * The minimum number of established connections that should be kept in the pool at all times.
@@ -296,7 +296,7 @@ public interface PoolConfiguration {
      * can be between {@link #getMinIdle()} and somewhere between {@link #getMaxIdle()} and {@link #getMaxActive()}
      * @return the minimum number of idle or established connections
      */
-    public int getMinIdle();
+    int getMinIdle();
 
     /**
      * The minimum number of established connections that should be kept in the pool at all times.
@@ -307,37 +307,37 @@ public interface PoolConfiguration {
      *
      * @param minIdle the minimum number of idle or established connections
      */
-    public void setMinIdle(int minIdle);
+    void setMinIdle(int minIdle);
 
     /**
      * Returns the name of the connection pool. By default a JVM unique random name is assigned.
      * @return the name of the pool, should be unique in a JVM
      */
-    public String getName();
+    String getName();
 
     /**
      * Sets the name of the connection pool
      * @param name the name of the pool, should be unique in a runtime JVM
      */
-    public void setName(String name);
+    void setName(String name);
 
     /**
      * Property not used
      * @return unknown value
      */
-    public int getNumTestsPerEvictionRun();
+    int getNumTestsPerEvictionRun();
 
     /**
      * Property not used
      * @param numTestsPerEvictionRun parameter ignored.
      */
-    public void setNumTestsPerEvictionRun(int numTestsPerEvictionRun);
+    void setNumTestsPerEvictionRun(int numTestsPerEvictionRun);
 
     /**
      * Returns the password used when establishing connections to the database.
      * @return the password in string format
      */
-    public String getPassword();
+    String getPassword();
 
     /**
      * Sets the password to establish the connection with.
@@ -345,19 +345,19 @@ public interface PoolConfiguration {
      * @param password The password
      * @see #getDbProperties()
      */
-    public void setPassword(String password);
+    void setPassword(String password);
 
     /**
      * @see #getName()
      * @return the pool name
      */
-    public String getPoolName();
+    String getPoolName();
 
     /**
      * Returns the username used to establish the connection with
      * @return the username used to establish the connection with
      */
-    public String getUsername();
+    String getUsername();
 
     /**
      * Sets the username used to establish the connection with
@@ -365,7 +365,7 @@ public interface PoolConfiguration {
      * @param username The user name
      * @see #getDbProperties()
      */
-    public void setUsername(String username);
+    void setUsername(String username);
 
 
     /**
@@ -377,7 +377,7 @@ public interface PoolConfiguration {
      * See also {@link #isLogAbandoned()} The default value is false.
      * @return true if abandoned connections can be closed and expelled out of the pool
      */
-    public boolean isRemoveAbandoned();
+    boolean isRemoveAbandoned();
 
     /**
      * boolean flag to remove abandoned connections if they exceed the removeAbandonedTimeout.
@@ -388,7 +388,7 @@ public interface PoolConfiguration {
      * See also {@link #isLogAbandoned()} The default value is false.
      * @param removeAbandoned set to true if abandoned connections can be closed and expelled out of the pool
      */
-    public void setRemoveAbandoned(boolean removeAbandoned);
+    void setRemoveAbandoned(boolean removeAbandoned);
 
     /**
      * The time in seconds before a connection can be considered abandoned.
@@ -396,7 +396,7 @@ public interface PoolConfiguration {
      * @param removeAbandonedTimeout the time in seconds before a used connection can be considered abandoned
      * @see org.apache.tomcat.jdbc.pool.interceptor.ResetAbandonedTimer
      */
-    public void setRemoveAbandonedTimeout(int removeAbandonedTimeout);
+    void setRemoveAbandonedTimeout(int removeAbandonedTimeout);
 
     /**
      * The time in seconds before a connection can be considered abandoned.
@@ -404,7 +404,7 @@ public interface PoolConfiguration {
      * @see org.apache.tomcat.jdbc.pool.interceptor.ResetAbandonedTimer
      * @return the time in seconds before a used connection can be considered abandoned
      */
-    public int getRemoveAbandonedTimeout();
+    int getRemoveAbandonedTimeout();
 
     /**
      * The indication of whether objects will be validated before being borrowed from the pool.
@@ -415,7 +415,7 @@ public interface PoolConfiguration {
      * @return true if the connection is to be validated upon borrowing a connection from the pool
      * @see #getValidationInterval()
      */
-    public boolean isTestOnBorrow();
+    boolean isTestOnBorrow();
 
     /**
      * The indication of whether objects will be validated before being borrowed from the pool.
@@ -426,7 +426,7 @@ public interface PoolConfiguration {
      * @param testOnBorrow set to true if validation should take place before a connection is handed out to the application
      * @see #getValidationInterval()
      */
-    public void setTestOnBorrow(boolean testOnBorrow);
+    void setTestOnBorrow(boolean testOnBorrow);
 
     /**
      * The indication of whether objects will be validated after being returned to the pool.
@@ -437,7 +437,7 @@ public interface PoolConfiguration {
      * @return true if validation should take place after a connection is returned to the pool
      * @see #getValidationInterval()
      */
-    public boolean isTestOnReturn();
+    boolean isTestOnReturn();
 
     /**
      * The indication of whether objects will be validated after being returned to the pool.
@@ -448,7 +448,7 @@ public interface PoolConfiguration {
      * @param testOnReturn true if validation should take place after a connection is returned to the pool
      * @see #getValidationInterval()
      */
-    public void setTestOnReturn(boolean testOnReturn);
+    void setTestOnReturn(boolean testOnReturn);
 
 
     /**
@@ -456,14 +456,14 @@ public interface PoolConfiguration {
      * @return true if validation should take place during idle checks
      * @see #setTimeBetweenEvictionRunsMillis(int)
      */
-    public boolean isTestWhileIdle();
+    boolean isTestWhileIdle();
 
     /**
      * Set to true if query validation should take place while the connection is idle.
      * @param testWhileIdle true if validation should take place during idle checks
      * @see #setTimeBetweenEvictionRunsMillis(int)
      */
-    public void setTestWhileIdle(boolean testWhileIdle);
+    void setTestWhileIdle(boolean testWhileIdle);
 
     /**
      * The number of milliseconds to sleep between runs of the idle connection validation, abandoned cleaner
@@ -472,7 +472,7 @@ public interface PoolConfiguration {
      * The default value is 5000 (5 seconds)
      * @return the sleep time in between validations in milliseconds
      */
-    public int getTimeBetweenEvictionRunsMillis();
+    int getTimeBetweenEvictionRunsMillis();
 
     /**
      * The number of milliseconds to sleep between runs of the idle connection validation, abandoned cleaner
@@ -481,21 +481,21 @@ public interface PoolConfiguration {
      * The default value is 5000 (5 seconds)
      * @param timeBetweenEvictionRunsMillis the sleep time in between validations in milliseconds
      */
-    public void setTimeBetweenEvictionRunsMillis(int timeBetweenEvictionRunsMillis);
+    void setTimeBetweenEvictionRunsMillis(int timeBetweenEvictionRunsMillis);
 
     /**
      * The URL used to connect to the database
      * @return the configured URL for this connection pool
      * @see java.sql.Driver#connect(String, Properties)
      */
-    public String getUrl();
+    String getUrl();
 
     /**
      * Sets the URL used to connect to the database
      * @param url the configured URL for this connection pool
      * @see java.sql.Driver#connect(String, Properties)
      */
-    public void setUrl(String url);
+    void setUrl(String url);
 
     /**
      * The SQL query that will be used to validate connections from this
@@ -508,7 +508,7 @@ public interface PoolConfiguration {
      * SELECT 1(MS Sql Server)
      * @return the query used for validation or null if no validation is performed
      */
-    public String getValidationQuery();
+    String getValidationQuery();
 
     /**
      * The SQL query that will be used to validate connections from this
@@ -521,28 +521,28 @@ public interface PoolConfiguration {
      * SELECT 1(MS Sql Server)
      * @param validationQuery the query used for validation or null if no validation is performed
      */
-    public void setValidationQuery(String validationQuery);
+    void setValidationQuery(String validationQuery);
 
     /**
      * The timeout in seconds before a connection validation queries fail.
      * A value less than or equal to zero will disable this feature.  Defaults to -1.
      * @return the timeout value in seconds
      */
-    public int getValidationQueryTimeout();
+    int getValidationQueryTimeout();
 
     /**
      * The timeout in seconds before a connection validation queries fail.
      * A value less than or equal to zero will disable this feature.  Defaults to -1.
      * @param validationQueryTimeout The timeout value
      */
-    public void setValidationQueryTimeout(int validationQueryTimeout);
+    void setValidationQueryTimeout(int validationQueryTimeout);
 
     /**
      * Return the name of the optional validator class - may be null.
      *
      * @return the name of the optional validator class - may be null
      */
-    public String getValidatorClassName();
+    String getValidatorClassName();
 
     /**
      * Set the name for an optional validator class which will be used in place of test queries. If set to
@@ -550,12 +550,12 @@ public interface PoolConfiguration {
      *
      * @param className the name of the optional validator class
      */
-    public void setValidatorClassName(String className);
+    void setValidatorClassName(String className);
 
     /**
      * @return the optional validator object - may be null
      */
-    public Validator getValidator();
+    Validator getValidator();
 
     /**
      * Sets the validator object
@@ -563,7 +563,7 @@ public interface PoolConfiguration {
      * If this is null, remove the usage of the validator.
      * @param validator The validator object
      */
-    public void setValidator(Validator validator);
+    void setValidator(Validator validator);
 
     /**
      * avoid excess validation, only run validation at most at this frequency - time in milliseconds.
@@ -572,7 +572,7 @@ public interface PoolConfiguration {
      * The default value is 3000 (3 seconds).
      * @return the validation interval in milliseconds
      */
-    public long getValidationInterval();
+    long getValidationInterval();
 
     /**
      * avoid excess validation, only run validation at most at this frequency - time in milliseconds.
@@ -581,7 +581,7 @@ public interface PoolConfiguration {
      * The default value is 3000 (3 seconds).
      * @param validationInterval the validation interval in milliseconds
      */
-    public void setValidationInterval(long validationInterval);
+    void setValidationInterval(long validationInterval);
 
     /**
      * A custom query to be run when a connection is first created. The default value is null.
@@ -589,7 +589,7 @@ public interface PoolConfiguration {
      * If this value is non null, it will replace the validation query during connection creation.
      * @return the init SQL used to run against the DB or null if not set
      */
-    public String getInitSQL();
+    String getInitSQL();
 
     /**
      * A custom query to be run when a connection is first created. The default value is null.
@@ -597,14 +597,14 @@ public interface PoolConfiguration {
      * If this value is non null, it will replace the validation query during connection creation.
      * @param initSQL the init SQL used to run against the DB or null if no query should be executed
      */
-    public void setInitSQL(String initSQL);
+    void setInitSQL(String initSQL);
 
     /**
      * Returns true if we should run the validation query when connecting to the database for the first time on a connection.
      * Normally this is always set to false, unless one wants to use the validationQuery as an init query.
      * @return true if we should run the validation query upon connect
      */
-    public boolean isTestOnConnect();
+    boolean isTestOnConnect();
 
     /**
      * Set to true if we should run the validation query when connecting to the database for the first time on a connection.
@@ -612,7 +612,7 @@ public interface PoolConfiguration {
      * Setting an {@link #setInitSQL(String)} will override this setting, as the init SQL will be used instead of the validation query
      * @param testOnConnect set to true if we should run the validation query upon connect
      */
-    public void setTestOnConnect(boolean testOnConnect);
+    void setTestOnConnect(boolean testOnConnect);
 
     /**
      * A semicolon separated list of classnames extending {@link org.apache.tomcat.jdbc.pool.JdbcInterceptor} class.
@@ -626,7 +626,7 @@ public interface PoolConfiguration {
      * @return the interceptors that are used for connections.
      * Example format: 'ConnectionState(useEquals=true,fast=yes);ResetAbandonedTimer'
      */
-    public String getJdbcInterceptors();
+    String getJdbcInterceptors();
 
     /**
      * A semicolon separated list of classnames extending {@link org.apache.tomcat.jdbc.pool.JdbcInterceptor} class.
@@ -640,13 +640,13 @@ public interface PoolConfiguration {
      * @param jdbcInterceptors the interceptors that are used for connections.
      * Example format: 'ConnectionState(useEquals=true,fast=yes);ResetAbandonedTimer'
      */
-    public void setJdbcInterceptors(String jdbcInterceptors);
+    void setJdbcInterceptors(String jdbcInterceptors);
 
     /**
      * Returns the {@link #getJdbcInterceptors()} as an array of objects with properties and the classes.
      * @return an array of interceptors that have been configured
      */
-    public InterceptorDefinition[] getJdbcInterceptorsAsArray();
+    InterceptorDefinition[] getJdbcInterceptorsAsArray();
 
 
     /**
@@ -655,7 +655,7 @@ public interface PoolConfiguration {
      * The ConnectionPool object doesn't register itself, as there is no way to keep a static non changing ObjectName across JVM restarts.
      * @return true if the mbean object will be created upon startup.
      */
-    public boolean isJmxEnabled();
+    boolean isJmxEnabled();
 
     /**
      * If set to true, the connection pool creates a {@link org.apache.tomcat.jdbc.pool.jmx.ConnectionPoolMBean} object
@@ -663,7 +663,7 @@ public interface PoolConfiguration {
      * The ConnectionPool object doesn't register itself, as there is no way to keep a static non changing ObjectName across JVM restarts.
      * @param jmxEnabled set to to if the mbean object should be created upon startup.
      */
-    public void setJmxEnabled(boolean jmxEnabled);
+    void setJmxEnabled(boolean jmxEnabled);
 
     /**
      * Returns true if the pool sweeper is enabled for the connection pool.
@@ -677,7 +677,7 @@ public interface PoolConfiguration {
      *
      * @return true if a background thread is or will be enabled for this pool
      */
-    public boolean isPoolSweeperEnabled();
+    boolean isPoolSweeperEnabled();
 
     /**
      * Set to true if you wish the <code>ProxyConnection</code> class to use <code>String.equals</code> instead of
@@ -686,7 +686,7 @@ public interface PoolConfiguration {
      * The default value is <code>false</code>.
      * @return true if pool uses {@link String#equals(Object)} instead of == when comparing method names on {@link java.sql.Connection} methods
      */
-    public boolean isUseEquals();
+    boolean isUseEquals();
 
     /**
      * Set to true if you wish the <code>ProxyConnection</code> class to use <code>String.equals</code> instead of
@@ -696,7 +696,7 @@ public interface PoolConfiguration {
      * @param useEquals set to true if the pool should use {@link String#equals(Object)} instead of ==
      * when comparing method names on {@link java.sql.Connection} methods
      */
-    public void setUseEquals(boolean useEquals);
+    void setUseEquals(boolean useEquals);
 
     /**
      * Time in milliseconds to keep this connection before reconnecting.
@@ -710,7 +710,7 @@ public interface PoolConfiguration {
      * will have a finite life span.
      * @return the time in milliseconds a connection will be open for when used
      */
-    public long getMaxAge();
+    long getMaxAge();
 
     /**
      * Time in milliseconds to keep this connection before reconnecting.
@@ -724,7 +724,7 @@ public interface PoolConfiguration {
      * will have a finite life span.
      * @param maxAge the time in milliseconds a connection will be open for when used
      */
-    public void setMaxAge(long maxAge);
+    void setMaxAge(long maxAge);
 
     /**
      * Return true if a lock should be used when operations are performed on the connection object.
@@ -732,7 +732,7 @@ public interface PoolConfiguration {
      * such as JMX clients. If the pool sweeper is enabled, then the lock will automatically be used regardless of this setting.
      * @return true if a lock is used.
      */
-    public boolean getUseLock();
+    boolean getUseLock();
 
     /**
      * Set to true if a lock should be used when operations are performed on the connection object.
@@ -740,7 +740,7 @@ public interface PoolConfiguration {
      * such as JMX clients. If the pool sweeper is enabled, then the lock will automatically be used regardless of this setting.
      * @param useLock set to true if a lock should be used on connection operations
      */
-    public void setUseLock(boolean useLock);
+    void setUseLock(boolean useLock);
 
     /**
      * Similar to {@link #setRemoveAbandonedTimeout(int)} but instead of treating the connection
@@ -751,14 +751,14 @@ public interface PoolConfiguration {
      * logged and a JMX notification gets sent once.
      * @param seconds - the amount of time in seconds that has to pass before a connection is marked suspect.
      */
-    public void setSuspectTimeout(int seconds);
+    void setSuspectTimeout(int seconds);
 
     /**
      * Returns the time in seconds to pass before a connection is marked an abandoned suspect.
      * Any value lesser than or equal to 0 means the check is disabled.
      * @return Returns the time in seconds to pass before a connection is marked an abandoned suspect.
      */
-    public int getSuspectTimeout();
+    int getSuspectTimeout();
 
     /**
      * Injects a datasource that will be used to retrieve/create connections.
@@ -771,14 +771,14 @@ public interface PoolConfiguration {
      * will be invoked.
      * @param ds the {@link javax.sql.DataSource} to be used for creating connections to be pooled.
      */
-    public void setDataSource(Object ds);
+    void setDataSource(Object ds);
 
     /**
      * Returns a datasource, if one exists that is being used to create connections.
      * This method will return null if the pool is using a {@link java.sql.Driver}
      * @return the {@link javax.sql.DataSource} to be used for creating connections to be pooled or null if a Driver is used.
      */
-    public Object getDataSource();
+    Object getDataSource();
 
     /**
      * Configure the connection pool to use a DataSource according to {@link PoolConfiguration#setDataSource(Object)}
@@ -786,13 +786,13 @@ public interface PoolConfiguration {
      * After a successful JNDI look, the {@link PoolConfiguration#getDataSource()} will not return null.
      * @param jndiDS -the JNDI string @TODO specify the rules here.
      */
-    public void setDataSourceJNDI(String jndiDS);
+    void setDataSourceJNDI(String jndiDS);
 
     /**
      * Returns the JNDI string configured for data source usage.
      * @return the JNDI string or null if not set
      */
-    public String getDataSourceJNDI();
+    String getDataSourceJNDI();
 
     /**
      * Returns true if the call {@link DataSource#getConnection(String, String) getConnection(username,password)} is
@@ -800,7 +800,7 @@ public interface PoolConfiguration {
      * There is a performance impact turning this option on.
      * @return true if {@link DataSource#getConnection(String, String) getConnection(username,password)} is honored, false if it is ignored.
      */
-    public boolean isAlternateUsernameAllowed();
+    boolean isAlternateUsernameAllowed();
 
     /**
      * Set to true if the call {@link DataSource#getConnection(String, String) getConnection(username,password)} is
@@ -809,7 +809,7 @@ public interface PoolConfiguration {
      * @param alternateUsernameAllowed - set true if {@link DataSource#getConnection(String, String) getConnection(username,password)} is honored,
      * false if it is to be ignored.
      */
-    public void setAlternateUsernameAllowed(boolean alternateUsernameAllowed);
+    void setAlternateUsernameAllowed(boolean alternateUsernameAllowed);
     /**
      * Set to true if you want the connection pool to commit any pending transaction when a connection is returned.
      * The default value is false, as this could result in committing data.
@@ -817,13 +817,13 @@ public interface PoolConfiguration {
      * @param commitOnReturn set to true if the pool should call {@link java.sql.Connection#commit()} when a connection is returned to the pool.
      * Default is false
      */
-    public void setCommitOnReturn(boolean commitOnReturn);
+    void setCommitOnReturn(boolean commitOnReturn);
 
     /**
      * @see PoolConfiguration#setCommitOnReturn(boolean)
      * @return <code>true</code> if the pool should commit when a connection is returned to it
      */
-    public boolean getCommitOnReturn();
+    boolean getCommitOnReturn();
 
     /**
      * Set to true if you want the connection pool to rollback any pending transaction when a connection is returned.
@@ -832,13 +832,13 @@ public interface PoolConfiguration {
      * @param rollbackOnReturn set to true if the pool should call {@link java.sql.Connection#rollback()} when a connection is returned to the pool.
      * Default is false
      */
-    public void setRollbackOnReturn(boolean rollbackOnReturn);
+    void setRollbackOnReturn(boolean rollbackOnReturn);
 
     /**
      * @see PoolConfiguration#setRollbackOnReturn(boolean)
      * @return <code>true</code> if the pool should rollback when a connection is returned to it
      */
-    public boolean getRollbackOnReturn();
+    boolean getRollbackOnReturn();
 
     /**
      * If set to <code>true</code>, the connection will be wrapped with facade that will disallow the connection to be used after
@@ -846,25 +846,25 @@ public interface PoolConfiguration {
      * {@link java.sql.Connection#close()} and {@link java.sql.Connection#isClosed()} will throw an exception.
      * @param useDisposableConnectionFacade <code>true</code> to use a facade
      */
-    public void setUseDisposableConnectionFacade(boolean useDisposableConnectionFacade);
+    void setUseDisposableConnectionFacade(boolean useDisposableConnectionFacade);
     /**
      * Returns <code>true</code> if this connection pool is configured to use a connection facade to prevent re-use of connection after
      * {@link java.sql.Connection#close()} has been invoked
      * @return <code>true</code> if {@link java.sql.Connection#close()} has been invoked.
      */
-    public boolean getUseDisposableConnectionFacade();
+    boolean getUseDisposableConnectionFacade();
 
     /**
      * Set to true if you wish that errors from validation should be logged as error messages.
      * @param logValidationErrors set to true to log validation errors
      */
-    public void setLogValidationErrors(boolean logValidationErrors);
+    void setLogValidationErrors(boolean logValidationErrors);
 
     /**
      * Returns true if errors that happen during validation will be logged
      * @return true if errors that happen during validation will be logged
      */
-    public boolean getLogValidationErrors();
+    boolean getLogValidationErrors();
 
     /**
      * Returns true if the pool is configured to propagate interrupt state of a thread.
@@ -872,7 +872,7 @@ public interface PoolConfiguration {
      * will clear the interrupt flag and throw a {@link PoolExhaustedException}
      * @return true if the pool is configured to propagate and not clear the thread interrupt state
      */
-    public boolean getPropagateInterruptState();
+    boolean getPropagateInterruptState();
 
     /**
      * Configure the pool to propagate interrupt state for interrupted threads waiting for a connection
@@ -881,27 +881,27 @@ public interface PoolConfiguration {
      * If set to true, this behavior will change, while the {@link PoolExhaustedException} is still thrown, the threads interrupted state is still set.
      * @param propagateInterruptState - set to true to not clear, but propagate, a threads interrupted state.
      */
-    public void setPropagateInterruptState(boolean propagateInterruptState);
+    void setPropagateInterruptState(boolean propagateInterruptState);
 
     /**
      * Set to true if you want to ignore error of connection creation while initializing the pool.
      * Set to false if you want to fail the initialization of the pool by throwing exception.
      * @param ignoreExceptionOnPreLoad set to true if you want to ignore error of connection creation while initializing the pool.
      */
-    public void setIgnoreExceptionOnPreLoad(boolean ignoreExceptionOnPreLoad);
+    void setIgnoreExceptionOnPreLoad(boolean ignoreExceptionOnPreLoad);
 
     /**
      * @return <code>true</code> to ignore exceptions
      * @see PoolConfiguration#setIgnoreExceptionOnPreLoad(boolean)
      */
-    public boolean isIgnoreExceptionOnPreLoad();
+    boolean isIgnoreExceptionOnPreLoad();
 
     /**
      * Set this to true if you wish to wrap statements in order to enable equals() and hashCode()
      * methods to be called on the closed statements if any statement proxy is set.
      * @param useStatementFacade set to <code>true</code> to wrap statements
      */
-    public void setUseStatementFacade(boolean useStatementFacade);
+    void setUseStatementFacade(boolean useStatementFacade);
 
     /**
      * Returns <code>true</code> if this connection pool is configured to wrap statements in order
@@ -909,5 +909,5 @@ public interface PoolConfiguration {
      * statement proxy is set.
      * @return <code>true</code> if the statements are wrapped
      */
-    public boolean getUseStatementFacade();
+    boolean getUseStatementFacade();
 }

==================================================
Validator.java
index 5329a7e397..16efe7e302 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnectionMBean.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnectionMBean.java
@@ -20,23 +20,23 @@ import java.sql.SQLException;
 
 public interface PooledConnectionMBean {
     // PooledConnection
-    public long getConnectionVersion();
-    public boolean isInitialized();
-    public boolean isMaxAgeExpired();
-    public boolean isSuspect();
-    public long getTimestamp();
-    public boolean isDiscarded();
-    public long getLastValidated();
-    public long getLastConnected();
-    public boolean isReleased();
+    long getConnectionVersion();
+    boolean isInitialized();
+    boolean isMaxAgeExpired();
+    boolean isSuspect();
+    long getTimestamp();
+    boolean isDiscarded();
+    long getLastValidated();
+    long getLastConnected();
+    boolean isReleased();
 
     // java.sql.Connection
-    public void clearWarnings();
-    public boolean isClosed() throws SQLException;
-    public boolean getAutoCommit() throws SQLException;
-    public String getCatalog() throws SQLException;
-    public int getHoldability() throws SQLException;
-    public boolean isReadOnly() throws SQLException;
-    public String getSchema() throws SQLException;
-    public int getTransactionIsolation() throws SQLException;
+    void clearWarnings();
+    boolean isClosed() throws SQLException;
+    boolean getAutoCommit() throws SQLException;
+    String getCatalog() throws SQLException;
+    int getHoldability() throws SQLException;
+    boolean isReadOnly() throws SQLException;
+    String getSchema() throws SQLException;
+    int getTransactionIsolation() throws SQLException;
 }

==================================================
ResetAbandonedTimerMBean.java
index dd7a77877d..76fc9cb3d6 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/Validator.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/Validator.java
@@ -33,5 +33,5 @@ public interface Validator {
      *   {@link PooledConnection#VALIDATE_RETURN}
      * @return true if the connection is valid
      */
-    public boolean validate(Connection connection, int validateAction);
+    boolean validate(Connection connection, int validateAction);
 }

==================================================
SlowQueryReportJmxMBean.java
index c3ea950484..bbd2845157 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/ResetAbandonedTimerMBean.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/ResetAbandonedTimerMBean.java
@@ -17,5 +17,5 @@
 package org.apache.tomcat.jdbc.pool.interceptor;
 
 public interface ResetAbandonedTimerMBean {
-    public boolean resetTimer();
+    boolean resetTimer();
 }

==================================================
StatementCacheMBean.java
index 908eb1c531..7ae501b098 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReportJmxMBean.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReportJmxMBean.java
@@ -19,5 +19,5 @@ import javax.management.openmbean.CompositeData;
 import javax.management.openmbean.OpenDataException;
 
 public interface SlowQueryReportJmxMBean {
-    public CompositeData[] getSlowQueriesCD() throws OpenDataException;
+    CompositeData[] getSlowQueriesCD() throws OpenDataException;
 }

==================================================
ConnectionPoolMBean.java
index ec7e16ddc4..f39904ed1e 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCacheMBean.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCacheMBean.java
@@ -19,9 +19,9 @@ package org.apache.tomcat.jdbc.pool.interceptor;
 import java.util.concurrent.atomic.AtomicInteger;
 
 public interface StatementCacheMBean {
-    public boolean isCachePrepared();
-    public boolean isCacheCallable();
-    public int getMaxCacheSize();
-    public AtomicInteger getCacheSize();
-    public int getCacheSizePerConnection();
+    boolean isCachePrepared();
+    boolean isCacheCallable();
+    int getMaxCacheSize();
+    AtomicInteger getCacheSize();
+    int getCacheSizePerConnection();
 }

==================================================
StatementCounterInterceptor.java
index 0f4edd7856..8117649240 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPoolMBean.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPoolMBean.java
@@ -23,40 +23,40 @@ public interface ConnectionPoolMBean extends PoolConfiguration  {
     //       POOL STATS
     //=================================================================
 
-    public int getSize();
+    int getSize();
 
-    public int getIdle();
+    int getIdle();
 
-    public int getActive();
+    int getActive();
 
-    public int getNumIdle();
+    int getNumIdle();
 
-    public int getNumActive();
+    int getNumActive();
 
-    public int getWaitCount();
+    int getWaitCount();
 
-    public long getBorrowedCount();
+    long getBorrowedCount();
 
-    public long getReturnedCount();
+    long getReturnedCount();
 
-    public long getCreatedCount();
+    long getCreatedCount();
 
-    public long getReleasedCount();
+    long getReleasedCount();
 
-    public long getReconnectedCount();
+    long getReconnectedCount();
 
-    public long getRemoveAbandonedCount();
+    long getRemoveAbandonedCount();
 
-    public long getReleasedIdleCount();
+    long getReleasedIdleCount();
 
     //=================================================================
     //       POOL OPERATIONS
     //=================================================================
-    public void checkIdle();
+    void checkIdle();
 
-    public void checkAbandoned();
+    void checkAbandoned();
 
-    public void testIdle();
+    void testIdle();
 
     /**
      * Purges all connections in the pool.
@@ -65,19 +65,19 @@ public interface ConnectionPoolMBean extends PoolConfiguration  {
      * purges connections that are idle and in the pool
      * To only purge used/active connections see {@link #purgeOnReturn()}
      */
-    public void purge();
+    void purge();
 
     /**
      * Purges connections when they are returned from the pool.
      * This call does not purge idle connections until they are used.
      * To purge idle connections see {@link #purge()}
      */
-    public void purgeOnReturn();
+    void purgeOnReturn();
 
     /**
      * reset the statistics of this pool.
      */
-    public void resetStats();
+    void resetStats();
 
     //=================================================================
     //       POOL NOTIFICATIONS

==================================================
TestValidation.java
index c6a0231d15..c0d39a8a07 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCounterInterceptor.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCounterInterceptor.java
@@ -52,7 +52,7 @@ public class StatementCounterInterceptor extends StatementDecoratorInterceptor {
 
     private class StatementProxy extends
             StatementDecoratorInterceptor.StatementProxy<Statement> {
-        public StatementProxy(Statement delegate, String sql) {
+        StatementProxy(Statement delegate, String sql) {
             super(delegate, sql);
         }
 

==================================================
TestResourceBundleELResolver.java
index 80589e1168..cdffd62766 100644
--- a/res/checkstyle/checkstyle.xml
+++ b/res/checkstyle/checkstyle.xml
@@ -115,9 +115,7 @@
 
     <!-- Modifiers -->
     <module name="ModifierOrder"/>
-    <!-- ~1750 errors
     <module name="RedundantModifier"/>
-    -->
 
     <!-- Whitespace -->
     <module name="GenericWhitespace"/>

==================================================
HttpServletDoHeadBaseTest.java
index 3732acb751..3c5381bc67 100644
--- a/test/jakarta/el/TestResourceBundleELResolver.java
+++ b/test/jakarta/el/TestResourceBundleELResolver.java
@@ -225,11 +225,11 @@ public class TestResourceBundleELResolver {
 
     private static class TesterResourceBundle extends ListResourceBundle {
 
-        public TesterResourceBundle() {
+        TesterResourceBundle() {
             this(new Object[][] { { "key1", "value1" }, { "key2", "value2" } });
         }
 
-        public TesterResourceBundle(Object[][] contents) {
+        TesterResourceBundle(Object[][] contents) {
             this.contents = contents;
         }
 

==================================================
TestHttpServlet.java
index a8842431f3..d34cafa0db 100644
--- a/test/jakarta/servlet/http/HttpServletDoHeadBaseTest.java
+++ b/test/jakarta/servlet/http/HttpServletDoHeadBaseTest.java
@@ -225,7 +225,7 @@ public class HttpServletDoHeadBaseTest extends Http2TestBase {
         private final int validWriteCount;
         private final boolean explicitFlush;
 
-        public HeadTestServlet(int bufferSize, boolean useWriter, int invalidWriteCount, ResetType resetType,
+        HeadTestServlet(int bufferSize, boolean useWriter, int invalidWriteCount, ResetType resetType,
                 int validWriteCount, boolean explicitFlush) {
             this.bufferSize = bufferSize;
             this.useWriter = useWriter;
@@ -383,7 +383,7 @@ public class HttpServletDoHeadBaseTest extends Http2TestBase {
     }
 
 
-    static enum ResetType {
+    enum ResetType {
         NONE,
         BUFFER,
         FULL

==================================================
TestHttpServletPerformance.java
index 03a78c46e3..6c3f91b42c 100644
--- a/test/jakarta/servlet/http/TestHttpServlet.java
+++ b/test/jakarta/servlet/http/TestHttpServlet.java
@@ -371,7 +371,7 @@ public class TestHttpServlet extends TomcatBaseTest {
 
     private class Client extends SimpleHttpClient {
 
-        public Client(String request, boolean isHttp09) {
+        Client(String request, boolean isHttp09) {
             setRequest(new String[] {request});
             setUseHttp09(isHttp09);
         }
@@ -465,7 +465,7 @@ public class TestHttpServlet extends TomcatBaseTest {
 
         private final boolean useWriter;
 
-        public ResetBufferServlet(boolean useWriter) {
+        ResetBufferServlet(boolean useWriter) {
             this.useWriter = useWriter;
         }
 
@@ -496,7 +496,7 @@ public class TestHttpServlet extends TomcatBaseTest {
 
         private final boolean useWriter;
 
-        public ResetServlet(boolean useWriter) {
+        ResetServlet(boolean useWriter) {
             this.useWriter = useWriter;
         }
 
@@ -531,7 +531,7 @@ public class TestHttpServlet extends TomcatBaseTest {
 
         private final int bytesToWrite;
 
-        public NonBlockingWriteServlet(int bytesToWrite) {
+        NonBlockingWriteServlet(int bytesToWrite) {
             this.bytesToWrite = bytesToWrite;
         }
 
@@ -550,7 +550,7 @@ public class TestHttpServlet extends TomcatBaseTest {
             private final ServletOutputStream sos;
             private int bytesToWrite;
 
-            public NonBlockingWriteListener(AsyncContext ac, int bytesToWrite) throws IOException {
+            NonBlockingWriteListener(AsyncContext ac, int bytesToWrite) throws IOException {
                 this.ac = ac;
                 this.sos = ac.getResponse().getOutputStream();
                 this.bytesToWrite = bytesToWrite;

==================================================
TestCallbackHandlerImpl.java
index 0a8de69fb5..98526de898 100644
--- a/test/jakarta/servlet/http/TestHttpServletPerformance.java
+++ b/test/jakarta/servlet/http/TestHttpServletPerformance.java
@@ -57,7 +57,7 @@ public class TestHttpServletPerformance {
 
         private final boolean allowTrace;
 
-        public TesterRequest(boolean allowTrace) {
+        TesterRequest(boolean allowTrace) {
             super(null);
             this.allowTrace = allowTrace;
         }

==================================================
TestJaspicCallbackHandlerInAuthenticator.java
new file mode 100644
index 0000000000..44eb0598f0
--- /dev/null
+++ b/test/org/apache/catalina/authenticator/TestCallbackHandlerImpl.java
@@ -0,0 +1,36 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.catalina.authenticator;
+
+import java.io.IOException;
+
+import javax.security.auth.callback.Callback;
+import javax.security.auth.callback.CallbackHandler;
+import javax.security.auth.callback.UnsupportedCallbackException;
+
+public class TestCallbackHandlerImpl implements CallbackHandler {
+
+    public TestCallbackHandlerImpl() {
+        // Default constructor required by reflection
+    }
+
+
+    @Override
+    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
+        // don't have to do anything; needed only for instantiation
+    }
+}
\ No newline at end of file

==================================================
TesterDigestAuthenticatorPerformance.java
index 32d1475254..1f05720769 100644
--- a/test/org/apache/catalina/authenticator/TestJaspicCallbackHandlerInAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestJaspicCallbackHandlerInAuthenticator.java
@@ -27,7 +27,6 @@ import java.util.Set;
 import javax.security.auth.Subject;
 import javax.security.auth.callback.Callback;
 import javax.security.auth.callback.CallbackHandler;
-import javax.security.auth.callback.UnsupportedCallbackException;
 
 import jakarta.security.auth.message.callback.CallerPrincipalCallback;
 import jakarta.security.auth.message.callback.GroupPrincipalCallback;
@@ -185,18 +184,4 @@ public class TestJaspicCallbackHandlerInAuthenticator {
             return new GenericPrincipal(username);
         }
     }
-}
-
-
-class TestCallbackHandlerImpl implements CallbackHandler {
-
-    public TestCallbackHandlerImpl() {
-        // Default constructor required by reflection
-    }
-
-
-    @Override
-    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
-        // don't have to do anything; needed only for instantiation
-    }
 }
\ No newline at end of file

==================================================
TestAuthConfigFactoryImpl.java
index 60891cdbd3..7039263467 100644
--- a/test/org/apache/catalina/authenticator/TesterDigestAuthenticatorPerformance.java
+++ b/test/org/apache/catalina/authenticator/TesterDigestAuthenticatorPerformance.java
@@ -168,7 +168,7 @@ public class TesterDigestAuthenticatorPerformance {
 
 
         // All init code should be in here. run() needs to be quick
-        public TesterRunnable(DigestAuthenticator authenticator,
+        TesterRunnable(DigestAuthenticator authenticator,
                 String nonce, int requestCount) throws Exception {
             this.authenticator = authenticator;
             this.nonce = nonce;
@@ -249,7 +249,7 @@ public class TesterDigestAuthenticatorPerformance {
 
         private String authHeader = null;
 
-        public TesterDigestRequest() {
+        TesterDigestRequest() {
             super(null);
         }
 

==================================================
TestCoyoteAdapterCanonicalization.java
index 905740113f..9f4fe6b5de 100644
--- a/test/org/apache/catalina/authenticator/jaspic/TestAuthConfigFactoryImpl.java
+++ b/test/org/apache/catalina/authenticator/jaspic/TestAuthConfigFactoryImpl.java
@@ -405,7 +405,7 @@ public class TestAuthConfigFactoryImpl {
         private String layerNotified;
         private String appContextNotified;
 
-        public SimpleRegistrationListener(String layer, String appContext) {
+        SimpleRegistrationListener(String layer, String appContext) {
             this.layer = layer;
             this.appContext = appContext;
         }

==================================================
TestCoyoteAdapterRequestFuzzing.java
index d633b2e964..7d0e71d831 100644
--- a/test/org/apache/catalina/connector/TestCoyoteAdapterCanonicalization.java
+++ b/test/org/apache/catalina/connector/TestCoyoteAdapterCanonicalization.java
@@ -220,7 +220,7 @@ public class TestCoyoteAdapterCanonicalization extends TomcatBaseTest {
 
         private final String expected;
 
-        public Client(int port, String expected) {
+        Client(int port, String expected) {
             this.expected = expected;
             setPort(port);
             setRequestPause(0);

==================================================
TestCoyoteOutputStream.java
index 12febfe978..f100cf8fe8 100644
--- a/test/org/apache/catalina/connector/TestCoyoteAdapterRequestFuzzing.java
+++ b/test/org/apache/catalina/connector/TestCoyoteAdapterRequestFuzzing.java
@@ -139,7 +139,7 @@ public class TestCoyoteAdapterRequestFuzzing extends TomcatBaseTest {
 
     private static final class Client extends SimpleHttpClient {
 
-        public Client(int port) {
+        Client(int port) {
             setPort(port);
             setRequestPause(0);
         }

==================================================
TestOutputBuffer.java
index 7d7d1d1dc5..d808db76f7 100644
--- a/test/org/apache/catalina/connector/TestCoyoteOutputStream.java
+++ b/test/org/apache/catalina/connector/TestCoyoteOutputStream.java
@@ -166,7 +166,7 @@ public class TestCoyoteOutputStream extends TomcatBaseTest {
         private final AtomicInteger asyncWriteCount = new AtomicInteger(0);
         private final boolean useContainerThreadToSetListener;
 
-        public NonBlockingWriteServlet(int asyncWriteTarget,
+        NonBlockingWriteServlet(int asyncWriteTarget,
                 boolean useContainerThreadToSetListener) {
             this.asyncWriteTarget = asyncWriteTarget;
             this.useContainerThreadToSetListener = useContainerThreadToSetListener;
@@ -213,7 +213,7 @@ public class TestCoyoteOutputStream extends TomcatBaseTest {
             private final AsyncContext asyncCtxt;
             private final ServletOutputStream sos;
 
-            public AsyncTask(AsyncContext asyncCtxt, ServletOutputStream sos) {
+            AsyncTask(AsyncContext asyncCtxt, ServletOutputStream sos) {
                 this.asyncCtxt = asyncCtxt;
                 this.sos = sos;
             }
@@ -229,7 +229,7 @@ public class TestCoyoteOutputStream extends TomcatBaseTest {
             private final AsyncContext asyncCtxt;
             private final ServletOutputStream sos;
 
-            public MyWriteListener(AsyncContext asyncCtxt,
+            MyWriteListener(AsyncContext asyncCtxt,
                     ServletOutputStream sos) {
                 this.asyncCtxt = asyncCtxt;
                 this.sos = sos;
@@ -255,7 +255,7 @@ public class TestCoyoteOutputStream extends TomcatBaseTest {
         private final int start;
         private final int len;
 
-        public BlockingWriteServlet(int start, int len) {
+        BlockingWriteServlet(int start, int len) {
             this.start = start;
             this.len = len;
         }

==================================================
TestRequest.java
index 1a7029d5f4..eb1f3de6e2 100644
--- a/test/org/apache/catalina/connector/TestOutputBuffer.java
+++ b/test/org/apache/catalina/connector/TestOutputBuffer.java
@@ -105,7 +105,7 @@ public class TestOutputBuffer extends TomcatBaseTest{
         private final String writeString;
         private final int writeCount;
 
-        public WritingServlet(int writeLength) {
+        WritingServlet(int writeLength) {
             StringBuilder sb = new StringBuilder();
             for (int i = 0; i < writeLength; i++) {
                 sb.append('x');
@@ -193,7 +193,7 @@ public class TestOutputBuffer extends TomcatBaseTest{
 
         private final char[] chars;
 
-        public Utf8WriteChars(String data) {
+        Utf8WriteChars(String data) {
             chars = data.toCharArray();
         }
 

==================================================
TestSendFile.java
index 15c7b76e60..54112be123 100644
--- a/test/org/apache/catalina/connector/TestRequest.java
+++ b/test/org/apache/catalina/connector/TestRequest.java
@@ -162,7 +162,7 @@ public class TestRequest extends TomcatBaseTest {
 
         private boolean init;
 
-        public Bug37794Client(boolean createFilter) {
+        Bug37794Client(boolean createFilter) {
             this.createFilter = createFilter;
         }
 

==================================================
TestApplicationContext.java
index a5e2fdb73c..ead45b43da 100644
--- a/test/org/apache/catalina/connector/TestSendFile.java
+++ b/test/org/apache/catalina/connector/TestSendFile.java
@@ -115,7 +115,7 @@ public class TestSendFile extends TomcatBaseTest {
 
         private final File f;
 
-        public WritingServlet(File f) {
+        WritingServlet(File f) {
             this.f = f;
         }
 

==================================================
TestApplicationContextGetRequestDispatcher.java
index 14e259548a..79349328e7 100644
--- a/test/org/apache/catalina/core/TestApplicationContext.java
+++ b/test/org/apache/catalina/core/TestApplicationContext.java
@@ -235,7 +235,7 @@ public class TestApplicationContext extends TomcatBaseTest {
 
         private final String id;
 
-        public SetIdListener(String id) {
+        SetIdListener(String id) {
             this.id = id;
         }
 
@@ -290,7 +290,7 @@ public class TestApplicationContext extends TomcatBaseTest {
         private final String targetContextPath;
         private final String targetPath;
 
-        public SetAttributeServlet(String targetPath, String targetContextPath) {
+        SetAttributeServlet(String targetPath, String targetContextPath) {
             this.targetPath = targetPath;
             this.targetContextPath = targetContextPath;
         }

==================================================
TestApplicationHttpRequest.java
index b47578655b..ff19ec187c 100644
--- a/test/org/apache/catalina/core/TestApplicationContextGetRequestDispatcher.java
+++ b/test/org/apache/catalina/core/TestApplicationContextGetRequestDispatcher.java
@@ -437,7 +437,7 @@ public class TestApplicationContextGetRequestDispatcher extends TomcatBaseTest {
 
         private final String dispatchPath;
 
-        public DispatcherServlet(String dispatchPath) {
+        DispatcherServlet(String dispatchPath) {
             this.dispatchPath = dispatchPath;
         }
 
@@ -489,7 +489,7 @@ public class TestApplicationContextGetRequestDispatcher extends TomcatBaseTest {
         private final String dispatchPath;
         private final boolean encodePath;
 
-        public AsyncDispatcherServlet(String dispatchPath, boolean encodePath) {
+        AsyncDispatcherServlet(String dispatchPath, boolean encodePath) {
             this.dispatchPath = dispatchPath;
             this.encodePath = encodePath;
         }

==================================================
TestAsyncContextImpl.java
index 2ba47051fd..e8ba854e98 100644
--- a/test/org/apache/catalina/core/TestApplicationHttpRequest.java
+++ b/test/org/apache/catalina/core/TestApplicationHttpRequest.java
@@ -243,7 +243,7 @@ public class TestApplicationHttpRequest extends TomcatBaseTest {
 
         private final String target;
 
-        public ForwardServlet(String target) {
+        ForwardServlet(String target) {
             this.target = target;
         }
 
@@ -262,7 +262,7 @@ public class TestApplicationHttpRequest extends TomcatBaseTest {
 
         private Map<String,String[]> expected;
 
-        public DisplayParameterServlet(Map<String,String[]> expected) {
+        DisplayParameterServlet(Map<String,String[]> expected) {
             this.expected = expected;
         }
 

==================================================
TestAsyncContextStateChanges.java
index 14621803ed..d3e3a41fd4 100644
--- a/test/org/apache/catalina/core/TestAsyncContextImpl.java
+++ b/test/org/apache/catalina/core/TestAsyncContextImpl.java
@@ -594,7 +594,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
 
         public static final long ASYNC_TIMEOUT = 100;
 
-        public TimeoutServlet(Boolean completeOnTimeout, String dispatchUrl) {
+        TimeoutServlet(Boolean completeOnTimeout, String dispatchUrl) {
             this.completeOnTimeout = completeOnTimeout;
             if (completeOnTimeout == null) {
                 this.trackingListener = null;
@@ -722,7 +722,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         private static final String DISPATCH_CHECK = "check";
         private final transient TrackingListener trackingListener;
 
-        public DispatchingServlet(boolean addTrackingListener,
+        DispatchingServlet(boolean addTrackingListener,
                 boolean completeOnError) {
             if (addTrackingListener) {
                 trackingListener = new TrackingListener(completeOnError, true, null);
@@ -934,7 +934,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
 
     private static class StickyTrackingListener extends TrackingListener {
 
-        public StickyTrackingListener(boolean completeOnError,
+        StickyTrackingListener(boolean completeOnError,
                 boolean completeOnTimeout, String dispatchUrl) {
             super(completeOnError, completeOnTimeout, dispatchUrl);
         }
@@ -1315,7 +1315,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
 
         private int status;
 
-        public AsyncStatusServlet(int status) {
+        AsyncStatusServlet(int status) {
             this.status = status;
         }
 
@@ -1435,7 +1435,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         private int status;
         private boolean threaded;
 
-        public AsyncErrorServlet(int status, boolean threaded) {
+        AsyncErrorServlet(int status, boolean threaded) {
             this.status = status;
             this.threaded = threaded;
         }
@@ -1757,7 +1757,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
 
         private final ErrorPageAsyncMode mode;
 
-        public AsyncErrorPage(ErrorPageAsyncMode mode) {
+        AsyncErrorPage(ErrorPageAsyncMode mode) {
             this.mode = mode;
         }
 
@@ -2274,7 +2274,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         private final String target;
         private final boolean addTrackingListener;
 
-        public DispatchingServletTracking(String target, boolean addTrackingListener) {
+        DispatchingServletTracking(String target, boolean addTrackingListener) {
             this.target = target;
             this.addTrackingListener = addTrackingListener;
         }
@@ -2781,7 +2781,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         private final boolean useComplete;
         private transient AsyncIoEndWriteListener asyncIoEndWriteListener;
 
-        public AsyncIoEndServlet(boolean useThread, boolean useComplete) {
+        AsyncIoEndServlet(boolean useThread, boolean useComplete) {
             this.useThread = useThread;
             this.useComplete = useComplete;
         }
@@ -2818,7 +2818,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         private final boolean useComplete;
         private boolean invalidStateDetected = false;
 
-        public AsyncIoEndWriteListener(AsyncContext ac, boolean useThread,
+        AsyncIoEndWriteListener(AsyncContext ac, boolean useThread,
                 boolean useComplete) {
             this.ac = ac;
             this.useThread = useThread;
@@ -2958,7 +2958,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         private final transient CountDownLatch threadCompleteLatch;
         private final AtomicBoolean ise;
 
-        public Bug63816Servlet(CountDownLatch doGetLatch, CountDownLatch clientCloseLatch,
+        Bug63816Servlet(CountDownLatch doGetLatch, CountDownLatch clientCloseLatch,
                 CountDownLatch threadCompleteLatch, AtomicBoolean ise) {
             this.doGetLatch = doGetLatch;
             this.clientCloseLatch = clientCloseLatch;
@@ -2992,7 +2992,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         private final CountDownLatch threadCompleteLatch;
         private final AtomicBoolean ise;
 
-        public Bug63816Thread(AsyncContext ac, CountDownLatch clientCloseLatch, CountDownLatch threadCompleteLatch,
+        Bug63816Thread(AsyncContext ac, CountDownLatch clientCloseLatch, CountDownLatch threadCompleteLatch,
                 AtomicBoolean ise) {
             this.ac = ac;
             this.clientCloseLatch = clientCloseLatch;
@@ -3125,7 +3125,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         private final transient CountDownLatch threadCompleteLatch;
         private final AtomicBoolean testFailed;
 
-        public PostServlet(CountDownLatch doPostLatch, CountDownLatch clientCloseLatch,
+        PostServlet(CountDownLatch doPostLatch, CountDownLatch clientCloseLatch,
                 CountDownLatch threadCompleteLatch, AtomicBoolean testFailed) {
             this.partialReadLatch = doPostLatch;
             this.clientCloseLatch = clientCloseLatch;
@@ -3158,7 +3158,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         private final CountDownLatch threadCompleteLatch;
         private final AtomicBoolean testFailed;
 
-        public PostServletThread(AsyncContext ac, CountDownLatch partialReadLatch, CountDownLatch clientCloseLatch,
+        PostServletThread(AsyncContext ac, CountDownLatch partialReadLatch, CountDownLatch clientCloseLatch,
                 CountDownLatch threadCompleteLatch, AtomicBoolean testFailed) {
             this.ac = ac;
             this.partialReadLatch = partialReadLatch;

==================================================
TestStandardContext.java
index b7743b0696..3518b4dd72 100644
--- a/test/org/apache/catalina/core/TestAsyncContextStateChanges.java
+++ b/test/org/apache/catalina/core/TestAsyncContextStateChanges.java
@@ -354,7 +354,7 @@ public class TestAsyncContextStateChanges extends TomcatBaseTest {
         final boolean none;
         final boolean error;
 
-        private AsyncEnd(boolean none, boolean error) {
+        AsyncEnd(boolean none, boolean error) {
             this.none = none;
             this.error = error;
         }

==================================================
TestStandardContextValve.java
index 94194fe020..cac76d1867 100644
--- a/test/org/apache/catalina/core/TestStandardContext.java
+++ b/test/org/apache/catalina/core/TestStandardContext.java
@@ -149,7 +149,7 @@ public class TestStandardContext extends TomcatBaseTest {
 
     private static final class Bug46243Client extends SimpleHttpClient {
 
-        public Bug46243Client(int port) {
+        Bug46243Client(int port) {
             setPort(port);
         }
 

==================================================
TestSwallowAbortedUploads.java
index 18051374eb..bec8d6b8e1 100644
--- a/test/org/apache/catalina/core/TestStandardContextValve.java
+++ b/test/org/apache/catalina/core/TestStandardContextValve.java
@@ -155,7 +155,7 @@ public class TestStandardContextValve extends TomcatBaseTest {
 
         private StringBuilder sb;
 
-        public Bug51653ErrorPage(StringBuilder sb) {
+        Bug51653ErrorPage(StringBuilder sb) {
             this.sb = sb;
         }
 
@@ -175,7 +175,7 @@ public class TestStandardContextValve extends TomcatBaseTest {
 
         private StringBuilder sb;
 
-        public Bug51653RequestListener(StringBuilder sb) {
+        Bug51653RequestListener(StringBuilder sb) {
             this.sb = sb;
         }
 

==================================================
TestAddCharSetFilter.java
index e9c855ac33..4a9add8937 100644
--- a/test/org/apache/catalina/core/TestSwallowAbortedUploads.java
+++ b/test/org/apache/catalina/core/TestSwallowAbortedUploads.java
@@ -328,7 +328,7 @@ public class TestSwallowAbortedUploads extends TomcatBaseTest {
 
         private final int status;
 
-        public AbortedPOSTServlet(int status) {
+        AbortedPOSTServlet(int status) {
             this.status = status;
         }
 

==================================================
TestCsrfPreventionFilter2.java
index 9d54b60b1a..7b069269cb 100644
--- a/test/org/apache/catalina/filters/TestAddCharSetFilter.java
+++ b/test/org/apache/catalina/filters/TestAddCharSetFilter.java
@@ -130,7 +130,7 @@ public class TestAddCharSetFilter extends TomcatBaseTest {
         private final int mode;
         private final boolean useSetContentType;
 
-        public CharsetServlet(int mode, boolean useSetContentType) {
+        CharsetServlet(int mode, boolean useSetContentType) {
             this.mode = mode;
             this.useSetContentType = useSetContentType;
         }

==================================================
TestWebappClassLoaderExecutorMemoryLeak.java
index 87932023d8..f8a3281428 100644
--- a/test/org/apache/catalina/filters/TestCsrfPreventionFilter2.java
+++ b/test/org/apache/catalina/filters/TestCsrfPreventionFilter2.java
@@ -60,7 +60,7 @@ public class TestCsrfPreventionFilter2 {
         private long iterationCount = 0;
         private volatile boolean result = false;
 
-        public LruTestThread(LruCache<String> cache, long iterationCount) {
+        LruTestThread(LruCache<String> cache, long iterationCount) {
             this.cache = cache;
             this.iterationCount = iterationCount;
         }

==================================================
TestMapperListener.java
index 7ffb6e80e2..f54d604e00 100644
--- a/test/org/apache/catalina/loader/TestWebappClassLoaderExecutorMemoryLeak.java
+++ b/test/org/apache/catalina/loader/TestWebappClassLoaderExecutorMemoryLeak.java
@@ -108,7 +108,7 @@ public class TestWebappClassLoaderExecutorMemoryLeak extends TomcatBaseTest {
 
             String _id;
 
-            public Task(String id) {
+            Task(String id) {
                 this._id = id;
             }
 

==================================================
TestNonBlockingAPI.java
index a8a74073bd..f5be04e200 100644
--- a/test/org/apache/catalina/mapper/TestMapperListener.java
+++ b/test/org/apache/catalina/mapper/TestMapperListener.java
@@ -89,7 +89,7 @@ public class TestMapperListener extends TomcatBaseTest {
         public final ContainerListener[] containerListeners;
         public final LifecycleListener[] lifecycleListeners;
 
-        public ListenersInfo(Container container, ContainerListener[] containerListeners,
+        ListenersInfo(Container container, ContainerListener[] containerListeners,
                 LifecycleListener[] lifecycleListeners) {
             this.container = container;
             this.containerListeners = containerListeners;

==================================================
DefaultServletEncodingBaseTest.java
index 018742394c..49cd5f422c 100644
--- a/test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java
+++ b/test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java
@@ -666,7 +666,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         protected final StringBuilder body = new StringBuilder();
 
 
-        public TestReadListener(AsyncContext ctx,
+        TestReadListener(AsyncContext ctx,
                 boolean usingNonBlockingWrite,
                 boolean ignoreIsReady) {
             this.ctx = ctx;
@@ -726,7 +726,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         AtomicInteger containerThreadCount = new AtomicInteger(0);
         AtomicInteger nonContainerThreadCount = new AtomicInteger(0);
 
-        public TestAsyncReadListener(AsyncContext ctx,
+        TestAsyncReadListener(AsyncContext ctx,
                 boolean usingNonBlockingWrite, boolean ignoreIsReady) {
             super(ctx, usingNonBlockingWrite, ignoreIsReady);
         }
@@ -795,7 +795,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         int written = 0;
         public volatile boolean onErrorInvoked = false;
 
-        public TestWriteListener(AsyncContext ctx, boolean unlimited) {
+        TestWriteListener(AsyncContext ctx, boolean unlimited) {
             this.ctx = ctx;
             this.unlimited = unlimited;
         }
@@ -839,7 +839,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         AsyncContext ctx;
         private final StringBuilder body = new StringBuilder();
 
-        public TestReadWriteListener(AsyncContext ctx) {
+        TestReadWriteListener(AsyncContext ctx) {
             this.ctx = ctx;
         }
 
@@ -1013,7 +1013,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         private final CountDownLatch latch;
         private final List<Throwable> exceptions;
 
-        public RequestExecutor(String url, CountDownLatch latch, List<Throwable> exceptions) {
+        RequestExecutor(String url, CountDownLatch latch, List<Throwable> exceptions) {
             this.url = url;
             this.latch = latch;
             this.exceptions = exceptions;
@@ -1041,7 +1041,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         private final CountDownLatch latch;
         private final List<Throwable> exceptions;
 
-        public RequestPostExecutor(String url, CountDownLatch latch, List<Throwable> exceptions) {
+        RequestPostExecutor(String url, CountDownLatch latch, List<Throwable> exceptions) {
             this.url = url;
             this.latch = latch;
             this.exceptions = exceptions;
@@ -1070,7 +1070,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         private final Set<Emitter> emitters = new HashSet<>();
         private final transient CountDownLatch latch;
 
-        public DelayedNBWriteServlet(CountDownLatch latch) {
+        DelayedNBWriteServlet(CountDownLatch latch) {
             this.latch = latch;
         }
 
@@ -1100,7 +1100,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         private static final long serialVersionUID = 1L;
         private final transient CountDownLatch latch;
 
-        public DelayedNBReadWriteServlet(CountDownLatch latch) {
+        DelayedNBReadWriteServlet(CountDownLatch latch) {
             this.latch = latch;
         }
 
@@ -1119,7 +1119,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         private final transient CountDownLatch latch;
         private final transient AsyncContext ctx;
 
-        public ReadWriteListener(CountDownLatch latch, AsyncContext ctx){
+        ReadWriteListener(CountDownLatch latch, AsyncContext ctx){
             this.latch = latch;
             this.ctx = ctx;
         }
@@ -1413,7 +1413,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         private final transient CountDownLatch completeLatch;
         private final AtomicBoolean testFailed;
 
-        public PostServlet(CountDownLatch doPostLatch, CountDownLatch completeLatch, AtomicBoolean testFailed) {
+        PostServlet(CountDownLatch doPostLatch, CountDownLatch completeLatch, AtomicBoolean testFailed) {
             this.partialReadLatch = doPostLatch;
             this.completeLatch = completeLatch;
             this.testFailed = testFailed;
@@ -1438,7 +1438,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
 
         private final transient CountDownLatch completeLatch;
 
-        public CanceledPostAsyncListener(CountDownLatch completeLatch) {
+        CanceledPostAsyncListener(CountDownLatch completeLatch) {
             this.completeLatch = completeLatch;
         }
 
@@ -1471,7 +1471,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         private final AtomicBoolean testFailed;
         private int totalRead = 0;
 
-        public CanceledPostReadListener(AsyncContext ac, CountDownLatch partialReadLatch, AtomicBoolean testFailed) {
+        CanceledPostReadListener(AsyncContext ac, CountDownLatch partialReadLatch, AtomicBoolean testFailed) {
             this.ac = ac;
             this.partialReadLatch = partialReadLatch;
             this.testFailed = testFailed;
@@ -1586,7 +1586,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         private final transient CountDownLatch asyncCompleteLatch;
         private final boolean swallowIoException;
 
-        public NBWriteServlet02(CountDownLatch responseCommitLatch, CountDownLatch clientCloseLatch,
+        NBWriteServlet02(CountDownLatch responseCommitLatch, CountDownLatch clientCloseLatch,
                 CountDownLatch asyncCompleteLatch, boolean swallowIoException) {
             this.responseCommitLatch = responseCommitLatch;
             this.clientCloseLatch = clientCloseLatch;
@@ -1614,7 +1614,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
 
         private final CountDownLatch asyncCompleteLatch;
 
-        public TestAsyncListener02(CountDownLatch asyncCompleteLatch) {
+        TestAsyncListener02(CountDownLatch asyncCompleteLatch) {
             this.asyncCompleteLatch = asyncCompleteLatch;
         }
 
@@ -1648,7 +1648,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         private final boolean swallowIoException;
         private volatile AtomicInteger stage = new AtomicInteger(0);
 
-        public TestWriteListener02(AsyncContext ac, CountDownLatch responseCommitLatch,
+        TestWriteListener02(AsyncContext ac, CountDownLatch responseCommitLatch,
                 CountDownLatch clientCloseLatch, boolean swallowIoException) {
             this.ac = ac;
             this.responseCommitLatch = responseCommitLatch;
@@ -1826,7 +1826,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         private final CountDownLatch afterCloseLatch;
         int written = 0;
 
-        public TestWriteListener03(AsyncContext ctx, CountDownLatch beforeCloseLatch, CountDownLatch afterCloseLatch) {
+        TestWriteListener03(AsyncContext ctx, CountDownLatch beforeCloseLatch, CountDownLatch afterCloseLatch) {
             this.ctx = ctx;
             this.beforeCloseLatch = beforeCloseLatch;
             this.afterCloseLatch = afterCloseLatch;

==================================================
TestDefaultServlet.java
index 2143face1e..740ff5c9ca 100644
--- a/test/org/apache/catalina/servlets/DefaultServletEncodingBaseTest.java
+++ b/test/org/apache/catalina/servlets/DefaultServletEncodingBaseTest.java
@@ -258,7 +258,7 @@ public abstract class DefaultServletEncodingBaseTest extends TomcatBaseTest {
         private final String includeTarget;
         private final boolean useWriter;
 
-        public EncodingServlet(String outputEncoding, boolean callSetCharacterEncoding,
+        EncodingServlet(String outputEncoding, boolean callSetCharacterEncoding,
                 String includeTarget, boolean useWriter) {
             this.outputEncoding = outputEncoding;
             this.callSetCharacterEncoding = callSetCharacterEncoding;

==================================================
TestDefaultServletPut.java
index 48d90ba9f4..a185aa9586 100644
--- a/test/org/apache/catalina/servlets/TestDefaultServlet.java
+++ b/test/org/apache/catalina/servlets/TestDefaultServlet.java
@@ -587,7 +587,7 @@ public class TestDefaultServlet extends TomcatBaseTest {
 
     private static class TestCustomErrorClient extends SimpleHttpClient {
 
-        public TestCustomErrorClient(int port) {
+        TestCustomErrorClient(int port) {
             setPort(port);
         }
 
@@ -599,7 +599,7 @@ public class TestDefaultServlet extends TomcatBaseTest {
 
     private static class TestCompressedClient extends SimpleHttpClient {
 
-        public TestCompressedClient(int port) {
+        TestCompressedClient(int port) {
             setPort(port);
         }
 

==================================================
Benchmarks.java
index e2e00584d3..74262979c3 100644
--- a/test/org/apache/catalina/servlets/TestDefaultServletPut.java
+++ b/test/org/apache/catalina/servlets/TestDefaultServletPut.java
@@ -185,7 +185,7 @@ public class TestDefaultServletPut extends TomcatBaseTest {
 
     private static class PutClient extends SimpleHttpClient {
 
-        public PutClient(int port) {
+        PutClient(int port) {
             setPort(port);
         }
 

==================================================
Threading.java
index 9aadb613d7..f11430890c 100644
--- a/test/org/apache/catalina/session/Benchmarks.java
+++ b/test/org/apache/catalina/session/Benchmarks.java
@@ -126,7 +126,7 @@ public class Benchmarks {
         private ManagerBase mgr;
         private int count;
 
-        public TestThreadGenerateSessionId(ManagerBase mgr, int count) {
+        TestThreadGenerateSessionId(ManagerBase mgr, int count) {
             this.mgr = mgr;
             this.count = count;
         }
@@ -223,7 +223,7 @@ public class Benchmarks {
         private ManagerBase mgr;
         private int count;
 
-        public TestThreadCreateSession(ManagerBase mgr, int count) {
+        TestThreadCreateSession(ManagerBase mgr, int count) {
             this.mgr = mgr;
             this.count = count;
         }

==================================================
TestContextConfig.java
index 89baac378a..2f8e5fb88b 100644
--- a/test/org/apache/catalina/session/Threading.java
+++ b/test/org/apache/catalina/session/Threading.java
@@ -113,7 +113,7 @@ public class Threading {
         private long byteCount = 0;
         private boolean fail = false;
 
-        public FisReaderThread(FileInputStream fis) {
+        FisReaderThread(FileInputStream fis) {
             this.fis = fis;
         }
 

==================================================
TestMultipartConfig.java
index cc784f754a..4b6b748349 100644
--- a/test/org/apache/catalina/startup/TestContextConfig.java
+++ b/test/org/apache/catalina/startup/TestContextConfig.java
@@ -159,7 +159,7 @@ public class TestContextConfig extends TomcatBaseTest {
 
         private String servletName;
 
-        public CustomDefaultServletSCI(String servletName) {
+        CustomDefaultServletSCI(String servletName) {
             this.servletName = servletName;
         }
 

==================================================
TestTomcatClassLoader.java
index 1aee547681..3483ec3cae 100644
--- a/test/org/apache/catalina/startup/TestMultipartConfig.java
+++ b/test/org/apache/catalina/startup/TestMultipartConfig.java
@@ -149,7 +149,7 @@ public class TestMultipartConfig {
     }
 
     private static class MyContextConfig extends ContextConfig {
-        public MyContextConfig() {
+        MyContextConfig() {
             CustomContext context = new CustomContext();
             super.context = context;
             context.setConfigured(false);

==================================================
TestWebappServiceLoader.java
index 17fbfa1c93..ff2bccd114 100644
--- a/test/org/apache/catalina/startup/TestTomcatClassLoader.java
+++ b/test/org/apache/catalina/startup/TestTomcatClassLoader.java
@@ -79,7 +79,7 @@ public class TestTomcatClassLoader extends TomcatBaseTest {
 
         private transient ClassLoader custom;
 
-        public ClassLoaderReport(ClassLoader custom) {
+        ClassLoaderReport(ClassLoader custom) {
             this.custom = custom;
         }
 

==================================================
MapDemo.java
index 0efee2dd7b..df8126f0e9 100644
--- a/test/org/apache/catalina/startup/TestWebappServiceLoader.java
+++ b/test/org/apache/catalina/startup/TestWebappServiceLoader.java
@@ -195,7 +195,7 @@ public class TestWebappServiceLoader {
         private final ClassLoader parent;
         private final WebResourceRoot resources;
 
-        public ExtendedTesterContext(ServletContext servletContext, ClassLoader parent) {
+        ExtendedTesterContext(ServletContext servletContext, ClassLoader parent) {
             this.servletContext = servletContext;
             this.parent = parent;
             // Empty resources - any non-null returns will be mocked on the

==================================================
TestEncryptInterceptor.java
index 393214814d..e15869a772 100644
--- a/test/org/apache/catalina/tribes/demos/MapDemo.java
+++ b/test/org/apache/catalina/tribes/demos/MapDemo.java
@@ -522,7 +522,7 @@ public class MapDemo implements ChannelListener, MembershipListener{
 
         private static final long serialVersionUID = 1L;
 
-        public ColorRenderer() {
+        ColorRenderer() {
             super();
         }
 

==================================================
Benchmarks.java
index 0bd282b41e..36f3b797ef 100644
--- a/test/org/apache/catalina/tribes/group/interceptors/TestEncryptInterceptor.java
+++ b/test/org/apache/catalina/tribes/group/interceptors/TestEncryptInterceptor.java
@@ -485,7 +485,7 @@ public class TestEncryptInterceptor {
     {
         private ChannelInterceptor dest;
 
-        public PipedInterceptor(ChannelInterceptor dest) {
+        PipedInterceptor(ChannelInterceptor dest) {
             if(null == dest) {
               throw new IllegalArgumentException("Destination must not be null");
             }

==================================================
TestLoadBalancerDrainingValve.java
index 9c6f774f02..973df0b946 100644
--- a/test/org/apache/catalina/valves/Benchmarks.java
+++ b/test/org/apache/catalina/valves/Benchmarks.java
@@ -492,7 +492,7 @@ public class Benchmarks {
         private int count;
         private Runnable test;
 
-        public TestThread(int count, Runnable test) {
+        TestThread(int count, Runnable test) {
             this.count = count;
             this.test = test;
         }

==================================================
TestIoTimeouts.java
index 390f8d9bd3..8ef57816ff 100644
--- a/test/org/apache/catalina/valves/TestLoadBalancerDrainingValve.java
+++ b/test/org/apache/catalina/valves/TestLoadBalancerDrainingValve.java
@@ -285,7 +285,7 @@ public class TestLoadBalancerDrainingValve {
     private static class MyCookie extends Cookie {
         private static final long serialVersionUID = 1L;
 
-        public MyCookie(String name, String value) { super(name, value); }
+        MyCookie(String name, String value) { super(name, value); }
 
         @Override
         public boolean equals(Object o) {

==================================================
TestAbstractAjpProcessor.java
index 70fbf18958..c9b17860f7 100644
--- a/test/org/apache/coyote/TestIoTimeouts.java
+++ b/test/org/apache/coyote/TestIoTimeouts.java
@@ -81,7 +81,7 @@ public class TestIoTimeouts extends TomcatBaseTest {
         private final boolean sendEndChunk;
 
 
-        public ChunkedClient(boolean sendEndChunk) {
+        ChunkedClient(boolean sendEndChunk) {
             this.sendEndChunk = sendEndChunk;
         }
 
@@ -193,7 +193,7 @@ public class TestIoTimeouts extends TomcatBaseTest {
         private final ServletOutputStream sos;
         private final byte[] buffer = new byte[8192];
 
-        public EchoListener(AsyncContext ac, ServletInputStream sis, ServletOutputStream sos) {
+        EchoListener(AsyncContext ac, ServletInputStream sis, ServletOutputStream sos) {
             t = null;
             this.ac = ac;
             this.sis = sis;

==================================================
TesterAjpMessage.java
index dc24afae2e..2b7ec101d6 100644
--- a/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java
+++ b/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java
@@ -956,7 +956,7 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
         final List<Integer> availableList;
         final List<Integer> readList;
 
-        public ReadBodyServlet(boolean callAvailable) {
+        ReadBodyServlet(boolean callAvailable) {
             this.callAvailable = callAvailable;
             this.availableList = callAvailable ? new ArrayList<>() : null;
             this.readList = callAvailable ? new ArrayList<>() : null;
@@ -1015,7 +1015,7 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
         private final int responseSize;
         private final int bufferSize;
 
-        public FixedResponseSizeServlet(int responseSize, int bufferSize) {
+        FixedResponseSizeServlet(int responseSize, int bufferSize) {
             this.responseSize = responseSize;
             this.bufferSize = bufferSize;
         }

==================================================
TestHttp11InputBuffer.java
index 7fde97cdd2..790bbe116c 100644
--- a/test/org/apache/coyote/ajp/TesterAjpMessage.java
+++ b/test/org/apache/coyote/ajp/TesterAjpMessage.java
@@ -148,13 +148,13 @@ public class TesterAjpMessage extends AjpMessage {
         private final String name;
         private final String value;
 
-        public Header(int code, String value) {
+        Header(int code, String value) {
             this.code = code;
             this.name = null;
             this.value = value;
         }
 
-        public Header(String name, String value) {
+        Header(String name, String value) {
             this.code = 0;
             this.name = name;
             this.value = value;
@@ -176,13 +176,13 @@ public class TesterAjpMessage extends AjpMessage {
         private final String name;
         private final String value;
 
-        public Attribute(int code, String value) {
+        Attribute(int code, String value) {
             this.code = code;
             this.name = null;
             this.value = value;
         }
 
-        public Attribute(String name, String value) {
+        Attribute(String name, String value) {
             this.code = 0;
             this.name = name;
             this.value = value;

==================================================
TestHttp11InputBufferCRLF.java
index 1857882478..9e8c5b43b0 100644
--- a/test/org/apache/coyote/http11/TestHttp11InputBuffer.java
+++ b/test/org/apache/coyote/http11/TestHttp11InputBuffer.java
@@ -300,17 +300,17 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
         private final String headerLine;
         private final boolean rejectIllegalHeader;
 
-        public Bug51557Client(String headerName) {
+        Bug51557Client(String headerName) {
             this.headerName = headerName;
             this.headerLine = headerName;
             this.rejectIllegalHeader = false;
         }
 
-        public Bug51557Client(String headerName, String headerValue) {
+        Bug51557Client(String headerName, String headerValue) {
             this(headerName, headerValue, false);
         }
 
-        public Bug51557Client(String headerName, String headerValue,
+        Bug51557Client(String headerName, String headerValue,
                 boolean rejectIllegalHeader) {
             this.headerName = headerName;
             this.headerLine = headerName + ": " + headerValue;
@@ -380,7 +380,7 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
          * @param invalidHeaderName The header name should be invalid and
          *                          therefore ignored by the header parsing code
          */
-        public Bug51557Servlet(String invalidHeaderName) {
+        Bug51557Servlet(String invalidHeaderName) {
             this.invalidHeaderName = invalidHeaderName;
         }
 
@@ -747,7 +747,7 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
 
         private final String[] request;
 
-        public InvalidClient(String[] request) {
+        InvalidClient(String[] request) {
             this.request = request;
         }
 

==================================================
TestHttp11OutputBuffer.java
index c6e3d8593b..a38e6d78ab 100644
--- a/test/org/apache/coyote/http11/TestHttp11InputBufferCRLF.java
+++ b/test/org/apache/coyote/http11/TestHttp11InputBufferCRLF.java
@@ -194,7 +194,7 @@ public class TestHttp11InputBufferCRLF extends TomcatBaseTest {
 
     private class Client extends SimpleHttpClient {
 
-        public Client(String[] request, boolean isHttp09) {
+        Client(String[] request, boolean isHttp09) {
             setRequest(request);
             setUseHttp09(isHttp09);
         }

==================================================
TestHttp11Processor.java
index f8ab52112b..43aa9b83a5 100644
--- a/test/org/apache/coyote/http11/TestHttp11OutputBuffer.java
+++ b/test/org/apache/coyote/http11/TestHttp11OutputBuffer.java
@@ -122,7 +122,7 @@ public class TestHttp11OutputBuffer extends TomcatBaseTest {
 
         private final String customHeaderValue;
 
-        public HeaderServlet(String customHeaderValue) {
+        HeaderServlet(String customHeaderValue) {
             this.customHeaderValue = customHeaderValue;
         }
 

==================================================
TestChunkedInputFilter.java
index f967195bc2..dfda55b892 100644
--- a/test/org/apache/coyote/http11/TestHttp11Processor.java
+++ b/test/org/apache/coyote/http11/TestHttp11Processor.java
@@ -117,7 +117,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
 
         private final boolean useChunks;
 
-        public ResponseWithErrorServlet(boolean useChunks) {
+        ResponseWithErrorServlet(boolean useChunks) {
             this.useChunks = useChunks;
         }
 
@@ -531,7 +531,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
                 "Accept-Language: en-US,en;q=0.8,fr;q=0.6,es;q=0.4\r\n" +
                 "\r\n";
 
-        try (final Socket connection = new Socket("localhost", getPort())) {
+        try (Socket connection = new Socket("localhost", getPort())) {
             connection.setSoLinger(true, 0);
             Writer writer = new OutputStreamWriter(connection.getOutputStream(),
                     StandardCharsets.US_ASCII);
@@ -545,7 +545,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
         bug55772Latch2.await();
         bug55772IsSecondRequest = true;
 
-        try (final Socket connection = new Socket("localhost", getPort())) {
+        try (Socket connection = new Socket("localhost", getPort())) {
             connection.setSoLinger(true, 0);
             Writer writer = new OutputStreamWriter(connection.getOutputStream(),
                     B2CConverter.getCharset("US-ASCII"));
@@ -669,7 +669,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
 
         boolean flush = false;
 
-        public LargeHeaderServlet(boolean flush) {
+        LargeHeaderServlet(boolean flush) {
             this.flush = flush;
         }
 
@@ -726,7 +726,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
 
     private static final class Client extends SimpleHttpClient {
 
-        public Client(int port) {
+        Client(int port) {
             setPort(port);
         }
 
@@ -790,7 +790,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
         private final boolean delayAsyncThread;
 
 
-        public Bug57621Servlet(boolean delayAsyncThread) {
+        Bug57621Servlet(boolean delayAsyncThread) {
             this.delayAsyncThread = delayAsyncThread;
         }
 
@@ -1783,7 +1783,7 @@ public class TestHttp11Processor extends TomcatBaseTest {
 
         private static final long serialVersionUID = 1L;
 
-        public SwallowBodyTesterServlet() {
+        SwallowBodyTesterServlet() {
             super(true);
         }
 

==================================================
TestUpgrade.java
index 471e5ac759..b877807963 100644
--- a/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java
+++ b/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java
@@ -435,7 +435,7 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
 
         private final boolean expectPass;
 
-        public EchoHeaderServlet(boolean expectPass) {
+        EchoHeaderServlet(boolean expectPass) {
             this.expectPass = expectPass;
         }
 
@@ -494,7 +494,7 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
         private final boolean expectPass;
         private final int readLimit;
 
-        public BodyReadServlet(boolean expectPass, int readLimit) {
+        BodyReadServlet(boolean expectPass, int readLimit) {
             this.expectPass = expectPass;
             this.readLimit = readLimit;
         }
@@ -535,7 +535,7 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
 
     private static class TrailerClient extends SimpleHttpClient {
 
-        public TrailerClient(int port) {
+        TrailerClient(int port) {
             setPort(port);
         }
 

==================================================
TestUpgradeInternalHandler.java
index 24dc129e13..23f1673857 100644
--- a/test/org/apache/coyote/http11/upgrade/TestUpgrade.java
+++ b/test/org/apache/coyote/http11/upgrade/TestUpgrade.java
@@ -210,7 +210,7 @@ public class TestUpgrade extends TomcatBaseTest {
 
         private final Class<? extends HttpUpgradeHandler> upgradeHandlerClass;
 
-        public UpgradeServlet(Class<? extends HttpUpgradeHandler> upgradeHandlerClass) {
+        UpgradeServlet(Class<? extends HttpUpgradeHandler> upgradeHandlerClass) {
             this.upgradeHandlerClass = upgradeHandlerClass;
         }
 
@@ -230,7 +230,7 @@ public class TestUpgrade extends TomcatBaseTest {
         private final Writer writer;
         private final BufferedReader reader;
 
-        public UpgradeConnection(Socket socket) {
+        UpgradeConnection(Socket socket) {
             this.socket = socket;
             InputStream is;
             OutputStream os;
@@ -323,7 +323,7 @@ public class TestUpgrade extends TomcatBaseTest {
             private final ServletOutputStream sos;
             private final byte[] buffer = new byte[8192];
 
-            public EchoListener(ServletInputStream sis, ServletOutputStream sos) {
+            EchoListener(ServletInputStream sis, ServletOutputStream sos) {
                 this.sis = sis;
                 this.sos = sos;
             }

==================================================
Http2TestBase.java
index a2c3a940a3..3335a89111 100644
--- a/test/org/apache/coyote/http11/upgrade/TestUpgradeInternalHandler.java
+++ b/test/org/apache/coyote/http11/upgrade/TestUpgradeInternalHandler.java
@@ -129,7 +129,7 @@ public class TestUpgradeInternalHandler extends TomcatBaseTest {
 
         private final Class<? extends HttpUpgradeHandler> upgradeHandlerClass;
 
-        public UpgradeServlet(Class<? extends HttpUpgradeHandler> upgradeHandlerClass) {
+        UpgradeServlet(Class<? extends HttpUpgradeHandler> upgradeHandlerClass) {
             this.upgradeHandlerClass = upgradeHandlerClass;
         }
 
@@ -146,7 +146,7 @@ public class TestUpgradeInternalHandler extends TomcatBaseTest {
         private final Writer writer;
         private final BufferedReader reader;
 
-        public UpgradeConnection(Socket socket) {
+        UpgradeConnection(Socket socket) {
             this.socket = socket;
             InputStream is;
             OutputStream os;

==================================================
TestAsyncTimeout.java
index a81a450f6b..215714b493 100644
--- a/test/org/apache/coyote/http2/Http2TestBase.java
+++ b/test/org/apache/coyote/http2/Http2TestBase.java
@@ -1055,7 +1055,7 @@ public abstract class Http2TestBase extends TomcatBaseTest {
         private final InputStream is;
 
 
-        public TestInput(InputStream is) {
+        TestInput(InputStream is) {
             this.is = is;
         }
 
@@ -1532,7 +1532,7 @@ public abstract class Http2TestBase extends TomcatBaseTest {
         private final int setting;
         private final long value;
 
-        public SettingValue(int setting, long value) {
+        SettingValue(int setting, long value) {
             this.setting = setting;
             this.value = value;
         }
@@ -1551,7 +1551,7 @@ public abstract class Http2TestBase extends TomcatBaseTest {
         private final String name;
         private final String value;
 
-        public Header(String name, String value) {
+        Header(String name, String value) {
             this.name = name;
             this.value = value;
         }

==================================================
TestHpack.java
index 69529641cd..8066840924 100644
--- a/test/org/apache/coyote/http2/TestAsyncTimeout.java
+++ b/test/org/apache/coyote/http2/TestAsyncTimeout.java
@@ -132,7 +132,7 @@ public class TestAsyncTimeout extends Http2TestBase {
         private final AtomicBoolean completeCalled;
         private volatile boolean running = true;
 
-        public Ticker(AsyncContext asyncContext, AtomicBoolean completeCalled) {
+        Ticker(AsyncContext asyncContext, AtomicBoolean completeCalled) {
             this.asyncContext = asyncContext;
             this.completeCalled = completeCalled;
         }
@@ -174,7 +174,7 @@ public class TestAsyncTimeout extends Http2TestBase {
         private final Ticker ticker;
         private final AtomicBoolean completeCalled;
 
-        public TimeoutListener(CountDownLatch latch, Ticker ticker, AtomicBoolean completeCalled) {
+        TimeoutListener(CountDownLatch latch, Ticker ticker, AtomicBoolean completeCalled) {
             this.latch = latch;
             this.ticker = ticker;
             this.completeCalled = completeCalled;

==================================================
TestHttp2InitialConnection.java
index d27a661332..991855417a 100644
--- a/test/org/apache/coyote/http2/TestHpack.java
+++ b/test/org/apache/coyote/http2/TestHpack.java
@@ -72,7 +72,7 @@ public class TestHpack {
 
     private static class HeadersListener implements HpackDecoder.HeaderEmitter {
         private final MimeHeaders headers;
-        public HeadersListener(MimeHeaders headers) {
+        HeadersListener(MimeHeaders headers) {
             this.headers = headers;
         }
         @Override

==================================================
TestHttp2Limits.java
index 1a99c3ab41..c11e954121 100644
--- a/test/org/apache/coyote/http2/TestHttp2InitialConnection.java
+++ b/test/org/apache/coyote/http2/TestHttp2InitialConnection.java
@@ -158,7 +158,7 @@ public class TestHttp2InitialConnection extends Http2TestBase {
         private final List<String> hostHeaders;
         private final int expectedStatus;
 
-        public TestData(List<String> hostHeaders, int expectedStatus) {
+        TestData(List<String> hostHeaders, int expectedStatus) {
             this.hostHeaders = hostHeaders;
             this.expectedStatus = expectedStatus;
         }

==================================================
TestStreamQueryString.java
index 25103f9cd7..1bf08bc1aa 100644
--- a/test/org/apache/coyote/http2/TestHttp2Limits.java
+++ b/test/org/apache/coyote/http2/TestHttp2Limits.java
@@ -572,7 +572,7 @@ public class TestHttp2Limits extends Http2TestBase {
         private final String pattern;
 
 
-        public RegexMatcher(String pattern) {
+        RegexMatcher(String pattern) {
             this.pattern = pattern;
         }
 

==================================================
TestELSupport.java
index 0997717f6d..be10725426 100644
--- a/test/org/apache/coyote/http2/TestStreamQueryString.java
+++ b/test/org/apache/coyote/http2/TestStreamQueryString.java
@@ -162,7 +162,7 @@ public class TestStreamQueryString extends Http2TestBase {
 
         private final String expectedValue;
 
-        public Query(String expectedValue) {
+        Query(String expectedValue) {
             String decoded;
             try {
                 decoded = URLDecoder.decode(expectedValue, "UTF-8");

==================================================
TestJasperELResolver.java
index 76d174fa6d..dcdde1d680 100644
--- a/test/org/apache/el/lang/TestELSupport.java
+++ b/test/org/apache/el/lang/TestELSupport.java
@@ -431,33 +431,33 @@ public class TestELSupport {
     }
 
 
-    private static interface FunctionalA<T> extends Predicate<T> {
+    private interface FunctionalA<T> extends Predicate<T> {
     }
 
 
-    private static interface FunctionalB<T> extends Predicate<T> {
-        public void extra();
+    private interface FunctionalB<T> extends Predicate<T> {
+        void extra();
     }
 
 
-    private static interface FunctionalC<T> extends Predicate<T> {
+    private interface FunctionalC<T> extends Predicate<T> {
         @SuppressWarnings("unused")
-        public default void extra() {
+        default void extra() {
         }
     }
 
 
-    private static interface FunctionalD<T> extends Predicate<T> {
+    private interface FunctionalD<T> extends Predicate<T> {
         @Override
-        public String toString();
+        String toString();
         @Override
-        public int hashCode();
+        int hashCode();
         @Override
-        public boolean equals(Object o);
+        boolean equals(Object o);
     }
 
 
-    private static interface FunctionalE<T> extends Predicate<T> {
-        public boolean equals(String s);
+    private interface FunctionalE<T> extends Predicate<T> {
+        boolean equals(String s);
     }
 }

==================================================
TestELInterpreterTagSetters.java
index e00a81a9e4..ca15a25055 100644
--- a/test/org/apache/jasper/el/TestJasperELResolver.java
+++ b/test/org/apache/jasper/el/TestJasperELResolver.java
@@ -70,7 +70,7 @@ public class TestJasperELResolver {
                 Integer.valueOf(((AtomicInteger) getField("resolversSize", resolver)).get()));
     }
 
-    private static final Object getField(String name, Object target)
+    private static Object getField(String name, Object target)
             throws NoSuchFieldException, SecurityException,
             IllegalArgumentException, IllegalAccessException {
         Field field = target.getClass().getDeclaredField(name);

==================================================
TestStringInterpreterTagSetters.java
index df58bed1eb..1cdf5bd2c8 100644
--- a/test/org/apache/jasper/optimizations/TestELInterpreterTagSetters.java
+++ b/test/org/apache/jasper/optimizations/TestELInterpreterTagSetters.java
@@ -520,7 +520,7 @@ public class TestELInterpreterTagSetters extends TomcatBaseTest {
         private final String name;
         private volatile ELInterpreter elInterpreter = null;
 
-        public ELInterpreterWrapper(boolean optimised, String name) {
+        ELInterpreterWrapper(boolean optimised, String name) {
             this.optimised = optimised;
             this.name = name;
         }

==================================================
TestTagHandlerPoolPerformance.java
index 3a75b7516a..ca6db5864e 100644
--- a/test/org/apache/jasper/optimizations/TestStringInterpreterTagSetters.java
+++ b/test/org/apache/jasper/optimizations/TestStringInterpreterTagSetters.java
@@ -85,7 +85,7 @@ public class TestStringInterpreterTagSetters extends TomcatBaseTest {
         private final String name;
         private volatile StringInterpreter stringInterpreter = null;
 
-        public StringInterpreterWrapper(boolean optimised, String name) {
+        StringInterpreterWrapper(boolean optimised, String name) {
             this.optimised = optimised;
             this.name = name;
         }

==================================================
TesterBean.java
index ea39bf57c2..66515872e8 100644
--- a/test/org/apache/jasper/runtime/TestTagHandlerPoolPerformance.java
+++ b/test/org/apache/jasper/runtime/TestTagHandlerPoolPerformance.java
@@ -55,7 +55,7 @@ public class TestTagHandlerPoolPerformance extends TomcatBaseTest {
 
         private final TagHandlerPool tagHandlerPool;
 
-        public TestInstanceSupplier(TagHandlerPool tagHandlerPool) {
+        TestInstanceSupplier(TagHandlerPool tagHandlerPool) {
             this.tagHandlerPool = tagHandlerPool;
         }
 
@@ -71,7 +71,7 @@ public class TestTagHandlerPoolPerformance extends TomcatBaseTest {
 
         private final TagHandlerPool tagHandlerPool;
 
-        public TestInstance(TagHandlerPool tagHandlerPool) {
+        TestInstance(TagHandlerPool tagHandlerPool) {
             this.tagHandlerPool = tagHandlerPool;
         }
 

==================================================
TestClassLoaderLogManager.java
index 59a6202580..e8e07e4f5c 100644
--- a/test/org/apache/jasper/runtime/TesterBean.java
+++ b/test/org/apache/jasper/runtime/TesterBean.java
@@ -268,7 +268,7 @@ public class TesterBean {
 
     @SuppressWarnings("unused")
     private static class Inner2 {
-        public Inner2() {
+        Inner2() {
         }
     }
 

==================================================
TestOneLineFormatterPerformance.java
index 0dda55bd03..57426a370d 100644
--- a/test/org/apache/juli/TestClassLoaderLogManager.java
+++ b/test/org/apache/juli/TestClassLoaderLogManager.java
@@ -115,7 +115,7 @@ public class TestClassLoaderLogManager {
         private final LogManager logManager;
         private volatile boolean running = true;
 
-        public LoggerCreateThread(LogManager logManager) {
+        LoggerCreateThread(LogManager logManager) {
             this.logManager = logManager;
         }
 
@@ -138,7 +138,7 @@ public class TestClassLoaderLogManager {
         private final LogManager logManager;
         private volatile boolean running = true;
 
-        public LoggerListThread(LogManager logManager) {
+        LoggerListThread(LogManager logManager) {
             this.logManager = logManager;
         }
 
@@ -165,7 +165,7 @@ public class TestClassLoaderLogManager {
 
     private static class TestClassLoader extends URLClassLoader implements WebappProperties {
 
-        public TestClassLoader() {
+        TestClassLoader() {
             super(new URL[0]);
         }
 

==================================================
TesterThreadedPerformance.java
index a462c8c896..54b1e33ebd 100644
--- a/test/org/apache/juli/TestOneLineFormatterPerformance.java
+++ b/test/org/apache/juli/TestOneLineFormatterPerformance.java
@@ -62,7 +62,7 @@ public class TestOneLineFormatterPerformance {
 
         private final DateFormatCache cache;
 
-        public DateFormatCacheImpl() {
+        DateFormatCacheImpl() {
             cache = new DateFormatCache(5, "dd-MMM-yyyy HH:mm:ss",  null);
         }
 

==================================================
TestCharsetCachePerformance.java
index 590970702d..2c3112ca69 100644
--- a/test/org/apache/tomcat/unittest/TesterThreadedPerformance.java
+++ b/test/org/apache/tomcat/unittest/TesterThreadedPerformance.java
@@ -62,7 +62,7 @@ public class TesterThreadedPerformance {
         private final IntConsumer testTarget;
         private final int iterationCount;
 
-        public TesterThreadedPerformanceRunnable(IntConsumer testTarget, int iterationCount) {
+        TesterThreadedPerformanceRunnable(IntConsumer testTarget, int iterationCount) {
             this.testTarget = testTarget;
             this.iterationCount = iterationCount;
         }

==================================================
TestMessageBytesConversion.java
index 6823890be5..2ad8f7f142 100644
--- a/test/org/apache/tomcat/util/buf/TestCharsetCachePerformance.java
+++ b/test/org/apache/tomcat/util/buf/TestCharsetCachePerformance.java
@@ -71,7 +71,7 @@ public class TestCharsetCachePerformance {
     }
 
 
-    private static interface CsCache {
+    private interface CsCache {
         Charset getCharset(String charsetName);
     }
 
@@ -124,7 +124,7 @@ public class TestCharsetCachePerformance {
         private final String[] lookupNames;
         private final int lookupNamesCount;
 
-        public TestCsCacheThread(int iterations, CsCache cache, String[] lookupNames) {
+        TestCsCacheThread(int iterations, CsCache cache, String[] lookupNames) {
             this.iterations = iterations;
             this.cache = cache;
             this.lookupNames = lookupNames;

==================================================
TestCookieParsing.java
index 8534738195..09e41e721b 100644
--- a/test/org/apache/tomcat/util/buf/TestMessageBytesConversion.java
+++ b/test/org/apache/tomcat/util/buf/TestMessageBytesConversion.java
@@ -131,7 +131,7 @@ public class TestMessageBytesConversion {
     }
 
 
-    public static enum MessageBytesType {
+    public enum MessageBytesType {
         BYTE((x) -> x.setBytes(PREVIOUS_BYTES, 0, PREVIOUS_BYTES.length),
                 (x) -> x.setBytes(EXPECTED_BYTES, 0, EXPECTED_BYTES.length),
                 (x) -> {x.toBytes(); Assert.assertTrue(x.getByteChunk().equals(EXPECTED_BYTES, 0, EXPECTED_BYTES.length) );},
@@ -157,7 +157,7 @@ public class TestMessageBytesConversion {
         private final Consumer<MessageBytes> checkExpected;
         private final Consumer<MessageBytes> checkNull;
 
-        private MessageBytesType(Consumer<MessageBytes> setPrevious, Consumer<MessageBytes> setExpected,
+        MessageBytesType(Consumer<MessageBytes> setPrevious, Consumer<MessageBytes> setExpected,
                 Consumer<MessageBytes> checkExpected, Consumer<MessageBytes> checkNull) {
             this.setPrevious = setPrevious;
             this.setExpected = setExpected;

==================================================
TestCookieProcessorGenerationHttp.java
index 2792310a2e..eb97917f39 100644
--- a/test/org/apache/tomcat/util/http/TestCookieParsing.java
+++ b/test/org/apache/tomcat/util/http/TestCookieParsing.java
@@ -130,12 +130,12 @@ public class TestCookieParsing extends TomcatBaseTest {
         private final boolean echoHeader;
 
 
-        public TestCookieParsingClient(CookieProcessor cookieProcessor,
+        TestCookieParsingClient(CookieProcessor cookieProcessor,
                 String[] cookies, String expected) {
             this(cookieProcessor, false, cookies, expected);
         }
 
-        public TestCookieParsingClient(CookieProcessor cookieProcessor,
+        TestCookieParsingClient(CookieProcessor cookieProcessor,
                 boolean echoHeader, String[] cookies, String expected) {
             this.cookieProcessor = cookieProcessor;
             this.echoHeader = echoHeader;

==================================================
TestFastHttpDateFormatPerformance.java
index d326259f82..1663a901d2 100644
--- a/test/org/apache/tomcat/util/http/TestCookieProcessorGenerationHttp.java
+++ b/test/org/apache/tomcat/util/http/TestCookieProcessorGenerationHttp.java
@@ -70,7 +70,7 @@ public class TestCookieProcessorGenerationHttp extends TomcatBaseTest {
 
         private final String cookieValue;
 
-        public CookieServlet(String cookieValue) {
+        CookieServlet(String cookieValue) {
             this.cookieValue = cookieValue;
         }
 

==================================================
TestMimeHeadersIntegration.java
index 82a4f4199c..ad3e176cfb 100644
--- a/test/org/apache/tomcat/util/http/TestFastHttpDateFormatPerformance.java
+++ b/test/org/apache/tomcat/util/http/TestFastHttpDateFormatPerformance.java
@@ -50,7 +50,7 @@ public class TestFastHttpDateFormatPerformance {
 
         private final int callCount;
 
-        public GetCurrentDateThread(int callCount) {
+        GetCurrentDateThread(int callCount) {
             this.callCount = callCount;
         }
 

==================================================
TestParameters.java
index 03f7009291..118294c61c 100644
--- a/test/org/apache/tomcat/util/http/TestMimeHeadersIntegration.java
+++ b/test/org/apache/tomcat/util/http/TestMimeHeadersIntegration.java
@@ -169,7 +169,7 @@ public class TestMimeHeadersIntegration extends TomcatBaseTest {
     }
 
     private static final class Client extends SimpleHttpClient {
-        public Client(Tomcat tomcat) {
+        Client(Tomcat tomcat) {
             setPort(tomcat.getConnector().getLocalPort());
         }
 

==================================================
TestRequestUtilSameOrigin.java
index b911e60fe3..885b563fe2 100644
--- a/test/org/apache/tomcat/util/http/TestParameters.java
+++ b/test/org/apache/tomcat/util/http/TestParameters.java
@@ -274,7 +274,7 @@ public class TestParameters {
         private final String name;
         private final String[] values;
 
-        public Parameter(String name, String... values) {
+        Parameter(String name, String... values) {
             this.name = name;
             this.values = values;
         }

==================================================
TestMediaType.java
index fe64af2fd6..49882c3204 100644
--- a/test/org/apache/tomcat/util/http/TestRequestUtilSameOrigin.java
+++ b/test/org/apache/tomcat/util/http/TestRequestUtilSameOrigin.java
@@ -83,7 +83,7 @@ public class TestRequestUtilSameOrigin {
         private final String host;
         private final int port;
 
-        public TesterRequest(String scheme, String host, int port) {
+        TesterRequest(String scheme, String host, int port) {
             super(new Request(null));
             this.scheme = scheme;
             this.host = host;

==================================================
TestCipher.java
index 1ab82ffad0..c66c317f71 100644
--- a/test/org/apache/tomcat/util/http/parser/TestMediaType.java
+++ b/test/org/apache/tomcat/util/http/parser/TestMediaType.java
@@ -271,7 +271,7 @@ public class TestMediaType {
         private final String name;
         private final String value;
 
-        public Parameter(String name,String value) {
+        Parameter(String name,String value) {
             this.name = name;
             this.value = value;
         }

==================================================
TestLimitLatch.java
index ab5e033b18..9b9eb5ead7 100644
--- a/test/org/apache/tomcat/util/net/openssl/ciphers/TestCipher.java
+++ b/test/org/apache/tomcat/util/net/openssl/ciphers/TestCipher.java
@@ -751,7 +751,7 @@ public class TestCipher {
         private final Set<String> standardNames;
         private final Set<String> openSslUnmapped;
 
-        public JsseImpl(String vendor,  Set<String> standardNames,
+        JsseImpl(String vendor,  Set<String> standardNames,
                 Set<String> openSslUnmapped) {
             this.vendor = vendor;
             this.standardNames = standardNames;

==================================================
TestUtil.java
index a1541ca152..4538f51aed 100644
--- a/test/org/apache/tomcat/util/threads/TestLimitLatch.java
+++ b/test/org/apache/tomcat/util/threads/TestLimitLatch.java
@@ -206,7 +206,7 @@ public class TestLimitLatch {
         private final LimitLatch latch;
         private volatile int stage = 0;
 
-        public TestThread(LimitLatch latch, Object lock) {
+        TestThread(LimitLatch latch, Object lock) {
             this.latch = latch;
             this.lock = lock;
         }

==================================================
TesterFirehoseServer.java
index 6a3458f6f3..1364f6faed 100644
--- a/test/org/apache/tomcat/websocket/TestUtil.java
+++ b/test/org/apache/tomcat/websocket/TestUtil.java
@@ -152,7 +152,7 @@ public class TestUtil {
     }
 
 
-    private static interface Foo<T> {
+    private interface Foo<T> {
         void doSomething(T thing);
     }
 

==================================================
Stockticker.java
index b4c3692771..cae75528ad 100644
--- a/test/org/apache/tomcat/websocket/TesterFirehoseServer.java
+++ b/test/org/apache/tomcat/websocket/TesterFirehoseServer.java
@@ -142,7 +142,7 @@ public class TesterFirehoseServer {
 
         private final Session session;
 
-        public Writer(Session session) {
+        Writer(Session session) {
             this.session = session;
         }
 

==================================================
FooTag.java
index 07a100090a..d3488f6442 100644
--- a/webapps/examples/WEB-INF/classes/async/Stockticker.java
+++ b/webapps/examples/WEB-INF/classes/async/Stockticker.java
@@ -118,9 +118,9 @@ public class Stockticker implements Runnable {
         }
 
 
-    public static interface TickListener {
-        public void tick(Stock stock);
-        public void shutdown();
+    public interface TickListener {
+        void tick(Stock stock);
+        void shutdown();
     }
 
     public static final class Stock implements Cloneable {

==================================================
Room.java
index c88634549f..8f2af8c146 100644
--- a/webapps/examples/WEB-INF/classes/examples/FooTag.java
+++ b/webapps/examples/WEB-INF/classes/examples/FooTag.java
@@ -35,7 +35,7 @@ public class FooTag extends ExampleTagBase {
     private final String atts[] = new String[3];
     int i = 0;
 
-    private final void setAtt(int index, String value) {
+    private void setAtt(int index, String value) {
         atts[index] = value;
     }
 

==================================================
