cc80aa7310bc5437d99e8debfcfc659e961e2811
==================================================
Plumb in the remaining constants
==================================================
Mark Emlyn
==================================================
Wed Feb 1 20:11:26 2012 +0000
==================================================
Globals.java
Plumb in the remaining constants

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1239298 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Request.java
index 1224a1bb66..b5624800fc 100644
--- a/java/org/apache/catalina/Globals.java
+++ b/java/org/apache/catalina/Globals.java
@@ -177,9 +177,11 @@ public final class Globals {
     /**
      * The request attribute that is set to the value of {@code Boolean.TRUE}
      * if connector processing this request supports use of sendfile.
+     *
+     * Duplicated here for neater code in the catalina packages.
      */
     public static final String SENDFILE_SUPPORTED_ATTR =
-        "org.apache.tomcat.sendfile.support";
+            org.apache.coyote.Constants.SENDFILE_SUPPORTED_ATTR;
 
 
     /**
@@ -187,9 +189,11 @@ public final class Globals {
      * to the connector the name of the file that is to be served
      * by sendfile. The value should be {@code java.lang.String}
      * that is {@code File.getCanonicalPath()} of the file to be served.
+     *
+     * Duplicated here for neater code in the catalina packages.
      */
     public static final String SENDFILE_FILENAME_ATTR =
-        "org.apache.tomcat.sendfile.filename";
+            org.apache.coyote.Constants.SENDFILE_FILENAME_ATTR;
 
 
     /**
@@ -198,9 +202,11 @@ public final class Globals {
      * that is to be served by sendfile. The value should be
      * {@code java.lang.Long}. To serve complete file
      * the value should be {@code Long.valueOf(0)}.
+     *
+     * Duplicated here for neater code in the catalina packages.
      */
     public static final String SENDFILE_FILE_START_ATTR =
-        "org.apache.tomcat.sendfile.start";
+            org.apache.coyote.Constants.SENDFILE_FILE_START_ATTR;
 
 
     /**
@@ -209,9 +215,11 @@ public final class Globals {
      * of a file that is to be served by sendfile. The value should be
      * {@code java.lang.Long}. To serve complete file
      * the value should be equal to the length of the file.
+     *
+     * Duplicated here for neater code in the catalina packages.
      */
     public static final String SENDFILE_FILE_END_ATTR =
-        "org.apache.tomcat.sendfile.end";
+            org.apache.coyote.Constants.SENDFILE_FILE_END_ATTR;
 
 
     /**

==================================================
DefaultServlet.java
index 1007e1e49e..3a1c919468 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -1449,7 +1449,7 @@ public class Request
 
         // Do the security check before any updates are made
         if (Globals.IS_SECURITY_ENABLED &&
-                name.equals("org.apache.tomcat.sendfile.filename")) {
+                name.equals(Globals.SENDFILE_FILENAME_ATTR)) {
             // Use the canonical file name to avoid any possible symlink and
             // relative path issues
             String canonicalPath;

==================================================
AccessLogValve.java
index 2045a9eb62..fd4607756b 100644
--- a/java/org/apache/catalina/servlets/DefaultServlet.java
+++ b/java/org/apache/catalina/servlets/DefaultServlet.java
@@ -1641,16 +1641,16 @@ public class DefaultServlet
             && (entry.resource != null)
             && ((length > sendfileSize) || (entry.resource.getContent() == null))
             && (entry.attributes.getCanonicalPath() != null)
-            && (Boolean.TRUE == request.getAttribute("org.apache.tomcat.sendfile.support"))
+            && (Boolean.TRUE == request.getAttribute(Globals.SENDFILE_SUPPORTED_ATTR))
             && (request.getClass().getName().equals("org.apache.catalina.connector.RequestFacade"))
             && (response.getClass().getName().equals("org.apache.catalina.connector.ResponseFacade"))) {
-            request.setAttribute("org.apache.tomcat.sendfile.filename", entry.attributes.getCanonicalPath());
+            request.setAttribute(Globals.SENDFILE_FILENAME_ATTR, entry.attributes.getCanonicalPath());
             if (range == null) {
-                request.setAttribute("org.apache.tomcat.sendfile.start", Long.valueOf(0L));
-                request.setAttribute("org.apache.tomcat.sendfile.end", Long.valueOf(length));
+                request.setAttribute(Globals.SENDFILE_FILE_START_ATTR, Long.valueOf(0L));
+                request.setAttribute(Globals.SENDFILE_FILE_END_ATTR, Long.valueOf(length));
             } else {
-                request.setAttribute("org.apache.tomcat.sendfile.start", Long.valueOf(range.start));
-                request.setAttribute("org.apache.tomcat.sendfile.end", Long.valueOf(range.end + 1));
+                request.setAttribute(Globals.SENDFILE_FILE_START_ATTR, Long.valueOf(range.start));
+                request.setAttribute(Globals.SENDFILE_FILE_END_ATTR, Long.valueOf(range.end + 1));
             }
             return true;
         }

==================================================
Constants.java
index b01fbea47a..66ab0b7d40 100644
--- a/java/org/apache/catalina/valves/AccessLogValve.java
+++ b/java/org/apache/catalina/valves/AccessLogValve.java
@@ -1621,10 +1621,10 @@ public class AccessLogValve extends ValveBase implements AccessLog {
                 // Protect against nulls and unexpected types as these values
                 // may be set by untrusted applications
                 Object start = request.getAttribute(
-                        "org.apache.tomcat.sendfile.start");
+                        Globals.SENDFILE_FILE_START_ATTR);
                 if (start instanceof Long) {
                     Object end = request.getAttribute(
-                            "org.apache.tomcat.sendfile.end");
+                            Globals.SENDFILE_FILE_END_ATTR);
                     if (end instanceof Long) {
                         length = ((Long) end).longValue() -
                                 ((Long) start).longValue();

==================================================
AbstractHttp11Processor.java
index 2040f47cd8..6831ef0752 100644
--- a/java/org/apache/coyote/Constants.java
+++ b/java/org/apache/coyote/Constants.java
@@ -88,4 +88,44 @@ public final class Constants {
      */
     public static final String COMET_TIMEOUT_ATTR =
         "org.apache.tomcat.comet.timeout";
+
+
+    /**
+     * The request attribute that is set to the value of {@code Boolean.TRUE}
+     * if connector processing this request supports use of sendfile.
+     */
+    public static final String SENDFILE_SUPPORTED_ATTR =
+        "org.apache.tomcat.sendfile.support";
+
+
+    /**
+     * The request attribute that can be used by a servlet to pass
+     * to the connector the name of the file that is to be served
+     * by sendfile. The value should be {@code java.lang.String}
+     * that is {@code File.getCanonicalPath()} of the file to be served.
+     */
+    public static final String SENDFILE_FILENAME_ATTR =
+        "org.apache.tomcat.sendfile.filename";
+
+
+    /**
+     * The request attribute that can be used by a servlet to pass
+     * to the connector the start offset of the part of a file
+     * that is to be served by sendfile. The value should be
+     * {@code java.lang.Long}. To serve complete file
+     * the value should be {@code Long.valueOf(0)}.
+     */
+    public static final String SENDFILE_FILE_START_ATTR =
+        "org.apache.tomcat.sendfile.start";
+
+
+    /**
+     * The request attribute that can be used by a servlet to pass
+     * to the connector the end offset (not including) of the part
+     * of a file that is to be served by sendfile. The value should be
+     * {@code java.lang.Long}. To serve complete file
+     * the value should be equal to the length of the file.
+     */
+    public static final String SENDFILE_FILE_END_ATTR =
+        "org.apache.tomcat.sendfile.end";
 }

==================================================
Http11AprProcessor.java
index fcc0ca0344..4022a624f5 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -1273,7 +1273,8 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
 
         // Advertise sendfile support through a request attribute
         if (endpoint.getUseSendfile()) {
-            request.setAttribute("org.apache.tomcat.sendfile.support",
+            request.setAttribute(
+                    org.apache.coyote.Constants.SENDFILE_SUPPORTED_ATTR,
                     Boolean.TRUE);
         }
 

==================================================
Http11NioProcessor.java
index c9b354d1d6..499ec2649d 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -486,7 +486,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
     @Override
     protected boolean prepareSendfile(OutputFilter[] outputFilters) {
         String fileName = (String) request.getAttribute(
-                "org.apache.tomcat.sendfile.filename");
+                org.apache.coyote.Constants.SENDFILE_FILENAME_ATTR);
         if (fileName != null) {
             // No entity body sent here
             outputBuffer.addActiveFilter(outputFilters[Constants.VOID_FILTER]);
@@ -494,9 +494,9 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
             sendfileData = new AprEndpoint.SendfileData();
             sendfileData.fileName = fileName;
             sendfileData.start = ((Long) request.getAttribute(
-                    "org.apache.tomcat.sendfile.start")).longValue();
+                    org.apache.coyote.Constants.SENDFILE_FILE_START_ATTR)).longValue();
             sendfileData.end = ((Long) request.getAttribute(
-                    "org.apache.tomcat.sendfile.end")).longValue();
+                    org.apache.coyote.Constants.SENDFILE_FILE_END_ATTR)).longValue();
             return true;
         }
         return false;

==================================================
