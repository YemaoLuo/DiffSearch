6f7064b2993822c02590bc04d0bbe112a69531f8
==================================================
Don't duplicate storage of noCompressionUserAgents in the Processor
==================================================
Mark Thomas
==================================================
Wed Dec 14 11:05:10 2016 +0000
==================================================
AbstractHttp11Protocol.java
Don't duplicate storage of noCompressionUserAgents in the Processor

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1774177 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11Processor.java
index 4b252e85b8..79f46579ba 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -163,12 +163,36 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     public void setCompression(String valueS) { compression = valueS; }
 
 
-    private String noCompressionUserAgents = null;
+    private Pattern noCompressionUserAgents = null;
+    /**
+     * Obtain the String form of the regular expression that defines the user
+     * agents to not use gzip with.
+     */
     public String getNoCompressionUserAgents() {
+        if (noCompressionUserAgents == null) {
+            return null;
+        } else {
+            return noCompressionUserAgents.toString();
+        }
+    }
+    protected Pattern getNoCompressionUserAgentsPattern() {
         return noCompressionUserAgents;
     }
-    public void setNoCompressionUserAgents(String valueS) {
-        noCompressionUserAgents = valueS;
+    /**
+     * Set no compression user agent pattern. Regular expression as supported
+     * by {@link Pattern}. e.g.: <code>gorilla|desesplorer|tigrus</code>.
+     *
+     * @param noCompressionUserAgents The regular expression for user agent
+     *                                strings for which compression should not
+     *                                be applied
+     */
+    public void setNoCompressionUserAgents(String noCompressionUserAgents) {
+        if (noCompressionUserAgents == null || noCompressionUserAgents.length() == 0) {
+            this.noCompressionUserAgents = null;
+        } else {
+            this.noCompressionUserAgents =
+                Pattern.compile(noCompressionUserAgents);
+        }
     }
 
 
@@ -229,8 +253,7 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
      *                             "gorilla|desesplorer|tigrus"
      */
     public void setRestrictedUserAgents(String restrictedUserAgents) {
-        if (restrictedUserAgents == null ||
-                restrictedUserAgents.length() == 0) {
+        if (restrictedUserAgents == null || restrictedUserAgents.length() == 0) {
             this.restrictedUserAgents = null;
         } else {
             this.restrictedUserAgents = Pattern.compile(restrictedUserAgents);
@@ -710,7 +733,6 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
         processor.setAdapter(getAdapter());
         processor.setCompressionMinSize(getCompressionMinSize());
         processor.setCompression(getCompression());
-        processor.setNoCompressionUserAgents(getNoCompressionUserAgents());
         return processor;
     }
 

==================================================
