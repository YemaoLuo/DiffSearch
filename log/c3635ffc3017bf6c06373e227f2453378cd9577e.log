c3635ffc3017bf6c06373e227f2453378cd9577e
==================================================
Re-factoring in support of https://issues.apache.org/bugzilla/show_bug.cgi?id=50360
==================================================
Mark Emlyn
==================================================
Mon Dec 6 22:06:52 2010 +0000
==================================================
AbstractProtocolHandler.java
Re-factoring in support of https://issues.apache.org/bugzilla/show_bug.cgi?id=50360
Pull up JMX related methods
Tidy up the remaining protocol specific methods

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1042814 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractAjpProtocol.java
index a5524e1323..392bad0eb2 100644
--- a/java/org/apache/coyote/AbstractProtocolHandler.java
+++ b/java/org/apache/coyote/AbstractProtocolHandler.java
@@ -22,6 +22,7 @@ import java.util.Iterator;
 import java.util.concurrent.Executor;
 
 import javax.management.MBeanRegistration;
+import javax.management.MBeanServer;
 import javax.management.ObjectName;
 
 import org.apache.juli.logging.Log;
@@ -252,10 +253,76 @@ public abstract class AbstractProtocolHandler implements ProtocolHandler,
     }
 
 
+    // ---------------------------------------------------------- Public methods
+
+    /**
+     * The name will be prefix-address-port if address is non-null and
+     * prefix-port if the address is null. The name will be appropriately quoted
+     * so it can be used directly in an ObjectName.
+     */
+    public String getName() {
+        StringBuilder name = new StringBuilder(getNamePrefix());
+        name.append('-');
+        if (getAddress() != null) {
+            name.append(getAddress());
+            name.append('-');
+        }
+        name.append(endpoint.getPort());
+        return ObjectName.quote(name.toString());
+    }
+
+    
     // -------------------------------------------------------- Abstract methods
+    
     /**
      * Concrete implementations need to provide access to their logger to be
      * used by the abstract classes.
      */
     protected abstract Log getLog();
+    
+    
+    /**
+     * Obtain the prefix to be used when construction a name for this protocol
+     * handler. The name will be prefix-address-port.
+     */
+    protected abstract String getNamePrefix();
+
+
+    // ----------------------------------------------------- JMX related methods
+
+    protected String domain;
+    protected ObjectName oname;
+    protected MBeanServer mserver;
+
+    public ObjectName getObjectName() {
+        return oname;
+    }
+
+    public String getDomain() {
+        return domain;
+    }
+
+    @Override
+    public ObjectName preRegister(MBeanServer server, ObjectName name)
+            throws Exception {
+        oname = name;
+        mserver = server;
+        domain = name.getDomain();
+        return name;
+    }
+
+    @Override
+    public void postRegister(Boolean registrationDone) {
+        // NOOP
+    }
+
+    @Override
+    public void preDeregister() throws Exception {
+        // NOOP
+    }
+
+    @Override
+    public void postDeregister() {
+        // NOOP
+    }
 }

==================================================
AbstractHttp11JsseProtocol.java
index 5d0e055d3d..cb666b310e 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -16,21 +16,66 @@
  */
 package org.apache.coyote.ajp;
 
-import java.net.URLEncoder;
-
-import javax.management.MBeanServer;
-import javax.management.ObjectName;
-
 import org.apache.coyote.AbstractProtocolHandler;
 import org.apache.tomcat.util.modeler.Registry;
 import org.apache.tomcat.util.res.StringManager;
 
 public abstract class AbstractAjpProtocol extends AbstractProtocolHandler {
+    
     /**
      * The string manager for this package.
      */
-    protected static final StringManager sm = StringManager.getManager(Constants.Package);
-        
+    protected static final StringManager sm =
+        StringManager.getManager(Constants.Package);
+
+
+    // ------------------------------------------------- AJP specific properties
+    // ------------------------------------------ managed in the ProtocolHandler
+    
+    /**
+     * Should authentication be done in the native webserver layer, 
+     * or in the Servlet container ?
+     */
+    protected boolean tomcatAuthentication = true;
+    public boolean getTomcatAuthentication() { return tomcatAuthentication; }
+    public void setTomcatAuthentication(boolean tomcatAuthentication) {
+        this.tomcatAuthentication = tomcatAuthentication;
+    }
+
+
+    /**
+     * Required secret.
+     */
+    protected String requiredSecret = null;
+    public void setRequiredSecret(String requiredSecret) {
+        this.requiredSecret = requiredSecret;
+    }
+
+
+    /**
+     * AJP packet size.
+     */
+    protected int packetSize = Constants.MAX_PACKET_SIZE;
+    public int getPacketSize() { return packetSize; }
+    public void setPacketSize(int packetSize) {
+        if(packetSize < Constants.MAX_PACKET_SIZE) {
+            this.packetSize = Constants.MAX_PACKET_SIZE;
+        } else {
+            this.packetSize = packetSize;
+        }
+    }
+
+
+    // ----------------------------------------------------- JMX related methods
+
+    @Override
+    protected String getNamePrefix() {
+        return ("ajp");
+    }
+    
+    
+    // ------------------------------------------------------- Lifecycle methods
+
     @Override
     public void pause() throws Exception {
         try {
@@ -43,18 +88,21 @@ public abstract class AbstractAjpProtocol extends AbstractProtocolHandler {
             getLog().info(sm.getString("ajpprotocol.pause", getName()));
     }
 
+
     @Override
     public void resume() throws Exception {
         try {
             endpoint.resume();
         } catch (Exception ex) {
-            getLog().error(sm.getString("ajpprotocol.endpoint.resumeerror"), ex);
+            getLog().error(sm.getString("ajpprotocol.endpoint.resumeerror"),
+                    ex);
             throw ex;
         }
         if (getLog().isInfoEnabled())
             getLog().info(sm.getString("ajpprotocol.resume", getName()));
     }
 
+
     @Override
     public void stop() throws Exception {
         try {
@@ -67,6 +115,7 @@ public abstract class AbstractAjpProtocol extends AbstractProtocolHandler {
             getLog().info(sm.getString("ajpprotocol.stop", getName()));
     }
 
+
     @Override
     public void destroy() throws Exception {
         if (getLog().isInfoEnabled())
@@ -77,81 +126,4 @@ public abstract class AbstractAjpProtocol extends AbstractProtocolHandler {
         if (rgOname != null)
             Registry.getRegistry(null, null).unregisterComponent(rgOname);
     }
-
-    public String getName() {
-        String encodedAddr = "";
-        if (getAddress() != null) {
-            encodedAddr = "" + getAddress();
-            if (encodedAddr.startsWith("/"))
-                encodedAddr = encodedAddr.substring(1);
-            encodedAddr = URLEncoder.encode(encodedAddr) + "-";
-        }
-        return ("ajp-" + encodedAddr + endpoint.getPort());
-    }
-
-    /**
-     * Should authentication be done in the native webserver layer, 
-     * or in the Servlet container ?
-     */
-    protected boolean tomcatAuthentication = true;
-    public boolean getTomcatAuthentication() { return tomcatAuthentication; }
-    public void setTomcatAuthentication(boolean tomcatAuthentication) { this.tomcatAuthentication = tomcatAuthentication; }
-
-    /**
-     * Required secret.
-     */
-    protected String requiredSecret = null;
-    public void setRequiredSecret(String requiredSecret) { this.requiredSecret = requiredSecret; }
-    
-    /**
-     * AJP packet size.
-     */
-    protected int packetSize = Constants.MAX_PACKET_SIZE;
-    public int getPacketSize() { return packetSize; }
-    public void setPacketSize(int packetSize) {
-        if(packetSize < Constants.MAX_PACKET_SIZE) {
-            this.packetSize = Constants.MAX_PACKET_SIZE;
-        } else {
-            this.packetSize = packetSize;
-        }
-    }
-
-    
-    // -------------------- JMX related methods --------------------
-
-    protected String domain;
-    protected ObjectName oname;
-    protected MBeanServer mserver;
-
-    public ObjectName getObjectName() {
-        return oname;
-    }
-
-    public String getDomain() {
-        return domain;
-    }
-
-    @Override
-    public ObjectName preRegister(MBeanServer server,
-                                  ObjectName name) throws Exception {
-        oname=name;
-        mserver=server;
-        domain=name.getDomain();
-        return name;
-    }
-
-    @Override
-    public void postRegister(Boolean registrationDone) {
-        // NOOP
-    }
-
-    @Override
-    public void preDeregister() throws Exception {
-        // NOOP
-    }
-
-    @Override
-    public void postDeregister() {
-        // NOOP
-    }
 }

==================================================
AbstractHttp11Protocol.java
index c6eeca6e34..42a3a1273b 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11JsseProtocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11JsseProtocol.java
@@ -16,9 +16,13 @@
  */
 package org.apache.coyote.http11;
 
+import org.apache.tomcat.util.net.SSLImplementation;
+
 public abstract class AbstractHttp11JsseProtocol
         extends AbstractHttp11Protocol {
 
+    protected SSLImplementation sslImplementation = null;
+
     public String getAlgorithm() { return endpoint.getAlgorithm();}
     public void setAlgorithm(String s ) { endpoint.setAlgorithm(s);}
     

==================================================
