7601f15bc3ce83183d948f7551338d8243bcf365
==================================================
More unit tests for BeanNameELResolver and fix an exception handling problem identified by the new tests.
==================================================
Mark Emlyn
==================================================
Thu Jul 4 15:06:21 2013 +0000
==================================================
BeanNameELResolver.java
More unit tests for BeanNameELResolver and fix an exception handling problem identified by the new tests.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1499778 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestBeanNameELResolver.java
index 6cc1f4f403..b506533062 100644
--- a/java/javax/el/BeanNameELResolver.java
+++ b/java/javax/el/BeanNameELResolver.java
@@ -43,8 +43,14 @@ public class BeanNameELResolver extends ELResolver {
         String beanName = (String) property;
 
         if (beanNameResolver.isNameResolved(beanName)) {
-            context.setPropertyResolved(true);
-            return beanNameResolver.getBean((String) property);
+            try {
+                Object result = beanNameResolver.getBean((String) property);
+                context.setPropertyResolved(true);
+                return result;
+            } catch (Throwable t) {
+                Util.handleThrowable(t);
+                throw new ELException(t);
+            }
         }
 
         return null;

==================================================
TesterBeanNameResolver.java
index 61f7d9bf37..6d12434f78 100644
--- a/test/javax/el/TestBeanNameELResolver.java
+++ b/test/javax/el/TestBeanNameELResolver.java
@@ -25,6 +25,7 @@ public class TestBeanNameELResolver {
     private static final TesterBean BEAN01 = new TesterBean(BEAN01_NAME);
     private static final String BEAN02_NAME = "bean02";
     private static final TesterBean BEAN02 = new TesterBean(BEAN02_NAME);
+    private static final String BEAN99_NAME = "bean99";
 
     /**
      * Creates the resolver that is used for the test. All the tests use a
@@ -65,6 +66,104 @@ public class TestBeanNameELResolver {
         Object result = resolver.getValue(context, null, BEAN01_NAME);
 
         Assert.assertEquals(BEAN01, result);
+        Assert.assertTrue(context.isPropertyResolved());
     }
 
+
+    /**
+     * Tests that a valid bean is not resolved if base is non-null.
+     */
+    @Test
+    public void testGetValue03() {
+
+        BeanNameELResolver resolver = createBeanNameELResolver();
+        ELContext context =
+                new StandardELContext(ELManager.getExpressionFactory());
+
+        Object result = resolver.getValue(context, new Object(), BEAN01_NAME);
+
+        Assert.assertNull(result);
+        Assert.assertFalse(context.isPropertyResolved());
+    }
+
+
+    /**
+     * Tests that a valid bean is not resolved if property is not a String even
+     * if it can be coerced to a valid bean name.
+     */
+    @Test
+    public void testGetValue04() {
+
+        BeanNameELResolver resolver = createBeanNameELResolver();
+        ELContext context =
+                new StandardELContext(ELManager.getExpressionFactory());
+
+        Object property = new Object() {
+            @Override
+            public String toString() {
+                return BEAN01_NAME;
+            }
+        };
+
+        Object result = resolver.getValue(context, null, property);
+
+        Assert.assertNull(result);
+        Assert.assertFalse(context.isPropertyResolved());
+    }
+
+
+    /**
+     * Beans that don't exist shouldn't return anything
+     */
+    @Test
+    public void testGetValue05() {
+
+        BeanNameELResolver resolver = createBeanNameELResolver();
+        ELContext context =
+                new StandardELContext(ELManager.getExpressionFactory());
+
+        Object result = resolver.getValue(context, null, BEAN99_NAME);
+
+        Assert.assertNull(result);
+        Assert.assertFalse(context.isPropertyResolved());
+    }
+
+
+    /**
+     * Exception during resolution should be wrapped and re-thrown.
+     */
+    @Test
+    public void testGetValue06() {
+        doGetValueThrowableTest(TesterBeanNameResolver.EXCEPTION_TRIGGER_NAME);
+    }
+
+
+    /**
+     * Throwable during resolution should be wrapped and re-thrown.
+     */
+    @Test
+    public void testGetValue07() {
+        doGetValueThrowableTest(TesterBeanNameResolver.THROWABLE_TRIGGER_NAME);
+    }
+
+
+    private void doGetValueThrowableTest(String trigger) {
+        BeanNameELResolver resolver = createBeanNameELResolver();
+        ELContext context =
+                new StandardELContext(ELManager.getExpressionFactory());
+
+        ELException elException = null;
+        try {
+            resolver.getValue(context, null,trigger);
+        } catch (ELException e) {
+            elException = e;
+        }
+
+        Assert.assertFalse(context.isPropertyResolved());
+        Assert.assertNotNull(elException);
+
+        @SuppressWarnings("null") // Can't be null due to assertion above
+        Throwable cause = elException.getCause();
+        Assert.assertNotNull(cause);
+    }
 }

==================================================
