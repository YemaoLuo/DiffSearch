c935bd5a1055fd1996c0c82daf53f2017a0c2a79
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=62978
==================================================
Mark Thomas
==================================================
Thu Dec 6 14:30:51 2018 +0000
==================================================
RemoteIpValve.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=62978
Update the RemoteIpValve to handle multiple values in the x-forwarded-proto header.
Patch provided by Tom Groot.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1848320 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestRemoteIpValve.java
index 4466677b31..798c15be68 100644
--- a/java/org/apache/catalina/valves/RemoteIpValve.java
+++ b/java/org/apache/catalina/valves/RemoteIpValve.java
@@ -60,7 +60,7 @@ import org.apache.tomcat.util.http.MimeHeaders;
  * <li>otherwise, the ip/host is declared to be the remote ip and looping is stopped.</li>
  * </ul>
  * </li>
- * <li>If the request http header named <code>$protocolHeader</code> (e.g. <code>x-forwarded-for</code>) equals to the value of
+ * <li>If the request http header named <code>$protocolHeader</code> (e.g. <code>x-forwarded-proto</code>) consists only of forwards that match
  * <code>protocolHeaderHttpsValue</code> configuration parameter (default <code>https</code>) then <code>request.isSecure = true</code>,
  * <code>request.scheme = https</code> and <code>request.serverPort = 443</code>. Note that 443 can be overwritten with the
  * <code>$httpsServerPort</code> configuration parameter.</li>
@@ -642,7 +642,7 @@ public class RemoteIpValve extends ValveBase {
                 if (protocolHeaderValue == null) {
                     // don't modify the secure,scheme and serverPort attributes
                     // of the request
-                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {
+                } else if (isForwardedProtoHeaderValueSecure(protocolHeaderValue)) {
                     request.setSecure(true);
                     // use request.coyoteRequest.scheme instead of request.setScheme() because request.setScheme() is no-op in Tomcat 6.0
                     request.getCoyoteRequest().scheme().setString("https");
@@ -709,6 +709,26 @@ public class RemoteIpValve extends ValveBase {
         }
     }
 
+    /**
+     * Considers the value to be secure if it exclusively holds forwards for
+     * {@link #protocolHeaderHttpsValue}.
+     */
+    private boolean isForwardedProtoHeaderValueSecure(String protocolHeaderValue) {
+        if (!protocolHeaderValue.contains(",")) {
+            return protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue);
+        }
+        String[] forwardedProtocols = commaDelimitedListToStringArray(protocolHeaderValue);
+        if (forwardedProtocols.length == 0) {
+            return false;
+        }
+        for (int i = 0; i < forwardedProtocols.length; i++) {
+            if (!protocolHeaderHttpsValue.equalsIgnoreCase(forwardedProtocols[i])) {
+                return false;
+            }
+        }
+        return true;
+    }
+
     private void setPorts(Request request, int defaultPort) {
         int port = defaultPort;
         if (portHeader != null) {

==================================================
