0c9a9e9169a844d892288ab69c919dac9560692a
==================================================
Fix modifier order in javax.*
==================================================
Mark Emlyn
==================================================
Tue Dec 7 15:36:36 2010 +0000
==================================================
ArrayELResolver.java
Fix modifier order in javax.*

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1043098 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BeanELResolver.java
index 0087546e65..a319d60e02 100644
--- a/java/javax/el/ArrayELResolver.java
+++ b/java/javax/el/ArrayELResolver.java
@@ -145,14 +145,14 @@ public class ArrayELResolver extends ELResolver {
         return null;
     }
 
-    private final static void checkBounds(Object base, int idx) {
+    private static final void checkBounds(Object base, int idx) {
         if (idx < 0 || idx >= Array.getLength(base)) {
             throw new PropertyNotFoundException(
                     new ArrayIndexOutOfBoundsException(idx).getMessage());
         }
     }
 
-    private final static int coerce(Object property) {
+    private static final int coerce(Object property) {
         if (property instanceof Number) {
             return ((Number) property).intValue();
         }

==================================================
CompositeELResolver.java
index 3476dc1ee5..4f286cbcf1 100644
--- a/java/javax/el/BeanELResolver.java
+++ b/java/javax/el/BeanELResolver.java
@@ -197,7 +197,7 @@ public class BeanELResolver extends ELResolver {
         return null;
     }
 
-    protected final static class BeanProperties {
+    protected static final class BeanProperties {
         private final Map<String, BeanProperty> properties;
 
         private final Class<?> type;
@@ -236,7 +236,7 @@ public class BeanELResolver extends ELResolver {
         }
     }
 
-    protected final static class BeanProperty {
+    protected static final class BeanProperty {
         private final Class<?> type;
 
         private final Class<?> owner;
@@ -254,7 +254,8 @@ public class BeanELResolver extends ELResolver {
         }
 
         // Can't use Class<?> because API needs to match specification
-        public @SuppressWarnings("rawtypes") Class getPropertyType() {
+        @SuppressWarnings("rawtypes")
+        public Class getPropertyType() {
             return this.type;
         }
 
@@ -310,7 +311,7 @@ public class BeanELResolver extends ELResolver {
         return props.get(ctx, prop);
     }
 
-    private final static Method getMethod(Class<?> type, Method m) {
+    private static final Method getMethod(Class<?> type, Method m) {
         if (m == null || Modifier.isPublic(type.getModifiers())) {
             return m;
         }
@@ -342,7 +343,7 @@ public class BeanELResolver extends ELResolver {
         return null;
     }
     
-    private final static class ConcurrentCache<K,V> {
+    private static final class ConcurrentCache<K,V> {
 
         private final int size;
         private final Map<K,V> eden;

==================================================
ELResolver.java
index 6d3065513c..57f31b6134 100644
--- a/java/javax/el/CompositeELResolver.java
+++ b/java/javax/el/CompositeELResolver.java
@@ -153,7 +153,7 @@ public class CompositeELResolver extends ELResolver {
         return null;
     }
 
-    private final static class FeatureIterator implements Iterator<FeatureDescriptor> {
+    private static final class FeatureIterator implements Iterator<FeatureDescriptor> {
 
         private final ELContext context;
 

==================================================
ListELResolver.java
index 429d6da93d..4c905039f0 100644
--- a/java/javax/el/ELResolver.java
+++ b/java/javax/el/ELResolver.java
@@ -51,9 +51,9 @@ public abstract class ELResolver {
         }
     }
 
-    public final static String RESOLVABLE_AT_DESIGN_TIME = "resolvableAtDesignTime";
+    public static final String RESOLVABLE_AT_DESIGN_TIME = "resolvableAtDesignTime";
     
-    public final static String TYPE = "type";
+    public static final String TYPE = "type";
     
     public abstract Object getValue(ELContext context, Object base, Object property) throws NullPointerException, PropertyNotFoundException, ELException;
     

==================================================
MapELResolver.java
index 90962b6f3d..989fcb56e7 100644
--- a/java/javax/el/ListELResolver.java
+++ b/java/javax/el/ListELResolver.java
@@ -28,7 +28,7 @@ public class ListELResolver extends ELResolver {
 
     private final boolean readOnly;
 
-    private final static Class<?> UNMODIFIABLE =
+    private static final Class<?> UNMODIFIABLE =
         Collections.unmodifiableList(new ArrayList<Object>()).getClass();
 
     public ListELResolver() {
@@ -160,7 +160,7 @@ public class ListELResolver extends ELResolver {
         return null;
     }
 
-    private final static int coerce(Object property) {
+    private static final int coerce(Object property) {
         if (property instanceof Number) {
             return ((Number) property).intValue();
         }

==================================================
ResourceBundleELResolver.java
index 14e47e2038..e7aa462d91 100644
--- a/java/javax/el/MapELResolver.java
+++ b/java/javax/el/MapELResolver.java
@@ -27,7 +27,7 @@ import java.util.Map;
 
 public class MapELResolver extends ELResolver {
 
-    private final static Class<?> UNMODIFIABLE = Collections.unmodifiableMap(
+    private static final Class<?> UNMODIFIABLE = Collections.unmodifiableMap(
             new HashMap<Object, Object>()).getClass();
 
     private final boolean readOnly;

==================================================
HttpUtils.java
index 6e41b59bc0..f10ae4134a 100644
--- a/java/javax/el/ResourceBundleELResolver.java
+++ b/java/javax/el/ResourceBundleELResolver.java
@@ -100,8 +100,10 @@ public class ResourceBundleELResolver extends ELResolver {
     }
 
     @Override
-    // Can't use Iterator<FeatureDescriptor> because API needs to match specification
-    public @SuppressWarnings({ "unchecked", "rawtypes" }) Iterator getFeatureDescriptors(
+    // Can't use Iterator<FeatureDescriptor> because API needs to match
+    // specification
+    @SuppressWarnings({ "unchecked", "rawtypes" }) 
+    public Iterator getFeatureDescriptors(
             ELContext context, Object base) {
         if (base instanceof ResourceBundle) {
             List<FeatureDescriptor> feats = new ArrayList<FeatureDescriptor>();

==================================================
JspContext.java
index 955a7ef585..ba756e6fb3 100644
--- a/java/javax/servlet/http/HttpUtils.java
+++ b/java/javax/servlet/http/HttpUtils.java
@@ -79,7 +79,7 @@ public class HttpUtils {
      *                                                is invalid
      *
      */
-    static public Hashtable<String,String[]> parseQueryString(String s) {
+    public static Hashtable<String,String[]> parseQueryString(String s) {
 
         String valArray[] = null;
         
@@ -154,7 +154,7 @@ public class HttpUtils {
      *                        sent by the POST method is invalid
      *
      */
-    static public Hashtable<String,String[]> parsePostData(int len, 
+    public static Hashtable<String,String[]> parsePostData(int len, 
                                           ServletInputStream in) {
         // XXX
         // should a length of 0 be an IllegalArgumentException
@@ -202,7 +202,7 @@ public class HttpUtils {
     /*
      * Parse a name in the query string.
      */
-    static private String parseName(String s, StringBuilder sb) {
+    private static String parseName(String s, StringBuilder sb) {
         sb.setLength(0);
         for (int i = 0; i < s.length(); i++) {
             char c = s.charAt(i); 

==================================================
JspWriter.java
index 0d94ec5c13..97310e5fee 100644
--- a/java/javax/servlet/jsp/JspContext.java
+++ b/java/javax/servlet/jsp/JspContext.java
@@ -91,7 +91,7 @@ public abstract class JspContext {
      * @throws NullPointerException if the name is null
      */
 
-    abstract public void setAttribute(String name, Object value);
+    public abstract void setAttribute(String name, Object value);
 
     /**
      * Register the name and value specified with appropriate 
@@ -112,7 +112,7 @@ public abstract class JspContext {
      *     invalidated.
      */
 
-    abstract public void setAttribute(String name, Object value, int scope);
+    public abstract void setAttribute(String name, Object value, int scope);
 
     /**
      * Returns the object associated with the name in the page scope or null
@@ -125,7 +125,7 @@ public abstract class JspContext {
      * @throws NullPointerException if the name is null
      */
 
-    abstract public Object getAttribute(String name);
+    public abstract Object getAttribute(String name);
 
     /**
      * Return the object associated with the name in the specified
@@ -144,7 +144,7 @@ public abstract class JspContext {
      *     invalidated.
      */
 
-    abstract public Object getAttribute(String name, int scope);
+    public abstract Object getAttribute(String name, int scope);
 
     /**
      * Searches for the named attribute in page, request, session (if valid),
@@ -156,7 +156,7 @@ public abstract class JspContext {
      * @throws NullPointerException if the name is null
      */
 
-    abstract public Object findAttribute(String name);
+    public abstract Object findAttribute(String name);
 
     /**
      * Remove the object reference associated with the given name
@@ -166,7 +166,7 @@ public abstract class JspContext {
      * @throws NullPointerException if the name is null
      */
 
-    abstract public void removeAttribute(String name);
+    public abstract void removeAttribute(String name);
 
     /**
      * Remove the object reference associated with the specified name
@@ -182,7 +182,7 @@ public abstract class JspContext {
      * @throws NullPointerException if the name is null
      */
 
-    abstract public void removeAttribute(String name, int scope);
+    public abstract void removeAttribute(String name, int scope);
 
     /**
      * Get the scope where a given attribute is defined.
@@ -192,7 +192,7 @@ public abstract class JspContext {
      * @throws NullPointerException if the name is null
      */
 
-    abstract public int getAttributesScope(String name);
+    public abstract int getAttributesScope(String name);
 
     /**
      * Enumerate all the attributes in a given scope.
@@ -207,14 +207,14 @@ public abstract class JspContext {
      *     invalidated.
      */
 
-    abstract public Enumeration<String> getAttributeNamesInScope(int scope);
+    public abstract Enumeration<String> getAttributeNamesInScope(int scope);
 
     /**
      * The current value of the out object (a JspWriter).
      *
      * @return the current JspWriter stream being used for client response
      */
-    abstract public JspWriter getOut();
+    public abstract JspWriter getOut();
     
     /**
      * Provides programmatic access to the ExpressionEvaluator.

==================================================
PageContext.java
index 2c1cc74fba..4348c43175 100644
--- a/java/javax/servlet/jsp/JspWriter.java
+++ b/java/javax/servlet/jsp/JspWriter.java
@@ -77,7 +77,7 @@ import java.io.IOException;
  * @see java.io.BufferedWriter
  * @see java.io.PrintWriter
  */
-abstract public class JspWriter extends java.io.Writer {
+public abstract class JspWriter extends java.io.Writer {
 
     /**
      * Constant indicating that the Writer is not buffering output.
@@ -117,7 +117,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @exception IOException
      *                If an I/O error occurs
      */
-    abstract public void newLine() throws IOException;
+    public abstract void newLine() throws IOException;
 
     /**
      * Print a boolean value. The string produced by <code>{@link
@@ -130,7 +130,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @throws java.io.IOException
      *             If an error occurred while writing
      */
-    abstract public void print(boolean b) throws IOException;
+    public abstract void print(boolean b) throws IOException;
 
     /**
      * Print a character. The character is written to the JspWriter's buffer or,
@@ -141,7 +141,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @throws java.io.IOException
      *             If an error occurred while writing
      */
-    abstract public void print(char c) throws IOException;
+    public abstract void print(char c) throws IOException;
 
     /**
      * Print an integer. The string produced by <code>{@link
@@ -155,7 +155,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @throws java.io.IOException
      *             If an error occurred while writing
      */
-    abstract public void print(int i) throws IOException;
+    public abstract void print(int i) throws IOException;
 
     /**
      * Print a long integer. The string produced by <code>{@link
@@ -169,7 +169,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @throws java.io.IOException
      *             If an error occurred while writing
      */
-    abstract public void print(long l) throws IOException;
+    public abstract void print(long l) throws IOException;
 
     /**
      * Print a floating-point number. The string produced by <code>{@link
@@ -183,7 +183,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @throws java.io.IOException
      *             If an error occurred while writing
      */
-    abstract public void print(float f) throws IOException;
+    public abstract void print(float f) throws IOException;
 
     /**
      * Print a double-precision floating-point number. The string produced by
@@ -197,7 +197,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @throws java.io.IOException
      *             If an error occurred while writing
      */
-    abstract public void print(double d) throws IOException;
+    public abstract void print(double d) throws IOException;
 
     /**
      * Print an array of characters. The characters are written to the
@@ -211,7 +211,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @throws java.io.IOException
      *             If an error occurred while writing
      */
-    abstract public void print(char s[]) throws IOException;
+    public abstract void print(char s[]) throws IOException;
 
     /**
      * Print a string. If the argument is <code>null</code> then the string
@@ -224,7 +224,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @throws java.io.IOException
      *             If an error occurred while writing
      */
-    abstract public void print(String s) throws IOException;
+    public abstract void print(String s) throws IOException;
 
     /**
      * Print an object. The string produced by the <code>{@link
@@ -238,7 +238,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @throws java.io.IOException
      *             If an error occurred while writing
      */
-    abstract public void print(Object obj) throws IOException;
+    public abstract void print(Object obj) throws IOException;
 
     /**
      * Terminate the current line by writing the line separator string. The line
@@ -249,7 +249,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @throws java.io.IOException
      *             If an error occurred while writing
      */
-    abstract public void println() throws IOException;
+    public abstract void println() throws IOException;
 
     /**
      * Print a boolean value and then terminate the line. This method behaves as
@@ -261,7 +261,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @throws java.io.IOException
      *             If an error occurred while writing
      */
-    abstract public void println(boolean x) throws IOException;
+    public abstract void println(boolean x) throws IOException;
 
     /**
      * Print a character and then terminate the line. This method behaves as
@@ -274,7 +274,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @throws java.io.IOException
      *             If an error occurred while writing
      */
-    abstract public void println(char x) throws IOException;
+    public abstract void println(char x) throws IOException;
 
     /**
      * Print an integer and then terminate the line. This method behaves as
@@ -287,7 +287,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @throws java.io.IOException
      *             If an error occurred while writing
      */
-    abstract public void println(int x) throws IOException;
+    public abstract void println(int x) throws IOException;
 
     /**
      * Print a long integer and then terminate the line. This method behaves as
@@ -299,7 +299,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @throws java.io.IOException
      *             If an error occurred while writing
      */
-    abstract public void println(long x) throws IOException;
+    public abstract void println(long x) throws IOException;
 
     /**
      * Print a floating-point number and then terminate the line. This method
@@ -311,7 +311,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @throws java.io.IOException
      *             If an error occurred while writing
      */
-    abstract public void println(float x) throws IOException;
+    public abstract void println(float x) throws IOException;
 
     /**
      * Print a double-precision floating-point number and then terminate the
@@ -324,7 +324,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @throws java.io.IOException
      *             If an error occurred while writing
      */
-    abstract public void println(double x) throws IOException;
+    public abstract void println(double x) throws IOException;
 
     /**
      * Print an array of characters and then terminate the line. This method
@@ -336,7 +336,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @throws java.io.IOException
      *             If an error occurred while writing
      */
-    abstract public void println(char x[]) throws IOException;
+    public abstract void println(char x[]) throws IOException;
 
     /**
      * Print a String and then terminate the line. This method behaves as though
@@ -348,7 +348,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @throws java.io.IOException
      *             If an error occurred while writing
      */
-    abstract public void println(String x) throws IOException;
+    public abstract void println(String x) throws IOException;
 
     /**
      * Print an Object and then terminate the line. This method behaves as
@@ -360,7 +360,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @throws java.io.IOException
      *             If an error occurred while writing
      */
-    abstract public void println(Object x) throws IOException;
+    public abstract void println(Object x) throws IOException;
 
     /**
      * Clear the contents of the buffer. If the buffer has been already been
@@ -371,7 +371,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @throws IOException
      *             If an I/O error occurs
      */
-    abstract public void clear() throws IOException;
+    public abstract void clear() throws IOException;
 
     /**
      * Clears the current contents of the buffer. Unlike clear(), this method
@@ -381,7 +381,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @throws IOException
      *             If an I/O error occurs
      */
-    abstract public void clearBuffer() throws IOException;
+    public abstract void clearBuffer() throws IOException;
 
     /**
      * Flush the stream. If the stream has saved any characters from the various
@@ -399,7 +399,7 @@ abstract public class JspWriter extends java.io.Writer {
      *                If an I/O error occurs
      */
     @Override
-    abstract public void flush() throws IOException;
+    public abstract void flush() throws IOException;
 
     /**
      * Close the stream, flushing it first.
@@ -414,7 +414,7 @@ abstract public class JspWriter extends java.io.Writer {
      *                If an I/O error occurs
      */
     @Override
-    abstract public void close() throws IOException;
+    public abstract void close() throws IOException;
 
     /**
      * This method returns the size of the buffer used by the JspWriter.
@@ -430,7 +430,7 @@ abstract public class JspWriter extends java.io.Writer {
      * 
      * @return the number of bytes unused in the buffer
      */
-    abstract public int getRemaining();
+    public abstract int getRemaining();
 
     /**
      * This method indicates whether the JspWriter is autoFlushing.

==================================================
ImplicitObjectELResolver.java
index fee5117542..3233594909 100644
--- a/java/javax/servlet/jsp/PageContext.java
+++ b/java/javax/servlet/jsp/PageContext.java
@@ -89,7 +89,7 @@ import javax.servlet.jsp.tagext.BodyContent;
  * and  <code>handlePageException()</code>.
  */
 
-abstract public class PageContext 
+public abstract class PageContext 
     extends JspContext
 {
     
@@ -221,7 +221,7 @@ abstract public class PageContext
      *     is invalid
      */
  
-    abstract public void initialize(Servlet servlet, ServletRequest request, 
+    public abstract void initialize(Servlet servlet, ServletRequest request, 
         ServletResponse response, String errorPageURL, boolean needsSession, 
         int bufferSize, boolean autoFlush)  
         throws IOException, IllegalStateException, IllegalArgumentException;
@@ -241,7 +241,7 @@ abstract public class PageContext
      *
      */
 
-    abstract public void release();
+    public abstract void release();
 
     /**
      * The current value of the session object (an HttpSession).
@@ -249,7 +249,7 @@ abstract public class PageContext
      * @return the HttpSession for this PageContext or null
      */
 
-    abstract public HttpSession getSession();
+    public abstract HttpSession getSession();
 
     /**
      * The current value of the page object (In a Servlet environment, 
@@ -259,7 +259,7 @@ abstract public class PageContext
      *     with this PageContext
      */
 
-    abstract public Object getPage();
+    public abstract Object getPage();
 
 
     /**
@@ -268,7 +268,7 @@ abstract public class PageContext
      * @return The ServletRequest for this PageContext
      */
 
-    abstract public ServletRequest getRequest();
+    public abstract ServletRequest getRequest();
 
     /**
      * The current value of the response object (a ServletResponse).
@@ -276,7 +276,7 @@ abstract public class PageContext
      * @return the ServletResponse for this PageContext
      */
 
-    abstract public ServletResponse getResponse();
+    public abstract ServletResponse getResponse();
 
     /**
      * The current value of the exception object (an Exception).
@@ -284,7 +284,7 @@ abstract public class PageContext
      * @return any exception passed to this as an errorpage
      */
 
-    abstract public Exception getException();
+    public abstract Exception getException();
 
     /**
      * The ServletConfig instance.
@@ -292,7 +292,7 @@ abstract public class PageContext
      * @return the ServletConfig for this PageContext
      */
 
-    abstract public ServletConfig getServletConfig();
+    public abstract ServletConfig getServletConfig();
 
     /**
      * The ServletContext instance.
@@ -300,7 +300,7 @@ abstract public class PageContext
      * @return the ServletContext for this PageContext
      */
 
-    abstract public ServletContext getServletContext();
+    public abstract ServletContext getServletContext();
 
     /**
      * <p>
@@ -337,7 +337,7 @@ abstract public class PageContext
      * @throws IOException if an I/O error occurred while forwarding
      */
 
-    abstract public void forward(String relativeUrlPath) 
+    public abstract void forward(String relativeUrlPath) 
         throws ServletException, IOException;
 
     /**
@@ -370,7 +370,7 @@ abstract public class PageContext
      *     a ServletException
      * @throws IOException if an I/O error occurred while forwarding
      */
-    abstract public void include(String relativeUrlPath) 
+    public abstract void include(String relativeUrlPath) 
         throws ServletException, IOException;
 
     /**
@@ -407,7 +407,7 @@ abstract public class PageContext
      * @throws IOException if an I/O error occurred while forwarding
      * @since 2.0
      */
-    abstract public void include(String relativeUrlPath, boolean flush) 
+    public abstract void include(String relativeUrlPath, boolean flush) 
         throws ServletException, IOException;
 
     /**
@@ -444,7 +444,7 @@ abstract public class PageContext
      * @see #handlePageException(Throwable)
      */
 
-    abstract public void handlePageException(Exception e) 
+    public abstract void handlePageException(Exception e) 
         throws ServletException, IOException;
 
     /**
@@ -483,7 +483,7 @@ abstract public class PageContext
      * @see #handlePageException(Exception)
      */
 
-    abstract public void handlePageException(Throwable t) 
+    public abstract void handlePageException(Throwable t) 
         throws ServletException, IOException;
 
     /**

==================================================
BodyTag.java
index 9dea1f683e..a54a53e87f 100644
--- a/java/javax/servlet/jsp/el/ImplicitObjectELResolver.java
+++ b/java/javax/servlet/jsp/el/ImplicitObjectELResolver.java
@@ -46,32 +46,32 @@ import javax.servlet.jsp.PageContext;
  */
 public class ImplicitObjectELResolver extends ELResolver {
 
-    private final static String[] SCOPE_NAMES = new String[] {
+    private static final String[] SCOPE_NAMES = new String[] {
             "applicationScope", "cookie", "header", "headerValues",
             "initParam", "pageContext", "pageScope", "param", "paramValues",
             "requestScope", "sessionScope" };
 
-    private final static int APPLICATIONSCOPE = 0;
+    private static final int APPLICATIONSCOPE = 0;
 
-    private final static int COOKIE = 1;
+    private static final int COOKIE = 1;
 
-    private final static int HEADER = 2;
+    private static final int HEADER = 2;
 
-    private final static int HEADERVALUES = 3;
+    private static final int HEADERVALUES = 3;
 
-    private final static int INITPARAM = 4;
+    private static final int INITPARAM = 4;
 
-    private final static int PAGECONTEXT = 5;
+    private static final int PAGECONTEXT = 5;
 
-    private final static int PAGESCOPE = 6;
+    private static final int PAGESCOPE = 6;
 
-    private final static int PARAM = 7;
+    private static final int PARAM = 7;
 
-    private final static int PARAM_VALUES = 8;
+    private static final int PARAM_VALUES = 8;
 
-    private final static int REQUEST_SCOPE = 9;
+    private static final int REQUEST_SCOPE = 9;
 
-    private final static int SESSION_SCOPE = 10;
+    private static final int SESSION_SCOPE = 10;
 
     public ImplicitObjectELResolver() {
         super();
@@ -200,7 +200,7 @@ public class ImplicitObjectELResolver extends ELResolver {
     }
 
     private static class ScopeManager {
-        private final static String MNGR_KEY = ScopeManager.class.getName();
+        private static final String MNGR_KEY = ScopeManager.class.getName();
 
         private final PageContext page;
 

==================================================
IterationTag.java
index e4f598e99f..6452bd504e 100644
--- a/java/javax/servlet/jsp/tagext/BodyTag.java
+++ b/java/javax/servlet/jsp/tagext/BodyTag.java
@@ -110,7 +110,7 @@ public interface BodyTag extends IterationTag {
      */
     @SuppressWarnings("dep-ann")
     // TCK signature test fails with annotation
-    public final static int EVAL_BODY_TAG = 2;
+    public static final int EVAL_BODY_TAG = 2;
 
     /**
      * Request the creation of new buffer, a BodyContent on which to evaluate
@@ -118,7 +118,7 @@ public interface BodyTag extends IterationTag {
      * BodyTag. This is an illegal return value for doStartTag when the class
      * does not implement BodyTag.
      */
-    public final static int EVAL_BODY_BUFFERED = 2;
+    public static final int EVAL_BODY_BUFFERED = 2;
 
     /**
      * Set the bodyContent property. This method is invoked by the JSP page

==================================================
PageData.java
index e97fed02ba..f2aaef50ce 100644
--- a/java/javax/servlet/jsp/tagext/IterationTag.java
+++ b/java/javax/servlet/jsp/tagext/IterationTag.java
@@ -84,7 +84,7 @@ public interface IterationTag extends Tag {
      * 
      */
  
-    public final static int EVAL_BODY_AGAIN = 2;
+    public static final int EVAL_BODY_AGAIN = 2;
 
     /**
      * Process body (re)evaluation.  This method is invoked by the

==================================================
Tag.java
index 286b781de1..9f6343cfe8 100644
--- a/java/javax/servlet/jsp/tagext/PageData.java
+++ b/java/javax/servlet/jsp/tagext/PageData.java
@@ -29,7 +29,7 @@ import java.io.InputStream;
  * when being passed to a TagLibraryValidator instance.
  */
 
-abstract public class PageData {
+public abstract class PageData {
 
     /**
      * Sole constructor. (For invocation by subclass constructors, 
@@ -46,5 +46,5 @@ abstract public class PageData {
      * 
      * @return An input stream on the document.
      */
-   abstract public InputStream getInputStream();
+   public abstract InputStream getInputStream();
 }

==================================================
TagLibraryInfo.java
index c1f07c0bc8..fdd3b07061 100644
--- a/java/javax/servlet/jsp/tagext/Tag.java
+++ b/java/javax/servlet/jsp/tagext/Tag.java
@@ -96,28 +96,28 @@ public interface Tag extends JspTag {
      * Valid return value for doStartTag and doAfterBody.
      */
  
-    public final static int SKIP_BODY = 0;
+    public static final int SKIP_BODY = 0;
  
     /**
      * Evaluate body into existing out stream.
      * Valid return value for doStartTag.
      */
  
-    public final static int EVAL_BODY_INCLUDE = 1;
+    public static final int EVAL_BODY_INCLUDE = 1;
 
     /**
      * Skip the rest of the page.
      * Valid return value for doEndTag.
      */
 
-    public final static int SKIP_PAGE = 5;
+    public static final int SKIP_PAGE = 5;
 
     /**
      * Continue evaluating the page.
      * Valid return value for doEndTag().
      */
 
-    public final static int EVAL_PAGE = 6;
+    public static final int EVAL_PAGE = 6;
 
     // Setters for Tag handler data
 

==================================================
TagLibraryValidator.java
index 8ed8225795..af9266ad26 100644
--- a/java/javax/servlet/jsp/tagext/TagLibraryInfo.java
+++ b/java/javax/servlet/jsp/tagext/TagLibraryInfo.java
@@ -22,7 +22,7 @@ package javax.servlet.jsp.tagext;
  * underlying TLD file. Most of the information is directly from the TLD, except
  * for the prefix and the uri values used in the taglib directive
  */
-abstract public class TagLibraryInfo {
+public abstract class TagLibraryInfo {
 
     /**
      * Constructor. This will invoke the constructors for TagInfo, and

==================================================
