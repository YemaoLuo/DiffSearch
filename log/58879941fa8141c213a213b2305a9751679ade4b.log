58879941fa8141c213a213b2305a9751679ade4b
==================================================
Remove unused flush() method.
==================================================
Mark Thomas
==================================================
Mon Jan 5 21:41:25 2015 +0000
==================================================
AprEndpoint.java
Remove unused flush() method.
Note that flush() (in some form) will alomst certainly return to the
SocketWrapper in a future refactoring.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1649671 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Nio2Endpoint.java
index 0aea8433a7..8f74b568ab 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -2605,12 +2605,6 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
         }
 
 
-        @Override
-        public void flush() {
-            // NO-OP
-        }
-
-
         @Override
         public void regsiterForEvent(boolean read, boolean write) {
             ((AprEndpoint) getEndpoint()).getPoller().add(

==================================================
NioEndpoint.java
index 5918257499..58b4671513 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -1066,30 +1066,6 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
         }
 
 
-        @Override
-        public void flush() throws IOException {
-            try {
-                // Block until a possible non blocking write is done
-                if (writePending.tryAcquire(getTimeout(), TimeUnit.MILLISECONDS)) {
-                    writePending.release();
-                    getSocket().flush().get(getTimeout(), TimeUnit.MILLISECONDS);
-                } else {
-                    throw new TimeoutException();
-                }
-            } catch (ExecutionException e) {
-                if (e.getCause() instanceof IOException) {
-                    throw (IOException) e.getCause();
-                } else {
-                    throw new IOException(e);
-                }
-            } catch (InterruptedException e) {
-                throw new IOException(e);
-            } catch (TimeoutException e) {
-                SocketTimeoutException ex = new SocketTimeoutException();
-                throw ex;
-            }
-        }
-
         @Override
         public void regsiterForEvent(boolean read, boolean write) {
             // NO-OP. Appropriate handlers will already have been registered.

==================================================
SocketWrapperBase.java
index 8f2efd784d..8e799bd0d2 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -1575,33 +1575,6 @@ public class NioEndpoint extends AbstractEndpoint<NioChannel> {
         }
 
 
-        @Override
-        public void flush() throws IOException {
-            NioEndpoint.NioSocketWrapper att =
-                    (NioEndpoint.NioSocketWrapper) getSocket().getAttachment();
-            if (att == null) {
-                throw new IOException("Key must be cancelled");
-            }
-            long writeTimeout = att.getWriteTimeout();
-            Selector selector = null;
-            try {
-                selector = pool.get();
-            } catch ( IOException x ) {
-                //ignore
-            }
-            try {
-                do {
-                    if (getSocket().flush(true, selector, writeTimeout)) {
-                        break;
-                    }
-                } while (true);
-            } finally {
-                if (selector != null) {
-                    pool.put(selector);
-                }
-            }
-        }
-
         @Override
         public void regsiterForEvent(boolean read, boolean write) {
             SelectionKey key = getSocket().getIOChannel().keyFor(

==================================================
