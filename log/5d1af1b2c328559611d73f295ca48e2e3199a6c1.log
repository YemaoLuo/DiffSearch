5d1af1b2c328559611d73f295ca48e2e3199a6c1
==================================================
Pull-up flush()
==================================================
Mark Emlyn
==================================================
Wed May 1 16:39:41 2013 +0000
==================================================
AbstractOutputBuffer.java
Pull-up flush()

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1478087 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InternalAprOutputBuffer.java
index d6f2350850..aedb4f9aae 100644
--- a/java/org/apache/coyote/http11/AbstractOutputBuffer.java
+++ b/java/org/apache/coyote/http11/AbstractOutputBuffer.java
@@ -256,8 +256,12 @@ public abstract class AbstractOutputBuffer<S> implements OutputBuffer {
                 break;
             }
         }
+
+        // Flush the current buffer(s)
+        flushBuffer(isBlocking());
     }
 
+
     /**
      * Reset current response.
      *

==================================================
InternalNioOutputBuffer.java
index afe42b11cf..9c2d3fa7f8 100644
--- a/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
@@ -94,22 +94,6 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
     }
 
 
-    /**
-     * Flush the response.
-     *
-     * @throws IOException an underlying I/O error occurred
-     */
-    @Override
-    public void flush()
-        throws IOException {
-
-        super.flush();
-
-        // Flush the current buffer
-        flushBuffer(isBlocking());
-    }
-
-
     /**
      * Recycle the output buffer. This should be called when closing the
      * connection.

==================================================
InternalOutputBuffer.java
index a498a30782..96d7bdf130 100644
--- a/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
@@ -145,22 +145,6 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer<NioChannel> {
 
     // --------------------------------------------------------- Public Methods
 
-    /**
-     * Flush the response.
-     *
-     * @throws IOException an underlying I/O error occurred
-     *
-     */
-    @Override
-    public void flush() throws IOException {
-
-        super.flush();
-        // Flush the current buffer
-        flushBuffer(isBlocking());
-
-    }
-
-
     /**
      * Recycle the output buffer. This should be called when closing the
      * connection.

==================================================
