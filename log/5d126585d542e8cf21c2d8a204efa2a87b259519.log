5d126585d542e8cf21c2d8a204efa2a87b259519
==================================================
More updates for the new method FunctionMapper#mapFunction
==================================================
Mark Emlyn
==================================================
Fri Jul 12 12:00:26 2013 +0000
==================================================
StandardELContext.java
More updates for the new method FunctionMapper#mapFunction
- null method should remove an entry from the map
- ensure implementations that need to override new method do so
- fix concurrency issues in FunctionMapperImpl
- align methods that add to the map to new signature

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1502522 13f79535-47bb-0310-9956-ffa450edef68



==================================================
FunctionMapperFactory.java
index 4944c1b4b0..5751282e5d 100644
--- a/java/javax/el/StandardELContext.java
+++ b/java/javax/el/StandardELContext.java
@@ -200,7 +200,11 @@ public class StandardELContext extends ELContext {
         public void mapFunction(String prefix, String localName,
                 Method method) {
             String key = prefix + ':' + localName;
-            methods.put(key, method);
+            if (method == null) {
+                methods.remove(key);
+            } else {
+                methods.put(key, method);
+            }
         }
     }
 }

==================================================
FunctionMapperImpl.java
index cae7843c02..338818349f 100644
--- a/java/org/apache/el/lang/FunctionMapperFactory.java
+++ b/java/org/apache/el/lang/FunctionMapperFactory.java
@@ -48,11 +48,21 @@ public class FunctionMapperFactory extends FunctionMapper {
         }
         Method m = this.target.resolveFunction(prefix, localName);
         if (m != null) {
-            this.memento.addFunction(prefix, localName, m);
+            this.memento.mapFunction(prefix, localName, m);
         }
         return m;
     }
 
+
+    @Override
+    public void mapFunction(String prefix, String localName, Method method) {
+        if (this.memento == null) {
+            this.memento = new FunctionMapperImpl();
+        }
+        memento.mapFunction(prefix, localName, method);
+    }
+
+
     public FunctionMapper create() {
         return this.memento;
     }

==================================================
Validator.java
index 141c378281..f61d1321bb 100644
--- a/java/org/apache/el/lang/FunctionMapperImpl.java
+++ b/java/org/apache/el/lang/FunctionMapperImpl.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.el.lang;
 
 import java.io.Externalizable;
@@ -22,8 +21,8 @@ import java.io.IOException;
 import java.io.ObjectInput;
 import java.io.ObjectOutput;
 import java.lang.reflect.Method;
-import java.util.HashMap;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 import javax.el.FunctionMapper;
 
@@ -32,14 +31,13 @@ import org.apache.el.util.ReflectionUtil;
 
 /**
  * @author Jacob Hookom [jacob@hookom.net]
- * @version $Id$
  */
 public class FunctionMapperImpl extends FunctionMapper implements
         Externalizable {
 
     private static final long serialVersionUID = 1L;
 
-    protected Map<String, Function> functions = null;
+    protected Map<String, Function> functions = new ConcurrentHashMap<>();
 
     /*
      * (non-Javadoc)
@@ -49,20 +47,21 @@ public class FunctionMapperImpl extends FunctionMapper implements
      */
     @Override
     public Method resolveFunction(String prefix, String localName) {
-        if (this.functions != null) {
-            Function f = this.functions.get(prefix + ":" + localName);
-            return f.getMethod();
+        Function f = this.functions.get(prefix + ":" + localName);
+        if (f == null) {
+            return null;
         }
-        return null;
+        return f.getMethod();
     }
 
-    public void addFunction(String prefix, String localName, Method m) {
-        if (this.functions == null) {
-            this.functions = new HashMap<>();
-        }
-        Function f = new Function(prefix, localName, m);
-        synchronized (this) {
-            this.functions.put(prefix+":"+localName, f);
+    @Override
+    public void mapFunction(String prefix, String localName, Method m) {
+        String key = prefix + ":" + localName;
+        if (m == null) {
+            functions.remove(key);
+        } else {
+            Function f = new Function(prefix, localName, m);
+            functions.put(key, f);
         }
     }
 

==================================================
