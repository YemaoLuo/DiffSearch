492b6f217b7df7dac867d28f3b591d6b5a56e499
==================================================
Follow the trail of unused code identified by Eclipse and remove it.
==================================================
Mark Emlyn
==================================================
Wed Sep 12 17:53:06 2012 +0000
==================================================
Code.java
Follow the trail of unused code identified by Eclipse and remove it.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1384055 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ConstantValue.java
index acb8b760c7..d3b62a6be1 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Code.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Code.java
@@ -44,8 +44,6 @@ import org.apache.tomcat.util.bcel.Constants;
 public final class Code extends Attribute {
 
     private static final long serialVersionUID = 8936843273318969602L;
-    private int max_stack; // Maximum size of stack used by this method
-    private int max_locals; // Number of local variables
     private int code_length; // Length of code in bytes
     private byte[] code; // Actual byte code
     private int exception_table_length;
@@ -105,8 +103,6 @@ public final class Code extends Attribute {
     public Code(int name_index, int length, int max_stack, int max_locals, byte[] code,
             CodeException[] exception_table, Attribute[] attributes, ConstantPool constant_pool) {
         super(Constants.ATTR_CODE, name_index, length, constant_pool);
-        this.max_stack = max_stack;
-        this.max_locals = max_locals;
         setCode(code);
         setExceptionTable(exception_table);
         setAttributes(attributes); // Overwrites length!

==================================================
JavaClass.java
index ccdb955be2..31471f3739 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantValue.java
@@ -33,7 +33,6 @@ import org.apache.tomcat.util.bcel.Constants;
 public final class ConstantValue extends Attribute {
 
     private static final long serialVersionUID = -388222612752527969L;
-    private int constantvalue_index;
 
 
     /**
@@ -59,7 +58,6 @@ public final class ConstantValue extends Attribute {
     public ConstantValue(int name_index, int length, int constantvalue_index,
             ConstantPool constant_pool) {
         super(Constants.ATTR_CONSTANT_VALUE, name_index, length, constant_pool);
-        this.constantvalue_index = constantvalue_index;
     }
 
 

==================================================
StackMap.java
index f1356d59c5..1f0c869724 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
@@ -38,16 +38,9 @@ public class JavaClass extends AccessFlags
         implements Cloneable, Comparable<JavaClass> {
 
     private static final long serialVersionUID = 7029227708237523236L;
-    private String file_name;
-    private String source_file_name = "<Unknown>";
     private String class_name;
     private String superclass_name;
-    private int major, minor; // Compiler version
-    private ConstantPool constant_pool; // Constant pool
-    private int[] interfaces; // implemented interfaces
     private String[] interface_names;
-    private Field[] fields; // Fields, i.e., variables of class
-    private Method[] methods; // methods defined in the class
     private Attribute[] attributes; // attributes defined in the class
     private AnnotationEntry[] annotations;   // annotations defined on the class
 
@@ -105,23 +98,10 @@ public class JavaClass extends AccessFlags
         if (methods == null) {
             methods = new Method[0];
         }
-        this.file_name = file_name;
-        this.major = major;
-        this.minor = minor;
         this.access_flags = access_flags;
-        this.constant_pool = constant_pool;
-        this.interfaces = interfaces;
-        this.fields = fields;
-        this.methods = methods;
         this.attributes = attributes;
         annotationsOutOfDate = true;
-        // Get source file name if available
-        for (int i = 0; i < attributes.length; i++) {
-            if (attributes[i] instanceof SourceFile) {
-                source_file_name = ((SourceFile) attributes[i]).getSourceFileName();
-                break;
-            }
-        }
+
         /* According to the specification the following entries must be of type
          * `ConstantClass' but we check that anyway via the
          * `ConstPool.getConstant' method.

==================================================
StackMapEntry.java
index 4c8a330251..2372873971 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMap.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMap.java
@@ -70,7 +70,7 @@ public final class StackMap extends Attribute {
         map_length = file.readUnsignedShort();
         map = new StackMapEntry[map_length];
         for (int i = 0; i < map_length; i++) {
-            map[i] = new StackMapEntry(file, constant_pool);
+            map[i] = new StackMapEntry(file);
         }
     }
 

==================================================
StackMapTable.java
index cb266459b7..1847f8b075 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapEntry.java
@@ -48,16 +48,16 @@ public final class StackMapEntry implements Cloneable, Serializable {
      * @param file Input stream
      * @throws IOException
      */
-    StackMapEntry(DataInputStream file, ConstantPool constant_pool) throws IOException {
+    StackMapEntry(DataInputStream file) throws IOException {
         this(file.readShort(), file.readShort(), null, -1, null);
         types_of_locals = new StackMapType[number_of_locals];
         for (int i = 0; i < number_of_locals; i++) {
-            types_of_locals[i] = new StackMapType(file, constant_pool);
+            types_of_locals[i] = new StackMapType(file);
         }
         number_of_stack_items = file.readShort();
         types_of_stack_items = new StackMapType[number_of_stack_items];
         for (int i = 0; i < number_of_stack_items; i++) {
-            types_of_stack_items[i] = new StackMapType(file, constant_pool);
+            types_of_stack_items[i] = new StackMapType(file);
         }
     }
 

==================================================
StackMapTableEntry.java
index bfd62ef50b..3e2a4681c4 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapTable.java
@@ -70,7 +70,7 @@ public final class StackMapTable extends Attribute {
         map_length = file.readUnsignedShort();
         map = new StackMapTableEntry[map_length];
         for (int i = 0; i < map_length; i++) {
-            map[i] = new StackMapTableEntry(file, constant_pool);
+            map[i] = new StackMapTableEntry(file);
         }
     }
 

==================================================
StackMapType.java
index 986dabfd8d..9dbafb7722 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapTableEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapTableEntry.java
@@ -51,7 +51,7 @@ public final class StackMapTableEntry implements Cloneable, Serializable {
      * @param file Input stream
      * @throws IOException
      */
-    StackMapTableEntry(DataInputStream file, ConstantPool constant_pool) throws IOException {
+    StackMapTableEntry(DataInputStream file) throws IOException {
         this(file.read(), -1, -1, null, -1, null);
 
         if (frame_type >= Constants.SAME_FRAME && frame_type <= Constants.SAME_FRAME_MAX) {
@@ -60,12 +60,12 @@ public final class StackMapTableEntry implements Cloneable, Serializable {
             byte_code_offset_delta = frame_type - Constants.SAME_LOCALS_1_STACK_ITEM_FRAME;
             number_of_stack_items = 1;
             types_of_stack_items = new StackMapType[1];
-            types_of_stack_items[0] = new StackMapType(file, constant_pool);
+            types_of_stack_items[0] = new StackMapType(file);
         } else if (frame_type == Constants.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {
             byte_code_offset_delta = file.readShort();
             number_of_stack_items = 1;
             types_of_stack_items = new StackMapType[1];
-            types_of_stack_items[0] = new StackMapType(file, constant_pool);
+            types_of_stack_items[0] = new StackMapType(file);
         } else if (frame_type >= Constants.CHOP_FRAME && frame_type <= Constants.CHOP_FRAME_MAX) {
             byte_code_offset_delta = file.readShort();
         } else if (frame_type == Constants.SAME_FRAME_EXTENDED) {
@@ -75,19 +75,19 @@ public final class StackMapTableEntry implements Cloneable, Serializable {
             number_of_locals = frame_type - 251;
             types_of_locals = new StackMapType[number_of_locals];
             for (int i = 0; i < number_of_locals; i++) {
-                types_of_locals[i] = new StackMapType(file, constant_pool);
+                types_of_locals[i] = new StackMapType(file);
             }
         } else if (frame_type == Constants.FULL_FRAME) {
             byte_code_offset_delta = file.readShort();
             number_of_locals = file.readShort();
             types_of_locals = new StackMapType[number_of_locals];
             for (int i = 0; i < number_of_locals; i++) {
-                types_of_locals[i] = new StackMapType(file, constant_pool);
+                types_of_locals[i] = new StackMapType(file);
             }
             number_of_stack_items = file.readShort();
             types_of_stack_items = new StackMapType[number_of_stack_items];
             for (int i = 0; i < number_of_stack_items; i++) {
-                types_of_stack_items[i] = new StackMapType(file, constant_pool);
+                types_of_stack_items[i] = new StackMapType(file);
             }
         } else {
             /* Can't happen */

==================================================
