b6dc5fa8690109e6950f178d1917367fa2d3ed51
==================================================
Make StandardContext aliases work with ServletContext.getResourcePaths()
==================================================
Mark Emlyn
==================================================
Tue Mar 9 20:33:27 2010 +0000
==================================================
BaseDirContext.java
Make StandardContext aliases work with ServletContext.getResourcePaths()

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@921110 13f79535-47bb-0310-9956-ffa450edef68



==================================================
FileDirContext.java
index f95c3de130..f8b34e5ad0 100644
--- a/java/org/apache/naming/resources/BaseDirContext.java
+++ b/java/org/apache/naming/resources/BaseDirContext.java
@@ -366,7 +366,7 @@ public abstract class BaseDirContext implements DirContext {
      * @return the object bound to name
      * @exception NamingException if a naming exception is encountered
      */
-    public Object lookup(Name name)
+    public final Object lookup(Name name)
         throws NamingException {
         return lookup(name.toString());
     }
@@ -566,7 +566,7 @@ public abstract class BaseDirContext implements DirContext {
      * Each element of the enumeration is of type Binding.
      * @exception NamingException if a naming exception is encountered
      */
-    public NamingEnumeration<Binding> listBindings(Name name)
+    public final NamingEnumeration<Binding> listBindings(Name name)
         throws NamingException {
         return listBindings(name.toString());
     }
@@ -581,8 +581,16 @@ public abstract class BaseDirContext implements DirContext {
      * Each element of the enumeration is of type Binding.
      * @exception NamingException if a naming exception is encountered
      */
-    public abstract NamingEnumeration<Binding> listBindings(String name)
-        throws NamingException;
+    public final NamingEnumeration<Binding> listBindings(String name)
+        throws NamingException {
+        if (!aliases.isEmpty()) {
+            AliasResult result = findAlias(name);
+            if (result.dirContext != null) {
+                return result.dirContext.listBindings(result.aliasName);
+            }
+        }
+        return doListBindings(name);
+    }
 
 
     /**
@@ -1365,6 +1373,9 @@ public abstract class BaseDirContext implements DirContext {
 
     protected abstract Object doLookup(String name) throws NamingException;
 
+    protected abstract NamingEnumeration<Binding> doListBindings(String name)
+        throws NamingException;
+
     protected abstract String doGetRealPath(String name);
 
     // -------------------------------------------------------- Private Methods

==================================================
WARDirContext.java
index 6ef0d4e639..1f2c872da0 100644
--- a/java/org/apache/naming/resources/FileDirContext.java
+++ b/java/org/apache/naming/resources/FileDirContext.java
@@ -320,7 +320,7 @@ public class FileDirContext extends BaseDirContext {
      * @exception NamingException if a naming exception is encountered
      */
     @Override
-    public NamingEnumeration<Binding> listBindings(String name)
+    protected NamingEnumeration<Binding> doListBindings(String name)
         throws NamingException {
 
         File file = file(name);

==================================================
TestBaseDirContext.java
index 4702b95018..efaa6c9be9 100644
--- a/java/org/apache/naming/resources/WARDirContext.java
+++ b/java/org/apache/naming/resources/WARDirContext.java
@@ -187,30 +187,16 @@ public class WARDirContext extends BaseDirContext {
     /**
      * Retrieves the named object.
      * 
-     * @param name the name of the object to look up
+     * @param strName the name of the object to look up
      * @return the object bound to name
      * @exception NamingException if a naming exception is encountered
      */
     @Override
-    protected Object doLookup(String name)
+    protected Object doLookup(String strName)
         throws NamingException {
-        return lookup(new CompositeName(name));
-    }
 
+        Name name = new CompositeName(strName);
 
-    /**
-     * Retrieves the named object. If name is empty, returns a new instance 
-     * of this context (which represents the same naming context as this 
-     * context, but its environment may be modified independently and it may 
-     * be accessed concurrently).
-     * 
-     * @param name the name of the object to look up
-     * @return the object bound to name
-     * @exception NamingException if a naming exception is encountered
-     */
-    @Override
-    public Object lookup(Name name)
-        throws NamingException {
         if (name.isEmpty())
             return this;
         Entry entry = treeLookup(name);
@@ -318,34 +304,17 @@ public class WARDirContext extends BaseDirContext {
      * If a binding is added to or removed from this context, its effect on 
      * an enumeration previously returned is undefined.
      * 
-     * @param name the name of the context to list
+     * @param strName the name of the context to list
      * @return an enumeration of the bindings in this context. 
      * Each element of the enumeration is of type Binding.
      * @exception NamingException if a naming exception is encountered
      */
     @Override
-    public NamingEnumeration<Binding> listBindings(String name)
+    protected NamingEnumeration<Binding> doListBindings(String strName)
         throws NamingException {
-        return listBindings(new CompositeName(name));
-    }
-
+        
+        Name name = new CompositeName(strName);
 
-    /**
-     * Enumerates the names bound in the named context, along with the 
-     * objects bound to them. The contents of any subcontexts are not 
-     * included.
-     * <p>
-     * If a binding is added to or removed from this context, its effect on 
-     * an enumeration previously returned is undefined.
-     * 
-     * @param name the name of the context to list
-     * @return an enumeration of the bindings in this context. 
-     * Each element of the enumeration is of type Binding.
-     * @exception NamingException if a naming exception is encountered
-     */
-    @Override
-    public NamingEnumeration<Binding> listBindings(Name name)
-        throws NamingException {
         if (name.isEmpty())
             return new NamingContextBindingsEnumeration(list(entries).iterator(),
                     this);

==================================================
