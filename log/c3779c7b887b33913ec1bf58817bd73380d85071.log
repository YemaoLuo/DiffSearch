c3779c7b887b33913ec1bf58817bd73380d85071
==================================================
Add new Connector children to storeconfig (with utility methods to allow accessing the configuration). Some work remains on attributes.
==================================================
Remy Maucherat
==================================================
Tue Jun 30 16:06:24 2015 +0000
==================================================
Connector.java
Add new Connector children to storeconfig (with utility methods to allow accessing the configuration). Some work remains on attributes.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1688478 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ConnectorSF.java
index e2d37de4ec..719b33f8ef 100644
--- a/java/org/apache/catalina/connector/Connector.java
+++ b/java/org/apache/catalina/connector/Connector.java
@@ -858,10 +858,17 @@ public class Connector extends LifecycleMBeanBase  {
         protocolHandler.addSslHostConfig(sslHostConfig);
     }
 
+    public SSLHostConfig[] findSslHostConfigs() {
+        return protocolHandler.findSslHostConfigs();
+    }
+
 
     public void addUpgradeProtocol(UpgradeProtocol upgradeProtocol) {
         protocolHandler.addUpgradeProtocol(upgradeProtocol);
     }
+    public UpgradeProtocol[] findUpgradeProtocols() {
+        return protocolHandler.findUpgradeProtocols();
+    }
 
     // --------------------------------------------------------- Public Methods
 

==================================================
SSLHostConfigSF.java
index 611773af1f..4a7b38eda2 100644
--- a/java/org/apache/catalina/storeconfig/ConnectorSF.java
+++ b/java/org/apache/catalina/storeconfig/ConnectorSF.java
@@ -21,6 +21,8 @@ import java.io.PrintWriter;
 
 import org.apache.catalina.LifecycleListener;
 import org.apache.catalina.connector.Connector;
+import org.apache.coyote.UpgradeProtocol;
+import org.apache.tomcat.util.net.SSLHostConfig;
 
 /**
  * Store Connector and Listeners
@@ -44,6 +46,12 @@ public class ConnectorSF extends StoreFactoryBase {
             // Store nested <Listener> elements
             LifecycleListener listeners[] = connector.findLifecycleListeners();
             storeElementArray(aWriter, indent, listeners);
+            // Store nested <UpgradeProtocol> elements
+            UpgradeProtocol[] upgradeProtocols = connector.findUpgradeProtocols();
+            storeElementArray(aWriter, indent, upgradeProtocols);
+            // Store nested <SSLHostConfig> elements
+            SSLHostConfig[] hostConfigs = connector.findSslHostConfigs();
+            storeElementArray(aWriter, indent, hostConfigs);
         }
     }
 
@@ -60,15 +68,6 @@ public class ConnectorSF extends StoreFactoryBase {
         if (aDesc.isAttributes()) {
             getStoreAppender().printAttributes(aWriter, indent, false, bean,
                     aDesc);
-            /*
-             * if (bean instanceof Connector) { StoreDescription elementDesc =
-             * getRegistry().findDescription( bean.getClass().getName() +
-             * ".[ProtocolHandler]"); if (elementDesc != null) { ProtocolHandler
-             * protocolHandler = ((Connector) bean) .getProtocolHandler(); if
-             * (protocolHandler != null)
-             * getStoreAppender().printAttributes(aWriter, indent, false,
-             * protocolHandler, elementDesc); } }
-             */
         }
     }
 

==================================================
ProtocolHandler.java
index 8c1413c6ee..2d03e6e97b 100644
--- a/java/org/apache/catalina/storeconfig/server-registry.xml
+++ b/java/org/apache/catalina/storeconfig/server-registry.xml
@@ -91,7 +91,7 @@
         tagClass="org.apache.catalina.deploy.NamingResourcesImpl"
         storeFactoryClass="org.apache.catalina.storeconfig.GlobalNamingResourcesSF">
      </Description>
-      <Description
+     <Description
         tag="Connector"
         standard="true"
         default="true"
@@ -101,7 +101,32 @@
         storeAppenderClass="org.apache.catalina.storeconfig.ConnectorStoreAppender">
         <TransientAttribute>URIEncoding</TransientAttribute>
         <TransientAttribute>maxProcessor</TransientAttribute>
-         <TransientAttribute>minProcessor</TransientAttribute>
+        <TransientAttribute>minProcessor</TransientAttribute>
+     </Description>
+     <Description
+        tag="UpgradeProtocol"
+        standard="false"
+        default="true"
+        tagClass="org.apache.coyote.UpgradeProtocol"
+        children="false"
+        storeFactoryClass="org.apache.catalina.storeconfig.StoreFactoryBase">
+     </Description>
+     <Description
+        tag="SSLHostConfig"
+        standard="true"
+        default="true"
+        tagClass="org.apache.tomcat.util.net.SSLHostConfig"
+        children="true"
+        storeFactoryClass="org.apache.catalina.storeconfig.SSLHostConfigSF">
+        <TransientAttribute>openSslContext</TransientAttribute>
+     </Description>
+     <Description
+        tag="Certificate"
+        standard="true"
+        default="true"
+        tagClass="org.apache.tomcat.util.net.SSLHostConfigCertificate"
+        children="false"
+        storeFactoryClass="org.apache.catalina.storeconfig.StoreFactoryBase">
      </Description>
      <Description
         tag="NamingResources"

==================================================
AbstractAjpProtocol.java
index 006fd330ea..696c6bbc37 100644
--- a/java/org/apache/coyote/ProtocolHandler.java
+++ b/java/org/apache/coyote/ProtocolHandler.java
@@ -99,7 +99,9 @@ public interface ProtocolHandler {
 
 
     public void addSslHostConfig(SSLHostConfig sslHostConfig);
+    public SSLHostConfig[] findSslHostConfigs();
 
 
     public void addUpgradeProtocol(UpgradeProtocol upgradeProtocol);
+    public UpgradeProtocol[] findUpgradeProtocols();
 }

==================================================
AbstractHttp11Protocol.java
index 12598602de..d81df7adf1 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -135,12 +135,24 @@ public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
     }
 
 
+    @Override
+    public SSLHostConfig[] findSslHostConfigs() {
+        return new SSLHostConfig[0];
+    }
+
+
     @Override
     public void addUpgradeProtocol(UpgradeProtocol upgradeProtocol) {
         getLog().warn(sm.getString("ajpprotocol.noUpgrade", upgradeProtocol.getClass().getName()));
     }
 
 
+    @Override
+    public UpgradeProtocol[] findUpgradeProtocols() {
+        return new UpgradeProtocol[0];
+    }
+
+
     protected void configureProcessor(AjpProcessor processor) {
         processor.setAdapter(getAdapter());
         processor.setTomcatAuthentication(getTomcatAuthentication());

==================================================
AbstractEndpoint.java
index ebbf26cb1b..7c031ba6ab 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -297,6 +297,10 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     public void addUpgradeProtocol(UpgradeProtocol upgradeProtocol) {
         upgradeProtocols.add(upgradeProtocol);
     }
+    @Override
+    public UpgradeProtocol[] findUpgradeProtocols() {
+        return upgradeProtocols.toArray(new UpgradeProtocol[0]);
+    }
 
     /**
      * The protocols that are available via internal Tomcat support for access
@@ -391,6 +395,10 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
         getEndpoint().addSslHostConfig(sslHostConfig);
     }
 
+    @Override
+    public SSLHostConfig[] findSslHostConfigs() {
+        return getEndpoint().findSslHostConfigs();
+    }
 
     // ----------------------------------------------- HTTPS specific properties
     // -------------------------------------------- Handled via an SSLHostConfig

==================================================
SSLHostConfigCertificate.java
index 239fbac1d7..06ced4934e 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -251,6 +251,9 @@ public abstract class AbstractEndpoint<S> {
         }
         sslHostConfig.setConfigType(getSslConfigType());
     }
+    public SSLHostConfig[] findSslHostConfigs() {
+        return sslHostConfigs.values().toArray(new SSLHostConfig[0]);
+    }
     protected abstract SSLHostConfig.Type getSslConfigType();
 
     protected SSLHostConfig getSSLHostConfig(String sniHostName) {

==================================================
