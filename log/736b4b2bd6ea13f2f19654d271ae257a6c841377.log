736b4b2bd6ea13f2f19654d271ae257a6c841377
==================================================
No need for NioEndpoint.Handler.release() since if there is no
==================================================
Mark Thomas
==================================================
Sun Nov 8 16:52:41 2015 +0000
==================================================
AjpNioProtocol.java
No need for NioEndpoint.Handler.release() since if there is no
attachment there can't be an associated Processor to release

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1713248 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11NioProtocol.java
index f53de2406f..ea13d2c653 100644
--- a/java/org/apache/coyote/ajp/AjpNioProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpNioProtocol.java
@@ -16,10 +16,6 @@
  */
 package org.apache.coyote.ajp;
 
-import java.nio.channels.SocketChannel;
-import java.util.Iterator;
-
-import org.apache.coyote.Processor;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.NioChannel;
@@ -69,31 +65,5 @@ public class AjpNioProtocol extends AbstractAjpProtocol<NioChannel> {
         protected Log getLog() {
             return log;
         }
-
-        /**
-         * Expected to be used by the Poller to release resources on socket
-         * close, errors etc.
-         */
-        @Override
-        public void release(SocketChannel socket) {
-            if (log.isDebugEnabled())
-                log.debug(sm.getString("ajpnioprotocol.releaseStart", socket));
-            boolean released = false;
-            Iterator<java.util.Map.Entry<NioChannel, Processor>> it = connections.entrySet().iterator();
-            while (it.hasNext()) {
-                java.util.Map.Entry<NioChannel, Processor> entry = it.next();
-                if (entry.getKey().getIOChannel()==socket) {
-                    it.remove();
-                    Processor result = entry.getValue();
-                    result.recycle();
-                    unregister(result);
-                    released = true;
-                    break;
-                }
-            }
-            if (log.isDebugEnabled())
-                log.debug(sm.getString("ajpnioprotocol.releaseEnd",
-                        socket, Boolean.valueOf(released)));
-        }
     }
 }

==================================================
NioEndpoint.java
index 380221496a..59a0b51397 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -16,10 +16,6 @@
  */
 package org.apache.coyote.http11;
 
-import java.nio.channels.SocketChannel;
-import java.util.Iterator;
-
-import org.apache.coyote.Processor;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.NioChannel;
@@ -105,31 +101,5 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
         protected Log getLog() {
             return log;
         }
-
-
-        /**
-         * Expected to be used by the Poller to release resources on socket
-         * close, errors etc.
-         */
-        @Override
-        public void release(SocketChannel socket) {
-            if (log.isDebugEnabled())
-                log.debug("Iterating through our connections to release a socket channel:"+socket);
-            boolean released = false;
-            Iterator<java.util.Map.Entry<NioChannel, Processor>> it = connections.entrySet().iterator();
-            while (it.hasNext()) {
-                java.util.Map.Entry<NioChannel, Processor> entry = it.next();
-                if (entry.getKey().getIOChannel()==socket) {
-                    it.remove();
-                    Processor result = entry.getValue();
-                    result.recycle();
-                    unregister(result);
-                    released = true;
-                    break;
-                }
-            }
-            if (log.isDebugEnabled())
-                log.debug("Done iterating through our connections to release a socket channel:"+socket +" released:"+released);
-        }
     }
 }

==================================================
