24761f54d6bcfabc129c8a68200fa07b08cc1df1
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=59904
==================================================
Mark Thomas
==================================================
Thu Aug 11 17:09:25 2016 +0000
==================================================
AbstractProcessor.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=59904
Add a limit (default 200) for the number of cookies allowed per request.
Based on a patch by gehui.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1756013 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractProtocol.java
index 42bd26e1ad..d6d607b1d3 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -46,6 +46,8 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
     protected final Response response;
     protected volatile SocketWrapperBase<?> socketWrapper = null;
     protected volatile SSLSupport sslSupport;
+    private int maxCookieCount = 200;
+
 
     /**
      * Error state for the request/response currently being processed.
@@ -286,6 +288,16 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
     }
 
 
+    public int getMaxCookieCount() {
+        return maxCookieCount;
+    }
+
+
+    public void setMaxCookieCount(int maxCookieCount) {
+        this.maxCookieCount = maxCookieCount;
+    }
+
+
     @Override
     public void recycle() {
         errorState = ErrorState.NONE;

==================================================
AbstractAjpProtocol.java
index ebd3890b93..3009a28f50 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -103,6 +103,13 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
     private AsyncTimeout asyncTimeout = null;
 
 
+    /**
+     * The maximum number of cookies permitted for a request. Use a value less
+     * than zero for no limit. Defaults to 200.
+     */
+    private int maxCookieCount = 200;
+
+
     public AbstractProtocol(AbstractEndpoint<S> endpoint) {
         this.endpoint = endpoint;
         setSoLinger(Constants.DEFAULT_CONNECTION_LINGER);
@@ -201,6 +208,16 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
     }
 
 
+    public int getMaxCookieCount() {
+        return maxCookieCount;
+    }
+
+
+    public void setMaxCookieCount(int maxCookieCount) {
+        this.maxCookieCount = maxCookieCount;
+    }
+
+
     // ---------------------- Properties that are passed through to the EndPoint
 
     @Override

==================================================
AjpProcessor.java
index 8eac1b77ba..cf47673e31 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -192,6 +192,7 @@ public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
         processor.setRequiredSecret(requiredSecret);
         processor.setKeepAliveTimeout(getKeepAliveTimeout());
         processor.setClientCertProvider(getClientCertProvider());
+        processor.setMaxCookieCount(getMaxCookieCount());
         return processor;
     }
 

==================================================
AbstractHttp11Protocol.java
index 5a762af098..148fb320e4 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -1045,6 +1045,7 @@ public class AjpProcessor extends AbstractProcessor {
 
         // Set this every time in case limit has been changed via JMX
         headers.setLimit(endpoint.getMaxHeaderCount());
+        request.getCookies().setLimit(getMaxCookieCount());
 
         boolean contentLengthSet = false;
         int hCount = requestHeaderMessage.getInt();

==================================================
Http11Processor.java
index b7717e8e0b..cb988ee630 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -648,6 +648,7 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
         processor.setMaxSavePostSize(getMaxSavePostSize());
         processor.setServer(getServer());
         processor.setServerRemoveAppProvidedValues(getServerRemoveAppProvidedValues());
+        processor.setMaxCookieCount(getMaxCookieCount());
         return processor;
     }
 

==================================================
ServerCookies.java
index 8bedcee7c3..e7893d25c6 100644
--- a/java/org/apache/tomcat/util/http/LocalStrings.properties
+++ b/java/org/apache/tomcat/util/http/LocalStrings.properties
@@ -28,8 +28,9 @@ parameters.fallToDebug=\n Note: further occurrences of Parameter errors will be
 cookies.invalidCookieToken=Cookies: Invalid cookie. Value not a token or quoted value
 cookies.invalidSpecial=Cookies: Unknown Special Cookie
 cookies.fallToDebug=\n Note: further occurrences of Cookie errors will be logged at DEBUG level.
+cookies.maxCountFail=More than the maximum allowed number of cookies, [{0}], were detected.
 
-headers.maxCountFail=More than the maximum allowed number of headers ([{0}]) were detected.
+headers.maxCountFail=More than the maximum allowed number of headers, [{0}], were detected.
 
 rfc6265CookieProcessor.invalidCharInValue=An invalid character [{0}] was present in the Cookie value
 rfc6265CookieProcessor.invalidDomain=An invalid domain [{0}] was specified for this cookie

==================================================
