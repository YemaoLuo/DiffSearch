42680c82aa8d71bf534c7d9576d1019ce7b919ce
==================================================
Re-order parameters to be more logical
==================================================
Mark Emlyn
==================================================
Mon Sep 16 13:16:48 2013 +0000
==================================================
DirResourceSet.java
Re-order parameters to be more logical

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1523635 13f79535-47bb-0310-9956-ffa450edef68



==================================================
FileResource.java
index 378ab79c35..a9d2f5c2e8 100644
--- a/java/org/apache/catalina/webresources/DirResourceSet.java
+++ b/java/org/apache/catalina/webresources/DirResourceSet.java
@@ -48,23 +48,23 @@ public class DirResourceSet extends AbstractFileResourceSet {
      * @param root          The {@link WebResourceRoot} this new
      *                          {@link org.apache.catalina.WebResourceSet} will
      *                          be added to.
-     * @param base          The absolute path to the directory on the file
-     *                          system from which the resources will be served.
      * @param webAppMount   The path within the web application at which this
      *                          {@link org.apache.catalina.WebResourceSet} will
      *                          be mounted. For example, to add a directory of
      *                          JARs to a web application, the directory would
      *                          be mounted at "/WEB-INF/lib/"
+     * @param base          The absolute path to the directory on the file
+     *                          system from which the resources will be served.
      * @param internalPath  The path within this new {@link
      *                          org.apache.catalina.WebResourceSet} where
      *                          resources will be served from.
      */
-    public DirResourceSet(WebResourceRoot root, String base, String webAppMount,
+    public DirResourceSet(WebResourceRoot root, String webAppMount, String base,
             String internalPath) {
         super(internalPath);
         setRoot(root);
-        setBase(base);
         setWebAppMount(webAppMount);
+        setBase(base);
 
         if (root.getContext().getAddWebinfClassesResources()) {
             File f = new File(base, internalPath);
@@ -99,7 +99,7 @@ public class DirResourceSet extends AbstractFileResourceSet {
             if (f.isDirectory() && path.charAt(path.length() - 1) != '/') {
                 path = path += '/';
             }
-            return new FileResource(root, f, path);
+            return new FileResource(root, path, f);
         } else {
             return new EmptyResource(root, path);
         }

==================================================
FileResourceSet.java
index 3c8ad09eee..2fae936add 100644
--- a/java/org/apache/catalina/webresources/FileResource.java
+++ b/java/org/apache/catalina/webresources/FileResource.java
@@ -41,8 +41,8 @@ public class FileResource extends AbstractResource {
     private final File resource;
     private final String name;
 
-    public FileResource(WebResourceRoot root, File resource,
-            String webAppPath) {
+    public FileResource(WebResourceRoot root, String webAppPath,
+            File resource) {
         super(root,webAppPath);
         this.resource = resource;
 

==================================================
JarResource.java
index c090256585..54ad6a10d0 100644
--- a/java/org/apache/catalina/webresources/FileResourceSet.java
+++ b/java/org/apache/catalina/webresources/FileResourceSet.java
@@ -45,23 +45,23 @@ public class FileResourceSet extends AbstractFileResourceSet {
      * @param root          The {@link WebResourceRoot} this new
      *                          {@link org.apache.catalina.WebResourceSet} will
      *                          be added to.
-     * @param base          The absolute path to the file on the file system
-     *                          from which the resource will be served.
      * @param webAppMount   The path within the web application at which this
      *                          {@link org.apache.catalina.WebResourceSet} will
      *                          be mounted. For example, to add a directory of
      *                          JARs to a web application, the directory would
      *                          be mounted at "WEB-INF/lib/"
+     * @param base          The absolute path to the file on the file system
+     *                          from which the resource will be served.
      * @param internalPath  The path within this new {@link
      *                          org.apache.catalina.WebResourceSet} where
      *                          resources will be served from.
      */
-    public FileResourceSet(WebResourceRoot root, String base, String webAppMount,
-            String internalPath) {
+    public FileResourceSet(WebResourceRoot root, String webAppMount,
+            String base, String internalPath) {
         super(internalPath);
         setRoot(root);
-        setBase(base);
         setWebAppMount(webAppMount);
+        setBase(base);
 
         if (getRoot().getState().isAvailable()) {
             try {
@@ -84,7 +84,7 @@ public class FileResourceSet extends AbstractFileResourceSet {
             if (f == null) {
                 return new EmptyResource(root, path);
             }
-            return new FileResource(root, f, path);
+            return new FileResource(root, path, f);
         }
 
         if (path.charAt(path.length() - 1) != '/') {

==================================================
JarResourceSet.java
index 770e3111f1..fc007bb2f8 100644
--- a/java/org/apache/catalina/webresources/JarResource.java
+++ b/java/org/apache/catalina/webresources/JarResource.java
@@ -38,8 +38,8 @@ public class JarResource extends AbstractArchiveResource {
     private final String base;
     private final String baseUrl;
 
-    public JarResource(WebResourceRoot root, String base, String baseUrl,
-            JarEntry jarEntry, String internalPath, String webAppPath) {
+    public JarResource(WebResourceRoot root, String webAppPath, String base,
+            String baseUrl, JarEntry jarEntry, String internalPath) {
         super(root, webAppPath, jarEntry);
         this.base = base;
         this.baseUrl = "jar:" + baseUrl;

==================================================
JarWarResource.java
index ab28d27c53..97e0e8ba0b 100644
--- a/java/org/apache/catalina/webresources/JarResourceSet.java
+++ b/java/org/apache/catalina/webresources/JarResourceSet.java
@@ -45,22 +45,22 @@ public class JarResourceSet extends AbstractArchiveResourceSet {
      * @param root          The {@link WebResourceRoot} this new
      *                          {@link org.apache.catalina.WebResourceSet} will
      *                          be added to.
-     * @param base          The absolute path to the JAR file on the file system
-     *                          from which the resources will be served.
      * @param webAppMount   The path within the web application at which this
      *                          {@link org.apache.catalina.WebResourceSet} will
      *                          be mounted.
+     * @param base          The absolute path to the JAR file on the file system
+     *                          from which the resources will be served.
      * @param internalPath  The path within this new {@link
      *                          org.apache.catalina.WebResourceSet} where
      *                          resources will be served from. E.g. for a
      *                          resource JAR, this would be "META-INF/resources"
      */
-    public JarResourceSet(WebResourceRoot root, String base, String webAppMount,
+    public JarResourceSet(WebResourceRoot root, String webAppMount, String base,
             String internalPath) throws IllegalArgumentException {
         setRoot(root);
+        setWebAppMount(webAppMount);
         setBase(base);
         setInternalPath(internalPath);
-        setWebAppMount(webAppMount);
 
         if (getRoot().getState().isAvailable()) {
             try {
@@ -74,8 +74,8 @@ public class JarResourceSet extends AbstractArchiveResourceSet {
     @Override
     protected WebResource createArchiveResource(JarEntry jarEntry,
             String webAppPath) {
-        return new JarResource(getRoot(), getBase(), baseUrl, jarEntry,
-                getInternalPath(), webAppPath);
+        return new JarResource(getRoot(), webAppPath, getBase(), baseUrl,
+                jarEntry, getInternalPath());
     }
 
     //-------------------------------------------------------- Lifecycle methods

==================================================
JarWarResourceSet.java
index f7aed3482d..7090263513 100644
--- a/java/org/apache/catalina/webresources/JarWarResource.java
+++ b/java/org/apache/catalina/webresources/JarWarResource.java
@@ -40,9 +40,9 @@ public class JarWarResource extends AbstractArchiveResource {
     private final String baseUrl;
     private final String archivePath;
 
-    public JarWarResource(WebResourceRoot root, String base, String baseUrl,
-            JarEntry jarEntry, String archivePath, String internalPath,
-            String webAppPath) {
+    public JarWarResource(WebResourceRoot root, String webAppPath, String base,
+            String baseUrl, JarEntry jarEntry, String archivePath,
+            String internalPath) {
         super(root, webAppPath, jarEntry);
         this.base = base;
         this.archivePath = archivePath;

==================================================
StandardRoot.java
index 875a52735b..e624965c7e 100644
--- a/java/org/apache/catalina/webresources/JarWarResourceSet.java
+++ b/java/org/apache/catalina/webresources/JarWarResourceSet.java
@@ -77,8 +77,8 @@ public class JarWarResourceSet extends AbstractArchiveResourceSet {
     @Override
     protected WebResource createArchiveResource(JarEntry jarEntry,
             String webAppPath) {
-        return new JarWarResource(getRoot(), getBase(), baseUrl, jarEntry,
-                archivePath, getInternalPath(), webAppPath);
+        return new JarWarResource(getRoot(), webAppPath, getBase(), baseUrl,
+                jarEntry, archivePath, getInternalPath());
     }
 
     //-------------------------------------------------------- Lifecycle methods

==================================================
TestDirResourceSet.java
index 667e99783e..1e2fa3f464 100644
--- a/java/org/apache/catalina/webresources/StandardRoot.java
+++ b/java/org/apache/catalina/webresources/StandardRoot.java
@@ -269,15 +269,15 @@ public class StandardRoot extends LifecycleMBeanBase
                 resourceSet = new JarWarResourceSet(this, webAppMount, base,
                         archivePath, internalPath);
             } else if (file.getName().toLowerCase(Locale.ENGLISH).endsWith(".jar")) {
-                resourceSet = new JarResourceSet(this, base, webAppMount,
+                resourceSet = new JarResourceSet(this, webAppMount, base,
                         internalPath);
             } else {
-                resourceSet = new FileResourceSet(this, base, webAppMount,
+                resourceSet = new FileResourceSet(this, webAppMount, base,
                         internalPath);
             }
         } else if (file.isDirectory()) {
             resourceSet =
-                    new DirResourceSet(this, base, webAppMount, internalPath);
+                    new DirResourceSet(this, webAppMount, base, internalPath);
         } else {
             throw new IllegalArgumentException(
                     sm.getString("standardRoot.createInvalidFile", file));
@@ -445,9 +445,9 @@ public class StandardRoot extends LifecycleMBeanBase
             f = new File(((Host)context.getParent()).getAppBaseFile(), f.getName());
         }
         if (f.isDirectory()) {
-            main = new DirResourceSet(this, f.getAbsolutePath(), "/", "/");
+            main = new DirResourceSet(this, "/", f.getAbsolutePath(), "/");
         } else if(f.isFile() && docBase.endsWith(".war")) {
-            main = new JarResourceSet(this, f.getAbsolutePath(), "/", "/");
+            main = new JarResourceSet(this, "/", f.getAbsolutePath(), "/");
         } else {
             throw new IllegalArgumentException(
                     sm.getString("standardRoot.startInvalidMain",

==================================================
TestDirResourceSetInternal.java
index 3f5f862221..dc7453cf3a 100644
--- a/test/org/apache/catalina/webresources/TestDirResourceSet.java
+++ b/test/org/apache/catalina/webresources/TestDirResourceSet.java
@@ -30,8 +30,8 @@ public class TestDirResourceSet extends AbstractTestResourceSet {
         File f = new File(getBaseDir());
         TesterWebResourceRoot root = new TesterWebResourceRoot();
         WebResourceSet webResourceSet =
-                new DirResourceSet(new TesterWebResourceRoot(),
-                        f.getAbsolutePath(), "/", "/");
+                new DirResourceSet(new TesterWebResourceRoot(), "/",
+                        f.getAbsolutePath(), "/");
         root.setMainResources(webResourceSet);
         return root;
     }

==================================================
TestDirResourceSetMount.java
index 0bce9035ac..7f6e33f623 100644
--- a/test/org/apache/catalina/webresources/TestDirResourceSetInternal.java
+++ b/test/org/apache/catalina/webresources/TestDirResourceSetInternal.java
@@ -28,8 +28,8 @@ public class TestDirResourceSetInternal extends TestDirResourceSet {
         File f = new File("test/");
         TesterWebResourceRoot root = new TesterWebResourceRoot();
         WebResourceSet webResourceSet =
-                new DirResourceSet(new TesterWebResourceRoot(),
-                        f.getAbsolutePath(), "/", "/webresources/dir1");
+                new DirResourceSet(new TesterWebResourceRoot(), "/",
+                        f.getAbsolutePath(), "/webresources/dir1");
         root.setMainResources(webResourceSet);
         return root;
     }

==================================================
TestDirResourceSetVirtual.java
index 8389a95889..967f68c2a0 100644
--- a/test/org/apache/catalina/webresources/TestDirResourceSetMount.java
+++ b/test/org/apache/catalina/webresources/TestDirResourceSetMount.java
@@ -28,8 +28,8 @@ public class TestDirResourceSetMount extends AbstractTestResourceSetMount {
         File f = new File(getBaseDir());
         TesterWebResourceRoot root = new TesterWebResourceRoot();
         WebResourceSet webResourceSet =
-                new DirResourceSet(new TesterWebResourceRoot(),
-                        f.getAbsolutePath(), getMount(), "/");
+                new DirResourceSet(new TesterWebResourceRoot(), getMount(),
+                        f.getAbsolutePath(), "/");
         root.setMainResources(webResourceSet);
         return root;
     }

==================================================
TestFileResourceSet.java
index 7ffe7a3299..e55dd4a9c2 100644
--- a/test/org/apache/catalina/webresources/TestDirResourceSetVirtual.java
+++ b/test/org/apache/catalina/webresources/TestDirResourceSetVirtual.java
@@ -28,24 +28,24 @@ public class TestDirResourceSetVirtual extends TestDirResourceSet {
         File f = new File(getBaseDir());
         TesterWebResourceRoot root = new TesterWebResourceRoot();
         WebResourceSet webResourceSet =
-                new DirResourceSet(new TesterWebResourceRoot(),
-                        f.getAbsolutePath(), "/", "/");
+                new DirResourceSet(new TesterWebResourceRoot(), "/",
+                        f.getAbsolutePath(), "/");
         root.setMainResources(webResourceSet);
 
-        WebResourceSet f1 = new FileResourceSet(root,
-                "test/webresources/dir1/f1.txt", "/f1.txt", "/");
+        WebResourceSet f1 = new FileResourceSet(root, "/f1.txt",
+                "test/webresources/dir1/f1.txt", "/");
         root.addPreResources(f1);
 
-        WebResourceSet f2 = new FileResourceSet(root,
-                "test/webresources/dir1/f2.txt", "/f2.txt", "/");
+        WebResourceSet f2 = new FileResourceSet(root, "/f2.txt",
+                "test/webresources/dir1/f2.txt", "/");
         root.addPreResources(f2);
 
-        WebResourceSet d1 = new DirResourceSet(root,
-                "test/webresources/dir1/d1", "/d1", "/");
+        WebResourceSet d1 = new DirResourceSet(root, "/d1",
+                "test/webresources/dir1/d1", "/");
         root.addPreResources(d1);
 
-        WebResourceSet d2 = new DirResourceSet(root,
-                "test/webresources/dir1/d2", "/d2", "/");
+        WebResourceSet d2 = new DirResourceSet(root, "/d2",
+                "test/webresources/dir1/d2", "/");
         root.addPreResources(d2);
 
         return root;

==================================================
TestJarResourceSet.java
index f847b2389e..200dc2ec91 100644
--- a/test/org/apache/catalina/webresources/TestFileResourceSet.java
+++ b/test/org/apache/catalina/webresources/TestFileResourceSet.java
@@ -30,24 +30,24 @@ public class TestFileResourceSet extends AbstractTestResourceSet {
         File f = new File(getBaseDir());
         TesterWebResourceRoot root = new TesterWebResourceRoot();
         WebResourceSet webResourceSet =
-                new DirResourceSet(new TesterWebResourceRoot(),
-                        f.getAbsolutePath(), "/", "/");
+                new DirResourceSet(new TesterWebResourceRoot(), "/",
+                        f.getAbsolutePath(), "/");
         root.setMainResources(webResourceSet);
 
-        WebResourceSet f1 = new FileResourceSet(root,
-                "test/webresources/dir1/f1.txt", "/f1.txt", "/");
+        WebResourceSet f1 = new FileResourceSet(root, "/f1.txt",
+                "test/webresources/dir1/f1.txt", "/");
         root.addPreResources(f1);
 
-        WebResourceSet f2 = new FileResourceSet(root,
-                "test/webresources/dir1/f2.txt", "/f2.txt", "/");
+        WebResourceSet f2 = new FileResourceSet(root, "/f2.txt",
+                "test/webresources/dir1/f2.txt", "/");
         root.addPreResources(f2);
 
-        WebResourceSet d1f1 = new FileResourceSet(root,
-                "test/webresources/dir1/d1/d1-f1.txt", "/d1/d1-f1.txt", "/");
+        WebResourceSet d1f1 = new FileResourceSet(root, "/d1/d1-f1.txt",
+                "test/webresources/dir1/d1/d1-f1.txt", "/");
         root.addPreResources(d1f1);
 
-        WebResourceSet d2f1 = new FileResourceSet(root,
-                "test/webresources/dir1/d2/d2-f1.txt", "/d2/d2-f1.txt", "/");
+        WebResourceSet d2f1 = new FileResourceSet(root, "/d2/d2-f1.txt",
+                "test/webresources/dir1/d2/d2-f1.txt", "/");
         root.addPreResources(d2f1);
 
         return root;

==================================================
TestJarResourceSetInternal.java
index 458684c19c..0cdd72e5cd 100644
--- a/test/org/apache/catalina/webresources/TestJarResourceSet.java
+++ b/test/org/apache/catalina/webresources/TestJarResourceSet.java
@@ -30,7 +30,7 @@ public class TestJarResourceSet extends AbstractTestResourceSet {
         File f = new File("test/webresources/dir1.jar");
         TesterWebResourceRoot root = new TesterWebResourceRoot();
         WebResourceSet webResourceSet =
-                new JarResourceSet(root, f.getAbsolutePath(), "/", "/");
+                new JarResourceSet(root, "/", f.getAbsolutePath(), "/");
         root.setMainResources(webResourceSet);
         return root;
     }

==================================================
TestJarResourceSetMount.java
index 566f11b36b..f323312fee 100644
--- a/test/org/apache/catalina/webresources/TestJarResourceSetInternal.java
+++ b/test/org/apache/catalina/webresources/TestJarResourceSetInternal.java
@@ -30,7 +30,7 @@ public class TestJarResourceSetInternal extends AbstractTestResourceSet {
         File f = new File("test/webresources/dir1-internal.jar");
         TesterWebResourceRoot root = new TesterWebResourceRoot();
         WebResourceSet webResourceSet =
-                new JarResourceSet(root, f.getAbsolutePath(), "/", "/dir1");
+                new JarResourceSet(root, "/", f.getAbsolutePath(), "/dir1");
         root.setMainResources(webResourceSet);
         return root;
     }

==================================================
