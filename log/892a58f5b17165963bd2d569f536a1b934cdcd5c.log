892a58f5b17165963bd2d569f536a1b934cdcd5c
==================================================
Remove unnecessary throws declarations and a few catch blocks that are no longer required.
==================================================
Mark Emlyn
==================================================
Tue Sep 11 21:34:16 2012 +0000
==================================================
SpdyAprNpnHandler.java
Remove unnecessary throws declarations and a few catch blocks that are no longer required.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1383624 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SpdyProcessor.java
index 6f820b8c63..3cedafb9f5 100644
--- a/java/org/apache/coyote/spdy/SpdyAprNpnHandler.java
+++ b/java/org/apache/coyote/spdy/SpdyAprNpnHandler.java
@@ -99,10 +99,8 @@ public class SpdyAprNpnHandler implements NpnHandler<Long> {
             return SocketState.OPEN;
         }
 
-        try {
-            ((NetSupportOpenSSL) spdyContext.getNetSupport()).onAcceptLong(socket);
-        } catch (IOException e) {
-        }
+        ((NetSupportOpenSSL) spdyContext.getNetSupport()).onAcceptLong(socket);
+
         // No need to keep tomcat thread busy - but socket will be handled by apr socket context.
         return SocketState.LONG;
     }

==================================================
SpdyProxyProtocol.java
index 5733c45086..56c7555ed1 100644
--- a/java/org/apache/coyote/spdy/SpdyProcessor.java
+++ b/java/org/apache/coyote/spdy/SpdyProcessor.java
@@ -213,14 +213,7 @@ public class SpdyProcessor extends AbstractProcessor<Object> implements
         }
         if (!response.isCommitted()) {
             // Validate and write response headers
-            try {
-                sendSynReply();
-            } catch (IOException e) {
-                e.printStackTrace();
-                // Set error flag
-                error = true;
-                return;
-            }
+            sendSynReply();
         }
     }
 
@@ -259,13 +252,7 @@ public class SpdyProcessor extends AbstractProcessor<Object> implements
             // transactions with the client
             maybeCommit();
 
-            try {
-                spdyStream.sendDataFrame(EMPTY, 0, 0, true);
-            } catch (IOException e) {
-                // Set error flag
-                e.printStackTrace();
-                error = true;
-            }
+            spdyStream.sendDataFrame(EMPTY, 0, 0, true);
 
         } else if (actionCode == ActionCode.REQ_SSL_ATTRIBUTE) {
 
@@ -401,7 +388,7 @@ public class SpdyProcessor extends AbstractProcessor<Object> implements
      * When committing the response, we have to validate the set of headers, as
      * well as setup the response filters.
      */
-    protected void sendSynReply() throws IOException {
+    protected void sendSynReply() {
 
         response.setCommitted(true);
 
@@ -423,7 +410,7 @@ public class SpdyProcessor extends AbstractProcessor<Object> implements
         sendResponseHead();
     }
 
-    private void sendResponseHead() throws IOException {
+    private void sendResponseHead() {
         SpdyFrame rframe = spdy.getFrame(SpdyConnection.TYPE_SYN_REPLY);
         rframe.associated = 0;
 

==================================================
AprSocket.java
index 76cf7ac49f..badebd6ffc 100644
--- a/java/org/apache/coyote/spdy/SpdyProxyProtocol.java
+++ b/java/org/apache/coyote/spdy/SpdyProxyProtocol.java
@@ -114,11 +114,8 @@ public class SpdyProxyProtocol extends AbstractProtocol {
         @Override
         public SocketState process(SocketWrapper<Socket> socket,
                 SocketStatus status) {
-            try {
-                spdyContext.getNetSupport().onAccept(socket.getSocket());
-            } catch (IOException e) {
-                e.printStackTrace();
-            }
+
+            spdyContext.getNetSupport().onAccept(socket.getSocket());
             return SocketState.CLOSED;
         }
 

==================================================
AprSocketContext.java
index deec0f4380..9f68c23769 100644
--- a/java/org/apache/tomcat/jni/socket/AprSocket.java
+++ b/java/org/apache/tomcat/jni/socket/AprSocket.java
@@ -363,7 +363,7 @@ public class AprSocket implements Runnable {
 
      */
 
-    public void close() throws IOException {
+    public void close() {
         synchronized (this) {
             if ((status & CLOSED) != 0 || socket == 0) {
                 return;
@@ -442,11 +442,7 @@ public class AprSocket implements Runnable {
      */
     public void reset() {
         setStatus(ERROR);
-        try {
-            close();
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
+        close();
     }
 
 

==================================================
NetSupportOpenSSL.java
index c8a2690278..f5b2f36169 100644
--- a/java/org/apache/tomcat/jni/socket/AprSocketContext.java
+++ b/java/org/apache/tomcat/jni/socket/AprSocketContext.java
@@ -338,8 +338,7 @@ public class AprSocketContext {
     /**
      * Set certificate, will also enable TLS mode.
      */
-    public AprSocketContext setKeys(String certPemFile, String keyDerFile)
-            throws IOException {
+    public AprSocketContext setKeys(String certPemFile, String keyDerFile) {
         this.sslMode = true;
         setTls();
         certFile = certPemFile;
@@ -403,18 +402,18 @@ public class AprSocketContext {
     /**
      * Get a socket for connectiong to host:port.
      */
-    public AprSocket socket(String host, int port, boolean ssl) throws IOException {
+    public AprSocket socket(String host, int port, boolean ssl) {
         HostInfo hi = getHostInfo(host, port, ssl);
         return socket(hi);
     }
 
-    public AprSocket socket(HostInfo hi) throws IOException {
+    public AprSocket socket(HostInfo hi) {
         AprSocket sock = newSocket(this);
         sock.setHost(hi);
         return sock;
     }
 
-    public AprSocket socket(long socket) throws IOException {
+    public AprSocket socket(long socket) {
         AprSocket sock = newSocket(this);
         // Tomcat doesn't set this
         SSLExt.sslSetMode(socket, SSLExt.SSL_MODE_ENABLE_PARTIAL_WRITE |
@@ -502,7 +501,7 @@ public class AprSocketContext {
         }
     }
 
-    AprSocket newSocket(AprSocketContext context) throws IOException {
+    AprSocket newSocket(AprSocketContext context) {
         return new AprSocket(context);
     }
 
@@ -524,7 +523,7 @@ public class AprSocketContext {
     }
 
 
-    public void stop() throws IOException {
+    public void stop() {
         synchronized (pollers) {
             if (!running) {
                 return;
@@ -742,7 +741,7 @@ public class AprSocketContext {
      * Called on each accepted socket ( for servers ) or after connection (client)
      * after handshake.
      */
-    protected void onSocket(AprSocket s) throws IOException {
+    protected void onSocket(AprSocket s) {
 
     }
 
@@ -1304,7 +1303,7 @@ public class AprSocketContext {
          * Called only from IO thread. Remove from Poll and channels,
          * set POLL bit to false.
          */
-        private void removeSafe(AprSocket up) throws IOException {
+        private void removeSafe(AprSocket up) {
             int rv = Status.APR_EGENERAL;
             if (running && serverPollset != 0 && up.socket != 0
                     && !up.isClosed()) {

==================================================
NetSupportSocket.java
index 87ea343aec..9c089bea7a 100644
--- a/java/org/apache/tomcat/spdy/NetSupportOpenSSL.java
+++ b/java/org/apache/tomcat/spdy/NetSupportOpenSSL.java
@@ -48,7 +48,7 @@ public class NetSupportOpenSSL extends SpdyContext.NetSupport {
     @Override
     public boolean isSpdy(Object socketW) {
         byte[] proto = new byte[32];
-        int len = SSLExt.getNPN((Long) socketW, proto);
+        int len = SSLExt.getNPN(((Long) socketW).longValue(), proto);
         return len == 6; // todo: check spdy/2
     }
 
@@ -75,11 +75,11 @@ public class NetSupportOpenSSL extends SpdyContext.NetSupport {
     }
 
     @Override
-    public void onAccept(Object socket) throws IOException {
-        onAcceptLong((Long) socket);
+    public void onAccept(Object socket) {
+        onAcceptLong(((Long) socket).longValue());
     }
 
-    public void onAcceptLong(long socket) throws IOException {
+    public void onAcceptLong(long socket) {
         SpdyConnectionAprSocket spdy = new SpdyConnectionAprSocket(ctx);
         AprSocket s = con.socket(socket);
         spdy.setSocket(s);
@@ -98,7 +98,7 @@ public class NetSupportOpenSSL extends SpdyContext.NetSupport {
     public void listen(final int port, String cert, String key) throws IOException {
         con = new AprSocketContext() {
             @Override
-            protected void onSocket(AprSocket s) throws IOException {
+            protected void onSocket(AprSocket s) {
                 SpdyConnectionAprSocket spdy = new SpdyConnectionAprSocket(ctx);
                 spdy.setSocket(s);
 

==================================================
SpdyConnection.java
index 9161054777..84fa65e199 100644
--- a/java/org/apache/tomcat/spdy/NetSupportSocket.java
+++ b/java/org/apache/tomcat/spdy/NetSupportSocket.java
@@ -28,10 +28,6 @@ import javax.net.ssl.SSLSocket;
 
 public class NetSupportSocket extends SpdyContext.NetSupport {
 
-    @Override
-    public void onCreateEngine(Object engine) {
-    }
-
     @Override
     public boolean isSpdy(Object socketW) {
         return false;

==================================================
SpdyContext.java
index 62f0904ffd..c97f1f48c3 100644
--- a/java/org/apache/tomcat/spdy/SpdyConnection.java
+++ b/java/org/apache/tomcat/spdy/SpdyConnection.java
@@ -305,8 +305,7 @@ public abstract class SpdyConnection { // implements Runnable {
      *
      * With a nb transport it should call drain directly.
      */
-    public void nonBlockingSend(SpdyFrame oframe, SpdyStream proc)
-            throws IOException {
+    public void nonBlockingSend(SpdyFrame oframe, SpdyStream proc) {
         queueFrame(oframe, proc, oframe.pri == 0 ? outQueue : prioriyQueue);
         getSpdyContext().getExecutor().execute(nbDrain);
     }
@@ -324,14 +323,13 @@ public abstract class SpdyConnection { // implements Runnable {
      * Add the frame to the queue and send until the queue is empty.
      *
      */
-    public void send(SpdyFrame oframe, SpdyStream proc)
-            throws IOException {
+    public void send(SpdyFrame oframe, SpdyStream proc) {
         queueFrame(oframe, proc, oframe.pri == 0 ? outQueue : prioriyQueue);
         drain();
     }
 
     private void queueFrame(SpdyFrame oframe, SpdyStream proc,
-            LinkedList<SpdyFrame> queue) throws IOException {
+            LinkedList<SpdyFrame> queue) {
 
         oframe.endData = oframe.off;
         oframe.off = 0;
@@ -663,7 +661,7 @@ public abstract class SpdyConnection { // implements Runnable {
         return spdyContext;
     }
 
-    public SpdyStream get(String host, String url) throws IOException {
+    public SpdyStream get(String host, String url) {
         SpdyStream sch = new SpdyStream(this);
         sch.getRequest().addHeader("host", host);
         sch.getRequest().addHeader("url", url);

==================================================
SpdyStream.java
index b465caa95a..6edd365274 100644
--- a/java/org/apache/tomcat/spdy/SpdyContext.java
+++ b/java/org/apache/tomcat/spdy/SpdyContext.java
@@ -64,24 +64,17 @@ public final class SpdyContext {
             this.ctx = ctx;
         }
 
-        public abstract SpdyConnection getConnection(String host, int port) throws IOException;
+        public abstract SpdyConnection getConnection(String host, int port)
+                throws IOException;
 
-        public void onCreateEngine(Object engine) {
-        }
-
-        public boolean isSpdy(Object socketW) {
-            return false;
-        }
+        public abstract boolean isSpdy(Object socketW);
 
-        public void onAccept(Object socket) throws IOException {
-        }
+        public abstract void onAccept(Object socket);
 
-        public void listen(int port, String cert, String key)
-                throws IOException {
-        }
+        public abstract void listen(int port, String cert, String key)
+                throws IOException;
 
-        public void stop() throws IOException {
-        }
+        public abstract void stop() throws IOException;
     }
 
     public SpdyContext() {

==================================================
XercesParser.java
index 17fcec6af2..b94bc15709 100644
--- a/java/org/apache/tomcat/spdy/SpdyStream.java
+++ b/java/org/apache/tomcat/spdy/SpdyStream.java
@@ -102,7 +102,7 @@ public class SpdyStream implements Runnable {
      * The base method is for client implementation - servers need to override
      * and process the frame as a request.
      */
-    public void onCtlFrame(SpdyFrame frame) throws IOException {
+    public void onCtlFrame(SpdyFrame frame) {
         // TODO: handle RST
         if (frame.type == SpdyConnection.TYPE_SYN_STREAM) {
             reqFrame = frame;
@@ -157,7 +157,7 @@ public class SpdyStream implements Runnable {
      *
      * First frame will be the control frame
      */
-    public SpdyFrame getFrame(long to) throws IOException {
+    public SpdyFrame getFrame(long to) {
         SpdyFrame in;
         try {
             synchronized (this) {
@@ -202,7 +202,7 @@ public class SpdyStream implements Runnable {
     }
 
     public synchronized void sendDataFrame(byte[] data, int start,
-            int length, boolean close) throws IOException {
+            int length, boolean close) {
 
         SpdyFrame oframe = spdy.getDataFrame();
 
@@ -222,18 +222,18 @@ public class SpdyStream implements Runnable {
         spdy.send(oframe, this);
     }
 
-    public void send() throws IOException {
+    public void send() {
         send("http", "GET");
     }
 
-    public void send(String host, String url, String scheme, String method) throws IOException {
+    public void send(String host, String url, String scheme, String method) {
         getRequest().addHeader("host", host);
         getRequest().addHeader("url", url);
 
         send(scheme, method);
     }
 
-    public void send(String scheme, String method) throws IOException {
+    public void send(String scheme, String method) {
         getRequest();
         if ("GET".equalsIgnoreCase(method)) {
             // TODO: add the others
@@ -268,7 +268,7 @@ public class SpdyStream implements Runnable {
         long to = 10000; // TODO
         int pos = 0;
 
-        private void fill() throws IOException {
+        private void fill() {
             if (current == null || current.off == current.endData) {
                 if (current != null) {
                     spdy.spdyContext.releaseFrame(current);

==================================================
