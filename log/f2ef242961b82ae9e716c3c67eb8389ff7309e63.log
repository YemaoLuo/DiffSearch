f2ef242961b82ae9e716c3c67eb8389ff7309e63
==================================================
Remove the local socket object
==================================================
Mark Emlyn
==================================================
Wed Jun 22 23:32:17 2011 +0000
==================================================
AjpNioProtocol.java
Remove the local socket object

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1138682 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11NioProtocol.java
index 9053c056e4..7b011fb14b 100644
--- a/java/org/apache/coyote/ajp/AjpNioProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpNioProtocol.java
@@ -170,7 +170,6 @@ public class AjpNioProtocol extends AbstractAjpProtocol {
         @Override
         public SocketState process(SocketWrapper<NioChannel> socketWrapper,
                 SocketStatus status) {
-            NioChannel socket = socketWrapper.getSocket();
             AjpNioProcessor processor = connections.remove(socketWrapper);
 
             socketWrapper.setAsync(false); //no longer check for timeout
@@ -188,7 +187,7 @@ public class AjpNioProtocol extends AbstractAjpProtocol {
                     if (processor.isAsync() || state == SocketState.ASYNC_END) {
                         state = processor.asyncDispatch(status);
                     } else {
-                        state = processor.process(socket);
+                        state = processor.process(socketWrapper.getSocket());
                     }
 
                     if (processor.isAsync()) {
@@ -206,7 +205,7 @@ public class AjpNioProtocol extends AbstractAjpProtocol {
                     // In keep-alive but between requests. OK to recycle
                     // processor. Continue to poll for the next request.
                     release(socketWrapper, processor);
-                    socket.getPoller().add(socket);
+                    socketWrapper.getSocket().getPoller().add(socketWrapper.getSocket());
                 } else {
                     // Connection closed. OK to recycle the processor.
                     release(socketWrapper, processor);

==================================================
