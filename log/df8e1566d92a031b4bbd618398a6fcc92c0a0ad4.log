df8e1566d92a031b4bbd618398a6fcc92c0a0ad4
==================================================
Update generated code after r897728
==================================================
Mark Emlyn
==================================================
Sun Jan 10 23:04:41 2010 +0000
==================================================
ELParser.java
Update generated code after r897728

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@897729 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ELParserConstants.java
index bafe1b782b..0185ba3e4b 100644
--- a/java/org/apache/el/parser/ELParser.java
+++ b/java/org/apache/el/parser/ELParser.java
@@ -1486,9 +1486,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   private boolean jj_3R_29() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(28)) {
+    if (jj_scan_token(27)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(29)) return true;
+    if (jj_scan_token(28)) return true;
     }
     return false;
   }
@@ -1501,9 +1501,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   private boolean jj_3R_28() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(30)) {
+    if (jj_scan_token(29)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(31)) return true;
+    if (jj_scan_token(30)) return true;
     }
     return false;
   }
@@ -1511,9 +1511,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   private boolean jj_3R_27() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(24)) {
+    if (jj_scan_token(23)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(25)) return true;
+    if (jj_scan_token(24)) return true;
     }
     return false;
   }
@@ -1537,9 +1537,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   private boolean jj_3R_26() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(26)) {
+    if (jj_scan_token(25)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(27)) return true;
+    if (jj_scan_token(26)) return true;
     }
     return false;
   }
@@ -1577,9 +1577,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   private boolean jj_3R_23() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(34)) {
+    if (jj_scan_token(33)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(35)) return true;
+    if (jj_scan_token(34)) return true;
     }
     return false;
   }
@@ -1592,9 +1592,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   private boolean jj_3R_22() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(32)) {
+    if (jj_scan_token(31)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(33)) return true;
+    if (jj_scan_token(32)) return true;
     }
     return false;
   }
@@ -1612,9 +1612,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   private boolean jj_3R_17() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(38)) {
+    if (jj_scan_token(37)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(39)) return true;
+    if (jj_scan_token(38)) return true;
     }
     return false;
   }
@@ -1692,9 +1692,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   private boolean jj_3R_15() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(40)) {
+    if (jj_scan_token(39)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(41)) return true;
+    if (jj_scan_token(40)) return true;
     }
     return false;
   }
@@ -1809,9 +1809,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   private boolean jj_3R_35() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(36)) {
+    if (jj_scan_token(35)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(37)) return true;
+    if (jj_scan_token(36)) return true;
     }
     if (jj_3R_30()) return true;
     return false;
@@ -1847,9 +1847,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   private boolean jj_3R_40() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(50)) {
+    if (jj_scan_token(49)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(51)) return true;
+    if (jj_scan_token(50)) return true;
     }
     return false;
   }
@@ -1857,9 +1857,9 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   private boolean jj_3R_39() {
     Token xsp;
     xsp = jj_scanpos;
-    if (jj_scan_token(48)) {
+    if (jj_scan_token(47)) {
     jj_scanpos = xsp;
-    if (jj_scan_token(49)) return true;
+    if (jj_scan_token(48)) return true;
     }
     return false;
   }
@@ -1916,10 +1916,10 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
       jj_la1_init_1();
    }
    private static void jj_la1_init_0() {
-      jj_la1_0 = new int[] {0xe,0xe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff000000,0xc000000,0x3000000,0xc0000000,0x30000000,0xff000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4eb00,0x120000,0x4eb00,0x120000,0x40000,0x0,0x800000,0x4eb00,0xeb00,0x6000,};
+      jj_la1_0 = new int[] {0xe,0xe,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x80000000,0x7f800000,0x6000000,0x1800000,0x60000000,0x18000000,0x7f800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x27b00,0x90000,0x27b00,0x90000,0x20000,0x0,0x400000,0x27b00,0x7b00,0x3000,};
    }
    private static void jj_la1_init_1() {
-      jj_la1_1 = new int[] {0x0,0x0,0x300,0x300,0xc0,0xc0,0xf,0x3,0xc,0xf,0x0,0x0,0x0,0x0,0x0,0x0,0x6000,0x6000,0xf1000,0x30000,0xc0000,0xf1000,0x30,0x104430,0x0,0x100000,0x0,0x0,0x100000,0x0,0x104430,0x0,0x0,};
+      jj_la1_1 = new int[] {0x0,0x0,0x180,0x180,0x60,0x60,0x7,0x1,0x6,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0x3000,0x3000,0x78800,0x18000,0x60000,0x78800,0x18,0x82218,0x0,0x80000,0x0,0x0,0x80000,0x0,0x82218,0x0,0x0,};
    }
   final private JJCalls[] jj_2_rtns = new JJCalls[3];
   private boolean jj_rescan = false;
@@ -2108,7 +2108,7 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
   /** Generate ParseException. */
   public ParseException generateParseException() {
     jj_expentries.clear();
-    boolean[] la1tokens = new boolean[58];
+    boolean[] la1tokens = new boolean[57];
     if (jj_kind >= 0) {
       la1tokens[jj_kind] = true;
       jj_kind = -1;
@@ -2125,7 +2125,7 @@ public class ELParser/*@bgen(jjtree)*/implements ELParserTreeConstants, ELParser
         }
       }
     }
-    for (int i = 0; i < 58; i++) {
+    for (int i = 0; i < 57; i++) {
       if (la1tokens[i]) {
         jj_expentry = new int[1];
         jj_expentry[0] = i;

==================================================
ELParserTokenManager.java
index e48c93207f..50c825d42c 100644
--- a/java/org/apache/el/parser/ELParserConstants.java
+++ b/java/org/apache/el/parser/ELParserConstants.java
@@ -25,97 +25,95 @@ public interface ELParserConstants {
   /** RegularExpression Id. */
   int STRING_LITERAL = 11;
   /** RegularExpression Id. */
-  int BADLY_ESCAPED_STRING_LITERAL = 12;
+  int TRUE = 12;
   /** RegularExpression Id. */
-  int TRUE = 13;
+  int FALSE = 13;
   /** RegularExpression Id. */
-  int FALSE = 14;
+  int NULL = 14;
   /** RegularExpression Id. */
-  int NULL = 15;
+  int END_EXPRESSION = 15;
   /** RegularExpression Id. */
-  int END_EXPRESSION = 16;
+  int DOT = 16;
   /** RegularExpression Id. */
-  int DOT = 17;
+  int LPAREN = 17;
   /** RegularExpression Id. */
-  int LPAREN = 18;
+  int RPAREN = 18;
   /** RegularExpression Id. */
-  int RPAREN = 19;
+  int LBRACK = 19;
   /** RegularExpression Id. */
-  int LBRACK = 20;
+  int RBRACK = 20;
   /** RegularExpression Id. */
-  int RBRACK = 21;
+  int COLON = 21;
   /** RegularExpression Id. */
-  int COLON = 22;
+  int COMMA = 22;
   /** RegularExpression Id. */
-  int COMMA = 23;
+  int GT0 = 23;
   /** RegularExpression Id. */
-  int GT0 = 24;
+  int GT1 = 24;
   /** RegularExpression Id. */
-  int GT1 = 25;
+  int LT0 = 25;
   /** RegularExpression Id. */
-  int LT0 = 26;
+  int LT1 = 26;
   /** RegularExpression Id. */
-  int LT1 = 27;
+  int GE0 = 27;
   /** RegularExpression Id. */
-  int GE0 = 28;
+  int GE1 = 28;
   /** RegularExpression Id. */
-  int GE1 = 29;
+  int LE0 = 29;
   /** RegularExpression Id. */
-  int LE0 = 30;
+  int LE1 = 30;
   /** RegularExpression Id. */
-  int LE1 = 31;
+  int EQ0 = 31;
   /** RegularExpression Id. */
-  int EQ0 = 32;
+  int EQ1 = 32;
   /** RegularExpression Id. */
-  int EQ1 = 33;
+  int NE0 = 33;
   /** RegularExpression Id. */
-  int NE0 = 34;
+  int NE1 = 34;
   /** RegularExpression Id. */
-  int NE1 = 35;
+  int NOT0 = 35;
   /** RegularExpression Id. */
-  int NOT0 = 36;
+  int NOT1 = 36;
   /** RegularExpression Id. */
-  int NOT1 = 37;
+  int AND0 = 37;
   /** RegularExpression Id. */
-  int AND0 = 38;
+  int AND1 = 38;
   /** RegularExpression Id. */
-  int AND1 = 39;
+  int OR0 = 39;
   /** RegularExpression Id. */
-  int OR0 = 40;
+  int OR1 = 40;
   /** RegularExpression Id. */
-  int OR1 = 41;
+  int EMPTY = 41;
   /** RegularExpression Id. */
-  int EMPTY = 42;
+  int INSTANCEOF = 42;
   /** RegularExpression Id. */
-  int INSTANCEOF = 43;
+  int MULT = 43;
   /** RegularExpression Id. */
-  int MULT = 44;
+  int PLUS = 44;
   /** RegularExpression Id. */
-  int PLUS = 45;
+  int MINUS = 45;
   /** RegularExpression Id. */
-  int MINUS = 46;
+  int QUESTIONMARK = 46;
   /** RegularExpression Id. */
-  int QUESTIONMARK = 47;
+  int DIV0 = 47;
   /** RegularExpression Id. */
-  int DIV0 = 48;
+  int DIV1 = 48;
   /** RegularExpression Id. */
-  int DIV1 = 49;
+  int MOD0 = 49;
   /** RegularExpression Id. */
-  int MOD0 = 50;
+  int MOD1 = 50;
   /** RegularExpression Id. */
-  int MOD1 = 51;
+  int IDENTIFIER = 51;
   /** RegularExpression Id. */
-  int IDENTIFIER = 52;
+  int FUNCTIONSUFFIX = 52;
   /** RegularExpression Id. */
-  int FUNCTIONSUFFIX = 53;
+  int IMPL_OBJ_START = 53;
   /** RegularExpression Id. */
-  int IMPL_OBJ_START = 54;
+  int LETTER = 54;
   /** RegularExpression Id. */
-  int LETTER = 55;
+  int DIGIT = 55;
   /** RegularExpression Id. */
-  int DIGIT = 56;
-  /** RegularExpression Id. */
-  int ILLEGAL_CHARACTER = 57;
+  int ILLEGAL_CHARACTER = 56;
 
   /** Lexical state. */
   int DEFAULT = 0;
@@ -136,7 +134,6 @@ public interface ELParserConstants {
     "<FLOATING_POINT_LITERAL>",
     "<EXPONENT>",
     "<STRING_LITERAL>",
-    "<BADLY_ESCAPED_STRING_LITERAL>",
     "\"true\"",
     "\"false\"",
     "\"null\"",

==================================================
