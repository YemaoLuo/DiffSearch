233433aadd82d9a7afd42347e54212a4d1d10c64
==================================================
Access the socket buffer handler via getBufHandler method for consistency with the rest of the code.
==================================================
Violeta Georgieva
==================================================
Fri Sep 9 12:59:02 2016 +0000
==================================================
SecureNio2Channel.java
Access the socket buffer handler via getBufHandler method for consistency with the rest of the code.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1760005 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SecureNioChannel.java
index b9427c1589..0cdeb8f1b3 100644
--- a/java/org/apache/tomcat/util/net/SecureNio2Channel.java
+++ b/java/org/apache/tomcat/util/net/SecureNio2Channel.java
@@ -378,7 +378,7 @@ public class SecureNio2Channel extends Nio2Channel  {
 
         // Ensure the application buffers (which have to be created earlier) are
         // big enough.
-        bufHandler.expand(sslEngine.getSession().getApplicationBufferSize());
+        getBufHandler().expand(sslEngine.getSession().getApplicationBufferSize());
         if (netOutBuffer.capacity() < sslEngine.getSession().getApplicationBufferSize()) {
             // Info for now as we may need to increase DEFAULT_NET_BUFFER_SIZE
             log.info(sm.getString("channel.nio.ssl.expandNetOutBuffer",
@@ -465,8 +465,8 @@ public class SecureNio2Channel extends Nio2Channel  {
         //so we can clear it here.
         netOutBuffer.clear();
         //perform the wrap
-        bufHandler.configureWriteBufferForRead();
-        SSLEngineResult result = sslEngine.wrap(bufHandler.getWriteBuffer(), netOutBuffer);
+        getBufHandler().configureWriteBufferForRead();
+        SSLEngineResult result = sslEngine.wrap(getBufHandler().getWriteBuffer(), netOutBuffer);
         //prepare the results to be written
         netOutBuffer.flip();
         //set the status
@@ -491,8 +491,8 @@ public class SecureNio2Channel extends Nio2Channel  {
             //prepare the buffer with the incoming data
             netInBuffer.flip();
             //call unwrap
-            bufHandler.configureReadBufferForWrite();
-            result = sslEngine.unwrap(netInBuffer, bufHandler.getReadBuffer());
+            getBufHandler().configureReadBufferForWrite();
+            result = sslEngine.unwrap(netInBuffer, getBufHandler().getReadBuffer());
             //compact the buffer, this is an optional method, wonder what would happen if we didn't
             netInBuffer.compact();
             //read in the status
@@ -661,11 +661,11 @@ public class SecureNio2Channel extends Nio2Channel  {
                     } else {
                         // The SSL session has increased the required buffer size
                         // since the buffer was created.
-                        if (dst == socket.getSocketBufferHandler().getReadBuffer()) {
+                        if (dst == getBufHandler().getReadBuffer()) {
                             // This is the normal case for this code
-                            socket.getSocketBufferHandler().expand(
-                                    sslEngine.getSession().getApplicationBufferSize());
-                            dst = socket.getSocketBufferHandler().getReadBuffer();
+                            getBufHandler()
+                                    .expand(sslEngine.getSession().getApplicationBufferSize());
+                            dst = getBufHandler().getReadBuffer();
                         } else {
                             // Can't expand the buffer as there is no way to signal
                             // to the caller that the buffer has been replaced.
@@ -846,11 +846,11 @@ public class SecureNio2Channel extends Nio2Channel  {
                                 } else {
                                     // The SSL session has increased the required buffer size
                                     // since the buffer was created.
-                                    if (dst2 == socket.getSocketBufferHandler().getReadBuffer()) {
+                                    if (dst2 == getBufHandler().getReadBuffer()) {
                                         // This is the normal case for this code
-                                        socket.getSocketBufferHandler().expand(
+                                        getBufHandler().expand(
                                                 sslEngine.getSession().getApplicationBufferSize());
-                                        dst2 = socket.getSocketBufferHandler().getReadBuffer();
+                                        dst2 = getBufHandler().getReadBuffer();
                                     } else {
                                         // Can't expand the buffer as there is no way to signal
                                         // to the caller that the buffer has been replaced.

==================================================
