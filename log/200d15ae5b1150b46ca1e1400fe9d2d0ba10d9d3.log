200d15ae5b1150b46ca1e1400fe9d2d0ba10d9d3
==================================================
Check that uses of Connector.setProperty() in tests complete correctly
==================================================
Mark Thomas
==================================================
Wed Jan 15 11:44:40 2020 +0000
==================================================
TestInputBuffer.java
Check that uses of Connector.setProperty() in tests complete correctly


==================================================
TestKeepAliveCount.java
index 1576bec90b..55822f3c85 100644
--- a/test/org/apache/catalina/connector/TestInputBuffer.java
+++ b/test/org/apache/catalina/connector/TestInputBuffer.java
@@ -48,7 +48,7 @@ public class TestInputBuffer extends TomcatBaseTest {
         Tomcat.addServlet(root, "Echo", new Utf8Echo());
         root.addServletMappingDecoded("/test", "Echo");
 
-        tomcat.getConnector().setProperty("soTimeout", "300000");
+        Assert.assertTrue(tomcat.getConnector().setProperty("soTimeout", "300000"));
         tomcat.start();
 
         for (Utf8TestCase testCase : TestUtf8.TEST_CASES) {
@@ -68,7 +68,7 @@ public class TestInputBuffer extends TomcatBaseTest {
         Tomcat.addServlet(root, "Bug60400Servlet", new Bug60400Servlet());
         root.addServletMappingDecoded("/", "Bug60400Servlet");
 
-        tomcat.getConnector().setProperty("appReadBufSize", "9000");
+        Assert.assertTrue(tomcat.getConnector().setProperty("appReadBufSize", "9000"));
         tomcat.start();
 
         ByteChunk bc = new ByteChunk();

==================================================
TestMaxConnections.java
index 8e40986fb3..130b36088b 100644
--- a/test/org/apache/catalina/connector/TestKeepAliveCount.java
+++ b/test/org/apache/catalina/connector/TestKeepAliveCount.java
@@ -58,9 +58,9 @@ public class TestKeepAliveCount extends TomcatBaseTest {
             Context root = tomcat.addContext("", TEMP_DIR);
             Tomcat.addServlet(root, "Simple", new SimpleServlet());
             root.addServletMappingDecoded("/test", "Simple");
-            tomcat.getConnector().setProperty("maxKeepAliveRequests", "5");
-            tomcat.getConnector().setProperty("soTimeout", "20000");
-            tomcat.getConnector().setProperty("keepAliveTimeout", "50000");
+            Assert.assertTrue(tomcat.getConnector().setProperty("maxKeepAliveRequests", "5"));
+            Assert.assertTrue(tomcat.getConnector().setProperty("soTimeout", "20000"));
+            Assert.assertTrue(tomcat.getConnector().setProperty("keepAliveTimeout", "50000"));
             init = true;
         }
 

==================================================
TestSwallowAbortedUploads.java
index 541ea05f60..ea55ea4f0f 100644
--- a/test/org/apache/catalina/connector/TestMaxConnections.java
+++ b/test/org/apache/catalina/connector/TestMaxConnections.java
@@ -74,13 +74,12 @@ public class TestMaxConnections extends TomcatBaseTest {
         root.setUnloadDelay(soTimeout);
         Tomcat.addServlet(root, "Simple", new SimpleServlet());
         root.addServletMappingDecoded("/test", "Simple");
-        tomcat.getConnector().setProperty("maxKeepAliveRequests", "1");
-        tomcat.getConnector().setProperty("maxThreads", "10");
-        tomcat.getConnector().setProperty("soTimeout", "20000");
-        tomcat.getConnector().setProperty("keepAliveTimeout", "50000");
-        tomcat.getConnector().setProperty(
-                "maxConnections", Integer.toString(MAX_CONNECTIONS));
-        tomcat.getConnector().setProperty("acceptCount", "1");
+        Assert.assertTrue(tomcat.getConnector().setProperty("maxKeepAliveRequests", "1"));
+        Assert.assertTrue(tomcat.getConnector().setProperty("maxThreads", "10"));
+        Assert.assertTrue(tomcat.getConnector().setProperty("soTimeout", "20000"));
+        Assert.assertTrue(tomcat.getConnector().setProperty("keepAliveTimeout", "50000"));
+        Assert.assertTrue(tomcat.getConnector().setProperty("maxConnections", Integer.toString(MAX_CONNECTIONS)));
+        Assert.assertTrue(tomcat.getConnector().setProperty("acceptCount", "1"));
         tomcat.start();
     }
 

==================================================
TestNonBlockingAPI.java
index 84431da6c6..a90d4a6448 100644
--- a/test/org/apache/catalina/core/TestSwallowAbortedUploads.java
+++ b/test/org/apache/catalina/core/TestSwallowAbortedUploads.java
@@ -255,7 +255,7 @@ public class TestSwallowAbortedUploads extends TomcatBaseTest {
 
             Connector c = tomcat.getConnector();
             c.setMaxPostSize(2 * hugeSize);
-            c.setProperty("maxSwallowSize", Integer.toString(hugeSize));
+            Assert.assertTrue(c.setProperty("maxSwallowSize", Integer.toString(hugeSize)));
 
             tomcat.start();
             setPort(c.getLocalPort());
@@ -367,7 +367,7 @@ public class TestSwallowAbortedUploads extends TomcatBaseTest {
 
             Connector c = tomcat.getConnector();
             c.setMaxPostSize(2 * hugeSize);
-            c.setProperty("maxSwallowSize", Integer.toString(hugeSize));
+            Assert.assertTrue(c.setProperty("maxSwallowSize", Integer.toString(hugeSize)));
 
             setPort(c.getLocalPort());
         }

==================================================
TestAbstractAjpProcessor.java
index 574294fe7d..4c2435d7a7 100644
--- a/test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java
+++ b/test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java
@@ -161,7 +161,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         // Note: Low values of socket.txBufSize can trigger very poor
         //       performance. Set it just low enough to ensure that the
         //       non-blocking write servlet will see isReady() == false
-        tomcat.getConnector().setProperty("socket.txBufSize", "1048576");
+        Assert.assertTrue(tomcat.getConnector().setProperty("socket.txBufSize", "1048576"));
         tomcat.start();
 
         SocketFactory factory = SocketFactory.getDefault();
@@ -330,7 +330,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         // Note: Low values of socket.txBufSize can trigger very poor
         //       performance. Set it just low enough to ensure that the
         //       non-blocking write servlet will see isReady() == false
-        tomcat.getConnector().setProperty("socket.txBufSize", "1048576");
+        Assert.assertTrue(tomcat.getConnector().setProperty("socket.txBufSize", "1048576"));
         tomcat.start();
 
         SocketFactory factory = SocketFactory.getDefault();

==================================================
TestHttp11InputBuffer.java
index fc21da138b..d145911e61 100644
--- a/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java
+++ b/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java
@@ -76,7 +76,7 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
         Map<String, String> params = desc.getParams();
 
         Tomcat tomcat = getTomcatInstance();
-        tomcat.getConnector().setProperty("packetSize", Integer.toString(ajpPacketSize));
+        Assert.assertTrue(tomcat.getConnector().setProperty("packetSize", Integer.toString(ajpPacketSize)));
 
         // No file system docBase required
         Context ctx = tomcat.addContext("", null);
@@ -193,13 +193,13 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
                 case "REQUEST-REMOTE-USER":
                     /* request.getRemoteUser() will not trust the AJP
                      * info if tomcatAuthentication is set. */
-                    tomcat.getConnector().setProperty("tomcatAuthentication", "false");
+                    Assert.assertTrue(tomcat.getConnector().setProperty("tomcatAuthentication", "false"));
                     forwardMessage.addAttribute(0x03, value);
                     break;
                 case "REQUEST-AUTH-TYPE":
                     /* request.getAuthType() will not trust the AJP
                      * info if tomcatAuthentication is set. */
-                    tomcat.getConnector().setProperty("tomcatAuthentication", "false");
+                    Assert.assertTrue(tomcat.getConnector().setProperty("tomcatAuthentication", "false"));
                     forwardMessage.addAttribute(0x04, value);
                     break;
                 case "REQUEST-QUERY-STRING":
@@ -490,7 +490,7 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
     @Test
     public void testSecret() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        tomcat.getConnector().setProperty("requiredSecret", "RIGHTSECRET");
+        Assert.assertTrue(tomcat.getConnector().setProperty("requiredSecret", "RIGHTSECRET"));
         tomcat.start();
 
         // No file system docBase required
@@ -550,7 +550,7 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
     @Test
     public void testKeepAlive() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        tomcat.getConnector().setProperty("connectionTimeout", "-1");
+        Assert.assertTrue(tomcat.getConnector().setProperty("connectionTimeout", "-1"));
         tomcat.start();
 
         // No file system docBase required
@@ -771,7 +771,7 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
         int ajpPacketSize = 16000;
 
         Tomcat tomcat = getTomcatInstance();
-        tomcat.getConnector().setProperty("packetSize", Integer.toString(ajpPacketSize));
+        Assert.assertTrue(tomcat.getConnector().setProperty("packetSize", Integer.toString(ajpPacketSize)));
 
         // No file system docBase required
         Context ctx = tomcat.addContext("", null);

==================================================
TestHttp11Processor.java
index 245413b30e..61d6d60de8 100644
--- a/test/org/apache/coyote/http11/TestHttp11InputBuffer.java
+++ b/test/org/apache/coyote/http11/TestHttp11InputBuffer.java
@@ -273,8 +273,8 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
 
             try {
                 Connector connector = tomcat.getConnector();
-                connector.setProperty("rejectIllegalHeaderName",
-                        Boolean.toString(rejectIllegalHeaderName));
+                Assert.assertTrue(connector.setProperty(
+                        "rejectIllegalHeaderName", Boolean.toString(rejectIllegalHeaderName)));
                 tomcat.start();
                 setPort(connector.getLocalPort());
 
@@ -548,7 +548,7 @@ public class TestHttp11InputBuffer extends TomcatBaseTest {
 
             try {
                 Connector connector = tomcat.getConnector();
-                connector.setProperty("rejectIllegalHeaderName", "false");
+                Assert.assertTrue(connector.setProperty("rejectIllegalHeaderName", "false"));
                 tomcat.start();
                 setPort(connector.getLocalPort());
 

==================================================
TestChunkedInputFilter.java
index 1a57bb1f10..cbbc89ef06 100644
--- a/test/org/apache/coyote/http11/TestHttp11Processor.java
+++ b/test/org/apache/coyote/http11/TestHttp11Processor.java
@@ -480,8 +480,8 @@ public class TestHttp11Processor extends TomcatBaseTest {
     @Test
     public void testBug55772() throws Exception {
         Tomcat tomcat = getTomcatInstance();
-        tomcat.getConnector().setProperty("processorCache", "1");
-        tomcat.getConnector().setProperty("maxThreads", "1");
+        Assert.assertTrue(tomcat.getConnector().setProperty("processorCache", "1"));
+        Assert.assertTrue(tomcat.getConnector().setProperty("maxThreads", "1"));
 
         // No file system docBase required
         Context ctx = tomcat.addContext("", null);

==================================================
TestUpgradeInternalHandler.java
index 93912f049d..fbdfb994b6 100644
--- a/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java
+++ b/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java
@@ -101,7 +101,7 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         // Configure allowed trailer headers
-        tomcat.getConnector().setProperty("allowedTrailerHeaders", "x-trailer1,x-trailer2");
+        Assert.assertTrue(tomcat.getConnector().setProperty("allowedTrailerHeaders", "x-trailer1,x-trailer2"));
 
         EchoHeaderServlet servlet = new EchoHeaderServlet(expectPass);
         Tomcat.addServlet(ctx, "servlet", servlet);
@@ -170,7 +170,7 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
         ctx.addServletMappingDecoded("/", "servlet");
 
         // Limit the size of the trailing header
-        tomcat.getConnector().setProperty("maxTrailerSize", "10");
+        Assert.assertTrue(tomcat.getConnector().setProperty("maxTrailerSize", "10"));
         tomcat.start();
 
         String[] request = new String[]{
@@ -223,8 +223,8 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
         // Setup Tomcat instance
         Tomcat tomcat = getTomcatInstance();
 
-        tomcat.getConnector().setProperty(
-                "maxExtensionSize", Integer.toString(EXT_SIZE_LIMIT));
+        Assert.assertTrue(tomcat.getConnector().setProperty(
+                "maxExtensionSize", Integer.toString(EXT_SIZE_LIMIT)));
 
         // No file system docBase required
         Context ctx = tomcat.addContext("", null);

==================================================
TestMimeHeadersIntegration.java
index c1b3ef0d6b..9c9421cd8c 100644
--- a/test/org/apache/coyote/http11/upgrade/TestUpgradeInternalHandler.java
+++ b/test/org/apache/coyote/http11/upgrade/TestUpgradeInternalHandler.java
@@ -88,7 +88,7 @@ public class TestUpgradeInternalHandler extends TomcatBaseTest {
             Class<? extends HttpUpgradeHandler> upgradeHandlerClass) throws Exception {
         // Setup Tomcat instance
         Tomcat tomcat = getTomcatInstance();
-        tomcat.getConnector().setProperty("useAsyncIO", "true");
+        Assert.assertTrue(tomcat.getConnector().setProperty("useAsyncIO", "true"));
 
         // No file system docBase required
         Context ctx = tomcat.addContext("", null);

==================================================
TestClientCertTls13.java
index 75cc8f8a84..b91fedecbd 100644
--- a/test/org/apache/tomcat/util/http/TestMimeHeadersIntegration.java
+++ b/test/org/apache/tomcat/util/http/TestMimeHeadersIntegration.java
@@ -122,7 +122,7 @@ public class TestMimeHeadersIntegration extends TomcatBaseTest {
         // Bumping into maxHttpHeaderSize
         Tomcat tomcat = getTomcatInstance();
         setupHeadersTest(tomcat);
-        tomcat.getConnector().setProperty("maxHeaderCount", "-1");
+        Assert.assertTrue(tomcat.getConnector().setProperty("maxHeaderCount", "-1"));
         runHeadersTest(false, tomcat, 8 * 1024, -1);
     }
 
@@ -147,7 +147,7 @@ public class TestMimeHeadersIntegration extends TomcatBaseTest {
         // Can change maxHeaderCount
         Tomcat tomcat = getTomcatInstance();
         setupHeadersTest(tomcat);
-        tomcat.getConnector().setProperty("maxHeaderCount", "-1");
+        Assert.assertTrue(tomcat.getConnector().setProperty("maxHeaderCount", "-1"));
         runHeadersTest(true, tomcat, 300, -1);
     }
 

==================================================
TestCustomSsl.java
index fe8d8da98f..19f2e5e153 100644
--- a/test/org/apache/tomcat/util/net/TestClientCertTls13.java
+++ b/test/org/apache/tomcat/util/net/TestClientCertTls13.java
@@ -75,9 +75,9 @@ public class TestClientCertTls13 extends TomcatBaseTest {
 
         TesterSupport.configureClientCertContext(tomcat);
         // Need to override some of the previous settings
-        tomcat.getConnector().setProperty("sslEnabledProtocols", Constants.SSL_PROTO_TLSv1_3);
+        Assert.assertTrue(tomcat.getConnector().setProperty("sslEnabledProtocols", Constants.SSL_PROTO_TLSv1_3));
         // And add force authentication to occur on the initial handshake
-        tomcat.getConnector().setProperty("clientAuth", "required");
+        Assert.assertTrue(tomcat.getConnector().setProperty("clientAuth", "required"));
 
         TesterSupport.configureClientSsl();
     }

==================================================
TestSSLHostConfigCompat.java
index 970229a28d..60dbf00f6b 100644
--- a/test/org/apache/tomcat/util/net/TestCustomSsl.java
+++ b/test/org/apache/tomcat/util/net/TestCustomSsl.java
@@ -59,15 +59,15 @@ public class TestCustomSsl extends TomcatBaseTest {
         Assume.assumeFalse("This test is only for JSSE based SSL connectors",
                 connector.getProtocolHandlerClassName().contains("Apr"));
 
-        connector.setProperty("sslImplementationName",
-                "org.apache.tomcat.util.net.jsse.TesterBug50640SslImpl");
+        Assert.assertTrue(connector.setProperty(
+                "sslImplementationName", "org.apache.tomcat.util.net.jsse.TesterBug50640SslImpl"));
 
         // This setting will break ssl configuration unless the custom
         // implementation is used.
-        connector.setProperty(TesterBug50640SslImpl.PROPERTY_NAME,
-                TesterBug50640SslImpl.PROPERTY_VALUE);
+        Assert.assertTrue(connector.setProperty(
+                TesterBug50640SslImpl.PROPERTY_NAME, TesterBug50640SslImpl.PROPERTY_VALUE));
 
-        connector.setProperty("sslProtocol", "tls");
+        Assert.assertTrue(connector.setProperty("sslProtocol", "tls"));
 
         File keystoreFile =
             new File(TesterSupport.LOCALHOST_RSA_JKS);
@@ -75,7 +75,7 @@ public class TestCustomSsl extends TomcatBaseTest {
                 "keystoreFile", keystoreFile.getAbsolutePath());
 
         connector.setSecure(true);
-        connector.setProperty("SSLEnabled", "true");
+        Assert.assertTrue(connector.setProperty("SSLEnabled", "true"));
 
         File appDir = new File(getBuildDirectory(), "webapps/examples");
         Context ctxt  = tomcat.addWebapp(

==================================================
TestXxxEndpoint.java
index 42029bf866..90c160f4c1 100644
--- a/test/org/apache/tomcat/util/net/TestSSLHostConfigCompat.java
+++ b/test/org/apache/tomcat/util/net/TestSSLHostConfigCompat.java
@@ -322,8 +322,8 @@ public class TestSSLHostConfigCompat extends TomcatBaseTest {
         connector.setPort(0);
         connector.setScheme("https");
         connector.setSecure(true);
-        connector.setProperty("SSLEnabled", "true");
-        connector.setProperty("sslImplementationName", sslImplementationName);
+        Assert.assertTrue(connector.setProperty("SSLEnabled", "true"));
+        Assert.assertTrue(connector.setProperty("sslImplementationName", sslImplementationName));
         sslHostConfig.setProtocols("TLSv1.2");
         connector.addSslHostConfig(sslHostConfig);
 

==================================================
TesterSupport.java
index 00d6bb588d..ab08bf786b 100644
--- a/test/org/apache/tomcat/util/net/TestXxxEndpoint.java
+++ b/test/org/apache/tomcat/util/net/TestXxxEndpoint.java
@@ -155,7 +155,7 @@ public class TestXxxEndpoint extends TomcatBaseTest {
     public void testStartStopBindOnStart() throws Exception {
         Tomcat tomcat = getTomcatInstance();
         Connector c = tomcat.getConnector();
-        c.setProperty("bindOnInit", "false");
+        Assert.assertTrue(c.setProperty("bindOnInit", "false"));
 
         File appDir = new File(getBuildDirectory(), "webapps/examples");
         tomcat.addWebapp(null, "/examples", appDir.getAbsolutePath());

==================================================
TestWsWebSocketContainerWithProxy.java
index e0ceda13e4..49b8de7b77 100644
--- a/test/org/apache/tomcat/util/net/TesterSupport.java
+++ b/test/org/apache/tomcat/util/net/TesterSupport.java
@@ -48,6 +48,8 @@ import jakarta.servlet.http.HttpServlet;
 import jakarta.servlet.http.HttpServletRequest;
 import jakarta.servlet.http.HttpServletResponse;
 
+import org.junit.Assert;
+
 import org.apache.catalina.Context;
 import org.apache.catalina.authenticator.SSLAuthenticator;
 import org.apache.catalina.connector.Connector;
@@ -146,7 +148,7 @@ public final class TesterSupport {
                 server.addLifecycleListener(listener);
                 tomcat.getConnector().setAttribute("sslImplementationName", sslImplementation);
             }
-            connector.setProperty("sslProtocol", "tls");
+            Assert.assertTrue(connector.setProperty("sslProtocol", "tls"));
             File keystoreFile =
                 new File(keystore);
             connector.setAttribute("keystoreFile",
@@ -175,7 +177,7 @@ public final class TesterSupport {
                     keystoreFile.getAbsolutePath());
         }
         tomcat.getConnector().setSecure(true);
-        tomcat.getConnector().setProperty("SSLEnabled", "true");
+        Assert.assertTrue(tomcat.getConnector().setProperty("SSLEnabled", "true"));
     }
 
     protected static KeyManager[] getUser1KeyManagers() throws Exception {
@@ -264,7 +266,7 @@ public final class TesterSupport {
          * depend. Therefore, force these tests to use TLSv1.2 so that they pass
          * when running on TLSv1.3.
          */
-        tomcat.getConnector().setProperty("sslEnabledProtocols", Constants.SSL_PROTO_TLSv1_2);
+        Assert.assertTrue(tomcat.getConnector().setProperty("sslEnabledProtocols", Constants.SSL_PROTO_TLSv1_2));
 
         // Need a web application with a protected and unprotected URL
         // No file system docBase required

==================================================
