406f62e90c931b559d2146b0fdaec535cfc51698
==================================================
ServletInputStream.dataAvailable() was removed.
==================================================
Mark Emlyn
==================================================
Thu Oct 11 22:52:30 2012 +0000
==================================================
ServletInputStream.java
ServletInputStream.dataAvailable() was removed.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1397354 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ServletOutputStream.java
index 00771a42b9..bfdcae8060 100644
--- a/java/javax/servlet/ServletInputStream.java
+++ b/java/javax/servlet/ServletInputStream.java
@@ -83,28 +83,21 @@ public abstract class ServletInputStream extends InputStream {
     }
 
     /**
-     * TODO SERVLET 3.1
-     * @return  TODO
-     */
-    public abstract int dataAvailable();
-
-
-    /**
-     * TODO SERVLET 3.1
-     * @return  TODO
+     * Returns <code>true</code> if all the data has been read from the stream,
+     * else <code>false</code>.
      */
     public abstract boolean isFinished();
 
     /**
-     * TODO SERVLET 3.1
-     * If this returns false, the container will invoke
-     * {@link ReadListener#onDataAvailable()} when data is available.
-     * @return  TODO
+     * Returns <code>true</code> if data can be read without blocking, else
+     * <code>false</code>. If this method is called and returns false, the
+     * container will invoke {@link ReadListener#onDataAvailable()} when data is
+     * available.
      */
     public abstract boolean isReady();
 
     /**
-     * TODO SERVLET 3.1
+     * Sets the {@link ReadListener} for this {@link ServletInputStream}.
      */
-    public abstract void setReadListener(javax.servlet.ReadListener listener);
+    public abstract void setReadListener(ReadListener listener);
 }

==================================================
CoyoteInputStream.java
index c32b6bba38..caa1c3f29f 100644
--- a/java/javax/servlet/ServletOutputStream.java
+++ b/java/javax/servlet/ServletOutputStream.java
@@ -283,4 +283,5 @@ public abstract class ServletOutputStream extends OutputStream {
     /**
      * TODO SERVLET 3.1
      */
-    public abstract void setWriteListener(javax.servlet.WriteListener listener);}
+    public abstract void setWriteListener(javax.servlet.WriteListener listener);
+}

==================================================
InputBuffer.java
index e874d873bb..598f21d6f8 100644
--- a/java/org/apache/catalina/connector/CoyoteInputStream.java
+++ b/java/org/apache/catalina/connector/CoyoteInputStream.java
@@ -247,11 +247,6 @@ public class CoyoteInputStream
         return ib.isFinished();
     }
 
-    @Override
-    public int dataAvailable() {
-        return ib.dataAvailable();
-    }
-
 
     @Override
     public boolean isReady() {
@@ -266,6 +261,4 @@ public class CoyoteInputStream
     public void setReadListener(ReadListener listener) {
         ib.setReadListener(listener);
     }
-
-
 }

==================================================
AsyncContextImpl.java
index 27d2c5481a..75f029b918 100644
--- a/java/org/apache/catalina/connector/InputBuffer.java
+++ b/java/org/apache/catalina/connector/InputBuffer.java
@@ -248,41 +248,28 @@ public class InputBuffer extends Reader
         return available;
     }
 
+
     private volatile ReadListener listener;
     public void setReadListener(ReadListener listener) {
         this.listener = listener;
         coyoteRequest.action(ActionCode.SET_READ_LISTENER, listener);
     }
 
+
     public ReadListener getReadListener() {
         return listener;
     }
 
-    public boolean isFinished() {
-        return dataAvailable()==0;
-    }
-
-    public int dataAvailable() {
-        if (getReadListener()==null) throw new IllegalStateException("not in non blocking mode.");
-        int result = 0;
-        //first check if we have buffered something already
-        result = available();
-
-        if(result <= 0) {
-            //here we can issue a non blocking read
-            //if supported
-            //TODO SERVLET 3.1
-        }
-
-        return result;
 
+    public boolean isFinished() {
+        return available() == 0;
     }
 
 
     public boolean isReady() {
         if (getReadListener()==null) throw new IllegalStateException("not in non blocking mode.");
-        int available = dataAvailable();
-        boolean result = available>0;
+        int available = available();
+        boolean result = available > 0;
         if (!result) {
             coyoteRequest.action(ActionCode.NB_READ_INTEREST, null);
         }
@@ -290,13 +277,8 @@ public class InputBuffer extends Reader
     }
 
 
-
-
-
-
     // ------------------------------------------------- Bytes Handling Methods
 
-
     /**
      * Reads new bytes in the byte chunk.
      *

==================================================
TestNonBlockingAPI.java
index 4a2d17b4a9..22dd780f15 100644
--- a/java/org/apache/catalina/core/AsyncContextImpl.java
+++ b/java/org/apache/catalina/core/AsyncContextImpl.java
@@ -112,7 +112,7 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
         try {
             Thread.currentThread().setContextClassLoader(newCL);
             request.getCoyoteRequest().getReadListener().onDataAvailable();
-            if (request.getInputStream().dataAvailable()==0) {
+            if (request.getInputStream().isFinished()) {
                 request.getCoyoteRequest().getReadListener().onAllDataRead();
             }
         }finally {

==================================================
