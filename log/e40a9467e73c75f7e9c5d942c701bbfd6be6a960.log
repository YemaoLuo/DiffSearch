e40a9467e73c75f7e9c5d942c701bbfd6be6a960
==================================================
Default to "tomcat" as the Kube namespace
==================================================
remm remm@apache.org
==================================================
Wed Jul 17 09:34:00 2019 +0200
==================================================
CloudMembershipProvider.java
Default to "tomcat" as the Kube namespace

Refactor to pull up common code (it doesn't prevent non Kube providers,
obviously). Warn instead of exit if the Kube environment is not present.


==================================================
DNSMembershipProvider.java
index 70f5fa11d9..9940673e74 100644
--- a/java/org/apache/catalina/tribes/membership/cloud/CloudMembershipProvider.java
+++ b/java/org/apache/catalina/tribes/membership/cloud/CloudMembershipProvider.java
@@ -42,6 +42,8 @@ public abstract class CloudMembershipProvider extends MembershipProviderBase imp
     private static final Log log = LogFactory.getLog(CloudMembershipProvider.class);
     protected static final StringManager sm = StringManager.getManager(CloudMembershipProvider.class);
 
+    protected static final String CUSTOM_ENV_PREFIX = "OPENSHIFT_KUBE_PING_";
+
     protected String url;
     protected StreamProvider streamProvider;
     protected int connectionTimeout;
@@ -65,21 +67,35 @@ public abstract class CloudMembershipProvider extends MembershipProviderBase imp
         }
     }
 
-    // Get value of environment variable named keys[0]
-    // If keys[0] isn't found, try keys[1], keys[2], ...
-    // If nothing is found, return null
+    /**
+     * Get value of environment variable.
+     * @param keys the environment variables
+     * @return the env variables values, or null if not found
+     */
     protected static String getEnv(String... keys) {
         String val = null;
-
         for (String key : keys) {
             val = AccessController.doPrivileged((PrivilegedAction<String>) () -> System.getenv(key));
             if (val != null)
                 break;
         }
-
         return val;
     }
 
+    /**
+     * Get the Kubernetes namespace, or "tomcat" if the Kubernetes environment variable
+     * cannot be found (with a warning log about the missing namespace).
+     * @return the namespace
+     */
+    protected String getNamespace() {
+        String namespace = getEnv("KUBERNETES_NAMESPACE", CUSTOM_ENV_PREFIX + "NAMESPACE");
+        if (namespace == null || namespace.length() == 0) {
+            log.warn(sm.getString("kubernetesMembershipProvider.noNamespace"));
+            namespace = "tomcat";
+        }
+        return namespace;
+    }
+
     @Override
     public void init(Properties properties) throws IOException {
         startTime = Instant.now();

==================================================
KubernetesMembershipProvider.java
index 43d02f10f9..25fcff178d 100644
--- a/java/org/apache/catalina/tribes/membership/cloud/DNSMembershipProvider.java
+++ b/java/org/apache/catalina/tribes/membership/cloud/DNSMembershipProvider.java
@@ -33,7 +33,6 @@ import org.apache.juli.logging.LogFactory;
 public class DNSMembershipProvider extends CloudMembershipProvider {
     private static final Log log = LogFactory.getLog(DNSMembershipProvider.class);
 
-    private static final String CUSTOM_ENV_PREFIX = "OPENSHIFT_KUBE_PING_";
     private String namespace;
 
     @Override
@@ -45,10 +44,7 @@ public class DNSMembershipProvider extends CloudMembershipProvider {
         super.start(level);
 
         // Set up Kubernetes API parameters
-        namespace = getEnv("KUBERNETES_NAMESPACE", CUSTOM_ENV_PREFIX + "NAMESPACE");
-        if (namespace == null || namespace.length() == 0) {
-            throw new IllegalArgumentException(sm.getString("kubernetesMembershipProvider.noNamespace"));
-        }
+        namespace = getNamespace();
 
         if (log.isDebugEnabled()) {
             log.debug(String.format("Namespace [%s] set; clustering enabled", namespace));

==================================================
