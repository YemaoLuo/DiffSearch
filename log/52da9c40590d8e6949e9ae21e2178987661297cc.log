52da9c40590d8e6949e9ae21e2178987661297cc
==================================================
Add support for same-site cookie attribute
==================================================
John Kelly
==================================================
Sat May 4 18:15:30 2019 +0100
==================================================
Context.java
Add support for same-site cookie attribute



==================================================
Response.java
index 5e3d28586c..fef50c01d5 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -39,6 +39,7 @@ import org.apache.tomcat.util.descriptor.web.FilterMap;
 import org.apache.tomcat.util.descriptor.web.LoginConfig;
 import org.apache.tomcat.util.descriptor.web.SecurityConstraint;
 import org.apache.tomcat.util.http.CookieProcessor;
+import org.apache.tomcat.util.http.SameSiteCookies;
 
 /**
  * A <b>Context</b> is a Container that represents a servlet context, and
@@ -252,6 +253,24 @@ public interface Context extends Container, ContextBind {
     public void setUseHttpOnly(boolean useHttpOnly);
 
 
+    /**
+     * Gets the value of the sameSiteCookies setting.
+     *
+     * @return  The value of the setting (<code>none</code>, <code>lax</code>, <code>strict</code>)
+     *
+     */
+    public SameSiteCookies getSameSiteCookies();
+
+
+    /**
+     * Sets the value of the sameSiteCookies setting.
+     *
+     * @param value   Can be set to <code>none</code>, <code>lax</code>, <code>strict</code>.
+     *
+     */
+    public void setSameSiteCookies(String value);
+
+
     /**
      * Gets the domain to use for session cookies. Overrides any setting that
      * may be specified by the application.

==================================================
ApplicationPushBuilder.java
index 0df7e00db2..d9961959b7 100644
--- a/java/org/apache/catalina/connector/Response.java
+++ b/java/org/apache/catalina/connector/Response.java
@@ -973,7 +973,7 @@ public class Response implements HttpServletResponse {
             return AccessController.doPrivileged(
                     new PrivilegedGenerateCookieString(getContext(), cookie));
         } else {
-            return getContext().getCookieProcessor().generateHeader(cookie);
+            return getContext().getCookieProcessor().generateHeader(cookie, getContext().getSameSiteCookies());
         }
     }
 
@@ -1839,7 +1839,7 @@ public class Response implements HttpServletResponse {
 
         @Override
         public String run(){
-            return context.getCookieProcessor().generateHeader(cookie);
+            return context.getCookieProcessor().generateHeader(cookie, context.getSameSiteCookies());
         }
     }
 

==================================================
StandardContext.java
index 58858aecb1..e1c183385c 100644
--- a/java/org/apache/catalina/core/ApplicationPushBuilder.java
+++ b/java/org/apache/catalina/core/ApplicationPushBuilder.java
@@ -161,7 +161,7 @@ public class ApplicationPushBuilder implements PushBuilder {
         }
         List<String> cookieValues = new ArrayList<>(1);
         cookieValues.add(generateCookieHeader(cookies,
-                catalinaRequest.getContext().getCookieProcessor()));
+                catalinaRequest.getContext().getCookieProcessor(), context));
         headers.put("cookie", cookieValues);
 
         // Authentication
@@ -425,7 +425,7 @@ public class ApplicationPushBuilder implements PushBuilder {
     }
 
 
-    private static String generateCookieHeader(List<Cookie> cookies, CookieProcessor cookieProcessor) {
+    private static String generateCookieHeader(List<Cookie> cookies, CookieProcessor cookieProcessor, Context context) {
         StringBuilder result = new StringBuilder();
         boolean first = true;
         for (Cookie cookie : cookies) {
@@ -439,7 +439,7 @@ public class ApplicationPushBuilder implements PushBuilder {
             // However, if passed a Cookie with just a name and value set it
             // will generate an appropriate header for the Cookie header on the
             // pushed request.
-            result.append(cookieProcessor.generateHeader(cookie));
+            result.append(cookieProcessor.generateHeader(cookie, context.getSameSiteCookies()));
         }
         return result.toString();
     }

==================================================
FailedContext.java
index af616213d5..722fa5f024 100644
--- a/java/org/apache/catalina/core/mbeans-descriptors.xml
+++ b/java/org/apache/catalina/core/mbeans-descriptors.xml
@@ -264,6 +264,10 @@
                description="Should Tomcat renew the threads of the thread pool when the application is stopped to avoid memory leaks because of uncleaned ThreadLocal variables."
                type="boolean"/>
 
+    <attribute name="sameSiteCookies"
+               description="The setting to use for the same site cookie attribute."
+               type="java.lang.String"/>
+
     <attribute name="server"
                description="The J2EE Server this module is deployed on"
                type="java.lang.String"/>

==================================================
CookieProcessor.java
index 02f58472b6..c38f804abf 100644
--- a/java/org/apache/catalina/startup/FailedContext.java
+++ b/java/org/apache/catalina/startup/FailedContext.java
@@ -62,6 +62,7 @@ import org.apache.tomcat.util.descriptor.web.FilterMap;
 import org.apache.tomcat.util.descriptor.web.LoginConfig;
 import org.apache.tomcat.util.descriptor.web.SecurityConstraint;
 import org.apache.tomcat.util.http.CookieProcessor;
+import org.apache.tomcat.util.http.SameSiteCookies;
 import org.apache.tomcat.util.res.StringManager;
 
 /**
@@ -345,6 +346,11 @@ public class FailedContext extends LifecycleMBeanBase implements Context {
     @Override
     public void setUseHttpOnly(boolean useHttpOnly) { /* NO-OP */ }
 
+    @Override
+    public SameSiteCookies getSameSiteCookies() { return null; }
+    @Override
+    public void setSameSiteCookies(String sameSiteCookies) { /* NO-OP */ }
+
     @Override
     public String getSessionCookieDomain() { return null; }
     @Override

==================================================
LegacyCookieProcessor.java
index e0efbf1718..0f6a554db8 100644
--- a/java/org/apache/tomcat/util/http/CookieProcessor.java
+++ b/java/org/apache/tomcat/util/http/CookieProcessor.java
@@ -36,10 +36,12 @@ public interface CookieProcessor {
      *
      * @param cookie The cookie for which the header will be generated
      *
+     * @param sameSiteCookies The sameSiteCookies attribute specified in context.
+     *
      * @return The header value in a form that can be added directly to the
      *         response
      */
-    String generateHeader(Cookie cookie);
+    String generateHeader(Cookie cookie, SameSiteCookies sameSiteCookies);
 
     /**
      * Obtain the character set that will be used when converting between bytes

==================================================
Rfc6265CookieProcessor.java
index 18ae61acce..e7d3a549ee 100644
--- a/java/org/apache/tomcat/util/http/LocalStrings.properties
+++ b/java/org/apache/tomcat/util/http/LocalStrings.properties
@@ -18,6 +18,7 @@ cookies.fallToDebug=\n\
 cookies.invalidCookieToken=Cookies: Invalid cookie. Value not a token or quoted value
 cookies.invalidSpecial=Cookies: Unknown Special Cookie
 cookies.maxCountFail=More than the maximum allowed number of cookies, [{0}], were detected.
+cookies.invalidSameSiteCookies=Unknown setting [{0}], must be one of: none, lax, strict. Default value is none.
 
 headers.maxCountFail=More than the maximum allowed number of headers, [{0}], were detected.
 

==================================================
SameSiteCookies.java
index a0e54f3a1a..29d3d19e54 100644
--- a/java/org/apache/tomcat/util/http/Rfc6265CookieProcessor.java
+++ b/java/org/apache/tomcat/util/http/Rfc6265CookieProcessor.java
@@ -98,7 +98,7 @@ public class Rfc6265CookieProcessor extends CookieProcessorBase {
 
 
     @Override
-    public String generateHeader(javax.servlet.http.Cookie cookie) {
+    public String generateHeader(javax.servlet.http.Cookie cookie, SameSiteCookies sameSiteCookies) {
 
         // Can't use StringBuilder due to DateFormat
         StringBuffer header = new StringBuffer();
@@ -162,6 +162,11 @@ public class Rfc6265CookieProcessor extends CookieProcessorBase {
             header.append("; HttpOnly");
         }
 
+        if (!sameSiteCookies.equals(SameSiteCookies.NONE)) {
+            header.append("; SameSite=");
+            header.append(sameSiteCookies.toString());
+        }
+
         return header.toString();
     }
 

==================================================
TesterContext.java
new file mode 100644
index 0000000000..2143468c87
--- /dev/null
+++ b/java/org/apache/tomcat/util/http/SameSiteCookies.java
@@ -0,0 +1,59 @@
+package org.apache.tomcat.util.http;
+
+import org.apache.tomcat.util.res.StringManager;
+
+public class SameSiteCookies {
+
+    private static final StringManager sm = StringManager.getManager(SameSiteCookies.class);
+
+    private final String value;
+
+    public static final SameSiteCookies NONE = new SameSiteCookies("None");
+    /** Don't set the SameSite cookie attribute. Cookie is always sent
+     */
+    public static final SameSiteCookies LAX = new SameSiteCookies("Lax");
+    /** Cookie is only sent on same-site requests and cross-site top level navigation GET requests
+     */
+    public static final SameSiteCookies STRICT = new SameSiteCookies("Strict");
+    /** Prevents the cookie from being sent by the browser in all cross-site requests
+     */
+
+    public static SameSiteCookies toAttribute(String value) {
+        SameSiteCookies attribute;
+        if (value.equalsIgnoreCase(NONE.value)) {
+            attribute = NONE;
+        } else if (value.equalsIgnoreCase(LAX.value)) {
+            attribute = LAX;
+        } else if (value.equalsIgnoreCase(STRICT.value)) {
+            attribute = STRICT;
+        } else {
+            throw new IllegalStateException(
+                    sm.getString("cookies.invalidSameSiteCookies", value));
+        }
+        return attribute;
+    }
+
+    private SameSiteCookies(String value) {
+        this.value = value;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        boolean equals = false;
+        if (o instanceof SameSiteCookies) {
+            SameSiteCookies attribute = (SameSiteCookies) o;
+            equals = value.equals(attribute.value);
+        }
+        return equals;
+    }
+
+    @Override
+    public int hashCode() {
+        return value.hashCode();
+    }
+
+    @Override
+    public String toString() {
+        return value;
+    }
+}

==================================================
TestCookieProcessorGeneration.java
index 9725e76eb4..8d45fcd8a6 100644
--- a/test/org/apache/tomcat/unittest/TesterContext.java
+++ b/test/org/apache/tomcat/unittest/TesterContext.java
@@ -63,6 +63,7 @@ import org.apache.tomcat.util.descriptor.web.FilterMap;
 import org.apache.tomcat.util.descriptor.web.LoginConfig;
 import org.apache.tomcat.util.descriptor.web.SecurityConstraint;
 import org.apache.tomcat.util.http.CookieProcessor;
+import org.apache.tomcat.util.http.SameSiteCookies;
 
 /**
  * Minimal implementation for use in unit tests.
@@ -419,6 +420,16 @@ public class TesterContext implements Context {
         // NO-OP
     }
 
+    @Override
+    public SameSiteCookies getSameSiteCookies() {
+        return null;
+    }
+
+    @Override
+    public void setSameSiteCookies(String value) {
+        // NO-OP
+    }
+
     @Override
     public String getSessionCookieDomain() {
         return null;

==================================================
TestSameSiteCookies.java
index f8a1d582bb..ca48310605 100644
--- a/test/org/apache/tomcat/util/http/TestCookieProcessorGeneration.java
+++ b/test/org/apache/tomcat/util/http/TestCookieProcessorGeneration.java
@@ -254,6 +254,34 @@ public class TestCookieProcessorGeneration {
         doV1TestPath("exa\tmple", "foo=bar; Version=1; Path=\"exa\tmple\"", null);
     }
 
+    @Test
+    public void testSameSiteCookies() {
+        CookieProcessor legacy = new LegacyCookieProcessor();
+        CookieProcessor rfc6265 = new Rfc6265CookieProcessor();
+
+        Cookie cookie = new Cookie("foo", "bar");
+
+        Assert.assertEquals("foo=bar", legacy.generateHeader(cookie, SameSiteCookies.NONE));
+        Assert.assertEquals("foo=bar", rfc6265.generateHeader(cookie, SameSiteCookies.NONE));
+
+        Assert.assertEquals("foo=bar; SameSite=Lax", legacy.generateHeader(cookie, SameSiteCookies.LAX));
+        Assert.assertEquals("foo=bar; SameSite=Lax", rfc6265.generateHeader(cookie, SameSiteCookies.LAX));
+
+        Assert.assertEquals("foo=bar; SameSite=Strict", legacy.generateHeader(cookie, SameSiteCookies.STRICT));
+        Assert.assertEquals("foo=bar; SameSite=Strict", rfc6265.generateHeader(cookie, SameSiteCookies.STRICT));
+
+        cookie.setSecure(true);
+        cookie.setHttpOnly(true);
+
+        Assert.assertEquals("foo=bar; Secure; HttpOnly", legacy.generateHeader(cookie, SameSiteCookies.NONE));
+        Assert.assertEquals("foo=bar; Secure; HttpOnly", rfc6265.generateHeader(cookie, SameSiteCookies.NONE));
+
+        Assert.assertEquals("foo=bar; Secure; HttpOnly; SameSite=Lax", legacy.generateHeader(cookie, SameSiteCookies.LAX));
+        Assert.assertEquals("foo=bar; Secure; HttpOnly; SameSite=Lax", rfc6265.generateHeader(cookie, SameSiteCookies.LAX));
+
+        Assert.assertEquals("foo=bar; Secure; HttpOnly; SameSite=Strict", legacy.generateHeader(cookie, SameSiteCookies.STRICT));
+        Assert.assertEquals("foo=bar; Secure; HttpOnly; SameSite=Strict", rfc6265.generateHeader(cookie, SameSiteCookies.STRICT));
+    }
 
     private void doTest(Cookie cookie, String expected) {
         doTest(cookie, expected, expected);
@@ -297,7 +325,7 @@ public class TestCookieProcessorGeneration {
         if (expected == null) {
             IllegalArgumentException e = null;
             try {
-                cookieProcessor.generateHeader(cookie);
+                cookieProcessor.generateHeader(cookie, SameSiteCookies.NONE);
             } catch (IllegalArgumentException iae) {
                 e = iae;
             }
@@ -307,9 +335,9 @@ public class TestCookieProcessorGeneration {
                     cookie.getMaxAge() > 0) {
                 // Expires attribute will depend on time cookie is generated so
                 // use a modified test
-                Assert.assertTrue(cookieProcessor.generateHeader(cookie).startsWith(expected));
+                Assert.assertTrue(cookieProcessor.generateHeader(cookie, SameSiteCookies.NONE).startsWith(expected));
             } else {
-                Assert.assertEquals(expected, cookieProcessor.generateHeader(cookie));
+                Assert.assertEquals(expected, cookieProcessor.generateHeader(cookie, SameSiteCookies.NONE));
             }
         }
     }

==================================================
