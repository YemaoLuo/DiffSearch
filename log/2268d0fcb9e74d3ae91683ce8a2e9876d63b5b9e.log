2268d0fcb9e74d3ae91683ce8a2e9876d63b5b9e
==================================================
More protocol alignment (with an eye to aligning with AJP)
==================================================
Mark Emlyn
==================================================
Fri Jul 8 15:10:01 2011 +0000
==================================================
Http11AprProtocol.java
More protocol alignment (with an eye to aligning with AJP)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1144354 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11NioProtocol.java
index c228f8fba1..27f306aaed 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -210,7 +210,27 @@ public class Http11AprProtocol extends AbstractHttp11Protocol {
         public void recycle() {
             recycledProcessors.clear();
         }
-        
+
+        /**
+         * Expected to be used by the handler once the processor is no longer
+         * required.
+         * 
+         * @param socket
+         * @param processor
+         * @param isSocketClosing   Not used in HTTP
+         * @param addToPoller
+         */
+        public void release(SocketWrapper<Long> socket,
+                Http11AprProcessor processor, boolean isSocketClosing,
+                boolean addToPoller) {
+            processor.recycle();
+            recycledProcessors.offer(processor);
+            if (addToPoller) {
+                ((AprEndpoint)proto.endpoint).getPoller().add(
+                        socket.getSocket().longValue());
+            }
+        }
+
         @Override
         public SocketState process(SocketWrapper<Long> socket,
                 SocketStatus status) {
@@ -257,14 +277,10 @@ public class Http11AprProtocol extends AbstractHttp11Protocol {
                 } else if (state == SocketState.OPEN){
                     // In keep-alive but between requests. OK to recycle
                     // processor. Continue to poll for the next request.
-                    processor.recycle();
-                    recycledProcessors.offer(processor);
-                    ((AprEndpoint)proto.endpoint).getPoller().add(
-                            socket.getSocket().longValue());
+                    release(socket, processor, false, true);
                 } else {
                     // Connection closed. OK to recycle the processor.
-                    processor.recycle();
-                    recycledProcessors.offer(processor);
+                    release(socket, processor, true, false);
                 }
                 return state;
             } catch (java.net.SocketException e) {
@@ -287,11 +303,11 @@ public class Http11AprProtocol extends AbstractHttp11Protocol {
                 Http11AprProtocol.log.error(
                         sm.getString("http11protocol.proto.error"), e);
             }
-            processor.recycle();
-            recycledProcessors.offer(processor);
+            release(socket, processor, true, false);
             return SocketState.CLOSED;
         }
 
+        @SuppressWarnings("unused")
         private void initSsl(SocketWrapper<Long> socket,
                 Http11AprProcessor processor) {
             // NOOP for APR

==================================================
Http11Protocol.java
index e4dc0df101..b02d16b939 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -187,6 +187,10 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
             recycledProcessors.clear();
         }
         
+        /**
+         * Expected to be used by the Poller to release resources on socket
+         * close, errors etc.
+         */
         @Override
         public void release(SocketChannel socket) {
             if (log.isDebugEnabled()) 
@@ -209,8 +213,8 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
         }
         
         /**
-         * Use this only if the processor is not available, otherwise use
-         * {@link #release(SocketWrapper, Http11NioProcessor)}.
+         * Expected to be used by the Poller to release resources on socket
+         * close, errors etc.
          */
         @Override
         public void release(SocketWrapper<NioChannel> socket) {
@@ -222,11 +226,23 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
         }
 
 
+        /**
+         * Expected to be used by the handler once the processor is no longer
+         * required.
+         * 
+         * @param socket
+         * @param processor
+         * @param isSocketClosing   Not used in HTTP
+         * @param addToPoller
+         */
         public void release(SocketWrapper<NioChannel> socket,
-                Http11NioProcessor processor) {
-            connections.remove(socket);
+                Http11NioProcessor processor, boolean isSocketClosing,
+                boolean addToPoller) {
             processor.recycle();
             recycledProcessors.offer(processor);
+            if (addToPoller) {
+                socket.getSocket().getPoller().add(socket.getSocket());
+            }
         }
 
 
@@ -283,11 +299,10 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
                 } else if (state == SocketState.OPEN){
                     // In keep-alive but between requests. OK to recycle
                     // processor. Continue to poll for the next request.
-                    release(socket, processor);
-                    socket.getSocket().getPoller().add(socket.getSocket());
+                    release(socket, processor, false, true);
                 } else {
                     // Connection closed. OK to recycle the processor.
-                    release(socket, processor);
+                    release(socket, processor, true, false);
                 }
                 return state;
             } catch (java.net.SocketException e) {
@@ -309,7 +324,7 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
                 // less-than-verbose logs.
                 log.error(sm.getString("http11protocol.proto.error"), e);
             }
-            release(socket, processor);
+            release(socket, processor, true, false);
             return SocketState.CLOSED;
         }
 

==================================================
