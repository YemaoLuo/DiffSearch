2f9e7c557230c68647796090503511181030c5f2
==================================================
Refactor the relationship between OpenSSLContext and KeyManager
==================================================
Mark Thomas
==================================================
Wed Feb 27 20:50:31 2019 +0000
==================================================
AprEndpoint.java
Refactor the relationship between OpenSSLContext and KeyManager

The KeyManager is specific to the KeyStore. When there are multiple
certificates (and hence multiple KeyStores) there needs to be multiple
KeyManagers. Move the KeyManager to the SSLHostConfigCertificate to
enable this.


==================================================
SSLHostConfigCertificate.java
index 581b287f55..737e8d2797 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -32,6 +32,8 @@ import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
 
+import javax.net.ssl.KeyManager;
+
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.jni.Address;
@@ -409,6 +411,9 @@ public class AprEndpoint extends AbstractEndpoint<Long,Long> implements SNICallB
                     throw new IllegalArgumentException(e.getMessage(), e);
                 }
             } else {
+                SSLUtil sslUtil = new OpenSSLUtil(certificate);
+                KeyManager[] kms = sslUtil.getKeyManagers();
+                certificate.setCertificateKeyManager(OpenSSLUtil.chooseKeyManager(kms));
                 sslContext.addCertificate(certificate);
             }
 

==================================================
OpenSSLContext.java
index 5dd6401618..e0b0e9cfe4 100644
--- a/java/org/apache/tomcat/util/net/SSLHostConfigCertificate.java
+++ b/java/org/apache/tomcat/util/net/SSLHostConfigCertificate.java
@@ -23,6 +23,7 @@ import java.util.HashSet;
 import java.util.Set;
 
 import javax.management.ObjectName;
+import javax.net.ssl.X509KeyManager;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -63,6 +64,7 @@ public class SSLHostConfigCertificate implements Serializable {
     private String certificateKeystoreProvider = DEFAULT_KEYSTORE_PROVIDER;
     private String certificateKeystoreType = DEFAULT_KEYSTORE_TYPE;
     private transient KeyStore certificateKeystore = null;
+    private transient X509KeyManager certificateKeyManager = null;
 
     // OpenSSL
     private String certificateChainFile;
@@ -210,6 +212,16 @@ public class SSLHostConfigCertificate implements Serializable {
     }
 
 
+    public void setCertificateKeyManager(X509KeyManager certificateKeyManager) {
+        this.certificateKeyManager = certificateKeyManager;
+    }
+
+
+    public X509KeyManager getCertificateKeyManager() {
+        return certificateKeyManager;
+    }
+
+
     // OpenSSL
 
     public void setCertificateChainFile(String certificateChainFile) {

==================================================
OpenSSLUtil.java
index 08e9255feb..7f13859af9 100644
--- a/java/org/apache/tomcat/util/net/openssl/OpenSSLContext.java
+++ b/java/org/apache/tomcat/util/net/openssl/OpenSSLContext.java
@@ -51,7 +51,6 @@ import org.apache.tomcat.util.net.Constants;
 import org.apache.tomcat.util.net.SSLHostConfig;
 import org.apache.tomcat.util.net.SSLHostConfigCertificate;
 import org.apache.tomcat.util.net.SSLHostConfigCertificate.Type;
-import org.apache.tomcat.util.net.jsse.JSSEKeyManager;
 import org.apache.tomcat.util.res.StringManager;
 
 public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
@@ -67,7 +66,6 @@ public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
     private final SSLHostConfig sslHostConfig;
     private final SSLHostConfigCertificate certificate;
     private OpenSSLSessionContext sessionContext;
-    private X509KeyManager x509KeyManager;
     private X509TrustManager x509TrustManager;
 
     private final List<String> negotiableProtocols;
@@ -245,7 +243,7 @@ public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
             SSLContext.setCipherSuite(ctx, sslHostConfig.getCiphers());
 
             if (certificate.getCertificateFile() == null) {
-                x509KeyManager = chooseKeyManager(kms);
+                certificate.setCertificateKeyManager(OpenSSLUtil.chooseKeyManager(kms));
             }
 
             addCertificate(certificate);
@@ -393,6 +391,7 @@ public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
                             sslHostConfig.getCertificateRevocationListPath()));
         } else {
             String alias = certificate.getCertificateKeyAlias();
+            X509KeyManager x509KeyManager = certificate.getCertificateKeyManager();
             if (alias == null) {
                 alias = "tomcat";
             }
@@ -457,20 +456,6 @@ public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
         return result;
     }
 
-    private static X509KeyManager chooseKeyManager(KeyManager[] managers) throws Exception {
-        for (KeyManager manager : managers) {
-            if (manager instanceof JSSEKeyManager) {
-                return (JSSEKeyManager) manager;
-            }
-        }
-        for (KeyManager manager : managers) {
-            if (manager instanceof X509KeyManager) {
-                return (X509KeyManager) manager;
-            }
-        }
-        throw new IllegalStateException(sm.getString("openssl.keyManagerMissing"));
-    }
-
     private static X509TrustManager chooseTrustManager(TrustManager[] managers) {
         for (TrustManager m : managers) {
             if (m instanceof X509TrustManager) {
@@ -518,6 +503,7 @@ public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
     @Override
     public X509Certificate[] getCertificateChain(String alias) {
         X509Certificate[] chain = null;
+        X509KeyManager x509KeyManager = certificate.getCertificateKeyManager();
         if (x509KeyManager != null) {
             if (alias == null) {
                 alias = "tomcat";

==================================================
