6d9910302678fd8491f52c4e03efe348a66bdbd8
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55453
==================================================
Mark Emlyn
==================================================
Wed Aug 28 13:01:03 2013 +0000
==================================================
AbstractAjpProcessor.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55453
Do not return a response body for those status codes and request methods that do not permit one.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1518189 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestAbstractAjpProcessor.java
index 0a30d9dab5..2f92798635 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
@@ -215,6 +215,12 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
     protected boolean replay = false;
 
 
+    /**
+     * Should any response body be swallowed and not sent to the client.
+     */
+    private boolean swallowResponse = false;
+
+
     /**
      * Finished response.
      */
@@ -563,6 +569,7 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
         request.recycle();
         response.recycle();
         certificates.recycle();
+        swallowResponse = false;
         bytesWritten = 0;
     }
 
@@ -937,8 +944,25 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
         responseMessage.reset();
         responseMessage.appendByte(Constants.JK_AJP13_SEND_HEADERS);
 
+        // Responses with certain status codes are not permitted to include a
+        // response body.
+        int statusCode = response.getStatus();
+        if (statusCode < 200 || statusCode == 204 || statusCode == 205 ||
+                statusCode == 304) {
+            // No entity body
+            swallowResponse = true;
+        }
+
+        // Responses to HEAD requests are not permitted to incude a response
+        // body.
+        MessageBytes methodMB = request.method();
+        if (methodMB.equals("HEAD")) {
+            // No entity body
+            swallowResponse = true;
+        }
+
         // HTTP header contents
-        responseMessage.appendInt(response.getStatus());
+        responseMessage.appendInt(statusCode);
         String message = null;
         if (org.apache.coyote.Constants.USE_CUSTOM_STATUS_MSG_IN_HEADER &&
                 HttpMessages.isSafeInHttpHeader(response.getMessage())) {
@@ -1103,27 +1127,29 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
                 }
             }
 
-            int len = chunk.getLength();
-            // 4 - hardcoded, byte[] marshaling overhead
-            // Adjust allowed size if packetSize != default (Constants.MAX_PACKET_SIZE)
-            int chunkSize = Constants.MAX_SEND_SIZE + packetSize - Constants.MAX_PACKET_SIZE;
-            int off = 0;
-            while (len > 0) {
-                int thisTime = len;
-                if (thisTime > chunkSize) {
-                    thisTime = chunkSize;
+            if (!swallowResponse) {
+                int len = chunk.getLength();
+                // 4 - hardcoded, byte[] marshaling overhead
+                // Adjust allowed size if packetSize != default (Constants.MAX_PACKET_SIZE)
+                int chunkSize = Constants.MAX_SEND_SIZE + packetSize - Constants.MAX_PACKET_SIZE;
+                int off = 0;
+                while (len > 0) {
+                    int thisTime = len;
+                    if (thisTime > chunkSize) {
+                        thisTime = chunkSize;
+                    }
+                    len -= thisTime;
+                    responseMessage.reset();
+                    responseMessage.appendByte(Constants.JK_AJP13_SEND_BODY_CHUNK);
+                    responseMessage.appendBytes(chunk.getBytes(), chunk.getOffset() + off, thisTime);
+                    responseMessage.end();
+                    output(responseMessage.getBuffer(), 0, responseMessage.getLen());
+
+                    off += thisTime;
                 }
-                len -= thisTime;
-                responseMessage.reset();
-                responseMessage.appendByte(Constants.JK_AJP13_SEND_BODY_CHUNK);
-                responseMessage.appendBytes(chunk.getBytes(), chunk.getOffset() + off, thisTime);
-                responseMessage.end();
-                output(responseMessage.getBuffer(), 0, responseMessage.getLen());
-
-                off += thisTime;
-            }
 
-            bytesWritten += chunk.getLength();
+                bytesWritten += chunk.getLength();
+            }
             return chunk.getLength();
         }
 

==================================================
