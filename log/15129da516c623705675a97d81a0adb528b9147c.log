15129da516c623705675a97d81a0adb528b9147c
==================================================
Pull up more common code in Processor constructors
==================================================
Mark Emlyn
==================================================
Sun Jun 19 15:50:17 2011 +0000
==================================================
AbstractProcessor.java
Pull up more common code in Processor constructors

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1137381 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractAjpProcessor.java
index 14e2ab13fb..92c6f8e5f1 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -26,15 +26,26 @@ import org.apache.tomcat.util.net.AbstractEndpoint;
  */
 public abstract class AbstractProcessor implements ActionHook, Processor {
 
-    protected AbstractEndpoint endpoint;
-    protected Request request = null;
-    protected Response response = null;
+    protected Adapter adapter;
+    protected final AsyncStateMachine asyncStateMachine;
+    protected final AbstractEndpoint endpoint;
+    protected final Request request;
+    protected final Response response;
 
     
     public AbstractProcessor(AbstractEndpoint endpoint) {
         this.endpoint = endpoint;
+        asyncStateMachine = new AsyncStateMachine(this);
+        
+        request = new Request();
+
+        response = new Response();
+        response.setHook(this);
+        request.setResponse(response);
+
     }
 
+
     /**
      * The endpoint receiving connections that are handled by this processor.
      */
@@ -51,6 +62,27 @@ public abstract class AbstractProcessor implements ActionHook, Processor {
     }
 
 
+    /**
+     * Set the associated adapter.
+     *
+     * @param adapter the new adapter
+     */
+    public void setAdapter(Adapter adapter) {
+        this.adapter = adapter;
+    }
+
+
+    /**
+     * Get the associated adapter.
+     *
+     * @return the associated adapter
+     */
+    public Adapter getAdapter() {
+        return adapter;
+    }
+
+
+
     /*
      * Expose selected endpoint attributes through the processor
      */

==================================================
AjpAprProcessor.java
index 28c5db93ed..786a6a9462 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
@@ -28,13 +28,10 @@ import java.util.concurrent.atomic.AtomicBoolean;
 
 import org.apache.coyote.AbstractProcessor;
 import org.apache.coyote.ActionCode;
-import org.apache.coyote.Adapter;
 import org.apache.coyote.AsyncContextCallback;
-import org.apache.coyote.AsyncStateMachine;
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.Request;
 import org.apache.coyote.RequestInfo;
-import org.apache.coyote.Response;
 import org.apache.juli.logging.Log;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.buf.ByteChunk;
@@ -117,12 +114,6 @@ public abstract class AbstractAjpProcessor extends AbstractProcessor {
     // ----------------------------------------------------- Instance Variables
 
 
-    /**
-     * Associated adapter.
-     */
-    protected Adapter adapter = null;
-
-
     /**
      * AJP packet size.
      */
@@ -209,12 +200,6 @@ public abstract class AbstractAjpProcessor extends AbstractProcessor {
     protected boolean finished = false;
     
     
-    /**
-     * Track changes in state for async requests.
-     */
-    protected AsyncStateMachine asyncStateMachine = new AsyncStateMachine(this);
-
-
     /**
      * Bytes written to client for the current request
      */
@@ -229,12 +214,8 @@ public abstract class AbstractAjpProcessor extends AbstractProcessor {
 
         this.packetSize = packetSize;
 
-        request = new Request();
         request.setInputBuffer(new SocketInputBuffer());
         
-        response = new Response();
-        request.setResponse(response);
-
         requestHeaderMessage = new AjpMessage(packetSize);
         responseHeaderMessage = new AjpMessage(packetSize);
         bodyMessage = new AjpMessage(packetSize);
@@ -509,29 +490,6 @@ public abstract class AbstractAjpProcessor extends AbstractProcessor {
        byteCount = 0;
    }
    
-   // ------------------------------------------------------ Connector Methods
-
-
-   /**
-    * Set the associated adapter.
-    *
-    * @param adapter the new adapter
-    */
-   public void setAdapter(Adapter adapter) {
-       this.adapter = adapter;
-   }
-
-
-   /**
-    * Get the associated adapter.
-    *
-    * @return the associated adapter
-    */
-   public Adapter getAdapter() {
-       return adapter;
-   }
-   
-   
    // ------------------------------------------------------ Protected Methods
 
 

==================================================
AjpNioProcessor.java
index b75a6e823f..833d41587a 100644
--- a/java/org/apache/coyote/ajp/AjpAprProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpAprProcessor.java
@@ -70,7 +70,6 @@ public class AjpAprProcessor extends AbstractAjpProcessor {
 
         super(packetSize, endpoint);
 
-        response.setHook(this);
         response.setOutputBuffer(new SocketOutputBuffer());
 
         // Set the get body message buffer

==================================================
AjpProcessor.java
index 0a9e16e9c4..85fbee5ad0 100644
--- a/java/org/apache/coyote/ajp/AjpNioProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpNioProcessor.java
@@ -63,7 +63,6 @@ public class AjpNioProcessor extends AbstractAjpProcessor {
 
         super(packetSize, endpoint);
 
-        response.setHook(this);
         response.setOutputBuffer(new SocketOutputBuffer());
 
         pool = endpoint.getSelectorPool();

==================================================
AbstractHttp11Processor.java
index 0b1a8704b5..0a9d36bd00 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -69,7 +69,6 @@ public class AjpProcessor extends AbstractAjpProcessor {
 
         super(packetSize, endpoint);
 
-        response.setHook(this);
         response.setOutputBuffer(new SocketOutputBuffer());
 
         // Set the get body message buffer

==================================================
Http11AprProcessor.java
index ed3c8dffbc..d7a38dca0e 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -23,9 +23,7 @@ import java.util.regex.Pattern;
 
 import org.apache.coyote.AbstractProcessor;
 import org.apache.coyote.ActionCode;
-import org.apache.coyote.Adapter;
 import org.apache.coyote.AsyncContextCallback;
-import org.apache.coyote.AsyncStateMachine;
 import org.apache.coyote.http11.filters.BufferedInputFilter;
 import org.apache.coyote.http11.filters.ChunkedInputFilter;
 import org.apache.coyote.http11.filters.ChunkedOutputFilter;
@@ -62,11 +60,6 @@ public abstract class AbstractHttp11Processor extends AbstractProcessor {
      * are skipped when looking for pluggable filters. 
      */
     private int pluggableFilterIndex = Integer.MAX_VALUE;
-    
-    /**
-     * Associated adapter.
-     */
-    protected Adapter adapter = null;
 
 
     /**
@@ -219,12 +212,6 @@ public abstract class AbstractHttp11Processor extends AbstractProcessor {
     protected String server = null;
 
     
-    /**
-     * Track changes in state for async requests.
-     */
-    protected AsyncStateMachine asyncStateMachine = new AsyncStateMachine(this);
-
-
     public AbstractHttp11Processor(AbstractEndpoint endpoint) {
         super(endpoint);
     }
@@ -499,26 +486,6 @@ public abstract class AbstractHttp11Processor extends AbstractProcessor {
     }
 
 
-    /**
-     * Set the associated adapter.
-     *
-     * @param adapter the new adapter
-     */
-    public void setAdapter(Adapter adapter) {
-        this.adapter = adapter;
-    }
-
-
-    /**
-     * Get the associated adapter.
-     *
-     * @return the associated adapter
-     */
-    public Adapter getAdapter() {
-        return adapter;
-    }
-
-
     /**
      * Check if the resource could be compressed, if the client supports it.
      */

==================================================
Http11NioProcessor.java
index 1c5ef3fdef..49a90a620b 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -25,9 +25,7 @@ import java.security.cert.X509Certificate;
 import java.util.Locale;
 
 import org.apache.coyote.ActionCode;
-import org.apache.coyote.Request;
 import org.apache.coyote.RequestInfo;
-import org.apache.coyote.Response;
 import org.apache.coyote.http11.filters.BufferedInputFilter;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -70,15 +68,11 @@ public class Http11AprProcessor extends AbstractHttp11Processor {
 
         super(endpoint);
         
-        request = new Request();
         inputBuffer = new InternalAprInputBuffer(request, headerBufferSize);
         request.setInputBuffer(inputBuffer);
 
-        response = new Response();
-        response.setHook(this);
         outputBuffer = new InternalAprOutputBuffer(response, headerBufferSize);
         response.setOutputBuffer(outputBuffer);
-        request.setResponse(response);
 
         initializeFilters(maxTrailerSize);
 

==================================================
Http11Processor.java
index 7811cc0563..bb1fb2f8ab 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -25,9 +25,7 @@ import java.util.Locale;
 import javax.net.ssl.SSLEngine;
 
 import org.apache.coyote.ActionCode;
-import org.apache.coyote.Request;
 import org.apache.coyote.RequestInfo;
-import org.apache.coyote.Response;
 import org.apache.coyote.http11.filters.BufferedInputFilter;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -74,15 +72,11 @@ public class Http11NioProcessor extends AbstractHttp11Processor {
 
         super(endpoint);
 
-        request = new Request();
         inputBuffer = new InternalNioInputBuffer(request, maxHttpHeaderSize);
         request.setInputBuffer(inputBuffer);
 
-        response = new Response();
-        response.setHook(this);
         outputBuffer = new InternalNioOutputBuffer(response, maxHttpHeaderSize);
         response.setOutputBuffer(outputBuffer);
-        request.setResponse(response);
 
         initializeFilters(maxTrailerSize);
 

==================================================
