ed8341140f97afb4285dd16507aeb466294a007e
==================================================
Rename to avoid clash with java.lang.Error
==================================================
Mark Thomas
==================================================
Wed Jun 10 08:11:13 2015 +0000
==================================================
ConnectionError.java
Rename to avoid clash with java.lang.Error

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1684595 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ConnectionSettings.java
index a3d641ea16..a58fd5a385 100644
--- a/java/org/apache/coyote/http2/ConnectionError.java
+++ b/java/org/apache/coyote/http2/ConnectionError.java
@@ -20,7 +20,7 @@ public class ConnectionError extends Http2Exception {
 
     private static final long serialVersionUID = 1L;
 
-    public ConnectionError(String msg, Error error) {
+    public ConnectionError(String msg, Http2Error error) {
         super(msg, error);
     }
 }

==================================================
FrameType.java
index a1369e9e7c..b2f4668b17 100644
--- a/java/org/apache/coyote/http2/ConnectionSettings.java
+++ b/java/org/apache/coyote/http2/ConnectionSettings.java
@@ -82,7 +82,7 @@ public class ConnectionSettings {
         // Need to put a sensible limit on this. Start with 16k (default is 4k)
         if (headerTableSize > (16 * 1024)) {
             throw new ConnectionError(sm.getString("connectionSettings.headerTableSizeLimit",
-                    Long.toString(headerTableSize)), Error.PROTOCOL_ERROR);
+                    Long.toString(headerTableSize)), Http2Error.PROTOCOL_ERROR);
         }
         this.headerTableSize = (int) headerTableSize;
     }
@@ -96,7 +96,7 @@ public class ConnectionSettings {
         // will never be negative
         if (enablePush > 1) {
             throw new ConnectionError(sm.getString("connectionSettings.enablePushInvalid",
-                    Long.toString(enablePush)), Error.PROTOCOL_ERROR);
+                    Long.toString(enablePush)), Http2Error.PROTOCOL_ERROR);
         }
         this.enablePush = (enablePush  == 1);
     }
@@ -117,7 +117,7 @@ public class ConnectionSettings {
         if (initialWindowSize > MAX_WINDOW_SIZE) {
             throw new ConnectionError(sm.getString("connectionSettings.windowSizeTooBig",
                     Long.toString(initialWindowSize), Long.toString(MAX_WINDOW_SIZE)),
-                    Error.PROTOCOL_ERROR);
+                    Http2Error.PROTOCOL_ERROR);
         }
         this.initialWindowSize = (int) initialWindowSize;
     }
@@ -130,7 +130,7 @@ public class ConnectionSettings {
         if (maxFrameSize < MIN_MAX_FRAME_SIZE || maxFrameSize > MAX_MAX_FRAME_SIZE) {
             throw new ConnectionError(sm.getString("connectionSettings.maxFrameSizeInvalid",
                     Long.toString(maxFrameSize), Integer.toString(MIN_MAX_FRAME_SIZE),
-                    Integer.toString(MAX_MAX_FRAME_SIZE)), Error.PROTOCOL_ERROR);
+                    Integer.toString(MAX_MAX_FRAME_SIZE)), Http2Error.PROTOCOL_ERROR);
         }
         this.maxFrameSize = (int) maxFrameSize;
     }

==================================================
Http2Error.java
index e4d60f0de6..167dc645d0 100644
--- a/java/org/apache/coyote/http2/FrameType.java
+++ b/java/org/apache/coyote/http2/FrameType.java
@@ -62,7 +62,7 @@ public enum FrameType {
         // Is FrameType valid for the given stream?
         if (streamId == 0 && !streamZero || streamId != 0 && !streamNonZero) {
             throw new ConnectionError(sm.getString("frameType.checkStream", this),
-                    Error.PROTOCOL_ERROR);
+                    Http2Error.PROTOCOL_ERROR);
         }
 
         // Is the payload size valid for the given FrameType
@@ -70,11 +70,11 @@ public enum FrameType {
             if (payloadErrorFatal || streamId == 0) {
                 throw new ConnectionError(sm.getString("frameType.checkPayloadSize",
                         Integer.toString(payloadSize), this),
-                        Error.FRAME_SIZE_ERROR);
+                        Http2Error.FRAME_SIZE_ERROR);
             } else {
                 throw new StreamError(sm.getString("frameType.checkPayloadSize",
                         Integer.toString(payloadSize), this),
-                        Error.FRAME_SIZE_ERROR, streamId);
+                        Http2Error.FRAME_SIZE_ERROR, streamId);
             }
         }
     }

==================================================
Http2Exception.java
similarity index 96%
rename from java/org/apache/coyote/http2/Error.java
rename to java/org/apache/coyote/http2/Http2Error.java
index ea4c663a15..9db65ac311 100644
--- a/java/org/apache/coyote/http2/Error.java
+++ b/java/org/apache/coyote/http2/Http2Error.java
@@ -16,7 +16,7 @@
  */
 package org.apache.coyote.http2;
 
-public enum Error {
+public enum Http2Error {
 
     NO_ERROR            (0x00),
     PROTOCOL_ERROR      (0x01),
@@ -35,7 +35,7 @@ public enum Error {
 
     private final long code;
 
-    private Error(long code) {
+    private Http2Error(long code) {
         this.code = code;
     }
 

==================================================
Http2Parser.java
index e1e799e9dd..65f7502f73 100644
--- a/java/org/apache/coyote/http2/Http2Exception.java
+++ b/java/org/apache/coyote/http2/Http2Exception.java
@@ -20,16 +20,16 @@ public abstract class Http2Exception extends Exception {
 
     private static final long serialVersionUID = 1L;
 
-    private final Error error;
+    private final Http2Error error;
 
 
-    public Http2Exception(String msg, Error error) {
+    public Http2Exception(String msg, Http2Error error) {
         super(msg);
         this.error = error;
     }
 
 
-    public Error getError() {
+    public Http2Error getError() {
         return error;
     }
 }

==================================================
Http2UpgradeHandler.java
index 89f5df1960..d6761c3db9 100644
--- a/java/org/apache/coyote/http2/Http2Parser.java
+++ b/java/org/apache/coyote/http2/Http2Parser.java
@@ -246,7 +246,7 @@ class Http2Parser {
         if (payloadSize > 0 && ack) {
             throw new ConnectionError(sm.getString(
                     "http2Parser.processFrameSettings.ackWithNonZeroPayload"),
-                    Error.FRAME_SIZE_ERROR);
+                    Http2Error.FRAME_SIZE_ERROR);
         }
 
         if (payloadSize != 0) {
@@ -265,7 +265,7 @@ class Http2Parser {
 
     private void readPushPromiseFrame(int streamId) throws Http2Exception {
         throw new ConnectionError(sm.getString("http2Parser.processFramePushPromise",
-                connectionId, Integer.valueOf(streamId)), Error.PROTOCOL_ERROR);
+                connectionId, Integer.valueOf(streamId)), Http2Error.PROTOCOL_ERROR);
     }
 
 
@@ -310,11 +310,11 @@ class Http2Parser {
             if (streamId == 0) {
                 throw new ConnectionError(
                         sm.getString("http2Parser.processFrameWindowUpdate.invalidIncrement"),
-                        Error.PROTOCOL_ERROR);
+                        Http2Error.PROTOCOL_ERROR);
             } else {
                 throw new StreamError(
                         sm.getString("http2Parser.processFrameWindowUpdate.invalidIncrement"),
-                        Error.PROTOCOL_ERROR, streamId);
+                        Http2Error.PROTOCOL_ERROR, streamId);
             }
         }
 
@@ -328,7 +328,7 @@ class Http2Parser {
             // No headers to continue
             throw new ConnectionError(sm.getString(
                     "http2Parser.processFrameContinuation.notExpected", connectionId,
-                    Integer.toString(streamId)), Error.PROTOCOL_ERROR);
+                    Integer.toString(streamId)), Http2Error.PROTOCOL_ERROR);
         }
 
         boolean endOfHeaders = Flags.isEndOfHeaders(flags);
@@ -359,7 +359,7 @@ class Http2Parser {
             } catch (HpackException hpe) {
                 throw new ConnectionError(
                         sm.getString("http2Parser.processFrameHeaders.decodingFailed"),
-                        Error.COMPRESSION_ERROR);
+                        Http2Error.COMPRESSION_ERROR);
             }
             // switches to write mode
             headerReadBuffer.compact();
@@ -369,7 +369,7 @@ class Http2Parser {
         if (headerReadBuffer.position() > 0 && endOfHeaders) {
             throw new ConnectionError(
                     sm.getString("http2Parser.processFrameHeaders.decodingDataLeft"),
-                    Error.COMPRESSION_ERROR);
+                    Http2Error.COMPRESSION_ERROR);
         }
     }
 
@@ -414,27 +414,27 @@ class Http2Parser {
 
         if (expected != null && frameType != expected) {
             throw new StreamError(sm.getString("http2Parser.processFrame.unexpectedType",
-                    expected, frameType), Error.PROTOCOL_ERROR, streamId);
+                    expected, frameType), Http2Error.PROTOCOL_ERROR, streamId);
         }
 
         if (payloadSize > maxPayloadSize) {
             throw new ConnectionError(sm.getString("http2Parser.payloadTooBig",
                     Integer.toString(payloadSize), Integer.toString(maxPayloadSize)),
-                    Error.FRAME_SIZE_ERROR);
+                    Http2Error.FRAME_SIZE_ERROR);
         }
 
         if (headersCurrentStream != -1) {
             if (headersCurrentStream != streamId) {
                 throw new ConnectionError(sm.getString("http2Parser.headers.wrongStream",
                         connectionId, Integer.toString(headersCurrentStream),
-                        Integer.toString(streamId)), Error.COMPRESSION_ERROR);
+                        Integer.toString(streamId)), Http2Error.COMPRESSION_ERROR);
             }
             if (frameType == FrameType.RST) {
                 // NO-OP: RST is OK here
             } else if (frameType != FrameType.CONTINUATION) {
                 throw new ConnectionError(sm.getString("http2Parser.headers.wrongFrameType",
                         connectionId, Integer.toString(headersCurrentStream),
-                        frameType), Error.COMPRESSION_ERROR);
+                        frameType), Http2Error.COMPRESSION_ERROR);
             }
         }
 

==================================================
StreamError.java
index 1c7dc9fc09..438f9f99b9 100644
--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java
@@ -632,7 +632,7 @@ public class Http2UpgradeHandler extends AbstractStream implements InternalHttpU
         Stream result = streams.get(key);
         if (result == null && unknownIsError) {
             // Stream has been closed and removed from the map
-            throw new ConnectionError(sm.getString("upgradeHandler.stream.closed", key), Error.PROTOCOL_ERROR);
+            throw new ConnectionError(sm.getString("upgradeHandler.stream.closed", key), Http2Error.PROTOCOL_ERROR);
         }
         return result;
     }
@@ -643,12 +643,12 @@ public class Http2UpgradeHandler extends AbstractStream implements InternalHttpU
 
         if (streamId %2 != 1) {
             throw new ConnectionError(
-                    sm.getString("upgradeHandler.stream.even", key), Error.PROTOCOL_ERROR);
+                    sm.getString("upgradeHandler.stream.even", key), Http2Error.PROTOCOL_ERROR);
         }
 
         if (streamId <= maxRemoteStreamId) {
             throw new ConnectionError(sm.getString("upgradeHandler.stream.old", key,
-                    Integer.valueOf(maxRemoteStreamId)), Error.PROTOCOL_ERROR);
+                    Integer.valueOf(maxRemoteStreamId)), Http2Error.PROTOCOL_ERROR);
         }
 
         Stream result = new Stream(key, this);

==================================================
StreamStateMachine.java
index 72710953be..6837ae129e 100644
--- a/java/org/apache/coyote/http2/StreamError.java
+++ b/java/org/apache/coyote/http2/StreamError.java
@@ -22,7 +22,7 @@ public class StreamError extends Http2Exception {
 
     private final int streamId;
 
-    public StreamError(String msg, Error error, int streamId) {
+    public StreamError(String msg, Http2Error error, int streamId) {
         super(msg, error);
         this.streamId = streamId;
     }

==================================================
TestHttp2Section_4_2.java
index 7f37abad9e..e89b2cf79f 100644
--- a/java/org/apache/coyote/http2/StreamStateMachine.java
+++ b/java/org/apache/coyote/http2/StreamStateMachine.java
@@ -126,33 +126,33 @@ public class StreamStateMachine {
 
 
     private enum State {
-        IDLE               (true,  Error.PROTOCOL_ERROR, FrameType.HEADERS, FrameType.PRIORITY),
-        OPEN               (true,  Error.PROTOCOL_ERROR, FrameType.DATA, FrameType.HEADERS,
+        IDLE               (true,  Http2Error.PROTOCOL_ERROR, FrameType.HEADERS, FrameType.PRIORITY),
+        OPEN               (true,  Http2Error.PROTOCOL_ERROR, FrameType.DATA, FrameType.HEADERS,
                                     FrameType.PRIORITY, FrameType.RST, FrameType.PUSH_PROMISE,
                                     FrameType.WINDOW_UPDATE),
-        RESERVED_LOCAL     (true,  Error.PROTOCOL_ERROR, FrameType.PRIORITY, FrameType.RST,
+        RESERVED_LOCAL     (true,  Http2Error.PROTOCOL_ERROR, FrameType.PRIORITY, FrameType.RST,
                                     FrameType.WINDOW_UPDATE),
-        RESERVED_REMOTE    (true,  Error.PROTOCOL_ERROR, FrameType.HEADERS, FrameType.PRIORITY,
+        RESERVED_REMOTE    (true,  Http2Error.PROTOCOL_ERROR, FrameType.HEADERS, FrameType.PRIORITY,
                                     FrameType.RST),
-        HALF_CLOSED_LOCAL  (true,  Error.PROTOCOL_ERROR, FrameType.DATA, FrameType.HEADERS,
+        HALF_CLOSED_LOCAL  (true,  Http2Error.PROTOCOL_ERROR, FrameType.DATA, FrameType.HEADERS,
                                     FrameType.PRIORITY, FrameType.RST, FrameType.PUSH_PROMISE,
                                     FrameType.WINDOW_UPDATE),
-        HALF_CLOSED_REMOTE (true,  Error.STREAM_CLOSED, FrameType.PRIORITY, FrameType.RST,
+        HALF_CLOSED_REMOTE (true,  Http2Error.STREAM_CLOSED, FrameType.PRIORITY, FrameType.RST,
                                     FrameType.WINDOW_UPDATE),
-        CLOSED_RX          (true,  Error.STREAM_CLOSED, FrameType.PRIORITY),
-        CLOSED_TX          (true,  Error.STREAM_CLOSED, FrameType.PRIORITY, FrameType.RST,
+        CLOSED_RX          (true,  Http2Error.STREAM_CLOSED, FrameType.PRIORITY),
+        CLOSED_TX          (true,  Http2Error.STREAM_CLOSED, FrameType.PRIORITY, FrameType.RST,
                                     FrameType.WINDOW_UPDATE),
-        CLOSED_RST_RX      (false, Error.STREAM_CLOSED, FrameType.PRIORITY),
-        CLOSED_RST_TX      (false, Error.STREAM_CLOSED, FrameType.DATA, FrameType.HEADERS,
+        CLOSED_RST_RX      (false, Http2Error.STREAM_CLOSED, FrameType.PRIORITY),
+        CLOSED_RST_TX      (false, Http2Error.STREAM_CLOSED, FrameType.DATA, FrameType.HEADERS,
                                     FrameType.PRIORITY, FrameType.RST, FrameType.PUSH_PROMISE,
                                     FrameType.WINDOW_UPDATE),
-        CLOSED_FINAL       (true,  Error.PROTOCOL_ERROR, FrameType.PRIORITY);
+        CLOSED_FINAL       (true,  Http2Error.PROTOCOL_ERROR, FrameType.PRIORITY);
 
         private final boolean connectionErrorForInvalidFrame;
-        private final Error errorCodeForInvalidFrame;
+        private final Http2Error errorCodeForInvalidFrame;
         private final Set<FrameType> frameTypesPermitted = new HashSet<>();
 
-        private State(boolean connectionErrorForInvalidFrame, Error errorCode,
+        private State(boolean connectionErrorForInvalidFrame, Http2Error errorCode,
                 FrameType... frameTypes) {
             this.connectionErrorForInvalidFrame = connectionErrorForInvalidFrame;
             this.errorCodeForInvalidFrame = errorCode;

==================================================
TestHttp2Section_4_3.java
index 356f522dc4..ae0ea41a7b 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_4_2.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_4_2.java
@@ -62,7 +62,7 @@ public class TestHttp2Section_4_2 extends Http2TestBase {
 
         Assert.assertTrue(output.getTrace(),
                 output.getTrace().startsWith("0-Goaway-[2147483647]-[" +
-                        Error.FRAME_SIZE_ERROR.getCode() + "]-["));
+                        Http2Error.FRAME_SIZE_ERROR.getCode() + "]-["));
     }
 
     @Test
@@ -91,7 +91,7 @@ public class TestHttp2Section_4_2 extends Http2TestBase {
 
         Assert.assertTrue(output.getTrace(),
                 output.getTrace().startsWith("0-Goaway-[2147483647]-[" +
-                        Error.FRAME_SIZE_ERROR.getCode() + "]-["));
+                        Http2Error.FRAME_SIZE_ERROR.getCode() + "]-["));
     }
 
 
@@ -120,7 +120,7 @@ public class TestHttp2Section_4_2 extends Http2TestBase {
 
         Assert.assertTrue(output.getTrace(),
                 output.getTrace().startsWith("0-Goaway-[2147483647]-[" +
-                        Error.FRAME_SIZE_ERROR.getCode() + "]-["));
+                        Http2Error.FRAME_SIZE_ERROR.getCode() + "]-["));
     }
 
 

==================================================
TestHttp2Section_5_1.java
index 3980ab536f..b002c99ffe 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_4_3.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_4_3.java
@@ -53,7 +53,7 @@ public class TestHttp2Section_4_3 extends Http2TestBase {
 
         Assert.assertTrue(output.getTrace(),
                 output.getTrace().startsWith("0-Goaway-[2147483647]-[" +
-                        Error.COMPRESSION_ERROR.getCode() + "]-["));
+                        Http2Error.COMPRESSION_ERROR.getCode() + "]-["));
     }
 
 
@@ -103,6 +103,6 @@ public class TestHttp2Section_4_3 extends Http2TestBase {
 
         Assert.assertTrue(output.getTrace(),
                 output.getTrace().startsWith("0-Goaway-[2147483647]-[" +
-                        Error.COMPRESSION_ERROR.getCode() + "]-["));
+                        Http2Error.COMPRESSION_ERROR.getCode() + "]-["));
     }
 }

==================================================
