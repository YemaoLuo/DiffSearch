8519851107860fb3357f1b5a2e9ccd84c9fe6f72
==================================================
Fix intermittent issue observed in unit test on CI system.
==================================================
Mark Emlyn
==================================================
Fri Oct 4 11:44:03 2013 +0000
==================================================
AsyncContextImpl.java
Fix intermittent issue observed in unit test on CI system.
Container is responsible for first call on onWritePossible() / onDataAvailable()


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1529134 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ActionCode.java
index 8d558e5f4b..561e08df0e 100644
--- a/java/org/apache/catalina/core/AsyncContextImpl.java
+++ b/java/org/apache/catalina/core/AsyncContextImpl.java
@@ -261,7 +261,7 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
             logDebug("start      ");
         }
         check();
-        Runnable wrapper = new RunnableWrapper(run, context);
+        Runnable wrapper = new RunnableWrapper(run, context, this.request.getCoyoteRequest());
         this.request.getCoyoteRequest().action(ActionCode.ASYNC_RUN, wrapper);
     }
 
@@ -539,12 +539,15 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
 
     private static class RunnableWrapper implements Runnable {
 
-        private Runnable wrapped = null;
-        private Context context = null;
+        private final Runnable wrapped;
+        private final Context context;
+        private final org.apache.coyote.Request coyoteRequest;
 
-        public RunnableWrapper(Runnable wrapped, Context ctxt) {
+        public RunnableWrapper(Runnable wrapped, Context ctxt,
+                org.apache.coyote.Request coyoteRequest) {
             this.wrapped = wrapped;
             this.context = ctxt;
+            this.coyoteRequest = coyoteRequest;
         }
 
         @Override
@@ -576,8 +579,12 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
                     Thread.currentThread().setContextClassLoader(oldCL);
                 }
             }
-        }
 
+            // Since this runnable is not executing as a result of a socket
+            // event, we need to ensure that any registered dispatches are
+            // executed.
+            coyoteRequest.action(ActionCode.DISPATCH_EXECUTE, null);
+        }
     }
 
 

==================================================
AbstractHttp11Processor.java
index c3b60ff95c..9598143520 100644
--- a/java/org/apache/coyote/ActionCode.java
+++ b/java/org/apache/coyote/ActionCode.java
@@ -221,5 +221,13 @@ public enum ActionCode {
      * Indicates that the container needs to trigger a call to onWritePossible()
      * for the registered non-blocking write listener.
      */
-    DISPATCH_WRITE
+    DISPATCH_WRITE,
+
+    /**
+     * Execute any non-blocking dispatches that have been registered via
+     * {@link #DISPATCH_READ} or {@link #DISPATCH_WRITE}. Typically required
+     * when the non-blocking listeners are configured on a thread where the
+     * processing wasn't triggered by a read or write event on the socket.
+     */
+    DISPATCH_EXECUTE
 }

==================================================
AbstractEndpoint.java
index 10510cccf3..187b81be08 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -834,6 +834,8 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
             socketWrapper.addDispatch(DispatchType.NON_BLOCKING_READ);
         } else if (actionCode == ActionCode.DISPATCH_WRITE) {
             socketWrapper.addDispatch(DispatchType.NON_BLOCKING_WRITE);
+        } else if (actionCode == ActionCode.DISPATCH_EXECUTE) {
+            getEndpoint().executeNonBlockingDispatches(socketWrapper);
         } else {
             actionInternal(actionCode, param);
         }

==================================================
TestCoyoteOutputStream.java
index ef4d629ec6..a89c8aea27 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -635,6 +635,17 @@ public abstract class AbstractEndpoint<S> {
             SocketStatus socketStatus, boolean dispatch);
 
 
+    public void executeNonBlockingDispatches(SocketWrapper<S> socketWrapper) {
+        // Synchronise on the socket wrapper to ensure no other threads are
+        // working with the socket
+        synchronized (socketWrapper) {
+            while (socketWrapper.hasNextDispatch()) {
+                DispatchType dispatchType = socketWrapper.getNextDispatch();
+                processSocket(socketWrapper, dispatchType.getSocketStatus(), false);
+            }
+        }
+    }
+
     // ------------------------------------------------------- Lifecycle methods
 
     /*

==================================================
