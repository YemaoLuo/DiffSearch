303a90e2706f96703bf5c5029e604d8debf74ff9
==================================================
Testing HTTP/2 5.1.2
==================================================
Mark Thomas
==================================================
Wed Jun 10 21:31:08 2015 +0000
==================================================
Http2Parser.java
Testing HTTP/2 5.1.2
Make maxConcurrentStream configurable so it can be tested
I have a test for maxConcurrentStreams that works but it appears to be triggering some flow control bugs I need to iron out. Meanwhile, here are the fixes for the maxConcurrentStreams bugs it did find.
Ensure headers payload is swallowed if the stream is rejected due to maxConcurrentStreams
Only decrement active stream count when a stream goes inactive

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1684769 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http2Protocol.java
index 1404b1b770..d36f33d3dc 100644
--- a/java/org/apache/coyote/http2/Http2Parser.java
+++ b/java/org/apache/coyote/http2/Http2Parser.java
@@ -167,7 +167,12 @@ class Http2Parser {
         if (hpackDecoder == null) {
             hpackDecoder = output.getHpackDecoder();
         }
-        hpackDecoder.setHeaderEmitter(output.headersStart(streamId));
+        try {
+            hpackDecoder.setHeaderEmitter(output.headersStart(streamId));
+        } catch (StreamException se) {
+            swallow(payloadSize);
+            throw se;
+        }
 
         int padLength = 0;
         boolean padding = Flags.hasPadding(flags);

==================================================
Http2UpgradeHandler.java
index aa5cc3ab6d..965f80aaee 100644
--- a/java/org/apache/coyote/http2/Http2Protocol.java
+++ b/java/org/apache/coyote/http2/Http2Protocol.java
@@ -29,6 +29,8 @@ import org.apache.tomcat.util.net.SocketWrapperBase;
 
 public class Http2Protocol implements UpgradeProtocol {
 
+    private static final long DEFAULT_MAX_CONCURRENT_STREAMS = 200;
+
     private static final String HTTP_UPGRADE_NAME = "h2c";
     private static final String ALPN_NAME = "h2";
     private static final byte[] ALPN_IDENTIFIER = ALPN_NAME.getBytes(StandardCharsets.UTF_8);
@@ -37,6 +39,7 @@ public class Http2Protocol implements UpgradeProtocol {
     private long readTimeout = 10000;
     private long keepAliveTimeout = 30000;
     private long writeTimeout = 10000;
+    private long maxConcurrentStreams = DEFAULT_MAX_CONCURRENT_STREAMS;
 
     @Override
     public String getHttpUpgradeName(boolean isSecure) {
@@ -73,6 +76,7 @@ public class Http2Protocol implements UpgradeProtocol {
         result.setReadTimeout(getReadTimeout());
         result.setKeepAliveTimeout(getKeepAliveTimeout());
         result.setWriteTimeout(getWriteTimeout());
+        result.setMaxConcurrentStreams(getMaxConcurrentStreams());
 
         return result;
     }
@@ -128,4 +132,14 @@ public class Http2Protocol implements UpgradeProtocol {
     public void setWriteTimeout(long writeTimeout) {
         this.writeTimeout = writeTimeout;
     }
+
+
+    public long getMaxConcurrentStreams() {
+        return maxConcurrentStreams;
+    }
+
+
+    public void setMaxConcurrentStreams(long maxConcurrentStreams) {
+        this.maxConcurrentStreams = maxConcurrentStreams;
+    }
 }

==================================================
