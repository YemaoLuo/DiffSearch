deff62ced1319f992ef707e21de99506c148cfdb
==================================================
Review of r1791068 by kkolinko
==================================================
Mark Thomas
==================================================
Wed Apr 12 08:39:22 2017 +0000
==================================================
ExpressionFactory.java
Review of r1791068 by kkolinko
Class.getConstructor().newInstance() is a better replacement for Class.newInstance() than Class.getDeclaredConstructor().newInstance()

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1791090 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AuthConfigFactory.java
index c2b56abf5a..fc296549b8 100644
--- a/java/javax/el/ExpressionFactory.java
+++ b/java/javax/el/ExpressionFactory.java
@@ -169,7 +169,7 @@ public abstract class ExpressionFactory {
                 }
             }
             if (constructor == null) {
-                result = (ExpressionFactory) clazz.getDeclaredConstructor().newInstance();
+                result = (ExpressionFactory) clazz.getConstructor().newInstance();
             } else {
                 result =
                     (ExpressionFactory) constructor.newInstance(properties);

==================================================
ContainerProvider.java
index 869344728f..1cd117de93 100644
--- a/java/javax/security/auth/message/config/AuthConfigFactory.java
+++ b/java/javax/security/auth/message/config/AuthConfigFactory.java
@@ -73,7 +73,7 @@ public abstract class AuthConfigFactory {
                     // should not be used since that would trigger a memory leak
                     // in container environments.
                     Class<?> clazz = Class.forName(className);
-                    return (AuthConfigFactory) clazz.getDeclaredConstructor().newInstance();
+                    return (AuthConfigFactory) clazz.getConstructor().newInstance();
                 }
             });
         } catch (PrivilegedActionException e) {

==================================================
ServerEndpointConfig.java
index 65f6412061..8bad8d1c3b 100644
--- a/java/javax/websocket/ContainerProvider.java
+++ b/java/javax/websocket/ContainerProvider.java
@@ -51,7 +51,7 @@ public abstract class ContainerProvider {
                 Class<WebSocketContainer> clazz =
                         (Class<WebSocketContainer>) Class.forName(
                                 DEFAULT_PROVIDER_CLASS_NAME);
-                result = clazz.getDeclaredConstructor().newInstance();
+                result = clazz.getConstructor().newInstance();
             } catch (ClassNotFoundException | InstantiationException | IllegalAccessException |
                     IllegalArgumentException | InvocationTargetException | NoSuchMethodException |
                     SecurityException e) {

==================================================
SimpleServerAuthConfig.java
index ce4956de9a..c1ce558c61 100644
--- a/java/javax/websocket/server/ServerEndpointConfig.java
+++ b/java/javax/websocket/server/ServerEndpointConfig.java
@@ -176,7 +176,7 @@ public interface ServerEndpointConfig extends EndpointConfig {
                     Class<Configurator> clazz =
                             (Class<Configurator>) Class.forName(
                                     DEFAULT_IMPL_CLASSNAME);
-                    result = clazz.getDeclaredConstructor().newInstance();
+                    result = clazz.getConstructor().newInstance();
                 } catch (ClassNotFoundException | InstantiationException | IllegalAccessException |
                         IllegalArgumentException | InvocationTargetException |
                         NoSuchMethodException | SecurityException e) {

==================================================
Connector.java
index 4a49d31769..99b9b45f7c 100644
--- a/java/org/apache/catalina/authenticator/jaspic/SimpleServerAuthConfig.java
+++ b/java/org/apache/catalina/authenticator/jaspic/SimpleServerAuthConfig.java
@@ -115,7 +115,7 @@ public class SimpleServerAuthConfig implements ServerAuthConfig {
                         try {
                             Class<?> clazz = Class.forName(moduleClassName);
                             ServerAuthModule module =
-                                    (ServerAuthModule) clazz.getDeclaredConstructor().newInstance();
+                                    (ServerAuthModule) clazz.getConstructor().newInstance();
                             module.initialize(null, null, handler, mergedProperties);
                             modules.add(module);
                         } catch (ClassNotFoundException | InstantiationException |

==================================================
Request.java
index 62c0c4a3ee..289eab3db2 100644
--- a/java/org/apache/catalina/connector/Connector.java
+++ b/java/org/apache/catalina/connector/Connector.java
@@ -97,7 +97,7 @@ public class Connector extends LifecycleMBeanBase  {
         ProtocolHandler p = null;
         try {
             Class<?> clazz = Class.forName(protocolHandlerClassName);
-            p = (ProtocolHandler) clazz.getDeclaredConstructor().newInstance();
+            p = (ProtocolHandler) clazz.getConstructor().newInstance();
         } catch (Exception e) {
             log.error(sm.getString(
                     "coyoteConnector.protocolHandlerInstantiationFailed"), e);

==================================================
DefaultInstanceManager.java
index f6e1cb6ec8..9598f63aa0 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -1962,7 +1962,7 @@ public class Request implements HttpServletRequest {
             // Do not go through the instance manager for internal Tomcat classes since they don't
             // need injection
             if (InternalHttpUpgradeHandler.class.isAssignableFrom(httpUpgradeHandlerClass)) {
-                handler = httpUpgradeHandlerClass.getDeclaredConstructor().newInstance();
+                handler = httpUpgradeHandlerClass.getConstructor().newInstance();
             } else {
                 instanceManager = getContext().getInstanceManager();
                 handler = (T) instanceManager.newInstance(httpUpgradeHandlerClass);

==================================================
StandardContext.java
index 8b4bc95465..93bef7d86c 100644
--- a/java/org/apache/catalina/core/DefaultInstanceManager.java
+++ b/java/org/apache/catalina/core/DefaultInstanceManager.java
@@ -109,7 +109,7 @@ public class DefaultInstanceManager implements InstanceManager {
     public Object newInstance(Class<?> clazz) throws IllegalAccessException,
             InvocationTargetException, NamingException, InstantiationException,
             IllegalArgumentException, NoSuchMethodException, SecurityException {
-        return newInstance(clazz.getDeclaredConstructor().newInstance(), clazz);
+        return newInstance(clazz.getConstructor().newInstance(), clazz);
     }
 
     @Override
@@ -117,7 +117,7 @@ public class DefaultInstanceManager implements InstanceManager {
             InvocationTargetException, NamingException, InstantiationException,
             ClassNotFoundException, IllegalArgumentException, NoSuchMethodException, SecurityException {
         Class<?> clazz = loadClassMaybePrivileged(className, classLoader);
-        return newInstance(clazz.getDeclaredConstructor().newInstance(), clazz);
+        return newInstance(clazz.getConstructor().newInstance(), clazz);
     }
 
     @Override
@@ -126,7 +126,7 @@ public class DefaultInstanceManager implements InstanceManager {
             InstantiationException, ClassNotFoundException, IllegalArgumentException,
             NoSuchMethodException, SecurityException {
         Class<?> clazz = classLoader.loadClass(className);
-        return newInstance(clazz.getDeclaredConstructor().newInstance(), clazz);
+        return newInstance(clazz.getConstructor().newInstance(), clazz);
     }
 
     @Override

==================================================
StandardHost.java
index 9a75d4db78..bed9b1441f 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -1351,7 +1351,7 @@ public class StandardContext extends ContainerBase
         if (this.charsetMapper == null) {
             try {
                 Class<?> clazz = Class.forName(charsetMapperClass);
-                this.charsetMapper = (CharsetMapper) clazz.getDeclaredConstructor().newInstance();
+                this.charsetMapper = (CharsetMapper) clazz.getConstructor().newInstance();
             } catch (Throwable t) {
                 ExceptionUtils.handleThrowable(t);
                 this.charsetMapper = new CharsetMapper();
@@ -3264,7 +3264,7 @@ public class StandardContext extends ContainerBase
         Wrapper wrapper = null;
         if (wrapperClass != null) {
             try {
-                wrapper = (Wrapper) wrapperClass.getDeclaredConstructor().newInstance();
+                wrapper = (Wrapper) wrapperClass.getConstructor().newInstance();
             } catch (Throwable t) {
                 ExceptionUtils.handleThrowable(t);
                 log.error("createWrapper", t);
@@ -3279,7 +3279,7 @@ public class StandardContext extends ContainerBase
                 try {
                     Class<?> clazz = Class.forName(wrapperLifecycles[i]);
                     LifecycleListener listener =
-                        (LifecycleListener) clazz.getDeclaredConstructor().newInstance();
+                        (LifecycleListener) clazz.getConstructor().newInstance();
                     wrapper.addLifecycleListener(listener);
                 } catch (Throwable t) {
                     ExceptionUtils.handleThrowable(t);
@@ -3294,7 +3294,7 @@ public class StandardContext extends ContainerBase
                 try {
                     Class<?> clazz = Class.forName(wrapperListeners[i]);
                     ContainerListener listener =
-                            (ContainerListener) clazz.getDeclaredConstructor().newInstance();
+                            (ContainerListener) clazz.getConstructor().newInstance();
                     wrapper.addContainerListener(listener);
                 } catch (Throwable t) {
                     ExceptionUtils.handleThrowable(t);

==================================================
TestSlowQueryComparator.java
index ec2f5f5daf..89ceb9739f 100644
--- a/java/org/apache/catalina/core/StandardHost.java
+++ b/java/org/apache/catalina/core/StandardHost.java
@@ -859,7 +859,7 @@ public class StandardHost extends ContainerBase implements Host {
                 }
                 if(!found) {
                     Valve valve =
-                        (Valve) Class.forName(errorValve).getDeclaredConstructor().newInstance();
+                        (Valve) Class.forName(errorValve).getConstructor().newInstance();
                     getPipeline().addValve(valve);
                 }
             } catch (Throwable t) {

==================================================
