2aa5f6bbb4a88b5d806b4289430ce9025ca5c75e
==================================================
Share more configuration between HTTP/1.1 and nested HTTP/2
==================================================
remm remm@apache.org
==================================================
Mon Feb 3 21:53:29 2020 +0100
==================================================
AbstractHttp11Protocol.java
index 332bc9bc33..95d6376e06 100644
--- a/TOMCAT-NEXT.txt
+++ b/TOMCAT-NEXT.txt
@@ -49,8 +49,6 @@ New items for 10.0.0.x onwards:
 
  8. Consider disabling the AJP connector by default.
 
- 9. Share configuration between HTTP/1.1 and nested HTTP/2 rather than duplicating.
-
 
 Deferred until 10.0.x:
 

==================================================
Http2Protocol.java
index 58b05a3ac6..fd3ab7450d 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -414,6 +414,9 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     protected Set<String> getAllowedTrailerHeadersInternal() {
         return allowedTrailerHeaders;
     }
+    public boolean isTrailerHeaderAllowed(String headerName) {
+        return allowedTrailerHeaders.contains(headerName);
+    }
     public String getAllowedTrailerHeaders() {
         // Chances of a size change between these lines are small enough that a
         // sync is unnecessary.

==================================================
Http2TestBase.java
index aab980cff3..56cb8e18f3 100644
--- a/java/org/apache/coyote/http2/Http2Protocol.java
+++ b/java/org/apache/coyote/http2/Http2Protocol.java
@@ -17,27 +17,18 @@
 package org.apache.coyote.http2;
 
 import java.nio.charset.StandardCharsets;
-import java.util.ArrayList;
-import java.util.Collections;
 import java.util.Enumeration;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Locale;
-import java.util.Set;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.regex.Pattern;
 
 import org.apache.coyote.AbstractProtocol;
 import org.apache.coyote.Adapter;
-import org.apache.coyote.CompressionConfig;
 import org.apache.coyote.Processor;
 import org.apache.coyote.Request;
 import org.apache.coyote.Response;
 import org.apache.coyote.UpgradeProtocol;
 import org.apache.coyote.UpgradeToken;
+import org.apache.coyote.http11.AbstractHttp11Protocol;
 import org.apache.coyote.http11.upgrade.InternalHttpUpgradeHandler;
 import org.apache.coyote.http11.upgrade.UpgradeProcessorInternal;
-import org.apache.tomcat.util.buf.StringUtils;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 
 public class Http2Protocol implements UpgradeProtocol {
@@ -77,12 +68,8 @@ public class Http2Protocol implements UpgradeProtocol {
     // change the default defined in ConnectionSettingsBase.
     private int initialWindowSize = ConnectionSettingsBase.DEFAULT_INITIAL_WINDOW_SIZE;
     // Limits
-    private Set<String> allowedTrailerHeaders =
-            Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());
     private int maxHeaderCount = Constants.DEFAULT_MAX_HEADER_COUNT;
-    private int maxHeaderSize = Constants.DEFAULT_MAX_HEADER_SIZE;
     private int maxTrailerCount = Constants.DEFAULT_MAX_TRAILER_COUNT;
-    private int maxTrailerSize = Constants.DEFAULT_MAX_TRAILER_SIZE;
     private int overheadCountFactor = DEFAULT_OVERHEAD_COUNT_FACTOR;
     private int overheadContinuationThreshold = DEFAULT_OVERHEAD_CONTINUATION_THRESHOLD;
     private int overheadDataThreshold = DEFAULT_OVERHEAD_DATA_THRESHOLD;
@@ -90,10 +77,8 @@ public class Http2Protocol implements UpgradeProtocol {
 
     private boolean initiatePingDisabled = false;
     private boolean useSendfile = true;
-    // Compression
-    private final CompressionConfig compressionConfig = new CompressionConfig();
     // Reference to HTTP/1.1 protocol that this instance is configured under
-    private AbstractProtocol<?> http11Protocol = null;
+    private AbstractHttp11Protocol<?> http11Protocol = null;
 
     @Override
     public String getHttpUpgradeName(boolean isSSLEnabled) {
@@ -243,37 +228,8 @@ public class Http2Protocol implements UpgradeProtocol {
     }
 
 
-    public void setAllowedTrailerHeaders(String commaSeparatedHeaders) {
-        // Jump through some hoops so we don't end up with an empty set while
-        // doing updates.
-        Set<String> toRemove = new HashSet<>();
-        toRemove.addAll(allowedTrailerHeaders);
-        if (commaSeparatedHeaders != null) {
-            String[] headers = commaSeparatedHeaders.split(",");
-            for (String header : headers) {
-                String trimmedHeader = header.trim().toLowerCase(Locale.ENGLISH);
-                if (toRemove.contains(trimmedHeader)) {
-                    toRemove.remove(trimmedHeader);
-                } else {
-                    allowedTrailerHeaders.add(trimmedHeader);
-                }
-            }
-            allowedTrailerHeaders.removeAll(toRemove);
-        }
-    }
-
-
-    public String getAllowedTrailerHeaders() {
-        // Chances of a size change between these lines are small enough that a
-        // sync is unnecessary.
-        List<String> copy = new ArrayList<>(allowedTrailerHeaders.size());
-        copy.addAll(allowedTrailerHeaders);
-        return StringUtils.join(copy);
-    }
-
-
     boolean isTrailerHeaderAllowed(String headerName) {
-        return allowedTrailerHeaders.contains(headerName);
+        return http11Protocol.isTrailerHeaderAllowed(headerName);
     }
 
 
@@ -287,13 +243,8 @@ public class Http2Protocol implements UpgradeProtocol {
     }
 
 
-    public void setMaxHeaderSize(int maxHeaderSize) {
-        this.maxHeaderSize = maxHeaderSize;
-    }
-
-
     public int getMaxHeaderSize() {
-        return maxHeaderSize;
+        return http11Protocol.getMaxHttpHeaderSize();
     }
 
 
@@ -307,13 +258,8 @@ public class Http2Protocol implements UpgradeProtocol {
     }
 
 
-    public void setMaxTrailerSize(int maxTrailerSize) {
-        this.maxTrailerSize = maxTrailerSize;
-    }
-
-
     public int getMaxTrailerSize() {
-        return maxTrailerSize;
+        return http11Protocol.getMaxTrailerSize();
     }
 
 
@@ -367,57 +313,17 @@ public class Http2Protocol implements UpgradeProtocol {
     }
 
 
-    public void setCompression(String compression) {
-        compressionConfig.setCompression(compression);
-    }
-    public String getCompression() {
-        return compressionConfig.getCompression();
-    }
-    protected int getCompressionLevel() {
-        return compressionConfig.getCompressionLevel();
-    }
-
-
-    public String getNoCompressionUserAgents() {
-        return compressionConfig.getNoCompressionUserAgents();
-    }
-    protected Pattern getNoCompressionUserAgentsPattern() {
-        return compressionConfig.getNoCompressionUserAgentsPattern();
-    }
-    public void setNoCompressionUserAgents(String noCompressionUserAgents) {
-        compressionConfig.setNoCompressionUserAgents(noCompressionUserAgents);
-    }
-
-
-    public String getCompressibleMimeType() {
-        return compressionConfig.getCompressibleMimeType();
-    }
-    public void setCompressibleMimeType(String valueS) {
-        compressionConfig.setCompressibleMimeType(valueS);
-    }
-    public String[] getCompressibleMimeTypes() {
-        return compressionConfig.getCompressibleMimeTypes();
-    }
-
-
-    public int getCompressionMinSize() {
-        return compressionConfig.getCompressionMinSize();
-    }
-    public void setCompressionMinSize(int compressionMinSize) {
-        compressionConfig.setCompressionMinSize(compressionMinSize);
-    }
-
-
     public boolean useCompression(Request request, Response response) {
-        return compressionConfig.useCompression(request, response);
+        return http11Protocol.useCompression(request, response);
     }
 
 
     public AbstractProtocol<?> getHttp11Protocol() {
         return this.http11Protocol;
     }
+
     @Override
     public void setHttp11Protocol(AbstractProtocol<?> http11Protocol) {
-        this.http11Protocol = http11Protocol;
+        this.http11Protocol = (AbstractHttp11Protocol<?>) http11Protocol;
     }
 }

==================================================
TestAbortedUpload.java
index 7bd341cdd1..2afeb921a9 100644
--- a/test/org/apache/coyote/http2/Http2TestBase.java
+++ b/test/org/apache/coyote/http2/Http2TestBase.java
@@ -47,6 +47,7 @@ import org.apache.catalina.connector.Connector;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.catalina.util.IOTools;
+import org.apache.coyote.http11.Http11NioProtocol;
 import org.apache.coyote.http2.HpackDecoder.HeaderEmitter;
 import org.apache.coyote.http2.Http2Parser.Input;
 import org.apache.coyote.http2.Http2Parser.Output;
@@ -555,6 +556,7 @@ public abstract class Http2TestBase extends TomcatBaseTest {
         http2Protocol.setStreamReadTimeout(3000);
         http2Protocol.setStreamWriteTimeout(3000);
         http2Protocol.setMaxConcurrentStreams(maxConcurrentStreams);
+        http2Protocol.setHttp11Protocol(new Http11NioProtocol());
         connector.addUpgradeProtocol(http2Protocol);
     }
 

==================================================
TestHttp2Limits.java
index da130c34af..46083b3cb6 100644
--- a/test/org/apache/coyote/http2/TestAbortedUpload.java
+++ b/test/org/apache/coyote/http2/TestAbortedUpload.java
@@ -30,6 +30,7 @@ import org.junit.Test;
 import org.apache.catalina.Context;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.startup.Tomcat;
+import org.apache.coyote.http11.AbstractHttp11Protocol;
 
 public class TestAbortedUpload extends Http2TestBase {
 
@@ -37,7 +38,7 @@ public class TestAbortedUpload extends Http2TestBase {
     public void testAbortedRequest() throws Exception {
         http2Connect();
 
-        http2Protocol.setAllowedTrailerHeaders(TRAILER_HEADER_NAME);
+        ((AbstractHttp11Protocol<?>) http2Protocol.getHttp11Protocol()).setAllowedTrailerHeaders(TRAILER_HEADER_NAME);
 
         int bodySize = 8192;
         int bodyCount = 20;

==================================================
TestHttp2Section_8_1.java
index d5f109f9b5..d3ad8c8719 100644
--- a/test/org/apache/coyote/http2/TestHttp2Limits.java
+++ b/test/org/apache/coyote/http2/TestHttp2Limits.java
@@ -29,6 +29,7 @@ import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.connector.Connector;
+import org.apache.coyote.http11.AbstractHttp11Protocol;
 import org.apache.coyote.http2.HpackEncoder.State;
 import org.apache.tomcat.util.http.MimeHeaders;
 import org.apache.tomcat.util.res.StringManager;
@@ -109,7 +110,6 @@ public class TestHttp2Limits extends Http2TestBase {
         // Bug 60232
         doTestHeaderLimits(1, 12*1024, 1024, FailureMode.STREAM_RESET);
 
-
         output.clearTrace();
         sendSimpleGetRequest(5);
         parser.readFrame(true);
@@ -195,11 +195,11 @@ public class TestHttp2Limits extends Http2TestBase {
         }
 
         enableHttp2();
+        configureAndStartWebApplication();
 
         http2Protocol.setMaxHeaderCount(maxHeaderCount);
-        http2Protocol.setMaxHeaderSize(maxHeaderSize);
+        ((AbstractHttp11Protocol<?>) http2Protocol.getHttp11Protocol()).setMaxHttpHeaderSize(maxHeaderSize);
 
-        configureAndStartWebApplication();
         openClientConnection();
         doHttpUpgrade();
         sendClientPreface();
@@ -437,12 +437,12 @@ public class TestHttp2Limits extends Http2TestBase {
     private void doTestPostWithTrailerHeaders(int maxTrailerCount, int maxTrailerSize,
             FailureMode failMode) throws Exception {
         enableHttp2();
+        configureAndStartWebApplication();
 
-        http2Protocol.setAllowedTrailerHeaders(TRAILER_HEADER_NAME);
+        ((AbstractHttp11Protocol<?>) http2Protocol.getHttp11Protocol()).setAllowedTrailerHeaders(TRAILER_HEADER_NAME);
         http2Protocol.setMaxTrailerCount(maxTrailerCount);
-        http2Protocol.setMaxTrailerSize(maxTrailerSize);
+        ((AbstractHttp11Protocol<?>) http2Protocol.getHttp11Protocol()).setMaxTrailerSize(maxTrailerSize);
 
-        configureAndStartWebApplication();
         openClientConnection();
         doHttpUpgrade();
         sendClientPreface();

==================================================
