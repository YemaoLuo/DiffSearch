0da52298851d2b6ac768211d320c05ef6d02f7e7
==================================================
Make SameSiteCookies an enum
==================================================
John Kelly
==================================================
Thu May 16 17:11:16 2019 +0100
==================================================
CookieProcessorBase.java
Make SameSiteCookies an enum



==================================================
LegacyCookieProcessor.java
index 3e723fa447..aad3979d58 100644
--- a/java/org/apache/tomcat/util/http/CookieProcessorBase.java
+++ b/java/org/apache/tomcat/util/http/CookieProcessorBase.java
@@ -44,7 +44,7 @@ public abstract class CookieProcessorBase implements CookieProcessor {
     }
 
     public void setSameSiteCookies(String sameSiteCookies) {
-        this.sameSiteCookies = SameSiteCookies.toAttribute(sameSiteCookies);
+        this.sameSiteCookies = SameSiteCookies.fromString(sameSiteCookies);
     }
 
     protected static final String ANCIENT_DATE;

==================================================
Rfc6265CookieProcessor.java
index 324824dd8a..c686b7c5f6 100644
--- a/java/org/apache/tomcat/util/http/LegacyCookieProcessor.java
+++ b/java/org/apache/tomcat/util/http/LegacyCookieProcessor.java
@@ -328,7 +328,7 @@ public final class LegacyCookieProcessor extends CookieProcessorBase {
 
         if (!sameSiteCookiesValue.equals(SameSiteCookies.NONE)) {
             buf.append("; SameSite=");
-            buf.append(sameSiteCookiesValue.toString());
+            buf.append(sameSiteCookiesValue.getValue());
         }
 
         return buf.toString();

==================================================
SameSiteCookies.java
index 9fd2a8fedb..0d81a9b62a 100644
--- a/java/org/apache/tomcat/util/http/Rfc6265CookieProcessor.java
+++ b/java/org/apache/tomcat/util/http/Rfc6265CookieProcessor.java
@@ -166,7 +166,7 @@ public class Rfc6265CookieProcessor extends CookieProcessorBase {
 
         if (!sameSiteCookiesValue.equals(SameSiteCookies.NONE)) {
             header.append("; SameSite=");
-            header.append(sameSiteCookiesValue.toString());
+            header.append(sameSiteCookiesValue.getValue());
         }
 
         return header.toString();

==================================================
TestSameSiteCookies.java
index 2143468c87..f9eb7a5f46 100644
--- a/java/org/apache/tomcat/util/http/SameSiteCookies.java
+++ b/java/org/apache/tomcat/util/http/SameSiteCookies.java
@@ -2,58 +2,42 @@ package org.apache.tomcat.util.http;
 
 import org.apache.tomcat.util.res.StringManager;
 
-public class SameSiteCookies {
+public enum SameSiteCookies {
 
-    private static final StringManager sm = StringManager.getManager(SameSiteCookies.class);
-
-    private final String value;
-
-    public static final SameSiteCookies NONE = new SameSiteCookies("None");
-    /** Don't set the SameSite cookie attribute. Cookie is always sent
+    /**
+     * Don't set the SameSite cookie attribute. Cookie is always sent
      */
-    public static final SameSiteCookies LAX = new SameSiteCookies("Lax");
-    /** Cookie is only sent on same-site requests and cross-site top level navigation GET requests
+    NONE("None"),
+
+    /**
+     * Cookie is only sent on same-site requests and cross-site top level navigation GET requests
      */
-    public static final SameSiteCookies STRICT = new SameSiteCookies("Strict");
-    /** Prevents the cookie from being sent by the browser in all cross-site requests
+    LAX("Lax"),
+
+    /**
+     * Prevents the cookie from being sent by the browser in all cross-site requests
      */
+    STRICT("Strict");
 
-    public static SameSiteCookies toAttribute(String value) {
-        SameSiteCookies attribute;
-        if (value.equalsIgnoreCase(NONE.value)) {
-            attribute = NONE;
-        } else if (value.equalsIgnoreCase(LAX.value)) {
-            attribute = LAX;
-        } else if (value.equalsIgnoreCase(STRICT.value)) {
-            attribute = STRICT;
-        } else {
-            throw new IllegalStateException(
-                    sm.getString("cookies.invalidSameSiteCookies", value));
-        }
-        return attribute;
-    }
+    private static final StringManager sm = StringManager.getManager(SameSiteCookies.class);
+
+    private final String value;
 
-    private SameSiteCookies(String value) {
+    SameSiteCookies(String value) {
         this.value = value;
     }
 
-    @Override
-    public boolean equals(Object o) {
-        boolean equals = false;
-        if (o instanceof SameSiteCookies) {
-            SameSiteCookies attribute = (SameSiteCookies) o;
-            equals = value.equals(attribute.value);
-        }
-        return equals;
+    public String getValue() {
+        return value;
     }
 
-    @Override
-    public int hashCode() {
-        return value.hashCode();
-    }
+    public static SameSiteCookies fromString(String value) {
+        for (SameSiteCookies sameSiteCookies : SameSiteCookies.values()) {
+            if (sameSiteCookies.getValue().equalsIgnoreCase(value)) {
+                return sameSiteCookies;
+            }
+        }
 
-    @Override
-    public String toString() {
-        return value;
+        throw new IllegalStateException(sm.getString("cookies.invalidSameSiteCookies", value));
     }
 }

==================================================
