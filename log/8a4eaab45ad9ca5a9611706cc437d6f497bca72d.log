8a4eaab45ad9ca5a9611706cc437d6f497bca72d
==================================================
More changes for BZ 55143. @OnMessage may need multiple message handlers depending on the decoders present
==================================================
Mark Emlyn
==================================================
Thu Jun 27 10:45:59 2013 +0000
==================================================
Util.java
More changes for BZ 55143. @OnMessage may need multiple message handlers depending on the decoders present

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1497291 13f79535-47bb-0310-9956-ffa450edef68



==================================================
PojoMethodMapping.java
index 481bb07df3..4e9b169b08 100644
--- a/java/org/apache/tomcat/websocket/Util.java
+++ b/java/org/apache/tomcat/websocket/Util.java
@@ -366,8 +366,11 @@ public class Util {
         // More complex case - listener that requires a decoder
             DecoderMatch decoderMatch;
             try {
-                decoderMatch = new DecoderMatch(target,
-                        endpointConfig.getDecoders());
+                List<Class<? extends Decoder>> decoders =
+                        endpointConfig.getDecoders();
+                List<DecoderEntry> decoderEntries = getDecoders(
+                        decoders.toArray(new Class[decoders.size()]));
+                decoderMatch = new DecoderMatch(target, decoderEntries);
             } catch (DeploymentException e) {
                 throw new IllegalArgumentException(e);
             }
@@ -410,7 +413,7 @@ public class Util {
         }
     }
 
-    private static class DecoderMatch {
+    public static class DecoderMatch {
 
         private final List<Class<? extends Decoder>> textDecoders =
                 new ArrayList<>();
@@ -418,10 +421,7 @@ public class Util {
                 new ArrayList<>();
 
 
-        public DecoderMatch(Class<?> target, List<Class<? extends Decoder>> decoders)
-                throws DeploymentException {
-            List<DecoderEntry> decoderEntries = getDecoders(
-                    decoders.toArray(new Class[decoders.size()]));
+        public DecoderMatch(Class<?> target, List<DecoderEntry> decoderEntries) {
             for (DecoderEntry decoderEntry : decoderEntries) {
                 if (decoderEntry.getClazz().isAssignableFrom(target)) {
                     if (Binary.class.isAssignableFrom(
@@ -465,5 +465,10 @@ public class Util {
         public List<Class<? extends Decoder>> getBinaryDecoders() {
             return binaryDecoders;
         }
+
+
+        public boolean hasMatches() {
+            return (textDecoders.size() > 0) || (binaryDecoders.size() > 0);
+        }
     }
 }

==================================================
