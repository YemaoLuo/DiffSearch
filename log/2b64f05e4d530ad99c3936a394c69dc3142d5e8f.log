2b64f05e4d530ad99c3936a394c69dc3142d5e8f
==================================================
Revert r1384055 & r1384051. While toString() isn't used, stringifyValue() is.
==================================================
Mark Emlyn
==================================================
Wed Sep 12 18:01:17 2012 +0000
==================================================
AnnotationDefault.java
Revert r1384055 & r1384051. While toString() isn't used, stringifyValue() is.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1384063 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AnnotationElementValue.java
index 42a70bf35b..6f7f6f13be 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationDefault.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationDefault.java
@@ -32,7 +32,6 @@ import org.apache.tomcat.util.bcel.Constants;
 public class AnnotationDefault extends Attribute
 {
     private static final long serialVersionUID = 6715933396664171543L;
-    ElementValue default_value;
 
     /**
      * @param name_index
@@ -50,7 +49,8 @@ public class AnnotationDefault extends Attribute
     {
         this(name_index, length, (ElementValue) null,
                 constant_pool);
-        default_value = ElementValue.readElementValue(file, constant_pool);
+        // Default value
+        ElementValue.readElementValue(file, constant_pool);
     }
 
     /**
@@ -67,16 +67,6 @@ public class AnnotationDefault extends Attribute
             ElementValue defaultValue, ConstantPool constant_pool)
     {
         super(Constants.ATTR_ANNOTATION_DEFAULT, name_index, length, constant_pool);
-        setDefaultValue(defaultValue);
-    }
-
-    /**
-     * @param defaultValue
-     *            the default value of this methodinfo's annotation
-     */
-    public final void setDefaultValue(ElementValue defaultValue)
-    {
-        default_value = defaultValue;
     }
 
 

==================================================
ArrayElementValue.java
index ef70567c21..d9888c042c 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationElementValue.java
@@ -42,6 +42,18 @@ public class AnnotationElementValue extends ElementValue
         annotationEntry.dump(dos);
     }
 
+    @Override
+    public String stringifyValue()
+    {
+        return annotationEntry.toString();
+    }
+
+    @Override
+    public String toString()
+    {
+        return stringifyValue();
+    }
+
     public AnnotationEntry getAnnotationEntry()
     {
         return annotationEntry;

==================================================
Attribute.java
index d9baa450a5..0c3804dc22 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ArrayElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ArrayElementValue.java
@@ -25,6 +25,21 @@ public class ArrayElementValue extends ElementValue
     // For array types, this is the array
     private ElementValue[] evalues;
 
+    @Override
+    public String toString()
+    {
+        StringBuilder sb = new StringBuilder();
+        sb.append("{");
+        for (int i = 0; i < evalues.length; i++)
+        {
+            sb.append(evalues[i].toString());
+            if ((i + 1) < evalues.length)
+                sb.append(",");
+        }
+        sb.append("}");
+        return sb.toString();
+    }
+
     public ArrayElementValue(int type, ElementValue[] datums, ConstantPool cpool)
     {
         super(type, cpool);
@@ -45,6 +60,21 @@ public class ArrayElementValue extends ElementValue
         }
     }
 
+    @Override
+    public String stringifyValue()
+    {
+        StringBuilder sb = new StringBuilder();
+        sb.append("[");
+        for (int i = 0; i < evalues.length; i++)
+        {
+            sb.append(evalues[i].stringifyValue());
+            if ((i + 1) < evalues.length)
+                sb.append(",");
+        }
+        sb.append("]");
+        return sb.toString();
+    }
+
     public ElementValue[] getElementValuesArray()
     {
         return evalues;

==================================================
ClassElementValue.java
index 42df613978..3c42d5fbe0 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
@@ -215,4 +215,13 @@ public abstract class Attribute implements Cloneable, Serializable
      * @return deep copy of this attribute
      */
     public abstract Attribute copy(ConstantPool _constant_pool);
+
+    /**
+     * @return attribute name.
+     */
+    @Override
+    public String toString()
+    {
+        return Constants.ATTRIBUTE_NAMES[tag];
+    }
 }

==================================================
Code.java
index 48f8750cbc..0008796186 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ClassElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ClassElementValue.java
@@ -20,6 +20,8 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataOutputStream;
 import java.io.IOException;
 
+import org.apache.tomcat.util.bcel.Constants;
+
 public class ClassElementValue extends ElementValue
 {
     // For primitive types and string type, this points to the value entry in
@@ -34,6 +36,14 @@ public class ClassElementValue extends ElementValue
     }
 
 
+    @Override
+    public String stringifyValue()
+    {
+        ConstantUtf8 cu8 = (ConstantUtf8) cpool.getConstant(idx,
+                Constants.CONSTANT_Utf8);
+        return cu8.getBytes();
+    }
+
     @Override
     public void dump(DataOutputStream dos) throws IOException
     {

==================================================
CodeException.java
index d3b62a6be1..d9cc4c0c37 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Code.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Code.java
@@ -44,6 +44,8 @@ import org.apache.tomcat.util.bcel.Constants;
 public final class Code extends Attribute {
 
     private static final long serialVersionUID = 8936843273318969602L;
+    private int max_stack; // Maximum size of stack used by this method
+    private int max_locals; // Number of local variables
     private int code_length; // Length of code in bytes
     private byte[] code; // Actual byte code
     private int exception_table_length;
@@ -103,6 +105,8 @@ public final class Code extends Attribute {
     public Code(int name_index, int length, int max_stack, int max_locals, byte[] code,
             CodeException[] exception_table, Attribute[] attributes, ConstantPool constant_pool) {
         super(Constants.ATTR_CODE, name_index, length, constant_pool);
+        this.max_stack = max_stack;
+        this.max_locals = max_locals;
         setCode(code);
         setExceptionTable(exception_table);
         setAttributes(attributes); // Overwrites length!
@@ -178,6 +182,39 @@ public final class Code extends Attribute {
     }
 
 
+    /**
+     * @return String representation of code chunk.
+     */
+    public final String toString( boolean verbose ) {
+        StringBuilder buf = new StringBuilder(100);
+        buf.append("Code(max_stack = ").append(max_stack).append(", max_locals = ").append(
+                max_locals).append(", code_length = ").append(code_length).append(")\n").append(
+                Utility.codeToString(code, constant_pool, 0, -1, verbose));
+        if (exception_table_length > 0) {
+            buf.append("\nException handler(s) = \n").append("From\tTo\tHandler\tType\n");
+            for (int i = 0; i < exception_table_length; i++) {
+                buf.append(exception_table[i].toString(constant_pool, verbose)).append("\n");
+            }
+        }
+        if (attributes_count > 0) {
+            buf.append("\nAttribute(s) = \n");
+            for (int i = 0; i < attributes_count; i++) {
+                buf.append(attributes[i].toString()).append("\n");
+            }
+        }
+        return buf.toString();
+    }
+
+
+    /**
+     * @return String representation of code chunk.
+     */
+    @Override
+    public final String toString() {
+        return toString(true);
+    }
+
+
     /**
      * @return deep copy of this attribute
      *

==================================================
Constant.java
index 275160f3cb..21ded53892 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/CodeException.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/CodeException.java
@@ -90,6 +90,16 @@ public final class CodeException implements Cloneable, Constants, Serializable {
     }
 
 
+    /**
+     * @return String representation.
+     */
+    @Override
+    public final String toString() {
+        return "CodeException(start_pc = " + start_pc + ", end_pc = " + end_pc + ", handler_pc = "
+                + handler_pc + ", catch_type = " + catch_type + ")";
+    }
+
+
     /**
      * @return String representation.
      */

==================================================
ConstantCP.java
index e92c5f25aa..23fa969138 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Constant.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Constant.java
@@ -76,6 +76,15 @@ public abstract class Constant implements Cloneable, Serializable {
     }
 
 
+    /**
+     * @return String representation.
+     */
+    @Override
+    public String toString() {
+        return Constants.CONSTANT_NAMES[tag] + "[" + tag + "]";
+    }
+
+
     @Override
     public Object clone() throws CloneNotSupportedException {
         return super.clone();

==================================================
ConstantClass.java
index 4850414a12..293bae04dd 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantCP.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantCP.java
@@ -74,4 +74,14 @@ public abstract class ConstantCP extends Constant {
     public final int getNameAndTypeIndex() {
         return name_and_type_index;
     }
+
+
+    /**
+     * @return String representation.
+     */
+    @Override
+    public final String toString() {
+        return super.toString() + "(class_index = " + class_index + ", name_and_type_index = "
+                + name_and_type_index + ")";
+    }
 }

==================================================
ConstantDouble.java
index 3df7fde083..779f800bbb 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantClass.java
@@ -64,4 +64,13 @@ public final class ConstantClass extends Constant {
     public final int getNameIndex() {
         return name_index;
     }
+
+
+    /**
+     * @return String representation.
+     */
+    @Override
+    public final String toString() {
+        return super.toString() + "(name_index = " + name_index + ")";
+    }
 }

==================================================
ConstantFloat.java
index 6045c3cf68..9a3db9ac47 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantDouble.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantDouble.java
@@ -63,4 +63,13 @@ public final class ConstantDouble extends Constant {
     public final double getBytes() {
         return bytes;
     }
+
+
+    /**
+     * @return String representation.
+     */
+    @Override
+    public final String toString() {
+        return super.toString() + "(bytes = " + bytes + ")";
+    }
 }

==================================================
ConstantInteger.java
index bfb7864d36..a8cfedca2b 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantFloat.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantFloat.java
@@ -63,4 +63,13 @@ public final class ConstantFloat extends Constant {
     public final float getBytes() {
         return bytes;
     }
+
+
+    /**
+     * @return String representation.
+     */
+    @Override
+    public final String toString() {
+        return super.toString() + "(bytes = " + bytes + ")";
+    }
 }

==================================================
ConstantInvokeDynamic.java
index d5f99df849..7eadd37e5d 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantInteger.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantInteger.java
@@ -63,4 +63,13 @@ public final class ConstantInteger extends Constant {
     public final int getBytes() {
         return bytes;
     }
+
+
+    /**
+     * @return String representation.
+     */
+    @Override
+    public final String toString() {
+        return super.toString() + "(bytes = " + bytes + ")";
+    }
 }

==================================================
ConstantLong.java
index c42d9d8d1f..bc03306b6f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantInvokeDynamic.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantInvokeDynamic.java
@@ -81,4 +81,15 @@ public final class ConstantInvokeDynamic extends Constant {
     public void setNameAndTypeIndex(int name_and_type_index) {
         this.name_and_type_index = name_and_type_index;
     }
+
+
+    /**
+     * @return String representation
+     */
+    @Override
+    public final String toString() {
+        return super.toString() + "(bootstrap_method_attr_index = " +
+                bootstrap_method_attr_index + ", name_and_type_index = " +
+                name_and_type_index + ")";
+    }
 }

==================================================
ConstantMethodHandle.java
index 388c7572d7..10574f8d36 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantLong.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantLong.java
@@ -63,4 +63,13 @@ public final class ConstantLong extends Constant {
     public final long getBytes() {
         return bytes;
     }
+
+
+    /**
+     * @return String representation.
+     */
+    @Override
+    public final String toString() {
+        return super.toString() + "(bytes = " + bytes + ")";
+    }
 }

==================================================
ConstantMethodType.java
index 1a2e467063..9ba58f38f5 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantMethodHandle.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantMethodHandle.java
@@ -80,4 +80,14 @@ public final class ConstantMethodHandle extends Constant {
     public void setReferenceIndex(int reference_index) {
         this.reference_index = reference_index;
     }
+
+
+    /**
+     * @return String representation
+     */
+    @Override
+    public final String toString() {
+        return super.toString() + "(reference_kind = " + reference_kind +
+                ", reference_index = " + reference_index + ")";
+    }
 }

==================================================
ConstantNameAndType.java
index 6ca1bc328a..32804883bd 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantMethodType.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantMethodType.java
@@ -68,4 +68,13 @@ public final class ConstantMethodType extends Constant {
     public void setDescriptorIndex(int descriptor_index) {
         this.descriptor_index = descriptor_index;
     }
+
+
+    /**
+     * @return String representation
+     */
+    @Override
+    public final String toString() {
+        return super.toString() + "(descriptor_index = " + descriptor_index + ")";
+    }
 }

==================================================
ConstantPool.java
index df1306dd21..5c71817ff4 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantNameAndType.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantNameAndType.java
@@ -75,4 +75,14 @@ public final class ConstantNameAndType extends Constant {
     public final int getSignatureIndex() {
         return signature_index;
     }
+
+
+    /**
+     * @return String representation
+     */
+    @Override
+    public final String toString() {
+        return super.toString() + "(name_index = " + name_index + ", signature_index = "
+                + signature_index + ")";
+    }
 }

==================================================
ConstantString.java
index 4e1cde7790..a6549d815a 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
@@ -258,4 +258,19 @@ public class ConstantPool implements Cloneable, Serializable {
     public int getLength() {
         return constant_pool_count;
     }
+
+
+    /**
+     * @return String representation.
+     */
+    @Override
+    public String toString() {
+        StringBuilder buf = new StringBuilder();
+        for (int i = 1; i < constant_pool_count; i++) {
+            buf.append(i).append(")").append(constant_pool[i]).append("\n");
+        }
+        return buf.toString();
+    }
+
+
 }

==================================================
ConstantUtf8.java
index d1226824e2..b98bdb45b8 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantString.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantString.java
@@ -63,4 +63,13 @@ public final class ConstantString extends Constant {
     public final int getStringIndex() {
         return string_index;
     }
+
+
+    /**
+     * @return String representation.
+     */
+    @Override
+    public final String toString() {
+        return super.toString() + "(string_index = " + string_index + ")";
+    }
 }

==================================================
ConstantValue.java
index 187bcb7757..c3e7353704 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantUtf8.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantUtf8.java
@@ -54,4 +54,13 @@ public final class ConstantUtf8 extends Constant {
     public final String getBytes() {
         return bytes;
     }
+
+
+    /**
+     * @return String representation
+     */
+    @Override
+    public final String toString() {
+        return super.toString() + "(\"" + Utility.replace(bytes, "\n", "\\n") + "\")";
+    }
 }

==================================================
Deprecated.java
index 31471f3739..95a9b6c587 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantValue.java
@@ -33,6 +33,7 @@ import org.apache.tomcat.util.bcel.Constants;
 public final class ConstantValue extends Attribute {
 
     private static final long serialVersionUID = -388222612752527969L;
+    private int constantvalue_index;
 
 
     /**
@@ -58,6 +59,41 @@ public final class ConstantValue extends Attribute {
     public ConstantValue(int name_index, int length, int constantvalue_index,
             ConstantPool constant_pool) {
         super(Constants.ATTR_CONSTANT_VALUE, name_index, length, constant_pool);
+        this.constantvalue_index = constantvalue_index;
+    }
+
+
+    /**
+     * @return String representation of constant value.
+     */
+    @Override
+    public final String toString() {
+        Constant c = constant_pool.getConstant(constantvalue_index);
+        String buf;
+        int i;
+        // Print constant to string depending on its type
+        switch (c.getTag()) {
+            case Constants.CONSTANT_Long:
+                buf = String.valueOf(((ConstantLong) c).getBytes());
+                break;
+            case Constants.CONSTANT_Float:
+                buf = String.valueOf(((ConstantFloat) c).getBytes());
+                break;
+            case Constants.CONSTANT_Double:
+                buf = String.valueOf(((ConstantDouble) c).getBytes());
+                break;
+            case Constants.CONSTANT_Integer:
+                buf = String.valueOf(((ConstantInteger) c).getBytes());
+                break;
+            case Constants.CONSTANT_String:
+                i = ((ConstantString) c).getStringIndex();
+                c = constant_pool.getConstant(i, Constants.CONSTANT_Utf8);
+                buf = "\"" + Utility.convertString(((ConstantUtf8) c).getBytes()) + "\"";
+                break;
+            default:
+                throw new IllegalStateException("Type of ConstValue invalid: " + c);
+        }
+        return buf;
     }
 
 

==================================================
ElementValue.java
index c0955fefb5..135bf3089f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Deprecated.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Deprecated.java
@@ -68,6 +68,15 @@ public final class Deprecated extends Attribute {
     }
 
 
+    /**
+     * @return attribute name
+     */
+    @Override
+    public final String toString() {
+        return Constants.ATTRIBUTE_NAMES[Constants.ATTR_DEPRECATED];
+    }
+
+
     /**
      * @return deep copy of this attribute
      */

==================================================
EnumElementValue.java
index 35e39b9301..3934fdcd7e 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ElementValue.java
@@ -32,12 +32,21 @@ public abstract class ElementValue
 
     protected ConstantPool cpool;
 
+    @Override
+    public String toString()
+    {
+        return stringifyValue();
+    }
+
     protected ElementValue(int type, ConstantPool cpool)
     {
         this.type = type;
         this.cpool = cpool;
     }
 
+
+    public abstract String stringifyValue();
+
     public abstract void dump(DataOutputStream dos) throws IOException;
 
     public static final int STRING = 's';

==================================================
ExceptionTable.java
index 72fe1b7293..d91561c4f9 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/EnumElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/EnumElementValue.java
@@ -20,6 +20,8 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataOutputStream;
 import java.io.IOException;
 
+import org.apache.tomcat.util.bcel.Constants;
+
 public class EnumElementValue extends ElementValue
 {
     // For enum types, these two indices point to the type and value
@@ -45,4 +47,12 @@ public class EnumElementValue extends ElementValue
         dos.writeShort(typeIdx); // u2
         dos.writeShort(valueIdx); // u2
     }
+
+    @Override
+    public String stringifyValue()
+    {
+        ConstantUtf8 cu8 = (ConstantUtf8) cpool.getConstant(valueIdx,
+                Constants.CONSTANT_Utf8);
+        return cu8.getBytes();
+    }
 }

==================================================
Field.java
index c9daab15dd..952d747368 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ExceptionTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ExceptionTable.java
@@ -83,6 +83,25 @@ public final class ExceptionTable extends Attribute {
     }
 
 
+    /**
+     * @return String representation, i.e., a list of thrown exceptions.
+     */
+    @Override
+    public final String toString() {
+        StringBuilder buf = new StringBuilder();
+        String str;
+        for (int i = 0; i < number_of_exceptions; i++) {
+            str = constant_pool.getConstantString(exception_index_table[i],
+                    Constants.CONSTANT_Class);
+            buf.append(Utility.compactClassName(str, false));
+            if (i < number_of_exceptions - 1) {
+                buf.append(", ");
+            }
+        }
+        return buf.toString();
+    }
+
+
     /**
      * @return deep copy of this attribute
      */

==================================================
InnerClass.java
index 4a9b581a5f..f44ba059b1 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Field.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Field.java
@@ -75,6 +75,36 @@ public final class Field extends FieldOrMethod {
     }
 
 
+    /**
+     * Return string representation close to declaration format,
+     * `public static final short MAX = 100', e.g..
+     *
+     * @return String representation of field, including the signature.
+     */
+    @Override
+    public final String toString() {
+        String name, signature, access; // Short cuts to constant pool
+        // Get names from constant pool
+        access = Utility.accessToString(access_flags);
+        access = access.equals("") ? "" : (access + " ");
+        signature = Utility.signatureToString(getSignature());
+        name = getName();
+        StringBuilder buf = new StringBuilder(64);
+        buf.append(access).append(signature).append(" ").append(name);
+        ConstantValue cv = getConstantValue();
+        if (cv != null) {
+            buf.append(" = ").append(cv);
+        }
+        for (int i = 0; i < attributes_count; i++) {
+            Attribute a = attributes[i];
+            if (!(a instanceof ConstantValue)) {
+                buf.append(" [").append(a.toString()).append("]");
+            }
+        }
+        return buf.toString();
+    }
+
+
     /**
      * Return value as defined by given BCELComparator strategy.
      * By default two Field objects are said to be equal when

==================================================
InnerClasses.java
index da5915b256..5d0d6c1f6e 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/InnerClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/InnerClass.java
@@ -22,6 +22,8 @@ import java.io.DataOutputStream;
 import java.io.IOException;
 import java.io.Serializable;
 
+import org.apache.tomcat.util.bcel.Constants;
+
 /**
  * This class represents a inner class attribute, i.e., the class
  * indices of the inner and outer classes, the name and the attributes
@@ -80,6 +82,44 @@ public final class InnerClass implements Cloneable, Serializable {
     }
 
 
+    /**
+     * @return String representation.
+     */
+    @Override
+    public final String toString() {
+        return "InnerClass(" + inner_class_index + ", " + outer_class_index + ", "
+                + inner_name_index + ", " + inner_access_flags + ")";
+    }
+
+
+    /**
+     * @return Resolved string representation
+     */
+    public final String toString( ConstantPool constant_pool ) {
+        String inner_class_name, outer_class_name, inner_name, access;
+        inner_class_name = constant_pool.getConstantString(inner_class_index,
+                Constants.CONSTANT_Class);
+        inner_class_name = Utility.compactClassName(inner_class_name);
+        if (outer_class_index != 0) {
+            outer_class_name = constant_pool.getConstantString(outer_class_index,
+                    Constants.CONSTANT_Class);
+            outer_class_name = Utility.compactClassName(outer_class_name);
+        } else {
+            outer_class_name = "<not a member>";
+        }
+        if (inner_name_index != 0) {
+            inner_name = ((ConstantUtf8) constant_pool.getConstant(inner_name_index,
+                    Constants.CONSTANT_Utf8)).getBytes();
+        } else {
+            inner_name = "<anonymous>";
+        }
+        access = Utility.accessToString(inner_access_flags, true);
+        access = access.equals("") ? "" : (access + " ");
+        return "InnerClass:" + access + inner_class_name + "(\"" + outer_class_name + "\", \""
+                + inner_name + "\")";
+    }
+
+
     /**
      * @return deep copy of this object
      */

==================================================
JavaClass.java
index 61e86b1768..6bc97fc5a7 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/InnerClasses.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/InnerClasses.java
@@ -81,6 +81,19 @@ public final class InnerClasses extends Attribute {
     }
 
 
+    /**
+     * @return String representation.
+     */
+    @Override
+    public final String toString() {
+        StringBuilder buf = new StringBuilder();
+        for (int i = 0; i < number_of_classes; i++) {
+            buf.append(inner_classes[i].toString(constant_pool)).append("\n");
+        }
+        return buf.toString();
+    }
+
+
     /**
      * @return deep copy of this attribute
      */

==================================================
LineNumber.java
index 1f0c869724..10288afe88 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
@@ -19,6 +19,7 @@ package org.apache.tomcat.util.bcel.classfile;
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.StringTokenizer;
 
 import org.apache.tomcat.util.bcel.Constants;
 import org.apache.tomcat.util.bcel.util.BCELComparator;
@@ -38,9 +39,16 @@ public class JavaClass extends AccessFlags
         implements Cloneable, Comparable<JavaClass> {
 
     private static final long serialVersionUID = 7029227708237523236L;
+    private String file_name;
+    private String source_file_name = "<Unknown>";
     private String class_name;
     private String superclass_name;
+    private int major, minor; // Compiler version
+    private ConstantPool constant_pool; // Constant pool
+    private int[] interfaces; // implemented interfaces
     private String[] interface_names;
+    private Field[] fields; // Fields, i.e., variables of class
+    private Method[] methods; // methods defined in the class
     private Attribute[] attributes; // attributes defined in the class
     private AnnotationEntry[] annotations;   // annotations defined on the class
 
@@ -98,10 +106,23 @@ public class JavaClass extends AccessFlags
         if (methods == null) {
             methods = new Method[0];
         }
+        this.file_name = file_name;
+        this.major = major;
+        this.minor = minor;
         this.access_flags = access_flags;
+        this.constant_pool = constant_pool;
+        this.interfaces = interfaces;
+        this.fields = fields;
+        this.methods = methods;
         this.attributes = attributes;
         annotationsOutOfDate = true;
-
+        // Get source file name if available
+        for (int i = 0; i < attributes.length; i++) {
+            if (attributes[i] instanceof SourceFile) {
+                source_file_name = ((SourceFile) attributes[i]).getSourceFileName();
+                break;
+            }
+        }
         /* According to the specification the following entries must be of type
          * `ConstantClass' but we check that anyway via the
          * `ConstPool.getConstant' method.
@@ -178,6 +199,72 @@ public class JavaClass extends AccessFlags
     }
 
 
+    /**
+     * @return String representing class contents.
+     */
+    @Override
+    public String toString() {
+        String access = Utility.accessToString(access_flags, true);
+        access = access.equals("") ? "" : (access + " ");
+        StringBuilder buf = new StringBuilder(128);
+        buf.append(access).append(Utility.classOrInterface(access_flags)).append(" ").append(
+                class_name).append(" extends ").append(
+                Utility.compactClassName(superclass_name, false)).append('\n');
+        int size = interfaces.length;
+        if (size > 0) {
+            buf.append("implements\t\t");
+            for (int i = 0; i < size; i++) {
+                buf.append(interface_names[i]);
+                if (i < size - 1) {
+                    buf.append(", ");
+                }
+            }
+            buf.append('\n');
+        }
+        buf.append("filename\t\t").append(file_name).append('\n');
+        buf.append("compiled from\t\t").append(source_file_name).append('\n');
+        buf.append("compiler version\t").append(major).append(".").append(minor).append('\n');
+        buf.append("access flags\t\t").append(access_flags).append('\n');
+        buf.append("constant pool\t\t").append(constant_pool.getLength()).append(" entries\n");
+        buf.append("ACC_SUPER flag\t\t").append(isSuper()).append("\n");
+        if (attributes.length > 0) {
+            buf.append("\nAttribute(s):\n");
+            for (int i = 0; i < attributes.length; i++) {
+                buf.append(indent(attributes[i]));
+            }
+        }
+        AnnotationEntry[] annotations = getAnnotationEntries();
+        if (annotations!=null && annotations.length>0) {
+            buf.append("\nAnnotation(s):\n");
+            for (int i=0; i<annotations.length; i++)
+                buf.append(indent(annotations[i]));
+        }
+        if (fields.length > 0) {
+            buf.append("\n").append(fields.length).append(" fields:\n");
+            for (int i = 0; i < fields.length; i++) {
+                buf.append("\t").append(fields[i]).append('\n');
+            }
+        }
+        if (methods.length > 0) {
+            buf.append("\n").append(methods.length).append(" methods:\n");
+            for (int i = 0; i < methods.length; i++) {
+                buf.append("\t").append(methods[i]).append('\n');
+            }
+        }
+        return buf.toString();
+    }
+
+
+    private static final String indent( Object obj ) {
+        StringTokenizer tok = new StringTokenizer(obj.toString(), "\n");
+        StringBuilder buf = new StringBuilder();
+        while (tok.hasMoreTokens()) {
+            buf.append("\t").append(tok.nextToken()).append("\n");
+        }
+        return buf.toString();
+    }
+
+
     public final boolean isSuper() {
         return (access_flags & Constants.ACC_SUPER) != 0;
     }

==================================================
LineNumberTable.java
index 19c5992cd7..be24182418 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LineNumber.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LineNumber.java
@@ -70,6 +70,15 @@ public final class LineNumber implements Cloneable, Serializable {
     }
 
 
+    /**
+     * @return String representation
+     */
+    @Override
+    public final String toString() {
+        return "LineNumber(" + start_pc + ", " + line_number + ")";
+    }
+
+
     /**
      * @return deep copy of this object
      */

==================================================
LocalVariable.java
index a70ca7ac8f..7b43a089cd 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LineNumberTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LineNumberTable.java
@@ -80,6 +80,30 @@ public final class LineNumberTable extends Attribute {
     }
 
 
+    /**
+     * @return String representation.
+     */
+    @Override
+    public final String toString() {
+        StringBuilder buf = new StringBuilder();
+        StringBuilder line = new StringBuilder();
+        String newLine = System.getProperty("line.separator", "\n");
+        for (int i = 0; i < line_number_table_length; i++) {
+            line.append(line_number_table[i].toString());
+            if (i < line_number_table_length - 1) {
+                line.append(", ");
+            }
+            if (line.length() > 72) {
+                line.append(newLine);
+                buf.append(line.toString());
+                line.setLength(0);
+            }
+        }
+        buf.append(line);
+        return buf.toString();
+    }
+
+
     /**
      * @return deep copy of this attribute
      */

==================================================
LocalVariableTable.java
index cd556de6e2..6f47280495 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariable.java
@@ -118,6 +118,17 @@ public final class LocalVariable implements Constants, Cloneable, Serializable {
     }
 
 
+    /**
+     * @return string representation.
+     */
+    @Override
+    public final String toString() {
+        String name = getName(), signature = Utility.signatureToString(getSignature());
+        return "LocalVariable(start_pc = " + start_pc + ", length = " + length + ", index = "
+                + index + ":" + signature + " " + name + ")";
+    }
+
+
     /**
      * @return deep copy of this object
      */

==================================================
LocalVariableTypeTable.java
index 723fe835f0..9984827b53 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTable.java
@@ -97,6 +97,22 @@ public class LocalVariableTable extends Attribute {
     }
 
 
+    /**
+     * @return String representation.
+     */
+    @Override
+    public final String toString() {
+        StringBuilder buf = new StringBuilder();
+        for (int i = 0; i < local_variable_table_length; i++) {
+            buf.append(local_variable_table[i].toString());
+            if (i < local_variable_table_length - 1) {
+                buf.append('\n');
+            }
+        }
+        return buf.toString();
+    }
+
+
     /**
      * @return deep copy of this attribute
      */

==================================================
Method.java
index e8f9d3e700..6ec6526af7 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTypeTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTypeTable.java
@@ -78,6 +78,22 @@ private int             local_variable_type_table_length; // Table of local
       local_variable_table.length;
   }
 
+  /**
+   * @return String representation.
+   */
+  @Override
+  public final String toString() {
+      StringBuilder buf = new StringBuilder();
+
+    for(int i=0; i < local_variable_type_table_length; i++) {
+      buf.append(local_variable_type_table[i].toString());
+
+      if(i < local_variable_type_table_length - 1) buf.append('\n');
+    }
+
+    return buf.toString();
+  }
+
   /**
    * @return deep copy of this attribute
    */

==================================================
PMGClass.java
index 3170f24c3c..e8d5f28430 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Method.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Method.java
@@ -20,6 +20,7 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInputStream;
 import java.io.IOException;
 
+import org.apache.tomcat.util.bcel.Constants;
 import org.apache.tomcat.util.bcel.util.BCELComparator;
 
 /**
@@ -111,6 +112,43 @@ public final class Method extends FieldOrMethod {
     }
 
 
+    /**
+     * Return string representation close to declaration format,
+     * `public static void main(String[] args) throws IOException', e.g.
+     *
+     * @return String representation of the method.
+     */
+    @Override
+    public final String toString() {
+        ConstantUtf8 c;
+        String name, signature, access; // Short cuts to constant pool
+        StringBuilder buf;
+        access = Utility.accessToString(access_flags);
+        // Get name and signature from constant pool
+        c = (ConstantUtf8) constant_pool.getConstant(signature_index, Constants.CONSTANT_Utf8);
+        signature = c.getBytes();
+        c = (ConstantUtf8) constant_pool.getConstant(name_index, Constants.CONSTANT_Utf8);
+        name = c.getBytes();
+        signature = Utility.methodSignatureToString(signature, name, access, true,
+                getLocalVariableTable());
+        buf = new StringBuilder(signature);
+        for (int i = 0; i < attributes_count; i++) {
+            Attribute a = attributes[i];
+            if (!((a instanceof Code) || (a instanceof ExceptionTable))) {
+                buf.append(" [").append(a.toString()).append("]");
+            }
+        }
+        ExceptionTable e = getExceptionTable();
+        if (e != null) {
+            String str = e.toString();
+            if (!str.equals("")) {
+                buf.append("\n\t\tthrows ").append(str);
+            }
+        }
+        return buf.toString();
+    }
+
+
     /**
      * Return value as defined by given BCELComparator strategy.
      * By default two method objects are said to be equal when

==================================================
Signature.java
index f524c57a90..0ce4de22ca 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/PMGClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/PMGClass.java
@@ -85,6 +85,15 @@ public final class PMGClass extends Attribute {
     }
 
 
+    /**
+     * @return String representation
+     */
+    @Override
+    public final String toString() {
+        return "PMGClass(" + getPMGName() + ", " + getPMGClassName() + ")";
+    }
+
+
     /**
      * @return deep copy of this attribute
      */

==================================================
SimpleElementValue.java
index 191a9c83ee..134b85ff96 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Signature.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Signature.java
@@ -71,6 +71,16 @@ public final class Signature extends Attribute {
         return c.getBytes();
     }
 
+    /**
+     * @return String representation
+     */
+    @Override
+    public final String toString() {
+        String s = getSignature();
+        return "Signature(" + s + ")";
+    }
+
+
     /**
      * @return deep copy of this attribute
      */

==================================================
SourceFile.java
index 9d39fb592f..7ba328bcb3 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/SimpleElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/SimpleElementValue.java
@@ -20,6 +20,8 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataOutputStream;
 import java.io.IOException;
 
+import org.apache.tomcat.util.bcel.Constants;
+
 public class SimpleElementValue extends ElementValue
 {
     private int index;
@@ -39,6 +41,64 @@ public class SimpleElementValue extends ElementValue
     }
 
 
+    @Override
+    public String toString()
+    {
+        return stringifyValue();
+    }
+
+    // Whatever kind of value it is, return it as a string
+    @Override
+    public String stringifyValue()
+    {
+        switch (type)
+        {
+        case PRIMITIVE_INT:
+            ConstantInteger c = (ConstantInteger) cpool.getConstant(getIndex(),
+                    Constants.CONSTANT_Integer);
+            return Integer.toString(c.getBytes());
+        case PRIMITIVE_LONG:
+            ConstantLong j = (ConstantLong) cpool.getConstant(getIndex(),
+                    Constants.CONSTANT_Long);
+            return Long.toString(j.getBytes());
+        case PRIMITIVE_DOUBLE:
+            ConstantDouble d = (ConstantDouble) cpool.getConstant(getIndex(),
+                    Constants.CONSTANT_Double);
+            return Double.toString(d.getBytes());
+        case PRIMITIVE_FLOAT:
+            ConstantFloat f = (ConstantFloat) cpool.getConstant(getIndex(),
+                    Constants.CONSTANT_Float);
+            return Float.toString(f.getBytes());
+        case PRIMITIVE_SHORT:
+            ConstantInteger s = (ConstantInteger) cpool.getConstant(getIndex(),
+                    Constants.CONSTANT_Integer);
+            return Integer.toString(s.getBytes());
+        case PRIMITIVE_BYTE:
+            ConstantInteger b = (ConstantInteger) cpool.getConstant(getIndex(),
+                    Constants.CONSTANT_Integer);
+            return Integer.toString(b.getBytes());
+        case PRIMITIVE_CHAR:
+            ConstantInteger ch = (ConstantInteger) cpool.getConstant(
+                    getIndex(), Constants.CONSTANT_Integer);
+            return String.valueOf((char)ch.getBytes());
+        case PRIMITIVE_BOOLEAN:
+            ConstantInteger bo = (ConstantInteger) cpool.getConstant(
+                    getIndex(), Constants.CONSTANT_Integer);
+            if (bo.getBytes() == 0) {
+                return "false";
+            }
+            return "true";
+        case STRING:
+            ConstantUtf8 cu8 = (ConstantUtf8) cpool.getConstant(getIndex(),
+                    Constants.CONSTANT_Utf8);
+            return cu8.getBytes();
+        default:
+            throw new RuntimeException(
+                    "SimpleElementValue class does not know how to stringify type "
+                            + type);
+        }
+    }
+
     @Override
     public void dump(DataOutputStream dos) throws IOException
     {

==================================================
StackMap.java
index b881814c96..07e3bd06bd 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/SourceFile.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/SourceFile.java
@@ -81,6 +81,15 @@ public final class SourceFile extends Attribute {
     }
 
 
+    /**
+     * @return String representation
+     */
+    @Override
+    public final String toString() {
+        return "SourceFile(" + getSourceFileName() + ")";
+    }
+
+
     /**
      * @return deep copy of this attribute
      */

==================================================
StackMapEntry.java
index 2372873971..2ad1753647 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMap.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMap.java
@@ -70,7 +70,7 @@ public final class StackMap extends Attribute {
         map_length = file.readUnsignedShort();
         map = new StackMapEntry[map_length];
         for (int i = 0; i < map_length; i++) {
-            map[i] = new StackMapEntry(file);
+            map[i] = new StackMapEntry(file, constant_pool);
         }
     }
 
@@ -84,6 +84,23 @@ public final class StackMap extends Attribute {
     }
 
 
+    /**
+     * @return String representation.
+     */
+    @Override
+    public final String toString() {
+        StringBuilder buf = new StringBuilder("StackMap(");
+        for (int i = 0; i < map_length; i++) {
+            buf.append(map[i].toString());
+            if (i < map_length - 1) {
+                buf.append(", ");
+            }
+        }
+        buf.append(')');
+        return buf.toString();
+    }
+
+
     /**
      * @return deep copy of this attribute
      */

==================================================
StackMapTable.java
index 1847f8b075..2608470de3 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapEntry.java
@@ -48,16 +48,16 @@ public final class StackMapEntry implements Cloneable, Serializable {
      * @param file Input stream
      * @throws IOException
      */
-    StackMapEntry(DataInputStream file) throws IOException {
+    StackMapEntry(DataInputStream file, ConstantPool constant_pool) throws IOException {
         this(file.readShort(), file.readShort(), null, -1, null);
         types_of_locals = new StackMapType[number_of_locals];
         for (int i = 0; i < number_of_locals; i++) {
-            types_of_locals[i] = new StackMapType(file);
+            types_of_locals[i] = new StackMapType(file, constant_pool);
         }
         number_of_stack_items = file.readShort();
         types_of_stack_items = new StackMapType[number_of_stack_items];
         for (int i = 0; i < number_of_stack_items; i++) {
-            types_of_stack_items[i] = new StackMapType(file);
+            types_of_stack_items[i] = new StackMapType(file, constant_pool);
         }
     }
 
@@ -92,6 +92,38 @@ public final class StackMapEntry implements Cloneable, Serializable {
     }
 
 
+    /**
+     * @return String representation.
+     */
+    @Override
+    public final String toString() {
+        StringBuilder buf = new StringBuilder(64);
+        buf.append("(offset=").append(byte_code_offset);
+        if (number_of_locals > 0) {
+            buf.append(", locals={");
+            for (int i = 0; i < number_of_locals; i++) {
+                buf.append(types_of_locals[i]);
+                if (i < number_of_locals - 1) {
+                    buf.append(", ");
+                }
+            }
+            buf.append("}");
+        }
+        if (number_of_stack_items > 0) {
+            buf.append(", stack items={");
+            for (int i = 0; i < number_of_stack_items; i++) {
+                buf.append(types_of_stack_items[i]);
+                if (i < number_of_stack_items - 1) {
+                    buf.append(", ");
+                }
+            }
+            buf.append("}");
+        }
+        buf.append(")");
+        return buf.toString();
+    }
+
+
     /**
      * @return deep copy of this object
      */

==================================================
StackMapTableEntry.java
index 3e2a4681c4..3b01d5b9a9 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapTable.java
@@ -70,7 +70,7 @@ public final class StackMapTable extends Attribute {
         map_length = file.readUnsignedShort();
         map = new StackMapTableEntry[map_length];
         for (int i = 0; i < map_length; i++) {
-            map[i] = new StackMapTableEntry(file);
+            map[i] = new StackMapTableEntry(file, constant_pool);
         }
     }
 
@@ -84,6 +84,23 @@ public final class StackMapTable extends Attribute {
     }
 
 
+    /**
+     * @return String representation.
+     */
+    @Override
+    public final String toString() {
+        StringBuilder buf = new StringBuilder("StackMapTable(");
+        for (int i = 0; i < map_length; i++) {
+            buf.append(map[i].toString());
+            if (i < map_length - 1) {
+                buf.append(", ");
+            }
+        }
+        buf.append(')');
+        return buf.toString();
+    }
+
+
     /**
      * @return deep copy of this attribute
      */

==================================================
StackMapType.java
index 9dbafb7722..2b65811ec1 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapTableEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapTableEntry.java
@@ -51,7 +51,7 @@ public final class StackMapTableEntry implements Cloneable, Serializable {
      * @param file Input stream
      * @throws IOException
      */
-    StackMapTableEntry(DataInputStream file) throws IOException {
+    StackMapTableEntry(DataInputStream file, ConstantPool constant_pool) throws IOException {
         this(file.read(), -1, -1, null, -1, null);
 
         if (frame_type >= Constants.SAME_FRAME && frame_type <= Constants.SAME_FRAME_MAX) {
@@ -60,12 +60,12 @@ public final class StackMapTableEntry implements Cloneable, Serializable {
             byte_code_offset_delta = frame_type - Constants.SAME_LOCALS_1_STACK_ITEM_FRAME;
             number_of_stack_items = 1;
             types_of_stack_items = new StackMapType[1];
-            types_of_stack_items[0] = new StackMapType(file);
+            types_of_stack_items[0] = new StackMapType(file, constant_pool);
         } else if (frame_type == Constants.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {
             byte_code_offset_delta = file.readShort();
             number_of_stack_items = 1;
             types_of_stack_items = new StackMapType[1];
-            types_of_stack_items[0] = new StackMapType(file);
+            types_of_stack_items[0] = new StackMapType(file, constant_pool);
         } else if (frame_type >= Constants.CHOP_FRAME && frame_type <= Constants.CHOP_FRAME_MAX) {
             byte_code_offset_delta = file.readShort();
         } else if (frame_type == Constants.SAME_FRAME_EXTENDED) {
@@ -75,19 +75,19 @@ public final class StackMapTableEntry implements Cloneable, Serializable {
             number_of_locals = frame_type - 251;
             types_of_locals = new StackMapType[number_of_locals];
             for (int i = 0; i < number_of_locals; i++) {
-                types_of_locals[i] = new StackMapType(file);
+                types_of_locals[i] = new StackMapType(file, constant_pool);
             }
         } else if (frame_type == Constants.FULL_FRAME) {
             byte_code_offset_delta = file.readShort();
             number_of_locals = file.readShort();
             types_of_locals = new StackMapType[number_of_locals];
             for (int i = 0; i < number_of_locals; i++) {
-                types_of_locals[i] = new StackMapType(file);
+                types_of_locals[i] = new StackMapType(file, constant_pool);
             }
             number_of_stack_items = file.readShort();
             types_of_stack_items = new StackMapType[number_of_stack_items];
             for (int i = 0; i < number_of_stack_items; i++) {
-                types_of_stack_items[i] = new StackMapType(file);
+                types_of_stack_items[i] = new StackMapType(file, constant_pool);
             }
         } else {
             /* Can't happen */
@@ -149,6 +149,56 @@ public final class StackMapTableEntry implements Cloneable, Serializable {
     }
 
 
+    /**
+     * @return String representation.
+     */
+    @Override
+    public final String toString() {
+        StringBuilder buf = new StringBuilder(64);
+        buf.append("(");
+        if (frame_type >= Constants.SAME_FRAME && frame_type <= Constants.SAME_FRAME_MAX) {
+            buf.append("SAME");
+        } else if (frame_type >= Constants.SAME_LOCALS_1_STACK_ITEM_FRAME && frame_type <= Constants.SAME_LOCALS_1_STACK_ITEM_FRAME_MAX) {
+            buf.append("SAME_LOCALS_1_STACK");
+        } else if (frame_type == Constants.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {
+            buf.append("SAME_LOCALS_1_STACK_EXTENDED");
+        } else if (frame_type >= Constants.CHOP_FRAME && frame_type <= Constants.CHOP_FRAME_MAX) {
+            buf.append("CHOP "+(251-frame_type));
+        } else if (frame_type == Constants.SAME_FRAME_EXTENDED) {
+            buf.append("SAME_EXTENDED");
+        } else if (frame_type >= Constants.APPEND_FRAME && frame_type <= Constants.APPEND_FRAME_MAX) {
+            buf.append("APPEND "+(frame_type-251));
+        } else if (frame_type == Constants.FULL_FRAME) {
+            buf.append("FULL");
+        } else {
+            buf.append("UNKNOWN");
+        }
+        buf.append(", offset delta=").append(byte_code_offset_delta);
+        if (number_of_locals > 0) {
+            buf.append(", locals={");
+            for (int i = 0; i < number_of_locals; i++) {
+                buf.append(types_of_locals[i]);
+                if (i < number_of_locals - 1) {
+                    buf.append(", ");
+                }
+            }
+            buf.append("}");
+        }
+        if (number_of_stack_items > 0) {
+            buf.append(", stack items={");
+            for (int i = 0; i < number_of_stack_items; i++) {
+                buf.append(types_of_stack_items[i]);
+                if (i < number_of_stack_items - 1) {
+                    buf.append(", ");
+                }
+            }
+            buf.append("}");
+        }
+        buf.append(")");
+        return buf.toString();
+    }
+
+
     /**
      * @return deep copy of this object
      */

==================================================
Synthetic.java
index 63e68a175f..93d90094d7 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapType.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapType.java
@@ -40,6 +40,7 @@ public final class StackMapType implements Cloneable, Serializable {
 
     private byte type;
     private int index = -1; // Index to CONSTANT_Class or offset
+    private ConstantPool constant_pool;
 
 
     /**
@@ -47,11 +48,12 @@ public final class StackMapType implements Cloneable, Serializable {
      * @param file Input stream
      * @throws IOException
      */
-    StackMapType(DataInput file) throws IOException {
-        this(file.readByte(), -1);
+    StackMapType(DataInput file, ConstantPool constant_pool) throws IOException {
+        this(file.readByte(), -1, constant_pool);
         if (hasIndex()) {
             setIndex(file.readShort());
         }
+        setConstantPool(constant_pool);
     }
 
 
@@ -59,9 +61,10 @@ public final class StackMapType implements Cloneable, Serializable {
      * @param type type tag as defined in the Constants interface
      * @param index index to constant pool, or byte code offset
      */
-    public StackMapType(byte type, int index) {
+    public StackMapType(byte type, int index, ConstantPool constant_pool) {
         setType(type);
         setIndex(index);
+        setConstantPool(constant_pool);
     }
 
 
@@ -105,4 +108,35 @@ public final class StackMapType implements Cloneable, Serializable {
     public final boolean hasIndex() {
         return ((type == Constants.ITEM_Object) || (type == Constants.ITEM_NewObject));
     }
+
+
+    private String printIndex() {
+        if (type == Constants.ITEM_Object) {
+            if (index < 0) {
+                return ", class=<unknown>";
+            }
+            return ", class=" + constant_pool.constantToString(index, Constants.CONSTANT_Class);
+        } else if (type == Constants.ITEM_NewObject) {
+            return ", offset=" + index;
+        } else {
+            return "";
+        }
+    }
+
+
+    /**
+     * @return String representation
+     */
+    @Override
+    public final String toString() {
+        return "(type=" + Constants.ITEM_NAMES[type] + printIndex() + ")";
+    }
+
+
+    /**
+     * @param constant_pool Constant pool to be used for this object.
+     */
+    public final void setConstantPool( ConstantPool constant_pool ) {
+        this.constant_pool = constant_pool;
+    }
 }

==================================================
Unknown.java
index 3037ada14a..92f5a17455 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Synthetic.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Synthetic.java
@@ -74,6 +74,19 @@ public final class Synthetic extends Attribute {
     }
 
 
+    /**
+     * @return String representation.
+     */
+    @Override
+    public final String toString() {
+        StringBuilder buf = new StringBuilder("Synthetic");
+        if (length > 0) {
+            buf.append(" ").append(Utility.toHexString(bytes));
+        }
+        return buf.toString();
+    }
+
+
     /**
      * @return deep copy of this attribute
      */

==================================================
