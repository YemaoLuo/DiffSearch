50a9edfdb230c06de40ccc69be8fe4947ebd3fce
==================================================
Improve JSON filter
==================================================
remm remm@apache.org
==================================================
Thu Mar 2 14:38:00 2023 +0100
==================================================
JSONFilter.java
Improve JSON filter

Add more capabilities (filtering from a writer, as in the PR, etc). Some
common chars have a special more readable escape sequence in RFC 8259.
Based on parts of PR#539 submitted by Thomas Meyer.


==================================================
TestJSONFilter.java
index b5992d95d6..fe771b55cd 100644
--- a/java/org/apache/tomcat/util/json/JSONFilter.java
+++ b/java/org/apache/tomcat/util/json/JSONFilter.java
@@ -23,39 +23,119 @@ package org.apache.tomcat.util.json;
  */
 public class JSONFilter {
 
-    private JSONFilter() {
-        // Utility class. Hide the default constructor.
+    /**
+     * Escape the given char.
+     * @param c the char
+     * @return a char array with the escaped sequence
+     */
+    public static char[] escape(char c) {
+        if (c < 0x20 || c == 0x22 || c == 0x5c) {
+            char popular = getPopularChar(c);
+            if (popular > 0) {
+                return new char[] { '\\', popular };
+            } else {
+                StringBuilder escaped = new StringBuilder(6);
+                escaped.append("\\u");
+                escaped.append(String.format("%04X", Integer.valueOf(c)));
+                return escaped.toString().toCharArray();
+            }
+        } else {
+            char[] result = new char[1];
+            result[0] = c;
+            return result;
+        }
     }
 
+    /**
+     * Escape the given string.
+     * @param input the string
+     * @return the escaped string
+     */
     public static String escape(String input) {
+        return escape((CharSequence) input, 0, input.length()).toString();
+    }
+
+    /**
+     * Escape the given char sequence.
+     * @param input the char sequence
+     * @return the escaped char sequence
+     */
+    public static CharSequence escape(CharSequence input) {
+        return escape(input, 0, input.length());
+    }
+
+    /**
+     * Escape the given char sequence.
+     * @param input the char sequence
+     * @param off the offset on which escaping will start
+     * @param length the length which should be escaped
+     * @return the escaped char sequence corresponding to the specified range
+     */
+    public static CharSequence escape(CharSequence input, int off, int length) {
         /*
          * While any character MAY be escaped, only U+0000 to U+001F (control
          * characters), U+0022 (quotation mark) and U+005C (reverse solidus)
          * MUST be escaped.
          */
-        char[] chars = input.toCharArray();
+        //char[] chars = input.toCharArray();
         StringBuilder escaped = null;
-        int lastUnescapedStart = 0;
-        for (int i = 0; i < chars.length; i++) {
-            if (chars[i] < 0x20 || chars[i] == 0x22 || chars[i] == 0x5c) {
+        int lastUnescapedStart = off;
+        for (int i = off; i < length; i++) {
+            char c = input.charAt(i);
+            if (c < 0x20 || c == 0x22 || c == 0x5c) {
                 if (escaped == null) {
-                    escaped = new StringBuilder(chars.length + 20);
+                    escaped = new StringBuilder(length + 20);
                 }
                 if (lastUnescapedStart < i) {
                     escaped.append(input.subSequence(lastUnescapedStart, i));
                 }
                 lastUnescapedStart = i + 1;
-                escaped.append("\\u");
-                escaped.append(String.format("%04X", Integer.valueOf(chars[i])));
+                char popular = getPopularChar(c);
+                if (popular > 0) {
+                    escaped.append('\\').append(popular);
+                } else {
+                    escaped.append("\\u");
+                    escaped.append(String.format("%04X", Integer.valueOf(c)));
+                }
             }
         }
         if (escaped == null) {
-            return input;
+            if (off == 0 && length == input.length()) {
+                return input;
+            } else {
+                return input.subSequence(off, length - off);
+            }
         } else {
-            if (lastUnescapedStart < chars.length) {
-                escaped.append(input.subSequence(lastUnescapedStart, chars.length));
+            if (lastUnescapedStart < length) {
+                escaped.append(input.subSequence(lastUnescapedStart, length));
             }
             return escaped.toString();
         }
     }
+
+    private JSONFilter() {
+        // Utility class. Hide the default constructor.
+    }
+
+    private static char getPopularChar(char c) {
+        switch (c) {
+            case '"':
+            case '\\':
+            case '/':
+                return c;
+            case 0x8:
+                return 'b';
+            case 0xc:
+                return 'f';
+            case 0xa:
+                return 'n';
+            case 0xd:
+                return 'r';
+            case 0x9:
+                return 't';
+            default:
+                return 0;
+        }
+    }
+
 }

==================================================
