fcf5d0c836b3e027ccda9ff1050f43c77de145fc
==================================================
More tab police - misc packages
==================================================
Mark Emlyn
==================================================
Fri Jul 23 22:04:32 2010 +0000
==================================================
Constants.java
More tab police - misc packages

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@967284 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CoyoteAdapter.java
index f401efa724..eebdfc16f0 100644
--- a/java/org/apache/catalina/connector/Constants.java
+++ b/java/org/apache/catalina/connector/Constants.java
@@ -14,21 +14,13 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-
 package org.apache.catalina.connector;
 
-
 /**
  * Static constants for this package.
  */
-
 public final class Constants {
 
-	
-    // -------------------------------------------------------------- Constants
-
-
     public static final String Package = "org.apache.catalina.connector";
 
     public static final int DEFAULT_CONNECTION_LINGER = -1;
@@ -38,6 +30,4 @@ public final class Constants {
 
     public static final int PROCESSOR_IDLE = 0;
     public static final int PROCESSOR_ACTIVE = 1;
-
-
 }

==================================================
CoyoteWriter.java
index 7a81f85ed0..708cd9d117 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -55,7 +55,6 @@ import org.apache.tomcat.util.net.SocketStatus;
  * @author Remy Maucherat
  * @version $Id$
  */
-
 public class CoyoteAdapter implements Adapter {
     
     private static final Log log = LogFactory.getLog(CoyoteAdapter.class);
@@ -355,7 +354,7 @@ public class CoyoteAdapter implements Adapter {
      * Service method.
      */
     public void service(org.apache.coyote.Request req, 
-    	                org.apache.coyote.Response res)
+                        org.apache.coyote.Response res)
         throws Exception {
 
         Request request = (Request) req.getNote(ADAPTER_NOTES);
@@ -500,7 +499,7 @@ public class CoyoteAdapter implements Adapter {
      */
     protected boolean postParseRequest(org.apache.coyote.Request req, 
                                        Request request,
-    		                       org.apache.coyote.Response res, 
+                                       org.apache.coyote.Response res, 
                                        Response response)
             throws Exception {
 

==================================================
InputBuffer.java
index 241467b500..fbf2d90e59 100644
--- a/java/org/apache/catalina/connector/CoyoteWriter.java
+++ b/java/org/apache/catalina/connector/CoyoteWriter.java
@@ -158,7 +158,7 @@ public class CoyoteWriter
 
     @Override
     public void write(char buf[]) {
-	write(buf, 0, buf.length);
+        write(buf, 0, buf.length);
     }
 
 

==================================================
OutputBuffer.java
index 8f07428b06..7f65f80843 100644
--- a/java/org/apache/catalina/connector/InputBuffer.java
+++ b/java/org/apache/catalina/connector/InputBuffer.java
@@ -177,7 +177,7 @@ public class InputBuffer extends Reader
      * @param coyoteRequest Associated Coyote request
      */
     public void setRequest(Request coyoteRequest) {
-	this.coyoteRequest = coyoteRequest;
+        this.coyoteRequest = coyoteRequest;
     }
 
 
@@ -273,7 +273,7 @@ public class InputBuffer extends Reader
      * @throws IOException An underlying IOException occurred
      */
     public int realReadBytes(byte cbuf[], int off, int len)
-	throws IOException {
+            throws IOException {
 
         if (closed)
             return -1;

==================================================
Request.java
index 0851163946..db94c30a70 100644
--- a/java/org/apache/catalina/connector/OutputBuffer.java
+++ b/java/org/apache/catalina/connector/OutputBuffer.java
@@ -170,7 +170,7 @@ public class OutputBuffer extends Writer
      * @param coyoteResponse Associated Coyote response
      */
     public void setResponse(Response coyoteResponse) {
-	this.coyoteResponse = coyoteResponse;
+        this.coyoteResponse = coyoteResponse;
     }
 
 
@@ -341,7 +341,7 @@ public class OutputBuffer extends Writer
      * @throws IOException An underlying IOException occurred
      */
     public void realWriteBytes(byte buf[], int off, int cnt)
-	throws IOException {
+            throws IOException {
 
         if (closed)
             return;

==================================================
FilterMap.java
index 7289235051..f618398008 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -1436,7 +1436,7 @@ public class Request
      * @param value The associated value
      */
     public void setAttribute(String name, Object value) {
-	
+
         // Name cannot be null
         if (name == null)
             throw new IllegalArgumentException

==================================================
Injectable.java
index 568395f3d8..c8022904d9 100644
--- a/java/org/apache/catalina/deploy/FilterMap.java
+++ b/java/org/apache/catalina/deploy/FilterMap.java
@@ -169,23 +169,23 @@ public class FilterMap implements Serializable {
     }
 
     public String[] getDispatcherNames() {
-    	ArrayList<String> result = new ArrayList<String>();
-    	if ((dispatcherMapping & FORWARD) > 0) {
-    		result.add(DispatcherType.FORWARD.name());
-    	}
-    	if ((dispatcherMapping & INCLUDE) > 0) {
-    		result.add(DispatcherType.INCLUDE.name());
-    	}
-    	if ((dispatcherMapping & REQUEST) > 0) {
-    		result.add(DispatcherType.REQUEST.name());
-    	}
-    	if ((dispatcherMapping & ERROR) > 0) {
-    		result.add(DispatcherType.ERROR.name());
-    	}
-    	if ((dispatcherMapping & ASYNC) > 0) {
-    		result.add(DispatcherType.ASYNC.name());
-    	}
-    	return result.toArray(new String[result.size()]);
+        ArrayList<String> result = new ArrayList<String>();
+        if ((dispatcherMapping & FORWARD) > 0) {
+            result.add(DispatcherType.FORWARD.name());
+        }
+        if ((dispatcherMapping & INCLUDE) > 0) {
+            result.add(DispatcherType.INCLUDE.name());
+        }
+        if ((dispatcherMapping & REQUEST) > 0) {
+            result.add(DispatcherType.REQUEST.name());
+        }
+        if ((dispatcherMapping & ERROR) > 0) {
+            result.add(DispatcherType.ERROR.name());
+        }
+        if ((dispatcherMapping & ASYNC) > 0) {
+            result.add(DispatcherType.ASYNC.name());
+        }
+        return result.toArray(new String[result.size()]);
     }
 
     // --------------------------------------------------------- Public Methods

==================================================
RequestDumperFilter.java
index 78d5146b8e..b620a3b223 100644
--- a/java/org/apache/catalina/deploy/Injectable.java
+++ b/java/org/apache/catalina/deploy/Injectable.java
@@ -23,7 +23,7 @@ package org.apache.catalina.deploy;
 import java.util.List;
 
 public interface Injectable {
-	public String getName();
+    public String getName();
     public void addInjectionTarget(String injectionTargetName, String jndiName);
     public List<InjectionTarget> getInjectionTargets();
 }

==================================================
WebdavFixFilter.java
index 23f15ec760..cf08fbf886 100644
--- a/java/org/apache/catalina/filters/RequestDumperFilter.java
+++ b/java/org/apache/catalina/filters/RequestDumperFilter.java
@@ -239,7 +239,7 @@ public class RequestDumperFilter implements Filter {
         doLog("END TIME          ", getTimestamp());
         doLog("==================",
                 "============================================");
-	}
+    }
 
     private void doLog(String attribute, String value) {
         StringBuilder sb = new StringBuilder(80);

==================================================
StandardClassLoader.java
index b1296714e2..be11454b50 100644
--- a/java/org/apache/catalina/filters/WebdavFixFilter.java
+++ b/java/org/apache/catalina/filters/WebdavFixFilter.java
@@ -78,51 +78,51 @@ public class WebdavFixFilter implements Filter {
         // NOOP
     }
 
-	public void destroy() {
-	    // NOOP
-	}
+    public void destroy() {
+        // NOOP
+    }
 
     /**
      * Check for the broken MS WebDAV client and if detected issue a re-direct
      * that hopefully will cause the non-broken client to be used.
      */
-	public void doFilter(ServletRequest request, ServletResponse response,
-			FilterChain chain) throws IOException, ServletException {
-	    if (!(request instanceof HttpServletRequest) ||
-	            !(response instanceof HttpServletResponse)) {
+    public void doFilter(ServletRequest request, ServletResponse response,
+            FilterChain chain) throws IOException, ServletException {
+        if (!(request instanceof HttpServletRequest) ||
+                !(response instanceof HttpServletResponse)) {
             chain.doFilter(request, response);
             return;
         }
-		HttpServletRequest httpRequest = ((HttpServletRequest) request);
-		HttpServletResponse httpResponse = ((HttpServletResponse) response);
-		String ua = httpRequest.getHeader("User-Agent");
-		
-		if (ua == null || ua.length() == 0 ||
-		        !ua.startsWith(UA_MINIDIR_START)) {
-	        // No UA or starts with non MS value
-		    // Hope everything just works...
-		    chain.doFilter(request, response);
-		} else if (ua.startsWith(UA_MINIDIR_5_1_2600)) {
-		    // XP 32-bit SP3 - needs redirect with explicit port
-		    httpResponse.sendRedirect(buildRedirect(httpRequest));
-		} else if (ua.startsWith(UA_MINIDIR_5_2_3790)) {
-		    // XP 64-bit SP2
-		    if (!"".equals(httpRequest.getContextPath())) {
-		        log(request,
-		                "XP-x64-SP2 clients only work with the root context");
-		    }
-		    // Namespace issue maybe
-		    // see http://greenbytes.de/tech/webdav/webdav-redirector-list.html
-		    log(request, "XP-x64-SP2 is known not to work with WebDAV Servlet");
-		    
-		    chain.doFilter(request, response);
-		} else {
-		    // Don't know which MS client it is - try the redirect with an
-		    // explicit port in the hope that it moves the client to a different
-		    // WebDAV implementation that works
-			httpResponse.sendRedirect(buildRedirect(httpRequest));
-		}		
-	}
+        HttpServletRequest httpRequest = ((HttpServletRequest) request);
+        HttpServletResponse httpResponse = ((HttpServletResponse) response);
+        String ua = httpRequest.getHeader("User-Agent");
+        
+        if (ua == null || ua.length() == 0 ||
+                !ua.startsWith(UA_MINIDIR_START)) {
+            // No UA or starts with non MS value
+            // Hope everything just works...
+            chain.doFilter(request, response);
+        } else if (ua.startsWith(UA_MINIDIR_5_1_2600)) {
+            // XP 32-bit SP3 - needs redirect with explicit port
+            httpResponse.sendRedirect(buildRedirect(httpRequest));
+        } else if (ua.startsWith(UA_MINIDIR_5_2_3790)) {
+            // XP 64-bit SP2
+            if (!"".equals(httpRequest.getContextPath())) {
+                log(request,
+                        "XP-x64-SP2 clients only work with the root context");
+            }
+            // Namespace issue maybe
+            // see http://greenbytes.de/tech/webdav/webdav-redirector-list.html
+            log(request, "XP-x64-SP2 is known not to work with WebDAV Servlet");
+            
+            chain.doFilter(request, response);
+        } else {
+            // Don't know which MS client it is - try the redirect with an
+            // explicit port in the hope that it moves the client to a different
+            // WebDAV implementation that works
+            httpResponse.sendRedirect(buildRedirect(httpRequest));
+        }        
+    }
 
     private String buildRedirect(HttpServletRequest request) {
         StringBuilder location =

==================================================
MBeanFactory.java
index 0e63346c2e..a2261656e1 100644
--- a/java/org/apache/catalina/loader/StandardClassLoader.java
+++ b/java/org/apache/catalina/loader/StandardClassLoader.java
@@ -34,7 +34,7 @@ public class StandardClassLoader
     extends URLClassLoader
     implements StandardClassLoaderMBean {
 
-	public StandardClassLoader(URL repositories[]) {
+    public StandardClassLoader(URL repositories[]) {
         super(repositories);
     }
 

==================================================
URLEncoder.java
index 46ae950ae7..76998ff269 100644
--- a/java/org/apache/catalina/mbeans/MBeanFactory.java
+++ b/java/org/apache/catalina/mbeans/MBeanFactory.java
@@ -313,8 +313,8 @@ public class MBeanFactory {
      * @exception Exception if an MBean cannot be created or registered
      */
     public String createHttpConnector(String parent, String address, int port)
-        throws Exception {
-	return createConnector(parent, address, port, false, false);
+            throws Exception {
+        return createConnector(parent, address, port, false, false);
     }
 
     /**
@@ -376,7 +376,7 @@ public class MBeanFactory {
      * @exception Exception if an MBean cannot be created or registered
      */
     public String createJDBCRealm(String parent, String driverName, 
-    	String connectionName, String connectionPassword, String connectionURL)
+        String connectionName, String connectionPassword, String connectionURL)
         throws Exception {
 
         // Create a new JDBCRealm instance
@@ -660,7 +660,7 @@ public class MBeanFactory {
         host.setDeployOnStartup(deployOnStartup);
         host.setDeployXML(deployXML);
         host.setUnpackWARs(unpackWARs);
-	
+    
         // add HostConfig for active reloading
         HostConfig hostConfig = new HostConfig();
         host.addLifecycleListener(hostConfig);

==================================================
