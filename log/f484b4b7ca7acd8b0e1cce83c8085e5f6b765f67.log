f484b4b7ca7acd8b0e1cce83c8085e5f6b765f67
==================================================
Don't need the Vistor and associated support
==================================================
Mark Emlyn
==================================================
Fri Dec 4 18:56:38 2009 +0000
==================================================
EmptyVisitor.java
Don't need the Vistor and associated support

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@887319 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AALOAD.java
deleted file mode 100644
index 5a1d861053..0000000000
--- a/java/org/apache/tomcat/util/bcel/classfile/EmptyVisitor.java
+++ /dev/null
@@ -1,191 +0,0 @@
-/*
- * Copyright  2000-2009 The Apache Software Foundation
- *
- *  Licensed under the Apache License, Version 2.0 (the "License"); 
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License. 
- *
- */
-package org.apache.tomcat.util.bcel.classfile;
-
-/**
- * Visitor with empty method bodies, can be extended and used in conjunction
- * with the DescendingVisitor class, e.g. By courtesy of David Spencer.
- * 
- * @see DescendingVisitor
- * @version $Id$
- */
-public class EmptyVisitor implements Visitor
-{
-	protected EmptyVisitor()
-	{
-	}
-
-	public void visitAnnotation(Annotations obj)
-	{
-	}
-
-	public void visitParameterAnnotation(ParameterAnnotations obj)
-	{
-	}
-
-	public void visitAnnotationEntry(AnnotationEntry obj)
-	{
-	}
-
-	public void visitAnnotationDefault(AnnotationDefault obj)
-	{
-	}
-
-	public void visitCode(Code obj)
-	{
-	}
-
-	public void visitCodeException(CodeException obj)
-	{
-	}
-
-	public void visitConstantClass(ConstantClass obj)
-	{
-	}
-
-	public void visitConstantDouble(ConstantDouble obj)
-	{
-	}
-
-	public void visitConstantFieldref(ConstantFieldref obj)
-	{
-	}
-
-	public void visitConstantFloat(ConstantFloat obj)
-	{
-	}
-
-	public void visitConstantInteger(ConstantInteger obj)
-	{
-	}
-
-	public void visitConstantInterfaceMethodref(ConstantInterfaceMethodref obj)
-	{
-	}
-
-	public void visitConstantLong(ConstantLong obj)
-	{
-	}
-
-	public void visitConstantMethodref(ConstantMethodref obj)
-	{
-	}
-
-	public void visitConstantNameAndType(ConstantNameAndType obj)
-	{
-	}
-
-	public void visitConstantPool(ConstantPool obj)
-	{
-	}
-
-	public void visitConstantString(ConstantString obj)
-	{
-	}
-
-	public void visitConstantUtf8(ConstantUtf8 obj)
-	{
-	}
-
-	public void visitConstantValue(ConstantValue obj)
-	{
-	}
-
-	public void visitDeprecated(Deprecated obj)
-	{
-	}
-
-	public void visitExceptionTable(ExceptionTable obj)
-	{
-	}
-
-	public void visitField(Field obj)
-	{
-	}
-
-	public void visitInnerClass(InnerClass obj)
-	{
-	}
-
-	public void visitInnerClasses(InnerClasses obj)
-	{
-	}
-
-	public void visitJavaClass(JavaClass obj)
-	{
-	}
-
-	public void visitLineNumber(LineNumber obj)
-	{
-	}
-
-	public void visitLineNumberTable(LineNumberTable obj)
-	{
-	}
-
-	public void visitLocalVariable(LocalVariable obj)
-	{
-	}
-
-	public void visitLocalVariableTable(LocalVariableTable obj)
-	{
-	}
-
-	public void visitMethod(Method obj)
-	{
-	}
-
-	public void visitSignature(Signature obj)
-	{
-	}
-
-	public void visitSourceFile(SourceFile obj)
-	{
-	}
-
-	public void visitSynthetic(Synthetic obj)
-	{
-	}
-
-	public void visitUnknown(Unknown obj)
-	{
-	}
-
-	public void visitStackMap(StackMap obj)
-	{
-	}
-
-	public void visitStackMapEntry(StackMapEntry obj)
-	{
-	}
-
-	public void visitStackMapTable(StackMapTable obj)
-	{
-	}
-
-	public void visitStackMapTableEntry(StackMapTableEntry obj)
-	{
-	}
-
-	public void visitEnclosingMethod(EnclosingMethod obj)
-	{
-	}
-
-	public void visitLocalVariableTypeTable(LocalVariableTypeTable obj)
-	{
-	}
-}

==================================================
AASTORE.java
index a5a6e845a1..d5910c0396 100644
--- a/java/org/apache/tomcat/util/bcel/generic/AALOAD.java
+++ b/java/org/apache/tomcat/util/bcel/generic/AALOAD.java
@@ -30,21 +30,4 @@ public class AALOAD extends ArrayInstruction implements StackProducer {
     public AALOAD() {
         super(org.apache.tomcat.util.bcel.Constants.AALOAD);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackProducer(this);
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitArrayInstruction(this);
-        v.visitAALOAD(this);
-    }
 }

==================================================
ACONST_NULL.java
index 71534ff4de..45b9fca2f9 100644
--- a/java/org/apache/tomcat/util/bcel/generic/AASTORE.java
+++ b/java/org/apache/tomcat/util/bcel/generic/AASTORE.java
@@ -30,21 +30,4 @@ public class AASTORE extends ArrayInstruction implements StackConsumer {
     public AASTORE() {
         super(org.apache.tomcat.util.bcel.Constants.AASTORE);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitArrayInstruction(this);
-        v.visitAASTORE(this);
-    }
 }

==================================================
ALOAD.java
index 6b68d0ea26..ac8ece469a 100644
--- a/java/org/apache/tomcat/util/bcel/generic/ACONST_NULL.java
+++ b/java/org/apache/tomcat/util/bcel/generic/ACONST_NULL.java
@@ -38,20 +38,4 @@ public class ACONST_NULL extends Instruction implements PushInstruction, TypedIn
     public Type getType( ConstantPoolGen cp ) {
         return Type.NULL;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackProducer(this);
-        v.visitPushInstruction(this);
-        v.visitTypedInstruction(this);
-        v.visitACONST_NULL(this);
-    }
 }

==================================================
ANEWARRAY.java
index 8103368975..0bdba03718 100644
--- a/java/org/apache/tomcat/util/bcel/generic/ALOAD.java
+++ b/java/org/apache/tomcat/util/bcel/generic/ALOAD.java
@@ -40,18 +40,4 @@ public class ALOAD extends LoadInstruction {
     public ALOAD(int n) {
         super(org.apache.tomcat.util.bcel.Constants.ALOAD, org.apache.tomcat.util.bcel.Constants.ALOAD_0, n);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        super.accept(v);
-        v.visitALOAD(this);
-    }
 }

==================================================
ARETURN.java
index a35927703c..a6c46a8147 100644
--- a/java/org/apache/tomcat/util/bcel/generic/ANEWARRAY.java
+++ b/java/org/apache/tomcat/util/bcel/generic/ANEWARRAY.java
@@ -50,25 +50,6 @@ public class ANEWARRAY extends CPInstruction implements LoadClass, AllocationIns
     }
 
 
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitLoadClass(this);
-        v.visitAllocationInstruction(this);
-        v.visitExceptionThrower(this);
-        v.visitStackProducer(this);
-        v.visitTypedInstruction(this);
-        v.visitCPInstruction(this);
-        v.visitANEWARRAY(this);
-    }
-
-
     public ObjectType getLoadClassType( ConstantPoolGen cpg ) {
         Type t = getType(cpg);
         if (t instanceof ArrayType) {

==================================================
ARRAYLENGTH.java
index b31ca25f61..e8c6597233 100644
--- a/java/org/apache/tomcat/util/bcel/generic/ARETURN.java
+++ b/java/org/apache/tomcat/util/bcel/generic/ARETURN.java
@@ -31,21 +31,4 @@ public class ARETURN extends ReturnInstruction {
     public ARETURN() {
         super(org.apache.tomcat.util.bcel.Constants.ARETURN);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitStackConsumer(this);
-        v.visitReturnInstruction(this);
-        v.visitARETURN(this);
-    }
 }

==================================================
ASTORE.java
index 11592ff4e6..fb2840c507 100644
--- a/java/org/apache/tomcat/util/bcel/generic/ARRAYLENGTH.java
+++ b/java/org/apache/tomcat/util/bcel/generic/ARRAYLENGTH.java
@@ -39,19 +39,4 @@ public class ARRAYLENGTH extends Instruction implements ExceptionThrower, StackP
             org.apache.tomcat.util.bcel.ExceptionConstants.NULL_POINTER_EXCEPTION
         };
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitExceptionThrower(this);
-        v.visitStackProducer(this);
-        v.visitARRAYLENGTH(this);
-    }
 }

==================================================
ATHROW.java
index 43582b754d..5b6ec5bdbb 100644
--- a/java/org/apache/tomcat/util/bcel/generic/ASTORE.java
+++ b/java/org/apache/tomcat/util/bcel/generic/ASTORE.java
@@ -40,18 +40,4 @@ public class ASTORE extends StoreInstruction {
     public ASTORE(int n) {
         super(org.apache.tomcat.util.bcel.Constants.ASTORE, org.apache.tomcat.util.bcel.Constants.ASTORE_0, n);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        super.accept(v);
-        v.visitASTORE(this);
-    }
 }

==================================================
BALOAD.java
index e187d5b033..daff3dc4c8 100644
--- a/java/org/apache/tomcat/util/bcel/generic/ATHROW.java
+++ b/java/org/apache/tomcat/util/bcel/generic/ATHROW.java
@@ -40,19 +40,4 @@ public class ATHROW extends Instruction implements UnconditionalBranch, Exceptio
             org.apache.tomcat.util.bcel.ExceptionConstants.THROWABLE
         };
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitUnconditionalBranch(this);
-        v.visitExceptionThrower(this);
-        v.visitATHROW(this);
-    }
 }

==================================================
BASTORE.java
index 38d9c7b1bb..5351d8f25b 100644
--- a/java/org/apache/tomcat/util/bcel/generic/BALOAD.java
+++ b/java/org/apache/tomcat/util/bcel/generic/BALOAD.java
@@ -30,21 +30,4 @@ public class BALOAD extends ArrayInstruction implements StackProducer {
     public BALOAD() {
         super(org.apache.tomcat.util.bcel.Constants.BALOAD);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackProducer(this);
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitArrayInstruction(this);
-        v.visitBALOAD(this);
-    }
 }

==================================================
BIPUSH.java
index 09726a447b..9b92380461 100644
--- a/java/org/apache/tomcat/util/bcel/generic/BASTORE.java
+++ b/java/org/apache/tomcat/util/bcel/generic/BASTORE.java
@@ -30,21 +30,4 @@ public class BASTORE extends ArrayInstruction implements StackConsumer {
     public BASTORE() {
         super(org.apache.tomcat.util.bcel.Constants.BASTORE);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitArrayInstruction(this);
-        v.visitBASTORE(this);
-    }
 }

==================================================
BREAKPOINT.java
index a9474a9b3f..dce4dcddb6 100644
--- a/java/org/apache/tomcat/util/bcel/generic/BIPUSH.java
+++ b/java/org/apache/tomcat/util/bcel/generic/BIPUSH.java
@@ -85,21 +85,4 @@ public class BIPUSH extends Instruction implements ConstantPushInstruction {
     public Type getType( ConstantPoolGen cp ) {
         return Type.BYTE;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitPushInstruction(this);
-        v.visitStackProducer(this);
-        v.visitTypedInstruction(this);
-        v.visitConstantPushInstruction(this);
-        v.visitBIPUSH(this);
-    }
 }

==================================================
CALOAD.java
index f3454bf299..5dcaed8b09 100644
--- a/java/org/apache/tomcat/util/bcel/generic/BREAKPOINT.java
+++ b/java/org/apache/tomcat/util/bcel/generic/BREAKPOINT.java
@@ -27,17 +27,4 @@ public class BREAKPOINT extends Instruction {
     public BREAKPOINT() {
         super(org.apache.tomcat.util.bcel.Constants.BREAKPOINT, (short) 1);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitBREAKPOINT(this);
-    }
 }

==================================================
CASTORE.java
index e777965b9c..1152bea594 100644
--- a/java/org/apache/tomcat/util/bcel/generic/CALOAD.java
+++ b/java/org/apache/tomcat/util/bcel/generic/CALOAD.java
@@ -30,21 +30,4 @@ public class CALOAD extends ArrayInstruction implements StackProducer {
     public CALOAD() {
         super(org.apache.tomcat.util.bcel.Constants.CALOAD);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackProducer(this);
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitArrayInstruction(this);
-        v.visitCALOAD(this);
-    }
 }

==================================================
CHECKCAST.java
index 060f35bbcd..56b82e02c3 100644
--- a/java/org/apache/tomcat/util/bcel/generic/CASTORE.java
+++ b/java/org/apache/tomcat/util/bcel/generic/CASTORE.java
@@ -30,21 +30,4 @@ public class CASTORE extends ArrayInstruction implements StackConsumer {
     public CASTORE() {
         super(org.apache.tomcat.util.bcel.Constants.CASTORE);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitArrayInstruction(this);
-        v.visitCASTORE(this);
-    }
 }

==================================================
D2F.java
index 181a3c020e..633c980305 100644
--- a/java/org/apache/tomcat/util/bcel/generic/CHECKCAST.java
+++ b/java/org/apache/tomcat/util/bcel/generic/CHECKCAST.java
@@ -62,23 +62,4 @@ public class CHECKCAST extends CPInstruction implements LoadClass, ExceptionThro
         }
         return (t instanceof ObjectType) ? (ObjectType) t : null;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitLoadClass(this);
-        v.visitExceptionThrower(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitTypedInstruction(this);
-        v.visitCPInstruction(this);
-        v.visitCHECKCAST(this);
-    }
 }

==================================================
D2I.java
index b3fc3553ed..05ab5d0130 100644
--- a/java/org/apache/tomcat/util/bcel/generic/D2F.java
+++ b/java/org/apache/tomcat/util/bcel/generic/D2F.java
@@ -30,21 +30,4 @@ public class D2F extends ConversionInstruction {
     public D2F() {
         super(org.apache.tomcat.util.bcel.Constants.D2F);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitConversionInstruction(this);
-        v.visitD2F(this);
-    }
 }

==================================================
D2L.java
index d78ed379d5..e02a82a27c 100644
--- a/java/org/apache/tomcat/util/bcel/generic/D2I.java
+++ b/java/org/apache/tomcat/util/bcel/generic/D2I.java
@@ -30,21 +30,4 @@ public class D2I extends ConversionInstruction {
     public D2I() {
         super(org.apache.tomcat.util.bcel.Constants.D2I);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitConversionInstruction(this);
-        v.visitD2I(this);
-    }
 }

==================================================
DADD.java
index 6b4c8c170f..74c226add6 100644
--- a/java/org/apache/tomcat/util/bcel/generic/D2L.java
+++ b/java/org/apache/tomcat/util/bcel/generic/D2L.java
@@ -30,21 +30,4 @@ public class D2L extends ConversionInstruction {
     public D2L() {
         super(org.apache.tomcat.util.bcel.Constants.D2L);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitConversionInstruction(this);
-        v.visitD2L(this);
-    }
 }

==================================================
DALOAD.java
index 0edba761e3..cc9d191da5 100644
--- a/java/org/apache/tomcat/util/bcel/generic/DADD.java
+++ b/java/org/apache/tomcat/util/bcel/generic/DADD.java
@@ -31,21 +31,4 @@ public class DADD extends ArithmeticInstruction {
     public DADD() {
         super(org.apache.tomcat.util.bcel.Constants.DADD);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitDADD(this);
-    }
 }

==================================================
DASTORE.java
index 1c3154117f..61f47f6099 100644
--- a/java/org/apache/tomcat/util/bcel/generic/DALOAD.java
+++ b/java/org/apache/tomcat/util/bcel/generic/DALOAD.java
@@ -30,21 +30,4 @@ public class DALOAD extends ArrayInstruction implements StackProducer {
     public DALOAD() {
         super(org.apache.tomcat.util.bcel.Constants.DALOAD);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackProducer(this);
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitArrayInstruction(this);
-        v.visitDALOAD(this);
-    }
 }

==================================================
DCMPG.java
index 0bacc71426..0e28a7d0cd 100644
--- a/java/org/apache/tomcat/util/bcel/generic/DASTORE.java
+++ b/java/org/apache/tomcat/util/bcel/generic/DASTORE.java
@@ -30,21 +30,4 @@ public class DASTORE extends ArrayInstruction implements StackConsumer {
     public DASTORE() {
         super(org.apache.tomcat.util.bcel.Constants.DASTORE);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitArrayInstruction(this);
-        v.visitDASTORE(this);
-    }
 }

==================================================
DCMPL.java
index 0e9aca519e..2463362173 100644
--- a/java/org/apache/tomcat/util/bcel/generic/DCMPG.java
+++ b/java/org/apache/tomcat/util/bcel/generic/DCMPG.java
@@ -36,20 +36,4 @@ public class DCMPG extends Instruction implements TypedInstruction, StackProduce
     public Type getType( ConstantPoolGen cp ) {
         return Type.DOUBLE;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitDCMPG(this);
-    }
 }

==================================================
DCONST.java
index 4ce1572baf..2d33d4c862 100644
--- a/java/org/apache/tomcat/util/bcel/generic/DCMPL.java
+++ b/java/org/apache/tomcat/util/bcel/generic/DCMPL.java
@@ -36,20 +36,4 @@ public class DCMPL extends Instruction implements TypedInstruction, StackProduce
     public Type getType( ConstantPoolGen cp ) {
         return Type.DOUBLE;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitDCMPL(this);
-    }
 }

==================================================
DDIV.java
index 00fc1f996f..26ac18f86d 100644
--- a/java/org/apache/tomcat/util/bcel/generic/DCONST.java
+++ b/java/org/apache/tomcat/util/bcel/generic/DCONST.java
@@ -60,21 +60,4 @@ public class DCONST extends Instruction implements ConstantPushInstruction, Type
     public Type getType( ConstantPoolGen cp ) {
         return Type.DOUBLE;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitPushInstruction(this);
-        v.visitStackProducer(this);
-        v.visitTypedInstruction(this);
-        v.visitConstantPushInstruction(this);
-        v.visitDCONST(this);
-    }
 }

==================================================
DLOAD.java
index 72df39089c..694602b396 100644
--- a/java/org/apache/tomcat/util/bcel/generic/DDIV.java
+++ b/java/org/apache/tomcat/util/bcel/generic/DDIV.java
@@ -31,21 +31,4 @@ public class DDIV extends ArithmeticInstruction {
     public DDIV() {
         super(org.apache.tomcat.util.bcel.Constants.DDIV);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitDDIV(this);
-    }
 }

==================================================
DMUL.java
index 649f13cc8c..21c3d3aaeb 100644
--- a/java/org/apache/tomcat/util/bcel/generic/DLOAD.java
+++ b/java/org/apache/tomcat/util/bcel/generic/DLOAD.java
@@ -40,18 +40,4 @@ public class DLOAD extends LoadInstruction {
     public DLOAD(int n) {
         super(org.apache.tomcat.util.bcel.Constants.DLOAD, org.apache.tomcat.util.bcel.Constants.DLOAD_0, n);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        super.accept(v);
-        v.visitDLOAD(this);
-    }
 }

==================================================
DNEG.java
index 99d78b792c..f22523e591 100644
--- a/java/org/apache/tomcat/util/bcel/generic/DMUL.java
+++ b/java/org/apache/tomcat/util/bcel/generic/DMUL.java
@@ -31,21 +31,4 @@ public class DMUL extends ArithmeticInstruction {
     public DMUL() {
         super(org.apache.tomcat.util.bcel.Constants.DMUL);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitDMUL(this);
-    }
 }

==================================================
DREM.java
index 51da4998ce..eb59ac1570 100644
--- a/java/org/apache/tomcat/util/bcel/generic/DNEG.java
+++ b/java/org/apache/tomcat/util/bcel/generic/DNEG.java
@@ -28,21 +28,4 @@ public class DNEG extends ArithmeticInstruction {
     public DNEG() {
         super(org.apache.tomcat.util.bcel.Constants.DNEG);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitDNEG(this);
-    }
 }

==================================================
DRETURN.java
index a6e03c08fd..8b36690fc0 100644
--- a/java/org/apache/tomcat/util/bcel/generic/DREM.java
+++ b/java/org/apache/tomcat/util/bcel/generic/DREM.java
@@ -31,21 +31,4 @@ public class DREM extends ArithmeticInstruction {
     public DREM() {
         super(org.apache.tomcat.util.bcel.Constants.DREM);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitDREM(this);
-    }
 }

==================================================
DSTORE.java
index 23b12bac31..b78fe8311a 100644
--- a/java/org/apache/tomcat/util/bcel/generic/DRETURN.java
+++ b/java/org/apache/tomcat/util/bcel/generic/DRETURN.java
@@ -30,21 +30,4 @@ public class DRETURN extends ReturnInstruction {
     public DRETURN() {
         super(org.apache.tomcat.util.bcel.Constants.DRETURN);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitStackConsumer(this);
-        v.visitReturnInstruction(this);
-        v.visitDRETURN(this);
-    }
 }

==================================================
DSUB.java
index f24f51c06c..acf573ad20 100644
--- a/java/org/apache/tomcat/util/bcel/generic/DSTORE.java
+++ b/java/org/apache/tomcat/util/bcel/generic/DSTORE.java
@@ -40,18 +40,4 @@ public class DSTORE extends StoreInstruction {
     public DSTORE(int n) {
         super(org.apache.tomcat.util.bcel.Constants.DSTORE, org.apache.tomcat.util.bcel.Constants.DSTORE_0, n);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        super.accept(v);
-        v.visitDSTORE(this);
-    }
 }

==================================================
DUP.java
index 6ae95df2ef..f020f3df15 100644
--- a/java/org/apache/tomcat/util/bcel/generic/DSUB.java
+++ b/java/org/apache/tomcat/util/bcel/generic/DSUB.java
@@ -31,21 +31,4 @@ public class DSUB extends ArithmeticInstruction {
     public DSUB() {
         super(org.apache.tomcat.util.bcel.Constants.DSUB);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitDSUB(this);
-    }
 }

==================================================
DUP2.java
index 44bbfc8042..10967bb1b8 100644
--- a/java/org/apache/tomcat/util/bcel/generic/DUP.java
+++ b/java/org/apache/tomcat/util/bcel/generic/DUP.java
@@ -28,20 +28,4 @@ public class DUP extends StackInstruction implements PushInstruction {
     public DUP() {
         super(org.apache.tomcat.util.bcel.Constants.DUP);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackProducer(this);
-        v.visitPushInstruction(this);
-        v.visitStackInstruction(this);
-        v.visitDUP(this);
-    }
 }

==================================================
DUP2_X1.java
index 55cc50b6d5..16090aac88 100644
--- a/java/org/apache/tomcat/util/bcel/generic/DUP2.java
+++ b/java/org/apache/tomcat/util/bcel/generic/DUP2.java
@@ -28,20 +28,4 @@ public class DUP2 extends StackInstruction implements PushInstruction {
     public DUP2() {
         super(org.apache.tomcat.util.bcel.Constants.DUP2);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackProducer(this);
-        v.visitPushInstruction(this);
-        v.visitStackInstruction(this);
-        v.visitDUP2(this);
-    }
 }

==================================================
DUP2_X2.java
index 70fb1b9563..6309cad8cf 100644
--- a/java/org/apache/tomcat/util/bcel/generic/DUP2_X1.java
+++ b/java/org/apache/tomcat/util/bcel/generic/DUP2_X1.java
@@ -28,18 +28,4 @@ public class DUP2_X1 extends StackInstruction {
     public DUP2_X1() {
         super(org.apache.tomcat.util.bcel.Constants.DUP2_X1);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackInstruction(this);
-        v.visitDUP2_X1(this);
-    }
 }

==================================================
DUP_X1.java
index 13482682fa..c528e08329 100644
--- a/java/org/apache/tomcat/util/bcel/generic/DUP2_X2.java
+++ b/java/org/apache/tomcat/util/bcel/generic/DUP2_X2.java
@@ -28,18 +28,4 @@ public class DUP2_X2 extends StackInstruction {
     public DUP2_X2() {
         super(org.apache.tomcat.util.bcel.Constants.DUP2_X2);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackInstruction(this);
-        v.visitDUP2_X2(this);
-    }
 }

==================================================
DUP_X2.java
index f0dbcb3424..c33f725a56 100644
--- a/java/org/apache/tomcat/util/bcel/generic/DUP_X1.java
+++ b/java/org/apache/tomcat/util/bcel/generic/DUP_X1.java
@@ -28,18 +28,4 @@ public class DUP_X1 extends StackInstruction {
     public DUP_X1() {
         super(org.apache.tomcat.util.bcel.Constants.DUP_X1);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackInstruction(this);
-        v.visitDUP_X1(this);
-    }
 }

==================================================
EmptyVisitor.java
index 4ff230cc3c..255ea26159 100644
--- a/java/org/apache/tomcat/util/bcel/generic/DUP_X2.java
+++ b/java/org/apache/tomcat/util/bcel/generic/DUP_X2.java
@@ -28,18 +28,4 @@ public class DUP_X2 extends StackInstruction {
     public DUP_X2() {
         super(org.apache.tomcat.util.bcel.Constants.DUP_X2);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackInstruction(this);
-        v.visitDUP_X2(this);
-    }
 }

==================================================
F2D.java
deleted file mode 100644
index 52507d5bcf..0000000000
--- a/java/org/apache/tomcat/util/bcel/generic/EmptyVisitor.java
+++ /dev/null
@@ -1,745 +0,0 @@
-/*
- * Copyright  2000-2009 The Apache Software Foundation
- *
- *  Licensed under the Apache License, Version 2.0 (the "License"); 
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License. 
- *
- */
-package org.apache.tomcat.util.bcel.generic;
-
-/**
- * Supplies empty method bodies to be overridden by subclasses.
- *
- * @version $Id$
- * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
- */
-public abstract class EmptyVisitor implements Visitor {
-
-    public void visitStackInstruction( StackInstruction obj ) {
-    }
-
-
-    public void visitLocalVariableInstruction( LocalVariableInstruction obj ) {
-    }
-
-
-    public void visitBranchInstruction( BranchInstruction obj ) {
-    }
-
-
-    public void visitLoadClass( LoadClass obj ) {
-    }
-
-
-    public void visitFieldInstruction( FieldInstruction obj ) {
-    }
-
-
-    public void visitIfInstruction( IfInstruction obj ) {
-    }
-
-
-    public void visitConversionInstruction( ConversionInstruction obj ) {
-    }
-
-
-    public void visitPopInstruction( PopInstruction obj ) {
-    }
-
-
-    public void visitJsrInstruction( JsrInstruction obj ) {
-    }
-
-
-    public void visitGotoInstruction( GotoInstruction obj ) {
-    }
-
-
-    public void visitStoreInstruction( StoreInstruction obj ) {
-    }
-
-
-    public void visitTypedInstruction( TypedInstruction obj ) {
-    }
-
-
-    public void visitSelect( Select obj ) {
-    }
-
-
-    public void visitUnconditionalBranch( UnconditionalBranch obj ) {
-    }
-
-
-    public void visitPushInstruction( PushInstruction obj ) {
-    }
-
-
-    public void visitArithmeticInstruction( ArithmeticInstruction obj ) {
-    }
-
-
-    public void visitCPInstruction( CPInstruction obj ) {
-    }
-
-
-    public void visitInvokeInstruction( InvokeInstruction obj ) {
-    }
-
-
-    public void visitArrayInstruction( ArrayInstruction obj ) {
-    }
-
-
-    public void visitAllocationInstruction( AllocationInstruction obj ) {
-    }
-
-
-    public void visitReturnInstruction( ReturnInstruction obj ) {
-    }
-
-
-    public void visitFieldOrMethod( FieldOrMethod obj ) {
-    }
-
-
-    public void visitConstantPushInstruction( ConstantPushInstruction obj ) {
-    }
-
-
-    public void visitExceptionThrower( ExceptionThrower obj ) {
-    }
-
-
-    public void visitLoadInstruction( LoadInstruction obj ) {
-    }
-
-
-    public void visitVariableLengthInstruction( VariableLengthInstruction obj ) {
-    }
-
-
-    public void visitStackProducer( StackProducer obj ) {
-    }
-
-
-    public void visitStackConsumer( StackConsumer obj ) {
-    }
-
-
-    public void visitACONST_NULL( ACONST_NULL obj ) {
-    }
-
-
-    public void visitGETSTATIC( GETSTATIC obj ) {
-    }
-
-
-    public void visitIF_ICMPLT( IF_ICMPLT obj ) {
-    }
-
-
-    public void visitMONITOREXIT( MONITOREXIT obj ) {
-    }
-
-
-    public void visitIFLT( IFLT obj ) {
-    }
-
-
-    public void visitLSTORE( LSTORE obj ) {
-    }
-
-
-    public void visitPOP2( POP2 obj ) {
-    }
-
-
-    public void visitBASTORE( BASTORE obj ) {
-    }
-
-
-    public void visitISTORE( ISTORE obj ) {
-    }
-
-
-    public void visitCHECKCAST( CHECKCAST obj ) {
-    }
-
-
-    public void visitFCMPG( FCMPG obj ) {
-    }
-
-
-    public void visitI2F( I2F obj ) {
-    }
-
-
-    public void visitATHROW( ATHROW obj ) {
-    }
-
-
-    public void visitDCMPL( DCMPL obj ) {
-    }
-
-
-    public void visitARRAYLENGTH( ARRAYLENGTH obj ) {
-    }
-
-
-    public void visitDUP( DUP obj ) {
-    }
-
-
-    public void visitINVOKESTATIC( INVOKESTATIC obj ) {
-    }
-
-
-    public void visitLCONST( LCONST obj ) {
-    }
-
-
-    public void visitDREM( DREM obj ) {
-    }
-
-
-    public void visitIFGE( IFGE obj ) {
-    }
-
-
-    public void visitCALOAD( CALOAD obj ) {
-    }
-
-
-    public void visitLASTORE( LASTORE obj ) {
-    }
-
-
-    public void visitI2D( I2D obj ) {
-    }
-
-
-    public void visitDADD( DADD obj ) {
-    }
-
-
-    public void visitINVOKESPECIAL( INVOKESPECIAL obj ) {
-    }
-
-
-    public void visitIAND( IAND obj ) {
-    }
-
-
-    public void visitPUTFIELD( PUTFIELD obj ) {
-    }
-
-
-    public void visitILOAD( ILOAD obj ) {
-    }
-
-
-    public void visitDLOAD( DLOAD obj ) {
-    }
-
-
-    public void visitDCONST( DCONST obj ) {
-    }
-
-
-    public void visitNEW( NEW obj ) {
-    }
-
-
-    public void visitIFNULL( IFNULL obj ) {
-    }
-
-
-    public void visitLSUB( LSUB obj ) {
-    }
-
-
-    public void visitL2I( L2I obj ) {
-    }
-
-
-    public void visitISHR( ISHR obj ) {
-    }
-
-
-    public void visitTABLESWITCH( TABLESWITCH obj ) {
-    }
-
-
-    public void visitIINC( IINC obj ) {
-    }
-
-
-    public void visitDRETURN( DRETURN obj ) {
-    }
-
-
-    public void visitFSTORE( FSTORE obj ) {
-    }
-
-
-    public void visitDASTORE( DASTORE obj ) {
-    }
-
-
-    public void visitIALOAD( IALOAD obj ) {
-    }
-
-
-    public void visitDDIV( DDIV obj ) {
-    }
-
-
-    public void visitIF_ICMPGE( IF_ICMPGE obj ) {
-    }
-
-
-    public void visitLAND( LAND obj ) {
-    }
-
-
-    public void visitIDIV( IDIV obj ) {
-    }
-
-
-    public void visitLOR( LOR obj ) {
-    }
-
-
-    public void visitCASTORE( CASTORE obj ) {
-    }
-
-
-    public void visitFREM( FREM obj ) {
-    }
-
-
-    public void visitLDC( LDC obj ) {
-    }
-
-
-    public void visitBIPUSH( BIPUSH obj ) {
-    }
-
-
-    public void visitDSTORE( DSTORE obj ) {
-    }
-
-
-    public void visitF2L( F2L obj ) {
-    }
-
-
-    public void visitFMUL( FMUL obj ) {
-    }
-
-
-    public void visitLLOAD( LLOAD obj ) {
-    }
-
-
-    public void visitJSR( JSR obj ) {
-    }
-
-
-    public void visitFSUB( FSUB obj ) {
-    }
-
-
-    public void visitSASTORE( SASTORE obj ) {
-    }
-
-
-    public void visitALOAD( ALOAD obj ) {
-    }
-
-
-    public void visitDUP2_X2( DUP2_X2 obj ) {
-    }
-
-
-    public void visitRETURN( RETURN obj ) {
-    }
-
-
-    public void visitDALOAD( DALOAD obj ) {
-    }
-
-
-    public void visitSIPUSH( SIPUSH obj ) {
-    }
-
-
-    public void visitDSUB( DSUB obj ) {
-    }
-
-
-    public void visitL2F( L2F obj ) {
-    }
-
-
-    public void visitIF_ICMPGT( IF_ICMPGT obj ) {
-    }
-
-
-    public void visitF2D( F2D obj ) {
-    }
-
-
-    public void visitI2L( I2L obj ) {
-    }
-
-
-    public void visitIF_ACMPNE( IF_ACMPNE obj ) {
-    }
-
-
-    public void visitPOP( POP obj ) {
-    }
-
-
-    public void visitI2S( I2S obj ) {
-    }
-
-
-    public void visitIFEQ( IFEQ obj ) {
-    }
-
-
-    public void visitSWAP( SWAP obj ) {
-    }
-
-
-    public void visitIOR( IOR obj ) {
-    }
-
-
-    public void visitIREM( IREM obj ) {
-    }
-
-
-    public void visitIASTORE( IASTORE obj ) {
-    }
-
-
-    public void visitNEWARRAY( NEWARRAY obj ) {
-    }
-
-
-    public void visitINVOKEINTERFACE( INVOKEINTERFACE obj ) {
-    }
-
-
-    public void visitINEG( INEG obj ) {
-    }
-
-
-    public void visitLCMP( LCMP obj ) {
-    }
-
-
-    public void visitJSR_W( JSR_W obj ) {
-    }
-
-
-    public void visitMULTIANEWARRAY( MULTIANEWARRAY obj ) {
-    }
-
-
-    public void visitDUP_X2( DUP_X2 obj ) {
-    }
-
-
-    public void visitSALOAD( SALOAD obj ) {
-    }
-
-
-    public void visitIFNONNULL( IFNONNULL obj ) {
-    }
-
-
-    public void visitDMUL( DMUL obj ) {
-    }
-
-
-    public void visitIFNE( IFNE obj ) {
-    }
-
-
-    public void visitIF_ICMPLE( IF_ICMPLE obj ) {
-    }
-
-
-    public void visitLDC2_W( LDC2_W obj ) {
-    }
-
-
-    public void visitGETFIELD( GETFIELD obj ) {
-    }
-
-
-    public void visitLADD( LADD obj ) {
-    }
-
-
-    public void visitNOP( NOP obj ) {
-    }
-
-
-    public void visitFALOAD( FALOAD obj ) {
-    }
-
-
-    public void visitINSTANCEOF( INSTANCEOF obj ) {
-    }
-
-
-    public void visitIFLE( IFLE obj ) {
-    }
-
-
-    public void visitLXOR( LXOR obj ) {
-    }
-
-
-    public void visitLRETURN( LRETURN obj ) {
-    }
-
-
-    public void visitFCONST( FCONST obj ) {
-    }
-
-
-    public void visitIUSHR( IUSHR obj ) {
-    }
-
-
-    public void visitBALOAD( BALOAD obj ) {
-    }
-
-
-    public void visitDUP2( DUP2 obj ) {
-    }
-
-
-    public void visitIF_ACMPEQ( IF_ACMPEQ obj ) {
-    }
-
-
-    public void visitIMPDEP1( IMPDEP1 obj ) {
-    }
-
-
-    public void visitMONITORENTER( MONITORENTER obj ) {
-    }
-
-
-    public void visitLSHL( LSHL obj ) {
-    }
-
-
-    public void visitDCMPG( DCMPG obj ) {
-    }
-
-
-    public void visitD2L( D2L obj ) {
-    }
-
-
-    public void visitIMPDEP2( IMPDEP2 obj ) {
-    }
-
-
-    public void visitL2D( L2D obj ) {
-    }
-
-
-    public void visitRET( RET obj ) {
-    }
-
-
-    public void visitIFGT( IFGT obj ) {
-    }
-
-
-    public void visitIXOR( IXOR obj ) {
-    }
-
-
-    public void visitINVOKEVIRTUAL( INVOKEVIRTUAL obj ) {
-    }
-
-
-    public void visitFASTORE( FASTORE obj ) {
-    }
-
-
-    public void visitIRETURN( IRETURN obj ) {
-    }
-
-
-    public void visitIF_ICMPNE( IF_ICMPNE obj ) {
-    }
-
-
-    public void visitFLOAD( FLOAD obj ) {
-    }
-
-
-    public void visitLDIV( LDIV obj ) {
-    }
-
-
-    public void visitPUTSTATIC( PUTSTATIC obj ) {
-    }
-
-
-    public void visitAALOAD( AALOAD obj ) {
-    }
-
-
-    public void visitD2I( D2I obj ) {
-    }
-
-
-    public void visitIF_ICMPEQ( IF_ICMPEQ obj ) {
-    }
-
-
-    public void visitAASTORE( AASTORE obj ) {
-    }
-
-
-    public void visitARETURN( ARETURN obj ) {
-    }
-
-
-    public void visitDUP2_X1( DUP2_X1 obj ) {
-    }
-
-
-    public void visitFNEG( FNEG obj ) {
-    }
-
-
-    public void visitGOTO_W( GOTO_W obj ) {
-    }
-
-
-    public void visitD2F( D2F obj ) {
-    }
-
-
-    public void visitGOTO( GOTO obj ) {
-    }
-
-
-    public void visitISUB( ISUB obj ) {
-    }
-
-
-    public void visitF2I( F2I obj ) {
-    }
-
-
-    public void visitDNEG( DNEG obj ) {
-    }
-
-
-    public void visitICONST( ICONST obj ) {
-    }
-
-
-    public void visitFDIV( FDIV obj ) {
-    }
-
-
-    public void visitI2B( I2B obj ) {
-    }
-
-
-    public void visitLNEG( LNEG obj ) {
-    }
-
-
-    public void visitLREM( LREM obj ) {
-    }
-
-
-    public void visitIMUL( IMUL obj ) {
-    }
-
-
-    public void visitIADD( IADD obj ) {
-    }
-
-
-    public void visitLSHR( LSHR obj ) {
-    }
-
-
-    public void visitLOOKUPSWITCH( LOOKUPSWITCH obj ) {
-    }
-
-
-    public void visitDUP_X1( DUP_X1 obj ) {
-    }
-
-
-    public void visitFCMPL( FCMPL obj ) {
-    }
-
-
-    public void visitI2C( I2C obj ) {
-    }
-
-
-    public void visitLMUL( LMUL obj ) {
-    }
-
-
-    public void visitLUSHR( LUSHR obj ) {
-    }
-
-
-    public void visitISHL( ISHL obj ) {
-    }
-
-
-    public void visitLALOAD( LALOAD obj ) {
-    }
-
-
-    public void visitASTORE( ASTORE obj ) {
-    }
-
-
-    public void visitANEWARRAY( ANEWARRAY obj ) {
-    }
-
-
-    public void visitFRETURN( FRETURN obj ) {
-    }
-
-
-    public void visitFADD( FADD obj ) {
-    }
-
-
-    public void visitBREAKPOINT( BREAKPOINT obj ) {
-    }
-}

==================================================
F2I.java
index d65deed644..4bcaeaf030 100644
--- a/java/org/apache/tomcat/util/bcel/generic/F2D.java
+++ b/java/org/apache/tomcat/util/bcel/generic/F2D.java
@@ -30,21 +30,4 @@ public class F2D extends ConversionInstruction {
     public F2D() {
         super(org.apache.tomcat.util.bcel.Constants.F2D);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitConversionInstruction(this);
-        v.visitF2D(this);
-    }
 }

==================================================
F2L.java
index 4d19be932b..f3199ebe7d 100644
--- a/java/org/apache/tomcat/util/bcel/generic/F2I.java
+++ b/java/org/apache/tomcat/util/bcel/generic/F2I.java
@@ -30,21 +30,4 @@ public class F2I extends ConversionInstruction {
     public F2I() {
         super(org.apache.tomcat.util.bcel.Constants.F2I);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitConversionInstruction(this);
-        v.visitF2I(this);
-    }
 }

==================================================
FADD.java
index d102be2a6d..c3f1ee5ea7 100644
--- a/java/org/apache/tomcat/util/bcel/generic/F2L.java
+++ b/java/org/apache/tomcat/util/bcel/generic/F2L.java
@@ -30,21 +30,4 @@ public class F2L extends ConversionInstruction {
     public F2L() {
         super(org.apache.tomcat.util.bcel.Constants.F2L);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitConversionInstruction(this);
-        v.visitF2L(this);
-    }
 }

==================================================
FALOAD.java
index 464c8d84ef..a56fde961a 100644
--- a/java/org/apache/tomcat/util/bcel/generic/FADD.java
+++ b/java/org/apache/tomcat/util/bcel/generic/FADD.java
@@ -30,21 +30,4 @@ public class FADD extends ArithmeticInstruction {
     public FADD() {
         super(org.apache.tomcat.util.bcel.Constants.FADD);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitFADD(this);
-    }
 }

==================================================
FASTORE.java
index 3f9daa5397..45b4d64af9 100644
--- a/java/org/apache/tomcat/util/bcel/generic/FALOAD.java
+++ b/java/org/apache/tomcat/util/bcel/generic/FALOAD.java
@@ -30,21 +30,4 @@ public class FALOAD extends ArrayInstruction implements StackProducer {
     public FALOAD() {
         super(org.apache.tomcat.util.bcel.Constants.FALOAD);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackProducer(this);
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitArrayInstruction(this);
-        v.visitFALOAD(this);
-    }
 }

==================================================
FCMPG.java
index d4691fab45..7f8b330899 100644
--- a/java/org/apache/tomcat/util/bcel/generic/FASTORE.java
+++ b/java/org/apache/tomcat/util/bcel/generic/FASTORE.java
@@ -30,21 +30,4 @@ public class FASTORE extends ArrayInstruction implements StackConsumer {
     public FASTORE() {
         super(org.apache.tomcat.util.bcel.Constants.FASTORE);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitArrayInstruction(this);
-        v.visitFASTORE(this);
-    }
 }

==================================================
FCMPL.java
index 3e1f3ca00a..2ae4b36ca4 100644
--- a/java/org/apache/tomcat/util/bcel/generic/FCMPG.java
+++ b/java/org/apache/tomcat/util/bcel/generic/FCMPG.java
@@ -35,20 +35,4 @@ public class FCMPG extends Instruction implements TypedInstruction, StackProduce
     public Type getType( ConstantPoolGen cp ) {
         return Type.FLOAT;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitFCMPG(this);
-    }
 }

==================================================
FCONST.java
index 300618084c..3415236743 100644
--- a/java/org/apache/tomcat/util/bcel/generic/FCMPL.java
+++ b/java/org/apache/tomcat/util/bcel/generic/FCMPL.java
@@ -35,20 +35,4 @@ public class FCMPL extends Instruction implements TypedInstruction, StackProduce
     public Type getType( ConstantPoolGen cp ) {
         return Type.FLOAT;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitFCMPL(this);
-    }
 }

==================================================
FDIV.java
index ffa61234f8..c8c08c2a17 100644
--- a/java/org/apache/tomcat/util/bcel/generic/FCONST.java
+++ b/java/org/apache/tomcat/util/bcel/generic/FCONST.java
@@ -62,21 +62,4 @@ public class FCONST extends Instruction implements ConstantPushInstruction, Type
     public Type getType( ConstantPoolGen cp ) {
         return Type.FLOAT;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitPushInstruction(this);
-        v.visitStackProducer(this);
-        v.visitTypedInstruction(this);
-        v.visitConstantPushInstruction(this);
-        v.visitFCONST(this);
-    }
 }

==================================================
FLOAD.java
index aaec4569f3..6e05a41b55 100644
--- a/java/org/apache/tomcat/util/bcel/generic/FDIV.java
+++ b/java/org/apache/tomcat/util/bcel/generic/FDIV.java
@@ -30,21 +30,4 @@ public class FDIV extends ArithmeticInstruction {
     public FDIV() {
         super(org.apache.tomcat.util.bcel.Constants.FDIV);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitFDIV(this);
-    }
 }

==================================================
FMUL.java
index 007bae14a6..298dcf755c 100644
--- a/java/org/apache/tomcat/util/bcel/generic/FLOAD.java
+++ b/java/org/apache/tomcat/util/bcel/generic/FLOAD.java
@@ -40,18 +40,4 @@ public class FLOAD extends LoadInstruction {
     public FLOAD(int n) {
         super(org.apache.tomcat.util.bcel.Constants.FLOAD, org.apache.tomcat.util.bcel.Constants.FLOAD_0, n);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        super.accept(v);
-        v.visitFLOAD(this);
-    }
 }

==================================================
FNEG.java
index e0c786f4a1..cfef64c680 100644
--- a/java/org/apache/tomcat/util/bcel/generic/FMUL.java
+++ b/java/org/apache/tomcat/util/bcel/generic/FMUL.java
@@ -30,21 +30,4 @@ public class FMUL extends ArithmeticInstruction {
     public FMUL() {
         super(org.apache.tomcat.util.bcel.Constants.FMUL);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitFMUL(this);
-    }
 }

==================================================
FREM.java
index 56aeb31133..6ca99100f9 100644
--- a/java/org/apache/tomcat/util/bcel/generic/FNEG.java
+++ b/java/org/apache/tomcat/util/bcel/generic/FNEG.java
@@ -28,21 +28,4 @@ public class FNEG extends ArithmeticInstruction {
     public FNEG() {
         super(org.apache.tomcat.util.bcel.Constants.FNEG);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitFNEG(this);
-    }
 }

==================================================
FRETURN.java
index 2f3e836daf..d13011fbc8 100644
--- a/java/org/apache/tomcat/util/bcel/generic/FREM.java
+++ b/java/org/apache/tomcat/util/bcel/generic/FREM.java
@@ -30,21 +30,4 @@ public class FREM extends ArithmeticInstruction {
     public FREM() {
         super(org.apache.tomcat.util.bcel.Constants.FREM);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitFREM(this);
-    }
 }

==================================================
FSTORE.java
index db49cbfa7d..ecbf2d5cc0 100644
--- a/java/org/apache/tomcat/util/bcel/generic/FRETURN.java
+++ b/java/org/apache/tomcat/util/bcel/generic/FRETURN.java
@@ -30,21 +30,4 @@ public class FRETURN extends ReturnInstruction {
     public FRETURN() {
         super(org.apache.tomcat.util.bcel.Constants.FRETURN);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitStackConsumer(this);
-        v.visitReturnInstruction(this);
-        v.visitFRETURN(this);
-    }
 }

==================================================
FSUB.java
index f3b52c0a86..869c4a62a5 100644
--- a/java/org/apache/tomcat/util/bcel/generic/FSTORE.java
+++ b/java/org/apache/tomcat/util/bcel/generic/FSTORE.java
@@ -40,18 +40,4 @@ public class FSTORE extends StoreInstruction {
     public FSTORE(int n) {
         super(org.apache.tomcat.util.bcel.Constants.FSTORE, org.apache.tomcat.util.bcel.Constants.FSTORE_0, n);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        super.accept(v);
-        v.visitFSTORE(this);
-    }
 }

==================================================
GETFIELD.java
index c496bfa043..3fc84c2bd3 100644
--- a/java/org/apache/tomcat/util/bcel/generic/FSUB.java
+++ b/java/org/apache/tomcat/util/bcel/generic/FSUB.java
@@ -30,21 +30,4 @@ public class FSUB extends ArithmeticInstruction {
     public FSUB() {
         super(org.apache.tomcat.util.bcel.Constants.FSUB);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitFSUB(this);
-    }
 }

==================================================
GETSTATIC.java
index 22c29fdc00..ae5f913844 100644
--- a/java/org/apache/tomcat/util/bcel/generic/GETFIELD.java
+++ b/java/org/apache/tomcat/util/bcel/generic/GETFIELD.java
@@ -57,25 +57,4 @@ public class GETFIELD extends FieldInstruction implements ExceptionThrower, Stac
         cs[ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length] = ExceptionConstants.NULL_POINTER_EXCEPTION;
         return cs;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitExceptionThrower(this);
-        v.visitStackConsumer(this);
-        v.visitStackProducer(this);
-        v.visitTypedInstruction(this);
-        v.visitLoadClass(this);
-        v.visitCPInstruction(this);
-        v.visitFieldOrMethod(this);
-        v.visitFieldInstruction(this);
-        v.visitGETFIELD(this);
-    }
 }

==================================================
GOTO.java
index aab6f17871..b7738aeecb 100644
--- a/java/org/apache/tomcat/util/bcel/generic/GETSTATIC.java
+++ b/java/org/apache/tomcat/util/bcel/generic/GETSTATIC.java
@@ -55,25 +55,4 @@ public class GETSTATIC extends FieldInstruction implements PushInstruction, Exce
         cs[ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length] = ExceptionConstants.INCOMPATIBLE_CLASS_CHANGE_ERROR;
         return cs;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackProducer(this);
-        v.visitPushInstruction(this);
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitLoadClass(this);
-        v.visitCPInstruction(this);
-        v.visitFieldOrMethod(this);
-        v.visitFieldInstruction(this);
-        v.visitGETSTATIC(this);
-    }
 }

==================================================
GOTO_W.java
index f7484b58a7..275a5f9401 100644
--- a/java/org/apache/tomcat/util/bcel/generic/GOTO.java
+++ b/java/org/apache/tomcat/util/bcel/generic/GOTO.java
@@ -69,21 +69,4 @@ public class GOTO extends GotoInstruction implements VariableLengthInstruction {
         }
         return 0;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitVariableLengthInstruction(this);
-        v.visitUnconditionalBranch(this);
-        v.visitBranchInstruction(this);
-        v.visitGotoInstruction(this);
-        v.visitGOTO(this);
-    }
 }

==================================================
I2B.java
index 0e38a7439f..b7546cf816 100644
--- a/java/org/apache/tomcat/util/bcel/generic/GOTO_W.java
+++ b/java/org/apache/tomcat/util/bcel/generic/GOTO_W.java
@@ -60,20 +60,4 @@ public class GOTO_W extends GotoInstruction {
         index = bytes.readInt();
         length = 5;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitUnconditionalBranch(this);
-        v.visitBranchInstruction(this);
-        v.visitGotoInstruction(this);
-        v.visitGOTO_W(this);
-    }
 }

==================================================
I2C.java
index c7ca710434..e463733f91 100644
--- a/java/org/apache/tomcat/util/bcel/generic/I2B.java
+++ b/java/org/apache/tomcat/util/bcel/generic/I2B.java
@@ -30,21 +30,4 @@ public class I2B extends ConversionInstruction {
     public I2B() {
         super(org.apache.tomcat.util.bcel.Constants.I2B);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitConversionInstruction(this);
-        v.visitI2B(this);
-    }
 }

==================================================
I2D.java
index f6feaf25d0..45b35b4b11 100644
--- a/java/org/apache/tomcat/util/bcel/generic/I2C.java
+++ b/java/org/apache/tomcat/util/bcel/generic/I2C.java
@@ -30,21 +30,4 @@ public class I2C extends ConversionInstruction {
     public I2C() {
         super(org.apache.tomcat.util.bcel.Constants.I2C);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitConversionInstruction(this);
-        v.visitI2C(this);
-    }
 }

==================================================
I2F.java
index c1b8807b67..354a9dfb44 100644
--- a/java/org/apache/tomcat/util/bcel/generic/I2D.java
+++ b/java/org/apache/tomcat/util/bcel/generic/I2D.java
@@ -30,21 +30,4 @@ public class I2D extends ConversionInstruction {
     public I2D() {
         super(org.apache.tomcat.util.bcel.Constants.I2D);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitConversionInstruction(this);
-        v.visitI2D(this);
-    }
 }

==================================================
I2L.java
index e6d3b0c619..08415e5186 100644
--- a/java/org/apache/tomcat/util/bcel/generic/I2F.java
+++ b/java/org/apache/tomcat/util/bcel/generic/I2F.java
@@ -30,21 +30,4 @@ public class I2F extends ConversionInstruction {
     public I2F() {
         super(org.apache.tomcat.util.bcel.Constants.I2F);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitConversionInstruction(this);
-        v.visitI2F(this);
-    }
 }

==================================================
I2S.java
index df23b7dc24..1f77f4e9de 100644
--- a/java/org/apache/tomcat/util/bcel/generic/I2L.java
+++ b/java/org/apache/tomcat/util/bcel/generic/I2L.java
@@ -30,21 +30,4 @@ public class I2L extends ConversionInstruction {
     public I2L() {
         super(org.apache.tomcat.util.bcel.Constants.I2L);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitConversionInstruction(this);
-        v.visitI2L(this);
-    }
 }

==================================================
IADD.java
index 1c4525429d..48a4769332 100644
--- a/java/org/apache/tomcat/util/bcel/generic/I2S.java
+++ b/java/org/apache/tomcat/util/bcel/generic/I2S.java
@@ -28,21 +28,4 @@ public class I2S extends ConversionInstruction {
     public I2S() {
         super(org.apache.tomcat.util.bcel.Constants.I2S);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitConversionInstruction(this);
-        v.visitI2S(this);
-    }
 }

==================================================
IALOAD.java
index 48f0d85574..1b02a92ea0 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IADD.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IADD.java
@@ -30,21 +30,4 @@ public class IADD extends ArithmeticInstruction {
     public IADD() {
         super(org.apache.tomcat.util.bcel.Constants.IADD);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitIADD(this);
-    }
 }

==================================================
IAND.java
index 9511a282b6..c07ad8f69a 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IALOAD.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IALOAD.java
@@ -31,21 +31,4 @@ public class IALOAD extends ArrayInstruction implements StackProducer {
     public IALOAD() {
         super(org.apache.tomcat.util.bcel.Constants.IALOAD);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackProducer(this);
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitArrayInstruction(this);
-        v.visitIALOAD(this);
-    }
 }

==================================================
IASTORE.java
index 10c240df07..fae85c76ba 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IAND.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IAND.java
@@ -28,21 +28,4 @@ public class IAND extends ArithmeticInstruction {
     public IAND() {
         super(org.apache.tomcat.util.bcel.Constants.IAND);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitIAND(this);
-    }
 }

==================================================
ICONST.java
index 1207d6e187..860d7ed6a3 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IASTORE.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IASTORE.java
@@ -31,21 +31,4 @@ public class IASTORE extends ArrayInstruction implements StackConsumer {
     public IASTORE() {
         super(org.apache.tomcat.util.bcel.Constants.IASTORE);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitArrayInstruction(this);
-        v.visitIASTORE(this);
-    }
 }

==================================================
IDIV.java
index 239570c3cb..ad75d294a9 100644
--- a/java/org/apache/tomcat/util/bcel/generic/ICONST.java
+++ b/java/org/apache/tomcat/util/bcel/generic/ICONST.java
@@ -58,21 +58,4 @@ public class ICONST extends Instruction implements ConstantPushInstruction, Type
     public Type getType( ConstantPoolGen cp ) {
         return Type.INT;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitPushInstruction(this);
-        v.visitStackProducer(this);
-        v.visitTypedInstruction(this);
-        v.visitConstantPushInstruction(this);
-        v.visitICONST(this);
-    }
 }

==================================================
IFEQ.java
index ec999af5fd..7fb1b07ea7 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IDIV.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IDIV.java
@@ -39,22 +39,4 @@ public class IDIV extends ArithmeticInstruction implements ExceptionThrower {
             org.apache.tomcat.util.bcel.ExceptionConstants.ARITHMETIC_EXCEPTION
         };
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitIDIV(this);
-    }
 }

==================================================
IFGE.java
index 334ea9e8bc..21a907889c 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IFEQ.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IFEQ.java
@@ -45,20 +45,4 @@ public class IFEQ extends IfInstruction {
     public IfInstruction negate() {
         return new IFNE(target);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitBranchInstruction(this);
-        v.visitIfInstruction(this);
-        v.visitIFEQ(this);
-    }
 }

==================================================
IFGT.java
index 2fdb428b99..65098baec7 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IFGE.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IFGE.java
@@ -45,20 +45,4 @@ public class IFGE extends IfInstruction {
     public IfInstruction negate() {
         return new IFLT(target);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitBranchInstruction(this);
-        v.visitIfInstruction(this);
-        v.visitIFGE(this);
-    }
 }

==================================================
IFLE.java
index 0d94ac77e2..6f800d053b 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IFGT.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IFGT.java
@@ -45,20 +45,4 @@ public class IFGT extends IfInstruction {
     public IfInstruction negate() {
         return new IFLE(target);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitBranchInstruction(this);
-        v.visitIfInstruction(this);
-        v.visitIFGT(this);
-    }
 }

==================================================
IFLT.java
index c59da8c350..160f8bb25f 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IFLE.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IFLE.java
@@ -45,20 +45,4 @@ public class IFLE extends IfInstruction {
     public IfInstruction negate() {
         return new IFGT(target);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitBranchInstruction(this);
-        v.visitIfInstruction(this);
-        v.visitIFLE(this);
-    }
 }

==================================================
IFNE.java
index 560bf9baa3..88677eea68 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IFLT.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IFLT.java
@@ -45,20 +45,4 @@ public class IFLT extends IfInstruction {
     public IfInstruction negate() {
         return new IFGE(target);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitBranchInstruction(this);
-        v.visitIfInstruction(this);
-        v.visitIFLT(this);
-    }
 }

==================================================
IFNONNULL.java
index f32bb7f1ef..eaa9463072 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IFNE.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IFNE.java
@@ -45,20 +45,4 @@ public class IFNE extends IfInstruction {
     public IfInstruction negate() {
         return new IFEQ(target);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitBranchInstruction(this);
-        v.visitIfInstruction(this);
-        v.visitIFNE(this);
-    }
 }

==================================================
IFNULL.java
index 1248d0d353..ae11e66540 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IFNONNULL.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IFNONNULL.java
@@ -45,20 +45,4 @@ public class IFNONNULL extends IfInstruction {
     public IfInstruction negate() {
         return new IFNULL(target);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitBranchInstruction(this);
-        v.visitIfInstruction(this);
-        v.visitIFNONNULL(this);
-    }
 }

==================================================
IF_ACMPEQ.java
index 80e93877de..9c244bd620 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IFNULL.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IFNULL.java
@@ -45,20 +45,4 @@ public class IFNULL extends IfInstruction {
     public IfInstruction negate() {
         return new IFNONNULL(target);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitBranchInstruction(this);
-        v.visitIfInstruction(this);
-        v.visitIFNULL(this);
-    }
 }

==================================================
IF_ACMPNE.java
index 8b0527649c..8ce1b29e05 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IF_ACMPEQ.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IF_ACMPEQ.java
@@ -45,20 +45,4 @@ public class IF_ACMPEQ extends IfInstruction {
     public IfInstruction negate() {
         return new IF_ACMPNE(target);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitBranchInstruction(this);
-        v.visitIfInstruction(this);
-        v.visitIF_ACMPEQ(this);
-    }
 }

==================================================
IF_ICMPEQ.java
index 02f821d264..08776f37a9 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IF_ACMPNE.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IF_ACMPNE.java
@@ -45,20 +45,4 @@ public class IF_ACMPNE extends IfInstruction {
     public IfInstruction negate() {
         return new IF_ACMPEQ(target);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitBranchInstruction(this);
-        v.visitIfInstruction(this);
-        v.visitIF_ACMPNE(this);
-    }
 }

==================================================
IF_ICMPGE.java
index b8822da5b3..02227dde0e 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IF_ICMPEQ.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IF_ICMPEQ.java
@@ -45,20 +45,4 @@ public class IF_ICMPEQ extends IfInstruction {
     public IfInstruction negate() {
         return new IF_ICMPNE(target);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitBranchInstruction(this);
-        v.visitIfInstruction(this);
-        v.visitIF_ICMPEQ(this);
-    }
 }

==================================================
IF_ICMPGT.java
index b24fd77617..383b940c0c 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IF_ICMPGE.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IF_ICMPGE.java
@@ -45,20 +45,4 @@ public class IF_ICMPGE extends IfInstruction {
     public IfInstruction negate() {
         return new IF_ICMPLT(target);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitBranchInstruction(this);
-        v.visitIfInstruction(this);
-        v.visitIF_ICMPGE(this);
-    }
 }

==================================================
IF_ICMPLE.java
index 580311c65e..f1c817e163 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IF_ICMPGT.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IF_ICMPGT.java
@@ -45,20 +45,4 @@ public class IF_ICMPGT extends IfInstruction {
     public IfInstruction negate() {
         return new IF_ICMPLE(target);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitBranchInstruction(this);
-        v.visitIfInstruction(this);
-        v.visitIF_ICMPGT(this);
-    }
 }

==================================================
IF_ICMPLT.java
index 1caa276f7d..caf761628c 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IF_ICMPLE.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IF_ICMPLE.java
@@ -45,20 +45,4 @@ public class IF_ICMPLE extends IfInstruction {
     public IfInstruction negate() {
         return new IF_ICMPGT(target);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitBranchInstruction(this);
-        v.visitIfInstruction(this);
-        v.visitIF_ICMPLE(this);
-    }
 }

==================================================
IF_ICMPNE.java
index b5cf633e09..6ff23c07dd 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IF_ICMPLT.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IF_ICMPLT.java
@@ -45,20 +45,4 @@ public class IF_ICMPLT extends IfInstruction {
     public IfInstruction negate() {
         return new IF_ICMPGE(target);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitBranchInstruction(this);
-        v.visitIfInstruction(this);
-        v.visitIF_ICMPLT(this);
-    }
 }

==================================================
IINC.java
index 5852e8276d..f0a9172ded 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IF_ICMPNE.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IF_ICMPNE.java
@@ -45,20 +45,4 @@ public class IF_ICMPNE extends IfInstruction {
     public IfInstruction negate() {
         return new IF_ICMPEQ(target);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitBranchInstruction(this);
-        v.visitIfInstruction(this);
-        v.visitIF_ICMPNE(this);
-    }
 }

==================================================
ILOAD.java
index 4d62e1e6e6..cba2ebf4ce 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IINC.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IINC.java
@@ -141,18 +141,4 @@ public class IINC extends LocalVariableInstruction {
     public Type getType( ConstantPoolGen cp ) {
         return Type.INT;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitLocalVariableInstruction(this);
-        v.visitIINC(this);
-    }
 }

==================================================
IMPDEP1.java
index 404d6a4de0..33bbe64045 100644
--- a/java/org/apache/tomcat/util/bcel/generic/ILOAD.java
+++ b/java/org/apache/tomcat/util/bcel/generic/ILOAD.java
@@ -40,18 +40,4 @@ public class ILOAD extends LoadInstruction {
     public ILOAD(int n) {
         super(org.apache.tomcat.util.bcel.Constants.ILOAD, org.apache.tomcat.util.bcel.Constants.ILOAD_0, n);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        super.accept(v);
-        v.visitILOAD(this);
-    }
 }

==================================================
IMPDEP2.java
index 00d2b06ceb..557c7cbb3a 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IMPDEP1.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IMPDEP1.java
@@ -27,17 +27,4 @@ public class IMPDEP1 extends Instruction {
     public IMPDEP1() {
         super(org.apache.tomcat.util.bcel.Constants.IMPDEP1, (short) 1);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitIMPDEP1(this);
-    }
 }

==================================================
IMUL.java
index 7b110c1f34..5469b06160 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IMPDEP2.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IMPDEP2.java
@@ -27,17 +27,4 @@ public class IMPDEP2 extends Instruction {
     public IMPDEP2() {
         super(org.apache.tomcat.util.bcel.Constants.IMPDEP2, (short) 1);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitIMPDEP2(this);
-    }
 }

==================================================
INEG.java
index 39e23c643d..3d0a801b29 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IMUL.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IMUL.java
@@ -30,21 +30,4 @@ public class IMUL extends ArithmeticInstruction {
     public IMUL() {
         super(org.apache.tomcat.util.bcel.Constants.IMUL);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitIMUL(this);
-    }
 }

==================================================
INSTANCEOF.java
index 33a23f03ab..8096c0b309 100644
--- a/java/org/apache/tomcat/util/bcel/generic/INEG.java
+++ b/java/org/apache/tomcat/util/bcel/generic/INEG.java
@@ -28,21 +28,4 @@ public class INEG extends ArithmeticInstruction {
     public INEG() {
         super(org.apache.tomcat.util.bcel.Constants.INEG);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitINEG(this);
-    }
 }

==================================================
INVOKEINTERFACE.java
index 061abf10a7..edda28bdf4 100644
--- a/java/org/apache/tomcat/util/bcel/generic/INSTANCEOF.java
+++ b/java/org/apache/tomcat/util/bcel/generic/INSTANCEOF.java
@@ -51,23 +51,4 @@ public class INSTANCEOF extends CPInstruction implements LoadClass, ExceptionThr
         }
         return (t instanceof ObjectType) ? (ObjectType) t : null;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitLoadClass(this);
-        v.visitExceptionThrower(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitTypedInstruction(this);
-        v.visitCPInstruction(this);
-        v.visitINSTANCEOF(this);
-    }
 }

==================================================
INVOKESPECIAL.java
index ae9fc81352..669dbf0052 100644
--- a/java/org/apache/tomcat/util/bcel/generic/INVOKEINTERFACE.java
+++ b/java/org/apache/tomcat/util/bcel/generic/INVOKEINTERFACE.java
@@ -108,25 +108,4 @@ public final class INVOKEINTERFACE extends InvokeInstruction {
         cs[ExceptionConstants.EXCS_INTERFACE_METHOD_RESOLUTION.length] = ExceptionConstants.UNSATISFIED_LINK_ERROR;
         return cs;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitStackConsumer(this);
-        v.visitStackProducer(this);
-        v.visitLoadClass(this);
-        v.visitCPInstruction(this);
-        v.visitFieldOrMethod(this);
-        v.visitInvokeInstruction(this);
-        v.visitINVOKEINTERFACE(this);
-    }
 }

==================================================
INVOKESTATIC.java
index 092e5e410d..764d371d8b 100644
--- a/java/org/apache/tomcat/util/bcel/generic/INVOKESPECIAL.java
+++ b/java/org/apache/tomcat/util/bcel/generic/INVOKESPECIAL.java
@@ -53,25 +53,4 @@ public class INVOKESPECIAL extends InvokeInstruction {
         cs[ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length] = ExceptionConstants.NULL_POINTER_EXCEPTION;
         return cs;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitStackConsumer(this);
-        v.visitStackProducer(this);
-        v.visitLoadClass(this);
-        v.visitCPInstruction(this);
-        v.visitFieldOrMethod(this);
-        v.visitInvokeInstruction(this);
-        v.visitINVOKESPECIAL(this);
-    }
 }

==================================================
INVOKEVIRTUAL.java
index 3efbd95046..78f252d7f5 100644
--- a/java/org/apache/tomcat/util/bcel/generic/INVOKESTATIC.java
+++ b/java/org/apache/tomcat/util/bcel/generic/INVOKESTATIC.java
@@ -50,25 +50,4 @@ public class INVOKESTATIC extends InvokeInstruction {
         cs[ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length + 1] = ExceptionConstants.INCOMPATIBLE_CLASS_CHANGE_ERROR;
         return cs;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitStackConsumer(this);
-        v.visitStackProducer(this);
-        v.visitLoadClass(this);
-        v.visitCPInstruction(this);
-        v.visitFieldOrMethod(this);
-        v.visitInvokeInstruction(this);
-        v.visitINVOKESTATIC(this);
-    }
 }

==================================================
IOR.java
index 4616936566..38eccfb7c0 100644
--- a/java/org/apache/tomcat/util/bcel/generic/INVOKEVIRTUAL.java
+++ b/java/org/apache/tomcat/util/bcel/generic/INVOKEVIRTUAL.java
@@ -52,25 +52,4 @@ public class INVOKEVIRTUAL extends InvokeInstruction {
         cs[ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length] = ExceptionConstants.NULL_POINTER_EXCEPTION;
         return cs;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitStackConsumer(this);
-        v.visitStackProducer(this);
-        v.visitLoadClass(this);
-        v.visitCPInstruction(this);
-        v.visitFieldOrMethod(this);
-        v.visitInvokeInstruction(this);
-        v.visitINVOKEVIRTUAL(this);
-    }
 }

==================================================
IREM.java
index d6cf5cd1ba..fb16d474b9 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IOR.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IOR.java
@@ -28,21 +28,4 @@ public class IOR extends ArithmeticInstruction {
     public IOR() {
         super(org.apache.tomcat.util.bcel.Constants.IOR);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitIOR(this);
-    }
 }

==================================================
IRETURN.java
index 67b3cac541..cc3d00c6d5 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IREM.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IREM.java
@@ -39,22 +39,4 @@ public class IREM extends ArithmeticInstruction implements ExceptionThrower {
             org.apache.tomcat.util.bcel.ExceptionConstants.ARITHMETIC_EXCEPTION
         };
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitIREM(this);
-    }
 }

==================================================
ISHL.java
index e21b5ac25c..75206585d1 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IRETURN.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IRETURN.java
@@ -30,21 +30,4 @@ public class IRETURN extends ReturnInstruction {
     public IRETURN() {
         super(org.apache.tomcat.util.bcel.Constants.IRETURN);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitStackConsumer(this);
-        v.visitReturnInstruction(this);
-        v.visitIRETURN(this);
-    }
 }

==================================================
ISHR.java
index 516dfb077c..66e5194067 100644
--- a/java/org/apache/tomcat/util/bcel/generic/ISHL.java
+++ b/java/org/apache/tomcat/util/bcel/generic/ISHL.java
@@ -28,21 +28,4 @@ public class ISHL extends ArithmeticInstruction {
     public ISHL() {
         super(org.apache.tomcat.util.bcel.Constants.ISHL);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitISHL(this);
-    }
 }

==================================================
ISTORE.java
index d8bbb010a2..26fa178efe 100644
--- a/java/org/apache/tomcat/util/bcel/generic/ISHR.java
+++ b/java/org/apache/tomcat/util/bcel/generic/ISHR.java
@@ -28,21 +28,4 @@ public class ISHR extends ArithmeticInstruction {
     public ISHR() {
         super(org.apache.tomcat.util.bcel.Constants.ISHR);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitISHR(this);
-    }
 }

==================================================
ISUB.java
index f0a0ca1970..9b8d27915a 100644
--- a/java/org/apache/tomcat/util/bcel/generic/ISTORE.java
+++ b/java/org/apache/tomcat/util/bcel/generic/ISTORE.java
@@ -40,18 +40,4 @@ public class ISTORE extends StoreInstruction {
     public ISTORE(int n) {
         super(org.apache.tomcat.util.bcel.Constants.ISTORE, org.apache.tomcat.util.bcel.Constants.ISTORE_0, n);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        super.accept(v);
-        v.visitISTORE(this);
-    }
 }

==================================================
IUSHR.java
index 67b5a66653..c36b61ef93 100644
--- a/java/org/apache/tomcat/util/bcel/generic/ISUB.java
+++ b/java/org/apache/tomcat/util/bcel/generic/ISUB.java
@@ -30,21 +30,4 @@ public class ISUB extends ArithmeticInstruction {
     public ISUB() {
         super(org.apache.tomcat.util.bcel.Constants.ISUB);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitISUB(this);
-    }
 }

==================================================
IXOR.java
index f2bc5b472d..28cf19e7cf 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IUSHR.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IUSHR.java
@@ -28,21 +28,4 @@ public class IUSHR extends ArithmeticInstruction {
     public IUSHR() {
         super(org.apache.tomcat.util.bcel.Constants.IUSHR);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitIUSHR(this);
-    }
 }

==================================================
Instruction.java
index d898b1681b..cc58262fe8 100644
--- a/java/org/apache/tomcat/util/bcel/generic/IXOR.java
+++ b/java/org/apache/tomcat/util/bcel/generic/IXOR.java
@@ -28,21 +28,4 @@ public class IXOR extends ArithmeticInstruction {
     public IXOR() {
         super(org.apache.tomcat.util.bcel.Constants.IXOR);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitIXOR(this);
-    }
 }

==================================================
InstructionHandle.java
index e294bf78fd..ec4d52aea3 100644
--- a/java/org/apache/tomcat/util/bcel/generic/Instruction.java
+++ b/java/org/apache/tomcat/util/bcel/generic/Instruction.java
@@ -511,17 +511,6 @@ public abstract class Instruction implements Cloneable, Serializable {
     }
 
 
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public abstract void accept( Visitor v );
-
-
     /** Get Comparator object used in the equals() method to determine
      * equality of instructions.
      *

==================================================
JSR.java
index e9423e1e63..9f6dbc7139 100644
--- a/java/org/apache/tomcat/util/bcel/generic/InstructionHandle.java
+++ b/java/org/apache/tomcat/util/bcel/generic/InstructionHandle.java
@@ -278,13 +278,4 @@ public class InstructionHandle implements java.io.Serializable {
         }
         return attributes.values();
     }
-
-
-    /** Convenience method, simply calls accept() on the contained instruction.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        instruction.accept(v);
-    }
 }

==================================================
JSR_W.java
index 278d5588e9..7f5e2a6583 100644
--- a/java/org/apache/tomcat/util/bcel/generic/JSR.java
+++ b/java/org/apache/tomcat/util/bcel/generic/JSR.java
@@ -66,21 +66,4 @@ public class JSR extends JsrInstruction implements VariableLengthInstruction {
         }
         return 0;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackProducer(this);
-        v.visitVariableLengthInstruction(this);
-        v.visitBranchInstruction(this);
-        v.visitJsrInstruction(this);
-        v.visitJSR(this);
-    }
 }

==================================================
L2D.java
index be0681f84b..e5870bd5ab 100644
--- a/java/org/apache/tomcat/util/bcel/generic/JSR_W.java
+++ b/java/org/apache/tomcat/util/bcel/generic/JSR_W.java
@@ -60,20 +60,4 @@ public class JSR_W extends JsrInstruction {
         index = bytes.readInt();
         length = 5;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackProducer(this);
-        v.visitBranchInstruction(this);
-        v.visitJsrInstruction(this);
-        v.visitJSR_W(this);
-    }
 }

==================================================
L2F.java
index 4fb62eb80d..da1a3a527e 100644
--- a/java/org/apache/tomcat/util/bcel/generic/L2D.java
+++ b/java/org/apache/tomcat/util/bcel/generic/L2D.java
@@ -28,21 +28,4 @@ public class L2D extends ConversionInstruction {
     public L2D() {
         super(org.apache.tomcat.util.bcel.Constants.L2D);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitConversionInstruction(this);
-        v.visitL2D(this);
-    }
 }

==================================================
L2I.java
index 8c8f982727..7952d6b525 100644
--- a/java/org/apache/tomcat/util/bcel/generic/L2F.java
+++ b/java/org/apache/tomcat/util/bcel/generic/L2F.java
@@ -28,21 +28,4 @@ public class L2F extends ConversionInstruction {
     public L2F() {
         super(org.apache.tomcat.util.bcel.Constants.L2F);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitConversionInstruction(this);
-        v.visitL2F(this);
-    }
 }

==================================================
LADD.java
index 90d256c502..9d5e2c1642 100644
--- a/java/org/apache/tomcat/util/bcel/generic/L2I.java
+++ b/java/org/apache/tomcat/util/bcel/generic/L2I.java
@@ -28,21 +28,4 @@ public class L2I extends ConversionInstruction {
     public L2I() {
         super(org.apache.tomcat.util.bcel.Constants.L2I);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitConversionInstruction(this);
-        v.visitL2I(this);
-    }
 }

==================================================
LALOAD.java
index a08481f6ca..c1650b4cd5 100644
--- a/java/org/apache/tomcat/util/bcel/generic/LADD.java
+++ b/java/org/apache/tomcat/util/bcel/generic/LADD.java
@@ -29,21 +29,4 @@ public class LADD extends ArithmeticInstruction {
     public LADD() {
         super(org.apache.tomcat.util.bcel.Constants.LADD);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitLADD(this);
-    }
 }

==================================================
LAND.java
index 64f296a209..587a58f34e 100644
--- a/java/org/apache/tomcat/util/bcel/generic/LALOAD.java
+++ b/java/org/apache/tomcat/util/bcel/generic/LALOAD.java
@@ -30,21 +30,4 @@ public class LALOAD extends ArrayInstruction implements StackProducer {
     public LALOAD() {
         super(org.apache.tomcat.util.bcel.Constants.LALOAD);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackProducer(this);
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitArrayInstruction(this);
-        v.visitLALOAD(this);
-    }
 }

==================================================
LASTORE.java
index 7ed48eb510..4ca39322f4 100644
--- a/java/org/apache/tomcat/util/bcel/generic/LAND.java
+++ b/java/org/apache/tomcat/util/bcel/generic/LAND.java
@@ -29,21 +29,4 @@ public class LAND extends ArithmeticInstruction {
     public LAND() {
         super(org.apache.tomcat.util.bcel.Constants.LAND);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitLAND(this);
-    }
 }

==================================================
LCMP.java
index 32de31b0fd..f7f9f20788 100644
--- a/java/org/apache/tomcat/util/bcel/generic/LASTORE.java
+++ b/java/org/apache/tomcat/util/bcel/generic/LASTORE.java
@@ -30,21 +30,4 @@ public class LASTORE extends ArrayInstruction implements StackConsumer {
     public LASTORE() {
         super(org.apache.tomcat.util.bcel.Constants.LASTORE);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitArrayInstruction(this);
-        v.visitLASTORE(this);
-    }
 }

==================================================
LCONST.java
index 3f481e713f..50947ea353 100644
--- a/java/org/apache/tomcat/util/bcel/generic/LCMP.java
+++ b/java/org/apache/tomcat/util/bcel/generic/LCMP.java
@@ -36,20 +36,4 @@ public class LCMP extends Instruction implements TypedInstruction, StackProducer
     public Type getType( ConstantPoolGen cp ) {
         return Type.LONG;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitLCMP(this);
-    }
 }

==================================================
LDC.java
index 99a3138c3b..407da10b8e 100644
--- a/java/org/apache/tomcat/util/bcel/generic/LCONST.java
+++ b/java/org/apache/tomcat/util/bcel/generic/LCONST.java
@@ -60,21 +60,4 @@ public class LCONST extends Instruction implements ConstantPushInstruction, Type
     public Type getType( ConstantPoolGen cp ) {
         return Type.LONG;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitPushInstruction(this);
-        v.visitStackProducer(this);
-        v.visitTypedInstruction(this);
-        v.visitConstantPushInstruction(this);
-        v.visitLCONST(this);
-    }
 }

==================================================
LDC2_W.java
index 9fae0af4f6..74c61cf6a1 100644
--- a/java/org/apache/tomcat/util/bcel/generic/LDC.java
+++ b/java/org/apache/tomcat/util/bcel/generic/LDC.java
@@ -127,22 +127,4 @@ public class LDC extends CPInstruction implements PushInstruction, ExceptionThro
     public Class[] getExceptions() {
         return org.apache.tomcat.util.bcel.ExceptionConstants.EXCS_STRING_RESOLUTION;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackProducer(this);
-        v.visitPushInstruction(this);
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitCPInstruction(this);
-        v.visitLDC(this);
-    }
 }

==================================================
LDIV.java
index 8cb58118df..b55b02ff1b 100644
--- a/java/org/apache/tomcat/util/bcel/generic/LDC2_W.java
+++ b/java/org/apache/tomcat/util/bcel/generic/LDC2_W.java
@@ -62,21 +62,4 @@ public class LDC2_W extends CPInstruction implements PushInstruction, TypedInstr
                 throw new RuntimeException("Unknown or invalid constant type at " + index);
         }
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackProducer(this);
-        v.visitPushInstruction(this);
-        v.visitTypedInstruction(this);
-        v.visitCPInstruction(this);
-        v.visitLDC2_W(this);
-    }
 }

==================================================
LLOAD.java
index 628a11a6c1..da05f89805 100644
--- a/java/org/apache/tomcat/util/bcel/generic/LDIV.java
+++ b/java/org/apache/tomcat/util/bcel/generic/LDIV.java
@@ -36,22 +36,4 @@ public class LDIV extends ArithmeticInstruction implements ExceptionThrower {
             org.apache.tomcat.util.bcel.ExceptionConstants.ARITHMETIC_EXCEPTION
         };
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitLDIV(this);
-    }
 }

==================================================
LMUL.java
index f402223bb0..b2ce86779e 100644
--- a/java/org/apache/tomcat/util/bcel/generic/LLOAD.java
+++ b/java/org/apache/tomcat/util/bcel/generic/LLOAD.java
@@ -37,18 +37,4 @@ public class LLOAD extends LoadInstruction {
     public LLOAD(int n) {
         super(org.apache.tomcat.util.bcel.Constants.LLOAD, org.apache.tomcat.util.bcel.Constants.LLOAD_0, n);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        super.accept(v);
-        v.visitLLOAD(this);
-    }
 }

==================================================
LNEG.java
index efa1b160b4..f4e48a0442 100644
--- a/java/org/apache/tomcat/util/bcel/generic/LMUL.java
+++ b/java/org/apache/tomcat/util/bcel/generic/LMUL.java
@@ -29,21 +29,4 @@ public class LMUL extends ArithmeticInstruction {
     public LMUL() {
         super(org.apache.tomcat.util.bcel.Constants.LMUL);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitLMUL(this);
-    }
 }

==================================================
LOOKUPSWITCH.java
index 5b914bb9c1..29ddd5d299 100644
--- a/java/org/apache/tomcat/util/bcel/generic/LNEG.java
+++ b/java/org/apache/tomcat/util/bcel/generic/LNEG.java
@@ -28,21 +28,4 @@ public class LNEG extends ArithmeticInstruction {
     public LNEG() {
         super(org.apache.tomcat.util.bcel.Constants.LNEG);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitLNEG(this);
-    }
 }

==================================================
LOR.java
index e278c9e757..673904a541 100644
--- a/java/org/apache/tomcat/util/bcel/generic/LOOKUPSWITCH.java
+++ b/java/org/apache/tomcat/util/bcel/generic/LOOKUPSWITCH.java
@@ -75,21 +75,4 @@ public class LOOKUPSWITCH extends Select {
             indices[i] = bytes.readInt();
         }
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitVariableLengthInstruction(this);
-        v.visitStackProducer(this);
-        v.visitBranchInstruction(this);
-        v.visitSelect(this);
-        v.visitLOOKUPSWITCH(this);
-    }
 }

==================================================
LREM.java
index 1e4e31fd19..c57d11c606 100644
--- a/java/org/apache/tomcat/util/bcel/generic/LOR.java
+++ b/java/org/apache/tomcat/util/bcel/generic/LOR.java
@@ -28,21 +28,4 @@ public class LOR extends ArithmeticInstruction {
     public LOR() {
         super(org.apache.tomcat.util.bcel.Constants.LOR);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitLOR(this);
-    }
 }

==================================================
LRETURN.java
index 20b17c5cbf..845a225dbb 100644
--- a/java/org/apache/tomcat/util/bcel/generic/LREM.java
+++ b/java/org/apache/tomcat/util/bcel/generic/LREM.java
@@ -35,22 +35,4 @@ public class LREM extends ArithmeticInstruction implements ExceptionThrower {
             org.apache.tomcat.util.bcel.ExceptionConstants.ARITHMETIC_EXCEPTION
         };
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitLREM(this);
-    }
 }

==================================================
LSHL.java
index cd7f8a630b..e63732245b 100644
--- a/java/org/apache/tomcat/util/bcel/generic/LRETURN.java
+++ b/java/org/apache/tomcat/util/bcel/generic/LRETURN.java
@@ -28,21 +28,4 @@ public class LRETURN extends ReturnInstruction {
     public LRETURN() {
         super(org.apache.tomcat.util.bcel.Constants.LRETURN);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitStackConsumer(this);
-        v.visitReturnInstruction(this);
-        v.visitLRETURN(this);
-    }
 }

==================================================
LSHR.java
index d12463aa54..21794d78b1 100644
--- a/java/org/apache/tomcat/util/bcel/generic/LSHL.java
+++ b/java/org/apache/tomcat/util/bcel/generic/LSHL.java
@@ -28,21 +28,4 @@ public class LSHL extends ArithmeticInstruction {
     public LSHL() {
         super(org.apache.tomcat.util.bcel.Constants.LSHL);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitLSHL(this);
-    }
 }

==================================================
LSTORE.java
index 81af6481cb..8f7d62b68d 100644
--- a/java/org/apache/tomcat/util/bcel/generic/LSHR.java
+++ b/java/org/apache/tomcat/util/bcel/generic/LSHR.java
@@ -28,21 +28,4 @@ public class LSHR extends ArithmeticInstruction {
     public LSHR() {
         super(org.apache.tomcat.util.bcel.Constants.LSHR);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitLSHR(this);
-    }
 }

==================================================
LSUB.java
index 2490af1b0a..6e5ca8ecc3 100644
--- a/java/org/apache/tomcat/util/bcel/generic/LSTORE.java
+++ b/java/org/apache/tomcat/util/bcel/generic/LSTORE.java
@@ -37,18 +37,4 @@ public class LSTORE extends StoreInstruction {
     public LSTORE(int n) {
         super(org.apache.tomcat.util.bcel.Constants.LSTORE, org.apache.tomcat.util.bcel.Constants.LSTORE_0, n);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        super.accept(v);
-        v.visitLSTORE(this);
-    }
 }

==================================================
LUSHR.java
index 5961a5bdc9..d6c3d82eda 100644
--- a/java/org/apache/tomcat/util/bcel/generic/LSUB.java
+++ b/java/org/apache/tomcat/util/bcel/generic/LSUB.java
@@ -29,21 +29,4 @@ public class LSUB extends ArithmeticInstruction {
     public LSUB() {
         super(org.apache.tomcat.util.bcel.Constants.LSUB);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitLSUB(this);
-    }
 }

==================================================
LXOR.java
index 862e498ce9..1dd9a03699 100644
--- a/java/org/apache/tomcat/util/bcel/generic/LUSHR.java
+++ b/java/org/apache/tomcat/util/bcel/generic/LUSHR.java
@@ -28,21 +28,4 @@ public class LUSHR extends ArithmeticInstruction {
     public LUSHR() {
         super(org.apache.tomcat.util.bcel.Constants.LUSHR);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitLUSHR(this);
-    }
 }

==================================================
LoadInstruction.java
index 93f0a99527..30e72fc63e 100644
--- a/java/org/apache/tomcat/util/bcel/generic/LXOR.java
+++ b/java/org/apache/tomcat/util/bcel/generic/LXOR.java
@@ -28,21 +28,4 @@ public class LXOR extends ArithmeticInstruction {
     public LXOR() {
         super(org.apache.tomcat.util.bcel.Constants.LXOR);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitTypedInstruction(this);
-        v.visitStackProducer(this);
-        v.visitStackConsumer(this);
-        v.visitArithmeticInstruction(this);
-        v.visitLXOR(this);
-    }
 }

==================================================
MONITORENTER.java
index 6a7c513b6e..5a4f361f40 100644
--- a/java/org/apache/tomcat/util/bcel/generic/LoadInstruction.java
+++ b/java/org/apache/tomcat/util/bcel/generic/LoadInstruction.java
@@ -43,21 +43,4 @@ public abstract class LoadInstruction extends LocalVariableInstruction implement
     protected LoadInstruction(short opcode, short c_tag, int n) {
         super(opcode, c_tag, n);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackProducer(this);
-        v.visitPushInstruction(this);
-        v.visitTypedInstruction(this);
-        v.visitLocalVariableInstruction(this);
-        v.visitLoadInstruction(this);
-    }
 }

==================================================
MONITOREXIT.java
index c99fd5647e..1f98a60581 100644
--- a/java/org/apache/tomcat/util/bcel/generic/MONITORENTER.java
+++ b/java/org/apache/tomcat/util/bcel/generic/MONITORENTER.java
@@ -35,19 +35,4 @@ public class MONITORENTER extends Instruction implements ExceptionThrower, Stack
             org.apache.tomcat.util.bcel.ExceptionConstants.NULL_POINTER_EXCEPTION
         };
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitExceptionThrower(this);
-        v.visitStackConsumer(this);
-        v.visitMONITORENTER(this);
-    }
 }

==================================================
MULTIANEWARRAY.java
index 38d27b73f9..5560a5cc3a 100644
--- a/java/org/apache/tomcat/util/bcel/generic/MONITOREXIT.java
+++ b/java/org/apache/tomcat/util/bcel/generic/MONITOREXIT.java
@@ -35,19 +35,4 @@ public class MONITOREXIT extends Instruction implements ExceptionThrower, StackC
             org.apache.tomcat.util.bcel.ExceptionConstants.NULL_POINTER_EXCEPTION
         };
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitExceptionThrower(this);
-        v.visitStackConsumer(this);
-        v.visitMONITOREXIT(this);
-    }
 }

==================================================
NEW.java
index f86b03e14c..6e68cba1ee 100644
--- a/java/org/apache/tomcat/util/bcel/generic/MULTIANEWARRAY.java
+++ b/java/org/apache/tomcat/util/bcel/generic/MULTIANEWARRAY.java
@@ -125,22 +125,4 @@ public class MULTIANEWARRAY extends CPInstruction implements LoadClass, Allocati
         }
         return (t instanceof ObjectType) ? (ObjectType) t : null;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitLoadClass(this);
-        v.visitAllocationInstruction(this);
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitCPInstruction(this);
-        v.visitMULTIANEWARRAY(this);
-    }
 }

==================================================
NEWARRAY.java
index 9d2aeb5937..c884154327 100644
--- a/java/org/apache/tomcat/util/bcel/generic/NEW.java
+++ b/java/org/apache/tomcat/util/bcel/generic/NEW.java
@@ -54,23 +54,4 @@ public class NEW extends CPInstruction implements LoadClass, AllocationInstructi
     public ObjectType getLoadClassType( ConstantPoolGen cpg ) {
         return (ObjectType) getType(cpg);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitLoadClass(this);
-        v.visitAllocationInstruction(this);
-        v.visitExceptionThrower(this);
-        v.visitStackProducer(this);
-        v.visitTypedInstruction(this);
-        v.visitCPInstruction(this);
-        v.visitNEW(this);
-    }
 }

==================================================
NOP.java
index 22af18de1b..d983785eb9 100644
--- a/java/org/apache/tomcat/util/bcel/generic/NEWARRAY.java
+++ b/java/org/apache/tomcat/util/bcel/generic/NEWARRAY.java
@@ -101,20 +101,4 @@ public class NEWARRAY extends Instruction implements AllocationInstruction, Exce
             org.apache.tomcat.util.bcel.ExceptionConstants.NEGATIVE_ARRAY_SIZE_EXCEPTION
         };
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitAllocationInstruction(this);
-        v.visitExceptionThrower(this);
-        v.visitStackProducer(this);
-        v.visitNEWARRAY(this);
-    }
 }

==================================================
POP.java
index d9f3f5ec27..75a1f57a47 100644
--- a/java/org/apache/tomcat/util/bcel/generic/NOP.java
+++ b/java/org/apache/tomcat/util/bcel/generic/NOP.java
@@ -27,17 +27,4 @@ public class NOP extends Instruction {
     public NOP() {
         super(org.apache.tomcat.util.bcel.Constants.NOP, (short) 1);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitNOP(this);
-    }
 }

==================================================
POP2.java
index 4ca24dc13f..9c6b77cdd4 100644
--- a/java/org/apache/tomcat/util/bcel/generic/POP.java
+++ b/java/org/apache/tomcat/util/bcel/generic/POP.java
@@ -29,20 +29,4 @@ public class POP extends StackInstruction implements PopInstruction {
     public POP() {
         super(org.apache.tomcat.util.bcel.Constants.POP);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitPopInstruction(this);
-        v.visitStackInstruction(this);
-        v.visitPOP(this);
-    }
 }

==================================================
PUTFIELD.java
index ebfd6ad517..3db05f65ff 100644
--- a/java/org/apache/tomcat/util/bcel/generic/POP2.java
+++ b/java/org/apache/tomcat/util/bcel/generic/POP2.java
@@ -29,20 +29,4 @@ public class POP2 extends StackInstruction implements PopInstruction {
     public POP2() {
         super(org.apache.tomcat.util.bcel.Constants.POP2);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitPopInstruction(this);
-        v.visitStackInstruction(this);
-        v.visitPOP2(this);
-    }
 }

==================================================
PUTSTATIC.java
index 133e836369..c34c52c2ce 100644
--- a/java/org/apache/tomcat/util/bcel/generic/PUTFIELD.java
+++ b/java/org/apache/tomcat/util/bcel/generic/PUTFIELD.java
@@ -56,25 +56,4 @@ public class PUTFIELD extends FieldInstruction implements PopInstruction, Except
         cs[ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length] = ExceptionConstants.NULL_POINTER_EXCEPTION;
         return cs;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitExceptionThrower(this);
-        v.visitStackConsumer(this);
-        v.visitPopInstruction(this);
-        v.visitTypedInstruction(this);
-        v.visitLoadClass(this);
-        v.visitCPInstruction(this);
-        v.visitFieldOrMethod(this);
-        v.visitFieldInstruction(this);
-        v.visitPUTFIELD(this);
-    }
 }

==================================================
RET.java
index 3357912625..ce52249b74 100644
--- a/java/org/apache/tomcat/util/bcel/generic/PUTSTATIC.java
+++ b/java/org/apache/tomcat/util/bcel/generic/PUTSTATIC.java
@@ -55,25 +55,4 @@ public class PUTSTATIC extends FieldInstruction implements ExceptionThrower, Pop
         cs[ExceptionConstants.EXCS_FIELD_AND_METHOD_RESOLUTION.length] = ExceptionConstants.INCOMPATIBLE_CLASS_CHANGE_ERROR;
         return cs;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitExceptionThrower(this);
-        v.visitStackConsumer(this);
-        v.visitPopInstruction(this);
-        v.visitTypedInstruction(this);
-        v.visitLoadClass(this);
-        v.visitCPInstruction(this);
-        v.visitFieldOrMethod(this);
-        v.visitFieldInstruction(this);
-        v.visitPUTSTATIC(this);
-    }
 }

==================================================
RETURN.java
index 7a14ed68f5..0bf095c90b 100644
--- a/java/org/apache/tomcat/util/bcel/generic/RET.java
+++ b/java/org/apache/tomcat/util/bcel/generic/RET.java
@@ -123,17 +123,4 @@ public class RET extends Instruction implements IndexedInstruction, TypedInstruc
     public Type getType( ConstantPoolGen cp ) {
         return ReturnaddressType.NO_TARGET;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitRET(this);
-    }
 }

==================================================
SALOAD.java
index afb438b2c4..e9f25c904e 100644
--- a/java/org/apache/tomcat/util/bcel/generic/RETURN.java
+++ b/java/org/apache/tomcat/util/bcel/generic/RETURN.java
@@ -28,21 +28,4 @@ public class RETURN extends ReturnInstruction {
     public RETURN() {
         super(org.apache.tomcat.util.bcel.Constants.RETURN);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitStackConsumer(this);
-        v.visitReturnInstruction(this);
-        v.visitRETURN(this);
-    }
 }

==================================================
SASTORE.java
index bf7a69f9f2..8942646164 100644
--- a/java/org/apache/tomcat/util/bcel/generic/SALOAD.java
+++ b/java/org/apache/tomcat/util/bcel/generic/SALOAD.java
@@ -28,21 +28,4 @@ public class SALOAD extends ArrayInstruction implements StackProducer {
     public SALOAD() {
         super(org.apache.tomcat.util.bcel.Constants.SALOAD);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackProducer(this);
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitArrayInstruction(this);
-        v.visitSALOAD(this);
-    }
 }

==================================================
SIPUSH.java
index f6908f7836..94c1b8c7f6 100644
--- a/java/org/apache/tomcat/util/bcel/generic/SASTORE.java
+++ b/java/org/apache/tomcat/util/bcel/generic/SASTORE.java
@@ -28,21 +28,4 @@ public class SASTORE extends ArrayInstruction implements StackConsumer {
     public SASTORE() {
         super(org.apache.tomcat.util.bcel.Constants.SASTORE);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitExceptionThrower(this);
-        v.visitTypedInstruction(this);
-        v.visitArrayInstruction(this);
-        v.visitSASTORE(this);
-    }
 }

==================================================
SWAP.java
index 890d8dd51e..85448a7e17 100644
--- a/java/org/apache/tomcat/util/bcel/generic/SIPUSH.java
+++ b/java/org/apache/tomcat/util/bcel/generic/SIPUSH.java
@@ -83,21 +83,4 @@ public class SIPUSH extends Instruction implements ConstantPushInstruction {
     public Type getType( ConstantPoolGen cp ) {
         return Type.SHORT;
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitPushInstruction(this);
-        v.visitStackProducer(this);
-        v.visitTypedInstruction(this);
-        v.visitConstantPushInstruction(this);
-        v.visitSIPUSH(this);
-    }
 }

==================================================
StoreInstruction.java
index 71ced13661..abc3432c00 100644
--- a/java/org/apache/tomcat/util/bcel/generic/SWAP.java
+++ b/java/org/apache/tomcat/util/bcel/generic/SWAP.java
@@ -28,20 +28,4 @@ public class SWAP extends StackInstruction implements StackConsumer, StackProduc
     public SWAP() {
         super(org.apache.tomcat.util.bcel.Constants.SWAP);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitStackProducer(this);
-        v.visitStackInstruction(this);
-        v.visitSWAP(this);
-    }
 }

==================================================
TABLESWITCH.java
index 6ce354f43c..bf4d42620e 100644
--- a/java/org/apache/tomcat/util/bcel/generic/StoreInstruction.java
+++ b/java/org/apache/tomcat/util/bcel/generic/StoreInstruction.java
@@ -43,21 +43,4 @@ public abstract class StoreInstruction extends LocalVariableInstruction implemen
     protected StoreInstruction(short opcode, short c_tag, int n) {
         super(opcode, c_tag, n);
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitStackConsumer(this);
-        v.visitPopInstruction(this);
-        v.visitTypedInstruction(this);
-        v.visitLocalVariableInstruction(this);
-        v.visitStoreInstruction(this);
-    }
 }

==================================================
Visitor.java
index 15a3f5bd50..2d2e7134a4 100644
--- a/java/org/apache/tomcat/util/bcel/generic/TABLESWITCH.java
+++ b/java/org/apache/tomcat/util/bcel/generic/TABLESWITCH.java
@@ -87,21 +87,4 @@ public class TABLESWITCH extends Select {
             indices[i] = bytes.readInt();
         }
     }
-
-
-    /**
-     * Call corresponding visitor method(s). The order is:
-     * Call visitor methods of implemented interfaces first, then
-     * call methods according to the class hierarchy in descending order,
-     * i.e., the most specific visitXXX() call comes last.
-     *
-     * @param v Visitor object
-     */
-    public void accept( Visitor v ) {
-        v.visitVariableLengthInstruction(this);
-        v.visitStackProducer(this);
-        v.visitBranchInstruction(this);
-        v.visitSelect(this);
-        v.visitTABLESWITCH(this);
-    }
 }

==================================================
BCELFactory.java
deleted file mode 100644
index 65b4838c98..0000000000
--- a/java/org/apache/tomcat/util/bcel/generic/Visitor.java
+++ /dev/null
@@ -1,568 +0,0 @@
-/*
- * Copyright  2000-2009 The Apache Software Foundation
- *
- *  Licensed under the Apache License, Version 2.0 (the "License"); 
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License. 
- *
- */
-package org.apache.tomcat.util.bcel.generic;
-
-/**
- * Interface implementing the Visitor pattern programming style.
- * I.e., a class that implements this interface can handle all types of
- * instructions with the properly typed methods just by calling the accept()
- * method.
- *
- * @version $Id$
- * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
- */
-public interface Visitor {
-
-    public void visitStackInstruction( StackInstruction obj );
-
-
-    public void visitLocalVariableInstruction( LocalVariableInstruction obj );
-
-
-    public void visitBranchInstruction( BranchInstruction obj );
-
-
-    public void visitLoadClass( LoadClass obj );
-
-
-    public void visitFieldInstruction( FieldInstruction obj );
-
-
-    public void visitIfInstruction( IfInstruction obj );
-
-
-    public void visitConversionInstruction( ConversionInstruction obj );
-
-
-    public void visitPopInstruction( PopInstruction obj );
-
-
-    public void visitStoreInstruction( StoreInstruction obj );
-
-
-    public void visitTypedInstruction( TypedInstruction obj );
-
-
-    public void visitSelect( Select obj );
-
-
-    public void visitJsrInstruction( JsrInstruction obj );
-
-
-    public void visitGotoInstruction( GotoInstruction obj );
-
-
-    public void visitUnconditionalBranch( UnconditionalBranch obj );
-
-
-    public void visitPushInstruction( PushInstruction obj );
-
-
-    public void visitArithmeticInstruction( ArithmeticInstruction obj );
-
-
-    public void visitCPInstruction( CPInstruction obj );
-
-
-    public void visitInvokeInstruction( InvokeInstruction obj );
-
-
-    public void visitArrayInstruction( ArrayInstruction obj );
-
-
-    public void visitAllocationInstruction( AllocationInstruction obj );
-
-
-    public void visitReturnInstruction( ReturnInstruction obj );
-
-
-    public void visitFieldOrMethod( FieldOrMethod obj );
-
-
-    public void visitConstantPushInstruction( ConstantPushInstruction obj );
-
-
-    public void visitExceptionThrower( ExceptionThrower obj );
-
-
-    public void visitLoadInstruction( LoadInstruction obj );
-
-
-    public void visitVariableLengthInstruction( VariableLengthInstruction obj );
-
-
-    public void visitStackProducer( StackProducer obj );
-
-
-    public void visitStackConsumer( StackConsumer obj );
-
-
-    public void visitACONST_NULL( ACONST_NULL obj );
-
-
-    public void visitGETSTATIC( GETSTATIC obj );
-
-
-    public void visitIF_ICMPLT( IF_ICMPLT obj );
-
-
-    public void visitMONITOREXIT( MONITOREXIT obj );
-
-
-    public void visitIFLT( IFLT obj );
-
-
-    public void visitLSTORE( LSTORE obj );
-
-
-    public void visitPOP2( POP2 obj );
-
-
-    public void visitBASTORE( BASTORE obj );
-
-
-    public void visitISTORE( ISTORE obj );
-
-
-    public void visitCHECKCAST( CHECKCAST obj );
-
-
-    public void visitFCMPG( FCMPG obj );
-
-
-    public void visitI2F( I2F obj );
-
-
-    public void visitATHROW( ATHROW obj );
-
-
-    public void visitDCMPL( DCMPL obj );
-
-
-    public void visitARRAYLENGTH( ARRAYLENGTH obj );
-
-
-    public void visitDUP( DUP obj );
-
-
-    public void visitINVOKESTATIC( INVOKESTATIC obj );
-
-
-    public void visitLCONST( LCONST obj );
-
-
-    public void visitDREM( DREM obj );
-
-
-    public void visitIFGE( IFGE obj );
-
-
-    public void visitCALOAD( CALOAD obj );
-
-
-    public void visitLASTORE( LASTORE obj );
-
-
-    public void visitI2D( I2D obj );
-
-
-    public void visitDADD( DADD obj );
-
-
-    public void visitINVOKESPECIAL( INVOKESPECIAL obj );
-
-
-    public void visitIAND( IAND obj );
-
-
-    public void visitPUTFIELD( PUTFIELD obj );
-
-
-    public void visitILOAD( ILOAD obj );
-
-
-    public void visitDLOAD( DLOAD obj );
-
-
-    public void visitDCONST( DCONST obj );
-
-
-    public void visitNEW( NEW obj );
-
-
-    public void visitIFNULL( IFNULL obj );
-
-
-    public void visitLSUB( LSUB obj );
-
-
-    public void visitL2I( L2I obj );
-
-
-    public void visitISHR( ISHR obj );
-
-
-    public void visitTABLESWITCH( TABLESWITCH obj );
-
-
-    public void visitIINC( IINC obj );
-
-
-    public void visitDRETURN( DRETURN obj );
-
-
-    public void visitFSTORE( FSTORE obj );
-
-
-    public void visitDASTORE( DASTORE obj );
-
-
-    public void visitIALOAD( IALOAD obj );
-
-
-    public void visitDDIV( DDIV obj );
-
-
-    public void visitIF_ICMPGE( IF_ICMPGE obj );
-
-
-    public void visitLAND( LAND obj );
-
-
-    public void visitIDIV( IDIV obj );
-
-
-    public void visitLOR( LOR obj );
-
-
-    public void visitCASTORE( CASTORE obj );
-
-
-    public void visitFREM( FREM obj );
-
-
-    public void visitLDC( LDC obj );
-
-
-    public void visitBIPUSH( BIPUSH obj );
-
-
-    public void visitDSTORE( DSTORE obj );
-
-
-    public void visitF2L( F2L obj );
-
-
-    public void visitFMUL( FMUL obj );
-
-
-    public void visitLLOAD( LLOAD obj );
-
-
-    public void visitJSR( JSR obj );
-
-
-    public void visitFSUB( FSUB obj );
-
-
-    public void visitSASTORE( SASTORE obj );
-
-
-    public void visitALOAD( ALOAD obj );
-
-
-    public void visitDUP2_X2( DUP2_X2 obj );
-
-
-    public void visitRETURN( RETURN obj );
-
-
-    public void visitDALOAD( DALOAD obj );
-
-
-    public void visitSIPUSH( SIPUSH obj );
-
-
-    public void visitDSUB( DSUB obj );
-
-
-    public void visitL2F( L2F obj );
-
-
-    public void visitIF_ICMPGT( IF_ICMPGT obj );
-
-
-    public void visitF2D( F2D obj );
-
-
-    public void visitI2L( I2L obj );
-
-
-    public void visitIF_ACMPNE( IF_ACMPNE obj );
-
-
-    public void visitPOP( POP obj );
-
-
-    public void visitI2S( I2S obj );
-
-
-    public void visitIFEQ( IFEQ obj );
-
-
-    public void visitSWAP( SWAP obj );
-
-
-    public void visitIOR( IOR obj );
-
-
-    public void visitIREM( IREM obj );
-
-
-    public void visitIASTORE( IASTORE obj );
-
-
-    public void visitNEWARRAY( NEWARRAY obj );
-
-
-    public void visitINVOKEINTERFACE( INVOKEINTERFACE obj );
-
-
-    public void visitINEG( INEG obj );
-
-
-    public void visitLCMP( LCMP obj );
-
-
-    public void visitJSR_W( JSR_W obj );
-
-
-    public void visitMULTIANEWARRAY( MULTIANEWARRAY obj );
-
-
-    public void visitDUP_X2( DUP_X2 obj );
-
-
-    public void visitSALOAD( SALOAD obj );
-
-
-    public void visitIFNONNULL( IFNONNULL obj );
-
-
-    public void visitDMUL( DMUL obj );
-
-
-    public void visitIFNE( IFNE obj );
-
-
-    public void visitIF_ICMPLE( IF_ICMPLE obj );
-
-
-    public void visitLDC2_W( LDC2_W obj );
-
-
-    public void visitGETFIELD( GETFIELD obj );
-
-
-    public void visitLADD( LADD obj );
-
-
-    public void visitNOP( NOP obj );
-
-
-    public void visitFALOAD( FALOAD obj );
-
-
-    public void visitINSTANCEOF( INSTANCEOF obj );
-
-
-    public void visitIFLE( IFLE obj );
-
-
-    public void visitLXOR( LXOR obj );
-
-
-    public void visitLRETURN( LRETURN obj );
-
-
-    public void visitFCONST( FCONST obj );
-
-
-    public void visitIUSHR( IUSHR obj );
-
-
-    public void visitBALOAD( BALOAD obj );
-
-
-    public void visitDUP2( DUP2 obj );
-
-
-    public void visitIF_ACMPEQ( IF_ACMPEQ obj );
-
-
-    public void visitIMPDEP1( IMPDEP1 obj );
-
-
-    public void visitMONITORENTER( MONITORENTER obj );
-
-
-    public void visitLSHL( LSHL obj );
-
-
-    public void visitDCMPG( DCMPG obj );
-
-
-    public void visitD2L( D2L obj );
-
-
-    public void visitIMPDEP2( IMPDEP2 obj );
-
-
-    public void visitL2D( L2D obj );
-
-
-    public void visitRET( RET obj );
-
-
-    public void visitIFGT( IFGT obj );
-
-
-    public void visitIXOR( IXOR obj );
-
-
-    public void visitINVOKEVIRTUAL( INVOKEVIRTUAL obj );
-
-
-    public void visitFASTORE( FASTORE obj );
-
-
-    public void visitIRETURN( IRETURN obj );
-
-
-    public void visitIF_ICMPNE( IF_ICMPNE obj );
-
-
-    public void visitFLOAD( FLOAD obj );
-
-
-    public void visitLDIV( LDIV obj );
-
-
-    public void visitPUTSTATIC( PUTSTATIC obj );
-
-
-    public void visitAALOAD( AALOAD obj );
-
-
-    public void visitD2I( D2I obj );
-
-
-    public void visitIF_ICMPEQ( IF_ICMPEQ obj );
-
-
-    public void visitAASTORE( AASTORE obj );
-
-
-    public void visitARETURN( ARETURN obj );
-
-
-    public void visitDUP2_X1( DUP2_X1 obj );
-
-
-    public void visitFNEG( FNEG obj );
-
-
-    public void visitGOTO_W( GOTO_W obj );
-
-
-    public void visitD2F( D2F obj );
-
-
-    public void visitGOTO( GOTO obj );
-
-
-    public void visitISUB( ISUB obj );
-
-
-    public void visitF2I( F2I obj );
-
-
-    public void visitDNEG( DNEG obj );
-
-
-    public void visitICONST( ICONST obj );
-
-
-    public void visitFDIV( FDIV obj );
-
-
-    public void visitI2B( I2B obj );
-
-
-    public void visitLNEG( LNEG obj );
-
-
-    public void visitLREM( LREM obj );
-
-
-    public void visitIMUL( IMUL obj );
-
-
-    public void visitIADD( IADD obj );
-
-
-    public void visitLSHR( LSHR obj );
-
-
-    public void visitLOOKUPSWITCH( LOOKUPSWITCH obj );
-
-
-    public void visitDUP_X1( DUP_X1 obj );
-
-
-    public void visitFCMPL( FCMPL obj );
-
-
-    public void visitI2C( I2C obj );
-
-
-    public void visitLMUL( LMUL obj );
-
-
-    public void visitLUSHR( LUSHR obj );
-
-
-    public void visitISHL( ISHL obj );
-
-
-    public void visitLALOAD( LALOAD obj );
-
-
-    public void visitASTORE( ASTORE obj );
-
-
-    public void visitANEWARRAY( ANEWARRAY obj );
-
-
-    public void visitFRETURN( FRETURN obj );
-
-
-    public void visitFADD( FADD obj );
-
-
-    public void visitBREAKPOINT( BREAKPOINT obj );
-}

==================================================
BCELifier.java
deleted file mode 100644
index 0cdd27ad32..0000000000
--- a/java/org/apache/tomcat/util/bcel/util/BCELFactory.java
+++ /dev/null
@@ -1,332 +0,0 @@
-/*
- * Copyright  2000-2009 The Apache Software Foundation
- *
- *  Licensed under the Apache License, Version 2.0 (the "License"); 
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License. 
- *
- */
-package org.apache.tomcat.util.bcel.util;
-
-import java.io.PrintWriter;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-
-import org.apache.tomcat.util.bcel.Constants;
-import org.apache.tomcat.util.bcel.classfile.Utility;
-import org.apache.tomcat.util.bcel.generic.AllocationInstruction;
-import org.apache.tomcat.util.bcel.generic.ArrayInstruction;
-import org.apache.tomcat.util.bcel.generic.ArrayType;
-import org.apache.tomcat.util.bcel.generic.BranchHandle;
-import org.apache.tomcat.util.bcel.generic.BranchInstruction;
-import org.apache.tomcat.util.bcel.generic.CHECKCAST;
-import org.apache.tomcat.util.bcel.generic.CPInstruction;
-import org.apache.tomcat.util.bcel.generic.CodeExceptionGen;
-import org.apache.tomcat.util.bcel.generic.ConstantPoolGen;
-import org.apache.tomcat.util.bcel.generic.ConstantPushInstruction;
-import org.apache.tomcat.util.bcel.generic.EmptyVisitor;
-import org.apache.tomcat.util.bcel.generic.FieldInstruction;
-import org.apache.tomcat.util.bcel.generic.IINC;
-import org.apache.tomcat.util.bcel.generic.INSTANCEOF;
-import org.apache.tomcat.util.bcel.generic.Instruction;
-import org.apache.tomcat.util.bcel.generic.InstructionConstants;
-import org.apache.tomcat.util.bcel.generic.InstructionHandle;
-import org.apache.tomcat.util.bcel.generic.InvokeInstruction;
-import org.apache.tomcat.util.bcel.generic.LDC;
-import org.apache.tomcat.util.bcel.generic.LDC2_W;
-import org.apache.tomcat.util.bcel.generic.LocalVariableInstruction;
-import org.apache.tomcat.util.bcel.generic.MULTIANEWARRAY;
-import org.apache.tomcat.util.bcel.generic.MethodGen;
-import org.apache.tomcat.util.bcel.generic.NEWARRAY;
-import org.apache.tomcat.util.bcel.generic.ObjectType;
-import org.apache.tomcat.util.bcel.generic.RET;
-import org.apache.tomcat.util.bcel.generic.ReturnInstruction;
-import org.apache.tomcat.util.bcel.generic.Select;
-import org.apache.tomcat.util.bcel.generic.Type;
-
-/**
- * Factory creates il.append() statements, and sets instruction targets.
- * A helper class for BCELifier.
- *
- * @see BCELifier
- * @version $Id$
- * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
- */
-class BCELFactory extends EmptyVisitor {
-
-    private MethodGen _mg;
-    private PrintWriter _out;
-    private ConstantPoolGen _cp;
-
-
-    BCELFactory(MethodGen mg, PrintWriter out) {
-        _mg = mg;
-        _cp = mg.getConstantPool();
-        _out = out;
-    }
-
-    private Map branch_map = new HashMap(); // Map<Instruction, InstructionHandle>
-
-
-    public void start() {
-        if (!_mg.isAbstract() && !_mg.isNative()) {
-            for (InstructionHandle ih = _mg.getInstructionList().getStart(); ih != null; ih = ih
-                    .getNext()) {
-                Instruction i = ih.getInstruction();
-                if (i instanceof BranchInstruction) {
-                    branch_map.put(i, ih); // memorize container
-                }
-                if (ih.hasTargeters()) {
-                    if (i instanceof BranchInstruction) {
-                        _out.println("    InstructionHandle ih_" + ih.getPosition() + ";");
-                    } else {
-                        _out.print("    InstructionHandle ih_" + ih.getPosition() + " = ");
-                    }
-                } else {
-                    _out.print("    ");
-                }
-                if (!visitInstruction(i)) {
-                    i.accept(this);
-                }
-            }
-            updateBranchTargets();
-            updateExceptionHandlers();
-        }
-    }
-
-
-    private boolean visitInstruction( Instruction i ) {
-        short opcode = i.getOpcode();
-        if ((InstructionConstants.INSTRUCTIONS[opcode] != null)
-                && !(i instanceof ConstantPushInstruction) && !(i instanceof ReturnInstruction)) { // Handled below
-            _out.println("il.append(InstructionConstants."
-                    + i.getName().toUpperCase(Locale.ENGLISH) + ");");
-            return true;
-        }
-        return false;
-    }
-
-
-    public void visitLocalVariableInstruction( LocalVariableInstruction i ) {
-        short opcode = i.getOpcode();
-        Type type = i.getType(_cp);
-        if (opcode == Constants.IINC) {
-            _out.println("il.append(new IINC(" + i.getIndex() + ", " + ((IINC) i).getIncrement()
-                    + "));");
-        } else {
-            String kind = (opcode < Constants.ISTORE) ? "Load" : "Store";
-            _out.println("il.append(_factory.create" + kind + "(" + BCELifier.printType(type)
-                    + ", " + i.getIndex() + "));");
-        }
-    }
-
-
-    public void visitArrayInstruction( ArrayInstruction i ) {
-        short opcode = i.getOpcode();
-        Type type = i.getType(_cp);
-        String kind = (opcode < Constants.IASTORE) ? "Load" : "Store";
-        _out.println("il.append(_factory.createArray" + kind + "(" + BCELifier.printType(type)
-                + "));");
-    }
-
-
-    public void visitFieldInstruction( FieldInstruction i ) {
-        short opcode = i.getOpcode();
-        String class_name = i.getClassName(_cp);
-        String field_name = i.getFieldName(_cp);
-        Type type = i.getFieldType(_cp);
-        _out.println("il.append(_factory.createFieldAccess(\"" + class_name + "\", \"" + field_name
-                + "\", " + BCELifier.printType(type) + ", " + "Constants."
-                + Constants.OPCODE_NAMES[opcode].toUpperCase(Locale.ENGLISH) + "));");
-    }
-
-
-    public void visitInvokeInstruction( InvokeInstruction i ) {
-        short opcode = i.getOpcode();
-        String class_name = i.getClassName(_cp);
-        String method_name = i.getMethodName(_cp);
-        Type type = i.getReturnType(_cp);
-        Type[] arg_types = i.getArgumentTypes(_cp);
-        _out.println("il.append(_factory.createInvoke(\"" + class_name + "\", \"" + method_name
-                + "\", " + BCELifier.printType(type) + ", "
-                + BCELifier.printArgumentTypes(arg_types) + ", " + "Constants."
-                + Constants.OPCODE_NAMES[opcode].toUpperCase(Locale.ENGLISH) + "));");
-    }
-
-
-    public void visitAllocationInstruction( AllocationInstruction i ) {
-        Type type;
-        if (i instanceof CPInstruction) {
-            type = ((CPInstruction) i).getType(_cp);
-        } else {
-            type = ((NEWARRAY) i).getType();
-        }
-        short opcode = ((Instruction) i).getOpcode();
-        int dim = 1;
-        switch (opcode) {
-            case Constants.NEW:
-                _out.println("il.append(_factory.createNew(\"" + ((ObjectType) type).getClassName()
-                        + "\"));");
-                break;
-            case Constants.MULTIANEWARRAY:
-                dim = ((MULTIANEWARRAY) i).getDimensions();
-                /* FALL THRU */
-            case Constants.ANEWARRAY:
-            case Constants.NEWARRAY:
-                if (type instanceof ArrayType) {
-                    type = ((ArrayType) type).getBasicType();
-                }
-                _out.println("il.append(_factory.createNewArray(" + BCELifier.printType(type)
-                        + ", (short) " + dim + "));");
-                break;
-            default:
-                throw new RuntimeException("Oops: " + opcode);
-        }
-    }
-
-
-    private void createConstant( Object value ) {
-        String embed = value.toString();
-        if (value instanceof String) {
-            embed = '"' + Utility.convertString(embed) + '"';
-        } else if (value instanceof Character) {
-            embed = "(char)0x" + Integer.toHexString(((Character) value).charValue());
-        } else if (value instanceof Float) {
-            embed += "f";
-        } else if (value instanceof Long) {
-            embed += "L";
-        }
-        _out.println("il.append(new PUSH(_cp, " + embed + "));");
-    }
-
-
-    public void visitLDC( LDC i ) {
-        createConstant(i.getValue(_cp));
-    }
-
-
-    public void visitLDC2_W( LDC2_W i ) {
-        createConstant(i.getValue(_cp));
-    }
-
-
-    public void visitConstantPushInstruction( ConstantPushInstruction i ) {
-        createConstant(i.getValue());
-    }
-
-
-    public void visitINSTANCEOF( INSTANCEOF i ) {
-        Type type = i.getType(_cp);
-        _out.println("il.append(new INSTANCEOF(_cp.addClass(" + BCELifier.printType(type) + ")));");
-    }
-
-
-    public void visitCHECKCAST( CHECKCAST i ) {
-        Type type = i.getType(_cp);
-        _out.println("il.append(_factory.createCheckCast(" + BCELifier.printType(type) + "));");
-    }
-
-
-    public void visitReturnInstruction( ReturnInstruction i ) {
-        Type type = i.getType(_cp);
-        _out.println("il.append(_factory.createReturn(" + BCELifier.printType(type) + "));");
-    }
-
-    // Memorize BranchInstructions that need an update
-    private List branches = new ArrayList();
-
-
-    public void visitBranchInstruction( BranchInstruction bi ) {
-        BranchHandle bh = (BranchHandle) branch_map.get(bi);
-        int pos = bh.getPosition();
-        String name = bi.getName() + "_" + pos;
-        if (bi instanceof Select) {
-            Select s = (Select) bi;
-            branches.add(bi);
-            StringBuffer args = new StringBuffer("new int[] { ");
-            int[] matchs = s.getMatchs();
-            for (int i = 0; i < matchs.length; i++) {
-                args.append(matchs[i]);
-                if (i < matchs.length - 1) {
-                    args.append(", ");
-                }
-            }
-            args.append(" }");
-            _out.print("Select " + name + " = new " + bi.getName().toUpperCase(Locale.ENGLISH)
-                    + "(" + args + ", new InstructionHandle[] { ");
-            for (int i = 0; i < matchs.length; i++) {
-                _out.print("null");
-                if (i < matchs.length - 1) {
-                    _out.print(", ");
-                }
-            }
-            _out.println(" }, null);");
-        } else {
-            int t_pos = bh.getTarget().getPosition();
-            String target;
-            if (pos > t_pos) {
-                target = "ih_" + t_pos;
-            } else {
-                branches.add(bi);
-                target = "null";
-            }
-            _out.println("    BranchInstruction " + name + " = _factory.createBranchInstruction("
-                    + "Constants." + bi.getName().toUpperCase(Locale.ENGLISH) + ", " + target
-                    + ");");
-        }
-        if (bh.hasTargeters()) {
-            _out.println("    ih_" + pos + " = il.append(" + name + ");");
-        } else {
-            _out.println("    il.append(" + name + ");");
-        }
-    }
-
-
-    public void visitRET( RET i ) {
-        _out.println("il.append(new RET(" + i.getIndex() + ")));");
-    }
-
-
-    private void updateBranchTargets() {
-        for (Iterator i = branches.iterator(); i.hasNext();) {
-            BranchInstruction bi = (BranchInstruction) i.next();
-            BranchHandle bh = (BranchHandle) branch_map.get(bi);
-            int pos = bh.getPosition();
-            String name = bi.getName() + "_" + pos;
-            int t_pos = bh.getTarget().getPosition();
-            _out.println("    " + name + ".setTarget(ih_" + t_pos + ");");
-            if (bi instanceof Select) {
-                InstructionHandle[] ihs = ((Select) bi).getTargets();
-                for (int j = 0; j < ihs.length; j++) {
-                    t_pos = ihs[j].getPosition();
-                    _out.println("    " + name + ".setTarget(" + j + ", ih_" + t_pos + ");");
-                }
-            }
-        }
-    }
-
-
-    private void updateExceptionHandlers() {
-        CodeExceptionGen[] handlers = _mg.getExceptionHandlers();
-        for (int i = 0; i < handlers.length; i++) {
-            CodeExceptionGen h = handlers[i];
-            String type = (h.getCatchType() == null) ? "null" : BCELifier.printType(h
-                    .getCatchType());
-            _out.println("    method.addExceptionHandler(" + "ih_" + h.getStartPC().getPosition()
-                    + ", " + "ih_" + h.getEndPC().getPosition() + ", " + "ih_"
-                    + h.getHandlerPC().getPosition() + ", " + type + ");");
-        }
-    }
-}

==================================================
