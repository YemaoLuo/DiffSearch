cf3139d56f075ee3c1df3810514f92884283470d
==================================================
Code formatting.
==================================================
Mark Emlyn
==================================================
Sun Sep 7 22:54:07 2014 +0000
==================================================
BeanELResolver.java
Code formatting.
Operator wrap -> eol
No functional change

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1623244 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CompositeELResolver.java
index ec6ef66c73..3b40e8cf73 100644
--- a/java/javax/el/BeanELResolver.java
+++ b/java/javax/el/BeanELResolver.java
@@ -185,8 +185,7 @@ public class BeanELResolver extends ELResolver {
         }
 
         context.setPropertyResolved(base, property);
-        return this.readOnly
-                || this.property(context, base, property).isReadOnly();
+        return this.readOnly || this.property(context, base, property).isReadOnly();
     }
 
     @Override
@@ -281,8 +280,8 @@ public class BeanELResolver extends ELResolver {
         }
 
         public boolean isReadOnly() {
-            return this.write == null
-                && (null == (this.write = Util.getMethod(this.owner, descriptor.getWriteMethod())));
+            return this.write == null &&
+                    (null == (this.write = Util.getMethod(this.owner, descriptor.getWriteMethod())));
         }
 
         public Method getWriteMethod() {

==================================================
Util.java
index f801f7e829..d1bc7bd0b2 100644
--- a/java/javax/el/CompositeELResolver.java
+++ b/java/javax/el/CompositeELResolver.java
@@ -154,8 +154,8 @@ public class CompositeELResolver extends ELResolver {
         Class<?> commonType = null, type = null;
         for (int i = 0; i < sz; i++) {
             type = this.resolvers[i].getCommonPropertyType(context, base);
-            if (type != null
-                    && (commonType == null || commonType.isAssignableFrom(type))) {
+            if (type != null &&
+                    (commonType == null || commonType.isAssignableFrom(type))) {
                 commonType = type;
             }
         }

==================================================
HttpUtils.java
index 256f331f18..93388359ff 100644
--- a/java/javax/el/Util.java
+++ b/java/javax/el/Util.java
@@ -74,8 +74,7 @@ class Util {
             }
             return template;
         } catch (MissingResourceException e) {
-            return "Missing Resource: '" + name + "' for Locale "
-                    + locale.getDisplayName();
+            return "Missing Resource: '" + name + "' for Locale " + locale.getDisplayName();
         }
     }
 

==================================================
SimpleTagSupport.java
index a0b4971d2f..6c655925a9 100644
--- a/java/javax/servlet/http/HttpUtils.java
+++ b/java/javax/servlet/http/HttpUtils.java
@@ -267,8 +267,7 @@ public class HttpUtils {
         url.append (scheme);                // http, https
         url.append ("://");
         url.append (req.getServerName ());
-        if ((scheme.equals ("http") && port != 80)
-                || (scheme.equals ("https") && port != 443)) {
+        if ((scheme.equals ("http") && port != 80) || (scheme.equals ("https") && port != 443)) {
             url.append (':');
             url.append (req.getServerPort ());
         }

==================================================
