3e2acc090a3060f97ca4c5b395c8702b38d485d2
==================================================
Fix IDE warnings
==================================================
Mark Thomas
==================================================
Tue Oct 9 18:53:53 2018 +0000
==================================================
AbstractStreamProvider.java
Fix IDE warnings

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1843327 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CloudMembershipService.java
index ce37610ca4..bb4097cbce 100644
--- a/java/org/apache/catalina/tribes/membership/cloud/AbstractStreamProvider.java
+++ b/java/org/apache/catalina/tribes/membership/cloud/AbstractStreamProvider.java
@@ -38,8 +38,11 @@ public abstract class AbstractStreamProvider implements StreamProvider {
 
     protected static final TrustManager[] INSECURE_TRUST_MANAGERS = new TrustManager[] {
             new X509TrustManager() {
+                @Override
                 public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {}
+                @Override
                 public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {}
+                @Override
                 public X509Certificate[] getAcceptedIssuers() {
                     return null;
                 }
@@ -57,7 +60,8 @@ public abstract class AbstractStreamProvider implements StreamProvider {
      */
     public URLConnection openConnection(String url, Map<String, String> headers, int connectTimeout, int readTimeout) throws IOException {
         if (log.isDebugEnabled()) {
-            log.debug(String.format("%s opening connection: url [%s], headers [%s], connectTimeout [%s], readTimeout [%s]", getClass().getSimpleName(), url, headers, connectTimeout, readTimeout));
+            log.debug(String.format("%s opening connection: url [%s], headers [%s], connectTimeout [%s], readTimeout [%s]",
+                    getClass().getSimpleName(), url, headers, Integer.toString(connectTimeout), Integer.toString(readTimeout)));
         }
         URLConnection connection = new URL(url).openConnection();
         if (headers != null) {
@@ -67,7 +71,8 @@ public abstract class AbstractStreamProvider implements StreamProvider {
         }
         if (connectTimeout < 0 || readTimeout < 0) {
             throw new IllegalArgumentException(
-                String.format("Neither connectTimeout [%s] nor readTimeout [%s] can be less than 0 for URLConnection.", connectTimeout, readTimeout));
+                String.format("Neither connectTimeout [%s] nor readTimeout [%s] can be less than 0 for URLConnection.",
+                        Integer.toString(connectTimeout), Integer.toString(readTimeout)));
         }
         connection.setConnectTimeout(connectTimeout);
         connection.setReadTimeout(readTimeout);

==================================================
InsecureStreamProvider.java
index d7fbc75f33..413cfed4e4 100644
--- a/java/org/apache/catalina/tribes/membership/cloud/CloudMembershipService.java
+++ b/java/org/apache/catalina/tribes/membership/cloud/CloudMembershipService.java
@@ -146,7 +146,8 @@ public class CloudMembershipService extends MembershipServiceBase {
     @Override
     public void setLocalMemberProperties(String listenHost, int listenPort, int securePort, int udpPort) {
         if (log.isDebugEnabled()) {
-            log.debug(String.format("setLocalMemberProperties(%s, %d, %d, %d)", listenHost, listenPort, securePort, udpPort));
+            log.debug(String.format("setLocalMemberProperties(%s, %d, %d, %d)", listenHost,
+                    Integer.toString(listenPort), Integer.toString(securePort), Integer.toString(udpPort)));
         }
         properties.setProperty("tcpListenHost", listenHost);
         properties.setProperty("tcpListenPort", String.valueOf(listenPort));

==================================================
