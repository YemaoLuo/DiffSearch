6c0852061a537784f11b9fe30647c65c796b0959
==================================================
Add early detection of invalid sequences - Autobahn tests now pass in full.
==================================================
Mark Emlyn
==================================================
Thu Dec 27 22:52:45 2012 +0000
==================================================
Utf8Decoder.java
Add early detection of invalid sequences - Autobahn tests now pass in full.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1426356 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestUtf8.java
index 0b349b3a35..fd7f891e9c 100644
--- a/java/org/apache/tomcat/websocket/Utf8Decoder.java
+++ b/java/org/apache/tomcat/websocket/Utf8Decoder.java
@@ -99,6 +99,9 @@ public class Utf8Decoder extends CharsetDecoder {
                         return CoderResult.malformedForLength(1);
                     }
                     if (limit - pos < 1 + tail) {
+                        // No early test for invalid sequences here as peeking
+                        // at the next byte is harder (and Tomcat's WebSocket
+                        // implementation always uses array backed buffers)
                         return CoderResult.UNDERFLOW;
                     }
                     int nextByte;
@@ -116,10 +119,14 @@ public class Utf8Decoder extends CharsetDecoder {
                     }
                     pos += tail;
                 }
-                // Note: This is the additional test added
-                if ((jchar >= 0xD800 && jchar <= 0xDFFF) || jchar > 0x10FFFF) {
+                // Apache Tomcat added test
+                if (jchar >= 0xD800 && jchar <= 0xDFFF) {
                     return CoderResult.unmappableForLength(3);
                 }
+                // Apache Tomcat added test
+                if (jchar > 0x10FFFF) {
+                    return CoderResult.unmappableForLength(4);
+                }
                 if (jchar <= 0xffff) {
                     out.put((char) jchar);
                     outRemaining--;
@@ -162,6 +169,13 @@ public class Utf8Decoder extends CharsetDecoder {
                     return CoderResult.malformedForLength(1);
                 }
                 if (inIndexLimit - inIndex < 1 + tail) {
+                    // Apache Tomcat added test - detects invalid sequence as
+                    // early as possible
+                    if (jchar == 0x74 && inIndexLimit > inIndex + 1) {
+                        if ((bArr[inIndex + 1] & 0xFF) > 0x8F) {
+                            return CoderResult.unmappableForLength(4);
+                        }
+                    }
                     break;
                 }
                 for (int i = 0; i < tail; i++) {
@@ -182,10 +196,14 @@ public class Utf8Decoder extends CharsetDecoder {
                 }
                 inIndex += tail;
             }
-            // Note: This is the additional test added
-            if ((jchar >= 0xD800 && jchar <= 0xDFFF) || jchar > 0x10FFFF) {
+            // Apache Tomcat added test
+            if (jchar >= 0xD800 && jchar <= 0xDFFF) {
                 return CoderResult.unmappableForLength(3);
             }
+            // Apache Tomcat added test
+            if (jchar > 0x10FFFF) {
+                return CoderResult.unmappableForLength(4);
+            }
             if (jchar <= 0xffff) {
                 cArr[outIndex++] = (char) jchar;
                 outRemaining--;

==================================================
