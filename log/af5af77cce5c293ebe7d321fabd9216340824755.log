af5af77cce5c293ebe7d321fabd9216340824755
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55855
==================================================
Mark Emlyn
==================================================
Wed Jan 15 12:23:23 2014 +0000
==================================================
Context.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55855
Provide a context level option to exclude container SCIs.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1558355 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StandardContext.java
index da17ac027e..50f2c1c655 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -694,9 +694,34 @@ public interface Context extends Container {
      */
     public void setInstanceManager(InstanceManager instanceManager);
 
-    // --------------------------------------------------------- Public Methods
+    /**
+     * Sets the regular expression that specifies which container provided SCIs
+     * should be filtered out and not used for this context. Matching uses
+     * {@link java.util.regex.Matcher#find()} so the regular expression only has
+     * to match a sub-string of the fully qualified class name of the container
+     * provided SCI for it to be filtered out.
+     *
+     * @param containerSciFilter The regular expression against which the fully
+     *                           qualified class name of each container provided
+     *                           SCI should be checked
+     */
+    public void setContainerSciFilter(String containerSciFilter);
+
+    /**
+     * Obtains the regular expression that specifies which container provided
+     * SCIs should be filtered out and not used for this context. Matching uses
+     * {@link java.util.regex.Matcher#find()} so the regular expression only has
+     * to match a sub-string of the fully qualified class name of the container
+     * provided SCI for it to be filtered out.
+     *
+     * @return The regular expression against which the fully qualified class
+     *         name of each container provided SCI will be checked
+     */
+    public String getContainerSciFilter();
 
 
+    // --------------------------------------------------------- Public Methods
+
     /**
      * Add a new Listener class name to the set of Listeners
      * configured for this application.

==================================================
ContextConfig.java
index 69a7d88319..f8988299c8 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -805,9 +805,23 @@ public class StandardContext extends ContainerBase
     private Map<String, String> postConstructMethods = new HashMap<>();
     private Map<String, String> preDestroyMethods = new HashMap<>();
 
+    private String containerSciFilter;
+
 
     // ----------------------------------------------------- Context Properties
 
+    @Override
+    public void setContainerSciFilter(String containerSciFilter) {
+        this.containerSciFilter = containerSciFilter;
+    }
+
+
+    @Override
+    public String getContainerSciFilter() {
+        return containerSciFilter;
+    }
+
+
     @Override
     public boolean getSendRedirectBody() {
         return sendRedirectBody;

==================================================
FailedContext.java
index 0303955297..9c4ce52855 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -1595,7 +1595,7 @@ public class ContextConfig implements LifecycleListener {
         List<ServletContainerInitializer> detectedScis;
         try {
             WebappServiceLoader<ServletContainerInitializer> loader =
-                    new WebappServiceLoader<>(servletContext);
+                    new WebappServiceLoader<>(servletContext, context.getContainerSciFilter());
             detectedScis = loader.load(ServletContainerInitializer.class);
         } catch (IOException e) {
             log.error(sm.getString(

==================================================
WebappServiceLoader.java
index 8a36d536e0..6341e66d66 100644
--- a/java/org/apache/catalina/startup/FailedContext.java
+++ b/java/org/apache/catalina/startup/FailedContext.java
@@ -724,4 +724,10 @@ public class FailedContext extends LifecycleMBeanBase implements Context {
 
     @Override
     public void setInstanceManager(InstanceManager instanceManager) { /* NO-OP */ }
+
+    @Override
+    public void setContainerSciFilter(String containerSciFilter) { /* NO-OP */ }
+
+    @Override
+    public String getContainerSciFilter() { return null; }
 }
\ No newline at end of file

==================================================
TesterContext.java
index d0080a5bef..9528437301 100644
--- a/java/org/apache/catalina/startup/WebappServiceLoader.java
+++ b/java/org/apache/catalina/startup/WebappServiceLoader.java
@@ -26,8 +26,10 @@ import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Enumeration;
+import java.util.Iterator;
 import java.util.LinkedHashSet;
 import java.util.List;
+import java.util.regex.Pattern;
 
 import javax.servlet.ServletContext;
 
@@ -55,14 +57,20 @@ public class WebappServiceLoader<T> {
     private static final String SERVICES = "META-INF/services/";
 
     private final ServletContext context;
+    private final Pattern containerSciFilterPattern;
 
     /**
      * Construct a loader to load services from a ServletContext.
      *
      * @param context the context to use
      */
-    public WebappServiceLoader(ServletContext context) {
+    public WebappServiceLoader(ServletContext context, String containerSciFilter) {
         this.context = context;
+        if (containerSciFilter != null && containerSciFilter.length() > 0) {
+            containerSciFilterPattern = Pattern.compile(containerSciFilter);
+        } else {
+            containerSciFilterPattern = null;
+        }
     }
 
     /**
@@ -122,6 +130,16 @@ public class WebappServiceLoader<T> {
             parseConfigFile(containerServicesFound, resources.nextElement());
         }
 
+        // Filter the discovered container SCIs if required
+        if (containerSciFilterPattern != null) {
+            Iterator<String> iter = containerServicesFound.iterator();
+            while (iter.hasNext()) {
+                if (containerSciFilterPattern.matcher(iter.next()).find()) {
+                    iter.remove();
+                }
+            }
+        }
+
         // Add the application services after the container services to ensure
         // that the container services are loaded first
         containerServicesFound.addAll(applicationServicesFound);

==================================================
TestWebappServiceLoader.java
index 59801e434f..47397d16fd 100644
--- a/test/org/apache/catalina/core/TesterContext.java
+++ b/test/org/apache/catalina/core/TesterContext.java
@@ -1189,4 +1189,10 @@ public class TesterContext implements Context {
     public void setInstanceManager(InstanceManager instanceManager) {
         // NO-OP
     }
+
+    @Override
+    public void setContainerSciFilter(String containerSciFilter) { /* NO-OP */ }
+
+    @Override
+    public String getContainerSciFilter() { return null; }
 }

==================================================
