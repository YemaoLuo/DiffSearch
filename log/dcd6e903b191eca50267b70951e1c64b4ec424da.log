dcd6e903b191eca50267b70951e1c64b4ec424da
==================================================
Improve detection of I/O errors during async processing on non-container threads and trigger async error handling when they are detected.
==================================================
Mark Thomas
==================================================
Tue Nov 1 15:23:13 2016 +0000
==================================================
AbstractProcessor.java
Improve detection of I/O errors during async processing on non-container threads and trigger async error handling when they are detected.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1767505 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpProcessor.java
index 8598ca4d7f..6fb4085e40 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -310,7 +310,11 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
         case CLOSE_NOW: {
             // Prevent further writes to the response
             setSwallowResponse();
-            setErrorState(ErrorState.CLOSE_NOW, null);
+            if (param instanceof Throwable) {
+                setErrorState(ErrorState.CLOSE_NOW, (Throwable) param);
+            } else {
+                setErrorState(ErrorState.CLOSE_NOW, null);
+            }
             break;
         }
         case DISABLE_SWALLOW_INPUT: {

==================================================
Http11OutputBuffer.java
index 6eb3c30b45..e521839fe1 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -1392,9 +1392,15 @@ public class AjpProcessor extends AbstractProcessor {
 
             int len = 0;
             if (!swallowResponse) {
-                len = chunk.remaining();
-                writeData(chunk);
-                len -= chunk.remaining();
+                try {
+                    len = chunk.remaining();
+                    writeData(chunk);
+                    len -= chunk.remaining();
+                } catch (IOException ioe) {
+                    setErrorState(ErrorState.CLOSE_CONNECTION_NOW, ioe);
+                    // Re-throw
+                    throw ioe;
+                }
             }
             return len;
         }

==================================================
