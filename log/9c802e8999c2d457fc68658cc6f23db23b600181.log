9c802e8999c2d457fc68658cc6f23db23b600181
==================================================
WebSocket 1.0 implementation part 8 of many
==================================================
Mark Emlyn
==================================================
Tue Dec 4 09:33:39 2012 +0000
==================================================
WsProtocolHandler.java
WebSocket 1.0 implementation part 8 of many
Start to join up the upgrade ProtocolHandler, the WebSocket session and the Echo end point implementation

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1416836 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WsSession.java
index 78ae82413b..d2f6e557d9 100644
--- a/java/org/apache/tomcat/websocket/WsProtocolHandler.java
+++ b/java/org/apache/tomcat/websocket/WsProtocolHandler.java
@@ -16,6 +16,12 @@
  */
 package org.apache.tomcat.websocket;
 
+import java.io.IOException;
+
+import javax.servlet.ReadListener;
+import javax.servlet.ServletInputStream;
+import javax.servlet.ServletOutputStream;
+import javax.servlet.WriteListener;
 import javax.servlet.http.ProtocolHandler;
 import javax.servlet.http.WebConnection;
 import javax.websocket.Endpoint;
@@ -26,16 +32,98 @@ import javax.websocket.Endpoint;
 public class WsProtocolHandler implements ProtocolHandler {
 
     private final Endpoint ep;
+    private final ClassLoader applicationClassLoader;
+    private final WsSession session;
 
     public WsProtocolHandler(Endpoint ep) {
         this.ep = ep;
+        applicationClassLoader = Thread.currentThread().getContextClassLoader();
+        session = new WsSession();
     }
 
     @Override
     public void init(WebConnection connection) {
 
-        ep.onOpen(new WsSession());
+        // Need to call onOpen using the web application's class loader
+        Thread t = Thread.currentThread();
+        ClassLoader cl = t.getContextClassLoader();
+        t.setContextClassLoader(applicationClassLoader);
+        try {
+            ep.onOpen(session);
+        } finally {
+            t.setContextClassLoader(cl);
+        }
+
+        ServletInputStream sis;
+        ServletOutputStream sos;
+        try {
+            sis = connection.getInputStream();
+            sos = connection.getOutputStream();
+        } catch (IOException e) {
+            throw new IllegalStateException(e);
+        }
+
+        sis.setReadListener(new WsReadListener(this));
+        sos.setWriteListener(new WsWriteListener(this));
+    }
+
+
+    private void onError(Throwable throwable) {
+        // Need to call onError using the web application's class loader
+        Thread t = Thread.currentThread();
+        ClassLoader cl = t.getContextClassLoader();
+        t.setContextClassLoader(applicationClassLoader);
+        try {
+            ep.onError(throwable);
+        } finally {
+            t.setContextClassLoader(cl);
+        }
+    }
+
+    private static class WsReadListener implements ReadListener {
+
+        private final WsProtocolHandler wsProtocolHandler;
+
+        private WsReadListener(WsProtocolHandler wsProtocolHandler) {
+            this.wsProtocolHandler = wsProtocolHandler;
+        }
+
+        @Override
+        public void onDataAvailable() {
+            // TODO Auto-generated method stub
+
+        }
+
+        @Override
+        public void onAllDataRead() {
+            // Will never happen with WebSocket
+            throw new IllegalStateException();
+        }
+
+        @Override
+        public void onError(Throwable throwable) {
+            wsProtocolHandler.onError(throwable);
+        }
+    }
+
+
+    private static class WsWriteListener implements WriteListener {
+
+        private final WsProtocolHandler wsProtocolHandler;
+
+        private WsWriteListener(WsProtocolHandler wsProtocolHandler) {
+            this.wsProtocolHandler = wsProtocolHandler;
+        }
+
+        @Override
+        public void onWritePossible() {
+            // TODO Auto-generated method stub
+
+        }
 
-        // TODO Message handling
+        @Override
+        public void onError(Throwable throwable) {
+            wsProtocolHandler.onError(throwable);
+        }
     }
 }

==================================================
EchoEndpoint.java
index b1713ed1db..57525ab454 100644
--- a/java/org/apache/tomcat/websocket/WsSession.java
+++ b/java/org/apache/tomcat/websocket/WsSession.java
@@ -18,12 +18,14 @@ package org.apache.tomcat.websocket;
 
 import java.io.IOException;
 import java.net.URI;
+import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
 import javax.websocket.ClientContainer;
 import javax.websocket.CloseReason;
+import javax.websocket.CloseReason.CloseCodes;
 import javax.websocket.Encoder;
 import javax.websocket.MessageHandler;
 import javax.websocket.RemoteEndpoint;
@@ -31,6 +33,8 @@ import javax.websocket.Session;
 
 public class WsSession implements Session {
 
+    private final Set<MessageHandler> messageHandlers = new LinkedHashSet<>();
+
     @Override
     public ClientContainer getContainer() {
         // TODO Auto-generated method stub
@@ -45,20 +49,17 @@ public class WsSession implements Session {
 
     @Override
     public void addMessageHandler(MessageHandler listener) {
-        // TODO Auto-generated method stub
-
+        messageHandlers.add(listener);
     }
 
     @Override
     public Set<MessageHandler> getMessageHandlers() {
-        // TODO Auto-generated method stub
-        return null;
+        return messageHandlers;
     }
 
     @Override
     public void removeMessageHandler(MessageHandler listener) {
-        // TODO Auto-generated method stub
-
+        messageHandlers.remove(listener);
     }
 
     @Override
@@ -129,8 +130,7 @@ public class WsSession implements Session {
 
     @Override
     public void close() throws IOException {
-        // TODO Auto-generated method stub
-
+        close(new CloseReason(CloseCodes.GOING_AWAY, ""));
     }
 
     @Override

==================================================
