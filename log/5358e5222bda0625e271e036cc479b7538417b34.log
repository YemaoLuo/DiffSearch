5358e5222bda0625e271e036cc479b7538417b34
==================================================
Converted tests in org.apache.catalina.deploy to JUnit 4.
==================================================
Konstantin Kolinko
==================================================
Mon Jul 25 12:04:32 2011 +0000
==================================================
TestSecurityConstraint.java
Converted tests in org.apache.catalina.deploy to JUnit 4.

1) textXXX() -> @Test added
2) protected setUp() -> @Before public setUp()
3) in TestSecurityConstraint: There is no assertEquals(boolean, boolean) method in JUnit 4,
so those calls were replaced with assertTrue() and assertFalse().

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1150652 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestWebXml.java
index 98c2c8e6e2..88e37c0b04 100644
--- a/test/org/apache/catalina/deploy/TestSecurityConstraint.java
+++ b/test/org/apache/catalina/deploy/TestSecurityConstraint.java
@@ -25,9 +25,14 @@ import javax.servlet.ServletSecurityElement;
 import javax.servlet.annotation.ServletSecurity;
 import javax.servlet.annotation.ServletSecurity.EmptyRoleSemantic;
 
-import junit.framework.TestCase;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
 
-public class TestSecurityConstraint extends TestCase {
+import org.junit.Test;
+
+public class TestSecurityConstraint {
 
     private static final String URL_PATTERN = "/test";
     private static final String ROLE1 = "R1";
@@ -35,6 +40,7 @@ public class TestSecurityConstraint extends TestCase {
     /**
      * Uses the examples in SRV.13.4 as the basis for these tests
      */
+    @Test
     public void testCreateConstraints() {
         
         ServletSecurityElement element;
@@ -59,9 +65,8 @@ public class TestSecurityConstraint extends TestCase {
         result = SecurityConstraint.createConstraints(element, URL_PATTERN);
 
         assertEquals(1, result.length);
-        assertEquals(false, result[0].getAuthConstraint());
-        assertEquals(true,
-                result[0].findCollections()[0].findPattern(URL_PATTERN));
+        assertFalse(result[0].getAuthConstraint());
+        assertTrue(result[0].findCollections()[0].findPattern(URL_PATTERN));
         assertEquals(0, result[0].findCollections()[0].findMethods().length);
         assertEquals(ServletSecurity.TransportGuarantee.CONFIDENTIAL.name(),
                 result[0].getUserConstraint());
@@ -73,9 +78,8 @@ public class TestSecurityConstraint extends TestCase {
         result = SecurityConstraint.createConstraints(element, URL_PATTERN);
 
         assertEquals(1, result.length);
-        assertEquals(true, result[0].getAuthConstraint());
-        assertEquals(true,
-                result[0].findCollections()[0].findPattern(URL_PATTERN));
+        assertTrue(result[0].getAuthConstraint());
+        assertTrue(result[0].findCollections()[0].findPattern(URL_PATTERN));
         assertEquals(0, result[0].findCollections()[0].findMethods().length);
         assertEquals(ServletSecurity.TransportGuarantee.NONE.name(),
                 result[0].getUserConstraint());
@@ -87,11 +91,10 @@ public class TestSecurityConstraint extends TestCase {
         result = SecurityConstraint.createConstraints(element, URL_PATTERN);
 
         assertEquals(1, result.length);
-        assertEquals(true, result[0].getAuthConstraint());
+        assertTrue(result[0].getAuthConstraint());
         assertEquals(1, result[0].findAuthRoles().length);
-        assertEquals(true, result[0].findAuthRole(ROLE1));
-        assertEquals(true,
-                result[0].findCollections()[0].findPattern(URL_PATTERN));
+        assertTrue(result[0].findAuthRole(ROLE1));
+        assertTrue(result[0].findCollections()[0].findPattern(URL_PATTERN));
         assertEquals(0, result[0].findCollections()[0].findMethods().length);
         assertEquals(ServletSecurity.TransportGuarantee.NONE.name(),
                 result[0].getUserConstraint());
@@ -115,11 +118,10 @@ public class TestSecurityConstraint extends TestCase {
         
         assertEquals(2, result.length);
         for (int i = 0; i < 2; i++) {
-            assertEquals(true, result[i].getAuthConstraint());
+            assertTrue(result[i].getAuthConstraint());
             assertEquals(1, result[i].findAuthRoles().length);
-            assertEquals(true, result[i].findAuthRole(ROLE1));
-            assertEquals(true,
-                    result[i].findCollections()[0].findPattern(URL_PATTERN));
+            assertTrue(result[i].findAuthRole(ROLE1));
+            assertTrue(result[i].findCollections()[0].findPattern(URL_PATTERN));
             assertEquals(1, result[i].findCollections()[0].findMethods().length);
             String method = result[i].findCollections()[0].findMethods()[0];
             if ("GET".equals(method)) {
@@ -147,16 +149,15 @@ public class TestSecurityConstraint extends TestCase {
         
         assertEquals(2, result.length);
         for (int i = 0; i < 2; i++) {
-            assertEquals(true,
-                    result[i].findCollections()[0].findPattern(URL_PATTERN));
+            assertTrue(result[i].findCollections()[0].findPattern(URL_PATTERN));
             if (result[i].findCollections()[0].findMethods().length == 1) {
                 assertEquals("GET",
                         result[i].findCollections()[0].findMethods()[0]);
-                assertEquals(false, result[i].getAuthConstraint());
+                assertFalse(result[i].getAuthConstraint());
             } else if (result[i].findCollections()[0].findOmittedMethods().length == 1) {
                 assertEquals("GET",
                         result[i].findCollections()[0].findOmittedMethods()[0]);
-                assertEquals(true, result[i].getAuthConstraint());
+                assertTrue(result[i].getAuthConstraint());
                 assertEquals(1, result[i].findAuthRoles().length);
                 assertEquals(ROLE1, result[i].findAuthRoles()[0]);
             } else {
@@ -182,17 +183,16 @@ public class TestSecurityConstraint extends TestCase {
         
         assertEquals(2, result.length);
         for (int i = 0; i < 2; i++) {
-            assertEquals(true,
-                    result[i].findCollections()[0].findPattern(URL_PATTERN));
+            assertTrue(result[i].findCollections()[0].findPattern(URL_PATTERN));
             if (result[i].findCollections()[0].findMethods().length == 1) {
                 assertEquals("TRACE",
                         result[i].findCollections()[0].findMethods()[0]);
-                assertEquals(true, result[i].getAuthConstraint());
+                assertTrue(result[i].getAuthConstraint());
                 assertEquals(0, result[i].findAuthRoles().length);
             } else if (result[i].findCollections()[0].findOmittedMethods().length == 1) {
                 assertEquals("TRACE",
                         result[i].findCollections()[0].findOmittedMethods()[0]);
-                assertEquals(true, result[i].getAuthConstraint());
+                assertTrue(result[i].getAuthConstraint());
                 assertEquals(1, result[i].findAuthRoles().length);
                 assertEquals(ROLE1, result[i].findAuthRoles()[0]);
             } else {

==================================================
TestWebXmlOrdering.java
index 61cd59b91c..fd0fd4425c 100644
--- a/test/org/apache/catalina/deploy/TestWebXml.java
+++ b/test/org/apache/catalina/deploy/TestWebXml.java
@@ -17,13 +17,16 @@
 
 package org.apache.catalina.deploy;
 
-import junit.framework.TestCase;
+import static org.junit.Assert.assertEquals;
+
+import org.junit.Test;
 
 /**
  * Test case for {@link WebXml}.
  */
-public class TestWebXml extends TestCase {
+public class TestWebXml {
 
+    @Test
     public void testParseVersion() {
         
         WebXml webxml = new WebXml();
@@ -70,7 +73,8 @@ public class TestWebXml extends TestCase {
         assertEquals(2, webxml.getMajorVersion());
         assertEquals(500, webxml.getMinorVersion());
     }
-    
+
+    @Test
     public void testParsePublicIdVersion22() {
         
         WebXml webxml = new WebXml();
@@ -82,6 +86,7 @@ public class TestWebXml extends TestCase {
         assertEquals("2.2", webxml.getVersion());
     }
 
+    @Test
     public void testParsePublicIdVersion23() {
         
         WebXml webxml = new WebXml();
@@ -93,6 +98,7 @@ public class TestWebXml extends TestCase {
         assertEquals("2.3", webxml.getVersion());
     }
 
+    @Test
     public void testParsePublicIdVersion24() {
         
         WebXml webxml = new WebXml();
@@ -104,6 +110,7 @@ public class TestWebXml extends TestCase {
         assertEquals("2.4", webxml.getVersion());
     }
 
+    @Test
     public void testParsePublicIdVersion25() {
         
         WebXml webxml = new WebXml();
@@ -115,6 +122,7 @@ public class TestWebXml extends TestCase {
         assertEquals("2.5", webxml.getVersion());
     }
 
+    @Test
     public void testParsePublicIdVersion30() {
         
         WebXml webxml = new WebXml();

==================================================
