75cd0917ae1663df84875ba7dbbac7b0ddcf3bf0
==================================================
Complete some error handling TODOs
==================================================
Mark Thomas
==================================================
Thu Oct 1 14:32:56 2015 +0000
==================================================
Http2UpgradeHandler.java
Complete some error handling TODOs

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1706264 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Stream.java
index db3d5cd01a..4c6479a3a2 100644
--- a/java/org/apache/coyote/http2/LocalStrings.properties
+++ b/java/org/apache/coyote/http2/LocalStrings.properties
@@ -72,6 +72,8 @@ stream.write=Connection [{0}], Stream [{1}]
 
 stream.outputBuffer.flush.debug=Connection [{0}], Stream [{1}], flushing output with buffer at position [{2}], writeInProgress [{3}] and closed [{4}]
 
+streamProcessor.error.connection=Connection [{0}], Stream [{1}], An error occurred during processing that was fatal to the connection
+streamProcessor.error.stream=Connection [{0}], Stream [{1}], An error occurred during processing that was fatal to the stream
 streamProcessor.httpupgrade.notsupported=HTTP upgrade is not supported within HTTP/2 streams
 streamProcessor.process.loopend=Connection [{0}], Stream [{1}], loop end, state [{2}], dispatches [{3}]
 streamProcessor.process.loopstart=Connection [{0}], Stream [{1}], loop start, status [{2}], dispatches [{3}]

==================================================
StreamProcessor.java
index b1b645d14b..d60b14ca63 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -338,6 +338,25 @@ public class Stream extends AbstractStream implements HeaderEmitter {
         return !state.isFrameTypePermitted(FrameType.DATA);
     }
 
+
+    void close(Http2Exception http2Exception) {
+        if (http2Exception instanceof StreamException) {
+            try {
+                handler.closeStream((StreamException) http2Exception);
+            } catch (ConnectionException ce) {
+                handler.closeConnection(ce);
+            } catch (IOException ioe) {
+                // TODO i18n
+                ConnectionException ce = new ConnectionException("", Http2Error.PROTOCOL_ERROR);
+                ce.initCause(ioe);
+                handler.closeConnection(ce);
+            }
+        } else {
+            handler.closeConnection(http2Exception);
+        }
+    }
+
+
     class StreamOutputBuffer implements OutputBuffer {
 
         private final ByteBuffer buffer = ByteBuffer.allocate(8 * 1024);

==================================================
