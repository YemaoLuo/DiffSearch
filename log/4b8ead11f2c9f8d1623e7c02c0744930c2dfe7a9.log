4b8ead11f2c9f8d1623e7c02c0744930c2dfe7a9
==================================================
Make keptAlive initialization common between the connectors
==================================================
Mark Emlyn
==================================================
Tue Sep 6 11:26:30 2011 +0000
==================================================
AbstractHttp11Processor.java
Make keptAlive initialization common between the connectors

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1165608 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index 63c84ee647..c364a1722b 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -86,6 +86,16 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
     protected boolean openSocket = false;
 
 
+    /**
+     * Flag used to indicate that the socket should treat the next request
+     * processed like a keep-alive connection - i.e. one where there may not be
+     * any data to process. The initial value of this flag on entering the
+     * process method is different for connectors that use polling (NIO / APR -
+     * data is always expected) compared to those that use blocking (BIO - data
+     * is only expected if the connection isn't in the keep-alive state).
+     */
+    protected boolean keptAlive;
+
     /**
      * Flag that indicates that send file processing is in progress and that the
      * socket should not be returned to the poller (where a poller is used).

==================================================
Http11NioProcessor.java
index 1e28147147..b481fccb8a 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -184,6 +184,11 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
         openSocket = false;
         sendfileInProgress = false;
         readComplete = true;
+        if (endpoint.getUsePolling()) {
+            keptAlive = false;
+        } else {
+            keptAlive = socketWrapper.isKeptAlive();
+        }
 
         int soTimeout = endpoint.getSoTimeout();
 
@@ -191,8 +196,6 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
             socketWrapper.setKeepAliveLeft(0);
         }
 
-        boolean keptAlive = false;
-
         long socketRef = socketWrapper.getSocket().longValue();
 
         while (!error && keepAlive && !comet && !isAsync() &&

==================================================
Http11Processor.java
index 74d301696a..87ebfd4fea 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -213,6 +213,11 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
         openSocket = false;
         sendfileInProgress = false;
         readComplete = true;
+        if (endpoint.getUsePolling()) {
+            keptAlive = false;
+        } else {
+            keptAlive = socketWrapper.isKeptAlive();
+        }
         
         int soTimeout = endpoint.getSoTimeout();
 
@@ -220,8 +225,6 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
             socketWrapper.setKeepAliveLeft(0);
         }
 
-        boolean keptAlive = false;
-        
         while (!error && keepAlive && !comet && !isAsync() &&
                 !endpoint.isPaused()) {
 

==================================================
AbstractEndpoint.java
index 55c7eff667..fbf99b7a59 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -148,6 +148,11 @@ public class Http11Processor extends AbstractHttp11Processor<Socket> {
         openSocket = false;
         sendfileInProgress = false;
         readComplete = true;
+        if (endpoint.getUsePolling()) {
+            keptAlive = false;
+        } else {
+            keptAlive = socketWrapper.isKeptAlive();
+        }
 
         int soTimeout = endpoint.getSoTimeout();
 
@@ -155,8 +160,6 @@ public class Http11Processor extends AbstractHttp11Processor<Socket> {
             socketWrapper.setKeepAliveLeft(0);
         }
 
-        boolean keptAlive = socketWrapper.isKeptAlive();
-
         while (!error && keepAlive && !comet && !isAsync() &&
                 !endpoint.isPaused()) {
 

==================================================
AprEndpoint.java
index f606817682..54aad90aae 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -559,9 +559,12 @@ public abstract class AbstractEndpoint {
 
     protected abstract Log getLog();
     // Flags to indicate optional feature support
+    // Some of these are always hard-coded, some are hard-coded to false (i.e.
+    // the endpoint does not support them) and some are configurable.
     public abstract boolean getUseSendfile();
     public abstract boolean getUseComet();
     public abstract boolean getUseCometTimeout();
+    public abstract boolean getUsePolling();
     
     protected LimitLatch initializeConnectionLatch() {
         if (connectionLimitLatch==null) {

==================================================
JIoEndpoint.java
index d0b2ee27c5..e5dc675e7f 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -160,6 +160,8 @@ public class AprEndpoint extends AbstractEndpoint {
     public boolean getUseComet() { return useComet; }
     @Override
     public boolean getUseCometTimeout() { return false; } // Not supported
+    @Override
+    public boolean getUsePolling() { return true; } // Always supported
 
 
     /**

==================================================
NioEndpoint.java
index 3ef6a0c1de..fc3bbefd2b 100644
--- a/java/org/apache/tomcat/util/net/JIoEndpoint.java
+++ b/java/org/apache/tomcat/util/net/JIoEndpoint.java
@@ -108,6 +108,8 @@ public class JIoEndpoint extends AbstractEndpoint {
     public boolean getUseCometTimeout() { return false; } // Not supported
     @Override
     public boolean getDeferAccept() { return false; } // Not supported
+    @Override
+    public boolean getUsePolling() { return false; } // Not supported
 
 
     // ------------------------------------------------ Handler Inner Interface

==================================================
