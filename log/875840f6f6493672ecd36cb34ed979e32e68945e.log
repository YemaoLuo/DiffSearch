875840f6f6493672ecd36cb34ed979e32e68945e
==================================================
Re-factoring in support of https://issues.apache.org/bugzilla/show_bug.cgi?id=50360
==================================================
Mark Emlyn
==================================================
Mon Dec 6 14:02:19 2010 +0000
==================================================
AbstractProtocolHandler.java
Re-factoring in support of https://issues.apache.org/bugzilla/show_bug.cgi?id=50360
Start to pull stuff up into the base class

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1042648 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractAjpProtocol.java
index 8cec9bb6cf..a158226f79 100644
--- a/java/org/apache/coyote/AbstractProtocolHandler.java
+++ b/java/org/apache/coyote/AbstractProtocolHandler.java
@@ -17,14 +17,48 @@
 package org.apache.coyote;
 
 import javax.management.MBeanRegistration;
+import javax.management.ObjectName;
 
 import org.apache.juli.logging.Log;
+import org.apache.tomcat.util.net.AbstractEndpoint;
 
 public abstract class AbstractProtocolHandler implements ProtocolHandler,
         MBeanRegistration {
 
-    // Concrete implementations need to provide access to their logger to be
-    // used by the abstract classes.
-    protected abstract Log getLog();
+    /**
+     * Name of MBean for the Global Request Processor.
+     */
+    protected ObjectName rgOname = null;
+
+    
+    /**
+     * Name of MBean for the ThreadPool.
+     */
+    protected ObjectName tpOname = null;
+
+    
+    /**
+     * Endpoint that provides low-level network I/O - must be matched to the
+     * ProtocolHandler implementation (ProtocolHandler using BIO, requires BIO
+     * Endpoint etc.).
+     */
+    protected AbstractEndpoint endpoint = null;
 
+    
+    /**
+     * The adapter provides the link between the ProtocolHandler and the
+     * connector.
+     */
+    protected Adapter adapter;
+    @Override
+    public void setAdapter(Adapter adapter) { this.adapter = adapter; }
+    @Override
+    public Adapter getAdapter() { return adapter; }
+
+
+    /**
+     * Concrete implementations need to provide access to their logger to be
+     * used by the abstract classes.
+     */
+    protected abstract Log getLog();
 }

==================================================
AbstractHttp11Protocol.java
index 46ca78b3a7..6e66542931 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -26,9 +26,7 @@ import javax.management.MBeanServer;
 import javax.management.ObjectName;
 
 import org.apache.coyote.AbstractProtocolHandler;
-import org.apache.coyote.Adapter;
 import org.apache.tomcat.util.modeler.Registry;
-import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.res.StringManager;
 
 public abstract class AbstractAjpProtocol extends AbstractProtocolHandler {
@@ -37,16 +35,6 @@ public abstract class AbstractAjpProtocol extends AbstractProtocolHandler {
      */
     protected static final StringManager sm = StringManager.getManager(Constants.Package);
         
-    protected ObjectName tpOname = null;
-    protected ObjectName rgOname = null;
-
-    protected AbstractEndpoint endpoint = null;
-    
-    /**
-     * The adapter, used to call the connector.
-     */
-    protected Adapter adapter;
-    
     protected HashMap<String, Object> attributes = new HashMap<String, Object>();
     
     /** 
@@ -89,20 +77,6 @@ public abstract class AbstractAjpProtocol extends AbstractProtocolHandler {
         return (String)getAttribute(name);
     }
 
-    /**
-     * The adapter, used to call the connector
-     */
-    @Override
-    public void setAdapter(Adapter adapter) {
-        this.adapter = adapter;
-    }
-
-
-    @Override
-    public Adapter getAdapter() {
-        return adapter;
-    }
-
     @Override
     public void pause() throws Exception {
         try {

==================================================
