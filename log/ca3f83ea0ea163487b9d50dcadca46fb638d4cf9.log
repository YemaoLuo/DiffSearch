ca3f83ea0ea163487b9d50dcadca46fb638d4cf9
==================================================
Converted the tests to JUnit 4.
==================================================
Konstantin Kolinko
==================================================
Mon Jul 25 18:56:58 2011 +0000
==================================================
TestDigestAuthenticator.java
Converted the tests to JUnit 4.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1150846 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestFormAuthenticator.java
index 60b9da2897..c2ad305678 100644
--- a/test/org/apache/catalina/authenticator/TestDigestAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestDigestAuthenticator.java
@@ -23,6 +23,11 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
+import org.junit.Test;
+
 import org.apache.catalina.Context;
 import org.apache.catalina.deploy.LoginConfig;
 import org.apache.catalina.deploy.SecurityCollection;
@@ -30,11 +35,11 @@ import org.apache.catalina.deploy.SecurityConstraint;
 import org.apache.catalina.startup.TestTomcat.MapRealm;
 import org.apache.catalina.startup.TesterServlet;
 import org.apache.catalina.startup.Tomcat;
-import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.catalina.startup.TomcatBaseTestJUnit4;
 import org.apache.catalina.util.MD5Encoder;
 import org.apache.tomcat.util.buf.ByteChunk;
 
-public class TestDigestAuthenticator extends TomcatBaseTest {
+public class TestDigestAuthenticator extends TomcatBaseTestJUnit4 {
 
     private static String USER = "user";
     private static String PWD = "pwd";
@@ -49,86 +54,103 @@ public class TestDigestAuthenticator extends TomcatBaseTest {
     private static String NC2 = "00000002";
     private static String QOP = "auth";
 
+    @Test
     public void testAllValid() throws Exception {
         doTest(USER, PWD, CONTEXT_PATH + URI, false, true, REALM, true, true,
                 NC1, NC2, CNONCE, QOP, true, true);
     }
 
+    @Test
     public void testValidNoQop() throws Exception {
         doTest(USER, PWD, CONTEXT_PATH + URI, false, true, REALM, true, true,
                 null, null, null, null, true, true);
     }
 
+    @Test
     public void testValidQuery() throws Exception {
         doTest(USER, PWD, CONTEXT_PATH + URI + QUERY, false, true, REALM, true,
                 true, NC1, NC2, CNONCE, QOP, true, true);
     }
 
+    @Test
     public void testInvalidUriFail() throws Exception {
         doTest(USER, PWD, CONTEXT_PATH + URI, true, true, REALM, true, true,
                 NC1, NC2, CNONCE, QOP, false, false);
     }
 
+    @Test
     public void testInvalidUriPass() throws Exception {
         doTest(USER, PWD, CONTEXT_PATH + URI, true, false, REALM, true, true,
                 NC1, NC2, CNONCE, QOP, true, true);
     }
 
+    @Test
     public void testInvalidRealm() throws Exception {
         doTest(USER, PWD, CONTEXT_PATH + URI, false, true, "null", true, true,
                 NC1, NC2, CNONCE, QOP, false, false);
     }
 
+    @Test
     public void testInvalidNonce() throws Exception {
         doTest(USER, PWD, CONTEXT_PATH + URI, false, true, REALM, false, true,
                 NC1, NC2, CNONCE, QOP, false, true);
     }
 
+    @Test
     public void testInvalidOpaque() throws Exception {
         doTest(USER, PWD, CONTEXT_PATH + URI, false, true, REALM, true, false,
                 NC1, NC2, CNONCE, QOP, false, true);
     }
 
+    @Test
     public void testInvalidNc1() throws Exception {
         doTest(USER, PWD, CONTEXT_PATH + URI, false, true, REALM, true, true,
                 "null", null, CNONCE, QOP, false, false);
     }
 
+    @Test
     public void testInvalidQop() throws Exception {
         doTest(USER, PWD, CONTEXT_PATH + URI, false, true, REALM, true, true,
                 NC1, NC2, CNONCE, "null", false, false);
     }
 
+    @Test
     public void testInvalidQopCombo1() throws Exception {
         doTest(USER, PWD, CONTEXT_PATH + URI, false, true, REALM, true, true,
                 NC1, NC2, CNONCE, null, false, false);
     }
 
+    @Test
     public void testInvalidQopCombo2() throws Exception {
         doTest(USER, PWD, CONTEXT_PATH + URI, false, true, REALM, true, true,
                 NC1, NC2, null, QOP, false, false);
     }
 
+    @Test
     public void testInvalidQopCombo3() throws Exception {
         doTest(USER, PWD, CONTEXT_PATH + URI, false, true, REALM, true, true,
                 NC1, NC2, null, null, false, false);
     }
 
+    @Test
     public void testInvalidQopCombo4() throws Exception {
         doTest(USER, PWD, CONTEXT_PATH + URI, false, true, REALM, true, true,
                 null, null, CNONCE, QOP, false, false);
     }
 
+    @Test
     public void testInvalidQopCombo5() throws Exception {
         doTest(USER, PWD, CONTEXT_PATH + URI, false, true, REALM, true, true,
                 null, null, CNONCE, null, false, false);
     }
 
+    @Test
     public void testInvalidQopCombo6() throws Exception {
         doTest(USER, PWD, CONTEXT_PATH + URI, false, true, REALM, true, true,
                 null, null, null, QOP, false, false);
     }
 
+    @Test
     public void testReplay() throws Exception {
         doTest(USER, PWD, CONTEXT_PATH + URI, false, true, REALM, true, true,
                 NC1, NC1, CNONCE, QOP, true, false);

==================================================
TesterDigestAuthenticatorPerformance.java
index eca77a8a4d..d681914eb2 100644
--- a/test/org/apache/catalina/authenticator/TestFormAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestFormAuthenticator.java
@@ -18,32 +18,41 @@ package org.apache.catalina.authenticator;
 
 import java.io.File;
 
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Test;
+
 import org.apache.catalina.Context;
 import org.apache.catalina.startup.SimpleHttpClient;
 import org.apache.catalina.startup.TestTomcat.MapRealm;
 import org.apache.catalina.startup.Tomcat;
-import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.catalina.startup.TomcatBaseTestJUnit4;
 
-public class TestFormAuthenticator extends TomcatBaseTest {
+public class TestFormAuthenticator extends TomcatBaseTestJUnit4 {
 
+    @Test
     public void testGet() throws Exception {
         doTest("GET", "GET", false);
     }
 
+    @Test
     public void testPostNoContinue() throws Exception {
         doTest("POST", "GET", false);
     }
 
+    @Test
     public void testPostWithContinue() throws Exception {
         doTest("POST", "GET", true);
     }
 
     // Bug 49779
+    @Test
     public void testPostNoContinuePostRedirect() throws Exception {
         doTest("POST", "POST", false);
     }
 
     // Bug 49779
+    @Test
     public void testPostWithContinuePostRedirect() throws Exception {
         doTest("POST", "POST", true);
     }

==================================================
TestCometProcessor.java
index f43e477266..bb56073ac3 100644
--- a/test/org/apache/catalina/authenticator/TesterDigestAuthenticatorPerformance.java
+++ b/test/org/apache/catalina/authenticator/TesterDigestAuthenticatorPerformance.java
@@ -23,6 +23,10 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
+import static org.junit.Assert.assertEquals;
+
+import org.junit.Test;
+
 import org.apache.catalina.Context;
 import org.apache.catalina.deploy.LoginConfig;
 import org.apache.catalina.deploy.SecurityCollection;
@@ -30,11 +34,11 @@ import org.apache.catalina.deploy.SecurityConstraint;
 import org.apache.catalina.startup.TestTomcat.MapRealm;
 import org.apache.catalina.startup.TesterServlet;
 import org.apache.catalina.startup.Tomcat;
-import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.catalina.startup.TomcatBaseTestJUnit4;
 import org.apache.catalina.util.MD5Encoder;
 import org.apache.tomcat.util.buf.ByteChunk;
 
-public class TesterDigestAuthenticatorPerformance extends TomcatBaseTest {
+public class TesterDigestAuthenticatorPerformance extends TomcatBaseTestJUnit4 {
 
     private static String USER = "user";
     private static String PWD = "pwd";
@@ -45,7 +49,7 @@ public class TesterDigestAuthenticatorPerformance extends TomcatBaseTest {
     private static String REALM = "TestRealm";
     private static String QOP = "auth";
 
-    
+    @Test
     public void testSimple() throws Exception {
         doTest(100, 1000);
     }

==================================================
TestConnector.java
index 7027b2bcd1..0076afaef7 100644
--- a/test/org/apache/catalina/comet/TestCometProcessor.java
+++ b/test/org/apache/catalina/comet/TestCometProcessor.java
@@ -28,13 +28,19 @@ import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpSession;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Test;
+
 import org.apache.catalina.Context;
 import org.apache.catalina.comet.CometEvent.EventType;
 import org.apache.catalina.startup.Tomcat;
-import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.catalina.startup.TomcatBaseTestJUnit4;
 
-public class TestCometProcessor extends TomcatBaseTest {
+public class TestCometProcessor extends TomcatBaseTestJUnit4 {
 
+    @Test
     public void testSimpleCometClient() throws Exception {
         
         if (!isCometSupported()) {

==================================================
TestCoyoteAdapter.java
index c4a2a18766..de61f59313 100644
--- a/test/org/apache/catalina/connector/TestConnector.java
+++ b/test/org/apache/catalina/connector/TestConnector.java
@@ -18,18 +18,23 @@ package org.apache.catalina.connector;
 
 import java.net.SocketTimeoutException;
 
+import static org.junit.Assert.assertEquals;
+
+import org.junit.Test;
+
 import org.apache.catalina.Context;
 import org.apache.catalina.Wrapper;
 import org.apache.catalina.startup.TesterServlet;
 import org.apache.catalina.startup.Tomcat;
-import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.catalina.startup.TomcatBaseTestJUnit4;
 import org.apache.tomcat.util.buf.ByteChunk;
 
 /**
  * Test cases for {@link Connector}. 
  */
-public class TestConnector extends TomcatBaseTest {
+public class TestConnector extends TomcatBaseTestJUnit4 {
 
+    @Test
     public void testStop() throws Exception {
         Tomcat tomcat = getTomcatInstance();
         

==================================================
TestKeepAliveCount.java
index 5a9d1adf4f..df9b73c72f 100644
--- a/test/org/apache/catalina/connector/TestCoyoteAdapter.java
+++ b/test/org/apache/catalina/connector/TestCoyoteAdapter.java
@@ -25,45 +25,59 @@ import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
+
+import org.junit.Test;
+
 import org.apache.catalina.Context;
 import org.apache.catalina.startup.Tomcat;
-import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.catalina.startup.TomcatBaseTestJUnit4;
 import org.apache.tomcat.util.buf.ByteChunk;
 
-public class TestCoyoteAdapter extends TomcatBaseTest {
+public class TestCoyoteAdapter extends TomcatBaseTestJUnit4 {
 
+    @Test
     public void testPathParmsRootNone() throws Exception {
         pathParamTest("/", "none");
     }
 
+    @Test
     public void testPathParmsFooNone() throws Exception {
         pathParamTest("/foo", "none");
     }
 
+    @Test
     public void testPathParmsRootSessionOnly() throws Exception {
         pathParamTest("/;jsessionid=1234", "1234");
     }
 
+    @Test
     public void testPathParmsFooSessionOnly() throws Exception {
         pathParamTest("/foo;jsessionid=1234", "1234");
     }
 
+    @Test
     public void testPathParmsFooSessionDummy() throws Exception {
         pathParamTest("/foo;jsessionid=1234;dummy", "1234");
     }
 
+    @Test
     public void testPathParmsFooSessionDummyValue() throws Exception {
         pathParamTest("/foo;jsessionid=1234;dummy=5678", "1234");
     }
 
+    @Test
     public void testPathParmsFooSessionValue() throws Exception {
         pathParamTest("/foo;jsessionid=1234;=5678", "1234");
     }
 
+    @Test
     public void testPathParmsFooSessionBar() throws Exception {
         pathParamTest("/foo;jsessionid=1234/bar", "1234");
     }
 
+    @Test
     public void testPathParamsRedirect() throws Exception {
         // Setup Tomcat instance
         Tomcat tomcat = getTomcatInstance();
@@ -131,14 +145,17 @@ public class TestCoyoteAdapter extends TomcatBaseTest {
         }
     }
 
+    @Test
     public void testPathParamExtRootNoParam() throws Exception {
         pathParamExtenionTest("/testapp/blah.txt", "none");
     }
 
+    @Test
     public void testPathParamExtLevel1NoParam() throws Exception {
         pathParamExtenionTest("/testapp/blah/blah.txt", "none");
     }
 
+    @Test
     public void testPathParamExtLevel1WithParam() throws Exception {
         pathParamExtenionTest("/testapp/blah;x=y/blah.txt", "none");
     }

==================================================
TestMaxConnections.java
index 1a3829750d..97f2f8441c 100644
--- a/test/org/apache/catalina/connector/TestKeepAliveCount.java
+++ b/test/org/apache/catalina/connector/TestKeepAliveCount.java
@@ -23,18 +23,24 @@ import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Test;
+
 import org.apache.catalina.Context;
 import org.apache.catalina.startup.SimpleHttpClient;
 import org.apache.catalina.startup.Tomcat;
-import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.catalina.startup.TomcatBaseTestJUnit4;
 
-public class TestKeepAliveCount extends TomcatBaseTest{
+public class TestKeepAliveCount extends TomcatBaseTestJUnit4 {
 
+    @Test
     public void testHttp10() throws Exception {
         TestKeepAliveClient client = new TestKeepAliveClient();
         client.doHttp10Request();
     }
-    
+
+    @Test
     public void testHttp11() throws Exception {
         TestKeepAliveClient client = new TestKeepAliveClient();
         client.doHttp11Request();

==================================================
TestRequest.java
index 36b60f834e..37bdaf649f 100644
--- a/test/org/apache/catalina/connector/TestMaxConnections.java
+++ b/test/org/apache/catalina/connector/TestMaxConnections.java
@@ -23,19 +23,23 @@ import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Test;
+
 import org.apache.catalina.Context;
 import org.apache.catalina.startup.SimpleHttpClient;
 import org.apache.catalina.startup.Tomcat;
-import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.catalina.startup.TomcatBaseTestJUnit4;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
-public class TestMaxConnections extends TomcatBaseTest{
+public class TestMaxConnections extends TomcatBaseTestJUnit4 {
     private static Log log = LogFactory.getLog(TestMaxConnections.class);
     static int soTimeout = 3000;
     static int connectTimeout = 1000;
-    
-    
+
+    @Test
     public void testConnector() throws Exception {
         init();
         ConnectThread[] t = new ConnectThread[10];

==================================================
TestResponse.java
index 4c5beed17b..76266838a8 100644
--- a/test/org/apache/catalina/connector/TestRequest.java
+++ b/test/org/apache/catalina/connector/TestRequest.java
@@ -30,19 +30,25 @@ import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Test;
+
 import org.apache.catalina.Context;
 import org.apache.catalina.authenticator.BasicAuthenticator;
 import org.apache.catalina.deploy.LoginConfig;
 import org.apache.catalina.startup.SimpleHttpClient;
 import org.apache.catalina.startup.TestTomcat.MapRealm;
 import org.apache.catalina.startup.Tomcat;
-import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.catalina.startup.TomcatBaseTestJUnit4;
 import org.apache.tomcat.util.buf.ByteChunk;
 
 /**
  * Test case for {@link Request}. 
  */
-public class TestRequest extends TomcatBaseTest {
+public class TestRequest extends TomcatBaseTestJUnit4 {
 
     /**
      * Test case for https://issues.apache.org/bugzilla/show_bug.cgi?id=37794
@@ -50,6 +56,7 @@ public class TestRequest extends TomcatBaseTest {
      * any of the {@link HttpServletRequest} getParameterXXX() methods if the
      * request is chunked.
      */
+    @Test
     public void testBug37794() {
         Bug37794Client client = new Bug37794Client();
         client.setPort(getPort());
@@ -206,6 +213,7 @@ public class TestRequest extends TomcatBaseTest {
      * <a href="https://issues.apache.org/bugzilla/show_bug.cgi?id=38113">bug
      * 38118</a>.
      */
+    @Test
     public void testBug38113() throws Exception {
         // Setup Tomcat instance
         Tomcat tomcat = getTomcatInstance();
@@ -250,6 +258,7 @@ public class TestRequest extends TomcatBaseTest {
      * Test case for {@link Request#login(String, String)} and
      * {@link Request#logout()}.
      */
+    @Test
     public void testLoginLogout() throws Exception{
         // Setup Tomcat instance
         Tomcat tomcat = getTomcatInstance();
@@ -304,7 +313,8 @@ public class TestRequest extends TomcatBaseTest {
         }
         
     }
-    
+
+    @Test
     public void testBug49424NoChunking() throws Exception {
         Tomcat tomcat = getTomcatInstance();
         Context root = tomcat.addContext("",
@@ -318,6 +328,7 @@ public class TestRequest extends TomcatBaseTest {
         assertNotNull(is);
     }
 
+    @Test
     public void testBug49424WithChunking() throws Exception {
         Tomcat tomcat = getTomcatInstance();
         Context root = tomcat.addContext("",
@@ -338,6 +349,7 @@ public class TestRequest extends TomcatBaseTest {
      * the request body (when properly configured using the new parseBodyMethod
      * setting).
      */
+    @Test
     public void testBug48692() {
         Bug48692Client client = new Bug48692Client();
         client.setPort(getPort());

==================================================
