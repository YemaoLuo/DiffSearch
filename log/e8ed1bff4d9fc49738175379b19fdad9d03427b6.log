e8ed1bff4d9fc49738175379b19fdad9d03427b6
==================================================
More unit tests for BeanNameELResolver and fix another exception handling problem identified by the new tests. Also fix a problem found with setValue where the context's isResolved property could be incorrectly set to true.
==================================================
Mark Emlyn
==================================================
Thu Jul 4 19:55:19 2013 +0000
==================================================
BeanNameELResolver.java
More unit tests for BeanNameELResolver and fix another exception handling problem identified by the new tests. Also fix a problem found with setValue where the context's isResolved property could be incorrectly set to true.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1499849 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestBeanNameELResolver.java
index 9f9ffa32b8..4ff3072e38 100644
--- a/java/javax/el/BeanNameELResolver.java
+++ b/java/javax/el/BeanNameELResolver.java
@@ -69,15 +69,22 @@ public class BeanNameELResolver extends ELResolver {
 
         String beanName = (String) property;
 
+        boolean isResolved = context.isPropertyResolved();
         if (isReadOnly(context, base, property)) {
             throw new PropertyNotWritableException(Util.message(context,
                     "beanNameELResolver.beanReadOnly", beanName));
         }
+        context.setPropertyResolved(isResolved);
 
         if (beanNameResolver.isNameResolved(beanName) ||
                 beanNameResolver.canCreateBean(beanName)) {
-            context.setPropertyResolved(true);
-            beanNameResolver.setBeanValue(beanName, value);
+            try {
+                beanNameResolver.setBeanValue(beanName, value);
+                context.setPropertyResolved(true);
+            } catch (Throwable t) {
+                Util.handleThrowable(t);
+                throw new ELException(t);
+            }
         }
     }
 

==================================================
TesterBeanNameResolver.java
index bfcb9c09eb..f4dcea0b91 100644
--- a/test/javax/el/TestBeanNameELResolver.java
+++ b/test/javax/el/TestBeanNameELResolver.java
@@ -140,7 +140,8 @@ public class TestBeanNameELResolver {
      */
     @Test
     public void testGetValue06() {
-        doGetValueThrowableTest(TesterBeanNameResolver.EXCEPTION_TRIGGER_NAME);
+        doThrowableTest(TesterBeanNameResolver.EXCEPTION_TRIGGER_NAME,
+                MethodUnderTest.GET_VALUE);
     }
 
 
@@ -149,28 +150,8 @@ public class TestBeanNameELResolver {
      */
     @Test
     public void testGetValue07() {
-        doGetValueThrowableTest(TesterBeanNameResolver.THROWABLE_TRIGGER_NAME);
-    }
-
-
-    private void doGetValueThrowableTest(String trigger) {
-        BeanNameELResolver resolver = createBeanNameELResolver();
-        ELContext context =
-                new StandardELContext(ELManager.getExpressionFactory());
-
-        ELException elException = null;
-        try {
-            resolver.getValue(context, null,trigger);
-        } catch (ELException e) {
-            elException = e;
-        }
-
-        Assert.assertFalse(context.isPropertyResolved());
-        Assert.assertNotNull(elException);
-
-        @SuppressWarnings("null") // Can't be null due to assertion above
-        Throwable cause = elException.getCause();
-        Assert.assertNotNull(cause);
+        doThrowableTest(TesterBeanNameResolver.THROWABLE_TRIGGER_NAME,
+                MethodUnderTest.GET_VALUE);
     }
 
 
@@ -240,6 +221,61 @@ public class TestBeanNameELResolver {
     }
 
 
+    /**
+     * Exception during resolution should be wrapped and re-thrown.
+     */
+    @Test
+    public void testGetValue08() {
+        doThrowableTest(TesterBeanNameResolver.EXCEPTION_TRIGGER_NAME,
+                MethodUnderTest.SET_VALUE);
+    }
+
+
+    /**
+     * Throwable during resolution should be wrapped and re-thrown.
+     */
+    @Test
+    public void testGetValue09() {
+        doThrowableTest(TesterBeanNameResolver.THROWABLE_TRIGGER_NAME,
+                MethodUnderTest.SET_VALUE);
+    }
+
+
+    private void doThrowableTest(String trigger, MethodUnderTest method) {
+        BeanNameELResolver resolver = createBeanNameELResolver();
+        ELContext context =
+                new StandardELContext(ELManager.getExpressionFactory());
+
+        ELException elException = null;
+        try {
+            switch (method) {
+                case GET_VALUE: {
+                    resolver.getValue(context, null, trigger);
+                    break;
+                }
+                case SET_VALUE: {
+                    resolver.setValue(context, null, trigger, new Object());
+                    break;
+                }
+                default: {
+                    // Should never happen
+                    Assert.fail("Missing case for method");
+                }
+            }
+
+        } catch (ELException e) {
+            elException = e;
+        }
+
+        Assert.assertFalse(context.isPropertyResolved());
+        Assert.assertNotNull(elException);
+
+        @SuppressWarnings("null") // Can't be null due to assertion above
+        Throwable cause = elException.getCause();
+        Assert.assertNotNull(cause);
+    }
+
+
     /**
      * Tests adding/replacing beans beans
      */
@@ -280,4 +316,10 @@ public class TestBeanNameELResolver {
             Assert.assertEquals(BEAN01, bean);
         }
     }
+
+
+    private static enum MethodUnderTest {
+        GET_VALUE,
+        SET_VALUE
+    }
 }

==================================================
