5ddb53fcdbec531f5737d21e7425cff78aa77b4b
==================================================
Remove unused code (BCELComparator)
==================================================
Mark Emlyn
==================================================
Thu Sep 11 09:21:43 2014 +0000
==================================================
Constant.java
Remove unused code (BCELComparator)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1624235 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JavaClass.java
index a918fcf534..87d655d5a1 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Constant.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Constant.java
@@ -22,7 +22,6 @@ import java.io.IOException;
 import java.io.Serializable;
 
 import org.apache.tomcat.util.bcel.Constants;
-import org.apache.tomcat.util.bcel.util.BCELComparator;
 
 /**
  * Abstract superclass for classes to represent the different constant types
@@ -34,22 +33,7 @@ import org.apache.tomcat.util.bcel.util.BCELComparator;
 public abstract class Constant implements Serializable {
 
     private static final long serialVersionUID = 2827409182154809454L;
-    private static BCELComparator _cmp = new BCELComparator() {
 
-        @Override
-        public boolean equals( Object o1, Object o2 ) {
-            Constant THIS = (Constant) o1;
-            Constant THAT = (Constant) o2;
-            return THIS.toString().equals(THAT.toString());
-        }
-
-
-        @Override
-        public int hashCode( Object o ) {
-            Constant THIS = (Constant) o;
-            return THIS.toString().hashCode();
-        }
-    };
     /* In fact this tag is redundant since we can distinguish different
      * `Constant' objects by their type, i.e., via `instanceof'. In some
      * places we will use the tag for switch()es anyway.
@@ -128,29 +112,4 @@ public abstract class Constant implements Serializable {
     public String toString() {
         return "[" + tag + "]";
     }
-
-
-    /**
-     * Return value as defined by given BCELComparator strategy.
-     * By default two Constant objects are said to be equal when
-     * the result of toString() is equal.
-     *
-     * @see java.lang.Object#equals(java.lang.Object)
-     */
-    @Override
-    public boolean equals( Object obj ) {
-        return _cmp.equals(this, obj);
-    }
-
-
-    /**
-     * Return value as defined by given BCELComparator strategy.
-     * By default return the hashcode of the result of toString().
-     *
-     * @see java.lang.Object#hashCode()
-     */
-    @Override
-    public int hashCode() {
-        return _cmp.hashCode(this);
-    }
 }

==================================================
BCELComparator.java
index 72e0d89226..ae2ee246fa 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
@@ -21,7 +21,6 @@ import java.util.ArrayList;
 import java.util.List;
 
 import org.apache.tomcat.util.bcel.Constants;
-import org.apache.tomcat.util.bcel.util.BCELComparator;
 
 /**
  * Represents a Java class, i.e., the data structures, constant pool,
@@ -33,7 +32,7 @@ import org.apache.tomcat.util.bcel.util.BCELComparator;
 
  * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
  */
-public class JavaClass extends AccessFlags implements Comparable<JavaClass> {
+public class JavaClass extends AccessFlags {
 
     private static final long serialVersionUID = 7029227708237523236L;
     private String class_name;
@@ -46,23 +45,6 @@ public class JavaClass extends AccessFlags implements Comparable<JavaClass> {
     //  Annotations are collected from certain attributes, don't do it more than necessary!
     private boolean annotationsOutOfDate = true;
 
-    private static BCELComparator _cmp = new BCELComparator() {
-
-        @Override
-        public boolean equals( Object o1, Object o2 ) {
-            JavaClass THIS = (JavaClass) o1;
-            JavaClass THAT = (JavaClass) o2;
-            return THIS.getClassName().equals(THAT.getClassName());
-        }
-
-
-        @Override
-        public int hashCode( Object o ) {
-            JavaClass THIS = (JavaClass) o;
-            return THIS.getClassName().hashCode();
-        }
-    };
-
 
     /**
      * Constructor gets all contents as arguments.
@@ -154,39 +136,4 @@ public class JavaClass extends AccessFlags implements Comparable<JavaClass> {
     public String getSuperclassName() {
         return superclass_name;
     }
-
-
-    /**
-     * Return value as defined by given BCELComparator strategy.
-     * By default two JavaClass objects are said to be equal when
-     * their class names are equal.
-     *
-     * @see java.lang.Object#equals(java.lang.Object)
-     */
-    @Override
-    public boolean equals( Object obj ) {
-        return _cmp.equals(this, obj);
-    }
-
-
-    /**
-     * Return the natural ordering of two JavaClasses.
-     * This ordering is based on the class name
-     */
-    @Override
-    public int compareTo(JavaClass obj) {
-        return getClassName().compareTo(obj.getClassName());
-    }
-
-
-    /**
-     * Return value as defined by given BCELComparator strategy.
-     * By default return the hashcode of the class name.
-     *
-     * @see java.lang.Object#hashCode()
-     */
-    @Override
-    public int hashCode() {
-        return _cmp.hashCode(this);
-    }
 }

==================================================
