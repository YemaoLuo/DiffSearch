f6be17f364a204f69a522b3cba0e95a591a877a9
==================================================
Implement dynamically adding servlets and filters. This compiles but is untested.
==================================================
Mark Emlyn
==================================================
Wed Jan 14 21:55:59 2009 +0000
==================================================
ApplicationContext.java
Implement dynamically adding servlets and filters. This compiles but is untested.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@734527 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ApplicationContextFacade.java
index d5999fa208..e7054d7005 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -49,6 +49,8 @@ import org.apache.catalina.Host;
 import org.apache.catalina.Wrapper;
 import org.apache.catalina.connector.Connector;
 import org.apache.catalina.deploy.ApplicationParameter;
+import org.apache.catalina.deploy.FilterDef;
+import org.apache.catalina.deploy.FilterMap;
 import org.apache.catalina.util.Enumerator;
 import org.apache.catalina.util.ResourceSet;
 import org.apache.catalina.util.ServerInfo;
@@ -836,26 +838,82 @@ public class ApplicationContext
     public void addFilter(String filterName, String description,
             String className, Map<String, String> initParameters,
             boolean isAsyncSupported) {
-        // TODO SERVLET3
+
+        if (context.initialized) {
+            //TODO Spec breaking enhancement to ignore this restriction
+            throw new IllegalStateException(
+                    sm.getString("applicationContext.addFilter.ise",
+                            getContextPath()));
+        }
+        FilterDef filterDef = new FilterDef();
+        filterDef.setFilterName(filterName);
+        filterDef.setDescription(description);
+        filterDef.setFilterClass(className);
+        filterDef.getParameterMap().putAll(initParameters);
+        context.addFilterDef(filterDef);
+        // TODO SERVLET3 - ASync support
     }
 
 
     public void addFilterMappingForServletNames(String filterName,
             EnumSet<DispatcherType> dispatcherTypes, boolean isMatchAfter,
             String... servletNames) {
-        // TODO SERVLET3
+        if (context.initialized) {
+            //TODO Spec breaking enhancement to ignore this restriction
+            throw new IllegalStateException(sm.getString(
+                    "applicationContext.addFilterMapping", getContextPath()));
+        }
+        FilterMap filterMap = new FilterMap(); 
+        for (String servletName : servletNames) {
+            filterMap.addServletName(servletName);
+        }
+        filterMap.setFilterName(filterName);
+        for (DispatcherType dispatcherType: dispatcherTypes) {
+            filterMap.setDispatcher(dispatcherType.name());
+        }
+        if (isMatchAfter) {
+            context.addFilterMap(filterMap);
+        } else {
+            context.addFilterMapBefore(filterMap);
+        }
     }
 
 
     public void addFilterMappingForUrlPatterns(String filterName,
             EnumSet<DispatcherType> dispatcherTypes, boolean isMatchAfter,
             String... urlPatterns) {
-        // TODO SERVLET3
+        
+        if (context.initialized) {
+            //TODO Spec breaking enhancement to ignore this restriction
+            throw new IllegalStateException(sm.getString(
+                    "applicationContext.addFilterMapping", getContextPath()));
+        }
+        FilterMap filterMap = new FilterMap(); 
+        for (String urlPattern : urlPatterns) {
+            filterMap.addURLPattern(urlPattern);
+        }
+        filterMap.setFilterName(filterName);
+        for (DispatcherType dispatcherType: dispatcherTypes) {
+            filterMap.setDispatcher(dispatcherType.name());
+        }
+        if (isMatchAfter) {
+            context.addFilterMap(filterMap);
+        } else {
+            context.addFilterMapBefore(filterMap);
+        }
     }
 
 
     public void addServletMapping(String servletName, String[] urlPatterns) {
-        // TODO SERVLET3
+        if (context.initialized) {
+            //TODO Spec breaking enhancement to ignore this restriction
+            throw new IllegalStateException(sm.getString(
+                    "applicationContext.addServletMapping", getContextPath()));
+        }
+        for (String urlPattern : urlPatterns) {
+            boolean jspWildCard = ("*.jsp".equals(urlPattern));
+            context.addServletMapping(servletName, urlPattern, jspWildCard);
+        }
     }
 
 
@@ -882,10 +940,7 @@ public class ApplicationContext
         // Context > Host > Engine > Service
         Connector[] connectors = ((Engine) context.getParent().getParent())
                 .getService().findConnectors();
-        // Need at least one SSL enabled connector to use the SSL session ID.
-        // has to be SSL enabled so we can close the SSL session.
-        // TODO extend this for SSL sessions managed by accelerators, web
-        // servers etc
+        // Need at least one secure connector to use the SSL session ID.
         for (Connector connector : connectors) {
             if (Boolean.TRUE.equals(connector.getAttribute("secure"))) {
                 defaultSessionTrackingModes.add(SessionTrackingMode.SSL);
@@ -1123,4 +1178,4 @@ public class ApplicationContext
     }
 
 
-}
\ No newline at end of file
+}

==================================================
StandardContext.java
index 03efc679cb..8fd443b8fa 100644
--- a/java/org/apache/catalina/core/LocalStrings.properties
+++ b/java/org/apache/catalina/core/LocalStrings.properties
@@ -13,6 +13,9 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
+applicationContext.addFilter.ise=Filters can not be added to context {0} at this time. See SRV.4.4.
+applicationContext.addFilterMapping.ise=Filter mappings can not be added to context {0} at this time. See SRV.4.4.
+applicationContext.addServletMapping.ise=Servlet mappings can not be added to context {0} at this time. See SRV.4.4.
 applicationContext.attributeEvent=Exception thrown by attributes event listener
 applicationContext.mapping.error=Error during mapping
 applicationContext.requestDispatcher.iae=Path {0} does not start with a "/" character

==================================================
FilterMap.java
index b6c989bd90..284ac5fd2d 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -360,10 +360,22 @@ public class StandardContext
 
     /**
      * The set of filter mappings for this application, in the order
-     * they were defined in the deployment descriptor.
+     * they were defined in the deployment descriptor with additional mappings
+     * added via the {@link ServletContext} possibly both before and after those
+     * defined in the deployment descriptor.
      */
     private FilterMap filterMaps[] = new FilterMap[0];
 
+    /**
+     * Filter mappings added via {@link ServletContext} may have to be inserted
+     * before the mappings in the deploymenmt descriptor but must be inserted in
+     * the order the {@link ServletContext} methods are called. This isn't an
+     * issue for the mappings added after the deployment descriptor - they are
+     * just added to the end - but correctly the adding mappings before the
+     * deployment descriptor mappings requires knowing where the last 'before'
+     * mapping was added.
+     */
+    private int filterMapInsertPoint = 0;
 
     /**
      * Ignore annotations.
@@ -2173,7 +2185,8 @@ public class StandardContext
 
 
     /**
-     * Add a filter mapping to this Context.
+     * Add a filter mapping to this Context at the end of the current set
+     * of filter mappings.
      *
      * @param filterMap The filter mapping to be added
      *
@@ -2183,6 +2196,54 @@ public class StandardContext
      */
     public void addFilterMap(FilterMap filterMap) {
 
+        validateFilterMap(filterMap);
+        // Add this filter mapping to our registered set
+        synchronized (filterMaps) {
+            FilterMap results[] =new FilterMap[filterMaps.length + 1];
+            System.arraycopy(filterMaps, 0, results, 0, filterMaps.length);
+            results[filterMaps.length] = filterMap;
+            filterMaps = results;
+        }
+        fireContainerEvent("addFilterMap", filterMap);
+    }
+
+    
+    /**
+     * Add a filter mapping to this Context before the mappings defined in the
+     * deployment descriptor but after any other mappings added via this method.
+     *
+     * @param filterMap The filter mapping to be added
+     *
+     * @exception IllegalArgumentException if the specified filter name
+     *  does not match an existing filter definition, or the filter mapping
+     *  is malformed
+     */
+    public void addFilterMapBefore(FilterMap filterMap) {
+
+        validateFilterMap(filterMap);
+
+        // Add this filter mapping to our registered set
+        synchronized (filterMaps) {
+            FilterMap results[] = new FilterMap[filterMaps.length + 1];
+            System.arraycopy(filterMaps, 0, results, 0, filterMapInsertPoint);
+            results[filterMapInsertPoint] = filterMap;
+            System.arraycopy(filterMaps, filterMapInsertPoint, results,
+                    filterMaps.length - filterMapInsertPoint+1,
+                    filterMapInsertPoint);
+            
+            filterMapInsertPoint++;
+            
+            results[filterMaps.length] = filterMap;
+            filterMaps = results;
+        }
+        fireContainerEvent("addFilterMap", filterMap);
+    }
+
+
+    /**
+     * Validate the supplied FilterMap.
+     */
+    private void validateFilterMap(FilterMap filterMap) {
         // Validate the proposed filter mapping
         String filterName = filterMap.getFilterName();
         String[] servletNames = filterMap.getServletNames();
@@ -2190,10 +2251,7 @@ public class StandardContext
         if (findFilterDef(filterName) == null)
             throw new IllegalArgumentException
                 (sm.getString("standardContext.filterMap.name", filterName));
-//      <= Servlet API 2.4
-//      if ((servletNames.length == 0) && (urlPatterns.length == 0))
-//      Servlet API 2.5 (FIX 43338)
-//      SRV 6.2.5 says supporting for '*' as the servlet-name in filter-mapping.
+
         if (!filterMap.getMatchAllServletNames() && 
             !filterMap.getMatchAllUrlPatterns() && 
             (servletNames.length == 0) && (urlPatterns.length == 0))
@@ -2205,8 +2263,6 @@ public class StandardContext
             throw new IllegalArgumentException
                 (sm.getString("standardContext.filterMap.either"));
         */
-        // Because filter-pattern is new in 2.3, no need to adjust
-        // for 2.2 backwards compatibility
         for (int i = 0; i < urlPatterns.length; i++) {
             if (!validateURLPattern(urlPatterns[i])) {
                 throw new IllegalArgumentException
@@ -2214,19 +2270,8 @@ public class StandardContext
                             urlPatterns[i]));
             }
         }
-
-        // Add this filter mapping to our registered set
-        synchronized (filterMaps) {
-            FilterMap results[] =new FilterMap[filterMaps.length + 1];
-            System.arraycopy(filterMaps, 0, results, 0, filterMaps.length);
-            results[filterMaps.length] = filterMap;
-            filterMaps = results;
-        }
-        fireContainerEvent("addFilterMap", filterMap);
-
     }
 
-
     /**
      * Add the classname of an InstanceListener to be added to each
      * Wrapper appended to this Context.
@@ -3339,6 +3384,9 @@ public class StandardContext
             System.arraycopy(filterMaps, 0, results, 0, n);
             System.arraycopy(filterMaps, n + 1, results, n,
                              (filterMaps.length - 1) - n);
+            if (n < filterMapInsertPoint) {
+                filterMapInsertPoint--;
+            }
             filterMaps = results;
 
         }

==================================================
