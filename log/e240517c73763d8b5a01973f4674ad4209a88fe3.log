e240517c73763d8b5a01973f4674ad4209a88fe3
==================================================
Align the process methods some more.
==================================================
Mark Emlyn
==================================================
Fri Jul 8 11:40:36 2011 +0000
==================================================
AjpAprProtocol.java
Align the process methods some more.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1144271 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpNioProtocol.java
index f1152bfeef..661b68e24a 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -174,7 +174,6 @@ public class AjpAprProtocol extends AbstractAjpProtocol {
                     recycledProcessors.offer(processor);
                 }
                 return state;
-
             } catch(java.net.SocketException e) {
                 // SocketExceptions are normal
                 log.debug(sm.getString(

==================================================
AjpProtocol.java
index 0d9299e2f3..1a04b666d5 100644
--- a/java/org/apache/coyote/ajp/AjpNioProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpNioProtocol.java
@@ -206,7 +206,6 @@ public class AjpNioProtocol extends AbstractAjpProtocol {
                     // In the middle of processing a request/response. Keep the
                     // socket associated with the processor.
                     connections.put(socket, processor);
-                    
                     socket.setAsync(true);
                 } else if (state == SocketState.OPEN){
                     // In keep-alive but between requests. OK to recycle
@@ -218,7 +217,6 @@ public class AjpNioProtocol extends AbstractAjpProtocol {
                     release(socket, processor, true);
                 }
                 return state;
-
             } catch(java.net.SocketException e) {
                 // SocketExceptions are normal
                 log.debug(sm.getString(

==================================================
AbstractEndpoint.java
index 75c9436885..111d1a82de 100644
--- a/java/org/apache/coyote/ajp/AjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpProtocol.java
@@ -125,8 +125,12 @@ public class AjpProtocol extends AbstractAjpProtocol {
         }
         
         @Override
-        public SocketState process(SocketWrapper<Socket> socket, SocketStatus status) {
+        public SocketState process(SocketWrapper<Socket> socket,
+                SocketStatus status) {
             AjpProcessor processor = connections.remove(socket);
+
+            socket.setAsync(false);
+
             try {
                 if (processor == null) {
                     processor = recycledProcessors.poll();
@@ -147,12 +151,15 @@ public class AjpProtocol extends AbstractAjpProtocol {
                         state = processor.asyncPostProcess();
                     }
                 } while (state == SocketState.ASYNC_END);
-                // TODO Better to add a new state to the AsyncStateMachine and
-                //      remove ASYNC_END entirely
 
                 if (state == SocketState.LONG) {
+                    // In the middle of processing a request/response. Keep the
+                    // socket associated with the processor.
                     connections.put(socket, processor);
+                    socket.setAsync(true);
                 } else if (state == SocketState.OPEN){
+                    // In keep-alive but between requests. OK to recycle
+                    // processor. Continue to poll for the next request.
                     processor.recycle(false);
                     recycledProcessors.offer(processor);
                 } else {

==================================================
