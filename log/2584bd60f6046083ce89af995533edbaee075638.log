2584bd60f6046083ce89af995533edbaee075638
==================================================
Enable TesterLogValidationFilter to test log levels and throwables as well as messages.
==================================================
Mark Thomas
==================================================
Mon Jun 5 20:07:56 2017 +0000
==================================================
TestWebappClassLoaderThreadLocalMemoryLeak.java
Enable TesterLogValidationFilter to test log levels and throwables as well as messages.
Fix some test errors when running the disabled memory leak tests.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1797692 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TesterLogValidationFilter.java
index 942aaec994..0a89a505c1 100644
--- a/test/org/apache/catalina/loader/TestWebappClassLoaderThreadLocalMemoryLeak.java
+++ b/test/org/apache/catalina/loader/TestWebappClassLoaderThreadLocalMemoryLeak.java
@@ -18,7 +18,6 @@ package org.apache.catalina.loader;
 
 import java.io.InputStream;
 import java.util.concurrent.Executor;
-import java.util.logging.LogManager;
 
 import javax.servlet.http.HttpServletResponse;
 
@@ -74,17 +73,16 @@ public class TestWebappClassLoaderThreadLocalMemoryLeak extends TomcatBaseTest {
         ((ThreadPoolExecutor) executor).setThreadRenewalDelay(-1);
 
         // Configure logging filter to check leak message appears
-        TesterLogValidationFilter f = new TesterLogValidationFilter(
-                "The web application [ROOT] created a ThreadLocal with key of");
-        LogManager.getLogManager().getLogger(
-                "org.apache.catalina.loader.WebappClassLoaderBase").setFilter(f);
+        TesterLogValidationFilter f = TesterLogValidationFilter.add(null,
+                "The web application [ROOT] created a ThreadLocal with key of", null,
+                "org.apache.catalina.loader.WebappClassLoaderBase");
 
         // Need to force loading of all web application classes via the web
         // application class loader
         loadClass("TesterCounter",
-                (WebappClassLoader) ctx.getLoader().getClassLoader());
+                (WebappClassLoaderBase) ctx.getLoader().getClassLoader());
         loadClass("TesterLeakingServlet1",
-                (WebappClassLoader) ctx.getLoader().getClassLoader());
+                (WebappClassLoaderBase) ctx.getLoader().getClassLoader());
 
         // This will trigger the ThreadLocal creation
         int rc = getUrl("http://localhost:" + getPort() + "/leak1",
@@ -130,19 +128,18 @@ public class TestWebappClassLoaderThreadLocalMemoryLeak extends TomcatBaseTest {
         ((ThreadPoolExecutor) executor).setThreadRenewalDelay(-1);
 
         // Configure logging filter to check leak message appears
-        TesterLogValidationFilter f = new TesterLogValidationFilter(
-                "The web application [ROOT] created a ThreadLocal with key of");
-        LogManager.getLogManager().getLogger(
-                "org.apache.catalina.loader.WebappClassLoaderBase").setFilter(f);
+        TesterLogValidationFilter f = TesterLogValidationFilter.add(null,
+                "The web application [ROOT] created a ThreadLocal with key of", null,
+                "org.apache.catalina.loader.WebappClassLoaderBase");
 
         // Need to force loading of all web application classes via the web
         // application class loader
         loadClass("TesterCounter",
-                (WebappClassLoader) ctx.getLoader().getClassLoader());
+                (WebappClassLoaderBase) ctx.getLoader().getClassLoader());
         loadClass("TesterThreadScopedHolder",
-                (WebappClassLoader) ctx.getLoader().getClassLoader());
+                (WebappClassLoaderBase) ctx.getLoader().getClassLoader());
         loadClass("TesterLeakingServlet2",
-                (WebappClassLoader) ctx.getLoader().getClassLoader());
+                (WebappClassLoaderBase) ctx.getLoader().getClassLoader());
 
         // This will trigger the ThreadLocal creation
         int rc = getUrl("http://localhost:" + getPort() + "/leak2",
@@ -177,7 +174,7 @@ public class TestWebappClassLoaderThreadLocalMemoryLeak extends TomcatBaseTest {
      *
      * This method assumes that all classes are in the current package.
      */
-    private void loadClass(String name, WebappClassLoader cl) throws Exception {
+    private void loadClass(String name, WebappClassLoaderBase cl) throws Exception {
         try (InputStream is = cl.getResourceAsStream(
                 "org/apache/tomcat/unittest/" + name + ".class")) {
             // We know roughly how big the class will be (~ 1K) so allow 2k as a

==================================================
