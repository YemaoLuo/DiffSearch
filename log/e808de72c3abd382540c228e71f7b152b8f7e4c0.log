e808de72c3abd382540c228e71f7b152b8f7e4c0
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56032
==================================================
Mark Emlyn
==================================================
Tue Jan 21 19:51:26 2014 +0000
==================================================
NioServletOutputStream.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56032
After an IO error sending a WebSocket message, close the connection.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1560158 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WsFrameBase.java
index e32f6f55d7..37076c758a 100644
--- a/java/org/apache/tomcat/websocket/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/LocalStrings.properties
@@ -43,6 +43,7 @@ wsFrame.controlNoFin=A control frame was sent that did not have the fin bit set.
 wsFrame.invalidOpCode= A WebSocket frame was sent with an unrecognised opCode of [{0}]
 wsFrame.invalidUtf8=A WebSocket text frame was received that could not be decoded to UTF-8 because it contained invalid byte sequences
 wsFrame.invalidUtf8Close=A WebSocket close frame was received with a close reason that contained invalid UTF-8 byte sequences
+wsFrame.ioeTriggeredClose=An unrecoverable IOException occurred so the connection was closed
 wsFrame.messageTooBig=The message was [{0}] bytes long but the MessageHandler has a limit of [{1}] bytes
 wsFrame.noContinuation=A new message was started when a continuation frame was expected
 wsFrame.notMasked=The client frame was not masked but all client frames must be masked

==================================================
WsSession.java
index 2a63473595..fcbbb23e58 100644
--- a/java/org/apache/tomcat/websocket/WsFrameBase.java
+++ b/java/org/apache/tomcat/websocket/WsFrameBase.java
@@ -333,8 +333,7 @@ public abstract class WsFrameBase {
                 try {
                     mhPong.onMessage(new WsPongMessage(controlBufferBinary));
                 } catch (Throwable t) {
-                    ExceptionUtils.handleThrowable(t);
-                    wsSession.getLocal().onError(wsSession, t);
+                    handleThrowableOnSend(t);
                 } finally {
                     controlBufferBinary.clear();
                 }
@@ -377,8 +376,7 @@ public abstract class WsFrameBase {
                         messageBufferText.toString());
             }
         } catch (Throwable t) {
-            ExceptionUtils.handleThrowable(t);
-            wsSession.getLocal().onError(wsSession, t);
+            handleThrowableOnSend(t);
         } finally {
             messageBufferText.clear();
         }
@@ -533,6 +531,15 @@ public abstract class WsFrameBase {
     }
 
 
+    private void handleThrowableOnSend(Throwable t) throws WsIOException {
+        ExceptionUtils.handleThrowable(t);
+        wsSession.getLocal().onError(wsSession, t);
+        CloseReason cr = new CloseReason(CloseCodes.CLOSED_ABNORMALLY,
+                sm.getString("wsFrame.ioeTriggeredClose"));
+        throw new WsIOException(cr);
+    }
+
+
     @SuppressWarnings("unchecked")
     private void sendMessageBinary(ByteBuffer msg, boolean last)
             throws WsIOException {
@@ -554,8 +561,7 @@ public abstract class WsFrameBase {
                 ((MessageHandler.Whole<ByteBuffer>) binaryMsgHandler).onMessage(msg);
             }
         } catch(Throwable t) {
-            ExceptionUtils.handleThrowable(t);
-            wsSession.getLocal().onError(wsSession, t);
+            handleThrowableOnSend(t);
         }
     }
 

==================================================
TestWebSocketFrameClient.java
index 2104b778b2..d23a1f1858 100644
--- a/java/org/apache/tomcat/websocket/WsSession.java
+++ b/java/org/apache/tomcat/websocket/WsSession.java
@@ -465,7 +465,13 @@ public class WsSession implements Session {
         // 125 is maximum size for the payload of a control message
         ByteBuffer msg = ByteBuffer.allocate(125);
         CloseCode closeCode = closeReason.getCloseCode();
-        msg.putShort((short) closeCode.getCode());
+        // CLOSED_ABNORMALLY should not be put on the wire
+        if (closeCode == CloseCodes.CLOSED_ABNORMALLY) {
+            // PROTOCOL_ERROR is probably better than GOING_AWAY here
+            msg.putShort((short) CloseCodes.PROTOCOL_ERROR.getCode());
+        } else {
+            msg.putShort((short) closeCode.getCode());
+        }
 
         String reason = closeReason.getReasonPhrase();
         if (reason != null && reason.length() > 0) {

==================================================
TesterFirehoseServer.java
index 1b41fed4b4..3a0b68c60c 100644
--- a/test/org/apache/tomcat/websocket/TestWebSocketFrameClient.java
+++ b/test/org/apache/tomcat/websocket/TestWebSocketFrameClient.java
@@ -23,6 +23,7 @@ import java.util.concurrent.TimeUnit;
 
 import javax.websocket.ClientEndpointConfig;
 import javax.websocket.ContainerProvider;
+import javax.websocket.MessageHandler;
 import javax.websocket.Session;
 import javax.websocket.WebSocketContainer;
 
@@ -36,6 +37,7 @@ import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.tomcat.util.descriptor.web.ApplicationListener;
 import org.apache.tomcat.util.net.TesterSupport;
 import org.apache.tomcat.websocket.TesterMessageCountClient.BasicText;
+import org.apache.tomcat.websocket.TesterMessageCountClient.SleepingText;
 import org.apache.tomcat.websocket.TesterMessageCountClient.TesterProgrammaticEndpoint;
 
 public class TestWebSocketFrameClient extends TomcatBaseTest {
@@ -86,4 +88,69 @@ public class TestWebSocketFrameClient extends TomcatBaseTest {
             Assert.assertEquals(TesterFirehoseServer.MESSAGE, message);
         }
     }
+
+
+    @Test
+    public void testBug56032() throws Exception {
+
+        Tomcat tomcat = getTomcatInstance();
+        // Must have a real docBase - just use temp
+        Context ctx =
+            tomcat.addContext("", System.getProperty("java.io.tmpdir"));
+        ctx.addApplicationListener(new ApplicationListener(
+                TesterFirehoseServer.Config.class.getName(), false));
+        Tomcat.addServlet(ctx, "default", new DefaultServlet());
+        ctx.addServletMapping("/", "default");
+
+        TesterSupport.initSsl(tomcat);
+
+        tomcat.start();
+
+        WebSocketContainer wsContainer =
+                ContainerProvider.getWebSocketContainer();
+        ClientEndpointConfig clientEndpointConfig =
+                ClientEndpointConfig.Builder.create().build();
+        clientEndpointConfig.getUserProperties().put(
+                WsWebSocketContainer.SSL_TRUSTSTORE_PROPERTY,
+                "test/org/apache/tomcat/util/net/ca.jks");
+        Session wsSession = wsContainer.connectToServer(
+                TesterProgrammaticEndpoint.class,
+                clientEndpointConfig,
+                new URI("wss://localhost:" + getPort() +
+                        TesterFirehoseServer.Config.PATH));
+
+        // Process incoming messages very slowly
+        MessageHandler handler = new SleepingText(5000);
+        wsSession.addMessageHandler(handler);
+        wsSession.getBasicRemote().sendText("Hello");
+
+        // Wait long enough for the buffers to fill and the send to timeout
+        int count = 0;
+        int limit = TesterFirehoseServer.WAIT_TIME_MILLIS / 100;
+
+        System.out.println("Waiting for server to report an error");
+        while (TesterFirehoseServer.Endpoint.getErrorCount() == 0 && count < limit) {
+            Thread.sleep(100);
+            count ++;
+        }
+
+        if (TesterFirehoseServer.Endpoint.getErrorCount() == 0) {
+            Assert.fail("No error reported by Endpoint when timeout was expected");
+        }
+
+        // Wait up to another 10 seconds for the connection to be closed -
+        // should be a lot faster.
+        System.out.println("Waiting for connection to be closed");
+        count = 0;
+        limit = 10000;
+        while (TesterFirehoseServer.Endpoint.getOpenConnectionCount() != 0 && count < limit) {
+            Thread.sleep(100);
+            count ++;
+        }
+
+        int openConnectionCount = TesterFirehoseServer.Endpoint.getOpenConnectionCount();
+        if (openConnectionCount != 0) {
+            Assert.fail("There are [" + openConnectionCount + "] connections still open");
+        }
+    }
 }

==================================================
TesterMessageCountClient.java
index 4047ff95cc..b86450fe15 100644
--- a/test/org/apache/tomcat/websocket/TesterFirehoseServer.java
+++ b/test/org/apache/tomcat/websocket/TesterFirehoseServer.java
@@ -17,10 +17,14 @@
 package org.apache.tomcat.websocket;
 
 import java.io.IOException;
+import java.util.concurrent.atomic.AtomicInteger;
 
 import javax.servlet.ServletContextEvent;
 import javax.websocket.DeploymentException;
+import javax.websocket.OnClose;
+import javax.websocket.OnError;
 import javax.websocket.OnMessage;
+import javax.websocket.OnOpen;
 import javax.websocket.RemoteEndpoint.Basic;
 import javax.websocket.Session;
 import javax.websocket.server.ServerContainer;
@@ -39,6 +43,7 @@ public class TesterFirehoseServer {
     public static final String MESSAGE;
     public static final int MESSAGE_SIZE = 1024;
     public static final int WAIT_TIME_MILLIS = 60000;
+    public static final int SEND_TIME_OUT_MILLIS = 5000;
 
     static {
         StringBuilder sb = new StringBuilder(MESSAGE_SIZE);
@@ -71,8 +76,24 @@ public class TesterFirehoseServer {
     @ServerEndpoint(Config.PATH)
     public static class Endpoint {
 
+        private static AtomicInteger openConnectionCount = new AtomicInteger(0);
+        private static AtomicInteger errorCount = new AtomicInteger(0);
+
         private volatile boolean started = false;
 
+        public static int getOpenConnectionCount() {
+            return openConnectionCount.intValue();
+        }
+
+        public static int getErrorCount() {
+            return errorCount.intValue();
+        }
+
+        @OnOpen
+        public void onOpen() {
+            openConnectionCount.incrementAndGet();
+        }
+
         @OnMessage
         public void onMessage(Session session,
                 @SuppressWarnings("unused") String msg) throws IOException {
@@ -90,7 +111,7 @@ public class TesterFirehoseServer {
 
             session.getUserProperties().put(
                     "org.apache.tomcat.websocket.BLOCKING_SEND_TIMEOUT",
-                    Long.valueOf(WAIT_TIME_MILLIS));
+                    Long.valueOf(SEND_TIME_OUT_MILLIS));
 
             Basic remote = session.getBasicRemote();
             remote.setBatchingAllowed(true);
@@ -102,5 +123,15 @@ public class TesterFirehoseServer {
             // Ensure remaining messages are flushed
             remote.setBatchingAllowed(false);
         }
+
+        @OnError
+        public void onError(@SuppressWarnings("unused") Throwable t) {
+            errorCount.incrementAndGet();
+        }
+
+        @OnClose
+        public void onClose() {
+            openConnectionCount.decrementAndGet();
+        }
     }
 }

==================================================
