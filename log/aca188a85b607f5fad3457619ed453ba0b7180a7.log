aca188a85b607f5fad3457619ed453ba0b7180a7
==================================================
Revert "Step 1 - merge BackLogTracker into AbstractStream"
==================================================
Mark Thomas
==================================================
Mon Sep 13 17:28:16 2021 +0100
==================================================
AbstractStream.java
Revert "Step 1 - merge BackLogTracker into AbstractStream"

This reverts commit 74681f56475541ff6069aadb1a88bd4d687e7446.



==================================================
Http2UpgradeHandler.java
index d3195eb2b4..c7374b6fa9 100644
--- a/java/org/apache/coyote/http2/AbstractStream.java
+++ b/java/org/apache/coyote/http2/AbstractStream.java
@@ -40,9 +40,6 @@ abstract class AbstractStream {
     private final Set<AbstractNonZeroStream> childStreams = Collections.newSetFromMap(new ConcurrentHashMap<>());
     private long windowSize = ConnectionSettingsBase.DEFAULT_INITIAL_WINDOW_SIZE;
 
-    volatile int remainingReservation;
-    volatile int unusedAllocation;
-    volatile boolean notifyInProgress;
 
     AbstractStream(Integer identifier) {
         this.identifier = identifier;
@@ -160,66 +157,4 @@ abstract class AbstractStream {
     abstract String getConnectionId();
 
     abstract int getWeight();
-
-
-    /**
-     * @return The number of bytes requiring an allocation from the
-     *         Connection flow control window
-     */
-    public int getRemainingReservation() {
-        return remainingReservation;
-    }
-
-    /**
-     *
-     * @return The number of bytes allocated from the Connection flow
-     *         control window but not yet written
-     */
-    public int getUnusedAllocation() {
-        return unusedAllocation;
-    }
-
-    /**
-     * The purpose of this is to avoid the incorrect triggering of a timeout
-     * for the following sequence of events:
-     * <ol>
-     * <li>window update 1</li>
-     * <li>allocation 1</li>
-     * <li>notify 1</li>
-     * <li>window update 2</li>
-     * <li>allocation 2</li>
-     * <li>act on notify 1 (using allocation 1 and 2)</li>
-     * <li>notify 2</li>
-     * <li>act on notify 2 (timeout due to no allocation)</li>
-     * </ol>
-     *
-     * @return {@code true} if a notify has been issued but the associated
-     *         allocation has not been used, otherwise {@code false}
-     */
-    public boolean isNotifyInProgress() {
-        return notifyInProgress;
-    }
-
-    public void useAllocation() {
-        unusedAllocation = 0;
-        notifyInProgress = false;
-    }
-
-    public void startNotify() {
-        notifyInProgress = true;
-    }
-
-    protected int allocate(int allocation) {
-        if (remainingReservation >= allocation) {
-            remainingReservation -= allocation;
-            unusedAllocation += allocation;
-            return 0;
-        }
-
-        int left = allocation - remainingReservation;
-        unusedAllocation += remainingReservation;
-        remainingReservation = 0;
-
-        return left;
-    }
 }

==================================================
