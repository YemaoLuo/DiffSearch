3acfd4f3bd56287ae18c1b7e27564dede99acc37
==================================================
Rename for consistency. No functional change.
==================================================
Mark Emlyn
==================================================
Sat Nov 24 17:39:48 2012 +0000
==================================================
MessageHandler.java
Rename for consistency. No functional change.
Simple testing of WebSocket (the examples) works for BIO, NIO and APR

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1413216 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StreamHandler.java
similarity index 98%
rename from java/org/apache/catalina/websocket/MessageInbound.java
rename to java/org/apache/catalina/websocket/MessageHandler.java
index 21a503a2ff..e17517f827 100644
--- a/java/org/apache/catalina/websocket/MessageInbound.java
+++ b/java/org/apache/catalina/websocket/MessageHandler.java
@@ -30,7 +30,7 @@ import org.apache.tomcat.util.res.StringManager;
  * specific functionality. Applications that wish to operate on a stream basis
  * rather than a message basis should use {@link StreamHandler}.
  */
-public abstract class MessageInbound extends StreamHandler {
+public abstract class MessageHandler extends StreamHandler {
 
     private static final StringManager sm =
             StringManager.getManager(Constants.Package);

==================================================
TestWebSocket.java
index ef69847a8f..4204d88722 100644
--- a/java/org/apache/catalina/websocket/StreamHandler.java
+++ b/java/org/apache/catalina/websocket/StreamHandler.java
@@ -33,7 +33,7 @@ import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
  * Base implementation of the class used to process WebSocket connections based
  * on streams. Applications should extend this class to provide application
  * specific functionality. Applications that wish to operate on a message basis
- * rather than a stream basis should use {@link MessageInbound}.
+ * rather than a stream basis should use {@link MessageHandler}.
  */
 public abstract class StreamHandler implements ProtocolHandler {
 

==================================================
ChatWebSocketServlet.java
index ab8f96fb76..6bca2aaa0e 100644
--- a/test/org/apache/catalina/websocket/TestWebSocket.java
+++ b/test/org/apache/catalina/websocket/TestWebSocket.java
@@ -307,7 +307,7 @@ public class TestWebSocket extends TomcatBaseTest {
     }
 
 
-    private static class Bug53339WsInbound extends MessageInbound {
+    private static class Bug53339WsInbound extends MessageHandler {
 
         public static final String TEST_MESSAGE = "Test Message";
         public static final String JNDI_NAME = "Bug53339Message";

==================================================
EchoMessage.java
index b66bdaf673..be094a5153 100644
--- a/webapps/examples/WEB-INF/classes/websocket/chat/ChatWebSocketServlet.java
+++ b/webapps/examples/WEB-INF/classes/websocket/chat/ChatWebSocketServlet.java
@@ -25,7 +25,7 @@ import java.util.concurrent.atomic.AtomicInteger;
 
 import javax.servlet.http.HttpServletRequest;
 
-import org.apache.catalina.websocket.MessageInbound;
+import org.apache.catalina.websocket.MessageHandler;
 import org.apache.catalina.websocket.StreamHandler;
 import org.apache.catalina.websocket.WebSocketServlet;
 import org.apache.catalina.websocket.WsOutbound;
@@ -42,20 +42,20 @@ public class ChatWebSocketServlet extends WebSocketServlet {
     private static final String GUEST_PREFIX = "Guest";
 
     private final AtomicInteger connectionIds = new AtomicInteger(0);
-    private final Set<ChatMessageInbound> connections =
+    private final Set<ChatMessageHandler> connections =
             new CopyOnWriteArraySet<>();
 
     @Override
     protected StreamHandler createWebSocketHandler(String subProtocol,
             HttpServletRequest request) {
-        return new ChatMessageInbound(connectionIds.incrementAndGet());
+        return new ChatMessageHandler(connectionIds.incrementAndGet());
     }
 
-    private final class ChatMessageInbound extends MessageInbound {
+    private final class ChatMessageHandler extends MessageHandler {
 
         private final String nickname;
 
-        private ChatMessageInbound(int id) {
+        private ChatMessageHandler(int id) {
             this.nickname = GUEST_PREFIX + id;
         }
 
@@ -90,7 +90,7 @@ public class ChatWebSocketServlet extends WebSocketServlet {
         }
 
         private void broadcast(String message) {
-            for (ChatMessageInbound connection : connections) {
+            for (ChatMessageHandler connection : connections) {
                 try {
                     CharBuffer buffer = CharBuffer.wrap(message);
                     connection.getWsOutbound().writeTextMessage(buffer);

==================================================
EchoStream.java
index bab9c0930f..9f82b60703 100644
--- a/webapps/examples/WEB-INF/classes/websocket/echo/EchoMessage.java
+++ b/webapps/examples/WEB-INF/classes/websocket/echo/EchoMessage.java
@@ -23,7 +23,7 @@ import java.nio.CharBuffer;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 
-import org.apache.catalina.websocket.MessageInbound;
+import org.apache.catalina.websocket.MessageHandler;
 import org.apache.catalina.websocket.StreamHandler;
 import org.apache.catalina.websocket.WebSocketServlet;
 
@@ -65,7 +65,7 @@ public class EchoMessage extends WebSocketServlet {
         return new EchoMessageHandler(byteBufSize,charBufSize);
     }
 
-    private static final class EchoMessageHandler extends MessageInbound {
+    private static final class EchoMessageHandler extends MessageHandler {
 
         public EchoMessageHandler(int byteBufferMaxSize, int charBufferMaxSize) {
             super();

==================================================
SnakeWebSocketServlet.java
index b5b57bd402..069819ffea 100644
--- a/webapps/examples/WEB-INF/classes/websocket/echo/EchoStream.java
+++ b/webapps/examples/WEB-INF/classes/websocket/echo/EchoStream.java
@@ -34,10 +34,10 @@ public class EchoStream extends WebSocketServlet {
     @Override
     protected StreamHandler createWebSocketHandler(String subProtocol,
             HttpServletRequest request) {
-        return new EchoStreamInbound();
+        return new EchoStreamHandler();
     }
 
-    private static final class EchoStreamInbound extends StreamHandler {
+    private static final class EchoStreamHandler extends StreamHandler {
 
         @Override
         protected void onBinaryData(InputStream is) throws IOException {

==================================================
