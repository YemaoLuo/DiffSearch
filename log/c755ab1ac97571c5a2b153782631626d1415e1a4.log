c755ab1ac97571c5a2b153782631626d1415e1a4
==================================================
Push the remaining action down to the SocketWrapper
==================================================
Mark Thomas
==================================================
Fri Jan 30 09:36:10 2015 +0000
==================================================
AbstractHttp11Processor.java
Push the remaining action down to the SocketWrapper

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1655972 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index 5e403b93e6..a3ef35e275 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -980,8 +980,25 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
             }
             break;
         }
-        default: {
-            actionInternal(actionCode, param);
+        case REQ_SSL_CERTIFICATE: {
+            if (sslSupport != null && socketWrapper.getSocket() != null) {
+                // Consume and buffer the request body, so that it does not
+                // interfere with the client's handshake messages
+                InputFilter[] inputFilters = getInputBuffer().getFilters();
+                ((BufferedInputFilter) inputFilters[Constants.BUFFERED_FILTER]).setLimit(
+                        maxSavePostSize);
+                getInputBuffer().addActiveFilter(inputFilters[Constants.BUFFERED_FILTER]);
+
+                try {
+                    socketWrapper.doClientAuth(sslSupport);
+                    Object sslO = sslSupport.getPeerCertificateChain();
+                    if (sslO != null) {
+                        request.setAttribute(SSLSupport.CERTIFICATE_KEY, sslO);
+                    }
+                } catch (IOException ioe) {
+                    getLog().warn(sm.getString("http11processor.socket.ssl"), ioe);
+                }
+            }
             break;
         }
         }

==================================================
Http11Nio2Processor.java
index d154ceb8a3..4e6eb9fcf3 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -16,19 +16,10 @@
  */
 package org.apache.coyote.http11;
 
-import java.io.ByteArrayInputStream;
-import java.security.cert.CertificateFactory;
-import java.security.cert.X509Certificate;
-
 import org.apache.coyote.ActionCode;
-import org.apache.coyote.http11.filters.BufferedInputFilter;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.jni.SSL;
-import org.apache.tomcat.jni.SSLSocket;
 import org.apache.tomcat.util.net.AbstractEndpoint;
-import org.apache.tomcat.util.net.AprEndpoint;
-import org.apache.tomcat.util.net.SSLSupport;
 
 
 /**
@@ -64,50 +55,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
      * @param param Action parameter
      */
     @Override
-    @SuppressWarnings("incomplete-switch") // Other cases are handled by action()
     public void actionInternal(ActionCode actionCode, Object param) {
-
-        long socketRef = socketWrapper.getSocket().longValue();
-
-        switch (actionCode) {
-        case REQ_SSL_CERTIFICATE: {
-            if (endpoint.isSSLEnabled() && (socketRef != 0)) {
-                // Consume and buffer the request body, so that it does not
-                // interfere with the client's handshake messages
-                InputFilter[] inputFilters = getInputBuffer().getFilters();
-                ((BufferedInputFilter) inputFilters[Constants.BUFFERED_FILTER]).setLimit(maxSavePostSize);
-                getInputBuffer().addActiveFilter(inputFilters[Constants.BUFFERED_FILTER]);
-                try {
-                    // Configure connection to require a certificate
-                    SSLSocket.setVerify(socketRef, SSL.SSL_CVERIFY_REQUIRE,
-                            ((AprEndpoint)endpoint).getSSLVerifyDepth());
-                    // Renegotiate certificates
-                    if (SSLSocket.renegotiate(socketRef) == 0) {
-                        // Don't look for certs unless we know renegotiation worked.
-                        // Get client certificate and the certificate chain if present
-                        // certLength == -1 indicates an error
-                        int certLength = SSLSocket.getInfoI(socketRef,SSL.SSL_INFO_CLIENT_CERT_CHAIN);
-                        byte[] clientCert = SSLSocket.getInfoB(socketRef, SSL.SSL_INFO_CLIENT_CERT);
-                        X509Certificate[] certs = null;
-                        if (clientCert != null && certLength > -1) {
-                            certs = new X509Certificate[certLength + 1];
-                            CertificateFactory cf = CertificateFactory.getInstance("X.509");
-                            certs[0] = (X509Certificate) cf.generateCertificate(new ByteArrayInputStream(clientCert));
-                            for (int i = 0; i < certLength; i++) {
-                                byte[] data = SSLSocket.getInfoB(socketRef, SSL.SSL_INFO_CLIENT_CERT_CHAIN + i);
-                                certs[i+1] = (X509Certificate) cf.generateCertificate(new ByteArrayInputStream(data));
-                            }
-                        }
-                        if (certs != null) {
-                            request.setAttribute(SSLSupport.CERTIFICATE_KEY, certs);
-                        }
-                    }
-                } catch (Exception e) {
-                    log.warn(sm.getString("http11processor.socket.ssl"), e);
-                }
-            }
-            break;
-        }
-        }
+        // Unused
     }
 }

==================================================
Http11NioProcessor.java
index 2c7dcdc160..1fa649cf45 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Processor.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Processor.java
@@ -16,19 +16,11 @@
  */
 package org.apache.coyote.http11;
 
-import java.io.IOException;
-
-import javax.net.ssl.SSLEngine;
-
 import org.apache.coyote.ActionCode;
-import org.apache.coyote.http11.filters.BufferedInputFilter;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.Nio2Channel;
-import org.apache.tomcat.util.net.Nio2Endpoint;
-import org.apache.tomcat.util.net.SSLSupport;
-import org.apache.tomcat.util.net.SecureNio2Channel;
 
 
 /**
@@ -61,48 +53,7 @@ public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
      * @param param Action parameter
      */
     @Override
-    @SuppressWarnings("incomplete-switch") // Other cases are handled by action()
     public void actionInternal(ActionCode actionCode, Object param) {
-
-        switch (actionCode) {
-        case REQ_SSL_CERTIFICATE: {
-            if (sslSupport != null && socketWrapper.getSocket() != null) {
-                /*
-                 * Consume and buffer the request body, so that it does not
-                 * interfere with the client's handshake messages
-                 */
-                InputFilter[] inputFilters = getInputBuffer().getFilters();
-                ((BufferedInputFilter) inputFilters[Constants.BUFFERED_FILTER])
-                    .setLimit(maxSavePostSize);
-                getInputBuffer().addActiveFilter
-                    (inputFilters[Constants.BUFFERED_FILTER]);
-                SecureNio2Channel sslChannel = (SecureNio2Channel) socketWrapper.getSocket();
-                SSLEngine engine = sslChannel.getSslEngine();
-                if (!engine.getNeedClientAuth()) {
-                    // Need to re-negotiate SSL connection
-                    engine.setNeedClientAuth(true);
-                    try {
-                        sslChannel.rehandshake();
-                        sslSupport = ((Nio2Endpoint)endpoint).getHandler()
-                                .getSslImplementation().getSSLSupport(
-                                        engine.getSession());
-                    } catch (IOException ioe) {
-                        log.warn(sm.getString("http11processor.socket.sslreneg"), ioe);
-                    }
-                }
-
-                try {
-                    Object sslO = sslSupport.getPeerCertificateChain();
-                    if( sslO != null) {
-                        request.setAttribute
-                            (SSLSupport.CERTIFICATE_KEY, sslO);
-                    }
-                } catch (Exception e) {
-                    log.warn(sm.getString("http11processor.socket.ssl"), e);
-                }
-            }
-            break;
-        }
-        }
+        // Unused
     }
 }

==================================================
AprEndpoint.java
index d213aee66e..c9b01f04b9 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -16,19 +16,11 @@
  */
 package org.apache.coyote.http11;
 
-import java.io.IOException;
-
-import javax.net.ssl.SSLEngine;
-
 import org.apache.coyote.ActionCode;
-import org.apache.coyote.http11.filters.BufferedInputFilter;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.NioChannel;
-import org.apache.tomcat.util.net.NioEndpoint;
-import org.apache.tomcat.util.net.SSLSupport;
-import org.apache.tomcat.util.net.SecureNioChannel;
 
 
 /**
@@ -63,48 +55,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
      * @param param Action parameter
      */
     @Override
-    @SuppressWarnings("incomplete-switch") // Other cases are handled by action()
     public void actionInternal(ActionCode actionCode, Object param) {
-
-        switch (actionCode) {
-        case REQ_SSL_CERTIFICATE: {
-            if (sslSupport != null) {
-                /*
-                 * Consume and buffer the request body, so that it does not
-                 * interfere with the client's handshake messages
-                 */
-                InputFilter[] inputFilters = getInputBuffer().getFilters();
-                ((BufferedInputFilter) inputFilters[Constants.BUFFERED_FILTER])
-                    .setLimit(maxSavePostSize);
-                getInputBuffer().addActiveFilter
-                    (inputFilters[Constants.BUFFERED_FILTER]);
-                SecureNioChannel sslChannel = (SecureNioChannel) socketWrapper.getSocket();
-                SSLEngine engine = sslChannel.getSslEngine();
-                if (!engine.getNeedClientAuth()) {
-                    // Need to re-negotiate SSL connection
-                    engine.setNeedClientAuth(true);
-                    try {
-                        sslChannel.rehandshake(endpoint.getSoTimeout());
-                        sslSupport = ((NioEndpoint)endpoint).getHandler()
-                                .getSslImplementation().getSSLSupport(
-                                        engine.getSession());
-                    } catch (IOException ioe) {
-                        log.warn(sm.getString("http11processor.socket.sslreneg",ioe));
-                    }
-                }
-
-                try {
-                    Object sslO = sslSupport.getPeerCertificateChain();
-                    if( sslO != null) {
-                        request.setAttribute
-                            (SSLSupport.CERTIFICATE_KEY, sslO);
-                    }
-                } catch (Exception e) {
-                    log.warn(sm.getString("http11processor.socket.ssl"), e);
-                }
-            }
-            break;
-        }
-        }
+        // Unused
     }
 }

==================================================
Nio2Endpoint.java
index e0fd2c0ac9..e80cbfb806 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -2749,5 +2749,15 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
                 log.warn(sm.getString("endpoint.warn.noLocalPort"), e);
             }
         }
+
+
+        @Override
+        public void doClientAuth(SSLSupport sslSupport) {
+            long socket = getSocket().longValue();
+            // Configure connection to require a certificate
+            SSLSocket.setVerify(socket, SSL.SSL_CVERIFY_REQUIRE,
+                    ((AprEndpoint)getEndpoint()).getSSLVerifyDepth());
+            SSLSocket.renegotiate(socket);
+        }
     }
 }

==================================================
NioEndpoint.java
index 9d2ca7f697..5edb2fa7bf 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -54,6 +54,7 @@ import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.buf.ByteBufferHolder;
 import org.apache.tomcat.util.collections.SynchronizedStack;
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
+import org.apache.tomcat.util.net.jsse.JSSESupport;
 import org.apache.tomcat.util.net.jsse.NioX509KeyManager;
 
 /**
@@ -1416,6 +1417,23 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
                 localPort = ((InetSocketAddress) socketAddress).getPort();
             }
         }
+
+
+        @Override
+        public void doClientAuth(SSLSupport sslSupport) {
+            SecureNio2Channel sslChannel = (SecureNio2Channel) getSocket();
+            SSLEngine engine = sslChannel.getSslEngine();
+            if (!engine.getNeedClientAuth()) {
+                // Need to re-negotiate SSL connection
+                engine.setNeedClientAuth(true);
+                try {
+                    sslChannel.rehandshake();
+                    ((JSSESupport) sslSupport).setSession(engine.getSession());
+                } catch (IOException ioe) {
+                    log.warn(sm.getString("http11processor.socket.sslreneg"), ioe);
+                }
+            }
+        }
     }
 
 

==================================================
SocketWrapperBase.java
index 3faeec8470..b63eaf8634 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -55,6 +55,7 @@ import org.apache.tomcat.util.IntrospectionUtils;
 import org.apache.tomcat.util.collections.SynchronizedQueue;
 import org.apache.tomcat.util.collections.SynchronizedStack;
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
+import org.apache.tomcat.util.net.jsse.JSSESupport;
 import org.apache.tomcat.util.net.jsse.NioX509KeyManager;
 
 /**
@@ -1604,6 +1605,23 @@ public class NioEndpoint extends AbstractEndpoint<NioChannel> {
         protected void populateLocalPort() {
             localPort = getSocket().getIOChannel().socket().getLocalPort();
         }
+
+
+        @Override
+        public void doClientAuth(SSLSupport sslSupport) {
+            SecureNioChannel sslChannel = (SecureNioChannel) getSocket();
+            SSLEngine engine = sslChannel.getSslEngine();
+            if (!engine.getNeedClientAuth()) {
+                // Need to re-negotiate SSL connection
+                engine.setNeedClientAuth(true);
+                try {
+                    sslChannel.rehandshake(getEndpoint().getSoTimeout());
+                    ((JSSESupport) sslSupport).setSession(engine.getSession());
+                } catch (IOException ioe) {
+                    log.warn(sm.getString("http11processor.socket.sslreneg",ioe));
+                }
+            }
+        }
     }
 
 

==================================================
JSSESupport.java
index a56cdc28b3..f8e5a65395 100644
--- a/java/org/apache/tomcat/util/net/SocketWrapperBase.java
+++ b/java/org/apache/tomcat/util/net/SocketWrapperBase.java
@@ -616,6 +616,15 @@ public abstract class SocketWrapperBase<E> {
      */
     public abstract SendfileState processSendfile(SendfileDataBase sendfileData);
 
+    /**
+     * Require the client to perform CLIENT-CERT authentication if it hasn't
+     * already done so.
+     *
+     * @param sslSupport The SSL/TLS support instance currently being used by
+     *                   the connection that may need updating after the client
+     *                   authentication
+     */
+    public abstract void doClientAuth(SSLSupport sslSupport);
 
     // --------------------------------------------------------- Utility methods
 

==================================================
