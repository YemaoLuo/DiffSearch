5b1f5e389ec3238b66d9bd7a724ead63b843cce1
==================================================
Add support for the OpenSSL SSL_CONF API when
==================================================
Rainer Jung
==================================================
Sat Aug 19 21:32:23 2017 +0000
==================================================
Catalina.java
Add support for the OpenSSL SSL_CONF API when
using TLS with OpenSSL implementation.

This will need tcnative 1.2.13.

It can be used by adding OpenSSLConf elements
underneath SSLHostConfig. The new element
contains a list of OpenSSLConfCmd elements,
each with the attributes "name" and "value".

Example:

<SSLHostConfig>
    <OpenSSLConf>
        <OpenSSLConfCmd name="Protocol" value="-SSLv3,-TLSv1,TLSv1.1,TLSv1.2"/>
        <OpenSSLConfCmd name="CipherString" value="ECDHE-RSA-AES128-SHA"/>
        <OpenSSLConfCmd name="Options" value="-SessionTicket,-Compression,ServerPreference"/>
    </OpenSSLConf>
</SSLHostConfig>


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1805528 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AprEndpoint.java
index 6a76344197..3887c23b4b 100644
--- a/java/org/apache/catalina/startup/Catalina.java
+++ b/java/org/apache/catalina/startup/Catalina.java
@@ -354,6 +354,20 @@ public class Catalina {
                             "addCertificate",
                             "org.apache.tomcat.util.net.SSLHostConfigCertificate");
 
+        digester.addObjectCreate("Server/Service/Connector/SSLHostConfig/OpenSSLConf",
+                                 "org.apache.tomcat.util.net.openssl.OpenSSLConf");
+        digester.addSetProperties("Server/Service/Connector/SSLHostConfig/OpenSSLConf");
+        digester.addSetNext("Server/Service/Connector/SSLHostConfig/OpenSSLConf",
+                            "setOpenSslConf",
+                            "org.apache.tomcat.util.net.openssl.OpenSSLConf");
+
+        digester.addObjectCreate("Server/Service/Connector/SSLHostConfig/OpenSSLConf/OpenSSLConfCmd",
+                                 "org.apache.tomcat.util.net.openssl.OpenSSLConfCmd");
+        digester.addSetProperties("Server/Service/Connector/SSLHostConfig/OpenSSLConf/OpenSSLConfCmd");
+        digester.addSetNext("Server/Service/Connector/SSLHostConfig/OpenSSLConf/OpenSSLConfCmd",
+                            "addCmd",
+                            "org.apache.tomcat.util.net.openssl.OpenSSLConfCmd");
+
         digester.addObjectCreate("Server/Service/Connector/Listener",
                                  null, // MUST be specified in the element
                                  "className");

==================================================
SSLHostConfig.java
index 961157325c..f7ae1ef7bf 100644
--- a/java/org/apache/tomcat/util/net/LocalStrings.properties
+++ b/java/org/apache/tomcat/util/net/LocalStrings.properties
@@ -74,6 +74,14 @@ endpoint.apr.pollMergeEvents=Merge poller event [{1}] for socket [{0}] to create
 endpoint.apr.pollUnknownEvent=A socket was returned from the poller with an unrecognized event [{0}]
 endpoint.apr.tooManyCertFiles=More certificate files were configured than the AprEndpoint can handle
 endpoint.apr.remoteport=APR socket [{0}] opened with remote port [{1}]
+endpoint.apr.makeConf=Creating OpenSSLConf context
+endpoint.apr.errMakeConf=Could not create OpenSSLConf context
+endpoint.apr.checkConf=Checking OpenSSLConf
+endpoint.apr.errCheckConf=Error during OpenSSLConf check
+endpoint.apr.assignConf=Assigning SSL context to OpenSSLConfCmd context
+endpoint.apr.applyConf=Applying OpenSSLConfCmd to SSL context
+endpoint.apr.errApplyConf=Could not apply OpenSSLConf to SSL context
+endpoint.apr.missingOpenSSLConfSupport=Your tcnative library has no support for OpenSSLConf, version 1.2.13 or higher is required.
 endpoint.jsse.noSslContext=No SSLContext could be found for the host name [{0}]
 endpoint.nio.registerFail=Failed to register socket with selector from poller
 endpoint.nio.selectorCloseFail=Failed to close selector when closing the poller
@@ -130,6 +138,8 @@ sslHostConfig.certificate.notype=Multiple certificates were specified and at lea
 sslHostConfig.mismatch=The property [{0}] was set on the SSLHostConfig named [{1}] and is for connectors of type [{2}] but the SSLHostConfig is being used with a connector of type [{3}]
 sslHostConfig.prefix_missing=The protocol [{0}] was added to the list of protocols on the SSLHostConfig named [{1}]. Check if a +/- prefix is missing.
 sslHostConfigCertificate.mismatch=The property [{0}] was set on the SSLHostConfigCertificate named [{1}] and is for certificate storage type [{2}] but the certificate is being used with a storage of type [{3}]
+sslHostConfig.opensslconf.null=Attempt to set null OpenSSLConf ignored
+sslHostConfig.opensslconf.alreadyset=Attempt to set another OpenSSLConf ignored
 
 sslImplementation.cnfe= Unable to create SSLImplementation for class [{0}]
 

==================================================
OpenSSLConf.java
index 29e850d154..a7d0c4b690 100644
--- a/java/org/apache/tomcat/util/net/openssl/LocalStrings.properties
+++ b/java/org/apache/tomcat/util/net/openssl/LocalStrings.properties
@@ -21,6 +21,24 @@ openssl.keyManagerMissing=No key manager found
 openssl.incompleteClientCASupport=Incomplete support for client CAs, please update your tcnative version
 openssl.trustManagerMissing=No trust manager found
 openssl.addedClientCaCert=Added client CA cert: [{0}]
+openssl.makeConf=Creating OpenSSLConf context
+openssl.errMakeConf=Could not create OpenSSLConf context
+openssl.checkConf=Checking OpenSSLConf
+openssl.errCheckConf=Error during OpenSSLConf check
+openssl.assignConf=Assigning SSL context to OpenSSLConfCmd context
+openssl.applyConf=Applying OpenSSLConfCmd to SSL context
+openssl.errApplyConf=Could not apply OpenSSLConf to SSL context
+openssl.missingOpenSSLConfSupport=Your tcnative library has no support for OpenSSLConf, version 1.2.13 or higher is required.
+
+opensslconf.checkCommand=OpenSSLConf checking command (name [{0}], value [{1}])
+opensslconf.checkFailed=Failure while checking OpenSSLConf
+opensslconf.applyCommand=OpenSSLConf applying command (name [{0}], value [{1}])
+opensslconf.applyFailed=Failure while applying OpenSSLConf to SSL context
+opensslconf.failedCommand=OpenSSLConf failed command (name [{0}], value [{1}]) with result [{2}] - will be ignored
+opensslconf.failedFinish=OpenSSLConf finish failed with result [{2}]
+opensslconf.noCommandName=OpenSSLConf no command name - will be ignored (command value [{0}])
+opensslconf.resultCommand=OpenSSLConf command (name [{0}], value [{1}]) returned [{2}]
+opensslconf.missingOpenSSLConfSupport=Your tcnative library has no support for OpenSSLConf, version 1.2.13 or higher is required.
 
 engine.engineClosed=Engine is closed
 engine.renegotiationUnsupported=Renegotiation is not supported

==================================================
OpenSSLConfCmd.java
new file mode 100644
index 0000000000..91355cbb7a
--- /dev/null
+++ b/java/org/apache/tomcat/util/net/openssl/OpenSSLConf.java
@@ -0,0 +1,131 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.util.net.openssl;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.jni.SSLConf;
+import org.apache.tomcat.util.res.StringManager;
+
+public class OpenSSLConf {
+
+    private static final Log log = LogFactory.getLog(OpenSSLConf.class);
+    private static final StringManager sm = StringManager.getManager(OpenSSLConf.class);
+
+    private final List<OpenSSLConfCmd> commands = new ArrayList<OpenSSLConfCmd>();
+
+    public void addCmd(OpenSSLConfCmd cmd) {
+        commands.add(cmd);
+    }
+
+    public boolean check(long cctx) throws Exception {
+        boolean result = true;
+        OpenSSLConfCmd cmd;
+        String name;
+        String value;
+        int rc;
+        for (int i = 0; i < commands.size(); i++) {
+            cmd = commands.get(i);
+            name = cmd.getName();
+            value = cmd.getValue();
+            if (name == null) {
+                log.error(sm.getString("opensslconf.noCommandName", value));
+                result = false;
+                continue;
+            }
+            if (log.isDebugEnabled()) {
+                log.debug(sm.getString("opensslconf.checkCommand", name, value));
+            }
+            try {
+                rc = SSLConf.check(cctx, name, value);
+            } catch (UnsatisfiedLinkError e) {
+                log.warn(sm.getString("opensslconf.missingOpenSSLConfSupport"), e);
+                log.error(sm.getString("opensslconf.checkFailed"));
+                return false;
+            }
+            if (rc <= 0) {
+                log.error(sm.getString("opensslconf.failedCommand", name, value, rc));
+                result = false;
+            } else if (log.isDebugEnabled()) {
+                log.debug(sm.getString("opensslconf.resultCommand", name, value, rc));
+            }
+        }
+        if (!result) {
+            log.error(sm.getString("opensslconf.checkFailed"));
+        }
+        return result;
+    }
+
+    public boolean apply(long cctx, long ctx) throws Exception {
+        boolean result = true;
+        try {
+            SSLConf.assign(cctx, ctx);
+        } catch (UnsatisfiedLinkError e) {
+            log.warn(sm.getString("opensslconf.missingOpenSSLConfSupport"), e);
+            log.error(sm.getString("opensslconf.applyFailed"));
+            return false;
+        }
+        OpenSSLConfCmd cmd;
+        String name;
+        String value;
+        int rc;
+        for (int i = 0; i < commands.size(); i++) {
+            cmd = commands.get(i);
+            name = cmd.getName();
+            value = cmd.getValue();
+            if (name == null) {
+                log.error(sm.getString("opensslconf.noCommandName", value));
+                result = false;
+                continue;
+            }
+            if (log.isDebugEnabled()) {
+                log.debug(sm.getString("opensslconf.applyCommand", name, value));
+            }
+            try {
+                rc = SSLConf.apply(cctx, name, value);
+            } catch (UnsatisfiedLinkError e) {
+                log.warn(sm.getString("opensslconf.missingOpenSSLConfSupport"), e);
+                log.error(sm.getString("opensslconf.applyFailed"));
+                return false;
+            }
+            if (rc <= 0) {
+                log.error(sm.getString("opensslconf.failedCommand", name, value, rc));
+                result = false;
+            } else if (log.isDebugEnabled()) {
+                log.debug(sm.getString("opensslconf.resultCommand", name, value, rc));
+            }
+        }
+        try {
+            rc = SSLConf.finish(cctx);
+        } catch (UnsatisfiedLinkError e) {
+            log.warn(sm.getString("opensslconf.missingOpenSSLConfSupport"), e);
+            log.error(sm.getString("opensslconf.applyFailed"));
+            return false;
+        }
+        if (rc <= 0) {
+            log.error(sm.getString("opensslconf.finishFailed", rc));
+            result = false;
+        }
+        if (!result) {
+            log.error(sm.getString("opensslconf.applyFailed"));
+        }
+        return result;
+    }
+}

==================================================
OpenSSLContext.java
new file mode 100644
index 0000000000..3cb5d55d6e
--- /dev/null
+++ b/java/org/apache/tomcat/util/net/openssl/OpenSSLConfCmd.java
@@ -0,0 +1,39 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.util.net.openssl;
+
+public class OpenSSLConfCmd {
+
+    private String name = null;
+    private String value = null;
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getValue() {
+        return value;
+    }
+
+    public void setValue(String value) {
+        this.value = value;
+    }
+}

==================================================
