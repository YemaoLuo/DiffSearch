8f5970d8981e8ecf2c9af1aed1a232ac33378bbb
==================================================
Partial fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=48132
==================================================
Mark Emlyn
==================================================
Thu Nov 5 00:58:58 2009 +0000
==================================================
ContainerEvent.java
Partial fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=48132
Patch provided by sebb

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@832945 13f79535-47bb-0310-9956-ffa450edef68



==================================================
LifecycleException.java
index 998021c7c1..01261f6bc3 100644
--- a/java/org/apache/catalina/ContainerEvent.java
+++ b/java/org/apache/catalina/ContainerEvent.java
@@ -101,6 +101,7 @@ public final class ContainerEvent
     /**
      * Return a string representation of this event.
      */
+    @Override
     public String toString() {
 
         return ("ContainerEvent['" + getContainer() + "','" +

==================================================
SessionEvent.java
index 0e5a7b8c4d..20d4427c7e 100644
--- a/java/org/apache/catalina/LifecycleException.java
+++ b/java/org/apache/catalina/LifecycleException.java
@@ -105,6 +105,7 @@ public final class LifecycleException extends Exception {
     /**
      * Returns the message associated with this exception, if any.
      */
+    @Override
     public String getMessage() {
 
         return (message);
@@ -125,6 +126,7 @@ public final class LifecycleException extends Exception {
     /**
      * Return a formatted string that describes this exception.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("LifecycleException:  ");

==================================================
AbstractCatalinaTask.java
index 69eea43fa9..0e2ab73c35 100644
--- a/java/org/apache/catalina/SessionEvent.java
+++ b/java/org/apache/catalina/SessionEvent.java
@@ -101,6 +101,7 @@ public final class SessionEvent
     /**
      * Return a string representation of this event.
      */
+    @Override
     public String toString() {
 
         return ("SessionEvent['" + getSession() + "','" +

==================================================
BaseRedirectorHelperTask.java
index a9bd863151..19541875aa 100644
--- a/java/org/apache/catalina/ant/AbstractCatalinaTask.java
+++ b/java/org/apache/catalina/ant/AbstractCatalinaTask.java
@@ -121,6 +121,7 @@ public abstract class AbstractCatalinaTask extends BaseRedirectorHelperTask {
      *
      * @exception BuildException if a validation error occurs
      */
+    @Override
     public void execute() throws BuildException {
 
         if ((username == null) || (password == null) || (url == null)) {

==================================================
DeployTask.java
index ddab137992..e14ac37473 100644
--- a/java/org/apache/catalina/ant/BaseRedirectorHelperTask.java
+++ b/java/org/apache/catalina/ant/BaseRedirectorHelperTask.java
@@ -285,6 +285,7 @@ public abstract class BaseRedirectorHelperTask extends Task {
      *
      * @param output The output to log. Should not be <code>null</code>.
      */
+    @Override
     protected void handleOutput(String output) {
         if (redirectOutput) {
             if (redirectOutPrintStream == null) {
@@ -305,6 +306,7 @@ public abstract class BaseRedirectorHelperTask extends Task {
      * @param output The output to log. Should not be <code>null</code>.
      *
      */
+    @Override
     protected void handleFlush(String output) {
         handleOutput(output);
         redirectOutPrintStream.flush();
@@ -315,6 +317,7 @@ public abstract class BaseRedirectorHelperTask extends Task {
      *
      * @param output The error output to log. Should not be <code>null</code>.
      */
+    @Override
     protected void handleErrorOutput(String output) {
         if (redirectOutput) {
             if (redirectErrPrintStream == null) {
@@ -335,6 +338,7 @@ public abstract class BaseRedirectorHelperTask extends Task {
      * @param output The error output to log. Should not be <code>null</code>.
      *
      */
+    @Override
     protected void handleErrorFlush(String output) {
         handleErrorOutput(output);
         redirectErrPrintStream.flush();

==================================================
JKStatusUpdateTask.java
index 1273a39643..ec1e99b536 100644
--- a/java/org/apache/catalina/ant/DeployTask.java
+++ b/java/org/apache/catalina/ant/DeployTask.java
@@ -137,6 +137,7 @@ public class DeployTask extends AbstractCatalinaTask {
      *
      * @exception BuildException if an error occurs
      */
+    @Override
     public void execute() throws BuildException {
 
         super.execute();

==================================================
JMXGetTask.java
index 0207fbed41..d59e9663c1 100644
--- a/java/org/apache/catalina/ant/JKStatusUpdateTask.java
+++ b/java/org/apache/catalina/ant/JKStatusUpdateTask.java
@@ -268,6 +268,7 @@ public class JKStatusUpdateTask extends AbstractCatalinaTask {
      * @exception BuildException
      *                if an error occurs
      */
+    @Override
     public void execute() throws BuildException {
 
         super.execute();

==================================================
JMXQueryTask.java
index 064a7c0f8b..2f205e32b4 100644
--- a/java/org/apache/catalina/ant/JMXGetTask.java
+++ b/java/org/apache/catalina/ant/JMXGetTask.java
@@ -82,6 +82,7 @@ public class JMXGetTask extends AbstractCatalinaTask {
      *
      * @exception BuildException if an error occurs
      */
+    @Override
     public void execute() throws BuildException {
         super.execute();
         if (bean == null || attribute == null) {

==================================================
JMXSetTask.java
index ceb89bfc82..8cd960a5ec 100644
--- a/java/org/apache/catalina/ant/JMXQueryTask.java
+++ b/java/org/apache/catalina/ant/JMXQueryTask.java
@@ -70,6 +70,7 @@ public class JMXQueryTask extends AbstractCatalinaTask {
      *
      * @exception BuildException if an error occurs
      */
+    @Override
     public void execute() throws BuildException {
         super.execute();
         String queryString = (query == null) ? "":("?qry="+query);

==================================================
ListTask.java
index 5bab49bd08..12c562eaf1 100644
--- a/java/org/apache/catalina/ant/JMXSetTask.java
+++ b/java/org/apache/catalina/ant/JMXSetTask.java
@@ -103,6 +103,7 @@ public class JMXSetTask extends AbstractCatalinaTask {
      *
      * @exception BuildException if an error occurs
      */
+    @Override
     public void execute() throws BuildException {
         super.execute();
         if (bean == null || attribute == null || value == null) {

==================================================
ReloadTask.java
index bc3dfdf737..523f7ec5ed 100644
--- a/java/org/apache/catalina/ant/ListTask.java
+++ b/java/org/apache/catalina/ant/ListTask.java
@@ -44,6 +44,7 @@ public class ListTask extends AbstractCatalinaTask {
      *
      * @exception BuildException if an error occurs
      */
+    @Override
     public void execute() throws BuildException {
 
         super.execute();

==================================================
ResourcesTask.java
index 75e21a6564..d450275aec 100644
--- a/java/org/apache/catalina/ant/ReloadTask.java
+++ b/java/org/apache/catalina/ant/ReloadTask.java
@@ -61,6 +61,7 @@ public class ReloadTask extends AbstractCatalinaTask {
      *
      * @exception BuildException if an error occurs
      */
+    @Override
     public void execute() throws BuildException {
 
         super.execute();

==================================================
RolesTask.java
index 76cbb5422d..4d5c1c10d7 100644
--- a/java/org/apache/catalina/ant/ResourcesTask.java
+++ b/java/org/apache/catalina/ant/ResourcesTask.java
@@ -59,6 +59,7 @@ public class ResourcesTask extends AbstractCatalinaTask {
      *
      * @exception BuildException if an error occurs
      */
+    @Override
     public void execute() throws BuildException {
 
         super.execute();

==================================================
ServerinfoTask.java
index 4041e1089c..54b7ec3a82 100644
--- a/java/org/apache/catalina/ant/RolesTask.java
+++ b/java/org/apache/catalina/ant/RolesTask.java
@@ -44,6 +44,7 @@ public class RolesTask extends AbstractCatalinaTask {
      *
      * @exception BuildException if an error occurs
      */
+    @Override
     public void execute() throws BuildException {
 
         super.execute();

==================================================
SessionsTask.java
index 352fdf88c7..e05038f669 100644
--- a/java/org/apache/catalina/ant/ServerinfoTask.java
+++ b/java/org/apache/catalina/ant/ServerinfoTask.java
@@ -38,6 +38,7 @@ public class ServerinfoTask extends AbstractCatalinaTask {
      *
      * @exception BuildException if an error occurs
      */
+    @Override
     public void execute() throws BuildException {
 
         super.execute();

==================================================
StartTask.java
index 3e615d336c..b0d88d185c 100644
--- a/java/org/apache/catalina/ant/SessionsTask.java
+++ b/java/org/apache/catalina/ant/SessionsTask.java
@@ -56,6 +56,7 @@ public class SessionsTask extends AbstractCatalinaTask {
      *
      * @exception BuildException if an error occurs
      */
+    @Override
     public void execute() throws BuildException {
 
         super.execute();

==================================================
StopTask.java
index 260ea167ce..95fa0c51ea 100644
--- a/java/org/apache/catalina/ant/StartTask.java
+++ b/java/org/apache/catalina/ant/StartTask.java
@@ -61,6 +61,7 @@ public class StartTask extends AbstractCatalinaTask {
      *
      * @exception BuildException if an error occurs
      */
+    @Override
     public void execute() throws BuildException {
 
         super.execute();

==================================================
UndeployTask.java
index 959331c1e6..1224c300ea 100644
--- a/java/org/apache/catalina/ant/StopTask.java
+++ b/java/org/apache/catalina/ant/StopTask.java
@@ -61,6 +61,7 @@ public class StopTask extends AbstractCatalinaTask {
      *
      * @exception BuildException if an error occurs
      */
+    @Override
     public void execute() throws BuildException {
 
         super.execute();

==================================================
ValidatorTask.java
index 2c0b81a876..dfab340efd 100644
--- a/java/org/apache/catalina/ant/UndeployTask.java
+++ b/java/org/apache/catalina/ant/UndeployTask.java
@@ -57,6 +57,7 @@ public class UndeployTask extends AbstractCatalinaTask {
      *
      * @exception BuildException if an error occurs
      */
+    @Override
     public void execute() throws BuildException {
 
         super.execute();

==================================================
JMXAccessorCreateTask.java
index c8e65631d3..d3fde1dcca 100644
--- a/java/org/apache/catalina/ant/ValidatorTask.java
+++ b/java/org/apache/catalina/ant/ValidatorTask.java
@@ -73,6 +73,7 @@ public class ValidatorTask extends BaseRedirectorHelperTask {
      *
      * @exception BuildException if a validation error occurs
      */
+    @Override
     public void execute() throws BuildException {
 
         if (path == null) {

==================================================
JMXAccessorGetTask.java
index c7739802e8..56e95598ea 100644
--- a/java/org/apache/catalina/ant/jmx/JMXAccessorCreateTask.java
+++ b/java/org/apache/catalina/ant/jmx/JMXAccessorCreateTask.java
@@ -78,6 +78,7 @@ public class JMXAccessorCreateTask extends JMXAccessorTask {
      * <code>&lt;description&gt;/&lt;version&gt;</code>.
      * @return Returns the class info.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -141,6 +142,7 @@ public class JMXAccessorCreateTask extends JMXAccessorTask {
      * @exception Exception
      *                if an error occurs
      */
+    @Override
     public String jmxExecute(MBeanServerConnection jmxServerConnection)
         throws Exception {
 

==================================================
JMXAccessorInvokeTask.java
index 9fd0d605d0..c9e1b81d59 100644
--- a/java/org/apache/catalina/ant/jmx/JMXAccessorGetTask.java
+++ b/java/org/apache/catalina/ant/jmx/JMXAccessorGetTask.java
@@ -75,6 +75,7 @@ public class JMXAccessorGetTask extends JMXAccessorTask {
      * corresponding version number, in the format
      * <code>&lt;description&gt;/&lt;version&gt;</code>.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -108,6 +109,7 @@ public class JMXAccessorGetTask extends JMXAccessorTask {
      * @exception BuildException
      *                if an error occurs
      */
+    @Override
     public String jmxExecute(MBeanServerConnection jmxServerConnection)
         throws Exception {
 

==================================================
JMXAccessorQueryTask.java
index f5fa9a05f9..01b0692f97 100644
--- a/java/org/apache/catalina/ant/jmx/JMXAccessorInvokeTask.java
+++ b/java/org/apache/catalina/ant/jmx/JMXAccessorInvokeTask.java
@@ -111,6 +111,7 @@ public class JMXAccessorInvokeTask extends JMXAccessorTask {
      * corresponding version number, in the format
      * <code>&lt;description&gt;/&lt;version&gt;</code>.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -159,6 +160,7 @@ public class JMXAccessorInvokeTask extends JMXAccessorTask {
      * @exception BuildException
      *                if an error occurs
      */
+    @Override
     public String jmxExecute(MBeanServerConnection jmxServerConnection)
         throws Exception {
 

==================================================
JMXAccessorSetTask.java
index b6666d5e93..4213888cfc 100644
--- a/java/org/apache/catalina/ant/jmx/JMXAccessorQueryTask.java
+++ b/java/org/apache/catalina/ant/jmx/JMXAccessorQueryTask.java
@@ -78,6 +78,7 @@ public class JMXAccessorQueryTask extends JMXAccessorTask {
      * corresponding version number, in the format
      * <code>&lt;description&gt;/&lt;version&gt;</code>.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -110,6 +111,7 @@ public class JMXAccessorQueryTask extends JMXAccessorTask {
      * @exception Exception
      *                if an error occurs
      */
+    @Override
     public String jmxExecute(MBeanServerConnection jmxServerConnection)
         throws Exception {
 

==================================================
JMXAccessorUnregisterTask.java
index 0e40d26494..581e448066 100644
--- a/java/org/apache/catalina/ant/jmx/JMXAccessorSetTask.java
+++ b/java/org/apache/catalina/ant/jmx/JMXAccessorSetTask.java
@@ -83,6 +83,7 @@ public class JMXAccessorSetTask extends JMXAccessorTask {
      * corresponding version number, in the format
      * <code>&lt;description&gt;/&lt;version&gt;</code>.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -156,6 +157,7 @@ public class JMXAccessorSetTask extends JMXAccessorTask {
      * @exception Exception
      *                if an error occurs
      */
+    @Override
     public String jmxExecute(MBeanServerConnection jmxServerConnection)
         throws Exception {
 

==================================================
AuthenticatorBase.java
index eb37de4b3c..f6a1d09615 100644
--- a/java/org/apache/catalina/ant/jmx/JMXAccessorUnregisterTask.java
+++ b/java/org/apache/catalina/ant/jmx/JMXAccessorUnregisterTask.java
@@ -65,6 +65,7 @@ public class JMXAccessorUnregisterTask extends JMXAccessorTask {
      * <code>&lt;description&gt;/&lt;version&gt;</code>.
      * @return Returns the class info.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -80,6 +81,7 @@ public class JMXAccessorUnregisterTask extends JMXAccessorTask {
      * @exception Exception
      *                if an error occurs
      */
+    @Override
     public String jmxExecute(MBeanServerConnection jmxServerConnection)
         throws Exception {
 

==================================================
BasicAuthenticator.java
index fb8f2c6b1b..725d0ab7e8 100644
--- a/java/org/apache/catalina/authenticator/AuthenticatorBase.java
+++ b/java/org/apache/catalina/authenticator/AuthenticatorBase.java
@@ -252,6 +252,7 @@ public abstract class AuthenticatorBase
     /**
      * Return the Container to which this Valve is attached.
      */
+    @Override
     public Container getContainer() {
 
         return (this.context);
@@ -264,6 +265,7 @@ public abstract class AuthenticatorBase
      *
      * @param container The container to which we are attached
      */
+    @Override
     public void setContainer(Container container) {
 
         if (!(container instanceof Context))
@@ -306,6 +308,7 @@ public abstract class AuthenticatorBase
     /**
      * Return descriptive information about this Valve implementation.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -384,6 +387,7 @@ public abstract class AuthenticatorBase
      * @exception IOException if an input/output error occurs
      * @exception ServletException if thrown by a processing element
      */
+    @Override
     public void invoke(Request request, Response response)
         throws IOException, ServletException {
 

==================================================
DigestAuthenticator.java
index 643cfd327a..43381b6528 100644
--- a/java/org/apache/catalina/authenticator/BasicAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/BasicAuthenticator.java
@@ -90,6 +90,7 @@ public class BasicAuthenticator
     /**
      * Return descriptive information about this Valve implementation.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -113,6 +114,7 @@ public class BasicAuthenticator
      *
      * @exception IOException if an input/output error occurs
      */
+    @Override
     public boolean authenticate(Request request,
                                 Response response,
                                 LoginConfig config)

==================================================
FormAuthenticator.java
index b62984574b..10e4398faf 100644
--- a/java/org/apache/catalina/authenticator/DigestAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/DigestAuthenticator.java
@@ -103,6 +103,7 @@ public class DigestAuthenticator
     /**
      * Return descriptive information about this Valve implementation.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -126,6 +127,7 @@ public class DigestAuthenticator
      *
      * @exception IOException if an input/output error occurs
      */
+    @Override
     public boolean authenticate(Request request,
                                 Response response,
                                 LoginConfig config)

==================================================
NonLoginAuthenticator.java
index cecffd8378..5155055227 100644
--- a/java/org/apache/catalina/authenticator/FormAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/FormAuthenticator.java
@@ -81,6 +81,7 @@ public class FormAuthenticator
     /**
      * Return descriptive information about this Valve implementation.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -120,6 +121,7 @@ public class FormAuthenticator
      *
      * @exception IOException if an input/output error occurs
      */
+    @Override
     public boolean authenticate(Request request,
                                 Response response,
                                 LoginConfig config)

==================================================
SSLAuthenticator.java
index 263838c7cd..d89f144a5a 100644
--- a/java/org/apache/catalina/authenticator/NonLoginAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/NonLoginAuthenticator.java
@@ -55,6 +55,7 @@ public final class NonLoginAuthenticator
     /**
      * Return descriptive information about this Valve implementation.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -78,6 +79,7 @@ public final class NonLoginAuthenticator
      *
      * @exception IOException if an input/output error occurs
      */
+    @Override
     public boolean authenticate(Request request,
                                 Response response,
                                 LoginConfig config)

==================================================
SingleSignOn.java
index 1c4220a19a..1a3c7e9905 100644
--- a/java/org/apache/catalina/authenticator/SSLAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/SSLAuthenticator.java
@@ -59,6 +59,7 @@ public class SSLAuthenticator
     /**
      * Return descriptive information about this Valve implementation.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -81,6 +82,7 @@ public class SSLAuthenticator
      *
      * @exception IOException if an input/output error occurs
      */
+    @Override
     public boolean authenticate(Request request,
                                 Response response,
                                 LoginConfig config)
@@ -173,6 +175,7 @@ public class SSLAuthenticator
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
      */
+    @Override
     public void start() throws LifecycleException {
 
         super.start();
@@ -187,6 +190,7 @@ public class SSLAuthenticator
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
      */
+    @Override
     public void stop() throws LifecycleException {
 
         super.stop();

==================================================
ClientAbortException.java
index fc0b6b7bb3..239810fc9c 100644
--- a/java/org/apache/catalina/authenticator/SingleSignOn.java
+++ b/java/org/apache/catalina/authenticator/SingleSignOn.java
@@ -347,6 +347,7 @@ public class SingleSignOn
     /**
      * Return descriptive information about this Valve implementation.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -363,6 +364,7 @@ public class SingleSignOn
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet error occurs
      */
+    @Override
     public void invoke(Request request, Response response)
         throws IOException, ServletException {
 
@@ -433,6 +435,7 @@ public class SingleSignOn
     /**
      * Return a String rendering of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("SingleSignOn[");

==================================================
CometEventImpl.java
index 8a6d656891..53c52a708e 100644
--- a/java/org/apache/catalina/connector/ClientAbortException.java
+++ b/java/org/apache/catalina/connector/ClientAbortException.java
@@ -105,6 +105,7 @@ public final class ClientAbortException extends IOException {
     /**
      * Returns the message associated with this exception, if any.
      */
+    @Override
     public String getMessage() {
 
         return (message);
@@ -115,6 +116,7 @@ public final class ClientAbortException extends IOException {
     /**
      * Returns the cause that caused this exception, if any.
      */
+    @Override
     public Throwable getCause() {
         
         return (throwable);
@@ -125,6 +127,7 @@ public final class ClientAbortException extends IOException {
     /**
      * Return a formatted string that describes this exception.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("ClientAbortException:  ");

==================================================
CoyoteInputStream.java
index a50a726196..0da2f561a1 100644
--- a/java/org/apache/catalina/connector/CometEventImpl.java
+++ b/java/org/apache/catalina/connector/CometEventImpl.java
@@ -124,6 +124,7 @@ public class CometEventImpl implements CometEvent {
         }
     }
     
+    @Override
     public String toString() {
         StringBuilder buf = new StringBuilder();
         buf.append(super.toString());

==================================================
CoyoteOutputStream.java
index dd41b89951..088ad93028 100644
--- a/java/org/apache/catalina/connector/CoyoteInputStream.java
+++ b/java/org/apache/catalina/connector/CoyoteInputStream.java
@@ -68,6 +68,7 @@ public class CoyoteInputStream
     /**
      * Prevent cloning the facade.
      */
+    @Override
     protected Object clone()
         throws CloneNotSupportedException {
         throw new CloneNotSupportedException();
@@ -77,6 +78,7 @@ public class CoyoteInputStream
     // --------------------------------------------- ServletInputStream Methods
 
 
+    @Override
     public int read()
         throws IOException {    
         if (SecurityUtil.isPackageProtectionEnabled()){
@@ -106,6 +108,7 @@ public class CoyoteInputStream
         }
     }
 
+    @Override
     public int available() throws IOException {
         
         if (SecurityUtil.isPackageProtectionEnabled()){
@@ -134,6 +137,7 @@ public class CoyoteInputStream
         }    
     }
 
+    @Override
     public int read(final byte[] b) throws IOException {
         
         if (SecurityUtil.isPackageProtectionEnabled()){
@@ -164,6 +168,7 @@ public class CoyoteInputStream
     }
 
 
+    @Override
     public int read(final byte[] b, final int off, final int len)
         throws IOException {
             
@@ -195,6 +200,7 @@ public class CoyoteInputStream
     }
 
 
+    @Override
     public int readLine(byte[] b, int off, int len) throws IOException {
         return super.readLine(b, off, len);
     }
@@ -205,6 +211,7 @@ public class CoyoteInputStream
      * Since we re-cycle, we can't allow the call to super.close()
      * which would permantely disable us.
      */
+    @Override
     public void close() throws IOException {
         
         if (SecurityUtil.isPackageProtectionEnabled()){

==================================================
CoyotePrincipal.java
index cc5dd896b3..b264634b12 100644
--- a/java/org/apache/catalina/connector/CoyoteOutputStream.java
+++ b/java/org/apache/catalina/connector/CoyoteOutputStream.java
@@ -52,6 +52,7 @@ public class CoyoteOutputStream
     /**
      * Prevent cloning the facade.
      */
+    @Override
     protected Object clone()
         throws CloneNotSupportedException {
         throw new CloneNotSupportedException();
@@ -72,18 +73,21 @@ public class CoyoteOutputStream
     // --------------------------------------------------- OutputStream Methods
 
 
+    @Override
     public void write(int i)
         throws IOException {
         ob.writeByte(i);
     }
 
 
+    @Override
     public void write(byte[] b)
         throws IOException {
         write(b, 0, b.length);
     }
 
 
+    @Override
     public void write(byte[] b, int off, int len)
         throws IOException {
         ob.write(b, off, len);
@@ -93,12 +97,14 @@ public class CoyoteOutputStream
     /**
      * Will send the buffer to the client.
      */
+    @Override
     public void flush()
         throws IOException {
         ob.flush();
     }
 
 
+    @Override
     public void close()
         throws IOException {
         ob.close();

==================================================
CoyoteReader.java
index fadcb9bbc0..1341c69930 100644
--- a/java/org/apache/catalina/connector/CoyotePrincipal.java
+++ b/java/org/apache/catalina/connector/CoyotePrincipal.java
@@ -62,6 +62,7 @@ public class CoyotePrincipal
      * Return a String representation of this object, which exposes only
      * information that should be public.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("CoyotePrincipal[");

==================================================
CoyoteWriter.java
index 9658bd3e44..6ef1fa7ba1 100644
--- a/java/org/apache/catalina/connector/CoyoteReader.java
+++ b/java/org/apache/catalina/connector/CoyoteReader.java
@@ -62,6 +62,7 @@ public class CoyoteReader
     /**
      * Prevent cloning the facade.
      */
+    @Override
     protected Object clone()
         throws CloneNotSupportedException {
         throw new CloneNotSupportedException();
@@ -82,59 +83,69 @@ public class CoyoteReader
     // --------------------------------------------------------- Reader Methods
 
 
+    @Override
     public void close()
         throws IOException {
         ib.close();
     }
 
 
+    @Override
     public int read()
         throws IOException {
         return ib.read();
     }
 
 
+    @Override
     public int read(char[] cbuf)
         throws IOException {
         return ib.read(cbuf, 0, cbuf.length);
     }
 
 
+    @Override
     public int read(char[] cbuf, int off, int len)
         throws IOException {
         return ib.read(cbuf, off, len);
     }
 
 
+    @Override
     public long skip(long n)
         throws IOException {
         return ib.skip(n);
     }
 
 
+    @Override
     public boolean ready()
         throws IOException {
         return ib.ready();
     }
 
 
+    @Override
     public boolean markSupported() {
         return true;
     }
 
 
+    @Override
     public void mark(int readAheadLimit)
         throws IOException {
         ib.mark(readAheadLimit);
     }
 
 
+    @Override
     public void reset()
         throws IOException {
         ib.reset();
     }
 
 
+    @Override
     public String readLine()
         throws IOException {
 

==================================================
InputBuffer.java
index d22692ba5e..241467b500 100644
--- a/java/org/apache/catalina/connector/CoyoteWriter.java
+++ b/java/org/apache/catalina/connector/CoyoteWriter.java
@@ -60,6 +60,7 @@ public class CoyoteWriter
     /**
      * Prevent cloning the facade.
      */
+    @Override
     protected Object clone()
         throws CloneNotSupportedException {
         throw new CloneNotSupportedException();
@@ -88,6 +89,7 @@ public class CoyoteWriter
     // --------------------------------------------------------- Writer Methods
 
 
+    @Override
     public void flush() {
 
         if (error)
@@ -102,6 +104,7 @@ public class CoyoteWriter
     }
 
 
+    @Override
     public void close() {
 
         // We don't close the PrintWriter - super() is not called,
@@ -116,12 +119,14 @@ public class CoyoteWriter
     }
 
 
+    @Override
     public boolean checkError() {
         flush();
         return error;
     }
 
 
+    @Override
     public void write(int c) {
 
         if (error)
@@ -136,6 +141,7 @@ public class CoyoteWriter
     }
 
 
+    @Override
     public void write(char buf[], int off, int len) {
 
         if (error)
@@ -150,11 +156,13 @@ public class CoyoteWriter
     }
 
 
+    @Override
     public void write(char buf[]) {
 	write(buf, 0, buf.length);
     }
 
 
+    @Override
     public void write(String s, int off, int len) {
 
         if (error)
@@ -169,6 +177,7 @@ public class CoyoteWriter
     }
 
 
+    @Override
     public void write(String s) {
         write(s, 0, s.length());
     }
@@ -177,6 +186,7 @@ public class CoyoteWriter
     // ---------------------------------------------------- PrintWriter Methods
 
 
+    @Override
     public void print(boolean b) {
         if (b) {
             write("true");
@@ -186,36 +196,43 @@ public class CoyoteWriter
     }
 
 
+    @Override
     public void print(char c) {
         write(c);
     }
 
 
+    @Override
     public void print(int i) {
         write(String.valueOf(i));
     }
 
 
+    @Override
     public void print(long l) {
         write(String.valueOf(l));
     }
 
 
+    @Override
     public void print(float f) {
         write(String.valueOf(f));
     }
 
 
+    @Override
     public void print(double d) {
         write(String.valueOf(d));
     }
 
 
+    @Override
     public void print(char s[]) {
         write(s);
     }
 
 
+    @Override
     public void print(String s) {
         if (s == null) {
             s = "null";
@@ -224,64 +241,75 @@ public class CoyoteWriter
     }
 
 
+    @Override
     public void print(Object obj) {
         write(String.valueOf(obj));
     }
 
 
+    @Override
     public void println() {
         write(LINE_SEP);
     }
 
 
+    @Override
     public void println(boolean b) {
         print(b);
         println();
     }
 
 
+    @Override
     public void println(char c) {
         print(c);
         println();
     }
 
 
+    @Override
     public void println(int i) {
         print(i);
         println();
     }
 
 
+    @Override
     public void println(long l) {
         print(l);
         println();
     }
 
 
+    @Override
     public void println(float f) {
         print(f);
         println();
     }
 
 
+    @Override
     public void println(double d) {
         print(d);
         println();
     }
 
 
+    @Override
     public void println(char c[]) {
         print(c);
         println();
     }
 
 
+    @Override
     public void println(String s) {
         print(s);
         println();
     }
 
 
+    @Override
     public void println(Object o) {
         print(o);
         println();

==================================================
OutputBuffer.java
index d9425cd71a..62ae695463 100644
--- a/java/org/apache/catalina/connector/InputBuffer.java
+++ b/java/org/apache/catalina/connector/InputBuffer.java
@@ -238,6 +238,7 @@ public class InputBuffer extends Reader
      * 
      * @throws IOException An underlying IOException occurred
      */
+    @Override
     public void close()
         throws IOException {
         closed = true;
@@ -360,6 +361,7 @@ public class InputBuffer extends Reader
     }
 
 
+    @Override
     public int read()
         throws IOException {
 
@@ -370,6 +372,7 @@ public class InputBuffer extends Reader
     }
 
 
+    @Override
     public int read(char[] cbuf)
         throws IOException {
 
@@ -380,6 +383,7 @@ public class InputBuffer extends Reader
     }
 
 
+    @Override
     public int read(char[] cbuf, int off, int len)
         throws IOException {
 
@@ -390,6 +394,7 @@ public class InputBuffer extends Reader
     }
 
 
+    @Override
     public long skip(long n)
         throws IOException {
 
@@ -426,6 +431,7 @@ public class InputBuffer extends Reader
     }
 
 
+    @Override
     public boolean ready()
         throws IOException {
 
@@ -436,11 +442,13 @@ public class InputBuffer extends Reader
     }
 
 
+    @Override
     public boolean markSupported() {
         return true;
     }
 
 
+    @Override
     public void mark(int readAheadLimit)
         throws IOException {
 
@@ -464,6 +472,7 @@ public class InputBuffer extends Reader
     }
 
 
+    @Override
     public void reset()
         throws IOException {
 

==================================================
RequestFacade.java
index 29b4804d46..226f1ca829 100644
--- a/java/org/apache/catalina/connector/OutputBuffer.java
+++ b/java/org/apache/catalina/connector/OutputBuffer.java
@@ -254,6 +254,7 @@ public class OutputBuffer extends Writer
      * 
      * @throws IOException An underlying IOException occurred
      */
+    @Override
     public void close()
         throws IOException {
 
@@ -284,6 +285,7 @@ public class OutputBuffer extends Writer
      * 
      * @throws IOException An underlying IOException occurred
      */
+    @Override
     public void flush()
         throws IOException {
         doFlush(true);
@@ -406,6 +408,7 @@ public class OutputBuffer extends Writer
     // ------------------------------------------------- Chars Handling Methods
 
 
+    @Override
     public void write(int c)
         throws IOException {
 
@@ -419,6 +422,7 @@ public class OutputBuffer extends Writer
     }
 
 
+    @Override
     public void write(char c[])
         throws IOException {
 
@@ -430,6 +434,7 @@ public class OutputBuffer extends Writer
     }
 
 
+    @Override
     public void write(char c[], int off, int len)
         throws IOException {
 
@@ -446,6 +451,7 @@ public class OutputBuffer extends Writer
     /**
      * Append a string to the buffer
      */
+    @Override
     public void write(String s, int off, int len)
         throws IOException {
 
@@ -461,6 +467,7 @@ public class OutputBuffer extends Writer
     }
 
 
+    @Override
     public void write(String s)
         throws IOException {
 

==================================================
ResponseFacade.java
index a79b7e364b..2b93dceed6 100644
--- a/java/org/apache/catalina/connector/RequestFacade.java
+++ b/java/org/apache/catalina/connector/RequestFacade.java
@@ -253,6 +253,7 @@ public class RequestFacade implements HttpServletRequest {
     /**
      * Prevent cloning the facade.
      */
+    @Override
     protected Object clone()
         throws CloneNotSupportedException {
         throw new CloneNotSupportedException();

==================================================
ApplicationFilterConfig.java
index 9c26b15bf1..159ea24500 100644
--- a/java/org/apache/catalina/connector/ResponseFacade.java
+++ b/java/org/apache/catalina/connector/ResponseFacade.java
@@ -132,6 +132,7 @@ public class ResponseFacade
     /**
      * Prevent cloning the facade.
      */
+    @Override
     protected Object clone()
         throws CloneNotSupportedException {
         throw new CloneNotSupportedException();

==================================================
ApplicationHttpRequest.java
index ab0976eab8..a61d52f1a5 100644
--- a/java/org/apache/catalina/core/ApplicationFilterConfig.java
+++ b/java/org/apache/catalina/core/ApplicationFilterConfig.java
@@ -192,6 +192,7 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
     /**
      * Return a String representation of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("ApplicationFilterConfig[");

==================================================
ApplicationHttpResponse.java
index 60ddd63141..4828ff2fe8 100644
--- a/java/org/apache/catalina/core/ApplicationHttpRequest.java
+++ b/java/org/apache/catalina/core/ApplicationHttpRequest.java
@@ -206,6 +206,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      *
      * @param name Name of the attribute to retrieve
      */
+    @Override
     public Object getAttribute(String name) {
 
         if (name.equals(Globals.DISPATCHER_TYPE_ATTR)) {
@@ -240,6 +241,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      * Override the <code>getAttributeNames()</code> method of the wrapped
      * request.
      */
+    @Override
     public Enumeration<String> getAttributeNames() {
         return (new AttributeNamesEnumerator());
     }
@@ -251,6 +253,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      *
      * @param name Name of the attribute to remove
      */
+    @Override
     public void removeAttribute(String name) {
 
         if (!removeSpecial(name))
@@ -266,6 +269,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      * @param name Name of the attribute to set
      * @param value Value of the attribute to set
      */
+    @Override
     public void setAttribute(String name, Object value) {
 
         if (name.equals(Globals.DISPATCHER_TYPE_ATTR)) {
@@ -289,6 +293,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      *
      * @param path Path of the resource to be wrapped
      */
+    @Override
     public RequestDispatcher getRequestDispatcher(String path) {
 
         if (context == null)
@@ -336,6 +341,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      * Override the <code>getContextPath()</code> method of the wrapped
      * request.
      */
+    @Override
     public String getContextPath() {
 
         return (this.contextPath);
@@ -348,6 +354,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      *
      * @param name Name of the requested parameter
      */
+    @Override
     public String getParameter(String name) {
 
 	parseParameters();
@@ -369,6 +376,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      * Override the <code>getParameterMap()</code> method of the
      * wrapped request.
      */
+    @Override
     public Map<String, String[]> getParameterMap() {
 
 	parseParameters();
@@ -381,6 +389,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      * Override the <code>getParameterNames()</code> method of the
      * wrapped request.
      */
+    @Override
     public Enumeration<String> getParameterNames() {
 
 	parseParameters();
@@ -395,6 +404,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      *
      * @param name Name of the requested parameter
      */
+    @Override
     public String[] getParameterValues(String name) {
 
 	parseParameters();
@@ -419,6 +429,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
     /**
      * Override the <code>getPathInfo()</code> method of the wrapped request.
      */
+    @Override
     public String getPathInfo() {
 
         return (this.pathInfo);
@@ -430,6 +441,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      * Override the <code>getQueryString()</code> method of the wrapped
      * request.
      */
+    @Override
     public String getQueryString() {
 
         return (this.queryString);
@@ -441,6 +453,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      * Override the <code>getRequestURI()</code> method of the wrapped
      * request.
      */
+    @Override
     public String getRequestURI() {
 
         return (this.requestURI);
@@ -452,6 +465,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      * Override the <code>getRequestURL()</code> method of the wrapped
      * request.
      */
+    @Override
     public StringBuffer getRequestURL() {
 
         StringBuffer url = new StringBuffer();
@@ -479,6 +493,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      * Override the <code>getServletPath()</code> method of the wrapped
      * request.
      */
+    @Override
     public String getServletPath() {
 
         return (this.servletPath);
@@ -490,6 +505,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      * Return the session associated with this Request, creating one
      * if necessary.
      */
+    @Override
     public HttpSession getSession() {
         return (getSession(true));
     }
@@ -501,6 +517,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      *
      * @param create Create a new session if one does not exist
      */
+    @Override
     public HttpSession getSession(boolean create) {
 
         if (crossContext) {
@@ -555,6 +572,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      * @return true if the request specifies a JSESSIONID that is valid within
      * the context of this ApplicationHttpRequest, false otherwise.
      */
+    @Override
     public boolean isRequestedSessionIdValid() {
 
         if (crossContext) {

==================================================
ApplicationRequest.java
index 3a8c48543e..9bf0c2c60e 100644
--- a/java/org/apache/catalina/core/ApplicationHttpResponse.java
+++ b/java/org/apache/catalina/core/ApplicationHttpResponse.java
@@ -112,6 +112,7 @@ class ApplicationHttpResponse extends HttpServletResponseWrapper {
      * @exception IllegalStateException if the response has already
      *  been committed
      */
+    @Override
     public void reset() {
 
         // If already committed, the wrapped response will throw ISE
@@ -126,6 +127,7 @@ class ApplicationHttpResponse extends HttpServletResponseWrapper {
      *
      * @param len The new content length
      */
+    @Override
     public void setContentLength(int len) {
 
         if (!included)
@@ -139,6 +141,7 @@ class ApplicationHttpResponse extends HttpServletResponseWrapper {
      *
      * @param type The new content type
      */
+    @Override
     public void setContentType(String type) {
 
         if (!included)
@@ -152,6 +155,7 @@ class ApplicationHttpResponse extends HttpServletResponseWrapper {
      *
      * @param loc The new locale
      */
+    @Override
     public void setLocale(Locale loc) {
 
         if (!included)
@@ -165,6 +169,7 @@ class ApplicationHttpResponse extends HttpServletResponseWrapper {
      *
      * @param size The buffer size
      */
+    @Override
     public void setBufferSize(int size) {
         if (!included)
             getResponse().setBufferSize(size);
@@ -179,6 +184,7 @@ class ApplicationHttpResponse extends HttpServletResponseWrapper {
      *
      * @param cookie The new cookie
      */
+    @Override
     public void addCookie(Cookie cookie) {
 
         if (!included)
@@ -193,6 +199,7 @@ class ApplicationHttpResponse extends HttpServletResponseWrapper {
      * @param name The new header name
      * @param value The new header value
      */
+    @Override
     public void addDateHeader(String name, long value) {
 
         if (!included)
@@ -207,6 +214,7 @@ class ApplicationHttpResponse extends HttpServletResponseWrapper {
      * @param name The new header name
      * @param value The new header value
      */
+    @Override
     public void addHeader(String name, String value) {
 
         if (!included)
@@ -221,6 +229,7 @@ class ApplicationHttpResponse extends HttpServletResponseWrapper {
      * @param name The new header name
      * @param value The new header value
      */
+    @Override
     public void addIntHeader(String name, int value) {
 
         if (!included)
@@ -236,6 +245,7 @@ class ApplicationHttpResponse extends HttpServletResponseWrapper {
      *
      * @exception IOException if an input/output error occurs
      */
+    @Override
     public void sendError(int sc) throws IOException {
 
         if (!included)
@@ -252,6 +262,7 @@ class ApplicationHttpResponse extends HttpServletResponseWrapper {
      *
      * @exception IOException if an input/output error occurs
      */
+    @Override
     public void sendError(int sc, String msg) throws IOException {
 
         if (!included)
@@ -267,6 +278,7 @@ class ApplicationHttpResponse extends HttpServletResponseWrapper {
      *
      * @exception IOException if an input/output error occurs
      */
+    @Override
     public void sendRedirect(String location) throws IOException {
 
         if (!included)
@@ -281,6 +293,7 @@ class ApplicationHttpResponse extends HttpServletResponseWrapper {
      * @param name The new header name
      * @param value The new header value
      */
+    @Override
     public void setDateHeader(String name, long value) {
 
         if (!included)
@@ -295,6 +308,7 @@ class ApplicationHttpResponse extends HttpServletResponseWrapper {
      * @param name The new header name
      * @param value The new header value
      */
+    @Override
     public void setHeader(String name, String value) {
 
         if (!included)
@@ -309,6 +323,7 @@ class ApplicationHttpResponse extends HttpServletResponseWrapper {
      * @param name The new header name
      * @param value The new header value
      */
+    @Override
     public void setIntHeader(String name, int value) {
 
         if (!included)
@@ -322,6 +337,7 @@ class ApplicationHttpResponse extends HttpServletResponseWrapper {
      *
      * @param sc The new status code
      */
+    @Override
     public void setStatus(int sc) {
 
         if (!included)

==================================================
ApplicationResponse.java
index 13c708dc4b..c46ab2e486 100644
--- a/java/org/apache/catalina/core/ApplicationRequest.java
+++ b/java/org/apache/catalina/core/ApplicationRequest.java
@@ -105,6 +105,7 @@ class ApplicationRequest extends ServletRequestWrapper {
      *
      * @param name Name of the attribute to retrieve
      */
+    @Override
     public Object getAttribute(String name) {
 
         synchronized (attributes) {
@@ -118,6 +119,7 @@ class ApplicationRequest extends ServletRequestWrapper {
      * Override the <code>getAttributeNames()</code> method of the wrapped
      * request.
      */
+    @Override
     public Enumeration<String> getAttributeNames() {
 
         synchronized (attributes) {
@@ -133,6 +135,7 @@ class ApplicationRequest extends ServletRequestWrapper {
      *
      * @param name Name of the attribute to remove
      */
+    @Override
     public void removeAttribute(String name) {
 
         synchronized (attributes) {
@@ -151,6 +154,7 @@ class ApplicationRequest extends ServletRequestWrapper {
      * @param name Name of the attribute to set
      * @param value Value of the attribute to set
      */
+    @Override
     public void setAttribute(String name, Object value) {
 
         synchronized (attributes) {
@@ -170,6 +174,7 @@ class ApplicationRequest extends ServletRequestWrapper {
      *
      * @param request The new wrapped request
      */
+    @Override
     public void setRequest(ServletRequest request) {
 
         super.setRequest(request);

==================================================
StandardContext.java
index 8406d7dc6a..2267d85559 100644
--- a/java/org/apache/catalina/core/ApplicationResponse.java
+++ b/java/org/apache/catalina/core/ApplicationResponse.java
@@ -102,6 +102,7 @@ class ApplicationResponse extends ServletResponseWrapper {
      * @exception IllegalStateException if the response has already
      *  been committed
      */
+    @Override
     public void reset() {
 
         // If already committed, the wrapped response will throw ISE
@@ -116,6 +117,7 @@ class ApplicationResponse extends ServletResponseWrapper {
      *
      * @param len The new content length
      */
+    @Override
     public void setContentLength(int len) {
 
         if (!included)
@@ -129,6 +131,7 @@ class ApplicationResponse extends ServletResponseWrapper {
      *
      * @param type The new content type
      */
+    @Override
     public void setContentType(String type) {
 
         if (!included)
@@ -142,6 +145,7 @@ class ApplicationResponse extends ServletResponseWrapper {
      *
      * @param loc The new locale
      */
+    @Override
     public void setLocale(Locale loc) {
         if (!included)
             getResponse().setLocale(loc);
@@ -153,6 +157,7 @@ class ApplicationResponse extends ServletResponseWrapper {
      *
      * @param size The buffer size
      */
+    @Override
     public void setBufferSize(int size) {
         if (!included)
             getResponse().setBufferSize(size);
@@ -167,6 +172,7 @@ class ApplicationResponse extends ServletResponseWrapper {
      *
      * @param response The new wrapped response
      */
+    @Override
     public void setResponse(ServletResponse response) {
 
         super.setResponse(response);

==================================================
StandardContextValve.java
index 49f724da12..55661019b8 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -766,6 +766,7 @@ public class StandardContext
     }
 
 
+    @Override
     public void setName( String name ) {
         super.setName( name );
         encodedPath = urlEncoder.encode(name);
@@ -1388,6 +1389,7 @@ public class StandardContext
      * the corresponding version number, in the format
      * <code>&lt;description&gt;/&lt;version&gt;</code>.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -1425,6 +1427,7 @@ public class StandardContext
      *
      * @param loader The newly associated loader
      */
+    @Override
     public synchronized void setLoader(Loader loader) {
 
         super.setLoader(loader);
@@ -1652,6 +1655,7 @@ public class StandardContext
      * This call is meaningful only <strong>after</strong> a Loader has
      * been configured.
      */
+    @Override
     public ClassLoader getParentClassLoader() {
         if (parentClassLoader != null)
             return (parentClassLoader);
@@ -1915,6 +1919,7 @@ public class StandardContext
      *
      * @param resources The newly associated DirContext
      */
+    @Override
     public synchronized void setResources(DirContext resources) {
 
         if (started) {
@@ -2109,6 +2114,7 @@ public class StandardContext
      * @exception IllegalArgumentException if the proposed container is
      *  not an implementation of Wrapper
      */
+    @Override
     public void addChild(Container child) {
 
         // Global JspServlet
@@ -3347,6 +3353,7 @@ public class StandardContext
      * @exception IllegalArgumentException if the proposed container is
      *  not an implementation of Wrapper
      */
+    @Override
     public void removeChild(Container child) {
 
         if (!(child instanceof Wrapper)) {
@@ -4231,6 +4238,7 @@ public class StandardContext
      *
      * @exception LifecycleException if a startup error occurs
      */
+    @Override
     public synchronized void start() throws LifecycleException {
         //if (lazy ) return;
         if (started) {
@@ -4620,6 +4628,7 @@ public class StandardContext
      *
      * @exception LifecycleException if a shutdown error occurs
      */
+    @Override
     public synchronized void stop() throws LifecycleException {
 
         // Validate and update our current component state
@@ -4751,6 +4760,7 @@ public class StandardContext
      * XXX Should this be done in stop() ?
      * 
      */ 
+    @Override
     public void destroy() throws Exception {
         if( oname != null ) { 
             // Send j2ee.object.deleted notification 
@@ -4792,6 +4802,7 @@ public class StandardContext
     /**
      * Return a String representation of this component.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder();
@@ -5272,6 +5283,7 @@ public class StandardContext
     }
     
 
+    @Override
     public ObjectName createObjectName(String hostDomain, ObjectName parentName)
             throws MalformedObjectNameException
     {
@@ -5353,6 +5365,7 @@ public class StandardContext
      * @return ObjectName The name of the object
      * @throws Exception If an error occurs
      */
+    @Override
     public ObjectName preRegister(MBeanServer server,
                                   ObjectName name)
             throws Exception
@@ -5365,6 +5378,7 @@ public class StandardContext
         return super.preRegister(server,name);
     }
 
+    @Override
     public void preDeregister() throws Exception {
         if( started ) {
             try {
@@ -5375,6 +5389,7 @@ public class StandardContext
         }
     }
 
+    @Override
     public void init() throws Exception {
 
         if( this.getParent() == null ) {
@@ -5449,6 +5464,7 @@ public class StandardContext
         
     }
 
+    @Override
     public ObjectName getParentName() throws MalformedObjectNameException {
         // "Life" update
         String path=oname.getKeyProperty("name");

==================================================
StandardEngine.java
index d8b6ce6ccc..9e8a0089ed 100644
--- a/java/org/apache/catalina/core/StandardContextValve.java
+++ b/java/org/apache/catalina/core/StandardContextValve.java
@@ -82,6 +82,7 @@ final class StandardContextValve
     /**
      * Return descriptive information about this Valve implementation.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -97,6 +98,7 @@ final class StandardContextValve
      * 
      * @see org.apache.catalina.Contained#setContainer(org.apache.catalina.Container)
      */
+    @Override
     public void setContainer(Container container) {
         super.setContainer(container);
         context = (StandardContext) container;
@@ -115,6 +117,7 @@ final class StandardContextValve
      * @exception IOException if an input/output error occurred
      * @exception ServletException if a servlet error occurred
      */
+    @Override
     public final void invoke(Request request, Response response)
         throws IOException, ServletException {
 
@@ -232,6 +235,7 @@ final class StandardContextValve
      * @exception IOException if an input/output error occurred
      * @exception ServletException if a servlet error occurred
      */
+    @Override
     public final void event(Request request, Response response, CometEvent event)
         throws IOException, ServletException {
 

==================================================
StandardEngineValve.java
index b9a377b4fa..1c3d78e3b8 100644
--- a/java/org/apache/catalina/core/StandardEngine.java
+++ b/java/org/apache/catalina/core/StandardEngine.java
@@ -131,6 +131,7 @@ public class StandardEngine
      *
      * @return configured realm, or a JAAS realm by default
      */
+    @Override
     public Realm getRealm() {
         Realm configured=super.getRealm();
         // If no set realm has been called - default to JAAS
@@ -171,6 +172,7 @@ public class StandardEngine
 
     }
     
+    @Override
     public void setName(String name ) {
         if( domain != null ) {
             // keep name==domain, ignore override
@@ -254,6 +256,7 @@ public class StandardEngine
      *
      * @param child Child container to be added
      */
+    @Override
     public void addChild(Container child) {
 
         if (!(child instanceof Host))
@@ -269,6 +272,7 @@ public class StandardEngine
      * the corresponding version number, in the format
      * <code>&lt;description&gt;/&lt;version&gt;</code>.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -281,6 +285,7 @@ public class StandardEngine
      *
      * @param container Proposed parent Container
      */
+    @Override
     public void setParent(Container container) {
 
         throw new IllegalArgumentException
@@ -291,6 +296,7 @@ public class StandardEngine
 
     private boolean initialized=false;
     
+    @Override
     public void init() {
         if( initialized ) return;
         initialized=true;
@@ -361,6 +367,7 @@ public class StandardEngine
         
     }
     
+    @Override
     public void destroy() throws LifecycleException {
         if( ! initialized ) return;
         initialized=false;
@@ -401,6 +408,7 @@ public class StandardEngine
      *
      * @exception LifecycleException if a startup error occurs
      */
+    @Override
     public void start() throws LifecycleException {
         if( started ) {
             return;
@@ -444,6 +452,7 @@ public class StandardEngine
 
     }
     
+    @Override
     public void stop() throws LifecycleException {
         super.stop();
         if( mbeans != null ) {
@@ -459,6 +468,7 @@ public class StandardEngine
     /**
      * Return a String representation of this component.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("StandardEngine[");
@@ -474,6 +484,7 @@ public class StandardEngine
 
     // -------------------- JMX registration  --------------------
 
+    @Override
     public ObjectName preRegister(MBeanServer server,
                                   ObjectName name) throws Exception
     {
@@ -485,6 +496,7 @@ public class StandardEngine
     }
 
     // FIXME Remove -- not used 
+    @Override
     public ObjectName getParentName() throws MalformedObjectNameException {
         if (getService()==null) {
             return null;
@@ -495,6 +507,7 @@ public class StandardEngine
         return serviceName;                
     }
     
+    @Override
     public ObjectName createObjectName(String domain, ObjectName parent)
         throws Exception
     {
@@ -523,6 +536,7 @@ public class StandardEngine
         
     }
     
+    @Override
     public String getDomain() {
         if (domain!=null) {
             return domain;
@@ -531,6 +545,7 @@ public class StandardEngine
         }
     }
     
+    @Override
     public void setDomain(String domain) {
         this.domain = domain;
     }

==================================================
StandardHost.java
index 3289916867..b2df268eea 100644
--- a/java/org/apache/catalina/core/StandardEngineValve.java
+++ b/java/org/apache/catalina/core/StandardEngineValve.java
@@ -75,6 +75,7 @@ final class StandardEngineValve
     /**
      * Return descriptive information about this Valve implementation.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -97,6 +98,7 @@ final class StandardEngineValve
      * @exception IOException if an input/output error occurred
      * @exception ServletException if a servlet error occurred
      */
+    @Override
     public final void invoke(Request request, Response response)
         throws IOException, ServletException {
 
@@ -129,6 +131,7 @@ final class StandardEngineValve
      * @exception IOException if an input/output error occurred
      * @exception ServletException if a servlet error occurred
      */
+    @Override
     public final void event(Request request, Response response, CometEvent event)
         throws IOException, ServletException {
 

==================================================
StandardHostValve.java
index 039c2c0634..d9bd8b7691 100644
--- a/java/org/apache/catalina/core/StandardHost.java
+++ b/java/org/apache/catalina/core/StandardHost.java
@@ -418,6 +418,7 @@ public class StandardHost
      * Return the canonical, fully qualified, name of the virtual host
      * this Container represents.
      */
+    @Override
     public String getName() {
 
         return (name);
@@ -433,6 +434,7 @@ public class StandardHost
      *
      * @exception IllegalArgumentException if name is null
      */
+    @Override
     public void setName(String name) {
 
         if (name == null)
@@ -561,6 +563,7 @@ public class StandardHost
      *
      * @param child Child container to be added
      */
+    @Override
     public void addChild(Container child) {
 
         if (!(child instanceof Context))
@@ -589,6 +592,7 @@ public class StandardHost
      * the corresponding version number, in the format
      * <code>&lt;description&gt;/&lt;version&gt;</code>.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -687,6 +691,7 @@ public class StandardHost
     /**
      * Return a String representation of this component.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder();
@@ -707,6 +712,7 @@ public class StandardHost
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents it from being started
      */
+    @Override
     public synchronized void start() throws LifecycleException {
         if( started ) {
             return;
@@ -795,6 +801,7 @@ public class StandardHost
 
     private boolean initialized=false;
     
+    @Override
     public void init() {
         if( initialized ) return;
         initialized=true;
@@ -838,6 +845,7 @@ public class StandardHost
         }
     }
 
+    @Override
     public void destroy() throws Exception {
         // destroy our child containers, if any
         Container children[] = findChildren();
@@ -849,6 +857,7 @@ public class StandardHost
       
     }
     
+    @Override
     public ObjectName preRegister(MBeanServer server, ObjectName oname ) 
         throws Exception
     {
@@ -859,6 +868,7 @@ public class StandardHost
         return res;        
     }
     
+    @Override
     public ObjectName createObjectName(String domain, ObjectName parent)
         throws Exception
     {

==================================================
StandardServer.java
index 860caf8fde..9dd2433664 100644
--- a/java/org/apache/catalina/core/StandardHostValve.java
+++ b/java/org/apache/catalina/core/StandardHostValve.java
@@ -87,6 +87,7 @@ final class StandardHostValve
     /**
      * Return descriptive information about this Valve implementation.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -109,6 +110,7 @@ final class StandardHostValve
      * @exception IOException if an input/output error occurred
      * @exception ServletException if a servlet error occurred
      */
+    @Override
     public final void invoke(Request request, Response response)
         throws IOException, ServletException {
 
@@ -170,6 +172,7 @@ final class StandardHostValve
      * @exception IOException if an input/output error occurred
      * @exception ServletException if a servlet error occurred
      */
+    @Override
     public final void event(Request request, Response response, CometEvent event)
         throws IOException, ServletException {
 

==================================================
StandardService.java
index eb26fa98cd..eac6cfa915 100644
--- a/java/org/apache/catalina/core/StandardServer.java
+++ b/java/org/apache/catalina/core/StandardServer.java
@@ -576,6 +576,7 @@ public final class StandardServer
     /**
      * Return a String representation of this component.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("StandardServer[");

==================================================
StandardWrapper.java
index a589119fed..268f8832c2 100644
--- a/java/org/apache/catalina/core/StandardService.java
+++ b/java/org/apache/catalina/core/StandardService.java
@@ -372,6 +372,7 @@ public class StandardService
     /**
      * Return a String representation of this component.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("StandardService[");

==================================================
StandardWrapperValve.java
index 201252cb9a..91f1b8f34a 100644
--- a/java/org/apache/catalina/core/StandardWrapper.java
+++ b/java/org/apache/catalina/core/StandardWrapper.java
@@ -330,6 +330,7 @@ public class StandardWrapper
      * the corresponding version number, in the format
      * <code>&lt;description&gt;/&lt;version&gt;</code>.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -467,6 +468,7 @@ public class StandardWrapper
      *
      * @param container Proposed parent Container
      */
+    @Override
     public void setParent(Container container) {
 
         if ((container != null) &&
@@ -633,6 +635,7 @@ public class StandardWrapper
      * invoked inside the classloading context of this container. Unexpected
      * throwables will be caught and logged.
      */
+    @Override
     public void backgroundProcess() {
         super.backgroundProcess();
         
@@ -671,6 +674,7 @@ public class StandardWrapper
      *
      * @param child Child container to be added
      */
+    @Override
     public void addChild(Container child) {
 
         throw new IllegalStateException
@@ -1193,6 +1197,7 @@ public class StandardWrapper
     /**
      * Return a String representation of this component.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder();
@@ -1550,6 +1555,7 @@ public class StandardWrapper
      *
      * @exception LifecycleException if a fatal error occurs during startup
      */
+    @Override
     public void start() throws LifecycleException {
     
         // Send j2ee.state.starting notification 
@@ -1588,6 +1594,7 @@ public class StandardWrapper
      *
      * @exception LifecycleException if a fatal error occurs during shutdown
      */
+    @Override
     public void stop() throws LifecycleException {
 
         setAvailable(Long.MAX_VALUE);

==================================================
ApplicationParameter.java
index 43a949d4cd..04d6316c78 100644
--- a/java/org/apache/catalina/core/StandardWrapperValve.java
+++ b/java/org/apache/catalina/core/StandardWrapperValve.java
@@ -91,6 +91,7 @@ final class StandardWrapperValve
      * @exception IOException if an input/output error occurred
      * @exception ServletException if a servlet error occurred
      */
+    @Override
     public final void invoke(Request request, Response response)
         throws IOException, ServletException {
 
@@ -362,6 +363,7 @@ final class StandardWrapperValve
      * @exception ServletException if a servlet error occurs, or is thrown
      *  by a subsequently invoked Valve, Filter, or Servlet
      */
+    @Override
     public void event(Request request, Response response, CometEvent event)
         throws IOException, ServletException {
         
@@ -576,6 +578,7 @@ final class StandardWrapperValve
 
     // Don't register in JMX
 
+    @Override
     public ObjectName createObjectName(String domain, ObjectName parent)
             throws MalformedObjectNameException
     {

==================================================
ContextEjb.java
index e46346101a..b4fd15e435 100644
--- a/java/org/apache/catalina/deploy/ApplicationParameter.java
+++ b/java/org/apache/catalina/deploy/ApplicationParameter.java
@@ -100,6 +100,7 @@ public class ApplicationParameter implements Serializable {
     /**
      * Return a String representation of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("ApplicationParameter[");

==================================================
ContextEnvironment.java
index e6c5a1968d..0d1508886d 100644
--- a/java/org/apache/catalina/deploy/ContextEjb.java
+++ b/java/org/apache/catalina/deploy/ContextEjb.java
@@ -85,6 +85,7 @@ public class ContextEjb extends ResourceBase implements Serializable {
     /**
      * Return a String representation of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("ContextEjb[");

==================================================
ContextHandler.java
index 49744980e3..1cad1271a6 100644
--- a/java/org/apache/catalina/deploy/ContextEnvironment.java
+++ b/java/org/apache/catalina/deploy/ContextEnvironment.java
@@ -125,6 +125,7 @@ public class ContextEnvironment implements Serializable, Injectable {
     /**
      * Return a String representation of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("ContextEnvironment[");

==================================================
ContextLocalEjb.java
index 89343e1812..8c1472e952 100644
--- a/java/org/apache/catalina/deploy/ContextHandler.java
+++ b/java/org/apache/catalina/deploy/ContextHandler.java
@@ -120,6 +120,7 @@ public class ContextHandler extends ResourceBase implements Serializable {
     /**
      * Return a String representation of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("ContextHandler[");

==================================================
ContextResource.java
index c6ad8e5a0c..86739525c8 100644
--- a/java/org/apache/catalina/deploy/ContextLocalEjb.java
+++ b/java/org/apache/catalina/deploy/ContextLocalEjb.java
@@ -84,6 +84,7 @@ public class ContextLocalEjb extends ResourceBase implements Serializable {
     /**
      * Return a String representation of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("ContextLocalEjb[");

==================================================
ContextResourceEnvRef.java
index 1cf7854ca9..e7d913bb7f 100644
--- a/java/org/apache/catalina/deploy/ContextResource.java
+++ b/java/org/apache/catalina/deploy/ContextResource.java
@@ -71,6 +71,7 @@ public class ContextResource extends ResourceBase implements Serializable {
     /**
      * Return a String representation of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("ContextResource[");

==================================================
ContextResourceLink.java
index 1d070e61ce..da0d5ad304 100644
--- a/java/org/apache/catalina/deploy/ContextResourceEnvRef.java
+++ b/java/org/apache/catalina/deploy/ContextResourceEnvRef.java
@@ -55,6 +55,7 @@ public class ContextResourceEnvRef extends ResourceBase implements Serializable
     /**
      * Return a String representation of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("ContextResourceEnvRef[");

==================================================
ContextService.java
index 7dabfbd7f7..8829d8f146 100644
--- a/java/org/apache/catalina/deploy/ContextResourceLink.java
+++ b/java/org/apache/catalina/deploy/ContextResourceLink.java
@@ -66,6 +66,7 @@ public class ContextResourceLink extends ResourceBase implements Serializable {
     /**
      * Return a String representation of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("ContextResourceLink[");

==================================================
ContextTransaction.java
index 4ec0b5deef..81ec42b6c0 100644
--- a/java/org/apache/catalina/deploy/ContextService.java
+++ b/java/org/apache/catalina/deploy/ContextService.java
@@ -196,6 +196,7 @@ public class ContextService extends ResourceBase implements Serializable {
     /**
      * Return a String representation of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("ContextService[");

==================================================
ErrorPage.java
index e95dba58b7..889366e6fb 100644
--- a/java/org/apache/catalina/deploy/ContextTransaction.java
+++ b/java/org/apache/catalina/deploy/ContextTransaction.java
@@ -77,6 +77,7 @@ public class ContextTransaction implements Serializable {
     /**
      * Return a String representation of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("Transaction[");

==================================================
FilterDef.java
index c0278fded5..21b88c602e 100644
--- a/java/org/apache/catalina/deploy/ErrorPage.java
+++ b/java/org/apache/catalina/deploy/ErrorPage.java
@@ -150,6 +150,7 @@ public class ErrorPage implements Serializable {
     /**
      * Render a String representation of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("ErrorPage[");

==================================================
FilterMap.java
index 4385eb5210..35c71bfa0c 100644
--- a/java/org/apache/catalina/deploy/FilterDef.java
+++ b/java/org/apache/catalina/deploy/FilterDef.java
@@ -166,6 +166,7 @@ public class FilterDef implements Serializable {
     /**
      * Render a String representation of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("FilterDef[");

==================================================
LoginConfig.java
index 7ec4cbf12f..4f7ec74ed5 100644
--- a/java/org/apache/catalina/deploy/FilterMap.java
+++ b/java/org/apache/catalina/deploy/FilterMap.java
@@ -231,6 +231,7 @@ public class FilterMap implements Serializable {
     /**
      * Render a String representation of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("FilterMap[");

==================================================
MessageDestination.java
index 5dfce20ab4..44b939056e 100644
--- a/java/org/apache/catalina/deploy/LoginConfig.java
+++ b/java/org/apache/catalina/deploy/LoginConfig.java
@@ -141,6 +141,7 @@ public class LoginConfig implements Serializable {
     /**
      * Return a String representation of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("LoginConfig[");

==================================================
MessageDestinationRef.java
index 2307406fbf..46445b67aa 100644
--- a/java/org/apache/catalina/deploy/MessageDestination.java
+++ b/java/org/apache/catalina/deploy/MessageDestination.java
@@ -111,6 +111,7 @@ public class MessageDestination {
     /**
      * Return a String representation of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("MessageDestination[");

==================================================
SecurityCollection.java
index 6d5a269a2b..9b17db87cc 100644
--- a/java/org/apache/catalina/deploy/MessageDestinationRef.java
+++ b/java/org/apache/catalina/deploy/MessageDestinationRef.java
@@ -125,6 +125,7 @@ public class MessageDestinationRef implements Serializable, Injectable {
     /**
      * Return a String representation of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("MessageDestination[");

==================================================
SecurityConstraint.java
index 7dec74fe14..8080f55ebc 100644
--- a/java/org/apache/catalina/deploy/SecurityCollection.java
+++ b/java/org/apache/catalina/deploy/SecurityCollection.java
@@ -315,6 +315,7 @@ public class SecurityCollection implements Serializable {
     /**
      * Return a String representation of this security collection.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("SecurityCollection[");

==================================================
SecurityRoleRef.java
index 0fe283c84c..ade3d0878c 100644
--- a/java/org/apache/catalina/deploy/SecurityConstraint.java
+++ b/java/org/apache/catalina/deploy/SecurityConstraint.java
@@ -381,6 +381,7 @@ public class SecurityConstraint implements Serializable {
     /**
      * Return a String representation of this security constraint.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("SecurityConstraint[");

==================================================
RemoteAddrFilter.java
index 33bd2ca5c1..01f0720c74 100644
--- a/java/org/apache/catalina/deploy/SecurityRoleRef.java
+++ b/java/org/apache/catalina/deploy/SecurityRoleRef.java
@@ -70,6 +70,7 @@ public class SecurityRoleRef {
     /**
      * Return a String representation of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("SecurityRoleRef[");

==================================================
RemoteHostFilter.java
index 3b8edc769f..cc3febcf18 100644
--- a/java/org/apache/catalina/filters/RemoteAddrFilter.java
+++ b/java/org/apache/catalina/filters/RemoteAddrFilter.java
@@ -93,6 +93,7 @@ public final class RemoteAddrFilter
                 event, chain);        
     }
 
+    @Override
     protected Log getLogger() {
         return log;
     }

==================================================
RequestDumperFilter.java
index 9b5deb427c..6778b58b8d 100644
--- a/java/org/apache/catalina/filters/RemoteHostFilter.java
+++ b/java/org/apache/catalina/filters/RemoteHostFilter.java
@@ -94,6 +94,7 @@ public final class RemoteHostFilter
                 event, chain);        
     }
 
+    @Override
     protected Log getLogger() {
         return log;
     }

==================================================
ClusterListener.java
index c28fa90523..3a4db03ac0 100644
--- a/java/org/apache/catalina/filters/RequestDumperFilter.java
+++ b/java/org/apache/catalina/filters/RequestDumperFilter.java
@@ -59,6 +59,7 @@ public class RequestDumperFilter implements Filter {
 
     private static final ThreadLocal<Timestamp> timestamp =
             new ThreadLocal<Timestamp>() {
+        @Override
         protected Timestamp initialValue() {
             return new Timestamp();
         }

==================================================
ClusterRuleSet.java
index e4e96e4185..3d3b9c032e 100644
--- a/java/org/apache/catalina/ha/ClusterListener.java
+++ b/java/org/apache/catalina/ha/ClusterListener.java
@@ -70,10 +70,12 @@ public abstract class ClusterListener implements ChannelListener {
         this.cluster = cluster;
     }
 
+    @Override
     public boolean equals(Object listener) {
         return super.equals(listener);
     }
 
+    @Override
     public int hashCode() {
         return super.hashCode();
     }

==================================================
ClusterSingleSignOn.java
index 1a41637a68..8592a482ca 100644
--- a/java/org/apache/catalina/ha/ClusterRuleSet.java
+++ b/java/org/apache/catalina/ha/ClusterRuleSet.java
@@ -84,6 +84,7 @@ public class ClusterRuleSet extends RuleSetBase {
      * @param digester Digester instance to which the new Rule instances
      *  should be added.
      */
+    @Override
     public void addRuleInstances(Digester digester) {
         //Cluster configuration start
         digester.addObjectCreate(prefix + "Manager",

==================================================
ClusterSingleSignOnListener.java
index a2bb4d69dc..5b6f659229 100644
--- a/java/org/apache/catalina/ha/authenticator/ClusterSingleSignOn.java
+++ b/java/org/apache/catalina/ha/authenticator/ClusterSingleSignOn.java
@@ -81,6 +81,7 @@ public class ClusterSingleSignOn
     /**
      * Return descriptive information about this Valve implementation.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -111,6 +112,7 @@ public class ClusterSingleSignOn
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
      */
+    @Override
     public void start() throws LifecycleException {
 
 	super.start();
@@ -165,6 +167,7 @@ public class ClusterSingleSignOn
      * @exception LifecycleException if this component detects a fatal error
      *  that needs to be reported
      */
+    @Override
     public void stop() throws LifecycleException {
 
 	super.stop();
@@ -182,6 +185,7 @@ public class ClusterSingleSignOn
     /**
      * Return a String rendering of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("ClusterSingleSignOn[");
@@ -207,6 +211,7 @@ public class ClusterSingleSignOn
      * @param ssoId Single sign on identifier
      * @param session Session to be associated
      */
+    @Override
     protected void associate(String ssoId, Session session) {
 
 	if (cluster != null) {
@@ -246,6 +251,7 @@ public class ClusterSingleSignOn
      * @param ssoId Single sign on identifier
      * @param session Session to be deregistered
      */
+    @Override
     protected void deregister(String ssoId, Session session) {
 
 	if (cluster != null) {
@@ -283,6 +289,7 @@ public class ClusterSingleSignOn
      *
      * @param ssoId Single sign on identifier to deregister
      */
+    @Override
     protected void deregister(String ssoId) {
 
 	if (cluster != null) {
@@ -320,6 +327,7 @@ public class ClusterSingleSignOn
      * @param username Username used to authenticate this user
      * @param password Password used to authenticate this user
      */
+    @Override
     protected void register(String ssoId, Principal principal, String authType,
                   String username, String password) {
 
@@ -377,6 +385,7 @@ public class ClusterSingleSignOn
      * @param username  the username (if any) used for the authentication
      * @param password  the password (if any) used for the authentication
      */
+    @Override
     protected void update(String ssoId, Principal principal, String authType,
                           String username, String password) {
 
@@ -415,6 +424,7 @@ public class ClusterSingleSignOn
      * @param ssoId Single sign on identifier from which to remove the session.
      * @param session the session to be removed.
      */
+    @Override
     protected void removeSession(String ssoId, Session session) {
 
 	if (cluster != null) {

==================================================
SingleSignOnMessage.java
index 91044975a3..01891838f7 100644
--- a/java/org/apache/catalina/ha/authenticator/ClusterSingleSignOnListener.java
+++ b/java/org/apache/catalina/ha/authenticator/ClusterSingleSignOnListener.java
@@ -78,6 +78,7 @@ public class ClusterSingleSignOnListener extends ClusterListener {
      * @param myobj
      *            ClusterMessage - the message received from the cluster
      */
+    @Override
     public void messageReceived(ClusterMessage myobj) {
         if (myobj != null && myobj instanceof SingleSignOnMessage) {
             SingleSignOnMessage msg = (SingleSignOnMessage) myobj;
@@ -131,6 +132,7 @@ public class ClusterSingleSignOnListener extends ClusterListener {
      *         invoked. If false is returned, the messageReceived method will
      *         not be invoked.
      */
+    @Override
     public boolean accept(ClusterMessage msg) {
         return (msg instanceof SingleSignOnMessage);
     }

==================================================
ReplicatedContext.java
index db0edf390f..2a9bbcc131 100644
--- a/java/org/apache/catalina/ha/authenticator/SingleSignOnMessage.java
+++ b/java/org/apache/catalina/ha/authenticator/SingleSignOnMessage.java
@@ -175,6 +175,7 @@ public class SingleSignOnMessage implements ClusterMessage, Serializable {
     /**
      * Return a String rendering of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("SingleSignOnMessage[action=");

==================================================
FarmWarDeployer.java
index d993827ccc..424afefd65 100644
--- a/java/org/apache/catalina/ha/context/ReplicatedContext.java
+++ b/java/org/apache/catalina/ha/context/ReplicatedContext.java
@@ -113,6 +113,7 @@ public class ReplicatedContext extends StandardContext implements LifecycleListe
         }
     }
     
+    @Override
     public ServletContext getServletContext() {
         if (context == null) {
             context = new ReplApplContext(getBasePath(), this);
@@ -137,6 +138,7 @@ public class ReplicatedContext extends StandardContext implements LifecycleListe
             return (ReplicatedContext)getContext();
         }
         
+        @Override
         protected ServletContext getFacade() {
              return super.getFacade();
         }
@@ -148,12 +150,14 @@ public class ReplicatedContext extends StandardContext implements LifecycleListe
             this.attributes = map;
         }
         
+        @Override
         public void removeAttribute(String name) {
             tomcatAttributes.remove(name);
             //do nothing
             super.removeAttribute(name);
         }
         
+        @Override
         public void setAttribute(String name, Object value) {
             if ( (!getParent().startComplete) || "org.apache.jasper.runtime.JspApplicationContextImpl".equals(name) ){
                 tomcatAttributes.put(name,value);
@@ -161,6 +165,7 @@ public class ReplicatedContext extends StandardContext implements LifecycleListe
                 super.setAttribute(name,value);
         }
         
+        @Override
         public Object getAttribute(String name) {
             if (tomcatAttributes.containsKey(name) )
                 return tomcatAttributes.get(name);
@@ -168,6 +173,7 @@ public class ReplicatedContext extends StandardContext implements LifecycleListe
                 return super.getAttribute(name);
         }
         
+        @Override
         public Enumeration<String> getAttributeNames() {
             return new MultiEnumeration<String>(new Enumeration[] {super.getAttributeNames(),new Enumerator<String>(tomcatAttributes.keySet(), true)});
         }

==================================================
FileMessage.java
index 26bbd170bd..2b5f37c1f8 100644
--- a/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
+++ b/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
@@ -221,6 +221,7 @@ public class FarmWarDeployer extends ClusterListener implements ClusterDeployer,
      * @param msg
      *            ClusterMessage - the message received from the cluster
      */
+    @Override
     public void messageReceived(ClusterMessage msg) {
         try {
             if (msg instanceof FileMessage) {
@@ -330,6 +331,7 @@ public class FarmWarDeployer extends ClusterListener implements ClusterDeployer,
      *         invoked. If false is returned, the messageReceived method will
      *         not be invoked.
      */
+    @Override
     public boolean accept(ClusterMessage msg) {
         return (msg instanceof FileMessage) || (msg instanceof UndeployMessage);
     }
@@ -653,18 +655,22 @@ public class FarmWarDeployer extends ClusterListener implements ClusterDeployer,
     }
 
     /*--Instance Getters/Setters--------------------------------*/
+    @Override
     public CatalinaCluster getCluster() {
         return cluster;
     }
 
+    @Override
     public void setCluster(CatalinaCluster cluster) {
         this.cluster = cluster;
     }
 
+    @Override
     public boolean equals(Object listener) {
         return super.equals(listener);
     }
 
+    @Override
     public int hashCode() {
         return super.hashCode();
     }

==================================================
WarWatcher.java
index 381c676bbf..01ce00e57b 100644
--- a/java/org/apache/catalina/ha/deploy/FileMessage.java
+++ b/java/org/apache/catalina/ha/deploy/FileMessage.java
@@ -90,6 +90,7 @@ public class FileMessage extends ClusterMessageBase implements ClusterMessage, S
         this.totalLength = totalLength;
     }
 
+    @Override
     public String getUniqueId() {
         StringBuilder result = new StringBuilder(getFileName());
         result.append("#-#");

==================================================
BackupManager.java
index 6e6557fbdb..c662e4c519 100644
--- a/java/org/apache/catalina/ha/deploy/WarWatcher.java
+++ b/java/org/apache/catalina/ha/deploy/WarWatcher.java
@@ -219,10 +219,12 @@ public class WarWatcher {
             return war;
         }
 
+        @Override
         public int hashCode() {
             return war.getAbsolutePath().hashCode();
         }
 
+        @Override
         public boolean equals(Object other) {
             if (other instanceof WarInfo) {
                 WarInfo wo = (WarInfo) other;

==================================================
ClusterSessionListener.java
index 5a92fadc7e..e2d41ed3b5 100644
--- a/java/org/apache/catalina/ha/session/BackupManager.java
+++ b/java/org/apache/catalina/ha/session/BackupManager.java
@@ -121,6 +121,7 @@ public class BackupManager extends StandardManager implements ClusterManager, Ma
     /**
      * Override persistence since they don't go hand in hand with replication for now.
      */
+    @Override
     public void unload() throws IOException {
     }
     
@@ -145,6 +146,7 @@ public class BackupManager extends StandardManager implements ClusterManager, Ma
         }
     }
 
+    @Override
     public Session createEmptySession() {
         return new DeltaSession(this);
     }
@@ -173,6 +175,7 @@ public class BackupManager extends StandardManager implements ClusterManager, Ma
 
 
 
+    @Override
     public String getName() {
         return this.name;
     }
@@ -187,6 +190,7 @@ public class BackupManager extends StandardManager implements ClusterManager, Ma
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
      */
+    @Override
     public void start() throws LifecycleException {
         if ( this.started ) return;
         
@@ -224,6 +228,7 @@ public class BackupManager extends StandardManager implements ClusterManager, Ma
      * @exception LifecycleException if this component detects a fatal error
      *  that needs to be reported
      */
+    @Override
     public void stop() throws LifecycleException
     {
         
@@ -243,10 +248,12 @@ public class BackupManager extends StandardManager implements ClusterManager, Ma
 
     }
 
+    @Override
     public void setDistributable(boolean dist) {
         this.distributable = dist;
     }
 
+    @Override
     public boolean getDistributable() {
         return distributable;
     }

==================================================
DeltaManager.java
index 4f41da0db6..4e22b8ece3 100644
--- a/java/org/apache/catalina/ha/session/ClusterSessionListener.java
+++ b/java/org/apache/catalina/ha/session/ClusterSessionListener.java
@@ -58,6 +58,7 @@ public class ClusterSessionListener extends ClusterListener {
      * @param myobj
      *            ClusterMessage - the message received from the cluster
      */
+    @Override
     public void messageReceived(ClusterMessage myobj) {
         if (myobj != null && myobj instanceof SessionMessage) {
             SessionMessage msg = (SessionMessage) myobj;
@@ -100,6 +101,7 @@ public class ClusterSessionListener extends ClusterListener {
      *         invoked. If false is returned, the messageReceived method will
      *         not be invoked.
      */
+    @Override
     public boolean accept(ClusterMessage msg) {
         return (msg instanceof SessionMessage);
     }

==================================================
DeltaRequest.java
index de0be5449e..f3e9ee5d3b 100644
--- a/java/org/apache/catalina/ha/session/DeltaManager.java
+++ b/java/org/apache/catalina/ha/session/DeltaManager.java
@@ -162,6 +162,7 @@ public class DeltaManager extends ClusterManagerBase{
      * corresponding version number, in the format
      * <code>&lt;description&gt;/&lt;version&gt;</code>.
      */
+    @Override
     public String getInfo() {
         return info;
     }
@@ -173,6 +174,7 @@ public class DeltaManager extends ClusterManagerBase{
     /**
      * Return the descriptive short name of this Manager implementation.
      */
+    @Override
     public String getName() {
         return name;
     }
@@ -279,6 +281,7 @@ public class DeltaManager extends ClusterManagerBase{
     /**
      * @return Returns the processingTime.
      */
+    @Override
     public long getProcessingTime() {
         return processingTime;
     }
@@ -494,6 +497,7 @@ public class DeltaManager extends ClusterManagerBase{
      * @param container
      *            The associated Container
      */
+    @Override
     public void setContainer(Container container) {
         // De-register from the old Container (if any)
         if ((this.container != null) && (this.container instanceof Context))
@@ -531,6 +535,7 @@ public class DeltaManager extends ClusterManagerBase{
      * @exception IllegalStateException
      *                if a new session cannot be instantiated for any reason
      */
+    @Override
     public Session createSession(String sessionId) {
         return createSession(sessionId, true);
     }
@@ -594,6 +599,7 @@ public class DeltaManager extends ClusterManagerBase{
      * Create DeltaSession
      * @see org.apache.catalina.Manager#createEmptySession()
      */
+    @Override
     public Session createEmptySession() {
         return getNewDeltaSession() ;
     }

==================================================
DeltaSession.java
index 9f6d6a4b3b..48f5ca5984 100644
--- a/java/org/apache/catalina/ha/session/DeltaRequest.java
+++ b/java/org/apache/catalina/ha/session/DeltaRequest.java
@@ -328,6 +328,7 @@ public class DeltaRequest implements Externalizable {
         public Object getValue() {
             return value;
         }
+        @Override
         public int hashCode() {
             return name.hashCode();
         }
@@ -343,6 +344,7 @@ public class DeltaRequest implements Externalizable {
             action=-1;
         }
 
+        @Override
         public boolean equals(Object o) {
             if ( ! (o instanceof AttributeInfo ) ) return false;
             AttributeInfo other =  (AttributeInfo)o;
@@ -375,6 +377,7 @@ public class DeltaRequest implements Externalizable {
             if (getValue()!=null) out.writeObject(getValue());
         }
         
+        @Override
         public String toString() {
             StringBuilder buf = new StringBuilder("AttributeInfo[type=");
             buf.append(getType()).append(", action=").append(getAction());

==================================================
JvmRouteBinderValve.java
index 6643707981..c852e51fe5 100644
--- a/java/org/apache/catalina/ha/session/DeltaSession.java
+++ b/java/org/apache/catalina/ha/session/DeltaSession.java
@@ -255,12 +255,14 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
      * @param id
      *            The new session identifier
      */
+    @Override
     public void setId(String id) {
         super.setId(id);
         resetDeltaRequest();
     }
 
 
+    @Override
     public void setMaxInactiveInterval(int interval) {
         this.setMaxInactiveInterval(interval,true);
     }
@@ -288,6 +290,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
      * @param isNew
      *            The new value for the <code>isNew</code> flag
      */
+    @Override
     public void setNew(boolean isNew) {
         setNew(isNew, true);
     }
@@ -313,6 +316,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
      * @param principal
      *            The new Principal, or <code>null</code> if none
      */
+    @Override
     public void setPrincipal(Principal principal) {
         setPrincipal(principal, true);
     }
@@ -331,6 +335,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
     /**
      * Return the <code>isValid</code> flag for this session.
      */
+    @Override
     public boolean isValid() {
         if (this.expiring) {
             return true;
@@ -364,6 +369,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
     /**
      * End the access and register to ReplicationValve (crossContext support)
      */
+    @Override
     public void endAccess() {
     	super.endAccess() ;
     	if(manager instanceof DeltaManager) {
@@ -380,6 +386,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
      * @param notify
      *            Should we notify listeners about the demise of this session?
      */
+    @Override
     public void expire(boolean notify) {
         expire(notify, true);
     }
@@ -421,6 +428,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
      * Release all object references, and initialize instance variables, in
      * preparation for reuse of this object.
      */
+    @Override
     public void recycle() {
         try {
             lock();
@@ -435,6 +443,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
     /**
      * Return a string representation of this object.
      */
+    @Override
     public String toString() {
         StringBuilder sb = new StringBuilder();
         sb.append("DeltaSession[");
@@ -538,6 +547,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
      * @exception IllegalStateException
      *                if this method is called on an invalidated session
      */
+    @Override
     public void removeAttribute(String name, boolean notify) {
         removeAttribute(name, notify, true);
     }
@@ -567,6 +577,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
      * @exception IllegalStateException
      *                if this method is called on an invalidated session
      */
+    @Override
     public void setAttribute(String name, Object value) {
         setAttribute(name, value, true, true);
     }
@@ -691,6 +702,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
      * @exception IOException
      *                if an input/output error occurs
      */
+    @Override
     protected void writeObject(ObjectOutputStream stream) throws IOException {
         writeObject((ObjectOutput)stream);
     }

==================================================
JvmRouteSessionIDBinderListener.java
index 6077802d63..4f171dde58 100644
--- a/java/org/apache/catalina/ha/session/JvmRouteBinderValve.java
+++ b/java/org/apache/catalina/ha/session/JvmRouteBinderValve.java
@@ -152,6 +152,7 @@ public class JvmRouteBinderValve extends ValveBase implements ClusterValve, Life
     /**
      * Return descriptive information about this implementation.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -211,6 +212,7 @@ public class JvmRouteBinderValve extends ValveBase implements ClusterValve, Life
      * @exception ServletException
      *                if a servlet error has occurred
      */
+    @Override
     public void invoke(Request request, Response response) throws IOException,
             ServletException {
 

==================================================
ReplicatedSession.java
index 007579d5f7..b506895a6e 100644
--- a/java/org/apache/catalina/ha/session/JvmRouteSessionIDBinderListener.java
+++ b/java/org/apache/catalina/ha/session/JvmRouteSessionIDBinderListener.java
@@ -108,6 +108,7 @@ public class JvmRouteSessionIDBinderListener extends ClusterListener {
      * @param msg
      *            ClusterMessage - the message received from the cluster
      */
+    @Override
     public void messageReceived(ClusterMessage msg) {
         if (msg instanceof SessionIDMessage) {
             SessionIDMessage sessionmsg = (SessionIDMessage) msg;
@@ -160,6 +161,7 @@ public class JvmRouteSessionIDBinderListener extends ClusterListener {
      *         invoked. If false is returned, the messageReceived method will
      *         not be invoked.
      */
+    @Override
     public boolean accept(ClusterMessage msg) {
         return (msg instanceof SessionIDMessage);
     }

==================================================
SerializablePrincipal.java
index 1e2e0f7251..632668c492 100644
--- a/java/org/apache/catalina/ha/session/ReplicatedSession.java
+++ b/java/org/apache/catalina/ha/session/ReplicatedSession.java
@@ -81,6 +81,7 @@ implements org.apache.catalina.ha.ClusterSession{
     }
 
 
+    @Override
     public void removeAttribute(String name) {
         setIsDirty(true);
         super.removeAttribute(name);
@@ -90,6 +91,7 @@ implements org.apache.catalina.ha.ClusterSession{
      * see parent description,
      * plus we also notify other nodes in the cluster
      */
+    @Override
     public void removeAttribute(String name, boolean notify) {
         setIsDirty(true);
         super.removeAttribute(name,notify);
@@ -99,6 +101,7 @@ implements org.apache.catalina.ha.ClusterSession{
     /**
      * Sets an attribute and notifies the other nodes in the cluster
      */
+    @Override
     public void setAttribute(String name, Object value)
     {
         if ( value == null ) {
@@ -111,6 +114,7 @@ implements org.apache.catalina.ha.ClusterSession{
         super.setAttribute(name,value);
     }
 
+    @Override
     public void setMaxInactiveInterval(int interval) {
         setIsDirty(true);
         super.setMaxInactiveInterval(interval);
@@ -136,11 +140,13 @@ implements org.apache.catalina.ha.ClusterSession{
      *
      * @param principal The new Principal, or <code>null</code> if none
      */
+    @Override
     public void setPrincipal(Principal principal) {
         super.setPrincipal(principal);
         setIsDirty(true);
     }
 
+    @Override
     public void expire() {
         SimpleTcpReplicationManager mgr =(SimpleTcpReplicationManager)getManager();
         mgr.sessionInvalidated(getIdInternal());
@@ -148,6 +154,7 @@ implements org.apache.catalina.ha.ClusterSession{
         super.expire();
     }
 
+    @Override
     public void invalidate() {
         SimpleTcpReplicationManager mgr =(SimpleTcpReplicationManager)getManager();
         mgr.sessionInvalidated(getIdInternal());
@@ -166,6 +173,7 @@ implements org.apache.catalina.ha.ClusterSession{
      * @exception ClassNotFoundException if an unknown class is specified
      * @exception IOException if an input/output error occurs
      */
+    @Override
     public void readObjectData(ObjectInputStream stream)
         throws ClassNotFoundException, IOException {
 
@@ -183,6 +191,7 @@ implements org.apache.catalina.ha.ClusterSession{
      *
      * @exception IOException if an input/output error occurs
      */
+    @Override
     public void writeObjectData(ObjectOutputStream stream)
         throws IOException {
 
@@ -252,6 +261,7 @@ implements org.apache.catalina.ha.ClusterSession{
 
     }
 
+    @Override
     public String toString() {
         StringBuilder buf = new StringBuilder("ReplicatedSession id=");
         buf.append(getIdInternal()).append(" ref=").append(super.toString()).append("\n");
@@ -270,12 +280,14 @@ implements org.apache.catalina.ha.ClusterSession{
     public void setAccessCount(int accessCount) {
         this.accessCount.set(accessCount);
     }
+    @Override
     public long getLastAccessedTime() {
         return lastAccessedTime;
     }
     public void setLastAccessedTime(long lastAccessedTime) {
         this.lastAccessedTime = lastAccessedTime;
     }
+    @Override
     public long getThisAccessedTime() {
         return thisAccessedTime;
     }

==================================================
SessionIDMessage.java
index f2258cee1d..a32b1b4d9c 100644
--- a/java/org/apache/catalina/ha/session/SerializablePrincipal.java
+++ b/java/org/apache/catalina/ha/session/SerializablePrincipal.java
@@ -181,6 +181,7 @@ public class SerializablePrincipal  implements java.io.Serializable {
      * Return a String representation of this object, which exposes only
      * information that should be public.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("SerializablePrincipal[");

==================================================
SessionMessageImpl.java
index 5f1c41a4fc..f698c2b71a 100644
--- a/java/org/apache/catalina/ha/session/SessionIDMessage.java
+++ b/java/org/apache/catalina/ha/session/SessionIDMessage.java
@@ -37,7 +37,8 @@ public class SessionIDMessage extends ClusterMessageBase implements ClusterMessa
 	private String host ;
 	private String contextPath;
 
-	public String getUniqueId() {
+	@Override
+    public String getUniqueId() {
 		StringBuilder result = new StringBuilder(getOrignalSessionID());
 		result.append("#-#");
 		result.append(getHost());
@@ -122,7 +123,8 @@ public class SessionIDMessage extends ClusterMessageBase implements ClusterMessa
 		this.orignalSessionID = orignalSessionID;
 	}
 
-	public String toString() {
+	@Override
+    public String toString() {
 	    return "SESSIONID-UPDATE#" + getHost() + "." + getContextPath() + "#" + getOrignalSessionID() + ":" + getBackupSessionID();
 	}
 

==================================================
SimpleTcpReplicationManager.java
index 8f03abbc28..fc07532a9f 100644
--- a/java/org/apache/catalina/ha/session/SessionMessageImpl.java
+++ b/java/org/apache/catalina/ha/session/SessionMessageImpl.java
@@ -113,6 +113,7 @@ public class SessionMessageImpl extends ClusterMessageBase implements SessionMes
     /**
      * set message send time but only the first setting works (one shot)
      */
+    @Override
     public void setTimestamp(long time) {
         synchronized(this) {
             if(!timestampSet) {
@@ -122,6 +123,7 @@ public class SessionMessageImpl extends ClusterMessageBase implements SessionMes
         }
     }
     
+    @Override
     public long getTimestamp() { return serializationTimestamp;}
     
     /**
@@ -146,13 +148,16 @@ public class SessionMessageImpl extends ClusterMessageBase implements SessionMes
     public String getContextName() {
        return mContextName;
     }
+    @Override
     public String getUniqueId() {
         return uniqueId;
     }
+    @Override
     public void setUniqueId(String uniqueId) {
         this.uniqueId = uniqueId;
     }
     
+    @Override
     public String toString() {
         return getEventTypeString() + "#" + getContextName() + "#" + getSessionID() ;
     }

==================================================
ReplicationValve.java
index 32c925ae3a..bd8cc89a8a 100644
--- a/java/org/apache/catalina/ha/session/SimpleTcpReplicationManager.java
+++ b/java/org/apache/catalina/ha/session/SimpleTcpReplicationManager.java
@@ -179,6 +179,7 @@ public class SimpleTcpReplicationManager extends StandardManager implements Clus
     /**
      * Override persistence since they don't go hand in hand with replication for now.
      */
+    @Override
     public void unload() throws IOException {
         if ( !getDistributable() ) {
             super.unload();
@@ -238,6 +239,7 @@ public class SimpleTcpReplicationManager extends StandardManager implements Clus
      * @exception IllegalStateException if a new session cannot be
      *  instantiated for any reason
      */
+    @Override
     public Session createSession(String sessionId)
     {
         //create a session and notify the other nodes in the cluster
@@ -459,6 +461,7 @@ public class SimpleTcpReplicationManager extends StandardManager implements Clus
         return null;
     }
 
+    @Override
     public String getName() {
         return this.name;
     }
@@ -473,6 +476,7 @@ public class SimpleTcpReplicationManager extends StandardManager implements Clus
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
      */
+    @Override
     public void start() throws LifecycleException {
         mManagerRunning = true;
         super.start();
@@ -535,6 +539,7 @@ public class SimpleTcpReplicationManager extends StandardManager implements Clus
      * @exception LifecycleException if this component detects a fatal error
      *  that needs to be reported
      */
+    @Override
     public void stop() throws LifecycleException
     {
         mManagerRunning = false;
@@ -551,10 +556,12 @@ public class SimpleTcpReplicationManager extends StandardManager implements Clus
         }
     }
 
+    @Override
     public void setDistributable(boolean dist) {
         this.distributable = dist;
     }
 
+    @Override
     public boolean getDistributable() {
         return distributable;
     }

==================================================
WebappLoader.java
index b746198685..ebbc575882 100644
--- a/java/org/apache/catalina/ha/tcp/ReplicationValve.java
+++ b/java/org/apache/catalina/ha/tcp/ReplicationValve.java
@@ -131,6 +131,7 @@ public class ReplicationValve
     /**
      * Return descriptive information about this Valve implementation.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -323,6 +324,7 @@ public class ReplicationValve
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet error occurs
      */
+    @Override
     public void invoke(Request request, Response response)
         throws IOException, ServletException
     {
@@ -398,6 +400,7 @@ public class ReplicationValve
     /**
      * Return a String rendering of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("ReplicationValve[");

==================================================
HTMLManagerServlet.java
index 9db9a14684..371d628401 100644
--- a/java/org/apache/catalina/loader/WebappLoader.java
+++ b/java/org/apache/catalina/loader/WebappLoader.java
@@ -503,6 +503,7 @@ public class WebappLoader
     /**
      * Return a String representation of this component.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("WebappLoader[");

==================================================
JMXProxyServlet.java
index 93568aeddb..8ba3bc74fd 100644
--- a/java/org/apache/catalina/manager/HTMLManagerServlet.java
+++ b/java/org/apache/catalina/manager/HTMLManagerServlet.java
@@ -109,6 +109,7 @@ public final class HTMLManagerServlet extends ManagerServlet {
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet-specified error occurs
      */
+    @Override
     public void doGet(HttpServletRequest request,
                       HttpServletResponse response)
         throws IOException, ServletException {
@@ -161,6 +162,7 @@ public final class HTMLManagerServlet extends ManagerServlet {
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet-specified error occurs
      */
+    @Override
     public void doPost(HttpServletRequest request,
                       HttpServletResponse response)
         throws IOException, ServletException {
@@ -729,6 +731,7 @@ public final class HTMLManagerServlet extends ManagerServlet {
     /**
      * @see javax.servlet.Servlet#getServletInfo()
      */
+    @Override
     public String getServletInfo() {
         return "HTMLManagerServlet, Copyright (c) The Apache Software Foundation";
     }   
@@ -736,6 +739,7 @@ public final class HTMLManagerServlet extends ManagerServlet {
     /**
      * @see javax.servlet.GenericServlet#init()
      */
+    @Override
     public void init() throws ServletException {
         super.init();
     }   
@@ -986,60 +990,70 @@ public final class HTMLManagerServlet extends ManagerServlet {
         Comparator<Session> comparator = null;
         if ("CreationTime".equalsIgnoreCase(sortBy)) {
             comparator = new BaseSessionComparator<Date>() {
+                @Override
                 public Comparable<Date> getComparableObject(Session session) {
                     return new Date(session.getCreationTime());
                 }
             };
         } else if ("id".equalsIgnoreCase(sortBy)) {
             comparator = new BaseSessionComparator<String>() {
+                @Override
                 public Comparable<String> getComparableObject(Session session) {
                     return session.getId();
                 }
             };
         } else if ("LastAccessedTime".equalsIgnoreCase(sortBy)) {
             comparator = new BaseSessionComparator<Date>() {
+                @Override
                 public Comparable<Date> getComparableObject(Session session) {
                     return new Date(session.getLastAccessedTime());
                 }
             };
         } else if ("MaxInactiveInterval".equalsIgnoreCase(sortBy)) {
             comparator = new BaseSessionComparator<Date>() {
+                @Override
                 public Comparable<Date> getComparableObject(Session session) {
                     return new Date(session.getMaxInactiveInterval());
                 }
             };
         } else if ("new".equalsIgnoreCase(sortBy)) {
             comparator = new BaseSessionComparator<Boolean>() {
+                @Override
                 public Comparable<Boolean> getComparableObject(Session session) {
                     return Boolean.valueOf(session.getSession().isNew());
                 }
             };
         } else if ("locale".equalsIgnoreCase(sortBy)) {
             comparator = new BaseSessionComparator<String>() {
+                @Override
                 public Comparable<String> getComparableObject(Session session) {
                     return JspHelper.guessDisplayLocaleFromSession(session);
                 }
             };
         } else if ("user".equalsIgnoreCase(sortBy)) {
             comparator = new BaseSessionComparator<String>() {
+                @Override
                 public Comparable<String> getComparableObject(Session session) {
                     return JspHelper.guessDisplayUserFromSession(session);
                 }
             };
         } else if ("UsedTime".equalsIgnoreCase(sortBy)) {
             comparator = new BaseSessionComparator<Date>() {
+                @Override
                 public Comparable<Date> getComparableObject(Session session) {
                     return new Date(SessionUtils.getUsedTimeForSession(session));
                 }
             };
         } else if ("InactiveTime".equalsIgnoreCase(sortBy)) {
             comparator = new BaseSessionComparator<Date>() {
+                @Override
                 public Comparable<Date> getComparableObject(Session session) {
                     return new Date(SessionUtils.getInactiveTimeForSession(session));
                 }
             };
         } else if ("TTL".equalsIgnoreCase(sortBy)) {
             comparator = new BaseSessionComparator<Date>() {
+                @Override
                 public Comparable<Date> getComparableObject(Session session) {
                     return new Date(SessionUtils.getTTLForSession(session));
                 }

==================================================
ManagerServlet.java
index 1c0d5b1401..69965f021e 100644
--- a/java/org/apache/catalina/manager/JMXProxyServlet.java
+++ b/java/org/apache/catalina/manager/JMXProxyServlet.java
@@ -55,6 +55,7 @@ public class JMXProxyServlet extends HttpServlet  {
     /**
      * Initialize this servlet.
      */
+    @Override
     public void init() throws ServletException {
         // Retrieve the MBean server
         registry = Registry.getRegistry(null, null);
@@ -71,6 +72,7 @@ public class JMXProxyServlet extends HttpServlet  {
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet-specified error occurs
      */
+    @Override
     public void doGet(HttpServletRequest request,
                       HttpServletResponse response)
         throws IOException, ServletException

==================================================
StatusManagerServlet.java
index fab9c4e2e7..643ac26278 100644
--- a/java/org/apache/catalina/manager/ManagerServlet.java
+++ b/java/org/apache/catalina/manager/ManagerServlet.java
@@ -292,6 +292,7 @@ public class ManagerServlet
     /**
      * Finalize this servlet.
      */
+    @Override
     public void destroy() {
 
         // No actions necessary
@@ -308,6 +309,7 @@ public class ManagerServlet
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet-specified error occurs
      */
+    @Override
     public void doGet(HttpServletRequest request,
                       HttpServletResponse response)
         throws IOException, ServletException {
@@ -389,6 +391,7 @@ public class ManagerServlet
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet-specified error occurs
      */
+    @Override
     public void doPut(HttpServletRequest request,
                       HttpServletResponse response)
         throws IOException, ServletException {
@@ -429,6 +432,7 @@ public class ManagerServlet
     /**
      * Initialize this servlet.
      */
+    @Override
     public void init() throws ServletException {
 
         // Ensure that our ContainerServlet properties have been set

==================================================
HTMLHostManagerServlet.java
index de6fa44315..a1fcec1b4a 100644
--- a/java/org/apache/catalina/manager/StatusManagerServlet.java
+++ b/java/org/apache/catalina/manager/StatusManagerServlet.java
@@ -98,6 +98,7 @@ public class StatusManagerServlet
     /**
      * Initialize this servlet.
      */
+    @Override
     public void init() throws ServletException {
 
         // Retrieve the MBean server
@@ -160,6 +161,7 @@ public class StatusManagerServlet
     /**
      * Finalize this servlet.
      */
+    @Override
     public void destroy() {
 
         // No actions necessary
@@ -176,6 +178,7 @@ public class StatusManagerServlet
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet-specified error occurs
      */
+    @Override
     public void doGet(HttpServletRequest request,
                       HttpServletResponse response)
         throws IOException, ServletException {

==================================================
HostManagerServlet.java
index dc4756840c..cf304e4527 100644
--- a/java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java
+++ b/java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java
@@ -82,6 +82,7 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet-specified error occurs
      */
+    @Override
     public void doGet(HttpServletRequest request,
                       HttpServletResponse response)
         throws IOException, ServletException {

==================================================
ClassNameMBean.java
index cbd677edf3..4bff73c0dd 100644
--- a/java/org/apache/catalina/manager/host/HostManagerServlet.java
+++ b/java/org/apache/catalina/manager/host/HostManagerServlet.java
@@ -191,6 +191,7 @@ public class HostManagerServlet
     /**
      * Finalize this servlet.
      */
+    @Override
     public void destroy() {
 
         // No actions necessary
@@ -207,6 +208,7 @@ public class HostManagerServlet
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet-specified error occurs
      */
+    @Override
     public void doGet(HttpServletRequest request,
                       HttpServletResponse response)
         throws IOException, ServletException {
@@ -307,6 +309,7 @@ public class HostManagerServlet
     /**
      * Initialize this servlet.
      */
+    @Override
     public void init() throws ServletException {
 
         // Ensure that our ContainerServlet properties have been set

==================================================
ConnectorMBean.java
index 8cab9de747..b36d8a8b99 100644
--- a/java/org/apache/catalina/mbeans/ClassNameMBean.java
+++ b/java/org/apache/catalina/mbeans/ClassNameMBean.java
@@ -67,7 +67,8 @@ public class ClassNameMBean extends BaseModelMBean {
       * Return the fully qualified Java class name of the managed object
       * for this MBean.
       */
-     public String getClassName() {
+     @Override
+    public String getClassName() {
 
          return (this.resource.getClass().getName());
 

==================================================
ContextEnvironmentMBean.java
index 74ce1894b3..1c36a2f828 100644
--- a/java/org/apache/catalina/mbeans/ConnectorMBean.java
+++ b/java/org/apache/catalina/mbeans/ConnectorMBean.java
@@ -75,6 +75,7 @@ public class ConnectorMBean extends ClassNameMBean {
      * @exception ReflectionException if a Java reflection exception
      *  occurs when invoking the getter
      */
+    @Override
     public Object getAttribute(String name) throws AttributeNotFoundException,
             MBeanException, ReflectionException {
 
@@ -111,7 +112,8 @@ public class ConnectorMBean extends ClassNameMBean {
      * @exception ReflectionException if a Java reflection exception
      *  occurs when invoking the getter
      */
-     public void setAttribute(Attribute attribute)
+     @Override
+    public void setAttribute(Attribute attribute)
             throws AttributeNotFoundException, MBeanException,
             ReflectionException {
 

==================================================
ContextResourceLinkMBean.java
index e5825ff31f..dd72e53a1b 100644
--- a/java/org/apache/catalina/mbeans/ContextEnvironmentMBean.java
+++ b/java/org/apache/catalina/mbeans/ContextEnvironmentMBean.java
@@ -81,7 +81,8 @@ public class ContextEnvironmentMBean extends BaseModelMBean {
      * @exception ReflectionException if a Java reflection exception
      *  occurs when invoking the getter
      */
-     public void setAttribute(Attribute attribute)
+     @Override
+    public void setAttribute(Attribute attribute)
         throws AttributeNotFoundException, MBeanException,
         ReflectionException {
 

==================================================
ContextResourceMBean.java
index 3449a6b2ba..66ed03fbaf 100644
--- a/java/org/apache/catalina/mbeans/ContextResourceLinkMBean.java
+++ b/java/org/apache/catalina/mbeans/ContextResourceLinkMBean.java
@@ -81,7 +81,8 @@ public class ContextResourceLinkMBean extends BaseModelMBean {
      * @exception ReflectionException if a Java reflection exception
      *  occurs when invoking the getter
      */
-     public void setAttribute(Attribute attribute)
+     @Override
+    public void setAttribute(Attribute attribute)
         throws AttributeNotFoundException, MBeanException,
         ReflectionException {
 

==================================================
CombinedRealm.java
index 8329e71386..1101a56f08 100644
--- a/java/org/apache/catalina/mbeans/ContextResourceMBean.java
+++ b/java/org/apache/catalina/mbeans/ContextResourceMBean.java
@@ -80,6 +80,7 @@ public class ContextResourceMBean extends BaseModelMBean {
      * @exception ReflectionException if a Java reflection exception
      *  occurs when invoking the getter
      */
+    @Override
     public Object getAttribute(String name)
         throws AttributeNotFoundException, MBeanException,
         ReflectionException {
@@ -136,7 +137,8 @@ public class ContextResourceMBean extends BaseModelMBean {
      * @exception ReflectionException if a Java reflection exception
      *  occurs when invoking the getter
      */
-     public void setAttribute(Attribute attribute)
+     @Override
+    public void setAttribute(Attribute attribute)
         throws AttributeNotFoundException, MBeanException,
         ReflectionException {
 

==================================================
DataSourceRealm.java
index bbcbbf71a2..998d9b0bc0 100644
--- a/java/org/apache/catalina/realm/CombinedRealm.java
+++ b/java/org/apache/catalina/realm/CombinedRealm.java
@@ -92,6 +92,7 @@ public class CombinedRealm extends RealmBase {
      * @param credentials Password or other credentials to use in
      *  authenticating this username
      */
+    @Override
     public Principal authenticate(String username, byte[] credentials) {
         Principal authenticatedUser = null;
         
@@ -130,6 +131,7 @@ public class CombinedRealm extends RealmBase {
      * @param md5a2 Second MD5 digest used to calculate the digest :
      * MD5(Method + ":" + uri)
      */
+    @Override
     public Principal authenticate(String username, String clientDigest,
             String once, String nc, String cnonce, String qop,
             String realmName, String md5a2) {
@@ -166,6 +168,7 @@ public class CombinedRealm extends RealmBase {
      * @param credentials Password or other credentials to use in
      *  authenticating this username
      */
+    @Override
     public Principal authenticate(String username, String credentials) {
         Principal authenticatedUser = null;
         
@@ -196,6 +199,7 @@ public class CombinedRealm extends RealmBase {
      *
      * @param container The associated Container
      */
+    @Override
     public void setContainer(Container container) {
         for(Realm realm : realms) {
             // Set the realmPath for JMX naming
@@ -220,6 +224,7 @@ public class CombinedRealm extends RealmBase {
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
      */
+    @Override
     public void start() throws LifecycleException {
         // Start 'sub-realms' then this one
         for (Realm realm : realms) {
@@ -240,7 +245,8 @@ public class CombinedRealm extends RealmBase {
      * @exception LifecycleException if this component detects a fatal error
      *  that needs to be reported
      */
-     public void stop() throws LifecycleException {
+     @Override
+    public void stop() throws LifecycleException {
         // Stop this realm, then the sub-realms (reverse order to start)
         super.stop();
         for (Realm realm : realms) {
@@ -258,6 +264,7 @@ public class CombinedRealm extends RealmBase {
      * @param certs Array of client certificates, with the first one in
      *  the array being the certificate of the client itself.
      */
+    @Override
     public Principal authenticate(X509Certificate[] certs) {
         Principal authenticatedUser = null;
         String username = null;

==================================================
GenericPrincipal.java
index 6a05831c0a..eb5dd2584d 100644
--- a/java/org/apache/catalina/realm/DataSourceRealm.java
+++ b/java/org/apache/catalina/realm/DataSourceRealm.java
@@ -267,6 +267,7 @@ public class DataSourceRealm
      * @param credentials Password or other credentials to use in
      *  authenticating this username
      */
+    @Override
     public Principal authenticate(String username, String credentials) {
     	
     	// No user or no credentials
@@ -400,6 +401,7 @@ public class DataSourceRealm
     /**
      * Return a short name for this Realm implementation.
      */
+    @Override
     protected String getName() {
 
         return (name);
@@ -409,6 +411,7 @@ public class DataSourceRealm
     /**
      * Return the password associated with the given principal's user name.
      */
+    @Override
     protected String getPassword(String username) {
 
         Connection dbConnection = null;
@@ -474,6 +477,7 @@ public class DataSourceRealm
     /**
      * Return the Principal associated with the given user name.
      */
+    @Override
     protected Principal getPrincipal(String username) {
     	Connection dbConnection = open();
         if (dbConnection == null) {
@@ -607,6 +611,7 @@ public class DataSourceRealm
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents it from being started
      */
+    @Override
     public void start() throws LifecycleException {
 
         // Perform normal superclass initialization
@@ -640,6 +645,7 @@ public class DataSourceRealm
      * @exception LifecycleException if this component detects a fatal error
      *  that needs to be reported
      */
+    @Override
     public void stop() throws LifecycleException {
 
         // Perform normal superclass finalization

==================================================
JAASMemoryLoginModule.java
index a28df51105..6e6a368847 100644
--- a/java/org/apache/catalina/realm/GenericPrincipal.java
+++ b/java/org/apache/catalina/realm/GenericPrincipal.java
@@ -189,6 +189,7 @@ public class GenericPrincipal implements Principal {
      * Return a String representation of this object, which exposes only
      * information that should be public.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("GenericPrincipal[");

==================================================
JAASRealm.java
index 9f1ff32df8..0daa56bcee 100644
--- a/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
+++ b/java/org/apache/catalina/realm/JAASMemoryLoginModule.java
@@ -216,6 +216,7 @@ public class JAASMemoryLoginModule extends MemoryRealm implements LoginModule {
      * @param request Request we are processing
      * @param context Context the Request is mapped to
      */
+    @Override
     public SecurityConstraint [] findSecurityConstraints(Request request,
                                                      Context context) {
         ArrayList<SecurityConstraint> results = null;

==================================================
JDBCRealm.java
index d75de1dd84..0c573ffd66 100644
--- a/java/org/apache/catalina/realm/JAASRealm.java
+++ b/java/org/apache/catalina/realm/JAASRealm.java
@@ -220,6 +220,7 @@ public class JAASRealm
         return useContextClassLoader;
     } 
 
+    @Override
     public void setContainer(Container container) {
         super.setContainer(container);
 
@@ -320,6 +321,7 @@ public class JAASRealm
      * @param credentials Password or other credentials to use in
      *  authenticating this username
      */
+    @Override
     public Principal authenticate(String username, String credentials) {
         return authenticate(username,
                 new JAASCallbackHandler(this, username, credentials));
@@ -340,6 +342,7 @@ public class JAASRealm
      * @param md5a2         Second MD5 digest used to calculate the digest
      *                          MD5(Method + ":" + uri)
      */
+    @Override
     public Principal authenticate(String username, String clientDigest,
             String nonce, String nc, String cnonce, String qop,
             String realmName, String md5a2) {
@@ -446,6 +449,7 @@ public class JAASRealm
     /**
      * Return a short name for this <code>Realm</code> implementation.
      */
+    @Override
     protected String getName() {
 
         return (name);
@@ -458,6 +462,7 @@ public class JAASRealm
      * always returns null as the JAASRealm has no way of obtaining this
      * information.
      */
+    @Override
     protected String getPassword(String username) {
 
         return (null);
@@ -468,6 +473,7 @@ public class JAASRealm
     /**
      * Return the <code>Principal</code> associated with the given user name.
      */
+    @Override
     protected Principal getPrincipal(String username) {
 
         return authenticate(username,
@@ -580,6 +586,7 @@ public class JAASRealm
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents it from being started
      */
+    @Override
     public void start() throws LifecycleException {
 
         // Perform normal superclass initialization
@@ -598,6 +605,7 @@ public class JAASRealm
      * @exception LifecycleException if this component detects a fatal error
      *  that needs to be reported
      */
+    @Override
     public void stop() throws LifecycleException {
 
         // Perform normal superclass finalization

==================================================
JNDIRealm.java
index 9fb54b50f6..cf935eb466 100644
--- a/java/org/apache/catalina/realm/JDBCRealm.java
+++ b/java/org/apache/catalina/realm/JDBCRealm.java
@@ -329,6 +329,7 @@ public class JDBCRealm
      * @param credentials Password or other credentials to use in
      *  authenticating this username
      */
+    @Override
     public synchronized Principal authenticate(String username, String credentials) {
 
         // Number of tries is the numebr of attempts to connect to the database
@@ -513,6 +514,7 @@ public class JDBCRealm
     /**
      * Return a short name for this Realm implementation.
      */
+    @Override
     protected String getName() {
 
         return (name);
@@ -523,6 +525,7 @@ public class JDBCRealm
     /**
      * Return the password associated with the given principal's user name.
      */
+    @Override
     protected synchronized String getPassword(String username) {
 
         // Look up the user's credentials
@@ -593,6 +596,7 @@ public class JDBCRealm
     /**
      * Return the Principal associated with the given user name.
      */
+    @Override
     protected synchronized Principal getPrincipal(String username) {
 
         return (new GenericPrincipal(username,
@@ -763,6 +767,7 @@ public class JDBCRealm
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents it from being started
      */
+    @Override
     public void start() throws LifecycleException {
 
         // Perform normal superclass initialization
@@ -785,6 +790,7 @@ public class JDBCRealm
      * @exception LifecycleException if this component detects a fatal error
      *  that needs to be reported
      */
+    @Override
     public void stop() throws LifecycleException {
 
         // Perform normal superclass finalization

==================================================
LockOutRealm.java
index c35c863a13..96ecdc9121 100644
--- a/java/org/apache/catalina/realm/JNDIRealm.java
+++ b/java/org/apache/catalina/realm/JNDIRealm.java
@@ -886,6 +886,7 @@ public class JNDIRealm extends RealmBase {
      * @param credentials Password or other credentials to use in
      *  authenticating this username
      */
+    @Override
     public Principal authenticate(String username, String credentials) {
 
         DirContext context = null;
@@ -1782,6 +1783,7 @@ public class JNDIRealm extends RealmBase {
     /**
      * Return a short name for this Realm implementation.
      */
+    @Override
     protected String getName() {
 
         return (name);
@@ -1792,6 +1794,7 @@ public class JNDIRealm extends RealmBase {
     /**
      * Return the password associated with the given principal's user name.
      */
+    @Override
     protected String getPassword(String username) {
 
         return (null);
@@ -1801,6 +1804,7 @@ public class JNDIRealm extends RealmBase {
     /**
      * Return the Principal associated with the given user name.
      */
+    @Override
     protected Principal getPrincipal(String username) {
 
         DirContext context = null;
@@ -1985,6 +1989,7 @@ public class JNDIRealm extends RealmBase {
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents it from being started
      */
+    @Override
     public void start() throws LifecycleException {
 
         // Perform normal superclass initialization
@@ -2006,6 +2011,7 @@ public class JNDIRealm extends RealmBase {
      * @exception LifecycleException if this component detects a fatal error
      *  that needs to be reported
      */
+    @Override
     public void stop() throws LifecycleException {
 
         // Perform normal superclass finalization

==================================================
MemoryRealm.java
index 8ee69d2dc8..c2492bf354 100644
--- a/java/org/apache/catalina/realm/LockOutRealm.java
+++ b/java/org/apache/catalina/realm/LockOutRealm.java
@@ -85,11 +85,13 @@ public class LockOutRealm extends CombinedRealm {
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
      */
+    @Override
     public void start() throws LifecycleException {
         // Configure the list of failed users to delete the oldest entry once it
         // exceeds the specified size
         failedUsers = new LinkedHashMap<String, LockRecord>(cacheSize, 0.75f,
                 true) {
+            @Override
             protected boolean removeEldestEntry(
                     Map.Entry<String, LockRecord> eldest) {
                 if (size() > cacheSize) {
@@ -119,6 +121,7 @@ public class LockOutRealm extends CombinedRealm {
      * @param credentials Password or other credentials to use in
      *  authenticating this username
      */
+    @Override
     public Principal authenticate(String username, byte[] credentials) {
         if (isLocked(username)) {
             // Trying to authenticate a locked user is an automatic failure
@@ -152,6 +155,7 @@ public class LockOutRealm extends CombinedRealm {
      * @param md5a2 Second MD5 digest used to calculate the digest :
      * MD5(Method + ":" + uri)
      */
+    @Override
     public Principal authenticate(String username, String clientDigest,
             String once, String nc, String cnonce, String qop,
             String realmName, String md5a2) {
@@ -184,6 +188,7 @@ public class LockOutRealm extends CombinedRealm {
      * @param credentials Password or other credentials to use in
      *  authenticating this username
      */
+    @Override
     public Principal authenticate(String username, String credentials) {
         if (isLocked(username)) {
             // Trying to authenticate a locked user is an automatic failure
@@ -211,6 +216,7 @@ public class LockOutRealm extends CombinedRealm {
      * @param certs Array of client certificates, with the first one in
      *  the array being the certificate of the client itself.
      */
+    @Override
     public Principal authenticate(X509Certificate[] certs) {
         String username = null;
         if (certs != null && certs.length >0) {

==================================================
MemoryRuleSet.java
index 507be9788f..3d4987b284 100644
--- a/java/org/apache/catalina/realm/MemoryRealm.java
+++ b/java/org/apache/catalina/realm/MemoryRealm.java
@@ -101,6 +101,7 @@ public class MemoryRealm  extends RealmBase {
      * the corresponding version number, in the format
      * <code>&lt;description&gt;/&lt;version&gt;</code>.
      */
+    @Override
     public String getInfo() {
 
         return info;
@@ -142,6 +143,7 @@ public class MemoryRealm  extends RealmBase {
      * @param credentials Password or other credentials to use in
      *  authenticating this username
      */
+    @Override
     public Principal authenticate(String username, String credentials) {
 
         GenericPrincipal principal = principals.get(username);
@@ -232,6 +234,7 @@ public class MemoryRealm  extends RealmBase {
     /**
      * Return a short name for this Realm implementation.
      */
+    @Override
     protected String getName() {
 
         return (name);
@@ -242,6 +245,7 @@ public class MemoryRealm  extends RealmBase {
     /**
      * Return the password associated with the given principal's user name.
      */
+    @Override
     protected String getPassword(String username) {
 
         GenericPrincipal principal = principals.get(username);
@@ -257,6 +261,7 @@ public class MemoryRealm  extends RealmBase {
     /**
      * Return the Principal associated with the given user name.
      */
+    @Override
     protected Principal getPrincipal(String username) {
 
         return principals.get(username);
@@ -282,6 +287,7 @@ public class MemoryRealm  extends RealmBase {
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents it from being started
      */
+    @Override
     public synchronized void start() throws LifecycleException {
 
         // Perform normal superclass initialization
@@ -322,6 +328,7 @@ public class MemoryRealm  extends RealmBase {
      * @exception LifecycleException if this component detects a fatal error
      *  that needs to be reported
      */
+    @Override
     public synchronized void stop() throws LifecycleException {
 
         // Perform normal superclass finalization

==================================================
RealmBase.java
index 35d436e145..66cba134e6 100644
--- a/java/org/apache/catalina/realm/MemoryRuleSet.java
+++ b/java/org/apache/catalina/realm/MemoryRuleSet.java
@@ -87,6 +87,7 @@ public class MemoryRuleSet extends RuleSetBase {
      * @param digester Digester instance to which the new Rule instances
      *  should be added.
      */
+    @Override
     public void addRuleInstances(Digester digester) {
 
         digester.addRule(prefix + "user", new MemoryUserRule());
@@ -116,6 +117,7 @@ final class MemoryUserRule extends Rule {
      *
      * @param attributes The attribute list for this element
      */
+    @Override
     public void begin(String namespace, String name, Attributes attributes)
         throws Exception {
 

==================================================
UserDatabaseRealm.java
index e2970b1d6e..a99dc20079 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -1463,6 +1463,7 @@ public abstract class RealmBase
             this.name = name;
         }
         
+        @Override
         public boolean equals(Object o)
         {
             boolean equals = false;
@@ -1473,10 +1474,12 @@ public abstract class RealmBase
             }
             return equals;
         }
+        @Override
         public int hashCode()
         {
             return name.hashCode();
         }
+        @Override
         public String toString()
         {
             return name;

==================================================
CGIServlet.java
index c9db3ea590..1e050a19b4 100644
--- a/java/org/apache/catalina/realm/UserDatabaseRealm.java
+++ b/java/org/apache/catalina/realm/UserDatabaseRealm.java
@@ -96,6 +96,7 @@ public class UserDatabaseRealm
      * the corresponding version number, in the format
      * <code>&lt;description&gt;/&lt;version&gt;</code>.
      */
+    @Override
     public String getInfo() {
 
         return info;
@@ -140,6 +141,7 @@ public class UserDatabaseRealm
      * @param principal Principal for whom the role is to be checked
      * @param role Security role to be checked
      */
+    @Override
     public boolean hasRole(Principal principal, String role) {
         if( principal instanceof GenericPrincipal) {
             GenericPrincipal gp = (GenericPrincipal)principal;
@@ -180,6 +182,7 @@ public class UserDatabaseRealm
     /**
      * Return a short name for this Realm implementation.
      */
+    @Override
     protected String getName() {
 
         return (name);
@@ -190,6 +193,7 @@ public class UserDatabaseRealm
     /**
      * Return the password associated with the given principal's user name.
      */
+    @Override
     protected String getPassword(String username) {
 
         User user = database.findUser(username);
@@ -206,6 +210,7 @@ public class UserDatabaseRealm
     /**
      * Return the Principal associated with the given user name.
      */
+    @Override
     protected Principal getPrincipal(String username) {
 
         User user = database.findUser(username);
@@ -241,6 +246,7 @@ public class UserDatabaseRealm
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents it from being started
      */
+    @Override
     public synchronized void start() throws LifecycleException {
 
         // Perform normal superclass initialization
@@ -270,6 +276,7 @@ public class UserDatabaseRealm
      * @exception LifecycleException if this component detects a fatal error
      *  that needs to be reported
      */
+    @Override
     public synchronized void stop() throws LifecycleException {
 
         // Perform normal superclass finalization

==================================================
DefaultServlet.java
index 3841341a59..a4c1cacc39 100644
--- a/java/org/apache/catalina/servlets/CGIServlet.java
+++ b/java/org/apache/catalina/servlets/CGIServlet.java
@@ -283,6 +283,7 @@ public final class CGIServlet extends HttpServlet {
      *                                  interferes with the servlet's normal
      *                                  operation
      */
+    @Override
     public void init(ServletConfig config) throws ServletException {
 
         super.init(config);
@@ -529,6 +530,7 @@ public final class CGIServlet extends HttpServlet {
      * @see javax.servlet.http.HttpServlet
      *
      */
+    @Override
     protected void doPost(HttpServletRequest req, HttpServletResponse res)
         throws IOException, ServletException {
         doGet(req, res);
@@ -548,6 +550,7 @@ public final class CGIServlet extends HttpServlet {
      * @see javax.servlet.http.HttpServlet
      *
      */
+    @Override
     protected void doGet(HttpServletRequest req, HttpServletResponse res)
         throws ServletException, IOException {
 
@@ -1168,6 +1171,7 @@ public final class CGIServlet extends HttpServlet {
          * @return  HTML string containing CGI environment info
          *
          */
+        @Override
         public String toString() {
 
             StringBuilder sb = new StringBuilder();
@@ -1638,6 +1642,7 @@ public final class CGIServlet extends HttpServlet {
                 final BufferedReader stdErrRdr = commandsStdErr ;
 
                 new Thread() {
+                    @Override
                     public void run () {
                         sendToLog(stdErrRdr) ;
                     }
@@ -1849,6 +1854,7 @@ public final class CGIServlet extends HttpServlet {
         /**
          * @see java.io.InputStream#read()
          */
+        @Override
         public int read() throws IOException {
             if (state == STATE_HEADER_END) {
                 return -1;

==================================================
WebdavServlet.java
index 2fd6265074..18ac133726 100644
--- a/java/org/apache/catalina/servlets/DefaultServlet.java
+++ b/java/org/apache/catalina/servlets/DefaultServlet.java
@@ -213,6 +213,7 @@ public class DefaultServlet
     /**
      * Finalize this servlet.
      */
+    @Override
     public void destroy() {
         // NOOP
     }
@@ -221,6 +222,7 @@ public class DefaultServlet
     /**
      * Initialize this servlet.
      */
+    @Override
     public void init() throws ServletException {
 
         if (getServletConfig().getInitParameter("debug") != null)
@@ -326,6 +328,7 @@ public class DefaultServlet
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet-specified error occurs
      */
+    @Override
     protected void doGet(HttpServletRequest request,
                          HttpServletResponse response)
         throws IOException, ServletException {
@@ -345,6 +348,7 @@ public class DefaultServlet
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet-specified error occurs
      */
+    @Override
     protected void doHead(HttpServletRequest request,
                           HttpServletResponse response)
         throws IOException, ServletException {
@@ -374,6 +378,7 @@ public class DefaultServlet
      * @exception ServletException  if the request for the
      *                                  OPTIONS cannot be handled
      */
+    @Override
     protected void doOptions(HttpServletRequest req, HttpServletResponse resp)
         throws ServletException, IOException {
 
@@ -407,6 +412,7 @@ public class DefaultServlet
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet-specified error occurs
      */
+    @Override
     protected void doPost(HttpServletRequest request,
                           HttpServletResponse response)
         throws IOException, ServletException {
@@ -423,6 +429,7 @@ public class DefaultServlet
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet-specified error occurs
      */
+    @Override
     protected void doPut(HttpServletRequest req, HttpServletResponse resp)
         throws ServletException, IOException {
 
@@ -562,6 +569,7 @@ public class DefaultServlet
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet-specified error occurs
      */
+    @Override
     protected void doDelete(HttpServletRequest req, HttpServletResponse resp)
         throws ServletException, IOException {
 

==================================================
FileStore.java
index c8a3ed2835..5d1f54d6f5 100644
--- a/java/org/apache/catalina/servlets/WebdavServlet.java
+++ b/java/org/apache/catalina/servlets/WebdavServlet.java
@@ -258,6 +258,7 @@ public class WebdavServlet
     /**
      * Initialize this servlet.
      */
+    @Override
     public void init()
         throws ServletException {
 
@@ -308,6 +309,7 @@ public class WebdavServlet
     /**
      * Handles the special WebDAV methods.
      */
+    @Override
     protected void service(HttpServletRequest req, HttpServletResponse resp)
         throws ServletException, IOException {
 
@@ -351,6 +353,7 @@ public class WebdavServlet
      * and false if any of the conditions is not satisfied, in which case
      * request processing is stopped
      */
+    @Override
     protected boolean checkIfHeaders(HttpServletRequest request,
                                      HttpServletResponse response,
                                      ResourceAttributes resourceAttributes)
@@ -373,6 +376,7 @@ public class WebdavServlet
      *
      * @param request The servlet request we are processing
      */
+    @Override
     protected String getRelativePath(HttpServletRequest request) {
         // Are we being processed by a RequestDispatcher.include()?
         if (request.getAttribute(Globals.INCLUDE_REQUEST_URI_ATTR) != null) {
@@ -401,6 +405,7 @@ public class WebdavServlet
      * @throws ServletException If an error occurs
      * @throws IOException If an IO error occurs
      */
+    @Override
     protected void doOptions(HttpServletRequest req, HttpServletResponse resp)
         throws ServletException, IOException {
 
@@ -776,6 +781,7 @@ public class WebdavServlet
     /**
      * DELETE Method.
      */
+    @Override
     protected void doDelete(HttpServletRequest req, HttpServletResponse resp)
         throws ServletException, IOException {
 
@@ -803,6 +809,7 @@ public class WebdavServlet
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet-specified error occurs
      */
+    @Override
     protected void doPut(HttpServletRequest req, HttpServletResponse resp)
         throws ServletException, IOException {
 
@@ -2699,6 +2706,7 @@ public class WebdavServlet
         /**
          * Get a String representation of this lock token.
          */
+        @Override
         public String toString() {
 
             String result =  "Type:" + type + "\n";

==================================================
JDBCStore.java
index 02f00636b7..6eafdfb3d9 100644
--- a/java/org/apache/catalina/session/FileStore.java
+++ b/java/org/apache/catalina/session/FileStore.java
@@ -127,6 +127,7 @@ public final class FileStore extends StoreBase {
      * the corresponding version number, in the format
      * <code>&lt;description&gt;/&lt;version&gt;</code>.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -143,6 +144,7 @@ public final class FileStore extends StoreBase {
     /**
      * Return the name for this Store, used for logging.
      */
+    @Override
     public String getStoreName() {
         return(storeName);
     }

==================================================
PersistentManager.java
index c32e356ad9..f9e0c53ada 100644
--- a/java/org/apache/catalina/session/JDBCStore.java
+++ b/java/org/apache/catalina/session/JDBCStore.java
@@ -174,6 +174,7 @@ public class JDBCStore extends StoreBase {
     /**
      * Return the info for this Store.
      */
+    @Override
     public String getInfo() {
         return (info);
     }
@@ -210,6 +211,7 @@ public class JDBCStore extends StoreBase {
     /**
      * Return the name for this Store, used for logging.
      */
+    @Override
     public String getStoreName() {
         return (storeName);
     }
@@ -959,6 +961,7 @@ public class JDBCStore extends StoreBase {
     /**
      * Called once when this Store is first started.
      */
+    @Override
     public void start() throws LifecycleException {
         super.start();
 
@@ -971,6 +974,7 @@ public class JDBCStore extends StoreBase {
      * Called once when this Store is stopping.
      *
      */
+    @Override
     public void stop() throws LifecycleException {
         super.stop();
 

==================================================
PersistentManagerBase.java
index 0959c7d1dc..52933ad68d 100644
--- a/java/org/apache/catalina/session/PersistentManager.java
+++ b/java/org/apache/catalina/session/PersistentManager.java
@@ -59,6 +59,7 @@ public final class PersistentManager extends PersistentManagerBase {
      * the corresponding version number, in the format
      * <code>&lt;description&gt;/&lt;version&gt;</code>.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -68,6 +69,7 @@ public final class PersistentManager extends PersistentManagerBase {
     /**
      * Return the descriptive short name of this Manager implementation.
      */
+    @Override
     public String getName() {
 
         return (name);

==================================================
StandardManager.java
index 4aa4526e7c..7f476d963d 100644
--- a/java/org/apache/catalina/session/PersistentManagerBase.java
+++ b/java/org/apache/catalina/session/PersistentManagerBase.java
@@ -324,6 +324,7 @@ public abstract class PersistentManagerBase
 	 * @param container
 	 *            The associated Container
 	 */
+    @Override
     public void setContainer(Container container) {
 
         // De-register from the old Container (if any)
@@ -348,6 +349,7 @@ public abstract class PersistentManagerBase
      * the corresponding version number, in the format
      * <code>&lt;description&gt;/&lt;version&gt;</code>.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -417,6 +419,7 @@ public abstract class PersistentManagerBase
     /**
      * Return the descriptive short name of this Manager implementation.
      */
+    @Override
     public String getName() {
 
         return (name);
@@ -537,7 +540,8 @@ public abstract class PersistentManagerBase
     /**
      * Implements the Manager interface, direct call to processExpires and processPersistenceChecks
      */
-	public void processExpires() {
+	@Override
+    public void processExpires() {
 		
         long timeNow = System.currentTimeMillis();
         Session sessions[] = findSessions();
@@ -589,6 +593,7 @@ public abstract class PersistentManagerBase
      * @exception IOException if an input/output error occurs while
      *  processing this request
      */
+    @Override
     public Session findSession(String id) throws IOException {
 
         Session session = super.findSession(id);
@@ -689,6 +694,7 @@ public abstract class PersistentManagerBase
      *
      * @param session Session to be removed
      */
+    @Override
     public void remove(Session session) {
 
         super.remove (session);

==================================================
StandardSession.java
index f2156aee30..a8f3ea1fe1 100644
--- a/java/org/apache/catalina/session/StandardManager.java
+++ b/java/org/apache/catalina/session/StandardManager.java
@@ -160,6 +160,7 @@ public class StandardManager
      *
      * @param container The associated Container
      */
+    @Override
     public void setContainer(Container container) {
 
         // De-register from the old Container (if any)
@@ -184,6 +185,7 @@ public class StandardManager
      * the corresponding version number, in the format
      * <code>&lt;description&gt;/&lt;version&gt;</code>.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -236,6 +238,7 @@ public class StandardManager
     /**
      * Return the descriptive short name of this Manager implementation.
      */
+    @Override
     public String getName() {
 
         return (name);
@@ -280,6 +283,7 @@ public class StandardManager
      * @exception IllegalStateException if a new session cannot be
      *  instantiated for any reason
      */
+    @Override
     public Session createSession(String sessionId) {
 
         if ((maxActiveSessions >= 0) &&

==================================================
ByteArrayServletOutputStream.java
index 22ec479adc..9a8196b735 100644
--- a/java/org/apache/catalina/session/StandardSession.java
+++ b/java/org/apache/catalina/session/StandardSession.java
@@ -941,6 +941,7 @@ public class StandardSession
     /**
      * Return a string representation of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder();

==================================================
ExpressionParseTree.java
index f16c335ebc..83d4feb023 100644
--- a/java/org/apache/catalina/ssi/ByteArrayServletOutputStream.java
+++ b/java/org/apache/catalina/ssi/ByteArrayServletOutputStream.java
@@ -57,6 +57,7 @@ public class ByteArrayServletOutputStream extends ServletOutputStream {
      *
      * @param b The parameter to write
      */
+    @Override
     public void write(int b) {
         buf.write(b);
     }

==================================================
ResponseIncludeWrapper.java
index 0b9d599425..7133e4cd00 100644
--- a/java/org/apache/catalina/ssi/ExpressionParseTree.java
+++ b/java/org/apache/catalina/ssi/ExpressionParseTree.java
@@ -233,11 +233,13 @@ public class ExpressionParseTree {
         /**
          * Returns true if the string is not empty.
          */
+        @Override
         public boolean evaluate() {
             return !(getValue().length() == 0);
         }
 
 
+        @Override
         public String toString() {
             return value.toString();
         }
@@ -278,11 +280,13 @@ public class ExpressionParseTree {
         }
     }
     private final class NotNode extends OppNode {
+        @Override
         public boolean evaluate() {
             return !left.evaluate();
         }
 
 
+        @Override
         public int getPrecedence() {
             return PRECEDENCE_NOT;
         }
@@ -291,16 +295,19 @@ public class ExpressionParseTree {
         /**
          * Overridden to pop only one value.
          */
+        @Override
         public void popValues(List<Node> values) {
             left = values.remove(0);
         }
 
 
+        @Override
         public String toString() {
             return left + " NOT";
         }
     }
     private final class AndNode extends OppNode {
+        @Override
         public boolean evaluate() {
             if (!left.evaluate()) // Short circuit
                 return false;
@@ -308,16 +315,19 @@ public class ExpressionParseTree {
         }
 
 
+        @Override
         public int getPrecedence() {
             return PRECEDENCE_LOGICAL;
         }
 
 
+        @Override
         public String toString() {
             return left + " " + right + " AND";
         }
     }
     private final class OrNode extends OppNode {
+        @Override
         public boolean evaluate() {
             if (left.evaluate()) // Short circuit
                 return true;
@@ -325,11 +335,13 @@ public class ExpressionParseTree {
         }
 
 
+        @Override
         public int getPrecedence() {
             return PRECEDENCE_LOGICAL;
         }
 
 
+        @Override
         public String toString() {
             return left + " " + right + " OR";
         }
@@ -342,46 +354,55 @@ public class ExpressionParseTree {
         }
     }
     private final class EqualNode extends CompareNode {
+        @Override
         public boolean evaluate() {
             return (compareBranches() == 0);
         }
 
 
+        @Override
         public int getPrecedence() {
             return PRECEDENCE_COMPARE;
         }
 
 
+        @Override
         public String toString() {
             return left + " " + right + " EQ";
         }
     }
     private final class GreaterThanNode extends CompareNode {
+        @Override
         public boolean evaluate() {
             return (compareBranches() > 0);
         }
 
 
+        @Override
         public int getPrecedence() {
             return PRECEDENCE_COMPARE;
         }
 
 
+        @Override
         public String toString() {
             return left + " " + right + " GT";
         }
     }
     private final class LessThanNode extends CompareNode {
+        @Override
         public boolean evaluate() {
             return (compareBranches() < 0);
         }
 
 
+        @Override
         public int getPrecedence() {
             return PRECEDENCE_COMPARE;
         }
 
 
+        @Override
         public String toString() {
             return left + " " + right + " LT";
         }

==================================================
SSIServlet.java
index eee984c77d..f466d491fc 100644
--- a/java/org/apache/catalina/ssi/ResponseIncludeWrapper.java
+++ b/java/org/apache/catalina/ssi/ResponseIncludeWrapper.java
@@ -108,6 +108,7 @@ public class ResponseIncludeWrapper extends HttpServletResponseWrapper {
      * @exception java.io.IOException
      *                if the outputstream already been called
      */
+    @Override
     public PrintWriter getWriter() throws java.io.IOException {
         if (servletOutputStream == null) {
             if (printWriter == null) {
@@ -130,6 +131,7 @@ public class ResponseIncludeWrapper extends HttpServletResponseWrapper {
      * @exception java.io.IOException
      *                if the printwriter already been called
      */
+    @Override
     public ServletOutputStream getOutputStream() throws java.io.IOException {
         if (printWriter == null) {
             if (servletOutputStream == null) {
@@ -175,6 +177,7 @@ public class ResponseIncludeWrapper extends HttpServletResponseWrapper {
      * @return the content type of the resource referenced by this
      *   <code>ResponseIncludeWrapper</code>, or <code>null</code> if not known.
      */
+    @Override
     public String getContentType() {
         if (contentType == null) {
             String url = request.getRequestURI();
@@ -197,6 +200,7 @@ public class ResponseIncludeWrapper extends HttpServletResponseWrapper {
      *
      * @param mime a mime type
      */
+    @Override
     public void setContentType(String mime) {
         contentType = mime;
         if (contentType != null) {
@@ -205,6 +209,7 @@ public class ResponseIncludeWrapper extends HttpServletResponseWrapper {
     }
 
 
+    @Override
     public void addDateHeader(String name, long value) {
         super.addDateHeader(name, value);
         String lname = name.toLowerCase();
@@ -213,6 +218,7 @@ public class ResponseIncludeWrapper extends HttpServletResponseWrapper {
         }
     }
 
+    @Override
     public void addHeader(String name, String value) {
         super.addHeader(name, value);
         String lname = name.toLowerCase();
@@ -229,6 +235,7 @@ public class ResponseIncludeWrapper extends HttpServletResponseWrapper {
         }
     }
 
+    @Override
     public void setDateHeader(String name, long value) {
         super.setDateHeader(name, value);
         String lname = name.toLowerCase();
@@ -237,6 +244,7 @@ public class ResponseIncludeWrapper extends HttpServletResponseWrapper {
         }
     }
 
+    @Override
     public void setHeader(String name, String value) {
         super.setHeader(name, value);
         String lname = name.toLowerCase();

==================================================
Catalina.java
index b718e3134a..b0558e11b8 100644
--- a/java/org/apache/catalina/ssi/SSIServlet.java
+++ b/java/org/apache/catalina/ssi/SSIServlet.java
@@ -63,6 +63,7 @@ public class SSIServlet extends HttpServlet {
      * @exception ServletException
      *                if an error occurs
      */
+    @Override
     public void init() throws ServletException {
         
         if (getServletConfig().getInitParameter("debug") != null)
@@ -99,6 +100,7 @@ public class SSIServlet extends HttpServlet {
      * @exception ServletException
      *                if an error occurs
      */
+    @Override
     public void doGet(HttpServletRequest req, HttpServletResponse res)
             throws IOException, ServletException {
         if (debug > 0) log("SSIServlet.doGet()");
@@ -119,6 +121,7 @@ public class SSIServlet extends HttpServlet {
      * @exception ServletException
      *                if an error occurs
      */
+    @Override
     public void doPost(HttpServletRequest req, HttpServletResponse res)
             throws IOException, ServletException {
         if (debug > 0) log("SSIServlet.doPost()");

==================================================
ClusterRuleSetFactory.java
index dc9e7738bb..083b9b611c 100644
--- a/java/org/apache/catalina/startup/Catalina.java
+++ b/java/org/apache/catalina/startup/Catalina.java
@@ -155,6 +155,7 @@ public class Catalina extends Embedded {
      *
      * @param server The new server
      */
+    @Override
     public void setServer(Server server) {
 
         this.server = server;
@@ -569,6 +570,7 @@ public class Catalina extends Embedded {
 
     }
 
+    @Override
     public void destroy() {
 
     }
@@ -576,6 +578,7 @@ public class Catalina extends Embedded {
     /**
      * Start a new server instance.
      */
+    @Override
     public void start() {
 
         if (server == null) {
@@ -621,6 +624,7 @@ public class Catalina extends Embedded {
     /**
      * Stop an existing server instance.
      */
+    @Override
     public void stop() {
 
         try {
@@ -678,6 +682,7 @@ public class Catalina extends Embedded {
      */
     protected class CatalinaShutdownHook extends Thread {
 
+        @Override
         public void run() {
 
             if (server != null) {
@@ -713,6 +718,7 @@ final class SetParentClassLoaderRule extends Rule {
 
     ClassLoader parentClassLoader = null;
 
+    @Override
     public void begin(String namespace, String name, Attributes attributes)
         throws Exception {
 

==================================================
ConnectorCreateRule.java
index 7d78cc0159..37b69d408b 100644
--- a/java/org/apache/catalina/startup/ClusterRuleSetFactory.java
+++ b/java/org/apache/catalina/startup/ClusterRuleSetFactory.java
@@ -140,6 +140,7 @@ public class ClusterRuleSetFactory {
          * @param digester Digester instance to which the new Rule instances
          *  should be added.
          */
+        @Override
         public void addRuleInstances(Digester digester) {
             //Cluster configuration start
             digester.addObjectCreate(prefix + "Membership",

==================================================
ContextRuleSet.java
index 936ee46101..05d3c02141 100644
--- a/java/org/apache/catalina/startup/ConnectorCreateRule.java
+++ b/java/org/apache/catalina/startup/ConnectorCreateRule.java
@@ -51,6 +51,7 @@ public class ConnectorCreateRule extends Rule {
      *   the element name otherwise
      * @param attributes The attribute list for this element
      */
+    @Override
     public void begin(String namespace, String name, Attributes attributes)
             throws Exception {
         Service svc = (Service)digester.peek();
@@ -83,6 +84,7 @@ public class ConnectorCreateRule extends Rule {
      * @param name the local name if the parser is namespace aware, or just 
      *   the element name otherwise
      */
+    @Override
     public void end(String namespace, String name) throws Exception {
         digester.pop();
     }

==================================================
CopyParentClassLoaderRule.java
index b37cd5344e..a44ce9325c 100644
--- a/java/org/apache/catalina/startup/ContextRuleSet.java
+++ b/java/org/apache/catalina/startup/ContextRuleSet.java
@@ -108,6 +108,7 @@ public class ContextRuleSet extends RuleSetBase {
      * @param digester Digester instance to which the new Rule instances
      *  should be added.
      */
+    @Override
     public void addRuleInstances(Digester digester) {
 
         if (create) {

==================================================
Embedded.java
index 7804608631..18d396050e 100644
--- a/java/org/apache/catalina/startup/CopyParentClassLoaderRule.java
+++ b/java/org/apache/catalina/startup/CopyParentClassLoaderRule.java
@@ -58,6 +58,7 @@ public class CopyParentClassLoaderRule extends Rule {
      *
      * @exception Exception if a processing error occurs
      */
+    @Override
     public void begin(String namespace, String name, Attributes attributes)
         throws Exception {
 

==================================================
EngineRuleSet.java
index 270ff11149..9349b8aae6 100644
--- a/java/org/apache/catalina/startup/Embedded.java
+++ b/java/org/apache/catalina/startup/Embedded.java
@@ -309,6 +309,7 @@ public class Embedded  extends StandardService {
      *
      * @exception IllegalStateException if no engines have been added yet
      */
+    @Override
     public synchronized void addConnector(Connector connector) {
 
         if( log.isDebugEnabled() ) {
@@ -576,6 +577,7 @@ public class Embedded  extends StandardService {
      * the corresponding version number, in the format
      * <code>&lt;description&gt;/&lt;version&gt;</code>.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -762,6 +764,7 @@ public class Embedded  extends StandardService {
      *
      * @param listener The listener to add
      */
+    @Override
     public void addLifecycleListener(LifecycleListener listener) {
 
         lifecycle.addLifecycleListener(listener);
@@ -773,6 +776,7 @@ public class Embedded  extends StandardService {
      * Get the lifecycle listeners associated with this lifecycle. If this 
      * Lifecycle has no listeners registered, a zero-length array is returned.
      */
+    @Override
     public LifecycleListener[] findLifecycleListeners() {
 
         return lifecycle.findLifecycleListeners();
@@ -785,6 +789,7 @@ public class Embedded  extends StandardService {
      *
      * @param listener The listener to remove
      */
+    @Override
     public void removeLifecycleListener(LifecycleListener listener) {
 
         lifecycle.removeLifecycleListener(listener);
@@ -800,6 +805,7 @@ public class Embedded  extends StandardService {
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
      */
+    @Override
     public void start() throws LifecycleException {
 
         if( log.isInfoEnabled() )
@@ -842,6 +848,7 @@ public class Embedded  extends StandardService {
      * @exception LifecycleException if this component detects a fatal error
      *  that needs to be reported
      */
+    @Override
     public void stop() throws LifecycleException {
 
         if( log.isDebugEnabled() )

==================================================
HostRuleSet.java
index c33cc1dad7..66dff68ad7 100644
--- a/java/org/apache/catalina/startup/EngineRuleSet.java
+++ b/java/org/apache/catalina/startup/EngineRuleSet.java
@@ -87,6 +87,7 @@ public class EngineRuleSet extends RuleSetBase {
      * @param digester Digester instance to which the new Rule instances
      *  should be added.
      */
+    @Override
     public void addRuleInstances(Digester digester) {
         
         digester.addObjectCreate(prefix + "Engine",

==================================================
LifecycleListenerRule.java
index 542e8c46e8..450aa52c89 100644
--- a/java/org/apache/catalina/startup/HostRuleSet.java
+++ b/java/org/apache/catalina/startup/HostRuleSet.java
@@ -87,6 +87,7 @@ public class HostRuleSet extends RuleSetBase {
      * @param digester Digester instance to which the new Rule instances
      *  should be added.
      */
+    @Override
     public void addRuleInstances(Digester digester) {
 
         digester.addObjectCreate(prefix + "Host",

==================================================
NamingRuleSet.java
index 250df97cb6..be4b1b068f 100644
--- a/java/org/apache/catalina/startup/LifecycleListenerRule.java
+++ b/java/org/apache/catalina/startup/LifecycleListenerRule.java
@@ -79,6 +79,7 @@ public class LifecycleListenerRule extends Rule {
      *
      * @exception Exception if a processing error occurs
      */
+    @Override
     public void begin(String namespace, String name, Attributes attributes)
         throws Exception {
 

==================================================
RealmRuleSet.java
index 91810b0939..12f7ca6266 100644
--- a/java/org/apache/catalina/startup/NamingRuleSet.java
+++ b/java/org/apache/catalina/startup/NamingRuleSet.java
@@ -86,6 +86,7 @@ public class NamingRuleSet extends RuleSetBase {
      * @param digester Digester instance to which the new Rule instances
      *  should be added.
      */
+    @Override
     public void addRuleInstances(Digester digester) {
 
         digester.addObjectCreate(prefix + "Ejb",

==================================================
SetAllPropertiesRule.java
index 81ce3bc2bb..e110053211 100644
--- a/java/org/apache/catalina/startup/RealmRuleSet.java
+++ b/java/org/apache/catalina/startup/RealmRuleSet.java
@@ -85,6 +85,7 @@ public class RealmRuleSet extends RuleSetBase {
      * @param digester Digester instance to which the new Rule instances
      *  should be added.
      */
+    @Override
     public void addRuleInstances(Digester digester) {
 
         digester.addObjectCreate(prefix + "Realm",

==================================================
SetContextPropertiesRule.java
index b0518b5100..a87c1adf0e 100644
--- a/java/org/apache/catalina/startup/SetAllPropertiesRule.java
+++ b/java/org/apache/catalina/startup/SetAllPropertiesRule.java
@@ -53,6 +53,7 @@ public class SetAllPropertiesRule extends Rule {
      *
      * @exception Exception if a processing error occurs
      */
+    @Override
     public void begin(String namespace, String nameX, Attributes attributes)
         throws Exception {
 

==================================================
SetNextNamingRule.java
index c9b3094f5a..5e044f25a8 100644
--- a/java/org/apache/catalina/startup/SetContextPropertiesRule.java
+++ b/java/org/apache/catalina/startup/SetContextPropertiesRule.java
@@ -48,6 +48,7 @@ public class SetContextPropertiesRule extends Rule {
      *
      * @exception Exception if a processing error occurs
      */
+    @Override
     public void begin(String namespace, String nameX, Attributes attributes)
         throws Exception {
 

==================================================
TldRuleSet.java
index 091f898d5f..f28034bc8e 100644
--- a/java/org/apache/catalina/startup/SetNextNamingRule.java
+++ b/java/org/apache/catalina/startup/SetNextNamingRule.java
@@ -87,6 +87,7 @@ public class SetNextNamingRule extends Rule {
      * @param name the local name if the parser is namespace aware, or just 
      *   the element name otherwise
      */
+    @Override
     public void end(String namespace, String name) throws Exception {
 
         // Identify the objects to be used
@@ -110,6 +111,7 @@ public class SetNextNamingRule extends Rule {
     /**
      * Render a printable version of this Rule.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("SetNextRule[");

==================================================
Tomcat.java
index 5405558d4f..45003be493 100644
--- a/java/org/apache/catalina/startup/TldRuleSet.java
+++ b/java/org/apache/catalina/startup/TldRuleSet.java
@@ -86,6 +86,7 @@ public class TldRuleSet extends RuleSetBase {
      * @param digester Digester instance to which the new Rule instances
      *  should be added.
      */
+    @Override
     public void addRuleInstances(Digester digester) {
 
         // Note the sharing of state between rules
@@ -113,6 +114,7 @@ final class TaglibRule extends Rule {
         this.taglibUriRule = taglibUriRule;
     }
     
+    @Override
     public void body(String namespace, String name, String text)
     throws Exception {
         taglibUriRule.setDuplicateUri(false);

==================================================
WebRuleSet.java
index 14ba59dae6..8992ade74f 100644
--- a/java/org/apache/catalina/startup/Tomcat.java
+++ b/java/org/apache/catalina/startup/Tomcat.java
@@ -697,6 +697,7 @@ public class Tomcat {
         public ExistingStandardWrapper( Servlet existing ) {
             this.existing = existing;
         }
+        @Override
         public synchronized Servlet loadServlet() throws ServletException {
             if (!init) {
                 existing.init(facade);
@@ -705,9 +706,11 @@ public class Tomcat {
             return existing;
 
         }
+        @Override
         public long getAvailable() {
             return 0;
         }
+        @Override
         public boolean isUnavailable() {
             return false;       
         }

==================================================
ChannelException.java
index d7b1c96e15..6214688480 100644
--- a/java/org/apache/catalina/startup/WebRuleSet.java
+++ b/java/org/apache/catalina/startup/WebRuleSet.java
@@ -150,6 +150,7 @@ public class WebRuleSet extends RuleSetBase {
      * @param digester Digester instance to which the new Rule instances
      *  should be added.
      */
+    @Override
     public void addRuleInstances(Digester digester) {
         sessionConfig = new SetSessionConfig();
         jspConfig = new SetJspConfig();
@@ -619,6 +620,7 @@ final class SetLoginConfig extends Rule {
     public SetLoginConfig() {
     }
 
+    @Override
     public void begin(String namespace, String name, Attributes attributes)
         throws Exception {
         if (isLoginConfigSet){
@@ -640,6 +642,7 @@ final class SetJspConfig extends Rule {
     public SetJspConfig() {
     }
 
+    @Override
     public void begin(String namespace, String name, Attributes attributes)
         throws Exception {
         if (isJspConfigSet){
@@ -661,6 +664,7 @@ final class SetSessionConfig extends Rule {
     public SetSessionConfig() {
     }
 
+    @Override
     public void begin(String namespace, String name, Attributes attributes)
         throws Exception {
         if (isSessionConfigSet){
@@ -683,6 +687,7 @@ final class SetAuthConstraintRule extends Rule {
     public SetAuthConstraintRule() {
     }
 
+    @Override
     public void begin(String namespace, String name, Attributes attributes)
         throws Exception {
         SecurityConstraint securityConstraint =
@@ -707,6 +712,7 @@ final class SetDistributableRule extends Rule {
     public SetDistributableRule() {
     }
 
+    @Override
     public void begin(String namespace, String name, Attributes attributes)
         throws Exception {
         WebXml webXml = (WebXml) digester.peek();
@@ -733,6 +739,7 @@ final class SetPublicIdRule extends Rule {
 
     private String method = null;
 
+    @Override
     public void begin(String namespace, String name, Attributes attributes)
         throws Exception {
 
@@ -771,6 +778,7 @@ final class ServletDefCreateRule extends Rule {
     public ServletDefCreateRule() {
     }
 
+    @Override
     public void begin(String namespace, String name, Attributes attributes)
         throws Exception {
         ServletDef servletDef = new ServletDef();
@@ -779,6 +787,7 @@ final class ServletDefCreateRule extends Rule {
             digester.getLogger().debug("new " + servletDef.getClass().getName());
     }
 
+    @Override
     public void end(String namespace, String name)
         throws Exception {
         ServletDef servletDef = (ServletDef) digester.pop();
@@ -799,6 +808,7 @@ final class CallParamMultiRule extends CallParamRule {
         super(paramIndex);
     }
 
+    @Override
     public void end(String namespace, String name) {
         if (bodyTextStack != null && !bodyTextStack.empty()) {
             // what we do now is push one parameter onto the top set of parameters
@@ -837,6 +847,7 @@ final class CallMethodMultiRule extends CallMethodRule {
      * @param name the local name if the parser is namespace aware, or just 
      *   the element name otherwise
      */
+    @Override
     public void end(String namespace, String name) throws Exception {
 
         // Retrieve or construct the parameter values array
@@ -924,6 +935,7 @@ final class IgnoreAnnotationsRule extends Rule {
     public IgnoreAnnotationsRule() {
     }
 
+    @Override
     public void begin(String namespace, String name, Attributes attributes)
         throws Exception {
         WebXml webxml = (WebXml) digester.peek(digester.getCount() - 1);
@@ -948,6 +960,7 @@ final class AbsoluteOrderingRule extends Rule {
     public AbsoluteOrderingRule() {
     }
     
+    @Override
     public void begin(String namespace, String name, Attributes attributes)
             throws Exception {
         digester.getLogger().warn(
@@ -963,6 +976,7 @@ final class RelativeOrderingRule extends Rule {
     public RelativeOrderingRule() {
     }
     
+    @Override
     public void begin(String namespace, String name, Attributes attributes)
             throws Exception {
         digester.getLogger().warn(
@@ -989,6 +1003,7 @@ final class SoapHeaderRule extends Rule {
      *   the element name otherwise
      * @param bodyText The body text of this element
      */
+    @Override
     public void body(String namespace, String name, String text)
             throws Exception {
         String namespaceuri = null;
@@ -1023,6 +1038,7 @@ final class ServiceQnameRule extends Rule {
      *   the element name otherwise
      * @param bodyText The body text of this element
      */
+    @Override
     public void body(String namespace, String name, String text)
             throws Exception {
         String namespaceuri = null;

==================================================
UniqueId.java
index 940cdb3fa7..fc77471118 100644
--- a/java/org/apache/catalina/tribes/ChannelException.java
+++ b/java/org/apache/catalina/tribes/ChannelException.java
@@ -80,6 +80,7 @@ public class ChannelException extends Exception {
      * @return String
      * @see java.lang.Exception#getMessage()
      */
+    @Override
     public String getMessage() {
         StringBuilder buf = new StringBuilder(super.getMessage());
         if (faultyMembers==null || faultyMembers.size() == 0 ) {
@@ -161,14 +162,17 @@ public class ChannelException extends Exception {
             return cause;
         }
         
+        @Override
         public String toString() {
             return "FaultyMember:"+member.toString();
         }
         
+        @Override
         public int hashCode() {
             return (member!=null)?member.hashCode():0;
         }
         
+        @Override
         public boolean equals(Object o) {
             if (member==null || (!(o instanceof FaultyMember)) || (((FaultyMember)o).member==null)) return false;
             return member.equals(((FaultyMember)o).member);

==================================================
ChannelCoordinator.java
index 3fdf39fb30..a025f4a39a 100644
--- a/java/org/apache/catalina/tribes/UniqueId.java
+++ b/java/org/apache/catalina/tribes/UniqueId.java
@@ -42,11 +42,13 @@ public final class UniqueId implements Serializable{
         System.arraycopy(id,offset,this.id,0,length);
     }
     
+    @Override
     public int hashCode() {
         if ( id == null ) return 0;
         return Arrays.hashCode(id);
     }
     
+    @Override
     public boolean equals(Object other) {
         boolean result = (other instanceof UniqueId);
         if ( result ) {
@@ -63,6 +65,7 @@ public final class UniqueId implements Serializable{
         return id;
     }
     
+    @Override
     public String toString() {
         StringBuilder buf = new StringBuilder("UniqueId");
         buf.append(org.apache.catalina.tribes.util.Arrays.toString(id));

==================================================
GroupChannel.java
index bbc6e512f2..5da083e62c 100644
--- a/java/org/apache/catalina/tribes/group/ChannelCoordinator.java
+++ b/java/org/apache/catalina/tribes/group/ChannelCoordinator.java
@@ -48,7 +48,9 @@ public class ChannelCoordinator extends ChannelInterceptorBase implements Messag
     
     //override optionflag
     protected int optionFlag = Channel.SEND_OPTIONS_BYTE_MESSAGE|Channel.SEND_OPTIONS_USE_ACK|Channel.SEND_OPTIONS_SYNCHRONIZED_ACK;
+    @Override
     public int getOptionFlag() {return optionFlag;}
+    @Override
     public void setOptionFlag(int flag) {optionFlag=flag;}
     
     private int startLevel = 0;
@@ -73,6 +75,7 @@ public class ChannelCoordinator extends ChannelInterceptorBase implements Messag
      * @param options int - sender options, see class documentation
      * @return ClusterMessage[] - the replies from the members, if any.
      */
+    @Override
     public void sendMessage(Member[] destination, ChannelMessage msg, InterceptorPayload payload) throws ChannelException {
         if ( destination == null ) destination = membershipService.getMembers();
         if ((msg.getOptions()&Channel.SEND_OPTIONS_MULTICAST) == Channel.SEND_OPTIONS_MULTICAST) {
@@ -97,6 +100,7 @@ public class ChannelCoordinator extends ChannelInterceptorBase implements Messag
      * SND_RX_SEQ - starts the replication receiver<BR>
      * @throws ChannelException if a startup error occurs or the service is already started.
      */
+    @Override
     public void start(int svc) throws ChannelException {
         this.internalStart(svc);
     }
@@ -112,6 +116,7 @@ public class ChannelCoordinator extends ChannelInterceptorBase implements Messag
      * SND_RX_SEQ - stops the replication receiver<BR>
      * @throws ChannelException if a startup error occurs or the service is already started.
      */
+    @Override
     public void stop(int svc) throws ChannelException {
         this.internalStop(svc);
     }    
@@ -234,16 +239,19 @@ public class ChannelCoordinator extends ChannelInterceptorBase implements Messag
 
     }
     
+    @Override
     public void memberAdded(Member member){
         SenderState.getSenderState(member);
         super.memberAdded(member);
     }
     
+    @Override
     public void memberDisappeared(Member member){
         SenderState.removeSenderState(member);
         super.memberDisappeared(member);
     }
     
+    @Override
     public void messageReceived(ChannelMessage msg) {
         if ( Logs.MESSAGES.isTraceEnabled() ) {
             Logs.MESSAGES.trace("ChannelCoordinator - Received msg:" + new UniqueId(msg.getUniqueId()) + " at " +new java.sql.Timestamp(System.currentTimeMillis())+ " from "+msg.getAddress().getName());
@@ -282,6 +290,7 @@ public class ChannelCoordinator extends ChannelInterceptorBase implements Messag
         this.membershipService.setMembershipListener(this);
     }
     
+    @Override
     public void heartbeat() {
         if ( clusterSender!=null ) clusterSender.heartbeat();
         super.heartbeat();
@@ -290,6 +299,7 @@ public class ChannelCoordinator extends ChannelInterceptorBase implements Messag
     /**
      * has members
      */
+    @Override
     public boolean hasMembers() {
         return this.getMembershipService().hasMembers();
     }
@@ -298,6 +308,7 @@ public class ChannelCoordinator extends ChannelInterceptorBase implements Messag
      * Get all current cluster members
      * @return all members or empty array
      */
+    @Override
     public Member[] getMembers() {
         return this.getMembershipService().getMembers();
     }
@@ -307,6 +318,7 @@ public class ChannelCoordinator extends ChannelInterceptorBase implements Messag
      * @param mbr Member
      * @return Member
      */
+    @Override
     public Member getMember(Member mbr){
         return this.getMembershipService().getMember(mbr);
     }
@@ -317,6 +329,7 @@ public class ChannelCoordinator extends ChannelInterceptorBase implements Messag
      *
      * @return Member
      */
+    @Override
     public Member getLocalMember(boolean incAlive) {
         return this.getMembershipService().getLocalMember(incAlive);
     }

==================================================
RpcChannel.java
index 860f651d47..d93be23ad0 100644
--- a/java/org/apache/catalina/tribes/group/GroupChannel.java
+++ b/java/org/apache/catalina/tribes/group/GroupChannel.java
@@ -145,6 +145,7 @@ public class GroupChannel extends ChannelInterceptorBase implements ManagedChann
      * Invoke this method from the application on a periodic basis if
      * you have turned off internal heartbeats <code>channel.setHeartbeat(false)</code>
      */
+    @Override
     public void heartbeat() {
         super.heartbeat();
         Iterator<Object> i = membershipListeners.iterator();
@@ -237,6 +238,7 @@ public class GroupChannel extends ChannelInterceptorBase implements ManagedChann
      * but its an extreme case, and you're probably better off doing that logic between the applications itself.
      * @param msg ChannelMessage
      */
+    @Override
     public void messageReceived(ChannelMessage msg) {
         if ( msg == null ) return;
         try {
@@ -313,6 +315,7 @@ public class GroupChannel extends ChannelInterceptorBase implements ManagedChann
      * and the channel will broadcast it to the membership listeners
      * @param member Member - the new member
      */
+    @Override
     public void memberAdded(Member member) {
         //notify upwards
         for (int i=0; i<membershipListeners.size(); i++ ) {
@@ -326,6 +329,7 @@ public class GroupChannel extends ChannelInterceptorBase implements ManagedChann
      * and the channel will broadcast it to the membership listeners
      * @param member Member - the member that left or crashed
      */
+    @Override
     public void memberDisappeared(Member member) {
         //notify upwards
         for (int i=0; i<membershipListeners.size(); i++ ) {
@@ -401,6 +405,7 @@ public class GroupChannel extends ChannelInterceptorBase implements ManagedChann
      * @throws ChannelException
      * @see org.apache.catalina.tribes.Channel#start(int)
      */
+    @Override
     public synchronized void start(int svc) throws ChannelException {
         setupDefaultStack();
         if (optionCheck) checkOptionFlags();
@@ -417,6 +422,7 @@ public class GroupChannel extends ChannelInterceptorBase implements ManagedChann
      * @throws ChannelException
      * @see org.apache.catalina.tribes.Channel#stop(int)
      */
+    @Override
     public synchronized void stop(int svc) throws ChannelException {
         if (hbthread != null) {
             hbthread.stopHeartbeat();
@@ -654,6 +660,7 @@ public class GroupChannel extends ChannelInterceptorBase implements ManagedChann
             interrupt();
         }
 
+        @Override
         public void run() {
             while (doRun) {
                 try {

==================================================
RpcMessage.java
index 45f10b9e49..099a07eb06 100644
--- a/java/org/apache/catalina/tribes/group/RpcChannel.java
+++ b/java/org/apache/catalina/tribes/group/RpcChannel.java
@@ -136,6 +136,7 @@ public class RpcChannel implements ChannelListener{
         channel.removeChannelListener(this);
     }
     
+    @Override
     public void finalize() {
         breakdown();
     }
@@ -215,10 +216,12 @@ public class RpcChannel implements ChannelListener{
             }
         }
         
+        @Override
         public int hashCode() {
             return key.hashCode();
         }
         
+        @Override
         public boolean equals(Object o) {
             if ( o instanceof RpcCollector ) {
                 RpcCollector r = (RpcCollector)o;
@@ -237,10 +240,12 @@ public class RpcChannel implements ChannelListener{
             this.id = id;
         }
         
+        @Override
         public int hashCode() {
             return id[0]+id[1]+id[2]+id[3];
         }
 
+        @Override
         public boolean equals(Object o) {
             if ( o instanceof RpcCollectorKey ) {
                 RpcCollectorKey r = (RpcCollectorKey)o;

==================================================
DomainFilterInterceptor.java
index be79b3421c..b294d72f53 100644
--- a/java/org/apache/catalina/tribes/group/RpcMessage.java
+++ b/java/org/apache/catalina/tribes/group/RpcMessage.java
@@ -71,6 +71,7 @@ public class RpcMessage implements Externalizable {
         out.writeObject(message);
     }
     
+    @Override
     public String toString() {
         StringBuilder buf = new StringBuilder("RpcMessage[");
         buf.append(super.toString());
@@ -93,6 +94,7 @@ public class RpcMessage implements Externalizable {
             reply = true;
         }
 
+        @Override
         public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
             reply = true;
             int length = in.readInt();
@@ -103,6 +105,7 @@ public class RpcMessage implements Externalizable {
             in.read(rpcId, 0, length);
         }
 
+        @Override
         public void writeExternal(ObjectOutput out) throws IOException {
             out.writeInt(uuid.length);
             out.write(uuid, 0, uuid.length);

==================================================
FragmentationInterceptor.java
index 8f3cd57b6c..c29ecc9463 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/DomainFilterInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/DomainFilterInterceptor.java
@@ -37,12 +37,14 @@ public class DomainFilterInterceptor extends ChannelInterceptorBase {
     
     protected byte[] domain = new byte[0];
 
+    @Override
     public void messageReceived(ChannelMessage msg) {
         //should we filter incoming based on domain?
         super.messageReceived(msg);
     }//messageReceived
 
 
+    @Override
     public void memberAdded(Member member) {
         if ( membership == null ) setupMembership();
         boolean notify = false;
@@ -53,6 +55,7 @@ public class DomainFilterInterceptor extends ChannelInterceptorBase {
         if ( notify ) super.memberAdded(member);
     }
 
+    @Override
     public void memberDisappeared(Member member) {
         if ( membership == null ) setupMembership();
         boolean notify = false;
@@ -63,21 +66,25 @@ public class DomainFilterInterceptor extends ChannelInterceptorBase {
         if ( notify ) super.memberDisappeared(member);
     }
 
+    @Override
     public boolean hasMembers() {
         if ( membership == null ) setupMembership();
         return membership.hasMembers();
     }
 
+    @Override
     public Member[] getMembers() {
         if ( membership == null ) setupMembership();
         return membership.getMembers();
     }
 
+    @Override
     public Member getMember(Member mbr) {
         if ( membership == null ) setupMembership();
         return membership.getMember(mbr);
     }
 
+    @Override
     public Member getLocalMember(boolean incAlive) {
         return super.getLocalMember(incAlive);
     }

==================================================
GzipInterceptor.java
index 0952662b20..259cad3d19 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/FragmentationInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/FragmentationInterceptor.java
@@ -49,6 +49,7 @@ public class FragmentationInterceptor extends ChannelInterceptorBase {
     protected boolean deepclone = true;
 
 
+    @Override
     public void sendMessage(Member[] destination, ChannelMessage msg, InterceptorPayload payload) throws ChannelException {
         int size = msg.getMessage().getLength();
         boolean frag = (size>maxSize) && okToProcess(msg.getOptions());
@@ -60,6 +61,7 @@ public class FragmentationInterceptor extends ChannelInterceptorBase {
         }
     }
     
+    @Override
     public void messageReceived(ChannelMessage msg) {
         boolean isFrag = XByteBuffer.toBoolean(msg.getMessage().getBytesDirect(),msg.getMessage().getLength()-1);
         msg.getMessage().trim(1);
@@ -133,6 +135,7 @@ public class FragmentationInterceptor extends ChannelInterceptorBase {
         }
     }
     
+    @Override
     public void heartbeat() {
         try {
             Set<FragKey> set = fragpieces.keySet(); 
@@ -222,10 +225,12 @@ public class FragmentationInterceptor extends ChannelInterceptorBase {
         public FragKey(byte[] id ) {
             this.uniqueId = id;
         }
+        @Override
         public int hashCode() {
             return XByteBuffer.toInt(uniqueId,0);
         }
         
+        @Override
         public boolean equals(Object o ) {
             if ( o instanceof FragKey ) {
             return Arrays.equals(uniqueId,((FragKey)o).uniqueId);

==================================================
MessageDispatch15Interceptor.java
index 3dd4129722..165d7b5770 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/GzipInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/GzipInterceptor.java
@@ -40,6 +40,7 @@ import org.apache.catalina.tribes.group.InterceptorPayload;
 public class GzipInterceptor extends ChannelInterceptorBase {
     public static final int DEFAULT_BUFFER_SIZE = 2048;
     
+    @Override
     public void sendMessage(Member[] destination, ChannelMessage msg, InterceptorPayload payload) throws ChannelException {
         try {
             byte[] data = compress(msg.getMessage().getBytes());
@@ -52,6 +53,7 @@ public class GzipInterceptor extends ChannelInterceptorBase {
         }
     }
 
+    @Override
     public void messageReceived(ChannelMessage msg) {
         try {
             byte[] data = decompress(msg.getMessage().getBytes());

==================================================
MessageDispatchInterceptor.java
index 03104e29e8..5a3981f638 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/MessageDispatch15Interceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/MessageDispatch15Interceptor.java
@@ -44,19 +44,23 @@ public class MessageDispatch15Interceptor extends MessageDispatchInterceptor {
     protected long keepAliveTime = 5000;
     protected LinkedBlockingQueue<Runnable> runnablequeue = new LinkedBlockingQueue<Runnable>();
 
+    @Override
     public long getCurrentSize() {
         return currentSize.get();
     }
 
+    @Override
     public long addAndGetCurrentSize(long inc) {
         return currentSize.addAndGet(inc);
     }
 
+    @Override
     public long setAndGetCurrentSize(long value) {
         currentSize.set(value);
         return value;
     }
     
+    @Override
     public boolean addToQueue(ChannelMessage msg, Member[] destination, InterceptorPayload payload) {
         final LinkObject obj = new LinkObject(msg,destination,payload);
         Runnable r = new Runnable() {
@@ -68,16 +72,19 @@ public class MessageDispatch15Interceptor extends MessageDispatchInterceptor {
         return true;
     }
 
+    @Override
     public LinkObject removeFromQueue() {
         return null; //not used, thread pool contains its own queue.
     }
 
+    @Override
     public void startQueue() {
         if ( run ) return;
         executor = new ThreadPoolExecutor(maxSpareThreads,maxThreads,keepAliveTime,TimeUnit.MILLISECONDS,runnablequeue);
         run = true;
     }
 
+    @Override
     public void stopQueue() {
         run = false;
         executor.shutdownNow();

==================================================
NonBlockingCoordinator.java
index aeb8443390..d31265151d 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/MessageDispatchInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/MessageDispatchInterceptor.java
@@ -52,6 +52,7 @@ public class MessageDispatchInterceptor extends ChannelInterceptorBase implement
         setOptionFlag(Channel.SEND_OPTIONS_ASYNCHRONOUS);
     }
 
+    @Override
     public void sendMessage(Member[] destination, ChannelMessage msg, InterceptorPayload payload) throws ChannelException {
         boolean async = (msg.getOptions() & Channel.SEND_OPTIONS_ASYNCHRONOUS) == Channel.SEND_OPTIONS_ASYNCHRONOUS;
         if ( async && run ) {
@@ -100,6 +101,7 @@ public class MessageDispatchInterceptor extends ChannelInterceptorBase implement
     }
     
     
+    @Override
     public void setOptionFlag(int flag) {
         if ( flag != Channel.SEND_OPTIONS_ASYNCHRONOUS ) log.warn("Warning, you are overriding the asynchronous option flag, this will disable the Channel.SEND_OPTIONS_ASYNCHRONOUS that other apps might use.");
         super.setOptionFlag(flag);
@@ -135,6 +137,7 @@ public class MessageDispatchInterceptor extends ChannelInterceptorBase implement
         return value;
     }
 
+    @Override
     public void start(int svc) throws ChannelException {
         //start the thread
         if (!run ) {
@@ -148,6 +151,7 @@ public class MessageDispatchInterceptor extends ChannelInterceptorBase implement
     }
 
     
+    @Override
     public void stop(int svc) throws ChannelException {
         //stop the thread
         if ( run ) {

==================================================
OrderInterceptor.java
index 39a299bb37..c9fa1adeba 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/NonBlockingCoordinator.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/NonBlockingCoordinator.java
@@ -448,6 +448,7 @@ public class NonBlockingCoordinator extends ChannelInterceptorBase {
 //============================================================================================================    
 //              OVERRIDDEN METHODS FROM CHANNEL INTERCEPTOR BASE    
 //============================================================================================================
+    @Override
     public void start(int svc) throws ChannelException {
             if (membership == null) setupMembership();
             if (started)return;
@@ -459,6 +460,7 @@ public class NonBlockingCoordinator extends ChannelInterceptorBase {
             startElection(false);
     }
 
+    @Override
     public void stop(int svc) throws ChannelException {
         try {
             halt();
@@ -480,11 +482,13 @@ public class NonBlockingCoordinator extends ChannelInterceptorBase {
     }
     
     
+    @Override
     public void sendMessage(Member[] destination, ChannelMessage msg, InterceptorPayload payload) throws ChannelException {
         waitForRelease();
         super.sendMessage(destination, msg, payload);
     }
 
+    @Override
     public void messageReceived(ChannelMessage msg) {
         if ( Arrays.contains(msg.getMessage().getBytesDirect(),0,COORD_ALIVE,0,COORD_ALIVE.length) ) {
             //ignore message, its an alive message
@@ -504,10 +508,12 @@ public class NonBlockingCoordinator extends ChannelInterceptorBase {
         }
     }
 
+    @Override
     public boolean accept(ChannelMessage msg) {
         return super.accept(msg);
     }
 
+    @Override
     public void memberAdded(Member member) {
         memberAdded(member,true);
     }
@@ -527,6 +533,7 @@ public class NonBlockingCoordinator extends ChannelInterceptorBase {
         
     }
 
+    @Override
     public void memberDisappeared(Member member) {
         try {
             
@@ -554,6 +561,7 @@ public class NonBlockingCoordinator extends ChannelInterceptorBase {
         return coord != null && getLocalMember(false).equals(coord);
     }
 
+    @Override
     public void heartbeat() {
         try {
             MemberImpl local = (MemberImpl)getLocalMember(false);
@@ -574,6 +582,7 @@ public class NonBlockingCoordinator extends ChannelInterceptorBase {
     /**
      * has members
      */
+    @Override
     public boolean hasMembers() {
         
         return membership.hasMembers();
@@ -583,6 +592,7 @@ public class NonBlockingCoordinator extends ChannelInterceptorBase {
      * Get all current cluster members
      * @return all members or empty array
      */
+    @Override
     public Member[] getMembers() {
         
         return membership.getMembers();
@@ -593,6 +603,7 @@ public class NonBlockingCoordinator extends ChannelInterceptorBase {
      * @param mbr Member
      * @return Member
      */
+    @Override
     public Member getMember(Member mbr) {
         
         return membership.getMember(mbr);
@@ -603,6 +614,7 @@ public class NonBlockingCoordinator extends ChannelInterceptorBase {
      *
      * @return Member
      */
+    @Override
     public Member getLocalMember(boolean incAlive) {
         Member local = super.getLocalMember(incAlive);
         if ( view == null && (local != null)) setupMembership();
@@ -751,6 +763,7 @@ public class NonBlockingCoordinator extends ChannelInterceptorBase {
         }
     }
     
+    @Override
     public void fireInterceptorEvent(InterceptorEvent event) {
         if (event instanceof CoordinationEvent &&
             ((CoordinationEvent)event).type == CoordinationEvent.EVT_CONF_RX) 
@@ -816,6 +829,7 @@ public class NonBlockingCoordinator extends ChannelInterceptorBase {
             return interceptor;
         }
         
+        @Override
         public String toString() {
             StringBuilder buf = new StringBuilder("CoordinationEvent[type=");
             buf.append(type).append("\n\tLocal:");

==================================================
StaticMembershipInterceptor.java
index d718142f68..04d7e46b31 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/OrderInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/OrderInterceptor.java
@@ -64,6 +64,7 @@ public class OrderInterceptor extends ChannelInterceptorBase {
     ReentrantReadWriteLock inLock = new ReentrantReadWriteLock(true);
     ReentrantReadWriteLock outLock= new ReentrantReadWriteLock(true);
 
+    @Override
     public void sendMessage(Member[] destination, ChannelMessage msg, InterceptorPayload payload) throws ChannelException {
         if ( !okToProcess(msg.getOptions()) ) {
             super.sendMessage(destination, msg, payload);
@@ -94,6 +95,7 @@ public class OrderInterceptor extends ChannelInterceptorBase {
         if ( cx != null ) throw cx;
     }
 
+    @Override
     public void messageReceived(ChannelMessage msg) {
         if ( !okToProcess(msg.getOptions()) ) {
             super.messageReceived(msg);
@@ -168,11 +170,13 @@ public class OrderInterceptor extends ChannelInterceptorBase {
         return result;
     }
     
+    @Override
     public void memberAdded(Member member) {
         //notify upwards
         super.memberAdded(member);
     }
 
+    @Override
     public void memberDisappeared(Member member) {
         //reset counters - lock free
         incounter.remove(member);

==================================================
TcpFailureDetector.java
index 0ceb6b52de..41aaed4cf2 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/StaticMembershipInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/StaticMembershipInterceptor.java
@@ -51,6 +51,7 @@ public class StaticMembershipInterceptor
     /**
      * has members
      */
+    @Override
     public boolean hasMembers() {
         return super.hasMembers() || (members.size()>0);
     }
@@ -59,6 +60,7 @@ public class StaticMembershipInterceptor
      * Get all current cluster members
      * @return all members or empty array
      */
+    @Override
     public Member[] getMembers() {
         if ( members.size() == 0 ) return super.getMembers();
         else {
@@ -78,6 +80,7 @@ public class StaticMembershipInterceptor
      * @param mbr Member
      * @return Member
      */
+    @Override
     public Member getMember(Member mbr) {
         if ( members.contains(mbr) ) return members.get(members.indexOf(mbr));
         else return super.getMember(mbr);
@@ -88,6 +91,7 @@ public class StaticMembershipInterceptor
      *
      * @return Member
      */
+    @Override
     public Member getLocalMember(boolean incAlive) {
         if (this.localMember != null ) return localMember;
         else return super.getLocalMember(incAlive);
@@ -98,12 +102,14 @@ public class StaticMembershipInterceptor
      * @param svc int
      * @throws ChannelException
      */
+    @Override
     public void start(int svc) throws ChannelException {
         if ( (Channel.SND_RX_SEQ&svc)==Channel.SND_RX_SEQ ) super.start(Channel.SND_RX_SEQ); 
         if ( (Channel.SND_TX_SEQ&svc)==Channel.SND_TX_SEQ ) super.start(Channel.SND_TX_SEQ); 
         final Member[] mbrs = members.toArray(new Member[members.size()]);
         final ChannelInterceptorBase base = this;
         Thread t = new Thread() {
+            @Override
             public void run() {
                 for (int i=0; i<mbrs.length; i++ ) {
                     base.memberAdded(mbrs[i]);

==================================================
TcpPingInterceptor.java
index 1accad3144..ce43435276 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/TcpFailureDetector.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/TcpFailureDetector.java
@@ -82,6 +82,7 @@ public class TcpFailureDetector extends ChannelInterceptorBase {
     
     protected HashMap<Member, Long> addSuspects = new HashMap<Member, Long>();
     
+    @Override
     public void sendMessage(Member[] destination, ChannelMessage msg, InterceptorPayload payload) throws ChannelException {
         try {
             super.sendMessage(destination, msg, payload);
@@ -97,6 +98,7 @@ public class TcpFailureDetector extends ChannelInterceptorBase {
         }
     }
 
+    @Override
     public void messageReceived(ChannelMessage msg) {
         //catch incoming 
         boolean process = true;
@@ -112,6 +114,7 @@ public class TcpFailureDetector extends ChannelInterceptorBase {
     }//messageReceived
     
     
+    @Override
     public void memberAdded(Member member) {
         if ( membership == null ) setupMembership();
         boolean notify = false;
@@ -133,6 +136,7 @@ public class TcpFailureDetector extends ChannelInterceptorBase {
         if ( notify ) super.memberAdded(member);
     }
 
+    @Override
     public void memberDisappeared(Member member) {
         if ( membership == null ) setupMembership();
         boolean notify = false;
@@ -164,25 +168,30 @@ public class TcpFailureDetector extends ChannelInterceptorBase {
         }
     }
     
+    @Override
     public boolean hasMembers() {
         if ( membership == null ) setupMembership();
         return membership.hasMembers();
     }
 
+    @Override
     public Member[] getMembers() {
         if ( membership == null ) setupMembership();
         return membership.getMembers();
     }
 
+    @Override
     public Member getMember(Member mbr) {
         if ( membership == null ) setupMembership();
         return membership.getMember(mbr);
     }
 
+    @Override
     public Member getLocalMember(boolean incAlive) {
         return super.getLocalMember(incAlive);
     }
     
+    @Override
     public void heartbeat() {
         super.heartbeat();
         checkMembers(false);

==================================================
ThroughputInterceptor.java
index 69491eaa47..7418b1755c 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java
@@ -59,6 +59,7 @@ public class TcpPingInterceptor extends ChannelInterceptorBase {
     WeakReference<TcpFailureDetector> failureDetector = null;
     WeakReference<StaticMembershipInterceptor> staticMembers = null;
     
+    @Override
     public synchronized void start(int svc) throws ChannelException {
         super.start(svc);
         running = true;
@@ -81,6 +82,7 @@ public class TcpPingInterceptor extends ChannelInterceptorBase {
         
     }
     
+    @Override
     public void stop(int svc) throws ChannelException {
         running = false;
         if ( thread != null ) thread.interrupt();
@@ -88,6 +90,7 @@ public class TcpPingInterceptor extends ChannelInterceptorBase {
         super.stop(svc);
     }
     
+    @Override
     public void heartbeat() {
         super.heartbeat();
         if (!getUseThread()) sendPing();
@@ -144,6 +147,7 @@ public class TcpPingInterceptor extends ChannelInterceptorBase {
         }
     }
     
+    @Override
     public void messageReceived(ChannelMessage msg) {
         //catch incoming 
         boolean process = true;
@@ -159,6 +163,7 @@ public class TcpPingInterceptor extends ChannelInterceptorBase {
     }//messageReceived
     
     protected class PingThread extends Thread {
+        @Override
         public void run() {
             while (running) {
                 try {

==================================================
TwoPhaseCommitInterceptor.java
index bcbc54c30e..d1bb074523 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/ThroughputInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/ThroughputInterceptor.java
@@ -54,6 +54,7 @@ public class ThroughputInterceptor extends ChannelInterceptorBase {
     DecimalFormat df = new DecimalFormat("#0.00");
 
 
+    @Override
     public void sendMessage(Member[] destination, ChannelMessage msg, InterceptorPayload payload) throws ChannelException {
         if ( access.addAndGet(1) == 1 ) txStart = System.currentTimeMillis();
         long bytes = XByteBuffer.getDataPackageLength(((ChannelData)msg).getDataPackageLength());
@@ -77,6 +78,7 @@ public class ThroughputInterceptor extends ChannelInterceptorBase {
         msgTxCnt.addAndGet(1);
     }
 
+    @Override
     public void messageReceived(ChannelMessage msg) {
         if ( rxStart == 0 ) rxStart = System.currentTimeMillis();
         long bytes = XByteBuffer.getDataPackageLength(((ChannelData)msg).getDataPackageLength());

==================================================
ChannelData.java
index 0b0eb68132..e693abccbf 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/TwoPhaseCommitInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/TwoPhaseCommitInterceptor.java
@@ -48,6 +48,7 @@ public class TwoPhaseCommitInterceptor extends ChannelInterceptorBase {
     protected long expire = 1000 * 60; //one minute expiration
     protected boolean deepclone = true;
 
+    @Override
     public void sendMessage(Member[] destination, ChannelMessage msg, InterceptorPayload payload) throws
         ChannelException {
         //todo, optimize, if destination.length==1, then we can do
@@ -73,6 +74,7 @@ public class TwoPhaseCommitInterceptor extends ChannelInterceptorBase {
         }
     }
 
+    @Override
     public void messageReceived(ChannelMessage msg) {
         if (okToProcess(msg.getOptions())) {
             if ( msg.getMessage().getLength() == (START_DATA.length+msg.getUniqueId().length+END_DATA.length) &&
@@ -110,6 +112,7 @@ public class TwoPhaseCommitInterceptor extends ChannelInterceptorBase {
         this.expire = expire;
     }
     
+    @Override
     public void heartbeat() {
         try {
             long now = System.currentTimeMillis();

==================================================
DirectByteArrayOutputStream.java
index 51f11c6359..209983026e 100644
--- a/java/org/apache/catalina/tribes/io/ChannelData.java
+++ b/java/org/apache/catalina/tribes/io/ChannelData.java
@@ -271,6 +271,7 @@ public class ChannelData implements ChannelMessage {
         return data;
     }
     
+    @Override
     public int hashCode() {
         return XByteBuffer.toInt(getUniqueId(),0);
     }
@@ -280,6 +281,7 @@ public class ChannelData implements ChannelMessage {
      * @param o Object
      * @return boolean
      */
+    @Override
     public boolean equals(Object o) {
         if ( o instanceof ChannelData ) {
             return Arrays.equals(getUniqueId(),((ChannelData)o).getUniqueId());
@@ -290,6 +292,7 @@ public class ChannelData implements ChannelMessage {
      * Create a shallow clone, only the data gets recreated
      * @return ClusterData
      */
+    @Override
     public Object clone() {
 //        byte[] d = this.getDataPackage();
 //        return ClusterData.getDataFromPackage(d);
@@ -338,6 +341,7 @@ public class ChannelData implements ChannelMessage {
             ( (Channel.SEND_OPTIONS_SYNCHRONIZED_ACK & options) != Channel.SEND_OPTIONS_SYNCHRONIZED_ACK);
     }
     
+    @Override
     public String toString() {
         StringBuilder buf = new StringBuilder();
         buf.append("ClusterData[src=");

==================================================
ReplicationStream.java
index 7f908a5b35..b3232a686c 100644
--- a/java/org/apache/catalina/tribes/io/DirectByteArrayOutputStream.java
+++ b/java/org/apache/catalina/tribes/io/DirectByteArrayOutputStream.java
@@ -43,6 +43,7 @@ public class DirectByteArrayOutputStream extends OutputStream {
      *   been closed.
      * @todo Implement this java.io.OutputStream method
      */
+    @Override
     public void write(int b) throws IOException {
         buffer.append((byte)b);
     }

==================================================
McastServiceImpl.java
index db94ab3ede..cf6e05643a 100644
--- a/java/org/apache/catalina/tribes/io/ReplicationStream.java
+++ b/java/org/apache/catalina/tribes/io/ReplicationStream.java
@@ -69,6 +69,7 @@ public final class ReplicationStream extends ObjectInputStream {
      * @exception ClassNotFoundException if this class cannot be found
      * @exception IOException if an input/output error occurs
      */
+    @Override
     public Class<?> resolveClass(ObjectStreamClass classDesc)
         throws ClassNotFoundException, IOException {
         String name = classDesc.getName();
@@ -155,6 +156,7 @@ public final class ReplicationStream extends ObjectInputStream {
         else throw new ClassNotFoundException(name);
     }
     
+    @Override
     public void close() throws IOException  {
         this.classLoaders = null;
         super.close();

==================================================
MemberImpl.java
index a6826a254b..23f8fbf337 100644
--- a/java/org/apache/catalina/tribes/membership/McastServiceImpl.java
+++ b/java/org/apache/catalina/tribes/membership/McastServiceImpl.java
@@ -518,6 +518,7 @@ public class McastServiceImpl
             super();
             setName("Tribes-MembershipReceiver");
         }
+        @Override
         public void run() {
             while ( doRunReceiver ) {
                 try {
@@ -554,6 +555,7 @@ public class McastServiceImpl
             setName("Tribes-MembershipSender");
 
         }
+        @Override
         public void run() {
             while ( doRunSender ) {
                 try {
@@ -609,6 +611,7 @@ public class McastServiceImpl
                 return false;
             }
         }
+        @Override
         public void run() {
             boolean success = false;
             int attempt = 0;

==================================================
Membership.java
index a82340e862..577b5b4e25 100644
--- a/java/org/apache/catalina/tribes/membership/MemberImpl.java
+++ b/java/org/apache/catalina/tribes/membership/MemberImpl.java
@@ -507,6 +507,7 @@ public class MemberImpl implements Member, java.io.Externalizable {
     /**
      * String representation of this object
      */
+    @Override
     public String toString()  {
         StringBuilder buf = new StringBuilder("org.apache.catalina.tribes.membership.MemberImpl[");
         buf.append(getName()).append(",");
@@ -543,6 +544,7 @@ public class MemberImpl implements Member, java.io.Externalizable {
      * @see java.lang.Object#hashCode()
      * @return The hash code
      */
+    @Override
     public int hashCode() {
         return getHost()[0]+getHost()[1]+getHost()[2]+getHost()[3];
     }
@@ -551,6 +553,7 @@ public class MemberImpl implements Member, java.io.Externalizable {
      * Returns true if the param o is a McastMember with the same name
      * @param o
      */
+    @Override
     public boolean equals(Object o) {
         if ( o instanceof MemberImpl )    {
             return Arrays.equals(this.getHost(),((MemberImpl)o).getHost()) &&

==================================================
AbstractReplicatedMap.java
index 73a3a23b50..db547d7d1e 100644
--- a/java/org/apache/catalina/tribes/membership/Membership.java
+++ b/java/org/apache/catalina/tribes/membership/Membership.java
@@ -64,6 +64,7 @@ public class Membership
       */
     protected Comparator<Member> memberComparator = new MemberComparator();
 
+    @Override
     public Object clone() {
         synchronized (membersLock) {
             Membership clone = new Membership(local, memberComparator);

==================================================
LazyReplicatedMap.java
index c277975607..028c0df424 100644
--- a/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
@@ -311,6 +311,7 @@ public abstract class AbstractReplicatedMap extends ConcurrentHashMap implements
         finalize();
     }
 
+    @Override
     public void finalize() {
         try {broadcast(MapMessage.MSG_STOP,false); }catch ( Exception ignore){}
         //cleanup
@@ -329,10 +330,12 @@ public abstract class AbstractReplicatedMap extends ConcurrentHashMap implements
         this.externalLoaders = null;
     }
     
+    @Override
     public int hashCode() {
         return Arrays.hashCode(this.mapContextName);
     }
     
+    @Override
     public boolean equals(Object o) {
         if ( o == null ) return false;
         if ( !(o instanceof AbstractReplicatedMap)) return false;
@@ -807,6 +810,7 @@ public abstract class AbstractReplicatedMap extends ConcurrentHashMap implements
      * @param key Object
      * @return Object
      */
+    @Override
     public Object remove(Object key) {
         return remove(key,true);
     }
@@ -828,6 +832,7 @@ public abstract class AbstractReplicatedMap extends ConcurrentHashMap implements
         return (MapEntry)super.get(key);
     }
     
+    @Override
     public Object get(Object key) {
         MapEntry entry = (MapEntry)super.get(key);
         if (log.isTraceEnabled()) log.trace("Requesting id:"+key+" entry:"+entry);
@@ -917,10 +922,12 @@ public abstract class AbstractReplicatedMap extends ConcurrentHashMap implements
          * @param key Object
          * @return boolean
          */
+        @Override
         public boolean containsKey(Object key) {
             return super.containsKey(key);
         }
     
+        @Override
         public Object put(Object key, Object value) {
             return put(key,value,true);
         }
@@ -952,6 +959,7 @@ public abstract class AbstractReplicatedMap extends ConcurrentHashMap implements
          * Copies all values from one map to this instance
          * @param m Map
          */
+        @Override
         public void putAll(Map m) {
             Iterator i = m.entrySet().iterator();
             while ( i.hasNext() ) {
@@ -960,6 +968,7 @@ public abstract class AbstractReplicatedMap extends ConcurrentHashMap implements
             }
         }
         
+        @Override
         public void clear() {
             clear(true);
         }
@@ -975,6 +984,7 @@ public abstract class AbstractReplicatedMap extends ConcurrentHashMap implements
             }
         }
     
+        @Override
         public boolean containsValue(Object value) {
             if ( value == null ) {
                 return super.containsValue(value);
@@ -989,6 +999,7 @@ public abstract class AbstractReplicatedMap extends ConcurrentHashMap implements
             }//end if
         }
     
+        @Override
         public Object clone() {
             throw new UnsupportedOperationException("This operation is not valid on a replicated map");
         }
@@ -1011,6 +1022,7 @@ public abstract class AbstractReplicatedMap extends ConcurrentHashMap implements
             return super.size();
         }
     
+        @Override
         public Set<MapEntry> entrySet() {
             LinkedHashSet<MapEntry> set = new LinkedHashSet<MapEntry>(super.size());
             Iterator i = super.entrySet().iterator();
@@ -1025,6 +1037,7 @@ public abstract class AbstractReplicatedMap extends ConcurrentHashMap implements
             return Collections.unmodifiableSet(set);
         }
     
+        @Override
         public Set<Object> keySet() {
             //todo implement
             //should only return keys where this is active.
@@ -1041,6 +1054,7 @@ public abstract class AbstractReplicatedMap extends ConcurrentHashMap implements
         }
     
     
+        @Override
         public int size() {
             //todo, implement a counter variable instead
             //only count active members in this node
@@ -1056,10 +1070,12 @@ public abstract class AbstractReplicatedMap extends ConcurrentHashMap implements
             return counter;
         }
     
+        @Override
         public boolean isEmpty() {
             return size()==0;
         }
     
+        @Override
         public Collection<Object> values() {
             ArrayList<Object> values = new ArrayList<Object>();
             Iterator i = super.entrySet().iterator();
@@ -1162,10 +1178,12 @@ public abstract class AbstractReplicatedMap extends ConcurrentHashMap implements
             return old;
         }
 
+        @Override
         public int hashCode() {
             return key.hashCode();
         }
 
+        @Override
         public boolean equals(Object o) {
             return key.equals(o);
         }
@@ -1196,6 +1214,7 @@ public abstract class AbstractReplicatedMap extends ConcurrentHashMap implements
             }
         }
         
+        @Override
         public String toString() {
             StringBuilder buf = new StringBuilder("MapEntry[key:");
             buf.append(getKey()).append("; ");
@@ -1235,6 +1254,7 @@ public abstract class AbstractReplicatedMap extends ConcurrentHashMap implements
         private Member[] nodes;
         private Member primary;
         
+        @Override
         public String toString() {
             StringBuilder buf = new StringBuilder("MapMessage[context=");
             buf.append(new String(mapId));
@@ -1401,6 +1421,7 @@ public abstract class AbstractReplicatedMap extends ConcurrentHashMap implements
          * shallow clone
          * @return Object
          */
+        @Override
         public Object clone() {
             MapMessage msg = new MapMessage(this.mapId, this.msgtype, this.diff, this.key, this.value, this.diffvalue, this.primary, this.nodes);
             msg.keydata = this.keydata;

==================================================
ReplicatedMap.java
index 78b4c1259e..de45749b7c 100644
--- a/java/org/apache/catalina/tribes/tipis/LazyReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/LazyReplicatedMap.java
@@ -113,6 +113,7 @@ public class LazyReplicatedMap extends AbstractReplicatedMap
 //------------------------------------------------------------------------------    
 //              METHODS TO OVERRIDE    
 //------------------------------------------------------------------------------
+    @Override
     protected int getStateMessageType() {
         return AbstractReplicatedMap.MapMessage.MSG_STATE;
     }
@@ -124,6 +125,7 @@ public class LazyReplicatedMap extends AbstractReplicatedMap
      * @return Member - the backup node
      * @throws ChannelException
      */
+    @Override
     protected Member[] publishEntryInfo(Object key, Object value) throws ChannelException {
         if  (! (key instanceof Serializable && value instanceof Serializable)  ) return new Member[0];
         Member[] members = getMapMembers();

==================================================
PooledSender.java
index 701887e63e..d6e55e7be7 100644
--- a/java/org/apache/catalina/tribes/tipis/ReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/ReplicatedMap.java
@@ -92,6 +92,7 @@ public class ReplicatedMap extends AbstractReplicatedMap implements RpcCallback,
 //------------------------------------------------------------------------------
 //              METHODS TO OVERRIDE
 //------------------------------------------------------------------------------
+    @Override
     protected int getStateMessageType() {
         return AbstractReplicatedMap.MapMessage.MSG_STATE_COPY;
     }
@@ -103,6 +104,7 @@ public class ReplicatedMap extends AbstractReplicatedMap implements RpcCallback,
      * @return Member - the backup node
      * @throws ChannelException
      */
+    @Override
     protected Member[] publishEntryInfo(Object key, Object value) throws ChannelException {
         if  (! (key instanceof Serializable && value instanceof Serializable)  ) return new Member[0];
         //select a backup node

==================================================
BioReplicationTask.java
index 01dd3bd184..092e4d3821 100644
--- a/java/org/apache/catalina/tribes/transport/PooledSender.java
+++ b/java/org/apache/catalina/tribes/transport/PooledSender.java
@@ -49,12 +49,14 @@ public abstract class PooledSender extends AbstractSender implements MultiPointS
         queue.returnSender(sender);
     }
     
+    @Override
     public synchronized void connect() throws IOException {
         //do nothing, happens in the socket sender itself
         queue.open();
         setConnected(true);
     }
     
+    @Override
     public synchronized void disconnect() {
         queue.close();
         setConnected(false);
@@ -79,6 +81,7 @@ public abstract class PooledSender extends AbstractSender implements MultiPointS
         return poolSize;
     }
 
+    @Override
     public boolean keepalive() {
         //do nothing, the pool checks on every return
         return (queue==null)?false:queue.checkIdleKeepAlive();

==================================================
BioSender.java
index b773fccfd4..aadcec5add 100644
--- a/java/org/apache/catalina/tribes/transport/bio/BioReplicationTask.java
+++ b/java/org/apache/catalina/tribes/transport/bio/BioReplicationTask.java
@@ -155,6 +155,7 @@ public class BioReplicationTask extends AbstractRxTask {
         }
     }
     
+    @Override
     public void close() {
         setDoRun(false);
         try {socket.close();}catch ( Exception ignore){}

==================================================
MultipointBioSender.java
index ffe6240751..e99f17ba36 100644
--- a/java/org/apache/catalina/tribes/transport/bio/BioSender.java
+++ b/java/org/apache/catalina/tribes/transport/bio/BioSender.java
@@ -91,6 +91,7 @@ public class BioSender extends AbstractSender implements DataSender {
      * Connect other cluster member receiver 
      * @see org.apache.catalina.tribes.transport.IDataSender#connect()
      */
+    @Override
     public  void connect() throws IOException {
         openSocket();
    }
@@ -101,6 +102,7 @@ public class BioSender extends AbstractSender implements DataSender {
      * 
      * @see IDataSender#disconnect()
      */
+    @Override
     public  void disconnect() {
         boolean connect = isConnected();
         closeSocket();
@@ -149,6 +151,7 @@ public class BioSender extends AbstractSender implements DataSender {
     /**
      * Name of this SockerSender
      */
+    @Override
     public String toString() {
         StringBuilder buf = new StringBuilder("DataSender[(");
         buf.append(super.toString()).append(")");

==================================================
PooledMultiSender.java
index 948062cf5a..448a65805c 100644
--- a/java/org/apache/catalina/tribes/transport/bio/MultipointBioSender.java
+++ b/java/org/apache/catalina/tribes/transport/bio/MultipointBioSender.java
@@ -85,6 +85,7 @@ public class MultipointBioSender extends AbstractSender implements MultiPointSen
         else return result;
     }
 
+    @Override
     public void connect() throws IOException {
         //do nothing, we connect on demand
         setConnected(true);
@@ -119,16 +120,19 @@ public class MultipointBioSender extends AbstractSender implements MultiPointSen
     }
 
 
+    @Override
     public synchronized void disconnect() {
         try {close(); }catch (Exception x){}
         setConnected(false);
     }
 
+    @Override
     public void finalize() {
         try {disconnect(); }catch ( Exception ignore){}
     }
 
 
+    @Override
     public boolean keepalive() {
         //throw new UnsupportedOperationException("Method ParallelBioSender.checkKeepAlive() not implemented");
         boolean result = false;

==================================================
NioReceiver.java
index 196b4e928e..cd45251305 100644
--- a/java/org/apache/catalina/tribes/transport/bio/PooledMultiSender.java
+++ b/java/org/apache/catalina/tribes/transport/bio/PooledMultiSender.java
@@ -64,6 +64,7 @@ public class PooledMultiSender extends PooledSender {
      * @todo Implement this org.apache.catalina.tribes.transport.PooledSender
      *   method
      */
+    @Override
     public DataSender getNewDataSender() {
         MultipointBioSender sender = new MultipointBioSender();
         AbstractSender.transferProperties(this,sender);

==================================================
NioSender.java
index 7a447610f1..b2f5154db9 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java
@@ -81,6 +81,7 @@ public class NioReceiver extends ReceiverBase implements Runnable, ChannelReceiv
 //        return interestOpsMutex;
 //    }
 
+    @Override
     public void stop() {
         this.stopListening();
         super.stop();
@@ -91,6 +92,7 @@ public class NioReceiver extends ReceiverBase implements Runnable, ChannelReceiv
      * @throws Exception
      * @see org.apache.catalina.tribes.ClusterReceiver#start()
      */
+    @Override
     public void start() throws IOException {
         super.start();
         try {

==================================================
ParallelNioSender.java
index a5e9874c57..6dcc672a0b 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioSender.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioSender.java
@@ -211,6 +211,7 @@ public class NioSender extends AbstractSender implements DataSender{
      * @throws IOException
      * @todo Implement this org.apache.catalina.tribes.transport.IDataSender method
      */
+    @Override
     public synchronized void connect() throws IOException {
         if ( connecting || isConnected()) return;
         connecting = true;
@@ -255,6 +256,7 @@ public class NioSender extends AbstractSender implements DataSender{
      *
      * @todo Implement this org.apache.catalina.tribes.transport.IDataSender method
      */
+    @Override
     public void disconnect() {
         try {
             connecting = false;

==================================================
PooledParallelSender.java
index b781c6d5eb..1f2ffc1965 100644
--- a/java/org/apache/catalina/tribes/transport/nio/ParallelNioSender.java
+++ b/java/org/apache/catalina/tribes/transport/nio/ParallelNioSender.java
@@ -235,6 +235,7 @@ public class ParallelNioSender extends AbstractSender implements MultiPointSende
         else return result;
     }
 
+    @Override
     public void connect() {
         //do nothing, we connect on demand
         setConnected(true);
@@ -269,17 +270,20 @@ public class ParallelNioSender extends AbstractSender implements MultiPointSende
     }
 
 
+    @Override
     public synchronized void disconnect() {
         setConnected(false);
         try {close(); }catch (Exception x){}
 
     }
 
+    @Override
     public void finalize() {
         try {disconnect(); }catch ( Exception ignore){}
         try {selector.close();} catch (Exception ignore) {}
     }
 
+    @Override
     public boolean keepalive() {
         boolean result = false;
         for ( Iterator<Entry<Member, NioSender>> i = nioSenders.entrySet().iterator(); i.hasNext();  ) {

==================================================
ExecutorFactory.java
index 2e9c181dd2..1e9490be0f 100644
--- a/java/org/apache/catalina/tribes/transport/nio/PooledParallelSender.java
+++ b/java/org/apache/catalina/tribes/transport/nio/PooledParallelSender.java
@@ -60,6 +60,7 @@ public class PooledParallelSender extends PooledSender implements MultiPointSend
         }
     }
 
+    @Override
     public DataSender getNewDataSender() {
         try {
             ParallelNioSender sender = new ParallelNioSender();
@@ -70,11 +71,13 @@ public class PooledParallelSender extends PooledSender implements MultiPointSend
         }
     }
     
+    @Override
     public synchronized void disconnect() {
         this.connected = false;
         super.disconnect();
     }
 
+    @Override
     public synchronized void connect() throws IOException {
         this.connected = true;
         super.connect();

==================================================
MemoryGroup.java
index c42b9d9a80..fd7b4e7b79 100644
--- a/java/org/apache/catalina/tribes/util/ExecutorFactory.java
+++ b/java/org/apache/catalina/tribes/util/ExecutorFactory.java
@@ -66,6 +66,7 @@ public class ExecutorFactory {
             return super.offer(o); //forces the item onto the queue, to be used if the task is rejected
         }
 
+        @Override
         public boolean offer(Runnable o) {
             //we can't do any checks
             if (parent==null) return super.offer(o);

==================================================
MemoryRole.java
index 5a4f50b759..348a1810b2 100644
--- a/java/org/apache/catalina/users/MemoryGroup.java
+++ b/java/org/apache/catalina/users/MemoryGroup.java
@@ -82,6 +82,7 @@ public class MemoryGroup extends AbstractGroup {
     /**
      * Return the set of {@link Role}s assigned specifically to this group.
      */
+    @Override
     public Iterator<Role> getRoles() {
 
         synchronized (roles) {
@@ -94,6 +95,7 @@ public class MemoryGroup extends AbstractGroup {
     /**
      * Return the {@link UserDatabase} within which this Group is defined.
      */
+    @Override
     public UserDatabase getUserDatabase() {
 
         return (this.database);
@@ -104,6 +106,7 @@ public class MemoryGroup extends AbstractGroup {
     /**
      * Return the set of {@link org.apache.catalina.User}s that are members of this group.
      */
+    @Override
     public Iterator<User> getUsers() {
 
         ArrayList<User> results = new ArrayList<User>();
@@ -127,6 +130,7 @@ public class MemoryGroup extends AbstractGroup {
      *
      * @param role The new role
      */
+    @Override
     public void addRole(Role role) {
 
         synchronized (roles) {
@@ -143,6 +147,7 @@ public class MemoryGroup extends AbstractGroup {
      *
      * @param role The role to check
      */
+    @Override
     public boolean isInRole(Role role) {
 
         synchronized (roles) {
@@ -157,6 +162,7 @@ public class MemoryGroup extends AbstractGroup {
      *
      * @param role The old role
      */
+    @Override
     public void removeRole(Role role) {
 
         synchronized (roles) {
@@ -169,6 +175,7 @@ public class MemoryGroup extends AbstractGroup {
     /**
      * Remove all {@link Role}s from those assigned to this group.
      */
+    @Override
     public void removeRoles() {
 
         synchronized (roles) {
@@ -181,6 +188,7 @@ public class MemoryGroup extends AbstractGroup {
     /**
      * <p>Return a String representation of this group in XML format.</p>
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("<group groupname=\"");

==================================================
MemoryUser.java
index 03c4437089..0e73b45933 100644
--- a/java/org/apache/catalina/users/MemoryRole.java
+++ b/java/org/apache/catalina/users/MemoryRole.java
@@ -71,6 +71,7 @@ public class MemoryRole extends AbstractRole {
     /**
      * Return the {@link UserDatabase} within which this role is defined.
      */
+    @Override
     public UserDatabase getUserDatabase() {
 
         return (this.database);
@@ -84,6 +85,7 @@ public class MemoryRole extends AbstractRole {
     /**
      * <p>Return a String representation of this role in XML format.</p>
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("<role rolename=\"");

==================================================
MemoryUserDatabase.java
index 445c56f88a..4a62985dfe 100644
--- a/java/org/apache/catalina/users/MemoryUser.java
+++ b/java/org/apache/catalina/users/MemoryUser.java
@@ -90,6 +90,7 @@ public class MemoryUser extends AbstractUser {
     /**
      * Return the set of {@link Group}s to which this user belongs.
      */
+    @Override
     public Iterator<Group> getGroups() {
 
         synchronized (groups) {
@@ -102,6 +103,7 @@ public class MemoryUser extends AbstractUser {
     /**
      * Return the set of {@link Role}s assigned specifically to this user.
      */
+    @Override
     public Iterator<Role> getRoles() {
 
         synchronized (roles) {
@@ -129,6 +131,7 @@ public class MemoryUser extends AbstractUser {
      *
      * @param group The new group
      */
+    @Override
     public void addGroup(Group group) {
 
         synchronized (groups) {
@@ -145,6 +148,7 @@ public class MemoryUser extends AbstractUser {
      *
      * @param role The new role
      */
+    @Override
     public void addRole(Role role) {
 
         synchronized (roles) {
@@ -161,6 +165,7 @@ public class MemoryUser extends AbstractUser {
      *
      * @param group The group to check
      */
+    @Override
     public boolean isInGroup(Group group) {
 
         synchronized (groups) {
@@ -177,6 +182,7 @@ public class MemoryUser extends AbstractUser {
      *
      * @param role The role to check
      */
+    @Override
     public boolean isInRole(Role role) {
 
         synchronized (roles) {
@@ -191,6 +197,7 @@ public class MemoryUser extends AbstractUser {
      *
      * @param group The old group
      */
+    @Override
     public void removeGroup(Group group) {
 
         synchronized (groups) {
@@ -203,6 +210,7 @@ public class MemoryUser extends AbstractUser {
     /**
      * Remove all {@link Group}s from those this user belongs to.
      */
+    @Override
     public void removeGroups() {
 
         synchronized (groups) {
@@ -217,6 +225,7 @@ public class MemoryUser extends AbstractUser {
      *
      * @param role The old role
      */
+    @Override
     public void removeRole(Role role) {
 
         synchronized (roles) {
@@ -229,6 +238,7 @@ public class MemoryUser extends AbstractUser {
     /**
      * Remove all {@link Role}s from those assigned to this user.
      */
+    @Override
     public void removeRoles() {
 
         synchronized (roles) {
@@ -246,6 +256,7 @@ public class MemoryUser extends AbstractUser {
      * <code>username</code> or </code>name</code> for the username
      * property.</p>
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("<user username=\"");

==================================================
CustomObjectInputStream.java
index 20fb637af3..aee332fda7 100644
--- a/java/org/apache/catalina/users/MemoryUserDatabase.java
+++ b/java/org/apache/catalina/users/MemoryUserDatabase.java
@@ -608,6 +608,7 @@ public class MemoryUserDatabase implements UserDatabase {
     /**
      * Return a String representation of this UserDatabase.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("MemoryUserDatabase[id=");

==================================================
Extension.java
index ec76335c25..ec5b3d4f45 100644
--- a/java/org/apache/catalina/util/CustomObjectInputStream.java
+++ b/java/org/apache/catalina/util/CustomObjectInputStream.java
@@ -69,6 +69,7 @@ public final class CustomObjectInputStream
      * @exception ClassNotFoundException if this class cannot be found
      * @exception IOException if an input/output error occurs
      */
+    @Override
     public Class<?> resolveClass(ObjectStreamClass classDesc)
         throws ClassNotFoundException, IOException {
         try {
@@ -85,6 +86,7 @@ public final class CustomObjectInputStream
      * class descriptor. Do this using the class loader assigned to this
      * Context.
      */
+    @Override
     protected Class<?> resolveProxyClass(String[] interfaces)
         throws IOException, ClassNotFoundException {
 

==================================================
ManifestResource.java
index 3b05603782..94d2322936 100644
--- a/java/org/apache/catalina/util/Extension.java
+++ b/java/org/apache/catalina/util/Extension.java
@@ -218,6 +218,7 @@ public final class Extension {
     /**
      * Return a String representation of this object.
      */
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("Extension[");

==================================================
ParameterMap.java
index c8696685c7..206567de95 100644
--- a/java/org/apache/catalina/util/ManifestResource.java
+++ b/java/org/apache/catalina/util/ManifestResource.java
@@ -127,6 +127,7 @@ public class ManifestResource {
         return true;
     }
     
+    @Override
     public String toString() {
 
         StringBuilder sb = new StringBuilder("ManifestResource[");

==================================================
ResourceSet.java
index be8d39e868..5b00064749 100644
--- a/java/org/apache/catalina/util/ParameterMap.java
+++ b/java/org/apache/catalina/util/ParameterMap.java
@@ -139,6 +139,7 @@ public final class ParameterMap<K,V> extends HashMap<K,V> {
      *
      * @exception IllegalStateException if this map is currently locked
      */
+    @Override
     public void clear() {
 
         if (locked)
@@ -162,6 +163,7 @@ public final class ParameterMap<K,V> extends HashMap<K,V> {
      *
      * @exception IllegalStateException if this map is currently locked
      */
+    @Override
     public V put(K key, V value) {
 
         if (locked)
@@ -181,6 +183,7 @@ public final class ParameterMap<K,V> extends HashMap<K,V> {
      *
      * @exception IllegalStateException if this map is currently locked
      */
+    @Override
     public void putAll(Map<? extends K,? extends V> map) {
 
         if (locked)
@@ -201,6 +204,7 @@ public final class ParameterMap<K,V> extends HashMap<K,V> {
      *
      * @exception IllegalStateException if this map is currently locked
      */
+    @Override
     public V remove(Object key) {
 
         if (locked)

==================================================
XMLWriter.java
index 4dba94f83f..6a71b13cdf 100644
--- a/java/org/apache/catalina/util/ResourceSet.java
+++ b/java/org/apache/catalina/util/ResourceSet.java
@@ -141,6 +141,7 @@ public final class ResourceSet<T> extends HashSet<T> {
      *
      * @exception IllegalStateException if this ResourceSet is locked
      */
+    @Override
     public boolean add(T o) {
 
         if (locked)
@@ -156,6 +157,7 @@ public final class ResourceSet<T> extends HashSet<T> {
      *
      * @exception IllegalStateException if this ResourceSet is locked
      */
+    @Override
     public void clear() {
 
         if (locked)
@@ -174,6 +176,7 @@ public final class ResourceSet<T> extends HashSet<T> {
      *
      * @exception IllegalStateException if this ResourceSet is locked
      */
+    @Override
     public boolean remove(Object o) {
 
         if (locked)

==================================================
AccessLogValve.java
index aebee70372..2a0f415a4c 100644
--- a/java/org/apache/catalina/util/XMLWriter.java
+++ b/java/org/apache/catalina/util/XMLWriter.java
@@ -90,6 +90,7 @@ public class XMLWriter {
      *
      * @return String containing the generated XML
      */
+    @Override
     public String toString() {
         return buffer.toString();
     }

==================================================
CometConnectionManagerValve.java
index 11ed5d348f..53a8ab4296 100644
--- a/java/org/apache/catalina/valves/AccessLogValve.java
+++ b/java/org/apache/catalina/valves/AccessLogValve.java
@@ -275,6 +275,7 @@ public class AccessLogValve
      */
     private static final ThreadLocal<AccessDateStruct> currentDateStruct =
             new ThreadLocal<AccessDateStruct>() {
+        @Override
         protected AccessDateStruct initialValue() {
             return new AccessDateStruct();
         }
@@ -351,6 +352,7 @@ public class AccessLogValve
     /**
      * Return descriptive information about this implementation.
      */
+    @Override
     public String getInfo() {
         return (info);
     }
@@ -535,6 +537,7 @@ public class AccessLogValve
      * invoked inside the classloading context of this container. Unexpected
      * throwables will be caught and logged.
      */
+    @Override
     public void backgroundProcess() {
         if (started && getEnabled() && writer != null && buffered) {
             writer.flush();
@@ -551,6 +554,7 @@ public class AccessLogValve
      * @exception IOException if an input/output error has occurred
      * @exception ServletException if a servlet error has occurred
      */
+    @Override
     public void invoke(Request request, Response response) throws IOException,
             ServletException {
 

==================================================
ErrorReportValve.java
index 22ddb06ed5..00b94e9f60 100644
--- a/java/org/apache/catalina/valves/CometConnectionManagerValve.java
+++ b/java/org/apache/catalina/valves/CometConnectionManagerValve.java
@@ -233,6 +233,7 @@ public class CometConnectionManagerValve
     /**
      * Return descriptive information about this Valve implementation.
      */
+    @Override
     public String getInfo() {
         return (info);
     }
@@ -247,6 +248,7 @@ public class CometConnectionManagerValve
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet error occurs
      */
+    @Override
     public void invoke(Request request, Response response)
         throws IOException, ServletException {
         // Perform the request
@@ -293,6 +295,7 @@ public class CometConnectionManagerValve
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet error occurs
      */
+    @Override
     public void event(Request request, Response response, CometEvent event)
         throws IOException, ServletException {
         

==================================================
ExtendedAccessLogValve.java
index 8229118b36..112bd7d505 100644
--- a/java/org/apache/catalina/valves/ErrorReportValve.java
+++ b/java/org/apache/catalina/valves/ErrorReportValve.java
@@ -79,6 +79,7 @@ public class ErrorReportValve
     /**
      * Return descriptive information about this Valve implementation.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -99,6 +100,7 @@ public class ErrorReportValve
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet error occurs
      */
+    @Override
     public void invoke(Request request, Response response)
         throws IOException, ServletException {
 

==================================================
PersistentValve.java
index ad4742cc31..28fedba742 100644
--- a/java/org/apache/catalina/valves/ExtendedAccessLogValve.java
+++ b/java/org/apache/catalina/valves/ExtendedAccessLogValve.java
@@ -151,6 +151,7 @@ public class ExtendedAccessLogValve
     /**
      * Return descriptive information about this implementation.
      */
+    @Override
     public String getInfo() {
         return (extendedAccessLogInfo);
     }
@@ -209,6 +210,7 @@ public class ExtendedAccessLogValve
     /**
      * Open the new log file for the date specified by <code>dateStamp</code>.
      */
+    @Override
     protected synchronized void open() {
         super.open();
         if (currentLogFile.length()==0) {
@@ -228,6 +230,7 @@ public class ExtendedAccessLogValve
         
         private static final ThreadLocal<ElementTimestampStruct> currentDate =
                 new ThreadLocal<ElementTimestampStruct>() {
+            @Override
             protected ElementTimestampStruct initialValue() {
                 return new ElementTimestampStruct("yyyy-MM-dd");
             }
@@ -254,6 +257,7 @@ public class ExtendedAccessLogValve
         
         private static final ThreadLocal<ElementTimestampStruct> currentTime =
                 new ThreadLocal<ElementTimestampStruct>() {
+            @Override
             protected ElementTimestampStruct initialValue() {
                 return new ElementTimestampStruct("HH:mm:ss");
             }
@@ -528,6 +532,7 @@ public class ExtendedAccessLogValve
         
     }
     
+    @Override
     protected AccessLogElement[] createLogElements() {
         if (log.isDebugEnabled()) {
             log.debug("decodePattern, pattern =" + pattern);

==================================================
RemoteAddrValve.java
index 944a4de8af..c866bcfaf1 100644
--- a/java/org/apache/catalina/valves/PersistentValve.java
+++ b/java/org/apache/catalina/valves/PersistentValve.java
@@ -78,6 +78,7 @@ public class PersistentValve
     /**
      * Return descriptive information about this Valve implementation.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -99,6 +100,7 @@ public class PersistentValve
      * @exception IOException if an input/output error occurred
      * @exception ServletException if a servlet error occurred
      */
+    @Override
     public void invoke(Request request, Response response)
         throws IOException, ServletException {
 

==================================================
RemoteHostValve.java
index 4ea725e717..7df3faa2c4 100644
--- a/java/org/apache/catalina/valves/RemoteAddrValve.java
+++ b/java/org/apache/catalina/valves/RemoteAddrValve.java
@@ -53,6 +53,7 @@ public final class RemoteAddrValve
     /**
      * Return descriptive information about this Valve implementation.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -75,6 +76,7 @@ public final class RemoteAddrValve
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet error occurs
      */
+    @Override
     public void invoke(Request request, Response response)
         throws IOException, ServletException {
 

==================================================
RequestFilterValve.java
index b6d67d1e98..ce983209e9 100644
--- a/java/org/apache/catalina/valves/RemoteHostValve.java
+++ b/java/org/apache/catalina/valves/RemoteHostValve.java
@@ -53,6 +53,7 @@ public final class RemoteHostValve
     /**
      * Return descriptive information about this Valve implementation.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -75,6 +76,7 @@ public final class RemoteHostValve
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet error occurs
      */
+    @Override
     public void invoke(Request request, Response response)
         throws IOException, ServletException {
 

==================================================
SSLValve.java
index cb25eaede6..e774e491d3 100644
--- a/java/org/apache/catalina/valves/RequestFilterValve.java
+++ b/java/org/apache/catalina/valves/RequestFilterValve.java
@@ -173,6 +173,7 @@ public abstract class RequestFilterValve
     /**
      * Return descriptive information about this Valve implementation.
      */
+    @Override
     public String getInfo() {
 
         return (info);
@@ -195,6 +196,7 @@ public abstract class RequestFilterValve
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet error occurs
      */
+    @Override
     public abstract void invoke(Request request, Response response)
         throws IOException, ServletException;
 

==================================================
SemaphoreValve.java
index b9b1a29867..f09c0eef1f 100644
--- a/java/org/apache/catalina/valves/SSLValve.java
+++ b/java/org/apache/catalina/valves/SSLValve.java
@@ -65,6 +65,7 @@ public class SSLValve
             return null;
         return strcert0;
     } 
+    @Override
     public void invoke(Request request, Response response)
         throws IOException, ServletException {
 

==================================================
ValveBase.java
index c991710a7b..ebb738437e 100644
--- a/java/org/apache/catalina/valves/SemaphoreValve.java
+++ b/java/org/apache/catalina/valves/SemaphoreValve.java
@@ -210,6 +210,7 @@ public class SemaphoreValve
     /**
      * Return descriptive information about this Valve implementation.
      */
+    @Override
     public String getInfo() {
         return (info);
     }
@@ -224,6 +225,7 @@ public class SemaphoreValve
      * @exception IOException if an input/output error occurs
      * @exception ServletException if a servlet error occurs
      */
+    @Override
     public void invoke(Request request, Response response)
         throws IOException, ServletException {
 

==================================================
