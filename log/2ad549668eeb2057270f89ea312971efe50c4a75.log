2ad549668eeb2057270f89ea312971efe50c4a75
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56698
==================================================
Mark Emlyn
==================================================
Mon Jul 7 12:59:05 2014 +0000
==================================================
PersistentManagerBase.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56698
When persisting idle sessions, only persist newly idle sessions. Patch provided by Felix Schumacher.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1608443 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestPersistentManager.java
index a562757c92..b8000e9142 100644
--- a/java/org/apache/catalina/session/PersistentManagerBase.java
+++ b/java/org/apache/catalina/session/PersistentManagerBase.java
@@ -135,6 +135,12 @@ public abstract class PersistentManagerBase extends ManagerBase
      */
     private static final String name = "PersistentManagerBase";
 
+    /**
+     * Key of the note of a session in which the timestamp of last backup is stored.
+     */
+    private static final String PERSISTED_LAST_ACCESSED_TIME =
+            "org.apache.catalina.session.PersistentManagerBase.persistedLastAccessedTime";
+
 
     /**
      * Store object which will manage the Session store.
@@ -988,6 +994,12 @@ public abstract class PersistentManagerBase extends ManagerBase
                 synchronized (session) {
                     if (!session.isValid())
                         continue;
+                    long lastAccessedTime = session.getLastAccessedTime();
+                    Long persistedLastAccessedTime =
+                            (Long) session.getNote(PERSISTED_LAST_ACCESSED_TIME);
+                    if (persistedLastAccessedTime != null &&
+                            lastAccessedTime == persistedLastAccessedTime.longValue())
+                        continue;
                     int timeIdle = (int) (session.getIdleTime() / 1000L);
                     if (timeIdle > maxIdleBackup) {
                         if (log.isDebugEnabled())
@@ -1001,6 +1013,8 @@ public abstract class PersistentManagerBase extends ManagerBase
                         } catch (IOException e) {
                             // This is logged in writeSession()
                         }
+                        session.setNote(PERSISTED_LAST_ACCESSED_TIME,
+                                Long.valueOf(lastAccessedTime));
                     }
                 }
             }

==================================================
