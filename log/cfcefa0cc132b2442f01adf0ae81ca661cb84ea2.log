cfcefa0cc132b2442f01adf0ae81ca661cb84ea2
==================================================
Simplify AprEndpoint socket bind for all platforms
==================================================
Michael Osipov
==================================================
Sat May 22 13:36:57 2021 +0200
==================================================
AprEndpoint.java
Simplify AprEndpoint socket bind for all platforms

* Unconditionally use APR_UNSPEC on all platforms and especially on *BSD which
  runs fine on IPv4 and IPv6 hosts.
* Apply IPV6_V6ONLY only if libapr has been compiled with IPv6 support and the
  socket address is of family APR_INET6.

This mimics the behavior of HTTPd's listen.c for apr_sockaddr_info_get() along
with open_listeners() and make_sock() with IPV6_V6ONLY flag.



==================================================
TestXxxEndpoint.java
index b388d04330..d11d69a0b8 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -351,16 +351,7 @@ public class AprEndpoint extends AbstractEndpoint<Long,Long> implements SNICallB
             if (getAddress() != null) {
                 hostname = getAddress().getHostAddress();
             }
-            family = Socket.APR_INET;
-            if (Library.APR_HAVE_IPV6) {
-                if (hostname == null) {
-                    if (!OS.IS_BSD) {
-                        family = Socket.APR_UNSPEC;
-                    }
-                } else if (hostname.indexOf(':') >= 0) {
-                    family = Socket.APR_UNSPEC;
-                }
-            }
+            family = Socket.APR_UNSPEC;
         }
 
         long sockAddress = Address.info(hostname, family, getPortWithOffset(), 0, rootPool);
@@ -370,13 +361,14 @@ public class AprEndpoint extends AbstractEndpoint<Long,Long> implements SNICallB
             serverSock = Socket.create(family, Socket.SOCK_STREAM, 0, rootPool);
         }
         else {
-            serverSock = Socket.create(Address.getInfo(sockAddress).family,
+            int saFamily = Address.getInfo(sockAddress).family;
+            serverSock = Socket.create(saFamily,
                 Socket.SOCK_STREAM,
                 Socket.APR_PROTO_TCP, rootPool);
             if (OS.IS_UNIX) {
                 Socket.optSet(serverSock, Socket.APR_SO_REUSEADDR, 1);
             }
-            if (Library.APR_HAVE_IPV6) {
+            if (Library.APR_HAVE_IPV6 && saFamily == Socket.APR_INET6) {
                 if (getIpv6v6only()) {
                     Socket.optSet(serverSock, Socket.APR_IPV6_V6ONLY, 1);
                 } else {

==================================================
