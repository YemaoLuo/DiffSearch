1e0be6c88961f6a7c6bfe13756130120c5d89978
==================================================
Small performance improvement and add some notes on performance.
==================================================
Mark Thomas
==================================================
Tue Mar 1 21:03:12 2016 +0000
==================================================
UriUtil.java
Small performance improvement and add some notes on performance.
The gain probably wasn't worth the time spent on this but the code is no more complex and it is faster so it makes sense to keep it.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1733154 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestUriUtil.java
index dce2bfdd88..4e959ff26d 100644
--- a/java/org/apache/tomcat/util/buf/UriUtil.java
+++ b/java/org/apache/tomcat/util/buf/UriUtil.java
@@ -19,12 +19,17 @@ package org.apache.tomcat.util.buf;
 import java.io.File;
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.util.regex.Pattern;
 
 /**
  * Utility class for working with URIs and URLs.
  */
 public final class UriUtil {
 
+    private static Pattern PATTERN_EXCLAMATION_MARK = Pattern.compile("!/");
+    private static Pattern PATTERN_CARET = Pattern.compile("\\^/");
+    private static Pattern PATTERN_ASTERISK = Pattern.compile("\\*/");
+
     private UriUtil() {
         // Utility class. Hide default constructor
     }
@@ -99,6 +104,18 @@ public final class UriUtil {
     }
 
 
+    /*
+     * When testing on markt's desktop each iteration was taking ~1420ns when
+     * using String.replaceAll().
+     *
+     * Switching the implementation to use pre-compiled patterns and
+     * Pattern.matcher(input).replaceAll(replacement) reduced this by ~10%.
+     *
+     * Note: Given the very small absolute time of a single iteration, even for
+     *       a web application with 1000 JARs this is only going to add ~3ms.
+     *       It is therefore unlikely that further optimisation will be
+     *       necessary.
+     */
     /*
      * Pulled out into a separate method in case we need to handle other unusual
      * sequences in the future.
@@ -106,9 +123,9 @@ public final class UriUtil {
     private static String makeSafeForJarUrl(String input) {
         // Since "!/" has a special meaning in a JAR URL, make sure that the
         // sequence is properly escaped if present.
-        String tmp = input.replaceAll("!/", "%21/");
+        String tmp = PATTERN_EXCLAMATION_MARK.matcher(input).replaceAll("%21/");
         // Tomcat's custom jar:war: URL handling treats */ and ^/ as special
-        tmp = tmp.replaceAll("^/", "%5e/");
-        return tmp.replaceAll("\\*/", "%2a/");
+        tmp = PATTERN_CARET.matcher(tmp).replaceAll("%5e/");
+        return PATTERN_ASTERISK.matcher(tmp).replaceAll("%2a/");
     }
 }

==================================================
