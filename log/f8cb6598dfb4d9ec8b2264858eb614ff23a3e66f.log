f8cb6598dfb4d9ec8b2264858eb614ff23a3e66f
==================================================
Code clean up in o.a.t.until.net.jsse
==================================================
Mark Emlyn
==================================================
Thu Aug 5 12:55:15 2010 +0000
==================================================
JSSEFactory.java
Code clean up in o.a.t.until.net.jsse
 - @Override
 - import order
 - unused code
 - unnecessary code

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@982589 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JSSEImplementation.java
index 565fa203f7..7745748467 100644
--- a/java/org/apache/tomcat/util/net/jsse/JSSEFactory.java
+++ b/java/org/apache/tomcat/util/net/jsse/JSSEFactory.java
@@ -19,11 +19,11 @@ package org.apache.tomcat.util.net.jsse;
 
 import java.net.Socket;
 
+import javax.net.ssl.SSLSession;
 import javax.net.ssl.SSLSocket;
 
 import org.apache.tomcat.util.net.SSLSupport;
 import org.apache.tomcat.util.net.ServerSocketFactory;
-import javax.net.ssl.SSLSession;
 
 /** 
  * Factory interface to construct components based on the JSSE version

==================================================
JSSEKeyManager.java
index 94db07ee08..6a0949f55f 100644
--- a/java/org/apache/tomcat/util/net/jsse/JSSEImplementation.java
+++ b/java/org/apache/tomcat/util/net/jsse/JSSEImplementation.java
@@ -19,10 +19,11 @@ package org.apache.tomcat.util.net.jsse;
 
 import java.net.Socket;
 
+import javax.net.ssl.SSLSession;
+
 import org.apache.tomcat.util.net.SSLImplementation;
 import org.apache.tomcat.util.net.SSLSupport;
 import org.apache.tomcat.util.net.ServerSocketFactory;
-import javax.net.ssl.SSLSession;
 
 /* JSSEImplementation:
 

==================================================
JSSESupport.java
index 7b82696ca1..a06a42a652 100644
--- a/java/org/apache/tomcat/util/net/jsse/JSSEKeyManager.java
+++ b/java/org/apache/tomcat/util/net/jsse/JSSEKeyManager.java
@@ -21,6 +21,7 @@ import java.net.Socket;
 import java.security.Principal;
 import java.security.PrivateKey;
 import java.security.cert.X509Certificate;
+
 import javax.net.ssl.X509KeyManager;
 
 /**
@@ -63,6 +64,7 @@ public final class JSSEKeyManager implements X509KeyManager {
      * @return The alias name for the desired key, or null if there are no
      * matches
      */
+    @Override
     public String chooseClientAlias(String[] keyType, Principal[] issuers,
                                     Socket socket) {
         return delegate.chooseClientAlias(keyType, issuers, socket);
@@ -81,6 +83,7 @@ public final class JSSEKeyManager implements X509KeyManager {
      *
      * @return Alias name for the desired key
      */
+    @Override
     public String chooseServerAlias(String keyType, Principal[] issuers,
                                     Socket socket) {
         return serverKeyAlias;
@@ -95,6 +98,7 @@ public final class JSSEKeyManager implements X509KeyManager {
      * and the root certificate authority last), or null if the alias can't be
      * found
      */
+    @Override
     public X509Certificate[] getCertificateChain(String alias) {
         return delegate.getCertificateChain(alias); 
     }
@@ -111,6 +115,7 @@ public final class JSSEKeyManager implements X509KeyManager {
      * @return Array of the matching alias names, or null if there were no
      * matches
      */
+    @Override
     public String[] getClientAliases(String keyType, Principal[] issuers) {
         return delegate.getClientAliases(keyType, issuers);
     }
@@ -127,6 +132,7 @@ public final class JSSEKeyManager implements X509KeyManager {
      * @return Array of the matching alias names, or null if there were no
      * matches
      */
+    @Override
     public String[] getServerAliases(String keyType, Principal[] issuers) {
         return delegate.getServerAliases(keyType, issuers);
     }
@@ -138,6 +144,7 @@ public final class JSSEKeyManager implements X509KeyManager {
      *
      * @return The requested key, or null if the alias can't be found
      */
+    @Override
     public PrivateKey getPrivateKey(String alias) {
         return delegate.getPrivateKey(alias);
     }

==================================================
NioX509KeyManager.java
index 8087435bca..b243cd539a 100644
--- a/java/org/apache/tomcat/util/net/jsse/JSSESupport.java
+++ b/java/org/apache/tomcat/util/net/jsse/JSSESupport.java
@@ -74,6 +74,7 @@ class JSSESupport implements SSLSupport, SSLSessionManager {
         this.session = session;
     }
 
+    @Override
     public String getCipherSuite() throws IOException {
         // Look up the current SSLSession
         if (session == null)
@@ -81,13 +82,14 @@ class JSSESupport implements SSLSupport, SSLSessionManager {
         return session.getCipherSuite();
     }
 
+    @Override
     public Object[] getPeerCertificateChain() 
         throws IOException {
         return getPeerCertificateChain(false);
     }
 
-    protected java.security.cert.X509Certificate [] getX509Certificates(SSLSession session) 
-        throws IOException {
+    protected java.security.cert.X509Certificate [] getX509Certificates(
+            SSLSession session) {
         Certificate [] certs=null;
         try {
             certs = session.getPeerCertificates();
@@ -110,7 +112,8 @@ class JSSESupport implements SSLSupport, SSLSessionManager {
                         CertificateFactory.getInstance("X.509");
                     ByteArrayInputStream stream =
                         new ByteArrayInputStream(buffer);
-                    x509Certs[i] = (java.security.cert.X509Certificate) cf.generateCertificate(stream);
+                    x509Certs[i] = (java.security.cert.X509Certificate)
+                            cf.generateCertificate(stream);
                 } catch(Exception ex) { 
                     log.info("Error translating cert " + certs[i], ex);
                     return null;
@@ -124,6 +127,7 @@ class JSSESupport implements SSLSupport, SSLSessionManager {
         return x509Certs;
     }
 
+    @Override
     public Object[] getPeerCertificateChain(boolean force)
         throws IOException {
         // Look up the current SSLSession
@@ -195,6 +199,7 @@ class JSSESupport implements SSLSupport, SSLSessionManager {
     /**
      * Copied from <code>org.apache.catalina.valves.CertificateValve</code>
      */
+    @Override
     public Integer getKeySize() 
         throws IOException {
         // Look up the current SSLSession
@@ -224,6 +229,7 @@ class JSSESupport implements SSLSupport, SSLSessionManager {
         return keySize;
     }
 
+    @Override
     public String getSessionId()
         throws IOException {
         // Look up the current SSLSession
@@ -246,6 +252,7 @@ class JSSESupport implements SSLSupport, SSLSessionManager {
 
     private static class Listener implements HandshakeCompletedListener {
         volatile boolean completed = false;
+        @Override
         public void handshakeCompleted(HandshakeCompletedEvent event) {
             completed = true;
         }
@@ -257,6 +264,7 @@ class JSSESupport implements SSLSupport, SSLSessionManager {
     /**
      * Invalidate the session this support object is associated with.
      */
+    @Override
     public void invalidateSession() {
         session.invalidate();
     }

==================================================
