c1237ef1d9b1089dab16d075b595cc1bb1ebebb6
==================================================
Use StringManager to provide i18n support in the org.apache.catalina.tribes.transport package.
==================================================
Keiichi Fujino
==================================================
Thu May 21 09:56:02 2015 +0000
==================================================
PooledSender.java
index 5cb87cb11e..2e308d8e3f 100644
--- a/java/org/apache/catalina/tribes/transport/LocalStrings_es.properties
+++ b/java/org/apache/catalina/tribes/transport/LocalStrings_es.properties
@@ -12,12 +12,12 @@
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 # See the License for the specific language governing permissions and
 # limitations under the License.
-IDataSender.ack.eof = EOF alcanzado en puerto local [{0}\:{1,number,integer}]
-IDataSender.ack.missing = No puedo leer reconocimiento desde [{0}\:{1,number,integer}] en {2,number,integer} ms. Desconectando conector e intentando otra vez.
-IDataSender.ack.wrong = Falta ACK correcto tras 10 bytes le\u00EDdos en puerto local [{0}\:{1,number,integer}]
-IDataSender.closeSocket = El remitente cerr\u00F3 el conector con [{0}\:{1,number,integer}] (contador de cierre {2,number,integer})
-IDataSender.disconnect = Remitente desconectado de [{0}\:{1,number,integer}] (contador de desconexi\u00F3n {2,number,integer})
-IDataSender.openSocket = Remitente abri\u00F3 conector con [{0}\:{1,number,integer}] (contador de apertura {2,number,integer})
-IDataSender.openSocket.failure = \u00A1No pude abrir conector de remitente [{0}\:{1,number,integer}]\! (contador de fallo de apertura {2,number,integer})
-IDataSender.send.again = Enviar datos de nuevo a [{0}\:{1,number,integer}]
+bioSender.ack.eof = EOF alcanzado en puerto local [{0}\:{1,number,integer}]
+bioSender.ack.missing = No puedo leer reconocimiento desde [{0}\:{1,number,integer}] en {2,number,integer} ms. Desconectando conector e intentando otra vez.
+bioSender.ack.wrong = Falta ACK correcto tras 10 bytes le\u00EDdos en puerto local [{0}\:{1,number,integer}]
+bioSender.closeSocket = El remitente cerr\u00F3 el conector con [{0}\:{1,number,integer}] (contador de cierre {2,number,integer})
+bioSender.disconnect = Remitente desconectado de [{0}\:{1,number,integer}] (contador de desconexi\u00F3n {2,number,integer})
+bioSender.openSocket = Remitente abri\u00F3 conector con [{0}\:{1,number,integer}] (contador de apertura {2,number,integer})
+bioSender.openSocket.failure = \u00A1No pude abrir conector de remitente [{0}\:{1,number,integer}]\! (contador de fallo de apertura {2,number,integer})
+bioSender.send.again = Enviar datos de nuevo a [{0}\:{1,number,integer}]
 PooledSender.senderDisconnectFail = No pude desconectar al remitente

==================================================
ReceiverBase.java
index 493ed2b2fe..afac8227a7 100644
--- a/java/org/apache/catalina/tribes/transport/PooledSender.java
+++ b/java/org/apache/catalina/tribes/transport/PooledSender.java
@@ -160,7 +160,7 @@ public abstract class PooledSender extends AbstractSender implements MultiPointS
         public synchronized DataSender getSender(long timeout) {
             long start = System.currentTimeMillis();
             while ( true ) {
-                if (!isOpen)throw new IllegalStateException("Queue is closed");
+                if (!isOpen)throw new IllegalStateException(sm.getString("pooledSender.closed.queue"));
                 DataSender sender = null;
                 if (notinuse.size() == 0 && inuse.size() < limit) {
                     sender = parent.getNewDataSender();

==================================================
