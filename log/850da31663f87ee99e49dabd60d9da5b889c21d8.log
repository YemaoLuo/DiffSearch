850da31663f87ee99e49dabd60d9da5b889c21d8
==================================================
Simplified the API, no need for the IOExceptions
==================================================
Filip Hanik
==================================================
Thu Jun 7 12:15:22 2007 +0000
==================================================
CometEvent.java
Simplified the API, no need for the IOExceptions
Updated documentation, added in some notes about life cycle, more source code examples to come


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@545151 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CometProcessor.java
index 06ed2faa67..e296be7a81 100644
--- a/java/org/apache/catalina/CometEvent.java
+++ b/java/org/apache/catalina/CometEvent.java
@@ -26,7 +26,9 @@ import javax.servlet.http.HttpServletResponse;
 
 /**
  * The CometEvent interface.
+ * A comet event is the contract between the servlet container and the servlet implementation(CometProcessor) for handling comet connections.
  * 
+ * @see CometProcessor
  * @author Filip Hanik
  * @author Remy Maucherat
  */
@@ -174,14 +176,14 @@ public interface CometEvent {
      * Tomcat Comet allows you to configure for additional options:<br/>
      * the <code>COMET_NON_BLOCKING</code> bit signals whether writing and reading from the request 
      * or writing to the response will be non blocking.<br/>
-     * the <code>COMET_NO_IO</code> bit signals the container that you are not interested in 
-     * receiving any IO events from the container.
-     * @param cometOptions int - the option bit set, see #COMET_NON_BLOCKING and #COMET_NO_IO
-     * @throws IOException -
+     * the <code>COMET_BLOCKING</code> bit signals the container you wish for read and write to be done in a blocking fashion
+     * @param cometOptions int - the option bit set
      * @throws IllegalStateException - if this method is invoked outside of the BEGIN event
+     * @see #CometConfiguration
+     * @see #isReadable()
+     * @see #isWriteable()
      */
-    public void configure(CometConfiguration... options)
-        throws IOException, IllegalStateException;
+    public void configure(CometConfiguration... options) throws IllegalStateException;
     
     /**
      * Returns the configuration for this Comet connection
@@ -202,21 +204,17 @@ public interface CometEvent {
      * Registers the Comet connection with the container for IO notifications.
      * These could be notifications 
      * @param operations
-     * @throws IOException
      * @throws IllegalStateException - if you are trying to register with a socket that already is registered
      * or if the operation you are trying to register is invalid.
      */
-    public void register(CometOperation... operations)
-        throws IOException, IllegalStateException;
+    public void register(CometOperation... operations) throws IllegalStateException;
     
     /**
      * Unregisters Comet operations for this CometConnection
      * @param operations CometOperation[]
-     * @throws IOException
      * @throws IllegalStateException
      */
-    public void unregister(CometOperation... operations)
-        throws IOException, IllegalStateException;
+    public void unregister(CometOperation... operations) throws IllegalStateException;
 
     /**
      * Returns what the current IO notifications that the Comet

==================================================
CometEventImpl.java
index 16b57d994c..9a3498d6ea 100644
--- a/java/org/apache/catalina/CometProcessor.java
+++ b/java/org/apache/catalina/CometProcessor.java
@@ -28,7 +28,17 @@ import javax.servlet.Servlet;
  * asynchronous IO, recieving events when data is available for reading, and
  * being able to output data without the need for being invoked by the container.
  * Note: When this interface is implemented, the service method of the servlet will
- * never be called, and will be replaced with a begin event.
+ * never be called, and will be replaced with a begin event. Should the connector you 
+ * have configured not support Comet, the service method will be called, and the 
+ * request/response will not be marked as comet, but instead behave like a regular 
+ * Servlet<br/>
+ * 
+ * A Comet request, aka Comet connection, referenced through the #CometEvent and the request/response pair
+ * and has a lifecycle somewhat different to a regular servlet.<br/>
+ * 
+ * Read more about it in the Tomcat documentation about Advanced IO, 
+ * 
+ * 
  */
 public interface CometProcessor extends Servlet 
 {

==================================================
