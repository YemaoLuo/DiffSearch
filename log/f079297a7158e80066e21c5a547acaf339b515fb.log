f079297a7158e80066e21c5a547acaf339b515fb
==================================================
When there is ByteBuffer use the new method SocketWrapperBase.write(boolean, ByteBuffer)
==================================================
Violeta Georgieva
==================================================
Fri Sep 23 11:06:12 2016 +0000
==================================================
Http2UpgradeHandler.java
When there is ByteBuffer use the new method SocketWrapperBase.write(boolean, ByteBuffer)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1762051 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Stream.java
index 18dcd99a7a..67c2140cc3 100644
--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java
@@ -537,7 +537,7 @@ public class Http2UpgradeHandler extends AbstractStream implements InternalHttpU
                 ByteUtil.set31Bits(header, 5, stream.getIdentifier().intValue());
                 try {
                     socketWrapper.write(true, header, 0, header.length);
-                    socketWrapper.write(true, target.array(), target.arrayOffset(), target.limit());
+                    socketWrapper.write(true, target);
                     socketWrapper.flush(true);
                 } catch (IOException ioe) {
                     handleAppInitiatedIOException(ioe);
@@ -606,7 +606,7 @@ public class Http2UpgradeHandler extends AbstractStream implements InternalHttpU
                 }
                 ByteUtil.set31Bits(header, 5, stream.getIdentifier().intValue());
                 socketWrapper.write(true, header, 0, header.length);
-                socketWrapper.write(true, target.array(), target.arrayOffset(), target.limit());
+                socketWrapper.write(true, target);
                 socketWrapper.flush(true);
             }
         }
@@ -640,8 +640,10 @@ public class Http2UpgradeHandler extends AbstractStream implements InternalHttpU
         synchronized (socketWrapper) {
             try {
                 socketWrapper.write(true, header, 0, header.length);
-                socketWrapper.write(true, data.array(), data.arrayOffset() + data.position(),
-                        len);
+                int orgLimit = data.limit();
+                data.limit(len);
+                socketWrapper.write(true, data);
+                data.limit(orgLimit);
                 socketWrapper.flush(true);
             } catch (IOException ioe) {
                 handleAppInitiatedIOException(ioe);

==================================================
