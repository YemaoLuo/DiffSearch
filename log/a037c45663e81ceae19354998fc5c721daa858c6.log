a037c45663e81ceae19354998fc5c721daa858c6
==================================================
Started with a few i18n, but in the end fully refactored the storeconfig registry loading.
==================================================
Remy Maucherat
==================================================
Fri Nov 30 10:33:49 2018 +0000
==================================================
StoreConfig.java
index d480d22ff4..3716c9f92e 100644
--- a/java/org/apache/catalina/storeconfig/LocalStrings.properties
+++ b/java/org/apache/catalina/storeconfig/LocalStrings.properties
@@ -13,10 +13,15 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
+config.emptyObjectName=Invalid null or empty object name
+config.missingContextFile=Missing configuration file of context [{0}] to store
+config.objectNameNotFound=Object name [{0}] not found
 config.storeContextError=Error storing context [{0}]
 config.storeServerError=Error storing server
 
 factory.storeNoDescriptor=Descriptor for element class [{0}] not configured!
 factory.storeTag=store tag [{0}] ( Object: [{1}] )
 
+storeConfigListener.loadError=Error loading StoreConfig
 storeConfigListener.notServer=The listener was added to component other than the Server and will therefore be ignored
+storeConfigListener.registerError=Error registering StoreConfig MBean

==================================================
StoreConfigLifecycleListener.java
index 8a0fcadec1..8708fe98a4 100644
--- a/java/org/apache/catalina/storeconfig/StoreConfig.java
+++ b/java/org/apache/catalina/storeconfig/StoreConfig.java
@@ -29,6 +29,7 @@ import org.apache.catalina.Server;
 import org.apache.catalina.Service;
 import org.apache.catalina.core.StandardContext;
 import org.apache.catalina.mbeans.MBeanUtils;
+import org.apache.catalina.startup.Bootstrap;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.res.StringManager;
@@ -119,8 +120,7 @@ public class StoreConfig implements IStoreConfig {
     public synchronized void storeServer(String aServerName, boolean backup,
             boolean externalAllowed) throws MalformedObjectNameException {
         if (aServerName == null || aServerName.length() == 0) {
-            if (log.isErrorEnabled())
-                log.error("Please, call with a correct server ObjectName!");
+            log.error(sm.getString("config.emptyObjectName"));
             return;
         }
         MBeanServer mserver = MBeanUtils.createServer();
@@ -149,12 +149,11 @@ public class StoreConfig implements IStoreConfig {
                     store(aServer);
                 }
             } catch (Exception e) {
-                if (log.isInfoEnabled())
-                    log.info("Object " + aServerName
-                            + " is no a Server instance or store exception", e);
+                log.error(sm.getString("config.storeServerError"), e);
             }
-        } else if (log.isInfoEnabled())
-            log.info("Server " + aServerName + " not found!");
+        } else {
+            log.info(sm.getString("config.objectNameNotFound", aServerName));
+        }
     }
 
     /**
@@ -171,8 +170,7 @@ public class StoreConfig implements IStoreConfig {
     public synchronized void storeContext(String aContextName, boolean backup,
             boolean externalAllowed) throws MalformedObjectNameException {
         if (aContextName == null || aContextName.length() == 0) {
-            if (log.isErrorEnabled())
-                log.error("Please, call with a correct context ObjectName!");
+            log.error(sm.getString("config.emptyObjectName"));
             return;
         }
         MBeanServer mserver = MBeanUtils.createServer();
@@ -183,44 +181,35 @@ public class StoreConfig implements IStoreConfig {
                         "managedResource");
                 URL configFile = aContext.getConfigFile();
                 if (configFile != null) {
-                    try {
-                        StoreDescription desc = null;
-                        desc = getRegistry().findDescription(
-                                aContext.getClass());
-                        if (desc != null) {
-                            boolean oldSeparate = desc.isStoreSeparate();
-                            boolean oldBackup = desc.isBackup();
-                            boolean oldExternalAllowed = desc
-                                    .isExternalAllowed();
-                            try {
-                                desc.setStoreSeparate(true);
-                                desc.setBackup(backup);
-                                desc.setExternalAllowed(externalAllowed);
-                                desc.getStoreFactory()
-                                        .store(null, -2, aContext);
-                            } finally {
-                                desc.setStoreSeparate(oldSeparate);
-                                desc.setBackup(oldBackup);
-                                desc.setBackup(oldExternalAllowed);
-                            }
+                    StoreDescription desc = null;
+                    desc = getRegistry().findDescription(
+                            aContext.getClass());
+                    if (desc != null) {
+                        boolean oldSeparate = desc.isStoreSeparate();
+                        boolean oldBackup = desc.isBackup();
+                        boolean oldExternalAllowed = desc
+                                .isExternalAllowed();
+                        try {
+                            desc.setStoreSeparate(true);
+                            desc.setBackup(backup);
+                            desc.setExternalAllowed(externalAllowed);
+                            desc.getStoreFactory()
+                            .store(null, -2, aContext);
+                        } finally {
+                            desc.setStoreSeparate(oldSeparate);
+                            desc.setBackup(oldBackup);
+                            desc.setBackup(oldExternalAllowed);
                         }
-                    } catch (Exception e) {
-                        log.error(e);
                     }
-                } else
-                    log.error("Missing configFile at Context "
-                            + aContext.getPath() + " to store!");
+                } else {
+                    log.error(sm.getString("config.missingContextFile", aContext.getPath()));
+                }
             } catch (Exception e) {
-                if (log.isInfoEnabled())
-                    log
-                            .info(
-                                    "Object "
-                                            + aContextName
-                                            + " is no a context instance or store exception",
-                                    e);
+                log.error(sm.getString("config.storeContextError", aContextName), e);
             }
-        } else if (log.isInfoEnabled())
-            log.info("Context " + aContextName + " not found!");
+        } else {
+            log.info(sm.getString("config.objectNameNotFound", aContextName));
+        }
     }
 
     /**
@@ -232,9 +221,8 @@ public class StoreConfig implements IStoreConfig {
      */
     @Override
     public synchronized boolean store(Server aServer) {
-        StoreFileMover mover = new StoreFileMover(System
-                .getProperty("catalina.base"), getServerFilename(),
-                getRegistry().getEncoding());
+        StoreFileMover mover = new StoreFileMover(Bootstrap.getCatalinaBase(),
+                getServerFilename(), getRegistry().getEncoding());
         // Open an output writer for the new configuration file
         try {
             try (PrintWriter writer = mover.getWriter()) {
@@ -272,7 +260,7 @@ public class StoreConfig implements IStoreConfig {
                 log.error(sm.getString("config.storeContextError", aContext.getName()), e);
             }
         } else {
-            log.error("Missing configFile at Context " + aContext.getPath());
+            log.error(sm.getString("config.missingContextFile", aContext.getPath()));
         }
         return false;
     }

==================================================
StoreLoader.java
index 930fc4089d..a3c7e6de73 100644
--- a/java/org/apache/catalina/storeconfig/StoreConfigLifecycleListener.java
+++ b/java/org/apache/catalina/storeconfig/StoreConfigLifecycleListener.java
@@ -85,17 +85,12 @@ public class StoreConfigLifecycleListener implements LifecycleListener {
             Class<?> clazz = Class.forName(getStoreConfigClass(), true, this
                     .getClass().getClassLoader());
             storeConfig = (IStoreConfig) clazz.getConstructor().newInstance();
-            if (null == getStoreRegistry())
-                // default Loading
-                loader.load();
-            else
-                // load a special file registry (url)
-                loader.load(getStoreRegistry());
+            loader.load(getStoreRegistry());
             // use the loader Registry
             storeConfig.setRegistry(loader.getRegistry());
             storeConfig.setServer(server);
         } catch (Exception e) {
-            log.error("createMBean load", e);
+            log.error(sm.getString("storeConfigListener.loadError"), e);
             return;
         }
         try {
@@ -103,7 +98,7 @@ public class StoreConfigLifecycleListener implements LifecycleListener {
             oname = new ObjectName("Catalina:type=StoreConfig" );
             registry.registerComponent(storeConfig, oname, "StoreConfig");
         } catch (Exception ex) {
-            log.error("createMBean register MBean", ex);
+            log.error(sm.getString("storeConfigListener.registerError"), ex);
         }
     }
 

==================================================
