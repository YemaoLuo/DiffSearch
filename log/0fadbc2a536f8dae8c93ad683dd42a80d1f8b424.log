0fadbc2a536f8dae8c93ad683dd42a80d1f8b424
==================================================
Lifecycle refactoring - Valves
==================================================
Mark Emlyn
==================================================
Sat Mar 6 09:31:47 2010 +0000
==================================================
AuthenticatorBase.java
Lifecycle refactoring - Valves
Most valves were firing the LifecycleState.STARTING event too early
Make the toString() consistent for all Valves
Some copy and paste errors in i18n start/stop messages are fixed as a side effect. Some unused messages were also removed.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@919723 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SSLAuthenticator.java
index 2363fc5795..ec5fbf34d4 100644
--- a/java/org/apache/catalina/authenticator/LocalStrings_ja.properties
+++ b/java/org/apache/catalina/authenticator/LocalStrings_ja.properties
@@ -13,7 +13,6 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-authenticator.alreadyStarted=\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u306f\u65e2\u306b\u8d77\u52d5\u3055\u308c\u3066\u3044\u307e\u3059
 authenticator.certificates=\u3053\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u8a8d\u8a3c\u30c1\u30a7\u30fc\u30f3\u304c\u3042\u308a\u307e\u305b\u3093
 authenticator.forbidden=\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f\u30ea\u30bd\u30fc\u30b9\u3078\u306e\u30a2\u30af\u30bb\u30b9\u304c\u62d2\u5426\u3055\u308c\u307e\u3057\u305f
 authenticator.formlogin=\u30d5\u30a9\u30fc\u30e0\u30ed\u30b0\u30a4\u30f3\u30da\u30fc\u30b8\u3078\u306e\u7121\u52b9\u306a\u76f4\u63a5\u53c2\u7167\u3067\u3059
@@ -22,7 +21,6 @@ authenticator.keystore=\u30ad\u30fc\u30b9\u30c8\u30a2\u3092\u30ed\u30fc\u30c9\u4
 authenticator.manager=\u30c8\u30e9\u30b9\u30c8\u30de\u30cd\u30fc\u30b8\u30e3\u3092\u521d\u671f\u5316\u4e2d\u306e\u4f8b\u5916\u3067\u3059
 authenticator.notAuthenticated=\u8a2d\u5b9a\u30a8\u30e9\u30fc: \u8a8d\u8a3c\u3055\u308c\u305f\u4e3b\u4f53\u306a\u3057\u306b\u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u3092\u5b9f\u884c\u3067\u304d\u307e\u305b\u3093
 authenticator.notContext=\u8a2d\u5b9a\u30a8\u30e9\u30fc: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093
-authenticator.notStarted=\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u306f\u307e\u3060\u8d77\u52d5\u3055\u308c\u3066\u3044\u307e\u305b\u3093
 authenticator.sessionExpired=\u30ed\u30b0\u30a4\u30f3\u30d7\u30ed\u30bb\u30b9\u306b\u8a8d\u3081\u3089\u308c\u3066\u3044\u305f\u6642\u9593\u304c\u904e\u304e\u307e\u3057\u305f\u3002\u7d99\u7d9a\u3057\u305f\u3044\u306a\u3089\u3070\uff0c\u30d0\u30c3\u30af\u30dc\u30bf\u30f3\u30922\u5ea6\u62bc\u3057\u3066\u304b\u3089\u518d\u5ea6\u30ea\u30f3\u30af\u3092\u62bc\u3059\u304b\uff0c\u30d6\u30e9\u30a6\u30b6\u3092\u7acb\u3061\u4e0a\u3052\u76f4\u3057\u3066\u304f\u3060\u3055\u3044
 authenticator.unauthorized=\u7528\u610f\u3055\u308c\u305f\u8a3c\u660e\u66f8\u3067\u8a8d\u8a3c\u3067\u304d\u307e\u305b\u3093
 authenticator.userDataConstraint=\u3053\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u3001\u3053\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30e6\u30fc\u30b6\u30c7\u30fc\u30bf\u306e\u5236\u9650\u306b\u9055\u53cd\u3057\u3066\u3044\u307e\u3059

==================================================
SingleSignOn.java
index e696f4f7f3..0bc2e0d165 100644
--- a/java/org/apache/catalina/authenticator/SSLAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/SSLAuthenticator.java
@@ -27,7 +27,6 @@ import javax.servlet.http.HttpServletResponse;
 
 import org.apache.coyote.ActionCode;
 import org.apache.catalina.Globals;
-import org.apache.catalina.LifecycleException;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.deploy.LoginConfig;
 
@@ -162,39 +161,4 @@ public class SSLAuthenticator
         return (true);
 
     }
-
-
-    // ------------------------------------------------------ Lifecycle Methods
-
-
-    /**
-     * Initialize the database we will be using for client verification
-     * and certificate validation (if any).
-     *
-     * @exception LifecycleException if this component detects a fatal error
-     *  that prevents this component from being used
-     */
-    @Override
-    public void start() throws LifecycleException {
-
-        super.start();
-
-    }
-
-
-    /**
-     * Finalize the database we used for client verification and
-     * certificate validation (if any).
-     *
-     * @exception LifecycleException if this component detects a fatal error
-     *  that prevents this component from being used
-     */
-    @Override
-    public void stop() throws LifecycleException {
-
-        super.stop();
-
-    }
-
-
 }

==================================================
ClusterSingleSignOn.java
index 6a4d6ce337..026d7585ba 100644
--- a/java/org/apache/catalina/authenticator/SingleSignOn.java
+++ b/java/org/apache/catalina/authenticator/SingleSignOn.java
@@ -27,16 +27,12 @@ import java.util.Map;
 import javax.servlet.ServletException;
 import javax.servlet.http.Cookie;
 
-import org.apache.catalina.Lifecycle;
-import org.apache.catalina.LifecycleException;
-import org.apache.catalina.LifecycleListener;
 import org.apache.catalina.Realm;
 import org.apache.catalina.Session;
 import org.apache.catalina.SessionEvent;
 import org.apache.catalina.SessionListener;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
-import org.apache.catalina.util.LifecycleSupport;
 import org.apache.tomcat.util.res.StringManager;
 import org.apache.catalina.valves.ValveBase;
 
@@ -62,9 +58,7 @@ import org.apache.catalina.valves.ValveBase;
  * @version $Revision$ $Date$
  */
 
-public class SingleSignOn
-    extends ValveBase
-    implements Lifecycle, SessionListener {
+public class SingleSignOn extends ValveBase implements SessionListener {
 
     //------------------------------------------------------ Constructor
     public SingleSignOn() {
@@ -89,11 +83,6 @@ public class SingleSignOn
         "org.apache.catalina.authenticator.SingleSignOn";
 
 
-    /**
-     * The lifecycle event support for this component.
-     */
-    protected LifecycleSupport lifecycle = new LifecycleSupport(this);
-
     /**
      * Indicates whether this valve should require a downstream Authenticator to
      * reauthenticate each request, or if it itself can bind a UserPrincipal
@@ -115,11 +104,6 @@ public class SingleSignOn
         StringManager.getManager(Constants.Package);
 
 
-    /**
-     * Component started flag.
-     */
-    protected boolean started = false;
-
     /**
      * Optional SSO cookie domain.
      */
@@ -217,84 +201,6 @@ public class SingleSignOn
     }
 
 
-    // ------------------------------------------------------ Lifecycle Methods
-
-
-    /**
-     * Add a lifecycle event listener to this component.
-     *
-     * @param listener The listener to add
-     */
-    public void addLifecycleListener(LifecycleListener listener) {
-
-        lifecycle.addLifecycleListener(listener);
-
-    }
-
-
-    /**
-     * Get the lifecycle listeners associated with this lifecycle. If this 
-     * Lifecycle has no listeners registered, a zero-length array is returned.
-     */
-    public LifecycleListener[] findLifecycleListeners() {
-
-        return lifecycle.findLifecycleListeners();
-
-    }
-
-
-    /**
-     * Remove a lifecycle event listener from this component.
-     *
-     * @param listener The listener to remove
-     */
-    public void removeLifecycleListener(LifecycleListener listener) {
-
-        lifecycle.removeLifecycleListener(listener);
-
-    }
-
-
-    /**
-     * Prepare for the beginning of active use of the public methods of this
-     * component.  This method should be called after <code>configure()</code>,
-     * and before any of the public methods of the component are utilized.
-     *
-     * @exception LifecycleException if this component detects a fatal error
-     *  that prevents this component from being used
-     */
-    public void start() throws LifecycleException {
-
-        // Validate and update our current component state
-        if (started)
-            throw new LifecycleException
-                (sm.getString("authenticator.alreadyStarted"));
-        lifecycle.fireLifecycleEvent(START_EVENT, null);
-        started = true;
-
-    }
-
-
-    /**
-     * Gracefully terminate the active use of the public methods of this
-     * component.  This method should be the last one called on a given
-     * instance of this component.
-     *
-     * @exception LifecycleException if this component detects a fatal error
-     *  that needs to be reported
-     */
-    public void stop() throws LifecycleException {
-
-        // Validate and update our current component state
-        if (!started)
-            throw new LifecycleException
-                (sm.getString("authenticator.notStarted"));
-        lifecycle.fireLifecycleEvent(STOP_EVENT, null);
-        started = false;
-
-    }
-
-
     // ------------------------------------------------ SessionListener Methods
 
 
@@ -429,26 +335,6 @@ public class SingleSignOn
     }
 
 
-    // --------------------------------------------------------- Public Methods
-
-
-    /**
-     * Return a String rendering of this object.
-     */
-    @Override
-    public String toString() {
-
-        StringBuilder sb = new StringBuilder("SingleSignOn[");
-        if (container == null )
-            sb.append("Container is null");
-        else
-            sb.append(container.getName());
-        sb.append("]");
-        return (sb.toString());
-
-    }
-
-
     // ------------------------------------------------------ Protected Methods
 
 

==================================================
JvmRouteBinderValve.java
index 0801fc42a6..3e627c7186 100644
--- a/java/org/apache/catalina/ha/authenticator/ClusterSingleSignOn.java
+++ b/java/org/apache/catalina/ha/authenticator/ClusterSingleSignOn.java
@@ -31,6 +31,7 @@ import org.apache.catalina.Session;
 import org.apache.catalina.authenticator.SingleSignOn;
 import org.apache.catalina.ha.CatalinaCluster;
 import org.apache.catalina.ha.ClusterManager;
+import org.apache.catalina.util.LifecycleBase;
 
 
 
@@ -105,20 +106,17 @@ public class ClusterSingleSignOn
 
 
     /**
-     * Prepare for the beginning of active use of the public methods of this
-     * component.  This method should be called after <code>configure()</code>,
-     * and before any of the public methods of the component are utilized.
+     * Start this component and implement the requirements
+     * of {@link LifecycleBase#startInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
      */
     @Override
-    public void start() throws LifecycleException {
-
-	super.start();
-
-	clusterSSOListener = new ClusterSingleSignOnListener();
-	clusterSSOListener.setClusterSSO(this);
+    protected synchronized void startInternal() throws LifecycleException {
+        
+        clusterSSOListener = new ClusterSingleSignOnListener();
+        clusterSSOListener.setClusterSSO(this);
 
         // Load the cluster component, if any
         try {
@@ -147,55 +145,33 @@ public class ClusterSingleSignOn
                 }
             }
             if (cluster == null) {
-		throw new LifecycleException
-		    ("There is no Cluster for ClusterSingleSignOn");
+                throw new LifecycleException(
+                        "There is no Cluster for ClusterSingleSignOn");
             }
-
         } catch (Throwable t) {
-	    throw new LifecycleException
-		("ClusterSingleSignOn exception during clusterLoad " + t);
+            throw new LifecycleException(
+                    "ClusterSingleSignOn exception during clusterLoad " + t);
         }
 
+        super.startInternal();
     }
 
 
     /**
-     * Gracefully terminate the active use of the public methods of this
-     * component.  This method should be the last one called on a given
-     * instance of this component.
+     * Stop this component and implement the requirements
+     * of {@link LifecycleBase#stopInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
-     *  that needs to be reported
-     */
-    @Override
-    public void stop() throws LifecycleException {
-
-	super.stop();
-
-	if (getCluster() != null) {
-	    getCluster().removeClusterListener(clusterSSOListener);
-	}
-
-    }
-
-
-    // --------------------------------------------------------- Public Methods
-
-
-    /**
-     * Return a String rendering of this object.
+     *  that prevents this component from being used
      */
     @Override
-    public String toString() {
+    protected synchronized void stopInternal() throws LifecycleException {
 
-        StringBuilder sb = new StringBuilder("ClusterSingleSignOn[");
-        if (container == null )
-            sb.append("Container is null");
-        else
-            sb.append(container.getName());
-        sb.append("]");
-        return (sb.toString());
+        super.stopInternal();
 
+        if (getCluster() != null) {
+            getCluster().removeClusterListener(clusterSSOListener);
+        }
     }
 
 

==================================================
ReplicationValve.java
index 1eef9f058e..42fcbfb680 100644
--- a/java/org/apache/catalina/ha/session/LocalStrings_es.properties
+++ b/java/org/apache/catalina/ha/session/LocalStrings_es.properties
@@ -84,8 +84,6 @@ jvmRoute.receiveMessage.sessionIDChanged = Cl\u00FAster JvmRouteSessionIDBinderL
 jvmRoute.run.already = receptor jvmRoute SessionID ya ejecutado
 jvmRoute.skipURLSessionIDs = \u00A1Saltado chequeo de reasignaci\u00F3n de ruta jvm, la sessionid viene desde URL\!
 jvmRoute.turnoverInfo = Ajustado tiempo de Chequeo a {0} mseg
-jvmRoute.valve.alreadyStarted = se ha iniciado la correcci\u00F3n de respaldo de sessionID de jvmRoute
-jvmRoute.valve.notStarted = ya se ha iniciado la correcci\u00F3n de respaldo de sessionID de jvmRoute
 jvmRoute.valve.started = JvmRouteBinderValve arrancada
 jvmRoute.valve.stopped = JvmRouteBinderValve parada
 jvmRoute.set.orignalsessionid = Puesta id Orginal de Sesi\u00F3n en atributo de requerimiento {0} valor\: {1}

==================================================
AccessLogValve.java
index c4898d938a..bd4146e664 100644
--- a/java/org/apache/catalina/ha/tcp/ReplicationValve.java
+++ b/java/org/apache/catalina/ha/tcp/ReplicationValve.java
@@ -397,19 +397,6 @@ public class ReplicationValve
         nrOfCrossContextSendRequests = 0;
     }
     
-    /**
-     * Return a String rendering of this object.
-     */
-    @Override
-    public String toString() {
-
-        StringBuilder sb = new StringBuilder("ReplicationValve[");
-        if (container != null)
-            sb.append(container.getName());
-        sb.append("]");
-        return (sb.toString());
-
-    }
 
     // --------------------------------------------------------- Protected Methods
 

==================================================
CometConnectionManagerValve.java
index 05e54a30e5..5bae26b6c8 100644
--- a/java/org/apache/catalina/valves/AccessLogValve.java
+++ b/java/org/apache/catalina/valves/AccessLogValve.java
@@ -36,12 +36,11 @@ import javax.servlet.ServletException;
 import javax.servlet.http.Cookie;
 import javax.servlet.http.HttpSession;
 
-import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleException;
-import org.apache.catalina.LifecycleListener;
+import org.apache.catalina.LifecycleState;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
-import org.apache.catalina.util.LifecycleSupport;
+import org.apache.catalina.util.LifecycleBase;
 import org.apache.tomcat.util.res.StringManager;
 import org.apache.coyote.RequestInfo;
 import org.apache.juli.logging.Log;
@@ -119,9 +118,7 @@ import org.apache.juli.logging.LogFactory;
  * @version $Revision$ $Date$
  */
 
-public class AccessLogValve
-    extends ValveBase
-    implements Lifecycle {
+public class AccessLogValve extends ValveBase {
 
     private static final Log log = LogFactory.getLog(AccessLogValve.class);
 
@@ -153,12 +150,6 @@ public class AccessLogValve
         "org.apache.catalina.valves.AccessLogValve/2.1";
 
 
-    /**
-     * The lifecycle event support for this component.
-     */
-    protected LifecycleSupport lifecycle = new LifecycleSupport(this);
-
-
     /**
      * The set of month abbreviations for log messages.
      */
@@ -203,12 +194,6 @@ public class AccessLogValve
         StringManager.getManager(Constants.Package);
 
 
-    /**
-     * Has this component been started yet?
-     */
-    protected boolean started = false;
-
-
     /**
      * The suffix that is added to log file filenames.
      */
@@ -539,7 +524,8 @@ public class AccessLogValve
      */
     @Override
     public void backgroundProcess() {
-        if (started && getEnabled() && writer != null && buffered) {
+        if (getState().isAvailable() && getEnabled() && writer != null &&
+                buffered) {
             writer.flush();
         }
     }    
@@ -558,7 +544,7 @@ public class AccessLogValve
     public void invoke(Request request, Response response) throws IOException,
             ServletException {
 
-        if (started && getEnabled()) {                
+        if (getState().isAvailable() && getEnabled()) {                
             // Pass this request on to the next valve in our pipeline
             long t1 = System.currentTimeMillis();
     
@@ -799,54 +785,15 @@ public class AccessLogValve
     }
 
 
-    // ------------------------------------------------------ Lifecycle Methods
-
-
     /**
-     * Add a lifecycle event listener to this component.
-     *
-     * @param listener The listener to add
-     */
-    public void addLifecycleListener(LifecycleListener listener) {
-        lifecycle.addLifecycleListener(listener);
-    }
-
-
-    /**
-     * Get the lifecycle listeners associated with this lifecycle. If this
-     * Lifecycle has no listeners registered, a zero-length array is returned.
-     */
-    public LifecycleListener[] findLifecycleListeners() {
-        return lifecycle.findLifecycleListeners();
-    }
-
-
-    /**
-     * Remove a lifecycle event listener from this component.
-     *
-     * @param listener The listener to add
-     */
-    public void removeLifecycleListener(LifecycleListener listener) {
-        lifecycle.removeLifecycleListener(listener);
-    }
-
-
-    /**
-     * Prepare for the beginning of active use of the public methods of this
-     * component.  This method should be called after <code>configure()</code>,
-     * and before any of the public methods of the component are utilized.
+     * Start this component and implement the requirements
+     * of {@link LifecycleBase#startInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
      */
-    public void start() throws LifecycleException {
-
-        // Validate and update our current component state
-        if (started)
-            throw new LifecycleException(sm
-                    .getString("accessLogValve.alreadyStarted"));
-        lifecycle.fireLifecycleEvent(START_EVENT, null);
-        started = true;
+    @Override
+    protected synchronized void startInternal() throws LifecycleException {
 
         // Initialize the timeZone, Date formatters, and currentDate
         timezone = TimeZone.getDefault();
@@ -860,26 +807,22 @@ public class AccessLogValve
         fileDateFormatter.setTimeZone(timezone);
         dateStamp = fileDateFormatter.format(currentDateStruct.get().currentDate);
         open();
+        
+        setState(LifecycleState.STARTING);
     }
 
 
     /**
-     * Gracefully terminate the active use of the public methods of this
-     * component.  This method should be the last one called on a given
-     * instance of this component.
+     * Stop this component and implement the requirements
+     * of {@link LifecycleBase#stopInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
-     *  that needs to be reported
+     *  that prevents this component from being used
      */
-    public void stop() throws LifecycleException {
-
-        // Validate and update our current component state
-        if (!started)
-            throw new LifecycleException(sm
-                    .getString("accessLogValve.notStarted"));
-        lifecycle.fireLifecycleEvent(STOP_EVENT, null);
-        started = false;
+    @Override
+    protected synchronized void stopInternal() throws LifecycleException {
         
+        setState(LifecycleState.STOPPING);
         close();
     }
     

==================================================
ErrorReportValve.java
index 0ce5e95908..58025f8194 100644
--- a/java/org/apache/catalina/valves/CometConnectionManagerValve.java
+++ b/java/org/apache/catalina/valves/CometConnectionManagerValve.java
@@ -35,12 +35,13 @@ import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleEvent;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleListener;
+import org.apache.catalina.LifecycleState;
 import org.apache.catalina.comet.CometEvent;
 import org.apache.catalina.comet.CometProcessor;
 import org.apache.catalina.connector.CometEventImpl;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
-import org.apache.catalina.util.LifecycleSupport;
+import org.apache.catalina.util.LifecycleBase;
 import org.apache.tomcat.util.res.StringManager;
 
 
@@ -54,9 +55,8 @@ import org.apache.tomcat.util.res.StringManager;
  * @version $Revision$ $Date$
  */
 
-public class CometConnectionManagerValve
-    extends ValveBase
-    implements Lifecycle, HttpSessionListener, LifecycleListener {
+public class CometConnectionManagerValve extends ValveBase
+    implements HttpSessionListener, LifecycleListener {
     
     //------------------------------------------------------ Constructor
     public CometConnectionManagerValve() {
@@ -81,18 +81,6 @@ public class CometConnectionManagerValve
         StringManager.getManager(Constants.Package);
 
 
-    /**
-     * The lifecycle event support for this component.
-     */
-    protected LifecycleSupport lifecycle = new LifecycleSupport(this);
-
-
-    /**
-     * Has this component been started yet?
-     */
-    protected boolean started = false;
-
-    
     /**
      * List of current Comet connections.
      */
@@ -107,92 +95,39 @@ public class CometConnectionManagerValve
         "org.apache.tomcat.comet.connectionList";
 
 
-    // ------------------------------------------------------------- Properties
-
-    
-    // ------------------------------------------------------ Lifecycle Methods
-
-
-    /**
-     * Add a lifecycle event listener to this component.
-     *
-     * @param listener The listener to add
-     */
-    public void addLifecycleListener(LifecycleListener listener) {
-
-        lifecycle.addLifecycleListener(listener);
-
-    }
-
-
-    /**
-     * Get the lifecycle listeners associated with this lifecycle. If this
-     * Lifecycle has no listeners registered, a zero-length array is returned.
-     */
-    public LifecycleListener[] findLifecycleListeners() {
-
-        return lifecycle.findLifecycleListeners();
-
-    }
-
-
     /**
-     * Remove a lifecycle event listener from this component.
-     *
-     * @param listener The listener to add
-     */
-    public void removeLifecycleListener(LifecycleListener listener) {
-
-        lifecycle.removeLifecycleListener(listener);
-
-    }
-
-
-    /**
-     * Prepare for the beginning of active use of the public methods of this
-     * component.  This method should be called after <code>configure()</code>,
-     * and before any of the public methods of the component are utilized.
+     * Start this component and implement the requirements
+     * of {@link LifecycleBase#startInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
      */
-    public void start() throws LifecycleException {
-
-        // Validate and update our current component state
-        if (started)
-            throw new LifecycleException
-                (sm.getString("semaphoreValve.alreadyStarted"));
-        lifecycle.fireLifecycleEvent(START_EVENT, null);
-        started = true;
+    @Override
+    protected synchronized void startInternal() throws LifecycleException {
 
         if (container instanceof Context) {
             container.addLifecycleListener(this);
         }
-        
+
+        setState(LifecycleState.STARTING);
     }
 
 
     /**
-     * Gracefully terminate the active use of the public methods of this
-     * component.  This method should be the last one called on a given
-     * instance of this component.
+     * Stop this component and implement the requirements
+     * of {@link LifecycleBase#stopInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
-     *  that needs to be reported
+     *  that prevents this component from being used
      */
-    public void stop() throws LifecycleException {
+    @Override
+    protected synchronized void stopInternal() throws LifecycleException {
 
-        // Validate and update our current component state
-        if (!started)
-            throw new LifecycleException
-                (sm.getString("semaphoreValve.notStarted"));
-        lifecycle.fireLifecycleEvent(STOP_EVENT, null);
-        started = false;
+        setState(LifecycleState.STOPPING);
 
         if (container instanceof Context) {
             container.removeLifecycleListener(this);
         }
-
     }
 
     

==================================================
JDBCAccessLogValve.java
index bc663a2837..e381ce6126 100644
--- a/java/org/apache/catalina/valves/ErrorReportValve.java
+++ b/java/org/apache/catalina/valves/ErrorReportValve.java
@@ -48,8 +48,7 @@ import org.apache.tomcat.util.res.StringManager;
  * @version $Revision$ $Date$
  */
 
-public class ErrorReportValve
-    extends ValveBase {
+public class ErrorReportValve extends ValveBase {
 
     //------------------------------------------------------ Constructor
     public ErrorReportValve() {
@@ -296,5 +295,4 @@ public class ErrorReportValve
         }
         return trace.toString();
     }
-
 }

==================================================
PersistentValve.java
index d3182cc8f8..533a2ee1f6 100644
--- a/java/org/apache/catalina/valves/LocalStrings_ja.properties
+++ b/java/org/apache/catalina/valves/LocalStrings_ja.properties
@@ -13,12 +13,6 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-accessLogValve.alreadyStarted=\u30a2\u30af\u30bb\u30b9\u30ed\u30ac\u30fc\u306f\u65e2\u306b\u8d77\u52d5\u3055\u308c\u3066\u3044\u307e\u3059
-accessLogValve.notStarted=\u30a2\u30af\u30bb\u30b9\u30ed\u30ac\u30fc\u306f\u307e\u3060\u8d77\u52d5\u3055\u308c\u3066\u3044\u307e\u305b\u3093
-certificatesValve.alreadyStarted=\u8a8d\u8a3c\u30d0\u30eb\u30d6\u306f\u65e2\u306b\u8d77\u52d5\u3055\u308c\u3066\u3044\u307e\u3059
-certificatesValve.notStarted=\u8a8d\u8a3c\u30d0\u30eb\u30d6\u306f\u307e\u3060\u8d77\u52d5\u3055\u308c\u3066\u3044\u307e\u305b\u3093
-interceptorValve.alreadyStarted=\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u30d0\u30eb\u30d6\u306f\u65e2\u306b\u8d77\u52d5\u3055\u308c\u3066\u3044\u307e\u3059
-interceptorValve.notStarted=\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u30d0\u30eb\u30d6\u306f\u307e\u3060\u8d77\u52d5\u3055\u308c\u3066\u3044\u307e\u305b\u3093
 requestFilterValve.next=\u6b21\u306e\u30d0\u30eb\u30d6\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093
 requestFilterValve.syntax=\u30ea\u30af\u30a8\u30b9\u30c8\u30d5\u30a3\u30eb\u30bf\u30d1\u30bf\u30fc\u30f3 {0} \u306b\u69cb\u6587\u30a8\u30e9\u30fc\u304c\u3042\u308a\u307e\u3059
 jdbcAccessLogValve.exception=\u30a2\u30af\u30bb\u30b9\u30a8\u30f3\u30c8\u30ea\u306e\u633f\u5165\u3092\u5b9f\u884c\u4e2d\u306e\u4f8b\u5916\u3067\u3059

==================================================
SemaphoreValve.java
index c866bcfaf1..8ba1127ac2 100644
--- a/java/org/apache/catalina/valves/PersistentValve.java
+++ b/java/org/apache/catalina/valves/PersistentValve.java
@@ -47,8 +47,7 @@ import org.apache.tomcat.util.res.StringManager;
  * @version $Revision$ $Date$
  */
 
-public class PersistentValve
-    extends ValveBase {
+public class PersistentValve extends ValveBase {
 
     //------------------------------------------------------ Constructor
     public PersistentValve() {

==================================================
ValveBase.java
index 107b4c1fa1..644ba246a2 100644
--- a/java/org/apache/catalina/valves/SemaphoreValve.java
+++ b/java/org/apache/catalina/valves/SemaphoreValve.java
@@ -24,13 +24,11 @@ import java.util.concurrent.Semaphore;
 
 import javax.servlet.ServletException;
 
-import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleException;
-import org.apache.catalina.LifecycleListener;
+import org.apache.catalina.LifecycleState;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
-import org.apache.catalina.util.LifecycleSupport;
-import org.apache.tomcat.util.res.StringManager;
+import org.apache.catalina.util.LifecycleBase;
 
 
 /**
@@ -43,9 +41,7 @@ import org.apache.tomcat.util.res.StringManager;
  * @version $Revision$ $Date$
  */
 
-public class SemaphoreValve
-    extends ValveBase
-    implements Lifecycle {
+public class SemaphoreValve extends ValveBase {
 
     //------------------------------------------------------ Constructor
     public SemaphoreValve() {
@@ -62,31 +58,12 @@ public class SemaphoreValve
         "org.apache.catalina.valves.SemaphoreValve/1.0";
 
 
-    /**
-     * The string manager for this package.
-     */
-    private static final StringManager sm =
-        StringManager.getManager(Constants.Package);
-
-
     /**
      * Semaphore.
      */
     protected Semaphore semaphore = null;
     
 
-    /**
-     * The lifecycle event support for this component.
-     */
-    protected LifecycleSupport lifecycle = new LifecycleSupport(this);
-
-
-    /**
-     * Has this component been started yet?
-     */
-    private boolean started = false;
-
-
     // ------------------------------------------------------------- Properties
 
     
@@ -122,85 +99,35 @@ public class SemaphoreValve
     public void setInterruptible(boolean interruptible) { this.interruptible = interruptible; }
     
 
-    // ------------------------------------------------------ Lifecycle Methods
-
-
     /**
-     * Add a lifecycle event listener to this component.
-     *
-     * @param listener The listener to add
-     */
-    public void addLifecycleListener(LifecycleListener listener) {
-
-        lifecycle.addLifecycleListener(listener);
-
-    }
-
-
-    /**
-     * Get the lifecycle listeners associated with this lifecycle. If this
-     * Lifecycle has no listeners registered, a zero-length array is returned.
-     */
-    public LifecycleListener[] findLifecycleListeners() {
-
-        return lifecycle.findLifecycleListeners();
-
-    }
-
-
-    /**
-     * Remove a lifecycle event listener from this component.
-     *
-     * @param listener The listener to add
-     */
-    public void removeLifecycleListener(LifecycleListener listener) {
-
-        lifecycle.removeLifecycleListener(listener);
-
-    }
-
-
-    /**
-     * Prepare for the beginning of active use of the public methods of this
-     * component.  This method should be called after <code>configure()</code>,
-     * and before any of the public methods of the component are utilized.
+     * Start this component and implement the requirements
+     * of {@link LifecycleBase#startInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
      */
-    public void start() throws LifecycleException {
-
-        // Validate and update our current component state
-        if (started)
-            throw new LifecycleException
-                (sm.getString("semaphoreValve.alreadyStarted"));
-        lifecycle.fireLifecycleEvent(START_EVENT, null);
-        started = true;
-
+    @Override
+    protected synchronized void startInternal() throws LifecycleException {
+        
         semaphore = new Semaphore(concurrency, fairness);
 
+        setState(LifecycleState.STARTING);
     }
 
 
     /**
-     * Gracefully terminate the active use of the public methods of this
-     * component.  This method should be the last one called on a given
-     * instance of this component.
+     * Stop this component and implement the requirements
+     * of {@link LifecycleBase#stopInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
-     *  that needs to be reported
+     *  that prevents this component from being used
      */
-    public void stop() throws LifecycleException {
+    @Override
+    protected synchronized void stopInternal() throws LifecycleException {
 
-        // Validate and update our current component state
-        if (!started)
-            throw new LifecycleException
-                (sm.getString("semaphoreValve.notStarted"));
-        lifecycle.fireLifecycleEvent(STOP_EVENT, null);
-        started = false;
+        setState(LifecycleState.STOPPING);
 
         semaphore = null;
-
     }
 
     

==================================================
