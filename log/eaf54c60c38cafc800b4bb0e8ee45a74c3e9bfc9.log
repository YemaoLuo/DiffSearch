eaf54c60c38cafc800b4bb0e8ee45a74c3e9bfc9
==================================================
Add Cookie generation to the CookieProcessor interface
==================================================
Mark Emlyn
==================================================
Wed Oct 1 10:18:19 2014 +0000
==================================================
Response.java
Add Cookie generation to the CookieProcessor interface
Re-plumb the current Cookie generation to use the new interface
Provide an initial (and very incomplete) RFC6265 cookie generation implementation

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1628670 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CookieProcessor.java
index d3160740f4..d93a38ba7e 100644
--- a/java/org/apache/catalina/connector/Response.java
+++ b/java/org/apache/catalina/connector/Response.java
@@ -51,7 +51,6 @@ import org.apache.tomcat.util.buf.CharChunk;
 import org.apache.tomcat.util.buf.UEncoder;
 import org.apache.tomcat.util.http.FastHttpDateFormat;
 import org.apache.tomcat.util.http.MimeHeaders;
-import org.apache.tomcat.util.http.SetCookieSupport;
 import org.apache.tomcat.util.http.parser.MediaTypeCache;
 import org.apache.tomcat.util.net.URL;
 import org.apache.tomcat.util.res.StringManager;
@@ -945,17 +944,17 @@ public class Response
     }
 
     public String generateCookieString(final Cookie cookie) {
-        //web application code can receive a IllegalArgumentException
-        //from the appendCookieValue invocation
+        // Web application code can receive a IllegalArgumentException
+        // from the generateHeader() invocation
         if (SecurityUtil.isPackageProtectionEnabled()) {
             return AccessController.doPrivileged(new PrivilegedAction<String>() {
                 @Override
                 public String run(){
-                    return SetCookieSupport.generateHeader(cookie);
+                    return getContext().getCookieProcessor().generateHeader(cookie);
                 }
             });
         } else {
-            return SetCookieSupport.generateHeader(cookie);
+            return getContext().getCookieProcessor().generateHeader(cookie);
         }
     }
 

==================================================
LegacyCookieProcessor.java
index 7028a049ef..5755e5b15c 100644
--- a/java/org/apache/tomcat/util/http/CookieProcessor.java
+++ b/java/org/apache/tomcat/util/http/CookieProcessor.java
@@ -18,6 +18,8 @@ package org.apache.tomcat.util.http;
 
 import java.nio.charset.Charset;
 
+import javax.servlet.http.Cookie;
+
 public interface CookieProcessor {
 
     /**
@@ -26,8 +28,13 @@ public interface CookieProcessor {
     void parseCookieHeader(MimeHeaders headers, ServerCookies serverCookies);
 
     /**
-     * The character set that is to be used to turn the bytes provided in the
-     * cookie header into characters for the cookie value.
+     * Generate the HTTP header value for the given Cookie.
+     */
+    String generateHeader(Cookie cookie);
+
+    /**
+     * The character set that will be used when converting between bytes and
+     * characters when parsing and/or generating HTTP headers for cookies.
      */
     Charset getCharset();
 }

==================================================
Rfc6265CookieProcessor.java
index bb06bd757b..29da2fcd26 100644
--- a/java/org/apache/tomcat/util/http/LegacyCookieProcessor.java
+++ b/java/org/apache/tomcat/util/http/LegacyCookieProcessor.java
@@ -185,6 +185,12 @@ public final class LegacyCookieProcessor implements CookieProcessor {
     }
 
 
+    @Override
+    public String generateHeader(javax.servlet.http.Cookie cookie) {
+        return SetCookieSupport.generateHeader(cookie);
+    }
+
+
     /**
      * Parses a cookie header after the initial "Cookie:"
      * [WS][$]token[WS]=[WS](token|QV)[;|,]

==================================================
