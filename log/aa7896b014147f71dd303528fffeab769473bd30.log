aa7896b014147f71dd303528fffeab769473bd30
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55218 and https://issues.apache.org/bugzilla/show_bug.cgi?id=55219
==================================================
Mark Emlyn
==================================================
Tue Jul 9 10:07:23 2013 +0000
==================================================
StandardContext.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55218 and https://issues.apache.org/bugzilla/show_bug.cgi?id=55219
Upgrade digester to use DefaultHandler2 and use LexicalHandler to detect publicId.
Simplify web application version detection in web.xml
Extracted from a patch by Jeremy Boynes.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1501176 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WebXml.java
index 59358e2106..af035263cb 100644
--- a/java/org/apache/tomcat/util/descriptor/web/LocalStrings.properties
+++ b/java/org/apache/tomcat/util/descriptor/web/LocalStrings.properties
@@ -48,5 +48,5 @@ webXml.mergeConflictSessionTrackingMode=The session tracking modes were defined
 webXml.mergeConflictString=The [{0}] with name [{1}] was defined inconsistently in multiple fragments including fragment with name [{2}] located at [{3}]
 webXml.multipleOther=Multiple others entries in ordering
 webXml.unrecognisedPublicId=The public ID [{0}] did not match any of the known public ID's for web.xml files so the version could not be identified
-webXml.version.nfe=Unable to parse [{0}] from the version string [{1}]. This component of the version string will be ignored.
+webXml.version.unknown=Unknown version string [{0}]. Default version will be used.
 webXml.wrongFragmentName=Used a wrong fragment name {0} at web.xml absolute-ordering tag!
\ No newline at end of file

==================================================
Digester.java
index 681eb87fab..04dc5c3218 100644
--- a/java/org/apache/tomcat/util/descriptor/web/WebXml.java
+++ b/java/org/apache/tomcat/util/descriptor/web/WebXml.java
@@ -32,6 +32,7 @@ import java.util.Set;
 import javax.servlet.ServletContext;
 import javax.servlet.SessionTrackingMode;
 
+import org.apache.tomcat.util.descriptor.XmlIdentifiers;
 import org.apache.tomcat.util.res.StringManager;
 
 /**
@@ -127,93 +128,55 @@ public class WebXml {
      * @param version   Values of <code>null</code> will be ignored
      */
     public void setVersion(String version) {
-        if (version == null) return;
-
-        // Update major and minor version
-        // Expected format is n.n - allow for any number of digits just in case
-        String major = null;
-        String minor = null;
-        int split = version.indexOf('.');
-        if (split < 0) {
-            // Major only
-            major = version;
-        } else {
-            major = version.substring(0, split);
-            minor = version.substring(split + 1);
-        }
-        if (major == null || major.length() == 0) {
-            majorVersion = 0;
-        } else {
-            try {
-                majorVersion = Integer.parseInt(major);
-            } catch (NumberFormatException nfe) {
-                log.warn(sm.getString("webXml.version.nfe", major, version),
-                        nfe);
-                majorVersion = 0;
-            }
-        }
-
-        if (minor == null || minor.length() == 0) {
-            minorVersion = 0;
-        } else {
-            try {
-                minorVersion = Integer.parseInt(minor);
-            } catch (NumberFormatException nfe) {
-                log.warn(sm.getString("webXml.version.nfe", minor, version),
-                        nfe);
+        if (version == null) {
+            return;
+        }
+        switch (version) {
+            case "2.4":
+                majorVersion = 2;
+                minorVersion = 4;
+                break;
+            case "2.5":
+                majorVersion = 2;
+                minorVersion = 5;
+                break;
+            case "3.0":
+                majorVersion = 3;
                 minorVersion = 0;
-            }
+                break;
+            case "3.1":
+                majorVersion = 3;
+                minorVersion = 1;
+                break;
+            default:
+                log.warn(sm.getString("webXml.version.unknown", version));
         }
     }
 
 
+
     // Optional publicId attribute
     private String publicId = null;
     public String getPublicId() { return publicId; }
     public void setPublicId(String publicId) {
         // Update major and minor version
         if (publicId == null) {
-            // skip
-        } else if (org.apache.catalina.startup.Constants.WebSchemaPublicId_31.
-                equalsIgnoreCase(publicId) ||
-                org.apache.catalina.startup.Constants.WebFragmentSchemaPublicId_31.
-                equalsIgnoreCase(publicId)) {
-            majorVersion = 3;
-            minorVersion = 1;
-            this.publicId = publicId;
-        } else if (org.apache.catalina.startup.Constants.WebSchemaPublicId_30.
-                equalsIgnoreCase(publicId) ||
-                org.apache.catalina.startup.Constants.WebFragmentSchemaPublicId_30.
-                equalsIgnoreCase(publicId)) {
-            majorVersion = 3;
-            minorVersion = 0;
-            this.publicId = publicId;
-        } else if (org.apache.catalina.startup.Constants.WebSchemaPublicId_25.
-                equalsIgnoreCase(publicId)) {
-            majorVersion = 2;
-            minorVersion = 5;
-            this.publicId = publicId;
-        } else if (org.apache.catalina.startup.Constants.WebSchemaPublicId_24.
-                equalsIgnoreCase(publicId)) {
-            majorVersion = 2;
-            minorVersion = 4;
-            this.publicId = publicId;
-        } else if (org.apache.catalina.startup.Constants.WebDtdPublicId_23.
-                equalsIgnoreCase(publicId)) {
-            majorVersion = 2;
-            minorVersion = 3;
-            this.publicId = publicId;
-        } else if (org.apache.catalina.startup.Constants.WebDtdPublicId_22.
-                equalsIgnoreCase(publicId)) {
-            majorVersion = 2;
-            minorVersion = 2;
-            this.publicId = publicId;
-        } else if ("datatypes".equals(publicId)) {
-            // Will occur when validation is enabled and dependencies are
-            // traced back. Ignore it.
-        } else {
-            // Unrecognised publicId
-            log.warn(sm.getString("webXml.unrecognisedPublicId", publicId));
+            return;
+        }
+        switch (publicId) {
+            case XmlIdentifiers.WEB_22_PUBLIC:
+                majorVersion = 2;
+                minorVersion = 2;
+                this.publicId = publicId;
+                break;
+            case XmlIdentifiers.WEB_23_PUBLIC:
+                majorVersion = 2;
+                minorVersion = 3;
+                this.publicId = publicId;
+                break;
+            default:
+                log.warn(sm.getString("webXml.unrecognisedPublicId", publicId));
+                break;
         }
     }
 

==================================================
TestSchemaValidation.java
index 2dd2f01855..5d635e7c69 100644
--- a/java/org/apache/tomcat/util/digester/Digester.java
+++ b/java/org/apache/tomcat/util/digester/Digester.java
@@ -21,6 +21,8 @@ import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.lang.reflect.InvocationTargetException;
+import java.net.URI;
+import java.net.URISyntaxException;
 import java.util.EmptyStackException;
 import java.util.HashMap;
 import java.util.Iterator;
@@ -45,8 +47,8 @@ import org.xml.sax.SAXNotRecognizedException;
 import org.xml.sax.SAXNotSupportedException;
 import org.xml.sax.SAXParseException;
 import org.xml.sax.XMLReader;
+import org.xml.sax.ext.DefaultHandler2;
 import org.xml.sax.helpers.AttributesImpl;
-import org.xml.sax.helpers.DefaultHandler;
 
 
 /**
@@ -68,7 +70,7 @@ import org.xml.sax.helpers.DefaultHandler;
  * the support of XML schema. You need Xerces 2.1/2.3 and up to make
  * this class working with XML schema</p>
  */
-public class Digester extends DefaultHandler {
+public class Digester extends DefaultHandler2 {
 
 
     // ---------------------------------------------------------- Static Fields
@@ -791,6 +793,9 @@ public class Digester extends DefaultHandler {
             reader.setEntityResolver(entityResolver);
         }
 
+        reader.setProperty(
+                "http://xml.org/sax/properties/lexical-handler", this);
+
         reader.setErrorHandler(this);
         return reader;
     }
@@ -1275,26 +1280,15 @@ public class Digester extends DefaultHandler {
         return entityResolver;
     }
 
-    /**
-     * Resolve the requested external entity.
-     *
-     * @param publicId The public identifier of the entity being referenced
-     * @param systemId The system identifier of the entity being referenced
-     *
-     * @exception SAXException if a parsing exception occurs
-     *
-     */
     @Override
-    public InputSource resolveEntity(String publicId, String systemId)
-            throws SAXException {
+    public InputSource resolveEntity(String name, String publicId,
+            String baseURI, String systemId) throws SAXException, IOException {
 
         if (saxLog.isDebugEnabled()) {
-            saxLog.debug("resolveEntity('" + publicId + "', '" + systemId + "')");
+            saxLog.debug("resolveEntity('" + publicId + "', '" + systemId +
+                    "', '" + baseURI + "')");
         }
 
-        if (publicId != null)
-            this.publicId = publicId;
-
         // Has this system identifier been registered?
         String entityURL = null;
         if (publicId != null) {
@@ -1312,9 +1306,24 @@ public class Digester extends DefaultHandler {
             } else {
                 // try to resolve using system ID
                 if (log.isDebugEnabled()) {
-                    log.debug(" Trying to resolve using system ID '" + systemId + "'");
+                    log.debug(" Trying to resolve using system ID '" +
+                            systemId + "'");
                 }
                 entityURL = systemId;
+                // resolve systemId against baseURI if it is not absolute
+                if (baseURI != null) {
+                    try {
+                        URI uri = new URI(systemId);
+                        if (!uri.isAbsolute()) {
+                            entityURL = new URI(baseURI).resolve(uri).toString();
+                        }
+                    } catch (URISyntaxException e) {
+                        if (log.isDebugEnabled()) {
+                            log.debug("Invalid URI '" + baseURI + "' or '" +
+                                    systemId + "'");
+                        }
+                    }
+                }
             }
         }
 
@@ -1331,8 +1340,16 @@ public class Digester extends DefaultHandler {
     }
 
 
-    // ------------------------------------------------- ErrorHandler Methods
+    // ----------------------------------------------- LexicalHandler Methods
 
+    @Override
+    public void startDTD(String name, String publicId, String systemId)
+            throws SAXException {
+        setPublicId(publicId);
+    }
+
+
+    // ------------------------------------------------- ErrorHandler Methods
 
     /**
      * Forward notification of a parsing error to the application supplied

==================================================
TestWebXml.java
new file mode 100644
index 0000000000..97b381a9b5
--- /dev/null
+++ b/test/javax/servlet/resources/TestSchemaValidation.java
@@ -0,0 +1,103 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.servlet.resources;
+
+import java.io.File;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.apache.catalina.startup.WebRuleSet;
+import org.apache.tomcat.util.descriptor.DigesterFactory;
+import org.apache.tomcat.util.descriptor.XmlIdentifiers;
+import org.apache.tomcat.util.descriptor.web.WebXml;
+import org.apache.tomcat.util.digester.Digester;
+
+public class TestSchemaValidation {
+
+    @Test
+    public void testWebapp() throws Exception {
+        Digester digester =
+                DigesterFactory.newDigester(true, true, new WebRuleSet(false));
+        digester.push(new WebXml());
+        WebXml desc = (WebXml) digester.parse(
+                new File("test/webapp/WEB-INF/web.xml"));
+        Assert.assertEquals("3.1", desc.getVersion());
+    }
+
+    @Test
+    public void testWebapp_2_2() throws Exception {
+        Digester digester =
+                DigesterFactory.newDigester(true, true, new WebRuleSet(false));
+        digester.push(new WebXml());
+        WebXml desc = (WebXml) digester.parse(
+                new File("test/webapp-2.2/WEB-INF/web.xml"));
+        Assert.assertEquals("2.2", desc.getVersion());
+        Assert.assertEquals(XmlIdentifiers.WEB_22_PUBLIC, desc.getPublicId());
+    }
+
+    @Test
+    public void testWebapp_2_3() throws Exception {
+        Digester digester =
+                DigesterFactory.newDigester(true, true, new WebRuleSet(false));
+        digester.push(new WebXml());
+        WebXml desc = (WebXml) digester.parse(
+                new File("test/webapp-2.3/WEB-INF/web.xml"));
+        Assert.assertEquals("2.3", desc.getVersion());
+        Assert.assertEquals(XmlIdentifiers.WEB_23_PUBLIC, desc.getPublicId());
+    }
+
+    @Test
+    public void testWebapp_2_4() throws Exception {
+        Digester digester =
+                DigesterFactory.newDigester(true, true, new WebRuleSet(false));
+        digester.push(new WebXml());
+        WebXml desc = (WebXml) digester.parse(
+                new File("test/webapp-2.4/WEB-INF/web.xml"));
+        Assert.assertEquals("2.4", desc.getVersion());
+    }
+
+    @Test
+    public void testWebapp_2_5() throws Exception {
+        Digester digester =
+                DigesterFactory.newDigester(true, true, new WebRuleSet(false));
+        digester.push(new WebXml());
+        WebXml desc = (WebXml) digester.parse(
+                new File("test/webapp-2.5/WEB-INF/web.xml"));
+        Assert.assertEquals("2.5", desc.getVersion());
+    }
+
+    @Test
+    public void testWebapp_3_0() throws Exception {
+        Digester digester =
+                DigesterFactory.newDigester(true, true, new WebRuleSet(false));
+        digester.push(new WebXml());
+        WebXml desc = (WebXml) digester.parse(
+                new File("test/webapp-3.0/WEB-INF/web.xml"));
+        Assert.assertEquals("3.0", desc.getVersion());
+    }
+
+    @Test
+    public void testWebapp_3_1() throws Exception {
+        Digester digester =
+                DigesterFactory.newDigester(true, true, new WebRuleSet(false));
+        digester.push(new WebXml());
+        WebXml desc = (WebXml) digester.parse(
+                new File("test/webapp-3.1/WEB-INF/web.xml"));
+        Assert.assertEquals("3.1", desc.getVersion());
+    }
+}

==================================================
