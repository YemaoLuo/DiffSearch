3ce7bccc8c5ec555b3301bcdac01298ecd971605
==================================================
Allow for relaxed validation of path and query characters in HTTP/2
==================================================
Mark Thomas
==================================================
Sat Jan 8 16:37:52 2022 +0000
==================================================
Http2Protocol.java
Allow for relaxed validation of path and query characters in HTTP/2

Follow-up to https://bz.apache.org/bugzilla/show_bug.cgi?id=65785


==================================================
StreamProcessor.java
index 8b7718d26e..7bdc6cb648 100644
--- a/java/org/apache/coyote/http2/Http2Protocol.java
+++ b/java/org/apache/coyote/http2/Http2Protocol.java
@@ -21,7 +21,6 @@ import java.util.Enumeration;
 
 import javax.management.ObjectName;
 
-import org.apache.coyote.AbstractProtocol;
 import org.apache.coyote.Adapter;
 import org.apache.coyote.ContinueResponseTiming;
 import org.apache.coyote.Processor;
@@ -342,7 +341,7 @@ public class Http2Protocol implements UpgradeProtocol {
     }
 
 
-    public AbstractProtocol<?> getHttp11Protocol() {
+    public AbstractHttp11Protocol<?> getHttp11Protocol() {
         return this.http11Protocol;
     }
 

==================================================
TestStreamProcessor.java
index c1a943aa4e..68621cb76d 100644
--- a/java/org/apache/coyote/http2/StreamProcessor.java
+++ b/java/org/apache/coyote/http2/StreamProcessor.java
@@ -466,6 +466,9 @@ class StreamProcessor extends AbstractProcessor {
      * The checks performed below are based on the checks in Http11InputBuffer.
      */
     private boolean validateRequest() {
+        HttpParser httpParser = new HttpParser(handler.getProtocol().getHttp11Protocol().getRelaxedPathChars(),
+                handler.getProtocol().getHttp11Protocol().getRelaxedQueryChars());
+
         // Method name must be a token
         String method = request.method().toString();
         if (!HttpParser.isToken(method)) {
@@ -476,7 +479,7 @@ class StreamProcessor extends AbstractProcessor {
         // (other checks such as valid %nn happen later)
         ByteChunk bc = request.requestURI().getByteChunk();
         for (int i = bc.getStart(); i < bc.getEnd(); i++) {
-            if (HttpParser.isNotRequestTarget(bc.getBuffer()[i])) {
+            if (httpParser.isNotRequestTargetRelaxed(bc.getBuffer()[i])) {
                 return false;
             }
         }
@@ -486,7 +489,7 @@ class StreamProcessor extends AbstractProcessor {
         String qs = request.queryString().toString();
         if (qs != null) {
             for (char c : qs.toCharArray()) {
-                if (!HttpParser.isQuery(c)) {
+                if (!httpParser.isQueryRelaxed(c)) {
                     return false;
                 }
             }

==================================================
