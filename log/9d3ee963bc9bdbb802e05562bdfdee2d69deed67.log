9d3ee963bc9bdbb802e05562bdfdee2d69deed67
==================================================
Refactor SocketWrapper
==================================================
Mark Emlyn
==================================================
Thu Aug 29 22:23:04 2013 +0000
==================================================
AprEndpoint.java
Refactor SocketWrapper
 - make fields private
 - add reset() method to wrapper
 - distribute resetting of values between SocketWrapper and KeyAttachment so each resets its own fields

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1518846 13f79535-47bb-0310-9956-ffa450edef68



==================================================
NioEndpoint.java
index f4766dac92..0fbe6537ce 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -1050,7 +1050,7 @@ public class AprEndpoint extends AbstractEndpoint {
                     waitingRequests.iterator();
                 while (sockets.hasNext()) {
                     SocketWrapper<Long> socket = sockets.next();
-                    if (socket.async) {
+                    if (socket.isAsync()) {
                         long access = socket.getLastAccess();
                         if (socket.getTimeout() > 0 &&
                                 (now-access)>socket.getTimeout()) {
@@ -2218,7 +2218,7 @@ public class AprEndpoint extends AbstractEndpoint {
                         socket = null;
                     } else if (state == Handler.SocketState.LONG) {
                         socket.access();
-                        if (socket.async) {
+                        if (socket.isAsync()) {
                             waitingRequests.add(socket);
                         }
                     }
@@ -2277,10 +2277,10 @@ public class AprEndpoint extends AbstractEndpoint {
             if (state == Handler.SocketState.CLOSED) {
                 // Close socket and pool
                 destroySocket(socket.getSocket().longValue());
-                socket.socket = null;
+                socket.reset(null, 1);
             } else if (state == Handler.SocketState.LONG) {
                 socket.access();
-                if (socket.async) {
+                if (socket.isAsync()) {
                     waitingRequests.add(socket);
                 }
             } else if (state == Handler.SocketState.ASYNC_END) {

==================================================
SocketWrapper.java
index 0d3c5f1246..7985624aa3 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -1376,13 +1376,11 @@ public class NioEndpoint extends AbstractEndpoint {
         }
 
         public void reset(Poller poller, NioChannel channel, long soTimeout) {
-            this.socket = channel;
+            super.reset(channel, soTimeout);
+
+            cometNotify = false;
+            interestOps = 0;
             this.poller = poller;
-            lastAccess = System.currentTimeMillis();
-            setComet(false);
-            setTimeout(soTimeout);
-            setWriteTimeout(soTimeout);
-            error = false;
             sendfileData = null;
             if (readLatch != null) {
                 try {
@@ -1393,6 +1391,7 @@ public class NioEndpoint extends AbstractEndpoint {
                 }
             }
             readLatch = null;
+            sendfileData = null;
             if (writeLatch != null) {
                 try {
                     for (int i = 0; i < (int) writeLatch.getCount(); i++) {
@@ -1402,10 +1401,7 @@ public class NioEndpoint extends AbstractEndpoint {
                 }
             }
             writeLatch = null;
-            cometNotify = false;
-            sendfileData = null;
-            keepAliveLeft = 100;
-            async = false;
+            setWriteTimeout(soTimeout);
         }
 
         public void reset() {
@@ -1417,7 +1413,6 @@ public class NioEndpoint extends AbstractEndpoint {
         public void setCometNotify(boolean notify) { this.cometNotify = notify; }
         public boolean getCometNotify() { return cometNotify; }
         public NioChannel getChannel() { return getSocket();}
-        public void setChannel(NioChannel channel) { this.socket = channel;}
         public int interestOps() { return interestOps;}
         public int interestOps(int ops) { this.interestOps  = ops; return ops; }
         public CountDownLatch getReadLatch() { return readLatch; }

==================================================
