0f8e4ddac4efa2dc30956a5a3b9294e59ad570cd
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=61565
==================================================
Mark Thomas
==================================================
Thu Dec 14 13:41:03 2017 +0000
==================================================
HTMLManagerServlet.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=61565
Add TLS config reload to Manager app

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1818127 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ManagerServlet.java
index 9bde2dca34..a73232d8d4 100644
--- a/java/org/apache/catalina/manager/LocalStrings.properties
+++ b/java/org/apache/catalina/manager/LocalStrings.properties
@@ -32,6 +32,10 @@ htmlManagerServlet.helpHtmlManager=HTML Manager Help
 htmlManagerServlet.helpHtmlManagerFile=../docs/html-manager-howto.html
 htmlManagerServlet.helpManager=Manager Help
 htmlManagerServlet.helpManagerFile=../docs/manager-howto.html
+htmlManagerServlet.configTitle=Configuration
+htmlManagerServlet.configSslReloadTitle=Re-read TLS configuration files
+htmlManagerServlet.configSslHostName=TLS host name (optional)
+htmlManagerServlet.configReloadButton=Re-read
 htmlManagerServlet.deployButton=Deploy
 htmlManagerServlet.deployConfig=XML Configuration file URL:
 htmlManagerServlet.deployPath=Context Path (required):
@@ -116,6 +120,9 @@ managerServlet.sessions=OK - Session information for application at context path
 managerServlet.sslConnectorCiphers=OK - Connector / SSL Cipher information
 managerServlet.sslConnectorCerts=OK - Connector / Certificate Chain information
 managerServlet.sslConnectorTrustedCerts=OK - Connector / Trusted Certificate information
+managerServlet.sslReload=OK - Reloaded TLS configuration for [{0}]
+managerServlet.sslReloadAll=OK - Reloaded TLS configuration for all TLS virtual hosts
+managerServlet.sslReloadFail=FAIL - Failed to reload TLS configuration
 managerServlet.started=OK - Started application at context path [{0}]
 managerServlet.startFailed=FAIL - Application at context path [{0}] could not be started
 managerServlet.stopped=OK - Stopped application at context path [{0}]

==================================================
AbstractHttp11Protocol.java
index 8de24ad13d..478d06afd4 100644
--- a/java/org/apache/catalina/manager/ManagerServlet.java
+++ b/java/org/apache/catalina/manager/ManagerServlet.java
@@ -62,6 +62,8 @@ import org.apache.catalina.core.StandardHost;
 import org.apache.catalina.startup.ExpandWar;
 import org.apache.catalina.util.ContextName;
 import org.apache.catalina.util.ServerInfo;
+import org.apache.coyote.ProtocolHandler;
+import org.apache.coyote.http11.AbstractHttp11Protocol;
 import org.apache.tomcat.util.Diagnostics;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.modeler.Registry;
@@ -323,6 +325,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             && (request.getParameter("update").equals("true"))) {
             update = true;
         }
+        String tlsHostName = request.getParameter("tlsHostName");
 
         boolean statusLine = false;
         if ("true".equals(request.getParameter("statusLine"))) {
@@ -377,6 +380,8 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             sslConnectorCerts(writer, smClient);
         } else if (command.equals("/sslConnectorTrustedCerts")) {
             sslConnectorTrustedCerts(writer, smClient);
+        } else if (command.equals("/sslReload")) {
+            sslReload(writer, tlsHostName, smClient);
         } else {
             writer.println(smClient.getString("managerServlet.unknownCommand",
                     command));
@@ -543,6 +548,41 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
     }
 
 
+    protected void sslReload(PrintWriter writer, String tlsHostName, StringManager smClient) {
+        Connector connectors[] = getConnectors();
+        boolean found = false;
+        for (Connector connector : connectors) {
+            if (Boolean.TRUE.equals(connector.getProperty("SSLEnabled"))) {
+                ProtocolHandler protocol = connector.getProtocolHandler();
+                if (protocol instanceof AbstractHttp11Protocol<?>) {
+                    AbstractHttp11Protocol<?> http11Protoocol = (AbstractHttp11Protocol<?>) protocol;
+                    if (tlsHostName == null || tlsHostName.length() == 0) {
+                        found = true;
+                        http11Protoocol.reloadSsslHostConfigs();
+                    } else {
+                        SSLHostConfig[] sslHostConfigs = http11Protoocol.findSslHostConfigs();
+                        for (SSLHostConfig sslHostConfig : sslHostConfigs) {
+                            if (sslHostConfig.getHostName().equalsIgnoreCase(tlsHostName)) {
+                                found = true;
+                                http11Protoocol.reloadSsslHostConfig(tlsHostName);
+                            }
+                        }
+                    }
+                }
+            }
+        }
+        if (found) {
+            if (tlsHostName == null || tlsHostName.length() == 0) {
+                writer.println(smClient.getString("managerServlet.sslReloadAll"));
+            } else {
+                writer.println(smClient.getString("managerServlet.sslReload", tlsHostName));
+            }
+        } else {
+            writer.println(smClient.getString("managerServlet.sslReloadFail"));
+        }
+    }
+
+
     /**
      * Write some VM info.
      *
@@ -1724,9 +1764,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
     protected Map<String,List<String>> getConnectorCiphers() {
         Map<String,List<String>> result = new HashMap<>();
 
-        Engine e = (Engine) host.getParent();
-        Service s = e.getService();
-        Connector connectors[] = s.findConnectors();
+        Connector connectors[] = getConnectors();
         for (Connector connector : connectors) {
             if (Boolean.TRUE.equals(connector.getProperty("SSLEnabled"))) {
                 SSLHostConfig[] sslHostConfigs = connector.getProtocolHandler().findSslHostConfigs();
@@ -1749,9 +1787,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
     protected Map<String,List<String>> getConnectorCerts() {
         Map<String,List<String>> result = new HashMap<>();
 
-        Engine e = (Engine) host.getParent();
-        Service s = e.getService();
-        Connector connectors[] = s.findConnectors();
+        Connector connectors[] = getConnectors();
         for (Connector connector : connectors) {
             if (Boolean.TRUE.equals(connector.getProperty("SSLEnabled"))) {
                 SSLHostConfig[] sslHostConfigs = connector.getProtocolHandler().findSslHostConfigs();
@@ -1792,9 +1828,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
     protected Map<String,List<String>> getConnectorTrustedCerts() {
         Map<String,List<String>> result = new HashMap<>();
 
-        Engine e = (Engine) host.getParent();
-        Service s = e.getService();
-        Connector connectors[] = s.findConnectors();
+        Connector connectors[] = getConnectors();
         for (Connector connector : connectors) {
             if (Boolean.TRUE.equals(connector.getProperty("SSLEnabled"))) {
                 SSLHostConfig[] sslHostConfigs = connector.getProtocolHandler().findSslHostConfigs();
@@ -1824,4 +1858,11 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
 
         return result;
     }
+
+
+    private Connector[] getConnectors() {
+        Engine e = (Engine) host.getParent();
+        Service s = e.getService();
+        return s.findConnectors();
+    }
 }

==================================================
