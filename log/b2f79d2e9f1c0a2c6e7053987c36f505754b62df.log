b2f79d2e9f1c0a2c6e7053987c36f505754b62df
==================================================
Refactoring to simplify code
==================================================
Mark Thomas
==================================================
Wed Dec 14 11:04:03 2016 +0000
==================================================
AbstractProcessor.java
Refactoring to simplify code

Provide Processor with access to the associated Protocol

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1774168 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractAjpProtocol.java
index a78a0dce0e..da99fe94e0 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -59,8 +59,8 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
     private ErrorState errorState = ErrorState.NONE;
 
 
-    public AbstractProcessor(AbstractEndpoint<?,?> endpoint) {
-        this(endpoint, new Request(), new Response());
+    public AbstractProcessor(AbstractProtocol<?> protocol) {
+        this(protocol.getEndpoint(), new Request(), new Response());
     }
 
 

==================================================
AjpProcessor.java
index cd12a79ec9..9969c44b41 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -184,7 +184,7 @@ public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
 
     @Override
     protected Processor createProcessor() {
-        AjpProcessor processor = new AjpProcessor(getPacketSize(), getEndpoint());
+        AjpProcessor processor = new AjpProcessor(this);
         processor.setAdapter(getAdapter());
         processor.setAjpFlush(getAjpFlush());
         processor.setTomcatAuthentication(getTomcatAuthentication());

==================================================
AbstractHttp11Protocol.java
index 981718a6dd..b95409c372 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -41,7 +41,6 @@ import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.HexUtils;
 import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.http.MimeHeaders;
-import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.net.ApplicationBufferHandler;
 import org.apache.tomcat.util.net.SSLSupport;
@@ -243,10 +242,11 @@ public class AjpProcessor extends AbstractProcessor {
 
     // ------------------------------------------------------------ Constructor
 
-    public AjpProcessor(int packetSize, AbstractEndpoint<?,?> endpoint) {
+    public AjpProcessor(AbstractAjpProtocol<?> protocol) {
 
-        super(endpoint);
+        super(protocol);
 
+        int packetSize = protocol.getPacketSize();
         // Calculate maximum chunk size as packetSize may have been changed from
         // the default (Constants.MAX_PACKET_SIZE)
         this.outputMaxChunkSize =

==================================================
Http11Processor.java
index 3121463ae5..3bbca9ab18 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -272,6 +272,9 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
             allowedTrailerHeaders.removeAll(toRemove);
         }
     }
+    protected Set<String> getAllowedTrailerHeadersInternal() {
+        return allowedTrailerHeaders;
+    }
     public String getAllowedTrailerHeaders() {
         // Chances of a size change between these lines are small enough that a
         // sync is unnecessary.
@@ -636,9 +639,7 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
 
     @Override
     protected Processor createProcessor() {
-        Http11Processor processor = new Http11Processor(getMaxHttpHeaderSize(), getEndpoint(),
-                getMaxTrailerSize(), allowedTrailerHeaders, getMaxExtensionSize(),
-                getMaxSwallowSize(), httpUpgradeProtocols);
+        Http11Processor processor = new Http11Processor(this);
         processor.setAdapter(getAdapter());
         processor.setMaxKeepAliveRequests(getMaxKeepAliveRequests());
         processor.setConnectionUploadTimeout(getConnectionUploadTimeout());

==================================================
