e55f92965a61b35aee83b8ccba3e025f5437891e
==================================================
Don't expose Executor directly via SocketWrapper
==================================================
Mark Thomas
==================================================
Wed Dec 14 11:07:28 2016 +0000
==================================================
AbstractProcessor.java
Don't expose Executor directly via SocketWrapper
Reduce exposure of Endpoint via SocketWrapper to package

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1774195 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http2UpgradeHandler.java
index 5a6b5e8600..b01b01974c 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -160,7 +160,7 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
         if (socketWrapper == null) {
             throw new RejectedExecutionException(sm.getString("abstractProcessor.noExecute"));
         } else {
-            socketWrapper.getExecutor().execute(runnable);
+            socketWrapper.execute(runnable);
         }
     }
 

==================================================
SocketWrapperBase.java
index 3628793c16..5cec345442 100644
--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java
@@ -276,11 +276,11 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
     void processStreamOnContainerThread(StreamProcessor streamProcessor, SocketEvent event) {
         StreamRunnable streamRunnable = new StreamRunnable(streamProcessor, event);
         if (streamConcurrency == null) {
-            socketWrapper.getExecutor().execute(streamRunnable);
+            socketWrapper.execute(streamRunnable);
         } else {
             if (getStreamConcurrency() < maxConcurrentStreamExecution) {
                 increaseStreamConcurrency();
-                socketWrapper.getExecutor().execute(streamRunnable);
+                socketWrapper.execute(streamRunnable);
             } else {
                 queuedRunnable.offer(streamRunnable);
             }
@@ -449,7 +449,7 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
             StreamRunnable streamRunnable = queuedRunnable.poll();
             if (streamRunnable != null) {
                 increaseStreamConcurrency();
-                socketWrapper.getExecutor().execute(streamRunnable);
+                socketWrapper.execute(streamRunnable);
             }
         }
     }

==================================================
WsRemoteEndpointImplServer.java
index 920e4ffc31..88d0274d81 100644
--- a/java/org/apache/tomcat/util/net/SocketWrapperBase.java
+++ b/java/org/apache/tomcat/util/net/SocketWrapperBase.java
@@ -22,6 +22,7 @@ import java.nio.channels.CompletionHandler;
 import java.util.Iterator;
 import java.util.concurrent.Executor;
 import java.util.concurrent.LinkedBlockingDeque;
+import java.util.concurrent.RejectedExecutionException;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
@@ -103,12 +104,23 @@ public abstract class SocketWrapperBase<E> {
         return socket;
     }
 
-    public AbstractEndpoint<E,?> getEndpoint() {
+    protected AbstractEndpoint<E,?> getEndpoint() {
         return endpoint;
     }
 
-    public Executor getExecutor() {
-        return endpoint.getExecutor();
+    /**
+     * Transfers processing to a container thread.
+     *
+     * @param runnable The actions to process on a container thread
+     *
+     * @throws RejectedExecutionException If the runnable cannot be executed
+     */
+    public void execute(Runnable runnable) {
+        Executor executor = endpoint.getExecutor();
+        if (!endpoint.isRunning() || executor == null) {
+            throw new RejectedExecutionException();
+        }
+        executor.execute(runnable);
     }
 
     public IOException getError() { return error; }

==================================================
