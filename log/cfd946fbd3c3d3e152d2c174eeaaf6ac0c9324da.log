cfd946fbd3c3d3e152d2c174eeaaf6ac0c9324da
==================================================
Only apply state once, so if the connection state interceptor is not applied, then we need to do it in the pool
==================================================
Filip Hanik
==================================================
Sat Nov 15 03:51:51 2008 +0000
==================================================
PooledConnection.java
Only apply state once, so if the connection state interceptor is not applied, then we need to do it in the pool
Add abstract interceptor to handle statement wrappers and creation, to be used later when we do a clean up and performance interceptor


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@714217 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractCreateStatementInterceptor.java
index a506f52d57..7288f0ddc4 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PooledConnection.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PooledConnection.java
@@ -24,6 +24,8 @@ import java.util.concurrent.locks.ReentrantReadWriteLock;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;
+
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
@@ -80,12 +82,13 @@ public class PooledConnection {
         poolProperties.getDbProperties().setProperty("user", usr);
         poolProperties.getDbProperties().setProperty("password", pwd);
         connection = driver.connect(driverURL, poolProperties.getDbProperties());
-        //set up the default state
-        if (poolProperties.getDefaultReadOnly()!=null) connection.setReadOnly(poolProperties.getDefaultReadOnly().booleanValue());
-        if (poolProperties.getDefaultAutoCommit()!=null) connection.setAutoCommit(poolProperties.getDefaultAutoCommit().booleanValue());
-        if (poolProperties.getDefaultCatalog()!=null) connection.setCatalog(poolProperties.getDefaultCatalog());
-        if (poolProperties.getDefaultTransactionIsolation()!=DataSourceFactory.UNKNOWN_TRANSACTIONISOLATION) connection.setTransactionIsolation(poolProperties.getDefaultTransactionIsolation());
-        
+        //set up the default state, unless we expect the interceptor to do it
+        if (poolProperties.getJdbcInterceptors()==null || poolProperties.getJdbcInterceptors().indexOf(ConnectionState.class.getName())<0) {
+            if (poolProperties.getDefaultReadOnly()!=null) connection.setReadOnly(poolProperties.getDefaultReadOnly().booleanValue());
+            if (poolProperties.getDefaultAutoCommit()!=null) connection.setAutoCommit(poolProperties.getDefaultAutoCommit().booleanValue());
+            if (poolProperties.getDefaultCatalog()!=null) connection.setCatalog(poolProperties.getDefaultCatalog());
+            if (poolProperties.getDefaultTransactionIsolation()!=DataSourceFactory.UNKNOWN_TRANSACTIONISOLATION) connection.setTransactionIsolation(poolProperties.getDefaultTransactionIsolation());
+        }        
         this.discarded = false;
     }
 

==================================================
