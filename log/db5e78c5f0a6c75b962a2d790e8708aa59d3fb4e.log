db5e78c5f0a6c75b962a2d790e8708aa59d3fb4e
==================================================
Fix SpotBugs issues (up to rank 16) in JDBC pool
==================================================
Mark Thomas
==================================================
Mon Nov 27 12:53:37 2017 +0000
==================================================
MultipleCloseTest.java
Fix SpotBugs issues (up to rank 16) in JDBC pool

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1816449 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StarvationTest.java
index cd867d3e12..4180c51f40 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/MultipleCloseTest.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/MultipleCloseTest.java
@@ -61,9 +61,11 @@ public class MultipleCloseTest extends DefaultTestCase {
         Assert.assertTrue(con1.isClosed());
 
         // Open a new connection (This will re-use the previous pooled connection)
-        datasource.getConnection();
+        Connection con2 = datasource.getConnection();
 
         // A connection, once closed, should stay closed
         Assert.assertTrue(con1.isClosed());
+
+        con2.close();
     }
 }

==================================================
TestException.java
index 0c1a667eed..1c551edb31 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/StarvationTest.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/StarvationTest.java
@@ -82,6 +82,7 @@ public class StarvationTest extends DefaultTestCase {
         }finally {
             if (con2!=null) con2.close();
         }
+        con1.close();
     }
 
     @Test
@@ -104,5 +105,6 @@ public class StarvationTest extends DefaultTestCase {
         }finally {
             if (con2!=null) con2.close();
         }
+        con1.close();
     }
 }

==================================================
TestStatementCache.java
index be06e386eb..fe4d20d76e 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestException.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestException.java
@@ -17,7 +17,9 @@
 package org.apache.tomcat.jdbc.test;
 
 import java.sql.Connection;
+import java.sql.Statement;
 
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.tomcat.jdbc.pool.ConnectionPool;
@@ -30,11 +32,11 @@ public class TestException extends DefaultTestCase {
     public void testException() throws Exception {
         datasource.getPoolProperties().setJdbcInterceptors(TestInterceptor.class.getName());
         Connection con = datasource.getConnection();
-        try {
-            con.createStatement();
-        }catch (Exception x) {
-            // Ignore
+        try (Statement s = con.createStatement()){
+        } catch (Exception x) {
+            Assert.fail();
         }
+        con.close();
     }
 
 
@@ -42,7 +44,7 @@ public class TestException extends DefaultTestCase {
 
         @Override
         public void reset(ConnectionPool parent, PooledConnection con) {
-            // TODO Auto-generated method stub
+            // NO-OP
         }
     }
 }

==================================================
TestTimeout.java
index 3a8778ab46..a80962c880 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestStatementCache.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestStatementCache.java
@@ -88,6 +88,7 @@ public class TestStatementCache extends DefaultTestCase {
         ps3.close();
         Assert.assertTrue(ps3.isClosed());
         Assert.assertEquals(1,interceptor.getCacheSize().get());
+        con.close();
     }
 
     @Test
@@ -108,6 +109,7 @@ public class TestStatementCache extends DefaultTestCase {
         ps3.close();
         Assert.assertTrue(ps3.isClosed());
         Assert.assertEquals(0,interceptor.getCacheSize().get());
+        con.close();
     }
 
     @Test

==================================================
TestValidationQueryTimeout.java
index 9b9fbde546..25b1b65c95 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestTimeout.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestTimeout.java
@@ -16,6 +16,9 @@
  */
 package org.apache.tomcat.jdbc.test;
 
+import java.sql.Connection;
+import java.util.HashSet;
+import java.util.Set;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import org.junit.Assert;
@@ -27,6 +30,7 @@ public class TestTimeout extends DefaultTestCase {
 
     @Test
     public void testCheckoutTimeout() throws Exception {
+        Set<Connection> cons = new HashSet<>();
         try {
             this.datasource.getPoolProperties().setTestWhileIdle(true);
             this.datasource.getPoolProperties().setTestOnBorrow(false);
@@ -42,20 +46,24 @@ public class TestTimeout extends DefaultTestCase {
             System.out.println("About to test connection pool:"+datasource);
             for (int i = 0; i < 21; i++) {
                 long now = System.currentTimeMillis();
-                this.datasource.getConnection();
+                cons.add(this.datasource.getConnection());
                 long delta = System.currentTimeMillis()-now;
                 System.out.println("Got connection #"+i+" in "+delta+" ms.");
             }
-            Assert.assertTrue(false);
+            Assert.fail();
         } catch ( Exception x ) {
-            Assert.assertTrue(true);
+            // Expected on 21st checkout
         }finally {
             Thread.sleep(2000);
         }
+        for (Connection c : cons) {
+            c.close();
+        }
     }
 
     @Test
     public void testCheckoutTimeoutFair() throws Exception {
+        Set<Connection> cons = new HashSet<>();
         try {
             this.datasource.getPoolProperties().setFairQueue(true);
             this.datasource.getPoolProperties().setTestWhileIdle(true);
@@ -72,15 +80,18 @@ public class TestTimeout extends DefaultTestCase {
             System.out.println("About to test connection pool:"+datasource);
             for (int i = 0; i < 21; i++) {
                 long now = System.currentTimeMillis();
-                this.datasource.getConnection();
+                cons.add(this.datasource.getConnection());
                 long delta = System.currentTimeMillis()-now;
                 System.out.println("Got connection #"+i+" in "+delta+" ms.");
             }
-            Assert.assertTrue(false);
+            Assert.fail();
         } catch ( Exception x ) {
-            Assert.assertTrue(true);
+            // Expected on 21st checkout
         }finally {
             Thread.sleep(2000);
         }
+        for (Connection c : cons) {
+            c.close();
+        }
     }
 }

==================================================
