a02d4b3e95aecfae1fa9ef1bdc75de331032b6ac
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48233
==================================================
Mark Emlyn
==================================================
Mon Nov 23 00:46:20 2009 +0000
==================================================
ApplicationDispatcher.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48233
Reduce visibility of loggers
Patch provided by sebb

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@883204 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AsyncContextImpl.java
index 34cbf48938..74b2dff8ef 100644
--- a/java/org/apache/catalina/core/ApplicationDispatcher.java
+++ b/java/org/apache/catalina/core/ApplicationDispatcher.java
@@ -68,7 +68,7 @@ import org.apache.tomcat.util.res.StringManager;
 final class ApplicationDispatcher
     implements RequestDispatcher {
 
-    protected static final Log log = LogFactory.getLog(ApplicationDispatcher.class);
+    private static final Log log = LogFactory.getLog(ApplicationDispatcher.class);
 
     protected class PrivilegedForward
             implements PrivilegedExceptionAction<Void> {

==================================================
JreMemoryLeakPreventionListener.java
index bfcf7ef7e3..2bb74360fd 100644
--- a/java/org/apache/catalina/core/AsyncContextImpl.java
+++ b/java/org/apache/catalina/core/AsyncContextImpl.java
@@ -51,7 +51,7 @@ public class AsyncContextImpl implements AsyncContext {
         NOT_STARTED, STARTED, DISPATCHING, DISPATCHED, COMPLETING, TIMING_OUT, ERROR_DISPATCHING
     }
     
-    protected static final Log log = LogFactory.getLog(AsyncContextImpl.class);
+    private static final Log log = LogFactory.getLog(AsyncContextImpl.class);
     
     private ServletRequest servletRequest = null;
     private ServletResponse servletResponse = null;

==================================================
ClusterJmxHelper.java
index 49487b9628..4554f8f28e 100644
--- a/java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java
+++ b/java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java
@@ -47,7 +47,7 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public class JreMemoryLeakPreventionListener implements LifecycleListener {
 
-    protected static final Log log =
+    private static final Log log =
         LogFactory.getLog(JreMemoryLeakPreventionListener.class);
     protected static final StringManager sm =
         StringManager.getManager(Constants.Package);

==================================================
SerializablePrincipal.java
index 24150192f1..3b0a173404 100644
--- a/java/org/apache/catalina/ha/jmx/ClusterJmxHelper.java
+++ b/java/org/apache/catalina/ha/jmx/ClusterJmxHelper.java
@@ -39,7 +39,7 @@ public class ClusterJmxHelper {
     
     protected static Registry registry = Registry.getRegistry(null,null);
     
-    protected static final Log log = LogFactory.getLog(ClusterJmxHelper.class);
+    private static final Log log = LogFactory.getLog(ClusterJmxHelper.class);
     
     protected static boolean jmxEnabled = true;
     

==================================================
WebappClassLoader.java
index b21eae12e1..90bbaf33e8 100644
--- a/java/org/apache/catalina/ha/session/SerializablePrincipal.java
+++ b/java/org/apache/catalina/ha/session/SerializablePrincipal.java
@@ -44,7 +44,7 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public class SerializablePrincipal  implements java.io.Serializable {
 
-    protected static final org.apache.juli.logging.Log log =
+    private static final org.apache.juli.logging.Log log =
         org.apache.juli.logging.LogFactory.getLog(SerializablePrincipal.class);
     
     /**

==================================================
ManagerBase.java
index 8673d51b5a..cd82d6f440 100644
--- a/java/org/apache/catalina/loader/WebappClassLoader.java
+++ b/java/org/apache/catalina/loader/WebappClassLoader.java
@@ -108,7 +108,7 @@ public class WebappClassLoader
     implements Lifecycle
  {
 
-    protected static final org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( WebappClassLoader.class );
 
     public static final boolean ENABLE_CLEAR_REFERENCES = 

==================================================
StandardManager.java
index a0249f4445..f7f1799b2e 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -65,7 +65,7 @@ import org.apache.tomcat.util.modeler.Registry;
  */
 
 public abstract class ManagerBase implements Manager, MBeanRegistration {
-    protected Log log = LogFactory.getLog(ManagerBase.class);
+    private final Log log = LogFactory.getLog(ManagerBase.class); // must not be static
 
     // ----------------------------------------------------- Instance Variables
 
@@ -726,8 +726,6 @@ public abstract class ManagerBase implements Manager, MBeanRegistration {
         if( initialized ) return;
         initialized=true;        
         
-        log = LogFactory.getLog(ManagerBase.class);
-        
         if( oname==null ) {
             try {
                 StandardContext ctx=(StandardContext)this.getContainer();

==================================================
ConnectorCreateRule.java
index 4f5c6ca7b6..25f5279280 100644
--- a/java/org/apache/catalina/session/StandardManager.java
+++ b/java/org/apache/catalina/session/StandardManager.java
@@ -46,6 +46,8 @@ import org.apache.catalina.util.CustomObjectInputStream;
 import org.apache.catalina.util.LifecycleSupport;
 
 import org.apache.catalina.security.SecurityUtil;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 /**
  * Standard implementation of the <b>Manager</b> interface that provides
  * simple session persistence across restarts of this component (such as
@@ -65,6 +67,8 @@ public class StandardManager
     extends ManagerBase
     implements Lifecycle, PropertyChangeListener {
 
+    private final Log log = LogFactory.getLog(StandardManager.class); // must not be static
+
     // ---------------------------------------------------- Security Classes
     private class PrivilegedDoLoad
         implements PrivilegedExceptionAction<Void> {

==================================================
ContextConfig.java
index 902453658e..c24a2eb311 100644
--- a/java/org/apache/catalina/startup/ConnectorCreateRule.java
+++ b/java/org/apache/catalina/startup/ConnectorCreateRule.java
@@ -37,7 +37,7 @@ import org.apache.juli.logging.Log;
 
 public class ConnectorCreateRule extends Rule {
 
-    protected static final Log log = LogFactory.getLog(ConnectorCreateRule.class);
+    private static final Log log = LogFactory.getLog(ConnectorCreateRule.class);
     // --------------------------------------------------------- Public Methods
 
 

==================================================
DigesterFactory.java
index b41b9c7cc6..02da045fd7 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -58,6 +58,8 @@ import org.apache.catalina.deploy.FilterDef;
 import org.apache.catalina.deploy.FilterMap;
 import org.apache.catalina.deploy.LoginConfig;
 import org.apache.catalina.deploy.SecurityConstraint;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.JarScanner;
 import org.apache.tomcat.JarScannerCallback;
 import org.apache.tomcat.util.res.StringManager;
@@ -79,8 +81,7 @@ import org.xml.sax.SAXParseException;
 public class ContextConfig
     implements LifecycleListener {
 
-    protected static final org.apache.juli.logging.Log log=
-        org.apache.juli.logging.LogFactory.getLog( ContextConfig.class );
+    private static final Log log = LogFactory.getLog( ContextConfig.class );
 
     // ----------------------------------------------------- Instance Variables
 

==================================================
EngineConfig.java
index 7cc2d2f8b9..939feab89b 100644
--- a/java/org/apache/catalina/startup/DigesterFactory.java
+++ b/java/org/apache/catalina/startup/DigesterFactory.java
@@ -21,6 +21,8 @@ package org.apache.catalina.startup;
 import java.net.URL;
 
 import org.apache.catalina.util.SchemaResolver;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.digester.Digester;
 import org.apache.tomcat.util.digester.RuleSet;
 
@@ -33,8 +35,7 @@ public class DigesterFactory {
     /**
      * The log.
      */
-   protected static final org.apache.juli.logging.Log log = 
-       org.apache.juli.logging.LogFactory.getLog(DigesterFactory.class);
+    private static final Log log = LogFactory.getLog(DigesterFactory.class);
 
     /**
      * Create a <code>Digester</code> parser with no <code>Rule</code>

==================================================
HostConfig.java
index 21f5a41f65..ff148d8d28 100644
--- a/java/org/apache/catalina/startup/EngineConfig.java
+++ b/java/org/apache/catalina/startup/EngineConfig.java
@@ -23,6 +23,8 @@ import org.apache.catalina.Engine;
 import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleEvent;
 import org.apache.catalina.LifecycleListener;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.res.StringManager;
 
 
@@ -38,8 +40,7 @@ public class EngineConfig
     implements LifecycleListener {
 
 
-    protected static final org.apache.juli.logging.Log log=
-        org.apache.juli.logging.LogFactory.getLog( EngineConfig.class );
+    private static final Log log = LogFactory.getLog( EngineConfig.class );
 
     // ----------------------------------------------------- Instance Variables
 

==================================================
ChannelInterceptorBase.java
index ea75728cbe..d7e8220769 100644
--- a/java/org/apache/catalina/startup/HostConfig.java
+++ b/java/org/apache/catalina/startup/HostConfig.java
@@ -44,6 +44,8 @@ import org.apache.catalina.LifecycleListener;
 import org.apache.catalina.core.ContainerBase;
 import org.apache.catalina.core.StandardHost;
 import org.apache.catalina.util.IOTools;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.res.StringManager;
 import org.apache.tomcat.util.digester.Digester;
 import org.apache.tomcat.util.modeler.Registry;
@@ -60,8 +62,7 @@ import org.apache.tomcat.util.modeler.Registry;
 public class HostConfig
     implements LifecycleListener {
     
-    protected static final org.apache.juli.logging.Log log=
-         org.apache.juli.logging.LogFactory.getLog( HostConfig.class );
+    private static final Log log = LogFactory.getLog( HostConfig.class );
 
     // ----------------------------------------------------- Instance Variables
 

==================================================
GroupChannel.java
index 7ff544f01b..a92a089e44 100644
--- a/java/org/apache/catalina/tribes/group/ChannelInterceptorBase.java
+++ b/java/org/apache/catalina/tribes/group/ChannelInterceptorBase.java
@@ -20,6 +20,8 @@ import org.apache.catalina.tribes.ChannelException;
 import org.apache.catalina.tribes.ChannelInterceptor;
 import org.apache.catalina.tribes.ChannelMessage;
 import org.apache.catalina.tribes.Member;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * Abstract class for the interceptor base class.
@@ -29,8 +31,7 @@ import org.apache.catalina.tribes.Member;
 
 public abstract class ChannelInterceptorBase implements ChannelInterceptor {
 
-    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(
-        ChannelInterceptorBase.class);
+    private static final Log log = LogFactory.getLog(ChannelInterceptorBase.class);
 
     private ChannelInterceptor next;
     private ChannelInterceptor previous;

==================================================
RpcChannel.java
index 5606926d81..0d9c3c2f62 100644
--- a/java/org/apache/catalina/tribes/group/GroupChannel.java
+++ b/java/org/apache/catalina/tribes/group/GroupChannel.java
@@ -43,6 +43,8 @@ import org.apache.catalina.tribes.io.BufferPool;
 import org.apache.catalina.tribes.RemoteProcessException;
 import org.apache.catalina.tribes.util.Logs;
 import org.apache.catalina.tribes.util.Arrays;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * The default implementation of a Channel.<br>
@@ -54,6 +56,8 @@ import org.apache.catalina.tribes.util.Arrays;
  * @version $Revision$, $Date$
  */
 public class GroupChannel extends ChannelInterceptorBase implements ManagedChannel {
+    private static final Log log = LogFactory.getLog(GroupChannel.class);
+
     /**
      * Flag to determine if the channel manages its own heartbeat
      * If set to true, the channel will start a local thread for the heart beat.
@@ -638,7 +642,7 @@ public class GroupChannel extends ChannelInterceptorBase implements ManagedChann
      * @version 1.0
      */
     public static class HeartbeatThread extends Thread {
-        protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(HeartbeatThread.class);
+        private static final Log log = LogFactory.getLog(HeartbeatThread.class);
         protected static int counter = 1;
         protected static synchronized int inc() {
             return counter++;

==================================================
GzipInterceptor.java
index 601d3ac36a..c2fd1c4390 100644
--- a/java/org/apache/catalina/tribes/group/RpcChannel.java
+++ b/java/org/apache/catalina/tribes/group/RpcChannel.java
@@ -26,13 +26,15 @@ import org.apache.catalina.tribes.ChannelException;
 import org.apache.catalina.tribes.ChannelListener;
 import org.apache.catalina.tribes.Member;
 import org.apache.catalina.tribes.util.UUIDGenerator;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * A channel to handle RPC messaging
  * @author Filip Hanik
  */
 public class RpcChannel implements ChannelListener{
-    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(RpcChannel.class);
+    private static final Log log = LogFactory.getLog(RpcChannel.class);
     
     public static final int FIRST_REPLY = 1;
     public static final int MAJORITY_REPLY = 2;

==================================================
MessageDispatchInterceptor.java
index 165d7b5770..4fab369000 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/GzipInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/GzipInterceptor.java
@@ -28,6 +28,8 @@ import org.apache.catalina.tribes.ChannelMessage;
 import org.apache.catalina.tribes.Member;
 import org.apache.catalina.tribes.group.ChannelInterceptorBase;
 import org.apache.catalina.tribes.group.InterceptorPayload;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 
 
@@ -38,6 +40,9 @@ import org.apache.catalina.tribes.group.InterceptorPayload;
  * @version 1.0
  */
 public class GzipInterceptor extends ChannelInterceptorBase {
+
+    private static final Log log = LogFactory.getLog(GzipInterceptor.class);
+
     public static final int DEFAULT_BUFFER_SIZE = 2048;
     
     @Override

==================================================
NonBlockingCoordinator.java
index e7ff8d2063..0908409a9e 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/MessageDispatchInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/MessageDispatchInterceptor.java
@@ -25,6 +25,8 @@ import org.apache.catalina.tribes.group.InterceptorPayload;
 import org.apache.catalina.tribes.transport.bio.util.FastQueue;
 import org.apache.catalina.tribes.transport.bio.util.LinkObject;
 import org.apache.catalina.tribes.UniqueId;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  *
@@ -38,7 +40,7 @@ import org.apache.catalina.tribes.UniqueId;
  * @version 1.0
  */
 public class MessageDispatchInterceptor extends ChannelInterceptorBase implements Runnable {
-    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(MessageDispatchInterceptor.class);
+    private static final Log log = LogFactory.getLog(MessageDispatchInterceptor.class);
 
     protected long maxQueueSize = 1024*1024*64; //64MB
     protected FastQueue queue = new FastQueue();

==================================================
TcpPingInterceptor.java
index c9fa1adeba..764d2ba223 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/NonBlockingCoordinator.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/NonBlockingCoordinator.java
@@ -32,6 +32,8 @@ import org.apache.catalina.tribes.membership.MemberImpl;
 import org.apache.catalina.tribes.membership.Membership;
 import org.apache.catalina.tribes.util.Arrays;
 import org.apache.catalina.tribes.util.UUIDGenerator;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * <p>Title: Auto merging leader election algorithm</p>
@@ -120,6 +122,8 @@ import org.apache.catalina.tribes.util.UUIDGenerator;
  */
 public class NonBlockingCoordinator extends ChannelInterceptorBase {
     
+    private static final Log log = LogFactory.getLog(NonBlockingCoordinator.class);
+
     /**
      * header for a coordination message
      */

==================================================
ThroughputInterceptor.java
index 282eb7f9bf..7e056a95ee 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java
@@ -27,6 +27,8 @@ import org.apache.catalina.tribes.ChannelMessage;
 import org.apache.catalina.tribes.Member;
 import org.apache.catalina.tribes.group.ChannelInterceptorBase;
 import org.apache.catalina.tribes.io.ChannelData;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * 
@@ -39,8 +41,7 @@ import org.apache.catalina.tribes.io.ChannelData;
 
 public class TcpPingInterceptor extends ChannelInterceptorBase {
     
-    protected static final org.apache.juli.logging.Log log = 
-        org.apache.juli.logging.LogFactory.getLog(TcpPingInterceptor.class);
+    private static final Log log = LogFactory.getLog(TcpPingInterceptor.class);
     
     protected static byte[] TCP_PING_DATA = new byte[] {
         79, -89, 115, 72, 121, -33, 67, -55, -97, 111, -119, -128, -95, 91, 7, 20,

==================================================
BufferPool.java
index 5afc846168..29bf23ebd0 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/ThroughputInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/ThroughputInterceptor.java
@@ -27,6 +27,8 @@ import org.apache.catalina.tribes.group.ChannelInterceptorBase;
 import org.apache.catalina.tribes.group.InterceptorPayload;
 import org.apache.catalina.tribes.io.ChannelData;
 import org.apache.catalina.tribes.io.XByteBuffer;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 
 
@@ -37,7 +39,7 @@ import org.apache.catalina.tribes.io.XByteBuffer;
  * @version 1.0
  */
 public class ThroughputInterceptor extends ChannelInterceptorBase {
-    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ThroughputInterceptor.class);
+    private static final Log log = LogFactory.getLog(ThroughputInterceptor.class);
 
     double mbTx = 0;
     double mbAppTx = 0;

==================================================
ObjectReader.java
index e06e686f7b..6254d668f8 100644
--- a/java/org/apache/catalina/tribes/io/BufferPool.java
+++ b/java/org/apache/catalina/tribes/io/BufferPool.java
@@ -27,7 +27,7 @@ import org.apache.juli.logging.LogFactory;
  * @version 1.0
  */
 public class BufferPool {
-    protected static final Log log = LogFactory.getLog(BufferPool.class);
+    private static final Log log = LogFactory.getLog(BufferPool.class);
 
     public static final int DEFAULT_POOL_SIZE = 100*1024*1024; //100MB
 

==================================================
ReplicatedMap.java
index cb251692fc..001bff39a7 100644
--- a/java/org/apache/catalina/tribes/io/ObjectReader.java
+++ b/java/org/apache/catalina/tribes/io/ObjectReader.java
@@ -22,6 +22,8 @@ import java.nio.ByteBuffer;
 import java.nio.channels.SocketChannel;
 
 import org.apache.catalina.tribes.ChannelMessage;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 
 
@@ -37,7 +39,7 @@ import org.apache.catalina.tribes.ChannelMessage;
  */
 public class ObjectReader {
 
-    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ObjectReader.class);
+    private static final Log log = LogFactory.getLog(ObjectReader.class);
 
     private XByteBuffer buffer;
 

==================================================
BioReplicationTask.java
index e2cf910ff7..8e544e7e88 100644
--- a/java/org/apache/catalina/tribes/tipis/ReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/ReplicatedMap.java
@@ -24,6 +24,8 @@ import org.apache.catalina.tribes.ChannelListener;
 import org.apache.catalina.tribes.Member;
 import org.apache.catalina.tribes.MembershipListener;
 import org.apache.catalina.tribes.group.RpcCallback;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * All-to-all replication for a hash map implementation. Each node in the cluster will carry an identical 
@@ -51,7 +53,7 @@ import org.apache.catalina.tribes.group.RpcCallback;
  */
 public class ReplicatedMap extends AbstractReplicatedMap implements RpcCallback, ChannelListener, MembershipListener {
 
-    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ReplicatedMap.class);
+    private static final Log log = LogFactory.getLog(ReplicatedMap.class);
 
 //------------------------------------------------------------------------------
 //              CONSTRUCTORS / DESTRUCTORS

==================================================
NioReceiver.java
index 2e89973258..997de7122f 100644
--- a/java/org/apache/catalina/tribes/transport/bio/BioReplicationTask.java
+++ b/java/org/apache/catalina/tribes/transport/bio/BioReplicationTask.java
@@ -27,6 +27,8 @@ import org.apache.catalina.tribes.io.ListenCallback;
 import org.apache.catalina.tribes.ChannelMessage;
 import org.apache.catalina.tribes.io.ChannelData;
 import org.apache.catalina.tribes.io.BufferPool;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * A worker thread class which can drain channels and echo-back the input. Each
@@ -45,7 +47,7 @@ import org.apache.catalina.tribes.io.BufferPool;
 public class BioReplicationTask extends AbstractRxTask {
 
 
-    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( BioReplicationTask.class );
+    private static final Log log = LogFactory.getLog( BioReplicationTask.class );
     
     protected Socket socket;
     protected ObjectReader reader;

==================================================
NioSender.java
index 96b0c50863..4a9cdbf9ee 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java
@@ -35,6 +35,9 @@ import org.apache.catalina.tribes.transport.ReceiverBase;
 import org.apache.catalina.tribes.transport.RxTaskPool;
 import org.apache.catalina.tribes.transport.AbstractRxTask;
 import org.apache.catalina.tribes.util.StringManager;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+
 import java.util.LinkedList;
 import java.util.Set;
 import java.nio.channels.CancelledKeyException;
@@ -46,7 +49,7 @@ import java.nio.channels.ClosedSelectorException;
  */
 public class NioReceiver extends ReceiverBase implements Runnable, ChannelReceiver, ListenCallback {
 
-    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(NioReceiver.class);
+    private static final Log log = LogFactory.getLog(NioReceiver.class);
 
     /**
      * The string manager for this package.

==================================================
ParallelNioSender.java
index a90c46d4e6..b734bf4145 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioSender.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioSender.java
@@ -30,6 +30,9 @@ import org.apache.catalina.tribes.io.XByteBuffer;
 import org.apache.catalina.tribes.transport.AbstractSender;
 import org.apache.catalina.tribes.transport.DataSender;
 import org.apache.catalina.tribes.RemoteProcessException;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+
 import java.io.EOFException;
 import java.net.*;
 
@@ -49,7 +52,7 @@ import java.net.*;
  */
 public class NioSender extends AbstractSender implements DataSender{
 
-    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(NioSender.class);
+    private static final Log log = LogFactory.getLog(NioSender.class);
 
 
 

==================================================
Arrays.java
index e44442dbb0..69745bc0e7 100644
--- a/java/org/apache/catalina/tribes/transport/nio/ParallelNioSender.java
+++ b/java/org/apache/catalina/tribes/transport/nio/ParallelNioSender.java
@@ -37,6 +37,8 @@ import java.net.UnknownHostException;
 import org.apache.catalina.tribes.Channel;
 import org.apache.catalina.tribes.util.Logs;
 import org.apache.catalina.tribes.UniqueId;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * <p>Title: </p>
@@ -50,7 +52,7 @@ import org.apache.catalina.tribes.UniqueId;
  */
 public class ParallelNioSender extends AbstractSender implements MultiPointSender {
 
-    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ParallelNioSender.class);
+    private static final Log log = LogFactory.getLog(ParallelNioSender.class);
     protected long selectTimeout = 5000; //default 5 seconds, same as send timeout
     protected Selector selector;
     protected HashMap<Member, NioSender> nioSenders =

==================================================
AjpAprProcessor.java
index 6e61c54a15..87ebe0a123 100644
--- a/java/org/apache/catalina/tribes/util/Arrays.java
+++ b/java/org/apache/catalina/tribes/util/Arrays.java
@@ -35,7 +35,7 @@ import java.util.StringTokenizer;
  * @version 1.0
  */
 public class Arrays {
-    protected static final Log log = LogFactory.getLog(Arrays.class);
+    private static final Log log = LogFactory.getLog(Arrays.class);
     
     public static boolean contains(byte[] source, int srcoffset, byte[] key, int keyoffset, int length) {
         if ( srcoffset < 0 || srcoffset >= source.length) throw new ArrayIndexOutOfBoundsException("srcoffset is out of bounds.");

==================================================
AjpAprProtocol.java
index e05b5ecd7f..0a66f23994 100644
--- a/java/org/apache/coyote/ajp/AjpAprProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpAprProcessor.java
@@ -33,6 +33,8 @@ import org.apache.coyote.OutputBuffer;
 import org.apache.coyote.Request;
 import org.apache.coyote.RequestInfo;
 import org.apache.coyote.Response;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.jni.Socket;
 import org.apache.tomcat.jni.Status;
 import org.apache.tomcat.util.buf.ByteChunk;
@@ -61,8 +63,7 @@ public class AjpAprProcessor implements ActionHook {
     /**
      * Logger.
      */
-    protected static final org.apache.juli.logging.Log log
-        = org.apache.juli.logging.LogFactory.getLog(AjpAprProcessor.class);
+    private static final Log log = LogFactory.getLog(AjpAprProcessor.class);
 
     /**
      * The string manager for this package.

==================================================
AjpMessage.java
index 68e47fedcd..84c68a8cf4 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -35,6 +35,8 @@ import org.apache.coyote.Adapter;
 import org.apache.coyote.ProtocolHandler;
 import org.apache.coyote.RequestGroupInfo;
 import org.apache.coyote.RequestInfo;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.modeler.Registry;
 import org.apache.tomcat.util.net.AprEndpoint;
 import org.apache.tomcat.util.net.SocketStatus;
@@ -54,8 +56,7 @@ public class AjpAprProtocol
     implements ProtocolHandler, MBeanRegistration {
     
     
-    protected static final org.apache.juli.logging.Log log =
-        org.apache.juli.logging.LogFactory.getLog(AjpAprProtocol.class);
+    private static final Log log = LogFactory.getLog(AjpAprProtocol.class);
 
     /**
      * The string manager for this package.

==================================================
AjpProcessor.java
index a66d6c92d2..abb1c37511 100644
--- a/java/org/apache/coyote/ajp/AjpMessage.java
+++ b/java/org/apache/coyote/ajp/AjpMessage.java
@@ -17,6 +17,8 @@
 
 package org.apache.coyote.ajp;
 
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.CharChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
@@ -38,8 +40,7 @@ import org.apache.tomcat.util.res.StringManager;
 public class AjpMessage {
 
 
-    protected static final org.apache.juli.logging.Log log =
-        org.apache.juli.logging.LogFactory.getLog(AjpMessage.class);
+    private static final Log log = LogFactory.getLog(AjpMessage.class);
 
     /**
      * The string manager for this package.

==================================================
AjpProtocol.java
index 76e39c9bef..05ee1b8f97 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -35,6 +35,8 @@ import org.apache.coyote.OutputBuffer;
 import org.apache.coyote.Request;
 import org.apache.coyote.RequestInfo;
 import org.apache.coyote.Response;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.HexUtils;
 import org.apache.tomcat.util.buf.MessageBytes;
@@ -61,8 +63,7 @@ public class AjpProcessor implements ActionHook {
     /**
      * Logger.
      */
-    protected static final org.apache.juli.logging.Log log
-        = org.apache.juli.logging.LogFactory.getLog(AjpProcessor.class);
+    private static final Log log = LogFactory.getLog(AjpProcessor.class);
 
     /**
      * The string manager for this package.

==================================================
AbstractHttp11Processor.java
index 91e62408c9..c8c6570a57 100644
--- a/java/org/apache/coyote/ajp/AjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpProtocol.java
@@ -36,6 +36,8 @@ import org.apache.coyote.Adapter;
 import org.apache.coyote.ProtocolHandler;
 import org.apache.coyote.RequestGroupInfo;
 import org.apache.coyote.RequestInfo;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.modeler.Registry;
 import org.apache.tomcat.util.net.JIoEndpoint;
 import org.apache.tomcat.util.net.SocketWrapper;
@@ -55,8 +57,7 @@ public class AjpProtocol
     implements ProtocolHandler, MBeanRegistration {
     
     
-    protected static final org.apache.juli.logging.Log log =
-        org.apache.juli.logging.LogFactory.getLog(AjpProtocol.class);
+    private static final Log log = LogFactory.getLog(AjpProtocol.class);
 
     /**
      * The string manager for this package.

==================================================
Http11AprProcessor.java
index 641e412ea7..cd73296b16 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -23,6 +23,8 @@ import java.util.regex.PatternSyntaxException;
 import org.apache.coyote.Adapter;
 import org.apache.coyote.Request;
 import org.apache.coyote.Response;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.buf.Ascii;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
@@ -33,8 +35,7 @@ public class AbstractHttp11Processor {
     /**
      * Logger.
      */
-    protected static final org.apache.juli.logging.Log log
-        = org.apache.juli.logging.LogFactory.getLog(AbstractHttp11Processor.class);
+    private static final Log log = LogFactory.getLog(AbstractHttp11Processor.class);
 
     /**
      * The string manager for this package.

==================================================
Http11AprProtocol.java
index 17b04a4b85..dc80c58039 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -41,6 +41,8 @@ import org.apache.coyote.http11.filters.SavedRequestInputFilter;
 import org.apache.coyote.http11.filters.VoidInputFilter;
 import org.apache.coyote.http11.filters.VoidOutputFilter;
 import org.apache.coyote.http11.filters.BufferedInputFilter;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.jni.Address;
 import org.apache.tomcat.jni.SSL;
 import org.apache.tomcat.jni.SSLSocket;
@@ -69,8 +71,7 @@ public class Http11AprProcessor implements ActionHook {
     /**
      * Logger.
      */
-    protected static final org.apache.juli.logging.Log log
-        = org.apache.juli.logging.LogFactory.getLog(Http11AprProcessor.class);
+    private static final Log log = LogFactory.getLog(Http11AprProcessor.class);
 
     /**
      * The string manager for this package.

==================================================
Http11NioProcessor.java
index 143ff104a6..f55fe057e3 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -36,6 +36,8 @@ import org.apache.coyote.Adapter;
 import org.apache.coyote.ProtocolHandler;
 import org.apache.coyote.RequestGroupInfo;
 import org.apache.coyote.RequestInfo;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.modeler.Registry;
 import org.apache.tomcat.util.net.AprEndpoint;
 import org.apache.tomcat.util.net.SocketStatus;
@@ -53,8 +55,7 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration {
 
-    protected static final org.apache.juli.logging.Log log = 
-        org.apache.juli.logging.LogFactory.getLog(Http11AprProtocol.class);
+    private static final Log log = LogFactory.getLog(Http11AprProtocol.class);
 
     /**
      * The string manager for this package.

==================================================
Http11Processor.java
index fcf4d94d49..ede09ee2d1 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -37,6 +37,8 @@ import org.apache.coyote.http11.filters.IdentityOutputFilter;
 import org.apache.coyote.http11.filters.SavedRequestInputFilter;
 import org.apache.coyote.http11.filters.VoidInputFilter;
 import org.apache.coyote.http11.filters.VoidOutputFilter;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.buf.Ascii;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.HexUtils;
@@ -59,6 +61,11 @@ import org.apache.tomcat.util.net.NioEndpoint.KeyAttachment;
  */
 public class Http11NioProcessor extends AbstractHttp11Processor implements ActionHook {
 
+    /**
+     * Logger.
+     */
+    private static final Log log = LogFactory.getLog(Http11NioProcessor.class);
+
 
     /**
      * SSL information.

==================================================
JspC.java
index 5b38a5abc9..c4354b451b 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -38,6 +38,8 @@ import org.apache.coyote.http11.filters.IdentityOutputFilter;
 import org.apache.coyote.http11.filters.SavedRequestInputFilter;
 import org.apache.coyote.http11.filters.VoidInputFilter;
 import org.apache.coyote.http11.filters.VoidOutputFilter;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.HexUtils;
 import org.apache.tomcat.util.buf.MessageBytes;
@@ -56,6 +58,11 @@ import org.apache.tomcat.util.net.SocketWrapper;
  */
 public class Http11Processor extends AbstractHttp11Processor implements ActionHook {
 
+    /**
+     * Logger.
+     */
+    private static final Log log = LogFactory.getLog(Http11Processor.class);
+
    // ------------------------------------------------------------ Constructor
 
 

==================================================
JspCompilationContext.java
index 7c886a6bca..fae2266cd9 100644
--- a/java/org/apache/jasper/JspC.java
+++ b/java/org/apache/jasper/JspC.java
@@ -97,7 +97,7 @@ public class JspC implements Options {
             "clsid:8AD9C840-044E-11D1-B3E9-00805F499D93";
 
     // Logger
-    protected static final Log log = LogFactory.getLog(JspC.class);
+    private static final Log log = LogFactory.getLog(JspC.class);
 
     protected static final String SWITCH_VERBOSE = "-v";
     protected static final String SWITCH_HELP = "-help";

==================================================
AntCompiler.java
index 4c8d3c31dc..ebbb5f662f 100644
--- a/java/org/apache/jasper/JspCompilationContext.java
+++ b/java/org/apache/jasper/JspCompilationContext.java
@@ -36,6 +36,8 @@ import org.apache.jasper.compiler.Localizer;
 import org.apache.jasper.compiler.ServletWriter;
 import org.apache.jasper.servlet.JasperLoader;
 import org.apache.jasper.servlet.JspServletWrapper;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * A place holder for various things that are used through out the JSP
@@ -53,8 +55,7 @@ import org.apache.jasper.servlet.JspServletWrapper;
  */
 public class JspCompilationContext {
 
-    protected final org.apache.juli.logging.Log log =
-        org.apache.juli.logging.LogFactory.getLog(JspCompilationContext.class);
+    private final Log log = LogFactory.getLog(JspCompilationContext.class); // must not be static
 
     protected Map<String, URL> tagFileJarUrls;
     protected boolean isPackagedTagFile;

==================================================
Compiler.java
index b45946e7c1..be95ffab31 100644
--- a/java/org/apache/jasper/compiler/AntCompiler.java
+++ b/java/org/apache/jasper/compiler/AntCompiler.java
@@ -25,6 +25,8 @@ import java.io.PrintStream;
 import java.util.StringTokenizer;
 
 import org.apache.jasper.JasperException;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.DefaultLogger;
 import org.apache.tools.ant.Project;
@@ -44,7 +46,9 @@ import org.apache.tools.ant.types.PatternSet;
  */
 public class AntCompiler extends Compiler {
 
-    protected static Object javacLock = new Object();
+    private final Log log = LogFactory.getLog(AntCompiler.class); // must not be static
+    
+    protected static final Object javacLock = new Object();
 
     static {
         System.setErr(new SystemLogHandler(System.err));

==================================================
JDTCompiler.java
index 2e1c613cd7..77a172e645 100644
--- a/java/org/apache/jasper/compiler/Compiler.java
+++ b/java/org/apache/jasper/compiler/Compiler.java
@@ -33,6 +33,8 @@ import org.apache.jasper.JasperException;
 import org.apache.jasper.JspCompilationContext;
 import org.apache.jasper.Options;
 import org.apache.jasper.servlet.JspServletWrapper;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 /**
  * Main JSP compiler class. This class uses Ant for compiling.
@@ -46,8 +48,7 @@ import org.apache.jasper.servlet.JspServletWrapper;
  */
 public abstract class Compiler {
     
-    protected org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory
-            .getLog(Compiler.class);
+    private final Log log = LogFactory.getLog(Compiler.class); // must not be static
 
     // ----------------------------------------------------- Instance Variables
 

==================================================
GenericParser.java
index 309681b491..5af0d3f1cb 100644
--- a/java/org/apache/jasper/compiler/JDTCompiler.java
+++ b/java/org/apache/jasper/compiler/JDTCompiler.java
@@ -35,6 +35,8 @@ import java.util.Map;
 import java.util.StringTokenizer;
 
 import org.apache.jasper.JasperException;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.eclipse.jdt.core.compiler.IProblem;
 import org.eclipse.jdt.internal.compiler.ClassFile;
 import org.eclipse.jdt.internal.compiler.CompilationResult;
@@ -60,7 +62,8 @@ import org.eclipse.jdt.internal.compiler.problem.DefaultProblemFactory;
  */
 public class JDTCompiler extends org.apache.jasper.compiler.Compiler {
 
-    
+    private final Log log = LogFactory.getLog(JDTCompiler.class); // must not be static
+   
     /** 
      * Compile the servlet from .java file to .class file
      */

==================================================
XercesParser.java
index 6c6fedb449..d2ee132635 100644
--- a/java/org/apache/tomcat/util/digester/GenericParser.java
+++ b/java/org/apache/tomcat/util/digester/GenericParser.java
@@ -41,7 +41,7 @@ public class GenericParser{
     /**
      * The Log to which all SAX event related logging calls will be made.
      */
-    protected static final Log log =
+    private static final Log log =
         LogFactory.getLog("org.apache.commons.digester.Digester.sax");
 
     /**

==================================================
AprEndpoint.java
index cb10d7696c..8e60c5491c 100644
--- a/java/org/apache/tomcat/util/digester/XercesParser.java
+++ b/java/org/apache/tomcat/util/digester/XercesParser.java
@@ -46,7 +46,7 @@ public class XercesParser{
     /**
      * The Log to which all SAX event related logging calls will be made.
      */
-    protected static final Log log =
+    private static final Log log =
         LogFactory.getLog("org.apache.commons.digester.Digester.sax");
 
 

==================================================
JIoEndpoint.java
index d0e88106ea..2b48c1aebe 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -57,7 +57,7 @@ public class AprEndpoint extends AbstractEndpoint {
     // -------------------------------------------------------------- Constants
 
 
-    protected static final Log log = LogFactory.getLog(AprEndpoint.class);
+    private static final Log log = LogFactory.getLog(AprEndpoint.class);
 
 
     // ----------------------------------------------------------------- Fields

==================================================
NioBlockingSelector.java
index 674b9c9c41..1471cb7c61 100644
--- a/java/org/apache/tomcat/util/net/JIoEndpoint.java
+++ b/java/org/apache/tomcat/util/net/JIoEndpoint.java
@@ -49,7 +49,7 @@ public class JIoEndpoint extends AbstractEndpoint {
 
     // -------------------------------------------------------------- Constants
 
-    protected static final Log log = LogFactory.getLog(JIoEndpoint.class);
+    private static final Log log = LogFactory.getLog(JIoEndpoint.class);
 
     // ----------------------------------------------------------------- Fields
 

==================================================
NioSelectorPool.java
index cbe80a104e..8a157ffc28 100644
--- a/java/org/apache/tomcat/util/net/NioBlockingSelector.java
+++ b/java/org/apache/tomcat/util/net/NioBlockingSelector.java
@@ -38,7 +38,7 @@ import java.util.concurrent.atomic.AtomicInteger;
 
 public class NioBlockingSelector {
     
-    protected static final Log log = LogFactory.getLog(NioBlockingSelector.class);
+    private static final Log log = LogFactory.getLog(NioBlockingSelector.class);
     
     private static int threadCounter = 0;
     

==================================================
BayeuxServlet.java
index 3a7025dee5..33f350f39f 100644
--- a/java/org/apache/tomcat/util/net/NioSelectorPool.java
+++ b/java/org/apache/tomcat/util/net/NioSelectorPool.java
@@ -45,7 +45,7 @@ public class NioSelectorPool {
     
     protected static int threadCount = 0;
     
-    protected static final Log log = LogFactory.getLog(NioSelectorPool.class);
+    private static final Log log = LogFactory.getLog(NioSelectorPool.class);
 
     protected final static boolean SHARED =
         Boolean.valueOf(System.getProperty("org.apache.tomcat.util.net.NioSelectorShared", "true")).booleanValue();

==================================================
ChannelImpl.java
index 9444502255..d53c80aad1 100644
--- a/modules/bayeux/java/org/apache/tomcat/bayeux/BayeuxServlet.java
+++ b/modules/bayeux/java/org/apache/tomcat/bayeux/BayeuxServlet.java
@@ -49,7 +49,7 @@ public class BayeuxServlet implements CometProcessor {
     /**
      * Logger object
      */
-    protected static final Log log = LogFactory.getLog(BayeuxServlet.class);
+    private static final Log log = LogFactory.getLog(BayeuxServlet.class);
 
     /**
      * Servlet config - for future use

==================================================
ClientImpl.java
index d2e4d72ccd..353af6c8cb 100644
--- a/modules/bayeux/java/org/apache/tomcat/bayeux/ChannelImpl.java
+++ b/modules/bayeux/java/org/apache/tomcat/bayeux/ChannelImpl.java
@@ -34,7 +34,7 @@ import org.apache.juli.logging.LogFactory;
  */
 public class ChannelImpl implements Channel {
     
-    protected static final Log log = LogFactory.getLog(ChannelImpl.class);
+    private static final Log log = LogFactory.getLog(ChannelImpl.class);
     
     /**
      * The unique id of this channel

==================================================
RequestBase.java
index 2bdfad4f90..4a9de3c395 100644
--- a/modules/bayeux/java/org/apache/tomcat/bayeux/ClientImpl.java
+++ b/modules/bayeux/java/org/apache/tomcat/bayeux/ClientImpl.java
@@ -41,7 +41,7 @@ public class ClientImpl implements Client {
 
     public static final String COMET_EVENT_ATTR = "org.apache.cometd.bayeux.client";
     
-    protected static final Log log = LogFactory.getLog(ClientImpl.class);
+    private static final Log log = LogFactory.getLog(ClientImpl.class);
 
     protected static LinkedList<Message> EMPTY_LIST = new LinkedList<Message>();
     /**

==================================================
ConnectionPool.java
index 20eb89a51c..0daa2cc491 100644
--- a/modules/bayeux/java/org/apache/tomcat/bayeux/RequestBase.java
+++ b/modules/bayeux/java/org/apache/tomcat/bayeux/RequestBase.java
@@ -74,7 +74,7 @@ public abstract class RequestBase implements BayeuxRequest {
     
     protected HashMap<String, Object> response = null;
     
-    protected static final Log log = LogFactory.getLog(RequestBase.class);
+    private static final Log log = LogFactory.getLog(RequestBase.class);
     
     protected int reconnectInterval = 1000;
     

==================================================
DataSource.java
index 37d0976bf2..cdfad90b4f 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -58,7 +58,7 @@ public class ConnectionPool {
     /**
      * Logger
      */
-    protected static final Log log = LogFactory.getLog(ConnectionPool.class);
+    private static final Log log = LogFactory.getLog(ConnectionPool.class);
 
     //===============================================================================
     //         INSTANCE/QUICK ACCESS VARIABLE

==================================================
DataSourceFactory.java
index ad5df2825b..632c0ffbc4 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSource.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSource.java
@@ -26,6 +26,10 @@ import javax.management.MalformedObjectNameException;
 import javax.management.ObjectName;
 import javax.sql.XADataSource;
 
+import org.apache.jasper.compiler.AntCompiler;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+
 
 /**
  * A DataSource that can be instantiated through IoC and implements the DataSource interface
@@ -35,6 +39,7 @@ import javax.sql.XADataSource;
  * @version 1.0
  */
 public class DataSource extends DataSourceProxy implements MBeanRegistration,javax.sql.DataSource,XADataSource, org.apache.tomcat.jdbc.pool.jmx.ConnectionPoolMBean {
+    private static final Log log = LogFactory.getLog(DataSource.class);
 
     /**
      * Constructor for reflection only. A default set of pool properties will be created.

==================================================
DataSourceProxy.java
index 60066d3c8f..c97e11d34c 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java
@@ -55,7 +55,7 @@ import org.apache.juli.logging.LogFactory;
  * @author Filip Hanik
  */
 public class DataSourceFactory implements ObjectFactory {
-    protected static final Log log = LogFactory.getLog(DataSourceFactory.class);
+    private static final Log log = LogFactory.getLog(DataSourceFactory.class);
 
     protected final static String PROP_DEFAULTAUTOCOMMIT = "defaultAutoCommit";
     protected final static String PROP_DEFAULTREADONLY = "defaultReadOnly";

==================================================
PoolProperties.java
index 91f6b0d870..ad61f38b4a 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
@@ -43,7 +43,7 @@ import org.apache.tomcat.jdbc.pool.PoolProperties.InterceptorDefinition;
  */
 
 public class DataSourceProxy implements PoolConfiguration {
-    protected static final Log log = LogFactory.getLog(DataSourceProxy.class);
+    private static final Log log = LogFactory.getLog(DataSourceProxy.class);
     
     protected volatile ConnectionPool pool = null;
     

==================================================
PooledConnection.java
index 3b6c86bec8..66720a1b8f 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
@@ -33,7 +33,7 @@ import org.apache.juli.logging.LogFactory;
  *
  */
 public class PoolProperties implements PoolConfiguration {
-    protected static final Log log = LogFactory.getLog(PoolProperties.class);
+    private static final Log log = LogFactory.getLog(PoolProperties.class);
     
     protected static AtomicInteger poolCounter = new AtomicInteger(0);
     protected Properties dbProperties = new Properties();

==================================================
ConnectionState.java
index c548a48095..8f1a31ffa1 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PooledConnection.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PooledConnection.java
@@ -38,7 +38,7 @@ public class PooledConnection {
     /**
      * Logger
      */
-    protected static final Log log = LogFactory.getLog(PooledConnection.class);
+    private static final Log log = LogFactory.getLog(PooledConnection.class);
     /**
      * Instance counter
      */

==================================================
StatementFinalizer.java
index d3041fd293..d0718a08db 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/ConnectionState.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/ConnectionState.java
@@ -41,7 +41,7 @@ import org.apache.tomcat.jdbc.pool.PooledConnection;
  */
 
 public class ConnectionState extends JdbcInterceptor  {
-    protected static final Log log = LogFactory.getLog(ConnectionState.class);
+    private static final Log log = LogFactory.getLog(ConnectionState.class);
     
     protected final String[] readState = {"getAutoCommit","getTransactionIsolation","isReadOnly","getCatalog"};
     protected final String[] writeState = {"setAutoCommit","setTransactionIsolation","setReadOnly","setCatalog"};

==================================================
ConnectionPool.java
index 717f4b0657..f05efde7f8 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/StatementFinalizer.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/StatementFinalizer.java
@@ -32,7 +32,7 @@ import org.apache.tomcat.jdbc.pool.PooledConnection;
  *
  */
 public class StatementFinalizer extends AbstractCreateStatementInterceptor {
-    protected static final Log log = LogFactory.getLog(StatementFinalizer.class);
+    private static final Log log = LogFactory.getLog(StatementFinalizer.class);
     
     protected ArrayList<WeakReference<Statement>> statements = new ArrayList<WeakReference<Statement>>();
     

==================================================
RandomGenerator.java
index fcb4812a19..ffbb3b2627 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java
@@ -35,7 +35,7 @@ public class ConnectionPool extends NotificationBroadcasterSupport implements Co
     /**
      * logger
      */
-    protected static final Log log = LogFactory.getLog(ConnectionPool.class);
+    private static final Log log = LogFactory.getLog(ConnectionPool.class);
 
     /**
      * the connection pool

==================================================
SimpleSessionManager.java
index 45588b37cf..22e86de744 100644
--- a/modules/tomcat-lite/java/org/apache/tomcat/servlets/session/RandomGenerator.java
+++ b/modules/tomcat-lite/java/org/apache/tomcat/servlets/session/RandomGenerator.java
@@ -40,7 +40,7 @@ public class RandomGenerator {
     protected DataInputStream randomIS=null;
     protected String devRandomSource="/dev/urandom";
 
-    protected static Logger log = Logger.getLogger(RandomGenerator.class.getName());
+    private static final Logger log = Logger.getLogger(RandomGenerator.class.getName());
 
     /**
      * The message digest algorithm to be used when generating session

==================================================
LoadTest.java
index 2d30d95692..ceedb5ded7 100644
--- a/modules/tomcat-lite/java/org/apache/tomcat/servlets/session/SimpleSessionManager.java
+++ b/modules/tomcat-lite/java/org/apache/tomcat/servlets/session/SimpleSessionManager.java
@@ -47,7 +47,7 @@ import org.apache.tomcat.addons.UserSessionManager;
  * @author Craig R. McClanahan
  */
 public class SimpleSessionManager implements UserSessionManager {
-    protected static Logger log = Logger.getLogger(SimpleSessionManager.class.getName());
+    static final Logger log = Logger.getLogger(SimpleSessionManager.class.getName());
 
     protected RandomGenerator randomG = new RandomGenerator();
     

==================================================
Async0.java
index 40ec6146b3..fe1929794a 100644
--- a/test/org/apache/catalina/tribes/demos/LoadTest.java
+++ b/test/org/apache/catalina/tribes/demos/LoadTest.java
@@ -41,7 +41,7 @@ import org.apache.juli.logging.LogFactory;
  * @version 1.0
  */
 public class LoadTest implements MembershipListener,ChannelListener, Runnable {
-    protected static final Log log = LogFactory.getLog(LoadTest.class);
+    private static final Log log = LogFactory.getLog(LoadTest.class);
     public static int size = 24000;
     public static Object mutex = new Object();
     public boolean doRun = true;

==================================================
Async1.java
index f43cfc521d..af5133f292 100644
--- a/webapps/examples/WEB-INF/classes/async/Async0.java
+++ b/webapps/examples/WEB-INF/classes/async/Async0.java
@@ -28,7 +28,7 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
 public class Async0 extends HttpServlet {
-    protected static final Log log = LogFactory.getLog(Async0.class);
+    private static final Log log = LogFactory.getLog(Async0.class);
     public Async0() {
     }
 

==================================================
Async2.java
index ed3f539d52..6d589fb15b 100644
--- a/webapps/examples/WEB-INF/classes/async/Async1.java
+++ b/webapps/examples/WEB-INF/classes/async/Async1.java
@@ -28,7 +28,7 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
 public class Async1 extends HttpServlet {
-    protected static final Log log = LogFactory.getLog(Async1.class);
+    private static final Log log = LogFactory.getLog(Async1.class);
     public Async1() {
     }
 

==================================================
Async3.java
index 99435a0b10..83a3f4039b 100644
--- a/webapps/examples/WEB-INF/classes/async/Async2.java
+++ b/webapps/examples/WEB-INF/classes/async/Async2.java
@@ -28,7 +28,7 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
 public class Async2 extends HttpServlet {
-    protected static final Log log = LogFactory.getLog(Async2.class);
+    private static final Log log = LogFactory.getLog(Async2.class);
     public Async2() {
     }
 

==================================================
