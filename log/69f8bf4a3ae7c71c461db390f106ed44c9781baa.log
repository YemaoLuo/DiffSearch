69f8bf4a3ae7c71c461db390f106ed44c9781baa
==================================================
- Remove unwrap loop (that would have to be replicated across all unwrap codes in NIO and NIO2; I did still get some amount of timeouts in my testing - since the fix only covered non blocking unwrap, not the blocking unwrap).
==================================================
Remy Maucherat
==================================================
Mon Oct 26 14:33:49 2015 +0000
==================================================
SecureNio2Channel.java
- Remove unwrap loop (that would have to be replicated across all unwrap codes in NIO and NIO2; I did still get some amount of timeouts in my testing - since the fix only covered non blocking unwrap, not the blocking unwrap).
- Fix the engine unwrap code to take into account that it is not possible to know if there's some plaintext to read unless trying it (this is what the "priming" read is about, but it needs to be repeated).
- Thanks to Mark for his most excellent debugging. No thanks to OpenSSL for the funny behavior.
- Testing is almost fine now with NIOx except I get an overflow with the byte counter, and the unwrap/read code doesn't handle overflows at all. Increasing the socket input buffer avoids this, although it is already at application buffer size, which is supposed to be enough. Will investigate to determine the best solution.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1710608 13f79535-47bb-0310-9956-ffa450edef68



==================================================
OpenSSLEngine.java
index 699fcf6657..7161a45572 100644
--- a/java/org/apache/tomcat/util/net/SecureNio2Channel.java
+++ b/java/org/apache/tomcat/util/net/SecureNio2Channel.java
@@ -824,16 +824,7 @@ public class SecureNio2Channel extends Nio2Channel  {
                                 throw new IOException(sm.getString("channel.nio.ssl.unwrapFail", unwrap.getStatus()));
                             }
                         // continue to unwrap as long as the input buffer has stuff
-                        // TODO: unwrap appears only to unwrap one TLS record at
-                        //       a time even if there are multiple TLS records
-                        //       in the input buffer. Therefore multiple calls
-                        //       to unwrap are required to ensure that all TLS
-                        //       records are decrypted and written to dst.
-                        //       This may be a bug in tc-native or something
-                        //       that is better handled at that level. For now
-                        //       the '|| unwrap.getStatus() == Status.OK' is a
-                        //       workaround.
-                        } while ((netInBuffer.position() != 0) || unwrap.getStatus() == Status.OK);
+                        } while (netInBuffer.position() != 0);
                         // If everything is OK, so complete
                         handler.completed(Integer.valueOf(read), attach);
                     } catch (Exception e) {

==================================================
