b0795bf01436e99d27dde7faa4cf460639bf0a1f
==================================================
Add parameter for the Panama OpenSSL variant
==================================================
remm remm@apache.org
==================================================
Tue Nov 23 22:06:53 2021 +0100
==================================================
TestLargeUpload.java
Add parameter for the Panama OpenSSL variant

This needs manual modifications to build.xml to add the JAR and more
importantly set the JVM paramaters in runtests:
          <jvmarg value="--enable-native-access=ALL-UNNAMED"/>
          <jvmarg value="--add-modules"/>
          <jvmarg value="jdk.incubator.foreign"/>


==================================================
TestClientCert.java
index ea067d898d..b0b35e0c88 100644
--- a/test/org/apache/coyote/http2/TestLargeUpload.java
+++ b/test/org/apache/coyote/http2/TestLargeUpload.java
@@ -42,6 +42,7 @@ import org.apache.catalina.core.AprLifecycleListener;
 import org.apache.catalina.core.StandardServer;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.coyote.http11.AbstractHttp11Protocol;
+import org.apache.tomcat.util.net.TesterSupport;
 
 @RunWith(Parameterized.class)
 public class TestLargeUpload extends Http2TestBase {
@@ -53,6 +54,8 @@ public class TestLargeUpload extends Http2TestBase {
                 "JSSE", Boolean.FALSE, "org.apache.tomcat.util.net.jsse.JSSEImplementation"});
         parameterSets.add(new Object[] {
                 "OpenSSL", Boolean.TRUE, "org.apache.tomcat.util.net.openssl.OpenSSLImplementation"});
+        parameterSets.add(new Object[] {
+                "OpenSSL-Panama", Boolean.FALSE, "org.apache.tomcat.util.net.openssl.panama.OpenSSLImplementation"});
 
         return parameterSets;
     }
@@ -154,7 +157,7 @@ public class TestLargeUpload extends Http2TestBase {
 
         Tomcat tomcat = getTomcatInstance();
 
-        Assert.assertTrue(tomcat.getConnector().setProperty("sslImplementationName", sslImplementationName));
+        TesterSupport.configureSSLImplementation(tomcat, sslImplementationName);
 
         if (needApr) {
             AprLifecycleListener listener = new AprLifecycleListener();

==================================================
TestClientCertTls13.java
index 816500e815..bc3aac1308 100644
--- a/test/org/apache/tomcat/util/net/TestClientCert.java
+++ b/test/org/apache/tomcat/util/net/TestClientCert.java
@@ -50,6 +50,8 @@ public class TestClientCert extends TomcatBaseTest {
                 "JSSE", Boolean.FALSE, "org.apache.tomcat.util.net.jsse.JSSEImplementation"});
         parameterSets.add(new Object[] {
                 "OpenSSL", Boolean.TRUE, "org.apache.tomcat.util.net.openssl.OpenSSLImplementation"});
+        parameterSets.add(new Object[] {
+                "OpenSSL-Panama", Boolean.FALSE, "org.apache.tomcat.util.net.openssl.panama.OpenSSLImplementation"});
 
         return parameterSets;
     }
@@ -203,7 +205,7 @@ public class TestClientCert extends TomcatBaseTest {
 
         TesterSupport.configureClientSsl();
 
-        Assert.assertTrue(tomcat.getConnector().setProperty("sslImplementationName", sslImplementationName));
+        TesterSupport.configureSSLImplementation(tomcat, sslImplementationName);
 
         if (needApr) {
             AprLifecycleListener listener = new AprLifecycleListener();

==================================================
TestCustomSslTrustManager.java
index c21ae868a1..16c921cd88 100644
--- a/test/org/apache/tomcat/util/net/TestClientCertTls13.java
+++ b/test/org/apache/tomcat/util/net/TestClientCertTls13.java
@@ -55,6 +55,8 @@ public class TestClientCertTls13 extends TomcatBaseTest {
                 "JSSE", Boolean.FALSE, "org.apache.tomcat.util.net.jsse.JSSEImplementation"});
         parameterSets.add(new Object[] {
                 "OpenSSL", Boolean.TRUE, "org.apache.tomcat.util.net.openssl.OpenSSLImplementation"});
+        parameterSets.add(new Object[] {
+                "OpenSSL-Panama", Boolean.FALSE, "org.apache.tomcat.util.net.openssl.panama.OpenSSLImplementation"});
 
         return parameterSets;
     }
@@ -106,7 +108,7 @@ public class TestClientCertTls13 extends TomcatBaseTest {
         TesterSupport.configureClientSsl();
 
         Connector connector = tomcat.getConnector();
-        Assert.assertTrue(connector.setProperty("sslImplementationName", sslImplementationName));
+        TesterSupport.configureSSLImplementation(tomcat, sslImplementationName);
 
         if (needApr) {
             AprLifecycleListener listener = new AprLifecycleListener();

==================================================
TestSSLHostConfigCompat.java
index f7ad2728bc..affee0dbd8 100644
--- a/test/org/apache/tomcat/util/net/TestCustomSslTrustManager.java
+++ b/test/org/apache/tomcat/util/net/TestCustomSslTrustManager.java
@@ -54,6 +54,8 @@ public class TestCustomSslTrustManager extends TomcatBaseTest {
                 "JSSE", Boolean.FALSE, "org.apache.tomcat.util.net.jsse.JSSEImplementation"});
         parameterSets.add(new Object[] {
                 "OpenSSL", Boolean.TRUE, "org.apache.tomcat.util.net.openssl.OpenSSLImplementation"});
+        parameterSets.add(new Object[] {
+                "OpenSSL-Panama", Boolean.FALSE, "org.apache.tomcat.util.net.openssl.panama.OpenSSLImplementation"});
 
         return parameterSets;
     }
@@ -97,7 +99,7 @@ public class TestCustomSslTrustManager extends TomcatBaseTest {
         TesterSupport.configureClientCertContext(tomcat);
 
         Connector connector = tomcat.getConnector();
-        Assert.assertTrue(connector.setProperty("sslImplementationName", sslImplementationName));
+        TesterSupport.configureSSLImplementation(tomcat, sslImplementationName);
 
         if (needApr) {
             AprLifecycleListener listener = new AprLifecycleListener();

==================================================
TestSSLHostConfigIntegration.java
index 30647e0a5b..7b8e8373b1 100644
--- a/test/org/apache/tomcat/util/net/TestSSLHostConfigCompat.java
+++ b/test/org/apache/tomcat/util/net/TestSSLHostConfigCompat.java
@@ -55,6 +55,8 @@ public class TestSSLHostConfigCompat extends TomcatBaseTest {
                     "JSSE", Boolean.FALSE, "org.apache.tomcat.util.net.jsse.JSSEImplementation", storeType});
             parameterSets.add(new Object[] {
                     "OpenSSL", Boolean.TRUE, "org.apache.tomcat.util.net.openssl.OpenSSLImplementation", storeType});
+            parameterSets.add(new Object[] {
+                    "OpenSSL-Panama", Boolean.FALSE, "org.apache.tomcat.util.net.openssl.panama.OpenSSLImplementation", storeType});
         }
 
         return parameterSets;
@@ -313,7 +315,7 @@ public class TestSSLHostConfigCompat extends TomcatBaseTest {
         sslHostConfig.setProtocols("TLSv1.2");
         connector.addSslHostConfig(sslHostConfig);
 
-        Assert.assertTrue(connector.setProperty("sslImplementationName", sslImplementationName));
+        TesterSupport.configureSSLImplementation(tomcat, sslImplementationName);
 
         if (needApr) {
             AprLifecycleListener listener = new AprLifecycleListener();

==================================================
TestSsl.java
index 34d4f5cb0d..46a9829486 100644
--- a/test/org/apache/tomcat/util/net/TestSSLHostConfigIntegration.java
+++ b/test/org/apache/tomcat/util/net/TestSSLHostConfigIntegration.java
@@ -46,6 +46,8 @@ public class TestSSLHostConfigIntegration extends TomcatBaseTest {
                 "JSSE", Boolean.FALSE, "org.apache.tomcat.util.net.jsse.JSSEImplementation"});
         parameterSets.add(new Object[] {
                 "OpenSSL", Boolean.TRUE, "org.apache.tomcat.util.net.openssl.OpenSSLImplementation"});
+        parameterSets.add(new Object[] {
+                "OpenSSL-Panama", Boolean.FALSE, "org.apache.tomcat.util.net.openssl.panama.OpenSSLImplementation"});
 
         return parameterSets;
     }
@@ -70,7 +72,7 @@ public class TestSSLHostConfigIntegration extends TomcatBaseTest {
         ctxt.addApplicationListener(WsContextListener.class.getName());
 
         TesterSupport.initSsl(tomcat);
-        Assert.assertTrue(tomcat.getConnector().setProperty("sslImplementationName", sslImplementationName));
+        TesterSupport.configureSSLImplementation(tomcat, sslImplementationName);
 
         if (needApr) {
             AprLifecycleListener listener = new AprLifecycleListener();

==================================================
TesterSupport.java
index 3ab33e37ee..ad1e39b1e8 100644
--- a/test/org/apache/tomcat/util/net/TestSsl.java
+++ b/test/org/apache/tomcat/util/net/TestSsl.java
@@ -75,6 +75,8 @@ public class TestSsl extends TomcatBaseTest {
                 "JSSE", Boolean.FALSE, "org.apache.tomcat.util.net.jsse.JSSEImplementation"});
         parameterSets.add(new Object[] {
                 "OpenSSL", Boolean.TRUE, "org.apache.tomcat.util.net.openssl.OpenSSLImplementation"});
+        parameterSets.add(new Object[] {
+                "OpenSSL-Panama", Boolean.FALSE, "org.apache.tomcat.util.net.openssl.panama.OpenSSLImplementation"});
 
         return parameterSets;
     }
@@ -101,7 +103,7 @@ public class TestSsl extends TomcatBaseTest {
         ctxt.addApplicationListener(WsContextListener.class.getName());
 
         TesterSupport.initSsl(tomcat);
-        Assert.assertTrue(tomcat.getConnector().setProperty("sslImplementationName", sslImplementationName));
+        TesterSupport.configureSSLImplementation(tomcat, sslImplementationName);
 
         if (needApr) {
             AprLifecycleListener listener = new AprLifecycleListener();
@@ -135,7 +137,7 @@ public class TestSsl extends TomcatBaseTest {
         Connector connector = tomcat.getConnector();
         // Increase timeout as default (3s) can be too low for some CI systems
         Assert.assertTrue(connector.setProperty("connectionTimeout", "20000"));
-        Assert.assertTrue(connector.setProperty("sslImplementationName", sslImplementationName));
+        TesterSupport.configureSSLImplementation(tomcat, sslImplementationName);
 
         if (needApr) {
             AprLifecycleListener listener = new AprLifecycleListener();
@@ -226,7 +228,7 @@ public class TestSsl extends TomcatBaseTest {
         TesterSupport.initSsl(tomcat, TesterSupport.LOCALHOST_KEYPASS_JKS,
                 TesterSupport.JKS_PASS, TesterSupport.JKS_KEY_PASS);
 
-        Assert.assertTrue(tomcat.getConnector().setProperty("sslImplementationName", sslImplementationName));
+        TesterSupport.configureSSLImplementation(tomcat, sslImplementationName);
 
         if (needApr) {
             AprLifecycleListener listener = new AprLifecycleListener();
@@ -250,7 +252,7 @@ public class TestSsl extends TomcatBaseTest {
 
         TesterSupport.initSsl(tomcat);
 
-        Assert.assertTrue(tomcat.getConnector().setProperty("sslImplementationName", sslImplementationName));
+        TesterSupport.configureSSLImplementation(tomcat, sslImplementationName);
 
         Assume.assumeTrue("SSL renegotiation has to be supported for this test",
                 TesterSupport.isClientRenegotiationSupported(getTomcatInstance()));

==================================================
TestWebSocketFrameClientSSL.java
index 707ead904f..9922e82d11 100644
--- a/test/org/apache/tomcat/util/net/TesterSupport.java
+++ b/test/org/apache/tomcat/util/net/TesterSupport.java
@@ -49,6 +49,7 @@ import jakarta.servlet.http.HttpServletRequest;
 import jakarta.servlet.http.HttpServletResponse;
 
 import org.junit.Assert;
+import org.junit.Assume;
 
 import org.apache.catalina.Context;
 import org.apache.catalina.authenticator.SSLAuthenticator;
@@ -230,6 +231,15 @@ public final class TesterSupport {
         return true;
     }
 
+    public static void configureSSLImplementation(Tomcat tomcat, String sslImplementationName) {
+        try {
+            Class.forName(sslImplementationName);
+        } catch (Exception e) {
+            Assume.assumeNoException(e);
+        }
+        Assert.assertTrue(tomcat.getConnector().setProperty("sslImplementationName", sslImplementationName));
+    }
+
     public static void configureClientCertContext(Tomcat tomcat) {
         TesterSupport.initSsl(tomcat);
 

==================================================
TestWsWebSocketContainerSSL.java
index 36751f45dd..8adc9423d7 100644
--- a/test/org/apache/tomcat/websocket/TestWebSocketFrameClientSSL.java
+++ b/test/org/apache/tomcat/websocket/TestWebSocketFrameClientSSL.java
@@ -57,6 +57,8 @@ public class TestWebSocketFrameClientSSL extends WebSocketBaseTest {
                 "JSSE", Boolean.FALSE, "org.apache.tomcat.util.net.jsse.JSSEImplementation"});
         parameterSets.add(new Object[] {
                 "OpenSSL", Boolean.TRUE, "org.apache.tomcat.util.net.openssl.OpenSSLImplementation"});
+        parameterSets.add(new Object[] {
+                "OpenSSL-Panama", Boolean.FALSE, "org.apache.tomcat.util.net.openssl.panama.OpenSSLImplementation"});
 
         return parameterSets;
     }
@@ -187,7 +189,7 @@ public class TestWebSocketFrameClientSSL extends WebSocketBaseTest {
 
         TesterSupport.initSsl(tomcat);
 
-        Assert.assertTrue(tomcat.getConnector().setProperty("sslImplementationName", sslImplementationName));
+        TesterSupport.configureSSLImplementation(tomcat, sslImplementationName);
 
         if (needApr) {
             AprLifecycleListener listener = new AprLifecycleListener();

==================================================
