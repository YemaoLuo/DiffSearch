ba148e1d69055ee33701f510a273eb75da0b86c5
==================================================
Remove unused toString() methods and associated plumbing
==================================================
Mark Emlyn
==================================================
Sat Oct 13 21:22:37 2012 +0000
==================================================
AnnotationElementValue.java
Remove unused toString() methods and associated plumbing

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1397950 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ArrayElementValue.java
index d9888c042c..9e55ec7554 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationElementValue.java
@@ -48,12 +48,6 @@ public class AnnotationElementValue extends ElementValue
         return annotationEntry.toString();
     }
 
-    @Override
-    public String toString()
-    {
-        return stringifyValue();
-    }
-
     public AnnotationEntry getAnnotationEntry()
     {
         return annotationEntry;

==================================================
Attribute.java
index 0c3804dc22..9bed239ffe 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ArrayElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ArrayElementValue.java
@@ -25,21 +25,6 @@ public class ArrayElementValue extends ElementValue
     // For array types, this is the array
     private ElementValue[] evalues;
 
-    @Override
-    public String toString()
-    {
-        StringBuilder sb = new StringBuilder();
-        sb.append("{");
-        for (int i = 0; i < evalues.length; i++)
-        {
-            sb.append(evalues[i].toString());
-            if ((i + 1) < evalues.length)
-                sb.append(",");
-        }
-        sb.append("}");
-        return sb.toString();
-    }
-
     public ArrayElementValue(int type, ElementValue[] datums, ConstantPool cpool)
     {
         super(type, cpool);

==================================================
ClassParser.java
index 3c42d5fbe0..42df613978 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
@@ -215,13 +215,4 @@ public abstract class Attribute implements Cloneable, Serializable
      * @return deep copy of this attribute
      */
     public abstract Attribute copy(ConstantPool _constant_pool);
-
-    /**
-     * @return attribute name.
-     */
-    @Override
-    public String toString()
-    {
-        return Constants.ATTRIBUTE_NAMES[tag];
-    }
 }

==================================================
Code.java
index 7f9feae59b..5cd1e09276 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
@@ -44,7 +44,6 @@ public final class ClassParser {
     private DataInputStream file;
     private String file_name;
     private int class_name_index, superclass_name_index;
-    private int major, minor; // Compiler version
     private int access_flags; // Access rights of parsed class
     private int[] interfaces; // Names of implemented interfaces
     private ConstantPool constant_pool; // collection of constants
@@ -117,8 +116,9 @@ public final class ClassParser {
         //      }
 
         // Return the information we have gathered in a new object
-        return new JavaClass(class_name_index, superclass_name_index, file_name, major, minor,
-                access_flags, constant_pool, interfaces, fields, methods, attributes);
+        return new JavaClass(class_name_index, superclass_name_index,
+                access_flags, constant_pool, interfaces, fields, methods,
+                attributes);
     }
 
 
@@ -235,7 +235,7 @@ public final class ClassParser {
      * @throws  ClassFormatException
      */
     private final void readVersion() throws IOException, ClassFormatException {
-        minor = file.readUnsignedShort();
-        major = file.readUnsignedShort();
+        file.readUnsignedShort();
+        file.readUnsignedShort();
     }
 }

==================================================
CodeException.java
index d9cc4c0c37..4072044f87 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Code.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Code.java
@@ -44,8 +44,6 @@ import org.apache.tomcat.util.bcel.Constants;
 public final class Code extends Attribute {
 
     private static final long serialVersionUID = 8936843273318969602L;
-    private int max_stack; // Maximum size of stack used by this method
-    private int max_locals; // Number of local variables
     private int code_length; // Length of code in bytes
     private byte[] code; // Actual byte code
     private int exception_table_length;
@@ -63,8 +61,8 @@ public final class Code extends Attribute {
     Code(int name_index, int length, DataInputStream file, ConstantPool constant_pool)
             throws IOException {
         // Initialize with some default values which will be overwritten later
-        this(name_index, length, file.readUnsignedShort(), file.readUnsignedShort(), (byte[]) null,
-                (CodeException[]) null, (Attribute[]) null, constant_pool);
+        this(name_index, length, (byte[]) null, (CodeException[]) null,
+                (Attribute[]) null, constant_pool);
         code_length = file.readInt();
         code = new byte[code_length]; // Read byte code
         file.readFully(code);
@@ -95,18 +93,14 @@ public final class Code extends Attribute {
     /**
      * @param name_index Index pointing to the name <em>Code</em>
      * @param length Content length in bytes
-     * @param max_stack Maximum size of stack
-     * @param max_locals Number of local variables
      * @param code Actual byte code
      * @param exception_table Table of handled exceptions
      * @param attributes Attributes of code: LineNumber or LocalVariable
      * @param constant_pool Array of constants
      */
-    public Code(int name_index, int length, int max_stack, int max_locals, byte[] code,
+    public Code(int name_index, int length, byte[] code,
             CodeException[] exception_table, Attribute[] attributes, ConstantPool constant_pool) {
         super(Constants.ATTR_CODE, name_index, length, constant_pool);
-        this.max_stack = max_stack;
-        this.max_locals = max_locals;
         setCode(code);
         setExceptionTable(exception_table);
         setAttributes(attributes); // Overwrites length!
@@ -182,39 +176,6 @@ public final class Code extends Attribute {
     }
 
 
-    /**
-     * @return String representation of code chunk.
-     */
-    public final String toString( boolean verbose ) {
-        StringBuilder buf = new StringBuilder(100);
-        buf.append("Code(max_stack = ").append(max_stack).append(", max_locals = ").append(
-                max_locals).append(", code_length = ").append(code_length).append(")\n").append(
-                Utility.codeToString(code, constant_pool, 0, -1, verbose));
-        if (exception_table_length > 0) {
-            buf.append("\nException handler(s) = \n").append("From\tTo\tHandler\tType\n");
-            for (int i = 0; i < exception_table_length; i++) {
-                buf.append(exception_table[i].toString(constant_pool, verbose)).append("\n");
-            }
-        }
-        if (attributes_count > 0) {
-            buf.append("\nAttribute(s) = \n");
-            for (int i = 0; i < attributes_count; i++) {
-                buf.append(attributes[i].toString()).append("\n");
-            }
-        }
-        return buf.toString();
-    }
-
-
-    /**
-     * @return String representation of code chunk.
-     */
-    @Override
-    public final String toString() {
-        return toString(true);
-    }
-
-
     /**
      * @return deep copy of this attribute
      *

==================================================
Constant.java
index 21ded53892..750f9309f1 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/CodeException.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/CodeException.java
@@ -90,31 +90,6 @@ public final class CodeException implements Cloneable, Constants, Serializable {
     }
 
 
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        return "CodeException(start_pc = " + start_pc + ", end_pc = " + end_pc + ", handler_pc = "
-                + handler_pc + ", catch_type = " + catch_type + ")";
-    }
-
-
-    /**
-     * @return String representation.
-     */
-    public final String toString( ConstantPool cp, boolean verbose ) {
-        String str;
-        if (catch_type == 0) {
-            str = "<Any exception>(0)";
-        } else {
-            str = Utility.compactClassName(cp.getConstantString(catch_type, CONSTANT_Class), false)
-                    + (verbose ? "(" + catch_type + ")" : "");
-        }
-        return start_pc + "\t" + end_pc + "\t" + handler_pc + "\t" + str;
-    }
-
-
     /**
      * @return deep copy of this object
      */

==================================================
ConstantCP.java
index 23fa969138..e92c5f25aa 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Constant.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Constant.java
@@ -76,15 +76,6 @@ public abstract class Constant implements Cloneable, Serializable {
     }
 
 
-    /**
-     * @return String representation.
-     */
-    @Override
-    public String toString() {
-        return Constants.CONSTANT_NAMES[tag] + "[" + tag + "]";
-    }
-
-
     @Override
     public Object clone() throws CloneNotSupportedException {
         return super.clone();

==================================================
ConstantClass.java
index 293bae04dd..4850414a12 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantCP.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantCP.java
@@ -74,14 +74,4 @@ public abstract class ConstantCP extends Constant {
     public final int getNameAndTypeIndex() {
         return name_and_type_index;
     }
-
-
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(class_index = " + class_index + ", name_and_type_index = "
-                + name_and_type_index + ")";
-    }
 }

==================================================
ConstantDouble.java
index 779f800bbb..3df7fde083 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantClass.java
@@ -64,13 +64,4 @@ public final class ConstantClass extends Constant {
     public final int getNameIndex() {
         return name_index;
     }
-
-
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(name_index = " + name_index + ")";
-    }
 }

==================================================
ConstantFloat.java
index 9a3db9ac47..6045c3cf68 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantDouble.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantDouble.java
@@ -63,13 +63,4 @@ public final class ConstantDouble extends Constant {
     public final double getBytes() {
         return bytes;
     }
-
-
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(bytes = " + bytes + ")";
-    }
 }

==================================================
ConstantInteger.java
index a8cfedca2b..bfb7864d36 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantFloat.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantFloat.java
@@ -63,13 +63,4 @@ public final class ConstantFloat extends Constant {
     public final float getBytes() {
         return bytes;
     }
-
-
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(bytes = " + bytes + ")";
-    }
 }

==================================================
ConstantInvokeDynamic.java
index 7eadd37e5d..d5f99df849 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantInteger.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantInteger.java
@@ -63,13 +63,4 @@ public final class ConstantInteger extends Constant {
     public final int getBytes() {
         return bytes;
     }
-
-
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(bytes = " + bytes + ")";
-    }
 }

==================================================
ConstantLong.java
index bc03306b6f..c42d9d8d1f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantInvokeDynamic.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantInvokeDynamic.java
@@ -81,15 +81,4 @@ public final class ConstantInvokeDynamic extends Constant {
     public void setNameAndTypeIndex(int name_and_type_index) {
         this.name_and_type_index = name_and_type_index;
     }
-
-
-    /**
-     * @return String representation
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(bootstrap_method_attr_index = " +
-                bootstrap_method_attr_index + ", name_and_type_index = " +
-                name_and_type_index + ")";
-    }
 }

==================================================
ConstantMethodHandle.java
index 10574f8d36..388c7572d7 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantLong.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantLong.java
@@ -63,13 +63,4 @@ public final class ConstantLong extends Constant {
     public final long getBytes() {
         return bytes;
     }
-
-
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(bytes = " + bytes + ")";
-    }
 }

==================================================
ConstantMethodType.java
index 9ba58f38f5..1a2e467063 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantMethodHandle.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantMethodHandle.java
@@ -80,14 +80,4 @@ public final class ConstantMethodHandle extends Constant {
     public void setReferenceIndex(int reference_index) {
         this.reference_index = reference_index;
     }
-
-
-    /**
-     * @return String representation
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(reference_kind = " + reference_kind +
-                ", reference_index = " + reference_index + ")";
-    }
 }

==================================================
ConstantNameAndType.java
index 32804883bd..6ca1bc328a 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantMethodType.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantMethodType.java
@@ -68,13 +68,4 @@ public final class ConstantMethodType extends Constant {
     public void setDescriptorIndex(int descriptor_index) {
         this.descriptor_index = descriptor_index;
     }
-
-
-    /**
-     * @return String representation
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(descriptor_index = " + descriptor_index + ")";
-    }
 }

==================================================
ConstantPool.java
index 5c71817ff4..df1306dd21 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantNameAndType.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantNameAndType.java
@@ -75,14 +75,4 @@ public final class ConstantNameAndType extends Constant {
     public final int getSignatureIndex() {
         return signature_index;
     }
-
-
-    /**
-     * @return String representation
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(name_index = " + name_index + ", signature_index = "
-                + signature_index + ")";
-    }
 }

==================================================
ConstantString.java
index a6549d815a..4e1cde7790 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
@@ -258,19 +258,4 @@ public class ConstantPool implements Cloneable, Serializable {
     public int getLength() {
         return constant_pool_count;
     }
-
-
-    /**
-     * @return String representation.
-     */
-    @Override
-    public String toString() {
-        StringBuilder buf = new StringBuilder();
-        for (int i = 1; i < constant_pool_count; i++) {
-            buf.append(i).append(")").append(constant_pool[i]).append("\n");
-        }
-        return buf.toString();
-    }
-
-
 }

==================================================
ConstantUtf8.java
index b98bdb45b8..d1226824e2 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantString.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantString.java
@@ -63,13 +63,4 @@ public final class ConstantString extends Constant {
     public final int getStringIndex() {
         return string_index;
     }
-
-
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(string_index = " + string_index + ")";
-    }
 }

==================================================
ConstantValue.java
index c3e7353704..187bcb7757 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantUtf8.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantUtf8.java
@@ -54,13 +54,4 @@ public final class ConstantUtf8 extends Constant {
     public final String getBytes() {
         return bytes;
     }
-
-
-    /**
-     * @return String representation
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(\"" + Utility.replace(bytes, "\n", "\\n") + "\")";
-    }
 }

==================================================
Deprecated.java
index 95a9b6c587..5769aff688 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantValue.java
@@ -33,7 +33,6 @@ import org.apache.tomcat.util.bcel.Constants;
 public final class ConstantValue extends Attribute {
 
     private static final long serialVersionUID = -388222612752527969L;
-    private int constantvalue_index;
 
 
     /**
@@ -46,54 +45,18 @@ public final class ConstantValue extends Attribute {
      */
     ConstantValue(int name_index, int length, DataInput file, ConstantPool constant_pool)
             throws IOException {
-        this(name_index, length, file.readUnsignedShort(), constant_pool);
+        this(name_index, length, constant_pool);
     }
 
 
     /**
      * @param name_index Name index in constant pool
      * @param length Content length in bytes
-     * @param constantvalue_index Index in constant pool
      * @param constant_pool Array of constants
      */
-    public ConstantValue(int name_index, int length, int constantvalue_index,
+    public ConstantValue(int name_index, int length,
             ConstantPool constant_pool) {
         super(Constants.ATTR_CONSTANT_VALUE, name_index, length, constant_pool);
-        this.constantvalue_index = constantvalue_index;
-    }
-
-
-    /**
-     * @return String representation of constant value.
-     */
-    @Override
-    public final String toString() {
-        Constant c = constant_pool.getConstant(constantvalue_index);
-        String buf;
-        int i;
-        // Print constant to string depending on its type
-        switch (c.getTag()) {
-            case Constants.CONSTANT_Long:
-                buf = String.valueOf(((ConstantLong) c).getBytes());
-                break;
-            case Constants.CONSTANT_Float:
-                buf = String.valueOf(((ConstantFloat) c).getBytes());
-                break;
-            case Constants.CONSTANT_Double:
-                buf = String.valueOf(((ConstantDouble) c).getBytes());
-                break;
-            case Constants.CONSTANT_Integer:
-                buf = String.valueOf(((ConstantInteger) c).getBytes());
-                break;
-            case Constants.CONSTANT_String:
-                i = ((ConstantString) c).getStringIndex();
-                c = constant_pool.getConstant(i, Constants.CONSTANT_Utf8);
-                buf = "\"" + Utility.convertString(((ConstantUtf8) c).getBytes()) + "\"";
-                break;
-            default:
-                throw new IllegalStateException("Type of ConstValue invalid: " + c);
-        }
-        return buf;
     }
 
 

==================================================
ElementValue.java
index 135bf3089f..c0955fefb5 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Deprecated.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Deprecated.java
@@ -68,15 +68,6 @@ public final class Deprecated extends Attribute {
     }
 
 
-    /**
-     * @return attribute name
-     */
-    @Override
-    public final String toString() {
-        return Constants.ATTRIBUTE_NAMES[Constants.ATTR_DEPRECATED];
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
ExceptionTable.java
index 3934fdcd7e..8921a2c21f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ElementValue.java
@@ -32,11 +32,6 @@ public abstract class ElementValue
 
     protected ConstantPool cpool;
 
-    @Override
-    public String toString()
-    {
-        return stringifyValue();
-    }
 
     protected ElementValue(int type, ConstantPool cpool)
     {

==================================================
Field.java
index 952d747368..c9daab15dd 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ExceptionTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ExceptionTable.java
@@ -83,25 +83,6 @@ public final class ExceptionTable extends Attribute {
     }
 
 
-    /**
-     * @return String representation, i.e., a list of thrown exceptions.
-     */
-    @Override
-    public final String toString() {
-        StringBuilder buf = new StringBuilder();
-        String str;
-        for (int i = 0; i < number_of_exceptions; i++) {
-            str = constant_pool.getConstantString(exception_index_table[i],
-                    Constants.CONSTANT_Class);
-            buf.append(Utility.compactClassName(str, false));
-            if (i < number_of_exceptions - 1) {
-                buf.append(", ");
-            }
-        }
-        return buf.toString();
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
InnerClass.java
index f44ba059b1..4a9b581a5f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Field.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Field.java
@@ -75,36 +75,6 @@ public final class Field extends FieldOrMethod {
     }
 
 
-    /**
-     * Return string representation close to declaration format,
-     * `public static final short MAX = 100', e.g..
-     *
-     * @return String representation of field, including the signature.
-     */
-    @Override
-    public final String toString() {
-        String name, signature, access; // Short cuts to constant pool
-        // Get names from constant pool
-        access = Utility.accessToString(access_flags);
-        access = access.equals("") ? "" : (access + " ");
-        signature = Utility.signatureToString(getSignature());
-        name = getName();
-        StringBuilder buf = new StringBuilder(64);
-        buf.append(access).append(signature).append(" ").append(name);
-        ConstantValue cv = getConstantValue();
-        if (cv != null) {
-            buf.append(" = ").append(cv);
-        }
-        for (int i = 0; i < attributes_count; i++) {
-            Attribute a = attributes[i];
-            if (!(a instanceof ConstantValue)) {
-                buf.append(" [").append(a.toString()).append("]");
-            }
-        }
-        return buf.toString();
-    }
-
-
     /**
      * Return value as defined by given BCELComparator strategy.
      * By default two Field objects are said to be equal when

==================================================
InnerClasses.java
index 5d0d6c1f6e..da5915b256 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/InnerClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/InnerClass.java
@@ -22,8 +22,6 @@ import java.io.DataOutputStream;
 import java.io.IOException;
 import java.io.Serializable;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 /**
  * This class represents a inner class attribute, i.e., the class
  * indices of the inner and outer classes, the name and the attributes
@@ -82,44 +80,6 @@ public final class InnerClass implements Cloneable, Serializable {
     }
 
 
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        return "InnerClass(" + inner_class_index + ", " + outer_class_index + ", "
-                + inner_name_index + ", " + inner_access_flags + ")";
-    }
-
-
-    /**
-     * @return Resolved string representation
-     */
-    public final String toString( ConstantPool constant_pool ) {
-        String inner_class_name, outer_class_name, inner_name, access;
-        inner_class_name = constant_pool.getConstantString(inner_class_index,
-                Constants.CONSTANT_Class);
-        inner_class_name = Utility.compactClassName(inner_class_name);
-        if (outer_class_index != 0) {
-            outer_class_name = constant_pool.getConstantString(outer_class_index,
-                    Constants.CONSTANT_Class);
-            outer_class_name = Utility.compactClassName(outer_class_name);
-        } else {
-            outer_class_name = "<not a member>";
-        }
-        if (inner_name_index != 0) {
-            inner_name = ((ConstantUtf8) constant_pool.getConstant(inner_name_index,
-                    Constants.CONSTANT_Utf8)).getBytes();
-        } else {
-            inner_name = "<anonymous>";
-        }
-        access = Utility.accessToString(inner_access_flags, true);
-        access = access.equals("") ? "" : (access + " ");
-        return "InnerClass:" + access + inner_class_name + "(\"" + outer_class_name + "\", \""
-                + inner_name + "\")";
-    }
-
-
     /**
      * @return deep copy of this object
      */

==================================================
JavaClass.java
index 6bc97fc5a7..61e86b1768 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/InnerClasses.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/InnerClasses.java
@@ -81,19 +81,6 @@ public final class InnerClasses extends Attribute {
     }
 
 
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        StringBuilder buf = new StringBuilder();
-        for (int i = 0; i < number_of_classes; i++) {
-            buf.append(inner_classes[i].toString(constant_pool)).append("\n");
-        }
-        return buf.toString();
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
LineNumber.java
index 10288afe88..e466afdc24 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
@@ -19,7 +19,6 @@ package org.apache.tomcat.util.bcel.classfile;
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.StringTokenizer;
 
 import org.apache.tomcat.util.bcel.Constants;
 import org.apache.tomcat.util.bcel.util.BCELComparator;
@@ -39,16 +38,9 @@ public class JavaClass extends AccessFlags
         implements Cloneable, Comparable<JavaClass> {
 
     private static final long serialVersionUID = 7029227708237523236L;
-    private String file_name;
-    private String source_file_name = "<Unknown>";
     private String class_name;
     private String superclass_name;
-    private int major, minor; // Compiler version
-    private ConstantPool constant_pool; // Constant pool
-    private int[] interfaces; // implemented interfaces
     private String[] interface_names;
-    private Field[] fields; // Fields, i.e., variables of class
-    private Method[] methods; // methods defined in the class
     private Attribute[] attributes; // attributes defined in the class
     private AnnotationEntry[] annotations;   // annotations defined on the class
 
@@ -81,9 +73,6 @@ public class JavaClass extends AccessFlags
      * ConstantClass that represents this class.
      * @param superclass_name_index Index into constant pool referencing a
      * ConstantClass that represents this class's superclass.
-     * @param file_name File name
-     * @param major Major compiler version
-     * @param minor Minor compiler version
      * @param access_flags Access rights defined by bit flags
      * @param constant_pool Array of constants
      * @param interfaces Implemented interfaces
@@ -91,8 +80,8 @@ public class JavaClass extends AccessFlags
      * @param methods Class methods
      * @param attributes Class attributes
      */
-    public JavaClass(int class_name_index, int superclass_name_index, String file_name, int major,
-            int minor, int access_flags, ConstantPool constant_pool, int[] interfaces,
+    public JavaClass(int class_name_index, int superclass_name_index,
+            int access_flags, ConstantPool constant_pool, int[] interfaces,
             Field[] fields, Method[] methods, Attribute[] attributes) {
         if (interfaces == null) {
             interfaces = new int[0];
@@ -106,23 +95,10 @@ public class JavaClass extends AccessFlags
         if (methods == null) {
             methods = new Method[0];
         }
-        this.file_name = file_name;
-        this.major = major;
-        this.minor = minor;
         this.access_flags = access_flags;
-        this.constant_pool = constant_pool;
-        this.interfaces = interfaces;
-        this.fields = fields;
-        this.methods = methods;
         this.attributes = attributes;
         annotationsOutOfDate = true;
-        // Get source file name if available
-        for (int i = 0; i < attributes.length; i++) {
-            if (attributes[i] instanceof SourceFile) {
-                source_file_name = ((SourceFile) attributes[i]).getSourceFileName();
-                break;
-            }
-        }
+
         /* According to the specification the following entries must be of type
          * `ConstantClass' but we check that anyway via the
          * `ConstPool.getConstant' method.
@@ -199,72 +175,6 @@ public class JavaClass extends AccessFlags
     }
 
 
-    /**
-     * @return String representing class contents.
-     */
-    @Override
-    public String toString() {
-        String access = Utility.accessToString(access_flags, true);
-        access = access.equals("") ? "" : (access + " ");
-        StringBuilder buf = new StringBuilder(128);
-        buf.append(access).append(Utility.classOrInterface(access_flags)).append(" ").append(
-                class_name).append(" extends ").append(
-                Utility.compactClassName(superclass_name, false)).append('\n');
-        int size = interfaces.length;
-        if (size > 0) {
-            buf.append("implements\t\t");
-            for (int i = 0; i < size; i++) {
-                buf.append(interface_names[i]);
-                if (i < size - 1) {
-                    buf.append(", ");
-                }
-            }
-            buf.append('\n');
-        }
-        buf.append("filename\t\t").append(file_name).append('\n');
-        buf.append("compiled from\t\t").append(source_file_name).append('\n');
-        buf.append("compiler version\t").append(major).append(".").append(minor).append('\n');
-        buf.append("access flags\t\t").append(access_flags).append('\n');
-        buf.append("constant pool\t\t").append(constant_pool.getLength()).append(" entries\n");
-        buf.append("ACC_SUPER flag\t\t").append(isSuper()).append("\n");
-        if (attributes.length > 0) {
-            buf.append("\nAttribute(s):\n");
-            for (int i = 0; i < attributes.length; i++) {
-                buf.append(indent(attributes[i]));
-            }
-        }
-        AnnotationEntry[] annotations = getAnnotationEntries();
-        if (annotations!=null && annotations.length>0) {
-            buf.append("\nAnnotation(s):\n");
-            for (int i=0; i<annotations.length; i++)
-                buf.append(indent(annotations[i]));
-        }
-        if (fields.length > 0) {
-            buf.append("\n").append(fields.length).append(" fields:\n");
-            for (int i = 0; i < fields.length; i++) {
-                buf.append("\t").append(fields[i]).append('\n');
-            }
-        }
-        if (methods.length > 0) {
-            buf.append("\n").append(methods.length).append(" methods:\n");
-            for (int i = 0; i < methods.length; i++) {
-                buf.append("\t").append(methods[i]).append('\n');
-            }
-        }
-        return buf.toString();
-    }
-
-
-    private static final String indent( Object obj ) {
-        StringTokenizer tok = new StringTokenizer(obj.toString(), "\n");
-        StringBuilder buf = new StringBuilder();
-        while (tok.hasMoreTokens()) {
-            buf.append("\t").append(tok.nextToken()).append("\n");
-        }
-        return buf.toString();
-    }
-
-
     public final boolean isSuper() {
         return (access_flags & Constants.ACC_SUPER) != 0;
     }

==================================================
LineNumberTable.java
index be24182418..19c5992cd7 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LineNumber.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LineNumber.java
@@ -70,15 +70,6 @@ public final class LineNumber implements Cloneable, Serializable {
     }
 
 
-    /**
-     * @return String representation
-     */
-    @Override
-    public final String toString() {
-        return "LineNumber(" + start_pc + ", " + line_number + ")";
-    }
-
-
     /**
      * @return deep copy of this object
      */

==================================================
LocalVariable.java
index 7b43a089cd..a70ca7ac8f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LineNumberTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LineNumberTable.java
@@ -80,30 +80,6 @@ public final class LineNumberTable extends Attribute {
     }
 
 
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        StringBuilder buf = new StringBuilder();
-        StringBuilder line = new StringBuilder();
-        String newLine = System.getProperty("line.separator", "\n");
-        for (int i = 0; i < line_number_table_length; i++) {
-            line.append(line_number_table[i].toString());
-            if (i < line_number_table_length - 1) {
-                line.append(", ");
-            }
-            if (line.length() > 72) {
-                line.append(newLine);
-                buf.append(line.toString());
-                line.setLength(0);
-            }
-        }
-        buf.append(line);
-        return buf.toString();
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
LocalVariableTable.java
index 6f47280495..cd556de6e2 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariable.java
@@ -118,17 +118,6 @@ public final class LocalVariable implements Constants, Cloneable, Serializable {
     }
 
 
-    /**
-     * @return string representation.
-     */
-    @Override
-    public final String toString() {
-        String name = getName(), signature = Utility.signatureToString(getSignature());
-        return "LocalVariable(start_pc = " + start_pc + ", length = " + length + ", index = "
-                + index + ":" + signature + " " + name + ")";
-    }
-
-
     /**
      * @return deep copy of this object
      */

==================================================
LocalVariableTypeTable.java
index 9984827b53..723fe835f0 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTable.java
@@ -97,22 +97,6 @@ public class LocalVariableTable extends Attribute {
     }
 
 
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        StringBuilder buf = new StringBuilder();
-        for (int i = 0; i < local_variable_table_length; i++) {
-            buf.append(local_variable_table[i].toString());
-            if (i < local_variable_table_length - 1) {
-                buf.append('\n');
-            }
-        }
-        return buf.toString();
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
PMGClass.java
index 6ec6526af7..1e394be6fe 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTypeTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTypeTable.java
@@ -78,21 +78,6 @@ private int             local_variable_type_table_length; // Table of local
       local_variable_table.length;
   }
 
-  /**
-   * @return String representation.
-   */
-  @Override
-  public final String toString() {
-      StringBuilder buf = new StringBuilder();
-
-    for(int i=0; i < local_variable_type_table_length; i++) {
-      buf.append(local_variable_type_table[i].toString());
-
-      if(i < local_variable_type_table_length - 1) buf.append('\n');
-    }
-
-    return buf.toString();
-  }
 
   /**
    * @return deep copy of this attribute

==================================================
Signature.java
index 0ce4de22ca..f524c57a90 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/PMGClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/PMGClass.java
@@ -85,15 +85,6 @@ public final class PMGClass extends Attribute {
     }
 
 
-    /**
-     * @return String representation
-     */
-    @Override
-    public final String toString() {
-        return "PMGClass(" + getPMGName() + ", " + getPMGClassName() + ")";
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
SimpleElementValue.java
index 134b85ff96..b9c88bed09 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Signature.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Signature.java
@@ -71,15 +71,6 @@ public final class Signature extends Attribute {
         return c.getBytes();
     }
 
-    /**
-     * @return String representation
-     */
-    @Override
-    public final String toString() {
-        String s = getSignature();
-        return "Signature(" + s + ")";
-    }
-
 
     /**
      * @return deep copy of this attribute

==================================================
SourceFile.java
index 7ba328bcb3..0c01bfa800 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/SimpleElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/SimpleElementValue.java
@@ -41,12 +41,6 @@ public class SimpleElementValue extends ElementValue
     }
 
 
-    @Override
-    public String toString()
-    {
-        return stringifyValue();
-    }
-
     // Whatever kind of value it is, return it as a string
     @Override
     public String stringifyValue()

==================================================
StackMap.java
index 07e3bd06bd..b881814c96 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/SourceFile.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/SourceFile.java
@@ -81,15 +81,6 @@ public final class SourceFile extends Attribute {
     }
 
 
-    /**
-     * @return String representation
-     */
-    @Override
-    public final String toString() {
-        return "SourceFile(" + getSourceFileName() + ")";
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
StackMapEntry.java
index 2ad1753647..2372873971 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMap.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMap.java
@@ -70,7 +70,7 @@ public final class StackMap extends Attribute {
         map_length = file.readUnsignedShort();
         map = new StackMapEntry[map_length];
         for (int i = 0; i < map_length; i++) {
-            map[i] = new StackMapEntry(file, constant_pool);
+            map[i] = new StackMapEntry(file);
         }
     }
 
@@ -84,23 +84,6 @@ public final class StackMap extends Attribute {
     }
 
 
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        StringBuilder buf = new StringBuilder("StackMap(");
-        for (int i = 0; i < map_length; i++) {
-            buf.append(map[i].toString());
-            if (i < map_length - 1) {
-                buf.append(", ");
-            }
-        }
-        buf.append(')');
-        return buf.toString();
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
StackMapTable.java
index 2608470de3..3254cdcfb2 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapEntry.java
@@ -48,16 +48,16 @@ public final class StackMapEntry implements Cloneable, Serializable {
      * @param file Input stream
      * @throws IOException
      */
-    StackMapEntry(DataInputStream file, ConstantPool constant_pool) throws IOException {
+    StackMapEntry(DataInputStream file) throws IOException {
         this(file.readShort(), file.readShort(), null, -1, null);
         types_of_locals = new StackMapType[number_of_locals];
         for (int i = 0; i < number_of_locals; i++) {
-            types_of_locals[i] = new StackMapType(file, constant_pool);
+            types_of_locals[i] = new StackMapType(file);
         }
         number_of_stack_items = file.readShort();
         types_of_stack_items = new StackMapType[number_of_stack_items];
         for (int i = 0; i < number_of_stack_items; i++) {
-            types_of_stack_items[i] = new StackMapType(file, constant_pool);
+            types_of_stack_items[i] = new StackMapType(file);
         }
     }
 
@@ -92,38 +92,6 @@ public final class StackMapEntry implements Cloneable, Serializable {
     }
 
 
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        StringBuilder buf = new StringBuilder(64);
-        buf.append("(offset=").append(byte_code_offset);
-        if (number_of_locals > 0) {
-            buf.append(", locals={");
-            for (int i = 0; i < number_of_locals; i++) {
-                buf.append(types_of_locals[i]);
-                if (i < number_of_locals - 1) {
-                    buf.append(", ");
-                }
-            }
-            buf.append("}");
-        }
-        if (number_of_stack_items > 0) {
-            buf.append(", stack items={");
-            for (int i = 0; i < number_of_stack_items; i++) {
-                buf.append(types_of_stack_items[i]);
-                if (i < number_of_stack_items - 1) {
-                    buf.append(", ");
-                }
-            }
-            buf.append("}");
-        }
-        buf.append(")");
-        return buf.toString();
-    }
-
-
     /**
      * @return deep copy of this object
      */
@@ -134,6 +102,4 @@ public final class StackMapEntry implements Cloneable, Serializable {
         }
         return null;
     }
-
-
 }

==================================================
StackMapTableEntry.java
index 3b01d5b9a9..3e2a4681c4 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapTable.java
@@ -70,7 +70,7 @@ public final class StackMapTable extends Attribute {
         map_length = file.readUnsignedShort();
         map = new StackMapTableEntry[map_length];
         for (int i = 0; i < map_length; i++) {
-            map[i] = new StackMapTableEntry(file, constant_pool);
+            map[i] = new StackMapTableEntry(file);
         }
     }
 
@@ -84,23 +84,6 @@ public final class StackMapTable extends Attribute {
     }
 
 
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        StringBuilder buf = new StringBuilder("StackMapTable(");
-        for (int i = 0; i < map_length; i++) {
-            buf.append(map[i].toString());
-            if (i < map_length - 1) {
-                buf.append(", ");
-            }
-        }
-        buf.append(')');
-        return buf.toString();
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
StackMapType.java
index 2b65811ec1..9dbafb7722 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapTableEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapTableEntry.java
@@ -51,7 +51,7 @@ public final class StackMapTableEntry implements Cloneable, Serializable {
      * @param file Input stream
      * @throws IOException
      */
-    StackMapTableEntry(DataInputStream file, ConstantPool constant_pool) throws IOException {
+    StackMapTableEntry(DataInputStream file) throws IOException {
         this(file.read(), -1, -1, null, -1, null);
 
         if (frame_type >= Constants.SAME_FRAME && frame_type <= Constants.SAME_FRAME_MAX) {
@@ -60,12 +60,12 @@ public final class StackMapTableEntry implements Cloneable, Serializable {
             byte_code_offset_delta = frame_type - Constants.SAME_LOCALS_1_STACK_ITEM_FRAME;
             number_of_stack_items = 1;
             types_of_stack_items = new StackMapType[1];
-            types_of_stack_items[0] = new StackMapType(file, constant_pool);
+            types_of_stack_items[0] = new StackMapType(file);
         } else if (frame_type == Constants.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {
             byte_code_offset_delta = file.readShort();
             number_of_stack_items = 1;
             types_of_stack_items = new StackMapType[1];
-            types_of_stack_items[0] = new StackMapType(file, constant_pool);
+            types_of_stack_items[0] = new StackMapType(file);
         } else if (frame_type >= Constants.CHOP_FRAME && frame_type <= Constants.CHOP_FRAME_MAX) {
             byte_code_offset_delta = file.readShort();
         } else if (frame_type == Constants.SAME_FRAME_EXTENDED) {
@@ -75,19 +75,19 @@ public final class StackMapTableEntry implements Cloneable, Serializable {
             number_of_locals = frame_type - 251;
             types_of_locals = new StackMapType[number_of_locals];
             for (int i = 0; i < number_of_locals; i++) {
-                types_of_locals[i] = new StackMapType(file, constant_pool);
+                types_of_locals[i] = new StackMapType(file);
             }
         } else if (frame_type == Constants.FULL_FRAME) {
             byte_code_offset_delta = file.readShort();
             number_of_locals = file.readShort();
             types_of_locals = new StackMapType[number_of_locals];
             for (int i = 0; i < number_of_locals; i++) {
-                types_of_locals[i] = new StackMapType(file, constant_pool);
+                types_of_locals[i] = new StackMapType(file);
             }
             number_of_stack_items = file.readShort();
             types_of_stack_items = new StackMapType[number_of_stack_items];
             for (int i = 0; i < number_of_stack_items; i++) {
-                types_of_stack_items[i] = new StackMapType(file, constant_pool);
+                types_of_stack_items[i] = new StackMapType(file);
             }
         } else {
             /* Can't happen */
@@ -149,56 +149,6 @@ public final class StackMapTableEntry implements Cloneable, Serializable {
     }
 
 
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        StringBuilder buf = new StringBuilder(64);
-        buf.append("(");
-        if (frame_type >= Constants.SAME_FRAME && frame_type <= Constants.SAME_FRAME_MAX) {
-            buf.append("SAME");
-        } else if (frame_type >= Constants.SAME_LOCALS_1_STACK_ITEM_FRAME && frame_type <= Constants.SAME_LOCALS_1_STACK_ITEM_FRAME_MAX) {
-            buf.append("SAME_LOCALS_1_STACK");
-        } else if (frame_type == Constants.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {
-            buf.append("SAME_LOCALS_1_STACK_EXTENDED");
-        } else if (frame_type >= Constants.CHOP_FRAME && frame_type <= Constants.CHOP_FRAME_MAX) {
-            buf.append("CHOP "+(251-frame_type));
-        } else if (frame_type == Constants.SAME_FRAME_EXTENDED) {
-            buf.append("SAME_EXTENDED");
-        } else if (frame_type >= Constants.APPEND_FRAME && frame_type <= Constants.APPEND_FRAME_MAX) {
-            buf.append("APPEND "+(frame_type-251));
-        } else if (frame_type == Constants.FULL_FRAME) {
-            buf.append("FULL");
-        } else {
-            buf.append("UNKNOWN");
-        }
-        buf.append(", offset delta=").append(byte_code_offset_delta);
-        if (number_of_locals > 0) {
-            buf.append(", locals={");
-            for (int i = 0; i < number_of_locals; i++) {
-                buf.append(types_of_locals[i]);
-                if (i < number_of_locals - 1) {
-                    buf.append(", ");
-                }
-            }
-            buf.append("}");
-        }
-        if (number_of_stack_items > 0) {
-            buf.append(", stack items={");
-            for (int i = 0; i < number_of_stack_items; i++) {
-                buf.append(types_of_stack_items[i]);
-                if (i < number_of_stack_items - 1) {
-                    buf.append(", ");
-                }
-            }
-            buf.append("}");
-        }
-        buf.append(")");
-        return buf.toString();
-    }
-
-
     /**
      * @return deep copy of this object
      */

==================================================
Synthetic.java
index 93d90094d7..63e68a175f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapType.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapType.java
@@ -40,7 +40,6 @@ public final class StackMapType implements Cloneable, Serializable {
 
     private byte type;
     private int index = -1; // Index to CONSTANT_Class or offset
-    private ConstantPool constant_pool;
 
 
     /**
@@ -48,12 +47,11 @@ public final class StackMapType implements Cloneable, Serializable {
      * @param file Input stream
      * @throws IOException
      */
-    StackMapType(DataInput file, ConstantPool constant_pool) throws IOException {
-        this(file.readByte(), -1, constant_pool);
+    StackMapType(DataInput file) throws IOException {
+        this(file.readByte(), -1);
         if (hasIndex()) {
             setIndex(file.readShort());
         }
-        setConstantPool(constant_pool);
     }
 
 
@@ -61,10 +59,9 @@ public final class StackMapType implements Cloneable, Serializable {
      * @param type type tag as defined in the Constants interface
      * @param index index to constant pool, or byte code offset
      */
-    public StackMapType(byte type, int index, ConstantPool constant_pool) {
+    public StackMapType(byte type, int index) {
         setType(type);
         setIndex(index);
-        setConstantPool(constant_pool);
     }
 
 
@@ -108,35 +105,4 @@ public final class StackMapType implements Cloneable, Serializable {
     public final boolean hasIndex() {
         return ((type == Constants.ITEM_Object) || (type == Constants.ITEM_NewObject));
     }
-
-
-    private String printIndex() {
-        if (type == Constants.ITEM_Object) {
-            if (index < 0) {
-                return ", class=<unknown>";
-            }
-            return ", class=" + constant_pool.constantToString(index, Constants.CONSTANT_Class);
-        } else if (type == Constants.ITEM_NewObject) {
-            return ", offset=" + index;
-        } else {
-            return "";
-        }
-    }
-
-
-    /**
-     * @return String representation
-     */
-    @Override
-    public final String toString() {
-        return "(type=" + Constants.ITEM_NAMES[type] + printIndex() + ")";
-    }
-
-
-    /**
-     * @param constant_pool Constant pool to be used for this object.
-     */
-    public final void setConstantPool( ConstantPool constant_pool ) {
-        this.constant_pool = constant_pool;
-    }
 }

==================================================
Unknown.java
index 92f5a17455..3037ada14a 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Synthetic.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Synthetic.java
@@ -74,19 +74,6 @@ public final class Synthetic extends Attribute {
     }
 
 
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        StringBuilder buf = new StringBuilder("Synthetic");
-        if (length > 0) {
-            buf.append(" ").append(Utility.toHexString(bytes));
-        }
-        return buf.toString();
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
