4191285cdc3c15ab83ebbc2e350e55d35347dac5
==================================================
Additional debug logging to try and trace the cause of the occasional NIO2 failures for TestWebSocketFrameClientSSL.
==================================================
Mark Thomas
==================================================
Tue Feb 17 14:55:52 2015 +0000
==================================================
AbstractProtocol.java
Additional debug logging to try and trace the cause of the occasional NIO2 failures for TestWebSocketFrameClientSSL.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1660402 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestWebSocketFrameClientSSL.java
index 7058d52bbe..117fb0b977 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -601,12 +601,18 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
                 SocketStatus status) {
             if (wrapper == null) {
                 // Nothing to do. Socket has been closed.
+                if (getLog().isDebugEnabled()) {
+                    getLog().debug("Wrapper is null. Closing connection.");
+                }
                 return SocketState.CLOSED;
             }
 
             S socket = wrapper.getSocket();
             if (socket == null) {
                 // Nothing to do. Socket has been closed.
+                if (getLog().isDebugEnabled()) {
+                    getLog().debug("Socket is null. Closing connection.");
+                }
                 return SocketState.CLOSED;
             }
 
@@ -614,6 +620,9 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
             if (status == SocketStatus.DISCONNECT && processor == null) {
                 // Nothing to do. Endpoint requested a close and there is no
                 // longer a processor associated with this socket.
+                if (getLog().isDebugEnabled()) {
+                    getLog().debug("SocketStatus.DISCONNECT && processor == null. Closing connection.");
+                }
                 return SocketState.CLOSED;
             }
 
@@ -636,6 +645,9 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
                 do {
                     if (status == SocketStatus.CLOSE_NOW) {
                         processor.errorDispatch();
+                        if (getLog().isDebugEnabled()) {
+                            getLog().debug("SocketStatus.CLOSE_NOW. Closing connection.");
+                        }
                         state = SocketState.CLOSED;
                     } else if (dispatches != null) {
                         // Associate the processor with the connection as
@@ -739,6 +751,9 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
                     } else {
                         release(wrapper, processor, false);
                     }
+                    if (getLog().isDebugEnabled()) {
+                        getLog().debug("Closing connection.");
+                    }
                 }
                 return state;
             } catch(java.net.SocketException e) {

==================================================
