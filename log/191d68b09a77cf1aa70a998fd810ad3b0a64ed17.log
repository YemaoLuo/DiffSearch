191d68b09a77cf1aa70a998fd810ad3b0a64ed17
==================================================
No longer need SerializablePrincipal in Cluster code since GenericPrincipal now implements Serializable.
==================================================
Mark Thomas
==================================================
Tue Dec 16 14:08:48 2014 +0000
==================================================
ClusterSingleSignOn.java
No longer need SerializablePrincipal in Cluster code since GenericPrincipal now implements Serializable.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1645955 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ClusterSingleSignOnListener.java
index 479831d6f4..aced4b0778 100644
--- a/java/org/apache/catalina/ha/authenticator/ClusterSingleSignOn.java
+++ b/java/org/apache/catalina/ha/authenticator/ClusterSingleSignOn.java
@@ -30,7 +30,6 @@ import org.apache.catalina.authenticator.SingleSignOn;
 import org.apache.catalina.ha.CatalinaCluster;
 import org.apache.catalina.ha.ClusterManager;
 import org.apache.catalina.ha.ClusterValve;
-import org.apache.catalina.ha.session.SerializablePrincipal;
 import org.apache.catalina.realm.GenericPrincipal;
 import org.apache.tomcat.util.ExceptionUtils;
 
@@ -281,10 +280,8 @@ public class ClusterSingleSignOn extends SingleSignOn implements ClusterValve {
             msg.setUsername(username);
             msg.setPassword(password);
 
-            SerializablePrincipal sp = null;
             if (principal instanceof GenericPrincipal) {
-                sp = SerializablePrincipal.createPrincipal((GenericPrincipal) principal);
-                msg.setPrincipal(sp);
+                msg.setPrincipal((GenericPrincipal) principal);
             }
 
             cluster.send(msg);
@@ -346,10 +343,8 @@ public class ClusterSingleSignOn extends SingleSignOn implements ClusterValve {
             msg.setUsername(username);
             msg.setPassword(password);
 
-            SerializablePrincipal sp = null;
             if (principal instanceof GenericPrincipal) {
-                sp = SerializablePrincipal.createPrincipal((GenericPrincipal) principal);
-                msg.setPrincipal(sp);
+                msg.setPrincipal((GenericPrincipal) principal);
             }
 
             cluster.send(msg);

==================================================
SingleSignOnMessage.java
index a87f196a10..2957131cdb 100644
--- a/java/org/apache/catalina/ha/authenticator/ClusterSingleSignOnListener.java
+++ b/java/org/apache/catalina/ha/authenticator/ClusterSingleSignOnListener.java
@@ -86,14 +86,14 @@ public class ClusterSingleSignOnListener extends ClusterListener {
                 break;
             case SingleSignOnMessage.REGISTER_SESSION:
                 if (msg.getPrincipal() != null) {
-                    principal = msg.getPrincipal().getPrincipal();
+                    principal = msg.getPrincipal();
                 }
                 clusterSSO.registerLocal(msg.getSsoId(), principal, msg.getAuthType(),
                                          msg.getUsername(), msg.getPassword());
                 break;
             case SingleSignOnMessage.UPDATE_SESSION:
                 if (msg.getPrincipal() != null) {
-                    principal = msg.getPrincipal().getPrincipal();
+                    principal = msg.getPrincipal();
                 }
                 clusterSSO.updateLocal(msg.getSsoId(), principal, msg.getAuthType(),
                                        msg.getUsername(), msg.getPassword());

==================================================
DeltaRequest.java
index eed3ad18d5..0d45954a8c 100644
--- a/java/org/apache/catalina/ha/authenticator/SingleSignOnMessage.java
+++ b/java/org/apache/catalina/ha/authenticator/SingleSignOnMessage.java
@@ -18,7 +18,7 @@
 package org.apache.catalina.ha.authenticator;
 
 import org.apache.catalina.ha.ClusterMessage;
-import org.apache.catalina.ha.session.SerializablePrincipal;
+import org.apache.catalina.realm.GenericPrincipal;
 import org.apache.catalina.tribes.Member;
 
 /**
@@ -45,7 +45,7 @@ public class SingleSignOnMessage implements ClusterMessage {
     private String authType = null;
     private String password = null;
     private String username = null;
-    private SerializablePrincipal principal = null;
+    private GenericPrincipal principal = null;
 
     private Member address = null;
     private long timestamp = 0;
@@ -165,11 +165,11 @@ public class SingleSignOnMessage implements ClusterMessage {
         this.username = username;
     }
 
-    public SerializablePrincipal getPrincipal() {
+    public GenericPrincipal getPrincipal() {
         return principal;
     }
 
-    public void setPrincipal(SerializablePrincipal principal) {
+    public void setPrincipal(GenericPrincipal principal) {
         this.principal = principal;
     }
 

==================================================
DeltaSession.java
index 7a789cc4b3..0f3208e65c 100644
--- a/java/org/apache/catalina/ha/session/DeltaRequest.java
+++ b/java/org/apache/catalina/ha/session/DeltaRequest.java
@@ -100,16 +100,16 @@ public class DeltaRequest implements Externalizable {
      */
     public void setPrincipal(Principal p) {
         int action = (p==null)?ACTION_REMOVE:ACTION_SET;
-        SerializablePrincipal sp = null;
-        if ( p != null ) {
-            if(p instanceof GenericPrincipal) {
-                sp = SerializablePrincipal.createPrincipal((GenericPrincipal)p);
+        GenericPrincipal gp = null;
+        if (p != null) {
+            if (p instanceof GenericPrincipal) {
+                gp = (GenericPrincipal) p;
                 if(log.isDebugEnabled())
                     log.debug(sm.getString("deltaRequest.showPrincipal", p.getName() , getSessionId()));
             } else
                 log.error(sm.getString("deltaRequest.wrongPrincipalClass",p.getClass().getName()));
         }
-        addAction(TYPE_PRINCIPAL,action,NAME_PRINCIPAL,sp);
+        addAction(TYPE_PRINCIPAL, action, NAME_PRINCIPAL, gp);
     }
 
     public void setNew(boolean n) {
@@ -178,9 +178,8 @@ public class DeltaRequest implements Externalizable {
                     break;
                 case TYPE_PRINCIPAL:
                     Principal p = null;
-                    if ( info.getAction() == ACTION_SET ) {
-                        SerializablePrincipal sp = (SerializablePrincipal)info.getValue();
-                        p = sp.getPrincipal();
+                    if (info.getAction() == ACTION_SET) {
+                        p = (Principal) info.getValue();
                     }
                     session.setPrincipal(p,false);
                     break;

==================================================
SerializablePrincipal.java
index b23c023b0f..ba37be35be 100644
--- a/java/org/apache/catalina/ha/session/DeltaSession.java
+++ b/java/org/apache/catalina/ha/session/DeltaSession.java
@@ -38,7 +38,6 @@ import org.apache.catalina.ha.CatalinaCluster;
 import org.apache.catalina.ha.ClusterManager;
 import org.apache.catalina.ha.ClusterMessage;
 import org.apache.catalina.ha.ClusterSession;
-import org.apache.catalina.realm.GenericPrincipal;
 import org.apache.catalina.session.ManagerBase;
 import org.apache.catalina.session.StandardSession;
 import org.apache.catalina.tribes.io.ReplicationStream;
@@ -721,7 +720,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
         boolean hasPrincipal = stream.readBoolean();
         principal = null;
         if (hasPrincipal) {
-            principal = SerializablePrincipal.readPrincipal(stream);
+            principal = (Principal) stream.readObject();
         }
 
         //        setId((String) stream.readObject());
@@ -799,9 +798,9 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
         stream.writeObject(Boolean.valueOf(isValid));
         stream.writeObject(Long.valueOf(thisAccessedTime));
         stream.writeObject(Long.valueOf(version));
-        stream.writeBoolean(getPrincipal() != null);
-        if (getPrincipal() != null) {
-            SerializablePrincipal.writePrincipal((GenericPrincipal) principal,stream);
+        stream.writeBoolean(getPrincipal() instanceof Serializable);
+        if (getPrincipal() instanceof Serializable) {
+            stream.writeObject(getPrincipal());
         }
 
         stream.writeObject(id);

==================================================
TestSerializablePrincipal.java
deleted file mode 100644
index 4c0f916388..0000000000
--- a/java/org/apache/catalina/ha/session/SerializablePrincipal.java
+++ /dev/null
@@ -1,213 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-
-package org.apache.catalina.ha.session;
-
-
-import java.io.IOException;
-import java.io.ObjectInput;
-import java.io.ObjectOutput;
-import java.io.Serializable;
-import java.security.Principal;
-import java.util.Arrays;
-import java.util.List;
-
-import org.apache.catalina.Realm;
-import org.apache.catalina.realm.GenericPrincipal;
-import org.apache.tomcat.util.res.StringManager;
-
-
-/**
- * Generic implementation of <strong>java.security.Principal</strong> that
- * is available for use by <code>Realm</code> implementations.
- * The GenericPrincipal does NOT implement serializable and I didn't want to
- * change that implementation hence I implemented this one instead.
- */
-public class SerializablePrincipal  implements java.io.Serializable {
-
-    private static final long serialVersionUID = 1L;
-
-    private static final org.apache.juli.logging.Log log =
-        org.apache.juli.logging.LogFactory.getLog(SerializablePrincipal.class);
-
-    /**
-     * The string manager for this package.
-     */
-    protected static final StringManager sm =
-        StringManager.getManager(Constants.Package);
-
-    // ----------------------------------------------------------- Constructors
-
-    /**
-     * Construct a new Principal, associated with the specified Realm, for the
-     * specified username and password, with the specified role names
-     * (as Strings).
-     *
-     * @param name The username of the user represented by this Principal
-     * @param password Credentials used to authenticate this user
-     * @param roles List of roles (must be Strings) possessed by this user
-     * @param userPrincipal The user principal to be exposed to applications
-     */
-    public SerializablePrincipal(String name, String password,
-                            List<String> roles, Principal userPrincipal) {
-
-        super();
-        this.name = name;
-        this.password = password;
-        if (roles == null) {
-            this.roles = new String[0];
-        } else {
-            this.roles = roles.toArray(new String[roles.size()]);
-            if (this.roles.length > 1)
-                Arrays.sort(this.roles);
-        }
-        if (userPrincipal instanceof Serializable) {
-            this.userPrincipal = userPrincipal;
-        } else {
-            this.userPrincipal = null;
-        }
-    }
-
-
-    // ------------------------------------------------------------- Properties
-
-
-    /**
-     * The username of the user represented by this Principal.
-     */
-    protected final String name;
-
-    public String getName() {
-        return (this.name);
-    }
-
-
-    /**
-     * The authentication credentials for the user represented by
-     * this Principal.
-     */
-    protected final String password;
-
-    public String getPassword() {
-        return (this.password);
-    }
-
-
-    /**
-     * The Realm with which this Principal is associated.
-     */
-    protected transient Realm realm = null;
-
-    public Realm getRealm() {
-        return (this.realm);
-    }
-
-    public void setRealm(Realm realm) {
-        this.realm = realm;
-    }
-
-
-    /**
-     * The set of roles associated with this user.
-     */
-    protected final String roles[];
-
-    public String[] getRoles() {
-        return (this.roles);
-    }
-
-
-    /**
-     * The user principal, if present.
-     */
-    protected final Principal userPrincipal;
-
-    // --------------------------------------------------------- Public Methods
-
-
-    /**
-     * Return a String representation of this object, which exposes only
-     * information that should be public.
-     */
-    @Override
-    public String toString() {
-
-        StringBuilder sb = new StringBuilder("SerializablePrincipal[");
-        sb.append(this.name);
-        sb.append("]");
-        return (sb.toString());
-
-    }
-
-    public static SerializablePrincipal createPrincipal(GenericPrincipal principal)
-    {
-        if ( principal==null) return null;
-        return new SerializablePrincipal(principal.getName(),
-                                         principal.getPassword(),
-                                         principal.getRoles()!=null?Arrays.asList(principal.getRoles()):null,
-                                         principal.getUserPrincipal()!=principal?principal.getUserPrincipal():null);
-    }
-
-    public GenericPrincipal getPrincipal()
-    {
-        return new GenericPrincipal(name, password,
-                getRoles()!=null?Arrays.asList(getRoles()):null,
-                userPrincipal);
-    }
-
-    public static GenericPrincipal readPrincipal(ObjectInput in)
-            throws IOException, ClassNotFoundException {
-        String name = in.readUTF();
-        boolean hasPwd = in.readBoolean();
-        String pwd = null;
-        if ( hasPwd ) pwd = in.readUTF();
-        int size = in.readInt();
-        String[] roles = new String[size];
-        for ( int i=0; i<size; i++ ) roles[i] = in.readUTF();
-        Principal userPrincipal = null;
-        boolean hasUserPrincipal = in.readBoolean();
-        if (hasUserPrincipal) {
-            try {
-                userPrincipal = (Principal) in.readObject();
-            } catch (ClassNotFoundException e) {
-                log.error(sm.getString(
-                        "serializablePrincipal.readPrincipal.cnfe"), e);
-                throw e;
-            }
-        }
-        return new GenericPrincipal(name,pwd,Arrays.asList(roles),
-                userPrincipal);
-    }
-
-    public static void writePrincipal(GenericPrincipal p, ObjectOutput out)
-            throws IOException {
-        out.writeUTF(p.getName());
-        out.writeBoolean(p.getPassword()!=null);
-        if ( p.getPassword()!= null ) out.writeUTF(p.getPassword());
-        String[] roles = p.getRoles();
-        if ( roles == null ) roles = new String[0];
-        out.writeInt(roles.length);
-        for ( int i=0; i<roles.length; i++ ) out.writeUTF(roles[i]);
-        boolean hasUserPrincipal = (p != p.getUserPrincipal() &&
-                p.getUserPrincipal() instanceof Serializable);
-        out.writeBoolean(hasUserPrincipal);
-        if (hasUserPrincipal) out.writeObject(p.getUserPrincipal());
-    }
-
-
-}

==================================================
TesterPrincipal.java
deleted file mode 100644
index 0bb9fb676d..0000000000
--- a/test/org/apache/catalina/ha/session/TestSerializablePrincipal.java
+++ /dev/null
@@ -1,123 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package org.apache.catalina.ha.session;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotSame;
-import static org.junit.Assert.fail;
-
-import org.junit.Test;
-
-import org.apache.catalina.realm.GenericPrincipal;
-
-
-public class TestSerializablePrincipal  {
-
-    /**
-     * Simple serialization / de-serialization test for bug 43840.
-     */
-    @SuppressWarnings("null")
-    @Test
-    public void testWriteReadPrincipal() {
-
-        File tempDir = new File(System.getProperty("tomcat.test.temp", "output/tmp"));
-        if (!tempDir.mkdirs() && !tempDir.isDirectory()) {
-            fail("Unable to create temporary directory for test");
-        }
-
-        // Create the Principal to serialize
-        List<String> roles = new ArrayList<>();
-        roles.add("RoleA");
-        roles.add("RoleB");
-        TesterPrincipal tpOriginal = new TesterPrincipal("inner");
-        GenericPrincipal gpOriginal =
-            new GenericPrincipal("usr", "pwd", roles, tpOriginal);
-
-        // Get a temporary file to use for the serialization test
-        File file = null;
-        try {
-            file = File.createTempFile("ser", null, tempDir);
-        } catch (IOException e) {
-            e.printStackTrace();
-            fail("ioe creating temporary file");
-        }
-
-        GenericPrincipal gpNew = null;
-        try {
-            // Do the serialization
-            try (FileOutputStream fos = new FileOutputStream(file);
-                    ObjectOutputStream oos = new ObjectOutputStream(fos)) {
-                SerializablePrincipal.writePrincipal(gpOriginal, oos);
-                oos.close();
-            } catch (FileNotFoundException e) {
-                e.printStackTrace();
-                fail("fnfe creating object output stream");
-            } catch (IOException e) {
-                e.printStackTrace();
-                fail("ioe serializing principal");
-            }
-
-            // De-serialize the Principal
-            try (FileInputStream fis = new FileInputStream(file);
-                    ObjectInputStream ois = new ObjectInputStream(fis)) {
-                gpNew = SerializablePrincipal.readPrincipal(ois);
-            } catch (FileNotFoundException e) {
-                e.printStackTrace();
-                fail("fnfe reading object output stream");
-            } catch (IOException e) {
-                e.printStackTrace();
-                fail("ioe de-serializing principal");
-            } catch (ClassNotFoundException e) {
-                e.printStackTrace();
-                fail("cnfe de-serializing principal");
-            }
-        } finally {
-            if (!file.delete()) {
-                System.out.println("Failed to delete " + file);
-            }
-        }
-
-        // Now test how similar original and de-serialized versions are
-        assertEquals("User names different", gpOriginal.getName(),
-                gpNew.getName());
-        assertEquals("Passwords different", gpOriginal.getPassword(),
-                gpNew.getPassword());
-        assertEquals("Number of roles different", gpOriginal.getRoles().length,
-                gpNew.getRoles().length);
-        for (int i = 0; i < gpOriginal.getRoles().length; i++) {
-            assertEquals("Role name index " + i + "different",
-                    gpOriginal.getRoles()[i], gpNew.getRoles()[i]);
-        }
-        // These are the key tests for bug 43840
-        assertNotSame("Inner principal not present", gpNew,
-                gpNew.getUserPrincipal());
-        assertEquals("Inner user names are different", tpOriginal.getName(),
-                gpNew.getUserPrincipal().getName());
-    }
-
-}

==================================================
