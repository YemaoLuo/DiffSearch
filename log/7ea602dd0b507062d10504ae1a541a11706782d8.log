7ea602dd0b507062d10504ae1a541a11706782d8
==================================================
Code clean-up for o.a.catalina.core
==================================================
Mark Emlyn
==================================================
Thu Jul 12 20:51:27 2012 +0000
==================================================
ApplicationContext.java
Code clean-up for o.a.catalina.core
 - Add final prompted by UCDetector
 - Java 7 use of <>

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1360933 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ApplicationContextFacade.java
index 16a0fadbe5..b8cc6a6cbd 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -132,21 +132,20 @@ public class ApplicationContext
     /**
      * The context attributes for this context.
      */
-    protected Map<String,Object> attributes =
-        new ConcurrentHashMap<String,Object>();
+    protected Map<String,Object> attributes = new ConcurrentHashMap<>();
 
 
     /**
      * List of read only attributes for this context.
      */
-    private Map<String,String> readOnlyAttributes =
-        new ConcurrentHashMap<String,String>();
+    private final Map<String,String> readOnlyAttributes =
+            new ConcurrentHashMap<>();
 
 
     /**
      * The Context instance with which we are associated.
      */
-    private StandardContext context = null;
+    private final StandardContext context;
 
 
     /**
@@ -163,14 +162,14 @@ public class ApplicationContext
     /**
      * The facade around this object.
      */
-    private ServletContext facade = new ApplicationContextFacade(this);
+    private final ServletContext facade = new ApplicationContextFacade(this);
 
 
     /**
      * The merged context initialization parameters for this Context.
      */
     private final ConcurrentHashMap<String,String> parameters =
-        new ConcurrentHashMap<String,String>();
+            new ConcurrentHashMap<>();
 
 
     /**
@@ -183,14 +182,13 @@ public class ApplicationContext
     /**
      * Thread local data used during request dispatch.
      */
-    private ThreadLocal<DispatchData> dispatchData =
-        new ThreadLocal<DispatchData>();
+    private final ThreadLocal<DispatchData> dispatchData = new ThreadLocal<>();
 
 
     /**
      * Session Cookie config
      */
-    private SessionCookieConfig sessionCookieConfig =
+    private final SessionCookieConfig sessionCookieConfig =
         new ApplicationSessionCookieConfig();
 
     /**
@@ -230,7 +228,7 @@ public class ApplicationContext
      */
     @Override
     public Enumeration<String> getAttributeNames() {
-        Set<String> names = new HashSet<String>();
+        Set<String> names = new HashSet<>();
         names.addAll(attributes.keySet());
         return Collections.enumeration(names);
     }
@@ -617,7 +615,7 @@ public class ApplicationContext
     private Set<String> getResourcePathsInternal(DirContext resources,
             String path) {
 
-        ResourceSet<String> set = new ResourceSet<String>();
+        ResourceSet<String> set = new ResourceSet<>();
         try {
             listCollectionPaths(set, resources, path);
         } catch (NamingException e) {
@@ -971,7 +969,6 @@ public class ApplicationContext
     public <T extends Filter> T createFilter(Class<T> c)
     throws ServletException {
         try {
-            @SuppressWarnings("unchecked")
             T filter = (T) context.getInstanceManager().newInstance(c.getName());
             return filter;
         } catch (IllegalAccessException e) {
@@ -1116,7 +1113,6 @@ public class ApplicationContext
     public <T extends Servlet> T createServlet(Class<T> c)
     throws ServletException {
         try {
-            @SuppressWarnings("unchecked")
             T servlet = (T) context.getInstanceManager().newInstance(c.getName());
             context.dynamicServletCreated(servlet);
             return servlet;
@@ -1348,7 +1344,6 @@ public class ApplicationContext
     public <T extends EventListener> T createListener(Class<T> c)
             throws ServletException {
         try {
-            @SuppressWarnings("unchecked")
             T listener =
                 (T) context.getInstanceManager().newInstance(c.getName());
             if (listener instanceof ServletContextListener ||
@@ -1439,8 +1434,7 @@ public class ApplicationContext
 
     @Override
     public Map<String, ? extends FilterRegistration> getFilterRegistrations() {
-        Map<String, ApplicationFilterRegistration> result =
-            new HashMap<String, ApplicationFilterRegistration>();
+        Map<String, ApplicationFilterRegistration> result = new HashMap<>();
 
         FilterDef[] filterDefs = context.findFilterDefs();
         for (FilterDef filterDef : filterDefs) {
@@ -1460,8 +1454,7 @@ public class ApplicationContext
 
     @Override
     public Map<String, ? extends ServletRegistration> getServletRegistrations() {
-        Map<String, ApplicationServletRegistration> result =
-            new HashMap<String, ApplicationServletRegistration>();
+        Map<String, ApplicationServletRegistration> result = new HashMap<>();
 
         Container[] wrappers = context.findChildren();
         for (Container wrapper : wrappers) {
@@ -1485,7 +1478,7 @@ public class ApplicationContext
     protected void clearAttributes() {
 
         // Create list of attributes to be removed
-        ArrayList<String> list = new ArrayList<String>();
+        ArrayList<String> list = new ArrayList<>();
         Iterator<String> iter = attributes.keySet().iterator();
         while (iter.hasNext()) {
             list.add(iter.next());

==================================================
ApplicationDispatcher.java
index 38ca30c0fe..c822d829d6 100644
--- a/java/org/apache/catalina/core/ApplicationContextFacade.java
+++ b/java/org/apache/catalina/core/ApplicationContextFacade.java
@@ -64,13 +64,13 @@ public class ApplicationContextFacade implements ServletContext {
     /**
      * Cache Class object used for reflection.
      */
-    private HashMap<String,Class<?>[]> classCache;
+    private final HashMap<String,Class<?>[]> classCache;
 
 
     /**
      * Cache method object.
      */
-    private HashMap<String,Method> objectCache;
+    private final HashMap<String,Method> objectCache;
 
 
     // ----------------------------------------------------------- Constructors
@@ -86,8 +86,8 @@ public class ApplicationContextFacade implements ServletContext {
         super();
         this.context = context;
 
-        classCache = new HashMap<String,Class<?>[]>();
-        objectCache = new HashMap<String,Method>();
+        classCache = new HashMap<>();
+        objectCache = new HashMap<>();
         initClassCache();
     }
 
@@ -127,7 +127,7 @@ public class ApplicationContextFacade implements ServletContext {
     /**
      * Wrapped application context.
      */
-    private ApplicationContext context = null;
+    private final ApplicationContext context;
 
 
     // ------------------------------------------------- ServletContext Methods

==================================================
ApplicationFilterChain.java
index 11eda0fbc1..f5f2882b74 100644
--- a/java/org/apache/catalina/core/ApplicationDispatcher.java
+++ b/java/org/apache/catalina/core/ApplicationDispatcher.java
@@ -88,8 +88,8 @@ final class ApplicationDispatcher
 
     protected class PrivilegedForward
             implements PrivilegedExceptionAction<Void> {
-        private ServletRequest request;
-        private ServletResponse response;
+        private final ServletRequest request;
+        private final ServletResponse response;
 
         PrivilegedForward(ServletRequest request, ServletResponse response)
         {
@@ -106,8 +106,8 @@ final class ApplicationDispatcher
 
     protected class PrivilegedInclude implements
             PrivilegedExceptionAction<Void> {
-        private ServletRequest request;
-        private ServletResponse response;
+        private final ServletRequest request;
+        private final ServletResponse response;
 
         PrivilegedInclude(ServletRequest request, ServletResponse response)
         {
@@ -223,37 +223,37 @@ final class ApplicationDispatcher
     /**
      * The Context this RequestDispatcher is associated with.
      */
-    private Context context = null;
+    private final Context context;
 
 
     /**
      * The servlet name for a named dispatcher.
      */
-    private String name = null;
+    private final String name;
 
 
     /**
      * The extra path information for this RequestDispatcher.
      */
-    private String pathInfo = null;
+    private final String pathInfo;
 
 
     /**
      * The query string parameters for this RequestDispatcher.
      */
-    private String queryString = null;
+    private final String queryString;
 
 
     /**
      * The request URI for this RequestDispatcher.
      */
-    private String requestURI = null;
+    private final String requestURI;
 
 
     /**
      * The servlet path for this RequestDispatcher.
      */
-    private String servletPath = null;
+    private final String servletPath;
 
 
     /**
@@ -267,14 +267,14 @@ final class ApplicationDispatcher
      * The InstanceSupport instance associated with our Wrapper (used to
      * send "before dispatch" and "after dispatch" events.
      */
-    private InstanceSupport support = null;
+    private final InstanceSupport support;
 
 
     /**
      * The Wrapper associated with the resource that will be forwarded to
      * or included.
      */
-    private Wrapper wrapper = null;
+    private final Wrapper wrapper;
 
 
     // --------------------------------------------------------- Public Methods

==================================================
ApplicationFilterConfig.java
index 3394875045..383916f385 100644
--- a/java/org/apache/catalina/core/ApplicationFilterChain.java
+++ b/java/org/apache/catalina/core/ApplicationFilterChain.java
@@ -62,8 +62,8 @@ final class ApplicationFilterChain implements FilterChain, CometFilterChain {
 
     static {
         if (ApplicationDispatcher.WRAP_SAME_OBJECT) {
-            lastServicedRequest = new ThreadLocal<ServletRequest>();
-            lastServicedResponse = new ThreadLocal<ServletResponse>();
+            lastServicedRequest = new ThreadLocal<>();
+            lastServicedResponse = new ThreadLocal<>();
         } else {
             lastServicedRequest = null;
             lastServicedResponse = null;
@@ -136,30 +136,28 @@ final class ApplicationFilterChain implements FilterChain, CometFilterChain {
      * Static class array used when the SecurityManager is turned on and
      * <code>doFilter</code> is invoked.
      */
-    private static Class<?>[] classType = new Class[]{ServletRequest.class,
-                                                      ServletResponse.class,
-                                                      FilterChain.class};
+    private static final Class<?>[] classType = new Class[]{
+        ServletRequest.class, ServletResponse.class, FilterChain.class};
 
     /**
      * Static class array used when the SecurityManager is turned on and
      * <code>service</code> is invoked.
      */
-    private static Class<?>[] classTypeUsedInService = new Class[]{
-                                                         ServletRequest.class,
-                                                         ServletResponse.class};
+    private static final Class<?>[] classTypeUsedInService = new Class[]{
+        ServletRequest.class, ServletResponse.class};
 
     /**
      * Static class array used when the SecurityManager is turned on and
      * <code>doFilterEvent</code> is invoked.
      */
-    private static Class<?>[] cometClassType =
+    private static final Class<?>[] cometClassType =
         new Class[]{ CometEvent.class, CometFilterChain.class};
 
     /**
      * Static class array used when the SecurityManager is turned on and
      * <code>event</code> is invoked.
      */
-    private static Class<?>[] classTypeUsedInEvent =
+    private static final Class<?>[] classTypeUsedInEvent =
         new Class[] { CometEvent.class };
 
 

==================================================
ApplicationFilterRegistration.java
index 5fa55a8261..d330dc88e0 100644
--- a/java/org/apache/catalina/core/ApplicationFilterConfig.java
+++ b/java/org/apache/catalina/core/ApplicationFilterConfig.java
@@ -115,7 +115,7 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
     /**
      * The Context with which we are associated.
      */
-    private transient Context context = null;
+    private final transient Context context;
 
 
     /**

==================================================
ApplicationHttpRequest.java
index f60e53cd5e..7d504cfc01 100644
--- a/java/org/apache/catalina/core/ApplicationFilterRegistration.java
+++ b/java/org/apache/catalina/core/ApplicationFilterRegistration.java
@@ -41,8 +41,8 @@ public class ApplicationFilterRegistration
     private static final StringManager sm =
       StringManager.getManager(Constants.Package);
 
-    private FilterDef filterDef;
-    private Context context;
+    private final FilterDef filterDef;
+    private final Context context;
 
     public ApplicationFilterRegistration(FilterDef filterDef,
             Context context) {
@@ -112,7 +112,7 @@ public class ApplicationFilterRegistration
 
     @Override
     public Collection<String> getServletNameMappings() {
-        Collection<String> result = new HashSet<String>();
+        Collection<String> result = new HashSet<>();
 
         FilterMap[] filterMaps = context.findFilterMaps();
 
@@ -128,7 +128,7 @@ public class ApplicationFilterRegistration
 
     @Override
     public Collection<String> getUrlPatternMappings() {
-        Collection<String> result = new HashSet<String>();
+        Collection<String> result = new HashSet<>();
 
         FilterMap[] filterMaps = context.findFilterMaps();
 
@@ -154,7 +154,7 @@ public class ApplicationFilterRegistration
 
     @Override
     public Map<String, String> getInitParameters() {
-        ParameterMap<String,String> result = new ParameterMap<String,String>();
+        ParameterMap<String,String> result = new ParameterMap<>();
         result.putAll(filterDef.getParameterMap());
         result.setLocked(true);
         return result;
@@ -184,7 +184,7 @@ public class ApplicationFilterRegistration
     @Override
     public Set<String> setInitParameters(Map<String, String> initParameters) {
 
-        Set<String> conflicts = new HashSet<String>();
+        Set<String> conflicts = new HashSet<>();
 
         for (Map.Entry<String, String> entry : initParameters.entrySet()) {
             if (entry.getKey() == null || entry.getValue() == null) {

==================================================
ApplicationJspConfigDescriptor.java
index a42b507c8c..fb1970b2ef 100644
--- a/java/org/apache/catalina/core/ApplicationHttpRequest.java
+++ b/java/org/apache/catalina/core/ApplicationHttpRequest.java
@@ -105,7 +105,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
     /**
      * The context for this request.
      */
-    protected Context context = null;
+    protected final Context context;
 
 
     /**
@@ -118,7 +118,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      * If this request is cross context, since this changes session access
      * behavior.
      */
-    protected boolean crossContext = false;
+    protected final boolean crossContext;
 
 
     /**
@@ -185,7 +185,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
     /**
      * Special attributes.
      */
-    protected Object[] specialAttributes = new Object[specials.length];
+    protected final Object[] specialAttributes = new Object[specials.length];
 
 
     // ------------------------------------------------- ServletRequest Methods
@@ -625,9 +625,10 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      */
     Map<String, String[]> copyMap(Map<String, String[]> orig) {
 
-        if (orig == null)
-            return (new HashMap<String, String[]>());
-        HashMap<String, String[]> dest = new HashMap<String, String[]>();
+        if (orig == null) {
+            return (new HashMap<>());
+        }
+        HashMap<String, String[]> dest = new HashMap<>();
 
         for (Map.Entry<String, String[]> entry : orig.entrySet()) {
             dest.put(entry.getKey(), entry.getValue());
@@ -734,7 +735,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
             return;
         }
 
-        parameters = new HashMap<String, String[]>();
+        parameters = new HashMap<>();
         parameters = copyMap(getRequest().getParameterMap());
         mergeParameters();
         parsedParams = true;
@@ -826,7 +827,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
      */
     protected String[] mergeValues(Object values1, Object values2) {
 
-        ArrayList<Object> results = new ArrayList<Object>();
+        ArrayList<Object> results = new ArrayList<>();
 
         if (values1 == null) {
             // Skip - nothing to merge
@@ -870,7 +871,7 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
         if ((queryParamString == null) || (queryParamString.length() < 1))
             return;
 
-        HashMap<String, String[]> queryParameters = new HashMap<String, String[]>();
+        HashMap<String, String[]> queryParameters = new HashMap<>();
         String encoding = getCharacterEncoding();
         if (encoding == null)
             encoding = "ISO-8859-1";
@@ -902,17 +903,19 @@ class ApplicationHttpRequest extends HttpServletRequestWrapper {
     protected class AttributeNamesEnumerator implements Enumeration<String> {
 
         protected int pos = -1;
-        protected int last = -1;
-        protected Enumeration<String> parentEnumeration = null;
+        protected final int last;
+        protected final Enumeration<String> parentEnumeration;
         protected String next = null;
 
         public AttributeNamesEnumerator() {
+            int last = -1;
             parentEnumeration = getRequest().getAttributeNames();
             for (int i = 0; i < specialAttributes.length; i++) {
                 if (getAttribute(specials[i]) != null) {
                     last = i;
                 }
             }
+            this.last = last;
         }
 
         @Override

==================================================
ApplicationJspPropertyGroupDescriptor.java
index fbd1a7a7c0..44fb4c75eb 100644
--- a/java/org/apache/catalina/core/ApplicationJspConfigDescriptor.java
+++ b/java/org/apache/catalina/core/ApplicationJspConfigDescriptor.java
@@ -27,11 +27,10 @@ import javax.servlet.descriptor.TaglibDescriptor;
 
 public class ApplicationJspConfigDescriptor implements JspConfigDescriptor {
 
-    private Collection<JspPropertyGroupDescriptor> jspPropertyGroups =
-        new LinkedHashSet<JspPropertyGroupDescriptor>();
+    private final Collection<JspPropertyGroupDescriptor> jspPropertyGroups =
+        new LinkedHashSet<>();
 
-    private Collection<TaglibDescriptor> taglibs =
-        new HashSet<TaglibDescriptor>();
+    private final Collection<TaglibDescriptor> taglibs = new HashSet<>();
 
     @Override
     public Collection<JspPropertyGroupDescriptor> getJspPropertyGroups() {

==================================================
ApplicationPart.java
index 41c174bea7..c3fcab2e34 100644
--- a/java/org/apache/catalina/core/ApplicationJspPropertyGroupDescriptor.java
+++ b/java/org/apache/catalina/core/ApplicationJspPropertyGroupDescriptor.java
@@ -28,11 +28,7 @@ import org.apache.catalina.deploy.JspPropertyGroup;
 public class ApplicationJspPropertyGroupDescriptor
         implements JspPropertyGroupDescriptor{
 
-    /**
-     * @deprecated  Will be made private in 8.0.x
-     */
-    @Deprecated
-    JspPropertyGroup jspPropertyGroup;
+    private final JspPropertyGroup jspPropertyGroup;
 
 
     public ApplicationJspPropertyGroupDescriptor(
@@ -164,7 +160,7 @@ public class ApplicationJspPropertyGroupDescriptor
 
     @Override
     public Collection<String> getUrlPatterns() {
-        Collection<String> result = new HashSet<String>();
+        Collection<String> result = new HashSet<>();
 
         if (jspPropertyGroup.getUrlPattern() != null) {
             result.add(jspPropertyGroup.getUrlPattern());

==================================================
ApplicationRequest.java
index ac597751b0..7484ac2c0a 100644
--- a/java/org/apache/catalina/core/ApplicationPart.java
+++ b/java/org/apache/catalina/core/ApplicationPart.java
@@ -42,8 +42,8 @@ import org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
  */
 public class ApplicationPart implements Part {
 
-    private FileItem fileItem;
-    private MultipartConfigElement mce;
+    private final FileItem fileItem;
+    private final MultipartConfigElement mce;
 
     public ApplicationPart(FileItem fileItem, MultipartConfigElement mce) {
         this.fileItem = fileItem;
@@ -71,7 +71,7 @@ public class ApplicationPart implements Part {
     @Override
     public Collection<String> getHeaderNames() {
         if (fileItem instanceof DiskFileItem) {
-            HashSet<String> headerNames = new HashSet<String>();
+            HashSet<String> headerNames = new HashSet<>();
             Iterator<String> iter =
                 ((DiskFileItem) fileItem).getHeaders().getHeaderNames();
             while (iter.hasNext()) {
@@ -85,7 +85,7 @@ public class ApplicationPart implements Part {
     @Override
     public Collection<String> getHeaders(String name) {
         if (fileItem instanceof DiskFileItem) {
-            HashSet<String> headers = new HashSet<String>();
+            HashSet<String> headers = new HashSet<>();
             Iterator<String> iter =
                 ((DiskFileItem) fileItem).getHeaders().getHeaders(name);
             while (iter.hasNext()) {

==================================================
ApplicationServletRegistration.java
index 58c327f079..d702bcb16c 100644
--- a/java/org/apache/catalina/core/ApplicationRequest.java
+++ b/java/org/apache/catalina/core/ApplicationRequest.java
@@ -89,8 +89,7 @@ class ApplicationRequest extends ServletRequestWrapper {
      * The request attributes for this request.  This is initialized from the
      * wrapped request, but updates are allowed.
      */
-    protected HashMap<String, Object> attributes =
-        new HashMap<String, Object>();
+    protected final HashMap<String, Object> attributes = new HashMap<>();
 
 
     // ------------------------------------------------- ServletRequest Methods

==================================================
ApplicationTaglibDescriptor.java
index 5a1af54d4a..e6d8e63b9e 100644
--- a/java/org/apache/catalina/core/ApplicationServletRegistration.java
+++ b/java/org/apache/catalina/core/ApplicationServletRegistration.java
@@ -42,8 +42,8 @@ public class ApplicationServletRegistration
     private static final StringManager sm =
       StringManager.getManager(Constants.Package);
 
-    private Wrapper wrapper;
-    private Context context;
+    private final Wrapper wrapper;
+    private final Context context;
 
     public ApplicationServletRegistration(Wrapper wrapper,
             Context context) {
@@ -64,7 +64,7 @@ public class ApplicationServletRegistration
 
     @Override
     public Map<String, String> getInitParameters() {
-        ParameterMap<String,String> result = new ParameterMap<String,String>();
+        ParameterMap<String,String> result = new ParameterMap<>();
 
         String[] parameterNames = wrapper.findInitParameters();
 
@@ -100,7 +100,7 @@ public class ApplicationServletRegistration
     @Override
     public Set<String> setInitParameters(Map<String, String> initParameters) {
 
-        Set<String> conflicts = new HashSet<String>();
+        Set<String> conflicts = new HashSet<>();
 
         for (Map.Entry<String, String> entry : initParameters.entrySet()) {
             if (entry.getKey() == null || entry.getValue() == null) {
@@ -168,7 +168,7 @@ public class ApplicationServletRegistration
             return Collections.emptySet();
         }
 
-        Set<String> conflicts = new HashSet<String>();
+        Set<String> conflicts = new HashSet<>();
 
         for (String urlPattern : urlPatterns) {
             String wrapperName = context.findServletMapping(urlPattern);
@@ -197,7 +197,7 @@ public class ApplicationServletRegistration
     @Override
     public Collection<String> getMappings() {
 
-        Set<String> result = new HashSet<String>();
+        Set<String> result = new HashSet<>();
         String servletName = wrapper.getName();
 
         String[] urlPatterns = context.findServletMappings();

==================================================
DefaultInstanceManager.java
index 7e0c2ca9c9..4024eae202 100644
--- a/java/org/apache/catalina/core/ApplicationTaglibDescriptor.java
+++ b/java/org/apache/catalina/core/ApplicationTaglibDescriptor.java
@@ -21,8 +21,8 @@ import javax.servlet.descriptor.TaglibDescriptor;
 
 public class ApplicationTaglibDescriptor implements TaglibDescriptor {
 
-    private String location;
-    private String uri;
+    private final String location;
+    private final String uri;
 
     public ApplicationTaglibDescriptor(String location, String uri) {
         this.location = location;

==================================================
NamingContextListener.java
index be6db8e3ac..9a25313f08 100644
--- a/java/org/apache/catalina/core/DefaultInstanceManager.java
+++ b/java/org/apache/catalina/core/DefaultInstanceManager.java
@@ -72,13 +72,13 @@ public class DefaultInstanceManager implements InstanceManager {
     private final Map<String, Map<String, String>> injectionMap;
     protected final ClassLoader classLoader;
     protected final ClassLoader containerClassLoader;
-    protected boolean privileged;
-    protected boolean ignoreAnnotations;
+    protected final boolean privileged;
+    protected final boolean ignoreAnnotations;
     private final Properties restrictedFilters = new Properties();
     private final Properties restrictedListeners = new Properties();
     private final Properties restrictedServlets = new Properties();
     private final Map<Class<?>, AnnotationCacheEntry[]> annotationCache =
-        new WeakHashMap<Class<?>, AnnotationCacheEntry[]>();
+        new WeakHashMap<>();
 
     public DefaultInstanceManager(Context context, Map<String, Map<String, String>> injectionMap, org.apache.catalina.Context catalinaContext, ClassLoader containerClassLoader) {
         classLoader = catalinaContext.getLoader().getClassLoader();
@@ -156,7 +156,7 @@ public class DefaultInstanceManager implements InstanceManager {
     }
 
     private Map<String, String> assembleInjectionsFromClassHierarchy(Class<?> clazz) {
-        Map<String, String> injections = new HashMap<String, String>();
+        Map<String, String> injections = new HashMap<>();
         Map<String, String> currentInjections = null;
         while (clazz != null) {
             currentInjections = this.injectionMap.get(clazz.getName());
@@ -281,7 +281,7 @@ public class DefaultInstanceManager implements InstanceManager {
             }
             if (annotationsArray == null) {
                 if (annotations == null) {
-                    annotations = new ArrayList<AnnotationCacheEntry>();
+                    annotations = new ArrayList<>();
                 } else {
                     annotations.clear();
                 }

==================================================
StandardContext.java
index 298f24db55..4ab75ba621 100644
--- a/java/org/apache/catalina/core/NamingContextListener.java
+++ b/java/org/apache/catalina/core/NamingContextListener.java
@@ -135,8 +135,7 @@ public class NamingContextListener
     /**
      * Objectnames hashtable.
      */
-    protected HashMap<String, ObjectName> objectNames =
-        new HashMap<String, ObjectName>();
+    protected HashMap<String, ObjectName> objectNames = new HashMap<>();
 
 
     /**
@@ -227,7 +226,7 @@ public class NamingContextListener
             if (initialized)
                 return;
 
-            Hashtable<String, Object> contextEnv = new Hashtable<String, Object>();
+            Hashtable<String, Object> contextEnv = new Hashtable<>();
             try {
                 namingContext = new NamingContext(contextEnv, getName());
             } catch (NamingException e) {

==================================================
StandardEngine.java
index 544b60855d..54de7add2b 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -253,7 +253,7 @@ public class StandardContext extends ContainerBase
      * The ordered set of ServletContainerInitializers for this web application.
      */
     private Map<ServletContainerInitializer,Set<Class<?>>> initializers =
-        new LinkedHashMap<ServletContainerInitializer,Set<Class<?>>>();
+        new LinkedHashMap<>();
 
 
     /**
@@ -376,8 +376,7 @@ public class StandardContext extends ContainerBase
      * The exception pages for this web application, keyed by fully qualified
      * class name of the Java exception.
      */
-    private HashMap<String, ErrorPage> exceptionPages =
-        new HashMap<String, ErrorPage>();
+    private HashMap<String, ErrorPage> exceptionPages = new HashMap<>();
 
 
     /**
@@ -385,15 +384,14 @@ public class StandardContext extends ContainerBase
      * have initialized, keyed by filter name.
      */
     private HashMap<String, ApplicationFilterConfig> filterConfigs =
-        new HashMap<String, ApplicationFilterConfig>();
+            new HashMap<>();
 
 
     /**
      * The set of filter definitions for this application, keyed by
      * filter name.
      */
-    private HashMap<String, FilterDef> filterDefs =
-        new HashMap<String, FilterDef>();
+    private HashMap<String, FilterDef> filterDefs = new HashMap<>();
 
 
     /**
@@ -459,21 +457,20 @@ public class StandardContext extends ContainerBase
      * The message destinations for this web application.
      */
     private HashMap<String, MessageDestination> messageDestinations =
-        new HashMap<String, MessageDestination>();
+        new HashMap<>();
 
 
     /**
      * The MIME mappings for this web application, keyed by extension.
      */
-    private HashMap<String, String> mimeMappings =
-        new HashMap<String, String>();
+    private HashMap<String, String> mimeMappings = new HashMap<>();
 
 
     /**
      * The context initialization parameters for this web application,
      * keyed by name.
      */
-    private HashMap<String, String> parameters = new HashMap<String, String>();
+    private HashMap<String, String> parameters = new HashMap<>();
 
 
     /**
@@ -534,8 +531,7 @@ public class StandardContext extends ContainerBase
      * The security role mappings for this application, keyed by role
      * name (as used within the application).
      */
-    private HashMap<String, String> roleMappings =
-        new HashMap<String, String>();
+    private HashMap<String, String> roleMappings = new HashMap<>();
 
 
     /**
@@ -550,8 +546,7 @@ public class StandardContext extends ContainerBase
      * The servlet mappings for this web application, keyed by
      * matching pattern.
      */
-    private HashMap<String, String> servletMappings =
-        new HashMap<String, String>();
+    private HashMap<String, String> servletMappings = new HashMap<>();
 
     private final Object servletMappingsLock = new Object();
 
@@ -571,8 +566,7 @@ public class StandardContext extends ContainerBase
      * HTTP status code (as an Integer). Note status code zero is used for the
      * default error page.
      */
-    private HashMap<Integer, ErrorPage> statusPages =
-        new HashMap<Integer, ErrorPage>();
+    private HashMap<Integer, ErrorPage> statusPages = new HashMap<>();
 
 
     /**
@@ -828,7 +822,7 @@ public class StandardContext extends ContainerBase
     private JspConfigDescriptor jspConfigDescriptor =
         new ApplicationJspConfigDescriptor();
 
-    private Set<String> resourceOnlyServlets = new HashSet<String>();
+    private Set<String> resourceOnlyServlets = new HashSet<>();
 
     private String webappVersion = "";
 
@@ -840,7 +834,7 @@ public class StandardContext extends ContainerBase
      * Servlets created via {@link ApplicationContext#createServlet(Class)} for
      * tracking purposes.
      */
-    private Set<Servlet> createdServlets = new HashSet<Servlet>();
+    private Set<Servlet> createdServlets = new HashSet<>();
 
     private boolean preemptiveAuthentication = false;
 
@@ -3557,8 +3551,7 @@ public class StandardContext extends ContainerBase
      *
      * @param name Name of the desired message destination ref
      */
-    public MessageDestinationRef
-        findMessageDestinationRef(String name) {
+    public MessageDestinationRef findMessageDestinationRef(String name) {
 
         return namingResources.findMessageDestinationRef(name);
 
@@ -3570,8 +3563,7 @@ public class StandardContext extends ContainerBase
      * application.  If none have been defined, a zero-length array
      * is returned.
      */
-    public MessageDestinationRef[]
-        findMessageDestinationRefs() {
+    public MessageDestinationRef[] findMessageDestinationRefs() {
 
         return namingResources.findMessageDestinationRefs();
 
@@ -4698,8 +4690,8 @@ public class StandardContext extends ContainerBase
         }
 
         // Sort listeners in two arrays
-        ArrayList<Object> eventListeners = new ArrayList<Object>();
-        ArrayList<Object> lifecycleListeners = new ArrayList<Object>();
+        ArrayList<Object> eventListeners = new ArrayList<>();
+        ArrayList<Object> lifecycleListeners = new ArrayList<>();
         for (int i = 0; i < results.length; i++) {
             if ((results[i] instanceof ServletContextAttributeListener)
                 || (results[i] instanceof ServletRequestAttributeListener)
@@ -4847,7 +4839,7 @@ public class StandardContext extends ContainerBase
 
         boolean ok = true;
 
-        Hashtable<String, String> env = new Hashtable<String, String>();
+        Hashtable<String, String> env = new Hashtable<>();
         if (getParent() != null)
             env.put(ProxyDirContext.HOST, getParent().getName());
         env.put(ProxyDirContext.CONTEXT, getName());
@@ -4961,8 +4953,7 @@ public class StandardContext extends ContainerBase
     public void loadOnStartup(Container children[]) {
 
         // Collect "load on startup" servlets that need to be initialized
-        TreeMap<Integer, ArrayList<Wrapper>> map =
-            new TreeMap<Integer, ArrayList<Wrapper>>();
+        TreeMap<Integer, ArrayList<Wrapper>> map = new TreeMap<>();
         for (int i = 0; i < children.length; i++) {
             Wrapper wrapper = (Wrapper) children[i];
             int loadOnStartup = wrapper.getLoadOnStartup();
@@ -4971,7 +4962,7 @@ public class StandardContext extends ContainerBase
             Integer key = Integer.valueOf(loadOnStartup);
             ArrayList<Wrapper> list = map.get(key);
             if (list == null) {
-                list = new ArrayList<Wrapper>();
+                list = new ArrayList<>();
                 map.put(key, list);
             }
             list.add(wrapper);
@@ -5329,7 +5320,7 @@ public class StandardContext extends ContainerBase
     }
 
     private Map<String, Map<String, String>> buildInjectionMap(NamingResources namingResources) {
-        Map<String, Map<String, String>> injectionMap = new HashMap<String, Map<String, String>>();
+        Map<String, Map<String, String>> injectionMap = new HashMap<>();
         for (Injectable resource: namingResources.findLocalEjbs()) {
             addInjectionTarget(resource, injectionMap);
         }
@@ -5362,7 +5353,7 @@ public class StandardContext extends ContainerBase
                 String clazz = injectionTarget.getTargetClass();
                 Map<String, String> injections = injectionMap.get(clazz);
                 if (injections == null) {
-                    injections = new HashMap<String, String>();
+                    injections = new HashMap<>();
                     injectionMap.put(clazz, injections);
                 }
                 injections.put(injectionTarget.getTargetName(), jndiName);
@@ -5379,7 +5370,7 @@ public class StandardContext extends ContainerBase
      * the application parameters appropriately.
      */
     private void mergeParameters() {
-        Map<String,String> mergedParams = new HashMap<String,String>();
+        Map<String,String> mergedParams = new HashMap<>();
 
         String names[] = findParameters();
         for (int i = 0; i < names.length; i++) {
@@ -5696,7 +5687,7 @@ public class StandardContext extends ContainerBase
             ServletRegistration.Dynamic registration,
             ServletSecurityElement servletSecurityElement) {
 
-        Set<String> conflicts = new HashSet<String>();
+        Set<String> conflicts = new HashSet<>();
 
         Collection<String> urlPatterns = registration.getMappings();
         for (String urlPattern : urlPatterns) {
@@ -5845,7 +5836,7 @@ public class StandardContext extends ContainerBase
         if (parent == null) {
         namingContextName = getName();
         } else {
-        Stack<String> stk = new Stack<String>();
+        Stack<String> stk = new Stack<>();
         StringBuilder buff = new StringBuilder();
         while (parent != null) {
             stk.push(parent.getName());

==================================================
StandardHost.java
index a4d175a601..cbf4088b08 100644
--- a/java/org/apache/catalina/core/StandardEngine.java
+++ b/java/org/apache/catalina/core/StandardEngine.java
@@ -105,7 +105,7 @@ public class StandardEngine extends ContainerBase implements Engine {
      * the intended host and context.
      */
     private final AtomicReference<AccessLog> defaultAccessLog =
-        new AtomicReference<AccessLog>();
+        new AtomicReference<>();
 
     // ------------------------------------------------------------- Properties
 
@@ -416,9 +416,9 @@ public class StandardEngine extends ContainerBase implements Engine {
             implements PropertyChangeListener, LifecycleListener,
             ContainerListener {
 
-        private StandardEngine engine;
-        private Host host;
-        private Context context;
+        private final StandardEngine engine;
+        private final Host host;
+        private final Context context;
         private volatile boolean disabled = false;
 
         public AccessLogListener(StandardEngine engine, Host host,

==================================================
StandardPipeline.java
index 80bba9dbbf..40eee8732f 100644
--- a/java/org/apache/catalina/core/StandardHost.java
+++ b/java/org/apache/catalina/core/StandardHost.java
@@ -169,8 +169,8 @@ public class StandardHost extends ContainerBase implements Host {
       * Track the class loaders for the child web applications so memory leaks
       * can be detected.
       */
-     private Map<ClassLoader, String> childClassLoaders =
-         new WeakHashMap<ClassLoader, String>();
+     private final Map<ClassLoader, String> childClassLoaders =
+             new WeakHashMap<>();
 
 
      /**
@@ -713,7 +713,7 @@ public class StandardHost extends ContainerBase implements Host {
 
         System.gc();
 
-        List<String> result = new ArrayList<String>();
+        List<String> result = new ArrayList<>();
 
         for (Map.Entry<ClassLoader, String> entry :
                 childClassLoaders.entrySet()) {

==================================================
StandardServer.java
index cbcda62d0a..040baed8c9 100644
--- a/java/org/apache/catalina/core/StandardPipeline.java
+++ b/java/org/apache/catalina/core/StandardPipeline.java
@@ -369,7 +369,7 @@ public class StandardPipeline extends LifecycleBase
     @Override
     public Valve[] getValves() {
 
-        ArrayList<Valve> valveList = new ArrayList<Valve>();
+        ArrayList<Valve> valveList = new ArrayList<>();
         Valve current = first;
         if (current == null) {
             current = basic;
@@ -385,7 +385,7 @@ public class StandardPipeline extends LifecycleBase
 
     public ObjectName[] getValveObjectNames() {
 
-        ArrayList<ObjectName> valveList = new ArrayList<ObjectName>();
+        ArrayList<ObjectName> valveList = new ArrayList<>();
         Valve current = first;
         if (current == null) {
             current = basic;

==================================================
StandardService.java
index 03e55db454..3754733313 100644
--- a/java/org/apache/catalina/core/StandardServer.java
+++ b/java/org/apache/catalina/core/StandardServer.java
@@ -76,10 +76,10 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
         globalNamingResources.setContainer(this);
 
         if (isUseNaming()) {
-            if (namingContextListener == null) {
-                namingContextListener = new NamingContextListener();
-                addLifecycleListener(namingContextListener);
-            }
+            namingContextListener = new NamingContextListener();
+            addLifecycleListener(namingContextListener);
+        } else {
+            namingContextListener = null;
         }
 
     }
@@ -103,7 +103,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
     /**
      * The naming context listener for this web application.
      */
-    private NamingContextListener namingContextListener = null;
+    private final NamingContextListener namingContextListener;
 
 
     /**
@@ -146,7 +146,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
     /**
      * The property change support for this component.
      */
-    protected PropertyChangeSupport support = new PropertyChangeSupport(this);
+    protected final PropertyChangeSupport support = new PropertyChangeSupport(this);
 
     private volatile boolean stopAwait = false;
 

==================================================
StandardWrapper.java
index c243c30eb4..4aa926326d 100644
--- a/java/org/apache/catalina/core/StandardService.java
+++ b/java/org/apache/catalina/core/StandardService.java
@@ -73,7 +73,7 @@ public class StandardService extends LifecycleMBeanBase implements Service {
     /**
      * The property change support for this component.
      */
-    protected PropertyChangeSupport support = new PropertyChangeSupport(this);
+    protected final PropertyChangeSupport support = new PropertyChangeSupport(this);
 
 
     /**
@@ -84,7 +84,7 @@ public class StandardService extends LifecycleMBeanBase implements Service {
     /**
      *
      */
-    protected ArrayList<Executor> executors = new ArrayList<Executor>();
+    protected final ArrayList<Executor> executors = new ArrayList<>();
 
     /**
      * The Container associated with this Service.

==================================================
StandardWrapperFacade.java
index 3a3abac5c0..7bfc24cbd1 100644
--- a/java/org/apache/catalina/core/StandardWrapper.java
+++ b/java/org/apache/catalina/core/StandardWrapper.java
@@ -115,20 +115,19 @@ public class StandardWrapper extends ContainerBase
     /**
      * The broadcaster that sends j2ee notifications.
      */
-    protected NotificationBroadcasterSupport broadcaster = null;
+    protected final NotificationBroadcasterSupport broadcaster;
 
     /**
      * The count of allocations that are currently active (even if they
      * are for the same instance, as will be true on a non-STM servlet).
      */
-    protected AtomicInteger countAllocated = new AtomicInteger(0);
+    protected final AtomicInteger countAllocated = new AtomicInteger(0);
 
 
     /**
      * The facade associated with this wrapper.
      */
-    protected StandardWrapperFacade facade =
-        new StandardWrapperFacade(this);
+    protected final StandardWrapperFacade facade = new StandardWrapperFacade(this);
 
 
     /**
@@ -145,7 +144,7 @@ public class StandardWrapper extends ContainerBase
     /**
      * The support object for our instance listeners.
      */
-    protected InstanceSupport instanceSupport = new InstanceSupport(this);
+    protected final InstanceSupport instanceSupport = new InstanceSupport(this);
 
 
     /**
@@ -158,14 +157,14 @@ public class StandardWrapper extends ContainerBase
     /**
      * Mappings associated with the wrapper.
      */
-    protected ArrayList<String> mappings = new ArrayList<String>();
+    protected final ArrayList<String> mappings = new ArrayList<>();
 
 
     /**
      * The initialization parameters for this servlet, keyed by
      * parameter name.
      */
-    protected HashMap<String, String> parameters = new HashMap<String, String>();
+    protected HashMap<String, String> parameters = new HashMap<>();
 
 
     /**
@@ -173,7 +172,7 @@ public class StandardWrapper extends ContainerBase
      * used in the servlet.  The corresponding value is the role name of
      * the web application itself.
      */
-    protected HashMap<String, String> references = new HashMap<String, String>();
+    protected HashMap<String, String> references = new HashMap<>();
 
 
     /**
@@ -604,7 +603,7 @@ public class StandardWrapper extends ContainerBase
             return DEFAULT_SERVLET_METHODS;
         }
 
-        HashSet<String> allow = new HashSet<String>();
+        HashSet<String> allow = new HashSet<>();
         allow.add("TRACE");
         allow.add("OPTIONS");
 
@@ -1133,7 +1132,7 @@ public class StandardWrapper extends ContainerBase
 
             if (servlet instanceof SingleThreadModel) {
                 if (instancePool == null) {
-                    instancePool = new Stack<Servlet>();
+                    instancePool = new Stack<>();
                 }
                 singleThreadModel = true;
             }

==================================================
