8ff3a2671c3e4c9c2eecca61f30b2e4cce4c4573
==================================================
Add support for lambda expressions to the parser. The new nodes (the Ast*.java files) are just the auto-generated skeletons and some - if not all - will need some work before these new expression elements are fully implemented.
==================================================
Mark Emlyn
==================================================
Sat Jul 13 23:22:31 2013 +0000
==================================================
AstLambdaExpression.java
Add support for lambda expressions to the parser. The new nodes (the Ast*.java files) are just the auto-generated skeletons and some - if not all - will need some work before these new expression elements are fully implemented.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1502913 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AstLambdaExpressionOrInvocation.java
new file mode 100644
index 0000000000..89414a4217
--- /dev/null
+++ b/java/org/apache/el/parser/AstLambdaExpression.java
@@ -0,0 +1,26 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/* Generated By:JJTree: Do not edit this line. AstLambdaExpression.java Version 4.3 */
+package org.apache.el.parser;
+
+public class AstLambdaExpression extends SimpleNode {
+
+    public AstLambdaExpression(int id) {
+        super(id);
+    }
+}
+/* JavaCC - OriginalChecksum=071159eff10c8e15ec612c765ae4480a (do not edit this line) */

==================================================
AstLambdaParameters.java
new file mode 100644
index 0000000000..49746253db
--- /dev/null
+++ b/java/org/apache/el/parser/AstLambdaExpressionOrInvocation.java
@@ -0,0 +1,26 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/* Generated By:JJTree: Do not edit this line. AstLambdaExpressionOrInvocation.java Version 4.3 */
+package org.apache.el.parser;
+
+public
+class AstLambdaExpressionOrInvocation extends SimpleNode {
+  public AstLambdaExpressionOrInvocation(int id) {
+    super(id);
+  }
+}
+/* JavaCC - OriginalChecksum=6b3dd15b31540457a41bd55974037ed9 (do not edit this line) */

==================================================
ELParser.java
new file mode 100644
index 0000000000..74d7cb5576
--- /dev/null
+++ b/java/org/apache/el/parser/AstLambdaParameters.java
@@ -0,0 +1,26 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/* Generated By:JJTree: Do not edit this line. AstLambdaParameters.java Version 4.3 */
+package org.apache.el.parser;
+
+public
+class AstLambdaParameters extends SimpleNode {
+  public AstLambdaParameters(int id) {
+    super(id);
+  }
+}
+/* JavaCC - OriginalChecksum=a8c1609257dac59e41c43d6ed91072c6 (do not edit this line) */

==================================================
ELParserConstants.java
index 5bb5ae4b01..00488fa391 100644
--- a/java/org/apache/el/parser/ELParser.jjt
+++ b/java/org/apache/el/parser/ELParser.jjt
@@ -78,7 +78,7 @@ void LiteralExpression() #LiteralExpression : { Token t = null; }
  */
 void DeferredExpression() #DeferredExpression : {}
 {
-    <START_DEFERRED_EXPRESSION> Expression() <RCURL>
+    <START_DEFERRED_EXPRESSION> Expression() <RBRACE>
 }
 
 /*
@@ -87,12 +87,12 @@ void DeferredExpression() #DeferredExpression : {}
  */
 void DynamicExpression() #DynamicExpression : {}
 {
-    <START_DYNAMIC_EXPRESSION> Expression() <RCURL>
+    <START_DYNAMIC_EXPRESSION> Expression() <RBRACE>
 }
 
 /*
  * Expression
- * EL Expression Language Root, goes to Choice
+ * EL Expression Language Root
  */
 void Expression() : {}
 {
@@ -112,9 +112,38 @@ void Semicolon() : {}
  */
 void Assignment() : {}
 {
+    LOOKAHEAD(3) LambdaExpression() |
     Choice() ( LOOKAHEAD(2) <ASSIGN> Assignment() #Assign(2) )*
 }
 
+/*
+ * Lambda expression
+ */
+void LambdaExpression() #LambdaExpression : {}
+{
+    LambdaParameters() <ARROW> ( LOOKAHEAD(3) LambdaExpression() | Choice() )
+}
+
+/*
+ * Lambda parameters
+ */
+void LambdaParameters() #LambdaParameters : {}
+{
+    Identifier() | <LPAREN> ( Identifier() ( <COMMA> Identifier() )* )? <RPAREN>
+}
+
+/*
+ * Possible invocation of lambda expression. Invocations must be bracketed but
+ * being bracketed does not mean it is an invocation.
+ */
+void LambdaExpressionOrInvocation() #LambdaExpressionOrInvocation : {}
+{
+    <LPAREN>
+        LambdaParameters() <ARROW> ( LOOKAHEAD(3) LambdaExpression() | Choice() )
+    <RPAREN>
+    ( MethodParameters() )*
+}
+
 /*
  * Choice
  * For Choice markup a ? b : c, then Or
@@ -279,7 +308,8 @@ void MethodParameters() #MethodParameters : {}
  */
 void NonLiteral() : {}
 {
-    <LPAREN> Expression() <RPAREN>
+    LOOKAHEAD(3) LambdaExpressionOrInvocation()
+    | <LPAREN> Expression() <RPAREN>
     | LOOKAHEAD((<IDENTIFIER> <COLON>)? <IDENTIFIER> <LPAREN>) Function()
     | Identifier()
     | LOOKAHEAD(3)SetData()
@@ -291,7 +321,7 @@ void SetData() #SetData: {}
 {
     <START_SET_OR_MAP>
         ( Expression() ( <COMMA> Expression() )* )?
-    <RCURL>
+    <RBRACE>
 }
 
 void ListData() #ListData: {}
@@ -305,7 +335,7 @@ void MapData() #MapData: {}
 {
     <START_SET_OR_MAP>
         ( MapEntry() ( <COMMA> MapEntry() )* )?
-    <RCURL>
+    <RBRACE>
 }
 
 void MapEntry() #MapEntry: {}
@@ -435,7 +465,7 @@ java.util.Deque<Integer> deque = new java.util.ArrayDeque<Integer>();
 <IN_EXPRESSION, IN_SET_OR_MAP> TOKEN :
 {
      < START_SET_OR_MAP : "{" > {deque.push(curLexState);}: IN_SET_OR_MAP
-|    < RCURL: "}" > {SwitchTo(deque.pop());}
+|    < RBRACE: "}" > {SwitchTo(deque.pop());}
 |    < INTEGER_LITERAL: ["0"-"9"] (["0"-"9"])* >
 |    < FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
         | "." (["0"-"9"])+ (<EXPONENT>)?
@@ -487,6 +517,7 @@ java.util.Deque<Integer> deque = new java.util.ArrayDeque<Integer>();
 |    < MOD0 : "%" >
 |    < MOD1 : "mod" >
 |    < ASSIGN : "=" >
+|    < ARROW : "->" >
 |    < IDENTIFIER : (<LETTER>|<IMPL_OBJ_START>) (<LETTER>|<DIGIT>)* >
 |    < FUNCTIONSUFFIX : (<IDENTIFIER>) >
 |    < #IMPL_OBJ_START: "#" >

==================================================
ELParserTokenManager.java
index 94650912cd..5c52c3ea39 100644
--- a/java/org/apache/el/parser/ELParserConstants.java
+++ b/java/org/apache/el/parser/ELParserConstants.java
@@ -19,7 +19,7 @@ public interface ELParserConstants {
   /** RegularExpression Id. */
   int START_SET_OR_MAP = 8;
   /** RegularExpression Id. */
-  int RCURL = 9;
+  int RBRACE = 9;
   /** RegularExpression Id. */
   int INTEGER_LITERAL = 10;
   /** RegularExpression Id. */
@@ -109,17 +109,19 @@ public interface ELParserConstants {
   /** RegularExpression Id. */
   int ASSIGN = 53;
   /** RegularExpression Id. */
-  int IDENTIFIER = 54;
+  int ARROW = 54;
   /** RegularExpression Id. */
-  int FUNCTIONSUFFIX = 55;
+  int IDENTIFIER = 55;
   /** RegularExpression Id. */
-  int IMPL_OBJ_START = 56;
+  int FUNCTIONSUFFIX = 56;
   /** RegularExpression Id. */
-  int LETTER = 57;
+  int IMPL_OBJ_START = 57;
   /** RegularExpression Id. */
-  int DIGIT = 58;
+  int LETTER = 58;
   /** RegularExpression Id. */
-  int ILLEGAL_CHARACTER = 59;
+  int DIGIT = 59;
+  /** RegularExpression Id. */
+  int ILLEGAL_CHARACTER = 60;
 
   /** Lexical state. */
   int DEFAULT = 0;
@@ -184,6 +186,7 @@ public interface ELParserConstants {
     "\"%\"",
     "\"mod\"",
     "\"=\"",
+    "\"->\"",
     "<IDENTIFIER>",
     "<FUNCTIONSUFFIX>",
     "\"#\"",

==================================================
ELParserTreeConstants.java
index 8dbf0b4fb1..6cbfe36876 100644
--- a/java/org/apache/el/parser/ELParserTokenManager.java
+++ b/java/org/apache/el/parser/ELParserTokenManager.java
@@ -266,7 +266,7 @@ private final int jjStopStringLiteralDfa_2(int pos, long active0)
             return 1;
          if ((active0 & 0x141d555401c000L) != 0L)
          {
-            jjmatchedKind = 54;
+            jjmatchedKind = 55;
             return 30;
          }
          return -1;
@@ -275,7 +275,7 @@ private final int jjStopStringLiteralDfa_2(int pos, long active0)
             return 30;
          if ((active0 & 0x1419400001c000L) != 0L)
          {
-            jjmatchedKind = 54;
+            jjmatchedKind = 55;
             jjmatchedPos = 1;
             return 30;
          }
@@ -285,7 +285,7 @@ private final int jjStopStringLiteralDfa_2(int pos, long active0)
             return 30;
          if ((active0 & 0x18000001c000L) != 0L)
          {
-            jjmatchedKind = 54;
+            jjmatchedKind = 55;
             jjmatchedPos = 2;
             return 30;
          }
@@ -295,7 +295,7 @@ private final int jjStopStringLiteralDfa_2(int pos, long active0)
             return 30;
          if ((active0 & 0x180000008000L) != 0L)
          {
-            jjmatchedKind = 54;
+            jjmatchedKind = 55;
             jjmatchedPos = 3;
             return 30;
          }
@@ -305,7 +305,7 @@ private final int jjStopStringLiteralDfa_2(int pos, long active0)
             return 30;
          if ((active0 & 0x100000000000L) != 0L)
          {
-            jjmatchedKind = 54;
+            jjmatchedKind = 55;
             jjmatchedPos = 4;
             return 30;
          }
@@ -313,7 +313,7 @@ private final int jjStopStringLiteralDfa_2(int pos, long active0)
       case 5:
          if ((active0 & 0x100000000000L) != 0L)
          {
-            jjmatchedKind = 54;
+            jjmatchedKind = 55;
             jjmatchedPos = 5;
             return 30;
          }
@@ -321,7 +321,7 @@ private final int jjStopStringLiteralDfa_2(int pos, long active0)
       case 6:
          if ((active0 & 0x100000000000L) != 0L)
          {
-            jjmatchedKind = 54;
+            jjmatchedKind = 55;
             jjmatchedPos = 6;
             return 30;
          }
@@ -329,7 +329,7 @@ private final int jjStopStringLiteralDfa_2(int pos, long active0)
       case 7:
          if ((active0 & 0x100000000000L) != 0L)
          {
-            jjmatchedKind = 54;
+            jjmatchedKind = 55;
             jjmatchedPos = 7;
             return 30;
          }
@@ -337,7 +337,7 @@ private final int jjStopStringLiteralDfa_2(int pos, long active0)
       case 8:
          if ((active0 & 0x100000000000L) != 0L)
          {
-            jjmatchedKind = 54;
+            jjmatchedKind = 55;
             jjmatchedPos = 8;
             return 30;
          }
@@ -372,7 +372,8 @@ private int jjMoveStringLiteralDfa0_2()
       case 44:
          return jjStopAtPos(0, 24);
       case 45:
-         return jjStopAtPos(0, 47);
+         jjmatchedKind = 47;
+         return jjMoveStringLiteralDfa1_2(0x40000000000000L);
       case 46:
          return jjStartNfaWithStates_2(0, 17, 1);
       case 47:
@@ -451,6 +452,10 @@ private int jjMoveStringLiteralDfa1_2(long active0)
          else if ((active0 & 0x800000000L) != 0L)
             return jjStopAtPos(1, 35);
          break;
+      case 62:
+         if ((active0 & 0x40000000000000L) != 0L)
+            return jjStopAtPos(1, 54);
+         break;
       case 97:
          return jjMoveStringLiteralDfa2_2(active0, 0x8000L);
       case 101:
@@ -731,8 +736,8 @@ private int jjMoveNfa_2(int startState, int curPos)
                   }
                   else if ((0x1800000000L & l) != 0L)
                   {
-                     if (kind > 54)
-                        kind = 54;
+                     if (kind > 55)
+                        kind = 55;
                      jjCheckNAddTwoStates(28, 29);
                   }
                   else if (curChar == 39)
@@ -745,14 +750,14 @@ private int jjMoveNfa_2(int startState, int curPos)
                case 30:
                   if ((0x3ff001000000000L & l) != 0L)
                   {
-                     if (kind > 55)
-                        kind = 55;
+                     if (kind > 56)
+                        kind = 56;
                      jjCheckNAdd(29);
                   }
                   if ((0x3ff001000000000L & l) != 0L)
                   {
-                     if (kind > 54)
-                        kind = 54;
+                     if (kind > 55)
+                        kind = 55;
                      jjCheckNAdd(28);
                   }
                   break;
@@ -867,22 +872,22 @@ private int jjMoveNfa_2(int startState, int curPos)
                case 27:
                   if ((0x1800000000L & l) == 0L)
                      break;
-                  if (kind > 54)
-                     kind = 54;
+                  if (kind > 55)
+                     kind = 55;
                   jjCheckNAddTwoStates(28, 29);
                   break;
                case 28:
                   if ((0x3ff001000000000L & l) == 0L)
                      break;
-                  if (kind > 54)
-                     kind = 54;
+                  if (kind > 55)
+                     kind = 55;
                   jjCheckNAdd(28);
                   break;
                case 29:
                   if ((0x3ff001000000000L & l) == 0L)
                      break;
-                  if (kind > 55)
-                     kind = 55;
+                  if (kind > 56)
+                     kind = 56;
                   jjCheckNAdd(29);
                   break;
                default : break;
@@ -899,21 +904,21 @@ private int jjMoveNfa_2(int startState, int curPos)
                case 0:
                   if ((0x7fffffe87fffffeL & l) == 0L)
                      break;
-                  if (kind > 54)
-                     kind = 54;
+                  if (kind > 55)
+                     kind = 55;
                   jjCheckNAddTwoStates(28, 29);
                   break;
                case 30:
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
-                     if (kind > 55)
-                        kind = 55;
+                     if (kind > 56)
+                        kind = 56;
                      jjCheckNAdd(29);
                   }
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
-                     if (kind > 54)
-                        kind = 54;
+                     if (kind > 55)
+                        kind = 55;
                      jjCheckNAdd(28);
                   }
                   break;
@@ -956,15 +961,15 @@ private int jjMoveNfa_2(int startState, int curPos)
                case 28:
                   if ((0x7fffffe87fffffeL & l) == 0L)
                      break;
-                  if (kind > 54)
-                     kind = 54;
+                  if (kind > 55)
+                     kind = 55;
                   jjCheckNAdd(28);
                   break;
                case 29:
                   if ((0x7fffffe87fffffeL & l) == 0L)
                      break;
-                  if (kind > 55)
-                     kind = 55;
+                  if (kind > 56)
+                     kind = 56;
                   jjCheckNAdd(29);
                   break;
                default : break;
@@ -985,21 +990,21 @@ private int jjMoveNfa_2(int startState, int curPos)
                case 0:
                   if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                      break;
-                  if (kind > 54)
-                     kind = 54;
+                  if (kind > 55)
+                     kind = 55;
                   jjCheckNAddTwoStates(28, 29);
                   break;
                case 30:
                   if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                   {
-                     if (kind > 54)
-                        kind = 54;
+                     if (kind > 55)
+                        kind = 55;
                      jjCheckNAdd(28);
                   }
                   if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                   {
-                     if (kind > 55)
-                        kind = 55;
+                     if (kind > 56)
+                        kind = 56;
                      jjCheckNAdd(29);
                   }
                   break;
@@ -1014,15 +1019,15 @@ private int jjMoveNfa_2(int startState, int curPos)
                case 28:
                   if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                      break;
-                  if (kind > 54)
-                     kind = 54;
+                  if (kind > 55)
+                     kind = 55;
                   jjCheckNAdd(28);
                   break;
                case 29:
                   if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                      break;
-                  if (kind > 55)
-                     kind = 55;
+                  if (kind > 56)
+                     kind = 56;
                   jjCheckNAdd(29);
                   break;
                default : break;
@@ -1051,7 +1056,7 @@ private final int jjStopStringLiteralDfa_1(int pos, long active0)
             return 1;
          if ((active0 & 0x141d555401c000L) != 0L)
          {
-            jjmatchedKind = 54;
+            jjmatchedKind = 55;
             return 30;
          }
          return -1;
@@ -1060,7 +1065,7 @@ private final int jjStopStringLiteralDfa_1(int pos, long active0)
             return 30;
          if ((active0 & 0x1419400001c000L) != 0L)
          {
-            jjmatchedKind = 54;
+            jjmatchedKind = 55;
             jjmatchedPos = 1;
             return 30;
          }
@@ -1070,7 +1075,7 @@ private final int jjStopStringLiteralDfa_1(int pos, long active0)
             return 30;
          if ((active0 & 0x18000001c000L) != 0L)
          {
-            jjmatchedKind = 54;
+            jjmatchedKind = 55;
             jjmatchedPos = 2;
             return 30;
          }
@@ -1080,7 +1085,7 @@ private final int jjStopStringLiteralDfa_1(int pos, long active0)
             return 30;
          if ((active0 & 0x180000008000L) != 0L)
          {
-            jjmatchedKind = 54;
+            jjmatchedKind = 55;
             jjmatchedPos = 3;
             return 30;
          }
@@ -1090,7 +1095,7 @@ private final int jjStopStringLiteralDfa_1(int pos, long active0)
             return 30;
          if ((active0 & 0x100000000000L) != 0L)
          {
-            jjmatchedKind = 54;
+            jjmatchedKind = 55;
             jjmatchedPos = 4;
             return 30;
          }
@@ -1098,7 +1103,7 @@ private final int jjStopStringLiteralDfa_1(int pos, long active0)
       case 5:
          if ((active0 & 0x100000000000L) != 0L)
          {
-            jjmatchedKind = 54;
+            jjmatchedKind = 55;
             jjmatchedPos = 5;
             return 30;
          }
@@ -1106,7 +1111,7 @@ private final int jjStopStringLiteralDfa_1(int pos, long active0)
       case 6:
          if ((active0 & 0x100000000000L) != 0L)
          {
-            jjmatchedKind = 54;
+            jjmatchedKind = 55;
             jjmatchedPos = 6;
             return 30;
          }
@@ -1114,7 +1119,7 @@ private final int jjStopStringLiteralDfa_1(int pos, long active0)
       case 7:
          if ((active0 & 0x100000000000L) != 0L)
          {
-            jjmatchedKind = 54;
+            jjmatchedKind = 55;
             jjmatchedPos = 7;
             return 30;
          }
@@ -1122,7 +1127,7 @@ private final int jjStopStringLiteralDfa_1(int pos, long active0)
       case 8:
          if ((active0 & 0x100000000000L) != 0L)
          {
-            jjmatchedKind = 54;
+            jjmatchedKind = 55;
             jjmatchedPos = 8;
             return 30;
          }
@@ -1157,7 +1162,8 @@ private int jjMoveStringLiteralDfa0_1()
       case 44:
          return jjStopAtPos(0, 24);
       case 45:
-         return jjStopAtPos(0, 47);
+         jjmatchedKind = 47;
+         return jjMoveStringLiteralDfa1_1(0x40000000000000L);
       case 46:
          return jjStartNfaWithStates_1(0, 17, 1);
       case 47:
@@ -1236,6 +1242,10 @@ private int jjMoveStringLiteralDfa1_1(long active0)
          else if ((active0 & 0x800000000L) != 0L)
             return jjStopAtPos(1, 35);
          break;
+      case 62:
+         if ((active0 & 0x40000000000000L) != 0L)
+            return jjStopAtPos(1, 54);
+         break;
       case 97:
          return jjMoveStringLiteralDfa2_1(active0, 0x8000L);
       case 101:
@@ -1498,8 +1508,8 @@ private int jjMoveNfa_1(int startState, int curPos)
                   }
                   else if ((0x1800000000L & l) != 0L)
                   {
-                     if (kind > 54)
-                        kind = 54;
+                     if (kind > 55)
+                        kind = 55;
                      jjCheckNAddTwoStates(28, 29);
                   }
                   else if (curChar == 39)
@@ -1512,14 +1522,14 @@ private int jjMoveNfa_1(int startState, int curPos)
                case 30:
                   if ((0x3ff001000000000L & l) != 0L)
                   {
-                     if (kind > 55)
-                        kind = 55;
+                     if (kind > 56)
+                        kind = 56;
                      jjCheckNAdd(29);
                   }
                   if ((0x3ff001000000000L & l) != 0L)
                   {
-                     if (kind > 54)
-                        kind = 54;
+                     if (kind > 55)
+                        kind = 55;
                      jjCheckNAdd(28);
                   }
                   break;
@@ -1634,22 +1644,22 @@ private int jjMoveNfa_1(int startState, int curPos)
                case 27:
                   if ((0x1800000000L & l) == 0L)
                      break;
-                  if (kind > 54)
-                     kind = 54;
+                  if (kind > 55)
+                     kind = 55;
                   jjCheckNAddTwoStates(28, 29);
                   break;
                case 28:
                   if ((0x3ff001000000000L & l) == 0L)
                      break;
-                  if (kind > 54)
-                     kind = 54;
+                  if (kind > 55)
+                     kind = 55;
                   jjCheckNAdd(28);
                   break;
                case 29:
                   if ((0x3ff001000000000L & l) == 0L)
                      break;
-                  if (kind > 55)
-                     kind = 55;
+                  if (kind > 56)
+                     kind = 56;
                   jjCheckNAdd(29);
                   break;
                default : break;
@@ -1666,21 +1676,21 @@ private int jjMoveNfa_1(int startState, int curPos)
                case 0:
                   if ((0x7fffffe87fffffeL & l) == 0L)
                      break;
-                  if (kind > 54)
-                     kind = 54;
+                  if (kind > 55)
+                     kind = 55;
                   jjCheckNAddTwoStates(28, 29);
                   break;
                case 30:
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
-                     if (kind > 55)
-                        kind = 55;
+                     if (kind > 56)
+                        kind = 56;
                      jjCheckNAdd(29);
                   }
                   if ((0x7fffffe87fffffeL & l) != 0L)
                   {
-                     if (kind > 54)
-                        kind = 54;
+                     if (kind > 55)
+                        kind = 55;
                      jjCheckNAdd(28);
                   }
                   break;
@@ -1723,15 +1733,15 @@ private int jjMoveNfa_1(int startState, int curPos)
                case 28:
                   if ((0x7fffffe87fffffeL & l) == 0L)
                      break;
-                  if (kind > 54)
-                     kind = 54;
+                  if (kind > 55)
+                     kind = 55;
                   jjCheckNAdd(28);
                   break;
                case 29:
                   if ((0x7fffffe87fffffeL & l) == 0L)
                      break;
-                  if (kind > 55)
-                     kind = 55;
+                  if (kind > 56)
+                     kind = 56;
                   jjCheckNAdd(29);
                   break;
                default : break;
@@ -1752,21 +1762,21 @@ private int jjMoveNfa_1(int startState, int curPos)
                case 0:
                   if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                      break;
-                  if (kind > 54)
-                     kind = 54;
+                  if (kind > 55)
+                     kind = 55;
                   jjCheckNAddTwoStates(28, 29);
                   break;
                case 30:
                   if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                   {
-                     if (kind > 54)
-                        kind = 54;
+                     if (kind > 55)
+                        kind = 55;
                      jjCheckNAdd(28);
                   }
                   if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                   {
-                     if (kind > 55)
-                        kind = 55;
+                     if (kind > 56)
+                        kind = 56;
                      jjCheckNAdd(29);
                   }
                   break;
@@ -1781,15 +1791,15 @@ private int jjMoveNfa_1(int startState, int curPos)
                case 28:
                   if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                      break;
-                  if (kind > 54)
-                     kind = 54;
+                  if (kind > 55)
+                     kind = 55;
                   jjCheckNAdd(28);
                   break;
                case 29:
                   if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                      break;
-                  if (kind > 55)
-                     kind = 55;
+                  if (kind > 56)
+                     kind = 56;
                   jjCheckNAdd(29);
                   break;
                default : break;
@@ -1855,7 +1865,7 @@ null, null, null, "\164\162\165\145", "\146\141\154\163\145", "\156\165\154\154"
 "\154\164", "\76\75", "\147\145", "\74\75", "\154\145", "\75\75", "\145\161", "\41\75",
 "\156\145", "\41", "\156\157\164", "\46\46", "\141\156\144", "\174\174", "\157\162",
 "\145\155\160\164\171", "\151\156\163\164\141\156\143\145\157\146", "\52", "\53", "\55", "\77", "\57",
-"\144\151\166", "\45", "\155\157\144", "\75", null, null, null, null, null, null, };
+"\144\151\166", "\45", "\155\157\144", "\75", "\55\76", null, null, null, null, null, null, };
 
 /** Lexer state names. */
 public static final String[] lexStateNames = {
@@ -1868,10 +1878,10 @@ public static final String[] lexStateNames = {
 public static final int[] jjnewLexState = {
    -1, -1, 1, 1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
 };
 static final long[] jjtoToken = {
-   0x8ffffffffffef0fL,
+   0x11ffffffffffef0fL,
 };
 static final long[] jjtoSkip = {
    0xf0L,
@@ -1999,18 +2009,18 @@ public Token getNextToken()
        jjmatchedKind = 0x7fffffff;
        jjmatchedPos = 0;
        curPos = jjMoveStringLiteralDfa0_1();
-       if (jjmatchedPos == 0 && jjmatchedKind > 59)
+       if (jjmatchedPos == 0 && jjmatchedKind > 60)
        {
-          jjmatchedKind = 59;
+          jjmatchedKind = 60;
        }
        break;
      case 2:
        jjmatchedKind = 0x7fffffff;
        jjmatchedPos = 0;
        curPos = jjMoveStringLiteralDfa0_2();
-       if (jjmatchedPos == 0 && jjmatchedKind > 59)
+       if (jjmatchedPos == 0 && jjmatchedKind > 60)
        {
-          jjmatchedKind = 59;
+          jjmatchedKind = 60;
        }
        break;
    }
@@ -2078,7 +2088,7 @@ void TokenLexicalActions(Token matchedToken)
       case 9 :
         image.append(jjstrLiteralImages[9]);
         lengthOfMatch = jjstrLiteralImages[9].length();
-                     SwitchTo(deque.pop());
+                      SwitchTo(deque.pop());
          break;
       default :
          break;

==================================================
