3aa991920e0bc6abdabab636a4a34a45cb0730fe
==================================================
WebSocket 1.0 implementation part 6 of many
==================================================
Mark Emlyn
==================================================
Sat Dec 1 20:17:38 2012 +0000
==================================================
PojoMethodMapping.java
WebSocket 1.0 implementation part 6 of many
Path parameter processing for POJOs
Clearer differentiation between endpoint path, servlet mapping path and path info

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1416047 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ServerContainerImpl.java
index 9f3353a0b4..47692567d9 100644
--- a/java/org/apache/tomcat/websocket/PojoMethodMapping.java
+++ b/java/org/apache/tomcat/websocket/PojoMethodMapping.java
@@ -28,7 +28,10 @@ public class PojoMethodMapping {
     private final Method onClose;
     private final Method onError;
 
-    public PojoMethodMapping(Class<?> clazzPojo, String path) {
+    private final UriTemplate template;
+
+    public PojoMethodMapping(Class<?> clazzPojo, String path,
+            String mappingPath) {
         Method open = null;
         Method close = null;
         Method error = null;
@@ -48,13 +51,20 @@ public class PojoMethodMapping {
         this.onOpen = open;
         this.onClose = close;
         this.onError = error;
+
+        if (path.length() > mappingPath.length()) {
+            template =
+                    new UriTemplate(path.substring(mappingPath.length() - 1));
+        } else {
+            template = null;
+        }
     }
 
     public Method getOnOpen() {
         return onOpen;
     }
 
-    public Object[] getOnOpenArgs(String path) {
+    public Object[] getOnOpenArgs(String pathInfo) {
         // TODO Auto-generated method stub
         return null;
     }
@@ -63,7 +73,7 @@ public class PojoMethodMapping {
         return onClose;
     }
 
-    public Object[] getOnCloseArgs(String path) {
+    public Object[] getOnCloseArgs(String pathInfo) {
         // TODO Auto-generated method stub
         return null;
     }
@@ -72,7 +82,7 @@ public class PojoMethodMapping {
         return onError;
     }
 
-    public Object[] getOnErrorArgs(String path) {
+    public Object[] getOnErrorArgs(String pathInfo) {
         // TODO Auto-generated method stub
         return null;
     }

==================================================
UriTemplate.java
index 831c4e8de6..082b822ef9 100644
--- a/java/org/apache/tomcat/websocket/ServerContainerImpl.java
+++ b/java/org/apache/tomcat/websocket/ServerContainerImpl.java
@@ -153,7 +153,7 @@ public class ServerContainerImpl extends ClientContainerImpl implements
         String mappingPath = Util.getServletMappingPath(path);
 
         pojoMap.put(mappingPath.substring(0, mappingPath.length() - 2), pojo);
-        pojoMethodMap.put(pojo, new PojoMethodMapping(pojo, path));
+        pojoMethodMap.put(pojo, new PojoMethodMapping(pojo, path, mappingPath));
         addWsServletMapping(mappingPath);
     }
 
@@ -170,7 +170,7 @@ public class ServerContainerImpl extends ClientContainerImpl implements
     }
 
 
-    public Endpoint getEndpoint(String servletPath)
+    public Endpoint getEndpoint(String servletPath, String pathInfo)
             throws InstantiationException, IllegalAccessException {
         Class<? extends Endpoint> clazzEndpoint = endpointMap.get(servletPath);
         if (clazzEndpoint != null) {
@@ -184,7 +184,7 @@ public class ServerContainerImpl extends ClientContainerImpl implements
             PojoMethodMapping mapping = pojoMethodMap.get(clazzPojo);
             if (mapping != null) {
                 Endpoint ep = new WsEndpointPojo(clazzPojo,
-                        mapping, servletPath);
+                        mapping, servletPath, pathInfo);
                 return ep;
             }
         }

==================================================
WsEndpointPojo.java
new file mode 100644
index 0000000000..e5cc302475
--- /dev/null
+++ b/java/org/apache/tomcat/websocket/UriTemplate.java
@@ -0,0 +1,84 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.websocket;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+public class UriTemplate {
+
+    private final Pattern pattern;
+    private final List<String> names = new ArrayList<>();
+
+    public UriTemplate(String template) {
+        // +10 is just a guess at this point
+        StringBuilder pattern = new StringBuilder(template.length() + 10);
+
+
+        int pos = 0;
+        int end = 0;
+        int start = template.indexOf('{');
+        while (start > -1) {
+            end = template.indexOf('}', start);
+            pattern.append('(');
+            pattern.append(template.substring(pos, start));
+            pattern.append(")?([^/]*)");
+            names.add(template.substring(start + 1, end));
+            pos = end + 1;
+            start = template.indexOf('{', pos);
+        }
+
+        // No more matches, append current position to end
+        if (pos < template.length()) {
+            pattern.append('(');
+            pattern.append(template.substring(pos));
+            pattern.append(")?");
+        }
+
+        this.pattern = Pattern.compile(pattern.toString());
+    }
+
+
+    /**
+     * Extract the path parameters from the provided pathInfo based on the
+     * template with which this UriTemplate was constructed.
+     *
+     * @param pathInfo  The pathInfo from which the path parameters are to be
+     *                  extracted
+     * @return  A map of paramater names to values
+     */
+    public Map<String,String> match(String pathInfo) {
+        Map<String,String> result = new HashMap<>();
+        Matcher m = pattern.matcher(pathInfo);
+        m.matches();
+
+        int group = 2;
+        for (String name : names) {
+            String value = m.group(group);
+            if (value != null && value.length() > 0) {
+                result.put(name, value);
+            }
+            group += 2;
+        }
+
+        return result;
+    }
+}

==================================================
WsServlet.java
index 5d373c35c9..99211742dc 100644
--- a/java/org/apache/tomcat/websocket/WsEndpointPojo.java
+++ b/java/org/apache/tomcat/websocket/WsEndpointPojo.java
@@ -37,10 +37,10 @@ public class WsEndpointPojo extends Endpoint {
     private final Object[] onErrorArgs;
 
     public WsEndpointPojo(Class<?> clazzPojo, PojoMethodMapping methodMapping,
-            String path)
+            String ServletPath, String pathInfo)
             throws InstantiationException, IllegalAccessException {
         this.pojo = clazzPojo.newInstance();
-        this.config = new DefaultServerConfiguration(path) {
+        this.config = new DefaultServerConfiguration(ServletPath) {
 
             @Override
             public boolean checkOrigin(String originHeaderValue) {
@@ -52,21 +52,21 @@ public class WsEndpointPojo extends Endpoint {
         if (onOpen == null) {
             onOpenArgs = null;
         } else {
-            onOpenArgs = methodMapping.getOnOpenArgs(path);
+            onOpenArgs = methodMapping.getOnOpenArgs(pathInfo);
         }
 
         onClose = methodMapping.getOnClose();
         if (onClose == null) {
             onCloseArgs = null;
         } else {
-            onCloseArgs = methodMapping.getOnCloseArgs(path);
+            onCloseArgs = methodMapping.getOnCloseArgs(pathInfo);
         }
 
         onError = methodMapping.getOnError();
         if (onError == null) {
             onErrorArgs = null;
         } else {
-            onErrorArgs = methodMapping.getOnErrorArgs(path);
+            onErrorArgs = methodMapping.getOnErrorArgs(pathInfo);
         }
     }
 

==================================================
TestUriTemplate.java
index 2d5547a5b5..bc5cf91497 100644
--- a/java/org/apache/tomcat/websocket/WsServlet.java
+++ b/java/org/apache/tomcat/websocket/WsServlet.java
@@ -90,7 +90,7 @@ public class WsServlet extends HttpServlet {
         ServerContainerImpl cp = ServerContainerImpl.getServerContainer();
         Endpoint ep = null;
         try {
-             ep = cp.getEndpoint(req.getServletPath());
+             ep = cp.getEndpoint(req.getServletPath(), req.getPathInfo());
         } catch (InstantiationException | IllegalAccessException e) {
             // This will trigger an error response
             throw new ServletException(e);

==================================================
