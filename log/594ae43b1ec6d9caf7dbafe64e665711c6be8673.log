594ae43b1ec6d9caf7dbafe64e665711c6be8673
==================================================
Harden CredentialHandler implementations - constant-time comparisons
==================================================
Mark Thomas
==================================================
Thu Mar 17 13:36:20 2022 +0000
==================================================
DigestCredentialHandlerBase.java
Harden CredentialHandler implementations - constant-time comparisons

Based on a patch proposed by schultz


==================================================
MessageDigestCredentialHandler.java
index b6a33d5854..122adef183 100644
--- a/java/org/apache/catalina/realm/DigestCredentialHandlerBase.java
+++ b/java/org/apache/catalina/realm/DigestCredentialHandlerBase.java
@@ -16,6 +16,7 @@
  */
 package org.apache.catalina.realm;
 
+import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.security.SecureRandom;
 import java.util.Random;
@@ -200,7 +201,7 @@ public abstract class DigestCredentialHandlerBase implements CredentialHandler {
             return false;
         }
 
-        return storedHexEncoded.equalsIgnoreCase(inputHexEncoded);
+        return DigestCredentialHandlerBase.equals(storedHexEncoded, inputHexEncoded, true);
     }
 
 
@@ -292,4 +293,76 @@ public abstract class DigestCredentialHandlerBase implements CredentialHandler {
      * @return the logger for the CredentialHandler instance.
      */
     protected abstract Log getLog();
+
+    /**
+     * Implements String equality which always compares all characters in the
+     * string, without stopping early if any characters do not match.
+     *
+     * @implNote
+     * This implementation was adapted from {@link MessageDigest#isEqual}
+     * which we assume is as optimizer-defeating as possible.
+     *
+     * @param s1 The first string to compare.
+     * @param s2 The second string to compare.
+     * @param ignoreCase <code>true</code> if the strings should be compared
+     *        without regard to case. Note that "true" here is only guaranteed
+     *        to work with plain ASCII characters.
+     *
+     * @return <code>true</code> if the strings are equal to each other,
+     *         <code>false</code> otherwise.
+     */
+    public static boolean equals(final String s1, final String s2, final boolean ignoreCase) {
+        if (s1 == s2) {
+            return true;
+        }
+        if (s1 == null || s2 == null) {
+            return false;
+        }
+
+        final int len1 = s1.length();
+        final int len2 = s2.length();
+
+        if (len2 == 0) {
+            return len1 == 0;
+        }
+
+        int result = 0;
+        result |= len1 - len2;
+
+        // time-constant comparison
+        for (int i = 0; i < len1; i++) {
+            // If i >= len2, index2 is 0; otherwise, i.
+            final int index2 = ((i - len2) >>> 31) * i;
+            char c1 = s1.charAt(i);
+            char c2 = s2.charAt(index2);
+            if(ignoreCase) {
+                c1 = Character.toLowerCase(c1);
+                c2 = Character.toLowerCase(c2);
+            }
+            result |= c1 ^ c2;
+        }
+        return result == 0;
+    }
+
+    /**
+     * Implements byte-array equality which always compares all bytes in the
+     * array, without stopping early if any bytes do not match.
+     *
+     * @implNote
+     * Implementation note: this method delegates to {@link MessageDigest#isEqual}
+     * under the assumption that it provides a constant-time comparison of the
+     * bytes in the arrays. Java 7+ has such an implementation, but neither the
+     * Javadoc nor any specification requires it. Therefore, Tomcat should
+     * continue to use <i>this</i> method internally in case the JDK
+     * implementation changes so this method can be re-implemented properly.
+     *
+     * @param b1 The first array to compare.
+     * @param b2 The second array to compare.
+     *
+     * @return <code>true</code> if the arrays are equal to each other,
+     *         <code>false</code> otherwise.
+     */
+    public static boolean equals(final byte[] b1, final byte[] b2) {
+        return MessageDigest.isEqual(b1, b2);
+    }
 }

==================================================
