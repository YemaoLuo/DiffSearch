d2eeca58416a5cf94473239da691eeeba3e6729a
==================================================
Minor fixes, forgotten finals and cleanups
==================================================
remm remm@apache.org
==================================================
Tue May 14 21:14:20 2019 +0200
==================================================
AprEndpoint.java
Minor fixes, forgotten finals and cleanups


==================================================
Nio2Endpoint.java
index d5898fe016..2d6622f8fb 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -2773,6 +2773,7 @@ public class AprEndpoint extends AbstractEndpoint<Long,Long> implements SNICallB
         }
 
         private class AprOperationState<A>  extends OperationState<A> {
+            private volatile boolean inline = true;
             private AprOperationState(boolean read, ByteBuffer[] buffers, int offset, int length,
                     BlockingMode block, long timeout, TimeUnit unit, A attachment, CompletionCheck check,
                     CompletionHandler<Long, ? super A> handler, Semaphore semaphore,
@@ -2807,7 +2808,6 @@ public class AprEndpoint extends AbstractEndpoint<Long,Long> implements SNICallB
                                 }
                                 return;
                             }
-
                             if (!read && flush(false)) {
                                 inline = false;
                                 registerWriteInterest();

==================================================
NioEndpoint.java
index 3c166b9821..652644a717 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -469,6 +469,7 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel,AsynchronousS
         private final CompletionHandler<Long, ByteBuffer[]> gatheringWriteCompletionHandler;
         private boolean writeInterest = false; // Guarded by writeCompletionHandler
         private boolean writeNotify = false;
+
         private volatile boolean closed = false;
 
         private CompletionHandler<Integer, SendfileData> sendfileHandler
@@ -952,7 +953,7 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel,AsynchronousS
 
         @Override
         public boolean hasPerOperationTimeout() {
-            return false;
+            return true;
         }
 
         @Override
@@ -997,8 +998,9 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel,AsynchronousS
             public void run() {
                 if (read) {
                     long nBytes = 0;
+                    // Read from main buffer first
                     if (!socketBufferHandler.isReadBufferEmpty()) {
-                        // There is still data inside the main read buffer, use it to fill out the destination buffers
+                        // There is still data inside the main read buffer, it needs to be read first
                         synchronized (readCompletionHandler) {
                             // Note: It is not necessary to put this code in the completion handler
                             socketBufferHandler.configureReadBufferForRead();
@@ -1014,8 +1016,9 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel,AsynchronousS
                         getSocket().read(buffers, offset, length, timeout, unit, this, completion);
                     }
                 } else {
+                    // Write from main buffer first
                     if (!socketBufferHandler.isWriteBufferEmpty()) {
-                        // First flush the main buffer as needed
+                        // There is still data inside the main write buffer, it needs to be written first
                         socketBufferHandler.configureWriteBufferForRead();
                         getSocket().write(socketBufferHandler.getWriteBuffer(), null, new CompletionHandler<Integer, Void>() {
                             @Override

==================================================
SocketWrapperBase.java
index bdebc73ba1..621d58c964 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -1426,6 +1426,7 @@ public class NioEndpoint extends AbstractJsseEndpoint<NioChannel,SocketChannel>
         }
 
         private class NioOperationState<A> extends OperationState<A> {
+            private volatile boolean inline = true;
             private NioOperationState(boolean read, ByteBuffer[] buffers, int offset, int length,
                     BlockingMode block, long timeout, TimeUnit unit, A attachment, CompletionCheck check,
                     CompletionHandler<Long, ? super A> handler, Semaphore semaphore,
@@ -1478,7 +1479,9 @@ public class NioEndpoint extends AbstractJsseEndpoint<NioChannel,SocketChannel>
                                 // Write from main buffer first
                                 if (!socketBufferHandler.isWriteBufferEmpty()) {
                                     // There is still data inside the main write buffer, it needs to be written first
-                                    doWrite(false);
+                                    socketBufferHandler.configureWriteBufferForRead();
+                                    getSocket().write(socketBufferHandler.getWriteBuffer());
+                                    // Start operation only if the main write buffer is now empty
                                     if (!socketBufferHandler.isWriteBufferEmpty()) {
                                         doWrite = false;
                                     }

==================================================
