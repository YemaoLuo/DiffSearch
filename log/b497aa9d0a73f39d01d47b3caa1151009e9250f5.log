b497aa9d0a73f39d01d47b3caa1151009e9250f5
==================================================
Add an InternalHttpUpgradeHandler. Not currently used.
==================================================
Mark Thomas
==================================================
Fri Feb 27 15:00:10 2015 +0000
==================================================
InternalHttpUpgradeHandler.java
Add an InternalHttpUpgradeHandler. Not currently used.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1662693 13f79535-47bb-0310-9956-ffa450edef68



==================================================
UpgradeProcessorBase.java
index ee6c185b1e..e304bbc37e 100644
--- a/java/org/apache/coyote/http11/upgrade/InternalHttpUpgradeHandler.java
+++ b/java/org/apache/coyote/http11/upgrade/InternalHttpUpgradeHandler.java
@@ -18,6 +18,9 @@ package org.apache.coyote.http11.upgrade;
 
 import javax.servlet.http.HttpUpgradeHandler;
 
+import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
+import org.apache.tomcat.util.net.SocketStatus;
+
 
 /**
  * Currently just a marker interface to enable Tomcat to identify
@@ -29,4 +32,6 @@ import javax.servlet.http.HttpUpgradeHandler;
  * Servlet API.
  */
 public interface InternalHttpUpgradeHandler extends HttpUpgradeHandler {
+
+    SocketState upgradeDispatch(SocketStatus status);
 }
\ No newline at end of file

==================================================
UpgradeProcessorExternal.java
index 1735f390e7..37b55d5526 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeProcessorBase.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeProcessorBase.java
@@ -16,7 +16,104 @@
  */
 package org.apache.coyote.http11.upgrade;
 
+import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.util.concurrent.Executor;
+
+import javax.servlet.http.HttpUpgradeHandler;
+
 import org.apache.coyote.Processor;
+import org.apache.coyote.Request;
+import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
+import org.apache.tomcat.util.net.SSLSupport;
+import org.apache.tomcat.util.net.SocketStatus;
+import org.apache.tomcat.util.net.SocketWrapperBase;
 
 public abstract class UpgradeProcessorBase implements Processor {
+
+    public UpgradeProcessorBase(SocketWrapperBase<?> wrapper, ByteBuffer leftOverInput) {
+        wrapper.unRead(leftOverInput);
+    }
+
+
+    // ------------------------------------------- Implemented Processor methods
+
+    @Override
+    public final boolean isUpgrade() {
+        return true;
+    }
+
+
+    @Override
+    public final void recycle() {
+        // Currently a NO-OP as upgrade processors are not recycled.
+    }
+
+
+    // ---------------------------- Processor methods that are NO-OP for upgrade
+
+    @Override
+    public HttpUpgradeHandler getHttpUpgradeHandler() {
+        return null;
+    }
+
+
+    @Override
+    public final Executor getExecutor() {
+        return null;
+    }
+
+
+    @Override
+    public final SocketState process(SocketWrapperBase<?> socketWrapper) throws IOException {
+        return null;
+    }
+
+
+    @Override
+    public final SocketState asyncDispatch(SocketStatus status) {
+        return null;
+    }
+
+
+    @Override
+    public void errorDispatch() {
+        // NO-OP
+    }
+
+
+    @Override
+    public final SocketState asyncPostProcess() {
+        return null;
+    }
+
+
+    @Override
+    public final boolean isAsync() {
+        return false;
+    }
+
+
+    @Override
+    public final Request getRequest() {
+        return null;
+    }
+
+
+    @Override
+    public String getClientCertProvider() {
+        return null;
+    }
+
+
+    @Override
+    public final void setSslSupport(SSLSupport sslSupport) {
+        // NOOP
+    }
+
+
+    @Override
+    public ByteBuffer getLeftoverInput() {
+        return null;
+    }
 }

==================================================
WsHttpUpgradeHandler.java
index 808371902f..a45448a8eb 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeProcessorExternal.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeProcessorExternal.java
@@ -18,18 +18,15 @@ package org.apache.coyote.http11.upgrade;
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
-import java.util.concurrent.Executor;
 
 import javax.servlet.ServletInputStream;
 import javax.servlet.ServletOutputStream;
 import javax.servlet.http.HttpUpgradeHandler;
 import javax.servlet.http.WebConnection;
 
-import org.apache.coyote.Request;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
-import org.apache.tomcat.util.net.SSLSupport;
 import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 import org.apache.tomcat.util.res.StringManager;
@@ -41,14 +38,13 @@ public class UpgradeProcessorExternal extends UpgradeProcessorBase implements We
     private static final Log log = LogFactory.getLog(UpgradeProcessorExternal.class);
     private static final StringManager sm = StringManager.getManager(UpgradeProcessorExternal.class);
 
-    private final HttpUpgradeHandler httpUpgradeHandler;
     private final UpgradeServletInputStream upgradeServletInputStream;
     private final UpgradeServletOutputStream upgradeServletOutputStream;
 
 
     public UpgradeProcessorExternal(SocketWrapperBase<?> wrapper, ByteBuffer leftOverInput,
             HttpUpgradeHandler httpUpgradeHandler) {
-        this.httpUpgradeHandler = httpUpgradeHandler;
+        super(wrapper, leftOverInput);
         this.upgradeServletInputStream = new UpgradeServletInputStream(wrapper);
         this.upgradeServletOutputStream = new UpgradeServletOutputStream(wrapper);
 
@@ -89,18 +85,6 @@ public class UpgradeProcessorExternal extends UpgradeProcessorBase implements We
 
     // ------------------------------------------- Implemented Processor methods
 
-    @Override
-    public final boolean isUpgrade() {
-        return true;
-    }
-
-
-    @Override
-    public HttpUpgradeHandler getHttpUpgradeHandler() {
-        return httpUpgradeHandler;
-    }
-
-
     @Override
     public final SocketState upgradeDispatch(SocketStatus status) {
         if (status == SocketStatus.OPEN_READ) {
@@ -140,72 +124,4 @@ public class UpgradeProcessorExternal extends UpgradeProcessorBase implements We
         }
         return SocketState.UPGRADED;
     }
-
-
-    @Override
-    public final void recycle() {
-        // Currently a NO-OP as upgrade processors are not recycled.
-    }
-
-
-    // ---------------------------- Processor methods that are NO-OP for upgrade
-
-    @Override
-    public final Executor getExecutor() {
-        return null;
-    }
-
-
-    @Override
-    public final SocketState process(SocketWrapperBase<?> socketWrapper) throws IOException {
-        return null;
-    }
-
-
-    @Override
-    public final SocketState asyncDispatch(SocketStatus status) {
-        return null;
-    }
-
-
-    @Override
-    public void errorDispatch() {
-        // NO-OP
-    }
-
-
-    @Override
-    public final SocketState asyncPostProcess() {
-        return null;
-    }
-
-
-    @Override
-    public final boolean isAsync() {
-        return false;
-    }
-
-
-    @Override
-    public final Request getRequest() {
-        return null;
-    }
-
-
-    @Override
-    public String getClientCertProvider() {
-        return null;
-    }
-
-
-    @Override
-    public final void setSslSupport(SSLSupport sslSupport) {
-        // NOOP
-    }
-
-
-    @Override
-    public ByteBuffer getLeftoverInput() {
-        return null;
-    }
 }

==================================================
