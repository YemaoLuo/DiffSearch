3fc91b5d51ccb5b78c1723943229a2a348d0b387
==================================================
Ooops, forgot to pass in the double buffered channel to the selector pool for write and read operations
==================================================
Filip Hanik
==================================================
Thu Oct 26 20:57:28 2006 +0000
==================================================
InternalNioInputBuffer.java
Ooops, forgot to pass in the double buffered channel to the selector pool for write and read operations


git-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@468132 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InternalNioOutputBuffer.java
index 5504152cd6..3acd07f92f 100644
--- a/java/org/apache/coyote/http11/InternalNioInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioInputBuffer.java
@@ -570,7 +570,7 @@ public class InternalNioInputBuffer implements InputBuffer {
             Selector selector = null;
             try { selector = getSelectorPool().get(); }catch ( IOException x ) {}
             try {
-                nRead = getSelectorPool().read(socket.getBufHandler().getReadBuffer(),socket.getIOChannel(),selector,rto);
+                nRead = getSelectorPool().read(socket.getBufHandler().getReadBuffer(),socket,selector,rto);
             } catch ( EOFException eof ) {
                 nRead = -1;
             } finally { 

==================================================
NioSelectorPool.java
index 206880fcd7..1525dd89cd 100644
--- a/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
@@ -431,7 +431,7 @@ public class InternalNioOutputBuffer
             //ignore
         }
         try {
-            written = getSelectorPool().write(bytebuffer, socket.getIOChannel(), selector, writeTimeout);
+            written = getSelectorPool().write(bytebuffer, socket, selector, writeTimeout);
             //make sure we are flushed 
             do {
                 if (socket.flush(selector)) break;

==================================================
SecureNioChannel.java
index d6d03257df..61b4a8bb4e 100644
--- a/java/org/apache/tomcat/util/net/NioSelectorPool.java
+++ b/java/org/apache/tomcat/util/net/NioSelectorPool.java
@@ -99,7 +99,7 @@ public class NioSelectorPool {
      * @throws SocketTimeoutException if the write times out
      * @throws IOException if an IO Exception occurs in the underlying socket logic
      */
-    public int write(ByteBuffer buf, SocketChannel socket, Selector selector, long writeTimeout) throws IOException {
+    public int write(ByteBuffer buf, NioChannel socket, Selector selector, long writeTimeout) throws IOException {
         SelectionKey key = null;
         int written = 0;
         boolean timedout = false;
@@ -118,7 +118,7 @@ public class NioSelectorPool {
                 }
                 if ( selector != null ) {
                     //register OP_WRITE to the selector
-                    if (key==null) key = socket.register(selector, SelectionKey.OP_WRITE);
+                    if (key==null) key = socket.getIOChannel().register(selector, SelectionKey.OP_WRITE);
                     else key.interestOps(SelectionKey.OP_WRITE);
                     keycount = selector.select(writeTimeout);
                 }                
@@ -147,7 +147,7 @@ public class NioSelectorPool {
      * @throws SocketTimeoutException if the read times out
      * @throws IOException if an IO Exception occurs in the underlying socket logic
      */
-    public int read(ByteBuffer buf, SocketChannel socket, Selector selector, long readTimeout) throws IOException {
+    public int read(ByteBuffer buf, NioChannel socket, Selector selector, long readTimeout) throws IOException {
         SelectionKey key = null;
         int read = 0;
         boolean timedout = false;
@@ -163,7 +163,7 @@ public class NioSelectorPool {
                 }
                 if ( selector != null ) {
                     //register OP_WRITE to the selector
-                    if (key==null) key = socket.register(selector, SelectionKey.OP_READ);
+                    if (key==null) key = socket.getIOChannel().register(selector, SelectionKey.OP_READ);
                     else key.interestOps(SelectionKey.OP_READ);
                     keycount = selector.select(readTimeout);
                 }                

==================================================
