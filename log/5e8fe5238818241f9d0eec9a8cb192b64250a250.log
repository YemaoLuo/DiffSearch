5e8fe5238818241f9d0eec9a8cb192b64250a250
==================================================
Remove StackMapType.
==================================================
Mark Emlyn
==================================================
Sat Nov 9 21:35:03 2013 +0000
==================================================
StackMap.java
Remove StackMapType.
Swallow associated values as they are never used.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1540396 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StackMapEntry.java
index 0591ffc2ce..a7850f8bad 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMap.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMap.java
@@ -33,7 +33,6 @@ import java.io.IOException;
  * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
  * @see     Code
  * @see     StackMapEntry
- * @see     StackMapType
  */
 public final class StackMap extends Attribute {
 

==================================================
StackMapTable.java
index 1386461d1f..e2493bcc8d 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapEntry.java
@@ -29,7 +29,6 @@ import java.io.Serializable;
  * @version $Id$
  * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
  * @see     StackMap
- * @see     StackMapType
  */
 public final class StackMapEntry implements Cloneable, Serializable {
 
@@ -43,16 +42,12 @@ public final class StackMapEntry implements Cloneable, Serializable {
     StackMapEntry(DataInputStream file) throws IOException {
         file.readShort();   // Unused byte_code_offset
         int number_of_locals = file.readShort();
-        StackMapType[] types_of_locals = null;
-        StackMapType[] types_of_stack_items = null;
-        types_of_locals = new StackMapType[number_of_locals];
         for (int i = 0; i < number_of_locals; i++) {
-            types_of_locals[i] = new StackMapType(file);
+            Utility.swallowStackMapType(file);
         }
         int number_of_stack_items = file.readShort();
-        types_of_stack_items = new StackMapType[number_of_stack_items];
         for (int i = 0; i < number_of_stack_items; i++) {
-            types_of_stack_items[i] = new StackMapType(file);
+            Utility.swallowStackMapType(file);
         }
     }
 }

==================================================
StackMapTableEntry.java
index a86ec08759..470f245a98 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapTable.java
@@ -33,7 +33,6 @@ import java.io.IOException;
  * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
  * @see     Code
  * @see     StackMapEntry
- * @see     StackMapType
  */
 public final class StackMapTable extends Attribute {
 

==================================================
StackMapType.java
index 614d71ad74..cca4fd05f9 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapTableEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapTableEntry.java
@@ -31,7 +31,6 @@ import org.apache.tomcat.util.bcel.Constants;
  * @version $Id$
  * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
  * @see     StackMap
- * @see     StackMapType
  */
 public final class StackMapTableEntry implements Cloneable, Serializable {
 
@@ -39,9 +38,7 @@ public final class StackMapTableEntry implements Cloneable, Serializable {
 
     private int frame_type;
     private int number_of_locals;
-    private StackMapType[] types_of_locals;
     private int number_of_stack_items;
-    private StackMapType[] types_of_stack_items;
 
 
     /**
@@ -52,21 +49,17 @@ public final class StackMapTableEntry implements Cloneable, Serializable {
     StackMapTableEntry(DataInputStream file) throws IOException {
         this.frame_type = file.read();
         this.number_of_locals = -1;
-        this.types_of_locals = null;
         this.number_of_stack_items = -1;
-        this.types_of_stack_items = null;
 
         if (frame_type >= Constants.SAME_FRAME && frame_type <= Constants.SAME_FRAME_MAX) {
             // NO-OP
         } else if (frame_type >= Constants.SAME_LOCALS_1_STACK_ITEM_FRAME && frame_type <= Constants.SAME_LOCALS_1_STACK_ITEM_FRAME_MAX) {
             number_of_stack_items = 1;
-            types_of_stack_items = new StackMapType[1];
-            types_of_stack_items[0] = new StackMapType(file);
+            Utility.swallowStackMapType(file);
         } else if (frame_type == Constants.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {
             file.readShort(); // Unused byte_code_offset_delta
             number_of_stack_items = 1;
-            types_of_stack_items = new StackMapType[1];
-            types_of_stack_items[0] = new StackMapType(file);
+            Utility.swallowStackMapType(file);
         } else if (frame_type >= Constants.CHOP_FRAME && frame_type <= Constants.CHOP_FRAME_MAX) {
             file.readShort(); // Unused byte_code_offset_delta
         } else if (frame_type == Constants.SAME_FRAME_EXTENDED) {
@@ -74,21 +67,18 @@ public final class StackMapTableEntry implements Cloneable, Serializable {
         } else if (frame_type >= Constants.APPEND_FRAME && frame_type <= Constants.APPEND_FRAME_MAX) {
             file.readShort(); // Unused byte_code_offset_delta
             number_of_locals = frame_type - 251;
-            types_of_locals = new StackMapType[number_of_locals];
             for (int i = 0; i < number_of_locals; i++) {
-                types_of_locals[i] = new StackMapType(file);
+                Utility.swallowStackMapType(file);
             }
         } else if (frame_type == Constants.FULL_FRAME) {
             file.readShort(); // Unused byte_code_offset_delta
             number_of_locals = file.readShort();
-            types_of_locals = new StackMapType[number_of_locals];
             for (int i = 0; i < number_of_locals; i++) {
-                types_of_locals[i] = new StackMapType(file);
+                Utility.swallowStackMapType(file);
             }
             number_of_stack_items = file.readShort();
-            types_of_stack_items = new StackMapType[number_of_stack_items];
             for (int i = 0; i < number_of_stack_items; i++) {
-                types_of_stack_items[i] = new StackMapType(file);
+                Utility.swallowStackMapType(file);
             }
         } else {
             /* Can't happen */

==================================================
Utility.java
deleted file mode 100644
index e2f4a3dfa5..0000000000
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapType.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- */
-package org.apache.tomcat.util.bcel.classfile;
-
-import java.io.DataInput;
-import java.io.IOException;
-import java.io.Serializable;
-
-import org.apache.tomcat.util.bcel.Constants;
-
-/**
- * This class represents the type of a local variable or item on stack
- * used in the StackMap entries.
- *
- * @version $Id$
- * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
- * @see     StackMapEntry
- * @see     StackMap
- * @see     Constants
- */
-public final class StackMapType implements Cloneable, Serializable {
-
-    private static final long serialVersionUID = 1L;
-
-    /**
-     * Construct object from file stream.
-     * @param file Input stream
-     * @throws IOException
-     */
-    StackMapType(DataInput file) throws IOException {
-        byte type = file.readByte();
-        if ((type < Constants.ITEM_Bogus) || (type > Constants.ITEM_NewObject)) {
-            throw new RuntimeException("Illegal type for StackMapType: " + type);
-        }
-        // Check to see if type has an index
-        if ((type == Constants.ITEM_Object) || (type == Constants.ITEM_NewObject)) {
-            file.readShort();   // Unused index
-        }
-    }
-}

==================================================
