c19d40d8a01942651909412ae26564d281c98cba
==================================================
Add JMX support for Tribes component.
==================================================
Keiichi Fujino
==================================================
Mon Apr 10 08:03:39 2017 +0000
==================================================
JmxChannel.java
Add JMX support for Tribes component.
-TODO: Membership, Sender, Receiver, Interceptors.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1790789 13f79535-47bb-0310-9956-ffa450edef68



==================================================
GroupChannel.java
new file mode 100644
index 0000000000..ff458fdf4f
--- /dev/null
+++ b/java/org/apache/catalina/tribes/JmxChannel.java
@@ -0,0 +1,58 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.tribes;
+
+
+public interface JmxChannel {
+
+    /**
+     * If set to true, this channel is registered with jmx.
+     * @return true if this channel will be registered with jmx.
+     */
+    public boolean isJmxEnabled();
+
+    /**
+     * If set to true, this channel is registered with jmx.
+     * @param jmxEnabled set to true if this channel should be registered with jmx.
+     */
+    public void setJmxEnabled(boolean jmxEnabled);
+
+    /**
+     * Return the jmx domain which this channel is registered.
+     * @return jmxDomain
+     */
+    public String getJmxDomain();
+
+    /**
+     * Set the jmx domain which this channel should be registered.
+     * @param jmxDomain The jmx domain which this channel should be registered.
+     */
+    public void setJmxDomain(String jmxDomain);
+
+    /**
+     * Return the jmx prefix which will be used with channel ObjectName.
+     * @return jmxPrefix
+     */
+    public String getJmxPrefix();
+
+    /**
+     * Set the jmx prefix which will be used with channel ObjectName.
+     * @param jmxPrefix The jmx prefix which will be used with channel ObjectName.
+     */
+    public void setJmxPrefix(String jmxPrefix);
+
+}

==================================================
GroupChannelMBean.java
index 1f01a9a786..128030736f 100644
--- a/java/org/apache/catalina/tribes/group/GroupChannel.java
+++ b/java/org/apache/catalina/tribes/group/GroupChannel.java
@@ -22,6 +22,8 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
 
+import javax.management.ObjectName;
+
 import org.apache.catalina.tribes.ByteMessage;
 import org.apache.catalina.tribes.Channel;
 import org.apache.catalina.tribes.ChannelException;
@@ -32,6 +34,7 @@ import org.apache.catalina.tribes.ChannelReceiver;
 import org.apache.catalina.tribes.ChannelSender;
 import org.apache.catalina.tribes.ErrorHandler;
 import org.apache.catalina.tribes.Heartbeat;
+import org.apache.catalina.tribes.JmxChannel;
 import org.apache.catalina.tribes.ManagedChannel;
 import org.apache.catalina.tribes.Member;
 import org.apache.catalina.tribes.MembershipListener;
@@ -42,6 +45,7 @@ import org.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor;
 import org.apache.catalina.tribes.io.BufferPool;
 import org.apache.catalina.tribes.io.ChannelData;
 import org.apache.catalina.tribes.io.XByteBuffer;
+import org.apache.catalina.tribes.jmx.JmxRegistry;
 import org.apache.catalina.tribes.util.Arrays;
 import org.apache.catalina.tribes.util.Logs;
 import org.apache.catalina.tribes.util.StringManager;
@@ -55,7 +59,9 @@ import org.apache.juli.logging.LogFactory;
  * The channel has an chain of interceptors that can modify the message or perform other logic.<br>
  * It manages a complete group, both membership and replication.
  */
-public class GroupChannel extends ChannelInterceptorBase implements ManagedChannel {
+public class GroupChannel extends ChannelInterceptorBase
+        implements ManagedChannel, JmxChannel, GroupChannelMBean {
+
     private static final Log log = LogFactory.getLog(GroupChannel.class);
     protected static final StringManager sm = StringManager.getManager(GroupChannel.class);
 
@@ -110,6 +116,26 @@ public class GroupChannel extends ChannelInterceptorBase implements ManagedChann
      */
     protected String name = null;
 
+    /**
+     * the jmx domain which this channel is registered.
+     */
+    private String jmxDomain = "ClusterChannel";
+
+    /**
+     * the jmx prefix which will be used with channel ObjectName.
+     */
+    private String jmxPrefix = "";
+
+    /**
+     * If set to true, this channel is registered with jmx.
+     */
+    private boolean jmxEnabled = true;
+
+    /**
+     * the ObjectName of this channel. 
+     */
+    private ObjectName oname = null;
+
     /**
      * Creates a GroupChannel. This constructor will also
      * add the first interceptor in the GroupChannel.<br>
@@ -432,6 +458,9 @@ public class GroupChannel extends ChannelInterceptorBase implements ManagedChann
     public synchronized void start(int svc) throws ChannelException {
         setupDefaultStack();
         if (optionCheck) checkOptionFlags();
+        // register jmx
+        JmxRegistry jmxRegistry = JmxRegistry.getRegistry(this);
+        if (jmxRegistry != null) this.oname = jmxRegistry.registerJmx(",component=Channel", this);
         super.start(svc);
         if ( hbthread == null && heartbeat ) {
             hbthread = new HeartbeatThread(this,heartbeatSleeptime);
@@ -452,6 +481,10 @@ public class GroupChannel extends ChannelInterceptorBase implements ManagedChann
             hbthread = null;
         }
         super.stop(svc);
+        if (oname != null) {
+            JmxRegistry.getRegistry(this).unregisterJmx(oname);
+            oname = null;
+        }
     }
 
     /**
@@ -640,6 +673,36 @@ public class GroupChannel extends ChannelInterceptorBase implements ManagedChann
         this.name = name;
     }
 
+    @Override
+    public boolean isJmxEnabled() {
+        return jmxEnabled;
+    }
+
+    @Override
+    public void setJmxEnabled(boolean jmxEnabled) {
+        this.jmxEnabled = jmxEnabled;
+    }
+
+    @Override
+    public String getJmxDomain() {
+        return jmxDomain;
+    }
+
+    @Override
+    public void setJmxDomain(String jmxDomain) {
+        this.jmxDomain = jmxDomain;
+    }
+
+    @Override
+    public String getJmxPrefix() {
+        return jmxPrefix;
+    }
+
+    @Override
+    public void setJmxPrefix(String jmxPrefix) {
+        this.jmxPrefix = jmxPrefix;
+    }
+
     /**
      *
      * <p>Title: Interceptor Iterator</p>

==================================================
JmxRegistry.java
new file mode 100644
index 0000000000..693b54e155
--- /dev/null
+++ b/java/org/apache/catalina/tribes/group/GroupChannelMBean.java
@@ -0,0 +1,62 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.tribes.group;
+
+import java.io.Serializable;
+
+import org.apache.catalina.tribes.ChannelException;
+import org.apache.catalina.tribes.ChannelListener;
+import org.apache.catalina.tribes.ErrorHandler;
+import org.apache.catalina.tribes.Member;
+import org.apache.catalina.tribes.MembershipListener;
+import org.apache.catalina.tribes.UniqueId;
+
+public interface GroupChannelMBean {
+
+    // Attributes
+    public boolean getOptionCheck();
+
+    public boolean getHeartbeat();
+
+    public long getHeartbeatSleeptime();
+
+    // Operations
+    public void start(int svc) throws ChannelException;
+
+    public void stop(int svc) throws ChannelException;
+
+    public UniqueId send(Member[] destination, Serializable msg, int options)
+            throws ChannelException;
+
+    public UniqueId send(Member[] destination, Serializable msg, int options, ErrorHandler handler)
+            throws ChannelException;
+
+    public void addMembershipListener(MembershipListener listener);
+
+    public void addChannelListener(ChannelListener listener);
+
+    public void removeMembershipListener(MembershipListener listener);
+
+    public void removeChannelListener(ChannelListener listener);
+
+    public boolean hasMembers() ;
+
+    public Member[] getMembers() ;
+
+    public Member getLocalMember(boolean incAlive);
+
+}

==================================================
