e27212babf746a4af51c7095b66338cf0f0b2ae9
==================================================
Implement first collection operation for EL 3.0.
==================================================
Mark Emlyn
==================================================
Mon Jul 15 12:58:44 2013 +0000
==================================================
ExpressionFactoryImpl.java
Implement first collection operation for EL 3.0.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1503217 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Optional.java
index 8ae5c42cbb..bc30151d98 100644
--- a/java/org/apache/el/ExpressionFactoryImpl.java
+++ b/java/org/apache/el/ExpressionFactoryImpl.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.el;
 
 import javax.el.ELContext;
@@ -25,6 +24,7 @@ import javax.el.ValueExpression;
 
 import org.apache.el.lang.ELSupport;
 import org.apache.el.lang.ExpressionBuilder;
+import org.apache.el.stream.StreamELResolverImpl;
 import org.apache.el.util.MessageFactory;
 
 
@@ -80,7 +80,6 @@ public class ExpressionFactoryImpl extends ExpressionFactory {
 
     @Override
     public ELResolver getStreamELResolver() {
-        // TODO Implement a streamELResolver
-        return null;
+        return new StreamELResolverImpl();
     }
 }

==================================================
Stream.java
new file mode 100644
index 0000000000..9afb7ead76
--- /dev/null
+++ b/java/org/apache/el/stream/Optional.java
@@ -0,0 +1,21 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.el.stream;
+
+public class Optional {
+
+}

==================================================
StreamELResolverImpl.java
new file mode 100644
index 0000000000..3a99532843
--- /dev/null
+++ b/java/org/apache/el/stream/Stream.java
@@ -0,0 +1,39 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.el.stream;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+public class Stream {
+
+    private final Iterator<?> iterator;
+
+    public Stream(Iterator<?> iterator) {
+        this.iterator = iterator;
+    }
+
+
+    public List<Object> toList() {
+        List<Object> result = new ArrayList<>();
+        while (iterator.hasNext()) {
+            result.add(iterator.next());
+        }
+        return result;
+    }
+}

==================================================
TestCollectionOperations.java
new file mode 100644
index 0000000000..dc0de02af0
--- /dev/null
+++ b/java/org/apache/el/stream/StreamELResolverImpl.java
@@ -0,0 +1,76 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.el.stream;
+
+import java.beans.FeatureDescriptor;
+import java.util.Collection;
+import java.util.Iterator;
+
+import javax.el.ELContext;
+import javax.el.ELResolver;
+
+public class StreamELResolverImpl extends ELResolver {
+
+    @Override
+    public Object getValue(ELContext context, Object base, Object property) {
+        return null;
+    }
+
+    @Override
+    public Class<?> getType(ELContext context, Object base, Object property) {
+        return null;
+    }
+
+    @Override
+    public void setValue(ELContext context, Object base, Object property,
+            Object value) {
+        // NO-OP
+    }
+
+    @Override
+    public boolean isReadOnly(ELContext context, Object base, Object property) {
+        return false;
+    }
+
+    @Override
+    public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context,
+            Object base) {
+        return null;
+    }
+
+    @Override
+    public Class<?> getCommonPropertyType(ELContext context, Object base) {
+        return null;
+    }
+
+    @Override
+    public Object invoke(ELContext context, Object base, Object method,
+            Class<?>[] paramTypes, Object[] params) {
+
+        if ("stream".equals(method) && params.length == 0) {
+            if (base.getClass().isArray()) {
+                // TODO handle array source
+            } else if (base instanceof Collection) {
+                context.setPropertyResolved(true);
+                return new Stream(((Collection<?>) base).iterator());
+            }
+        }
+
+        // Not for handling by this resolver
+        return null;
+    }
+}

==================================================
