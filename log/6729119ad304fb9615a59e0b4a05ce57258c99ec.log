6729119ad304fb9615a59e0b4a05ce57258c99ec
==================================================
Clean-up
==================================================
Mark Emlyn
==================================================
Mon Sep 3 22:21:30 2012 +0000
==================================================
ContextAccessController.java
Clean-up
- Java 7 <>

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1380386 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ContextBindings.java
index 09f8a19ab0..346dcad22c 100644
--- a/java/org/apache/naming/ContextAccessController.java
+++ b/java/org/apache/naming/ContextAccessController.java
@@ -37,14 +37,14 @@ public class ContextAccessController {
      * Catalina context names on which writing is not allowed.
      */
     private static final Hashtable<Object,Object> readOnlyContexts =
-        new Hashtable<Object,Object>();
+            new Hashtable<>();
 
 
     /**
      * Security tokens repository.
      */
     private static final Hashtable<Object,Object> securityTokens =
-        new Hashtable<Object,Object>();
+            new Hashtable<>();
 
 
     // --------------------------------------------------------- Public Methods

==================================================
NamingContext.java
index e5e45424f1..5377285b48 100644
--- a/java/org/apache/naming/ContextBindings.java
+++ b/java/org/apache/naming/ContextBindings.java
@@ -44,35 +44,35 @@ public class ContextBindings {
      * Bindings name - naming context. Keyed by name.
      */
     private static final Hashtable<Object,Context> contextNameBindings =
-        new Hashtable<Object,Context>();
+            new Hashtable<>();
 
 
     /**
      * Bindings thread - naming context. Keyed by thread id.
      */
     private static final Hashtable<Thread,Context> threadBindings =
-        new Hashtable<Thread,Context>();
+            new Hashtable<>();
 
 
     /**
      * Bindings thread - name. Keyed by thread id.
      */
     private static final Hashtable<Thread,Object> threadNameBindings =
-        new Hashtable<Thread,Object>();
+            new Hashtable<>();
 
 
     /**
      * Bindings class loader - naming context. Keyed by CL id.
      */
     private static final Hashtable<ClassLoader,Context> clBindings =
-        new Hashtable<ClassLoader,Context>();
+            new Hashtable<>();
 
 
     /**
      * Bindings class loader - name. Keyed by CL id.
      */
     private static final Hashtable<ClassLoader,Object> clNameBindings =
-        new Hashtable<ClassLoader,Object>();
+            new Hashtable<>();
 
 
     /**

==================================================
ServiceRef.java
index b71b92c595..a1b6b65a6e 100644
--- a/java/org/apache/naming/NamingContext.java
+++ b/java/org/apache/naming/NamingContext.java
@@ -70,8 +70,8 @@ public class NamingContext implements Context {
      */
     public NamingContext(Hashtable<String,Object> env, String name)
         throws NamingException {
-        this.bindings = new HashMap<String,NamingEntry>();
-        this.env = new Hashtable<String,Object>();
+        this.bindings = new HashMap<>();
+        this.env = new Hashtable<>();
         // FIXME ? Could be put in the environment ?
         this.name = name;
         // Populating the environment hashtable

==================================================
StringManager.java
index 18e730e5b7..5e626165a2 100644
--- a/java/org/apache/naming/ServiceRef.java
+++ b/java/org/apache/naming/ServiceRef.java
@@ -86,7 +86,7 @@ public class ServiceRef extends Reference {
      * The vector to save the handler Reference objects, because they can't be
      * saved in the addrs vector.
      */
-    private final Vector<HandlerRef> handlers = new Vector<HandlerRef>();
+    private final Vector<HandlerRef> handlers = new Vector<>();
 
 
     // ----------------------------------------------------------- Constructors

==================================================
ServiceProxy.java
index 0eaba78853..bdb156b7ba 100644
--- a/java/org/apache/naming/StringManager.java
+++ b/java/org/apache/naming/StringManager.java
@@ -154,7 +154,7 @@ public class StringManager {
     // --------------------------------------------------------------
 
     private static final Hashtable<String, StringManager> managers =
-        new Hashtable<String, StringManager>();
+            new Hashtable<>();
 
     /**
      * Get the StringManager for a particular package. If a manager for

==================================================
ServiceRefFactory.java
index 7972d9019d..bcce0fc2b1 100644
--- a/java/org/apache/naming/factory/webservices/ServiceProxy.java
+++ b/java/org/apache/naming/factory/webservices/ServiceProxy.java
@@ -97,7 +97,6 @@ public class ServiceProxy implements InvocationHandler {
      * @return Returns the correct Port
      * @throws ServiceException if port's QName is an unknown Port (not defined in WSDL).
      */
-    @SuppressWarnings("unchecked")
     private Object getProxyPortQNameClass(Object[] args)
     throws ServiceException {
         QName name = (QName) args[0];

==================================================
BaseDirContext.java
index 512357c719..4b0bb7bfce 100644
--- a/java/org/apache/naming/factory/webservices/ServiceRefFactory.java
+++ b/java/org/apache/naming/factory/webservices/ServiceRefFactory.java
@@ -92,8 +92,7 @@ public class ServiceRefFactory implements ObjectFactory {
                 wsdlRefAddr = (String) tmp.getContent();
 
             // PortComponent
-            Hashtable<String,QName> portComponentRef =
-                new Hashtable<String,QName>();
+            Hashtable<String,QName> portComponentRef = new Hashtable<>();
 
             // Create QName object
             QName serviceQname = null;
@@ -177,7 +176,6 @@ public class ServiceRefFactory implements ObjectFactory {
                     Definition def = reader.readWSDL((new URL(wsdlRefAddr)).toExternalForm());
 
                     javax.wsdl.Service wsdlservice = def.getService(serviceQname);
-                    @SuppressWarnings("unchecked") // Can't change the API
                     Map<String,?> ports = wsdlservice.getPorts();
                     Method m = serviceInterfaceClass.getMethod("setEndpointAddress",
                             new Class[] { java.lang.String.class,
@@ -244,7 +242,7 @@ public class ServiceRefFactory implements ObjectFactory {
             if (((ServiceRef) ref).getHandlersSize() > 0) {
 
                 HandlerRegistry handlerRegistry = service.getHandlerRegistry();
-                ArrayList<String> soaproles = new ArrayList<String>();
+                ArrayList<String> soaproles = new ArrayList<>();
 
                 while (((ServiceRef) ref).getHandlersSize() > 0) {
                     HandlerRef handlerRef = ((ServiceRef) ref).getHandler();
@@ -263,9 +261,9 @@ public class ServiceRefFactory implements ObjectFactory {
 
                     // Load all datas relative to the handler : SOAPHeaders, config init element,
                     // portNames to be set on
-                    ArrayList<QName> headers = new ArrayList<QName>();
-                    Hashtable<String,String> config = new Hashtable<String,String>();
-                    ArrayList<String> portNames = new ArrayList<String>();
+                    ArrayList<QName> headers = new ArrayList<>();
+                    Hashtable<String,String> config = new Hashtable<>();
+                    ArrayList<String> portNames = new ArrayList<>();
                     for (int i = 0; i < handlerRef.size(); i++)
                         if (HandlerRef.HANDLER_LOCALPART.equals(handlerRef.get(i).getType())) {
                             String localpart = "";
@@ -329,7 +327,6 @@ public class ServiceRefFactory implements ObjectFactory {
      */
     private String getSOAPLocation(Port port) {
         String endpoint = null;
-        @SuppressWarnings("unchecked") // Can't change the API
         List<ExtensibilityElement> extensions = port.getExtensibilityElements();
         for (Iterator<ExtensibilityElement> i = extensions.iterator();
                 i.hasNext();) {
@@ -346,7 +343,6 @@ public class ServiceRefFactory implements ObjectFactory {
     private void initHandlerChain(QName portName, HandlerRegistry handlerRegistry,
             HandlerInfo handlerInfo, ArrayList<String> soaprolesToAdd) {
         HandlerChain handlerChain = (HandlerChain) handlerRegistry.getHandlerChain(portName);
-        @SuppressWarnings("unchecked") // Can't change the API
         Iterator<Handler> iter = handlerChain.iterator();
         while (iter.hasNext()) {
             Handler handler = iter.next();

==================================================
DirContextURLConnection.java
index be8b74a6f4..7fe7839427 100644
--- a/java/org/apache/naming/resources/BaseDirContext.java
+++ b/java/org/apache/naming/resources/BaseDirContext.java
@@ -70,7 +70,7 @@ public abstract class BaseDirContext implements DirContext {
      * Builds a base directory context.
      */
     public BaseDirContext() {
-        this.env = new Hashtable<String,Object>();
+        this.env = new Hashtable<>();
     }
 
 
@@ -130,8 +130,7 @@ public abstract class BaseDirContext implements DirContext {
     /**
      * Aliases allow content to be included from other locations.
      */
-    protected final Map<String,BaseDirContext> aliases =
-        new HashMap<String,BaseDirContext>();
+    protected final Map<String,BaseDirContext> aliases = new HashMap<>();
 
 
     /**
@@ -139,7 +138,7 @@ public abstract class BaseDirContext implements DirContext {
      * searched in the order they are added if the requested resource cannot be
      * found in the primary DirContext.
      */
-    protected final List<DirContext> altDirContexts = new ArrayList<DirContext>();
+    protected final List<DirContext> altDirContexts = new ArrayList<>();
 
 
     // ------------------------------------------------------------- Properties

==================================================
DirContextURLStreamHandler.java
index 874f1fd3a1..73fd972078 100644
--- a/java/org/apache/naming/resources/DirContextURLConnection.java
+++ b/java/org/apache/naming/resources/DirContextURLConnection.java
@@ -270,7 +270,7 @@ public class DirContextURLConnection extends URLConnection {
           return (Collections.emptyMap());
 
       HashMap<String,List<String>> headerFields =
-          new HashMap<String,List<String>>(attributes.size());
+              new HashMap<>(attributes.size());
       NamingEnumeration<String> attributeEnum = attributes.getIDs();
       try {
           while (attributeEnum.hasMore()) {
@@ -278,7 +278,7 @@ public class DirContextURLConnection extends URLConnection {
               Attribute attribute = attributes.get(attributeID);
               if (attribute == null) continue;
               ArrayList<String> attributeValueList =
-                  new ArrayList<String>(attribute.size());
+                      new ArrayList<>(attribute.size());
               NamingEnumeration<?> attributeValues = attribute.getAll();
               while (attributeValues.hasMore()) {
                   Object attrValue = attributeValues.next();
@@ -360,7 +360,6 @@ public class DirContextURLConnection extends URLConnection {
     /**
      * Get object content.
      */
-    @SuppressWarnings("rawtypes") // overridden method uses raw type Class[]
     @Override
     public Object getContent(Class[] classes)
         throws IOException {
@@ -434,7 +433,7 @@ public class DirContextURLConnection extends URLConnection {
                     getURL() == null ? "null" : getURL().toString());
         }
 
-        Vector<String> result = new Vector<String>();
+        Vector<String> result = new Vector<>();
 
         if (collection != null) {
             try {

==================================================
DirContextURLStreamHandlerFactory.java
index 6e45d671d8..edf2e8a7d7 100644
--- a/java/org/apache/naming/resources/DirContextURLStreamHandler.java
+++ b/java/org/apache/naming/resources/DirContextURLStreamHandler.java
@@ -53,14 +53,14 @@ public class DirContextURLStreamHandler extends URLStreamHandler {
      * Bindings class loader - directory context. Keyed by CL id.
      */
     private static final Hashtable<ClassLoader,DirContext> clBindings =
-        new Hashtable<ClassLoader,DirContext>();
+            new Hashtable<>();
 
 
     /**
      * Bindings thread - directory context. Keyed by thread id.
      */
     private static final Hashtable<Thread,DirContext> threadBindings =
-        new Hashtable<Thread,DirContext>();
+            new Hashtable<>();
 
 
     // ----------------------------------------------------- Instance Variables

==================================================
FileDirContext.java
index d27f5583c1..cd71366307 100644
--- a/java/org/apache/naming/resources/DirContextURLStreamHandlerFactory.java
+++ b/java/org/apache/naming/resources/DirContextURLStreamHandlerFactory.java
@@ -45,7 +45,7 @@ public class DirContextURLStreamHandlerFactory
 
 
     private final List<URLStreamHandlerFactory> userFactories =
-        new CopyOnWriteArrayList<URLStreamHandlerFactory>();
+            new CopyOnWriteArrayList<>();
 
     private DirContextURLStreamHandlerFactory() {
         // Hide the default constructor

==================================================
ResourceAttributes.java
index 6b57f24462..8642f5634f 100644
--- a/java/org/apache/naming/resources/FileDirContext.java
+++ b/java/org/apache/naming/resources/FileDirContext.java
@@ -851,7 +851,7 @@ public class FileDirContext extends BaseDirContext {
      */
     protected List<NamingEntry> list(File file) {
 
-        List<NamingEntry> entries = new ArrayList<NamingEntry>();
+        List<NamingEntry> entries = new ArrayList<>();
         if (!file.isDirectory())
             return entries;
         String[] names = file.list();

==================================================
ResourceCache.java
index 82abb95319..4c836e0ecd 100644
--- a/java/org/apache/naming/resources/ResourceAttributes.java
+++ b/java/org/apache/naming/resources/ResourceAttributes.java
@@ -821,7 +821,7 @@ public class ResourceAttributes implements Attributes {
     @Override
     public NamingEnumeration<? extends Attribute> getAll() {
         if (attributes == null) {
-            Vector<BasicAttribute> attributes = new Vector<BasicAttribute>();
+            Vector<BasicAttribute> attributes = new Vector<>();
             Date creationDate = getCreationDate();
             if (creationDate != null) {
                 attributes.addElement(new BasicAttribute
@@ -856,7 +856,7 @@ public class ResourceAttributes implements Attributes {
                 attributes.addElement(new BasicAttribute(ETAG, etag));
                 attributes.addElement(new BasicAttribute(ALTERNATE_ETAG, etag));
             }
-            return new RecyclableNamingEnumeration<BasicAttribute>(attributes);
+            return new RecyclableNamingEnumeration<>(attributes);
         } else {
             return attributes.getAll();
         }
@@ -869,7 +869,7 @@ public class ResourceAttributes implements Attributes {
     @Override
     public NamingEnumeration<String> getIDs() {
         if (attributes == null) {
-            Vector<String> attributeIDs = new Vector<String>();
+            Vector<String> attributeIDs = new Vector<>();
             Date creationDate = getCreationDate();
             if (creationDate != null) {
                 attributeIDs.addElement(CREATION_DATE);
@@ -898,7 +898,7 @@ public class ResourceAttributes implements Attributes {
                 attributeIDs.addElement(ETAG);
                 attributeIDs.addElement(ALTERNATE_ETAG);
             }
-            return new RecyclableNamingEnumeration<String>(attributeIDs);
+            return new RecyclableNamingEnumeration<>(attributeIDs);
         } else {
             return attributes.getIDs();
         }

==================================================
VirtualDirContext.java
index dd6c396fd4..3bf6d63568 100644
--- a/java/org/apache/naming/resources/ResourceCache.java
+++ b/java/org/apache/naming/resources/ResourceCache.java
@@ -57,8 +57,7 @@ public class ResourceCache {
     /**
      * Not found cache.
      */
-    protected final HashMap<String,CacheEntry> notFoundCache =
-        new HashMap<String,CacheEntry>();
+    protected final HashMap<String,CacheEntry> notFoundCache = new HashMap<>();
 
 
     /**

==================================================
WARDirContext.java
index 7eb37096c7..82f9c69473 100644
--- a/java/org/apache/naming/resources/VirtualDirContext.java
+++ b/java/org/apache/naming/resources/VirtualDirContext.java
@@ -90,7 +90,7 @@ public class VirtualDirContext extends FileDirContext {
     public void allocate() {
         super.allocate();
 
-        mappedResourcePaths = new HashMap<String, List<String>>();
+        mappedResourcePaths = new HashMap<>();
         StringTokenizer tkn = new StringTokenizer(extraResourcePaths, ",");
         while (tkn.hasMoreTokens()) {
             String resSpec = tkn.nextToken();
@@ -110,7 +110,7 @@ public class VirtualDirContext extends FileDirContext {
                 String dir = resSpec.substring(idx + 1);
                 List<String> resourcePaths = mappedResourcePaths.get(path);
                 if (resourcePaths == null) {
-                    resourcePaths = new ArrayList<String>();
+                    resourcePaths = new ArrayList<>();
                     mappedResourcePaths.put(path, resourcePaths);
                 }
                 resourcePaths.add(dir);
@@ -209,7 +209,7 @@ public class VirtualDirContext extends FileDirContext {
         List<NamingEntry> entries = super.list(file);
 
         if (mappedResourcePaths != null && !mappedResourcePaths.isEmpty()) {
-            Set<String> entryNames = new HashSet<String>(entries.size());
+            Set<String> entryNames = new HashSet<>(entries.size());
             for (NamingEntry entry : entries) {
                 entryNames.add(entry.name);
             }

==================================================
