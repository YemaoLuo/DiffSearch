3119cab61553718d466e378af35c0edd5302a680
==================================================
Allow Valves to access cookies when no Context has been mapped
==================================================
Mark Thomas
==================================================
Tue Jan 17 12:41:00 2023 +0000
==================================================
Request.java
Allow Valves to access cookies when no Context has been mapped


==================================================
TestRewriteValve.java
index e35dbcd085..ba7611d5c3 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -103,6 +103,7 @@ import org.apache.tomcat.util.http.CookieProcessor;
 import org.apache.tomcat.util.http.FastHttpDateFormat;
 import org.apache.tomcat.util.http.Parameters;
 import org.apache.tomcat.util.http.Parameters.FailReason;
+import org.apache.tomcat.util.http.Rfc6265CookieProcessor;
 import org.apache.tomcat.util.http.ServerCookie;
 import org.apache.tomcat.util.http.ServerCookies;
 import org.apache.tomcat.util.http.fileupload.FileItem;
@@ -3047,6 +3048,18 @@ public class Request implements HttpServletRequest {
         return buf.toString();
     }
 
+    private CookieProcessor getCookieProcessor() {
+        Context context = getContext();
+        if (context == null) {
+            // No context. Possible call from Valve before a Host level
+            // context rewrite when no ROOT content is configured. Use the
+            // default CookiePreocessor.
+            return new Rfc6265CookieProcessor();
+        } else {
+            return context.getCookieProcessor();
+        }
+    }
+
     /**
      * Parse cookies. This only parses the cookies into the memory efficient
      * ServerCookies structure. It does not populate the Cookie objects.
@@ -3060,8 +3073,7 @@ public class Request implements HttpServletRequest {
 
         ServerCookies serverCookies = coyoteRequest.getCookies();
         serverCookies.setLimit(connector.getMaxCookieCount());
-        CookieProcessor cookieProcessor = getContext().getCookieProcessor();
-        cookieProcessor.parseCookieHeader(coyoteRequest.getMimeHeaders(), serverCookies);
+        getCookieProcessor().parseCookieHeader(coyoteRequest.getMimeHeaders(), serverCookies);
     }
 
     /**
@@ -3075,14 +3087,9 @@ public class Request implements HttpServletRequest {
 
         cookiesConverted = true;
 
-        if (getContext() == null) {
-            return;
-        }
-
         parseCookies();
 
         ServerCookies serverCookies = coyoteRequest.getCookies();
-        CookieProcessor cookieProcessor = getContext().getCookieProcessor();
 
         int count = serverCookies.getCookieCount();
         if (count <= 0) {
@@ -3097,7 +3104,7 @@ public class Request implements HttpServletRequest {
             try {
                 // We must unescape the '\\' escape character
                 Cookie cookie = new Cookie(scookie.getName().toString(),null);
-                scookie.getValue().getByteChunk().setCharset(cookieProcessor.getCharset());
+                scookie.getValue().getByteChunk().setCharset(getCookieProcessor().getCharset());
                 cookie.setValue(unescape(scookie.getValue().toString()));
                 cookies[idx++] = cookie;
             } catch(IllegalArgumentException e) {

==================================================
