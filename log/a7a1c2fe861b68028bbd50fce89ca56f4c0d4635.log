a7a1c2fe861b68028bbd50fce89ca56f4c0d4635
==================================================
simplify register and poller interest for comet, all can be done in one call
==================================================
Filip Hanik
==================================================
Thu May 31 08:48:01 2007 +0000
==================================================
CometEventImpl.java
simplify register and poller interest for comet, all can be done in one call


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@543086 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11NioProcessor.java
index b0b68df004..728f054d16 100644
--- a/java/org/apache/catalina/connector/CometEventImpl.java
+++ b/java/org/apache/catalina/connector/CometEventImpl.java
@@ -28,6 +28,7 @@ import org.apache.catalina.CometEvent;
 import org.apache.catalina.util.StringManager;
 import org.apache.coyote.ActionCode;
 import org.apache.tomcat.util.net.PollerInterest;
+import java.util.Arrays;
 
 public class CometEventImpl implements CometEvent {
 
@@ -160,23 +161,15 @@ public class CometEventImpl implements CometEvent {
     public void register(CometEvent.CometOperation... operations)
         throws IOException, IllegalStateException {
         //add it to the registered set
-        for (CometEvent.CometOperation co : operations) {
-            if (!cometOperations.contains(co)) {
-                cometOperations.add(co);
-                request.action(ActionCode.ACTION_COMET_REGISTER, translate(co));
-            }
-        }
+        cometOperations.addAll(Arrays.asList(operations));
+        request.action(ActionCode.ACTION_COMET_REGISTER, translate(cometOperations.toArray(new CometOperation[0])));
     }
 
     public void unregister(CometOperation... operations)
         throws IOException, IllegalStateException {
         //remove from the registered set
-        for (CometEvent.CometOperation co : operations) {
-            if (cometOperations.contains(co)) {
-                cometOperations.remove(co);
-                request.action(ActionCode.ACTION_COMET_UNREGISTER, translate(co));
-            }
-        }
+        cometOperations.removeAll(Arrays.asList(operations));
+        request.action(ActionCode.ACTION_COMET_UNREGISTER, translate(cometOperations.toArray(new CometOperation[0])));
     }
     
     public CometConfiguration[] getConfiguration() {
@@ -211,15 +204,19 @@ public class CometEventImpl implements CometEvent {
             throw new IllegalStateException("The operation can only be performed when invoked by a Tomcat worker thread.");
     }
     
-    protected PollerInterest translate(CometOperation op) {
-        if ( op == CometEvent.CometOperation.OP_READ )
-            return PollerInterest.READ;
-        else if ( op == CometEvent.CometOperation.OP_WRITE )
-            return PollerInterest.WRITE;
-        else if ( op == CometEvent.CometOperation.OP_CALLBACK )
-            return PollerInterest.CALLBACK;
-        else 
-            throw new IllegalArgumentException(op!=null?op.toString():"null");
+    protected PollerInterest[] translate(CometOperation... op) {
+        PollerInterest[] result = new PollerInterest[op.length];
+        for (int i=0; i<result.length; i++) {
+            if (op[i] == CometEvent.CometOperation.OP_READ)
+                result[i] = PollerInterest.READ;
+            else if (op[i] == CometEvent.CometOperation.OP_WRITE)
+                result[i] = PollerInterest.WRITE;
+            else if (op[i] == CometEvent.CometOperation.OP_CALLBACK)
+                result[i] = PollerInterest.CALLBACK;
+            else
+                throw new IllegalArgumentException(op != null ? op.toString() : "null");
+        }
+        return result;
     }
     
     //inner class used to keep track if the current thread is a worker thread.

==================================================
NioEndpoint.java
index 9c416c6d80..a068dd482f 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -1242,18 +1242,20 @@ public class Http11NioProcessor implements ActionHook {
     }
 
     private int getPollerInterest(Object param) throws IllegalArgumentException {
-        if ( param == null || (!(param instanceof PollerInterest)) )
-            throw new IllegalArgumentException("Action parameter must be a PollerInterest object.");
+        if ( param == null || (!(param instanceof PollerInterest[])) )
+            throw new IllegalArgumentException("Action parameter must be a PollerInterest[] object.");
         int interest = 0;
-        PollerInterest pi = (PollerInterest)param;
-        if ( pi == PollerInterest.CALLBACK )
-            interest = NioEndpoint.OP_CALLBACK;
-        else if ( pi == PollerInterest.READ ) 
-            interest  = SelectionKey.OP_READ;
-        else if ( pi == PollerInterest.WRITE ) 
-            interest = SelectionKey.OP_WRITE;
-        else
-            throw new IllegalArgumentException(pi!=null?pi.toString():"null");
+        PollerInterest[] piarr = (PollerInterest[])param;
+        for ( PollerInterest pi : piarr ) {
+            if (pi == PollerInterest.CALLBACK)
+                interest = interest | NioEndpoint.OP_CALLBACK;
+            else if (pi == PollerInterest.READ)
+                interest = interest | SelectionKey.OP_READ;
+            else if (pi == PollerInterest.WRITE)
+                interest = interest | SelectionKey.OP_WRITE;
+            else
+                throw new IllegalArgumentException(pi != null ? pi.toString() : "null");
+        }
         return interest;
     }
 

==================================================
