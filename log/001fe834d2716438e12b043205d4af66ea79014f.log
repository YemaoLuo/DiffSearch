001fe834d2716438e12b043205d4af66ea79014f
==================================================
Update the internal fork of Apache Commons Pool 2 to d4e0e88 (2018-09-12) to pick up some clean-up.
==================================================
Mark Thomas
==================================================
Wed Sep 12 15:49:58 2018 +0000
==================================================
BaseGenericObjectPool.java
index 4a37b2d5bb..8559dcdf63 100644
--- a/MERGE.txt
+++ b/MERGE.txt
@@ -75,4 +75,4 @@ Pool2
 Sub-tree
 src/main/java/org/apache/commons/pool2
 The SHA1 ID for the most recent commit to be merged to Tomcat is:
-3e02523b6907fb22f3582544fe362c785821bcb8
+d4e0e88227ad91d8c8ef36ba01d656f71c770f83

==================================================
EvictionTimer.java
index 9002cee44c..0de61d6f3d 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/BaseGenericObjectPool.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/BaseGenericObjectPool.java
@@ -217,7 +217,7 @@ public abstract class BaseGenericObjectPool<T> extends BaseObject {
         this.blockWhenExhausted = blockWhenExhausted;
     }
 
-    protected void setConfig(BaseObjectPoolConfig<T> conf) {
+    protected void setConfig(final BaseObjectPoolConfig<T> conf) {
         setLifo(conf.getLifo());
         setMaxWaitMillis(conf.getMaxWaitMillis());
         setBlockWhenExhausted(conf.getBlockWhenExhausted());
@@ -784,6 +784,12 @@ public abstract class BaseGenericObjectPool<T> extends BaseObject {
         }
     }
 
+    /**
+     * Stops the evictor.
+     */
+    void stopEvitor() {
+        startEvictor(-1L);
+    }
     /**
      * Tries to ensure that the configured minimum number of idle instances are
      * available in the pool.

==================================================
GenericKeyedObjectPool.java
index d7cad987c3..b483dc3b28 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/EvictionTimer.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/EvictionTimer.java
@@ -107,23 +107,23 @@ class EvictionTimer {
     }
 
     /**
-     * Thread factory that creates a thread, with the context classloader from this class.
+     * Thread factory that creates a thread, with the context class loader from this class.
      */
     private static class EvictorThreadFactory implements ThreadFactory {
 
         @Override
-        public Thread newThread(final Runnable r) {
-            final Thread t = new Thread(null, r, "commons-pool-evictor-thread");
+        public Thread newThread(final Runnable runnable) {
+            final Thread thread = new Thread(null, runnable, "commons-pool-evictor-thread");
 
             AccessController.doPrivileged(new PrivilegedAction<Void>() {
                 @Override
                 public Void run() {
-                    t.setContextClassLoader(EvictorThreadFactory.class.getClassLoader());
+                    thread.setContextClassLoader(EvictorThreadFactory.class.getClassLoader());
                     return null;
                 }
             });
 
-            return t;
+            return thread;
         }
     }
 }

==================================================
GenericObjectPool.java
index c067e5b966..d9c9c8fdac 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/GenericKeyedObjectPool.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/GenericKeyedObjectPool.java
@@ -689,7 +689,7 @@ public class GenericKeyedObjectPool<K, T> extends BaseGenericObjectPool<T>
 
             // Stop the evictor before the pool is closed since evict() calls
             // assertOpen()
-            startEvictor(-1L);
+            stopEvitor();
 
             closed = true;
             // This clear removes any idle objects

==================================================
