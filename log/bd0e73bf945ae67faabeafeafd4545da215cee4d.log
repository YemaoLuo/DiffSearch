bd0e73bf945ae67faabeafeafd4545da215cee4d
==================================================
Refactoring: HTTP/1.1 - HTTP/2 alignment
==================================================
Mark Thomas
==================================================
Thu Nov 30 10:20:39 2017 +0000
==================================================
Http2OutputBuffer.java
Refactoring: HTTP/1.1 - HTTP/2 alignment

Add the Http2OutputBuffer which will be the insertion point for
the GZip filter.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1816702 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Stream.java
new file mode 100644
index 0000000000..bb3cbe24fd
--- /dev/null
+++ b/java/org/apache/coyote/http2/Http2OutputBuffer.java
@@ -0,0 +1,73 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.coyote.http2;
+
+import java.io.IOException;
+import java.nio.ByteBuffer;
+
+import org.apache.coyote.http.HttpOutputBuffer;
+import org.apache.coyote.http11.OutputFilter;
+import org.apache.coyote.http2.Stream.StreamOutputBuffer;
+
+public class Http2OutputBuffer implements HttpOutputBuffer {
+
+    private HttpOutputBuffer next;
+
+
+    /**
+     * Add a filter at the start of the existing processing chain. Subsequent
+     * calls to the {@link HttpOutputBuffer} methods of this object will be
+     * passed to the filter. If appropriate, the filter will then call the same
+     * method on the next HttpOutputBuffer in the chain until the call reaches
+     * the StreamOutputBuffer.
+     *
+     * @param filter    The filter to add to the start of the processing chain
+     */
+    public void addFilter(OutputFilter filter) {
+        filter.setBuffer(next);
+        next = filter;
+    }
+
+
+    public Http2OutputBuffer(StreamOutputBuffer streamOutputBuffer) {
+        this.next = streamOutputBuffer;
+    }
+
+
+    @Override
+    public int doWrite(ByteBuffer chunk) throws IOException {
+        return next.doWrite(chunk);
+    }
+
+
+    @Override
+    public long getBytesWritten() {
+        return next.getBytesWritten();
+    }
+
+
+    @Override
+    public void end() throws IOException {
+        next.end();
+    }
+
+
+    @Override
+    public void flush() throws IOException {
+        next.flush();
+    }
+}

==================================================
StreamProcessor.java
index fe1873fe49..6cc2f50a1e 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -75,7 +75,8 @@ class Stream extends AbstractStream implements HeaderEmitter {
     private StringBuilder cookieHeader = null;
     private final Response coyoteResponse = new Response();
     private final StreamInputBuffer inputBuffer;
-    private final StreamOutputBuffer outputBuffer = new StreamOutputBuffer();
+    private final StreamOutputBuffer streamOutputBuffer = new StreamOutputBuffer();
+    private final Http2OutputBuffer http2OutputBuffer = new Http2OutputBuffer(streamOutputBuffer);
 
 
     Stream(Integer identifier, Http2UpgradeHandler handler) {
@@ -104,7 +105,7 @@ class Stream extends AbstractStream implements HeaderEmitter {
             state.receivedEndOfStream();
         }
         this.coyoteRequest.setSendfile(handler.hasAsyncIO() && handler.getProtocol().getUseSendfile());
-        this.coyoteResponse.setOutputBuffer(outputBuffer);
+        this.coyoteResponse.setOutputBuffer(http2OutputBuffer);
         this.coyoteRequest.setResponse(coyoteResponse);
         this.coyoteRequest.protocol().setString("HTTP/2.0");
         if (this.coyoteRequest.getStartTime() < 0) {
@@ -406,7 +407,7 @@ class Stream extends AbstractStream implements HeaderEmitter {
 
 
     final void writeHeaders() throws IOException {
-        boolean endOfStream = getOutputBuffer().hasNoBody() &&
+        boolean endOfStream = streamOutputBuffer.hasNoBody() &&
                 coyoteResponse.getTrailerFields() == null;
         // TODO: Is 1k the optimal value?
         handler.writeHeaders(this, 0, coyoteResponse.getMimeHeaders(), endOfStream, 1024);
@@ -525,18 +526,28 @@ class Stream extends AbstractStream implements HeaderEmitter {
 
 
     final void sentEndOfStream() {
-        outputBuffer.endOfStreamSent = true;
+        streamOutputBuffer.endOfStreamSent = true;
         state.sentEndOfStream();
     }
 
 
+    final boolean isReady() {
+        return streamOutputBuffer.isReady();
+    }
+
+
+    final boolean flush(boolean block) throws IOException {
+        return streamOutputBuffer.flush(block);
+    }
+
+
     final StreamInputBuffer getInputBuffer() {
         return inputBuffer;
     }
 
 
-    final StreamOutputBuffer getOutputBuffer() {
-        return outputBuffer;
+    final HttpOutputBuffer getOutputBuffer() {
+        return http2OutputBuffer;
     }
 
 
@@ -632,7 +643,7 @@ class Stream extends AbstractStream implements HeaderEmitter {
 
 
     boolean isTrailerFieldsSupported() {
-        return !getOutputBuffer().endOfStreamSent;
+        return !streamOutputBuffer.endOfStreamSent;
     }
 
 

==================================================
