55c52b0f0697d2e12d9ce842d0f7f0df20da1ff7
==================================================
Replace Boolean.valueOf(String).booleanValue()  with Boolean.parseBoolean().
==================================================
Konstantin Kolinko
==================================================
Wed Oct 28 03:17:12 2015 +0000
==================================================
Globals.java
Replace Boolean.valueOf(String).booleanValue()  with Boolean.parseBoolean().

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1710933 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Connector.java
index 131885d931..bebda36072 100644
--- a/java/org/apache/catalina/Globals.java
+++ b/java/org/apache/catalina/Globals.java
@@ -222,7 +222,7 @@ public final class Globals {
      * compliance.
      */
     public static final boolean STRICT_SERVLET_COMPLIANCE =
-        Boolean.valueOf(System.getProperty("org.apache.catalina.STRICT_SERVLET_COMPLIANCE", "false")).booleanValue();
+        Boolean.parseBoolean(System.getProperty("org.apache.catalina.STRICT_SERVLET_COMPLIANCE", "false"));
 
 
     /**

==================================================
CoyoteAdapter.java
index ef137c850a..eb92d0fcdd 100644
--- a/java/org/apache/catalina/connector/Connector.java
+++ b/java/org/apache/catalina/connector/Connector.java
@@ -55,7 +55,7 @@ public class Connector extends LifecycleMBeanBase  {
      * Alternate flag to enable recycling of facades.
      */
     public static final boolean RECYCLE_FACADES =
-        Boolean.valueOf(System.getProperty("org.apache.catalina.connector.RECYCLE_FACADES", "false")).booleanValue();
+        Boolean.parseBoolean(System.getProperty("org.apache.catalina.connector.RECYCLE_FACADES", "false"));
 
 
     // ------------------------------------------------------------ Constructor

==================================================
Response.java
index 2ae93a1bcc..a4e4221ba5 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -79,7 +79,7 @@ public class CoyoteAdapter implements Adapter {
 
 
     protected static final boolean ALLOW_BACKSLASH =
-        Boolean.valueOf(System.getProperty("org.apache.catalina.connector.CoyoteAdapter.ALLOW_BACKSLASH", "false")).booleanValue();
+        Boolean.parseBoolean(System.getProperty("org.apache.catalina.connector.CoyoteAdapter.ALLOW_BACKSLASH", "false"));
 
 
     private static final ThreadLocal<String> THREAD_NAME =

==================================================
ApplicationContext.java
index fff4225b10..b5506cdd41 100644
--- a/java/org/apache/catalina/connector/Response.java
+++ b/java/org/apache/catalina/connector/Response.java
@@ -81,9 +81,9 @@ public class Response
     private static final boolean ENFORCE_ENCODING_IN_GET_WRITER;
 
     static {
-        ENFORCE_ENCODING_IN_GET_WRITER = Boolean.valueOf(
+        ENFORCE_ENCODING_IN_GET_WRITER = Boolean.parseBoolean(
                 System.getProperty("org.apache.catalina.connector.Response.ENFORCE_ENCODING_IN_GET_WRITER",
-                        "true")).booleanValue();
+                        "true"));
     }
 
     public Response() {

==================================================
ApplicationDispatcher.java
index 2e1bffa31e..41c17b80bf 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -96,8 +96,7 @@ public class ApplicationContext
         if (requireSlash == null) {
             GET_RESOURCE_REQUIRE_SLASH = STRICT_SERVLET_COMPLIANCE;
         } else {
-            GET_RESOURCE_REQUIRE_SLASH =
-                Boolean.valueOf(requireSlash).booleanValue();
+            GET_RESOURCE_REQUIRE_SLASH = Boolean.parseBoolean(requireSlash);
         }
     }
 

==================================================
StandardHostValve.java
index 630b2170c9..3e013260d2 100644
--- a/java/org/apache/catalina/core/ApplicationDispatcher.java
+++ b/java/org/apache/catalina/core/ApplicationDispatcher.java
@@ -76,8 +76,7 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
         if (wrapSameObject == null) {
             WRAP_SAME_OBJECT = STRICT_SERVLET_COMPLIANCE;
         } else {
-            WRAP_SAME_OBJECT =
-                Boolean.valueOf(wrapSameObject).booleanValue();
+            WRAP_SAME_OBJECT = Boolean.parseBoolean(wrapSameObject);
         }
     }
 

==================================================
CGIServlet.java
index 6e59e616d0..461740eb97 100644
--- a/java/org/apache/catalina/core/StandardHostValve.java
+++ b/java/org/apache/catalina/core/StandardHostValve.java
@@ -69,8 +69,7 @@ final class StandardHostValve extends ValveBase {
         if (accessSession == null) {
             ACCESS_SESSION = STRICT_SERVLET_COMPLIANCE;
         } else {
-            ACCESS_SESSION =
-                Boolean.valueOf(accessSession).booleanValue();
+            ACCESS_SESSION = Boolean.parseBoolean(accessSession);
         }
     }
 

==================================================
StandardSession.java
index fd52a37a22..b9f875d4f9 100644
--- a/java/org/apache/catalina/servlets/CGIServlet.java
+++ b/java/org/apache/catalina/servlets/CGIServlet.java
@@ -305,7 +305,7 @@ public final class CGIServlet extends HttpServlet {
             debug = Integer.parseInt(getServletConfig().getInitParameter("debug"));
         cgiPathPrefix = getServletConfig().getInitParameter("cgiPathPrefix");
         boolean passShellEnvironment =
-            Boolean.valueOf(getServletConfig().getInitParameter("passShellEnvironment")).booleanValue();
+            Boolean.parseBoolean(getServletConfig().getInitParameter("passShellEnvironment"));
 
         if (passShellEnvironment) {
             shellEnv.putAll(System.getenv());

==================================================
MemoryUserDatabaseFactory.java
index 4cdf8ab838..16dfb0162b 100644
--- a/java/org/apache/catalina/session/StandardSession.java
+++ b/java/org/apache/catalina/session/StandardSession.java
@@ -96,8 +96,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
         if (activityCheck == null) {
             ACTIVITY_CHECK = STRICT_SERVLET_COMPLIANCE;
         } else {
-            ACTIVITY_CHECK =
-                Boolean.valueOf(activityCheck).booleanValue();
+            ACTIVITY_CHECK = Boolean.parseBoolean(activityCheck);
         }
 
         String lastAccessAtStart = System.getProperty(
@@ -105,8 +104,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
         if (lastAccessAtStart == null) {
             LAST_ACCESS_AT_START = STRICT_SERVLET_COMPLIANCE;
         } else {
-            LAST_ACCESS_AT_START =
-                Boolean.valueOf(lastAccessAtStart).booleanValue();
+            LAST_ACCESS_AT_START = Boolean.parseBoolean(lastAccessAtStart);
         }
     }
 

==================================================
JDBCAccessLogValve.java
index a38e35898b..3ad0b17e08 100644
--- a/java/org/apache/catalina/users/MemoryUserDatabaseFactory.java
+++ b/java/org/apache/catalina/users/MemoryUserDatabaseFactory.java
@@ -95,7 +95,7 @@ public class MemoryUserDatabaseFactory implements ObjectFactory {
 
         ra = ref.get("readonly");
         if (ra != null) {
-            database.setReadonly(Boolean.valueOf(ra.getContent().toString()).booleanValue());
+            database.setReadonly(Boolean.parseBoolean(ra.getContent().toString()));
         }
 
         // Return the configured database instance

==================================================
ELSupport.java
index 5fb24db6c4..f6042ccf37 100644
--- a/java/org/apache/catalina/valves/JDBCAccessLogValve.java
+++ b/java/org/apache/catalina/valves/JDBCAccessLogValve.java
@@ -416,7 +416,7 @@ public final class JDBCAccessLogValve extends ValveBase implements AccessLog {
      * is desired or not.
      */
     public void setResolveHosts(String resolveHosts) {
-        this.resolveHosts = Boolean.valueOf(resolveHosts).booleanValue();
+        this.resolveHosts = Boolean.parseBoolean(resolveHosts);
     }
 
     /**

==================================================
Validation.java
index f962c51c15..c8e0c36bf3 100644
--- a/java/org/apache/el/lang/ELSupport.java
+++ b/java/org/apache/el/lang/ELSupport.java
@@ -48,23 +48,24 @@ public class ELSupport {
     protected static final boolean COERCE_TO_ZERO;
 
     static {
+        String coerceToZeroStr;
         if (IS_SECURITY_ENABLED) {
-            COERCE_TO_ZERO = AccessController.doPrivileged(
-                    new PrivilegedAction<Boolean>(){
+            coerceToZeroStr = AccessController.doPrivileged(
+                    new PrivilegedAction<String>(){
                         @Override
-                        public Boolean run() {
-                            return Boolean.valueOf(System.getProperty(
+                        public String run() {
+                            return System.getProperty(
                                     "org.apache.el.parser.COERCE_TO_ZERO",
-                                    "false"));
+                                    "false");
                         }
 
                     }
-            ).booleanValue();
+            );
         } else {
-            COERCE_TO_ZERO = Boolean.valueOf(System.getProperty(
-                    "org.apache.el.parser.COERCE_TO_ZERO",
-                    "false")).booleanValue();
+            coerceToZeroStr = System.getProperty(
+                    "org.apache.el.parser.COERCE_TO_ZERO", "false");
         }
+        COERCE_TO_ZERO = Boolean.parseBoolean(coerceToZeroStr);
     }
 
 

==================================================
Constants.java
index 3f32828001..09a5ebe8ae 100644
--- a/java/org/apache/el/util/Validation.java
+++ b/java/org/apache/el/util/Validation.java
@@ -39,22 +39,23 @@ public class Validation {
     private static final boolean SKIP_IDENTIFIER_CHECK;
 
     static {
+        String skipIdentifierCheckStr;
         if (IS_SECURITY_ENABLED) {
-            SKIP_IDENTIFIER_CHECK = AccessController.doPrivileged(
-                    new PrivilegedAction<Boolean>(){
+            skipIdentifierCheckStr = AccessController.doPrivileged(
+                    new PrivilegedAction<String>(){
                         @Override
-                        public Boolean run() {
-                            return Boolean.valueOf(System.getProperty(
+                        public String run() {
+                            return System.getProperty(
                                     "org.apache.el.parser.SKIP_IDENTIFIER_CHECK",
-                            "false"));
+                                    "false");
                         }
                     }
-            ).booleanValue();
+            );
         } else {
-            SKIP_IDENTIFIER_CHECK = Boolean.valueOf(System.getProperty(
-                    "org.apache.el.parser.SKIP_IDENTIFIER_CHECK",
-            "false")).booleanValue();
+            skipIdentifierCheckStr = System.getProperty(
+                    "org.apache.el.parser.SKIP_IDENTIFIER_CHECK", "false");
         }
+        SKIP_IDENTIFIER_CHECK = Boolean.parseBoolean(skipIdentifierCheckStr);
     }
 
 

==================================================
AttributeParser.java
index a9b79f1e4a..ebb5fa0f9c 100644
--- a/java/org/apache/jasper/Constants.java
+++ b/java/org/apache/jasper/Constants.java
@@ -120,7 +120,7 @@ public class Constants {
         (System.getSecurityManager() != null);
 
     public static final boolean USE_INSTANCE_MANAGER_FOR_TAGS =
-        Boolean.valueOf(System.getProperty("org.apache.jasper.Constants.USE_INSTANCE_MANAGER_FOR_TAGS", "false")).booleanValue();
+        Boolean.parseBoolean(System.getProperty("org.apache.jasper.Constants.USE_INSTANCE_MANAGER_FOR_TAGS", "false"));
 
     /**
      * The name of the path parameter used to pass the session identifier

==================================================
Generator.java
index 59f6f835ff..41277f1619 100644
--- a/java/org/apache/jasper/compiler/AttributeParser.java
+++ b/java/org/apache/jasper/compiler/AttributeParser.java
@@ -29,10 +29,10 @@ package org.apache.jasper.compiler;
 public class AttributeParser {
 
     /* System property that controls if the strict quoting rules are applied. */
-    private static final boolean STRICT_QUOTE_ESCAPING = Boolean.valueOf(
+    private static final boolean STRICT_QUOTE_ESCAPING = Boolean.parseBoolean(
             System.getProperty(
                     "org.apache.jasper.compiler.Parser.STRICT_QUOTE_ESCAPING",
-                    "true")).booleanValue();
+                    "true"));
 
     /**
      * Parses the provided input String as a JSP attribute and returns an

==================================================
JspUtil.java
index 82129f396d..75762a0c67 100644
--- a/java/org/apache/jasper/compiler/Generator.java
+++ b/java/org/apache/jasper/compiler/Generator.java
@@ -91,10 +91,10 @@ class Generator {
      * used in jsp:getProperty action to be previously "introduced"
      * to the JSP processor (see JSP.5.3) is enforced.
      */
-    private static final boolean STRICT_GET_PROPERTY = Boolean.valueOf(
+    private static final boolean STRICT_GET_PROPERTY = Boolean.parseBoolean(
             System.getProperty(
                     "org.apache.jasper.compiler.Generator.STRICT_GET_PROPERTY",
-                    "true")).booleanValue();
+                    "true"));
 
     private final ServletWriter out;
 

==================================================
Parser.java
index 915b5f5d2d..4fb6e2c66b 100644
--- a/java/org/apache/jasper/compiler/JspUtil.java
+++ b/java/org/apache/jasper/compiler/JspUtil.java
@@ -248,7 +248,7 @@ public class JspUtil {
 
     /**
      * Convert a String value to 'boolean'. Besides the standard conversions
-     * done by Boolean.valueOf(s).booleanValue(), the value "yes" (ignore case)
+     * done by Boolean.parseBoolean(s), the value "yes" (ignore case)
      * is also converted to 'true'. If 's' is null, then 'false' is returned.
      *
      * @param s
@@ -261,7 +261,7 @@ public class JspUtil {
             if (s.equalsIgnoreCase("yes")) {
                 b = true;
             } else {
-                b = Boolean.valueOf(s).booleanValue();
+                b = Boolean.parseBoolean(s);
             }
         }
         return b;

==================================================
BodyContentImpl.java
index 473ffeb8e3..810beb7871 100644
--- a/java/org/apache/jasper/compiler/Parser.java
+++ b/java/org/apache/jasper/compiler/Parser.java
@@ -80,10 +80,10 @@ class Parser implements TagConstants {
     /* System property that controls if the strict white space rules are
      * applied.
      */
-    private static final boolean STRICT_WHITESPACE = Boolean.valueOf(
+    private static final boolean STRICT_WHITESPACE = Boolean.parseBoolean(
             System.getProperty(
                     "org.apache.jasper.compiler.Parser.STRICT_WHITESPACE",
-                    "true")).booleanValue();
+                    "true"));
     /**
      * The constructor
      */

==================================================
JspFactoryImpl.java
index 7dc00ed39b..07100814d4 100644
--- a/java/org/apache/jasper/runtime/BodyContentImpl.java
+++ b/java/org/apache/jasper/runtime/BodyContentImpl.java
@@ -40,7 +40,7 @@ import org.apache.jasper.Constants;
 public class BodyContentImpl extends BodyContent {
 
     private static final boolean LIMIT_BUFFER =
-        Boolean.valueOf(System.getProperty("org.apache.jasper.runtime.BodyContentImpl.LIMIT_BUFFER", "false")).booleanValue();
+        Boolean.parseBoolean(System.getProperty("org.apache.jasper.runtime.BodyContentImpl.LIMIT_BUFFER", "false"));
 
     private char[] cb;
     private int nextChar;

==================================================
JspRuntimeLibrary.java
index 174aab57ee..2904d3bae0 100644
--- a/java/org/apache/jasper/runtime/JspFactoryImpl.java
+++ b/java/org/apache/jasper/runtime/JspFactoryImpl.java
@@ -40,7 +40,7 @@ public class JspFactoryImpl extends JspFactory {
 
     private static final String SPEC_VERSION = "2.3";
     private static final boolean USE_POOL =
-        Boolean.valueOf(System.getProperty("org.apache.jasper.runtime.JspFactoryImpl.USE_POOL", "true")).booleanValue();
+        Boolean.parseBoolean(System.getProperty("org.apache.jasper.runtime.JspFactoryImpl.USE_POOL", "true"));
     private static final int POOL_SIZE =
         Integer.valueOf(System.getProperty("org.apache.jasper.runtime.JspFactoryImpl.POOL_SIZE", "8")).intValue();
 

==================================================
ClassLoaderLogManager.java
index 5847f3bcc2..da9be4acde 100644
--- a/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
+++ b/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
@@ -494,7 +494,7 @@ public class JspRuntimeLibrary {
             } else if (t.equals(boolean.class)) {
                 boolean[] tmpval = new boolean[values.length];
                 for (int i = 0 ; i < values.length; i++)
-                    tmpval[i] = (Boolean.valueOf(values[i])).booleanValue();
+                    tmpval[i] = Boolean.parseBoolean(values[i]);
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(short.class)) {
                 short[] tmpval = new short[values.length];

==================================================
UDecoder.java
index ac1f5c2f62..eca3fef26d 100644
--- a/java/org/apache/juli/ClassLoaderLogManager.java
+++ b/java/org/apache/juli/ClassLoaderLogManager.java
@@ -206,7 +206,7 @@ public class ClassLoaderLogManager extends LogManager {
         // Unlike java.util.logging, the default is to not delegate if a list of handlers
         // has been specified for the logger.
         String useParentHandlersString = getProperty(loggerName + ".useParentHandlers");
-        if (Boolean.valueOf(useParentHandlersString).booleanValue()) {
+        if (Boolean.parseBoolean(useParentHandlersString)) {
             logger.setUseParentHandlers(true);
         }
 

==================================================
NioSelectorPool.java
index 26e07af5d7..c07d2d5d00 100644
--- a/java/org/apache/tomcat/util/buf/UDecoder.java
+++ b/java/org/apache/tomcat/util/buf/UDecoder.java
@@ -41,7 +41,7 @@ public final class UDecoder {
     private static final Log log = LogFactory.getLog(UDecoder.class);
 
     public static final boolean ALLOW_ENCODED_SLASH =
-        Boolean.valueOf(System.getProperty("org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH", "false")).booleanValue();
+        Boolean.parseBoolean(System.getProperty("org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH", "false"));
 
     private static class DecodeException extends CharConversionException {
         private static final long serialVersionUID = 1L;

==================================================
DataSourceFactory.java
index 016deaf05a..aa282cf4b5 100644
--- a/java/org/apache/tomcat/util/net/NioSelectorPool.java
+++ b/java/org/apache/tomcat/util/net/NioSelectorPool.java
@@ -44,7 +44,7 @@ public class NioSelectorPool {
     private static final Log log = LogFactory.getLog(NioSelectorPool.class);
 
     protected static final boolean SHARED =
-        Boolean.valueOf(System.getProperty("org.apache.tomcat.util.net.NioSelectorShared", "true")).booleanValue();
+        Boolean.parseBoolean(System.getProperty("org.apache.tomcat.util.net.NioSelectorShared", "true"));
 
     protected NioBlockingSelector blockingSelector;
 

==================================================
