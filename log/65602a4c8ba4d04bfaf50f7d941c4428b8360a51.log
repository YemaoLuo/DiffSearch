65602a4c8ba4d04bfaf50f7d941c4428b8360a51
==================================================
Make deletion of the copied WARs used for anti-resource locking more robust if the context fails to start (there were some circumstances where the original WAR could get deleted). Add some test cases to check this.
==================================================
Mark Emlyn
==================================================
Tue May 21 16:34:27 2013 +0000
==================================================
ContextConfig.java
Make deletion of the copied WARs used for anti-resource locking more robust if the context fails to start (there were some circumstances where the original WAR could get deleted). Add some test cases to check this.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1484862 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestHostConfigAutomaticDeployment.java
index cee18cc384..4e4e7c07a7 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -212,6 +212,12 @@ public class ContextConfig implements LifecycleListener {
     protected String originalDocBase = null;
 
 
+    /**
+     * Anti-locking docBase
+     */
+    private String antiLockingDocBase = null;
+
+
     /**
      * Map of ServletContainerInitializer to classes they expressed interest in.
      */
@@ -325,16 +331,9 @@ public class ContextConfig implements LifecycleListener {
         } else if (event.getType().equals(Lifecycle.AFTER_START_EVENT)) {
             // Restore docBase for management tools
             if (originalDocBase != null) {
-                String docBase = context.getDocBase();
                 context.setDocBase(originalDocBase);
-                originalDocBase = docBase;
             }
         } else if (event.getType().equals(Lifecycle.CONFIGURE_STOP_EVENT)) {
-            if (originalDocBase != null) {
-                String docBase = context.getDocBase();
-                context.setDocBase(originalDocBase);
-                originalDocBase = docBase;
-            }
             configureStop();
         } else if (event.getType().equals(Lifecycle.AFTER_INIT_EVENT)) {
             init();
@@ -714,11 +713,8 @@ public class ContextConfig implements LifecycleListener {
             if (docBase == null) {
                 return;
             }
-            if (originalDocBase == null) {
-                originalDocBase = docBase;
-            } else {
-                docBase = originalDocBase;
-            }
+            originalDocBase = docBase;
+
             File docBaseFile = new File(docBase);
             if (!docBaseFile.isAbsolute()) {
                 docBaseFile = new File(host.getAppBaseFile(), docBase);
@@ -745,12 +741,12 @@ public class ContextConfig implements LifecycleListener {
                         + "] setting docBase to " + file);
             }
 
+            antiLockingDocBase = file.getAbsolutePath();
             // Cleanup just in case an old deployment is lying around
             ExpandWar.delete(file);
             if (ExpandWar.copy(docBaseFile, file)) {
-                context.setDocBase(file.getAbsolutePath());
+                context.setDocBase(antiLockingDocBase);
             }
-
         }
 
     }
@@ -999,8 +995,8 @@ public class ContextConfig implements LifecycleListener {
         // Remove (partially) folders and files created by antiLocking
         Host host = (Host) context.getParent();
         String docBase = context.getDocBase();
-        if ((docBase != null) && (originalDocBase != null)) {
-            File docBaseFile = new File(docBase);
+        if (antiLockingDocBase != null) {
+            File docBaseFile = new File(antiLockingDocBase);
             if (!docBaseFile.isAbsolute()) {
                 docBaseFile = new File(host.getAppBaseFile(), docBase);
             }

==================================================
