359f2201c97b9086f928db921584aa1676b76e1e
==================================================
Various low-level FindBugs warnings
==================================================
Mark Thomas
==================================================
Fri Dec 18 14:42:01 2015 +0000
==================================================
ConnectorStoreAppender.java
Various low-level FindBugs warnings
 - use of static
 - mutable constants

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1720800 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StoreLoader.java
index bfbf400f50..0a4dec85e0 100644
--- a/java/org/apache/catalina/storeconfig/ConnectorStoreAppender.java
+++ b/java/org/apache/catalina/storeconfig/ConnectorStoreAppender.java
@@ -41,7 +41,7 @@ import org.apache.tomcat.util.IntrospectionUtils;
  */
 public class ConnectorStoreAppender extends StoreAppender {
 
-    protected static HashMap<String, String> replacements = new HashMap<>();
+    protected static final HashMap<String, String> replacements = new HashMap<>();
     static {
         replacements.put("backlog", "acceptCount");
         replacements.put("soLinger", "connectionLinger");

==================================================
Nio2Channel.java
index e56affd559..ce26eba1b7 100644
--- a/java/org/apache/catalina/storeconfig/StoreLoader.java
+++ b/java/org/apache/catalina/storeconfig/StoreLoader.java
@@ -78,7 +78,7 @@ public class StoreLoader {
     /**
      * The <code>Digester</code> instance used to parse registry descriptors.
      */
-    protected static Digester digester = createDigester();
+    protected static final Digester digester = createDigester();
 
     private StoreRegistry registry;
 

==================================================
NioChannel.java
index 2e76998146..e562cc293a 100644
--- a/java/org/apache/tomcat/util/net/Nio2Channel.java
+++ b/java/org/apache/tomcat/util/net/Nio2Channel.java
@@ -33,7 +33,7 @@ import java.util.concurrent.TimeoutException;
  */
 public class Nio2Channel implements AsynchronousByteChannel {
 
-    protected static ByteBuffer emptyBuf = ByteBuffer.allocate(0);
+    protected static final ByteBuffer emptyBuf = ByteBuffer.allocate(0);
 
     protected AsynchronousSocketChannel sc = null;
     protected SocketWrapperBase<Nio2Channel> socket = null;

==================================================
PoolProperties.java
index 7002fe05e1..afde9df186 100644
--- a/java/org/apache/tomcat/util/net/NioChannel.java
+++ b/java/org/apache/tomcat/util/net/NioChannel.java
@@ -37,7 +37,7 @@ public class NioChannel implements ByteChannel {
 
     protected static final StringManager sm = StringManager.getManager(NioChannel.class);
 
-    protected static ByteBuffer emptyBuf = ByteBuffer.allocate(0);
+    protected static final ByteBuffer emptyBuf = ByteBuffer.allocate(0);
 
     protected SocketChannel sc = null;
     protected SocketWrapperBase<NioChannel> socket = null;

==================================================
SlowQueryReport.java
index 8a5adb0679..afaff8f33f 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
@@ -37,7 +37,7 @@ public class PoolProperties implements PoolConfiguration, Cloneable, Serializabl
 
     public static final int DEFAULT_MAX_ACTIVE = 100;
 
-    protected static AtomicInteger poolCounter = new AtomicInteger(0);
+    protected static final AtomicInteger poolCounter = new AtomicInteger(0);
     private volatile Properties dbProperties = new Properties();
     private volatile String url = null;
     private volatile String driverClassName = null;

==================================================
SlowQueryReportJmx.java
index a25bda665e..12685f4e5d 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
@@ -48,7 +48,7 @@ public class SlowQueryReport extends AbstractQueryReport  {
     /**
      * we will be keeping track of query stats on a per pool basis
      */
-    protected static ConcurrentHashMap<String,ConcurrentHashMap<String,QueryStats>> perPoolStats =
+    protected static final ConcurrentHashMap<String,ConcurrentHashMap<String,QueryStats>> perPoolStats =
         new ConcurrentHashMap<>();
     /**
      * the queries that are used for this interceptor.

==================================================
InduceSlowQuery.java
index ee0010a8be..e1b595c076 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReportJmx.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReportJmx.java
@@ -64,7 +64,7 @@ public class SlowQueryReportJmx extends SlowQueryReport implements NotificationE
     private static final Log log = LogFactory.getLog(SlowQueryReportJmx.class);
 
 
-    protected static ConcurrentHashMap<String,SlowQueryReportJmxMBean> mbeans =
+    protected static final ConcurrentHashMap<String,SlowQueryReportJmxMBean> mbeans =
         new ConcurrentHashMap<>();
 
 
@@ -99,7 +99,7 @@ public class SlowQueryReportJmx extends SlowQueryReport implements NotificationE
 
     protected String poolName = null;
 
-    protected static AtomicLong notifySequence = new AtomicLong(0);
+    protected static final AtomicLong notifySequence = new AtomicLong(0);
 
     protected boolean notifyPool = true;
 

==================================================
TestInterceptor.java
index 19a9eff9cf..5c2be9aa9c 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/pool/interceptor/InduceSlowQuery.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/pool/interceptor/InduceSlowQuery.java
@@ -21,7 +21,7 @@ import java.lang.reflect.Method;
 import java.security.SecureRandom;
 
 public class InduceSlowQuery extends AbstractQueryReport {
-    public static SecureRandom random = new SecureRandom();
+    public static final SecureRandom random = new SecureRandom();
 
     public InduceSlowQuery() {
         // TODO Auto-generated constructor stub

==================================================
CreateTestTable.java
index 2509381d0a..16fb3c7ff1 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/pool/interceptor/TestInterceptor.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/pool/interceptor/TestInterceptor.java
@@ -27,7 +27,7 @@ import org.apache.tomcat.jdbc.pool.PooledConnection;
 public class TestInterceptor extends JdbcInterceptor {
     public static boolean poolstarted = false;
     public static boolean poolclosed = false;
-    public static AtomicInteger instancecount = new AtomicInteger(0);
+    public static final AtomicInteger instancecount = new AtomicInteger(0);
 
     @Override
     public void poolClosed(ConnectionPool pool) {

==================================================
TesterClass.java
index adae5ef8c5..e375bcdb45 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/CreateTestTable.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/CreateTestTable.java
@@ -118,7 +118,7 @@ public class CreateTestTable extends DefaultTestCase {
         con.close();
     }
 
-    public static Random random = new Random(System.currentTimeMillis());
+    public static final Random random = new Random(System.currentTimeMillis());
     public static String getRandom() {
         StringBuilder s = new StringBuilder(256);
         for (int i=0;i<254; i++) {

==================================================
TestStandardWrapper.java
index 24c455566b..699b3eccc8 100644
--- a/test/javax/el/TesterClass.java
+++ b/test/javax/el/TesterClass.java
@@ -18,7 +18,7 @@ package javax.el;
 
 public class TesterClass {
 
-    public static String publicStaticString = "publicStaticString";
+    public static final String publicStaticString = "publicStaticString";
     public String publicString = "publicString";
     @SuppressWarnings("unused") // Used in TestStaticFieldELResolver
     private static String privateStaticString = "privateStaticString";

==================================================
LoadTest.java
index 11fb9334cd..74aa33c39f 100644
--- a/test/org/apache/catalina/core/TestStandardWrapper.java
+++ b/test/org/apache/catalina/core/TestStandardWrapper.java
@@ -410,7 +410,7 @@ public class TestStandardWrapper extends TomcatBaseTest {
     public static final int BUG51445_THREAD_COUNT = 5;
 
     public static CountDownLatch latch = null;
-    public static AtomicInteger counter = new AtomicInteger(0);
+    public static final AtomicInteger counter = new AtomicInteger(0);
 
     public static void initLatch() {
         latch = new CountDownLatch(BUG51445_THREAD_COUNT);

==================================================
MapDemo.java
index d4d21ef8fa..b139ca8da1 100644
--- a/test/org/apache/catalina/tribes/demos/LoadTest.java
+++ b/test/org/apache/catalina/tribes/demos/LoadTest.java
@@ -32,7 +32,7 @@ import org.apache.juli.logging.LogFactory;
 public class LoadTest implements MembershipListener,ChannelListener, Runnable {
     private static final Log log = LogFactory.getLog(LoadTest.class);
     public static int size = 24000;
-    public static Object mutex = new Object();
+    public static final Object mutex = new Object();
     public boolean doRun = true;
 
     public long bytesReceived = 0;
@@ -241,7 +241,7 @@ public class LoadTest implements MembershipListener,ChannelListener, Runnable {
     public static class LoadMessage extends ByteMessage {
 
         public static byte[] outdata = new byte[size];
-        public static Random r = new Random();
+        public static final Random r = new Random();
         public static int getMessageSize (LoadMessage msg) {
             return msg.getMessage().length;
         }

==================================================
TestDataIntegrity.java
index 3993954e99..6d0aefcb78 100644
--- a/test/org/apache/catalina/tribes/demos/MapDemo.java
+++ b/test/org/apache/catalina/tribes/demos/MapDemo.java
@@ -411,7 +411,7 @@ public class MapDemo implements ChannelListener, MembershipListener{
             dataModel.getValueAt(-1,-1);
         }
 
-        public static Random random = new Random();
+        public static final Random random = new Random();
         public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                     char[] chars ) {
             if (count == 0) {

==================================================
TestMulticastPackages.java
index e1a2c863c8..aeeff398af 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestDataIntegrity.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestDataIntegrity.java
@@ -171,7 +171,7 @@ public class TestDataIntegrity {
         public int length;
         public byte[] data;
         public byte key;
-        public static Random r = new Random();
+        public static final Random r = new Random();
         public static Data createRandomData() {
             int i = r.nextInt();
             i = ( i % 127 );

==================================================
TestRemoteProcessException.java
index ed41113663..4d35faf1c5 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestMulticastPackages.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestMulticastPackages.java
@@ -214,7 +214,7 @@ public class TestMulticastPackages {
         public byte[] data;
         public byte key;
         public boolean hasNr = false;
-        public static Random r = new Random();
+        public static final Random r = new Random();
         public static Data createRandomData() {
             return createRandomData(ChannelReceiver.MAX_UDP_SIZE);
         }

==================================================
TestUdpPackages.java
index 97163f2b70..627dff6ff7 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestRemoteProcessException.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestRemoteProcessException.java
@@ -115,7 +115,7 @@ public class TestRemoteProcessException {
         public byte[] data;
         public byte key;
         public boolean error = false;
-        public static Random r = new Random();
+        public static final Random r = new Random();
         public static Data createRandomData(boolean error) {
             int i = r.nextInt();
             i = ( i % 127 );

==================================================
SocketNioReceive.java
index 1d64c7b554..856caa6f97 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestUdpPackages.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestUdpPackages.java
@@ -255,7 +255,7 @@ public class TestUdpPackages {
         public byte[] data;
         public byte key;
         public boolean hasNr = false;
-        public static Random r = new Random();
+        public static final Random r = new Random();
         public static Data createRandomData() {
             return createRandomData(ChannelReceiver.MAX_UDP_SIZE);
         }

==================================================
TestChunkedInputFilter.java
index 2ea3a18f46..5ce21fe840 100644
--- a/test/org/apache/catalina/tribes/test/transport/SocketNioReceive.java
+++ b/test/org/apache/catalina/tribes/test/transport/SocketNioReceive.java
@@ -35,7 +35,7 @@ public class SocketNioReceive {
     static DecimalFormat df = new DecimalFormat("##.00");
     static double seconds = 0;
 
-    protected static Object mutex = new Object();
+    protected static final Object mutex = new Object();
     public static void main(String[] args) throws Exception {
         Member mbr = new MemberImpl("localhost", 9999, 0);
         ChannelData data = new ChannelData();

==================================================
TestUtf8.java
index 53ff2b0e53..e23d7d00cb 100644
--- a/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java
+++ b/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java
@@ -465,7 +465,7 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
                 throw ioe;
             }
 
-            pw.write(Integer.valueOf(count).toString());
+            pw.write(Integer.toString(count));
 
             // Headers should be visible now
             dumpHeader("x-trailer1", req, pw);
@@ -521,7 +521,7 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
                 throw ioe;
             }
 
-            pw.write(Integer.valueOf(countRead).toString());
+            pw.write(Integer.toString(countRead));
         }
 
         public boolean getExceptionDuringRead() {

==================================================
TestWsSubprotocols.java
index 2b3c7198e1..6673cbb8e9 100644
--- a/test/org/apache/tomcat/util/buf/TestUtf8.java
+++ b/test/org/apache/tomcat/util/buf/TestUtf8.java
@@ -23,6 +23,7 @@ import java.nio.charset.CoderResult;
 import java.nio.charset.CodingErrorAction;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import org.junit.Assert;
@@ -54,7 +55,7 @@ public class TestUtf8 {
     // Indicates that three replacement characters are missing
     private static final int REPLACE_MISSING4 = 64;
 
-    public static final List<Utf8TestCase> TEST_CASES = new ArrayList<>();
+    public static final List<Utf8TestCase> TEST_CASES;
 
     private static int workAroundCount = 0;
 
@@ -71,28 +72,29 @@ public class TestUtf8 {
         }
 
         Utf8TestCase testCase = null;
+        ArrayList<Utf8TestCase> testCases = new ArrayList<>();
 
-        TEST_CASES.add(new Utf8TestCase(
+        testCases.add(new Utf8TestCase(
                 "Zero length input",
                 new int[] {},
                 -1,
                 ""));
-        TEST_CASES.add(new Utf8TestCase(
+        testCases.add(new Utf8TestCase(
                 "Valid one byte sequence",
                 new int[] {0x41},
                 -1,
                 "A"));
-        TEST_CASES.add(new Utf8TestCase(
+        testCases.add(new Utf8TestCase(
                 "Valid two byte sequence",
                 new int[] {0xC2, 0xA9},
                 -1,
                 "\u00A9"));
-        TEST_CASES.add(new Utf8TestCase(
+        testCases.add(new Utf8TestCase(
                 "Valid three byte sequence",
                 new int[] {0xE0, 0xA4, 0x87},
                 -1,
                 "\u0907"));
-        TEST_CASES.add(new Utf8TestCase(
+        testCases.add(new Utf8TestCase(
                 "Valid four byte sequence",
                 new int[] {0xF0, 0x90, 0x90, 0x80},
                 -1,
@@ -107,7 +109,7 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(ERROR_POS_PLUS2);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         // Java 7 JVM decoder does not report error until all 2 bytes are available
         testCase = new Utf8TestCase(
@@ -118,7 +120,7 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(ERROR_POS_PLUS1);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         // Java 7 JVM decoder does not report error until all 3 bytes are available
         testCase = new Utf8TestCase(
@@ -129,7 +131,7 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(ERROR_POS_PLUS1);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         // Java 7 JVM decoder does not report error until all 4 bytes are
         // available
@@ -141,9 +143,9 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(ERROR_POS_PLUS2);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
-        TEST_CASES.add(new Utf8TestCase(
+        testCases.add(new Utf8TestCase(
                 "Invalid one byte 1111 1111",
                 new int[] {0x41, 0xFF, 0x41},
                 1,
@@ -157,7 +159,7 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(REPLACE_SWALLOWS_TRAILER);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         testCase = new Utf8TestCase(
                 "Invalid one byte 1110 0000",
@@ -167,7 +169,7 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(REPLACE_SWALLOWS_TRAILER);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         testCase = new Utf8TestCase(
                 "Invalid one byte 1100 0000",
@@ -177,35 +179,35 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(ERROR_POS_PLUS1);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
-        TEST_CASES.add(new Utf8TestCase(
+        testCases.add(new Utf8TestCase(
                 "Invalid one byte 1000 000",
                 new int[] {0x41, 0x80, 0x41},
                 1,
                 "A\uFFFDA"));
-        TEST_CASES.add(new Utf8TestCase(
+        testCases.add(new Utf8TestCase(
                 "Invalid sequence from unicode 6.2 spec, table 3-8",
                 new int[] {0x61, 0xF1, 0x80, 0x80, 0xE1, 0x80, 0xC2, 0x62, 0x80,
                         0x63, 0x80, 0xBF, 0x64},
                 4,
                 "a\uFFFD\uFFFD\uFFFDb\uFFFDc\uFFFD\uFFFDd"));
-        TEST_CASES.add(new Utf8TestCase(
+        testCases.add(new Utf8TestCase(
                 "Valid 4-byte sequence truncated to 3 bytes",
                 new int[] {0x61, 0xF0, 0x90, 0x90},
                 3,
                 "a\uFFFD"));
-        TEST_CASES.add(new Utf8TestCase(
+        testCases.add(new Utf8TestCase(
                 "Valid 4-byte sequence truncated to 2 bytes",
                 new int[] {0x61, 0xF0, 0x90},
                 2,
                 "a\uFFFD"));
-        TEST_CASES.add(new Utf8TestCase(
+        testCases.add(new Utf8TestCase(
                 "Valid 4-byte sequence truncated to 1 byte",
                 new int[] {0x61, 0xF0},
                 1,
                 "a\uFFFD"));
-        TEST_CASES.add(new Utf8TestCase(
+        testCases.add(new Utf8TestCase(
                 "Valid 4-byte sequence truncated to 3 bytes with trailer",
                 new int[] {0x61, 0xF0, 0x90, 0x90, 0x61},
                 4,
@@ -219,7 +221,7 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(REPLACE_SWALLOWS_TRAILER);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         testCase = new Utf8TestCase(
                 "Valid 4-byte sequence truncated to 1 byte with trailer",
@@ -229,7 +231,7 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(REPLACE_SWALLOWS_TRAILER);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         testCase = new Utf8TestCase(
                 "U+0000 zero-padded to two bytes",
@@ -239,7 +241,7 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(ERROR_POS_PLUS1);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         testCase = new Utf8TestCase(
                 "U+007F zero-padded to two bytes",
@@ -249,9 +251,9 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(ERROR_POS_PLUS1);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
-        TEST_CASES.add(new Utf8TestCase(
+        testCases.add(new Utf8TestCase(
                 "Two bytes, all 1's",
                 new int[] {0x61, 0xFF, 0xFF, 0x61},
                 1,
@@ -265,19 +267,19 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(ERROR_POS_PLUS1);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
-        TEST_CASES.add(new Utf8TestCase(
+        testCases.add(new Utf8TestCase(
                 "Two bytes, 101x first byte first nibble",
                 new int[] {0x61, 0xA0, 0x80, 0x61},
                 1,
                 "a\uFFFD\uFFFDa"));
-        TEST_CASES.add(new Utf8TestCase(
+        testCases.add(new Utf8TestCase(
                 "Two bytes, invalid second byte",
                 new int[] {0x61, 0xC2, 0x00, 0x61},
                 2,
                 "a\uFFFD\u0000a"));
-        TEST_CASES.add(new Utf8TestCase(
+        testCases.add(new Utf8TestCase(
                 "Two bytes, invalid second byte",
                 new int[] {0x61, 0xC2, 0xC0, 0x61},
                 2,
@@ -291,7 +293,7 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(ERROR_POS_PLUS1);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         testCase = new Utf8TestCase(
                 "Three bytes, U+007F zero-padded",
@@ -301,7 +303,7 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(ERROR_POS_PLUS1);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         testCase = new Utf8TestCase(
                 "Three bytes, U+07FF zero-padded",
@@ -311,9 +313,9 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(ERROR_POS_PLUS1);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
-        TEST_CASES.add(new Utf8TestCase(
+        testCases.add(new Utf8TestCase(
                 "Three bytes, all 1's",
                 new int[] {0x61, 0xFF, 0xFF, 0xFF, 0x61},
                 1,
@@ -328,7 +330,7 @@ public class TestUtf8 {
             testCase.addForJvm(REPLACE_MISSING2).addForJvm(
                     REPLACE_SWALLOWS_TRAILER);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         testCase = new Utf8TestCase(
                 "Three bytes, invalid second byte",
@@ -338,9 +340,9 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(ERROR_POS_PLUS1);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
-        TEST_CASES.add(new Utf8TestCase(
+        testCases.add(new Utf8TestCase(
                 "Three bytes, invalid third byte",
                 new int[] {0x61, 0xE1, 0x80, 0xC0, 0x61},
                 3,
@@ -353,7 +355,7 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(ERROR_POS_PLUS2);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         testCase = new Utf8TestCase(
                 "Four bytes, U+007F zero-padded",
@@ -363,7 +365,7 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(ERROR_POS_PLUS2);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         testCase = new Utf8TestCase(
                 "Four bytes, U+07FF zero-padded",
@@ -373,7 +375,7 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(ERROR_POS_PLUS2);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         testCase = new Utf8TestCase(
                 "Four bytes, U+FFFF zero-padded",
@@ -383,9 +385,9 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(ERROR_POS_PLUS2);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
-        TEST_CASES.add(new Utf8TestCase(
+        testCases.add(new Utf8TestCase(
                 "Four bytes, all 1's",
                 new int[] {0x61, 0xFF, 0xFF, 0xFF, 0xFF, 0x61},
                 1,
@@ -400,7 +402,7 @@ public class TestUtf8 {
             testCase.addForJvm(ERROR_POS_PLUS4).addForJvm(
                     REPLACE_MISSING2).addForJvm(REPLACE_MISSING1);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         testCase = new Utf8TestCase(
                 "Four bytes, invalid second byte",
@@ -410,7 +412,7 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(ERROR_POS_PLUS2);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         testCase = new Utf8TestCase(
                 "Four bytes, invalid third byte",
@@ -420,9 +422,9 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(ERROR_POS_PLUS1);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
-        TEST_CASES.add(new Utf8TestCase(
+        testCases.add(new Utf8TestCase(
                 "Four bytes, invalid fourth byte",
                 new int[] {0x61, 0xF1, 0x80, 0x80, 0xC0, 0x61},
                 4,
@@ -436,7 +438,7 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(ERROR_POS_PLUS4).addForJvm(REPLACE_MISSING4);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         testCase = new Utf8TestCase(
                 "Five bytes, U+007F zero padded",
@@ -446,7 +448,7 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(ERROR_POS_PLUS4).addForJvm(REPLACE_MISSING4);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         testCase = new Utf8TestCase(
                 "Five bytes, U+07FF zero padded",
@@ -456,7 +458,7 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(ERROR_POS_PLUS4).addForJvm(REPLACE_MISSING4);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         testCase = new Utf8TestCase(
                 "Five bytes, U+FFFF zero padded",
@@ -466,7 +468,7 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(ERROR_POS_PLUS4).addForJvm(REPLACE_MISSING4);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         testCase = new Utf8TestCase(
                 "Six bytes, U+0000 zero padded",
@@ -478,7 +480,7 @@ public class TestUtf8 {
                     ERROR_POS_PLUS1).addForJvm(REPLACE_MISSING4).addForJvm(
                             REPLACE_MISSING1);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         testCase = new Utf8TestCase(
                 "Six bytes, U+007F zero padded",
@@ -490,7 +492,7 @@ public class TestUtf8 {
                     ERROR_POS_PLUS1).addForJvm(REPLACE_MISSING4).addForJvm(
                             REPLACE_MISSING1);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         testCase = new Utf8TestCase(
                 "Six bytes, U+07FF zero padded",
@@ -502,7 +504,7 @@ public class TestUtf8 {
                     ERROR_POS_PLUS1).addForJvm(REPLACE_MISSING4).addForJvm(
                             REPLACE_MISSING1);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         testCase = new Utf8TestCase(
                 "Six bytes, U+FFFF zero padded",
@@ -514,7 +516,7 @@ public class TestUtf8 {
                     ERROR_POS_PLUS1).addForJvm(REPLACE_MISSING4).addForJvm(
                             REPLACE_MISSING1);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
 
         testCase = new Utf8TestCase(
                 "Original test case - derived from Autobahn?",
@@ -526,7 +528,9 @@ public class TestUtf8 {
         if (javaVersion < 8) {
             testCase.addForJvm(ERROR_POS_PLUS1);
         }
-        TEST_CASES.add(testCase);
+        testCases.add(testCase);
+
+        TEST_CASES = Collections.unmodifiableList(testCases);
     }
 
     @Test

==================================================
TestEncodingDecoding.java
index 4f496ed5e5..2d6086958d 100644
--- a/test/org/apache/tomcat/websocket/TestWsSubprotocols.java
+++ b/test/org/apache/tomcat/websocket/TestWsSubprotocols.java
@@ -100,7 +100,7 @@ public class TestWsSubprotocols extends TomcatBaseTest {
 
     @ServerEndpoint(value = "/echo", subprotocols = {"sp1","sp2"})
     public static class SubProtocolsEndpoint {
-        public static String PATH_BASIC = "/echo";
+        public static final String PATH_BASIC = "/echo";
         public static volatile List<String> subprotocols;
 
         @OnOpen

==================================================
TestWsRemoteEndpointImplServer.java
index bab282be3d..14132fb02f 100644
--- a/test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java
+++ b/test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java
@@ -474,7 +474,7 @@ public class TestEncodingDecoding extends TomcatBaseTest {
     public static class MsgByteMessageHandler implements
             MessageHandler.Whole<MsgByte> {
 
-        public static Queue<Object> received = new ConcurrentLinkedQueue<>();
+        public static final Queue<Object> received = new ConcurrentLinkedQueue<>();
         private final Session session;
 
         public MsgByteMessageHandler(Session session) {
@@ -498,7 +498,7 @@ public class TestEncodingDecoding extends TomcatBaseTest {
 
     public static class MsgStringMessageHandler implements MessageHandler.Whole<MsgString> {
 
-        public static Queue<Object> received = new ConcurrentLinkedQueue<>();
+        public static final Queue<Object> received = new ConcurrentLinkedQueue<>();
         private final Session session;
 
         public MsgStringMessageHandler(Session session) {

==================================================
