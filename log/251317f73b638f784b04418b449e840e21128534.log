251317f73b638f784b04418b449e840e21128534
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=53792
==================================================
Mark Emlyn
==================================================
Thu Aug 30 19:43:26 2012 +0000
==================================================
AstValue.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=53792
Support method expressions that include a method call that is not at the end of the expression

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1379090 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestMethodExpressionImpl.java
index fc6a628abf..297f19183b 100644
--- a/java/org/apache/el/parser/AstValue.java
+++ b/java/org/apache/el/parser/AstValue.java
@@ -103,39 +103,52 @@ public final class AstValue extends SimpleNode {
         Object property = null;
         int propCount = this.jjtGetNumChildren();
 
-        if (propCount > 2 &&
-                this.jjtGetChild(propCount - 1) instanceof AstMethodParameters) {
-            // Method call with paramaters.
-            propCount-=2;
-        } else {
-            propCount--;
-        }
         int i = 1;
-
-        // evaluate any properties before our target
+        // Evaluate any properties or methods before our target
         ELResolver resolver = ctx.getELResolver();
-        if (propCount > 1) {
-            while (base != null && i < propCount) {
-                property = this.children[i].getValue(ctx);
+        while (i < propCount) {
+            if (i + 2 < propCount &&
+                    this.children[i + 1] instanceof AstMethodParameters) {
+                // Method call not at end of expression
+                base = resolver.invoke(ctx, base,
+                        this.children[i].getValue(ctx), null,
+                        ((AstMethodParameters)
+                                this.children[i + 1]).getParameters(ctx));
+                i += 2;
+            } else if (i + 2 == propCount &&
+                    this.children[i + 1] instanceof AstMethodParameters) {
+                // Method call at end of expression
                 ctx.setPropertyResolved(false);
+                property = this.children[i].getValue(ctx);
+                i += 2;
+
+                if (property == null) {
+                    throw new PropertyNotFoundException(MessageFactory.get(
+                            "error.unreachable.property", property));
+                }
+            } else if (i + 1 < propCount) {
+                // Object with property not at end of expression
+                property = this.children[i].getValue(ctx);
                 base = resolver.getValue(ctx, base, property);
                 i++;
+
+            } else {
+                // Object with property at end of expression
+                ctx.setPropertyResolved(false);
+                property = this.children[i].getValue(ctx);
+                i++;
+
+                if (property == null) {
+                    throw new PropertyNotFoundException(MessageFactory.get(
+                            "error.unreachable.property", property));
+                }
             }
-            // if we are in this block, we have more properties to resolve,
-            // but our base was null
-            if (base == null || property == null) {
+            if (base == null) {
                 throw new PropertyNotFoundException(MessageFactory.get(
                         "error.unreachable.property", property));
             }
         }
 
-        property = this.children[i].getValue(ctx);
-
-        if (property == null) {
-            throw new PropertyNotFoundException(MessageFactory.get(
-                    "error.unreachable.property", this.children[i]));
-        }
-
         Target t = new Target();
         t.base = base;
         t.property = property;

==================================================
