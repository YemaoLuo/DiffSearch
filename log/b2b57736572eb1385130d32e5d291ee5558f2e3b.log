b2b57736572eb1385130d32e5d291ee5558f2e3b
==================================================
Reproducible builds: XReflectionIntrospectionUtils.java
==================================================
Mark Thomas
==================================================
Thu Mar 18 19:50:00 2021 +0000
==================================================
ObjectReflectionPropertyInspector.java
Reproducible builds: XReflectionIntrospectionUtils.java


==================================================
ReflectionProperty.java
index 520e6a005d..514aeb4405 100644
--- a/java/org/apache/tomcat/util/xreflection/ObjectReflectionPropertyInspector.java
+++ b/java/org/apache/tomcat/util/xreflection/ObjectReflectionPropertyInspector.java
@@ -26,6 +26,7 @@ import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Set;
 import java.util.stream.Collectors;
@@ -64,7 +65,7 @@ public final class ObjectReflectionPropertyInspector {
 
     private static final Set<Class<?>> getKnownClasses() throws ClassNotFoundException {
         return
-            Collections.unmodifiableSet(new HashSet<>(
+            Collections.unmodifiableSet(new LinkedHashSet<>(
                     Arrays.asList(
                         Class.forName("org.apache.catalina.authenticator.jaspic.SimpleAuthConfigProvider"),
                         Class.forName("org.apache.catalina.authenticator.jaspic.PersistentProviderRegistrations$Property"),

==================================================
SetPropertyClass.java
index f74f7c0bd5..46d4447c01 100644
--- a/java/org/apache/tomcat/util/xreflection/ReflectionProperty.java
+++ b/java/org/apache/tomcat/util/xreflection/ReflectionProperty.java
@@ -19,7 +19,7 @@ package org.apache.tomcat.util.xreflection;
 import java.lang.reflect.Method;
 import java.net.InetAddress;
 
-final class ReflectionProperty {
+final class ReflectionProperty implements Comparable<ReflectionProperty> {
     private final String clazz;
     private final String propertyName;
     private final Class<?> propertyType;
@@ -116,4 +116,14 @@ final class ReflectionProperty {
         sb.append('}');
         return sb.toString();
     }
+
+    @Override
+    public int compareTo(ReflectionProperty o) {
+        // Class then property name
+        int result = clazz.compareTo(o.clazz);
+        if (result == 0) {
+            result = propertyName.compareTo(o.propertyName);
+        }
+        return result;
+    }
 }

==================================================
