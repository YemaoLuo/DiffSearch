c7971976904a3a262c1d0ecc755af54e7623604e
==================================================
Code clean-up for o.a.catalina.session
==================================================
Mark Emlyn
==================================================
Sun Jul 15 21:18:36 2012 +0000
==================================================
FileStore.java
Code clean-up for o.a.catalina.session
 - Add final prompted by UCDetector
 - Java 7 use of <>

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1361802 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JDBCStore.java
index c1559736d3..ec40e8a69f 100644
--- a/java/org/apache/catalina/session/FileStore.java
+++ b/java/org/apache/catalina/session/FileStore.java
@@ -205,7 +205,7 @@ public final class FileStore extends StoreBase {
         }
 
         // Build and return the list of session identifiers
-        ArrayList<String> list = new ArrayList<String>();
+        ArrayList<String> list = new ArrayList<>();
         int n = FILE_EXT.length();
         for (int i = 0; i < files.length; i++) {
             if (files[i].endsWith(FILE_EXT)) {

==================================================
ManagerBase.java
index 8a5cd11c2d..60294ba562 100644
--- a/java/org/apache/catalina/session/JDBCStore.java
+++ b/java/org/apache/catalina/session/JDBCStore.java
@@ -64,12 +64,12 @@ public class JDBCStore extends StoreBase {
     /**
      * Name to register for this Store, used for logging.
      */
-    protected static String storeName = "JDBCStore";
+    protected static final String storeName = "JDBCStore";
 
     /**
      * Name to register for the background thread.
      */
-    protected String threadName = "JDBCStore";
+    protected final String threadName = "JDBCStore";
 
     /**
      * The connection username to use when trying to connect to the database.
@@ -490,7 +490,7 @@ public class JDBCStore extends StoreBase {
 
                     preparedKeysSql.setString(1, getName());
                     rst = preparedKeysSql.executeQuery();
-                    ArrayList<String> tmpkeys = new ArrayList<String>();
+                    ArrayList<String> tmpkeys = new ArrayList<>();
                     if (rst != null) {
                         while (rst.next()) {
                             tmpkeys.add(rst.getString(1));

==================================================
PersistentManager.java
index ed7c43096a..27beeb3178 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -137,10 +137,10 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     protected static final int TIMING_STATS_CACHE_SIZE = 100;
 
     protected final Deque<SessionTiming> sessionCreationTiming =
-        new LinkedList<SessionTiming>();
+            new LinkedList<>();
 
     protected final Deque<SessionTiming> sessionExpirationTiming =
-        new LinkedList<SessionTiming>();
+            new LinkedList<>();
 
     /**
      * Number of sessions that have expired.
@@ -152,7 +152,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
      * The set of currently active Sessions for this Manager, keyed by
      * session identifier.
      */
-    protected Map<String, Session> sessions = new ConcurrentHashMap<String, Session>();
+    protected Map<String, Session> sessions = new ConcurrentHashMap<>();
 
     // Number of sessions created by this manager
     protected long sessionCounter=0;
@@ -978,7 +978,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     @Override
     public int getSessionAverageAliveTime() {
         // Copy current stats
-        List<SessionTiming> copy = new ArrayList<SessionTiming>();
+        List<SessionTiming> copy = new ArrayList<>();
         synchronized (sessionExpirationTiming) {
             copy.addAll(sessionExpirationTiming);
         }
@@ -1014,7 +1014,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     public int getSessionCreateRate() {
         long now = System.currentTimeMillis();
         // Copy current stats
-        List<SessionTiming> copy = new ArrayList<SessionTiming>();
+        List<SessionTiming> copy = new ArrayList<>();
         synchronized (sessionCreationTiming) {
             copy.addAll(sessionCreationTiming);
         }
@@ -1057,7 +1057,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     public int getSessionExpireRate() {
         long now = System.currentTimeMillis();
         // Copy current stats
-        List<SessionTiming> copy = new ArrayList<SessionTiming>();
+        List<SessionTiming> copy = new ArrayList<>();
         synchronized (sessionExpirationTiming) {
             copy.addAll(sessionExpirationTiming);
         }
@@ -1150,7 +1150,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
             return null;
         }
 
-        HashMap<String, String> map = new HashMap<String, String>();
+        HashMap<String, String> map = new HashMap<>();
         while (ee.hasMoreElements()) {
             String attrName = ee.nextElement();
             map.put(attrName, getSessionAttribute(sessionId, attrName));

==================================================
PersistentManagerBase.java
index f3047487dd..bdc717f1aa 100644
--- a/java/org/apache/catalina/session/PersistentManager.java
+++ b/java/org/apache/catalina/session/PersistentManager.java
@@ -40,7 +40,7 @@ public final class PersistentManager extends PersistentManagerBase {
     /**
      * The descriptive name of this Manager implementation (for logging).
      */
-    protected static String name = "PersistentManager";
+    protected static final String name = "PersistentManager";
 
 
     // ------------------------------------------------------------- Properties

==================================================
StandardManager.java
index 0c34b5d457..8c956f87bc 100644
--- a/java/org/apache/catalina/session/PersistentManagerBase.java
+++ b/java/org/apache/catalina/session/PersistentManagerBase.java
@@ -134,7 +134,7 @@ public abstract class PersistentManagerBase extends ManagerBase
     /**
      * The descriptive name of this Manager implementation (for logging).
      */
-    private static String name = "PersistentManagerBase";
+    private static final String name = "PersistentManagerBase";
 
 
     /**
@@ -175,8 +175,7 @@ public abstract class PersistentManagerBase extends ManagerBase
     /**
      * Sessions currently being swapped in and the associated locks
      */
-    private final Map<String,Object> sessionSwapInLocks =
-        new HashMap<String,Object>();
+    private final Map<String,Object> sessionSwapInLocks = new HashMap<>();
 
 
     // ------------------------------------------------------------- Properties

==================================================
StandardSession.java
index 56f6c8bae0..5a34897c0b 100644
--- a/java/org/apache/catalina/session/StandardManager.java
+++ b/java/org/apache/catalina/session/StandardManager.java
@@ -342,6 +342,7 @@ public class StandardManager extends ManagerBase {
      *
      * @exception IOException if an input/output error occurs
      */
+    @SuppressWarnings("null")
     protected void doUnload() throws IOException {
 
         if (log.isDebugEnabled())
@@ -397,11 +398,12 @@ public class StandardManager extends ManagerBase {
         }
 
         // Write the number of active sessions, followed by the details
-        ArrayList<StandardSession> list = new ArrayList<StandardSession>();
+        ArrayList<StandardSession> list = new ArrayList<>();
         synchronized (sessions) {
             if (log.isDebugEnabled())
                 log.debug("Unloading " + sessions.size() + " sessions");
             try {
+                // oos can't be null here
                 oos.writeObject(new Integer(sessions.size()));
                 Iterator<Session> elements = sessions.values().iterator();
                 while (elements.hasNext()) {

==================================================
StandardSessionFacade.java
index bf20b755b3..ddd8723258 100644
--- a/java/org/apache/catalina/session/StandardSession.java
+++ b/java/org/apache/catalina/session/StandardSession.java
@@ -152,7 +152,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
     /**
      * The collection of user data attributes associated with this Session.
      */
-    protected Map<String, Object> attributes = new ConcurrentHashMap<String, Object>();
+    protected Map<String, Object> attributes = new ConcurrentHashMap<>();
 
 
     /**
@@ -209,8 +209,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
     /**
      * The session event listeners for this Session.
      */
-    protected transient ArrayList<SessionListener> listeners =
-        new ArrayList<SessionListener>();
+    protected transient ArrayList<SessionListener> listeners = new ArrayList<>();
 
 
     /**
@@ -244,7 +243,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
      * and event listeners.  <b>IMPLEMENTATION NOTE:</b> This object is
      * <em>not</em> saved and restored across session serializations!
      */
-    protected transient Map<String, Object> notes = new Hashtable<String, Object>();
+    protected transient Map<String, Object> notes = new Hashtable<>();
 
 
     /**
@@ -274,7 +273,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
      * The property change support for this component.  NOTE:  This value
      * is not included in the serialized version of this object.
      */
-    protected transient PropertyChangeSupport support =
+    protected final transient PropertyChangeSupport support =
         new PropertyChangeSupport(this);
 
 
@@ -1168,7 +1167,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
             throw new IllegalStateException
                 (sm.getString("standardSession.getAttributeNames.ise"));
 
-        Set<String> names = new HashSet<String>();
+        Set<String> names = new HashSet<>();
         names.addAll(attributes.keySet());
         return Collections.enumeration(names);
     }
@@ -1568,7 +1567,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
 
         // Deserialize the attribute count and attribute values
         if (attributes == null)
-            attributes = new ConcurrentHashMap<String, Object>();
+            attributes = new ConcurrentHashMap<>();
         int n = ((Integer) stream.readObject()).intValue();
         boolean isValidSave = isValid;
         isValid = true;
@@ -1585,11 +1584,11 @@ public class StandardSession implements HttpSession, Session, Serializable {
         isValid = isValidSave;
 
         if (listeners == null) {
-            listeners = new ArrayList<SessionListener>();
+            listeners = new ArrayList<>();
         }
 
         if (notes == null) {
-            notes = new Hashtable<String, Object>();
+            notes = new Hashtable<>();
         }
     }
 
@@ -1629,8 +1628,8 @@ public class StandardSession implements HttpSession, Session, Serializable {
 
         // Accumulate the names of serializable and non-serializable attributes
         String keys[] = keys();
-        ArrayList<String> saveNames = new ArrayList<String>();
-        ArrayList<Object> saveValues = new ArrayList<Object>();
+        ArrayList<String> saveNames = new ArrayList<>();
+        ArrayList<Object> saveValues = new ArrayList<>();
         for (int i = 0; i < keys.length; i++) {
             Object value = attributes.get(keys[i]);
             if (value == null)

==================================================
StoreBase.java
index a2f2e6fb8f..5fecdf5faf 100644
--- a/java/org/apache/catalina/session/StandardSessionFacade.java
+++ b/java/org/apache/catalina/session/StandardSessionFacade.java
@@ -32,27 +32,15 @@ import javax.servlet.http.HttpSession;
  * @version $Id$
  */
 
-public class StandardSessionFacade
-    implements HttpSession {
+public class StandardSessionFacade implements HttpSession {
 
 
     // ----------------------------------------------------------- Constructors
 
-
-    /**
-     * Construct a new session facade.
-     */
-    public StandardSessionFacade(StandardSession session) {
-        super();
-        this.session = session;
-    }
-
-
     /**
      * Construct a new session facade.
      */
     public StandardSessionFacade(HttpSession session) {
-        super();
         this.session = session;
     }
 
@@ -63,7 +51,7 @@ public class StandardSessionFacade
     /**
      * Wrapped session object.
      */
-    private HttpSession session = null;
+    private final HttpSession session;
 
 
     // ---------------------------------------------------- HttpSession Methods

==================================================
TooManyActiveSessionsException.java
index 74c215e05e..22648761f7 100644
--- a/java/org/apache/catalina/session/StoreBase.java
+++ b/java/org/apache/catalina/session/StoreBase.java
@@ -43,12 +43,12 @@ public abstract class StoreBase extends LifecycleBase implements Store {
     /**
      * Name to register for this Store, used for logging.
      */
-    protected static String storeName = "StoreBase";
+    protected static final String storeName = "StoreBase";
 
     /**
      * The property change support for this component.
      */
-    protected PropertyChangeSupport support = new PropertyChangeSupport(this);
+    protected final PropertyChangeSupport support = new PropertyChangeSupport(this);
 
     /**
      * The string manager for this package.

==================================================
