d80b802485c031ed7deb754b98432b0bf8f83485
==================================================
Differentiate between error conditions and clean shutdown.
==================================================
Mark Thomas
==================================================
Thu Mar 5 13:36:50 2020 +0000
==================================================
AbstractProcessorLight.java
Differentiate between error conditions and clean shutdown.

Allow an async request to complete cleanly if the Connector is paused
before complete() is called on a Container thread.


==================================================
AjpProcessor.java
index b26b41f2a8..709530dfc8 100644
--- a/java/org/apache/coyote/AbstractProcessorLight.java
+++ b/java/org/apache/coyote/AbstractProcessorLight.java
@@ -77,7 +77,7 @@ public abstract class AbstractProcessorLight implements Processor {
                         "], State out: [" + state + "]");
             }
 
-            if (state != SocketState.CLOSED && isAsync()) {
+            if (isAsync()) {
                 state = asyncPostProcess();
                 if (getLog().isDebugEnabled()) {
                     getLog().debug("Socket: [" + socketWrapper +

==================================================
Http11Processor.java
index f1c5d1faeb..596dbcf433 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -334,7 +334,11 @@ public class AjpProcessor extends AbstractProcessor {
         // Set keep alive timeout for next request
         socketWrapper.setReadTimeout(protocol.getKeepAliveTimeout());
         recycle();
-        return SocketState.OPEN;
+        if (protocol.isPaused()) {
+            return SocketState.CLOSED;
+        } else {
+            return SocketState.OPEN;
+        }
     }
 
 

==================================================
