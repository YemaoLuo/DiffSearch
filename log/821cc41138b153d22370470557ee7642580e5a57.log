821cc41138b153d22370470557ee7642580e5a57
==================================================
Make the vendor constants accessible to Coyote in preparation for the fix for BZ 58275.
==================================================
Mark Thomas
==================================================
Mon Sep 7 18:58:51 2015 +0000
==================================================
Globals.java
Make the vendor constants accessible to Coyote in preparation for the fix for BZ 58275.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1701666 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SpnegoAuthenticator.java
index c6774562b1..e2faf08f12 100644
--- a/java/org/apache/catalina/Globals.java
+++ b/java/org/apache/catalina/Globals.java
@@ -16,7 +16,7 @@
  */
 package org.apache.catalina;
 
-import java.util.Locale;
+import org.apache.tomcat.util.compat.JreVendor;
 
 /**
  * Global constants that are applicable to multiple packages within Catalina.
@@ -274,30 +274,9 @@ public final class Globals {
     public static final String JASPER_XML_BLOCK_EXTERNAL_INIT_PARAM =
             "org.apache.jasper.XML_BLOCK_EXTERNAL";
 
-    static {
-        /**
-         * There are a few places where Tomcat either accesses JVM internals
-         * (e.g. the memory leak protection) or where feature support varies
-         * between JVMs (e.g. SPNEGO). These flags exist to enable Tomcat to
-         * adjust its behaviour based on the vendor of the JVM. In an ideal
-         * world this code would not exist.
-         */
-        String vendor = System.getProperty("java.vendor", "");
-        vendor = vendor.toLowerCase(Locale.ENGLISH);
-
-        if (vendor.startsWith("oracle") || vendor.startsWith("sun")) {
-            IS_ORACLE_JVM = true;
-            IS_IBM_JVM = false;
-        } else if (vendor.contains("ibm")) {
-            IS_ORACLE_JVM = false;
-            IS_IBM_JVM = true;
-        } else {
-            IS_ORACLE_JVM = false;
-            IS_IBM_JVM = false;
-        }
-    }
-
-    public static final boolean IS_ORACLE_JVM;
-
-    public static final boolean IS_IBM_JVM;
+    @Deprecated // Will be removed in Tomcat 9.0.x
+    public static final boolean IS_ORACLE_JVM = JreVendor.IS_ORACLE_JVM;
+
+    @Deprecated // Will be removed in Tomcat 9.0.x
+    public static final boolean IS_IBM_JVM = JreVendor.IS_IBM_JVM;
 }

==================================================
JreMemoryLeakPreventionListener.java
index 4eb47148f2..d1d9ff0c7e 100644
--- a/java/org/apache/catalina/authenticator/SpnegoAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/SpnegoAuthenticator.java
@@ -30,7 +30,6 @@ import javax.security.auth.login.LoginContext;
 import javax.security.auth.login.LoginException;
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.catalina.Globals;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.Realm;
 import org.apache.catalina.connector.Request;
@@ -39,6 +38,7 @@ import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.codec.binary.Base64;
+import org.apache.tomcat.util.compat.JreVendor;
 import org.ietf.jgss.GSSContext;
 import org.ietf.jgss.GSSCredential;
 import org.ietf.jgss.GSSException;
@@ -210,7 +210,7 @@ public class SpnegoAuthenticator extends AuthenticatorBase {
             final GSSManager manager = GSSManager.getInstance();
             // IBM JDK only understands indefinite lifetime
             final int credentialLifetime;
-            if (Globals.IS_IBM_JVM) {
+            if (JreVendor.IS_IBM_JVM) {
                 credentialLifetime = GSSCredential.INDEFINITE_LIFETIME;
             } else {
                 credentialLifetime = GSSCredential.DEFAULT_LIFETIME;

==================================================
WebappClassLoaderBase.java
index 33cb89783f..6075b4f513 100644
--- a/java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java
+++ b/java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java
@@ -30,13 +30,13 @@ import javax.imageio.ImageIO;
 import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.parsers.ParserConfigurationException;
 
-import org.apache.catalina.Globals;
 import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleEvent;
 import org.apache.catalina.LifecycleListener;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.ExceptionUtils;
+import org.apache.tomcat.util.compat.JreVendor;
 import org.apache.tomcat.util.res.StringManager;
 
 /**
@@ -310,7 +310,7 @@ public class JreMemoryLeakPreventionListener implements LifecycleListener {
                                 new Class[] {long.class});
                         method.invoke(null, Long.valueOf(Long.MAX_VALUE - 1));
                     } catch (ClassNotFoundException e) {
-                        if (Globals.IS_ORACLE_JVM) {
+                        if (JreVendor.IS_ORACLE_JVM) {
                             log.error(sm.getString(
                                     "jreLeakListener.gcDaemonFail"), e);
                         } else {
@@ -442,7 +442,7 @@ public class JreMemoryLeakPreventionListener implements LifecycleListener {
                     try {
                         Class.forName("com.sun.jndi.ldap.LdapPoolManager");
                     } catch (ClassNotFoundException e) {
-                        if (Globals.IS_ORACLE_JVM) {
+                        if (JreVendor.IS_ORACLE_JVM) {
                             log.error(sm.getString(
                                     "jreLeakListener.ldapPoolManagerFail"), e);
                         } else {

==================================================
JreVendor.java
index 54fc1b98b8..0db6ee52e9 100644
--- a/java/org/apache/catalina/loader/WebappClassLoaderBase.java
+++ b/java/org/apache/catalina/loader/WebappClassLoaderBase.java
@@ -80,6 +80,7 @@ import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.InstrumentableClassLoader;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.IntrospectionUtils;
+import org.apache.tomcat.util.compat.JreVendor;
 import org.apache.tomcat.util.res.StringManager;
 
 /**
@@ -2388,7 +2389,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
                     "webappClassLoader.clearReferencesResourceBundlesFail",
                     getContextName()), e);
         } catch (NoSuchFieldException e) {
-            if (Globals.IS_ORACLE_JVM) {
+            if (JreVendor.IS_ORACLE_JVM) {
                 log.warn(sm.getString(
                         "webappClassLoader.clearReferencesResourceBundlesFail",
                         getContextName()), e);

==================================================
