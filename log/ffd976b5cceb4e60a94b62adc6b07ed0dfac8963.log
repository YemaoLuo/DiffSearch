ffd976b5cceb4e60a94b62adc6b07ed0dfac8963
==================================================
StringBuffer -> StringBuilder for o.a.c.ssi
==================================================
Mark Emlyn
==================================================
Mon Nov 2 18:35:52 2009 +0000
==================================================
ExpressionParseTree.java
StringBuffer -> StringBuilder for o.a.c.ssi

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@832019 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SSIFsize.java
index 52fbc6906e..0b9d599425 100644
--- a/java/org/apache/catalina/ssi/ExpressionParseTree.java
+++ b/java/org/apache/catalina/ssi/ExpressionParseTree.java
@@ -211,12 +211,12 @@ public class ExpressionParseTree {
      * A node the represents a String value
      */
     private class StringNode extends Node {
-        StringBuffer value;
+        StringBuilder value;
         String resolved = null;
 
 
         public StringNode(String value) {
-            this.value = new StringBuffer(value);
+            this.value = new StringBuilder(value);
         }
 
 

==================================================
SSIMediator.java
index 59dc6e3e30..e1768140ab 100644
--- a/java/org/apache/catalina/ssi/SSIFsize.java
+++ b/java/org/apache/catalina/ssi/SSIFsize.java
@@ -74,7 +74,7 @@ public final class SSIFsize implements SSICommand {
         if (numChars < 0) {
             throw new IllegalArgumentException("Num chars can't be negative");
         }
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         for (int i = 0; i < numChars; i++) {
             buf.append(aChar);
         }

==================================================
SSIProcessor.java
index f70f334d45..e327372178 100644
--- a/java/org/apache/catalina/ssi/SSIMediator.java
+++ b/java/org/apache/catalina/ssi/SSIMediator.java
@@ -216,7 +216,7 @@ public class SSIMediator {
         val = val.replace("&quot;", "\"");
         val = val.replace("&amp;", "&");
 
-        StringBuffer sb = new StringBuffer(val);
+        StringBuilder sb = new StringBuilder(val);
         int charStart = sb.indexOf("&#");
         while (charStart > -1) {
             int charEnd = sb.indexOf(";", charStart);

==================================================
SSIServletExternalResolver.java
index 5d41a509c1..761354dc0f 100644
--- a/java/org/apache/catalina/ssi/SSIProcessor.java
+++ b/java/org/apache/catalina/ssi/SSIProcessor.java
@@ -98,7 +98,7 @@ public class SSIProcessor {
         stringWriter = null;
         int index = 0;
         boolean inside = false;
-        StringBuffer command = new StringBuffer();
+        StringBuilder command = new StringBuilder();
         try {
             while (index < fileContents.length()) {
                 char c = fileContents.charAt(index);
@@ -176,19 +176,19 @@ public class SSIProcessor {
 
 
     /**
-     * Parse a StringBuffer and take out the param type token. Called from
+     * Parse a StringBuilder and take out the param type token. Called from
      * <code>requestHandler</code>
      * 
      * @param cmd
-     *            a value of type 'StringBuffer'
+     *            a value of type 'StringBuilder'
      * @return a value of type 'String[]'
      */
-    protected String[] parseParamNames(StringBuffer cmd, int start) {
+    protected String[] parseParamNames(StringBuilder cmd, int start) {
         int bIdx = start;
         int i = 0;
         int quotes = 0;
         boolean inside = false;
-        StringBuffer retBuf = new StringBuffer();
+        StringBuilder retBuf = new StringBuilder();
         while (bIdx < cmd.length()) {
             if (!inside) {
                 while (bIdx < cmd.length() && isSpace(cmd.charAt(bIdx)))
@@ -226,18 +226,18 @@ public class SSIProcessor {
 
 
     /**
-     * Parse a StringBuffer and take out the param token. Called from
+     * Parse a StringBuilder and take out the param token. Called from
      * <code>requestHandler</code>
      * 
      * @param cmd
-     *            a value of type 'StringBuffer'
+     *            a value of type 'StringBuilder'
      * @return a value of type 'String[]'
      */
-    protected String[] parseParamValues(StringBuffer cmd, int start, int count) {
+    protected String[] parseParamValues(StringBuilder cmd, int start, int count) {
         int valIndex = 0;
         boolean inside = false;
         String[] vals = new String[count];
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         char endQuote = 0;
         for (int bIdx = start; bIdx < cmd.length(); bIdx++) {
             if (!inside) {
@@ -277,14 +277,14 @@ public class SSIProcessor {
 
 
     /**
-     * Parse a StringBuffer and take out the command token. Called from
+     * Parse a StringBuilder and take out the command token. Called from
      * <code>requestHandler</code>
      * 
      * @param cmd
-     *            a value of type 'StringBuffer'
+     *            a value of type 'StringBuilder'
      * @return a value of type 'String', or null if there is none
      */
-    private String parseCmd(StringBuffer cmd) {
+    private String parseCmd(StringBuilder cmd) {
         int firstLetter = -1;
         int lastLetter = -1;
         for (int i = 0; i < cmd.length(); i++) {

==================================================
