68c5aeecea7117a35a0e64beeeb772cf06ddbf88
==================================================
Add initial tests for section 5.1
==================================================
Mark Thomas
==================================================
Thu Jun 4 15:07:16 2015 +0000
==================================================
AbstractStream.java
Add initial tests for section 5.1
Add placeholder for PUSH_PROMISE frames (should never be received)
Expand state machine to start tracking allowed frames for each state
Stream now informs the state machine if a data or Window update frame is received

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1683572 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http2Parser.java
index 3bc5f71211..6f31d03e93 100644
--- a/java/org/apache/coyote/http2/AbstractStream.java
+++ b/java/org/apache/coyote/http2/AbstractStream.java
@@ -100,7 +100,11 @@ abstract class AbstractStream {
     }
 
 
-    protected void incrementWindowSize(int increment) {
+    /**
+s     * @param increment
+     * @throws Http2Exception
+     */
+    protected void incrementWindowSize(int increment) throws Http2Exception {
         windowSize.addAndGet(increment);
     }
 

==================================================
Http2UpgradeHandler.java
index 459b850562..f4a5e48d9b 100644
--- a/java/org/apache/coyote/http2/Http2Parser.java
+++ b/java/org/apache/coyote/http2/Http2Parser.java
@@ -37,6 +37,7 @@ class Http2Parser {
     private static final int FRAME_TYPE_HEADERS = 1;
     private static final int FRAME_TYPE_PRIORITY = 2;
     private static final int FRAME_TYPE_SETTINGS = 4;
+    private static final int FRAME_TYPE_PUSH_PROMISE = 5;
     private static final int FRAME_TYPE_PING = 6;
     private static final int FRAME_TYPE_GOAWAY = 7;
     private static final int FRAME_TYPE_WINDOW_UPDATE = 8;
@@ -127,6 +128,8 @@ class Http2Parser {
         case FRAME_TYPE_SETTINGS:
             readSettingsFrame(streamId, flags, payloadSize);
             break;
+        case FRAME_TYPE_PUSH_PROMISE:
+            readPushPromiseFrame(streamId, flags, payloadSize);
         case FRAME_TYPE_PING:
             readPingFrame(streamId, flags, payloadSize);
             break;
@@ -322,6 +325,17 @@ class Http2Parser {
     }
 
 
+    private void readPushPromiseFrame(int streamId, int flags, int payloadSize) throws IOException {
+        if (log.isDebugEnabled()) {
+            log.debug(sm.getString("http2Parser.processFrame", connectionId,
+                    Integer.toString(streamId), Integer.toString(flags),
+                    Integer.toString(payloadSize)));
+        }
+
+        // TODO: Should never be received by a server
+    }
+
+
     private void readPingFrame(int streamId, int flags, int payloadSize)
             throws IOException {
         if (log.isDebugEnabled()) {
@@ -586,7 +600,7 @@ class Http2Parser {
         HpackDecoder getHpackDecoder();
 
         // Data frames
-        ByteBuffer getInputByteBuffer(int streamId, int payloadSize);
+        ByteBuffer getInputByteBuffer(int streamId, int payloadSize) throws Http2Exception;
         void endOfStream(int streamId);
 
         // Header frames
@@ -606,7 +620,7 @@ class Http2Parser {
         void goaway(int lastStreamId, long errorCode, String debugData);
 
         // Window size
-        void incrementWindowSize(int streamId, int increment);
+        void incrementWindowSize(int streamId, int increment) throws Http2Exception;
 
         // Testing
         void swallow(int streamId, int frameType, int flags, int size) throws IOException;

==================================================
Stream.java
index f22d5f65b2..0be0ac2e97 100644
--- a/java/org/apache/coyote/http2/LocalStrings.properties
+++ b/java/org/apache/coyote/http2/LocalStrings.properties
@@ -63,6 +63,9 @@ stream.write=Connection [{0}], Stream [{1}]
 
 streamProcessor.httpupgrade.notsupported=HTTP upgrade is not supported within HTTP/2 streams
 
+streamStateMachine.invalidFrame.windowUpdate=Connection [{0}], Received Data frame for stream [{1}] in state [{2}]
+streamStateMachine.invalidFrame.windowUpdate=Connection [{0}], Received Window Update frame for stream [{1}] in state [{2}]
+
 upgradeHandler.connectionError=An error occurred that requires the HTTP/2 connection to be closed.
 upgradeHandler.goaway.debug=Connection [{0}], Goaway, Last stream [{1}], Error code [{2}], Debug data [{3}]
 upgradeHandler.init=Connection [{0}]

==================================================
StreamStateMachine.java
index 2734e56cab..38ab028a3f 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -42,7 +42,7 @@ public class Stream extends AbstractStream implements HeaderEmitter {
     private final Response coyoteResponse = new Response();
     private final StreamInputBuffer inputBuffer = new StreamInputBuffer();
     private final StreamOutputBuffer outputBuffer = new StreamOutputBuffer();
-    private final StreamStateMachine state = new StreamStateMachine();
+    private final StreamStateMachine state;
 
 
     public Stream(Integer identifier, Http2UpgradeHandler handler) {
@@ -55,6 +55,7 @@ public class Stream extends AbstractStream implements HeaderEmitter {
         this.handler = handler;
         setParentStream(handler);
         setWindowSize(handler.getRemoteSettings().getInitialWindowSize());
+        state = new StreamStateMachine(this);
         this.coyoteRequest = coyoteRequest;
         this.coyoteRequest.setInputBuffer(inputBuffer);
         this.coyoteResponse.setOutputBuffer(outputBuffer);
@@ -96,11 +97,14 @@ public class Stream extends AbstractStream implements HeaderEmitter {
 
 
     @Override
-    public void incrementWindowSize(int windowSizeIncrement) {
+    public void incrementWindowSize(int windowSizeIncrement) throws Http2Exception {
         // If this is zero then any thread that has been trying to write for
         // this stream will be waiting. Notify that thread it can continue. Use
         // notify all even though only one thread is waiting to be on the safe
         // side.
+        if (windowSizeIncrement > 0) {
+            state.receivedWindowUpdate();
+        }
         boolean notify = getWindowSize() == 0;
         super.incrementWindowSize(windowSizeIncrement);
         if (notify) {
@@ -214,7 +218,8 @@ public class Stream extends AbstractStream implements HeaderEmitter {
     }
 
 
-    ByteBuffer getInputByteBuffer() {
+    ByteBuffer getInputByteBuffer() throws Http2Exception {
+        state.receivedData();
         return inputBuffer.getInBuffer();
     }
 

==================================================
Http2TestBase.java
index 8bc016db9e..c57d38011c 100644
--- a/java/org/apache/coyote/http2/StreamStateMachine.java
+++ b/java/org/apache/coyote/http2/StreamStateMachine.java
@@ -16,6 +16,8 @@
  */
 package org.apache.coyote.http2;
 
+import org.apache.tomcat.util.res.StringManager;
+
 /**
  * See <a href="https://tools.ietf.org/html/rfc7540#section-5.1">state
  * diagram</a> in RFC 7540.
@@ -23,15 +25,22 @@ package org.apache.coyote.http2;
  * The following additions are supported by this state machine:
  * <ul>
  * <li>differentiate between closed (normal) and closed caused by reset</li>
- * <li>allow a transition from idle to closed if reset is sent or received</li>
  * </ul>
  *
  */
 public class StreamStateMachine {
 
+    private static final StringManager sm = StringManager.getManager(StreamStateMachine.class);
+
+    private final Stream stream;
     private State state = State.IDLE;
 
 
+    public StreamStateMachine(Stream stream) {
+        this.stream = stream;
+    }
+
+
     public synchronized void sendPushPromise() {
         if (state == State.IDLE) {
             state = State.RESERVED_LOCAL;
@@ -111,6 +120,11 @@ public class StreamStateMachine {
 
 
     public synchronized void recieveReset() {
+        if (state == State.IDLE) {
+            // This should never happen
+            // TODO: ProtocolExcpetion? i18n
+            throw new IllegalStateException();
+        }
         state = State.CLOSED_RESET;
     }
 
@@ -130,14 +144,52 @@ public class StreamStateMachine {
     }
 
 
+    public synchronized void receivedWindowUpdate() throws Http2Exception {
+        // No state change. Just checks state is valid for receiving window
+        // update.
+        if (!state.isWindowUpdatePermitted()) {
+            throw new Http2Exception(sm.getString("streamStateMachine.invalidFrame.windowUpdate",
+                    stream.getConnectionId(), stream.getIdentifier(), state),
+                    0, ErrorCode.PROTOCOL_ERROR);
+        }
+    }
+
+
+    public synchronized void receivedData() throws Http2Exception {
+        // No state change. Just checks state is valid for receiving window
+        // update.
+        if (!state.isDataPermitted()) {
+            throw new Http2Exception(sm.getString("streamStateMachine.invalidFrame.data",
+                    stream.getConnectionId(), stream.getIdentifier(), state),
+                    0, ErrorCode.PROTOCOL_ERROR);
+        }
+    }
+
+
     private enum State {
-        IDLE,
-        OPEN,
-        RESERVED_LOCAL,
-        RESERVED_REMOTE,
-        HALF_CLOSED_LOCAL,
-        HALF_CLOSED_REMOTE,
-        CLOSED,
-        CLOSED_RESET
+        IDLE               (false, false),
+        OPEN               ( true,  true),
+        RESERVED_LOCAL     ( true, false),
+        RESERVED_REMOTE    (false, false),
+        HALF_CLOSED_LOCAL  ( true,  true),
+        HALF_CLOSED_REMOTE ( true, false),
+        CLOSED             (false, false),
+        CLOSED_RESET       ( true,  true);
+
+        private final boolean windowUpdatePermitted;
+        private final boolean dataPermitted;
+
+        private State(boolean windowUpdatePermitted, boolean dataPermitted) {
+            this.windowUpdatePermitted = windowUpdatePermitted;
+            this.dataPermitted = dataPermitted;
+        }
+
+        public boolean isWindowUpdatePermitted() {
+            return windowUpdatePermitted;
+        }
+
+        public boolean isDataPermitted() {
+            return dataPermitted;
+        }
     }
 }

==================================================
TestHttp2Section_5_1.java
index 578c0c39ee..88dec8aabd 100644
--- a/test/org/apache/coyote/http2/Http2TestBase.java
+++ b/test/org/apache/coyote/http2/Http2TestBase.java
@@ -361,6 +361,37 @@ public abstract class Http2TestBase extends TomcatBaseTest {
     }
 
 
+    void sendWindowUpdate(int streamId, int increment) throws IOException {
+        byte[] updateFrame = new byte[13];
+        // length is always 4
+        updateFrame[2] = 0x04;
+        // type is always 8
+        updateFrame[3] = 0x08;
+        // no flags
+        // Stream ID
+        ByteUtil.set31Bits(updateFrame, 5, streamId);
+        // Payload
+        ByteUtil.set31Bits(updateFrame, 9, increment);
+
+        os.write(updateFrame);
+        os.flush();
+    }
+
+
+    void sendData(int streamId, byte[] payload) throws IOException {
+        byte[] header = new byte[9];
+        // length
+        ByteUtil.setThreeBytes(header, 0, payload.length);
+        // Type is zero
+        // No flags
+        // Stream ID
+        ByteUtil.set31Bits(header, 5, streamId);
+
+        os.write(header);
+        os.write(payload);
+        os.flush();
+    }
+
     private static class TestInput implements Http2Parser.Input {
 
         private final InputStream is;

==================================================
