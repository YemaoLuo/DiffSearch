2bf45fa7ca7c32182565ff61f8df4a2925d7f057
==================================================
WebSocket 1.0, section 7.2
==================================================
Mark Emlyn
==================================================
Fri Jun 28 17:10:27 2013 +0000
==================================================
WsSession.java
WebSocket 1.0, section 7.2
Connections created under an authenticated HTTP session must be closed when the HTTP session ends.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1497851 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WsWebSocketContainer.java
index 0cc4b6c321..6a978873c4 100644
--- a/java/org/apache/tomcat/websocket/WsSession.java
+++ b/java/org/apache/tomcat/websocket/WsSession.java
@@ -523,7 +523,7 @@ public class WsSession implements Session {
     }
 
 
-    protected String getHttpSessionId() {
+    public String getHttpSessionId() {
         return httpSessionId;
     }
 

==================================================
WsSci.java
index 94206b4949..cfdf1da165 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -345,10 +345,9 @@ public class WsWebSocketContainer
     }
 
 
-    protected void registerSession(Object endpointInstance,
-            WsSession wsSession) {
+    protected void registerSession(Endpoint endpoint, WsSession wsSession) {
 
-        Class<?> endpointClazz = endpointInstance.getClass();
+        Class<?> endpointClazz = endpoint.getClass();
 
         if (!wsSession.isOpen()) {
             // The session was closed during onOpen. No need to register it.
@@ -369,10 +368,9 @@ public class WsWebSocketContainer
     }
 
 
-    protected void unregisterSession(Object endpointInstance,
-            WsSession wsSession) {
+    protected void unregisterSession(Endpoint endpoint, WsSession wsSession) {
 
-        Class<?> endpointClazz = endpointInstance.getClass();
+        Class<?> endpointClazz = endpoint.getClass();
 
         synchronized (endPointSessionMapLock) {
             Set<WsSession> wsSessions = endpointSessionMap.get(endpointClazz);

==================================================
WsServerContainer.java
index aa80fe9b64..7a853cc6dd 100644
--- a/java/org/apache/tomcat/websocket/server/WsSci.java
+++ b/java/org/apache/tomcat/websocket/server/WsSci.java
@@ -126,12 +126,15 @@ public class WsSci implements ServletContainerInitializer {
 
 
     static WsServerContainer init(ServletContext servletContext) {
+
         WsServerContainer sc = WsServerContainer.getServerContainer();
         sc.setServletContext(servletContext);
 
         servletContext.setAttribute(
                 Constants.SERVER_CONTAINER_SERVLET_CONTEXT_ATTRIBUTE, sc);
 
+        servletContext.addListener(new WsSessionListener(sc));
+
         return sc;
     }
 }

==================================================
WsSessionListener.java
index e509744ed7..e3f44491fe 100644
--- a/java/org/apache/tomcat/websocket/server/WsServerContainer.java
+++ b/java/org/apache/tomcat/websocket/server/WsServerContainer.java
@@ -16,11 +16,13 @@
  */
 package org.apache.tomcat.websocket.server;
 
+import java.io.IOException;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.EnumSet;
 import java.util.Map;
+import java.util.Set;
 import java.util.SortedSet;
 import java.util.TreeSet;
 import java.util.WeakHashMap;
@@ -29,8 +31,11 @@ import java.util.concurrent.ConcurrentHashMap;
 import javax.servlet.DispatcherType;
 import javax.servlet.FilterRegistration;
 import javax.servlet.ServletContext;
+import javax.websocket.CloseReason;
+import javax.websocket.CloseReason.CloseCodes;
 import javax.websocket.DeploymentException;
 import javax.websocket.Encoder;
+import javax.websocket.Endpoint;
 import javax.websocket.server.ServerContainer;
 import javax.websocket.server.ServerEndpoint;
 import javax.websocket.server.ServerEndpointConfig;
@@ -62,7 +67,10 @@ public class WsServerContainer extends WsWebSocketContainer
     private static final Object classLoaderContainerMapLock = new Object();
     private static final StringManager sm =
             StringManager.getManager(Constants.PACKAGE_NAME);
-
+    private static final CloseReason AUTHENTICATED_HTTP_SESSION_CLOSED =
+            new CloseReason(CloseCodes.VIOLATED_POLICY,
+                    "This connection was established under an authenticated " +
+                    "HTTP session that has ended.");
 
     public static WsServerContainer getServerContainer() {
         ClassLoader tccl = Thread.currentThread().getContextClassLoader();
@@ -92,6 +100,8 @@ public class WsServerContainer extends WsWebSocketContainer
     private final ConcurrentHashMap<Integer,SortedSet<TemplatePathMatch>>
             configTemplateMatchMap = new ConcurrentHashMap<>();
     private volatile boolean addAllowed = true;
+    private final ConcurrentHashMap<String,Set<WsSession>> authenticatedSessions =
+            new ConcurrentHashMap<>();
 
     private WsServerContainer() {
         // Hide default constructor
@@ -307,9 +317,13 @@ public class WsServerContainer extends WsWebSocketContainer
      * Overridden to make it visible to other classes in this package.
      */
     @Override
-    protected void registerSession(Object endpointInstance,
-            WsSession wsSession) {
-        super.registerSession(endpointInstance, wsSession);
+    protected void registerSession(Endpoint endpoint, WsSession wsSession) {
+        super.registerSession(endpoint, wsSession);
+        if (wsSession.getUserPrincipal() != null &&
+                wsSession.getHttpSessionId() != null) {
+            registerAuthenticatedSession(wsSession,
+                    wsSession.getHttpSessionId());
+        }
     }
 
 
@@ -319,12 +333,49 @@ public class WsServerContainer extends WsWebSocketContainer
      * Overridden to make it visible to other classes in this package.
      */
     @Override
-    protected void unregisterSession(Object endpointInstance,
-            WsSession wsSession) {
-        super.unregisterSession(endpointInstance, wsSession);
+    protected void unregisterSession(Endpoint endpoint, WsSession wsSession) {
+        if (wsSession.getUserPrincipal() != null &&
+                wsSession.getHttpSessionId() != null) {
+            unregisterAuthenticatedSession(wsSession,
+                    wsSession.getHttpSessionId());
+        }
+        super.unregisterSession(endpoint, wsSession);
     }
 
 
+    private void registerAuthenticatedSession(WsSession wsSession,
+            String httpSessionId) {
+        Set<WsSession> wsSessions = authenticatedSessions.get(httpSessionId);
+        if (wsSession == null) {
+            wsSessions = Collections.newSetFromMap(
+                     new ConcurrentHashMap<WsSession,Boolean>());
+             authenticatedSessions.putIfAbsent(httpSessionId, wsSessions);
+             wsSessions = authenticatedSessions.get(httpSessionId);
+        }
+        wsSessions.add(wsSession);
+    }
+
+
+    private void unregisterAuthenticatedSession(WsSession wsSession,
+            String httpSessionId) {
+        Set<WsSession> wsSessions = authenticatedSessions.get(httpSessionId);
+        wsSessions.remove(wsSession);
+    }
+
+
+    public void closeAuthenticatedSession(String httpSessionId) {
+        Set<WsSession> wsSessions = authenticatedSessions.remove(httpSessionId);
+
+        for (WsSession wsSession : wsSessions) {
+            try {
+                wsSession.close(AUTHENTICATED_HTTP_SESSION_CLOSED);
+            } catch (IOException e) {
+                // Any IOExceptions during close will have been caught and the
+                // onError method called.
+            }
+        }
+    }
+
     private static void validateEncoders(Class<? extends Encoder>[] encoders)
             throws DeploymentException {
 

==================================================
