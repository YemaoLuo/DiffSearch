f69e1aaacf948155e93e10346f324ed3e628ce70
==================================================
Adds support for Virtual resources to the DirResourceSet and JarResourceSet. This will allow an application to full traverse the resource hierarchy including any non-main resources mounted under a directory structure that does not exist in the main resources.
==================================================
Mark Emlyn
==================================================
Tue Jan 8 19:43:13 2013 +0000
==================================================
AbstractFileResourceSet.java
Adds support for Virtual resources to the DirResourceSet and JarResourceSet. This will allow an application to full traverse the resource hierarchy including any non-main resources mounted under a directory structure that does not exist in the main resources.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1430463 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DirResourceSet.java
index d685116be4..cf80488e8f 100644
--- a/java/org/apache/catalina/webresources/AbstractFileResourceSet.java
+++ b/java/org/apache/catalina/webresources/AbstractFileResourceSet.java
@@ -37,6 +37,9 @@ public abstract class AbstractFileResourceSet extends AbstractResourceSet {
 
     protected File file(String name, boolean mustExist) {
 
+        if (name.equals("/")) {
+            name = "";
+        }
         File file = new File(fileBase, name);
         if (file.exists() && file.canRead() || !mustExist) {
 

==================================================
JarResourceRoot.java
index fb7fcb023c..54225bfb96 100644
--- a/java/org/apache/catalina/webresources/DirResourceSet.java
+++ b/java/org/apache/catalina/webresources/DirResourceSet.java
@@ -121,6 +121,18 @@ public class DirResourceSet extends AbstractFileResourceSet {
                 return result;
             }
         } else {
+            if (!path.endsWith("/")) {
+                path = path + "/";
+            }
+            if (webAppMount.startsWith(path)) {
+                int i = webAppMount.indexOf('/', path.length());
+                if (i == -1) {
+                    return new String[] {webAppMount.substring(path.length())};
+                } else {
+                    return new String[] {
+                            webAppMount.substring(path.length(), i)};
+                }
+            }
             return EMPTY_STRING_ARRAY;
         }
     }
@@ -148,6 +160,18 @@ public class DirResourceSet extends AbstractFileResourceSet {
                     }
                 }
             }
+        } else {
+            if (!path.endsWith("/")) {
+                path = path + "/";
+            }
+            if (webAppMount.startsWith(path)) {
+                int i = webAppMount.indexOf('/', path.length());
+                if (i == -1) {
+                    result.add(webAppMount + "/");
+                } else {
+                    result.add(webAppMount.substring(0, i + 1));
+                }
+            }
         }
         result.setLocked(true);
         return result;

==================================================
JarResourceSet.java
index 667f6c1fde..b6e4ad02f5 100644
--- a/java/org/apache/catalina/webresources/JarResourceRoot.java
+++ b/java/org/apache/catalina/webresources/JarResourceRoot.java
@@ -31,12 +31,26 @@ public class JarResourceRoot extends AbstractResource {
 
     private final File base;
     private final String baseUrl;
+    private final String name;
 
     public JarResourceRoot(WebResourceRoot root, File base, String baseUrl,
             String webAppPath) {
         super(root, webAppPath);
         this.base = base;
         this.baseUrl = "jar:" + baseUrl;
+        // Extract the name from the webAppPath
+        // Strip any trailing '/' character
+        String resourceName;
+        if (webAppPath.endsWith("/")) {
+            resourceName = webAppPath.substring(0, webAppPath.length() - 1);
+        } else {
+            resourceName = webAppPath;
+        }
+        int i = resourceName.lastIndexOf('/');
+        if (i > -1) {
+            resourceName = resourceName.substring(i + 1);
+        }
+        name = resourceName;
     }
 
     @Override
@@ -71,7 +85,7 @@ public class JarResourceRoot extends AbstractResource {
 
     @Override
     public String getName() {
-        return "";
+        return name;
     }
 
     @Override

==================================================
AbstractTestResourceSet.java
index 97815af106..27c031f42c 100644
--- a/java/org/apache/catalina/webresources/JarResourceSet.java
+++ b/java/org/apache/catalina/webresources/JarResourceSet.java
@@ -167,6 +167,19 @@ public class JarResourceSet extends AbstractResourceSet {
                     }
                 }
             }
+        } else {
+            if (!path.endsWith("/")) {
+                path = path + "/";
+            }
+            if (webAppMount.startsWith(path)) {
+                int i = webAppMount.indexOf('/', path.length());
+                if (i == -1) {
+                    return new String[] {webAppMount.substring(path.length())};
+                } else {
+                    return new String[] {
+                            webAppMount.substring(path.length(), i)};
+                }
+            }
         }
         return result.toArray(new String[result.size()]);
     }
@@ -204,6 +217,18 @@ public class JarResourceSet extends AbstractResourceSet {
                     }
                 }
             }
+        } else {
+            if (!path.endsWith("/")) {
+                path = path + "/";
+            }
+            if (webAppMount.startsWith(path)) {
+                int i = webAppMount.indexOf('/', path.length());
+                if (i == -1) {
+                    result.add(webAppMount + "/");
+                } else {
+                    result.add(webAppMount.substring(0, i + 1));
+                }
+            }
         }
         result.setLocked(true);
         return result;

==================================================
AbstractTestResourceSetMount.java
index d49abb9de0..5e7925e893 100644
--- a/test/org/apache/catalina/webresources/AbstractTestResourceSet.java
+++ b/test/org/apache/catalina/webresources/AbstractTestResourceSet.java
@@ -67,7 +67,13 @@ public abstract class AbstractTestResourceSet {
     public final void testGetResourceRoot() {
         WebResource webResource = resourceRoot.getResource(getMount() + "/");
         Assert.assertTrue(webResource.isDirectory());
-        Assert.assertEquals("", webResource.getName());
+        String expected;
+        if (getMount().length() > 0) {
+            expected = getMount().substring(1);
+        } else {
+            expected = "";
+        }
+        Assert.assertEquals(expected, webResource.getName());
         Assert.assertEquals(getMount() + "/", webResource.getWebappPath());
     }
 

==================================================
TestDirResourceSetVirtual.java
index d4737adb7c..1676ad9791 100644
--- a/test/org/apache/catalina/webresources/AbstractTestResourceSetMount.java
+++ b/test/org/apache/catalina/webresources/AbstractTestResourceSetMount.java
@@ -44,14 +44,17 @@ public abstract class AbstractTestResourceSetMount
         String[] results = resourceRoot.list("/");
 
         Assert.assertNotNull(results);
-        Assert.assertEquals(0, results.length);
+        Assert.assertEquals(1, results.length);
+        Assert.assertEquals(getMount().substring(1), results[0]);
     }
 
     @Test
     public final void testListWebAppPathsAbove() {
         Set<String> results = resourceRoot.listWebAppPaths("/");
 
-        Assert.assertNull(results);
+        Assert.assertNotNull(results);
+        Assert.assertEquals(1, results.size());
+        Assert.assertTrue(results.contains(getMount() + "/"));
     }
 
     @Test

==================================================
