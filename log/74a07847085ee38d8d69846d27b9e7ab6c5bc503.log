74a07847085ee38d8d69846d27b9e7ab6c5bc503
==================================================
Faking of non-blocking reads for BIO.
==================================================
Mark Emlyn
==================================================
Fri May 3 20:34:34 2013 +0000
==================================================
AbstractHttp11Processor.java
Faking of non-blocking reads for BIO.
Tweak test case so it relies more on the Servlet API and less on the implementation details of the test so BIO's fake blocking passes.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1478968 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11NioProcessor.java
index 0e6f672b04..e0aab52f70 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -810,6 +810,8 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
             ((AtomicBoolean) param).set(asyncStateMachine.isAsyncTimingOut());
         } else if (actionCode == ActionCode.ASYNC_IS_ERROR) {
             ((AtomicBoolean) param).set(asyncStateMachine.isAsyncError());
+        } else if (actionCode == ActionCode.AVAILABLE) {
+            request.setAvailable(inputBuffer.available());
         } else if (actionCode == ActionCode.NB_WRITE_INTEREST) {
             AtomicBoolean isReady = (AtomicBoolean)param;
             isReady.set(getOutputBuffer().isReady());

==================================================
InternalInputBuffer.java
index a0f7ed3365..858634d8ba 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -472,9 +472,6 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
                     log.warn(sm.getString("http11processor.socket.ssl"), e);
                 }
             }
-
-        } else if (actionCode == ActionCode.AVAILABLE) {
-            request.setAvailable(inputBuffer.available());
         } else if (actionCode == ActionCode.COMET_BEGIN) {
             comet = true;
         } else if (actionCode == ActionCode.COMET_END) {

==================================================
TestNonBlockingAPI.java
index 15f352428d..0c79d237cc 100644
--- a/java/org/apache/coyote/http11/InternalInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalInputBuffer.java
@@ -70,6 +70,17 @@ public class InternalInputBuffer extends AbstractInputBuffer<Socket> {
     }
 
 
+    /**
+     * Data is always available for blocking IO (if you wait long enough) so
+     * return a value of 1. Note that the actual value is never used it is only
+     * tested for == 0 or > 0.
+     */
+    @Override
+    public int available() {
+        return 1;
+    }
+
+
     /**
      * Read the request line. This function is meant to be used during the
      * HTTP request header parsing. Do NOT attempt to read the request body
@@ -543,8 +554,7 @@ public class InternalInputBuffer extends AbstractInputBuffer<Socket> {
 
     @Override
     protected int nbRead() throws IOException {
-        // TODO Auto-generated method stub
-        return 0;
+        throw new IllegalStateException("This method is unused for BIO");
     }
 
 

==================================================
