d765de8a5053782c31150cc2d3d5516a71c9c712
==================================================
Improve processing of errors that are wrapped into InvocationTargetException.
==================================================
Konstantin Kolinko
==================================================
Mon Nov 14 00:10:55 2011 +0000
==================================================
JspRuntimeLibrary.java
Improve processing of errors that are wrapped into InvocationTargetException.
Rethrow errors that must be rethrown.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1201556 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BeanFactory.java
index b09dbe4612..6569f3c196 100644
--- a/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
+++ b/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
@@ -40,6 +40,7 @@ import javax.servlet.jsp.tagext.BodyContent;
 import org.apache.jasper.Constants;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.compiler.Localizer;
+import org.apache.jasper.util.ExceptionUtils;
 
 /**
  * Bunch of util methods that are used by code generated for useBean,
@@ -354,6 +355,8 @@ public class JspRuntimeLibrary {
                 }
             }
         } catch (Exception ex) {
+            Throwable thr = ExceptionUtils.unwrapInvocationTargetException(ex);
+            ExceptionUtils.handleThrowable(thr);
             throw new JasperException(ex);
         }
         if (!ignoreMethodNF && (method == null)) {
@@ -526,6 +529,8 @@ public class JspRuntimeLibrary {
                 method.invoke (bean, new Object[] {tmpval});
             }
         } catch (Exception ex) {
+            Throwable thr = ExceptionUtils.unwrapInvocationTargetException(ex);
+            ExceptionUtils.handleThrowable(thr);
             throw new JasperException ("error in invoking method", ex);
         }
     }
@@ -566,6 +571,8 @@ public class JspRuntimeLibrary {
             Method method = getReadMethod(o.getClass(), prop);
             value = method.invoke(o, (Object[]) null);
         } catch (Exception ex) {
+            Throwable thr = ExceptionUtils.unwrapInvocationTargetException(ex);
+            ExceptionUtils.handleThrowable(thr);
             throw new JasperException (ex);
         }
         return value;
@@ -610,6 +617,8 @@ public class JspRuntimeLibrary {
                     false )
             });
         } catch (Exception ex) {
+            Throwable thr = ExceptionUtils.unwrapInvocationTargetException(ex);
+            ExceptionUtils.handleThrowable(thr);
             throw new JasperException(ex);
         }
     }
@@ -622,6 +631,8 @@ public class JspRuntimeLibrary {
             Method method = getWriteMethod(bean.getClass(), prop);
             method.invoke(bean, new Object[] { value });
         } catch (Exception ex) {
+            Throwable thr = ExceptionUtils.unwrapInvocationTargetException(ex);
+            ExceptionUtils.handleThrowable(thr);
             throw new JasperException(ex);
         }
     }
@@ -634,6 +645,8 @@ public class JspRuntimeLibrary {
             Method method = getWriteMethod(bean.getClass(), prop);
             method.invoke(bean, new Object[] { Integer.valueOf(value) });
         } catch (Exception ex) {
+            Throwable thr = ExceptionUtils.unwrapInvocationTargetException(ex);
+            ExceptionUtils.handleThrowable(thr);
             throw new JasperException(ex);
         }
     }
@@ -646,6 +659,8 @@ public class JspRuntimeLibrary {
             Method method = getWriteMethod(bean.getClass(), prop);
             method.invoke(bean, new Object[] { Short.valueOf(value) });
         } catch (Exception ex) {
+            Throwable thr = ExceptionUtils.unwrapInvocationTargetException(ex);
+            ExceptionUtils.handleThrowable(thr);
             throw new JasperException(ex);
         }
     }
@@ -658,6 +673,8 @@ public class JspRuntimeLibrary {
             Method method = getWriteMethod(bean.getClass(), prop);
             method.invoke(bean, new Object[] { Long.valueOf(value) });
         } catch (Exception ex) {
+            Throwable thr = ExceptionUtils.unwrapInvocationTargetException(ex);
+            ExceptionUtils.handleThrowable(thr);
             throw new JasperException(ex);
         }
     }
@@ -670,6 +687,8 @@ public class JspRuntimeLibrary {
             Method method = getWriteMethod(bean.getClass(), prop);
             method.invoke(bean, new Object[] { Double.valueOf(value) });
         } catch (Exception ex) {
+            Throwable thr = ExceptionUtils.unwrapInvocationTargetException(ex);
+            ExceptionUtils.handleThrowable(thr);
             throw new JasperException(ex);
         }
     }
@@ -682,6 +701,8 @@ public class JspRuntimeLibrary {
             Method method = getWriteMethod(bean.getClass(), prop);
             method.invoke(bean, new Object[] { Float.valueOf(value) });
         } catch (Exception ex) {
+            Throwable thr = ExceptionUtils.unwrapInvocationTargetException(ex);
+            ExceptionUtils.handleThrowable(thr);
             throw new JasperException(ex);
         }
     }
@@ -694,6 +715,8 @@ public class JspRuntimeLibrary {
             Method method = getWriteMethod(bean.getClass(), prop);
             method.invoke(bean, new Object[] { Character.valueOf(value) });
         } catch (Exception ex) {
+            Throwable thr = ExceptionUtils.unwrapInvocationTargetException(ex);
+            ExceptionUtils.handleThrowable(thr);
             throw new JasperException(ex);
         }
     }
@@ -706,6 +729,8 @@ public class JspRuntimeLibrary {
             Method method = getWriteMethod(bean.getClass(), prop);
             method.invoke(bean, new Object[] { Byte.valueOf(value) });
         } catch (Exception ex) {
+            Throwable thr = ExceptionUtils.unwrapInvocationTargetException(ex);
+            ExceptionUtils.handleThrowable(thr);
             throw new JasperException(ex);
         }
     }
@@ -718,6 +743,8 @@ public class JspRuntimeLibrary {
             Method method = getWriteMethod(bean.getClass(), prop);
             method.invoke(bean, new Object[] { Boolean.valueOf(value) });
         } catch (Exception ex) {
+            Throwable thr = ExceptionUtils.unwrapInvocationTargetException(ex);
+            ExceptionUtils.handleThrowable(thr);
             throw new JasperException(ex);
         }
     }

==================================================
DataSourceLinkFactory.java
index f384e90683..6ced130653 100644
--- a/java/org/apache/naming/factory/BeanFactory.java
+++ b/java/org/apache/naming/factory/BeanFactory.java
@@ -236,6 +236,13 @@ public class BeanFactory
                 ne.setRootCause(ie2);
                 throw ne;
             } catch (java.lang.reflect.InvocationTargetException ite) {
+                Throwable cause = ite.getCause();
+                if (cause instanceof ThreadDeath) {
+                    throw (ThreadDeath) cause;
+                }
+                if (cause instanceof VirtualMachineError) {
+                    throw (VirtualMachineError) cause;
+                }
                 NamingException ne = new NamingException(ite.getMessage());
                 ne.setRootCause(ite);
                 throw ne;

==================================================
ServiceRefFactory.java
index 3b0209e968..d3e21f235e 100644
--- a/java/org/apache/naming/factory/DataSourceLinkFactory.java
+++ b/java/org/apache/naming/factory/DataSourceLinkFactory.java
@@ -114,9 +114,9 @@ public class DataSourceLinkFactory extends ResourceLinkFactory {
             try {
                 return method.invoke(ds,args);
             }catch (Throwable t) {
-                if (t instanceof InvocationTargetException) {
-                    InvocationTargetException it = (InvocationTargetException)t;
-                    throw it.getCause()!=null?it.getCause():it;
+                if (t instanceof InvocationTargetException
+                        && t.getCause() != null) {
+                    throw t.getCause();
                 } else {
                     throw t;
                 }

==================================================
