52ccdbf368bc9a7e92dc26c9a1f5346d918b521c
==================================================
Whitespace removal from /java/org/apache/naming
==================================================
Mark Emlyn
==================================================
Sat Oct 22 21:03:58 2011 +0000
==================================================
Constants.java
Whitespace removal from /java/org/apache/naming

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1187782 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ContextAccessController.java
index ffb3c426d3..d6e650305c 100644
--- a/java/org/apache/naming/Constants.java
+++ b/java/org/apache/naming/Constants.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming;

==================================================
ContextBindings.java
index 2fc437e004..077a4d3ca9 100644
--- a/java/org/apache/naming/ContextAccessController.java
+++ b/java/org/apache/naming/ContextAccessController.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming;
@@ -52,7 +52,7 @@ public class ContextAccessController {
 
     /**
      * Set a security token for a context. Can be set only once.
-     * 
+     *
      * @param name Name of the context
      * @param token Security token
      */
@@ -65,7 +65,7 @@ public class ContextAccessController {
 
     /**
      * Remove a security token for a context.
-     * 
+     *
      * @param name Name of the context
      * @param token Security token
      */
@@ -78,9 +78,9 @@ public class ContextAccessController {
 
     /**
      * Check a submitted security token. The submitted token must be equal to
-     * the token present in the repository. If no token is present for the 
+     * the token present in the repository. If no token is present for the
      * context, then returns true.
-     * 
+     *
      * @param name Name of the context
      * @param token Submitted security token
      */
@@ -93,7 +93,7 @@ public class ContextAccessController {
 
     /**
      * Allow writing to a context.
-     * 
+     *
      * @param name Name of the context
      * @param token Security token
      */
@@ -105,7 +105,7 @@ public class ContextAccessController {
 
     /**
      * Set whether or not a context is writable.
-     * 
+     *
      * @param name Name of the context
      */
     public static void setReadOnly(Object name) {
@@ -115,7 +115,7 @@ public class ContextAccessController {
 
     /**
      * Returns if a context is writable.
-     * 
+     *
      * @param name Name of the context
      */
     public static boolean isWritable(Object name) {

==================================================
EjbRef.java
index 57af5de818..cc9a9b6478 100644
--- a/java/org/apache/naming/ContextBindings.java
+++ b/java/org/apache/naming/ContextBindings.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming;
@@ -78,7 +78,7 @@ public class ContextBindings {
     /**
      * The string manager for this package.
      */
-    protected static final StringManager sm = 
+    protected static final StringManager sm =
         StringManager.getManager(Constants.Package);
 
 
@@ -87,7 +87,7 @@ public class ContextBindings {
 
     /**
      * Binds a context name.
-     * 
+     *
      * @param name Name of the context
      * @param context Associated naming context instance
      */
@@ -98,12 +98,12 @@ public class ContextBindings {
 
     /**
      * Binds a context name.
-     * 
+     *
      * @param name Name of the context
      * @param context Associated naming context instance
      * @param token Security token
      */
-    public static void bindContext(Object name, Context context, 
+    public static void bindContext(Object name, Context context,
                                    Object token) {
         if (ContextAccessController.checkSecurityToken(name, token))
             contextNameBindings.put(name, context);
@@ -112,7 +112,7 @@ public class ContextBindings {
 
     /**
      * Unbind context name.
-     * 
+     *
      * @param name Name of the context
      */
     public static void unbindContext(Object name) {
@@ -122,7 +122,7 @@ public class ContextBindings {
 
     /**
      * Unbind context name.
-     * 
+     *
      * @param name Name of the context
      * @param token Security token
      */
@@ -134,7 +134,7 @@ public class ContextBindings {
 
     /**
      * Retrieve a naming context.
-     * 
+     *
      * @param name Name of the context
      */
     static Context getContext(Object name) {
@@ -144,10 +144,10 @@ public class ContextBindings {
 
     /**
      * Binds a naming context to a thread.
-     * 
+     *
      * @param name Name of the context
      */
-    public static void bindThread(Object name) 
+    public static void bindThread(Object name)
         throws NamingException {
         bindThread(name, null);
     }
@@ -155,11 +155,11 @@ public class ContextBindings {
 
     /**
      * Binds a naming context to a thread.
-     * 
+     *
      * @param name Name of the context
      * @param token Security token
      */
-    public static void bindThread(Object name, Object token) 
+    public static void bindThread(Object name, Object token)
         throws NamingException {
         if (ContextAccessController.checkSecurityToken(name, token)) {
             Context context = contextNameBindings.get(name);
@@ -174,7 +174,7 @@ public class ContextBindings {
 
     /**
      * Unbinds a naming context to a thread.
-     * 
+     *
      * @param name Name of the context
      */
     public static void unbindThread(Object name) {
@@ -184,7 +184,7 @@ public class ContextBindings {
 
     /**
      * Unbinds a naming context to a thread.
-     * 
+     *
      * @param name Name of the context
      * @param token Security token
      */
@@ -232,10 +232,10 @@ public class ContextBindings {
 
     /**
      * Binds a naming context to a class loader.
-     * 
+     *
      * @param name Name of the context
      */
-    public static void bindClassLoader(Object name) 
+    public static void bindClassLoader(Object name)
         throws NamingException {
         bindClassLoader(name, null);
     }
@@ -243,11 +243,11 @@ public class ContextBindings {
 
     /**
      * Binds a naming context to a thread.
-     * 
+     *
      * @param name Name of the context
      * @param token Security token
      */
-    public static void bindClassLoader(Object name, Object token) 
+    public static void bindClassLoader(Object name, Object token)
         throws NamingException {
         bindClassLoader
             (name, token, Thread.currentThread().getContextClassLoader());
@@ -256,12 +256,12 @@ public class ContextBindings {
 
     /**
      * Binds a naming context to a thread.
-     * 
+     *
      * @param name Name of the context
      * @param token Security token
      */
-    public static void bindClassLoader(Object name, Object token, 
-                                       ClassLoader classLoader) 
+    public static void bindClassLoader(Object name, Object token,
+                                       ClassLoader classLoader)
         throws NamingException {
         if (ContextAccessController.checkSecurityToken(name, token)) {
             Context context = contextNameBindings.get(name);
@@ -276,7 +276,7 @@ public class ContextBindings {
 
     /**
      * Unbinds a naming context to a class loader.
-     * 
+     *
      * @param name Name of the context
      */
     public static void unbindClassLoader(Object name) {
@@ -286,23 +286,23 @@ public class ContextBindings {
 
     /**
      * Unbinds a naming context to a class loader.
-     * 
+     *
      * @param name Name of the context
      * @param token Security token
      */
     public static void unbindClassLoader(Object name, Object token) {
-        unbindClassLoader(name, token, 
+        unbindClassLoader(name, token,
                           Thread.currentThread().getContextClassLoader());
     }
 
 
     /**
      * Unbinds a naming context to a class loader.
-     * 
+     *
      * @param name Name of the context
      * @param token Security token
      */
-    public static void unbindClassLoader(Object name, Object token, 
+    public static void unbindClassLoader(Object name, Object token,
                                          ClassLoader classLoader) {
         if (ContextAccessController.checkSecurityToken(name, token)) {
             Object n = clNameBindings.get(classLoader);

==================================================
HandlerRef.java
index 4062abd75f..034e6e64eb 100644
--- a/java/org/apache/naming/EjbRef.java
+++ b/java/org/apache/naming/EjbRef.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming;
@@ -33,12 +33,12 @@ public class EjbRef extends Reference {
 
     private static final long serialVersionUID = 1L;
 
-    
+
     // -------------------------------------------------------------- Constants
     /**
      * Default factory for this reference.
      */
-    public static final String DEFAULT_FACTORY = 
+    public static final String DEFAULT_FACTORY =
         org.apache.naming.factory.Constants.DEFAULT_EJB_FACTORY;
 
 
@@ -65,7 +65,7 @@ public class EjbRef extends Reference {
 
     /**
      * EJB Reference.
-     * 
+     *
      * @param ejbType EJB type
      * @param home Home interface classname
      * @param remote Remote interface classname
@@ -78,7 +78,7 @@ public class EjbRef extends Reference {
 
     /**
      * EJB Reference.
-     * 
+     *
      * @param ejbType EJB type
      * @param home Home interface classname
      * @param remote Remote interface classname
@@ -113,7 +113,7 @@ public class EjbRef extends Reference {
 
 
     /**
-     * Retrieves the class name of the factory of the object to which this 
+     * Retrieves the class name of the factory of the object to which this
      * reference refers.
      */
     @Override

==================================================
JndiPermission.java
index 9425b036cc..82418a04e3 100644
--- a/java/org/apache/naming/HandlerRef.java
+++ b/java/org/apache/naming/HandlerRef.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming;
@@ -35,12 +35,12 @@ public class HandlerRef extends Reference {
 
     private static final long serialVersionUID = 1L;
 
-    
+
     // -------------------------------------------------------------- Constants
     /**
      * Default factory for this reference.
      */
-    public static final String DEFAULT_FACTORY = 
+    public static final String DEFAULT_FACTORY =
         org.apache.naming.factory.Constants.DEFAULT_HANDLER_FACTORY;
 
 
@@ -122,7 +122,7 @@ public class HandlerRef extends Reference {
 
 
     /**
-     * Retrieves the class name of the factory of the object to which this 
+     * Retrieves the class name of the factory of the object to which this
      * reference refers.
      */
     @Override

==================================================
NameParserImpl.java
index 5ee1a8161a..aec2fdb414 100644
--- a/java/org/apache/naming/LocalStrings_es.properties
+++ b/java/org/apache/naming/LocalStrings_es.properties
@@ -15,7 +15,7 @@
 # $Id$
 # language es
 # package org.apache.naming
-contextBindings.unknownContext = Contexto {0} desconocido 
+contextBindings.unknownContext = Contexto {0} desconocido
 contextBindings.noContextBoundToThread = No hay contexto de nombres asociado a este hilo
 contextBindings.noContextBoundToCL = No hay contexto de nombres asociado a este cargador de clase
 selectorContext.noJavaUrl = Este contexto debe de ser accedido a traves de una URL de tipo java\:

==================================================
NamingContext.java
index 844d64dabf..3aac726aba 100644
--- a/java/org/apache/naming/NameParserImpl.java
+++ b/java/org/apache/naming/NameParserImpl.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming;
@@ -30,7 +30,7 @@ import javax.naming.NamingException;
  * @version $Id$
  */
 
-public class NameParserImpl 
+public class NameParserImpl
     implements NameParser {
 
 
@@ -42,9 +42,9 @@ public class NameParserImpl
 
     /**
      * Parses a name into its components.
-     * 
+     *
      * @param name The non-null string name to parse
-     * @return A non-null parsed form of the name using the naming convention 
+     * @return A non-null parsed form of the name using the naming convention
      * of this parser.
      */
     @Override

==================================================
NamingContextBindingsEnumeration.java
index 8d0c0772d1..dc157e7e22 100644
--- a/java/org/apache/naming/NamingContext.java
+++ b/java/org/apache/naming/NamingContext.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming;
@@ -68,7 +68,7 @@ public class NamingContext implements Context {
     /**
      * Builds a naming context using the given environment.
      */
-    public NamingContext(Hashtable<String,Object> env, String name) 
+    public NamingContext(Hashtable<String,Object> env, String name)
         throws NamingException {
         this.bindings = new HashMap<String,NamingEntry>();
         this.env = new Hashtable<String,Object>();
@@ -89,7 +89,7 @@ public class NamingContext implements Context {
      * Builds a naming context using the given environment.
      */
     public NamingContext(Hashtable<String,Object> env, String name,
-            HashMap<String,NamingEntry> bindings) 
+            HashMap<String,NamingEntry> bindings)
         throws NamingException {
         this(env, name);
         this.bindings = bindings;
@@ -130,11 +130,11 @@ public class NamingContext implements Context {
 
 
     /**
-     * Retrieves the named object. If name is empty, returns a new instance 
-     * of this context (which represents the same naming context as this 
-     * context, but its environment may be modified independently and it may 
+     * Retrieves the named object. If name is empty, returns a new instance
+     * of this context (which represents the same naming context as this
+     * context, but its environment may be modified independently and it may
      * be accessed concurrently).
-     * 
+     *
      * @param name the name of the object to look up
      * @return the object bound to name
      * @exception NamingException if a naming exception is encountered
@@ -148,7 +148,7 @@ public class NamingContext implements Context {
 
     /**
      * Retrieves the named object.
-     * 
+     *
      * @param name the name of the object to look up
      * @return the object bound to name
      * @exception NamingException if a naming exception is encountered
@@ -161,10 +161,10 @@ public class NamingContext implements Context {
 
 
     /**
-     * Binds a name to an object. All intermediate contexts and the target 
-     * context (that named by all but terminal atomic component of the name) 
+     * Binds a name to an object. All intermediate contexts and the target
+     * context (that named by all but terminal atomic component of the name)
      * must already exist.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @exception NameAlreadyBoundException if name is already bound
@@ -181,7 +181,7 @@ public class NamingContext implements Context {
 
     /**
      * Binds a name to an object.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @exception NameAlreadyBoundException if name is already bound
@@ -197,14 +197,14 @@ public class NamingContext implements Context {
 
 
     /**
-     * Binds a name to an object, overwriting any existing binding. All 
-     * intermediate contexts and the target context (that named by all but 
+     * Binds a name to an object, overwriting any existing binding. All
+     * intermediate contexts and the target context (that named by all but
      * terminal atomic component of the name) must already exist.
      * <p>
-     * If the object is a DirContext, any existing attributes associated with 
-     * the name are replaced with those of the object. Otherwise, any 
+     * If the object is a DirContext, any existing attributes associated with
+     * the name are replaced with those of the object. Otherwise, any
      * existing attributes associated with the name remain unchanged.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @exception javax.naming.directory.InvalidAttributesException if object
@@ -220,7 +220,7 @@ public class NamingContext implements Context {
 
     /**
      * Binds a name to an object, overwriting any existing binding.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @exception javax.naming.directory.InvalidAttributesException if object
@@ -235,16 +235,16 @@ public class NamingContext implements Context {
 
 
     /**
-     * Unbinds the named object. Removes the terminal atomic name in name 
-     * from the target context--that named by all but the terminal atomic 
+     * Unbinds the named object. Removes the terminal atomic name in name
+     * from the target context--that named by all but the terminal atomic
      * part of name.
      * <p>
-     * This method is idempotent. It succeeds even if the terminal atomic 
-     * name is not bound in the target context, but throws 
-     * NameNotFoundException if any of the intermediate contexts do not exist. 
-     * 
+     * This method is idempotent. It succeeds even if the terminal atomic
+     * name is not bound in the target context, but throws
+     * NameNotFoundException if any of the intermediate contexts do not exist.
+     *
      * @param name the name to bind; may not be empty
-     * @exception NameNotFoundException if an intermediate context does not 
+     * @exception NameNotFoundException if an intermediate context does not
      * exist
      * @exception NamingException if a naming exception is encountered
      */
@@ -252,20 +252,20 @@ public class NamingContext implements Context {
     public void unbind(Name name)
         throws NamingException {
         checkWritable();
-        
+
         while ((!name.isEmpty()) && (name.get(0).length() == 0))
             name = name.getSuffix(1);
         if (name.isEmpty())
             throw new NamingException
                 (sm.getString("namingContext.invalidName"));
-        
+
         NamingEntry entry = bindings.get(name.get(0));
-        
+
         if (entry == null) {
             throw new NameNotFoundException
                 (sm.getString("namingContext.nameNotBound", name.get(0)));
         }
-        
+
         if (name.size() > 1) {
             if (entry.type == NamingEntry.CONTEXT) {
                 ((Context) entry.value).unbind(name.getSuffix(1));
@@ -276,15 +276,15 @@ public class NamingContext implements Context {
         } else {
             bindings.remove(name.get(0));
         }
-        
+
     }
 
 
     /**
      * Unbinds the named object.
-     * 
+     *
      * @param name the name to bind; may not be empty
-     * @exception NameNotFoundException if an intermediate context does not 
+     * @exception NameNotFoundException if an intermediate context does not
      * exist
      * @exception NamingException if a naming exception is encountered
      */
@@ -296,11 +296,11 @@ public class NamingContext implements Context {
 
 
     /**
-     * Binds a new name to the object bound to an old name, and unbinds the 
-     * old name. Both names are relative to this context. Any attributes 
-     * associated with the old name become associated with the new name. 
+     * Binds a new name to the object bound to an old name, and unbinds the
+     * old name. Both names are relative to this context. Any attributes
+     * associated with the old name become associated with the new name.
      * Intermediate contexts of the old name are not changed.
-     * 
+     *
      * @param oldName the name of the existing binding; may not be empty
      * @param newName the name of the new binding; may not be empty
      * @exception NameAlreadyBoundException if newName is already bound
@@ -316,9 +316,9 @@ public class NamingContext implements Context {
 
 
     /**
-     * Binds a new name to the object bound to an old name, and unbinds the 
+     * Binds a new name to the object bound to an old name, and unbinds the
      * old name.
-     * 
+     *
      * @param oldName the name of the existing binding; may not be empty
      * @param newName the name of the new binding; may not be empty
      * @exception NameAlreadyBoundException if newName is already bound
@@ -332,15 +332,15 @@ public class NamingContext implements Context {
 
 
     /**
-     * Enumerates the names bound in the named context, along with the class 
-     * names of objects bound to them. The contents of any subcontexts are 
+     * Enumerates the names bound in the named context, along with the class
+     * names of objects bound to them. The contents of any subcontexts are
      * not included.
      * <p>
-     * If a binding is added to or removed from this context, its effect on 
+     * If a binding is added to or removed from this context, its effect on
      * an enumeration previously returned is undefined.
-     * 
+     *
      * @param name the name of the context to list
-     * @return an enumeration of the names and class names of the bindings in 
+     * @return an enumeration of the names and class names of the bindings in
      * this context. Each element of the enumeration is of type NameClassPair.
      * @exception NamingException if a naming exception is encountered
      */
@@ -353,14 +353,14 @@ public class NamingContext implements Context {
         if (name.isEmpty()) {
             return new NamingContextEnumeration(bindings.values().iterator());
         }
-        
+
         NamingEntry entry = bindings.get(name.get(0));
-        
+
         if (entry == null) {
             throw new NameNotFoundException
                 (sm.getString("namingContext.nameNotBound", name.get(0)));
         }
-        
+
         if (entry.type != NamingEntry.CONTEXT) {
             throw new NamingException
                 (sm.getString("namingContext.contextExpected"));
@@ -370,11 +370,11 @@ public class NamingContext implements Context {
 
 
     /**
-     * Enumerates the names bound in the named context, along with the class 
+     * Enumerates the names bound in the named context, along with the class
      * names of objects bound to them.
-     * 
+     *
      * @param name the name of the context to list
-     * @return an enumeration of the names and class names of the bindings in 
+     * @return an enumeration of the names and class names of the bindings in
      * this context. Each element of the enumeration is of type NameClassPair.
      * @exception NamingException if a naming exception is encountered
      */
@@ -386,15 +386,15 @@ public class NamingContext implements Context {
 
 
     /**
-     * Enumerates the names bound in the named context, along with the 
-     * objects bound to them. The contents of any subcontexts are not 
+     * Enumerates the names bound in the named context, along with the
+     * objects bound to them. The contents of any subcontexts are not
      * included.
      * <p>
-     * If a binding is added to or removed from this context, its effect on 
+     * If a binding is added to or removed from this context, its effect on
      * an enumeration previously returned is undefined.
-     * 
+     *
      * @param name the name of the context to list
-     * @return an enumeration of the bindings in this context. 
+     * @return an enumeration of the bindings in this context.
      * Each element of the enumeration is of type Binding.
      * @exception NamingException if a naming exception is encountered
      */
@@ -407,14 +407,14 @@ public class NamingContext implements Context {
         if (name.isEmpty()) {
             return new NamingContextBindingsEnumeration(bindings.values().iterator(), this);
         }
-        
+
         NamingEntry entry = bindings.get(name.get(0));
-        
+
         if (entry == null) {
             throw new NameNotFoundException
                 (sm.getString("namingContext.nameNotBound", name.get(0)));
         }
-        
+
         if (entry.type != NamingEntry.CONTEXT) {
             throw new NamingException
                 (sm.getString("namingContext.contextExpected"));
@@ -424,11 +424,11 @@ public class NamingContext implements Context {
 
 
     /**
-     * Enumerates the names bound in the named context, along with the 
+     * Enumerates the names bound in the named context, along with the
      * objects bound to them.
-     * 
+     *
      * @param name the name of the context to list
-     * @return an enumeration of the bindings in this context. 
+     * @return an enumeration of the bindings in this context.
      * Each element of the enumeration is of type Binding.
      * @exception NamingException if a naming exception is encountered
      */
@@ -440,49 +440,49 @@ public class NamingContext implements Context {
 
 
     /**
-     * Destroys the named context and removes it from the namespace. Any 
-     * attributes associated with the name are also removed. Intermediate 
+     * Destroys the named context and removes it from the namespace. Any
+     * attributes associated with the name are also removed. Intermediate
      * contexts are not destroyed.
      * <p>
-     * This method is idempotent. It succeeds even if the terminal atomic 
-     * name is not bound in the target context, but throws 
-     * NameNotFoundException if any of the intermediate contexts do not exist. 
-     * 
-     * In a federated naming system, a context from one naming system may be 
-     * bound to a name in another. One can subsequently look up and perform 
-     * operations on the foreign context using a composite name. However, an 
-     * attempt destroy the context using this composite name will fail with 
-     * NotContextException, because the foreign context is not a "subcontext" 
-     * of the context in which it is bound. Instead, use unbind() to remove 
-     * the binding of the foreign context. Destroying the foreign context 
-     * requires that the destroySubcontext() be performed on a context from 
+     * This method is idempotent. It succeeds even if the terminal atomic
+     * name is not bound in the target context, but throws
+     * NameNotFoundException if any of the intermediate contexts do not exist.
+     *
+     * In a federated naming system, a context from one naming system may be
+     * bound to a name in another. One can subsequently look up and perform
+     * operations on the foreign context using a composite name. However, an
+     * attempt destroy the context using this composite name will fail with
+     * NotContextException, because the foreign context is not a "subcontext"
+     * of the context in which it is bound. Instead, use unbind() to remove
+     * the binding of the foreign context. Destroying the foreign context
+     * requires that the destroySubcontext() be performed on a context from
      * the foreign context's "native" naming system.
-     * 
+     *
      * @param name the name of the context to be destroyed; may not be empty
-     * @exception NameNotFoundException if an intermediate context does not 
+     * @exception NameNotFoundException if an intermediate context does not
      * exist
-     * @exception NotContextException if the name is bound but does not name 
+     * @exception NotContextException if the name is bound but does not name
      * a context, or does not name a context of the appropriate type
      */
     @Override
     public void destroySubcontext(Name name)
         throws NamingException {
-        
+
         checkWritable();
-        
+
         while ((!name.isEmpty()) && (name.get(0).length() == 0))
             name = name.getSuffix(1);
         if (name.isEmpty())
             throw new NamingException
                 (sm.getString("namingContext.invalidName"));
-        
+
         NamingEntry entry = bindings.get(name.get(0));
-        
+
         if (entry == null) {
             throw new NameNotFoundException
                 (sm.getString("namingContext.nameNotBound", name.get(0)));
         }
-        
+
         if (name.size() > 1) {
             if (entry.type == NamingEntry.CONTEXT) {
                 ((Context) entry.value).destroySubcontext(name.getSuffix(1));
@@ -499,17 +499,17 @@ public class NamingContext implements Context {
                     (sm.getString("namingContext.contextExpected"));
             }
         }
-        
+
     }
 
 
     /**
      * Destroys the named context and removes it from the namespace.
-     * 
+     *
      * @param name the name of the context to be destroyed; may not be empty
-     * @exception NameNotFoundException if an intermediate context does not 
+     * @exception NameNotFoundException if an intermediate context does not
      * exist
-     * @exception NotContextException if the name is bound but does not name 
+     * @exception NotContextException if the name is bound but does not name
      * a context, or does not name a context of the appropriate type
      */
     @Override
@@ -520,11 +520,11 @@ public class NamingContext implements Context {
 
 
     /**
-     * Creates and binds a new context. Creates a new context with the given 
-     * name and binds it in the target context (that named by all but 
-     * terminal atomic component of the name). All intermediate contexts and 
+     * Creates and binds a new context. Creates a new context with the given
+     * name and binds it in the target context (that named by all but
+     * terminal atomic component of the name). All intermediate contexts and
      * the target context must already exist.
-     * 
+     *
      * @param name the name of the context to create; may not be empty
      * @return the newly created context
      * @exception NameAlreadyBoundException if name is already bound
@@ -536,21 +536,21 @@ public class NamingContext implements Context {
     public Context createSubcontext(Name name)
         throws NamingException {
         checkWritable();
-        
+
         Context newContext = new NamingContext(env, this.name);
         bind(name, newContext);
-        
+
         return newContext;
     }
 
 
     /**
      * Creates and binds a new context.
-     * 
+     *
      * @param name the name of the context to create; may not be empty
      * @return the newly created context
      * @exception NameAlreadyBoundException if name is already bound
-     * @exception javax.naming.directory.InvalidAttributesException if creation 
+     * @exception javax.naming.directory.InvalidAttributesException if creation
      * of the sub-context requires specification of mandatory attributes
      * @exception NamingException if a naming exception is encountered
      */
@@ -562,12 +562,12 @@ public class NamingContext implements Context {
 
 
     /**
-     * Retrieves the named object, following links except for the terminal 
-     * atomic component of the name. If the object bound to name is not a 
+     * Retrieves the named object, following links except for the terminal
+     * atomic component of the name. If the object bound to name is not a
      * link, returns the object itself.
-     * 
+     *
      * @param name the name of the object to look up
-     * @return the object bound to name, not following the terminal link 
+     * @return the object bound to name, not following the terminal link
      * (if any).
      * @exception NamingException if a naming exception is encountered
      */
@@ -579,11 +579,11 @@ public class NamingContext implements Context {
 
 
     /**
-     * Retrieves the named object, following links except for the terminal 
+     * Retrieves the named object, following links except for the terminal
      * atomic component of the name.
-     * 
+     *
      * @param name the name of the object to look up
-     * @return the object bound to name, not following the terminal link 
+     * @return the object bound to name, not following the terminal link
      * (if any).
      * @exception NamingException if a naming exception is encountered
      */
@@ -595,16 +595,16 @@ public class NamingContext implements Context {
 
 
     /**
-     * Retrieves the parser associated with the named context. In a 
-     * federation of namespaces, different naming systems will parse names 
-     * differently. This method allows an application to get a parser for 
-     * parsing names into their atomic components using the naming convention 
-     * of a particular naming system. Within any single naming system, 
-     * NameParser objects returned by this method must be equal (using the 
+     * Retrieves the parser associated with the named context. In a
+     * federation of namespaces, different naming systems will parse names
+     * differently. This method allows an application to get a parser for
+     * parsing names into their atomic components using the naming convention
+     * of a particular naming system. Within any single naming system,
+     * NameParser objects returned by this method must be equal (using the
      * equals() test).
-     * 
+     *
      * @param name the name of the context from which to get the parser
-     * @return a name parser that can parse compound names into their atomic 
+     * @return a name parser that can parse compound names into their atomic
      * components
      * @exception NamingException if a naming exception is encountered
      */
@@ -634,9 +634,9 @@ public class NamingContext implements Context {
 
     /**
      * Retrieves the parser associated with the named context.
-     * 
+     *
      * @param name the name of the context from which to get the parser
-     * @return a name parser that can parse compound names into their atomic 
+     * @return a name parser that can parse compound names into their atomic
      * components
      * @exception NamingException if a naming exception is encountered
      */
@@ -650,13 +650,13 @@ public class NamingContext implements Context {
     /**
      * Composes the name of this context with a name relative to this context.
      * <p>
-     * Given a name (name) relative to this context, and the name (prefix) 
-     * of this context relative to one of its ancestors, this method returns 
-     * the composition of the two names using the syntax appropriate for the 
-     * naming system(s) involved. That is, if name names an object relative 
-     * to this context, the result is the name of the same object, but 
+     * Given a name (name) relative to this context, and the name (prefix)
+     * of this context relative to one of its ancestors, this method returns
+     * the composition of the two names using the syntax appropriate for the
+     * naming system(s) involved. That is, if name names an object relative
+     * to this context, the result is the name of the same object, but
      * relative to the ancestor context. None of the names may be null.
-     * 
+     *
      * @param name a name relative to this context
      * @param prefix the name of this context relative to one of its ancestors
      * @return the composition of prefix and name
@@ -672,7 +672,7 @@ public class NamingContext implements Context {
 
     /**
      * Composes the name of this context with a name relative to this context.
-     * 
+     *
      * @param name a name relative to this context
      * @param prefix the name of this context relative to one of its ancestors
      * @return the composition of prefix and name
@@ -686,10 +686,10 @@ public class NamingContext implements Context {
 
 
     /**
-     * Adds a new environment property to the environment of this context. If 
+     * Adds a new environment property to the environment of this context. If
      * the property already exists, its value is overwritten.
-     * 
-     * @param propName the name of the environment property to add; may not 
+     *
+     * @param propName the name of the environment property to add; may not
      * be null
      * @param propVal the value of the property to add; may not be null
      * @exception NamingException if a naming exception is encountered
@@ -702,9 +702,9 @@ public class NamingContext implements Context {
 
 
     /**
-     * Removes an environment property from the environment of this context. 
-     * 
-     * @param propName the name of the environment property to remove; 
+     * Removes an environment property from the environment of this context.
+     *
+     * @param propName the name of the environment property to remove;
      * may not be null
      * @exception NamingException if a naming exception is encountered
      */
@@ -716,12 +716,12 @@ public class NamingContext implements Context {
 
 
     /**
-     * Retrieves the environment in effect for this context. See class 
-     * description for more details on environment properties. 
-     * The caller should not make any changes to the object returned: their 
-     * effect on the context is undefined. The environment of this context 
+     * Retrieves the environment in effect for this context. See class
+     * description for more details on environment properties.
+     * The caller should not make any changes to the object returned: their
+     * effect on the context is undefined. The environment of this context
      * may be changed using addToEnvironment() and removeFromEnvironment().
-     * 
+     *
      * @return the environment of this context; never null
      * @exception NamingException if a naming exception is encountered
      */
@@ -733,13 +733,13 @@ public class NamingContext implements Context {
 
 
     /**
-     * Closes this context. This method releases this context's resources 
-     * immediately, instead of waiting for them to be released automatically 
+     * Closes this context. This method releases this context's resources
+     * immediately, instead of waiting for them to be released automatically
      * by the garbage collector.
-     * This method is idempotent: invoking it on a context that has already 
-     * been closed has no effect. Invoking any other method on a closed 
+     * This method is idempotent: invoking it on a context that has already
+     * been closed has no effect. Invoking any other method on a closed
      * context is not allowed, and results in undefined behaviour.
-     * 
+     *
      * @exception NamingException if a naming exception is encountered
      */
     @Override
@@ -752,17 +752,17 @@ public class NamingContext implements Context {
     /**
      * Retrieves the full name of this context within its own namespace.
      * <p>
-     * Many naming services have a notion of a "full name" for objects in 
-     * their respective namespaces. For example, an LDAP entry has a 
-     * distinguished name, and a DNS record has a fully qualified name. This 
-     * method allows the client application to retrieve this name. The string 
-     * returned by this method is not a JNDI composite name and should not be 
-     * passed directly to context methods. In naming systems for which the 
-     * notion of full name does not make sense, 
+     * Many naming services have a notion of a "full name" for objects in
+     * their respective namespaces. For example, an LDAP entry has a
+     * distinguished name, and a DNS record has a fully qualified name. This
+     * method allows the client application to retrieve this name. The string
+     * returned by this method is not a JNDI composite name and should not be
+     * passed directly to context methods. In naming systems for which the
+     * notion of full name does not make sense,
      * OperationNotSupportedException is thrown.
-     * 
+     *
      * @return this context's name in its own namespace; never null
-     * @exception OperationNotSupportedException if the naming system does 
+     * @exception OperationNotSupportedException if the naming system does
      * not have the notion of a full name
      * @exception NamingException if a naming exception is encountered
      */
@@ -780,7 +780,7 @@ public class NamingContext implements Context {
 
     /**
      * Retrieves the named object.
-     * 
+     *
      * @param name the name of the object to look up
      * @param resolveLinks If true, the links will be resolved
      * @return the object bound to name
@@ -796,14 +796,14 @@ public class NamingContext implements Context {
             // If name is empty, a newly allocated naming context is returned
             return new NamingContext(env, this.name, bindings);
         }
-        
+
         NamingEntry entry = bindings.get(name.get(0));
-        
+
         if (entry == null) {
             throw new NameNotFoundException
                 (sm.getString("namingContext.nameNotBound", name.get(0)));
         }
-        
+
         if (name.size() > 1) {
             // If the size of the name is greater that 1, then we go through a
             // number of subcontexts.
@@ -834,7 +834,7 @@ public class NamingContext implements Context {
                             entry.value = obj;
                         }
                     }
-                    return obj; 
+                    return obj;
                 } catch (NamingException e) {
                     throw e;
                 } catch (Exception e) {
@@ -846,15 +846,15 @@ public class NamingContext implements Context {
                 return entry.value;
             }
         }
-        
+
     }
 
 
     /**
-     * Binds a name to an object. All intermediate contexts and the target 
-     * context (that named by all but terminal atomic component of the name) 
+     * Binds a name to an object. All intermediate contexts and the target
+     * context (that named by all but terminal atomic component of the name)
      * must already exist.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @param rebind if true, then perform a rebind (ie, overwrite)
@@ -865,17 +865,17 @@ public class NamingContext implements Context {
      */
     protected void bind(Name name, Object obj, boolean rebind)
         throws NamingException {
-        
+
         checkWritable();
-        
+
         while ((!name.isEmpty()) && (name.get(0).length() == 0))
             name = name.getSuffix(1);
         if (name.isEmpty())
             throw new NamingException
                 (sm.getString("namingContext.invalidName"));
-        
+
         NamingEntry entry = bindings.get(name.get(0));
-        
+
         if (name.size() > 1) {
             if (entry == null) {
                 throw new NameNotFoundException
@@ -898,29 +898,29 @@ public class NamingContext implements Context {
             } else {
                 // Getting the type of the object and wrapping it within a new
                 // NamingEntry
-                Object toBind = 
+                Object toBind =
                     NamingManager.getStateToBind(obj, name, this, env);
                 if (toBind instanceof Context) {
-                    entry = new NamingEntry(name.get(0), toBind, 
+                    entry = new NamingEntry(name.get(0), toBind,
                                             NamingEntry.CONTEXT);
                 } else if (toBind instanceof LinkRef) {
-                    entry = new NamingEntry(name.get(0), toBind, 
+                    entry = new NamingEntry(name.get(0), toBind,
                                             NamingEntry.LINK_REF);
                 } else if (toBind instanceof Reference) {
-                    entry = new NamingEntry(name.get(0), toBind, 
+                    entry = new NamingEntry(name.get(0), toBind,
                                             NamingEntry.REFERENCE);
                 } else if (toBind instanceof Referenceable) {
                     toBind = ((Referenceable) toBind).getReference();
-                    entry = new NamingEntry(name.get(0), toBind, 
+                    entry = new NamingEntry(name.get(0), toBind,
                                             NamingEntry.REFERENCE);
                 } else {
-                    entry = new NamingEntry(name.get(0), toBind, 
+                    entry = new NamingEntry(name.get(0), toBind,
                                             NamingEntry.ENTRY);
                 }
                 bindings.put(name.get(0), entry);
             }
         }
-        
+
     }
 
 
@@ -935,7 +935,7 @@ public class NamingContext implements Context {
     /**
      * Throws a naming exception is Context is not writable.
      */
-    protected void checkWritable() 
+    protected void checkWritable()
         throws NamingException {
         if (!isWritable())
             throw new NamingException(sm.getString("namingContext.readOnly"));

==================================================
NamingContextEnumeration.java
index c0aa45aa04..e45ccccefb 100644
--- a/java/org/apache/naming/NamingContextBindingsEnumeration.java
+++ b/java/org/apache/naming/NamingContextBindingsEnumeration.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming;
@@ -33,7 +33,7 @@ import javax.naming.NamingException;
  * @version $Id$
  */
 
-public class NamingContextBindingsEnumeration 
+public class NamingContextBindingsEnumeration
     implements NamingEnumeration<Binding> {
 
 
@@ -54,7 +54,7 @@ public class NamingContextBindingsEnumeration
      */
     protected Iterator<NamingEntry> iterator;
 
-    
+
     /**
      * The context for which this enumeration is being generated.
      */
@@ -107,11 +107,11 @@ public class NamingContextBindingsEnumeration
             throw new RuntimeException(e.getMessage(), e);
         }
     }
-    
+
     private Binding nextElementInternal() throws NamingException {
         NamingEntry entry = iterator.next();
         Object value;
-        
+
         // If the entry is a reference, resolve it
         if (entry.type == NamingEntry.REFERENCE
                 || entry.type == NamingEntry.LINK_REF) {
@@ -127,7 +127,7 @@ public class NamingContextBindingsEnumeration
         } else {
             value = entry.value;
         }
-        
+
         return new Binding(entry.name, value.getClass().getName(), value, true);
     }
 }

==================================================
NamingEntry.java
index 4008c7cf69..ea2c99ba76 100644
--- a/java/org/apache/naming/NamingContextEnumeration.java
+++ b/java/org/apache/naming/NamingContextEnumeration.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming;
@@ -31,7 +31,7 @@ import javax.naming.NamingException;
  * @version $Id$
  */
 
-public class NamingContextEnumeration 
+public class NamingContextEnumeration
     implements NamingEnumeration<NameClassPair> {
 
 

==================================================
ResourceEnvRef.java
index 5916904649..d2c32c3b4e 100644
--- a/java/org/apache/naming/NamingEntry.java
+++ b/java/org/apache/naming/NamingEntry.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming;
@@ -35,7 +35,7 @@ public class NamingEntry {
     public static final int ENTRY = 0;
     public static final int LINK_REF = 1;
     public static final int REFERENCE = 2;
-    
+
     public static final int CONTEXT = 10;
 
 

==================================================
ResourceLinkRef.java
index dc9dd740fc..46db47b206 100644
--- a/java/org/apache/naming/ResourceEnvRef.java
+++ b/java/org/apache/naming/ResourceEnvRef.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming;
@@ -37,7 +37,7 @@ public class ResourceEnvRef extends Reference {
     /**
      * Default factory for this reference.
      */
-    public static final String DEFAULT_FACTORY = 
+    public static final String DEFAULT_FACTORY =
         org.apache.naming.factory.Constants.DEFAULT_RESOURCE_ENV_FACTORY;
 
 
@@ -46,7 +46,7 @@ public class ResourceEnvRef extends Reference {
 
     /**
      * Resource env reference.
-     * 
+     *
      * @param resourceType Type
      */
     public ResourceEnvRef(String resourceType) {
@@ -56,7 +56,7 @@ public class ResourceEnvRef extends Reference {
 
     /**
      * Resource env reference.
-     * 
+     *
      * @param resourceType Type
      * @param factory The factory class
      * @param factoryLocation The factory location
@@ -74,7 +74,7 @@ public class ResourceEnvRef extends Reference {
 
 
     /**
-     * Retrieves the class name of the factory of the object to which this 
+     * Retrieves the class name of the factory of the object to which this
      * reference refers.
      */
     @Override

==================================================
ResourceRef.java
index 4c24c06726..141ec47bf3 100644
--- a/java/org/apache/naming/ResourceLinkRef.java
+++ b/java/org/apache/naming/ResourceLinkRef.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming;
@@ -38,7 +38,7 @@ public class ResourceLinkRef extends Reference {
     /**
      * Default factory for this reference.
      */
-    public static final String DEFAULT_FACTORY = 
+    public static final String DEFAULT_FACTORY =
         org.apache.naming.factory.Constants.DEFAULT_RESOURCE_LINK_FACTORY;
 
 
@@ -53,7 +53,7 @@ public class ResourceLinkRef extends Reference {
 
     /**
      * ResourceLink Reference.
-     * 
+     *
      * @param resourceClass Resource class
      * @param globalName Global name
      */
@@ -64,11 +64,11 @@ public class ResourceLinkRef extends Reference {
 
     /**
      * ResourceLink Reference.
-     * 
+     *
      * @param resourceClass Resource class
      * @param globalName Global name
      */
-    public ResourceLinkRef(String resourceClass, String globalName, 
+    public ResourceLinkRef(String resourceClass, String globalName,
                            String factory, String factoryLocation) {
         super(resourceClass, factory, factoryLocation);
         StringRefAddr refAddr = null;
@@ -86,7 +86,7 @@ public class ResourceLinkRef extends Reference {
 
 
     /**
-     * Retrieves the class name of the factory of the object to which this 
+     * Retrieves the class name of the factory of the object to which this
      * reference refers.
      */
     @Override

==================================================
SelectorContext.java
index 8774843d0c..51f1847c23 100644
--- a/java/org/apache/naming/ResourceRef.java
+++ b/java/org/apache/naming/ResourceRef.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming;
@@ -36,13 +36,13 @@ public class ResourceRef extends Reference {
 
     private static final long serialVersionUID = 1L;
 
-    
+
     // -------------------------------------------------------------- Constants
 
     /**
      * Default factory for this reference.
      */
-    public static final String DEFAULT_FACTORY = 
+    public static final String DEFAULT_FACTORY =
         org.apache.naming.factory.Constants.DEFAULT_RESOURCE_FACTORY;
 
 
@@ -74,12 +74,12 @@ public class ResourceRef extends Reference {
 
     /**
      * Resource Reference.
-     * 
+     *
      * @param resourceClass Resource class
      * @param scope Resource scope
      * @param auth Resource authentication
      */
-    public ResourceRef(String resourceClass, String description, 
+    public ResourceRef(String resourceClass, String description,
                        String scope, String auth, boolean singleton) {
         this(resourceClass, description, scope, auth, singleton, null, null);
     }
@@ -87,12 +87,12 @@ public class ResourceRef extends Reference {
 
     /**
      * Resource Reference.
-     * 
+     *
      * @param resourceClass Resource class
      * @param scope Resource scope
      * @param auth Resource authentication
      */
-    public ResourceRef(String resourceClass, String description, 
+    public ResourceRef(String resourceClass, String description,
                        String scope, String auth, boolean singleton,
                        String factory, String factoryLocation) {
         super(resourceClass, factory, factoryLocation);
@@ -122,7 +122,7 @@ public class ResourceRef extends Reference {
 
 
     /**
-     * Retrieves the class name of the factory of the object to which this 
+     * Retrieves the class name of the factory of the object to which this
      * reference refers.
      */
     @Override

==================================================
ServiceRef.java
index 81a199ee5e..fbc2d3188a 100644
--- a/java/org/apache/naming/SelectorContext.java
+++ b/java/org/apache/naming/SelectorContext.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming;
@@ -111,11 +111,11 @@ public class SelectorContext implements Context {
 
 
     /**
-     * Retrieves the named object. If name is empty, returns a new instance 
-     * of this context (which represents the same naming context as this 
-     * context, but its environment may be modified independently and it may 
+     * Retrieves the named object. If name is empty, returns a new instance
+     * of this context (which represents the same naming context as this
+     * context, but its environment may be modified independently and it may
      * be accessed concurrently).
-     * 
+     *
      * @param name the name of the object to look up
      * @return the object bound to name
      * @exception NamingException if a naming exception is encountered
@@ -123,7 +123,7 @@ public class SelectorContext implements Context {
     @Override
     public Object lookup(Name name)
         throws NamingException {
-        
+
         if (log.isDebugEnabled()) {
             log.debug(sm.getString("selectorContext.methodUsingName", "lookup",
                     name));
@@ -138,7 +138,7 @@ public class SelectorContext implements Context {
 
     /**
      * Retrieves the named object.
-     * 
+     *
      * @param name the name of the object to look up
      * @return the object bound to name
      * @exception NamingException if a naming exception is encountered
@@ -160,10 +160,10 @@ public class SelectorContext implements Context {
 
 
     /**
-     * Binds a name to an object. All intermediate contexts and the target 
-     * context (that named by all but terminal atomic component of the name) 
+     * Binds a name to an object. All intermediate contexts and the target
+     * context (that named by all but terminal atomic component of the name)
      * must already exist.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @exception javax.naming.NameAlreadyBoundException if name is already
@@ -181,7 +181,7 @@ public class SelectorContext implements Context {
 
     /**
      * Binds a name to an object.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @exception javax.naming.NameAlreadyBoundException if name is already
@@ -198,14 +198,14 @@ public class SelectorContext implements Context {
 
 
     /**
-     * Binds a name to an object, overwriting any existing binding. All 
-     * intermediate contexts and the target context (that named by all but 
+     * Binds a name to an object, overwriting any existing binding. All
+     * intermediate contexts and the target context (that named by all but
      * terminal atomic component of the name) must already exist.
      * <p>
-     * If the object is a DirContext, any existing attributes associated with 
-     * the name are replaced with those of the object. Otherwise, any 
+     * If the object is a DirContext, any existing attributes associated with
+     * the name are replaced with those of the object. Otherwise, any
      * existing attributes associated with the name remain unchanged.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @exception javax.naming.InvalidAttributesException if object did not
@@ -221,7 +221,7 @@ public class SelectorContext implements Context {
 
     /**
      * Binds a name to an object, overwriting any existing binding.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @exception javax.naming.InvalidAttributesException if object did not
@@ -236,14 +236,14 @@ public class SelectorContext implements Context {
 
 
     /**
-     * Unbinds the named object. Removes the terminal atomic name in name 
-     * from the target context--that named by all but the terminal atomic 
+     * Unbinds the named object. Removes the terminal atomic name in name
+     * from the target context--that named by all but the terminal atomic
      * part of name.
      * <p>
-     * This method is idempotent. It succeeds even if the terminal atomic 
-     * name is not bound in the target context, but throws 
-     * NameNotFoundException if any of the intermediate contexts do not exist. 
-     * 
+     * This method is idempotent. It succeeds even if the terminal atomic
+     * name is not bound in the target context, but throws
+     * NameNotFoundException if any of the intermediate contexts do not exist.
+     *
      * @param name the name to bind; may not be empty
      * @exception javax.naming NameNotFoundException if an intermediate context
      * does not exist
@@ -258,7 +258,7 @@ public class SelectorContext implements Context {
 
     /**
      * Unbinds the named object.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @exception javax.naming NameNotFoundException if an intermediate context
      * does not exist
@@ -272,11 +272,11 @@ public class SelectorContext implements Context {
 
 
     /**
-     * Binds a new name to the object bound to an old name, and unbinds the 
-     * old name. Both names are relative to this context. Any attributes 
-     * associated with the old name become associated with the new name. 
+     * Binds a new name to the object bound to an old name, and unbinds the
+     * old name. Both names are relative to this context. Any attributes
+     * associated with the old name become associated with the new name.
      * Intermediate contexts of the old name are not changed.
-     * 
+     *
      * @param oldName the name of the existing binding; may not be empty
      * @param newName the name of the new binding; may not be empty
      * @exception javax.naming.NameAlreadyBoundException if name is already
@@ -291,9 +291,9 @@ public class SelectorContext implements Context {
 
 
     /**
-     * Binds a new name to the object bound to an old name, and unbinds the 
+     * Binds a new name to the object bound to an old name, and unbinds the
      * old name.
-     * 
+     *
      * @param oldName the name of the existing binding; may not be empty
      * @param newName the name of the new binding; may not be empty
      * @exception javax.naming.NameAlreadyBoundException if name is already
@@ -308,22 +308,22 @@ public class SelectorContext implements Context {
 
 
     /**
-     * Enumerates the names bound in the named context, along with the class 
-     * names of objects bound to them. The contents of any subcontexts are 
+     * Enumerates the names bound in the named context, along with the class
+     * names of objects bound to them. The contents of any subcontexts are
      * not included.
      * <p>
-     * If a binding is added to or removed from this context, its effect on 
+     * If a binding is added to or removed from this context, its effect on
      * an enumeration previously returned is undefined.
-     * 
+     *
      * @param name the name of the context to list
-     * @return an enumeration of the names and class names of the bindings in 
+     * @return an enumeration of the names and class names of the bindings in
      * this context. Each element of the enumeration is of type NameClassPair.
      * @exception NamingException if a naming exception is encountered
      */
     @Override
     public NamingEnumeration<NameClassPair> list(Name name)
         throws NamingException {
-        
+
         if (log.isDebugEnabled()) {
             log.debug(sm.getString("selectorContext.methodUsingName", "list",
                     name));
@@ -334,18 +334,18 @@ public class SelectorContext implements Context {
 
 
     /**
-     * Enumerates the names bound in the named context, along with the class 
+     * Enumerates the names bound in the named context, along with the class
      * names of objects bound to them.
-     * 
+     *
      * @param name the name of the context to list
-     * @return an enumeration of the names and class names of the bindings in 
+     * @return an enumeration of the names and class names of the bindings in
      * this context. Each element of the enumeration is of type NameClassPair.
      * @exception NamingException if a naming exception is encountered
      */
     @Override
     public NamingEnumeration<NameClassPair> list(String name)
         throws NamingException {
-        
+
         if (log.isDebugEnabled()) {
             log.debug(sm.getString("selectorContext.methodUsingString", "list",
                     name));
@@ -356,15 +356,15 @@ public class SelectorContext implements Context {
 
 
     /**
-     * Enumerates the names bound in the named context, along with the 
-     * objects bound to them. The contents of any subcontexts are not 
+     * Enumerates the names bound in the named context, along with the
+     * objects bound to them. The contents of any subcontexts are not
      * included.
      * <p>
-     * If a binding is added to or removed from this context, its effect on 
+     * If a binding is added to or removed from this context, its effect on
      * an enumeration previously returned is undefined.
-     * 
+     *
      * @param name the name of the context to list
-     * @return an enumeration of the bindings in this context. 
+     * @return an enumeration of the bindings in this context.
      * Each element of the enumeration is of type Binding.
      * @exception NamingException if a naming exception is encountered
      */
@@ -382,11 +382,11 @@ public class SelectorContext implements Context {
 
 
     /**
-     * Enumerates the names bound in the named context, along with the 
+     * Enumerates the names bound in the named context, along with the
      * objects bound to them.
-     * 
+     *
      * @param name the name of the context to list
-     * @return an enumeration of the bindings in this context. 
+     * @return an enumeration of the bindings in this context.
      * Each element of the enumeration is of type Binding.
      * @exception NamingException if a naming exception is encountered
      */
@@ -404,24 +404,24 @@ public class SelectorContext implements Context {
 
 
     /**
-     * Destroys the named context and removes it from the namespace. Any 
-     * attributes associated with the name are also removed. Intermediate 
+     * Destroys the named context and removes it from the namespace. Any
+     * attributes associated with the name are also removed. Intermediate
      * contexts are not destroyed.
      * <p>
-     * This method is idempotent. It succeeds even if the terminal atomic 
-     * name is not bound in the target context, but throws 
-     * NameNotFoundException if any of the intermediate contexts do not exist. 
-     * 
-     * In a federated naming system, a context from one naming system may be 
-     * bound to a name in another. One can subsequently look up and perform 
-     * operations on the foreign context using a composite name. However, an 
-     * attempt destroy the context using this composite name will fail with 
-     * NotContextException, because the foreign context is not a "subcontext" 
-     * of the context in which it is bound. Instead, use unbind() to remove 
-     * the binding of the foreign context. Destroying the foreign context 
-     * requires that the destroySubcontext() be performed on a context from 
+     * This method is idempotent. It succeeds even if the terminal atomic
+     * name is not bound in the target context, but throws
+     * NameNotFoundException if any of the intermediate contexts do not exist.
+     *
+     * In a federated naming system, a context from one naming system may be
+     * bound to a name in another. One can subsequently look up and perform
+     * operations on the foreign context using a composite name. However, an
+     * attempt destroy the context using this composite name will fail with
+     * NotContextException, because the foreign context is not a "subcontext"
+     * of the context in which it is bound. Instead, use unbind() to remove
+     * the binding of the foreign context. Destroying the foreign context
+     * requires that the destroySubcontext() be performed on a context from
      * the foreign context's "native" naming system.
-     * 
+     *
      * @param name the name of the context to be destroyed; may not be empty
      * @exception javax.naming NameNotFoundException if an intermediate context
      * does not exist
@@ -437,7 +437,7 @@ public class SelectorContext implements Context {
 
     /**
      * Destroys the named context and removes it from the namespace.
-     * 
+     *
      * @param name the name of the context to be destroyed; may not be empty
      * @exception javax.naming NameNotFoundException if an intermediate context
      * does not exist
@@ -452,11 +452,11 @@ public class SelectorContext implements Context {
 
 
     /**
-     * Creates and binds a new context. Creates a new context with the given 
-     * name and binds it in the target context (that named by all but 
-     * terminal atomic component of the name). All intermediate contexts and 
+     * Creates and binds a new context. Creates a new context with the given
+     * name and binds it in the target context (that named by all but
+     * terminal atomic component of the name). All intermediate contexts and
      * the target context must already exist.
-     * 
+     *
      * @param name the name of the context to create; may not be empty
      * @return the newly created context
      * @exception javax.naming.NameAlreadyBoundException if name is already
@@ -474,7 +474,7 @@ public class SelectorContext implements Context {
 
     /**
      * Creates and binds a new context.
-     * 
+     *
      * @param name the name of the context to create; may not be empty
      * @return the newly created context
      * @exception javax.naming.NameAlreadyBoundException if name is already
@@ -491,12 +491,12 @@ public class SelectorContext implements Context {
 
 
     /**
-     * Retrieves the named object, following links except for the terminal 
-     * atomic component of the name. If the object bound to name is not a 
+     * Retrieves the named object, following links except for the terminal
+     * atomic component of the name. If the object bound to name is not a
      * link, returns the object itself.
-     * 
+     *
      * @param name the name of the object to look up
-     * @return the object bound to name, not following the terminal link 
+     * @return the object bound to name, not following the terminal link
      * (if any).
      * @exception NamingException if a naming exception is encountered
      */
@@ -514,11 +514,11 @@ public class SelectorContext implements Context {
 
 
     /**
-     * Retrieves the named object, following links except for the terminal 
+     * Retrieves the named object, following links except for the terminal
      * atomic component of the name.
-     * 
+     *
      * @param name the name of the object to look up
-     * @return the object bound to name, not following the terminal link 
+     * @return the object bound to name, not following the terminal link
      * (if any).
      * @exception NamingException if a naming exception is encountered
      */
@@ -536,16 +536,16 @@ public class SelectorContext implements Context {
 
 
     /**
-     * Retrieves the parser associated with the named context. In a 
-     * federation of namespaces, different naming systems will parse names 
-     * differently. This method allows an application to get a parser for 
-     * parsing names into their atomic components using the naming convention 
-     * of a particular naming system. Within any single naming system, 
-     * NameParser objects returned by this method must be equal (using the 
+     * Retrieves the parser associated with the named context. In a
+     * federation of namespaces, different naming systems will parse names
+     * differently. This method allows an application to get a parser for
+     * parsing names into their atomic components using the naming convention
+     * of a particular naming system. Within any single naming system,
+     * NameParser objects returned by this method must be equal (using the
      * equals() test).
-     * 
+     *
      * @param name the name of the context from which to get the parser
-     * @return a name parser that can parse compound names into their atomic 
+     * @return a name parser that can parse compound names into their atomic
      * components
      * @exception NamingException if a naming exception is encountered
      */
@@ -558,9 +558,9 @@ public class SelectorContext implements Context {
 
     /**
      * Retrieves the parser associated with the named context.
-     * 
+     *
      * @param name the name of the context from which to get the parser
-     * @return a name parser that can parse compound names into their atomic 
+     * @return a name parser that can parse compound names into their atomic
      * components
      * @exception NamingException if a naming exception is encountered
      */
@@ -574,13 +574,13 @@ public class SelectorContext implements Context {
     /**
      * Composes the name of this context with a name relative to this context.
      * <p>
-     * Given a name (name) relative to this context, and the name (prefix) 
-     * of this context relative to one of its ancestors, this method returns 
-     * the composition of the two names using the syntax appropriate for the 
-     * naming system(s) involved. That is, if name names an object relative 
-     * to this context, the result is the name of the same object, but 
+     * Given a name (name) relative to this context, and the name (prefix)
+     * of this context relative to one of its ancestors, this method returns
+     * the composition of the two names using the syntax appropriate for the
+     * naming system(s) involved. That is, if name names an object relative
+     * to this context, the result is the name of the same object, but
      * relative to the ancestor context. None of the names may be null.
-     * 
+     *
      * @param name a name relative to this context
      * @param prefix the name of this context relative to one of its ancestors
      * @return the composition of prefix and name
@@ -596,7 +596,7 @@ public class SelectorContext implements Context {
 
     /**
      * Composes the name of this context with a name relative to this context.
-     * 
+     *
      * @param name a name relative to this context
      * @param prefix the name of this context relative to one of its ancestors
      * @return the composition of prefix and name
@@ -610,10 +610,10 @@ public class SelectorContext implements Context {
 
 
     /**
-     * Adds a new environment property to the environment of this context. If 
+     * Adds a new environment property to the environment of this context. If
      * the property already exists, its value is overwritten.
-     * 
-     * @param propName the name of the environment property to add; may not 
+     *
+     * @param propName the name of the environment property to add; may not
      * be null
      * @param propVal the value of the property to add; may not be null
      * @exception NamingException if a naming exception is encountered
@@ -626,9 +626,9 @@ public class SelectorContext implements Context {
 
 
     /**
-     * Removes an environment property from the environment of this context. 
-     * 
-     * @param propName the name of the environment property to remove; 
+     * Removes an environment property from the environment of this context.
+     *
+     * @param propName the name of the environment property to remove;
      * may not be null
      * @exception NamingException if a naming exception is encountered
      */
@@ -640,12 +640,12 @@ public class SelectorContext implements Context {
 
 
     /**
-     * Retrieves the environment in effect for this context. See class 
-     * description for more details on environment properties. 
-     * The caller should not make any changes to the object returned: their 
-     * effect on the context is undefined. The environment of this context 
+     * Retrieves the environment in effect for this context. See class
+     * description for more details on environment properties.
+     * The caller should not make any changes to the object returned: their
+     * effect on the context is undefined. The environment of this context
      * may be changed using addToEnvironment() and removeFromEnvironment().
-     * 
+     *
      * @return the environment of this context; never null
      * @exception NamingException if a naming exception is encountered
      */
@@ -657,13 +657,13 @@ public class SelectorContext implements Context {
 
 
     /**
-     * Closes this context. This method releases this context's resources 
-     * immediately, instead of waiting for them to be released automatically 
+     * Closes this context. This method releases this context's resources
+     * immediately, instead of waiting for them to be released automatically
      * by the garbage collector.
-     * This method is idempotent: invoking it on a context that has already 
-     * been closed has no effect. Invoking any other method on a closed 
+     * This method is idempotent: invoking it on a context that has already
+     * been closed has no effect. Invoking any other method on a closed
      * context is not allowed, and results in undefined behaviour.
-     * 
+     *
      * @exception NamingException if a naming exception is encountered
      */
     @Override
@@ -676,15 +676,15 @@ public class SelectorContext implements Context {
     /**
      * Retrieves the full name of this context within its own namespace.
      * <p>
-     * Many naming services have a notion of a "full name" for objects in 
-     * their respective namespaces. For example, an LDAP entry has a 
-     * distinguished name, and a DNS record has a fully qualified name. This 
-     * method allows the client application to retrieve this name. The string 
-     * returned by this method is not a JNDI composite name and should not be 
-     * passed directly to context methods. In naming systems for which the 
-     * notion of full name does not make sense, 
+     * Many naming services have a notion of a "full name" for objects in
+     * their respective namespaces. For example, an LDAP entry has a
+     * distinguished name, and a DNS record has a fully qualified name. This
+     * method allows the client application to retrieve this name. The string
+     * returned by this method is not a JNDI composite name and should not be
+     * passed directly to context methods. In naming systems for which the
+     * notion of full name does not make sense,
      * OperationNotSupportedException is thrown.
-     * 
+     *
      * @return this context's name in its own namespace; never null
      * @exception javax.naming.OperationNotSupportedException if the naming
      * system does not have the notion of a full name
@@ -715,7 +715,7 @@ public class SelectorContext implements Context {
             }
             Context initialContext = ContextBindings.getContext(ICName);
             if (initialContext == null) {
-                // Allocating a new context and binding it to the appropriate 
+                // Allocating a new context and binding it to the appropriate
                 // name
                 initialContext = new NamingContext(env, ICName);
                 ContextBindings.bindContext(ICName, initialContext);
@@ -734,14 +734,14 @@ public class SelectorContext implements Context {
 
     /**
      * Strips the URL header.
-     * 
+     *
      * @return the parsed name
-     * @exception NamingException if there is no "java:" header or if no 
+     * @exception NamingException if there is no "java:" header or if no
      * naming context has been bound to this thread
      */
-    protected String parseName(String name) 
+    protected String parseName(String name)
         throws NamingException {
-        
+
         if ((!initialContext) && (name.startsWith(prefix))) {
             return (name.substring(prefixLength));
         } else {
@@ -752,21 +752,21 @@ public class SelectorContext implements Context {
                     (sm.getString("selectorContext.noJavaUrl"));
             }
         }
-        
+
     }
 
 
     /**
      * Strips the URL header.
-     * 
+     *
      * @return the parsed name
-     * @exception NamingException if there is no "java:" header or if no 
+     * @exception NamingException if there is no "java:" header or if no
      * naming context has been bound to this thread
      */
-    protected Name parseName(Name name) 
+    protected Name parseName(Name name)
         throws NamingException {
 
-        if ((!initialContext) && (!name.isEmpty()) 
+        if ((!initialContext) && (!name.isEmpty())
             && (name.get(0).equals(prefix))) {
             return (name.getSuffix(1));
         } else {

==================================================
StringManager.java
index 8835e51c73..b998704cff 100644
--- a/java/org/apache/naming/ServiceRef.java
+++ b/java/org/apache/naming/ServiceRef.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming;
@@ -41,7 +41,7 @@ public class ServiceRef extends Reference {
     /**
      * Default factory for this reference.
      */
-    public static final String DEFAULT_FACTORY = 
+    public static final String DEFAULT_FACTORY =
         org.apache.naming.factory.Constants.DEFAULT_SERVICE_FACTORY;
 
 
@@ -90,14 +90,14 @@ public class ServiceRef extends Reference {
 
     // ----------------------------------------------------------- Constructors
 
-    public ServiceRef(String refname, String serviceInterface, String[] serviceQname, 
+    public ServiceRef(String refname, String serviceInterface, String[] serviceQname,
                        String wsdl, String jaxrpcmapping) {
         this(refname, serviceInterface, serviceQname, wsdl, jaxrpcmapping,
                         null, null);
     }
 
     public ServiceRef(@SuppressWarnings("unused") String refname,
-                       String serviceInterface, String[] serviceQname, 
+                       String serviceInterface, String[] serviceQname,
                        String wsdl, String jaxrpcmapping,
                        String factory, String factoryLocation) {
         super(serviceInterface, factory, factoryLocation);
@@ -150,7 +150,7 @@ public class ServiceRef extends Reference {
 
 
     /**
-     * Retrieves the class name of the factory of the object to which this 
+     * Retrieves the class name of the factory of the object to which this
      * reference refers.
      */
     @Override

==================================================
TransactionRef.java
index 14431c41cc..25f5ea098a 100644
--- a/java/org/apache/naming/StringManager.java
+++ b/java/org/apache/naming/StringManager.java
@@ -93,11 +93,11 @@ public class StringManager {
     /**
         Get a string from the underlying resource bundle or return
         null if the String is not found.
-     
+
         @param key to desired resource String
         @return resource String matching <i>key</i> from underlying
                 bundle or null if not found.
-        @throws IllegalArgumentException if <i>key</i> is null.        
+        @throws IllegalArgumentException if <i>key</i> is null.
      */
     public String getString(String key) {
         if(key == null){

==================================================
BeanFactory.java
index 6c9f6d49b2..adb09c056c 100644
--- a/java/org/apache/naming/TransactionRef.java
+++ b/java/org/apache/naming/TransactionRef.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming;
@@ -37,7 +37,7 @@ public class TransactionRef extends Reference {
     /**
      * Default factory for this reference.
      */
-    public static final String DEFAULT_FACTORY = 
+    public static final String DEFAULT_FACTORY =
         org.apache.naming.factory.Constants.DEFAULT_TRANSACTION_FACTORY;
 
 
@@ -70,7 +70,7 @@ public class TransactionRef extends Reference {
 
 
     /**
-     * Retrieves the class name of the factory of the object to which this 
+     * Retrieves the class name of the factory of the object to which this
      * reference refers.
      */
     @Override

==================================================
Constants.java
index b5bc69b455..f384e90683 100644
--- a/java/org/apache/naming/factory/BeanFactory.java
+++ b/java/org/apache/naming/factory/BeanFactory.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -35,7 +35,7 @@ import org.apache.naming.ResourceRef;
 
 /**
  * Object factory for any Resource conforming to the JavaBean spec.
- * 
+ *
  * <p>This factory can be configured in a <code>&lt;Context&gt;</code> element
  * in your <code>conf/server.xml</code>
  * configuration file.  An example of factory configuration is:</p>
@@ -58,7 +58,7 @@ import org.apache.naming.ResourceRef;
  *   &lt;parameter&gt;
  *     &lt;name&gt;networkProtocol&lt;/name&gt;
  *     &lt;value&gt;tcp&lt;/value&gt;
- *   &lt;/parameter&gt; 
+ *   &lt;/parameter&gt;
  *   &lt;parameter&gt;
  *     &lt;name&gt;databaseName&lt;/name&gt;
  *     &lt;value&gt;XXXX&lt;/value&gt;
@@ -104,7 +104,7 @@ public class BeanFactory
 
     /**
      * Create a new Bean instance.
-     * 
+     *
      * @param obj The reference object describing the Bean
      */
     @Override
@@ -115,11 +115,11 @@ public class BeanFactory
         if (obj instanceof ResourceRef) {
 
             try {
-                
+
                 Reference ref = (Reference) obj;
                 String beanClassName = ref.getClassName();
                 Class<?> beanClass = null;
-                ClassLoader tcl = 
+                ClassLoader tcl =
                     Thread.currentThread().getContextClassLoader();
                 if (tcl != null) {
                     try {
@@ -137,28 +137,28 @@ public class BeanFactory
                     throw new NamingException
                         ("Class not found: " + beanClassName);
                 }
-                
+
                 BeanInfo bi = Introspector.getBeanInfo(beanClass);
                 PropertyDescriptor[] pda = bi.getPropertyDescriptors();
-                
+
                 Object bean = beanClass.newInstance();
-                
+
                 Enumeration<RefAddr> e = ref.getAll();
                 while (e.hasMoreElements()) {
-                    
+
                     RefAddr ra = e.nextElement();
                     String propName = ra.getType();
-                    
+
                     if (propName.equals(Constants.FACTORY) ||
                         propName.equals("scope") || propName.equals("auth") ||
                         propName.equals("singleton")) {
                         continue;
                     }
-                    
+
                     String value = (String)ra.getContent();
-                    
+
                     Object[] valueArray = new Object[1];
-                    
+
                     int i = 0;
                     for (i = 0; i<pda.length; i++) {
 
@@ -168,26 +168,26 @@ public class BeanFactory
 
                             if (propType.equals(String.class)) {
                                 valueArray[0] = value;
-                            } else if (propType.equals(Character.class) 
+                            } else if (propType.equals(Character.class)
                                        || propType.equals(char.class)) {
                                 valueArray[0] =
                                     Character.valueOf(value.charAt(0));
-                            } else if (propType.equals(Byte.class) 
+                            } else if (propType.equals(Byte.class)
                                        || propType.equals(byte.class)) {
                                 valueArray[0] = new Byte(value);
-                            } else if (propType.equals(Short.class) 
+                            } else if (propType.equals(Short.class)
                                        || propType.equals(short.class)) {
                                 valueArray[0] = new Short(value);
-                            } else if (propType.equals(Integer.class) 
+                            } else if (propType.equals(Integer.class)
                                        || propType.equals(int.class)) {
                                 valueArray[0] = new Integer(value);
-                            } else if (propType.equals(Long.class) 
+                            } else if (propType.equals(Long.class)
                                        || propType.equals(long.class)) {
                                 valueArray[0] = new Long(value);
-                            } else if (propType.equals(Float.class) 
+                            } else if (propType.equals(Float.class)
                                        || propType.equals(float.class)) {
                                 valueArray[0] = new Float(value);
-                            } else if (propType.equals(Double.class) 
+                            } else if (propType.equals(Double.class)
                                        || propType.equals(double.class)) {
                                 valueArray[0] = new Double(value);
                             } else if (propType.equals(Boolean.class)
@@ -198,13 +198,13 @@ public class BeanFactory
                                     ("String conversion for property type '"
                                      + propType.getName() + "' not available");
                             }
-                            
+
                             Method setProp = pda[i].getWriteMethod();
                             if (setProp != null) {
                                 setProp.invoke(bean, valueArray);
                             } else {
                                 throw new NamingException
-                                    ("Write not allowed for property: " 
+                                    ("Write not allowed for property: "
                                      + propName);
                             }
 

==================================================
DataSourceLinkFactory.java
index a9fcf86345..399efb817a 100644
--- a/java/org/apache/naming/factory/Constants.java
+++ b/java/org/apache/naming/factory/Constants.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming.factory;
@@ -27,31 +27,31 @@ public final class Constants {
 
     public static final String Package = "org.apache.naming.factory";
 
-    public static final String DEFAULT_RESOURCE_FACTORY = 
+    public static final String DEFAULT_RESOURCE_FACTORY =
         Package + ".ResourceFactory";
 
-    public static final String DEFAULT_RESOURCE_LINK_FACTORY = 
+    public static final String DEFAULT_RESOURCE_LINK_FACTORY =
         Package + ".ResourceLinkFactory";
 
-    public static final String DEFAULT_TRANSACTION_FACTORY = 
+    public static final String DEFAULT_TRANSACTION_FACTORY =
         Package + ".TransactionFactory";
 
-    public static final String DEFAULT_RESOURCE_ENV_FACTORY = 
+    public static final String DEFAULT_RESOURCE_ENV_FACTORY =
         Package + ".ResourceEnvFactory";
 
-    public static final String DEFAULT_EJB_FACTORY = 
+    public static final String DEFAULT_EJB_FACTORY =
         Package + ".EjbFactory";
 
-    public static final String DEFAULT_SERVICE_FACTORY = 
+    public static final String DEFAULT_SERVICE_FACTORY =
         Package + ".webservices.ServiceRefFactory";
 
-    public static final String DEFAULT_HANDLER_FACTORY = 
+    public static final String DEFAULT_HANDLER_FACTORY =
         Package + ".HandlerFactory";
 
-    public static final String DBCP_DATASOURCE_FACTORY = 
+    public static final String DBCP_DATASOURCE_FACTORY =
         "org.apache.tomcat.dbcp.dbcp.BasicDataSourceFactory";
 
-    public static final String OPENEJB_EJB_FACTORY = 
+    public static final String OPENEJB_EJB_FACTORY =
         Package + ".OpenEjbFactory";
 
     public static final String FACTORY = "factory";

==================================================
EjbFactory.java
index fe0f7fa065..3b0209e968 100644
--- a/java/org/apache/naming/factory/DataSourceLinkFactory.java
+++ b/java/org/apache/naming/factory/DataSourceLinkFactory.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming.factory;
@@ -37,7 +37,7 @@ import javax.sql.DataSource;
 
 /**
  * <p>Object factory for resource links for shared data sources.</p>
- * 
+ *
  * @author Filip Hanik
  */
 public class DataSourceLinkFactory extends ResourceLinkFactory {
@@ -50,7 +50,7 @@ public class DataSourceLinkFactory extends ResourceLinkFactory {
 
     /**
      * Create a new DataSource instance.
-     * 
+     *
      * @param obj The reference object describing the DataSource
      */
     @Override
@@ -68,13 +68,13 @@ public class DataSourceLinkFactory extends ResourceLinkFactory {
         }
         return result;
     }
-    
+
     protected Object wrapDataSource(Object datasource, String username, String password) throws NamingException {
         try {
             Class<?> proxyClass = Proxy.getProxyClass(datasource.getClass().getClassLoader(), datasource.getClass().getInterfaces());
             Constructor<?> proxyConstructor = proxyClass.getConstructor(new Class[] { InvocationHandler.class });
             DataSourceHandler handler = new DataSourceHandler((DataSource)datasource, username, password);
-            return proxyConstructor.newInstance(handler);    
+            return proxyConstructor.newInstance(handler);
         }catch (Exception x) {
             if (x instanceof NamingException) throw (NamingException)x;
             else {
@@ -84,15 +84,15 @@ public class DataSourceLinkFactory extends ResourceLinkFactory {
             }
         }
     }
-    
+
     /**
      * Simple wrapper class that will allow a user to configure a ResourceLink for a data source
-     * so that when {@link javax.sql.DataSource#getConnection()} is called, it will invoke 
+     * so that when {@link javax.sql.DataSource#getConnection()} is called, it will invoke
      * {@link javax.sql.DataSource#getConnection(String, String)} with the preconfigured username and password.
      */
     public static class DataSourceHandler implements InvocationHandler {
-        private final DataSource ds; 
-        private final String username; 
+        private final DataSource ds;
+        private final String username;
         private final String password;
         private final Method getConnection;
         public DataSourceHandler(DataSource ds, String username, String password) throws Exception {
@@ -101,10 +101,10 @@ public class DataSourceLinkFactory extends ResourceLinkFactory {
             this.password = password;
             getConnection = ds.getClass().getMethod("getConnection", String.class, String.class);
         }
-        
+
         @Override
         public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
-            
+
             if ("getConnection".equals(method.getName()) && (args==null || args.length==0)) {
                 args = new String[] {username,password};
                 method = getConnection;
@@ -122,7 +122,7 @@ public class DataSourceLinkFactory extends ResourceLinkFactory {
                 }
             }
         }
-        
+
         public Object unwrap(Class<?> iface) throws SQLException {
             if (iface == DataSource.class) {
                 return ds;
@@ -130,10 +130,10 @@ public class DataSourceLinkFactory extends ResourceLinkFactory {
                 throw new SQLException("Not a wrapper of "+iface.getName());
             }
         }
-        
+
     }
-    
-    
+
+
 
 
 }

==================================================
MailSessionFactory.java
index 5d37cd44b2..4ed3e3c547 100644
--- a/java/org/apache/naming/factory/EjbFactory.java
+++ b/java/org/apache/naming/factory/EjbFactory.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming.factory;
@@ -32,7 +32,7 @@ import org.apache.naming.EjbRef;
 
 /**
  * Object factory for EJBs.
- * 
+ *
  * @author Remy Maucherat
  * @version $Id$
  */
@@ -58,14 +58,14 @@ public class EjbFactory
 
     /**
      * Create a new EJB instance.
-     * 
+     *
      * @param obj The reference object describing the DataSource
      */
     @Override
     public Object getObjectInstance(Object obj, Name name, Context nameCtx,
                                     Hashtable<?,?> environment)
         throws Exception {
-        
+
         if (obj instanceof EjbRef) {
             Reference ref = (Reference) obj;
 
@@ -82,18 +82,18 @@ public class EjbFactory
                 try {
                     Class home = Class.forName(homeClassName);
                     if (home.isInstance(beanObj)) {
-                        System.out.println("Bean of type " 
-                                           + beanObj.getClass().getName() 
-                                           + " implements home interface " 
+                        System.out.println("Bean of type "
+                                           + beanObj.getClass().getName()
+                                           + " implements home interface "
                                            + home.getName());
                     } else {
-                        System.out.println("Bean of type " 
-                                           + beanObj.getClass().getName() 
-                                           + " doesn't implement home interface " 
+                        System.out.println("Bean of type "
+                                           + beanObj.getClass().getName()
+                                           + " doesn't implement home interface "
                                            + home.getName());
                         throw new NamingException
-                            ("Bean of type " + beanObj.getClass().getName() 
-                             + " doesn't implement home interface " 
+                            ("Bean of type " + beanObj.getClass().getName()
+                             + " doesn't implement home interface "
                              + home.getName());
                     }
                 } catch (ClassNotFoundException e) {
@@ -103,15 +103,15 @@ public class EjbFactory
                 */
                 return beanObj;
             }
-            
+
             ObjectFactory factory = null;
             RefAddr factoryRefAddr = ref.get(Constants.FACTORY);
             if (factoryRefAddr != null) {
                 // Using the specified factory
-                String factoryClassName = 
+                String factoryClassName =
                     factoryRefAddr.getContent().toString();
                 // Loading factory
-                ClassLoader tcl = 
+                ClassLoader tcl =
                     Thread.currentThread().getContextClassLoader();
                 Class<?> factoryClass = null;
                 if (tcl != null) {

==================================================
OpenEjbFactory.java
index 2b0ce55abf..80e540db54 100644
--- a/java/org/apache/naming/factory/MailSessionFactory.java
+++ b/java/org/apache/naming/factory/MailSessionFactory.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -44,7 +44,7 @@ import javax.naming.spi.ObjectFactory;
  *     connections.  Defaults to <code>localhost</code> if not specified.</li>
  * </ul>
  *
- * <p>This factory can be configured in a 
+ * <p>This factory can be configured in a
  * <code>&lt;Context&gt;</code> element in your <code>conf/server.xml</code>
  * configuration file.  An example of factory configuration is:</p>
  * <pre>
@@ -135,7 +135,7 @@ public class MailSessionFactory implements ObjectFactory {
                         if(user == null) {
                             user = props.getProperty("mail.user");
                         }
-                        
+
                         if(user != null) {
                             final PasswordAuthentication pa = new PasswordAuthentication(user, password);
                             auth = new Authenticator() {

==================================================
ResourceEnvFactory.java
index 5038d76712..b439506bb5 100644
--- a/java/org/apache/naming/factory/OpenEjbFactory.java
+++ b/java/org/apache/naming/factory/OpenEjbFactory.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming.factory;
@@ -32,7 +32,7 @@ import org.apache.naming.EjbRef;
 
 /**
  * Object factory for EJBs.
- * 
+ *
  * @author Jacek Laskowski
  * @author Remy Maucherat
  * @version $Id$
@@ -43,7 +43,7 @@ public class OpenEjbFactory implements ObjectFactory {
     // -------------------------------------------------------------- Constants
 
 
-    protected static final String DEFAULT_OPENEJB_FACTORY = 
+    protected static final String DEFAULT_OPENEJB_FACTORY =
         "org.openejb.client.LocalInitialContextFactory";
 
 
@@ -52,7 +52,7 @@ public class OpenEjbFactory implements ObjectFactory {
 
     /**
      * Create a new EJB instance using OpenEJB.
-     * 
+     *
      * @param obj The reference object describing the DataSource
      */
     @Override

==================================================
ResourceFactory.java
index 406712053f..407d5c64f5 100644
--- a/java/org/apache/naming/factory/ResourceEnvFactory.java
+++ b/java/org/apache/naming/factory/ResourceEnvFactory.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming.factory;
@@ -31,7 +31,7 @@ import org.apache.naming.ResourceEnvRef;
 
 /**
  * Object factory for Resources env.
- * 
+ *
  * @author Remy Maucherat
  * @version $Id$
  */
@@ -57,24 +57,24 @@ public class ResourceEnvFactory
 
     /**
      * Create a new Resource env instance.
-     * 
+     *
      * @param obj The reference object describing the DataSource
      */
     @Override
     public Object getObjectInstance(Object obj, Name name, Context nameCtx,
                                     Hashtable<?,?> environment)
         throws Exception {
-        
+
         if (obj instanceof ResourceEnvRef) {
             Reference ref = (Reference) obj;
             ObjectFactory factory = null;
             RefAddr factoryRefAddr = ref.get(Constants.FACTORY);
             if (factoryRefAddr != null) {
                 // Using the specified factory
-                String factoryClassName = 
+                String factoryClassName =
                     factoryRefAddr.getContent().toString();
                 // Loading factory
-                ClassLoader tcl = 
+                ClassLoader tcl =
                     Thread.currentThread().getContextClassLoader();
                 Class<?> factoryClass = null;
                 if (tcl != null) {

==================================================
ResourceLinkFactory.java
index ce14b1c908..974a293944 100644
--- a/java/org/apache/naming/factory/ResourceFactory.java
+++ b/java/org/apache/naming/factory/ResourceFactory.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming.factory;
@@ -31,7 +31,7 @@ import org.apache.naming.ResourceRef;
 
 /**
  * Object factory for Resources.
- * 
+ *
  * @author Remy Maucherat
  * @version $Id$
  */
@@ -57,24 +57,24 @@ public class ResourceFactory
 
     /**
      * Crete a new DataSource instance.
-     * 
+     *
      * @param obj The reference object describing the DataSource
      */
     @Override
     public Object getObjectInstance(Object obj, Name name, Context nameCtx,
                                     Hashtable<?,?> environment)
         throws Exception {
-        
+
         if (obj instanceof ResourceRef) {
             Reference ref = (Reference) obj;
             ObjectFactory factory = null;
             RefAddr factoryRefAddr = ref.get(Constants.FACTORY);
             if (factoryRefAddr != null) {
                 // Using the specified factory
-                String factoryClassName = 
+                String factoryClassName =
                     factoryRefAddr.getContent().toString();
                 // Loading factory
-                ClassLoader tcl = 
+                ClassLoader tcl =
                     Thread.currentThread().getContextClassLoader();
                 Class<?> factoryClass = null;
                 if (tcl != null) {
@@ -114,7 +114,7 @@ public class ResourceFactory
                         System.getProperty("javax.sql.DataSource.Factory",
                                            Constants.DBCP_DATASOURCE_FACTORY);
                     try {
-                        factory = (ObjectFactory) 
+                        factory = (ObjectFactory)
                             Class.forName(javaxSqlDataSourceFactoryClassName)
                             .newInstance();
                     } catch (Exception e) {
@@ -128,7 +128,7 @@ public class ResourceFactory
                         System.getProperty("javax.mail.Session.Factory",
                                            "org.apache.naming.factory.MailSessionFactory");
                     try {
-                        factory = (ObjectFactory) 
+                        factory = (ObjectFactory)
                             Class.forName(javaxMailSessionFactoryClassName)
                             .newInstance();
                     } catch(Throwable t) {
@@ -147,7 +147,7 @@ public class ResourceFactory
                     ("Cannot create resource instance");
             }
         }
-        
+
         return null;
 
     }

==================================================
SendMailFactory.java
index 76e39757b5..c9f2374cbf 100644
--- a/java/org/apache/naming/factory/ResourceLinkFactory.java
+++ b/java/org/apache/naming/factory/ResourceLinkFactory.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming.factory;
@@ -32,7 +32,7 @@ import org.apache.naming.ResourceLinkRef;
 
 /**
  * <p>Object factory for resource links.</p>
- * 
+ *
  * @author Remy Maucherat
  * @version $Id$
  */
@@ -58,7 +58,7 @@ public class ResourceLinkFactory
 
     /**
      * Set the global context (note: can only be used once).
-     * 
+     *
      * @param newGlobalContext new global context value
      */
     public static void setGlobalContext(Context newGlobalContext) {
@@ -71,14 +71,14 @@ public class ResourceLinkFactory
 
     /**
      * Create a new DataSource instance.
-     * 
+     *
      * @param obj The reference object describing the DataSource
      */
     @Override
     public Object getObjectInstance(Object obj, Name name, Context nameCtx,
                                     Hashtable<?,?> environment)
         throws NamingException {
-        
+
         if (!(obj instanceof ResourceLinkRef))
             return null;
 
@@ -98,7 +98,7 @@ public class ResourceLinkFactory
 
         return (null);
 
-        
+
     }
 
 

==================================================
TransactionFactory.java
index 16aeb79031..d25621d14a 100644
--- a/java/org/apache/naming/factory/SendMailFactory.java
+++ b/java/org/apache/naming/factory/SendMailFactory.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -73,10 +73,10 @@ import javax.naming.spi.ObjectFactory;
  * @author Glenn Nielsen Rich Catlett
  */
 
-public class SendMailFactory implements ObjectFactory 
+public class SendMailFactory implements ObjectFactory
 {
     // The class name for the javamail MimeMessageDataSource
-    protected final String DataSourceClassName = 
+    protected final String DataSourceClassName =
         "javax.mail.internet.MimePartDataSource";
 
     @Override

==================================================
ServiceProxy.java
index 00f9a28492..aec55ba63b 100644
--- a/java/org/apache/naming/factory/TransactionFactory.java
+++ b/java/org/apache/naming/factory/TransactionFactory.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming.factory;
@@ -31,7 +31,7 @@ import org.apache.naming.TransactionRef;
 
 /**
  * Object factory for User transactions.
- * 
+ *
  * @author Remy Maucherat
  * @version $Id$
  */
@@ -57,24 +57,24 @@ public class TransactionFactory
 
     /**
      * Create a new User transaction instance.
-     * 
+     *
      * @param obj The reference object describing the DataSource
      */
     @Override
     public Object getObjectInstance(Object obj, Name name, Context nameCtx,
                                     Hashtable<?,?> environment)
         throws Exception {
-        
+
         if (obj instanceof TransactionRef) {
             Reference ref = (Reference) obj;
             ObjectFactory factory = null;
             RefAddr factoryRefAddr = ref.get(Constants.FACTORY);
             if (factoryRefAddr != null) {
                 // Using the specified factory
-                String factoryClassName = 
+                String factoryClassName =
                     factoryRefAddr.getContent().toString();
                 // Loading factory
-                ClassLoader tcl = 
+                ClassLoader tcl =
                     Thread.currentThread().getContextClassLoader();
                 Class<?> factoryClass = null;
                 if (tcl != null) {
@@ -116,11 +116,11 @@ public class TransactionFactory
                 throw new NamingException
                     ("Cannot create resource instance");
             }
-            
+
         }
-        
+
         return null;
-        
+
     }
 
 

==================================================
ServiceRefFactory.java
index 5d2b212a32..4f6fee35ae 100644
--- a/java/org/apache/naming/factory/webservices/ServiceProxy.java
+++ b/java/org/apache/naming/factory/webservices/ServiceProxy.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming.factory.webservices;
@@ -31,7 +31,7 @@ import javax.xml.rpc.ServiceException;
 
 /**
  * Object proxy for Web Services.
- * 
+ *
  * @author Fabien Carrion
  */
 
@@ -132,7 +132,7 @@ public class ServiceProxy
      * @return Returns the correct Port
      * @throws ServiceException if port's QName is an unknown Port
      */
-    private Remote getProxyPortClass(Object[] args) 
+    private Remote getProxyPortClass(Object[] args)
     throws ServiceException {
         Class<?> serviceendpointClass = (Class<?>) args[0];
 

==================================================
javaURLContextFactory.java
index 047cad9e25..93feb3072d 100644
--- a/java/org/apache/naming/factory/webservices/ServiceRefFactory.java
+++ b/java/org/apache/naming/factory/webservices/ServiceRefFactory.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 package org.apache.naming.factory.webservices;
 
 import java.lang.reflect.Method;
@@ -52,7 +52,7 @@ import org.apache.naming.ServiceRef;
 
 /**
  * Object factory for Web Services.
- * 
+ *
  * @author Fabien Carrion
  */
 
@@ -77,7 +77,7 @@ public class ServiceRefFactory
 
     /**
      * Crete a new serviceref instance.
-     * 
+     *
      * @param obj The reference object describing the webservice
      */
     @Override
@@ -89,7 +89,7 @@ public class ServiceRefFactory
             Reference ref = (Reference) obj;
 
             // ClassLoader
-            ClassLoader tcl = 
+            ClassLoader tcl =
                 Thread.currentThread().getContextClassLoader();
             if (tcl == null)
                 tcl = this.getClass().getClassLoader();

==================================================
BaseDirContext.java
index be18a1cdec..eace3ca186 100644
--- a/java/org/apache/naming/java/javaURLContextFactory.java
+++ b/java/org/apache/naming/java/javaURLContextFactory.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming.java;
@@ -36,15 +36,15 @@ import org.apache.naming.SelectorContext;
  * <b>Important note</b> : This factory MUST be associated with the "java" URL
  * prefix, which can be done by either :
  * <ul>
- * <li>Adding a 
+ * <li>Adding a
  * java.naming.factory.url.pkgs=org.apache.catalina.util.naming property
  * to the JNDI properties file</li>
- * <li>Setting an environment variable named Context.URL_PKG_PREFIXES with 
- * its value including the org.apache.catalina.util.naming package name. 
- * More detail about this can be found in the JNDI documentation : 
+ * <li>Setting an environment variable named Context.URL_PKG_PREFIXES with
+ * its value including the org.apache.catalina.util.naming package name.
+ * More detail about this can be found in the JNDI documentation :
  * {@link javax.naming.spi.NamingManager#getURLContext(java.lang.String, java.util.Hashtable)}.</li>
  * </ul>
- * 
+ *
  * @author Remy Maucherat
  * @version $Id$
  */
@@ -85,7 +85,7 @@ public class javaURLContextFactory
     public Object getObjectInstance(Object obj, Name name, Context nameCtx,
                                     Hashtable<?,?> environment)
         throws NamingException {
-        if ((ContextBindings.isThreadBound()) || 
+        if ((ContextBindings.isThreadBound()) ||
             (ContextBindings.isClassLoaderBound())) {
             return new SelectorContext((Hashtable<String,Object>)environment);
         }
@@ -100,7 +100,7 @@ public class javaURLContextFactory
     @Override
     public Context getInitialContext(Hashtable<?,?> environment)
         throws NamingException {
-        if (ContextBindings.isThreadBound() || 
+        if (ContextBindings.isThreadBound() ||
             (ContextBindings.isClassLoaderBound())) {
             // Redirect the request to the bound initial context
             return new SelectorContext(

==================================================
CacheEntry.java
index 4baed1ea61..156216a7f0 100644
--- a/java/org/apache/naming/resources/BaseDirContext.java
+++ b/java/org/apache/naming/resources/BaseDirContext.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming.resources;
@@ -143,11 +143,11 @@ public abstract class BaseDirContext implements DirContext {
     /**
      * Alternate / backup DirContexts for static resources. These will be
      * searched in the order they are added if the requested resource cannot be
-     * found in the primary DirContext. 
+     * found in the primary DirContext.
      */
     protected List<DirContext> altDirContexts = new ArrayList<DirContext>();
-    
-    
+
+
     // ------------------------------------------------------------- Properties
 
 
@@ -158,7 +158,7 @@ public abstract class BaseDirContext implements DirContext {
     public void addResourcesJar(URL url) {
         try {
             JarURLConnection conn = (JarURLConnection) url.openConnection();
-            JarFile jarFile = conn.getJarFile();   
+            JarFile jarFile = conn.getJarFile();
             ZipEntry entry = jarFile.getEntry("/");
             WARDirContext warDirContext = new WARDirContext(jarFile,
                     new WARDirContext.Entry("/", entry));
@@ -168,7 +168,7 @@ public abstract class BaseDirContext implements DirContext {
             log.warn(sm.getString("resources.addResourcesJarFail", url), ioe);
         }
     }
-    
+
 
     /**
      * Add an alternative DirContext (must contain META-INF/resources) directly.
@@ -189,7 +189,7 @@ public abstract class BaseDirContext implements DirContext {
         aliases.put(path, dirContext);
     }
 
-    
+
     /**
      * Remove an alias.
      */
@@ -200,8 +200,8 @@ public abstract class BaseDirContext implements DirContext {
         }
         aliases.remove(path);
     }
-    
-    
+
+
     /**
      * Get the current alias configuration in String form. If no aliases are
      * configured, an empty string will be returned.
@@ -225,7 +225,7 @@ public abstract class BaseDirContext implements DirContext {
         return result.toString();
     }
 
-    
+
     /**
      * Set the current alias configuration from a String. The String should be
      * of the form "/aliasPath1=docBase1,/aliasPath2=docBase2" where aliasPathN
@@ -236,10 +236,10 @@ public abstract class BaseDirContext implements DirContext {
     public void setAliases(String theAliases) {
         // Overwrite whatever is currently set
         aliases.clear();
-        
+
         if (theAliases == null || theAliases.length() == 0)
             return;
-        
+
         String[] kvps = theAliases.split(",");
         for (String kvp : kvps) {
             String[] kv = kvp.split("=");
@@ -270,7 +270,7 @@ public abstract class BaseDirContext implements DirContext {
         }
     }
 
-    
+
     /**
      * Return the document root for this component.
      */
@@ -390,10 +390,10 @@ public abstract class BaseDirContext implements DirContext {
                 ((BaseDirContext)dcontext).release();
             }
         }
-        this.altDirContexts.clear();        
+        this.altDirContexts.clear();
     }
 
-    
+
     /**
      * Return the real path for a given virtual path, if possible; otherwise
      * return <code>null</code>.
@@ -407,13 +407,13 @@ public abstract class BaseDirContext implements DirContext {
                 return result.dirContext.doGetRealPath(result.aliasName);
             }
         }
-        
+
         // Next do a standard getRealPath()
         String path = doGetRealPath(name);
 
         if (path != null)
             return path;
-        
+
         // Check the alternate locations
         for (DirContext altDirContext : altDirContexts) {
             if (altDirContext instanceof BaseDirContext){
@@ -423,20 +423,20 @@ public abstract class BaseDirContext implements DirContext {
                     return path;
             }
         }
-        
+
         // Really not found
-        return null; 
+        return null;
     }
 
     // -------------------------------------------------------- Context Methods
 
 
     /**
-     * Retrieves the named object. If name is empty, returns a new instance 
-     * of this context (which represents the same naming context as this 
-     * context, but its environment may be modified independently and it may 
+     * Retrieves the named object. If name is empty, returns a new instance
+     * of this context (which represents the same naming context as this
+     * context, but its environment may be modified independently and it may
      * be accessed concurrently).
-     * 
+     *
      * @param name the name of the object to look up
      * @return the object bound to name
      * @exception NamingException if a naming exception is encountered
@@ -450,7 +450,7 @@ public abstract class BaseDirContext implements DirContext {
 
     /**
      * Retrieves the named object.
-     * 
+     *
      * @param name the name of the object to look up
      * @return the object bound to name
      * @exception NamingException if a naming exception is encountered
@@ -464,13 +464,13 @@ public abstract class BaseDirContext implements DirContext {
                 return result.dirContext.lookup(result.aliasName);
             }
         }
-        
+
         // Next do a standard lookup
         Object obj = doLookup(name);
 
         if (obj != null)
             return obj;
-        
+
         // Check the alternate locations
         for (DirContext altDirContext : altDirContexts) {
             try {
@@ -481,17 +481,17 @@ public abstract class BaseDirContext implements DirContext {
                 // ignore
             }
         }
-        
+
         // Really not found
         throw new NameNotFoundException(
                 sm.getString("resources.notFound", name));
     }
 
     /**
-     * Binds a name to an object. All intermediate contexts and the target 
-     * context (that named by all but terminal atomic component of the name) 
+     * Binds a name to an object. All intermediate contexts and the target
+     * context (that named by all but terminal atomic component of the name)
      * must already exist.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @exception javax.naming.NameAlreadyBoundException if name is already
@@ -509,7 +509,7 @@ public abstract class BaseDirContext implements DirContext {
 
     /**
      * Binds a name to an object.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @exception javax.naming.NameAlreadyBoundException if name is already
@@ -526,14 +526,14 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Binds a name to an object, overwriting any existing binding. All 
-     * intermediate contexts and the target context (that named by all but 
+     * Binds a name to an object, overwriting any existing binding. All
+     * intermediate contexts and the target context (that named by all but
      * terminal atomic component of the name) must already exist.
      * <p>
-     * If the object is a DirContext, any existing attributes associated with 
-     * the name are replaced with those of the object. Otherwise, any 
+     * If the object is a DirContext, any existing attributes associated with
+     * the name are replaced with those of the object. Otherwise, any
      * existing attributes associated with the name remain unchanged.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @exception javax.naming.directory.InvalidAttributesException if object
@@ -549,7 +549,7 @@ public abstract class BaseDirContext implements DirContext {
 
     /**
      * Binds a name to an object, overwriting any existing binding.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @exception javax.naming.directory.InvalidAttributesException if object
@@ -564,16 +564,16 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Unbinds the named object. Removes the terminal atomic name in name 
-     * from the target context--that named by all but the terminal atomic 
+     * Unbinds the named object. Removes the terminal atomic name in name
+     * from the target context--that named by all but the terminal atomic
      * part of name.
      * <p>
-     * This method is idempotent. It succeeds even if the terminal atomic 
-     * name is not bound in the target context, but throws 
-     * NameNotFoundException if any of the intermediate contexts do not exist. 
-     * 
+     * This method is idempotent. It succeeds even if the terminal atomic
+     * name is not bound in the target context, but throws
+     * NameNotFoundException if any of the intermediate contexts do not exist.
+     *
      * @param name the name to bind; may not be empty
-     * @exception NameNotFoundException if an intermediate context does not 
+     * @exception NameNotFoundException if an intermediate context does not
      * exist
      * @exception NamingException if a naming exception is encountered
      */
@@ -586,9 +586,9 @@ public abstract class BaseDirContext implements DirContext {
 
     /**
      * Unbinds the named object.
-     * 
+     *
      * @param name the name to bind; may not be empty
-     * @exception NameNotFoundException if an intermediate context does not 
+     * @exception NameNotFoundException if an intermediate context does not
      * exist
      * @exception NamingException if a naming exception is encountered
      */
@@ -598,11 +598,11 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Binds a new name to the object bound to an old name, and unbinds the 
-     * old name. Both names are relative to this context. Any attributes 
-     * associated with the old name become associated with the new name. 
+     * Binds a new name to the object bound to an old name, and unbinds the
+     * old name. Both names are relative to this context. Any attributes
+     * associated with the old name become associated with the new name.
      * Intermediate contexts of the old name are not changed.
-     * 
+     *
      * @param oldName the name of the existing binding; may not be empty
      * @param newName the name of the new binding; may not be empty
      * @exception javax.naming.NameAlreadyBoundException if newName is already
@@ -617,9 +617,9 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Binds a new name to the object bound to an old name, and unbinds the 
+     * Binds a new name to the object bound to an old name, and unbinds the
      * old name.
-     * 
+     *
      * @param oldName the name of the existing binding; may not be empty
      * @param newName the name of the new binding; may not be empty
      * @exception javax.naming.NameAlreadyBoundException if newName is already
@@ -632,15 +632,15 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Enumerates the names bound in the named context, along with the class 
-     * names of objects bound to them. The contents of any subcontexts are 
+     * Enumerates the names bound in the named context, along with the class
+     * names of objects bound to them. The contents of any subcontexts are
      * not included.
      * <p>
-     * If a binding is added to or removed from this context, its effect on 
+     * If a binding is added to or removed from this context, its effect on
      * an enumeration previously returned is undefined.
-     * 
+     *
      * @param name the name of the context to list
-     * @return an enumeration of the names and class names of the bindings in 
+     * @return an enumeration of the names and class names of the bindings in
      * this context. Each element of the enumeration is of type NameClassPair.
      * @exception NamingException if a naming exception is encountered
      */
@@ -652,11 +652,11 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Enumerates the names bound in the named context, along with the class 
+     * Enumerates the names bound in the named context, along with the class
      * names of objects bound to them.
-     * 
+     *
      * @param name the name of the context to list
-     * @return an enumeration of the names and class names of the bindings in 
+     * @return an enumeration of the names and class names of the bindings in
      * this context. Each element of the enumeration is of type NameClassPair.
      * @exception NamingException if a naming exception is encountered
      */
@@ -666,15 +666,15 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Enumerates the names bound in the named context, along with the 
-     * objects bound to them. The contents of any subcontexts are not 
+     * Enumerates the names bound in the named context, along with the
+     * objects bound to them. The contents of any subcontexts are not
      * included.
      * <p>
-     * If a binding is added to or removed from this context, its effect on 
+     * If a binding is added to or removed from this context, its effect on
      * an enumeration previously returned is undefined.
-     * 
+     *
      * @param name the name of the context to list
-     * @return an enumeration of the bindings in this context. 
+     * @return an enumeration of the bindings in this context.
      * Each element of the enumeration is of type Binding.
      * @exception NamingException if a naming exception is encountered
      */
@@ -686,11 +686,11 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Enumerates the names bound in the named context, along with the 
+     * Enumerates the names bound in the named context, along with the
      * objects bound to them.
-     * 
+     *
      * @param name the name of the context to list
-     * @return an enumeration of the bindings in this context. 
+     * @return an enumeration of the bindings in this context.
      * Each element of the enumeration is of type Binding.
      * @exception NamingException if a naming exception is encountered
      */
@@ -703,7 +703,7 @@ public abstract class BaseDirContext implements DirContext {
                 return result.dirContext.listBindings(result.aliasName);
             }
         }
-        
+
         // Next do a standard lookup
         List<NamingEntry> bindings = doListBindings(name);
 
@@ -736,26 +736,26 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Destroys the named context and removes it from the namespace. Any 
-     * attributes associated with the name are also removed. Intermediate 
+     * Destroys the named context and removes it from the namespace. Any
+     * attributes associated with the name are also removed. Intermediate
      * contexts are not destroyed.
      * <p>
-     * This method is idempotent. It succeeds even if the terminal atomic 
-     * name is not bound in the target context, but throws 
-     * NameNotFoundException if any of the intermediate contexts do not exist. 
-     * 
-     * In a federated naming system, a context from one naming system may be 
-     * bound to a name in another. One can subsequently look up and perform 
-     * operations on the foreign context using a composite name. However, an 
-     * attempt destroy the context using this composite name will fail with 
-     * NotContextException, because the foreign context is not a "subcontext" 
-     * of the context in which it is bound. Instead, use unbind() to remove 
-     * the binding of the foreign context. Destroying the foreign context 
-     * requires that the destroySubcontext() be performed on a context from 
+     * This method is idempotent. It succeeds even if the terminal atomic
+     * name is not bound in the target context, but throws
+     * NameNotFoundException if any of the intermediate contexts do not exist.
+     *
+     * In a federated naming system, a context from one naming system may be
+     * bound to a name in another. One can subsequently look up and perform
+     * operations on the foreign context using a composite name. However, an
+     * attempt destroy the context using this composite name will fail with
+     * NotContextException, because the foreign context is not a "subcontext"
+     * of the context in which it is bound. Instead, use unbind() to remove
+     * the binding of the foreign context. Destroying the foreign context
+     * requires that the destroySubcontext() be performed on a context from
      * the foreign context's "native" naming system.
-     * 
+     *
      * @param name the name of the context to be destroyed; may not be empty
-     * @exception NameNotFoundException if an intermediate context does not 
+     * @exception NameNotFoundException if an intermediate context does not
      * exist
      * @exception javax.naming.NotContextException if the name is bound but does
      * not name a context, or does not name a context of the appropriate type
@@ -769,9 +769,9 @@ public abstract class BaseDirContext implements DirContext {
 
     /**
      * Destroys the named context and removes it from the namespace.
-     * 
+     *
      * @param name the name of the context to be destroyed; may not be empty
-     * @exception NameNotFoundException if an intermediate context does not 
+     * @exception NameNotFoundException if an intermediate context does not
      * exist
      * @exception javax.naming.NotContextException if the name is bound but does
      * not name a context, or does not name a context of the appropriate type
@@ -782,11 +782,11 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Creates and binds a new context. Creates a new context with the given 
-     * name and binds it in the target context (that named by all but 
-     * terminal atomic component of the name). All intermediate contexts and 
+     * Creates and binds a new context. Creates a new context with the given
+     * name and binds it in the target context (that named by all but
+     * terminal atomic component of the name). All intermediate contexts and
      * the target context must already exist.
-     * 
+     *
      * @param name the name of the context to create; may not be empty
      * @return the newly created context
      * @exception javax.naming.NameAlreadyBoundException if name is already
@@ -804,7 +804,7 @@ public abstract class BaseDirContext implements DirContext {
 
     /**
      * Creates and binds a new context.
-     * 
+     *
      * @param name the name of the context to create; may not be empty
      * @return the newly created context
      * @exception javax.naming.NameAlreadyBoundException if name is already
@@ -821,12 +821,12 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Retrieves the named object, following links except for the terminal 
-     * atomic component of the name. If the object bound to name is not a 
+     * Retrieves the named object, following links except for the terminal
+     * atomic component of the name. If the object bound to name is not a
      * link, returns the object itself.
-     * 
+     *
      * @param name the name of the object to look up
-     * @return the object bound to name, not following the terminal link 
+     * @return the object bound to name, not following the terminal link
      * (if any).
      * @exception NamingException if a naming exception is encountered
      */
@@ -838,11 +838,11 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Retrieves the named object, following links except for the terminal 
+     * Retrieves the named object, following links except for the terminal
      * atomic component of the name.
-     * 
+     *
      * @param name the name of the object to look up
-     * @return the object bound to name, not following the terminal link 
+     * @return the object bound to name, not following the terminal link
      * (if any).
      * @exception NamingException if a naming exception is encountered
      */
@@ -852,16 +852,16 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Retrieves the parser associated with the named context. In a 
-     * federation of namespaces, different naming systems will parse names 
-     * differently. This method allows an application to get a parser for 
-     * parsing names into their atomic components using the naming convention 
-     * of a particular naming system. Within any single naming system, 
-     * NameParser objects returned by this method must be equal (using the 
+     * Retrieves the parser associated with the named context. In a
+     * federation of namespaces, different naming systems will parse names
+     * differently. This method allows an application to get a parser for
+     * parsing names into their atomic components using the naming convention
+     * of a particular naming system. Within any single naming system,
+     * NameParser objects returned by this method must be equal (using the
      * equals() test).
-     * 
+     *
      * @param name the name of the context from which to get the parser
-     * @return a name parser that can parse compound names into their atomic 
+     * @return a name parser that can parse compound names into their atomic
      * components
      * @exception NamingException if a naming exception is encountered
      */
@@ -874,9 +874,9 @@ public abstract class BaseDirContext implements DirContext {
 
     /**
      * Retrieves the parser associated with the named context.
-     * 
+     *
      * @param name the name of the context from which to get the parser
-     * @return a name parser that can parse compound names into their atomic 
+     * @return a name parser that can parse compound names into their atomic
      * components
      * @exception NamingException if a naming exception is encountered
      */
@@ -890,13 +890,13 @@ public abstract class BaseDirContext implements DirContext {
     /**
      * Composes the name of this context with a name relative to this context.
      * <p>
-     * Given a name (name) relative to this context, and the name (prefix) 
-     * of this context relative to one of its ancestors, this method returns 
-     * the composition of the two names using the syntax appropriate for the 
-     * naming system(s) involved. That is, if name names an object relative 
-     * to this context, the result is the name of the same object, but 
+     * Given a name (name) relative to this context, and the name (prefix)
+     * of this context relative to one of its ancestors, this method returns
+     * the composition of the two names using the syntax appropriate for the
+     * naming system(s) involved. That is, if name names an object relative
+     * to this context, the result is the name of the same object, but
      * relative to the ancestor context. None of the names may be null.
-     * 
+     *
      * @param name a name relative to this context
      * @param prefix the name of this context relative to one of its ancestors
      * @return the composition of prefix and name
@@ -912,7 +912,7 @@ public abstract class BaseDirContext implements DirContext {
 
     /**
      * Composes the name of this context with a name relative to this context.
-     * 
+     *
      * @param name a name relative to this context
      * @param prefix the name of this context relative to one of its ancestors
      * @return the composition of prefix and name
@@ -926,10 +926,10 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Adds a new environment property to the environment of this context. If 
+     * Adds a new environment property to the environment of this context. If
      * the property already exists, its value is overwritten.
-     * 
-     * @param propName the name of the environment property to add; may not 
+     *
+     * @param propName the name of the environment property to add; may not
      * be null
      * @param propVal the value of the property to add; may not be null
      * @exception NamingException if a naming exception is encountered
@@ -942,9 +942,9 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Removes an environment property from the environment of this context. 
-     * 
-     * @param propName the name of the environment property to remove; 
+     * Removes an environment property from the environment of this context.
+     *
+     * @param propName the name of the environment property to remove;
      * may not be null
      * @exception NamingException if a naming exception is encountered
      */
@@ -956,12 +956,12 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Retrieves the environment in effect for this context. See class 
-     * description for more details on environment properties. 
-     * The caller should not make any changes to the object returned: their 
-     * effect on the context is undefined. The environment of this context 
+     * Retrieves the environment in effect for this context. See class
+     * description for more details on environment properties.
+     * The caller should not make any changes to the object returned: their
+     * effect on the context is undefined. The environment of this context
      * may be changed using addToEnvironment() and removeFromEnvironment().
-     * 
+     *
      * @return the environment of this context; never null
      * @exception NamingException if a naming exception is encountered
      */
@@ -973,13 +973,13 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Closes this context. This method releases this context's resources 
-     * immediately, instead of waiting for them to be released automatically 
+     * Closes this context. This method releases this context's resources
+     * immediately, instead of waiting for them to be released automatically
      * by the garbage collector.
-     * This method is idempotent: invoking it on a context that has already 
-     * been closed has no effect. Invoking any other method on a closed 
+     * This method is idempotent: invoking it on a context that has already
+     * been closed has no effect. Invoking any other method on a closed
      * context is not allowed, and results in undefined behaviour.
-     * 
+     *
      * @exception NamingException if a naming exception is encountered
      */
     @Override
@@ -992,15 +992,15 @@ public abstract class BaseDirContext implements DirContext {
     /**
      * Retrieves the full name of this context within its own namespace.
      * <p>
-     * Many naming services have a notion of a "full name" for objects in 
-     * their respective namespaces. For example, an LDAP entry has a 
-     * distinguished name, and a DNS record has a fully qualified name. This 
-     * method allows the client application to retrieve this name. The string 
-     * returned by this method is not a JNDI composite name and should not be 
-     * passed directly to context methods. In naming systems for which the 
-     * notion of full name does not make sense, 
+     * Many naming services have a notion of a "full name" for objects in
+     * their respective namespaces. For example, an LDAP entry has a
+     * distinguished name, and a DNS record has a fully qualified name. This
+     * method allows the client application to retrieve this name. The string
+     * returned by this method is not a JNDI composite name and should not be
+     * passed directly to context methods. In naming systems for which the
+     * notion of full name does not make sense,
      * OperationNotSupportedException is thrown.
-     * 
+     *
      * @return this context's name in its own namespace; never null
      * @exception javax.naming.OperationNotSupportedException if the naming
      * system does not have the notion of a full name
@@ -1015,9 +1015,9 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Retrieves all of the attributes associated with a named object. 
-     * 
-     * @return the set of attributes associated with name. 
+     * Retrieves all of the attributes associated with a named object.
+     *
+     * @return the set of attributes associated with name.
      * Returns an empty attribute set if name has no attributes; never null.
      * @param name the name of the object from which to retrieve attributes
      * @exception NamingException if a naming exception is encountered
@@ -1031,7 +1031,7 @@ public abstract class BaseDirContext implements DirContext {
 
     /**
      * Retrieves all of the attributes associated with a named object.
-     * 
+     *
      * @return the set of attributes associated with name
      * @param name the name of the object from which to retrieve attributes
      * @exception NamingException if a naming exception is encountered
@@ -1044,14 +1044,14 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Retrieves selected attributes associated with a named object. 
-     * See the class description regarding attribute models, attribute type 
+     * Retrieves selected attributes associated with a named object.
+     * See the class description regarding attribute models, attribute type
      * names, and operational attributes.
-     * 
+     *
      * @return the requested attributes; never null
      * @param name the name of the object from which to retrieve attributes
-     * @param attrIds the identifiers of the attributes to retrieve. null 
-     * indicates that all attributes should be retrieved; an empty array 
+     * @param attrIds the identifiers of the attributes to retrieve. null
+     * indicates that all attributes should be retrieved; an empty array
      * indicates that none should be retrieved
      * @exception NamingException if a naming exception is encountered
      */
@@ -1060,22 +1060,22 @@ public abstract class BaseDirContext implements DirContext {
         throws NamingException {
         return getAttributes(name.toString(), attrIds);
     }
-    
-    
+
+
     /**
      * Retrieves selected attributes associated with a named object.
-     * 
+     *
      * @return the requested attributes; never null
      * @param name the name of the object from which to retrieve attributes
-     * @param attrIds the identifiers of the attributes to retrieve. null 
-     * indicates that all attributes should be retrieved; an empty array 
+     * @param attrIds the identifiers of the attributes to retrieve. null
+     * indicates that all attributes should be retrieved; an empty array
      * indicates that none should be retrieved
      * @exception NamingException if a naming exception is encountered
      */
     @Override
     public final Attributes getAttributes(String name, String[] attrIds)
         throws NamingException {
-        
+
         // First check for aliases
         if (!aliases.isEmpty()) {
             AliasResult result = findAlias(name);
@@ -1084,13 +1084,13 @@ public abstract class BaseDirContext implements DirContext {
                         result.aliasName, attrIds);
             }
         }
-        
+
         // Next do a standard lookup
         Attributes attrs = doGetAttributes(name, attrIds);
 
         if (attrs != null)
             return attrs;
-        
+
         // Check the alternate locations
         for (DirContext altDirContext : altDirContexts) {
             if (altDirContext instanceof BaseDirContext)
@@ -1106,21 +1106,21 @@ public abstract class BaseDirContext implements DirContext {
             if (attrs != null)
                 return attrs;
         }
-        
+
         // Really not found
         throw new NameNotFoundException(
                 sm.getString("resources.notFound", name));
     }
 
     /**
-     * Modifies the attributes associated with a named object. The order of 
-     * the modifications is not specified. Where possible, the modifications 
+     * Modifies the attributes associated with a named object. The order of
+     * the modifications is not specified. Where possible, the modifications
      * are performed atomically.
-     * 
+     *
      * @param name the name of the object whose attributes will be updated
-     * @param mod_op the modification operation, one of: ADD_ATTRIBUTE, 
+     * @param mod_op the modification operation, one of: ADD_ATTRIBUTE,
      * REPLACE_ATTRIBUTE, REMOVE_ATTRIBUTE
-     * @param attrs the attributes to be used for the modification; may not 
+     * @param attrs the attributes to be used for the modification; may not
      * be null
      * @exception javax.naming.directory.AttributeModificationException if the
      * modification cannot be completed successfully
@@ -1135,11 +1135,11 @@ public abstract class BaseDirContext implements DirContext {
 
     /**
      * Modifies the attributes associated with a named object.
-     * 
+     *
      * @param name the name of the object whose attributes will be updated
-     * @param mod_op the modification operation, one of: ADD_ATTRIBUTE, 
+     * @param mod_op the modification operation, one of: ADD_ATTRIBUTE,
      * REPLACE_ATTRIBUTE, REMOVE_ATTRIBUTE
-     * @param attrs the attributes to be used for the modification; may not 
+     * @param attrs the attributes to be used for the modification; may not
      * be null
      * @exception javax.naming.directory.AttributeModificationException if the
      * modification cannot be completed successfully
@@ -1152,14 +1152,14 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Modifies the attributes associated with a named object using an an 
-     * ordered list of modifications. The modifications are performed in the 
-     * order specified. Each modification specifies a modification operation 
-     * code and an attribute on which to operate. Where possible, the 
+     * Modifies the attributes associated with a named object using an an
+     * ordered list of modifications. The modifications are performed in the
+     * order specified. Each modification specifies a modification operation
+     * code and an attribute on which to operate. Where possible, the
      * modifications are performed atomically.
-     * 
+     *
      * @param name the name of the object whose attributes will be updated
-     * @param mods an ordered sequence of modifications to be performed; may 
+     * @param mods an ordered sequence of modifications to be performed; may
      * not be null
      * @exception javax.naming.directory.AttributeModificationException if the
      * modification cannot be completed successfully
@@ -1173,11 +1173,11 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Modifies the attributes associated with a named object using an an 
+     * Modifies the attributes associated with a named object using an an
      * ordered list of modifications.
-     * 
+     *
      * @param name the name of the object whose attributes will be updated
-     * @param mods an ordered sequence of modifications to be performed; may 
+     * @param mods an ordered sequence of modifications to be performed; may
      * not be null
      * @exception javax.naming.directory.AttributeModificationException if the
      * modification cannot be completed successfully
@@ -1189,12 +1189,12 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Binds a name to an object, along with associated attributes. If attrs 
-     * is null, the resulting binding will have the attributes associated 
-     * with obj if obj is a DirContext, and no attributes otherwise. If attrs 
-     * is non-null, the resulting binding will have attrs as its attributes; 
+     * Binds a name to an object, along with associated attributes. If attrs
+     * is null, the resulting binding will have the attributes associated
+     * with obj if obj is a DirContext, and no attributes otherwise. If attrs
+     * is non-null, the resulting binding will have attrs as its attributes;
      * any attributes associated with obj are ignored.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @param attrs the attributes to associate with the binding
@@ -1213,7 +1213,7 @@ public abstract class BaseDirContext implements DirContext {
 
     /**
      * Binds a name to an object, along with associated attributes.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @param attrs the attributes to associate with the binding
@@ -1229,16 +1229,16 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Binds a name to an object, along with associated attributes, 
-     * overwriting any existing binding. If attrs is null and obj is a 
-     * DirContext, the attributes from obj are used. If attrs is null and obj 
+     * Binds a name to an object, along with associated attributes,
+     * overwriting any existing binding. If attrs is null and obj is a
+     * DirContext, the attributes from obj are used. If attrs is null and obj
      * is not a DirContext, any existing attributes associated with the object
-     * already bound in the directory remain unchanged. If attrs is non-null, 
-     * any existing attributes associated with the object already bound in 
-     * the directory are removed and attrs is associated with the named 
-     * object. If obj is a DirContext and attrs is non-null, the attributes 
+     * already bound in the directory remain unchanged. If attrs is non-null,
+     * any existing attributes associated with the object already bound in
+     * the directory are removed and attrs is associated with the named
+     * object. If obj is a DirContext and attrs is non-null, the attributes
      * of obj are ignored.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @param attrs the attributes to associate with the binding
@@ -1254,9 +1254,9 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Binds a name to an object, along with associated attributes, 
+     * Binds a name to an object, along with associated attributes,
      * overwriting any existing binding.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @param attrs the attributes to associate with the binding
@@ -1270,14 +1270,14 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Creates and binds a new context, along with associated attributes. 
-     * This method creates a new subcontext with the given name, binds it in 
-     * the target context (that named by all but terminal atomic component of 
-     * the name), and associates the supplied attributes with the newly 
-     * created object. All intermediate and target contexts must already 
-     * exist. If attrs is null, this method is equivalent to 
+     * Creates and binds a new context, along with associated attributes.
+     * This method creates a new subcontext with the given name, binds it in
+     * the target context (that named by all but terminal atomic component of
+     * the name), and associates the supplied attributes with the newly
+     * created object. All intermediate and target contexts must already
+     * exist. If attrs is null, this method is equivalent to
      * Context.createSubcontext().
-     * 
+     *
      * @param name the name of the context to create; may not be empty
      * @param attrs the attributes to associate with the newly created context
      * @return the newly created context
@@ -1296,7 +1296,7 @@ public abstract class BaseDirContext implements DirContext {
 
     /**
      * Creates and binds a new context, along with associated attributes.
-     * 
+     *
      * @param name the name of the context to create; may not be empty
      * @param attrs the attributes to associate with the newly created context
      * @return the newly created context
@@ -1312,13 +1312,13 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Retrieves the schema associated with the named object. The schema 
-     * describes rules regarding the structure of the namespace and the 
-     * attributes stored within it. The schema specifies what types of 
-     * objects can be added to the directory and where they can be added; 
-     * what mandatory and optional attributes an object can have. The range 
+     * Retrieves the schema associated with the named object. The schema
+     * describes rules regarding the structure of the namespace and the
+     * attributes stored within it. The schema specifies what types of
+     * objects can be added to the directory and where they can be added;
+     * what mandatory and optional attributes an object can have. The range
      * of support for schemas is directory-specific.
-     * 
+     *
      * @param name the name of the object whose schema is to be retrieved
      * @return the schema associated with the context; never null
      * @exception javax.naming.OperationNotSupportedException if schema not
@@ -1334,7 +1334,7 @@ public abstract class BaseDirContext implements DirContext {
 
     /**
      * Retrieves the schema associated with the named object.
-     * 
+     *
      * @param name the name of the object whose schema is to be retrieved
      * @return the schema associated with the context; never null
      * @exception javax.naming.OperationNotSupportedException if schema not
@@ -1347,12 +1347,12 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Retrieves a context containing the schema objects of the named 
+     * Retrieves a context containing the schema objects of the named
      * object's class definitions.
-     * 
-     * @param name the name of the object whose object class definition is to 
+     *
+     * @param name the name of the object whose object class definition is to
      * be retrieved
-     * @return the DirContext containing the named object's class 
+     * @return the DirContext containing the named object's class
      * definitions; never null
      * @exception javax.naming.OperationNotSupportedException if schema not
      * supported
@@ -1366,12 +1366,12 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Retrieves a context containing the schema objects of the named 
+     * Retrieves a context containing the schema objects of the named
      * object's class definitions.
-     * 
-     * @param name the name of the object whose object class definition is to 
+     *
+     * @param name the name of the object whose object class definition is to
      * be retrieved
-     * @return the DirContext containing the named object's class 
+     * @return the DirContext containing the named object's class
      * definitions; never null
      * @exception javax.naming.OperationNotSupportedException if schema not
      * supported
@@ -1383,19 +1383,19 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Searches in a single context for objects that contain a specified set 
-     * of attributes, and retrieves selected attributes. The search is 
+     * Searches in a single context for objects that contain a specified set
+     * of attributes, and retrieves selected attributes. The search is
      * performed using the default SearchControls settings.
-     * 
+     *
      * @param name the name of the context to search
-     * @param matchingAttributes the attributes to search for. If empty or 
+     * @param matchingAttributes the attributes to search for. If empty or
      * null, all objects in the target context are returned.
-     * @param attributesToReturn the attributes to return. null indicates 
-     * that all attributes are to be returned; an empty array indicates that 
+     * @param attributesToReturn the attributes to return. null indicates
+     * that all attributes are to be returned; an empty array indicates that
      * none are to be returned.
-     * @return a non-null enumeration of SearchResult objects. Each 
-     * SearchResult contains the attributes identified by attributesToReturn 
-     * and the name of the corresponding object, named relative to the 
+     * @return a non-null enumeration of SearchResult objects. Each
+     * SearchResult contains the attributes identified by attributesToReturn
+     * and the name of the corresponding object, named relative to the
      * context named by name.
      * @exception NamingException if a naming exception is encountered
      */
@@ -1408,18 +1408,18 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Searches in a single context for objects that contain a specified set 
+     * Searches in a single context for objects that contain a specified set
      * of attributes, and retrieves selected attributes.
-     * 
+     *
      * @param name the name of the context to search
-     * @param matchingAttributes the attributes to search for. If empty or 
+     * @param matchingAttributes the attributes to search for. If empty or
      * null, all objects in the target context are returned.
-     * @param attributesToReturn the attributes to return. null indicates 
-     * that all attributes are to be returned; an empty array indicates that 
+     * @param attributesToReturn the attributes to return. null indicates
+     * that all attributes are to be returned; an empty array indicates that
      * none are to be returned.
-     * @return a non-null enumeration of SearchResult objects. Each 
-     * SearchResult contains the attributes identified by attributesToReturn 
-     * and the name of the corresponding object, named relative to the 
+     * @return a non-null enumeration of SearchResult objects. Each
+     * SearchResult contains the attributes identified by attributesToReturn
+     * and the name of the corresponding object, named relative to the
      * context named by name.
      * @exception NamingException if a naming exception is encountered
      */
@@ -1431,17 +1431,17 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Searches in a single context for objects that contain a specified set 
-     * of attributes. This method returns all the attributes of such objects. 
-     * It is equivalent to supplying null as the atributesToReturn parameter 
+     * Searches in a single context for objects that contain a specified set
+     * of attributes. This method returns all the attributes of such objects.
+     * It is equivalent to supplying null as the atributesToReturn parameter
      * to the method search(Name, Attributes, String[]).
-     * 
+     *
      * @param name the name of the context to search
-     * @param matchingAttributes the attributes to search for. If empty or 
+     * @param matchingAttributes the attributes to search for. If empty or
      * null, all objects in the target context are returned.
-     * @return a non-null enumeration of SearchResult objects. Each 
-     * SearchResult contains the attributes identified by attributesToReturn 
-     * and the name of the corresponding object, named relative to the 
+     * @return a non-null enumeration of SearchResult objects. Each
+     * SearchResult contains the attributes identified by attributesToReturn
+     * and the name of the corresponding object, named relative to the
      * context named by name.
      * @exception NamingException if a naming exception is encountered
      */
@@ -1453,15 +1453,15 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Searches in a single context for objects that contain a specified set 
+     * Searches in a single context for objects that contain a specified set
      * of attributes.
-     * 
+     *
      * @param name the name of the context to search
-     * @param matchingAttributes the attributes to search for. If empty or 
+     * @param matchingAttributes the attributes to search for. If empty or
      * null, all objects in the target context are returned.
-     * @return a non-null enumeration of SearchResult objects. Each 
-     * SearchResult contains the attributes identified by attributesToReturn 
-     * and the name of the corresponding object, named relative to the 
+     * @return a non-null enumeration of SearchResult objects. Each
+     * SearchResult contains the attributes identified by attributesToReturn
+     * and the name of the corresponding object, named relative to the
      * context named by name.
      * @exception NamingException if a naming exception is encountered
      */
@@ -1472,17 +1472,17 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Searches in the named context or object for entries that satisfy the 
-     * given search filter. Performs the search as specified by the search 
+     * Searches in the named context or object for entries that satisfy the
+     * given search filter. Performs the search as specified by the search
      * controls.
-     * 
+     *
      * @param name the name of the context or object to search
-     * @param filter the filter expression to use for the search; may not be 
+     * @param filter the filter expression to use for the search; may not be
      * null
-     * @param cons the search controls that control the search. If null, 
-     * the default search controls are used (equivalent to 
+     * @param cons the search controls that control the search. If null,
+     * the default search controls are used (equivalent to
      * (new SearchControls())).
-     * @return an enumeration of SearchResults of the objects that satisfy 
+     * @return an enumeration of SearchResults of the objects that satisfy
      * the filter; never null
      * @exception javax.naming.directory.InvalidSearchFilterException if the
      * search filter specified is not supported or understood by the underlying
@@ -1500,17 +1500,17 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Searches in the named context or object for entries that satisfy the 
-     * given search filter. Performs the search as specified by the search 
+     * Searches in the named context or object for entries that satisfy the
+     * given search filter. Performs the search as specified by the search
      * controls.
-     * 
+     *
      * @param name the name of the context or object to search
-     * @param filter the filter expression to use for the search; may not be 
+     * @param filter the filter expression to use for the search; may not be
      * null
-     * @param cons the search controls that control the search. If null, 
-     * the default search controls are used (equivalent to 
+     * @param cons the search controls that control the search. If null,
+     * the default search controls are used (equivalent to
      * (new SearchControls())).
-     * @return an enumeration of SearchResults of the objects that satisfy 
+     * @return an enumeration of SearchResults of the objects that satisfy
      * the filter; never null
      * @exception javax.naming.directory.InvalidSearchFilterException if the
      * search filter specified is not supported or understood by the underlying
@@ -1526,22 +1526,22 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Searches in the named context or object for entries that satisfy the 
-     * given search filter. Performs the search as specified by the search 
+     * Searches in the named context or object for entries that satisfy the
+     * given search filter. Performs the search as specified by the search
      * controls.
-     * 
+     *
      * @param name the name of the context or object to search
-     * @param filterExpr the filter expression to use for the search. 
-     * The expression may contain variables of the form "{i}" where i is a 
+     * @param filterExpr the filter expression to use for the search.
+     * The expression may contain variables of the form "{i}" where i is a
      * nonnegative integer. May not be null.
-     * @param filterArgs the array of arguments to substitute for the 
-     * variables in filterExpr. The value of filterArgs[i] will replace each 
+     * @param filterArgs the array of arguments to substitute for the
+     * variables in filterExpr. The value of filterArgs[i] will replace each
      * occurrence of "{i}". If null, equivalent to an empty array.
-     * @param cons the search controls that control the search. If null, the 
+     * @param cons the search controls that control the search. If null, the
      * default search controls are used (equivalent to (new SearchControls())).
-     * @return an enumeration of SearchResults of the objects that satisy the 
+     * @return an enumeration of SearchResults of the objects that satisy the
      * filter; never null
-     * @exception ArrayIndexOutOfBoundsException if filterExpr contains {i} 
+     * @exception ArrayIndexOutOfBoundsException if filterExpr contains {i}
      * expressions where i is outside the bounds of the array filterArgs
      * @exception javax.naming.directory.InvalidSearchControlsException if the
      * search controls contain invalid settings
@@ -1550,7 +1550,7 @@ public abstract class BaseDirContext implements DirContext {
      * @exception NamingException if a naming exception is encountered
      */
     @Override
-    public NamingEnumeration<SearchResult> search(Name name, String filterExpr, 
+    public NamingEnumeration<SearchResult> search(Name name, String filterExpr,
                                     Object[] filterArgs, SearchControls cons)
         throws NamingException {
         return search(name.toString(), filterExpr, filterArgs, cons);
@@ -1558,22 +1558,22 @@ public abstract class BaseDirContext implements DirContext {
 
 
     /**
-     * Searches in the named context or object for entries that satisfy the 
-     * given search filter. Performs the search as specified by the search 
+     * Searches in the named context or object for entries that satisfy the
+     * given search filter. Performs the search as specified by the search
      * controls.
-     * 
+     *
      * @param name the name of the context or object to search
-     * @param filterExpr the filter expression to use for the search. 
-     * The expression may contain variables of the form "{i}" where i is a 
+     * @param filterExpr the filter expression to use for the search.
+     * The expression may contain variables of the form "{i}" where i is a
      * nonnegative integer. May not be null.
-     * @param filterArgs the array of arguments to substitute for the 
-     * variables in filterExpr. The value of filterArgs[i] will replace each 
+     * @param filterArgs the array of arguments to substitute for the
+     * variables in filterExpr. The value of filterArgs[i] will replace each
      * occurrence of "{i}". If null, equivalent to an empty array.
-     * @param cons the search controls that control the search. If null, the 
+     * @param cons the search controls that control the search. If null, the
      * default search controls are used (equivalent to (new SearchControls())).
-     * @return an enumeration of SearchResults of the objects that satisfy the 
+     * @return an enumeration of SearchResults of the objects that satisfy the
      * filter; never null
-     * @exception ArrayIndexOutOfBoundsException if filterExpr contains {i} 
+     * @exception ArrayIndexOutOfBoundsException if filterExpr contains {i}
      * expressions where i is outside the bounds of the array filterArgs
      * @exception javax.naming.directory.InvalidSearchControlsException if the
      * search controls contain invalid settings
@@ -1583,7 +1583,7 @@ public abstract class BaseDirContext implements DirContext {
      */
     @Override
     public abstract NamingEnumeration<SearchResult> search
-        (String name, String filterExpr, 
+        (String name, String filterExpr,
          Object[] filterArgs, SearchControls cons)
         throws NamingException;
 
@@ -1603,9 +1603,9 @@ public abstract class BaseDirContext implements DirContext {
     // -------------------------------------------------------- Private Methods
     private AliasResult findAlias(String name) {
         AliasResult result = new AliasResult();
-        
+
         String searchName = name;
-        
+
         result.dirContext = aliases.get(searchName);
         while (result.dirContext == null) {
             int slash = searchName.lastIndexOf('/');
@@ -1614,10 +1614,10 @@ public abstract class BaseDirContext implements DirContext {
             searchName = searchName.substring(0, slash);
             result.dirContext = aliases.get(searchName);
         }
-        
+
         if (result.dirContext != null)
             result.aliasName = name.substring(searchName.length());
-        
+
         return result;
     }
 

==================================================
Constants.java
index 6fe10c59ce..0b1226c17c 100644
--- a/java/org/apache/naming/resources/CacheEntry.java
+++ b/java/org/apache/naming/resources/CacheEntry.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 package org.apache.naming.resources;
 
@@ -21,13 +21,13 @@ import javax.naming.directory.DirContext;
 
 /**
  * Implements a cache entry.
- * 
+ *
  * @author <a href="mailto:remm@apache.org">Remy Maucherat</a>
  * @version $Revision$
  */
 public class CacheEntry {
-    
-    
+
+
     // ------------------------------------------------- Instance Variables
 
 

==================================================
DirContextURLConnection.java
index 757f19dab6..0deff58f41 100644
--- a/java/org/apache/naming/resources/Constants.java
+++ b/java/org/apache/naming/resources/Constants.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming.resources;
@@ -25,7 +25,7 @@ package org.apache.naming.resources;
 
 public final class Constants {
 
-    public static final String PROTOCOL_HANDLER_VARIABLE = 
+    public static final String PROTOCOL_HANDLER_VARIABLE =
         "java.protocol.handler.pkgs";
 
     public static final String Package = "org.apache.naming.resources";

==================================================
DirContextURLStreamHandler.java
index 3bbff1c459..489d7fb44d 100644
--- a/java/org/apache/naming/resources/DirContextURLConnection.java
+++ b/java/org/apache/naming/resources/DirContextURLConnection.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 package org.apache.naming.resources;
 
@@ -47,21 +47,21 @@ import org.apache.tomcat.util.http.FastHttpDateFormat;
 /**
  * Connection to a JNDI directory context.
  * <p/>
- * Note: All the object attribute names are the WebDAV names, not the HTTP 
+ * Note: All the object attribute names are the WebDAV names, not the HTTP
  * names, so this class overrides some methods from URLConnection to do the
- * queries using the right names. Content handler is also not used; the 
+ * queries using the right names. Content handler is also not used; the
  * content is directly returned.
- * 
+ *
  * @author <a href="mailto:remm@apache.org">Remy Maucherat</a>
  * @version $Revision$
  */
-public class DirContextURLConnection 
+public class DirContextURLConnection
     extends URLConnection {
-    
-    
+
+
     // ----------------------------------------------------------- Constructors
-    
-    
+
+
     public DirContextURLConnection(DirContext context, URL url) {
         super(url);
         if (context == null)
@@ -72,47 +72,47 @@ public class DirContextURLConnection
     }
         this.context = context;
     }
-    
-    
+
+
     // ----------------------------------------------------- Instance Variables
-    
-    
+
+
     /**
      * Directory context.
      */
     protected DirContext context;
-    
-    
+
+
     /**
      * Associated resource.
      */
     protected Resource resource;
-    
-    
+
+
     /**
      * Associated DirContext.
      */
     protected DirContext collection;
-    
-    
+
+
     /**
      * Other unknown object.
      */
     protected Object object;
-    
-    
+
+
     /**
      * Attributes.
      */
     protected Attributes attributes;
-    
-    
+
+
     /**
      * Date.
      */
     protected long date;
-    
-    
+
+
     /**
      * Permission
      */
@@ -120,26 +120,26 @@ public class DirContextURLConnection
 
 
     // ------------------------------------------------------------- Properties
-    
-    
+
+
     /**
      * Connect to the DirContext, and retrieve the bound object, as well as
      * its attributes. If no object is bound with the name specified in the
      * URL, then an IOException is thrown.
-     * 
+     *
      * @throws IOException Object not found
      */
     @Override
     public void connect()
         throws IOException {
-        
+
         if (!connected) {
-            
+
             try {
                 date = System.currentTimeMillis();
                 String path = getURL().getFile();
                 if (context instanceof ProxyDirContext) {
-                    ProxyDirContext proxyDirContext = 
+                    ProxyDirContext proxyDirContext =
                         (ProxyDirContext) context;
                     String hostName = proxyDirContext.getHostName();
                     String contextPath = proxyDirContext.getContextPath();
@@ -165,14 +165,14 @@ public class DirContextURLConnection
             } catch (NamingException e) {
                 // Object not found
             }
-            
+
             connected = true;
-            
+
         }
-        
+
     }
-    
-    
+
+
     /**
      * Return the content length value.
      */
@@ -180,8 +180,8 @@ public class DirContextURLConnection
     public int getContentLength() {
         return getHeaderFieldInt(ResourceAttributes.CONTENT_LENGTH, -1);
     }
-    
-    
+
+
     /**
      * Return the content type value.
      */
@@ -189,8 +189,8 @@ public class DirContextURLConnection
     public String getContentType() {
         return getHeaderField(ResourceAttributes.CONTENT_TYPE);
     }
-    
-    
+
+
     /**
      * Return the last modified date.
      */
@@ -198,8 +198,8 @@ public class DirContextURLConnection
     public long getDate() {
         return date;
     }
-    
-    
+
+
     /**
      * Return the last modified date.
      */
@@ -218,7 +218,7 @@ public class DirContextURLConnection
         if (attributes == null)
             return 0;
 
-        Attribute lastModified = 
+        Attribute lastModified =
             attributes.get(ResourceAttributes.LAST_MODIFIED);
         if (lastModified != null) {
             try {
@@ -231,7 +231,7 @@ public class DirContextURLConnection
 
         return 0;
     }
-    
+
 
     protected String getHeaderValueAsString(Object headerValue) {
         if (headerValue == null) return null;
@@ -288,8 +288,8 @@ public class DirContextURLConnection
       return Collections.unmodifiableMap(headerFields);
 
     }
-    
-    
+
+
     /**
      * Returns the name of the specified header field.
      */
@@ -304,7 +304,7 @@ public class DirContextURLConnection
                 // Ignore
             }
         }
-        
+
         if (attributes == null)
             return (null);
 
@@ -324,33 +324,33 @@ public class DirContextURLConnection
         }
 
         return (null);
-        
+
     }
-    
-    
+
+
     /**
      * Get object content.
      */
     @Override
     public Object getContent()
         throws IOException {
-        
+
         if (!connected)
             connect();
-        
+
         if (resource != null)
             return getInputStream();
         if (collection != null)
             return collection;
         if (object != null)
             return object;
-        
+
         throw new FileNotFoundException(
                 getURL() == null ? "null" : getURL().toString());
-        
+
     }
-    
-    
+
+
     /**
      * Get object content.
      */
@@ -358,29 +358,29 @@ public class DirContextURLConnection
     @Override
     public Object getContent(Class[] classes)
         throws IOException {
-        
+
         Object obj = getContent();
-        
+
         for (int i = 0; i < classes.length; i++) {
             if (classes[i].isInstance(obj))
                 return obj;
         }
-        
+
         return null;
-        
+
     }
-    
-    
+
+
     /**
      * Get input stream.
      */
     @Override
-    public InputStream getInputStream() 
+    public InputStream getInputStream()
         throws IOException {
-        
+
         if (!connected)
             connect();
-        
+
         if (resource == null) {
             throw new FileNotFoundException(
                     getURL() == null ? "null" : getURL().toString());
@@ -393,12 +393,12 @@ public class DirContextURLConnection
         } catch (NamingException e) {
             // Ignore
         }
-        
+
         return (resource.streamContent());
-        
+
     }
-    
-    
+
+
     /**
      * Get the Permission for this URL
      */
@@ -410,26 +410,26 @@ public class DirContextURLConnection
 
 
     // --------------------------------------------------------- Public Methods
-    
-    
+
+
     /**
      * List children of this collection. The names given are relative to this
      * URI's path. The full uri of the children is then : path + "/" + name.
      */
     public Enumeration<String> list()
         throws IOException {
-        
+
         if (!connected) {
             connect();
         }
-        
+
         if ((resource == null) && (collection == null)) {
             throw new FileNotFoundException(
                     getURL() == null ? "null" : getURL().toString());
         }
-        
+
         Vector<String> result = new Vector<String>();
-        
+
         if (collection != null) {
             try {
                 String file = getURL().getFile();
@@ -450,7 +450,7 @@ public class DirContextURLConnection
                 } else {
                     start = file.indexOf('/', file.indexOf('/', 1) + 1);
                 }
-                
+
                 NamingEnumeration<NameClassPair> enumeration =
                     context.list(file.substring(start));
                 while (enumeration.hasMoreElements()) {
@@ -464,10 +464,10 @@ public class DirContextURLConnection
                         getURL() == null ? "null" : getURL().toString());
             }
         }
-        
+
         return result.elements();
-        
+
     }
-    
-    
+
+
 }

==================================================
DirContextURLStreamHandlerFactory.java
index a97b42217a..e7a8f4803c 100644
--- a/java/org/apache/naming/resources/DirContextURLStreamHandler.java
+++ b/java/org/apache/naming/resources/DirContextURLStreamHandler.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 package org.apache.naming.resources;
 
@@ -27,75 +27,75 @@ import javax.naming.directory.DirContext;
 
 /**
  * Stream handler to a JNDI directory context.
- * 
+ *
  * @author <a href="mailto:remm@apache.org">Remy Maucherat</a>
  * @version $Revision$
  */
 public class DirContextURLStreamHandler extends URLStreamHandler {
-    
-    
+
+
     // ----------------------------------------------------------- Constructors
-    
-    
+
+
     public DirContextURLStreamHandler() {
         // NOOP
     }
-    
-    
+
+
     public DirContextURLStreamHandler(DirContext context) {
         this.context = context;
     }
-    
-    
+
+
     // -------------------------------------------------------------- Variables
-    
-    
+
+
     /**
      * Bindings class loader - directory context. Keyed by CL id.
      */
     private static Hashtable<ClassLoader,DirContext> clBindings =
         new Hashtable<ClassLoader,DirContext>();
-    
-    
+
+
     /**
      * Bindings thread - directory context. Keyed by thread id.
      */
     private static Hashtable<Thread,DirContext> threadBindings =
         new Hashtable<Thread,DirContext>();
-    
-    
+
+
     // ----------------------------------------------------- Instance Variables
-    
-    
+
+
     /**
      * Directory context.
      */
     protected DirContext context = null;
-    
-    
+
+
     // ------------------------------------------------------------- Properties
-    
-    
+
+
     // ----------------------------------------------- URLStreamHandler Methods
-    
-    
+
+
     /**
-     * Opens a connection to the object referenced by the <code>URL</code> 
+     * Opens a connection to the object referenced by the <code>URL</code>
      * argument.
      */
     @Override
-    protected URLConnection openConnection(URL u) 
+    protected URLConnection openConnection(URL u)
         throws IOException {
         DirContext currentContext = this.context;
         if (currentContext == null)
             currentContext = get();
         return new DirContextURLConnection(currentContext, u);
     }
-    
-    
+
+
     // ------------------------------------------------------------ URL Methods
-    
-    
+
+
     /**
      * Override as part of the fix for 36534, to ensure toString is correct.
      */
@@ -109,7 +109,7 @@ public class DirContextURLStreamHandler extends URLStreamHandler {
         if (u.getQuery() != null) {
             len += 1 + u.getQuery().length();
         }
-        if (u.getRef() != null) 
+        if (u.getRef() != null)
             len += 1 + u.getRef().length();
         StringBuilder result = new StringBuilder(len);
         result.append(u.getProtocol());
@@ -130,8 +130,8 @@ public class DirContextURLStreamHandler extends URLStreamHandler {
 
 
     // --------------------------------------------------------- Public Methods
-    
-    
+
+
     /**
      * Set the java.protocol.handler.pkgs system property. For use when
      * embedding Tomcat and the embedding application has already set its own
@@ -147,10 +147,10 @@ public class DirContextURLStreamHandler extends URLStreamHandler {
             System.setProperty(Constants.PROTOCOL_HANDLER_VARIABLE, value);
         }
     }
-    
-    
+
+
     /**
-     * Returns true if the thread or the context class loader of the current 
+     * Returns true if the thread or the context class loader of the current
      * thread is bound.
      */
     public static boolean isBound() {
@@ -158,46 +158,46 @@ public class DirContextURLStreamHandler extends URLStreamHandler {
                 (Thread.currentThread().getContextClassLoader()))
             || (threadBindings.containsKey(Thread.currentThread()));
     }
-    
-    
+
+
     /**
      * Binds a directory context to a class loader.
      */
     public static void bind(DirContext dirContext) {
-        ClassLoader currentCL = 
+        ClassLoader currentCL =
             Thread.currentThread().getContextClassLoader();
         if (currentCL != null)
             clBindings.put(currentCL, dirContext);
     }
-    
-    
+
+
     /**
      * Unbinds a directory context to a class loader.
      */
     public static void unbind() {
-        ClassLoader currentCL = 
+        ClassLoader currentCL =
             Thread.currentThread().getContextClassLoader();
         if (currentCL != null)
             clBindings.remove(currentCL);
     }
-    
-    
+
+
     /**
      * Binds a directory context to a thread.
      */
     public static void bindThread(DirContext dirContext) {
         threadBindings.put(Thread.currentThread(), dirContext);
     }
-    
-    
+
+
     /**
      * Unbinds a directory context to a thread.
      */
     public static void unbindThread() {
         threadBindings.remove(Thread.currentThread());
     }
-    
-    
+
+
     /**
      * Get the bound context.
      */
@@ -231,38 +231,38 @@ public class DirContextURLStreamHandler extends URLStreamHandler {
         return result;
 
     }
-    
-    
+
+
     /**
      * Binds a directory context to a class loader.
      */
     public static void bind(ClassLoader cl, DirContext dirContext) {
         clBindings.put(cl, dirContext);
     }
-    
-    
+
+
     /**
      * Unbinds a directory context to a class loader.
      */
     public static void unbind(ClassLoader cl) {
         clBindings.remove(cl);
     }
-    
-    
+
+
     /**
      * Get the bound context.
      */
     public static DirContext get(ClassLoader cl) {
         return clBindings.get(cl);
     }
-    
-    
+
+
     /**
      * Get the bound context.
      */
     public static DirContext get(Thread thread) {
         return threadBindings.get(thread);
     }
-    
-    
+
+
 }

==================================================
FileDirContext.java
index 8886a8e005..4e42f8798d 100644
--- a/java/org/apache/naming/resources/DirContextURLStreamHandlerFactory.java
+++ b/java/org/apache/naming/resources/DirContextURLStreamHandlerFactory.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 package org.apache.naming.resources;
 
@@ -25,13 +25,13 @@ import java.util.concurrent.CopyOnWriteArrayList;
 /**
  * Factory for Stream handlers to a JNDI directory context that also supports
  * users specifying additional stream handler.
- * 
+ *
  * @author <a href="mailto:remm@apache.org">Remy Maucherat</a>
  * @version $Revision$
  */
 public class DirContextURLStreamHandlerFactory
         implements URLStreamHandlerFactory {
-    
+
     // Singleton
     private static DirContextURLStreamHandlerFactory instance =
         new DirContextURLStreamHandlerFactory();
@@ -51,14 +51,14 @@ public class DirContextURLStreamHandlerFactory
     private DirContextURLStreamHandlerFactory() {
         // Hide the default constructor
     }
-    
-    
+
+
     /**
      * Creates a new URLStreamHandler instance with the specified protocol.
      * Will return null if the protocol is not <code>jndi</code>.
-     * 
+     *
      * @param protocol the protocol (must be "jndi" here)
-     * @return a URLStreamHandler for the jndi protocol, or null if the 
+     * @return a URLStreamHandler for the jndi protocol, or null if the
      * protocol is not JNDI
      */
     @Override
@@ -76,6 +76,6 @@ public class DirContextURLStreamHandlerFactory
             return null;
         }
     }
-    
-    
+
+
 }

==================================================
ImmutableNameNotFoundException.java
index 6201c17c92..8447654668 100644
--- a/java/org/apache/naming/resources/FileDirContext.java
+++ b/java/org/apache/naming/resources/FileDirContext.java
@@ -327,7 +327,7 @@ public class FileDirContext extends BaseDirContext {
 
         if (file == null)
             return null;
-        
+
         return list(file);
 
     }
@@ -799,7 +799,7 @@ public class FileDirContext extends BaseDirContext {
 
             if (allowLinking)
                 return file;
-            
+
             // Check that this file belongs to our root path
             String canPath = null;
             try {
@@ -1083,10 +1083,10 @@ public class FileDirContext extends BaseDirContext {
             return super.getResourceType();
         }
 
-        
+
         /**
          * Get canonical path.
-         * 
+         *
          * @return String the file's canonical path
          */
         @Override
@@ -1100,7 +1100,7 @@ public class FileDirContext extends BaseDirContext {
             }
             return canonicalPath;
         }
-        
+
 
     }
 

==================================================
ProxyDirContext.java
index ceec12cce8..0b7a723fb2 100644
--- a/java/org/apache/naming/resources/ImmutableNameNotFoundException.java
+++ b/java/org/apache/naming/resources/ImmutableNameNotFoundException.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 package org.apache.naming.resources;
 
@@ -24,7 +24,7 @@ import javax.naming.NameNotFoundException;
  * Immutable exception to avoid useless object creation by the proxy context.
  * This should be used only by the proxy context. Actual contexts should return
  * properly populated exceptions.
- * 
+ *
  * @author <a href="mailto:remm@apache.org">Remy Maucherat</a>
  * @version $Revision$
  */
@@ -32,7 +32,7 @@ public class ImmutableNameNotFoundException
     extends NameNotFoundException {
 
     private static final long serialVersionUID = 1L;
-    
+
     @Override
     public void appendRemainingComponent(String name) {/*NOOP*/}
     @Override

==================================================
RecyclableNamingEnumeration.java
index 79b9605524..c484b4c9a1 100644
--- a/java/org/apache/naming/resources/ProxyDirContext.java
+++ b/java/org/apache/naming/resources/ProxyDirContext.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming.resources;
@@ -80,7 +80,7 @@ public class ProxyDirContext implements DirContext {
             BaseDirContext baseDirContext = (BaseDirContext) dirContext;
             if (baseDirContext.isCached()) {
                 try {
-                    cache = (ResourceCache) 
+                    cache = (ResourceCache)
                         Class.forName(cacheClassName).newInstance();
                 } catch (Exception e) {
                     throw new IllegalArgumentException(sm.getString(
@@ -162,7 +162,7 @@ public class ProxyDirContext implements DirContext {
     /**
      * Cache class.
      */
-    protected String cacheClassName = 
+    protected String cacheClassName =
         "org.apache.naming.resources.ResourceCache";
 
 
@@ -248,11 +248,11 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Retrieves the named object. If name is empty, returns a new instance 
-     * of this context (which represents the same naming context as this 
-     * context, but its environment may be modified independently and it may 
+     * Retrieves the named object. If name is empty, returns a new instance
+     * of this context (which represents the same naming context as this
+     * context, but its environment may be modified independently and it may
      * be accessed concurrently).
-     * 
+     *
      * @param name the name of the object to look up
      * @return the object bound to name
      * @exception NamingException if a naming exception is encountered
@@ -282,7 +282,7 @@ public class ProxyDirContext implements DirContext {
 
     /**
      * Retrieves the named object.
-     * 
+     *
      * @param name the name of the object to look up
      * @return the object bound to name
      * @exception NamingException if a naming exception is encountered
@@ -316,10 +316,10 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Binds a name to an object. All intermediate contexts and the target 
-     * context (that named by all but terminal atomic component of the name) 
+     * Binds a name to an object. All intermediate contexts and the target
+     * context (that named by all but terminal atomic component of the name)
      * must already exist.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @exception javax.naming.NameAlreadyBoundException if name is already
@@ -338,7 +338,7 @@ public class ProxyDirContext implements DirContext {
 
     /**
      * Binds a name to an object.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @exception javax.naming.NameAlreadyBoundException if name is already
@@ -356,14 +356,14 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Binds a name to an object, overwriting any existing binding. All 
-     * intermediate contexts and the target context (that named by all but 
+     * Binds a name to an object, overwriting any existing binding. All
+     * intermediate contexts and the target context (that named by all but
      * terminal atomic component of the name) must already exist.
      * <p>
-     * If the object is a DirContext, any existing attributes associated with 
-     * the name are replaced with those of the object. Otherwise, any 
+     * If the object is a DirContext, any existing attributes associated with
+     * the name are replaced with those of the object. Otherwise, any
      * existing attributes associated with the name remain unchanged.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @exception javax.naming.directory.InvalidAttributesException if object
@@ -380,7 +380,7 @@ public class ProxyDirContext implements DirContext {
 
     /**
      * Binds a name to an object, overwriting any existing binding.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @exception javax.naming.directory.InvalidAttributesException if object
@@ -396,16 +396,16 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Unbinds the named object. Removes the terminal atomic name in name 
-     * from the target context--that named by all but the terminal atomic 
+     * Unbinds the named object. Removes the terminal atomic name in name
+     * from the target context--that named by all but the terminal atomic
      * part of name.
      * <p>
-     * This method is idempotent. It succeeds even if the terminal atomic 
-     * name is not bound in the target context, but throws 
-     * NameNotFoundException if any of the intermediate contexts do not exist. 
-     * 
+     * This method is idempotent. It succeeds even if the terminal atomic
+     * name is not bound in the target context, but throws
+     * NameNotFoundException if any of the intermediate contexts do not exist.
+     *
      * @param name the name to bind; may not be empty
-     * @exception NameNotFoundException if an intermediate context does not 
+     * @exception NameNotFoundException if an intermediate context does not
      * exist
      * @exception NamingException if a naming exception is encountered
      */
@@ -419,9 +419,9 @@ public class ProxyDirContext implements DirContext {
 
     /**
      * Unbinds the named object.
-     * 
+     *
      * @param name the name to bind; may not be empty
-     * @exception NameNotFoundException if an intermediate context does not 
+     * @exception NameNotFoundException if an intermediate context does not
      * exist
      * @exception NamingException if a naming exception is encountered
      */
@@ -434,11 +434,11 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Binds a new name to the object bound to an old name, and unbinds the 
-     * old name. Both names are relative to this context. Any attributes 
-     * associated with the old name become associated with the new name. 
+     * Binds a new name to the object bound to an old name, and unbinds the
+     * old name. Both names are relative to this context. Any attributes
+     * associated with the old name become associated with the new name.
      * Intermediate contexts of the old name are not changed.
-     * 
+     *
      * @param oldName the name of the existing binding; may not be empty
      * @param newName the name of the new binding; may not be empty
      * @exception javax.naming.NameAlreadyBoundException if name is already
@@ -454,9 +454,9 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Binds a new name to the object bound to an old name, and unbinds the 
+     * Binds a new name to the object bound to an old name, and unbinds the
      * old name.
-     * 
+     *
      * @param oldName the name of the existing binding; may not be empty
      * @param newName the name of the new binding; may not be empty
      * @exception javax.naming.NameAlreadyBoundException if name is already
@@ -472,15 +472,15 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Enumerates the names bound in the named context, along with the class 
-     * names of objects bound to them. The contents of any subcontexts are 
+     * Enumerates the names bound in the named context, along with the class
+     * names of objects bound to them. The contents of any subcontexts are
      * not included.
      * <p>
-     * If a binding is added to or removed from this context, its effect on 
+     * If a binding is added to or removed from this context, its effect on
      * an enumeration previously returned is undefined.
-     * 
+     *
      * @param name the name of the context to list
-     * @return an enumeration of the names and class names of the bindings in 
+     * @return an enumeration of the names and class names of the bindings in
      * this context. Each element of the enumeration is of type NameClassPair.
      * @exception NamingException if a naming exception is encountered
      */
@@ -492,11 +492,11 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Enumerates the names bound in the named context, along with the class 
+     * Enumerates the names bound in the named context, along with the class
      * names of objects bound to them.
-     * 
+     *
      * @param name the name of the context to list
-     * @return an enumeration of the names and class names of the bindings in 
+     * @return an enumeration of the names and class names of the bindings in
      * this context. Each element of the enumeration is of type NameClassPair.
      * @exception NamingException if a naming exception is encountered
      */
@@ -508,15 +508,15 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Enumerates the names bound in the named context, along with the 
-     * objects bound to them. The contents of any subcontexts are not 
+     * Enumerates the names bound in the named context, along with the
+     * objects bound to them. The contents of any subcontexts are not
      * included.
      * <p>
-     * If a binding is added to or removed from this context, its effect on 
+     * If a binding is added to or removed from this context, its effect on
      * an enumeration previously returned is undefined.
-     * 
+     *
      * @param name the name of the context to list
-     * @return an enumeration of the bindings in this context. 
+     * @return an enumeration of the bindings in this context.
      * Each element of the enumeration is of type Binding.
      * @exception NamingException if a naming exception is encountered
      */
@@ -528,11 +528,11 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Enumerates the names bound in the named context, along with the 
+     * Enumerates the names bound in the named context, along with the
      * objects bound to them.
-     * 
+     *
      * @param name the name of the context to list
-     * @return an enumeration of the bindings in this context. 
+     * @return an enumeration of the bindings in this context.
      * Each element of the enumeration is of type Binding.
      * @exception NamingException if a naming exception is encountered
      */
@@ -544,26 +544,26 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Destroys the named context and removes it from the namespace. Any 
-     * attributes associated with the name are also removed. Intermediate 
+     * Destroys the named context and removes it from the namespace. Any
+     * attributes associated with the name are also removed. Intermediate
      * contexts are not destroyed.
      * <p>
-     * This method is idempotent. It succeeds even if the terminal atomic 
-     * name is not bound in the target context, but throws 
-     * NameNotFoundException if any of the intermediate contexts do not exist. 
-     * 
-     * In a federated naming system, a context from one naming system may be 
-     * bound to a name in another. One can subsequently look up and perform 
-     * operations on the foreign context using a composite name. However, an 
-     * attempt destroy the context using this composite name will fail with 
-     * NotContextException, because the foreign context is not a "subcontext" 
-     * of the context in which it is bound. Instead, use unbind() to remove 
-     * the binding of the foreign context. Destroying the foreign context 
-     * requires that the destroySubcontext() be performed on a context from 
+     * This method is idempotent. It succeeds even if the terminal atomic
+     * name is not bound in the target context, but throws
+     * NameNotFoundException if any of the intermediate contexts do not exist.
+     *
+     * In a federated naming system, a context from one naming system may be
+     * bound to a name in another. One can subsequently look up and perform
+     * operations on the foreign context using a composite name. However, an
+     * attempt destroy the context using this composite name will fail with
+     * NotContextException, because the foreign context is not a "subcontext"
+     * of the context in which it is bound. Instead, use unbind() to remove
+     * the binding of the foreign context. Destroying the foreign context
+     * requires that the destroySubcontext() be performed on a context from
      * the foreign context's "native" naming system.
-     * 
+     *
      * @param name the name of the context to be destroyed; may not be empty
-     * @exception NameNotFoundException if an intermediate context does not 
+     * @exception NameNotFoundException if an intermediate context does not
      * exist
      * @exception javax.naming.NotContextException if the name is bound but does
      * not name a context, or does not name a context of the appropriate type
@@ -578,9 +578,9 @@ public class ProxyDirContext implements DirContext {
 
     /**
      * Destroys the named context and removes it from the namespace.
-     * 
+     *
      * @param name the name of the context to be destroyed; may not be empty
-     * @exception NameNotFoundException if an intermediate context does not 
+     * @exception NameNotFoundException if an intermediate context does not
      * exist
      * @exception javax.naming.NotContextException if the name is bound but does
      * not name a context, or does not name a context of the appropriate type
@@ -594,11 +594,11 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Creates and binds a new context. Creates a new context with the given 
-     * name and binds it in the target context (that named by all but 
-     * terminal atomic component of the name). All intermediate contexts and 
+     * Creates and binds a new context. Creates a new context with the given
+     * name and binds it in the target context (that named by all but
+     * terminal atomic component of the name). All intermediate contexts and
      * the target context must already exist.
-     * 
+     *
      * @param name the name of the context to create; may not be empty
      * @return the newly created context
      * @exception javax.naming.NameAlreadyBoundException if name is already
@@ -618,7 +618,7 @@ public class ProxyDirContext implements DirContext {
 
     /**
      * Creates and binds a new context.
-     * 
+     *
      * @param name the name of the context to create; may not be empty
      * @return the newly created context
      * @exception javax.naming.NameAlreadyBoundException if name is already
@@ -637,12 +637,12 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Retrieves the named object, following links except for the terminal 
-     * atomic component of the name. If the object bound to name is not a 
+     * Retrieves the named object, following links except for the terminal
+     * atomic component of the name. If the object bound to name is not a
      * link, returns the object itself.
-     * 
+     *
      * @param name the name of the object to look up
-     * @return the object bound to name, not following the terminal link 
+     * @return the object bound to name, not following the terminal link
      * (if any).
      * @exception NamingException if a naming exception is encountered
      */
@@ -654,11 +654,11 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Retrieves the named object, following links except for the terminal 
+     * Retrieves the named object, following links except for the terminal
      * atomic component of the name.
-     * 
+     *
      * @param name the name of the object to look up
-     * @return the object bound to name, not following the terminal link 
+     * @return the object bound to name, not following the terminal link
      * (if any).
      * @exception NamingException if a naming exception is encountered
      */
@@ -670,16 +670,16 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Retrieves the parser associated with the named context. In a 
-     * federation of namespaces, different naming systems will parse names 
-     * differently. This method allows an application to get a parser for 
-     * parsing names into their atomic components using the naming convention 
-     * of a particular naming system. Within any single naming system, 
-     * NameParser objects returned by this method must be equal (using the 
+     * Retrieves the parser associated with the named context. In a
+     * federation of namespaces, different naming systems will parse names
+     * differently. This method allows an application to get a parser for
+     * parsing names into their atomic components using the naming convention
+     * of a particular naming system. Within any single naming system,
+     * NameParser objects returned by this method must be equal (using the
      * equals() test).
-     * 
+     *
      * @param name the name of the context from which to get the parser
-     * @return a name parser that can parse compound names into their atomic 
+     * @return a name parser that can parse compound names into their atomic
      * components
      * @exception NamingException if a naming exception is encountered
      */
@@ -692,9 +692,9 @@ public class ProxyDirContext implements DirContext {
 
     /**
      * Retrieves the parser associated with the named context.
-     * 
+     *
      * @param name the name of the context from which to get the parser
-     * @return a name parser that can parse compound names into their atomic 
+     * @return a name parser that can parse compound names into their atomic
      * components
      * @exception NamingException if a naming exception is encountered
      */
@@ -708,13 +708,13 @@ public class ProxyDirContext implements DirContext {
     /**
      * Composes the name of this context with a name relative to this context.
      * <p>
-     * Given a name (name) relative to this context, and the name (prefix) 
-     * of this context relative to one of its ancestors, this method returns 
-     * the composition of the two names using the syntax appropriate for the 
-     * naming system(s) involved. That is, if name names an object relative 
-     * to this context, the result is the name of the same object, but 
+     * Given a name (name) relative to this context, and the name (prefix)
+     * of this context relative to one of its ancestors, this method returns
+     * the composition of the two names using the syntax appropriate for the
+     * naming system(s) involved. That is, if name names an object relative
+     * to this context, the result is the name of the same object, but
      * relative to the ancestor context. None of the names may be null.
-     * 
+     *
      * @param name a name relative to this context
      * @param prefix the name of this context relative to one of its ancestors
      * @return the composition of prefix and name
@@ -730,7 +730,7 @@ public class ProxyDirContext implements DirContext {
 
     /**
      * Composes the name of this context with a name relative to this context.
-     * 
+     *
      * @param name a name relative to this context
      * @param prefix the name of this context relative to one of its ancestors
      * @return the composition of prefix and name
@@ -744,10 +744,10 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Adds a new environment property to the environment of this context. If 
+     * Adds a new environment property to the environment of this context. If
      * the property already exists, its value is overwritten.
-     * 
-     * @param propName the name of the environment property to add; may not 
+     *
+     * @param propName the name of the environment property to add; may not
      * be null
      * @param propVal the value of the property to add; may not be null
      * @exception NamingException if a naming exception is encountered
@@ -760,9 +760,9 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Removes an environment property from the environment of this context. 
-     * 
-     * @param propName the name of the environment property to remove; 
+     * Removes an environment property from the environment of this context.
+     *
+     * @param propName the name of the environment property to remove;
      * may not be null
      * @exception NamingException if a naming exception is encountered
      */
@@ -774,12 +774,12 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Retrieves the environment in effect for this context. See class 
-     * description for more details on environment properties. 
-     * The caller should not make any changes to the object returned: their 
-     * effect on the context is undefined. The environment of this context 
+     * Retrieves the environment in effect for this context. See class
+     * description for more details on environment properties.
+     * The caller should not make any changes to the object returned: their
+     * effect on the context is undefined. The environment of this context
      * may be changed using addToEnvironment() and removeFromEnvironment().
-     * 
+     *
      * @return the environment of this context; never null
      * @exception NamingException if a naming exception is encountered
      */
@@ -791,13 +791,13 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Closes this context. This method releases this context's resources 
-     * immediately, instead of waiting for them to be released automatically 
+     * Closes this context. This method releases this context's resources
+     * immediately, instead of waiting for them to be released automatically
      * by the garbage collector.
-     * This method is idempotent: invoking it on a context that has already 
-     * been closed has no effect. Invoking any other method on a closed 
+     * This method is idempotent: invoking it on a context that has already
+     * been closed has no effect. Invoking any other method on a closed
      * context is not allowed, and results in undefined behaviour.
-     * 
+     *
      * @exception NamingException if a naming exception is encountered
      */
     @Override
@@ -810,15 +810,15 @@ public class ProxyDirContext implements DirContext {
     /**
      * Retrieves the full name of this context within its own namespace.
      * <p>
-     * Many naming services have a notion of a "full name" for objects in 
-     * their respective namespaces. For example, an LDAP entry has a 
-     * distinguished name, and a DNS record has a fully qualified name. This 
-     * method allows the client application to retrieve this name. The string 
-     * returned by this method is not a JNDI composite name and should not be 
-     * passed directly to context methods. In naming systems for which the 
-     * notion of full name does not make sense, 
+     * Many naming services have a notion of a "full name" for objects in
+     * their respective namespaces. For example, an LDAP entry has a
+     * distinguished name, and a DNS record has a fully qualified name. This
+     * method allows the client application to retrieve this name. The string
+     * returned by this method is not a JNDI composite name and should not be
+     * passed directly to context methods. In naming systems for which the
+     * notion of full name does not make sense,
      * OperationNotSupportedException is thrown.
-     * 
+     *
      * @return this context's name in its own namespace; never null
      * @exception javax.naming.OperationNotSupportedException if the naming
      * system does not have the notion of a full name
@@ -835,9 +835,9 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Retrieves all of the attributes associated with a named object. 
-     * 
-     * @return the set of attributes associated with name. 
+     * Retrieves all of the attributes associated with a named object.
+     *
+     * @return the set of attributes associated with name.
      * Returns an empty attribute set if name has no attributes; never null.
      * @param name the name of the object from which to retrieve attributes
      * @exception NamingException if a naming exception is encountered
@@ -862,7 +862,7 @@ public class ProxyDirContext implements DirContext {
 
     /**
      * Retrieves all of the attributes associated with a named object.
-     * 
+     *
      * @return the set of attributes associated with name
      * @param name the name of the object from which to retrieve attributes
      * @exception NamingException if a naming exception is encountered
@@ -886,21 +886,21 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Retrieves selected attributes associated with a named object. 
-     * See the class description regarding attribute models, attribute type 
+     * Retrieves selected attributes associated with a named object.
+     * See the class description regarding attribute models, attribute type
      * names, and operational attributes.
-     * 
+     *
      * @return the requested attributes; never null
      * @param name the name of the object from which to retrieve attributes
-     * @param attrIds the identifiers of the attributes to retrieve. null 
-     * indicates that all attributes should be retrieved; an empty array 
+     * @param attrIds the identifiers of the attributes to retrieve. null
+     * indicates that all attributes should be retrieved; an empty array
      * indicates that none should be retrieved
      * @exception NamingException if a naming exception is encountered
      */
     @Override
     public Attributes getAttributes(Name name, String[] attrIds)
         throws NamingException {
-        Attributes attributes = 
+        Attributes attributes =
             dirContext.getAttributes(parseName(name), attrIds);
         if (!(attributes instanceof ResourceAttributes)) {
             attributes = new ResourceAttributes(attributes);
@@ -911,18 +911,18 @@ public class ProxyDirContext implements DirContext {
 
     /**
      * Retrieves selected attributes associated with a named object.
-     * 
+     *
      * @return the requested attributes; never null
      * @param name the name of the object from which to retrieve attributes
-     * @param attrIds the identifiers of the attributes to retrieve. null 
-     * indicates that all attributes should be retrieved; an empty array 
+     * @param attrIds the identifiers of the attributes to retrieve. null
+     * indicates that all attributes should be retrieved; an empty array
      * indicates that none should be retrieved
      * @exception NamingException if a naming exception is encountered
      */
      @Override
     public Attributes getAttributes(String name, String[] attrIds)
          throws NamingException {
-        Attributes attributes = 
+        Attributes attributes =
             dirContext.getAttributes(parseName(name), attrIds);
         if (!(attributes instanceof ResourceAttributes)) {
             attributes = new ResourceAttributes(attributes);
@@ -932,14 +932,14 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Modifies the attributes associated with a named object. The order of 
-     * the modifications is not specified. Where possible, the modifications 
+     * Modifies the attributes associated with a named object. The order of
+     * the modifications is not specified. Where possible, the modifications
      * are performed atomically.
-     * 
+     *
      * @param name the name of the object whose attributes will be updated
-     * @param mod_op the modification operation, one of: ADD_ATTRIBUTE, 
+     * @param mod_op the modification operation, one of: ADD_ATTRIBUTE,
      * REPLACE_ATTRIBUTE, REMOVE_ATTRIBUTE
-     * @param attrs the attributes to be used for the modification; may not 
+     * @param attrs the attributes to be used for the modification; may not
      * be null
      * @exception javax.naming.directory.AttributeModificationException if the
      * modification cannot be completed successfully
@@ -955,11 +955,11 @@ public class ProxyDirContext implements DirContext {
 
     /**
      * Modifies the attributes associated with a named object.
-     * 
+     *
      * @param name the name of the object whose attributes will be updated
-     * @param mod_op the modification operation, one of: ADD_ATTRIBUTE, 
+     * @param mod_op the modification operation, one of: ADD_ATTRIBUTE,
      * REPLACE_ATTRIBUTE, REMOVE_ATTRIBUTE
-     * @param attrs the attributes to be used for the modification; may not 
+     * @param attrs the attributes to be used for the modification; may not
      * be null
      * @exception javax.naming.directory.AttributeModificationException if the
      * modification cannot be completed successfully
@@ -974,14 +974,14 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Modifies the attributes associated with a named object using an an 
-     * ordered list of modifications. The modifications are performed in the 
-     * order specified. Each modification specifies a modification operation 
-     * code and an attribute on which to operate. Where possible, the 
+     * Modifies the attributes associated with a named object using an an
+     * ordered list of modifications. The modifications are performed in the
+     * order specified. Each modification specifies a modification operation
+     * code and an attribute on which to operate. Where possible, the
      * modifications are performed atomically.
-     * 
+     *
      * @param name the name of the object whose attributes will be updated
-     * @param mods an ordered sequence of modifications to be performed; may 
+     * @param mods an ordered sequence of modifications to be performed; may
      * not be null
      * @exception javax.naming.directory.AttributeModificationException if the
      * modification cannot be completed successfully
@@ -996,11 +996,11 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Modifies the attributes associated with a named object using an an 
+     * Modifies the attributes associated with a named object using an an
      * ordered list of modifications.
-     * 
+     *
      * @param name the name of the object whose attributes will be updated
-     * @param mods an ordered sequence of modifications to be performed; may 
+     * @param mods an ordered sequence of modifications to be performed; may
      * not be null
      * @exception javax.naming.directory.AttributeModificationException if the
      * modification cannot be completed successfully
@@ -1015,12 +1015,12 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Binds a name to an object, along with associated attributes. If attrs 
-     * is null, the resulting binding will have the attributes associated 
-     * with obj if obj is a DirContext, and no attributes otherwise. If attrs 
-     * is non-null, the resulting binding will have attrs as its attributes; 
+     * Binds a name to an object, along with associated attributes. If attrs
+     * is null, the resulting binding will have the attributes associated
+     * with obj if obj is a DirContext, and no attributes otherwise. If attrs
+     * is non-null, the resulting binding will have attrs as its attributes;
      * any attributes associated with obj are ignored.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @param attrs the attributes to associate with the binding
@@ -1040,7 +1040,7 @@ public class ProxyDirContext implements DirContext {
 
     /**
      * Binds a name to an object, along with associated attributes.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @param attrs the attributes to associate with the binding
@@ -1059,16 +1059,16 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Binds a name to an object, along with associated attributes, 
-     * overwriting any existing binding. If attrs is null and obj is a 
-     * DirContext, the attributes from obj are used. If attrs is null and obj 
+     * Binds a name to an object, along with associated attributes,
+     * overwriting any existing binding. If attrs is null and obj is a
+     * DirContext, the attributes from obj are used. If attrs is null and obj
      * is not a DirContext, any existing attributes associated with the object
-     * already bound in the directory remain unchanged. If attrs is non-null, 
-     * any existing attributes associated with the object already bound in 
-     * the directory are removed and attrs is associated with the named 
-     * object. If obj is a DirContext and attrs is non-null, the attributes 
+     * already bound in the directory remain unchanged. If attrs is non-null,
+     * any existing attributes associated with the object already bound in
+     * the directory are removed and attrs is associated with the named
+     * object. If obj is a DirContext and attrs is non-null, the attributes
      * of obj are ignored.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @param attrs the attributes to associate with the binding
@@ -1085,9 +1085,9 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Binds a name to an object, along with associated attributes, 
+     * Binds a name to an object, along with associated attributes,
      * overwriting any existing binding.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @param attrs the attributes to associate with the binding
@@ -1104,14 +1104,14 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Creates and binds a new context, along with associated attributes. 
-     * This method creates a new subcontext with the given name, binds it in 
-     * the target context (that named by all but terminal atomic component of 
-     * the name), and associates the supplied attributes with the newly 
-     * created object. All intermediate and target contexts must already 
-     * exist. If attrs is null, this method is equivalent to 
+     * Creates and binds a new context, along with associated attributes.
+     * This method creates a new subcontext with the given name, binds it in
+     * the target context (that named by all but terminal atomic component of
+     * the name), and associates the supplied attributes with the newly
+     * created object. All intermediate and target contexts must already
+     * exist. If attrs is null, this method is equivalent to
      * Context.createSubcontext().
-     * 
+     *
      * @param name the name of the context to create; may not be empty
      * @param attrs the attributes to associate with the newly created context
      * @return the newly created context
@@ -1124,7 +1124,7 @@ public class ProxyDirContext implements DirContext {
     @Override
     public DirContext createSubcontext(Name name, Attributes attrs)
         throws NamingException {
-        DirContext context = 
+        DirContext context =
             dirContext.createSubcontext(parseName(name), attrs);
         cacheUnload(name.toString());
         return context;
@@ -1133,7 +1133,7 @@ public class ProxyDirContext implements DirContext {
 
     /**
      * Creates and binds a new context, along with associated attributes.
-     * 
+     *
      * @param name the name of the context to create; may not be empty
      * @param attrs the attributes to associate with the newly created context
      * @return the newly created context
@@ -1146,7 +1146,7 @@ public class ProxyDirContext implements DirContext {
     @Override
     public DirContext createSubcontext(String name, Attributes attrs)
         throws NamingException {
-        DirContext context = 
+        DirContext context =
             dirContext.createSubcontext(parseName(name), attrs);
         cacheUnload(name);
         return context;
@@ -1154,13 +1154,13 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Retrieves the schema associated with the named object. The schema 
-     * describes rules regarding the structure of the namespace and the 
-     * attributes stored within it. The schema specifies what types of 
-     * objects can be added to the directory and where they can be added; 
-     * what mandatory and optional attributes an object can have. The range 
+     * Retrieves the schema associated with the named object. The schema
+     * describes rules regarding the structure of the namespace and the
+     * attributes stored within it. The schema specifies what types of
+     * objects can be added to the directory and where they can be added;
+     * what mandatory and optional attributes an object can have. The range
      * of support for schemas is directory-specific.
-     * 
+     *
      * @param name the name of the object whose schema is to be retrieved
      * @return the schema associated with the context; never null
      * @exception javax.naming.OperationNotSupportedException if schema not
@@ -1176,7 +1176,7 @@ public class ProxyDirContext implements DirContext {
 
     /**
      * Retrieves the schema associated with the named object.
-     * 
+     *
      * @param name the name of the object whose schema is to be retrieved
      * @return the schema associated with the context; never null
      * @exception javax.naming.OperationNotSupportedException if schema not
@@ -1191,12 +1191,12 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Retrieves a context containing the schema objects of the named 
+     * Retrieves a context containing the schema objects of the named
      * object's class definitions.
-     * 
-     * @param name the name of the object whose object class definition is to 
+     *
+     * @param name the name of the object whose object class definition is to
      * be retrieved
-     * @return the DirContext containing the named object's class 
+     * @return the DirContext containing the named object's class
      * definitions; never null
      * @exception javax.naming.OperationNotSupportedException if schema not
      * supported
@@ -1210,12 +1210,12 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Retrieves a context containing the schema objects of the named 
+     * Retrieves a context containing the schema objects of the named
      * object's class definitions.
-     * 
-     * @param name the name of the object whose object class definition is to 
+     *
+     * @param name the name of the object whose object class definition is to
      * be retrieved
-     * @return the DirContext containing the named object's class 
+     * @return the DirContext containing the named object's class
      * definitions; never null
      * @exception javax.naming.OperationNotSupportedException if schema not
      * supported
@@ -1229,19 +1229,19 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Searches in a single context for objects that contain a specified set 
-     * of attributes, and retrieves selected attributes. The search is 
+     * Searches in a single context for objects that contain a specified set
+     * of attributes, and retrieves selected attributes. The search is
      * performed using the default SearchControls settings.
-     * 
+     *
      * @param name the name of the context to search
-     * @param matchingAttributes the attributes to search for. If empty or 
+     * @param matchingAttributes the attributes to search for. If empty or
      * null, all objects in the target context are returned.
-     * @param attributesToReturn the attributes to return. null indicates 
-     * that all attributes are to be returned; an empty array indicates that 
+     * @param attributesToReturn the attributes to return. null indicates
+     * that all attributes are to be returned; an empty array indicates that
      * none are to be returned.
-     * @return a non-null enumeration of SearchResult objects. Each 
-     * SearchResult contains the attributes identified by attributesToReturn 
-     * and the name of the corresponding object, named relative to the 
+     * @return a non-null enumeration of SearchResult objects. Each
+     * SearchResult contains the attributes identified by attributesToReturn
+     * and the name of the corresponding object, named relative to the
      * context named by name.
      * @exception NamingException if a naming exception is encountered
      */
@@ -1249,24 +1249,24 @@ public class ProxyDirContext implements DirContext {
     public NamingEnumeration<SearchResult> search(Name name,
             Attributes matchingAttributes, String[] attributesToReturn)
         throws NamingException {
-        return dirContext.search(parseName(name), matchingAttributes, 
+        return dirContext.search(parseName(name), matchingAttributes,
                                  attributesToReturn);
     }
 
 
     /**
-     * Searches in a single context for objects that contain a specified set 
+     * Searches in a single context for objects that contain a specified set
      * of attributes, and retrieves selected attributes.
-     * 
+     *
      * @param name the name of the context to search
-     * @param matchingAttributes the attributes to search for. If empty or 
+     * @param matchingAttributes the attributes to search for. If empty or
      * null, all objects in the target context are returned.
-     * @param attributesToReturn the attributes to return. null indicates 
-     * that all attributes are to be returned; an empty array indicates that 
+     * @param attributesToReturn the attributes to return. null indicates
+     * that all attributes are to be returned; an empty array indicates that
      * none are to be returned.
-     * @return a non-null enumeration of SearchResult objects. Each 
-     * SearchResult contains the attributes identified by attributesToReturn 
-     * and the name of the corresponding object, named relative to the 
+     * @return a non-null enumeration of SearchResult objects. Each
+     * SearchResult contains the attributes identified by attributesToReturn
+     * and the name of the corresponding object, named relative to the
      * context named by name.
      * @exception NamingException if a naming exception is encountered
      */
@@ -1274,23 +1274,23 @@ public class ProxyDirContext implements DirContext {
     public NamingEnumeration<SearchResult> search(String name,
             Attributes matchingAttributes, String[] attributesToReturn)
         throws NamingException {
-        return dirContext.search(parseName(name), matchingAttributes, 
+        return dirContext.search(parseName(name), matchingAttributes,
                                  attributesToReturn);
     }
 
 
     /**
-     * Searches in a single context for objects that contain a specified set 
-     * of attributes. This method returns all the attributes of such objects. 
-     * It is equivalent to supplying null as the atributesToReturn parameter 
+     * Searches in a single context for objects that contain a specified set
+     * of attributes. This method returns all the attributes of such objects.
+     * It is equivalent to supplying null as the atributesToReturn parameter
      * to the method search(Name, Attributes, String[]).
-     * 
+     *
      * @param name the name of the context to search
-     * @param matchingAttributes the attributes to search for. If empty or 
+     * @param matchingAttributes the attributes to search for. If empty or
      * null, all objects in the target context are returned.
-     * @return a non-null enumeration of SearchResult objects. Each 
-     * SearchResult contains the attributes identified by attributesToReturn 
-     * and the name of the corresponding object, named relative to the 
+     * @return a non-null enumeration of SearchResult objects. Each
+     * SearchResult contains the attributes identified by attributesToReturn
+     * and the name of the corresponding object, named relative to the
      * context named by name.
      * @exception NamingException if a naming exception is encountered
      */
@@ -1302,15 +1302,15 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Searches in a single context for objects that contain a specified set 
+     * Searches in a single context for objects that contain a specified set
      * of attributes.
-     * 
+     *
      * @param name the name of the context to search
-     * @param matchingAttributes the attributes to search for. If empty or 
+     * @param matchingAttributes the attributes to search for. If empty or
      * null, all objects in the target context are returned.
-     * @return a non-null enumeration of SearchResult objects. Each 
-     * SearchResult contains the attributes identified by attributesToReturn 
-     * and the name of the corresponding object, named relative to the 
+     * @return a non-null enumeration of SearchResult objects. Each
+     * SearchResult contains the attributes identified by attributesToReturn
+     * and the name of the corresponding object, named relative to the
      * context named by name.
      * @exception NamingException if a naming exception is encountered
      */
@@ -1322,17 +1322,17 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Searches in the named context or object for entries that satisfy the 
-     * given search filter. Performs the search as specified by the search 
+     * Searches in the named context or object for entries that satisfy the
+     * given search filter. Performs the search as specified by the search
      * controls.
-     * 
+     *
      * @param name the name of the context or object to search
-     * @param filter the filter expression to use for the search; may not be 
+     * @param filter the filter expression to use for the search; may not be
      * null
-     * @param cons the search controls that control the search. If null, 
-     * the default search controls are used (equivalent to 
+     * @param cons the search controls that control the search. If null,
+     * the default search controls are used (equivalent to
      * (new SearchControls())).
-     * @return an enumeration of SearchResults of the objects that satisfy 
+     * @return an enumeration of SearchResults of the objects that satisfy
      * the filter; never null
      * @exception javax.naming.directory.InvalidSearchFilterException if the
      * search filter specified is not supported or understood by the underlying
@@ -1342,7 +1342,7 @@ public class ProxyDirContext implements DirContext {
      * @exception NamingException if a naming exception is encountered
      */
     @Override
-    public NamingEnumeration<SearchResult> search(Name name, String filter, 
+    public NamingEnumeration<SearchResult> search(Name name, String filter,
                                     SearchControls cons)
         throws NamingException {
         return dirContext.search(parseName(name), filter, cons);
@@ -1350,17 +1350,17 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Searches in the named context or object for entries that satisfy the 
-     * given search filter. Performs the search as specified by the search 
+     * Searches in the named context or object for entries that satisfy the
+     * given search filter. Performs the search as specified by the search
      * controls.
-     * 
+     *
      * @param name the name of the context or object to search
-     * @param filter the filter expression to use for the search; may not be 
+     * @param filter the filter expression to use for the search; may not be
      * null
-     * @param cons the search controls that control the search. If null, 
-     * the default search controls are used (equivalent to 
+     * @param cons the search controls that control the search. If null,
+     * the default search controls are used (equivalent to
      * (new SearchControls())).
-     * @return an enumeration of SearchResults of the objects that satisfy 
+     * @return an enumeration of SearchResults of the objects that satisfy
      * the filter; never null
      * @exception javax.naming.directory.InvalidSearchFilterException if the
      * search filter specified is not supported or understood by the underlying
@@ -1370,7 +1370,7 @@ public class ProxyDirContext implements DirContext {
      * @exception NamingException if a naming exception is encountered
      */
     @Override
-    public NamingEnumeration<SearchResult> search(String name, String filter, 
+    public NamingEnumeration<SearchResult> search(String name, String filter,
                                     SearchControls cons)
         throws NamingException {
         return dirContext.search(parseName(name), filter, cons);
@@ -1378,22 +1378,22 @@ public class ProxyDirContext implements DirContext {
 
 
     /**
-     * Searches in the named context or object for entries that satisfy the 
-     * given search filter. Performs the search as specified by the search 
+     * Searches in the named context or object for entries that satisfy the
+     * given search filter. Performs the search as specified by the search
      * controls.
-     * 
+     *
      * @param name the name of the context or object to search
-     * @param filterExpr the filter expression to use for the search. 
-     * The expression may contain variables of the form "{i}" where i is a 
+     * @param filterExpr the filter expression to use for the search.
+     * The expression may contain variables of the form "{i}" where i is a
      * nonnegative integer. May not be null.
-     * @param filterArgs the array of arguments to substitute for the 
-     * variables in filterExpr. The value of filterArgs[i] will replace each 
+     * @param filterArgs the array of arguments to substitute for the
+     * variables in filterExpr. The value of filterArgs[i] will replace each
      * occurrence of "{i}". If null, equivalent to an empty array.
-     * @param cons the search controls that control the search. If null, the 
+     * @param cons the search controls that control the search. If null, the
      * default search controls are used (equivalent to (new SearchControls())).
-     * @return an enumeration of SearchResults of the objects that satisy the 
+     * @return an enumeration of SearchResults of the objects that satisy the
      * filter; never null
-     * @exception ArrayIndexOutOfBoundsException if filterExpr contains {i} 
+     * @exception ArrayIndexOutOfBoundsException if filterExpr contains {i}
      * expressions where i is outside the bounds of the array filterArgs
      * @exception javax.naming.directory.InvalidSearchControlsException if cons
      * contains invalid settings
@@ -1405,28 +1405,28 @@ public class ProxyDirContext implements DirContext {
     public NamingEnumeration<SearchResult> search(Name name, String filterExpr,
                                     Object[] filterArgs, SearchControls cons)
         throws NamingException {
-        return dirContext.search(parseName(name), filterExpr, filterArgs, 
+        return dirContext.search(parseName(name), filterExpr, filterArgs,
                                  cons);
     }
 
 
     /**
-     * Searches in the named context or object for entries that satisfy the 
-     * given search filter. Performs the search as specified by the search 
+     * Searches in the named context or object for entries that satisfy the
+     * given search filter. Performs the search as specified by the search
      * controls.
-     * 
+     *
      * @param name the name of the context or object to search
-     * @param filterExpr the filter expression to use for the search. 
-     * The expression may contain variables of the form "{i}" where i is a 
+     * @param filterExpr the filter expression to use for the search.
+     * The expression may contain variables of the form "{i}" where i is a
      * nonnegative integer. May not be null.
-     * @param filterArgs the array of arguments to substitute for the 
-     * variables in filterExpr. The value of filterArgs[i] will replace each 
+     * @param filterArgs the array of arguments to substitute for the
+     * variables in filterExpr. The value of filterArgs[i] will replace each
      * occurrence of "{i}". If null, equivalent to an empty array.
-     * @param cons the search controls that control the search. If null, the 
+     * @param cons the search controls that control the search. If null, the
      * default search controls are used (equivalent to (new SearchControls())).
-     * @return an enumeration of SearchResults of the objects that satisy the 
+     * @return an enumeration of SearchResults of the objects that satisy the
      * filter; never null
-     * @exception ArrayIndexOutOfBoundsException if filterExpr contains {i} 
+     * @exception ArrayIndexOutOfBoundsException if filterExpr contains {i}
      * expressions where i is outside the bounds of the array filterArgs
      * @exception javax.naming.directory.InvalidSearchControlsException if cons
      * contains invalid settings
@@ -1438,7 +1438,7 @@ public class ProxyDirContext implements DirContext {
     public NamingEnumeration<SearchResult> search(String name,
             String filterExpr, Object[] filterArgs, SearchControls cons)
         throws NamingException {
-        return dirContext.search(parseName(name), filterExpr, filterArgs, 
+        return dirContext.search(parseName(name), filterExpr, filterArgs,
                                  cons);
     }
 
@@ -1448,7 +1448,7 @@ public class ProxyDirContext implements DirContext {
 
     /**
      * Retrieves the named object as a cache entry, without any exception.
-     * 
+     *
      * @param name the name of the object to look up
      * @return the cache entry bound to name
      */
@@ -1487,7 +1487,7 @@ public class ProxyDirContext implements DirContext {
 
     /**
      * Parses a name.
-     * 
+     *
      * @return the parsed name
      * @throws NamingException if the name cannot be parsed
      */
@@ -1498,7 +1498,7 @@ public class ProxyDirContext implements DirContext {
 
     /**
      * Parses a name.
-     * 
+     *
      * @return the parsed name
      * @throws NamingException if the name cannot be parsed
      */
@@ -1536,7 +1536,7 @@ public class ProxyDirContext implements DirContext {
                     cacheUnload(cacheEntry.name);
                     return (null);
                 } else {
-                    cacheEntry.timestamp = 
+                    cacheEntry.timestamp =
                         System.currentTimeMillis() + cacheTTL;
                 }
             }
@@ -1552,7 +1552,7 @@ public class ProxyDirContext implements DirContext {
     protected boolean validate(CacheEntry entry) {
         if (((!entry.exists)
              || (entry.context != null)
-             || ((entry.resource != null) 
+             || ((entry.resource != null)
                  && (entry.resource.getContent() != null)))
             && (System.currentTimeMillis() < entry.timestamp)) {
             return true;
@@ -1565,7 +1565,7 @@ public class ProxyDirContext implements DirContext {
      * Revalidate entry.
      */
     protected boolean revalidate(CacheEntry entry) {
-        // Get the attributes at the given path, and check the last 
+        // Get the attributes at the given path, and check the last
         // modification date
         if (!entry.exists)
             return false;
@@ -1585,7 +1585,7 @@ public class ProxyDirContext implements DirContext {
             }
             long lastModified2 = attributes.getLastModified();
             long contentLength2 = attributes.getContentLength();
-            return (lastModified == lastModified2) 
+            return (lastModified == lastModified2)
                 && (contentLength == contentLength2);
         } catch (NamingException e) {
             return false;
@@ -1608,7 +1608,7 @@ public class ProxyDirContext implements DirContext {
             try {
                 Attributes attributes = dirContext.getAttributes(entry.name);
                 if (!(attributes instanceof ResourceAttributes)) {
-                    entry.attributes = 
+                    entry.attributes =
                         new ResourceAttributes(attributes);
                 } else {
                     entry.attributes = (ResourceAttributes) attributes;
@@ -1638,13 +1638,13 @@ public class ProxyDirContext implements DirContext {
         }
 
         // Load object content
-        if ((exists) && (entry.resource != null) 
-            && (entry.resource.getContent() == null) 
+        if ((exists) && (entry.resource != null)
+            && (entry.resource.getContent() == null)
             && (entry.attributes.getContentLength() >= 0)
-            && (entry.attributes.getContentLength() < 
+            && (entry.attributes.getContentLength() <
                 (cacheObjectMaxSize * 1024))) {
             int length = (int) entry.attributes.getContentLength();
-            // The entry size is 1 + the resource size in KB, if it will be 
+            // The entry size is 1 + the resource size in KB, if it will be
             // cached
             entry.size += (entry.attributes.getContentLength() / 1024);
             InputStream is = null;

==================================================
Resource.java
index 70a80ec29e..e019955212 100644
--- a/java/org/apache/naming/resources/RecyclableNamingEnumeration.java
+++ b/java/org/apache/naming/resources/RecyclableNamingEnumeration.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming.resources;
@@ -31,7 +31,7 @@ import javax.naming.NamingException;
  * @version $Id$
  */
 
-public class RecyclableNamingEnumeration<E> 
+public class RecyclableNamingEnumeration<E>
     implements NamingEnumeration<E> {
 
 

==================================================
ResourceAttributes.java
index 2afb9d8da2..b2726e33f8 100644
--- a/java/org/apache/naming/resources/Resource.java
+++ b/java/org/apache/naming/resources/Resource.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 package org.apache.naming.resources;
 
@@ -23,52 +23,52 @@ import java.io.InputStream;
 
 /**
  * Encapsulates the contents of a resource.
- * 
+ *
  * @author <a href="mailto:remm@apache.org">Remy Maucherat</a>
  * @version $Revision$
  */
 public class Resource {
-    
-    
+
+
     // ----------------------------------------------------------- Constructors
-    
-    
+
+
     public Resource() {
         // NO-OP
     }
-    
-    
+
+
     public Resource(InputStream inputStream) {
         setContent(inputStream);
     }
-    
-    
+
+
     public Resource(byte[] binaryContent) {
         setContent(binaryContent);
     }
-    
-    
+
+
     // ----------------------------------------------------- Instance Variables
-    
-    
+
+
     /**
      * Binary content.
      */
     protected byte[] binaryContent = null;
-    
-    
+
+
     /**
      * Input stream.
      */
     protected InputStream inputStream = null;
-    
-    
+
+
     // ------------------------------------------------------------- Properties
-    
-    
+
+
     /**
      * Content accessor.
-     * 
+     *
      * @return InputStream
      * @throws IOException
      */
@@ -78,36 +78,36 @@ public class Resource {
         }
         return inputStream;
     }
-    
-    
+
+
     /**
      * Content accessor.
-     * 
+     *
      * @return binary content
      */
     public byte[] getContent() {
         return binaryContent;
     }
-    
-    
+
+
     /**
      * Content mutator.
-     * 
+     *
      * @param inputStream New input stream
      */
     public void setContent(InputStream inputStream) {
         this.inputStream = inputStream;
     }
-    
-    
+
+
     /**
      * Content mutator.
-     * 
+     *
      * @param binaryContent New bin content
      */
     public void setContent(byte[] binaryContent) {
         this.binaryContent = binaryContent;
     }
-    
-    
+
+
 }

==================================================
ResourceCache.java
index c5cd46c836..a52dbc4e88 100644
--- a/java/org/apache/naming/resources/ResourceAttributes.java
+++ b/java/org/apache/naming/resources/ResourceAttributes.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 package org.apache.naming.resources;
 
@@ -32,104 +32,104 @@ import javax.naming.directory.BasicAttribute;
 
 /**
  * Attributes implementation.
- * 
+ *
  * @author <a href="mailto:remm@apache.org">Remy Maucherat</a>
  * @version $Revision$
  */
 public class ResourceAttributes implements Attributes {
-    
-    
+
+
     // -------------------------------------------------------------- Constants
-    
+
     private static final long serialVersionUID = 1L;
-    
+
     // Default attribute names
-    
+
     /**
      * Creation date.
      */
     public static final String CREATION_DATE = "creationdate";
-    
-    
+
+
     /**
      * Creation date.
      */
     public static final String ALTERNATE_CREATION_DATE = "creation-date";
-    
-    
+
+
     /**
      * Last modification date.
      */
     public static final String LAST_MODIFIED = "getlastmodified";
-    
-    
+
+
     /**
      * Last modification date.
      */
     public static final String ALTERNATE_LAST_MODIFIED = "last-modified";
-    
-    
+
+
     /**
      * Name.
      */
     public static final String NAME = "displayname";
-    
-    
+
+
     /**
      * Type.
      */
     public static final String TYPE = "resourcetype";
-    
-    
+
+
     /**
      * Type.
      */
     public static final String ALTERNATE_TYPE = "content-type";
-    
-    
+
+
     /**
      * MIME type of the content.
      */
     public static final String CONTENT_TYPE = "getcontenttype";
-    
-    
+
+
     /**
      * Content length.
      */
     public static final String CONTENT_LENGTH = "getcontentlength";
-    
-    
+
+
     /**
      * Content length.
      */
     public static final String ALTERNATE_CONTENT_LENGTH = "content-length";
-    
-    
+
+
     /**
      * ETag.
      */
     public static final String ETAG = "getetag";
-    
-    
+
+
     /**
      * ETag.
      */
     public static final String ALTERNATE_ETAG = "etag";
-    
-    
+
+
     /**
      * Collection type.
      */
     public static final String COLLECTION_TYPE = "<collection/>";
-    
-    
+
+
     /**
      * HTTP date format.
      */
     protected static final SimpleDateFormat format =
         new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US);
-    
-    
+
+
     /**
      * Date formats using for Date parsing.
      */
@@ -138,8 +138,8 @@ public class ResourceAttributes implements Attributes {
         new SimpleDateFormat("EEEEEE, dd-MMM-yy HH:mm:ss zzz", Locale.US),
         new SimpleDateFormat("EEE MMMM d HH:mm:ss yyyy", Locale.US)
     };
-    
-    
+
+
     protected static final TimeZone gmtZone = TimeZone.getTimeZone("GMT");
 
 
@@ -158,24 +158,24 @@ public class ResourceAttributes implements Attributes {
 
 
     // ----------------------------------------------------------- Constructors
-    
-    
+
+
     /**
      * Default constructor.
      */
     public ResourceAttributes() {
         // NO-OP
     }
-    
-    
+
+
     /**
      * Merges with another attribute set.
      */
     public ResourceAttributes(Attributes attributes) {
         this.attributes = attributes;
     }
-    
-    
+
+
     // ----------------------------------------------------- Instance Variables
 
 
@@ -214,18 +214,18 @@ public class ResourceAttributes implements Attributes {
      */
     protected Date lastModifiedDate = null;
 
-    
+
     /**
      * Last modified date in HTTP format.
      */
     protected String lastModifiedHttp = null;
-    
+
 
     /**
      * MIME type.
      */
     protected String mimeType = null;
-    
+
 
     /**
      * Name.
@@ -264,8 +264,8 @@ public class ResourceAttributes implements Attributes {
             return (collection);
         }
     }
-    
-    
+
+
     /**
      * Set collection flag.
      *
@@ -280,11 +280,11 @@ public class ResourceAttributes implements Attributes {
             attributes.put(TYPE, value);
         }
     }
-    
-    
+
+
     /**
      * Get content length.
-     * 
+     *
      * @return content length value
      */
     public long getContentLength() {
@@ -311,11 +311,11 @@ public class ResourceAttributes implements Attributes {
         }
         return contentLength;
     }
-    
-    
+
+
     /**
      * Set content length.
-     * 
+     *
      * @param contentLength New content length value
      */
     public void setContentLength(long contentLength) {
@@ -323,11 +323,11 @@ public class ResourceAttributes implements Attributes {
         if (attributes != null)
             attributes.put(CONTENT_LENGTH, Long.valueOf(contentLength));
     }
-    
-    
+
+
     /**
      * Get creation time.
-     * 
+     *
      * @return creation time value
      */
     public long getCreation() {
@@ -349,7 +349,7 @@ public class ResourceAttributes implements Attributes {
                         String creationDateValue = value.toString();
                         Date result = null;
                         // Parsing the HTTP Date
-                        for (int i = 0; (result == null) && 
+                        for (int i = 0; (result == null) &&
                                  (i < formats.length); i++) {
                             try {
                                 result = formats[i].parse(creationDateValue);
@@ -369,11 +369,11 @@ public class ResourceAttributes implements Attributes {
         }
         return creation;
     }
-    
-    
+
+
     /**
      * Set creation.
-     * 
+     *
      * @param creation New creation value
      */
     public void setCreation(long creation) {
@@ -382,11 +382,11 @@ public class ResourceAttributes implements Attributes {
         if (attributes != null)
             attributes.put(CREATION_DATE, new Date(creation));
     }
-    
-    
+
+
     /**
      * Get creation date.
-     * 
+     *
      * @return Creation date value
      */
     public Date getCreationDate() {
@@ -411,7 +411,7 @@ public class ResourceAttributes implements Attributes {
                         String creationDateValue = value.toString();
                         Date result = null;
                         // Parsing the HTTP Date
-                        for (int i = 0; (result == null) && 
+                        for (int i = 0; (result == null) &&
                                  (i < formats.length); i++) {
                             try {
                                 result = formats[i].parse(creationDateValue);
@@ -431,11 +431,11 @@ public class ResourceAttributes implements Attributes {
         }
         return creationDate;
     }
-    
-    
+
+
     /**
      * Creation date mutator.
-     * 
+     *
      * @param creationDate New creation date
      */
     public void setCreationDate(Date creationDate) {
@@ -444,11 +444,11 @@ public class ResourceAttributes implements Attributes {
         if (attributes != null)
             attributes.put(CREATION_DATE, creationDate);
     }
-    
-    
+
+
     /**
      * Get last modified time.
-     * 
+     *
      * @return lastModified time value
      */
     public long getLastModified() {
@@ -470,10 +470,10 @@ public class ResourceAttributes implements Attributes {
                         String lastModifiedDateValue = value.toString();
                         Date result = null;
                         // Parsing the HTTP Date
-                        for (int i = 0; (result == null) && 
+                        for (int i = 0; (result == null) &&
                                  (i < formats.length); i++) {
                             try {
-                                result = 
+                                result =
                                     formats[i].parse(lastModifiedDateValue);
                             } catch (ParseException e) {
                                 // Ignore
@@ -491,11 +491,11 @@ public class ResourceAttributes implements Attributes {
         }
         return lastModified;
     }
-    
-    
+
+
     /**
      * Set last modified.
-     * 
+     *
      * @param lastModified New last modified value
      */
     public void setLastModified(long lastModified) {
@@ -504,11 +504,11 @@ public class ResourceAttributes implements Attributes {
         if (attributes != null)
             attributes.put(LAST_MODIFIED, new Date(lastModified));
     }
-    
-    
+
+
     /**
      * Get lastModified date.
-     * 
+     *
      * @return LastModified date value
      */
     public Date getLastModifiedDate() {
@@ -533,10 +533,10 @@ public class ResourceAttributes implements Attributes {
                         String lastModifiedDateValue = value.toString();
                         Date result = null;
                         // Parsing the HTTP Date
-                        for (int i = 0; (result == null) && 
+                        for (int i = 0; (result == null) &&
                                  (i < formats.length); i++) {
                             try {
-                                result = 
+                                result =
                                     formats[i].parse(lastModifiedDateValue);
                             } catch (ParseException e) {
                                 // Ignore
@@ -554,11 +554,11 @@ public class ResourceAttributes implements Attributes {
         }
         return lastModifiedDate;
     }
-    
-    
+
+
     /**
      * Last modified date mutator.
-     * 
+     *
      * @param lastModifiedDate New last modified date
      */
     public void setLastModifiedDate(Date lastModifiedDate) {
@@ -567,8 +567,8 @@ public class ResourceAttributes implements Attributes {
         if (attributes != null)
             attributes.put(LAST_MODIFIED, lastModifiedDate);
     }
-    
-    
+
+
     /**
      * @return Returns the lastModifiedHttp.
      */
@@ -587,24 +587,24 @@ public class ResourceAttributes implements Attributes {
         }
         return lastModifiedHttp;
     }
-    
-    
+
+
     /**
      * @param lastModifiedHttp The lastModifiedHttp to set.
      */
     public void setLastModifiedHttp(String lastModifiedHttp) {
         this.lastModifiedHttp = lastModifiedHttp;
     }
-    
-    
+
+
     /**
      * @return Returns the mimeType.
      */
     public String getMimeType() {
         return mimeType;
     }
-    
-    
+
+
     /**
      * @param mimeType The mimeType to set.
      */
@@ -612,10 +612,10 @@ public class ResourceAttributes implements Attributes {
         this.mimeType = mimeType;
     }
 
-    
+
     /**
      * Get name.
-     * 
+     *
      * @return Name value
      */
     public String getName() {
@@ -637,7 +637,7 @@ public class ResourceAttributes implements Attributes {
 
     /**
      * Set name.
-     * 
+     *
      * @param name New name value
      */
     public void setName(String name) {
@@ -645,11 +645,11 @@ public class ResourceAttributes implements Attributes {
         if (attributes != null)
             attributes.put(NAME, name);
     }
-    
-    
+
+
     /**
      * Get resource type.
-     * 
+     *
      * @return String resource type
      */
     public String getResourceType() {
@@ -670,11 +670,11 @@ public class ResourceAttributes implements Attributes {
         }
         return result;
     }
-    
-    
+
+
     /**
      * Type mutator.
-     * 
+     *
      * @param resourceType New resource type
      */
     public void setResourceType(String resourceType) {
@@ -686,8 +686,8 @@ public class ResourceAttributes implements Attributes {
 
     /**
      * Get ETag.
-     * 
-     * @return strong ETag if available, else weak ETag. 
+     *
+     * @return strong ETag if available, else weak ETag.
      */
     public String getETag() {
         String result = null;
@@ -717,7 +717,7 @@ public class ResourceAttributes implements Attributes {
                 }
                 result = weakETag;
             }
-        } 
+        }
         return result;
     }
 
@@ -731,19 +731,19 @@ public class ResourceAttributes implements Attributes {
             attributes.put(ETAG, eTag);
     }
 
-    
+
     /**
-     * Return the canonical path of the resource, to possibly be used for 
+     * Return the canonical path of the resource, to possibly be used for
      * direct file serving. Implementations which support this should override
      * it to return the file path.
-     * 
+     *
      * @return The canonical path of the resource
      */
     public String getCanonicalPath() {
         return null;
     }
-    
-    
+
+
     // ----------------------------------------------------- Attributes Methods
 
 
@@ -803,8 +803,8 @@ public class ResourceAttributes implements Attributes {
         }
         return null;
     }
-    
-    
+
+
     /**
      * Put attribute.
      */
@@ -820,8 +820,8 @@ public class ResourceAttributes implements Attributes {
             return attributes.put(attribute);
         }
     }
-    
-    
+
+
     /**
      * Put attribute.
      */
@@ -833,8 +833,8 @@ public class ResourceAttributes implements Attributes {
             return attributes.put(attrID, val);
         }
     }
-    
-    
+
+
     /**
      * Remove attribute.
      */
@@ -846,8 +846,8 @@ public class ResourceAttributes implements Attributes {
             return attributes.remove(attrID);
         }
     }
-    
-    
+
+
     /**
      * Get all attributes.
      */
@@ -894,8 +894,8 @@ public class ResourceAttributes implements Attributes {
             return attributes.getAll();
         }
     }
-    
-    
+
+
     /**
      * Get all attribute IDs.
      */
@@ -936,8 +936,8 @@ public class ResourceAttributes implements Attributes {
             return attributes.getIDs();
         }
     }
-    
-    
+
+
     /**
      * Retrieves the number of attributes in the attribute set.
      */
@@ -956,8 +956,8 @@ public class ResourceAttributes implements Attributes {
             return attributes.size();
         }
     }
-    
-    
+
+
     /**
      * Clone the attributes object (WARNING: fake cloning).
      */
@@ -965,8 +965,8 @@ public class ResourceAttributes implements Attributes {
     public Object clone() {
         return this;
     }
-    
-    
+
+
     /**
      * Case sensitivity.
      */
@@ -974,6 +974,6 @@ public class ResourceAttributes implements Attributes {
     public boolean isCaseIgnored() {
         return false;
     }
-    
-    
+
+
 }

==================================================
WARDirContext.java
index 497db02509..db8b3ddaeb 100644
--- a/java/org/apache/naming/resources/ResourceCache.java
+++ b/java/org/apache/naming/resources/ResourceCache.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 package org.apache.naming.resources;
 
@@ -23,21 +23,21 @@ import java.util.Random;
 
 /**
  * Implements a special purpose cache.
- * 
+ *
  * @author <a href="mailto:remm@apache.org">Remy Maucherat</a>
  * @version $Revision$
  */
 public class ResourceCache {
-    
-    
+
+
     // ----------------------------------------------------------- Constructors
-    
-    
+
+
     public ResourceCache() {
         // NO-OP
     }
-    
-    
+
+
     // ----------------------------------------------------- Instance Variables
 
 
@@ -109,7 +109,7 @@ public class ResourceCache {
 
     /**
      * Return the access count.
-     * Note: Update is not synced, so the number may not be completely 
+     * Note: Update is not synced, so the number may not be completely
      * accurate.
      */
     public long getAccessCount() {
@@ -159,7 +159,7 @@ public class ResourceCache {
 
     /**
      * Return the number of cache hits.
-     * Note: Update is not synced, so the number may not be completely 
+     * Note: Update is not synced, so the number may not be completely
      * accurate.
      */
     public long getHitsCount() {
@@ -248,7 +248,7 @@ public class ResourceCache {
                         }
                     }
                 }
-                long entryAccessRatio = 
+                long entryAccessRatio =
                     ((cache[entryPos].accessCount * 100) / accessCount);
                 if (entryAccessRatio < desiredEntryAccessRatio) {
                     toRemove[entriesFound] = entryPos;
@@ -413,7 +413,7 @@ public class ResourceCache {
         if ((pos != -1) && (name.equals(oldCache[pos].name))) {
             CacheEntry[] newCache = new CacheEntry[cache.length - 1];
             System.arraycopy(oldCache, 0, newCache, 0, pos);
-            System.arraycopy(oldCache, pos + 1, newCache, pos, 
+            System.arraycopy(oldCache, pos + 1, newCache, pos,
                              oldCache.length - pos - 1);
             cache = newCache;
             return oldCache[pos];

==================================================
Handler.java
index 264be9f477..0340054087 100644
--- a/java/org/apache/naming/resources/WARDirContext.java
+++ b/java/org/apache/naming/resources/WARDirContext.java
@@ -5,15 +5,15 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
+ */
 
 
 package org.apache.naming.resources;
@@ -59,7 +59,7 @@ public class WARDirContext extends BaseDirContext {
 
     private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( WARDirContext.class );
-    
+
     // ----------------------------------------------------------- Constructors
 
 
@@ -109,9 +109,9 @@ public class WARDirContext extends BaseDirContext {
 
     /**
      * Set the document root.
-     * 
+     *
      * @param docBase The new document root
-     * 
+     *
      * @exception IllegalArgumentException if the specified value is not
      *  supported by this implementation
      * @exception IllegalArgumentException if this would create a
@@ -188,7 +188,7 @@ public class WARDirContext extends BaseDirContext {
 
     /**
      * Retrieves the named object.
-     * 
+     *
      * @param strName the name of the object to look up
      * @return the object bound to name
      */
@@ -208,7 +208,7 @@ public class WARDirContext extends BaseDirContext {
         Entry entry = treeLookup(name);
         if (entry == null)
             return null;
-            
+
         ZipEntry zipEntry = entry.getEntry();
         if (zipEntry.isDirectory())
             return new WARDirContext(base, entry);
@@ -222,25 +222,25 @@ public class WARDirContext extends BaseDirContext {
      * escaped as part of converting file names to JNDI names. Note that while
      * ' can be used in Windows and Unix file names, " is only valid on Unix.
      * This method assumes that the string is currently unquoted.
-     * 
+     *
      * @return  A valid JNDI name
-     * @throws InvalidNameException 
+     * @throws InvalidNameException
      */
     private Name getEscapedJndiName(String name) throws InvalidNameException {
         return new CompositeName(name.replace("'", "\\'").replace("\"", ""));
     }
 
     /**
-     * Unbinds the named object. Removes the terminal atomic name in name 
-     * from the target context--that named by all but the terminal atomic 
+     * Unbinds the named object. Removes the terminal atomic name in name
+     * from the target context--that named by all but the terminal atomic
      * part of name.
      * <p>
-     * This method is idempotent. It succeeds even if the terminal atomic 
-     * name is not bound in the target context, but throws 
-     * NameNotFoundException if any of the intermediate contexts do not exist. 
-     * 
+     * This method is idempotent. It succeeds even if the terminal atomic
+     * name is not bound in the target context, but throws
+     * NameNotFoundException if any of the intermediate contexts do not exist.
+     *
      * @param name the name to bind; may not be empty
-     * @exception NameNotFoundException if an intermediate context does not 
+     * @exception NameNotFoundException if an intermediate context does not
      * exist
      * @exception NamingException if a naming exception is encountered
      */
@@ -252,11 +252,11 @@ public class WARDirContext extends BaseDirContext {
 
 
     /**
-     * Binds a new name to the object bound to an old name, and unbinds the 
-     * old name. Both names are relative to this context. Any attributes 
-     * associated with the old name become associated with the new name. 
+     * Binds a new name to the object bound to an old name, and unbinds the
+     * old name. Both names are relative to this context. Any attributes
+     * associated with the old name become associated with the new name.
      * Intermediate contexts of the old name are not changed.
-     * 
+     *
      * @param oldName the name of the existing binding; may not be empty
      * @param newName the name of the new binding; may not be empty
      * @exception javax.naming.NameAlreadyBoundException if newName is already
@@ -271,15 +271,15 @@ public class WARDirContext extends BaseDirContext {
 
 
     /**
-     * Enumerates the names bound in the named context, along with the class 
-     * names of objects bound to them. The contents of any subcontexts are 
+     * Enumerates the names bound in the named context, along with the class
+     * names of objects bound to them. The contents of any subcontexts are
      * not included.
      * <p>
-     * If a binding is added to or removed from this context, its effect on 
+     * If a binding is added to or removed from this context, its effect on
      * an enumeration previously returned is undefined.
-     * 
+     *
      * @param name the name of the context to list
-     * @return an enumeration of the names and class names of the bindings in 
+     * @return an enumeration of the names and class names of the bindings in
      * this context. Each element of the enumeration is of type NameClassPair.
      * @exception NamingException if a naming exception is encountered
      */
@@ -291,15 +291,15 @@ public class WARDirContext extends BaseDirContext {
 
 
     /**
-     * Enumerates the names bound in the named context, along with the class 
-     * names of objects bound to them. The contents of any subcontexts are 
+     * Enumerates the names bound in the named context, along with the class
+     * names of objects bound to them. The contents of any subcontexts are
      * not included.
      * <p>
-     * If a binding is added to or removed from this context, its effect on 
+     * If a binding is added to or removed from this context, its effect on
      * an enumeration previously returned is undefined.
-     * 
+     *
      * @param name the name of the context to list
-     * @return an enumeration of the names and class names of the bindings in 
+     * @return an enumeration of the names and class names of the bindings in
      * this context. Each element of the enumeration is of type NameClassPair.
      * @exception NamingException if a naming exception is encountered
      */
@@ -317,22 +317,22 @@ public class WARDirContext extends BaseDirContext {
 
 
     /**
-     * Enumerates the names bound in the named context, along with the 
-     * objects bound to them. The contents of any subcontexts are not 
+     * Enumerates the names bound in the named context, along with the
+     * objects bound to them. The contents of any subcontexts are not
      * included.
      * <p>
-     * If a binding is added to or removed from this context, its effect on 
+     * If a binding is added to or removed from this context, its effect on
      * an enumeration previously returned is undefined.
-     * 
+     *
      * @param strName the name of the context to list
-     * @return an enumeration of the bindings in this context. 
+     * @return an enumeration of the bindings in this context.
      * Each element of the enumeration is of type Binding.
      * @exception NamingException if a naming exception is encountered
      */
     @Override
     protected List<NamingEntry> doListBindings(String strName)
         throws NamingException {
-        
+
         Name name = getEscapedJndiName(strName);
 
         if (name.isEmpty())
@@ -341,32 +341,32 @@ public class WARDirContext extends BaseDirContext {
         Entry entry = treeLookup(name);
         if (entry == null)
             return null;
-        
+
         return list(entry);
     }
 
 
     /**
-     * Destroys the named context and removes it from the namespace. Any 
-     * attributes associated with the name are also removed. Intermediate 
+     * Destroys the named context and removes it from the namespace. Any
+     * attributes associated with the name are also removed. Intermediate
      * contexts are not destroyed.
      * <p>
-     * This method is idempotent. It succeeds even if the terminal atomic 
-     * name is not bound in the target context, but throws 
-     * NameNotFoundException if any of the intermediate contexts do not exist. 
-     * 
-     * In a federated naming system, a context from one naming system may be 
-     * bound to a name in another. One can subsequently look up and perform 
-     * operations on the foreign context using a composite name. However, an 
-     * attempt destroy the context using this composite name will fail with 
-     * NotContextException, because the foreign context is not a "subcontext" 
-     * of the context in which it is bound. Instead, use unbind() to remove 
-     * the binding of the foreign context. Destroying the foreign context 
-     * requires that the destroySubcontext() be performed on a context from 
+     * This method is idempotent. It succeeds even if the terminal atomic
+     * name is not bound in the target context, but throws
+     * NameNotFoundException if any of the intermediate contexts do not exist.
+     *
+     * In a federated naming system, a context from one naming system may be
+     * bound to a name in another. One can subsequently look up and perform
+     * operations on the foreign context using a composite name. However, an
+     * attempt destroy the context using this composite name will fail with
+     * NotContextException, because the foreign context is not a "subcontext"
+     * of the context in which it is bound. Instead, use unbind() to remove
+     * the binding of the foreign context. Destroying the foreign context
+     * requires that the destroySubcontext() be performed on a context from
      * the foreign context's "native" naming system.
-     * 
+     *
      * @param name the name of the context to be destroyed; may not be empty
-     * @exception NameNotFoundException if an intermediate context does not 
+     * @exception NameNotFoundException if an intermediate context does not
      * exist
      * @exception javax.naming.NotContextException if the name is bound but does
      * not name a context, or does not name a context of the appropriate type
@@ -379,12 +379,12 @@ public class WARDirContext extends BaseDirContext {
 
 
     /**
-     * Retrieves the named object, following links except for the terminal 
-     * atomic component of the name. If the object bound to name is not a 
+     * Retrieves the named object, following links except for the terminal
+     * atomic component of the name. If the object bound to name is not a
      * link, returns the object itself.
-     * 
+     *
      * @param name the name of the object to look up
-     * @return the object bound to name, not following the terminal link 
+     * @return the object bound to name, not following the terminal link
      * (if any).
      * @exception NamingException if a naming exception is encountered
      */
@@ -399,17 +399,17 @@ public class WARDirContext extends BaseDirContext {
     /**
      * Retrieves the full name of this context within its own namespace.
      * <p>
-     * Many naming services have a notion of a "full name" for objects in 
-     * their respective namespaces. For example, an LDAP entry has a 
-     * distinguished name, and a DNS record has a fully qualified name. This 
-     * method allows the client application to retrieve this name. The string 
-     * returned by this method is not a JNDI composite name and should not be 
-     * passed directly to context methods. In naming systems for which the 
-     * notion of full name does not make sense, 
+     * Many naming services have a notion of a "full name" for objects in
+     * their respective namespaces. For example, an LDAP entry has a
+     * distinguished name, and a DNS record has a fully qualified name. This
+     * method allows the client application to retrieve this name. The string
+     * returned by this method is not a JNDI composite name and should not be
+     * passed directly to context methods. In naming systems for which the
+     * notion of full name does not make sense,
      * OperationNotSupportedException is thrown.
-     * 
+     *
      * @return this context's name in its own namespace; never null
-     * @exception OperationNotSupportedException if the naming system does 
+     * @exception OperationNotSupportedException if the naming system does
      * not have the notion of a full name
      * @exception NamingException if a naming exception is encountered
      */
@@ -424,14 +424,14 @@ public class WARDirContext extends BaseDirContext {
 
 
     /**
-     * Retrieves selected attributes associated with a named object. 
-     * See the class description regarding attribute models, attribute type 
+     * Retrieves selected attributes associated with a named object.
+     * See the class description regarding attribute models, attribute type
      * names, and operational attributes.
-     * 
+     *
      * @return the requested attributes; never null
      * @param name the name of the object from which to retrieve attributes
-     * @param attrIds the identifiers of the attributes to retrieve. null 
-     * indicates that all attributes should be retrieved; an empty array 
+     * @param attrIds the identifiers of the attributes to retrieve. null
+     * indicates that all attributes should be retrieved; an empty array
      * indicates that none should be retrieved
      * @exception NamingException if a naming exception is encountered
      */
@@ -443,9 +443,9 @@ public class WARDirContext extends BaseDirContext {
 
 
     /**
-     * Retrieves all of the attributes associated with a named object. 
-     * 
-     * @return the set of attributes associated with name. 
+     * Retrieves all of the attributes associated with a named object.
+     *
+     * @return the set of attributes associated with name.
      * Returns an empty attribute set if name has no attributes; never null.
      * @param name the name of the object from which to retrieve attributes
      * @exception NamingException if a naming exception is encountered
@@ -453,7 +453,7 @@ public class WARDirContext extends BaseDirContext {
     @Override
     public Attributes getAttributes(Name name, String[] attrIds)
         throws NamingException {
-        
+
         Entry entry = null;
         if (name.isEmpty())
             entry = entries;
@@ -461,7 +461,7 @@ public class WARDirContext extends BaseDirContext {
             entry = treeLookup(name);
         if (entry == null)
             return null;
-        
+
         ZipEntry zipEntry = entry.getEntry();
 
         ResourceAttributes attrs = new ResourceAttributes();
@@ -473,21 +473,21 @@ public class WARDirContext extends BaseDirContext {
             attrs.setCollection(true);
         attrs.setContentLength(zipEntry.getSize());
         attrs.setLastModified(zipEntry.getTime());
-        
+
         return attrs;
-        
+
     }
 
 
     /**
-     * Modifies the attributes associated with a named object. The order of 
-     * the modifications is not specified. Where possible, the modifications 
+     * Modifies the attributes associated with a named object. The order of
+     * the modifications is not specified. Where possible, the modifications
      * are performed atomically.
-     * 
+     *
      * @param name the name of the object whose attributes will be updated
-     * @param mod_op the modification operation, one of: ADD_ATTRIBUTE, 
+     * @param mod_op the modification operation, one of: ADD_ATTRIBUTE,
      * REPLACE_ATTRIBUTE, REMOVE_ATTRIBUTE
-     * @param attrs the attributes to be used for the modification; may not 
+     * @param attrs the attributes to be used for the modification; may not
      * be null
      * @exception javax.naming.directory.AttributeModificationException if the
      * modification cannot be completed successfully
@@ -501,14 +501,14 @@ public class WARDirContext extends BaseDirContext {
 
 
     /**
-     * Modifies the attributes associated with a named object using an an 
-     * ordered list of modifications. The modifications are performed in the 
-     * order specified. Each modification specifies a modification operation 
-     * code and an attribute on which to operate. Where possible, the 
+     * Modifies the attributes associated with a named object using an an
+     * ordered list of modifications. The modifications are performed in the
+     * order specified. Each modification specifies a modification operation
+     * code and an attribute on which to operate. Where possible, the
      * modifications are performed atomically.
-     * 
+     *
      * @param name the name of the object whose attributes will be updated
-     * @param mods an ordered sequence of modifications to be performed; may 
+     * @param mods an ordered sequence of modifications to be performed; may
      * not be null
      * @exception javax.naming.directory.AttributeModificationException if the
      * modification cannot be completed successfully
@@ -522,12 +522,12 @@ public class WARDirContext extends BaseDirContext {
 
 
     /**
-     * Binds a name to an object, along with associated attributes. If attrs 
-     * is null, the resulting binding will have the attributes associated 
-     * with obj if obj is a DirContext, and no attributes otherwise. If attrs 
-     * is non-null, the resulting binding will have attrs as its attributes; 
+     * Binds a name to an object, along with associated attributes. If attrs
+     * is null, the resulting binding will have the attributes associated
+     * with obj if obj is a DirContext, and no attributes otherwise. If attrs
+     * is non-null, the resulting binding will have attrs as its attributes;
      * any attributes associated with obj are ignored.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @param attrs the attributes to associate with the binding
@@ -545,16 +545,16 @@ public class WARDirContext extends BaseDirContext {
 
 
     /**
-     * Binds a name to an object, along with associated attributes, 
-     * overwriting any existing binding. If attrs is null and obj is a 
-     * DirContext, the attributes from obj are used. If attrs is null and obj 
+     * Binds a name to an object, along with associated attributes,
+     * overwriting any existing binding. If attrs is null and obj is a
+     * DirContext, the attributes from obj are used. If attrs is null and obj
      * is not a DirContext, any existing attributes associated with the object
-     * already bound in the directory remain unchanged. If attrs is non-null, 
-     * any existing attributes associated with the object already bound in 
-     * the directory are removed and attrs is associated with the named 
-     * object. If obj is a DirContext and attrs is non-null, the attributes 
+     * already bound in the directory remain unchanged. If attrs is non-null,
+     * any existing attributes associated with the object already bound in
+     * the directory are removed and attrs is associated with the named
+     * object. If obj is a DirContext and attrs is non-null, the attributes
      * of obj are ignored.
-     * 
+     *
      * @param name the name to bind; may not be empty
      * @param obj the object to bind; possibly null
      * @param attrs the attributes to associate with the binding
@@ -570,14 +570,14 @@ public class WARDirContext extends BaseDirContext {
 
 
     /**
-     * Creates and binds a new context, along with associated attributes. 
-     * This method creates a new subcontext with the given name, binds it in 
-     * the target context (that named by all but terminal atomic component of 
-     * the name), and associates the supplied attributes with the newly 
-     * created object. All intermediate and target contexts must already 
-     * exist. If attrs is null, this method is equivalent to 
+     * Creates and binds a new context, along with associated attributes.
+     * This method creates a new subcontext with the given name, binds it in
+     * the target context (that named by all but terminal atomic component of
+     * the name), and associates the supplied attributes with the newly
+     * created object. All intermediate and target contexts must already
+     * exist. If attrs is null, this method is equivalent to
      * Context.createSubcontext().
-     * 
+     *
      * @param name the name of the context to create; may not be empty
      * @param attrs the attributes to associate with the newly created context
      * @return the newly created context
@@ -595,13 +595,13 @@ public class WARDirContext extends BaseDirContext {
 
 
     /**
-     * Retrieves the schema associated with the named object. The schema 
-     * describes rules regarding the structure of the namespace and the 
-     * attributes stored within it. The schema specifies what types of 
-     * objects can be added to the directory and where they can be added; 
-     * what mandatory and optional attributes an object can have. The range 
+     * Retrieves the schema associated with the named object. The schema
+     * describes rules regarding the structure of the namespace and the
+     * attributes stored within it. The schema specifies what types of
+     * objects can be added to the directory and where they can be added;
+     * what mandatory and optional attributes an object can have. The range
      * of support for schemas is directory-specific.
-     * 
+     *
      * @param name the name of the object whose schema is to be retrieved
      * @return the schema associated with the context; never null
      * @exception OperationNotSupportedException if schema not supported
@@ -615,12 +615,12 @@ public class WARDirContext extends BaseDirContext {
 
 
     /**
-     * Retrieves a context containing the schema objects of the named 
+     * Retrieves a context containing the schema objects of the named
      * object's class definitions.
-     * 
-     * @param name the name of the object whose object class definition is to 
+     *
+     * @param name the name of the object whose object class definition is to
      * be retrieved
-     * @return the DirContext containing the named object's class 
+     * @return the DirContext containing the named object's class
      * definitions; never null
      * @exception OperationNotSupportedException if schema not supported
      * @exception NamingException if a naming exception is encountered
@@ -633,19 +633,19 @@ public class WARDirContext extends BaseDirContext {
 
 
     /**
-     * Searches in a single context for objects that contain a specified set 
-     * of attributes, and retrieves selected attributes. The search is 
+     * Searches in a single context for objects that contain a specified set
+     * of attributes, and retrieves selected attributes. The search is
      * performed using the default SearchControls settings.
-     * 
+     *
      * @param name the name of the context to search
-     * @param matchingAttributes the attributes to search for. If empty or 
+     * @param matchingAttributes the attributes to search for. If empty or
      * null, all objects in the target context are returned.
-     * @param attributesToReturn the attributes to return. null indicates 
-     * that all attributes are to be returned; an empty array indicates that 
+     * @param attributesToReturn the attributes to return. null indicates
+     * that all attributes are to be returned; an empty array indicates that
      * none are to be returned.
-     * @return a non-null enumeration of SearchResult objects. Each 
-     * SearchResult contains the attributes identified by attributesToReturn 
-     * and the name of the corresponding object, named relative to the 
+     * @return a non-null enumeration of SearchResult objects. Each
+     * SearchResult contains the attributes identified by attributesToReturn
+     * and the name of the corresponding object, named relative to the
      * context named by name.
      * @exception NamingException if a naming exception is encountered
      */
@@ -658,17 +658,17 @@ public class WARDirContext extends BaseDirContext {
 
 
     /**
-     * Searches in a single context for objects that contain a specified set 
-     * of attributes. This method returns all the attributes of such objects. 
-     * It is equivalent to supplying null as the atributesToReturn parameter 
+     * Searches in a single context for objects that contain a specified set
+     * of attributes. This method returns all the attributes of such objects.
+     * It is equivalent to supplying null as the atributesToReturn parameter
      * to the method search(Name, Attributes, String[]).
-     * 
+     *
      * @param name the name of the context to search
-     * @param matchingAttributes the attributes to search for. If empty or 
+     * @param matchingAttributes the attributes to search for. If empty or
      * null, all objects in the target context are returned.
-     * @return a non-null enumeration of SearchResult objects. Each 
-     * SearchResult contains the attributes identified by attributesToReturn 
-     * and the name of the corresponding object, named relative to the 
+     * @return a non-null enumeration of SearchResult objects. Each
+     * SearchResult contains the attributes identified by attributesToReturn
+     * and the name of the corresponding object, named relative to the
      * context named by name.
      * @exception NamingException if a naming exception is encountered
      */
@@ -680,17 +680,17 @@ public class WARDirContext extends BaseDirContext {
 
 
     /**
-     * Searches in the named context or object for entries that satisfy the 
-     * given search filter. Performs the search as specified by the search 
+     * Searches in the named context or object for entries that satisfy the
+     * given search filter. Performs the search as specified by the search
      * controls.
-     * 
+     *
      * @param name the name of the context or object to search
-     * @param filter the filter expression to use for the search; may not be 
+     * @param filter the filter expression to use for the search; may not be
      * null
-     * @param cons the search controls that control the search. If null, 
-     * the default search controls are used (equivalent to 
+     * @param cons the search controls that control the search. If null,
+     * the default search controls are used (equivalent to
      * (new SearchControls())).
-     * @return an enumeration of SearchResults of the objects that satisfy 
+     * @return an enumeration of SearchResults of the objects that satisfy
      * the filter; never null
      * @exception javax.naming.directory.InvalidSearchFilterException if the
      * search filter specified is not supported or understood by the underlying
@@ -700,7 +700,7 @@ public class WARDirContext extends BaseDirContext {
      * @exception NamingException if a naming exception is encountered
      */
     @Override
-    public NamingEnumeration<SearchResult> search(String name, String filter, 
+    public NamingEnumeration<SearchResult> search(String name, String filter,
                                     SearchControls cons)
         throws NamingException {
         throw new OperationNotSupportedException();
@@ -708,22 +708,22 @@ public class WARDirContext extends BaseDirContext {
 
 
     /**
-     * Searches in the named context or object for entries that satisfy the 
-     * given search filter. Performs the search as specified by the search 
+     * Searches in the named context or object for entries that satisfy the
+     * given search filter. Performs the search as specified by the search
      * controls.
-     * 
+     *
      * @param name the name of the context or object to search
-     * @param filterExpr the filter expression to use for the search. 
-     * The expression may contain variables of the form "{i}" where i is a 
+     * @param filterExpr the filter expression to use for the search.
+     * The expression may contain variables of the form "{i}" where i is a
      * nonnegative integer. May not be null.
-     * @param filterArgs the array of arguments to substitute for the 
-     * variables in filterExpr. The value of filterArgs[i] will replace each 
+     * @param filterArgs the array of arguments to substitute for the
+     * variables in filterExpr. The value of filterArgs[i] will replace each
      * occurrence of "{i}". If null, equivalent to an empty array.
-     * @param cons the search controls that control the search. If null, the 
+     * @param cons the search controls that control the search. If null, the
      * default search controls are used (equivalent to (new SearchControls())).
-     * @return an enumeration of SearchResults of the objects that satisfy the 
+     * @return an enumeration of SearchResults of the objects that satisfy the
      * filter; never null
-     * @exception ArrayIndexOutOfBoundsException if filterExpr contains {i} 
+     * @exception ArrayIndexOutOfBoundsException if filterExpr contains {i}
      * expressions where i is outside the bounds of the array filterArgs
      * @exception javax.naming.directory.InvalidSearchControlsException if cons
      * contains invalid settings
@@ -732,7 +732,7 @@ public class WARDirContext extends BaseDirContext {
      * @exception NamingException if a naming exception is encountered
      */
     @Override
-    public NamingEnumeration<SearchResult> search(String name, String filterExpr, 
+    public NamingEnumeration<SearchResult> search(String name, String filterExpr,
                                     Object[] filterArgs, SearchControls cons)
         throws NamingException {
         throw new OperationNotSupportedException();
@@ -765,9 +765,9 @@ public class WARDirContext extends BaseDirContext {
 
             Enumeration<? extends ZipEntry> entryList = base.entries();
             entries = new Entry("/", new ZipEntry("/"));
-            
+
             while (entryList.hasMoreElements()) {
-                
+
                 ZipEntry entry = entryList.nextElement();
                 String name = normalize(entry);
                 int pos = name.lastIndexOf('/');
@@ -803,7 +803,7 @@ public class WARDirContext extends BaseDirContext {
                 Entry child = new Entry(entryName, entry);
                 if (parent != null)
                     parent.addChild(child);
-                
+
             }
 
         } catch (Exception e) {
@@ -835,12 +835,12 @@ public class WARDirContext extends BaseDirContext {
      * List children as objects.
      */
     protected ArrayList<NamingEntry> list(Entry entry) {
-        
+
         ArrayList<NamingEntry> entries = new ArrayList<NamingEntry>();
         Entry[] children = entry.getChildren();
         Arrays.sort(children);
         NamingEntry namingEntry = null;
-        
+
         for (int i = 0; i < children.length; i++) {
             ZipEntry current = children[i].getEntry();
             Object object = null;
@@ -853,9 +853,9 @@ public class WARDirContext extends BaseDirContext {
                 (children[i].getName(), object, NamingEntry.ENTRY);
             entries.add(namingEntry);
         }
-        
+
         return entries;
-        
+
     }
 
 
@@ -869,29 +869,29 @@ public class WARDirContext extends BaseDirContext {
 
 
         // -------------------------------------------------------- Constructor
-        
-        
+
+
         public Entry(String name, ZipEntry entry) {
             this.name = name;
             this.entry = entry;
         }
-        
-        
+
+
         // --------------------------------------------------- Member Variables
-        
-        
+
+
         protected String name = null;
-        
-        
+
+
         protected ZipEntry entry = null;
-        
-        
+
+
         protected Entry children[] = new Entry[0];
-        
-        
+
+
         // ----------------------------------------------------- Public Methods
-        
-        
+
+
         @Override
         public int compareTo(Object o) {
             if (!(o instanceof Entry))
@@ -905,7 +905,7 @@ public class WARDirContext extends BaseDirContext {
                 return false;
             return name.equals(((Entry) o).getName());
         }
-        
+
         @Override
         public int hashCode() {
             return name.hashCode();
@@ -914,13 +914,13 @@ public class WARDirContext extends BaseDirContext {
         public ZipEntry getEntry() {
             return entry;
         }
-        
-        
+
+
         public String getName() {
             return name;
         }
-        
-        
+
+
         public void addChild(Entry entry) {
             Entry[] newChildren = new Entry[children.length + 1];
             for (int i = 0; i < children.length; i++)
@@ -956,28 +956,28 @@ public class WARDirContext extends BaseDirContext {
      * to the WAR right away.
      */
     protected class WARResource extends Resource {
-        
-        
+
+
         // -------------------------------------------------------- Constructor
-        
-        
+
+
         public WARResource(ZipEntry entry) {
             this.entry = entry;
         }
-        
-        
+
+
         // --------------------------------------------------- Member Variables
-        
-        
+
+
         protected ZipEntry entry;
-        
-        
+
+
         // ----------------------------------------------------- Public Methods
-        
-        
+
+
         /**
          * Content accessor.
-         * 
+         *
          * @return InputStream
          */
         @Override
@@ -994,8 +994,8 @@ public class WARDirContext extends BaseDirContext {
             }
             return super.streamContent();
         }
-        
-        
+
+
     }
 
 

==================================================
