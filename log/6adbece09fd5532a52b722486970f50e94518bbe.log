6adbece09fd5532a52b722486970f50e94518bbe
==================================================
Rename method as it is used more widely than just async processing
==================================================
Mark Emlyn
==================================================
Fri Oct 4 10:52:24 2013 +0000
==================================================
AbstractAjpProcessor.java
Rename method as it is used more widely than just async processing

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1529128 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index f2653f39c4..1af0ebb33e 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
@@ -522,12 +522,12 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
         } else if (actionCode == ActionCode.ASYNC_COMPLETE) {
             socketWrapper.clearDispatches();
             if (asyncStateMachine.asyncComplete()) {
-                endpoint.processSocketAsync(socketWrapper, SocketStatus.OPEN_READ);
+                endpoint.processSocket(socketWrapper, SocketStatus.OPEN_READ);
             }
 
         } else if (actionCode == ActionCode.ASYNC_DISPATCH) {
             if (asyncStateMachine.asyncDispatch()) {
-                endpoint.processSocketAsync(socketWrapper, SocketStatus.OPEN_READ);
+                endpoint.processSocket(socketWrapper, SocketStatus.OPEN_READ);
             }
 
         } else if (actionCode == ActionCode.ASYNC_DISPATCHED) {

==================================================
Http11Processor.java
index 36b1a931cc..695de44c82 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -463,14 +463,14 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
         } else if (actionCode == ActionCode.COMET_END) {
             comet = false;
         } else if (actionCode == ActionCode.COMET_CLOSE) {
-            ((AprEndpoint)endpoint).processSocketAsync(this.socketWrapper,
+            ((AprEndpoint)endpoint).processSocket(this.socketWrapper,
                     SocketStatus.OPEN_READ);
         } else if (actionCode == ActionCode.COMET_SETTIMEOUT) {
             //no op
         } else if (actionCode == ActionCode.ASYNC_COMPLETE) {
             socketWrapper.clearDispatches();
             if (asyncStateMachine.asyncComplete()) {
-                ((AprEndpoint)endpoint).processSocketAsync(this.socketWrapper,
+                ((AprEndpoint)endpoint).processSocket(this.socketWrapper,
                         SocketStatus.OPEN_READ);
             }
         } else if (actionCode == ActionCode.ASYNC_SETTIMEOUT) {
@@ -481,7 +481,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
             socketWrapper.setTimeout(timeout);
         } else if (actionCode == ActionCode.ASYNC_DISPATCH) {
             if (asyncStateMachine.asyncDispatch()) {
-                ((AprEndpoint)endpoint).processSocketAsync(this.socketWrapper,
+                ((AprEndpoint)endpoint).processSocket(this.socketWrapper,
                         SocketStatus.OPEN_READ);
             }
         }

==================================================
AbstractEndpoint.java
index e9d7aa4375..e4b270eb2b 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -371,7 +371,7 @@ public class Http11Processor extends AbstractHttp11Processor<Socket> {
         } else if (actionCode == ActionCode.ASYNC_COMPLETE) {
             socketWrapper.clearDispatches();
             if (asyncStateMachine.asyncComplete()) {
-                ((JIoEndpoint) endpoint).processSocketAsync(this.socketWrapper,
+                ((JIoEndpoint) endpoint).processSocket(this.socketWrapper,
                         SocketStatus.OPEN_READ);
             }
         } else if (actionCode == ActionCode.ASYNC_SETTIMEOUT) {
@@ -381,7 +381,7 @@ public class Http11Processor extends AbstractHttp11Processor<Socket> {
             socketWrapper.setTimeout(timeout);
         } else if (actionCode == ActionCode.ASYNC_DISPATCH) {
             if (asyncStateMachine.asyncDispatch()) {
-                ((JIoEndpoint) endpoint).processSocketAsync(this.socketWrapper,
+                ((JIoEndpoint) endpoint).processSocket(this.socketWrapper,
                         SocketStatus.OPEN_READ);
             }
         }

==================================================
AprEndpoint.java
index 4d34f9733d..27b359c8bf 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -621,7 +621,15 @@ public abstract class AbstractEndpoint<S> {
 
     // ---------------------------------------------- Request processing methods
 
-    public abstract void processSocketAsync(SocketWrapper<S> socketWrapper,
+    /**
+     * Process the given SocketWrapper with the given status. Used to trigger
+     * processing as if the Poller (for those endpoints that have one)
+     * selected the socket.
+     *
+     * @param socketWrapper The socket wrapper to process
+     * @param socketStatus  The input status to the processing
+     */
+    public abstract void processSocket(SocketWrapper<S> socketWrapper,
             SocketStatus socketStatus);
 
 

==================================================
JIoEndpoint.java
index d353d98fd1..a81b0c8e02 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -852,7 +852,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
 
 
     @Override
-    public void processSocketAsync(SocketWrapper<Long> socket,
+    public void processSocket(SocketWrapper<Long> socket,
             SocketStatus status) {
         try {
             synchronized (socket) {
@@ -1065,7 +1065,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
                         long access = socket.getLastAccess();
                         if (socket.getTimeout() > 0 &&
                                 (now-access)>socket.getTimeout()) {
-                            processSocketAsync(socket,SocketStatus.TIMEOUT);
+                            processSocket(socket,SocketStatus.TIMEOUT);
                         }
                     }
                 }

==================================================
NioEndpoint.java
index cd518cfc9d..0942ef64b3 100644
--- a/java/org/apache/tomcat/util/net/JIoEndpoint.java
+++ b/java/org/apache/tomcat/util/net/JIoEndpoint.java
@@ -169,7 +169,7 @@ public class JIoEndpoint extends AbstractEndpoint<Socket> {
                     long access = socket.getLastAccess();
                     if (socket.getTimeout() > 0 &&
                             (now-access)>socket.getTimeout()) {
-                        processSocketAsync(socket,SocketStatus.TIMEOUT);
+                        processSocket(socket,SocketStatus.TIMEOUT);
                     }
                 }
 
@@ -559,7 +559,7 @@ public class JIoEndpoint extends AbstractEndpoint<Socket> {
      *                  Connector.
      */
     @Override
-    public void processSocketAsync(SocketWrapper<Socket> socket,
+    public void processSocket(SocketWrapper<Socket> socket,
             SocketStatus status) {
         try {
             synchronized (socket) {

==================================================
