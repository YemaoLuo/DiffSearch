588896cf0ce0ac59bd3f72223ab82f0a172fc18e
==================================================
Use the getter
==================================================
Mark Emlyn
==================================================
Thu Aug 16 20:18:28 2012 +0000
==================================================
AbstractProtocol.java
Use the getter

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1374035 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpAprProtocol.java
index c77464a3d8..367fa4712d 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -360,7 +360,7 @@ public abstract class AbstractProtocol implements ProtocolHandler,
 
     private ObjectName createObjectName() throws MalformedObjectNameException {
         // Use the same domain as the connector
-        domain = adapter.getDomain();
+        domain = getAdapter().getDomain();
 
         if (domain == null) {
             return null;

==================================================
AjpNioProtocol.java
index cc7bcf979d..14a1dec6ba 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -143,7 +143,7 @@ public class AjpAprProtocol extends AbstractAjpProtocol {
         @Override
         protected AjpAprProcessor createProcessor() {
             AjpAprProcessor processor = new AjpAprProcessor(proto.packetSize, (AprEndpoint)proto.endpoint);
-            processor.setAdapter(proto.adapter);
+            processor.setAdapter(proto.getAdapter());
             processor.setTomcatAuthentication(proto.tomcatAuthentication);
             processor.setRequiredSecret(proto.requiredSecret);
             processor.setClientCertProvider(proto.getClientCertProvider());

==================================================
AjpProtocol.java
index 5cb5b977c7..897c51bd9c 100644
--- a/java/org/apache/coyote/ajp/AjpNioProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpNioProtocol.java
@@ -172,7 +172,7 @@ public class AjpNioProtocol extends AbstractAjpProtocol {
         @Override
         protected AjpNioProcessor createProcessor() {
             AjpNioProcessor processor = new AjpNioProcessor(proto.packetSize, (NioEndpoint)proto.endpoint);
-            processor.setAdapter(proto.adapter);
+            processor.setAdapter(proto.getAdapter());
             processor.setTomcatAuthentication(proto.tomcatAuthentication);
             processor.setRequiredSecret(proto.requiredSecret);
             processor.setClientCertProvider(proto.getClientCertProvider());

==================================================
Http11AprProtocol.java
index 30b53adbec..c4ef0e62ed 100644
--- a/java/org/apache/coyote/ajp/AjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpProtocol.java
@@ -132,7 +132,7 @@ public class AjpProtocol extends AbstractAjpProtocol {
         @Override
         protected AjpProcessor createProcessor() {
             AjpProcessor processor = new AjpProcessor(proto.packetSize, (JIoEndpoint)proto.endpoint);
-            processor.setAdapter(proto.adapter);
+            processor.setAdapter(proto.getAdapter());
             processor.setTomcatAuthentication(proto.tomcatAuthentication);
             processor.setRequiredSecret(proto.requiredSecret);
             processor.setKeepAliveTimeout(proto.getKeepAliveTimeout());

==================================================
Http11NioProtocol.java
index ca5a02eada..5b8060c81a 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -203,7 +203,7 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
         super.start();
         if (npnHandler != null) {
             long sslCtx = ((AprEndpoint) endpoint).getJniSslContext();
-            npnHandler.init(endpoint, sslCtx, adapter);
+            npnHandler.init(endpoint, sslCtx, getAdapter());
         }
     }
 
@@ -309,7 +309,7 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
             Http11AprProcessor processor = new Http11AprProcessor(
                     proto.getMaxHttpHeaderSize(), (AprEndpoint)proto.endpoint,
                     proto.getMaxTrailerSize());
-            processor.setAdapter(proto.adapter);
+            processor.setAdapter(proto.getAdapter());
             processor.setMaxKeepAliveRequests(proto.getMaxKeepAliveRequests());
             processor.setKeepAliveTimeout(proto.getKeepAliveTimeout());
             processor.setConnectionUploadTimeout(

==================================================
Http11Protocol.java
index 2ee3c39879..6fe35ddcf8 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -80,7 +80,7 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
     public void start() throws Exception {
         super.start();
         if (npnHandler != null) {
-            npnHandler.init(getEndpoint(), 0, adapter);
+            npnHandler.init(getEndpoint(), 0, getAdapter());
         }
     }
 
@@ -283,7 +283,7 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
             Http11NioProcessor processor = new Http11NioProcessor(
                     proto.getMaxHttpHeaderSize(), (NioEndpoint)proto.endpoint,
                     proto.getMaxTrailerSize());
-            processor.setAdapter(proto.adapter);
+            processor.setAdapter(proto.getAdapter());
             processor.setMaxKeepAliveRequests(proto.getMaxKeepAliveRequests());
             processor.setKeepAliveTimeout(proto.getKeepAliveTimeout());
             processor.setConnectionUploadTimeout(

==================================================
SpdyProxyProtocol.java
index ee92dacd37..402ece2ebe 100644
--- a/java/org/apache/coyote/http11/Http11Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Protocol.java
@@ -95,7 +95,7 @@ public class Http11Protocol extends AbstractHttp11JsseProtocol<Socket> {
     public void start() throws Exception {
         super.start();
         if (npnHandler != null) {
-            npnHandler.init(endpoint, 0, adapter);
+            npnHandler.init(endpoint, 0, getAdapter());
         }
     }
 
@@ -186,7 +186,7 @@ public class Http11Protocol extends AbstractHttp11JsseProtocol<Socket> {
             Http11Processor processor = new Http11Processor(
                     proto.getMaxHttpHeaderSize(), (JIoEndpoint)proto.endpoint,
                     proto.getMaxTrailerSize());
-            processor.setAdapter(proto.adapter);
+            processor.setAdapter(proto.getAdapter());
             processor.setMaxKeepAliveRequests(proto.getMaxKeepAliveRequests());
             processor.setKeepAliveTimeout(proto.getKeepAliveTimeout());
             processor.setConnectionUploadTimeout(

==================================================
