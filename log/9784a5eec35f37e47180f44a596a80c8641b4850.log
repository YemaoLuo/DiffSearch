9784a5eec35f37e47180f44a596a80c8641b4850
==================================================
Fix for 
==================================================
Filip Hanik
==================================================
Mon Feb 13 19:07:30 2012 +0000
==================================================
SlowQueryReport.java
Fix for 
https://issues.apache.org/bugzilla/show_bug.cgi?id=51582




git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1243655 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Bug51582.java
index 2b6582f2ff..81ad0dbec5 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
@@ -49,7 +49,7 @@ public class SlowQueryReport extends AbstractQueryReport  {
     /**
      * the queries that are used for this interceptor.
      */
-    protected ConcurrentHashMap<String,QueryStats> queries = null;
+    protected volatile ConcurrentHashMap<String,QueryStats> queries = null;
     /**
      * Maximum number of queries we will be storing
      */
@@ -104,7 +104,7 @@ public class SlowQueryReport extends AbstractQueryReport  {
      */
     @Override
     public void closeInvoked() {
-        queries = null;
+        
     }
 
     @Override
@@ -186,6 +186,8 @@ public class SlowQueryReport extends AbstractQueryReport  {
         super.reset(parent, con);
         if (parent!=null)
             queries = SlowQueryReport.perPoolStats.get(parent.getName());
+        else 
+            queries = null;
     }
 
 

==================================================
InduceSlowQuery.java
new file mode 100644
index 0000000000..4e55b9d1e0
--- /dev/null
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/bugs/Bug51582.java
@@ -0,0 +1,121 @@
+package org.apache.tomcat.jdbc.bugs;
+
+import java.sql.CallableStatement;
+import java.sql.Connection;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.tomcat.jdbc.pool.ConnectionPool;
+import org.apache.tomcat.jdbc.pool.PoolConfiguration;
+import org.apache.tomcat.jdbc.pool.PoolProperties;
+import org.apache.tomcat.jdbc.test.DefaultProperties;
+
+
+public class Bug51582
+{
+
+  /**
+   * @param args
+   * @throws SQLException
+   */
+  public static void main(String[] args) throws SQLException
+  {
+    org.apache.tomcat.jdbc.pool.DataSource datasource = null;
+    PoolConfiguration p = new DefaultProperties();
+
+    p.setJmxEnabled(true);
+    p.setTestOnBorrow(false);
+    p.setTestOnReturn(false);
+    p.setValidationInterval(1000);
+    p.setTimeBetweenEvictionRunsMillis(2000);
+
+    p.setMaxWait(2000);
+    p.setMinEvictableIdleTimeMillis(1000);
+
+    datasource = new org.apache.tomcat.jdbc.pool.DataSource();
+    datasource.setPoolProperties(p);
+    datasource.setJdbcInterceptors("org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReportJmx(threshold=200)");
+    ConnectionPool pool = datasource.createPool();
+    
+    
+    Connection con = pool.getConnection();
+    Statement st = con.createStatement();
+    try {
+        st.execute("DROP ALIAS SLEEP");
+    }catch (Exception ignore) {}
+    st.execute("CREATE ALIAS SLEEP AS $$\nboolean sleep() {\n        try {\n            Thread.sleep(10000);\n            return true;        } catch (Exception x) {\n            return false;\n        }\n}\n$$;");
+    st.close();
+    con.close();
+    int iter = 0;
+    while ((iter++) < 10)
+    {
+      final Connection connection = pool.getConnection();
+      final CallableStatement s = connection.prepareCall("{CALL SLEEP()}");
+
+      List<Thread> threadList = new ArrayList<Thread>();
+
+      for (int l = 0; l < 3; l++)
+      {
+        final int i = l;
+
+        Thread thread = new Thread()
+        {
+          @Override
+          public void run()
+          {
+            try
+            {
+              if (i == 0)
+              {
+                Thread.sleep(1000);
+                s.cancel();
+              }
+              else if (i == 1)
+              {
+                //or use some other statement which will block for a longer time
+                long start = System.currentTimeMillis();
+                System.out.println("["+getName()+"] Calling SP SLEEP");
+                s.execute();
+                System.out.println("["+getName()+"] Executed SP SLEEP ["+(System.currentTimeMillis()-start)+"]");
+              }
+              else
+              {
+                Thread.sleep(1000);
+                connection.close();
+              }
+            }
+            catch (InterruptedException e)
+            {
+
+            }
+            catch (SQLException e)
+            {
+              e.printStackTrace();
+            }
+
+          };
+
+        };
+        threadList.add(thread);
+        thread.start();
+      }
+      for (Thread t : threadList)
+      {
+        try
+        {
+          t.join();
+        }
+        catch (InterruptedException e)
+        {
+          // TODO Auto-generated catch block
+          e.printStackTrace();
+        }
+      }
+
+    }
+
+
+  }
+}

==================================================
