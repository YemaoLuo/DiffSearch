7088d76925117063127ff70db23863f686b56099
==================================================
Remove deprecated code - align with EL 6.0 development
==================================================
Mark Thomas
==================================================
Wed Oct 19 13:45:47 2022 +0100
==================================================
ImportELResolver.java
Remove deprecated code - align with EL 6.0 development


==================================================
NotFoundELResolver.java
index 535e877a60..6e2cd81f75 100644
--- a/java/jakarta/servlet/jsp/el/ImportELResolver.java
+++ b/java/jakarta/servlet/jsp/el/ImportELResolver.java
@@ -16,9 +16,6 @@
  */
 package jakarta.servlet.jsp.el;
 
-import java.beans.FeatureDescriptor;
-import java.util.Collections;
-import java.util.Iterator;
 import java.util.Objects;
 
 import jakarta.el.ELClass;
@@ -127,12 +124,6 @@ public class ImportELResolver extends ELResolver {
         return false;
     }
 
-    @Deprecated(forRemoval = true, since = "JSP 3.1")
-    @Override
-    public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
-        return Collections.emptyIterator();
-    }
-
     @Override
     public Class<String> getCommonPropertyType(ELContext context, Object base) {
         // In normal usage, ScopedAttributeELResolver will have responded.

==================================================
StreamELResolverImpl.java
index 517758fea2..23645abd6f 100644
--- a/java/jakarta/servlet/jsp/el/NotFoundELResolver.java
+++ b/java/jakarta/servlet/jsp/el/NotFoundELResolver.java
@@ -16,9 +16,6 @@
  */
 package jakarta.servlet.jsp.el;
 
-import java.beans.FeatureDescriptor;
-import java.util.Collections;
-import java.util.Iterator;
 import java.util.Objects;
 import java.util.ResourceBundle;
 
@@ -106,12 +103,6 @@ public class NotFoundELResolver extends ELResolver {
         return false;
     }
 
-    @Deprecated(forRemoval = true, since = "JSP 3.1")
-    @Override
-    public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
-        return Collections.emptyIterator();
-    }
-
     /**
      * {@inheritDoc}
      * <p>

==================================================
JasperELResolver.java
index 78b874b5b3..1d228ea0ab 100644
--- a/java/org/apache/el/stream/StreamELResolverImpl.java
+++ b/java/org/apache/el/stream/StreamELResolverImpl.java
@@ -16,7 +16,6 @@
  */
 package org.apache.el.stream;
 
-import java.beans.FeatureDescriptor;
 import java.lang.reflect.Array;
 import java.util.Collection;
 import java.util.Iterator;
@@ -48,13 +47,6 @@ public class StreamELResolverImpl extends ELResolver {
         return false;
     }
 
-    @Deprecated(forRemoval = true, since = "Tomcat 10.1.0")
-    @Override
-    public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context,
-            Object base) {
-        return null;
-    }
-
     @Override
     public Class<?> getCommonPropertyType(ELContext context, Object base) {
         return null;

==================================================
TestArrayELResolver.java
index 7b7a95c30c..c29d3e1bf4 100644
--- a/java/org/apache/jasper/el/JasperELResolver.java
+++ b/java/org/apache/jasper/el/JasperELResolver.java
@@ -16,9 +16,7 @@
  */
 package org.apache.jasper.el;
 
-import java.beans.FeatureDescriptor;
 import java.lang.reflect.Method;
-import java.util.Iterator;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
 
@@ -283,12 +281,6 @@ public class JasperELResolver extends CompositeELResolver {
             return null;
         }
 
-        @Override
-        public Iterator<FeatureDescriptor> getFeatureDescriptors(
-                ELContext context, Object base) {
-            return null;
-        }
-
         @Override
         public Class<?> getCommonPropertyType(ELContext context, Object base) {
             return null;

==================================================
TestBeanELResolver.java
index 00dda1c2d4..bc359fcd89 100644
--- a/test/jakarta/el/TestArrayELResolver.java
+++ b/test/jakarta/el/TestArrayELResolver.java
@@ -519,15 +519,6 @@ public class TestArrayELResolver {
     }
 
 
-    @Deprecated(forRemoval = true, since = "Tomcat 10.1.0")
-    @Test
-    public void testGetFeatureDescriptors() {
-        // Should always return null
-        ArrayELResolver resolver = new ArrayELResolver();
-        Assert.assertNull(resolver.getFeatureDescriptors(null, null));
-    }
-
-
     @Test
     public void testGetCommonPropertyType01() {
         // null base, null response

==================================================
TestBeanNameELResolver.java
index f32fe3ed38..f4eb5103ee 100644
--- a/test/jakarta/el/TestBeanELResolver.java
+++ b/test/jakarta/el/TestBeanELResolver.java
@@ -16,10 +16,7 @@
  */
 package jakarta.el;
 
-import java.beans.FeatureDescriptor;
-import java.beans.PropertyDescriptor;
 import java.util.ArrayList;
-import java.util.Iterator;
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.IsInstanceOf.instanceOf;
@@ -366,41 +363,6 @@ public class TestBeanELResolver {
         Assert.assertTrue(context.isPropertyResolved());
     }
 
-    /**
-     * Tests that a valid FeatureDescriptors are not returned if base is not
-     * Map.
-     */
-    @Deprecated(forRemoval = true, since = "Tomcat 10.1.0")
-    @Test
-    public void testGetFeatureDescriptors01() {
-        BeanELResolver resolver = new BeanELResolver();
-        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
-
-        Iterator<FeatureDescriptor> result = resolver.getFeatureDescriptors(context, null);
-
-        Assert.assertNull(result);
-    }
-
-    /**
-     * Tests that a valid FeatureDescriptors are returned.
-     */
-    @Deprecated(forRemoval = true, since = "Tomcat 10.1.0")
-    @Test
-    public void testGetFeatureDescriptors02() {
-        BeanELResolver resolver = new BeanELResolver();
-        ELContext context = new StandardELContext(ELManager.getExpressionFactory());
-
-        Iterator<FeatureDescriptor> result = resolver.getFeatureDescriptors(context, new Bean());
-
-        while (result.hasNext()) {
-            PropertyDescriptor featureDescriptor = (PropertyDescriptor) result.next();
-            Assert.assertEquals(featureDescriptor.getPropertyType(),
-                    featureDescriptor.getValue(ELResolver.TYPE));
-            Assert.assertEquals(Boolean.TRUE,
-                    featureDescriptor.getValue(ELResolver.RESOLVABLE_AT_DESIGN_TIME));
-        }
-    }
-
     /**
      * Tests that a null context results in an NPE as per EL Javadoc.
      */

==================================================
TestMapELResolver.java
index ca9ca22051..bc92c5456c 100644
--- a/test/jakarta/el/TestBeanNameELResolver.java
+++ b/test/jakarta/el/TestBeanNameELResolver.java
@@ -468,35 +468,6 @@ public class TestBeanNameELResolver {
     }
 
 
-    /**
-     * Confirm it returns null for 'valid' input.
-     */
-    @Deprecated(forRemoval = true, since = "Tomcat 10.1.0")
-    public void testGetFeatureDescriptors01() {
-        BeanNameELResolver resolver = createBeanNameELResolver();
-        ELContext context =
-                new StandardELContext(ELManager.getExpressionFactory());
-
-        Object result = resolver.getFeatureDescriptors(context, null);
-
-        Assert.assertNull(result);
-        Assert.assertFalse(context.isPropertyResolved());
-    }
-
-
-    /**
-     * Confirm it returns null for invalid input.
-     */
-    @Deprecated(forRemoval = true, since = "Tomcat 10.1.0")
-    public void testGetFeatureDescriptors02() {
-        BeanNameELResolver resolver = createBeanNameELResolver();
-
-        Object result = resolver.getFeatureDescriptors(null, new Object());
-
-        Assert.assertNull(result);
-    }
-
-
     /**
      * Confirm it returns String.class for 'valid' input.
      */

==================================================
TestResourceBundleELResolver.java
index e2d0c9e447..d776f5d8b2 100644
--- a/test/jakarta/el/TestMapELResolver.java
+++ b/test/jakarta/el/TestMapELResolver.java
@@ -16,10 +16,8 @@
  */
 package jakarta.el;
 
-import java.beans.FeatureDescriptor;
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.Map;
 
 import org.junit.Assert;
@@ -235,53 +233,6 @@ public class TestMapELResolver {
         Assert.assertTrue(context.isPropertyResolved());
     }
 
-    /**
-     * Tests that a valid FeatureDescriptors are not returned if base is not
-     * Map.
-     */
-    @Deprecated(forRemoval = true, since = "Tomcat 10.1.0")
-    @Test
-    public void testGetFeatureDescriptors01() {
-        MapELResolver mapELResolver = new MapELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
-
-        Iterator<FeatureDescriptor> result = mapELResolver
-                .getFeatureDescriptors(context, new Object());
-
-        Assert.assertNull(result);
-    }
-
-    /**
-     * Tests that a valid FeatureDescriptors are returned.
-     */
-    @Deprecated(forRemoval = true, since = "Tomcat 10.1.0")
-    @Test
-    public void testGetFeatureDescriptors02() {
-        MapELResolver mapELResolver = new MapELResolver();
-        ELContext context = new StandardELContext(
-                ELManager.getExpressionFactory());
-
-        Map<String, String> map = new HashMap<>();
-        map.put("key", "value");
-        Iterator<FeatureDescriptor> result = mapELResolver
-                .getFeatureDescriptors(context, map);
-
-        while (result.hasNext()) {
-            FeatureDescriptor featureDescriptor = result.next();
-            Assert.assertEquals("key", featureDescriptor.getDisplayName());
-            Assert.assertEquals("key", featureDescriptor.getName());
-            Assert.assertEquals("", featureDescriptor.getShortDescription());
-            Assert.assertFalse(featureDescriptor.isExpert());
-            Assert.assertFalse(featureDescriptor.isHidden());
-            Assert.assertTrue(featureDescriptor.isPreferred());
-            Assert.assertEquals("key".getClass(),
-                    featureDescriptor.getValue(ELResolver.TYPE));
-            Assert.assertEquals(Boolean.TRUE, featureDescriptor
-                    .getValue(ELResolver.RESOLVABLE_AT_DESIGN_TIME));
-        }
-    }
-
     private void doNegativeTest(Object base, Object trigger,
             MethodUnderTest method, boolean checkResult) {
         MapELResolver resolver = new MapELResolver();

==================================================
