e54267a3f71d29f9f850ed9966e7be9612f219d4
==================================================
Fix 64735 ServletContext.addJspFile() always fails with SecurityManager
==================================================
Kyle Stiemann
==================================================
0400
==================================================
ApplicationContextFacade.java
index c5c79cb917..1ab4af568a 100644
--- a/build.xml
+++ b/build.xml
@@ -1978,8 +1978,21 @@
             <exclude name="**/*Performance.java" if="${test.excludePerformance}" />
             <!-- Exclude tests that Gump can't compile -->
             <exclude name="org/apache/tomcat/buildutil/**" />
+            <!--
+              Avoid running tests which require the SecurityManager with other
+              tests. See below for more details.
+            -->
+            <exclude name="**/*SecurityManager.java" />
           </fileset>
         </batchtest>
+        <!--
+           Run tests which require the SecurityManager in their own forked
+           batch to ensure that global/system security settings don't pollute
+           other tests. See SecurityManagerBaseTest.java for more details.
+        -->
+        <batchtest todir="${test.reports}" unless="test.entry" fork="true">
+          <fileset dir="test" includes="**/SecurityManager.java" excludes="${test.exclude}" />
+        </batchtest>
       </junit>
     </sequential>
   </macrodef>

==================================================
TestApplicationContextFacadeSecurityManager.java
index 5dd3a37f32..ef004c61db 100644
--- a/java/org/apache/catalina/core/ApplicationContextFacade.java
+++ b/java/org/apache/catalina/core/ApplicationContextFacade.java
@@ -117,6 +117,11 @@ public class ApplicationContextFacade implements ServletContext {
         classCache.put("getAttribute", clazz);
         classCache.put("log", clazz);
         classCache.put("setSessionTrackingModes", new Class[]{Set.class} );
+        classCache.put("addJspFile", new Class[]{String.class, String.class});
+        classCache.put("declareRoles", new Class[]{String[].class});
+        classCache.put("setSessionTimeout", new Class[]{int.class});
+        classCache.put("setRequestCharacterEncoding", new Class[]{String.class});
+        classCache.put("setResponseCharacterEncoding", new Class[]{String.class});
     }
 
 

==================================================
SecurityManagerBaseTest.java
new file mode 100644
index 0000000000..fc5a5d53f1
--- /dev/null
+++ b/test/org/apache/catalina/core/TestApplicationContextFacadeSecurityManager.java
@@ -0,0 +1,148 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.core;
+
+import java.lang.reflect.Array;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.stream.Collectors;
+
+import org.junit.Assert;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+import org.junit.runners.Parameterized.Parameter;
+
+import org.apache.catalina.security.SecurityUtil;
+import org.apache.tomcat.util.security.SecurityManagerBaseTest;
+import org.easymock.EasyMock;
+import org.easymock.IExpectationSetters;
+import org.easymock.internal.LastControl;
+
+@RunWith(Parameterized.class)
+public final class TestApplicationContextFacadeSecurityManager extends SecurityManagerBaseTest {
+
+    /**
+     * @return {@link Collection} of non-static, non-object, public {@link
+     * Method}s in {@link ApplicationContextFacade} to be run with the the Java
+     * 2 {@link SecurityManager} been enabled.
+     */
+    @Parameterized.Parameters(name = "{index}: method={0}")
+    public static Collection<Method> publicApplicationContextFacadeMethods() {
+        return Arrays.stream(ApplicationContextFacade.class.getMethods())
+                .filter(method -> !Modifier.isStatic(method.getModifiers()))
+                .filter(method -> {
+                    try {
+                        Object.class.getMethod(method.getName(), method.getParameterTypes());
+                        return false;
+                    } catch (final NoSuchMethodException e) {
+                        return true;
+                    }
+                })
+                .collect(Collectors.toList());
+    }
+
+
+    private static Object[] getDefaultParams(final Method method) {
+        final int paramsCount = method.getParameterCount();
+        final Object[] params = new Object[paramsCount];
+        final Class<?>[] paramTypes = method.getParameterTypes();
+        for (int i = 0; i < params.length; i++) {
+            params[i] = getDefaultValue(paramTypes[i]);
+        }
+        return params;
+    }
+
+
+    @SuppressWarnings("unchecked")
+    private static <T> T getDefaultValue(final Class<T> clazz) {
+        return !isVoid(clazz) ? (T) Array.get(Array.newInstance(clazz, 1), 0) : null;
+    }
+
+
+    private static <T> boolean isVoid(Class<T> clazz) {
+        return void.class.equals(clazz) || Void.class.equals(clazz);
+    }
+
+
+    @Parameter(0)
+    public Method methodToTest;
+
+
+    /**
+     * Test for
+     * <a href="https://bz.apache.org/bugzilla/show_bug.cgi?id=64735">Bug
+     * 64735</a> which confirms that {@link ApplicationContextFacade} behaves
+     * correctly when the Java 2 {@link SecurityManager} has been enabled.
+     *
+     * @throws NoSuchMethodException     Should never happen
+     * @throws IllegalAccessException    Should never happen
+     * @throws InvocationTargetException Should never happen
+     */
+    @Test
+    public void testBug64735()
+            throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
+        Assert.assertTrue(SecurityUtil.isPackageProtectionEnabled());
+
+        // Mock the ApplicationContext that we provide to the ApplicationContextFacade.
+        final ApplicationContext mockAppContext = EasyMock.createMock(ApplicationContext.class);
+        final Method expectedAppContextMethod =
+                ApplicationContext.class.getMethod(
+                        methodToTest.getName(),
+                        methodToTest.getParameterTypes());
+
+        // Expect that only the provided method which is being tested will be called exactly once.
+        final IExpectationSetters<Object> expectationSetters;
+        if (isVoid(expectedAppContextMethod.getReturnType())) {
+            expectedAppContextMethod.invoke(mockAppContext, getDefaultParams(methodToTest));
+            expectationSetters = EasyMock.expectLastCall();
+        } else {
+            expectationSetters =
+                    EasyMock.expect(expectedAppContextMethod.invoke(
+                            mockAppContext, getDefaultParams(methodToTest)));
+        }
+        expectationSetters
+                .andAnswer(() -> {
+                    Assert.assertEquals(
+                            expectedAppContextMethod,
+                            LastControl.getCurrentInvocation().getMethod());
+                    return getDefaultValue(expectedAppContextMethod.getReturnType());
+                }).once();
+        EasyMock.replay(mockAppContext);
+        EasyMock.verifyUnexpectedCalls(mockAppContext);
+
+        // Invoke the method on ApplicationContextFacade. Fail if any unexpected exceptions are
+        // thrown.
+        try {
+            methodToTest.invoke(
+                    new ApplicationContextFacade(mockAppContext),
+                    getDefaultParams(methodToTest));
+        } catch (final IllegalAccessException | InvocationTargetException e) {
+            throw new AssertionError(
+                    "Failed to call " +
+                            methodToTest +
+                            " with SecurityManager enabled.",
+                    e);
+        }
+
+        // Verify that the method called through to the wrapped ApplicationContext correctly.
+        EasyMock.verifyRecording();
+    }
+}

==================================================
