5ff885167bcd3a427312f6d3a29752f82bfdb751
==================================================
Refactor common code to base class
==================================================
Mark Emlyn
==================================================
Thu Sep 25 19:32:29 2014 +0000
==================================================
CredentialHandlerBase.java
Refactor common code to base class

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1627599 13f79535-47bb-0310-9956-ffa450edef68



==================================================
MessageDigestCredentialHandler.java
new file mode 100644
index 0000000000..a57ce12125
--- /dev/null
+++ b/java/org/apache/catalina/realm/CredentialHandlerBase.java
@@ -0,0 +1,43 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.realm;
+
+import org.apache.catalina.CredentialHandler;
+import org.apache.tomcat.util.buf.HexUtils;
+import org.apache.tomcat.util.res.StringManager;
+
+public abstract class CredentialHandlerBase implements CredentialHandler {
+
+    protected static final StringManager sm = StringManager.getManager(Constants.Package);
+
+    protected boolean matchesSaltIterationsEncoded(String inputCredentials, String storedCredentials) {
+
+        int sep1 = storedCredentials.indexOf('$');
+        int sep2 = storedCredentials.indexOf('$', sep1);
+
+        String hexSalt = storedCredentials.substring(0,  sep1);
+
+        int iterations = Integer.parseInt(storedCredentials.substring(sep1 + 1, sep2));
+
+        String storedHexEncoded = storedCredentials.substring(sep2 + 1);
+        byte[] salt = HexUtils.fromHexString(hexSalt);
+
+        String inputHexEncoded = mutate(inputCredentials, salt, iterations);
+
+        return storedHexEncoded.equalsIgnoreCase(inputHexEncoded);
+    }
+}

==================================================
PBECredentialHandler.java
index 86cc620c96..5e023c5dac 100644
--- a/java/org/apache/catalina/realm/MessageDigestCredentialHandler.java
+++ b/java/org/apache/catalina/realm/MessageDigestCredentialHandler.java
@@ -23,13 +23,11 @@ import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.util.Arrays;
 
-import org.apache.catalina.CredentialHandler;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.HexUtils;
 import org.apache.tomcat.util.codec.binary.Base64;
-import org.apache.tomcat.util.res.StringManager;
 import org.apache.tomcat.util.security.ConcurrentMessageDigest;
 
 /**
@@ -54,12 +52,10 @@ import org.apache.tomcat.util.security.ConcurrentMessageDigest;
  * <p>
  * If the stored password form does not include salt then no salt is used.
  */
-public class MessageDigestCredentialHandler implements CredentialHandler {
+public class MessageDigestCredentialHandler extends CredentialHandlerBase {
 
     private static final Log log = LogFactory.getLog(MessageDigestCredentialHandler.class);
 
-    protected static final StringManager sm = StringManager.getManager(Constants.Package);
-
     private Charset encoding = StandardCharsets.UTF_8;
     private String digest = null;
 
@@ -149,16 +145,8 @@ public class MessageDigestCredentialHandler implements CredentialHandler {
                 return Arrays.equals(userDigestBytes, serverDigestBytes);
 
             } else if (storedCredentials.indexOf('$') > -1) {
-                int sep1 = storedCredentials.indexOf('$');
-                int sep2 = storedCredentials.indexOf('$', sep1);
-                String hexSalt = storedCredentials.substring(0,  sep1);
-                int iterations = Integer.parseInt(storedCredentials.substring(sep1 + 1, sep2));
-                String hexEncoded = storedCredentials.substring(sep2 + 1);
-                byte[] salt = HexUtils.fromHexString(hexSalt);
-
-                String userDigest = mutate(inputCredentials, salt, iterations);
+                return matchesSaltIterationsEncoded(inputCredentials, storedCredentials);
 
-                return hexEncoded.equalsIgnoreCase(userDigest);
             } else {
                 // Hex hashes should be compared case-insensitively
                 String userDigest = mutate(inputCredentials, null, 1);

==================================================
