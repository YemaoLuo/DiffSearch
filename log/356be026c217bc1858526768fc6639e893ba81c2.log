356be026c217bc1858526768fc6639e893ba81c2
==================================================
Switch to varargs for simpler code
==================================================
Mark Emlyn
==================================================
Wed Jul 3 10:53:17 2013 +0000
==================================================
ArrayELResolver.java
Switch to varargs for simpler code

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1499318 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BeanELResolver.java
index 478c30f802..a96f27acdb 100644
--- a/java/javax/el/ArrayELResolver.java
+++ b/java/javax/el/ArrayELResolver.java
@@ -84,8 +84,7 @@ public class ArrayELResolver extends ELResolver {
 
             if (this.readOnly) {
                 throw new PropertyNotWritableException(message(context,
-                        "resolverNotWriteable", new Object[] { base.getClass()
-                                .getName() }));
+                        "resolverNotWriteable", base.getClass().getName()));
             }
 
             int idx = coerce(property);
@@ -94,9 +93,8 @@ public class ArrayELResolver extends ELResolver {
                     !base.getClass().getComponentType().isAssignableFrom(
                             value.getClass())) {
                 throw new ClassCastException(message(context,
-                        "objectNotAssignable",
-                        new Object[] {value.getClass().getName(),
-                        base.getClass().getComponentType().getName()}));
+                        "objectNotAssignable", value.getClass().getName(),
+                        base.getClass().getComponentType().getName()));
             }
             Array.set(base, idx, value);
         }

==================================================
ELResolver.java
index 41cbcb3181..f6c96db189 100644
--- a/java/javax/el/BeanELResolver.java
+++ b/java/javax/el/BeanELResolver.java
@@ -110,8 +110,7 @@ public class BeanELResolver extends ELResolver {
                 throw (VirtualMachineError) cause;
             }
             throw new ELException(message(context, "propertyReadError",
-                    new Object[] { base.getClass().getName(),
-                            property.toString() }), cause);
+                    base.getClass().getName(), property.toString()), cause);
         } catch (Exception e) {
             throw new ELException(e);
         }
@@ -133,8 +132,7 @@ public class BeanELResolver extends ELResolver {
 
         if (this.readOnly) {
             throw new PropertyNotWritableException(message(context,
-                    "resolverNotWriteable", new Object[] { base.getClass()
-                            .getName() }));
+                    "resolverNotWriteable", base.getClass().getName()));
         }
 
         Method m = this.property(context, base, property).write(context);
@@ -151,8 +149,7 @@ public class BeanELResolver extends ELResolver {
                 throw (VirtualMachineError) cause;
             }
             throw new ELException(message(context, "propertyWriteError",
-                    new Object[] { base.getClass().getName(),
-                            property.toString() }), cause);
+                    base.getClass().getName(), property.toString()), cause);
         } catch (Exception e) {
             throw new ELException(e);
         }
@@ -342,8 +339,7 @@ public class BeanELResolver extends ELResolver {
             BeanProperty property = this.properties.get(name);
             if (property == null) {
                 throw new PropertyNotFoundException(message(ctx,
-                        "propertyNotFound",
-                        new Object[] { type.getName(), name }));
+                        "propertyNotFound", type.getName(), name));
             }
             return property;
         }

==================================================
ListELResolver.java
index bb4a5a84f6..f51ecee5af 100644
--- a/java/javax/el/ELResolver.java
+++ b/java/javax/el/ELResolver.java
@@ -29,7 +29,7 @@ import java.util.ResourceBundle;
  */
 public abstract class ELResolver {
 
-    static String message(ELContext context, String name, Object[] props) {
+    static String message(ELContext context, String name, Object... props) {
         Locale locale = null;
         if (context != null) {
             locale = context.getLocale();

==================================================
MapELResolver.java
index 4cf85e3cd2..a65aa33b3b 100644
--- a/java/javax/el/ListELResolver.java
+++ b/java/javax/el/ListELResolver.java
@@ -96,8 +96,7 @@ public class ListELResolver extends ELResolver {
 
             if (this.readOnly) {
                 throw new PropertyNotWritableException(message(context,
-                        "resolverNotWriteable", new Object[] { base.getClass()
-                                .getName() }));
+                        "resolverNotWriteable", base.getClass().getName()));
             }
 
             int idx = coerce(property);

==================================================
ResourceBundleELResolver.java
index 062cdce723..4ebbbfbf7a 100644
--- a/java/javax/el/MapELResolver.java
+++ b/java/javax/el/MapELResolver.java
@@ -84,8 +84,7 @@ public class MapELResolver extends ELResolver {
 
             if (this.readOnly) {
                 throw new PropertyNotWritableException(message(context,
-                        "resolverNotWriteable", new Object[] { base.getClass()
-                                .getName() }));
+                        "resolverNotWriteable", base.getClass().getName()));
             }
 
             try {

==================================================
