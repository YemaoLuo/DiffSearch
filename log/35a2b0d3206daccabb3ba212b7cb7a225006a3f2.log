35a2b0d3206daccabb3ba212b7cb7a225006a3f2
==================================================
Revert r1719532, r1719534 & r1719535 until a better fix can be found for APR's handling of client disconnect.
==================================================
Mark Thomas
==================================================
Sat Dec 12 20:32:29 2015 +0000
==================================================
AbstractProcessorLight.java
Revert r1719532, r1719534 & r1719535 until a better fix can be found for APR's handling of client disconnect.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1719732 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AprEndpoint.java
index 07882cf738..cf84422d56 100644
--- a/java/org/apache/coyote/AbstractProcessorLight.java
+++ b/java/org/apache/coyote/AbstractProcessorLight.java
@@ -50,7 +50,7 @@ public abstract class AbstractProcessorLight implements Processor {
             } else if (dispatches != null) {
                 DispatchType nextDispatch = dispatches.next();
                 state = dispatch(nextDispatch.getSocketStatus());
-            } else if (status == SocketStatus.DISCONNECT && !isUpgrade()) {
+            } else if (status == SocketStatus.DISCONNECT) {
                 // Do nothing here, just wait for it to get recycled
             } else if (isAsync() || isUpgrade() || state == SocketState.ASYNC_END) {
                 state = dispatch(status);

==================================================
WsHttpUpgradeHandler.java
index b1a37a6f38..a84216a3ec 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -1706,12 +1706,8 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
                                 }
                                 wrapper.pollerFlags = wrapper.pollerFlags & ~((int) desc[n*2]);
                                 // Check for failed sockets and hand this socket off to a worker
-                                if ((desc[n*2] & Poll.APR_POLLHUP) == Poll.APR_POLLHUP) {
-                                    if (!processSocket(desc[n*2+1], SocketStatus.DISCONNECT)) {
-                                        // Close socket and clear pool
-                                        closeSocket(desc[n*2+1]);
-                                    }
-                                } else if(((desc[n*2] & Poll.APR_POLLERR) == Poll.APR_POLLERR)
+                                if (((desc[n*2] & Poll.APR_POLLHUP) == Poll.APR_POLLHUP)
+                                        || ((desc[n*2] & Poll.APR_POLLERR) == Poll.APR_POLLERR)
                                         || ((desc[n*2] & Poll.APR_POLLNVAL) == Poll.APR_POLLNVAL)) {
                                     // Need to trigger error handling. Poller may return error
                                     // codes plus the flags it was waiting for or it may just

==================================================
