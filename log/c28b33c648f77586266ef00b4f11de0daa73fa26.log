c28b33c648f77586266ef00b4f11de0daa73fa26
==================================================
Track the TLD URIs processed for each webapp and don't process duplicates.
==================================================
Mark Emlyn
==================================================
Mon Jul 13 16:43:26 2009 +0000
==================================================
TldConfig.java
Track the TLD URIs processed for each webapp and don't process duplicates.
Because this tracks duplicate status in the RuleSet, each digester needs its own RuleSet rather than sharing the static one.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@793621 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TldRuleSet.java
index 2edf357647..58e6f036fa 100644
--- a/java/org/apache/catalina/startup/TldConfig.java
+++ b/java/org/apache/catalina/startup/TldConfig.java
@@ -80,8 +80,6 @@ public final class TldConfig  implements LifecycleListener {
      */
     private static Digester[] tldDigesters = new Digester[4];
 
-    private static final TldRuleSet tldRuleSet = new TldRuleSet();
-    
     /*
      * Initializes the set of JARs that are known not to contain any TLDs
      */
@@ -145,25 +143,25 @@ public final class TldConfig  implements LifecycleListener {
         if (!namespaceAware && !validation) {
             if (tldDigesters[0] == null) {
                 tldDigesters[0] = DigesterFactory.newDigester(validation,
-                        namespaceAware, tldRuleSet);
+                        namespaceAware, new TldRuleSet());
             }
             digester = tldDigesters[0];
         } else if (!namespaceAware && validation) {
             if (tldDigesters[1] == null) {
                 tldDigesters[1] = DigesterFactory.newDigester(validation,
-                        namespaceAware, tldRuleSet);
+                        namespaceAware, new TldRuleSet());
             }
             digester = tldDigesters[1];
         } else if (namespaceAware && !validation) {
             if (tldDigesters[2] == null) {
                 tldDigesters[2] = DigesterFactory.newDigester(validation,
-                        namespaceAware, tldRuleSet);
+                        namespaceAware, new TldRuleSet());
             }
             digester = tldDigesters[2];
         } else {
             if (tldDigesters[3] == null) {
                 tldDigesters[3] = DigesterFactory.newDigester(validation,
-                        namespaceAware, tldRuleSet);
+                        namespaceAware, new TldRuleSet());
             }
             digester = tldDigesters[3];
         }
@@ -199,10 +197,31 @@ public final class TldConfig  implements LifecycleListener {
 
     private boolean rescan=true;
 
+    /**
+     * Set of URIs discovered for the associated context. Used to enforce the
+     * correct processing priority. Only the TLD associated with the first
+     * instance of any URI will be processed.
+     */
+    private Set<String> taglibUris = new HashSet<String>();
+    
     private ArrayList<String> listeners = new ArrayList<String>();
 
     // --------------------------------------------------------- Public Methods
 
+    /**
+     * Adds a taglib URI to the list of known URIs.
+     */
+    public void addTaglibUri(String uri) {
+        taglibUris.add(uri);
+    }
+
+    /**
+     * Determines if the provided URI is a known taglib URI.
+     */
+    public boolean isKnownTaglibUri(String uri) {
+        return taglibUris.contains(uri);
+    }
+
     /**
      * Sets the list of JARs that are known not to contain any TLDs.
      *

==================================================
