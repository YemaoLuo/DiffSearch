97707109b6ed30a522fab02ff0d2c86ea157389e
==================================================
APR read/write need to use the same locks for changing the blocking status of the socket
==================================================
Mark Emlyn
==================================================
Mon Mar 11 20:30:49 2013 +0000
==================================================
AprServletInputStream.java
APR read/write need to use the same locks for changing the blocking status of the socket

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1455314 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AprServletOutputStream.java
index 27ca0db7b9..3c339e2b64 100644
--- a/java/org/apache/coyote/http11/upgrade/AprServletInputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/AprServletInputStream.java
@@ -18,7 +18,6 @@ package org.apache.coyote.http11.upgrade;
 
 import java.io.IOException;
 import java.util.concurrent.locks.Lock;
-import java.util.concurrent.locks.ReentrantReadWriteLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
 
 import org.apache.tomcat.jni.Socket;
@@ -29,8 +28,6 @@ public class AprServletInputStream extends AbstractServletInputStream {
 
     private final SocketWrapper<Long> wrapper;
     private final long socket;
-    private final Lock blockingStatusReadLock;
-    private final WriteLock blockingStatusWriteLock;
     private volatile boolean eagain = false;
     private volatile boolean closed = false;
 
@@ -38,9 +35,6 @@ public class AprServletInputStream extends AbstractServletInputStream {
     public AprServletInputStream(SocketWrapper<Long> wrapper) {
         this.wrapper = wrapper;
         this.socket = wrapper.getSocket().longValue();
-        ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
-        this.blockingStatusReadLock = lock.readLock();
-        this.blockingStatusWriteLock =lock.writeLock();
     }
 
 
@@ -48,10 +42,13 @@ public class AprServletInputStream extends AbstractServletInputStream {
     protected int doRead(boolean block, byte[] b, int off, int len)
             throws IOException {
 
+        Lock readLock = wrapper.getBlockingStatusReadLock();
+        WriteLock writeLock = wrapper.getBlockingStatusWriteLock();
+
         boolean readDone = false;
         int result = 0;
         try {
-            blockingStatusReadLock.lock();
+            readLock.lock();
             if (wrapper.getBlockingStatus() == block) {
                 if (closed) {
                     throw new IOException(sm.getString("apr.closed"));
@@ -60,31 +57,31 @@ public class AprServletInputStream extends AbstractServletInputStream {
                 readDone = true;
             }
         } finally {
-            blockingStatusReadLock.unlock();
+            readLock.unlock();
         }
 
         if (!readDone) {
             try {
-                blockingStatusWriteLock.lock();
+                writeLock.lock();
                 wrapper.setBlockingStatus(block);
                 // Set the current settings for this socket
                 Socket.optSet(socket, Socket.APR_SO_NONBLOCK, (block ? 0 : 1));
                 // Downgrade the lock
                 try {
-                    blockingStatusReadLock.lock();
-                    blockingStatusWriteLock.unlock();
+                    readLock.lock();
+                    writeLock.unlock();
                     if (closed) {
                         throw new IOException(sm.getString("apr.closed"));
                     }
                     result = Socket.recv(socket, b, off, len);
                 } finally {
-                    blockingStatusReadLock.unlock();
+                    readLock.unlock();
                 }
             } finally {
                 // Should have been released above but may not have been on some
                 // exception paths
-                if (blockingStatusWriteLock.isHeldByCurrentThread()) {
-                    blockingStatusWriteLock.unlock();
+                if (writeLock.isHeldByCurrentThread()) {
+                    writeLock.unlock();
                 }
             }
         }

==================================================
SocketWrapper.java
index cf29ba9efc..0f2d552f61 100644
--- a/java/org/apache/coyote/http11/upgrade/AprServletOutputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/AprServletOutputStream.java
@@ -18,7 +18,6 @@ package org.apache.coyote.http11.upgrade;
 
 import java.io.IOException;
 import java.util.concurrent.locks.Lock;
-import java.util.concurrent.locks.ReentrantReadWriteLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
 
 import org.apache.tomcat.jni.Socket;
@@ -31,8 +30,6 @@ public class AprServletOutputStream extends AbstractServletOutputStream {
     private final AprEndpoint endpoint;
     private final SocketWrapper<Long> wrapper;
     private final long socket;
-    private final Lock blockingStatusReadLock;
-    private final WriteLock blockingStatusWriteLock;
     private volatile boolean closed = false;
 
     public AprServletOutputStream(SocketWrapper<Long> wrapper,
@@ -40,9 +37,6 @@ public class AprServletOutputStream extends AbstractServletOutputStream {
         this.endpoint = endpoint;
         this.wrapper = wrapper;
         this.socket = wrapper.getSocket().longValue();
-        ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
-        this.blockingStatusReadLock = lock.readLock();
-        this.blockingStatusWriteLock =lock.writeLock();
     }
 
 
@@ -50,10 +44,13 @@ public class AprServletOutputStream extends AbstractServletOutputStream {
     protected int doWrite(boolean block, byte[] b, int off, int len)
             throws IOException {
 
+        Lock readLock = wrapper.getBlockingStatusReadLock();
+        WriteLock writeLock = wrapper.getBlockingStatusWriteLock();
+
         boolean writeDone = false;
         int result = 0;
         try {
-            blockingStatusReadLock.lock();
+            readLock.lock();
             if (wrapper.getBlockingStatus() == block) {
                 if (closed) {
                     throw new IOException(sm.getString("apr.closed"));
@@ -62,31 +59,31 @@ public class AprServletOutputStream extends AbstractServletOutputStream {
                 writeDone = true;
             }
         } finally {
-            blockingStatusReadLock.unlock();
+            readLock.unlock();
         }
 
         if (!writeDone) {
             try {
-                blockingStatusWriteLock.lock();
+                writeLock.lock();
                 wrapper.setBlockingStatus(block);
                 // Set the current settings for this socket
                 Socket.optSet(socket, Socket.APR_SO_NONBLOCK, (block ? -1 : 0));
                 // Downgrade the lock
                 try {
-                    blockingStatusReadLock.lock();
-                    blockingStatusWriteLock.unlock();
+                    readLock.lock();
+                    writeLock.unlock();
                     if (closed) {
                         throw new IOException(sm.getString("apr.closed"));
                     }
                     result = Socket.send(socket, b, off, len);
                 } finally {
-                    blockingStatusReadLock.unlock();
+                    readLock.unlock();
                 }
             } finally {
                 // Should have been released above but may not have been on some
                 // exception paths
-                if (blockingStatusWriteLock.isHeldByCurrentThread()) {
-                    blockingStatusWriteLock.unlock();
+                if (writeLock.isHeldByCurrentThread()) {
+                    writeLock.unlock();
                 }
             }
         }
@@ -96,8 +93,7 @@ public class AprServletOutputStream extends AbstractServletOutputStream {
                 endpoint.getPoller().add(socket, -1, false, true);
             }
             return result;
-        }
-        else if (-result == Status.EAGAIN) {
+        } else if (-result == Status.EAGAIN) {
             endpoint.getPoller().add(socket, -1, false, true);
             return 0;
         }

==================================================
