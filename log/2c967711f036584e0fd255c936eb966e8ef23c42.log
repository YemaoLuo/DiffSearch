2c967711f036584e0fd255c936eb966e8ef23c42
==================================================
Fix more Eclipse warnings:
==================================================
Mark Emlyn
==================================================
Tue Mar 13 13:04:38 2012 +0000
==================================================
Http11AprProtocol.java
Fix more Eclipse warnings:
- generics
- @Override
- unnecessary casts
- unnecessary code
- static field access

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1300110 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SpdyProcessor.java
index 8dc2c27b82..7bce8e0d3c 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -187,7 +187,7 @@ public class Http11AprProtocol extends AbstractHttp11Protocol {
     // TODO: map of protocols
     public void setNpnHandler(String impl) {
         try {
-            Class c = Class.forName(impl);
+            Class<?> c = Class.forName(impl);
             npnHandler = (NpnHandler) c.newInstance();
         } catch (Exception ex) {
             getLog().warn("Failed to init light protocol " + impl, ex);

==================================================
SpdyProxyProtocol.java
index 398adcf3cf..7b1b524a29 100644
--- a/java/org/apache/coyote/spdy/SpdyProcessor.java
+++ b/java/org/apache/coyote/spdy/SpdyProcessor.java
@@ -32,6 +32,7 @@ import org.apache.coyote.RequestInfo;
 import org.apache.coyote.Response;
 import org.apache.coyote.http11.upgrade.UpgradeInbound;
 import org.apache.tomcat.spdy.SpdyConnection;
+import org.apache.tomcat.spdy.SpdyContext;
 import org.apache.tomcat.spdy.SpdyFrame;
 import org.apache.tomcat.spdy.SpdyStream;
 import org.apache.tomcat.util.ExceptionUtils;
@@ -220,7 +221,7 @@ public class SpdyProcessor extends AbstractProcessor<Object> implements
 
     @Override
     public void action(ActionCode actionCode, Object param) {
-        if (spdy.getSpdyContext().debug) {
+        if (SpdyContext.debug) {
             // System.err.println(actionCode);
         }
 
@@ -473,7 +474,8 @@ public class SpdyProcessor extends AbstractProcessor<Object> implements
     }
 
     @Override
-    public SocketState process(SocketWrapper socket) throws IOException {
+    public SocketState process(SocketWrapper<Object> socket)
+            throws IOException {
         throw new IOException("Unimplemented");
     }
 
@@ -533,7 +535,7 @@ public class SpdyProcessor extends AbstractProcessor<Object> implements
                     throw new IOException("Name too long");
                 }
                 request.requestURI().setBytes(frame.data, frame.off, valueLen);
-                if (spdy.getSpdyContext().debug) {
+                if (SpdyContext.debug) {
                     System.err.println("URL= " + request.requestURI());
                 }
                 frame.advance(valueLen);

==================================================
AprSocket.java
index 4c0231626d..ecfb0cd0e8 100644
--- a/java/org/apache/coyote/spdy/SpdyProxyProtocol.java
+++ b/java/org/apache/coyote/spdy/SpdyProxyProtocol.java
@@ -81,6 +81,7 @@ public class SpdyProxyProtocol extends AbstractProtocol {
         return cHandler;
     }
 
+    @Override
     public void start() throws Exception {
         super.start();
         spdyContext = new SpdyContextProxy() {

==================================================
AprSocketContext.java
index 20faa7cef7..de4a9c1453 100644
--- a/java/org/apache/tomcat/jni/socket/AprSocket.java
+++ b/java/org/apache/tomcat/jni/socket/AprSocket.java
@@ -117,6 +117,7 @@ public class AprSocket implements Runnable {
         poller = null;
     }
 
+    @Override
     public String toString() {
         return (context.isServer() ? "AprSrv-" : "AprCli-") +
                 Long.toHexString(socket) + " " + Integer.toHexString(status);
@@ -285,7 +286,7 @@ public class AprSocket implements Runnable {
                 log.warning("apr.send(): Failed to send, closing " + sent);
             }
             reset();
-            throw new IOException("Error sending " + sent + " " + Error.strerror((int) -sent));
+            throw new IOException("Error sending " + sent + " " + Error.strerror(-sent));
         } else {
             off += sent;
             len -= sent;
@@ -337,7 +338,7 @@ public class AprSocket implements Runnable {
         }
         // abrupt close
         reset();
-        throw new IOException("apr.read(): " + read + " " + Error.strerror((int) -read));
+        throw new IOException("apr.read(): " + read + " " + Error.strerror(-read));
     }
 
     public int readNB(byte[] data, int off, int len) throws IOException {
@@ -799,13 +800,13 @@ public class AprSocket implements Runnable {
                 log.info(this + " StartSSL");
             }
 
-            AprSocketContext aprCon = (AprSocketContext) context;
+            AprSocketContext aprCon = context;
             SSLSocket.attach(aprCon.getSslCtx(), socket);
 
             if (context.debugSSL) {
                 SSLExt.debug(socket);
             }
-            if (!((AprSocketContext) getContext()).isServer()) {
+            if (!getContext().isServer()) {
                 if (context.USE_TICKETS && hostInfo.ticketLen > 0) {
                     SSLExt.setTicket(socket, hostInfo.ticket,
                             hostInfo.ticketLen);

==================================================
SpdyConnection.java
index 496a7d1db3..0fbd0fe8d6 100644
--- a/java/org/apache/tomcat/jni/socket/AprSocketContext.java
+++ b/java/org/apache/tomcat/jni/socket/AprSocketContext.java
@@ -508,6 +508,7 @@ public class AprSocketContext {
      * To clean the pools - we could track if all channels are
      * closed, but this seems simpler and safer.
      */
+    @Override
     protected void finalize() {
         if (rootPool != 0) {
             log.warning(this + " GC without stop()");
@@ -860,6 +861,7 @@ public class AprSocketContext {
             setDaemon(true);
         }
 
+        @Override
         public void run() {
             while(running) {
                 try {
@@ -972,6 +974,7 @@ public class AprSocketContext {
 
         private List<AprSocket> updates = new ArrayList<AprSocket>();
 
+        @Override
         public void run() {
             if (!running) {
                 return;
@@ -1286,7 +1289,7 @@ public class AprSocketContext {
             }
             if (failed) {
                 up.reset();
-                throw new IOException("poll add error " +  rv + " " + up + " " + Error.strerror((int)rv));
+                throw new IOException("poll add error " +  rv + " " + up + " " + Error.strerror(rv));
             }
         }
 
@@ -1303,7 +1306,7 @@ public class AprSocketContext {
             up.clearStatus(AprSocket.POLL);
 
             if (rv != Status.APR_SUCCESS) {
-                log.severe("poll remove error " +  Error.strerror((int)rv) + " " + up);
+                log.severe("poll remove error " +  Error.strerror(rv) + " " + up);
             } else {
                 polledCount.decrementAndGet();
             }

==================================================
SpdyContextJni.java
index 0b7972de51..51ab86efba 100644
--- a/java/org/apache/tomcat/spdy/SpdyConnection.java
+++ b/java/org/apache/tomcat/spdy/SpdyConnection.java
@@ -147,6 +147,7 @@ public abstract class SpdyConnection { // implements Runnable {
         outCondition = framerLock.newCondition();
     }
 
+    @Override
     public String toString() {
         return "SpdyCon open=" + channels.size();
     }
@@ -278,7 +279,7 @@ public abstract class SpdyConnection { // implements Runnable {
                 framerLock.unlock();
             }
 
-            if (getSpdyContext().debug) {
+            if (SpdyContext.debug) {
                 trace("> " + out);
             }
 
@@ -335,6 +336,7 @@ public abstract class SpdyConnection { // implements Runnable {
     static int drainCnt = 0;
 
     Runnable nbDrain = new Runnable() {
+        @Override
         public void run() {
             drain();
         }
@@ -381,12 +383,12 @@ public abstract class SpdyConnection { // implements Runnable {
      */
     public int onBlockingSocket() {
         try {
-            if (getSpdyContext().debug) {
+            if (SpdyContext.debug) {
                 trace("< onConnection() " + lastChannel);
             }
             int rc = processInput();
 
-            if (getSpdyContext().debug) {
+            if (SpdyContext.debug) {
                 trace("< onConnection() " + rc + " " + lastChannel);
             }
             return rc;
@@ -494,7 +496,7 @@ public abstract class SpdyConnection { // implements Runnable {
                 inFrame.nvCount = inFrame.read16();
             }
 
-            if (getSpdyContext().debug) {
+            if (SpdyContext.debug) {
                 trace("< " + inFrame);
             }
 

==================================================
SpdyFrame.java
index d7fbf4919e..d5dce62087 100644
--- a/java/org/apache/tomcat/spdy/SpdyContextJni.java
+++ b/java/org/apache/tomcat/spdy/SpdyContextJni.java
@@ -73,8 +73,10 @@ public class SpdyContextJni extends SpdyContext {
         handler.process(s, true, true, false);
     }
 
+    @Override
     public void listen(final int port, String cert, String key) throws IOException {
         con = new AprSocketContext() {
+            @Override
             protected void onSocket(AprSocket s) throws IOException {
                 SpdyConnectionAprSocket spdy = new SpdyConnectionAprSocket(SpdyContextJni.this);
                 spdy.setSocket(s);
@@ -90,6 +92,7 @@ public class SpdyContextJni extends SpdyContext {
         con.listen(port);
     }
 
+    @Override
     public void stop() throws IOException {
         con.stop();
     }

==================================================
Bug51582.java
index 82b4c25640..3448e0e459 100644
--- a/java/org/apache/tomcat/spdy/SpdyFrame.java
+++ b/java/org/apache/tomcat/spdy/SpdyFrame.java
@@ -83,6 +83,7 @@ public class SpdyFrame {
         endData = 0;
     }
 
+    @Override
     public String toString() {
         if (c) {
             if (type == 6) {

==================================================
