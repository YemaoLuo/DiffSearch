de78c473b92fb0d454ba156fd48a8aa776a26196
==================================================
Format the code. No functional changes.
==================================================
Violeta Georgieva
==================================================
Tue Jun 6 07:04:26 2017 +0000
==================================================
AsyncFileHandler.java
Format the code. No functional changes.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1797741 13f79535-47bb-0310-9956-ffa450edef68



==================================================
FileHandler.java
index c532e6b7e2..9a9df62a6a 100644
--- a/java/org/apache/juli/AsyncFileHandler.java
+++ b/java/org/apache/juli/AsyncFileHandler.java
@@ -71,7 +71,7 @@ public class AsyncFileHandler extends FileHandler {
     protected volatile boolean closed = false;
 
     public AsyncFileHandler() {
-        this(null,null,null);
+        this(null, null, null);
     }
 
     public AsyncFileHandler(String directory, String prefix, String suffix) {
@@ -81,14 +81,18 @@ public class AsyncFileHandler extends FileHandler {
 
     @Override
     public void close() {
-        if (closed) return;
+        if (closed) {
+            return;
+        }
         closed = true;
         super.close();
     }
 
     @Override
     protected void open() {
-        if(!closed) return;
+        if (!closed) {
+            return;
+        }
         closed = false;
         super.open();
     }
@@ -102,7 +106,7 @@ public class AsyncFileHandler extends FileHandler {
         // fill source entries, before we hand the record over to another
         // thread with another class loader
         record.getSourceMethodName();
-        LogEntry entry = new LogEntry(record,this);
+        LogEntry entry = new LogEntry(record, this);
         boolean added = false;
         try {
             while (!added && !queue.offer(entry)) {
@@ -118,7 +122,7 @@ public class AsyncFileHandler extends FileHandler {
                         break;
                     }
                     case OVERFLOW_DROP_FLUSH: {
-                        added = queue.offer(entry,1000,TimeUnit.MILLISECONDS);
+                        added = queue.offer(entry, 1000, TimeUnit.MILLISECONDS);
                         break;
                     }
                     case OVERFLOW_DROP_CURRENT: {
@@ -127,7 +131,7 @@ public class AsyncFileHandler extends FileHandler {
                     }
                 }//switch
             }//while
-        }catch (InterruptedException x) {
+        } catch (InterruptedException x) {
             // Allow thread to be interrupted and back out of the publish
             // operation. No further action required.
         }
@@ -142,7 +146,7 @@ public class AsyncFileHandler extends FileHandler {
         protected final boolean run = true;
         public LoggerThread() {
             this.setDaemon(true);
-            this.setName("AsyncFileHandlerWriter-"+System.identityHashCode(this));
+            this.setName("AsyncFileHandlerWriter-" + System.identityHashCode(this));
         }
 
         @Override
@@ -150,7 +154,9 @@ public class AsyncFileHandler extends FileHandler {
             while (run) {
                 try {
                     LogEntry entry = queue.poll(LOGGER_SLEEP_TIME, TimeUnit.MILLISECONDS);
-                    if (entry!=null) entry.flush();
+                    if (entry != null) {
+                        entry.flush();
+                    }
                 } catch (InterruptedException x) {
                     // Ignore the attempt to interrupt the thread.
                 } catch (Exception x) {

==================================================
