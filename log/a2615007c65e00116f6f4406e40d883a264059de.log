a2615007c65e00116f6f4406e40d883a264059de
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=58489
==================================================
Felix Schumacher
==================================================
Wed Oct 14 20:28:55 2015 +0000
==================================================
SlowQueryReport.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=58489

Comparator should follow the rules. If first object has lastInvocation of zero,
we should compare it to the second objects lastInvocation and vice versa.
When we do that, we can use Long#compare just as well.


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1708687 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestSlowQueryComparator.java
index ad4d38a075..0e17b5fc5d 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
@@ -475,17 +475,7 @@ public class SlowQueryReport extends AbstractQueryReport  {
 
         @Override
         public int compare(QueryStats stats1, QueryStats stats2) {
-            if (stats1.lastInvocation == 0) return 1;
-            if (stats2.lastInvocation == 0) return -1;
-
-            long result = stats1.lastInvocation - stats2.lastInvocation;
-            if (result > 0) {
-                return 1;
-            } else if (result == 0) {
-                return 0;
-            } else {
-                return -1;
-            }
+            return Long.compare(stats1.lastInvocation, stats2.lastInvocation);
         }
     }
 

==================================================
