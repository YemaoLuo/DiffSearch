6ec09aaf99d5980555aecc23c1f67819217001dd
==================================================
Use Charset rather than encoding name to create B2CConvertor
==================================================
Mark Thomas
==================================================
Thu Sep 3 19:44:27 2015 +0000
==================================================
CoyoteAdapter.java
Use Charset rather than encoding name to create B2CConvertor


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1701116 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InputBuffer.java
index cd3f4c1089..81d55c1607 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -1077,7 +1077,7 @@ public class CoyoteAdapter implements Adapter {
             B2CConverter conv = request.getURIConverter();
             try {
                 if (conv == null) {
-                    conv = new B2CConverter(enc, true);
+                    conv = new B2CConverter(B2CConverter.getCharset(enc), true);
                     request.setURIConverter(conv);
                 } else {
                     conv.recycle();

==================================================
B2CConverter.java
index b20ab2ab04..69e0f520b1 100644
--- a/java/org/apache/catalina/connector/InputBuffer.java
+++ b/java/org/apache/catalina/connector/InputBuffer.java
@@ -565,7 +565,7 @@ public class InputBuffer extends Reader
 
                                 @Override
                                 public B2CConverter run() throws IOException {
-                                    return new B2CConverter(enc);
+                                    return new B2CConverter(charset);
                                 }
                             }
                     );
@@ -576,7 +576,7 @@ public class InputBuffer extends Reader
                     }
                 }
             } else {
-                conv = new B2CConverter(enc);
+                conv = new B2CConverter(charset);
             }
             encoders.put(charset, conv);
         }

==================================================
TestB2CConverter.java
index 3d8f9bfd0c..42b6763f46 100644
--- a/java/org/apache/tomcat/util/buf/B2CConverter.java
+++ b/java/org/apache/tomcat/util/buf/B2CConverter.java
@@ -97,12 +97,11 @@ public class B2CConverter {
      */
     private final ByteBuffer leftovers;
 
-    public B2CConverter(String encoding) throws IOException {
-        this(encoding, false);
+    public B2CConverter(Charset charset) {
+        this(charset, false);
     }
 
-    public B2CConverter(String encoding, boolean replaceOnError)
-            throws IOException {
+    public B2CConverter(Charset charset, boolean replaceOnError) {
         byte[] left = new byte[LEFTOVER_SIZE];
         leftovers = ByteBuffer.wrap(left);
         CodingErrorAction action;
@@ -111,7 +110,6 @@ public class B2CConverter {
         } else {
             action = CodingErrorAction.REPORT;
         }
-        Charset charset = getCharset(encoding);
         // Special case. Use the Apache Harmony based UTF-8 decoder because it
         // - a) rejects invalid sequences that the JVM decoder does not
         // - b) fails faster for some invalid sequences

==================================================
