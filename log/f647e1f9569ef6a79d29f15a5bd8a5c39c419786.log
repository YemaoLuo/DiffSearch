f647e1f9569ef6a79d29f15a5bd8a5c39c419786
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=51400
==================================================
Mark Emlyn
==================================================
Tue Jun 21 14:29:49 2011 +0000
==================================================
AbstractCatalinaTask.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=51400
Avoid known bottleneck in JVM when converting between Strings and bytes by always providing a Charset rather than an encoding name.
Based on a patch by Dave Engberg.

Note: There are some Charsets that the JVM must support and in those cases Charset.forName(String) should not throw an exception.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1138019 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DigestAuthenticator.java
index c248d42e65..d649468b42 100644
--- a/java/org/apache/catalina/ant/AbstractCatalinaTask.java
+++ b/java/org/apache/catalina/ant/AbstractCatalinaTask.java
@@ -26,6 +26,7 @@ import java.io.InputStreamReader;
 import java.net.HttpURLConnection;
 import java.net.URL;
 import java.net.URLConnection;
+import java.nio.charset.Charset;
 
 import org.apache.catalina.util.Base64;
 import org.apache.tools.ant.BuildException;
@@ -200,7 +201,8 @@ public abstract class AbstractCatalinaTask extends BaseRedirectorHelperTask {
 
             // Set up an authorization header with our credentials
             String input = username + ":" + password;
-            String output = Base64.encode(input.getBytes());
+            String output =
+                Base64.encode(input.getBytes(Charset.defaultCharset()));
             hconn.setRequestProperty("Authorization",
                                      "Basic " + output);
 

==================================================
CoyoteAdapter.java
index 8f5100c123..a87fad9d8f 100644
--- a/java/org/apache/catalina/authenticator/DigestAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/DigestAuthenticator.java
@@ -20,6 +20,7 @@ package org.apache.catalina.authenticator;
 
 
 import java.io.IOException;
+import java.nio.charset.Charset;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.security.Principal;
@@ -378,7 +379,8 @@ public class DigestAuthenticator extends AuthenticatorBase {
 
         byte[] buffer;
         synchronized (md5Helper) {
-            buffer = md5Helper.digest(ipTimeKey.getBytes());
+            buffer = md5Helper.digest(
+                    ipTimeKey.getBytes(Charset.defaultCharset()));
         }
 
         return currentTime + ":" + md5Encoder.encode(buffer);
@@ -617,7 +619,8 @@ public class DigestAuthenticator extends AuthenticatorBase {
                 request.getRemoteAddr() + ":" + nOnceTime + ":" + key;
             byte[] buffer = null;
             synchronized (md5Helper) {
-                buffer = md5Helper.digest(serverIpTimeKey.getBytes());
+                buffer = md5Helper.digest(
+                        serverIpTimeKey.getBytes(Charset.defaultCharset()));
             }
             String md5ServerIpTimeKey = md5Encoder.encode(buffer);
             if (!md5ServerIpTimeKey.equals(md5clientIpTimeKey)) {
@@ -679,7 +682,7 @@ public class DigestAuthenticator extends AuthenticatorBase {
 
             byte[] buffer;
             synchronized (md5Helper) {
-                buffer = md5Helper.digest(a2.getBytes());
+                buffer = md5Helper.digest(a2.getBytes(Charset.defaultCharset()));
             }
             String md5a2 = md5Encoder.encode(buffer);
 

==================================================
MultiCastSender.java
index 7fef9b9690..513384a56d 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -20,6 +20,7 @@ package org.apache.catalina.connector;
 
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
+import java.nio.charset.Charset;
 import java.util.EnumSet;
 
 import javax.servlet.RequestDispatcher;
@@ -784,6 +785,13 @@ public class CoyoteAdapter implements Adapter {
         if (enc == null) {
             enc = "ISO-8859-1";
         }
+        Charset charset = null;
+        try {
+            charset = B2CConverter.getCharset(enc);
+        } catch (UnsupportedEncodingException e1) {
+            log.warn(sm.getString("coyoteAdapter.parsePathParam",
+                    enc));
+        }
 
         if (log.isDebugEnabled()) {
             log.debug(sm.getString("coyoteAdapter.debug", "uriBC",
@@ -808,15 +816,9 @@ public class CoyoteAdapter implements Adapter {
             String pv = null;
 
             if (pathParamEnd >= 0) {
-                try {
-                    pv = (new String(uriBC.getBuffer(), start + pathParamStart,
-                                pathParamEnd - pathParamStart, enc));
-                } catch (UnsupportedEncodingException e) {
-                    if (!warnedEncoding) {
-                        log.warn(sm.getString("coyoteAdapter.parsePathParam",
-                                enc));
-                        warnedEncoding = true;
-                    }
+                if (charset != null) {
+                    pv = new String(uriBC.getBuffer(), start + pathParamStart,
+                                pathParamEnd - pathParamStart, charset);
                 }
                 // Extract path param from decoded request URI
                 byte[] buf = uriBC.getBuffer();
@@ -827,15 +829,9 @@ public class CoyoteAdapter implements Adapter {
                 uriBC.setBytes(buf, start,
                         end - start - pathParamEnd + semicolon);
             } else {
-                try {
-                    pv = (new String(uriBC.getBuffer(), start + pathParamStart, 
-                                (end - start) - pathParamStart, enc));
-                } catch (UnsupportedEncodingException e) {
-                    if (!warnedEncoding) {
-                        log.warn(sm.getString("coyoteAdapter.parsePathParam",
-                                enc));
-                        warnedEncoding = true;
-                    }
+                if (charset != null) {
+                    pv = new String(uriBC.getBuffer(), start + pathParamStart, 
+                                (end - start) - pathParamStart, charset);
                 }
                 uriBC.setEnd(start + semicolon);
             }

==================================================
WebappClassLoader.java
index bbb561202b..e00ae9feea 100644
--- a/java/org/apache/catalina/ha/backend/MultiCastSender.java
+++ b/java/org/apache/catalina/ha/backend/MultiCastSender.java
@@ -18,11 +18,11 @@
 
 package org.apache.catalina.ha.backend;
 
-import java.io.UnsupportedEncodingException;
 import java.net.DatagramPacket;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.MulticastSocket;
+import java.nio.charset.Charset;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -34,6 +34,7 @@ public class MultiCastSender
     implements Sender {
 
     private static final Log log = LogFactory.getLog(HeartbeatListener.class);
+    private static final Charset US_ASCII = Charset.forName("US-ASCII");
 
     HeartbeatListener config = null;
 
@@ -68,11 +69,7 @@ public class MultiCastSender
         }
 
         byte[] buf;
-        try {
-            buf = mess.getBytes("US-ASCII");
-        } catch (UnsupportedEncodingException ex) {
-            buf = mess.getBytes();
-        }
+        buf = mess.getBytes(US_ASCII);
         DatagramPacket data = new DatagramPacket(buf, buf.length, group, config.getMultiport());
         try {
             s.send(data);

==================================================
JNDIRealm.java
index 3707aad568..72b2a48474 100644
--- a/java/org/apache/catalina/loader/WebappClassLoader.java
+++ b/java/org/apache/catalina/loader/WebappClassLoader.java
@@ -33,6 +33,7 @@ import java.lang.reflect.Modifier;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLClassLoader;
+import java.nio.charset.Charset;
 import java.security.AccessControlException;
 import java.security.AccessController;
 import java.security.CodeSource;
@@ -125,6 +126,7 @@ public class WebappClassLoader
     private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( WebappClassLoader.class );
 
+    private static final Charset CHARSET_UTF8 = Charset.forName("UTF-8");
     /**
      * List of ThreadGroup names to ignore when scanning for web application
      * started threads that need to be shut down.
@@ -3086,7 +3088,7 @@ public class WebappClassLoader
                         // http://svn.apache.org/viewvc?view=revision&revision=303915
                         String str = new String(binaryContent,0,pos);
                         try {
-                            binaryContent = str.getBytes("UTF-8");
+                            binaryContent = str.getBytes(CHARSET_UTF8);
                         } catch (Exception e) {
                             return null;
                         }

==================================================
RealmBase.java
index a65802af40..2f618652d4 100644
--- a/java/org/apache/catalina/realm/JNDIRealm.java
+++ b/java/org/apache/catalina/realm/JNDIRealm.java
@@ -20,6 +20,7 @@ package org.apache.catalina.realm;
 import java.io.IOException;
 import java.net.URI;
 import java.net.URISyntaxException;
+import java.nio.charset.Charset;
 import java.security.Principal;
 import java.text.MessageFormat;
 import java.util.ArrayList;
@@ -1531,7 +1532,7 @@ public class JNDIRealm extends RealmBase {
                 synchronized (this) {
                     password = password.substring(5);
                     md.reset();
-                    md.update(credentials.getBytes());
+                    md.update(credentials.getBytes(Charset.defaultCharset()));
                     String digestedPassword = Base64.encode(md.digest());
                     validated = password.equals(digestedPassword);
                 }
@@ -1542,12 +1543,13 @@ public class JNDIRealm extends RealmBase {
                     password = password.substring(6);
 
                     md.reset();
-                    md.update(credentials.getBytes());
+                    md.update(credentials.getBytes(Charset.defaultCharset()));
 
                     // Decode stored password.
                     ByteChunk pwbc = new ByteChunk(password.length());
                     try {
-                        pwbc.append(password.getBytes(), 0, password.length());
+                        pwbc.append(password.getBytes(Charset.defaultCharset()),
+                                0, password.length());
                     } catch (IOException e) {
                         // Should never happen
                         containerLog.error("Could not append password bytes to chunk: ", e);

==================================================
WebdavServlet.java
index d415ca7841..5de7563550 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -23,6 +23,7 @@ import java.beans.PropertyChangeListener;
 import java.beans.PropertyChangeSupport;
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
+import java.nio.charset.Charset;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.security.Principal;
@@ -52,6 +53,7 @@ import org.apache.catalina.util.LifecycleMBeanBase;
 import org.apache.catalina.util.MD5Encoder;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.HexUtils;
 import org.apache.tomcat.util.res.StringManager;
 import org.ietf.jgss.GSSContext;
@@ -244,6 +246,14 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
         digestEncoding = charset;
     }
 
+    protected Charset getDigestCharset() throws UnsupportedEncodingException {
+        if (digestEncoding == null) {
+            return Charset.defaultCharset();
+        } else {
+            return B2CConverter.getCharset(getDigestEncoding());
+        }
+    }
+
     /**
      * Return descriptive information about this Realm implementation and
      * the corresponding version number, in the format
@@ -373,15 +383,11 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
         }
 
         byte[] valueBytes = null;
-        if(getDigestEncoding() == null) {
-            valueBytes = serverDigestValue.getBytes();
-        } else {
-            try {
-                valueBytes = serverDigestValue.getBytes(getDigestEncoding());
-            } catch (UnsupportedEncodingException uee) {
-                log.error("Illegal digestEncoding: " + getDigestEncoding(), uee);
-                throw new IllegalArgumentException(uee.getMessage());
-            }
+        try {
+            valueBytes = serverDigestValue.getBytes(getDigestCharset());
+        } catch (UnsupportedEncodingException uee) {
+            log.error("Illegal digestEncoding: " + getDigestEncoding(), uee);
+            throw new IllegalArgumentException(uee.getMessage());
         }
 
         String serverDigest = null;
@@ -1130,15 +1136,11 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
                 md.reset();
     
                 byte[] bytes = null;
-                if(getDigestEncoding() == null) {
-                    bytes = credentials.getBytes();
-                } else {
-                    try {
-                        bytes = credentials.getBytes(getDigestEncoding());
-                    } catch (UnsupportedEncodingException uee) {
-                        log.error("Illegal digestEncoding: " + getDigestEncoding(), uee);
-                        throw new IllegalArgumentException(uee.getMessage());
-                    }
+                try {
+                    bytes = credentials.getBytes(getDigestCharset());
+                } catch (UnsupportedEncodingException uee) {
+                    log.error("Illegal digestEncoding: " + getDigestEncoding(), uee);
+                    throw new IllegalArgumentException(uee.getMessage());
                 }
                 md.update(bytes);
 
@@ -1177,15 +1179,11 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
             + getPassword(username);
 
         byte[] valueBytes = null;
-        if(getDigestEncoding() == null) {
-            valueBytes = digestValue.getBytes();
-        } else {
-            try {
-                valueBytes = digestValue.getBytes(getDigestEncoding());
-            } catch (UnsupportedEncodingException uee) {
-                log.error("Illegal digestEncoding: " + getDigestEncoding(), uee);
-                throw new IllegalArgumentException(uee.getMessage());
-            }
+        try {
+            valueBytes = digestValue.getBytes(getDigestCharset());
+        } catch (UnsupportedEncodingException uee) {
+            log.error("Illegal digestEncoding: " + getDigestEncoding(), uee);
+            throw new IllegalArgumentException(uee.getMessage());
         }
 
         byte[] digest = null;

==================================================
Constants.java
index d08dbd0207..04f59175b2 100644
--- a/java/org/apache/catalina/servlets/WebdavServlet.java
+++ b/java/org/apache/catalina/servlets/WebdavServlet.java
@@ -24,6 +24,7 @@ import java.io.IOException;
 import java.io.StringReader;
 import java.io.StringWriter;
 import java.io.Writer;
+import java.nio.charset.Charset;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.text.SimpleDateFormat;
@@ -1151,8 +1152,8 @@ public class WebdavServlet
                 + lock.depth + "-" + lock.owner + "-" + lock.tokens + "-"
                 + lock.expiresAt + "-" + System.currentTimeMillis() + "-"
                 + secret;
-            String lockToken =
-                md5Encoder.encode(md5Helper.digest(lockTokenStr.getBytes()));
+            String lockToken = md5Encoder.encode(md5Helper.digest(
+                    lockTokenStr.getBytes(Charset.defaultCharset())));
 
             if ( (exists) && (object instanceof DirContext) &&
                  (lock.depth == maxDepth) ) {

==================================================
AbstractReplicatedMap.java
index 33b772c2e8..1203f834b4 100644
--- a/java/org/apache/catalina/tribes/membership/Constants.java
+++ b/java/org/apache/catalina/tribes/membership/Constants.java
@@ -18,6 +18,8 @@
 
 package org.apache.catalina.tribes.membership;
 
+import java.nio.charset.Charset;
+
 import org.apache.catalina.tribes.util.Arrays;
 
 
@@ -34,7 +36,9 @@ public class Constants {
 
     public static final String Package = "org.apache.catalina.tribes.membership";
     public static void main(String[] args) throws Exception {
-        System.out.println(Arrays.toString("TRIBES-B".getBytes()));
-        System.out.println(Arrays.toString("TRIBES-E".getBytes()));
+        System.out.println(Arrays.toString(
+                "TRIBES-B".getBytes(Charset.defaultCharset())));
+        System.out.println(Arrays.toString(
+                "TRIBES-E".getBytes(Charset.defaultCharset())));
     }
 }

==================================================
Arrays.java
index d1ef0b3a15..78efcf1ae7 100644
--- a/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
@@ -21,7 +21,7 @@ import java.io.IOException;
 import java.io.ObjectInput;
 import java.io.ObjectOutput;
 import java.io.Serializable;
-import java.io.UnsupportedEncodingException;
+import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
@@ -71,7 +71,8 @@ public abstract class AbstractReplicatedMap extends ConcurrentHashMap implements
     /**
      * Used to identify the map
      */
-    final String chset = "ISO-8859-1";
+    private static final Charset CHARSET_ISO_8859_1 =
+        Charset.forName("ISO-8859-1");
 
 //------------------------------------------------------------------------------
 //              INSTANCE VARIABLES
@@ -204,14 +205,9 @@ public abstract class AbstractReplicatedMap extends ConcurrentHashMap implements
         this.channel = channel;
         this.rpcTimeout = timeout;
 
-        try {
-            this.mapname = mapContextName;
-            //unique context is more efficient if it is stored as bytes
-            this.mapContextName = mapContextName.getBytes(chset);
-        } catch (UnsupportedEncodingException x) {
-            log.warn("Unable to encode mapContextName[" + mapContextName + "] using getBytes(" + chset +") using default getBytes()", x);
-            this.mapContextName = mapContextName.getBytes();
-        }
+        this.mapname = mapContextName;
+        //unique context is more efficient if it is stored as bytes
+        this.mapContextName = mapContextName.getBytes(CHARSET_ISO_8859_1);
         if ( log.isTraceEnabled() ) log.trace("Created Lazy Map with name:"+mapContextName+", bytes:"+Arrays.toString(this.mapContextName));
 
         //create an rpc channel and add the map as a listener
@@ -918,7 +914,9 @@ public abstract class AbstractReplicatedMap extends ConcurrentHashMap implements
     protected void printMap(String header) {
         try {
             System.out.println("\nDEBUG MAP:"+header);
-            System.out.println("Map["+ new String(mapContextName, chset) + ", Map Size:" + super.size());
+            System.out.println("Map[" +
+                    new String(mapContextName, CHARSET_ISO_8859_1) +
+                    ", Map Size:" + super.size());
             Member[] mbrs = getMapMembers();
             for ( int i=0; i<mbrs.length;i++ ) {
                 System.out.println("Mbr["+(i+1)+"="+mbrs[i].getName());

==================================================
RequestUtil.java
index 6706f10f8b..76739fecf7 100644
--- a/java/org/apache/catalina/tribes/util/Arrays.java
+++ b/java/org/apache/catalina/tribes/util/Arrays.java
@@ -16,7 +16,7 @@
  */
 package org.apache.catalina.tribes.util;
 
-import java.io.UnsupportedEncodingException;
+import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.StringTokenizer;
@@ -27,15 +27,14 @@ import org.apache.catalina.tribes.UniqueId;
 import org.apache.catalina.tribes.group.AbsoluteOrder;
 import org.apache.catalina.tribes.membership.MemberImpl;
 import org.apache.catalina.tribes.membership.Membership;
-import org.apache.juli.logging.Log;
-import org.apache.juli.logging.LogFactory;
 
 /**
  * @author Filip Hanik
  * @version 1.0
  */
 public class Arrays {
-    private static final Log log = LogFactory.getLog(Arrays.class);
+    private static final Charset CHARSET_ISO_8859_1 =
+        Charset.forName("ISO-8859-1");
     
     public static boolean contains(byte[] source, int srcoffset, byte[] key, int keyoffset, int length) {
         if ( srcoffset < 0 || srcoffset >= source.length) throw new ArrayIndexOutOfBoundsException("srcoffset is out of bounds.");
@@ -218,13 +217,6 @@ public class Arrays {
 
 
     public static byte[] convert(String s) {
-        try {
-            return s.getBytes("ISO-8859-1");
-        }catch (UnsupportedEncodingException ux ) {
-            log.error("Unable to convert ["+s+"] into a byte[] using ISO-8859-1 encoding, falling back to default encoding.");
-            return s.getBytes();
-        }
+        return s.getBytes(CHARSET_ISO_8859_1);
     }
-
-
 }
\ No newline at end of file

==================================================
SSLValve.java
index 9333d95f31..0ebebd5cc9 100644
--- a/java/org/apache/catalina/util/RequestUtil.java
+++ b/java/org/apache/catalina/util/RequestUtil.java
@@ -19,12 +19,14 @@
 package org.apache.catalina.util;
 
 import java.io.UnsupportedEncodingException;
+import java.nio.charset.Charset;
 import java.text.SimpleDateFormat;
 import java.util.Map;
 import java.util.TimeZone;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.res.StringManager;
 
 
@@ -199,9 +201,9 @@ public final class RequestUtil {
             byte[] bytes = null;
             try {
                 if (encoding == null) {
-                    bytes = data.getBytes();
+                    bytes = data.getBytes(Charset.defaultCharset());
                 } else {
-                    bytes = data.getBytes(encoding);
+                    bytes = data.getBytes(B2CConverter.getCharset(encoding));
                 }
                 parseParameters(map, bytes, encoding);
             } catch (UnsupportedEncodingException uee) {
@@ -264,9 +266,9 @@ public final class RequestUtil {
         byte[] bytes = null;
         try {
             if (enc == null) {
-                bytes = str.getBytes();
+                bytes = str.getBytes(Charset.defaultCharset());
             } else {
-                bytes = str.getBytes(enc);
+                bytes = str.getBytes(B2CConverter.getCharset(enc));
             }
         } catch (UnsupportedEncodingException uee) {
             log.debug(sm.getString("requestUtil.urlDecode.uee", enc), uee);
@@ -337,7 +339,7 @@ public final class RequestUtil {
         }
         if (enc != null) {
             try {
-                return new String(bytes, 0, ox, enc);
+                return new String(bytes, 0, ox, B2CConverter.getCharset(enc));
             } catch (UnsupportedEncodingException uee) {
                 log.debug(sm.getString("requestUtil.urlDecode.uee", enc), uee);
                 return null;
@@ -411,6 +413,8 @@ public final class RequestUtil {
     public static void parseParameters(Map<String,String[]> map, byte[] data,
             String encoding) throws UnsupportedEncodingException {
 
+        Charset charset = B2CConverter.getCharset(encoding);
+        
         if (data != null && data.length > 0) {
             int    ix = 0;
             int    ox = 0;
@@ -420,7 +424,7 @@ public final class RequestUtil {
                 byte c = data[ix++];
                 switch ((char) c) {
                 case '&':
-                    value = new String(data, 0, ox, encoding);
+                    value = new String(data, 0, ox, charset);
                     if (key != null) {
                         putMapEntry(map, key, value);
                         key = null;
@@ -429,7 +433,7 @@ public final class RequestUtil {
                     break;
                 case '=':
                     if (key == null) {
-                        key = new String(data, 0, ox, encoding);
+                        key = new String(data, 0, ox, charset);
                         ox = 0;
                     } else {
                         data[ox++] = c;
@@ -448,7 +452,7 @@ public final class RequestUtil {
             }
             //The last value does not end in '&'.  So save it now.
             if (key != null) {
-                value = new String(data, 0, ox, encoding);
+                value = new String(data, 0, ox, charset);
                 putMapEntry(map, key, value);
             }
         }

==================================================
InternalNioInputBuffer.java
index 36955c7b23..4ef7d315a2 100644
--- a/java/org/apache/catalina/valves/SSLValve.java
+++ b/java/org/apache/catalina/valves/SSLValve.java
@@ -19,6 +19,7 @@ package org.apache.catalina.valves;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
+import java.nio.charset.Charset;
 import java.security.NoSuchProviderException;
 import java.security.cert.CertificateFactory;
 import java.security.cert.X509Certificate;
@@ -94,7 +95,8 @@ public class SSLValve extends ValveBase {
             String strcert4 = strcert3.concat(strcert2);
             String strcerts = strcert4.concat("\n-----END CERTIFICATE-----\n");
             // ByteArrayInputStream bais = new ByteArrayInputStream(strcerts.getBytes("UTF-8"));
-            ByteArrayInputStream bais = new ByteArrayInputStream(strcerts.getBytes());
+            ByteArrayInputStream bais = new ByteArrayInputStream(
+                    strcerts.getBytes(Charset.defaultCharset()));
             X509Certificate jsseCerts[] = null;
             String providerName = (String) request.getConnector().getProperty(
                     "clientCertProvider");

==================================================
BufferedInputFilter.java
index dfa3f672bc..2efcf3e7b4 100644
--- a/java/org/apache/coyote/http11/InternalNioInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioInputBuffer.java
@@ -21,6 +21,7 @@ package org.apache.coyote.http11;
 import java.io.EOFException;
 import java.io.IOException;
 import java.nio.channels.Selector;
+import java.nio.charset.Charset;
 
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.Request;
@@ -45,6 +46,9 @@ public class InternalNioInputBuffer extends AbstractInputBuffer {
     private static final org.apache.juli.logging.Log log =
         org.apache.juli.logging.LogFactory.getLog(InternalNioInputBuffer.class);
 
+    private static final Charset DEFAULT_CHARSET =
+        Charset.forName("ISO-8859-1");
+
     // -------------------------------------------------------------- Constants
 
     enum HeaderParseStatus {DONE, HAVE_MORE_HEADERS, NEED_MORE_DATA}
@@ -256,7 +260,7 @@ public class InternalNioInputBuffer extends AbstractInputBuffer {
             parsingRequestLinePhase = 2;
             if (log.isDebugEnabled()) {
                 log.debug("Received ["
-                        + new String(buf, pos, lastValid - pos, "ISO-8859-1")
+                        + new String(buf, pos, lastValid - pos, DEFAULT_CHARSET)
                         + "]");
             }
         }

==================================================
ChunkedInputFilter.java
index 14dc25ea1f..55186d008f 100644
--- a/java/org/apache/coyote/http11/filters/BufferedInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/BufferedInputFilter.java
@@ -18,6 +18,7 @@
 package org.apache.coyote.http11.filters;
 
 import java.io.IOException;
+import java.nio.charset.Charset;
 
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.Request;
@@ -47,7 +48,8 @@ public class BufferedInputFilter implements InputFilter {
     // ----------------------------------------------------- Static Initializer
 
     static {
-        ENCODING.setBytes(ENCODING_NAME.getBytes(), 0, ENCODING_NAME.length());
+        ENCODING.setBytes(ENCODING_NAME.getBytes(Charset.defaultCharset()), 0,
+                ENCODING_NAME.length());
     }
 
 

==================================================
IdentityInputFilter.java
index a48ae35553..180924e0c7 100644
--- a/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java
@@ -19,6 +19,7 @@ package org.apache.coyote.http11.filters;
 
 import java.io.EOFException;
 import java.io.IOException;
+import java.nio.charset.Charset;
 
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.Request;
@@ -50,7 +51,8 @@ public class ChunkedInputFilter implements InputFilter {
 
 
     static {
-        ENCODING.setBytes(ENCODING_NAME.getBytes(), 0, ENCODING_NAME.length());
+        ENCODING.setBytes(ENCODING_NAME.getBytes(Charset.defaultCharset()), 0,
+                ENCODING_NAME.length());
     }
 
 

==================================================
VoidInputFilter.java
index 873f8ea39c..666afa251a 100644
--- a/java/org/apache/coyote/http11/filters/IdentityInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/IdentityInputFilter.java
@@ -18,6 +18,7 @@
 package org.apache.coyote.http11.filters;
 
 import java.io.IOException;
+import java.nio.charset.Charset;
 
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.Request;
@@ -43,7 +44,8 @@ public class IdentityInputFilter implements InputFilter {
 
 
     static {
-        ENCODING.setBytes(ENCODING_NAME.getBytes(), 0, ENCODING_NAME.length());
+        ENCODING.setBytes(ENCODING_NAME.getBytes(Charset.defaultCharset()), 0,
+                ENCODING_NAME.length());
     }
 
 

==================================================
PageDataImpl.java
index 05571fd2ca..aea2bdbcab 100644
--- a/java/org/apache/coyote/http11/filters/VoidInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/VoidInputFilter.java
@@ -18,6 +18,7 @@
 package org.apache.coyote.http11.filters;
 
 import java.io.IOException;
+import java.nio.charset.Charset;
 
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.Request;
@@ -44,7 +45,8 @@ public class VoidInputFilter implements InputFilter {
 
 
     static {
-        ENCODING.setBytes(ENCODING_NAME.getBytes(), 0, ENCODING_NAME.length());
+        ENCODING.setBytes(ENCODING_NAME.getBytes(Charset.defaultCharset()), 0,
+                ENCODING_NAME.length());
     }
 
 

==================================================
SmapUtil.java
index 705fbc93b9..97ce4ca62e 100644
--- a/java/org/apache/jasper/compiler/PageDataImpl.java
+++ b/java/org/apache/jasper/compiler/PageDataImpl.java
@@ -19,7 +19,7 @@ package org.apache.jasper.compiler;
 import java.io.ByteArrayInputStream;
 import java.io.CharArrayWriter;
 import java.io.InputStream;
-import java.io.UnsupportedEncodingException;
+import java.nio.charset.Charset;
 import java.util.ListIterator;
 
 import javax.servlet.jsp.tagext.PageData;
@@ -53,6 +53,7 @@ class PageDataImpl extends PageData implements TagConstants {
     private static final String JSP_VERSION = "2.0";
     private static final String CDATA_START_SECTION = "<![CDATA[\n";
     private static final String CDATA_END_SECTION = "]]>\n";
+    private static final Charset CHARSET_UTF8 = Charset.forName("UTF-8");
 
     // string buffer used to build XML view
     private StringBuilder buf;
@@ -85,13 +86,7 @@ class PageDataImpl extends PageData implements TagConstants {
      */
     @Override
     public InputStream getInputStream() {
-        // Turn StringBuilder into InputStream
-        try {
-            return new ByteArrayInputStream(buf.toString().getBytes("UTF-8"));
-        } catch (UnsupportedEncodingException uee) {
-            // should never happen
-            throw new RuntimeException(uee.toString());
-        }
+        return new ByteArrayInputStream(buf.toString().getBytes(CHARSET_UTF8));
     }
 
     /*

==================================================
ProxyDirContext.java
index 615d4680bc..9ab2a81213 100644
--- a/java/org/apache/jasper/compiler/SmapUtil.java
+++ b/java/org/apache/jasper/compiler/SmapUtil.java
@@ -25,6 +25,7 @@ import java.io.IOException;
 import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
 import java.io.UnsupportedEncodingException;
+import java.nio.charset.Charset;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
@@ -159,7 +160,8 @@ public class SmapUtil {
 
         for (int i = 0; i < smap.length; i += 2) {
             File outServlet = new File(smap[i]);
-            SDEInstaller.install(outServlet, smap[i+1].getBytes());
+            SDEInstaller.install(outServlet,
+                    smap[i+1].getBytes(Charset.defaultCharset()));
         }
     }
 

==================================================
B2CConverter.java
index 8a85508130..79b9605524 100644
--- a/java/org/apache/naming/resources/ProxyDirContext.java
+++ b/java/org/apache/naming/resources/ProxyDirContext.java
@@ -21,6 +21,7 @@ package org.apache.naming.resources;
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.charset.Charset;
 import java.util.Hashtable;
 
 import javax.naming.Binding;
@@ -309,7 +310,7 @@ public class ProxyDirContext implements DirContext {
             return object;
         } else {
             return new Resource(new ByteArrayInputStream
-                (object.toString().getBytes()));
+                (object.toString().getBytes(Charset.defaultCharset())));
         }
     }
 
@@ -1466,7 +1467,7 @@ public class ProxyDirContext implements DirContext {
                     entry.resource = (Resource) object;
                 } else {
                     entry.resource = new Resource(new ByteArrayInputStream
-                        (object.toString().getBytes()));
+                        (object.toString().getBytes(Charset.defaultCharset())));
                 }
                 Attributes attributes = dirContext.getAttributes(parseName(name));
                 if (!(attributes instanceof ResourceAttributes)) {
@@ -1629,7 +1630,7 @@ public class ProxyDirContext implements DirContext {
                     entry.resource = (Resource) object;
                 } else {
                     entry.resource = new Resource(new ByteArrayInputStream
-                        (object.toString().getBytes()));
+                        (object.toString().getBytes(Charset.defaultCharset())));
                 }
             } catch (NamingException e) {
                 exists = false;

==================================================
ByteChunk.java
index 1b40f4a385..4d1cf7e571 100644
--- a/java/org/apache/tomcat/util/buf/B2CConverter.java
+++ b/java/org/apache/tomcat/util/buf/B2CConverter.java
@@ -22,6 +22,10 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.UnsupportedEncodingException;
+import java.nio.charset.Charset;
+import java.nio.charset.IllegalCharsetNameException;
+import java.nio.charset.UnsupportedCharsetException;
+import java.util.concurrent.ConcurrentHashMap;
 
 /** Efficient conversion of bytes  to character .
  *  
@@ -40,6 +44,32 @@ public class B2CConverter {
     private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( B2CConverter.class );
     
+    private static final ConcurrentHashMap<String, Charset> encodingToCharsetCache =
+        new ConcurrentHashMap<String, Charset>();
+
+    public static Charset getCharset(String enc)
+            throws UnsupportedEncodingException{
+
+        Charset charset = encodingToCharsetCache.get(enc);
+        if (charset == null) {
+            try {
+                charset = Charset.forName(enc);
+            } catch (IllegalCharsetNameException icne) {
+                UnsupportedEncodingException uee =
+                    new UnsupportedEncodingException();
+                uee.initCause(icne);
+                throw uee;
+            } catch (UnsupportedCharsetException uce) {
+                UnsupportedEncodingException uee =
+                    new UnsupportedEncodingException();
+                uee.initCause(uce);
+                throw uee;
+            }
+            encodingToCharsetCache.put(enc, charset);
+        }
+        return charset;
+    }
+    
     private IntermediateInputStream iis;
     private ReadConvertor conv;
     private String encoding;
@@ -104,7 +134,7 @@ public class B2CConverter {
     {
         // destroy the reader/iis
         iis=new IntermediateInputStream();
-        conv=new ReadConvertor( iis, encoding );
+        conv = new ReadConvertor(iis, getCharset(encoding));
     }
 
 }
@@ -120,10 +150,8 @@ final class  ReadConvertor extends InputStreamReader {
     
     /** Create a converter.
      */
-    public ReadConvertor( IntermediateInputStream in, String enc )
-        throws UnsupportedEncodingException
-    {
-        super( in, enc );
+    public ReadConvertor(IntermediateInputStream in, Charset charset) {
+        super(in, charset);
     }
     
     /** Overridden - will do nothing but reset internal state.

==================================================
MessageBytes.java
index 960d1b16c9..42aaf985fc 100644
--- a/java/org/apache/tomcat/util/buf/ByteChunk.java
+++ b/java/org/apache/tomcat/util/buf/ByteChunk.java
@@ -499,8 +499,11 @@ public final class ByteChunk implements Cloneable, Serializable {
     public String toStringInternal() {
         String strValue=null;
         try {
-            if( enc==null ) enc=DEFAULT_CHARACTER_ENCODING;
-            strValue = new String( buff, start, end-start, enc );
+            if (enc == null) {
+                enc = DEFAULT_CHARACTER_ENCODING;
+            }
+            strValue = new String(buff, start, end-start,
+                    B2CConverter.getCharset(enc));
             /*
              Does not improve the speed too much on most systems,
              it's safer to use the "classical" new String().

==================================================
Parameters.java
index 9d8109488b..f50e27bea4 100644
--- a/java/org/apache/tomcat/util/buf/MessageBytes.java
+++ b/java/org/apache/tomcat/util/buf/MessageBytes.java
@@ -19,6 +19,7 @@ package org.apache.tomcat.util.buf;
 
 import java.io.IOException;
 import java.io.Serializable;
+import java.nio.charset.Charset;
 import java.util.Locale;
 
 /**
@@ -233,7 +234,7 @@ public final class MessageBytes implements Cloneable, Serializable {
         }
         toString();
         type=T_BYTES;
-        byte bb[] = strValue.getBytes();
+        byte bb[] = strValue.getBytes(Charset.defaultCharset());
         byteC.setBytes(bb, 0, bb.length);
     }
 

==================================================
FileUploadBase.java
index 5541c81ff9..b26b2bd890 100644
--- a/java/org/apache/tomcat/util/http/Parameters.java
+++ b/java/org/apache/tomcat/util/http/Parameters.java
@@ -18,7 +18,7 @@
 package org.apache.tomcat.util.http;
 
 import java.io.IOException;
-import java.io.UnsupportedEncodingException;
+import java.nio.charset.Charset;
 import java.util.Enumeration;
 import java.util.Hashtable;
 
@@ -191,6 +191,9 @@ public final class Parameters {
     private ByteChunk origValue=new ByteChunk();
     CharChunk tmpNameC=new CharChunk(1024);
     public static final String DEFAULT_ENCODING = "ISO-8859-1";
+    public static final Charset DEFAULT_CHARSET =
+        Charset.forName(DEFAULT_ENCODING);
+    
     
     public void processParameters( byte bytes[], int start, int len ) {
         processParameters(bytes, start, len, encoding);
@@ -202,13 +205,8 @@ public final class Parameters {
         int pos=start;
         
         if(log.isDebugEnabled()) {
-            try {
-                log.debug("Bytes: " +
-                        new String(bytes, start, len, DEFAULT_ENCODING));
-            } catch (UnsupportedEncodingException e) {
-                // Should never happen...
-                log.error("Unable to convert bytes", e);
-            }
+            log.debug("Bytes: " +
+                    new String(bytes, start, len, DEFAULT_CHARSET));
         }
 
         do {
@@ -227,14 +225,9 @@ public final class Parameters {
                 valStart=nameEnd;
                 valEnd=nameEnd;
                 if(log.isDebugEnabled()) {
-                    try {
-                        log.debug("no equal " + nameStart + " " + nameEnd + " " +
-                                new String(bytes, nameStart, nameEnd-nameStart,
-                                        DEFAULT_ENCODING) );
-                    } catch (UnsupportedEncodingException e) {
-                        // Should never happen...
-                        log.error("Unable to convert bytes", e);
-                    }
+                    log.debug("no equal " + nameStart + " " + nameEnd + " " +
+                        new String(bytes, nameStart, nameEnd-nameStart,
+                                        DEFAULT_CHARSET));
                 }
             }
             if( nameEnd== -1 ) 
@@ -254,13 +247,8 @@ public final class Parameters {
                     // No name eg ...&=xx&... will trigger this
                     if (valEnd >= nameStart) {
                         msg.append('\'');
-                        try {
-                            msg.append(new String(bytes, nameStart,
-                                    valEnd - nameStart, DEFAULT_ENCODING));
-                        } catch (UnsupportedEncodingException e) {
-                            // Should never happen...
-                            log.error("Unable to convert bytes", e);
-                        }
+                        msg.append(new String(bytes, nameStart,
+                                valEnd - nameStart, DEFAULT_CHARSET));
                         msg.append("' ");
                     }
                     msg.append("ignored.");

==================================================
