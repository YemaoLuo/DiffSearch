96870a71ccdf88ec9c1ec668728be739bee212b9
==================================================
Start to implement the lambda expression syntax. Very basic expressions work. I expect further changes to be required for more complex expressions.
==================================================
Mark Emlyn
==================================================
Sun Jul 14 21:07:26 2013 +0000
==================================================
AstIdentifier.java
index 002a0b1c1a..a049962b8e 100644
--- a/java/org/apache/el/Messages.properties
+++ b/java/org/apache/el/Messages.properties
@@ -51,4 +51,7 @@ error.fnMapper.paramcount=Function ''{0}'' specifies {1} params, but {2} were de
 error.context.null=ELContext was null
 
 # Parser
-error.identifier.notjava=The identifier [{0}] is not a valid Java identifier as required by section 1.19 of the EL specification (Identifier ::= Java language identifier). This check can be disabled by setting the system property org.apache.el.parser.SKIP_IDENTIFIER_CHECK to true.
\ No newline at end of file
+error.identifier.notjava=The identifier [{0}] is not a valid Java identifier as required by section 1.19 of the EL specification (Identifier ::= Java language identifier). This check can be disabled by setting the system property org.apache.el.parser.SKIP_IDENTIFIER_CHECK to true.
+
+# AstLambdaExpression
+error.args.tooFew=Only [{0}] arguments were provided for a lambda expression that requires at least [{1}]

==================================================
AstLambdaExpression.java
index fe489939ae..ecff8c9159 100644
--- a/java/org/apache/el/parser/AstIdentifier.java
+++ b/java/org/apache/el/parser/AstIdentifier.java
@@ -61,6 +61,12 @@ public final class AstIdentifier extends SimpleNode {
 
     @Override
     public Object getValue(EvaluationContext ctx) throws ELException {
+        // Lambda parameters
+        if (ctx.isLambdaArgument(this.image)) {
+            return ctx.getLambdaArgument(this.image);
+        }
+
+        // Variable mapper
         VariableMapper varMapper = ctx.getVariableMapper();
         if (varMapper != null) {
             ValueExpression expr = varMapper.resolveVariable(this.image);
@@ -68,6 +74,8 @@ public final class AstIdentifier extends SimpleNode {
                 return expr.getValue(ctx.getELContext());
             }
         }
+
+        // EL Resolvers
         ctx.setPropertyResolved(false);
         Object result = ctx.getELResolver().getValue(ctx, null, this.image);
         if (!ctx.isPropertyResolved()) {

==================================================
AstLambdaExpressionOrInvocation.java
index 89414a4217..d7270c5eb1 100644
--- a/java/org/apache/el/parser/AstLambdaExpression.java
+++ b/java/org/apache/el/parser/AstLambdaExpression.java
@@ -17,10 +17,53 @@
 /* Generated By:JJTree: Do not edit this line. AstLambdaExpression.java Version 4.3 */
 package org.apache.el.parser;
 
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.el.ELException;
+
+import org.apache.el.lang.EvaluationContext;
+import org.apache.el.util.MessageFactory;
+
 public class AstLambdaExpression extends SimpleNode {
 
     public AstLambdaExpression(int id) {
         super(id);
     }
+
+    @SuppressWarnings("null") // paramValues[i] can't be null due to checks
+    @Override
+    public Object invoke(EvaluationContext ctx, Class<?>[] paramTypes,
+            Object[] paramValues) throws ELException {
+
+        // Two children - the formal parameters and the expression
+        AstLambdaParameters formalParameters =
+                (AstLambdaParameters) children[0];
+
+        int paramCount = formalParameters.children.length;
+        int argCount = 0;
+        if (paramValues != null) {
+            argCount = paramValues.length;
+        }
+        if (paramCount > argCount) {
+            throw new ELException(MessageFactory.get("error.args.tooFew",
+                    Integer.valueOf(argCount), Integer.valueOf(paramCount)));
+        }
+
+        // Build the argument map
+        Map<String,Object> lambdaArgumnents = new HashMap<>();
+        for (int i = 0; i < formalParameters.children.length; i++) {
+            lambdaArgumnents.put(formalParameters.children[i].getImage(),
+                    paramValues[i]);
+        }
+
+        ctx.enterLambdaScope(lambdaArgumnents);
+
+        try {
+            return children[1].getValue(ctx);
+        } finally {
+            ctx.exitLambdaScope();
+        }
+    }
 }
 /* JavaCC - OriginalChecksum=071159eff10c8e15ec612c765ae4480a (do not edit this line) */

==================================================
TestAstLambdaExpression.java
index 49746253db..d7ea8e753d 100644
--- a/java/org/apache/el/parser/AstLambdaExpressionOrInvocation.java
+++ b/java/org/apache/el/parser/AstLambdaExpressionOrInvocation.java
@@ -17,10 +17,33 @@
 /* Generated By:JJTree: Do not edit this line. AstLambdaExpressionOrInvocation.java Version 4.3 */
 package org.apache.el.parser;
 
-public
-class AstLambdaExpressionOrInvocation extends SimpleNode {
-  public AstLambdaExpressionOrInvocation(int id) {
-    super(id);
-  }
+import javax.el.ELException;
+
+import org.apache.el.lang.EvaluationContext;
+
+public class AstLambdaExpressionOrInvocation extends SimpleNode {
+
+    public AstLambdaExpressionOrInvocation(int id) {
+        super(id);
+    }
+
+
+    @Override
+    public Object getValue(EvaluationContext ctx) throws ELException {
+
+        if (children.length == 2) {
+            AstLambdaExpression lambdaExpression =
+                    (AstLambdaExpression) children[0];
+
+
+            Object[] args =
+                    ((AstMethodParameters) children[1]).getParameters(ctx);
+
+            return lambdaExpression.invoke(ctx, null, args);
+        }
+
+        // TODO Auto-generated method stub
+        return super.getValue(ctx);
+    }
 }
 /* JavaCC - OriginalChecksum=6b3dd15b31540457a41bd55974037ed9 (do not edit this line) */

==================================================
