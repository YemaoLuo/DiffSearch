65b6683147191ed86a6f5625fdee81c34ee7d4fe
==================================================
Correctly handle a digest authorization header when one of the hex field values ends the header with in an invalid character.
==================================================
Mark Thomas
==================================================
Wed May 30 13:40:16 2018 +0000
==================================================
HttpParser.java
Correctly handle a digest authorization header when one of the hex field values ends the header with in an invalid character.
Expand the test cases to improve coverage including this issue.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1832545 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestAuthorizationDigest.java
index d4561dc428..b4c5c92e36 100644
--- a/java/org/apache/tomcat/util/http/parser/HttpParser.java
+++ b/java/org/apache/tomcat/util/http/parser/HttpParser.java
@@ -317,38 +317,36 @@ public class HttpParser {
     }
 
 
-    // Skip any LWS and return the next char
-    static int skipLws(Reader input, boolean withReset) throws IOException {
+    // Skip any LWS and position to read the next character. The next character
+    // is returned as being able to 'peek()' it allows a small optimisation in
+    // some cases.
+    static int skipLws(Reader input) throws IOException {
 
-        if (withReset) {
-            input.mark(1);
-        }
+        input.mark(1);
         int c = input.read();
 
         while (c == 32 || c == 9 || c == 10 || c == 13) {
-            if (withReset) {
-                input.mark(1);
-            }
+            input.mark(1);
             c = input.read();
         }
 
-        if (withReset) {
-            input.reset();
-        }
+        input.reset();
         return c;
     }
 
     static SkipResult skipConstant(Reader input, String constant) throws IOException {
         int len = constant.length();
 
-        int c = skipLws(input, false);
+        skipLws(input);
+        input.mark(len);
+        int c = input.read();
 
         for (int i = 0; i < len; i++) {
             if (i == 0 && c == -1) {
                 return SkipResult.EOF;
             }
             if (c != constant.charAt(i)) {
-                input.skip(-(i + 1));
+                input.reset();
                 return SkipResult.NOT_FOUND;
             }
             if (i != (len - 1)) {
@@ -366,14 +364,18 @@ public class HttpParser {
     static String readToken(Reader input) throws IOException {
         StringBuilder result = new StringBuilder();
 
-        int c = skipLws(input, false);
+        skipLws(input);
+        input.mark(1);
+        int c = input.read();
 
         while (c != -1 && isToken(c)) {
             result.append((char) c);
+            input.mark(1);
             c = input.read();
         }
-        // Skip back so non-token character is available for next read
-        input.skip(-1);
+        // Use mark(1)/reset() rather than skip(-1) since skip() is a NOP
+        // once the end of the String has been reached.
+        input.reset();
 
         if (c != -1 && result.length() == 0) {
             return null;
@@ -389,7 +391,8 @@ public class HttpParser {
      */
     static String readQuotedString(Reader input, boolean returnQuoted) throws IOException {
 
-        int c = skipLws(input, false);
+        skipLws(input);
+        int c = input.read();
 
         if (c != '"') {
             return null;
@@ -425,8 +428,8 @@ public class HttpParser {
     static String readTokenOrQuotedString(Reader input, boolean returnQuoted)
             throws IOException {
 
-        // Go back so first non-LWS character is available to be read again
-        int c = skipLws(input, true);
+        // Peek at next character to enable correct method to be called
+        int c = skipLws(input);
 
         if (c == '"') {
             return readQuotedString(input, returnQuoted);
@@ -452,7 +455,9 @@ public class HttpParser {
         StringBuilder result = new StringBuilder();
         boolean quoted = false;
 
-        int c = skipLws(input, false);
+        skipLws(input);
+        input.mark(1);
+        int c = input.read();
 
         if (c == '"') {
             quoted = true;
@@ -461,10 +466,12 @@ public class HttpParser {
         } else {
             result.append((char) c);
         }
+        input.mark(1);
         c = input.read();
 
         while (c != -1 && isToken(c)) {
             result.append((char) c);
+            input.mark(1);
             c = input.read();
         }
 
@@ -473,8 +480,9 @@ public class HttpParser {
                 return null;
             }
         } else {
-            // Skip back so non-token character is available for next read
-            input.skip(-1);
+            // Use mark(1)/reset() rather than skip(-1) since skip() is a NOP
+            // once the end of the String has been reached.
+            input.reset();
         }
 
         if (c != -1 && result.length() == 0) {
@@ -503,7 +511,9 @@ public class HttpParser {
         StringBuilder result = new StringBuilder();
         boolean quoted = false;
 
-        int c = skipLws(input, false);
+        skipLws(input);
+        input.mark(1);
+        int c = input.read();
 
         if (c == '"') {
             quoted = true;
@@ -515,6 +525,7 @@ public class HttpParser {
             }
             result.append((char) c);
         }
+        input.mark(1);
         c = input.read();
 
         while (c != -1 && isHex(c)) {
@@ -522,6 +533,7 @@ public class HttpParser {
                 c -= ('A' - 'a');
             }
             result.append((char) c);
+            input.mark(1);
             c = input.read();
         }
 
@@ -530,8 +542,9 @@ public class HttpParser {
                 return null;
             }
         } else {
-            // Skip back so non-hex character is available for next read
-            input.skip(-1);
+            // Use mark(1)/reset() rather than skip(-1) since skip() is a NOP
+            // once the end of the String has been reached.
+            input.reset();
         }
 
         if (c != -1 && result.length() == 0) {
@@ -542,7 +555,8 @@ public class HttpParser {
     }
 
     static double readWeight(Reader input, char delimiter) throws IOException {
-        int c = skipLws(input, false);
+        skipLws(input);
+        int c = input.read();
         if (c == -1 || c == delimiter) {
             // No q value just whitespace
             return 1;
@@ -552,7 +566,8 @@ public class HttpParser {
             return 0;
         }
         // RFC 7231 does not allow whitespace here but be tolerant
-        c = skipLws(input, false);
+        skipLws(input);
+        c = input.read();
         if (c != '=') {
             // Malformed. Use quality of zero so it is dropped.
             skipUntil(input, c, delimiter);
@@ -560,7 +575,8 @@ public class HttpParser {
         }
 
         // RFC 7231 does not allow whitespace here but be tolerant
-        c = skipLws(input, false);
+        skipLws(input);
+        c = input.read();
 
         // Should be no more than 3 decimal places
         StringBuilder value = new StringBuilder(5);

==================================================
