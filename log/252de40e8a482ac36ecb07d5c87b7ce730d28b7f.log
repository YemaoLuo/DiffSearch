252de40e8a482ac36ecb07d5c87b7ce730d28b7f
==================================================
EL 3.0 collections operations.
==================================================
Mark Emlyn
==================================================
Mon Jul 15 13:59:51 2013 +0000
==================================================
AstLambdaExpression.java
EL 3.0 collections operations.
Implement filter

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1503253 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Stream.java
index 44fc712eae..ec74309601 100644
--- a/java/org/apache/el/parser/AstLambdaExpression.java
+++ b/java/org/apache/el/parser/AstLambdaExpression.java
@@ -55,6 +55,7 @@ public class AstLambdaExpression extends SimpleNode {
             ValueExpressionImpl ve = new ValueExpressionImpl("", children[1],
                     ctx.getFunctionMapper(), ctx.getVariableMapper(), null);
             LambdaExpression le = new LambdaExpression(formalParameters, ve);
+            le.setELContext(ctx);
 
             return le;
         }

==================================================
TestCollectionOperations.java
index 3a99532843..840f6d3455 100644
--- a/java/org/apache/el/stream/Stream.java
+++ b/java/org/apache/el/stream/Stream.java
@@ -19,6 +19,11 @@ package org.apache.el.stream;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
+import java.util.NoSuchElementException;
+
+import javax.el.LambdaExpression;
+
+import org.apache.el.lang.ELSupport;
 
 public class Stream {
 
@@ -28,6 +33,55 @@ public class Stream {
         this.iterator = iterator;
     }
 
+    public Stream filter(final LambdaExpression le) {
+        Iterator<Object> filterIterator = new Iterator<Object>() {
+
+            private boolean foundNext = false;
+            private Object next;
+
+            @Override
+            public boolean hasNext() {
+                if (foundNext) {
+                    return true;
+                }
+                findNext();
+                return foundNext;
+            }
+
+            @Override
+            public Object next() {
+                if (foundNext) {
+                    foundNext = false;
+                    return next;
+                }
+                findNext();
+                if (foundNext) {
+                    foundNext = false;
+                    return next;
+                } else {
+                    throw new NoSuchElementException();
+                }
+            }
+
+            @Override
+            public void remove() {
+                throw new UnsupportedOperationException();
+            }
+
+            private void findNext() {
+                while (iterator.hasNext()) {
+                    Object obj = iterator.next();
+                    if (ELSupport.coerceToBoolean(
+                            le.invoke(obj)).booleanValue()) {
+                        next = obj;
+                        foundNext = true;
+                        break;
+                    }
+                }
+            }
+        };
+        return new Stream(filterIterator);
+    }
 
     public List<Object> toList() {
         List<Object> result = new ArrayList<>();

==================================================
