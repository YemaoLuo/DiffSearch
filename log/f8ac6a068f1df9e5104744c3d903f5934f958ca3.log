f8ac6a068f1df9e5104744c3d903f5934f958ca3
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54239
==================================================
Mark Emlyn
==================================================
Tue Feb 12 14:50:39 2013 +0000
==================================================
ELInterpreter.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54239
Enable applications to use a custom EL interpreter.
Based on a patch by Sheldon Shao.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1445190 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ELInterpreterFactory.java
new file mode 100644
index 0000000000..d2c5bce460
--- /dev/null
+++ b/java/org/apache/jasper/compiler/ELInterpreter.java
@@ -0,0 +1,46 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.jasper.compiler;
+
+import org.apache.jasper.JspCompilationContext;
+
+/**
+ * Defines the interface for the expression language interpreter. This allows
+ * users to provide custom EL interpreter implementations that can optimise
+ * EL processing for an application by , for example, performing code generation
+ * for simple expressions.
+ */
+public interface ELInterpreter {
+
+    /**
+     * Returns the string representing the code that will be inserted into the
+     * servlet generated for JSP. The default implementation creates a call to
+     * {@link org.apache.jasper.runtime.PageContextImpl#proprietaryEvaluate(
+     * String, Class, javax.servlet.jsp.PageContext,
+     * org.apache.jasper.runtime.ProtectedFunctionMapper, boolean)} but other
+     * implementations may produce more optimised code.
+     *
+     * @param expression a String containing zero or more "${}" expressions
+     * @param expectedType the expected type of the interpreted result
+     * @param fnmapvar Variable pointing to a function map.
+     * @param xmlEscape True if the result should do XML escaping
+     * @return a String representing a call to the EL interpreter.
+     */
+    public String interpreterCall(JspCompilationContext context,
+            boolean isTagFile, String expression,
+            Class<?> expectedType, String fnmapvar, boolean xmlEscape);
+}

==================================================
Generator.java
new file mode 100644
index 0000000000..0804a00cbd
--- /dev/null
+++ b/java/org/apache/jasper/compiler/ELInterpreterFactory.java
@@ -0,0 +1,104 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.jasper.compiler;
+
+import javax.servlet.ServletContext;
+
+import org.apache.jasper.JspCompilationContext;
+
+/**
+ * Provides {@link ELInterpreter} instances for JSP compilation.
+ *
+ * The search order is as follows:
+ * <ol>
+ * <li>ELInterpreter instance or implementation class name provided as a
+ *     ServletContext attribute</li>
+ * <li>Implementation class named in a ServletContext initialisation parameter
+ *     </li>
+ * <li>Default implementation</li>
+ * </ol>
+ */
+public class ELInterpreterFactory {
+
+    public static final String EL_INTERPRETER_CLASS_NAME =
+            ELInterpreter.class.getName();
+
+    private static final ELInterpreter DEFAULT_INSTANCE =
+            new DefaultELInterpreter();
+
+
+    /**
+     * Obtain the correct EL Interpreter for the given web application.
+     */
+    public static ELInterpreter getELInterpreter(ServletContext context)
+            throws Exception {
+
+        ELInterpreter result = null;
+
+        // Search for an implementation
+        // 1. ServletContext attribute (set by application or cached by a
+        //    previous call to this method).
+        Object attribute = context.getAttribute(EL_INTERPRETER_CLASS_NAME);
+        if (attribute instanceof ELInterpreter) {
+            return (ELInterpreter) attribute;
+        } else if (attribute instanceof String) {
+            result = createInstance(context, (String) attribute);
+        }
+
+        // 2. ServletContext init parameter
+        if (result == null) {
+            String className =
+                    context.getInitParameter(EL_INTERPRETER_CLASS_NAME);
+            if (className != null) {
+                result = createInstance(context, className);
+            }
+        }
+
+        // 3. Default
+        if (result == null) {
+            result = DEFAULT_INSTANCE;
+        }
+
+        // Cache the result for next time
+        context.setAttribute(EL_INTERPRETER_CLASS_NAME, result);
+        return result;
+    }
+
+
+    private static ELInterpreter createInstance(ServletContext context,
+            String className) throws Exception {
+        return (ELInterpreter) context.getClassLoader().loadClass(
+                    className).newInstance();
+    }
+
+
+    private ELInterpreterFactory() {
+        // Utility class. Hide default constructor.
+    }
+
+
+    public static class DefaultELInterpreter implements ELInterpreter {
+
+        @Override
+        public String interpreterCall(JspCompilationContext context,
+                boolean isTagFile, String expression,
+                Class<?> expectedType, String fnmapvar, boolean xmlEscape) {
+            return JspUtil.interpreterCall(isTagFile, expression, expectedType,
+                    fnmapvar, xmlEscape);
+        }
+    }
+}

==================================================
TestELInterpreterFactory.java
index 9451263816..15c6a7befe 100644
--- a/java/org/apache/jasper/resources/LocalStrings_ja.properties
+++ b/java/org/apache/jasper/resources/LocalStrings_ja.properties
@@ -313,3 +313,5 @@ jsp.error.unbalanced.endtag=\u7d42\u4e86\u30bf\u30b0 \"&lt;/{0}\" \u306e\u5bfe\u
 jsp.error.invalid.bean=useBean\u306e\u30af\u30e9\u30b9\u5c5e\u6027 {0} \u306e\u5024\u304c\u7121\u52b9\u3067\u3059
 jsp.error.prefix.use_before_dcl=\u3053\u306e\u30bf\u30b0\u6307\u793a\u5b50\u3067\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u30d7\u30ea\u30d5\u30a3\u30c3\u30af\u30b9 {0} \u306f\u3001\u3059\u3067\u306b\u30d5\u30a1\u30a4\u30eb {1} \u306e {2} \u884c\u76ee\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059
 
+#ELInterpreter
+jsp.error.el_interpreter_class.instantiation=ELInterpreter class\u306e\u30ed\u30fc\u30c9\u53c8\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u306b\u5931\u6557\u3057\u307e\u3057\u305f [{0}]
\ No newline at end of file

==================================================
