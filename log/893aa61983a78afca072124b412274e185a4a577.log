893aa61983a78afca072124b412274e185a4a577
==================================================
ALLOW_ENCODED_SLASH -> encodedSolidusHandling
==================================================
Mark Thomas
==================================================
Tue Mar 31 21:02:01 2020 +0100
==================================================
Connector.java
ALLOW_ENCODED_SLASH -> encodedSolidusHandling

Replace the system property with a Connector attribute and add an
additional handling option of passing the %nn encoded sequence through



==================================================
CoyoteAdapter.java
index d78afff7cf..62e4384ecf 100644
--- a/java/org/apache/catalina/connector/Connector.java
+++ b/java/org/apache/catalina/connector/Connector.java
@@ -42,6 +42,7 @@ import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.IntrospectionUtils;
 import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.CharsetUtil;
+import org.apache.tomcat.util.buf.EncodedSolidusHandling;
 import org.apache.tomcat.util.net.SSLHostConfig;
 import org.apache.tomcat.util.net.openssl.OpenSSLImplementation;
 import org.apache.tomcat.util.res.StringManager;
@@ -105,6 +106,11 @@ public class Connector extends LifecycleMBeanBase  {
 
         // Default for Connector depends on this system property
         setThrowOnFailure(Boolean.getBoolean("org.apache.catalina.startup.EXIT_ON_INIT_FAILURE"));
+
+        // Default for Connector depends on this (deprecated) system property
+        if (Boolean.parseBoolean(System.getProperty("org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH", "false"))) {
+            encodedSolidusHandling = EncodedSolidusHandling.DECODE;
+        }
     }
 
 
@@ -282,6 +288,9 @@ public class Connector extends LifecycleMBeanBase  {
     private Charset uriCharset = StandardCharsets.UTF_8;
 
 
+    private EncodedSolidusHandling encodedSolidusHandling = EncodedSolidusHandling.REJECT;
+
+
     /**
      * URI encoding as body.
      */
@@ -924,6 +933,21 @@ public class Connector extends LifecycleMBeanBase  {
     }
 
 
+    public String getEncodedSolidusHandling() {
+        return encodedSolidusHandling.getValue();
+    }
+
+
+    public void setEncodedSolidusHandling(String encodedSolidusHandling) {
+        this.encodedSolidusHandling = EncodedSolidusHandling.fromString(encodedSolidusHandling);
+    }
+
+
+    public EncodedSolidusHandling getEncodedSolidusHandlingInternal() {
+        return encodedSolidusHandling;
+    }
+
+
     // --------------------------------------------------------- Public Methods
 
     /**

==================================================
Request.java
index 9bfe3015e0..4a4e32a9ce 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -626,7 +626,7 @@ public class CoyoteAdapter implements Adapter {
             // URI decoding
             // %xx decoding of the URL
             try {
-                req.getURLDecoder().convert(decodedURI.getByteChunk(), false);
+                req.getURLDecoder().convert(decodedURI.getByteChunk(), connector.getEncodedSolidusHandlingInternal());
             } catch (IOException ioe) {
                 response.sendError(400, "Invalid URI: " + ioe.getMessage());
             }

==================================================
EncodedSolidusHandling.java
index e36debf71d..74f9ad514b 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -95,6 +95,7 @@ import org.apache.tomcat.InstanceManager;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
+import org.apache.tomcat.util.buf.EncodedSolidusHandling;
 import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.buf.StringUtils;
 import org.apache.tomcat.util.buf.UDecoder;
@@ -2149,8 +2150,9 @@ public class Request implements HttpServletRequest {
         while (pos < len) {
             if (uri[pos] == '/') {
                 return pos;
-            } else if (UDecoder.ALLOW_ENCODED_SLASH && uri[pos] == '%' && pos + 2 < len &&
-                    uri[pos+1] == '2' && (uri[pos + 2] == 'f' || uri[pos + 2] == 'F')) {
+            } else if (connector.getEncodedSolidusHandlingInternal() == EncodedSolidusHandling.DECODE &&
+                    uri[pos] == '%' && pos + 2 < len && uri[pos+1] == '2' &&
+                    (uri[pos + 2] == 'f' || uri[pos + 2] == 'F')) {
                 return pos;
             }
             pos++;

==================================================
UDecoder.java
index 7badd5bcfc..2dd62b93e9 100644
--- a/java/org/apache/tomcat/util/buf/LocalStrings.properties
+++ b/java/org/apache/tomcat/util/buf/LocalStrings.properties
@@ -22,6 +22,8 @@ byteBufferUtils.cleaner=Cannot use direct ByteBuffer cleaner, memory leaking may
 
 chunk.overflow=Buffer overflow and no sink is set, limit [{0}] and buffer length [{1}]
 
+encodedSolidusHandling.invalid=The value [{0}] is not recognised
+
 hexUtils.fromHex.nonHex=The input must consist only of hex digits
 hexUtils.fromHex.oddDigits=The input must consist of an even number of hex digits
 

==================================================
TestRequest.java
index 73c72382e2..d917ca0a47 100644
--- a/java/org/apache/tomcat/util/buf/UDecoder.java
+++ b/java/org/apache/tomcat/util/buf/UDecoder.java
@@ -37,9 +37,6 @@ public final class UDecoder {
 
     private static final StringManager sm = StringManager.getManager(UDecoder.class);
 
-    public static final boolean ALLOW_ENCODED_SLASH =
-        Boolean.parseBoolean(System.getProperty("org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH", "false"));
-
     private static class DecodeException extends CharConversionException {
         private static final long serialVersionUID = 1L;
         public DecodeException(String s) {
@@ -64,21 +61,45 @@ public final class UDecoder {
     private static final IOException EXCEPTION_SLASH = new DecodeException(
             "noSlash");
 
-    public UDecoder()
-    {
+
+    /**
+     * URLDecode, will modify the source. Assumes source bytes are encoded using
+     * a superset of US-ASCII as per RFC 7230. "%2f" will be rejected unless the
+     * input is a query string.
+     *
+     * @param mb    The URL encoded bytes
+     * @param query {@code true} if this is a query string. For a query string
+     *                  '+' will be decoded to ' '
+     *
+     * @throws IOException Invalid %xx URL encoding
+     */
+    public void convert(ByteChunk mb, boolean query) throws IOException {
+        if (query) {
+            convert(mb, true, EncodedSolidusHandling.DECODE);
+        } else {
+            convert(mb, false, EncodedSolidusHandling.REJECT);
+        }
     }
 
+
     /**
      * URLDecode, will modify the source. Assumes source bytes are encoded using
      * a superset of US-ASCII as per RFC 7230.
      *
-     * @param mb The URL encoded bytes
-     * @param query <code>true</code> if this is a query string
+     * @param mb                        The URL encoded bytes
+     * @param encodedSolidusHandling    How should the %2f sequence handled by
+     *                                      the decoder? For query strings this
+     *                                      parameter will be ignored and the
+     *                                      %2f sequence will be decoded
      * @throws IOException Invalid %xx URL encoding
      */
-    public void convert( ByteChunk mb, boolean query )
-        throws IOException
-    {
+    public void convert(ByteChunk mb, EncodedSolidusHandling encodedSolidusHandling) throws IOException {
+        convert(mb, false, encodedSolidusHandling);
+    }
+
+
+    private void convert(ByteChunk mb, boolean query, EncodedSolidusHandling encodedSolidusHandling) throws IOException {
+
         int start=mb.getOffset();
         byte buff[]=mb.getBytes();
         int end=mb.getEnd();
@@ -97,8 +118,6 @@ public final class UDecoder {
             idx=idx2;
         }
 
-        final boolean noSlash = !(ALLOW_ENCODED_SLASH || query);
-
         for( int j=idx; j<end; j++, idx++ ) {
             if( buff[ j ] == '+' && query) {
                 buff[idx]= (byte)' ' ;
@@ -117,10 +136,22 @@ public final class UDecoder {
 
                 j+=2;
                 int res=x2c( b1, b2 );
-                if (noSlash && (res == '/')) {
-                    throw EXCEPTION_SLASH;
+                if (res == '/') {
+                    switch (encodedSolidusHandling) {
+                    case DECODE: {
+                        buff[idx]=(byte)res;
+                        break;
+                    }
+                    case REJECT: {
+                        throw EXCEPTION_SLASH;
+                    }
+                    case PASS_THROUGH: {
+                        idx += 2;
+                    }
+                    }
+                } else {
+                    buff[idx]=(byte)res;
                 }
-                buff[idx]=(byte)res;
             }
         }
 

==================================================
TestAsyncContextImpl.java
index b8467e47ed..be2ad4041d 100644
--- a/test/org/apache/catalina/connector/TestRequest.java
+++ b/test/org/apache/catalina/connector/TestRequest.java
@@ -42,7 +42,6 @@ import jakarta.servlet.http.HttpServletRequest;
 import jakarta.servlet.http.HttpServletResponse;
 
 import org.junit.Assert;
-import org.junit.BeforeClass;
 import org.junit.Ignore;
 import org.junit.Test;
 
@@ -55,6 +54,7 @@ import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.tomcat.unittest.TesterRequest;
 import org.apache.tomcat.util.buf.ByteChunk;
+import org.apache.tomcat.util.buf.EncodedSolidusHandling;
 import org.apache.tomcat.util.descriptor.web.FilterDef;
 import org.apache.tomcat.util.descriptor.web.FilterMap;
 import org.apache.tomcat.util.descriptor.web.LoginConfig;
@@ -64,12 +64,6 @@ import org.apache.tomcat.util.descriptor.web.LoginConfig;
  */
 public class TestRequest extends TomcatBaseTest {
 
-    @BeforeClass
-    public static void setup() {
-        // Some of these tests need this and it used statically so set it once
-        System.setProperty("org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH", "true");
-    }
-
     /**
      * Test case for https://bz.apache.org/bugzilla/show_bug.cgi?id=37794
      * POST parameters are not returned from a call to
@@ -804,12 +798,12 @@ public class TestRequest extends TomcatBaseTest {
 
     @Test
     public void testBug57215c() throws Exception {
-        doBug56501("/path", "/%2Fpath", "/%2Fpath");
+        doBug56501("/path", "/%2Fpath", "/%2Fpath", EncodedSolidusHandling.DECODE);
     }
 
     @Test
     public void testBug57215d() throws Exception {
-        doBug56501("/path", "/%2Fpath%2F", "/%2Fpath");
+        doBug56501("/path", "/%2Fpath%2F", "/%2Fpath", EncodedSolidusHandling.DECODE);
     }
 
     @Test
@@ -819,15 +813,22 @@ public class TestRequest extends TomcatBaseTest {
 
     @Test
     public void testBug57215f() throws Exception {
-        doBug56501("/path", "/foo/..%2fpath", "/foo/..%2fpath");
+        doBug56501("/path", "/foo/..%2fpath", "/foo/..%2fpath", EncodedSolidusHandling.DECODE);
     }
 
-    private void doBug56501(String deployPath, String requestPath, String expected)
-            throws Exception {
+    private void doBug56501(String deployPath, String requestPath, String expected) throws Exception {
+        doBug56501(deployPath, requestPath, expected, EncodedSolidusHandling.REJECT);
+    }
+
+
+    private void doBug56501(String deployPath, String requestPath, String expected,
+            EncodedSolidusHandling encodedSolidusHandling) throws Exception {
 
         // Setup Tomcat instance
         Tomcat tomcat = getTomcatInstance();
 
+        tomcat.getConnector().setEncodedSolidusHandling(encodedSolidusHandling.getValue());
+
         // No file system docBase required
         Context ctx = tomcat.addContext(deployPath, null);
         ctx.setAllowMultipleLeadingForwardSlashInPath(true);

==================================================
