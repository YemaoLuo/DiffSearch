f05f5a959e4781da4b051bdfe1c59d0d314f6fbe
==================================================
Add MBean for StatementCache.
==================================================
Keiichi Fujino
==================================================
Wed Jan 31 05:58:28 2018 +0000
==================================================
StatementCache.java
Add MBean for StatementCache.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1822759 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StatementCacheMBean.java
index fd151ff18e..432bc59336 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java
@@ -25,17 +25,20 @@ import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicInteger;
 
+import javax.management.ObjectName;
+
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.jdbc.pool.ConnectionPool;
 import org.apache.tomcat.jdbc.pool.PoolProperties.InterceptorProperty;
 import org.apache.tomcat.jdbc.pool.PooledConnection;
+import org.apache.tomcat.jdbc.pool.jmx.JmxUtil;
 
 /**
  * Interceptor that caches {@code PreparedStatement} and/or
  * {@code CallableStatement} instances on a connection.
  */
-public class StatementCache extends StatementDecoratorInterceptor {
+public class StatementCache extends StatementDecoratorInterceptor implements StatementCacheMBean {
     private static final Log log = LogFactory.getLog(StatementCache.class);
     protected static final String[] ALL_TYPES = new String[] {PREPARE_STATEMENT,PREPARE_CALL};
     protected static final String[] CALLABLE_TYPE = new String[] {PREPARE_CALL};
@@ -51,15 +54,19 @@ public class StatementCache extends StatementDecoratorInterceptor {
     private PooledConnection pcon;
     private String[] types;
 
+    private ObjectName oname = null;
 
+    @Override
     public boolean isCachePrepared() {
         return cachePrepared;
     }
 
+    @Override
     public boolean isCacheCallable() {
         return cacheCallable;
     }
 
+    @Override
     public int getMaxCacheSize() {
         return maxCacheSize;
     }
@@ -68,6 +75,7 @@ public class StatementCache extends StatementDecoratorInterceptor {
         return types;
     }
 
+    @Override
     public AtomicInteger getCacheSize() {
         return cacheSize;
     }
@@ -120,6 +128,10 @@ public class StatementCache extends StatementDecoratorInterceptor {
         if (parent==null) {
             cacheSize = null;
             this.pcon = null;
+            if (oname != null) {
+                JmxUtil.unregisterJmx(oname);
+                oname = null;
+            }
         } else {
             cacheSize = cacheSizeMap.get(parent);
             this.pcon = con;
@@ -128,6 +140,10 @@ public class StatementCache extends StatementDecoratorInterceptor {
                         new ConcurrentHashMap<>();
                 pcon.getAttributes().put(STATEMENT_CACHE_ATTR,cache);
             }
+            if (oname == null) {
+                String keyprop = ",JdbcInterceptor=" + getClass().getSimpleName();
+                oname = JmxUtil.registerJmx(pcon.getObjectName(), keyprop, this);
+            }
         }
     }
 

==================================================
