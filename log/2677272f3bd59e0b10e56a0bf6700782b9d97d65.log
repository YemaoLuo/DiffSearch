2677272f3bd59e0b10e56a0bf6700782b9d97d65
==================================================
Use Digester to load implicit.tld taglib descriptors
==================================================
Jeremy Boynes
==================================================
Sat Nov 16 22:47:58 2013 +0000
==================================================
ImplicitTagLibraryInfo.java
Use Digester to load implicit.tld taglib descriptors

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1542606 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ImplicitTldRuleSet.java
index 45c3c4e95d..bd72b63b3d 100644
--- a/java/org/apache/jasper/compiler/ImplicitTagLibraryInfo.java
+++ b/java/org/apache/jasper/compiler/ImplicitTagLibraryInfo.java
@@ -17,10 +17,10 @@
 
 package org.apache.jasper.compiler;
 
-import java.io.InputStream;
+import java.io.IOException;
+import java.net.URL;
 import java.util.Collection;
 import java.util.Hashtable;
-import java.util.Iterator;
 import java.util.Set;
 import java.util.Vector;
 
@@ -31,9 +31,11 @@ import javax.servlet.jsp.tagext.TagLibraryInfo;
 
 import org.apache.jasper.JasperException;
 import org.apache.jasper.JspCompilationContext;
-import org.apache.jasper.util.ExceptionUtils;
-import org.apache.jasper.xmlparser.ParserUtils;
-import org.apache.jasper.xmlparser.TreeNode;
+import org.apache.tomcat.util.descriptor.tld.ImplicitTldRuleSet;
+import org.apache.tomcat.util.descriptor.tld.TaglibXml;
+import org.apache.tomcat.util.descriptor.tld.TldParser;
+import org.apache.tomcat.util.descriptor.tld.TldResourcePath;
+import org.xml.sax.SAXException;
 
 /**
  * Class responsible for generating an implicit tag library containing tag
@@ -97,9 +99,7 @@ class ImplicitTagLibraryInfo extends TagLibraryInfo {
         // Populate mapping of tag names to tag file paths
         Set<String> dirList = ctxt.getResourcePaths(tagdir);
         if (dirList != null) {
-            Iterator<String> it = dirList.iterator();
-            while (it.hasNext()) {
-                String path = it.next();
+            for (String path : dirList) {
                 if (path.endsWith(TAG_FILE_SUFFIX)
                         || path.endsWith(TAGX_FILE_SUFFIX)) {
                     /*
@@ -114,60 +114,32 @@ class ImplicitTagLibraryInfo extends TagLibraryInfo {
                             tagName.lastIndexOf(suffix));
                     tagFileMap.put(tagName, path);
                 } else if (path.endsWith(IMPLICIT_TLD)) {
-                    InputStream in = null;
+                    TaglibXml taglibXml;
                     try {
-                        in = ctxt.getResourceAsStream(path);
-                        if (in != null) {
-
-                            // Add implicit TLD to dependency list
-                            if (pi != null) {
-                                pi.addDependant(path, ctxt.getLastModified(path));
-                            }
-
-                            ParserUtils pu = new ParserUtils();
-                            TreeNode tld = pu.parseXMLDocument(uri, in);
-
-                            if (tld.findAttribute("version") != null) {
-                                this.jspversion = tld.findAttribute("version");
-                            }
-
-                            // Process each child element of our <taglib> element
-                            Iterator<TreeNode> list = tld.findChildren();
-
-                            while (list.hasNext()) {
-                                TreeNode element = list.next();
-                                String tname = element.getName();
-
-                                if ("tlibversion".equals(tname) // JSP 1.1
-                                        || "tlib-version".equals(tname)) { // JSP 1.2
-                                    this.tlibversion = element.getBody();
-                                } else if ("jspversion".equals(tname)
-                                        || "jsp-version".equals(tname)) {
-                                    this.jspversion = element.getBody();
-                                } else if ("shortname".equals(tname) || "short-name".equals(tname)) {
-                                    // Ignore
-                                } else {
-                                    // All other elements are invalid
-                                    err.jspError("jsp.error.invalid.implicit", path);
-                                }
-                            }
-                            try {
-                                double version = Double.parseDouble(this.jspversion);
-                                if (version < 2.0) {
-                                    err.jspError("jsp.error.invalid.implicit.version", path);
-                                }
-                            } catch (NumberFormatException e) {
-                                err.jspError("jsp.error.invalid.implicit.version", path);
-                            }
-                        }
-                    } finally {
-                        if (in != null) {
-                            try {
-                                in.close();
-                            } catch (Throwable t) {
-                                ExceptionUtils.handleThrowable(t);
-                            }
+                        URL url = ctxt.getResource(path);
+                        TldResourcePath resourcePath = new TldResourcePath(url, path);
+                        // TODO enable validation
+                        TldParser parser = new TldParser(true, false, new ImplicitTldRuleSet());
+                        taglibXml = parser.parse(resourcePath);
+                    } catch (IOException | SAXException e) {
+                        err.jspError(e);
+                        // unreached
+                        throw new JasperException(e);
+                    }
+                    this.tlibversion = taglibXml.getTlibVersion();
+                    this.jspversion = taglibXml.getJspVersion();
+                    try {
+                        double version = Double.parseDouble(this.jspversion);
+                        if (version < 2.0) {
+                            err.jspError("jsp.error.invalid.implicit.version", path);
                         }
+                    } catch (NumberFormatException e) {
+                        err.jspError("jsp.error.invalid.implicit.version", path);
+                    }
+
+                    // Add implicit TLD to dependency list
+                    if (pi != null) {
+                        pi.addDependant(path, ctxt.getLastModified(path));
                     }
                 }
             }

==================================================
TldParser.java
new file mode 100644
index 0000000000..f215e4c0fa
--- /dev/null
+++ b/java/org/apache/tomcat/util/descriptor/tld/ImplicitTldRuleSet.java
@@ -0,0 +1,51 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.util.descriptor.tld;
+
+import org.apache.tomcat.util.digester.Digester;
+import org.apache.tomcat.util.digester.Rule;
+import org.apache.tomcat.util.digester.RuleSetBase;
+import org.xml.sax.Attributes;
+
+/**
+ * RulesSet for digesting implicit.tld files.
+ *
+ * Only version information used and short names are allowed.
+ */
+public class ImplicitTldRuleSet extends RuleSetBase {
+    private static final String PREFIX = "taglib";
+
+    @Override
+    public void addRuleInstances(Digester digester) {
+
+        digester.addCallMethod(PREFIX + "/tlibversion", "setTlibVersion", 0);
+        digester.addCallMethod(PREFIX + "/tlib-version", "setTlibVersion", 0);
+        digester.addCallMethod(PREFIX + "/jspversion", "setJspVersion", 0);
+        digester.addCallMethod(PREFIX + "/jsp-version", "setJspVersion", 0);
+        digester.addRule(PREFIX, new Rule() {
+            // for TLD 2.0 and later, jsp-version is set by version attribute
+            @Override
+            public void begin(String namespace, String name, Attributes attributes) {
+                TaglibXml taglibXml = (TaglibXml) digester.peek();
+                taglibXml.setJspVersion(attributes.getValue("version"));
+            }
+        });
+        digester.addCallMethod(PREFIX + "/shortname", "setShortName", 0);
+        digester.addCallMethod(PREFIX + "/short-name", "setShortName", 0);
+
+    }
+}

==================================================
