85c6712a405749e299a8cdb110fee5389849214f
==================================================
Code review / refactoring in light of https://bz.apache.org/bugzilla/show_bug.cgi?id=58390
==================================================
Mark Thomas
==================================================
Thu Sep 17 08:56:20 2015 +0000
==================================================
Nio2Endpoint.java
Code review / refactoring in light of https://bz.apache.org/bugzilla/show_bug.cgi?id=58390
error is only used by NIO2 so move it to Nio2SocketWrapper

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1703534 13f79535-47bb-0310-9956-ffa450edef68



==================================================
NioEndpoint.java
index e1e5450164..822b2084b8 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -577,6 +577,7 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
         private final Semaphore writePending = new Semaphore(1);
         private boolean writeInterest = false; // Guarded by writeCompletionHandler
         private boolean writeNotify = false;
+        private volatile IOException error = null;
 
         private CompletionHandler<Integer, SocketWrapperBase<Nio2Channel>> awaitBytesHandler
                 = new CompletionHandler<Integer, SocketWrapperBase<Nio2Channel>>() {
@@ -847,6 +848,9 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
         public void setSendfileData(SendfileData sf) { this.sendfileData = sf; }
         public SendfileData getSendfileData() { return this.sendfileData; }
 
+        public IOException getError() { return error; }
+        public void setError(IOException error) { this.error = error; }
+
 
         @Override
         public boolean isReadyForRead() throws IOException {
@@ -1250,6 +1254,11 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
 
         @Override
         protected void flushBlocking() throws IOException {
+            if (getError() != null) {
+                throw getError();
+            }
+
+
             // Before doing a blocking flush, make sure that any pending non
             // blocking write has completed.
             try {
@@ -1266,7 +1275,11 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
         }
 
         @Override
-        protected boolean flushNonBlocking() {
+        protected boolean flushNonBlocking() throws IOException {
+            if (getError() != null) {
+                throw getError();
+            }
+
             return flushNonBlocking(false);
         }
 

==================================================
SocketWrapperBase.java
index 7111d1372c..1ec51a8883 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -1071,8 +1071,6 @@ public class NioEndpoint extends AbstractJsseEndpoint<NioChannel> {
                         NioSocketWrapper ka = (NioSocketWrapper) key.attachment();
                         if ( ka == null ) {
                             cancelledKey(key); //we don't support any keys without attachments
-                        } else if ( ka.getError() != null) {
-                            cancelledKey(key);//TODO this is not yet being used
                         } else if ((ka.interestOps()&SelectionKey.OP_READ) == SelectionKey.OP_READ ||
                                   (ka.interestOps()&SelectionKey.OP_WRITE) == SelectionKey.OP_WRITE) {
                             if (close) {

==================================================
