becfe30ed32e87a2cd11f77b76d26596fde16955
==================================================
Updates after reviewing diff between Tomcat and Commons versions of Fileupload
==================================================
Mark Emlyn
==================================================
Tue Mar 19 10:07:32 2013 +0000
==================================================
FileItem.java
Updates after reviewing diff between Tomcat and Commons versions of Fileupload

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1458200 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Base64Decoder.java
index 2f4f20da91..eb47f28b7c 100644
--- a/java/org/apache/tomcat/util/http/fileupload/FileItem.java
+++ b/java/org/apache/tomcat/util/http/fileupload/FileItem.java
@@ -197,7 +197,7 @@ public interface FileItem extends Serializable, FileItemHeadersSupport {
      * be used for storing the contents of the file.
      *
      * @return An {@link java.io.OutputStream OutputStream} that can be used
-     *         for storing the contents of the file.
+     *         for storing the contensts of the file.
      *
      * @throws IOException if an error occurs.
      */

==================================================
MimeUtility.java
index 44954441e9..3974bc6150 100644
--- a/java/org/apache/tomcat/util/http/fileupload/util/mime/Base64Decoder.java
+++ b/java/org/apache/tomcat/util/http/fileupload/util/mime/Base64Decoder.java
@@ -35,8 +35,7 @@ final class Base64Decoder {
         (byte) 'a', (byte) 'b', (byte) 'c', (byte) 'd', (byte) 'e', (byte) 'f', (byte) 'g',
         (byte) 'h', (byte) 'i', (byte) 'j', (byte) 'k', (byte) 'l', (byte) 'm', (byte) 'n',
         (byte) 'o', (byte) 'p', (byte) 'q', (byte) 'r', (byte) 's', (byte) 't', (byte) 'u',
-        (byte) 'v',
-        (byte) 'w', (byte) 'x', (byte) 'y', (byte) 'z',
+        (byte) 'v', (byte) 'w', (byte) 'x', (byte) 'y', (byte) 'z',
         (byte) '0', (byte) '1', (byte) '2', (byte) '3', (byte) '4', (byte) '5', (byte) '6',
         (byte) '7', (byte) '8', (byte) '9',
         (byte) '+', (byte) '/'
@@ -69,9 +68,10 @@ final class Base64Decoder {
 
     /**
      * Checks if the input char must be skipped from the decode.
+     * The method skips whitespace characters LF, CR, horizontal tab and space.
      *
-     * @param c the char has to be checked.
-     * @return true, if the input char has to be checked, false otherwise.
+     * @param c the char to be checked.
+     * @return true, if the input char has to be skipped, false otherwise.
      */
     private static boolean ignore(char c) {
         return (c == '\n' || c == '\r' || c == '\t' || c == ' ');
@@ -81,6 +81,11 @@ final class Base64Decoder {
      * Decode the base 64 encoded byte data writing it to the given output stream,
      * whitespace characters will be ignored.
      *
+     * @param data the buffer containing the Base64-encoded data
+     * @param off the start offset (zero-based)
+     * @param length the number of bytes to convert
+     * @param out the output stream to hold the decoded bytes
+     *
      * @return the number of bytes produced.
      */
     public static int decode(byte[] data, int off, int length, OutputStream out) throws IOException {

==================================================
QuotedPrintableDecoder.java
index b10cb7574f..e1a7b7b1db 100644
--- a/java/org/apache/tomcat/util/http/fileupload/util/mime/MimeUtility.java
+++ b/java/org/apache/tomcat/util/http/fileupload/util/mime/MimeUtility.java
@@ -67,14 +67,14 @@ public final class MimeUtility {
 
     /**
      * Decode a string of text obtained from a mail header into
-     * it's proper form.  The text generally will consist of a
+     * its proper form.  The text generally will consist of a
      * string of tokens, some of which may be encoded using
      * base64 encoding.
      *
      * @param text   The text to decode.
      *
-     * @return The decoded test string.
-     * @throws UnsupportedEncodingException
+     * @return The decoded text string.
+     * @throws UnsupportedEncodingException if the detected encoding in the input text is not supported.
      */
     public static String decodeText(String text) throws UnsupportedEncodingException {
         // if the text contains any encoded tokens, those tokens will be marked with "=?".  If the

==================================================
