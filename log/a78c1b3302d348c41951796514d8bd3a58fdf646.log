a78c1b3302d348c41951796514d8bd3a58fdf646
==================================================
Revert r1529130 and add a comment that explains why the sync is necessary.
==================================================
Mark Emlyn
==================================================
Tue Oct 8 07:55:22 2013 +0000
==================================================
AprEndpoint.java
Revert r1529130 and add a comment that explains why the sync is necessary.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1530177 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JIoEndpoint.java
index cb009bb12a..8c2115e45e 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -855,32 +855,37 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
     public void processSocket(SocketWrapper<Long> socket, SocketStatus status,
             boolean dispatch) {
         try {
-            if (waitingRequests.remove(socket)) {
-                SocketProcessor proc = new SocketProcessor(socket, status);
-                Executor executor = getExecutor();
-                if (dispatch && executor != null) {
-                    ClassLoader loader = Thread.currentThread().getContextClassLoader();
-                    try {
-                        //threads should not be created by the webapp classloader
-                        if (Constants.IS_SECURITY_ENABLED) {
-                            PrivilegedAction<Void> pa = new PrivilegedSetTccl(
-                                    getClass().getClassLoader());
-                            AccessController.doPrivileged(pa);
-                        } else {
-                            Thread.currentThread().setContextClassLoader(
-                                    getClass().getClassLoader());
-                        }
-                        executor.execute(proc);
-                    } finally {
-                        if (Constants.IS_SECURITY_ENABLED) {
-                            PrivilegedAction<Void> pa = new PrivilegedSetTccl(loader);
-                            AccessController.doPrivileged(pa);
-                        } else {
-                            Thread.currentThread().setContextClassLoader(loader);
+            // Synchronisation is required here as this code may be called as a
+            // result of calling AsyncContext.dispatch() from a non-container
+            // thread
+            synchronized (socket) {
+                if (waitingRequests.remove(socket)) {
+                    SocketProcessor proc = new SocketProcessor(socket, status);
+                    Executor executor = getExecutor();
+                    if (dispatch && executor != null) {
+                        ClassLoader loader = Thread.currentThread().getContextClassLoader();
+                        try {
+                            //threads should not be created by the webapp classloader
+                            if (Constants.IS_SECURITY_ENABLED) {
+                                PrivilegedAction<Void> pa = new PrivilegedSetTccl(
+                                        getClass().getClassLoader());
+                                AccessController.doPrivileged(pa);
+                            } else {
+                                Thread.currentThread().setContextClassLoader(
+                                        getClass().getClassLoader());
+                            }
+                            executor.execute(proc);
+                        } finally {
+                            if (Constants.IS_SECURITY_ENABLED) {
+                                PrivilegedAction<Void> pa = new PrivilegedSetTccl(loader);
+                                AccessController.doPrivileged(pa);
+                            } else {
+                                Thread.currentThread().setContextClassLoader(loader);
+                            }
                         }
+                    } else {
+                        proc.run();
                     }
-                } else {
-                    proc.run();
                 }
             }
         } catch (RejectedExecutionException ree) {

==================================================
