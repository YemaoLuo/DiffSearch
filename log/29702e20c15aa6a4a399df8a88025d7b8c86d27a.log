29702e20c15aa6a4a399df8a88025d7b8c86d27a
==================================================
Simplify WebSocket initialisation. Remove some features from  earlier versions of the specification.
==================================================
Mark Emlyn
==================================================
Tue Jul 23 12:50:17 2013 +0000
==================================================
WsFilter.java
Simplify WebSocket initialisation. Remove some features from  earlier versions of the specification.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1506017 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WsSci.java
index 57e103eb5a..6fa169f1cc 100644
--- a/java/org/apache/tomcat/websocket/server/WsFilter.java
+++ b/java/org/apache/tomcat/websocket/server/WsFilter.java
@@ -60,6 +60,12 @@ public class WsFilter implements Filter {
             "258EAFA5-E914-47DA-95CA-C5AB0DC85B11".getBytes(ISO_8859_1);
     private final Queue<MessageDigest> sha1Helpers =
             new ConcurrentLinkedQueue<>();
+    private final WsServerContainer sc;
+
+
+    WsFilter(WsServerContainer sc) {
+        this.sc = sc;
+    }
 
 
     @Override
@@ -94,7 +100,6 @@ public class WsFilter implements Filter {
         HttpServletResponse resp = (HttpServletResponse) response;
 
         // Check to see if this WebSocket implementation has a matching mapping
-        WsServerContainer sc = WsServerContainer.getServerContainer();
         String path;
         String pathInfo = req.getPathInfo();
         if (pathInfo == null) {

==================================================
WsServerContainer.java
index 7a853cc6dd..04d197e82d 100644
--- a/java/org/apache/tomcat/websocket/server/WsSci.java
+++ b/java/org/apache/tomcat/websocket/server/WsSci.java
@@ -127,8 +127,7 @@ public class WsSci implements ServletContainerInitializer {
 
     static WsServerContainer init(ServletContext servletContext) {
 
-        WsServerContainer sc = WsServerContainer.getServerContainer();
-        sc.setServletContext(servletContext);
+        WsServerContainer sc = new WsServerContainer(servletContext);
 
         servletContext.setAttribute(
                 Constants.SERVER_CONTAINER_SERVLET_CONTEXT_ATTRIBUTE, sc);

==================================================
TesterServletContext.java
index d111cb4917..ea671698c4 100644
--- a/java/org/apache/tomcat/websocket/server/WsServerContainer.java
+++ b/java/org/apache/tomcat/websocket/server/WsServerContainer.java
@@ -25,7 +25,6 @@ import java.util.Map;
 import java.util.Set;
 import java.util.SortedSet;
 import java.util.TreeSet;
-import java.util.WeakHashMap;
 import java.util.concurrent.ConcurrentHashMap;
 
 import javax.servlet.DispatcherType;
@@ -60,11 +59,6 @@ import org.apache.tomcat.websocket.pojo.PojoMethodMapping;
 public class WsServerContainer extends WsWebSocketContainer
         implements ServerContainer {
 
-    // Needs to be a WeakHashMap to prevent memory leaks when a context is
-    // stopped
-    private static final Map<ClassLoader,WsServerContainer>
-            classLoaderContainerMap = new WeakHashMap<>();
-    private static final Object classLoaderContainerMapLock = new Object();
     private static final StringManager sm =
             StringManager.getManager(Constants.PACKAGE_NAME);
     private static final CloseReason AUTHENTICATED_HTTP_SESSION_CLOSED =
@@ -72,29 +66,9 @@ public class WsServerContainer extends WsWebSocketContainer
                     "This connection was established under an authenticated " +
                     "HTTP session that has ended.");
 
-    public static WsServerContainer getServerContainer() {
-        ClassLoader tccl = Thread.currentThread().getContextClassLoader();
-        WsServerContainer result = null;
-        synchronized (classLoaderContainerMapLock) {
-            result = classLoaderContainerMap.get(tccl);
-            if (result == null) {
-                result = new WsServerContainer();
-                classLoaderContainerMap.put(tccl, result);
-            }
-        }
-        return result;
-    }
-
-    // For unit testing
-    protected static void recycle() {
-        synchronized (classLoaderContainerMapLock) {
-            classLoaderContainerMap.clear();
-        }
-    }
-
     private final WsWriteTimeout wsWriteTimeout = new WsWriteTimeout();
 
-    private volatile ServletContext servletContext = null;
+    private final ServletContext servletContext;
     private final Map<String,ServerEndpointConfig> configExactMatchMap =
             new ConcurrentHashMap<>();
     private final ConcurrentHashMap<Integer,SortedSet<TemplatePathMatch>>
@@ -103,16 +77,7 @@ public class WsServerContainer extends WsWebSocketContainer
     private final ConcurrentHashMap<String,Set<WsSession>> authenticatedSessions =
             new ConcurrentHashMap<>();
 
-    private WsServerContainer() {
-        // Hide default constructor
-    }
-
-
-    public void setServletContext(ServletContext servletContext) {
-
-        if (this.servletContext == servletContext) {
-            return;
-        }
+    WsServerContainer(ServletContext servletContext) {
 
         this.servletContext = servletContext;
 
@@ -130,7 +95,7 @@ public class WsServerContainer extends WsWebSocketContainer
         }
 
         FilterRegistration fr = servletContext.addFilter(
-                WsFilter.class.getName(), WsFilter.class);
+                WsFilter.class.getName(), new WsFilter(this));
 
         EnumSet<DispatcherType> types = EnumSet.of(DispatcherType.REQUEST,
                 DispatcherType.FORWARD);

==================================================
TestWsServerContainer.java
index e91badcb40..35cc29de71 100644
--- a/test/org/apache/catalina/filters/TesterServletContext.java
+++ b/test/org/apache/catalina/filters/TesterServletContext.java
@@ -233,7 +233,8 @@ public class TesterServletContext implements ServletContext {
     @Override
     public javax.servlet.FilterRegistration.Dynamic addFilter(
             String filterName, Filter filter) {
-        throw new RuntimeException("Not implemented");
+        return new ApplicationFilterRegistration(
+                new FilterDef(), new TesterContext());
     }
 
     @Override

==================================================
