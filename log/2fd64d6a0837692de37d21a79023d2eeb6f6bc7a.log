2fd64d6a0837692de37d21a79023d2eeb6f6bc7a
==================================================
Fix Eclipse warnings
==================================================
Mark Emlyn
==================================================
Sun Feb 27 23:08:45 2011 +0000
==================================================
CometEventImpl.java
Fix Eclipse warnings
Remove unused code

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1075176 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Connector.java
index 49d43ee889..f5e4fdcf0f 100644
--- a/java/org/apache/catalina/connector/CometEventImpl.java
+++ b/java/org/apache/catalina/connector/CometEventImpl.java
@@ -88,6 +88,7 @@ public class CometEventImpl implements CometEvent {
         this.eventSubType = eventSubType;
     }
     
+    @Override
     public void close() throws IOException {
         if (request == null) {
             throw new IllegalStateException(sm.getString("cometEvent.nullRequest"));
@@ -98,22 +99,27 @@ public class CometEventImpl implements CometEvent {
         if (iscomet) request.cometClose();
     }
 
+    @Override
     public EventSubType getEventSubType() {
         return eventSubType;
     }
 
+    @Override
     public EventType getEventType() {
         return eventType;
     }
 
+    @Override
     public HttpServletRequest getHttpServletRequest() {
         return request.getRequest();
     }
 
+    @Override
     public HttpServletResponse getHttpServletResponse() {
         return response.getResponse();
     }
 
+    @Override
     public void setTimeout(int timeout) throws IOException, ServletException,
             UnsupportedOperationException {
         if (request.getAttribute("org.apache.tomcat.comet.timeout.support") == Boolean.TRUE) {

==================================================
Constants.java
index 98fbc1c2ec..e4e5c4e11b 100644
--- a/java/org/apache/catalina/connector/Connector.java
+++ b/java/org/apache/catalina/connector/Connector.java
@@ -1005,8 +1005,6 @@ public class Connector extends LifecycleMBeanBase  {
 
     // -------------------- JMX registration  --------------------
 
-    private ObjectName onameProtocolHandler;
-    
     @Override
     protected String getDomainInternal() {
         return MBeanUtils.getDomain(getService());

==================================================
CoyoteInputStream.java
index eebdfc16f0..34fd656447 100644
--- a/java/org/apache/catalina/connector/Constants.java
+++ b/java/org/apache/catalina/connector/Constants.java
@@ -23,11 +23,4 @@ public final class Constants {
 
     public static final String Package = "org.apache.catalina.connector";
 
-    public static final int DEFAULT_CONNECTION_LINGER = -1;
-    public static final int DEFAULT_CONNECTION_TIMEOUT = 60000;
-    public static final int DEFAULT_CONNECTION_UPLOAD_TIMEOUT = 300000;
-    public static final int DEFAULT_SERVER_SOCKET_TIMEOUT = 0;
-
-    public static final int PROCESSOR_IDLE = 0;
-    public static final int PROCESSOR_ACTIVE = 1;
 }

==================================================
CoyotePrincipal.java
index 4b76f7dbdf..9d26cb9c51 100644
--- a/java/org/apache/catalina/connector/CoyoteInputStream.java
+++ b/java/org/apache/catalina/connector/CoyoteInputStream.java
@@ -88,6 +88,7 @@ public class CoyoteInputStream
                     AccessController.doPrivileged(
                         new PrivilegedExceptionAction<Integer>(){
 
+                            @Override
                             public Integer run() throws IOException{
                                 Integer integer = Integer.valueOf(ib.readByte());
                                 return integer;
@@ -117,6 +118,7 @@ public class CoyoteInputStream
                     AccessController.doPrivileged(
                         new PrivilegedExceptionAction<Integer>(){
 
+                            @Override
                             public Integer run() throws IOException{
                                 Integer integer = Integer.valueOf(ib.available());
                                 return integer;
@@ -146,6 +148,7 @@ public class CoyoteInputStream
                     AccessController.doPrivileged(
                         new PrivilegedExceptionAction<Integer>(){
 
+                            @Override
                             public Integer run() throws IOException{
                                 Integer integer = 
                                     Integer.valueOf(ib.read(b, 0, b.length));
@@ -178,6 +181,7 @@ public class CoyoteInputStream
                     AccessController.doPrivileged(
                         new PrivilegedExceptionAction<Integer>(){
 
+                            @Override
                             public Integer run() throws IOException{
                                 Integer integer = 
                                     Integer.valueOf(ib.read(b, off, len));
@@ -219,6 +223,7 @@ public class CoyoteInputStream
                 AccessController.doPrivileged(
                     new PrivilegedExceptionAction<Void>(){
 
+                        @Override
                         public Void run() throws IOException{
                             ib.close();
                             return null;

==================================================
InputBuffer.java
index 66fcb14816..54373dacb3 100644
--- a/java/org/apache/catalina/connector/CoyotePrincipal.java
+++ b/java/org/apache/catalina/connector/CoyotePrincipal.java
@@ -51,6 +51,7 @@ public class CoyotePrincipal implements Principal, Serializable {
      */
     protected String name = null;
 
+    @Override
     public String getName() {
         return (this.name);
     }

==================================================
OutputBuffer.java
index 6e18a14062..4d03bb2b6c 100644
--- a/java/org/apache/catalina/connector/InputBuffer.java
+++ b/java/org/apache/catalina/connector/InputBuffer.java
@@ -272,6 +272,7 @@ public class InputBuffer extends Reader
      * 
      * @throws IOException An underlying IOException occurred
      */
+    @Override
     public int realReadBytes(byte cbuf[], int off, int len)
             throws IOException {
 
@@ -319,6 +320,7 @@ public class InputBuffer extends Reader
      * been read before, they are ignored. If a mark was set, then the
      * mark is lost.
      */
+    @Override
     public void realWriteChars(char c[], int off, int len) 
         throws IOException {
         markPos = -1;
@@ -332,6 +334,7 @@ public class InputBuffer extends Reader
     }
 
 
+    @Override
     public int realReadChars(char cbuf[], int off, int len)
         throws IOException {
 
@@ -518,6 +521,7 @@ public class InputBuffer extends Reader
                     conv = AccessController.doPrivileged(
                             new PrivilegedExceptionAction<B2CConverter>(){
 
+                                @Override
                                 public B2CConverter run() throws IOException {
                                     return new B2CConverter(enc);
                                 }

==================================================
