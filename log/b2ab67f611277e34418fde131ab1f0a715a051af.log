b2ab67f611277e34418fde131ab1f0a715a051af
==================================================
Grant read permissions to all resource locations used by the web
==================================================
Mark Emlyn
==================================================
Mon Nov 18 21:12:46 2013 +0000
==================================================
WebResourceRoot.java
Grant read permissions to all resource locations used by the web
application

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1543163 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WebResourceSet.java
index 0a0e2aaaa9..229f2f6916 100644
--- a/java/org/apache/catalina/WebResourceRoot.java
+++ b/java/org/apache/catalina/WebResourceRoot.java
@@ -18,6 +18,7 @@ package org.apache.catalina;
 
 import java.io.InputStream;
 import java.net.URL;
+import java.util.List;
 import java.util.Set;
 
 /**
@@ -397,6 +398,12 @@ public interface WebResourceRoot extends Lifecycle {
 
     void deregisterTracedResource(WebResourceTraceWrapper traceWrapperInputStream);
 
+    /**
+     * Obtain the set of {@link WebResourceSet#getBaseUrl()} for all
+     * {@link WebResourceSet}s used by this root.
+     */
+    List<URL> getBaseUrls();
+
     static enum ResourceSetType {
         PRE,
         RESOURCE_JAR,

==================================================
WebappClassLoader.java
index 9c95942fe2..db54775c9e 100644
--- a/java/org/apache/catalina/WebResourceSet.java
+++ b/java/org/apache/catalina/WebResourceSet.java
@@ -17,6 +17,7 @@
 package org.apache.catalina;
 
 import java.io.InputStream;
+import java.net.URL;
 import java.util.Set;
 
 /**
@@ -102,4 +103,11 @@ public interface WebResourceSet extends Lifecycle {
     boolean getClassLoaderOnly();
 
     void setClassLoaderOnly(boolean classLoaderOnly);
+
+    /**
+     * Obtain the base URL for this set of resources. One of the uses of this is
+     * to grant read permissions to the resources when running under a security
+     * manager.
+     */
+    URL getBaseUrl();
 }

==================================================
WebappLoader.java
index da4322500c..b45170e58d 100644
--- a/java/org/apache/catalina/loader/WebappClassLoader.java
+++ b/java/org/apache/catalina/loader/WebappClassLoader.java
@@ -456,7 +456,7 @@ public class WebappClassLoader extends URLClassLoader
      *
      * @param filepath file directory path
      */
-    public void addPermission(String filepath) {
+    void addPermission(String filepath) {
         if (filepath == null) {
             return;
         }
@@ -465,13 +465,18 @@ public class WebappClassLoader extends URLClassLoader
 
         if (securityManager != null) {
             Permission permission = null;
-            if (!path.endsWith(File.separator)) {
-                permission = new FilePermission(path, "read");
+            if (path.startsWith("file:")) {
+                path = path.substring(5);
+                if (!path.endsWith(File.separator)) {
+                    permission = new FilePermission(path, "read");
+                    addPermission(permission);
+                    path = path + File.separator;
+                }
+                permission = new FilePermission(path + "-", "read");
                 addPermission(permission);
-                path = path + File.separator;
+            } else {
+                // Unsupported resource location.
             }
-            permission = new FilePermission(path + "-", "read");
-            addPermission(permission);
         }
     }
 
@@ -482,7 +487,7 @@ public class WebappClassLoader extends URLClassLoader
      *
      * @param url URL for a file or directory on local system
      */
-    public void addPermission(URL url) {
+    void addPermission(URL url) {
         if (url != null) {
             addPermission(url.toString());
         }
@@ -494,7 +499,7 @@ public class WebappClassLoader extends URLClassLoader
      *
      * @param permission The permission
      */
-    public void addPermission(Permission permission) {
+    void addPermission(Permission permission) {
         if ((securityManager != null) && (permission != null)) {
             permissionList.add(permission);
         }

==================================================
AbstractArchiveResourceSet.java
index 64fe227ff0..c8f7c4b5d7 100644
--- a/java/org/apache/catalina/loader/WebappLoader.java
+++ b/java/org/apache/catalina/loader/WebappLoader.java
@@ -25,7 +25,6 @@ import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
-import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLClassLoader;
 import java.net.URLDecoder;
@@ -546,64 +545,8 @@ public class WebappLoader extends LifecycleMBeanBase
             }
         }
 
-        try {
-
-            URL rootURL = servletContext.getResource("/");
-            classLoader.addPermission(rootURL);
-
-            String contextRoot = servletContext.getRealPath("/");
-            if (contextRoot != null) {
-                try {
-                    contextRoot = (new File(contextRoot)).getCanonicalPath();
-                    classLoader.addPermission(contextRoot);
-                } catch (IOException e) {
-                    // Ignore
-                }
-            }
-
-            URL classesURL = servletContext.getResource("/WEB-INF/classes/");
-            classLoader.addPermission(classesURL);
-            URL libURL = servletContext.getResource("/WEB-INF/lib/");
-            classLoader.addPermission(libURL);
-
-            if (contextRoot != null) {
-
-                if (libURL != null) {
-                    File rootDir = new File(contextRoot);
-                    File libDir = new File(rootDir, "WEB-INF/lib/");
-                    try {
-                        String path = libDir.getCanonicalPath();
-                        classLoader.addPermission(path);
-                    } catch (IOException e) {
-                        // Ignore
-                    }
-                }
-
-            } else {
-
-                if (workDir != null) {
-                    if (libURL != null) {
-                        File libDir = new File(workDir, "WEB-INF/lib/");
-                        try {
-                            String path = libDir.getCanonicalPath();
-                            classLoader.addPermission(path);
-                        } catch (IOException e) {
-                            // Ignore
-                        }
-                    }
-                    if (classesURL != null) {
-                        File classesDir = new File(workDir, "WEB-INF/classes/");
-                        try {
-                            String path = classesDir.getCanonicalPath();
-                            classLoader.addPermission(path);
-                        } catch (IOException e) {
-                            // Ignore
-                        }
-                    }
-                }
-            }
-        } catch (MalformedURLException e) {
-            // Ignore
+        for (URL url : context.getResources().getBaseUrls()) {
+           classLoader.addPermission(url);
         }
     }
 

==================================================
AbstractFileResourceSet.java
index 27d75c2a84..1f1b32edce 100644
--- a/java/org/apache/catalina/webresources/AbstractArchiveResourceSet.java
+++ b/java/org/apache/catalina/webresources/AbstractArchiveResourceSet.java
@@ -18,6 +18,7 @@ package org.apache.catalina.webresources;
 
 import java.io.File;
 import java.io.InputStream;
+import java.net.URL;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;
@@ -32,7 +33,8 @@ import org.apache.catalina.util.ResourceSet;
 public abstract class AbstractArchiveResourceSet extends AbstractResourceSet {
 
     private final HashMap<String,JarEntry> jarFileEntries = new HashMap<>();
-    private String baseUrl;
+    private URL baseUrl;
+    private String baseUrlString;
     private Manifest manifest;
 
 
@@ -40,12 +42,22 @@ public abstract class AbstractArchiveResourceSet extends AbstractResourceSet {
         this.manifest = manifest;
     }
 
-    protected final String getBaseUrl() {
+    protected final void setBaseUrl(URL baseUrl) {
+        this.baseUrl = baseUrl;
+        if (baseUrl == null) {
+            this.baseUrlString = null;
+        } else {
+            this.baseUrlString = baseUrl.toString();
+        }
+    }
+
+    @Override
+    public final URL getBaseUrl() {
         return baseUrl;
     }
 
-    protected final void setBaseUrl(String baseUrl) {
-        this.baseUrl = baseUrl;
+    protected final String getBaseUrlString() {
+        return baseUrlString;
     }
 
     protected final HashMap<String,JarEntry> getJarFileEntries() {

==================================================
JarResourceSet.java
index 3160612f05..30f71e145e 100644
--- a/java/org/apache/catalina/webresources/AbstractFileResourceSet.java
+++ b/java/org/apache/catalina/webresources/AbstractFileResourceSet.java
@@ -18,6 +18,8 @@ package org.apache.catalina.webresources;
 
 import java.io.File;
 import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.URL;
 
 import org.apache.catalina.LifecycleException;
 import org.apache.tomcat.util.http.RequestUtil;
@@ -104,6 +106,16 @@ public abstract class AbstractFileResourceSet extends AbstractResourceSet {
         return RequestUtil.normalize(path, File.separatorChar == '/');
     }
 
+    @Override
+    public URL getBaseUrl() {
+        try {
+            return getFileBase().toURI().toURL();
+        } catch (MalformedURLException e) {
+            return null;
+        }
+    }
+
+
     //-------------------------------------------------------- Lifecycle methods
     @Override
     protected void initInternal() throws LifecycleException {

==================================================
JarWarResourceSet.java
index b2fab84e00..547d4a5207 100644
--- a/java/org/apache/catalina/webresources/JarResourceSet.java
+++ b/java/org/apache/catalina/webresources/JarResourceSet.java
@@ -75,7 +75,7 @@ public class JarResourceSet extends AbstractArchiveResourceSet {
     @Override
     protected WebResource createArchiveResource(JarEntry jarEntry,
             String webAppPath, Manifest manifest) {
-        return new JarResource(getRoot(), webAppPath, getBase(), getBaseUrl(),
+        return new JarResource(getRoot(), webAppPath, getBase(), getBaseUrlString(),
                 jarEntry, getInternalPath(), manifest);
     }
 
@@ -95,7 +95,7 @@ public class JarResourceSet extends AbstractArchiveResourceSet {
         }
 
         try {
-            setBaseUrl((new File(getBase())).toURI().toURL().toString());
+            setBaseUrl((new File(getBase())).toURI().toURL());
         } catch (MalformedURLException e) {
             throw new IllegalArgumentException(e);
         }

==================================================
StandardRoot.java
index cf524c2191..8a32746ac7 100644
--- a/java/org/apache/catalina/webresources/JarWarResourceSet.java
+++ b/java/org/apache/catalina/webresources/JarWarResourceSet.java
@@ -78,7 +78,7 @@ public class JarWarResourceSet extends AbstractArchiveResourceSet {
     @Override
     protected WebResource createArchiveResource(JarEntry jarEntry,
             String webAppPath, Manifest manifest) {
-        return new JarWarResource(getRoot(), webAppPath, getBase(), getBaseUrl(),
+        return new JarWarResource(getRoot(), webAppPath, getBase(), getBaseUrlString(),
                 jarEntry, archivePath, getInternalPath(), manifest);
     }
 
@@ -103,7 +103,7 @@ public class JarWarResourceSet extends AbstractArchiveResourceSet {
         }
 
         try {
-            setBaseUrl((new File(getBase())).toURI().toURL().toString());
+            setBaseUrl((new File(getBase())).toURI().toURL());
         } catch (MalformedURLException e) {
             throw new IllegalArgumentException(e);
         }

==================================================
