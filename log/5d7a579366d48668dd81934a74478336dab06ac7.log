5d7a579366d48668dd81934a74478336dab06ac7
==================================================
Update the default URIEncoding for a Connector to UTF-8 as required by the Servlet 4.0 specification.
==================================================
Mark Thomas
==================================================
Fri Apr 28 18:18:06 2017 +0000
==================================================
Connector.java
Update the default URIEncoding for a Connector to UTF-8 as required by the Servlet 4.0 specification.
Start to move towards using Charset rather than String internally to reduce the number of calls required to B2CConverter.getCharset() during a request.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1793121 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CoyoteAdapter.java
index c5443320e3..04eb504036 100644
--- a/java/org/apache/catalina/connector/Connector.java
+++ b/java/org/apache/catalina/connector/Connector.java
@@ -16,14 +16,16 @@
  */
 package org.apache.catalina.connector;
 
+import java.io.UnsupportedEncodingException;
 import java.net.InetAddress;
+import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Locale;
 
 import javax.management.ObjectName;
 
-import org.apache.catalina.Globals;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleState;
 import org.apache.catalina.Service;
@@ -37,6 +39,7 @@ import org.apache.coyote.http11.AbstractHttp11JsseProtocol;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.IntrospectionUtils;
+import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.net.SSLHostConfig;
 import org.apache.tomcat.util.net.openssl.OpenSSLImplementation;
 import org.apache.tomcat.util.res.StringManager;
@@ -105,11 +108,6 @@ public class Connector extends LifecycleMBeanBase  {
             this.protocolHandler = p;
         }
 
-        if (!Globals.STRICT_SERVLET_COMPLIANCE) {
-            URIEncoding = "UTF-8";
-            URIEncodingLower = URIEncoding.toLowerCase(Locale.ENGLISH);
-        }
-
         // Default for Connector depends on this system property
         setThrowOnFailure(Boolean.getBoolean("org.apache.catalina.startup.EXIT_ON_INIT_FAILURE"));
     }
@@ -263,11 +261,23 @@ public class Connector extends LifecycleMBeanBase  {
 
     /**
      * URI encoding.
+     *
+     * @deprecated This will be removed in 9.0.x onwards
      */
+    @Deprecated
     protected String URIEncoding = null;
+
+
+    /**
+     * @deprecated This will be removed in 9.0.x onwards
+     */
+    @Deprecated
     protected String URIEncodingLower = null;
 
 
+    private Charset uriCharset = StandardCharsets.UTF_8;
+
+
     /**
      * URI encoding as body.
      */
@@ -689,33 +699,45 @@ public class Connector extends LifecycleMBeanBase  {
 
 
     /**
-     * @return the character encoding to be used for the URI using the original
-     * case.
+     * @return the name of character encoding to be used for the URI using the
+     * original case.
      */
     public String getURIEncoding() {
-        return this.URIEncoding;
+        return uriCharset.name();
     }
 
 
     /**
      * @return the character encoding to be used for the URI using lower case.
+     *
+     * @deprecated This will be removed in 9.0.x onwards
      */
+    @Deprecated
     public String getURIEncodingLower() {
-        return this.URIEncodingLower;
+        return uriCharset.name().toLowerCase(Locale.ENGLISH);
     }
 
 
+    /**
+     *
+     * @return The Charset to use to convert raw URI bytes (after %nn decoding)
+     *         to characters. This will never be null
+     */
+    public Charset getURICharset() {
+        return uriCharset;
+    }
+
     /**
      * Set the URI encoding to be used for the URI.
      *
      * @param URIEncoding The new URI character encoding.
      */
     public void setURIEncoding(String URIEncoding) {
-        this.URIEncoding = URIEncoding;
-        if (URIEncoding == null) {
-            URIEncodingLower = null;
-        } else {
-            this.URIEncodingLower = URIEncoding.toLowerCase(Locale.ENGLISH);
+        try {
+            uriCharset = B2CConverter.getCharset(URIEncoding);
+        } catch (UnsupportedEncodingException e) {
+            log.warn(sm.getString("coyoteConnector.invalidEncoding",
+                    URIEncoding, uriCharset.name()), e);
         }
     }
 

==================================================
ApplicationPushBuilder.java
index 02923913b6..df397a8f80 100644
--- a/java/org/apache/catalina/connector/LocalStrings.properties
+++ b/java/org/apache/catalina/connector/LocalStrings.properties
@@ -22,6 +22,7 @@ coyoteAdapter.debug=The variable [{0}] has value [{1}]
 coyoteAdapter.invalidEncoding=Invalid URI encoding, using HTTP default
 coyoteAdapter.parsePathParam=Unable to parse the path parameters using encoding [{0}]. The path parameters in the URL will be ignored.
 
+coyoteConnector.invalidEncoding=The encoding [{0}] is not recognised by the JRE. The Connector will continue to use [{1}]
 coyoteConnector.invalidPort=The connector cannot start since the specified port value of [{0}] is invalid
 coyoteConnector.protocolHandlerDestroyFailed=Protocol handler destroy failed
 coyoteConnector.protocolHandlerInitializationFailed=Protocol handler initialization failed

==================================================
TestApplicationPushBuilder.java
index 0a6cd1a40c..cfa474dbe3 100644
--- a/java/org/apache/catalina/core/ApplicationPushBuilder.java
+++ b/java/org/apache/catalina/core/ApplicationPushBuilder.java
@@ -16,7 +16,6 @@
  */
 package org.apache.catalina.core;
 
-import java.io.UnsupportedEncodingException;
 import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -39,7 +38,6 @@ import org.apache.catalina.Context;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.util.SessionConfig;
 import org.apache.coyote.ActionCode;
-import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.HexUtils;
 import org.apache.tomcat.util.collections.CaseInsensitiveKeyMap;
 import org.apache.tomcat.util.http.CookieProcessor;
@@ -347,7 +345,7 @@ public class ApplicationPushBuilder implements PushBuilder {
         // Undecoded path - just %nn encoded
         pushTarget.requestURI().setString(pushPath);
         pushTarget.decodedURI().setString(decode(pushPath,
-                catalinaRequest.getConnector().getURIEncodingLower()));
+                catalinaRequest.getConnector().getURICharset()));
 
         // Query string
         if (pushQueryString == null && queryString != null) {
@@ -373,7 +371,7 @@ public class ApplicationPushBuilder implements PushBuilder {
 
 
     // Package private so it can be tested. charsetName must be in lower case.
-    static String decode(String input, String charsetName) {
+    static String decode(String input, Charset charset) {
         int start = input.indexOf('%');
         int end = 0;
 
@@ -382,15 +380,6 @@ public class ApplicationPushBuilder implements PushBuilder {
             return input;
         }
 
-        Charset charset;
-        try {
-            charset = B2CConverter.getCharsetLower(charsetName);
-        } catch (UnsupportedEncodingException uee) {
-            // Impossible since original request would have triggered an error
-            // before reaching here
-            throw new IllegalStateException(uee);
-        }
-
         StringBuilder result = new StringBuilder(input.length());
         while (start != -1) {
             // Found the start of a %nn sequence. Copy everything form the last
@@ -401,7 +390,7 @@ public class ApplicationPushBuilder implements PushBuilder {
             while (end <input.length() && input.charAt(end) == '%') {
                 end += 3;
             }
-            result.append(decode(input.substring(start, end), charset));
+            result.append(decodePercentSequence(input.substring(start, end), charset));
             start = input.indexOf('%', end);
         }
         // Append the remaining text
@@ -411,11 +400,11 @@ public class ApplicationPushBuilder implements PushBuilder {
     }
 
 
-    private static String decode(String percentSequence, Charset charset) {
-        byte[] bytes = new byte[percentSequence.length()/3];
+    private static String decodePercentSequence(String sequence, Charset charset) {
+        byte[] bytes = new byte[sequence.length()/3];
         for (int i = 0; i < bytes.length; i += 3) {
-            bytes[i] = (byte) (HexUtils.getDec(percentSequence.charAt(1 + 3 * i)) << 4 +
-                    HexUtils.getDec(percentSequence.charAt(2 + 3 * i)));
+            bytes[i] = (byte) (HexUtils.getDec(sequence.charAt(1 + 3 * i)) << 4 +
+                    HexUtils.getDec(sequence.charAt(2 + 3 * i)));
         }
 
         return new String(bytes, charset);

==================================================
