327c5532f3f3123c937572541e56175851d73c48
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63816 async errors
==================================================
Mark Thomas
==================================================
Mon Oct 14 16:18:17 2019 +0100
==================================================
AbstractProcessor.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63816 async errors

Handle I/O errors on a non-container thread after asynchronous
processing has been started but before the container thread that started
asynchronous processing has completed processing the current
request/response.


==================================================
AsyncStateMachine.java
index fc3274519c..d5c3ee160f 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -110,17 +110,10 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
         if (t != null) {
             request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, t);
         }
-        if (blockIo && !ContainerThreadMarker.isContainerThread() && isAsync()) {
-            // The error occurred on a non-container thread during async
-            // processing which means not all of the necessary clean-up will
-            // have been completed. Dispatch to a container thread to do the
-            // clean-up. Need to do it this way to ensure that all the necessary
-            // clean-up is performed.
-            asyncStateMachine.asyncMustError();
-            if (getLog().isDebugEnabled()) {
-                getLog().debug(sm.getString("abstractProcessor.nonContainerThreadError"), t);
+        if (blockIo && isAsync()) {
+            if (asyncStateMachine.asyncError()) {
+                processSocketEvent(SocketEvent.ERROR, true);
             }
-            processSocketEvent(SocketEvent.ERROR, true);
         }
     }
 

==================================================
