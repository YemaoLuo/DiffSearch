c07530f6f11034ce0ba55a20d0ca058256a7509d
==================================================
Refactor system property source to be more flexible
==================================================
remm remm@apache.org
==================================================
Wed Apr 28 14:43:55 2021 +0200
==================================================
Digester.java
Refactor system property source to be more flexible

Allows explicit use if desired.


==================================================
SystemPropertySource.java
index 7c17eb9e77..9b943a58c9 100644
--- a/java/org/apache/tomcat/util/digester/Digester.java
+++ b/java/org/apache/tomcat/util/digester/Digester.java
@@ -24,16 +24,13 @@ import java.io.UnsupportedEncodingException;
 import java.lang.reflect.InvocationTargetException;
 import java.net.URI;
 import java.net.URISyntaxException;
-import java.security.Permission;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.EmptyStackException;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
-import java.util.PropertyPermission;
 import java.util.Set;
 import java.util.StringTokenizer;
 
@@ -48,7 +45,6 @@ import org.apache.tomcat.util.IntrospectionUtils;
 import org.apache.tomcat.util.IntrospectionUtils.PropertySource;
 import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.res.StringManager;
-import org.apache.tomcat.util.security.PermissionCheck;
 import org.xml.sax.Attributes;
 import org.xml.sax.EntityResolver;
 import org.xml.sax.ErrorHandler;
@@ -175,29 +171,7 @@ public class Digester extends DefaultHandler2 {
     // --------------------------------------------------- Instance Variables
 
 
-    private static class SystemPropertySource implements IntrospectionUtils.SecurePropertySource {
-
-        @Override
-        public String getProperty(String key) {
-            // For backward compatibility
-            return getProperty(key, null);
-        }
-
-        @Override
-        public String getProperty(String key, ClassLoader classLoader) {
-            if (classLoader instanceof PermissionCheck) {
-                Permission p = new PropertyPermission(key, "read");
-                if (!((PermissionCheck) classLoader).check(p)) {
-                    return null;
-                }
-            }
-            return System.getProperty(key);
-        }
-    }
-
-
-    protected IntrospectionUtils.PropertySource[] source = new IntrospectionUtils.PropertySource[] {
-            new SystemPropertySource() };
+    protected IntrospectionUtils.PropertySource[] source;
 
 
     /**
@@ -381,12 +355,20 @@ public class Digester extends DefaultHandler2 {
 
     public Digester() {
         propertySourcesSet = true;
+        ArrayList<IntrospectionUtils.PropertySource> sourcesList = new ArrayList<>();
+        boolean systemPropertySourceFound = false;
         if (propertySources != null) {
-            ArrayList<IntrospectionUtils.PropertySource> sourcesList = new ArrayList<>();
-            sourcesList.addAll(Arrays.asList(propertySources));
-            sourcesList.add(source[0]);
-            source = sourcesList.toArray(new IntrospectionUtils.PropertySource[0]);
+            for (IntrospectionUtils.PropertySource source : propertySources) {
+                if (source instanceof SystemPropertySource) {
+                    systemPropertySourceFound = true;
+                }
+                sourcesList.add(source);
+            }
+        }
+        if (!systemPropertySourceFound) {
+            sourcesList.add(new SystemPropertySource());
         }
+        source = sourcesList.toArray(new IntrospectionUtils.PropertySource[0]);
     }
 
 

==================================================
