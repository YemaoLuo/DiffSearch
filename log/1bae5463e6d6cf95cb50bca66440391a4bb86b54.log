1bae5463e6d6cf95cb50bca66440391a4bb86b54
==================================================
Fix various bugs in Jasper's simplified EL parser and add the test case that found them.
==================================================
Mark Emlyn
==================================================
Tue Nov 5 22:13:37 2013 +0000
==================================================
ELParser.java
Fix various bugs in Jasper's simplified EL parser and add the test case that found them.
This is a precursor to fixing BZ55198 / BZ55735 since that is going to require separating an attribute value into EL and non-EL components

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1539157 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestELParser.java
index ac83bb4c0d..ca707f3ba2 100644
--- a/java/org/apache/jasper/compiler/ELParser.java
+++ b/java/org/apache/jasper/compiler/ELParser.java
@@ -17,6 +17,12 @@
 
 package org.apache.jasper.compiler;
 
+import org.apache.jasper.JasperException;
+import org.apache.jasper.compiler.ELNode.ELText;
+import org.apache.jasper.compiler.ELNode.Function;
+import org.apache.jasper.compiler.ELNode.Root;
+import org.apache.jasper.compiler.ELNode.Text;
+
 /**
  * This class implements a parser for EL expressions.
  *
@@ -106,6 +112,7 @@ public class ELParser {
                 // Output whatever is in buffer
                 if (buf.length() > 0) {
                     ELexpr.add(new ELNode.ELText(buf.toString()));
+                    buf = new StringBuilder();
                 }
                 if (!parseFunction()) {
                     ELexpr.add(new ELNode.ELText(curToken.toString()));
@@ -131,8 +138,8 @@ public class ELParser {
         }
         String s1 = null; // Function prefix
         String s2 = curToken.toString(); // Function name
-        int mark = getIndex();
         if (hasNext()) {
+            int mark = getIndex();
             curToken = nextToken();
             if (curToken.toChar() == ':') {
                 if (hasNext()) {
@@ -150,8 +157,9 @@ public class ELParser {
                 ELexpr.add(new ELNode.Function(s1, s2));
                 return true;
             }
+            curToken = prevToken;
+            setIndex(mark);
         }
-        setIndex(mark);
         return false;
     }
 
@@ -389,4 +397,42 @@ public class ELParser {
     public char getType() {
         return type;
     }
+
+
+    protected static class TextBuilder extends ELNode.Visitor {
+
+        protected StringBuilder output = new StringBuilder();
+
+        public String getText() {
+            return output.toString();
+        }
+
+        @Override
+        public void visit(Root n) throws JasperException {
+            output.append(n.getType());
+            output.append('{');
+            n.getExpression().visit(this);
+            output.append('}');
+        }
+
+        @Override
+        public void visit(Function n) throws JasperException {
+            if (n.getPrefix() != null) {
+                output.append(n.getPrefix());
+                output.append(':');
+            }
+            output.append(n.getName());
+            output.append('(');
+        }
+
+        @Override
+        public void visit(Text n) throws JasperException {
+            output.append(n.getText());
+        }
+
+        @Override
+        public void visit(ELText n) throws JasperException {
+            output.append(n.getText());
+        }
+    }
 }

==================================================
