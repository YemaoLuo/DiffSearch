35aa9029256d514a67bf25ea04cb2ea6f9f702b4
==================================================
Remove unused StackMapTableEntry
==================================================
Mark Emlyn
==================================================
Sat Nov 9 21:36:21 2013 +0000
==================================================
StackMapTable.java
Remove unused StackMapTableEntry
Swallow associated values as they are never used.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1540398 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StackMapTableEntry.java
index 470f245a98..d78f1b4b1a 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapTable.java
@@ -37,8 +37,6 @@ import java.io.IOException;
 public final class StackMapTable extends Attribute {
 
     private static final long serialVersionUID = -2931695092763099621L;
-    private final int map_length;
-    private final StackMapTableEntry[] map; // Table of stack map entries
 
 
     /**
@@ -52,10 +50,9 @@ public final class StackMapTable extends Attribute {
     StackMapTable(int name_index, int length, DataInputStream file, ConstantPool constant_pool)
             throws IOException {
         super(name_index, length, constant_pool);
-        map_length = file.readUnsignedShort();
-        map = new StackMapTableEntry[map_length];
+        int map_length = file.readUnsignedShort();
         for (int i = 0; i < map_length; i++) {
-            map[i] = new StackMapTableEntry(file);
+            Utility.swallowStackMapTableEntry(file);
         }
     }
 }

==================================================
Utility.java
deleted file mode 100644
index dfa99ae939..0000000000
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapTableEntry.java
+++ /dev/null
@@ -1,83 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- */
-package org.apache.tomcat.util.bcel.classfile;
-
-import java.io.DataInputStream;
-import java.io.IOException;
-import java.io.Serializable;
-
-import org.apache.tomcat.util.bcel.Constants;
-
-/**
- * This class represents a stack map entry recording the types of
- * local variables and the the of stack items at a given byte code offset.
- * See CLDC specification &sect;5.3.1.2
- *
- * @version $Id$
- * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
- * @see     StackMap
- */
-public final class StackMapTableEntry implements Cloneable, Serializable {
-
-    private static final long serialVersionUID = 1L;
-
-    /**
-     * Construct object from file stream.
-     * @param file Input stream
-     * @throws IOException
-     */
-    StackMapTableEntry(DataInputStream file) throws IOException {
-        int frame_type = file.read();
-        int number_of_locals = -1;
-        int number_of_stack_items = -1;
-
-        if (frame_type >= Constants.SAME_FRAME && frame_type <= Constants.SAME_FRAME_MAX) {
-            // NO-OP
-        } else if (frame_type >= Constants.SAME_LOCALS_1_STACK_ITEM_FRAME && frame_type <= Constants.SAME_LOCALS_1_STACK_ITEM_FRAME_MAX) {
-            number_of_stack_items = 1;
-            Utility.swallowStackMapType(file);
-        } else if (frame_type == Constants.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {
-            file.readShort(); // Unused byte_code_offset_delta
-            number_of_stack_items = 1;
-            Utility.swallowStackMapType(file);
-        } else if (frame_type >= Constants.CHOP_FRAME && frame_type <= Constants.CHOP_FRAME_MAX) {
-            file.readShort(); // Unused byte_code_offset_delta
-        } else if (frame_type == Constants.SAME_FRAME_EXTENDED) {
-            file.readShort(); // Unused byte_code_offset_delta
-        } else if (frame_type >= Constants.APPEND_FRAME && frame_type <= Constants.APPEND_FRAME_MAX) {
-            file.readShort(); // Unused byte_code_offset_delta
-            number_of_locals = frame_type - 251;
-            for (int i = 0; i < number_of_locals; i++) {
-                Utility.swallowStackMapType(file);
-            }
-        } else if (frame_type == Constants.FULL_FRAME) {
-            file.readShort(); // Unused byte_code_offset_delta
-            number_of_locals = file.readShort();
-            for (int i = 0; i < number_of_locals; i++) {
-                Utility.swallowStackMapType(file);
-            }
-            number_of_stack_items = file.readShort();
-            for (int i = 0; i < number_of_stack_items; i++) {
-                Utility.swallowStackMapType(file);
-            }
-        } else {
-            /* Can't happen */
-            throw new ClassFormatException ("Invalid frame type found while parsing stack map table: " + frame_type);
-        }
-    }
-}

==================================================
