7cd2aaacdbf20879b04e4ec57a4dbfa6adee2636
==================================================
Add in an ability to configure a custom class loader
==================================================
Filip Hanik
==================================================
0700
==================================================
WebappLoader.java
Add in an ability to configure a custom class loader

without using reflection
beneficial for programmatic usage
and building native images using GraalVM



==================================================
TestVirtualWebappLoader.java
index 3c3026b12f..38292be63c 100644
--- a/java/org/apache/catalina/loader/WebappLoader.java
+++ b/java/org/apache/catalina/loader/WebappLoader.java
@@ -189,6 +189,17 @@ public class WebappLoader extends LifecycleMBeanBase implements Loader{
         this.loaderClass = loaderClass;
     }
 
+    /**
+     * Set the ClassLoader instance, without relying on reflection
+     * This method will also invoke {@link #setLoaderClass(String)} with
+     * {@code loaderInstance.getClass().getName()} as an argument
+     *
+     * @param loaderInstance The new ClassLoader instance to use
+     */
+    public void setLoaderInstance(WebappClassLoaderBase loaderInstance) {
+        this.classLoader = loaderInstance;
+        this.loaderClass = loaderInstance.getClass().getName();
+    }
 
     // --------------------------------------------------------- Public Methods
 
@@ -398,6 +409,10 @@ public class WebappLoader extends LifecycleMBeanBase implements Loader{
     private WebappClassLoaderBase createClassLoader()
         throws Exception {
 
+        if (classLoader != null) {
+            return classLoader;
+        }
+
         if (ParallelWebappClassLoader.class.getName().equals(loaderClass)) {
             return new ParallelWebappClassLoader(context.getParentClassLoader());
         }

==================================================
