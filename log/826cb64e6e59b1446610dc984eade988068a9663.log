826cb64e6e59b1446610dc984eade988068a9663
==================================================
- Calling allocate for no reason was not a very good idea (adding an accessor instead for now, bleh).
==================================================
Remy Maucherat
==================================================
Thu Aug 17 13:22:44 2006 +0000
==================================================
Wrapper.java
- Calling allocate for no reason was not a very good idea (adding an accessor instead for now, bleh).
- Simplify the event method.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@432230 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CoyoteAdapter.java
index 8950c27a15..357cf51760 100644
--- a/java/org/apache/catalina/Wrapper.java
+++ b/java/org/apache/catalina/Wrapper.java
@@ -216,6 +216,12 @@ public interface Wrapper extends Container {
     public void deallocate(Servlet servlet) throws ServletException;
 
 
+    /**
+     * Return the associated servlet instance.
+     */
+    public Servlet getServlet();
+    
+    
     /**
      * Return the value for the specified initialization parameter name,
      * if any; otherwise return <code>null</code>.

==================================================
StandardWrapper.java
index 4b087cda07..415855fcd2 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -19,6 +19,8 @@ package org.apache.catalina.connector;
 
 import java.io.IOException;
 
+import javax.servlet.Servlet;
+
 import org.apache.catalina.CometProcessor;
 import org.apache.catalina.Context;
 import org.apache.catalina.Globals;
@@ -117,25 +119,16 @@ public class CoyoteAdapter
 
         if (request.getWrapper() != null) {
             
+            CometProcessor servlet = null;
+
             // Bind the context CL to the current thread
             if (request.getContext().getLoader() != null ) {
                 Thread.currentThread().setContextClassLoader
                         (request.getContext().getLoader().getClassLoader());
             }
             
-            CometProcessor servlet = null;
             try {
                 servlet = (CometProcessor) request.getWrapper().allocate();
-            } catch (Throwable t) {
-                log.error(sm.getString("coyoteAdapter.service"), t);
-                request.recycle();
-                response.recycle();
-                // Restore the context classloader
-                Thread.currentThread().setContextClassLoader
-                    (CoyoteAdapter.class.getClassLoader());
-                return false;
-            }
-            try {
                 if (error) {
                     servlet.error(request.getRequest(), response.getResponse());
                 } else {
@@ -167,6 +160,11 @@ public class CoyoteAdapter
                 // Restore the context classloader
                 Thread.currentThread().setContextClassLoader
                     (CoyoteAdapter.class.getClassLoader());
+                try {
+                    request.getWrapper().deallocate((Servlet) servlet);
+                } catch (Exception e) {
+                    log.error(sm.getString("coyoteAdapter.service"), e);
+                }
                 // Recycle the wrapper request and response
                 if (error || response.isClosed()) {
                     request.recycle();
@@ -225,7 +223,7 @@ public class CoyoteAdapter
                 connector.getContainer().getPipeline().getFirst().invoke(request, response);
             }
 
-            if (request.getWrapper().allocate() instanceof CometProcessor 
+            if (request.getWrapper().getServlet() instanceof CometProcessor 
                     && !response.isClosed()) {
                 comet = true;
                 res.action(ActionCode.ACTION_COMET_BEGIN, null);

==================================================
