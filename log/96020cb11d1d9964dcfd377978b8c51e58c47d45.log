96020cb11d1d9964dcfd377978b8c51e58c47d45
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50230
==================================================
Mark Emlyn
==================================================
Thu Nov 11 22:10:25 2010 +0000
==================================================
DistributedManager.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50230
Add new DistributedManager interface that is implemented by the Backup Manager to remove circular dependency between tomcat-catalina-ha and tomcat-catalina modules. Also allows third-party distributed Manager implementations to report full session information through the HTML Manager.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1034174 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BackupManager.java
new file mode 100644
index 0000000000..2d042c697c
--- /dev/null
+++ b/java/org/apache/catalina/DistributedManager.java
@@ -0,0 +1,45 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.catalina;
+
+import java.util.Set;
+
+/**
+ * Interface implemented by session managers that do not keep a complete copy
+ * of all sessions on the local node but do know where every session is. The
+ * BackupManager is an example of such a Manager. Sessions can be primary
+ * (master copy on this node), backup (backup copy on this node) or proxy (only
+ * the session ID on this node). The identity of the primary and backup nodes
+ * are known for all sessions, including proxy sessions.
+ */
+public interface DistributedManager {
+
+    /**
+     * Returns the total session count for primary, backup and proxy.
+     * 
+     * @return  The total session count across the cluster.
+     */
+    public int getActiveSessionsFull();
+
+    /**
+     * Returns the list of all sessions IDS (primary, backup and proxy).
+     * 
+     * @return  The complete set of sessions IDs across the cluster.
+     */
+    public Set<String> getSessionIdsFull();
+}

==================================================
HTMLManagerServlet.java
index aca0342bd5..5d844cbcdc 100644
--- a/java/org/apache/catalina/ha/session/BackupManager.java
+++ b/java/org/apache/catalina/ha/session/BackupManager.java
@@ -20,6 +20,7 @@ import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Set;
 
+import org.apache.catalina.DistributedManager;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleState;
 import org.apache.catalina.Session;
@@ -36,7 +37,8 @@ import org.apache.juli.logging.LogFactory;
  *@author Filip Hanik
  *@version 1.0
  */
-public class BackupManager extends ClusterManagerBase implements MapOwner {
+public class BackupManager extends ClusterManagerBase
+        implements MapOwner, DistributedManager {
 
     private static final Log log = LogFactory.getLog(BackupManager.class);
 
@@ -254,22 +256,13 @@ public class BackupManager extends ClusterManagerBase implements MapOwner {
         return result;
     }
 
+    @Override
     public int getActiveSessionsFull() {
         LazyReplicatedMap map = (LazyReplicatedMap)sessions;
         return map.sizeFull();
     }
 
-    public String listSessionIdsFull() {
-        StringBuilder sb=new StringBuilder();
-        LazyReplicatedMap map = (LazyReplicatedMap)sessions;
-        @SuppressWarnings("unchecked") // sessions is of type Map<String, Session>
-        Iterator<String> keys = map.keySetFull().iterator();
-        while (keys.hasNext()) {
-            sb.append(keys.next()).append(" ");
-        }
-        return sb.toString();
-    }
-    
+    @Override
     public Set<String> getSessionIdsFull() {
         Set<String> sessionIds = new HashSet<String>();
         LazyReplicatedMap map = (LazyReplicatedMap)sessions;

==================================================
