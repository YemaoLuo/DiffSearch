5bbbcb1f8ca224efeb8e8308089817e30e4011aa
==================================================
Expose the calling of pause() on the endpoint to the HTTP/2 upgrade processor so it can stop accepting additional streams.
==================================================
Mark Thomas
==================================================
Fri Jun 26 19:17:16 2015 +0000
==================================================
AbstractProtocol.java
Expose the calling of pause() on the endpoint to the HTTP/2 upgrade processor so it can stop accepting additional streams.
This commit is just the plumbing to make this possible. The implementation that prevents new streams from being accepted will follow in a subsequent commit.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1687840 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Processor.java
index a06e4cb009..f8ee0a388b 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -945,6 +945,22 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
                 }
             }
         }
+
+        @Override
+        public final void pause() {
+            /*
+             * Inform all the processors associated with current connections
+             * that the endpoint is being paused. Most won't care. Those
+             * processing multiplexed streams may wish to take action. For
+             * example, HTTP/2 may wish to stop accepting new streams.
+             *
+             * Note that even if the endpoint is resumed, there is (currently)
+             * no API to inform the Processors of this.
+             */
+            for (Processor processor : connections.values()) {
+                processor.pause();
+            }
+        }
     }
 
     protected static class RecycledProcessors<P extends Processor, S>

==================================================
AjpProcessor.java
index 0da2c0732b..658b11b2ac 100644
--- a/java/org/apache/coyote/Processor.java
+++ b/java/org/apache/coyote/Processor.java
@@ -76,4 +76,12 @@ public interface Processor {
      * @return leftover bytes
      */
     ByteBuffer getLeftoverInput();
+
+    /**
+     * Informs the processor that the underlying I/O layer has stopped accepting
+     * new connections. This is primarily intended to enable processors that
+     * use multiplexed connections to prevent further 'streams' being added to
+     * an existing multiplexed connection.
+     */
+    void pause();
 }

==================================================
Http11Processor.java
index d4733d2cca..3b514d3321 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -888,6 +888,12 @@ public class AjpProcessor extends AbstractProcessor {
     }
 
 
+    @Override
+    public void pause() {
+        // NOOP for AJP
+    }
+
+
     // ------------------------------------------------------ Protected Methods
 
     // Methods used by SocketInputBuffer

==================================================
InternalHttpUpgradeHandler.java
index 4391bf849b..b7394a75b2 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -1887,4 +1887,10 @@ public class Http11Processor extends AbstractProcessor {
         return inputBuffer.getLeftover();
     }
 
+
+    @Override
+    public void pause() {
+        // NOOP for HTTP
+    }
+
 }

==================================================
UpgradeProcessorExternal.java
index 5f814699cb..86fbbef110 100644
--- a/java/org/apache/coyote/http11/upgrade/InternalHttpUpgradeHandler.java
+++ b/java/org/apache/coyote/http11/upgrade/InternalHttpUpgradeHandler.java
@@ -35,4 +35,6 @@ public interface InternalHttpUpgradeHandler extends HttpUpgradeHandler {
     void setSocketWrapper(SocketWrapperBase<?> wrapper);
 
     void setSslSupport(SSLSupport sslSupport);
+
+    void pause();
 }
\ No newline at end of file

==================================================
UpgradeProcessorInternal.java
index 49c2ca053c..dbe68a82e0 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeProcessorExternal.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeProcessorExternal.java
@@ -126,4 +126,10 @@ public class UpgradeProcessorExternal extends UpgradeProcessorBase {
     public final void setSslSupport(SSLSupport sslSupport) {
         // NO-OP
     }
+
+
+    @Override
+    public void pause() {
+        // NOOP for AJP
+    }
 }

==================================================
Http2UpgradeHandler.java
index 48f319382f..bd0ff5f60b 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeProcessorInternal.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeProcessorInternal.java
@@ -57,6 +57,12 @@ public class UpgradeProcessorInternal extends UpgradeProcessorBase {
     }
 
 
+    @Override
+    public void pause() {
+        internalHttpUpgradeHandler.pause();
+    }
+
+
     // --------------------------------------------------- AutoCloseable methods
 
     @Override

==================================================
StreamProcessor.java
index 05c52cae34..7f402fc144 100644
--- a/java/org/apache/coyote/http2/LocalStrings.properties
+++ b/java/org/apache/coyote/http2/LocalStrings.properties
@@ -79,6 +79,7 @@ upgradeHandler.rst.debug=Connection [{0}], Stream [{1}], Error [{2}], RST (closi
 upgradeHandler.goaway.debug=Connection [{0}], Goaway, Last stream [{1}], Error code [{2}], Debug data [{3}]
 upgradeHandler.init=Connection [{0}]
 upgradeHandler.ioerror=Connection [{0}]
+upgradeHandler.pause.entry=Connection [{0}] Pausing
 upgradeHandler.sendPrefaceFail=Failed to send preface to client
 upgradeHandler.socketCloseFailed=Error closing socket
 upgradeHandler.stream.closed=Stream [{0}] has been closed for some time

==================================================
AbstractEndpoint.java
index fec1f36080..eca8404b5d 100644
--- a/java/org/apache/coyote/http2/StreamProcessor.java
+++ b/java/org/apache/coyote/http2/StreamProcessor.java
@@ -135,6 +135,12 @@ public class StreamProcessor extends AbstractProcessor implements Runnable {
     }
 
 
+    @Override
+    public void pause() {
+        // NO-OP. Handled by the Http2UpgradeHandler
+    }
+
+
     @Override
     public SocketState process(SocketWrapperBase<?> socket) throws IOException {
         // Should never happen

==================================================
AprEndpoint.java
index 27ebc0f9e7..239fbac1d7 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -93,6 +93,15 @@ public abstract class AbstractEndpoint<S> {
         public void release(SocketWrapperBase<S> socketWrapper);
 
 
+        /**
+         * Inform the handler that the endpoint has stopped accepting any new
+         * connections. Typically, the endpoint will be stopped shortly
+         * afterwards but it is possible that the endpoint will be resumed so
+         * the handler should not assume that a stop will follow.
+         */
+        public void pause();
+
+
         /**
          * Recycle resources associated with the handler.
          */
@@ -877,6 +886,7 @@ public abstract class AbstractEndpoint<S> {
         if (running && !paused) {
             paused = true;
             unlockAccept();
+            getHandler().pause();
         }
     }
 
@@ -906,6 +916,8 @@ public abstract class AbstractEndpoint<S> {
     }
 
 
+    protected abstract Handler<S> getHandler();
+
     protected abstract Log getLog();
 
     protected LimitLatch initializeConnectionLatch() {

==================================================
Nio2Endpoint.java
index b51f4ffaa0..8d36098b71 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -144,6 +144,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
      */
     protected Handler<Long> handler = null;
     public void setHandler(Handler<Long> handler ) { this.handler = handler; }
+    @Override
     public Handler<Long> getHandler() { return handler; }
 
 

==================================================
NioEndpoint.java
index dd993971a7..fcf0d4de4d 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -104,6 +104,7 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
      */
     private Handler handler = null;
     public void setHandler(Handler handler ) { this.handler = handler; }
+    @Override
     public Handler getHandler() { return handler; }
 
 

==================================================
WsHttpUpgradeHandler.java
index 33a0c9819d..27d19c1256 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -144,6 +144,7 @@ public class NioEndpoint extends AbstractJsseEndpoint<NioChannel> {
      */
     private Handler handler = null;
     public void setHandler(Handler handler ) { this.handler = handler; }
+    @Override
     public Handler getHandler() { return handler; }
 
 

==================================================
TestUpgradeInternalHandler.java
index 771de40811..23db909e91 100644
--- a/java/org/apache/tomcat/websocket/server/WsHttpUpgradeHandler.java
+++ b/java/org/apache/tomcat/websocket/server/WsHttpUpgradeHandler.java
@@ -187,6 +187,12 @@ public class WsHttpUpgradeHandler implements InternalHttpUpgradeHandler {
     }
 
 
+    @Override
+    public void pause() {
+        // NO-OP
+    }
+
+
     @Override
     public void destroy() {
         if (connection != null) {

==================================================
