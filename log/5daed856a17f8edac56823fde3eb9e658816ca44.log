5daed856a17f8edac56823fde3eb9e658816ca44
==================================================
More logical grouping of components (group by Host then by Context)
==================================================
Mark Emlyn
==================================================
Wed Dec 11 12:36:17 2013 +0000
==================================================
ApplicationFilterConfig.java
More logical grouping of components (group by Host then by Context)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1550123 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ContainerBase.java
index e78dd9694e..2efe4890c8 100644
--- a/java/org/apache/catalina/core/ApplicationFilterConfig.java
+++ b/java/org/apache/catalina/core/ApplicationFilterConfig.java
@@ -373,10 +373,10 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
         }
         if (context instanceof StandardContext) {
             StandardContext standardContext = (StandardContext) context;
-            onameStr = domain + ":j2eeType=Filter,name=" + filterName +
-                 ",WebModule=" + webMod + ",J2EEApplication=" +
-                 standardContext.getJ2EEApplication() + ",J2EEServer=" +
-                 standardContext.getJ2EEServer();
+            onameStr = domain + ":j2eeType=Filter,WebModule=" + webMod +
+                    ",name=" + filterName + ",J2EEApplication=" +
+                    standardContext.getJ2EEApplication() + ",J2EEServer=" +
+                    standardContext.getJ2EEServer();
         } else {
             onameStr = domain + ":j2eeType=Filter,name=" + filterName +
                  ",WebModule=" + webMod;

==================================================
NamingContextListener.java
index 875f78ec51..d534e3e0a1 100644
--- a/java/org/apache/catalina/core/ContainerBase.java
+++ b/java/org/apache/catalina/core/ContainerBase.java
@@ -1230,15 +1230,15 @@ public abstract class ContainerBase extends LifecycleMBeanBase
         // each container
         while (!(c instanceof Engine)) {
             if (c instanceof Wrapper) {
-                keyProperties.append(",servlet=");
-                keyProperties.append(c.getName());
+                keyProperties.insert(0, ",servlet=");
+                keyProperties.insert(9, c.getName());
             } else if (c instanceof Context) {
-                keyProperties.append(",context=");
+                keyProperties.insert(0, ",context=");
                 ContextName cn = new ContextName(c.getName());
-                keyProperties.append(cn.getDisplayName());
+                keyProperties.insert(9,cn.getDisplayName());
             } else if (c instanceof Host) {
-                keyProperties.append(",host=");
-                keyProperties.append(c.getName());
+                keyProperties.insert(0, ",host=");
+                keyProperties.insert(6, c.getName());
             } else if (c == null) {
                 // May happen in unit testing and/or some embedding scenarios
                 keyProperties.append(",container");

==================================================
StandardWrapper.java
index 86711e98a5..0ca7aec8e0 100644
--- a/java/org/apache/catalina/core/NamingContextListener.java
+++ b/java/org/apache/catalina/core/NamingContextListener.java
@@ -745,10 +745,10 @@ public class NamingContextListener
                 contextName = "/" + contextName;
             Host host = (Host) ((Context)container).getParent();
             name = new ObjectName(domain + ":type=DataSource" +
-                        ",context=" + contextName +
-                        ",host=" + host.getName() +
-                        ",class=" + resource.getType() +
-                        ",name=" + quotedResourceName);
+                    ",host=" + host.getName() +
+                    ",context=" + contextName +
+                    ",class=" + resource.getType() +
+                    ",name=" + quotedResourceName);
         }
 
         return (name);

==================================================
WebappLoader.java
index 35f7b2a466..346953dcca 100644
--- a/java/org/apache/catalina/core/StandardWrapper.java
+++ b/java/org/apache/catalina/core/StandardWrapper.java
@@ -1050,11 +1050,15 @@ public class StandardWrapper extends ContainerBase
         if (isJspServlet) {
             StringBuilder oname = new StringBuilder(getDomain());
 
-            oname.append(":type=JspMonitor,name=");
-            oname.append(getName());
+            oname.append(":type=JspMonitor");
 
             oname.append(getWebModuleKeyProperties());
 
+            oname.append(",name=");
+            oname.append(getName());
+
+            oname.append(getJ2EEKeyProperties());
+
             try {
                 jspMonitorON = new ObjectName(oname.toString());
                 Registry.getRegistry(null, null)
@@ -1795,7 +1799,11 @@ public class StandardWrapper extends ContainerBase
     protected String getObjectNameKeyProperties() {
 
         StringBuilder keyProperties =
-            new StringBuilder("j2eeType=Servlet,name=");
+            new StringBuilder("j2eeType=Servlet");
+
+        keyProperties.append(getWebModuleKeyProperties());
+
+        keyProperties.append(",name=");
 
         String name = getName();
         if (Util.objectNameValueNeedsQuote(name)) {
@@ -1803,7 +1811,7 @@ public class StandardWrapper extends ContainerBase
         }
         keyProperties.append(name);
 
-        keyProperties.append(getWebModuleKeyProperties());
+        keyProperties.append(getJ2EEKeyProperties());
 
         return keyProperties.toString();
     }
@@ -1825,12 +1833,18 @@ public class StandardWrapper extends ContainerBase
         }
         keyProperties.append(contextName);
 
+        return keyProperties.toString();
+    }
+
+    private String getJ2EEKeyProperties() {
+
+        StringBuilder keyProperties = new StringBuilder(",J2EEApplication=");
+
         StandardContext ctx = null;
         if (parent instanceof StandardContext) {
             ctx = (StandardContext) getParent();
         }
 
-        keyProperties.append(",J2EEApplication=");
         if (ctx == null) {
             keyProperties.append("none");
         } else {

==================================================
MBeanUtils.java
index c8f7c4b5d7..ccf13fddfb 100644
--- a/java/org/apache/catalina/loader/WebappLoader.java
+++ b/java/org/apache/catalina/loader/WebappLoader.java
@@ -408,8 +408,8 @@ public class WebappLoader extends LifecycleMBeanBase
                 contextName = "/" + contextName;
             }
             ObjectName cloname = new ObjectName(context.getDomain() +
-                    ":type=WebappClassLoader,context=" + contextName +
-                    ",host=" + context.getParent().getName());
+                    ":type=WebappClassLoader,host=" + context.getParent().getName() +
+                    ",context=" + contextName);
             Registry.getRegistry(null, null)
                 .registerComponent(classLoader, cloname, null);
 
@@ -454,8 +454,8 @@ public class WebappLoader extends LifecycleMBeanBase
                 contextName = "/" + contextName;
             }
             ObjectName cloname = new ObjectName(context.getDomain() +
-                    ":type=WebappClassLoader,context=" + contextName +
-                    ",host=" + context.getParent().getName());
+                    ":type=WebappClassLoader,host=" + context.getParent().getName() +
+                    ",context=" + contextName);
             Registry.getRegistry(null, null).unregisterComponent(cloname);
         } catch (Exception e) {
             log.error("LifecycleException ", e);
@@ -680,6 +680,9 @@ public class WebappLoader extends LifecycleMBeanBase
 
         StringBuilder name = new StringBuilder("type=Loader");
 
+        name.append(",host=");
+        name.append(context.getParent().getName());
+
         name.append(",context=");
 
         String contextName = context.getName();
@@ -688,9 +691,6 @@ public class WebappLoader extends LifecycleMBeanBase
         }
         name.append(contextName);
 
-        name.append(",host=");
-        name.append(context.getParent().getName());
-
         return name.toString();
     }
 }

==================================================
ManagerBase.java
index 21a4d4ffa3..2cd5f74b92 100644
--- a/java/org/apache/catalina/mbeans/MBeanUtils.java
+++ b/java/org/apache/catalina/mbeans/MBeanUtils.java
@@ -347,8 +347,8 @@ public class MBeanUtils {
             ContextName cn = new ContextName(context.getName());
             Container host = context.getParent();
             name = new ObjectName(domain + ":type=Environment" +
-                        ",resourcetype=Context,context=" + cn.getDisplayName() +
-                        ",host=" + host.getName() +
+                        ",resourcetype=Context,host=" + host.getName() +
+                        ",context=" + cn.getDisplayName() +
                         ",name=" + environment.getName());
         }
         return (name);
@@ -375,17 +375,17 @@ public class MBeanUtils {
                 resource.getNamingResources().getContainer();
         if (container instanceof Server) {
             name = new ObjectName(domain + ":type=Resource" +
-                        ",resourcetype=Global,class=" + resource.getType() +
-                        ",name=" + quotedResourceName);
+                    ",resourcetype=Global,class=" + resource.getType() +
+                    ",name=" + quotedResourceName);
         } else if (container instanceof Context) {
             Context context = ((Context)container);
             ContextName cn = new ContextName(context.getName());
             Container host = context.getParent();
             name = new ObjectName(domain + ":type=Resource" +
-                        ",resourcetype=Context,context=" + cn.getDisplayName() +
-                        ",host=" + host.getName() +
-                        ",class=" + resource.getType() +
-                        ",name=" + quotedResourceName);
+                    ",resourcetype=Context,host=" + host.getName() +
+                    ",context=" + cn.getDisplayName() +
+                    ",class=" + resource.getType() +
+                    ",name=" + quotedResourceName);
         }
 
         return (name);
@@ -413,16 +413,16 @@ public class MBeanUtils {
                 resourceLink.getNamingResources().getContainer();
         if (container instanceof Server) {
             name = new ObjectName(domain + ":type=ResourceLink" +
-                        ",resourcetype=Global" +
-                        ",name=" + quotedResourceLinkName);
+                    ",resourcetype=Global" +
+                    ",name=" + quotedResourceLinkName);
         } else if (container instanceof Context) {
             Context context = ((Context)container);
             ContextName cn = new ContextName(context.getName());
             Container host = context.getParent();
             name = new ObjectName(domain + ":type=ResourceLink" +
-                        ",resourcetype=Context,context=" + cn.getDisplayName() +
-                        ",host=" + host.getName() +
-                        ",name=" + quotedResourceLinkName);
+                    ",resourcetype=Context,host=" + host.getName() +
+                    ",context=" + cn.getDisplayName() +
+                    ",name=" + quotedResourceLinkName);
         }
 
         return (name);
@@ -469,8 +469,8 @@ public class MBeanUtils {
 
         ContextName cn = new ContextName(context.getName());
         Container host = context.getParent();
-        name = new ObjectName(domain + ":type=Loader,context=" +
-                cn.getDisplayName() + ",host=" + host.getName());
+        name = new ObjectName(domain + ":type=Loader,host=" + host.getName() +
+                ",context=" + cn.getDisplayName());
 
         return name;
     }

==================================================
