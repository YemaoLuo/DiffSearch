d80e9adf2aff437d4ef01d038cc6f4422e72986f
==================================================
Add unit tests for section 5.2
==================================================
Mark Thomas
==================================================
Thu Jun 11 14:51:28 2015 +0000
==================================================
Http2UpgradeHandler.java
Add unit tests for section 5.2
Fix a bug where the end of stream flag was incorrectly set when flow control was applied to the response body after it had been fully written by the app but before it had been fully written to the client.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1684910 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Stream.java
index a14413a8d9..fa1a99ca90 100644
--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java
@@ -453,7 +453,7 @@ public class Http2UpgradeHandler extends AbstractStream implements InternalHttpU
     }
 
 
-    void writeBody(Stream stream, ByteBuffer data, int len) throws IOException {
+    void writeBody(Stream stream, ByteBuffer data, int len, boolean finished) throws IOException {
         if (log.isDebugEnabled()) {
             log.debug(sm.getString("upgradeHandler.writeBody", connectionId, stream.getIdentifier(),
                     Integer.toString(data.remaining())));
@@ -462,7 +462,7 @@ public class Http2UpgradeHandler extends AbstractStream implements InternalHttpU
             byte[] header = new byte[9];
             ByteUtil.setThreeBytes(header, 0, len);
             header[3] = FrameType.DATA.getIdByte();
-            if (stream.getOutputBuffer().isFinished()) {
+            if (finished) {
                 header[4] = FLAG_END_OF_STREAM;
                 stream.sentEndOfStream();
                 if (!stream.isActive()) {

==================================================
StreamProcessor.java
index fde119a6de..ac1a3e300a 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -275,11 +275,11 @@ public class Stream extends AbstractStream implements HeaderEmitter {
 
         private final ByteBuffer buffer = ByteBuffer.allocate(8 * 1024);
         private volatile long written = 0;
-        private volatile boolean finished = false;
+        private volatile boolean closed = false;
 
         @Override
         public int doWrite(ByteChunk chunk) throws IOException {
-            if (finished) {
+            if (closed) {
                 // TODO i18n
                 throw new IllegalStateException();
             }
@@ -293,7 +293,7 @@ public class Stream extends AbstractStream implements HeaderEmitter {
                 if (len > 0 && !buffer.hasRemaining()) {
                     // Only flush if we have more data to write and the buffer
                     // is full
-                    flush();
+                    flush(true);
                 }
             }
             written += offset;
@@ -301,6 +301,10 @@ public class Stream extends AbstractStream implements HeaderEmitter {
         }
 
         public void flush() throws IOException {
+            flush(false);
+        }
+
+        private void flush(boolean writeInProgress) throws IOException {
             if (!coyoteResponse.isCommitted()) {
                 coyoteResponse.sendHeaders();
             }
@@ -348,7 +352,8 @@ public class Stream extends AbstractStream implements HeaderEmitter {
                 decrementWindowSize(thisWrite);
 
                 // Do the write
-                handler.writeBody(Stream.this, buffer, thisWrite);
+                handler.writeBody(Stream.this, buffer, thisWrite,
+                        !writeInProgress && closed && left == thisWrite);
                 left -= thisWrite;
                 buffer.position(buffer.position() + thisWrite);
             }
@@ -360,12 +365,12 @@ public class Stream extends AbstractStream implements HeaderEmitter {
             return written;
         }
 
-        public void finished() {
-            finished = true;
+        public void close() {
+            closed = true;
         }
 
-        public boolean isFinished() {
-            return finished;
+        public boolean isClosed() {
+            return closed;
         }
 
         /**
@@ -373,7 +378,7 @@ public class Stream extends AbstractStream implements HeaderEmitter {
          *         response has no body.
          */
         public boolean hasNoBody() {
-            return ((written == 0) && finished);
+            return ((written == 0) && closed);
         }
     }
 

==================================================
Http2TestBase.java
index 3d8d7449af..fec1f36080 100644
--- a/java/org/apache/coyote/http2/StreamProcessor.java
+++ b/java/org/apache/coyote/http2/StreamProcessor.java
@@ -76,7 +76,7 @@ public class StreamProcessor extends AbstractProcessor implements Runnable {
         }
         case CLOSE: {
             // Tell the output buffer there will be no more data
-            stream.getOutputBuffer().finished();
+            stream.getOutputBuffer().close();
             // Then flush it
             action(ActionCode.CLIENT_FLUSH, null);
             break;

==================================================
TestHttp2Section_5_2.java
index 53a5e1b213..1f1694c10f 100644
--- a/test/org/apache/coyote/http2/Http2TestBase.java
+++ b/test/org/apache/coyote/http2/Http2TestBase.java
@@ -456,6 +456,24 @@ public abstract class Http2TestBase extends TomcatBaseTest {
     }
 
 
+    void sendSetting(int settingId, long value) throws IOException {
+        byte[] settingFrame = new byte[15];
+        // length
+        ByteUtil.setThreeBytes(settingFrame, 0, 6);
+        // type
+        settingFrame[3] = FrameType.SETTINGS.getIdByte();
+        // No flags
+        // Stream 0
+
+        // Payload
+        ByteUtil.setTwoBytes(settingFrame, 9, settingId);
+        ByteUtil.setFourBytes(settingFrame, 11, value);
+
+        os.write(settingFrame);
+        os.flush();
+    }
+
+
     private static class TestInput implements Http2Parser.Input {
 
         private final InputStream is;

==================================================
