f4469d6bfc4209def736d636f4ee993b8f330bb8
==================================================
Remove session object from SingleSignOnMaps
==================================================
Mark Thomas
==================================================
Tue Dec 16 21:53:58 2014 +0000
==================================================
SingleSignOn.java
Remove session object from SingleSignOnMaps

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1646104 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SingleSignOnEntry.java
index bffc763008..a63797f32a 100644
--- a/java/org/apache/catalina/authenticator/SingleSignOn.java
+++ b/java/org/apache/catalina/authenticator/SingleSignOn.java
@@ -19,11 +19,17 @@ package org.apache.catalina.authenticator;
 import java.io.IOException;
 import java.security.Principal;
 import java.util.Map;
+import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.Cookie;
 
+import org.apache.catalina.Container;
+import org.apache.catalina.Context;
+import org.apache.catalina.Engine;
+import org.apache.catalina.LifecycleException;
+import org.apache.catalina.Manager;
 import org.apache.catalina.Realm;
 import org.apache.catalina.Session;
 import org.apache.catalina.SessionEvent;
@@ -53,6 +59,12 @@ import org.apache.catalina.valves.ValveBase;
  */
 public class SingleSignOn extends ValveBase implements SessionListener {
 
+    /* The engine at the top of the container hierarchy in which this SSO Valve
+     * has been placed. It is used to get back to a session object from a
+     * SingleSignOnSessionKey and is updated when the Valve starts and stops.
+     */
+    private Engine engine;
+
     //------------------------------------------------------ Constructor
 
     public SingleSignOn() {
@@ -79,7 +91,7 @@ public class SingleSignOn extends ValveBase implements SessionListener {
      * The cache of single sign on identifiers, keyed by the Session that is
      * associated with them.
      */
-    protected Map<Session,String> reverse = new ConcurrentHashMap<>();
+    protected Map<SingleSignOnSessionKey,String> reverse = new ConcurrentHashMap<>();
 
 
     /**
@@ -209,7 +221,7 @@ public class SingleSignOn extends ValveBase implements SessionListener {
         }
 
         String ssoId = null;
-        ssoId = reverse.get(session);
+        ssoId = reverse.get(new SingleSignOnSessionKey(session));
         if (ssoId == null) {
             return;
         }
@@ -354,7 +366,7 @@ public class SingleSignOn extends ValveBase implements SessionListener {
         if (sso != null) {
             sso.addSession(this, session);
         }
-        reverse.put(session, ssoId);
+        reverse.put(new SingleSignOnSessionKey(session), ssoId);
     }
 
 
@@ -367,7 +379,7 @@ public class SingleSignOn extends ValveBase implements SessionListener {
      */
     protected void deregister(String ssoId, Session session) {
 
-        reverse.remove(session);
+        reverse.remove(new SingleSignOnSessionKey(session));
 
         SingleSignOnEntry sso = cache.get(ssoId);
         if (sso == null) {
@@ -377,8 +389,8 @@ public class SingleSignOn extends ValveBase implements SessionListener {
         sso.removeSession(session);
 
         // see if we are the last session, if so blow away ssoId
-        Session sessions[] = sso.findSessions();
-        if (sessions == null || sessions.length == 0) {
+        Set<SingleSignOnSessionKey> sessions = sso.findSessions();
+        if (sessions == null || sessions.size() == 0) {
             cache.remove(ssoId);
         }
     }
@@ -404,21 +416,54 @@ public class SingleSignOn extends ValveBase implements SessionListener {
         }
 
         // Expire any associated sessions
-        Session sessions[] = sso.findSessions();
-        for (int i = 0; i < sessions.length; i++) {
+        for (SingleSignOnSessionKey ssoKey : sso.findSessions()) {
             if (containerLog.isTraceEnabled()) {
-                containerLog.trace(" Invalidating session " + sessions[i]);
+                containerLog.trace(" Invalidating session " + ssoKey);
             }
             // Remove from reverse cache first to avoid recursion
-            reverse.remove(sessions[i]);
+            reverse.remove(ssoKey);
             // Invalidate this session
-            sessions[i].expire();
+            expire(ssoKey);
         }
 
         // NOTE:  Clients may still possess the old single sign on cookie,
         // but it will be removed on the next request since it is no longer
         // in the cache
+    }
+
 
+    private void expire(SingleSignOnSessionKey key) {
+        if (engine == null) {
+            // TODO Log error
+            return;
+        }
+        Container host = engine.findChild(key.getHostName());
+        if (host == null) {
+            // TODO Log error
+            return;
+        }
+        Context context = (Context) host.findChild(key.getContextName());
+        if (context == null) {
+            // TODO Log error
+            return;
+        }
+        Manager manager = context.getManager();
+        if (manager == null) {
+            // TODO Log error
+            return;
+        }
+        Session session = null;
+        try {
+            session = manager.findSession(key.getSessionId());
+        } catch (IOException e) {
+            // TODO Log error
+            return;
+        }
+        if (session == null) {
+            // TODO Log error
+            return;
+        }
+        session.expire();
     }
 
 
@@ -558,12 +603,32 @@ public class SingleSignOn extends ValveBase implements SessionListener {
         entry.removeSession(session);
 
         // Remove the inactive session from the 'reverse' Map.
-        reverse.remove(session);
+        reverse.remove(new SingleSignOnSessionKey(session));
 
         // If there are not sessions left in the SingleSignOnEntry,
         // deregister the entry.
-        if (entry.findSessions().length == 0) {
+        if (entry.findSessions().size() == 0) {
             deregister(ssoId);
         }
     }
+
+
+    @Override
+    protected synchronized void startInternal() throws LifecycleException {
+        Container c = getContainer();
+        while (c != null && !(c instanceof Engine)) {
+            c = c.getParent();
+        }
+        if (c instanceof Engine) {
+            engine = (Engine) c;
+        }
+        super.startInternal();
+    }
+
+
+    @Override
+    protected synchronized void stopInternal() throws LifecycleException {
+        super.stopInternal();
+        engine = null;
+    }
 }

==================================================
SingleSignOnSessionKey.java
index 3f6634c5b0..eb87d880f5 100644
--- a/java/org/apache/catalina/authenticator/SingleSignOnEntry.java
+++ b/java/org/apache/catalina/authenticator/SingleSignOnEntry.java
@@ -17,6 +17,8 @@
 package org.apache.catalina.authenticator;
 
 import java.security.Principal;
+import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
 
 import javax.servlet.http.HttpServletRequest;
 
@@ -42,7 +44,8 @@ public class SingleSignOnEntry {
 
     protected Principal principal = null;
 
-    protected Session sessions[] = new Session[0];
+    protected ConcurrentHashMap<SingleSignOnSessionKey,SingleSignOnSessionKey> sessionKeys =
+            new ConcurrentHashMap<>();
 
     protected String username = null;
 
@@ -76,16 +79,13 @@ public class SingleSignOnEntry {
      *                  the SSO session.
      * @param session   The <code>Session</code> being associated with the SSO.
      */
-    public synchronized void addSession(SingleSignOn sso, Session session) {
-        for (int i = 0; i < sessions.length; i++) {
-            if (session == sessions[i])
-                return;
+    public void addSession(SingleSignOn sso, Session session) {
+        SingleSignOnSessionKey key = new SingleSignOnSessionKey(session);
+        SingleSignOnSessionKey currentKey = sessionKeys.putIfAbsent(key, key);
+        if (currentKey == null) {
+            // Session not previously added
+            session.addSessionListener(sso);
         }
-        Session results[] = new Session[sessions.length + 1];
-        System.arraycopy(sessions, 0, results, 0, sessions.length);
-        results[sessions.length] = session;
-        sessions = results;
-        session.addSessionListener(sso);
     }
 
     /**
@@ -94,21 +94,16 @@ public class SingleSignOnEntry {
      *
      * @param session  the <code>Session</code> to remove.
      */
-    public synchronized void removeSession(Session session) {
-        Session[] nsessions = new Session[sessions.length - 1];
-        for (int i = 0, j = 0; i < sessions.length; i++) {
-            if (session == sessions[i])
-                continue;
-            nsessions[j++] = sessions[i];
-        }
-        sessions = nsessions;
+    public void removeSession(Session session) {
+        SingleSignOnSessionKey key = new SingleSignOnSessionKey(session);
+        sessionKeys.remove(key);
     }
 
     /**
      * Returns the <code>Session</code>s associated with this SSO.
      */
-    public synchronized Session[] findSessions() {
-        return (this.sessions);
+    public Set<SingleSignOnSessionKey> findSessions() {
+        return sessionKeys.keySet();
     }
 
     /**

==================================================
