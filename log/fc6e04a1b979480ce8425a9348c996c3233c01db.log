fc6e04a1b979480ce8425a9348c996c3233c01db
==================================================
Use constants for close code and fix various typos.
==================================================
Mark Emlyn
==================================================
Wed Feb 29 21:24:19 2012 +0000
==================================================
Constants.java
Use constants for close code and fix various typos.
Patch provided by Johno Crawford.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1295284 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StreamInbound.java
index f6f7a206a8..a13140e71b 100644
--- a/java/org/apache/catalina/websocket/LocalStrings.properties
+++ b/java/org/apache/catalina/websocket/LocalStrings.properties
@@ -17,7 +17,7 @@ frame.eos=The end of the stream was reached before the expected number of payloa
 frame.invalidUtf8=A sequence of bytes was received that did not represent valid UTF-8
 frame.notMasked=The client frame was not masked but all client frames must be masked
 
-is.notContinutation=A frame with the OpCode [{0}] was recieved when a continuation frame was expected
+is.notContinuation=A frame with the OpCode [{0}] was received when a continuation frame was expected
 is.unknownOpCode=A frame with the unrecognized OpCode [{0}] was received
 
 message.bufferTooSmall=The buffer is not big enough to contain the message currently being processed

==================================================
WsInputStream.java
index 10fee125fc..e6d1c4b3c9 100644
--- a/java/org/apache/catalina/websocket/StreamInbound.java
+++ b/java/org/apache/catalina/websocket/StreamInbound.java
@@ -113,7 +113,8 @@ public abstract class StreamInbound implements UpgradeInbound {
             try {
                 // TODO User defined extensions may define values for rsv
                 if (frame.getRsv() > 0) {
-                    getWsOutbound().close(1002, null);
+                    getWsOutbound().close(
+                            Constants.STATUS_PROTOCOL_ERROR, null);
                     return SocketState.CLOSED;
                 }
 
@@ -134,21 +135,22 @@ public abstract class StreamInbound implements UpgradeInbound {
                     // NO-OP
                 } else {
                     // Unknown OpCode
-                    getWsOutbound().close(1002, null);
+                    getWsOutbound().close(
+                            Constants.STATUS_PROTOCOL_ERROR, null);
                     return SocketState.CLOSED;
                 }
             } catch (MalformedInputException mie) {
                 // Invalid UTF-8
-                getWsOutbound().close(1007, null);
+                getWsOutbound().close(Constants.STATUS_BAD_DATA, null);
                 return SocketState.CLOSED;
             } catch (UnmappableCharacterException uce) {
                 // Invalid UTF-8
-                getWsOutbound().close(1007, null);
+                getWsOutbound().close(Constants.STATUS_BAD_DATA, null);
                 return SocketState.CLOSED;
             } catch (IOException ioe) {
-                // Given something must have gone to reach this point, this might
-                // not work but try it anyway.
-                getWsOutbound().close(1002, null);
+                // Given something must have gone to reach this point, this
+                // might not work but try it anyway.
+                getWsOutbound().close(Constants.STATUS_PROTOCOL_ERROR, null);
                 return SocketState.CLOSED;
             }
             frame = wsIs.nextFrame(false);

==================================================
WsOutbound.java
index 9dfcad4597..3fa30ed5a7 100644
--- a/java/org/apache/catalina/websocket/WsInputStream.java
+++ b/java/org/apache/catalina/websocket/WsInputStream.java
@@ -17,6 +17,7 @@
 package org.apache.catalina.websocket;
 
 import java.io.IOException;
+import java.io.InputStream;
 
 import org.apache.coyote.http11.upgrade.UpgradeProcessor;
 import org.apache.tomcat.util.res.StringManager;
@@ -27,7 +28,7 @@ import org.apache.tomcat.util.res.StringManager;
  * makes the number of bytes declared in the payload length available for
  * reading even if more bytes are available from the socket.
  */
-public class WsInputStream extends java.io.InputStream {
+public class WsInputStream extends InputStream {
 
     private static final StringManager sm =
             StringManager.getManager(Constants.Package);
@@ -147,7 +148,7 @@ public class WsInputStream extends java.io.InputStream {
                 nextFrame(true);
             }
             if (frame.getOpCode() != Constants.OPCODE_CONTINUATION) {
-                error = sm.getString("is.notContinutation",
+                error = sm.getString("is.notContinuation",
                         Byte.valueOf(frame.getOpCode()));
                 throw new IOException(error);
             }

==================================================
