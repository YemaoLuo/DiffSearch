dca86400d08568dcfbb339162f61e0e3a88501c8
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=57724
==================================================
Mark Thomas
==================================================
Wed Mar 18 21:13:48 2015 +0000
==================================================
CorsFilter.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=57724
Handle the case where the UA provides an Origin header for a non-CORS request.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1667615 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestCorsFilter.java
index c1d46667f2..dab7a8dfec 100644
--- a/java/org/apache/catalina/filters/CorsFilter.java
+++ b/java/org/apache/catalina/filters/CorsFilter.java
@@ -620,6 +620,8 @@ public final class CorsFilter implements Filter {
                 requestType = CORSRequestType.INVALID_CORS;
             } else if (!isValidOrigin(originHeader)) {
                 requestType = CORSRequestType.INVALID_CORS;
+            } else if (isLocalOrigin(request, originHeader)) {
+                return CORSRequestType.NOT_CORS;
             } else {
                 String method = request.getMethod();
                 if (method != null) {
@@ -661,6 +663,36 @@ public final class CorsFilter implements Filter {
     }
 
 
+    private boolean isLocalOrigin(HttpServletRequest request, String origin) {
+
+        // Build scheme://host:port from request
+        StringBuilder target = new StringBuilder();
+        String scheme = request.getScheme();
+        if (scheme == null) {
+            return false;
+        } else {
+            scheme = scheme.toLowerCase(Locale.ENGLISH);
+        }
+        target.append(scheme);
+        target.append("://");
+
+        String host = request.getServerName();
+        if (host == null) {
+            return false;
+        }
+        target.append(host);
+
+        int port = request.getServerPort();
+        if ("http".equals(scheme) && port != 80 ||
+                "https".equals(scheme) && port != 443) {
+            target.append(':');
+            target.append(port);
+        }
+
+        return origin.equalsIgnoreCase(target.toString());
+    }
+
+
     /*
      * Return the lower case, trimmed value of the media type from the content
      * type.

==================================================
TesterHttpServletRequest.java
index 5d5930cdba..bcece1b6db 100644
--- a/test/org/apache/catalina/filters/TestCorsFilter.java
+++ b/test/org/apache/catalina/filters/TestCorsFilter.java
@@ -520,6 +520,85 @@ public class TestCorsFilter {
                 CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
     }
 
+    /*
+     * Negative test, when a non-CORS request arrives, with an origin header.
+     */
+    @Test
+    public void testDoFilterSameHostWithOrigin01() throws IOException, ServletException {
+        doTestDoFilterSameHostWithOrigin01(
+                "http://localhost:8080", "http", "localhost", 8080, false);
+    }
+
+    @Test
+    public void testDoFilterSameHostWithOrigin02() throws IOException, ServletException {
+        doTestDoFilterSameHostWithOrigin01(
+                "http://localhost:8080", "https", "localhost", 8080, true);
+    }
+
+    @Test
+    public void testDoFilterSameHostWithOrigin03() throws IOException, ServletException {
+        doTestDoFilterSameHostWithOrigin01(
+                "http://localhost:8080", "http", "localhost", 8081, true);
+    }
+
+    @Test
+    public void testDoFilterSameHostWithOrigin04() throws IOException, ServletException {
+        doTestDoFilterSameHostWithOrigin01(
+                "http://localhost:8080", "http", "foo.dev.local", 8080, true);
+    }
+
+    @Test
+    public void testDoFilterSameHostWithOrigin05() throws IOException, ServletException {
+        doTestDoFilterSameHostWithOrigin01(
+                "https://localhost:8443", "https", "localhost", 8443, false);
+    }
+
+    @Test
+    public void testDoFilterSameHostWithOrigin06() throws IOException, ServletException {
+        doTestDoFilterSameHostWithOrigin01(
+                "https://localhost", "https", "localhost", 443, false);
+    }
+
+    @Test
+    public void testDoFilterSameHostWithOrigin07() throws IOException, ServletException {
+        doTestDoFilterSameHostWithOrigin01(
+                "http://localhost", "http", "localhost", 80, false);
+    }
+
+    private void doTestDoFilterSameHostWithOrigin01(String origin, String scheme, String host,
+            int port, boolean isCors) throws IOException, ServletException {
+
+        TesterHttpServletRequest request = new TesterHttpServletRequest();
+
+        request.setMethod("POST");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, origin);
+        request.setScheme(scheme);
+        request.setServerName(host);
+        request.setServerPort(port);
+        request.setContentType("text/plain");
+        TesterHttpServletResponse response = new TesterHttpServletResponse();
+
+        CorsFilter corsFilter = new CorsFilter();
+        corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
+        CorsFilter.CORSRequestType requestType =
+                corsFilter.checkRequestType(request);
+        if (isCors) {
+            Assert.assertNotEquals(CorsFilter.CORSRequestType.NOT_CORS, requestType);
+        } else {
+            Assert.assertEquals(CorsFilter.CORSRequestType.NOT_CORS, requestType);
+        }
+
+        corsFilter.doFilter(request, response, filterChain);
+
+        if (isCors) {
+            Assert.assertTrue(((Boolean) request.getAttribute(
+                    CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
+        } else {
+            Assert.assertFalse(((Boolean) request.getAttribute(
+                    CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
+        }
+    }
+
     @Test
     public void testDoFilterInvalidCORSOriginNotAllowed() throws IOException,
             ServletException {

==================================================
