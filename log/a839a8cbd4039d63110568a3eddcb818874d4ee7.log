a839a8cbd4039d63110568a3eddcb818874d4ee7
==================================================
Remove unused parameter passed around a whole bunch of code.
==================================================
Mark Thomas
==================================================
Thu Apr 9 12:33:37 2015 +0000
==================================================
InputBuffer.java
Remove unused parameter passed around a whole bunch of code.
Discovered while fixing Java 8 Javadoc issues with InputBuffer when I wondered what the Request parameter was for. Answer: in this case, nothing!

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1672312 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Request.java
index eec4da9ecc..5ec4bf75cd 100644
--- a/java/org/apache/coyote/InputBuffer.java
+++ b/java/org/apache/coyote/InputBuffer.java
@@ -14,30 +14,24 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package org.apache.coyote;
 
 import java.io.IOException;
 
 import org.apache.tomcat.util.buf.ByteChunk;
 
-
 /**
- * Input buffer.
- *
- * This class is used only in the protocol implementation. All reading from
- * Tomcat ( or adapter ) should be done using Request.doRead().
+ * This class is only for internal use in the protocol implementation. All
+ * reading from Tomcat (or adapter) should be done using Request.doRead().
  */
 public interface InputBuffer {
 
-
-    /** Return from the input stream.
+    /**
+     * Read from the input
+     * Return from the input stream.
         IMPORTANT: the current model assumes that the protocol will 'own' the
         buffer and return a pointer to it in ByteChunk ( i.e. the param will
         have chunk.getBytes()==null before call, and the result after the call ).
     */
-    public int doRead(ByteChunk chunk, Request request)
-        throws IOException;
-
-
+    public int doRead(ByteChunk chunk) throws IOException;
 }

==================================================
AjpProcessor.java
index fb40c006c3..298a3241fb 100644
--- a/java/org/apache/coyote/Request.java
+++ b/java/org/apache/coyote/Request.java
@@ -464,9 +464,8 @@ public final class Request {
      * InputStream, this interface allows the app to process data in place, without copy.
      *
      */
-    public int doRead(ByteChunk chunk)
-        throws IOException {
-        int n = inputBuffer.doRead(chunk, this);
+    public int doRead(ByteChunk chunk) throws IOException {
+        int n = inputBuffer.doRead(chunk);
         if (n > 0) {
             bytesRead+=n;
         }

==================================================
Http11InputBuffer.java
index 410b9752dd..465d09c7b4 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -37,7 +37,6 @@ import org.apache.coyote.AsyncContextCallback;
 import org.apache.coyote.ErrorState;
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.OutputBuffer;
-import org.apache.coyote.Request;
 import org.apache.coyote.RequestInfo;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -1589,7 +1588,7 @@ public class AjpProcessor extends AbstractProcessor {
          * Read bytes into the specified chunk.
          */
         @Override
-        public int doRead(ByteChunk chunk, Request req) throws IOException {
+        public int doRead(ByteChunk chunk) throws IOException {
 
             if (endOfStream) {
                 return -1;

==================================================
InputFilter.java
index 27e903793e..9e4cd6e8c4 100644
--- a/java/org/apache/coyote/http11/Http11InputBuffer.java
+++ b/java/org/apache/coyote/http11/Http11InputBuffer.java
@@ -296,12 +296,12 @@ public class Http11InputBuffer implements InputBuffer {
      * Read some bytes.
      */
     @Override
-    public int doRead(ByteChunk chunk, Request req) throws IOException {
+    public int doRead(ByteChunk chunk) throws IOException {
 
         if (lastActiveFilter == -1)
-            return inputStreamInputBuffer.doRead(chunk, req);
+            return inputStreamInputBuffer.doRead(chunk);
         else
-            return activeFilters[lastActiveFilter].doRead(chunk,req);
+            return activeFilters[lastActiveFilter].doRead(chunk);
 
     }
 
@@ -1050,8 +1050,7 @@ public class Http11InputBuffer implements InputBuffer {
          * Read bytes into the specified chunk.
          */
         @Override
-        public int doRead(ByteChunk chunk, Request req )
-            throws IOException {
+        public int doRead(ByteChunk chunk) throws IOException {
 
             if (pos >= lastValid) {
                 // The application is reading the HTTP request body which is

==================================================
BufferedInputFilter.java
index 2fc2f7a504..e5b5067bb6 100644
--- a/java/org/apache/coyote/http11/InputFilter.java
+++ b/java/org/apache/coyote/http11/InputFilter.java
@@ -37,8 +37,7 @@ public interface InputFilter extends InputBuffer {
      * @return Number of bytes read.
      */
     @Override
-    public int doRead(ByteChunk chunk, Request unused)
-        throws IOException;
+    public int doRead(ByteChunk chunk) throws IOException;
 
 
     /**

==================================================
ChunkedInputFilter.java
index ebdfb9230d..8f5d93466e 100644
--- a/java/org/apache/coyote/http11/filters/BufferedInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/BufferedInputFilter.java
@@ -80,7 +80,7 @@ public class BufferedInputFilter implements InputFilter {
     public void setRequest(Request request) {
         // save off the Request body
         try {
-            while (buffer.doRead(tempRead, request) >= 0) {
+            while (buffer.doRead(tempRead) >= 0) {
                 buffered.append(tempRead);
                 tempRead.recycle();
             }
@@ -95,7 +95,7 @@ public class BufferedInputFilter implements InputFilter {
      * Fills the given ByteChunk with the buffered request body.
      */
     @Override
-    public int doRead(ByteChunk chunk, Request request) throws IOException {
+    public int doRead(ByteChunk chunk) throws IOException {
         if (hasRead || buffered.getLength() <= 0) {
             return -1;
         }

==================================================
IdentityInputFilter.java
index 0b2b799090..6f50a61b7b 100644
--- a/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java
@@ -174,7 +174,7 @@ public class ChunkedInputFilter implements InputFilter {
      * control, the returned value should be -1.
      */
     @Override
-    public int doRead(ByteChunk chunk, Request req) throws IOException {
+    public int doRead(ByteChunk chunk) throws IOException {
         if (endChunk) {
             return -1;
         }
@@ -247,7 +247,7 @@ public class ChunkedInputFilter implements InputFilter {
         long swallowed = 0;
         int read = 0;
         // Consume extra bytes : parse the stream until the end chunk is found
-        while ((read = doRead(readChunk, null)) >= 0) {
+        while ((read = doRead(readChunk)) >= 0) {
             swallowed += read;
             if (maxSwallowSize > -1 && swallowed > maxSwallowSize) {
                 throwIOException(sm.getString("inputFilter.maxSwallow"));
@@ -317,7 +317,7 @@ public class ChunkedInputFilter implements InputFilter {
      */
     protected int readBytes() throws IOException {
 
-        int nRead = buffer.doRead(readChunk, null);
+        int nRead = buffer.doRead(readChunk);
         pos = readChunk.getStart();
         lastValid = pos + nRead;
         buf = readChunk.getBytes();

==================================================
SavedRequestInputFilter.java
index 68be923642..9bdb98a270 100644
--- a/java/org/apache/coyote/http11/filters/IdentityInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/IdentityInputFilter.java
@@ -100,14 +100,13 @@ public class IdentityInputFilter implements InputFilter {
      * control, the returned value should be -1.
      */
     @Override
-    public int doRead(ByteChunk chunk, Request req)
-        throws IOException {
+    public int doRead(ByteChunk chunk) throws IOException {
 
         int result = -1;
 
         if (contentLength >= 0) {
             if (remaining > 0) {
-                int nRead = buffer.doRead(chunk, req);
+                int nRead = buffer.doRead(chunk);
                 if (nRead > remaining) {
                     // The chunk is longer than the number of bytes remaining
                     // in the body; changing the chunk length to the number
@@ -156,7 +155,7 @@ public class IdentityInputFilter implements InputFilter {
         // Consume extra bytes.
         while (remaining > 0) {
 
-            int nread = buffer.doRead(endChunk, null);
+            int nread = buffer.doRead(endChunk);
             if (nread > 0 ) {
                 swallowed += nread;
                 remaining = remaining - nread;

==================================================
VoidInputFilter.java
index 814dbe3cca..6f7cc65429 100644
--- a/java/org/apache/coyote/http11/filters/SavedRequestInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/SavedRequestInputFilter.java
@@ -47,8 +47,7 @@ public class SavedRequestInputFilter implements InputFilter {
      * Read bytes.
      */
     @Override
-    public int doRead(ByteChunk chunk, org.apache.coyote.Request request)
-            throws IOException {
+    public int doRead(ByteChunk chunk) throws IOException {
         if(input.getOffset()>= input.getEnd())
             return -1;
 

==================================================
SpdyProcessor.java
index 9889ade630..43fcd537d3 100644
--- a/java/org/apache/coyote/http11/filters/VoidInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/VoidInputFilter.java
@@ -55,7 +55,7 @@ public class VoidInputFilter implements InputFilter {
      * @return number of bytes written by the filter
      */
     @Override
-    public int doRead(ByteChunk chunk, Request req) throws IOException {
+    public int doRead(ByteChunk chunk) throws IOException {
         return -1;
     }
 

==================================================
