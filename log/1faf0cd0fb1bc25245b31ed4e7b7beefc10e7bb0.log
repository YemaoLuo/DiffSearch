1faf0cd0fb1bc25245b31ed4e7b7beefc10e7bb0
==================================================
Implement a workaround that prevents container threads from entering an indefinite wait() if an application performs an illegal blocking I/O operation 
==================================================
Mark Thomas
==================================================
Mon Aug 20 21:27:10 2018 +0000
==================================================
Stream.java
Implement a workaround that prevents container threads from entering an indefinite wait() if an application performs an illegal blocking I/O operation 

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1838492 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestAsyncFlush.java
index 6d92c07a43..df267ebd7b 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -868,7 +868,16 @@ class Stream extends AbstractStream implements HeaderEmitter {
 
         @Override
         public void flush() throws IOException {
-            flush(true);
+            /*
+             * This method should only be called during blocking I/O. All the
+             * Servlet API calls that end up here are illegal during
+             * non-blocking I/O. Servlet 5.4.
+             * However, the wording Servlet specification states that the
+             * behaviour is undefined so we do the best we can which is to
+             * perform a flush using blocking I/O or non-blocking I/O based
+             * depending which is currently in use.
+             */
+            flush(getCoyoteResponse().getWriteListener() == null);
         }
 
         @Override

==================================================
