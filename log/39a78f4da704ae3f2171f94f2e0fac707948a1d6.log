39a78f4da704ae3f2171f94f2e0fac707948a1d6
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48149
==================================================
Mark Emlyn
==================================================
Tue Nov 17 22:33:58 2009 +0000
==================================================
ActionCode.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48149
Correct JavaDoc typos. Patch provided by gingyang.xu

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@881578 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ProtocolHandler.java
index 642863646b..8650f33397 100644
--- a/java/org/apache/coyote/ActionCode.java
+++ b/java/org/apache/coyote/ActionCode.java
@@ -191,7 +191,7 @@ public final class ActionCode {
         this.code=code;
     }
 
-    /** Action id, useable in switches and table indexes
+    /** Action id, usable in switches and table indexes
      */
     public int getCode() {
         return code;

==================================================
Request.java
index d2b392c5b6..bf17bea8fb 100644
--- a/java/org/apache/coyote/ProtocolHandler.java
+++ b/java/org/apache/coyote/ProtocolHandler.java
@@ -25,8 +25,8 @@ import java.util.Iterator;
  * Processor is single threaded and specific to stream-based protocols,
  * will not fit Jk protocols like JNI.
  *
- * This is the main interface to be implemented by a coyoute connector.
- * Adapter is the main interface to be impleneted by a coyote servlet container.
+ * This is the main interface to be implemented by a coyote connector.
+ * Adapter is the main interface to be implemented by a coyote servlet container.
  *
  * @author Remy Maucherat
  * @author Costin Manolache

==================================================
RequestGroupInfo.java
index ebadf5f841..f9fdec836e 100644
--- a/java/org/apache/coyote/Request.java
+++ b/java/org/apache/coyote/Request.java
@@ -140,7 +140,7 @@ public final class Request {
     private ActionHook hook;
 
     private int bytesRead=0;
-    // Time of the request - usefull to avoid repeated calls to System.currentTime
+    // Time of the request - useful to avoid repeated calls to System.currentTime
     private long startTime = 0L;
     private int available = 0;
 
@@ -149,9 +149,9 @@ public final class Request {
 
 
     /**
-     * Get the instance id (or JVM route). Curently Ajp is sending it with each
+     * Get the instance id (or JVM route). Currently Ajp is sending it with each
      * request. In future this should be fixed, and sent only once ( or
-     * 'negociated' at config time so both tomcat and apache share the same name.
+     * 'negotiated' at config time so both tomcat and apache share the same name.
      * 
      * @return the instance id
      */

==================================================
RequestInfo.java
index f0625e29f6..a90a6c3e0a 100644
--- a/java/org/apache/coyote/RequestGroupInfo.java
+++ b/java/org/apache/coyote/RequestGroupInfo.java
@@ -20,7 +20,7 @@ package org.apache.coyote;
 import java.util.ArrayList;
 
 /** This can be moved to top level ( eventually with a better name ).
- *  It is currently used only as a JMX artifact, to agregate the data
+ *  It is currently used only as a JMX artifact, to aggregate the data
  *  collected from each RequestProcessor thread.
  */
 public class RequestGroupInfo {

==================================================
Response.java
index ce45d589a4..15c3407218 100644
--- a/java/org/apache/coyote/RequestInfo.java
+++ b/java/org/apache/coyote/RequestInfo.java
@@ -23,7 +23,7 @@ import javax.management.ObjectName;
 /**
  * Structure holding the Request and Response objects. It also holds statistical
  * informations about request processing and provide management informations
- * about the requests beeing processed.
+ * about the requests being processed.
  *
  * Each thread uses a Request/Response pair that is recycled on each request.
  * This object provides a place to collect global low-level statistics - without
@@ -68,7 +68,7 @@ public class RequestInfo  {
     ObjectName rpName;
 
     // -------------------- Information about the current request  -----------
-    // This is usefull for long-running requests only
+    // This is useful for long-running requests only
 
     public String getMethod() {
         return req.method().toString();

==================================================
AjpAprProcessor.java
index ccc6678e9a..12a7ef1bd8 100644
--- a/java/org/apache/coyote/Response.java
+++ b/java/org/apache/coyote/Response.java
@@ -389,7 +389,7 @@ public final class Response {
     }
 
     /**
-     * Called explicitely by user to set the Content-Language and
+     * Called explicitly by user to set the Content-Language and
      * the default encoding
      */
     public void setLocale(Locale locale) {
@@ -427,7 +427,7 @@ public final class Response {
      * of the response. This method must be called prior to writing output
      * using getWriter().
      *
-     * @param charset String containing the name of the chararacter encoding.
+     * @param charset String containing the name of the character encoding.
      */
     public void setCharacterEncoding(String charset) {
 

==================================================
AjpAprProtocol.java
index d8319bb07a..e3924e5e3c 100644
--- a/java/org/apache/coyote/ajp/AjpAprProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpAprProcessor.java
@@ -1295,7 +1295,7 @@ public class AjpAprProcessor implements ActionHook {
             }
 
             int len = chunk.getLength();
-            // 4 - hardcoded, byte[] marshalling overhead
+            // 4 - hardcoded, byte[] marshaling overhead
             // Adjust allowed size if packetSize != default (Constants.MAX_PACKET_SIZE)
             int chunkSize = Constants.MAX_SEND_SIZE + packetSize - Constants.MAX_PACKET_SIZE;
             int off = 0;

==================================================
AjpProcessor.java
index f941193589..5f4e80dbe1 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -99,7 +99,7 @@ public class AjpAprProtocol
 
 
     /**
-     * Adapter which will process the requests recieved by this endpoint.
+     * Adapter which will process the requests received by this endpoint.
      */
     private Adapter adapter;
     

==================================================
AjpProtocol.java
index 2bd9e8243e..198522fd54 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -1233,7 +1233,7 @@ public class AjpProcessor implements ActionHook {
             }
 
             int len = chunk.getLength();
-            // 4 - hardcoded, byte[] marshalling overhead
+            // 4 - hardcoded, byte[] marshaling overhead
             // Adjust allowed size if packetSize != default (Constants.MAX_PACKET_SIZE)
             int chunkSize = Constants.MAX_SEND_SIZE + packetSize - Constants.MAX_PACKET_SIZE;
             int off = 0;

==================================================
AbstractHttp11Processor.java
index 5489680bf7..1f2df99f25 100644
--- a/java/org/apache/coyote/ajp/AjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpProtocol.java
@@ -100,7 +100,7 @@ public class AjpProtocol
 
 
     /**
-     * Adapter which will process the requests recieved by this endpoint.
+     * Adapter which will process the requests received by this endpoint.
      */
     private Adapter adapter;
     

==================================================
AbstractInputBuffer.java
index e1907cebaf..e3592926e8 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -94,7 +94,7 @@ public class AbstractHttp11Processor {
 
 
     /**
-     * Content delimitator for the request (if false, the connection will
+     * Content delimiter for the request (if false, the connection will
      * be closed at the end of the request).
      */
     protected boolean contentDelimitation = true;
@@ -179,7 +179,7 @@ public class AbstractHttp11Processor {
 
 
     /**
-     * Minimum contentsize to make compression.
+     * Minimum content size to make compression.
      */
     protected int compressionMinSize = 2048;
 
@@ -294,7 +294,7 @@ public class AbstractHttp11Processor {
     }
 
     /**
-     * Add a mime-type which will be compressable
+     * Add a mime-type which will be compressible
      * The mime-type String will be exactly matched
      * in the response mime-type header .
      *
@@ -307,7 +307,7 @@ public class AbstractHttp11Processor {
 
 
     /**
-     * Set compressable mime-type list (this method is best when used with
+     * Set compressible mime-type list (this method is best when used with
      * a large number of connectors, where it would be better to have all of
      * them referenced a single array).
      */
@@ -642,7 +642,7 @@ public class AbstractHttp11Processor {
             || (acceptEncodingMB.indexOf("gzip") == -1))
             return false;
 
-        // Check if content is not allready gzipped
+        // Check if content is not already gzipped
         MessageBytes contentEncodingMB =
             response.getMimeHeaders().getValue("Content-Encoding");
 
@@ -650,7 +650,7 @@ public class AbstractHttp11Processor {
             && (contentEncodingMB.indexOf("gzip") != -1))
             return false;
 
-        // If force mode, allways compress (test purposes only)
+        // If force mode, always compress (test purposes only)
         if (compressionLevel == 2)
            return true;
 
@@ -668,7 +668,7 @@ public class AbstractHttp11Processor {
             }
         }
 
-        // Check if suffisant len to trig the compression
+        // Check if sufficient length to trigger the compression
         long contentLength = response.getContentLengthLong();
         if ((contentLength == -1)
             || (contentLength > compressionMinSize)) {

==================================================
AbstractOutputBuffer.java
index fa947f39e7..744c2dfc0c 100644
--- a/java/org/apache/coyote/http11/AbstractInputBuffer.java
+++ b/java/org/apache/coyote/http11/AbstractInputBuffer.java
@@ -295,7 +295,7 @@ public abstract class AbstractInputBuffer implements InputBuffer{
     /**
      * End request (consumes leftover bytes).
      * 
-     * @throws IOException an undelying I/O error occured
+     * @throws IOException an underlying I/O error occurred
      */
     public void endRequest()
         throws IOException {

==================================================
Http11AprProcessor.java
index a76a9f0563..4a4716f72d 100644
--- a/java/org/apache/coyote/http11/AbstractOutputBuffer.java
+++ b/java/org/apache/coyote/http11/AbstractOutputBuffer.java
@@ -181,7 +181,7 @@ public abstract class AbstractOutputBuffer implements OutputBuffer{
      * 
      * @param chunk byte chunk
      * @return number of bytes written
-     * @throws IOException an undelying I/O error occured
+     * @throws IOException an underlying I/O error occurred
      */
     public int doWrite(ByteChunk chunk, Response res) 
         throws IOException {
@@ -208,7 +208,7 @@ public abstract class AbstractOutputBuffer implements OutputBuffer{
     /**
      * Flush the response.
      * 
-     * @throws IOException an undelying I/O error occured
+     * @throws IOException an underlying I/O error occurred
      */
     public void flush()
         throws IOException {
@@ -282,7 +282,7 @@ public abstract class AbstractOutputBuffer implements OutputBuffer{
     /**
      * End request.
      * 
-     * @throws IOException an undelying I/O error occured
+     * @throws IOException an underlying I/O error occurred
      */
     public void endRequest()
         throws IOException {
@@ -434,7 +434,7 @@ public abstract class AbstractOutputBuffer implements OutputBuffer{
     
     
     /**
-     * This method will write the contents of the specyfied message bytes 
+     * This method will write the contents of the specified message bytes 
      * buffer to the output stream, without filtering. This method is meant to
      * be used to write the response header.
      * 
@@ -456,7 +456,7 @@ public abstract class AbstractOutputBuffer implements OutputBuffer{
 
 
     /**
-     * This method will write the contents of the specyfied message bytes 
+     * This method will write the contents of the specified message bytes 
      * buffer to the output stream, without filtering. This method is meant to
      * be used to write the response header.
      * 
@@ -473,7 +473,7 @@ public abstract class AbstractOutputBuffer implements OutputBuffer{
 
 
     /**
-     * This method will write the contents of the specyfied char 
+     * This method will write the contents of the specified char 
      * buffer to the output stream, without filtering. This method is meant to
      * be used to write the response header.
      * 
@@ -502,7 +502,7 @@ public abstract class AbstractOutputBuffer implements OutputBuffer{
 
 
     /**
-     * This method will write the contents of the specyfied byte 
+     * This method will write the contents of the specified byte 
      * buffer to the output stream, without filtering. This method is meant to
      * be used to write the response header.
      * 
@@ -518,7 +518,7 @@ public abstract class AbstractOutputBuffer implements OutputBuffer{
 
 
     /**
-     * This method will write the contents of the specyfied String to the 
+     * This method will write the contents of the specified String to the 
      * output stream, without filtering. This method is meant to be used to 
      * write the response header.
      * 

==================================================
Http11NioProcessor.java
index 634ab33905..4a2c42080c 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -179,7 +179,7 @@ public class Http11AprProcessor implements ActionHook {
 
 
     /**
-     * Content delimitator for the request (if false, the connection will
+     * Content delimiter for the request (if false, the connection will
      * be closed at the end of the request).
      */
     protected boolean contentDelimitation = true;
@@ -271,7 +271,7 @@ public class Http11AprProcessor implements ActionHook {
 
 
     /**
-     * Minimum contentsize to make compression.
+     * Minimum content size to make compression.
      */
     protected int compressionMinSize = 2048;
 
@@ -412,7 +412,7 @@ public class Http11AprProcessor implements ActionHook {
     }
 
     /**
-     * Add a mime-type which will be compressable
+     * Add a mime-type which will be compressible
      * The mime-type String will be exactly matched
      * in the response mime-type header .
      *
@@ -425,7 +425,7 @@ public class Http11AprProcessor implements ActionHook {
 
 
     /**
-     * Set compressable mime-type list (this method is best when used with
+     * Set compressible mime-type list (this method is best when used with
      * a large number of connectors, where it would be better to have all of
      * them referenced a single array).
      */
@@ -435,7 +435,7 @@ public class Http11AprProcessor implements ActionHook {
 
 
     /**
-     * Set compressable mime-type list
+     * Set compressible mime-type list
      * List contains users agents separated by ',' :
      *
      * ie: "text/html,text/xml,text/plain"
@@ -975,7 +975,7 @@ public class Http11AprProcessor implements ActionHook {
 
         } else if (actionCode == ActionCode.ACTION_ACK) {
 
-            // Acknowlege request
+            // Acknowledge request
 
             // Send a 100 status back if it makes sense (response not committed
             // yet, and client specified an expectation for 100-continue)
@@ -1434,7 +1434,7 @@ public class Http11AprProcessor implements ActionHook {
 
         if (valueMB == null || valueMB.isNull()) {
             // HTTP/1.0
-            // Default is what the socket tells us. Overriden if a host is
+            // Default is what the socket tells us. Overridden if a host is
             // found/parsed
             request.setServerPort(endpoint.getPort());
             return;
@@ -1518,7 +1518,7 @@ public class Http11AprProcessor implements ActionHook {
             || (acceptEncodingMB.indexOf("gzip") == -1))
             return false;
 
-        // Check if content is not allready gzipped
+        // Check if content is not already gzipped
         MessageBytes contentEncodingMB =
             response.getMimeHeaders().getValue("Content-Encoding");
 
@@ -1526,7 +1526,7 @@ public class Http11AprProcessor implements ActionHook {
             && (contentEncodingMB.indexOf("gzip") != -1))
             return false;
 
-        // If force mode, allways compress (test purposes only)
+        // If force mode, always compress (test purposes only)
         if (compressionLevel == 2)
            return true;
 
@@ -1544,7 +1544,7 @@ public class Http11AprProcessor implements ActionHook {
             }
         }
 
-        // Check if suffisant len to trig the compression
+        // Check if sufficient length to trigger the compression
         long contentLength = response.getContentLengthLong();
         if ((contentLength == -1)
             || (contentLength > compressionMinSize)) {

==================================================
Http11Processor.java
index 98a838aa9b..d63e76e56f 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -551,7 +551,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor implements Actio
 
         } else if (actionCode == ActionCode.ACTION_ACK) {
 
-            // Acknowlege request
+            // Acknowledge request
 
             // Send a 100 status back if it makes sense (response not committed
             // yet, and client specified an expectation for 100-continue)
@@ -990,7 +990,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor implements Actio
 
         if (valueMB == null || valueMB.isNull()) {
             // HTTP/1.0
-            // Default is what the socket tells us. Overriden if a host is
+            // Default is what the socket tells us. Overridden if a host is
             // found/parsed
             request.setServerPort(endpoint.getPort());
             return;

==================================================
InternalAprInputBuffer.java
index 6d07e458e0..3be0608dbc 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -347,7 +347,7 @@ public class Http11Processor extends AbstractHttp11Processor implements ActionHo
 
         } else if (actionCode == ActionCode.ACTION_ACK) {
 
-            // Acknowlege request
+            // Acknowledge request
 
             // Send a 100 status back if it makes sense (response not committed
             // yet, and client specified an expectation for 100-continue)
@@ -945,7 +945,7 @@ public class Http11Processor extends AbstractHttp11Processor implements ActionHo
 
         if (valueMB == null || valueMB.isNull()) {
             // HTTP/1.0
-            // Default is what the socket tells us. Overriden if a host is
+            // Default is what the socket tells us. Overridden if a host is
             // found/parsed
             request.setServerPort(socket.getLocalPort());
             InetAddress localAddress = socket.getLocalAddress();

==================================================
InternalAprOutputBuffer.java
index f586f2d920..bf0e47cfd5 100644
--- a/java/org/apache/coyote/http11/InternalAprInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalAprInputBuffer.java
@@ -326,7 +326,7 @@ public class InternalAprInputBuffer implements InputBuffer {
     /**
      * End request (consumes leftover bytes).
      * 
-     * @throws IOException an undelying I/O error occured
+     * @throws IOException an underlying I/O error occurred
      */
     public void endRequest()
         throws IOException {
@@ -345,7 +345,7 @@ public class InternalAprInputBuffer implements InputBuffer {
      * using it.
      *
      * @throws IOException If an exception occurs during the underlying socket
-     * read operations, or if the given buffer is not big enough to accomodate
+     * read operations, or if the given buffer is not big enough to accommodate
      * the whole line.
      * @return true if data is properly fed; false if no data is available 
      * immediately and thread should be freed
@@ -744,7 +744,7 @@ public class InternalAprInputBuffer implements InputBuffer {
 
 
     /**
-     * Fill the internal buffer using data from the undelying input stream.
+     * Fill the internal buffer using data from the underlying input stream.
      * 
      * @return false if at end of stream
      */

==================================================
InternalInputBuffer.java
index c1269e059b..4d2c9b0b10 100644
--- a/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
@@ -258,7 +258,7 @@ public class InternalAprOutputBuffer
     /**
      * Flush the response.
      * 
-     * @throws IOException an undelying I/O error occured
+     * @throws IOException an underlying I/O error occurred
      */
     public void flush()
         throws IOException {
@@ -341,7 +341,7 @@ public class InternalAprOutputBuffer
     /**
      * End request.
      * 
-     * @throws IOException an undelying I/O error occured
+     * @throws IOException an underlying I/O error occurred
      */
     public void endRequest()
         throws IOException {
@@ -372,7 +372,7 @@ public class InternalAprOutputBuffer
 
 
     /**
-     * Send an acknoledgement.
+     * Send an acknowledgment.
      */
     public void sendAck()
         throws IOException {
@@ -503,7 +503,7 @@ public class InternalAprOutputBuffer
      * 
      * @param chunk byte chunk
      * @return number of bytes written
-     * @throws IOException an undelying I/O error occured
+     * @throws IOException an underlying I/O error occurred
      */
     public int doWrite(ByteChunk chunk, Response res) 
         throws IOException {
@@ -531,7 +531,7 @@ public class InternalAprOutputBuffer
     /**
      * Commit the response.
      * 
-     * @throws IOException an undelying I/O error occured
+     * @throws IOException an underlying I/O error occurred
      */
     protected void commit()
         throws IOException {
@@ -549,7 +549,7 @@ public class InternalAprOutputBuffer
 
 
     /**
-     * This method will write the contents of the specyfied message bytes 
+     * This method will write the contents of the specified message bytes 
      * buffer to the output stream, without filtering. This method is meant to
      * be used to write the response header.
      * 
@@ -571,7 +571,7 @@ public class InternalAprOutputBuffer
 
 
     /**
-     * This method will write the contents of the specyfied message bytes 
+     * This method will write the contents of the specified message bytes 
      * buffer to the output stream, without filtering. This method is meant to
      * be used to write the response header.
      * 
@@ -588,7 +588,7 @@ public class InternalAprOutputBuffer
 
 
     /**
-     * This method will write the contents of the specyfied char 
+     * This method will write the contents of the specified char 
      * buffer to the output stream, without filtering. This method is meant to
      * be used to write the response header.
      * 
@@ -617,7 +617,7 @@ public class InternalAprOutputBuffer
 
 
     /**
-     * This method will write the contents of the specyfied byte 
+     * This method will write the contents of the specified byte 
      * buffer to the output stream, without filtering. This method is meant to
      * be used to write the response header.
      * 
@@ -633,7 +633,7 @@ public class InternalAprOutputBuffer
 
 
     /**
-     * This method will write the contents of the specyfied String to the 
+     * This method will write the contents of the specified String to the 
      * output stream, without filtering. This method is meant to be used to 
      * write the response header.
      * 

==================================================
InternalNioInputBuffer.java
index 3b21a71d55..6a0c2bd934 100644
--- a/java/org/apache/coyote/http11/InternalInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalInputBuffer.java
@@ -69,7 +69,7 @@ public class InternalInputBuffer extends AbstractInputBuffer {
      * using it.
      *
      * @throws IOException If an exception occurs during the underlying socket
-     * read operations, or if the given buffer is not big enough to accomodate
+     * read operations, or if the given buffer is not big enough to accommodate
      * the whole line.
      */
     @Override

==================================================
InternalNioOutputBuffer.java
index a0bfaead58..a4c7fa2bd1 100644
--- a/java/org/apache/coyote/http11/InternalNioInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioInputBuffer.java
@@ -196,7 +196,7 @@ public class InternalNioInputBuffer extends AbstractInputBuffer {
      * using it.
      *
      * @throws IOException If an exception occurs during the underlying socket
-     * read operations, or if the given buffer is not big enough to accomodate
+     * read operations, or if the given buffer is not big enough to accommodate
      * the whole line.
      * @return true if data is properly fed; false if no data is available 
      * immediately and thread should be freed
@@ -346,7 +346,7 @@ public class InternalNioInputBuffer extends AbstractInputBuffer {
             while (!parsingRequestLineEol) {
                 // Read new bytes if needed
                 if (pos >= lastValid) {
-                    if (!fill(true, false)) //reques line parsing
+                    if (!fill(true, false)) //request line parsing
                         return false;
                 }
         

==================================================
InternalOutputBuffer.java
index a55974b634..07276089a3 100644
--- a/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
@@ -136,7 +136,7 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer {
     /**
      * Flush the response.
      * 
-     * @throws IOException an undelying I/O error occured
+     * @throws IOException an underlying I/O error occurred
      * 
      */
     @Override
@@ -165,7 +165,7 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer {
     /**
      * End request.
      * 
-     * @throws IOException an undelying I/O error occured
+     * @throws IOException an underlying I/O error occurred
      */
     @Override
     public void endRequest() throws IOException {
@@ -180,7 +180,7 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer {
 
 
     /** 
-     * Send an acknoledgement.
+     * Send an acknowledgment.
      */
     @Override
     public void sendAck() throws IOException {
@@ -236,7 +236,7 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer {
     /**
      * Commit the response.
      * 
-     * @throws IOException an undelying I/O error occured
+     * @throws IOException an underlying I/O error occurred
      */
     @Override
     protected void commit()

==================================================
VoidInputFilter.java
index c858c9061b..0230e2e128 100644
--- a/java/org/apache/coyote/http11/InternalOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalOutputBuffer.java
@@ -196,7 +196,7 @@ public class InternalOutputBuffer extends AbstractOutputBuffer
 
 
     /**
-     * Send an acknoledgement.
+     * Send an acknowledgment.
      */
     @Override
     public void sendAck()
@@ -215,7 +215,7 @@ public class InternalOutputBuffer extends AbstractOutputBuffer
     /**
      * Commit the response.
      * 
-     * @throws IOException an undelying I/O error occured
+     * @throws IOException an underlying I/O error occurred
      */
     @Override
     protected void commit()

==================================================
AstValue.java
index e08c59f207..5d1c0c203f 100644
--- a/java/org/apache/coyote/http11/filters/VoidInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/VoidInputFilter.java
@@ -72,7 +72,7 @@ public class VoidInputFilter implements InputFilter {
 
 
     /**
-     * Set the associated reauest.
+     * Set the associated request.
      */
     public void setRequest(Request request) {
     }

==================================================
ParseException.java
index 6291a95e61..03715229a7 100644
--- a/java/org/apache/el/parser/AstValue.java
+++ b/java/org/apache/el/parser/AstValue.java
@@ -63,7 +63,7 @@ public final class AstValue extends SimpleNode {
         // evaluate expr-a to value-a
         Object base = this.children[0].getValue(ctx);
 
-        // if our base is null (we know there are more properites to evaluate)
+        // if our base is null (we know there are more properties to evaluate)
         if (base == null) {
             throw new PropertyNotFoundException(MessageFactory.get(
                     "error.unreachable.base", this.children[0].getImage()));

==================================================
