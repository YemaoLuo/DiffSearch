7d068e36f1b454031d257001287d55c23b14963d
==================================================
Final parts of the puzzle to get APR/native to support the JSR356 WebSocket. There are a small number of Autobahn failures still. I'll look at those next.
==================================================
Mark Emlyn
==================================================
Wed Jan 16 23:43:23 2013 +0000
==================================================
Http11AprProtocol.java
Final parts of the puzzle to get APR/native to support the JSR356 WebSocket. There are a small number of Autobahn failures still. I'll look at those next.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1434500 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AprProcessor.java
index 60a96e5ade..04c8cb806e 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -340,7 +340,8 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
                 SocketWrapper<Long> socket,
                 ProtocolHandler httpUpgradeProcessor)
                 throws IOException {
-            return new AprProcessor(socket, httpUpgradeProcessor);
+            return new AprProcessor(socket, httpUpgradeProcessor,
+                    (AprEndpoint) proto.endpoint);
         }
     }
 }

==================================================
AprServletOutputStream.java
index aae257f498..f3ed27b754 100644
--- a/java/org/apache/coyote/http11/upgrade/AprProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/AprProcessor.java
@@ -19,6 +19,7 @@ package org.apache.coyote.http11.upgrade;
 import javax.servlet.http.ProtocolHandler;
 
 import org.apache.tomcat.jni.Socket;
+import org.apache.tomcat.util.net.AprEndpoint;
 import org.apache.tomcat.util.net.SocketWrapper;
 
 public class AprProcessor extends AbstractProcessor<Long> {
@@ -26,10 +27,10 @@ public class AprProcessor extends AbstractProcessor<Long> {
     private static final int INFINITE_TIMEOUT = -1;
 
     public AprProcessor(SocketWrapper<Long> wrapper,
-            ProtocolHandler httpUpgradeProcessor) {
+            ProtocolHandler httpUpgradeProcessor, AprEndpoint endpoint) {
         super(httpUpgradeProcessor,
                 new AprServletInputStream(wrapper),
-                new AprServletOutputStream(wrapper));
+                new AprServletOutputStream(wrapper, endpoint));
 
         Socket.timeoutSet(wrapper.getSocket().longValue(), INFINITE_TIMEOUT);
     }

==================================================
AprEndpoint.java
index fa21c598dd..f263dac36f 100644
--- a/java/org/apache/coyote/http11/upgrade/AprServletOutputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/AprServletOutputStream.java
@@ -22,16 +22,21 @@ import java.util.concurrent.locks.ReentrantReadWriteLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
 
 import org.apache.tomcat.jni.Socket;
+import org.apache.tomcat.jni.Status;
+import org.apache.tomcat.util.net.AprEndpoint;
 import org.apache.tomcat.util.net.SocketWrapper;
 
 public class AprServletOutputStream extends AbstractServletOutputStream {
 
+    private final AprEndpoint endpoint;
     private final SocketWrapper<Long> wrapper;
     private final long socket;
     private final Lock blockingStatusReadLock;
     private final WriteLock blockingStatusWriteLock;
 
-    public AprServletOutputStream(SocketWrapper<Long> wrapper) {
+    public AprServletOutputStream(SocketWrapper<Long> wrapper,
+            AprEndpoint endpoint) {
+        this.endpoint = endpoint;
         this.wrapper = wrapper;
         this.socket = wrapper.getSocket().longValue();
         ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
@@ -79,12 +84,20 @@ public class AprServletOutputStream extends AbstractServletOutputStream {
             }
         }
 
-        if (result < 0) {
-            throw new IOException(sm.getString("apr.write.error",
-                    Integer.valueOf(-result)));
+        if (result >= 0) {
+            if (result < len) {
+                endpoint.getPoller().add(socket, -1, false, true);
+            }
+            return result;
+        }
+        else if (-result == Status.EAGAIN) {
+            endpoint.getPoller().add(socket, -1, false, true);
+            return 0;
         }
 
-        return result;
+        throw new IOException(sm.getString("apr.write.error",
+                Integer.valueOf(-result)));
+
     }
 
     @Override

==================================================
