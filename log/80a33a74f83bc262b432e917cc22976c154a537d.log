80a33a74f83bc262b432e917cc22976c154a537d
==================================================
UCDetector
==================================================
Mark Emlyn
==================================================
Sat Feb 16 22:26:32 2013 +0000
==================================================
ASCIIReader.java
UCDetector
 - use final
 - reduce visibility
 - remove unused code

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1446966 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ParserUtils.java
index cbd00d5732..76a24cf396 100644
--- a/java/org/apache/jasper/xmlparser/ASCIIReader.java
+++ b/java/org/apache/jasper/xmlparser/ASCIIReader.java
@@ -38,10 +38,10 @@ public class ASCIIReader extends Reader {
     //
 
     /** Input stream. */
-    protected InputStream fInputStream;
+    private final InputStream fInputStream;
 
     /** Byte buffer. */
-    protected byte[] fBuffer;
+    private final byte[] fBuffer;
 
     //
     // Constructors

==================================================
SymbolTable.java
index 46d6fea925..4a1c714fd1 100644
--- a/java/org/apache/jasper/xmlparser/ParserUtils.java
+++ b/java/org/apache/jasper/xmlparser/ParserUtils.java
@@ -56,12 +56,12 @@ public class ParserUtils {
     /**
      * An error handler for use when parsing XML documents.
      */
-    static ErrorHandler errorHandler = new MyErrorHandler();
+    private static final ErrorHandler errorHandler = new MyErrorHandler();
 
     /**
      * An entity resolver for use when parsing XML documents.
      */
-    static EntityResolver entityResolver = new MyEntityResolver();
+    private static EntityResolver entityResolver = new MyEntityResolver();
 
     // Turn off for JSP 2.0 until switch over to using xschema.
     public static boolean validating = false;

==================================================
TreeNode.java
index 9c39b96a9b..4d102c93ab 100644
--- a/java/org/apache/jasper/xmlparser/SymbolTable.java
+++ b/java/org/apache/jasper/xmlparser/SymbolTable.java
@@ -58,17 +58,17 @@ public class SymbolTable {
     //
 
     /** Default table size. */
-    protected static final int TABLE_SIZE = 101;
+    private static final int TABLE_SIZE = 101;
 
     //
     // Data
     //
 
     /** Buckets. */
-    protected Entry[] fBuckets = null;
+    private final Entry[] fBuckets;
 
     // actual table size
-    protected int fTableSize;
+    private final int fTableSize;
 
     //
     // Constructors
@@ -89,37 +89,6 @@ public class SymbolTable {
     // Public methods
     //
 
-    /**
-     * Adds the specified symbol to the symbol table and returns a
-     * reference to the unique symbol. If the symbol already exists,
-     * the previous symbol reference is returned instead, in order
-     * guarantee that symbol references remain unique.
-     *
-     * @param symbol The new symbol.
-     */
-    public String addSymbol(String symbol) {
-
-        // search for identical symbol
-        int bucket = hash(symbol) % fTableSize;
-        int length = symbol.length();
-        OUTER: for (Entry entry = fBuckets[bucket]; entry != null; entry = entry.next) {
-            if (length == entry.characters.length) {
-                for (int i = 0; i < length; i++) {
-                    if (symbol.charAt(i) != entry.characters[i]) {
-                        continue OUTER;
-                    }
-                }
-                return entry.symbol;
-            }
-        }
-
-        // create new entry
-        Entry entry = new Entry(symbol, fBuckets[bucket]);
-        fBuckets[bucket] = entry;
-        return entry.symbol;
-
-    } // addSymbol(String):String
-
     /**
      * Adds the specified symbol to the symbol table and returns a
      * reference to the unique symbol. If the symbol already exists,
@@ -152,25 +121,6 @@ public class SymbolTable {
 
     } // addSymbol(char[],int,int):String
 
-    /**
-     * Returns a hashcode value for the specified symbol. The value
-     * returned by this method must be identical to the value returned
-     * by the <code>hash(char[],int,int)</code> method when called
-     * with the character array that comprises the symbol string.
-     *
-     * @param symbol The symbol to hash.
-     */
-    public int hash(String symbol) {
-
-        int code = 0;
-        int length = symbol.length();
-        for (int i = 0; i < length; i++) {
-            code = code * 37 + symbol.charAt(i);
-        }
-        return code & 0x7FFFFFF;
-
-    } // hash(String):int
-
     /**
      * Returns a hashcode value for the specified symbol information.
      * The value returned by this method must be identical to the value
@@ -192,59 +142,6 @@ public class SymbolTable {
 
     } // hash(char[],int,int):int
 
-    /**
-     * Returns true if the symbol table already contains the specified
-     * symbol.
-     *
-     * @param symbol The symbol to look for.
-     */
-    public boolean containsSymbol(String symbol) {
-
-        // search for identical symbol
-        int bucket = hash(symbol) % fTableSize;
-        int length = symbol.length();
-        OUTER: for (Entry entry = fBuckets[bucket]; entry != null; entry = entry.next) {
-            if (length == entry.characters.length) {
-                for (int i = 0; i < length; i++) {
-                    if (symbol.charAt(i) != entry.characters[i]) {
-                        continue OUTER;
-                    }
-                }
-                return true;
-            }
-        }
-
-        return false;
-
-    } // containsSymbol(String):boolean
-
-    /**
-     * Returns true if the symbol table already contains the specified
-     * symbol.
-     *
-     * @param buffer The buffer containing the symbol to look for.
-     * @param offset The offset into the buffer.
-     * @param length The length of the symbol in the buffer.
-     */
-    public boolean containsSymbol(char[] buffer, int offset, int length) {
-
-        // search for identical symbol
-        int bucket = hash(buffer, offset, length) % fTableSize;
-        OUTER: for (Entry entry = fBuckets[bucket]; entry != null; entry = entry.next) {
-            if (length == entry.characters.length) {
-                for (int i = 0; i < length; i++) {
-                    if (buffer[offset + i] != entry.characters[i]) {
-                        continue OUTER;
-                    }
-                }
-                return true;
-            }
-        }
-
-        return false;
-
-    } // containsSymbol(char[],int,int):boolean
-
     //
     // Classes
     //
@@ -253,39 +150,28 @@ public class SymbolTable {
      * This class is a symbol table entry. Each entry acts as a node
      * in a linked list.
      */
-    protected static final class Entry {
+    private static final class Entry {
 
         //
         // Data
         //
 
         /** Symbol. */
-        public String symbol;
+        private final String symbol;
 
         /**
          * Symbol characters. This information is duplicated here for
          * comparison performance.
          */
-        public char[] characters;
+        private final char[] characters;
 
         /** The next entry. */
-        public Entry next;
+        private final Entry next;
 
         //
         // Constructors
         //
 
-        /**
-         * Constructs a new entry from the specified symbol and next entry
-         * reference.
-         */
-        public Entry(String symbol, Entry next) {
-            this.symbol = symbol.intern();
-            characters = new char[symbol.length()];
-            symbol.getChars(0, characters.length, characters, 0);
-            this.next = next;
-        }
-
         /**
          * Constructs a new entry from the specified symbol information and
          * next entry reference.

==================================================
UCSReader.java
index 1823ea46b1..6379bc744e 100644
--- a/java/org/apache/jasper/xmlparser/TreeNode.java
+++ b/java/org/apache/jasper/xmlparser/TreeNode.java
@@ -68,31 +68,31 @@ public class TreeNode {
      * The attributes of this node, keyed by attribute name,
      * Instantiated only if required.
      */
-    protected HashMap<String,String> attributes = null;
+    private HashMap<String,String> attributes = null;
 
 
     /**
      * The body text associated with this node (if any).
      */
-    protected String body = null;
+    private String body = null;
 
 
     /**
      * The children of this node, instantiated only if required.
      */
-    protected ArrayList<TreeNode> children = null;
+    private ArrayList<TreeNode> children = null;
 
 
     /**
      * The name of this node.
      */
-    protected String name = null;
+    private final String name;
 
 
     /**
      * The parent node of this node.
      */
-    protected TreeNode parent = null;
+    private final TreeNode parent;
 
 
     // --------------------------------------------------------- Public Methods

==================================================
UTF8Reader.java
index dd40efee02..d5c029783b 100644
--- a/java/org/apache/jasper/xmlparser/UCSReader.java
+++ b/java/org/apache/jasper/xmlparser/UCSReader.java
@@ -42,7 +42,7 @@ public class UCSReader extends Reader {
      * since it's reasonable to surmise that the average UCS-4-encoded
      * file should be 4 times as large as the average ASCII-encoded file).
      */
-    public static final int DEFAULT_BUFFER_SIZE = 8192;
+    private static final int DEFAULT_BUFFER_SIZE = 8192;
 
     public static final short UCS2LE = 1;
     public static final short UCS2BE = 2;
@@ -54,13 +54,13 @@ public class UCSReader extends Reader {
     //
 
     /** Input stream. */
-    protected InputStream fInputStream;
+    private final InputStream fInputStream;
 
     /** Byte buffer. */
-    protected byte[] fBuffer;
+    private final byte[] fBuffer;
 
     // what kind of data we're dealing with
-    protected short fEncoding;
+    private final short fEncoding;
 
     //
     // Constructors

==================================================
XMLChar.java
index 9c4b8846a2..da8e1cfa96 100644
--- a/java/org/apache/jasper/xmlparser/UTF8Reader.java
+++ b/java/org/apache/jasper/xmlparser/UTF8Reader.java
@@ -45,13 +45,13 @@ public class UTF8Reader
     //
 
     /** Input stream. */
-    protected InputStream fInputStream;
+    private final InputStream fInputStream;
 
     /** Byte buffer. */
-    protected byte[] fBuffer;
+    private final byte[] fBuffer;
 
     /** Offset into buffer. */
-    protected int fOffset;
+    private int fOffset;
 
     /** Surrogate character. */
     private int fSurrogate = -1;

==================================================
