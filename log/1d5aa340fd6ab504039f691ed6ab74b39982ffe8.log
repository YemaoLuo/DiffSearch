1d5aa340fd6ab504039f691ed6ab74b39982ffe8
==================================================
The test now uses too much memory for the test server, so split it SSL / non SSL.
==================================================
Remy Maucherat
==================================================
Thu Mar 13 09:29:30 2014 +0000
==================================================
TestWebSocketFrameClient.java
The test now uses too much memory for the test server, so split it SSL / non SSL.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1577073 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestWebSocketFrameClientSSL.java
index 4a1ecb02b6..3b63404fe6 100644
--- a/test/org/apache/tomcat/websocket/TestWebSocketFrameClient.java
+++ b/test/org/apache/tomcat/websocket/TestWebSocketFrameClient.java
@@ -86,124 +86,4 @@ public class TestWebSocketFrameClient extends TomcatBaseTest {
         }
     }
 
-
-    @Test
-    public void testConnectToServerEndpointSSL() throws Exception {
-
-        Tomcat tomcat = getTomcatInstance();
-        // Must have a real docBase - just use temp
-        Context ctx =
-            tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                TesterFirehoseServer.Config.class.getName(), false));
-        Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
-
-        TesterSupport.initSsl(tomcat);
-
-        tomcat.start();
-
-        WebSocketContainer wsContainer =
-                ContainerProvider.getWebSocketContainer();
-        ClientEndpointConfig clientEndpointConfig =
-                ClientEndpointConfig.Builder.create().build();
-        clientEndpointConfig.getUserProperties().put(
-                WsWebSocketContainer.SSL_TRUSTSTORE_PROPERTY,
-                "test/org/apache/tomcat/util/net/ca.jks");
-        Session wsSession = wsContainer.connectToServer(
-                TesterProgrammaticEndpoint.class,
-                clientEndpointConfig,
-                new URI("wss://localhost:" + getPort() +
-                        TesterFirehoseServer.Config.PATH));
-        CountDownLatch latch =
-                new CountDownLatch(TesterFirehoseServer.MESSAGE_COUNT);
-        BasicText handler = new BasicText(latch);
-        wsSession.addMessageHandler(handler);
-        wsSession.getBasicRemote().sendText("Hello");
-
-        System.out.println("Sent Hello message, waiting for data");
-
-        // Ignore the latch result as the message count test below will tell us
-        // if the right number of messages arrived
-        handler.getLatch().await(TesterFirehoseServer.WAIT_TIME_MILLIS,
-                TimeUnit.MILLISECONDS);
-
-        Queue<String> messages = handler.getMessages();
-        Assert.assertEquals(
-                TesterFirehoseServer.MESSAGE_COUNT, messages.size());
-        for (String message : messages) {
-            Assert.assertEquals(TesterFirehoseServer.MESSAGE, message);
-        }
-    }
-
-
-    @Test
-    public void testBug56032() throws Exception {
-        // TODO Investigate options to get this test to pass with the HTTP BIO
-        //      connector.
-        if (getTomcatInstance().getConnector().getProtocol().equals(
-                "org.apache.coyote.http11.Http11Protocol")) {
-            return;
-        }
-
-        Tomcat tomcat = getTomcatInstance();
-        // Must have a real docBase - just use temp
-        Context ctx =
-            tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(new ApplicationListener(
-                TesterFirehoseServer.Config.class.getName(), false));
-        Tomcat.addServlet(ctx, "default", new DefaultServlet());
-        ctx.addServletMapping("/", "default");
-
-        TesterSupport.initSsl(tomcat);
-
-        tomcat.start();
-
-        WebSocketContainer wsContainer =
-                ContainerProvider.getWebSocketContainer();
-        ClientEndpointConfig clientEndpointConfig =
-                ClientEndpointConfig.Builder.create().build();
-        clientEndpointConfig.getUserProperties().put(
-                WsWebSocketContainer.SSL_TRUSTSTORE_PROPERTY,
-                "test/org/apache/tomcat/util/net/ca.jks");
-        Session wsSession = wsContainer.connectToServer(
-                TesterProgrammaticEndpoint.class,
-                clientEndpointConfig,
-                new URI("wss://localhost:" + getPort() +
-                        TesterFirehoseServer.Config.PATH));
-
-        // Process incoming messages very slowly
-        MessageHandler handler = new SleepingText(5000);
-        wsSession.addMessageHandler(handler);
-        wsSession.getBasicRemote().sendText("Hello");
-
-        // Wait long enough for the buffers to fill and the send to timeout
-        int count = 0;
-        int limit = TesterFirehoseServer.WAIT_TIME_MILLIS / 100;
-
-        System.out.println("Waiting for server to report an error");
-        while (TesterFirehoseServer.Endpoint.getErrorCount() == 0 && count < limit) {
-            Thread.sleep(100);
-            count ++;
-        }
-
-        if (TesterFirehoseServer.Endpoint.getErrorCount() == 0) {
-            Assert.fail("No error reported by Endpoint when timeout was expected");
-        }
-
-        // Wait up to another 10 seconds for the connection to be closed -
-        // should be a lot faster.
-        System.out.println("Waiting for connection to be closed");
-        count = 0;
-        limit = (TesterFirehoseServer.SEND_TIME_OUT_MILLIS * 2) / 100;
-        while (TesterFirehoseServer.Endpoint.getOpenConnectionCount() != 0 && count < limit) {
-            Thread.sleep(100);
-            count ++;
-        }
-
-        int openConnectionCount = TesterFirehoseServer.Endpoint.getOpenConnectionCount();
-        if (openConnectionCount != 0) {
-            Assert.fail("There are [" + openConnectionCount + "] connections still open");
-        }
-    }
 }

==================================================
