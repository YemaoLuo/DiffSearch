87bc1e5ed9f0c6945c2da931a51b0f7d94dba341
==================================================
The servletapi gives us a perfectly good constant for 'javax.servlet.context.tempdir'. Use it.
==================================================
Mark Emlyn
==================================================
Fri Jun 19 12:10:05 2009 +0000
==================================================
Globals.java
The servletapi gives us a perfectly good constant for 'javax.servlet.context.tempdir'. Use it.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@786471 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StandardContext.java
index dcfeaf42d6..2eaad85e94 100644
--- a/java/org/apache/catalina/Globals.java
+++ b/java/org/apache/catalina/Globals.java
@@ -316,15 +316,6 @@ public final class Globals {
         "org.apache.catalina.WELCOME_FILES";
 
 
-    /**
-     * The servlet context attribute under which we store a temporary
-     * working directory (as an object of type File) for use by servlets
-     * within this web application.
-     */
-    public static final String WORK_DIR_ATTR =
-        "javax.servlet.context.tempdir";
-
-
     /**
      * The master flag which controls strict servlet specification 
      * compliance.

==================================================
WebappLoader.java
index d26802bd15..2fe7346c2e 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -5122,10 +5122,10 @@ public class StandardContext
         dir.mkdirs();
 
         // Set the appropriate servlet context attribute
-        getServletContext().setAttribute(Globals.WORK_DIR_ATTR, dir);
+        getServletContext().setAttribute(ServletContext.TEMPDIR, dir);
         if (getServletContext() instanceof ApplicationContext)
             ((ApplicationContext) getServletContext()).setAttributeReadOnly
-                (Globals.WORK_DIR_ATTR);
+                (ServletContext.TEMPDIR);
 
     }
 

==================================================
HTMLManagerServlet.java
index 753b995d83..f5625a8a54 100644
--- a/java/org/apache/catalina/loader/WebappLoader.java
+++ b/java/org/apache/catalina/loader/WebappLoader.java
@@ -792,7 +792,7 @@ public class WebappLoader
 
         // Assigning permissions for the work directory
         File workDir =
-            (File) servletContext.getAttribute(Globals.WORK_DIR_ATTR);
+            (File) servletContext.getAttribute(ServletContext.TEMPDIR);
         if (workDir != null) {
             try {
                 String workDirPath = workDir.getCanonicalPath();
@@ -883,7 +883,7 @@ public class WebappLoader
         loaderRepositories=new ArrayList<String>();
         // Loading the work directory
         File workDir =
-            (File) servletContext.getAttribute(Globals.WORK_DIR_ATTR);
+            (File) servletContext.getAttribute(ServletContext.TEMPDIR);
         if (workDir == null) {
             log.info("No work dir for " + servletContext);
         }

==================================================
ManagerServlet.java
index da10eb2f04..11bd49fdd5 100644
--- a/java/org/apache/catalina/manager/HTMLManagerServlet.java
+++ b/java/org/apache/catalina/manager/HTMLManagerServlet.java
@@ -31,6 +31,8 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.TreeMap;
+
+import javax.servlet.ServletContext;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
@@ -175,7 +177,7 @@ public final class HTMLManagerServlet extends ManagerServlet {
 
         // Get the tempdir
         File tempdir = (File) getServletContext().getAttribute
-            ("javax.servlet.context.tempdir");
+            (ServletContext.TEMPDIR);
         // Set upload parameters
         upload.setSizeMax(-1);
         upload.setRepositoryPath(tempdir.getCanonicalPath());

==================================================
CGIServlet.java
index 994eb7f6c2..7403541ccf 100644
--- a/java/org/apache/catalina/manager/ManagerServlet.java
+++ b/java/org/apache/catalina/manager/ManagerServlet.java
@@ -33,6 +33,7 @@ import javax.naming.Binding;
 import javax.naming.InitialContext;
 import javax.naming.NamingEnumeration;
 import javax.naming.NamingException;
+import javax.servlet.ServletContext;
 import javax.servlet.ServletException;
 import javax.servlet.ServletInputStream;
 import javax.servlet.UnavailableException;
@@ -452,7 +453,7 @@ public class ManagerServlet
 
         // Calculate the directory into which we will be deploying applications
         versioned = (File) getServletContext().getAttribute
-            ("javax.servlet.context.tempdir");
+            (ServletContext.TEMPDIR);
 
         // Identify the appBase of the owning Host of this Context
         // (if any)

==================================================
DefaultServlet.java
index eeadcf148c..4f5a804ee7 100644
--- a/java/org/apache/catalina/servlets/CGIServlet.java
+++ b/java/org/apache/catalina/servlets/CGIServlet.java
@@ -694,7 +694,7 @@ public final class CGIServlet extends HttpServlet {
         protected void setupFromContext(ServletContext context) {
             this.context = context;
             this.webAppRootDir = context.getRealPath("/");
-            this.tmpDir = (File) context.getAttribute(Globals.WORK_DIR_ATTR);
+            this.tmpDir = (File) context.getAttribute(ServletContext.TEMPDIR);
         }
 
 

==================================================
FileStore.java
index 7a748bfbb7..9ebb68767f 100644
--- a/java/org/apache/catalina/servlets/DefaultServlet.java
+++ b/java/org/apache/catalina/servlets/DefaultServlet.java
@@ -42,6 +42,7 @@ import javax.naming.NameClassPair;
 import javax.naming.NamingEnumeration;
 import javax.naming.NamingException;
 import javax.naming.directory.DirContext;
+import javax.servlet.ServletContext;
 import javax.servlet.ServletException;
 import javax.servlet.ServletOutputStream;
 import javax.servlet.UnavailableException;
@@ -497,7 +498,7 @@ public class DefaultServlet
         // resource - create a temp. file on the local filesystem to
         // perform this operation
         File tempDir = (File) getServletContext().getAttribute
-            ("javax.servlet.context.tempdir");
+            (ServletContext.TEMPDIR);
         // Convert all '/' characters to '.' in resourcePath
         String convertedResourcePath = path.replace('/', '.');
         File contentFile = new File(tempDir, convertedResourcePath);

==================================================
StandardManager.java
index 7d571de0f5..d1c7a1d4cb 100644
--- a/java/org/apache/catalina/session/FileStore.java
+++ b/java/org/apache/catalina/session/FileStore.java
@@ -399,7 +399,7 @@ public final class FileStore extends StoreBase {
                 ServletContext servletContext =
                     ((Context) container).getServletContext();
                 File work = (File)
-                    servletContext.getAttribute(Globals.WORK_DIR_ATTR);
+                    servletContext.getAttribute(ServletContext.TEMPDIR);
                 file = new File(work, this.directory);
             } else {
                 throw new IllegalArgumentException

==================================================
AccessLogValve.java
index 78f38415a5..50be799b8d 100644
--- a/java/org/apache/catalina/session/StandardManager.java
+++ b/java/org/apache/catalina/session/StandardManager.java
@@ -742,7 +742,7 @@ public class StandardManager
                 ServletContext servletContext =
                     ((Context) container).getServletContext();
                 File tempdir = (File)
-                    servletContext.getAttribute(Globals.WORK_DIR_ATTR);
+                    servletContext.getAttribute(ServletContext.TEMPDIR);
                 if (tempdir != null)
                     file = new File(tempdir, pathname);
             }

==================================================
Constants.java
index 7df274046a..2c688f7318 100644
--- a/java/org/apache/catalina/valves/AccessLogValve.java
+++ b/java/org/apache/catalina/valves/AccessLogValve.java
@@ -690,10 +690,12 @@ public class AccessLogValve
         }
 
         // Log this message
-        if (writer != null) {
-            writer.println(message);
-            if (!buffered) {
-                writer.flush();
+        synchronized(this) {
+            if (writer != null) {
+                writer.println(message);
+                if (!buffered) {
+                    writer.flush();
+                }
             }
         }
 

==================================================
EmbeddedServletOptions.java
index 90db0035f9..d93e7b2263 100644
--- a/java/org/apache/jasper/Constants.java
+++ b/java/org/apache/jasper/Constants.java
@@ -120,7 +120,6 @@ public class Constants {
      * uses. 
      */
     public static final String INC_SERVLET_PATH = "javax.servlet.include.servlet_path";
-    public static final String TMP_DIR = "javax.servlet.context.tempdir";
 
     // Must be kept in sync with org/apache/catalina/Globals.java
     public static final String ALT_DD_ATTR = 

==================================================
JspRuntimeContext.java
index d0acf40b74..f349557a5b 100644
--- a/java/org/apache/jasper/EmbeddedServletOptions.java
+++ b/java/org/apache/jasper/EmbeddedServletOptions.java
@@ -571,7 +571,7 @@ public final class EmbeddedServletOptions implements Options {
             scratchDir = new File(dir);
         } else {
             // First try the Servlet 2.2 javax.servlet.context.tempdir property
-            scratchDir = (File) context.getAttribute(Constants.TMP_DIR);
+            scratchDir = (File) context.getAttribute(ServletContext.TEMPDIR);
             if (scratchDir == null) {
                 // Not running in a Servlet 2.2 container.
                 // Try to get the JDK 1.2 java.io.tmpdir property

==================================================
TestRequest.java
index aac6c55e8f..af728b7854 100644
--- a/java/org/apache/jasper/compiler/JspRuntimeContext.java
+++ b/java/org/apache/jasper/compiler/JspRuntimeContext.java
@@ -394,16 +394,19 @@ public final class JspRuntimeContext {
                 docBase = docBase + "-";
                 permissionCollection.add(new FilePermission(docBase,"read"));
 
-                // Create a file read permission for web app tempdir (work)
-                // directory
+                // Spec says apps should have read/write for their temp
+                // directory. This is fine, as no security sensitive files, at
+                // least any that the app doesn't have full control of anyway,
+                // will be written here.
                 String workDir = options.getScratchDir().toString();
                 if (!workDir.endsWith(File.separator)){
                     permissionCollection.add
-                        (new FilePermission(workDir,"read"));
+                        (new FilePermission(workDir,"read,write"));
                     workDir = workDir + File.separator;
                 }
                 workDir = workDir + "-";
-                permissionCollection.add(new FilePermission(workDir,"read"));
+                permissionCollection.add(new FilePermission(
+                        workDir,"read,write,delete"));
 
                 // Allow the JSP to access org.apache.jasper.runtime.HttpJspBase
                 permissionCollection.add( new RuntimePermission(

==================================================
