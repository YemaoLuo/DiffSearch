56ac3dbad20786086a8a3c14ea718197124b7fd4
==================================================
Run the UCDetector and remove unused code
==================================================
Mark Emlyn
==================================================
Sat Oct 13 21:43:36 2012 +0000
==================================================
Annotations.java
Run the UCDetector and remove unused code
Some follow-up remains.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1397953 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ClassParser.java
index cc7049a51a..df4244fe2e 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Annotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Annotations.java
@@ -18,7 +18,6 @@
 package org.apache.tomcat.util.bcel.classfile;
 
 import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 
 /**
@@ -76,14 +75,4 @@ public abstract class Annotations extends Attribute {
     public AnnotationEntry[] getAnnotationEntries() {
         return annotation_table;
     }
-
-    protected void writeAnnotations(DataOutputStream dos) throws IOException {
-        if (annotation_table == null) {
-            return;
-        }
-        dos.writeShort(annotation_table.length);
-        for (int i = 0; i < annotation_table.length; i++) {
-            annotation_table[i].dump(dos);
-        }
-    }
 }

==================================================
CodeException.java
index 5cd1e09276..99e60b4f22 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
@@ -117,8 +117,7 @@ public final class ClassParser {
 
         // Return the information we have gathered in a new object
         return new JavaClass(class_name_index, superclass_name_index,
-                access_flags, constant_pool, interfaces, fields, methods,
-                attributes);
+                access_flags, constant_pool, interfaces, attributes);
     }
 
 

==================================================
ConstantInvokeDynamic.java
index 750f9309f1..d8584b16fd 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/CodeException.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/CodeException.java
@@ -18,7 +18,6 @@
 package org.apache.tomcat.util.bcel.classfile;
 
 import java.io.DataInput;
-import java.io.DataOutputStream;
 import java.io.IOException;
 import java.io.Serializable;
 
@@ -36,15 +35,6 @@ import org.apache.tomcat.util.bcel.Constants;
 public final class CodeException implements Cloneable, Constants, Serializable {
 
     private static final long serialVersionUID = -6351674720658890686L;
-    private int start_pc; // Range in the code the exception handler is
-    private int end_pc; // active. start_pc is inclusive, end_pc exclusive
-    private int handler_pc; /* Starting address of exception handler, i.e.,
-     * an offset from start of code.
-     */
-    private int catch_type; /* If this is zero the handler catches any
-     * exception, otherwise it points to the
-     * exception class which is to be caught.
-     */
 
 
     /**
@@ -58,35 +48,7 @@ public final class CodeException implements Cloneable, Constants, Serializable {
     }
 
 
-    /**
-     * @param start_pc Range in the code the exception handler is active,
-     * start_pc is inclusive while
-     * @param end_pc is exclusive
-     * @param handler_pc Starting address of exception handler, i.e.,
-     * an offset from start of code.
-     * @param catch_type If zero the handler catches any
-     * exception, otherwise it points to the exception class which is
-     * to be caught.
-     */
     public CodeException(int start_pc, int end_pc, int handler_pc, int catch_type) {
-        this.start_pc = start_pc;
-        this.end_pc = end_pc;
-        this.handler_pc = handler_pc;
-        this.catch_type = catch_type;
-    }
-
-
-    /**
-     * Dump code exception to file stream in binary format.
-     *
-     * @param file Output file stream
-     * @throws IOException
-     */
-    public final void dump( DataOutputStream file ) throws IOException {
-        file.writeShort(start_pc);
-        file.writeShort(end_pc);
-        file.writeShort(handler_pc);
-        file.writeShort(catch_type);
     }
 
 

==================================================
ConstantMethodHandle.java
index c42d9d8d1f..8a2a56aacb 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantInvokeDynamic.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantInvokeDynamic.java
@@ -36,14 +36,6 @@ public final class ConstantInvokeDynamic extends Constant {
     private int name_and_type_index;
 
 
-    /**
-     * Initialize from another object.
-     */
-    public ConstantInvokeDynamic(ConstantInvokeDynamic c) {
-        this(c.getBootstrapMethodAttrIndex(), c.getNameAndTypeIndex());
-    }
-
-
     /**
      * Initialize instance from file data.
      *
@@ -68,17 +60,7 @@ public final class ConstantInvokeDynamic extends Constant {
     }
 
 
-    public void setBootstrapMethodAttrIndex(int bootstrap_method_attr_index) {
-        this.bootstrap_method_attr_index = bootstrap_method_attr_index;
-    }
-
-
     public int getNameAndTypeIndex() {
         return name_and_type_index;
     }
-
-
-    public void setNameAndTypeIndex(int name_and_type_index) {
-        this.name_and_type_index = name_and_type_index;
-    }
 }

==================================================
ConstantMethodType.java
index 1a2e467063..c14bfd6326 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantMethodHandle.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantMethodHandle.java
@@ -36,14 +36,6 @@ public final class ConstantMethodHandle extends Constant {
     private int reference_index;
 
 
-    /**
-     * Initialize from another object.
-     */
-    public ConstantMethodHandle(ConstantMethodHandle c) {
-        this(c.getReferenceKind(), c.getReferenceIndex());
-    }
-
-
     /**
      * Initialize instance from file data.
      *
@@ -67,17 +59,7 @@ public final class ConstantMethodHandle extends Constant {
     }
 
 
-    public void setReferenceKind(int reference_kind) {
-        this.reference_kind = reference_kind;
-    }
-
-
     public int getReferenceIndex() {
         return reference_index;
     }
-
-
-    public void setReferenceIndex(int reference_index) {
-        this.reference_index = reference_index;
-    }
 }

==================================================
ConstantPool.java
index 6ca1bc328a..c95cc338bc 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantMethodType.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantMethodType.java
@@ -35,14 +35,6 @@ public final class ConstantMethodType extends Constant {
     private int descriptor_index;
 
 
-    /**
-     * Initialize from another object.
-     */
-    public ConstantMethodType(ConstantMethodType c) {
-        this(c.getDescriptorIndex());
-    }
-
-
     /**
      * Initialize instance from file data.
      *
@@ -63,9 +55,4 @@ public final class ConstantMethodType extends Constant {
     public int getDescriptorIndex() {
         return descriptor_index;
     }
-
-
-    public void setDescriptorIndex(int descriptor_index) {
-        this.descriptor_index = descriptor_index;
-    }
 }

==================================================
Field.java
index 4e1cde7790..3adb606d65 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
@@ -250,12 +250,4 @@ public class ConstantPool implements Cloneable, Serializable {
         c = getConstant(i, Constants.CONSTANT_Utf8);
         return ((ConstantUtf8) c).getBytes();
     }
-
-
-    /**
-     * @return Length of constant pool.
-     */
-    public int getLength() {
-        return constant_pool_count;
-    }
 }

==================================================
InnerClass.java
index 4a9b581a5f..268171096e 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Field.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Field.java
@@ -20,7 +20,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInputStream;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
 import org.apache.tomcat.util.bcel.util.BCELComparator;
 
 /**
@@ -62,19 +61,6 @@ public final class Field extends FieldOrMethod {
     }
 
 
-    /**
-     * @return constant value associated with this field (may be null)
-     */
-    public final ConstantValue getConstantValue() {
-        for (int i = 0; i < attributes_count; i++) {
-            if (attributes[i].getTag() == Constants.ATTR_CONSTANT_VALUE) {
-                return (ConstantValue) attributes[i];
-            }
-        }
-        return null;
-    }
-
-
     /**
      * Return value as defined by given BCELComparator strategy.
      * By default two Field objects are said to be equal when

==================================================
JavaClass.java
index da5915b256..e8671c6444 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/InnerClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/InnerClass.java
@@ -18,7 +18,6 @@
 package org.apache.tomcat.util.bcel.classfile;
 
 import java.io.DataInput;
-import java.io.DataOutputStream;
 import java.io.IOException;
 import java.io.Serializable;
 
@@ -34,11 +33,6 @@ import java.io.Serializable;
 public final class InnerClass implements Cloneable, Serializable {
 
     private static final long serialVersionUID = -4964694103982806087L;
-    private int inner_class_index;
-    private int outer_class_index;
-    private int inner_name_index;
-    private int inner_access_flags;
-
 
     /**
      * Construct object from file stream.
@@ -51,32 +45,8 @@ public final class InnerClass implements Cloneable, Serializable {
     }
 
 
-    /**
-     * @param inner_class_index Class index in constant pool of inner class
-     * @param outer_class_index Class index in constant pool of outer class
-     * @param inner_name_index  Name index in constant pool of inner class
-     * @param inner_access_flags Access flags of inner class
-     */
     public InnerClass(int inner_class_index, int outer_class_index, int inner_name_index,
             int inner_access_flags) {
-        this.inner_class_index = inner_class_index;
-        this.outer_class_index = outer_class_index;
-        this.inner_name_index = inner_name_index;
-        this.inner_access_flags = inner_access_flags;
-    }
-
-
-    /**
-     * Dump inner class attribute to file stream in binary format.
-     *
-     * @param file Output file stream
-     * @throws IOException
-     */
-    public final void dump( DataOutputStream file ) throws IOException {
-        file.writeShort(inner_class_index);
-        file.writeShort(outer_class_index);
-        file.writeShort(inner_name_index);
-        file.writeShort(inner_access_flags);
     }
 
 

==================================================
LocalVariable.java
index e466afdc24..03468c1e5c 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
@@ -76,25 +76,17 @@ public class JavaClass extends AccessFlags
      * @param access_flags Access rights defined by bit flags
      * @param constant_pool Array of constants
      * @param interfaces Implemented interfaces
-     * @param fields Class fields
-     * @param methods Class methods
      * @param attributes Class attributes
      */
     public JavaClass(int class_name_index, int superclass_name_index,
             int access_flags, ConstantPool constant_pool, int[] interfaces,
-            Field[] fields, Method[] methods, Attribute[] attributes) {
+            Attribute[] attributes) {
         if (interfaces == null) {
             interfaces = new int[0];
         }
         if (attributes == null) {
             attributes = new Attribute[0];
         }
-        if (fields == null) {
-            fields = new Field[0];
-        }
-        if (methods == null) {
-            methods = new Method[0];
-        }
         this.access_flags = access_flags;
         this.attributes = attributes;
         annotationsOutOfDate = true;
@@ -175,10 +167,6 @@ public class JavaClass extends AccessFlags
     }
 
 
-    public final boolean isSuper() {
-        return (access_flags & Constants.ACC_SUPER) != 0;
-    }
-
     /**
      * Return value as defined by given BCELComparator strategy.
      * By default two JavaClass objects are said to be equal when

==================================================
LocalVariableTable.java
index cd556de6e2..16ad44a154 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariable.java
@@ -18,7 +18,6 @@
 package org.apache.tomcat.util.bcel.classfile;
 
 import java.io.DataInput;
-import java.io.DataOutputStream;
 import java.io.IOException;
 import java.io.Serializable;
 
@@ -35,14 +34,9 @@ import org.apache.tomcat.util.bcel.Constants;
 public final class LocalVariable implements Constants, Cloneable, Serializable {
 
     private static final long serialVersionUID = -914189896372081589L;
-    private int start_pc; // Range in which the variable is valid
-    private int length;
-    private int name_index; // Index in constant pool of variable name
-    private int signature_index; // Index of variable signature
     private int index; /* Variable is `index'th local variable on
      * this method's frame.
      */
-    private ConstantPool constant_pool;
 
 
     /**
@@ -56,57 +50,9 @@ public final class LocalVariable implements Constants, Cloneable, Serializable {
     }
 
 
-    /**
-     * @param start_pc Range in which the variable
-     * @param length ... is valid
-     * @param name_index Index in constant pool of variable name
-     * @param signature_index Index of variable's signature
-     * @param index Variable is `index'th local variable on the method's frame
-     * @param constant_pool Array of constants
-     */
     public LocalVariable(int start_pc, int length, int name_index, int signature_index, int index,
             ConstantPool constant_pool) {
-        this.start_pc = start_pc;
-        this.length = length;
-        this.name_index = name_index;
-        this.signature_index = signature_index;
         this.index = index;
-        this.constant_pool = constant_pool;
-    }
-
-
-    /**
-     * Dump local variable to file stream in binary format.
-     *
-     * @param file Output file stream
-     * @throws IOException
-     */
-    public final void dump( DataOutputStream file ) throws IOException {
-        file.writeShort(start_pc);
-        file.writeShort(length);
-        file.writeShort(name_index);
-        file.writeShort(signature_index);
-        file.writeShort(index);
-    }
-
-
-    /**
-     * @return Variable name.
-     */
-    public final String getName() {
-        ConstantUtf8 c;
-        c = (ConstantUtf8) constant_pool.getConstant(name_index, CONSTANT_Utf8);
-        return c.getBytes();
-    }
-
-
-    /**
-     * @return Signature.
-     */
-    public final String getSignature() {
-        ConstantUtf8 c;
-        c = (ConstantUtf8) constant_pool.getConstant(signature_index, CONSTANT_Utf8);
-        return c.getBytes();
     }
 
 

==================================================
Method.java
index 723fe835f0..56122f9a36 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTable.java
@@ -70,25 +70,6 @@ public class LocalVariableTable extends Attribute {
     }
 
 
-    /**
-     *
-     * @param index the variable slot
-     *
-     * @return the first LocalVariable that matches the slot or null if not found
-     *
-     * @deprecated since 5.2 because multiple variables can share the
-     *             same slot, use getLocalVariable(int index, int pc) instead.
-     */
-    @java.lang.Deprecated
-    public final LocalVariable getLocalVariable( int index ) {
-        for (int i = 0; i < local_variable_table_length; i++) {
-            if (local_variable_table[i].getIndex() == index) {
-                return local_variable_table[i];
-            }
-        }
-        return null;
-    }
-
     public final void setLocalVariableTable( LocalVariable[] local_variable_table ) {
         this.local_variable_table = local_variable_table;
         local_variable_table_length = (local_variable_table == null)

==================================================
PMGClass.java
index 3170f24c3c..594926daba 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Method.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Method.java
@@ -85,32 +85,6 @@ public final class Method extends FieldOrMethod {
     }
 
 
-    /**
-     * @return ExceptionTable attribute of method, if any, i.e., list all
-     * exceptions the method may throw not exception handlers!
-     */
-    public final ExceptionTable getExceptionTable() {
-        for (int i = 0; i < attributes_count; i++) {
-            if (attributes[i] instanceof ExceptionTable) {
-                return (ExceptionTable) attributes[i];
-            }
-        }
-        return null;
-    }
-
-
-    /** @return LocalVariableTable of code attribute if any, i.e. the call is forwarded
-     * to the Code atribute.
-     */
-    public final LocalVariableTable getLocalVariableTable() {
-        Code code = getCode();
-        if (code == null) {
-            return null;
-        }
-        return code.getLocalVariableTable();
-    }
-
-
     /**
      * Return value as defined by given BCELComparator strategy.
      * By default two method objects are said to be equal when

==================================================
Signature.java
index f524c57a90..f33d9fc232 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/PMGClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/PMGClass.java
@@ -65,26 +65,6 @@ public final class PMGClass extends Attribute {
     }
 
 
-    /**
-     * @return PMG name.
-     */
-    public final String getPMGName() {
-        ConstantUtf8 c = (ConstantUtf8) constant_pool.getConstant(pmg_index,
-                Constants.CONSTANT_Utf8);
-        return c.getBytes();
-    }
-
-
-    /**
-     * @return PMG class name.
-     */
-    public final String getPMGClassName() {
-        ConstantUtf8 c = (ConstantUtf8) constant_pool.getConstant(pmg_class_index,
-                Constants.CONSTANT_Utf8);
-        return c.getBytes();
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
SourceFile.java
index b9c88bed09..62fa9859b8 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Signature.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Signature.java
@@ -62,16 +62,6 @@ public final class Signature extends Attribute {
     }
 
 
-    /**
-     * @return GJ signature.
-     */
-    public final String getSignature() {
-        ConstantUtf8 c = (ConstantUtf8) constant_pool.getConstant(signature_index,
-                Constants.CONSTANT_Utf8);
-        return c.getBytes();
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
StackMapEntry.java
index b881814c96..9e12291e51 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/SourceFile.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/SourceFile.java
@@ -71,16 +71,6 @@ public final class SourceFile extends Attribute {
     }
 
 
-    /**
-     * @return Source file name.
-     */
-    public final String getSourceFileName() {
-        ConstantUtf8 c = (ConstantUtf8) constant_pool.getConstant(sourcefile_index,
-                Constants.CONSTANT_Utf8);
-        return c.getBytes();
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
StackMapTableEntry.java
index 3254cdcfb2..5c246d7b4b 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapEntry.java
@@ -18,7 +18,6 @@
 package org.apache.tomcat.util.bcel.classfile;
 
 import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 import java.io.Serializable;
 
@@ -36,59 +35,14 @@ public final class StackMapEntry implements Cloneable, Serializable {
 
     private static final long serialVersionUID = 1L;
 
-    private int byte_code_offset;
-    private int number_of_locals;
-    private StackMapType[] types_of_locals;
-    private int number_of_stack_items;
-    private StackMapType[] types_of_stack_items;
-
-
-    /**
-     * Construct object from file stream.
-     * @param file Input stream
-     * @throws IOException
-     */
     StackMapEntry(DataInputStream file) throws IOException {
         this(file.readShort(), file.readShort(), null, -1, null);
-        types_of_locals = new StackMapType[number_of_locals];
-        for (int i = 0; i < number_of_locals; i++) {
-            types_of_locals[i] = new StackMapType(file);
-        }
-        number_of_stack_items = file.readShort();
-        types_of_stack_items = new StackMapType[number_of_stack_items];
-        for (int i = 0; i < number_of_stack_items; i++) {
-            types_of_stack_items[i] = new StackMapType(file);
-        }
     }
 
 
     public StackMapEntry(int byte_code_offset, int number_of_locals,
             StackMapType[] types_of_locals, int number_of_stack_items,
             StackMapType[] types_of_stack_items) {
-        this.byte_code_offset = byte_code_offset;
-        this.number_of_locals = number_of_locals;
-        this.types_of_locals = types_of_locals;
-        this.number_of_stack_items = number_of_stack_items;
-        this.types_of_stack_items = types_of_stack_items;
-    }
-
-
-    /**
-     * Dump stack map entry
-     *
-     * @param file Output file stream
-     * @throws IOException
-     */
-    public final void dump( DataOutputStream file ) throws IOException {
-        file.writeShort(byte_code_offset);
-        file.writeShort(number_of_locals);
-        for (int i = 0; i < number_of_locals; i++) {
-            types_of_locals[i].dump(file);
-        }
-        file.writeShort(number_of_stack_items);
-        for (int i = 0; i < number_of_stack_items; i++) {
-            types_of_stack_items[i].dump(file);
-        }
     }
 
 

==================================================
Utility.java
index 9dbafb7722..4860de85e8 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapTableEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapTableEntry.java
@@ -18,12 +18,9 @@
 package org.apache.tomcat.util.bcel.classfile;
 
 import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.IOException;
 import java.io.Serializable;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 /**
  * This class represents a stack map entry recording the types of
  * local variables and the the of stack items at a given byte code offset.
@@ -38,13 +35,6 @@ public final class StackMapTableEntry implements Cloneable, Serializable {
 
     private static final long serialVersionUID = 1L;
 
-    private int frame_type;
-    private int byte_code_offset_delta;
-    private int number_of_locals;
-    private StackMapType[] types_of_locals;
-    private int number_of_stack_items;
-    private StackMapType[] types_of_stack_items;
-
 
     /**
      * Construct object from file stream.
@@ -53,99 +43,12 @@ public final class StackMapTableEntry implements Cloneable, Serializable {
      */
     StackMapTableEntry(DataInputStream file) throws IOException {
         this(file.read(), -1, -1, null, -1, null);
-
-        if (frame_type >= Constants.SAME_FRAME && frame_type <= Constants.SAME_FRAME_MAX) {
-            byte_code_offset_delta = frame_type - Constants.SAME_FRAME;
-        } else if (frame_type >= Constants.SAME_LOCALS_1_STACK_ITEM_FRAME && frame_type <= Constants.SAME_LOCALS_1_STACK_ITEM_FRAME_MAX) {
-            byte_code_offset_delta = frame_type - Constants.SAME_LOCALS_1_STACK_ITEM_FRAME;
-            number_of_stack_items = 1;
-            types_of_stack_items = new StackMapType[1];
-            types_of_stack_items[0] = new StackMapType(file);
-        } else if (frame_type == Constants.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {
-            byte_code_offset_delta = file.readShort();
-            number_of_stack_items = 1;
-            types_of_stack_items = new StackMapType[1];
-            types_of_stack_items[0] = new StackMapType(file);
-        } else if (frame_type >= Constants.CHOP_FRAME && frame_type <= Constants.CHOP_FRAME_MAX) {
-            byte_code_offset_delta = file.readShort();
-        } else if (frame_type == Constants.SAME_FRAME_EXTENDED) {
-            byte_code_offset_delta = file.readShort();
-        } else if (frame_type >= Constants.APPEND_FRAME && frame_type <= Constants.APPEND_FRAME_MAX) {
-            byte_code_offset_delta = file.readShort();
-            number_of_locals = frame_type - 251;
-            types_of_locals = new StackMapType[number_of_locals];
-            for (int i = 0; i < number_of_locals; i++) {
-                types_of_locals[i] = new StackMapType(file);
-            }
-        } else if (frame_type == Constants.FULL_FRAME) {
-            byte_code_offset_delta = file.readShort();
-            number_of_locals = file.readShort();
-            types_of_locals = new StackMapType[number_of_locals];
-            for (int i = 0; i < number_of_locals; i++) {
-                types_of_locals[i] = new StackMapType(file);
-            }
-            number_of_stack_items = file.readShort();
-            types_of_stack_items = new StackMapType[number_of_stack_items];
-            for (int i = 0; i < number_of_stack_items; i++) {
-                types_of_stack_items[i] = new StackMapType(file);
-            }
-        } else {
-            /* Can't happen */
-            throw new ClassFormatException ("Invalid frame type found while parsing stack map table: " + frame_type);
-        }
     }
 
 
     public StackMapTableEntry(int tag, int byte_code_offset_delta, int number_of_locals,
             StackMapType[] types_of_locals, int number_of_stack_items,
             StackMapType[] types_of_stack_items) {
-        this.frame_type = tag;
-        this.byte_code_offset_delta = byte_code_offset_delta;
-        this.number_of_locals = number_of_locals;
-        this.types_of_locals = types_of_locals;
-        this.number_of_stack_items = number_of_stack_items;
-        this.types_of_stack_items = types_of_stack_items;
-    }
-
-
-    /**
-     * Dump stack map entry
-     *
-     * @param file Output file stream
-     * @throws IOException
-     */
-    public final void dump( DataOutputStream file ) throws IOException {
-        file.write(frame_type);
-        if (frame_type >= Constants.SAME_FRAME && frame_type <= Constants.SAME_FRAME_MAX) {
-            // nothing to be done
-        } else if (frame_type >= Constants.SAME_LOCALS_1_STACK_ITEM_FRAME && frame_type <= Constants.SAME_LOCALS_1_STACK_ITEM_FRAME_MAX) {
-            types_of_stack_items[0].dump(file);
-        } else if (frame_type == Constants.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {
-            file.writeShort(byte_code_offset_delta);
-            types_of_stack_items[0].dump(file);
-        } else if (frame_type >= Constants.CHOP_FRAME && frame_type <= Constants.CHOP_FRAME_MAX) {
-            file.writeShort(byte_code_offset_delta);
-        } else if (frame_type == Constants.SAME_FRAME_EXTENDED) {
-            file.writeShort(byte_code_offset_delta);
-        } else if (frame_type >= Constants.APPEND_FRAME && frame_type <= Constants.APPEND_FRAME_MAX) {
-            file.writeShort(byte_code_offset_delta);
-            for (int i = 0; i < number_of_locals; i++) {
-                types_of_locals[i].dump(file);
-            }
-        } else if (frame_type == Constants.FULL_FRAME) {
-            file.writeShort(byte_code_offset_delta);
-            file.writeShort(number_of_locals);
-            for (int i = 0; i < number_of_locals; i++) {
-                types_of_locals[i].dump(file);
-            }
-            file.writeShort(number_of_stack_items);
-            for (int i = 0; i < number_of_stack_items; i++) {
-                types_of_stack_items[i].dump(file);
-            }
-        } else {
-            /* Can't happen */
-            throw new ClassFormatException ("Invalid Stack map table tag: " + frame_type);
-        }
     }
 
 

==================================================
