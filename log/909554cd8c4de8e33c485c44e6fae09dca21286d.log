909554cd8c4de8e33c485c44e6fae09dca21286d
==================================================
Add some comments to clarify behaviour.
==================================================
Mark Thomas
==================================================
Mon Apr 27 23:01:16 2015 +0000
==================================================
AstValue.java
Add some comments to clarify behaviour.
Review by schultz re object allocation

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1676393 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestMethodExpressionImpl.java
index a4f02be179..acb0d9276b 100644
--- a/java/org/apache/el/parser/AstValue.java
+++ b/java/org/apache/el/parser/AstValue.java
@@ -41,6 +41,9 @@ import org.apache.el.util.ReflectionUtil;
  */
 public final class AstValue extends SimpleNode {
 
+    private static final Object[] EMPTY_ARRAY = new Object[0];
+    private static final Object[] ARRAY_OF_SINGLE_NULL = new Object[1];
+
     protected static class Target {
         protected Object base;
 
@@ -263,7 +266,8 @@ public final class AstValue extends SimpleNode {
     private Object[] convertArgs(EvaluationContext ctx, Object[] src, Method m) {
         Class<?>[] types = m.getParameterTypes();
         if (types.length == 0) {
-            return new Object[0];
+            // Treated as if parameters have been provided so src is ignored
+            return EMPTY_ARRAY;
         }
 
         int paramCount = types.length;
@@ -271,23 +275,24 @@ public final class AstValue extends SimpleNode {
         if (m.isVarArgs() && paramCount > 1 && (src == null || paramCount > src.length) ||
                 !m.isVarArgs() && (paramCount > 0 && src == null ||
                         src != null && src.length != paramCount)) {
-            String inputParamCount = null;
+            String srcCount = null;
             if (src != null) {
-                inputParamCount = Integer.toString(src.length);
+                srcCount = Integer.toString(src.length);
             }
             String msg;
             if (m.isVarArgs()) {
                 msg = MessageFactory.get("error.invoke.tooFewParams",
-                        m.getName(), inputParamCount, Integer.toString(paramCount));
+                        m.getName(), srcCount, Integer.toString(paramCount));
             } else {
                 msg = MessageFactory.get("error.invoke.wrongParams",
-                        m.getName(), inputParamCount, Integer.toString(paramCount));
+                        m.getName(), srcCount, Integer.toString(paramCount));
             }
             throw new IllegalArgumentException(msg);
         }
 
         if (src == null) {
-            return new Object[1];
+            // Must be a varargs method with a single parameter.
+            return ARRAY_OF_SINGLE_NULL;
         }
 
         Object[] dest = new Object[paramCount];

==================================================
