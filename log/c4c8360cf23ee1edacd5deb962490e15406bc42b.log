c4c8360cf23ee1edacd5deb962490e15406bc42b
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56620
==================================================
Mark Emlyn
==================================================
Mon Jun 16 18:46:24 2014 +0000
==================================================
AbstractHttp11Processor.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56620
More general fix for incorrect request start times.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1602956 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractInputBuffer.java
index 14eefa0058..1430ceae8d 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -999,12 +999,6 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
                     response.setStatus(503);
                     setErrorState(ErrorState.CLOSE_CLEAN, null);
                 } else {
-                    // Make sure that connectors that are non-blocking during
-                    // header processing (NIO) only set the start time the first
-                    // time a request is processed.
-                    if (request.getStartTime() < 0) {
-                        request.setStartTime(System.currentTimeMillis());
-                    }
                     keptAlive = true;
                     // Set this every time in case limit has been changed via JMX
                     request.getMimeHeaders().setLimit(endpoint.getMaxHeaderCount());

==================================================
AbstractNioInputBuffer.java
index 0723adf9bd..7c01015c31 100644
--- a/java/org/apache/coyote/http11/AbstractInputBuffer.java
+++ b/java/org/apache/coyote/http11/AbstractInputBuffer.java
@@ -228,6 +228,10 @@ public abstract class AbstractInputBuffer<S> implements InputBuffer{
     }
 
 
+    /**
+     * Implementations are expected to call {@link Request#setStartTime(long)}
+     * as soon as the first byte is read from the request.
+     */
     public abstract boolean parseRequestLine(boolean useAvailableDataOnly)
         throws IOException;
 

==================================================
Http11NioProcessor.java
index 72b986ea13..1dc5763e12 100644
--- a/java/org/apache/coyote/http11/AbstractNioInputBuffer.java
+++ b/java/org/apache/coyote/http11/AbstractNioInputBuffer.java
@@ -193,6 +193,11 @@ public abstract class AbstractNioInputBuffer<S> extends AbstractInputBuffer<S> {
                         return false;
                     }
                 }
+                // Set the start time once we start reading data (even if it is
+                // just skipping blank lines)
+                if (request.getStartTime() < 0) {
+                    request.setStartTime(System.currentTimeMillis());
+                }
                 chr = buf[pos++];
             } while ((chr == Constants.CR) || (chr == Constants.LF));
             pos--;

==================================================
InternalAprInputBuffer.java
index dfc04519dc..c8d319c258 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -227,10 +227,6 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
                 socketWrapper.setTimeout(endpoint.getKeepAliveTimeout());
             }
         } else {
-            // Started to read request line.
-            if (request.getStartTime() < 0) {
-                request.setStartTime(System.currentTimeMillis());
-            }
             if (endpoint.isPaused()) {
                 // Partially processed the request so need to respond
                 response.setStatus(503);

==================================================
InternalInputBuffer.java
index fb1f487359..cf8ab1c358 100644
--- a/java/org/apache/coyote/http11/InternalAprInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalAprInputBuffer.java
@@ -140,9 +140,12 @@ public class InternalAprInputBuffer extends AbstractInputBuffer<Long> {
                 if (!fill(true))
                     throw new EOFException(sm.getString("iib.eof.error"));
             }
-
+            // Set the start time once we start reading data (even if it is
+            // just skipping blank lines)
+            if (request.getStartTime() < 0) {
+                request.setStartTime(System.currentTimeMillis());
+            }
             chr = buf[pos++];
-
         } while ((chr == Constants.CR) || (chr == Constants.LF));
 
         pos--;

==================================================
