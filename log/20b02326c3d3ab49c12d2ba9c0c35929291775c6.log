20b02326c3d3ab49c12d2ba9c0c35929291775c6
==================================================
Rename ProtocolHandler to HttpUpgradeHandler
==================================================
Mark Emlyn
==================================================
Mon Feb 11 20:24:03 2013 +0000
==================================================
HttpServletRequest.java
Rename ProtocolHandler to HttpUpgradeHandler

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1444946 13f79535-47bb-0310-9956-ffa450edef68



==================================================
HttpServletRequestWrapper.java
index cb9690f69e..7c0947ab63 100644
--- a/java/javax/servlet/http/HttpServletRequest.java
+++ b/java/javax/servlet/http/HttpServletRequest.java
@@ -501,5 +501,5 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @since Servlet 3.1
      */
-    public void upgrade(ProtocolHandler handler) throws java.io.IOException;
+    public void upgrade(HttpUpgradeHandler handler) throws java.io.IOException;
 }

==================================================
HttpUpgradeHandler.java
index 1300841092..3de21426e1 100644
--- a/java/javax/servlet/http/HttpServletRequestWrapper.java
+++ b/java/javax/servlet/http/HttpServletRequestWrapper.java
@@ -355,13 +355,13 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * {@inheritDoc}
      * <p>
      * The default behavior of this method is to return
-     * {@link HttpServletRequest#upgrade(ProtocolHandler)}
+     * {@link HttpServletRequest#upgrade(HttpUpgradeHandler)}
      * on the wrapped request object.
      *
      * @since Servlet 3.1
      */
     @Override
-    public void upgrade(ProtocolHandler handler) throws java.io.IOException {
+    public void upgrade(HttpUpgradeHandler handler) throws java.io.IOException {
         this._getHttpServletRequest().upgrade(handler);
     }
 }

==================================================
WebConnection.java
similarity index 87%
rename from java/javax/servlet/http/ProtocolHandler.java
rename to java/javax/servlet/http/HttpUpgradeHandler.java
index 7dc39d48ef..c4beb4175c 100644
--- a/java/javax/servlet/http/ProtocolHandler.java
+++ b/java/javax/servlet/http/HttpUpgradeHandler.java
@@ -21,13 +21,13 @@ package javax.servlet.http;
  *
  * @since Servlet 3.1
  */
-public interface ProtocolHandler {
+public interface HttpUpgradeHandler {
 
     /**
      * This method is called once the request/response pair where
-     * {@link HttpServletRequest#upgrade(ProtocolHandler)} is called has
+     * {@link HttpServletRequest#upgrade(HttpUpgradeHandler)} is called has
      * completed processing and is the point where control of the connection
-     * passes from the container to the {@link ProtocolHandler}.
+     * passes from the container to the {@link HttpUpgradeHandler}.
      *
      * @param connection    The connection that has been upgraded
      *

==================================================
Request.java
index 917281f15f..c7142c57cf 100644
--- a/java/javax/servlet/http/WebConnection.java
+++ b/java/javax/servlet/http/WebConnection.java
@@ -22,7 +22,7 @@ import javax.servlet.ServletInputStream;
 import javax.servlet.ServletOutputStream;
 
 /**
- * The interface used by a {@link ProtocolHandler} to interact with an upgraded
+ * The interface used by a {@link HttpUpgradeHandler} to interact with an upgraded
  * HTTP connection.
  *
  * @since Servlet 3.1

==================================================
RequestFacade.java
index dacdb36a5f..4bcf6ecc84 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -58,8 +58,8 @@ import javax.servlet.http.Cookie;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpSession;
+import javax.servlet.http.HttpUpgradeHandler;
 import javax.servlet.http.Part;
-import javax.servlet.http.ProtocolHandler;
 
 import org.apache.catalina.Context;
 import org.apache.catalina.Globals;
@@ -1884,7 +1884,7 @@ public class Request
      * @since Servlet 3.1
      */
     @Override
-    public void upgrade(ProtocolHandler handler) throws IOException {
+    public void upgrade(HttpUpgradeHandler handler) throws IOException {
         coyoteRequest.action(ActionCode.UPGRADE, handler);
 
         // Output required by RFC2616. Protocol specific headers should have

==================================================
StreamHandler.java
index 7030c8c3ae..5692befed5 100644
--- a/java/org/apache/catalina/connector/RequestFacade.java
+++ b/java/org/apache/catalina/connector/RequestFacade.java
@@ -37,8 +37,8 @@ import javax.servlet.http.Cookie;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpSession;
+import javax.servlet.http.HttpUpgradeHandler;
 import javax.servlet.http.Part;
-import javax.servlet.http.ProtocolHandler;
 
 import org.apache.catalina.Globals;
 import org.apache.catalina.security.SecurityUtil;
@@ -1102,7 +1102,7 @@ public class RequestFacade implements HttpServletRequest {
      * @since Servlet 3.1
      */
     @Override
-    public void upgrade(ProtocolHandler handler) throws IOException {
+    public void upgrade(HttpUpgradeHandler handler) throws IOException {
         request.upgrade(handler);
     }
 }

==================================================
WebSocketServlet.java
index b3f6c177ce..34104cac83 100644
--- a/java/org/apache/catalina/websocket/StreamHandler.java
+++ b/java/org/apache/catalina/websocket/StreamHandler.java
@@ -24,7 +24,7 @@ import java.nio.ByteBuffer;
 import java.nio.charset.MalformedInputException;
 import java.nio.charset.UnmappableCharacterException;
 
-import javax.servlet.http.ProtocolHandler;
+import javax.servlet.http.HttpUpgradeHandler;
 import javax.servlet.http.WebConnection;
 
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
@@ -35,7 +35,7 @@ import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
  * specific functionality. Applications that wish to operate on a message basis
  * rather than a stream basis should use {@link MessageHandler}.
  */
-public abstract class StreamHandler implements ProtocolHandler {
+public abstract class StreamHandler implements HttpUpgradeHandler {
 
     private final ClassLoader applicationClassLoader;
     private WsOutbound outbound;

==================================================
WsHttpServletRequestWrapper.java
index 137832dba4..33f9ed67dc 100644
--- a/java/org/apache/catalina/websocket/WebSocketServlet.java
+++ b/java/org/apache/catalina/websocket/WebSocketServlet.java
@@ -30,7 +30,7 @@ import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import javax.servlet.http.ProtocolHandler;
+import javax.servlet.http.HttpUpgradeHandler;
 
 import org.apache.catalina.util.Base64;
 import org.apache.tomcat.util.buf.B2CConverter;
@@ -113,7 +113,7 @@ public abstract class WebSocketServlet extends HttpServlet {
         }
 
         WsHttpServletRequestWrapper wrapper = new WsHttpServletRequestWrapper(req);
-        ProtocolHandler wsHandler =
+        HttpUpgradeHandler wsHandler =
                 createWebSocketHandler(subProtocol, wrapper);
         wrapper.invalidate();
 
@@ -228,6 +228,6 @@ public abstract class WebSocketServlet extends HttpServlet {
      *                      method. If Tomcat detects such access, it will throw
      *                      an IllegalStateException
      */
-    protected abstract ProtocolHandler createWebSocketHandler(
+    protected abstract HttpUpgradeHandler createWebSocketHandler(
             String subProtocol, HttpServletRequest request);
 }

==================================================
AbstractProcessor.java
index 772ba2cfd0..4eed65b43e 100644
--- a/java/org/apache/catalina/websocket/WsHttpServletRequestWrapper.java
+++ b/java/org/apache/catalina/websocket/WsHttpServletRequestWrapper.java
@@ -37,8 +37,8 @@ import javax.servlet.http.Cookie;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpSession;
+import javax.servlet.http.HttpUpgradeHandler;
 import javax.servlet.http.Part;
-import javax.servlet.http.ProtocolHandler;
 
 import org.apache.tomcat.util.res.StringManager;
 
@@ -409,7 +409,7 @@ public class WsHttpServletRequestWrapper implements HttpServletRequest {
     }
 
     @Override
-    public void upgrade(ProtocolHandler handler) throws IOException {
+    public void upgrade(HttpUpgradeHandler handler) throws IOException {
         getRequest().upgrade(handler);
     }
 }

==================================================
AbstractProtocol.java
index 6db7f4028e..277b095a46 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -154,5 +154,5 @@ public abstract class AbstractProcessor<S> implements ActionHook, Processor<S> {
             throws IOException;
 
     @Override
-    public abstract javax.servlet.http.ProtocolHandler getHttpUpgradeHandler();
+    public abstract javax.servlet.http.HttpUpgradeHandler getHttpUpgradeHandler();
 }

==================================================
Processor.java
index 3b196113ba..62d5ed993f 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -626,7 +626,7 @@ public abstract class AbstractProtocol implements ProtocolHandler,
 
                     if (state == SocketState.UPGRADING) {
                         // Get the HTTP upgrade handler
-                        javax.servlet.http.ProtocolHandler httpUpgradeHandler =
+                        javax.servlet.http.HttpUpgradeHandler httpUpgradeHandler =
                                 processor.getHttpUpgradeHandler();
                         // Release the Http11 processor to be re-used
                         release(wrapper, processor, false, false);
@@ -720,7 +720,7 @@ public abstract class AbstractProtocol implements ProtocolHandler,
                 boolean addToPoller);
         protected abstract Processor<S> createUpgradeProcessor(
                 SocketWrapper<S> socket,
-                javax.servlet.http.ProtocolHandler httpUpgradeProcessor)
+                javax.servlet.http.HttpUpgradeHandler httpUpgradeProcessor)
                         throws IOException;
 
         protected void register(AbstractProcessor<S> processor) {

==================================================
AbstractAjpProcessor.java
index ffeb32d871..4eda40b372 100644
--- a/java/org/apache/coyote/Processor.java
+++ b/java/org/apache/coyote/Processor.java
@@ -38,7 +38,7 @@ public interface Processor<S> {
     SocketState asyncDispatch(SocketStatus status);
     SocketState asyncPostProcess();
 
-    javax.servlet.http.ProtocolHandler getHttpUpgradeHandler();
+    javax.servlet.http.HttpUpgradeHandler getHttpUpgradeHandler();
     SocketState upgradeDispatch(SocketStatus status) throws IOException;
 
     boolean isComet();

==================================================
AbstractAjpProtocol.java
index 1b58d4cab1..f044be4228 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
@@ -25,7 +25,7 @@ import java.security.cert.CertificateFactory;
 import java.security.cert.X509Certificate;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-import javax.servlet.http.ProtocolHandler;
+import javax.servlet.http.HttpUpgradeHandler;
 
 import org.apache.coyote.AbstractProcessor;
 import org.apache.coyote.ActionCode;
@@ -537,7 +537,7 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
 
 
     @Override
-    public ProtocolHandler getHttpUpgradeHandler() {
+    public HttpUpgradeHandler getHttpUpgradeHandler() {
         // Should never reach this code but in case we do...
         throw new IllegalStateException(
                 sm.getString("ajpprocessor.httpupgrade.notsupported"));

==================================================
AbstractHttp11Processor.java
index b912d935c0..88f94f5dfa 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -16,7 +16,7 @@
  */
 package org.apache.coyote.ajp;
 
-import javax.servlet.http.ProtocolHandler;
+import javax.servlet.http.HttpUpgradeHandler;
 
 import org.apache.coyote.AbstractProtocol;
 import org.apache.coyote.Processor;
@@ -92,7 +92,7 @@ public abstract class AbstractAjpProtocol extends AbstractProtocol {
 
         @Override
         protected P createUpgradeProcessor(SocketWrapper<S> socket,
-                ProtocolHandler httpUpgradeHandler) {
+                HttpUpgradeHandler httpUpgradeHandler) {
             // TODO should fail - throw IOE
             return null;
         }

==================================================
Http11AprProtocol.java
index 55dd434e33..1bade08666 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -23,7 +23,7 @@ import java.util.StringTokenizer;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.regex.Pattern;
 
-import javax.servlet.http.ProtocolHandler;
+import javax.servlet.http.HttpUpgradeHandler;
 
 import org.apache.coyote.AbstractProcessor;
 import org.apache.coyote.ActionCode;
@@ -223,7 +223,7 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
      * Instance of the new protocol to use after the HTTP connection has been
      * upgraded.
      */
-    protected ProtocolHandler httpUpgradeHandler = null;
+    protected HttpUpgradeHandler httpUpgradeHandler = null;
 
 
     public AbstractHttp11Processor(AbstractEndpoint endpoint) {
@@ -804,7 +804,7 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
         } else if (actionCode == ActionCode.ASYNC_IS_ERROR) {
             ((AtomicBoolean) param).set(asyncStateMachine.isAsyncError());
         } else if (actionCode == ActionCode.UPGRADE) {
-            httpUpgradeHandler = (ProtocolHandler) param;
+            httpUpgradeHandler = (HttpUpgradeHandler) param;
             // Stop further HTTP output
             getOutputBuffer().finished = true;
         } else {
@@ -1558,7 +1558,7 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
 
 
     @Override
-    public ProtocolHandler getHttpUpgradeHandler() {
+    public HttpUpgradeHandler getHttpUpgradeHandler() {
         return httpUpgradeHandler;
     }
 

==================================================
Http11NioProtocol.java
index 7c86bb9067..deac0f0f10 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -18,7 +18,7 @@ package org.apache.coyote.http11;
 
 import java.io.IOException;
 
-import javax.servlet.http.ProtocolHandler;
+import javax.servlet.http.HttpUpgradeHandler;
 
 import org.apache.coyote.AbstractProtocol;
 import org.apache.coyote.Processor;
@@ -341,7 +341,7 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
         @Override
         protected Processor<Long> createUpgradeProcessor(
                 SocketWrapper<Long> socket,
-                ProtocolHandler httpUpgradeProcessor)
+                HttpUpgradeHandler httpUpgradeProcessor)
                 throws IOException {
             return new AprProcessor(socket, httpUpgradeProcessor,
                     (AprEndpoint) proto.endpoint);

==================================================
Http11Protocol.java
index 61c929d536..93a0c7ec96 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -21,7 +21,7 @@ import java.nio.channels.SocketChannel;
 import java.util.Iterator;
 
 import javax.net.ssl.SSLEngine;
-import javax.servlet.http.ProtocolHandler;
+import javax.servlet.http.HttpUpgradeHandler;
 
 import org.apache.coyote.AbstractProtocol;
 import org.apache.coyote.Processor;
@@ -303,7 +303,7 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
         @Override
         protected Processor<NioChannel> createUpgradeProcessor(
                 SocketWrapper<NioChannel> socket,
-                ProtocolHandler httpUpgradeProcessor)
+                HttpUpgradeHandler httpUpgradeProcessor)
                 throws IOException {
             return new NioProcessor(socket, httpUpgradeProcessor,
                     ((Http11NioProtocol) getProtocol()).getEndpoint().getSelectorPool());

==================================================
AbstractProcessor.java
index ce5270e29b..363d0f340b 100644
--- a/java/org/apache/coyote/http11/Http11Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Protocol.java
@@ -19,7 +19,7 @@ package org.apache.coyote.http11;
 import java.io.IOException;
 import java.net.Socket;
 
-import javax.servlet.http.ProtocolHandler;
+import javax.servlet.http.HttpUpgradeHandler;
 
 import org.apache.coyote.AbstractProtocol;
 import org.apache.coyote.Processor;
@@ -210,7 +210,7 @@ public class Http11Protocol extends AbstractHttp11JsseProtocol<Socket> {
         @Override
         protected Processor<Socket> createUpgradeProcessor(
                 SocketWrapper<Socket> socket,
-                ProtocolHandler httpUpgradeProcessor)
+                HttpUpgradeHandler httpUpgradeProcessor)
                 throws IOException {
             return new BioProcessor(socket, httpUpgradeProcessor);
         }

==================================================
AprProcessor.java
index d887c9ef23..e4beee0842 100644
--- a/java/org/apache/coyote/http11/upgrade/AbstractProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/AbstractProcessor.java
@@ -21,7 +21,7 @@ import java.util.concurrent.Executor;
 
 import javax.servlet.ServletInputStream;
 import javax.servlet.ServletOutputStream;
-import javax.servlet.http.ProtocolHandler;
+import javax.servlet.http.HttpUpgradeHandler;
 import javax.servlet.http.WebConnection;
 
 import org.apache.coyote.Processor;
@@ -38,11 +38,11 @@ public abstract class AbstractProcessor<S>
     protected static final StringManager sm =
             StringManager.getManager(Constants.Package);
 
-    private final ProtocolHandler httpUpgradeHandler;
+    private final HttpUpgradeHandler httpUpgradeHandler;
     private final AbstractServletInputStream upgradeServletInputStream;
     private final AbstractServletOutputStream upgradeServletOutputStream;
 
-    protected AbstractProcessor (ProtocolHandler httpUpgradeHandler,
+    protected AbstractProcessor (HttpUpgradeHandler httpUpgradeHandler,
             AbstractServletInputStream upgradeServletInputStream,
             AbstractServletOutputStream upgradeServletOutputStream) {
         this.httpUpgradeHandler = httpUpgradeHandler;
@@ -73,7 +73,7 @@ public abstract class AbstractProcessor<S>
     }
 
     @Override
-    public ProtocolHandler getHttpUpgradeHandler() {
+    public HttpUpgradeHandler getHttpUpgradeHandler() {
         return httpUpgradeHandler;
     }
 

==================================================
BioProcessor.java
index f3ed27b754..fd510b804b 100644
--- a/java/org/apache/coyote/http11/upgrade/AprProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/AprProcessor.java
@@ -16,7 +16,7 @@
  */
 package org.apache.coyote.http11.upgrade;
 
-import javax.servlet.http.ProtocolHandler;
+import javax.servlet.http.HttpUpgradeHandler;
 
 import org.apache.tomcat.jni.Socket;
 import org.apache.tomcat.util.net.AprEndpoint;
@@ -27,7 +27,7 @@ public class AprProcessor extends AbstractProcessor<Long> {
     private static final int INFINITE_TIMEOUT = -1;
 
     public AprProcessor(SocketWrapper<Long> wrapper,
-            ProtocolHandler httpUpgradeProcessor, AprEndpoint endpoint) {
+            HttpUpgradeHandler httpUpgradeProcessor, AprEndpoint endpoint) {
         super(httpUpgradeProcessor,
                 new AprServletInputStream(wrapper),
                 new AprServletOutputStream(wrapper, endpoint));

==================================================
NioProcessor.java
index 1581c0dcd2..46495d52f3 100644
--- a/java/org/apache/coyote/http11/upgrade/BioProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/BioProcessor.java
@@ -19,7 +19,7 @@ package org.apache.coyote.http11.upgrade;
 import java.io.IOException;
 import java.net.Socket;
 
-import javax.servlet.http.ProtocolHandler;
+import javax.servlet.http.HttpUpgradeHandler;
 
 import org.apache.tomcat.util.net.SocketWrapper;
 
@@ -28,7 +28,7 @@ public class BioProcessor extends AbstractProcessor<Socket> {
     private static final int INFINITE_TIMEOUT = 0;
 
     public BioProcessor(SocketWrapper<Socket> wrapper,
-            ProtocolHandler httpUpgradeProcessor) throws IOException {
+            HttpUpgradeHandler httpUpgradeProcessor) throws IOException {
         super(httpUpgradeProcessor, new BioServletInputStream(wrapper),
                 new BioServletOutputStream(wrapper));
 

==================================================
SpdyProcessor.java
index 450259b419..51a79dc29d 100644
--- a/java/org/apache/coyote/http11/upgrade/NioProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/NioProcessor.java
@@ -16,7 +16,7 @@
  */
 package org.apache.coyote.http11.upgrade;
 
-import javax.servlet.http.ProtocolHandler;
+import javax.servlet.http.HttpUpgradeHandler;
 
 import org.apache.tomcat.util.net.NioChannel;
 import org.apache.tomcat.util.net.NioSelectorPool;
@@ -27,7 +27,7 @@ public class NioProcessor extends AbstractProcessor<NioChannel> {
     private static final int INFINITE_TIMEOUT = -1;
 
     public NioProcessor(SocketWrapper<NioChannel> wrapper,
-            ProtocolHandler httpUpgradeProcessor, NioSelectorPool pool) {
+            HttpUpgradeHandler httpUpgradeProcessor, NioSelectorPool pool) {
         super(httpUpgradeProcessor,
                 new NioServletInputStream(wrapper, pool),
                 new NioServletOutputStream(wrapper, pool));

==================================================
WsProtocolHandler.java
index f62761acc7..9fdf0f853c 100644
--- a/java/org/apache/coyote/spdy/SpdyProcessor.java
+++ b/java/org/apache/coyote/spdy/SpdyProcessor.java
@@ -22,7 +22,7 @@ import java.net.InetAddress;
 import java.util.concurrent.Executor;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-import javax.servlet.http.ProtocolHandler;
+import javax.servlet.http.HttpUpgradeHandler;
 
 import org.apache.coyote.AbstractProcessor;
 import org.apache.coyote.ActionCode;
@@ -570,7 +570,7 @@ public class SpdyProcessor extends AbstractProcessor<Object> implements
     }
 
     @Override
-    public ProtocolHandler getHttpUpgradeHandler() {
+    public HttpUpgradeHandler getHttpUpgradeHandler() {
         return null;
     }
 }

==================================================
WsServlet.java
index 41abfe5e74..c4a1084d29 100644
--- a/java/org/apache/tomcat/websocket/server/WsProtocolHandler.java
+++ b/java/org/apache/tomcat/websocket/server/WsProtocolHandler.java
@@ -23,7 +23,7 @@ import javax.servlet.ReadListener;
 import javax.servlet.ServletInputStream;
 import javax.servlet.ServletOutputStream;
 import javax.servlet.WriteListener;
-import javax.servlet.http.ProtocolHandler;
+import javax.servlet.http.HttpUpgradeHandler;
 import javax.servlet.http.WebConnection;
 import javax.websocket.CloseReason;
 import javax.websocket.CloseReason.CloseCodes;
@@ -39,7 +39,7 @@ import org.apache.tomcat.websocket.WsSession;
 /**
  * Servlet 3.1 HTTP upgrade handler for WebSocket connections.
  */
-public class WsProtocolHandler implements ProtocolHandler {
+public class WsProtocolHandler implements HttpUpgradeHandler {
 
     private static StringManager sm =
             StringManager.getManager(Constants.PACKAGE_NAME);

==================================================
TestUpgrade.java
index 04798b15c6..fef1724e38 100644
--- a/java/org/apache/tomcat/websocket/server/WsServlet.java
+++ b/java/org/apache/tomcat/websocket/server/WsServlet.java
@@ -32,7 +32,7 @@ import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import javax.servlet.http.ProtocolHandler;
+import javax.servlet.http.HttpUpgradeHandler;
 import javax.websocket.Endpoint;
 import javax.websocket.Extension;
 import javax.websocket.server.ServerEndpointConfiguration;
@@ -128,7 +128,7 @@ public class WsServlet extends HttpServlet {
         } catch (InstantiationException | IllegalAccessException e) {
             throw new ServletException(e);
         }
-        ProtocolHandler wsHandler = new WsProtocolHandler(ep, sec, sc);
+        HttpUpgradeHandler wsHandler = new WsProtocolHandler(ep, sec, sc);
         req.upgrade(wsHandler);
     }
 

==================================================
