c2d20a1e79c285cf08c325c120489d799eee337d
==================================================
- Add code to check that at least one read is made that goes down to the connector for each read event.
==================================================
Remy Maucherat
==================================================
Fri Apr 27 22:03:57 2007 +0000
==================================================
CoyoteAdapter.java
- Add code to check that at least one read is made that goes down to the connector for each read event.
- It is an error to not read bytes as long as some are reported as available.
- Generate a read event if bytes are available after processing the begin event (for API lawyers out there).
- Not tested yet, sorry. In theory, previously working code shouldn't have to be modified at all.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@533240 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InputBuffer.java
index ac0f630343..808f1c76f3 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -118,6 +118,7 @@ public class CoyoteAdapter
         if (request.getWrapper() != null) {
             
             boolean error = false;
+            boolean read = false;
             try {
                 if (status == SocketStatus.OPEN) {
                     if (response.isClosed()) {
@@ -128,6 +129,8 @@ public class CoyoteAdapter
                     } else {
                         request.getEvent().setEventType(CometEvent.EventType.READ);
                         request.getEvent().setEventSubType(null);
+                        read = true;
+                        request.resetDidRead();
                     }
                 } else if (status == SocketStatus.DISCONNECT) {
                     request.getEvent().setEventType(CometEvent.EventType.ERROR);
@@ -167,6 +170,11 @@ public class CoyoteAdapter
                 }
                 if (response.isClosed() || !request.isComet()) {
                     res.action(ActionCode.ACTION_COMET_END, null);
+                } else if (!error && read && (!request.didRead() || request.getAvailable())) {
+                    // If this was a read and not all bytes have been read, or if no data
+                    // was read from the connector, then it is an error
+                    error = true;
+                    log.error(sm.getString("coyoteAdapter.read"));
                 }
                 return (!error);
             } catch (Throwable t) {
@@ -240,8 +248,16 @@ public class CoyoteAdapter
 
                 if (request.isComet()) {
                     if (!response.isClosed() && !response.isError()) {
-                        comet = true;
-                        res.action(ActionCode.ACTION_COMET_BEGIN, null);
+                        if (request.getAvailable()) {
+                            // Invoke a read event right away if there are available bytes
+                            if (event(req, res, SocketStatus.OPEN)) {
+                                comet = true;
+                                res.action(ActionCode.ACTION_COMET_BEGIN, null);
+                            }
+                        } else {
+                            comet = true;
+                            res.action(ActionCode.ACTION_COMET_BEGIN, null);
+                        }
                     } else {
                         // Clear the filter chain, as otherwise it will not be reset elsewhere
                         // since this is a Comet request

==================================================
Request.java
index 08829e5c4a..5f17960784 100644
--- a/java/org/apache/catalina/connector/InputBuffer.java
+++ b/java/org/apache/catalina/connector/InputBuffer.java
@@ -98,6 +98,12 @@ public class InputBuffer extends Reader
     private boolean closed = false;
 
 
+    /**
+     * Flag which if a read was performed.
+     */
+    private boolean didRead = false;
+
+
     /**
      * Byte chunk used to input bytes.
      */
@@ -257,8 +263,7 @@ public class InputBuffer extends Reader
     }
 
 
-    public int available()
-        throws IOException {
+    public int available() {
         int available = 0;
         if (state == BYTE_STATE) {
             available = bb.getLength();
@@ -273,6 +278,16 @@ public class InputBuffer extends Reader
     }
 
 
+    public boolean didRead() {
+        return didRead();
+    }
+
+
+    public void resetDidRead() {
+        didRead = false;
+    }
+
+
     // ------------------------------------------------- Bytes Handling Methods
 
 
@@ -294,6 +309,7 @@ public class InputBuffer extends Reader
             return -1;
 
         state = BYTE_STATE;
+        didRead = true;
 
         int result = coyoteRequest.doRead(bb);
 

==================================================
