388ecf39a953f1312346f988384bbf5a1c90810b
==================================================
Revert r1354200. As much as I'd like to be able to unilaterally change the JSP API, I can't.
==================================================
Mark Emlyn
==================================================
Tue Jun 26 20:26:39 2012 +0000
==================================================
PageContext.java
Revert r1354200. As much as I'd like to be able to unilaterally change the JSP API, I can't.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1354208 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JspContextWrapper.java
index 4689ab9a7a..598b4f086b 100644
--- a/java/javax/servlet/jsp/PageContext.java
+++ b/java/javax/servlet/jsp/PageContext.java
@@ -216,6 +216,7 @@ public abstract class PageContext
      * @param autoFlush The value of the autoflush attribute from the page
      *     directive
      *
+     * @throws IOException during creation of JspWriter
      * @throws IllegalStateException if out not correctly initialized
      * @throws IllegalArgumentException If one of the given parameters
      *     is invalid
@@ -224,7 +225,7 @@ public abstract class PageContext
     public abstract void initialize(Servlet servlet, ServletRequest request,
         ServletResponse response, String errorPageURL, boolean needsSession,
         int bufferSize, boolean autoFlush)
-        throws IllegalStateException, IllegalArgumentException;
+        throws IOException, IllegalStateException, IllegalArgumentException;
 
     /**
      * <p>

==================================================
JspFactoryImpl.java
index bc7de89a4e..b9c96ade8f 100644
--- a/java/org/apache/jasper/runtime/JspContextWrapper.java
+++ b/java/org/apache/jasper/runtime/JspContextWrapper.java
@@ -97,7 +97,7 @@ public class JspContextWrapper extends PageContext implements VariableResolver {
     public void initialize(Servlet servlet, ServletRequest request,
             ServletResponse response, String errorPageURL,
             boolean needsSession, int bufferSize, boolean autoFlush)
-            throws IllegalStateException, IllegalArgumentException {
+            throws IOException, IllegalStateException, IllegalArgumentException {
     }
 
     @Override

==================================================
PageContextImpl.java
index c5136cba70..345b25a3f7 100644
--- a/java/org/apache/jasper/runtime/JspFactoryImpl.java
+++ b/java/org/apache/jasper/runtime/JspFactoryImpl.java
@@ -29,6 +29,7 @@ import javax.servlet.jsp.JspFactory;
 import javax.servlet.jsp.PageContext;
 
 import org.apache.jasper.Constants;
+import org.apache.jasper.util.ExceptionUtils;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
@@ -93,24 +94,32 @@ public class JspFactoryImpl extends JspFactory {
     private PageContext internalGetPageContext(Servlet servlet, ServletRequest request,
             ServletResponse response, String errorPageURL, boolean needsSession,
             int bufferSize, boolean autoflush) {
-
-        PageContext pc;
-        if (USE_POOL) {
-            PageContextPool pool = localPool.get();
-            if (pool == null) {
-                pool = new PageContextPool();
-                localPool.set(pool);
-            }
-            pc = pool.get();
-            if (pc == null) {
+        try {
+            PageContext pc;
+            if (USE_POOL) {
+                PageContextPool pool = localPool.get();
+                if (pool == null) {
+                    pool = new PageContextPool();
+                    localPool.set(pool);
+                }
+                pc = pool.get();
+                if (pc == null) {
+                    pc = new PageContextImpl();
+                }
+            } else {
                 pc = new PageContextImpl();
             }
-        } else {
-            pc = new PageContextImpl();
+            pc.initialize(servlet, request, response, errorPageURL,
+                    needsSession, bufferSize, autoflush);
+            return pc;
+        } catch (Throwable ex) {
+            ExceptionUtils.handleThrowable(ex);
+            if (ex instanceof RuntimeException) {
+                throw (RuntimeException) ex;
+            }
+            log.fatal("Exception initializing page context", ex);
+            return null;
         }
-        pc.initialize(servlet, request, response, errorPageURL,
-                needsSession, bufferSize, autoflush);
-        return pc;
     }
 
     private void internalReleasePageContext(PageContext pc) {

==================================================
