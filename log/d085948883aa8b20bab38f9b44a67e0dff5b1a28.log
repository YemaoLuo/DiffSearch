d085948883aa8b20bab38f9b44a67e0dff5b1a28
==================================================
Fix HEAD for the non-blocking case.
==================================================
Mark Thomas
==================================================
Fri Jun 4 17:26:37 2021 +0100
==================================================
HttpServlet.java
Fix HEAD for the non-blocking case.


==================================================
TestHttpServlet.java
index e4c0d3ab75..e94c4731b5 100644
--- a/java/jakarta/servlet/http/HttpServlet.java
+++ b/java/jakarta/servlet/http/HttpServlet.java
@@ -27,12 +27,15 @@ import java.text.MessageFormat;
 import java.util.Enumeration;
 import java.util.ResourceBundle;
 
+import jakarta.servlet.AsyncEvent;
+import jakarta.servlet.AsyncListener;
 import jakarta.servlet.DispatcherType;
 import jakarta.servlet.GenericServlet;
 import jakarta.servlet.ServletException;
 import jakarta.servlet.ServletOutputStream;
 import jakarta.servlet.ServletRequest;
 import jakarta.servlet.ServletResponse;
+import jakarta.servlet.WriteListener;
 
 
 /**
@@ -113,7 +116,7 @@ public abstract class HttpServlet extends GenericServlet {
      * response, only the request header fields.
      *
      * <p>When overriding this method, read the request data,
-     * write the response headers, get the response's writer or
+     * write the response headers, get the response's noBodyWriter or
      * output stream object, and finally, write the response data.
      * It's best to include content type and encoding. When using
      * a <code>PrintWriter</code> object to return the response,
@@ -240,7 +243,11 @@ public abstract class HttpServlet extends GenericServlet {
         } else {
             NoBodyResponse response = new NoBodyResponse(resp);
             doGet(req, response);
-            response.setContentLength();
+            if (req.isAsyncStarted()) {
+                req.getAsyncContext().addListener(new NoBodyAsyncContextListener(response));
+            } else {
+                response.setContentLength();
+            }
         }
     }
 
@@ -255,7 +262,7 @@ public abstract class HttpServlet extends GenericServlet {
      * credit card numbers.
      *
      * <p>When overriding this method, read the request data,
-     * write the response headers, get the response's writer or output
+     * write the response headers, get the response's noBodyWriter or output
      * stream object, and finally, write the response data. It's best
      * to include content type and encoding. When using a
      * <code>PrintWriter</code> object to return the response, set the
@@ -810,21 +817,22 @@ public abstract class HttpServlet extends GenericServlet {
      * wrapped HTTP Servlet Response object.
      */
     private static class NoBodyResponse extends HttpServletResponseWrapper {
-        private final NoBodyOutputStream noBody;
-        private NoBodyPrintWriter writer;
+        private final NoBodyOutputStream noBodyOutputStream;
+        private ServletOutputStream originalOutputStream;
+        private NoBodyPrintWriter noBodyWriter;
         private boolean didSetContentLength;
 
         private NoBodyResponse(HttpServletResponse r) {
             super(r);
-            noBody = new NoBodyOutputStream(this);
+            noBodyOutputStream = new NoBodyOutputStream(this);
         }
 
         private void setContentLength() {
             if (!didSetContentLength) {
-                if (writer != null) {
-                    writer.flush();
+                if (noBodyWriter != null) {
+                    noBodyWriter.flush();
                 }
-                super.setContentLengthLong(noBody.getWrittenByteCount());
+                super.setContentLengthLong(noBodyOutputStream.getWrittenByteCount());
             }
         }
 
@@ -873,29 +881,31 @@ public abstract class HttpServlet extends GenericServlet {
 
         @Override
         public ServletOutputStream getOutputStream() throws IOException {
-            return noBody;
+            originalOutputStream = getResponse().getOutputStream();
+            return noBodyOutputStream;
         }
 
         @Override
         public PrintWriter getWriter() throws UnsupportedEncodingException {
 
-            if (writer == null) {
-                writer = new NoBodyPrintWriter(noBody, getCharacterEncoding());
+            if (noBodyWriter == null) {
+                noBodyWriter = new NoBodyPrintWriter(noBodyOutputStream, getCharacterEncoding());
             }
-            return writer;
+            return noBodyWriter;
         }
 
         @Override
         public void reset() {
             super.reset();
             resetBuffer();
+            originalOutputStream = null;
         }
 
         @Override
         public void resetBuffer() {
-            noBody.resetBuffer();
-            if (writer != null) {
-                writer.resetBuffer();
+            noBodyOutputStream.resetBuffer();
+            if (noBodyWriter != null) {
+                noBodyWriter.resetBuffer();
             }
         }
     }
@@ -909,11 +919,11 @@ public abstract class HttpServlet extends GenericServlet {
         private static final String LSTRING_FILE = "jakarta.servlet.http.LocalStrings";
         private static final ResourceBundle lStrings = ResourceBundle.getBundle(LSTRING_FILE);
 
-        private final HttpServletResponse response;
+        private final NoBodyResponse response;
         private boolean flushed = false;
         private long writtenByteCount = 0;
 
-        private NoBodyOutputStream(HttpServletResponse response) {
+        private NoBodyOutputStream(NoBodyResponse response) {
             this.response = response;
         }
 
@@ -950,13 +960,13 @@ public abstract class HttpServlet extends GenericServlet {
 
         @Override
         public boolean isReady() {
-            // TODO SERVLET 3.1
-            return false;
+            // Will always be ready as data is swallowed.
+            return true;
         }
 
         @Override
-        public void setWriteListener(jakarta.servlet.WriteListener listener) {
-            // TODO SERVLET 3.1
+        public void setWriteListener(WriteListener listener) {
+            response.originalOutputStream.setWriteListener(listener);
         }
 
         private void checkCommit() throws IOException {
@@ -975,6 +985,13 @@ public abstract class HttpServlet extends GenericServlet {
     }
 
 
+    /*
+     * On reset() and resetBuffer() need to clear the data buffered in the
+     * OutputStreamWriter. No easy way to do that so NoBodyPrintWriter wraps a
+     * PrintWriter than can be thrown away on reset()/resetBuffer() and a new
+     * one constructed while the application retains a reference to the
+     * NoBodyPrintWriter instance.
+     */
     private static class NoBodyPrintWriter extends PrintWriter {
 
         private final NoBodyOutputStream out;
@@ -1140,4 +1157,38 @@ public abstract class HttpServlet extends GenericServlet {
             pw.println(x);
         }
     }
+
+
+    /*
+     * Calls NoBodyResponse.setContentLength() once the async request is
+     * complete.
+     */
+    private static class NoBodyAsyncContextListener implements AsyncListener {
+
+        private final NoBodyResponse noBodyResponse;
+
+        public NoBodyAsyncContextListener(NoBodyResponse noBodyResponse) {
+            this.noBodyResponse = noBodyResponse;
+        }
+
+        @Override
+        public void onComplete(AsyncEvent event) throws IOException {
+            noBodyResponse.setContentLength();
+        }
+
+        @Override
+        public void onTimeout(AsyncEvent event) throws IOException {
+            // NO-OP
+        }
+
+        @Override
+        public void onError(AsyncEvent event) throws IOException {
+            // NO-OP
+        }
+
+        @Override
+        public void onStartAsync(AsyncEvent event) throws IOException {
+            // NO-OP
+        }
+    }
 }

==================================================
