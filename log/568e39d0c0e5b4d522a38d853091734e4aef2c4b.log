568e39d0c0e5b4d522a38d853091734e4aef2c4b
==================================================
Third pass at fixing https://bz.apache.org/bugzilla/show_bug.cgi?id=59219
==================================================
Mark Thomas
==================================================
Sun Apr 24 16:15:34 2016 +0000
==================================================
CoyoteAdapter.java
Third pass at fixing https://bz.apache.org/bugzilla/show_bug.cgi?id=59219
Includes a test case based on a patch by Abdessamed MANSOURI.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1740707 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Request.java
index 70e2de81bc..9775fc824d 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -364,6 +364,16 @@ public class CoyoteAdapter implements Adapter {
                         request.getContext().unbind(false, oldCL);
                     }
                 }
+
+                Throwable throwable =
+                        (Throwable) request.getAttribute(RequestDispatcher.ERROR_EXCEPTION);
+
+                // If an async request was started, is not going to end once
+                // this container thread finishes and an error occurred, trigger
+                // the async error process
+                if (!request.isAsyncCompleting() && throwable != null) {
+                    request.getAsyncContextInternal().setErrorState(throwable, true);
+                }
             } else {
                 request.finishRequest();
                 response.finishResponse();

==================================================
ErrorReportValve.java
index 42e97536eb..bea4d1ca3e 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -1645,16 +1645,6 @@ public class Request implements HttpServletRequest {
         return asyncContext;
     }
 
-    public boolean isAsyncStarting() {
-        if (asyncContext == null) {
-            return false;
-        }
-
-        AtomicBoolean result = new AtomicBoolean(false);
-        coyoteRequest.action(ActionCode.ASYNC_IS_STARTING, result);
-        return result.get();
-    }
-
     @Override
     public boolean isAsyncStarted() {
         if (asyncContext == null) {

==================================================
ActionCode.java
index b0d4e4dc6a..c67a4d44b5 100644
--- a/java/org/apache/catalina/valves/ErrorReportValve.java
+++ b/java/org/apache/catalina/valves/ErrorReportValve.java
@@ -100,13 +100,6 @@ public class ErrorReportValve extends ValveBase {
         // If an async request is in progress and is not going to end once this
         // container thread finishes, do not process any error page here.
         if (request.isAsync() && !request.isAsyncCompleting()) {
-            // If an async dispatch is in progress the error handling in the
-            // CoyoteAdapter will trigger the necessary processing. It is only
-            // necessary to trigger it here if async is starting (i.e. this is
-            // the post-processing of the service() method)
-            if (throwable != null && request.isAsyncStarting()) {
-                request.getAsyncContextInternal().setErrorState(throwable, true);
-            }
             return;
         }
 

==================================================
AsyncStateMachine.java
index 7c6245570d..830624a928 100644
--- a/java/org/apache/coyote/ActionCode.java
+++ b/java/org/apache/coyote/ActionCode.java
@@ -163,11 +163,6 @@ public enum ActionCode {
      */
     ASYNC_IS_ASYNC,
 
-    /**
-     * Callback to determine if async processing is starting.
-     */
-    ASYNC_IS_STARTING,
-
     /**
      * Callback to determine if async dispatch is in progress.
      */

==================================================
AjpProcessor.java
index 359a42b283..ce76c23570 100644
--- a/java/org/apache/coyote/AsyncStateMachine.java
+++ b/java/org/apache/coyote/AsyncStateMachine.java
@@ -179,10 +179,6 @@ public class AsyncStateMachine {
         return state.isDispatching();
     }
 
-    public boolean isAsyncStarting() {
-        return state == AsyncState.STARTING;
-    }
-
     public boolean isAsyncStarted() {
         return state.isStarted();
     }

==================================================
Http11Processor.java
index 814cf25779..cfbaf7aa59 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -571,10 +571,6 @@ public class AjpProcessor extends AbstractProcessor {
             ((AtomicBoolean) param).set(asyncStateMachine.isAsyncError());
             break;
         }
-        case ASYNC_IS_STARTING: {
-            ((AtomicBoolean) param).set(asyncStateMachine.isAsyncStarting());
-            break;
-        }
         case ASYNC_IS_STARTED: {
             ((AtomicBoolean) param).set(asyncStateMachine.isAsyncStarted());
             break;

==================================================
StreamProcessor.java
index 1fd83e4c92..8797efd333 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -876,10 +876,6 @@ public class Http11Processor extends AbstractProcessor {
             ((AtomicBoolean) param).set(asyncStateMachine.isAsyncError());
             break;
         }
-        case ASYNC_IS_STARTING: {
-            ((AtomicBoolean) param).set(asyncStateMachine.isAsyncStarting());
-            break;
-        }
         case ASYNC_IS_STARTED: {
             ((AtomicBoolean) param).set(asyncStateMachine.isAsyncStarted());
             break;

==================================================
TestAsyncContextImpl.java
index cf0eb76dc2..0d45a16822 100644
--- a/java/org/apache/coyote/http2/StreamProcessor.java
+++ b/java/org/apache/coyote/http2/StreamProcessor.java
@@ -291,10 +291,6 @@ public class StreamProcessor extends AbstractProcessor implements Runnable {
             ((AtomicBoolean) param).set(asyncStateMachine.isAsyncError());
             break;
         }
-        case ASYNC_IS_STARTING: {
-            ((AtomicBoolean) param).set(asyncStateMachine.isAsyncStarting());
-            break;
-        }
         case ASYNC_IS_STARTED: {
             ((AtomicBoolean) param).set(asyncStateMachine.isAsyncStarted());
             break;

==================================================
