3810b04c042fb93464ff9b3bc1d4f8cf481811d6
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50789
==================================================
Mark Emlyn
==================================================
Thu Feb 17 10:32:07 2011 +0000
==================================================
Context.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50789
Provide an option to enable ServletRequestListeners for forwards as required by some CDI frameworks.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1071565 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ApplicationDispatcher.java
index 6743085fb6..af26716e7d 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -1315,5 +1315,18 @@ public interface Context extends Container {
      * deployment. If not specified, defaults to the empty string.
      */
     public String getWebappVersion();
+    
+    /**
+     * Configure whether or not requests listeners will be fired on forwards for
+     * this Context.
+     */
+    public void setFireRequestListenersOnForwards(boolean enable);
+
+    /**
+     * Determine whether or not requests listeners will be fired on forwards for
+     * this Context.
+     */
+    public boolean getFireRequestListenersOnForwards();
+    
 }
 

==================================================
StandardContext.java
index 73c1f9fec7..b26448dd19 100644
--- a/java/org/apache/catalina/core/ApplicationDispatcher.java
+++ b/java/org/apache/catalina/core/ApplicationDispatcher.java
@@ -453,19 +453,31 @@ final class ApplicationDispatcher
                 
         DispatcherType disInt = (DispatcherType) request.getAttribute(ApplicationFilterFactory.DISPATCHER_TYPE_ATTR);
         if (disInt != null) {
-            if (disInt != DispatcherType.ERROR) {
-                state.outerRequest.setAttribute
-                    (ApplicationFilterFactory.DISPATCHER_REQUEST_PATH_ATTR,
-                     getCombinedPath());
-                state.outerRequest.setAttribute
-                    (ApplicationFilterFactory.DISPATCHER_TYPE_ATTR,
-                     DispatcherType.FORWARD);
-                invoke(state.outerRequest, response, state);
-            } else {
-                invoke(state.outerRequest, response, state);
+            boolean doInvoke = true;
+            
+            if (context.getFireRequestListenersOnForwards() &&
+                    !context.fireRequestInitEvent(request)) {
+                doInvoke = false;
             }
-        }
 
+            if (doInvoke) {
+                if (disInt != DispatcherType.ERROR) {
+                    state.outerRequest.setAttribute
+                        (ApplicationFilterFactory.DISPATCHER_REQUEST_PATH_ATTR,
+                         getCombinedPath());
+                    state.outerRequest.setAttribute
+                        (ApplicationFilterFactory.DISPATCHER_TYPE_ATTR,
+                         DispatcherType.FORWARD);
+                    invoke(state.outerRequest, response, state);
+                } else {
+                    invoke(state.outerRequest, response, state);
+                }
+                
+                if (context.getFireRequestListenersOnForwards()) {
+                    context.fireRequestDestroyEvent(request);
+                }
+            }
+        }
     }
     
     

==================================================
