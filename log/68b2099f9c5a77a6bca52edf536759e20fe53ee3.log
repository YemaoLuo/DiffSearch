68b2099f9c5a77a6bca52edf536759e20fe53ee3
==================================================
Fix various Eclipse warnings.
==================================================
Mark Emlyn
==================================================
Mon Feb 9 19:51:30 2009 +0000
==================================================
RequestHeaderExample.java
Fix various Eclipse warnings.
Convert tabs to spaces.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@742707 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SessionExample.java
index 87af27582f..f73f8a5bbe 100644
--- a/webapps/examples/WEB-INF/classes/RequestHeaderExample.java
+++ b/webapps/examples/WEB-INF/classes/RequestHeaderExample.java
@@ -66,9 +66,9 @@ public class RequestHeaderExample extends HttpServlet {
 
         out.println("<h3>" + title + "</h3>");
         out.println("<table border=0>");
-        Enumeration e = request.getHeaderNames();
+        Enumeration<String> e = request.getHeaderNames();
         while (e.hasMoreElements()) {
-            String headerName = (String)e.nextElement();
+            String headerName = e.nextElement();
             String headerValue = request.getHeader(headerName);
             out.println("<tr><td bgcolor=\"#CCCCCC\">");
             out.println(HTMLFilter.filter(headerName));

==================================================
Entry.java
index ca369a1342..deeaab5b95 100644
--- a/webapps/examples/WEB-INF/classes/SessionExample.java
+++ b/webapps/examples/WEB-INF/classes/SessionExample.java
@@ -52,12 +52,12 @@ public class SessionExample extends HttpServlet {
         out.println("<body>");
 
         // img stuff not req'd for source code html showing
-	// relative links everywhere!
+        // relative links everywhere!
 
         // XXX
         // making these absolute till we work out the
         // addition of a PathInfo issue 
-	
+        
         out.println("<a href=\"../sessions.html\">");
         out.println("<img src=\"../images/code.gif\" height=24 " +
                     "width=24 align=right border=0 alt=\"view code\"></a>");
@@ -83,9 +83,9 @@ public class SessionExample extends HttpServlet {
 
         out.println("<P>");
         out.println(rb.getString("sessions.data") + "<br>");
-        Enumeration names = session.getAttributeNames();
+        Enumeration<String> names = session.getAttributeNames();
         while (names.hasMoreElements()) {
-            String name = (String) names.nextElement(); 
+            String name = names.nextElement(); 
             String value = session.getAttribute(name).toString();
             out.println(HTMLFilter.filter(name) + " = " 
                         + HTMLFilter.filter(value) + "<br>");
@@ -93,7 +93,7 @@ public class SessionExample extends HttpServlet {
 
         out.println("<P>");
         out.print("<form action=\"");
-	out.print(response.encodeURL("SessionExample"));
+        out.print(response.encodeURL("SessionExample"));
         out.print("\" ");
         out.println("method=POST>");
         out.println(rb.getString("sessions.dataname"));
@@ -107,7 +107,7 @@ public class SessionExample extends HttpServlet {
 
         out.println("<P>GET based form:<br>");
         out.print("<form action=\"");
-	out.print(response.encodeURL("SessionExample"));
+        out.print(response.encodeURL("SessionExample"));
         out.print("\" ");
         out.println("method=GET>");
         out.println(rb.getString("sessions.dataname"));
@@ -120,9 +120,9 @@ public class SessionExample extends HttpServlet {
         out.println("</form>");
 
         out.print("<p><a href=\"");
-	out.print(response.encodeURL("SessionExample?dataname=foo&datavalue=bar"));
-	out.println("\" >URL encoded </a>");
-	
+        out.print(response.encodeURL("SessionExample?dataname=foo&datavalue=bar"));
+        out.println("\" >URL encoded </a>");
+        
         out.println("</body>");
         out.println("</html>");
         

==================================================
ChatServlet.java
index 10b826e52c..0b1f15a0dc 100644
--- a/webapps/examples/WEB-INF/classes/cal/Entry.java
+++ b/webapps/examples/WEB-INF/classes/cal/Entry.java
@@ -1,55 +1,54 @@
 /*
-* Licensed to the Apache Software Foundation (ASF) under one or more
-* contributor license agreements.  See the NOTICE file distributed with
-* this work for additional information regarding copyright ownership.
-* The ASF licenses this file to You under the Apache License, Version 2.0
-* (the "License"); you may not use this file except in compliance with
-* the License.  You may obtain a copy of the License at
-*
-*     http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 
 package cal;
 
 public class Entry {
 
-  String hour;
-  String description;
-  String color;
+    String hour;
+    String description;
+    String color;
 
-  public Entry (String hour) {
-    this.hour = hour;
-    this.description = "";
+    public Entry(String hour) {
+        this.hour = hour;
+        this.description = "";
 
-  }
-
-  public String getHour () {
-    return this.hour;
-  }
-
-  public String getColor () {
-    if (description.equals("")) return "lightblue";
-    else return "red";
-  }
-
-  public String getDescription () {
-    if (description.equals("")) return "None";
-    else return this.description;
-  }
-
-  public void setDescription (String descr) {
-    description = descr;
-  }
- 
-}
+    }
 
+    public String getHour() {
+        return this.hour;
+    }
 
+    public String getColor() {
+        if (description.equals("")) {
+            return "lightblue";
+        }
+        return "red";
+    }
 
+    public String getDescription() {
+        if (description.equals("")) {
+            return "None";
+        }
+        return this.description;
+    }
 
+    public void setDescription(String descr) {
+        description = descr;
+    }
 
+}

==================================================
ColorGameBean.java
index a306beda3b..b086b9c298 100644
--- a/webapps/examples/WEB-INF/classes/chat/ChatServlet.java
+++ b/webapps/examples/WEB-INF/classes/chat/ChatServlet.java
@@ -81,22 +81,20 @@ public class ChatServlet
                     response.sendRedirect("post.jsp");
                     event.close();
                     return;
-                } else {
-                    String nickname = (String) request.getSession(true).getAttribute("nickname");
-                    String message = request.getParameter("message");
-                    messageSender.send(nickname, message);
-                    response.sendRedirect("post.jsp");
-                    event.close();
-                    return;
-                }
-            } else {
-                if (request.getSession(true).getAttribute("nickname") == null) {
-                    // Redirect to "login"
-                    log("Redirect to login for session: " + request.getSession(true).getId());
-                    response.sendRedirect("login.jsp");
-                    event.close();
-                    return;
                 }
+                String nickname = (String) request.getSession(true).getAttribute("nickname");
+                String message = request.getParameter("message");
+                messageSender.send(nickname, message);
+                response.sendRedirect("post.jsp");
+                event.close();
+                return;
+            }
+            if (request.getSession(true).getAttribute("nickname") == null) {
+                // Redirect to "login"
+                log("Redirect to login for session: " + request.getSession(true).getId());
+                response.sendRedirect("login.jsp");
+                event.close();
+                return;
             }
             begin(event, request, response);
         } else if (event.getEventType() == CometEvent.EventType.ERROR) {
@@ -109,7 +107,7 @@ public class ChatServlet
     }
 
     protected void begin(CometEvent event, HttpServletRequest request, HttpServletResponse response)
-        throws IOException, ServletException {
+        throws IOException {
         log("Begin for session: " + request.getSession(true).getId());
         
         PrintWriter writer = response.getWriter();
@@ -123,7 +121,7 @@ public class ChatServlet
     }
     
     protected void end(CometEvent event, HttpServletRequest request, HttpServletResponse response)
-        throws IOException, ServletException {
+        throws IOException {
         log("End for session: " + request.getSession(true).getId());
         synchronized(connections) {
             connections.remove(response);
@@ -137,7 +135,7 @@ public class ChatServlet
     }
     
     protected void error(CometEvent event, HttpServletRequest request, HttpServletResponse response)
-        throws IOException, ServletException {
+        throws IOException {
         log("Error for session: " + request.getSession(true).getId());
         synchronized(connections) {
             connections.remove(response);
@@ -146,7 +144,7 @@ public class ChatServlet
     }
     
     protected void read(CometEvent event, HttpServletRequest request, HttpServletResponse response)
-        throws IOException, ServletException {
+        throws IOException {
         InputStream is = request.getInputStream();
         byte[] buf = new byte[512];
         while (is.available() > 0) {
@@ -183,6 +181,7 @@ public class ChatServlet
         protected ArrayList<String> messages = new ArrayList<String>();
         
         public MessageSender() {
+            // Default contructor
         }
         
         public void stop() {

==================================================
CompressionFilter.java
index 8b1791e7e2..20b85d8125 100644
--- a/webapps/examples/WEB-INF/classes/colors/ColorGameBean.java
+++ b/webapps/examples/WEB-INF/classes/colors/ColorGameBean.java
@@ -24,90 +24,90 @@ public class ColorGameBean {
     private String color2 = background;
     private String hint = "no";
     private int attempts = 0;
-	private int intval = 0;
+        private int intval = 0;
     private boolean tookHints = false;
 
     public void processRequest() {
 
-	// background = "yellow";
-	// foreground = "red";
+        // background = "yellow";
+        // foreground = "red";
 
-	if (! color1.equals(foreground)) {
-	    if (color1.equalsIgnoreCase("black") ||
-			color1.equalsIgnoreCase("cyan")) {
-			background = color1;
-		}
-	}
+        if (! color1.equals(foreground)) {
+            if (color1.equalsIgnoreCase("black") ||
+                        color1.equalsIgnoreCase("cyan")) {
+                        background = color1;
+                }
+        }
 
-	if (! color2.equals(background)) {
-	    if (color2.equalsIgnoreCase("black") ||
-			color2.equalsIgnoreCase("cyan")) {
-			foreground = color2;
-	    }
-	}
+        if (! color2.equals(background)) {
+            if (color2.equalsIgnoreCase("black") ||
+                        color2.equalsIgnoreCase("cyan")) {
+                        foreground = color2;
+            }
+        }
 
-	attempts++;
+        attempts++;
     }
 
     public void setColor2(String x) {
-	color2 = x;
+        color2 = x;
     }
 
     public void setColor1(String x) {
-	color1 = x;
+        color1 = x;
     }
 
     public void setAction(String x) {
-	if (!tookHints)
-	    tookHints = x.equalsIgnoreCase("Hint");
-	hint = x;
+        if (!tookHints)
+            tookHints = x.equalsIgnoreCase("Hint");
+        hint = x;
     }
 
     public String getColor2() {
-	 return background;
+         return background;
     }
 
     public String getColor1() {
-	 return foreground;
+         return foreground;
     }
 
     public int getAttempts() {
-	return attempts;
+        return attempts;
     }
 
     public boolean getHint() {
-	return hint.equalsIgnoreCase("Hint");
+        return hint.equalsIgnoreCase("Hint");
     }
 
     public boolean getSuccess() {
-	if (background.equalsIgnoreCase("black") ||
-	    background.equalsIgnoreCase("cyan")) {
-	
-	    if (foreground.equalsIgnoreCase("black") ||
-		foreground.equalsIgnoreCase("cyan"))
-		return true;
-	    else
-		return false;
-	}
-
-	return false;
+        if (background.equalsIgnoreCase("black") ||
+            background.equalsIgnoreCase("cyan")) {
+        
+            if (foreground.equalsIgnoreCase("black") ||
+                foreground.equalsIgnoreCase("cyan")) {
+                return true;
+            }
+            return false;
+        }
+
+        return false;
     }
 
     public boolean getHintTaken() {
-	return tookHints;
+        return tookHints;
     }
 
     public void reset() {
-	foreground = "red";
-	background = "yellow";
+        foreground = "red";
+        background = "yellow";
     }
 
     public void setIntval(int value) {
-	intval = value;
-	}
+        intval = value;
+        }
 
     public int getIntval() {
-	return intval;
-	}
+        return intval;
+        }
 }
 

==================================================
CompressionFilterTestServlet.java
index 2ad87932b9..b7fd11fe5e 100644
--- a/webapps/examples/WEB-INF/classes/compressionFilters/CompressionFilter.java
+++ b/webapps/examples/WEB-INF/classes/compressionFilters/CompressionFilter.java
@@ -155,10 +155,10 @@ public class CompressionFilter implements Filter{
                 return;
             }
 
-            Enumeration e =
+            Enumeration<String> e =
                 ((HttpServletRequest)request).getHeaders("Accept-Encoding");
             while (e.hasMoreElements()) {
-                String name = (String)e.nextElement();
+                String name = e.nextElement();
                 if (name.indexOf("gzip") != -1) {
                     if (debug > 0) {
                         System.out.println("supports compression");
@@ -178,22 +178,22 @@ public class CompressionFilter implements Filter{
             }
             chain.doFilter(request, response);
             return;
-        } else {
-            if (response instanceof HttpServletResponse) {
-                CompressionServletResponseWrapper wrappedResponse =
-                    new CompressionServletResponseWrapper((HttpServletResponse)response);
-                wrappedResponse.setDebugLevel(debug);
-                wrappedResponse.setCompressionThreshold(compressionThreshold);
-                if (debug > 0) {
-                    System.out.println("doFilter gets called with compression");
-                }
-                try {
-                    chain.doFilter(request, wrappedResponse);
-                } finally {
-                    wrappedResponse.finishResponse();
-                }
-                return;
+        } 
+        
+        if (response instanceof HttpServletResponse) {
+            CompressionServletResponseWrapper wrappedResponse =
+                new CompressionServletResponseWrapper((HttpServletResponse)response);
+            wrappedResponse.setDebugLevel(debug);
+            wrappedResponse.setCompressionThreshold(compressionThreshold);
+            if (debug > 0) {
+                System.out.println("doFilter gets called with compression");
             }
+            try {
+                chain.doFilter(request, wrappedResponse);
+            } finally {
+                wrappedResponse.finishResponse();
+            }
+            return;
         }
     }
 

==================================================
CompressionServletResponseWrapper.java
index 80c61bb5da..daf861dd7d 100644
--- a/webapps/examples/WEB-INF/classes/compressionFilters/CompressionFilterTestServlet.java
+++ b/webapps/examples/WEB-INF/classes/compressionFilters/CompressionFilterTestServlet.java
@@ -36,9 +36,9 @@ public class CompressionFilterTestServlet extends HttpServlet {
         ServletOutputStream out = response.getOutputStream();
         response.setContentType("text/plain");
 
-        Enumeration e = request.getHeaders("Accept-Encoding");
+        Enumeration<String> e = request.getHeaders("Accept-Encoding");
         while (e.hasMoreElements()) {
-            String name = (String)e.nextElement();
+            String name = e.nextElement();
             out.println(name);
             if (name.indexOf("gzip") != -1) {
                 out.println("gzip supported -- able to compress");

==================================================
ExampleTagBase.java
index 274922deda..559d6d9066 100644
--- a/webapps/examples/WEB-INF/classes/compressionFilters/CompressionServletResponseWrapper.java
+++ b/webapps/examples/WEB-INF/classes/compressionFilters/CompressionServletResponseWrapper.java
@@ -160,6 +160,7 @@ public class CompressionServletResponseWrapper extends HttpServletResponseWrappe
                     stream.close();
             }
         } catch (IOException e) {
+            // Ignore
         }
     }
 
@@ -240,6 +241,7 @@ public class CompressionServletResponseWrapper extends HttpServletResponseWrappe
 
 
     public void setContentLength(int length) {
+        // Don't, as compression will change it
     }
 
 }

==================================================
FooTag.java
index ded3a30a9c..5d4fbc941d 100644
--- a/webapps/examples/WEB-INF/classes/examples/ExampleTagBase.java
+++ b/webapps/examples/WEB-INF/classes/examples/ExampleTagBase.java
@@ -46,9 +46,9 @@ public abstract class ExampleTagBase extends BodyTagSupport {
     }
     
 
-    // Default implementations for BodyTag methods as well
-    // just in case a tag decides to implement BodyTag.
     public void doInitBody() throws JspException {
+        // Default implementations for BodyTag methods as well
+        // just in case a tag decides to implement BodyTag.
     }
 
     public int doAfterBody() throws JspException {

==================================================
RequestDumperFilter.java
index ab8ee2b192..b48d254856 100644
--- a/webapps/examples/WEB-INF/classes/examples/FooTag.java
+++ b/webapps/examples/WEB-INF/classes/examples/FooTag.java
@@ -68,8 +68,9 @@ public class FooTag
             if (i == 3) {
                 bodyOut.writeOut(bodyOut.getEnclosingWriter());
                 return SKIP_BODY;
-            } else
-                pageContext.setAttribute("member", atts[i]);
+            }
+            
+            pageContext.setAttribute("member", atts[i]);
             i++;
             return EVAL_BODY_BUFFERED;
         } catch (IOException ex) {

==================================================
SetCharacterEncodingFilter.java
index 214944255e..df5faa86ab 100644
--- a/webapps/examples/WEB-INF/classes/filters/RequestDumperFilter.java
+++ b/webapps/examples/WEB-INF/classes/filters/RequestDumperFilter.java
@@ -99,10 +99,10 @@ public final class RequestDumperFilter implements Filter {
 	writer.println("       contentType=" + request.getContentType());
 	writer.println("            locale=" + request.getLocale());
 	writer.print("           locales=");
-	Enumeration locales = request.getLocales();
+	Enumeration<Locale> locales = request.getLocales();
 	boolean first = true;
 	while (locales.hasMoreElements()) {
-	    Locale locale = (Locale) locales.nextElement();
+	    Locale locale = locales.nextElement();
 	    if (first)
 	        first = false;
 	    else
@@ -110,9 +110,9 @@ public final class RequestDumperFilter implements Filter {
 	    writer.print(locale.toString());
 	}
 	writer.println();
-	Enumeration names = request.getParameterNames();
+	Enumeration<String> names = request.getParameterNames();
 	while (names.hasMoreElements()) {
-	    String name = (String) names.nextElement();
+	    String name = names.nextElement();
 	    writer.print("         parameter=" + name + "=");
 	    String values[] = request.getParameterValues(name);
 	    for (int i = 0; i < values.length; i++) {
@@ -144,7 +144,7 @@ public final class RequestDumperFilter implements Filter {
 	    }
 	    names = hrequest.getHeaderNames();
 	    while (names.hasMoreElements()) {
-	        String name = (String) names.nextElement();
+	        String name = names.nextElement();
 		String value = hrequest.getHeader(name);
 	        writer.println("            header=" + name + "=" + value);
 	    }

==================================================
