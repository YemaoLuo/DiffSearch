907e77a48573a83c2cb66f20c9992efe777499dc
==================================================
Align longPool in APR with NIO.
==================================================
Mark Thomas
==================================================
Wed May 27 13:51:15 2015 +0000
==================================================
Http11AprProtocol.java
Align longPool in APR with NIO.
It does mean Processors allocated to requests when the connector is shut down could end up being eligible for GC rather than being recycled but there should be no functional change.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1682030 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AprEndpoint.java
index ef4ec85e3e..38ad00aa00 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -20,7 +20,6 @@ import org.apache.coyote.Processor;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.AprEndpoint;
-import org.apache.tomcat.util.net.AprEndpoint.Poller;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 
 
@@ -108,19 +107,15 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
 
         @Override
         protected void longPoll(SocketWrapperBase<Long> socket, Processor processor) {
-
             if (processor.isAsync()) {
                 // Async
                 socket.setAsync(true);
             } else {
-                // Upgraded
-                Poller p = ((AprEndpoint) getProtocol().getEndpoint()).getPoller();
-                if (p == null) {
-                    // Connector has been stopped
-                    release(socket, processor, false);
-                } else {
-                    socket.registerReadInterest();
-                }
+                // Either:
+                //  - this is an upgraded connection
+                //  - the request line/headers have not been completely
+                //    read
+                socket.registerReadInterest();
             }
         }
     }

==================================================
