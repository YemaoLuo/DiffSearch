d7dec226b59046f37d9ac3747d4dcb879976faf1
==================================================
Fill in some Javadoc.
==================================================
Mark Emlyn
==================================================
Thu Dec 27 20:41:08 2012 +0000
==================================================
MessageHandler.java
Fill in some Javadoc.
Rename various fields/methods/parameters for consistency
Remove unnecessary code

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1426309 13f79535-47bb-0310-9956-ffa450edef68



==================================================
PojoEndpoint.java
index b954fa9264..6eb488545f 100644
--- a/java/javax/websocket/MessageHandler.java
+++ b/java/javax/websocket/MessageHandler.java
@@ -20,11 +20,23 @@ public interface MessageHandler {
 
     interface Async<T> extends MessageHandler {
 
+        /**
+         * Called when part of a message is available to be processed.
+         *
+         * @param messagePart   The message part
+         * @param last          <code>true</code> if this is the last part of
+         *                      this message, else <code>false</code>
+         */
         void onMessage(T messagePart, boolean last);
     }
 
     interface Basic<T> extends MessageHandler {
 
+        /**
+         * Called when a whole message is available to be processed.
+         *
+         * @param messagePart   The message
+         */
         void onMessage(T message);
     }
 }

==================================================
PojoEndpointConfiguration.java
similarity index 97%
rename from java/org/apache/tomcat/websocket/WsEndpointPojo.java
rename to java/org/apache/tomcat/websocket/PojoEndpoint.java
index 60c127167b..8c483f9b0a 100644
--- a/java/org/apache/tomcat/websocket/WsEndpointPojo.java
+++ b/java/org/apache/tomcat/websocket/PojoEndpoint.java
@@ -30,7 +30,7 @@ import javax.websocket.Session;
  * {@link javax.websocket.server.WebSocketEndpoint} so they appear as standard
  * {@link Endpoint} instances.
  */
-public class WsEndpointPojo extends Endpoint {
+public class PojoEndpoint extends Endpoint {
 
     private Object pojo;
     private String pathInfo;
@@ -43,7 +43,7 @@ public class WsEndpointPojo extends Endpoint {
         PojoEndpointConfiguration pec =
                 (PojoEndpointConfiguration) endpointConfiguration;
 
-        pojo = pec.getPojo();
+        pojo = pec.createPojo();
         pathInfo = pec.getPathInfo();
         methodMapping = pec.getMethodMapping();
 

==================================================
PojoMessageHandlerAsyncBase.java
index 511f1a6f76..1c3b99b1cd 100644
--- a/java/org/apache/tomcat/websocket/PojoEndpointConfiguration.java
+++ b/java/org/apache/tomcat/websocket/PojoEndpointConfiguration.java
@@ -20,7 +20,7 @@ import javax.websocket.server.DefaultServerConfiguration;
 
 /**
  * Provides the configuration for POJOs annotated at WebSocket endpoints. It
- * provides the means, via casting, of new {@link WsEndpointPojo} instances
+ * provides the means, via casting, of new {@link PojoEndpoint} instances
  * obtaining POJO endpoint specific configuration settings such as the mapping
  * of onXxx calls to POJO methods.
  */
@@ -28,28 +28,19 @@ public class PojoEndpointConfiguration extends DefaultServerConfiguration {
 
     private final Class<?> pojoClass;
     private final PojoMethodMapping methodMapping;
-    private final String servletPath;
     private final String pathInfo;
 
 
     PojoEndpointConfiguration(Class<?> pojoClass,
-            PojoMethodMapping methodMapping, String servletPath,
-            String pathInfo) {
-        super(WsEndpointPojo.class, methodMapping.getMappingPath());
+            PojoMethodMapping methodMapping, String pathInfo) {
+        super(PojoEndpoint.class, methodMapping.getWsPath());
         this.pojoClass = pojoClass;
         this.methodMapping = methodMapping;
-        this.servletPath = servletPath;
         this.pathInfo = pathInfo;
     }
 
 
-    @Override
-    public String getPath() {
-        return servletPath;
-    }
-
-
-    public Object getPojo() {
+    public Object createPojo() {
         try {
             return pojoClass.newInstance();
         } catch (InstantiationException | IllegalAccessException e) {

==================================================
PojoMessageHandlerAsyncBinary.java
index 4bb02caa4b..f29222418d 100644
--- a/java/org/apache/tomcat/websocket/PojoMessageHandlerAsyncBase.java
+++ b/java/org/apache/tomcat/websocket/PojoMessageHandlerAsyncBase.java
@@ -23,6 +23,12 @@ import java.nio.ByteBuffer;
 import javax.websocket.MessageHandler;
 import javax.websocket.Session;
 
+/**
+ * Common implementation code for the POJO asynchronous message handlers. All
+ * the real work is done in this class and in the superclass.
+ *
+ * @param <T>   The type of message to handle
+ */
 public abstract class PojoMessageHandlerAsyncBase<T>
         extends PojoMessageHandlerBase<T> implements MessageHandler.Async<T> {
 
@@ -38,7 +44,7 @@ public abstract class PojoMessageHandlerAsyncBase<T>
 
 
     @Override
-    public void onMessage(T message, boolean last) {
+    public final void onMessage(T message, boolean last) {
         Object[] parameters = params.clone();
         if (indexBoolean != -1) {
             parameters[indexBoolean] = Boolean.valueOf(last);

==================================================
PojoMessageHandlerAsyncString.java
index df81bededf..c8d3089948 100644
--- a/java/org/apache/tomcat/websocket/PojoMessageHandlerAsyncBinary.java
+++ b/java/org/apache/tomcat/websocket/PojoMessageHandlerAsyncBinary.java
@@ -21,7 +21,9 @@ import java.nio.ByteBuffer;
 
 import javax.websocket.Session;
 
-
+/**
+ * ByteBuffer specific concrete asynchronous implementation.
+ */
 public class PojoMessageHandlerAsyncBinary
         extends PojoMessageHandlerAsyncBase<ByteBuffer>{
 

==================================================
PojoMessageHandlerBase.java
index 5a70a9e3c3..e910369e3a 100644
--- a/java/org/apache/tomcat/websocket/PojoMessageHandlerAsyncString.java
+++ b/java/org/apache/tomcat/websocket/PojoMessageHandlerAsyncString.java
@@ -20,7 +20,9 @@ import java.lang.reflect.Method;
 
 import javax.websocket.Session;
 
-
+/**
+ * String specific concrete asynchronous implementation.
+ */
 public class PojoMessageHandlerAsyncString
         extends PojoMessageHandlerAsyncBase<String>{
 

==================================================
PojoMessageHandlerBasicBase.java
index 66cdcde2f6..df9c7f264c 100644
--- a/java/org/apache/tomcat/websocket/PojoMessageHandlerBase.java
+++ b/java/org/apache/tomcat/websocket/PojoMessageHandlerBase.java
@@ -24,6 +24,11 @@ import javax.websocket.EncodeException;
 import javax.websocket.RemoteEndpoint;
 import javax.websocket.Session;
 
+/**
+ * Common implementation code for the POJO message handlers.
+ *
+ * @param <T>   The type of message to handle
+ */
 public abstract class PojoMessageHandlerBase<T> {
 
     protected final Object pojo;
@@ -48,7 +53,7 @@ public abstract class PojoMessageHandlerBase<T> {
     }
 
 
-    protected void processResult(Object result) {
+    protected final void processResult(Object result) {
         if (result == null) {
             return;
         }

==================================================
PojoMessageHandlerBasicBinary.java
index e13895aefc..448448e509 100644
--- a/java/org/apache/tomcat/websocket/PojoMessageHandlerBasicBase.java
+++ b/java/org/apache/tomcat/websocket/PojoMessageHandlerBasicBase.java
@@ -23,6 +23,12 @@ import java.nio.ByteBuffer;
 import javax.websocket.MessageHandler;
 import javax.websocket.Session;
 
+/**
+ * Common implementation code for the POJO basic message handlers. All the real
+ * work is done in this class and in the superclass.
+ *
+ * @param <T>   The type of message to handle
+ */
 public abstract class PojoMessageHandlerBasicBase<T>
         extends PojoMessageHandlerBase<T> implements MessageHandler.Basic<T> {
 
@@ -35,7 +41,7 @@ public abstract class PojoMessageHandlerBasicBase<T>
 
 
     @Override
-    public void onMessage(T message) {
+    public final void onMessage(T message) {
         Object[] parameters = params.clone();
         if (indexSession != -1) {
             parameters[indexSession] = session;

==================================================
PojoMessageHandlerBasicPong.java
index 12ab2f5f00..e092085418 100644
--- a/java/org/apache/tomcat/websocket/PojoMessageHandlerBasicBinary.java
+++ b/java/org/apache/tomcat/websocket/PojoMessageHandlerBasicBinary.java
@@ -21,6 +21,9 @@ import java.nio.ByteBuffer;
 
 import javax.websocket.Session;
 
+/**
+ * ByteBuffer specific concrete basic implementation.
+ */
 public class PojoMessageHandlerBasicBinary
         extends PojoMessageHandlerBasicBase<ByteBuffer> {
 

==================================================
PojoMessageHandlerBasicString.java
index d142812afa..06f20c2391 100644
--- a/java/org/apache/tomcat/websocket/PojoMessageHandlerBasicPong.java
+++ b/java/org/apache/tomcat/websocket/PojoMessageHandlerBasicPong.java
@@ -21,6 +21,9 @@ import java.lang.reflect.Method;
 import javax.websocket.PongMessage;
 import javax.websocket.Session;
 
+/**
+ * PongMessage specific concrete basic implementation.
+ */
 public class PojoMessageHandlerBasicPong
         extends PojoMessageHandlerBasicBase<PongMessage> {
 

==================================================
PojoMethodMapping.java
index 88767fb076..c0cbf4f319 100644
--- a/java/org/apache/tomcat/websocket/PojoMessageHandlerBasicString.java
+++ b/java/org/apache/tomcat/websocket/PojoMessageHandlerBasicString.java
@@ -20,6 +20,9 @@ import java.lang.reflect.Method;
 
 import javax.websocket.Session;
 
+/**
+ * String specific concrete basic implementation.
+ */
 public class PojoMessageHandlerBasicString
         extends PojoMessageHandlerBasicBase<String> {
 

==================================================
ServerContainerImpl.java
index f86f4bc6ff..966f3dca68 100644
--- a/java/org/apache/tomcat/websocket/PojoMethodMapping.java
+++ b/java/org/apache/tomcat/websocket/PojoMethodMapping.java
@@ -48,17 +48,18 @@ public class PojoMethodMapping {
     private final PathParam[] onCloseParams;
     private final PathParam[] onErrorParams;
     private final Set<MessageMethod> onMessage = new HashSet<>();
-    private final String mappingPath;
+    private final String wsPath;
     private final UriTemplate template;
 
 
-    public PojoMethodMapping(Class<?> clazzPojo, String path, String mappingPath) {
-        this.mappingPath = mappingPath;
+    public PojoMethodMapping(Class<?> clazzPojo, String wsPath,
+            String servletPath) {
+        this.wsPath = wsPath;
         Method open = null;
         Method close = null;
         Method error = null;
-        if (path.length() > mappingPath.length()) {
-            template = new UriTemplate(path.substring(mappingPath.length() - 2));
+        if (wsPath.length() > servletPath.length()) {
+            template = new UriTemplate(wsPath.substring(servletPath.length() - 2));
         } else {
             template = null;
         }
@@ -85,8 +86,8 @@ public class PojoMethodMapping {
     }
 
 
-    public String getMappingPath() {
-        return mappingPath;
+    public String getWsPath() {
+        return wsPath;
     }
 
 

==================================================
Util.java
index b4fcd2dbc9..e78d689b1c 100644
--- a/java/org/apache/tomcat/websocket/ServerContainerImpl.java
+++ b/java/org/apache/tomcat/websocket/ServerContainerImpl.java
@@ -40,9 +40,11 @@ public class ServerContainerImpl extends WebSocketContainerImpl {
 
     // Needs to be a WeakHashMap to prevent memory leaks when a context is
     // stopped
-    private static Map<ClassLoader,ServerContainerImpl> classLoaderContainerMap = new WeakHashMap<>();
+    private static Map<ClassLoader,ServerContainerImpl> classLoaderContainerMap =
+            new WeakHashMap<>();
     private static Object classLoaderContainerMapLock = new Object();
-    private static StringManager sm = StringManager.getManager(Constants.PACKAGE_NAME);
+    private static StringManager sm =
+            StringManager.getManager(Constants.PACKAGE_NAME);
     protected Log log = LogFactory.getLog(ServerContainerImpl.class);
 
 
@@ -59,9 +61,11 @@ public class ServerContainerImpl extends WebSocketContainerImpl {
         return result;
     }
     private volatile ServletContext servletContext = null;
-    private Map<String,ServerEndpointConfiguration> configMap = new ConcurrentHashMap<>();
+    private Map<String,ServerEndpointConfiguration> configMap =
+            new ConcurrentHashMap<>();
     private Map<String,Class<?>> pojoMap = new ConcurrentHashMap<>();
-    private Map<Class<?>,PojoMethodMapping> pojoMethodMap = new ConcurrentHashMap<>();
+    private Map<Class<?>,PojoMethodMapping> pojoMethodMap =
+            new ConcurrentHashMap<>();
     private volatile int readBufferSize = 8192;
 
 
@@ -75,6 +79,17 @@ public class ServerContainerImpl extends WebSocketContainerImpl {
     }
 
 
+    /**
+     * Published the provided endpoint implementation at the specified path with
+     * the specified configuration. {@link #setServletContext(ServletContext)}
+     * must be called before calling this method.
+     *
+     * @param endpointClass The WebSocket server implementation to publish
+     * @param path          The path to publish the implementation at
+     * @param configClass   The configuration to use when creating endpoint
+     *                          instances
+     * @throws DeploymentException
+     */
     public void publishServer(Class<? extends Endpoint> endpointClass,
             String path,
             Class<? extends ServerEndpointConfiguration> configClass)
@@ -94,13 +109,14 @@ public class ServerContainerImpl extends WebSocketContainerImpl {
             throw new DeploymentException(sm.getString("sci.newInstance.fail",
                     endpointClass.getName()), e);
         }
-        String mappingPath = Util.getServletMappingPath(path);
+        String servletPath = Util.getServletPath(path);
         if (log.isDebugEnabled()) {
             log.debug(sm.getString("serverContainer.endpointDeploy",
-                    endpointClass.getName(), path, servletContext.getContextPath()));
+                    endpointClass.getName(), path,
+                    servletContext.getContextPath()));
         }
-        configMap.put(mappingPath.substring(0, mappingPath.length() - 2), sec);
-        addWsServletMapping(mappingPath);
+        configMap.put(servletPath.substring(0, servletPath.length() - 2), sec);
+        addWsServletMapping(servletPath);
     }
 
 
@@ -109,11 +125,12 @@ public class ServerContainerImpl extends WebSocketContainerImpl {
      * publishing plain old java objects (POJOs) that have been annotated as
      * WebSocket endpoints.
      *
-     * @param pojo The annotated POJO
-     * @param ctxt The ServletContext the endpoint is to be published in
-     * @param path The path at which the endpoint is to be published
+     * @param pojo   The annotated POJO
+     * @param ctxt   The ServletContext the endpoint is to be published in
+     * @param wsPath The path at which the endpoint is to be published
      */
-    public void publishServer(Class<?> pojo, ServletContext ctxt, String path) {
+    public void publishServer(Class<?> pojo, ServletContext ctxt,
+            String wsPath) {
         if (ctxt == null) {
             throw new IllegalArgumentException(
                     sm.getString("serverContainer.servletContextMissing"));
@@ -124,27 +141,30 @@ public class ServerContainerImpl extends WebSocketContainerImpl {
         } else if (ctxt != servletContext) {
             // Should never happen
             throw new IllegalStateException(sm.getString(
-                    "serverContainer.servletContextMismatch", path,
+                    "serverContainer.servletContextMismatch", wsPath,
                     servletContext.getContextPath(), ctxt.getContextPath()));
         }
         if (log.isDebugEnabled()) {
             log.debug(sm.getString("serverContainer.pojoDeploy",
-                    pojo.getName(), path, servletContext.getContextPath()));
+                    pojo.getName(), wsPath, servletContext.getContextPath()));
         }
-        String mappingPath = Util.getServletMappingPath(path);
-        pojoMap.put(mappingPath.substring(0, mappingPath.length() - 2), pojo);
-        pojoMethodMap.put(pojo, new PojoMethodMapping(pojo, path, mappingPath));
-        addWsServletMapping(mappingPath);
+        String servletPath = Util.getServletPath(wsPath);
+        // Remove the trailing /* before adding it to the map
+        pojoMap.put(servletPath.substring(0, servletPath.length() - 2), pojo);
+        pojoMethodMap.put(pojo,
+                new PojoMethodMapping(pojo, wsPath, servletPath));
+        addWsServletMapping(servletPath);
     }
 
 
-    private void addWsServletMapping(String mapping) {
-        ServletRegistration sr = servletContext.getServletRegistration(Constants.SERVLET_NAME);
+    private void addWsServletMapping(String servletPath) {
+        ServletRegistration sr =
+                servletContext.getServletRegistration(Constants.SERVLET_NAME);
         if (sr == null) {
             sr = servletContext.addServlet(Constants.SERVLET_NAME,
                     WsServlet.class);
         }
-        sr.addMapping(mapping);
+        sr.addMapping(servletPath);
     }
 
 
@@ -156,10 +176,11 @@ public class ServerContainerImpl extends WebSocketContainerImpl {
         }
         Class<?> pojo = pojoMap.get(servletPath);
         if (pojo != null) {
-            PojoMethodMapping mapping = pojoMethodMap.get(pojo);
-            if (mapping != null) {
-                PojoEndpointConfiguration pojoSec = new PojoEndpointConfiguration(
-                        pojo, mapping, servletPath, pathInfo);
+            PojoMethodMapping methodMapping = pojoMethodMap.get(pojo);
+            if (methodMapping != null) {
+                PojoEndpointConfiguration pojoSec =
+                        new PojoEndpointConfiguration(pojo, methodMapping,
+                                pathInfo);
                 return pojoSec;
             }
         }

==================================================
TestUtil.java
index 9fe3b97d88..99b08568ad 100644
--- a/java/org/apache/tomcat/websocket/Util.java
+++ b/java/org/apache/tomcat/websocket/Util.java
@@ -37,7 +37,7 @@ class Util {
      * @param wsPath The WebSocket endpoint path to convert
      * @return The servlet mapping
      */
-    static String getServletMappingPath(String wsPath) {
+    static String getServletPath(String wsPath) {
         int templateStart = wsPath.indexOf('{');
         if (templateStart == -1) {
             if (wsPath.charAt(wsPath.length() - 1) == '/') {

==================================================
