27e0ab65ef17e15c4757d3adb9554f5d16e1dd56
==================================================
Add support for cross context session replication to BackupManager.
==================================================
Keiichi Fujino
==================================================
Thu Apr 3 06:53:51 2014 +0000
==================================================
ClusterManagerBase.java
Add support for cross context session replication to BackupManager.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1584268 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DeltaManager.java
index 9928cd00e3..6ba081a811 100644
--- a/java/org/apache/catalina/ha/session/ClusterManagerBase.java
+++ b/java/org/apache/catalina/ha/session/ClusterManagerBase.java
@@ -21,14 +21,22 @@ import java.io.IOException;
 import java.util.regex.Pattern;
 
 import org.apache.catalina.Context;
+import org.apache.catalina.LifecycleException;
 import org.apache.catalina.Loader;
+import org.apache.catalina.Valve;
+import org.apache.catalina.core.StandardContext;
 import org.apache.catalina.ha.CatalinaCluster;
 import org.apache.catalina.ha.ClusterManager;
+import org.apache.catalina.ha.tcp.ReplicationValve;
 import org.apache.catalina.session.ManagerBase;
 import org.apache.catalina.tribes.io.ReplicationStream;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 
 public abstract class ClusterManagerBase extends ManagerBase implements ClusterManager {
 
+    private final Log log = LogFactory.getLog(ClusterManagerBase.class);
+
     /**
      * A reference to the cluster
      */
@@ -53,6 +61,11 @@ public abstract class ClusterManagerBase extends ManagerBase implements ClusterM
      */
     private Pattern sessionAttributePattern = null;
 
+    /**
+     * cached replication valve cluster container!
+     */
+    private volatile ReplicationValve replicationValve = null ;
+
     /*
      * @see org.apache.catalina.ha.ClusterManager#getCluster()
      */
@@ -189,4 +202,39 @@ public abstract class ClusterManagerBase extends ManagerBase implements ClusterM
         copy.setSecureRandomAlgorithm(getSecureRandomAlgorithm());
     }
 
+    /**
+     * Register cross context session at replication valve thread local
+     * @param session cross context session
+     */
+    protected void registerSessionAtReplicationValve(DeltaSession session) {
+        if(replicationValve == null) {
+            Context context = getContext();
+            if(context instanceof StandardContext &&
+                    ((StandardContext)context).getCrossContext()) {
+                CatalinaCluster cluster = getCluster() ;
+                if(cluster != null) {
+                    Valve[] valves = cluster.getValves();
+                    if(valves != null && valves.length > 0) {
+                        for(int i=0; replicationValve == null && i < valves.length ; i++ ){
+                            if(valves[i] instanceof ReplicationValve) replicationValve =
+                                    (ReplicationValve)valves[i] ;
+                        }//for
+
+                        if(replicationValve == null && log.isDebugEnabled()) {
+                            log.debug("no ReplicationValve found for CrossContext Support");
+                        }//endif
+                    }//end if
+                }//endif
+            }//end if
+        }//end if
+        if(replicationValve != null) {
+            replicationValve.registerReplicationSession(session);
+        }
+    }
+
+    @Override
+    protected void stopInternal() throws LifecycleException {
+        replicationValve = null;
+        super.stopInternal();
+    }
 }

==================================================
DeltaSession.java
index 5baee068bf..b197806224 100644
--- a/java/org/apache/catalina/ha/session/DeltaManager.java
+++ b/java/org/apache/catalina/ha/session/DeltaManager.java
@@ -33,12 +33,9 @@ import org.apache.catalina.Host;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleState;
 import org.apache.catalina.Session;
-import org.apache.catalina.Valve;
-import org.apache.catalina.core.StandardContext;
 import org.apache.catalina.ha.CatalinaCluster;
 import org.apache.catalina.ha.ClusterManager;
 import org.apache.catalina.ha.ClusterMessage;
-import org.apache.catalina.ha.tcp.ReplicationValve;
 import org.apache.catalina.session.ManagerBase;
 import org.apache.catalina.tribes.Member;
 import org.apache.catalina.tribes.io.ReplicationStream;
@@ -79,11 +76,6 @@ public class DeltaManager extends ClusterManagerBase{
     protected static final String managerName = "DeltaManager";
     protected String name = null;
 
-    /**
-     * cached replication valve cluster container!
-     */
-    private volatile ReplicationValve replicationValve = null ;
-
     private boolean expireSessionsOnShutdown = false;
     private boolean notifySessionListenersOnReplication = true;
     private boolean notifyContainerListenersOnReplication  = true;
@@ -844,36 +836,6 @@ public class DeltaManager extends ClusterManagerBase{
         }
     }
 
-    /**
-     * Register cross context session at replication valve thread local
-     * @param session cross context session
-     */
-    protected void registerSessionAtReplicationValve(DeltaSession session) {
-        if(replicationValve == null) {
-            Context context = getContext();
-            if(context instanceof StandardContext &&
-                    ((StandardContext)context).getCrossContext()) {
-                CatalinaCluster cluster = getCluster() ;
-                if(cluster != null) {
-                    Valve[] valves = cluster.getValves();
-                    if(valves != null && valves.length > 0) {
-                        for(int i=0; replicationValve == null && i < valves.length ; i++ ){
-                            if(valves[i] instanceof ReplicationValve) replicationValve =
-                                    (ReplicationValve)valves[i] ;
-                        }//for
-
-                        if(replicationValve == null && log.isDebugEnabled()) {
-                            log.debug("no ReplicationValve found for CrossContext Support");
-                        }//endif
-                    }//end if
-                }//endif
-            }//end if
-        }//end if
-        if(replicationValve != null) {
-            replicationValve.registerReplicationSession(session);
-        }
-    }
-
     /**
      * Find the master of the session state
      * @return master member of sessions
@@ -969,7 +931,6 @@ public class DeltaManager extends ClusterManagerBase{
         // Require a new random number generator if we are restarted
         getCluster().removeManager(this);
         super.stopInternal();
-        replicationValve = null;
     }
 
     // -------------------------------------------------------- Replication

==================================================
