20975defc3a8cc66943723b01ccc57263371a41b
==================================================
Fix remaining Eclipse warnings in jdbc-pool
==================================================
Mark Emlyn
==================================================
Wed Nov 7 10:34:36 2012 +0000
==================================================
FairBlockingQueue.java
Fix remaining Eclipse warnings in jdbc-pool

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1406526 13f79535-47bb-0310-9956-ffa450edef68



==================================================
MultiLockFairBlockingQueue.java
index 2ea76c9234..60aa56f7a8 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java
@@ -503,6 +503,7 @@ public class FairBlockingQueue<E> implements BlockingQueue<E> {
         int index;
         E element = null;
 
+        @SuppressWarnings("unchecked") // Can't create arrays of generic types
         public FairIterator() {
             final ReentrantLock lock = FairBlockingQueue.this.lock;
             lock.lock();

==================================================
SlowQueryReport.java
index cb8a260f69..45ff9a8c58 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/MultiLockFairBlockingQueue.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/MultiLockFairBlockingQueue.java
@@ -80,6 +80,7 @@ public class MultiLockFairBlockingQueue<E> implements BlockingQueue<E> {
     /**
      * Creates a new fair blocking queue.
      */
+    @SuppressWarnings("unchecked") // Can create arrays of generic types
     public MultiLockFairBlockingQueue() {
         items = new LinkedList[LOCK_COUNT];
         waiters = new LinkedList[LOCK_COUNT];
@@ -520,6 +521,7 @@ public class MultiLockFairBlockingQueue<E> implements BlockingQueue<E> {
         int index;
         E element = null;
 
+        @SuppressWarnings("unchecked") // Can't create arrays of generic types
         public FairIterator() {
             ArrayList<E> list = new ArrayList<>(MultiLockFairBlockingQueue.this.size());
             for (int idx=0; idx<LOCK_COUNT; idx++) {

==================================================
StatementDecoratorInterceptor.java
index 2ac02ec61d..5747014802 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
@@ -16,8 +16,11 @@
  */
 package org.apache.tomcat.jdbc.pool.interceptor;
 
+import java.text.SimpleDateFormat;
 import java.util.Iterator;
+import java.util.Locale;
 import java.util.Map;
+import java.util.TimeZone;
 import java.util.concurrent.ConcurrentHashMap;
 
 import javax.management.openmbean.CompositeDataSupport;
@@ -116,13 +119,13 @@ public class SlowQueryReport extends AbstractQueryReport  {
     @Override
     public void prepareStatement(String sql, long time) {
         QueryStats qs = getQueryStats(sql);
-        qs.prepare(time, System.currentTimeMillis());
+        qs.prepare(time);
     }
 
     @Override
     public void prepareCall(String sql, long time) {
         QueryStats qs = getQueryStats(sql);
-        qs.prepare(time, System.currentTimeMillis());
+        qs.prepare(time);
     }
 
     /**
@@ -287,6 +290,9 @@ public class SlowQueryReport extends AbstractQueryReport  {
 
         @Override
         public String toString() {
+            SimpleDateFormat sdf =
+                    new SimpleDateFormat("d MMM yyyy HH:mm:ss z", Locale.US);
+            sdf.setTimeZone(TimeZone.getTimeZone("GMT"));
             StringBuilder buf = new StringBuilder("QueryStats[query:");
             buf.append(query);
             buf.append(", nrOfInvocations:");
@@ -294,11 +300,11 @@ public class SlowQueryReport extends AbstractQueryReport  {
             buf.append(", maxInvocationTime:");
             buf.append(maxInvocationTime);
             buf.append(", maxInvocationDate:");
-            buf.append(new java.util.Date(maxInvocationDate).toGMTString());
+            buf.append(sdf.format(new java.util.Date(maxInvocationDate)));
             buf.append(", minInvocationTime:");
             buf.append(minInvocationTime);
             buf.append(", minInvocationDate:");
-            buf.append(new java.util.Date(minInvocationDate).toGMTString());
+            buf.append(sdf.format(new java.util.Date(minInvocationDate)));
             buf.append(", totalInvocationTime:");
             buf.append(totalInvocationTime);
             buf.append(", averageInvocationTime:");
@@ -334,7 +340,7 @@ public class SlowQueryReport extends AbstractQueryReport  {
             this.query = query;
         }
 
-        public void prepare(long invocationTime, long now) {
+        public void prepare(long invocationTime) {
             prepareCount++;
             prepareTime+=invocationTime;
 

==================================================
