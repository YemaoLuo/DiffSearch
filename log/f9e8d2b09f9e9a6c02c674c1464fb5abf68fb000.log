f9e8d2b09f9e9a6c02c674c1464fb5abf68fb000
==================================================
Minor Javadoc clean-up
==================================================
Mark Thomas
==================================================
Fri Nov 19 12:24:49 2021 +0000
==================================================
FilterChain.java
Minor Javadoc clean-up

Missing @since tags
Servlet 6.0 clarifications


==================================================
FilterConfig.java
index 535853f442..67ef19833e 100644
--- a/java/jakarta/servlet/FilterChain.java
+++ b/java/jakarta/servlet/FilterChain.java
@@ -27,8 +27,7 @@ import java.io.IOException;
  *
  * @see Filter
  * @since Servlet 2.3
- **/
-
+ */
 public interface FilterChain {
 
     /**

==================================================
GenericFilter.java
index e9fc00b47d..a7875651dc 100644
--- a/java/jakarta/servlet/FilterConfig.java
+++ b/java/jakarta/servlet/FilterConfig.java
@@ -19,7 +19,6 @@ package jakarta.servlet;
 import java.util.Enumeration;
 
 /**
- *
  * A filter configuration object used by a servlet container to pass information
  * to a filter during initialization.
  *

==================================================
RequestDispatcher.java
index 3cdb815d46..a69ac3fbd0 100644
--- a/java/jakarta/servlet/GenericFilter.java
+++ b/java/jakarta/servlet/GenericFilter.java
@@ -25,6 +25,8 @@ import java.util.Enumeration;
  *
  * @see jakarta.servlet.Filter
  * @see jakarta.servlet.FilterConfig
+ *
+ * @since Servlet 4.0
  */
 public abstract class GenericFilter implements Filter, FilterConfig, Serializable {
 

==================================================
ServletContext.java
index 11c498e701..0c94b00921 100644
--- a/java/jakarta/servlet/RequestDispatcher.java
+++ b/java/jakarta/servlet/RequestDispatcher.java
@@ -32,7 +32,6 @@ import java.io.IOException;
  * @see ServletContext#getRequestDispatcher(java.lang.String)
  * @see ServletContext#getNamedDispatcher(java.lang.String)
  * @see ServletRequest#getRequestDispatcher(java.lang.String)
- *
  */
 public interface RequestDispatcher {
 

==================================================
ServletContextAttributeEvent.java
index 8f93735163..d860319d40 100644
--- a/java/jakarta/servlet/ServletContext.java
+++ b/java/jakarta/servlet/ServletContext.java
@@ -438,6 +438,7 @@ public interface ServletContext {
      * method with an attribute name to get the value of an attribute.
      *
      * @return an <code>Enumeration</code> of attribute names
+     *
      * @see #getAttribute
      */
     public Enumeration<String> getAttributeNames();

==================================================
ServletContextAttributeListener.java
index 0149da5781..0a21406fac 100644
--- a/java/jakarta/servlet/ServletContextAttributeEvent.java
+++ b/java/jakarta/servlet/ServletContextAttributeEvent.java
@@ -21,6 +21,7 @@ package jakarta.servlet;
  * the servlet context of a web application.
  *
  * @see ServletContextAttributeListener
+ *
  * @since Servlet 2.3
  */
 public class ServletContextAttributeEvent extends ServletContextEvent {

==================================================
ServletContextEvent.java
index 25e42bad9e..ded0ca87ea 100644
--- a/java/jakarta/servlet/ServletContextAttributeListener.java
+++ b/java/jakarta/servlet/ServletContextAttributeListener.java
@@ -25,10 +25,11 @@ import java.util.EventListener;
  * deployment descriptor for the web application.
  *
  * @see ServletContextAttributeEvent
+ *
  * @since Servlet 2.3
  */
-
 public interface ServletContextAttributeListener extends EventListener {
+
     /**
      * Notification that a new attribute was added to the servlet context.
      * Called after the attribute is added.

==================================================
ServletContextListener.java
index 7cf5408c25..8143088303 100644
--- a/java/jakarta/servlet/ServletContextEvent.java
+++ b/java/jakarta/servlet/ServletContextEvent.java
@@ -21,6 +21,7 @@ package jakarta.servlet;
  * context of a web application.
  *
  * @see ServletContextListener
+ *
  * @since Servlet 2.3
  */
 public class ServletContextEvent extends java.util.EventObject {

==================================================
ServletRequest.java
index c5e33d441f..88327efe97 100644
--- a/java/jakarta/servlet/ServletContextListener.java
+++ b/java/jakarta/servlet/ServletContextListener.java
@@ -25,9 +25,9 @@ import java.util.EventListener;
  * deployment descriptor for the web application.
  *
  * @see ServletContextEvent
+ *
  * @since Servlet 2.3
  */
-
 public interface ServletContextListener extends EventListener {
 
     /**

==================================================
ServletRequestWrapper.java
index cbc9e3570c..ea0c549e4b 100644
--- a/java/jakarta/servlet/ServletRequest.java
+++ b/java/jakarta/servlet/ServletRequest.java
@@ -408,6 +408,7 @@ public interface ServletRequest {
      * proxy that sent the request.
      *
      * @return an integer specifying the port number
+     *
      * @since Servlet 2.4
      */
     public int getRemotePort();
@@ -437,6 +438,7 @@ public interface ServletRequest {
      * the request was received.
      *
      * @return an integer specifying the port number
+     *
      * @since Servlet 2.4
      */
     public int getLocalPort();

==================================================
ServletResponse.java
index c3c076dd3a..094d4686ca 100644
--- a/java/jakarta/servlet/ServletRequestWrapper.java
+++ b/java/jakarta/servlet/ServletRequestWrapper.java
@@ -29,8 +29,9 @@ import java.util.ResourceBundle;
  * class implements the Wrapper or Decorator pattern. Methods default to calling
  * through to the wrapped request object.
  *
- * @since Servlet 2.3
  * @see jakarta.servlet.ServletRequest
+ *
+ * @since Servlet 2.3
  */
 public class ServletRequestWrapper implements ServletRequest {
     private static final String LSTRING_FILE = "jakarta.servlet.LocalStrings";
@@ -63,6 +64,7 @@ public class ServletRequestWrapper implements ServletRequest {
 
     /**
      * Sets the request object being wrapped.
+     *
      * @param request The new wrapped request.
      *
      * @throws IllegalArgumentException if the request is null.

==================================================
HttpServletRequest.java
index ad19476f89..595051515a 100644
--- a/java/jakarta/servlet/ServletResponse.java
+++ b/java/jakarta/servlet/ServletResponse.java
@@ -288,6 +288,7 @@ public interface ServletResponse {
      * @see #getBufferSize
      * @see #isCommitted
      * @see #reset
+     *
      * @since Servlet 2.3
      */
     public void resetBuffer();

==================================================
HttpServletRequestWrapper.java
index 1bd2bcb894..b98ee5b8e5 100644
--- a/java/jakarta/servlet/http/HttpServletRequest.java
+++ b/java/jakarta/servlet/http/HttpServletRequest.java
@@ -220,12 +220,13 @@ public interface HttpServletRequest extends ServletRequest {
      * This method returns <code>null</code> if there was no extra path
      * information.
      * <p>
-     * Same as the value of the CGI variable PATH_INFO.
+     * The URL will be canonicalized as per section 3.5 of the specification
+     * before the path information, if any, is extracted.
      *
-     * @return a <code>String</code>, decoded by the web container, specifying
-     *         extra path information that comes after the servlet path but
-     *         before the query string in the request URL; or <code>null</code>
-     *         if the URL does not have any extra path information
+     * @return a <code>String</code>, canonicalized by the web container,
+     *         specifying extra path information that comes after the servlet
+     *         path but before the query string in the request URL; or
+     *         {@code null} if the URL does not have any extra path information
      */
     public String getPathInfo();
 
@@ -388,13 +389,16 @@ public interface HttpServletRequest extends ServletRequest {
      * path to the servlet, but does not include any extra path information or a
      * query string. Same as the value of the CGI variable SCRIPT_NAME.
      * <p>
+     * The URL will be canonicalized as per section 3.5 of the specification
+     * before the path information, if any, is extracted.
+     * <p>
      * This method will return an empty string ("") if the servlet used to
      * process this request was matched using the "/*" pattern.
      *
-     * @return a <code>String</code> containing the name or path of the servlet
-     *         being called, as specified in the request URL, decoded, or an
-     *         empty string if the servlet used to process the request is
-     *         matched using the "/*" pattern.
+     * @return a <code>String</code>, canonicalized by the web container,
+     *         containing the name or path of the servlet being called, as
+     *         specified in the request URL, or an empty string if the servlet
+     *         used to process the request is matched using the "/*" pattern.
      */
     public String getServletPath();
 

==================================================
HttpServletResponse.java
index d9de9ad6db..3092f36176 100644
--- a/java/jakarta/servlet/http/HttpServletRequestWrapper.java
+++ b/java/jakarta/servlet/http/HttpServletRequestWrapper.java
@@ -256,6 +256,8 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
     /**
      * The default behavior of this method is to call changeSessionId() on the
      * wrapped request object.
+     *
+     * @since Servlet 3.1
      */
     @Override
     public String changeSessionId() {

==================================================
HttpUpgradeHandler.java
index 479e75a31e..816e2fa6ef 100644
--- a/java/jakarta/servlet/http/HttpServletResponse.java
+++ b/java/jakarta/servlet/http/HttpServletResponse.java
@@ -341,7 +341,7 @@ public interface HttpServletResponse extends ServletResponse {
     }
 
     /*
-     * Server status codes; see RFC 2068.
+     * Server status codes; see RFC 7231.
      */
 
     /**

==================================================
