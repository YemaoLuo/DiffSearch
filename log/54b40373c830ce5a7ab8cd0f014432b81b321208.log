54b40373c830ce5a7ab8cd0f014432b81b321208
==================================================
chopit parameter is always false in remaining code. Simplify.
==================================================
Mark Emlyn
==================================================
Sat Nov 9 21:39:37 2013 +0000
==================================================
ConstantPool.java
chopit parameter is always false in remaining code. Simplify.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1540404 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JavaClass.java
index 3adb606d65..0dda98c690 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
@@ -87,7 +87,7 @@ public class ConstantPool implements Cloneable, Serializable {
             case Constants.CONSTANT_Class:
                 i = ((ConstantClass) c).getNameIndex();
                 c = getConstant(i, Constants.CONSTANT_Utf8);
-                str = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
+                str = Utility.compactClassName(((ConstantUtf8) c).getBytes());
                 break;
             case Constants.CONSTANT_String:
                 i = ((ConstantString) c).getStringIndex();

==================================================
Utility.java
index 490ba80ba7..c0466b1144 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
@@ -96,19 +96,19 @@ public class JavaClass extends AccessFlags
          * `ConstPool.getConstant' method.
          */
         class_name = constant_pool.getConstantString(class_name_index, Constants.CONSTANT_Class);
-        class_name = Utility.compactClassName(class_name, false);
+        class_name = Utility.compactClassName(class_name);
         if (superclass_name_index > 0) {
             // May be zero -> class is java.lang.Object
             superclass_name = constant_pool.getConstantString(superclass_name_index,
                     Constants.CONSTANT_Class);
-            superclass_name = Utility.compactClassName(superclass_name, false);
+            superclass_name = Utility.compactClassName(superclass_name);
         } else {
             superclass_name = "java.lang.Object";
         }
         interface_names = new String[interfaces.length];
         for (int i = 0; i < interfaces.length; i++) {
             String str = constant_pool.getConstantString(interfaces[i], Constants.CONSTANT_Class);
-            interface_names[i] = Utility.compactClassName(str, false);
+            interface_names[i] = Utility.compactClassName(str);
         }
     }
 

==================================================
