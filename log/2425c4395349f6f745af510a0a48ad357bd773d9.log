2425c4395349f6f745af510a0a48ad357bd773d9
==================================================
- Add the ability to invoke the main service method as an API call, without having to fallback to bytes.
==================================================
Remy Maucherat
==================================================
Thu Jan 10 15:45:47 2013 +0000
==================================================
CoyoteAdapter.java
- Add the ability to invoke the main service method as an API call, without having to fallback to bytes.
- Add some utility get/set (one of which got removed after deprecation but is not necessarily that useless).
- Both changes to make using the rewrite valve possible.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1431444 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Request.java
index da273b1fa4..19306fdbb1 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -609,39 +609,53 @@ public class CoyoteAdapter implements Adapter {
         MessageBytes decodedURI = req.decodedURI();
         decodedURI.duplicate(req.requestURI());
 
-        // Parse the path parameters. This will:
-        //   - strip out the path parameters
-        //   - convert the decodedURI to bytes
-        parsePathParameters(req, request);
-
-        // URI decoding
-        // %xx decoding of the URL
-        try {
-            req.getURLDecoder().convert(decodedURI, false);
-        } catch (IOException ioe) {
-            res.setStatus(400);
-            res.setMessage("Invalid URI: " + ioe.getMessage());
-            connector.getService().getContainer().logAccess(
-                    request, response, 0, true);
-            return false;
-        }
-        // Normalization
-        if (!normalize(req.decodedURI())) {
-            res.setStatus(400);
-            res.setMessage("Invalid URI");
-            connector.getService().getContainer().logAccess(
-                    request, response, 0, true);
-            return false;
-        }
-        // Character decoding
-        convertURI(decodedURI, request);
-        // Check that the URI is still normalized
-        if (!checkNormalize(req.decodedURI())) {
-            res.setStatus(400);
-            res.setMessage("Invalid URI character encoding");
-            connector.getService().getContainer().logAccess(
-                    request, response, 0, true);
-            return false;
+        if (decodedURI.getType() == MessageBytes.T_BYTES) {
+            // Parse the path parameters. This will:
+            //   - strip out the path parameters
+            //   - convert the decodedURI to bytes
+            parsePathParameters(req, request);
+
+            // URI decoding
+            // %xx decoding of the URL
+            try {
+                req.getURLDecoder().convert(decodedURI, false);
+            } catch (IOException ioe) {
+                res.setStatus(400);
+                res.setMessage("Invalid URI: " + ioe.getMessage());
+                connector.getService().getContainer().logAccess(
+                        request, response, 0, true);
+                return false;
+            }
+            // Normalization
+            if (!normalize(req.decodedURI())) {
+                res.setStatus(400);
+                res.setMessage("Invalid URI");
+                connector.getService().getContainer().logAccess(
+                        request, response, 0, true);
+                return false;
+            }
+            // Character decoding
+            convertURI(decodedURI, request);
+            // Check that the URI is still normalized
+            if (!checkNormalize(req.decodedURI())) {
+                res.setStatus(400);
+                res.setMessage("Invalid URI character encoding");
+                connector.getService().getContainer().logAccess(
+                        request, response, 0, true);
+                return false;
+            }
+        } else {
+            // The URL is chars or String, and has been sent using an in-memory
+            // protocol handler, we have to assume the URL has been properly
+            // decoded already
+            decodedURI.toChars();
+            // Remove any path parameters
+            CharChunk uriCC = decodedURI.getCharChunk();
+            int semicolon = uriCC.indexOf(';');
+            if (semicolon > 0) {
+                decodedURI.setChars
+                    (uriCC.getBuffer(), uriCC.getStart(), semicolon);
+            }
         }
 
         // Set the remote principal

==================================================
