9d0b4cf38714afd996f8ba1210069be6ce3b7d0d
==================================================
With clarification from the EG for Servlet 3.1 section 4.4 finally makes sense. Implement the necessary restriction and add a test case.
==================================================
Mark Emlyn
==================================================
Wed Jun 12 17:53:44 2013 +0000
==================================================
ServletContext.java
With clarification from the EG for Servlet 3.1 section 4.4 finally makes sense. Implement the necessary restriction and add a test case.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1492307 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Context.java
index 284a5449fb..49caee7066 100644
--- a/java/javax/servlet/ServletContext.java
+++ b/java/javax/servlet/ServletContext.java
@@ -105,14 +105,27 @@ public interface ServletContext {
 
     /**
      * @return TODO
-     * @throws UnsupportedOperationException
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
+     *
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     public int getEffectiveMajorVersion();
 
     /**
      * @return TODO
-     * @throws UnsupportedOperationException
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     public int getEffectiveMinorVersion();
@@ -429,7 +442,13 @@ public interface ServletContext {
      * @param value
      * @return TODO
      * @throws IllegalStateException
-     * @throws UnsupportedOperationException
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     public boolean setInitParameter(String name, String value);
@@ -518,6 +537,13 @@ public interface ServletContext {
      * @return TODO
      * @throws IllegalStateException
      *             If the context has already been initialised
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     public ServletRegistration.Dynamic addServlet(String servletName,
@@ -529,6 +555,13 @@ public interface ServletContext {
      * @return TODO
      * @throws IllegalStateException
      *             If the context has already been initialised
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     public ServletRegistration.Dynamic addServlet(String servletName,
@@ -540,6 +573,13 @@ public interface ServletContext {
      * @return TODO
      * @throws IllegalStateException
      *             If the context has already been initialised
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     public ServletRegistration.Dynamic addServlet(String servletName,
@@ -549,6 +589,13 @@ public interface ServletContext {
      * @param c
      * @return TODO
      * @throws ServletException
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     public <T extends Servlet> T createServlet(Class<T> c)
@@ -563,7 +610,13 @@ public interface ServletContext {
      *          <code>null</code> if no Servlet has been registered with the
      *          given name
      *
-     * @throws UnsupportedOperationException TODO SERVLET3 - Add comments
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      *
      * @since Servlet 3.0
      */
@@ -571,7 +624,13 @@ public interface ServletContext {
 
     /**
      * @return TODO
-     * @throws UnsupportedOperationException
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     public Map<String, ? extends ServletRegistration> getServletRegistrations();
@@ -580,6 +639,13 @@ public interface ServletContext {
      * @param filterName
      * @param className
      * @return TODO
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @throws IllegalStateException
      *             If the context has already been initialised
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
@@ -591,6 +657,13 @@ public interface ServletContext {
      * @param filterName
      * @param filter
      * @return TODO
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @throws IllegalStateException
      *             If the context has already been initialised
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
@@ -601,6 +674,13 @@ public interface ServletContext {
      * @param filterName
      * @param filterClass
      * @return TODO
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @throws IllegalStateException
      *             If the context has already been initialised
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
@@ -611,6 +691,13 @@ public interface ServletContext {
     /**
      * @param c
      * @return TODO
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @throws ServletException
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
@@ -620,21 +707,39 @@ public interface ServletContext {
     /**
      * @param filterName
      * @return TODO
-     * @throws UnsupportedOperationException
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     public FilterRegistration getFilterRegistration(String filterName);
 
     /**
      * @return TODO
-     * @throws UnsupportedOperationException
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     public Map<String, ? extends FilterRegistration> getFilterRegistrations();
 
     /**
      * @return TODO
-     * @throws UnsupportedOperationException
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     public SessionCookieConfig getSessionCookieConfig();
@@ -647,7 +752,13 @@ public interface ServletContext {
      *             {@link SessionTrackingMode}
      * @throws IllegalStateException
      *             If the context has already been initialised
-     * @throws UnsupportedOperationException
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     public void setSessionTrackingModes(
@@ -655,18 +766,39 @@ public interface ServletContext {
 
     /**
      * @return TODO
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     public Set<SessionTrackingMode> getDefaultSessionTrackingModes();
 
     /**
      * @return TODO
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     public Set<SessionTrackingMode> getEffectiveSessionTrackingModes();
 
     /**
      * @param className
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     public void addListener(String className);
@@ -674,12 +806,26 @@ public interface ServletContext {
     /**
      * @param <T>
      * @param t
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     public <T extends EventListener> void addListener(T t);
 
     /**
      * @param listenerClass
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     public void addListener(Class<? extends EventListener> listenerClass);
@@ -689,6 +835,13 @@ public interface ServletContext {
      * @param c
      * @return TODO
      * @throws ServletException
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     public <T extends EventListener> T createListener(Class<T> c)
@@ -696,14 +849,26 @@ public interface ServletContext {
 
     /**
      * @return TODO
-     * @throws UnsupportedOperationException
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     public JspConfigDescriptor getJspConfigDescriptor();
 
     /**
      * @return TODO
-     * @throws UnsupportedOperationException
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @throws SecurityException
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
@@ -711,7 +876,13 @@ public interface ServletContext {
 
     /**
      * @param roleNames
-     * @throws UnsupportedOperationException
+     * @throws UnsupportedOperationException    If called from a
+     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *    method of a {@link ServletContextListener} that was not defined in a
+     *    web.xml file, a web-fragment.xml file nor annotated with
+     *    {@link javax.servlet.annotation.WebListener}. For example, a
+     *    {@link ServletContextListener} defined in a TLD would not be able to
+     *    use this method.
      * @throws IllegalArgumentException
      * @throws IllegalStateException
      * @since Servlet 3.0 TODO SERVLET3 - Add comments

==================================================
StandardContext.java
index ddd244b51b..1943e213b1 100644
--- a/java/org/apache/catalina/core/LocalStrings.properties
+++ b/java/org/apache/catalina/core/LocalStrings.properties
@@ -183,6 +183,8 @@ standardWrapper.waiting=Waiting for {0} instance(s) to be deallocated for Servle
 threadLocalLeakPreventionListener.lifecycleEvent.error=Exception processing lifecycle event {0}
 threadLocalLeakPreventionListener.containerEvent.error=Exception processing container event {0}
 
+tldListenerServletContext.notAllowed=Section 4.4 of the Servlet 3.0 specification does not permit this method to be called from a ServletContextListener that is defined in a TLD
+
 defaultInstanceManager.restrictedServletsResource=Restricted servlets property file not found
 defaultInstanceManager.restrictedFiltersResource=Restricted filters property file not founddefaultInstanceManager.privilegedFilter=Filter of class {0} is privileged and cannot be loaded by this web application
 defaultInstanceManager.restrictedListenersResources="Restricted listeners property file not found

==================================================
ApplicationListener.java
index e6d806a228..6028ebc842 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -21,10 +21,13 @@ import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Enumeration;
+import java.util.EventListener;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -48,7 +51,9 @@ import javax.management.NotificationEmitter;
 import javax.management.NotificationFilter;
 import javax.management.NotificationListener;
 import javax.naming.NamingException;
+import javax.servlet.Filter;
 import javax.servlet.FilterConfig;
+import javax.servlet.FilterRegistration;
 import javax.servlet.RequestDispatcher;
 import javax.servlet.Servlet;
 import javax.servlet.ServletContainerInitializer;
@@ -58,11 +63,14 @@ import javax.servlet.ServletContextEvent;
 import javax.servlet.ServletContextListener;
 import javax.servlet.ServletException;
 import javax.servlet.ServletRegistration;
+import javax.servlet.ServletRegistration.Dynamic;
 import javax.servlet.ServletRequest;
 import javax.servlet.ServletRequestAttributeListener;
 import javax.servlet.ServletRequestEvent;
 import javax.servlet.ServletRequestListener;
 import javax.servlet.ServletSecurityElement;
+import javax.servlet.SessionCookieConfig;
+import javax.servlet.SessionTrackingMode;
 import javax.servlet.descriptor.JspConfigDescriptor;
 import javax.servlet.http.HttpSessionAttributeListener;
 import javax.servlet.http.HttpSessionIdListener;
@@ -88,6 +96,7 @@ import org.apache.catalina.Valve;
 import org.apache.catalina.WebResource;
 import org.apache.catalina.WebResourceRoot;
 import org.apache.catalina.Wrapper;
+import org.apache.catalina.deploy.ApplicationListener;
 import org.apache.catalina.deploy.ApplicationParameter;
 import org.apache.catalina.deploy.ErrorPage;
 import org.apache.catalina.deploy.FilterDef;
@@ -218,10 +227,11 @@ public class StandardContext extends ContainerBase
 
 
     /**
-     * The set of application listener class names configured for this
-     * application, in the order they were encountered in the web.xml file.
+     * The set of application listeners configured for this application, in the
+     * order they were encountered in the web.xml file.
      */
-    private String applicationListeners[] = new String[0];
+    private ApplicationListener applicationListeners[] =
+            new ApplicationListener[0];
 
     private final Object applicationListenersLock = new Object();
 
@@ -2702,10 +2712,11 @@ public class StandardContext extends ContainerBase
      * @param listener Java class name of a listener class
      */
     @Override
-    public void addApplicationListener(String listener) {
+    public void addApplicationListener(ApplicationListener listener) {
 
         synchronized (applicationListenersLock) {
-            String results[] =new String[applicationListeners.length + 1];
+            ApplicationListener results[] =
+                    new ApplicationListener[applicationListeners.length + 1];
             for (int i = 0; i < applicationListeners.length; i++) {
                 if (listener.equals(applicationListeners[i])) {
                     log.info(sm.getString(
@@ -3327,7 +3338,7 @@ public class StandardContext extends ContainerBase
      * for this application.
      */
     @Override
-    public String[] findApplicationListeners() {
+    public ApplicationListener[] findApplicationListeners() {
 
         return (applicationListeners);
 
@@ -3851,7 +3862,7 @@ public class StandardContext extends ContainerBase
             // Make sure this welcome file is currently present
             int n = -1;
             for (int i = 0; i < applicationListeners.length; i++) {
-                if (applicationListeners[i].equals(listener)) {
+                if (applicationListeners[i].getClassName().equals(listener)) {
                     n = i;
                     break;
                 }
@@ -3861,7 +3872,8 @@ public class StandardContext extends ContainerBase
 
             // Remove the specified constraint
             int j = 0;
-            String results[] = new String[applicationListeners.length - 1];
+            ApplicationListener results[] =
+                    new ApplicationListener[applicationListeners.length - 1];
             for (int i = 0; i < applicationListeners.length; i++) {
                 if (i != n)
                     results[j++] = applicationListeners[i];
@@ -4706,15 +4718,21 @@ public class StandardContext extends ContainerBase
             log.debug("Configuring application event listeners");
 
         // Instantiate the required listeners
-        String listeners[] = findApplicationListeners();
+        ApplicationListener listeners[] = findApplicationListeners();
         Object results[] = new Object[listeners.length];
         boolean ok = true;
+        Set<Object> tldListeners = new HashSet<>();
         for (int i = 0; i < results.length; i++) {
             if (getLogger().isDebugEnabled())
                 getLogger().debug(" Configuring event listener class '" +
                     listeners[i] + "'");
             try {
-                results[i] = instanceManager.newInstance(listeners[i]);
+                ApplicationListener listener = listeners[i];
+                results[i] = instanceManager.newInstance(
+                        listener.getClassName());
+                if (listener.isFromTLD()) {
+                    tldListeners.add(results[i]);
+                }
             } catch (Throwable t) {
                 t = ExceptionUtils.unwrapInvocationTargetException(t);
                 ExceptionUtils.handleThrowable(t);
@@ -4766,10 +4784,17 @@ public class StandardContext extends ContainerBase
         context.setNewServletContextListenerAllowed(false);
 
         Object instances[] = getApplicationLifecycleListeners();
-        if (instances == null || instances.length == 0)
-            return (ok);
+        if (instances == null || instances.length == 0) {
+            return ok;
+        }
+
         ServletContextEvent event =
-          new ServletContextEvent(getServletContext());
+                new ServletContextEvent(getServletContext());
+        ServletContextEvent tldEvent = null;
+        if (tldListeners.size() > 0) {
+            tldEvent = new ServletContextEvent(new TldListenerServletContext(
+                    getServletContext()));
+        }
         for (int i = 0; i < instances.length; i++) {
             if (instances[i] == null)
                 continue;
@@ -4779,7 +4804,11 @@ public class StandardContext extends ContainerBase
                 (ServletContextListener) instances[i];
             try {
                 fireContainerEvent("beforeContextInitialized", listener);
-                listener.contextInitialized(event);
+                if (tldListeners.contains(listener)) {
+                    listener.contextInitialized(tldEvent);
+                } else {
+                    listener.contextInitialized(event);
+                }
                 fireContainerEvent("afterContextInitialized", listener);
             } catch (Throwable t) {
                 ExceptionUtils.handleThrowable(t);
@@ -5616,7 +5645,7 @@ public class StandardContext extends ContainerBase
         // Bugzilla 32867
         distributable = false;
 
-        applicationListeners = new String[0];
+        applicationListeners = new ApplicationListener[0];
         applicationEventListenersObjects = new Object[0];
         applicationLifecycleListenersObjects = new Object[0];
         jspConfigDescriptor = new ApplicationJspConfigDescriptor();
@@ -6507,4 +6536,312 @@ public class StandardContext extends ContainerBase
     public long getStartTime() {
         return startTime;
     }
+
+
+    private static class TldListenerServletContext implements ServletContext {
+
+        private final ServletContext sc;
+
+        public TldListenerServletContext(ServletContext sc) {
+            this.sc = sc;
+        }
+
+        @Override
+        public String getContextPath() {
+            return sc.getContextPath();
+        }
+
+        @Override
+        public ServletContext getContext(String uripath) {
+            return sc.getContext(uripath);
+        }
+
+        @Override
+        public int getMajorVersion() {
+           return sc.getMajorVersion();
+        }
+
+        @Override
+        public int getMinorVersion() {
+            return sc.getMinorVersion();
+        }
+
+        @Override
+        public int getEffectiveMajorVersion() {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public int getEffectiveMinorVersion() {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public String getMimeType(String file) {
+            return sc.getMimeType(file);
+        }
+
+        @Override
+        public Set<String> getResourcePaths(String path) {
+            return sc.getResourcePaths(path);
+        }
+
+        @Override
+        public URL getResource(String path) throws MalformedURLException {
+            return sc.getResource(path);
+        }
+
+        @Override
+        public InputStream getResourceAsStream(String path) {
+            return sc.getResourceAsStream(path);
+        }
+
+        @Override
+        public RequestDispatcher getRequestDispatcher(String path) {
+            return sc.getRequestDispatcher(path);
+        }
+
+        @Override
+        public RequestDispatcher getNamedDispatcher(String name) {
+            return sc.getNamedDispatcher(name);
+        }
+
+        @Override
+        @Deprecated
+        public Servlet getServlet(String name) throws ServletException {
+            return sc.getServlet(name);
+        }
+
+        @Override
+        @Deprecated
+        public Enumeration<Servlet> getServlets() {
+            return sc.getServlets();
+        }
+
+        @Override
+        @Deprecated
+        public Enumeration<String> getServletNames() {
+            return sc.getServletNames();
+        }
+
+        @Override
+        public void log(String msg) {
+            sc.log(msg);
+        }
+
+        @Override
+        @Deprecated
+        public void log(Exception exception, String msg) {
+            sc.log(exception, msg);
+        }
+
+        @Override
+        public void log(String message, Throwable throwable) {
+            sc.log(message, throwable);
+        }
+
+        @Override
+        public String getRealPath(String path) {
+            return sc.getRealPath(path);
+        }
+
+        @Override
+        public String getServerInfo() {
+            return sc.getServerInfo();
+        }
+
+        @Override
+        public String getInitParameter(String name) {
+            return sc.getInitParameter(name);
+        }
+
+        @Override
+        public Enumeration<String> getInitParameterNames() {
+            return sc.getInitParameterNames();
+        }
+
+        @Override
+        public boolean setInitParameter(String name, String value) {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public Object getAttribute(String name) {
+            return sc.getAttribute(name);
+        }
+
+        @Override
+        public Enumeration<String> getAttributeNames() {
+            return sc.getAttributeNames();
+        }
+
+        @Override
+        public void setAttribute(String name, Object object) {
+            sc.setAttribute(name, object);
+        }
+
+        @Override
+        public void removeAttribute(String name) {
+            sc.removeAttribute(name);
+        }
+
+        @Override
+        public String getServletContextName() {
+            return sc.getServletContextName();
+        }
+
+        @Override
+        public Dynamic addServlet(String servletName, String className) {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public Dynamic addServlet(String servletName, Servlet servlet) {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public Dynamic addServlet(String servletName,
+                Class<? extends Servlet> servletClass) {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public <T extends Servlet> T createServlet(Class<T> c)
+                throws ServletException {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public ServletRegistration getServletRegistration(String servletName) {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public Map<String,? extends ServletRegistration> getServletRegistrations() {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public javax.servlet.FilterRegistration.Dynamic addFilter(
+                String filterName, String className) {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public javax.servlet.FilterRegistration.Dynamic addFilter(
+                String filterName, Filter filter) {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public javax.servlet.FilterRegistration.Dynamic addFilter(
+                String filterName, Class<? extends Filter> filterClass) {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public <T extends Filter> T createFilter(Class<T> c)
+                throws ServletException {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public FilterRegistration getFilterRegistration(String filterName) {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public Map<String,? extends FilterRegistration> getFilterRegistrations() {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public SessionCookieConfig getSessionCookieConfig() {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public void setSessionTrackingModes(
+                Set<SessionTrackingMode> sessionTrackingModes) {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public Set<SessionTrackingMode> getDefaultSessionTrackingModes() {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public Set<SessionTrackingMode> getEffectiveSessionTrackingModes() {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public void addListener(String className) {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public <T extends EventListener> void addListener(T t) {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public void addListener(Class<? extends EventListener> listenerClass) {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public <T extends EventListener> T createListener(Class<T> c)
+                throws ServletException {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public JspConfigDescriptor getJspConfigDescriptor() {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public ClassLoader getClassLoader() {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public void declareRoles(String... roleNames) {
+            throw new UnsupportedOperationException(
+                    sm.getString("tldListenerServletContext.notAllowed"));
+        }
+
+        @Override
+        public String getVirtualServerName() {
+            return sc.getVirtualServerName();
+        }
+    }
 }

==================================================
WebXml.java
new file mode 100644
index 0000000000..a1e152cf23
--- /dev/null
+++ b/java/org/apache/catalina/deploy/ApplicationListener.java
@@ -0,0 +1,42 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.deploy;
+
+/**
+ * Enables additional attributes other than just the name to be recorded for
+ * an application listener.
+ */
+public class ApplicationListener {
+
+    private final String className;
+    private final boolean fromTLD;
+
+    public ApplicationListener(String className, boolean fromTLD) {
+        this.className = className;
+        this.fromTLD = fromTLD;
+    }
+
+
+    public String getClassName() {
+        return className;
+    }
+
+
+    public boolean isFromTLD() {
+        return fromTLD;
+    }
+}
\ No newline at end of file

==================================================
FailedContext.java
index cbcae8f989..79a82fe520 100644
--- a/java/org/apache/catalina/deploy/WebXml.java
+++ b/java/org/apache/catalina/deploy/WebXml.java
@@ -1273,7 +1273,8 @@ public class WebXml {
                     descriptor);
         }
         for (String listener : listeners) {
-            context.addApplicationListener(listener);
+            context.addApplicationListener(
+                    new ApplicationListener(listener, false));
         }
         for (Entry<String, String> entry : localeEncodingMappings.entrySet()) {
             context.addLocaleEncodingMappingParameter(entry.getKey(),

==================================================
TldConfig.java
index c17c1fdc5f..baf2815b75 100644
--- a/java/org/apache/catalina/startup/FailedContext.java
+++ b/java/org/apache/catalina/startup/FailedContext.java
@@ -48,6 +48,7 @@ import org.apache.catalina.WebResourceRoot;
 import org.apache.catalina.Wrapper;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
+import org.apache.catalina.deploy.ApplicationListener;
 import org.apache.catalina.deploy.ApplicationParameter;
 import org.apache.catalina.deploy.ErrorPage;
 import org.apache.catalina.deploy.FilterDef;
@@ -471,9 +472,9 @@ public class FailedContext extends LifecycleMBeanBase implements Context {
     public boolean getLogEffectiveWebXml() { return false; }
 
     @Override
-    public void addApplicationListener(String listener) { /* NO-OP */ }
+    public void addApplicationListener(ApplicationListener listener) { /* NO-OP */ }
     @Override
-    public String[] findApplicationListeners() { return null; }
+    public ApplicationListener[] findApplicationListeners() { return null; }
     @Override
     public void removeApplicationListener(String listener) { /* NO-OP */ }
 

==================================================
WebAnnotationSet.java
index e7c1a7b0e2..b34c29d91b 100644
--- a/java/org/apache/catalina/startup/TldConfig.java
+++ b/java/org/apache/catalina/startup/TldConfig.java
@@ -36,6 +36,7 @@ import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleEvent;
 import org.apache.catalina.LifecycleListener;
 import org.apache.catalina.core.StandardContext;
+import org.apache.catalina.deploy.ApplicationListener;
 import org.apache.tomcat.JarScanner;
 import org.apache.tomcat.JarScannerCallback;
 import org.apache.tomcat.util.ExceptionUtils;
@@ -273,7 +274,8 @@ public final class TldConfig  implements LifecycleListener {
                     Integer.valueOf(list.length)));
 
         for( int i=0; list!=null && i<list.length; i++ ) {
-            context.addApplicationListener(list[i]);
+            context.addApplicationListener(
+                    new ApplicationListener(list[i], true));
         }
 
         long t2=System.currentTimeMillis();

==================================================
TestFormAuthenticator.java
index 85b8bad38c..5c326047c6 100644
--- a/java/org/apache/catalina/startup/WebAnnotationSet.java
+++ b/java/org/apache/catalina/startup/WebAnnotationSet.java
@@ -27,6 +27,7 @@ import javax.annotation.security.RunAs;
 import org.apache.catalina.Container;
 import org.apache.catalina.Context;
 import org.apache.catalina.Wrapper;
+import org.apache.catalina.deploy.ApplicationListener;
 import org.apache.catalina.deploy.ContextEnvironment;
 import org.apache.catalina.deploy.ContextResource;
 import org.apache.catalina.deploy.ContextResourceEnvRef;
@@ -78,10 +79,11 @@ public class WebAnnotationSet {
      */
     protected static void loadApplicationListenerAnnotations(Context context) {
         Class<?> classClass = null;
-        String[] applicationListeners = context.findApplicationListeners();
+        ApplicationListener[] applicationListeners =
+                context.findApplicationListeners();
         for (int i = 0; i < applicationListeners.length; i++) {
             classClass = Introspection.loadClass(context,
-                    applicationListeners[i]);
+                    applicationListeners[i].getClassName());
             if (classClass == null) {
                 continue;
             }

==================================================
TestAsyncContextImpl.java
index 69b9851286..e1ce29130e 100644
--- a/test/org/apache/catalina/authenticator/TestFormAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestFormAuthenticator.java
@@ -27,6 +27,7 @@ import org.junit.Test;
 
 import org.apache.catalina.Context;
 import org.apache.catalina.Valve;
+import org.apache.catalina.deploy.ApplicationListener;
 import org.apache.catalina.startup.SimpleHttpClient;
 import org.apache.catalina.startup.TestTomcat.MapRealm;
 import org.apache.catalina.startup.Tomcat;
@@ -381,7 +382,8 @@ public class TestFormAuthenticator extends TomcatBaseTest {
                     appDir.getAbsolutePath());
             setUseCookies(clientShouldUseCookies);
             ctx.setCookies(serverShouldUseCookies);
-            ctx.addApplicationListener(WsListener.class.getName());
+            ctx.addApplicationListener(new ApplicationListener(
+                    WsListener.class.getName(), false));
 
             MapRealm realm = new MapRealm();
             realm.addUser("tomcat", "tomcat");

==================================================
TestNamingContextListener.java
index ce72ed7e71..2cd13f7e7b 100644
--- a/test/org/apache/catalina/core/TestAsyncContextImpl.java
+++ b/test/org/apache/catalina/core/TestAsyncContextImpl.java
@@ -50,6 +50,7 @@ import org.junit.Test;
 import org.apache.catalina.Context;
 import org.apache.catalina.Wrapper;
 import org.apache.catalina.connector.Request;
+import org.apache.catalina.deploy.ApplicationListener;
 import org.apache.catalina.deploy.ErrorPage;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
@@ -440,7 +441,8 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
             ctx.addServletMapping(dispatchUrl, "nonasync");
         }
 
-        ctx.addApplicationListener(TrackingRequestListener.class.getName());
+        ctx.addApplicationListener(new ApplicationListener(
+                TrackingRequestListener.class.getName(), false));
 
         TesterAccessLogValve alv = new TesterAccessLogValve();
         ctx.getPipeline().addValve(alv);
@@ -570,7 +572,8 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         wrapper2.setAsyncSupported(true);
         ctx.addServletMapping("/stage2", "nonasync");
 
-        ctx.addApplicationListener(TrackingRequestListener.class.getName());
+        ctx.addApplicationListener(new ApplicationListener(
+                TrackingRequestListener.class.getName(), false));
 
         TesterAccessLogValve alv = new TesterAccessLogValve();
         ctx.getPipeline().addValve(alv);
@@ -907,7 +910,8 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         Tomcat.addServlet(ctx, "error", error);
         ctx.addServletMapping("/stage2", "error");
 
-        ctx.addApplicationListener(TrackingRequestListener.class.getName());
+        ctx.addApplicationListener(new ApplicationListener(
+                TrackingRequestListener.class.getName(), false));
 
         TesterAccessLogValve alv = new TesterAccessLogValve();
         ctx.getPipeline().addValve(alv);
@@ -1524,7 +1528,8 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
             ctx.addErrorPage(ep);
         }
 
-        ctx.addApplicationListener(TrackingRequestListener.class.getName());
+        ctx.addApplicationListener(new ApplicationListener(
+                TrackingRequestListener.class.getName(), false));
 
         TesterAccessLogValve alv = new TesterAccessLogValve();
         ctx.getPipeline().addValve(alv);

==================================================
TestStandardContext.java
index c7e7457c0a..0ed559ea35 100644
--- a/test/org/apache/catalina/core/TestNamingContextListener.java
+++ b/test/org/apache/catalina/core/TestNamingContextListener.java
@@ -27,6 +27,7 @@ import static org.junit.Assert.assertEquals;
 import org.junit.Test;
 
 import org.apache.catalina.LifecycleState;
+import org.apache.catalina.deploy.ApplicationListener;
 import org.apache.catalina.deploy.ContextEnvironment;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
@@ -61,7 +62,8 @@ public class TestNamingContextListener extends TomcatBaseTest {
         environment.setValue(BUG49132_VALUE);
         ctx.getNamingResources().addEnvironment(environment);
 
-        ctx.addApplicationListener(Bug49132Listener.class.getName());
+        ctx.addApplicationListener(new ApplicationListener(
+                Bug49132Listener.class.getName(), false));
 
         tomcat.start();
 
@@ -115,7 +117,8 @@ public class TestNamingContextListener extends TomcatBaseTest {
         environmentB.setValue(BUG54096_ValueB);
         ctx.getNamingResources().addEnvironment(environmentB);
 
-        ctx.addApplicationListener(Bug54096Listener.class.getName());
+        ctx.addApplicationListener(new ApplicationListener(
+                Bug54096Listener.class.getName(), false));
 
         tomcat.start();
 

==================================================
TesterContext.java
index c9840f7e27..a46b0f32d9 100644
--- a/test/org/apache/catalina/core/TestStandardContext.java
+++ b/test/org/apache/catalina/core/TestStandardContext.java
@@ -46,6 +46,7 @@ import static org.junit.Assert.assertNotSame;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
+import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
@@ -786,4 +787,23 @@ public class TestStandardContext extends TomcatBaseTest {
         standardContext.addPreDestroyMethod("a", "a");
         standardContext.addPreDestroyMethod("a", "b");
     }
+
+    @Test
+    public void testTldListener() throws Exception {
+        // Set up a container
+        Tomcat tomcat = getTomcatInstance();
+
+        File docBase = new File("test/webapp-3.0");
+        Context ctx = tomcat.addContext("", docBase.getAbsolutePath());
+
+        // Start the context
+        tomcat.start();
+
+        // Stop the context
+        ctx.stop();
+
+        String log = TesterTldListener.getLog();
+        Assert.assertTrue(log, log.contains("PASS"));
+        Assert.assertFalse(log, log.contains("FAIL"));
+    }
 }

==================================================
TesterTldListener.java
index f0637c7b38..27826229ae 100644
--- a/test/org/apache/catalina/core/TesterContext.java
+++ b/test/org/apache/catalina/core/TesterContext.java
@@ -48,6 +48,7 @@ import org.apache.catalina.WebResourceRoot;
 import org.apache.catalina.Wrapper;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
+import org.apache.catalina.deploy.ApplicationListener;
 import org.apache.catalina.deploy.ApplicationParameter;
 import org.apache.catalina.deploy.ErrorPage;
 import org.apache.catalina.deploy.FilterDef;
@@ -638,7 +639,7 @@ public class TesterContext implements Context {
     }
 
     @Override
-    public void addApplicationListener(String listener) {
+    public void addApplicationListener(ApplicationListener listener) {
         // NO-OP
     }
 
@@ -739,7 +740,7 @@ public class TesterContext implements Context {
     }
 
     @Override
-    public String[] findApplicationListeners() {
+    public ApplicationListener[] findApplicationListeners() {
         return null;
     }
 

==================================================
TestDefaultServlet.java
new file mode 100644
index 0000000000..6a560177c5
--- /dev/null
+++ b/test/org/apache/catalina/core/TesterTldListener.java
@@ -0,0 +1,51 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.core;
+
+import javax.servlet.ServletContext;
+import javax.servlet.ServletContextEvent;
+import javax.servlet.ServletContextListener;
+
+public class TesterTldListener implements ServletContextListener {
+
+    private static StringBuilder log = new StringBuilder();
+
+    public static String getLog() {
+        return log.toString();
+    }
+
+    @Override
+    public void contextInitialized(ServletContextEvent sce) {
+
+        ServletContext sc = sce.getServletContext();
+
+        // Try and use one of the Servlet 3.0 methods that should be blocked
+        try {
+            sc.getEffectiveMajorVersion();
+            log.append("FAIL");
+        } catch (UnsupportedOperationException uoe) {
+            log.append("PASS");
+        } catch (Exception e) {
+            log.append("FAIL");
+        }
+    }
+
+    @Override
+    public void contextDestroyed(ServletContextEvent sce) {
+        // NO-OP
+    }
+}

==================================================
TestWebdavServlet.java
index 1b07a3fe29..f4a4aa3d66 100644
--- a/test/org/apache/catalina/servlets/TestDefaultServlet.java
+++ b/test/org/apache/catalina/servlets/TestDefaultServlet.java
@@ -39,6 +39,7 @@ import org.junit.Test;
 
 import static org.apache.catalina.startup.SimpleHttpClient.CRLF;
 
+import org.apache.catalina.deploy.ApplicationListener;
 import org.apache.catalina.startup.SimpleHttpClient;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
@@ -101,7 +102,8 @@ public class TestDefaultServlet extends TomcatBaseTest {
         // app dir is relative to server home
         org.apache.catalina.Context ctx =
             tomcat.addWebapp(null, "/examples", appDir.getAbsolutePath());
-        ctx.addApplicationListener(WsListener.class.getName());
+        ctx.addApplicationListener(new ApplicationListener(
+                WsListener.class.getName(), false));
 
         // Override the default servlet with our own mappings
         Tomcat.addServlet(ctx, "default2", new DefaultServlet());

==================================================
TestListener.java
index 9636c9b78a..12706e16ba 100644
--- a/test/org/apache/catalina/servlets/TestWebdavServlet.java
+++ b/test/org/apache/catalina/servlets/TestWebdavServlet.java
@@ -27,6 +27,7 @@ import static org.junit.Assert.assertEquals;
 
 import org.junit.Test;
 
+import org.apache.catalina.deploy.ApplicationListener;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.tomcat.util.buf.ByteChunk;
@@ -94,7 +95,8 @@ public class TestWebdavServlet extends TomcatBaseTest {
 
         Tomcat.addServlet(ctx, "webdav", new WebdavServlet());
         ctx.addServletMapping("/webdav/*", "webdav");
-        ctx.addApplicationListener(WsListener.class.getName());
+        ctx.addApplicationListener(new ApplicationListener(
+                WsListener.class.getName(), false));
 
         tomcat.start();
 

==================================================
TestTomcat.java
index e5a40a0f6a..344a2f2a6a 100644
--- a/test/org/apache/catalina/startup/TestListener.java
+++ b/test/org/apache/catalina/startup/TestListener.java
@@ -30,6 +30,7 @@ import static org.junit.Assert.assertTrue;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
+import org.apache.catalina.deploy.ApplicationListener;
 
 public class TestListener extends TomcatBaseTest {
 
@@ -64,7 +65,8 @@ public class TestListener extends TomcatBaseTest {
 
         // SCL2 pretends to be in web.xml, and tries to install a
         // ServletContextInitializer.
-        context.addApplicationListener(SCL2.class.getName());
+        context.addApplicationListener(new ApplicationListener(
+                SCL2.class.getName(), false));
         tomcat.start();
 
         //check that the ServletContextInitializer wasn't initialized.

==================================================
TestCustomSsl.java
index a1fa95e263..53f4e89177 100644
--- a/test/org/apache/catalina/startup/TestTomcat.java
+++ b/test/org/apache/catalina/startup/TestTomcat.java
@@ -45,6 +45,7 @@ import static org.junit.Assert.assertTrue;
 
 import org.junit.Test;
 
+import org.apache.catalina.deploy.ApplicationListener;
 import org.apache.catalina.deploy.ContextEnvironment;
 import org.apache.catalina.deploy.ContextResourceLink;
 import org.apache.catalina.realm.GenericPrincipal;
@@ -262,7 +263,8 @@ public class TestTomcat extends TomcatBaseTest {
         // app dir is relative to server home
         org.apache.catalina.Context ctxt  = tomcat.addWebapp(
                 null, "/examples", appDir.getAbsolutePath());
-        ctxt.addApplicationListener(WsListener.class.getName());
+        ctxt.addApplicationListener(new ApplicationListener(
+                WsListener.class.getName(), false));
         tomcat.start();
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
@@ -278,7 +280,8 @@ public class TestTomcat extends TomcatBaseTest {
         // app dir is relative to server home
         org.apache.catalina.Context ctxt  = tomcat.addWebapp(
                 null, "/examples", appDir.getAbsolutePath());
-        ctxt.addApplicationListener(WsListener.class.getName());
+        ctxt.addApplicationListener(new ApplicationListener(
+                WsListener.class.getName(), false));
 
         tomcat.start();
 
@@ -398,7 +401,8 @@ public class TestTomcat extends TomcatBaseTest {
         // app dir is relative to server home
         org.apache.catalina.Context ctx =
             tomcat.addWebapp(null, "/examples", appDir.getAbsolutePath());
-        ctx.addApplicationListener(WsListener.class.getName());
+        ctx.addApplicationListener(new ApplicationListener(
+                WsListener.class.getName(), false));
 
         Tomcat.addServlet(ctx, "testGetResource", new GetResource());
         ctx.addServletMapping("/testGetResource", "testGetResource");

==================================================
TestSsl.java
index 554d00e3b8..2799b0f49d 100644
--- a/test/org/apache/tomcat/util/net/TestCustomSsl.java
+++ b/test/org/apache/tomcat/util/net/TestCustomSsl.java
@@ -29,6 +29,7 @@ import org.junit.Test;
 
 import org.apache.catalina.Context;
 import org.apache.catalina.connector.Connector;
+import org.apache.catalina.deploy.ApplicationListener;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.coyote.ProtocolHandler;
@@ -74,7 +75,8 @@ public class TestCustomSsl extends TomcatBaseTest {
         File appDir = new File(getBuildDirectory(), "webapps/examples");
         Context ctxt  = tomcat.addWebapp(
                 null, "/examples", appDir.getAbsolutePath());
-        ctxt.addApplicationListener(WsListener.class.getName());
+        ctxt.addApplicationListener(new ApplicationListener(
+                WsListener.class.getName(), false));
 
         tomcat.start();
         ByteChunk res = getUrl("https://localhost:" + getPort() +

==================================================
TestWsRemoteEndpoint.java
index 651b178e8d..91033b0634 100644
--- a/test/org/apache/tomcat/util/net/TestSsl.java
+++ b/test/org/apache/tomcat/util/net/TestSsl.java
@@ -36,6 +36,7 @@ import static org.junit.Assert.fail;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
+import org.apache.catalina.deploy.ApplicationListener;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.tomcat.util.buf.ByteChunk;
@@ -57,7 +58,8 @@ public class TestSsl extends TomcatBaseTest {
         File appDir = new File(getBuildDirectory(), "webapps/examples");
         org.apache.catalina.Context ctxt  = tomcat.addWebapp(
                 null, "/examples", appDir.getAbsolutePath());
-        ctxt.addApplicationListener(WsListener.class.getName());
+        ctxt.addApplicationListener(new ApplicationListener(
+                WsListener.class.getName(), false));
 
         TesterSupport.initSsl(tomcat);
 
@@ -76,7 +78,8 @@ public class TestSsl extends TomcatBaseTest {
         File appDir = new File(getBuildDirectory(), "webapps/examples");
         org.apache.catalina.Context ctxt  = tomcat.addWebapp(
                 null, "/examples", appDir.getAbsolutePath());
-        ctxt.addApplicationListener(WsListener.class.getName());
+        ctxt.addApplicationListener(new ApplicationListener(
+                WsListener.class.getName(), false));
 
         TesterSupport.initSsl(tomcat, "localhost-copy1.jks", "changeit",
                 "tomcatpass");
@@ -168,9 +171,10 @@ public class TestSsl extends TomcatBaseTest {
 
         File appDir = new File(getBuildDirectory(), "webapps/examples");
         // app dir is relative to server home
-        Context ctx = tomcat.addWebapp(null, "/examples",
+        Context ctxt = tomcat.addWebapp(null, "/examples",
                 appDir.getAbsolutePath());
-        ctx.addApplicationListener(WsListener.class.getName());
+        ctxt.addApplicationListener(new ApplicationListener(
+                WsListener.class.getName(), false));
 
         TesterSupport.initSsl(tomcat);
 

==================================================
TestWsWebSocketContainer.java
index ea29ccec98..e707c2a82c 100644
--- a/test/org/apache/tomcat/websocket/TestWsRemoteEndpoint.java
+++ b/test/org/apache/tomcat/websocket/TestWsRemoteEndpoint.java
@@ -32,6 +32,7 @@ import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
+import org.apache.catalina.deploy.ApplicationListener;
 import org.apache.catalina.servlets.DefaultServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
@@ -70,7 +71,8 @@ public class TestWsRemoteEndpoint extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
+        ctx.addApplicationListener(new ApplicationListener(
+                TesterEchoServer.Config.class.getName(), false));
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 

==================================================
TestEncodingDecoding.java
index 91f9009425..f64a3548ae 100644
--- a/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
+++ b/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
@@ -44,6 +44,7 @@ import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
+import org.apache.catalina.deploy.ApplicationListener;
 import org.apache.catalina.servlets.DefaultServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
@@ -81,7 +82,8 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
+        ctx.addApplicationListener(new ApplicationListener(
+                TesterEchoServer.Config.class.getName(), false));
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 
@@ -115,7 +117,8 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
+        ctx.addApplicationListener(new ApplicationListener(
+                TesterEchoServer.Config.class.getName(), false));
 
         tomcat.start();
 
@@ -134,7 +137,8 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
+        ctx.addApplicationListener(new ApplicationListener(
+                TesterEchoServer.Config.class.getName(), false));
 
         tomcat.start();
 
@@ -201,7 +205,8 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
+        ctx.addApplicationListener(new ApplicationListener(
+                TesterEchoServer.Config.class.getName(), false));
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 
@@ -303,7 +308,8 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(BlockingConfig.class.getName());
+        ctx.addApplicationListener(new ApplicationListener(
+                BlockingConfig.class.getName(), false));
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 
@@ -390,7 +396,8 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(ConstantTxConfig.class.getName());
+        ctx.addApplicationListener(new ApplicationListener(
+                ConstantTxConfig.class.getName(), false));
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 
@@ -571,7 +578,8 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
+        ctx.addApplicationListener(new ApplicationListener(
+                TesterEchoServer.Config.class.getName(), false));
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 
@@ -615,7 +623,8 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
+        ctx.addApplicationListener(new ApplicationListener(
+                TesterEchoServer.Config.class.getName(), false));
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 
@@ -669,7 +678,8 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
+        ctx.addApplicationListener(new ApplicationListener(
+                TesterEchoServer.Config.class.getName(), false));
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 
@@ -753,7 +763,8 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
+        ctx.addApplicationListener(new ApplicationListener(
+                TesterEchoServer.Config.class.getName(), false));
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 

==================================================
TestPojoEndpointBase.java
index 9579afedb2..e55fada586 100644
--- a/test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java
+++ b/test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java
@@ -37,11 +37,13 @@ import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
+import org.apache.catalina.deploy.ApplicationListener;
 import org.apache.catalina.servlets.DefaultServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.tomcat.websocket.pojo.Util.ServerConfigListener;
 import org.apache.tomcat.websocket.pojo.Util.SingletonConfigurator;
+import org.apache.tomcat.websocket.server.WsListener;
 
 public class TestEncodingDecoding extends TomcatBaseTest {
 
@@ -59,7 +61,8 @@ public class TestEncodingDecoding extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(ServerConfigListener.class.getName());
+        ctx.addApplicationListener(new ApplicationListener(
+                WsListener.class.getName(), false));
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 

==================================================
TestPojoMethodMapping.java
index 16807888e8..e352c1dfbd 100644
--- a/test/org/apache/tomcat/websocket/pojo/TestPojoEndpointBase.java
+++ b/test/org/apache/tomcat/websocket/pojo/TestPojoEndpointBase.java
@@ -31,11 +31,13 @@ import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
+import org.apache.catalina.deploy.ApplicationListener;
 import org.apache.catalina.servlets.DefaultServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.tomcat.websocket.pojo.Util.ServerConfigListener;
 import org.apache.tomcat.websocket.pojo.Util.SingletonConfigurator;
+import org.apache.tomcat.websocket.server.WsListener;
 
 
 public class TestPojoEndpointBase extends TomcatBaseTest {
@@ -51,7 +53,8 @@ public class TestPojoEndpointBase extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(ServerConfigListener.class.getName());
+        ctx.addApplicationListener(new ApplicationListener(
+                WsListener.class.getName(), false));
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 

==================================================
TestWebSocketServerContainer.java
index 63a09d4b43..1f332396ff 100644
--- a/test/org/apache/tomcat/websocket/pojo/TestPojoMethodMapping.java
+++ b/test/org/apache/tomcat/websocket/pojo/TestPojoMethodMapping.java
@@ -33,12 +33,14 @@ import org.junit.Assert;
 import org.junit.Test;
 
 import org.apache.catalina.Context;
+import org.apache.catalina.deploy.ApplicationListener;
 import org.apache.catalina.servlets.DefaultServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.tomcat.websocket.pojo.Util.ServerConfigListener;
 import org.apache.tomcat.websocket.pojo.Util.SimpleClient;
 import org.apache.tomcat.websocket.pojo.Util.SingletonConfigurator;
+import org.apache.tomcat.websocket.server.WsListener;
 
 public class TestPojoMethodMapping extends TomcatBaseTest {
 
@@ -58,7 +60,8 @@ public class TestPojoMethodMapping extends TomcatBaseTest {
         // Must have a real docBase - just use temp
         Context ctx =
             tomcat.addContext("", System.getProperty("java.io.tmpdir"));
-        ctx.addApplicationListener(ServerConfigListener.class.getName());
+        ctx.addApplicationListener(new ApplicationListener(
+                WsListener.class.getName(), false));
         Tomcat.addServlet(ctx, "default", new DefaultServlet());
         ctx.addServletMapping("/", "default");
 

==================================================
