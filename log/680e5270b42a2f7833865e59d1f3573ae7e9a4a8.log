680e5270b42a2f7833865e59d1f3573ae7e9a4a8
==================================================
Pull up AsyncTimeout
==================================================
Mark Emlyn
==================================================
Tue Jun 10 09:52:56 2014 +0000
==================================================
AbstractEndpoint.java
Pull up AsyncTimeout
APR/native used a separate flag to stop the thread. This avoided issues where running was set true->false-true in quick succession. This fix is now available to NIO2 and BIO as well.
Note NIO does not (currently) use the AsyncTimeout

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1601590 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AprEndpoint.java
index 2250da02a0..e49c47af30 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -99,6 +99,60 @@ public abstract class AbstractEndpoint<S> {
     private static final int INITIAL_ERROR_DELAY = 50;
     private static final int MAX_ERROR_DELAY = 1600;
 
+
+    /**
+     * Async timeout thread
+     */
+    protected class AsyncTimeout implements Runnable {
+
+        private volatile boolean asyncTimeoutRunning = true;
+
+        /**
+         * The background thread that checks async requests and fires the
+         * timeout if there has been no activity.
+         */
+        @Override
+        public void run() {
+
+            // Loop until we receive a shutdown command
+            while (asyncTimeoutRunning) {
+                try {
+                    Thread.sleep(1000);
+                } catch (InterruptedException e) {
+                    // Ignore
+                }
+                long now = System.currentTimeMillis();
+                Iterator<SocketWrapper<S>> sockets = waitingRequests.keySet().iterator();
+                while (sockets.hasNext()) {
+                    SocketWrapper<S> socket = sockets.next();
+                    if (socket.isAsync()) {
+                        long access = socket.getLastAccess();
+                        if (socket.getTimeout() > 0 &&
+                                (now-access) > socket.getTimeout()) {
+                            processSocket(socket, SocketStatus.TIMEOUT, true);
+                        }
+                    }
+                }
+
+                // Loop if endpoint is paused
+                while (paused && asyncTimeoutRunning) {
+                    try {
+                        Thread.sleep(1000);
+                    } catch (InterruptedException e) {
+                        // Ignore
+                    }
+                }
+
+            }
+        }
+
+
+        protected void stop() {
+            asyncTimeoutRunning = false;
+        }
+    }
+
+
     // ----------------------------------------------------------------- Fields
 
 
@@ -977,5 +1031,17 @@ public abstract class AbstractEndpoint<S> {
 
     protected ConcurrentHashMap<SocketWrapper<S>, SocketWrapper<S>> waitingRequests =
             new ConcurrentHashMap<>();
+
+
+    /**
+     * The async timeout thread.
+     */
+    private AsyncTimeout asyncTimeout = null;
+    public AsyncTimeout getAsyncTimeout() {
+        return asyncTimeout;
+    }
+    public void setAsyncTimeout(AsyncTimeout asyncTimeout) {
+        this.asyncTimeout = asyncTimeout;
+    }
 }
 

==================================================
JIoEndpoint.java
index c87a8777c4..21e17d10b0 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -18,7 +18,6 @@ package org.apache.tomcat.util.net;
 
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Executor;
@@ -190,15 +189,6 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
     }
 
 
-    /**
-     * The socket poller.
-     */
-    protected AsyncTimeout asyncTimeout = null;
-    public AsyncTimeout getAsyncTimeout() {
-        return asyncTimeout;
-    }
-
-
     /**
      * The static file sender.
      */
@@ -640,9 +630,8 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
             startAcceptorThreads();
 
             // Start async timeout thread
-            asyncTimeout = new AsyncTimeout();
-            Thread timeoutThread = new Thread(asyncTimeout,
-                    getName() + "-AsyncTimeout");
+            setAsyncTimeout(new AsyncTimeout());
+            Thread timeoutThread = new Thread(getAsyncTimeout(), getName() + "-AsyncTimeout");
             timeoutThread.setPriority(threadPriority);
             timeoutThread.setDaemon(true);
             timeoutThread.start();
@@ -662,7 +651,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
         if (running) {
             running = false;
             poller.stop();
-            asyncTimeout.stop();
+            getAsyncTimeout().stop();
             unlockAccept();
             for (AbstractEndpoint.Acceptor acceptor : acceptors) {
                 long waitLeft = 10000;
@@ -1048,59 +1037,6 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
     }
 
 
-    /**
-     * Async timeout thread
-     */
-    protected class AsyncTimeout implements Runnable {
-
-        private volatile boolean asyncTimeoutRunning = true;
-
-        /**
-         * The background thread that checks async requests and fires the
-         * timeout if there has been no activity.
-         */
-        @Override
-        public void run() {
-
-            // Loop until we receive a shutdown command
-            while (asyncTimeoutRunning) {
-                try {
-                    Thread.sleep(1000);
-                } catch (InterruptedException e) {
-                    // Ignore
-                }
-                long now = System.currentTimeMillis();
-                Iterator<SocketWrapper<Long>> sockets = waitingRequests.keySet().iterator();
-                while (sockets.hasNext()) {
-                    SocketWrapper<Long> socket = sockets.next();
-                    if (socket.isAsync()) {
-                        long access = socket.getLastAccess();
-                        if (socket.getTimeout() > 0 &&
-                                (now-access) > socket.getTimeout()) {
-                            processSocket(socket, SocketStatus.TIMEOUT, true);
-                        }
-                    }
-                }
-
-                // Loop if endpoint is paused
-                while (paused && asyncTimeoutRunning) {
-                    try {
-                        Thread.sleep(1000);
-                    } catch (InterruptedException e) {
-                        // Ignore
-                    }
-                }
-
-            }
-        }
-
-
-        protected void stop() {
-            asyncTimeoutRunning = false;
-        }
-    }
-
-
     // -------------------------------------------------- SocketInfo Inner Class
 
     public static class SocketInfo {

==================================================
Nio2Endpoint.java
index e9a5ef4b99..e8aa638fad 100644
--- a/java/org/apache/tomcat/util/net/JIoEndpoint.java
+++ b/java/org/apache/tomcat/util/net/JIoEndpoint.java
@@ -21,7 +21,6 @@ import java.net.BindException;
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.net.SocketException;
-import java.util.Iterator;
 import java.util.concurrent.Executor;
 import java.util.concurrent.RejectedExecutionException;
 
@@ -143,51 +142,6 @@ public class JIoEndpoint extends AbstractEndpoint<Socket> {
     }
 
 
-    /**
-     * Async timeout thread
-     */
-    protected class AsyncTimeout implements Runnable {
-        /**
-         * The background thread that checks async requests and fires the
-         * timeout if there has been no activity.
-         */
-        @Override
-        public void run() {
-
-            // Loop until we receive a shutdown command
-            while (running) {
-                try {
-                    Thread.sleep(1000);
-                } catch (InterruptedException e) {
-                    // Ignore
-                }
-                long now = System.currentTimeMillis();
-                Iterator<SocketWrapper<Socket>> sockets = waitingRequests.keySet().iterator();
-                while (sockets.hasNext()) {
-                    SocketWrapper<Socket> socket = sockets.next();
-                    if (socket.isAsync()) {
-                        long access = socket.getLastAccess();
-                        if (socket.getTimeout() > 0 &&
-                                (now-access) > socket.getTimeout()) {
-                            processSocket(socket, SocketStatus.TIMEOUT, true);
-                        }
-                    }
-                }
-
-                // Loop if endpoint is paused
-                while (paused && running) {
-                    try {
-                        Thread.sleep(1000);
-                    } catch (InterruptedException e) {
-                        // Ignore
-                    }
-                }
-
-            }
-        }
-    }
-
-
     // --------------------------------------------------- Acceptor Inner Class
     /**
      * The background thread that listens for incoming TCP/IP connections and
@@ -441,8 +395,8 @@ public class JIoEndpoint extends AbstractEndpoint<Socket> {
             startAcceptorThreads();
 
             // Start async timeout thread
-            Thread timeoutThread = new Thread(new AsyncTimeout(),
-                    getName() + "-AsyncTimeout");
+            setAsyncTimeout(new AsyncTimeout());
+            Thread timeoutThread = new Thread(getAsyncTimeout(), getName() + "-AsyncTimeout");
             timeoutThread.setPriority(threadPriority);
             timeoutThread.setDaemon(true);
             timeoutThread.start();
@@ -457,6 +411,7 @@ public class JIoEndpoint extends AbstractEndpoint<Socket> {
         }
         if (running) {
             running = false;
+            getAsyncTimeout().stop();
             unlockAccept();
         }
         shutdownExecutor();

==================================================
