b5c8c1ce5a3e1f000c400257a8de65d6d9f95bc5
==================================================
Generics
==================================================
Mark Emlyn
==================================================
Tue Nov 17 22:03:22 2009 +0000
==================================================
ByteArrayOutputStream.java
Generics

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@881562 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DiskFileItem.java
index 21e7c15f70..9a1908bb79 100644
--- a/java/org/apache/tomcat/util/http/fileupload/ByteArrayOutputStream.java
+++ b/java/org/apache/tomcat/util/http/fileupload/ByteArrayOutputStream.java
@@ -54,7 +54,7 @@ public class ByteArrayOutputStream extends OutputStream {
     private static final byte[] EMPTY_BYTE_ARRAY = new byte[0];
 
     /** The list of buffers, which grows and never reduces. */
-    private List buffers = new ArrayList();
+    private List<byte[]> buffers = new ArrayList<byte[]>();
     /** The index of the current buffer. */
     private int currentBufferIndex;
     /** The total count of bytes in all the filled buffers. */
@@ -95,7 +95,7 @@ public class ByteArrayOutputStream extends OutputStream {
      * @return the buffer
      */
     private byte[] getBuffer(int index) {
-        return (byte[]) buffers.get(index);
+        return buffers.get(index);
     }
 
     /**

==================================================
FileCleaningTracker.java
index f1e7251a68..3d48a0d074 100644
--- a/java/org/apache/tomcat/util/http/fileupload/DiskFileItem.java
+++ b/java/org/apache/tomcat/util/http/fileupload/DiskFileItem.java
@@ -252,8 +252,8 @@ public class DiskFileItem
         ParameterParser parser = new ParameterParser();
         parser.setLowerCaseNames(true);
         // Parameter parser can handle null input
-        Map params = parser.parse(getContentType(), ';');
-        return (String) params.get("charset");
+        Map<String,String> params = parser.parse(getContentType(), ';');
+        return params.get("charset");
     }
 
 

==================================================
FileItemHeaders.java
index 360a06b2ec..6b106b562b 100644
--- a/java/org/apache/tomcat/util/http/fileupload/FileCleaningTracker.java
+++ b/java/org/apache/tomcat/util/http/fileupload/FileCleaningTracker.java
@@ -48,7 +48,7 @@ public class FileCleaningTracker {
     /**
      * Collection of <code>Tracker</code> instances in existence.
      */
-    final Collection /* Tracker */ trackers = new Vector();  // synchronized
+    final Collection<Tracker> trackers = new Vector<Tracker>();  // synchronized
     /**
      * Whether to terminate the thread when the tracking is complete.
      */

==================================================
FileItemHeadersImpl.java
index 7d46743d56..87c5f0a9d4 100644
--- a/java/org/apache/tomcat/util/http/fileupload/FileItemHeaders.java
+++ b/java/org/apache/tomcat/util/http/fileupload/FileItemHeaders.java
@@ -57,7 +57,7 @@ public interface FileItemHeaders {
      *         requested header. If the item does not have any headers of
      *         that name, return an empty <code>Enumeration</code>
      */
-    Iterator getHeaders(String name);
+    Iterator<String> getHeaders(String name);
 
     /**
      * <p>
@@ -73,5 +73,5 @@ public interface FileItemHeaders {
      *         requested header. If the item does not have any headers of
      *         that name return an empty <code>Enumeration</code>
      */
-    Iterator getHeaderNames();
+    Iterator<String> getHeaderNames();
 }

==================================================
FileUploadBase.java
index 0c6ee19d32..2e77cf8bf8 100644
--- a/java/org/apache/tomcat/util/http/fileupload/FileItemHeadersImpl.java
+++ b/java/org/apache/tomcat/util/http/fileupload/FileItemHeadersImpl.java
@@ -38,33 +38,34 @@ public class FileItemHeadersImpl implements FileItemHeaders, Serializable {
      * Map of <code>String</code> keys to a <code>List</code> of
      * <code>String</code> instances.
      */
-    private final Map headerNameToValueListMap = new HashMap();
+    private final Map<String,List<String>> headerNameToValueListMap =
+        new HashMap<String,List<String>>();
 
     /**
      * List to preserve order of headers as added.  This would not be
      * needed if a <code>LinkedHashMap</code> could be used, but don't
      * want to depend on 1.4.
      */
-    private final List headerNameList = new ArrayList();
+    private final List<String> headerNameList = new ArrayList<String>();
 
     public String getHeader(String name) {
         String nameLower = name.toLowerCase();
-        List headerValueList = (List) headerNameToValueListMap.get(nameLower);
+        List<String> headerValueList = headerNameToValueListMap.get(nameLower);
         if (null == headerValueList) {
             return null;
         }
-        return (String) headerValueList.get(0);
+        return headerValueList.get(0);
     }
 
-    public Iterator getHeaderNames() {
+    public Iterator<String> getHeaderNames() {
         return headerNameList.iterator();
     }
 
-    public Iterator getHeaders(String name) {
+    public Iterator<String> getHeaders(String name) {
         String nameLower = name.toLowerCase();
-        List headerValueList = (List) headerNameToValueListMap.get(nameLower);
+        List<String> headerValueList = headerNameToValueListMap.get(nameLower);
         if (null == headerValueList) {
-            return Collections.EMPTY_LIST.iterator();
+            return Collections.<String>emptyList().iterator();
         }
         return headerValueList.iterator();
     }
@@ -77,9 +78,9 @@ public class FileItemHeadersImpl implements FileItemHeaders, Serializable {
      */
     public synchronized void addHeader(String name, String value) {
         String nameLower = name.toLowerCase();
-        List headerValueList = (List) headerNameToValueListMap.get(nameLower);
+        List<String> headerValueList = headerNameToValueListMap.get(nameLower);
         if (null == headerValueList) {
-            headerValueList = new ArrayList();
+            headerValueList = new ArrayList<String>();
             headerNameToValueListMap.put(nameLower, headerValueList);
             headerNameList.add(nameLower);
         }

==================================================
MultipartStream.java
index 46d20a17ad..718f690d59 100644
--- a/java/org/apache/tomcat/util/http/fileupload/FileUploadBase.java
+++ b/java/org/apache/tomcat/util/http/fileupload/FileUploadBase.java
@@ -290,11 +290,11 @@ public abstract class FileUploadBase {
      * @throws FileUploadException if there are problems reading/parsing
      *                             the request or storing files.
      */
-    public List /* FileItem */ parseRequest(RequestContext ctx)
+    public List<FileItem> parseRequest(RequestContext ctx)
             throws FileUploadException {
         try {
             FileItemIterator iter = getItemIterator(ctx);
-            List items = new ArrayList();
+            List<FileItem> items = new ArrayList<FileItem>();
             FileItemFactory fac = getFileItemFactory();
             if (fac == null) {
                 throw new NullPointerException(
@@ -345,8 +345,9 @@ public abstract class FileUploadBase {
         ParameterParser parser = new ParameterParser();
         parser.setLowerCaseNames(true);
         // Parameter parser can handle null input
-        Map params = parser.parse(contentType, new char[] {';', ','});
-        String boundaryStr = (String) params.get("boundary");
+        Map<String,String> params =
+            parser.parse(contentType, new char[] {';', ','});
+        String boundaryStr = params.get("boundary");
 
         if (boundaryStr == null) {
             return null;
@@ -386,9 +387,10 @@ public abstract class FileUploadBase {
                 ParameterParser parser = new ParameterParser();
                 parser.setLowerCaseNames(true);
                 // Parameter parser can handle null input
-                Map params = parser.parse(pContentDisposition, ';');
+                Map<String,String> params =
+                    parser.parse(pContentDisposition, ';');
                 if (params.containsKey("filename")) {
-                    fileName = (String) params.get("filename");
+                    fileName = params.get("filename");
                     if (fileName != null) {
                         fileName = fileName.trim();
                     } else {
@@ -429,8 +431,9 @@ public abstract class FileUploadBase {
             ParameterParser parser = new ParameterParser();
             parser.setLowerCaseNames(true);
             // Parameter parser can handle null input
-            Map params = parser.parse(pContentDisposition, ';');
-            fieldName = (String) params.get("name");
+            Map<String,String> params =
+                parser.parse(pContentDisposition, ';');
+            fieldName = params.get("name");
             if (fieldName != null) {
                 fieldName = fieldName.trim();
             }
@@ -1013,6 +1016,9 @@ public abstract class FileUploadBase {
      * is exceeded.
      */
     protected abstract static class SizeException extends FileUploadException {
+
+        private static final long serialVersionUID = 1L;
+
         /**
          * The actual size of the request.
          */

==================================================
ParameterParser.java
index 20c28fa6ee..88c8f722f7 100644
--- a/java/org/apache/tomcat/util/http/fileupload/MultipartStream.java
+++ b/java/org/apache/tomcat/util/http/fileupload/MultipartStream.java
@@ -680,7 +680,10 @@ public class MultipartStream {
      * required syntax.
      */
     public static class MalformedStreamException
-    extends IOException {
+            extends IOException {
+
+        private static final long serialVersionUID = 1L;
+
         /**
          * Constructs a <code>MalformedStreamException</code> with no
          * detail message.
@@ -706,6 +709,9 @@ public class MultipartStream {
      */
     public static class IllegalBoundaryException
             extends IOException {
+
+        private static final long serialVersionUID = 1L;
+
         /**
          * Constructs an <code>IllegalBoundaryException</code> with no
          * detail message.

==================================================
ServletFileUpload.java
index dce150777f..f2d3aa2b0b 100644
--- a/java/org/apache/tomcat/util/http/fileupload/ParameterParser.java
+++ b/java/org/apache/tomcat/util/http/fileupload/ParameterParser.java
@@ -224,9 +224,9 @@ public class ParameterParser {
      *
      * @return a map of name/value pairs
      */
-    public Map parse(final String str, char[] separators) {
+    public Map<String,String> parse(final String str, char[] separators) {
         if (separators == null || separators.length == 0) {
-            return new HashMap();
+            return new HashMap<String,String>();
         }
         char separator = separators[0];
         if (str != null) {
@@ -253,9 +253,9 @@ public class ParameterParser {
      *
      * @return a map of name/value pairs
      */
-    public Map parse(final String str, char separator) {
+    public Map<String,String> parse(final String str, char separator) {
         if (str == null) {
-            return new HashMap();
+            return new HashMap<String,String>();
         }
         return parse(str.toCharArray(), separator);
     }
@@ -270,11 +270,11 @@ public class ParameterParser {
      *
      * @return a map of name/value pairs
      */
-    public Map parse(final char[] chars, char separator) {
-        if (chars == null) {
-            return new HashMap();
+    public Map<String,String> parse(final char[] inputChars, char separator) {
+        if (inputChars == null) {
+            return new HashMap<String,String>();
         }
-        return parse(chars, 0, chars.length, separator);
+        return parse(inputChars, 0, inputChars.length, separator);
     }
 
     /**
@@ -289,17 +289,17 @@ public class ParameterParser {
      *
      * @return a map of name/value pairs
      */
-    public Map parse(
-        final char[] chars,
+    public Map<String,String> parse(
+        final char[] inputChars,
         int offset,
         int length,
         char separator) {
 
         if (chars == null) {
-            return new HashMap();
+            return new HashMap<String,String>();
         }
-        HashMap params = new HashMap();
-        this.chars = chars;
+        HashMap<String,String> params = new HashMap<String,String>();
+        this.chars = inputChars;
         this.pos = offset;
         this.len = length;
 

==================================================
