31aab10ee126f6e365f58cce56acf5eb1974658b
==================================================
Follow-up to r1800867
==================================================
Mark Thomas
==================================================
Wed Jul 5 13:51:27 2017 +0000
==================================================
JSSEKeyManager.java
Follow-up to r1800867
Avoid NPE when no alias is specified.
Now an in memory key store with a single key is used, there is no need for the JSSEKeyManager - so remove it.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1800874 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JSSEUtil.java
deleted file mode 100644
index e68e0df03f..0000000000
--- a/java/org/apache/tomcat/util/net/jsse/JSSEKeyManager.java
+++ /dev/null
@@ -1,123 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package org.apache.tomcat.util.net.jsse;
-
-import java.net.Socket;
-import java.security.Principal;
-import java.security.PrivateKey;
-import java.security.cert.X509Certificate;
-
-import javax.net.ssl.SSLEngine;
-import javax.net.ssl.X509ExtendedKeyManager;
-import javax.net.ssl.X509KeyManager;
-
-/**
- * X509KeyManager which allows selection of a specific keypair and certificate
- * chain (identified by their keystore alias name) to be used by the server to
- * authenticate itself to SSL clients.
- *
- * @author Jan Luehe
- */
-public final class JSSEKeyManager extends X509ExtendedKeyManager {
-
-    private X509KeyManager delegate;
-    private String serverKeyAlias;
-
-
-    /**
-     * Constructor.
-     *
-     * @param mgr The X509KeyManager used as a delegate
-     * @param serverKeyAlias The alias name of the server's keypair and
-     * supporting certificate chain
-     */
-    public JSSEKeyManager(X509KeyManager mgr, String serverKeyAlias) {
-        super();
-        this.delegate = mgr;
-        this.serverKeyAlias = serverKeyAlias;
-    }
-
-
-    /**
-     * Returns the server key alias that was provided in the constructor or the
-     * result from {@link X509KeyManager#chooseServerAlias(String, Principal[],
-     * Socket)} for the delegate if no alias is specified.
-     */
-    @Override
-    public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {
-        if (serverKeyAlias != null) {
-            return serverKeyAlias;
-        }
-
-        return delegate.chooseServerAlias(keyType, issuers, socket);
-    }
-
-
-    /**
-     * Returns the server key alias that was provided in the constructor or the
-     * result from {@link X509ExtendedKeyManager#chooseEngineServerAlias(String,
-     * Principal[], SSLEngine)} for the delegate if no alias is specified.
-     */
-    @Override
-    public String chooseEngineServerAlias(String keyType, Principal[] issuers,
-            SSLEngine engine) {
-        if (serverKeyAlias!=null) {
-            return serverKeyAlias;
-        }
-
-        return super.chooseEngineServerAlias(keyType, issuers, engine);
-    }
-
-
-    @Override
-    public String chooseClientAlias(String[] keyType, Principal[] issuers,
-                                    Socket socket) {
-        return delegate.chooseClientAlias(keyType, issuers, socket);
-    }
-
-
-    @Override
-    public X509Certificate[] getCertificateChain(String alias) {
-        return delegate.getCertificateChain(alias);
-    }
-
-
-    @Override
-    public String[] getClientAliases(String keyType, Principal[] issuers) {
-        return delegate.getClientAliases(keyType, issuers);
-    }
-
-
-    @Override
-    public String[] getServerAliases(String keyType, Principal[] issuers) {
-        return delegate.getServerAliases(keyType, issuers);
-    }
-
-
-    @Override
-    public PrivateKey getPrivateKey(String alias) {
-        return delegate.getPrivateKey(alias);
-    }
-
-
-    @Override
-    public String chooseEngineClientAlias(String[] keyType, Principal[] issuers,
-            SSLEngine engine) {
-        return delegate.chooseClientAlias(keyType, issuers, null);
-    }
-}

==================================================
OpenSSLContext.java
index 7c72843e04..7d3853a7d5 100644
--- a/java/org/apache/tomcat/util/net/jsse/JSSEUtil.java
+++ b/java/org/apache/tomcat/util/net/jsse/JSSEUtil.java
@@ -52,7 +52,6 @@ import javax.net.ssl.ManagerFactoryParameters;
 import javax.net.ssl.SSLSessionContext;
 import javax.net.ssl.TrustManager;
 import javax.net.ssl.TrustManagerFactory;
-import javax.net.ssl.X509KeyManager;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -171,7 +170,6 @@ public class JSSEUtil extends SSLUtilBase {
 
     @Override
     public KeyManager[] getKeyManagers() throws Exception {
-        String keystoreType = certificate.getCertificateKeystoreType();
         String keyAlias = certificate.getCertificateKeyAlias();
         String algorithm = sslHostConfig.getKeyManagerAlgorithm();
         String keyPass = certificate.getCertificateKeyPassword();
@@ -181,8 +179,6 @@ public class JSSEUtil extends SSLUtilBase {
             keyPass = certificate.getCertificateKeystorePassword();
         }
 
-        KeyManager[] kms = null;
-
         KeyStore ks = certificate.getCertificateKeystore();
 
         /*
@@ -219,6 +215,8 @@ public class JSSEUtil extends SSLUtilBase {
         } else {
             if (keyAlias != null && !ks.isKeyEntry(keyAlias)) {
                 throw new IOException(sm.getString("jsse.alias_no_key_entry", keyAlias));
+            } else if (keyAlias == null) {
+                keyAlias = "tomcat";
             }
 
             inMemoryKeyStore.setKeyEntry(keyAlias, ks.getKey(keyAlias, keyPassArray), keyPassArray,
@@ -229,23 +227,7 @@ public class JSSEUtil extends SSLUtilBase {
         KeyManagerFactory kmf = KeyManagerFactory.getInstance(algorithm);
         kmf.init(inMemoryKeyStore, keyPassArray);
 
-        kms = kmf.getKeyManagers();
-        if (kms == null) {
-            return kms;
-        }
-
-        if (keyAlias != null) {
-            String alias = keyAlias;
-            // JKS keystores always convert the alias name to lower case
-            if ("JKS".equals(keystoreType)) {
-                alias = alias.toLowerCase(Locale.ENGLISH);
-            }
-            for(int i = 0; i < kms.length; i++) {
-                kms[i] = new JSSEKeyManager((X509KeyManager)kms[i], alias);
-            }
-        }
-
-        return kms;
+        return kmf.getKeyManagers();
     }
 
 

==================================================
