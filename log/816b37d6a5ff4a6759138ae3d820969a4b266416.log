816b37d6a5ff4a6759138ae3d820969a4b266416
==================================================
Fix some Javadoc warnings when compiling with Java 8
==================================================
Mark Emlyn
==================================================
Mon Oct 13 22:36:45 2014 +0000
==================================================
Filter.java
Fix some Javadoc warnings when compiling with Java 8

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1631593 13f79535-47bb-0310-9956-ffa450edef68



==================================================
FilterChain.java
index b36b37d8ce..8fd90b01a2 100644
--- a/java/javax/servlet/Filter.java
+++ b/java/javax/servlet/Filter.java
@@ -49,12 +49,20 @@ public interface Filter {
      * Called by the web container to indicate to a filter that it is being
      * placed into service. The servlet container calls the init method exactly
      * once after instantiating the filter. The init method must complete
-     * successfully before the filter is asked to do any filtering work. <br>
-     * <br>
+     * successfully before the filter is asked to do any filtering work.
+     * <p>
      * The web container cannot place the filter into service if the init method
-     * either<br>
-     * 1.Throws a ServletException <br>
-     * 2.Does not return within a time period defined by the web container
+     * either:
+     * <ul>
+     * <li>Throws a ServletException</li>
+     * <li>Does not return within a time period defined by the web
+     *     container</li>
+     * </ul>
+     *
+     * @param filterConfig The configuration information associated with the
+     *                     filter instance being initialised
+     *
+     * @throws ServletException if the initialisation fails
      */
     public void init(FilterConfig filterConfig) throws ServletException;
 
@@ -78,7 +86,17 @@ public interface Filter {
      * next entity in the filter chain to block the request processing<br>
      * 5. Directly set headers on the response after invocation of the next
      * entity in the filter chain.
-     **/
+     *
+     * @param request  The request to process
+     * @param response The response associated with the request
+     * @param chain    Provides access to the next filter in the chain for this
+     *                 filter to pass the request and response to for further
+     *                 processing
+     *
+     * @throws IOException if an I/O error occurs during this filter's
+     *                     processing of the request
+     * @throws ServletException if the processing fails for any other reason
+     */
     public void doFilter(ServletRequest request, ServletResponse response,
             FilterChain chain) throws IOException, ServletException;
 

==================================================
FilterConfig.java
index cdc5206ade..fca19c3d6f 100644
--- a/java/javax/servlet/FilterChain.java
+++ b/java/javax/servlet/FilterChain.java
@@ -41,6 +41,10 @@ public interface FilterChain {
      * @param response
      *            the response to pass along the chain.
      *
+     * @throws IOException if an I/O error occurs during the processing of the
+     *                     request
+     * @throws ServletException if the processing fails for any other reason
+
      * @since 2.3
      */
     public void doFilter(ServletRequest request, ServletResponse response)

==================================================
FilterRegistration.java
index 4a0a65b64f..5e3c44b2d3 100644
--- a/java/javax/servlet/FilterConfig.java
+++ b/java/javax/servlet/FilterConfig.java
@@ -30,8 +30,10 @@ import java.util.Enumeration;
 public interface FilterConfig {
 
     /**
-     * Returns the filter-name of this filter as defined in the deployment
-     * descriptor.
+     * Get the name of the filter.
+     *
+     * @return The filter-name of this filter as defined in the deployment
+     *         descriptor.
      */
     public String getFilterName();
 

==================================================
ServletContext.java
index 52d9596727..4c27fb1dad 100644
--- a/java/javax/servlet/FilterRegistration.java
+++ b/java/javax/servlet/FilterRegistration.java
@@ -26,12 +26,19 @@ import java.util.EnumSet;
 public interface FilterRegistration extends Registration {
 
     /**
+     * Add a mapping for this filter to one or more named Servlets.
      *
-     * @param dispatcherTypes
-     * @param isMatchAfter
-     * @param servletNames
-     * @throws IllegalArgumentException
-     * @throws IllegalStateException
+     * @param dispatcherTypes The dispatch types to which this filter should
+     *                        apply
+     * @param isMatchAfter    Should this filter be applied after any mappings
+     *                        defined in the deployment descriptor
+     *                        (<code>true</code>) or before?
+     * @param servletNames    Requests mapped to these servlets will be
+     *                        processed by this filter
+     * @throws IllegalArgumentException if the list of sevrlet names is empty
+     *                                  or null
+     * @throws IllegalStateException if the associated ServletContext has
+     *                               already been initialised
      */
     public void addMappingForServletNames(
             EnumSet<DispatcherType> dispatcherTypes,
@@ -43,12 +50,19 @@ public interface FilterRegistration extends Registration {
     public Collection<String> getServletNameMappings();
 
     /**
+     * Add a mapping for this filter to one or more URL patterns.
      *
-     * @param dispatcherTypes
-     * @param isMatchAfter
-     * @param urlPatterns
-     * @throws IllegalArgumentException
-     * @throws IllegalStateException
+     * @param dispatcherTypes The dispatch types to which this filter should
+     *                        apply
+     * @param isMatchAfter    Should this filter be applied after any mappings
+     *                        defined in the deployment descriptor
+     *                        (<code>true</code>) or before?
+     * @param urlPatterns     The URL patterns to which this filter should be
+     *                        applied
+     * @throws IllegalArgumentException if the list of URL patterns is empty or
+     *                                  null
+     * @throws IllegalStateException if the associated ServletContext has
+     *                               already been initialised
      */
     public void addMappingForUrlPatterns(
             EnumSet<DispatcherType> dispatcherTypes,

==================================================
