c57c3619f75f5ddc21d79f58bdda1d0866da46cb
==================================================
ELSupport is a utility class. Refactor so it is accessed as one.
==================================================
Mark Thomas
==================================================
Thu Jul 8 20:55:20 2021 +0100
==================================================
ELSupport.java
ELSupport is a utility class. Refactor so it is accessed as one.


==================================================
AstAnd.java
index 7a810155b5..808ad799ae 100644
--- a/java/org/apache/el/lang/ELSupport.java
+++ b/java/org/apache/el/lang/ELSupport.java
@@ -660,11 +660,8 @@ public class ELSupport {
         return false;
     }
 
-    /**
-     *
-     */
-    public ELSupport() {
-        super();
-    }
 
+    private ELSupport() {
+        // Uility class - hide default constructor;
+    }
 }

==================================================
AstChoice.java
index b65c731b03..85d268e99f 100644
--- a/java/org/apache/el/parser/AstAnd.java
+++ b/java/org/apache/el/parser/AstAnd.java
@@ -19,6 +19,7 @@ package org.apache.el.parser;
 
 import jakarta.el.ELException;
 
+import org.apache.el.lang.ELSupport;
 import org.apache.el.lang.EvaluationContext;
 
 
@@ -34,12 +35,12 @@ public final class AstAnd extends BooleanNode {
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj = children[0].getValue(ctx);
-        Boolean b = coerceToBoolean(ctx, obj, true);
+        Boolean b = ELSupport.coerceToBoolean(ctx, obj, true);
         if (!b.booleanValue()) {
             return b;
         }
         obj = children[1].getValue(ctx);
-        b = coerceToBoolean(ctx, obj, true);
+        b = ELSupport.coerceToBoolean(ctx, obj, true);
         return b;
     }
 }

==================================================
AstConcatenation.java
index 5819eadbc7..173ea22b3b 100644
--- a/java/org/apache/el/parser/AstChoice.java
+++ b/java/org/apache/el/parser/AstChoice.java
@@ -19,6 +19,7 @@ package org.apache.el.parser;
 
 import jakarta.el.ELException;
 
+import org.apache.el.lang.ELSupport;
 import org.apache.el.lang.EvaluationContext;
 
 
@@ -41,7 +42,7 @@ public final class AstChoice extends SimpleNode {
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj0 = this.children[0].getValue(ctx);
-        Boolean b0 = coerceToBoolean(ctx, obj0, true);
+        Boolean b0 = ELSupport.coerceToBoolean(ctx, obj0, true);
         return this.children[((b0.booleanValue() ? 1 : 2))].getValue(ctx);
     }
 }

==================================================
AstEqual.java
index f26e0a36ed..ae83893170 100644
--- a/java/org/apache/el/parser/AstConcatenation.java
+++ b/java/org/apache/el/parser/AstConcatenation.java
@@ -19,6 +19,7 @@ package org.apache.el.parser;
 
 import jakarta.el.ELException;
 
+import org.apache.el.lang.ELSupport;
 import org.apache.el.lang.EvaluationContext;
 
 public class AstConcatenation extends SimpleNode {
@@ -31,8 +32,8 @@ public class AstConcatenation extends SimpleNode {
     @Override
     public Object getValue(EvaluationContext ctx) throws ELException {
         // Coerce the two child nodes to string and then concatenate
-        String s1 = coerceToString(ctx, children[0].getValue(ctx));
-        String s2 = coerceToString(ctx, children[1].getValue(ctx));
+        String s1 = ELSupport.coerceToString(ctx, children[0].getValue(ctx));
+        String s2 = ELSupport.coerceToString(ctx, children[1].getValue(ctx));
         return s1 + s2;
     }
 

==================================================
AstFunction.java
index a5a45cf6e0..4a9b53ea96 100644
--- a/java/org/apache/el/parser/AstEqual.java
+++ b/java/org/apache/el/parser/AstEqual.java
@@ -19,6 +19,7 @@ package org.apache.el.parser;
 
 import jakarta.el.ELException;
 
+import org.apache.el.lang.ELSupport;
 import org.apache.el.lang.EvaluationContext;
 
 
@@ -35,6 +36,6 @@ public final class AstEqual extends BooleanNode {
             throws ELException {
         Object obj0 = this.children[0].getValue(ctx);
         Object obj1 = this.children[1].getValue(ctx);
-        return Boolean.valueOf(equals(ctx, obj0, obj1));
+        return Boolean.valueOf(ELSupport.equals(ctx, obj0, obj1));
     }
 }

==================================================
AstGreaterThan.java
index 9c58d9628b..3ce652f768 100644
--- a/java/org/apache/el/parser/AstFunction.java
+++ b/java/org/apache/el/parser/AstFunction.java
@@ -27,6 +27,7 @@ import jakarta.el.LambdaExpression;
 import jakarta.el.ValueExpression;
 import jakarta.el.VariableMapper;
 
+import org.apache.el.lang.ELSupport;
 import org.apache.el.lang.EvaluationContext;
 import org.apache.el.util.MessageFactory;
 
@@ -180,14 +181,14 @@ public final class AstFunction extends SimpleNode {
                             Class<?> target = paramTypes[i].getComponentType();
                             for (int j = i; j < inputParameterCount; j++) {
                                 varargs[j-i] = parameters.jjtGetChild(j).getValue(ctx);
-                                varargs[j-i] = coerceToType(ctx, varargs[j-i], target);
+                                varargs[j-i] = ELSupport.coerceToType(ctx, varargs[j-i], target);
                             }
                             params[i] = varargs;
                         }
                     } else {
                         params[i] = parameters.jjtGetChild(i).getValue(ctx);
                     }
-                    params[i] = coerceToType(ctx, params[i], paramTypes[i]);
+                    params[i] = ELSupport.coerceToType(ctx, params[i], paramTypes[i]);
                 }
             } catch (ELException ele) {
                 throw new ELException(MessageFactory.get("error.function", this

==================================================
AstGreaterThanEqual.java
index 2ba8f78628..953947c14d 100644
--- a/java/org/apache/el/parser/AstGreaterThan.java
+++ b/java/org/apache/el/parser/AstGreaterThan.java
@@ -19,6 +19,7 @@ package org.apache.el.parser;
 
 import jakarta.el.ELException;
 
+import org.apache.el.lang.ELSupport;
 import org.apache.el.lang.EvaluationContext;
 
 
@@ -41,6 +42,6 @@ public final class AstGreaterThan extends BooleanNode {
         if (obj1 == null) {
             return Boolean.FALSE;
         }
-        return (compare(ctx, obj0, obj1) > 0) ? Boolean.TRUE : Boolean.FALSE;
+        return (ELSupport.compare(ctx, obj0, obj1) > 0) ? Boolean.TRUE : Boolean.FALSE;
     }
 }

==================================================
AstLessThan.java
index 624fc5e0e1..3095546264 100644
--- a/java/org/apache/el/parser/AstGreaterThanEqual.java
+++ b/java/org/apache/el/parser/AstGreaterThanEqual.java
@@ -19,6 +19,7 @@ package org.apache.el.parser;
 
 import jakarta.el.ELException;
 
+import org.apache.el.lang.ELSupport;
 import org.apache.el.lang.EvaluationContext;
 
 
@@ -41,6 +42,6 @@ public final class AstGreaterThanEqual extends BooleanNode {
         if (obj0 == null || obj1 == null) {
             return Boolean.FALSE;
         }
-        return (compare(ctx, obj0, obj1) >= 0) ? Boolean.TRUE : Boolean.FALSE;
+        return (ELSupport.compare(ctx, obj0, obj1) >= 0) ? Boolean.TRUE : Boolean.FALSE;
     }
 }

==================================================
AstLessThanEqual.java
index 7c20e5346e..f7882dd702 100644
--- a/java/org/apache/el/parser/AstLessThan.java
+++ b/java/org/apache/el/parser/AstLessThan.java
@@ -19,6 +19,7 @@ package org.apache.el.parser;
 
 import jakarta.el.ELException;
 
+import org.apache.el.lang.ELSupport;
 import org.apache.el.lang.EvaluationContext;
 
 
@@ -41,6 +42,6 @@ public final class AstLessThan extends BooleanNode {
         if (obj1 == null) {
             return Boolean.FALSE;
         }
-        return (compare(ctx, obj0, obj1) < 0) ? Boolean.TRUE : Boolean.FALSE;
+        return (ELSupport.compare(ctx, obj0, obj1) < 0) ? Boolean.TRUE : Boolean.FALSE;
     }
 }

==================================================
AstNegative.java
index 4b1463b419..2baadb6e4f 100644
--- a/java/org/apache/el/parser/AstLessThanEqual.java
+++ b/java/org/apache/el/parser/AstLessThanEqual.java
@@ -19,6 +19,7 @@ package org.apache.el.parser;
 
 import jakarta.el.ELException;
 
+import org.apache.el.lang.ELSupport;
 import org.apache.el.lang.EvaluationContext;
 
 
@@ -41,6 +42,6 @@ public final class AstLessThanEqual extends BooleanNode {
         if (obj0 == null || obj1 == null) {
             return Boolean.FALSE;
         }
-        return (compare(ctx, obj0, obj1) <= 0) ? Boolean.TRUE : Boolean.FALSE;
+        return (ELSupport.compare(ctx, obj0, obj1) <= 0) ? Boolean.TRUE : Boolean.FALSE;
     }
 }

==================================================
AstNot.java
index 9a244155b0..c2a540c7aa 100644
--- a/java/org/apache/el/parser/AstNegative.java
+++ b/java/org/apache/el/parser/AstNegative.java
@@ -22,6 +22,7 @@ import java.math.BigInteger;
 
 import jakarta.el.ELException;
 
+import org.apache.el.lang.ELSupport;
 import org.apache.el.lang.EvaluationContext;
 
 
@@ -54,7 +55,7 @@ public final class AstNegative extends SimpleNode {
             return ((BigInteger) obj).negate();
         }
         if (obj instanceof String) {
-            if (isStringFloat((String) obj)) {
+            if (ELSupport.isStringFloat((String) obj)) {
                 return Double.valueOf(-Double.parseDouble((String) obj));
             }
             return Long.valueOf(-Long.parseLong((String) obj));
@@ -77,7 +78,7 @@ public final class AstNegative extends SimpleNode {
         if (obj instanceof Byte) {
             return Byte.valueOf((byte) -((Byte) obj).byteValue());
         }
-        Long num = (Long) coerceToNumber(ctx, obj, Long.class);
+        Long num = (Long) ELSupport.coerceToNumber(ctx, obj, Long.class);
         return Long.valueOf(-num.longValue());
     }
 }

==================================================
AstNotEqual.java
index 75178d3d86..1a16180b4e 100644
--- a/java/org/apache/el/parser/AstNot.java
+++ b/java/org/apache/el/parser/AstNot.java
@@ -19,6 +19,7 @@ package org.apache.el.parser;
 
 import jakarta.el.ELException;
 
+import org.apache.el.lang.ELSupport;
 import org.apache.el.lang.EvaluationContext;
 
 
@@ -40,7 +41,7 @@ public final class AstNot extends SimpleNode {
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj = this.children[0].getValue(ctx);
-        Boolean b = coerceToBoolean(ctx, obj, true);
+        Boolean b = ELSupport.coerceToBoolean(ctx, obj, true);
         return Boolean.valueOf(!b.booleanValue());
     }
 }

==================================================
AstOr.java
index e484d6037f..5f19904d24 100644
--- a/java/org/apache/el/parser/AstNotEqual.java
+++ b/java/org/apache/el/parser/AstNotEqual.java
@@ -19,6 +19,7 @@ package org.apache.el.parser;
 
 import jakarta.el.ELException;
 
+import org.apache.el.lang.ELSupport;
 import org.apache.el.lang.EvaluationContext;
 
 
@@ -35,6 +36,6 @@ public final class AstNotEqual extends BooleanNode {
             throws ELException {
         Object obj0 = this.children[0].getValue(ctx);
         Object obj1 = this.children[1].getValue(ctx);
-        return Boolean.valueOf(!equals(ctx, obj0, obj1));
+        return Boolean.valueOf(!ELSupport.equals(ctx, obj0, obj1));
     }
 }

==================================================
SimpleNode.java
index 618cd0bbca..a16a04cf40 100644
--- a/java/org/apache/el/parser/AstOr.java
+++ b/java/org/apache/el/parser/AstOr.java
@@ -19,6 +19,7 @@ package org.apache.el.parser;
 
 import jakarta.el.ELException;
 
+import org.apache.el.lang.ELSupport;
 import org.apache.el.lang.EvaluationContext;
 
 
@@ -34,12 +35,12 @@ public final class AstOr extends BooleanNode {
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj = this.children[0].getValue(ctx);
-        Boolean b = coerceToBoolean(ctx, obj, true);
+        Boolean b = ELSupport.coerceToBoolean(ctx, obj, true);
         if (b.booleanValue()) {
             return b;
         }
         obj = this.children[1].getValue(ctx);
-        b = coerceToBoolean(ctx, obj, true);
+        b = ELSupport.coerceToBoolean(ctx, obj, true);
         return b;
     }
 }

==================================================
