dbf7e008aa1ea9f79b67d3dddc7c1c560b396d6a
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60769
==================================================
Mark Thomas
==================================================
Wed Mar 1 20:44:22 2017 +0000
==================================================
EncodingDetector.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60769
Fix regression in JSP encoding detection refactoring

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1785032 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ParserController.java
index b0a1b4f201..482dc55ba5 100644
--- a/java/org/apache/jasper/compiler/EncodingDetector.java
+++ b/java/org/apache/jasper/compiler/EncodingDetector.java
@@ -27,6 +27,9 @@ import javax.xml.stream.XMLStreamReader;
 /*
  * The BoM detection is derived from:
  * http://svn.us.apache.org/viewvc/tomcat/trunk/java/org/apache/jasper/xmlparser/XMLEncodingDetector.java?annotate=1742248
+ *
+ * The prolog is always at least as specific as the BOM therefore any encoding
+ * specified in the prolog should take priority over the BOM.
  */
 class EncodingDetector {
 
@@ -35,7 +38,8 @@ class EncodingDetector {
         XML_INPUT_FACTORY = XMLInputFactory.newFactory();
     }
 
-    private final BomResult bomResult;
+    private final String encoding;
+    private final int skip;
     private final boolean encodingSpecifiedInProlog;
 
 
@@ -50,7 +54,7 @@ class EncodingDetector {
         BufferedInputStream bis = new BufferedInputStream(is, 4);
         bis.mark(4);
 
-        bomResult = processBom(bis);
+        BomResult bomResult = processBom(bis);
 
         // Reset the stream back to the start to allow the XML prolog detection
         // to work. Skip any BoM we discovered.
@@ -59,17 +63,25 @@ class EncodingDetector {
             is.read();
         }
 
-        encodingSpecifiedInProlog = (getPrologEncoding(bis) != null);
+        String prologEncoding = getPrologEncoding(bis);
+        if (prologEncoding == null) {
+            encodingSpecifiedInProlog = false;
+            encoding = bomResult.encoding;
+        } else {
+            encodingSpecifiedInProlog = true;
+            encoding = prologEncoding;
+        }
+        skip = bomResult.skip;
     }
 
 
-    String getBomEncoding() {
-        return bomResult.encoding;
+    String getEncoding() {
+        return encoding;
     }
 
 
     int getSkip() {
-        return bomResult.skip;
+        return skip;
     }
 
 

==================================================
TestEncodingDetector.java
index 73f7932e97..c721d46945 100644
--- a/java/org/apache/jasper/compiler/ParserController.java
+++ b/java/org/apache/jasper/compiler/ParserController.java
@@ -321,7 +321,7 @@ class ParserController implements TagConstants {
             InputStream inStream = JspUtil.getInputStream(absFileName, jar, ctxt);
             EncodingDetector encodingDetector = new EncodingDetector(inStream);
 
-            sourceEnc = encodingDetector.getBomEncoding();
+            sourceEnc = encodingDetector.getEncoding();
             isEncodingSpecifiedInProlog = encodingDetector.isEncodingSpecifiedInProlog();
             isBomPresent = (encodingDetector.getSkip() > 0);
             skip = encodingDetector.getSkip();

==================================================
