be308ba0a66f02e968bae435f1fbfcef1528e1a0
==================================================
62803: Fix SSL connectors handling in storeconfig. The attribute duplication is indeed extreme.
==================================================
Remy Maucherat
==================================================
Fri Oct 5 17:29:22 2018 +0000
==================================================
CertificateStoreAppender.java
62803: Fix SSL connectors handling in storeconfig. The attribute duplication is indeed extreme.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1842950 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ConnectorSF.java
new file mode 100644
index 0000000000..50bc71716f
--- /dev/null
+++ b/java/org/apache/catalina/storeconfig/CertificateStoreAppender.java
@@ -0,0 +1,39 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.storeconfig;
+
+import java.beans.PropertyDescriptor;
+
+import org.apache.tomcat.util.IntrospectionUtils;
+
+/**
+ * Store the Certificate attributes.
+ */
+public class CertificateStoreAppender extends StoreAppender {
+
+    @Override
+    protected Object checkAttribute(StoreDescription desc,
+            PropertyDescriptor descriptor, String attributeName, Object bean,
+            Object bean2) {
+        if (attributeName.equals("type")) {
+            return IntrospectionUtils.getProperty(bean, descriptor.getName());
+        } else {
+            return super.checkAttribute(desc, descriptor, attributeName, bean, bean2);
+        }
+    }
+
+}
\ No newline at end of file

==================================================
SSLHostConfigSF.java
index b0a43ee53b..56bdff40bc 100644
--- a/java/org/apache/catalina/storeconfig/ConnectorSF.java
+++ b/java/org/apache/catalina/storeconfig/ConnectorSF.java
@@ -41,9 +41,11 @@ public class ConnectorSF extends StoreFactoryBase {
             // Store nested <UpgradeProtocol> elements
             UpgradeProtocol[] upgradeProtocols = connector.findUpgradeProtocols();
             storeElementArray(aWriter, indent, upgradeProtocols);
-            // Store nested <SSLHostConfig> elements
-            SSLHostConfig[] hostConfigs = connector.findSslHostConfigs();
-            storeElementArray(aWriter, indent, hostConfigs);
+            if (Boolean.TRUE.equals(connector.getProperty("SSLEnabled"))) {
+                // Store nested <SSLHostConfig> elements
+                SSLHostConfig[] hostConfigs = connector.findSslHostConfigs();
+                storeElementArray(aWriter, indent, hostConfigs);
+            }
         }
     }
 

==================================================
StoreAppender.java
index 81c15d4eec..e6c89e3027 100644
--- a/java/org/apache/catalina/storeconfig/SSLHostConfigSF.java
+++ b/java/org/apache/catalina/storeconfig/SSLHostConfigSF.java
@@ -18,9 +18,11 @@
 package org.apache.catalina.storeconfig;
 
 import java.io.PrintWriter;
+import java.util.ArrayList;
 
 import org.apache.tomcat.util.net.SSLHostConfig;
 import org.apache.tomcat.util.net.SSLHostConfigCertificate;
+import org.apache.tomcat.util.net.SSLHostConfigCertificate.Type;
 import org.apache.tomcat.util.net.openssl.OpenSSLConf;
 
 /**
@@ -39,6 +41,16 @@ public class SSLHostConfigSF extends StoreFactoryBase {
             SSLHostConfig sslHostConfig = (SSLHostConfig) aSSLHostConfig;
             // Store nested <SSLHostConfigCertificate> elements
             SSLHostConfigCertificate[] hostConfigsCertificates = sslHostConfig.getCertificates().toArray(new SSLHostConfigCertificate[0]);
+            // Remove a possible default UNDEFINED certificate
+            if (hostConfigsCertificates.length > 1) {
+                ArrayList<SSLHostConfigCertificate> certificates = new ArrayList<>();
+                for (SSLHostConfigCertificate certificate : hostConfigsCertificates) {
+                    if (Type.UNDEFINED != certificate.getType()) {
+                        certificates.add(certificate);
+                    }
+                }
+                hostConfigsCertificates = certificates.toArray(new SSLHostConfigCertificate[0]);
+            }
             storeElementArray(aWriter, indent, hostConfigsCertificates);
             // Store nested <OpenSSLConf> element
             OpenSSLConf openSslConf = sslHostConfig.getOpenSslConf();

==================================================
