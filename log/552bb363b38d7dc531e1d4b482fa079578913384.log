552bb363b38d7dc531e1d4b482fa079578913384
==================================================
Append single characters as characters rather than one character strings
==================================================
Mark Thomas
==================================================
Fri Feb 17 10:19:38 2023 +0000
==================================================
HttpServlet.java
Append single characters as characters rather than one character strings


==================================================
StandardContext.java
index 7f3c3e8901..aec57d5e56 100644
--- a/java/jakarta/servlet/http/HttpServlet.java
+++ b/java/jakarta/servlet/http/HttpServlet.java
@@ -483,7 +483,7 @@ public abstract class HttpServlet extends GenericServlet {
         int responseLength;
 
         String CRLF = "\r\n";
-        StringBuilder buffer = new StringBuilder("TRACE ").append(req.getRequestURI()).append(" ")
+        StringBuilder buffer = new StringBuilder("TRACE ").append(req.getRequestURI()).append(' ')
                 .append(req.getProtocol());
 
         Enumeration<String> reqHeaderNames = req.getHeaderNames();

==================================================
Catalina.java
index 323a39cb12..7bab4058a2 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -5533,7 +5533,7 @@ public class StandardContext extends ContainerBase implements Context, Notificat
                     parent = parent.getParent();
                 }
                 while (!stk.isEmpty()) {
-                    buff.append("/").append(stk.remove());
+                    buff.append('/').append(stk.remove());
                 }
                 buff.append(getName());
                 namingContextName = buff.toString();

==================================================
SetNextNamingRule.java
index 66db702f69..2f2f09782a 100644
--- a/java/org/apache/catalina/startup/Catalina.java
+++ b/java/org/apache/catalina/startup/Catalina.java
@@ -937,7 +937,7 @@ public class Catalina {
     protected void generateLoader() {
         String loaderClassName = "DigesterGeneratedCodeLoader";
         StringBuilder code = new StringBuilder();
-        code.append("package ").append(generatedCodePackage).append(";").append(System.lineSeparator());
+        code.append("package ").append(generatedCodePackage).append(';').append(System.lineSeparator());
         code.append("public class ").append(loaderClassName);
         code.append(" implements org.apache.tomcat.util.digester.Digester.GeneratedCodeLoader {").append(System.lineSeparator());
         code.append("public Object loadGeneratedCode(String className) {").append(System.lineSeparator());
@@ -960,7 +960,7 @@ public class Catalina {
 
     protected void generateClassHeader(Digester digester, boolean start) {
         StringBuilder code = digester.getGeneratedCode();
-        code.append("package ").append(generatedCodePackage).append(";").append(System.lineSeparator());
+        code.append("package ").append(generatedCodePackage).append(';').append(System.lineSeparator());
         code.append("public class ServerXml");
         if (!start) {
             code.append("Stop");

==================================================
DNSMembershipProvider.java
index 2e57aa3101..3b51a2940f 100644
--- a/java/org/apache/catalina/startup/SetNextNamingRule.java
+++ b/java/org/apache/catalina/startup/SetNextNamingRule.java
@@ -111,7 +111,7 @@ public class SetNextNamingRule extends Rule {
             } else {
                 code.append(digester.toVariableName(namingResources));
             }
-            code.append(".").append(methodName).append('(');
+            code.append('.').append(methodName).append('(');
             code.append(digester.toVariableName(child)).append(");");
             code.append(System.lineSeparator());
         }

==================================================
DataSourceUserDatabase.java
index f76dc46c95..f5a6874496 100644
--- a/java/org/apache/catalina/tribes/membership/cloud/DNSMembershipProvider.java
+++ b/java/org/apache/catalina/tribes/membership/cloud/DNSMembershipProvider.java
@@ -182,7 +182,7 @@ public class DNSMembershipProvider extends CloudMembershipProvider {
             StringBuilder buf = new StringBuilder();
             buf.append(host[i++] & 0xff);
             for (; i < host.length; i++) {
-                buf.append(".").append(host[i] & 0xff);
+                buf.append('.').append(host[i] & 0xff);
             }
 
             byte[] id = md5.digest(buf.toString().getBytes());

==================================================
ProxyErrorReportValve.java
index 3892131481..47a7a4a42e 100644
--- a/java/org/apache/catalina/users/DataSourceUserDatabase.java
+++ b/java/org/apache/catalina/users/DataSourceUserDatabase.java
@@ -948,7 +948,7 @@ public class DataSourceUserDatabase extends SparseUserDatabase {
             StringBuilder temp = new StringBuilder("SELECT ");
             temp.append(userCredCol);
             if (userFullNameCol != null) {
-                temp.append(",").append(userFullNameCol);
+                temp.append(',').append(userFullNameCol);
             }
             temp.append(" FROM ");
             temp.append(userTable);
@@ -994,7 +994,7 @@ public class DataSourceUserDatabase extends SparseUserDatabase {
                 temp = new StringBuilder("SELECT ");
                 temp.append(groupNameCol);
                 if (roleAndGroupDescriptionCol != null) {
-                    temp.append(",").append(roleAndGroupDescriptionCol);
+                    temp.append(',').append(roleAndGroupDescriptionCol);
                 }
                 temp.append(" FROM ");
                 temp.append(groupTable);
@@ -1015,7 +1015,7 @@ public class DataSourceUserDatabase extends SparseUserDatabase {
                 temp = new StringBuilder("SELECT ");
                 temp.append(roleNameCol);
                 if (roleAndGroupDescriptionCol != null) {
-                    temp.append(",").append(roleAndGroupDescriptionCol);
+                    temp.append(',').append(roleAndGroupDescriptionCol);
                 }
                 temp.append(" FROM ");
                 temp.append(roleTable);

==================================================
AjpMessage.java
index 365aa7415a..93ad6b715a 100644
--- a/java/org/apache/catalina/valves/ProxyErrorReportValve.java
+++ b/java/org/apache/catalina/valves/ProxyErrorReportValve.java
@@ -148,9 +148,9 @@ public class ProxyErrorReportValve extends ErrorReportValve {
 
         StringBuilder stringBuilder = new StringBuilder(urlString);
         if (urlString.indexOf("?") > -1) {
-            stringBuilder.append("&");
+            stringBuilder.append('&');
         } else {
-            stringBuilder.append("?");
+            stringBuilder.append('?');
         }
         stringBuilder.append("requestUri=");
         stringBuilder.append(URLEncoder.encode(request.getDecodedRequestURI(), request.getConnector().getURICharset()));

==================================================
IntrospectionUtils.java
index f49a099125..7ec6b5139f 100644
--- a/java/org/apache/coyote/ajp/AjpMessage.java
+++ b/java/org/apache/coyote/ajp/AjpMessage.java
@@ -398,7 +398,7 @@ public class AjpMessage {
         StringBuilder sb = new StringBuilder();
         for (int i = start; i < start + 16 ; i++) {
             if (i < len + 4) {
-                sb.append(hex(buf[i])).append(" ");
+                sb.append(hex(buf[i])).append(' ');
             } else {
                 sb.append("   ");
             }

==================================================
SetPropertiesRule.java
index 92e478ee97..45c261c2ad 100644
--- a/java/org/apache/tomcat/util/IntrospectionUtils.java
+++ b/java/org/apache/tomcat/util/IntrospectionUtils.java
@@ -491,15 +491,14 @@ public final class IntrospectionUtils {
             if (log.isDebugEnabled()) {
                 // debug
                 StringBuilder sb = new StringBuilder();
-                sb.append(target.getClass().getName()).append('.')
-                        .append(methodN).append("( ");
+                sb.append(target.getClass().getName()).append('.').append(methodN).append('(');
                 for (int i = 0; i < params.length; i++) {
                     if (i > 0) {
                         sb.append(", ");
                     }
                     sb.append(params[i]);
                 }
-                sb.append(")");
+                sb.append(')');
                 log.debug("IntrospectionUtils:" + sb.toString());
             }
             return o;

==================================================
ReflectionLessCodeGenerator.java
index f1898feee3..323c3f8362 100644
--- a/java/org/apache/tomcat/util/digester/SetPropertiesRule.java
+++ b/java/org/apache/tomcat/util/digester/SetPropertiesRule.java
@@ -104,7 +104,7 @@ public class SetPropertiesRule extends Rule {
                     }
                 } else {
                     if (code != null) {
-                        code.append(variableName).append(".").append(actualMethod).append(';');
+                        code.append(variableName).append('.').append(actualMethod).append(';');
                         code.append(System.lineSeparator());
                     }
                 }

==================================================
SetPropertyClass.java
index d79983e4f9..ac83673cb3 100644
--- a/java/org/apache/tomcat/util/xreflection/ReflectionLessCodeGenerator.java
+++ b/java/org/apache/tomcat/util/xreflection/ReflectionLessCodeGenerator.java
@@ -43,7 +43,7 @@ final class ReflectionLessCodeGenerator {
         StringBuilder code = new StringBuilder(AL20_HEADER)
             .append("package ")
             .append(packageName)
-            .append(";")
+            .append(';')
             .append(System.lineSeparator())
             .append(System.lineSeparator())
             .append("final class ")
@@ -60,7 +60,7 @@ final class ReflectionLessCodeGenerator {
             .append("return true;")
             .append(System.lineSeparator())
             .append(getIndent(1))
-            .append("}")
+            .append('}')
             .append(System.lineSeparator())
             .append(System.lineSeparator())
         ;
@@ -80,7 +80,7 @@ final class ReflectionLessCodeGenerator {
             .append("} catch (java.net.UnknownHostException x) { throw new RuntimeException(x); }")
             .append(System.lineSeparator())
             .append(getIndent(1))
-            .append("}")
+            .append('}')
             .append(System.lineSeparator())
             .append(System.lineSeparator())
             ;
@@ -113,19 +113,19 @@ final class ReflectionLessCodeGenerator {
 
         code
             .append(getIndent(3))
-            .append("}")
+            .append('}')
             .append(System.lineSeparator())
             .append(getIndent(3))
             .append("checkThisClass = checkThisClass.getSuperclass();")
             .append(System.lineSeparator())
             .append(getIndent(2))
-            .append("}")
+            .append('}')
             .append(System.lineSeparator())
             .append(getIndent(2))
             .append("return result;")
             .append(System.lineSeparator())
             .append(getIndent(1))
-            .append("}")
+            .append('}')
             .append(System.lineSeparator());
         //end - getPropertyInternal method
 
@@ -161,19 +161,19 @@ final class ReflectionLessCodeGenerator {
 
         code
             .append(getIndent(3))
-            .append("}")
+            .append('}')
             .append(System.lineSeparator())
             .append(getIndent(3))
             .append("checkThisClass = checkThisClass.getSuperclass();")
             .append(System.lineSeparator())
             .append(getIndent(2))
-            .append("}")
+            .append('}')
             .append(System.lineSeparator())
             .append(getIndent(2))
             .append("return false;")
             .append(System.lineSeparator())
             .append(getIndent(1))
-            .append("}")
+            .append('}')
             .append(System.lineSeparator());
         //end - setPropertyInternal method
 
@@ -181,7 +181,7 @@ final class ReflectionLessCodeGenerator {
         generateSetPropertyForMethods(baseClasses, code);
         //end - setPropertyForXXX methods
 
-        code.append("}")
+        code.append('}')
             .append(System.lineSeparator());
         //end - class
         File destination = new File(directory, className+".java");

==================================================
PoolProperties.java
index 2011510432..9354aa2310 100644
--- a/java/org/apache/tomcat/util/xreflection/SetPropertyClass.java
+++ b/java/org/apache/tomcat/util/xreflection/SetPropertyClass.java
@@ -198,7 +198,7 @@ final class SetPropertyClass implements Comparable<SetPropertyClass> {
 
         //end switch statement
         code.append(ReflectionLessCodeGenerator.getIndent(2))
-            .append("}")
+            .append('}')
             .append(System.lineSeparator());
 
         //we have a generic setProperty(String, String) method, invoke it
@@ -222,7 +222,7 @@ final class SetPropertyClass implements Comparable<SetPropertyClass> {
                .append("return true;")
                .append(System.lineSeparator())
                .append(ReflectionLessCodeGenerator.getIndent(2))
-               .append("}")
+               .append('}')
                .append(System.lineSeparator());
         }
 
@@ -232,7 +232,7 @@ final class SetPropertyClass implements Comparable<SetPropertyClass> {
             .append(getSetPropertyForExitStatement())
             .append(System.lineSeparator())
             .append(ReflectionLessCodeGenerator.getIndent(1))
-            .append("}");
+            .append('}');
 
         return code.toString();
     }
@@ -265,7 +265,7 @@ final class SetPropertyClass implements Comparable<SetPropertyClass> {
         for (String s : classParts) {
             methodInvocation.append(IntrospectionUtils.capitalize(s));
         }
-        methodInvocation.append("(")
+        methodInvocation.append('(')
         .append(OBJECT_VAR_NAME)
             .append(", ")
             .append(NAME_VAR_NAME)
@@ -318,7 +318,7 @@ final class SetPropertyClass implements Comparable<SetPropertyClass> {
         for (String s : classParts) {
             methodInvocation.append(IntrospectionUtils.capitalize(s));
         }
-        methodInvocation.append("(")
+        methodInvocation.append('(')
             .append(OBJECT_VAR_NAME)
             .append(", ")
             .append(NAME_VAR_NAME)
@@ -389,7 +389,7 @@ final class SetPropertyClass implements Comparable<SetPropertyClass> {
 
         //end switch statement
         code.append(ReflectionLessCodeGenerator.getIndent(2))
-            .append("}")
+            .append('}')
             .append(System.lineSeparator());
 
         //invoke parent or return null
@@ -401,7 +401,7 @@ final class SetPropertyClass implements Comparable<SetPropertyClass> {
             .append(getGetPropertyForExitStatement())
             .append(System.lineSeparator())
             .append(ReflectionLessCodeGenerator.getIndent(2))
-            .append("}")
+            .append('}')
             .append(System.lineSeparator())
             ;
 
@@ -421,14 +421,14 @@ final class SetPropertyClass implements Comparable<SetPropertyClass> {
                 .append(generateGetPropertyMethod(p))
                 .append(System.lineSeparator())
                 .append(ReflectionLessCodeGenerator.getIndent(2))
-                .append("}")
+                .append('}')
                 .append(System.lineSeparator());
         }
         code.append(ReflectionLessCodeGenerator.getIndent(2))
             .append("return result;")
             .append(System.lineSeparator())
             .append(ReflectionLessCodeGenerator.getIndent(1))
-            .append("}")
+            .append('}')
             .append(System.lineSeparator());
 
 

==================================================
StatementFacade.java
index f1f9612b20..e9c9c09b69 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
@@ -838,7 +838,7 @@ public class PoolProperties implements PoolConfiguration, Cloneable, Serializabl
                         continue;
                     }
                     buf.append(field);
-                    buf.append("=");
+                    buf.append('=');
                     if (DataSourceFactory.PROP_PASSWORD.equals(field)) {
                         buf.append("********");
                     } else {

==================================================
SlowQueryReport.java
index f1c3f21218..4771b321b4 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/StatementFacade.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/StatementFacade.java
@@ -149,7 +149,7 @@ public class StatementFacade extends AbstractCreateStatementInterceptor {
             buf.append(query);
             buf.append("; Delegate=");
             buf.append(delegate);
-            buf.append("]");
+            buf.append(']');
             return buf.toString();
         }
     }

==================================================
StatementDecoratorInterceptor.java
index d800a1b9bc..4198d3759e 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
@@ -388,7 +388,7 @@ public class SlowQueryReport extends AbstractQueryReport  {
             buf.append(prepareCount);
             buf.append(", prepareTime:");
             buf.append(prepareTime);
-            buf.append("]");
+            buf.append(']');
             return buf.toString();
         }
 

==================================================
TestFormAuthenticator.java
index 20d700272c..e3f8de3691 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementDecoratorInterceptor.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementDecoratorInterceptor.java
@@ -270,7 +270,7 @@ public class StatementDecoratorInterceptor extends AbstractCreateStatementInterc
             buf.append(getDelegate());
             buf.append("; Connection=");
             buf.append(getConnection());
-            buf.append("]");
+            buf.append(']');
             return buf.toString();
         }
     }

==================================================
TestOutputBuffer.java
index 9d4ca09b96..ed2a2fe4c4 100644
--- a/test/org/apache/catalina/authenticator/TestFormAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestFormAuthenticator.java
@@ -465,7 +465,7 @@ public class TestFormAuthenticator extends TomcatBaseTest {
 
             // build the HTTP request while assembling the uri
             StringBuilder requestHead = new StringBuilder(128);
-            requestHead.append(method).append(" ");
+            requestHead.append(method).append(' ');
             if (isFullQualUri) {
                 requestHead.append(resourceUri);
             } else {
@@ -499,7 +499,7 @@ public class TestFormAuthenticator extends TomcatBaseTest {
                 if (sessionId != null) {
                     requestHead.append("Cookie: ")
                             .append(SESSION_COOKIE_NAME)
-                            .append("=").append(sessionId).append(CRLF);
+                            .append('=').append(sessionId).append(CRLF);
                 }
             }
 

==================================================
TestWebappClassLoaderWeaving.java
index eb1f3de6e2..e510f4d769 100644
--- a/test/org/apache/catalina/connector/TestOutputBuffer.java
+++ b/test/org/apache/catalina/connector/TestOutputBuffer.java
@@ -164,7 +164,7 @@ public class TestOutputBuffer extends TomcatBaseTest{
         // Create test data. This is carefully constructed to trigger the edge
         // case. Small variations may cause the test to miss the edge case.
         StringBuffer sb = new StringBuffer();
-        sb.append("a");
+        sb.append('a');
 
         for (int i = 0x10000; i < 0x11000; i++) {
             char[] chars = Character.toChars(i);

==================================================
TomcatBaseTest.java
index f8bd72d967..141f690ea5 100644
--- a/test/org/apache/catalina/loader/TestWebappClassLoaderWeaving.java
+++ b/test/org/apache/catalina/loader/TestWebappClassLoaderWeaving.java
@@ -394,7 +394,7 @@ public class TestWebappClassLoaderWeaving extends TomcatBaseTest {
             for (int i = 0, b = input.read(); b >= 0; i++, b = input.read()) {
                 String value = "" + ((byte)b);
                 if (builder.length() + value.length() > 97) {
-                    builder.append(",");
+                    builder.append(',');
                     System.out.println(builder.toString());
                     builder = new StringBuilder();
                     builder.append("            ").append(value);

==================================================
TestGroupChannelMemberArrival.java
index 4100fac284..24fa5cd55d 100644
--- a/test/org/apache/catalina/startup/TomcatBaseTest.java
+++ b/test/org/apache/catalina/startup/TomcatBaseTest.java
@@ -515,7 +515,7 @@ public abstract class TomcatBaseTest extends LoggingBaseTest {
                      h.hasMoreElements();) {
                     value.append(h.nextElement());
                     if (h.hasMoreElements()) {
-                        value.append(";");
+                        value.append(';');
                     }
                 }
                 out.println("HEADER:" + name + ": " + value);
@@ -538,7 +538,7 @@ public abstract class TomcatBaseTest extends LoggingBaseTest {
                 for (int j = 0; j < m; j++) {
                     value.append(values[j]);
                     if (j < m - 1) {
-                        value.append(";");
+                        value.append(';');
                     }
                 }
                 out.println("PARAM/" + name + ": " + value);

==================================================
TestResponse.java
index 495b020751..6163361579 100644
--- a/test/org/apache/catalina/tribes/group/TestGroupChannelMemberArrival.java
+++ b/test/org/apache/catalina/tribes/group/TestGroupChannelMemberArrival.java
@@ -86,7 +86,7 @@ public class TestGroupChannelMemberArrival {
                     arrivalLengthErrors.append(listener.members.size());
                     arrivalLengthErrors.append("] but should have been [");
                     arrivalLengthErrors.append(channels.length - 1);
-                    arrivalLengthErrors.append("]");
+                    arrivalLengthErrors.append(']');
                     arrivalLengthErrors.append('\n');
                 }
             }

==================================================
TestAbstractAjpProcessor.java
index f87e524f8f..77661db108 100644
--- a/test/org/apache/coyote/TestResponse.java
+++ b/test/org/apache/coyote/TestResponse.java
@@ -118,7 +118,7 @@ public class TestResponse extends TomcatBaseTest {
         String contentType = getSingleHeader("Content-Type", responseHeaders);
         StringBuilder expected = new StringBuilder("text/plain;");
         if (withSpace) {
-            expected.append(" ");
+            expected.append(' ');
         }
         expected.append("v=1;charset=UTF-8");
         Assert.assertEquals(expected.toString() , contentType);

==================================================
TestChunkedInputFilter.java
index 2b7ec101d6..41dd7af795 100644
--- a/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java
+++ b/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java
@@ -235,12 +235,12 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
             boolean sep = false;
             for (String name: params.keySet()) {
                 if (sep) {
-                    query.append("&");
+                    query.append('&');
                 } else {
                     sep = true;
                 }
                 query.append(name);
-                query.append("=");
+                query.append('=');
                 query.append(params.get(name));
             }
             forwardMessage.addAttribute(0x05, query.toString());

==================================================
Http2TestBase.java
index b877807963..2230fe9bc7 100644
--- a/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java
+++ b/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java
@@ -236,7 +236,7 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
         String extName = ";foo=";
         StringBuilder extValue = new StringBuilder(len);
         for (int i = 0; i < (len - extName.length()); i++) {
-            extValue.append("x");
+            extValue.append('x');
         }
 
         String[] request = new String[]{

==================================================
TestELParser.java
index 215714b493..60035c3434 100644
--- a/test/org/apache/coyote/http2/Http2TestBase.java
+++ b/test/org/apache/coyote/http2/Http2TestBase.java
@@ -1270,11 +1270,11 @@ public abstract class Http2TestBase extends TomcatBaseTest {
         @Override
         public void onSwallowedUnknownFrame(int streamId, int frameTypeId, int flags, int size) {
             trace.append(streamId);
-            trace.append(",");
+            trace.append(',');
             trace.append(frameTypeId);
-            trace.append(",");
+            trace.append(',');
             trace.append(flags);
-            trace.append(",");
+            trace.append(',');
             trace.append(size);
             trace.append("\n");
         }

==================================================
TestMediaType.java
index dfbe757e82..a564f82f47 100644
--- a/test/org/apache/el/parser/TestELParser.java
+++ b/test/org/apache/el/parser/TestELParser.java
@@ -186,13 +186,13 @@ public class TestELParser {
         StringBuilder expr = new StringBuilder();
         expr.append("${");
         for (int i = 0; i < parenthesesCount; i++) {
-            expr.append("(");
+            expr.append('(');
         }
         expr.append(innerExpr);
         for (int i = 0; i < parenthesesCount; i++) {
-            expr.append(")");
+            expr.append(')');
         }
-        expr.append("}");
+        expr.append('}');
         ValueExpression ve = factory.createValueExpression(
                 context, expr.toString(), String.class);
 

==================================================
TestOpenSSLConf.java
index c66c317f71..9a38d1920d 100644
--- a/test/org/apache/tomcat/util/http/parser/TestMediaType.java
+++ b/test/org/apache/tomcat/util/http/parser/TestMediaType.java
@@ -292,11 +292,11 @@ public class TestMediaType {
         public String toString(String lws) {
             StringBuilder sb = new StringBuilder();
             sb.append(lws);
-            sb.append(";");
+            sb.append(';');
             sb.append(lws);
             sb.append(name);
             sb.append(lws);
-            sb.append("=");
+            sb.append('=');
             sb.append(lws);
             sb.append(value);
             sb.append(lws);

==================================================
TestEncodingDecoding.java
index 06c80abadd..74e8f3b608 100644
--- a/test/org/apache/tomcat/util/net/openssl/TestOpenSSLConf.java
+++ b/test/org/apache/tomcat/util/net/openssl/TestOpenSSLConf.java
@@ -105,17 +105,17 @@ public class TestOpenSSLConf extends TomcatBaseTest {
         Set<String> disabledProtocols = new HashSet<>(Arrays.asList(DISABLED_PROTOCOLS));
         StringBuilder sb = new StringBuilder();
         for (String protocol : DISABLED_PROTOCOLS) {
-            sb.append(",").append("-").append(protocol);
+            sb.append(',').append('-').append(protocol);
         }
         if (hasTLS13()) {
             // Also disable TLSv1.3
             for (String protocol : DISABLED_PROTOCOLS_TLS13) {
-                sb.append(",").append("-").append(protocol);
+                sb.append(',').append('-').append(protocol);
                 disabledProtocols.add(protocol);
             }
         }
         for (String protocol : ENABLED_PROTOCOLS) {
-            sb.append(",").append(protocol);
+            sb.append(',').append(protocol);
         }
         SSLHostConfig sslHostConfig = initOpenSSLConfCmd("Protocol", sb.substring(1));
         String[] protocols = sslHostConfig.getEnabledProtocols();

==================================================
Room.java
index d69ad16db4..b3166be31a 100644
--- a/test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java
+++ b/test/org/apache/tomcat/websocket/pojo/TestEncodingDecoding.java
@@ -660,11 +660,11 @@ public class TestEncodingDecoding extends TomcatBaseTest {
         @Override
         public String encode(List<String> str) throws EncodeException {
             StringBuffer sbuf = new StringBuffer();
-            sbuf.append("[");
+            sbuf.append('[');
             for (String s: str){
-                sbuf.append(s).append(",");
+                sbuf.append(s).append(',');
             }
-            sbuf.deleteCharAt(sbuf.lastIndexOf(",")).append("]");
+            sbuf.deleteCharAt(sbuf.lastIndexOf(",")).append(']');
             return sbuf.toString();
         }
     }

==================================================
