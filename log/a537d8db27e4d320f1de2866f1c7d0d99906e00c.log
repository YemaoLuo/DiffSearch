a537d8db27e4d320f1de2866f1c7d0d99906e00c
==================================================
Move Entry to an inner class of FastRemovalDequeue.
==================================================
Rainer Jung
==================================================
Thu Oct 28 17:30:28 2010 +0000
==================================================
JspRuntimeContext.java
Move Entry to an inner class of FastRemovalDequeue.

All implementation details of Entry are now opaque
to the consumer of the FastRemovalDequeue.

Remove double generification when using the inner
class.


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1028396 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JspServletWrapper.java
index 94347214b9..9e10852777 100644
--- a/java/org/apache/jasper/compiler/JspRuntimeContext.java
+++ b/java/org/apache/jasper/compiler/JspRuntimeContext.java
@@ -218,7 +218,7 @@ public final class JspRuntimeContext {
      * @param jsw Servlet wrapper for jsp.
      * @return a ticket that can be pushed to front of queue at later execution times.
      * */
-    public org.apache.jasper.util.Entry<JspServletWrapper> push(JspServletWrapper jsw) {
+    public FastRemovalDequeue<JspServletWrapper>.Entry push(JspServletWrapper jsw) {
         synchronized (jspQueue) {
             return jspQueue.push(jsw);
         }
@@ -229,7 +229,7 @@ public final class JspRuntimeContext {
      *
      * @param ticket the ticket for the jsp.
      * */
-    public void makeYoungest(org.apache.jasper.util.Entry<JspServletWrapper> ticket) {
+    public void makeYoungest(FastRemovalDequeue<JspServletWrapper>.Entry ticket) {
         synchronized(jspQueue) {
             jspQueue.moveFirst(ticket);
         }

==================================================
Entry.java
index 96bc100518..0bbbb16252 100644
--- a/java/org/apache/jasper/servlet/JspServletWrapper.java
+++ b/java/org/apache/jasper/servlet/JspServletWrapper.java
@@ -41,8 +41,8 @@ import org.apache.jasper.compiler.JspRuntimeContext;
 import org.apache.jasper.compiler.Localizer;
 import org.apache.jasper.runtime.InstanceManagerFactory;
 import org.apache.jasper.runtime.JspSourceDependent;
-import org.apache.jasper.util.Entry;
 import org.apache.jasper.util.ExceptionUtils;
+import org.apache.jasper.util.FastRemovalDequeue;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.InstanceManager;
@@ -87,7 +87,7 @@ public class JspServletWrapper {
     /** Timestamp of last time servlet resource was modified */
     private volatile long servletClassLastModifiedTime;
     private long lastModificationTest = 0L;
-    private Entry<JspServletWrapper> ticket;
+    private FastRemovalDequeue<JspServletWrapper>.Entry ticket;
 
     /*
      * JspServletWrapper for JSP pages.

==================================================
FastRemovalDequeue.java
deleted file mode 100644
index 9a8ab030c7..0000000000
--- a/java/org/apache/jasper/util/Entry.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.jasper.util;
-
-/**
- * Implementation of a doubly linked list entry.
- * It exposes links to previous and next elements on package level only.
- */
-public class Entry<T> {
-
-    /** The content this entry is valid for. */
-    private final T content;
-    /** Pointer to next element in queue. */
-    private Entry<T> next;
-    /** Pointer to previous element in queue. */
-    private Entry<T> previous;
-
-    public Entry(T object) {
-        content = object;
-    }
-
-    protected void setNext(final Entry<T> next) {
-        this.next = next;
-    }
-
-    protected void setPrevious(final Entry<T> previous) {
-        this.previous = previous;
-    }
-
-    protected T getContent() {
-        return content;
-    }
-
-    protected Entry<T> getPrevious() {
-        return previous;
-    }
-
-    protected Entry<T> getNext() {
-        return next;
-    }
-
-    @Override
-    public String toString() {
-        return "Entry-" + content.toString();
-    }
-}

==================================================
