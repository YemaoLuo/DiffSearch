7790723bc0a65a193e3207afdeb410f278b4a20e
==================================================
Javadoc fixes.
==================================================
Remy Maucherat
==================================================
Tue Jan 19 00:06:41 2016 +0000
==================================================
CallMethodRule.java
Javadoc fixes.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1725393 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Digester.java
index b8fe76014c..0c2896eda9 100644
--- a/java/org/apache/tomcat/util/digester/CallMethodRule.java
+++ b/java/org/apache/tomcat/util/digester/CallMethodRule.java
@@ -218,6 +218,7 @@ public class CallMethodRule extends Rule {
     /**
      * Should <code>MethodUtils.invokeExactMethod</code>
      * be used for the reflection.
+     * @return <code>true</code> if invokeExactMethod is used
      */
     public boolean getUseExactMatch() {
         return useExactMatch;
@@ -226,6 +227,7 @@ public class CallMethodRule extends Rule {
     /**
      * Set whether <code>MethodUtils.invokeExactMethod</code>
      * should be used for the reflection.
+     * @param useExactMatch The flag value
      */
     public void setUseExactMatch(boolean useExactMatch)
     {

==================================================
ObjectCreationFactory.java
index e2983125c5..75451e0b37 100644
--- a/java/org/apache/tomcat/util/digester/Digester.java
+++ b/java/org/apache/tomcat/util/digester/Digester.java
@@ -297,6 +297,7 @@ public class Digester extends DefaultHandler2 {
      * go dynamically as the document is parsed.
      *
      * @param prefix Prefix to look up
+     * @return the namespace URI
      */
     public String findNamespaceURI(String prefix) {
 
@@ -322,6 +323,7 @@ public class Digester extends DefaultHandler2 {
      *     <code>useContextClassLoader</code> property is set to true</li>
      * <li>The class loader used to load the Digester class itself.
      * </ul>
+     * @return the classloader
      */
     public ClassLoader getClassLoader() {
 
@@ -355,7 +357,7 @@ public class Digester extends DefaultHandler2 {
 
 
     /**
-     * Return the current depth of the element stack.
+     * @return the current depth of the element stack.
      */
     public int getCount() {
 
@@ -365,7 +367,7 @@ public class Digester extends DefaultHandler2 {
 
 
     /**
-     * Return the name of the XML element that is currently being processed.
+     * @return the name of the XML element that is currently being processed.
      */
     public String getCurrentElementName() {
 
@@ -380,7 +382,7 @@ public class Digester extends DefaultHandler2 {
 
 
     /**
-     * Return the error handler for this Digester.
+     * @return the error handler for this Digester.
      */
     public ErrorHandler getErrorHandler() {
 
@@ -402,10 +404,11 @@ public class Digester extends DefaultHandler2 {
 
 
     /**
-     * Return the SAXParserFactory we will use, creating one if necessary.
-     * @throws ParserConfigurationException
-     * @throws SAXNotSupportedException
-     * @throws SAXNotRecognizedException
+     * SAX parser factory method.
+     * @return the SAXParserFactory we will use, creating one if necessary.
+     * @throws ParserConfigurationException Error creating parser
+     * @throws SAXNotSupportedException Error creating parser
+     * @throws SAXNotRecognizedException Error creating parser
      */
     public SAXParserFactory getFactory()
     throws SAXNotRecognizedException, SAXNotSupportedException,
@@ -469,7 +472,7 @@ public class Digester extends DefaultHandler2 {
 
 
     /**
-     * Return the current Logger associated with this instance of the Digester
+     * @return the current Logger associated with this instance of the Digester
      */
     public Log getLogger() {
 
@@ -480,6 +483,7 @@ public class Digester extends DefaultHandler2 {
 
     /**
      * Set the current logger for this Digester.
+     * @param log The logger that will be used
      */
     public void setLogger(Log log) {
 
@@ -492,6 +496,7 @@ public class Digester extends DefaultHandler2 {
      * <strong>Note</strong> the output is finely grained.
      *
      * @since 1.6
+     * @return the SAX logger
      */
     public Log getSAXLogger() {
 
@@ -512,7 +517,7 @@ public class Digester extends DefaultHandler2 {
     }
 
     /**
-     * Return the current rule match path
+     * @return the current rule match path
      */
     public String getMatch() {
 
@@ -522,7 +527,7 @@ public class Digester extends DefaultHandler2 {
 
 
     /**
-     * Return the "namespace aware" flag for parsers we create.
+     * @return the "namespace aware" flag for parsers we create.
      */
     public boolean getNamespaceAware() {
 
@@ -553,7 +558,7 @@ public class Digester extends DefaultHandler2 {
 
 
     /**
-     * Return the public identifier of the DTD we are currently
+     * @return the public identifier of the DTD we are currently
      * parsing under, if any.
      */
     public String getPublicId() {
@@ -564,7 +569,7 @@ public class Digester extends DefaultHandler2 {
 
 
     /**
-     * Return the namespace URI that will be applied to all subsequently
+     * @return the namespace URI that will be applied to all subsequently
      * added <code>Rule</code> objects.
      */
     public String getRuleNamespaceURI() {
@@ -590,7 +595,7 @@ public class Digester extends DefaultHandler2 {
 
 
     /**
-     * Return the SAXParser we will use to parse the input stream.  If there
+     * @return the SAXParser we will use to parse the input stream.  If there
      * is a problem creating the parser, return <code>null</code>.
      */
     public SAXParser getParser() {
@@ -621,7 +626,7 @@ public class Digester extends DefaultHandler2 {
      * for information about the standard SAX2 properties.
      *
      * @param property Property name to be retrieved
-     *
+     * @return the property value
      * @exception SAXNotRecognizedException if the property name is
      *  not recognized
      * @exception SAXNotSupportedException if the property name is
@@ -639,6 +644,7 @@ public class Digester extends DefaultHandler2 {
      * Return the <code>Rules</code> implementation object containing our
      * rules collection and associated matching policy.  If none has been
      * established, a default implementation will be created and returned.
+     * @return the rules
      */
     public Rules getRules() {
 
@@ -666,7 +672,7 @@ public class Digester extends DefaultHandler2 {
 
 
     /**
-     * Return the boolean as to whether the context classloader should be used.
+     * @return the boolean as to whether the context classloader should be used.
      */
     public boolean getUseContextClassLoader() {
 
@@ -692,7 +698,7 @@ public class Digester extends DefaultHandler2 {
 
 
     /**
-     * Return the validating parser flag.
+     * @return the validating parser flag.
      */
     public boolean getValidating() {
 
@@ -715,7 +721,7 @@ public class Digester extends DefaultHandler2 {
 
 
     /**
-     * Return the rules validation flag.
+     * @return the rules validation flag.
      */
     public boolean getRulesValidation() {
 
@@ -738,7 +744,7 @@ public class Digester extends DefaultHandler2 {
 
 
     /**
-     * Return the fake attributes list.
+     * @return the fake attributes list.
      */
     public Map<Class<?>, List<String>> getFakeAttributes() {
 
@@ -749,6 +755,9 @@ public class Digester extends DefaultHandler2 {
 
     /**
      * Determine if an attribute is a fake attribute.
+     * @param object The object
+     * @param name The attribute name
+     * @return <code>true</code> if this is a fake attribute
      */
     public boolean isFakeAttribute(Object object, String name) {
 
@@ -785,6 +794,7 @@ public class Digester extends DefaultHandler2 {
      *
      * FIX ME: there is a bug in JAXP/XERCES that prevent the use of a
      * parser that contains a schema with a DTD.
+     * @return the XML reader
      * @exception SAXException if no XMLReader can be instantiated
      */
     public XMLReader getXMLReader() throws SAXException {
@@ -1423,7 +1433,7 @@ public class Digester extends DefaultHandler2 {
      * the root element from the object stack (if any).
      *
      * @param file File containing the XML data to be parsed
-     *
+     * @return the root object
      * @exception IOException if an input/output error occurs
      * @exception SAXException if a parsing exception occurs
      */
@@ -1441,7 +1451,7 @@ public class Digester extends DefaultHandler2 {
      * Returns the root element from the object stack (if any).
      *
      * @param input Input source containing the XML data to be parsed
-     *
+     * @return the root object
      * @exception IOException if an input/output error occurs
      * @exception SAXException if a parsing exception occurs
      */
@@ -1459,7 +1469,7 @@ public class Digester extends DefaultHandler2 {
      * Returns the root element from the object stack (if any).
      *
      * @param input Input stream containing the XML data to be parsed
-     *
+     * @return the root object
      * @exception IOException if an input/output error occurs
      * @exception SAXException if a parsing exception occurs
      */
@@ -1716,6 +1726,7 @@ public class Digester extends DefaultHandler2 {
     /**
      * Return the top object on the stack without removing it.  If there are
      * no objects on the stack, return <code>null</code>.
+     * @return the top object
      */
     public Object peek() {
 
@@ -1736,6 +1747,7 @@ public class Digester extends DefaultHandler2 {
      *
      * @param n Index of the desired element, where 0 is the top of the stack,
      *  1 is the next element down, and so on.
+     * @return the specified object
      */
     public Object peek(int n) {
 
@@ -1752,6 +1764,7 @@ public class Digester extends DefaultHandler2 {
     /**
      * Pop the top object off of the stack, and return it.  If there are
      * no objects on the stack, return <code>null</code>.
+     * @return the top object
      */
     public Object pop() {
 
@@ -1830,6 +1843,7 @@ public class Digester extends DefaultHandler2 {
      *
      * <p>The parameters stack is used to store <code>CallMethodRule</code> parameters.
      * See {@link #params}.</p>
+     * @return the top object on the parameters stack
      */
     public Object peekParams() {
 
@@ -1849,6 +1863,7 @@ public class Digester extends DefaultHandler2 {
      *
      * <p>The parameters stack is used to store <code>CallMethodRule</code> parameters.
      * See {@link #params}.</p>
+     * @return the top object on the parameters stack
      */
     public Object popParams() {
 
@@ -1884,7 +1899,8 @@ public class Digester extends DefaultHandler2 {
     /**
      * Create a SAX exception which also understands about the location in
      * the digester file where the exception occurs
-     *
+     * @param message The error message
+     * @param e The root cause
      * @return the new exception
      */
     public SAXException createSAXException(String message, Exception e) {
@@ -1921,7 +1937,7 @@ public class Digester extends DefaultHandler2 {
     /**
      * Create a SAX exception which also understands about the location in
      * the digester file where the exception occurs
-     *
+     * @param e The root cause
      * @return the new exception
      */
     public SAXException createSAXException(Exception e) {
@@ -1943,7 +1959,7 @@ public class Digester extends DefaultHandler2 {
     /**
      * Create a SAX exception which also understands about the location in
      * the digester file where the exception occurs
-     *
+     * @param message The error message
      * @return the new exception
      */
     public SAXException createSAXException(String message) {

==================================================
Rules.java
index ab6856b46e..3000a3abf1 100644
--- a/java/org/apache/tomcat/util/digester/ObjectCreationFactory.java
+++ b/java/org/apache/tomcat/util/digester/ObjectCreationFactory.java
@@ -33,23 +33,23 @@ import org.xml.sax.Attributes;
 public interface ObjectCreationFactory {
 
     /**
-     * <p>Factory method called by {@link FactoryCreateRule} to supply an
+     * Factory method called by {@link FactoryCreateRule} to supply an
      * object based on the element's attributes.
      *
      * @param attributes the element's attributes
-     *
+     * @return the creted object
      * @throws Exception any exception thrown will be propagated upwards
      */
     public Object createObject(Attributes attributes) throws Exception;
 
     /**
-     * <p>Returns the {@link Digester} that was set by the
+     * @return the {@link Digester} that was set by the
      * {@link FactoryCreateRule} upon initialization.
      */
     public Digester getDigester();
 
     /**
-     * <p>Set the {@link Digester} to allow the implementation to do logging,
+     * Set the {@link Digester} to allow the implementation to do logging,
      * classloading based on the digester's classloader, etc.
      *
      * @param digester parent Digester object

==================================================
RulesBase.java
index 490906f379..e12bf27246 100644
--- a/java/org/apache/tomcat/util/digester/Rules.java
+++ b/java/org/apache/tomcat/util/digester/Rules.java
@@ -36,7 +36,7 @@ public interface Rules {
 
 
     /**
-     * Return the Digester instance with which this Rules instance is
+     * @return the Digester instance with which this Rules instance is
      * associated.
      */
     public Digester getDigester();
@@ -51,7 +51,7 @@ public interface Rules {
 
 
     /**
-     * Return the namespace URI that will be applied to all subsequently
+     * @return the namespace URI that will be applied to all subsequently
      * added <code>Rule</code> objects.
      */
     public String getNamespaceURI();
@@ -96,6 +96,7 @@ public interface Rules {
      * @param namespaceURI Namespace URI for which to select matching rules,
      *  or <code>null</code> to match regardless of namespace URI
      * @param pattern Nesting pattern to be matched
+     * @return a rules list
      */
     public List<Rule> match(String namespaceURI, String pattern);
 
@@ -106,6 +107,7 @@ public interface Rules {
      * instance has been registered, they <strong>must</strong> be returned
      * in the order originally registered through the <code>add()</code>
      * method.
+     * @return a rules list
      */
     public List<Rule> rules();
 

==================================================
FastHttpDateFormat.java
index cdfba4774a..2025af16bb 100644
--- a/java/org/apache/tomcat/util/digester/RulesBase.java
+++ b/java/org/apache/tomcat/util/digester/RulesBase.java
@@ -253,6 +253,7 @@ public class RulesBase implements Rules {
      * @param namespaceURI Namespace URI to match, or <code>null</code> to
      *  select matching rules regardless of namespace URI
      * @param pattern Pattern to be matched
+     * @return a rules list
      */
     protected List<Rule> lookup(String namespaceURI, String pattern) {
 

==================================================
MimeHeaders.java
index 70bfec65aa..c820f2248c 100644
--- a/java/org/apache/tomcat/util/http/FastHttpDateFormat.java
+++ b/java/org/apache/tomcat/util/http/FastHttpDateFormat.java
@@ -91,6 +91,7 @@ public final class FastHttpDateFormat {
 
     /**
      * Get the current date in HTTP format.
+     * @return the HTTP date
      */
     public static final String getCurrentDate() {
 
@@ -110,6 +111,9 @@ public final class FastHttpDateFormat {
 
     /**
      * Get the HTTP format of the specified date.
+     * @param value The date
+     * @param threadLocalformat Local format to avoid synchronization
+     * @return the HTTP date
      */
     public static final String formatDate
         (long value, DateFormat threadLocalformat) {
@@ -137,6 +141,9 @@ public final class FastHttpDateFormat {
 
     /**
      * Try to parse the given date as a HTTP date.
+     * @param value The HTTP date
+     * @param threadLocalformats Local format to avoid synchronization
+     * @return the date as a long
      */
     public static final long parseDate(String value,
                                        DateFormat[] threadLocalformats) {

==================================================
ServerCookies.java
index bd2323b0f2..59504ee9f6 100644
--- a/java/org/apache/tomcat/util/http/MimeHeaders.java
+++ b/java/org/apache/tomcat/util/http/MimeHeaders.java
@@ -24,9 +24,6 @@ import java.util.Enumeration;
 import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.res.StringManager;
 
-/* XXX XXX XXX Need a major rewrite  !!!!
- */
-
 /**
  * This class is used to contain standard internet message headers,
  * used for SMTP (RFC822) and HTTP (RFC2068) messages as well as for
@@ -125,6 +122,7 @@ public class MimeHeaders {
 
     /**
      * Set limit on the number of header fields.
+     * @param limit The new limit
      */
     public void setLimit(int limit) {
         this.limit = limit;
@@ -188,14 +186,15 @@ public class MimeHeaders {
     // -------------------- Idx access to headers ----------
 
     /**
-     * Returns the current number of header fields.
+     * @return the current number of header fields.
      */
     public int size() {
         return count;
     }
 
     /**
-     * Returns the Nth header name, or null if there is no such header.
+     * @param n The header index
+     * @return the Nth header name, or null if there is no such header.
      * This may be used to iterate through all header fields.
      */
     public MessageBytes getName(int n) {
@@ -203,14 +202,19 @@ public class MimeHeaders {
     }
 
     /**
-     * Returns the Nth header value, or null if there is no such header.
+     * @param n The header index
+     * @return the Nth header value, or null if there is no such header.
      * This may be used to iterate through all header fields.
      */
     public MessageBytes getValue(int n) {
         return n >= 0 && n < count ? headers[n].getValue() : null;
     }
 
-    /** Find the index of a header with the given name.
+    /**
+     * Find the index of a header with the given name.
+     * @param name The header name
+     * @param starting Index on which to start looking
+     * @return the header index
      */
     public int findHeader( String name, int starting ) {
         // We can use a hash - but it's not clear how much
@@ -234,6 +238,7 @@ public class MimeHeaders {
      * Returns an enumeration of strings representing the header field names.
      * Field names may appear multiple times in this enumeration, indicating
      * that multiple fields with that name exist in this header.
+     * @return the enumeration
      */
     public Enumeration<String> names() {
         return new NamesEnumerator(this);
@@ -274,18 +279,26 @@ public class MimeHeaders {
         return mh;
     }
 
-    /** Create a new named header , return the MessageBytes
-        container for the new value
-    */
+    /**
+     * Create a new named header , return the MessageBytes
+     * container for the new value
+     * @param name The header name
+     * @return the message bytes container for the value
+     */
     public MessageBytes addValue( String name ) {
          MimeHeaderField mh = createHeader();
         mh.getName().setString(name);
         return mh.getValue();
     }
 
-    /** Create a new named header using un-translated byte[].
-        The conversion to chars can be delayed until
-        encoding is known.
+    /**
+     * Create a new named header using un-translated byte[].
+     * The conversion to chars can be delayed until
+     * encoding is known.
+     * @param b The header name bytes
+     * @param startN Offset
+     * @param len Length
+     * @return the message bytes container for the value
      */
     public MessageBytes addValue(byte b[], int startN, int len)
     {
@@ -294,11 +307,12 @@ public class MimeHeaders {
         return mhf.getValue();
     }
 
-    /** Allow "set" operations -
-        return a MessageBytes container for the
-        header value ( existing header or new
-        if this .
-    */
+    /**
+     * Allow "set" operations, which removes all current values
+     * for this header.
+     * @param name The header name
+     * @return the message bytes container for the value
+     */
     public MessageBytes setValue( String name ) {
         for ( int i = 0; i < count; i++ ) {
             if(headers[i].getName().equalsIgnoreCase(name)) {
@@ -320,6 +334,8 @@ public class MimeHeaders {
      * Finds and returns a header field with the given name.  If no such
      * field exists, null is returned.  If more than one such field is
      * in the header, an arbitrary one is returned.
+     * @param name The header name
+     * @return the value
      */
     public MessageBytes getValue(String name) {
         for (int i = 0; i < count; i++) {
@@ -334,6 +350,9 @@ public class MimeHeaders {
      * Finds and returns a unique header field with the given name. If no such
      * field exists, null is returned. If the specified header field is not
      * unique then an {@link IllegalArgumentException} is thrown.
+     * @param name The header name
+     * @return the value if unique
+     * @throws IllegalArgumentException if the header has multiple values
      */
     public MessageBytes getUniqueValue(String name) {
         MessageBytes result = null;

==================================================
SystemLogHandler.java
index bbb519c476..4040bf055d 100644
--- a/java/org/apache/tomcat/util/http/ServerCookies.java
+++ b/java/org/apache/tomcat/util/http/ServerCookies.java
@@ -35,6 +35,7 @@ public class ServerCookies {
      * Register a new, initialized cookie. Cookies are recycled, and most of the
      * time an existing ServerCookie object is returned. The caller can set the
      * name/value and attributes for the cookie.
+     * @return the new cookie
      */
     public ServerCookie addCookie() {
         if (cookieCount >= serverCookies.length) {

==================================================
AbstractEndpoint.java
index 5095eda20d..b1af0b0468 100644
--- a/java/org/apache/tomcat/util/log/SystemLogHandler.java
+++ b/java/org/apache/tomcat/util/log/SystemLogHandler.java
@@ -121,6 +121,7 @@ public class SystemLogHandler extends PrintStream {
 
     /**
      * Find PrintStream to which the output must be written to.
+     * @return the print stream
      */
     protected PrintStream findStream() {
         Stack<CaptureLog> stack = logs.get();

==================================================
AprEndpoint.java
index 92dfe5c2c9..ea235cc080 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -818,6 +818,7 @@ public abstract class AbstractEndpoint<S> {
 
     /**
      * Hook to allow Endpoints to provide a specific Acceptor implementation.
+     * @return the acceptor
      */
     protected abstract Acceptor createAcceptor();
 

==================================================
Nio2Endpoint.java
index 68b7f2250f..16b659d973 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -708,6 +708,10 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
 
     /**
      * Process the specified connection.
+     * @param socketWrapper The socket wrapper
+     * @return <code>true</code> if the socket was correctly configured
+     *  and processing may continue, <code>false</code> if the socket needs to be
+     *  close immediately
      */
     protected boolean setSocketOptions(SocketWrapperBase<Long> socketWrapper) {
         long socket = socketWrapper.getSocket().longValue();
@@ -764,6 +768,10 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
 
     /**
      * Allocate a new poller of the specified size.
+     * @param size The size
+     * @param pool The pool from which the poller will be allocated
+     * @param timeout The timeout
+     * @return the poller pointer
      */
     protected long allocatePoller(int size, long pool, int timeout) {
         try {
@@ -782,6 +790,10 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
     /**
      * Process given socket. This is called when the socket has been
      * accepted.
+     * @param socket The socket
+     * @return <code>true</code> if the socket was correctly configured
+     *  and processing may continue, <code>false</code> if the socket needs to be
+     *  close immediately
      */
     protected boolean processSocketWithOptions(long socket) {
         try {

==================================================
NioChannel.java
index ff39441398..eea9e47174 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -329,6 +329,10 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
 
     /**
      * Process the specified connection.
+     * @param socket The socket channel
+     * @return <code>true</code> if the socket was correctly configured
+     *  and processing may continue, <code>false</code> if the socket needs to be
+     *  close immediately
      */
     protected boolean setSocketOptions(AsynchronousSocketChannel socket) {
         try {

==================================================
NioEndpoint.java
index fb52bc2f05..d687473fa2 100644
--- a/java/org/apache/tomcat/util/net/NioChannel.java
+++ b/java/org/apache/tomcat/util/net/NioChannel.java
@@ -225,6 +225,7 @@ public class NioChannel implements ByteChannel {
      * socket is removed from the poller without the socket being selected. This
      * results in a connection limit leak for NIO as the endpoint expects the
      * socket to be selected even in error conditions.
+     * @throws IOException If the current thread was interrupted
      */
     protected void checkInterruptStatus() throws IOException {
         if (Thread.interrupted()) {

==================================================
SecureNio2Channel.java
index 35cab2c257..116476ad43 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -382,6 +382,10 @@ public class NioEndpoint extends AbstractJsseEndpoint<NioChannel> {
 
     /**
      * Process the specified connection.
+     * @param socket The socket channel
+     * @return <code>true</code> if the socket was correctly configured
+     *  and processing may continue, <code>false</code> if the socket needs to be
+     *  close immediately
      */
     protected boolean setSocketOptions(SocketChannel socket) {
         // Process the connection

==================================================
SecureNioChannel.java
index 62b8b4e2c1..f267a75367 100644
--- a/java/org/apache/tomcat/util/net/SecureNio2Channel.java
+++ b/java/org/apache/tomcat/util/net/SecureNio2Channel.java
@@ -445,7 +445,7 @@ public class SecureNio2Channel extends Nio2Channel  {
 
     /**
      * Executes all the tasks needed on the same thread.
-     * @return HandshakeStatus
+     * @return the status
      */
     protected SSLEngineResult.HandshakeStatus tasks() {
         Runnable r = null;
@@ -457,8 +457,8 @@ public class SecureNio2Channel extends Nio2Channel  {
 
     /**
      * Performs the WRAP function
-     * @return SSLEngineResult
-     * @throws IOException
+     * @return the result
+     * @throws IOException An IO error occurred
      */
     protected SSLEngineResult handshakeWrap() throws IOException {
         //this should never be called with a network buffer that contains data
@@ -476,8 +476,8 @@ public class SecureNio2Channel extends Nio2Channel  {
 
     /**
      * Perform handshake unwrap
-     * @return SSLEngineResult
-     * @throws IOException
+     * @return the result
+     * @throws IOException An IO error occurred
      */
     protected SSLEngineResult handshakeUnwrap() throws IOException {
         if (netInBuffer.position() == netInBuffer.limit()) {

==================================================
SocketWrapperBase.java
index 88bd6ef528..0122c8a471 100644
--- a/java/org/apache/tomcat/util/net/SecureNioChannel.java
+++ b/java/org/apache/tomcat/util/net/SecureNioChannel.java
@@ -135,7 +135,7 @@ public class SecureNioChannel extends NioChannel  {
      * Flushes the buffer to the network, non blocking
      * @param buf ByteBuffer
      * @return boolean true if the buffer has been emptied out, false otherwise
-     * @throws IOException
+     * @throws IOException An IO error occurred writing data
      */
     protected boolean flush(ByteBuffer buf) throws IOException {
         int remaining = buf.remaining();
@@ -383,7 +383,7 @@ public class SecureNioChannel extends NioChannel  {
 
     /**
      * Executes all the tasks needed on the same thread.
-     * @return HandshakeStatus
+     * @return the status
      */
     protected SSLEngineResult.HandshakeStatus tasks() {
         Runnable r = null;
@@ -396,8 +396,8 @@ public class SecureNioChannel extends NioChannel  {
     /**
      * Performs the WRAP function
      * @param doWrite boolean
-     * @return SSLEngineResult
-     * @throws IOException
+     * @return the result
+     * @throws IOException An IO error occurred
      */
     protected SSLEngineResult handshakeWrap(boolean doWrite) throws IOException {
         //this should never be called with a network buffer that contains data
@@ -418,8 +418,8 @@ public class SecureNioChannel extends NioChannel  {
     /**
      * Perform handshake unwrap
      * @param doread boolean
-     * @return SSLEngineResult
-     * @throws IOException
+     * @return the result
+     * @throws IOException An IO error occurred
      */
     protected SSLEngineResult handshakeUnwrap(boolean doread) throws IOException {
 

==================================================
JSSEUtil.java
index c395673c58..713cad8708 100644
--- a/java/org/apache/tomcat/util/net/SocketWrapperBase.java
+++ b/java/org/apache/tomcat/util/net/SocketWrapperBase.java
@@ -680,6 +680,7 @@ public abstract class SocketWrapperBase<E> {
      * @param check for the IO operation completion
      * @param handler to call when the IO is complete
      * @param dsts buffers
+     * @param <A> The attachment type
      * @return the completion state (done, done inline, or still pending)
      */
     public <A> CompletionState read(boolean block, long timeout, TimeUnit unit, A attachment,
@@ -714,6 +715,7 @@ public abstract class SocketWrapperBase<E> {
      *        used when calling the completion handler
      * @param check for the IO operation completion
      * @param handler to call when the IO is complete
+     * @param <A> The attachment type
      * @return the completion state (done, done inline, or still pending)
      */
     public abstract <A> CompletionState read(ByteBuffer[] dsts, int offset, int length,
@@ -742,6 +744,7 @@ public abstract class SocketWrapperBase<E> {
      * @param check for the IO operation completion
      * @param handler to call when the IO is complete
      * @param srcs buffers
+     * @param <A> The attachment type
      * @return the completion state (done, done inline, or still pending)
      */
     public <A> CompletionState write(boolean block, long timeout, TimeUnit unit, A attachment,
@@ -777,6 +780,7 @@ public abstract class SocketWrapperBase<E> {
      *        used when calling the completion handler
      * @param check for the IO operation completion
      * @param handler to call when the IO is complete
+     * @param <A> The attachment type
      * @return the completion state (done, done inline, or still pending)
      */
     public abstract <A> CompletionState write(ByteBuffer[] srcs, int offset, int length,

==================================================
LimitLatch.java
index 073dd07ff8..2db74b38b7 100644
--- a/java/org/apache/tomcat/util/net/jsse/JSSEUtil.java
+++ b/java/org/apache/tomcat/util/net/jsse/JSSEUtil.java
@@ -354,6 +354,7 @@ public class JSSEUtil extends SSLUtilBase {
      * @param crlf The path to the CRL file.
      * @param trustStore The configured TrustStore.
      * @return The parameters including the CRLs and TrustStore.
+     * @throws Exception An error occurred
      */
     protected CertPathParameters getParameters(String algorithm, String crlf,
             KeyStore trustStore) throws Exception {
@@ -376,7 +377,11 @@ public class JSSEUtil extends SSLUtilBase {
 
     /**
      * Load the collection of CRLs.
-     *
+     * @param crlf The path to the CRL file.
+     * @return the CRLs collection
+     * @throws IOException Error reading CRL file
+     * @throws CRLException CRL error
+     * @throws CertificateException Error processing certificate
      */
     protected Collection<? extends CRL> getCRLs(String crlf)
         throws IOException, CRLException, CertificateException {

==================================================
ThreadPoolExecutor.java
index 8293c4e87e..e868405ff6 100644
--- a/java/org/apache/tomcat/util/threads/LimitLatch.java
+++ b/java/org/apache/tomcat/util/threads/LimitLatch.java
@@ -82,6 +82,7 @@ public class LimitLatch {
 
     /**
      * Obtain the current limit.
+     * @return the limit
      */
     public long getLimit() {
         return limit;
@@ -107,6 +108,7 @@ public class LimitLatch {
     /**
      * Acquires a shared latch if one is available or waits for one if no shared
      * latch is current available.
+     * @throws InterruptedException If the current thread is interrupted
      */
     public void countUpOrAwait() throws InterruptedException {
         if (log.isDebugEnabled()) {
@@ -131,6 +133,7 @@ public class LimitLatch {
     /**
      * Releases all waiting threads and causes the {@link #limit} to be ignored
      * until {@link #reset()} is called.
+     * @return <code>true</code> if release was done
      */
     public boolean releaseAll() {
         released = true;
@@ -149,6 +152,7 @@ public class LimitLatch {
     /**
      * Returns <code>true</code> if there is at least one thread waiting to
      * acquire the shared lock, otherwise returns <code>false</code>.
+     * @return <code>true</code> if threads are waiting
      */
     public boolean hasQueuedThreads() {
         return sync.hasQueuedThreads();
@@ -157,6 +161,7 @@ public class LimitLatch {
     /**
      * Provide access to the list of threads waiting to acquire this limited
      * shared latch.
+     * @return a collection of threads
      */
     public Collection<Thread> getQueuedThreads() {
         return sync.getQueuedThreads();

==================================================
WsSession.java
index 99d9977a4b..179126be7a 100644
--- a/java/org/apache/tomcat/util/threads/ThreadPoolExecutor.java
+++ b/java/org/apache/tomcat/util/threads/ThreadPoolExecutor.java
@@ -151,6 +151,8 @@ public class ThreadPoolExecutor extends java.util.concurrent.ThreadPoolExecutor
      * full after that.
      *
      * @param command the runnable task
+     * @param timeout A timeout for the completion of the task
+     * @param unit The timeout time unit
      * @throws RejectedExecutionException if this task cannot be
      * accepted for execution - the queue is full
      * @throws NullPointerException if command or unit is null

==================================================
