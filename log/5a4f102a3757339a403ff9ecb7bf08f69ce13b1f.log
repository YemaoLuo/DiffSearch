5a4f102a3757339a403ff9ecb7bf08f69ce13b1f
==================================================
Refactor tests to reduce boilerplate code. There is more to do here.
==================================================
Mark Emlyn
==================================================
Sat Nov 1 21:04:20 2014 +0000
==================================================
TestCompositeELResolver.java
Refactor tests to reduce boilerplate code. There is more to do here.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1636054 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestPageContext.java
index 27eec550ad..6a06be680b 100644
--- a/test/javax/el/TestCompositeELResolver.java
+++ b/test/javax/el/TestCompositeELResolver.java
@@ -16,40 +16,20 @@
  */
 package javax.el;
 
-import java.io.File;
-
 import javax.servlet.http.HttpServletResponse;
 
 import static org.junit.Assert.assertEquals;
 
 import org.junit.Test;
 
-import org.apache.catalina.WebResourceRoot;
-import org.apache.catalina.core.StandardContext;
-import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
-import org.apache.catalina.webresources.StandardRoot;
 import org.apache.tomcat.util.buf.ByteChunk;
 
 public class TestCompositeELResolver extends TomcatBaseTest {
 
     @Test
     public void testBug50408() throws Exception {
-        Tomcat tomcat = getTomcatInstance();
-
-        File appDir =  new File("test/webapp");
-        // app dir is relative to server home
-        StandardContext ctxt = (StandardContext) tomcat.addWebapp(null,
-                "/test", appDir.getAbsolutePath());
-
-        // This test needs the JSTL libraries
-        File lib = new File("webapps/examples/WEB-INF/lib");
-        ctxt.setResources(new StandardRoot(ctxt));
-        ctxt.getResources().createWebResourceSet(
-                WebResourceRoot.ResourceSetType.POST, "/WEB-INF/lib",
-                lib.getAbsolutePath(), null, "/");
-
-        tomcat.start();
+        getTomcatInstanceTestWebapp(true, true);
 
         int rc = getUrl("http://localhost:" + getPort() +
                 "/test/bug5nnnn/bug50408.jsp", new ByteChunk(), null);

==================================================
TestApplicationContext.java
index 9c66d92aec..f229c509d5 100644
--- a/test/javax/servlet/jsp/TestPageContext.java
+++ b/test/javax/servlet/jsp/TestPageContext.java
@@ -14,16 +14,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package javax.servlet.jsp;
 
-import java.io.File;
-
 import static org.junit.Assert.assertTrue;
 
 import org.junit.Test;
 
-import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.tomcat.util.buf.ByteChunk;
 
@@ -31,13 +27,7 @@ public class TestPageContext extends TomcatBaseTest {
 
     @Test
     public void testBug49196() throws Exception {
-        Tomcat tomcat = getTomcatInstance();
-
-        File appDir = new File("test/webapp");
-        // app dir is relative to server home
-        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-
-        tomcat.start();
+        getTomcatInstanceTestWebapp(false, true);
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
                 "/test/bug49nnn/bug49196.jsp");

==================================================
TomcatBaseTest.java
index ebc88e2b30..14e7f25e08 100644
--- a/test/org/apache/catalina/core/TestApplicationContext.java
+++ b/test/org/apache/catalina/core/TestApplicationContext.java
@@ -16,7 +16,6 @@
  */
 package org.apache.catalina.core;
 
-import java.io.File;
 import java.util.Collection;
 
 import javax.servlet.Filter;
@@ -29,6 +28,7 @@ import javax.servlet.http.HttpServletResponse;
 import org.junit.Assert;
 import org.junit.Test;
 
+import org.apache.catalina.LifecycleException;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.tomcat.util.buf.ByteChunk;
@@ -37,13 +37,7 @@ public class TestApplicationContext extends TomcatBaseTest {
 
     @Test
     public void testBug53257() throws Exception {
-        Tomcat tomcat = getTomcatInstance();
-
-        File appDir = new File("test/webapp");
-        // app dir is relative to server home
-        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-
-        tomcat.start();
+        getTomcatInstanceTestWebapp(false, true);
 
         ByteChunk res = getUrl("http://localhost:" + getPort() +
                 "/test/bug53257/index.jsp");
@@ -60,13 +54,7 @@ public class TestApplicationContext extends TomcatBaseTest {
 
     @Test
     public void testBug53467() throws Exception {
-        Tomcat tomcat = getTomcatInstance();
-
-        File appDir = new File("test/webapp");
-        // app dir is relative to server home
-        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
-
-        tomcat.start();
+        getTomcatInstanceTestWebapp(false, true);
 
         ByteChunk res = new ByteChunk();
         int rc = getUrl("http://localhost:" + getPort() +
@@ -78,37 +66,35 @@ public class TestApplicationContext extends TomcatBaseTest {
 
 
     @Test(expected = IllegalArgumentException.class)
-    public void testAddFilterWithFilterNameNull() {
+    public void testAddFilterWithFilterNameNull() throws LifecycleException {
         getServletContext().addFilter(null, (Filter) null);
     }
 
 
     @Test(expected = IllegalArgumentException.class)
-    public void testAddFilterWithFilterNameEmptyString() {
+    public void testAddFilterWithFilterNameEmptyString() throws LifecycleException {
         getServletContext().addFilter("", (Filter) null);
     }
 
 
     @Test(expected = IllegalArgumentException.class)
-    public void testAddServletWithServletNameNull() {
+    public void testAddServletWithServletNameNull() throws LifecycleException {
         getServletContext().addServlet(null, (Servlet) null);
     }
 
 
     @Test(expected = IllegalArgumentException.class)
-    public void testAddServletWithServletNameEmptyString() {
+    public void testAddServletWithServletNameEmptyString() throws LifecycleException {
         getServletContext().addServlet("", (Servlet) null);
     }
 
 
     @Test
     public void testGetJspConfigDescriptor() throws Exception {
-        Tomcat tomcat = getTomcatInstance();
+        Tomcat tomcat = getTomcatInstanceTestWebapp(false, false);
 
-        File appDir = new File("test/webapp");
-        // app dir is relative to server home
-        StandardContext standardContext = (StandardContext) tomcat.addWebapp(
-                null, "/test", appDir.getAbsolutePath());
+        StandardContext standardContext =
+                (StandardContext) tomcat.getHost().findChildren()[0];
 
         ServletContext servletContext = standardContext.getServletContext();
 
@@ -121,12 +107,10 @@ public class TestApplicationContext extends TomcatBaseTest {
 
     @Test
     public void testJspPropertyGroupsAreIsolated() throws Exception {
-        Tomcat tomcat = getTomcatInstance();
+        Tomcat tomcat = getTomcatInstanceTestWebapp(false, false);
 
-        File appDir = new File("test/webapp");
-        // app dir is relative to server home
-        StandardContext standardContext = (StandardContext) tomcat.addWebapp(
-                null, "/test", appDir.getAbsolutePath());
+        StandardContext standardContext =
+                (StandardContext) tomcat.getHost().findChildren()[0];
 
         ServletContext servletContext = standardContext.getServletContext();
 
@@ -147,13 +131,11 @@ public class TestApplicationContext extends TomcatBaseTest {
     }
 
 
-    private ServletContext getServletContext() {
-        Tomcat tomcat = getTomcatInstance();
+    private ServletContext getServletContext() throws LifecycleException {
+        Tomcat tomcat = getTomcatInstanceTestWebapp(false, false);
 
-        File appDir = new File("test/webapp");
-        // app dir is relative to server home
-        StandardContext standardContext = (StandardContext) tomcat.addWebapp(
-                null, "/test", appDir.getAbsolutePath());
+        StandardContext standardContext =
+                (StandardContext) tomcat.getHost().findChildren()[0];
 
         return standardContext.getServletContext();
     }

==================================================
TestELInJsp.java
index fda1fbd81b..0e29fb34ba 100644
--- a/test/org/apache/catalina/startup/TomcatBaseTest.java
+++ b/test/org/apache/catalina/startup/TomcatBaseTest.java
@@ -45,12 +45,14 @@ import org.apache.catalina.LifecycleState;
 import org.apache.catalina.Manager;
 import org.apache.catalina.Server;
 import org.apache.catalina.Service;
+import org.apache.catalina.WebResourceRoot;
 import org.apache.catalina.connector.Connector;
 import org.apache.catalina.core.AprLifecycleListener;
 import org.apache.catalina.core.StandardServer;
 import org.apache.catalina.session.ManagerBase;
 import org.apache.catalina.session.StandardManager;
 import org.apache.catalina.valves.AccessLogValve;
+import org.apache.catalina.webresources.StandardRoot;
 import org.apache.coyote.http11.Http11NioProtocol;
 import org.apache.tomcat.util.buf.ByteChunk;
 
@@ -64,13 +66,46 @@ public abstract class TomcatBaseTest extends LoggingBaseTest {
 
     public static final String TEMP_DIR = System.getProperty("java.io.tmpdir");
 
-    /*
-     * Make Tomcat instance accessible to sub-classes.
+    /**
+     * Make the Tomcat instance available to sub-classes.
+     *
+     * @return A Tomcat instance without any pre-configured web applications
      */
     public Tomcat getTomcatInstance() {
         return tomcat;
     }
 
+    /**
+     * Make the Tomcat instance preconfigured with test/webapp available to
+     * sub-classes.
+     * @param addJstl Should JSTL support be added to the test webapp
+     * @param start   Should the Tomcat instance be started
+     *
+     * @return A Tomcat instance pre-configured with the web application located
+     *         at test/webapp
+     *
+     * @throws LifecycleException If a problem occurs while starting the
+     *                            instance
+     */
+    public Tomcat getTomcatInstanceTestWebapp(boolean addJstl, boolean start)
+            throws LifecycleException {
+        File appDir = new File("test/webapp");
+        Context ctx = tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
+
+        if (addJstl) {
+            File lib = new File("webapps/examples/WEB-INF/lib");
+            ctx.setResources(new StandardRoot(ctx));
+            ctx.getResources().createWebResourceSet(
+                    WebResourceRoot.ResourceSetType.POST, "/WEB-INF/lib",
+                    lib.getAbsolutePath(), null, "/");
+        }
+
+        if (start) {
+            tomcat.start();
+        }
+        return tomcat;
+    }
+
     /*
      * Sub-classes need to know port so they can connect
      */

==================================================
