cf3a84c91268b26dcd5a08e364923e16008c0a32
==================================================
Refactor the hooks from the CoyoteAdapter to the access logs
==================================================
Mark Emlyn
==================================================
Thu Jun 3 15:00:11 2010 +0000
==================================================
AccessLog.java
Refactor the hooks from the CoyoteAdapter to the access logs
- cleaner interface
- handles AccessLogs at multiple levels (but not multiple AccessLogs per container)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@951018 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Container.java
index fc9061d6e7..83fedc703c 100644
--- a/java/org/apache/catalina/AccessLog.java
+++ b/java/org/apache/catalina/AccessLog.java
@@ -23,9 +23,8 @@ import org.apache.catalina.connector.Response;
 
 /**
  * Intended for use by a {@link Valve} to indicate that the {@link Valve}
- * provides access logging. It is used by the Tomcat internals (the
- * {@link org.apache.catalina.connector.CoyoteAdapter} at the time of writing)
- * to identify a Valve that logs access requests so requests that are rejected
+ * provides access logging. It is used by the Tomcat internals to identify a
+ * Valve that logs access requests so requests that are rejected
  * earlier in the processing chain can still be added to the access log.
  * Implementations of this interface should be robust against the provided
  * {@link Request} and {@link Response} objects being null, having null

==================================================
CoyoteAdapter.java
index 7675e8b5eb..8e730be6a3 100644
--- a/java/org/apache/catalina/Container.java
+++ b/java/org/apache/catalina/Container.java
@@ -450,4 +450,27 @@ public interface Container extends Lifecycle {
      * @param data Event data
      */
     public void fireContainerEvent(String type, Object data);
+    
+    
+    /**
+     * Log a request/response that was destined for this container but has been
+     * handled earlier in the processing chain so that the request/response
+     * still appears in the correct access logs.
+     * @param request       Request (associated with the response) to log
+     * @param response      Response (associated with the request) to log
+     * @param time          Time taken to process the request/response in
+     *                      milliseconds (use 0 if not known) 
+     * @param   useDefault  Flag that indicates that the request/response should
+     *                      be logged in the engine's default access log
+     */
+    public void logAccess(Request request, Response response, long time,
+            boolean useDefault);
+    
+    
+    /**
+     * Identify the AccessLog to use to log a request/response that was destined
+     * for this container but was handled earlier in the processing chain so
+     * that the request/response still appears in the correct access logs.
+     */
+    public AccessLog getAccessLog();
 }

==================================================
ContainerBase.java
index f0b015bed5..4c7547544a 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -24,13 +24,8 @@ import java.util.EnumSet;
 
 import javax.servlet.SessionTrackingMode;
 
-import org.apache.catalina.AccessLog;
-import org.apache.catalina.Container;
 import org.apache.catalina.Context;
-import org.apache.catalina.Engine;
 import org.apache.catalina.Globals;
-import org.apache.catalina.Host;
-import org.apache.catalina.Valve;
 import org.apache.catalina.Wrapper;
 import org.apache.tomcat.util.res.StringManager;
 import org.apache.catalina.comet.CometEvent;
@@ -120,11 +115,6 @@ public class CoyoteAdapter implements Adapter {
     protected static URLEncoder urlEncoder;
 
 
-    /**
-     * Access log to use for rejected requests
-     */
-    private volatile AccessLog accessLog = null;
-    
     // ----------------------------------------------------- Static Initializer
 
 
@@ -522,14 +512,16 @@ public class CoyoteAdapter implements Adapter {
         } catch (IOException ioe) {
             res.setStatus(400);
             res.setMessage("Invalid URI: " + ioe.getMessage());
-            getAccessLog().log(request, response, 0);
+            connector.getService().getContainer().logAccess(
+                    request, response, 0, true);
             return false;
         }
         // Normalization
         if (!normalize(req.decodedURI())) {
             res.setStatus(400);
             res.setMessage("Invalid URI");
-            getAccessLog().log(request, response, 0);
+            connector.getService().getContainer().logAccess(
+                    request, response, 0, true);
             return false;
         }
         // Character decoding
@@ -538,7 +530,8 @@ public class CoyoteAdapter implements Adapter {
         if (!checkNormalize(req.decodedURI())) {
             res.setStatus(400);
             res.setMessage("Invalid URI character encoding");
-            getAccessLog().log(request, response, 0);
+            connector.getService().getContainer().logAccess(
+                    request, response, 0, true);
             return false;
         }
 
@@ -598,7 +591,7 @@ public class CoyoteAdapter implements Adapter {
             res.setStatus(405);
             res.addHeader("Allow", header);
             res.setMessage("TRACE method is not allowed");
-            getAccessLog().log(request, response, 0);
+            request.getContext().logAccess(request, response, 0, true);
             return false;
         }
 
@@ -637,7 +630,7 @@ public class CoyoteAdapter implements Adapter {
                 redirectPath = redirectPath + "?" + query;
             }
             response.sendRedirect(redirectPath);
-            getAccessLog().log(request, response, 0);
+            request.getContext().logAccess(request, response, 0, true);
             return false;
         }
 
@@ -1088,63 +1081,4 @@ public class CoyoteAdapter implements Adapter {
             b[pos + dest] = b[pos + src];
         }
     }
-
-
-    /**
-     * Obtain a reference to the access log to use to log rejected requests.
-     * 
-     * @return
-     */
-    protected AccessLog getAccessLog() {
-        if (accessLog != null) {
-            return accessLog;
-        }
-        
-        // First look in Engine for associated service
-        Engine engine = (Engine) connector.getService().getContainer();
-        accessLog = findAccessLog(engine);
-        if (accessLog != null) {
-            return accessLog;
-        }
-        
-        // Then look in default host
-        Host defaultHost = (Host) engine.findChild(engine.getDefaultHost());
-        accessLog = findAccessLog(defaultHost);
-        if (accessLog != null) {
-            return accessLog;
-        }
-            
-        // Then look in ROOT context of default host
-        Context defaultContext = (Context) defaultHost.findChild("");
-        accessLog = findAccessLog(defaultContext);
-        if (accessLog != null) {
-            return accessLog;
-        }
-
-        accessLog = new NoopAccessLog(); 
-        return accessLog;
-    }
-    
-    private AccessLog findAccessLog(Container container) {
-        if (container == null) {
-            return new NoopAccessLog();
-        }
-
-        Valve valves[] = container.getPipeline().getValves();
-        for (Valve valve : valves) {
-            if (valve instanceof AccessLog) {
-                return (AccessLog) valve;
-            }
-        }
-        return null;
-    }
-    
-    private static final class NoopAccessLog implements AccessLog {
-
-        @Override
-        public void log(Request request, Response response, long time) {
-            // NOOP
-        }
-        
-    }
 }

==================================================
StandardEngine.java
index 1b148eb18c..b23af4ce74 100644
--- a/java/org/apache/catalina/core/ContainerBase.java
+++ b/java/org/apache/catalina/core/ContainerBase.java
@@ -31,6 +31,7 @@ import javax.management.ObjectName;
 import javax.naming.directory.DirContext;
 import javax.servlet.ServletException;
 
+import org.apache.catalina.AccessLog;
 import org.apache.catalina.CatalinaFactory;
 import org.apache.catalina.Cluster;
 import org.apache.catalina.Container;
@@ -265,6 +266,13 @@ public abstract class ContainerBase extends LifecycleMBeanBase
     private volatile boolean threadDone = false;
 
 
+    /**
+     * The access log to use for requests normally handled by this container
+     * that have been handled earlier in the processing chain.
+     */
+    protected volatile AccessLog accessLog = null;
+    private volatile boolean accessLogScanComplete = false;
+
     // ------------------------------------------------------------- Properties
 
 
@@ -1062,6 +1070,46 @@ public abstract class ContainerBase extends LifecycleMBeanBase
         super.destroyInternal();
     }
 
+    
+    /**
+     * Check this container for an access log and if none is found, look to the
+     * parent. If there is no parent and still none is found, use the NoOp
+     * access log.
+     */
+    public void logAccess(Request request, Response response, long time,
+            boolean useDefault) {
+        
+        boolean logged = false;
+        
+        if (getAccessLog() != null) {
+            getAccessLog().log(request, response, time);
+            logged = true;
+        }
+        
+        if (getParent() != null) {
+            // No need to use default logger once request/response has been logged
+            // once
+            getParent().logAccess(request, response, time, (useDefault && !logged));
+        }
+    }
+
+    public AccessLog getAccessLog() {
+        
+        if (accessLogScanComplete) {
+            return accessLog;
+        }
+        
+        Valve valves[] = getPipeline().getValves();
+        for (Valve valve : valves) {
+            if (valve instanceof AccessLog) {
+                accessLog = (AccessLog) valve;
+                break;
+            }
+        }
+        accessLogScanComplete = true;
+        return accessLog;
+    }
+
     // ------------------------------------------------------- Pipeline Methods
 
 
@@ -1305,4 +1353,11 @@ public abstract class ContainerBase extends LifecycleMBeanBase
 
     }
 
+    protected static final class NoopAccessLog implements AccessLog {
+
+        @Override
+        public void log(Request request, Response response, long time) {
+            // NOOP
+        }
+    }
 }

==================================================
