01d9b4892e43ef876abd1478fa42e0fd8af27862
==================================================
kkolinko review of r1503056
==================================================
Mark Emlyn
==================================================
Mon Jul 15 08:19:09 2013 +0000
==================================================
AstLambdaExpression.java
index a049962b8e..5f3ab690c8 100644
--- a/java/org/apache/el/Messages.properties
+++ b/java/org/apache/el/Messages.properties
@@ -54,4 +54,4 @@ error.context.null=ELContext was null
 error.identifier.notjava=The identifier [{0}] is not a valid Java identifier as required by section 1.19 of the EL specification (Identifier ::= Java language identifier). This check can be disabled by setting the system property org.apache.el.parser.SKIP_IDENTIFIER_CHECK to true.
 
 # AstLambdaExpression
-error.args.tooFew=Only [{0}] arguments were provided for a lambda expression that requires at least [{1}]
+error.lambda.args.tooFew=Only [{0}] arguments were provided for a lambda expression that requires at least [{1}]

==================================================
TestAstLambdaExpression.java
index 7eb53c80f0..1fe099b759 100644
--- a/java/org/apache/el/parser/AstLambdaExpression.java
+++ b/java/org/apache/el/parser/AstLambdaExpression.java
@@ -49,18 +49,18 @@ public class AstLambdaExpression extends SimpleNode {
             argCount = paramValues.length;
         }
         if (paramCount > argCount) {
-            throw new ELException(MessageFactory.get("error.args.tooFew",
+            throw new ELException(MessageFactory.get("error.lamdba.args.tooFew",
                     Integer.valueOf(argCount), Integer.valueOf(paramCount)));
         }
 
         // Build the argument map
-        Map<String,Object> lambdaArgumnents = new HashMap<>();
+        Map<String,Object> lambdaArguments = new HashMap<>();
         for (int i = 0; i < paramCount; i++) {
-            lambdaArgumnents.put(formalParameters.children[i].getImage(),
+            lambdaArguments.put(formalParameters.children[i].getImage(),
                     paramValues[i]);
         }
 
-        ctx.enterLambdaScope(lambdaArgumnents);
+        ctx.enterLambdaScope(lambdaArguments);
 
         try {
             return children[1].getValue(ctx);

==================================================
