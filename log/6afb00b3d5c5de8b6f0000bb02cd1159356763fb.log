6afb00b3d5c5de8b6f0000bb02cd1159356763fb
==================================================
Polishing TaskQueue & ThreadPoolExecutor
==================================================
lihan lihan@apache.org
==================================================
Tue Sep 27 11:04:44 2022 +0800
==================================================
TaskQueue.java
Polishing TaskQueue & ThreadPoolExecutor

The ThreadPoolExecutor#setCorePoolSize no longer does queue.remainingCapacity()==0 checks on JDK7 and above, so remove the code that temporarily fakes this condition.



==================================================
ThreadPoolExecutor.java
index 0e7cea653e..981949975b 100644
--- a/java/org/apache/tomcat/util/threads/TaskQueue.java
+++ b/java/org/apache/tomcat/util/threads/TaskQueue.java
@@ -38,10 +38,6 @@ public class TaskQueue extends LinkedBlockingQueue<Runnable> {
 
     private transient volatile ThreadPoolExecutor parent = null;
 
-    // No need to be volatile. This is written and read in a single thread
-    // (when stopping a context and firing the listeners)
-    private int forcedRemainingCapacity = -1;
-
     public TaskQueue() {
         super();
     }
@@ -121,25 +117,4 @@ public class TaskQueue extends LinkedBlockingQueue<Runnable> {
         }
         return super.take();
     }
-
-    @Override
-    public int remainingCapacity() {
-        if (forcedRemainingCapacity > DEFAULT_FORCED_REMAINING_CAPACITY) {
-            // ThreadPoolExecutor.setCorePoolSize checks that
-            // remainingCapacity==0 to allow to interrupt idle threads
-            // I don't see why, but this hack allows to conform to this
-            // "requirement"
-            return forcedRemainingCapacity;
-        }
-        return super.remainingCapacity();
-    }
-
-    public void setForcedRemainingCapacity(int forcedRemainingCapacity) {
-        this.forcedRemainingCapacity = forcedRemainingCapacity;
-    }
-
-    void resetForcedRemainingCapacity() {
-        this.forcedRemainingCapacity = DEFAULT_FORCED_REMAINING_CAPACITY;
-    }
-
 }

==================================================
