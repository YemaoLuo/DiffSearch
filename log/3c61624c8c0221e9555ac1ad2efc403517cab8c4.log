3c61624c8c0221e9555ac1ad2efc403517cab8c4
==================================================
Remove unused toString() methods
==================================================
Mark Emlyn
==================================================
Wed Sep 12 17:47:43 2012 +0000
==================================================
AnnotationElementValue.java
Remove unused toString() methods

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1384051 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ArrayElementValue.java
index d9888c042c..ef70567c21 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationElementValue.java
@@ -42,18 +42,6 @@ public class AnnotationElementValue extends ElementValue
         annotationEntry.dump(dos);
     }
 
-    @Override
-    public String stringifyValue()
-    {
-        return annotationEntry.toString();
-    }
-
-    @Override
-    public String toString()
-    {
-        return stringifyValue();
-    }
-
     public AnnotationEntry getAnnotationEntry()
     {
         return annotationEntry;

==================================================
Attribute.java
index 0c3804dc22..d9baa450a5 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ArrayElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ArrayElementValue.java
@@ -25,21 +25,6 @@ public class ArrayElementValue extends ElementValue
     // For array types, this is the array
     private ElementValue[] evalues;
 
-    @Override
-    public String toString()
-    {
-        StringBuilder sb = new StringBuilder();
-        sb.append("{");
-        for (int i = 0; i < evalues.length; i++)
-        {
-            sb.append(evalues[i].toString());
-            if ((i + 1) < evalues.length)
-                sb.append(",");
-        }
-        sb.append("}");
-        return sb.toString();
-    }
-
     public ArrayElementValue(int type, ElementValue[] datums, ConstantPool cpool)
     {
         super(type, cpool);
@@ -60,21 +45,6 @@ public class ArrayElementValue extends ElementValue
         }
     }
 
-    @Override
-    public String stringifyValue()
-    {
-        StringBuilder sb = new StringBuilder();
-        sb.append("[");
-        for (int i = 0; i < evalues.length; i++)
-        {
-            sb.append(evalues[i].stringifyValue());
-            if ((i + 1) < evalues.length)
-                sb.append(",");
-        }
-        sb.append("]");
-        return sb.toString();
-    }
-
     public ElementValue[] getElementValuesArray()
     {
         return evalues;

==================================================
ClassElementValue.java
index 3c42d5fbe0..42df613978 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
@@ -215,13 +215,4 @@ public abstract class Attribute implements Cloneable, Serializable
      * @return deep copy of this attribute
      */
     public abstract Attribute copy(ConstantPool _constant_pool);
-
-    /**
-     * @return attribute name.
-     */
-    @Override
-    public String toString()
-    {
-        return Constants.ATTRIBUTE_NAMES[tag];
-    }
 }

==================================================
Code.java
index 0008796186..48f8750cbc 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ClassElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ClassElementValue.java
@@ -20,8 +20,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataOutputStream;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 public class ClassElementValue extends ElementValue
 {
     // For primitive types and string type, this points to the value entry in
@@ -36,14 +34,6 @@ public class ClassElementValue extends ElementValue
     }
 
 
-    @Override
-    public String stringifyValue()
-    {
-        ConstantUtf8 cu8 = (ConstantUtf8) cpool.getConstant(idx,
-                Constants.CONSTANT_Utf8);
-        return cu8.getBytes();
-    }
-
     @Override
     public void dump(DataOutputStream dos) throws IOException
     {

==================================================
CodeException.java
index d9cc4c0c37..acb8b760c7 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Code.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Code.java
@@ -182,39 +182,6 @@ public final class Code extends Attribute {
     }
 
 
-    /**
-     * @return String representation of code chunk.
-     */
-    public final String toString( boolean verbose ) {
-        StringBuilder buf = new StringBuilder(100);
-        buf.append("Code(max_stack = ").append(max_stack).append(", max_locals = ").append(
-                max_locals).append(", code_length = ").append(code_length).append(")\n").append(
-                Utility.codeToString(code, constant_pool, 0, -1, verbose));
-        if (exception_table_length > 0) {
-            buf.append("\nException handler(s) = \n").append("From\tTo\tHandler\tType\n");
-            for (int i = 0; i < exception_table_length; i++) {
-                buf.append(exception_table[i].toString(constant_pool, verbose)).append("\n");
-            }
-        }
-        if (attributes_count > 0) {
-            buf.append("\nAttribute(s) = \n");
-            for (int i = 0; i < attributes_count; i++) {
-                buf.append(attributes[i].toString()).append("\n");
-            }
-        }
-        return buf.toString();
-    }
-
-
-    /**
-     * @return String representation of code chunk.
-     */
-    @Override
-    public final String toString() {
-        return toString(true);
-    }
-
-
     /**
      * @return deep copy of this attribute
      *

==================================================
Constant.java
index 21ded53892..275160f3cb 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/CodeException.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/CodeException.java
@@ -90,16 +90,6 @@ public final class CodeException implements Cloneable, Constants, Serializable {
     }
 
 
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        return "CodeException(start_pc = " + start_pc + ", end_pc = " + end_pc + ", handler_pc = "
-                + handler_pc + ", catch_type = " + catch_type + ")";
-    }
-
-
     /**
      * @return String representation.
      */

==================================================
ConstantCP.java
index 23fa969138..e92c5f25aa 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Constant.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Constant.java
@@ -76,15 +76,6 @@ public abstract class Constant implements Cloneable, Serializable {
     }
 
 
-    /**
-     * @return String representation.
-     */
-    @Override
-    public String toString() {
-        return Constants.CONSTANT_NAMES[tag] + "[" + tag + "]";
-    }
-
-
     @Override
     public Object clone() throws CloneNotSupportedException {
         return super.clone();

==================================================
ConstantClass.java
index 293bae04dd..4850414a12 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantCP.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantCP.java
@@ -74,14 +74,4 @@ public abstract class ConstantCP extends Constant {
     public final int getNameAndTypeIndex() {
         return name_and_type_index;
     }
-
-
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(class_index = " + class_index + ", name_and_type_index = "
-                + name_and_type_index + ")";
-    }
 }

==================================================
ConstantDouble.java
index 779f800bbb..3df7fde083 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantClass.java
@@ -64,13 +64,4 @@ public final class ConstantClass extends Constant {
     public final int getNameIndex() {
         return name_index;
     }
-
-
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(name_index = " + name_index + ")";
-    }
 }

==================================================
ConstantFloat.java
index 9a3db9ac47..6045c3cf68 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantDouble.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantDouble.java
@@ -63,13 +63,4 @@ public final class ConstantDouble extends Constant {
     public final double getBytes() {
         return bytes;
     }
-
-
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(bytes = " + bytes + ")";
-    }
 }

==================================================
ConstantInteger.java
index a8cfedca2b..bfb7864d36 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantFloat.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantFloat.java
@@ -63,13 +63,4 @@ public final class ConstantFloat extends Constant {
     public final float getBytes() {
         return bytes;
     }
-
-
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(bytes = " + bytes + ")";
-    }
 }

==================================================
ConstantInvokeDynamic.java
index 7eadd37e5d..d5f99df849 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantInteger.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantInteger.java
@@ -63,13 +63,4 @@ public final class ConstantInteger extends Constant {
     public final int getBytes() {
         return bytes;
     }
-
-
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(bytes = " + bytes + ")";
-    }
 }

==================================================
ConstantLong.java
index bc03306b6f..c42d9d8d1f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantInvokeDynamic.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantInvokeDynamic.java
@@ -81,15 +81,4 @@ public final class ConstantInvokeDynamic extends Constant {
     public void setNameAndTypeIndex(int name_and_type_index) {
         this.name_and_type_index = name_and_type_index;
     }
-
-
-    /**
-     * @return String representation
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(bootstrap_method_attr_index = " +
-                bootstrap_method_attr_index + ", name_and_type_index = " +
-                name_and_type_index + ")";
-    }
 }

==================================================
ConstantMethodHandle.java
index 10574f8d36..388c7572d7 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantLong.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantLong.java
@@ -63,13 +63,4 @@ public final class ConstantLong extends Constant {
     public final long getBytes() {
         return bytes;
     }
-
-
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(bytes = " + bytes + ")";
-    }
 }

==================================================
ConstantMethodType.java
index 9ba58f38f5..1a2e467063 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantMethodHandle.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantMethodHandle.java
@@ -80,14 +80,4 @@ public final class ConstantMethodHandle extends Constant {
     public void setReferenceIndex(int reference_index) {
         this.reference_index = reference_index;
     }
-
-
-    /**
-     * @return String representation
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(reference_kind = " + reference_kind +
-                ", reference_index = " + reference_index + ")";
-    }
 }

==================================================
ConstantNameAndType.java
index 32804883bd..6ca1bc328a 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantMethodType.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantMethodType.java
@@ -68,13 +68,4 @@ public final class ConstantMethodType extends Constant {
     public void setDescriptorIndex(int descriptor_index) {
         this.descriptor_index = descriptor_index;
     }
-
-
-    /**
-     * @return String representation
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(descriptor_index = " + descriptor_index + ")";
-    }
 }

==================================================
ConstantPool.java
index 5c71817ff4..df1306dd21 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantNameAndType.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantNameAndType.java
@@ -75,14 +75,4 @@ public final class ConstantNameAndType extends Constant {
     public final int getSignatureIndex() {
         return signature_index;
     }
-
-
-    /**
-     * @return String representation
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(name_index = " + name_index + ", signature_index = "
-                + signature_index + ")";
-    }
 }

==================================================
ConstantString.java
index a6549d815a..4e1cde7790 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
@@ -258,19 +258,4 @@ public class ConstantPool implements Cloneable, Serializable {
     public int getLength() {
         return constant_pool_count;
     }
-
-
-    /**
-     * @return String representation.
-     */
-    @Override
-    public String toString() {
-        StringBuilder buf = new StringBuilder();
-        for (int i = 1; i < constant_pool_count; i++) {
-            buf.append(i).append(")").append(constant_pool[i]).append("\n");
-        }
-        return buf.toString();
-    }
-
-
 }

==================================================
ConstantUtf8.java
index b98bdb45b8..d1226824e2 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantString.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantString.java
@@ -63,13 +63,4 @@ public final class ConstantString extends Constant {
     public final int getStringIndex() {
         return string_index;
     }
-
-
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(string_index = " + string_index + ")";
-    }
 }

==================================================
ConstantValue.java
index c3e7353704..187bcb7757 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantUtf8.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantUtf8.java
@@ -54,13 +54,4 @@ public final class ConstantUtf8 extends Constant {
     public final String getBytes() {
         return bytes;
     }
-
-
-    /**
-     * @return String representation
-     */
-    @Override
-    public final String toString() {
-        return super.toString() + "(\"" + Utility.replace(bytes, "\n", "\\n") + "\")";
-    }
 }

==================================================
Deprecated.java
index 95a9b6c587..ccdb955be2 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantValue.java
@@ -63,40 +63,6 @@ public final class ConstantValue extends Attribute {
     }
 
 
-    /**
-     * @return String representation of constant value.
-     */
-    @Override
-    public final String toString() {
-        Constant c = constant_pool.getConstant(constantvalue_index);
-        String buf;
-        int i;
-        // Print constant to string depending on its type
-        switch (c.getTag()) {
-            case Constants.CONSTANT_Long:
-                buf = String.valueOf(((ConstantLong) c).getBytes());
-                break;
-            case Constants.CONSTANT_Float:
-                buf = String.valueOf(((ConstantFloat) c).getBytes());
-                break;
-            case Constants.CONSTANT_Double:
-                buf = String.valueOf(((ConstantDouble) c).getBytes());
-                break;
-            case Constants.CONSTANT_Integer:
-                buf = String.valueOf(((ConstantInteger) c).getBytes());
-                break;
-            case Constants.CONSTANT_String:
-                i = ((ConstantString) c).getStringIndex();
-                c = constant_pool.getConstant(i, Constants.CONSTANT_Utf8);
-                buf = "\"" + Utility.convertString(((ConstantUtf8) c).getBytes()) + "\"";
-                break;
-            default:
-                throw new IllegalStateException("Type of ConstValue invalid: " + c);
-        }
-        return buf;
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
ElementValue.java
index 135bf3089f..c0955fefb5 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Deprecated.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Deprecated.java
@@ -68,15 +68,6 @@ public final class Deprecated extends Attribute {
     }
 
 
-    /**
-     * @return attribute name
-     */
-    @Override
-    public final String toString() {
-        return Constants.ATTRIBUTE_NAMES[Constants.ATTR_DEPRECATED];
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
EnumElementValue.java
index 3934fdcd7e..35e39b9301 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ElementValue.java
@@ -32,21 +32,12 @@ public abstract class ElementValue
 
     protected ConstantPool cpool;
 
-    @Override
-    public String toString()
-    {
-        return stringifyValue();
-    }
-
     protected ElementValue(int type, ConstantPool cpool)
     {
         this.type = type;
         this.cpool = cpool;
     }
 
-
-    public abstract String stringifyValue();
-
     public abstract void dump(DataOutputStream dos) throws IOException;
 
     public static final int STRING = 's';

==================================================
ExceptionTable.java
index d91561c4f9..72fe1b7293 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/EnumElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/EnumElementValue.java
@@ -20,8 +20,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataOutputStream;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 public class EnumElementValue extends ElementValue
 {
     // For enum types, these two indices point to the type and value
@@ -47,12 +45,4 @@ public class EnumElementValue extends ElementValue
         dos.writeShort(typeIdx); // u2
         dos.writeShort(valueIdx); // u2
     }
-
-    @Override
-    public String stringifyValue()
-    {
-        ConstantUtf8 cu8 = (ConstantUtf8) cpool.getConstant(valueIdx,
-                Constants.CONSTANT_Utf8);
-        return cu8.getBytes();
-    }
 }

==================================================
Field.java
index 952d747368..c9daab15dd 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ExceptionTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ExceptionTable.java
@@ -83,25 +83,6 @@ public final class ExceptionTable extends Attribute {
     }
 
 
-    /**
-     * @return String representation, i.e., a list of thrown exceptions.
-     */
-    @Override
-    public final String toString() {
-        StringBuilder buf = new StringBuilder();
-        String str;
-        for (int i = 0; i < number_of_exceptions; i++) {
-            str = constant_pool.getConstantString(exception_index_table[i],
-                    Constants.CONSTANT_Class);
-            buf.append(Utility.compactClassName(str, false));
-            if (i < number_of_exceptions - 1) {
-                buf.append(", ");
-            }
-        }
-        return buf.toString();
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
InnerClass.java
index f44ba059b1..4a9b581a5f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Field.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Field.java
@@ -75,36 +75,6 @@ public final class Field extends FieldOrMethod {
     }
 
 
-    /**
-     * Return string representation close to declaration format,
-     * `public static final short MAX = 100', e.g..
-     *
-     * @return String representation of field, including the signature.
-     */
-    @Override
-    public final String toString() {
-        String name, signature, access; // Short cuts to constant pool
-        // Get names from constant pool
-        access = Utility.accessToString(access_flags);
-        access = access.equals("") ? "" : (access + " ");
-        signature = Utility.signatureToString(getSignature());
-        name = getName();
-        StringBuilder buf = new StringBuilder(64);
-        buf.append(access).append(signature).append(" ").append(name);
-        ConstantValue cv = getConstantValue();
-        if (cv != null) {
-            buf.append(" = ").append(cv);
-        }
-        for (int i = 0; i < attributes_count; i++) {
-            Attribute a = attributes[i];
-            if (!(a instanceof ConstantValue)) {
-                buf.append(" [").append(a.toString()).append("]");
-            }
-        }
-        return buf.toString();
-    }
-
-
     /**
      * Return value as defined by given BCELComparator strategy.
      * By default two Field objects are said to be equal when

==================================================
InnerClasses.java
index 5d0d6c1f6e..da5915b256 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/InnerClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/InnerClass.java
@@ -22,8 +22,6 @@ import java.io.DataOutputStream;
 import java.io.IOException;
 import java.io.Serializable;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 /**
  * This class represents a inner class attribute, i.e., the class
  * indices of the inner and outer classes, the name and the attributes
@@ -82,44 +80,6 @@ public final class InnerClass implements Cloneable, Serializable {
     }
 
 
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        return "InnerClass(" + inner_class_index + ", " + outer_class_index + ", "
-                + inner_name_index + ", " + inner_access_flags + ")";
-    }
-
-
-    /**
-     * @return Resolved string representation
-     */
-    public final String toString( ConstantPool constant_pool ) {
-        String inner_class_name, outer_class_name, inner_name, access;
-        inner_class_name = constant_pool.getConstantString(inner_class_index,
-                Constants.CONSTANT_Class);
-        inner_class_name = Utility.compactClassName(inner_class_name);
-        if (outer_class_index != 0) {
-            outer_class_name = constant_pool.getConstantString(outer_class_index,
-                    Constants.CONSTANT_Class);
-            outer_class_name = Utility.compactClassName(outer_class_name);
-        } else {
-            outer_class_name = "<not a member>";
-        }
-        if (inner_name_index != 0) {
-            inner_name = ((ConstantUtf8) constant_pool.getConstant(inner_name_index,
-                    Constants.CONSTANT_Utf8)).getBytes();
-        } else {
-            inner_name = "<anonymous>";
-        }
-        access = Utility.accessToString(inner_access_flags, true);
-        access = access.equals("") ? "" : (access + " ");
-        return "InnerClass:" + access + inner_class_name + "(\"" + outer_class_name + "\", \""
-                + inner_name + "\")";
-    }
-
-
     /**
      * @return deep copy of this object
      */

==================================================
JavaClass.java
index 6bc97fc5a7..61e86b1768 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/InnerClasses.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/InnerClasses.java
@@ -81,19 +81,6 @@ public final class InnerClasses extends Attribute {
     }
 
 
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        StringBuilder buf = new StringBuilder();
-        for (int i = 0; i < number_of_classes; i++) {
-            buf.append(inner_classes[i].toString(constant_pool)).append("\n");
-        }
-        return buf.toString();
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
LineNumber.java
index 10288afe88..f1356d59c5 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
@@ -19,7 +19,6 @@ package org.apache.tomcat.util.bcel.classfile;
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.StringTokenizer;
 
 import org.apache.tomcat.util.bcel.Constants;
 import org.apache.tomcat.util.bcel.util.BCELComparator;
@@ -199,72 +198,6 @@ public class JavaClass extends AccessFlags
     }
 
 
-    /**
-     * @return String representing class contents.
-     */
-    @Override
-    public String toString() {
-        String access = Utility.accessToString(access_flags, true);
-        access = access.equals("") ? "" : (access + " ");
-        StringBuilder buf = new StringBuilder(128);
-        buf.append(access).append(Utility.classOrInterface(access_flags)).append(" ").append(
-                class_name).append(" extends ").append(
-                Utility.compactClassName(superclass_name, false)).append('\n');
-        int size = interfaces.length;
-        if (size > 0) {
-            buf.append("implements\t\t");
-            for (int i = 0; i < size; i++) {
-                buf.append(interface_names[i]);
-                if (i < size - 1) {
-                    buf.append(", ");
-                }
-            }
-            buf.append('\n');
-        }
-        buf.append("filename\t\t").append(file_name).append('\n');
-        buf.append("compiled from\t\t").append(source_file_name).append('\n');
-        buf.append("compiler version\t").append(major).append(".").append(minor).append('\n');
-        buf.append("access flags\t\t").append(access_flags).append('\n');
-        buf.append("constant pool\t\t").append(constant_pool.getLength()).append(" entries\n");
-        buf.append("ACC_SUPER flag\t\t").append(isSuper()).append("\n");
-        if (attributes.length > 0) {
-            buf.append("\nAttribute(s):\n");
-            for (int i = 0; i < attributes.length; i++) {
-                buf.append(indent(attributes[i]));
-            }
-        }
-        AnnotationEntry[] annotations = getAnnotationEntries();
-        if (annotations!=null && annotations.length>0) {
-            buf.append("\nAnnotation(s):\n");
-            for (int i=0; i<annotations.length; i++)
-                buf.append(indent(annotations[i]));
-        }
-        if (fields.length > 0) {
-            buf.append("\n").append(fields.length).append(" fields:\n");
-            for (int i = 0; i < fields.length; i++) {
-                buf.append("\t").append(fields[i]).append('\n');
-            }
-        }
-        if (methods.length > 0) {
-            buf.append("\n").append(methods.length).append(" methods:\n");
-            for (int i = 0; i < methods.length; i++) {
-                buf.append("\t").append(methods[i]).append('\n');
-            }
-        }
-        return buf.toString();
-    }
-
-
-    private static final String indent( Object obj ) {
-        StringTokenizer tok = new StringTokenizer(obj.toString(), "\n");
-        StringBuilder buf = new StringBuilder();
-        while (tok.hasMoreTokens()) {
-            buf.append("\t").append(tok.nextToken()).append("\n");
-        }
-        return buf.toString();
-    }
-
-
     public final boolean isSuper() {
         return (access_flags & Constants.ACC_SUPER) != 0;
     }

==================================================
LineNumberTable.java
index be24182418..19c5992cd7 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LineNumber.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LineNumber.java
@@ -70,15 +70,6 @@ public final class LineNumber implements Cloneable, Serializable {
     }
 
 
-    /**
-     * @return String representation
-     */
-    @Override
-    public final String toString() {
-        return "LineNumber(" + start_pc + ", " + line_number + ")";
-    }
-
-
     /**
      * @return deep copy of this object
      */

==================================================
LocalVariable.java
index 7b43a089cd..a70ca7ac8f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LineNumberTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LineNumberTable.java
@@ -80,30 +80,6 @@ public final class LineNumberTable extends Attribute {
     }
 
 
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        StringBuilder buf = new StringBuilder();
-        StringBuilder line = new StringBuilder();
-        String newLine = System.getProperty("line.separator", "\n");
-        for (int i = 0; i < line_number_table_length; i++) {
-            line.append(line_number_table[i].toString());
-            if (i < line_number_table_length - 1) {
-                line.append(", ");
-            }
-            if (line.length() > 72) {
-                line.append(newLine);
-                buf.append(line.toString());
-                line.setLength(0);
-            }
-        }
-        buf.append(line);
-        return buf.toString();
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
LocalVariableTable.java
index 6f47280495..cd556de6e2 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariable.java
@@ -118,17 +118,6 @@ public final class LocalVariable implements Constants, Cloneable, Serializable {
     }
 
 
-    /**
-     * @return string representation.
-     */
-    @Override
-    public final String toString() {
-        String name = getName(), signature = Utility.signatureToString(getSignature());
-        return "LocalVariable(start_pc = " + start_pc + ", length = " + length + ", index = "
-                + index + ":" + signature + " " + name + ")";
-    }
-
-
     /**
      * @return deep copy of this object
      */

==================================================
LocalVariableTypeTable.java
index 9984827b53..723fe835f0 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTable.java
@@ -97,22 +97,6 @@ public class LocalVariableTable extends Attribute {
     }
 
 
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        StringBuilder buf = new StringBuilder();
-        for (int i = 0; i < local_variable_table_length; i++) {
-            buf.append(local_variable_table[i].toString());
-            if (i < local_variable_table_length - 1) {
-                buf.append('\n');
-            }
-        }
-        return buf.toString();
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
Method.java
index 6ec6526af7..e8f9d3e700 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTypeTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTypeTable.java
@@ -78,22 +78,6 @@ private int             local_variable_type_table_length; // Table of local
       local_variable_table.length;
   }
 
-  /**
-   * @return String representation.
-   */
-  @Override
-  public final String toString() {
-      StringBuilder buf = new StringBuilder();
-
-    for(int i=0; i < local_variable_type_table_length; i++) {
-      buf.append(local_variable_type_table[i].toString());
-
-      if(i < local_variable_type_table_length - 1) buf.append('\n');
-    }
-
-    return buf.toString();
-  }
-
   /**
    * @return deep copy of this attribute
    */

==================================================
PMGClass.java
index e8d5f28430..3170f24c3c 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Method.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Method.java
@@ -20,7 +20,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataInputStream;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
 import org.apache.tomcat.util.bcel.util.BCELComparator;
 
 /**
@@ -112,43 +111,6 @@ public final class Method extends FieldOrMethod {
     }
 
 
-    /**
-     * Return string representation close to declaration format,
-     * `public static void main(String[] args) throws IOException', e.g.
-     *
-     * @return String representation of the method.
-     */
-    @Override
-    public final String toString() {
-        ConstantUtf8 c;
-        String name, signature, access; // Short cuts to constant pool
-        StringBuilder buf;
-        access = Utility.accessToString(access_flags);
-        // Get name and signature from constant pool
-        c = (ConstantUtf8) constant_pool.getConstant(signature_index, Constants.CONSTANT_Utf8);
-        signature = c.getBytes();
-        c = (ConstantUtf8) constant_pool.getConstant(name_index, Constants.CONSTANT_Utf8);
-        name = c.getBytes();
-        signature = Utility.methodSignatureToString(signature, name, access, true,
-                getLocalVariableTable());
-        buf = new StringBuilder(signature);
-        for (int i = 0; i < attributes_count; i++) {
-            Attribute a = attributes[i];
-            if (!((a instanceof Code) || (a instanceof ExceptionTable))) {
-                buf.append(" [").append(a.toString()).append("]");
-            }
-        }
-        ExceptionTable e = getExceptionTable();
-        if (e != null) {
-            String str = e.toString();
-            if (!str.equals("")) {
-                buf.append("\n\t\tthrows ").append(str);
-            }
-        }
-        return buf.toString();
-    }
-
-
     /**
      * Return value as defined by given BCELComparator strategy.
      * By default two method objects are said to be equal when

==================================================
Signature.java
index 0ce4de22ca..f524c57a90 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/PMGClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/PMGClass.java
@@ -85,15 +85,6 @@ public final class PMGClass extends Attribute {
     }
 
 
-    /**
-     * @return String representation
-     */
-    @Override
-    public final String toString() {
-        return "PMGClass(" + getPMGName() + ", " + getPMGClassName() + ")";
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
SimpleElementValue.java
index 134b85ff96..191a9c83ee 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Signature.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Signature.java
@@ -71,16 +71,6 @@ public final class Signature extends Attribute {
         return c.getBytes();
     }
 
-    /**
-     * @return String representation
-     */
-    @Override
-    public final String toString() {
-        String s = getSignature();
-        return "Signature(" + s + ")";
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
SourceFile.java
index 7ba328bcb3..9d39fb592f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/SimpleElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/SimpleElementValue.java
@@ -20,8 +20,6 @@ package org.apache.tomcat.util.bcel.classfile;
 import java.io.DataOutputStream;
 import java.io.IOException;
 
-import org.apache.tomcat.util.bcel.Constants;
-
 public class SimpleElementValue extends ElementValue
 {
     private int index;
@@ -41,64 +39,6 @@ public class SimpleElementValue extends ElementValue
     }
 
 
-    @Override
-    public String toString()
-    {
-        return stringifyValue();
-    }
-
-    // Whatever kind of value it is, return it as a string
-    @Override
-    public String stringifyValue()
-    {
-        switch (type)
-        {
-        case PRIMITIVE_INT:
-            ConstantInteger c = (ConstantInteger) cpool.getConstant(getIndex(),
-                    Constants.CONSTANT_Integer);
-            return Integer.toString(c.getBytes());
-        case PRIMITIVE_LONG:
-            ConstantLong j = (ConstantLong) cpool.getConstant(getIndex(),
-                    Constants.CONSTANT_Long);
-            return Long.toString(j.getBytes());
-        case PRIMITIVE_DOUBLE:
-            ConstantDouble d = (ConstantDouble) cpool.getConstant(getIndex(),
-                    Constants.CONSTANT_Double);
-            return Double.toString(d.getBytes());
-        case PRIMITIVE_FLOAT:
-            ConstantFloat f = (ConstantFloat) cpool.getConstant(getIndex(),
-                    Constants.CONSTANT_Float);
-            return Float.toString(f.getBytes());
-        case PRIMITIVE_SHORT:
-            ConstantInteger s = (ConstantInteger) cpool.getConstant(getIndex(),
-                    Constants.CONSTANT_Integer);
-            return Integer.toString(s.getBytes());
-        case PRIMITIVE_BYTE:
-            ConstantInteger b = (ConstantInteger) cpool.getConstant(getIndex(),
-                    Constants.CONSTANT_Integer);
-            return Integer.toString(b.getBytes());
-        case PRIMITIVE_CHAR:
-            ConstantInteger ch = (ConstantInteger) cpool.getConstant(
-                    getIndex(), Constants.CONSTANT_Integer);
-            return String.valueOf((char)ch.getBytes());
-        case PRIMITIVE_BOOLEAN:
-            ConstantInteger bo = (ConstantInteger) cpool.getConstant(
-                    getIndex(), Constants.CONSTANT_Integer);
-            if (bo.getBytes() == 0) {
-                return "false";
-            }
-            return "true";
-        case STRING:
-            ConstantUtf8 cu8 = (ConstantUtf8) cpool.getConstant(getIndex(),
-                    Constants.CONSTANT_Utf8);
-            return cu8.getBytes();
-        default:
-            throw new RuntimeException(
-                    "SimpleElementValue class does not know how to stringify type "
-                            + type);
-        }
-    }
-
     @Override
     public void dump(DataOutputStream dos) throws IOException
     {

==================================================
StackMap.java
index 07e3bd06bd..b881814c96 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/SourceFile.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/SourceFile.java
@@ -81,15 +81,6 @@ public final class SourceFile extends Attribute {
     }
 
 
-    /**
-     * @return String representation
-     */
-    @Override
-    public final String toString() {
-        return "SourceFile(" + getSourceFileName() + ")";
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
StackMapEntry.java
index 2ad1753647..4c8a330251 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMap.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMap.java
@@ -84,23 +84,6 @@ public final class StackMap extends Attribute {
     }
 
 
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        StringBuilder buf = new StringBuilder("StackMap(");
-        for (int i = 0; i < map_length; i++) {
-            buf.append(map[i].toString());
-            if (i < map_length - 1) {
-                buf.append(", ");
-            }
-        }
-        buf.append(')');
-        return buf.toString();
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
StackMapTable.java
index 2608470de3..cb266459b7 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapEntry.java
@@ -92,38 +92,6 @@ public final class StackMapEntry implements Cloneable, Serializable {
     }
 
 
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        StringBuilder buf = new StringBuilder(64);
-        buf.append("(offset=").append(byte_code_offset);
-        if (number_of_locals > 0) {
-            buf.append(", locals={");
-            for (int i = 0; i < number_of_locals; i++) {
-                buf.append(types_of_locals[i]);
-                if (i < number_of_locals - 1) {
-                    buf.append(", ");
-                }
-            }
-            buf.append("}");
-        }
-        if (number_of_stack_items > 0) {
-            buf.append(", stack items={");
-            for (int i = 0; i < number_of_stack_items; i++) {
-                buf.append(types_of_stack_items[i]);
-                if (i < number_of_stack_items - 1) {
-                    buf.append(", ");
-                }
-            }
-            buf.append("}");
-        }
-        buf.append(")");
-        return buf.toString();
-    }
-
-
     /**
      * @return deep copy of this object
      */

==================================================
StackMapTableEntry.java
index 3b01d5b9a9..bfd62ef50b 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapTable.java
@@ -84,23 +84,6 @@ public final class StackMapTable extends Attribute {
     }
 
 
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        StringBuilder buf = new StringBuilder("StackMapTable(");
-        for (int i = 0; i < map_length; i++) {
-            buf.append(map[i].toString());
-            if (i < map_length - 1) {
-                buf.append(", ");
-            }
-        }
-        buf.append(')');
-        return buf.toString();
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
StackMapType.java
index 2b65811ec1..986dabfd8d 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapTableEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapTableEntry.java
@@ -149,56 +149,6 @@ public final class StackMapTableEntry implements Cloneable, Serializable {
     }
 
 
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        StringBuilder buf = new StringBuilder(64);
-        buf.append("(");
-        if (frame_type >= Constants.SAME_FRAME && frame_type <= Constants.SAME_FRAME_MAX) {
-            buf.append("SAME");
-        } else if (frame_type >= Constants.SAME_LOCALS_1_STACK_ITEM_FRAME && frame_type <= Constants.SAME_LOCALS_1_STACK_ITEM_FRAME_MAX) {
-            buf.append("SAME_LOCALS_1_STACK");
-        } else if (frame_type == Constants.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {
-            buf.append("SAME_LOCALS_1_STACK_EXTENDED");
-        } else if (frame_type >= Constants.CHOP_FRAME && frame_type <= Constants.CHOP_FRAME_MAX) {
-            buf.append("CHOP "+(251-frame_type));
-        } else if (frame_type == Constants.SAME_FRAME_EXTENDED) {
-            buf.append("SAME_EXTENDED");
-        } else if (frame_type >= Constants.APPEND_FRAME && frame_type <= Constants.APPEND_FRAME_MAX) {
-            buf.append("APPEND "+(frame_type-251));
-        } else if (frame_type == Constants.FULL_FRAME) {
-            buf.append("FULL");
-        } else {
-            buf.append("UNKNOWN");
-        }
-        buf.append(", offset delta=").append(byte_code_offset_delta);
-        if (number_of_locals > 0) {
-            buf.append(", locals={");
-            for (int i = 0; i < number_of_locals; i++) {
-                buf.append(types_of_locals[i]);
-                if (i < number_of_locals - 1) {
-                    buf.append(", ");
-                }
-            }
-            buf.append("}");
-        }
-        if (number_of_stack_items > 0) {
-            buf.append(", stack items={");
-            for (int i = 0; i < number_of_stack_items; i++) {
-                buf.append(types_of_stack_items[i]);
-                if (i < number_of_stack_items - 1) {
-                    buf.append(", ");
-                }
-            }
-            buf.append("}");
-        }
-        buf.append(")");
-        return buf.toString();
-    }
-
-
     /**
      * @return deep copy of this object
      */

==================================================
Synthetic.java
index 93d90094d7..02b18784fb 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapType.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapType.java
@@ -124,15 +124,6 @@ public final class StackMapType implements Cloneable, Serializable {
     }
 
 
-    /**
-     * @return String representation
-     */
-    @Override
-    public final String toString() {
-        return "(type=" + Constants.ITEM_NAMES[type] + printIndex() + ")";
-    }
-
-
     /**
      * @param constant_pool Constant pool to be used for this object.
      */

==================================================
Unknown.java
index 92f5a17455..3037ada14a 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Synthetic.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Synthetic.java
@@ -74,19 +74,6 @@ public final class Synthetic extends Attribute {
     }
 
 
-    /**
-     * @return String representation.
-     */
-    @Override
-    public final String toString() {
-        StringBuilder buf = new StringBuilder("Synthetic");
-        if (length > 0) {
-            buf.append(" ").append(Utility.toHexString(bytes));
-        }
-        return buf.toString();
-    }
-
-
     /**
      * @return deep copy of this attribute
      */

==================================================
