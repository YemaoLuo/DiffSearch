5a868a8f0a29bdc42deaf61af0e30f340352f9de
==================================================
SpotBugs: Make fields static
==================================================
Mark Thomas
==================================================
Tue Jun 5 19:04:01 2018 +0000
==================================================
AsyncFileHandler.java
SpotBugs: Make fields static

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1832963 13f79535-47bb-0310-9956-ffa450edef68



==================================================
FileHandler.java
index 395e6c3d8e..20a9e16d4f 100644
--- a/java/org/apache/juli/AsyncFileHandler.java
+++ b/java/org/apache/juli/AsyncFileHandler.java
@@ -147,7 +147,6 @@ public class AsyncFileHandler extends FileHandler {
     }
 
     protected static class LoggerThread extends Thread {
-        protected final boolean run = true;
         public LoggerThread() {
             this.setDaemon(true);
             this.setName("AsyncFileHandlerWriter-" + System.identityHashCode(this));
@@ -155,7 +154,7 @@ public class AsyncFileHandler extends FileHandler {
 
         @Override
         public void run() {
-            while (run) {
+            while (true) {
                 try {
                     LogEntry entry = queue.poll(LOGGER_SLEEP_TIME, TimeUnit.MILLISECONDS);
                     if (entry != null) {

==================================================
TestBasicAuthParser.java
index 91087356f5..709513234f 100644
--- a/java/org/apache/juli/FileHandler.java
+++ b/java/org/apache/juli/FileHandler.java
@@ -99,10 +99,10 @@ public class FileHandler extends Handler {
 
     private static final ExecutorService DELETE_FILES_SERVICE =
             Executors.newSingleThreadExecutor(new ThreadFactory() {
+                private static final String NAME_PREFIX = "FileHandlerLogFilesCleaner-";
                 private final boolean isSecurityEnabled;
                 private final ThreadGroup group;
                 private final AtomicInteger threadNumber = new AtomicInteger(1);
-                private final String namePrefix = "FileHandlerLogFilesCleaner-";
 
                 {
                     SecurityManager s = System.getSecurityManager();
@@ -131,7 +131,7 @@ public class FileHandler extends Handler {
                                     .setContextClassLoader(getClass().getClassLoader());
                         }
                         Thread t = new Thread(group, r,
-                                namePrefix + threadNumber.getAndIncrement());
+                                NAME_PREFIX + threadNumber.getAndIncrement());
                         t.setDaemon(true);
                         return t;
                     } finally {

==================================================
TestResponsePerformance.java
index be6d2b0f19..93a2b53802 100644
--- a/test/org/apache/catalina/authenticator/TestBasicAuthParser.java
+++ b/test/org/apache/catalina/authenticator/TestBasicAuthParser.java
@@ -465,9 +465,8 @@ public class TestBasicAuthParser {
      */
     private static final class BasicAuthHeader {
 
-        private  final String HTTP_AUTH = "authorization: ";
-        private  final byte[] HEADER =
-                HTTP_AUTH.getBytes(StandardCharsets.ISO_8859_1);
+        private static final byte[] HEADER =
+                "authorization: ".getBytes(StandardCharsets.ISO_8859_1);
         private ByteChunk authHeader;
         private int initialOffset = 0;
 

==================================================
TestStandardContext.java
index 131d3aae08..eb1236e80b 100644
--- a/test/org/apache/catalina/connector/TestResponsePerformance.java
+++ b/test/org/apache/catalina/connector/TestResponsePerformance.java
@@ -26,7 +26,7 @@ import org.apache.tomcat.unittest.TesterRequest;
 
 public class TestResponsePerformance extends LoggingBaseTest {
 
-    private final int ITERATIONS = 100000;
+    private static final int ITERATIONS = 100000;
 
     @Test
     public void testToAbsolutePerformance() throws Exception {

==================================================
TestNonBlockingAPI.java
index 60f98519ad..b4a386f948 100644
--- a/test/org/apache/catalina/core/TestStandardContext.java
+++ b/test/org/apache/catalina/core/TestStandardContext.java
@@ -265,7 +265,7 @@ public class TestStandardContext extends TomcatBaseTest {
     }
 
     private static class FailingLifecycleListener implements LifecycleListener {
-        private final String failEvent = Lifecycle.CONFIGURE_START_EVENT;
+        private static final String failEvent = Lifecycle.CONFIGURE_START_EVENT;
         private boolean fail = true;
         protected void setFail(boolean fail) {
             this.fail = fail;

==================================================
TestPersistentManagerIntegration.java
index 1bf7fe3cec..7130b116bb 100644
--- a/test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java
+++ b/test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java
@@ -408,7 +408,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
 
 
     public static class DataWriter implements BytesStreamer {
-        final int max = 5;
+        private static final int MAX = 5;
         int count = 0;
         long delay = 0;
         byte[] b = "WANTMORE".getBytes(StandardCharsets.ISO_8859_1);
@@ -420,12 +420,12 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
 
         @Override
         public int getLength() {
-            return b.length * max;
+            return b.length * MAX;
         }
 
         @Override
         public int available() {
-            if (count < max) {
+            if (count < MAX) {
                 return b.length;
             } else {
                 return 0;
@@ -434,7 +434,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
 
         @Override
         public byte[] next() {
-            if (count < max) {
+            if (count < MAX) {
                 if (count > 0)
                     try {
                         if (delay > 0)
@@ -442,7 +442,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
                     } catch (Exception x) {
                     }
                 count++;
-                if (count < max)
+                if (count < MAX)
                     return b;
                 else
                     return f;

==================================================
