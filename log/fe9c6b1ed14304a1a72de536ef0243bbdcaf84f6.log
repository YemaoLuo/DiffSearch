fe9c6b1ed14304a1a72de536ef0243bbdcaf84f6
==================================================
Restore ability for HTTP PUT to overwrite an existing resource
==================================================
Mark Emlyn
==================================================
Thu Nov 1 18:54:14 2012 +0000
==================================================
WebResourceRoot.java
Restore ability for HTTP PUT to overwrite an existing resource

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1404724 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WebResourceSet.java
index 88ad4bb52f..75693b2ddf 100644
--- a/java/org/apache/catalina/WebResourceRoot.java
+++ b/java/org/apache/catalina/WebResourceRoot.java
@@ -161,14 +161,18 @@ public interface WebResourceRoot extends Lifecycle {
      * Create a new resource at the requested path using the provided
      * InputStream.
      *
-     * @param path  The path to be used for the new Resource. It is relative to
-     *              the root of the web application and must start with '/'.
-     * @param is    The InputStream that will provide the content for the new
-     *              Resource.
+     * @param path      The path to be used for the new Resource. It is relative
+     *                  to the root of the web application and must start with
+     *                  '/'.
+     * @param is        The InputStream that will provide the content for the
+     *                  new Resource.
+     * @param overwrite If <code>true</code> and the resource already exists it
+     *                  will be overwritten. If <code>false</code> and the
+     *                  resource already exists the write will fail.
      *
      * @return  <code>true</code> if and only if the new Resource is written
      */
-    boolean write(String path, InputStream is);
+    boolean write(String path, InputStream is, boolean overwrite);
 
     /**
      * Creates a new {@link WebResourceSet} for this {@link WebResourceRoot}

==================================================
DefaultServlet.java
index 1246ae92f8..6d64e62a16 100644
--- a/java/org/apache/catalina/WebResourceSet.java
+++ b/java/org/apache/catalina/WebResourceSet.java
@@ -76,14 +76,18 @@ public interface WebResourceSet extends Lifecycle {
      * InputStream. If a resource already exists at the provided path it will
      * not be overwritten.
      *
-     * @param path  The path to be used for the new Resource. It is relative to
-     *              the root of the web application and must start with '/'.
-     * @param is    The InputStream that will provide the content for the new
-     *              Resource.
+     * @param path      The path to be used for the new Resource. It is relative
+     *                  to the root of the web application and must start with
+     *                  '/'.
+     * @param is        The InputStream that will provide the content for the
+     *                  new Resource.
+     * @param overwrite If <code>true</code> and the resource already exists it
+     *                  will be overwritten. If <code>false</code> and the
+     *                  resource already exists the write will fail.
      *
      * @return  <code>true</code> if and only if the new Resource is written
      */
-    boolean write(String path, InputStream is);
+    boolean write(String path, InputStream is, boolean overwrite);
 
     void setRoot(WebResourceRoot root);
 }

==================================================
WebdavServlet.java
index 0fe99dff96..0c68cc8bfa 100644
--- a/java/org/apache/catalina/servlets/DefaultServlet.java
+++ b/java/org/apache/catalina/servlets/DefaultServlet.java
@@ -511,7 +511,7 @@ public class DefaultServlet
                 resourceInputStream = req.getInputStream();
             }
 
-            if (resources.write(path, resourceInputStream)) {
+            if (resources.write(path, resourceInputStream, true)) {
                 if (resource.exists()) {
                     resp.setStatus(HttpServletResponse.SC_NO_CONTENT);
                 } else {

==================================================
DirResourceSet.java
index 15888b2b31..19ad216408 100644
--- a/java/org/apache/catalina/servlets/WebdavServlet.java
+++ b/java/org/apache/catalina/servlets/WebdavServlet.java
@@ -1672,7 +1672,8 @@ public class WebdavServlet
                 copyResource(errorList, childSrc, childDest);
             }
         } else if (sourceResource.isFile()) {
-            if (!resources.write(dest, sourceResource.getInputStream())) {
+            if (!resources.write(dest, sourceResource.getInputStream(),
+                    false)) {
                 errorList.put(source,
                         new Integer(WebdavStatus.SC_INTERNAL_SERVER_ERROR));
                 return false;

==================================================
FileResourceSet.java
index 4bdaf075e0..e790fef8fe 100644
--- a/java/org/apache/catalina/webresources/DirResourceSet.java
+++ b/java/org/apache/catalina/webresources/DirResourceSet.java
@@ -169,7 +169,7 @@ public class DirResourceSet extends AbstractFileResourceSet {
     }
 
     @Override
-    public boolean write(String path, InputStream is) {
+    public boolean write(String path, InputStream is, boolean overwrite) {
         checkPath(path);
 
         if (is == null) {
@@ -189,7 +189,13 @@ public class DirResourceSet extends AbstractFileResourceSet {
         }
 
         if (dest.exists()) {
-            return false;
+            if (overwrite) {
+                if (!dest.delete()) {
+                    return false;
+                }
+            } else {
+                return false;
+            }
         }
 
         try (FileOutputStream fos = new FileOutputStream(dest)) {

==================================================
JarResourceSet.java
index da6096365e..6156801161 100644
--- a/java/org/apache/catalina/webresources/FileResourceSet.java
+++ b/java/org/apache/catalina/webresources/FileResourceSet.java
@@ -137,7 +137,7 @@ public class FileResourceSet extends AbstractFileResourceSet {
     }
 
     @Override
-    public boolean write(String path, InputStream is) {
+    public boolean write(String path, InputStream is, boolean overwrite) {
         checkPath(path);
         return false;
     }

==================================================
StandardRoot.java
index cf19094a4b..07a6215d2d 100644
--- a/java/org/apache/catalina/webresources/JarResourceSet.java
+++ b/java/org/apache/catalina/webresources/JarResourceSet.java
@@ -217,7 +217,7 @@ public class JarResourceSet extends AbstractResourceSet {
     }
 
     @Override
-    public boolean write(String path, InputStream is) {
+    public boolean write(String path, InputStream is, boolean overwrite) {
         checkPath(path);
 
         if (is == null) {

==================================================
AbstractTestResourceSet.java
index 8c56d1b649..36276657e6 100644
--- a/java/org/apache/catalina/webresources/StandardRoot.java
+++ b/java/org/apache/catalina/webresources/StandardRoot.java
@@ -137,14 +137,14 @@ public class StandardRoot extends LifecycleMBeanBase
     }
 
     @Override
-    public boolean write(String path, InputStream is) {
+    public boolean write(String path, InputStream is, boolean overwrite) {
         checkState();
 
-        if (preResourceExists(path)) {
+        if (!overwrite && preResourceExists(path)) {
             return false;
         }
 
-        return main.write(path, is);
+        return main.write(path, is, overwrite);
     }
 
     private boolean preResourceExists(String path) {

==================================================
AbstractTestResourceSetMount.java
index 415b1457ce..0cf2ea3e7b 100644
--- a/test/org/apache/catalina/webresources/AbstractTestResourceSet.java
+++ b/test/org/apache/catalina/webresources/AbstractTestResourceSet.java
@@ -256,48 +256,51 @@ public abstract class AbstractTestResourceSet {
     @Test(expected = IllegalArgumentException.class)
     public final void testWriteEmpty() {
         InputStream is = new ByteArrayInputStream("test".getBytes());
-        resourceRoot.write("", is);
+        resourceRoot.write("", is, false);
     }
 
     @Test
     public final void testWriteRoot() {
         InputStream is = new ByteArrayInputStream("test".getBytes());
-        Assert.assertFalse(resourceRoot.write(getMount() + "/", is));
+        Assert.assertFalse(resourceRoot.write(getMount() + "/", is, false));
     }
 
     @Test
     public final void testWriteDirA() {
         InputStream is = new ByteArrayInputStream("test".getBytes());
-        Assert.assertFalse(resourceRoot.write(getMount() + "/d1", is));
+        Assert.assertFalse(resourceRoot.write(getMount() + "/d1", is, false));
     }
 
     @Test
     public final void testWriteDirB() {
         InputStream is = new ByteArrayInputStream("test".getBytes());
-        Assert.assertFalse(resourceRoot.write(getMount() + "/d1/", is));
+        Assert.assertFalse(resourceRoot.write(getMount() + "/d1/", is, false));
     }
 
     @Test
     public final void testWriteFile() {
         InputStream is = new ByteArrayInputStream("test".getBytes());
-        Assert.assertFalse(resourceRoot.write(getMount() + "/d1/d1-f1.txt", is));
+        Assert.assertFalse(resourceRoot.write(
+                getMount() + "/d1/d1-f1.txt", is, false));
     }
 
     @Test(expected = NullPointerException.class)
     public final void testWriteNew() {
-        resourceRoot.write(getMount() + "/new-test", null);
+        resourceRoot.write(getMount() + "/new-test", null, false);
     }
 
     @Test
     public final void testWrite() {
         InputStream is = new ByteArrayInputStream("test".getBytes());
         if (isWriteable()) {
-            Assert.assertTrue(resourceRoot.write(getMount() + "/new-test", is));
+            Assert.assertTrue(resourceRoot.write(
+                    getMount() + "/new-test", is, false));
             File file = new File(getBaseDir(), "new-test");
             Assert.assertTrue(file.exists());
             Assert.assertTrue(file.delete());
         } else {
-            Assert.assertFalse(resourceRoot.write(getMount() + "/new-test", is));
+            Assert.assertFalse(resourceRoot.write(
+                    getMount() + "/new-test", is, false));
         }
     }
 }

==================================================
TesterWebResourceRoot.java
index daa8968cc3..d4737adb7c 100644
--- a/test/org/apache/catalina/webresources/AbstractTestResourceSetMount.java
+++ b/test/org/apache/catalina/webresources/AbstractTestResourceSetMount.java
@@ -62,6 +62,6 @@ public abstract class AbstractTestResourceSetMount
     @Test
     public void testWriteAbove() {
         InputStream is = new ByteArrayInputStream("test".getBytes());
-        Assert.assertFalse(resourceRoot.write("/", is));
+        Assert.assertFalse(resourceRoot.write("/", is, false));
     }
 }

==================================================
