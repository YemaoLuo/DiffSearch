c11b853ed9c74567c92e93a76bcdb43952f29132
==================================================
Introducing ApplicationBufferHandler - a callback interface to be able to expand the ByteBuffer provided when SocketWrapperBase.read(boolean, ByteBuffer). This is a preparation for using the new method SocketWrapperBase.read(boolean, ByteBuffer).
==================================================
Violeta Georgieva
==================================================
Fri Sep 9 20:18:10 2016 +0000
==================================================
ApplicationBufferHandler.java
Introducing ApplicationBufferHandler - a callback interface to be able to expand the ByteBuffer provided when SocketWrapperBase.read(boolean, ByteBuffer). This is a preparation for using the new method SocketWrapperBase.read(boolean, ByteBuffer).

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1760109 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AprEndpoint.java
new file mode 100644
index 0000000000..d06ab5666c
--- /dev/null
+++ b/java/org/apache/tomcat/util/net/ApplicationBufferHandler.java
@@ -0,0 +1,31 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.util.net;
+
+import java.nio.ByteBuffer;
+
+/**
+ * Callback interface to be able to expand buffers when buffer overflow
+ * exceptions happen
+ */
+public interface ApplicationBufferHandler {
+
+    public ByteBuffer getByteBuffer();
+
+    public void expand(int size);
+
+}

==================================================
Nio2Channel.java
index ec0015c14a..84ba0906fb 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -2783,5 +2783,11 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
             SSLSocket.setVerify(socket, SSL.SSL_CVERIFY_REQUIRE, -1);
             SSLSocket.renegotiate(socket);
         }
+
+
+        @Override
+        public void setAppReadBufHandler(ApplicationBufferHandler handler) {
+            // no-op
+        }
     }
 }

==================================================
Nio2Endpoint.java
index fe51705feb..9cf678ec71 100644
--- a/java/org/apache/tomcat/util/net/Nio2Channel.java
+++ b/java/org/apache/tomcat/util/net/Nio2Channel.java
@@ -213,4 +213,12 @@ public class Nio2Channel implements AsynchronousByteChannel {
         return DONE;
     }
 
+
+    private ApplicationBufferHandler appReadBufHandler;
+    public void setAppReadBufHandler(ApplicationBufferHandler handler) {
+        this.appReadBufHandler = handler;
+    }
+    protected ApplicationBufferHandler getAppReadBufHandler() {
+        return appReadBufHandler;
+    }
 }

==================================================
NioChannel.java
index 9239670a50..75e1fc73e4 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -1628,6 +1628,12 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
                 }
             }
         }
+
+
+        @Override
+        public void setAppReadBufHandler(ApplicationBufferHandler handler) {
+            getSocket().setAppReadBufHandler(handler);
+        }
     }
 
 

==================================================
NioEndpoint.java
index ceb0d2a355..34a70f509a 100644
--- a/java/org/apache/tomcat/util/net/NioChannel.java
+++ b/java/org/apache/tomcat/util/net/NioChannel.java
@@ -232,4 +232,13 @@ public class NioChannel implements ByteChannel {
             throw new IOException(sm.getString("channel.nio.interrupted"));
         }
     }
+
+
+    private ApplicationBufferHandler appReadBufHandler;
+    public void setAppReadBufHandler(ApplicationBufferHandler handler) {
+        this.appReadBufHandler = handler;
+    }
+    protected ApplicationBufferHandler getAppReadBufHandler() {
+        return appReadBufHandler;
+    }
 }

==================================================
SecureNio2Channel.java
index 902c87ac8c..60c14ea81c 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -1391,6 +1391,12 @@ public class NioEndpoint extends AbstractJsseEndpoint<NioChannel> {
                 }
             }
         }
+
+
+        @Override
+        public void setAppReadBufHandler(ApplicationBufferHandler handler) {
+            getSocket().setAppReadBufHandler(handler);
+        }
     }
 
 

==================================================
SecureNioChannel.java
index 0cdeb8f1b3..94a0f20208 100644
--- a/java/org/apache/tomcat/util/net/SecureNio2Channel.java
+++ b/java/org/apache/tomcat/util/net/SecureNio2Channel.java
@@ -666,6 +666,10 @@ public class SecureNio2Channel extends Nio2Channel  {
                             getBufHandler()
                                     .expand(sslEngine.getSession().getApplicationBufferSize());
                             dst = getBufHandler().getReadBuffer();
+                        } else if(dst == getAppReadBufHandler()) {
+                            getAppReadBufHandler()
+                                    .expand(sslEngine.getSession().getApplicationBufferSize());
+                            dst = getAppReadBufHandler().getByteBuffer();
                         } else {
                             // Can't expand the buffer as there is no way to signal
                             // to the caller that the buffer has been replaced.

==================================================
SocketWrapperBase.java
index 22bd1ffed9..9286ce7586 100644
--- a/java/org/apache/tomcat/util/net/SecureNioChannel.java
+++ b/java/org/apache/tomcat/util/net/SecureNioChannel.java
@@ -528,7 +528,8 @@ public class SecureNioChannel extends NioChannel  {
     @Override
     public int read(ByteBuffer dst) throws IOException {
         // Make sure we only use the ApplicationBufferHandler's buffers
-        if (dst != getBufHandler().getReadBuffer()) {
+        if (dst != getBufHandler().getReadBuffer() && (getAppReadBufHandler() == null
+                || dst != getAppReadBufHandler().getByteBuffer())) {
             throw new IllegalArgumentException(sm.getString("channel.nio.ssl.invalidBuffer"));
         }
         //are we in the middle of closing or closed?
@@ -577,6 +578,10 @@ public class SecureNioChannel extends NioChannel  {
                         // This is the normal case for this code
                         getBufHandler().expand(sslEngine.getSession().getApplicationBufferSize());
                         dst = getBufHandler().getReadBuffer();
+                    } else if (dst == getAppReadBufHandler().getByteBuffer()) {
+                        getAppReadBufHandler()
+                                .expand(sslEngine.getSession().getApplicationBufferSize());
+                        dst = getAppReadBufHandler().getByteBuffer();
                     } else {
                         // Can't expand the buffer as there is no way to signal
                         // to the caller that the buffer has been replaced.
@@ -652,16 +657,6 @@ public class SecureNioChannel extends NioChannel  {
         return remaining2 < remaining;
     }
 
-
-    /**
-     * Callback interface to be able to expand buffers
-     * when buffer overflow exceptions happen
-     */
-    public static interface ApplicationBufferHandler {
-        public ByteBuffer getReadBuffer();
-        public ByteBuffer getWriteBuffer();
-    }
-
     @Override
     public boolean isHandshakeComplete() {
         return handshakeComplete;

==================================================
