ede5a2fbe93b1e802cfefba9ff552e1a7fa33bd1
==================================================
Remove useAprConnector flag and auto switch to APR connector
==================================================
remm remm@apache.org
==================================================
Fri Apr 3 18:48:27 2020 +0200
==================================================
Connector.java
Remove useAprConnector flag and auto switch to APR connector

As a first step towards possibly removing the APR connector, simplify
Connector by dropping auto use of the APR connector. The default is now
always the NIO connector. Using the APR connector is still possible by
using the full protocol name (as documented).
Auto use of OpenSSL for TLS support if the AprLifecycleListener is
available and the Tomcat native library is available is not changed.
Rephrase some strings (IMO no big need to change the existing
translations).


==================================================
AprLifecycleListener.java
index c1b1f5fcc5..20118f7d31 100644
--- a/java/org/apache/catalina/connector/Connector.java
+++ b/java/org/apache/catalina/connector/Connector.java
@@ -73,21 +73,10 @@ public class Connector extends LifecycleMBeanBase  {
 
 
     public Connector(String protocol) {
-        boolean aprConnector = AprLifecycleListener.isAprAvailable() &&
-                AprLifecycleListener.getUseAprConnector();
-
         if ("HTTP/1.1".equals(protocol) || protocol == null) {
-            if (aprConnector) {
-                protocolHandlerClassName = "org.apache.coyote.http11.Http11AprProtocol";
-            } else {
-                protocolHandlerClassName = "org.apache.coyote.http11.Http11NioProtocol";
-            }
+            protocolHandlerClassName = "org.apache.coyote.http11.Http11NioProtocol";
         } else if ("AJP/1.3".equals(protocol)) {
-            if (aprConnector) {
-                protocolHandlerClassName = "org.apache.coyote.ajp.AjpAprProtocol";
-            } else {
-                protocolHandlerClassName = "org.apache.coyote.ajp.AjpNioProtocol";
-            }
+            protocolHandlerClassName = "org.apache.coyote.ajp.AjpNioProtocol";
         } else {
             protocolHandlerClassName = protocol;
         }
@@ -661,15 +650,9 @@ public class Connector extends LifecycleMBeanBase  {
      * @return the Coyote protocol handler in use.
      */
     public String getProtocol() {
-        if (("org.apache.coyote.http11.Http11NioProtocol".equals(getProtocolHandlerClassName()) &&
-                    (!AprLifecycleListener.isAprAvailable() || !AprLifecycleListener.getUseAprConnector())) ||
-                "org.apache.coyote.http11.Http11AprProtocol".equals(getProtocolHandlerClassName()) &&
-                    AprLifecycleListener.getUseAprConnector()) {
+        if ("org.apache.coyote.http11.Http11NioProtocol".equals(getProtocolHandlerClassName())) {
             return "HTTP/1.1";
-        } else if (("org.apache.coyote.ajp.AjpNioProtocol".equals(getProtocolHandlerClassName()) &&
-                    (!AprLifecycleListener.isAprAvailable() || !AprLifecycleListener.getUseAprConnector())) ||
-                "org.apache.coyote.ajp.AjpAprProtocol".equals(getProtocolHandlerClassName()) &&
-                    AprLifecycleListener.getUseAprConnector()) {
+        } else if ("org.apache.coyote.ajp.AjpNioProtocol".equals(getProtocolHandlerClassName())) {
             return "AJP/1.3";
         }
         return getProtocolHandlerClassName();

==================================================
