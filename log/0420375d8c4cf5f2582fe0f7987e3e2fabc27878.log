0420375d8c4cf5f2582fe0f7987e3e2fabc27878
==================================================
Fix Findbugs and Eclipse warnings
==================================================
Mark Emlyn
==================================================
Tue Jan 18 21:33:14 2011 +0000
==================================================
ApplicationDispatcher.java
Fix Findbugs and Eclipse warnings

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1060586 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WebappClassLoader.java
index 583b8dce49..73c1f9fec7 100644
--- a/java/org/apache/catalina/core/ApplicationDispatcher.java
+++ b/java/org/apache/catalina/core/ApplicationDispatcher.java
@@ -130,7 +130,7 @@ final class ApplicationDispatcher
      * variables causes threading issues and state is too complex to pass and
      * return single ServletRequest or ServletResponse objects.
      */
-    private class State {
+    private static class State {
         State(ServletRequest request, ServletResponse response,
                 boolean including) {
             this.outerRequest = request;

==================================================
LockOutRealm.java
index 39e10b9e63..7fbc043d77 100644
--- a/java/org/apache/catalina/loader/WebappClassLoader.java
+++ b/java/org/apache/catalina/loader/WebappClassLoader.java
@@ -156,7 +156,7 @@ public class WebappClassLoader
     }
 
     
-    protected final class PrivilegedGetClassLoader
+    protected static final class PrivilegedGetClassLoader
         implements PrivilegedAction<ClassLoader> {
 
         public Class<?> clazz;

==================================================
SSIServletExternalResolver.java
index 957c06b49e..bd06929ada 100644
--- a/java/org/apache/catalina/realm/LockOutRealm.java
+++ b/java/org/apache/catalina/realm/LockOutRealm.java
@@ -379,7 +379,7 @@ public class LockOutRealm extends CombinedRealm {
     }
 
 
-    protected class LockRecord {
+    protected static class LockRecord {
         private AtomicInteger failures = new AtomicInteger(0);
         private long lastFailureTime = 0;
         

==================================================
JspFactoryImpl.java
index 74a1799c41..b3580942c1 100644
--- a/java/org/apache/catalina/ssi/SSIServletExternalResolver.java
+++ b/java/org/apache/catalina/ssi/SSIServletExternalResolver.java
@@ -74,6 +74,7 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
     }
 
 
+    @Override
     public void log(String message, Throwable throwable) {
         //We can't assume that Servlet.log( message, null )
         //is the same as Servlet.log( message ), since API
@@ -86,6 +87,7 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
     }
 
 
+    @Override
     public void addVariableNames(Collection<String> variableNames) {
         for (int i = 0; i < VARIABLE_NAMES.length; i++) {
             String variableName = VARIABLE_NAMES[i];
@@ -132,6 +134,7 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
     }
 
 
+    @Override
     public void setVariableValue(String name, String value) {
         if (!isNameReserved(name)) {
             req.setAttribute(name, value);
@@ -139,6 +142,7 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
     }
 
 
+    @Override
     public String getVariableValue(String name) {
         String retVal = null;
         Object object = getReqAttributeIgnoreCase(name);
@@ -331,6 +335,7 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
             return retVal;
     }
 
+    @Override
     public Date getCurrentDate() {
         return new Date();
     }
@@ -480,6 +485,7 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
     }
 
 
+    @Override
     public long getFileLastModified(String path, boolean virtual)
             throws IOException {
         long lastModified = 0;
@@ -493,6 +499,7 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
     }
 
 
+    @Override
     public long getFileSize(String path, boolean virtual) throws IOException {
         long fileSize = -1;
         try {
@@ -508,6 +515,7 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
     //We are making lots of unnecessary copies of the included data here. If
     //someone ever complains that this is slow, we should connect the included
     // stream to the print writer that SSICommand uses.
+    @Override
     public String getFileText(String originalPath, boolean virtual)
             throws IOException {
         try {
@@ -552,7 +560,7 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
         }
     }
 
-    protected class ServletContextAndPath {
+    protected static class ServletContextAndPath {
         protected ServletContext servletContext;
         protected String path;
 

==================================================
ClassLoaderLogManager.java
index 7855abc9a5..74a143161f 100644
--- a/java/org/apache/jasper/runtime/JspFactoryImpl.java
+++ b/java/org/apache/jasper/runtime/JspFactoryImpl.java
@@ -126,7 +126,7 @@ public class JspFactoryImpl extends JspFactory {
         }
     }
 
-    private class PrivilegedGetPageContext
+    private static class PrivilegedGetPageContext
             implements PrivilegedAction<PageContext> {
 
         private JspFactoryImpl factory;
@@ -158,7 +158,7 @@ public class JspFactoryImpl extends JspFactory {
         }
     }
 
-    private class PrivilegedReleasePageContext
+    private static class PrivilegedReleasePageContext
             implements PrivilegedAction<Void> {
 
         private JspFactoryImpl factory;

==================================================
FileDirContext.java
index ad6c0ff974..d7b9e93671 100644
--- a/java/org/apache/juli/ClassLoaderLogManager.java
+++ b/java/org/apache/juli/ClassLoaderLogManager.java
@@ -679,7 +679,7 @@ public class ClassLoaderLogManager extends LogManager {
      * This class is needed to instantiate the root of each per classloader 
      * hierarchy.
      */
-    protected class RootLogger extends Logger {
+    protected static class RootLogger extends Logger {
         public RootLogger() {
             super("", null);
         }

==================================================
NioBlockingSelector.java
index 20ad0126a1..eff0f30f81 100644
--- a/java/org/apache/naming/resources/FileDirContext.java
+++ b/java/org/apache/naming/resources/FileDirContext.java
@@ -894,7 +894,7 @@ public class FileDirContext extends BaseDirContext {
      * This specialized resource implementation avoids opening the InputStream
      * to the file right away (which would put a lock on the file).
      */
-    protected class FileResource extends Resource {
+    protected static class FileResource extends Resource {
 
 
         // -------------------------------------------------------- Constructor
@@ -914,12 +914,6 @@ public class FileDirContext extends BaseDirContext {
         protected File file;
 
 
-        /**
-         * File length.
-         */
-        protected long length = -1L;
-
-
         // --------------------------------------------------- Resource Methods
 
 
@@ -951,7 +945,7 @@ public class FileDirContext extends BaseDirContext {
      * reading (to speed up simple checks, like checking the last modified
      * date).
      */
-    protected class FileResourceAttributes extends ResourceAttributes {
+    protected static class FileResourceAttributes extends ResourceAttributes {
 
         private static final long serialVersionUID = 1L;
 

==================================================
DedicatedThreadExecutor.java
index 8a97571af8..192120b1bf 100644
--- a/java/org/apache/tomcat/util/net/NioBlockingSelector.java
+++ b/java/org/apache/tomcat/util/net/NioBlockingSelector.java
@@ -194,7 +194,7 @@ public class NioBlockingSelector {
     }
 
     
-    protected class BlockPoller extends Thread {
+    protected static class BlockPoller extends Thread {
         protected volatile boolean run = true;
         protected Selector selector = null;
         protected ConcurrentLinkedQueue<Runnable> events = new ConcurrentLinkedQueue<Runnable>();
@@ -202,6 +202,7 @@ public class NioBlockingSelector {
         protected AtomicInteger wakeupCounter = new AtomicInteger(0);
         public void cancelKey(final SelectionKey key) {
             Runnable r = new Runnable() {
+                @Override
                 public void run() {
                     key.cancel();
                 }
@@ -225,6 +226,7 @@ public class NioBlockingSelector {
         
         public void add(final KeyAttachment key, final int ops, final KeyReference ref) {
             Runnable r = new Runnable() {
+                @Override
                 public void run() {
                     if ( key == null ) return;
                     NioChannel nch = key.getChannel();
@@ -254,6 +256,7 @@ public class NioBlockingSelector {
         
         public void remove(final KeyAttachment key, final int ops) {
             Runnable r = new Runnable() {
+                @Override
                 public void run() {
                     if ( key == null ) return;
                     NioChannel nch = key.getChannel();
@@ -380,7 +383,7 @@ public class NioBlockingSelector {
         }
     }
     
-    public class KeyReference {
+    public static class KeyReference {
         SelectionKey key = null;
         
         @Override

==================================================
TestMaxConnections.java
index 574140ea38..43e4411589 100644
--- a/java/org/apache/tomcat/util/threads/DedicatedThreadExecutor.java
+++ b/java/org/apache/tomcat/util/threads/DedicatedThreadExecutor.java
@@ -119,7 +119,7 @@ public class DedicatedThreadExecutor {
     // This can lead to false alarms about potential memory leaks because the
     // thread may have a web application class loader for its context class
     // loader.
-    private class SingleThreadFactory implements ThreadFactory {
+    private static class SingleThreadFactory implements ThreadFactory {
         private volatile Thread singleThread;
 
         @Override

==================================================
