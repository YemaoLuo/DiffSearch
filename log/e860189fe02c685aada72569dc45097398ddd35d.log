e860189fe02c685aada72569dc45097398ddd35d
==================================================
Fix the generics issues we can fix and suppress the issues in the API since we can't fix those.
==================================================
Mark Thomas
==================================================
Mon Jun 8 11:35:14 2015 +0000
==================================================
MessageInfo.java
Fix the generics issues we can fix and suppress the issues in the API since we can't fix those.
Suppress at the method level so we spot generics issues in any new methods we add (assuming there is a JASPIC.next and we contribute to it in some way)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1684162 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AuthConfigFactory.java
index d17fddc0d3..1e5db08070 100644
--- a/java/javax/security/auth/message/MessageInfo.java
+++ b/java/javax/security/auth/message/MessageInfo.java
@@ -23,6 +23,7 @@ import java.util.Map;
  */
 public interface MessageInfo {
 
+    @SuppressWarnings("rawtypes") // JASPIC API uses raw types
     Map getMap();
 
     Object getRequestMessage();

==================================================
ClientAuthConfig.java
index a3080dbe78..b56b05f39b 100644
--- a/java/javax/security/auth/message/config/AuthConfigFactory.java
+++ b/java/javax/security/auth/message/config/AuthConfigFactory.java
@@ -33,10 +33,10 @@ public abstract class AuthConfigFactory {
     private static ClassLoader contextClassLoader;
 
     static {
-        contextClassLoader = (ClassLoader) java.security.AccessController
-                .doPrivileged(new java.security.PrivilegedAction() {
+        contextClassLoader = java.security.AccessController
+                .doPrivileged(new java.security.PrivilegedAction<ClassLoader>() {
                     @Override
-                    public Object run() {
+                    public ClassLoader run() {
                         return Thread.currentThread().getContextClassLoader();
                     }
                 });
@@ -48,10 +48,10 @@ public abstract class AuthConfigFactory {
             sm.checkPermission(new AuthPermission("getAuthConfigFactory"));
         }
         if (factory == null) {
-            String className = (String) java.security.AccessController
-                    .doPrivileged(new java.security.PrivilegedAction() {
+            String className = java.security.AccessController
+                    .doPrivileged(new java.security.PrivilegedAction<String>() {
                         @Override
-                        public Object run() {
+                        public String run() {
                             return java.security.Security.getProperty(DEFAULT_FACTORY_SECURITY_PROPERTY);
                         }
                     });
@@ -60,14 +60,14 @@ public abstract class AuthConfigFactory {
             }
             try {
                 final String finalClassName = className;
-                factory = (AuthConfigFactory) java.security.AccessController
-                        .doPrivileged(new java.security.PrivilegedExceptionAction() {
+                factory = java.security.AccessController
+                        .doPrivileged(new java.security.PrivilegedExceptionAction<AuthConfigFactory>() {
                             @Override
-                            public Object run() throws ClassNotFoundException, InstantiationException,
+                            public AuthConfigFactory run() throws ClassNotFoundException, InstantiationException,
                                     IllegalAccessException {
                                 // TODO Review this
-                                Class clazz = Class.forName(finalClassName, true, contextClassLoader);
-                                return clazz.newInstance();
+                                Class<?> clazz = Class.forName(finalClassName, true, contextClassLoader);
+                                return (AuthConfigFactory) clazz.newInstance();
                             }
                         });
             } catch (PrivilegedActionException e) {
@@ -107,6 +107,7 @@ public abstract class AuthConfigFactory {
 
     public abstract String registerConfigProvider(AuthConfigProvider provider, String layer, String appContext, String description);
 
+    @SuppressWarnings("rawtypes") // JASPIC API uses raw types
     public abstract String registerConfigProvider(String className, Map properties, String layer, String appContext, String description);
 
     public abstract boolean removeRegistration(String registrationID);

==================================================
ServerAuthConfig.java
index 70611de50a..78e103dcf2 100644
--- a/java/javax/security/auth/message/config/ClientAuthConfig.java
+++ b/java/javax/security/auth/message/config/ClientAuthConfig.java
@@ -27,5 +27,6 @@ import javax.security.auth.message.AuthException;
  */
 public interface ClientAuthConfig extends AuthConfig {
 
+    @SuppressWarnings("rawtypes") // JASPIC API uses raw types
     ClientAuthContext getAuthContext(String authContextID, Subject clientSubject, Map properties) throws AuthException;
 }

==================================================
ClientAuthModule.java
index 9b5236a7fe..658bd13767 100644
--- a/java/javax/security/auth/message/config/ServerAuthConfig.java
+++ b/java/javax/security/auth/message/config/ServerAuthConfig.java
@@ -26,5 +26,6 @@ import javax.security.auth.message.AuthException;
  */
 public interface ServerAuthConfig extends AuthConfig {
 
+    @SuppressWarnings("rawtypes") // JASPIC API uses raw types
     ServerAuthContext getAuthContext(String authContextID, Subject serviceSubject, Map properties) throws AuthException;
 }

==================================================
ServerAuthModule.java
index 2e74bf2497..7aa36f7daa 100644
--- a/java/javax/security/auth/message/module/ClientAuthModule.java
+++ b/java/javax/security/auth/message/module/ClientAuthModule.java
@@ -29,7 +29,9 @@ import javax.security.auth.message.MessagePolicy;
  */
 public interface ClientAuthModule extends ClientAuth {
 
+    @SuppressWarnings("rawtypes") // JASPIC API uses raw types
     Class[] getSupportedMessageTypes();
 
+    @SuppressWarnings("rawtypes") // JASPIC API uses raw types
     void initialize(MessagePolicy requestPolicy, MessagePolicy responsePolicy, CallbackHandler handler, Map options) throws AuthException;
 }

==================================================
