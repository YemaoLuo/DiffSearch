2b03c928035962024fae0aa312e9cc8be869cabf
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=60410
==================================================
Mark Thomas
==================================================
Mon Nov 28 11:14:29 2016 +0000
==================================================
AbstractArchiveResource.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=60410
Ensure that multiple calls to JarInputStreamWrapper#close() do not incorrectly trigger the closure of the underlying JAR or WAR file.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1771711 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestJarInputStreamWrapper.java
index 46fd641320..e5ececf6db 100644
--- a/java/org/apache/catalina/webresources/AbstractArchiveResource.java
+++ b/java/org/apache/catalina/webresources/AbstractArchiveResource.java
@@ -21,6 +21,7 @@ import java.io.InputStream;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.security.cert.Certificate;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.jar.JarEntry;
 import java.util.jar.Manifest;
 
@@ -233,7 +234,7 @@ public abstract class AbstractArchiveResource extends AbstractResource {
 
     /**
      * This wrapper assumes that the InputStream was created from a JarFile
-     * obtained from a call to getArchiveResourceSet().getJarFile(). If this is
+     * obtained from a call to getArchiveResourceSet().openJarFile(). If this is
      * not the case then the usage counting in AbstractArchiveResourceSet will
      * break and the JarFile may be unexpectedly closed.
      */
@@ -241,6 +242,7 @@ public abstract class AbstractArchiveResource extends AbstractResource {
 
         private final JarEntry jarEntry;
         private final InputStream is;
+        private final AtomicBoolean closed = new AtomicBoolean(false);
 
 
         public JarInputStreamWrapper(JarEntry jarEntry, InputStream is) {
@@ -281,7 +283,11 @@ public abstract class AbstractArchiveResource extends AbstractResource {
 
         @Override
         public void close() throws IOException {
-            archiveResourceSet.closeJarFile();
+            if (closed.compareAndSet(false, true)) {
+                // Must only call this once else the usage counting will break
+                archiveResourceSet.closeJarFile();
+            }
+            is.close();
         }
 
 

==================================================
