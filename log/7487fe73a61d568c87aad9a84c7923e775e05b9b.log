7487fe73a61d568c87aad9a84c7923e775e05b9b
==================================================
Refactor the ThreadLocal leak tests:
==================================================
Mark Emlyn
==================================================
Mon Mar 19 19:28:01 2012 +0000
==================================================
WebappClassLoader.java
Refactor the ThreadLocal leak tests:
- Use the supporting classes from the new package where they were copied to so they weren't treated as container Servlets
- Ensure the supporting classes are loaded by the web application class loader
- Break the direct and indirect leak tests into separate tests
- Ensure JRE memory leaks do not interfere with the results of the test
- Use a logging filter to ensure error messages are logged for the ThreadLocal leaks
- Remove pointless sleep code
- Add assertions to check a) a leak occurs and b) it is logged

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1302610 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestWebappClassLoaderThreadLocalMemoryLeak.java
index 139ebc7479..f19a77d0f6 100644
--- a/java/org/apache/catalina/loader/WebappClassLoader.java
+++ b/java/org/apache/catalina/loader/WebappClassLoader.java
@@ -41,6 +41,7 @@ import java.security.Permission;
 import java.security.PermissionCollection;
 import java.security.Policy;
 import java.security.PrivilegedAction;
+import java.security.ProtectionDomain;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Enumeration;
@@ -1089,17 +1090,25 @@ public class WebappClassLoader
     // ---------------------------------------------------- ClassLoader Methods
 
 
-     /**
-      * Add the specified URL to the classloader.
-      */
+    /**
+     * Add the specified URL to the classloader.
+     */
     @Override
-     protected void addURL(URL url) {
-         super.addURL(url);
-         hasExternalRepositories = true;
-         repositoryURLs = null;
-     }
+    protected void addURL(URL url) {
+        super.addURL(url);
+        hasExternalRepositories = true;
+        repositoryURLs = null;
+    }
 
 
+    /**
+     * Expose this method for use by the unit tests.
+     */
+    protected final Class<?> doDefineClass(String name, byte[] b, int off, int len,
+            ProtectionDomain protectionDomain) {
+        return super.defineClass(name, b, off, len, protectionDomain);
+    }
+
     /**
      * Find the specified class in our local repositories, if possible.  If
      * not found, throw <code>ClassNotFoundException</code>.
@@ -2568,6 +2577,16 @@ public class WebappClassLoader
             }
             cl = cl.getParent();
         }
+
+        if (o instanceof Collection<?>) {
+            Iterator<?> iter = ((Collection<?>) o).iterator();
+            while (iter.hasNext()) {
+                Object entry = iter.next();
+                if (loadedByThisOrChild(entry)) {
+                    return true;
+                }
+            }
+        }
         return false;
     }
 

==================================================
