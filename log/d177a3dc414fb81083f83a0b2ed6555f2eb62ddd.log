d177a3dc414fb81083f83a0b2ed6555f2eb62ddd
==================================================
Pull up common endpoint code in Processor constructors
==================================================
Mark Emlyn
==================================================
Sun Jun 19 15:00:40 2011 +0000
==================================================
AbstractProcessor.java
Pull up common endpoint code in Processor constructors

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1137375 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractAjpProcessor.java
index 54b136d7f6..14e2ab13fb 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -21,15 +21,23 @@ import java.util.concurrent.Executor;
 import org.apache.tomcat.util.net.AbstractEndpoint;
 
 /**
- * Provides attributes common to all support protocols (currently HTTP and AJP).
- * TODO: There are more attributes that can be pulled up
+ * Provides functionality and attributes common to all supported protocols
+ * (currently HTTP and AJP).
  */
 public abstract class AbstractProcessor implements ActionHook, Processor {
 
+    protected AbstractEndpoint endpoint;
+    protected Request request = null;
+    protected Response response = null;
+
+    
+    public AbstractProcessor(AbstractEndpoint endpoint) {
+        this.endpoint = endpoint;
+    }
+
     /**
      * The endpoint receiving connections that are handled by this processor.
      */
-    protected AbstractEndpoint endpoint;
     protected AbstractEndpoint getEndpoint() {
         return endpoint;
     }
@@ -38,18 +46,11 @@ public abstract class AbstractProcessor implements ActionHook, Processor {
     /**
      * The request associated with this processor.
      */
-    protected Request request = null;
     public Request getRequest() {
         return request;
     }
 
 
-    /**
-     * The response associated with this processor.
-     */
-    protected Response response = null;
-
-
     /*
      * Expose selected endpoint attributes through the processor
      */

==================================================
AbstractHttp11Processor.java
index 17061c11cc..28c5db93ed 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
@@ -224,8 +224,10 @@ public abstract class AbstractAjpProcessor extends AbstractProcessor {
     // ------------------------------------------------------------ Constructor
     
     public AbstractAjpProcessor(int packetSize, AbstractEndpoint endpoint) {
+        
+        super(endpoint);
+
         this.packetSize = packetSize;
-        this.endpoint = endpoint;
 
         request = new Request();
         request.setInputBuffer(new SocketInputBuffer());

==================================================
Http11AprProcessor.java
index 677b711215..ed3c8dffbc 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -43,6 +43,7 @@ import org.apache.tomcat.util.buf.HexUtils;
 import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.http.FastHttpDateFormat;
 import org.apache.tomcat.util.http.MimeHeaders;
+import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.res.StringManager;
 
@@ -224,6 +225,11 @@ public abstract class AbstractHttp11Processor extends AbstractProcessor {
     protected AsyncStateMachine asyncStateMachine = new AsyncStateMachine(this);
 
 
+    public AbstractHttp11Processor(AbstractEndpoint endpoint) {
+        super(endpoint);
+    }
+
+
     /**
      * Set compression level.
      */

==================================================
Http11NioProcessor.java
index 9926574c89..1c5ef3fdef 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -68,7 +68,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor {
     public Http11AprProcessor(int headerBufferSize, AprEndpoint endpoint,
             int maxTrailerSize) {
 
-        this.endpoint = endpoint;
+        super(endpoint);
         
         request = new Request();
         inputBuffer = new InternalAprInputBuffer(request, headerBufferSize);

==================================================
Http11Processor.java
index 4695103176..7811cc0563 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -72,7 +72,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor {
     public Http11NioProcessor(int maxHttpHeaderSize, NioEndpoint endpoint,
             int maxTrailerSize) {
 
-        this.endpoint = endpoint;
+        super(endpoint);
 
         request = new Request();
         inputBuffer = new InternalNioInputBuffer(request, maxHttpHeaderSize);

==================================================
