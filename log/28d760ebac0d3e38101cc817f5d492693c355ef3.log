28d760ebac0d3e38101cc817f5d492693c355ef3
==================================================
Complete update of WebSocket to latest draft of spec
==================================================
Mark Emlyn
==================================================
Wed Feb 27 01:32:26 2013 +0000
==================================================
ClientEndpoint.java
Complete update of WebSocket to latest draft of spec

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1450570 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ClientEndpointConfiguration.java
index 65c6fa253b..295704a9c9 100644
--- a/java/javax/websocket/ClientEndpoint.java
+++ b/java/javax/websocket/ClientEndpoint.java
@@ -27,4 +27,6 @@ public @interface ClientEndpoint {
     String[] subprotocols();
     Class<? extends Decoder>[] decoders();
     Class<? extends Encoder>[] encoders();
+    public Class<? extends ClientEndpointConfigurator> configurator()
+            default ClientEndpointConfigurator.class;
 }

==================================================
ClientEndpointConfigurationBuilder.java
index f83e92b87b..edcf59a0bf 100644
--- a/java/javax/websocket/ClientEndpointConfiguration.java
+++ b/java/javax/websocket/ClientEndpointConfiguration.java
@@ -17,7 +17,6 @@
 package javax.websocket;
 
 import java.util.List;
-import java.util.Map;
 
 public interface ClientEndpointConfiguration extends EndpointConfiguration {
 
@@ -25,19 +24,5 @@ public interface ClientEndpointConfiguration extends EndpointConfiguration {
 
     List<Extension> getExtensions();
 
-    /**
-     * Provides the client with a mechanism to inspect and/or modify the headers
-     * that are sent to the server to start the WebSocket handshake.
-     *
-     * @param headers   The HTTP headers
-     */
-    void beforeRequest(Map<String, List<String>> headers);
-
-    /**
-     * Provides the client with a mechanism to inspect the handshake response
-     * that is returned from the server.
-     *
-     * @param handshakeResponse The response
-     */
-    void afterResponse(HandshakeResponse handshakeResponse);
+    public ClientEndpointConfigurator getClientEndpointConfigurator();
 }

==================================================
ClientEndpointConfigurator.java
new file mode 100644
index 0000000000..6a2d575d4f
--- /dev/null
+++ b/java/javax/websocket/ClientEndpointConfigurationBuilder.java
@@ -0,0 +1,99 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.websocket;
+
+import java.util.Collections;
+import java.util.List;
+
+public class ClientEndpointConfigurationBuilder {
+
+    private static final ClientEndpointConfigurator DEFAULT_CONFIGURATOR =
+            new ClientEndpointConfigurator() {};
+
+
+    public static ClientEndpointConfigurationBuilder create() {
+        return new ClientEndpointConfigurationBuilder();
+    }
+
+
+    private ClientEndpointConfigurator configurator = DEFAULT_CONFIGURATOR;
+    private List<String> preferredSubprotocols = Collections.EMPTY_LIST;
+    private List<Extension> extensions = Collections.EMPTY_LIST;
+    private List<Encoder> encoders = Collections.EMPTY_LIST;
+    private List<Decoder> decoders = Collections.EMPTY_LIST;
+
+
+    public ClientEndpointConfiguration build() {
+        return new DefaultClientEndpointConfiguration(preferredSubprotocols,
+                extensions, encoders, decoders, configurator);
+    }
+
+
+    public ClientEndpointConfigurationBuilder clientHandshakeConfigurator(
+            ClientEndpointConfigurator clientEndpointConfigurator) {
+        if (clientEndpointConfigurator == null) {
+            configurator = DEFAULT_CONFIGURATOR;
+        } else {
+            configurator = clientEndpointConfigurator;
+        }
+        return this;
+    }
+
+
+    public ClientEndpointConfigurationBuilder preferredSubprotocols(
+            List<String> preferredSubprotocols) {
+        if (preferredSubprotocols == null ||
+                preferredSubprotocols.size() == 0) {
+            this.preferredSubprotocols = Collections.EMPTY_LIST;
+        } else {
+            this.preferredSubprotocols =
+                    Collections.unmodifiableList(preferredSubprotocols);
+        }
+        return this;
+    }
+
+
+    public ClientEndpointConfigurationBuilder extensions(
+            List<Extension> extensions) {
+        if (extensions == null || extensions.size() == 0) {
+            this.extensions = Collections.EMPTY_LIST;
+        } else {
+            this.extensions = Collections.unmodifiableList(extensions);
+        }
+        return this;
+    }
+
+
+    public ClientEndpointConfigurationBuilder encoders(List<Encoder> encoders) {
+        if (encoders == null || encoders.size() == 0) {
+            this.encoders = Collections.EMPTY_LIST;
+        } else {
+            this.encoders = Collections.unmodifiableList(encoders);
+        }
+        return this;
+    }
+
+
+    public ClientEndpointConfigurationBuilder decoders(List<Decoder> decoders) {
+        if (decoders == null || decoders.size() == 0) {
+            this.decoders = Collections.EMPTY_LIST;
+        } else {
+            this.decoders = Collections.unmodifiableList(decoders);
+        }
+        return this;
+    }
+}

==================================================
DefaultClientEndpointConfiguration.java
new file mode 100644
index 0000000000..0252c6266c
--- /dev/null
+++ b/java/javax/websocket/ClientEndpointConfigurator.java
@@ -0,0 +1,43 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.websocket;
+
+import java.util.List;
+import java.util.Map;
+
+public abstract class ClientEndpointConfigurator {
+
+    /**
+     * Provides the client with a mechanism to inspect and/or modify the headers
+     * that are sent to the server to start the WebSocket handshake.
+     *
+     * @param headers   The HTTP headers
+     */
+    public void beforeRequest(Map<String, List<String>> headers) {
+        // NO-OP
+    }
+
+    /**
+     * Provides the client with a mechanism to inspect the handshake response
+     * that is returned from the server.
+     *
+     * @param handshakeResponse The response
+     */
+    public void afterResponse(HandshakeResponse handshakeResponse) {
+        // NO-OP
+    }
+}

==================================================
EndpointConfiguration.java
similarity index 60%
rename from java/javax/websocket/DefaultClientConfiguration.java
rename to java/javax/websocket/DefaultClientEndpointConfiguration.java
index 9dfa2ec86c..3c4cdf0104 100644
--- a/java/javax/websocket/DefaultClientConfiguration.java
+++ b/java/javax/websocket/DefaultClientEndpointConfiguration.java
@@ -16,65 +16,64 @@
  */
 package javax.websocket;
 
-import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-public class DefaultClientConfiguration implements ClientEndpointConfiguration {
-    private List<String> preferredSubprotocols = new ArrayList<>();
-    private List<Extension> extensions = new ArrayList<>();
-    private List<Encoder> encoders = new ArrayList<>();
-    private List<Decoder> decoders = new ArrayList<>();
+public class DefaultClientEndpointConfiguration
+        implements ClientEndpointConfiguration {
+
+    private final List<String> preferredSubprotocols;
+    private final List<Extension> extensions;
+    private final List<Encoder> encoders;
+    private final List<Decoder> decoders;
+    private final Map<String,Object> userProperties = new HashMap<>();
+    private final ClientEndpointConfigurator configurator;
+
+
+    DefaultClientEndpointConfiguration(List<String> preferredSubprotocols,
+            List<Extension> extensions, List<Encoder> encoders,
+            List<Decoder> decoders, ClientEndpointConfigurator configurator) {
+        this.preferredSubprotocols = preferredSubprotocols;
+        this.extensions = extensions;
+        this.decoders = decoders;
+        this.encoders = encoders;
+        this.configurator = configurator;
+    }
+
 
     @Override
     public List<String> getPreferredSubprotocols() {
         return preferredSubprotocols;
     }
 
-    public DefaultClientConfiguration setPreferredSubprotocols(
-            List<String> preferredSubprotocols) {
-        this.preferredSubprotocols = preferredSubprotocols;
-        return this;
-    }
 
     @Override
     public List<Extension> getExtensions() {
         return extensions;
     }
 
-    public DefaultClientConfiguration setExtensions(
-            List<Extension> extensions) {
-        this.extensions = extensions;
-        return this;
-    }
 
     @Override
     public List<Encoder> getEncoders() {
         return encoders;
     }
 
-    public DefaultClientConfiguration setEncoders(List<Encoder> encoders) {
-        this.encoders = encoders;
-        return this;
-    }
 
     @Override
     public List<Decoder> getDecoders() {
         return decoders;
     }
 
-    public DefaultClientConfiguration setDecoders(List<Decoder> decoders) {
-        this.decoders = decoders;
-        return this;
-    }
 
     @Override
-    public void beforeRequest(Map<String, List<String>> headers) {
-        // NO-OP
+    public Map<String, Object> getUserProperties() {
+        return userProperties;
     }
 
+
     @Override
-    public void afterResponse(HandshakeResponse handshakeResponse) {
-        // NO-OP
+    public ClientEndpointConfigurator getClientEndpointConfigurator() {
+        return configurator;
     }
 }

==================================================
DefaultServerConfiguration.java
index e4688c4488..758f5ceb14 100644
--- a/java/javax/websocket/EndpointConfiguration.java
+++ b/java/javax/websocket/EndpointConfiguration.java
@@ -17,7 +17,7 @@
 package javax.websocket;
 
 import java.util.List;
-//import java.util.Map;
+import java.util.Map;
 
 public interface EndpointConfiguration {
 
@@ -25,5 +25,5 @@ public interface EndpointConfiguration {
 
     List<Decoder> getDecoders();
 
-    //Map<String,Object> getUserProperties();
+    Map<String,Object> getUserProperties();
 }

==================================================
DefaultServerEndpointConfiguration.java
deleted file mode 100644
index 7a87ac1a43..0000000000
--- a/java/javax/websocket/server/DefaultServerConfiguration.java
+++ /dev/null
@@ -1,128 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package javax.websocket.server;
-
-import java.net.URI;
-import java.util.ArrayList;
-import java.util.List;
-
-import javax.websocket.Decoder;
-import javax.websocket.Encoder;
-import javax.websocket.Endpoint;
-import javax.websocket.Extension;
-import javax.websocket.HandshakeResponse;
-
-/**
- * Provides the default implementation for WebSocket server endpoints.
- */
-public class DefaultServerConfiguration implements ServerEndpointConfiguration {
-
-    private Class<? extends Endpoint> endpointClass;
-    private String path;
-    private List<String> subprotocols = new ArrayList<>();
-    private List<Extension> extensions = new ArrayList<>();
-    private List<Encoder> encoders = new ArrayList<>();
-    private List<Decoder> decoders = new ArrayList<>();
-
-    public DefaultServerConfiguration(Class<? extends Endpoint> endpointClass,
-            String path) {
-        this.endpointClass = endpointClass;
-        this.path = path;
-    }
-
-    public DefaultServerConfiguration setEncoders(List<Encoder> encoders) {
-        this.encoders.clear();
-        this.encoders.addAll(encoders);
-        return this;
-    }
-
-    public DefaultServerConfiguration setDecoders(List<Decoder> decoders) {
-        this.decoders.clear();
-        this.decoders.addAll(decoders);
-        return this;
-    }
-
-    public DefaultServerConfiguration setSubprotocols(
-            List<String> subprotocols) {
-        this.subprotocols.clear();
-        this.subprotocols.addAll(subprotocols);
-        return this;
-    }
-
-    public DefaultServerConfiguration setExtensions(
-            List<Extension> extensions) {
-        this.extensions.clear();
-        this.extensions.addAll(extensions);
-        return this;
-    }
-
-
-    @Override
-    public Class<? extends Endpoint> getEndpointClass() {
-        return endpointClass;
-    }
-
-    @Override
-    public List<Encoder> getEncoders() {
-        return this.encoders;
-    }
-
-    @Override
-    public List<Decoder> getDecoders() {
-        return this.decoders;
-    }
-
-    @Override
-    public String getPath() {
-        return path;
-    }
-
-    @Override
-    public String getNegotiatedSubprotocol(List<String> requestedSubprotocols) {
-        // TODO
-        return null;
-    }
-
-    @Override
-    public List<Extension> getNegotiatedExtensions(
-            List<Extension> requestedExtensions) {
-        // TODO
-        return null;
-    }
-
-    /**
-     * {@inheritDoc}
-     *
-     * The default implementation accepts all connection requests.
-     */
-    @Override
-    public boolean checkOrigin(String originHeaderValue) {
-        return true;
-    }
-
-    @Override
-    public boolean matchesURI(URI uri) {
-        // TODO
-        return false;
-    }
-
-    @Override
-    public void modifyHandshake(HandshakeRequest request,
-            HandshakeResponse response) {
-        // TODO
-    }
-}

==================================================
ServerApplicationConfiguration.java
new file mode 100644
index 0000000000..0285d44380
--- /dev/null
+++ b/java/javax/websocket/server/DefaultServerEndpointConfiguration.java
@@ -0,0 +1,95 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.websocket.server;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import javax.websocket.Decoder;
+import javax.websocket.Encoder;
+import javax.websocket.Extension;
+
+/**
+ * Provides the default configuration for WebSocket server endpoints.
+ */
+public class DefaultServerEndpointConfiguration
+        implements ServerEndpointConfiguration {
+
+    private final Class<?> endpointClass;
+    private final String path;
+    private final List<String> subprotocols;
+    private final List<Extension> extensions;
+    private final List<Encoder> encoders;
+    private final List<Decoder> decoders;
+    private final ServerEndpointConfigurator serverEndpointConfigurator;
+    private final Map<String,Object> userProperties = new HashMap<>();
+
+    DefaultServerEndpointConfiguration(
+            Class<?> endpointClass, String path,
+            List<String> subprotocols, List<Extension> extensions,
+            List<Encoder> encoders, List<Decoder> decoders,
+            ServerEndpointConfigurator serverEndpointConfigurator) {
+        this.endpointClass = endpointClass;
+        this.path = path;
+        this.subprotocols = subprotocols;
+        this.extensions = extensions;
+        this.encoders = encoders;
+        this.decoders = decoders;
+        this.serverEndpointConfigurator = serverEndpointConfigurator;
+    }
+
+    @Override
+    public Class<?> getEndpointClass() {
+        return endpointClass;
+    }
+
+    @Override
+    public List<Encoder> getEncoders() {
+        return this.encoders;
+    }
+
+    @Override
+    public List<Decoder> getDecoders() {
+        return this.decoders;
+    }
+
+    @Override
+    public String getPath() {
+        return path;
+    }
+
+    @Override
+    public ServerEndpointConfigurator getServerEndpointConfigurator() {
+        return serverEndpointConfigurator;
+    }
+
+    @Override
+    public final Map<String, Object> getUserProperties() {
+        return userProperties;
+    }
+
+    @Override
+    public List<String> getSubprotocols() {
+        return subprotocols;
+    }
+
+    @Override
+    public List<Extension> getExtensions() {
+        return extensions;
+    }
+}

==================================================
ServerEndpoint.java
index 66221005fc..0ef2f11d26 100644
--- a/java/javax/websocket/server/ServerApplicationConfiguration.java
+++ b/java/javax/websocket/server/ServerApplicationConfiguration.java
@@ -18,9 +18,12 @@ package javax.websocket.server;
 
 import java.util.Set;
 
+import javax.websocket.Endpoint;
+
 public interface ServerApplicationConfiguration {
 
-    Set<Class<? extends ServerEndpointConfiguration>> getEndpointConfigurationClasses(Set<Class<? extends ServerEndpointConfiguration>> scanned);
+    Set<Class<? extends ServerEndpointConfiguration>> getEndpointConfiguration(
+            Set<Class<? extends Endpoint>> scanned);
 
     Set<Class<?>> getAnnotatedEndpointClasses(Set<Class<?>> scanned);
 }

==================================================
ServerEndpointConfiguration.java
similarity index 89%
rename from java/javax/websocket/server/WebSocketEndpoint.java
rename to java/javax/websocket/server/ServerEndpoint.java
index a88f953242..0811210bb2 100644
--- a/java/javax/websocket/server/WebSocketEndpoint.java
+++ b/java/javax/websocket/server/ServerEndpoint.java
@@ -26,7 +26,7 @@ import javax.websocket.Encoder;
 
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.TYPE)
-public @interface WebSocketEndpoint {
+public @interface ServerEndpoint {
 
     /**
      * URI or URI-template that the annotated class should be mapped to.
@@ -39,6 +39,6 @@ public @interface WebSocketEndpoint {
 
     Class<? extends Encoder>[] encoders() default {};
 
-    Class<? extends DefaultServerConfiguration> configuration()
-            default DefaultServerConfiguration.class;
+    public Class<? extends ServerEndpointConfigurator> configurator()
+            default ServerEndpointConfigurator.class;
 }

==================================================
ServerEndpointConfigurationBuilder.java
index fa0925278a..3098face9b 100644
--- a/java/javax/websocket/server/ServerEndpointConfiguration.java
+++ b/java/javax/websocket/server/ServerEndpointConfiguration.java
@@ -16,40 +16,29 @@
  */
 package javax.websocket.server;
 
-import java.net.URI;
 import java.util.List;
 
-import javax.websocket.Endpoint;
 import javax.websocket.EndpointConfiguration;
 import javax.websocket.Extension;
-import javax.websocket.HandshakeResponse;
 
+/**
+ * Provides configuration information for WebSocket endpoints published to a
+ * server. Applications may provide their own implementation or use
+ * {@link ServerEndpointConfigurationBuilder}.
+ */
 public interface ServerEndpointConfiguration extends EndpointConfiguration {
 
-    Class<? extends Endpoint> getEndpointClass();
+    Class<?> getEndpointClass();
 
-    String getNegotiatedSubprotocol(List<String> requestedSubprotocols);
+    List<String> getSubprotocols();
 
-    List<Extension> getNegotiatedExtensions(List<Extension> requestedExtensions);
-
-    /**
-     * Enables the WebSocket endpoint to accept or reject connections based on
-     * the HTTP origin header.
-     *
-     * @param originHeaderValue The HTTP origin header provided by the client.
-     *
-     * @return  <code>true</code> if the request should be accepted otherwise
-     *          <code>false</false>
-     */
-    boolean checkOrigin(String originHeaderValue);
-
-    boolean matchesURI(URI uri);
-
-    void modifyHandshake(HandshakeRequest request, HandshakeResponse response);
+    List<Extension> getExtensions();
 
     /**
      * Returns the path at which this WebSocket server endpoint has been
      * registered. It may be a path or a level 0 URI template.
      */
     String getPath();
+
+    ServerEndpointConfigurator getServerEndpointConfigurator();
 }

==================================================
ServerEndpointConfigurator.java
new file mode 100644
index 0000000000..c98870fa1a
--- /dev/null
+++ b/java/javax/websocket/server/ServerEndpointConfigurationBuilder.java
@@ -0,0 +1,107 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.websocket.server;
+
+import java.util.Collections;
+import java.util.List;
+
+import javax.websocket.Decoder;
+import javax.websocket.Encoder;
+import javax.websocket.Extension;
+
+public class ServerEndpointConfigurationBuilder {
+
+    public static ServerEndpointConfigurationBuilder create(
+            Class<?> endpointClass, String path) {
+        return new ServerEndpointConfigurationBuilder(endpointClass, path);
+    }
+
+
+    private final Class<?> endpointClass;
+    private final String path;
+    private List<Encoder> encoders = Collections.EMPTY_LIST;
+    private List<Decoder> decoders = Collections.EMPTY_LIST;
+    private List<String> subprotocols = Collections.EMPTY_LIST;
+    private List<Extension> extensions = Collections.EMPTY_LIST;
+    private ServerEndpointConfigurator configurator =
+            ServerEndpointConfigurator.getDefault();
+
+
+    private ServerEndpointConfigurationBuilder(Class<?> endpointClass,
+            String path) {
+        this.endpointClass = endpointClass;
+        this.path = path;
+    }
+
+    public ServerEndpointConfiguration build() {
+        return new DefaultServerEndpointConfiguration(endpointClass, path,
+                subprotocols, extensions, encoders, decoders, configurator);
+    }
+
+
+    public ServerEndpointConfigurationBuilder encoders(List<Encoder> encoders) {
+        if (encoders == null || encoders.size() == 0) {
+            this.encoders = Collections.EMPTY_LIST;
+        } else {
+            this.encoders = Collections.unmodifiableList(encoders);
+        }
+        return this;
+    }
+
+
+    public ServerEndpointConfigurationBuilder decoders(List<Decoder> decoders) {
+        if (decoders == null || decoders.size() == 0) {
+            this.decoders = Collections.EMPTY_LIST;
+        } else {
+            this.decoders = Collections.unmodifiableList(decoders);
+        }
+        return this;
+    }
+
+
+    public ServerEndpointConfigurationBuilder subprotocols(
+            List<String> subprotocols) {
+        if (subprotocols == null || subprotocols.size() == 0) {
+            this.subprotocols = Collections.EMPTY_LIST;
+        } else {
+            this.subprotocols = Collections.unmodifiableList(subprotocols);
+        }
+        return this;
+    }
+
+
+    public ServerEndpointConfigurationBuilder extensions(
+            List<Extension> extensions) {
+        if (extensions == null || extensions.size() == 0) {
+            this.extensions = Collections.EMPTY_LIST;
+        } else {
+            this.extensions = Collections.unmodifiableList(extensions);
+        }
+        return this;
+    }
+
+
+    public ServerEndpointConfigurationBuilder serverEndpointConfigurator(
+            ServerEndpointConfigurator serverEndpointConfigurator) {
+        if (serverEndpointConfigurator == null) {
+            this.configurator = ServerEndpointConfigurator.getDefault();
+        } else {
+            this.configurator = serverEndpointConfigurator;
+        }
+        return this;
+    }
+}

==================================================
WsWebSocketContainer.java
new file mode 100644
index 0000000000..5dab0bfe6d
--- /dev/null
+++ b/java/javax/websocket/server/ServerEndpointConfigurator.java
@@ -0,0 +1,101 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package javax.websocket.server;
+
+import java.net.URI;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.ServiceLoader;
+
+import javax.websocket.Extension;
+import javax.websocket.HandshakeResponse;
+
+public abstract class ServerEndpointConfigurator {
+
+    private static volatile ServerEndpointConfigurator defaultImpl = null;
+    private static final Object defaultImplLock = new Object();
+
+    private static final String DEFAULT_IMPL_CLASSNAME =
+            "org.apache.tomcat.websocket.server.DefaultServerEndpointConfigurator";
+
+    static ServerEndpointConfigurator getDefault() {
+        if (defaultImpl == null) {
+            synchronized (defaultImplLock) {
+                if (defaultImpl == null) {
+                    defaultImpl = loadDefault();
+                }
+            }
+        }
+        return defaultImpl;
+    }
+
+
+    private static ServerEndpointConfigurator loadDefault() {
+        ServerEndpointConfigurator result = null;
+
+        ServiceLoader<ServerEndpointConfigurator> serviceLoader =
+                ServiceLoader.load(ServerEndpointConfigurator.class);
+
+        Iterator<ServerEndpointConfigurator> iter = serviceLoader.iterator();
+        while (result == null && iter.hasNext()) {
+            result = iter.next();
+        }
+
+        // Fall-back. Also used by unit tests
+        if (result == null) {
+            try {
+                Class<ServerEndpointConfigurator> clazz =
+                        (Class<ServerEndpointConfigurator>) Class.forName(
+                                DEFAULT_IMPL_CLASSNAME);
+                result = clazz.newInstance();
+            } catch (ClassNotFoundException | InstantiationException |
+                    IllegalAccessException e) {
+                // No options left. Just return null.
+            }
+        }
+        return result;
+    }
+
+    public String getNegotiatedSubprotocol(List<String> supported,
+            List<String> requested) {
+        return getDefault().getNegotiatedSubprotocol(supported, requested);
+    }
+
+
+    public List<Extension> getNegotiatedExtensions(List<Extension> installed,
+            List<Extension> requested) {
+        return getDefault().getNegotiatedExtensions(installed, requested);
+    }
+
+
+    public boolean checkOrigin(String originHeaderValue) {
+        return getDefault().checkOrigin(originHeaderValue);
+    }
+
+
+    public boolean matchesURI(String path, URI requestUri,
+            Map<String, String> templateExpansion) {
+        return getDefault().matchesURI(path, requestUri, templateExpansion);
+    }
+
+
+    public void modifyHandshake(ServerEndpointConfiguration sec,
+            HandshakeRequest request, HandshakeResponse response) {
+        getDefault().modifyHandshake(sec, request, response);
+    }
+}

==================================================
PojoEndpoint.java
index 1207fb1662..281c167df6 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -95,7 +95,8 @@ public class WsWebSocketContainer
         }
         int port = path.getPort();
         Map<String,List<String>> reqHeaders = createRequestHeaders(host, port);
-        clientEndpointConfiguration.beforeRequest(reqHeaders);
+        clientEndpointConfiguration.getClientEndpointConfigurator().
+                beforeRequest(reqHeaders);
 
         ByteBuffer request = createRequest(path.getRawPath(), reqHeaders);
 
@@ -141,7 +142,8 @@ public class WsWebSocketContainer
 
             HandshakeResponse handshakeResponse =
                     processResponse(response, channel);
-            clientEndpointConfiguration.afterResponse(handshakeResponse);
+            clientEndpointConfiguration.getClientEndpointConfigurator().
+                    afterResponse(handshakeResponse);
 
             // Sub-protocol
             List<String> values = handshakeResponse.getHeaders().get(

==================================================
PojoEndpointConfiguration.java
index 44eb1e803a..904c01ea0b 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoEndpoint.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoEndpoint.java
@@ -24,14 +24,20 @@ import javax.websocket.Endpoint;
 import javax.websocket.EndpointConfiguration;
 import javax.websocket.MessageHandler;
 import javax.websocket.Session;
+import javax.websocket.server.ServerEndpointConfiguration;
 
 /**
  * Wrapper class for instances of POJOs annotated with
- * {@link javax.websocket.server.WebSocketEndpoint} so they appear as standard
+ * {@link javax.websocket.server.ServerEndpoint} so they appear as standard
  * {@link Endpoint} instances.
  */
 public class PojoEndpoint extends Endpoint {
 
+    public static final String POJO_PATH_PARAM_KEY =
+            "org.apache.tomcat.websocket.pojo.PojoEndpoint.pathParams";
+    public static final String POJO_METHOD_MAPPING_KEY =
+            "org.apache.tomcat.websocket.pojo.PojoEndpoint.methodMapping";
+
     private Object pojo;
     private Map<String,String> pathParameters;
     private PojoMethodMapping methodMapping;
@@ -40,12 +46,21 @@ public class PojoEndpoint extends Endpoint {
     @Override
     public void onOpen(Session session,
             EndpointConfiguration endpointConfiguration) {
-        PojoEndpointConfiguration pec =
-                (PojoEndpointConfiguration) endpointConfiguration;
 
-        pojo = pec.createPojo();
-        pathParameters = pec.getPathParameters();
-        methodMapping = pec.getMethodMapping();
+        ServerEndpointConfiguration sec =
+                (ServerEndpointConfiguration) endpointConfiguration;
+
+        try {
+            pojo = sec.getEndpointClass().newInstance();
+        } catch (InstantiationException | IllegalAccessException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }
+
+        pathParameters = (Map<String, String>) sec.getUserProperties().get(
+                POJO_PATH_PARAM_KEY);
+        methodMapping = (PojoMethodMapping) sec.getUserProperties().get(
+                POJO_METHOD_MAPPING_KEY);
 
         if (methodMapping.getOnOpen() != null) {
             try {

==================================================
PojoMethodMapping.java
deleted file mode 100644
index d92d01321b..0000000000
--- a/java/org/apache/tomcat/websocket/pojo/PojoEndpointConfiguration.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.apache.tomcat.websocket.pojo;
-
-import java.util.Map;
-
-import javax.websocket.server.DefaultServerConfiguration;
-
-/**
- * Provides the configuration for POJOs annotated at WebSocket endpoints. It
- * provides the means, via casting, of new {@link PojoEndpoint} instances
- * obtaining POJO endpoint specific configuration settings such as the mapping
- * of onXxx calls to POJO methods.
- */
-public class PojoEndpointConfiguration extends DefaultServerConfiguration {
-
-    private final Class<?> pojoClass;
-    private final PojoMethodMapping methodMapping;
-    private final Map<String,String> pathParameters;
-
-
-    public PojoEndpointConfiguration(Class<?> pojoClass,
-            PojoMethodMapping methodMapping,
-            Map<String,String> pathParameters) {
-        super(PojoEndpoint.class, methodMapping.getWsPath());
-        this.pojoClass = pojoClass;
-        this.methodMapping = methodMapping;
-        this.pathParameters = pathParameters;
-    }
-
-
-    public Object createPojo() {
-        try {
-            return pojoClass.newInstance();
-        } catch (InstantiationException | IllegalAccessException e) {
-            throw new IllegalArgumentException(e);
-        }
-    }
-
-
-    public Map<String,String> getPathParameters() {
-        return pathParameters;
-    }
-
-
-    public PojoMethodMapping getMethodMapping() {
-        return methodMapping;
-    }
-}

==================================================
DefaultServerEndpointConfigurator.java
index 2bd1f8322d..be7e81a1ed 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java
@@ -35,7 +35,7 @@ import javax.websocket.server.PathParam;
 
 /**
  * For a POJO class annotated with
- * {@link javax.websocket.server.WebSocketEndpoint}, an instance of this class
+ * {@link javax.websocket.server.ServerEndpoint}, an instance of this class
  * caches the method handlers and the method and parameter information for the
  * onXXX calls.
  */

==================================================
ServerContainerImpl.java
new file mode 100644
index 0000000000..ad5598082a
--- /dev/null
+++ b/java/org/apache/tomcat/websocket/server/DefaultServerEndpointConfigurator.java
@@ -0,0 +1,104 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.websocket.server;
+
+import java.net.URI;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+import javax.websocket.Extension;
+import javax.websocket.HandshakeResponse;
+import javax.websocket.server.HandshakeRequest;
+import javax.websocket.server.ServerEndpointConfiguration;
+import javax.websocket.server.ServerEndpointConfigurator;
+
+public class DefaultServerEndpointConfigurator
+        extends ServerEndpointConfigurator {
+
+    @Override
+    public String getNegotiatedSubprotocol(List<String> supported,
+            List<String> requested) {
+
+        for (String request : requested) {
+            if (supported.contains(request)) {
+                return request;
+            }
+        }
+        return "";
+    }
+
+
+    @Override
+    public List<Extension> getNegotiatedExtensions(List<Extension> installed,
+            List<Extension> requested) {
+
+        List<Extension> result = new ArrayList<>();
+        for (Extension request : requested) {
+            if (installed.contains(request)) {
+                result.add(request);
+            }
+        }
+        return result;
+    }
+
+
+    @Override
+    public boolean checkOrigin(String originHeaderValue) {
+        return true;
+    }
+
+    @Override
+    public boolean matchesURI(String path, URI requestUri,
+            Map<String, String> templateExpansion) {
+
+        String requestPath = requestUri.getPath();
+
+        if (path.indexOf('{') == -1) {
+            // Simple case - not a template
+            return requestPath.equals(path);
+        }
+
+        String servletPath = ServerContainerImpl.getServletPath(path);
+        if (!requestPath.startsWith(servletPath)) {
+            return false;
+        }
+
+        Map<String,String> params;
+        try {
+            params = ServerContainerImpl.getServerContainer().getPathParameters(
+                    servletPath, requestPath.substring(servletPath.length()));
+        } catch (IllegalArgumentException iae) {
+            return false;
+        }
+
+        if (params.size() == 0) {
+            return false;
+        }
+
+        templateExpansion.putAll(params);
+
+        return true;
+    }
+
+    @Override
+    public void modifyHandshake(ServerEndpointConfiguration sec,
+            HandshakeRequest request, HandshakeResponse response) {
+        // NO-OP
+    }
+
+}

==================================================
WsSci.java
index 39abf7bd7f..33340a358f 100644
--- a/java/org/apache/tomcat/websocket/server/ServerContainerImpl.java
+++ b/java/org/apache/tomcat/websocket/server/ServerContainerImpl.java
@@ -16,8 +16,6 @@
  */
 package org.apache.tomcat.websocket.server;
 
-import java.lang.reflect.Constructor;
-import java.lang.reflect.InvocationTargetException;
 import java.util.Collections;
 import java.util.Map;
 import java.util.WeakHashMap;
@@ -26,15 +24,15 @@ import java.util.concurrent.ConcurrentHashMap;
 import javax.servlet.ServletContext;
 import javax.servlet.ServletRegistration;
 import javax.websocket.DeploymentException;
-import javax.websocket.Endpoint;
 import javax.websocket.server.ServerEndpointConfiguration;
+import javax.websocket.server.ServerEndpointConfigurationBuilder;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.res.StringManager;
 import org.apache.tomcat.websocket.WsSession;
 import org.apache.tomcat.websocket.WsWebSocketContainer;
-import org.apache.tomcat.websocket.pojo.PojoEndpointConfiguration;
+import org.apache.tomcat.websocket.pojo.PojoEndpoint;
 import org.apache.tomcat.websocket.pojo.PojoMethodMapping;
 
 /**
@@ -111,35 +109,21 @@ public class ServerContainerImpl extends WsWebSocketContainer {
      * the specified configuration. {@link #setServletContext(ServletContext)}
      * must be called before calling this method.
      *
-     * @param endpointClass The WebSocket server implementation to publish
-     * @param path          The path to publish the implementation at
-     * @param configClass   The configuration to use when creating endpoint
+     * @param config        The configuration to use when creating endpoint
      *                          instances
      * @throws DeploymentException
      */
-    public void publishServer(Class<? extends Endpoint> endpointClass,
-            String path,
-            Class<? extends ServerEndpointConfiguration> configClass)
+    public void publishServer(ServerEndpointConfiguration sec)
             throws DeploymentException {
         if (servletContext == null) {
             throw new IllegalArgumentException(
                     sm.getString("serverContainer.servletContextMissing"));
         }
-        ServerEndpointConfiguration sec = null;
-        try {
-            Constructor<? extends ServerEndpointConfiguration> c =
-                    configClass.getConstructor(Class.class, String.class);
-            sec = c.newInstance(endpointClass, path);
-        } catch (InstantiationException | IllegalAccessException |
-                NoSuchMethodException | SecurityException |
-                IllegalArgumentException | InvocationTargetException e) {
-            throw new DeploymentException(sm.getString("sci.newInstance.fail",
-                    endpointClass.getName()), e);
-        }
+        String path = sec.getPath();
         String servletPath = getServletPath(path);
         if (log.isDebugEnabled()) {
             log.debug(sm.getString("serverContainer.endpointDeploy",
-                    endpointClass.getName(), path,
+                    sec.getEndpointClass(), path,
                     servletContext.getContextPath()));
         }
 
@@ -221,10 +205,13 @@ public class ServerContainerImpl extends WsWebSocketContainer {
         if (pojo != null) {
             PojoMethodMapping methodMapping = pojoMethodMap.get(pojo);
             if (methodMapping != null) {
-                PojoEndpointConfiguration pojoSec =
-                        new PojoEndpointConfiguration(pojo, methodMapping,
-                                pathParameters);
-                return pojoSec;
+                sec = ServerEndpointConfigurationBuilder.create(
+                        pojo, methodMapping.getWsPath()).build();
+                sec.getUserProperties().put(
+                        PojoEndpoint.POJO_PATH_PARAM_KEY, pathParameters);
+                sec.getUserProperties().put(
+                        PojoEndpoint.POJO_METHOD_MAPPING_KEY, methodMapping);
+                return sec;
             }
         }
         throw new IllegalStateException(sm.getString(

==================================================
WsServlet.java
index a8363b6601..15c2070f5c 100644
--- a/java/org/apache/tomcat/websocket/server/WsSci.java
+++ b/java/org/apache/tomcat/websocket/server/WsSci.java
@@ -22,14 +22,14 @@ import javax.servlet.ServletContainerInitializer;
 import javax.servlet.ServletContext;
 import javax.servlet.ServletException;
 import javax.servlet.annotation.HandlesTypes;
-import javax.websocket.server.WebSocketEndpoint;
+import javax.websocket.server.ServerEndpoint;
 
 /**
  * Registers an interest in any class that is annotated with
- * {@link WebSocketEndpoint} so that Endpoint can be published via the WebSocket
+ * {@link ServerEndpoint} so that Endpoint can be published via the WebSocket
  * server.
  */
-@HandlesTypes({WebSocketEndpoint.class})
+@HandlesTypes({ServerEndpoint.class})
 public class WsSci implements ServletContainerInitializer {
 
     @Override
@@ -44,8 +44,8 @@ public class WsSci implements ServletContainerInitializer {
 
         ServerContainerImpl sc = ServerContainerImpl.getServerContainer();
         for (Class<?> clazz : clazzes) {
-            WebSocketEndpoint annotation =
-                    clazz.getAnnotation(WebSocketEndpoint.class);
+            ServerEndpoint annotation =
+                    clazz.getAnnotation(ServerEndpoint.class);
             sc.publishServer(clazz, ctx, annotation.value());
         }
     }

==================================================
TestWsRemoteEndpoint.java
new file mode 100644
index 0000000000..38046d22c9
--- /dev/null
+++ b/res/META-INF/tomcat-websocket.jar/services/javax.websocket.server.ServerEndpointConfigurator
@@ -0,0 +1 @@
+org.apache.tomcat.websocket.server.DefaultServerEndpointConfigurator
\ No newline at end of file

==================================================
TestWsWebSocketContainer.java
index 18e5c98095..530fd856c3 100644
--- a/test/org/apache/tomcat/websocket/TestWsRemoteEndpoint.java
+++ b/test/org/apache/tomcat/websocket/TestWsRemoteEndpoint.java
@@ -22,8 +22,8 @@ import java.util.List;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
+import javax.websocket.ClientEndpointConfigurationBuilder;
 import javax.websocket.ContainerProvider;
-import javax.websocket.DefaultClientConfiguration;
 import javax.websocket.Session;
 import javax.websocket.WebSocketContainer;
 
@@ -65,8 +65,9 @@ public class TestWsRemoteEndpoint extends TomcatBaseTest {
         tomcat.start();
 
         Session wsSession = wsContainer.connectToServer(TesterEndpoint.class,
-                new DefaultClientConfiguration(), new URI("http://localhost:" +
-                        getPort() + TesterEchoServer.Config.PATH_ASYNC));
+                ClientEndpointConfigurationBuilder.create().build(),
+                new URI("http://localhost:" + getPort() +
+                        TesterEchoServer.Config.PATH_ASYNC));
 
         CountDownLatch latch = new CountDownLatch(1);
         wsSession.getUserProperties().put("latch", latch);

==================================================
ChatAnnotation.java
index ae11225d42..b6bbdcad65 100644
--- a/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
+++ b/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
@@ -16,6 +16,7 @@
  */
 package org.apache.tomcat.websocket;
 
+import java.net.SocketTimeoutException;
 import java.net.URI;
 import java.nio.ByteBuffer;
 import java.util.List;
@@ -26,8 +27,8 @@ import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 
 import javax.servlet.ServletContextEvent;
+import javax.websocket.ClientEndpointConfigurationBuilder;
 import javax.websocket.ContainerProvider;
-import javax.websocket.DefaultClientConfiguration;
 import javax.websocket.DeploymentException;
 import javax.websocket.Endpoint;
 import javax.websocket.EndpointConfiguration;
@@ -35,7 +36,7 @@ import javax.websocket.MessageHandler;
 import javax.websocket.OnMessage;
 import javax.websocket.Session;
 import javax.websocket.WebSocketContainer;
-import javax.websocket.server.DefaultServerConfiguration;
+import javax.websocket.server.ServerEndpointConfigurationBuilder;
 
 import org.junit.Assert;
 import org.junit.Test;
@@ -82,8 +83,9 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         WebSocketContainer wsContainer =
                 ContainerProvider.getWebSocketContainer();
         Session wsSession = wsContainer.connectToServer(TesterEndpoint.class,
-                new DefaultClientConfiguration(), new URI("http://localhost:" +
-                        getPort() + TesterEchoServer.Config.PATH_ASYNC));
+                ClientEndpointConfigurationBuilder.create().build(),
+                new URI("http://localhost:" + getPort() +
+                        TesterEchoServer.Config.PATH_ASYNC));
         CountDownLatch latch = new CountDownLatch(1);
         BasicText handler = new BasicText(latch);
         wsSession.addMessageHandler(handler);
@@ -112,8 +114,9 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         WebSocketContainer wsContainer =
                 ContainerProvider.getWebSocketContainer();
         wsContainer.connectToServer(TesterEndpoint.class,
-                new DefaultClientConfiguration(), new URI("ftp://localhost:" +
-                        getPort() + TesterEchoServer.Config.PATH_ASYNC));
+                ClientEndpointConfigurationBuilder.create().build(),
+                new URI("ftp://localhost:" + getPort() +
+                        TesterEchoServer.Config.PATH_ASYNC));
     }
 
 
@@ -130,7 +133,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         WebSocketContainer wsContainer =
                 ContainerProvider.getWebSocketContainer();
         wsContainer.connectToServer(TesterEndpoint.class,
-                new DefaultClientConfiguration(),
+                ClientEndpointConfigurationBuilder.create().build(),
                 new URI("http://" + TesterEchoServer.Config.PATH_ASYNC));
     }
 
@@ -218,8 +221,9 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         tomcat.start();
 
         Session wsSession = wsContainer.connectToServer(TesterEndpoint.class,
-                new DefaultClientConfiguration(), new URI("http://localhost:" +
-                        getPort() + TesterEchoServer.Config.PATH_BASIC));
+                ClientEndpointConfigurationBuilder.create().build(),
+                        new URI("http://localhost:" + getPort() +
+                                TesterEchoServer.Config.PATH_BASIC));
         BasicHandler<?> handler;
         CountDownLatch latch = new CountDownLatch(1);
         wsSession.getUserProperties().put("latch", latch);
@@ -288,8 +292,8 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         tomcat.start();
 
         Session wsSession = wsContainer.connectToServer(TesterEndpoint.class,
-                new DefaultClientConfiguration(), new URI("http://localhost:" +
-                        getPort() + BlockingConfig.PATH));
+                ClientEndpointConfigurationBuilder.create().build(),
+                new URI("http://localhost:" + getPort() + BlockingConfig.PATH));
 
         if (!setTimeoutOnContainer) {
             wsSession.getAsyncRemote().setSendTimeout(TIMEOUT_MS);
@@ -369,8 +373,9 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
         tomcat.start();
 
         Session wsSession = wsContainer.connectToServer(TesterEndpoint.class,
-                new DefaultClientConfiguration(), new URI("http://localhost:" +
-                        getPort() + ConstantTxConfig.PATH));
+                ClientEndpointConfigurationBuilder.create().build(),
+                new URI("http://localhost:" + getPort() +
+                        ConstantTxConfig.PATH));
 
         wsSession.addMessageHandler(new BlockingBinaryHandler());
 
@@ -383,16 +388,19 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
             loops++;
         }
 
-        // Check nothing really bad happened
-        Assert.assertNull(ConstantTxEndpoint.getException());
+        // Check the right exception was thrown
+        Assert.assertNotNull(ConstantTxEndpoint.getException());
+        Assert.assertEquals(ExecutionException.class,
+                ConstantTxEndpoint.getException().getClass());
+        Assert.assertNotNull(ConstantTxEndpoint.getException().getCause());
+        Assert.assertEquals(SocketTimeoutException.class,
+                ConstantTxEndpoint.getException().getCause().getClass());
 
         // Check correct time passed
         Assert.assertTrue(ConstantTxEndpoint.getTimeout() >= TIMEOUT_MS);
 
         // Check the timeout wasn't too long
         Assert.assertTrue(ConstantTxEndpoint.getTimeout() < TIMEOUT_MS*2);
-
-        Assert.assertNotNull(ConstantTxEndpoint.getException());
     }
 
 
@@ -509,8 +517,8 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
             super.contextInitialized(sce);
             ServerContainerImpl sc = ServerContainerImpl.getServerContainer();
             try {
-                sc.publishServer(ConstantTxEndpoint.class, PATH,
-                        DefaultServerConfiguration.class);
+                sc.publishServer(ServerEndpointConfigurationBuilder.create(
+                        ConstantTxEndpoint.class, PATH).build());
                 if (TestWsWebSocketContainer.timoutOnContainer) {
                     sc.setAsyncSendTimeout(TIMEOUT_MS);
                 }
@@ -653,7 +661,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
     private Session connectToEchoServerBasic(WebSocketContainer wsContainer,
             Class<? extends Endpoint> clazz) throws Exception {
         return wsContainer.connectToServer(clazz,
-                new DefaultClientConfiguration(),
+                ClientEndpointConfigurationBuilder.create().build(),
                 new URI("http://localhost:" + getPort() +
                         TesterEchoServer.Config.PATH_BASIC));
     }

==================================================
EchoAnnotation.java
index b6b70df842..f7e1fc6a6f 100644
--- a/webapps/examples/WEB-INF/classes/websocket/chat/ChatAnnotation.java
+++ b/webapps/examples/WEB-INF/classes/websocket/chat/ChatAnnotation.java
@@ -25,11 +25,11 @@ import javax.websocket.OnClose;
 import javax.websocket.OnMessage;
 import javax.websocket.OnOpen;
 import javax.websocket.Session;
-import javax.websocket.server.WebSocketEndpoint;
+import javax.websocket.server.ServerEndpoint;
 
 import util.HTMLFilter;
 
-@WebSocketEndpoint(value = "/websocket/chat")
+@ServerEndpoint(value = "/websocket/chat")
 public class ChatAnnotation {
 
     private static final String GUEST_PREFIX = "Guest";

==================================================
WsConfigListener.java
index acbc10eccf..6a04b469ed 100644
--- a/webapps/examples/WEB-INF/classes/websocket/echo/EchoAnnotation.java
+++ b/webapps/examples/WEB-INF/classes/websocket/echo/EchoAnnotation.java
@@ -22,9 +22,9 @@ import java.nio.ByteBuffer;
 import javax.websocket.OnMessage;
 import javax.websocket.PongMessage;
 import javax.websocket.Session;
-import javax.websocket.server.WebSocketEndpoint;
+import javax.websocket.server.ServerEndpoint;
 
-@WebSocketEndpoint("/websocket/echoAnnotation")
+@ServerEndpoint("/websocket/echoAnnotation")
 public class EchoAnnotation {
 
     @OnMessage

==================================================
SnakeAnnotation.java
index 62782ac838..526d47eda3 100644
--- a/webapps/examples/WEB-INF/classes/websocket/echo/WsConfigListener.java
+++ b/webapps/examples/WEB-INF/classes/websocket/echo/WsConfigListener.java
@@ -19,7 +19,7 @@ package websocket.echo;
 import javax.servlet.ServletContextEvent;
 import javax.servlet.annotation.WebListener;
 import javax.websocket.DeploymentException;
-import javax.websocket.server.DefaultServerConfiguration;
+import javax.websocket.server.ServerEndpointConfigurationBuilder;
 
 import org.apache.tomcat.websocket.server.ServerContainerImpl;
 import org.apache.tomcat.websocket.server.WsListener;
@@ -32,8 +32,8 @@ public class WsConfigListener extends WsListener {
         super.contextInitialized(sce);
         ServerContainerImpl sc = ServerContainerImpl.getServerContainer();
         try {
-            sc.publishServer(EchoEndpoint.class, "/websocket/echoProgrammatic",
-                    DefaultServerConfiguration.class);
+            sc.publishServer(ServerEndpointConfigurationBuilder.create(
+                    EchoEndpoint.class, "/websocket/echoProgrammatic").build());
         } catch (DeploymentException e) {
             throw new IllegalStateException(e);
         }

==================================================
