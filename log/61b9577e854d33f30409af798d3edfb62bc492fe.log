61b9577e854d33f30409af798d3edfb62bc492fe
==================================================
Revert r1816617
==================================================
Remy Maucherat
==================================================
Wed Nov 29 12:29:18 2017 +0000
==================================================
Context.java
index 3d0551112d..83704f6108 100644
--- a/build.xml
+++ b/build.xml
@@ -1594,7 +1594,6 @@
               excludeFilter="res/findbugs/filter-false-positives.xml" >
       <sourcePath path="${basedir}/java" />
       <class location="${tomcat.classes}" />
-      <class location="${test.classes}" />
       <auxClasspath>
         <fileset file="${jdt.jar}" />
         <fileset file="${ant.core.lib}" />

==================================================
ApplicationContext.java
index edfbf0a464..349b0006a1 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -347,20 +347,6 @@ public interface Context extends Container, ContextBind {
     public void setCrossContext(boolean crossContext);
 
 
-    /**
-     * Get the best effort path for mapping.
-     * @return the default context path
-     */
-    public String getDefaultContextPath();
-
-
-    /**
-     * Return the best effort path for mapping.
-     * @param defaultContextPath The default context path
-     */
-    public void setDefaultContextPath(String defaultContextPath);
-
-
     /**
      * Return the deny-uncovered-http-methods flag for this web application.
      *

==================================================
ApplicationDispatcher.java
index 8907669a3b..09d611059d 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -287,11 +287,7 @@ public class ApplicationContext implements ServletContext {
 
     @Override
     public String getContextPath() {
-        if (Globals.STRICT_SERVLET_COMPLIANCE && context.getDefaultContextPath() != null) {
-            return context.getDefaultContextPath();
-        } else {
-            return context.getPath();
-        }
+        return context.getPath();
     }
 
 

==================================================
ApplicationMapping.java
index a1062ae153..285d7b0429 100644
--- a/java/org/apache/catalina/core/ApplicationDispatcher.java
+++ b/java/org/apache/catalina/core/ApplicationDispatcher.java
@@ -626,9 +626,7 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
             wrequest.setQueryString(queryString);
             wrequest.setQueryParams(queryString);
         }
-        if (!Globals.STRICT_SERVLET_COMPLIANCE) {
-            wrequest.setMapping(mapping);
-        }
+        wrequest.setMapping(mapping);
 
         invoke(state.outerRequest, state.outerResponse, state);
     }

==================================================
StandardContext.java
index 379903ce8f..c6e4f0fedb 100644
--- a/java/org/apache/catalina/core/ApplicationMapping.java
+++ b/java/org/apache/catalina/core/ApplicationMapping.java
@@ -19,7 +19,6 @@ package org.apache.catalina.core;
 import javax.servlet.http.HttpServletMapping;
 import javax.servlet.http.MappingMatch;
 
-import org.apache.catalina.Globals;
 import org.apache.catalina.mapper.MappingData;
 
 public class ApplicationMapping {
@@ -48,8 +47,7 @@ public class ApplicationMapping {
                         mapping = new MappingImpl("", "", mappingData.matchType, servletName);
                         break;
                     case DEFAULT:
-                        String match = Globals.STRICT_SERVLET_COMPLIANCE ? "default" : "";
-                        mapping = new MappingImpl(match, "/", mappingData.matchType, servletName);
+                        mapping = new MappingImpl("", "/", mappingData.matchType, servletName);
                         break;
                     case EXACT:
                         mapping = new MappingImpl(mappingData.wrapperPath.toString().substring(1),

==================================================
MapperListener.java
index 9f53972391..fea74eb1f9 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -342,12 +342,6 @@ public class StandardContext extends ContainerBase
     private String displayName = null;
 
 
-    /**
-     * Best effort mapping path.
-     */
-    private String defaultContextPath;
-
-
     /**
      * Override the default context xml location.
      */
@@ -1604,21 +1598,6 @@ public class StandardContext extends ContainerBase
 
     }
 
-    @Override
-    public String getDefaultContextPath() {
-        return defaultContextPath;
-    }
-
-    /**
-     * Set the best effort path for mapping.
-     *
-     * @param defaultContextPath The default context path
-     */
-    @Override
-    public void setDefaultContextPath(String defaultContextPath) {
-        this.defaultContextPath = defaultContextPath;
-    }
-
     public String getDefaultContextXml() {
         return defaultContextXml;
     }

==================================================
ContextConfig.java
index 108a870641..b2a97d6c43 100644
--- a/java/org/apache/catalina/mapper/MapperListener.java
+++ b/java/org/apache/catalina/mapper/MapperListener.java
@@ -24,7 +24,6 @@ import org.apache.catalina.ContainerEvent;
 import org.apache.catalina.ContainerListener;
 import org.apache.catalina.Context;
 import org.apache.catalina.Engine;
-import org.apache.catalina.Globals;
 import org.apache.catalina.Host;
 import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleEvent;
@@ -365,14 +364,11 @@ public class MapperListener extends LifecycleMBeanBase
      */
     private void registerContext(Context context) {
 
-        Host host = (Host)context.getParent();
-        String contextPath = Globals.STRICT_SERVLET_COMPLIANCE ? context.getDefaultContextPath() : null;
-        if (contextPath == null || host.findChild(contextPath) != null) {
-            contextPath = context.getPath();
-        }
+        String contextPath = context.getPath();
         if ("/".equals(contextPath)) {
             contextPath = "";
         }
+        Host host = (Host)context.getParent();
 
         WebResourceRoot resources = context.getResources();
         String[] welcomeFiles = context.findWelcomeFiles();
@@ -403,11 +399,7 @@ public class MapperListener extends LifecycleMBeanBase
      */
     private void unregisterContext(Context context) {
 
-        Host host = (Host)context.getParent();
-        String contextPath = Globals.STRICT_SERVLET_COMPLIANCE ? context.getDefaultContextPath() : null;
-        if (contextPath == null || host.findChild(contextPath) != null) {
-            contextPath = context.getPath();
-        }
+        String contextPath = context.getPath();
         if ("/".equals(contextPath)) {
             contextPath = "";
         }

==================================================
FailedContext.java
index 0dcfe0a02d..2d455c796e 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -1257,7 +1257,6 @@ public class ContextConfig implements LifecycleListener {
         for (Entry<String, String> entry : webxml.getContextParams().entrySet()) {
             context.addParameter(entry.getKey(), entry.getValue());
         }
-        context.setDefaultContextPath(webxml.getDefaultContextPath());
         context.setDenyUncoveredHttpMethods(
                 webxml.getDenyUncoveredHttpMethods());
         context.setDisplayName(webxml.getDisplayName());

==================================================
Http2UpgradeHandler.java
index 21c5c2f6be..5df803fa4e 100644
--- a/java/org/apache/catalina/startup/FailedContext.java
+++ b/java/org/apache/catalina/startup/FailedContext.java
@@ -371,11 +371,6 @@ public class FailedContext extends LifecycleMBeanBase implements Context {
     @Override
     public void setAltDDName(String altDDName) { /* NO-OP */ }
 
-    @Override
-    public String getDefaultContextPath() { return null; }
-    @Override
-    public void setDefaultContextPath(String defaultContextPath) { /* NO-OP */ }
-
     @Override
     public boolean getDenyUncoveredHttpMethods() { return false; }
     @Override

==================================================
WebRuleSet.java
index 4c9d406493..5de0eba756 100644
--- a/java/org/apache/tomcat/util/descriptor/web/LocalStrings.properties
+++ b/java/org/apache/tomcat/util/descriptor/web/LocalStrings.properties
@@ -39,7 +39,6 @@ webXml.duplicateResourceRef=Duplicate resource-ref name [{0}]
 webXml.duplicateServletMapping=The servlets named [{0}] and [{1}] are both mapped to the url-pattern [{2}] which is not permitted
 webXml.duplicateTaglibUri=Duplicate tag library URI [{0}]
 webXml.reservedName=A web.xml file was detected using a reserved name [{0}]. The name element will be ignored for this fragment.
-webXml.mergeConflictDefaultContextPath=The default context path was defined in multiple fragments with different values including fragment with name [{0}] located at [{1}]
 webXml.mergeConflictDisplayName=The display name was defined in multiple fragments with different values including fragment with name [{0}] located at [{1}]
 webXml.mergeConflictFilter=The Filter [{0}] was defined inconsistently in multiple fragments including fragment with name [{1}] located at [{2}]
 webXml.mergeConflictLoginConfig=A LoginConfig was defined inconsistently in multiple fragments including fragment with name [{0}] located at [{1}]

==================================================
WebXml.java
index c4d122bd5b..28478bf72e 100644
--- a/java/org/apache/tomcat/util/descriptor/web/WebRuleSet.java
+++ b/java/org/apache/tomcat/util/descriptor/web/WebRuleSet.java
@@ -203,9 +203,6 @@ public class WebRuleSet implements RuleSet {
         digester.addCallParam(fullPrefix + "/context-param/param-name", 0);
         digester.addCallParam(fullPrefix + "/context-param/param-value", 1);
 
-        digester.addCallMethod(fullPrefix + "/default-context-path",
-                "setDefaultContextPath", 0);
-
         digester.addCallMethod(fullPrefix + "/display-name",
                                "setDisplayName", 0);
 

==================================================
TesterContext.java
index 5022cee626..636883cc4b 100644
--- a/java/org/apache/tomcat/util/descriptor/web/WebXml.java
+++ b/java/org/apache/tomcat/util/descriptor/web/WebXml.java
@@ -231,13 +231,6 @@ public class WebXml extends XmlEncodingBase implements DocumentProperties.Charse
     // - description
     // - icon
 
-    // default-context-path
-    private String defaultContextPath = null;
-    public String getDefaultContextPath() { return defaultContextPath; }
-    public void setDefaultContextPath(String defaultContextPath) {
-        this.defaultContextPath = defaultContextPath;
-    }
-
     // display-name - TODO should support multiple with language
     private String displayName = null;
     public String getDisplayName() { return displayName; }
@@ -1431,24 +1424,6 @@ public class WebXml extends XmlEncodingBase implements DocumentProperties.Charse
         }
         contextParams.putAll(temp.getContextParams());
 
-        if (defaultContextPath == null) {
-            for (WebXml fragment : fragments) {
-                String value = fragment.getDefaultContextPath();
-                if (value != null) {
-                    if (temp.getDefaultContextPath() == null) {
-                        temp.setDefaultContextPath(value);
-                    } else {
-                        log.error(sm.getString(
-                                "webXml.mergeConflictDefaultContextPath",
-                                fragment.getName(),
-                                fragment.getURL()));
-                        return false;
-                    }
-                }
-            }
-            defaultContextPath = temp.getDefaultContextPath();
-        }
-
         if (displayName == null) {
             for (WebXml fragment : fragments) {
                 String value = fragment.getDisplayName();

==================================================
