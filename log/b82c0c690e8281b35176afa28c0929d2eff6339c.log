b82c0c690e8281b35176afa28c0929d2eff6339c
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55691
==================================================
Mark Emlyn
==================================================
Mon Oct 28 20:59:41 2013 +0000
==================================================
ArrayELResolver.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55691
ArrayELResolver needs to handle the case where the base object is an array of primitives.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1536520 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Util.java
index 98fc588be3..1fb4dc8301 100644
--- a/java/javax/el/ArrayELResolver.java
+++ b/java/javax/el/ArrayELResolver.java
@@ -88,9 +88,8 @@ public class ArrayELResolver extends ELResolver {
 
             int idx = coerce(property);
             checkBounds(base, idx);
-            if (value != null &&
-                    !base.getClass().getComponentType().isAssignableFrom(
-                            value.getClass())) {
+            if (value != null && !Util.isAssignableFrom(value.getClass(),
+                    base.getClass().getComponentType())) {
                 throw new ClassCastException(Util.message(context,
                         "objectNotAssignable", value.getClass().getName(),
                         base.getClass().getComponentType().getName()));

==================================================
TestArrayELResolver.java
index eb1585a0ec..44dd460433 100644
--- a/java/javax/el/Util.java
+++ b/java/javax/el/Util.java
@@ -438,7 +438,7 @@ class Util {
      * This method duplicates code in org.apache.el.util.ReflectionUtil. When
      * making changes keep the code in sync.
      */
-    private static boolean isAssignableFrom(Class<?> src, Class<?> target) {
+    static boolean isAssignableFrom(Class<?> src, Class<?> target) {
         // src will always be an object
         // Short-cut. null is always assignable to an object and in EL null
         // can always be coerced to a valid value for a primitive

==================================================
