0e4ee154c254139b07e7898d724369c0b2c4f2a5
==================================================
Ensure only \${ and \#{ are treated as escapes for ${ and #{ rather than \$ and \# being treated as escapes for $ and # when processing literal expressions in expression language.
==================================================
Mark Emlyn
==================================================
Fri Oct 24 16:28:48 2014 +0000
==================================================
AstLiteralExpression.java
Ensure only \${ and \#{ are treated as escapes for ${ and #{ rather than \$ and \# being treated as escapes for $ and # when processing literal expressions in expression language.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1634089 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ELParser.java
index c0557f8648..7244df129a 100644
--- a/java/org/apache/el/parser/AstLiteralExpression.java
+++ b/java/org/apache/el/parser/AstLiteralExpression.java
@@ -51,9 +51,10 @@ public final class AstLiteralExpression extends SimpleNode {
         StringBuilder buf = new StringBuilder(size);
         for (int i = 0; i < size; i++) {
             char c = image.charAt(i);
-            if (c == '\\' && i + 1 < size) {
+            if (c == '\\' && i + 2 < size) {
                 char c1 = image.charAt(i + 1);
-                if (c1 == '#' || c1 == '$')  {
+                char c2 = image.charAt(i + 2);
+                if ((c1 == '#' || c1 == '$') && c2 == '{')  {
                     c = c1;
                     i++;
                 }

==================================================
JspDocumentParser.java
index 8812f5a7d6..e0965aafb3 100644
--- a/java/org/apache/jasper/compiler/ELParser.java
+++ b/java/org/apache/jasper/compiler/ELParser.java
@@ -196,58 +196,39 @@ public class ELParser {
 
     /**
      * Skip until an EL expression ('${' || '#{') is reached, allowing escape
-     * sequences '\\' and '\$' and '\#'.
+     * sequences '\$' and '\#'.
      *
      * @return The text string up to the EL expression
      */
     private String skipUntilEL() {
-        char prev = 0;
         StringBuilder buf = new StringBuilder();
         while (hasNextChar()) {
             char ch = nextChar();
-            if (prev == '\\') {
-                if (ch == '$' || (!isDeferredSyntaxAllowedAsLiteral && ch == '#')) {
-                    prev = 0;
-                    buf.append(ch);
-                    continue;
-                } else if (ch == '\\') {
-                    // Not an escape (this time).
-                    // Optimisation - no need to set prev as it is unchanged
-                    buf.append('\\');
-                    continue;
+            if (ch == '\\') {
+                // Is this the start of a "\${" or "\#{" escape sequence?
+                char p0 = peek(0);
+                char p1 = peek(1);
+                if ((p0 == '$' || (p0 == '#' && !isDeferredSyntaxAllowedAsLiteral)) && p1 == '{') {
+                    buf.append(nextChar());
+                    buf.append(nextChar());
                 } else {
-                    // Not an escape
-                    prev = 0;
-                    buf.append('\\');
                     buf.append(ch);
-                    continue;
-                }
-            } else if (prev == '$'
-                    || (!isDeferredSyntaxAllowedAsLiteral && prev == '#')) {
-                if (ch == '{') {
-                    this.type = prev;
-                    prev = 0;
-                    break;
                 }
-                buf.append(prev);
-                prev = 0;
-            }
-            if (ch == '\\' || ch == '$'
-                    || (!isDeferredSyntaxAllowedAsLiteral && ch == '#')) {
-                prev = ch;
+            } else if ((ch == '$' || (ch == '#' && !isDeferredSyntaxAllowedAsLiteral)) &&
+                    peek(0) == '{') {
+                this.type = ch;
+                nextChar();
+                break;
             } else {
                 buf.append(ch);
             }
         }
-        if (prev != 0) {
-            buf.append(prev);
-        }
         return buf.toString();
     }
 
 
     /**
-     * Escape '\\', '$' and '#', inverting the unescaping performed in
+     * Escape '$' and '#', inverting the unescaping performed in
      * {@link #skipUntilEL()}.
      *
      * @param input Non-EL input to be escaped
@@ -438,6 +419,14 @@ public class ELParser {
         return expression.charAt(index++);
     }
 
+    private char peek(int advance) {
+        int target = index + advance;
+        if (target >= expression.length()) {
+            return (char) -1;
+        }
+        return expression.charAt(target);
+    }
+
     private int getIndex() {
         return index;
     }

==================================================
Parser.java
index ac08064e39..b68a9a3351 100644
--- a/java/org/apache/jasper/compiler/JspDocumentParser.java
+++ b/java/org/apache/jasper/compiler/JspDocumentParser.java
@@ -605,7 +605,11 @@ class JspDocumentParser
                         lastCh = ch;
                     }
                 } else if (lastCh == '\\' && (ch == '$' || ch == '#')) {
-                    if (pageInfo.isELIgnored()) {
+                    if (i + 1 < charBuffer.length() && charBuffer.charAt(i + 1) == '{') {
+                        if (pageInfo.isELIgnored()) {
+                            ttext.write('\\');
+                        }
+                    } else {
                         ttext.write('\\');
                     }
                     ttext.write(ch);

==================================================
TestELEvaluation.java
index b6ed201b1a..cab5c4eb0d 100644
--- a/java/org/apache/jasper/compiler/Parser.java
+++ b/java/org/apache/jasper/compiler/Parser.java
@@ -1275,7 +1275,7 @@ class Parser implements TagConstants {
 
     /*
      * Parse for a template text string until '<' or "${" or "#{" is encountered,
-     * recognizing escape sequences "<\%", "\$", and "\#".
+     * recognizing escape sequences "<\%", "\${", and "\#{".
      */
     private void parseTemplateText(Node parent) throws JasperException {
 
@@ -1292,39 +1292,53 @@ class Parser implements TagConstants {
         }
 
         while (reader.hasMoreInput()) {
-            int prev = ch;
             ch = reader.nextChar();
             if (ch == '<') {
-                reader.pushChar();
-                break;
-            } else if ((ch == '$' || ch == '#') && !pageInfo.isELIgnored()) {
-                if (!reader.hasMoreInput()) {
-                    ttext.write(ch);
+                // Check for "<\%"
+                if (reader.nextChar() == '\\') {
+                    if (reader.nextChar() == '%') {
+                        ttext.append('<');
+                        ttext.append('%');
+                    } else {
+                        reader.pushChar();
+                        reader.pushChar();
+                        reader.pushChar();
+                        break;
+                    }
+                } else {
+                    reader.pushChar();
+                    reader.pushChar();
                     break;
                 }
+            } else if (ch == '\\' && !pageInfo.isELIgnored()) {
+                int next = reader.nextChar();
+                if (next == '$' || next == '#') {
+                    if (reader.nextChar() == '{') {
+                        ttext.write(next);
+                        ttext.append('{');
+                    } else {
+                        ttext.append('\\');
+                        ttext.write(next);
+                        reader.pushChar();
+                    }
+                } else {
+                    ttext.append('\\');
+                    reader.pushChar();
+                }
+            } else if ((ch == '$' || ch == '#') && !pageInfo.isELIgnored()) {
                 if (reader.nextChar() == '{') {
                     reader.pushChar();
                     reader.pushChar();
                     break;
+                } else {
+                    reader.pushChar();
+                    ttext.write(ch);
                 }
+            } else {
                 ttext.write(ch);
-                reader.pushChar();
-                continue;
-            } else if (ch == '\\') {
-                if (!reader.hasMoreInput()) {
-                    ttext.write('\\');
-                    break;
-                }
-                char next = (char) reader.peekChar();
-                // Looking for \% or \$ or \#
-                if ((prev == '<' && next == '%') ||
-                        ((next == '$' || next == '#') &&
-                                !pageInfo.isELIgnored())) {
-                    ch = reader.nextChar();
-                }
             }
-            ttext.write(ch);
         }
+
         @SuppressWarnings("unused")
         Node unused = new Node.TemplateText(ttext.toString(), start, parent);
     }

==================================================
TestELInJsp.java
index 4d7c28c1d3..5d988ee610 100644
--- a/test/org/apache/el/TestELEvaluation.java
+++ b/test/org/apache/el/TestELEvaluation.java
@@ -110,19 +110,19 @@ public class TestELEvaluation {
         assertEquals("\\", evaluateExpression("\\"));
         assertEquals("$", evaluateExpression("$"));
         assertEquals("#", evaluateExpression("#"));
-        assertEquals("$", evaluateExpression("\\$"));
-        assertEquals("#", evaluateExpression("\\#"));
-        assertEquals("\\$", evaluateExpression("\\\\$"));
-        assertEquals("\\#", evaluateExpression("\\\\#"));
+        assertEquals("\\$", evaluateExpression("\\$"));
+        assertEquals("\\#", evaluateExpression("\\#"));
+        assertEquals("\\\\$", evaluateExpression("\\\\$"));
+        assertEquals("\\\\#", evaluateExpression("\\\\#"));
         assertEquals("${", evaluateExpression("\\${"));
         assertEquals("#{", evaluateExpression("\\#{"));
         assertEquals("\\${", evaluateExpression("\\\\${"));
         assertEquals("\\#{", evaluateExpression("\\\\#{"));
 
-        // '\' is only an escape for '$' and '#'.
-        assertEquals("$", evaluateExpression("\\$"));
+        // '\' is only an escape for '${' and '#{'.
+        assertEquals("\\$", evaluateExpression("\\$"));
         assertEquals("${", evaluateExpression("\\${"));
-        assertEquals("$a", evaluateExpression("\\$a"));
+        assertEquals("\\$a", evaluateExpression("\\$a"));
         assertEquals("\\a", evaluateExpression("\\a"));
         assertEquals("\\\\", evaluateExpression("\\\\"));
     }

==================================================
