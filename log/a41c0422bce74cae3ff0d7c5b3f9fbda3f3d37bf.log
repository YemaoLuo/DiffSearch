a41c0422bce74cae3ff0d7c5b3f9fbda3f3d37bf
==================================================
Pull up waitingRequests.
==================================================
Mark Emlyn
==================================================
Tue Jun 10 09:37:39 2014 +0000
==================================================
AbstractEndpoint.java
Pull up waitingRequests.
NIO2 used a ConcurrentHashMap whereas BIO and APR/native used a Queue. Switch to ConcurrentHashMap for all since what we really want here is a Set (and there isn't a ConcurrentHashSet implementation).

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1601583 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AprEndpoint.java
index bdf05e3e9c..2250da02a0 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -24,6 +24,7 @@ import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.StringTokenizer;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
 
@@ -974,5 +975,7 @@ public abstract class AbstractEndpoint<S> {
         }
     }
 
+    protected ConcurrentHashMap<SocketWrapper<S>, SocketWrapper<S>> waitingRequests =
+            new ConcurrentHashMap<>();
 }
 

==================================================
JIoEndpoint.java
index 6a3030825e..c87a8777c4 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -14,7 +14,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package org.apache.tomcat.util.net;
 
 import java.util.ArrayList;
@@ -22,7 +21,6 @@ import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.Executor;
 import java.util.concurrent.RejectedExecutionException;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -95,9 +93,6 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
     protected long sslContext = 0;
 
 
-    protected ConcurrentLinkedQueue<SocketWrapper<Long>> waitingRequests =
-            new ConcurrentLinkedQueue<>();
-
     private final Map<Long,AprSocketWrapper> connections = new ConcurrentHashMap<>();
 
     // ------------------------------------------------------------ Constructor
@@ -886,7 +881,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
             // result of calling AsyncContext.dispatch() from a non-container
             // thread
             synchronized (socket) {
-                if (waitingRequests.remove(socket)) {
+                if (waitingRequests.remove(socket) != null) {
                     SocketProcessor proc = new SocketProcessor(socket, status);
                     Executor executor = getExecutor();
                     if (dispatch && executor != null) {
@@ -1075,8 +1070,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
                     // Ignore
                 }
                 long now = System.currentTimeMillis();
-                Iterator<SocketWrapper<Long>> sockets =
-                    waitingRequests.iterator();
+                Iterator<SocketWrapper<Long>> sockets = waitingRequests.keySet().iterator();
                 while (sockets.hasNext()) {
                     SocketWrapper<Long> socket = sockets.next();
                     if (socket.isAsync()) {
@@ -2394,7 +2388,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
                     } else if (state == Handler.SocketState.LONG) {
                         socket.access();
                         if (socket.isAsync()) {
-                            waitingRequests.add(socket);
+                            waitingRequests.put(socket, socket);
                         }
                     }
                 }
@@ -2456,7 +2450,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
             } else if (state == Handler.SocketState.LONG) {
                 socket.access();
                 if (socket.isAsync()) {
-                    waitingRequests.add(socket);
+                    waitingRequests.put(socket, socket);
                 }
             } else if (state == Handler.SocketState.ASYNC_END) {
                 socket.access();

==================================================
Nio2Endpoint.java
index 6adafcab51..e9a5ef4b99 100644
--- a/java/org/apache/tomcat/util/net/JIoEndpoint.java
+++ b/java/org/apache/tomcat/util/net/JIoEndpoint.java
@@ -14,7 +14,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package org.apache.tomcat.util.net;
 
 import java.io.IOException;
@@ -23,7 +22,6 @@ import java.net.ServerSocket;
 import java.net.Socket;
 import java.net.SocketException;
 import java.util.Iterator;
-import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.Executor;
 import java.util.concurrent.RejectedExecutionException;
 
@@ -164,8 +162,7 @@ public class JIoEndpoint extends AbstractEndpoint<Socket> {
                     // Ignore
                 }
                 long now = System.currentTimeMillis();
-                Iterator<SocketWrapper<Socket>> sockets =
-                    waitingRequests.iterator();
+                Iterator<SocketWrapper<Socket>> sockets = waitingRequests.keySet().iterator();
                 while (sockets.hasNext()) {
                     SocketWrapper<Socket> socket = sockets.next();
                     if (socket.isAsync()) {
@@ -347,7 +344,7 @@ public class JIoEndpoint extends AbstractEndpoint<Socket> {
                         launch = true;
                     } else if (state == SocketState.LONG) {
                         socket.access();
-                        waitingRequests.add(socket);
+                        waitingRequests.put(socket, socket);
                     }
                 } finally {
                     if (launch) {
@@ -562,7 +559,7 @@ public class JIoEndpoint extends AbstractEndpoint<Socket> {
             // result of calling AsyncContext.dispatch() from a non-container
             // thread
             synchronized (socket) {
-                if (waitingRequests.remove(socket)) {
+                if (waitingRequests.remove(socket) != null) {
                     SocketProcessor proc = new SocketProcessor(socket,status);
                     Executor executor = getExecutor();
                     if (dispatch && executor != null) {
@@ -586,9 +583,6 @@ public class JIoEndpoint extends AbstractEndpoint<Socket> {
         }
     }
 
-    protected ConcurrentLinkedQueue<SocketWrapper<Socket>> waitingRequests =
-            new ConcurrentLinkedQueue<>();
-
     @Override
     protected Log getLog() {
         return log;

==================================================
