15eb898919a11b025c26101bf4cd9588ee3e0dbc
==================================================
62737: Fix rewrite substitutions parsing of {} nesting.
==================================================
Remy Maucherat
==================================================
Wed Sep 19 14:25:24 2018 +0000
==================================================
Substitution.java
62737: Fix rewrite substitutions parsing of {} nesting.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1841347 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestRewriteValve.java
index 9dd4f5d9c8..58ad20e1d8 100644
--- a/java/org/apache/catalina/valves/rewrite/Substitution.java
+++ b/java/org/apache/catalina/valves/rewrite/Substitution.java
@@ -176,9 +176,9 @@ public class Substitution {
                     // $: map lookup as ${mapname:key|default}
                     MapElement newElement = new MapElement();
                     int open = sub.indexOf('{', dollarPos);
-                    int colon = sub.indexOf(':', dollarPos);
-                    int def = sub.indexOf('|', dollarPos);
-                    int close = sub.indexOf('}', dollarPos);
+                    int colon = findMatchingColonOrBar(true, sub, open);
+                    int def = findMatchingColonOrBar(false, sub, open);
+                    int close = findMatchingBrace(sub, open);
                     if (!(-1 < open && open < colon && colon < close)) {
                         throw new IllegalArgumentException(sub);
                     }
@@ -228,8 +228,8 @@ public class Substitution {
                     // %: server variable as %{variable}
                     SubstitutionElement newElement = null;
                     int open = sub.indexOf('{', percentPos);
-                    int colon = sub.indexOf(':', percentPos);
-                    int close = sub.indexOf('}', percentPos);
+                    int colon = findMatchingColonOrBar(true, sub, open);
+                    int close = findMatchingBrace(sub, open);
                     if (!(-1 < open && open < close)) {
                         throw new IllegalArgumentException(sub);
                     }
@@ -263,6 +263,45 @@ public class Substitution {
 
     }
 
+    private static int findMatchingBrace(String sub, int start) {
+        int nesting = 1;
+        for (int i = start + 1; i < sub.length(); i++) {
+            char c = sub.charAt(i);
+            if (c == '{') {
+                char previousChar = sub.charAt(i-1);
+                if (previousChar == '$' || previousChar == '%') {
+                    nesting++;
+                }
+            } else if (c == '}') {
+                nesting--;
+                if (nesting == 0) {
+                    return i;
+                }
+            }
+        }
+        return -1;
+    }
+
+    private static int findMatchingColonOrBar(boolean colon, String sub, int start) {
+        int nesting = 0;
+        for (int i = start + 1; i < sub.length(); i++) {
+            char c = sub.charAt(i);
+            if (c == '{') {
+                char previousChar = sub.charAt(i-1);
+                if (previousChar == '$' || previousChar == '%') {
+                    nesting++;
+                }
+            } else if (c == '}') {
+                nesting--;
+            } else if (colon ? c == ':' : c =='|') {
+                if (nesting == 0) {
+                    return i;
+                }
+            }
+        }
+        return -1;
+    }
+
     /**
      * Evaluate the substitution based on the context.
      * @param rule corresponding matched rule

==================================================
