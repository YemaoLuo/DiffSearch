d28c1b9d9de7edfb69ad9149137627d28da6538b
==================================================
Apply patch 03 from jboynes to improve cookie handling.
==================================================
Mark Emlyn
==================================================
Wed May 21 12:31:10 2014 +0000
==================================================
Cookie.java
Apply patch 03 from jboynes to improve cookie handling.
Allow V0 cookies to use names that start with $.
Add a (currently unused) RFC6265 Cookie validator.
Patch should be safe since it relaxes the current behaviour.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1596559 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestCookie.java
index b1421523c0..924ba836dd 100644
--- a/java/javax/servlet/http/Cookie.java
+++ b/java/javax/servlet/http/Cookie.java
@@ -384,7 +384,7 @@ public class Cookie implements Cloneable, Serializable {
 
 class CookieNameValidator {
     private static final String LSTRING_FILE = "javax.servlet.http.LocalStrings";
-    private static final ResourceBundle lStrings = ResourceBundle.getBundle(LSTRING_FILE);
+    protected static final ResourceBundle lStrings = ResourceBundle.getBundle(LSTRING_FILE);
 
     protected final BitSet allowed;
 
@@ -401,7 +401,7 @@ class CookieNameValidator {
         if (name == null || name.length() == 0) {
             throw new IllegalArgumentException(lStrings.getString("err.cookie_name_blank"));
         }
-        if (!isToken(name) || name.startsWith("$")) {
+        if (!isToken(name)) {
             String errMsg = lStrings.getString("err.cookie_name_is_token");
             throw new IllegalArgumentException(MessageFormat.format(errMsg, name));
         }
@@ -428,10 +428,10 @@ class NetscapeValidator extends CookieNameValidator {
     }
 }
 
-class RFC2109Validator extends CookieNameValidator {
+class RFC6265Validator extends CookieNameValidator {
     private static final String RFC2616_SEPARATORS = "()<>@,;:\\\"/[]?={} \t";
 
-    RFC2109Validator() {
+    RFC6265Validator() {
         super(RFC2616_SEPARATORS);
 
         // special treatment to allow for FWD_SLASH_IS_SEPARATOR property
@@ -447,3 +447,17 @@ class RFC2109Validator extends CookieNameValidator {
         }
     }
 }
+
+class RFC2109Validator extends RFC6265Validator {
+    RFC2109Validator() {
+    }
+
+    @Override
+    void validate(String name) {
+        super.validate(name);
+        if (name.charAt(0) == '$') {
+            String errMsg = lStrings.getString("err.cookie_name_is_token");
+            throw new IllegalArgumentException(MessageFormat.format(errMsg, name));
+        }
+    }
+}

==================================================
TestCookieRFC2109Validator.java
index a015610041..0b34d02458 100644
--- a/test/javax/servlet/http/TestCookie.java
+++ b/test/javax/servlet/http/TestCookie.java
@@ -66,11 +66,11 @@ public class TestCookie {
         Assert.assertEquals(0, cookie.getVersion());
     }
 
-
-    @Test(expected = IllegalArgumentException.class)
-    public void leadingDollar() {
-        @SuppressWarnings("unused")
-        Cookie c = new Cookie("$Version", null);
+    @Test()
+    public void defaultImpliesNetscape() {
+        // $Foo is allowed by Netscape but not by RFC2109
+        Cookie cookie = new Cookie("$Foo", null);
+        Assert.assertEquals("$Foo", cookie.getName());
     }
 
     @Test

==================================================
TestCookieRFC6265Validator.java
index 9b2252af65..18bc062bc9 100644
--- a/test/javax/servlet/http/TestCookieRFC2109Validator.java
+++ b/test/javax/servlet/http/TestCookieRFC2109Validator.java
@@ -32,4 +32,9 @@ public class TestCookieRFC2109Validator {
     public void actualCharactersAllowedInName() {
         TestCookie.checkCharInName(validator, TestCookie.TOKEN);
     }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void leadingDollar() {
+        validator.validate("$Version");
+    }
 }

==================================================
