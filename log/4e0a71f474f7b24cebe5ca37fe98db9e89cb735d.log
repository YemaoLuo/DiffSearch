4e0a71f474f7b24cebe5ca37fe98db9e89cb735d
==================================================
Fix a couple of issues with the UserDataHelper
==================================================
Mark Emlyn
==================================================
Thu Feb 9 16:08:49 2012 +0000
==================================================
DirectJDKLog.java
index ab95348ea3..3cbd4b13ca 100644
--- a/build.xml
+++ b/build.xml
@@ -1248,7 +1248,6 @@
       </fileset>
       <fileset dir="${tomcat.classes}">
         <include name="org/apache/juli/*" />
-        <include name="org/apache/juli/logging/UserDataHelper*.class"/>
         <!-- Javadoc and i18n exclusions -->
         <exclude name="**/package.html" />
         <exclude name="**/LocalStrings_*" />

==================================================
Cookies.java
index 09257010f6..15ea405125 100644
--- a/java/org/apache/juli/logging/DirectJDKLog.java
+++ b/java/org/apache/juli/logging/DirectJDKLog.java
@@ -172,26 +172,13 @@ class DirectJDKLog implements Log {
             Throwable dummyException=new Throwable();
             StackTraceElement locations[]=dummyException.getStackTrace();
             // Caller will be the third element (or later if logger is wrapped)
-            String cname = null;
-            String method = null;
-            if (locations != null) {
-                int i = 2;
-                while (locations.length > i) {
-                    StackTraceElement caller = locations[i];
-                    if (caller.getClassName().startsWith("org.apache.juli")) {
-                        i++;
-                    } else {
-                        cname = caller.getClassName();
-                        method = caller.getMethodName();
-                        break;
-                    }
-                }
+            String cname = "unknown";
+            String method = "unknown";
+            if (locations != null && locations.length >2) {
+                StackTraceElement caller = locations[2];
+                cname = caller.getClassName();
+                method = caller.getMethodName();
             }
-            if (cname == null) {
-                cname = "unknown";
-                method = "unknown";
-            }
-
             if (ex==null) {
                 logger.logp(level, cname, method, msg);
             } else {

==================================================
Parameters.java
index 44e6f08434..b68f8f3ae1 100644
--- a/java/org/apache/tomcat/util/http/Cookies.java
+++ b/java/org/apache/tomcat/util/http/Cookies.java
@@ -21,9 +21,9 @@ import java.io.StringWriter;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
-import org.apache.juli.logging.UserDataHelper;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
+import org.apache.tomcat.util.log.UserDataHelper;
 import org.apache.tomcat.util.res.StringManager;
 
 /**
@@ -356,11 +356,19 @@ public final class Cookies {
                         // not valid.
                         UserDataHelper.Mode logMode = userDataLog.getNextMode();
                         if (logMode != null) {
-                            String message = sm.getString("cookies.invalidCookieToken");
-                            if (logMode.fallToDebug()) {
-                                message += sm.getString("cookies.fallToDebug");
+                            String message = sm.getString(
+                                    "cookies.invalidCookieToken");
+                            switch (logMode) {
+                                case INFO_THEN_DEBUG:
+                                    message += sm.getString(
+                                            "cookies.fallToDebug");
+                                    //$FALL-THROUGH$
+                                case INFO:
+                                    log.info(message);
+                                    break;
+                                case DEBUG:
+                                    log.debug(message);
                             }
-                            userDataLog.log(logMode, message);
                         }
                         while (pos < end && bytes[pos] != ';' &&
                                bytes[pos] != ',')
@@ -445,10 +453,16 @@ public final class Cookies {
                 UserDataHelper.Mode logMode = userDataLog.getNextMode();
                 if (logMode != null) {
                     String message = sm.getString("cookies.invalidSpecial");
-                    if (logMode.fallToDebug()) {
-                        message += sm.getString("cookies.fallToDebug");
+                    switch (logMode) {
+                        case INFO_THEN_DEBUG:
+                            message += sm.getString("cookies.fallToDebug");
+                            //$FALL-THROUGH$
+                        case INFO:
+                            log.info(message);
+                            break;
+                        case DEBUG:
+                            log.debug(message);
                     }
-                    userDataLog.log(logMode, message);
                 }
             } else { // Normal Cookie
                 if (valueStart == -1 && !CookieSupport.ALLOW_NAME_ONLY) {

==================================================
UserDataHelper.java
index 293b6bc63b..228bf0315b 100644
--- a/java/org/apache/tomcat/util/http/Parameters.java
+++ b/java/org/apache/tomcat/util/http/Parameters.java
@@ -25,12 +25,12 @@ import java.util.Enumeration;
 import java.util.HashMap;
 import java.util.Map;
 
-import org.apache.juli.logging.UserDataHelper;
 import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.CharChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.buf.UDecoder;
+import org.apache.tomcat.util.log.UserDataHelper;
 import org.apache.tomcat.util.res.StringManager;
 
 /**
@@ -323,10 +323,16 @@ public final class Parameters {
                     String message = sm.getString("parameters.invalidChunk",
                             Integer.valueOf(nameStart),
                             Integer.valueOf(valueEnd), extract);
-                    if (logMode.fallToDebug()) {
-                        message += sm.getString("parameters.fallToDebug");
+                    switch (logMode) {
+                        case INFO_THEN_DEBUG:
+                            message += sm.getString("parameters.fallToDebug");
+                            //$FALL-THROUGH$
+                        case INFO:
+                            log.info(message);
+                            break;
+                        case DEBUG:
+                            log.debug(message);
                     }
-                    userDataLog.log(logMode, message);
                 }
                 parseFailed = true;
                 continue;
@@ -386,10 +392,17 @@ public final class Parameters {
                     UserDataHelper.Mode logMode = maxParamCountLog.getNextMode();
                     if (logMode != null) {
                         String message = ise.getMessage();
-                        if (logMode.fallToDebug()) {
-                            message += sm.getString("parameters.maxCountFail.fallToDebug");
+                        switch (logMode) {
+                            case INFO_THEN_DEBUG:
+                                message += sm.getString(
+                                        "parameters.maxCountFail.fallToDebug");
+                                //$FALL-THROUGH$
+                            case INFO:
+                                log.info(message);
+                                break;
+                            case DEBUG:
+                                log.debug(message);
                         }
-                        maxParamCountLog.log(logMode, message);
                     }
                     break;
                 }
@@ -406,10 +419,16 @@ public final class Parameters {
                             String message = sm.getString(
                                     "parameters.decodeFail.info",
                                     tmpName.toString(), tmpValue.toString());
-                            if (logMode.fallToDebug()) {
-                                message += sm.getString("parameters.fallToDebug");
+                            switch (logMode) {
+                                case INFO_THEN_DEBUG:
+                                    message += sm.getString("parameters.fallToDebug");
+                                    //$FALL-THROUGH$
+                                case INFO:
+                                    log.info(message);
+                                    break;
+                                case DEBUG:
+                                    log.debug(message);
                             }
-                            userDataLog.log(logMode, message, e);
                         }
                     }
                 }
@@ -430,10 +449,16 @@ public final class Parameters {
                 String message = sm.getString(
                         "parameters.multipleDecodingFail",
                         Integer.valueOf(decodeFailCount));
-                if (logMode.fallToDebug()) {
-                    message += sm.getString("parameters.fallToDebug");
+                switch (logMode) {
+                    case INFO_THEN_DEBUG:
+                        message += sm.getString("parameters.fallToDebug");
+                        //$FALL-THROUGH$
+                    case INFO:
+                        log.info(message);
+                        break;
+                    case DEBUG:
+                        log.debug(message);
                 }
-                userDataLog.log(logMode, message);
             }
         }
     }

==================================================
