3b0173f6e944461c53311b2746aaed1ad166e582
==================================================
More nested lambda expression fixes.
==================================================
Mark Emlyn
==================================================
Wed Jul 17 20:07:48 2013 +0000
==================================================
AstLambdaExpression.java
More nested lambda expression fixes.
Includes another test case and some simple debug code aimed at IDE debuggers.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1504256 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AstLambdaParameters.java
index 2ff2654bc8..4d7e595b3c 100644
--- a/java/org/apache/el/parser/AstLambdaExpression.java
+++ b/java/org/apache/el/parser/AstLambdaExpression.java
@@ -95,9 +95,24 @@ public class AstLambdaExpression extends SimpleNode {
             result = ((LambdaExpression) result).invoke(
                     ((AstMethodParameters) children[i]).getParameters(ctx));
             i++;
+            while (i < jjtGetNumChildren() && children[i].jjtGetNumChildren() == 0) {
+                i++;
+            }
         }
 
         return result;
     }
+
+
+    @Override
+    public String toString() {
+        // Purely for debug purposes. May not be complete or correct. Certainly
+        // is not efficient. Be sure not to call this from 'real' code.
+        StringBuilder result = new StringBuilder();
+        for (Node n : children) {
+            result.append(n.toString());
+        }
+        return result.toString();
+    }
 }
 /* JavaCC - OriginalChecksum=071159eff10c8e15ec612c765ae4480a (do not edit this line) */

==================================================
AstMethodParameters.java
index 74d7cb5576..f3198e1fbf 100644
--- a/java/org/apache/el/parser/AstLambdaParameters.java
+++ b/java/org/apache/el/parser/AstLambdaParameters.java
@@ -17,10 +17,27 @@
 /* Generated By:JJTree: Do not edit this line. AstLambdaParameters.java Version 4.3 */
 package org.apache.el.parser;
 
-public
-class AstLambdaParameters extends SimpleNode {
-  public AstLambdaParameters(int id) {
-    super(id);
-  }
+public class AstLambdaParameters extends SimpleNode {
+
+    public AstLambdaParameters(int id) {
+        super(id);
+    }
+
+    @Override
+    public String toString() {
+        // Purely for debug purposes. May not be complete or correct. Certainly
+        // is not efficient. Be sure not to call this from 'real' code.
+        StringBuilder result = new StringBuilder();
+        result.append('(');
+        if (children != null) {
+            for (Node n : children) {
+                result.append(n.toString());
+                result.append(',');
+            }
+        }
+        result.append(")->");
+        return result.toString();
+    }
+
 }
 /* JavaCC - OriginalChecksum=a8c1609257dac59e41c43d6ed91072c6 (do not edit this line) */

==================================================
TestAstLambdaExpression.java
index 5b7fc54809..a002af761e 100644
--- a/java/org/apache/el/parser/AstMethodParameters.java
+++ b/java/org/apache/el/parser/AstMethodParameters.java
@@ -37,4 +37,20 @@ public final class AstMethodParameters extends SimpleNode {
         }
         return params.toArray(new Object[params.size()]);
     }
+
+    @Override
+    public String toString() {
+        // Purely for debug purposes. May not be complete or correct. Certainly
+        // is not efficient. Be sure not to call this from 'real' code.
+        StringBuilder result = new StringBuilder();
+        result.append('(');
+        if (children != null) {
+            for (Node n : children) {
+                result.append(n.toString());
+                result.append(',');
+            }
+        }
+        result.append(')');
+        return result.toString();
+    }
 }

==================================================
