f562edd3302866f34c0ca9fa97f6ff414450f1ae
==================================================
Avoid other cases of NPEs on stop
==================================================
remm remm@apache.org
==================================================
Mon May 13 09:43:29 2019 +0200
==================================================
StandardWrapperValve.java
Avoid other cases of NPEs on stop

As found in the CI logs.


==================================================
Http11InputBuffer.java
index ae7b3197ab..aff0b425b6 100644
--- a/java/org/apache/catalina/core/StandardWrapperValve.java
+++ b/java/org/apache/catalina/core/StandardWrapperValve.java
@@ -29,6 +29,7 @@ import javax.servlet.ServletException;
 import javax.servlet.UnavailableException;
 import javax.servlet.http.HttpServletResponse;
 
+import org.apache.catalina.Container;
 import org.apache.catalina.Context;
 import org.apache.catalina.Globals;
 import org.apache.catalina.LifecycleException;
@@ -174,6 +175,7 @@ final class StandardWrapperValve
 
         // Call the filter chain for this request
         // NOTE: This also calls the servlet's service() method
+        Container container = this.container;
         try {
             if ((servlet != null) && (filterChain != null)) {
                 // Swallow output if needed

==================================================
Http11OutputBuffer.java
index 15a7e83794..5632de212c 100644
--- a/java/org/apache/coyote/http11/Http11InputBuffer.java
+++ b/java/org/apache/coyote/http11/Http11InputBuffer.java
@@ -22,6 +22,7 @@ import java.nio.ByteBuffer;
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 
+import org.apache.coyote.CloseNowException;
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.Request;
 import org.apache.juli.logging.Log;
@@ -728,7 +729,13 @@ public class Http11InputBuffer implements InputBuffer, ApplicationBufferHandler
             byteBuffer.position(byteBuffer.limit());
         }
         byteBuffer.limit(byteBuffer.capacity());
-        int nRead = wrapper.read(block, byteBuffer);
+        SocketWrapperBase<?> socketWrapper = this.wrapper;
+        int nRead = -1;
+        if (socketWrapper != null) {
+            nRead = socketWrapper.read(block, byteBuffer);
+        } else {
+            throw new CloseNowException(sm.getString("iib.eof.error"));
+        }
         byteBuffer.limit(byteBuffer.position()).reset();
         if (nRead > 0) {
             return true;

==================================================
