c1b97f6aa302b67f740491d31db99ff37f4ba139
==================================================
Code clean-up - no functional change
==================================================
Mark Thomas
==================================================
Thu Apr 13 17:11:39 2023 +0100
==================================================
AsyncContext.java
Code clean-up - no functional change


==================================================
AsyncEvent.java
index 91b2c60634..7b952e6394 100644
--- a/java/jakarta/servlet/AsyncContext.java
+++ b/java/jakarta/servlet/AsyncContext.java
@@ -26,38 +26,32 @@ public interface AsyncContext {
     /**
      * The attribute name for the URI of the async request
      */
-    String ASYNC_REQUEST_URI =
-            "jakarta.servlet.async.request_uri";
+    String ASYNC_REQUEST_URI = "jakarta.servlet.async.request_uri";
 
     /**
      * The attribute name for the Context Path of the async request
      */
-    String ASYNC_CONTEXT_PATH  =
-            "jakarta.servlet.async.context_path";
+    String ASYNC_CONTEXT_PATH = "jakarta.servlet.async.context_path";
 
     /**
      * The attribute name for the Mapping of the async request
      */
-    String ASYNC_MAPPING =
-            "jakarta.servlet.async.mapping";
+    String ASYNC_MAPPING = "jakarta.servlet.async.mapping";
 
     /**
      * The attribute name for the Path Info of the async request
      */
-    String ASYNC_PATH_INFO =
-            "jakarta.servlet.async.path_info";
+    String ASYNC_PATH_INFO = "jakarta.servlet.async.path_info";
 
     /**
      * The attribute name for the Servlet Path of the async request
      */
-    String ASYNC_SERVLET_PATH =
-            "jakarta.servlet.async.servlet_path";
+    String ASYNC_SERVLET_PATH = "jakarta.servlet.async.servlet_path";
 
     /**
      * The attribute name for the Query String of the async request
      */
-    String ASYNC_QUERY_STRING =
-            "jakarta.servlet.async.query_string";
+    String ASYNC_QUERY_STRING = "jakarta.servlet.async.query_string";
 
     /**
      * @return a reference to the ServletRequest object
@@ -75,41 +69,39 @@ public interface AsyncContext {
     boolean hasOriginalRequestAndResponse();
 
     /**
-     * @throws IllegalStateException if this method is called when the request
-     * is not in asynchronous mode. The request is in asynchronous mode after
-     * {@link jakarta.servlet.http.HttpServletRequest#startAsync()} or
-     * {@link jakarta.servlet.http.HttpServletRequest#startAsync(ServletRequest,
-     * ServletResponse)} has been called and before {@link #complete()} or any
-     * other dispatch() method has been called.
+     * @throws IllegalStateException if this method is called when the request is not in asynchronous mode. The request
+     *                                   is in asynchronous mode after
+     *                                   {@link jakarta.servlet.http.HttpServletRequest#startAsync()} or
+     *                                   {@link jakarta.servlet.http.HttpServletRequest#startAsync(ServletRequest, ServletResponse)}
+     *                                   has been called and before {@link #complete()} or any other dispatch() method
+     *                                   has been called.
      */
     void dispatch();
 
     /**
-     * @param path The path to which the request/response should be dispatched
-     *             relative to the {@link ServletContext} from which this async
-     *             request was started.
+     * @param path The path to which the request/response should be dispatched relative to the {@link ServletContext}
+     *                 from which this async request was started.
      *
-     * @throws IllegalStateException if this method is called when the request
-     * is not in asynchronous mode. The request is in asynchronous mode after
-     * {@link jakarta.servlet.http.HttpServletRequest#startAsync()} or
-     * {@link jakarta.servlet.http.HttpServletRequest#startAsync(ServletRequest,
-     * ServletResponse)} has been called and before {@link #complete()} or any
-     * other dispatch() method has been called.
+     * @throws IllegalStateException if this method is called when the request is not in asynchronous mode. The request
+     *                                   is in asynchronous mode after
+     *                                   {@link jakarta.servlet.http.HttpServletRequest#startAsync()} or
+     *                                   {@link jakarta.servlet.http.HttpServletRequest#startAsync(ServletRequest, ServletResponse)}
+     *                                   has been called and before {@link #complete()} or any other dispatch() method
+     *                                   has been called.
      */
     void dispatch(String path);
 
     /**
-     * @param path The path to which the request/response should be dispatched
-     *             relative to the specified {@link ServletContext}.
-     * @param context The {@link ServletContext} to which the request/response
-     *                should be dispatched.
+     * @param path    The path to which the request/response should be dispatched relative to the specified
+     *                    {@link ServletContext}.
+     * @param context The {@link ServletContext} to which the request/response should be dispatched.
      *
-     * @throws IllegalStateException if this method is called when the request
-     * is not in asynchronous mode. The request is in asynchronous mode after
-     * {@link jakarta.servlet.http.HttpServletRequest#startAsync()} or
-     * {@link jakarta.servlet.http.HttpServletRequest#startAsync(ServletRequest,
-     * ServletResponse)} has been called and before {@link #complete()} or any
-     * other dispatch() method has been called.
+     * @throws IllegalStateException if this method is called when the request is not in asynchronous mode. The request
+     *                                   is in asynchronous mode after
+     *                                   {@link jakarta.servlet.http.HttpServletRequest#startAsync()} or
+     *                                   {@link jakarta.servlet.http.HttpServletRequest#startAsync(ServletRequest, ServletResponse)}
+     *                                   has been called and before {@link #complete()} or any other dispatch() method
+     *                                   has been called.
      */
     void dispatch(ServletContext context, String path);
 
@@ -136,18 +128,19 @@ public interface AsyncContext {
      * Adds an event listener that will be called when different AsyncEvents fire
      *
      * @param listener an AsyncListener that will be called with AsyncEvent objects
-     * @param request the ServletRequest that will be passed with the AsyncEvent
+     * @param request  the ServletRequest that will be passed with the AsyncEvent
      * @param response the ServletResponse that will be passed with the AsyncEvent
      */
-    void addListener(AsyncListener listener, ServletRequest request,
-            ServletResponse response);
+    void addListener(AsyncListener listener, ServletRequest request, ServletResponse response);
 
     /**
      * Creates and returns an AsyncListener object
      *
-     * @param <T> The type to create that extends AsyncListener
+     * @param <T>   The type to create that extends AsyncListener
      * @param clazz The class to instantiate to create the listener
+     *
      * @return the newly created AsyncListener object
+     *
      * @throws ServletException if the listener cannot be created
      */
     <T extends AsyncListener> T createListener(Class<T> clazz) throws ServletException;
@@ -155,8 +148,7 @@ public interface AsyncContext {
     /**
      * Set the timeout.
      *
-     * @param timeout The timeout in milliseconds. 0 or less indicates no
-     *                timeout.
+     * @param timeout The timeout in milliseconds. 0 or less indicates no timeout.
      */
     void setTimeout(long timeout);
 

==================================================
AsyncListener.java
index 55eb165f86..23d9a6a9ad 100644
--- a/java/jakarta/servlet/AsyncEvent.java
+++ b/java/jakarta/servlet/AsyncEvent.java
@@ -30,7 +30,7 @@ public class AsyncEvent {
     /**
      * Creates an instance using the provide parameters.
      *
-     * @param context   The asynchronous context associated with the event
+     * @param context The asynchronous context associated with the event
      */
     public AsyncEvent(AsyncContext context) {
         this.context = context;
@@ -42,12 +42,11 @@ public class AsyncEvent {
     /**
      * Creates an instance using the provide parameters.
      *
-     * @param context   The asynchronous context associated with the event
-     * @param request   The request associated with the event
-     * @param response  The response associated with the event
+     * @param context  The asynchronous context associated with the event
+     * @param request  The request associated with the event
+     * @param response The response associated with the event
      */
-    public AsyncEvent(AsyncContext context, ServletRequest request,
-            ServletResponse response) {
+    public AsyncEvent(AsyncContext context, ServletRequest request, ServletResponse response) {
         this.context = context;
         this.request = request;
         this.response = response;
@@ -75,8 +74,7 @@ public class AsyncEvent {
      * @param response  The response associated with the event
      * @param throwable The throwable associated with the event
      */
-    public AsyncEvent(AsyncContext context, ServletRequest request,
-            ServletResponse response, Throwable throwable) {
+    public AsyncEvent(AsyncContext context, ServletRequest request, ServletResponse response, Throwable throwable) {
         this.context = context;
         this.request = request;
         this.response = response;
@@ -86,8 +84,7 @@ public class AsyncEvent {
     /**
      * Obtain the asynchronous context associated with the event.
      *
-     * @return  The asynchronous context associated with the event or
-     *          {@code null} if one was not specified
+     * @return The asynchronous context associated with the event or {@code null} if one was not specified
      */
     public AsyncContext getAsyncContext() {
         return context;
@@ -96,8 +93,7 @@ public class AsyncEvent {
     /**
      * Obtain the request associated with the event.
      *
-     * @return  The request associated with the event or
-     *          {@code null} if one was not specified
+     * @return The request associated with the event or {@code null} if one was not specified
      */
     public ServletRequest getSuppliedRequest() {
         return request;
@@ -106,8 +102,7 @@ public class AsyncEvent {
     /**
      * Obtain the response associated with the event.
      *
-     * @return  The response associated with the event or
-     *          {@code null} if one was not specified
+     * @return The response associated with the event or {@code null} if one was not specified
      */
     public ServletResponse getSuppliedResponse() {
         return response;
@@ -116,8 +111,7 @@ public class AsyncEvent {
     /**
      * Obtain the throwable associated with the event.
      *
-     * @return  The throwable associated with the event or
-     *          {@code null} if one was not specified
+     * @return The throwable associated with the event or {@code null} if one was not specified
      */
     public Throwable getThrowable() {
         return throwable;

==================================================
DispatcherType.java
index 2493706d8c..a4710d655f 100644
--- a/java/jakarta/servlet/AsyncListener.java
+++ b/java/jakarta/servlet/AsyncListener.java
@@ -27,47 +27,41 @@ import java.util.EventListener;
 public interface AsyncListener extends EventListener {
 
     /**
-     * This event is fired after the call to {@link AsyncContext#complete()}
-     * has been processed by the container.
+     * This event is fired after the call to {@link AsyncContext#complete()} has been processed by the container.
      *
      * @param event Provides access to the objects associated with the event
      *
-     * @throws IOException Should be thrown if an I/O error occurs during the
-     *                     processing of the event
+     * @throws IOException Should be thrown if an I/O error occurs during the processing of the event
      */
     void onComplete(AsyncEvent event) throws IOException;
 
     /**
-     * This event is fired if an asynchronous operation times out but before
-     * the container takes any action as a result of the timeout.
+     * This event is fired if an asynchronous operation times out but before the container takes any action as a result
+     * of the timeout.
      *
      * @param event Provides access to the objects associated with the event
      *
-     * @throws IOException Should be thrown if an I/O error occurs during the
-     *                     processing of the event
+     * @throws IOException Should be thrown if an I/O error occurs during the processing of the event
      */
     void onTimeout(AsyncEvent event) throws IOException;
 
     /**
-     * This event is fired if an error occurs during an asynchronous operation
-     * but before the container takes any action as a result of the error.
+     * This event is fired if an error occurs during an asynchronous operation but before the container takes any action
+     * as a result of the error.
      *
      * @param event Provides access to the objects associated with the event
      *
-     * @throws IOException Should be thrown if an I/O error occurs during the
-     *                     processing of the event
+     * @throws IOException Should be thrown if an I/O error occurs during the processing of the event
      */
     void onError(AsyncEvent event) throws IOException;
 
     /**
-     * This event is fired if new call is made to
-     * {@link ServletRequest#startAsync()} after the completion of the
+     * This event is fired if new call is made to {@link ServletRequest#startAsync()} after the completion of the
      * {@link AsyncContext} to which this listener was added.
      *
      * @param event Provides access to the objects associated with the event
      *
-     * @throws IOException Should be thrown if an I/O error occurs during the
-     *                     processing of the event
+     * @throws IOException Should be thrown if an I/O error occurs during the processing of the event
      */
     void onStartAsync(AsyncEvent event) throws IOException;
 }

==================================================
Filter.java
index 355dd14b7b..8734e509a4 100644
--- a/java/jakarta/servlet/DispatcherType.java
+++ b/java/jakarta/servlet/DispatcherType.java
@@ -17,8 +17,8 @@
 package jakarta.servlet;
 
 /**
- * Enumeration of dispatcher types. Used both to define filter mappings and by
- * Servlets to determine why they were called.
+ * Enumeration of dispatcher types. Used both to define filter mappings and by Servlets to determine why they were
+ * called.
  *
  * @since Servlet 3.0
  */
@@ -40,15 +40,13 @@ public enum DispatcherType {
     REQUEST,
 
     /**
-     * {@link AsyncContext#dispatch()}, {@link AsyncContext#dispatch(String)}
-     * and
+     * {@link AsyncContext#dispatch()}, {@link AsyncContext#dispatch(String)} and
      * {@link AsyncContext#addListener(AsyncListener, ServletRequest, ServletResponse)}
      */
     ASYNC,
 
     /**
-     * When the container has passed processing to the error handler mechanism
-     * such as a defined error page.
+     * When the container has passed processing to the error handler mechanism such as a defined error page.
      */
     ERROR
 }

==================================================
FilterChain.java
index 4473ec3d7f..063d0de653 100644
--- a/java/jakarta/servlet/Filter.java
+++ b/java/jakarta/servlet/Filter.java
@@ -19,14 +19,12 @@ package jakarta.servlet;
 import java.io.IOException;
 
 /**
- * A filter is an object that performs filtering tasks on either the request to
- * a resource (a servlet or static content), or on the response from a resource,
- * or both. <br>
+ * A filter is an object that performs filtering tasks on either the request to a resource (a servlet or static
+ * content), or on the response from a resource, or both. <br>
  * <br>
- * Filters perform filtering in the <code>doFilter</code> method. Every Filter
- * has access to a FilterConfig object from which it can obtain its
- * initialization parameters, a reference to the ServletContext which it can
- * use, for example, to load resources needed for filtering tasks.
+ * Filters perform filtering in the <code>doFilter</code> method. Every Filter has access to a FilterConfig object from
+ * which it can obtain its initialization parameters, a reference to the ServletContext which it can use, for example,
+ * to load resources needed for filtering tasks.
  * <p>
  * Filters are configured in the deployment descriptor of a web application
  * <p>
@@ -46,75 +44,62 @@ import java.io.IOException;
 public interface Filter {
 
     /**
-     * Called by the web container to indicate to a filter that it is being
-     * placed into service. The servlet container calls the init method exactly
-     * once after instantiating the filter. The init method must complete
-     * successfully before the filter is asked to do any filtering work.
+     * Called by the web container to indicate to a filter that it is being placed into service. The servlet container
+     * calls the init method exactly once after instantiating the filter. The init method must complete successfully
+     * before the filter is asked to do any filtering work.
      * <p>
-     * The web container cannot place the filter into service if the init method
-     * either:
+     * The web container cannot place the filter into service if the init method either:
      * <ul>
      * <li>Throws a ServletException</li>
-     * <li>Does not return within a time period defined by the web
-     *     container</li>
+     * <li>Does not return within a time period defined by the web container</li>
      * </ul>
      * The default implementation is a NO-OP.
      *
-     * @param filterConfig The configuration information associated with the
-     *                     filter instance being initialised
+     * @param filterConfig The configuration information associated with the filter instance being initialised
      *
      * @throws ServletException if the initialisation fails
      */
-    default void init(FilterConfig filterConfig) throws ServletException {}
+    default void init(FilterConfig filterConfig) throws ServletException {
+    }
 
     /**
-     * The <code>doFilter</code> method of the Filter is called by the container
-     * each time a request/response pair is passed through the chain due to a
-     * client request for a resource at the end of the chain. The FilterChain
-     * passed in to this method allows the Filter to pass on the request and
-     * response to the next entity in the chain.
+     * The <code>doFilter</code> method of the Filter is called by the container each time a request/response pair is
+     * passed through the chain due to a client request for a resource at the end of the chain. The FilterChain passed
+     * in to this method allows the Filter to pass on the request and response to the next entity in the chain.
      * <p>
-     * A typical implementation of this method would follow the following
-     * pattern:- <br>
+     * A typical implementation of this method would follow the following pattern:- <br>
      * 1. Examine the request<br>
-     * 2. Optionally wrap the request object with a custom implementation to
-     * filter content or headers for input filtering <br>
-     * 3. Optionally wrap the response object with a custom implementation to
-     * filter content or headers for output filtering <br>
-     * 4. a) <strong>Either</strong> invoke the next entity in the chain using
-     * the FilterChain object (<code>chain.doFilter()</code>), <br>
-     * 4. b) <strong>or</strong> not pass on the request/response pair to the
-     * next entity in the filter chain to block the request processing<br>
-     * 5. Directly set headers on the response after invocation of the next
-     * entity in the filter chain.
+     * 2. Optionally wrap the request object with a custom implementation to filter content or headers for input
+     * filtering <br>
+     * 3. Optionally wrap the response object with a custom implementation to filter content or headers for output
+     * filtering <br>
+     * 4. a) <strong>Either</strong> invoke the next entity in the chain using the FilterChain object
+     * (<code>chain.doFilter()</code>), <br>
+     * 4. b) <strong>or</strong> not pass on the request/response pair to the next entity in the filter chain to block
+     * the request processing<br>
+     * 5. Directly set headers on the response after invocation of the next entity in the filter chain.
      *
      * @param request  The request to process
      * @param response The response associated with the request
-     * @param chain    Provides access to the next filter in the chain for this
-     *                 filter to pass the request and response to for further
-     *                 processing
+     * @param chain    Provides access to the next filter in the chain for this filter to pass the request and response
+     *                     to for further processing
      *
-     * @throws IOException if an I/O error occurs during this filter's
-     *                     processing of the request
+     * @throws IOException      if an I/O error occurs during this filter's processing of the request
      * @throws ServletException if the processing fails for any other reason
      */
-    void doFilter(ServletRequest request, ServletResponse response,
-            FilterChain chain) throws IOException, ServletException;
+    void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
+            throws IOException, ServletException;
 
     /**
-     * Called by the web container to indicate to a filter that it is being
-     * taken out of service. This method is only called once all threads within
-     * the filter's doFilter method have exited or after a timeout period has
-     * passed. After the web container calls this method, it will not call the
-     * doFilter method again on this instance of the filter. <br>
+     * Called by the web container to indicate to a filter that it is being taken out of service. This method is only
+     * called once all threads within the filter's doFilter method have exited or after a timeout period has passed.
+     * After the web container calls this method, it will not call the doFilter method again on this instance of the
+     * filter. <br>
      * <br>
-     *
-     * This method gives the filter an opportunity to clean up any resources
-     * that are being held (for example, memory, file handles, threads) and make
-     * sure that any persistent state is synchronized with the filter's current
-     * state in memory.
-     *
-     * The default implementation is a NO-OP.
+     * This method gives the filter an opportunity to clean up any resources that are being held (for example, memory,
+     * file handles, threads) and make sure that any persistent state is synchronized with the filter's current state in
+     * memory. The default implementation is a NO-OP.
      */
-    default void destroy() {}
+    default void destroy() {
+    }
 }

==================================================
FilterConfig.java
index d227808886..ddeeb1327c 100644
--- a/java/jakarta/servlet/FilterChain.java
+++ b/java/jakarta/servlet/FilterChain.java
@@ -19,32 +19,26 @@ package jakarta.servlet;
 import java.io.IOException;
 
 /**
- * A FilterChain is an object provided by the servlet container to the developer
- * giving a view into the invocation chain of a filtered request for a resource.
- * Filters use the FilterChain to invoke the next filter in the chain, or if the
- * calling filter is the last filter in the chain, to invoke the resource at the
- * end of the chain.
+ * A FilterChain is an object provided by the servlet container to the developer giving a view into the invocation chain
+ * of a filtered request for a resource. Filters use the FilterChain to invoke the next filter in the chain, or if the
+ * calling filter is the last filter in the chain, to invoke the resource at the end of the chain.
  *
  * @see Filter
+ *
  * @since Servlet 2.3
  */
 public interface FilterChain {
 
     /**
-     * Causes the next filter in the chain to be invoked, or if the calling
-     * filter is the last filter in the chain, causes the resource at the end of
-     * the chain to be invoked.
+     * Causes the next filter in the chain to be invoked, or if the calling filter is the last filter in the chain,
+     * causes the resource at the end of the chain to be invoked.
      *
-     * @param request
-     *            the request to pass along the chain.
-     * @param response
-     *            the response to pass along the chain.
+     * @param request  the request to pass along the chain.
+     * @param response the response to pass along the chain.
      *
-     * @throws IOException if an I/O error occurs during the processing of the
-     *                     request
+     * @throws IOException      if an I/O error occurs during the processing of the request
      * @throws ServletException if the processing fails for any other reason
      */
-    void doFilter(ServletRequest request, ServletResponse response)
-            throws IOException, ServletException;
+    void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException;
 
 }

==================================================
FilterRegistration.java
index a888ec7e16..86eb9dfcec 100644
--- a/java/jakarta/servlet/FilterConfig.java
+++ b/java/jakarta/servlet/FilterConfig.java
@@ -19,10 +19,10 @@ package jakarta.servlet;
 import java.util.Enumeration;
 
 /**
- * A filter configuration object used by a servlet container to pass information
- * to a filter during initialization.
+ * A filter configuration object used by a servlet container to pass information to a filter during initialization.
  *
  * @see Filter
+ *
  * @since Servlet 2.3
  */
 public interface FilterConfig {
@@ -30,43 +30,35 @@ public interface FilterConfig {
     /**
      * Get the name of the filter.
      *
-     * @return The filter-name of this filter as defined in the deployment
-     *         descriptor.
+     * @return The filter-name of this filter as defined in the deployment descriptor.
      */
     String getFilterName();
 
     /**
-     * Returns a reference to the {@link ServletContext} in which the caller is
-     * executing.
+     * Returns a reference to the {@link ServletContext} in which the caller is executing.
      *
-     * @return {@link ServletContext} object, used by the caller to interact
-     *         with its servlet container
+     * @return {@link ServletContext} object, used by the caller to interact with its servlet container
      *
      * @see ServletContext
      */
     ServletContext getServletContext();
 
     /**
-     * Returns a <code>String</code> containing the value of the named
-     * initialization parameter, or <code>null</code> if the parameter does not
-     * exist.
+     * Returns a <code>String</code> containing the value of the named initialization parameter, or <code>null</code> if
+     * the parameter does not exist.
      *
-     * @param name
-     *            <code>String</code> specifying the name of the initialization
-     *            parameter
+     * @param name <code>String</code> specifying the name of the initialization parameter
      *
-     * @return <code>String</code> containing the value of the initialization
-     *         parameter
+     * @return <code>String</code> containing the value of the initialization parameter
      */
     String getInitParameter(String name);
 
     /**
-     * Returns the names of the filter's initialization parameters as an
-     * <code>Enumeration</code> of <code>String</code> objects, or an empty
-     * <code>Enumeration</code> if the filter has no initialization parameters.
+     * Returns the names of the filter's initialization parameters as an <code>Enumeration</code> of <code>String</code>
+     * objects, or an empty <code>Enumeration</code> if the filter has no initialization parameters.
      *
-     * @return <code>Enumeration</code> of <code>String</code> objects
-     *         containing the names of the filter's initialization parameters
+     * @return <code>Enumeration</code> of <code>String</code> objects containing the names of the filter's
+     *             initialization parameters
      */
     Enumeration<String> getInitParameterNames();
 

==================================================
GenericFilter.java
index d75f7643aa..919e6b0ab0 100644
--- a/java/jakarta/servlet/FilterRegistration.java
+++ b/java/jakarta/servlet/FilterRegistration.java
@@ -29,25 +29,19 @@ public interface FilterRegistration extends Registration {
     /**
      * Add a mapping for this filter to one or more named Servlets.
      *
-     * @param dispatcherTypes The dispatch types to which this filter should
-     *                        apply
-     * @param isMatchAfter    Should this filter be applied after any mappings
-     *                        defined in the deployment descriptor
-     *                        (<code>true</code>) or before?
-     * @param servletNames    Requests mapped to these servlets will be
-     *                        processed by this filter
-     * @throws IllegalArgumentException if the list of servlet names is empty
-     *                                  or null
-     * @throws IllegalStateException if the associated ServletContext has
-     *                               already been initialised
+     * @param dispatcherTypes The dispatch types to which this filter should apply
+     * @param isMatchAfter    Should this filter be applied after any mappings defined in the deployment descriptor
+     *                            (<code>true</code>) or before?
+     * @param servletNames    Requests mapped to these servlets will be processed by this filter
+     *
+     * @throws IllegalArgumentException if the list of servlet names is empty or null
+     * @throws IllegalStateException    if the associated ServletContext has already been initialised
      */
-    void addMappingForServletNames(
-            EnumSet<DispatcherType> dispatcherTypes,
-            boolean isMatchAfter, String... servletNames);
+    void addMappingForServletNames(EnumSet<DispatcherType> dispatcherTypes, boolean isMatchAfter,
+            String... servletNames);
 
     /**
-     * Gets the currently available servlet name mappings of the Filter
-     * represented by this FilterRegistration.
+     * Gets the currently available servlet name mappings of the Filter represented by this FilterRegistration.
      *
      * @return a Collection of the Servlet name mappings
      */
@@ -56,33 +50,26 @@ public interface FilterRegistration extends Registration {
     /**
      * Add a mapping for this filter to one or more URL patterns.
      *
-     * @param dispatcherTypes The dispatch types to which this filter should
-     *                        apply
-     * @param isMatchAfter    Should this filter be applied after any mappings
-     *                        defined in the deployment descriptor
-     *                        (<code>true</code>) or before?
-     * @param urlPatterns     The URL patterns to which this filter should be
-     *                        applied
-     * @throws IllegalArgumentException if the list of URL patterns is empty or
-     *                                  null
-     * @throws IllegalStateException if the associated ServletContext has
-     *                               already been initialised
+     * @param dispatcherTypes The dispatch types to which this filter should apply
+     * @param isMatchAfter    Should this filter be applied after any mappings defined in the deployment descriptor
+     *                            (<code>true</code>) or before?
+     * @param urlPatterns     The URL patterns to which this filter should be applied
+     *
+     * @throws IllegalArgumentException if the list of URL patterns is empty or null
+     * @throws IllegalStateException    if the associated ServletContext has already been initialised
      */
-    void addMappingForUrlPatterns(
-            EnumSet<DispatcherType> dispatcherTypes,
-            boolean isMatchAfter, String... urlPatterns);
+    void addMappingForUrlPatterns(EnumSet<DispatcherType> dispatcherTypes, boolean isMatchAfter, String... urlPatterns);
 
     /**
-     * Gets the currently available URL pattern mappings of the Filter
-     * represented by this FilterRegistration.
+     * Gets the currently available URL pattern mappings of the Filter represented by this FilterRegistration.
      *
      * @return a Collection of the URL pattern mappings
      */
     Collection<String> getUrlPatternMappings();
 
     /**
-     * Interface through which a Filter registered via one of the addFilter
-     * methods on ServletContext may be further configured.
+     * Interface through which a Filter registered via one of the addFilter methods on ServletContext may be further
+     * configured.
      */
     interface Dynamic extends FilterRegistration, Registration.Dynamic {
         // No additional methods

==================================================
GenericServlet.java
index a69ac3fbd0..3f2eb9d8f9 100644
--- a/java/jakarta/servlet/GenericFilter.java
+++ b/java/jakarta/servlet/GenericFilter.java
@@ -20,8 +20,8 @@ import java.io.Serializable;
 import java.util.Enumeration;
 
 /**
- * Provides a base class that implements the Filter and FilterConfig interfaces
- * to reduce boilerplate when writing new filters.
+ * Provides a base class that implements the Filter and FilterConfig interfaces to reduce boilerplate when writing new
+ * filters.
  *
  * @see jakarta.servlet.Filter
  * @see jakarta.servlet.FilterConfig
@@ -53,8 +53,7 @@ public abstract class GenericFilter implements Filter, FilterConfig, Serializabl
     /**
      * Obtain the FilterConfig used to initialise this Filter instance.
      *
-     * @return The config previously passed to the {@link #init(FilterConfig)}
-     *         method
+     * @return The config previously passed to the {@link #init(FilterConfig)} method
      */
     public FilterConfig getFilterConfig() {
         return filterConfig;
@@ -69,17 +68,16 @@ public abstract class GenericFilter implements Filter, FilterConfig, Serializabl
 
     @Override
     public void init(FilterConfig filterConfig) throws ServletException {
-        this.filterConfig  = filterConfig;
+        this.filterConfig = filterConfig;
         init();
     }
 
 
     /**
-     * Convenience method for sub-classes to save them having to call
-     * <code>super.init(config)</code>. This is a NO-OP by default.
+     * Convenience method for sub-classes to save them having to call <code>super.init(config)</code>. This is a NO-OP
+     * by default.
      *
-     * @throws ServletException If an exception occurs that interrupts the
-     *         Filter's normal operation
+     * @throws ServletException If an exception occurs that interrupts the Filter's normal operation
      */
     public void init() throws ServletException {
         // NO-OP

==================================================
HttpConstraintElement.java
index 92cff5cb44..caf2ab3b88 100644
--- a/java/jakarta/servlet/GenericServlet.java
+++ b/java/jakarta/servlet/GenericServlet.java
@@ -20,41 +20,36 @@ import java.io.IOException;
 import java.util.Enumeration;
 
 /**
- * Defines a generic, protocol-independent servlet. To write an HTTP servlet for
- * use on the Web, extend {@link jakarta.servlet.http.HttpServlet} instead.
+ * Defines a generic, protocol-independent servlet. To write an HTTP servlet for use on the Web, extend
+ * {@link jakarta.servlet.http.HttpServlet} instead.
  * <p>
- * <code>GenericServlet</code> implements the <code>Servlet</code> and
- * <code>ServletConfig</code> interfaces. <code>GenericServlet</code> may be
- * directly extended by a servlet, although it's more common to extend a
+ * <code>GenericServlet</code> implements the <code>Servlet</code> and <code>ServletConfig</code> interfaces.
+ * <code>GenericServlet</code> may be directly extended by a servlet, although it's more common to extend a
  * protocol-specific subclass such as <code>HttpServlet</code>.
  * <p>
- * <code>GenericServlet</code> makes writing servlets easier. It provides simple
- * versions of the lifecycle methods <code>init</code> and <code>destroy</code>
- * and of the methods in the <code>ServletConfig</code> interface.
- * <code>GenericServlet</code> also implements the <code>log</code> method,
- * declared in the <code>ServletContext</code> interface.
+ * <code>GenericServlet</code> makes writing servlets easier. It provides simple versions of the lifecycle methods
+ * <code>init</code> and <code>destroy</code> and of the methods in the <code>ServletConfig</code> interface.
+ * <code>GenericServlet</code> also implements the <code>log</code> method, declared in the <code>ServletContext</code>
+ * interface.
  * <p>
- * To write a generic servlet, you need only override the abstract
- * <code>service</code> method.
+ * To write a generic servlet, you need only override the abstract <code>service</code> method.
  */
-public abstract class GenericServlet implements Servlet, ServletConfig,
-        java.io.Serializable {
+public abstract class GenericServlet implements Servlet, ServletConfig, java.io.Serializable {
 
     private static final long serialVersionUID = 1L;
 
     private transient ServletConfig config;
 
     /**
-     * Does nothing. All of the servlet initialization is done by one of the
-     * <code>init</code> methods.
+     * Does nothing. All of the servlet initialization is done by one of the <code>init</code> methods.
      */
     public GenericServlet() {
         // NOOP
     }
 
     /**
-     * Called by the servlet container to indicate to a servlet that the servlet
-     * is being taken out of service. See {@link Servlet#destroy}.
+     * Called by the servlet container to indicate to a servlet that the servlet is being taken out of service. See
+     * {@link Servlet#destroy}.
      */
     @Override
     public void destroy() {
@@ -62,18 +57,15 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
     }
 
     /**
-     * Returns a <code>String</code> containing the value of the named
-     * initialization parameter, or <code>null</code> if the parameter does not
-     * exist. See {@link ServletConfig#getInitParameter}.
+     * Returns a <code>String</code> containing the value of the named initialization parameter, or <code>null</code> if
+     * the parameter does not exist. See {@link ServletConfig#getInitParameter}.
      * <p>
-     * This method is supplied for convenience. It gets the value of the named
-     * parameter from the servlet's <code>ServletConfig</code> object.
+     * This method is supplied for convenience. It gets the value of the named parameter from the servlet's
+     * <code>ServletConfig</code> object.
      *
-     * @param name
-     *            a <code>String</code> specifying the name of the
-     *            initialization parameter
-     * @return String a <code>String</code> containing the value of the
-     *         initialization parameter
+     * @param name a <code>String</code> specifying the name of the initialization parameter
+     *
+     * @return String a <code>String</code> containing the value of the initialization parameter
      */
     @Override
     public String getInitParameter(String name) {
@@ -81,16 +73,15 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
     }
 
     /**
-     * Returns the names of the servlet's initialization parameters as an
-     * <code>Enumeration</code> of <code>String</code> objects, or an empty
-     * <code>Enumeration</code> if the servlet has no initialization parameters.
-     * See {@link ServletConfig#getInitParameterNames}.
+     * Returns the names of the servlet's initialization parameters as an <code>Enumeration</code> of
+     * <code>String</code> objects, or an empty <code>Enumeration</code> if the servlet has no initialization
+     * parameters. See {@link ServletConfig#getInitParameterNames}.
      * <p>
-     * This method is supplied for convenience. It gets the parameter names from
-     * the servlet's <code>ServletConfig</code> object.
+     * This method is supplied for convenience. It gets the parameter names from the servlet's
+     * <code>ServletConfig</code> object.
      *
-     * @return Enumeration an enumeration of <code>String</code> objects
-     *         containing the names of the servlet's initialization parameters
+     * @return Enumeration an enumeration of <code>String</code> objects containing the names of the servlet's
+     *             initialization parameters
      */
     @Override
     public Enumeration<String> getInitParameterNames() {
@@ -100,8 +91,7 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
     /**
      * Returns this servlet's {@link ServletConfig} object.
      *
-     * @return ServletConfig the <code>ServletConfig</code> object that
-     *         initialized this servlet
+     * @return ServletConfig the <code>ServletConfig</code> object that initialized this servlet
      */
     @Override
     public ServletConfig getServletConfig() {
@@ -109,14 +99,14 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
     }
 
     /**
-     * Returns a reference to the {@link ServletContext} in which this servlet
-     * is running. See {@link ServletConfig#getServletContext}.
+     * Returns a reference to the {@link ServletContext} in which this servlet is running. See
+     * {@link ServletConfig#getServletContext}.
      * <p>
-     * This method is supplied for convenience. It gets the context from the
-     * servlet's <code>ServletConfig</code> object.
+     * This method is supplied for convenience. It gets the context from the servlet's <code>ServletConfig</code>
+     * object.
      *
-     * @return ServletContext the <code>ServletContext</code> object passed to
-     *         this servlet by the <code>init</code> method
+     * @return ServletContext the <code>ServletContext</code> object passed to this servlet by the <code>init</code>
+     *             method
      */
     @Override
     public ServletContext getServletContext() {
@@ -124,10 +114,8 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
     }
 
     /**
-     * Returns information about the servlet, such as author, version, and
-     * copyright. By default, this method returns an empty string. Override this
-     * method to have it return a meaningful value. See
-     * {@link Servlet#getServletInfo}.
+     * Returns information about the servlet, such as author, version, and copyright. By default, this method returns an
+     * empty string. Override this method to have it return a meaningful value. See {@link Servlet#getServletInfo}.
      *
      * @return String information about this servlet, by default an empty string
      */
@@ -137,19 +125,16 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
     }
 
     /**
-     * Called by the servlet container to indicate to a servlet that the servlet
-     * is being placed into service. See {@link Servlet#init}.
+     * Called by the servlet container to indicate to a servlet that the servlet is being placed into service. See
+     * {@link Servlet#init}.
      * <p>
-     * This implementation stores the {@link ServletConfig} object it receives
-     * from the servlet container for later use. When overriding this form of
-     * the method, call <code>super.init(config)</code>.
+     * This implementation stores the {@link ServletConfig} object it receives from the servlet container for later use.
+     * When overriding this form of the method, call <code>super.init(config)</code>.
+     *
+     * @param config the <code>ServletConfig</code> object that contains configuration information for this servlet
+     *
+     * @exception ServletException if an exception occurs that interrupts the servlet's normal operation
      *
-     * @param config
-     *            the <code>ServletConfig</code> object that contains
-     *            configuration information for this servlet
-     * @exception ServletException
-     *                if an exception occurs that interrupts the servlet's
-     *                normal operation
      * @see UnavailableException
      */
     @Override
@@ -159,75 +144,55 @@ public abstract class GenericServlet implements Servlet, ServletConfig,
     }
 
     /**
-     * A convenience method which can be overridden so that there's no need to
-     * call <code>super.init(config)</code>.
+     * A convenience method which can be overridden so that there's no need to call <code>super.init(config)</code>.
      * <p>
-     * Instead of overriding {@link #init(ServletConfig)}, simply override this
-     * method and it will be called by
-     * <code>GenericServlet.init(ServletConfig config)</code>. The
-     * <code>ServletConfig</code> object can still be retrieved via
-     * {@link #getServletConfig}.
+     * Instead of overriding {@link #init(ServletConfig)}, simply override this method and it will be called by
+     * <code>GenericServlet.init(ServletConfig config)</code>. The <code>ServletConfig</code> object can still be
+     * retrieved via {@link #getServletConfig}.
      *
-     * @exception ServletException
-     *                if an exception occurs that interrupts the servlet's
-     *                normal operation
+     * @exception ServletException if an exception occurs that interrupts the servlet's normal operation
      */
     public void init() throws ServletException {
         // NOOP by default
     }
 
     /**
-     * Writes the specified message to a servlet log file, prepended by the
-     * servlet's name. See {@link ServletContext#log(String)}.
+     * Writes the specified message to a servlet log file, prepended by the servlet's name. See
+     * {@link ServletContext#log(String)}.
      *
-     * @param message
-     *            a <code>String</code> specifying the message to be written to
-     *            the log file
+     * @param message a <code>String</code> specifying the message to be written to the log file
      */
     public void log(String message) {
         getServletContext().log(getServletName() + ": " + message);
     }
 
     /**
-     * Writes an explanatory message and a stack trace for a given
-     * <code>Throwable</code> exception to the servlet log file, prepended by
-     * the servlet's name. See {@link ServletContext#log(String, Throwable)}.
+     * Writes an explanatory message and a stack trace for a given <code>Throwable</code> exception to the servlet log
+     * file, prepended by the servlet's name. See {@link ServletContext#log(String, Throwable)}.
      *
-     * @param message
-     *            a <code>String</code> that describes the error or exception
-     * @param t
-     *            the <code>java.lang.Throwable</code> error or exception
+     * @param message a <code>String</code> that describes the error or exception
+     * @param t       the <code>java.lang.Throwable</code> error or exception
      */
     public void log(String message, Throwable t) {
         getServletContext().log(getServletName() + ": " + message, t);
     }
 
     /**
-     * Called by the servlet container to allow the servlet to respond to a
-     * request. See {@link Servlet#service}.
+     * Called by the servlet container to allow the servlet to respond to a request. See {@link Servlet#service}.
      * <p>
-     * This method is declared abstract so subclasses, such as
-     * <code>HttpServlet</code>, must override it.
+     * This method is declared abstract so subclasses, such as <code>HttpServlet</code>, must override it.
+     *
+     * @param req the <code>ServletRequest</code> object that contains the client's request
+     * @param res the <code>ServletResponse</code> object that will contain the servlet's response
      *
-     * @param req
-     *            the <code>ServletRequest</code> object that contains the
-     *            client's request
-     * @param res
-     *            the <code>ServletResponse</code> object that will contain the
-     *            servlet's response
-     * @exception ServletException
-     *                if an exception occurs that interferes with the servlet's
-     *                normal operation occurred
-     * @exception IOException
-     *                if an input or output exception occurs
+     * @exception ServletException if an exception occurs that interferes with the servlet's normal operation occurred
+     * @exception IOException      if an input or output exception occurs
      */
     @Override
-    public abstract void service(ServletRequest req, ServletResponse res)
-            throws ServletException, IOException;
+    public abstract void service(ServletRequest req, ServletResponse res) throws ServletException, IOException;
 
     /**
-     * Returns the name of this servlet instance. See
-     * {@link ServletConfig#getServletName}.
+     * Returns the name of this servlet instance. See {@link ServletConfig#getServletName}.
      *
      * @return the name of this servlet instance
      */

==================================================
HttpMethodConstraintElement.java
index c6be0deebb..90e310295c 100644
--- a/java/jakarta/servlet/HttpConstraintElement.java
+++ b/java/jakarta/servlet/HttpConstraintElement.java
@@ -22,8 +22,8 @@ import jakarta.servlet.annotation.ServletSecurity.EmptyRoleSemantic;
 import jakarta.servlet.annotation.ServletSecurity.TransportGuarantee;
 
 /**
- * Equivalent of {@link jakarta.servlet.annotation.HttpConstraint} for
- * programmatic configuration of security constraints.
+ * Equivalent of {@link jakarta.servlet.annotation.HttpConstraint} for programmatic configuration of security
+ * constraints.
  *
  * @since Servlet 3.0
  */
@@ -47,11 +47,9 @@ public class HttpConstraintElement {
     }
 
     /**
-     * Construct a constraint with an empty role semantic. Typically used with
-     * {@link EmptyRoleSemantic#DENY}.
+     * Construct a constraint with an empty role semantic. Typically used with {@link EmptyRoleSemantic#DENY}.
      *
-     * @param emptyRoleSemantic The empty role semantic to apply to the newly
-     *                          created constraint
+     * @param emptyRoleSemantic The empty role semantic to apply to the newly created constraint
      */
     public HttpConstraintElement(EmptyRoleSemantic emptyRoleSemantic) {
         this.emptyRoleSemantic = emptyRoleSemantic;
@@ -62,36 +60,28 @@ public class HttpConstraintElement {
     /**
      * Construct a constraint with a transport guarantee and roles.
      *
-     * @param transportGuarantee The transport guarantee to apply to the newly
-     *                           created constraint
-     * @param rolesAllowed       The roles to associate with the newly created
-     *                           constraint
+     * @param transportGuarantee The transport guarantee to apply to the newly created constraint
+     * @param rolesAllowed       The roles to associate with the newly created constraint
      */
-    public HttpConstraintElement(TransportGuarantee transportGuarantee,
-            String... rolesAllowed) {
+    public HttpConstraintElement(TransportGuarantee transportGuarantee, String... rolesAllowed) {
         this.emptyRoleSemantic = EmptyRoleSemantic.PERMIT;
         this.transportGuarantee = transportGuarantee;
         this.rolesAllowed = rolesAllowed;
     }
 
     /**
-     * Construct a constraint with an empty role semantic, a transport guarantee
-     * and roles.
+     * Construct a constraint with an empty role semantic, a transport guarantee and roles.
+     *
+     * @param emptyRoleSemantic  The empty role semantic to apply to the newly created constraint
+     * @param transportGuarantee The transport guarantee to apply to the newly created constraint
+     * @param rolesAllowed       The roles to associate with the newly created constraint
      *
-     * @param emptyRoleSemantic The empty role semantic to apply to the newly
-     *                          created constraint
-     * @param transportGuarantee The transport guarantee to apply to the newly
-     *                           created constraint
-     * @param rolesAllowed       The roles to associate with the newly created
-     *                           constraint
      * @throws IllegalArgumentException if roles are specified when DENY is used
      */
-    public HttpConstraintElement(EmptyRoleSemantic emptyRoleSemantic,
-            TransportGuarantee transportGuarantee, String... rolesAllowed) {
-        if (rolesAllowed != null && rolesAllowed.length > 0 &&
-                EmptyRoleSemantic.DENY.equals(emptyRoleSemantic)) {
-            throw new IllegalArgumentException(lStrings.getString(
-                    "httpConstraintElement.invalidRolesDeny"));
+    public HttpConstraintElement(EmptyRoleSemantic emptyRoleSemantic, TransportGuarantee transportGuarantee,
+            String... rolesAllowed) {
+        if (rolesAllowed != null && rolesAllowed.length > 0 && EmptyRoleSemantic.DENY.equals(emptyRoleSemantic)) {
+            throw new IllegalArgumentException(lStrings.getString("httpConstraintElement.invalidRolesDeny"));
         }
         this.emptyRoleSemantic = emptyRoleSemantic;
         this.transportGuarantee = transportGuarantee;
@@ -100,6 +90,7 @@ public class HttpConstraintElement {
 
     /**
      * TODO
+     *
      * @return TODO
      */
     public EmptyRoleSemantic getEmptyRoleSemantic() {
@@ -108,6 +99,7 @@ public class HttpConstraintElement {
 
     /**
      * TODO
+     *
      * @return TODO
      */
     public TransportGuarantee getTransportGuarantee() {
@@ -116,6 +108,7 @@ public class HttpConstraintElement {
 
     /**
      * TODO
+     *
      * @return TODO
      */
     public String[] getRolesAllowed() {

==================================================
MultipartConfigElement.java
index 270edc7205..d37c6a6cc8 100644
--- a/java/jakarta/servlet/HttpMethodConstraintElement.java
+++ b/java/jakarta/servlet/HttpMethodConstraintElement.java
@@ -19,8 +19,7 @@ package jakarta.servlet;
 import java.util.ResourceBundle;
 
 /**
- * Programmatic equivalent of a security constraint defined for a single HTTP
- * method.
+ * Programmatic equivalent of a security constraint defined for a single HTTP method.
  *
  * @since Servlet 3.0
  */
@@ -33,43 +32,35 @@ public class HttpMethodConstraintElement extends HttpConstraintElement {
     private final String methodName;
 
     /**
-     * Construct an instance for the given HTTP method name and a default
-     * {@link HttpConstraintElement}.
+     * Construct an instance for the given HTTP method name and a default {@link HttpConstraintElement}.
      *
-     * @param methodName    The HTTP method name
+     * @param methodName The HTTP method name
      */
     public HttpMethodConstraintElement(String methodName) {
         if (methodName == null || methodName.length() == 0) {
-            throw new IllegalArgumentException(lStrings.getString(
-                    "httpMethodConstraintElement.invalidMethod"));
+            throw new IllegalArgumentException(lStrings.getString("httpMethodConstraintElement.invalidMethod"));
         }
         this.methodName = methodName;
     }
 
     /**
-     * Construct an instance for the given HTTP method name and
-     * {@link HttpConstraintElement}.
+     * Construct an instance for the given HTTP method name and {@link HttpConstraintElement}.
      *
-     * @param methodName    The HTTP method name
-     * @param constraint    The constraint for the given method
+     * @param methodName The HTTP method name
+     * @param constraint The constraint for the given method
      */
-    public HttpMethodConstraintElement(String methodName,
-            HttpConstraintElement constraint) {
-        super(constraint.getEmptyRoleSemantic(),
-                constraint.getTransportGuarantee(),
-                constraint.getRolesAllowed());
+    public HttpMethodConstraintElement(String methodName, HttpConstraintElement constraint) {
+        super(constraint.getEmptyRoleSemantic(), constraint.getTransportGuarantee(), constraint.getRolesAllowed());
         if (methodName == null || methodName.length() == 0) {
-            throw new IllegalArgumentException(lStrings.getString(
-                    "httpMethodConstraintElement.invalidMethod"));
+            throw new IllegalArgumentException(lStrings.getString("httpMethodConstraintElement.invalidMethod"));
         }
         this.methodName = methodName;
     }
 
     /**
-     * Obtain the name of the HTTP method for which this constraint was
-     * created.
+     * Obtain the name of the HTTP method for which this constraint was created.
      *
-     * @return  The HTTP method name as provided to the constructor
+     * @return The HTTP method name as provided to the constructor
      */
     public String getMethodName() {
         return methodName;

==================================================
ReadListener.java
index f0116a9504..a91b30ad72 100644
--- a/java/jakarta/servlet/MultipartConfigElement.java
+++ b/java/jakarta/servlet/MultipartConfigElement.java
@@ -19,9 +19,8 @@ package jakarta.servlet;
 import jakarta.servlet.annotation.MultipartConfig;
 
 /**
- * The programmatic equivalent of
- * {@link jakarta.servlet.annotation.MultipartConfig} used to configure
- * multi-part handling for a Servlet when registering a Servlet via code.
+ * The programmatic equivalent of {@link jakarta.servlet.annotation.MultipartConfig} used to configure multi-part
+ * handling for a Servlet when registering a Servlet via code.
  *
  * @since Servlet 3.0
  */
@@ -33,10 +32,10 @@ public class MultipartConfigElement {
     private final int fileSizeThreshold;// = 0;
 
     /**
-     * Create a programmatic multi-part configuration with a specific location
-     * and defaults for the remaining configuration elements.
+     * Create a programmatic multi-part configuration with a specific location and defaults for the remaining
+     * configuration elements.
      *
-     * @param location          The temporary location to store files
+     * @param location The temporary location to store files
      */
     public MultipartConfigElement(String location) {
         // Keep empty string default if location is null
@@ -51,18 +50,15 @@ public class MultipartConfigElement {
     }
 
     /**
-     * Create a programmatic multi-part configuration from the individual
-     * configuration elements.
+     * Create a programmatic multi-part configuration from the individual configuration elements.
      *
      * @param location          The temporary location to store files
      * @param maxFileSize       The maximum permitted size for a single file
      * @param maxRequestSize    The maximum permitted size for a request
-     * @param fileSizeThreshold The size above which the file is save in the
-     *                              temporary location rather than retained in
+     * @param fileSizeThreshold The size above which the file is save in the temporary location rather than retained in
      *                              memory.
      */
-    public MultipartConfigElement(String location, long maxFileSize,
-            long maxRequestSize, int fileSizeThreshold) {
+    public MultipartConfigElement(String location, long maxFileSize, long maxRequestSize, int fileSizeThreshold) {
         // Keep empty string default if location is null
         if (location != null) {
             this.location = location;
@@ -83,8 +79,7 @@ public class MultipartConfigElement {
     /**
      * Create a programmatic configuration from an annotation.
      *
-     * @param annotation The source annotation to copy to create the
-     *                   programmatic equivalent.
+     * @param annotation The source annotation to copy to create the programmatic equivalent.
      */
     public MultipartConfigElement(MultipartConfig annotation) {
         location = annotation.location();
@@ -121,11 +116,9 @@ public class MultipartConfigElement {
     }
 
     /**
-     * Obtain the size above which the file is save in the temporary location
-     * rather than retained in memory.
+     * Obtain the size above which the file is save in the temporary location rather than retained in memory.
      *
-     * @return the size above which the file is save in the temporary location
-     * rather than retained in memory.
+     * @return the size above which the file is save in the temporary location rather than retained in memory.
      */
     public int getFileSizeThreshold() {
         return fileSizeThreshold;

==================================================
Registration.java
index 08488ec4bc..cbda6b6d23 100644
--- a/java/jakarta/servlet/ReadListener.java
+++ b/java/jakarta/servlet/ReadListener.java
@@ -23,14 +23,12 @@ import java.io.IOException;
  *
  * @since Servlet 3.1
  */
-public interface ReadListener extends java.util.EventListener{
+public interface ReadListener extends java.util.EventListener {
 
     /**
-     * Invoked when data is available to read. The container will invoke this
-     * method the first time for a request as soon as there is data to read.
-     * Subsequent invocations will only occur if a call to
-     * {@link ServletInputStream#isReady()} has returned false and data has
-     * subsequently become available to read.
+     * Invoked when data is available to read. The container will invoke this method the first time for a request as
+     * soon as there is data to read. Subsequent invocations will only occur if a call to
+     * {@link ServletInputStream#isReady()} has returned false and data has subsequently become available to read.
      *
      * @throws IOException id an I/O error occurs while processing the event
      */

==================================================
RequestDispatcher.java
index b88c41e1cd..5badfb7d67 100644
--- a/java/jakarta/servlet/Registration.java
+++ b/java/jakarta/servlet/Registration.java
@@ -45,65 +45,60 @@ public interface Registration {
      *
      * @param name  Name of initialisation parameter
      * @param value Value of initialisation parameter
-     * @return <code>true</code> if the initialisation parameter was set,
-     *         <code>false</code> if the initialisation parameter was not set
-     *         because an initialisation parameter of the same name already
-     *         existed
+     *
+     * @return <code>true</code> if the initialisation parameter was set, <code>false</code> if the initialisation
+     *             parameter was not set because an initialisation parameter of the same name already existed
+     *
      * @throws IllegalArgumentException if name or value is <code>null</code>
-     * @throws IllegalStateException if the ServletContext associated with this
-     *         registration has already been initialised
+     * @throws IllegalStateException    if the ServletContext associated with this registration has already been
+     *                                      initialised
      */
     boolean setInitParameter(String name, String value);
 
     /**
      * Get the value of an initialisation parameter.
      *
-     * @param name  The initialisation parameter whose value is required
+     * @param name The initialisation parameter whose value is required
      *
      * @return The value of the named initialisation parameter
      */
     String getInitParameter(String name);
 
     /**
-     * Add multiple initialisation parameters. If any of the supplied
-     * initialisation parameter conflicts with an existing initialisation
-     * parameter, no updates will be performed.
+     * Add multiple initialisation parameters. If any of the supplied initialisation parameter conflicts with an
+     * existing initialisation parameter, no updates will be performed.
      *
      * @param initParameters The initialisation parameters to add
      *
-     * @return The set of initialisation parameter names that conflicted with
-     *         existing initialisation parameter. If there are no conflicts,
-     *         this Set will be empty.
-     * @throws IllegalArgumentException if any of the supplied initialisation
-     *         parameters have a null name or value
-     * @throws IllegalStateException if the ServletContext associated with this
-     *         registration has already been initialised
+     * @return The set of initialisation parameter names that conflicted with existing initialisation parameter. If
+     *             there are no conflicts, this Set will be empty.
+     *
+     * @throws IllegalArgumentException if any of the supplied initialisation parameters have a null name or value
+     * @throws IllegalStateException    if the ServletContext associated with this registration has already been
+     *                                      initialised
      */
     Set<String> setInitParameters(Map<String,String> initParameters);
 
     /**
      * Get the names and values of all the initialisation parameters.
      *
-     * @return A Map of initialisation parameter names and associated values
-     *         keyed by name
+     * @return A Map of initialisation parameter names and associated values keyed by name
      */
-    Map<String, String> getInitParameters();
+    Map<String,String> getInitParameters();
 
     /**
-     * Interface through which a Servlet or Filter registered via one of the
-     * addServlet or addFilter methods, respectively, on ServletContext may be
-     * further configured.
+     * Interface through which a Servlet or Filter registered via one of the addServlet or addFilter methods,
+     * respectively, on ServletContext may be further configured.
      */
     interface Dynamic extends Registration {
 
         /**
          * Mark this Servlet/Filter as supported asynchronous processing.
          *
-         * @param isAsyncSupported  Should this Servlet/Filter support
-         *                          asynchronous processing
+         * @param isAsyncSupported Should this Servlet/Filter support asynchronous processing
          *
-         * @throws IllegalStateException if the ServletContext associated with
-         *         this registration has already been initialised
+         * @throws IllegalStateException if the ServletContext associated with this registration has already been
+         *                                   initialised
          */
         void setAsyncSupported(boolean isAsyncSupported);
     }

==================================================
Servlet.java
index 6ff68dd4cb..5e6bef4797 100644
--- a/java/jakarta/servlet/RequestDispatcher.java
+++ b/java/jakarta/servlet/RequestDispatcher.java
@@ -19,15 +19,12 @@ package jakarta.servlet;
 import java.io.IOException;
 
 /**
- * Defines an object that receives requests from the client and sends them to
- * any resource (such as a servlet, HTML file, or JSP file) on the server. The
- * servlet container creates the <code>RequestDispatcher</code> object, which is
- * used as a wrapper around a server resource located at a particular path or
- * given by a particular name.
- *
+ * Defines an object that receives requests from the client and sends them to any resource (such as a servlet, HTML
+ * file, or JSP file) on the server. The servlet container creates the <code>RequestDispatcher</code> object, which is
+ * used as a wrapper around a server resource located at a particular path or given by a particular name.
  * <p>
- * This interface is intended to wrap servlets, but a servlet container can
- * create <code>RequestDispatcher</code> objects to wrap any type of resource.
+ * This interface is intended to wrap servlets, but a servlet container can create <code>RequestDispatcher</code>
+ * objects to wrap any type of resource.
  *
  * @see ServletContext#getRequestDispatcher(java.lang.String)
  * @see ServletContext#getNamedDispatcher(java.lang.String)
@@ -36,178 +33,162 @@ import java.io.IOException;
 public interface RequestDispatcher {
 
     /**
-     * The name of the request attribute that should be set by the container
-     * when the {@link #forward(ServletRequest, ServletResponse)} method is
-     * called. It provides the original value of a path-related property of the
-     * request. See the chapter "Forwarded Request Parameters" in the Servlet
-     * Specification for details.
+     * The name of the request attribute that should be set by the container when the
+     * {@link #forward(ServletRequest, ServletResponse)} method is called. It provides the original value of a
+     * path-related property of the request. See the chapter "Forwarded Request Parameters" in the Servlet Specification
+     * for details.
      *
      * @since Servlet 3.0
      */
     String FORWARD_REQUEST_URI = "jakarta.servlet.forward.request_uri";
 
     /**
-     * The name of the request attribute that should be set by the container
-     * when the {@link #forward(ServletRequest, ServletResponse)} method is
-     * called. It provides the original value of a path-related property of the
-     * request. See the chapter "Forwarded Request Parameters" in the Servlet
-     * Specification for details.
+     * The name of the request attribute that should be set by the container when the
+     * {@link #forward(ServletRequest, ServletResponse)} method is called. It provides the original value of a
+     * path-related property of the request. See the chapter "Forwarded Request Parameters" in the Servlet Specification
+     * for details.
      *
      * @since Servlet 3.0
      */
     String FORWARD_CONTEXT_PATH = "jakarta.servlet.forward.context_path";
 
     /**
-     * The name of the request attribute that should be set by the container
-     * when the {@link #forward(ServletRequest, ServletResponse)} method is
-     * called. It provides the original value of a path-related property of the
-     * request. See the chapter "Forwarded Request Parameters" in the Servlet
-     * Specification for details.
+     * The name of the request attribute that should be set by the container when the
+     * {@link #forward(ServletRequest, ServletResponse)} method is called. It provides the original value of a
+     * path-related property of the request. See the chapter "Forwarded Request Parameters" in the Servlet Specification
+     * for details.
      *
      * @since Servlet 4.0
      */
     String FORWARD_MAPPING = "jakarta.servlet.forward.mapping";
 
     /**
-     * The name of the request attribute that should be set by the container
-     * when the {@link #forward(ServletRequest, ServletResponse)} method is
-     * called. It provides the original value of a path-related property of the
-     * request. See the chapter "Forwarded Request Parameters" in the Servlet
-     * Specification for details.
+     * The name of the request attribute that should be set by the container when the
+     * {@link #forward(ServletRequest, ServletResponse)} method is called. It provides the original value of a
+     * path-related property of the request. See the chapter "Forwarded Request Parameters" in the Servlet Specification
+     * for details.
      *
      * @since Servlet 3.0
      */
     String FORWARD_PATH_INFO = "jakarta.servlet.forward.path_info";
 
     /**
-     * The name of the request attribute that should be set by the container
-     * when the {@link #forward(ServletRequest, ServletResponse)} method is
-     * called. It provides the original value of a path-related property of the
-     * request. See the chapter "Forwarded Request Parameters" in the Servlet
-     * Specification for details.
+     * The name of the request attribute that should be set by the container when the
+     * {@link #forward(ServletRequest, ServletResponse)} method is called. It provides the original value of a
+     * path-related property of the request. See the chapter "Forwarded Request Parameters" in the Servlet Specification
+     * for details.
      *
      * @since Servlet 3.0
      */
     String FORWARD_SERVLET_PATH = "jakarta.servlet.forward.servlet_path";
 
     /**
-     * The name of the request attribute that should be set by the container
-     * when the {@link #forward(ServletRequest, ServletResponse)} method is
-     * called. It provides the original value of a path-related property of the
-     * request. See the chapter "Forwarded Request Parameters" in the Servlet
-     * Specification for details.
+     * The name of the request attribute that should be set by the container when the
+     * {@link #forward(ServletRequest, ServletResponse)} method is called. It provides the original value of a
+     * path-related property of the request. See the chapter "Forwarded Request Parameters" in the Servlet Specification
+     * for details.
      *
      * @since Servlet 3.0
      */
     String FORWARD_QUERY_STRING = "jakarta.servlet.forward.query_string";
 
     /**
-     * The name of the request attribute that should be set by the container
-     * when the {@link #include(ServletRequest, ServletResponse)} method is
-     * called on the {@code RequestDispatcher} obtained by a path and not by a
-     * name. It provides information on the path that was used to obtain the
-     * {@code RequestDispatcher} instance for this include call. See the chapter
-     * "Included Request Parameters" in the Servlet Specification for details.
+     * The name of the request attribute that should be set by the container when the
+     * {@link #include(ServletRequest, ServletResponse)} method is called on the {@code RequestDispatcher} obtained by a
+     * path and not by a name. It provides information on the path that was used to obtain the {@code RequestDispatcher}
+     * instance for this include call. See the chapter "Included Request Parameters" in the Servlet Specification for
+     * details.
      *
      * @since Servlet 3.0
      */
     String INCLUDE_REQUEST_URI = "jakarta.servlet.include.request_uri";
 
     /**
-     * The name of the request attribute that should be set by the container
-     * when the {@link #include(ServletRequest, ServletResponse)} method is
-     * called on the {@code RequestDispatcher} obtained by a path and not by a
-     * name. It provides information on the path that was used to obtain the
-     * {@code RequestDispatcher} instance for this include call. See the chapter
-     * "Included Request Parameters" in the Servlet Specification for details.
+     * The name of the request attribute that should be set by the container when the
+     * {@link #include(ServletRequest, ServletResponse)} method is called on the {@code RequestDispatcher} obtained by a
+     * path and not by a name. It provides information on the path that was used to obtain the {@code RequestDispatcher}
+     * instance for this include call. See the chapter "Included Request Parameters" in the Servlet Specification for
+     * details.
      *
      * @since Servlet 3.0
      */
     String INCLUDE_CONTEXT_PATH = "jakarta.servlet.include.context_path";
 
     /**
-     * The name of the request attribute that should be set by the container
-     * when the {@link #include(ServletRequest, ServletResponse)} method is
-     * called on the {@code RequestDispatcher} obtained by a path and not by a
-     * name. It provides information on the path that was used to obtain the
-     * {@code RequestDispatcher} instance for this include call. See the chapter
-     * "Included Request Parameters" in the Servlet Specification for details.
+     * The name of the request attribute that should be set by the container when the
+     * {@link #include(ServletRequest, ServletResponse)} method is called on the {@code RequestDispatcher} obtained by a
+     * path and not by a name. It provides information on the path that was used to obtain the {@code RequestDispatcher}
+     * instance for this include call. See the chapter "Included Request Parameters" in the Servlet Specification for
+     * details.
      *
      * @since Servlet 3.0
      */
     String INCLUDE_PATH_INFO = "jakarta.servlet.include.path_info";
 
     /**
-     * The name of the request attribute that should be set by the container
-     * when the {@link #include(ServletRequest, ServletResponse)} method is
-     * called on the {@code RequestDispatcher} obtained by a path and not by a
-     * name. It provides information on the path that was used to obtain the
-     * {@code RequestDispatcher} instance for this include call. See the chapter
-     * "Included Request Parameters" in the Servlet Specification for details.
+     * The name of the request attribute that should be set by the container when the
+     * {@link #include(ServletRequest, ServletResponse)} method is called on the {@code RequestDispatcher} obtained by a
+     * path and not by a name. It provides information on the path that was used to obtain the {@code RequestDispatcher}
+     * instance for this include call. See the chapter "Included Request Parameters" in the Servlet Specification for
+     * details.
      *
      * @since Servlet 4.0
      */
     String INCLUDE_MAPPING = "jakarta.servlet.include.mapping";
 
     /**
-     * The name of the request attribute that should be set by the container
-     * when the {@link #include(ServletRequest, ServletResponse)} method is
-     * called on the {@code RequestDispatcher} obtained by a path and not by a
-     * name. It provides information on the path that was used to obtain the
-     * {@code RequestDispatcher} instance for this include call. See the chapter
-     * "Included Request Parameters" in the Servlet Specification for details.
+     * The name of the request attribute that should be set by the container when the
+     * {@link #include(ServletRequest, ServletResponse)} method is called on the {@code RequestDispatcher} obtained by a
+     * path and not by a name. It provides information on the path that was used to obtain the {@code RequestDispatcher}
+     * instance for this include call. See the chapter "Included Request Parameters" in the Servlet Specification for
+     * details.
      *
      * @since Servlet 3.0
      */
     String INCLUDE_SERVLET_PATH = "jakarta.servlet.include.servlet_path";
 
     /**
-     * The name of the request attribute that should be set by the container
-     * when the {@link #include(ServletRequest, ServletResponse)} method is
-     * called on the {@code RequestDispatcher} obtained by a path and not by a
-     * name. It provides information on the path that was used to obtain the
-     * {@code RequestDispatcher} instance for this include call. See the chapter
-     * "Included Request Parameters" in the Servlet Specification for details.
+     * The name of the request attribute that should be set by the container when the
+     * {@link #include(ServletRequest, ServletResponse)} method is called on the {@code RequestDispatcher} obtained by a
+     * path and not by a name. It provides information on the path that was used to obtain the {@code RequestDispatcher}
+     * instance for this include call. See the chapter "Included Request Parameters" in the Servlet Specification for
+     * details.
      *
      * @since Servlet 3.0
      */
     String INCLUDE_QUERY_STRING = "jakarta.servlet.include.query_string";
 
     /**
-     * The name of the request attribute that should be set by the container
-     * when custom error-handling servlet or JSP page is invoked. The value of
-     * the attribute is of type {@code java.lang.Throwable}. See the chapter
-     * "Error Handling" in the Servlet Specification for details.
+     * The name of the request attribute that should be set by the container when custom error-handling servlet or JSP
+     * page is invoked. The value of the attribute is of type {@code java.lang.Throwable}. See the chapter "Error
+     * Handling" in the Servlet Specification for details.
      *
      * @since Servlet 3.0
      */
     String ERROR_EXCEPTION = "jakarta.servlet.error.exception";
 
     /**
-     * The name of the request attribute that should be set by the container
-     * when custom error-handling servlet or JSP page is invoked. The value of
-     * the attribute is of type {@code java.lang.Class}. See the chapter
-     * "Error Handling" in the Servlet Specification for details.
+     * The name of the request attribute that should be set by the container when custom error-handling servlet or JSP
+     * page is invoked. The value of the attribute is of type {@code java.lang.Class}. See the chapter "Error Handling"
+     * in the Servlet Specification for details.
      *
      * @since Servlet 3.0
      */
     String ERROR_EXCEPTION_TYPE = "jakarta.servlet.error.exception_type";
 
     /**
-     * The name of the request attribute that should be set by the container
-     * when custom error-handling servlet or JSP page is invoked. The value of
-     * the attribute is of type {@code java.lang.String}. See the chapter
-     * "Error Handling" in the Servlet Specification for details.
+     * The name of the request attribute that should be set by the container when custom error-handling servlet or JSP
+     * page is invoked. The value of the attribute is of type {@code java.lang.String}. See the chapter "Error Handling"
+     * in the Servlet Specification for details.
      *
      * @since Servlet 3.0
      */
     String ERROR_MESSAGE = "jakarta.servlet.error.message";
 
     /**
-     * The name of the request attribute that should be set by the container
-     * when custom error-handling servlet or JSP page is invoked. The value of
-     * the attribute is of type {@code java.lang.String}. See the chapter
-     * "Error Handling" in the Servlet Specification for details.
+     * The name of the request attribute that should be set by the container when custom error-handling servlet or JSP
+     * page is invoked. The value of the attribute is of type {@code java.lang.String}. See the chapter "Error Handling"
+     * in the Servlet Specification for details.
      *
      * @since Servlet 3.0
      */
@@ -222,102 +203,66 @@ public interface RequestDispatcher {
     String ERROR_QUERY_STRING = "jakarta.servlet.error.query_string";
 
     /**
-     * The name of the request attribute that should be set by the container
-     * when custom error-handling servlet or JSP page is invoked. The value of
-     * the attribute is of type {@code java.lang.String}. See the chapter
-     * "Error Handling" in the Servlet Specification for details.
+     * The name of the request attribute that should be set by the container when custom error-handling servlet or JSP
+     * page is invoked. The value of the attribute is of type {@code java.lang.String}. See the chapter "Error Handling"
+     * in the Servlet Specification for details.
      *
      * @since Servlet 3.0
      */
     String ERROR_SERVLET_NAME = "jakarta.servlet.error.servlet_name";
 
     /**
-     * The name of the request attribute that should be set by the container
-     * when custom error-handling servlet or JSP page is invoked. The value of
-     * the attribute is of type {@code java.lang.Integer}. See the chapter
-     * "Error Handling" in the Servlet Specification for details.
+     * The name of the request attribute that should be set by the container when custom error-handling servlet or JSP
+     * page is invoked. The value of the attribute is of type {@code java.lang.Integer}. See the chapter "Error
+     * Handling" in the Servlet Specification for details.
      *
      * @since Servlet 3.0
      */
     String ERROR_STATUS_CODE = "jakarta.servlet.error.status_code";
 
     /**
-     * Forwards a request from a servlet to another resource (servlet, JSP file,
-     * or HTML file) on the server. This method allows one servlet to do
-     * preliminary processing of a request and another resource to generate the
+     * Forwards a request from a servlet to another resource (servlet, JSP file, or HTML file) on the server. This
+     * method allows one servlet to do preliminary processing of a request and another resource to generate the
      * response.
-     *
      * <p>
-     * For a <code>RequestDispatcher</code> obtained via
-     * <code>getRequestDispatcher()</code>, the <code>ServletRequest</code>
-     * object has its path elements and parameters adjusted to match the path of
-     * the target resource.
-     *
+     * For a <code>RequestDispatcher</code> obtained via <code>getRequestDispatcher()</code>, the
+     * <code>ServletRequest</code> object has its path elements and parameters adjusted to match the path of the target
+     * resource.
      * <p>
-     * <code>forward</code> should be called before the response has been
-     * committed to the client (before response body output has been flushed).
-     * If the response already has been committed, this method throws an
-     * <code>IllegalStateException</code>. Uncommitted output in the response
-     * buffer is automatically cleared before the forward.
-     *
+     * <code>forward</code> should be called before the response has been committed to the client (before response body
+     * output has been flushed). If the response already has been committed, this method throws an
+     * <code>IllegalStateException</code>. Uncommitted output in the response buffer is automatically cleared before the
+     * forward.
      * <p>
-     * The request and response parameters must be either the same objects as
-     * were passed to the calling servlet's service method or be subclasses of
-     * the {@link ServletRequestWrapper} or {@link ServletResponseWrapper}
-     * classes that wrap them.
-     *
-     *
-     * @param request
-     *            a {@link ServletRequest} object that represents the request
-     *            the client makes of the servlet
+     * The request and response parameters must be either the same objects as were passed to the calling servlet's
+     * service method or be subclasses of the {@link ServletRequestWrapper} or {@link ServletResponseWrapper} classes
+     * that wrap them.
      *
-     * @param response
-     *            a {@link ServletResponse} object that represents the response
-     *            the servlet returns to the client
+     * @param request  a {@link ServletRequest} object that represents the request the client makes of the servlet
+     * @param response a {@link ServletResponse} object that represents the response the servlet returns to the client
      *
-     * @exception ServletException
-     *                if the target resource throws this exception
-     *
-     * @exception IOException
-     *                if the target resource throws this exception
-     *
-     * @exception IllegalStateException
-     *                if the response was already committed
+     * @exception ServletException      if the target resource throws this exception
+     * @exception IOException           if the target resource throws this exception
+     * @exception IllegalStateException if the response was already committed
      */
-    void forward(ServletRequest request, ServletResponse response)
-            throws ServletException, IOException;
+    void forward(ServletRequest request, ServletResponse response) throws ServletException, IOException;
 
     /**
-     * Includes the content of a resource (servlet, JSP page, HTML file) in the
-     * response. In essence, this method enables programmatic server-side
-     * includes.
-     *
+     * Includes the content of a resource (servlet, JSP page, HTML file) in the response. In essence, this method
+     * enables programmatic server-side includes.
      * <p>
-     * The {@link ServletResponse} object has its path elements and parameters
-     * remain unchanged from the caller's. The included servlet cannot change
-     * the response status code or set headers; any attempt to make a change is
-     * ignored.
-     *
+     * The {@link ServletResponse} object has its path elements and parameters remain unchanged from the caller's. The
+     * included servlet cannot change the response status code or set headers; any attempt to make a change is ignored.
      * <p>
-     * The request and response parameters must be either the same objects as
-     * were passed to the calling servlet's service method or be subclasses of
-     * the {@link ServletRequestWrapper} or {@link ServletResponseWrapper}
-     * classes that wrap them.
-     *
-     * @param request
-     *            a {@link ServletRequest} object that contains the client's
-     *            request
-     *
-     * @param response
-     *            a {@link ServletResponse} object that contains the servlet's
-     *            response
+     * The request and response parameters must be either the same objects as were passed to the calling servlet's
+     * service method or be subclasses of the {@link ServletRequestWrapper} or {@link ServletResponseWrapper} classes
+     * that wrap them.
      *
-     * @exception ServletException
-     *                if the included resource throws this exception
+     * @param request  a {@link ServletRequest} object that contains the client's request
+     * @param response a {@link ServletResponse} object that contains the servlet's response
      *
-     * @exception IOException
-     *                if the included resource throws this exception
+     * @exception ServletException if the included resource throws this exception
+     * @exception IOException      if the included resource throws this exception
      */
-    void include(ServletRequest request, ServletResponse response)
-            throws ServletException, IOException;
+    void include(ServletRequest request, ServletResponse response) throws ServletException, IOException;
 }

==================================================
ServletConfig.java
index f19b751711..c234a1f4df 100644
--- a/java/jakarta/servlet/Servlet.java
+++ b/java/jakarta/servlet/Servlet.java
@@ -20,35 +20,25 @@ import java.io.IOException;
 
 /**
  * Defines methods that all servlets must implement.
- *
  * <p>
- * A servlet is a small Java program that runs within a Web server. Servlets
- * receive and respond to requests from Web clients, usually across HTTP, the
- * HyperText Transfer Protocol.
- *
+ * A servlet is a small Java program that runs within a Web server. Servlets receive and respond to requests from Web
+ * clients, usually across HTTP, the HyperText Transfer Protocol.
  * <p>
- * To implement this interface, you can write a generic servlet that extends
- * <code>jakarta.servlet.GenericServlet</code> or an HTTP servlet that extends
- * <code>jakarta.servlet.http.HttpServlet</code>.
- *
+ * To implement this interface, you can write a generic servlet that extends <code>jakarta.servlet.GenericServlet</code>
+ * or an HTTP servlet that extends <code>jakarta.servlet.http.HttpServlet</code>.
  * <p>
- * This interface defines methods to initialize a servlet, to service requests,
- * and to remove a servlet from the server. These are known as life-cycle
- * methods and are called in the following sequence:
+ * This interface defines methods to initialize a servlet, to service requests, and to remove a servlet from the server.
+ * These are known as life-cycle methods and are called in the following sequence:
  * <ol>
- * <li>The servlet is constructed, then initialized with the <code>init</code>
- * method.
+ * <li>The servlet is constructed, then initialized with the <code>init</code> method.
  * <li>Any calls from clients to the <code>service</code> method are handled.
- * <li>The servlet is taken out of service, then destroyed with the
- * <code>destroy</code> method, then garbage collected and finalized.
+ * <li>The servlet is taken out of service, then destroyed with the <code>destroy</code> method, then garbage collected
+ * and finalized.
  * </ol>
- *
  * <p>
- * In addition to the life-cycle methods, this interface provides the
- * <code>getServletConfig</code> method, which the servlet can use to get any
- * startup information, and the <code>getServletInfo</code> method, which allows
- * the servlet to return basic information about itself, such as author,
- * version, and copyright.
+ * In addition to the life-cycle methods, this interface provides the <code>getServletConfig</code> method, which the
+ * servlet can use to get any startup information, and the <code>getServletInfo</code> method, which allows the servlet
+ * to return basic information about itself, such as author, version, and copyright.
  *
  * @see GenericServlet
  * @see jakarta.servlet.http.HttpServlet
@@ -56,30 +46,21 @@ import java.io.IOException;
 public interface Servlet {
 
     /**
-     * Called by the servlet container to indicate to a servlet that the servlet
-     * is being placed into service.
-     *
+     * Called by the servlet container to indicate to a servlet that the servlet is being placed into service.
      * <p>
-     * The servlet container calls the <code>init</code> method exactly once
-     * after instantiating the servlet. The <code>init</code> method must
-     * complete successfully before the servlet can receive any requests.
-     *
+     * The servlet container calls the <code>init</code> method exactly once after instantiating the servlet. The
+     * <code>init</code> method must complete successfully before the servlet can receive any requests.
      * <p>
-     * The servlet container cannot place the servlet into service if the
-     * <code>init</code> method
+     * The servlet container cannot place the servlet into service if the <code>init</code> method
      * <ol>
      * <li>Throws a <code>ServletException</code>
      * <li>Does not return within a time period defined by the Web server
      * </ol>
      *
+     * @param config a <code>ServletConfig</code> object containing the servlet's configuration and initialization
+     *                   parameters
      *
-     * @param config
-     *            a <code>ServletConfig</code> object containing the servlet's
-     *            configuration and initialization parameters
-     *
-     * @exception ServletException
-     *                if an exception has occurred that interferes with the
-     *                servlet's normal operation
+     * @exception ServletException if an exception has occurred that interferes with the servlet's normal operation
      *
      * @see UnavailableException
      * @see #getServletConfig
@@ -87,90 +68,57 @@ public interface Servlet {
     void init(ServletConfig config) throws ServletException;
 
     /**
-     * Returns a {@link ServletConfig} object, which contains initialization and
-     * startup parameters for this servlet. The <code>ServletConfig</code>
-     * object returned is the one passed to the <code>init</code> method.
-     *
+     * Returns a {@link ServletConfig} object, which contains initialization and startup parameters for this servlet.
+     * The <code>ServletConfig</code> object returned is the one passed to the <code>init</code> method.
      * <p>
-     * Implementations of this interface are responsible for storing the
-     * <code>ServletConfig</code> object so that this method can return it. The
-     * {@link GenericServlet} class, which implements this interface, already
-     * does this.
+     * Implementations of this interface are responsible for storing the <code>ServletConfig</code> object so that this
+     * method can return it. The {@link GenericServlet} class, which implements this interface, already does this.
      *
-     * @return the <code>ServletConfig</code> object that initializes this
-     *         servlet
+     * @return the <code>ServletConfig</code> object that initializes this servlet
      *
      * @see #init
      */
     ServletConfig getServletConfig();
 
     /**
-     * Called by the servlet container to allow the servlet to respond to a
-     * request.
-     *
+     * Called by the servlet container to allow the servlet to respond to a request.
      * <p>
-     * This method is only called after the servlet's <code>init()</code> method
-     * has completed successfully.
-     *
+     * This method is only called after the servlet's <code>init()</code> method has completed successfully.
      * <p>
-     * The status code of the response always should be set for a servlet that
-     * throws or sends an error.
-     *
-     *
+     * The status code of the response always should be set for a servlet that throws or sends an error.
      * <p>
-     * Servlets typically run inside multithreaded servlet containers that can
-     * handle multiple requests concurrently. Developers must be aware to
-     * synchronize access to any shared resources such as files, network
-     * connections, and as well as the servlet's class and instance variables.
-     * More information on multithreaded programming in Java is available in <a
-     * href
-     * ="http://java.sun.com/Series/Tutorial/java/threads/multithreaded.html">
-     * the Java tutorial on multi-threaded programming</a>.
-     *
+     * Servlets typically run inside multithreaded servlet containers that can handle multiple requests concurrently.
+     * Developers must be aware to synchronize access to any shared resources such as files, network connections, and as
+     * well as the servlet's class and instance variables. More information on multithreaded programming in Java is
+     * available in <a href ="http://java.sun.com/Series/Tutorial/java/threads/multithreaded.html"> the Java tutorial on
+     * multi-threaded programming</a>.
      *
-     * @param req
-     *            the <code>ServletRequest</code> object that contains the
-     *            client's request
+     * @param req the <code>ServletRequest</code> object that contains the client's request
+     * @param res the <code>ServletResponse</code> object that contains the servlet's response
      *
-     * @param res
-     *            the <code>ServletResponse</code> object that contains the
-     *            servlet's response
-     *
-     * @exception ServletException
-     *                if an exception occurs that interferes with the servlet's
-     *                normal operation
-     *
-     * @exception IOException
-     *                if an input or output exception occurs
+     * @exception ServletException if an exception occurs that interferes with the servlet's normal operation
+     * @exception IOException      if an input or output exception occurs
      */
-    void service(ServletRequest req, ServletResponse res)
-            throws ServletException, IOException;
+    void service(ServletRequest req, ServletResponse res) throws ServletException, IOException;
 
     /**
-     * Returns information about the servlet, such as author, version, and
-     * copyright.
-     *
+     * Returns information about the servlet, such as author, version, and copyright.
      * <p>
-     * The string that this method returns should be plain text and not markup
-     * of any kind (such as HTML, XML, etc.).
+     * The string that this method returns should be plain text and not markup of any kind (such as HTML, XML, etc.).
      *
      * @return a <code>String</code> containing servlet information
      */
     String getServletInfo();
 
     /**
-     * Called by the servlet container to indicate to a servlet that the servlet
-     * is being taken out of service. This method is only called once all
-     * threads within the servlet's <code>service</code> method have exited or
-     * after a timeout period has passed. After the servlet container calls this
-     * method, it will not call the <code>service</code> method again on this
-     * servlet.
-     *
+     * Called by the servlet container to indicate to a servlet that the servlet is being taken out of service. This
+     * method is only called once all threads within the servlet's <code>service</code> method have exited or after a
+     * timeout period has passed. After the servlet container calls this method, it will not call the
+     * <code>service</code> method again on this servlet.
      * <p>
-     * This method gives the servlet an opportunity to clean up any resources
-     * that are being held (for example, memory, file handles, threads) and make
-     * sure that any persistent state is synchronized with the servlet's current
-     * state in memory.
+     * This method gives the servlet an opportunity to clean up any resources that are being held (for example, memory,
+     * file handles, threads) and make sure that any persistent state is synchronized with the servlet's current state
+     * in memory.
      */
     void destroy();
 }

==================================================
ServletConnection.java
index ee3f0d8a60..f0c750ea57 100644
--- a/java/jakarta/servlet/ServletConfig.java
+++ b/java/jakarta/servlet/ServletConfig.java
@@ -19,51 +19,45 @@ package jakarta.servlet;
 import java.util.Enumeration;
 
 /**
- * A servlet configuration object used by a servlet container to pass
- * information to a servlet during initialization.
+ * A servlet configuration object used by a servlet container to pass information to a servlet during initialization.
  */
 public interface ServletConfig {
 
     /**
-     * Returns the name of this servlet instance. The name may be provided via
-     * server administration, assigned in the web application deployment
-     * descriptor, or for an unregistered (and thus unnamed) servlet instance it
-     * will be the servlet's class name.
+     * Returns the name of this servlet instance. The name may be provided via server administration, assigned in the
+     * web application deployment descriptor, or for an unregistered (and thus unnamed) servlet instance it will be the
+     * servlet's class name.
      *
      * @return the name of the servlet instance
      */
     String getServletName();
 
     /**
-     * Returns a reference to the {@link ServletContext} in which the caller is
-     * executing.
+     * Returns a reference to the {@link ServletContext} in which the caller is executing.
+     *
+     * @return a {@link ServletContext} object, used by the caller to interact with its servlet container
      *
-     * @return a {@link ServletContext} object, used by the caller to interact
-     *         with its servlet container
      * @see ServletContext
      */
     ServletContext getServletContext();
 
     /**
-     * Returns a <code>String</code> containing the value of the named
-     * initialization parameter, or <code>null</code> if the parameter does not
-     * exist.
+     * Returns a <code>String</code> containing the value of the named initialization parameter, or <code>null</code> if
+     * the parameter does not exist.
+     *
+     * @param name a <code>String</code> specifying the name of the initialization parameter
      *
-     * @param name
-     *            a <code>String</code> specifying the name of the
-     *            initialization parameter
-     * @return a <code>String</code> containing the value of the initialization
-     *         parameter
+     * @return a <code>String</code> containing the value of the initialization parameter
      */
     String getInitParameter(String name);
 
     /**
-     * Returns the names of the servlet's initialization parameters as an
-     * <code>Enumeration</code> of <code>String</code> objects, or an empty
-     * <code>Enumeration</code> if the servlet has no initialization parameters.
+     * Returns the names of the servlet's initialization parameters as an <code>Enumeration</code> of
+     * <code>String</code> objects, or an empty <code>Enumeration</code> if the servlet has no initialization
+     * parameters.
      *
-     * @return an <code>Enumeration</code> of <code>String</code> objects
-     *         containing the names of the servlet's initialization parameters
+     * @return an <code>Enumeration</code> of <code>String</code> objects containing the names of the servlet's
+     *             initialization parameters
      */
     Enumeration<String> getInitParameterNames();
 }

==================================================
ServletContainerInitializer.java
index 471dde7721..acdaee139d 100644
--- a/java/jakarta/servlet/ServletConnection.java
+++ b/java/jakarta/servlet/ServletConnection.java
@@ -17,52 +17,43 @@
 package jakarta.servlet;
 
 /**
- * Provides information about the connection made to the Servlet container. This
- * interface is intended primarily for debugging purposes and as such provides
- * the raw information as seen by the container. Unless explicitly stated
- * otherwise in the Javadoc for a method, no adjustment is made for the presence
- * of reverse proxies or similar configurations.
+ * Provides information about the connection made to the Servlet container. This interface is intended primarily for
+ * debugging purposes and as such provides the raw information as seen by the container. Unless explicitly stated
+ * otherwise in the Javadoc for a method, no adjustment is made for the presence of reverse proxies or similar
+ * configurations.
  *
  * @since Servlet 6.0
  */
 public interface ServletConnection {
 
     /**
-     * Obtain a unique (within the lifetime of the JVM) identifier string for
-     * the network connection to the JVM that is being used for the
-     * {@code ServletRequest} from which this {@code ServletConnection} was
-     * obtained.
+     * Obtain a unique (within the lifetime of the JVM) identifier string for the network connection to the JVM that is
+     * being used for the {@code ServletRequest} from which this {@code ServletConnection} was obtained.
      * <p>
-     * There is no defined format for this string. The format is implementation
-     * dependent.
+     * There is no defined format for this string. The format is implementation dependent.
      *
      * @return A unique identifier for the network connection
      */
     String getConnectionId();
 
     /**
-     * Obtain the name of the protocol as presented to the server after the
-     * removal, if present, of any TLS or similar encryption. This may not be
-     * the same as the protocol seen by the application. For example, a reverse
-     * proxy may present AJP whereas the application will see HTTP 1.1.
+     * Obtain the name of the protocol as presented to the server after the removal, if present, of any TLS or similar
+     * encryption. This may not be the same as the protocol seen by the application. For example, a reverse proxy may
+     * present AJP whereas the application will see HTTP 1.1.
      * <p>
      * If the protocol has an entry in the <a href=
      * "https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids">IANA
-     * registry for ALPN names</a> then the identification sequence, in string
-     * form, must be returned. Registered identification sequences MUST only be
-     * used for the associated protocol. Return values for other protocols are
-     * implementation dependent. Unknown protocols should return the string
-     * "unknown".
+     * registry for ALPN names</a> then the identification sequence, in string form, must be returned. Registered
+     * identification sequences MUST only be used for the associated protocol. Return values for other protocols are
+     * implementation dependent. Unknown protocols should return the string "unknown".
      *
-     * @return The name of the protocol presented to the server after decryption
-     *         of TLS, or similar encryption, if any.
+     * @return The name of the protocol presented to the server after decryption of TLS, or similar encryption, if any.
      */
     String getProtocol();
 
     /**
-     * Obtain the connection identifier for the network connection to the server
-     * that is being used for the {@code ServletRequest} from which this
-     * {@code ServletConnection} was obtained as defined by the protocol in use.
+     * Obtain the connection identifier for the network connection to the server that is being used for the
+     * {@code ServletRequest} from which this {@code ServletConnection} was obtained as defined by the protocol in use.
      * Note that some protocols do not define such an identifier.
      * <p>
      * Examples of protocol provided connection identifiers include:
@@ -77,19 +68,16 @@ public interface ServletConnection {
      * <dd>None, so the empty string should be returned</dd>
      * </dl>
      *
-     * @return The connection identifier if one is defined, otherwise an empty
-     *         string
+     * @return The connection identifier if one is defined, otherwise an empty string
      */
     String getProtocolConnectionId();
 
     /**
-     * Determine whether or not the incoming network connection to the server
-     * used encryption or not. Note that where a reverse proxy is used, the
-     * application may have a different view as to whether encryption is being
-     * used due to the use of headers like {@code X-Forwarded-Proto}.
+     * Determine whether or not the incoming network connection to the server used encryption or not. Note that where a
+     * reverse proxy is used, the application may have a different view as to whether encryption is being used due to
+     * the use of headers like {@code X-Forwarded-Proto}.
      *
-     * @return {@code true} if the incoming network connection used encryption,
-     *         otherwise {@code false}
+     * @return {@code true} if the incoming network connection used encryption, otherwise {@code false}
      */
     boolean isSecure();
 }
\ No newline at end of file

==================================================
ServletContext.java
index 5f043355fd..14e0ec7926 100644
--- a/java/jakarta/servlet/ServletContainerInitializer.java
+++ b/java/jakarta/servlet/ServletContainerInitializer.java
@@ -19,33 +19,27 @@ package jakarta.servlet;
 import java.util.Set;
 
 /**
- * ServletContainerInitializers (SCIs) are registered via an entry in the
- * file META-INF/services/jakarta.servlet.ServletContainerInitializer that must be
- * included in the JAR file that contains the SCI implementation.
+ * ServletContainerInitializers (SCIs) are registered via an entry in the file
+ * META-INF/services/jakarta.servlet.ServletContainerInitializer that must be included in the JAR file that contains the
+ * SCI implementation.
  * <p>
- * SCI processing is performed regardless of the setting of metadata-complete.
- * SCI processing can be controlled per JAR file via fragment ordering. If
- * absolute ordering is defined, then only the JARs included in the ordering
- * will be processed for SCIs. To disable SCI processing completely, an empty
- * absolute ordering may be defined.
+ * SCI processing is performed regardless of the setting of metadata-complete. SCI processing can be controlled per JAR
+ * file via fragment ordering. If absolute ordering is defined, then only the JARs included in the ordering will be
+ * processed for SCIs. To disable SCI processing completely, an empty absolute ordering may be defined.
  * <p>
- * SCIs register an interest in annotations (class, method or field) and/or
- * types via the {@link jakarta.servlet.annotation.HandlesTypes} annotation which
- * is added to the class.
+ * SCIs register an interest in annotations (class, method or field) and/or types via the
+ * {@link jakarta.servlet.annotation.HandlesTypes} annotation which is added to the class.
  *
  * @since Servlet 3.0
  */
 public interface ServletContainerInitializer {
 
     /**
-     * Receives notification during startup of a web application of the classes
-     * within the web application that matched the criteria defined via the
-     * {@link jakarta.servlet.annotation.HandlesTypes} annotation.
+     * Receives notification during startup of a web application of the classes within the web application that matched
+     * the criteria defined via the {@link jakarta.servlet.annotation.HandlesTypes} annotation.
      *
-     * @param c     The (possibly null) set of classes that met the specified
-     *              criteria
-     * @param ctx   The ServletContext of the web application in which the
-     *              classes were discovered
+     * @param c   The (possibly null) set of classes that met the specified criteria
+     * @param ctx The ServletContext of the web application in which the classes were discovered
      *
      * @throws ServletException If an error occurs
      */

==================================================
ServletContextAttributeEvent.java
index 604d9aef56..8d40ab6db9 100644
--- a/java/jakarta/servlet/ServletContext.java
+++ b/java/jakarta/servlet/ServletContext.java
@@ -28,24 +28,19 @@ import java.util.Set;
 import jakarta.servlet.descriptor.JspConfigDescriptor;
 
 /**
- * Defines a set of methods that a servlet uses to communicate with its servlet
- * container, for example, to get the MIME type of a file, dispatch requests, or
- * write to a log file.
+ * Defines a set of methods that a servlet uses to communicate with its servlet container, for example, to get the MIME
+ * type of a file, dispatch requests, or write to a log file.
  * <p>
- * There is one context per "web application" per Java Virtual Machine. (A
- * "web application" is a collection of servlets and content installed under a
- * specific subset of the server's URL namespace such as <code>/catalog</code>
- * and possibly installed via a <code>.war</code> file.)
+ * There is one context per "web application" per Java Virtual Machine. (A "web application" is a collection of servlets
+ * and content installed under a specific subset of the server's URL namespace such as <code>/catalog</code> and
+ * possibly installed via a <code>.war</code> file.)
  * <p>
- * In the case of a web application marked "distributed" in its deployment
- * descriptor, there will be one context instance for each virtual machine. In
- * this situation, the context cannot be used as a location to share global
- * information (because the information won't be truly global). Use an external
- * resource like a database instead.
+ * In the case of a web application marked "distributed" in its deployment descriptor, there will be one context
+ * instance for each virtual machine. In this situation, the context cannot be used as a location to share global
+ * information (because the information won't be truly global). Use an external resource like a database instead.
  * <p>
- * The <code>ServletContext</code> object is contained within the
- * {@link ServletConfig} object, which the Web server provides the servlet when
- * the servlet is initialized.
+ * The <code>ServletContext</code> object is contained within the {@link ServletConfig} object, which the Web server
+ * provides the servlet when the servlet is initialized.
  *
  * @see Servlet#getServletConfig
  * @see ServletConfig#getServletContext
@@ -53,14 +48,12 @@ import jakarta.servlet.descriptor.JspConfigDescriptor;
 public interface ServletContext {
 
     /**
-     * The name of the ServletContext attribute that holds the temporary file
-     * location for the web application.
+     * The name of the ServletContext attribute that holds the temporary file location for the web application.
      */
     String TEMPDIR = "jakarta.servlet.context.tempdir";
 
     /**
-     * The name of the ServletContext attribute that holds the ordered list of
-     * web fragments for this web application.
+     * The name of the ServletContext attribute that holds the ordered list of web fragments for this web application.
      *
      * @since Servlet 3.0
      */
@@ -76,49 +69,42 @@ public interface ServletContext {
     String getContextPath();
 
     /**
-     * Returns a <code>ServletContext</code> object that corresponds to a
-     * specified URL on the server.
+     * Returns a <code>ServletContext</code> object that corresponds to a specified URL on the server.
      * <p>
-     * This method allows servlets to gain access to the context for various
-     * parts of the server, and as needed obtain {@link RequestDispatcher}
-     * objects from the context. The given path must be begin with "/", is
-     * interpreted relative to the server's document root and is matched against
-     * the context roots of other web applications hosted on this container.
+     * This method allows servlets to gain access to the context for various parts of the server, and as needed obtain
+     * {@link RequestDispatcher} objects from the context. The given path must be begin with "/", is interpreted
+     * relative to the server's document root and is matched against the context roots of other web applications hosted
+     * on this container.
      * <p>
-     * In a security conscious environment, the servlet container may return
-     * <code>null</code> for a given URL.
-     *
-     * @param uripath
-     *            a <code>String</code> specifying the context path of another
-     *            web application in the container.
-     * @return the <code>ServletContext</code> object that corresponds to the
-     *         named URL, or null if either none exists or the container wishes
-     *         to restrict this access.
+     * In a security conscious environment, the servlet container may return <code>null</code> for a given URL.
+     *
+     * @param uripath a <code>String</code> specifying the context path of another web application in the container.
+     *
+     * @return the <code>ServletContext</code> object that corresponds to the named URL, or null if either none exists
+     *             or the container wishes to restrict this access.
+     *
      * @see RequestDispatcher
      */
     ServletContext getContext(String uripath);
 
     /**
-     * Returns the major version of the Java Servlet API that this servlet
-     * container supports. All implementations that comply with Version 6.0 must
-     * have this method return the integer 6.
+     * Returns the major version of the Java Servlet API that this servlet container supports. All implementations that
+     * comply with Version 6.0 must have this method return the integer 6.
      *
      * @return 6
      */
     int getMajorVersion();
 
     /**
-     * Returns the minor version of the Servlet API that this servlet container
-     * supports. All implementations that comply with Version 6.0 must have this
-     * method return the integer 0.
+     * Returns the minor version of the Servlet API that this servlet container supports. All implementations that
+     * comply with Version 6.0 must have this method return the integer 0.
      *
      * @return 0
      */
     int getMinorVersion();
 
     /**
-     * Obtain the major version of the servlet specification for which this web
-     * application is implemented.
+     * Obtain the major version of the servlet specification for which this web application is implemented.
      *
      * @return The major version declared in web.xml
      *
@@ -127,8 +113,7 @@ public interface ServletContext {
     int getEffectiveMajorVersion();
 
     /**
-     * Obtain the minor version of the servlet specification for which this web
-     * application is implemented.
+     * Obtain the minor version of the servlet specification for which this web application is implemented.
      *
      * @return The minor version declared in web.xml
      *
@@ -137,24 +122,21 @@ public interface ServletContext {
     int getEffectiveMinorVersion();
 
     /**
-     * Returns the MIME type of the specified file, or <code>null</code> if the
-     * MIME type is not known. The MIME type is determined by the configuration
-     * of the servlet container, and may be specified in a web application
-     * deployment descriptor. Common MIME types are <code>"text/html"</code> and
-     * <code>"image/gif"</code>.
-     *
-     * @param file
-     *            a <code>String</code> specifying the name of a file
+     * Returns the MIME type of the specified file, or <code>null</code> if the MIME type is not known. The MIME type is
+     * determined by the configuration of the servlet container, and may be specified in a web application deployment
+     * descriptor. Common MIME types are <code>"text/html"</code> and <code>"image/gif"</code>.
+     *
+     * @param file a <code>String</code> specifying the name of a file
+     *
      * @return a <code>String</code> specifying the file's MIME type
      */
     String getMimeType(String file);
 
     /**
-     * Returns a directory-like listing of all the paths to resources within the
-     * web application whose longest sub-path matches the supplied path
-     * argument. Paths indicating subdirectory paths end with a '/'. The
-     * returned paths are all relative to the root of the web application and
-     * have a leading '/'. For example, for a web application containing<br>
+     * Returns a directory-like listing of all the paths to resources within the web application whose longest sub-path
+     * matches the supplied path argument. Paths indicating subdirectory paths end with a '/'. The returned paths are
+     * all relative to the root of the web application and have a leading '/'. For example, for a web application
+     * containing<br>
      * <br>
      * /welcome.html<br>
      * /catalog/index.html<br>
@@ -165,127 +147,103 @@ public interface ServletContext {
      * /WEB-INF/web.xml<br>
      * /WEB-INF/classes/com.acme.OrderServlet.class,<br>
      * <br>
-     * getResourcePaths("/") returns {"/welcome.html", "/catalog/",
-     * "/customer/", "/WEB-INF/"}<br>
-     * getResourcePaths("/catalog/") returns {"/catalog/index.html",
-     * "/catalog/products.html", "/catalog/offers/"}.<br>
-     *
-     * @param path
-     *            the partial path used to match the resources, which must start
-     *            with a /
-     * @return a Set containing the directory listing, or null if there are no
-     *         resources in the web application whose path begins with the
-     *         supplied path.
+     * getResourcePaths("/") returns {"/welcome.html", "/catalog/", "/customer/", "/WEB-INF/"}<br>
+     * getResourcePaths("/catalog/") returns {"/catalog/index.html", "/catalog/products.html", "/catalog/offers/"}.<br>
+     *
+     * @param path the partial path used to match the resources, which must start with a /
+     *
+     * @return a Set containing the directory listing, or null if there are no resources in the web application whose
+     *             path begins with the supplied path.
+     *
      * @since Servlet 2.3
      */
     Set<String> getResourcePaths(String path);
 
     /**
-     * Returns a URL to the resource that is mapped to a specified path. The
-     * path must begin with a "/" and is interpreted as relative to the current
-     * context root.
+     * Returns a URL to the resource that is mapped to a specified path. The path must begin with a "/" and is
+     * interpreted as relative to the current context root.
      * <p>
-     * This method allows the servlet container to make a resource available to
-     * servlets from any source. Resources can be located on a local or remote
-     * file system, in a database, or in a <code>.war</code> file.
+     * This method allows the servlet container to make a resource available to servlets from any source. Resources can
+     * be located on a local or remote file system, in a database, or in a <code>.war</code> file.
      * <p>
-     * The servlet container must implement the URL handlers and
-     * <code>URLConnection</code> objects that are necessary to access the
-     * resource.
+     * The servlet container must implement the URL handlers and <code>URLConnection</code> objects that are necessary
+     * to access the resource.
      * <p>
-     * This method returns <code>null</code> if no resource is mapped to the
-     * pathname.
+     * This method returns <code>null</code> if no resource is mapped to the pathname.
      * <p>
-     * Some containers may allow writing to the URL returned by this method
-     * using the methods of the URL class.
+     * Some containers may allow writing to the URL returned by this method using the methods of the URL class.
      * <p>
-     * The resource content is returned directly, so be aware that requesting a
-     * <code>.jsp</code> page returns the JSP source code. Use a
-     * <code>RequestDispatcher</code> instead to include results of an
-     * execution.
+     * The resource content is returned directly, so be aware that requesting a <code>.jsp</code> page returns the JSP
+     * source code. Use a <code>RequestDispatcher</code> instead to include results of an execution.
      * <p>
-     * This method has a different purpose than
-     * <code>java.lang.Class.getResource</code>, which looks up resources based
+     * This method has a different purpose than <code>java.lang.Class.getResource</code>, which looks up resources based
      * on a class loader. This method does not use class loaders.
      *
-     * @param path
-     *            a <code>String</code> specifying the path to the resource
-     * @return the resource located at the named path, or <code>null</code> if
-     *         there is no resource at that path
-     * @exception MalformedURLException
-     *                if the pathname is not given in the correct form
+     * @param path a <code>String</code> specifying the path to the resource
+     *
+     * @return the resource located at the named path, or <code>null</code> if there is no resource at that path
+     *
+     * @exception MalformedURLException if the pathname is not given in the correct form
      */
     URL getResource(String path) throws MalformedURLException;
 
     /**
-     * Returns the resource located at the named path as an
-     * <code>InputStream</code> object.
+     * Returns the resource located at the named path as an <code>InputStream</code> object.
      * <p>
-     * The data in the <code>InputStream</code> can be of any type or length.
-     * The path must be specified according to the rules given in
-     * <code>getResource</code>. This method returns <code>null</code> if no
-     * resource exists at the specified path.
+     * The data in the <code>InputStream</code> can be of any type or length. The path must be specified according to
+     * the rules given in <code>getResource</code>. This method returns <code>null</code> if no resource exists at the
+     * specified path.
      * <p>
-     * Meta-information such as content length and content type that is
-     * available via <code>getResource</code> method is lost when using this
-     * method.
+     * Meta-information such as content length and content type that is available via <code>getResource</code> method is
+     * lost when using this method.
      * <p>
-     * The servlet container must implement the URL handlers and
-     * <code>URLConnection</code> objects necessary to access the resource.
+     * The servlet container must implement the URL handlers and <code>URLConnection</code> objects necessary to access
+     * the resource.
      * <p>
-     * This method is different from
-     * <code>java.lang.Class.getResourceAsStream</code>, which uses a class
-     * loader. This method allows servlet containers to make a resource
-     * available to a servlet from any location, without using a class loader.
-     *
-     * @param path
-     *            a <code>String</code> specifying the path to the resource
-     * @return the <code>InputStream</code> returned to the servlet, or
-     *         <code>null</code> if no resource exists at the specified path
+     * This method is different from <code>java.lang.Class.getResourceAsStream</code>, which uses a class loader. This
+     * method allows servlet containers to make a resource available to a servlet from any location, without using a
+     * class loader.
+     *
+     * @param path a <code>String</code> specifying the path to the resource
+     *
+     * @return the <code>InputStream</code> returned to the servlet, or <code>null</code> if no resource exists at the
+     *             specified path
      */
     InputStream getResourceAsStream(String path);
 
     /**
-     * Returns a {@link RequestDispatcher} object that acts as a wrapper for the
-     * resource located at the given path. A <code>RequestDispatcher</code>
-     * object can be used to forward a request to the resource or to include the
-     * resource in a response. The resource can be dynamic or static.
+     * Returns a {@link RequestDispatcher} object that acts as a wrapper for the resource located at the given path. A
+     * <code>RequestDispatcher</code> object can be used to forward a request to the resource or to include the resource
+     * in a response. The resource can be dynamic or static.
      * <p>
-     * The pathname must begin with a "/" and is interpreted as relative to the
-     * current context root. Use <code>getContext</code> to obtain a
-     * <code>RequestDispatcher</code> for resources in foreign contexts. This
-     * method returns <code>null</code> if the <code>ServletContext</code>
-     * cannot return a <code>RequestDispatcher</code>.
-     *
-     * @param path
-     *            a <code>String</code> specifying the pathname to the resource
-     * @return a <code>RequestDispatcher</code> object that acts as a wrapper for
-     *         the resource at the specified path, or <code>null</code> if the
-     *         <code>ServletContext</code> cannot return a
-     *         <code>RequestDispatcher</code>
+     * The pathname must begin with a "/" and is interpreted as relative to the current context root. Use
+     * <code>getContext</code> to obtain a <code>RequestDispatcher</code> for resources in foreign contexts. This method
+     * returns <code>null</code> if the <code>ServletContext</code> cannot return a <code>RequestDispatcher</code>.
+     *
+     * @param path a <code>String</code> specifying the pathname to the resource
+     *
+     * @return a <code>RequestDispatcher</code> object that acts as a wrapper for the resource at the specified path, or
+     *             <code>null</code> if the <code>ServletContext</code> cannot return a <code>RequestDispatcher</code>
+     *
      * @see RequestDispatcher
      * @see ServletContext#getContext
      */
     RequestDispatcher getRequestDispatcher(String path);
 
     /**
-     * Returns a {@link RequestDispatcher} object that acts as a wrapper for the
-     * named servlet.
+     * Returns a {@link RequestDispatcher} object that acts as a wrapper for the named servlet.
      * <p>
-     * Servlets (and JSP pages also) may be given names via server
-     * administration or via a web application deployment descriptor. A servlet
-     * instance can determine its name using
-     * {@link ServletConfig#getServletName}.
+     * Servlets (and JSP pages also) may be given names via server administration or via a web application deployment
+     * descriptor. A servlet instance can determine its name using {@link ServletConfig#getServletName}.
      * <p>
-     * This method returns <code>null</code> if the <code>ServletContext</code>
-     * cannot return a <code>RequestDispatcher</code> for any reason.
-     *
-     * @param name
-     *            a <code>String</code> specifying the name of a servlet to wrap
-     * @return a <code>RequestDispatcher</code> object that acts as a wrapper for
-     *         the named servlet, or <code>null</code> if the
-     *         <code>ServletContext</code> cannot return a
-     *         <code>RequestDispatcher</code>
+     * This method returns <code>null</code> if the <code>ServletContext</code> cannot return a
+     * <code>RequestDispatcher</code> for any reason.
+     *
+     * @param name a <code>String</code> specifying the name of a servlet to wrap
+     *
+     * @return a <code>RequestDispatcher</code> object that acts as a wrapper for the named servlet, or
+     *             <code>null</code> if the <code>ServletContext</code> cannot return a <code>RequestDispatcher</code>
+     *
      * @see RequestDispatcher
      * @see ServletContext#getContext
      * @see ServletConfig#getServletName
@@ -293,96 +251,76 @@ public interface ServletContext {
     RequestDispatcher getNamedDispatcher(String name);
 
     /**
-     * Writes the specified message to a servlet log file, usually an event log.
-     * The name and type of the servlet log file is specific to the servlet
-     * container.
+     * Writes the specified message to a servlet log file, usually an event log. The name and type of the servlet log
+     * file is specific to the servlet container.
      *
-     * @param msg
-     *            a <code>String</code> specifying the message to be written to
-     *            the log file
+     * @param msg a <code>String</code> specifying the message to be written to the log file
      */
     void log(String msg);
 
     /**
-     * Writes an explanatory message and a stack trace for a given
-     * <code>Throwable</code> exception to the servlet log file. The name and
-     * type of the servlet log file is specific to the servlet container,
-     * usually an event log.
-     *
-     * @param message
-     *            a <code>String</code> that describes the error or exception
-     * @param throwable
-     *            the <code>Throwable</code> error or exception
+     * Writes an explanatory message and a stack trace for a given <code>Throwable</code> exception to the servlet log
+     * file. The name and type of the servlet log file is specific to the servlet container, usually an event log.
+     *
+     * @param message   a <code>String</code> that describes the error or exception
+     * @param throwable the <code>Throwable</code> error or exception
      */
     void log(String message, Throwable throwable);
 
     /**
-     * Returns a <code>String</code> containing the real path for a given
-     * virtual path. For example, the path "/index.html" returns the absolute
-     * file path on the server's filesystem would be served by a request for
-     * "http://host/contextPath/index.html", where contextPath is the context
-     * path of this ServletContext..
+     * Returns a <code>String</code> containing the real path for a given virtual path. For example, the path
+     * "/index.html" returns the absolute file path on the server's filesystem would be served by a request for
+     * "http://host/contextPath/index.html", where contextPath is the context path of this ServletContext..
      * <p>
-     * The real path returned will be in a form appropriate to the computer and
-     * operating system on which the servlet container is running, including the
-     * proper path separators. This method returns <code>null</code> if the
-     * servlet container cannot translate the virtual path to a real path for
-     * any reason (such as when the content is being made available from a
-     * <code>.war</code> archive).
-     *
-     * @param path
-     *            a <code>String</code> specifying a virtual path
-     * @return a <code>String</code> specifying the real path, or null if the
-     *         translation cannot be performed
+     * The real path returned will be in a form appropriate to the computer and operating system on which the servlet
+     * container is running, including the proper path separators. This method returns <code>null</code> if the servlet
+     * container cannot translate the virtual path to a real path for any reason (such as when the content is being made
+     * available from a <code>.war</code> archive).
+     *
+     * @param path a <code>String</code> specifying a virtual path
+     *
+     * @return a <code>String</code> specifying the real path, or null if the translation cannot be performed
      */
     String getRealPath(String path);
 
     /**
-     * Returns the name and version of the servlet container on which the
-     * servlet is running.
+     * Returns the name and version of the servlet container on which the servlet is running.
      * <p>
-     * The form of the returned string is
-     * <i>servername</i>/<i>versionnumber</i>. For example, the JavaServer Web
-     * Development Kit may return the string
-     * <code>JavaServer Web Dev Kit/1.0</code>.
+     * The form of the returned string is <i>servername</i>/<i>versionnumber</i>. For example, the JavaServer Web
+     * Development Kit may return the string <code>JavaServer Web Dev Kit/1.0</code>.
      * <p>
-     * The servlet container may return other optional information after the
-     * primary string in parentheses, for example,
+     * The servlet container may return other optional information after the primary string in parentheses, for example,
      * <code>JavaServer Web Dev Kit/1.0 (JDK 1.1.6; Windows NT 4.0 x86)</code>.
      *
-     * @return a <code>String</code> containing at least the servlet container
-     *         name and version number
+     * @return a <code>String</code> containing at least the servlet container name and version number
      */
     String getServerInfo();
 
     /**
-     * Returns a <code>String</code> containing the value of the named
-     * context-wide initialization parameter, or <code>null</code> if the
-     * parameter does not exist.
+     * Returns a <code>String</code> containing the value of the named context-wide initialization parameter, or
+     * <code>null</code> if the parameter does not exist.
      * <p>
-     * This method can make available configuration information useful to an
-     * entire "web application". For example, it can provide a web site
-     * administrator's email address or the name of a system that holds critical
-     * data.
-     *
-     * @param name
-     *            a <code>String</code> containing the name of the parameter
-     *            whose value is requested
-     * @return a <code>String</code> containing the value of the initialization
-     *         parameter
-     * @throws NullPointerException If the provided parameter name is
-     *         <code>null</code>
+     * This method can make available configuration information useful to an entire "web application". For example, it
+     * can provide a web site administrator's email address or the name of a system that holds critical data.
+     *
+     * @param name a <code>String</code> containing the name of the parameter whose value is requested
+     *
+     * @return a <code>String</code> containing the value of the initialization parameter
+     *
+     * @throws NullPointerException If the provided parameter name is <code>null</code>
+     *
      * @see ServletConfig#getInitParameter
      */
     String getInitParameter(String name);
 
     /**
-     * Returns the names of the context's initialization parameters as an
-     * <code>Enumeration</code> of <code>String</code> objects, or an empty
-     * <code>Enumeration</code> if the context has no initialization parameters.
+     * Returns the names of the context's initialization parameters as an <code>Enumeration</code> of
+     * <code>String</code> objects, or an empty <code>Enumeration</code> if the context has no initialization
+     * parameters.
+     *
+     * @return an <code>Enumeration</code> of <code>String</code> objects containing the names of the context's
+     *             initialization parameters
      *
-     * @return an <code>Enumeration</code> of <code>String</code> objects
-     *         containing the names of the context's initialization parameters
      * @see ServletConfig#getInitParameter
      */
 
@@ -390,53 +328,51 @@ public interface ServletContext {
 
     /**
      * Set the given initialisation parameter to the given value.
+     *
      * @param name  Name of initialisation parameter
      * @param value Value for initialisation parameter
-     * @return <code>true</code> if the call succeeds or <code>false</code> if
-     *         the call fails because an initialisation parameter with the same
-     *         name has already been set
-     * @throws IllegalStateException If initialisation of this ServletContext
-     *         has already completed
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
-     * @throws NullPointerException If the provided parameter name is
-     *         <code>null</code>
+     *
+     * @return <code>true</code> if the call succeeds or <code>false</code> if the call fails because an initialisation
+     *             parameter with the same name has already been set
+     *
+     * @throws IllegalStateException         If initialisation of this ServletContext has already completed
+     * @throws UnsupportedOperationException If called from a
+     *                                           {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *                                           method of a {@link ServletContextListener} that was not defined in a
+     *                                           web.xml file, a web-fragment.xml file nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}. For example, a
+     *                                           {@link ServletContextListener} defined in a TLD would not be able to
+     *                                           use this method.
+     * @throws NullPointerException          If the provided parameter name is <code>null</code>
+     *
      * @since Servlet 3.0
      */
     boolean setInitParameter(String name, String value);
 
     /**
-     * Returns the servlet container attribute with the given name, or
-     * <code>null</code> if there is no attribute by that name. An attribute
-     * allows a servlet container to give the servlet additional information not
-     * already provided by this interface. See your server documentation for
-     * information about its attributes. A list of supported attributes can be
-     * retrieved using <code>getAttributeNames</code>.
+     * Returns the servlet container attribute with the given name, or <code>null</code> if there is no attribute by
+     * that name. An attribute allows a servlet container to give the servlet additional information not already
+     * provided by this interface. See your server documentation for information about its attributes. A list of
+     * supported attributes can be retrieved using <code>getAttributeNames</code>.
      * <p>
-     * The attribute is returned as a <code>java.lang.Object</code> or some
-     * subclass. Attribute names should follow the same convention as package
-     * names. The Java Servlet API specification reserves names matching
-     * <code>java.*</code>, <code>javax.*</code>, and <code>sun.*</code>.
-     *
-     * @param name
-     *            a <code>String</code> specifying the name of the attribute
-     * @return an <code>Object</code> containing the value of the attribute, or
-     *         <code>null</code> if no attribute exists matching the given name
-     * @throws NullPointerException If the provided attribute name is
-     *         <code>null</code>
+     * The attribute is returned as a <code>java.lang.Object</code> or some subclass. Attribute names should follow the
+     * same convention as package names. The Java Servlet API specification reserves names matching <code>java.*</code>,
+     * <code>javax.*</code>, and <code>sun.*</code>.
+     *
+     * @param name a <code>String</code> specifying the name of the attribute
+     *
+     * @return an <code>Object</code> containing the value of the attribute, or <code>null</code> if no attribute exists
+     *             matching the given name
+     *
+     * @throws NullPointerException If the provided attribute name is <code>null</code>
+     *
      * @see ServletContext#getAttributeNames
      */
     Object getAttribute(String name);
 
     /**
-     * Returns an <code>Enumeration</code> containing the attribute names
-     * available within this servlet context. Use the {@link #getAttribute}
-     * method with an attribute name to get the value of an attribute.
+     * Returns an <code>Enumeration</code> containing the attribute names available within this servlet context. Use the
+     * {@link #getAttribute} method with an attribute name to get the value of an attribute.
      *
      * @return an <code>Enumeration</code> of attribute names
      *
@@ -445,267 +381,264 @@ public interface ServletContext {
     Enumeration<String> getAttributeNames();
 
     /**
-     * Binds an object to a given attribute name in this servlet context. If the
-     * name specified is already used for an attribute, this method will replace
-     * the attribute with the new to the new attribute.
+     * Binds an object to a given attribute name in this servlet context. If the name specified is already used for an
+     * attribute, this method will replace the attribute with the new to the new attribute.
      * <p>
-     * If listeners are configured on the <code>ServletContext</code> the
-     * container notifies them accordingly.
+     * If listeners are configured on the <code>ServletContext</code> the container notifies them accordingly.
      * <p>
-     * If a null value is passed, the effect is the same as calling
-     * <code>removeAttribute()</code>.
+     * If a null value is passed, the effect is the same as calling <code>removeAttribute()</code>.
      * <p>
-     * Attribute names should follow the same convention as package names. The
-     * Java Servlet API specification reserves names matching
-     * <code>java.*</code>, <code>javax.*</code>, and <code>sun.*</code>.
-     *
-     * @param name
-     *            a <code>String</code> specifying the name of the attribute
-     * @param object
-     *            an <code>Object</code> representing the attribute to be bound
-     * @throws NullPointerException If the provided attribute name is
-     *         <code>null</code>
+     * Attribute names should follow the same convention as package names. The Java Servlet API specification reserves
+     * names matching <code>java.*</code>, <code>javax.*</code>, and <code>sun.*</code>.
+     *
+     * @param name   a <code>String</code> specifying the name of the attribute
+     * @param object an <code>Object</code> representing the attribute to be bound
+     *
+     * @throws NullPointerException If the provided attribute name is <code>null</code>
      */
     void setAttribute(String name, Object object);
 
     /**
-     * Removes the attribute with the given name from the servlet context. After
-     * removal, subsequent calls to {@link #getAttribute} to retrieve the
-     * attribute's value will return <code>null</code>.
+     * Removes the attribute with the given name from the servlet context. After removal, subsequent calls to
+     * {@link #getAttribute} to retrieve the attribute's value will return <code>null</code>.
      * <p>
-     * If listeners are configured on the <code>ServletContext</code> the
-     * container notifies them accordingly.
+     * If listeners are configured on the <code>ServletContext</code> the container notifies them accordingly.
      *
-     * @param name
-     *            a <code>String</code> specifying the name of the attribute to
-     *            be removed
+     * @param name a <code>String</code> specifying the name of the attribute to be removed
      */
     void removeAttribute(String name);
 
     /**
-     * Returns the name of this web application corresponding to this
-     * ServletContext as specified in the deployment descriptor for this web
-     * application by the display-name element.
+     * Returns the name of this web application corresponding to this ServletContext as specified in the deployment
+     * descriptor for this web application by the display-name element.
+     *
+     * @return The name of the web application or null if no name has been declared in the deployment descriptor.
      *
-     * @return The name of the web application or null if no name has been
-     *         declared in the deployment descriptor.
      * @since Servlet 2.3
      */
     String getServletContextName();
 
     /**
      * Register a servlet implementation for use in this ServletContext.
+     *
      * @param servletName The name of the servlet to register
      * @param className   The implementation class for the servlet
+     *
      * @return The registration object that enables further configuration
-     * @throws IllegalStateException
-     *             If the context has already been initialised
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
+     *
+     * @throws IllegalStateException         If the context has already been initialised
+     * @throws UnsupportedOperationException If called from a
+     *                                           {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *                                           method of a {@link ServletContextListener} that was not defined in a
+     *                                           web.xml file, a web-fragment.xml file nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}. For example, a
+     *                                           {@link ServletContextListener} defined in a TLD would not be able to
+     *                                           use this method.
+     *
      * @since Servlet 3.0
      */
     ServletRegistration.Dynamic addServlet(String servletName, String className);
 
     /**
      * Register a servlet instance for use in this ServletContext.
+     *
      * @param servletName The name of the servlet to register
      * @param servlet     The Servlet instance to register
+     *
      * @return The registration object that enables further configuration
-     * @throws IllegalStateException
-     *             If the context has already been initialised
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
+     *
+     * @throws IllegalStateException         If the context has already been initialised
+     * @throws UnsupportedOperationException If called from a
+     *                                           {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *                                           method of a {@link ServletContextListener} that was not defined in a
+     *                                           web.xml file, a web-fragment.xml file nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}. For example, a
+     *                                           {@link ServletContextListener} defined in a TLD would not be able to
+     *                                           use this method.
+     *
      * @since Servlet 3.0
      */
     ServletRegistration.Dynamic addServlet(String servletName, Servlet servlet);
 
     /**
      * Add servlet to the context.
-     * @param   servletName  Name of servlet to add
-     * @param   servletClass Class of servlet to add
-     * @return  <code>null</code> if the servlet has already been fully defined,
-     *          else a {@link jakarta.servlet.ServletRegistration.Dynamic} object
-     *          that can be used to further configure the servlet
-     * @throws IllegalStateException
-     *             If the context has already been initialised
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
+     *
+     * @param servletName  Name of servlet to add
+     * @param servletClass Class of servlet to add
+     *
+     * @return <code>null</code> if the servlet has already been fully defined, else a
+     *             {@link jakarta.servlet.ServletRegistration.Dynamic} object that can be used to further configure the
+     *             servlet
+     *
+     * @throws IllegalStateException         If the context has already been initialised
+     * @throws UnsupportedOperationException If called from a
+     *                                           {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *                                           method of a {@link ServletContextListener} that was not defined in a
+     *                                           web.xml file, a web-fragment.xml file nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}. For example, a
+     *                                           {@link ServletContextListener} defined in a TLD would not be able to
+     *                                           use this method.
+     *
      * @since Servlet 3.0
      */
-    ServletRegistration.Dynamic addServlet(String servletName,
-            Class<? extends Servlet> servletClass);
+    ServletRegistration.Dynamic addServlet(String servletName, Class<? extends Servlet> servletClass);
 
     /**
      * Add a JSP to the context.
      *
-     * @param jspName   The servlet name under which this JSP file should be
-     *                  registered
-     * @param jspFile   The path, relative to the web application root, for the
-     *                  JSP file to be used for this servlet
+     * @param jspName The servlet name under which this JSP file should be registered
+     * @param jspFile The path, relative to the web application root, for the JSP file to be used for this servlet
      *
-     * @return  a {@link jakarta.servlet.ServletRegistration.Dynamic} object
-     *          that can be used to further configure the servlet
+     * @return a {@link jakarta.servlet.ServletRegistration.Dynamic} object that can be used to further configure the
+     *             servlet
      *
      * @since Servlet 4.0
      */
     ServletRegistration.Dynamic addJspFile(String jspName, String jspFile);
 
     /**
-     * Create an Servlet instance using the given class. The instance is just
-     * created. No initialisation occurs.
+     * Create an Servlet instance using the given class. The instance is just created. No initialisation occurs.
      *
      * @param <T> The type for the given class
      * @param c   The the class for which an instance should be created
      *
      * @return The created Servlet instance.
      *
-     * @throws ServletException If the servlet instance cannot be created.
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
+     * @throws ServletException              If the servlet instance cannot be created.
+     * @throws UnsupportedOperationException If called from a
+     *                                           {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *                                           method of a {@link ServletContextListener} that was not defined in a
+     *                                           web.xml file, a web-fragment.xml file nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}. For example, a
+     *                                           {@link ServletContextListener} defined in a TLD would not be able to
+     *                                           use this method.
      *
      * @since Servlet 3.0
      */
-    <T extends Servlet> T createServlet(Class<T> c)
-            throws ServletException;
+    <T extends Servlet> T createServlet(Class<T> c) throws ServletException;
 
     /**
      * Obtain the details of the named servlet.
      *
-     * @param servletName   The name of the Servlet of interest
+     * @param servletName The name of the Servlet of interest
      *
-     * @return  The registration details for the named Servlet or
-     *          <code>null</code> if no Servlet has been registered with the
-     *          given name
+     * @return The registration details for the named Servlet or <code>null</code> if no Servlet has been registered
+     *             with the given name
      *
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
+     * @throws UnsupportedOperationException If called from a
+     *                                           {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *                                           method of a {@link ServletContextListener} that was not defined in a
+     *                                           web.xml file, a web-fragment.xml file nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}. For example, a
+     *                                           {@link ServletContextListener} defined in a TLD would not be able to
+     *                                           use this method.
      *
      * @since Servlet 3.0
      */
     ServletRegistration getServletRegistration(String servletName);
 
     /**
-     * Obtain a Map of servlet names to servlet registrations for all servlets
-     * registered with this context.
+     * Obtain a Map of servlet names to servlet registrations for all servlets registered with this context.
      *
-     * @return A Map of servlet names to servlet registrations for all servlets
-     *         registered with this context
+     * @return A Map of servlet names to servlet registrations for all servlets registered with this context
      *
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
+     * @throws UnsupportedOperationException If called from a
+     *                                           {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *                                           method of a {@link ServletContextListener} that was not defined in a
+     *                                           web.xml file, a web-fragment.xml file nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}. For example, a
+     *                                           {@link ServletContextListener} defined in a TLD would not be able to
+     *                                           use this method.
      *
      * @since Servlet 3.0
      */
-    Map<String, ? extends ServletRegistration> getServletRegistrations();
+    Map<String,? extends ServletRegistration> getServletRegistrations();
 
     /**
      * Add filter to context.
-     * @param   filterName  Name of filter to add
-     * @param   className Name of filter class
-     * @return  <code>null</code> if the filter has already been fully defined,
-     *          else a {@link jakarta.servlet.FilterRegistration.Dynamic} object
-     *          that can be used to further configure the filter
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
-     * @throws IllegalStateException
-     *             If the context has already been initialised
+     *
+     * @param filterName Name of filter to add
+     * @param className  Name of filter class
+     *
+     * @return <code>null</code> if the filter has already been fully defined, else a
+     *             {@link jakarta.servlet.FilterRegistration.Dynamic} object that can be used to further configure the
+     *             filter
+     *
+     * @throws UnsupportedOperationException If called from a
+     *                                           {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *                                           method of a {@link ServletContextListener} that was not defined in a
+     *                                           web.xml file, a web-fragment.xml file nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}. For example, a
+     *                                           {@link ServletContextListener} defined in a TLD would not be able to
+     *                                           use this method.
+     * @throws IllegalStateException         If the context has already been initialised
+     *
      * @since Servlet 3.0
      */
     FilterRegistration.Dynamic addFilter(String filterName, String className);
 
     /**
      * Add filter to context.
-     * @param   filterName  Name of filter to add
-     * @param   filter      Filter to add
-     * @return  <code>null</code> if the filter has already been fully defined,
-     *          else a {@link jakarta.servlet.FilterRegistration.Dynamic} object
-     *          that can be used to further configure the filter
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
-     * @throws IllegalStateException
-     *             If the context has already been initialised
+     *
+     * @param filterName Name of filter to add
+     * @param filter     Filter to add
+     *
+     * @return <code>null</code> if the filter has already been fully defined, else a
+     *             {@link jakarta.servlet.FilterRegistration.Dynamic} object that can be used to further configure the
+     *             filter
+     *
+     * @throws UnsupportedOperationException If called from a
+     *                                           {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *                                           method of a {@link ServletContextListener} that was not defined in a
+     *                                           web.xml file, a web-fragment.xml file nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}. For example, a
+     *                                           {@link ServletContextListener} defined in a TLD would not be able to
+     *                                           use this method.
+     * @throws IllegalStateException         If the context has already been initialised
+     *
      * @since Servlet 3.0
      */
     FilterRegistration.Dynamic addFilter(String filterName, Filter filter);
 
     /**
      * Add filter to context.
-     * @param   filterName  Name of filter to add
-     * @param   filterClass Class of filter to add
-     * @return  <code>null</code> if the filter has already been fully defined,
-     *          else a {@link jakarta.servlet.FilterRegistration.Dynamic} object
-     *          that can be used to further configure the filter
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
-     * @throws IllegalStateException
-     *             If the context has already been initialised
+     *
+     * @param filterName  Name of filter to add
+     * @param filterClass Class of filter to add
+     *
+     * @return <code>null</code> if the filter has already been fully defined, else a
+     *             {@link jakarta.servlet.FilterRegistration.Dynamic} object that can be used to further configure the
+     *             filter
+     *
+     * @throws UnsupportedOperationException If called from a
+     *                                           {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *                                           method of a {@link ServletContextListener} that was not defined in a
+     *                                           web.xml file, a web-fragment.xml file nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}. For example, a
+     *                                           {@link ServletContextListener} defined in a TLD would not be able to
+     *                                           use this method.
+     * @throws IllegalStateException         If the context has already been initialised
+     *
      * @since Servlet 3.0
      */
-    FilterRegistration.Dynamic addFilter(String filterName,
-            Class<? extends Filter> filterClass);
+    FilterRegistration.Dynamic addFilter(String filterName, Class<? extends Filter> filterClass);
 
     /**
-     * Create a Filter instance using the given class. The instance is just
-     * created. No initialisation occurs.
+     * Create a Filter instance using the given class. The instance is just created. No initialisation occurs.
      *
      * @param <T> The type for the given class
      * @param c   The the class for which an instance should be created
      *
      * @return The created Filter instance.
      *
-     * @throws ServletException If the Filter instance cannot be created
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
+     * @throws ServletException              If the Filter instance cannot be created
+     * @throws UnsupportedOperationException If called from a
+     *                                           {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *                                           method of a {@link ServletContextListener} that was not defined in a
+     *                                           web.xml file, a web-fragment.xml file nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}. For example, a
+     *                                           {@link ServletContextListener} defined in a TLD would not be able to
+     *                                           use this method.
      *
      * @since Servlet 3.0
      */
@@ -713,89 +646,90 @@ public interface ServletContext {
 
     /**
      * TODO SERVLET3 - Add comments
+     *
      * @param filterName TODO
+     *
      * @return TODO
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
+     *
+     * @throws UnsupportedOperationException If called from a
+     *                                           {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *                                           method of a {@link ServletContextListener} that was not defined in a
+     *                                           web.xml file, a web-fragment.xml file nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}. For example, a
+     *                                           {@link ServletContextListener} defined in a TLD would not be able to
+     *                                           use this method.
+     *
      * @since Servlet 3.0
      */
     FilterRegistration getFilterRegistration(String filterName);
 
     /**
      * @return TODO
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
+     *
+     * @throws UnsupportedOperationException If called from a
+     *                                           {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *                                           method of a {@link ServletContextListener} that was not defined in a
+     *                                           web.xml file, a web-fragment.xml file nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}. For example, a
+     *                                           {@link ServletContextListener} defined in a TLD would not be able to
+     *                                           use this method.
+     *
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
-    Map<String, ? extends FilterRegistration> getFilterRegistrations();
+    Map<String,? extends FilterRegistration> getFilterRegistrations();
 
     /**
      * @return TODO
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
+     *
+     * @throws UnsupportedOperationException If called from a
+     *                                           {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *                                           method of a {@link ServletContextListener} that was not defined in a
+     *                                           web.xml file, a web-fragment.xml file nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}. For example, a
+     *                                           {@link ServletContextListener} defined in a TLD would not be able to
+     *                                           use this method.
+     *
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     SessionCookieConfig getSessionCookieConfig();
 
     /**
      * Configures the available session tracking modes for this web application.
-     * @param sessionTrackingModes The session tracking modes to use for this
-     *        web application
-     * @throws IllegalArgumentException
-     *             If sessionTrackingModes specifies
-     *             {@link SessionTrackingMode#SSL} in combination with any other
-     *             {@link SessionTrackingMode}
-     * @throws IllegalStateException
-     *             If the context has already been initialised
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
+     *
+     * @param sessionTrackingModes The session tracking modes to use for this web application
+     *
+     * @throws IllegalArgumentException      If sessionTrackingModes specifies {@link SessionTrackingMode#SSL} in
+     *                                           combination with any other {@link SessionTrackingMode}
+     * @throws IllegalStateException         If the context has already been initialised
+     * @throws UnsupportedOperationException If called from a
+     *                                           {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *                                           method of a {@link ServletContextListener} that was not defined in a
+     *                                           web.xml file, a web-fragment.xml file nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}. For example, a
+     *                                           {@link ServletContextListener} defined in a TLD would not be able to
+     *                                           use this method.
+     *
      * @since Servlet 3.0
      */
-    void setSessionTrackingModes(
-            Set<SessionTrackingMode> sessionTrackingModes);
+    void setSessionTrackingModes(Set<SessionTrackingMode> sessionTrackingModes);
 
     /**
-     * Obtains the default session tracking modes for this web application.
-     * By default {@link SessionTrackingMode#URL} is always supported, {@link
-     * SessionTrackingMode#COOKIE} is supported unless the <code>cookies</code>
-     * attribute has been set to <code>false</code> for the context and {@link
-     * SessionTrackingMode#SSL} is supported if at least one of the connectors
-     * used by this context has the attribute <code>secure</code> set to
-     * <code>true</code>.
+     * Obtains the default session tracking modes for this web application. By default {@link SessionTrackingMode#URL}
+     * is always supported, {@link SessionTrackingMode#COOKIE} is supported unless the <code>cookies</code> attribute
+     * has been set to <code>false</code> for the context and {@link SessionTrackingMode#SSL} is supported if at least
+     * one of the connectors used by this context has the attribute <code>secure</code> set to <code>true</code>.
      *
-     * @return The set of default session tracking modes for this web
-     *         application
+     * @return The set of default session tracking modes for this web application
      *
      * @since Servlet 3.0
      */
     Set<SessionTrackingMode> getDefaultSessionTrackingModes();
 
     /**
-     * Obtains the currently enabled session tracking modes for this web
-     * application.
+     * Obtains the currently enabled session tracking modes for this web application.
      *
-     * @return The value supplied via {@link #setSessionTrackingModes(Set)} if
-     *         one was previously set, else return the defaults
+     * @return The value supplied via {@link #setSessionTrackingModes(Set)} if one was previously set, else return the
+     *             defaults
      *
      * @since Servlet 3.0
      */
@@ -803,64 +737,76 @@ public interface ServletContext {
 
     /**
      * TODO SERVLET3 - Add comments
+     *
      * @param className TODO
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
+     *
+     * @throws UnsupportedOperationException If called from a
+     *                                           {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *                                           method of a {@link ServletContextListener} that was not defined in a
+     *                                           web.xml file, a web-fragment.xml file nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}. For example, a
+     *                                           {@link ServletContextListener} defined in a TLD would not be able to
+     *                                           use this method.
+     *
      * @since Servlet 3.0
      */
     void addListener(String className);
 
     /**
      * TODO SERVLET3 - Add comments
+     *
      * @param <T> TODO
      * @param t   TODO
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
+     *
+     * @throws UnsupportedOperationException If called from a
+     *                                           {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *                                           method of a {@link ServletContextListener} that was not defined in a
+     *                                           web.xml file, a web-fragment.xml file nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}. For example, a
+     *                                           {@link ServletContextListener} defined in a TLD would not be able to
+     *                                           use this method.
+     *
      * @since Servlet 3.0
      */
     <T extends EventListener> void addListener(T t);
 
     /**
      * TODO SERVLET3 - Add comments
+     *
      * @param listenerClass TODO
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
+     *
+     * @throws UnsupportedOperationException If called from a
+     *                                           {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *                                           method of a {@link ServletContextListener} that was not defined in a
+     *                                           web.xml file, a web-fragment.xml file nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}. For example, a
+     *                                           {@link ServletContextListener} defined in a TLD would not be able to
+     *                                           use this method.
+     *
      * @since Servlet 3.0
      */
     void addListener(Class<? extends EventListener> listenerClass);
 
     /**
      * TODO SERVLET3 - Add comments
+     *
      * @param <T> TODO
-     * @param c TODO
+     * @param c   TODO
+     *
      * @return TODO
-     * @throws ServletException TODO
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
+     *
+     * @throws ServletException              TODO
+     * @throws UnsupportedOperationException If called from a
+     *                                           {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *                                           method of a {@link ServletContextListener} that was not defined in a
+     *                                           web.xml file, a web-fragment.xml file nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}. For example, a
+     *                                           {@link ServletContextListener} defined in a TLD would not be able to
+     *                                           use this method.
+     *
      * @since Servlet 3.0
      */
-    <T extends EventListener> T createListener(Class<T> c)
-            throws ServletException;
+    <T extends EventListener> T createListener(Class<T> c) throws ServletException;
 
     /**
      * @return TODO
@@ -880,28 +826,28 @@ public interface ServletContext {
 
     /**
      * Add to the declared roles for this ServletContext.
+     *
      * @param roleNames The roles to add
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
-     * @throws IllegalArgumentException If the list of roleNames is null or
-     *         empty
-     * @throws IllegalStateException If the ServletContext has already been
-     *         initialised
+     *
+     * @throws UnsupportedOperationException If called from a
+     *                                           {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *                                           method of a {@link ServletContextListener} that was not defined in a
+     *                                           web.xml file, a web-fragment.xml file nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}. For example, a
+     *                                           {@link ServletContextListener} defined in a TLD would not be able to
+     *                                           use this method.
+     * @throws IllegalArgumentException      If the list of roleNames is null or empty
+     * @throws IllegalStateException         If the ServletContext has already been initialised
+     *
      * @since Servlet 3.0
      */
     void declareRoles(String... roleNames);
 
     /**
-     * Get the primary name of the virtual host on which this context is
-     * deployed. The name may or may not be a valid host name.
+     * Get the primary name of the virtual host on which this context is deployed. The name may or may not be a valid
+     * host name.
      *
-     * @return The primary name of the virtual host on which this context is
-     *         deployed
+     * @return The primary name of the virtual host on which this context is deployed
      *
      * @since Servlet 3.1
      */
@@ -917,20 +863,18 @@ public interface ServletContext {
     int getSessionTimeout();
 
     /**
-     * Set the default session timeout. This method may only be called before
-     * the ServletContext is initialised.
+     * Set the default session timeout. This method may only be called before the ServletContext is initialised.
      *
      * @param sessionTimeout The new default session timeout in minutes.
      *
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
-     * @throws IllegalStateException If the ServletContext has already been
-     *         initialised
+     * @throws UnsupportedOperationException If called from a
+     *                                           {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *                                           method of a {@link ServletContextListener} that was not defined in a
+     *                                           web.xml file, a web-fragment.xml file nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}. For example, a
+     *                                           {@link ServletContextListener} defined in a TLD would not be able to
+     *                                           use this method.
+     * @throws IllegalStateException         If the ServletContext has already been initialised
      *
      * @since Servlet 4.0
      */
@@ -939,29 +883,26 @@ public interface ServletContext {
     /**
      * Get the default character encoding for reading request bodies.
      *
-     * @return The character encoding name or {@code null} if no default has
-     *         been specified
+     * @return The character encoding name or {@code null} if no default has been specified
      *
      * @since Servlet 4.0
      */
     String getRequestCharacterEncoding();
 
     /**
-     * Set the default character encoding to use for reading request bodies.
-     * Calling this method will over-ride any value set in the deployment
-     * descriptor.
+     * Set the default character encoding to use for reading request bodies. Calling this method will over-ride any
+     * value set in the deployment descriptor.
      *
      * @param encoding The name of the character encoding to use
      *
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
-     * @throws IllegalStateException If the ServletContext has already been
-     *         initialised
+     * @throws UnsupportedOperationException If called from a
+     *                                           {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *                                           method of a {@link ServletContextListener} that was not defined in a
+     *                                           web.xml file, a web-fragment.xml file nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}. For example, a
+     *                                           {@link ServletContextListener} defined in a TLD would not be able to
+     *                                           use this method.
+     * @throws IllegalStateException         If the ServletContext has already been initialised
      *
      * @since Servlet 4.0
      */
@@ -969,19 +910,18 @@ public interface ServletContext {
 
     /**
      * Sets the request character encoding for this ServletContext.
-     *
-     * <p>Implementations are strongly encouraged to override this default
-     * method and provide a more efficient implementation.
+     * <p>
+     * Implementations are strongly encouraged to override this default method and provide a more efficient
+     * implementation.
      *
      * @param encoding request character encoding
      *
-     * @throws IllegalStateException if this ServletContext has already been
-     *     initialized
-     * @throws UnsupportedOperationException if this ServletContext was passed
-     *     to the {@link ServletContextListener#contextInitialized} method of a
-     *     {@link ServletContextListener} that was neither declared in
-     *     {@code web.xml} or {@code web-fragment.xml}, nor annotated with
-     *     {@link jakarta.servlet.annotation.WebListener}
+     * @throws IllegalStateException         if this ServletContext has already been initialized
+     * @throws UnsupportedOperationException if this ServletContext was passed to the
+     *                                           {@link ServletContextListener#contextInitialized} method of a
+     *                                           {@link ServletContextListener} that was neither declared in
+     *                                           {@code web.xml} or {@code web-fragment.xml}, nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}
      *
      * @since Servlet 6.1
      */
@@ -992,8 +932,7 @@ public interface ServletContext {
     /**
      * Get the default character encoding for writing response bodies.
      *
-     * @return The character encoding name or {@code null} if no default has
-     *         been specified
+     * @return The character encoding name or {@code null} if no default has been specified
      *
      * @since Servlet 4.0
      */
@@ -1001,19 +940,18 @@ public interface ServletContext {
 
     /**
      * Sets the response character encoding for this ServletContext.
-     *
-     * <p>Implementations are strongly encouraged to override this default
-     * method and provide a more efficient implementation.
+     * <p>
+     * Implementations are strongly encouraged to override this default method and provide a more efficient
+     * implementation.
      *
      * @param encoding response character encoding
      *
-     * @throws IllegalStateException if this ServletContext has already been
-     *     initialized
-     * @throws UnsupportedOperationException if this ServletContext was passed
-     *     to the {@link ServletContextListener#contextInitialized} method of a
-     *     {@link ServletContextListener} that was neither declared in
-     *     {@code web.xml} or {@code web-fragment.xml}, nor annotated with
-     *     {@link jakarta.servlet.annotation.WebListener}
+     * @throws IllegalStateException         if this ServletContext has already been initialized
+     * @throws UnsupportedOperationException if this ServletContext was passed to the
+     *                                           {@link ServletContextListener#contextInitialized} method of a
+     *                                           {@link ServletContextListener} that was neither declared in
+     *                                           {@code web.xml} or {@code web-fragment.xml}, nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}
      *
      * @since Servlet 6.1
      */
@@ -1022,21 +960,19 @@ public interface ServletContext {
     }
 
     /**
-     * Set the default character encoding to use for writing response bodies.
-     * Calling this method will over-ride any value set in the deployment
-     * descriptor.
+     * Set the default character encoding to use for writing response bodies. Calling this method will over-ride any
+     * value set in the deployment descriptor.
      *
      * @param encoding The name of the character encoding to use
      *
-     * @throws UnsupportedOperationException    If called from a
-     *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
-     *    method of a {@link ServletContextListener} that was not defined in a
-     *    web.xml file, a web-fragment.xml file nor annotated with
-     *    {@link jakarta.servlet.annotation.WebListener}. For example, a
-     *    {@link ServletContextListener} defined in a TLD would not be able to
-     *    use this method.
-     * @throws IllegalStateException If the ServletContext has already been
-     *         initialised
+     * @throws UnsupportedOperationException If called from a
+     *                                           {@link ServletContextListener#contextInitialized(ServletContextEvent)}
+     *                                           method of a {@link ServletContextListener} that was not defined in a
+     *                                           web.xml file, a web-fragment.xml file nor annotated with
+     *                                           {@link jakarta.servlet.annotation.WebListener}. For example, a
+     *                                           {@link ServletContextListener} defined in a TLD would not be able to
+     *                                           use this method.
+     * @throws IllegalStateException         If the ServletContext has already been initialised
      *
      * @since Servlet 4.0
      */

==================================================
ServletContextAttributeListener.java
index 0a21406fac..61032652cf 100644
--- a/java/jakarta/servlet/ServletContextAttributeEvent.java
+++ b/java/jakarta/servlet/ServletContextAttributeEvent.java
@@ -17,8 +17,8 @@
 package jakarta.servlet;
 
 /**
- * This is the event class for notifications about changes to the attributes of
- * the servlet context of a web application.
+ * This is the event class for notifications about changes to the attributes of the servlet context of a web
+ * application.
  *
  * @see ServletContextAttributeListener
  *
@@ -38,15 +38,13 @@ public class ServletContextAttributeEvent extends ServletContextEvent {
     private final Object value;
 
     /**
-     * Construct a ServletContextAttributeEvent from the given context for the
-     * given attribute name and attribute value.
+     * Construct a ServletContextAttributeEvent from the given context for the given attribute name and attribute value.
      *
      * @param source The ServletContext associated with this attribute event
      * @param name   The name of the servlet context attribute
      * @param value  The value of the servlet context attribute
      */
-    public ServletContextAttributeEvent(ServletContext source, String name,
-            Object value) {
+    public ServletContextAttributeEvent(ServletContext source, String name, Object value) {
         super(source);
         this.name = name;
         this.value = value;
@@ -62,13 +60,11 @@ public class ServletContextAttributeEvent extends ServletContextEvent {
     }
 
     /**
-     * Returns the value of the attribute that has been added, removed, or
-     * replaced.
+     * Returns the value of the attribute that has been added, removed, or replaced.
      *
-     * @return If the attribute was added, this is the value of the attribute.
-     *         If the attribute was removed, this is the value of the removed
-     *         attribute. If the attribute was replaced, this is the old value
-     *         of the attribute.
+     * @return If the attribute was added, this is the value of the attribute. If the attribute was removed, this is the
+     *             value of the removed attribute. If the attribute was replaced, this is the old value of the
+     *             attribute.
      */
     public Object getValue() {
         return this.value;

==================================================
ServletContextEvent.java
index c217778108..17df62d56f 100644
--- a/java/jakarta/servlet/ServletContextAttributeListener.java
+++ b/java/jakarta/servlet/ServletContextAttributeListener.java
@@ -19,10 +19,9 @@ package jakarta.servlet;
 import java.util.EventListener;
 
 /**
- * Implementations of this interface receive notifications of changes to the
- * attribute list on the servlet context of a web application. To receive
- * notification events, the implementation class must be configured in the
- * deployment descriptor for the web application.
+ * Implementations of this interface receive notifications of changes to the attribute list on the servlet context of a
+ * web application. To receive notification events, the implementation class must be configured in the deployment
+ * descriptor for the web application.
  *
  * @see ServletContextAttributeEvent
  *
@@ -31,27 +30,27 @@ import java.util.EventListener;
 public interface ServletContextAttributeListener extends EventListener {
 
     /**
-     * Notification that a new attribute was added to the servlet context.
-     * Called after the attribute is added.
-     * The default implementation is a NO-OP.
+     * Notification that a new attribute was added to the servlet context. Called after the attribute is added. The
+     * default implementation is a NO-OP.
+     *
      * @param scae Information about the new attribute
      */
     default void attributeAdded(ServletContextAttributeEvent scae) {
     }
 
     /**
-     * Notification that an existing attribute has been removed from the servlet
-     * context. Called after the attribute is removed.
-     * The default implementation is a NO-OP.
+     * Notification that an existing attribute has been removed from the servlet context. Called after the attribute is
+     * removed. The default implementation is a NO-OP.
+     *
      * @param scae Information about the removed attribute
      */
     default void attributeRemoved(ServletContextAttributeEvent scae) {
     }
 
     /**
-     * Notification that an attribute on the servlet context has been replaced.
-     * Called after the attribute is replaced.
+     * Notification that an attribute on the servlet context has been replaced. Called after the attribute is replaced.
      * The default implementation is a NO-OP.
+     *
      * @param scae Information about the replaced attribute
      */
     default void attributeReplaced(ServletContextAttributeEvent scae) {

==================================================
ServletContextListener.java
index 8143088303..dc098b60a7 100644
--- a/java/jakarta/servlet/ServletContextEvent.java
+++ b/java/jakarta/servlet/ServletContextEvent.java
@@ -17,8 +17,7 @@
 package jakarta.servlet;
 
 /**
- * This is the event class for notifications about changes to the servlet
- * context of a web application.
+ * This is the event class for notifications about changes to the servlet context of a web application.
  *
  * @see ServletContextListener
  *
@@ -31,8 +30,7 @@ public class ServletContextEvent extends java.util.EventObject {
     /**
      * Construct a ServletContextEvent from the given context.
      *
-     * @param source
-     *            - the ServletContext that is sending the event.
+     * @param source - the ServletContext that is sending the event.
      */
     public ServletContextEvent(ServletContext source) {
         super(source);

==================================================
ServletException.java
index 991a77a2fe..b695635124 100644
--- a/java/jakarta/servlet/ServletContextListener.java
+++ b/java/jakarta/servlet/ServletContextListener.java
@@ -19,10 +19,9 @@ package jakarta.servlet;
 import java.util.EventListener;
 
 /**
- * Implementations of this interface receive notifications about changes to the
- * servlet context of the web application they are part of. To receive
- * notification events, the implementation class must be configured in the
- * deployment descriptor for the web application.
+ * Implementations of this interface receive notifications about changes to the servlet context of the web application
+ * they are part of. To receive notification events, the implementation class must be configured in the deployment
+ * descriptor for the web application.
  *
  * @see ServletContextEvent
  *
@@ -31,20 +30,19 @@ import java.util.EventListener;
 public interface ServletContextListener extends EventListener {
 
     /**
-     ** Notification that the web application initialization process is starting.
-     * All ServletContextListeners are notified of context initialization before
-     * any filter or servlet in the web application is initialized.
-     * The default implementation is a NO-OP.
+     ** Notification that the web application initialization process is starting. All ServletContextListeners are
+     * notified of context initialization before any filter or servlet in the web application is initialized. The
+     * default implementation is a NO-OP.
+     *
      * @param sce Information about the ServletContext that was initialized
      */
     default void contextInitialized(ServletContextEvent sce) {
     }
 
     /**
-     ** Notification that the servlet context is about to be shut down. All
-     * servlets and filters have been destroyed before any
-     * ServletContextListeners are notified of context destruction.
-     * The default implementation is a NO-OP.
+     ** Notification that the servlet context is about to be shut down. All servlets and filters have been destroyed
+     * before any ServletContextListeners are notified of context destruction. The default implementation is a NO-OP.
+     *
      * @param sce Information about the ServletContext that was destroyed
      */
     default void contextDestroyed(ServletContextEvent sce) {

==================================================
ServletInputStream.java
index dcbe56313f..ca8b5f10e8 100644
--- a/java/jakarta/servlet/ServletException.java
+++ b/java/jakarta/servlet/ServletException.java
@@ -17,8 +17,7 @@
 package jakarta.servlet;
 
 /**
- * Defines a general exception a servlet can throw when it encounters
- * difficulty.
+ * Defines a general exception a servlet can throw when it encounters difficulty.
  */
 public class ServletException extends Exception {
 
@@ -32,49 +31,38 @@ public class ServletException extends Exception {
     }
 
     /**
-     * Constructs a new servlet exception with the specified message. The
-     * message can be written to the server log and/or displayed for the user.
+     * Constructs a new servlet exception with the specified message. The message can be written to the server log
+     * and/or displayed for the user.
      *
-     * @param message
-     *            a <code>String</code> specifying the text of the exception
-     *            message
+     * @param message a <code>String</code> specifying the text of the exception message
      */
     public ServletException(String message) {
         super(message);
     }
 
     /**
-     * Constructs a new servlet exception when the servlet needs to throw an
-     * exception and include a message about the "root cause" exception that
-     * interfered with its normal operation, including a description message.
+     * Constructs a new servlet exception when the servlet needs to throw an exception and include a message about the
+     * "root cause" exception that interfered with its normal operation, including a description message.
      *
-     * @param message
-     *            a <code>String</code> containing the text of the exception
-     *            message
-     * @param rootCause
-     *            the <code>Throwable</code> exception that interfered with the
-     *            servlet's normal operation, making this servlet exception
-     *            necessary
+     * @param message   a <code>String</code> containing the text of the exception message
+     * @param rootCause the <code>Throwable</code> exception that interfered with the servlet's normal operation, making
+     *                      this servlet exception necessary
      */
     public ServletException(String message, Throwable rootCause) {
         super(message, rootCause);
     }
 
     /**
-     * Constructs a new servlet exception when the servlet needs to throw an
-     * exception and include a message about the "root cause" exception that
-     * interfered with its normal operation. The exception's message is based on
-     * the localized message of the underlying exception.
+     * Constructs a new servlet exception when the servlet needs to throw an exception and include a message about the
+     * "root cause" exception that interfered with its normal operation. The exception's message is based on the
+     * localized message of the underlying exception.
      * <p>
-     * This method calls the <code>getLocalizedMessage</code> method on the
-     * <code>Throwable</code> exception to get a localized exception message.
-     * When subclassing <code>ServletException</code>, this method can be
-     * overridden to create an exception message designed for a specific locale.
+     * This method calls the <code>getLocalizedMessage</code> method on the <code>Throwable</code> exception to get a
+     * localized exception message. When subclassing <code>ServletException</code>, this method can be overridden to
+     * create an exception message designed for a specific locale.
      *
-     * @param rootCause
-     *            the <code>Throwable</code> exception that interfered with the
-     *            servlet's normal operation, making the servlet exception
-     *            necessary
+     * @param rootCause the <code>Throwable</code> exception that interfered with the servlet's normal operation, making
+     *                      the servlet exception necessary
      */
     public ServletException(Throwable rootCause) {
         super(rootCause);

==================================================
ServletOutputStream.java
index 10048fbb88..149a8e379b 100644
--- a/java/jakarta/servlet/ServletInputStream.java
+++ b/java/jakarta/servlet/ServletInputStream.java
@@ -22,17 +22,14 @@ import java.nio.ByteBuffer;
 import java.util.Objects;
 
 /**
- * Provides an input stream for reading binary data from a client request,
- * including an efficient <code>readLine</code> method for reading data one line
- * at a time. With some protocols, such as HTTP POST and PUT, a
- * <code>ServletInputStream</code> object can be used to read data sent from the
- * client.
+ * Provides an input stream for reading binary data from a client request, including an efficient <code>readLine</code>
+ * method for reading data one line at a time. With some protocols, such as HTTP POST and PUT, a
+ * <code>ServletInputStream</code> object can be used to read data sent from the client.
  * <p>
- * A <code>ServletInputStream</code> object is normally retrieved via the
- * {@link ServletRequest#getInputStream} method.
+ * A <code>ServletInputStream</code> object is normally retrieved via the {@link ServletRequest#getInputStream} method.
  * <p>
- * This is an abstract class that a servlet container implements. Subclasses of
- * this class must implement the <code>java.io.InputStream.read()</code> method.
+ * This is an abstract class that a servlet container implements. Subclasses of this class must implement the
+ * <code>java.io.InputStream.read()</code> method.
  *
  * @see ServletRequest
  */
@@ -48,46 +45,34 @@ public abstract class ServletInputStream extends InputStream {
     /**
      * Reads from the input stream into the given buffer.
      * <p>
-     * If the input stream is in non-blocking mode, before each invocation of
-     * this method {@link #isReady()} must be called and must return
-     * {@code true} or the {@link ReadListener#onDataAvailable()} call back must
-     * indicate that data is available to read else an
-     * {@link IllegalStateException} must be thrown.
+     * If the input stream is in non-blocking mode, before each invocation of this method {@link #isReady()} must be
+     * called and must return {@code true} or the {@link ReadListener#onDataAvailable()} call back must indicate that
+     * data is available to read else an {@link IllegalStateException} must be thrown.
      * <p>
-     * Otherwise, if this method is called when {@code buffer} has no space
-     * remaining, the method returns {@code 0} immediately and {@code buffer} is
-     * unchanged.
+     * Otherwise, if this method is called when {@code buffer} has no space remaining, the method returns {@code 0}
+     * immediately and {@code buffer} is unchanged.
      * <p>
-     * If the input stream is in blocking mode and {@code buffer} has space
-     * remaining, this method blocks until at least one byte has been read, end
-     * of stream is reached or an exception is thrown.
+     * If the input stream is in blocking mode and {@code buffer} has space remaining, this method blocks until at least
+     * one byte has been read, end of stream is reached or an exception is thrown.
      * <p>
-     * Returns the number of bytes read or {@code -1} if the end of stream is
-     * reached without reading any data.
+     * Returns the number of bytes read or {@code -1} if the end of stream is reached without reading any data.
      * <p>
-     * When the method returns, and if data has been read, the buffer's position
-     * will be unchanged from the value when passed to this method and the limit
-     * will be the position incremented by the number of bytes read.
+     * When the method returns, and if data has been read, the buffer's position will be unchanged from the value when
+     * passed to this method and the limit will be the position incremented by the number of bytes read.
      * <p>
-     * Subclasses are strongly encouraged to override this method and provide a
-     * more efficient implementation.
+     * Subclasses are strongly encouraged to override this method and provide a more efficient implementation.
      *
      * @param buffer The buffer into which the data is read.
      *
-     * @return The number of bytes read or {@code -1} if the end of the stream
-     * has been reached.
+     * @return The number of bytes read or {@code -1} if the end of the stream has been reached.
      *
-     * @exception IllegalStateException If the input stream is in non-blocking
-     * mode and this method is called without first calling {@link #isReady()}
-     * and that method has returned {@code true} or
-     * {@link ReadListener#onDataAvailable()} has not signalled that data is
-     * available to read.
-     *
-     * @exception IOException If data cannot be read for any reason other than
-     * the end of stream being reached, the input stream has been closed or if
-     * some other I/O error occurs.
-     *
-     * @exception NullPointerException If buffer is null.
+     * @exception IllegalStateException If the input stream is in non-blocking mode and this method is called without
+     *                                      first calling {@link #isReady()} and that method has returned {@code true}
+     *                                      or {@link ReadListener#onDataAvailable()} has not signalled that data is
+     *                                      available to read.
+     * @exception IOException           If data cannot be read for any reason other than the end of stream being
+     *                                      reached, the input stream has been closed or if some other I/O error occurs.
+     * @exception NullPointerException  If buffer is null.
      *
      * @since Servlet 6.1
      */
@@ -120,30 +105,21 @@ public abstract class ServletInputStream extends InputStream {
     }
 
     /**
-     * Reads the input stream, one line at a time. Starting at an offset, reads
-     * bytes into an array, until it reads a certain number of bytes or reaches
-     * a newline character, which it reads into the array as well.
+     * Reads the input stream, one line at a time. Starting at an offset, reads bytes into an array, until it reads a
+     * certain number of bytes or reaches a newline character, which it reads into the array as well.
      * <p>
-     * This method returns -1 if it reaches the end of the input stream before
-     * reading the maximum number of bytes.
+     * This method returns -1 if it reaches the end of the input stream before reading the maximum number of bytes.
      * <p>
      * This method may only be used when the input stream is in blocking mode.
      *
-     * @param b
-     *            an array of bytes into which data is read
-     * @param off
-     *            an integer specifying the character at which this method
-     *            begins reading
-     * @param len
-     *            an integer specifying the maximum number of bytes to read
-     * @return an integer specifying the actual number of bytes read, or -1 if
-     *         the end of the stream is reached
-     *
-     * @exception IllegalStateException
-     *                If this method is called when the input stream is in
-     *                non-blocking mode.
-     * @exception IOException
-     *                if an input or output exception has occurred
+     * @param b   an array of bytes into which data is read
+     * @param off an integer specifying the character at which this method begins reading
+     * @param len an integer specifying the maximum number of bytes to read
+     *
+     * @return an integer specifying the actual number of bytes read, or -1 if the end of the stream is reached
+     *
+     * @exception IllegalStateException If this method is called when the input stream is in non-blocking mode.
+     * @exception IOException           if an input or output exception has occurred
      */
     public int readLine(byte[] b, int off, int len) throws IOException {
 
@@ -165,50 +141,40 @@ public abstract class ServletInputStream extends InputStream {
     /**
      * Has the end of this InputStream been reached?
      *
-     * @return <code>true</code> if all the data has been read from the stream,
-     * else <code>false</code>
+     * @return <code>true</code> if all the data has been read from the stream, else <code>false</code>
      *
      * @since Servlet 3.1
      */
     public abstract boolean isFinished();
 
     /**
-     * Returns {@code true} if it is allowable to call a {@code read()} method.
-     * In blocking mode, this method will always return {@code true}, but a
-     * subsequent call to a {@code read()} method may block awaiting data. In
-     * non-blocking mode this method may return {@code false}, in which case it
-     * is illegal to call a {@code read()} method and an
-     * {@link IllegalStateException} MUST be thrown. When
-     * {@link ReadListener#onDataAvailable()} is called, a call to this method
-     * that returned {@code true} is implicit.
+     * Returns {@code true} if it is allowable to call a {@code read()} method. In blocking mode, this method will
+     * always return {@code true}, but a subsequent call to a {@code read()} method may block awaiting data. In
+     * non-blocking mode this method may return {@code false}, in which case it is illegal to call a {@code read()}
+     * method and an {@link IllegalStateException} MUST be thrown. When {@link ReadListener#onDataAvailable()} is
+     * called, a call to this method that returned {@code true} is implicit.
      * <p>
-     * If this method returns {@code false} and a {@link ReadListener} has been
-     * set via {@link #setReadListener(ReadListener)}, then the container will
-     * subsequently invoke {@link ReadListener#onDataAvailable()} (or
-     * {@link ReadListener#onAllDataRead()}) once data (or EOF) has become
-     * available. Other than the initial call
-     * {@link ReadListener#onDataAvailable()} will only be called if and only if
+     * If this method returns {@code false} and a {@link ReadListener} has been set via
+     * {@link #setReadListener(ReadListener)}, then the container will subsequently invoke
+     * {@link ReadListener#onDataAvailable()} (or {@link ReadListener#onAllDataRead()}) once data (or EOF) has become
+     * available. Other than the initial call {@link ReadListener#onDataAvailable()} will only be called if and only if
      * this method is called and returns false.
      *
-     * @return {@code true} if data can be obtained without blocking, otherwise
-     * returns {@code false}.
+     * @return {@code true} if data can be obtained without blocking, otherwise returns {@code false}.
      *
      * @since Servlet 3.1
      */
     public abstract boolean isReady();
 
     /**
-     * Sets the {@link ReadListener} for this {@link ServletInputStream} and
-     * thereby switches to non-blocking IO. It is only valid to switch to
-     * non-blocking IO within async processing or HTTP upgrade processing.
+     * Sets the {@link ReadListener} for this {@link ServletInputStream} and thereby switches to non-blocking IO. It is
+     * only valid to switch to non-blocking IO within async processing or HTTP upgrade processing.
      *
-     * @param listener  The non-blocking IO read listener
+     * @param listener The non-blocking IO read listener
      *
-     * @throws IllegalStateException    If this method is called if neither
-     *                                  async nor HTTP upgrade is in progress or
-     *                                  if the {@link ReadListener} has already
-     *                                  been set
-     * @throws NullPointerException     If listener is null
+     * @throws IllegalStateException If this method is called if neither async nor HTTP upgrade is in progress or if the
+     *                                   {@link ReadListener} has already been set
+     * @throws NullPointerException  If listener is null
      *
      * @since Servlet 3.1
      */

==================================================
ServletRegistration.java
index 66ee5c1503..a7d43e80df 100644
--- a/java/jakarta/servlet/ServletOutputStream.java
+++ b/java/jakarta/servlet/ServletOutputStream.java
@@ -25,13 +25,11 @@ import java.util.Objects;
 import java.util.ResourceBundle;
 
 /**
- * Provides an output stream for sending binary data to the client. A
- * <code>ServletOutputStream</code> object is normally retrieved via the
- * {@link ServletResponse#getOutputStream} method.
+ * Provides an output stream for sending binary data to the client. A <code>ServletOutputStream</code> object is
+ * normally retrieved via the {@link ServletResponse#getOutputStream} method.
  * <p>
- * This is an abstract class that the servlet container implements. Subclasses
- * of this class must implement the <code>java.io.OutputStream.write(int)</code>
- * method.
+ * This is an abstract class that the servlet container implements. Subclasses of this class must implement the
+ * <code>java.io.OutputStream.write(int)</code> method.
  *
  * @see ServletResponse
  */
@@ -50,45 +48,33 @@ public abstract class ServletOutputStream extends OutputStream {
     /**
      * Writes from the given buffer to the output stream.
      * <p>
-     * If the output steam is in non-blocking mode, before each invocation of
-     * this method {@link #isReady()} must be called and must return
-     * {@code true} or the {@link WriteListener#onWritePossible()} call back
-     * must indicate that data may be written else an
-     * {@link IllegalStateException} must be thrown.
+     * If the output steam is in non-blocking mode, before each invocation of this method {@link #isReady()} must be
+     * called and must return {@code true} or the {@link WriteListener#onWritePossible()} call back must indicate that
+     * data may be written else an {@link IllegalStateException} must be thrown.
      * <p>
-     * Otherwise, if this method is called when {@code buffer} has no data
-     * remaining, the method returns immediately and {@code buffer} is
-     * unchanged.
+     * Otherwise, if this method is called when {@code buffer} has no data remaining, the method returns immediately and
+     * {@code buffer} is unchanged.
      * <p>
-     * If the output stream is in non-blocking mode, neither the position, limit
-     * nor content of the buffer passed to this method may be modified until a
-     * subsequent call to {@link #isReady()} returns true or the
-     * {@link WriteListener#onWritePossible()} call back indicates data may be
-     * written again. At this point the buffer's limit will be unchanged from
-     * the value when passed to this method and the position will be the same as
-     * the limit.
+     * If the output stream is in non-blocking mode, neither the position, limit nor content of the buffer passed to
+     * this method may be modified until a subsequent call to {@link #isReady()} returns true or the
+     * {@link WriteListener#onWritePossible()} call back indicates data may be written again. At this point the buffer's
+     * limit will be unchanged from the value when passed to this method and the position will be the same as the limit.
      * <p>
-     * If the output stream is in blocking mode and {@code buffer} has space
-     * remaining, this method blocks until all the remaining data in the buffer
-     * has been written. When the method returns, and if data has been written,
-     * the buffer's limit will be unchanged from the value when passed to this
-     * method and the position will be the same as the limit.
+     * If the output stream is in blocking mode and {@code buffer} has space remaining, this method blocks until all the
+     * remaining data in the buffer has been written. When the method returns, and if data has been written, the
+     * buffer's limit will be unchanged from the value when passed to this method and the position will be the same as
+     * the limit.
      * <p>
-     * Subclasses are strongly encouraged to override this method and provide a
-     * more efficient implementation.
+     * Subclasses are strongly encouraged to override this method and provide a more efficient implementation.
      *
      * @param buffer The buffer from which the data is written.
      *
-     * @exception IllegalStateException If the output stream is in non-blocking
-     * mode and this method is called without first calling {@link #isReady()}
-     * and that method has returned {@code true} or
-     * {@link WriteListener#onWritePossible()} has not signalled that data may
-     * be written.
-     *
-     * @exception IOException If the output stream has been closed or if some
-     * other I/O error occurs.
-     *
-     * @exception NullPointerException If buffer is null.
+     * @exception IllegalStateException If the output stream is in non-blocking mode and this method is called without
+     *                                      first calling {@link #isReady()} and that method has returned {@code true}
+     *                                      or {@link WriteListener#onWritePossible()} has not signalled that data may
+     *                                      be written.
+     * @exception IOException           If the output stream has been closed or if some other I/O error occurs.
+     * @exception NullPointerException  If buffer is null.
      *
      * @since Servlet 6.1
      */
@@ -111,13 +97,11 @@ public abstract class ServletOutputStream extends OutputStream {
     }
 
     /**
-     * Writes a <code>String</code> to the client, without a carriage
-     * return-line feed (CRLF) character at the end.
+     * Writes a <code>String</code> to the client, without a carriage return-line feed (CRLF) character at the end.
+     *
+     * @param s the <code>String</code> to send to the client
      *
-     * @param s
-     *            the <code>String</code> to send to the client
-     * @exception IOException
-     *                if an input or output exception occurred
+     * @exception IOException if an input or output exception occurred
      */
     public void print(String s) throws IOException {
         if (s == null) {
@@ -148,13 +132,11 @@ public abstract class ServletOutputStream extends OutputStream {
     }
 
     /**
-     * Writes a <code>boolean</code> value to the client, with no carriage
-     * return-line feed (CRLF) character at the end.
+     * Writes a <code>boolean</code> value to the client, with no carriage return-line feed (CRLF) character at the end.
      *
-     * @param b
-     *            the <code>boolean</code> value to send to the client
-     * @exception IOException
-     *                if an input or output exception occurred
+     * @param b the <code>boolean</code> value to send to the client
+     *
+     * @exception IOException if an input or output exception occurred
      */
     public void print(boolean b) throws IOException {
         String msg;
@@ -167,65 +149,55 @@ public abstract class ServletOutputStream extends OutputStream {
     }
 
     /**
-     * Writes a character to the client, with no carriage return-line feed
-     * (CRLF) at the end.
+     * Writes a character to the client, with no carriage return-line feed (CRLF) at the end.
+     *
+     * @param c the character to send to the client
      *
-     * @param c
-     *            the character to send to the client
-     * @exception IOException
-     *                if an input or output exception occurred
+     * @exception IOException if an input or output exception occurred
      */
     public void print(char c) throws IOException {
         print(String.valueOf(c));
     }
 
     /**
-     * Writes an int to the client, with no carriage return-line feed (CRLF) at
-     * the end.
+     * Writes an int to the client, with no carriage return-line feed (CRLF) at the end.
      *
-     * @param i
-     *            the int to send to the client
-     * @exception IOException
-     *                if an input or output exception occurred
+     * @param i the int to send to the client
+     *
+     * @exception IOException if an input or output exception occurred
      */
     public void print(int i) throws IOException {
         print(String.valueOf(i));
     }
 
     /**
-     * Writes a <code>long</code> value to the client, with no carriage
-     * return-line feed (CRLF) at the end.
+     * Writes a <code>long</code> value to the client, with no carriage return-line feed (CRLF) at the end.
+     *
+     * @param l the <code>long</code> value to send to the client
      *
-     * @param l
-     *            the <code>long</code> value to send to the client
-     * @exception IOException
-     *                if an input or output exception occurred
+     * @exception IOException if an input or output exception occurred
      */
     public void print(long l) throws IOException {
         print(String.valueOf(l));
     }
 
     /**
-     * Writes a <code>float</code> value to the client, with no carriage
-     * return-line feed (CRLF) at the end.
+     * Writes a <code>float</code> value to the client, with no carriage return-line feed (CRLF) at the end.
      *
-     * @param f
-     *            the <code>float</code> value to send to the client
-     * @exception IOException
-     *                if an input or output exception occurred
+     * @param f the <code>float</code> value to send to the client
+     *
+     * @exception IOException if an input or output exception occurred
      */
     public void print(float f) throws IOException {
         print(String.valueOf(f));
     }
 
     /**
-     * Writes a <code>double</code> value to the client, with no carriage
-     * return-line feed (CRLF) at the end.
+     * Writes a <code>double</code> value to the client, with no carriage return-line feed (CRLF) at the end.
+     *
+     * @param d the <code>double</code> value to send to the client
      *
-     * @param d
-     *            the <code>double</code> value to send to the client
-     * @exception IOException
-     *                if an input or output exception occurred
+     * @exception IOException if an input or output exception occurred
      */
     public void print(double d) throws IOException {
         print(String.valueOf(d));
@@ -234,21 +206,18 @@ public abstract class ServletOutputStream extends OutputStream {
     /**
      * Writes a carriage return-line feed (CRLF) to the client.
      *
-     * @exception IOException
-     *                if an input or output exception occurred
+     * @exception IOException if an input or output exception occurred
      */
     public void println() throws IOException {
         print("\r\n");
     }
 
     /**
-     * Writes a <code>String</code> to the client, followed by a carriage
-     * return-line feed (CRLF).
+     * Writes a <code>String</code> to the client, followed by a carriage return-line feed (CRLF).
+     *
+     * @param s the <code>String</code> to write to the client
      *
-     * @param s
-     *            the <code>String</code> to write to the client
-     * @exception IOException
-     *                if an input or output exception occurred
+     * @exception IOException if an input or output exception occurred
      */
     public void println(String s) throws IOException {
         StringBuilder sb = new StringBuilder();
@@ -258,13 +227,11 @@ public abstract class ServletOutputStream extends OutputStream {
     }
 
     /**
-     * Writes a <code>boolean</code> value to the client, followed by a carriage
-     * return-line feed (CRLF).
+     * Writes a <code>boolean</code> value to the client, followed by a carriage return-line feed (CRLF).
      *
-     * @param b
-     *            the <code>boolean</code> value to write to the client
-     * @exception IOException
-     *                if an input or output exception occurred
+     * @param b the <code>boolean</code> value to write to the client
+     *
+     * @exception IOException if an input or output exception occurred
      */
     public void println(boolean b) throws IOException {
         StringBuilder sb = new StringBuilder();
@@ -278,106 +245,89 @@ public abstract class ServletOutputStream extends OutputStream {
     }
 
     /**
-     * Writes a character to the client, followed by a carriage return-line feed
-     * (CRLF).
+     * Writes a character to the client, followed by a carriage return-line feed (CRLF).
+     *
+     * @param c the character to write to the client
      *
-     * @param c
-     *            the character to write to the client
-     * @exception IOException
-     *                if an input or output exception occurred
+     * @exception IOException if an input or output exception occurred
      */
     public void println(char c) throws IOException {
         println(String.valueOf(c));
     }
 
     /**
-     * Writes an int to the client, followed by a carriage return-line feed
-     * (CRLF) character.
+     * Writes an int to the client, followed by a carriage return-line feed (CRLF) character.
      *
-     * @param i
-     *            the int to write to the client
-     * @exception IOException
-     *                if an input or output exception occurred
+     * @param i the int to write to the client
+     *
+     * @exception IOException if an input or output exception occurred
      */
     public void println(int i) throws IOException {
         println(String.valueOf(i));
     }
 
     /**
-     * Writes a <code>long</code> value to the client, followed by a carriage
-     * return-line feed (CRLF).
+     * Writes a <code>long</code> value to the client, followed by a carriage return-line feed (CRLF).
+     *
+     * @param l the <code>long</code> value to write to the client
      *
-     * @param l
-     *            the <code>long</code> value to write to the client
-     * @exception IOException
-     *                if an input or output exception occurred
+     * @exception IOException if an input or output exception occurred
      */
     public void println(long l) throws IOException {
         println(String.valueOf(l));
     }
 
     /**
-     * Writes a <code>float</code> value to the client, followed by a carriage
-     * return-line feed (CRLF).
+     * Writes a <code>float</code> value to the client, followed by a carriage return-line feed (CRLF).
      *
-     * @param f
-     *            the <code>float</code> value to write to the client
-     * @exception IOException
-     *                if an input or output exception occurred
+     * @param f the <code>float</code> value to write to the client
+     *
+     * @exception IOException if an input or output exception occurred
      */
     public void println(float f) throws IOException {
         println(String.valueOf(f));
     }
 
     /**
-     * Writes a <code>double</code> value to the client, followed by a carriage
-     * return-line feed (CRLF).
+     * Writes a <code>double</code> value to the client, followed by a carriage return-line feed (CRLF).
+     *
+     * @param d the <code>double</code> value to write to the client
      *
-     * @param d
-     *            the <code>double</code> value to write to the client
-     * @exception IOException
-     *                if an input or output exception occurred
+     * @exception IOException if an input or output exception occurred
      */
     public void println(double d) throws IOException {
         println(String.valueOf(d));
     }
 
     /**
-     * Returns {@code true} if it is allowable to call any method that may write
-     * data (e.g. {@code write()}, {@code print()} or {@code flush}). In
-     * blocking mode, this method will always return {@code true}, but a
-     * subsequent call to a method that writes data may block. In non-blocking
-     * mode this method may return {@code false}, in which case it is illegal to
-     * call a method that writes data and an {@link IllegalStateException} MUST
-     * be thrown. When {@link WriteListener#onWritePossible()} is called, a call
-     * to this method that returned {@code true} is implicit.
+     * Returns {@code true} if it is allowable to call any method that may write data (e.g. {@code write()},
+     * {@code print()} or {@code flush}). In blocking mode, this method will always return {@code true}, but a
+     * subsequent call to a method that writes data may block. In non-blocking mode this method may return
+     * {@code false}, in which case it is illegal to call a method that writes data and an {@link IllegalStateException}
+     * MUST be thrown. When {@link WriteListener#onWritePossible()} is called, a call to this method that returned
+     * {@code true} is implicit.
      * <p>
-     * If this method returns {@code false} and a {@link WriteListener} has been
-     * set via {@link #setWriteListener(WriteListener)}, then container will
-     * subsequently invoke {@link WriteListener#onWritePossible()} once a write
-     * operation becomes possible without blocking. Other than the initial call,
-     * {@link WriteListener#onWritePossible()} will only be called if and only
-     * if this method is called and returns false.
+     * If this method returns {@code false} and a {@link WriteListener} has been set via
+     * {@link #setWriteListener(WriteListener)}, then container will subsequently invoke
+     * {@link WriteListener#onWritePossible()} once a write operation becomes possible without blocking. Other than the
+     * initial call, {@link WriteListener#onWritePossible()} will only be called if and only if this method is called
+     * and returns false.
      *
-     * @return {@code true} if data can be written without blocking, otherwise
-     *         returns {@code false}.
+     * @return {@code true} if data can be written without blocking, otherwise returns {@code false}.
      *
      * @since Servlet 3.1
      */
     public abstract boolean isReady();
 
     /**
-     * Sets the {@link WriteListener} for this {@link ServletOutputStream} and
-     * thereby switches to non-blocking IO. It is only valid to switch to
-     * non-blocking IO within async processing or HTTP upgrade processing.
+     * Sets the {@link WriteListener} for this {@link ServletOutputStream} and thereby switches to non-blocking IO. It
+     * is only valid to switch to non-blocking IO within async processing or HTTP upgrade processing.
      *
-     * @param listener  The non-blocking IO write listener
+     * @param listener The non-blocking IO write listener
      *
-     * @throws IllegalStateException    If this method is called if neither
-     *                                  async nor HTTP upgrade is in progress or
-     *                                  if the {@link WriteListener} has already
-     *                                  been set
-     * @throws NullPointerException     If listener is null
+     * @throws IllegalStateException If this method is called if neither async nor HTTP upgrade is in progress or if the
+     *                                   {@link WriteListener} has already been set
+     * @throws NullPointerException  If listener is null
      *
      * @since Servlet 3.1
      */
@@ -386,10 +336,10 @@ public abstract class ServletOutputStream extends OutputStream {
     /**
      * {@inheritDoc}
      * <p>
-     * If this method is called when the output stream is in non-blocking mode, it will immediately return with the stream
-     * effectively closed, even if the stream contains buffered data that is yet to be written to client. The container will
-     * write this data out in the background. If this process fails the {@link WriteListener#onError(Throwable)} method will
-     * be invoked as normal.
+     * If this method is called when the output stream is in non-blocking mode, it will immediately return with the
+     * stream effectively closed, even if the stream contains buffered data that is yet to be written to client. The
+     * container will write this data out in the background. If this process fails the
+     * {@link WriteListener#onError(Throwable)} method will be invoked as normal.
      */
     @Override
     public void close() throws IOException {

==================================================
ServletRequest.java
index 699f486479..c9b5385f8a 100644
--- a/java/jakarta/servlet/ServletRegistration.java
+++ b/java/jakarta/servlet/ServletRegistration.java
@@ -27,58 +27,48 @@ import java.util.Set;
 public interface ServletRegistration extends Registration {
 
     /**
-     * Adds a servlet mapping with the given URL patterns for the Servlet
-     * represented by this ServletRegistration. If any of the specified URL
-     * patterns are already mapped to a different Servlet, no updates will
-     * be performed.
-     *
-     * If this method is called multiple times, each successive call adds to
-     * the effects of the former. The returned set is not backed by the
-     * ServletRegistration object, so changes in the returned set are not
-     * reflected in the ServletRegistration object, and vice-versa.
+     * Adds a servlet mapping with the given URL patterns for the Servlet represented by this ServletRegistration. If
+     * any of the specified URL patterns are already mapped to a different Servlet, no updates will be performed. If
+     * this method is called multiple times, each successive call adds to the effects of the former. The returned set is
+     * not backed by the ServletRegistration object, so changes in the returned set are not reflected in the
+     * ServletRegistration object, and vice-versa.
      *
      * @param urlPatterns The URL patterns that this Servlet should be mapped to
-     * @return the (possibly empty) Set of URL patterns that are already mapped
-     * to a different Servlet
+     *
+     * @return the (possibly empty) Set of URL patterns that are already mapped to a different Servlet
+     *
      * @throws IllegalArgumentException if urlPattern is null or empty
-     * @throws IllegalStateException if the associated ServletContext has
-     *                                  already been initialised
+     * @throws IllegalStateException    if the associated ServletContext has already been initialised
      */
     Set<String> addMapping(String... urlPatterns);
 
     /**
-     * Gets the currently available mappings of the Servlet represented by this
-     * ServletRegistration.
-     *
-     * If permitted, any changes to the returned Collection must not affect this
-     * ServletRegistration.
+     * Gets the currently available mappings of the Servlet represented by this ServletRegistration. If permitted, any
+     * changes to the returned Collection must not affect this ServletRegistration.
      *
-     * @return a (possibly empty) Collection of the currently available mappings
-     * of the Servlet represented by this ServletRegistration
+     * @return a (possibly empty) Collection of the currently available mappings of the Servlet represented by this
+     *             ServletRegistration
      */
     Collection<String> getMappings();
 
     /**
-     * Obtain the name of the user / group under which the Servlet has been
-     * configured to run.
+     * Obtain the name of the user / group under which the Servlet has been configured to run.
      *
-     * @return the name of the user / group or {@code null} if none has been
-     *         specified
+     * @return the name of the user / group or {@code null} if none has been specified
      */
     String getRunAsRole();
 
     /**
-     * Interface through which a Servlet registered via one of the addServlet
-     * methods on ServletContext may be further configured.
+     * Interface through which a Servlet registered via one of the addServlet methods on ServletContext may be further
+     * configured.
      */
     interface Dynamic extends ServletRegistration, Registration.Dynamic {
 
         /**
          * Set the loadOnStartup order for the Servlet
          *
-         * @param loadOnStartup The position in the order the Servlet should be
-         *                      started (higher numbers are started after lower
-         *                      numbers)
+         * @param loadOnStartup The position in the order the Servlet should be started (higher numbers are started
+         *                          after lower numbers)
          */
         void setLoadOnStartup(int loadOnStartup);
 
@@ -87,24 +77,20 @@ public interface ServletRegistration extends Registration {
          *
          * @param constraint new security constraints for this Servlet
          *
-         * @return urls currently mapped to this registration that are already
-         *         present in web.xml
+         * @return urls currently mapped to this registration that are already present in web.xml
          */
         Set<String> setServletSecurity(ServletSecurityElement constraint);
 
         /**
-         * Set the multi-part configuration for the associated Servlet. To clear
-         * the multi-part configuration specify <code>null</code> as the new
-         * value.
+         * Set the multi-part configuration for the associated Servlet. To clear the multi-part configuration specify
+         * <code>null</code> as the new value.
          *
-         * @param multipartConfig The configuration to associate with the
-         *                        Servlet
+         * @param multipartConfig The configuration to associate with the Servlet
          */
         void setMultipartConfig(MultipartConfigElement multipartConfig);
 
         /**
-         * Set the name of the user / group under which the Servlet should be
-         * configured to run.
+         * Set the name of the user / group under which the Servlet should be configured to run.
          *
          * @param roleName name of the user / group or {@code null} if none
          */

==================================================
ServletRequestAttributeEvent.java
index 047a38d514..eacc3af319 100644
--- a/java/jakarta/servlet/ServletRequest.java
+++ b/java/jakarta/servlet/ServletRequest.java
@@ -25,96 +25,80 @@ import java.util.Locale;
 import java.util.Map;
 
 /**
- * Defines an object to provide client request information to a servlet. The
- * servlet container creates a <code>ServletRequest</code> object and passes it
- * as an argument to the servlet's <code>service</code> method.
+ * Defines an object to provide client request information to a servlet. The servlet container creates a
+ * <code>ServletRequest</code> object and passes it as an argument to the servlet's <code>service</code> method.
  * <p>
- * A <code>ServletRequest</code> object provides data including parameter name
- * and values, attributes, and an input stream. Interfaces that extend
- * <code>ServletRequest</code> can provide additional protocol-specific data
- * (for example, HTTP data is provided by
- * {@link jakarta.servlet.http.HttpServletRequest}.
+ * A <code>ServletRequest</code> object provides data including parameter name and values, attributes, and an input
+ * stream. Interfaces that extend <code>ServletRequest</code> can provide additional protocol-specific data (for
+ * example, HTTP data is provided by {@link jakarta.servlet.http.HttpServletRequest}.
  *
  * @see jakarta.servlet.http.HttpServletRequest
  */
 public interface ServletRequest {
 
     /**
-     * Returns the value of the named attribute as an <code>Object</code>, or
-     * <code>null</code> if no attribute of the given name exists.
+     * Returns the value of the named attribute as an <code>Object</code>, or <code>null</code> if no attribute of the
+     * given name exists.
      * <p>
-     * Attributes can be set two ways. The servlet container may set attributes
-     * to make available custom information about a request. For example, for
-     * requests made using HTTPS, the attribute
-     * <code>jakarta.servlet.request.X509Certificate</code> can be used to
-     * retrieve information on the certificate of the client. Attributes can
-     * also be set programmatically using {@link ServletRequest#setAttribute}.
-     * This allows information to be embedded into a request before a
-     * {@link RequestDispatcher} call.
+     * Attributes can be set two ways. The servlet container may set attributes to make available custom information
+     * about a request. For example, for requests made using HTTPS, the attribute
+     * <code>jakarta.servlet.request.X509Certificate</code> can be used to retrieve information on the certificate of
+     * the client. Attributes can also be set programmatically using {@link ServletRequest#setAttribute}. This allows
+     * information to be embedded into a request before a {@link RequestDispatcher} call.
      * <p>
-     * Attribute names should follow the same conventions as package names.
-     * Names beginning with <code>java.*</code> and <code>javax.*</code> are
-     * reserved for use by the Servlet specification. Names beginning with
-     * <code>sun.*</code>, <code>com.sun.*</code>, <code>oracle.*</code> and
-     * <code>com.oracle.*</code>) are reserved for use by Oracle Corporation.
+     * Attribute names should follow the same conventions as package names. Names beginning with <code>java.*</code> and
+     * <code>javax.*</code> are reserved for use by the Servlet specification. Names beginning with <code>sun.*</code>,
+     * <code>com.sun.*</code>, <code>oracle.*</code> and <code>com.oracle.*</code>) are reserved for use by Oracle
+     * Corporation.
      *
-     * @param name
-     *            a <code>String</code> specifying the name of the attribute
-     * @return an <code>Object</code> containing the value of the attribute, or
-     *         <code>null</code> if the attribute does not exist
+     * @param name a <code>String</code> specifying the name of the attribute
+     *
+     * @return an <code>Object</code> containing the value of the attribute, or <code>null</code> if the attribute does
+     *             not exist
      */
     Object getAttribute(String name);
 
     /**
-     * Returns an <code>Enumeration</code> containing the names of the
-     * attributes available to this request. This method returns an empty
-     * <code>Enumeration</code> if the request has no attributes available to
-     * it.
+     * Returns an <code>Enumeration</code> containing the names of the attributes available to this request. This method
+     * returns an empty <code>Enumeration</code> if the request has no attributes available to it.
      *
-     * @return an <code>Enumeration</code> of strings containing the names of the
-     *         request's attributes
+     * @return an <code>Enumeration</code> of strings containing the names of the request's attributes
      */
     Enumeration<String> getAttributeNames();
 
     /**
-     * Returns the name of the character encoding used in the body of this
-     * request. This method returns <code>null</code> if the no character
-     * encoding has been specified. The following priority order is used to
+     * Returns the name of the character encoding used in the body of this request. This method returns
+     * <code>null</code> if the no character encoding has been specified. The following priority order is used to
      * determine the specified encoding:
      * <ol>
      * <li>per request</li>
      * <li>web application default via the deployment descriptor or
-     *     {@link ServletContext#setRequestCharacterEncoding(String)}</li>
+     * {@link ServletContext#setRequestCharacterEncoding(String)}</li>
      * <li>container default via container specific configuration</li>
      * </ol>
      *
-     * @return a <code>String</code> containing the name of the character
-     *         encoding, or <code>null</code> if the request does not specify a
-     *         character encoding
+     * @return a <code>String</code> containing the name of the character encoding, or <code>null</code> if the request
+     *             does not specify a character encoding
      */
     String getCharacterEncoding();
 
     /**
-     * Overrides the name of the character encoding used in the body of this
-     * request. This method must be called prior to reading request parameters
-     * or reading input using getReader().
+     * Overrides the name of the character encoding used in the body of this request. This method must be called prior
+     * to reading request parameters or reading input using getReader().
      *
-     * @param encoding a {@code String} containing the name of the character
-     *     encoding
+     * @param encoding a {@code String} containing the name of the character encoding
      *
-     * @throws UnsupportedEncodingException
-     *             if this is not a valid encoding
+     * @throws UnsupportedEncodingException if this is not a valid encoding
      */
     void setCharacterEncoding(String encoding) throws UnsupportedEncodingException;
 
 
     /**
-     * Overrides the character encoding used in the body of this request. This
-     * method must be called prior to reading request parameters or reading
-     * input using getReader(). Otherwise, it has no effect.
-     *
-     * <p>Implementations are strongly encouraged to override this default
-     * method and provide a more efficient implementation.
+     * Overrides the character encoding used in the body of this request. This method must be called prior to reading
+     * request parameters or reading input using getReader(). Otherwise, it has no effect.
+     * <p>
+     * Implementations are strongly encouraged to override this default method and provide a more efficient
+     * implementation.
      *
      * @param encoding {@code Charset} representing the character encoding.
      *
@@ -129,305 +113,248 @@ public interface ServletRequest {
     }
 
     /**
-     * Returns the length, in bytes, of the request body and made available by
-     * the input stream, or -1 if the length is not known. For HTTP servlets,
-     * same as the value of the CGI variable CONTENT_LENGTH.
+     * Returns the length, in bytes, of the request body and made available by the input stream, or -1 if the length is
+     * not known. For HTTP servlets, same as the value of the CGI variable CONTENT_LENGTH.
      *
-     * @return an integer containing the length of the request body or -1 if the
-     *         length is not known or is greater than {@link Integer#MAX_VALUE}
+     * @return an integer containing the length of the request body or -1 if the length is not known or is greater than
+     *             {@link Integer#MAX_VALUE}
      */
     int getContentLength();
 
     /**
-     * Returns the length, in bytes, of the request body and made available by
-     * the input stream, or -1 if the length is not known. For HTTP servlets,
-     * same as the value of the CGI variable CONTENT_LENGTH.
+     * Returns the length, in bytes, of the request body and made available by the input stream, or -1 if the length is
+     * not known. For HTTP servlets, same as the value of the CGI variable CONTENT_LENGTH.
+     *
+     * @return a long integer containing the length of the request body or -1 if the length is not known
      *
-     * @return a long integer containing the length of the request body or -1 if
-     *         the length is not known
      * @since Servlet 3.1
      */
     long getContentLengthLong();
 
     /**
-     * Returns the MIME type of the body of the request, or <code>null</code> if
-     * the type is not known. For HTTP servlets, same as the value of the CGI
-     * variable CONTENT_TYPE.
+     * Returns the MIME type of the body of the request, or <code>null</code> if the type is not known. For HTTP
+     * servlets, same as the value of the CGI variable CONTENT_TYPE.
      *
-     * @return a <code>String</code> containing the name of the MIME type of the
-     *         request, or null if the type is not known
+     * @return a <code>String</code> containing the name of the MIME type of the request, or null if the type is not
+     *             known
      */
     String getContentType();
 
     /**
-     * Retrieves the body of the request as binary data using a
-     * {@link ServletInputStream}. Either this method or {@link #getReader} may
-     * be called to read the body, not both.
+     * Retrieves the body of the request as binary data using a {@link ServletInputStream}. Either this method or
+     * {@link #getReader} may be called to read the body, not both.
      *
-     * @return a {@link ServletInputStream} object containing the body of the
-     *         request
-     * @exception IllegalStateException
-     *                if the {@link #getReader} method has already been called
-     *                for this request
-     * @exception IOException
-     *                if an input or output exception occurred
+     * @return a {@link ServletInputStream} object containing the body of the request
+     *
+     * @exception IllegalStateException if the {@link #getReader} method has already been called for this request
+     * @exception IOException           if an input or output exception occurred
      */
     ServletInputStream getInputStream() throws IOException;
 
     /**
-     * Returns the value of a request parameter as a <code>String</code>, or
-     * <code>null</code> if the parameter does not exist. Request parameters are
-     * extra information sent with the request. For HTTP servlets, parameters
-     * are contained in the query string or posted form data.
+     * Returns the value of a request parameter as a <code>String</code>, or <code>null</code> if the parameter does not
+     * exist. Request parameters are extra information sent with the request. For HTTP servlets, parameters are
+     * contained in the query string or posted form data.
      * <p>
-     * You should only use this method when you are sure the parameter has only
-     * one value. If the parameter might have more than one value, use
-     * {@link #getParameterValues}.
+     * You should only use this method when you are sure the parameter has only one value. If the parameter might have
+     * more than one value, use {@link #getParameterValues}.
      * <p>
-     * If you use this method with a multivalued parameter, the value returned
-     * is equal to the first value in the array returned by
-     * <code>getParameterValues</code>.
+     * If you use this method with a multivalued parameter, the value returned is equal to the first value in the array
+     * returned by <code>getParameterValues</code>.
      * <p>
-     * If the parameter data was sent in the request body, such as occurs with
-     * an HTTP POST request, then reading the body directly via
-     * {@link #getInputStream} or {@link #getReader} can interfere with the
-     * execution of this method.
-     *
-     * @param name
-     *            a <code>String</code> specifying the name of the parameter
-     * @return a <code>String</code> representing the single value of the
-     *         parameter
+     * If the parameter data was sent in the request body, such as occurs with an HTTP POST request, then reading the
+     * body directly via {@link #getInputStream} or {@link #getReader} can interfere with the execution of this method.
+     *
+     * @param name a <code>String</code> specifying the name of the parameter
+     *
+     * @return a <code>String</code> representing the single value of the parameter
+     *
      * @see #getParameterValues
      */
     String getParameter(String name);
 
     /**
-     * Returns an <code>Enumeration</code> of <code>String</code> objects
-     * containing the names of the parameters contained in this request. If the
-     * request has no parameters, the method returns an empty
+     * Returns an <code>Enumeration</code> of <code>String</code> objects containing the names of the parameters
+     * contained in this request. If the request has no parameters, the method returns an empty
      * <code>Enumeration</code>.
      *
-     * @return an <code>Enumeration</code> of <code>String</code> objects, each
-     *         <code>String</code> containing the name of a request parameter;
-     *         or an empty <code>Enumeration</code> if the request has no
-     *         parameters
+     * @return an <code>Enumeration</code> of <code>String</code> objects, each <code>String</code> containing the name
+     *             of a request parameter; or an empty <code>Enumeration</code> if the request has no parameters
      */
     Enumeration<String> getParameterNames();
 
     /**
-     * Returns an array of <code>String</code> objects containing all of the
-     * values the given request parameter has, or <code>null</code> if the
-     * parameter does not exist.
+     * Returns an array of <code>String</code> objects containing all of the values the given request parameter has, or
+     * <code>null</code> if the parameter does not exist.
      * <p>
      * If the parameter has a single value, the array has a length of 1.
      *
-     * @param name
-     *            a <code>String</code> containing the name of the parameter
-     *            whose value is requested
-     * @return an array of <code>String</code> objects containing the parameter's
-     *         values
+     * @param name a <code>String</code> containing the name of the parameter whose value is requested
+     *
+     * @return an array of <code>String</code> objects containing the parameter's values
+     *
      * @see #getParameter
      */
     String[] getParameterValues(String name);
 
     /**
-     * Returns a java.util.Map of the parameters of this request. Request
-     * parameters are extra information sent with the request. For HTTP
-     * servlets, parameters are contained in the query string or posted form
-     * data.
+     * Returns a java.util.Map of the parameters of this request. Request parameters are extra information sent with the
+     * request. For HTTP servlets, parameters are contained in the query string or posted form data.
      *
-     * @return an immutable java.util.Map containing parameter names as keys and
-     *         parameter values as map values. The keys in the parameter map are
-     *         of type String. The values in the parameter map are of type
-     *         String array.
+     * @return an immutable java.util.Map containing parameter names as keys and parameter values as map values. The
+     *             keys in the parameter map are of type String. The values in the parameter map are of type String
+     *             array.
      */
-    Map<String, String[]> getParameterMap();
+    Map<String,String[]> getParameterMap();
 
     /**
      * Returns the name and version of the protocol the request uses in the form
-     * <i>protocol/majorVersion.minorVersion</i>, for example, HTTP/1.1. For
-     * HTTP servlets, the value returned is the same as the value of the CGI
-     * variable <code>SERVER_PROTOCOL</code>.
+     * <i>protocol/majorVersion.minorVersion</i>, for example, HTTP/1.1. For HTTP servlets, the value returned is the
+     * same as the value of the CGI variable <code>SERVER_PROTOCOL</code>.
      *
-     * @return a <code>String</code> containing the protocol name and version
-     *         number
+     * @return a <code>String</code> containing the protocol name and version number
      */
     String getProtocol();
 
     /**
-     * Returns the name of the scheme used to make this request, for example,
-     * <code>http</code>, <code>https</code>, or <code>ftp</code>. Different
-     * schemes have different rules for constructing URLs, as noted in RFC 1738.
+     * Returns the name of the scheme used to make this request, for example, <code>http</code>, <code>https</code>, or
+     * <code>ftp</code>. Different schemes have different rules for constructing URLs, as noted in RFC 1738.
      *
-     * @return a <code>String</code> containing the name of the scheme used to
-     *         make this request
+     * @return a <code>String</code> containing the name of the scheme used to make this request
      */
     String getScheme();
 
     /**
-     * Returns the host name of the server to which the request was sent. It is
-     * the value of the part before ":" in the <code>Host</code> header value,
-     * if any, or the resolved server name, or the server IP address.
+     * Returns the host name of the server to which the request was sent. It is the value of the part before ":" in the
+     * <code>Host</code> header value, if any, or the resolved server name, or the server IP address.
      *
      * @return a <code>String</code> containing the name of the server
      */
     String getServerName();
 
     /**
-     * Returns the port number to which the request was sent. It is the value of
-     * the part after ":" in the <code>Host</code> header value, if any, or the
-     * server port where the client connection was accepted on.
+     * Returns the port number to which the request was sent. It is the value of the part after ":" in the
+     * <code>Host</code> header value, if any, or the server port where the client connection was accepted on.
      *
      * @return an integer specifying the port number
      */
     int getServerPort();
 
     /**
-     * Retrieves the body of the request as character data using a
-     * <code>BufferedReader</code>. The reader translates the character data
-     * according to the character encoding used on the body. Either this method
-     * or {@link #getInputStream} may be called to read the body, not both.
+     * Retrieves the body of the request as character data using a <code>BufferedReader</code>. The reader translates
+     * the character data according to the character encoding used on the body. Either this method or
+     * {@link #getInputStream} may be called to read the body, not both.
      *
      * @return a <code>BufferedReader</code> containing the body of the request
-     * @exception java.io.UnsupportedEncodingException
-     *                if the character set encoding used is not supported and
-     *                the text cannot be decoded
-     * @exception IllegalStateException
-     *                if {@link #getInputStream} method has been called on this
-     *                request
-     * @exception IOException
-     *                if an input or output exception occurred
+     *
+     * @exception java.io.UnsupportedEncodingException if the character set encoding used is not supported and the text
+     *                                                     cannot be decoded
+     * @exception IllegalStateException                if {@link #getInputStream} method has been called on this request
+     * @exception IOException                          if an input or output exception occurred
+     *
      * @see #getInputStream
      */
     BufferedReader getReader() throws IOException;
 
     /**
-     * Returns the Internet Protocol (IP) address of the client or last proxy
-     * that sent the request. For HTTP servlets, same as the value of the CGI
-     * variable <code>REMOTE_ADDR</code>.
+     * Returns the Internet Protocol (IP) address of the client or last proxy that sent the request. For HTTP servlets,
+     * same as the value of the CGI variable <code>REMOTE_ADDR</code>.
      *
-     * @return a <code>String</code> containing the IP address of the client
-     *         that sent the request
+     * @return a <code>String</code> containing the IP address of the client that sent the request
      */
     String getRemoteAddr();
 
     /**
-     * Returns the fully qualified name of the client or the last proxy that
-     * sent the request. If the engine cannot or chooses not to resolve the
-     * hostname (to improve performance), this method returns the dotted-string
-     * form of the IP address. For HTTP servlets, same as the value of the CGI
-     * variable <code>REMOTE_HOST</code>.
+     * Returns the fully qualified name of the client or the last proxy that sent the request. If the engine cannot or
+     * chooses not to resolve the hostname (to improve performance), this method returns the dotted-string form of the
+     * IP address. For HTTP servlets, same as the value of the CGI variable <code>REMOTE_HOST</code>.
      *
-     * @return a <code>String</code> containing the fully qualified name of the
-     *         client
+     * @return a <code>String</code> containing the fully qualified name of the client
      */
     String getRemoteHost();
 
     /**
-     * Stores an attribute in this request. Attributes are reset between
-     * requests. This method is most often used in conjunction with
-     * {@link RequestDispatcher}.
+     * Stores an attribute in this request. Attributes are reset between requests. This method is most often used in
+     * conjunction with {@link RequestDispatcher}.
      * <p>
-     * Attribute names should follow the same conventions as package names.
-     * Names beginning with <code>java.*</code> and <code>javax.*</code> are
-     * reserved for use by the Servlet specification. Names beginning with
-     * <code>sun.*</code>, <code>com.sun.*</code>, <code>oracle.*</code> and
-     * <code>com.oracle.*</code>) are reserved for use by Oracle Corporation.
-     * <br>
-     * If the object passed in is null, the effect is the same as calling
-     * {@link #removeAttribute}. <br>
-     * It is warned that when the request is dispatched from the servlet resides
-     * in a different web application by <code>RequestDispatcher</code>, the
-     * object set by this method may not be correctly retrieved in the caller
+     * Attribute names should follow the same conventions as package names. Names beginning with <code>java.*</code> and
+     * <code>javax.*</code> are reserved for use by the Servlet specification. Names beginning with <code>sun.*</code>,
+     * <code>com.sun.*</code>, <code>oracle.*</code> and <code>com.oracle.*</code>) are reserved for use by Oracle
+     * Corporation. <br>
+     * If the object passed in is null, the effect is the same as calling {@link #removeAttribute}. <br>
+     * It is warned that when the request is dispatched from the servlet resides in a different web application by
+     * <code>RequestDispatcher</code>, the object set by this method may not be correctly retrieved in the caller
      * servlet.
      *
-     * @param name
-     *            a <code>String</code> specifying the name of the attribute
-     * @param o
-     *            the <code>Object</code> to be stored
+     * @param name a <code>String</code> specifying the name of the attribute
+     * @param o    the <code>Object</code> to be stored
      */
     void setAttribute(String name, Object o);
 
     /**
-     * Removes an attribute from this request. This method is not generally
-     * needed as attributes only persist as long as the request is being
-     * handled.
+     * Removes an attribute from this request. This method is not generally needed as attributes only persist as long as
+     * the request is being handled.
      * <p>
-     * Attribute names should follow the same conventions as package names.
-     * Names beginning with <code>java.*</code> and <code>javax.*</code> are
-     * reserved for use by the Servlet specification. Names beginning with
-     * <code>sun.*</code>, <code>com.sun.*</code>, <code>oracle.*</code> and
-     * <code>com.oracle.*</code>) are reserved for use by Oracle Corporation.
+     * Attribute names should follow the same conventions as package names. Names beginning with <code>java.*</code> and
+     * <code>javax.*</code> are reserved for use by the Servlet specification. Names beginning with <code>sun.*</code>,
+     * <code>com.sun.*</code>, <code>oracle.*</code> and <code>com.oracle.*</code>) are reserved for use by Oracle
+     * Corporation.
      *
-     * @param name
-     *            a <code>String</code> specifying the name of the attribute to
-     *            remove
+     * @param name a <code>String</code> specifying the name of the attribute to remove
      */
     void removeAttribute(String name);
 
     /**
-     * Returns the preferred <code>Locale</code> that the client will accept
-     * content in, based on the Accept-Language header. If the client request
-     * doesn't provide an Accept-Language header, this method returns the
-     * default locale for the server.
+     * Returns the preferred <code>Locale</code> that the client will accept content in, based on the Accept-Language
+     * header. If the client request doesn't provide an Accept-Language header, this method returns the default locale
+     * for the server.
      *
      * @return the preferred <code>Locale</code> for the client
      */
     Locale getLocale();
 
     /**
-     * Returns an <code>Enumeration</code> of <code>Locale</code> objects
-     * indicating, in decreasing order starting with the preferred locale, the
-     * locales that are acceptable to the client based on the Accept-Language
-     * header. If the client request doesn't provide an Accept-Language header,
-     * this method returns an <code>Enumeration</code> containing one
-     * <code>Locale</code>, the default locale for the server.
+     * Returns an <code>Enumeration</code> of <code>Locale</code> objects indicating, in decreasing order starting with
+     * the preferred locale, the locales that are acceptable to the client based on the Accept-Language header. If the
+     * client request doesn't provide an Accept-Language header, this method returns an <code>Enumeration</code>
+     * containing one <code>Locale</code>, the default locale for the server.
      *
-     * @return an <code>Enumeration</code> of preferred <code>Locale</code>
-     *         objects for the client
+     * @return an <code>Enumeration</code> of preferred <code>Locale</code> objects for the client
      */
     Enumeration<Locale> getLocales();
 
     /**
-     * Returns a boolean indicating whether this request was made using a secure
-     * channel, such as HTTPS.
+     * Returns a boolean indicating whether this request was made using a secure channel, such as HTTPS.
      *
-     * @return a boolean indicating if the request was made using a secure
-     *         channel
+     * @return a boolean indicating if the request was made using a secure channel
      */
     boolean isSecure();
 
     /**
-     * Returns a {@link RequestDispatcher} object that acts as a wrapper for the
-     * resource located at the given path. A <code>RequestDispatcher</code>
-     * object can be used to forward a request to the resource or to include the
-     * resource in a response. The resource can be dynamic or static.
+     * Returns a {@link RequestDispatcher} object that acts as a wrapper for the resource located at the given path. A
+     * <code>RequestDispatcher</code> object can be used to forward a request to the resource or to include the resource
+     * in a response. The resource can be dynamic or static.
      * <p>
-     * The pathname specified may be relative, although it cannot extend outside
-     * the current servlet context. If the path begins with a "/" it is
-     * interpreted as relative to the current context root. This method returns
-     * <code>null</code> if the servlet container cannot return a
-     * <code>RequestDispatcher</code>.
+     * The pathname specified may be relative, although it cannot extend outside the current servlet context. If the
+     * path begins with a "/" it is interpreted as relative to the current context root. This method returns
+     * <code>null</code> if the servlet container cannot return a <code>RequestDispatcher</code>.
      * <p>
-     * The difference between this method and
-     * {@link ServletContext#getRequestDispatcher} is that this method can take
-     * a relative path.
-     *
-     * @param path
-     *            a <code>String</code> specifying the pathname to the resource.
-     *            If it is relative, it must be relative against the current
-     *            servlet.
-     * @return a <code>RequestDispatcher</code> object that acts as a wrapper for
-     *         the resource at the specified path, or <code>null</code> if the
-     *         servlet container cannot return a <code>RequestDispatcher</code>
+     * The difference between this method and {@link ServletContext#getRequestDispatcher} is that this method can take a
+     * relative path.
+     *
+     * @param path a <code>String</code> specifying the pathname to the resource. If it is relative, it must be relative
+     *                 against the current servlet.
+     *
+     * @return a <code>RequestDispatcher</code> object that acts as a wrapper for the resource at the specified path, or
+     *             <code>null</code> if the servlet container cannot return a <code>RequestDispatcher</code>
+     *
      * @see RequestDispatcher
      * @see ServletContext#getRequestDispatcher
      */
     RequestDispatcher getRequestDispatcher(String path);
 
     /**
-     * Returns the Internet Protocol (IP) source port of the client or last
-     * proxy that sent the request.
+     * Returns the Internet Protocol (IP) source port of the client or last proxy that sent the request.
      *
      * @return an integer specifying the port number
      *
@@ -436,28 +363,25 @@ public interface ServletRequest {
     int getRemotePort();
 
     /**
-     * Returns the host name of the Internet Protocol (IP) interface on which
-     * the request was received.
+     * Returns the host name of the Internet Protocol (IP) interface on which the request was received.
+     *
+     * @return a <code>String</code> containing the host name of the IP on which the request was received.
      *
-     * @return a <code>String</code> containing the host name of the IP on which
-     *         the request was received.
      * @since Servlet 2.4
      */
     String getLocalName();
 
     /**
-     * Returns the Internet Protocol (IP) address of the interface on which the
-     * request was received.
+     * Returns the Internet Protocol (IP) address of the interface on which the request was received.
+     *
+     * @return a <code>String</code> containing the IP address on which the request was received.
      *
-     * @return a <code>String</code> containing the IP address on which the
-     *         request was received.
      * @since Servlet 2.4
      */
     String getLocalAddr();
 
     /**
-     * Returns the Internet Protocol (IP) port number of the interface on which
-     * the request was received.
+     * Returns the Internet Protocol (IP) port number of the interface on which the request was received.
      *
      * @return an integer specifying the port number
      *
@@ -467,37 +391,43 @@ public interface ServletRequest {
 
     /**
      * @return TODO
+     *
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     ServletContext getServletContext();
 
     /**
      * @return TODO
+     *
      * @throws IllegalStateException If async is not supported for this request
+     *
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     AsyncContext startAsync() throws IllegalStateException;
 
     /**
-     * @param servletRequest    The ServletRequest with which to initialise the
-     *                          asynchronous context
-     * @param servletResponse   The ServletResponse with which to initialise the
-     *                          asynchronous context
+     * @param servletRequest  The ServletRequest with which to initialise the asynchronous context
+     * @param servletResponse The ServletResponse with which to initialise the asynchronous context
+     *
      * @return TODO
+     *
      * @throws IllegalStateException If async is not supported for this request
+     *
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
-    AsyncContext startAsync(ServletRequest servletRequest,
-            ServletResponse servletResponse) throws IllegalStateException;
+    AsyncContext startAsync(ServletRequest servletRequest, ServletResponse servletResponse)
+            throws IllegalStateException;
 
     /**
      * @return TODO
+     *
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     boolean isAsyncStarted();
 
     /**
      * @return TODO
+     *
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     boolean isAsyncSupported();
@@ -507,8 +437,8 @@ public interface ServletRequest {
      *
      * @return The current AsyncContext
      *
-     * @throws IllegalStateException if the request is not in asynchronous mode
-     *         (i.e. @link #isAsyncStarted() is {@code false})
+     * @throws IllegalStateException if the request is not in asynchronous mode (i.e. @link #isAsyncStarted() is
+     *                                   {@code false})
      *
      * @since Servlet 3.0
      */
@@ -516,16 +446,15 @@ public interface ServletRequest {
 
     /**
      * @return TODO
+     *
      * @since Servlet 3.0 TODO SERVLET3 - Add comments
      */
     DispatcherType getDispatcherType();
 
     /**
-     * Obtain a unique (within the lifetime of the Servlet container) identifier
-     * string for this request.
+     * Obtain a unique (within the lifetime of the Servlet container) identifier string for this request.
      * <p>
-     * There is no defined format for this string. The format is implementation
-     * dependent.
+     * There is no defined format for this string. The format is implementation dependent.
      *
      * @return A unique identifier for the request
      *
@@ -534,8 +463,8 @@ public interface ServletRequest {
     String getRequestId();
 
     /**
-     * Obtain the request identifier for this request as defined by the protocol
-     * in use. Note that some protocols do not define such an identifier.
+     * Obtain the request identifier for this request as defined by the protocol in use. Note that some protocols do not
+     * define such an identifier.
      * <p>
      * Examples of protocol provided request identifiers include:
      * <dl>
@@ -549,19 +478,17 @@ public interface ServletRequest {
      * <dd>None, so the empty string should be returned</dd>
      * </dl>
      *
-     * @return The request identifier if one is defined, otherwise an empty
-     *         string
+     * @return The request identifier if one is defined, otherwise an empty string
      *
      * @since Servlet 6.0
      */
     String getProtocolRequestId();
 
     /**
-     * Obtain details of the network connection to the Servlet container that is
-     * being used by this request. The information presented may differ from
-     * information presented elsewhere in the Servlet API as raw information is
-     * presented without adjustments for, example, use of reverse proxies that
-     * may be applied elsewhere in the Servlet API.
+     * Obtain details of the network connection to the Servlet container that is being used by this request. The
+     * information presented may differ from information presented elsewhere in the Servlet API as raw information is
+     * presented without adjustments for, example, use of reverse proxies that may be applied elsewhere in the Servlet
+     * API.
      *
      * @return The network connection details.
      *

==================================================
ServletRequestAttributeListener.java
index 310c02f659..d86563aa85 100644
--- a/java/jakarta/servlet/ServletRequestAttributeEvent.java
+++ b/java/jakarta/servlet/ServletRequestAttributeEvent.java
@@ -17,10 +17,10 @@
 package jakarta.servlet;
 
 /**
- * This is the event class for notifications of changes to the attributes of the
- * servlet request in an application.
+ * This is the event class for notifications of changes to the attributes of the servlet request in an application.
  *
  * @see ServletRequestAttributeListener
+ *
  * @since Servlet 2.4
  */
 public class ServletRequestAttributeEvent extends ServletRequestEvent {
@@ -37,21 +37,15 @@ public class ServletRequestAttributeEvent extends ServletRequestEvent {
     private final Object value;
 
     /**
-     * Construct a ServletRequestAttributeEvent giving the servlet context of
-     * this web application, the ServletRequest whose attributes are changing
-     * and the name and value of the attribute.
+     * Construct a ServletRequestAttributeEvent giving the servlet context of this web application, the ServletRequest
+     * whose attributes are changing and the name and value of the attribute.
      *
-     * @param sc
-     *            the ServletContext that is sending the event.
-     * @param request
-     *            the ServletRequest that is sending the event.
-     * @param name
-     *            the name of the request attribute.
-     * @param value
-     *            the value of the request attribute.
+     * @param sc      the ServletContext that is sending the event.
+     * @param request the ServletRequest that is sending the event.
+     * @param name    the name of the request attribute.
+     * @param value   the value of the request attribute.
      */
-    public ServletRequestAttributeEvent(ServletContext sc,
-            ServletRequest request, String name, Object value) {
+    public ServletRequestAttributeEvent(ServletContext sc, ServletRequest request, String name, Object value) {
         super(sc, request);
         this.name = name;
         this.value = value;
@@ -67,10 +61,9 @@ public class ServletRequestAttributeEvent extends ServletRequestEvent {
     }
 
     /**
-     * Returns the value of the attribute that has been added, removed or
-     * replaced. If the attribute was added, this is the value of the attribute.
-     * If the attribute was removed, this is the value of the removed attribute.
-     * If the attribute was replaced, this is the old value of the attribute.
+     * Returns the value of the attribute that has been added, removed or replaced. If the attribute was added, this is
+     * the value of the attribute. If the attribute was removed, this is the value of the removed attribute. If the
+     * attribute was replaced, this is the old value of the attribute.
      *
      * @return the value of the changed request attribute
      */

==================================================
ServletRequestEvent.java
index a4a8912132..2a711f9b3a 100644
--- a/java/jakarta/servlet/ServletRequestAttributeListener.java
+++ b/java/jakarta/servlet/ServletRequestAttributeListener.java
@@ -19,40 +19,37 @@ package jakarta.servlet;
 import java.util.EventListener;
 
 /**
- * A ServletRequestAttributeListener can be implemented by the
- * developer interested in being notified of request attribute
- * changes. Notifications will be generated while the request
- * is within the scope of the web application in which the listener
- * is registered. A request is defined as coming into scope when
- * it is about to enter the first servlet or filter in each web
- * application, as going out of scope when it exits the last servlet
- * or the first filter in the chain.
+ * A ServletRequestAttributeListener can be implemented by the developer interested in being notified of request
+ * attribute changes. Notifications will be generated while the request is within the scope of the web application in
+ * which the listener is registered. A request is defined as coming into scope when it is about to enter the first
+ * servlet or filter in each web application, as going out of scope when it exits the last servlet or the first filter
+ * in the chain.
  *
  * @since Servlet 2.4
  */
 public interface ServletRequestAttributeListener extends EventListener {
     /**
-     * Notification that a new attribute was added to the
-     * servlet request. Called after the attribute is added.
-     * The default implementation is a NO-OP.
+     * Notification that a new attribute was added to the servlet request. Called after the attribute is added. The
+     * default implementation is a NO-OP.
+     *
      * @param srae Information about the new request attribute
      */
     default void attributeAdded(ServletRequestAttributeEvent srae) {
     }
 
     /**
-     * Notification that an existing attribute has been removed from the
-     * servlet request. Called after the attribute is removed.
-     * The default implementation is a NO-OP.
+     * Notification that an existing attribute has been removed from the servlet request. Called after the attribute is
+     * removed. The default implementation is a NO-OP.
+     *
      * @param srae Information about the removed request attribute
      */
     default void attributeRemoved(ServletRequestAttributeEvent srae) {
     }
 
     /**
-     * Notification that an attribute was replaced on the
-     * servlet request. Called after the attribute is replaced.
-     * The default implementation is a NO-OP.
+     * Notification that an attribute was replaced on the servlet request. Called after the attribute is replaced. The
+     * default implementation is a NO-OP.
+     *
      * @param srae Information about the replaced request attribute
      */
     default void attributeReplaced(ServletRequestAttributeEvent srae) {

==================================================
ServletRequestListener.java
index 0005ee2915..6a24875365 100644
--- a/java/jakarta/servlet/ServletRequestEvent.java
+++ b/java/jakarta/servlet/ServletRequestEvent.java
@@ -17,10 +17,11 @@
 package jakarta.servlet;
 
 /**
- * Events of this kind indicate lifecycle events for a ServletRequest. The
- * source of the event is the ServletContext of this web application.
+ * Events of this kind indicate lifecycle events for a ServletRequest. The source of the event is the ServletContext of
+ * this web application.
  *
  * @see ServletRequestListener
+ *
  * @since Servlet 2.4
  */
 public class ServletRequestEvent extends java.util.EventObject {
@@ -29,13 +30,10 @@ public class ServletRequestEvent extends java.util.EventObject {
     private final transient ServletRequest request;
 
     /**
-     * Construct a ServletRequestEvent for the given ServletContext and
-     * ServletRequest.
+     * Construct a ServletRequestEvent for the given ServletContext and ServletRequest.
      *
-     * @param sc
-     *            the ServletContext of the web application.
-     * @param request
-     *            the ServletRequest that is sending the event.
+     * @param sc      the ServletContext of the web application.
+     * @param request the ServletRequest that is sending the event.
      */
     public ServletRequestEvent(ServletContext sc, ServletRequest request) {
         super(sc);
@@ -44,6 +42,7 @@ public class ServletRequestEvent extends java.util.EventObject {
 
     /**
      * Get the associated ServletRequest.
+     *
      * @return the ServletRequest that is changing.
      */
     public ServletRequest getServletRequest() {
@@ -52,6 +51,7 @@ public class ServletRequestEvent extends java.util.EventObject {
 
     /**
      * Get the associated ServletContext.
+     *
      * @return the ServletContext that is changing.
      */
     public ServletContext getServletContext() {

==================================================
ServletRequestWrapper.java
index 5ad6e79b0f..59d2c4e2e7 100644
--- a/java/jakarta/servlet/ServletRequestListener.java
+++ b/java/jakarta/servlet/ServletRequestListener.java
@@ -19,30 +19,28 @@ package jakarta.servlet;
 import java.util.EventListener;
 
 /**
- * A ServletRequestListener can be implemented by the developer
- * interested in being notified of requests coming in and out of
- * scope in a web component. A request is defined as coming into
- * scope when it is about to enter the first servlet or filter
- * in each web application, as going out of scope when it exits
- * the last servlet or the first filter in the chain.
+ * A ServletRequestListener can be implemented by the developer interested in being notified of requests coming in and
+ * out of scope in a web component. A request is defined as coming into scope when it is about to enter the first
+ * servlet or filter in each web application, as going out of scope when it exits the last servlet or the first filter
+ * in the chain.
  *
  * @since Servlet 2.4
  */
 public interface ServletRequestListener extends EventListener {
 
     /**
-     * The request is about to go out of scope of the web application.
-     * The default implementation is a NO-OP.
+     * The request is about to go out of scope of the web application. The default implementation is a NO-OP.
+     *
      * @param sre Information about the request
      */
-    default void requestDestroyed (ServletRequestEvent sre) {
+    default void requestDestroyed(ServletRequestEvent sre) {
     }
 
     /**
-     * The request is about to come into scope of the web application.
-     * The default implementation is a NO-OP.
+     * The request is about to come into scope of the web application. The default implementation is a NO-OP.
+     *
      * @param sre Information about the request
      */
-    default void requestInitialized (ServletRequestEvent sre) {
+    default void requestInitialized(ServletRequestEvent sre) {
     }
 }

==================================================
ServletResponse.java
index 09f274ac19..af003a0cc7 100644
--- a/java/jakarta/servlet/ServletRequestWrapper.java
+++ b/java/jakarta/servlet/ServletRequestWrapper.java
@@ -25,9 +25,8 @@ import java.util.Map;
 import java.util.ResourceBundle;
 
 /**
- * Provides a convenient implementation of the ServletRequest interface that can
- * be subclassed by developers wishing to adapt the request to a Servlet. This
- * class implements the Wrapper or Decorator pattern. Methods default to calling
+ * Provides a convenient implementation of the ServletRequest interface that can be subclassed by developers wishing to
+ * adapt the request to a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling
  * through to the wrapped request object.
  *
  * @see jakarta.servlet.ServletRequest
@@ -56,6 +55,7 @@ public class ServletRequestWrapper implements ServletRequest {
 
     /**
      * Get the wrapped request.
+     *
      * @return the wrapped request object
      */
     public ServletRequest getRequest() {
@@ -77,8 +77,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to call getAttribute(String name)
-     * on the wrapped request object.
+     * The default behavior of this method is to call getAttribute(String name) on the wrapped request object.
      */
     @Override
     public Object getAttribute(String name) {
@@ -86,8 +85,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return getAttributeNames() on
-     * the wrapped request object.
+     * The default behavior of this method is to return getAttributeNames() on the wrapped request object.
      */
     @Override
     public Enumeration<String> getAttributeNames() {
@@ -95,8 +93,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return getCharacterEncoding()
-     * on the wrapped request object.
+     * The default behavior of this method is to return getCharacterEncoding() on the wrapped request object.
      */
     @Override
     public String getCharacterEncoding() {
@@ -104,18 +101,15 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to set the character encoding on
-     * the wrapped request object.
+     * The default behavior of this method is to set the character encoding on the wrapped request object.
      */
     @Override
-    public void setCharacterEncoding(String enc)
-            throws java.io.UnsupportedEncodingException {
+    public void setCharacterEncoding(String enc) throws java.io.UnsupportedEncodingException {
         this.request.setCharacterEncoding(enc);
     }
 
     /**
-     * The default behavior of this method is to set the character encoding on
-     * the wrapped request object.
+     * The default behavior of this method is to set the character encoding on the wrapped request object.
      *
      * @since Servlet 6.1
      */
@@ -125,8 +119,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return getContentLength() on
-     * the wrapped request object.
+     * The default behavior of this method is to return getContentLength() on the wrapped request object.
      */
     @Override
     public int getContentLength() {
@@ -134,8 +127,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return getContentLengthLong()
-     * on the wrapped request object.
+     * The default behavior of this method is to return getContentLengthLong() on the wrapped request object.
      *
      * @since Servlet 3.1
      */
@@ -145,8 +137,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return getContentType() on the
-     * wrapped request object.
+     * The default behavior of this method is to return getContentType() on the wrapped request object.
      */
     @Override
     public String getContentType() {
@@ -154,8 +145,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return getInputStream() on the
-     * wrapped request object.
+     * The default behavior of this method is to return getInputStream() on the wrapped request object.
      */
     @Override
     public ServletInputStream getInputStream() throws IOException {
@@ -163,8 +153,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return getParameter(String
-     * name) on the wrapped request object.
+     * The default behavior of this method is to return getParameter(String name) on the wrapped request object.
      */
     @Override
     public String getParameter(String name) {
@@ -172,17 +161,15 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return getParameterMap() on the
-     * wrapped request object.
+     * The default behavior of this method is to return getParameterMap() on the wrapped request object.
      */
     @Override
-    public Map<String, String[]> getParameterMap() {
+    public Map<String,String[]> getParameterMap() {
         return this.request.getParameterMap();
     }
 
     /**
-     * The default behavior of this method is to return getParameterNames() on
-     * the wrapped request object.
+     * The default behavior of this method is to return getParameterNames() on the wrapped request object.
      */
     @Override
     public Enumeration<String> getParameterNames() {
@@ -190,8 +177,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return
-     * getParameterValues(String name) on the wrapped request object.
+     * The default behavior of this method is to return getParameterValues(String name) on the wrapped request object.
      */
     @Override
     public String[] getParameterValues(String name) {
@@ -199,8 +185,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return getProtocol() on the
-     * wrapped request object.
+     * The default behavior of this method is to return getProtocol() on the wrapped request object.
      */
     @Override
     public String getProtocol() {
@@ -208,8 +193,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return getScheme() on the
-     * wrapped request object.
+     * The default behavior of this method is to return getScheme() on the wrapped request object.
      */
     @Override
     public String getScheme() {
@@ -217,8 +201,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return getServerName() on the
-     * wrapped request object.
+     * The default behavior of this method is to return getServerName() on the wrapped request object.
      */
     @Override
     public String getServerName() {
@@ -226,8 +209,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return getServerPort() on the
-     * wrapped request object.
+     * The default behavior of this method is to return getServerPort() on the wrapped request object.
      */
     @Override
     public int getServerPort() {
@@ -235,8 +217,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return getReader() on the
-     * wrapped request object.
+     * The default behavior of this method is to return getReader() on the wrapped request object.
      */
     @Override
     public BufferedReader getReader() throws IOException {
@@ -244,8 +225,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return getRemoteAddr() on the
-     * wrapped request object.
+     * The default behavior of this method is to return getRemoteAddr() on the wrapped request object.
      */
     @Override
     public String getRemoteAddr() {
@@ -253,8 +233,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return getRemoteHost() on the
-     * wrapped request object.
+     * The default behavior of this method is to return getRemoteHost() on the wrapped request object.
      */
     @Override
     public String getRemoteHost() {
@@ -262,8 +241,8 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return setAttribute(String
-     * name, Object o) on the wrapped request object.
+     * The default behavior of this method is to return setAttribute(String name, Object o) on the wrapped request
+     * object.
      */
     @Override
     public void setAttribute(String name, Object o) {
@@ -271,8 +250,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to call removeAttribute(String
-     * name) on the wrapped request object.
+     * The default behavior of this method is to call removeAttribute(String name) on the wrapped request object.
      */
     @Override
     public void removeAttribute(String name) {
@@ -280,8 +258,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return getLocale() on the
-     * wrapped request object.
+     * The default behavior of this method is to return getLocale() on the wrapped request object.
      */
     @Override
     public Locale getLocale() {
@@ -289,8 +266,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return getLocales() on the
-     * wrapped request object.
+     * The default behavior of this method is to return getLocales() on the wrapped request object.
      */
     @Override
     public Enumeration<Locale> getLocales() {
@@ -298,8 +274,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return isSecure() on the
-     * wrapped request object.
+     * The default behavior of this method is to return isSecure() on the wrapped request object.
      */
     @Override
     public boolean isSecure() {
@@ -307,8 +282,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return
-     * getRequestDispatcher(String path) on the wrapped request object.
+     * The default behavior of this method is to return getRequestDispatcher(String path) on the wrapped request object.
      */
     @Override
     public RequestDispatcher getRequestDispatcher(String path) {
@@ -316,8 +290,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return getRemotePort() on the
-     * wrapped request object.
+     * The default behavior of this method is to return getRemotePort() on the wrapped request object.
      *
      * @since Servlet 2.4
      */
@@ -327,8 +300,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return getLocalName() on the
-     * wrapped request object.
+     * The default behavior of this method is to return getLocalName() on the wrapped request object.
      *
      * @since Servlet 2.4
      */
@@ -338,8 +310,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return getLocalAddr() on the
-     * wrapped request object.
+     * The default behavior of this method is to return getLocalAddr() on the wrapped request object.
      *
      * @since Servlet 2.4
      */
@@ -349,8 +320,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return getLocalPort() on the
-     * wrapped request object.
+     * The default behavior of this method is to return getLocalPort() on the wrapped request object.
      *
      * @since Servlet 2.4
      */
@@ -360,8 +330,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return getServletContext() on
-     * the wrapped request object.
+     * The default behavior of this method is to return getServletContext() on the wrapped request object.
      *
      * @since Servlet 3.0
      */
@@ -371,12 +340,11 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return startAsync() on the
-     * wrapped request object.
+     * The default behavior of this method is to return startAsync() on the wrapped request object.
+     *
+     * @throws IllegalStateException If asynchronous processing is not supported for this request or if the request is
+     *                                   already in asynchronous mode
      *
-     * @throws IllegalStateException If asynchronous processing is not supported
-     *         for this request or if the request is already in asynchronous
-     *         mode
      * @since Servlet 3.0
      */
     @Override
@@ -385,27 +353,24 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return startAsync(Runnable) on
-     * the wrapped request object.
+     * The default behavior of this method is to return startAsync(Runnable) on the wrapped request object.
+     *
+     * @param servletRequest  The ServletRequest with which to initialise the asynchronous context
+     * @param servletResponse The ServletResponse with which to initialise the asynchronous context
+     *
+     * @throws IllegalStateException If asynchronous processing is not supported for this request or if the request is
+     *                                   already in asynchronous mode
      *
-     * @param servletRequest    The ServletRequest with which to initialise the
-     *                          asynchronous context
-     * @param servletResponse   The ServletResponse with which to initialise the
-     *                          asynchronous context
-     * @throws IllegalStateException If asynchronous processing is not supported
-     *         for this request or if the request is already in asynchronous
-     *         mode
      * @since Servlet 3.0
      */
     @Override
-    public AsyncContext startAsync(ServletRequest servletRequest,
-            ServletResponse servletResponse) throws IllegalStateException {
+    public AsyncContext startAsync(ServletRequest servletRequest, ServletResponse servletResponse)
+            throws IllegalStateException {
         return request.startAsync(servletRequest, servletResponse);
     }
 
     /**
-     * The default behavior of this method is to return isAsyncStarted() on the
-     * wrapped request object.
+     * The default behavior of this method is to return isAsyncStarted() on the wrapped request object.
      *
      * @since Servlet 3.0
      */
@@ -415,8 +380,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return isAsyncSupported() on
-     * the wrapped request object.
+     * The default behavior of this method is to return isAsyncSupported() on the wrapped request object.
      *
      * @since Servlet 3.0
      */
@@ -426,8 +390,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to return getAsyncContext() on the
-     * wrapped request object.
+     * The default behavior of this method is to return getAsyncContext() on the wrapped request object.
      *
      * @since Servlet 3.0
      */
@@ -438,10 +401,12 @@ public class ServletRequestWrapper implements ServletRequest {
 
     /**
      * TODO SERVLET3 - Add comments
+     *
      * @param wrapped The request to compare to the wrapped request
-     * @return <code>true</code> if the request wrapped by this wrapper (or
-     *         series of wrappers) is the same as the supplied request,
-     *         otherwise <code>false</code>
+     *
+     * @return <code>true</code> if the request wrapped by this wrapper (or series of wrappers) is the same as the
+     *             supplied request, otherwise <code>false</code>
+     *
      * @since Servlet 3.0
      */
     public boolean isWrapperFor(ServletRequest wrapped) {
@@ -456,11 +421,12 @@ public class ServletRequestWrapper implements ServletRequest {
 
     /**
      * TODO SERVLET3 - Add comments
-     * @param wrappedType The class to compare to the class of the wrapped
-     *                    request
-     * @return <code>true</code> if the request wrapped by this wrapper (or
-     *         series of wrappers) is the same type as the supplied type,
-     *         otherwise <code>false</code>
+     *
+     * @param wrappedType The class to compare to the class of the wrapped request
+     *
+     * @return <code>true</code> if the request wrapped by this wrapper (or series of wrappers) is the same type as the
+     *             supplied type, otherwise <code>false</code>
+     *
      * @since Servlet 3.0
      */
     public boolean isWrapperFor(Class<?> wrappedType) {
@@ -474,8 +440,7 @@ public class ServletRequestWrapper implements ServletRequest {
     }
 
     /**
-     * The default behavior of this method is to call getDispatcherType() on the
-     * wrapped request object.
+     * The default behavior of this method is to call getDispatcherType() on the wrapped request object.
      *
      * @since Servlet 3.0
      */

==================================================
ServletResponseWrapper.java
index fc5af22132..0f55fc3fc8 100644
--- a/java/jakarta/servlet/ServletResponse.java
+++ b/java/jakarta/servlet/ServletResponse.java
@@ -22,159 +22,129 @@ import java.nio.charset.Charset;
 import java.util.Locale;
 
 /**
- * Defines an object to assist a servlet in sending a response to the client.
- * The servlet container creates a <code>ServletResponse</code> object and
- * passes it as an argument to the servlet's <code>service</code> method.
+ * Defines an object to assist a servlet in sending a response to the client. The servlet container creates a
+ * <code>ServletResponse</code> object and passes it as an argument to the servlet's <code>service</code> method.
  * <p>
- * To send binary data in a MIME body response, use the
- * {@link ServletOutputStream} returned by {@link #getOutputStream}. To send
- * character data, use the <code>PrintWriter</code> object returned by
- * {@link #getWriter}. To mix binary and text data, for example, to create a
- * multipart response, use a <code>ServletOutputStream</code> and manage the
- * character sections manually.
+ * To send binary data in a MIME body response, use the {@link ServletOutputStream} returned by
+ * {@link #getOutputStream}. To send character data, use the <code>PrintWriter</code> object returned by
+ * {@link #getWriter}. To mix binary and text data, for example, to create a multipart response, use a
+ * <code>ServletOutputStream</code> and manage the character sections manually.
  * <p>
- * The charset for the MIME body response can be specified explicitly or
- * implicitly. The priority order for specifying the response body is:
+ * The charset for the MIME body response can be specified explicitly or implicitly. The priority order for specifying
+ * the response body is:
  * <ol>
- * <li>explicitly per request using {@link #setCharacterEncoding} and
- *    {@link #setContentType}</li>
+ * <li>explicitly per request using {@link #setCharacterEncoding} and {@link #setContentType}</li>
  * <li>implicitly per request using {@link #setLocale}</li>
  * <li>per web application via the deployment descriptor or
- *     {@link ServletContext#setRequestCharacterEncoding(String)}</li>
+ * {@link ServletContext#setRequestCharacterEncoding(String)}</li>
  * <li>container default via vendor specific configuration</li>
  * <li>ISO-8859-1</li>
  * </ol>
- * The <code>setCharacterEncoding</code>, <code>setContentType</code>, or
- * <code>setLocale</code> method must be called before <code>getWriter</code>
- * and before committing the response for the character encoding to be used.
+ * The <code>setCharacterEncoding</code>, <code>setContentType</code>, or <code>setLocale</code> method must be called
+ * before <code>getWriter</code> and before committing the response for the character encoding to be used.
  * <p>
- * See the Internet RFCs such as <a href="http://www.ietf.org/rfc/rfc2045.txt">
- * RFC 2045</a> for more information on MIME. Protocols such as SMTP and HTTP
- * define profiles of MIME, and those standards are still evolving.
+ * See the Internet RFCs such as <a href="http://www.ietf.org/rfc/rfc2045.txt"> RFC 2045</a> for more information on
+ * MIME. Protocols such as SMTP and HTTP define profiles of MIME, and those standards are still evolving.
  *
  * @see ServletOutputStream
  */
 public interface ServletResponse {
 
     /**
-     * Returns the name of the character encoding (MIME charset) used for the
-     * body sent in this response.
-     * The charset for the MIME body response can be specified explicitly or
-     * implicitly. The priority order for specifying the response body is:
+     * Returns the name of the character encoding (MIME charset) used for the body sent in this response. The charset
+     * for the MIME body response can be specified explicitly or implicitly. The priority order for specifying the
+     * response body is:
      * <ol>
-     * <li>explicitly per request using {@link #setCharacterEncoding} and
-     *    {@link #setContentType}</li>
+     * <li>explicitly per request using {@link #setCharacterEncoding} and {@link #setContentType}</li>
      * <li>implicitly per request using {@link #setLocale}</li>
      * <li>per web application via the deployment descriptor or
-     *     {@link ServletContext#setRequestCharacterEncoding(String)}</li>
+     * {@link ServletContext#setRequestCharacterEncoding(String)}</li>
      * <li>container default via vendor specific configuration</li>
      * <li>ISO-8859-1</li>
      * </ol>
-     * Calls made to {@link #setCharacterEncoding}, {@link #setContentType} or
-     * {@link #setLocale} after <code>getWriter</code> has been called or after
-     * the response has been committed have no effect on the character encoding.
-     * If no character encoding has been specified, <code>ISO-8859-1</code> is
-     * returned.
+     * Calls made to {@link #setCharacterEncoding}, {@link #setContentType} or {@link #setLocale} after
+     * <code>getWriter</code> has been called or after the response has been committed have no effect on the character
+     * encoding. If no character encoding has been specified, <code>ISO-8859-1</code> is returned.
      * <p>
-     * See RFC 2047 (http://www.ietf.org/rfc/rfc2047.txt) for more information
-     * about character encoding and MIME.
+     * See RFC 2047 (http://www.ietf.org/rfc/rfc2047.txt) for more information about character encoding and MIME.
      *
-     * @return a <code>String</code> specifying the name of the character
-     *         encoding, for example, <code>UTF-8</code>
+     * @return a <code>String</code> specifying the name of the character encoding, for example, <code>UTF-8</code>
      */
     String getCharacterEncoding();
 
     /**
-     * Returns the content type used for the MIME body sent in this response.
-     * The content type proper must have been specified using
-     * {@link #setContentType} before the response is committed. If no content
-     * type has been specified, this method returns null. If a content type has
-     * been specified and a character encoding has been explicitly or implicitly
-     * specified as described in {@link #getCharacterEncoding}, the charset
-     * parameter is included in the string returned. If no character encoding
-     * has been specified, the charset parameter is omitted.
-     *
-     * @return a <code>String</code> specifying the content type, for example,
-     *         <code>text/html; charset=UTF-8</code>, or null
+     * Returns the content type used for the MIME body sent in this response. The content type proper must have been
+     * specified using {@link #setContentType} before the response is committed. If no content type has been specified,
+     * this method returns null. If a content type has been specified and a character encoding has been explicitly or
+     * implicitly specified as described in {@link #getCharacterEncoding}, the charset parameter is included in the
+     * string returned. If no character encoding has been specified, the charset parameter is omitted.
+     *
+     * @return a <code>String</code> specifying the content type, for example, <code>text/html; charset=UTF-8</code>, or
+     *             null
+     *
      * @since Servlet 2.4
      */
     String getContentType();
 
     /**
-     * Returns a {@link ServletOutputStream} suitable for writing binary data in
-     * the response. The servlet container does not encode the binary data.
+     * Returns a {@link ServletOutputStream} suitable for writing binary data in the response. The servlet container
+     * does not encode the binary data.
      * <p>
-     * Calling flush() on the ServletOutputStream commits the response. Either
-     * this method or {@link #getWriter} may be called to write the body, not
-     * both.
+     * Calling flush() on the ServletOutputStream commits the response. Either this method or {@link #getWriter} may be
+     * called to write the body, not both.
      *
      * @return a {@link ServletOutputStream} for writing binary data
-     * @exception IllegalStateException
-     *                if the <code>getWriter</code> method has been called on
-     *                this response
-     * @exception IOException
-     *                if an input or output exception occurred
+     *
+     * @exception IllegalStateException if the <code>getWriter</code> method has been called on this response
+     * @exception IOException           if an input or output exception occurred
+     *
      * @see #getWriter
      */
     ServletOutputStream getOutputStream() throws IOException;
 
     /**
-     * Returns a <code>PrintWriter</code> object that can send character text to
-     * the client. The <code>PrintWriter</code> uses the character encoding
-     * returned by {@link #getCharacterEncoding}. If the response's character
-     * encoding has not been specified as described in
-     * <code>getCharacterEncoding</code> (i.e., the method just returns the
-     * default value <code>ISO-8859-1</code>), <code>getWriter</code> updates it
-     * to <code>ISO-8859-1</code>.
+     * Returns a <code>PrintWriter</code> object that can send character text to the client. The
+     * <code>PrintWriter</code> uses the character encoding returned by {@link #getCharacterEncoding}. If the response's
+     * character encoding has not been specified as described in <code>getCharacterEncoding</code> (i.e., the method
+     * just returns the default value <code>ISO-8859-1</code>), <code>getWriter</code> updates it to
+     * <code>ISO-8859-1</code>.
      * <p>
      * Calling flush() on the <code>PrintWriter</code> commits the response.
      * <p>
-     * Either this method or {@link #getOutputStream} may be called to write the
-     * body, not both.
-     *
-     * @return a <code>PrintWriter</code> object that can return character data
-     *         to the client
-     * @exception java.io.UnsupportedEncodingException
-     *                if the character encoding returned by
-     *                <code>getCharacterEncoding</code> cannot be used
-     * @exception IllegalStateException
-     *                if the <code>getOutputStream</code> method has already
-     *                been called for this response object
-     * @exception IOException
-     *                if an input or output exception occurred
+     * Either this method or {@link #getOutputStream} may be called to write the body, not both.
+     *
+     * @return a <code>PrintWriter</code> object that can return character data to the client
+     *
+     * @exception java.io.UnsupportedEncodingException if the character encoding returned by
+     *                                                     <code>getCharacterEncoding</code> cannot be used
+     * @exception IllegalStateException                if the <code>getOutputStream</code> method has already been
+     *                                                     called for this response object
+     * @exception IOException                          if an input or output exception occurred
+     *
      * @see #getOutputStream
      * @see #setCharacterEncoding
      */
     PrintWriter getWriter() throws IOException;
 
     /**
-     * Sets the character encoding (MIME charset) of the response being sent to
-     * the client, for example, to UTF-8. If the character encoding has already
-     * been set by container default, ServletContext default,
-     * {@link #setCharacterEncoding(Charset)}, {@link #setContentType} or
-     * {@link #setLocale}, this method overrides it. Calling
-     * {@link #setContentType} with the <code>String</code> of
-     * <code>text/html</code> and calling this method with the
-     * <code>String</code> of <code>UTF-8</code> is equivalent with calling
-     * <code>setContentType</code> with the <code>String</code> of
-     * <code>text/html; charset=UTF-8</code>.
+     * Sets the character encoding (MIME charset) of the response being sent to the client, for example, to UTF-8. If
+     * the character encoding has already been set by container default, ServletContext default,
+     * {@link #setCharacterEncoding(Charset)}, {@link #setContentType} or {@link #setLocale}, this method overrides it.
+     * Calling {@link #setContentType} with the <code>String</code> of <code>text/html</code> and calling this method
+     * with the <code>String</code> of <code>UTF-8</code> is equivalent with calling <code>setContentType</code> with
+     * the <code>String</code> of <code>text/html; charset=UTF-8</code>.
      * <p>
-     * This method can be called repeatedly to change the character encoding.
-     * This method has no effect if it is called after <code>getWriter</code>
-     * has been called or after the response has been committed.
+     * This method can be called repeatedly to change the character encoding. This method has no effect if it is called
+     * after <code>getWriter</code> has been called or after the response has been committed.
      * <p>
-     * Containers must communicate the character encoding used for the servlet
-     * response's writer to the client if the protocol provides a way for doing
-     * so. In the case of HTTP, the character encoding is communicated as part
-     * of the <code>Content-Type</code> header for text media types. Note that
-     * the character encoding cannot be communicated via HTTP headers if the
-     * servlet does not specify a content type; however, it is still used to
-     * encode text written via the servlet response's writer.
-     *
-     * @param charset
-     *            a String specifying only the character set defined by IANA
-     *            Character Sets
-     *            (http://www.iana.org/assignments/character-sets)
+     * Containers must communicate the character encoding used for the servlet response's writer to the client if the
+     * protocol provides a way for doing so. In the case of HTTP, the character encoding is communicated as part of the
+     * <code>Content-Type</code> header for text media types. Note that the character encoding cannot be communicated
+     * via HTTP headers if the servlet does not specify a content type; however, it is still used to encode text written
+     * via the servlet response's writer.
+     *
+     * @param charset a String specifying only the character set defined by IANA Character Sets
+     *                    (http://www.iana.org/assignments/character-sets)
      *
      * @see #setContentType #setLocale
      * @see #setCharacterEncoding(Charset)
@@ -184,28 +154,21 @@ public interface ServletResponse {
     void setCharacterEncoding(String charset);
 
     /**
-     * Sets the character encoding (MIME charset) of the response being sent to
-     * the client, for example, to UTF-8. If the character encoding has already
-     * been set by container default, ServletContext default,
-     * {@link #setCharacterEncoding(String)}, {@link #setContentType} or
-     * {@link #setLocale}, this method overrides it. Calling
-     * {@link #setContentType} with the <code>String</code> of
-     * <code>text/html</code> and calling this method with the
-     * <code>StandardCharsets.UTF-8</code> is equivalent with calling
-     * <code>setContentType</code> with the <code>String</code> of
-     * <code>text/html; charset=UTF-8</code>.
+     * Sets the character encoding (MIME charset) of the response being sent to the client, for example, to UTF-8. If
+     * the character encoding has already been set by container default, ServletContext default,
+     * {@link #setCharacterEncoding(String)}, {@link #setContentType} or {@link #setLocale}, this method overrides it.
+     * Calling {@link #setContentType} with the <code>String</code> of <code>text/html</code> and calling this method
+     * with the <code>StandardCharsets.UTF-8</code> is equivalent with calling <code>setContentType</code> with the
+     * <code>String</code> of <code>text/html; charset=UTF-8</code>.
      * <p>
-     * This method can be called repeatedly to change the character encoding.
-     * This method has no effect if it is called after <code>getWriter</code>
-     * has been called or after the response has been committed.
+     * This method can be called repeatedly to change the character encoding. This method has no effect if it is called
+     * after <code>getWriter</code> has been called or after the response has been committed.
      * <p>
-     * Containers must communicate the character encoding used for the servlet
-     * response's writer to the client if the protocol provides a way for doing
-     * so. In the case of HTTP, the character encoding is communicated as part
-     * of the <code>Content-Type</code> header for text media types. Note that
-     * the character encoding cannot be communicated via HTTP headers if the
-     * servlet does not specify a content type; however, it is still used to
-     * encode text written via the servlet response's writer.
+     * Containers must communicate the character encoding used for the servlet response's writer to the client if the
+     * protocol provides a way for doing so. In the case of HTTP, the character encoding is communicated as part of the
+     * <code>Content-Type</code> header for text media types. Note that the character encoding cannot be communicated
+     * via HTTP headers if the servlet does not specify a content type; however, it is still used to encode text written
+     * via the servlet response's writer.
      *
      * @param encoding The encoding to use or {@code null}
      *
@@ -219,48 +182,41 @@ public interface ServletResponse {
     }
 
     /**
-     * Sets the length of the content body in the response In HTTP servlets,
-     * this method sets the HTTP Content-Length header.
+     * Sets the length of the content body in the response In HTTP servlets, this method sets the HTTP Content-Length
+     * header.
      *
-     * @param len
-     *            an integer specifying the length of the content being returned
-     *            to the client; sets the Content-Length header
+     * @param len an integer specifying the length of the content being returned to the client; sets the Content-Length
+     *                header
      */
     void setContentLength(int len);
 
     /**
-     * Sets the length of the content body in the response In HTTP servlets,
-     * this method sets the HTTP Content-Length header.
+     * Sets the length of the content body in the response In HTTP servlets, this method sets the HTTP Content-Length
+     * header.
      *
-     * @param length
-     *            an integer specifying the length of the content being returned
-     *            to the client; sets the Content-Length header
+     * @param length an integer specifying the length of the content being returned to the client; sets the
+     *                   Content-Length header
      *
      * @since Servlet 3.1
      */
     void setContentLengthLong(long length);
 
     /**
-     * Sets the content type of the response being sent to the client, if the
-     * response has not been committed yet. The given content type may include a
-     * character encoding specification, for example,
-     * <code>text/html;charset=UTF-8</code>. The response's character encoding
-     * is only set from the given content type if this method is called before
-     * <code>getWriter</code> is called.
+     * Sets the content type of the response being sent to the client, if the response has not been committed yet. The
+     * given content type may include a character encoding specification, for example,
+     * <code>text/html;charset=UTF-8</code>. The response's character encoding is only set from the given content type
+     * if this method is called before <code>getWriter</code> is called.
      * <p>
-     * This method may be called repeatedly to change content type and character
-     * encoding. This method has no effect if called after the response has been
-     * committed. It does not set the response's character encoding if it is
-     * called after <code>getWriter</code> has been called or after the response
-     * has been committed.
+     * This method may be called repeatedly to change content type and character encoding. This method has no effect if
+     * called after the response has been committed. It does not set the response's character encoding if it is called
+     * after <code>getWriter</code> has been called or after the response has been committed.
      * <p>
-     * Containers must communicate the content type and the character encoding
-     * used for the servlet response's writer to the client if the protocol
-     * provides a way for doing so. In the case of HTTP, the
-     * <code>Content-Type</code> header is used.
+     * Containers must communicate the content type and the character encoding used for the servlet response's writer to
+     * the client if the protocol provides a way for doing so. In the case of HTTP, the <code>Content-Type</code> header
+     * is used.
+     *
+     * @param type a <code>String</code> specifying the MIME type of the content
      *
-     * @param type
-     *            a <code>String</code> specifying the MIME type of the content
      * @see #setLocale
      * @see #setCharacterEncoding
      * @see #getOutputStream
@@ -269,23 +225,20 @@ public interface ServletResponse {
     void setContentType(String type);
 
     /**
-     * Sets the preferred buffer size for the body of the response. The servlet
-     * container will use a buffer at least as large as the size requested. The
-     * actual buffer size used can be found using <code>getBufferSize</code>.
+     * Sets the preferred buffer size for the body of the response. The servlet container will use a buffer at least as
+     * large as the size requested. The actual buffer size used can be found using <code>getBufferSize</code>.
      * <p>
-     * A larger buffer allows more content to be written before anything is
-     * actually sent, thus providing the servlet with more time to set
-     * appropriate status codes and headers. A smaller buffer decreases server
-     * memory load and allows the client to start receiving data more quickly.
+     * A larger buffer allows more content to be written before anything is actually sent, thus providing the servlet
+     * with more time to set appropriate status codes and headers. A smaller buffer decreases server memory load and
+     * allows the client to start receiving data more quickly.
      * <p>
-     * This method must be called before any response body content is written;
-     * if content has been written or the response object has been committed,
-     * this method throws an <code>IllegalStateException</code>.
-     *
-     * @param size
-     *            the preferred buffer size
-     * @exception IllegalStateException
-     *                if this method is called after content has been written
+     * This method must be called before any response body content is written; if content has been written or the
+     * response object has been committed, this method throws an <code>IllegalStateException</code>.
+     *
+     * @param size the preferred buffer size
+     *
+     * @exception IllegalStateException if this method is called after content has been written
+     *
      * @see #getBufferSize
      * @see #flushBuffer
      * @see #isCommitted
@@ -294,10 +247,10 @@ public interface ServletResponse {
     void setBufferSize(int size);
 
     /**
-     * Returns the actual buffer size used for the response. If no buffering is
-     * used, this method returns 0.
+     * Returns the actual buffer size used for the response. If no buffering is used, this method returns 0.
      *
      * @return the actual buffer size used
+     *
      * @see #setBufferSize
      * @see #flushBuffer
      * @see #isCommitted
@@ -306,9 +259,8 @@ public interface ServletResponse {
     int getBufferSize();
 
     /**
-     * Forces any content in the buffer to be written to the client. A call to
-     * this method automatically commits the response, meaning the status code
-     * and headers will be written.
+     * Forces any content in the buffer to be written to the client. A call to this method automatically commits the
+     * response, meaning the status code and headers will be written.
      *
      * @throws IOException if an I/O occurs during the flushing of the response
      *
@@ -320,9 +272,8 @@ public interface ServletResponse {
     void flushBuffer() throws IOException;
 
     /**
-     * Clears the content of the underlying buffer in the response without
-     * clearing headers or status code. If the response has been committed, this
-     * method throws an <code>IllegalStateException</code>.
+     * Clears the content of the underlying buffer in the response without clearing headers or status code. If the
+     * response has been committed, this method throws an <code>IllegalStateException</code>.
      *
      * @see #setBufferSize
      * @see #getBufferSize
@@ -334,10 +285,11 @@ public interface ServletResponse {
     void resetBuffer();
 
     /**
-     * Returns a boolean indicating if the response has been committed. A
-     * committed response has already had its status code and headers written.
+     * Returns a boolean indicating if the response has been committed. A committed response has already had its status
+     * code and headers written.
      *
      * @return a boolean indicating if the response has been committed
+     *
      * @see #setBufferSize
      * @see #getBufferSize
      * @see #flushBuffer
@@ -346,12 +298,11 @@ public interface ServletResponse {
     boolean isCommitted();
 
     /**
-     * Clears any data that exists in the buffer as well as the status code and
-     * headers. If the response has been committed, this method throws an
-     * <code>IllegalStateException</code>.
+     * Clears any data that exists in the buffer as well as the status code and headers. If the response has been
+     * committed, this method throws an <code>IllegalStateException</code>.
+     *
+     * @exception IllegalStateException if the response has already been committed
      *
-     * @exception IllegalStateException
-     *                if the response has already been committed
      * @see #setBufferSize
      * @see #getBufferSize
      * @see #flushBuffer
@@ -360,33 +311,24 @@ public interface ServletResponse {
     void reset();
 
     /**
-     * Sets the locale of the response, if the response has not been committed
-     * yet. It also sets the response's character encoding appropriately for the
-     * locale, if the character encoding has not been explicitly set using
-     * {@link #setContentType}, {@link #setCharacterEncoding(String)} or
-     * {@link #setCharacterEncoding(Charset)}, <code>getWriter</code> hasn't
-     * been called yet, and the response hasn't been committed yet. If the
-     * deployment descriptor contains a
-     * <code>locale-encoding-mapping-list</code> element, and that element
-     * provides a mapping for the given locale, that mapping is used. Otherwise,
-     * the mapping from locale to character encoding is container dependent.
+     * Sets the locale of the response, if the response has not been committed yet. It also sets the response's
+     * character encoding appropriately for the locale, if the character encoding has not been explicitly set using
+     * {@link #setContentType}, {@link #setCharacterEncoding(String)} or {@link #setCharacterEncoding(Charset)},
+     * <code>getWriter</code> hasn't been called yet, and the response hasn't been committed yet. If the deployment
+     * descriptor contains a <code>locale-encoding-mapping-list</code> element, and that element provides a mapping for
+     * the given locale, that mapping is used. Otherwise, the mapping from locale to character encoding is container
+     * dependent.
      * <p>
-     * This method may be called repeatedly to change locale and character
-     * encoding. The method has no effect if called after the response has been
-     * committed. It does not set the response's character encoding if it is
-     * called after {@link #setContentType} has been called with a charset
-     * specification, after {@link #setCharacterEncoding} has been called, after
-     * <code>getWriter</code> has been called, or after the response has been
-     * committed.
+     * This method may be called repeatedly to change locale and character encoding. The method has no effect if called
+     * after the response has been committed. It does not set the response's character encoding if it is called after
+     * {@link #setContentType} has been called with a charset specification, after {@link #setCharacterEncoding} has
+     * been called, after <code>getWriter</code> has been called, or after the response has been committed.
      * <p>
-     * Containers must communicate the locale and the character encoding used
-     * for the servlet response's writer to the client if the protocol provides
-     * a way for doing so. In the case of HTTP, the locale is communicated via
-     * the <code>Content-Language</code> header, the character encoding as part
-     * of the <code>Content-Type</code> header for text media types. Note that
-     * the character encoding cannot be communicated via HTTP headers if the
-     * servlet does not specify a content type; however, it is still used to
-     * encode text written via the servlet response's writer.
+     * Containers must communicate the locale and the character encoding used for the servlet response's writer to the
+     * client if the protocol provides a way for doing so. In the case of HTTP, the locale is communicated via the
+     * <code>Content-Language</code> header, the character encoding as part of the <code>Content-Type</code> header for
+     * text media types. Note that the character encoding cannot be communicated via HTTP headers if the servlet does
+     * not specify a content type; however, it is still used to encode text written via the servlet response's writer.
      *
      * @param loc the locale of the response
      *
@@ -398,13 +340,11 @@ public interface ServletResponse {
     void setLocale(Locale loc);
 
     /**
-     * Returns the locale specified for this response using the
-     * {@link #setLocale} method. Calls made to <code>setLocale</code> after the
-     * response is committed have no effect.
+     * Returns the locale specified for this response using the {@link #setLocale} method. Calls made to
+     * <code>setLocale</code> after the response is committed have no effect.
      *
-     * @return The locale specified for this response using the
-     *          {@link #setLocale} method. If no locale has been specified, the
-     *          container's default locale is returned.
+     * @return The locale specified for this response using the {@link #setLocale} method. If no locale has been
+     *             specified, the container's default locale is returned.
      *
      * @see #setLocale
      */

==================================================
ServletSecurityElement.java
index 725f115156..94c4e5ac01 100644
--- a/java/jakarta/servlet/ServletResponseWrapper.java
+++ b/java/jakarta/servlet/ServletResponseWrapper.java
@@ -23,12 +23,12 @@ import java.util.Locale;
 import java.util.ResourceBundle;
 
 /**
- * Provides a convenient implementation of the ServletResponse interface that
- * can be subclassed by developers wishing to adapt the response from a Servlet.
- * This class implements the Wrapper or Decorator pattern. Methods default to
- * calling through to the wrapped response object.
+ * Provides a convenient implementation of the ServletResponse interface that can be subclassed by developers wishing to
+ * adapt the response from a Servlet. This class implements the Wrapper or Decorator pattern. Methods default to calling
+ * through to the wrapped response object.
  *
  * @since Servlet 2.3
+ *
  * @see jakarta.servlet.ServletResponse
  */
 public class ServletResponseWrapper implements ServletResponse {
@@ -42,8 +42,7 @@ public class ServletResponseWrapper implements ServletResponse {
      *
      * @param response The response to wrap
      *
-     * @throws java.lang.IllegalArgumentException
-     *             if the response is null.
+     * @throws java.lang.IllegalArgumentException if the response is null.
      */
     public ServletResponseWrapper(ServletResponse response) {
         if (response == null) {
@@ -66,8 +65,7 @@ public class ServletResponseWrapper implements ServletResponse {
      *
      * @param response The new response to wrap
      *
-     * @throws java.lang.IllegalArgumentException
-     *             if the response is null.
+     * @throws java.lang.IllegalArgumentException if the response is null.
      */
     public void setResponse(ServletResponse response) {
         if (response == null) {
@@ -77,8 +75,8 @@ public class ServletResponseWrapper implements ServletResponse {
     }
 
     /**
-     * The default behavior of this method is to call
-     * setCharacterEncoding(String charset) on the wrapped response object.
+     * The default behavior of this method is to call setCharacterEncoding(String charset) on the wrapped response
+     * object.
      *
      * @since Servlet 2.4
      */
@@ -88,8 +86,8 @@ public class ServletResponseWrapper implements ServletResponse {
     }
 
     /**
-     * The default behavior of this method is to call
-     * {@code setCharacterEncoding(Charset)} on the wrapped response object.
+     * The default behavior of this method is to call {@code setCharacterEncoding(Charset)} on the wrapped response
+     * object.
      *
      * @since Servlet 6.1
      */
@@ -99,8 +97,7 @@ public class ServletResponseWrapper implements ServletResponse {
     }
 
     /**
-     * The default behavior of this method is to return getCharacterEncoding()
-     * on the wrapped response object.
+     * The default behavior of this method is to return getCharacterEncoding() on the wrapped response object.
      */
     @Override
     public String getCharacterEncoding() {
@@ -108,8 +105,7 @@ public class ServletResponseWrapper implements ServletResponse {
     }
 
     /**
-     * The default behavior of this method is to return getOutputStream() on the
-     * wrapped response object.
+     * The default behavior of this method is to return getOutputStream() on the wrapped response object.
      */
     @Override
     public ServletOutputStream getOutputStream() throws IOException {
@@ -117,8 +113,7 @@ public class ServletResponseWrapper implements ServletResponse {
     }
 
     /**
-     * The default behavior of this method is to return getWriter() on the
-     * wrapped response object.
+     * The default behavior of this method is to return getWriter() on the wrapped response object.
      */
     @Override
     public PrintWriter getWriter() throws IOException {
@@ -126,8 +121,7 @@ public class ServletResponseWrapper implements ServletResponse {
     }
 
     /**
-     * The default behavior of this method is to call setContentLength(int len)
-     * on the wrapped response object.
+     * The default behavior of this method is to call setContentLength(int len) on the wrapped response object.
      */
     @Override
     public void setContentLength(int len) {
@@ -135,8 +129,7 @@ public class ServletResponseWrapper implements ServletResponse {
     }
 
     /**
-     * The default behavior of this method is to call setContentLengthLong(long len)
-     * on the wrapped response object.
+     * The default behavior of this method is to call setContentLengthLong(long len) on the wrapped response object.
      *
      * @since Servlet 3.1
      */
@@ -146,8 +139,7 @@ public class ServletResponseWrapper implements ServletResponse {
     }
 
     /**
-     * The default behavior of this method is to call setContentType(String
-     * type) on the wrapped response object.
+     * The default behavior of this method is to call setContentType(String type) on the wrapped response object.
      */
     @Override
     public void setContentType(String type) {
@@ -155,8 +147,7 @@ public class ServletResponseWrapper implements ServletResponse {
     }
 
     /**
-     * The default behavior of this method is to return getContentType() on the
-     * wrapped response object.
+     * The default behavior of this method is to return getContentType() on the wrapped response object.
      *
      * @since Servlet 2.4
      */
@@ -166,8 +157,7 @@ public class ServletResponseWrapper implements ServletResponse {
     }
 
     /**
-     * The default behavior of this method is to call setBufferSize(int size) on
-     * the wrapped response object.
+     * The default behavior of this method is to call setBufferSize(int size) on the wrapped response object.
      */
     @Override
     public void setBufferSize(int size) {
@@ -175,8 +165,7 @@ public class ServletResponseWrapper implements ServletResponse {
     }
 
     /**
-     * The default behavior of this method is to return getBufferSize() on the
-     * wrapped response object.
+     * The default behavior of this method is to return getBufferSize() on the wrapped response object.
      */
     @Override
     public int getBufferSize() {
@@ -184,8 +173,7 @@ public class ServletResponseWrapper implements ServletResponse {
     }
 
     /**
-     * The default behavior of this method is to call flushBuffer() on the
-     * wrapped response object.
+     * The default behavior of this method is to call flushBuffer() on the wrapped response object.
      */
     @Override
     public void flushBuffer() throws IOException {
@@ -193,8 +181,7 @@ public class ServletResponseWrapper implements ServletResponse {
     }
 
     /**
-     * The default behavior of this method is to return isCommitted() on the
-     * wrapped response object.
+     * The default behavior of this method is to return isCommitted() on the wrapped response object.
      */
     @Override
     public boolean isCommitted() {
@@ -202,8 +189,7 @@ public class ServletResponseWrapper implements ServletResponse {
     }
 
     /**
-     * The default behavior of this method is to call reset() on the wrapped
-     * response object.
+     * The default behavior of this method is to call reset() on the wrapped response object.
      */
     @Override
     public void reset() {
@@ -211,8 +197,7 @@ public class ServletResponseWrapper implements ServletResponse {
     }
 
     /**
-     * The default behavior of this method is to call resetBuffer() on the
-     * wrapped response object.
+     * The default behavior of this method is to call resetBuffer() on the wrapped response object.
      */
     @Override
     public void resetBuffer() {
@@ -220,8 +205,7 @@ public class ServletResponseWrapper implements ServletResponse {
     }
 
     /**
-     * The default behavior of this method is to call setLocale(Locale loc) on
-     * the wrapped response object.
+     * The default behavior of this method is to call setLocale(Locale loc) on the wrapped response object.
      */
     @Override
     public void setLocale(Locale loc) {
@@ -229,8 +213,7 @@ public class ServletResponseWrapper implements ServletResponse {
     }
 
     /**
-     * The default behavior of this method is to return getLocale() on the
-     * wrapped response object.
+     * The default behavior of this method is to return getLocale() on the wrapped response object.
      */
     @Override
     public Locale getLocale() {
@@ -239,10 +222,12 @@ public class ServletResponseWrapper implements ServletResponse {
 
     /**
      * TODO SERVLET3 - Add comments
+     *
      * @param wrapped The response to compare to the wrapped response
-     * @return <code>true</code> if the response wrapped by this wrapper (or
-     *         series of wrappers) is the same as the supplied response,
-     *         otherwise <code>false</code>
+     *
+     * @return <code>true</code> if the response wrapped by this wrapper (or series of wrappers) is the same as the
+     *             supplied response, otherwise <code>false</code>
+     *
      * @since Servlet 3.0
      */
     public boolean isWrapperFor(ServletResponse wrapped) {
@@ -257,11 +242,12 @@ public class ServletResponseWrapper implements ServletResponse {
 
     /**
      * TODO SERVLET3 - Add comments
-     * @param wrappedType The class to compare to the class of the wrapped
-     *                    response
-     * @return <code>true</code> if the response wrapped by this wrapper (or
-     *         series of wrappers) is the same type as the supplied type,
-     *         otherwise <code>false</code>
+     *
+     * @param wrappedType The class to compare to the class of the wrapped response
+     *
+     * @return <code>true</code> if the response wrapped by this wrapper (or series of wrappers) is the same type as the
+     *             supplied type, otherwise <code>false</code>
+     *
      * @since Servlet 3.0
      */
     public boolean isWrapperFor(Class<?> wrappedType) {

==================================================
SessionCookieConfig.java
index 7cee1e86a8..8c97fe116f 100644
--- a/java/jakarta/servlet/ServletSecurityElement.java
+++ b/java/jakarta/servlet/ServletSecurityElement.java
@@ -27,9 +27,8 @@ import jakarta.servlet.annotation.HttpMethodConstraint;
 import jakarta.servlet.annotation.ServletSecurity;
 
 /**
- * The programmatic equivalent of
- * {@link jakarta.servlet.annotation.ServletSecurity} used to configre
- * security constraints for a Servlet.
+ * The programmatic equivalent of {@link jakarta.servlet.annotation.ServletSecurity} used to configre security
+ * constraints for a Servlet.
  *
  * @since Servlet 3.0
  */
@@ -46,63 +45,59 @@ public class ServletSecurityElement extends HttpConstraintElement {
 
     /**
      * Use specified HttpConstraintElement.
+     *
      * @param httpConstraintElement The constraint
      */
     public ServletSecurityElement(HttpConstraintElement httpConstraintElement) {
-        this (httpConstraintElement, null);
+        this(httpConstraintElement, null);
     }
 
     /**
-     * Use specific constraints for specified methods and default
-     * HttpConstraintElement for all other methods.
+     * Use specific constraints for specified methods and default HttpConstraintElement for all other methods.
+     *
      * @param httpMethodConstraints Method constraints
-     * @throws IllegalArgumentException if a method name is specified more than
-     * once
+     *
+     * @throws IllegalArgumentException if a method name is specified more than once
      */
-    public ServletSecurityElement(
-            Collection<HttpMethodConstraintElement> httpMethodConstraints) {
+    public ServletSecurityElement(Collection<HttpMethodConstraintElement> httpMethodConstraints) {
         super();
         addHttpMethodConstraints(httpMethodConstraints);
     }
 
 
     /**
-     * Use specified HttpConstraintElement as default and specific constraints
-     * for specified methods.
+     * Use specified HttpConstraintElement as default and specific constraints for specified methods.
+     *
      * @param httpConstraintElement Default constraint
      * @param httpMethodConstraints Method constraints
-     * @throws IllegalArgumentException if a method name is specified more than
-     * once
+     *
+     * @throws IllegalArgumentException if a method name is specified more than once
      */
     public ServletSecurityElement(HttpConstraintElement httpConstraintElement,
             Collection<HttpMethodConstraintElement> httpMethodConstraints) {
-        super(httpConstraintElement.getEmptyRoleSemantic(),
-                httpConstraintElement.getTransportGuarantee(),
+        super(httpConstraintElement.getEmptyRoleSemantic(), httpConstraintElement.getTransportGuarantee(),
                 httpConstraintElement.getRolesAllowed());
         addHttpMethodConstraints(httpMethodConstraints);
     }
 
     /**
      * Create from an annotation.
+     *
      * @param annotation Annotation to use as the basis for the new instance
-     * @throws IllegalArgumentException if a method name is specified more than
-     * once
+     *
+     * @throws IllegalArgumentException if a method name is specified more than once
      */
     public ServletSecurityElement(ServletSecurity annotation) {
-        this(new HttpConstraintElement(annotation.value().value(),
-                annotation.value().transportGuarantee(),
+        this(new HttpConstraintElement(annotation.value().value(), annotation.value().transportGuarantee(),
                 annotation.value().rolesAllowed()));
 
         List<HttpMethodConstraintElement> l = new ArrayList<>();
         HttpMethodConstraint[] constraints = annotation.httpMethodConstraints();
         if (constraints != null) {
             for (HttpMethodConstraint constraint : constraints) {
-                HttpMethodConstraintElement e =
-                        new HttpMethodConstraintElement(constraint.value(),
-                                new HttpConstraintElement(
-                                        constraint.emptyRoleSemantic(),
-                                        constraint.transportGuarantee(),
-                                        constraint.rolesAllowed()));
+                HttpMethodConstraintElement e = new HttpMethodConstraintElement(constraint.value(),
+                        new HttpConstraintElement(constraint.emptyRoleSemantic(), constraint.transportGuarantee(),
+                                constraint.rolesAllowed()));
                 l.add(e);
             }
         }
@@ -110,8 +105,7 @@ public class ServletSecurityElement extends HttpConstraintElement {
     }
 
     /**
-     * Obtain the collection of security constraints configured for specific
-     * methods.
+     * Obtain the collection of security constraints configured for specific methods.
      *
      * @return The security constraints for specific methods
      */
@@ -121,8 +115,7 @@ public class ServletSecurityElement extends HttpConstraintElement {
     }
 
     /**
-     * Obtain the collection HTTP methods for which security constraints have
-     * been defined.
+     * Obtain the collection HTTP methods for which security constraints have been defined.
      *
      * @return The names of the HTTP methods
      */
@@ -131,16 +124,14 @@ public class ServletSecurityElement extends HttpConstraintElement {
         return result;
     }
 
-    private void addHttpMethodConstraints(
-            Collection<HttpMethodConstraintElement> httpMethodConstraints) {
+    private void addHttpMethodConstraints(Collection<HttpMethodConstraintElement> httpMethodConstraints) {
         if (httpMethodConstraints == null) {
             return;
         }
         for (HttpMethodConstraintElement constraint : httpMethodConstraints) {
             String method = constraint.getMethodName();
             if (methodConstraints.containsKey(method)) {
-                throw new IllegalArgumentException(
-                        "Duplicate method name: " + method);
+                throw new IllegalArgumentException("Duplicate method name: " + method);
             }
             methodConstraints.put(method, constraint);
         }

==================================================
UnavailableException.java
index 10b3f2a169..c9779052a9 100644
--- a/java/jakarta/servlet/SessionCookieConfig.java
+++ b/java/jakarta/servlet/SessionCookieConfig.java
@@ -19,8 +19,8 @@ package jakarta.servlet;
 import java.util.Map;
 
 /**
- * Configures the session cookies used by the web application associated with
- * the ServletContext from which this SessionCookieConfig was obtained.
+ * Configures the session cookies used by the web application associated with the ServletContext from which this
+ * SessionCookieConfig was obtained.
  *
  * @since Servlet 3.0
  */
@@ -31,8 +31,7 @@ public interface SessionCookieConfig {
      *
      * @param name The name of the session cookie
      *
-     * @throws IllegalStateException if the associated ServletContext has
-     *         already been initialised
+     * @throws IllegalStateException if the associated ServletContext has already been initialised
      */
     void setName(String name);
 
@@ -48,8 +47,7 @@ public interface SessionCookieConfig {
      *
      * @param domain The session cookie domain
      *
-     * @throws IllegalStateException if the associated ServletContext has
-     *         already been initialised
+     * @throws IllegalStateException if the associated ServletContext has already been initialised
      */
     void setDomain(String domain);
 
@@ -65,14 +63,12 @@ public interface SessionCookieConfig {
      *
      * @param path The session cookie path
      *
-     * @throws IllegalStateException if the associated ServletContext has
-     *         already been initialised
+     * @throws IllegalStateException if the associated ServletContext has already been initialised
      */
     void setPath(String path);
 
     /**
-     * Obtain the path to use for session cookies. This is normally the context
-     * path.
+     * Obtain the path to use for session cookies. This is normally the context path.
      *
      * @return The path to use for session cookies.
      */
@@ -83,8 +79,7 @@ public interface SessionCookieConfig {
      *
      * @param comment Ignore
      *
-     * @throws IllegalStateException if the associated ServletContext has
-     *         already been initialised
+     * @throws IllegalStateException if the associated ServletContext has already been initialised
      *
      * @deprecated This is no longer required with RFC 6265
      */
@@ -106,8 +101,7 @@ public interface SessionCookieConfig {
      *
      * @param httpOnly The httpOnly setting to use for session cookies
      *
-     * @throws IllegalStateException if the associated ServletContext has
-     *         already been initialised
+     * @throws IllegalStateException if the associated ServletContext has already been initialised
      */
     void setHttpOnly(boolean httpOnly);
 
@@ -123,8 +117,7 @@ public interface SessionCookieConfig {
      *
      * @param secure The secure setting to use for session cookies
      *
-     * @throws IllegalStateException if the associated ServletContext has
-     *         already been initialised
+     * @throws IllegalStateException if the associated ServletContext has already been initialised
      */
     void setSecure(boolean secure);
 
@@ -139,8 +132,8 @@ public interface SessionCookieConfig {
      * Sets the maximum age.
      *
      * @param MaxAge the maximum age to set
-     * @throws IllegalStateException if the associated ServletContext has
-     *         already been initialised
+     *
+     * @throws IllegalStateException if the associated ServletContext has already been initialised
      */
     void setMaxAge(int MaxAge);
 
@@ -152,32 +145,27 @@ public interface SessionCookieConfig {
     int getMaxAge();
 
     /**
-     * Sets the value for the given session cookie attribute. When a value is
-     * set via this method, the value returned by the attribute specific getter
-     * (if any) must be consistent with the value set via this method.
+     * Sets the value for the given session cookie attribute. When a value is set via this method, the value returned by
+     * the attribute specific getter (if any) must be consistent with the value set via this method.
      *
      * @param name  Name of attribute to set
      * @param value Value of attribute
      *
-     * @throws IllegalStateException if the associated ServletContext has
-     *         already been initialised
-     *
-     * @throws IllegalArgumentException If the attribute name is null or
-     *         contains any characters not permitted for use in Cookie names.
-     *
-     * @throws NumberFormatException If the attribute is known to be numerical
-     *         but the provided value cannot be parsed to a number.
+     * @throws IllegalStateException    if the associated ServletContext has already been initialised
+     * @throws IllegalArgumentException If the attribute name is null or contains any characters not permitted for use
+     *                                      in Cookie names.
+     * @throws NumberFormatException    If the attribute is known to be numerical but the provided value cannot be
+     *                                      parsed to a number.
      *
      * @since Servlet 6.0
      */
     void setAttribute(String name, String value);
 
     /**
-     * Obtain the value for a sesison cookie given attribute. Values returned
-     * from this method must be consistent with the values set and returned by
-     * the attribute specific getters and setters in this class.
+     * Obtain the value for a sesison cookie given attribute. Values returned from this method must be consistent with
+     * the values set and returned by the attribute specific getters and setters in this class.
      *
-     * @param name  Name of attribute to return
+     * @param name Name of attribute to return
      *
      * @return Value of specified attribute
      *
@@ -186,8 +174,7 @@ public interface SessionCookieConfig {
     String getAttribute(String name);
 
     /**
-     * Obtain the Map of attributes and values (excluding version) for this
-     * session cookie.
+     * Obtain the Map of attributes and values (excluding version) for this session cookie.
      *
      * @return A read-only Map of attributes to values, excluding version.
      *

==================================================
WriteListener.java
index 2f9073bd0e..3e3a433346 100644
--- a/java/jakarta/servlet/UnavailableException.java
+++ b/java/jakarta/servlet/UnavailableException.java
@@ -17,26 +17,20 @@
 package jakarta.servlet;
 
 /**
- * Defines an exception that a servlet or filter throws to indicate that it is
- * permanently or temporarily unavailable.
+ * Defines an exception that a servlet or filter throws to indicate that it is permanently or temporarily unavailable.
  * <p>
- * When a servlet or filter is permanently unavailable, something is wrong with
- * it, and it cannot handle requests until some action is taken. For example, a
- * servlet might be configured incorrectly, or a filter's state may be
- * corrupted. The component should log both the error and the corrective action
- * that is needed.
+ * When a servlet or filter is permanently unavailable, something is wrong with it, and it cannot handle requests until
+ * some action is taken. For example, a servlet might be configured incorrectly, or a filter's state may be corrupted.
+ * The component should log both the error and the corrective action that is needed.
  * <p>
- * A servlet or filter is temporarily unavailable if it cannot handle requests
- * momentarily due to some system-wide problem. For example, a third-tier server
- * might not be accessible, or there may be insufficient memory or disk storage
- * to handle requests. A system administrator may need to take corrective
- * action.
+ * A servlet or filter is temporarily unavailable if it cannot handle requests momentarily due to some system-wide
+ * problem. For example, a third-tier server might not be accessible, or there may be insufficient memory or disk
+ * storage to handle requests. A system administrator may need to take corrective action.
  * <p>
- * Servlet containers can safely treat both types of unavailable exceptions in
- * the same way. However, treating temporary unavailability effectively makes
- * the servlet container more robust. Specifically, the servlet container might
- * block requests to the servlet or filter for a period of time suggested by the
- * exception, rather than rejecting them until the servlet container restarts.
+ * Servlet containers can safely treat both types of unavailable exceptions in the same way. However, treating temporary
+ * unavailability effectively makes the servlet container more robust. Specifically, the servlet container might block
+ * requests to the servlet or filter for a period of time suggested by the exception, rather than rejecting them until
+ * the servlet container restarts.
  */
 public class UnavailableException extends ServletException {
 
@@ -53,11 +47,9 @@ public class UnavailableException extends ServletException {
     private final int seconds;
 
     /**
-     * Constructs a new exception with a descriptive message indicating that the
-     * servlet is permanently unavailable.
+     * Constructs a new exception with a descriptive message indicating that the servlet is permanently unavailable.
      *
-     * @param msg
-     *            a <code>String</code> specifying the descriptive message
+     * @param msg a <code>String</code> specifying the descriptive message
      */
     public UnavailableException(String msg) {
         super(msg);
@@ -66,23 +58,17 @@ public class UnavailableException extends ServletException {
     }
 
     /**
-     * Constructs a new exception with a descriptive message indicating that the
-     * servlet is temporarily unavailable and giving an estimate of how long it
-     * will be unavailable.
+     * Constructs a new exception with a descriptive message indicating that the servlet is temporarily unavailable and
+     * giving an estimate of how long it will be unavailable.
      * <p>
-     * In some cases, the servlet cannot make an estimate. For example, the
-     * servlet might know that a server it needs is not running, but not be able
-     * to report how long it will take to be restored to functionality. This can
-     * be indicated with a negative or zero value for the <code>seconds</code>
-     * argument.
+     * In some cases, the servlet cannot make an estimate. For example, the servlet might know that a server it needs is
+     * not running, but not be able to report how long it will take to be restored to functionality. This can be
+     * indicated with a negative or zero value for the <code>seconds</code> argument.
      *
-     * @param msg
-     *            a <code>String</code> specifying the descriptive message,
-     *            which can be written to a log file or displayed for the user.
-     * @param seconds
-     *            an integer specifying the number of seconds the servlet
-     *            expects to be unavailable; if zero or negative, indicates that
-     *            the servlet can't make an estimate
+     * @param msg     a <code>String</code> specifying the descriptive message, which can be written to a log file or
+     *                    displayed for the user.
+     * @param seconds an integer specifying the number of seconds the servlet expects to be unavailable; if zero or
+     *                    negative, indicates that the servlet can't make an estimate
      */
     public UnavailableException(String msg, int seconds) {
         super(msg);
@@ -96,30 +82,25 @@ public class UnavailableException extends ServletException {
     }
 
     /**
-     * Returns a <code>boolean</code> indicating whether the servlet is
-     * permanently unavailable. If so, something is wrong with the servlet, and
-     * the system administrator must take some corrective action.
+     * Returns a <code>boolean</code> indicating whether the servlet is permanently unavailable. If so, something is
+     * wrong with the servlet, and the system administrator must take some corrective action.
      *
-     * @return <code>true</code> if the servlet is permanently unavailable;
-     *         <code>false</code> if the servlet is available or temporarily
-     *         unavailable
+     * @return <code>true</code> if the servlet is permanently unavailable; <code>false</code> if the servlet is
+     *             available or temporarily unavailable
      */
     public boolean isPermanent() {
         return permanent;
     }
 
     /**
-     * Returns the number of seconds the servlet expects to be temporarily
-     * unavailable.
+     * Returns the number of seconds the servlet expects to be temporarily unavailable.
      * <p>
-     * If this method returns a negative number, the servlet is permanently
-     * unavailable or cannot provide an estimate of how long it will be
-     * unavailable. No effort is made to correct for the time elapsed since the
-     * exception was first reported.
+     * If this method returns a negative number, the servlet is permanently unavailable or cannot provide an estimate of
+     * how long it will be unavailable. No effort is made to correct for the time elapsed since the exception was first
+     * reported.
      *
-     * @return an integer specifying the number of seconds the servlet will be
-     *         temporarily unavailable, or a negative number if the servlet is
-     *         permanently unavailable or cannot make an estimate
+     * @return an integer specifying the number of seconds the servlet will be temporarily unavailable, or a negative
+     *             number if the servlet is permanently unavailable or cannot make an estimate
      */
     public int getUnavailableSeconds() {
         return permanent ? -1 : seconds;

==================================================
HandlesTypes.java
index 074875db9c..ff28eed706 100644
--- a/java/jakarta/servlet/WriteListener.java
+++ b/java/jakarta/servlet/WriteListener.java
@@ -23,14 +23,12 @@ import java.io.IOException;
  *
  * @since Servlet 3.1
  */
-public interface WriteListener extends java.util.EventListener{
+public interface WriteListener extends java.util.EventListener {
 
     /**
-     * Invoked when it it possible to write data without blocking. The container
-     * will invoke this method the first time for a request as soon as data can
-     * be written. Subsequent invocations will only occur if a call to
-     * {@link ServletOutputStream#isReady()} has returned false and it has since
-     * become possible to write data.
+     * Invoked when it it possible to write data without blocking. The container will invoke this method the first time
+     * for a request as soon as data can be written. Subsequent invocations will only occur if a call to
+     * {@link ServletOutputStream#isReady()} has returned false and it has since become possible to write data.
      *
      * @throws IOException if an I/O error occurs while processing this event
      */

==================================================
HttpConstraint.java
index e795f73814..7dd52b165c 100644
--- a/java/jakarta/servlet/annotation/HandlesTypes.java
+++ b/java/jakarta/servlet/annotation/HandlesTypes.java
@@ -22,8 +22,8 @@ import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
 /**
- * This annotation is used to declare an array of application classes which are
- * passed to a {@link jakarta.servlet.ServletContainerInitializer}.
+ * This annotation is used to declare an array of application classes which are passed to a
+ * {@link jakarta.servlet.ServletContainerInitializer}.
  *
  * @since Servlet 3.0
  */

==================================================
HttpMethodConstraint.java
index 289a9bed43..e62cbf77b9 100644
--- a/java/jakarta/servlet/annotation/HttpConstraint.java
+++ b/java/jakarta/servlet/annotation/HttpConstraint.java
@@ -24,9 +24,8 @@ import jakarta.servlet.annotation.ServletSecurity.EmptyRoleSemantic;
 import jakarta.servlet.annotation.ServletSecurity.TransportGuarantee;
 
 /**
- * This annotation represents the security constraints that are applied to all
- * requests with HTTP protocol method types that are not otherwise represented
- * by a corresponding {@link jakarta.servlet.annotation.HttpMethodConstraint} in a
+ * This annotation represents the security constraints that are applied to all requests with HTTP protocol method types
+ * that are not otherwise represented by a corresponding {@link jakarta.servlet.annotation.HttpMethodConstraint} in a
  * {@link jakarta.servlet.annotation.ServletSecurity} annotation.
  *
  * @since Servlet 3.0
@@ -36,8 +35,7 @@ import jakarta.servlet.annotation.ServletSecurity.TransportGuarantee;
 public @interface HttpConstraint {
 
     /**
-     * The EmptyRoleSemantic determines the behaviour when the rolesAllowed list
-     * is empty.
+     * The EmptyRoleSemantic determines the behaviour when the rolesAllowed list is empty.
      *
      * @return empty role semantic
      */
@@ -51,18 +49,14 @@ public @interface HttpConstraint {
     TransportGuarantee transportGuarantee() default TransportGuarantee.NONE;
 
     /**
-     * The authorized roles' names. The container may discard duplicate role
-     * names during processing of the annotation. N.B. The String "*" does not
-     * have a special meaning if it occurs as a role name.
-     *
-     * @return array of names. The array may be of zero length, in which case
-     *         the EmptyRoleSemantic applies; the returned value determines
-     *         whether access is to be permitted or denied regardless of the
-     *         identity and authentication state in either case, PERMIT or DENY.<br>
-     *         Otherwise, when the array contains one or more role names access
-     *         is permitted if the user a member of at least one of the named
-     *         roles. The EmptyRoleSemantic is not applied in this case.
+     * The authorized roles' names. The container may discard duplicate role names during processing of the annotation.
+     * N.B. The String "*" does not have a special meaning if it occurs as a role name.
      *
+     * @return array of names. The array may be of zero length, in which case the EmptyRoleSemantic applies; the
+     *             returned value determines whether access is to be permitted or denied regardless of the identity and
+     *             authentication state in either case, PERMIT or DENY.<br>
+     *             Otherwise, when the array contains one or more role names access is permitted if the user a member of
+     *             at least one of the named roles. The EmptyRoleSemantic is not applied in this case.
      */
     String[] rolesAllowed() default {};
 

==================================================
MultipartConfig.java
index a700543a3a..376e0c5f2b 100644
--- a/java/jakarta/servlet/annotation/HttpMethodConstraint.java
+++ b/java/jakarta/servlet/annotation/HttpMethodConstraint.java
@@ -24,12 +24,10 @@ import jakarta.servlet.annotation.ServletSecurity.EmptyRoleSemantic;
 import jakarta.servlet.annotation.ServletSecurity.TransportGuarantee;
 
 /**
- * Specific security constraints can be applied to different types of request,
- * differentiated by the HTTP protocol method type by using this annotation
- * inside the {@link jakarta.servlet.annotation.ServletSecurity} annotation.
+ * Specific security constraints can be applied to different types of request, differentiated by the HTTP protocol
+ * method type by using this annotation inside the {@link jakarta.servlet.annotation.ServletSecurity} annotation.
  *
  * @since Servlet 3.0
- *
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
@@ -43,8 +41,7 @@ public @interface HttpMethodConstraint {
     String value();
 
     /**
-     * The EmptyRoleSemantic determines the behaviour when the rolesAllowed list
-     * is empty.
+     * The EmptyRoleSemantic determines the behaviour when the rolesAllowed list is empty.
      *
      * @return empty role semantic
      */
@@ -58,17 +55,14 @@ public @interface HttpMethodConstraint {
     TransportGuarantee transportGuarantee() default TransportGuarantee.NONE;
 
     /**
-     * The authorized roles' names. The container may discard duplicate role
-     * names during processing of the annotation. N.B. The String "*" does not
-     * have a special meaning if it occurs as a role name.
+     * The authorized roles' names. The container may discard duplicate role names during processing of the annotation.
+     * N.B. The String "*" does not have a special meaning if it occurs as a role name.
      *
-     * @return array of names. The array may be of zero length, in which case
-     *         the EmptyRoleSemantic applies; the returned value determines
-     *         whether access is to be permitted or denied regardless of the
-     *         identity and authentication state in either case, PERMIT or DENY.<br>
-     *         Otherwise, when the array contains one or more role names access
-     *         is permitted if the user a member of at least one of the named
-     *         roles. The EmptyRoleSemantic is not applied in this case.
+     * @return array of names. The array may be of zero length, in which case the EmptyRoleSemantic applies; the
+     *             returned value determines whether access is to be permitted or denied regardless of the identity and
+     *             authentication state in either case, PERMIT or DENY.<br>
+     *             Otherwise, when the array contains one or more role names access is permitted if the user a member of
+     *             at least one of the named roles. The EmptyRoleSemantic is not applied in this case.
      */
     String[] rolesAllowed() default {};
 }

==================================================
ServletSecurity.java
index 4cafff3865..6e0d6926b9 100644
--- a/java/jakarta/servlet/annotation/MultipartConfig.java
+++ b/java/jakarta/servlet/annotation/MultipartConfig.java
@@ -22,20 +22,16 @@ import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
 /**
- * This annotation is used to indicate that the {@link jakarta.servlet.Servlet} on
- * which it is declared expects requests to made using the {@code
+ * This annotation is used to indicate that the {@link jakarta.servlet.Servlet} on which it is declared expects requests
+ * to made using the {@code
  * multipart/form-data} MIME type. <br>
  * <br>
- *
  * {@link jakarta.servlet.http.Part} components of a given {@code
- * multipart/form-data} request are retrieved by a Servlet annotated with
- * {@code MultipartConfig} by calling
+ * multipart/form-data} request are retrieved by a Servlet annotated with {@code MultipartConfig} by calling
  * {@link jakarta.servlet.http.HttpServletRequest#getPart} or
  * {@link jakarta.servlet.http.HttpServletRequest#getParts}.<br>
  * <br>
- *
  * E.g. <code>@WebServlet("/upload")}</code><br>
- *
  * <code>@MultipartConfig()</code> <code>public class UploadServlet extends
  * HttpServlet ... } </code><br>
  *

==================================================
WebFilter.java
index 7231d7257b..28644078da 100644
--- a/java/jakarta/servlet/annotation/ServletSecurity.java
+++ b/java/jakarta/servlet/annotation/ServletSecurity.java
@@ -24,10 +24,9 @@ import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
 /**
- * Declare this annotation on a {@link jakarta.servlet.Servlet} implementation
- * class to enforce security constraints on HTTP protocol requests.<br>
- * The container applies constraints to the URL patterns mapped to each Servlet
- * which declares this annotation.<br>
+ * Declare this annotation on a {@link jakarta.servlet.Servlet} implementation class to enforce security constraints on
+ * HTTP protocol requests.<br>
+ * The container applies constraints to the URL patterns mapped to each Servlet which declares this annotation.<br>
  * <br>
  *
  * @since Servlet 3.0
@@ -39,14 +38,12 @@ import java.lang.annotation.Target;
 public @interface ServletSecurity {
 
     /**
-     * Represents the two possible values of the empty role semantic, active
-     * when a list of role names is empty.
+     * Represents the two possible values of the empty role semantic, active when a list of role names is empty.
      */
     enum EmptyRoleSemantic {
 
         /**
-         * Access MUST be permitted, regardless of authentication state or
-         * identity
+         * Access MUST be permitted, regardless of authentication state or identity
          */
         PERMIT,
 
@@ -73,16 +70,14 @@ public @interface ServletSecurity {
     }
 
     /**
-     * The default constraint to apply to requests not handled by specific
-     * method constraints
+     * The default constraint to apply to requests not handled by specific method constraints
      *
      * @return http constraint
      */
     HttpConstraint value() default @HttpConstraint;
 
     /**
-     * An array of HttpMethodConstraint objects to which the security constraint
-     * will be applied
+     * An array of HttpMethodConstraint objects to which the security constraint will be applied
      *
      * @return array of http method constraint
      */

==================================================
WebInitParam.java
index f798177968..a277d43788 100644
--- a/java/jakarta/servlet/annotation/WebFilter.java
+++ b/java/jakarta/servlet/annotation/WebFilter.java
@@ -27,35 +27,22 @@ import jakarta.servlet.DispatcherType;
 /**
  * The annotation used to declare a Servlet {@link jakarta.servlet.Filter}. <br>
  * <br>
- *
- * This annotation will be processed by the container during deployment, the
- * Filter class in which it is found will be created as per the configuration
- * and applied to the URL patterns, {@link jakarta.servlet.Servlet}s and
+ * This annotation will be processed by the container during deployment, the Filter class in which it is found will be
+ * created as per the configuration and applied to the URL patterns, {@link jakarta.servlet.Servlet}s and
  * {@link jakarta.servlet.DispatcherType}s.<br>
  * <br>
- *
- * If the name attribute is not defined, the fully qualified name of the class
- * is used.<br>
+ * If the name attribute is not defined, the fully qualified name of the class is used.<br>
  * <br>
- *
- * At least one URL pattern MUST be declared in either the {@code value} or
- * {@code urlPattern} attribute of the annotation, but not both.<br>
+ * At least one URL pattern MUST be declared in either the {@code value} or {@code urlPattern} attribute of the
+ * annotation, but not both.<br>
  * <br>
- *
- * The {@code value} attribute is recommended for use when the URL pattern is
- * the only attribute being set, otherwise the {@code urlPattern} attribute
- * should be used.<br>
+ * The {@code value} attribute is recommended for use when the URL pattern is the only attribute being set, otherwise
+ * the {@code urlPattern} attribute should be used.<br>
  * <br>
- *
- * The annotated class MUST implement {@link jakarta.servlet.Filter}.
- *
- * E.g.
- *
- * <code>@WebFilter("/path/*")</code><br>
+ * The annotated class MUST implement {@link jakarta.servlet.Filter}. E.g. <code>@WebFilter("/path/*")</code><br>
  * <code>public class AnExampleFilter implements Filter { ... </code><br>
  *
  * @since Servlet 3.0 (Section 8.1.2)
- *
  */
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
@@ -101,6 +88,7 @@ public @interface WebFilter {
      * A convenience method, to allow extremely simple annotation of a class.
      *
      * @return array of URL patterns
+     *
      * @see #urlPatterns()
      */
     String[] value() default {};
@@ -113,7 +101,7 @@ public @interface WebFilter {
     /**
      * @return array of DispatcherTypes to which this filter applies
      */
-    DispatcherType[] dispatcherTypes() default {DispatcherType.REQUEST};
+    DispatcherType[] dispatcherTypes() default { DispatcherType.REQUEST };
 
     /**
      * @return asynchronous operation supported by this Filter

==================================================
WebListener.java
index a2a6a7b01d..feb4bf901b 100644
--- a/java/jakarta/servlet/annotation/WebInitParam.java
+++ b/java/jakarta/servlet/annotation/WebInitParam.java
@@ -23,12 +23,10 @@ import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
 /**
- * The annotation used to declare an initialization parameter on a
- * {@link jakarta.servlet.Servlet} or {@link jakarta.servlet.Filter}, within a
- * {@link jakarta.servlet.annotation.WebFilter} or
+ * The annotation used to declare an initialization parameter on a {@link jakarta.servlet.Servlet} or
+ * {@link jakarta.servlet.Filter}, within a {@link jakarta.servlet.annotation.WebFilter} or
  * {@link jakarta.servlet.annotation.WebServlet} annotation.<br>
  * <br>
- *
  * E.g.
  * <code>&amp;#064;WebServlet(name="TestServlet", urlPatterns={"/test"},initParams={&amp;#064;WebInitParam(name="test", value="true")})
  * public class TestServlet extends HttpServlet { ... </code><br>

==================================================
WebServlet.java
index d345b19b1d..aee671b4fa 100644
--- a/java/jakarta/servlet/annotation/WebListener.java
+++ b/java/jakarta/servlet/annotation/WebListener.java
@@ -23,20 +23,13 @@ import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
 /**
- * The annotation used to declare a listener for various types of event, in a
- * given web application context.<br>
+ * The annotation used to declare a listener for various types of event, in a given web application context.<br>
  * <br>
- *
- * The class annotated MUST implement one, (or more), of the following
- * interfaces: {@link jakarta.servlet.http.HttpSessionAttributeListener},
- * {@link jakarta.servlet.http.HttpSessionListener},
- * {@link jakarta.servlet.ServletContextAttributeListener},
- * {@link jakarta.servlet.ServletContextListener},
- * {@link jakarta.servlet.ServletRequestAttributeListener},
- * {@link jakarta.servlet.ServletRequestListener} or
- * {@link jakarta.servlet.http.HttpSessionIdListener}
- * <br>
- *
+ * The class annotated MUST implement one, (or more), of the following interfaces:
+ * {@link jakarta.servlet.http.HttpSessionAttributeListener}, {@link jakarta.servlet.http.HttpSessionListener},
+ * {@link jakarta.servlet.ServletContextAttributeListener}, {@link jakarta.servlet.ServletContextListener},
+ * {@link jakarta.servlet.ServletRequestAttributeListener}, {@link jakarta.servlet.ServletRequestListener} or
+ * {@link jakarta.servlet.http.HttpSessionIdListener} <br>
  * E.g. <code>@WebListener</code><br>
  * <code>public TestListener implements ServletContextListener {</code><br>
  *

==================================================
JspConfigDescriptor.java
index 6ce31331f0..5e1334bd1e 100644
--- a/java/jakarta/servlet/annotation/WebServlet.java
+++ b/java/jakarta/servlet/annotation/WebServlet.java
@@ -23,35 +23,23 @@ import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
 /**
- * This annotation is used to declare the configuration of a
- * {@link jakarta.servlet.Servlet}. <br>
- *
- * If the name attribute is not defined, the fully qualified name of the class
- * is used.<br>
+ * This annotation is used to declare the configuration of a {@link jakarta.servlet.Servlet}. <br>
+ * If the name attribute is not defined, the fully qualified name of the class is used.<br>
  * <br>
- *
- * At least one URL pattern MUST be declared in either the {@code value} or
- * {@code urlPattern} attribute of the annotation, but not both.<br>
+ * At least one URL pattern MUST be declared in either the {@code value} or {@code urlPattern} attribute of the
+ * annotation, but not both.<br>
  * <br>
- *
- * The {@code value} attribute is recommended for use when the URL pattern is
- * the only attribute being set, otherwise the {@code urlPattern} attribute
- * should be used.<br>
+ * The {@code value} attribute is recommended for use when the URL pattern is the only attribute being set, otherwise
+ * the {@code urlPattern} attribute should be used.<br>
  * <br>
- *
- * The class on which this annotation is declared MUST extend
- * {@link jakarta.servlet.http.HttpServlet}. <br>
+ * The class on which this annotation is declared MUST extend {@link jakarta.servlet.http.HttpServlet}. <br>
  * <br>
- *
  * E.g. <code>@WebServlet("/path")}<br>
  * public class TestServlet extends HttpServlet ... {</code><br>
- *
- * E.g.
- * <code>@WebServlet(name="TestServlet", urlPatterns={"/path", "/alt"}) <br>
+ * E.g. <code>@WebServlet(name="TestServlet", urlPatterns={"/path", "/alt"}) <br>
  * public class TestServlet extends HttpServlet ... {</code><br>
  *
  * @since Servlet 3.0 (Section 8.1.1)
- *
  */
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
@@ -67,6 +55,7 @@ public @interface WebServlet {
      * A convenience method, to allow extremely simple annotation of a class.
      *
      * @return array of URL patterns
+     *
      * @see #urlPatterns()
      */
     String[] value() default {};

==================================================
JspPropertyGroupDescriptor.java
index baee57a4cf..401b7e934d 100644
--- a/java/jakarta/servlet/descriptor/JspConfigDescriptor.java
+++ b/java/jakarta/servlet/descriptor/JspConfigDescriptor.java
@@ -19,27 +19,24 @@ package jakarta.servlet.descriptor;
 import java.util.Collection;
 
 /**
- * This interface exposes the JSP specific configuration information obtain ed
- * from the deployment descriptors. It is primarily provided so that JSP
- * implementations do not have to parse deployment descriptors.
+ * This interface exposes the JSP specific configuration information obtain ed from the deployment descriptors. It is
+ * primarily provided so that JSP implementations do not have to parse deployment descriptors.
  *
  * @since Servlet 3.0
  */
 public interface JspConfigDescriptor {
 
     /**
-     * Provide the set of tag library descriptors obtained from the
-     * &lt;jsp-config&gt; elements in the web application's deployment
-     * descriptors.
+     * Provide the set of tag library descriptors obtained from the &lt;jsp-config&gt; elements in the web application's
+     * deployment descriptors.
      *
      * @return the tag library descriptors
      */
     Collection<TaglibDescriptor> getTaglibs();
 
     /**
-     * Provide the set of JSP property groups obtained from the
-     * &lt;jsp-config&gt; elements in the web application's deployment
-     * descriptors.
+     * Provide the set of JSP property groups obtained from the &lt;jsp-config&gt; elements in the web application's
+     * deployment descriptors.
      *
      * @return the JSP property groups
      */

==================================================
Cookie.java
index 34fac21246..6cd415bebc 100644
--- a/java/jakarta/servlet/descriptor/JspPropertyGroupDescriptor.java
+++ b/java/jakarta/servlet/descriptor/JspPropertyGroupDescriptor.java
@@ -40,8 +40,7 @@ public interface JspPropertyGroupDescriptor {
     String getElIgnored();
 
     /**
-     * Will the use of an unknown identifier in EL within a JSP page trigger an
-     * error for this group?
+     * Will the use of an unknown identifier in EL within a JSP page trigger an error for this group?
      *
      * @return {@code true} if an error will be triggered, otherwise {@code false}
      *
@@ -66,8 +65,7 @@ public interface JspPropertyGroupDescriptor {
     /**
      * Should the JSPs in this group be treated as JSP documents?
      *
-     * @return {@code true} if the JSPs should be treated as JSP documents,
-     *         otherwise {@code false}
+     * @return {@code true} if the JSPs should be treated as JSP documents, otherwise {@code false}
      */
     String getIsXml();
 
@@ -86,20 +84,16 @@ public interface JspPropertyGroupDescriptor {
     Collection<String> getIncludeCodas();
 
     /**
-     * Is the deferred El syntax <code>#{...}</code> allowed to be used as a
-     * literal in this group?
+     * Is the deferred El syntax <code>#{...}</code> allowed to be used as a literal in this group?
      *
-     * @return {@code true} if the deferred EL syntax is allowed to be used as
-     *         a literal, otherwise {@code false}
+     * @return {@code true} if the deferred EL syntax is allowed to be used as a literal, otherwise {@code false}
      */
     String getDeferredSyntaxAllowedAsLiteral();
 
     /**
-     * Should the JSPs in this group have template text that only contains
-     * whitespace removed?
+     * Should the JSPs in this group have template text that only contains whitespace removed?
      *
-     * @return {@code true} if the whitespace be removed, otherwise
-     *         {@code false}
+     * @return {@code true} if the whitespace be removed, otherwise {@code false}
      */
     String getTrimDirectiveWhitespaces();
 
@@ -118,11 +112,10 @@ public interface JspPropertyGroupDescriptor {
     String getBuffer();
 
     /**
-     * Should an error be raised at translation time for a page in this group if
-     * the page contains a reference (e.g. a tag) to a undeclared namespace.
+     * Should an error be raised at translation time for a page in this group if the page contains a reference (e.g. a
+     * tag) to a undeclared namespace.
      *
-     * @return {@code true} if an error should be raised, otherwise
-     *         {@code false}
+     * @return {@code true} if an error should be raised, otherwise {@code false}
      */
     String getErrorOnUndeclaredNamespace();
 }

==================================================
HttpServlet.java
index f3c4446859..57d69e3b8a 100644
--- a/java/jakarta/servlet/http/Cookie.java
+++ b/java/jakarta/servlet/http/Cookie.java
@@ -69,7 +69,7 @@ public class Cookie implements Cloneable, Serializable {
     /**
      * Attributes encoded in the header's cookie fields.
      */
-    private volatile Map<String, String> attributes;
+    private volatile Map<String,String> attributes;
 
     private static final String DOMAIN = "Domain";
     private static final String MAX_AGE = "Max-Age";
@@ -439,7 +439,7 @@ public class Cookie implements Cloneable, Serializable {
      *
      * @since Servlet 6.0
      */
-    public Map<String, String> getAttributes() {
+    public Map<String,String> getAttributes() {
         if (attributes == null) {
             return Collections.emptyMap();
         } else {

==================================================
HttpServletRequest.java
index 08f317877b..483bcc0423 100644
--- a/java/jakarta/servlet/http/HttpServlet.java
+++ b/java/jakarta/servlet/http/HttpServlet.java
@@ -85,8 +85,8 @@ public abstract class HttpServlet extends GenericServlet {
     private static final String LSTRING_FILE = "jakarta.servlet.http.LocalStrings";
     private static final ResourceBundle lStrings = ResourceBundle.getBundle(LSTRING_FILE);
 
-    private static final List<String> SENSITIVE_HTTP_HEADERS = Arrays.asList("authorization", "cookie", "x-forwarded",
-            "forwarded", "proxy-authorization");
+    private static final List<String> SENSITIVE_HTTP_HEADERS =
+            Arrays.asList("authorization", "cookie", "x-forwarded", "forwarded", "proxy-authorization");
 
     /**
      * @deprecated May be removed in a future release
@@ -130,9 +130,9 @@ public abstract class HttpServlet extends GenericServlet {
      * Overriding this method to support a GET request also automatically supports an HTTP HEAD request. A HEAD request
      * is a GET request that returns no body in the response, only the request header fields.
      * <p>
-     * When overriding this method, read the request data, write the response headers, get the response's Writer
-     * or output stream object, and finally, write the response data. It's best to include content type and encoding.
-     * When using a <code>PrintWriter</code> object to return the response, set the content type before accessing the
+     * When overriding this method, read the request data, write the response headers, get the response's Writer or
+     * output stream object, and finally, write the response data. It's best to include content type and encoding. When
+     * using a <code>PrintWriter</code> object to return the response, set the content type before accessing the
      * <code>PrintWriter</code> object.
      * <p>
      * The servlet container must write the headers before committing the response, because in HTTP the headers must be
@@ -226,9 +226,9 @@ public abstract class HttpServlet extends GenericServlet {
      * Called by the server (via the <code>service</code> method) to allow a servlet to handle a PATCH request. The HTTP
      * PATCH method allows the client to partially modify an existing resource.
      * <p>
-     * When overriding this method, read the request data and write the response headers, get the response's Writer
-     * or output stream object, and finally, write the response data. It's best to include content type and encoding.
-     * When using a <code>PrintWriter</code> object to return the response, set the content type before accessing the
+     * When overriding this method, read the request data and write the response headers, get the response's Writer or
+     * output stream object, and finally, write the response data. It's best to include content type and encoding. When
+     * using a <code>PrintWriter</code> object to return the response, set the content type before accessing the
      * <code>PrintWriter</code> object.
      * <p>
      * The servlet container must write the headers before committing the response, because in HTTP the headers must be
@@ -269,9 +269,9 @@ public abstract class HttpServlet extends GenericServlet {
      * POST method allows the client to send data of unlimited length to the Web server a single time and is useful when
      * posting information such as credit card numbers.
      * <p>
-     * When overriding this method, read the request data, write the response headers, get the response's Writer
-     * or output stream object, and finally, write the response data. It's best to include content type and encoding.
-     * When using a <code>PrintWriter</code> object to return the response, set the content type before accessing the
+     * When overriding this method, read the request data, write the response headers, get the response's Writer or
+     * output stream object, and finally, write the response data. It's best to include content type and encoding. When
+     * using a <code>PrintWriter</code> object to return the response, set the content type before accessing the
      * <code>PrintWriter</code> object.
      * <p>
      * The servlet container must write the headers before committing the response, because in HTTP the headers must be
@@ -532,8 +532,8 @@ public abstract class HttpServlet extends GenericServlet {
         int responseLength;
 
         String CRLF = "\r\n";
-        StringBuilder buffer = new StringBuilder("TRACE ").append(req.getRequestURI()).append(' ')
-                .append(req.getProtocol());
+        StringBuilder buffer =
+                new StringBuilder("TRACE ").append(req.getRequestURI()).append(' ').append(req.getProtocol());
 
         Enumeration<String> reqHeaderNames = req.getHeaderNames();
 

==================================================
HttpServletRequestWrapper.java
index 5e20cfdcad..476a0338cf 100644
--- a/java/jakarta/servlet/http/HttpServletRequest.java
+++ b/java/jakarta/servlet/http/HttpServletRequest.java
@@ -518,7 +518,7 @@ public interface HttpServletRequest extends ServletRequest {
      *
      * @since Servlet 4.0
      */
-    default Map<String, String> getTrailerFields() {
+    default Map<String,String> getTrailerFields() {
         return Collections.emptyMap();
     }
 

==================================================
HttpServletResponse.java
index 02de8d5616..766488be9d 100644
--- a/java/jakarta/servlet/http/HttpServletRequestWrapper.java
+++ b/java/jakarta/servlet/http/HttpServletRequestWrapper.java
@@ -364,7 +364,7 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
      * @since Servlet 4.0
      */
     @Override
-    public Map<String, String> getTrailerFields() {
+    public Map<String,String> getTrailerFields() {
         return this._getHttpServletRequest().getTrailerFields();
     }
 

==================================================
HttpServletResponseWrapper.java
index 36c510215b..49be83c10a 100644
--- a/java/jakarta/servlet/http/HttpServletResponse.java
+++ b/java/jakarta/servlet/http/HttpServletResponse.java
@@ -356,7 +356,7 @@ public interface HttpServletResponse extends ServletResponse {
      *
      * @since Servlet 4.0
      */
-    default void setTrailerFields(Supplier<Map<String, String>> supplier) {
+    default void setTrailerFields(Supplier<Map<String,String>> supplier) {
         // NO-OP
     }
 
@@ -368,7 +368,7 @@ public interface HttpServletResponse extends ServletResponse {
      *
      * @since Servlet 4.0
      */
-    default Supplier<Map<String, String>> getTrailerFields() {
+    default Supplier<Map<String,String>> getTrailerFields() {
         return null;
     }
 

==================================================
