44ef22afdb421d12d0e86c6281d5df2c948b7041
==================================================
Remove the Suffix interface and get the Parser to create a MehtodParameters object which allows a cleaner implementation.
==================================================
Mark Emlyn
==================================================
Thu Jan 14 22:41:41 2010 +0000
==================================================
AstBracketSuffix.java
Remove the Suffix interface and get the Parser to create a MehtodParameters object which allows a cleaner implementation.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@899450 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AstDotSuffix.java
index 9f5d792b22..93216a0122 100644
--- a/java/org/apache/el/parser/AstBracketSuffix.java
+++ b/java/org/apache/el/parser/AstBracketSuffix.java
@@ -27,7 +27,7 @@ import org.apache.el.lang.EvaluationContext;
  * @author Jacob Hookom [jacob@hookom.net]
  * @version $Change: 181177 $$Date$$Author$
  */
-public final class AstBracketSuffix extends SimpleNode implements Suffix {
+public final class AstBracketSuffix extends SimpleNode {
     public AstBracketSuffix(int id) {
         super(id);
     }

==================================================
AstMethodParameters.java
index 2eaaac200f..ea64fec019 100644
--- a/java/org/apache/el/parser/AstDotSuffix.java
+++ b/java/org/apache/el/parser/AstDotSuffix.java
@@ -27,7 +27,7 @@ import org.apache.el.lang.EvaluationContext;
  * @author Jacob Hookom [jacob@hookom.net]
  * @version $Change: 181177 $$Date$$Author$
  */
-public final class AstDotSuffix extends SimpleNode implements Suffix {
+public final class AstDotSuffix extends SimpleNode {
     public AstDotSuffix(int id) {
         super(id);
     }

==================================================
AstValue.java
new file mode 100644
index 0000000000..9ad6d6eebc
--- /dev/null
+++ b/java/org/apache/el/parser/AstMethodParameters.java
@@ -0,0 +1,48 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/* Generated By:JJTree: Do not edit this line. AstDotSuffix.java */
+
+package org.apache.el.parser;
+
+import java.util.ArrayList;
+
+import org.apache.el.lang.EvaluationContext;
+
+/**
+ * $Id$
+ */
+public final class AstMethodParameters extends SimpleNode {
+    public AstMethodParameters(int id) {
+        super(id);
+    }
+
+    public Object[] getParameters(EvaluationContext ctx) {
+        ArrayList<Object> params = new ArrayList<Object>();
+        for (int i = 0; i < this.jjtGetNumChildren(); i++) {
+            params.add(this.jjtGetChild(i).getValue(ctx));
+        }
+        return params.toArray(new Object[params.size()]);
+    }
+    
+    public Class<?>[] getParameterTypes(EvaluationContext ctx) {
+        ArrayList<Class<?>> paramTypes = new ArrayList<Class<?>>();
+        for (int i = 0; i < this.jjtGetNumChildren(); i++) {
+            paramTypes.add(this.jjtGetChild(i).getType(ctx));
+        }
+        return paramTypes.toArray(new Class<?>[paramTypes.size()]);
+    }
+}

==================================================
Suffix.java
index cd52ebfcfc..6a0633a62c 100644
--- a/java/org/apache/el/parser/ELParser.jjt
+++ b/java/org/apache/el/parser/ELParser.jjt
@@ -251,7 +251,7 @@ void BracketSuffix() #BracketSuffix : {}
 /*
  * MethodParameters
  */
-void MethodParameters() : {}
+void MethodParameters() #MethodParameters : {}
 {
     <LPAREN> ( Expression() ( <COMMA> Expression())* )? <RPAREN>
 }

==================================================
