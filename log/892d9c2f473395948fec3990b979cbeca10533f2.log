892d9c2f473395948fec3990b979cbeca10533f2
==================================================
Remove deprecated code - align with EL 6.0 development
==================================================
Mark Thomas
==================================================
Wed Oct 19 13:43:07 2022 +0100
==================================================
ArrayELResolver.java
Remove deprecated code - align with EL 6.0 development


==================================================
BeanELResolver.java
index 410c31b9ef..f7deded09e 100644
--- a/java/jakarta/el/ArrayELResolver.java
+++ b/java/jakarta/el/ArrayELResolver.java
@@ -16,9 +16,7 @@
  */
 package jakarta.el;
 
-import java.beans.FeatureDescriptor;
 import java.lang.reflect.Array;
-import java.util.Iterator;
 import java.util.Objects;
 
 /**
@@ -128,12 +126,6 @@ public class ArrayELResolver extends ELResolver {
         return this.readOnly;
     }
 
-    @Deprecated(forRemoval = true, since = "EL 5.0")
-    @Override
-    public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
-        return null;
-    }
-
     @Override
     public Class<?> getCommonPropertyType(ELContext context, Object base) {
         if (base != null && base.getClass().isArray()) {

==================================================
BeanNameELResolver.java
index eb54c36bd6..c470b92734 100644
--- a/java/jakarta/el/BeanELResolver.java
+++ b/java/jakarta/el/BeanELResolver.java
@@ -17,7 +17,6 @@
 package jakarta.el;
 
 import java.beans.BeanInfo;
-import java.beans.FeatureDescriptor;
 import java.beans.IntrospectionException;
 import java.beans.Introspector;
 import java.beans.PropertyDescriptor;
@@ -25,9 +24,7 @@ import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
-import java.util.Arrays;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.Map;
 import java.util.Objects;
 import java.util.WeakHashMap;
@@ -186,28 +183,6 @@ public class BeanELResolver extends ELResolver {
         return this.readOnly || this.property(context, base, property).isReadOnly(base);
     }
 
-    @Deprecated(forRemoval = true, since = "EL 5.0")
-    @Override
-    public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
-        if (base == null) {
-            return null;
-        }
-
-        try {
-            BeanInfo info = Introspector.getBeanInfo(base.getClass());
-            PropertyDescriptor[] pds = info.getPropertyDescriptors();
-            for (PropertyDescriptor pd : pds) {
-                pd.setValue(RESOLVABLE_AT_DESIGN_TIME, Boolean.TRUE);
-                pd.setValue(TYPE, pd.getPropertyType());
-            }
-            return Arrays.asList((FeatureDescriptor[]) pds).iterator();
-        } catch (IntrospectionException e) {
-            //
-        }
-
-        return null;
-    }
-
     @Override
     public Class<?> getCommonPropertyType(ELContext context, Object base) {
         if (base != null) {

==================================================
CompositeELResolver.java
index 27bc01a01c..bb8a93a977 100644
--- a/java/jakarta/el/BeanNameELResolver.java
+++ b/java/jakarta/el/BeanNameELResolver.java
@@ -16,8 +16,6 @@
  */
 package jakarta.el;
 
-import java.beans.FeatureDescriptor;
-import java.util.Iterator;
 import java.util.Objects;
 
 /**
@@ -150,13 +148,6 @@ public class BeanNameELResolver extends ELResolver {
         return false;
     }
 
-    @Deprecated(forRemoval = true, since = "EL 5.0")
-    @Override
-    public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context,
-            Object base) {
-        return null;
-    }
-
     @Override
     public Class<?> getCommonPropertyType(ELContext context, Object base) {
         return String.class;

==================================================
ELResolver.java
index 40821f5400..2190ac869e 100644
--- a/java/jakarta/el/CompositeELResolver.java
+++ b/java/jakarta/el/CompositeELResolver.java
@@ -16,9 +16,6 @@
  */
 package jakarta.el;
 
-import java.beans.FeatureDescriptor;
-import java.util.Iterator;
-import java.util.NoSuchElementException;
 import java.util.Objects;
 
 public class CompositeELResolver extends ELResolver {
@@ -132,12 +129,6 @@ public class CompositeELResolver extends ELResolver {
         return false;
     }
 
-    @Deprecated(forRemoval = true, since = "EL 5.0")
-    @Override
-    public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
-        return new FeatureIterator(context, base, this.resolvers, this.size);
-    }
-
     @Override
     public Class<?> getCommonPropertyType(ELContext context, Object base) {
         Class<?> commonType = null;
@@ -163,74 +154,4 @@ public class CompositeELResolver extends ELResolver {
         }
         return null;
     }
-
-    @Deprecated(forRemoval = true, since = "EL 5.0")
-    private static final class FeatureIterator implements Iterator<FeatureDescriptor> {
-
-        private final ELContext context;
-
-        private final Object base;
-
-        private final ELResolver[] resolvers;
-
-        private final int size;
-
-        private Iterator<FeatureDescriptor> itr;
-
-        private int idx;
-
-        private FeatureDescriptor next;
-
-        public FeatureIterator(ELContext context, Object base, ELResolver[] resolvers, int size) {
-            this.context = context;
-            this.base = base;
-            this.resolvers = resolvers;
-            this.size = size;
-
-            this.idx = 0;
-            this.guaranteeIterator();
-        }
-
-        private void guaranteeIterator() {
-            while (this.itr == null && this.idx < this.size) {
-                this.itr = this.resolvers[this.idx].getFeatureDescriptors(this.context, this.base);
-                this.idx++;
-            }
-        }
-
-        @Override
-        public boolean hasNext() {
-            if (this.next != null) {
-                return true;
-            }
-            if (this.itr != null) {
-                while (this.next == null && itr.hasNext()) {
-                    this.next = itr.next();
-                }
-            } else {
-                return false;
-            }
-            if (this.next == null) {
-                this.itr = null;
-                this.guaranteeIterator();
-            }
-            return hasNext();
-        }
-
-        @Override
-        public FeatureDescriptor next() {
-            if (!hasNext()) {
-                throw new NoSuchElementException();
-            }
-            FeatureDescriptor result = this.next;
-            this.next = null;
-            return result;
-
-        }
-
-        @Override
-        public void remove() {
-            throw new UnsupportedOperationException();
-        }
-    }
 }

==================================================
ListELResolver.java
index 8846c0229e..09bb98b01f 100644
--- a/java/jakarta/el/ELResolver.java
+++ b/java/jakarta/el/ELResolver.java
@@ -16,8 +16,6 @@
  */
 package jakarta.el;
 
-import java.util.Iterator;
-
 /**
  * @author Jacob Hookom [jacob/hookom.net]
  *
@@ -118,26 +116,6 @@ public abstract class ELResolver {
     public abstract boolean isReadOnly(ELContext context, Object base,
             Object property);
 
-    /**
-     * Obtain the feature descriptors for the resolvable properties of the given
-     * object.
-     * <p>
-     * The default implementation returns {@code null}.
-     *
-     * @param context The context in which the examination takes place
-     * @param base The object to examine
-     *
-     * @return An iterator, possibly empty, of feature descriptors of the given
-     *         object
-     *
-     * @deprecated This method will be removed, without replacement, in EL 6.0 /
-     *             Tomcat 11.
-     */
-    @Deprecated(forRemoval = true, since = "EL 5.0")
-    public Iterator<java.beans.FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
-        return null;
-    }
-
     /**
      * Obtain the most common type that is acceptable for the given base object.
      *

==================================================
MapELResolver.java
index c894bea3cf..a3b64bf51c 100644
--- a/java/jakarta/el/ListELResolver.java
+++ b/java/jakarta/el/ListELResolver.java
@@ -16,10 +16,8 @@
  */
 package jakarta.el;
 
-import java.beans.FeatureDescriptor;
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
 
@@ -132,12 +130,6 @@ public class ListELResolver extends ELResolver {
         return this.readOnly;
     }
 
-    @Deprecated(forRemoval = true, since = "EL 5.0")
-    @Override
-    public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
-        return null;
-    }
-
     @Override
     public Class<?> getCommonPropertyType(ELContext context, Object base) {
         if (base instanceof List<?>) { // implies base != null

==================================================
ResourceBundleELResolver.java
index 35d7229288..efca33f436 100644
--- a/java/jakarta/el/MapELResolver.java
+++ b/java/jakarta/el/MapELResolver.java
@@ -16,12 +16,8 @@
  */
 package jakarta.el;
 
-import java.beans.FeatureDescriptor;
-import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 
@@ -105,32 +101,6 @@ public class MapELResolver extends ELResolver {
         return this.readOnly;
     }
 
-    @Deprecated(forRemoval = true, since = "EL 5.0")
-    @Override
-    public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
-        if (base instanceof Map<?, ?>) {
-            Iterator<?> itr = ((Map<?, ?>) base).keySet().iterator();
-            List<FeatureDescriptor> feats = new ArrayList<>();
-            Object key;
-            FeatureDescriptor desc;
-            while (itr.hasNext()) {
-                key = itr.next();
-                desc = new FeatureDescriptor();
-                desc.setDisplayName(key.toString());
-                desc.setShortDescription("");
-                desc.setExpert(false);
-                desc.setHidden(false);
-                desc.setName(key.toString());
-                desc.setPreferred(true);
-                desc.setValue(RESOLVABLE_AT_DESIGN_TIME, Boolean.TRUE);
-                desc.setValue(TYPE, key.getClass());
-                feats.add(desc);
-            }
-            return feats.iterator();
-        }
-        return null;
-    }
-
     @Override
     public Class<?> getCommonPropertyType(ELContext context, Object base) {
         if (base instanceof Map<?, ?>) {

==================================================
StaticFieldELResolver.java
index 6050d323e1..d0723b4484 100644
--- a/java/jakarta/el/ResourceBundleELResolver.java
+++ b/java/jakarta/el/ResourceBundleELResolver.java
@@ -16,11 +16,6 @@
  */
 package jakarta.el;
 
-import java.beans.FeatureDescriptor;
-import java.util.ArrayList;
-import java.util.Enumeration;
-import java.util.Iterator;
-import java.util.List;
 import java.util.MissingResourceException;
 import java.util.Objects;
 import java.util.ResourceBundle;
@@ -90,33 +85,6 @@ public class ResourceBundleELResolver extends ELResolver {
         return false;
     }
 
-    @Deprecated(forRemoval = true, since = "EL 5.0")
-    @Override
-    public Iterator<FeatureDescriptor> getFeatureDescriptors(
-            ELContext context, Object base) {
-        if (base instanceof ResourceBundle) {
-            List<FeatureDescriptor> feats = new ArrayList<>();
-            Enumeration<String> e = ((ResourceBundle) base).getKeys();
-            FeatureDescriptor feat;
-            String key;
-            while (e.hasMoreElements()) {
-                key = e.nextElement();
-                feat = new FeatureDescriptor();
-                feat.setDisplayName(key);
-                feat.setShortDescription("");
-                feat.setExpert(false);
-                feat.setHidden(false);
-                feat.setName(key);
-                feat.setPreferred(true);
-                feat.setValue(RESOLVABLE_AT_DESIGN_TIME, Boolean.TRUE);
-                feat.setValue(TYPE, String.class);
-                feats.add(feat);
-            }
-            return feats.iterator();
-        }
-        return null;
-    }
-
     @Override
     public Class<?> getCommonPropertyType(ELContext context, Object base) {
         if (base instanceof ResourceBundle) {

==================================================
TypeConverter.java
index 831309a5c3..e29c7a8557 100644
--- a/java/jakarta/el/StaticFieldELResolver.java
+++ b/java/jakarta/el/StaticFieldELResolver.java
@@ -16,13 +16,11 @@
  */
 package jakarta.el;
 
-import java.beans.FeatureDescriptor;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
-import java.util.Iterator;
 import java.util.Objects;
 
 /**
@@ -185,19 +183,6 @@ public class StaticFieldELResolver extends ELResolver {
     }
 
 
-    /**
-     * Always returns <code>null</code>.
-     *
-     * @deprecated This method will be removed, without replacement, in EL 6.0 /
-     *             Tomcat 11.
-     */
-    @Deprecated(forRemoval = true, since = "EL 5.0")
-    @Override
-    public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context,
-            Object base) {
-        return null;
-    }
-
     /**
      * Always returns <code>String.class</code>.
      */

==================================================
