ac7c73196dff0c46a595985ccf425d0192556f1d
==================================================
Remove remaining reference to Servlet classes to server web socket package
==================================================
Mark Emlyn
==================================================
Mon Jan 21 09:46:18 2013 +0000
==================================================
WsFrameBase.java
Remove remaining reference to Servlet classes to server web socket package

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1436239 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WsFrameServer.java
similarity index 95%
rename from java/org/apache/tomcat/websocket/WsFrame.java
rename to java/org/apache/tomcat/websocket/WsFrameBase.java
index d34b5dce77..4860d5849c 100644
--- a/java/org/apache/tomcat/websocket/WsFrame.java
+++ b/java/org/apache/tomcat/websocket/WsFrameBase.java
@@ -24,7 +24,6 @@ import java.nio.charset.CharsetDecoder;
 import java.nio.charset.CoderResult;
 import java.nio.charset.CodingErrorAction;
 
-import javax.servlet.ServletInputStream;
 import javax.websocket.CloseReason;
 import javax.websocket.CloseReason.CloseCodes;
 import javax.websocket.MessageHandler;
@@ -37,13 +36,13 @@ import org.apache.tomcat.util.res.StringManager;
  * extracts the messages. WebSocket Pings received will be responded to
  * automatically without any action required by the application.
  */
-public class WsFrame {
+public abstract class WsFrameBase {
 
     private static final StringManager sm =
             StringManager.getManager(Constants.PACKAGE_NAME);
 
     // Connection level attributes
-    private final ServletInputStream sis;
+    private final Object connectionReadLock = new Object();
     private final WsSession wsSession;
     private final byte[] inputBuffer;
 
@@ -79,8 +78,7 @@ public class WsFrame {
     private int readPos = 0;
     private int writePos = 0;
 
-    public WsFrame(ServletInputStream sis, WsSession wsSession) {
-        this.sis = sis;
+    public WsFrameBase(WsSession wsSession) {
         this.wsSession = wsSession;
 
         // TODO This needs to work for client and server side code
@@ -101,11 +99,10 @@ public class WsFrame {
      * Called when there is data in the ServletInputStream to process.
      */
     public void onDataAvailable() throws IOException {
-        synchronized (sis) {
-            while (sis.isReady()) {
+        synchronized (connectionReadLock) {
+            while (isDataAvailable()) {
                 // Fill up the input buffer with as much data as we can
-                int read = sis.read(inputBuffer, writePos,
-                        inputBuffer.length - writePos);
+                int read = fillInputBuffer(inputBuffer, writePos);
                 if (read == 0) {
                     return;
                 }
@@ -135,6 +132,27 @@ public class WsFrame {
     }
 
 
+    /**
+     * Allows sub-classes to control whether the read loop in
+     * {@link #onDataAvailable()} should continue or terminate.
+     *
+     * @return  <code>true</code> if the data source is ready to be read
+     */
+    protected abstract boolean isDataAvailable();
+
+
+    /**
+     * Fill as much of the input buffer as possible (i.e. to the end of the
+     * supplied buffer).
+     *
+     * @param inputBuffer   The input buffer
+     * @param start         The start point
+     * @return  The number of bytes (possibly zero) added to the buffer
+     */
+    protected abstract int fillInputBuffer(byte[] inputBuffer, int start)
+            throws IOException;
+
+
     /**
      * @return <code>true</code> if sufficient data was present to process all
      *         of the initial header

==================================================
WsProtocolHandler.java
new file mode 100644
index 0000000000..70cde7bb67
--- /dev/null
+++ b/java/org/apache/tomcat/websocket/server/WsFrameServer.java
@@ -0,0 +1,46 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.websocket.server;
+
+import java.io.IOException;
+
+import javax.servlet.ServletInputStream;
+
+import org.apache.tomcat.websocket.WsFrameBase;
+import org.apache.tomcat.websocket.WsSession;
+
+public class WsFrameServer extends WsFrameBase {
+
+    private final ServletInputStream sis;
+
+    public WsFrameServer(ServletInputStream sis, WsSession wsSession) {
+        super(wsSession);
+        this.sis = sis;
+    }
+
+    @Override
+    protected boolean isDataAvailable() {
+        return sis.isReady();
+    }
+
+    @Override
+    protected int fillInputBuffer(byte[] inputBuffer, int start)
+            throws IOException {
+        return sis.read(inputBuffer, start,
+                inputBuffer.length - start);
+    }
+}

==================================================
TestWsFrame.java
index ae6626fa92..d01bb36589 100644
--- a/java/org/apache/tomcat/websocket/server/WsProtocolHandler.java
+++ b/java/org/apache/tomcat/websocket/server/WsProtocolHandler.java
@@ -30,7 +30,7 @@ import javax.websocket.CloseReason.CloseCodes;
 import javax.websocket.Endpoint;
 import javax.websocket.EndpointConfiguration;
 
-import org.apache.tomcat.websocket.WsFrame;
+import org.apache.tomcat.websocket.WsFrameBase;
 import org.apache.tomcat.websocket.WsIOException;
 import org.apache.tomcat.websocket.WsSession;
 
@@ -71,7 +71,7 @@ public class WsProtocolHandler implements ProtocolHandler {
         ClassLoader cl = t.getContextClassLoader();
         t.setContextClassLoader(applicationClassLoader);
         try {
-            WsFrame wsFrame = new WsFrame(sis, wsSession);
+            WsFrameBase wsFrame = new WsFrameServer(sis, wsSession);
             sis.setReadListener(new WsReadListener(this, wsFrame, wsSession));
             WsRemoteEndpointServer wsRemoteEndpointServer =
                     new WsRemoteEndpointServer(wsSession, sos);
@@ -100,12 +100,12 @@ public class WsProtocolHandler implements ProtocolHandler {
     private static class WsReadListener implements ReadListener {
 
         private final WsProtocolHandler wsProtocolHandler;
-        private final WsFrame wsFrame;
+        private final WsFrameBase wsFrame;
         private final WsSession wsSession;
 
 
         private WsReadListener(WsProtocolHandler wsProtocolHandler,
-                WsFrame wsFrame, WsSession wsSession) {
+                WsFrameBase wsFrame, WsSession wsSession) {
             this.wsProtocolHandler = wsProtocolHandler;
             this.wsFrame = wsFrame;
             this.wsSession = wsSession;

==================================================
