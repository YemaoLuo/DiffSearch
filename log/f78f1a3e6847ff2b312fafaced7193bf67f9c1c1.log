f78f1a3e6847ff2b312fafaced7193bf67f9c1c1
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=62458
==================================================
Mark Thomas
==================================================
Mon Jun 18 21:06:15 2018 +0000
==================================================
KeyedObjectPool.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=62458
Update the internal fork of Commons Pool to dfef97b (2018-06-18) to pick up some bug fixes and enhancements.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1833768 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ObjectPool.java
index 5b376f7e2b..c9eea993d7 100644
--- a/java/org/apache/tomcat/dbcp/pool2/KeyedObjectPool.java
+++ b/java/org/apache/tomcat/dbcp/pool2/KeyedObjectPool.java
@@ -174,21 +174,21 @@ public interface KeyedObjectPool<K,V> extends Closeable {
      * @param key the key to query
      * @return the number of instances currently borrowed from but not yet
      * returned to the pool corresponding to the given <code>key</code>.
-=     */
+     */
     int getNumActive(K key);
 
     /**
      * Returns the total number of instances currently idle in this pool.
      * Returns a negative value if this information is not available.
      * @return the total number of instances currently idle in this pool.
- =    */
+     */
     int getNumIdle();
 
     /**
-     * Returns the total number of instances current borrowed from this pool but
+     * Returns the total number of instances currently borrowed from this pool but
      * not yet returned. Returns a negative value if this information is not
      * available.
-     * @return the total number of instances current borrowed from this pool but
+     * @return the total number of instances currently borrowed from this pool but
      * not yet returned.
      */
     int getNumActive();

==================================================
PoolUtils.java
index 59c005aaed..69b25e6bfa 100644
--- a/java/org/apache/tomcat/dbcp/pool2/ObjectPool.java
+++ b/java/org/apache/tomcat/dbcp/pool2/ObjectPool.java
@@ -56,6 +56,7 @@ import java.util.NoSuchElementException;
  * @since 2.0
  */
 public interface ObjectPool<T> extends Closeable {
+
     /**
      * Obtains an instance from this pool.
      * <p>
@@ -88,7 +89,7 @@ public interface ObjectPool<T> extends Closeable {
             IllegalStateException;
 
     /**
-     * Return an instance to the pool. By contract, <code>obj</code>
+     * Returns an instance to the pool. By contract, <code>obj</code>
      * <strong>must</strong> have been obtained using {@link #borrowObject()} or
      * a related method as defined in an implementation or sub-interface.
      *
@@ -122,7 +123,7 @@ public interface ObjectPool<T> extends Closeable {
     void invalidateObject(T obj) throws Exception;
 
     /**
-     * Create an object using the {@link PooledObjectFactory factory} or other
+     * Creates an object using the {@link PooledObjectFactory factory} or other
      * implementation dependent mechanism, passivate it, and then place it in
      * the idle object pool. <code>addObject</code> is useful for "pre-loading"
      * a pool with idle objects. (Optional operation).
@@ -138,7 +139,7 @@ public interface ObjectPool<T> extends Closeable {
             UnsupportedOperationException;
 
     /**
-     * Return the number of instances currently idle in this pool. This may be
+     * Returns the number of instances currently idle in this pool. This may be
      * considered an approximation of the number of objects that can be
      * {@link #borrowObject borrowed} without creating any new instances.
      * Returns a negative value if this information is not available.
@@ -147,7 +148,7 @@ public interface ObjectPool<T> extends Closeable {
     int getNumIdle();
 
     /**
-     * Return the number of instances currently borrowed from this pool. Returns
+     * Returns the number of instances currently borrowed from this pool. Returns
      * a negative value if this information is not available.
      * @return the number of instances currently borrowed from this pool.
      */
@@ -166,7 +167,7 @@ public interface ObjectPool<T> extends Closeable {
     void clear() throws Exception, UnsupportedOperationException;
 
     /**
-     * Close this pool, and free any resources associated with it.
+     * Closes this pool, and free any resources associated with it.
      * <p>
      * Calling {@link #addObject} or {@link #borrowObject} after invoking this
      * method on a pool will cause them to throw an {@link IllegalStateException}.

==================================================
PooledObject.java
index cec1f743bb..4fb0abab76 100644
--- a/java/org/apache/tomcat/dbcp/pool2/PoolUtils.java
+++ b/java/org/apache/tomcat/dbcp/pool2/PoolUtils.java
@@ -201,7 +201,7 @@ public final class PoolUtils {
     }
 
     /**
-     * Call <code>addObject()</code> on <code>pool</code> <code>count</code>
+     * Calls {@link ObjectPool#addObject()} on <code>pool</code> <code>count</code>
      * number of times.
      *
      * @param pool
@@ -225,7 +225,7 @@ public final class PoolUtils {
     }
 
     /**
-     * Call <code>addObject(Object)</code> on <code>keyedPool</code> with
+     * Calls {@link KeyedObjectPool#addObject(Object)} on <code>keyedPool</code> with
      * <code>key</code> <code>count</code> number of times.
      *
      * @param keyedPool
@@ -257,7 +257,7 @@ public final class PoolUtils {
     }
 
     /**
-     * Call <code>addObject(Object)</code> on <code>keyedPool</code> with each
+     * Calls {@link KeyedObjectPool#addObject(Object)} on <code>keyedPool</code> with each
      * key in <code>keys</code> for <code>count</code> number of times. This has
      * the same effect as calling {@link #prefill(KeyedObjectPool, Object, int)}
      * for each key in the <code>keys</code> collection.
@@ -550,7 +550,7 @@ public final class PoolUtils {
     }
 
     /**
-     * Get the <code>Timer</code> for checking keyedPool's idle count.
+     * Gets the <code>Timer</code> for checking keyedPool's idle count.
      *
      * @return the {@link Timer} for checking keyedPool's idle count.
      */
@@ -639,6 +639,7 @@ public final class PoolUtils {
      */
     private static final class KeyedObjectPoolMinIdleTimerTask<K, V> extends
             TimerTask {
+
         /** Minimum number of idle instances. Not the same as pool.getMinIdle(). */
         private final int minIdle;
 
@@ -649,7 +650,7 @@ public final class PoolUtils {
         private final KeyedObjectPool<K, V> keyedPool;
 
         /**
-         * Create a new KeyedObjecPoolMinIdleTimerTask.
+         * Creates a new KeyedObjecPoolMinIdleTimerTask.
          *
          * @param keyedPool
          *            keyed object pool
@@ -735,7 +736,7 @@ public final class PoolUtils {
         private final ObjectPool<T> pool;
 
         /**
-         * Create a new SynchronizedObjectPool wrapping the given pool.
+         * Creates a new SynchronizedObjectPool wrapping the given pool.
          *
          * @param pool
          *            the ObjectPool to be "wrapped" in a synchronized
@@ -912,7 +913,7 @@ public final class PoolUtils {
         private final KeyedObjectPool<K, V> keyedPool;
 
         /**
-         * Create a new SynchronizedKeyedObjectPool wrapping the given pool
+         * Creates a new SynchronizedKeyedObjectPool wrapping the given pool
          *
          * @param keyedPool
          *            KeyedObjectPool to wrap
@@ -1118,6 +1119,7 @@ public final class PoolUtils {
      */
     private static final class SynchronizedPooledObjectFactory<T> implements
             PooledObjectFactory<T> {
+
         /** Synchronization lock */
         private final WriteLock writeLock = new ReentrantReadWriteLock().writeLock();
 
@@ -1125,7 +1127,7 @@ public final class PoolUtils {
         private final PooledObjectFactory<T> factory;
 
         /**
-         * Create a SynchronizedPoolableObjectFactory wrapping the given
+         * Creates a SynchronizedPoolableObjectFactory wrapping the given
          * factory.
          *
          * @param factory
@@ -1234,6 +1236,7 @@ public final class PoolUtils {
      */
     private static final class SynchronizedKeyedPooledObjectFactory<K, V>
             implements KeyedPooledObjectFactory<K, V> {
+
         /** Synchronization lock */
         private final WriteLock writeLock = new ReentrantReadWriteLock().writeLock();
 
@@ -1241,7 +1244,7 @@ public final class PoolUtils {
         private final KeyedPooledObjectFactory<K, V> keyedFactory;
 
         /**
-         * Create a SynchronizedKeyedPoolableObjectFactory wrapping the given
+         * Creates a SynchronizedKeyedPoolableObjectFactory wrapping the given
          * factory.
          *
          * @param keyedFactory
@@ -1358,7 +1361,7 @@ public final class PoolUtils {
         private transient volatile int idleHighWaterMark;
 
         /**
-         * Create a new ErodingFactor with the given erosion factor.
+         * Creates a new ErodingFactor with the given erosion factor.
          *
          * @param factor
          *            erosion factor
@@ -1418,6 +1421,7 @@ public final class PoolUtils {
      * @param <T> type of objects in the pool
      */
     private static class ErodingObjectPool<T> implements ObjectPool<T> {
+
         /** Underlying object pool */
         private final ObjectPool<T> pool;
 
@@ -1425,7 +1429,7 @@ public final class PoolUtils {
         private final ErodingFactor factor;
 
         /**
-         * Create an ErodingObjectPool wrapping the given pool using the
+         * Creates an ErodingObjectPool wrapping the given pool using the
          * specified erosion factor.
          *
          * @param pool
@@ -1563,6 +1567,7 @@ public final class PoolUtils {
      */
     private static class ErodingKeyedObjectPool<K, V> implements
             KeyedObjectPool<K, V> {
+
         /** Underlying pool */
         private final KeyedObjectPool<K, V> keyedPool;
 
@@ -1570,7 +1575,7 @@ public final class PoolUtils {
         private final ErodingFactor erodingFactor;
 
         /**
-         * Create an ErodingObjectPool wrapping the given pool using the
+         * Creates an ErodingObjectPool wrapping the given pool using the
          * specified erosion factor.
          *
          * @param keyedPool
@@ -1586,7 +1591,7 @@ public final class PoolUtils {
         }
 
         /**
-         * Create an ErodingObjectPool wrapping the given pool using the
+         * Creates an ErodingObjectPool wrapping the given pool using the
          * specified erosion factor.
          *
          * @param keyedPool
@@ -1776,6 +1781,7 @@ public final class PoolUtils {
      */
     private static final class ErodingPerKeyKeyedObjectPool<K, V> extends
             ErodingKeyedObjectPool<K, V> {
+
         /** Erosion factor - same for all pools */
         private final float factor;
 
@@ -1783,7 +1789,7 @@ public final class PoolUtils {
         private final Map<K, ErodingFactor> factors = Collections.synchronizedMap(new HashMap<K, ErodingFactor>());
 
         /**
-         * Create a new ErordingPerKeyKeyedObjectPool decorating the given keyed
+         * Creates a new ErordingPerKeyKeyedObjectPool decorating the given keyed
          * pool with the specified erosion factor.
          *
          * @param keyedPool
@@ -1821,4 +1827,4 @@ public final class PoolUtils {
                     ", keyedPool=" + getKeyedPool() + '}';
         }
     }
-}
\ No newline at end of file
+}

==================================================
PooledObjectFactory.java
index 1e3ba52ac3..d2c5625621 100644
--- a/java/org/apache/tomcat/dbcp/pool2/PooledObject.java
+++ b/java/org/apache/tomcat/dbcp/pool2/PooledObject.java
@@ -32,7 +32,7 @@ import java.util.Deque;
 public interface PooledObject<T> extends Comparable<PooledObject<T>> {
 
     /**
-     * Obtain the underlying object that is wrapped by this instance of
+     * Obtains the underlying object that is wrapped by this instance of
      * {@link PooledObject}.
      *
      * @return The wrapped object
@@ -40,7 +40,7 @@ public interface PooledObject<T> extends Comparable<PooledObject<T>> {
     T getObject();
 
     /**
-     * Obtain the time (using the same basis as
+     * Obtains the time (using the same basis as
      * {@link System#currentTimeMillis()}) that this object was created.
      *
      * @return The creation time for the wrapped object
@@ -48,7 +48,7 @@ public interface PooledObject<T> extends Comparable<PooledObject<T>> {
     long getCreateTime();
 
     /**
-     * Obtain the time in milliseconds that this object last spent in the
+     * Obtains the time in milliseconds that this object last spent in the
      * active state (it may still be active in which case subsequent calls will
      * return an increased value).
      *
@@ -57,7 +57,7 @@ public interface PooledObject<T> extends Comparable<PooledObject<T>> {
     long getActiveTimeMillis();
 
     /**
-     * Obtain the time in milliseconds that this object last spend in the
+     * Obtains the time in milliseconds that this object last spend in the
      * idle state (it may still be idle in which case subsequent calls will
      * return an increased value).
      *
@@ -66,21 +66,21 @@ public interface PooledObject<T> extends Comparable<PooledObject<T>> {
     long getIdleTimeMillis();
 
     /**
-     * Obtain the time the wrapped object was last borrowed.
+     * Obtains the time the wrapped object was last borrowed.
      *
      * @return The time the object was last borrowed
      */
     long getLastBorrowTime();
 
     /**
-     * Obtain the time the wrapped object was last returned.
+     * Obtains the time the wrapped object was last returned.
      *
      * @return The time the object was last returned
      */
     long getLastReturnTime();
 
     /**
-     * Return an estimate of the last time this object was used.  If the class
+     * Returns an estimate of the last time this object was used.  If the class
      * of the pooled object implements {@link TrackedUse}, what is returned is
      * the maximum of {@link TrackedUse#getLastUsed()} and
      * {@link #getLastBorrowTime()}; otherwise this method gives the same
@@ -118,7 +118,7 @@ public interface PooledObject<T> extends Comparable<PooledObject<T>> {
     String toString();
 
     /**
-     * Attempt to place the pooled object in the
+     * Attempts to place the pooled object in the
      * {@link PooledObjectState#EVICTION} state.
      *
      * @return <code>true</code> if the object was placed in the

==================================================
AbandonedConfig.java
index 89bd55990a..552706d98c 100644
--- a/java/org/apache/tomcat/dbcp/pool2/PooledObjectFactory.java
+++ b/java/org/apache/tomcat/dbcp/pool2/PooledObjectFactory.java
@@ -69,8 +69,9 @@ package org.apache.tomcat.dbcp.pool2;
  * @since 2.0
  */
 public interface PooledObjectFactory<T> {
+
   /**
-   * Create an instance that can be served by the pool and wrap it in a
+   * Creates an instance that can be served by the pool and wrap it in a
    * {@link PooledObject} to be managed by the pool.
    *
    * @return a {@code PooledObject} wrapping an instance that can be served by the pool
@@ -112,7 +113,7 @@ public interface PooledObjectFactory<T> {
   boolean validateObject(PooledObject<T> p);
 
   /**
-   * Reinitialize an instance to be returned by the pool.
+   * Reinitializes an instance to be returned by the pool.
    *
    * @param p a {@code PooledObject} wrapping the instance to be activated
    *
@@ -124,7 +125,7 @@ public interface PooledObjectFactory<T> {
   void activateObject(PooledObject<T> p) throws Exception;
 
   /**
-   * Uninitialize an instance to be returned to the idle object pool.
+   * Uninitializes an instance to be returned to the idle object pool.
    *
    * @param p a {@code PooledObject} wrapping the instance to be passivated
    *

==================================================
BaseGenericObjectPool.java
index 19ab41c33c..31eeb328ab 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/AbandonedConfig.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/AbandonedConfig.java
@@ -200,7 +200,7 @@ public class AbandonedConfig {
      * @see #getRequireFullStackTrace()
      * @since 2.5
      */
-    public void setRequireFullStackTrace(boolean requireFullStackTrace) {
+    public void setRequireFullStackTrace(final boolean requireFullStackTrace) {
         this.requireFullStackTrace = requireFullStackTrace;
     }
 

==================================================
BaseObjectPoolConfig.java
index 6e89e6aa4b..b5e29751ac 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/BaseGenericObjectPool.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/BaseGenericObjectPool.java
@@ -21,10 +21,12 @@ import java.io.StringWriter;
 import java.io.Writer;
 import java.lang.management.ManagementFactory;
 import java.lang.ref.WeakReference;
+import java.lang.reflect.InvocationTargetException;
 import java.util.Arrays;
 import java.util.Deque;
 import java.util.Iterator;
 import java.util.TimerTask;
+import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
 
@@ -38,6 +40,7 @@ import javax.management.ObjectName;
 
 import org.apache.tomcat.dbcp.pool2.BaseObject;
 import org.apache.tomcat.dbcp.pool2.PooledObject;
+import org.apache.tomcat.dbcp.pool2.PooledObjectState;
 import org.apache.tomcat.dbcp.pool2.SwallowedExceptionListener;
 
 /**
@@ -60,6 +63,8 @@ public abstract class BaseGenericObjectPool<T> extends BaseObject {
      */
     public static final int MEAN_TIMING_STATS_CACHE_SIZE = 100;
 
+    private static final String EVICTION_POLICY_TYPE_NAME = EvictionPolicy.class.getName();
+
     // Configuration attributes
     private volatile int maxTotal =
             GenericKeyedObjectPoolConfig.DEFAULT_MAX_TOTAL;
@@ -106,7 +111,7 @@ public abstract class BaseGenericObjectPool<T> extends BaseObject {
 
 
     // Monitoring (primarily JMX) attributes
-    private final ObjectName oname;
+    private final ObjectName objectName;
     private final String creationStackTrace;
     private final AtomicLong borrowedCount = new AtomicLong(0);
     private final AtomicLong returnedCount = new AtomicLong(0);
@@ -130,12 +135,12 @@ public abstract class BaseGenericObjectPool<T> extends BaseObject {
      *                      overridden by the config
      * @param jmxNamePrefix Prefix to be used for JMX name for the new pool
      */
-    public BaseGenericObjectPool(final BaseObjectPoolConfig config,
+    public BaseGenericObjectPool(final BaseObjectPoolConfig<T> config,
             final String jmxNameBase, final String jmxNamePrefix) {
         if (config.getJmxEnabled()) {
-            this.oname = jmxRegister(config, jmxNameBase, jmxNamePrefix);
+            this.objectName = jmxRegister(config, jmxNameBase, jmxNamePrefix);
         } else {
-            this.oname = null;
+            this.objectName = null;
         }
 
         // Populate the creation stack trace
@@ -446,9 +451,11 @@ public abstract class BaseGenericObjectPool<T> extends BaseObject {
     }
 
     /**
-     * Sets the number of milliseconds to sleep between runs of the idle
-     * object evictor thread. When non-positive, no idle object evictor thread
-     * will be run.
+     * Sets the number of milliseconds to sleep between runs of the idle object evictor thread.
+     * <ul>
+     * <li>When positive, the idle object evictor thread starts.</li>
+     * <li>When non-positive, no idle object evictor thread runs.</li>
+     * </ul>
      *
      * @param timeBetweenEvictionRunsMillis
      *            number of milliseconds to sleep between evictor runs
@@ -588,47 +595,75 @@ public abstract class BaseGenericObjectPool<T> extends BaseObject {
     }
 
     /**
-     * Sets the name of the {@link EvictionPolicy} implementation that is
-     * used by this pool. The Pool will attempt to load the class using the
-     * thread context class loader. If that fails, the Pool will attempt to load
-     * the class using the class loader that loaded this class.
+     * Sets the eviction policy for this pool.
+     *
+     * @param evictionPolicy
+     *            the eviction policy for this pool.
+     * @since 2.6.0
+     */
+    public void setEvictionPolicy(final EvictionPolicy<T> evictionPolicy) {
+        this.evictionPolicy = evictionPolicy;
+    }
+
+    /**
+     * Sets the name of the {@link EvictionPolicy} implementation that is used by this pool. The Pool will attempt to
+     * load the class using the given class loader. If that fails, use the class loader for the {@link EvictionPolicy}
+     * interface.
      *
-     * @param evictionPolicyClassName   the fully qualified class name of the
-     *                                  new eviction policy
+     * @param evictionPolicyClassName
+     *            the fully qualified class name of the new eviction policy
+     * @param classLoader
+     *            the class loader to load the given {@code evictionPolicyClassName}.
      *
      * @see #getEvictionPolicyClassName()
+     * @since 2.6.0 If loading the class using the given class loader fails, use the class loader for the
+     *        {@link EvictionPolicy} interface.
      */
-    public final void setEvictionPolicyClassName(
-            final String evictionPolicyClassName) {
+    public final void setEvictionPolicyClassName(final String evictionPolicyClassName, final ClassLoader classLoader) {
+        // Getting epClass here and now best matches the caller's environment
+        final Class<?> epClass = EvictionPolicy.class;
+        final ClassLoader epClassLoader = epClass.getClassLoader();
         try {
-            Class<?> clazz;
             try {
-                clazz = Class.forName(evictionPolicyClassName, true,
-                        Thread.currentThread().getContextClassLoader());
-            } catch (final ClassNotFoundException e) {
-                clazz = Class.forName(evictionPolicyClassName);
-            }
-            final Object policy = clazz.getConstructor().newInstance();
-            if (policy instanceof EvictionPolicy<?>) {
-                @SuppressWarnings("unchecked") // safe, because we just checked the class
-                final
-                EvictionPolicy<T> evicPolicy = (EvictionPolicy<T>) policy;
-                this.evictionPolicy = evicPolicy;
-            } else {
-                throw new IllegalArgumentException("[" + evictionPolicyClassName +
-                        "] does not implement EvictionPolicy");
+                setEvictionPolicy(evictionPolicyClassName, classLoader);
+            } catch (final ClassCastException | ClassNotFoundException e) {
+                setEvictionPolicy(evictionPolicyClassName, epClassLoader);
             }
-        } catch (final ClassNotFoundException e) {
-            throw new IllegalArgumentException(
-                    "Unable to create EvictionPolicy instance of type " +
-                    evictionPolicyClassName, e);
-        } catch (final ReflectiveOperationException e) {
-            throw new IllegalArgumentException(
-                    "Unable to create EvictionPolicy instance of type " +
-                    evictionPolicyClassName, e);
+        } catch (final ClassCastException e) {
+            throw new IllegalArgumentException("Class " + evictionPolicyClassName + " from class loaders ["
+                    + classLoader + ", " + epClassLoader + "] do not implement " + EVICTION_POLICY_TYPE_NAME);
+        } catch (final ClassNotFoundException | InstantiationException | IllegalAccessException
+                | InvocationTargetException | NoSuchMethodException e) {
+            final String exMessage = "Unable to create " + EVICTION_POLICY_TYPE_NAME + " instance of type "
+                    + evictionPolicyClassName;
+            throw new IllegalArgumentException(exMessage, e);
         }
     }
 
+    @SuppressWarnings("unchecked")
+    private void setEvictionPolicy(final String className, final ClassLoader classLoader)
+            throws ClassNotFoundException, InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {
+        final Class<?> clazz = Class.forName(className, true, classLoader);
+        final Object policy = clazz.getConstructor().newInstance();
+        this.evictionPolicy = (EvictionPolicy<T>) policy;
+    }
+
+    /**
+     * Sets the name of the {@link EvictionPolicy} implementation that is used by this pool. The Pool will attempt to
+     * load the class using the thread context class loader. If that fails, the use the class loader for the
+     * {@link EvictionPolicy} interface.
+     *
+     * @param evictionPolicyClassName
+     *            the fully qualified class name of the new eviction policy
+     *
+     * @see #getEvictionPolicyClassName()
+     * @since 2.6.0 If loading the class using the thread context class loader fails, use the class loader for the
+     *        {@link EvictionPolicy} interface.
+     */
+    public final void setEvictionPolicyClassName(final String evictionPolicyClassName) {
+        setEvictionPolicyClassName(evictionPolicyClassName, Thread.currentThread().getContextClassLoader());
+    }
+
     /**
      * Gets the timeout that will be used when waiting for the Evictor to
      * shutdown if this pool is closed and it is the only pool still using the
@@ -686,8 +721,9 @@ public abstract class BaseGenericObjectPool<T> extends BaseObject {
      *
      * @return the eviction policy
      * @since 2.4
+     * @since 2.6.0 Changed access from protected to public.
      */
-    protected EvictionPolicy<T> getEvictionPolicy() {
+    public EvictionPolicy<T> getEvictionPolicy() {
         return evictionPolicy;
     }
 
@@ -742,7 +778,7 @@ public abstract class BaseGenericObjectPool<T> extends BaseObject {
      * @return the JMX name
      */
     public final ObjectName getJmxName() {
-        return oname;
+        return objectName;
     }
 
     /**
@@ -883,9 +919,9 @@ public abstract class BaseGenericObjectPool<T> extends BaseObject {
      * Swallows an exception and notifies the configured listener for swallowed
      * exceptions queue.
      *
-     * @param e exception to be swallowed
+     * @param swallowException exception to be swallowed
      */
-    final void swallowException(final Exception e) {
+    final void swallowException(final Exception swallowException) {
         final SwallowedExceptionListener listener = getSwallowedExceptionListener();
 
         if (listener == null) {
@@ -893,11 +929,9 @@ public abstract class BaseGenericObjectPool<T> extends BaseObject {
         }
 
         try {
-            listener.onSwallowException(e);
-        } catch (final OutOfMemoryError oome) {
-            throw oome;
-        } catch (final VirtualMachineError vme) {
-            throw vme;
+            listener.onSwallowException(swallowException);
+        } catch (final VirtualMachineError e) {
+            throw e;
         } catch (final Throwable t) {
             // Ignore. Enjoy the irony.
         }
@@ -933,17 +967,30 @@ public abstract class BaseGenericObjectPool<T> extends BaseObject {
         activeTimes.add(activeTime);
     }
 
+    /**
+     * Marks the object as returning to the pool.
+     * @param pooledObject instance to return to the keyed pool
+     */
+    protected void markReturningState(PooledObject<T> pooledObject) {
+        synchronized(pooledObject) {
+            final PooledObjectState state = pooledObject.getState();
+            if (state != PooledObjectState.ALLOCATED) {
+                throw new IllegalStateException(
+                        "Object has already been returned to this pool or is invalid");
+            }
+            pooledObject.markReturning(); // Keep from being marked abandoned
+        }
+    }
+
     /**
      * Unregisters this pool's MBean.
      */
     final void jmxUnregister() {
-        if (oname != null) {
+        if (objectName != null) {
             try {
                 ManagementFactory.getPlatformMBeanServer().unregisterMBean(
-                        oname);
-            } catch (final MBeanRegistrationException e) {
-                swallowException(e);
-            } catch (final InstanceNotFoundException e) {
+                        objectName);
+            } catch (final MBeanRegistrationException | InstanceNotFoundException e) {
                 swallowException(e);
             }
         }
@@ -962,7 +1009,7 @@ public abstract class BaseGenericObjectPool<T> extends BaseObject {
      * @param jmxNamePrefix name prefix
      * @return registered ObjectName, null if registration fails
      */
-    private ObjectName jmxRegister(final BaseObjectPoolConfig config,
+    private ObjectName jmxRegister(final BaseObjectPoolConfig<T> config,
             final String jmxNameBase, String jmxNamePrefix) {
         ObjectName objectName = null;
         final MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
@@ -999,10 +1046,7 @@ public abstract class BaseGenericObjectPool<T> extends BaseObject {
             } catch (final InstanceAlreadyExistsException e) {
                 // Increment the index and try again
                 i++;
-            } catch (final MBeanRegistrationException e) {
-                // Shouldn't happen. Skip registration if it does.
-                registered = true;
-            } catch (final NotCompliantMBeanException e) {
+            } catch (final MBeanRegistrationException | NotCompliantMBeanException e) {
                 // Shouldn't happen. Skip registration if it does.
                 registered = true;
             }
@@ -1032,7 +1076,10 @@ public abstract class BaseGenericObjectPool<T> extends BaseObject {
      *
      * @see GenericKeyedObjectPool#setTimeBetweenEvictionRunsMillis
      */
-    class Evictor extends TimerTask {
+    class Evictor implements Runnable {
+
+        private ScheduledFuture<?> scheduledFuture;
+
         /**
          * Run pool maintenance.  Evict objects qualifying for eviction and then
          * ensure that the minimum number of idle instances are available.
@@ -1080,6 +1127,16 @@ public abstract class BaseGenericObjectPool<T> extends BaseObject {
                 Thread.currentThread().setContextClassLoader(savedClassLoader);
             }
         }
+
+
+        void setScheduledFuture(final ScheduledFuture<?> scheduledFuture) {
+            this.scheduledFuture = scheduledFuture;
+        }
+
+
+        void cancel() {
+            scheduledFuture.cancel(false);
+        }
     }
 
     /**
@@ -1296,7 +1353,7 @@ public abstract class BaseGenericObjectPool<T> extends BaseObject {
         builder.append(", factoryClassLoader=");
         builder.append(factoryClassLoader);
         builder.append(", oname=");
-        builder.append(oname);
+        builder.append(objectName);
         builder.append(", creationStackTrace=");
         builder.append(creationStackTrace);
         builder.append(", borrowedCount=");
@@ -1323,4 +1380,5 @@ public abstract class BaseGenericObjectPool<T> extends BaseObject {
         builder.append(swallowedExceptionListener);
     }
 
+
 }

==================================================
EvictionPolicy.java
index 55287168d8..7814c6d51e 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/BaseObjectPoolConfig.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/BaseObjectPoolConfig.java
@@ -24,10 +24,12 @@ import org.apache.tomcat.dbcp.pool2.BaseObject;
  * defined by the public constants.
  * <p>
  * This class is not thread-safe.
+ * </p>
  *
+ * @param <T> Type of element pooled.
  * @since 2.0
  */
-public abstract class BaseObjectPoolConfig extends BaseObject implements Cloneable {
+public abstract class BaseObjectPoolConfig<T> extends BaseObject implements Cloneable {
 
     /**
      * The default value for the {@code lifo} configuration attribute.
@@ -159,9 +161,7 @@ public abstract class BaseObjectPoolConfig extends BaseObject implements Cloneab
      * @see GenericObjectPool#getEvictionPolicyClassName()
      * @see GenericKeyedObjectPool#getEvictionPolicyClassName()
      */
-    public static final String DEFAULT_EVICTION_POLICY_CLASS_NAME =
-            "org.apache.tomcat.dbcp.pool2.impl.DefaultEvictionPolicy";
-
+    public static final String DEFAULT_EVICTION_POLICY_CLASS_NAME = DefaultEvictionPolicy.class.getName();
 
     private boolean lifo = DEFAULT_LIFO;
 
@@ -181,6 +181,8 @@ public abstract class BaseObjectPoolConfig extends BaseObject implements Cloneab
     private int numTestsPerEvictionRun =
             DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
 
+    private EvictionPolicy<T> evictionPolicy = null; // Only 2.6.0 applications set this
+
     private String evictionPolicyClassName = DEFAULT_EVICTION_POLICY_CLASS_NAME;
 
     private boolean testOnCreate = DEFAULT_TEST_ON_CREATE;
@@ -552,6 +554,21 @@ public abstract class BaseObjectPoolConfig extends BaseObject implements Cloneab
         this.timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
     }
 
+    /**
+     * Get the value for the {@code evictionPolicyClass} configuration
+     * attribute for pools created with this configuration instance.
+     *
+     * @return  The current setting of {@code evictionPolicyClass} for this
+     *          configuration instance
+     *
+     * @see GenericObjectPool#getEvictionPolicy()
+     * @see GenericKeyedObjectPool#getEvictionPolicy()
+     * @since 2.6.0
+     */
+    public EvictionPolicy<T> getEvictionPolicy() {
+        return evictionPolicy;
+    }
+
     /**
      * Get the value for the {@code evictionPolicyClassName} configuration
      * attribute for pools created with this configuration instance.
@@ -566,6 +583,21 @@ public abstract class BaseObjectPoolConfig extends BaseObject implements Cloneab
         return evictionPolicyClassName;
     }
 
+    /**
+     * Set the value for the {@code evictionPolicyClass} configuration
+     * attribute for pools created with this configuration instance.
+     *
+     * @param evictionPolicy The new setting of
+     *        {@code evictionPolicyClass} for this configuration instance
+     *
+     * @see GenericObjectPool#getEvictionPolicy()
+     * @see GenericKeyedObjectPool#getEvictionPolicy()
+     * @since 2.6.0
+     */
+    public void setEvictionPolicy(final EvictionPolicy<T> evictionPolicy) {
+        this.evictionPolicy = evictionPolicy;
+    }
+
     /**
      * Set the value for the {@code evictionPolicyClassName} configuration
      * attribute for pools created with this configuration instance.

==================================================
EvictionTimer.java
index 3c91933a14..e97ffa542d 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/EvictionPolicy.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/EvictionPolicy.java
@@ -40,6 +40,5 @@ public interface EvictionPolicy<T> {
      * @return <code>true</code> if the object should be evicted, otherwise
      *             <code>false</code>
      */
-    boolean evict(EvictionConfig config, PooledObject<T> underTest,
-            int idleCount);
+    boolean evict(EvictionConfig config, PooledObject<T> underTest, int idleCount);
 }

==================================================
GenericKeyedObjectPool.java
index 27036276cf..d7cad987c3 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/EvictionTimer.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/EvictionTimer.java
@@ -18,7 +18,7 @@ package org.apache.tomcat.dbcp.pool2.impl;
 
 import java.security.AccessController;
 import java.security.PrivilegedAction;
-import java.util.TimerTask;
+import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.TimeUnit;
@@ -44,9 +44,6 @@ class EvictionTimer {
     /** Executor instance */
     private static ScheduledThreadPoolExecutor executor; //@GuardedBy("EvictionTimer.class")
 
-    /** Static usage count tracker */
-    private static int usageCount; //@GuardedBy("EvictionTimer.class")
-
     /** Prevent instantiation */
     private EvictionTimer() {
         // Hide the default constructor
@@ -66,19 +63,22 @@ class EvictionTimer {
 
     /**
      * Add the specified eviction task to the timer. Tasks that are added with a
-     * call to this method *must* call {@link #cancel(TimerTask,long,TimeUnit)}
+     * call to this method *must* call {@link #cancel(BaseGenericObjectPool.Evictor,long,TimeUnit)}
      * to cancel the task to prevent memory and/or thread leaks in application
      * server environments.
      * @param task      Task to be scheduled
      * @param delay     Delay in milliseconds before task is executed
      * @param period    Time in milliseconds between executions
      */
-    static synchronized void schedule(final Runnable task, final long delay, final long period) {
+    static synchronized void schedule(
+            final BaseGenericObjectPool<?>.Evictor task, final long delay, final long period) {
         if (null == executor) {
             executor = new ScheduledThreadPoolExecutor(1, new EvictorThreadFactory());
+            executor.setRemoveOnCancelPolicy(true);
         }
-        usageCount++;
-        executor.scheduleWithFixedDelay(task, delay, period, TimeUnit.MILLISECONDS);
+        final ScheduledFuture<?> scheduledFuture =
+                executor.scheduleWithFixedDelay(task, delay, period, TimeUnit.MILLISECONDS);
+        task.setScheduledFuture(scheduledFuture);
     }
 
     /**
@@ -90,10 +90,10 @@ class EvictionTimer {
      *                  terminate?
      * @param unit      The units for the specified timeout
      */
-    static synchronized void cancel(final TimerTask task, final long timeout, final TimeUnit unit) {
+    static synchronized void cancel(
+            final BaseGenericObjectPool<?>.Evictor task, final long timeout, final TimeUnit unit) {
         task.cancel();
-        usageCount--;
-        if (usageCount == 0) {
+        if (executor.getQueue().size() == 0) {
             executor.shutdown();
             try {
                 executor.awaitTermination(timeout, unit);

==================================================
GenericKeyedObjectPoolConfig.java
index eb4b3f6c91..3844294dd0 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/GenericKeyedObjectPool.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/GenericKeyedObjectPool.java
@@ -85,7 +85,7 @@ public class GenericKeyedObjectPool<K,T> extends BaseGenericObjectPool<T>
      * @param factory the factory to be used to create entries
      */
     public GenericKeyedObjectPool(final KeyedPooledObjectFactory<K,T> factory) {
-        this(factory, new GenericKeyedObjectPoolConfig());
+        this(factory, new GenericKeyedObjectPoolConfig<T>());
     }
 
     /**
@@ -98,8 +98,8 @@ public class GenericKeyedObjectPool<K,T> extends BaseGenericObjectPool<T>
      *                  the configuration object will not be reflected in the
      *                  pool.
      */
-    public GenericKeyedObjectPool(final KeyedPooledObjectFactory<K,T> factory,
-            final GenericKeyedObjectPoolConfig config) {
+    public GenericKeyedObjectPool(final KeyedPooledObjectFactory<K, T> factory,
+            final GenericKeyedObjectPoolConfig<T> config) {
 
         super(config, ONAME_BASE, config.getJmxNamePrefix());
 
@@ -111,8 +111,6 @@ public class GenericKeyedObjectPool<K,T> extends BaseGenericObjectPool<T>
         this.fairness = config.getFairness();
 
         setConfig(config);
-
-        startEvictor(getTimeBetweenEvictionRunsMillis());
     }
 
     /**
@@ -237,7 +235,7 @@ public class GenericKeyedObjectPool<K,T> extends BaseGenericObjectPool<T>
      *
      * @see GenericKeyedObjectPoolConfig
      */
-    public void setConfig(final GenericKeyedObjectPoolConfig conf) {
+    public void setConfig(final GenericKeyedObjectPoolConfig<T> conf) {
         setLifo(conf.getLifo());
         setMaxIdlePerKey(conf.getMaxIdlePerKey());
         setMaxTotalPerKey(conf.getMaxTotalPerKey());
@@ -251,11 +249,16 @@ public class GenericKeyedObjectPool<K,T> extends BaseGenericObjectPool<T>
         setTestWhileIdle(conf.getTestWhileIdle());
         setNumTestsPerEvictionRun(conf.getNumTestsPerEvictionRun());
         setMinEvictableIdleTimeMillis(conf.getMinEvictableIdleTimeMillis());
-        setSoftMinEvictableIdleTimeMillis(
-                conf.getSoftMinEvictableIdleTimeMillis());
-        setTimeBetweenEvictionRunsMillis(
-                conf.getTimeBetweenEvictionRunsMillis());
-        setEvictionPolicyClassName(conf.getEvictionPolicyClassName());
+        setSoftMinEvictableIdleTimeMillis(conf.getSoftMinEvictableIdleTimeMillis());
+        setTimeBetweenEvictionRunsMillis(conf.getTimeBetweenEvictionRunsMillis());
+        final EvictionPolicy<T> policy = conf.getEvictionPolicy();
+        if (policy == null) {
+            // Use the class name (pre-2.6.0 compatible)
+            setEvictionPolicyClassName(conf.getEvictionPolicyClassName());
+        } else {
+            // Otherwise, use the class (2.6.0 feature)
+            setEvictionPolicy(policy);
+        }
         setEvictorShutdownTimeoutMillis(conf.getEvictorShutdownTimeoutMillis());
     }
 
@@ -470,14 +473,7 @@ public class GenericKeyedObjectPool<K,T> extends BaseGenericObjectPool<T>
                     "Returned object not currently part of this pool");
         }
 
-        synchronized(p) {
-            final PooledObjectState state = p.getState();
-            if (state != PooledObjectState.ALLOCATED) {
-                throw new IllegalStateException(
-                        "Object has already been returned to this pool or is invalid");
-            }
-            p.markReturning(); // Keep from being marked abandoned (once GKOP does this)
-        }
+        markReturningState(p);
 
         final long activeTime = p.getActiveTimeMillis();
 
@@ -489,13 +485,7 @@ public class GenericKeyedObjectPool<K,T> extends BaseGenericObjectPool<T>
                     } catch (final Exception e) {
                         swallowException(e);
                     }
-                    if (objectDeque.idleObjects.hasTakeWaiters()) {
-                        try {
-                            addObject(key);
-                        } catch (final Exception e) {
-                            swallowException(e);
-                        }
-                    }
+                    whenWaitersAddObject(key, objectDeque.idleObjects);
                     return;
                 }
             }
@@ -509,13 +499,7 @@ public class GenericKeyedObjectPool<K,T> extends BaseGenericObjectPool<T>
                 } catch (final Exception e) {
                     swallowException(e);
                 }
-                if (objectDeque.idleObjects.hasTakeWaiters()) {
-                    try {
-                        addObject(key);
-                    } catch (final Exception e) {
-                        swallowException(e);
-                    }
-                }
+                whenWaitersAddObject(key, objectDeque.idleObjects);
                 return;
             }
 
@@ -555,6 +539,20 @@ public class GenericKeyedObjectPool<K,T> extends BaseGenericObjectPool<T>
         }
     }
 
+    /**
+     * Whether there is at least one thread waiting on this deque, add an pool object.
+     * @param key
+     * @param idleObjects
+     */
+    private void whenWaitersAddObject(final K key, LinkedBlockingDeque<PooledObject<T>> idleObjects) {
+        if (idleObjects.hasTakeWaiters()) {
+            try {
+                addObject(key);
+            } catch (final Exception e) {
+                swallowException(e);
+            }
+        }
+    }
 
     /**
      * {@inheritDoc}

==================================================
GenericKeyedObjectPoolMXBean.java
index dc40035955..4310674131 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/GenericKeyedObjectPoolConfig.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/GenericKeyedObjectPoolConfig.java
@@ -23,10 +23,12 @@ package org.apache.tomcat.dbcp.pool2.impl;
  * <p>
  * This class is not thread-safe; it is only intended to be used to provide
  * attributes used when creating a pool.
+ * </p>
  *
+ * @param <T> Type of element pooled.
  * @since 2.0
  */
-public class GenericKeyedObjectPoolConfig extends BaseObjectPoolConfig {
+public class GenericKeyedObjectPoolConfig<T> extends BaseObjectPoolConfig<T> {
 
     /**
      * The default value for the {@code maxTotalPerKey} configuration attribute.
@@ -171,10 +173,11 @@ public class GenericKeyedObjectPoolConfig extends BaseObjectPoolConfig {
         this.maxIdlePerKey = maxIdlePerKey;
     }
 
+    @SuppressWarnings("unchecked")
     @Override
-    public GenericKeyedObjectPoolConfig clone() {
+    public GenericKeyedObjectPoolConfig<T> clone() {
         try {
-            return (GenericKeyedObjectPoolConfig) super.clone();
+            return (GenericKeyedObjectPoolConfig<T>) super.clone();
         } catch (final CloneNotSupportedException e) {
             throw new AssertionError(); // Can't happen
         }

==================================================
GenericObjectPool.java
index 2d29dfe515..cf330f8281 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/GenericKeyedObjectPoolMXBean.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/GenericKeyedObjectPoolMXBean.java
@@ -34,169 +34,204 @@ import java.util.Map;
  * @since 2.0
  */
 public interface GenericKeyedObjectPoolMXBean<K> {
+
     // Expose getters for configuration settings
+
     /**
      * See {@link GenericKeyedObjectPool#getBlockWhenExhausted()}
      * @return See {@link GenericKeyedObjectPool#getBlockWhenExhausted()}
      */
     boolean getBlockWhenExhausted();
+
     /**
      * See {@link GenericKeyedObjectPool#getFairness()}
      * @return See {@link GenericKeyedObjectPool#getFairness()}
      */
     boolean getFairness();
+
     /**
      * See {@link GenericKeyedObjectPool#getLifo()}
      * @return See {@link GenericKeyedObjectPool#getLifo()}
      */
     boolean getLifo();
+
     /**
      * See {@link GenericKeyedObjectPool#getMaxIdlePerKey()}
      * @return See {@link GenericKeyedObjectPool#getMaxIdlePerKey()}
      */
     int getMaxIdlePerKey();
+
     /**
      * See {@link GenericKeyedObjectPool#getMaxTotal()}
      * @return See {@link GenericKeyedObjectPool#getMaxTotal()}
      */
     int getMaxTotal();
+
     /**
      * See {@link GenericKeyedObjectPool#getMaxTotalPerKey()}
      * @return See {@link GenericKeyedObjectPool#getMaxTotalPerKey()}
      */
     int getMaxTotalPerKey();
+
     /**
      * See {@link GenericKeyedObjectPool#getMaxWaitMillis()}
      * @return See {@link GenericKeyedObjectPool#getMaxWaitMillis()}
      */
     long getMaxWaitMillis();
+
     /**
      * See {@link GenericKeyedObjectPool#getMinEvictableIdleTimeMillis()}
      * @return See {@link GenericKeyedObjectPool#getMinEvictableIdleTimeMillis()}
      */
     long getMinEvictableIdleTimeMillis();
+
     /**
      * See {@link GenericKeyedObjectPool#getMinIdlePerKey()}
      * @return See {@link GenericKeyedObjectPool#getMinIdlePerKey()}
      */
     int getMinIdlePerKey();
+
     /**
      * See {@link GenericKeyedObjectPool#getNumActive()}
      * @return See {@link GenericKeyedObjectPool#getNumActive()}
      */
     int getNumActive();
+
     /**
      * See {@link GenericKeyedObjectPool#getNumIdle()}
      * @return See {@link GenericKeyedObjectPool#getNumIdle()}
      */
     int getNumIdle();
+
     /**
      * See {@link GenericKeyedObjectPool#getNumTestsPerEvictionRun()}
      * @return See {@link GenericKeyedObjectPool#getNumTestsPerEvictionRun()}
      */
     int getNumTestsPerEvictionRun();
+
     /**
      * See {@link GenericKeyedObjectPool#getTestOnCreate()}
      * @return See {@link GenericKeyedObjectPool#getTestOnCreate()}
      * @since 2.2
      */
     boolean getTestOnCreate();
+
     /**
      * See {@link GenericKeyedObjectPool#getTestOnBorrow()}
      * @return See {@link GenericKeyedObjectPool#getTestOnBorrow()}
      */
     boolean getTestOnBorrow();
+
     /**
      * See {@link GenericKeyedObjectPool#getTestOnReturn()}
      * @return See {@link GenericKeyedObjectPool#getTestOnReturn()}
      */
     boolean getTestOnReturn();
+
     /**
      * See {@link GenericKeyedObjectPool#getTestWhileIdle()}
      * @return See {@link GenericKeyedObjectPool#getTestWhileIdle()}
      */
     boolean getTestWhileIdle();
+
     /**
      * See {@link GenericKeyedObjectPool#getTimeBetweenEvictionRunsMillis()}
      * @return See {@link GenericKeyedObjectPool#getTimeBetweenEvictionRunsMillis()}
      */
     long getTimeBetweenEvictionRunsMillis();
+
     /**
      * See {@link GenericKeyedObjectPool#isClosed()}
      * @return See {@link GenericKeyedObjectPool#isClosed()}
      */
     boolean isClosed();
+
     // Expose getters for monitoring attributes
+
     /**
      * See {@link GenericKeyedObjectPool#getNumActivePerKey()}
      * @return See {@link GenericKeyedObjectPool#getNumActivePerKey()}
      */
     Map<String,Integer> getNumActivePerKey();
+
     /**
      * See {@link GenericKeyedObjectPool#getBorrowedCount()}
      * @return See {@link GenericKeyedObjectPool#getBorrowedCount()}
      */
     long getBorrowedCount();
+
     /**
      * See {@link GenericKeyedObjectPool#getReturnedCount()}
      * @return See {@link GenericKeyedObjectPool#getReturnedCount()}
      */
     long getReturnedCount();
+
     /**
      * See {@link GenericKeyedObjectPool#getCreatedCount()}
      * @return See {@link GenericKeyedObjectPool#getCreatedCount()}
      */
     long getCreatedCount();
+
     /**
      * See {@link GenericKeyedObjectPool#getDestroyedCount()}
      * @return See {@link GenericKeyedObjectPool#getDestroyedCount()}
      */
     long getDestroyedCount();
+
     /**
      * See {@link GenericKeyedObjectPool#getDestroyedByEvictorCount()}
      * @return See {@link GenericKeyedObjectPool#getDestroyedByEvictorCount()}
      */
     long getDestroyedByEvictorCount();
+
     /**
      * See {@link GenericKeyedObjectPool#getDestroyedByBorrowValidationCount()}
      * @return See {@link GenericKeyedObjectPool#getDestroyedByBorrowValidationCount()}
      */
     long getDestroyedByBorrowValidationCount();
+
     /**
      * See {@link GenericKeyedObjectPool#getMeanActiveTimeMillis()}
      * @return See {@link GenericKeyedObjectPool#getMeanActiveTimeMillis()}
      */
     long getMeanActiveTimeMillis();
+
     /**
      * See {@link GenericKeyedObjectPool#getMeanIdleTimeMillis()}
      * @return See {@link GenericKeyedObjectPool#getMeanIdleTimeMillis()}
      */
     long getMeanIdleTimeMillis();
+
     /**
      * See {@link GenericKeyedObjectPool#getMaxBorrowWaitTimeMillis()}
      * @return See {@link GenericKeyedObjectPool#getMaxBorrowWaitTimeMillis()}
      */
     long getMeanBorrowWaitTimeMillis();
+
     /**
      * See {@link GenericKeyedObjectPool#getMaxBorrowWaitTimeMillis()}
      * @return See {@link GenericKeyedObjectPool#getMaxBorrowWaitTimeMillis()}
      */
     long getMaxBorrowWaitTimeMillis();
+
     /**
      * See {@link GenericKeyedObjectPool#getCreationStackTrace()}
      * @return See {@link GenericKeyedObjectPool#getCreationStackTrace()}
      */
     String getCreationStackTrace();
+
     /**
      * See {@link GenericKeyedObjectPool#getNumWaiters()}
      * @return See {@link GenericKeyedObjectPool#getNumWaiters()}
      */
     int getNumWaiters();
+
     /**
      * See {@link GenericKeyedObjectPool#getNumWaitersByKey()}
      * @return See {@link GenericKeyedObjectPool#getNumWaitersByKey()}
      */
     Map<String,Integer> getNumWaitersByKey();
+
     /**
      * See {@link GenericKeyedObjectPool#listAllObjects()}
      * @return See {@link GenericKeyedObjectPool#listAllObjects()}

==================================================
GenericObjectPoolConfig.java
index 965f91a48c..a92db06bac 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/GenericObjectPool.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/GenericObjectPool.java
@@ -77,18 +77,18 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
         implements ObjectPool<T>, GenericObjectPoolMXBean, UsageTracking<T> {
 
     /**
-     * Create a new <code>GenericObjectPool</code> using defaults from
+     * Creates a new <code>GenericObjectPool</code> using defaults from
      * {@link GenericObjectPoolConfig}.
      *
      * @param factory The object factory to be used to create object instances
      *                used by this pool
      */
     public GenericObjectPool(final PooledObjectFactory<T> factory) {
-        this(factory, new GenericObjectPoolConfig());
+        this(factory, new GenericObjectPoolConfig<T>());
     }
 
     /**
-     * Create a new <code>GenericObjectPool</code> using a specific
+     * Creates a new <code>GenericObjectPool</code> using a specific
      * configuration.
      *
      * @param factory   The object factory to be used to create object instances
@@ -99,7 +99,7 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
      *                  pool.
      */
     public GenericObjectPool(final PooledObjectFactory<T> factory,
-            final GenericObjectPoolConfig config) {
+            final GenericObjectPoolConfig<T> config) {
 
         super(config, ONAME_BASE, config.getJmxNamePrefix());
 
@@ -112,12 +112,10 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
         idleObjects = new LinkedBlockingDeque<>(config.getFairness());
 
         setConfig(config);
-
-        startEvictor(getTimeBetweenEvictionRunsMillis());
     }
 
     /**
-     * Create a new <code>GenericObjectPool</code> that tracks and destroys
+     * Creates a new <code>GenericObjectPool</code> that tracks and destroys
      * objects that are checked out, but never returned to the pool.
      *
      * @param factory   The object factory to be used to create object instances
@@ -130,7 +128,7 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
      *                         and removal.  The configuration is used by value.
      */
     public GenericObjectPool(final PooledObjectFactory<T> factory,
-            final GenericObjectPoolConfig config, final AbandonedConfig abandonedConfig) {
+            final GenericObjectPoolConfig<T> config, final AbandonedConfig abandonedConfig) {
         this(factory, config);
         setAbandonedConfig(abandonedConfig);
     }
@@ -221,7 +219,7 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
     }
 
     /**
-     * Whether or not abandoned object removal is configured for this pool.
+     * Gets whether or not abandoned object removal is configured for this pool.
      *
      * @return true if this pool is configured to detect and remove
      * abandoned objects
@@ -232,7 +230,7 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
     }
 
     /**
-     * Will this pool identify and log any abandoned objects?
+     * Gets whether this pool identifies and logs any abandoned objects.
      *
      * @return {@code true} if abandoned object removal is configured for this
      *         pool and removal events are to be logged otherwise {@code false}
@@ -246,8 +244,8 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
     }
 
     /**
-     * Will a check be made for abandoned objects when an object is borrowed
-     * from this pool?
+     * Gets whether a check is made for abandoned objects when an object is borrowed
+     * from this pool.
      *
      * @return {@code true} if abandoned object removal is configured to be
      *         activated by borrowObject otherwise {@code false}
@@ -261,7 +259,7 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
     }
 
     /**
-     * Will a check be made for abandoned objects when the evictor runs?
+     * Gets whether a check is made for abandoned objects when the evictor runs.
      *
      * @return {@code true} if abandoned object removal is configured to be
      *         activated when the evictor runs otherwise {@code false}
@@ -275,7 +273,7 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
     }
 
     /**
-     * Obtain the timeout before which an object will be considered to be
+     * Obtains the timeout before which an object will be considered to be
      * abandoned by this pool.
      *
      * @return The abandoned object timeout in seconds if abandoned object
@@ -297,7 +295,7 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
      *
      * @see GenericObjectPoolConfig
      */
-    public void setConfig(final GenericObjectPoolConfig conf) {
+    public void setConfig(final GenericObjectPoolConfig<T> conf) {
         setLifo(conf.getLifo());
         setMaxIdle(conf.getMaxIdle());
         setMinIdle(conf.getMinIdle());
@@ -310,11 +308,16 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
         setTestWhileIdle(conf.getTestWhileIdle());
         setNumTestsPerEvictionRun(conf.getNumTestsPerEvictionRun());
         setMinEvictableIdleTimeMillis(conf.getMinEvictableIdleTimeMillis());
-        setTimeBetweenEvictionRunsMillis(
-                conf.getTimeBetweenEvictionRunsMillis());
-        setSoftMinEvictableIdleTimeMillis(
-                conf.getSoftMinEvictableIdleTimeMillis());
-        setEvictionPolicyClassName(conf.getEvictionPolicyClassName());
+        setTimeBetweenEvictionRunsMillis(conf.getTimeBetweenEvictionRunsMillis());
+        setSoftMinEvictableIdleTimeMillis(conf.getSoftMinEvictableIdleTimeMillis());
+        final EvictionPolicy<T> policy = conf.getEvictionPolicy();
+        if (policy == null) {
+            // Use the class name (pre-2.6.0 compatible)
+            setEvictionPolicyClassName(conf.getEvictionPolicyClassName());
+        } else {
+            // Otherwise, use the class (2.6.0 feature)
+            setEvictionPolicy(policy);
+        }
         setEvictorShutdownTimeoutMillis(conf.getEvictorShutdownTimeoutMillis());
     }
 
@@ -341,7 +344,7 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
     }
 
     /**
-     * Obtain a reference to the factory used to create, destroy and validate
+     * Obtains a reference to the factory used to create, destroy and validate
      * the objects used by this pool.
      *
      * @return the factory
@@ -362,7 +365,7 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
     }
 
     /**
-     * Borrow an object from the pool using the specific waiting time which only
+     * Borrows an object from the pool using the specific waiting time which only
      * applies if {@link #getBlockWhenExhausted()} is true.
      * <p>
      * If there is one or more idle instance available in the pool, then an
@@ -533,14 +536,7 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
             return; // Object was abandoned and removed
         }
 
-        synchronized(p) {
-            final PooledObjectState state = p.getState();
-            if (state != PooledObjectState.ALLOCATED) {
-                throw new IllegalStateException(
-                        "Object has already been returned to this pool or is invalid");
-            }
-            p.markReturning(); // Keep from being marked abandoned
-        }
+        markReturningState(p);
 
         final long activeTime = p.getActiveTimeMillis();
 
@@ -888,7 +884,7 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
         final PooledObject<T> p;
         try {
             p = factory.makeObject();
-        } catch (final Exception e) {
+        } catch (final Throwable e) {
             createCount.decrementAndGet();
             throw e;
         } finally {
@@ -976,7 +972,7 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
     }
 
     /**
-     * Create an object, and place it into the pool. addObject() is useful for
+     * Creates an object, and place it into the pool. addObject() is useful for
      * "pre-loading" a pool with idle objects.
      * <p>
      * If there is no capacity available to add to the pool, this is a no-op
@@ -994,7 +990,7 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
     }
 
     /**
-     * Add the provided wrapped pooled object to the set of idle objects for
+     * Adds the provided wrapped pooled object to the set of idle objects for
      * this pool. The object must already be part of the pool.  If {@code p}
      * is null, this is a no-op (no exception, but no impact on the pool).
      *
@@ -1014,7 +1010,7 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
     }
 
     /**
-     * Calculate the number of objects to test in a run of the idle object
+     * Calculates the number of objects to test in a run of the idle object
      * evictor.
      *
      * @return The number of objects to test for validity
@@ -1029,7 +1025,7 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
     }
 
     /**
-     * Recover abandoned objects which have been checked out but
+     * Recovers abandoned objects which have been checked out but
      * not used since longer than the removeAbandonedTimeout.
      *
      * @param ac The configuration to use to identify abandoned objects
@@ -1085,7 +1081,7 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
     private volatile String factoryType = null;
 
     /**
-     * Return an estimate of the number of threads currently blocked waiting for
+     * Returns an estimate of the number of threads currently blocked waiting for
      * an object from the pool. This is intended for monitoring only, not for
      * synchronization control.
      *
@@ -1101,7 +1097,7 @@ public class GenericObjectPool<T> extends BaseGenericObjectPool<T>
     }
 
     /**
-     * Return the type - including the specific type rather than the generic -
+     * Returns the type - including the specific type rather than the generic -
      * of the factory.
      *
      * @return A string representation of the factory type

==================================================
LinkedBlockingDeque.java
index 7685c7cd63..32cdfe0963 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/GenericObjectPoolConfig.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/GenericObjectPoolConfig.java
@@ -23,10 +23,12 @@ package org.apache.tomcat.dbcp.pool2.impl;
  * <p>
  * This class is not thread-safe; it is only intended to be used to provide
  * attributes used when creating a pool.
+ * </p>
  *
+ * @param <T> Type of element pooled.
  * @since 2.0
  */
-public class GenericObjectPoolConfig extends BaseObjectPoolConfig {
+public class GenericObjectPoolConfig<T> extends BaseObjectPoolConfig<T> {
 
     /**
      * The default value for the {@code maxTotal} configuration attribute.
@@ -133,10 +135,11 @@ public class GenericObjectPoolConfig extends BaseObjectPoolConfig {
         this.minIdle = minIdle;
     }
 
+    @SuppressWarnings("unchecked")
     @Override
-    public GenericObjectPoolConfig clone() {
+    public GenericObjectPoolConfig<T> clone() {
         try {
-            return (GenericObjectPoolConfig) super.clone();
+            return (GenericObjectPoolConfig<T>) super.clone();
         } catch (final CloneNotSupportedException e) {
             throw new AssertionError(); // Can't happen
         }

==================================================
NoOpCallStack.java
index 3c89f5a44f..be92f91b82 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/LinkedBlockingDeque.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/LinkedBlockingDeque.java
@@ -901,7 +901,7 @@ class LinkedBlockingDeque<E> extends AbstractQueue<E>
     }
 
     /**
-     * Empty the queue to the specified collection.
+     * Drains the queue to the specified collection.
      *
      * @param c The collection to add the elements to
      *
@@ -920,7 +920,7 @@ class LinkedBlockingDeque<E> extends AbstractQueue<E>
     }
 
     /**
-     * Empty no more than the specified number of elements from the queue to the
+     * Drains no more than the specified number of elements from the queue to the
      * specified collection.
      *
      * @param c           collection to add the elements to
@@ -1330,7 +1330,7 @@ class LinkedBlockingDeque<E> extends AbstractQueue<E>
     }
 
     /**
-     * Save the state of this deque to a stream (that is, serialize it).
+     * Saves the state of this deque to a stream (that is, serialize it).
      *
      * @serialData The capacity (int), followed by elements (each an
      * {@code Object}) in the proper order, followed by a null
@@ -1354,7 +1354,7 @@ class LinkedBlockingDeque<E> extends AbstractQueue<E>
     }
 
     /**
-     * Reconstitute this deque from a stream (that is,
+     * Reconstitutes this deque from a stream (that is,
      * deserialize it).
      * @param s the stream
      */
@@ -1379,8 +1379,7 @@ class LinkedBlockingDeque<E> extends AbstractQueue<E>
     // Monitoring methods
 
     /**
-     * Returns true if there are threads waiting to take instances from this deque.
-     * See disclaimer on accuracy in
+     * Returns true if there are threads waiting to take instances from this deque. See disclaimer on accuracy in
      * {@link java.util.concurrent.locks.ReentrantLock#hasWaiters(Condition)}.
      *
      * @return true if there is at least one thread waiting on this deque's notEmpty condition.
@@ -1395,9 +1394,8 @@ class LinkedBlockingDeque<E> extends AbstractQueue<E>
     }
 
     /**
-     * Returns the length of the queue of threads waiting to take instances from this deque.
-     * See disclaimer on accuracy in
-     * {@link java.util.concurrent.locks.ReentrantLock#getWaitQueueLength(Condition)}.
+     * Returns the length of the queue of threads waiting to take instances from this deque. See disclaimer on accuracy
+     * in {@link java.util.concurrent.locks.ReentrantLock#getWaitQueueLength(Condition)}.
      *
      * @return number of threads waiting on this deque's notEmpty condition.
      */
@@ -1411,8 +1409,7 @@ class LinkedBlockingDeque<E> extends AbstractQueue<E>
     }
 
     /**
-     * Interrupts the threads currently waiting to take an object from the pool.
-     * See disclaimer on accuracy in
+     * Interrupts the threads currently waiting to take an object from the pool. See disclaimer on accuracy in
      * {@link java.util.concurrent.locks.ReentrantLock#getWaitingThreads(Condition)}.
      */
     public void interuptTakeWaiters() {

==================================================
PoolImplUtils.java
index ffb91b546d..80a0825a50 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/NoOpCallStack.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/NoOpCallStack.java
@@ -26,13 +26,16 @@ import java.io.PrintWriter;
  */
 public class NoOpCallStack implements CallStack {
 
+    /**
+     * Singleton instance.
+     */
     public static final CallStack INSTANCE = new NoOpCallStack();
 
     private NoOpCallStack() {
     }
 
     @Override
-    public boolean printStackTrace(PrintWriter writer) {
+    public boolean printStackTrace(final PrintWriter writer) {
         return false;
     }
 

==================================================
SoftReferenceObjectPool.java
index 2a818e6965..cb0661ca0d 100644
--- a/java/org/apache/tomcat/dbcp/pool2/impl/PoolImplUtils.java
+++ b/java/org/apache/tomcat/dbcp/pool2/impl/PoolImplUtils.java
@@ -32,84 +32,115 @@ class PoolImplUtils {
     /**
      * Identifies the concrete type of object that an object factory creates.
      *
-     * @param factory The factory to examine
+     * @param factoryClass
+     *            The factory to examine
      *
      * @return the type of object the factory creates
      */
     @SuppressWarnings("rawtypes")
-    static Class<?> getFactoryType(final Class<? extends PooledObjectFactory> factory) {
-        return (Class<?>) getGenericType(PooledObjectFactory.class, factory);
+    static Class<?> getFactoryType(final Class<? extends PooledObjectFactory> factoryClass) {
+        final Class<PooledObjectFactory> type = PooledObjectFactory.class;
+        final Object genericType = getGenericType(type, factoryClass);
+        if (genericType instanceof Integer) {
+            // POOL-324 org.apache.commons.pool2.impl.GenericObjectPool.getFactoryType() throws
+            // java.lang.ClassCastException
+            //
+            // A bit hackish, but we must handle cases when getGenericType() does not return a concrete types.
+            final ParameterizedType pi = getParameterizedType(type, factoryClass);
+            if (pi != null) {
+                final Type[] bounds = ((TypeVariable) pi.getActualTypeArguments()[((Integer) genericType).intValue()]).getBounds();
+                if (bounds != null && bounds.length > 0) {
+                    final Type bound0 = bounds[0];
+                    if (bound0 instanceof Class) {
+                        return (Class<?>) bound0;
+                    }
+                }
+            }
+            // last resort: Always return a Class
+            return Object.class;
+        }
+        return (Class<?>) genericType;
     }
 
-
     /**
-     * Obtain the concrete type used by an implementation of an interface that
-     * uses a generic type.
+     * Obtains the concrete type used by an implementation of an interface that uses a generic type.
      *
-     * @param type  The interface that defines a generic type
-     * @param clazz The class that implements the interface with a concrete type
-     * @param <T>   The interface type
+     * @param type
+     *            The interface that defines a generic type
+     * @param clazz
+     *            The class that implements the interface with a concrete type
+     * @param <T>
+     *            The interface type
      *
      * @return concrete type used by the implementation
      */
-    private static <T> Object getGenericType(final Class<T> type,
-            final Class<? extends T> clazz) {
+    private static <T> Object getGenericType(final Class<T> type, final Class<? extends T> clazz) {
+        if (type == null || clazz == null) {
+            // Error will be logged further up the call stack
+            return null;
+        }
 
         // Look to see if this class implements the generic interface
-
-        // Get all the interfaces
-        final Type[] interfaces = clazz.getGenericInterfaces();
-        for (final Type iface : interfaces) {
-            // Only need to check interfaces that use generics
-            if (iface instanceof ParameterizedType) {
-                final ParameterizedType pi = (ParameterizedType) iface;
-                // Look for the generic interface
-                if (pi.getRawType() instanceof Class) {
-                    if (type.isAssignableFrom((Class<?>) pi.getRawType())) {
-                        return getTypeParameter(
-                                clazz, pi.getActualTypeArguments()[0]);
-                    }
-                }
-            }
+        final ParameterizedType pi = getParameterizedType(type, clazz);
+        if (pi != null) {
+            return getTypeParameter(clazz, pi.getActualTypeArguments()[0]);
         }
 
         // Interface not found on this class. Look at the superclass.
         @SuppressWarnings("unchecked")
-        final
-        Class<? extends T> superClazz =
-                (Class<? extends T>) clazz.getSuperclass();
+        final Class<? extends T> superClass = (Class<? extends T>) clazz.getSuperclass();
 
-        final Object result = getGenericType(type, superClazz);
+        final Object result = getGenericType(type, superClass);
         if (result instanceof Class<?>) {
-            // Superclass implements interface and defines explicit type for
-            // generic
+            // Superclass implements interface and defines explicit type for generic
             return result;
         } else if (result instanceof Integer) {
-            // Superclass implements interface and defines unknown type for
-            // generic
+            // Superclass implements interface and defines unknown type for generic
             // Map that unknown type to the generic types defined in this class
-            final ParameterizedType superClassType =
-                    (ParameterizedType) clazz.getGenericSuperclass();
-            return getTypeParameter(clazz,
-                    superClassType.getActualTypeArguments()[
-                            ((Integer) result).intValue()]);
+            final ParameterizedType superClassType = (ParameterizedType) clazz.getGenericSuperclass();
+            return getTypeParameter(clazz, superClassType.getActualTypeArguments()[((Integer) result).intValue()]);
         } else {
             // Error will be logged further up the call stack
             return null;
         }
     }
 
+    /**
+     * Gets the matching parameterized type or null.
+     * @param type
+     *            The interface that defines a generic type
+     * @param clazz
+     *            The class that implements the interface with a concrete type
+     * @param <T>
+     *            The interface type
+     */
+    private static <T> ParameterizedType getParameterizedType(final Class<T> type, final Class<? extends T> clazz) {
+        for (final Type iface : clazz.getGenericInterfaces()) {
+            // Only need to check interfaces that use generics
+            if (iface instanceof ParameterizedType) {
+                final ParameterizedType pi = (ParameterizedType) iface;
+                // Look for the generic interface
+                if (pi.getRawType() instanceof Class) {
+                    if (type.isAssignableFrom((Class<?>) pi.getRawType())) {
+                        return pi;
+                    }
+                }
+            }
+        }
+        return null;
+    }
 
     /**
-     * For a generic parameter, return either the Class used or if the type
-     * is unknown, the index for the type in definition of the class
+     * For a generic parameter, return either the Class used or if the type is unknown, the index for the type in
+     * definition of the class
      *
-     * @param clazz defining class
-     * @param argType the type argument of interest
+     * @param clazz
+     *            defining class
+     * @param argType
+     *            the type argument of interest
      *
-     * @return An instance of {@link Class} representing the type used by the
-     *         type parameter or an instance of {@link Integer} representing
-     *         the index for the type in the definition of the defining class
+     * @return An instance of {@link Class} representing the type used by the type parameter or an instance of
+     *         {@link Integer} representing the index for the type in the definition of the defining class
      */
     private static Object getTypeParameter(final Class<?> clazz, final Type argType) {
         if (argType instanceof Class<?>) {

==================================================
