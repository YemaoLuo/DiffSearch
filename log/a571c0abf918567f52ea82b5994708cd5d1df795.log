a571c0abf918567f52ea82b5994708cd5d1df795
==================================================
Better class loader control when embedding
==================================================
Mark Emlyn
==================================================
Wed Jan 12 18:13:11 2011 +0000
==================================================
Container.java
Better class loader control when embedding

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1058259 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Server.java
index 113030f524..37102db746 100644
--- a/java/org/apache/catalina/Container.java
+++ b/java/org/apache/catalina/Container.java
@@ -282,14 +282,16 @@ public interface Container extends Lifecycle {
 
 
     /**
-     * Return the parent class loader (if any) for web applications.
+     * Return the parent class loader for this component. If not set, return
+     * {@link Container#getParent()#getParentClassLoader()}. If no parent has
+     * been set, return the system class loader.
      */
     public ClassLoader getParentClassLoader();
 
 
     /**
-     * Set the parent class loader (if any) for web applications.
-     * This call is meaningful only <strong>before</strong> a Loader has
+     * Set the parent class loader for this component. For {@link Context}s
+     * this call is meaningful only <strong>before</strong> a Loader has
      * been configured, and the specified value (if non-null) should be
      * passed as an argument to the class loader constructor.
      *

==================================================
Service.java
index f01ffa1c0f..c6f8d2bf38 100644
--- a/java/org/apache/catalina/Server.java
+++ b/java/org/apache/catalina/Server.java
@@ -118,10 +118,20 @@ public interface Server extends Lifecycle {
 
     
     /**
-     * Return the parent class loader.
+     * Return the parent class loader for this component. If not set, return
+     * {@link Server#getCatalina()#getParentClassLoader(). If no catalina has
+     * been set, return the system class loader.
      */
     public ClassLoader getParentClassLoader();
 
+
+    /**
+     * Set the parent class loader for this server.
+     *
+     * @param parent The new parent class loader
+     */
+    public void setParentClassLoader(ClassLoader parent);
+
     
     /**
      * Return the outer Catalina startup/shutdown component if present.

==================================================
StandardServer.java
index a31f19e587..2ce5036e35 100644
--- a/java/org/apache/catalina/Service.java
+++ b/java/org/apache/catalina/Service.java
@@ -85,10 +85,19 @@ public interface Service extends Lifecycle {
     public void setServer(Server server);
 
     /**
-     * Return the parent class loader.
+     * Return the parent class loader for this component. If not set, return
+     * {@link Service#getServer()#getParentClassLoader(). If no server has
+     * been set, return the system class loader.
      */
     public ClassLoader getParentClassLoader();
-    
+
+    /**
+     * Set the parent class loader for this service.
+     *
+     * @param parent The new parent class loader
+     */
+    public void setParentClassLoader(ClassLoader parent);
+
     // --------------------------------------------------------- Public Methods
 
 

==================================================
StandardService.java
index 28a21d6eca..7b3d39e01d 100644
--- a/java/org/apache/catalina/core/StandardServer.java
+++ b/java/org/apache/catalina/core/StandardServer.java
@@ -14,11 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-
 package org.apache.catalina.core;
 
-
 import java.beans.PropertyChangeListener;
 import java.beans.PropertyChangeSupport;
 import java.io.IOException;
@@ -56,8 +53,7 @@ import org.apache.tomcat.util.res.StringManager;
  * @author Craig R. McClanahan
  * @version $Id$
  */
-public final class StandardServer extends LifecycleMBeanBase
-        implements Server {
+public final class StandardServer extends LifecycleMBeanBase implements Server {
 
     private static final Log log = LogFactory.getLog(StandardServer.class);
    
@@ -159,6 +155,8 @@ public final class StandardServer extends LifecycleMBeanBase
     
     private Catalina catalina = null;
 
+    private ClassLoader parentClassLoader = null;
+
     // ------------------------------------------------------------- Properties
 
 
@@ -751,12 +749,28 @@ public final class StandardServer extends LifecycleMBeanBase
      */
     @Override
     public ClassLoader getParentClassLoader() {
+        if (parentClassLoader != null)
+            return (parentClassLoader);
         if (catalina != null) {
             return (catalina.getParentClassLoader());
         }
         return (ClassLoader.getSystemClassLoader());
     }
 
+    /**
+     * Set the parent class loader for this server.
+     *
+     * @param parent The new parent class loader
+     */
+    @Override
+    public void setParentClassLoader(ClassLoader parent) {
+        ClassLoader oldParentClassLoader = this.parentClassLoader;
+        this.parentClassLoader = parent;
+        support.firePropertyChange("parentClassLoader", oldParentClassLoader,
+                                   this.parentClassLoader);
+    }
+
+    
     private ObjectName onameStringCache;
     private ObjectName onameMBeanFactory;
     private ObjectName onameNamingResoucres;

==================================================
TestTomcatClassLoader.java
index 216a7f8512..8c8383f264 100644
--- a/java/org/apache/catalina/core/StandardService.java
+++ b/java/org/apache/catalina/core/StandardService.java
@@ -103,6 +103,7 @@ public class StandardService extends LifecycleMBeanBase implements Service {
      */
     protected Container container = null;
 
+    private ClassLoader parentClassLoader = null;
 
     // ------------------------------------------------------------- Properties
 
@@ -600,12 +601,26 @@ public class StandardService extends LifecycleMBeanBase implements Service {
      */
     @Override
     public ClassLoader getParentClassLoader() {
+        if (parentClassLoader != null)
+            return (parentClassLoader);
         if (server != null) {
             return (server.getParentClassLoader());
         }
         return (ClassLoader.getSystemClassLoader());
     }
 
+    /**
+     * Set the parent class loader for this server.
+     *
+     * @param parent The new parent class loader
+     */
+    @Override
+    public void setParentClassLoader(ClassLoader parent) {
+        ClassLoader oldParentClassLoader = this.parentClassLoader;
+        this.parentClassLoader = parent;
+        support.firePropertyChange("parentClassLoader", oldParentClassLoader,
+                                   this.parentClassLoader);
+    }
     @Override
     protected String getDomainInternal() {
         

==================================================
