8ec47ef101010e6c3f021b886673b7330246e944
==================================================
Break from AJP CPING handling if endpoint is
==================================================
Rainer Jung
==================================================
Sat Sep 24 15:57:03 2011 +0000
==================================================
AjpAprProcessor.java
Break from AJP CPING handling if endpoint is
already paused.

Experimenting shows, that we will otherwise
loose the following request. TC will not
answer it, but mod_jk doesn't resend if properly
configured. CPING is meant to detect this.

Not 100% sure about the call to recycle(),
but didn't find where else it would happen.


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1175182 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpNioProcessor.java
index d6b0b566ec..ebf3ee5e4b 100644
--- a/java/org/apache/coyote/ajp/AjpAprProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpAprProcessor.java
@@ -134,6 +134,10 @@ public class AjpAprProcessor extends AbstractAjpProcessor<Long> {
                 // not regular request processing
                 int type = requestHeaderMessage.getByte();
                 if (type == Constants.JK_AJP13_CPING_REQUEST) {
+                    if (endpoint.isPaused()) {
+                        recycle(true);
+                        break;
+                    }
                     if (Socket.send(socketRef, pongMessageArray, 0,
                             pongMessageArray.length) < 0) {
                         error = true;

==================================================
AjpProcessor.java
index bd53f13d61..63b596ef66 100644
--- a/java/org/apache/coyote/ajp/AjpNioProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpNioProcessor.java
@@ -118,6 +118,10 @@ public class AjpNioProcessor extends AbstractAjpProcessor<NioChannel> {
                 // not regular request processing
                 int type = requestHeaderMessage.getByte();
                 if (type == Constants.JK_AJP13_CPING_REQUEST) {
+                    if (endpoint.isPaused()) {
+                        recycle(true);
+                        break;
+                    }
                     try {
                         output(pongMessageArray, 0, pongMessageArray.length);
                     } catch (IOException e) {

==================================================
