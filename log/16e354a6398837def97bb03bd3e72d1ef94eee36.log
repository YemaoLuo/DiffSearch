16e354a6398837def97bb03bd3e72d1ef94eee36
==================================================
Pull up some methods and quick port of SSL authenticator.
==================================================
Remy Maucherat
==================================================
Thu Oct 22 16:26:51 2015 +0000
==================================================
BasicAuthModule.java
Pull up some methods and quick port of SSL authenticator.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1710058 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DigestAuthModule.java
index 586e3704c6..e77629209d 100644
--- a/java/org/apache/catalina/authenticator/jaspic/provider/modules/BasicAuthModule.java
+++ b/java/org/apache/catalina/authenticator/jaspic/provider/modules/BasicAuthModule.java
@@ -28,7 +28,6 @@ import javax.security.auth.message.AuthStatus;
 import javax.security.auth.message.MessageInfo;
 import javax.security.auth.message.MessagePolicy;
 import javax.security.auth.message.callback.PasswordValidationCallback;
-import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
 import org.apache.catalina.Context;
@@ -42,10 +41,6 @@ import org.apache.tomcat.util.buf.MessageBytes;
  */
 public class BasicAuthModule extends TomcatAuthModule {
 
-    private Class<?>[] supportedMessageTypes = new Class[] { HttpServletRequest.class,
-            HttpServletResponse.class };
-
-
     public BasicAuthModule(Context context) {
         super(context);
     }
@@ -111,22 +106,4 @@ public class BasicAuthModule extends TomcatAuthModule {
     }
 
 
-    @Override
-    public AuthStatus secureResponse(MessageInfo messageInfo, Subject serviceSubject)
-            throws AuthException {
-        return null;
-    }
-
-
-    @Override
-    public void cleanSubject(MessageInfo messageInfo, Subject subject) throws AuthException {
-
-    }
-
-
-    @Override
-    public Class<?>[] getSupportedMessageTypes() {
-        return supportedMessageTypes;
-    }
-
 }

==================================================
FormAuthModule.java
index 954f37197c..cc9629a3cd 100644
--- a/java/org/apache/catalina/authenticator/jaspic/provider/modules/DigestAuthModule.java
+++ b/java/org/apache/catalina/authenticator/jaspic/provider/modules/DigestAuthModule.java
@@ -51,9 +51,6 @@ public class DigestAuthModule extends TomcatAuthModule {
      */
     protected static final String QOP = "auth";
 
-    private Class<?>[] supportedMessageTypes = new Class[] { HttpServletRequest.class,
-            HttpServletResponse.class };
-
     private CallbackHandler handler;
 
     private Realm realm;
@@ -292,25 +289,6 @@ public class DigestAuthModule extends TomcatAuthModule {
     }
 
 
-    @Override
-    public AuthStatus secureResponse(MessageInfo messageInfo, Subject serviceSubject)
-            throws AuthException {
-        return null;
-    }
-
-
-    @Override
-    public void cleanSubject(MessageInfo messageInfo, Subject subject) throws AuthException {
-
-    }
-
-
-    @Override
-    public Class<?>[] getSupportedMessageTypes() {
-        return supportedMessageTypes;
-    }
-
-
     /**
      * Removes the quotes on a string. RFC2617 states quotes are optional for
      * all parameters except realm.

==================================================
SSLAuthModule.java
new file mode 100644
index 0000000000..809a9d79b1
--- /dev/null
+++ b/java/org/apache/catalina/authenticator/jaspic/provider/modules/LocalStrings.properties
@@ -0,0 +1,37 @@
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+authenticator.certificates=No client certificate chain in this request
+authenticator.formlogin=Invalid direct reference to form login page
+authenticator.loginFail=Login failed
+authenticator.manager=Exception initializing trust managers
+authenticator.noAuthHeader=No authorization header sent by client
+authenticator.notContext=Configuration error:  Must be attached to a Context
+authenticator.requestBodyTooBig=The request body was too large to be cached during the authentication process
+authenticator.sessionExpired=The time allowed for the login process has been exceeded. If you wish to continue you must either click back twice and re-click the link you requested or close and re-open your browser
+authenticator.unauthorized=Cannot authenticate with the provided credentials
+
+digestAuthenticator.cacheRemove=A valid entry has been removed from client nonce cache to make room for new entries. A replay attack is now possible. To prevent the possibility of replay attacks, reduce nonceValidity or increase cnonceCacheSize. Further warnings of this type will be suppressed for 5 minutes.
+
+formAuthenticator.forwardErrorFail=Unexpected error forwarding to error page
+formAuthenticator.forwardLogin=Forwarding request for [{0}] made with method [{1}] to login page [{2}] of context [{3}] using request method GET
+formAuthenticator.forwardLoginFail=Unexpected error forwarding to login page
+formAuthenticator.noErrorPage=No error page was defined for FORM authentication in context [{0}]
+formAuthenticator.noLoginPage=No login page was defined for FORM authentication in context [{0}]
+
+spnegoAuthenticator.authHeaderNoToken=The Negotiate authorization header sent by the client did not include a token
+spnegoAuthenticator.authHeaderNotNego=The authorization header sent by the client did not start with Negotiate
+spnegoAuthenticator.serviceLoginFail=Unable to login as the service principal
+spnegoAuthenticator.ticketValidateFail=Failed to validate client supplied ticket

==================================================
SpnegoAuthModule.java
new file mode 100644
index 0000000000..2af7996a7a
--- /dev/null
+++ b/java/org/apache/catalina/authenticator/jaspic/provider/modules/SSLAuthModule.java
@@ -0,0 +1,115 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.authenticator.jaspic.provider.modules;
+
+import java.security.Principal;
+import java.security.cert.X509Certificate;
+import java.util.Map;
+
+import javax.security.auth.Subject;
+import javax.security.auth.callback.CallbackHandler;
+import javax.security.auth.message.AuthException;
+import javax.security.auth.message.AuthStatus;
+import javax.security.auth.message.MessageInfo;
+import javax.security.auth.message.MessagePolicy;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.catalina.Context;
+import org.apache.catalina.Globals;
+import org.apache.catalina.connector.Request;
+import org.apache.coyote.ActionCode;
+
+/**
+ * This class implements JASPIC based HTTP BASIC authentication.
+ */
+public class SSLAuthModule extends TomcatAuthModule {
+
+    public SSLAuthModule(Context context) {
+        super(context);
+    }
+
+
+    @Override
+    public void initializeModule(MessagePolicy requestPolicy, MessagePolicy responsePolicy,
+            CallbackHandler handler, Map<String, String> options) throws AuthException {
+    }
+
+
+    @Override
+    public AuthStatus validateRequest(MessageInfo messageInfo, Subject clientSubject,
+            Subject serviceSubject) throws AuthException {
+        if (!isMandatory(messageInfo)) {
+            return AuthStatus.SUCCESS;
+        }
+
+        Request request = (Request) messageInfo.getRequestMessage();
+        HttpServletResponse response = (HttpServletResponse) messageInfo.getResponseMessage();
+        try {
+            X509Certificate certs[] = getRequestCertificates(request);
+
+            if ((certs == null) || (certs.length < 1)) {
+                response.sendError(HttpServletResponse.SC_UNAUTHORIZED,
+                        sm.getString("authenticator.certificates"));
+                return AuthStatus.FAILURE;
+            }
+
+            // Authenticate the specified certificate chain
+            Principal principal = context.getRealm().authenticate(certs);
+            if (principal == null) {
+                response.sendError(HttpServletResponse.SC_UNAUTHORIZED,
+                        sm.getString("authenticator.unauthorized"));
+                return AuthStatus.FAILURE;
+            }
+            handlePrincipalCallbacks(clientSubject, principal);
+            return AuthStatus.SUCCESS;
+        } catch (Exception e) {
+            throw new AuthException(e.getMessage());
+        }
+
+    }
+
+
+    /**
+     * Look for the X509 certificate chain in the Request under the key
+     * <code>javax.servlet.request.X509Certificate</code>. If not found, trigger
+     * extracting the certificate chain from the Coyote request.
+     *
+     * @param request   Request to be processed
+     *
+     * @return          The X509 certificate chain if found, <code>null</code>
+     *                  otherwise.
+     */
+    protected X509Certificate[] getRequestCertificates(final Request request)
+            throws IllegalStateException {
+
+        X509Certificate certs[] =
+                (X509Certificate[]) request.getAttribute(Globals.CERTIFICATES_ATTR);
+
+        if ((certs == null) || (certs.length < 1)) {
+            try {
+                request.getCoyoteRequest().action(ActionCode.REQ_SSL_CERTIFICATE, null);
+                certs = (X509Certificate[]) request.getAttribute(Globals.CERTIFICATES_ATTR);
+            } catch (IllegalStateException ise) {
+                // Request body was too large for save buffer
+                // Return null which will trigger an auth failure
+            }
+        }
+
+        return certs;
+    }
+
+}

==================================================
TomcatAuthModule.java
index 886d1c4a00..5301a943a2 100644
--- a/java/org/apache/catalina/authenticator/jaspic/provider/modules/SpnegoAuthModule.java
+++ b/java/org/apache/catalina/authenticator/jaspic/provider/modules/SpnegoAuthModule.java
@@ -33,7 +33,6 @@ import javax.security.auth.message.AuthException;
 import javax.security.auth.message.AuthStatus;
 import javax.security.auth.message.MessageInfo;
 import javax.security.auth.message.MessagePolicy;
-import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
 import org.apache.catalina.Context;
@@ -64,20 +63,11 @@ import org.ietf.jgss.Oid;
 public class SpnegoAuthModule extends TomcatAuthModule {
     private static final Log log = LogFactory.getLog(SpnegoAuthModule.class);
 
-    private Class<?>[] supportedMessageTypes = new Class[] { HttpServletRequest.class,
-            HttpServletResponse.class };
-
     private String loginConfigName = Constants.DEFAULT_LOGIN_MODULE_NAME;
     private boolean storeDelegatedCredential = true;
     private Pattern noKeepAliveUserAgents = null;
     private boolean applyJava8u40Fix = true;
 
-    @Override
-    public Class<?>[] getSupportedMessageTypes() {
-        return supportedMessageTypes;
-    }
-
-
     @Override
     public void initializeModule(MessagePolicy requestPolicy, MessagePolicy responsePolicy,
             CallbackHandler handler, Map<String, String> options) throws AuthException {

==================================================
