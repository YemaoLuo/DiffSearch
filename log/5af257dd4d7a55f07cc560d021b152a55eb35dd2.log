5af257dd4d7a55f07cc560d021b152a55eb35dd2
==================================================
Servlet 3.0 implementation
==================================================
Mark Emlyn
==================================================
Thu Jan 21 02:57:10 2010 +0000
==================================================
Context.java
Servlet 3.0 implementation
Implement some more of the new ServletContext methods

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@901507 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Wrapper.java
index 6c53b7149f..ef7ebe77e3 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -451,6 +451,108 @@ public interface Context extends Container {
     public void setWrapperClass(String wrapperClass);
 
 
+    /**
+     * Get the server.xml <context> attribute's xmlNamespaceAware.
+     * @return true if namespace awareness is enabled.
+     *
+     */
+    public boolean getXmlNamespaceAware();
+
+
+    /**
+     * Get the server.xml <context> attribute's xmlValidation.
+     * @return true if validation is enabled.
+     *
+     */
+    public boolean getXmlValidation();
+
+
+    /**
+     * Set the validation feature of the XML parser used when
+     * parsing xml instances.
+     * @param xmlValidation true to enable xml instance validation
+     */
+    public void setXmlValidation(boolean xmlValidation);
+
+
+   /**
+     * Set the namespace aware feature of the XML parser used when
+     * parsing xml instances.
+     * @param xmlNamespaceAware true to enable namespace awareness
+     */
+    public void setXmlNamespaceAware(boolean xmlNamespaceAware);
+    /**
+     * Get the server.xml <context> attribute's xmlValidation.
+     * @return true if validation is enabled.
+     */
+     
+
+    /**
+     * Set the validation feature of the XML parser used when
+     * parsing tlds files. 
+     * @param tldValidation true to enable xml instance validation
+     */
+    public void setTldValidation(boolean tldValidation);
+
+
+    /**
+     * Get the server.xml <context> attribute's webXmlValidation.
+     * @return true if validation is enabled.
+     *
+     */
+    public boolean getTldValidation();
+
+
+    /**
+     * Get the server.xml &lt;host&gt; attribute's xmlNamespaceAware.
+     * @return true if namespace awareness is enabled.
+     */
+    public boolean getTldNamespaceAware();
+
+
+    /**
+     * Set the namespace aware feature of the XML parser used when
+     * parsing xml instances.
+     * @param tldNamespaceAware true to enable namespace awareness
+     */
+    public void setTldNamespaceAware(boolean tldNamespaceAware);
+
+    /**
+     * Get the Jar Scanner to be used to scan for JAR resources for this
+     * context.
+     * @return  The Jar Scanner configured for this context.
+     */
+    public JarScanner getJarScanner();
+
+    /**
+     * Set the Jar Scanner to be used to scan for JAR resources for this
+     * context.
+     * @param jarScanner    The Jar Scanner to be used for this context.
+     */
+    public void setJarScanner(JarScanner jarScanner);
+
+    /**
+     * Obtain the {@link Authenticator} that is used by this context or
+     * <code>null</code> if none is used.
+     */
+    public Authenticator getAuthenticator();
+    
+    /**
+     * Set whether or not the effective web.xml for this context should be
+     * logged on context start.
+     */
+    public void setLogEffectiveWebXml(boolean logEffectiveWebXml);
+    
+    /**
+     * Should the effective web.xml for this context be logged on context start?
+     */
+    public boolean getLogEffectiveWebXml();
+    
+    /**
+     * Has this context been initialized?
+     */
+    public boolean isInitialized();
+
     // --------------------------------------------------------- Public Methods
 
 
@@ -1019,72 +1121,6 @@ public interface Context extends Container {
     public void removeWrapperListener(String listener);
 
 
-    /**
-     * Get the server.xml <context> attribute's xmlNamespaceAware.
-     * @return true if namespace awareness is enabled.
-     *
-     */
-    public boolean getXmlNamespaceAware();
-
-
-    /**
-     * Get the server.xml <context> attribute's xmlValidation.
-     * @return true if validation is enabled.
-     *
-     */
-    public boolean getXmlValidation();
-
-
-    /**
-     * Set the validation feature of the XML parser used when
-     * parsing xml instances.
-     * @param xmlValidation true to enable xml instance validation
-     */
-    public void setXmlValidation(boolean xmlValidation);
-
-
-   /**
-     * Set the namespace aware feature of the XML parser used when
-     * parsing xml instances.
-     * @param xmlNamespaceAware true to enable namespace awareness
-     */
-    public void setXmlNamespaceAware(boolean xmlNamespaceAware);
-    /**
-     * Get the server.xml <context> attribute's xmlValidation.
-     * @return true if validation is enabled.
-     */
-     
-
-    /**
-     * Set the validation feature of the XML parser used when
-     * parsing tlds files. 
-     * @param tldValidation true to enable xml instance validation
-     */
-    public void setTldValidation(boolean tldValidation);
-
-
-    /**
-     * Get the server.xml <context> attribute's webXmlValidation.
-     * @return true if validation is enabled.
-     *
-     */
-    public boolean getTldValidation();
-
-
-    /**
-     * Get the server.xml &lt;host&gt; attribute's xmlNamespaceAware.
-     * @return true if namespace awareness is enabled.
-     */
-    public boolean getTldNamespaceAware();
-
-
-    /**
-     * Set the namespace aware feature of the XML parser used when
-     * parsing xml instances.
-     * @param tldNamespaceAware true to enable namespace awareness
-     */
-    public void setTldNamespaceAware(boolean tldNamespaceAware);
-
     /**
      * Return the real path for a given virtual path, if possible; otherwise
      * return <code>null</code>.
@@ -1092,36 +1128,5 @@ public interface Context extends Container {
      * @param path The path to the desired resource
      */
     public String getRealPath(String path);
-
-    /**
-     * Get the Jar Scanner to be used to scan for JAR resources for this
-     * context.
-     * @return  The Jar Scanner configured for this context.
-     */
-    public JarScanner getJarScanner();
-
-    /**
-     * Set the Jar Scanner to be used to scan for JAR resources for this
-     * context.
-     * @param jarScanner    The Jar Scanner to be used for this context.
-     */
-    public void setJarScanner(JarScanner jarScanner);
-
-    /**
-     * Obtain the {@link Authenticator} that is used by this context or
-     * <code>null</code> if none is used.
-     */
-    public Authenticator getAuthenticator();
-    
-    /**
-     * Set whether or not the effective web.xml for this context should be
-     * logged on context start.
-     */
-    public void setLogEffectiveWebXml(boolean logEffectiveWebXml);
-    
-    /**
-     * Should the effective web.xml for this context be logged on context start?
-     */
-    public boolean getLogEffectiveWebXml();
 }
 

==================================================
ApplicationContext.java
index 6880c95e0a..5c4cdeae84 100644
--- a/java/org/apache/catalina/Wrapper.java
+++ b/java/org/apache/catalina/Wrapper.java
@@ -151,6 +151,17 @@ public interface Wrapper extends Container {
      */
     public boolean isUnavailable();
 
+    
+    /**
+     * Return the associated servlet instance.
+     */
+    public Servlet getServlet();
+    
+
+    /**
+     * Set the associated servlet instance
+     */
+    public void setServlet(Servlet servlet);
 
     // --------------------------------------------------------- Public Methods
 
@@ -218,12 +229,6 @@ public interface Wrapper extends Container {
     public void deallocate(Servlet servlet) throws ServletException;
 
 
-    /**
-     * Return the associated servlet instance.
-     */
-    public Servlet getServlet();
-    
-    
     /**
      * Return the value for the specified initialization parameter name,
      * if any; otherwise return <code>null</code>.

==================================================
ApplicationFilterConfig.java
index 1250389dce..c9a52d224f 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -20,6 +20,7 @@ package org.apache.catalina.core;
 
 
 import java.io.InputStream;
+import java.lang.reflect.InvocationTargetException;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.ArrayList;
@@ -816,9 +817,59 @@ public class ApplicationContext
     }
 
 
+    /**
+     * Add filter to context.
+     * @param   filterName  Name of filter to add
+     * @param   filterClass Name of filter class
+     * @returns <code>null</code> if the filter has already been fully defined,
+     *          else a {@link FilterRegistration.Dynamic} object that can be
+     *          used to further configure the filter
+     * @throws IllegalStateException if the context has already been initialised
+     * @throws UnsupportedOperationException - TODO SERVLET3
+     */
     public FilterRegistration.Dynamic addFilter(String filterName,
             String filterClass) throws IllegalStateException {
         
+        return addFilter(filterName, filterClass, null);
+    }
+
+    
+    /**
+     * Add filter to context.
+     * @param   filterName  Name of filter to add
+     * @param   filter      Filter to add
+     * @returns <code>null</code> if the filter has already been fully defined,
+     *          else a {@link FilterRegistration.Dynamic} object that can be
+     *          used to further configure the filter
+     * @throws IllegalStateException if the context has already been initialised
+     * @throws UnsupportedOperationException - TODO SERVLET3
+     */
+    public FilterRegistration.Dynamic addFilter(String filterName,
+            Filter filter) throws IllegalStateException {
+        
+        return addFilter(filterName, null, filter);
+    }
+
+    
+    /**
+     * Add filter to context.
+     * @param   filterName  Name of filter to add
+     * @param   filterClass Class of filter to add
+     * @returns <code>null</code> if the filter has already been fully defined,
+     *          else a {@link FilterRegistration.Dynamic} object that can be
+     *          used to further configure the filter
+     * @throws IllegalStateException if the context has already been initialised
+     * @throws UnsupportedOperationException - TODO SERVLET3
+     */
+    public FilterRegistration.Dynamic addFilter(String filterName,
+            Class<? extends Filter> filterClass) throws IllegalStateException {
+        
+        return addFilter(filterName, filterClass.getName(), null);
+    }
+
+    private FilterRegistration.Dynamic addFilter(String filterName,
+            String filterClass, Filter filter) throws IllegalStateException {
+        
         if (context.initialized) {
             //TODO Spec breaking enhancement to ignore this restriction
             throw new IllegalStateException(
@@ -840,103 +891,78 @@ public class ApplicationContext
         }
 
         // Name must already be set
-        filterDef.setFilterClass(filterClass);
-        
-        return new ApplicationFilterRegistration(filterDef, context);
-    }
-
-    
-    public FilterRegistration.Dynamic addFilter(String filterName,
-            Filter filter) throws IllegalStateException {
-        
-        if (context.initialized) {
-            //TODO Spec breaking enhancement to ignore this restriction
-            throw new IllegalStateException(
-                    sm.getString("applicationContext.addFilter.ise",
-                            getContextPath()));
-        }
-        
-        if (context.findFilterDef(filterName) != null) {
-            return null;
-        }
-
-        // TODO SERVLET3
-        return null;
-    }
-
-    
-    public FilterRegistration.Dynamic addFilter(String filterName,
-            Class<? extends Filter> filterClass) throws IllegalStateException {
-        
-        if (context.initialized) {
-            //TODO Spec breaking enhancement to ignore this restriction
-            throw new IllegalStateException(
-                    sm.getString("applicationContext.addFilter.ise",
-                            getContextPath()));
+        if (filter == null) {
+            filterDef.setFilterClass(filterClass);
+        } else {
+            filterDef.setFilterClass(filter.getClass().getName());
+            filterDef.setFilter(filter);
         }
         
-        if (context.findFilterDef(filterName) != null) {
-            return null;
-        }
-
-        // TODO SERVLET3
-        return null;
-    }
-
+        return new ApplicationFilterRegistration(filterDef, context);
+    } 
     
     public <T extends Filter> T createFilter(Class<T> c)
     throws ServletException {
-        // TODO SERVLET3
-        return null;
+        try {
+            @SuppressWarnings("unchecked")
+            T filter = (T) context.getInstanceManager().newInstance(c.getName());
+            return filter;
+        } catch (IllegalAccessException e) {
+            throw new ServletException(e);
+        } catch (InvocationTargetException e) {
+            throw new ServletException(e);
+        } catch (NamingException e) {
+            throw new ServletException(e);
+        } catch (InstantiationException e) {
+            throw new ServletException(e);
+        } catch (ClassNotFoundException e) {
+            throw new ServletException(e);
+        }
     }
 
 
     public FilterRegistration getFilterRegistration(String filterName) {
-        // TODO SERVLET3
-        return null;
+        FilterDef filterDef = context.findFilterDef(filterName);
+        if (filterDef == null) {
+            return null;
+        }
+        
+        return new ApplicationFilterRegistration(filterDef, context);
     }
     
+    /**
+     * Add servlet to context.
+     * @param   servletName  Name of filter to add
+     * @param   servletClass Name of filter class
+     * @returns <code>null</code> if the servlet has already been fully defined,
+     *          else a {@link ServletRegistration.Dynamic} object that can be
+     *          used to further configure the servlet
+     * @throws IllegalStateException if the context has already been initialised
+     * @throws UnsupportedOperationException - TODO SERVLET3
+     */
     public ServletRegistration.Dynamic addServlet(String servletName,
-            String className) throws IllegalStateException {
+            String servletClass) throws IllegalStateException {
         
-        if (context.initialized) {
-            //TODO Spec breaking enhancement to ignore this restriction
-            throw new IllegalStateException(
-                    sm.getString("applicationContext.addServlet.ise",
-                            getContextPath()));
-        }
-
-        if (context.findChild(servletName) != null) {
-            return null;
-        }
-
-        // TODO SERVLET3
-        return null;
+        return addServlet(servletName, servletClass, null);
     }
 
 
     public ServletRegistration.Dynamic addServlet(String servletName,
             Servlet servlet) throws IllegalStateException {
-        
-        if (context.initialized) {
-            //TODO Spec breaking enhancement to ignore this restriction
-            throw new IllegalStateException(
-                    sm.getString("applicationContext.addServlet.ise",
-                            getContextPath()));
-        }
-
-        if (context.findChild(servletName) != null) {
-            return null;
-        }
 
-        // TODO SERVLET3
-        return null;
+        return addServlet(servletName, null, servlet);
     }
 
     
     public ServletRegistration.Dynamic addServlet(String servletName,
             Class <? extends Servlet> servletClass)
     throws IllegalStateException {
+
+        return addServlet(servletName, servletClass.getName(), null);
+    }
+
+    private ServletRegistration.Dynamic addServlet(String servletName,
+            String servletClass, Servlet servlet) throws IllegalStateException {
         
         if (context.initialized) {
             //TODO Spec breaking enhancement to ignore this restriction
@@ -944,26 +970,59 @@ public class ApplicationContext
                     sm.getString("applicationContext.addServlet.ise",
                             getContextPath()));
         }
-
-        if (context.findChild(servletName) != null) {
-            return null;
+        
+        Wrapper wrapper = (Wrapper) context.findChild(servletName);
+        
+        // Assume a 'complete' FilterRegistration is one that has a class and
+        // a name
+        if (wrapper == null) {
+            wrapper = context.createWrapper();
+        } else {
+            if (wrapper.getName() != null &&
+                    wrapper.getServletClass() != null) {
+                return null;
+            }
         }
 
-        // TODO SERVLET3
-        return null;
-    }
+        // Name must already be set
+        if (servlet == null) {
+            wrapper.setServletClass(servletClass);
+        } else {
+            wrapper.setServletClass(servlet.getClass().getName());
+            wrapper.setServlet(servlet);
+       }
+        
+        return new ApplicationServletRegistration(wrapper, context);
+    } 
 
 
     public <T extends Servlet> T createServlet(Class<T> c)
     throws ServletException {
-        // TODO SERVLET3
-        return null;
+        try {
+            @SuppressWarnings("unchecked")
+            T servlet = (T) context.getInstanceManager().newInstance(c.getName());
+            return servlet;
+        } catch (IllegalAccessException e) {
+            throw new ServletException(e);
+        } catch (InvocationTargetException e) {
+            throw new ServletException(e);
+        } catch (NamingException e) {
+            throw new ServletException(e);
+        } catch (InstantiationException e) {
+            throw new ServletException(e);
+        } catch (ClassNotFoundException e) {
+            throw new ServletException(e);
+        }
     }
 
 
     public ServletRegistration getServletRegistration(String servletName) {
-        // TODO SERVLET3
-        return null;
+        Wrapper wrapper = (Wrapper) context.findChild(servletName);
+        if (wrapper == null) {
+            return null;
+        }
+        
+        return new ApplicationServletRegistration(wrapper, context);
     }
     
 
@@ -1058,8 +1117,12 @@ public class ApplicationContext
 
     @Override
     public boolean setInitParameter(String name, String value) {
-        // TODO SERVLET3
-        return false;
+        if (parameters.containsKey(name)) {
+            return false;
+        }
+        
+        parameters.put(name, value);
+        return true;
     }
     
     
@@ -1091,14 +1154,50 @@ public class ApplicationContext
 
     @Override
     public void declareRoles(String... roleNames) {
-        // TODO SERVLET3
+        
+        if (context.initialized) {
+            //TODO Spec breaking enhancement to ignore this restriction
+            throw new IllegalStateException(
+                    sm.getString("applicationContext.addRole.ise",
+                            getContextPath()));
+        }
+        
+        if (roleNames == null) {
+            throw new IllegalArgumentException(
+                    sm.getString("applicationContext.roles.iae",
+                            getContextPath()));
+        }
+        
+        for (String role : roleNames) {
+            if (role == null || "".equals(role)) {
+                throw new IllegalArgumentException(
+                        sm.getString("applicationContext.role.iae",
+                                getContextPath()));
+            }
+            context.addSecurityRole(role);
+        }
     }
 
 
     @Override
     public ClassLoader getClassLoader() {
-        // TODO SERVLET3
-        return null;
+        ClassLoader result = context.getLoader().getClassLoader();
+        if (Globals.IS_SECURITY_ENABLED) {
+            ClassLoader tccl = Thread.currentThread().getContextClassLoader();
+            ClassLoader parent = result;
+            while (parent != null) {
+                if (parent == tccl) {
+                    break;
+                }
+                parent = parent.getParent();
+            }
+            if (parent == null) {
+                System.getSecurityManager().checkPermission(
+                        new RuntimePermission("getClassLoader"));
+            }
+        }
+        
+        return result;
     }
 
 
@@ -1250,10 +1349,15 @@ public class ApplicationContext
      * Get full path, based on the host name and the context path.
      */
     private static String getJNDIUri(String hostName, String path) {
-        if (!path.startsWith("/"))
-            return "/" + hostName + "/" + path;
-        else
-            return "/" + hostName + path;
+        String result;
+        
+        if (path.startsWith("/")) {
+            result = "/" + hostName + path;
+        } else {
+            result = "/" + hostName + "/" + path;
+        }
+        
+        return result;
     }
 
 

==================================================
ApplicationServletRegistration.java
index 0ede505483..205568f86e 100644
--- a/java/org/apache/catalina/core/ApplicationFilterConfig.java
+++ b/java/org/apache/catalina/core/ApplicationFilterConfig.java
@@ -57,6 +57,7 @@ import org.apache.tomcat.util.modeler.Registry;
 
 public final class ApplicationFilterConfig implements FilterConfig, Serializable {
 
+    private static final long serialVersionUID = 1L;
 
     protected static final StringManager sm =
         StringManager.getManager(Constants.Package);
@@ -95,7 +96,11 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
 
         this.context = context;
         setFilterDef(filterDef);
-
+        if (filterDef.getFilter() != null) {
+            this.filter = filterDef.getFilter();
+            getInstanceManager().newInstance(filter);
+            initFilter();
+        }
     }
 
 
@@ -156,10 +161,11 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
     public String getInitParameter(String name) {
 
         Map<String,String> map = filterDef.getParameterMap();
-        if (map == null)
+        if (map == null) {
             return (null);
-        else
-            return map.get(name);
+        }
+
+        return map.get(name);
 
     }
 
@@ -171,10 +177,11 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
     public Enumeration<String> getInitParameterNames() {
         Map<String,String> map = filterDef.getParameterMap();
         
-        if (map == null)
+        if (map == null) {
             return (new Enumerator<String>(new ArrayList<String>()));
-        else
-            return (new Enumerator<String>(map.keySet()));
+        }
+
+        return new Enumerator<String>(map.keySet());
 
     }
 
@@ -184,7 +191,7 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
      */
     public ServletContext getServletContext() {
 
-        return (this.context.getServletContext());
+        return this.context.getServletContext();
 
     }
 
@@ -239,16 +246,23 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
         // Identify the class loader we will be using
         String filterClass = filterDef.getFilterClass();
         this.filter = (Filter) getInstanceManager().newInstance(filterClass);
+        
+        initFilter();
+        
+        return (this.filter);
+
+    }
 
+    private void initFilter() throws ServletException {
         if (context instanceof StandardContext &&
                 context.getSwallowOutput()) {
             try {
                 SystemLogHandler.startCapture();
                 filter.init(this);
             } finally {
-                String log = SystemLogHandler.stopCapture();
-                if (log != null && log.length() > 0) {
-                    getServletContext().log(log);
+                String capturedlog = SystemLogHandler.stopCapture();
+                if (capturedlog != null && capturedlog.length() > 0) {
+                    getServletContext().log(capturedlog);
                 }
             }
         } else {
@@ -257,12 +271,8 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
         
         // Expose filter via JMX
         registerJMX();
-        
-        return (this.filter);
-
     }
 
-
     /**
      * Return the filter definition we are configured for.
      */

==================================================
StandardContext.java
index f5407c13fb..465424fbbe 100644
--- a/java/org/apache/catalina/core/LocalStrings.properties
+++ b/java/org/apache/catalina/core/LocalStrings.properties
@@ -14,11 +14,14 @@
 # limitations under the License.
 
 applicationContext.addFilter.ise=Filters can not be added to context {0} as the context has been initialised
+applicationContext.addRole.ise=Roles can not be added to context {0} as the context has been initialised
 applicationContext.addServlet.ise=Servlets can not be added to context {0} as the context has been initialised
 applicationContext.attributeEvent=Exception thrown by attributes event listener
 applicationContext.mapping.error=Error during mapping
 applicationContext.requestDispatcher.iae=Path {0} does not start with a "/" character
 applicationContext.resourcePaths.iae=Path {0} does not start with a "/" character
+applicationContext.role.iae=An individual role to declare for context [{0}] may not be null nor the empty string
+applicationContext.roles.iae=Array of roles to declare for context [{0}] cannot be null
 applicationContext.setAttribute.namenull=Name cannot be null
 applicationContext.addSessionCookieConfig.ise=Session Cookie configuration cannot be set for context {0} as the context has been initialised
 applicationContext.setSessionTracking.ise=The session tracking modes for context {0} cannot be set whilst the context is running
@@ -42,6 +45,8 @@ applicationRequest.badParent=Cannot locate parent Request implementation
 applicationRequest.badRequest=Request is not a javax.servlet.ServletRequestWrapper
 applicationResponse.badParent=Cannot locate parent Response implementation
 applicationResponse.badResponse=Response is not a javax.servlet.ServletResponseWrapper
+applicationServletRegistration.setServletSecurity.iae=Null constraint specified for servlet [{0}] deployed to context with path [{1}]
+applicationServletRegistration.setServletSecurity.ise=Security constraints can't be added to servlet [{0}] deployed to context with path [{1}] as the context has already been initialised
 aprListener.aprInit=The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: {0}
 aprListener.tcnInvalid=An incompatible version {0} of the APR based Apache Tomcat Native library is installed, while Tomcat requires version {1} 
 aprListener.tcnVersion=An older version {0} of the APR based Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of {1}

==================================================
StandardWrapper.java
index 047a1fa6d7..acb53e3bc1 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -2154,6 +2154,13 @@ public class StandardContext
     }
 
 
+    /**
+     * Has this context been initialized?
+     */
+    public boolean isInitialized() {
+        return initialized;
+    }
+
     // -------------------------------------------------------- Context Methods
 
 
@@ -5842,20 +5849,6 @@ public class StandardContext
         start();
     }
     
-    public int getState() {
-        if( started ) {
-            return 1; // RUNNING
-        }
-        if( initialized ) {
-            return 0; // starting ? 
-        }
-        if( ! available ) { 
-            return 4; //FAILED
-        }
-        // 2 - STOPPING
-        return 3; // STOPPED
-    }
-    
     /**
      * The J2EE Server ObjectName this module is deployed on.
      */     

==================================================
FilterDef.java
index b112c64c66..fb509ac778 100644
--- a/java/org/apache/catalina/core/StandardWrapper.java
+++ b/java/org/apache/catalina/core/StandardWrapper.java
@@ -648,6 +648,21 @@ public class StandardWrapper
     }
 
 
+    /**
+     * Return the associated servlet instance.
+     */
+    public Servlet getServlet() {
+        return instance;
+    }
+    
+    
+    /**
+     * Set the associated servlet instance.
+     */
+    public void setServlet(Servlet servlet) {
+        instance = servlet;
+    }
+
     // --------------------------------------------------------- Public Methods
 
 
@@ -764,14 +779,6 @@ public class StandardWrapper
     }
 
 
-    /**
-     * Return the associated servlet instance.
-     */
-    public Servlet getServlet() {
-        return instance;
-    }
-    
-    
     /**
      * Allocate an initialized instance of this Servlet that is ready to have
      * its <code>service()</code> method called.  If the servlet class does

==================================================
SecurityCollection.java
index c1a4833bf9..95c92af0e6 100644
--- a/java/org/apache/catalina/deploy/FilterDef.java
+++ b/java/org/apache/catalina/deploy/FilterDef.java
@@ -23,6 +23,8 @@ import java.util.HashMap;
 import java.util.Map;
 import java.io.Serializable;
 
+import javax.servlet.Filter;
+
 
 /**
  * Representation of a filter definition for a web application, as represented
@@ -66,7 +68,21 @@ public class FilterDef implements Serializable {
         this.displayName = displayName;
     }
 
+    
+    /**
+     * The filter instance associated with this definition
+     */
+    private Filter filter = null;
+    
+    public Filter getFilter() {
+        return filter;
+    }
 
+    public void setFilter(Filter filter) {
+        this.filter = filter;
+    }
+    
+    
     /**
      * The fully qualified name of the Java class that implements this filter.
      */

==================================================
SecurityConstraint.java
index 13223ced40..b2d0f7469e 100644
--- a/java/org/apache/catalina/deploy/SecurityCollection.java
+++ b/java/org/apache/catalina/deploy/SecurityCollection.java
@@ -115,6 +115,12 @@ public class SecurityCollection implements Serializable {
     private String patterns[] = new String[0];
 
 
+    /**
+     * This security collection was established by a deployment descriptor.
+     * Defaults to <code>true</code>.
+     */
+    private boolean isFromDescriptor = true;
+
     // ------------------------------------------------------------- Properties
 
 
@@ -162,6 +168,22 @@ public class SecurityCollection implements Serializable {
     }
 
 
+    /**
+     * Return if this constraint was defined in a deployment descriptor.
+     */
+    public boolean isFromDescriptor() {
+        return isFromDescriptor;
+    }
+
+
+    /**
+     * Set if this constraint was defined in a deployment descriptor.
+     */
+    public void setFromDescriptor(boolean isFromDescriptor) {
+        this.isFromDescriptor = isFromDescriptor;
+    }
+
+
     // --------------------------------------------------------- Public Methods
 
 

==================================================
TestSecurityConstraint.java
index 36958a4c34..f927d48f82 100644
--- a/java/org/apache/catalina/deploy/SecurityConstraint.java
+++ b/java/org/apache/catalina/deploy/SecurityConstraint.java
@@ -19,6 +19,16 @@
 package org.apache.catalina.deploy;
 
 import java.io.Serializable;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Set;
+
+import javax.servlet.HttpConstraintElement;
+import javax.servlet.HttpMethodConstraintElement;
+import javax.servlet.ServletSecurityElement;
+import javax.servlet.annotation.ServletSecurity;
+import javax.servlet.annotation.ServletSecurity.EmptyRoleSemantic;
 
 
 /**
@@ -459,4 +469,81 @@ public class SecurityConstraint implements Serializable {
     }
 
 
+    /**
+     * Convert a {@link ServletSecurityElement} to an array of
+     * {@link SecurityConstraint}(s).
+     * 
+     * @param element       The element to be converted
+     * @param urlPattern    The url pattern that the element should be applied
+     *                      to
+     * @return              The (possibly zero length) array of constraints that
+     *                      are the equivalent to the input
+     */
+    public static SecurityConstraint[] createConstraints(
+            ServletSecurityElement element, String urlPattern) {
+        Set<SecurityConstraint> result = new HashSet<SecurityConstraint>();
+        
+        // Add the per method constraints
+        Collection<HttpMethodConstraintElement> methods =
+            element.getHttpMethodConstraints();
+        Iterator<HttpMethodConstraintElement> methodIter = methods.iterator();
+        while (methodIter.hasNext()) {
+            HttpMethodConstraintElement methodElement = methodIter.next();
+            SecurityConstraint constraint =
+                createConstraint(methodElement, urlPattern, true);
+            // There will always be a single collection
+            SecurityCollection collection = constraint.findCollections()[0];
+            collection.addMethod(methodElement.getMethodName());
+            result.add(constraint);
+        }
+        
+        // Add the constraint for all the other methods
+        SecurityConstraint constraint = createConstraint(element, urlPattern, false);
+        if (constraint != null) {
+            // There will always be a single collection
+            SecurityCollection collection = constraint.findCollections()[0];
+            Iterator<String> ommittedMethod = element.getMethodNames().iterator();
+            while (ommittedMethod.hasNext()) {
+                collection.addOmittedMethod(ommittedMethod.next());
+            }
+            
+            result.add(constraint);
+            
+        }
+        
+        return result.toArray(new SecurityConstraint[result.size()]);
+    }
+    
+    private static SecurityConstraint createConstraint(
+            HttpConstraintElement element, String urlPattern, boolean alwaysCreate) {
+
+        SecurityConstraint constraint = new SecurityConstraint();
+        SecurityCollection collection = new SecurityCollection();
+        boolean create = alwaysCreate;
+        
+        if (element.getTransportGuarantee() !=
+                ServletSecurity.TransportGuarantee.NONE) {
+            constraint.setUserConstraint(element.getTransportGuarantee().name());
+            create = true;
+        }
+        if (element.getRolesAllowed().length > 0) {
+            String[] roles = element.getRolesAllowed();
+            for (String role : roles) {
+                constraint.addAuthRole(role);
+            }
+            create = true;
+        }
+        if (element.getEmptyRoleSemantic() != EmptyRoleSemantic.PERMIT) {
+            constraint.setAuthConstraint(true);
+            create = true;
+        }
+        
+        if (create) {
+            collection.addPattern(urlPattern);
+            constraint.addCollection(collection);
+            return constraint;
+        }
+        
+        return null;
+    }
 }

==================================================
