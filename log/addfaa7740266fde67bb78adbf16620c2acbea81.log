addfaa7740266fde67bb78adbf16620c2acbea81
==================================================
Add example support for CDI 2 and JAX-RS
==================================================
remm remm@apache.org
==================================================
Fri Jun 28 11:30:59 2019 +0200
==================================================
JsonBean.java
new file mode 100644
index 0000000000..d64ca45960
--- /dev/null
+++ b/modules/cxf/pom.xml
@@ -0,0 +1,169 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements. See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version
+    2.0 (the "License"); you may not use this file except in compliance
+    with the License. You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0 Unless required by
+    applicable law or agreed to in writing, software distributed under the
+    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
+    CONDITIONS OF ANY KIND, either express or implied. See the License for
+    the specific language governing permissions and limitations under the
+    License.
+-->
+
+    <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>org.apache</groupId>
+        <artifactId>apache</artifactId>
+        <version>21</version>
+    </parent>
+
+    <groupId>org.apache.tomcat</groupId>
+    <artifactId>tomcat-cxf</artifactId>
+    <name>Apache CXF for Apache Tomcat CDI</name>
+    <description>Apache CXF packaged for Apache Tomcat CDI</description>
+    <version>1.0</version>
+    <packaging>jar</packaging>
+
+    <properties>
+        <cxf.version>3.3.2</cxf.version>
+        <geronimo-jcdi.version>1.0.1</geronimo-jcdi.version>
+        <javax.json-api.version>1.1.4</javax.json-api.version>
+        <javax.json.bind-api.version>1.0</javax.json.bind-api.version>
+        <johnzon.version>1.1.12</johnzon.version>
+    </properties>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.geronimo.specs</groupId>
+            <artifactId>geronimo-jcdi_2.0_spec</artifactId>
+            <version>${geronimo-jcdi.version}</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>javax.json</groupId>
+            <artifactId>javax.json-api</artifactId>
+            <version>${javax.json-api.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>javax.json.bind</groupId>
+            <artifactId>javax.json.bind-api</artifactId>
+            <version>${javax.json.bind-api.version}</version>
+        </dependency>
+        <!-- Apache CXF -->
+        <dependency>
+            <groupId>org.apache.cxf</groupId>
+            <artifactId>cxf-integration-cdi</artifactId>
+            <version>${cxf.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.cxf</groupId>
+            <artifactId>cxf-rt-rs-client</artifactId>
+            <version>${cxf.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.cxf</groupId>
+            <artifactId>cxf-rt-frontend-jaxrs</artifactId>
+            <version>${cxf.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.cxf</groupId>
+            <artifactId>cxf-rt-rs-extension-providers</artifactId>
+            <version>${cxf.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.cxf</groupId>
+            <artifactId>cxf-rt-rs-json-basic</artifactId>
+            <version>${cxf.version}</version>
+        </dependency>
+        <!-- Apache Johnzon -->
+        <dependency>
+            <groupId>org.apache.johnzon</groupId>
+            <artifactId>johnzon-jsonb</artifactId>
+            <version>${johnzon.version}</version>
+        </dependency>
+    </dependencies>
+
+    <build>
+        <plugins>
+            <!-- Build any extra classes for your custom Tomcat components if needed -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <version>3.5.1</version>
+                <configuration>
+                    <source>1.8</source>
+                    <target>1.8</target>
+                </configuration>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-shade-plugin</artifactId>
+                <version>3.0.0</version>
+                <executions>
+                    <execution>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>shade</goal>
+                        </goals>
+                        <configuration>
+                            <createDependencyReducedPom>false</createDependencyReducedPom>
+                            <transformers>
+                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
+                                    <resource>META-INF/cxf/bus-extensions.txt</resource>
+                                </transformer>
+                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
+                                    <mainClass>${mainClass}</mainClass>
+                                </transformer>
+                            </transformers>
+				            <artifactSet>
+                                <excludes>
+                                    <!-- Already present in Tomcat or in the CDI bundle -->
+                                    <exclude>javax.annotation:javax.annotation-api</exclude>
+									<exclude>javax.el:*</exclude>
+									<exclude>javax.enterprise:cdi-api</exclude>
+									<exclude>javax.inject:*</exclude>
+									<exclude>javax.interceptor:*</exclude>
+									<!-- Exclude other unneeded dependencies -->
+									<exclude>org.apache.ant:*</exclude>
+									<exclude>org.codehaus.woodstox:*</exclude>
+									<exclude>org.glassfish.jaxb:*</exclude>
+									<exclude>org.jvnet.staxex:*</exclude>
+									<exclude>com.fasterxml.woodstox:*</exclude>
+									<exclude>com.sun.istack:*</exclude>
+									<exclude>com.sun.xml.*:*</exclude>
+								</excludes>
+                            </artifactSet>
+					        <filters>
+                                <filter>
+						            <artifact>*:*</artifact>
+						            <excludes>
+										<exclude>META-INF/*.SF</exclude>
+										<exclude>META-INF/*.DSA</exclude>
+										<exclude>META-INF/*.RSA</exclude>
+										<exclude>META-INF/LICENSE.txt</exclude>
+										<exclude>META-INF/LICENSE</exclude>
+										<exclude>META-INF/NOTICE.txt</exclude>
+										<exclude>META-INF/NOTICE</exclude>
+										<!-- Unneeded configuration files -->
+										<exclude>META-INF/cxf/cxf.*</exclude>
+										<exclude>META-INF/cxf/cxf-servlet.*</exclude>
+										<exclude>META-INF/cxf/org.apache.cxf.bus.factory</exclude>
+										<exclude>META-INF/services/org.apache.cxf.bus.factory</exclude>
+										<exclude>META-INF/spring.*</exclude>
+						            </excludes>
+                                </filter>
+					        </filters>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+        </plugins>
+    </build>
+</project>

==================================================
OpenWebBeansContextLifecycleListener.java
new file mode 100644
index 0000000000..9e63efee1d
--- /dev/null
+++ b/modules/owb/pom.xml
@@ -0,0 +1,119 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements. See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version
+    2.0 (the "License"); you may not use this file except in compliance
+    with the License. You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0 Unless required by
+    applicable law or agreed to in writing, software distributed under the
+    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
+    CONDITIONS OF ANY KIND, either express or implied. See the License for
+    the specific language governing permissions and limitations under the
+    License.
+-->
+
+    <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>org.apache</groupId>
+        <artifactId>apache</artifactId>
+        <version>21</version>
+    </parent>
+
+    <groupId>org.apache.tomcat</groupId>
+    <artifactId>tomcat-owb</artifactId>
+    <name>Apache Tomcat CDI 2 support</name>
+    <description>Apache Tomcat CDI 2 support using Apache OpenWebBeans</description>
+    <version>1.0</version>
+    <packaging>jar</packaging>
+
+    <properties>
+        <geronimo-atinject.version>1.0</geronimo-atinject.version>
+        <geronimo-interceptor.version>1.0</geronimo-interceptor.version>
+        <geronimo-jcdi.version>1.0.1</geronimo-jcdi.version>
+        <owb.version>2.0.10</owb.version>
+        <tomcat.version>9.0.21</tomcat.version>
+    </properties>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.geronimo.specs</groupId>
+            <artifactId>geronimo-atinject_1.0_spec</artifactId>
+           <version>${geronimo-atinject.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.geronimo.specs</groupId>
+            <artifactId>geronimo-interceptor_1.2_spec</artifactId>
+            <version>${geronimo-interceptor.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.geronimo.specs</groupId>
+            <artifactId>geronimo-jcdi_2.0_spec</artifactId>
+            <version>${geronimo-jcdi.version}</version>
+        </dependency>
+        <!-- Apache OpenWebBeans -->
+        <dependency>
+            <groupId>org.apache.openwebbeans</groupId>
+            <artifactId>openwebbeans-spi</artifactId>
+            <version>${owb.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.openwebbeans</groupId>
+            <artifactId>openwebbeans-impl</artifactId>
+            <version>${owb.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.openwebbeans</groupId>
+            <artifactId>openwebbeans-web</artifactId>
+            <version>${owb.version}</version>
+        </dependency>
+        <!-- Allows building integration code, temporarily located here -->
+        <dependency>
+            <groupId>org.apache.tomcat</groupId>
+            <artifactId>tomcat-catalina</artifactId>
+            <version>${tomcat.version}</version>
+            <scope>provided</scope>
+        </dependency>
+    </dependencies>
+
+
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <version>3.5.1</version>
+                <configuration>
+                    <source>1.8</source>
+                    <target>1.8</target>
+                </configuration>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-shade-plugin</artifactId>
+                <version>3.0.0</version>
+                <executions>
+                    <execution>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>shade</goal>
+                        </goals>
+                        <configuration>
+                            <createDependencyReducedPom>false</createDependencyReducedPom>
+                            <transformers>
+                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
+                                    <mainClass>${mainClass}</mainClass>
+                                </transformer>
+                            </transformers>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+        </plugins>
+    </build>
+
+</project>

==================================================
OpenWebBeansInstanceManager.java
new file mode 100644
index 0000000000..909c7f47b7
--- /dev/null
+++ b/modules/owb/src/main/java/org/apache/webbeans/web/tomcat/OpenWebBeansContextLifecycleListener.java
@@ -0,0 +1,121 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.webbeans.web.tomcat;
+
+import java.util.LinkedList;
+
+import org.apache.catalina.Context;
+import org.apache.catalina.Lifecycle;
+import org.apache.catalina.LifecycleEvent;
+import org.apache.catalina.LifecycleListener;
+import org.apache.catalina.Pipeline;
+import org.apache.catalina.Valve;
+import org.apache.tomcat.InstanceManager;
+import org.apache.webbeans.servlet.WebBeansConfigurationListener;
+
+
+/**
+ * Context lifecycle listener.
+ */
+public class OpenWebBeansContextLifecycleListener implements LifecycleListener {
+
+    /**
+     * Start without a beans.xml file.
+     */
+    protected boolean startWithoutBeansXml = true;
+
+    /**
+     * @return the startWithoutBeansXml
+     */
+    public boolean getStartWithoutBeansXml() {
+        return startWithoutBeansXml;
+    }
+
+    /**
+     * @param startWithoutBeansXml the startWithoutBeansXml to set
+     */
+    public void setStartWithoutBeansXml(boolean startWithoutBeansXml) {
+        this.startWithoutBeansXml = startWithoutBeansXml;
+    }
+
+    @Override
+    public void lifecycleEvent(LifecycleEvent event) {
+        if (event.getSource() instanceof Context) {
+            Context context = (Context) event.getSource();
+            if (event.getType().equals(Lifecycle.CONFIGURE_START_EVENT)) {
+                if (getStartWithoutBeansXml()
+                        || context.getResources().getResource("/WEB-INF/beans.xml").exists()
+                        || context.getResources().getResource("/WEB-INF/classes/META-INF/beans.xml").exists()) {
+                    // Registering ELResolver with JSP container
+                    System.setProperty("org.apache.webbeans.application.jsp", "true");
+                    // Add Listeners
+                    String[] oldListeners = context.findApplicationListeners();
+                    LinkedList<String> listeners = new LinkedList<>();
+                    listeners.addFirst(WebBeansConfigurationListener.class.getName());
+                    for (String listener : oldListeners) {
+                        listeners.add(listener);
+                        context.removeApplicationListener(listener);
+                    }
+                    for (String listener : listeners) {
+                        context.addApplicationListener(listener);
+                    }
+                    Pipeline pipeline = context.getPipeline();
+                    // Add to the corresponding pipeline to get a notification once configure is done
+                    if (pipeline instanceof Lifecycle) {
+                        boolean contextLifecycleListenerFound = false;
+                        for (LifecycleListener listener : ((Lifecycle) pipeline).findLifecycleListeners()) {
+                            if (listener instanceof OpenWebBeansContextLifecycleListener) {
+                                contextLifecycleListenerFound = true;
+                            }
+                        }
+                        if (!contextLifecycleListenerFound) {
+                            ((Lifecycle) pipeline).addLifecycleListener(this);
+                        }
+                    }
+                    // Add security valve
+                    boolean securityValveFound = false;
+                    for (Valve valve : pipeline.getValves()) {
+                        if (valve instanceof OpenWebBeansSecurityValve) {
+                            securityValveFound = true;
+                        }
+                    }
+                    if (!securityValveFound) {
+                        pipeline.addValve(new OpenWebBeansSecurityValve());
+                    }
+                }
+            }
+        } else if (event.getSource() instanceof Pipeline && event.getType().equals(Lifecycle.START_EVENT)) {
+            // This notification occurs once the configuration is fully done, including naming resources setup
+            // Otherwise, the instance manager is not ready for creation
+            Pipeline pipeline = (Pipeline) event.getSource();
+            if (pipeline.getContainer() instanceof Context) {
+                Context context = (Context) pipeline.getContainer();
+                if (!(context.getInstanceManager() instanceof OpenWebBeansInstanceManager)) {
+                    InstanceManager processor = context.getInstanceManager();
+                    if (processor == null) {
+                        processor = context.createInstanceManager();
+                    }
+                    InstanceManager custom = new OpenWebBeansInstanceManager(context.getLoader().getClassLoader(), processor);
+                    context.setInstanceManager(custom);
+                }
+            }
+        }
+    }
+
+}

==================================================
OpenWebBeansListener.java
new file mode 100644
index 0000000000..6ccc9e3f19
--- /dev/null
+++ b/modules/owb/src/main/java/org/apache/webbeans/web/tomcat/OpenWebBeansInstanceManager.java
@@ -0,0 +1,141 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.webbeans.web.tomcat;
+
+import java.lang.reflect.InvocationTargetException;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+
+import javax.enterprise.context.spi.CreationalContext;
+import javax.enterprise.inject.spi.BeanManager;
+import javax.enterprise.inject.spi.Producer;
+import javax.naming.NamingException;
+
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.InstanceManager;
+import org.apache.tomcat.util.res.StringManager;
+import org.apache.webbeans.config.WebBeansContext;
+import org.apache.webbeans.container.BeanManagerImpl;
+import org.apache.webbeans.inject.OWBInjector;
+
+public class OpenWebBeansInstanceManager implements InstanceManager {
+
+    private static final Log log = LogFactory.getLog(OpenWebBeansInstanceManager.class);
+    private static final StringManager sm = StringManager.getManager(OpenWebBeansInstanceManager.class);
+
+    private final ClassLoader loader;
+    private final InstanceManager instanceManager;
+    private final Map<Object, Instance> instances = new ConcurrentHashMap<>();
+    private static final class Instance {
+        private final Object object;
+        private final CreationalContext<?> context;
+        private Instance(Object object, CreationalContext<?> context) {
+            this.object = object;
+            this.context = context;
+        }
+    }
+
+    public OpenWebBeansInstanceManager(ClassLoader loader, InstanceManager instanceManager) {
+        this.loader = loader;
+        this.instanceManager = instanceManager;
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void destroyInstance(Object object)
+            throws IllegalAccessException, InvocationTargetException {
+        Instance injectorInstance = instances.get(object);
+        if (injectorInstance != null) {
+            try {
+                ClassLoader oldLoader = Thread.currentThread().getContextClassLoader();
+                Thread.currentThread().setContextClassLoader(loader);
+                try {
+                    BeanManagerImpl beanManager = WebBeansContext.currentInstance().getBeanManagerImpl();
+                    @SuppressWarnings("rawtypes")
+                    Producer producer = beanManager.getProducerForJavaEeComponent(injectorInstance.object.getClass());
+                    if (producer != null) {
+                        producer.dispose(injectorInstance.object);
+                    } else if (injectorInstance.context != null) {
+                        injectorInstance.context.release();
+                    }
+                } finally {
+                    Thread.currentThread().setContextClassLoader(oldLoader);
+                }
+            } catch (Exception e) {
+                log.error(sm.getString("instanceManager.destroyError", object), e);
+            }
+        }
+        this.instanceManager.destroyInstance(object);
+    }
+
+    @Override
+    public Object newInstance(Class<?> aClass) throws IllegalAccessException,
+            InvocationTargetException, NamingException, InstantiationException,
+            IllegalArgumentException, NoSuchMethodException, SecurityException {
+        Object object = this.instanceManager.newInstance(aClass);
+        inject(object);
+        return object;
+    }
+
+    @Override
+    public Object newInstance(String str)
+            throws IllegalAccessException, InvocationTargetException,
+            NamingException, InstantiationException, ClassNotFoundException,
+            IllegalArgumentException, NoSuchMethodException, SecurityException {
+        Object object = this.instanceManager.newInstance(str);
+        inject(object);
+        return object;
+    }
+
+    @Override
+    public void newInstance(Object object) throws IllegalAccessException,
+            InvocationTargetException, NamingException {
+        inject(object);
+    }
+
+    @Override
+    public Object newInstance(String str, ClassLoader cl)
+            throws IllegalAccessException, InvocationTargetException,
+            NamingException, InstantiationException, ClassNotFoundException,
+            IllegalArgumentException, NoSuchMethodException, SecurityException {
+        Object object = this.instanceManager.newInstance(str, cl);
+        inject(object);
+        return object;
+    }
+
+    private void inject(Object object) {
+        try {
+            ClassLoader oldLoader = Thread.currentThread().getContextClassLoader();
+            Thread.currentThread().setContextClassLoader(loader);
+            CreationalContext<?> context = null;
+            try {
+                BeanManager beanManager = WebBeansContext.currentInstance().getBeanManagerImpl();
+                context = beanManager.createCreationalContext(null);
+                OWBInjector.inject(beanManager, object, context);
+            } finally {
+                Thread.currentThread().setContextClassLoader(oldLoader);
+            }
+            instances.put(object, new Instance(object, context));
+        } catch (Exception e) {
+            log.error(sm.getString("instanceManager.injectError", object), e);
+        }
+    }
+
+}

==================================================
OpenWebBeansSecurityValve.java
new file mode 100644
index 0000000000..dcab4746ee
--- /dev/null
+++ b/modules/owb/src/main/java/org/apache/webbeans/web/tomcat/OpenWebBeansListener.java
@@ -0,0 +1,61 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.webbeans.web.tomcat;
+
+import org.apache.catalina.Context;
+import org.apache.catalina.LifecycleListener;
+import org.apache.catalina.core.FrameworkListener;
+
+/**
+ * This listener must be declared in server.xml as a Server listener to be active.
+ * It will add OpenWebBeansContextLifecycleListener on all contexts.
+ */
+public class OpenWebBeansListener extends FrameworkListener {
+
+    public OpenWebBeansListener() {
+        // Try loading a class from OpenWebBeans to make sure it is available
+        new org.apache.webbeans.exception.WebBeansConfigurationException("");
+    }
+
+    @Override
+    protected LifecycleListener createLifecycleListener(Context context) {
+        OpenWebBeansContextLifecycleListener listener = new OpenWebBeansContextLifecycleListener();
+        listener.setStartWithoutBeansXml(getStartWithoutBeansXml());
+        return listener;
+    }
+
+    /**
+     * Start without a beans.xml file.
+     */
+    protected boolean startWithoutBeansXml = true;
+
+    /**
+     * @return the startWithoutBeansXml
+     */
+    public boolean getStartWithoutBeansXml() {
+        return startWithoutBeansXml;
+    }
+
+    /**
+     * @param startWithoutBeansXml the startWithoutBeansXml to set
+     */
+    public void setStartWithoutBeansXml(boolean startWithoutBeansXml) {
+        this.startWithoutBeansXml = startWithoutBeansXml;
+    }
+
+}

==================================================
TomcatPlugin.java
new file mode 100644
index 0000000000..747f932f8d
--- /dev/null
+++ b/modules/owb/src/main/java/org/apache/webbeans/web/tomcat/OpenWebBeansSecurityValve.java
@@ -0,0 +1,59 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.webbeans.web.tomcat;
+
+import java.io.IOException;
+import java.security.Principal;
+
+import javax.servlet.ServletException;
+
+import org.apache.catalina.connector.Request;
+import org.apache.catalina.connector.Response;
+import org.apache.catalina.valves.ValveBase;
+
+
+/**
+ * Valve which sets the UserPrincipal into a ThreadLocal
+ * to make it injectable via a CDI Producer.
+ */
+public class OpenWebBeansSecurityValve extends ValveBase {
+
+    private static ThreadLocal<Principal> principal = new ThreadLocal<>();
+
+    public static Principal getPrincipal() {
+        return principal.get();
+    }
+
+    @Override
+    public void invoke(Request request, Response response)
+            throws IOException, ServletException {
+        Principal p = request.getUserPrincipal();
+        try {
+            if (p != null) {
+                principal.set(p);
+            }
+            getNext().invoke(request, response);
+        } finally {
+            if (p != null) {
+                principal.remove();
+            }
+        }
+    }
+
+}

==================================================
TomcatSecurityService.java
new file mode 100644
index 0000000000..7eb8f21b40
--- /dev/null
+++ b/modules/owb/src/main/java/org/apache/webbeans/web/tomcat/TomcatPlugin.java
@@ -0,0 +1,101 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.webbeans.web.tomcat;
+
+import javax.servlet.Filter;
+import javax.servlet.Servlet;
+import javax.servlet.ServletContextAttributeListener;
+import javax.servlet.ServletContextListener;
+import javax.servlet.ServletRequestAttributeListener;
+import javax.servlet.ServletRequestListener;
+import javax.servlet.http.HttpSessionActivationListener;
+import javax.servlet.http.HttpSessionAttributeListener;
+import javax.servlet.http.HttpSessionBindingListener;
+import javax.servlet.http.HttpSessionListener;
+
+import java.util.EventListener;
+
+import org.apache.tomcat.util.res.StringManager;
+import org.apache.webbeans.config.WebBeansContext;
+import org.apache.webbeans.exception.WebBeansConfigurationException;
+import org.apache.webbeans.spi.SecurityService;
+import org.apache.webbeans.spi.plugins.AbstractOwbPlugin;
+
+/**
+ * Tomcat plugin for OpenWebBeans.
+ */
+public class TomcatPlugin extends AbstractOwbPlugin {
+
+    private static final StringManager sm = StringManager.getManager(TomcatPlugin.class);
+
+    /**
+     * Security service implementation.
+     */
+    private final TomcatSecurityService securityService = new TomcatSecurityService(WebBeansContext.getInstance());
+
+    @Override
+    public <T> T getSupportedService(Class<T> serviceClass) {
+        if (serviceClass.equals(SecurityService.class)) {
+            return serviceClass.cast(this.securityService);
+        }
+        return null;
+    }
+
+    @Override
+    public void isManagedBean(Class<?> clazz) {
+        if (isServletSpecClass(clazz)) {
+            throw new WebBeansConfigurationException(sm.getString("plugin.notManagedBean", clazz.getName()));
+        }
+    }
+
+    @Override
+    public boolean supportsJavaEeComponentInjections(Class<?> clazz) {
+        if (isServletSpecClass(clazz)) {
+            return true;
+        }
+        return false;
+    }
+
+    private boolean isServletSpecClass(Class<?> clazz) {
+        if (Servlet.class.isAssignableFrom(clazz)
+                || Filter.class.isAssignableFrom(clazz)) {
+            return true;
+        }
+        if (EventListener.class.isAssignableFrom(clazz)) {
+            return ServletContextListener.class.isAssignableFrom(clazz)
+                    || ServletContextAttributeListener.class.isAssignableFrom(clazz)
+                    || HttpSessionActivationListener.class.isAssignableFrom(clazz)
+                    || HttpSessionAttributeListener.class.isAssignableFrom(clazz)
+                    || HttpSessionBindingListener.class.isAssignableFrom(clazz)
+                    || HttpSessionListener.class.isAssignableFrom(clazz)
+                    || ServletRequestListener.class.isAssignableFrom(clazz)
+                    || ServletRequestAttributeListener.class.isAssignableFrom(clazz);
+        }
+        return false;
+    }
+
+    @Override
+    public boolean supportService(Class<?> serviceClass) {
+        if (serviceClass.equals(SecurityService.class)) {
+            return true;
+        }
+        return false;
+    }
+
+}

==================================================
