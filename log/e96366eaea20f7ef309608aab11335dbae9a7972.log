e96366eaea20f7ef309608aab11335dbae9a7972
==================================================
Converting tribes tests to JUnit 4 - done.
==================================================
Konstantin Kolinko
==================================================
Tue Jul 26 02:58:29 2011 +0000
==================================================
TestDataIntegrity.java
Converting tribes tests to JUnit 4 - done.
Update changelog.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1150975 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestMulticastPackages.java
index 2ee037f00c..2a77a5c38c 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestDataIntegrity.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestDataIntegrity.java
@@ -20,7 +20,11 @@ import java.io.Serializable;
 import java.util.Arrays;
 import java.util.Random;
 
-import junit.framework.TestCase;
+import static org.junit.Assert.assertEquals;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
 
 import org.apache.catalina.tribes.Channel;
 import org.apache.catalina.tribes.ChannelListener;
@@ -38,16 +42,18 @@ import org.apache.catalina.tribes.group.interceptors.MessageDispatch15Intercepto
  * @author not attributable
  * @version 1.0
  */
-public class TestDataIntegrity extends TestCase {
-    int msgCount = 500;
-    int threadCount = 20;
-    GroupChannel channel1;
-    GroupChannel channel2;
-    Listener listener1;
-    int threadCounter = 0;
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
+public class TestDataIntegrity {
+    private int msgCount = 500;
+    private int threadCount = 20;
+    private GroupChannel channel1;
+    private GroupChannel channel2;
+    private Listener listener1;
+
+    @SuppressWarnings("unused")
+    private int threadCounter = 0;
+
+    @Before
+    public void setUp() throws Exception {
         channel1 = new GroupChannel();
         channel1.addInterceptor(new MessageDispatch15Interceptor());
         channel2 = new GroupChannel();
@@ -58,13 +64,13 @@ public class TestDataIntegrity extends TestCase {
         channel2.start(Channel.DEFAULT);
     }
 
-    @Override
-    protected void tearDown() throws Exception {
-        super.tearDown();
+    @After
+    public void tearDown() throws Exception {
         channel1.stop(Channel.DEFAULT);
         channel2.stop(Channel.DEFAULT);
     }
 
+    @Test
     public void testDataSendNO_ACK() throws Exception {
         System.err.println("Starting NO_ACK");
         Thread[] threads = new Thread[threadCount];
@@ -94,6 +100,7 @@ public class TestDataIntegrity extends TestCase {
         assertEquals("Checking success messages.",msgCount*threadCount,listener1.count);
     }
 
+    @Test
     public void testDataSendASYNCM() throws Exception {
             System.err.println("Starting ASYNC MULTI THREAD");
             Thread[] threads = new Thread[threadCount];
@@ -122,6 +129,8 @@ public class TestDataIntegrity extends TestCase {
             System.err.println("Finished ASYNC MULTI THREAD ["+listener1.count+"]");
             assertEquals("Checking success messages.",msgCount*threadCount,listener1.count);
     }
+
+    @Test
     public void testDataSendASYNC() throws Exception {
         System.err.println("Starting ASYNC");
         for (int i=0; i<msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(),Channel.SEND_OPTIONS_ASYNCHRONOUS);
@@ -132,6 +141,7 @@ public class TestDataIntegrity extends TestCase {
         assertEquals("Checking success messages.",msgCount,listener1.count);
     }
 
+    @Test
     public void testDataSendACK() throws Exception {
         System.err.println("Starting ACK");
         for (int i=0; i<msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(),Channel.SEND_OPTIONS_USE_ACK);
@@ -140,6 +150,7 @@ public class TestDataIntegrity extends TestCase {
         assertEquals("Checking success messages.",msgCount,listener1.count);
     }
 
+    @Test
     public void testDataSendSYNCACK() throws Exception {
         System.err.println("Starting SYNC_ACK");
         for (int i=0; i<msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(),Channel.SEND_OPTIONS_SYNCHRONIZED_ACK|Channel.SEND_OPTIONS_USE_ACK);

==================================================
TestRemoteProcessException.java
index 46552f8318..b325ddc8ff 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestMulticastPackages.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestMulticastPackages.java
@@ -22,7 +22,11 @@ import java.util.Random;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 
-import junit.framework.TestCase;
+import static org.junit.Assert.assertEquals;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
 
 import org.apache.catalina.tribes.Channel;
 import org.apache.catalina.tribes.ChannelListener;
@@ -38,16 +42,18 @@ import org.apache.catalina.tribes.transport.ReplicationTransmitter;
 
 /**
  */
-public class TestMulticastPackages extends TestCase {
-    int msgCount = 500;
-    int threadCount = 20;
-    GroupChannel channel1;
-    GroupChannel channel2;
-    Listener listener1;
-    int threadCounter = 0;
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
+public class TestMulticastPackages {
+    private int msgCount = 500;
+    private int threadCount = 20;
+    private GroupChannel channel1;
+    private GroupChannel channel2;
+    private Listener listener1;
+
+    @SuppressWarnings("unused")
+    private int threadCounter = 0;
+
+    @Before
+    public void setUp() throws Exception {
         channel1 = new GroupChannel();
         channel1.addInterceptor(new MessageDispatch15Interceptor());
         channel2 = new GroupChannel();
@@ -68,13 +74,13 @@ public class TestMulticastPackages extends TestCase {
         channel2.start(Channel.DEFAULT);
     }
 
-    @Override
-    protected void tearDown() throws Exception {
-        super.tearDown();
+    @After
+    public void tearDown() throws Exception {
         channel1.stop(Channel.DEFAULT);
         channel2.stop(Channel.DEFAULT);
     }
 
+    @Test
     public void testSingleDataSendNO_ACK() throws Exception {
         AbstractSender s1 =(AbstractSender) ((ReplicationTransmitter)channel1.getChannelSender()).getTransport();
         AbstractSender s2 =(AbstractSender) ((ReplicationTransmitter)channel2.getChannelSender()).getTransport();
@@ -96,6 +102,7 @@ public class TestMulticastPackages extends TestCase {
         System.out.println();
     }
 
+    @Test
     public void testDataSendASYNCM() throws Exception {
         final AtomicInteger counter = new AtomicInteger(0);
         ReceiverBase rb1 = (ReceiverBase)channel1.getChannelReceiver();
@@ -138,6 +145,8 @@ public class TestMulticastPackages extends TestCase {
         printMissingMsgs(listener1.nrs,counter.get());
         assertEquals("Checking success messages.",msgCount*threadCount,listener1.count.get());
     }
+
+    @Test
     public void testDataSendASYNC() throws Exception {
         System.err.println("Starting ASYNC");
         for (int i=0; i<msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(1024),Channel.SEND_OPTIONS_ASYNCHRONOUS|Channel.SEND_OPTIONS_MULTICAST);
@@ -148,6 +157,7 @@ public class TestMulticastPackages extends TestCase {
         assertEquals("Checking success messages.",msgCount,listener1.count.get());
     }
 
+    @Test
     public void testDataSendACK() throws Exception {
         System.err.println("Starting ACK");
         for (int i=0; i<msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(1024),Channel.SEND_OPTIONS_USE_ACK|Channel.SEND_OPTIONS_MULTICAST);
@@ -156,6 +166,7 @@ public class TestMulticastPackages extends TestCase {
         assertEquals("Checking success messages.",msgCount,listener1.count.get());
     }
 
+    @Test
     public void testDataSendSYNCACK() throws Exception {
         System.err.println("Starting SYNC_ACK");
         for (int i=0; i<msgCount; i++) channel1.send(new Member[] {channel2.getLocalMember(false)},Data.createRandomData(1024),Channel.SEND_OPTIONS_SYNCHRONIZED_ACK|Channel.SEND_OPTIONS_USE_ACK|Channel.SEND_OPTIONS_MULTICAST);

==================================================
TestUdpPackages.java
index 05e02ef420..bcfc5b012f 100644
--- a/test/org/apache/catalina/tribes/test/channel/TestRemoteProcessException.java
+++ b/test/org/apache/catalina/tribes/test/channel/TestRemoteProcessException.java
@@ -21,7 +21,11 @@ import java.io.Serializable;
 import java.util.Arrays;
 import java.util.Random;
 
-import junit.framework.TestCase;
+import static org.junit.Assert.assertEquals;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
 
 import org.apache.catalina.tribes.Channel;
 import org.apache.catalina.tribes.ChannelListener;
@@ -38,14 +42,14 @@ import org.apache.catalina.tribes.group.GroupChannel;
  * @author not attributable
  * @version 1.0
  */
-public class TestRemoteProcessException extends TestCase {
-    int msgCount = 10000;
-    GroupChannel channel1;
-    GroupChannel channel2;
-    Listener listener1;
-    @Override
-    protected void setUp() throws Exception {
-        super.setUp();
+public class TestRemoteProcessException {
+    private int msgCount = 10000;
+    private GroupChannel channel1;
+    private GroupChannel channel2;
+    private Listener listener1;
+
+    @Before
+    public void setUp() throws Exception {
         channel1 = new GroupChannel();
         channel2 = new GroupChannel();
         listener1 = new Listener();
@@ -54,13 +58,13 @@ public class TestRemoteProcessException extends TestCase {
         channel2.start(Channel.DEFAULT);
     }
 
-    @Override
-    protected void tearDown() throws Exception {
-        super.tearDown();
+    @After
+    public void tearDown() throws Exception {
         channel1.stop(Channel.DEFAULT);
         channel2.stop(Channel.DEFAULT);
     }
 
+    @Test
     public void testDataSendSYNCACK() throws Exception {
         System.err.println("Starting SYNC_ACK");
         int errC=0, nerrC=0;

==================================================
