a90ad87ae97fef89ec8ebc969faeffa957f2fff8
==================================================
Drop implementation specific InternalXxxOutputBuffer implementations and
==================================================
Mark Thomas
==================================================
Thu Jan 8 13:10:54 2015 +0000
==================================================
AbstractHttp11Processor.java
Drop implementation specific InternalXxxOutputBuffer implementations and
make the abstract base class the only concrete implementation.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1650279 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index f2f72680d8..aa90b34a9a 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -78,7 +78,7 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
     /**
      * Output.
      */
-    protected AbstractOutputBuffer<S> outputBuffer;
+    protected Http11OutputBuffer<S> outputBuffer;
 
 
     /**
@@ -624,7 +624,7 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
      * Exposes output buffer to super class to allow better code re-use.
      * @return  The output buffer used by the processor.
      */
-    protected AbstractOutputBuffer<S> getOutputBuffer() {
+    protected Http11OutputBuffer<S> getOutputBuffer() {
         return outputBuffer;
     }
 
@@ -858,12 +858,7 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
         }
         case NB_WRITE_INTEREST: {
             AtomicBoolean isReady = (AtomicBoolean)param;
-            try {
-                isReady.set(getOutputBuffer().isReady());
-            } catch (IOException e) {
-                getLog().debug("isReady() failed", e);
-                setErrorState(ErrorState.CLOSE_NOW, e);
-            }
+            isReady.set(getOutputBuffer().isReady());
             break;
         }
         case NB_READ_INTEREST: {

==================================================
Http11Nio2Processor.java
index df732863aa..ed12cf0c14 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -60,7 +60,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
         inputBuffer = new InternalAprInputBuffer(request, headerBufferSize);
         request.setInputBuffer(getInputBuffer());
 
-        outputBuffer = new InternalAprOutputBuffer(response, headerBufferSize);
+        outputBuffer = new Http11OutputBuffer<>(response, headerBufferSize);
         response.setOutputBuffer(getOutputBuffer());
 
         initializeFilters(maxTrailerSize, maxExtensionSize, maxSwallowSize);

==================================================
Http11NioProcessor.java
index 658412fd63..c6d136b0b3 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Processor.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Processor.java
@@ -64,7 +64,7 @@ public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
         inputBuffer = new InternalNio2InputBuffer(request, maxHttpHeaderSize);
         request.setInputBuffer(getInputBuffer());
 
-        outputBuffer = new InternalNio2OutputBuffer(response, maxHttpHeaderSize);
+        outputBuffer = new Http11OutputBuffer<>(response, maxHttpHeaderSize);
         response.setOutputBuffer(getOutputBuffer());
 
         initializeFilters(maxTrailerSize, maxExtensionSize, maxSwallowSize);
@@ -99,7 +99,7 @@ public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
             ((InternalNio2InputBuffer) getInputBuffer()).registerReadInterest();
         }
         if (write) {
-            ((InternalNio2OutputBuffer) getOutputBuffer()).registerWriteInterest();
+            ((Http11OutputBuffer<?>) getOutputBuffer()).registerWriteInterest();
         }
     }
 

==================================================
Http11OutputBuffer.java
index 3ca73d737d..87375ca24d 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -65,7 +65,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
         inputBuffer = new InternalNioInputBuffer(request, maxHttpHeaderSize);
         request.setInputBuffer(getInputBuffer());
 
-        outputBuffer = new InternalNioOutputBuffer(response, maxHttpHeaderSize);
+        outputBuffer = new Http11OutputBuffer<>(response, maxHttpHeaderSize);
         response.setOutputBuffer(getOutputBuffer());
 
         initializeFilters(maxTrailerSize, maxExtensionSize, maxSwallowSize);

==================================================
InternalAprOutputBuffer.java
similarity index 96%
rename from java/org/apache/coyote/http11/AbstractOutputBuffer.java
rename to java/org/apache/coyote/http11/Http11OutputBuffer.java
index 70a91d9e03..dfbdee6071 100644
--- a/java/org/apache/coyote/http11/AbstractOutputBuffer.java
+++ b/java/org/apache/coyote/http11/Http11OutputBuffer.java
@@ -33,7 +33,7 @@ import org.apache.tomcat.util.http.HttpMessages;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 import org.apache.tomcat.util.res.StringManager;
 
-public abstract class AbstractOutputBuffer<S> implements OutputBuffer {
+public class Http11OutputBuffer<S> implements OutputBuffer {
 
     // ----------------------------------------------------- Instance Variables
 
@@ -103,7 +103,7 @@ public abstract class AbstractOutputBuffer<S> implements OutputBuffer {
     protected long byteCount = 0;
 
 
-    protected AbstractOutputBuffer(Response response, int headerBufferSize) {
+    protected Http11OutputBuffer(Response response, int headerBufferSize) {
 
         this.response = response;
 
@@ -134,7 +134,7 @@ public abstract class AbstractOutputBuffer<S> implements OutputBuffer {
     /**
      * Logger.
      */
-    private static final Log log = LogFactory.getLog(AbstractOutputBuffer.class);
+    private static final Log log = LogFactory.getLog(Http11OutputBuffer.class);
 
     // ------------------------------------------------------------- Properties
 
@@ -344,6 +344,7 @@ public abstract class AbstractOutputBuffer<S> implements OutputBuffer {
 
     public void init(SocketWrapperBase<S> socketWrapper) {
         this.socketWrapper = socketWrapper;
+        // TODO: Ensure write buffer is >= header buffer size
     }
 
 
@@ -586,12 +587,16 @@ public abstract class AbstractOutputBuffer<S> implements OutputBuffer {
     }
 
 
-    protected abstract void addToBB(byte[] buf, int offset, int length) throws IOException;
+    protected void addToBB(byte[] buf, int offset, int length) throws IOException {
+        socketWrapper.write(isBlocking(), buf, offset, length);
+    }
 
 
     //------------------------------------------------------ Non-blocking writes
 
-    protected abstract void registerWriteInterest();
+    protected void registerWriteInterest() {
+        socketWrapper.registerWriteInterest();
+    }
 
 
     /**
@@ -602,7 +607,9 @@ public abstract class AbstractOutputBuffer<S> implements OutputBuffer {
      *          happen in non-blocking mode) else <code>false</code>.
      * @throws IOException
      */
-    protected abstract boolean flushBuffer(boolean block) throws IOException;
+    protected boolean flushBuffer(boolean block) throws IOException  {
+        return socketWrapper.flush(block);
+    }
 
 
     /**
@@ -613,7 +620,7 @@ public abstract class AbstractOutputBuffer<S> implements OutputBuffer {
     }
 
 
-    protected final boolean isReady() throws IOException {
+    protected final boolean isReady() {
         boolean result = !hasDataToWrite();
         if (!result) {
             registerWriteInterest();

==================================================
InternalNio2OutputBuffer.java
deleted file mode 100644
index 89c3c9303c..0000000000
--- a/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.apache.coyote.http11;
-
-import java.io.IOException;
-
-import org.apache.coyote.Response;
-
-/**
- * Output buffer.
- *
- * @author <a href="mailto:remm@apache.org">Remy Maucherat</a>
- */
-public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
-
-    // ----------------------------------------------------------- Constructors
-
-    /**
-     * Default constructor.
-     */
-    public InternalAprOutputBuffer(Response response, int headerBufferSize) {
-        super(response, headerBufferSize);
-    }
-
-
-    // ------------------------------------------------------ Protected Methods
-
-    @Override
-    protected synchronized void addToBB(byte[] buf, int offset, int length) throws IOException {
-        socketWrapper.write(isBlocking(), buf, offset, length);
-    }
-
-
-    @Override
-    protected boolean flushBuffer(boolean block) throws IOException {
-        return socketWrapper.flush(block);
-    }
-
-
-    @Override
-    protected void registerWriteInterest() {
-        socketWrapper.registerWriteInterest();
-    }
-}

==================================================
InternalNioOutputBuffer.java
deleted file mode 100644
index 2765caa75a..0000000000
--- a/java/org/apache/coyote/http11/InternalNio2OutputBuffer.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package org.apache.coyote.http11;
-
-import java.io.IOException;
-
-import org.apache.coyote.Response;
-import org.apache.tomcat.util.net.Nio2Channel;
-
-/**
- * Output buffer implementation for NIO2.
- */
-public class InternalNio2OutputBuffer extends AbstractOutputBuffer<Nio2Channel> {
-
-    // ----------------------------------------------------------- Constructors
-
-    /**
-     * Default constructor.
-     */
-    public InternalNio2OutputBuffer(Response response, int headerBufferSize) {
-        super(response, headerBufferSize);
-    }
-
-
-    // ------------------------------------------------------ Protected Methods
-
-    @Override
-    protected void addToBB(byte[] buf, int offset, int length) throws IOException {
-        socketWrapper.write(isBlocking(), buf, offset, length);
-    }
-
-
-    @Override
-    protected boolean flushBuffer(boolean block) throws IOException {
-        return socketWrapper.flush(block);
-    }
-
-
-    @Override
-    protected void registerWriteInterest() {
-        socketWrapper.registerWriteInterest();
-    }
-}

==================================================
TesterOutputBuffer.java
deleted file mode 100644
index f6ef3b41f5..0000000000
--- a/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.apache.coyote.http11;
-
-import java.io.IOException;
-
-import org.apache.coyote.Response;
-import org.apache.tomcat.util.net.NioChannel;
-
-/**
- * Output buffer.
- *
- * @author <a href="mailto:remm@apache.org">Remy Maucherat</a>
- */
-public class InternalNioOutputBuffer extends AbstractOutputBuffer<NioChannel> {
-
-    // ----------------------------------------------------------- Constructors
-
-    /**
-     * Default constructor.
-     */
-    public InternalNioOutputBuffer(Response response, int headerBufferSize) {
-        super(response, headerBufferSize);
-    }
-
-
-    // ------------------------------------------------------ Protected Methods
-
-    @Override
-    protected synchronized void addToBB(byte[] buf, int offset, int length) throws IOException {
-        socketWrapper.write(isBlocking(), buf, offset, length);
-    }
-
-
-    @Override
-    protected boolean flushBuffer(boolean block) throws IOException {
-        return socketWrapper.flush(block);
-    }
-
-
-    @Override
-    protected void registerWriteInterest() {
-        socketWrapper.registerWriteInterest();
-    }
-}

==================================================
