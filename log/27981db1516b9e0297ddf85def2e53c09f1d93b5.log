27981db1516b9e0297ddf85def2e53c09f1d93b5
==================================================
Refactor towards a single method for writing headers.
==================================================
Mark Thomas
==================================================
Wed May 3 20:59:53 2017 +0000
==================================================
Http2AsyncUpgradeHandler.java
Refactor towards a single method for writing headers.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1793716 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http2UpgradeHandler.java
index 125c63b139..f6648429d6 100644
--- a/java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java
@@ -133,7 +133,7 @@ public class Http2AsyncUpgradeHandler extends Http2UpgradeHandler {
 
 
     @Override
-    void writeHeaders(Stream stream, Response coyoteResponse, int payloadSize)
+    void writeHeaders(Stream stream, Response coyoteResponse, boolean endOfStream, int payloadSize)
             throws IOException {
         if (log.isDebugEnabled()) {
             log.debug(sm.getString("upgradeHandler.writeHeaders", connectionId,
@@ -144,8 +144,6 @@ public class Http2AsyncUpgradeHandler extends Http2UpgradeHandler {
             return;
         }
 
-        prepareHeaders(coyoteResponse);
-
         boolean first = true;
         State state = null;
         ArrayList<ByteBuffer> bufs = new ArrayList<>();
@@ -160,7 +158,7 @@ public class Http2AsyncUpgradeHandler extends Http2UpgradeHandler {
                 if (first) {
                     first = false;
                     header[3] = FrameType.HEADERS.getIdByte();
-                    if (stream.getOutputBuffer().hasNoBody()) {
+                    if (endOfStream) {
                         header[4] = FLAG_END_OF_STREAM;
                     }
                 } else {
@@ -194,6 +192,10 @@ public class Http2AsyncUpgradeHandler extends Http2UpgradeHandler {
                     stream.getIdentifier(), Integer.toString(pushedStreamId)));
         }
 
+        if (!stream.canWrite()) {
+            return;
+        }
+
         boolean first = true;
         State state = null;
         ArrayList<ByteBuffer> bufs = new ArrayList<>();

==================================================
Stream.java
index 5aff89fc1d..e88ad8a6f9 100644
--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java
@@ -49,8 +49,6 @@ import org.apache.coyote.http2.Http2Parser.Output;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.codec.binary.Base64;
-import org.apache.tomcat.util.http.FastHttpDateFormat;
-import org.apache.tomcat.util.http.MimeHeaders;
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.net.SSLSupport;
 import org.apache.tomcat.util.net.SocketEvent;
@@ -524,7 +522,7 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
         }
     }
 
-    void writeHeaders(Stream stream, Response coyoteResponse, int payloadSize)
+    void writeHeaders(Stream stream, Response coyoteResponse, boolean endOfStream, int payloadSize)
             throws IOException {
         if (log.isDebugEnabled()) {
             log.debug(sm.getString("upgradeHandler.writeHeaders", connectionId,
@@ -535,8 +533,6 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
             return;
         }
 
-        prepareHeaders(coyoteResponse);
-
         byte[] header = new byte[9];
         ByteBuffer target = ByteBuffer.allocate(payloadSize);
         boolean first = true;
@@ -551,7 +547,7 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
                     if (first) {
                         first = false;
                         header[3] = FrameType.HEADERS.getIdByte();
-                        if (stream.getOutputBuffer().hasNoBody()) {
+                        if (endOfStream) {
                             header[4] = FLAG_END_OF_STREAM;
                         }
                     } else {
@@ -582,34 +578,6 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
     }
 
 
-    protected void prepareHeaders(Response coyoteResponse) {
-        MimeHeaders headers = coyoteResponse.getMimeHeaders();
-        int statusCode = coyoteResponse.getStatus();
-
-        // Add the pseudo header for status
-        headers.addValue(":status").setString(Integer.toString(statusCode));
-
-        // Check to see if a response body is present
-        if (!(statusCode < 200 || statusCode == 205 || statusCode == 304)) {
-            String contentType = coyoteResponse.getContentType();
-            if (contentType != null) {
-                headers.setValue("content-type").setString(contentType);
-            }
-            String contentLanguage = coyoteResponse.getContentLanguage();
-            if (contentLanguage != null) {
-                headers.setValue("content-language").setString(contentLanguage);
-            }
-        }
-
-
-        // Add date header unless it is an informational response or the
-        // application has already set one
-        if (statusCode >= 200 && headers.getValue("date") == null) {
-            headers.addValue("date").setString(FastHttpDateFormat.getCurrentDate());
-        }
-    }
-
-
     protected void writePushHeaders(Stream stream, int pushedStreamId, Request coyoteRequest, int payloadSize)
             throws IOException {
         if (log.isDebugEnabled()) {
@@ -617,6 +585,10 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
                     stream.getIdentifier(), Integer.toString(pushedStreamId)));
         }
 
+        if (!stream.canWrite()) {
+            return;
+        }
+
         byte[] header = new byte[9];
         ByteBuffer target = ByteBuffer.allocate(payloadSize);
         boolean first = true;

==================================================
