9773865dff6db7165fefc9dc7a641d3e5b532f06
==================================================
Additional fix for https://bz.apache.org/bugzilla/show_bug.cgi?id=56917
==================================================
Mark Thomas
==================================================
Tue Dec 1 13:00:14 2015 +0000
==================================================
Context.java
Additional fix for https://bz.apache.org/bugzilla/show_bug.cgi?id=56917
Make relative redirects configurable

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1717418 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Response.java
index a59dff7db4..786eb28656 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -1716,4 +1716,36 @@ public interface Context extends Container, ContextBind {
      *         Context.
      */
     public boolean getMapperDirectoryRedirectEnabled();
+
+    /**
+     * Controls whether HTTP 1.1 and later location headers generated by a call
+     * to {@link javax.servlet.http.HttpServletResponse#sendRedirect(String)}
+     * will use relative or absolute redirects.
+     * <p>
+     * Relative redirects are more efficient but may not work with reverse
+     * proxies that change the context path. It should be noted that it is not
+     * recommended to use a reverse proxy to change the context path because of
+     * the multiple issues it creates.
+     * <p>
+     * Absolute redirects should work with reverse proxies that change the
+     * context path but may cause issues with the
+     * {@link org.apache.catalina.filters.RemoteIpFilter} if the filter is
+     * changing the scheme and/or port.
+     *
+     * @param useRelativeRedirects {@code true} to use relative redirects and
+     *                             {@code false} to use absolute redirects
+     */
+    public void setUseRelativeRedirects(boolean useRelativeRedirects);
+
+    /**
+     * Will HTTP 1.1 and later location headers generated by a call to
+     * {@link javax.servlet.http.HttpServletResponse#sendRedirect(String)} use
+     * relative or absolute redirects.
+     *
+     * @return {@code true} if relative redirects will be used {@code false} if
+     *         absolute redirects are used.
+     *
+     * @see #setUseRelativeRedirects(boolean)
+     */
+    public boolean getUseRelativeRedirects();
 }

==================================================
StandardContext.java
index 37dc20d231..f193f3b161 100644
--- a/java/org/apache/catalina/connector/Response.java
+++ b/java/org/apache/catalina/connector/Response.java
@@ -1288,7 +1288,14 @@ public class Response
 
         // Generate a temporary redirect to the specified location
         try {
-            String locationUri = URI.create(location).toASCIIString();
+            String locationUri;
+            // Relative redirects require HTTP/1.1
+            if (getRequest().getCoyoteRequest().getSupportsRelativeRedirects() &&
+                    getContext().getUseRelativeRedirects()) {
+                locationUri = URI.create(location).toASCIIString();
+            } else {
+                locationUri = toAbsolute(location);
+            }
             setStatus(status);
             setHeader("Location", locationUri);
             if (getContext().getSendRedirectBody()) {

==================================================
FailedContext.java
index 03fe3e1f64..c4de89ea48 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -817,13 +817,32 @@ public class StandardContext extends ContainerBase
 
     private boolean validateClientProvidedNewSessionId = true;
 
-    boolean mapperContextRootRedirectEnabled = false;
+    private boolean mapperContextRootRedirectEnabled = false;
 
-    boolean mapperDirectoryRedirectEnabled = false;
+    private boolean mapperDirectoryRedirectEnabled = false;
+
+    private boolean useRelativeRedirects = true;
 
 
     // ----------------------------------------------------- Context Properties
 
+    @Override
+    public void setUseRelativeRedirects(boolean useRelativeRedirects) {
+        this.useRelativeRedirects = useRelativeRedirects;
+    }
+
+
+    /**
+     * {@inheritDoc}
+     * <p>
+     * The default value for this implementation is {@code true}.
+     */
+    @Override
+    public boolean getUseRelativeRedirects() {
+        return useRelativeRedirects;
+    }
+
+
     @Override
     public void setMapperContextRootRedirectEnabled(boolean mapperContextRootRedirectEnabled) {
         this.mapperContextRootRedirectEnabled = mapperContextRootRedirectEnabled;

==================================================
Request.java
index 9a0407b6de..f566ce0447 100644
--- a/java/org/apache/catalina/startup/FailedContext.java
+++ b/java/org/apache/catalina/startup/FailedContext.java
@@ -785,4 +785,9 @@ public class FailedContext extends LifecycleMBeanBase implements Context {
 
     @Override
     public boolean getMapperDirectoryRedirectEnabled() { return false; }
+
+    @Override
+    public void setUseRelativeRedirects(boolean useRelativeRedirects) { /* NO-OP */ }
+    @Override
+    public boolean getUseRelativeRedirects() { return true; }
 }
\ No newline at end of file

==================================================
TesterContext.java
index 68af98b5e3..979a3dc4d2 100644
--- a/java/org/apache/coyote/Request.java
+++ b/java/org/apache/coyote/Request.java
@@ -471,6 +471,13 @@ public final class Request {
         return result.get();
     }
 
+    public boolean getSupportsRelativeRedirects() {
+        if (protocol().equals("") || protocol().equals("HTTP/1.0")) {
+            return false;
+        }
+        return true;
+    }
+
 
     // -------------------- Input Buffer --------------------
 

==================================================
