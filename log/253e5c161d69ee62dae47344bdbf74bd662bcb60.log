253e5c161d69ee62dae47344bdbf74bd662bcb60
==================================================
Align connectors - setting timeouts
==================================================
Mark Emlyn
==================================================
Tue Sep 6 16:05:29 2011 +0000
==================================================
AbstractHttp11Processor.java
Align connectors - setting timeouts

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1165738 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index c8448ba618..5141f0c0bf 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -830,6 +830,13 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
      */
     protected abstract boolean handleIncompleteRequestLineRead();
 
+
+    /**
+     * Set the socket timeout.
+     */
+    protected abstract void setSocketTimeout(int timeout) throws IOException;
+
+
     /**
      * After reading the request headers, we have to setup the request filters.
      */

==================================================
Http11NioProcessor.java
index 74e0ff29b8..2456145b45 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -194,8 +194,6 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
             socketWrapper.setKeepAliveLeft(0);
         }
 
-        long socketRef = socketWrapper.getSocket().longValue();
-
         while (!error && keepAlive && !comet && !isAsync() &&
                 !endpoint.isPaused()) {
 
@@ -226,8 +224,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
                         break;
                     }
                     if (!disableUploadTimeout) {
-                        Socket.timeoutSet(socketRef,
-                                connectionUploadTimeout * 1000);
+                        setSocketTimeout(connectionUploadTimeout);
                     }
                 }
             } catch (IOException e) {
@@ -328,7 +325,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
             }
 
             if (!disableUploadTimeout) {
-                Socket.timeoutSet(socketRef, endpoint.getSoTimeout() * 1000);
+                setSocketTimeout(endpoint.getSoTimeout());
             }
 
             rp.setStage(org.apache.coyote.Constants.STAGE_KEEPALIVE);
@@ -410,6 +407,12 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
     }
 
 
+    @Override
+    protected void setSocketTimeout(int timeout) {
+        Socket.timeoutSet(socket.getSocket().longValue(), timeout * 1000);
+    }
+    
+    
     @Override
     protected void setCometTimeouts(SocketWrapper<Long> socketWrapper) {
         // NO-OP for APR/native

==================================================
Http11Processor.java
index ab27485318..6c9791e30e 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -252,9 +252,8 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
                         readComplete = false;
                         break;
                     }
-                    if (!disableUploadTimeout) { //only for body, not for request headers
-                        socketWrapper.getSocket().getIOChannel().socket().setSoTimeout(
-                                connectionUploadTimeout);
+                    if (!disableUploadTimeout) {
+                        setSocketTimeout(connectionUploadTimeout);
                     }
                 }
             } catch (IOException e) {
@@ -354,9 +353,8 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
                 outputBuffer.nextRequest();
             }
 
-            if (!disableUploadTimeout) { //only for body, not for request headers
-                socketWrapper.getSocket().getIOChannel().socket().setSoTimeout(
-                        endpoint.getSoTimeout());
+            if (!disableUploadTimeout) {
+                setSocketTimeout(endpoint.getSoTimeout());
             }
 
             rp.setStage(org.apache.coyote.Constants.STAGE_KEEPALIVE);
@@ -446,6 +444,12 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
     }
 
 
+    @Override
+    protected void setSocketTimeout(int timeout) throws IOException {
+        socket.getSocket().getIOChannel().socket().setSoTimeout(timeout);
+    }
+
+    
     @Override
     protected void setCometTimeouts(SocketWrapper<NioChannel> socketWrapper) {
         // Comet support

==================================================
