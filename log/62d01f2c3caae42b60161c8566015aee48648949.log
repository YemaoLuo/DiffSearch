62d01f2c3caae42b60161c8566015aee48648949
==================================================
- Start work on comet support. Note: it doesn't work yet, I think (I didn't test), and most of this
==================================================
Remy Maucherat
==================================================
Wed May 17 12:55:39 2006 +0000
==================================================
CometProcessor.java
- Start work on comet support. Note: it doesn't work yet, I think (I didn't test), and most of this
  is very preliminary. It is relatively straightforward, though.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@407241 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CoyoteAdapter.java
new file mode 100644
index 0000000000..1c219ddb22
--- /dev/null
+++ b/java/org/apache/catalina/CometProcessor.java
@@ -0,0 +1,21 @@
+package org.apache.catalina;
+
+import java.io.IOException;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+public interface CometProcessor {
+
+    public void begin(HttpServletRequest request, HttpServletResponse response)
+        throws IOException, ServletException;
+    public void end(HttpServletRequest request, HttpServletResponse response)
+        throws IOException, ServletException;
+
+    public void error(HttpServletRequest request, HttpServletResponse response)
+        throws IOException, ServletException;
+    public void read(HttpServletRequest request, HttpServletResponse response)
+        throws IOException, ServletException;
+
+}

==================================================
Request.java
index a10a4d5488..ace2985c3f 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -19,6 +19,7 @@ package org.apache.catalina.connector;
 
 import java.io.IOException;
 
+import org.apache.catalina.CometProcessor;
 import org.apache.catalina.Context;
 import org.apache.catalina.Globals;
 import org.apache.catalina.Wrapper;
@@ -135,10 +136,35 @@ public class CoyoteAdapter
 
         }
 
+        // Comet processing
+        if (request.getWrapper() != null 
+                && request.getWrapper() instanceof CometProcessor) {
+            try {
+                if (request.getAttribute("org.apache.tomcat.comet.error") != null) {
+                    ((CometProcessor) request.getWrapper()).error(request.getRequest(), response.getResponse());
+                } else {
+                    ((CometProcessor) request.getWrapper()).read(request.getRequest(), response.getResponse());
+                }
+            } catch (IOException e) {
+                ;
+            } catch (Throwable t) {
+                log.error(sm.getString("coyoteAdapter.service"), t);
+            } finally {
+                // Recycle the wrapper request and response
+                if (request.getAttribute("org.apache.tomcat.comet") == null) {
+                    request.recycle();
+                    response.recycle();
+                }
+            }
+            return;
+        }
+        
         if (connector.getXpoweredBy()) {
             response.addHeader("X-Powered-By", "Servlet/2.5");
         }
 
+        boolean comet = false;
+        
         try {
 
             // Parse and set Catalina and configuration specific 
@@ -148,8 +174,16 @@ public class CoyoteAdapter
                 connector.getContainer().getPipeline().getFirst().invoke(request, response);
             }
 
-            response.finishResponse();
-            req.action( ActionCode.ACTION_POST_REQUEST , null);
+            if (request.getAttribute("org.apache.tomcat.comet.support") == Boolean.TRUE 
+                    && request.getWrapper() instanceof CometProcessor) {
+                request.setAttribute("org.apache.tomcat.comet", Boolean.TRUE);
+                comet = true;
+            }
+
+            if (!comet) {
+                response.finishResponse();
+                req.action( ActionCode.ACTION_POST_REQUEST , null);
+            }
 
         } catch (IOException e) {
             ;
@@ -157,8 +191,10 @@ public class CoyoteAdapter
             log.error(sm.getString("coyoteAdapter.service"), t);
         } finally {
             // Recycle the wrapper request and response
-            request.recycle();
-            response.recycle();
+            if (!comet) {
+                request.recycle();
+                response.recycle();
+            }
         }
 
     }

==================================================
CometServlet.java
index 94140c47e3..d46e66e675 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -1294,6 +1294,12 @@ public class Request
         if (readOnlyAttributes.containsKey(name)) {
             return;
         }
+
+        // Pass special attributes to the native layer
+        if (name.startsWith("org.apache.tomcat.")) {
+            coyoteRequest.getAttributes().remove(name);
+        }
+
         found = attributes.containsKey(name);
         if (found) {
             value = attributes.get(name);
@@ -1301,7 +1307,7 @@ public class Request
         } else {
             return;
         }
-
+        
         // Notify interested application event listeners
         Object listeners[] = context.getApplicationEventListeners();
         if ((listeners == null) || (listeners.length == 0))

==================================================
AjpAprProtocol.java
new file mode 100644
index 0000000000..066eb4a365
--- /dev/null
+++ b/java/org/apache/catalina/servlets/CometServlet.java
@@ -0,0 +1,73 @@
+/*
+ * Copyright 2006 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+package org.apache.catalina.servlets;
+
+
+import java.io.IOException;
+
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.catalina.CometProcessor;
+
+
+/**
+ * Helper class to implement Comet functionality.
+ */
+public abstract class CometServlet
+    extends HttpServlet implements CometProcessor {
+
+    public void begin(HttpServletRequest request, HttpServletResponse response)
+        throws IOException, ServletException {
+        
+    }
+    
+    public void end(HttpServletRequest request, HttpServletResponse response)
+        throws IOException, ServletException {
+        request.removeAttribute("org.apache.tomcat.comet");
+    }
+    
+    public void error(HttpServletRequest request, HttpServletResponse response)
+        throws IOException, ServletException {
+        end(request, response);
+    }
+    
+    public abstract void read(HttpServletRequest request, HttpServletResponse response)
+        throws IOException, ServletException;
+
+    protected void service(HttpServletRequest request, HttpServletResponse response)
+        throws IOException, ServletException {
+        
+        if (request.getAttribute("org.apache.tomcat.comet.support") == Boolean.TRUE) {
+            begin(request, response);
+        } else {
+            // FIXME: Implement without comet support
+            begin(request, response);
+            
+            // Loop reading data
+            
+            end(request, response);
+        }
+        
+    }
+
+}

==================================================
Http11AprProcessor.java
index 862ef4a600..5670ecc7a9 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -35,6 +35,7 @@ import org.apache.coyote.RequestInfo;
 import org.apache.tomcat.util.modeler.Registry;
 import org.apache.tomcat.util.net.AprEndpoint;
 import org.apache.tomcat.util.net.AprEndpoint.Handler;
+import org.apache.tomcat.util.net.AprEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.res.StringManager;
 
 
@@ -429,7 +430,12 @@ public class AjpAprProtocol
             this.proto = proto;
         }
 
-        public boolean process(long socket) {
+        // FIXME: Support for this could be added in AJP as well
+        public SocketState event(long socket, boolean error) {
+            return SocketState.CLOSED;
+        }
+        
+        public SocketState process(long socket) {
             AjpAprProcessor processor = null;
             try {
                 processor = (AjpAprProcessor) localProcessor.get();
@@ -460,7 +466,11 @@ public class AjpAprProtocol
                     ((ActionHook) processor).action(ActionCode.ACTION_START, null);
                 }
 
-                return processor.process(socket);
+                if (processor.process(socket)) {
+                    return SocketState.OPEN;
+                } else {
+                    return SocketState.CLOSED;
+                }
 
             } catch(java.net.SocketException e) {
                 // SocketExceptions are normal
@@ -487,7 +497,7 @@ public class AjpAprProtocol
                     ((ActionHook) processor).action(ActionCode.ACTION_STOP, null);
                 }
             }
-            return false;
+            return SocketState.CLOSED;
         }
     }
 

==================================================
Http11AprProtocol.java
index 47267de760..b6d5194f8d 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -52,6 +52,7 @@ import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.http.FastHttpDateFormat;
 import org.apache.tomcat.util.http.MimeHeaders;
 import org.apache.tomcat.util.net.AprEndpoint;
+import org.apache.tomcat.util.net.AprEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.res.StringManager;
 
 
@@ -146,12 +147,6 @@ public class Http11AprProcessor implements ActionHook {
     protected InternalAprOutputBuffer outputBuffer = null;
 
 
-    /**
-     * State flag.
-     */
-    protected boolean started = false;
-
-
     /**
      * Error flag.
      */
@@ -182,6 +177,12 @@ public class Http11AprProcessor implements ActionHook {
     protected AprEndpoint.SendfileData sendfileData = null;
 
 
+    /**
+     * Comet used.
+     */
+    protected boolean comet = false;
+
+
     /**
      * Content delimitator for the request (if false, the connection will
      * be closed at the end of the request).
@@ -735,7 +736,53 @@ public class Http11AprProcessor implements ActionHook {
      *
      * @throws IOException error during an I/O operation
      */
-    public boolean process(long socket)
+    public SocketState event(boolean error)
+        throws IOException {
+        
+        RequestInfo rp = request.getRequestProcessor();
+        
+        try {
+            rp.setStage(org.apache.coyote.Constants.STAGE_SERVICE);
+            if (error) {
+                request.setAttribute("org.apache.tomcat.comet.error", Boolean.TRUE);
+            }
+            // FIXME: It is also possible to add a new "event" method in the adapter
+            // or something similar
+            adapter.service(request, response);
+            if (request.getAttribute("org.apache.tomcat.comet") == null) {
+                comet = false;
+                endpoint.getCometPoller().remove(socket);
+            }
+        } catch (InterruptedIOException e) {
+            error = true;
+        } catch (Throwable t) {
+            log.error(sm.getString("http11processor.request.process"), t);
+            // 500 - Internal Server Error
+            response.setStatus(500);
+            error = true;
+        }
+        
+        rp.setStage(org.apache.coyote.Constants.STAGE_ENDED);
+
+        if (error) {
+            recycle();
+            return SocketState.CLOSED;
+        } else if (!comet) {
+            recycle();
+            endpoint.getPoller().add(socket);
+            return SocketState.OPEN;
+        } else {
+            return SocketState.LONG;
+        }
+    }
+    
+    /**
+     * Process pipelined HTTP requests using the specified input and output
+     * streams.
+     *
+     * @throws IOException error during an I/O operation
+     */
+    public SocketState process(long socket)
         throws IOException {
         RequestInfo rp = request.getRequestProcessor();
         rp.setStage(org.apache.coyote.Constants.STAGE_PARSE);
@@ -768,7 +815,7 @@ public class Http11AprProcessor implements ActionHook {
         boolean keptAlive = false;
         boolean openSocket = false;
 
-        while (started && !error && keepAlive) {
+        while (!error && keepAlive) {
 
             // Parsing the request header
             try {
@@ -833,7 +880,10 @@ public class Http11AprProcessor implements ActionHook {
                         error = response.getErrorException() != null ||
                                 statusDropsConnection(response.getStatus());
                     }
-
+                    // Comet support
+                    if (request.getAttribute("org.apache.tomcat.comet") != null) {
+                        comet = true;
+                    }
                 } catch (InterruptedIOException e) {
                     error = true;
                 } catch (Throwable t) {
@@ -845,25 +895,8 @@ public class Http11AprProcessor implements ActionHook {
             }
 
             // Finish the handling of the request
-            try {
-                rp.setStage(org.apache.coyote.Constants.STAGE_ENDINPUT);
-                inputBuffer.endRequest();
-            } catch (IOException e) {
-                error = true;
-            } catch (Throwable t) {
-                log.error(sm.getString("http11processor.request.finish"), t);
-                // 500 - Internal Server Error
-                response.setStatus(500);
-                error = true;
-            }
-            try {
-                rp.setStage(org.apache.coyote.Constants.STAGE_ENDOUTPUT);
-                outputBuffer.endRequest();
-            } catch (IOException e) {
-                error = true;
-            } catch (Throwable t) {
-                log.error(sm.getString("http11processor.response.finish"), t);
-                error = true;
+            if (!comet) {
+                endRequest();
             }
 
             // If there was an error, make sure the request is counted as
@@ -873,17 +906,8 @@ public class Http11AprProcessor implements ActionHook {
             }
             request.updateCounters();
 
-            rp.setStage(org.apache.coyote.Constants.STAGE_KEEPALIVE);
-
-            // Don't reset the param - we'll see it as ended. Next request
-            // will reset it
-            // thrA.setParam(null);
-            // Next request
-            inputBuffer.nextRequest();
-            outputBuffer.nextRequest();
-
             // Do sendfile as needed: add socket to sendfile and end
-            if (sendfileData != null) {
+            if (sendfileData != null && !error) {
                 sendfileData.socket = socket;
                 sendfileData.keepAlive = keepAlive;
                 if (!endpoint.getSendfile().add(sendfileData)) {
@@ -892,19 +916,63 @@ public class Http11AprProcessor implements ActionHook {
                 }
             }
             
+            rp.setStage(org.apache.coyote.Constants.STAGE_KEEPALIVE);
+
         }
 
         rp.setStage(org.apache.coyote.Constants.STAGE_ENDED);
 
-        // Recycle
+        if (comet) {
+            if (error) {
+                recycle();
+                return SocketState.CLOSED;
+            } else {
+                endpoint.getCometPoller().add(socket);
+                return SocketState.LONG;
+            }
+        } else {
+            recycle();
+            return (openSocket) ? SocketState.OPEN : SocketState.CLOSED;
+        }
+        
+    }
+
+    
+    public void endRequest() {
+        
+        // Finish the handling of the request
+        try {
+            inputBuffer.endRequest();
+        } catch (IOException e) {
+            error = true;
+        } catch (Throwable t) {
+            log.error(sm.getString("http11processor.request.finish"), t);
+            // 500 - Internal Server Error
+            response.setStatus(500);
+            error = true;
+        }
+        try {
+            outputBuffer.endRequest();
+        } catch (IOException e) {
+            error = true;
+        } catch (Throwable t) {
+            log.error(sm.getString("http11processor.response.finish"), t);
+            error = true;
+        }
+
+        // Next request
+        inputBuffer.nextRequest();
+        outputBuffer.nextRequest();
+        
+    }
+    
+    
+    public void recycle() {
         inputBuffer.recycle();
         outputBuffer.recycle();
         this.socket = 0;
-
-        return openSocket;
-        
     }
-
+    
 
     // ----------------------------------------------------- ActionHook Methods
 
@@ -966,6 +1034,7 @@ public class Http11AprProcessor implements ActionHook {
             // End the processing of the current request, and stop any further
             // transactions with the client
 
+            comet = false;
             try {
                 outputBuffer.endRequest();
             } catch (IOException e) {
@@ -985,14 +1054,6 @@ public class Http11AprProcessor implements ActionHook {
 
             // Do nothing
 
-        } else if (actionCode == ActionCode.ACTION_START) {
-
-            started = true;
-
-        } else if (actionCode == ActionCode.ACTION_STOP) {
-
-            started = false;
-
         } else if (actionCode == ActionCode.ACTION_REQ_HOST_ADDR_ATTRIBUTE) {
 
             // Get remote host address
@@ -1368,6 +1429,8 @@ public class Http11AprProcessor implements ActionHook {
         if (endpoint.getUseSendfile()) {
             request.setAttribute("org.apache.tomcat.sendfile.support", Boolean.TRUE);
         }
+        // Advertise comet support through a request attribute
+        request.setAttribute("org.apache.tomcat.comet.support", Boolean.TRUE);
         
     }
 

==================================================
InternalAprInputBuffer.java
index 0f037d8739..dd10203162 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -20,6 +20,7 @@ import java.net.InetAddress;
 import java.net.URLEncoder;
 import java.util.Hashtable;
 import java.util.Iterator;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Executor;
 
 import javax.management.MBeanRegistration;
@@ -598,19 +599,72 @@ public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration
     // --------------------  Connection handler --------------------
 
     static class Http11ConnectionHandler implements Handler {
-        Http11AprProtocol proto;
-        static int count=0;
-        RequestGroupInfo global=new RequestGroupInfo();
-        ThreadLocal localProcessor = new ThreadLocal();
-
-        Http11ConnectionHandler( Http11AprProtocol proto ) {
-            this.proto=proto;
+        
+        protected Http11AprProtocol proto;
+        protected static int count = 0;
+        protected RequestGroupInfo global = new RequestGroupInfo();
+        
+        protected ThreadLocal<Http11AprProcessor> localProcessor = 
+            new ThreadLocal<Http11AprProcessor>();
+        protected ConcurrentHashMap<Long, Http11AprProcessor> connections =
+            new ConcurrentHashMap<Long, Http11AprProcessor>();
+        protected java.util.Stack<Http11AprProcessor> recycledProcessors = 
+            new java.util.Stack<Http11AprProcessor>();
+
+        Http11ConnectionHandler(Http11AprProtocol proto) {
+            this.proto = proto;
         }
 
-        public boolean process(long socket) {
+        public SocketState event(long socket, boolean error) {
+            Http11AprProcessor result = connections.get(socket);
+            SocketState state = SocketState.CLOSED; 
+            if (result != null) {
+                boolean recycle = error;
+                // Call the appropriate event
+                try {
+                    state = result.event(error);
+                } catch (java.net.SocketException e) {
+                    // SocketExceptions are normal
+                    Http11AprProtocol.log.debug
+                        (sm.getString
+                            ("http11protocol.proto.socketexception.debug"), e);
+                } catch (java.io.IOException e) {
+                    // IOExceptions are normal
+                    Http11AprProtocol.log.debug
+                        (sm.getString
+                            ("http11protocol.proto.ioexception.debug"), e);
+                }
+                // Future developers: if you discover any other
+                // rare-but-nonfatal exceptions, catch them here, and log as
+                // above.
+                catch (Throwable e) {
+                    // any other exception or error is odd. Here we log it
+                    // with "ERROR" level, so it will show up even on
+                    // less-than-verbose logs.
+                    Http11AprProtocol.log.error
+                        (sm.getString("http11protocol.proto.error"), e);
+                } finally {
+                    if (state != SocketState.LONG) {
+                        connections.remove(socket);
+                        recycledProcessors.push(result);
+                    }
+                }
+            }
+            return state;
+        }
+        
+        public SocketState process(long socket) {
             Http11AprProcessor processor = null;
             try {
                 processor = (Http11AprProcessor) localProcessor.get();
+                if (processor == null) {
+                    synchronized (recycledProcessors) {
+                        if (!recycledProcessors.isEmpty()) {
+                            processor = recycledProcessors.pop();
+                            localProcessor.set(processor);
+                        }
+                    }
+                }
                 if (processor == null) {
                     processor =
                         new Http11AprProcessor(proto.maxHttpHeaderSize, proto.ep);
@@ -647,7 +701,15 @@ public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration
                     ((ActionHook) processor).action(ActionCode.ACTION_START, null);
                 }
 
-                return processor.process(socket);
+                SocketState state = processor.process(socket);
+                if (state == SocketState.LONG) {
+                    // Associate the connection with the processor. The next request 
+                    // processed by this thread will use either a new or a recycled
+                    // processor.
+                    connections.put(socket, processor);
+                    localProcessor.set(null);
+                }
+                return state;
 
             } catch(java.net.SocketException e) {
                 // SocketExceptions are normal
@@ -669,15 +731,8 @@ public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration
                 // less-than-verbose logs.
                 Http11AprProtocol.log.error
                     (sm.getString("http11protocol.proto.error"), e);
-            } finally {
-                //       if(proto.adapter != null) proto.adapter.recycle();
-                //                processor.recycle();
-
-                if (processor instanceof ActionHook) {
-                    ((ActionHook) processor).action(ActionCode.ACTION_STOP, null);
-                }
             }
-            return false;
+            return SocketState.CLOSED;
         }
     }
 

==================================================
AprEndpoint.java
index 01ad7b593f..f40429cf7f 100644
--- a/java/org/apache/coyote/http11/InternalAprInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalAprInputBuffer.java
@@ -329,8 +329,7 @@ public class InternalAprInputBuffer implements InputBuffer {
      * consumed. This method only resets all the pointers so that we are ready
      * to parse the next HTTP request.
      */
-    public void nextRequest()
-        throws IOException {
+    public void nextRequest() {
 
         // Recycle Request object
         request.recycle();

==================================================
