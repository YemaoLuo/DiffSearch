4db538a875f3822edc29e2d5f99bfb2fbc5f3bf7
==================================================
Align InputBuffer initialisation across the connectors
==================================================
Mark Emlyn
==================================================
Fri Aug 12 17:59:22 2011 +0000
==================================================
AbstractInputBuffer.java
Align InputBuffer initialisation across the connectors
Remove unused code
Reduce visibility of properties and methods


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1157198 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index a81d642632..dfa747bf12 100644
--- a/java/org/apache/coyote/http11/AbstractInputBuffer.java
+++ b/java/org/apache/coyote/http11/AbstractInputBuffer.java
@@ -22,9 +22,11 @@ import org.apache.coyote.InputBuffer;
 import org.apache.coyote.Request;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.http.MimeHeaders;
+import org.apache.tomcat.util.net.AbstractEndpoint;
+import org.apache.tomcat.util.net.SocketWrapper;
 import org.apache.tomcat.util.res.StringManager;
 
-public abstract class AbstractInputBuffer implements InputBuffer{
+public abstract class AbstractInputBuffer<S> implements InputBuffer{
 
     protected static final boolean[] HTTP_TOKEN_CHAR = new boolean[128];
 
@@ -223,12 +225,16 @@ public abstract class AbstractInputBuffer implements InputBuffer{
     }
 
 
-    public abstract boolean parseRequestLine(boolean useAvailableDataOnly) throws IOException;
+    public abstract boolean parseRequestLine(boolean useAvailableDataOnly)
+        throws IOException;
     
     public abstract boolean parseHeaders() throws IOException;
     
     protected abstract boolean fill(boolean block) throws IOException; 
 
+    protected abstract void init(SocketWrapper<S> socketWrapper,
+            AbstractEndpoint endpoint) throws IOException;
+
 
     // --------------------------------------------------------- Public Methods
 

==================================================
Http11NioProcessor.java
index f6e0625f4c..7d184a3ed5 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -174,8 +174,8 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
 
         // Setting up the socket
         this.socket = socketWrapper;
+        inputBuffer.init(socketWrapper, endpoint);
         long socketRef = socketWrapper.getSocket().longValue();
-        inputBuffer.setSocket(socketRef);
         outputBuffer.setSocket(socketRef);
 
         // Error flag
@@ -619,7 +619,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
     }
 
     @Override
-    protected AbstractInputBuffer getInputBuffer() {
+    protected AbstractInputBuffer<Long> getInputBuffer() {
         return inputBuffer;
     }
 

==================================================
Http11Processor.java
index ba0aaa8e0d..b0078ec6ec 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -205,9 +205,8 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
 
         // Setting up the socket
         this.socket = socketWrapper;
-        inputBuffer.setSocket(this.socket.getSocket());
+        inputBuffer.init(socketWrapper, endpoint);
         outputBuffer.setSocket(this.socket.getSocket());
-        inputBuffer.setSelectorPool(((NioEndpoint)endpoint).getSelectorPool());
         outputBuffer.setSelectorPool(((NioEndpoint)endpoint).getSelectorPool());
 
         // Error flag
@@ -647,7 +646,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
     }
 
     @Override
-    protected AbstractInputBuffer getInputBuffer() {
+    protected AbstractInputBuffer<NioChannel> getInputBuffer() {
         return inputBuffer;
     }
 

==================================================
InternalAprInputBuffer.java
index 6ce5daf90d..ef797ab2c4 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -138,7 +138,7 @@ public class Http11Processor extends AbstractHttp11Processor<Socket> {
 
         // Setting up the I/O
         this.socket = socketWrapper;
-        inputBuffer.setInputStream(socket.getSocket().getInputStream());
+        inputBuffer.init(socketWrapper, endpoint);
         outputBuffer.setOutputStream(socket.getSocket().getOutputStream());
 
         // Error flag
@@ -558,7 +558,7 @@ public class Http11Processor extends AbstractHttp11Processor<Socket> {
     }
 
     @Override
-    protected AbstractInputBuffer getInputBuffer() {
+    protected AbstractInputBuffer<Socket> getInputBuffer() {
         return inputBuffer;
     }
 

==================================================
InternalInputBuffer.java
index 12dbb12fe8..8692b0017e 100644
--- a/java/org/apache/coyote/http11/InternalAprInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalAprInputBuffer.java
@@ -30,6 +30,8 @@ import org.apache.tomcat.jni.Socket;
 import org.apache.tomcat.jni.Status;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
+import org.apache.tomcat.util.net.AbstractEndpoint;
+import org.apache.tomcat.util.net.SocketWrapper;
 
 /**
  * Implementation of InputBuffer which provides HTTP request header parsing as
@@ -37,7 +39,7 @@ import org.apache.tomcat.util.buf.MessageBytes;
  *
  * @author <a href="mailto:remm@apache.org">Remy Maucherat</a>
  */
-public class InternalAprInputBuffer extends AbstractInputBuffer {
+public class InternalAprInputBuffer extends AbstractInputBuffer<Long> {
 
     private static final Log log =
         LogFactory.getLog(InternalAprInputBuffer.class);
@@ -78,38 +80,17 @@ public class InternalAprInputBuffer extends AbstractInputBuffer {
     /**
      * Direct byte buffer used to perform actual reading.
      */
-    protected ByteBuffer bbuf;
+    private ByteBuffer bbuf;
 
 
     /**
      * Underlying socket.
      */
-    protected long socket;
-
-
-    // ------------------------------------------------------------- Properties
-
-
-    /**
-     * Set the underlying socket.
-     */
-    public void setSocket(long socket) {
-        this.socket = socket;
-        Socket.setrbb(this.socket, bbuf);
-    }
-
-
-    /**
-     * Get the underlying socket input stream.
-     */
-    public long getSocket() {
-        return socket;
-    }
+    private long socket;
 
 
     // --------------------------------------------------------- Public Methods
 
-
     /**
      * Recycle the input buffer. This should be called when closing the 
      * connection.
@@ -341,7 +322,7 @@ public class InternalAprInputBuffer extends AbstractInputBuffer {
      * HTTP header parsing is done
      */
     @SuppressWarnings("null") // headerValue cannot be null
-    public boolean parseHeader()
+    private boolean parseHeader()
         throws IOException {
 
         //
@@ -567,6 +548,14 @@ public class InternalAprInputBuffer extends AbstractInputBuffer {
 
     // ------------------------------------------------------ Protected Methods
 
+    @Override
+    protected void init(SocketWrapper<Long> socketWrapper,
+            AbstractEndpoint endpoint) throws IOException {
+
+        socket = socketWrapper.getSocket().longValue();
+        Socket.setrbb(this.socket, bbuf);
+    }
+
 
     @Override
     protected boolean fill(boolean block) throws IOException {
@@ -666,11 +655,6 @@ public class InternalAprInputBuffer extends AbstractInputBuffer {
             pos = lastValid;
 
             return (length);
-
         }
-
-
     }
-
-
 }

==================================================
InternalNioInputBuffer.java
index 6c06d74ab3..8a3222eeb9 100644
--- a/java/org/apache/coyote/http11/InternalInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalInputBuffer.java
@@ -19,6 +19,7 @@ package org.apache.coyote.http11;
 import java.io.EOFException;
 import java.io.IOException;
 import java.io.InputStream;
+import java.net.Socket;
 import java.nio.charset.Charset;
 
 import org.apache.coyote.InputBuffer;
@@ -27,6 +28,8 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
+import org.apache.tomcat.util.net.AbstractEndpoint;
+import org.apache.tomcat.util.net.SocketWrapper;
 
 /**
  * Implementation of InputBuffer which provides HTTP request header parsing as
@@ -34,7 +37,7 @@ import org.apache.tomcat.util.buf.MessageBytes;
  *
  * @author <a href="mailto:remm@apache.org">Remy Maucherat</a>
  */
-public class InternalInputBuffer extends AbstractInputBuffer {
+public class InternalInputBuffer extends AbstractInputBuffer<Socket> {
 
     private static final Log log = LogFactory.getLog(InternalInputBuffer.class);
 
@@ -42,7 +45,7 @@ public class InternalInputBuffer extends AbstractInputBuffer {
     /**
      * Underlying input stream.
      */
-    protected InputStream inputStream;
+    private InputStream inputStream;
 
 
     /**
@@ -67,28 +70,6 @@ public class InternalInputBuffer extends AbstractInputBuffer {
     }
 
     
-    /**
-     * Set the underlying socket input stream.
-     */
-    public void setInputStream(InputStream inputStream) {
-
-        // FIXME: Check for null ?
-
-        this.inputStream = inputStream;
-
-    }
-
-
-    /**
-     * Get the underlying socket input stream.
-     */
-    public InputStream getInputStream() {
-
-        return inputStream;
-
-    }
-
-
     /**
      * Read the request line. This function is meant to be used during the 
      * HTTP request header parsing. Do NOT attempt to read the request body 
@@ -297,7 +278,7 @@ public class InternalInputBuffer extends AbstractInputBuffer {
      * HTTP header parsing is done
      */
     @SuppressWarnings("null") // headerValue cannot be null
-    public boolean parseHeader()
+    private boolean parseHeader()
         throws IOException {
 
         //
@@ -468,6 +449,14 @@ public class InternalInputBuffer extends AbstractInputBuffer {
     // ------------------------------------------------------ Protected Methods
 
 
+    @Override
+    protected void init(SocketWrapper<Socket> socketWrapper,
+            AbstractEndpoint endpoint) throws IOException {
+        inputStream = socketWrapper.getSocket().getInputStream();
+    }
+
+
+
     private void skipLine(int start) throws IOException {
         boolean eol = false;
         int lastRealByte = start;
@@ -576,11 +565,6 @@ public class InternalInputBuffer extends AbstractInputBuffer {
             pos = lastValid;
 
             return (length);
-
         }
-
-
     }
-
-
 }

==================================================
