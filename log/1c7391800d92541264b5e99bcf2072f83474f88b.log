1c7391800d92541264b5e99bcf2072f83474f88b
==================================================
Simplify. NioChannel.getAttachment(boolean) was only ever called with a parameter of false.
==================================================
Mark Thomas
==================================================
Wed Dec 17 18:04:38 2014 +0000
==================================================
Http11NioProcessor.java
Simplify. NioChannel.getAttachment(boolean) was only ever called with a parameter of false.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1646302 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InternalNioInputBuffer.java
index 468c330b9c..3ca73d737d 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -99,7 +99,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
 
     @Override
     protected void resetTimeouts() {
-        final NioEndpoint.NioSocketWrapper attach = (NioEndpoint.NioSocketWrapper)socketWrapper.getSocket().getAttachment(false);
+        final NioEndpoint.NioSocketWrapper attach = (NioEndpoint.NioSocketWrapper)socketWrapper.getSocket().getAttachment();
         if (!getErrorState().isError() && attach != null &&
                 asyncStateMachine.isAsyncDispatching()) {
             long soTimeout = endpoint.getSoTimeout();

==================================================
InternalNioOutputBuffer.java
index fad0e057f8..fa7d02954e 100644
--- a/java/org/apache/coyote/http11/InternalNioInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioInputBuffer.java
@@ -126,7 +126,7 @@ public class InternalNioInputBuffer extends AbstractNioInputBuffer<NioChannel> {
             }
             try {
                 NioEndpoint.NioSocketWrapper att =
-                        (NioEndpoint.NioSocketWrapper) socket.getAttachment(false);
+                        (NioEndpoint.NioSocketWrapper) socket.getAttachment();
                 if (att == null) {
                     throw new IOException("Key must be cancelled.");
                 }

==================================================
NioChannel.java
index 1231e90a4b..18af05629f 100644
--- a/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
@@ -126,7 +126,7 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer<NioChannel> {
         }
 
         int written = 0;
-        NioEndpoint.NioSocketWrapper att = (NioEndpoint.NioSocketWrapper)socket.getAttachment(false);
+        NioEndpoint.NioSocketWrapper att = (NioEndpoint.NioSocketWrapper)socket.getAttachment();
         if ( att == null ) throw new IOException("Key must be cancelled");
         long writeTimeout = att.getWriteTimeout();
         Selector selector = null;
@@ -203,7 +203,7 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer<NioChannel> {
             }
         }
 
-        NioEndpoint.NioSocketWrapper ka = (NioEndpoint.NioSocketWrapper)socket.getAttachment(false);
+        NioEndpoint.NioSocketWrapper ka = (NioEndpoint.NioSocketWrapper)socket.getAttachment();
         if (ka != null) ka.access();//prevent timeouts for just doing client writes
 
         if (!isBlocking() && length > 0) {
@@ -275,7 +275,7 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer<NioChannel> {
 
     @Override
     protected void registerWriteInterest() throws IOException {
-        NioEndpoint.NioSocketWrapper att = (NioEndpoint.NioSocketWrapper)socket.getAttachment(false);
+        NioEndpoint.NioSocketWrapper att = (NioEndpoint.NioSocketWrapper)socket.getAttachment();
         if (att == null) {
             throw new IOException("Key must be cancelled");
         }

==================================================
NioEndpoint.java
index 4de20b1f71..eaa8dd29a2 100644
--- a/java/org/apache/tomcat/util/net/NioChannel.java
+++ b/java/org/apache/tomcat/util/net/NioChannel.java
@@ -143,12 +143,11 @@ public class NioChannel implements ByteChannel {
         return sc.read(dst);
     }
 
-    public Object getAttachment(boolean remove) {
+    public Object getAttachment() {
         Poller pol = getPoller();
         Selector sel = pol!=null?pol.getSelector():null;
         SelectionKey key = sel!=null?getIOChannel().keyFor(sel):null;
         Object att = key!=null?key.attachment():null;
-        if (key != null && att != null && remove ) key.attach(null);
         return att;
     }
 

==================================================
