0114579f0e3afab36e37defcfd409ba272421f6a
==================================================
Another use case
==================================================
Filip Hanik
==================================================
Thu Aug 6 16:10:34 2009 +0000
==================================================
AsyncContextImpl.java
Another use case


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@801693 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CoyoteAdapter.java
index 7269a5e5bd..eabb9249d7 100644
--- a/java/org/apache/catalina/connector/AsyncContextImpl.java
+++ b/java/org/apache/catalina/connector/AsyncContextImpl.java
@@ -257,6 +257,8 @@ public class AsyncContextImpl implements AsyncContext {
                     dispatch = null;
                 }
             }
+        } else if (this.state.get()==AsyncState.COMPLETING) {
+            doInternalComplete(false);
         } else {
             throw new IllegalStateException("Dispatch illegal. Invalid state: "+state.get());
         }

==================================================
Http11NioProcessor.java
index bd2f643cae..92ec18b0d9 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -273,6 +273,12 @@ public class CoyoteAdapter
                    //configure settings for timed out
                    asyncConImpl.setState(AsyncContextImpl.AsyncState.TIMING_OUT);
                 }
+                if (status==SocketStatus.TIMEOUT) {
+                    AsyncContextImpl asyncConImpl = (AsyncContextImpl)request.getAsyncContext();
+                    //TODO SERVLET3 - async
+                    //configure settings for timed out
+                    asyncConImpl.setState(AsyncContextImpl.AsyncState.TIMING_OUT);
+                 }
                 connector.getContainer().getPipeline().getFirst().invoke(request, response);
             }catch (RuntimeException x) {
                 success = false;

==================================================
Async2.java
index 266692ab07..7eb37f6dd8 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -190,13 +190,6 @@ public class Http11NioProcessor implements ActionHook {
      * Async used
      */
     protected boolean async = false;
-    /**
-     * Closed flag, a Comet async thread can 
-     * signal for this Nio processor to be closed and recycled instead
-     * of waiting for a timeout.
-     * Closed by HttpServletRequest.getAsyncContext().complete()
-     */
-    protected boolean asyncClose;
 
     /**
      * Content delimitator for the request (if false, the connection will
@@ -1135,7 +1128,6 @@ public class Http11NioProcessor implements ActionHook {
             comet = false;
             cometClose = true;
             async = false;
-            asyncClose = false;
             SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector());
             if ( key != null ) {
                 NioEndpoint.KeyAttachment attach = (NioEndpoint.KeyAttachment) key.attachment();
@@ -1316,7 +1308,6 @@ public class Http11NioProcessor implements ActionHook {
         } else if (actionCode == ActionCode.ACTION_ASYNC_COMPLETE) {
           //TODO SERVLET3 - async
             AtomicBoolean dispatch = (AtomicBoolean)param;
-            asyncClose = true;
             RequestInfo rp = request.getRequestProcessor();
             if ( rp.getStage() != org.apache.coyote.Constants.STAGE_SERVICE ) { //async handling
                 dispatch.set(true);

==================================================
