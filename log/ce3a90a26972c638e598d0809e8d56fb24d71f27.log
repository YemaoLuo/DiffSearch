ce3a90a26972c638e598d0809e8d56fb24d71f27
==================================================
Change JASPIC callback handler to be a singleton
==================================================
Mark Thomas
==================================================
Tue Jun 23 09:26:15 2015 +0000
==================================================
JaspicAuthenticator.java
Change JASPIC callback handler to be a singleton
Implemented JAAS subject support
Patch by fjodorver

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1687004 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JaspicCallbackHandler.java
index 1eaca0106b..6f14d0c897 100644
--- a/java/org/apache/catalina/authenticator/jaspic/JaspicAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/jaspic/JaspicAuthenticator.java
@@ -17,8 +17,8 @@
 package org.apache.catalina.authenticator.jaspic;
 
 import java.io.IOException;
-import java.security.Principal;
 import java.util.Map;
+import java.util.Set;
 
 import javax.security.auth.Subject;
 import javax.security.auth.message.AuthException;
@@ -34,6 +34,7 @@ import javax.servlet.http.HttpServletResponse;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.authenticator.AuthenticatorBase;
 import org.apache.catalina.connector.Request;
+import org.apache.catalina.realm.GenericPrincipal;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
@@ -52,18 +53,19 @@ public class JaspicAuthenticator extends AuthenticatorBase {
     @SuppressWarnings("rawtypes")
     private Map authProperties = null;
 
+    private JaspicCallbackHandler callbackHandler;
 
     @Override
     protected synchronized void startInternal() throws LifecycleException {
         super.startInternal();
         serviceSubject = new Subject();
+        callbackHandler = getJaspicCallbackHandler();
     }
 
 
     @Override
     public boolean authenticate(Request request, HttpServletResponse response) throws IOException {
         MessageInfo messageInfo = new MessageInfoImpl(request, response, true);
-        JaspicCallbackHandler callbackHandler = getJaspicCallbackHandler();
 
         AuthConfigFactory factory = AuthConfigFactory.getFactory();
         String appContext = getAppContextId(request);
@@ -76,20 +78,21 @@ public class JaspicAuthenticator extends AuthenticatorBase {
         }
 
         AuthStatus authStatus;
+        Subject subject = new Subject();
         try {
             ServerAuthConfig authConfig = configProvider.getServerAuthConfig(MESSAGE_LAYER,
                     appContext, callbackHandler);
             String messageAuthContextId = authConfig.getAuthContextID(messageInfo);
             ServerAuthContext authContext = authConfig.getAuthContext(messageAuthContextId,
                     serviceSubject, authProperties);
-            authStatus = authContext.validateRequest(messageInfo, new Subject(), serviceSubject);
+            authStatus = authContext.validateRequest(messageInfo, subject, serviceSubject);
         } catch (AuthException e) {
             handleUnauthorizedRequest(response, e);
             return false;
         }
 
         if (authStatus == AuthStatus.SUCCESS) {
-            Principal principal = callbackHandler.getPrincipal();
+            GenericPrincipal principal = getPrincipal(subject);
             if (principal != null) {
                 register(request, response, principal, AUTH_TYPE, null, null);
             }
@@ -99,6 +102,20 @@ public class JaspicAuthenticator extends AuthenticatorBase {
     }
 
 
+    private GenericPrincipal getPrincipal(Subject subject) {
+        if (subject == null) {
+            return null;
+        }
+
+        Set<GenericPrincipal> principals = subject.getPrivateCredentials(GenericPrincipal.class);
+        if (principals.isEmpty()) {
+            return null;
+        }
+
+        return principals.iterator().next();
+    }
+
+
     @Override
     public void login(String userName, String password, Request request) throws ServletException {
         throw new IllegalStateException("not implemented yet!");

==================================================
PrincipalGroupCallback.java
index f89016277c..4a6fe811ee 100644
--- a/java/org/apache/catalina/authenticator/jaspic/JaspicCallbackHandler.java
+++ b/java/org/apache/catalina/authenticator/jaspic/JaspicCallbackHandler.java
@@ -28,7 +28,6 @@ import javax.security.auth.message.callback.GroupPrincipalCallback;
 import javax.security.auth.message.callback.PasswordValidationCallback;
 
 import org.apache.catalina.Realm;
-import org.apache.catalina.realm.GenericPrincipal;
 import org.apache.tomcat.util.res.StringManager;
 
 /**
@@ -39,8 +38,6 @@ public class JaspicCallbackHandler implements CallbackHandler {
 
     private Realm realm;
 
-    private PrincipalGroupCallback principalGroupCallback = new PrincipalGroupCallback();
-
 
     public JaspicCallbackHandler(Realm realm) {
         this.realm = realm;
@@ -52,22 +49,19 @@ public class JaspicCallbackHandler implements CallbackHandler {
         if (callbacks == null) {
             return;
         }
+        PrincipalGroupCallback principalGroupCallback = new PrincipalGroupCallback();
         for (Callback callback : callbacks) {
-            handleCallback(callback);
+            handleCallback(callback, principalGroupCallback);
         }
+        principalGroupCallback.configureSubject();
     }
 
 
-    public GenericPrincipal getPrincipal() {
-        return principalGroupCallback.getPrincipal();
-    }
-
-
-    private void handleCallback(Callback callback) {
+    private void handleCallback(Callback callback, PrincipalGroupCallback principalGroupCallback) {
         if (callback instanceof CallerPrincipalCallback) {
             principalGroupCallback.setCallerPrincipalCallback((CallerPrincipalCallback) callback);
         } else if (callback instanceof GroupPrincipalCallback) {
-            principalGroupCallback.setCallerPrincipalCallback((GroupPrincipalCallback) callback);
+            principalGroupCallback.setGroupPrincipalCallback((GroupPrincipalCallback) callback);
         } else if (callback instanceof PasswordValidationCallback) {
             handlePasswordValidationCallback((PasswordValidationCallback) callback);
         } else {

==================================================
TestJaspicCallbackHandler.java
index 40b5530007..625576e41b 100644
--- a/java/org/apache/catalina/authenticator/jaspic/PrincipalGroupCallback.java
+++ b/java/org/apache/catalina/authenticator/jaspic/PrincipalGroupCallback.java
@@ -21,6 +21,7 @@ import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
+import javax.security.auth.Subject;
 import javax.security.auth.message.callback.CallerPrincipalCallback;
 import javax.security.auth.message.callback.GroupPrincipalCallback;
 
@@ -39,11 +40,30 @@ public class PrincipalGroupCallback {
         this.callerPrincipalCallback = callerPrincipalCallback;
     }
 
-
-    public void setCallerPrincipalCallback(GroupPrincipalCallback groupPrincipalCallback) {
+    public void setGroupPrincipalCallback(GroupPrincipalCallback groupPrincipalCallback) {
         this.groupPrincipalCallback = groupPrincipalCallback;
     }
 
+    public void configureSubject() {
+        GenericPrincipal principal = getPrincipal();
+        if (principal == null) {
+            return;
+        }
+        Subject subject = getSubject();
+        if (subject != null) {
+            subject.getPrivateCredentials().add(principal);
+        }
+    }
+
+    private Subject getSubject() {
+        if (callerPrincipalCallback != null) {
+            return callerPrincipalCallback.getSubject();
+        }
+        if (groupPrincipalCallback != null) {
+            return callerPrincipalCallback.getSubject();
+        }
+        return null;
+    }
 
     /**
      * Get tomcat's principal, which contains user principal and roles

==================================================
TestPrincipalGroupCallback.java
index 9e2dc63bfe..cee8995814 100644
--- a/test/org/apache/catalina/authenticator/jaspic/TestJaspicCallbackHandler.java
+++ b/test/org/apache/catalina/authenticator/jaspic/TestJaspicCallbackHandler.java
@@ -16,6 +16,8 @@
  */
 package org.apache.catalina.authenticator.jaspic;
 
+import java.util.Set;
+
 import javax.security.auth.Subject;
 import javax.security.auth.callback.Callback;
 import javax.security.auth.message.callback.CallerPrincipalCallback;
@@ -39,17 +41,20 @@ public class TestJaspicCallbackHandler {
     @Test
     public void shouldConvertCallbackToTomcatPrincipal() throws Exception {
         // given
-        CallerPrincipalCallback callerCallback = new CallerPrincipalCallback(new Subject(), USER);
+        Subject subject = new Subject();
+        CallerPrincipalCallback callerCallback = new CallerPrincipalCallback(subject, USER);
         String[] groups = new String[] { "group" };
 
-        GroupPrincipalCallback groupCallback = new GroupPrincipalCallback(new Subject(), groups);
+        GroupPrincipalCallback groupCallback = new GroupPrincipalCallback(subject, groups);
         Callback[] callbacks = new Callback[] { callerCallback, groupCallback };
 
         // when
         jaspicCallbackHandler.handle(callbacks);
-        GenericPrincipal principal = jaspicCallbackHandler.getPrincipal();
 
         // then
+        Set<GenericPrincipal> principals = callerCallback.getSubject().getPrivateCredentials(
+                GenericPrincipal.class);
+        GenericPrincipal principal = principals.iterator().next();
         assertEquals(USER, principal.getName());
         assertArrayEquals(groups, principal.getRoles());
     }

==================================================
