9bab3320bb024d44f3e014cb26bca513e60daa6c
==================================================
Clean up for test tree
==================================================
Mark Emlyn
==================================================
Tue Aug 28 19:38:48 2012 +0000
==================================================
TestBeanELResolverVarargsInvocation.java
Clean up for test tree
- mainly Java 7 <>
- fix remaining Eclipse warnings

FindBugs still TODO

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1378281 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestHttpServlet.java
index 2e0b8eda81..dcf10e4a92 100644
--- a/test/javax/el/TestBeanELResolverVarargsInvocation.java
+++ b/test/javax/el/TestBeanELResolverVarargsInvocation.java
@@ -55,8 +55,7 @@ public class TestBeanELResolverVarargsInvocation {
         beanELResolver = new BeanELResolver();
         elContext = new ELContext() {
             private VariableMapper variableMapper = new VariableMapper() {
-                private Map<String, ValueExpression> vars =
-                    new HashMap<String, ValueExpression>();
+                private Map<String, ValueExpression> vars = new HashMap<>();
 
                 @Override
                 public ValueExpression setVariable(String arg0,

==================================================
TestRequest.java
index 3777266326..a7822ac56a 100644
--- a/test/javax/servlet/http/TestHttpServlet.java
+++ b/test/javax/servlet/http/TestHttpServlet.java
@@ -48,8 +48,7 @@ public class TestHttpServlet extends TomcatBaseTest {
 
         tomcat.start();
 
-        Map<String,List<String>> resHeaders=
-                new HashMap<String, List<String>>();
+        Map<String,List<String>> resHeaders= new HashMap<>();
         int rc = headUrl("http://localhost:" + getPort() + "/", new ByteChunk(),
                resHeaders);
 

==================================================
TestResponse.java
index d999b04d58..65bd97c70b 100644
--- a/test/org/apache/catalina/connector/TestRequest.java
+++ b/test/org/apache/catalina/connector/TestRequest.java
@@ -479,7 +479,8 @@ public class TestRequest extends TomcatBaseTest {
 
             PrintWriter out = resp.getWriter();
 
-            TreeMap<String,String[]> parameters = new TreeMap<String,String[]>(req.getParameterMap());
+            TreeMap<String,String[]> parameters =
+                    new TreeMap<>(req.getParameterMap());
 
             boolean first = true;
 

==================================================
TestSendFile.java
index 24cd40eb2e..17ecf7eb92 100644
--- a/test/org/apache/catalina/connector/TestResponse.java
+++ b/test/org/apache/catalina/connector/TestResponse.java
@@ -60,7 +60,7 @@ public class TestResponse extends TomcatBaseTest {
 
         tomcat.start();
 
-        Map<String,List<String>> headers = new HashMap<String,List<String>>();
+        Map<String,List<String>> headers = new HashMap<>();
         getUrl("http://localhost:" + getPort() + "/", new ByteChunk(), headers);
 
         // Check for headers without a name

==================================================
TestSecurityConstraint.java
index b8f67183ad..e2332b05ac 100644
--- a/test/org/apache/catalina/connector/TestSendFile.java
+++ b/test/org/apache/catalina/connector/TestSendFile.java
@@ -68,7 +68,7 @@ public class TestSendFile extends TomcatBaseTest{
             tomcat.start();
 
             ByteChunk bc = new ByteChunk();
-            Map<String, List<String>> respHeaders = new HashMap<String, List<String>>();
+            Map<String, List<String>> respHeaders = new HashMap<>();
             for (int i=0; i<ITERATIONS; i++) {
                 long start = System.currentTimeMillis();
                 int rc = getUrl("http://localhost:" + getPort() + "/servlet" + i, bc, null, respHeaders);

==================================================
TestWebXmlOrdering.java
index f1a77a3c69..279a81e0e7 100644
--- a/test/org/apache/catalina/deploy/TestSecurityConstraint.java
+++ b/test/org/apache/catalina/deploy/TestSecurityConstraint.java
@@ -45,8 +45,7 @@ public class TestSecurityConstraint {
 
         ServletSecurityElement element;
         SecurityConstraint[] result;
-        Set<HttpMethodConstraintElement> hmces =
-            new HashSet<HttpMethodConstraintElement>();
+        Set<HttpMethodConstraintElement> hmces = new HashSet<>();
 
         // Example 13-1
         // @ServletSecurity

==================================================
TestAddCharSetFilter.java
index edfb5a1527..505cd8d8e3 100644
--- a/test/org/apache/catalina/deploy/TestWebXmlOrdering.java
+++ b/test/org/apache/catalina/deploy/TestWebXmlOrdering.java
@@ -58,7 +58,7 @@ public class TestWebXmlOrdering {
         e.setName("e");
         f = new WebXml();
         f.setName("f");
-        fragments = new HashMap<String,WebXml>();
+        fragments = new HashMap<>();
         fragments.put("a",a);
         fragments.put("b",b);
         fragments.put("c",c);
@@ -105,7 +105,7 @@ public class TestWebXmlOrdering {
         app.addAbsoluteOrdering("b");
         app.addAbsoluteOrdering("d");
 
-        Set<WebXml> others = new HashSet<WebXml>();
+        Set<WebXml> others = new HashSet<>();
         others.add(a);
         others.add(c);
         others.add(e);
@@ -130,7 +130,7 @@ public class TestWebXmlOrdering {
         app.addAbsoluteOrdering(WebXml.ORDER_OTHERS);
         app.addAbsoluteOrdering("d");
 
-        Set<WebXml> others = new HashSet<WebXml>();
+        Set<WebXml> others = new HashSet<>();
         others.add(a);
         others.add(c);
         others.add(e);
@@ -165,7 +165,7 @@ public class TestWebXmlOrdering {
         app.addAbsoluteOrdering("d");
         app.addAbsoluteOrdering(WebXml.ORDER_OTHERS);
 
-        Set<WebXml> others = new HashSet<WebXml>();
+        Set<WebXml> others = new HashSet<>();
         others.add(a);
         others.add(c);
         others.add(e);

==================================================
TestCsrfPreventionFilter.java
index 1e8d7cc9a9..34dad976a1 100644
--- a/test/org/apache/catalina/filters/TestAddCharSetFilter.java
+++ b/test/org/apache/catalina/filters/TestAddCharSetFilter.java
@@ -115,7 +115,7 @@ public class TestAddCharSetFilter extends TomcatBaseTest {
 
         tomcat.start();
 
-        Map<String, List<String>> headers = new HashMap<String, List<String>>();
+        Map<String, List<String>> headers = new HashMap<>();
         getUrl("http://localhost:" + getPort() + "/", new ByteChunk(), headers);
 
         List<String> ctHeaders = headers.get("Content-Type");

==================================================
TestCsrfPreventionFilter2.java
index bf6022fa9c..ec387a1097 100644
--- a/test/org/apache/catalina/filters/TestCsrfPreventionFilter.java
+++ b/test/org/apache/catalina/filters/TestCsrfPreventionFilter.java
@@ -68,7 +68,7 @@ public class TestCsrfPreventionFilter extends TomcatBaseTest {
 
     @Test
     public void testLruCacheSerializable() throws Exception {
-        LruCache<String> cache = new LruCache<String>(5);
+        LruCache<String> cache = new LruCache<>(5);
         cache.add("key1");
         cache.add("key2");
         cache.add("key3");
@@ -83,7 +83,6 @@ public class TestCsrfPreventionFilter extends TomcatBaseTest {
         ByteArrayInputStream bais =
             new ByteArrayInputStream(baos.toByteArray());
         ObjectInputStream ois = new ObjectInputStream(bais);
-        @SuppressWarnings("unchecked")
         LruCache<String> cache2 = (LruCache<String>) ois.readObject();
 
         cache2.add("key7");

==================================================
TestRemoteIpFilter.java
index 830caa8584..bda2d5ea6b 100644
--- a/test/org/apache/catalina/filters/TestCsrfPreventionFilter2.java
+++ b/test/org/apache/catalina/filters/TestCsrfPreventionFilter2.java
@@ -36,7 +36,7 @@ public class TestCsrfPreventionFilter2 {
 
         assertTrue(threadCount > 1);
 
-        LruCache<String> cache = new LruCache<String>(threadCount - 1);
+        LruCache<String> cache = new LruCache<>(threadCount - 1);
 
         LruTestThread[] threads = new LruTestThread[threadCount];
         for (int i = 0; i < threadCount; i++) {

==================================================
TestSerializablePrincipal.java
index 2853fab6bb..4c56ed8933 100644
--- a/test/org/apache/catalina/filters/TestRemoteIpFilter.java
+++ b/test/org/apache/catalina/filters/TestRemoteIpFilter.java
@@ -142,7 +142,7 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
 
     @Test
     public void testCommaDelimitedListToStringArrayEmptyList() {
-        List<String> elements = new ArrayList<String>();
+        List<String> elements = new ArrayList<>();
         String actual = RemoteIpFilter.listToCommaDelimitedString(elements);
         assertEquals("", actual);
     }
@@ -510,7 +510,7 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
     public void testWithTomcatServer() throws Exception {
 
         // mostly default configuration : enable "x-forwarded-proto"
-        Map<String, String> remoteIpFilterParameter = new HashMap<String, String>();
+        Map<String, String> remoteIpFilterParameter = new HashMap<>();
         remoteIpFilterParameter.put("protocolHeader", "x-forwarded-proto");
 
         // SETUP

==================================================
TestVirtualContext.java
index b2fe831b02..b57c78f9d0 100644
--- a/test/org/apache/catalina/ha/session/TestSerializablePrincipal.java
+++ b/test/org/apache/catalina/ha/session/TestSerializablePrincipal.java
@@ -55,7 +55,7 @@ public class TestSerializablePrincipal  {
         }
 
         // Create the Principal to serialize
-        List<String> roles = new ArrayList<String>();
+        List<String> roles = new ArrayList<>();
         roles.add("RoleA");
         roles.add("RoleB");
         TesterPrincipal tpOriginal = new TesterPrincipal("inner");

==================================================
TestRegistration.java
index 6679d0f826..4de6c4dc5e 100644
--- a/test/org/apache/catalina/loader/TestVirtualContext.java
+++ b/test/org/apache/catalina/loader/TestVirtualContext.java
@@ -148,7 +148,7 @@ public class TestVirtualContext extends TomcatBaseTest {
 
         // check that there's no duplicate in the URLs
         String[] allUrlsArray = allUrls.split("\\s+");
-        Assert.assertEquals(new HashSet<String>(Arrays.asList(allUrlsArray)).size(),
+        Assert.assertEquals(new HashSet<>(Arrays.asList(allUrlsArray)).size(),
             allUrlsArray.length);
 
         String allRsrsc2ClasspathUrls =
@@ -210,7 +210,7 @@ public class TestVirtualContext extends TomcatBaseTest {
 
         // check that there's no duplicate in the URLs
         String[] allRsrcPathsArray = allRsrcPaths.split("\\s+");
-        Assert.assertEquals(new HashSet<String>(Arrays.asList(allRsrcPathsArray)).size(),
+        Assert.assertEquals(new HashSet<>(Arrays.asList(allRsrcPathsArray)).size(),
             allRsrcPathsArray.length);
 
         String allRsrc2Paths =

==================================================
TestNonBlockingAPI.java
index 8e3adbb7bc..78f6c1aa7d 100644
--- a/test/org/apache/catalina/mbeans/TestRegistration.java
+++ b/test/org/apache/catalina/mbeans/TestRegistration.java
@@ -156,7 +156,7 @@ public class TestRegistration extends TomcatBaseTest {
 
         // Verify there are the correct Tomcat MBeans
         onames = mbeanServer.queryNames(new ObjectName("Tomcat:*"), null);
-        ArrayList<String> found = new ArrayList<String>(onames.size());
+        ArrayList<String> found = new ArrayList<>(onames.size());
         for (ObjectName on: onames) {
             found.add(on.toString());
         }
@@ -172,14 +172,14 @@ public class TestRegistration extends TomcatBaseTest {
             protocol = "bio";
         }
         String index = getTomcatInstance().getConnector().getProperty("nameIndex").toString();
-        ArrayList<String> expected = new ArrayList<String>(Arrays.asList(basicMBeanNames()));
+        ArrayList<String> expected = new ArrayList<>(Arrays.asList(basicMBeanNames()));
         expected.addAll(Arrays.asList(hostMBeanNames("localhost")));
         expected.addAll(Arrays.asList(contextMBeanNames("localhost", contextName)));
         expected.addAll(Arrays.asList(connectorMBeanNames("auto-" + index, protocol)));
         expected.addAll(Arrays.asList(optionalMBeanNames("localhost")));
 
         // Did we find all expected MBeans?
-        ArrayList<String> missing = new ArrayList<String>(expected);
+        ArrayList<String> missing = new ArrayList<>(expected);
         missing.removeAll(found);
         assertTrue("Missing Tomcat MBeans: " + missing, missing.isEmpty());
 

==================================================
LoggingBaseTest.java
index 8d594430e8..f87b3eb0ab 100644
--- a/test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java
+++ b/test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java
@@ -77,7 +77,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
 
         tomcat.start();
 
-        Map<String, List<String>> resHeaders = new HashMap<String, List<String>>();
+        Map<String, List<String>> resHeaders = new HashMap<>();
         int rc = postUrl(true, new DataWriter(500), "http://localhost:" + getPort() + "/", new ByteChunk(),
                 resHeaders, null);
         Assert.assertEquals(HttpServletResponse.SC_OK, rc);
@@ -100,7 +100,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         System.out.println(tomcat.getConnector().getProperty("address"));
         tomcat.start();
 
-        Map<String, List<String>> resHeaders = new HashMap<String, List<String>>();
+        Map<String, List<String>> resHeaders = new HashMap<>();
         ByteChunk slowReader = new ByteChunk();
         slowReader.setLimit(1); // FIXME BUFFER IS BROKEN, 0 doesn't work
         slowReader.setByteOutputChannel(new ByteOutputChannel() {
@@ -154,7 +154,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         System.out.println(tomcat.getConnector().getProperty("address"));
         tomcat.start();
 
-        Map<String, List<String>> resHeaders = new HashMap<String, List<String>>();
+        Map<String, List<String>> resHeaders = new HashMap<>();
         ByteChunk slowReader = new ByteChunk();
         slowReader.setLimit(1); // FIXME BUFFER IS BROKEN, 0 doesn't work
         slowReader.setByteOutputChannel(new ByteOutputChannel() {

==================================================
SimpleHttpClient.java
index e97b48687e..ad5601c45c 100644
--- a/test/org/apache/catalina/startup/LoggingBaseTest.java
+++ b/test/org/apache/catalina/startup/LoggingBaseTest.java
@@ -47,7 +47,7 @@ public abstract class LoggingBaseTest {
 
     private File tempDir;
 
-    private List<File> deleteOnTearDown = new ArrayList<File>();
+    private List<File> deleteOnTearDown = new ArrayList<>();
 
     /**
      * Helper method that returns the directory where Tomcat build resides. It

==================================================
TestTomcat.java
index 5a48b7ee43..0c96f0889b 100644
--- a/test/org/apache/catalina/startup/SimpleHttpClient.java
+++ b/test/org/apache/catalina/startup/SimpleHttpClient.java
@@ -66,7 +66,7 @@ public abstract class SimpleHttpClient {
     private int requestPause = 1000;
 
     private String responseLine;
-    private List<String> responseHeaders = new ArrayList<String>();
+    private List<String> responseHeaders = new ArrayList<>();
     private String responseBody;
     private boolean useContentLength;
 
@@ -229,7 +229,7 @@ public abstract class SimpleHttpClient {
         useContinue = false;
 
         responseLine = null;
-        responseHeaders = new ArrayList<String>();
+        responseHeaders = new ArrayList<>();
         responseBody = null;
     }
 

==================================================
ChannelCreator.java
index 4c11f1fe27..346771736c 100644
--- a/test/org/apache/catalina/startup/TestTomcat.java
+++ b/test/org/apache/catalina/startup/TestTomcat.java
@@ -193,9 +193,8 @@ public class TestTomcat extends TomcatBaseTest {
      * passwords.
      */
     public static final class MapRealm extends RealmBase {
-        private Map<String,String> users = new HashMap<String,String>();
-        private Map<String,List<String>> roles =
-            new HashMap<String,List<String>>();
+        private Map<String,String> users = new HashMap<>();
+        private Map<String,List<String>> roles = new HashMap<>();
 
         public void addUser(String username, String password) {
             users.put(username, password);
@@ -204,7 +203,7 @@ public class TestTomcat extends TomcatBaseTest {
         public void addUserRole(String username, String role) {
             List<String> userRoles = roles.get(username);
             if (userRoles == null) {
-                userRoles = new ArrayList<String>();
+                userRoles = new ArrayList<>();
                 roles.put(username, userRoles);
             }
             userRoles.add(role);

==================================================
IntrospectionUtils.java
index f3842140d7..d714d40010 100644
--- a/test/org/apache/catalina/tribes/demos/ChannelCreator.java
+++ b/test/org/apache/catalina/tribes/demos/ChannelCreator.java
@@ -100,7 +100,7 @@ public class ChannelCreator {
         boolean frag = false;
         int fragsize = 1024;
         int autoBind = 10;
-        ArrayList<Member> staticMembers = new ArrayList<Member>();
+        ArrayList<Member> staticMembers = new ArrayList<>();
         Properties transportProperties = new Properties();
         String transport = "org.apache.catalina.tribes.transport.nio.PooledParallelSender";
         String receiver = "org.apache.catalina.tribes.transport.nio.NioReceiver";

==================================================
MapDemo.java
index bf5ef3dcf1..2d1bc599cc 100644
--- a/test/org/apache/catalina/tribes/demos/IntrospectionUtils.java
+++ b/test/org/apache/catalina/tribes/demos/IntrospectionUtils.java
@@ -199,8 +199,7 @@ public final class IntrospectionUtils {
         objectMethods.clear();
     }
 
-    static Hashtable<Class<?>,Method[]> objectMethods =
-        new Hashtable<Class<?>,Method[]>();
+    static Hashtable<Class<?>,Method[]> objectMethods = new Hashtable<>();
 
     public static Method[] findMethods(Class<?> c) {
         Method methods[] = objectMethods.get(c);

==================================================
TestGroupChannelMemberArrival.java
index 2fa26a1403..78c32a01db 100644
--- a/test/org/apache/catalina/tribes/demos/MapDemo.java
+++ b/test/org/apache/catalina/tribes/demos/MapDemo.java
@@ -70,8 +70,7 @@ public class MapDemo implements ChannelListener, MembershipListener{
      */
     public MapDemo(Channel channel, String mapName ) {
         //instantiate the replicated map
-        map = new LazyReplicatedMap<String,StringBuilder>(null, channel, 5000,
-                mapName, null);
+        map = new LazyReplicatedMap<>(null, channel, 5000, mapName, null);
         //create a gui, name it with the member name of this JVM
         table = SimpleTableDemo.createAndShowGUI(map,channel.getLocalMember(false).getName());
         //add ourself as a listener for messages

==================================================
TestGroupChannelSenderConnections.java
index d974ac4ac3..490021c097 100644
--- a/test/org/apache/catalina/tribes/group/TestGroupChannelMemberArrival.java
+++ b/test/org/apache/catalina/tribes/group/TestGroupChannelMemberArrival.java
@@ -104,7 +104,7 @@ public class TestGroupChannelMemberArrival {
             this.name = name;
         }
 
-        public ArrayList<Member> members = new ArrayList<Member>(1);
+        public ArrayList<Member> members = new ArrayList<>(1);
 
         @Override
         public void memberAdded(Member member) {

==================================================
TestDomainFilterInterceptor.java
index 04035e2785..c685ff6799 100644
--- a/test/org/apache/catalina/tribes/group/TestGroupChannelSenderConnections.java
+++ b/test/org/apache/catalina/tribes/group/TestGroupChannelSenderConnections.java
@@ -143,13 +143,12 @@ public class TestGroupChannelSenderConnections extends LoggingBaseTest {
     public static class TestMsg implements Serializable {
         private static final long serialVersionUID = 1L;
         private static Random r = new Random();
-        private HashMap<Integer, ArrayList<Object>> map =
-            new HashMap<Integer, ArrayList<Object>>();
+        private HashMap<Integer, ArrayList<Object>> map = new HashMap<>();
         public TestMsg() {
             int size = Math.abs(r.nextInt() % 200);
             for (int i=0; i<size; i++ ) {
                 int length = Math.abs(r.nextInt() %65000);
-                ArrayList<Object> list = new ArrayList<Object>(length);
+                ArrayList<Object> list = new ArrayList<>(length);
                 map.put(Integer.valueOf(i),list);
             }
         }

==================================================
TestOrderInterceptor.java
index f6f422d9fc..95d78ce69d 100644
--- a/test/org/apache/catalina/tribes/group/interceptors/TestDomainFilterInterceptor.java
+++ b/test/org/apache/catalina/tribes/group/interceptors/TestDomainFilterInterceptor.java
@@ -99,7 +99,7 @@ public class TestDomainFilterInterceptor {
             this.name = name;
         }
 
-        public ArrayList<Member> members = new ArrayList<Member>();
+        public ArrayList<Member> members = new ArrayList<>();
         @Override
         public void memberAdded(Member member) {
             if (!members.contains(member)) {

==================================================
TestTcpFailureDetector.java
index b21fa1ac17..9978a28cd1 100644
--- a/test/org/apache/catalina/tribes/group/interceptors/TestOrderInterceptor.java
+++ b/test/org/apache/catalina/tribes/group/interceptors/TestOrderInterceptor.java
@@ -101,7 +101,7 @@ public class TestOrderInterceptor {
     public void testOrder2() throws Exception {
         final Member[] dest = channels[0].getMembers();
         final AtomicInteger value = new AtomicInteger(0);
-        final Queue<Exception> exceptionQueue = new ConcurrentLinkedQueue<Exception>();
+        final Queue<Exception> exceptionQueue = new ConcurrentLinkedQueue<>();
         Runnable run = new Runnable() {
             @Override
             public void run() {

==================================================
Benchmarks.java
index cff47c2105..9d03b57856 100644
--- a/test/org/apache/catalina/tribes/group/interceptors/TestTcpFailureDetector.java
+++ b/test/org/apache/catalina/tribes/group/interceptors/TestTcpFailureDetector.java
@@ -147,7 +147,7 @@ public class TestTcpFailureDetector {
         public TestMbrListener(String name) {
             this.name = name;
         }
-        public ArrayList<Member> members = new ArrayList<Member>();
+        public ArrayList<Member> members = new ArrayList<>();
         @Override
         public void memberAdded(Member member) {
             if ( !members.contains(member) ) {

==================================================
TestRemoteIpValve.java
index 0d1c2f6783..ad0c81a529 100644
--- a/test/org/apache/catalina/valves/Benchmarks.java
+++ b/test/org/apache/catalina/valves/Benchmarks.java
@@ -83,7 +83,7 @@ public class Benchmarks {
             }
         };
 
-        private ThreadLocal<Date> currentDateLocal = new ThreadLocal<Date>();
+        private ThreadLocal<Date> currentDateLocal = new ThreadLocal<>();
 
         @Override
         public void run() {
@@ -119,7 +119,7 @@ public class Benchmarks {
             }
         };
 
-        private ThreadLocal<Date> currentDateLocal = new ThreadLocal<Date>();
+        private ThreadLocal<Date> currentDateLocal = new ThreadLocal<>();
 
         @Override
         public void run() {
@@ -266,7 +266,7 @@ public class Benchmarks {
             return "ThreadLocals";
         }
 
-        private ThreadLocal<String> currentDateStringLocal = new ThreadLocal<String>();
+        private ThreadLocal<String> currentDateStringLocal = new ThreadLocal<>();
 
         private ThreadLocal<Date> currentDateLocal = new ThreadLocal<Date>() {
             @Override

==================================================
TesterAccessLogValve.java
index 357ca5c76f..8e99995320 100644
--- a/test/org/apache/catalina/valves/TestRemoteIpValve.java
+++ b/test/org/apache/catalina/valves/TestRemoteIpValve.java
@@ -93,7 +93,7 @@ public class TestRemoteIpValve {
 
     @Test
     public void testListToCommaDelimitedStringEmptyList() {
-        List<String> elements = new ArrayList<String>();
+        List<String> elements = new ArrayList<>();
         String actual = RemoteIpValve.listToCommaDelimitedString(elements);
         assertEquals("", actual);
     }
@@ -677,9 +677,9 @@ public class TestRemoteIpValve {
         }
         assertNotNull(actual);
         assertEquals(expected.length, actual.length);
-        List<String> e = new ArrayList<String>();
+        List<String> e = new ArrayList<>();
         e.addAll(Arrays.asList(expected));
-        List<String> a = new ArrayList<String>();
+        List<String> a = new ArrayList<>();
         a.addAll(Arrays.asList(actual));
 
         for (String entry : e) {

==================================================
TestValueExpressionImpl.java
index a4ab7c52f9..7d33e49bbe 100644
--- a/test/org/apache/catalina/valves/TesterAccessLogValve.java
+++ b/test/org/apache/catalina/valves/TesterAccessLogValve.java
@@ -34,7 +34,7 @@ public class TesterAccessLogValve extends ValveBase implements AccessLog {
     // Timing tests need a small error margin to prevent failures
     private static final long ERROR_MARGIN = 10;
 
-    private final List<Entry> entries = new ArrayList<Entry>();
+    private final List<Entry> entries = new ArrayList<>();
 
     public TesterAccessLogValve() {
         // Async requests are supported

==================================================
TestCompiler.java
index f49850c503..b39dbcef8a 100644
--- a/test/org/apache/el/TestValueExpressionImpl.java
+++ b/test/org/apache/el/TestValueExpressionImpl.java
@@ -151,7 +151,7 @@ public class TestValueExpressionImpl {
         Object o1 = "String value";
         Object o2 = Integer.valueOf(32);
 
-        Map<Object,Object> map = new HashMap<Object,Object>();
+        Map<Object,Object> map = new HashMap<>();
         map.put("key1", o1);
         map.put("key2", o2);
 
@@ -178,7 +178,7 @@ public class TestValueExpressionImpl {
         Object o1 = "String value";
         Object o2 = Integer.valueOf(32);
 
-        List<Object> list = new ArrayList<Object>();
+        List<Object> list = new ArrayList<>();
         list.add(0, o1);
         list.add(1, o2);
 

==================================================
TestGenerator.java
index 3dd1a50989..3690d1d0c2 100644
--- a/test/org/apache/jasper/compiler/TestCompiler.java
+++ b/test/org/apache/jasper/compiler/TestCompiler.java
@@ -42,7 +42,7 @@ public class TestCompiler extends TomcatBaseTest {
         tomcat.start();
 
         ByteChunk res = new ByteChunk();
-        Map<String,List<String>> headers = new HashMap<String,List<String>>();
+        Map<String,List<String>> headers = new HashMap<>();
 
         getUrl("http://localhost:" + getPort() + "/test/bug49nnn/bug49726a.jsp",
                 res, headers);
@@ -64,7 +64,7 @@ public class TestCompiler extends TomcatBaseTest {
         tomcat.start();
 
         ByteChunk res = new ByteChunk();
-        Map<String,List<String>> headers = new HashMap<String,List<String>>();
+        Map<String,List<String>> headers = new HashMap<>();
 
         getUrl("http://localhost:" + getPort() + "/test/bug49nnn/bug49726b.jsp",
                 res, headers);

==================================================
TestFastRemovalDequeue.java
index 608992eefd..829f055f54 100644
--- a/test/org/apache/jasper/compiler/TestGenerator.java
+++ b/test/org/apache/jasper/compiler/TestGenerator.java
@@ -230,7 +230,7 @@ public class TestGenerator extends TomcatBaseTest {
         tomcat.start();
 
         ByteChunk res = new ByteChunk();
-        Map<String,List<String>> headers = new HashMap<String,List<String>>();
+        Map<String,List<String>> headers = new HashMap<>();
 
         getUrl("http://localhost:" + getPort() + "/test/bug49nnn/bug49799.jsp",
                 res, headers);

==================================================
TesterLeakingServlet1.java
index 2106c4b697..8076910c0e 100644
--- a/test/org/apache/jasper/util/TestFastRemovalDequeue.java
+++ b/test/org/apache/jasper/util/TestFastRemovalDequeue.java
@@ -26,7 +26,7 @@ public class TestFastRemovalDequeue {
 
     @Test
     public void testSinglePushPop() throws Exception {
-        FastRemovalDequeue<Object> q = new FastRemovalDequeue<Object>(2);
+        FastRemovalDequeue<Object> q = new FastRemovalDequeue<>(2);
 
         Object o1 = new Object();
 
@@ -42,7 +42,7 @@ public class TestFastRemovalDequeue {
 
     @Test
     public void testDoublePushPop() throws Exception {
-        FastRemovalDequeue<Object> q = new FastRemovalDequeue<Object>(2);
+        FastRemovalDequeue<Object> q = new FastRemovalDequeue<>(2);
 
         Object o1 = new Object();
         Object o2 = new Object();
@@ -69,7 +69,7 @@ public class TestFastRemovalDequeue {
 
     @Test
     public void testSingleUnpopPop() throws Exception {
-        FastRemovalDequeue<Object> q = new FastRemovalDequeue<Object>(2);
+        FastRemovalDequeue<Object> q = new FastRemovalDequeue<>(2);
 
         Object o1 = new Object();
 
@@ -85,7 +85,7 @@ public class TestFastRemovalDequeue {
 
     @Test
     public void testDoubleUnpopPop() throws Exception {
-        FastRemovalDequeue<Object> q = new FastRemovalDequeue<Object>(2);
+        FastRemovalDequeue<Object> q = new FastRemovalDequeue<>(2);
 
         Object o1 = new Object();
         Object o2 = new Object();
@@ -112,7 +112,7 @@ public class TestFastRemovalDequeue {
 
     @Test
     public void testSinglePushUnpush() throws Exception {
-        FastRemovalDequeue<Object> q = new FastRemovalDequeue<Object>(2);
+        FastRemovalDequeue<Object> q = new FastRemovalDequeue<>(2);
 
         Object o1 = new Object();
 
@@ -128,7 +128,7 @@ public class TestFastRemovalDequeue {
 
     @Test
     public void testDoublePushUnpush() throws Exception {
-        FastRemovalDequeue<Object> q = new FastRemovalDequeue<Object>(2);
+        FastRemovalDequeue<Object> q = new FastRemovalDequeue<>(2);
 
         Object o1 = new Object();
         Object o2 = new Object();
@@ -155,7 +155,7 @@ public class TestFastRemovalDequeue {
 
     @Test
     public void testSinglePushRemove() throws Exception {
-        FastRemovalDequeue<Object> q = new FastRemovalDequeue<Object>(2);
+        FastRemovalDequeue<Object> q = new FastRemovalDequeue<>(2);
 
         Object o1 = new Object();
 
@@ -172,7 +172,7 @@ public class TestFastRemovalDequeue {
 
     @Test
     public void testDoublePushRemove() throws Exception {
-        FastRemovalDequeue<Object> q = new FastRemovalDequeue<Object>(2);
+        FastRemovalDequeue<Object> q = new FastRemovalDequeue<>(2);
 
         Object o1 = new Object();
         Object o2 = new Object();

==================================================
TesterThreadScopedHolder.java
index f773af1a4b..6b1dcce173 100644
--- a/test/org/apache/tomcat/unittest/TesterLeakingServlet1.java
+++ b/test/org/apache/tomcat/unittest/TesterLeakingServlet1.java
@@ -27,7 +27,7 @@ public class TesterLeakingServlet1 extends HttpServlet {
 
     private static final long serialVersionUID = 1L;
 
-    private ThreadLocal<TesterCounter> myThreadLocal = new ThreadLocal<TesterCounter>();
+    private ThreadLocal<TesterCounter> myThreadLocal = new ThreadLocal<>();
 
     @Override
     protected void doGet(HttpServletRequest request,

==================================================
TestBug49158.java
index abae2c5377..8ae8568265 100644
--- a/test/org/apache/tomcat/unittest/TesterThreadScopedHolder.java
+++ b/test/org/apache/tomcat/unittest/TesterThreadScopedHolder.java
@@ -20,7 +20,7 @@ import java.util.List;
 
 public class TesterThreadScopedHolder {
     private static final ThreadLocal<List<TesterCounter>> threadLocal =
-            new ThreadLocal<List<TesterCounter>>();
+            new ThreadLocal<>();
 
     public static void saveInHolder(List<TesterCounter> o) {
         threadLocal.set(o);

==================================================
TestCookiesDefaultSysProps.java
index e5781cc455..e7aeae798f 100644
--- a/test/org/apache/tomcat/util/http/TestBug49158.java
+++ b/test/org/apache/tomcat/util/http/TestBug49158.java
@@ -51,7 +51,7 @@ public class TestBug49158 extends CookiesBaseTest {
         Tomcat tomcat = getTomcatInstance();
         addServlets(tomcat);
         tomcat.start();
-        Map<String,List<String>> headers = new HashMap<String,List<String>>();
+        Map<String,List<String>> headers = new HashMap<>();
         ByteChunk res = new ByteChunk();
         getUrl("http://localhost:" + getPort() + "/"+path, res, headers);
         List<String> cookieHeaders = headers.get("Set-Cookie");

==================================================
TestCookiesStrictSysProps.java
index 5870b3eb95..826b8a96e6 100644
--- a/test/org/apache/tomcat/util/http/TestCookiesDefaultSysProps.java
+++ b/test/org/apache/tomcat/util/http/TestCookiesDefaultSysProps.java
@@ -60,7 +60,7 @@ public class TestCookiesDefaultSysProps extends CookiesBaseTest {
         assertEquals("Cookie name ok", res.toString());
 
         // Need to read response headers to test version switching
-        Map<String,List<String>> headers = new HashMap<String,List<String>>();
+        Map<String,List<String>> headers = new HashMap<>();
         getUrl("http://localhost:" + getPort() + "/switch", res, headers);
         List<String> cookieHeaders = headers.get("Set-Cookie");
         for (String cookieHeader : cookieHeaders) {

==================================================
TestCustomSsl.java
index ddfaf82a13..e96166d33f 100644
--- a/test/org/apache/tomcat/util/http/TestCookiesStrictSysProps.java
+++ b/test/org/apache/tomcat/util/http/TestCookiesStrictSysProps.java
@@ -63,7 +63,7 @@ public class TestCookiesStrictSysProps extends CookiesBaseTest {
         assertEquals("Cookie name ok", res.toString());
 
         // Need to read response headers to test version switching
-        Map<String,List<String>> headers = new HashMap<String,List<String>>();
+        Map<String,List<String>> headers = new HashMap<>();
         getUrl("http://localhost:" + getPort() + "/switch", res, headers);
         List<String> cookieHeaders = headers.get("Set-Cookie");
         for (String cookieHeader : cookieHeaders) {

==================================================
