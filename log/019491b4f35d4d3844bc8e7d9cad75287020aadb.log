019491b4f35d4d3844bc8e7d9cad75287020aadb
==================================================
Revert after CI failure, try something else.
==================================================
Remy Maucherat
==================================================
Thu Feb 21 19:31:22 2019 +0000
==================================================
AbstractProcessor.java
Revert after CI failure, try something else.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1854084 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractProtocol.java
index 69582a48c7..205a7891b2 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -790,7 +790,7 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
         }
 
         if (!isRequestBodyFullyRead()) {
-            registerReadInterest(true);
+            registerReadInterest();
         }
 
         return false;
@@ -800,7 +800,7 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
     protected abstract boolean isRequestBodyFullyRead();
 
 
-    protected abstract void registerReadInterest(boolean body);
+    protected abstract void registerReadInterest();
 
 
     protected abstract boolean isReadyForWrite();

==================================================
AjpProcessor.java
index 465876c0dc..6b9dbea62d 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -903,7 +903,7 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
                     // processor. Continue to poll for the next request.
                     connections.remove(socket);
                     release(processor);
-                    wrapper.registerReadInterest(true);
+                    wrapper.registerReadInterest();
                 } else if (state == SocketState.SENDFILE) {
                     // Sendfile in progress. If it fails, the socket will be
                     // closed. If it works, the socket either be added to the
@@ -993,7 +993,7 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
                 //  - this is an upgraded connection
                 //  - the request line/headers have not been completely
                 //    read
-                socket.registerReadInterest(true);
+                socket.registerReadInterest();
             }
         }
 

==================================================
Http11Processor.java
index 064cc88d85..a56fb7a306 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -1134,8 +1134,8 @@ public class AjpProcessor extends AbstractProcessor {
 
 
     @Override
-    protected final void registerReadInterest(boolean body) {
-        socketWrapper.registerReadInterest(!body);
+    protected final void registerReadInterest() {
+        socketWrapper.registerReadInterest();
     }
 
 

==================================================
UpgradeServletInputStream.java
index 8985ad8301..c5f198cb72 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -1215,8 +1215,8 @@ public class Http11Processor extends AbstractProcessor {
 
 
     @Override
-    protected final void registerReadInterest(boolean body) {
-        socketWrapper.registerReadInterest(!body);
+    protected final void registerReadInterest() {
+        socketWrapper.registerReadInterest();
     }
 
 

==================================================
StreamProcessor.java
index 956038ee60..1c1ddb6c03 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeServletInputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeServletInputStream.java
@@ -107,7 +107,7 @@ public class UpgradeServletInputStream extends ServletInputStream {
         if (ContainerThreadMarker.isContainerThread()) {
             processor.addDispatch(DispatchType.NON_BLOCKING_READ);
         } else {
-            socketWrapper.registerReadInterest(true);
+            socketWrapper.registerReadInterest();
         }
 
         // Switching to non-blocking. Don't know if data is available.

==================================================
AprEndpoint.java
index 09478a320b..89cad0abe8 100644
--- a/java/org/apache/coyote/http2/StreamProcessor.java
+++ b/java/org/apache/coyote/http2/StreamProcessor.java
@@ -263,7 +263,7 @@ class StreamProcessor extends AbstractProcessor {
 
 
     @Override
-    protected final void registerReadInterest(boolean body) {
+    protected final void registerReadInterest() {
         // Should never be called for StreamProcessor as isReadyForRead() is
         // overridden
         throw new UnsupportedOperationException();

==================================================
Nio2Endpoint.java
index 0bb73675e4..a5d7c9ced7 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -2724,7 +2724,7 @@ public class AprEndpoint extends AbstractEndpoint<Long,Long> implements SNICallB
 
 
         @Override
-        public void registerReadInterest(boolean polling) {
+        public void registerReadInterest() {
             // Make sure an already closed socket is not added to the poller
             synchronized (closedLock) {
                 if (closed) {

==================================================
NioEndpoint.java
index 8323bfed0d..0548062461 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -1475,11 +1475,14 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel,AsynchronousS
 
 
         @Override
-        public void registerReadInterest(boolean polling) {
+        public void registerReadInterest() {
+            if (!ContainerThreadMarker.isContainerThread()) {
+                return;
+            }
             synchronized (readCompletionHandler) {
                 if (readPending.availablePermits() == 0) {
                     readInterest = true;
-                } else if (polling) {
+                } else {
                     // If no read is pending, start waiting for data
                     awaitBytes();
                 }

==================================================
SocketWrapperBase.java
index 3bae5378f2..621dd63d48 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -1243,7 +1243,7 @@ public class NioEndpoint extends AbstractJsseEndpoint<NioChannel,SocketChannel>
 
 
         @Override
-        public void registerReadInterest(boolean polling) {
+        public void registerReadInterest() {
             getPoller().add(getSocket(), SelectionKey.OP_READ);
         }
 
@@ -1420,7 +1420,7 @@ public class NioEndpoint extends AbstractJsseEndpoint<NioChannel,SocketChannel>
                 } else if (handshake == -1 ) {
                     close(socket, key);
                 } else if (handshake == SelectionKey.OP_READ){
-                    socketWrapper.registerReadInterest(true);
+                    socketWrapper.registerReadInterest();
                 } else if (handshake == SelectionKey.OP_WRITE){
                     socketWrapper.registerWriteInterest();
                 }

==================================================
