c44a0cab87564329e2241bfabac925abdea23ef0
==================================================
Move from a global system property to a per Context attribute for clearing static references.
==================================================
Mark Emlyn
==================================================
Tue Dec 1 19:33:44 2009 +0000
==================================================
StandardContext.java
Move from a global system property to a per Context attribute for clearing static references.
Change the default as this should no longer be an issue with modern JVMs and the other memory leak protection provided in Tomcat 7.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@885889 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WebappClassLoader.java
index ef6d31e570..9b77f7d930 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -711,13 +711,13 @@ public class StandardContext
     /**
      * Attribute value used to turn on/off XML validation
      */
-     private boolean tldValidation = false;
+    private boolean tldValidation = false;
 
 
     /**
      * Attribute value used to turn on/off TLD XML namespace validation
      */
-     private boolean tldNamespaceAware = false;
+    private boolean tldNamespaceAware = false;
 
 
     /**
@@ -736,8 +736,17 @@ public class StandardContext
      */
     private JarScanner jarScanner = null;
 
-
-
+    /**
+     * Should Tomcat attempt to null out any static or final fields from loaded
+     * classes when a web application is stopped as a work around for apparent
+     * garbage collection bugs and application coding errors. There have been
+     * some issues reported with log4j when this option is true. Applications
+     * without memory leaks using recent JVMs should operate correctly with this
+     * option set to <code>false</code>. If not specified, the default value of
+     * <code>false</code> will be used. 
+     */
+    private boolean clearReferencesStatic = false;
+    
     // ----------------------------------------------------- Context Properties
 
 
@@ -2069,6 +2078,32 @@ public class StandardContext
     }
 
 
+    /**
+     * Return the clearReferencesStatic flag for this Context.
+     */
+    public boolean getClearReferencesStatic() {
+
+        return (this.clearReferencesStatic);
+
+    }
+
+
+    /**
+     * Set the clearReferencesStatic feature for this Context.
+     *
+     * @param clearReferencesStatic The new flag value
+     */
+    public void setClearReferencesStatic(boolean clearReferencesStatic) {
+
+        boolean oldClearReferencesStatic = this.clearReferencesStatic;
+        this.clearReferencesStatic = clearReferencesStatic;
+        support.firePropertyChange("clearReferencesStatic",
+                                   oldClearReferencesStatic,
+                                   this.clearReferencesStatic);
+
+    }
+
+
     // -------------------------------------------------------- Context Methods
 
 

==================================================
WebappLoader.java
index ef891427d1..2b0f546ef8 100644
--- a/java/org/apache/catalina/loader/WebappClassLoader.java
+++ b/java/org/apache/catalina/loader/WebappClassLoader.java
@@ -119,9 +119,6 @@ public class WebappClassLoader
     private static final List<String> JVM_THREAD_GROUP_NAMES =
         new ArrayList<String>();
 
-    public static final boolean ENABLE_CLEAR_REFERENCES = 
-        Boolean.valueOf(System.getProperty("org.apache.catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES", "true")).booleanValue();
-    
     static {
         JVM_THREAD_GROUP_NAMES.add("system");
         JVM_THREAD_GROUP_NAMES.add("RMI Runtime");
@@ -411,6 +408,17 @@ public class WebappClassLoader
     protected Permission allPermission = new java.security.AllPermission();
 
 
+    /**
+     * Should Tomcat attempt to null out any static or final fields from loaded
+     * classes when a web application is stopped as a work around for apparent
+     * garbage collection bugs and application coding errors. There have been
+     * some issues reported with log4j when this option is true. Applications
+     * without memory leaks using recent JVMs should operate correctly with this
+     * option set to <code>false</code>. If not specified, the default value of
+     * <code>false</code> will be used. 
+     */
+    private boolean clearReferencesStatic = false;
+
     // ------------------------------------------------------------- Properties
 
 
@@ -564,6 +572,25 @@ public class WebappClassLoader
          parent = pcl;
      }
 
+     /**
+      * Return the clearReferencesStatic flag for this Context.
+      */
+     public boolean getClearReferencesStatic() {
+         return (this.clearReferencesStatic);
+     }
+
+
+     /**
+      * Set the clearReferencesStatic feature for this Context.
+      *
+      * @param clearReferencesStatic The new flag value
+      */
+     public void setClearReferencesStatic(boolean clearReferencesStatic) {
+         this.clearReferencesStatic = clearReferencesStatic;
+     }
+
+
+
     // ------------------------------------------------------- Reloader Methods
 
 
@@ -1653,7 +1680,7 @@ public class WebappClassLoader
         
         // Null out any static or final fields from loaded classes,
         // as a workaround for apparent garbage collection bugs
-        if (ENABLE_CLEAR_REFERENCES) {
+        if (clearReferencesStatic) {
             clearReferencesStaticFinal();
         }
         

==================================================
