9136cee3c558215dd553e8ca5b29bd13f5d3bd19
==================================================
Make certificates and manifests available
==================================================
Mark Emlyn
==================================================
Tue Nov 5 00:07:51 2013 +0000
==================================================
WebResource.java
Make certificates and manifests available

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1538837 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WebappClassLoader.java
index 0b07f50b49..2c843c4c60 100644
--- a/java/org/apache/catalina/WebResource.java
+++ b/java/org/apache/catalina/WebResource.java
@@ -18,6 +18,8 @@ package org.apache.catalina;
 
 import java.io.InputStream;
 import java.net.URL;
+import java.security.cert.Certificate;
+import java.util.jar.Manifest;
 
 /**
  * Represents a file or directory within a web application. It borrows heavily
@@ -139,4 +141,19 @@ public interface WebResource {
      * part.
      */
     WebResourceRoot getWebResourceRoot();
+
+    /**
+     * Obtain the certificates that were used to sign this resource to verify
+     * it or @null if none.
+     *
+     * @see java.util.jar.JarEntry#getCertificates()
+     */
+    Certificate[] getCertificates();
+
+    /**
+     * Obtain the manifest associated with this resource or @null if none.
+     *
+     * @see java.util.jar.JarFile#getManifest()
+     */
+    Manifest getManifest();
 }

==================================================
AbstractArchiveResource.java
index 9a632a46c6..36b3353e52 100644
--- a/java/org/apache/catalina/loader/WebappClassLoader.java
+++ b/java/org/apache/catalina/loader/WebappClassLoader.java
@@ -60,7 +60,6 @@ import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.jar.Attributes;
 import java.util.jar.Attributes.Name;
-import java.util.jar.JarEntry;
 import java.util.jar.Manifest;
 
 import org.apache.catalina.Globals;
@@ -2427,8 +2426,6 @@ public class WebappClassLoader extends URLClassLoader
         if (entry != null)
             return entry;
 
-        int contentLength = -1;
-        InputStream binaryStream = null;
         boolean isClassResource = path.endsWith(CLASS_FILE_SUFFIX);
 
         WebResource resource = null;
@@ -2441,61 +2438,38 @@ public class WebappClassLoader extends URLClassLoader
             return null;
         }
 
-        contentLength = (int) resource.getContentLength();
         entry = new ResourceEntry();
         entry.source = resource.getURL();
         entry.codeBase = entry.source;
         entry.lastModified = resource.getLastModified();
 
-        binaryStream = resource.getInputStream();
-
         if (needConvert) {
             if (path.endsWith(".properties")) {
                 fileNeedConvert = true;
             }
         }
 
-        JarEntry jarEntry = null;
-
-        try {
-
-            /* Only cache the binary content if there is some content
-             * available and either:
-             * a) It is a class file since the binary content is only cached
-             *    until the class has been loaded
-             *    or
-             * b) The file needs conversion to address encoding issues (see
-             *    below)
-             *
-             * In all other cases do not cache the content to prevent
-             * excessive memory usage if large resources are present (see
-             * https://issues.apache.org/bugzilla/show_bug.cgi?id=53081).
-             */
-            if (binaryStream != null &&
-                    (isClassResource || fileNeedConvert)) {
-
-                byte[] binaryContent = new byte[contentLength];
-
-                int pos = 0;
-                try {
-
-                    while (true) {
-                        int n = binaryStream.read(binaryContent, pos,
-                                                  binaryContent.length - pos);
-                        if (n <= 0)
-                            break;
-                        pos += n;
-                    }
-                } catch (IOException e) {
-                    log.error(sm.getString("webappClassLoader.readError", name), e);
-                    return null;
-                }
-                if (fileNeedConvert) {
+        /* Only cache the binary content if there is some content
+         * available and either:
+         * a) It is a class file since the binary content is only cached
+         *    until the class has been loaded
+         *    or
+         * b) The file needs conversion to address encoding issues (see
+         *    below)
+         *
+         * In all other cases do not cache the content to prevent
+         * excessive memory usage if large resources are present (see
+         * https://issues.apache.org/bugzilla/show_bug.cgi?id=53081).
+         */
+        if (isClassResource || fileNeedConvert) {
+            byte[] binaryContent = resource.getContent();
+            if (binaryContent != null) {
+                 if (fileNeedConvert) {
                     // Workaround for certain files on platforms that use
                     // EBCDIC encoding, when they are read through FileInputStream.
                     // See commit message of rev.303915 for details
                     // http://svn.apache.org/viewvc?view=revision&revision=303915
-                    String str = new String(binaryContent,0,pos);
+                    String str = new String(binaryContent);
                     try {
                         binaryContent = str.getBytes(StandardCharsets.UTF_8);
                     } catch (Exception e) {
@@ -2503,22 +2477,12 @@ public class WebappClassLoader extends URLClassLoader
                     }
                 }
                 entry.binaryContent = binaryContent;
-
-                // The certificates are only available after the JarEntry
-                // associated input stream has been fully read
-                // TODO
-                if (jarEntry != null) {
-                    entry.certificates = jarEntry.getCertificates();
-                }
-
-            }
-        } finally {
-            if (binaryStream != null) {
-                try {
-                    binaryStream.close();
-                } catch (IOException e) { /* Ignore */}
+                // The certificates and manifest are made available as a side
+                // effect of reading the binary content
+                entry.certificates = resource.getCertificates();
             }
         }
+        entry.manifest = resource.getManifest();
 
         if (isClassResource && entry.binaryContent != null &&
                 this.transformers.size() > 0) {

==================================================
AbstractArchiveResourceSet.java
index f9fb2dc39b..5e5e42344c 100644
--- a/java/org/apache/catalina/webresources/AbstractArchiveResource.java
+++ b/java/org/apache/catalina/webresources/AbstractArchiveResource.java
@@ -20,8 +20,10 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.security.cert.Certificate;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
+import java.util.jar.Manifest;
 
 import org.apache.catalina.WebResourceRoot;
 
@@ -30,15 +32,19 @@ public abstract class AbstractArchiveResource extends AbstractResource {
     private final String base;
     private final String baseUrl;
     private final JarEntry resource;
+    private final Manifest manifest;
     private final String name;
+    private boolean readCerts = false;
+    private Certificate[] certificates;
 
     protected AbstractArchiveResource(WebResourceRoot root, String webAppPath,
             String base, String baseUrl, JarEntry jarEntry,
-            String internalPath) {
+            String internalPath, Manifest manifest) {
         super(root, webAppPath);
         this.base = base;
         this.baseUrl = baseUrl;
         this.resource = jarEntry;
+        this.manifest = manifest;
 
         String resourceName = resource.getName();
         if (resourceName.charAt(resourceName.length() - 1) == '/') {
@@ -137,15 +143,74 @@ public abstract class AbstractArchiveResource extends AbstractResource {
         }
     }
 
+    @Override
+    public final byte[] getContent() {
+        long len = getContentLength();
+
+        if (len > Integer.MAX_VALUE) {
+            // Can't create an array that big
+            throw new ArrayIndexOutOfBoundsException(sm.getString(
+                    "abstractResource.getContentTooLarge", getWebappPath(),
+                    Long.valueOf(len)));
+        }
+
+        int size = (int) len;
+        byte[] result = new byte[size];
+
+        int pos = 0;
+        try (JarInputStreamWrapper jisw = getJarInputStreamWrapper()) {
+            while (pos < size) {
+                int n = jisw.read(result, pos, size - pos);
+                if (n < 0) {
+                    break;
+                }
+                pos += n;
+            }
+            // Once the stream has been read, read the certs
+            certificates = jisw.getCertificates();
+            readCerts = true;
+        } catch (IOException ioe) {
+            if (getLog().isDebugEnabled()) {
+                getLog().debug(sm.getString("abstractResource.getContentFail",
+                        getWebappPath()), ioe);
+            }
+        }
+
+        return result;
+    }
 
-    protected static class JarInputStreamWrapper extends InputStream {
+
+    @Override
+    public Certificate[] getCertificates() {
+        if (!readCerts) {
+            // TODO - get content first
+            throw new IllegalStateException();
+        }
+        return certificates;
+    }
+
+    @Override
+    public Manifest getManifest() {
+        return manifest;
+    }
+
+    @Override
+    protected final InputStream doGetInputStream() {
+        return getJarInputStreamWrapper();
+    }
+
+    protected abstract JarInputStreamWrapper getJarInputStreamWrapper();
+
+    protected class JarInputStreamWrapper extends InputStream {
 
         private final JarFile jarFile;
+        private final JarEntry jarEntry;
         private final InputStream is;
 
 
-        public JarInputStreamWrapper(JarFile jarFile, InputStream is) {
+        public JarInputStreamWrapper(JarFile jarFile, JarEntry jarEntry, InputStream is) {
             this.jarFile = jarFile;
+            this.jarEntry = jarEntry;
             this.is = is;
         }
 
@@ -204,5 +269,9 @@ public abstract class AbstractArchiveResource extends AbstractResource {
         public boolean markSupported() {
             return is.markSupported();
         }
+
+        public Certificate[] getCertificates() {
+            return jarEntry.getCertificates();
+        }
     }
 }

==================================================
AbstractResource.java
index cd5a8bac3a..f61683f3c5 100644
--- a/java/org/apache/catalina/webresources/AbstractArchiveResourceSet.java
+++ b/java/org/apache/catalina/webresources/AbstractArchiveResourceSet.java
@@ -23,6 +23,7 @@ import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Set;
 import java.util.jar.JarEntry;
+import java.util.jar.Manifest;
 
 import org.apache.catalina.WebResource;
 import org.apache.catalina.WebResourceRoot;
@@ -32,8 +33,13 @@ public abstract class AbstractArchiveResourceSet extends AbstractResourceSet {
 
     private final HashMap<String,JarEntry> jarFileEntries = new HashMap<>();
     private String baseUrl;
+    private Manifest manifest;
 
 
+    protected void setManifest(Manifest manifest) {
+        this.manifest = manifest;
+    }
+
     public String getBaseUrl() {
         return baseUrl;
     }
@@ -216,7 +222,7 @@ public abstract class AbstractArchiveResourceSet extends AbstractResourceSet {
                 if (jarEntry == null) {
                     return new EmptyResource(root, path);
                 } else {
-                    return createArchiveResource(jarEntry, path);
+                    return createArchiveResource(jarEntry, path, manifest);
                 }
             }
         } else {
@@ -225,5 +231,5 @@ public abstract class AbstractArchiveResourceSet extends AbstractResourceSet {
     }
 
     protected abstract WebResource createArchiveResource(JarEntry jarEntry,
-            String webAppPath);
+            String webAppPath, Manifest manifest);
 }

==================================================
CachedResource.java
index d2b7b7889b..8415cb1f59 100644
--- a/java/org/apache/catalina/webresources/AbstractResource.java
+++ b/java/org/apache/catalina/webresources/AbstractResource.java
@@ -16,7 +16,6 @@
  */
 package org.apache.catalina.webresources;
 
-import java.io.IOException;
 import java.io.InputStream;
 import java.util.Date;
 
@@ -90,44 +89,6 @@ public abstract class AbstractResource implements WebResource {
     }
 
 
-    @Override
-    public final byte[] getContent() {
-        long len = getContentLength();
-
-        if (len > Integer.MAX_VALUE) {
-            // Can't create an array that big
-            throw new ArrayIndexOutOfBoundsException(sm.getString(
-                    "abstractResource.getContentTooLarge", getWebappPath(),
-                    Long.valueOf(len)));
-        }
-
-        int size = (int) len;
-        byte[] result = new byte[size];
-
-        int pos = 0;
-        try (InputStream is = getInputStream()) {
-            if (is == null) {
-                return null;
-            }
-
-            while (pos < size) {
-                int n = is.read(result, pos, size - pos);
-                if (n < 0) {
-                    break;
-                }
-                pos += n;
-            }
-        } catch (IOException ioe) {
-            if (getLog().isDebugEnabled()) {
-                getLog().debug(sm.getString("abstractResource.getContentFail",
-                        getWebappPath()), ioe);
-            }
-        }
-
-        return result;
-    }
-
-
     @Override
     public final InputStream getInputStream() {
         InputStream is = doGetInputStream();

==================================================
EmptyResource.java
index cd12372b6e..711a40a144 100644
--- a/java/org/apache/catalina/webresources/CachedResource.java
+++ b/java/org/apache/catalina/webresources/CachedResource.java
@@ -19,6 +19,8 @@ package org.apache.catalina.webresources;
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
 import java.net.URL;
+import java.security.cert.Certificate;
+import java.util.jar.Manifest;
 
 import org.apache.catalina.WebResource;
 import org.apache.catalina.WebResourceRoot;
@@ -234,6 +236,16 @@ public class CachedResource implements WebResource {
         return webResource.getURL();
     }
 
+    @Override
+    public Certificate[] getCertificates() {
+        return webResource.getCertificates();
+    }
+
+    @Override
+    public Manifest getManifest() {
+        return webResource.getManifest();
+    }
+
     @Override
     public WebResourceRoot getWebResourceRoot() {
         return webResource.getWebResourceRoot();

==================================================
FileResource.java
index f5f1afd9d7..fba3d86571 100644
--- a/java/org/apache/catalina/webresources/EmptyResource.java
+++ b/java/org/apache/catalina/webresources/EmptyResource.java
@@ -18,6 +18,8 @@ package org.apache.catalina.webresources;
 
 import java.io.InputStream;
 import java.net.URL;
+import java.security.cert.Certificate;
+import java.util.jar.Manifest;
 
 import org.apache.catalina.WebResource;
 import org.apache.catalina.WebResourceRoot;
@@ -132,6 +134,16 @@ public class EmptyResource implements WebResource {
         return null;
     }
 
+    @Override
+    public Certificate[] getCertificates() {
+        return null;
+    }
+
+    @Override
+    public Manifest getManifest() {
+        return null;
+    }
+
     @Override
     public WebResourceRoot getWebResourceRoot() {
         return root;

==================================================
JarResource.java
index 369aba911b..99914c9bca 100644
--- a/java/org/apache/catalina/webresources/FileResource.java
+++ b/java/org/apache/catalina/webresources/FileResource.java
@@ -25,6 +25,8 @@ import java.net.MalformedURLException;
 import java.net.URL;
 import java.nio.file.Files;
 import java.nio.file.attribute.BasicFileAttributes;
+import java.security.cert.Certificate;
+import java.util.jar.Manifest;
 
 import org.apache.catalina.WebResourceRoot;
 import org.apache.juli.logging.Log;
@@ -136,6 +138,40 @@ public class FileResource extends AbstractResource {
         }
     }
 
+    @Override
+    public final byte[] getContent() {
+        long len = getContentLength();
+
+        if (len > Integer.MAX_VALUE) {
+            // Can't create an array that big
+            throw new ArrayIndexOutOfBoundsException(sm.getString(
+                    "abstractResource.getContentTooLarge", getWebappPath(),
+                    Long.valueOf(len)));
+        }
+
+        int size = (int) len;
+        byte[] result = new byte[size];
+
+        int pos = 0;
+        try (InputStream is = new FileInputStream(resource)) {
+            while (pos < size) {
+                int n = is.read(result, pos, size - pos);
+                if (n < 0) {
+                    break;
+                }
+                pos += n;
+            }
+        } catch (IOException ioe) {
+            if (getLog().isDebugEnabled()) {
+                getLog().debug(sm.getString("abstractResource.getContentFail",
+                        getWebappPath()), ioe);
+            }
+        }
+
+        return result;
+    }
+
+
     @Override
     public long getCreation() {
         try {
@@ -168,6 +204,16 @@ public class FileResource extends AbstractResource {
         }
     }
 
+    @Override
+    public Certificate[] getCertificates() {
+        return null;
+    }
+
+    @Override
+    public Manifest getManifest() {
+        return null;
+    }
+
     protected File getResourceInternal() {
         return resource;
     }

==================================================
JarResourceRoot.java
index 168dfeb3d5..2b54a344db 100644
--- a/java/org/apache/catalina/webresources/JarResource.java
+++ b/java/org/apache/catalina/webresources/JarResource.java
@@ -20,6 +20,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
+import java.util.jar.Manifest;
 
 import org.apache.catalina.WebResourceRoot;
 import org.apache.juli.logging.Log;
@@ -34,16 +35,20 @@ public class JarResource extends AbstractArchiveResource {
     private static final Log log = LogFactory.getLog(JarResource.class);
 
     public JarResource(WebResourceRoot root, String webAppPath, String base,
-            String baseUrl, JarEntry jarEntry, String internalPath) {
-        super(root, webAppPath, base, "jar:" + baseUrl, jarEntry, internalPath);
+            String baseUrl, JarEntry jarEntry, String internalPath,
+            Manifest manifest) {
+        super(root, webAppPath, base, "jar:" + baseUrl, jarEntry, internalPath,
+                manifest);
     }
 
     @Override
-    protected InputStream doGetInputStream() {
+    protected JarInputStreamWrapper getJarInputStreamWrapper() {
         try {
             JarFile jarFile = new JarFile(getBase());
-            InputStream is = jarFile.getInputStream(getResource());
-            return new JarInputStreamWrapper(jarFile, is);
+            // Need to create a new JarEntry so the certificates can be read
+            JarEntry jarEntry = jarFile.getJarEntry(getResource().getName());
+            InputStream is = jarFile.getInputStream(jarEntry);
+            return new JarInputStreamWrapper(jarFile, jarEntry, is);
         } catch (IOException e) {
             if (log.isDebugEnabled()) {
                 log.debug(sm.getString("fileResource.getInputStreamFail",

==================================================
JarResourceSet.java
index 56e782f09c..13dfae8741 100644
--- a/java/org/apache/catalina/webresources/JarResourceRoot.java
+++ b/java/org/apache/catalina/webresources/JarResourceRoot.java
@@ -20,6 +20,8 @@ import java.io.File;
 import java.io.InputStream;
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.security.cert.Certificate;
+import java.util.jar.Manifest;
 
 import org.apache.catalina.WebResourceRoot;
 import org.apache.juli.logging.Log;
@@ -108,6 +110,11 @@ public class JarResourceRoot extends AbstractResource {
         return null;
     }
 
+    @Override
+    public byte[] getContent() {
+        return null;
+    }
+
     @Override
     public long getCreation() {
         return base.lastModified();
@@ -130,4 +137,14 @@ public class JarResourceRoot extends AbstractResource {
     protected Log getLog() {
         return log;
     }
+
+    @Override
+    public Certificate[] getCertificates() {
+        return null;
+    }
+
+    @Override
+    public Manifest getManifest() {
+        return null;
+    }
 }

==================================================
JarWarResource.java
index 7b26ebdb67..b2fab84e00 100644
--- a/java/org/apache/catalina/webresources/JarResourceSet.java
+++ b/java/org/apache/catalina/webresources/JarResourceSet.java
@@ -22,6 +22,7 @@ import java.net.MalformedURLException;
 import java.util.Enumeration;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
+import java.util.jar.Manifest;
 
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.WebResource;
@@ -73,9 +74,9 @@ public class JarResourceSet extends AbstractArchiveResourceSet {
 
     @Override
     protected WebResource createArchiveResource(JarEntry jarEntry,
-            String webAppPath) {
+            String webAppPath, Manifest manifest) {
         return new JarResource(getRoot(), webAppPath, getBase(), getBaseUrl(),
-                jarEntry, getInternalPath());
+                jarEntry, getInternalPath(), manifest);
     }
 
     //-------------------------------------------------------- Lifecycle methods
@@ -88,6 +89,7 @@ public class JarResourceSet extends AbstractArchiveResourceSet {
                 JarEntry entry = entries.nextElement();
                 getJarFileEntries().put(entry.getName(), entry);
             }
+            setManifest(jarFile.getManifest());
         } catch (IOException ioe) {
             throw new IllegalArgumentException(ioe);
         }

==================================================
JarWarResourceSet.java
index e31debe6ba..bda358e552 100644
--- a/java/org/apache/catalina/webresources/JarWarResource.java
+++ b/java/org/apache/catalina/webresources/JarWarResource.java
@@ -21,6 +21,7 @@ import java.io.InputStream;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 import java.util.jar.JarInputStream;
+import java.util.jar.Manifest;
 
 import org.apache.catalina.WebResourceRoot;
 import org.apache.juli.logging.Log;
@@ -38,14 +39,14 @@ public class JarWarResource extends AbstractArchiveResource {
 
     public JarWarResource(WebResourceRoot root, String webAppPath, String base,
             String baseUrl, JarEntry jarEntry, String archivePath,
-            String internalPath) {
+            String internalPath, Manifest manifest) {
         super(root, webAppPath, base, "jar:war:" + baseUrl + "^/" + archivePath,
-                jarEntry, internalPath);
+                jarEntry, internalPath, manifest);
         this.archivePath = archivePath;
     }
 
     @Override
-    protected InputStream doGetInputStream() {
+    protected JarInputStreamWrapper getJarInputStreamWrapper() {
         try {
             JarFile warFile = new JarFile(getBase());
             JarEntry jarFileInWar = warFile.getJarEntry(archivePath);
@@ -72,7 +73,7 @@ public class JarWarResource extends AbstractArchiveResource {
                 return null;
             }
 
-            return new JarInputStreamWrapper(warFile, jarIs);
+            return new JarInputStreamWrapper(warFile, entry, jarIs);
         } catch (IOException e) {
             if (log.isDebugEnabled()) {
                 log.debug(sm.getString("fileResource.getInputStreamFail",

==================================================
