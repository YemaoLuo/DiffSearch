612e1c92bf889f2d1b1f90fe0d370fc5fd0db622
==================================================
Work around a known JVM bug that is fixed in 1.7.0_01 but still present
==================================================
Mark Emlyn
==================================================
Thu Oct 27 15:24:41 2011 +0000
==================================================
NioReceiver.java
Work around a known JVM bug that is fixed in 1.7.0_01 but still present
in 1.6.0_29 and was triggering intermittent unit test failures for
org.apache.catalina.tribes.group.TestGroupChannelMemberArrival.testMemberArrival

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1189805 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ParallelNioSender.java
index 99cff34862..9b58ba4a81 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java
@@ -113,7 +113,12 @@ public class NioReceiver extends ReceiverBase implements Runnable {
         // Get the associated ServerSocket to bind it with
         ServerSocket serverSocket = serverChannel.socket();
         // create a new Selector for use below
-        selector = Selector.open();
+        synchronized (Selector.class) {
+            // Selector.open() isn't thread safe
+            // http://bugs.sun.com/view_bug.do?bug_id=6427854
+            // Affects 1.6.0_29, fixed in 1.7.0_01
+            selector = Selector.open();
+        }
         // set the port the server channel will listen to
         //serverSocket.bind(new InetSocketAddress(getBind(), getTcpListenPort()));
         bind(serverSocket,getPort(),getAutoBind());

==================================================
NioEndpoint.java
index 7b9e83a0d5..188bc04c43 100644
--- a/java/org/apache/catalina/tribes/transport/nio/ParallelNioSender.java
+++ b/java/org/apache/catalina/tribes/transport/nio/ParallelNioSender.java
@@ -59,7 +59,12 @@ public class ParallelNioSender extends AbstractSender implements MultiPointSende
         new HashMap<Member, NioSender>();
 
     public ParallelNioSender() throws IOException {
-        selector = Selector.open();
+        synchronized (Selector.class) {
+            // Selector.open() isn't thread safe
+            // http://bugs.sun.com/view_bug.do?bug_id=6427854
+            // Affects 1.6.0_29, fixed in 1.7.0_01
+            selector = Selector.open();
+        }
         setConnected(true);
     }
 

==================================================
NioSelectorPool.java
index 4370b8445b..7bcd24a62f 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -919,7 +919,12 @@ public class NioEndpoint extends AbstractEndpoint {
         protected volatile int keyCount = 0;
 
         public Poller() throws IOException {
-            this.selector = Selector.open();
+            synchronized (Selector.class) {
+                // Selector.open() isn't thread safe
+                // http://bugs.sun.com/view_bug.do?bug_id=6427854
+                // Affects 1.6.0_29, fixed in 1.7.0_01
+                this.selector = Selector.open();
+            }
         }
 
         public int getKeyCount() { return keyCount; }

==================================================
SecureNioChannel.java
index 81b90b3828..69445e8dfe 100644
--- a/java/org/apache/tomcat/util/net/NioSelectorPool.java
+++ b/java/org/apache/tomcat/util/net/NioSelectorPool.java
@@ -65,7 +65,12 @@ public class NioSelectorPool {
         if (SHARED && SHARED_SELECTOR == null) {
             synchronized ( NioSelectorPool.class ) {
                 if ( SHARED_SELECTOR == null )  {
-                    SHARED_SELECTOR = Selector.open();
+                    synchronized (Selector.class) {
+                        // Selector.open() isn't thread safe
+                        // http://bugs.sun.com/view_bug.do?bug_id=6427854
+                        // Affects 1.6.0_29, fixed in 1.7.0_01
+                        SHARED_SELECTOR = Selector.open();
+                    }
                     log.info("Using a shared selector for servlet write/read");
                 }
             }
@@ -84,11 +89,26 @@ public class NioSelectorPool {
         Selector s = null;
         try {
             s = selectors.size()>0?selectors.poll():null;
-            if (s == null) s = Selector.open();
+            if (s == null) {
+                synchronized (Selector.class) {
+                    // Selector.open() isn't thread safe
+                    // http://bugs.sun.com/view_bug.do?bug_id=6427854
+                    // Affects 1.6.0_29, fixed in 1.7.0_01
+                    s = Selector.open();
+                }
+            }
             else spare.decrementAndGet();
 
         }catch (NoSuchElementException x ) {
-            try {s = Selector.open();}catch (IOException iox){}
+            try {
+                synchronized (Selector.class) {
+                    // Selector.open() isn't thread safe
+                    // http://bugs.sun.com/view_bug.do?bug_id=6427854
+                    // Affects 1.6.0_29, fixed in 1.7.0_01
+                    s = Selector.open();
+                }
+            } catch (IOException iox) {
+            }
         } finally {
             if ( s == null ) active.decrementAndGet();//we were unable to find a selector
         }

==================================================
NioSenderTest.java
index 4606aeaac6..3b8b2dc870 100644
--- a/java/org/apache/tomcat/util/net/SecureNioChannel.java
+++ b/java/org/apache/tomcat/util/net/SecureNioChannel.java
@@ -239,7 +239,12 @@ public class SecureNioChannel extends NioChannel  {
                     default : {
                         long now = System.currentTimeMillis();
                         if (selector==null) {
-                            selector = Selector.open();
+                            synchronized (Selector.class) {
+                                // Selector.open() isn't thread safe
+                                // http://bugs.sun.com/view_bug.do?bug_id=6427854
+                                // Affects 1.6.0_29, fixed in 1.7.0_01
+                                selector = Selector.open();
+                            }
                             key = getIOChannel().register(selector, hsStatus);
                         } else {
                             key.interestOps(hsStatus);

==================================================
SocketNioSend.java
index 3bbe7429ac..72cfad7b5e 100644
--- a/test/org/apache/catalina/tribes/test/NioSenderTest.java
+++ b/test/org/apache/catalina/tribes/test/NioSenderTest.java
@@ -60,7 +60,12 @@ public class NioSenderTest {
     }
 
     public void init() throws Exception {
-        selector = Selector.open();
+        synchronized (Selector.class) {
+            // Selector.open() isn't thread safe
+            // http://bugs.sun.com/view_bug.do?bug_id=6427854
+            // Affects 1.6.0_29, fixed in 1.7.0_01
+            selector = Selector.open();
+        }
         mbr = new MemberImpl("localhost",4444,0);
         NioSender sender = new NioSender();
         sender.setDestination(mbr);

==================================================
SocketNioValidateSend.java
index e865dd7412..5c71c6da22 100644
--- a/test/org/apache/catalina/tribes/test/transport/SocketNioSend.java
+++ b/test/org/apache/catalina/tribes/test/transport/SocketNioSend.java
@@ -32,7 +32,13 @@ import org.apache.catalina.tribes.transport.nio.NioSender;
 public class SocketNioSend {
 
     public static void main(String[] args) throws Exception {
-        Selector selector = Selector.open();
+        Selector selector;
+        synchronized (Selector.class) {
+            // Selector.open() isn't thread safe
+            // http://bugs.sun.com/view_bug.do?bug_id=6427854
+            // Affects 1.6.0_29, fixed in 1.7.0_01
+            selector = Selector.open();
+        }
         Member mbr = new MemberImpl("localhost", 9999, 0);
         ChannelData data = new ChannelData();
         data.setOptions(Channel.SEND_OPTIONS_BYTE_MESSAGE);

==================================================
