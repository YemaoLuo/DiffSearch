fc9b50bdc1f41c7f1cca429312a2a69521195611
==================================================
StringBuffer -> StringBuilder for tomcat-lite module
==================================================
Mark Emlyn
==================================================
Mon Nov 2 18:52:31 2009 +0000
==================================================
ClientAbortException.java
StringBuffer -> StringBuilder for tomcat-lite module

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@832046 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ServletConfigImpl.java
index 0b9f3657c8..ab395a3a71 100644
--- a/modules/tomcat-lite/java/org/apache/tomcat/lite/ClientAbortException.java
+++ b/modules/tomcat-lite/java/org/apache/tomcat/lite/ClientAbortException.java
@@ -125,7 +125,7 @@ public final class ClientAbortException extends IOException {
      */
     public String toString() {
 
-        StringBuffer sb = new StringBuffer("ClientAbortException:  ");
+        StringBuilder sb = new StringBuilder("ClientAbortException:  ");
         if (message != null) {
             sb.append(message);
             if (throwable != null) {

==================================================
ServletReaderImpl.java
index caf8b61d76..b68b32c72a 100644
--- a/modules/tomcat-lite/java/org/apache/tomcat/lite/ServletConfigImpl.java
+++ b/modules/tomcat-lite/java/org/apache/tomcat/lite/ServletConfigImpl.java
@@ -529,7 +529,7 @@ public class ServletConfigImpl implements ServletConfig, ServletRegistration {
      * Return a String representation of this component.
      */
     public String toString() {
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         if (ctx != null) {
             sb.append(ctx.toString());
             sb.append(".");

==================================================
ServletResponseImpl.java
index 15119e33cb..3bb3308b46 100644
--- a/modules/tomcat-lite/java/org/apache/tomcat/lite/ServletReaderImpl.java
+++ b/modules/tomcat-lite/java/org/apache/tomcat/lite/ServletReaderImpl.java
@@ -122,7 +122,7 @@ public class ServletReaderImpl
         int pos = 0;
         int end = -1;
         int skip = -1;
-        StringBuffer aggregator = null;
+        StringBuilder aggregator = null;
         while (end < 0) {
             mark(MAX_LINE_LENGTH);
             while ((pos < MAX_LINE_LENGTH) && (end < 0)) {
@@ -158,7 +158,7 @@ public class ServletReaderImpl
             }
             if (end < 0) {
                 if (aggregator == null) {
-                    aggregator = new StringBuffer();
+                    aggregator = new StringBuilder();
                 }
                 aggregator.append(lineBuffer);
                 pos = 0;

==================================================
Dir2Html.java
index 34dae5d6db..24d6c3cc0f 100644
--- a/modules/tomcat-lite/java/org/apache/tomcat/lite/ServletResponseImpl.java
+++ b/modules/tomcat-lite/java/org/apache/tomcat/lite/ServletResponseImpl.java
@@ -670,7 +670,7 @@ public class ServletResponseImpl
         String contentLanguage = locale.getLanguage();
         if ((contentLanguage != null) && (contentLanguage.length() > 0)) {
             String country = locale.getCountry();
-            StringBuffer value = new StringBuffer(contentLanguage);
+            StringBuilder value = new StringBuilder(contentLanguage);
             if ((country != null) && (country.length() > 0)) {
                 value.append('-');
                 value.append(country);
@@ -809,7 +809,7 @@ public class ServletResponseImpl
 
         cookies.add(cookie);
 
-        final StringBuffer sb = new StringBuffer();
+        final StringBuilder sb = new StringBuilder();
         ServerCookie.appendCookieValue
         (sb, cookie.getVersion(), cookie.getName(), cookie.getValue(),
                 cookie.getPath(), cookie.getDomain(), cookie.getComment(), 
@@ -1409,7 +1409,7 @@ public class ServletResponseImpl
             anchor = path.substring(pound);
             path = path.substring(0, pound);
         }
-        StringBuffer sb = new StringBuffer(path);
+        StringBuilder sb = new StringBuilder(path);
         if( sb.length() > 0 ) { // jsessionid can't be first.
             sb.append(";jsessionid=");
             sb.append(sessionId);

==================================================
URLEncoder.java
index 0c8eeb9cfc..f67b16fbe6 100644
--- a/modules/tomcat-lite/java/org/apache/tomcat/servlets/file/Dir2Html.java
+++ b/modules/tomcat-lite/java/org/apache/tomcat/servlets/file/Dir2Html.java
@@ -310,7 +310,7 @@ public class Dir2Html  extends HttpServlet {
         }
         PrintWriter writer = new PrintWriter(osWriter);
 
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         
         // rewriteUrl(contextPath) is expensive. cache result for later reuse
         String rewrittenContextPath =  rewriteUrl(contextPath);
@@ -457,7 +457,7 @@ public class Dir2Html  extends HttpServlet {
     /**
      * Display the size of a file.
      */
-    protected void displaySize(StringBuffer buf, long filesize) {
+    protected void displaySize(StringBuilder buf, long filesize) {
 
         long leftside = filesize / 1024;
         long rightside = (filesize % 1024) / 103;  // makes 1 digit

==================================================
WebdavServlet.java
index 64fc962f5c..0ec790d505 100644
--- a/modules/tomcat-lite/java/org/apache/tomcat/servlets/file/URLEncoder.java
+++ b/modules/tomcat-lite/java/org/apache/tomcat/servlets/file/URLEncoder.java
@@ -59,7 +59,7 @@ public class URLEncoder {
     public String encode( String path ) {
         int maxBytesPerChar = 10;
         int caseDiff = ('a' - 'A');
-        StringBuffer rewrittenPath = new StringBuffer(path.length());
+        StringBuilder rewrittenPath = new StringBuilder(path.length());
         ByteArrayOutputStream buf = new ByteArrayOutputStream(maxBytesPerChar);
         OutputStreamWriter writer = null;
         try {

==================================================
XMLWriter.java
index 68fe8116e0..31ed4025e3 100644
--- a/modules/tomcat-lite/java/org/apache/tomcat/servlets/file/WebdavServlet.java
+++ b/modules/tomcat-lite/java/org/apache/tomcat/servlets/file/WebdavServlet.java
@@ -231,7 +231,7 @@ public class WebdavServlet extends DefaultServlet {
             throws ServletException, IOException {
         resp.addHeader("DAV", "1"); // And not: ,2");
 
-        StringBuffer methodsAllowed = determineMethodsAllowed(basePath,
+        StringBuilder methodsAllowed = determineMethodsAllowed(basePath,
                                                               req);
         resp.addHeader("Allow", methodsAllowed.toString());
         resp.addHeader("MS-Author-Via", "DAV");
@@ -707,7 +707,7 @@ public class WebdavServlet extends DefaultServlet {
         // path
         if (object.exists()) {
             // Get allowed methods
-            StringBuffer methodsAllowed = determineMethodsAllowed(basePath,
+            StringBuilder methodsAllowed = determineMethodsAllowed(basePath,
                                                                   req);
 
             resp.addHeader("Allow", methodsAllowed.toString());
@@ -1477,7 +1477,7 @@ public class WebdavServlet extends DefaultServlet {
      * Get creation date in ISO format.
      */
     protected String getISOCreationDate(long creationDate) {
-        StringBuffer creationDateValue = new StringBuffer
+        StringBuilder creationDateValue = new StringBuilder
             (creationDateFormat.format
              (new Date(creationDate)));
         /*
@@ -1504,10 +1504,10 @@ public class WebdavServlet extends DefaultServlet {
      * Determines the methods normally allowed for the resource.
      *
      */
-    protected StringBuffer determineMethodsAllowed(File basePath,
+    protected StringBuilder determineMethodsAllowed(File basePath,
                                                    HttpServletRequest req) {
 
-        StringBuffer methodsAllowed = new StringBuffer();
+        StringBuilder methodsAllowed = new StringBuilder();
         String path = getRelativePath(req);
         File object = new File(basePath, path);
         if (!object.exists()) {

==================================================
SimpleTemplateClassMapper.java
index 46652dc9de..0653330a14 100644
--- a/modules/tomcat-lite/java/org/apache/tomcat/servlets/file/XMLWriter.java
+++ b/modules/tomcat-lite/java/org/apache/tomcat/servlets/file/XMLWriter.java
@@ -54,7 +54,7 @@ public class XMLWriter {
     /**
      * Buffer.
      */
-    protected StringBuffer buffer = new StringBuffer();
+    protected StringBuilder buffer = new StringBuilder();
 
 
     /**
@@ -235,7 +235,7 @@ public class XMLWriter {
         throws IOException {
         if (writer != null) {
             writer.write(buffer.toString());
-            buffer = new StringBuffer();
+            buffer = new StringBuilder();
         }
     }
 

==================================================
HttpSessionImpl.java
index 7c01312b2a..d37db88863 100644
--- a/modules/tomcat-lite/java/org/apache/tomcat/servlets/jsp/SimpleTemplateClassMapper.java
+++ b/modules/tomcat-lite/java/org/apache/tomcat/servlets/jsp/SimpleTemplateClassMapper.java
@@ -109,8 +109,8 @@ public class SimpleTemplateClassMapper implements UserTemplateClassMapper {
     private static final String JSP_PACKAGE_NAME = "org.apache.jsp";
 
     private static final String makeJavaIdentifier(String identifier) {
-        StringBuffer modifiedIdentifier = 
-            new StringBuffer(identifier.length());
+        StringBuilder modifiedIdentifier = 
+            new StringBuilder(identifier.length());
         if (!Character.isJavaIdentifierStart(identifier.charAt(0))) {
             modifiedIdentifier.append('_');
         }
@@ -144,7 +144,7 @@ public class SimpleTemplateClassMapper implements UserTemplateClassMapper {
 
     private static final String makeJavaPackage(String path) {
         String classNameComponents[] = split(path,"/");
-        StringBuffer legalClassNames = new StringBuffer();
+        StringBuilder legalClassNames = new StringBuilder();
         for (int i = 0; i < classNameComponents.length; i++) {
             legalClassNames.append(makeJavaIdentifier(classNameComponents[i]));
             if (i < classNameComponents.length - 1) {

==================================================
RandomGenerator.java
index 3885ca1519..fb235ff73c 100644
--- a/modules/tomcat-lite/java/org/apache/tomcat/servlets/session/HttpSessionImpl.java
+++ b/modules/tomcat-lite/java/org/apache/tomcat/servlets/session/HttpSessionImpl.java
@@ -646,7 +646,7 @@ public class HttpSessionImpl  implements HttpSession, Serializable {
      */
     public String toString() {
 
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         sb.append("StandardSession[");
         sb.append(id);
         sb.append("]");

==================================================
LocaleParser.java
index 54c0063b46..8134bd6592 100644
--- a/modules/tomcat-lite/java/org/apache/tomcat/servlets/session/RandomGenerator.java
+++ b/modules/tomcat-lite/java/org/apache/tomcat/servlets/session/RandomGenerator.java
@@ -117,7 +117,7 @@ public class RandomGenerator {
         String result = null;
 
         // Render the result as a String of hexadecimal digits
-        StringBuffer buffer = new StringBuffer();
+        StringBuilder buffer = new StringBuilder();
         int resultLenBytes = 0;
 
         while (resultLenBytes < this.sessionIdLength) {

==================================================
RequestUtil.java
index b3d167cc90..f1c63d15c1 100644
--- a/modules/tomcat-lite/java/org/apache/tomcat/servlets/util/LocaleParser.java
+++ b/modules/tomcat-lite/java/org/apache/tomcat/servlets/util/LocaleParser.java
@@ -54,7 +54,7 @@ public final class LocaleParser {
       if (white < 0)
           white = value.indexOf('\t');
       if (white >= 0) {
-          StringBuffer sb = new StringBuffer();
+          StringBuilder sb = new StringBuilder();
           int len = value.length();
           for (int i = 0; i < len; i++) {
               char ch = value.charAt(i);

==================================================
BaseMapper.java
index 6f81eb3802..df789c8040 100644
--- a/modules/tomcat-lite/java/org/apache/tomcat/servlets/util/RequestUtil.java
+++ b/modules/tomcat-lite/java/org/apache/tomcat/servlets/util/RequestUtil.java
@@ -57,7 +57,7 @@ public final class RequestUtil {
      */
     public static String encodeCookie(Cookie cookie) {
 
-        StringBuffer buf = new StringBuffer( cookie.getName() );
+        StringBuilder buf = new StringBuilder( cookie.getName() );
         buf.append("=");
         buf.append(cookie.getValue());
 
@@ -114,7 +114,7 @@ public final class RequestUtil {
 
         char content[] = new char[message.length()];
         message.getChars(0, message.length(), content, 0);
-        StringBuffer result = new StringBuffer(content.length + 50);
+        StringBuilder result = new StringBuilder(content.length + 50);
         for (int i = 0; i < content.length; i++) {
             switch (content[i]) {
             case '<':

==================================================
HexDump.java
index 6e63233828..201c3c31f3 100644
--- a/modules/tomcat-lite/java/org/apache/tomcat/util/http/mapper/BaseMapper.java
+++ b/modules/tomcat-lite/java/org/apache/tomcat/util/http/mapper/BaseMapper.java
@@ -504,7 +504,7 @@ public class BaseMapper {
 
     public String getWrappersString( String host, String context ) {
         String names[]=getWrapperNames(host, context);
-        StringBuffer sb=new StringBuffer();
+        StringBuilder sb=new StringBuilder();
         for( int i=0; i<names.length; i++ ) {
             sb.append(names[i]).append(":");
         }

==================================================
GTest.java
index ab9ece33c3..efef535eeb 100644
--- a/modules/tomcat-lite/test/org/apache/tomcat/lite/HexDump.java
+++ b/modules/tomcat-lite/test/org/apache/tomcat/lite/HexDump.java
@@ -123,7 +123,7 @@ public final class HexDump {
      */
     public static String convert(byte bytes[]) {
 
-	StringBuffer sb = new StringBuffer(bytes.length * 2);
+	StringBuilder sb = new StringBuilder(bytes.length * 2);
 	for (int i = 0; i < bytes.length; i++) {
 	    sb.append(convertDigit((bytes[i] >> 4)));
 	    sb.append(convertDigit((bytes[i] & 0x0f)));
@@ -206,7 +206,7 @@ public final class HexDump {
      */
     public static String getHexDump(byte[] bytes, int pos, int len,
                                      boolean displayOffset) {
-        StringBuffer out = new StringBuffer( len * 2 );
+        StringBuilder out = new StringBuilder( len * 2 );
 
         for (int j = 0; j < len; j += 16) {
             hexLine(out, bytes, pos + j, pos + len, displayOffset);
@@ -215,7 +215,7 @@ public final class HexDump {
         return out.toString();
     }
     
-    private static void hexLine(StringBuffer out, 
+    private static void hexLine(StringBuilder out, 
                                 byte[] bytes, int start, int end,
                                 boolean displayOffset) {
 

==================================================
WatchdogHttpClient.java
index d799d019b2..0e5bfbf8ce 100644
--- a/modules/tomcat-lite/test/org/apache/tomcat/test/watchdog/GTest.java
+++ b/modules/tomcat-lite/test/org/apache/tomcat/test/watchdog/GTest.java
@@ -92,7 +92,7 @@ public class GTest {
 
 
     // For Report generation
-    StringBuffer resultOut = new StringBuffer();
+    StringBuilder resultOut = new StringBuilder();
     
     boolean firstTask = false;
     boolean lastTask = false;
@@ -623,7 +623,7 @@ public class GTest {
             }
 
 	    if ( !found ) {
-		StringBuffer actualBuffer = new StringBuffer( 128 );
+		StringBuilder actualBuffer = new StringBuilder( 128 );
 		if ( resultOut != null ) {
 		    expectedString = "<expectedHeaderNotFound>" + currentHeaderField + ": " + currentHeaderValue + "</expectedHeader>\n";
 		}
@@ -779,7 +779,7 @@ public class GTest {
 
         if (req.indexOf('|') > -1) {
             StringTokenizer tok = new StringTokenizer( request, "|" );
-            StringBuffer sb = new StringBuffer( 50 );
+            StringBuilder sb = new StringBuilder( 50 );
         
             while ( tok.hasMoreElements() ) {
                 String token = tok.nextToken();
@@ -846,7 +846,7 @@ public class GTest {
          * false.
          */
 	if ( fromServer.length != fromGoldenFile.length ) {
-            StringBuffer sb = new StringBuffer( 50 );
+            StringBuilder sb = new StringBuilder( 50 );
             sb.append( " Response and golden files lengths do not match!\n" );
             sb.append( " Server response length: " );
             sb.append( fromServer.length );
@@ -918,7 +918,7 @@ public class GTest {
         }
 
         if ( !status ) {
-            StringBuffer sb = new StringBuffer( 255 );
+            StringBuilder sb = new StringBuilder( 255 );
             sb.append( "ERROR: Server's response and configured goldenfile do not match!\n" );
             sb.append( "Response received from server:\n" );
             sb.append( "---------------------------------------------------------\n" );
@@ -940,7 +940,7 @@ public class GTest {
      * @return a <code>byte[]</code> representation of the response
      */
     private byte[] readBody( InputStream input ) {
-        StringBuffer sb = new StringBuffer( 255 );
+        StringBuilder sb = new StringBuilder( 255 );
         while ( true ) {
             try {
                 int ch = input.read();
@@ -1045,7 +1045,7 @@ public class GTest {
      * @param goldenFile a <code>byte[]</code> value
      */
     private void dumpHex( byte[] serverResponse, byte[] goldenFile ) {
-        StringBuffer outBuf = new StringBuffer( ( serverResponse.length + goldenFile.length ) * 2 );
+        StringBuilder outBuf = new StringBuilder( ( serverResponse.length + goldenFile.length ) * 2 );
 
         String fromServerString = HexDump.getHexDump( serverResponse, 0, serverResponse.length, true );
         String fromGoldenFileString = HexDump.getHexDump( goldenFile, 0, goldenFile.length, true );

==================================================
