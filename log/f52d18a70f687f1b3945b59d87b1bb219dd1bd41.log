f52d18a70f687f1b3945b59d87b1bb219dd1bd41
==================================================
Add another test case for 6.9
==================================================
Mark Thomas
==================================================
Wed Aug 19 21:34:01 2015 +0000
==================================================
Stream.java
Add another test case for 6.9
Fix a bug where end of stream was never sent for responses with zero content length.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1696671 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http2TestBase.java
index b55e460440..03ee745826 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -259,6 +259,7 @@ public class Stream extends AbstractStream implements HeaderEmitter {
 
 
     void sentEndOfStream() {
+        outputBuffer.endOfStreamSent = true;
         state.sentEndOfStream();
     }
 
@@ -288,6 +289,7 @@ public class Stream extends AbstractStream implements HeaderEmitter {
         private final ByteBuffer buffer = ByteBuffer.allocate(8 * 1024);
         private volatile long written = 0;
         private volatile boolean closed = false;
+        private volatile boolean endOfStreamSent = false;
 
         /* The write methods are synchronized to ensure that only one thread at
          * a time is able to access the buffer. Without this protection, a
@@ -331,6 +333,11 @@ public class Stream extends AbstractStream implements HeaderEmitter {
                 coyoteResponse.sendHeaders();
             }
             if (buffer.position() == 0) {
+                if (closed && !endOfStreamSent) {
+                    // Handling this special case here is simpler than trying
+                    // to modify the following code to handle it.
+                    handler.writeBody(Stream.this, buffer, 0, true);
+                }
                 // Buffer is empty. Nothing to do.
                 return;
             }

==================================================
TestHttp2Section_6_9.java
index 1b1c0ea2ab..80e2bc122c 100644
--- a/test/org/apache/coyote/http2/Http2TestBase.java
+++ b/test/org/apache/coyote/http2/Http2TestBase.java
@@ -114,6 +114,15 @@ public abstract class Http2TestBase extends TomcatBaseTest {
     }
 
 
+    protected void sendEmptyGetRequest(int streamId) throws IOException {
+        byte[] frameHeader = new byte[9];
+        ByteBuffer headersPayload = ByteBuffer.allocate(128);
+
+        buildEmptyGetRequest(frameHeader, headersPayload, null, streamId);
+        writeFrame(frameHeader, headersPayload);
+    }
+
+
     protected void sendSimpleGetRequest(int streamId) throws IOException {
         sendSimpleGetRequest(streamId, null);
     }
@@ -137,6 +146,12 @@ public abstract class Http2TestBase extends TomcatBaseTest {
     }
 
 
+    protected void buildEmptyGetRequest(byte[] frameHeader, ByteBuffer headersPayload,
+            byte[] padding, int streamId) {
+        buildGetRequest(frameHeader, headersPayload, padding, streamId, "/empty");
+    }
+
+
     protected void buildSimpleGetRequest(byte[] frameHeader, ByteBuffer headersPayload,
             byte[] padding, int streamId) {
         buildGetRequest(frameHeader, headersPayload, padding, streamId, "/simple");
@@ -301,7 +316,17 @@ public abstract class Http2TestBase extends TomcatBaseTest {
     }
 
 
+    protected String getEmptyResponseTrace(int streamId) {
+        return getSingleResponseBodyFrameTrace(streamId, 0);
+    }
+
+
     protected String getSimpleResponseTrace(int streamId) {
+        return getSingleResponseBodyFrameTrace(streamId, 8192);
+    }
+
+
+    private String getSingleResponseBodyFrameTrace(int streamId, int bodySize) {
         StringBuilder result = new StringBuilder();
         result.append(streamId);
         result.append("-HeadersStart\n");
@@ -310,7 +335,9 @@ public abstract class Http2TestBase extends TomcatBaseTest {
         result.append(streamId);
         result.append("-HeadersEnd\n");
         result.append(streamId);
-        result.append("-Body-8192\n");
+        result.append("-Body-");
+        result.append(bodySize);
+        result.append("\n");
         result.append(streamId);
         result.append("-EndOfStream\n");
 
@@ -338,6 +365,8 @@ public abstract class Http2TestBase extends TomcatBaseTest {
         Tomcat tomcat = getTomcatInstance();
 
         Context ctxt = tomcat.addContext("", null);
+        Tomcat.addServlet(ctxt, "empty", new EmptyServlet());
+        ctxt.addServletMapping("/empty", "empty");
         Tomcat.addServlet(ctxt, "simple", new SimpleServlet());
         ctxt.addServletMapping("/simple", "simple");
         Tomcat.addServlet(ctxt, "large", new LargeServlet());
@@ -806,6 +835,20 @@ public abstract class Http2TestBase extends TomcatBaseTest {
     }
 
 
+    private static class EmptyServlet extends HttpServlet {
+
+        private static final long serialVersionUID = 1L;
+
+        @Override
+        protected void doGet(HttpServletRequest req, HttpServletResponse resp)
+                throws ServletException, IOException {
+            // Generate an empty response
+            resp.setContentLength(0);
+            resp.flushBuffer();
+        }
+    }
+
+
     private static class SimpleServlet extends HttpServlet {
 
         private static final long serialVersionUID = 1L;

==================================================
