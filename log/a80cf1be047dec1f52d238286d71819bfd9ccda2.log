a80cf1be047dec1f52d238286d71819bfd9ccda2
==================================================
Pass Jar rather than URL to a JAR in the JarScanner call back for a JAR
==================================================
Mark Thomas
==================================================
Wed May 4 11:06:54 2016 +0000
==================================================
TldScanner.java
Pass Jar rather than URL to a JAR in the JarScanner call back for a JAR

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1742249 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JarScannerCallback.java
index 4828217ee4..06681c2bb8 100644
--- a/java/org/apache/jasper/servlet/TldScanner.java
+++ b/java/org/apache/jasper/servlet/TldScanner.java
@@ -47,7 +47,6 @@ import org.apache.tomcat.JarScannerCallback;
 import org.apache.tomcat.util.descriptor.tld.TaglibXml;
 import org.apache.tomcat.util.descriptor.tld.TldParser;
 import org.apache.tomcat.util.descriptor.tld.TldResourcePath;
-import org.apache.tomcat.util.scan.JarFactory;
 import org.xml.sax.SAXException;
 
 /**
@@ -296,27 +295,24 @@ public class TldScanner {
 
 
         @Override
-        public void scan(URL jarUrl, String webappPath, boolean isWebapp) throws IOException {
+        public void scan(Jar jar, String webappPath, boolean isWebapp) throws IOException {
             boolean found = false;
-            URL jarFileUrl;
-            try (Jar jar = JarFactory.newInstance(jarUrl)) {
-                jarFileUrl = jar.getJarFileURL();
-                jar.nextEntry();
-                for (String entryName = jar.getEntryName();
-                    entryName != null;
-                    jar.nextEntry(), entryName = jar.getEntryName()) {
-                    if (!(entryName.startsWith("META-INF/") &&
-                            entryName.endsWith(TLD_EXT))) {
-                        continue;
-                    }
-                    found = true;
-                    TldResourcePath tldResourcePath =
-                            new TldResourcePath(jarFileUrl, webappPath, entryName);
-                    try {
-                        parseTld(tldResourcePath);
-                    } catch (SAXException e) {
-                        throw new IOException(e);
-                    }
+            URL jarFileUrl = jar.getJarFileURL();
+            jar.nextEntry();
+            for (String entryName = jar.getEntryName();
+                entryName != null;
+                jar.nextEntry(), entryName = jar.getEntryName()) {
+                if (!(entryName.startsWith("META-INF/") &&
+                        entryName.endsWith(TLD_EXT))) {
+                    continue;
+                }
+                found = true;
+                TldResourcePath tldResourcePath =
+                        new TldResourcePath(jarFileUrl, webappPath, entryName);
+                try {
+                    parseTld(tldResourcePath);
+                } catch (SAXException e) {
+                    throw new IOException(e);
                 }
             }
             if (found) {

==================================================
FragmentJarScannerCallback.java
index b052b9968b..991e123b40 100644
--- a/java/org/apache/tomcat/JarScannerCallback.java
+++ b/java/org/apache/tomcat/JarScannerCallback.java
@@ -18,7 +18,6 @@ package org.apache.tomcat;
 
 import java.io.File;
 import java.io.IOException;
-import java.net.URL;
 
 /**
  * This interface is implemented by clients of the {@link JarScanner} to enable
@@ -28,9 +27,9 @@ public interface JarScannerCallback {
 
     /**
      * A JAR was found and may be accessed for further processing via the
-     * provided URL connection.
+     * provided URL connection. The caller is responsible for closing the JAR.
      *
-     * @param jarURL     The URL for the identified JAR
+     * @param jar        The JAR to process
      * @param webappPath The path, if any, to the JAR within the web application
      * @param isWebapp   Indicates if the JAR was found within a web
      *                       application. If <code>false</code> the JAR should
@@ -38,7 +37,7 @@ public interface JarScannerCallback {
      *
      * @throws IOException if an I/O error occurs while scanning the JAR
      */
-    public void scan(URL jarURL, String webappPath, boolean isWebapp)
+    public void scan(Jar jar, String webappPath, boolean isWebapp)
             throws IOException;
 
     /**

==================================================
StandardJarScanner.java
index 3f639cf869..d57f2a43a3 100644
--- a/java/org/apache/tomcat/util/descriptor/web/FragmentJarScannerCallback.java
+++ b/java/org/apache/tomcat/util/descriptor/web/FragmentJarScannerCallback.java
@@ -26,7 +26,6 @@ import java.util.Map;
 
 import org.apache.tomcat.Jar;
 import org.apache.tomcat.JarScannerCallback;
-import org.apache.tomcat.util.scan.JarFactory;
 import org.xml.sax.InputSource;
 
 /**
@@ -51,9 +50,8 @@ public class FragmentJarScannerCallback implements JarScannerCallback {
 
 
     @Override
-    public void scan(URL jarUrl, String webappPath, boolean isWebapp) throws IOException {
+    public void scan(Jar jar, String webappPath, boolean isWebapp) throws IOException {
 
-        Jar jar = null;
         InputStream is = null;
         WebXml fragment = new WebXml();
         fragment.setWebappJar(isWebapp);
@@ -65,7 +63,6 @@ public class FragmentJarScannerCallback implements JarScannerCallback {
             // web-fragment.xml files don't need to be parsed if they are never
             // going to be used.
             if (isWebapp && parseRequired) {
-                jar = JarFactory.newInstance(jarUrl);
                 is = jar.getInputStream(FRAGMENT_LOCATION);
             }
 
@@ -74,7 +71,6 @@ public class FragmentJarScannerCallback implements JarScannerCallback {
                 // distributable
                 fragment.setDistributable(true);
             } else {
-                @SuppressWarnings("null") // Cannot be null here
                 String fragmentUrl = jar.getURL(FRAGMENT_LOCATION);
                 InputSource source = new InputSource(fragmentUrl);
                 source.setByteStream(is);
@@ -83,14 +79,11 @@ public class FragmentJarScannerCallback implements JarScannerCallback {
                 }
             }
         } finally {
-            if (jar != null) {
-                jar.close();
-            }
-            fragment.setURL(jarUrl);
+            fragment.setURL(jar.getJarFileURL());
             if (fragment.getName() == null) {
                 fragment.setName(fragment.getURL().toString());
             }
-            fragment.setJarName(extractJarFileName(jarUrl));
+            fragment.setJarName(extractJarFileName(jar.getJarFileURL()));
             fragments.put(fragment.getName(), fragment);
         }
     }
@@ -107,6 +100,7 @@ public class FragmentJarScannerCallback implements JarScannerCallback {
         return url.substring(url.lastIndexOf('/') + 1);
     }
 
+
     @Override
     public void scan(File file, String webappPath, boolean isWebapp) throws IOException {
 

==================================================
TestTldScanner.java
index d1825654cb..cd039ad05e 100644
--- a/java/org/apache/tomcat/util/scan/StandardJarScanner.java
+++ b/java/org/apache/tomcat/util/scan/StandardJarScanner.java
@@ -30,6 +30,7 @@ import javax.servlet.ServletContext;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.Jar;
 import org.apache.tomcat.JarScanFilter;
 import org.apache.tomcat.JarScanType;
 import org.apache.tomcat.JarScanner;
@@ -306,7 +307,9 @@ public class StandardJarScanner implements JarScanner {
         }
 
         if ("jar".equals(url.getProtocol()) || url.getPath().endsWith(Constants.JAR_EXT)) {
-            callback.scan(url, webappPath, isWebapp);
+            try (Jar jar = JarFactory.newInstance(url)) {
+                callback.scan(jar, webappPath, isWebapp);
+            }
         } else if ("file".equals(url.getProtocol())) {
             File f;
             try {
@@ -314,7 +317,9 @@ public class StandardJarScanner implements JarScanner {
                 if (f.isFile() && isScanAllFiles()) {
                     // Treat this file as a JAR
                     URL jarURL = UriUtil.buildJarUrl(f);
-                    callback.scan(jarURL, webappPath, isWebapp);
+                    try (Jar jar = JarFactory.newInstance(jarURL)) {
+                        callback.scan(jar, webappPath, isWebapp);
+                    }
                 } else if (f.isDirectory()) {
                     if (scanType == JarScanType.PLUGGABILITY) {
                         callback.scan(f, webappPath, isWebapp);

==================================================
TestStandardJarScanner.java
index cd57323e48..261f90312b 100644
--- a/test/org/apache/jasper/servlet/TestTldScanner.java
+++ b/test/org/apache/jasper/servlet/TestTldScanner.java
@@ -29,7 +29,9 @@ import org.junit.Test;
 import org.apache.catalina.Context;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.tomcat.Jar;
 import org.apache.tomcat.util.buf.ByteChunk;
+import org.apache.tomcat.util.scan.JarFactory;
 import org.apache.tomcat.util.scan.StandardJarScanner;
 import org.easymock.EasyMock;
 
@@ -109,7 +111,9 @@ public class TestTldScanner extends TomcatBaseTest {
             throws Exception {
         String fullPath = new File(webapp, path).toURI().toString();
         URL jarUrl = new URL("jar:" + fullPath + "!/");
-        callback.scan(jarUrl, path, true);
+        try (Jar jar = JarFactory.newInstance(jarUrl)) {
+            callback.scan(jar, path, true);
+        }
     }
 }
 

==================================================
