ab1435b57d6ca2118312f46307c6608c16757972
==================================================
Add peerAddress to coyote request
==================================================
Rainer Jung
==================================================
Sun Dec 6 16:12:38 2020 +0100
==================================================
Request.java
Add peerAddress to coyote request

It contains the IP address of the direct connection peer.
If a reverse proxy sits in front of Tomcat and the protocol
used is AJP or HTTP in combination with the RemoteIp(Valve|Filter),
the peer address might differ from the remoteAddress.
The latter then contains the address of the client in front of the
reverse proxy, not the address of the proxy itself.

Support for the peer address has been added to the
RemoteAddrValve and RemoteCIDRValve with the new attribute
"usePeerAddress". This can be used to restrict access
to Tomcat bsed on the reverse proxy IP address, which is especially
useful to harden access to AJP connecrtors.

The peer address can also be logged in the access log
using the new %{peer}a syntax.



==================================================
AbstractAccessLogValve.java
index 37ed6d2716..12e5611fc3 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -378,6 +378,12 @@ public class Request implements HttpServletRequest {
     protected String remoteAddr = null;
 
 
+    /**
+     * Connection peer address.
+     */
+    protected String peerAddr = null;
+
+
     /**
      * Remote host.
      */
@@ -455,6 +461,7 @@ public class Request implements HttpServletRequest {
         localesParsed = false;
         secure = false;
         remoteAddr = null;
+        peerAddr = null;
         remoteHost = null;
         remotePort = -1;
         localPort = -1;
@@ -1268,6 +1275,18 @@ public class Request implements HttpServletRequest {
     }
 
 
+    /**
+     * @return the connection peer IP address making this Request.
+     */
+    public String getPeerAddr() {
+        if (peerAddr == null) {
+            coyoteRequest.action(ActionCode.REQ_PEER_ADDR_ATTRIBUTE, coyoteRequest);
+            peerAddr = coyoteRequest.peerAddr().toString();
+        }
+        return peerAddr;
+    }
+
+
     /**
      * @return the remote host name making this Request.
      */

==================================================
RemoteAddrValve.java
index 111dd4d64e..caaaca164b 100644
--- a/java/org/apache/catalina/valves/LocalStrings.properties
+++ b/java/org/apache/catalina/valves/LocalStrings.properties
@@ -18,6 +18,7 @@ accessLogValve.closeFail=Failed to close access log file
 accessLogValve.deleteFail=Failed to delete old access log [{0}]
 accessLogValve.invalidLocale=Failed to set locale to [{0}]
 accessLogValve.invalidPortType=Invalid port type [{0}], using server (local) port
+accessLogValve.invalidRemoteAddressType=Invalid remote address type [{0}], using remote (non-peer) address
 accessLogValve.openDirFail=Failed to create directory [{0}] for access logs
 accessLogValve.openFail=Failed to open access log file [{0}]
 accessLogValve.renameFail=Failed to rename access log from [{0}] to [{1}]

==================================================
RemoteCIDRValve.java
index 66bb6c931e..39e86d86b0 100644
--- a/java/org/apache/catalina/valves/RemoteAddrValve.java
+++ b/java/org/apache/catalina/valves/RemoteAddrValve.java
@@ -44,12 +44,15 @@ public final class RemoteAddrValve extends RequestFilterValve {
     @Override
     public void invoke(Request request, Response response) throws IOException, ServletException {
         String property;
-        if (getAddConnectorPort()) {
-            property = request.getRequest().getRemoteAddr() + ";" +
-                    request.getConnector().getPortWithOffset();
+        if (getUsePeerAddress()) {
+            property = request.getPeerAddr();
         } else {
             property = request.getRequest().getRemoteAddr();
         }
+        if (getAddConnectorPort()) {
+            property = property + ";" +
+                request.getConnector().getPortWithOffset();
+        }
         process(property, request, response);
     }
 

==================================================
RequestFilterValve.java
index 4565c71b7d..d064e46e8b 100644
--- a/java/org/apache/catalina/valves/RemoteCIDRValve.java
+++ b/java/org/apache/catalina/valves/RemoteCIDRValve.java
@@ -129,12 +129,15 @@ public final class RemoteCIDRValve extends RequestFilterValve {
     @Override
     public void invoke(final Request request, final Response response) throws IOException, ServletException {
         String property;
-        if (getAddConnectorPort()) {
-            property = request.getRequest().getRemoteAddr() + ";" +
-                    request.getConnector().getPortWithOffset();
+        if (getUsePeerAddress()) {
+            property = request.getPeerAddr();
         } else {
             property = request.getRequest().getRemoteAddr();
         }
+        if (getAddConnectorPort()) {
+            property = property + ";" +
+                request.getConnector().getPortWithOffset();
+        }
         process(property, request, response);
     }
 

==================================================
AbstractProcessor.java
index 3cff3da1df..9847b8cd42 100644
--- a/java/org/apache/catalina/valves/RequestFilterValve.java
+++ b/java/org/apache/catalina/valves/RequestFilterValve.java
@@ -139,6 +139,13 @@ public abstract class RequestFilterValve extends ValveBase {
      */
     private volatile boolean addConnectorPort = false;
 
+    /**
+     * Flag deciding whether we use the connection peer address
+     * or the remote address. This makes a dfifference when
+     * using AJP or the RemoteIpValve.
+     */
+    private volatile boolean usePeerAddress = false;
+
     // ------------------------------------------------------------- Properties
 
 
@@ -288,6 +295,29 @@ public abstract class RequestFilterValve extends ValveBase {
         this.addConnectorPort = addConnectorPort;
     }
 
+
+    /**
+     * Get the flag deciding whether we use the connection peer address
+     * or the remote address. This makes a dfifference when
+     * using AJP or the RemoteIpValve.
+     * @return <code>true</code> if we use the connection peer address
+     */
+    public boolean getUsePeerAddress() {
+        return usePeerAddress;
+    }
+
+
+    /**
+     * Set the flag deciding whether we use the connection peer address
+     * or the remote address. This makes a dfifference when
+     * using AJP or the RemoteIpValve.
+     *
+     * @param usePeerAddress The new flag
+     */
+    public void setUsePeerAddress(boolean usePeerAddress) {
+        this.usePeerAddress = usePeerAddress;
+    }
+
     // --------------------------------------------------------- Public Methods
 
     /**

==================================================
ActionCode.java
index 7947a59091..f74f87ae14 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -451,6 +451,12 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
             }
             break;
         }
+        case REQ_PEER_ADDR_ATTRIBUTE: {
+            if (getPopulateRequestAttributesFromSocket() && socketWrapper != null) {
+                request.peerAddr().setString(socketWrapper.getRemoteAddr());
+            }
+            break;
+        }
         case REQ_HOST_ATTRIBUTE: {
             populateRequestAttributeRemoteHost();
             break;

==================================================
Constants.java
index 52628cfa41..d492937547 100644
--- a/java/org/apache/coyote/ActionCode.java
+++ b/java/org/apache/coyote/ActionCode.java
@@ -76,6 +76,11 @@ public enum ActionCode {
      */
     REQ_HOST_ADDR_ATTRIBUTE,
 
+    /**
+     * Callback for lazy evaluation - extract the connection peer address.
+     */
+    REQ_PEER_ADDR_ATTRIBUTE,
+
     /**
      * Callback for lazy evaluation - extract the SSL-related attributes
      * including the client certificate if present.

==================================================
Request.java
index 1475ba7581..d5e7069ab2 100644
--- a/java/org/apache/coyote/Constants.java
+++ b/java/org/apache/coyote/Constants.java
@@ -96,4 +96,11 @@ public final class Constants {
      * the X-Forwarded-For HTTP header.
      */
     public static final String REMOTE_ADDR_ATTRIBUTE = "org.apache.tomcat.remoteAddr";
+
+    /**
+     * The request attribute set by the RemoteIpFilter, RemoteIpValve (and may
+     * be set by other similar components) that identifies for the connector the
+     * conection peer IP address.
+     */
+    public static final String PEER_ADDR_ATTRIBUTE = "org.apache.tomcat.peerAddr";
 }

==================================================
RequestInfo.java
index f9dac683f9..199cc800c2 100644
--- a/java/org/apache/coyote/Request.java
+++ b/java/org/apache/coyote/Request.java
@@ -95,6 +95,7 @@ public final class Request {
 
     // remote address/host
     private final MessageBytes remoteAddrMB = MessageBytes.newInstance();
+    private final MessageBytes peerAddrMB = MessageBytes.newInstance();
     private final MessageBytes localNameMB = MessageBytes.newInstance();
     private final MessageBytes remoteHostMB = MessageBytes.newInstance();
     private final MessageBytes localAddrMB = MessageBytes.newInstance();
@@ -268,6 +269,10 @@ public final class Request {
         return remoteAddrMB;
     }
 
+    public MessageBytes peerAddr() {
+        return peerAddrMB;
+    }
+
     public MessageBytes remoteHost() {
         return remoteHostMB;
     }
@@ -638,6 +643,7 @@ public final class Request {
         localAddrMB.recycle();
         localNameMB.recycle();
         localPort = -1;
+        peerAddrMB.recycle();
         remoteAddrMB.recycle();
         remoteHostMB.recycle();
         remotePort = -1;

==================================================
AjpProcessor.java
index 23cfb27756..c5dcc2defa 100644
--- a/java/org/apache/coyote/RequestInfo.java
+++ b/java/org/apache/coyote/RequestInfo.java
@@ -98,6 +98,11 @@ public class RequestInfo  {
         return req.remoteAddr().toString();
     }
 
+    public String getPeerAddr() {
+        req.action(ActionCode.REQ_PEER_ADDR_ATTRIBUTE, null);
+        return req.peerAddr().toString();
+    }
+
     /**
      * Obtain the remote address for this connection as reported by an
      * intermediate proxy (if any).

==================================================
TestRequestFilterValve.java
index 9fe5b768a6..4341c7b415 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -671,6 +671,10 @@ public class AjpProcessor extends AbstractProcessor {
         requestHeaderMessage.getBytes(request.localName());
         request.setLocalPort(requestHeaderMessage.getInt());
 
+        if (socketWrapper != null) {
+            request.peerAddr().setString(socketWrapper.getRemoteAddr());
+        }
+
         boolean isSSL = requestHeaderMessage.getByte() != 0;
         if (isSSL) {
             request.scheme().setString("https");

==================================================
