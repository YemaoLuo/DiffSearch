a0a34701729a936452c165a4de68cb1e085ee0c2
==================================================
Replace System.getProperty("line.separator") with System.lineSeparator()
==================================================
Mark Thomas
==================================================
Fri Dec 5 15:18:46 2014 +0000
==================================================
CoyoteWriter.java
Replace System.getProperty("line.separator") with System.lineSeparator()

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1643323 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Constants.java
index 57b619700f..2be8fb9eb9 100644
--- a/java/org/apache/catalina/connector/CoyoteWriter.java
+++ b/java/org/apache/catalina/connector/CoyoteWriter.java
@@ -24,16 +24,12 @@ import java.io.PrintWriter;
  *
  * @author Remy Maucherat
  */
-public class CoyoteWriter
-    extends PrintWriter {
+public class CoyoteWriter extends PrintWriter {
 
 
     // -------------------------------------------------------------- Constants
 
-    // No need for a do privileged block - every web app has permission to read
-    // this by default
-    private static final char[] LINE_SEP =
-        System.getProperty("line.separator").toCharArray();
+    private static final char[] LINE_SEP = System.lineSeparator().toCharArray();
 
 
     // ----------------------------------------------------- Instance Variables

==================================================
SecurityListener.java
index e5be570c6c..84197060a4 100644
--- a/java/org/apache/catalina/security/Constants.java
+++ b/java/org/apache/catalina/security/Constants.java
@@ -20,6 +20,5 @@ public class Constants {
 
     public static final String PACKAGE = "org.apache.catalina.security";
 
-    public static final String LINE_SEP = System.getProperty("line.separator");
     public static final String CRLF = "\r\n";
 }

==================================================
ParseException.java
index d736b9a296..b5c735ff15 100644
--- a/java/org/apache/catalina/security/SecurityListener.java
+++ b/java/org/apache/catalina/security/SecurityListener.java
@@ -170,7 +170,7 @@ public class SecurityListener implements LifecycleListener {
             }
         }
         if (umask == null) {
-            if (Constants.CRLF.equals(Constants.LINE_SEP)) {
+            if (Constants.CRLF.equals(System.lineSeparator())) {
                 // Probably running on Windows so no umask
                 if (log.isDebugEnabled()) {
                     log.debug(sm.getString("SecurityListener.checkUmaskSkip"));

==================================================
Constants.java
index e7aedb0e5b..44e4faf07b 100644
--- a/java/org/apache/el/parser/ParseException.java
+++ b/java/org/apache/el/parser/ParseException.java
@@ -89,7 +89,6 @@ public class ParseException extends Exception {
   private static String initialise(Token currentToken,
                            int[][] expectedTokenSequences,
                            String[] tokenImage) {
-    String eol = System.getProperty("line.separator", "\n");
     StringBuffer expected = new StringBuffer();
     int maxSize = 0;
     for (int i = 0; i < expectedTokenSequences.length; i++) {
@@ -102,7 +101,7 @@ public class ParseException extends Exception {
       if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
         expected.append("...");
       }
-      expected.append(eol).append("    ");
+      expected.append(System.lineSeparator()).append("    ");
     }
     String retval = "Encountered \"";
     Token tok = currentToken.next;
@@ -119,21 +118,16 @@ public class ParseException extends Exception {
       tok = tok.next;
     }
     retval += "\" at line " + currentToken.next.beginLine + ", column " + currentToken.next.beginColumn;
-    retval += "." + eol;
+    retval += "." + System.lineSeparator();
     if (expectedTokenSequences.length == 1) {
-      retval += "Was expecting:" + eol + "    ";
+      retval += "Was expecting:" + System.lineSeparator() + "    ";
     } else {
-      retval += "Was expecting one of:" + eol + "    ";
+      retval += "Was expecting one of:" + System.lineSeparator() + "    ";
     }
     retval += expected.toString();
     return retval;
   }
 
-  /**
-   * The end of line string for this machine.
-   */
-  protected String eol = System.getProperty("line.separator", "\n");
-
   /**
    * Used to convert raw characters to their escaped version
    * when these raw version cannot be used as part of an ASCII

==================================================
AntCompiler.java
index 4ff5f61dc5..6e8aecd7c7 100644
--- a/java/org/apache/jasper/Constants.java
+++ b/java/org/apache/jasper/Constants.java
@@ -92,11 +92,6 @@ public class Constants {
      */
     public static final int MAX_POOL_SIZE = 5;
 
-    /**
-     * Platform specific new line sequence.
-     */
-    public static final String NEWLINE = System.getProperty("line.separator");
-
     /**
      * The query parameter that causes the JSP engine to just
      * pregenerated the servlet but not invoke it.

==================================================
DefaultErrorHandler.java
index 7f8f3de7d2..a7deeea5f1 100644
--- a/java/org/apache/jasper/compiler/AntCompiler.java
+++ b/java/org/apache/jasper/compiler/AntCompiler.java
@@ -101,7 +101,7 @@ public class AntCompiler extends Compiler {
         @Override
         protected void log(String message) {
             reportBuf.append(message);
-            reportBuf.append(Constants.NEWLINE);
+            reportBuf.append(System.lineSeparator());
         }
 
         protected String getReport() {
@@ -244,7 +244,7 @@ public class AntCompiler extends Compiler {
         // Stop capturing the System.err output for this thread
         String errorCapture = SystemLogHandler.unsetThread();
         if (errorCapture != null) {
-            errorReport.append(Constants.NEWLINE);
+            errorReport.append(System.lineSeparator());
             errorReport.append(errorCapture);
         }
 

==================================================
ErrorDispatcher.java
index 345104c45d..d3e2eecb16 100644
--- a/java/org/apache/jasper/compiler/DefaultErrorHandler.java
+++ b/java/org/apache/jasper/compiler/DefaultErrorHandler.java
@@ -17,7 +17,6 @@
 
 package org.apache.jasper.compiler;
 
-import org.apache.jasper.Constants;
 import org.apache.jasper.JasperException;
 
 /**
@@ -77,28 +76,28 @@ class DefaultErrorHandler implements ErrorHandler {
                 args = new Object[] {
                         Integer.valueOf(details[i].getJspBeginLineNumber()),
                         details[i].getJspFileName() };
-                buf.append(Constants.NEWLINE);
-                buf.append(Constants.NEWLINE);
+                buf.append(System.lineSeparator());
+                buf.append(System.lineSeparator());
                 buf.append(Localizer.getMessage("jsp.error.single.line.number",
                         args));
-                buf.append(Constants.NEWLINE);
+                buf.append(System.lineSeparator());
                 buf.append(details[i].getErrorMessage());
-                buf.append(Constants.NEWLINE);
+                buf.append(System.lineSeparator());
                 buf.append(details[i].getJspExtract());
             } else {
                 args = new Object[] {
                         Integer.valueOf(details[i].getJavaLineNumber()),
                         details[i].getJavaFileName() };
-                buf.append(Constants.NEWLINE);
-                buf.append(Constants.NEWLINE);
+                buf.append(System.lineSeparator());
+                buf.append(System.lineSeparator());
                 buf.append(Localizer.getMessage("jsp.error.java.line.number",
                         args));
-                buf.append(Constants.NEWLINE);
+                buf.append(System.lineSeparator());
                 buf.append(details[i].getErrorMessage());
             }
         }
-        buf.append(Constants.NEWLINE);
-        buf.append(Constants.NEWLINE);
+        buf.append(System.lineSeparator());
+        buf.append(System.lineSeparator());
         buf.append("Stacktrace:");
         throw new JasperException(
                 Localizer.getMessage("jsp.error.unable.compile") + ": " + buf);

==================================================
JavacErrorDetail.java
index 2ff69842df..927f25cab0 100644
--- a/java/org/apache/jasper/compiler/ErrorDispatcher.java
+++ b/java/org/apache/jasper/compiler/ErrorDispatcher.java
@@ -22,7 +22,6 @@ import java.io.StringReader;
 import java.net.MalformedURLException;
 import java.util.ArrayList;
 
-import org.apache.jasper.Constants;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.JspCompilationContext;
 import org.xml.sax.SAXException;
@@ -342,7 +341,7 @@ public class ErrorDispatcher {
             // Ignore messages preceding first error
             if (errMsgBuf != null) {
                 errMsgBuf.append(line);
-                errMsgBuf.append(Constants.NEWLINE);
+                errMsgBuf.append(System.lineSeparator());
             }
         }
 

==================================================
BodyContentImpl.java
index a9471f6527..0ed9077864 100644
--- a/java/org/apache/jasper/compiler/JavacErrorDetail.java
+++ b/java/org/apache/jasper/compiler/JavacErrorDetail.java
@@ -25,7 +25,6 @@ import java.io.InputStreamReader;
 import java.util.ArrayList;
 import java.util.List;
 
-import org.apache.jasper.Constants;
 import org.apache.jasper.JspCompilationContext;
 
 /**
@@ -126,7 +125,7 @@ public class JavacErrorDetail {
                         fragment.append(i+1);
                         fragment.append(": ");
                         fragment.append(jspLines[i]);
-                        fragment.append(Constants.NEWLINE);
+                        fragment.append(System.lineSeparator());
                     }
                     jspExtract = fragment.toString();
                 }

==================================================
JspWriterImpl.java
index f34a0de6c4..7dc00ed39b 100644
--- a/java/org/apache/jasper/runtime/BodyContentImpl.java
+++ b/java/org/apache/jasper/runtime/BodyContentImpl.java
@@ -39,8 +39,6 @@ import org.apache.jasper.Constants;
  */
 public class BodyContentImpl extends BodyContent {
 
-    private static final String LINE_SEPARATOR =
-        System.getProperty("line.separator");
     private static final boolean LIMIT_BUFFER =
         Boolean.valueOf(System.getProperty("org.apache.jasper.runtime.BodyContentImpl.LIMIT_BUFFER", "false")).booleanValue();
 
@@ -172,9 +170,9 @@ public class BodyContentImpl extends BodyContent {
     @Override
     public void newLine() throws IOException {
         if (writer != null) {
-            writer.write(LINE_SEPARATOR);
+            writer.write(System.lineSeparator());
         } else {
-            write(LINE_SEPARATOR);
+            write(System.lineSeparator());
         }
     }
 

==================================================
JspServletWrapper.java
index 49e0b58eb7..8b4dc4fe0e 100644
--- a/java/org/apache/jasper/runtime/JspWriterImpl.java
+++ b/java/org/apache/jasper/runtime/JspWriterImpl.java
@@ -330,9 +330,6 @@ public class JspWriterImpl extends JspWriter {
     }
 
 
-    private static final String lineSeparator =
-            System.getProperty("line.separator");
-
     /**
      * Write a line separator.  The line separator string is defined by the
      * system property <tt>line.separator</tt>, and is not necessarily a single
@@ -343,7 +340,7 @@ public class JspWriterImpl extends JspWriter {
 
     @Override
     public void newLine() throws IOException {
-        write(lineSeparator);
+        write(System.lineSeparator());
     }
 
 

==================================================
JdkLoggerFormatter.java
index 51b427ae9c..2e4176ed30 100644
--- a/java/org/apache/jasper/servlet/JspServletWrapper.java
+++ b/java/org/apache/jasper/servlet/JspServletWrapper.java
@@ -33,7 +33,6 @@ import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.jsp.tagext.TagInfo;
 
-import org.apache.jasper.Constants;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.JspCompilationContext;
 import org.apache.jasper.Options;
@@ -567,9 +566,9 @@ public class JspServletWrapper {
             if (options.getDisplaySourceFragment()) {
                 return new JasperException(Localizer.getMessage
                         ("jsp.exception", detail.getJspFileName(),
-                                "" + jspLineNumber) + Constants.NEWLINE +
-                                Constants.NEWLINE + detail.getJspExtract() +
-                                Constants.NEWLINE + Constants.NEWLINE +
+                                "" + jspLineNumber) + System.lineSeparator() +
+                                System.lineSeparator() + detail.getJspExtract() +
+                                System.lineSeparator() + System.lineSeparator() +
                                 "Stacktrace:", ex);
 
             }

==================================================
OneLineFormatter.java
index 83fb973009..689ef32808 100644
--- a/java/org/apache/juli/JdkLoggerFormatter.java
+++ b/java/org/apache/juli/JdkLoggerFormatter.java
@@ -14,14 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.juli;
 
 import java.util.logging.Formatter;
 import java.util.logging.LogRecord;
 
-
-
 /**
  * A more compact formatter.
  *
@@ -42,8 +39,6 @@ import java.util.logging.LogRecord;
  */
 public class JdkLoggerFormatter extends Formatter {
 
-    private static final String LINE_SEP = System.getProperty("line.separator");
-
     // values from JDK Level
     public static final int LOG_LEVEL_TRACE  = 400;
     public static final int LOG_LEVEL_DEBUG  = 500;
@@ -96,7 +91,7 @@ public class JdkLoggerFormatter extends Formatter {
 
         // Append stack trace if not null
         if(t != null) {
-            buf.append(LINE_SEP);
+            buf.append(System.lineSeparator());
 
             java.io.StringWriter sw= new java.io.StringWriter(1024);
             java.io.PrintWriter pw= new java.io.PrintWriter(sw);
@@ -105,9 +100,8 @@ public class JdkLoggerFormatter extends Formatter {
             buf.append(sw.toString());
         }
 
-        buf.append(LINE_SEP);
+        buf.append(System.lineSeparator());
         // Print to the appropriate destination
         return buf.toString();
     }
-
 }

==================================================
VerbatimFormatter.java
index c19adbe69e..c48b55ce9b 100644
--- a/java/org/apache/juli/OneLineFormatter.java
+++ b/java/org/apache/juli/OneLineFormatter.java
@@ -38,8 +38,7 @@ import java.util.logging.LogRecord;
  */
 public class OneLineFormatter extends Formatter {
 
-    private static final String LINE_SEP = System.getProperty("line.separator");
-    private static final String ST_SEP = LINE_SEP + " ";
+    private static final String ST_SEP = System.lineSeparator() + " ";
     private static final String UNKONWN_THREAD_NAME = "Unknown thread with ID ";
     private static final Object threadMxBeanLock = new Object();
     private static volatile ThreadMXBean threadMxBean = null;
@@ -136,7 +135,7 @@ public class OneLineFormatter extends Formatter {
         }
 
         // New line for next record
-        sb.append(LINE_SEP);
+        sb.append(System.lineSeparator());
 
         return sb.toString();
     }

==================================================
CheckEol.java
index 9096d99e45..a7debe70aa 100644
--- a/java/org/apache/juli/VerbatimFormatter.java
+++ b/java/org/apache/juli/VerbatimFormatter.java
@@ -23,21 +23,19 @@ import java.util.logging.LogRecord;
 /**
  * Outputs the just the log message with no additional elements. Stack traces
  * are not logged. Log messages are separated by
- * <code>System.getProperty("line.separator")</code>. This is intended for use
+ * <code>System.lineSeparator()</code>. This is intended for use
  * by access logs and the like that need complete control over the output
  * format.
  */
 public class VerbatimFormatter extends Formatter {
 
-    private static final String LINE_SEP = System.getProperty("line.separator");
-
     @Override
     public String format(LogRecord record) {
         // Timestamp
         StringBuilder sb = new StringBuilder(record.getMessage());
 
         // New line for next record
-        sb.append(LINE_SEP);
+        sb.append(System.lineSeparator());
 
         return sb.toString();
     }

==================================================
TestClassLoaderLogManager.java
index 10ab3f1b36..04c9536fb4 100644
--- a/java/org/apache/tomcat/buildutil/CheckEol.java
+++ b/java/org/apache/tomcat/buildutil/CheckEol.java
@@ -41,8 +41,6 @@ import org.apache.tools.ant.types.FileSet;
  */
 public class CheckEol extends Task {
 
-    private static final String eoln = System.getProperty("line.separator");
-
     /** The files to be checked */
     private final List<FileSet> filesets = new LinkedList<>();
 
@@ -65,9 +63,9 @@ public class CheckEol extends Task {
     public void execute() throws BuildException {
 
         Mode mode = null;
-        if ("\n".equals(eoln)) {
+        if ("\n".equals(System.lineSeparator())) {
             mode = Mode.LF;
-        } else if ("\r\n".equals(eoln)) {
+        } else if ("\r\n".equals(System.lineSeparator())) {
             mode = Mode.CRLF;
         } else {
             log("Line ends check skipped, because OS line ends setting is neither LF nor CRLF.",
@@ -132,7 +130,7 @@ public class CheckEol extends Task {
 
         @Override
         public String toString() {
-            return eoln + file + ": uses " + value + " on line " + line;
+            return System.lineSeparator() + file + ": uses " + value + " on line " + line;
         }
     }
 

==================================================
