0296c446ceea0bb527d72d95c2a5f27a366f89ed
==================================================
Rename ErrorCode -> Error
==================================================
Mark Thomas
==================================================
Mon Jun 8 17:57:05 2015 +0000
==================================================
ConnectionSettings.java
Rename ErrorCode -> Error

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1684233 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Error.java
index 4b5a0bee18..64b30cb6e7 100644
--- a/java/org/apache/coyote/http2/ConnectionSettings.java
+++ b/java/org/apache/coyote/http2/ConnectionSettings.java
@@ -84,7 +84,7 @@ public class ConnectionSettings {
         // Need to put a sensible limit on this. Start with 16k (default is 4k)
         if (headerTableSize > (16 * 1024)) {
             throw new Http2Exception(sm.getString("connectionSettings.headerTableSizeLimit",
-                    Long.toString(headerTableSize)), 0, ErrorCode.PROTOCOL_ERROR);
+                    Long.toString(headerTableSize)), 0, Error.PROTOCOL_ERROR);
         }
         this.headerTableSize = (int) headerTableSize;
     }
@@ -98,7 +98,7 @@ public class ConnectionSettings {
         // will never be negative
         if (enablePush > 1) {
             throw new Http2Exception(sm.getString("connectionSettings.enablePushInvalid",
-                    Long.toString(enablePush)), 0, ErrorCode.PROTOCOL_ERROR);
+                    Long.toString(enablePush)), 0, Error.PROTOCOL_ERROR);
         }
         this.enablePush = (enablePush  == 1);
     }
@@ -119,7 +119,7 @@ public class ConnectionSettings {
         if (initialWindowSize > MAX_WINDOW_SIZE) {
             throw new Http2Exception(sm.getString("connectionSettings.windowSizeTooBig",
                     Long.toString(initialWindowSize), Long.toString(MAX_WINDOW_SIZE)),
-                    0, ErrorCode.PROTOCOL_ERROR);
+                    0, Error.PROTOCOL_ERROR);
         }
         this.initialWindowSize = (int) initialWindowSize;
     }
@@ -132,7 +132,7 @@ public class ConnectionSettings {
         if (maxFrameSize < MIN_MAX_FRAME_SIZE || maxFrameSize > MAX_MAX_FRAME_SIZE) {
             throw new Http2Exception(sm.getString("connectionSettings.maxFrameSizeInvalid",
                     Long.toString(maxFrameSize), Integer.toString(MIN_MAX_FRAME_SIZE),
-                    Integer.toString(MAX_MAX_FRAME_SIZE)), 0, ErrorCode.PROTOCOL_ERROR);
+                    Integer.toString(MAX_MAX_FRAME_SIZE)), 0, Error.PROTOCOL_ERROR);
         }
         this.maxFrameSize = (int) maxFrameSize;
     }

==================================================
FrameType.java
similarity index 78%
rename from java/org/apache/coyote/http2/ErrorCode.java
rename to java/org/apache/coyote/http2/Error.java
index d12f79c520..ea4c663a15 100644
--- a/java/org/apache/coyote/http2/ErrorCode.java
+++ b/java/org/apache/coyote/http2/Error.java
@@ -16,7 +16,7 @@
  */
 package org.apache.coyote.http2;
 
-public enum ErrorCode {
+public enum Error {
 
     NO_ERROR            (0x00),
     PROTOCOL_ERROR      (0x01),
@@ -33,21 +33,21 @@ public enum ErrorCode {
     INADEQUATE_SECURITY (0x0c),
     HTTP_1_1_REQUIRED   (0x0d);
 
-    private final long errorCode;
+    private final long code;
 
-    private ErrorCode(long errorCode) {
-        this.errorCode = errorCode;
+    private Error(long code) {
+        this.code = code;
     }
 
 
-    public long getErrorCode() {
-        return errorCode;
+    public long getCode() {
+        return code;
     }
 
 
-    public byte[] getErrorCodeBytes() {
-        byte[] errorCodeByte = new byte[4];
-        ByteUtil.setFourBytes(errorCodeByte, 0, errorCode);
-        return errorCodeByte;
+    public byte[] getCodeBytes() {
+        byte[] codeByte = new byte[4];
+        ByteUtil.setFourBytes(codeByte, 0, code);
+        return codeByte;
     }
 }

==================================================
Http2Exception.java
index 1be2c27198..2b590db9c4 100644
--- a/java/org/apache/coyote/http2/FrameType.java
+++ b/java/org/apache/coyote/http2/FrameType.java
@@ -59,10 +59,10 @@ public enum FrameType {
     public void checkStream(String connectionId, int streamId) throws Http2Exception {
         if (streamId == 0 && !streamZero) {
             throw new Http2Exception(sm.getString("frameType.checkStream.invalidForZero",
-                    connectionId, this), 0, ErrorCode.PROTOCOL_ERROR);
+                    connectionId, this), 0, Error.PROTOCOL_ERROR);
         } else if (streamId != 0 && !streamNonZero) {
             throw new Http2Exception(sm.getString("frameType.checkStream.invalidForNonZero",
-                    connectionId, Integer.valueOf(streamId), this), 0, ErrorCode.PROTOCOL_ERROR);
+                    connectionId, Integer.valueOf(streamId), this), 0, Error.PROTOCOL_ERROR);
         }
     }
 
@@ -72,7 +72,7 @@ public enum FrameType {
         if (payloadSizeValidator != null && !payloadSizeValidator.test(payloadSize)) {
             throw new Http2Exception(sm.getString("frameType.checkPayloadSize",
                     connectionId, Integer.toString(streamId), this, Integer.toString(payloadSize)),
-                    0, ErrorCode.FRAME_SIZE_ERROR);
+                    0, Error.FRAME_SIZE_ERROR);
         }
     }
 

==================================================
Http2Parser.java
index a894f0737f..d2f171a68f 100644
--- a/java/org/apache/coyote/http2/Http2Exception.java
+++ b/java/org/apache/coyote/http2/Http2Exception.java
@@ -23,13 +23,13 @@ public class Http2Exception extends IOException {
     private static final long serialVersionUID = 1L;
 
     private final int streamId;
-    private final ErrorCode errorCode;
+    private final Error error;
 
 
-    public Http2Exception(String msg, int streamId, ErrorCode errorCode) {
+    public Http2Exception(String msg, int streamId, Error error) {
         super(msg);
         this.streamId = streamId;
-        this.errorCode = errorCode;
+        this.error = error;
     }
 
 
@@ -38,7 +38,7 @@ public class Http2Exception extends IOException {
     }
 
 
-    public ErrorCode getErrorCode() {
-        return errorCode;
+    public Error getError() {
+        return error;
     }
 }

==================================================
Http2UpgradeHandler.java
index 4abb14478d..613fdc91a6 100644
--- a/java/org/apache/coyote/http2/Http2Parser.java
+++ b/java/org/apache/coyote/http2/Http2Parser.java
@@ -233,7 +233,7 @@ class Http2Parser {
         boolean ack = Flags.isAck(flags);
         if (payloadSize > 0 && ack) {
             throw new Http2Exception(sm.getString("http2Parser.processFrameSettings.ackWithNonZeroPayload"),
-                    0, ErrorCode.FRAME_SIZE_ERROR);
+                    0, Error.FRAME_SIZE_ERROR);
         }
 
         if (payloadSize != 0) {
@@ -252,7 +252,7 @@ class Http2Parser {
 
     private void readPushPromiseFrame(int streamId) throws IOException {
         throw new Http2Exception(sm.getString("http2Parser.processFramePushPromise",
-                connectionId, Integer.valueOf(streamId)), 0, ErrorCode.PROTOCOL_ERROR);
+                connectionId, Integer.valueOf(streamId)), 0, Error.PROTOCOL_ERROR);
     }
 
 
@@ -295,7 +295,7 @@ class Http2Parser {
         // Validate the data
         if (windowSizeIncrement == 0) {
             throw new Http2Exception("http2Parser.processFrameWindowUpdate.invalidIncrement",
-                    streamId, ErrorCode.PROTOCOL_ERROR);
+                    streamId, Error.PROTOCOL_ERROR);
         }
 
         output.incrementWindowSize(streamId, windowSizeIncrement);
@@ -308,7 +308,7 @@ class Http2Parser {
             // No headers to continue
             throw new Http2Exception(sm.getString(
                     "http2Parser.processFrameContinuation.notExpected", connectionId,
-                    Integer.toString(streamId)), 0, ErrorCode.PROTOCOL_ERROR);
+                    Integer.toString(streamId)), 0, Error.PROTOCOL_ERROR);
         }
 
         boolean endOfHeaders = Flags.isEndOfHeaders(flags);
@@ -337,7 +337,7 @@ class Http2Parser {
             } catch (HpackException hpe) {
                 throw new Http2Exception(
                         sm.getString("http2Parser.processFrameHeaders.decodingFailed"),
-                        0, ErrorCode.COMPRESSION_ERROR);
+                        0, Error.COMPRESSION_ERROR);
             }
             // switches to write mode
             headerReadBuffer.compact();
@@ -347,7 +347,7 @@ class Http2Parser {
         if (headerReadBuffer.position() > 0 && endOfHeaders) {
             throw new Http2Exception(
                     sm.getString("http2Parser.processFrameHeaders.decodingDataLeft"),
-                    0, ErrorCode.COMPRESSION_ERROR);
+                    0, Error.COMPRESSION_ERROR);
         }
     }
 
@@ -392,25 +392,25 @@ class Http2Parser {
 
         if (expected != null && frameType != expected) {
             throw new Http2Exception(sm.getString("http2Parser.processFrame.unexpectedType",
-                    expected, frameType), streamId, ErrorCode.PROTOCOL_ERROR);
+                    expected, frameType), streamId, Error.PROTOCOL_ERROR);
         }
 
         if (payloadSize > maxPayloadSize) {
             throw new Http2Exception(sm.getString("http2Parser.payloadTooBig",
                     Integer.toString(payloadSize), Integer.toString(maxPayloadSize)),
-                    streamId, ErrorCode.FRAME_SIZE_ERROR);
+                    streamId, Error.FRAME_SIZE_ERROR);
         }
 
         if (headersCurrentStream != -1) {
             if (headersCurrentStream != streamId) {
                 throw new Http2Exception(sm.getString("http2Parser.headers.wrongStream",
                         connectionId, Integer.toString(headersCurrentStream),
-                        Integer.toString(streamId)), streamId, ErrorCode.COMPRESSION_ERROR);
+                        Integer.toString(streamId)), streamId, Error.COMPRESSION_ERROR);
             }
             if (frameType != FrameType.CONTINUATION) {
                 throw new Http2Exception(sm.getString("http2Parser.headers.wrongFrameType",
                         connectionId, Integer.toString(headersCurrentStream),
-                        frameType), streamId, ErrorCode.COMPRESSION_ERROR);
+                        frameType), streamId, Error.COMPRESSION_ERROR);
             }
         }
 

==================================================
StreamStateMachine.java
index a5ab6123a0..6a70233a65 100644
--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java
@@ -344,7 +344,7 @@ public class Http2UpgradeHandler extends AbstractStream implements InternalHttpU
         byte[] fixedPayload = new byte[8];
         // TODO needs to be correct value
         ByteUtil.set31Bits(fixedPayload, 0, (2 << 31) - 1);
-        ByteUtil.setFourBytes(fixedPayload, 4, h2e.getErrorCode().getErrorCode());
+        ByteUtil.setFourBytes(fixedPayload, 4, h2e.getError().getCode());
         byte[] debugMessage = h2e.getMessage().getBytes(StandardCharsets.UTF_8);
         byte[] payloadLength = new byte[3];
         ByteUtil.setThreeBytes(payloadLength, 0, debugMessage.length + 8);

==================================================
TestHttp2Section_4_3.java
index f955dab411..4898a89e21 100644
--- a/java/org/apache/coyote/http2/StreamStateMachine.java
+++ b/java/org/apache/coyote/http2/StreamStateMachine.java
@@ -126,29 +126,29 @@ public class StreamStateMachine {
 
 
     private enum State {
-        IDLE               (true,  ErrorCode.PROTOCOL_ERROR, FrameType.HEADERS, FrameType.PRIORITY),
-        OPEN               (true,  ErrorCode.PROTOCOL_ERROR, FrameType.DATA, FrameType.HEADERS,
+        IDLE               (true,  Error.PROTOCOL_ERROR, FrameType.HEADERS, FrameType.PRIORITY),
+        OPEN               (true,  Error.PROTOCOL_ERROR, FrameType.DATA, FrameType.HEADERS,
                                     FrameType.PRIORITY, FrameType.RST, FrameType.PUSH_PROMISE,
                                     FrameType.WINDOW_UPDATE),
-        RESERVED_LOCAL     (true,  ErrorCode.PROTOCOL_ERROR, FrameType.PRIORITY, FrameType.RST,
+        RESERVED_LOCAL     (true,  Error.PROTOCOL_ERROR, FrameType.PRIORITY, FrameType.RST,
                                     FrameType.WINDOW_UPDATE),
-        RESERVED_REMOTE    (true,  ErrorCode.PROTOCOL_ERROR, FrameType.HEADERS, FrameType.PRIORITY,
+        RESERVED_REMOTE    (true,  Error.PROTOCOL_ERROR, FrameType.HEADERS, FrameType.PRIORITY,
                                     FrameType.RST),
-        HALF_CLOSED_LOCAL  (true,  ErrorCode.PROTOCOL_ERROR, FrameType.DATA, FrameType.HEADERS,
+        HALF_CLOSED_LOCAL  (true,  Error.PROTOCOL_ERROR, FrameType.DATA, FrameType.HEADERS,
                                     FrameType.PRIORITY, FrameType.RST, FrameType.PUSH_PROMISE,
                                     FrameType.WINDOW_UPDATE),
-        HALF_CLOSED_REMOTE (true,  ErrorCode.STREAM_CLOSED, FrameType.PRIORITY, FrameType.RST,
+        HALF_CLOSED_REMOTE (true,  Error.STREAM_CLOSED, FrameType.PRIORITY, FrameType.RST,
                                     FrameType.WINDOW_UPDATE),
-        CLOSED_RX          (true,  ErrorCode.STREAM_CLOSED, FrameType.PRIORITY),
-        CLOSED_RST         (false, ErrorCode.STREAM_CLOSED, FrameType.PRIORITY),
-        CLOSED_TX          (true,  ErrorCode.STREAM_CLOSED, FrameType.PRIORITY, FrameType.RST,
+        CLOSED_RX          (true,  Error.STREAM_CLOSED, FrameType.PRIORITY),
+        CLOSED_RST         (false, Error.STREAM_CLOSED, FrameType.PRIORITY),
+        CLOSED_TX          (true,  Error.STREAM_CLOSED, FrameType.PRIORITY, FrameType.RST,
                                     FrameType.WINDOW_UPDATE);
 
         private final boolean connectionErrorForInvalidFrame;
-        private final ErrorCode errorCodeForInvalidFrame;
+        private final Error errorCodeForInvalidFrame;
         private final Set<FrameType> frameTypesPermitted = new HashSet<>();
 
-        private State(boolean connectionErrorForInvalidFrame, ErrorCode errorCode,
+        private State(boolean connectionErrorForInvalidFrame, Error errorCode,
                 FrameType... frameTypes) {
             this.connectionErrorForInvalidFrame = connectionErrorForInvalidFrame;
             this.errorCodeForInvalidFrame = errorCode;

==================================================
TestHttp2Section_5_1.java
index a6fb94c62e..0e793809ed 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_4_3.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_4_3.java
@@ -53,7 +53,7 @@ public class TestHttp2Section_4_3 extends Http2TestBase {
 
         Assert.assertTrue(output.getTrace(),
                 output.getTrace().startsWith("0-Goaway-[2147483647]-[" +
-                        ErrorCode.COMPRESSION_ERROR.getErrorCode() + "]-["));
+                        Error.COMPRESSION_ERROR.getCode() + "]-["));
     }
 
 
@@ -108,6 +108,6 @@ public class TestHttp2Section_4_3 extends Http2TestBase {
 
         Assert.assertTrue(output.getTrace(),
                 output.getTrace().startsWith("0-Goaway-[2147483647]-[" +
-                        ErrorCode.COMPRESSION_ERROR.getErrorCode() + "]-["));
+                        Error.COMPRESSION_ERROR.getCode() + "]-["));
     }
 }

==================================================
