6369025dc4a9be3aa6be739486495080f1c82512
==================================================
And now remove the hard-coded support for HTTP/2 with a configuration option in server.xml.
==================================================
Mark Thomas
==================================================
Fri May 29 11:43:00 2015 +0000
==================================================
Connector.java
And now remove the hard-coded support for HTTP/2 with a configuration option in server.xml.
This supports any UpgradeProtocol implementation - not just HTTP/2.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1682428 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Catalina.java
index 42b6593fa7..e2d37de4ec 100644
--- a/java/org/apache/catalina/connector/Connector.java
+++ b/java/org/apache/catalina/connector/Connector.java
@@ -32,6 +32,7 @@ import org.apache.catalina.core.AprLifecycleListener;
 import org.apache.catalina.util.LifecycleMBeanBase;
 import org.apache.coyote.Adapter;
 import org.apache.coyote.ProtocolHandler;
+import org.apache.coyote.UpgradeProtocol;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.IntrospectionUtils;
@@ -856,6 +857,12 @@ public class Connector extends LifecycleMBeanBase  {
     public void addSslHostConfig(SSLHostConfig sslHostConfig) {
         protocolHandler.addSslHostConfig(sslHostConfig);
     }
+
+
+    public void addUpgradeProtocol(UpgradeProtocol upgradeProtocol) {
+        protocolHandler.addUpgradeProtocol(upgradeProtocol);
+    }
+
     // --------------------------------------------------------- Public Methods
 
 

==================================================
ProtocolHandler.java
index da0c02746e..80177ea5f1 100644
--- a/java/org/apache/catalina/startup/Catalina.java
+++ b/java/org/apache/catalina/startup/Catalina.java
@@ -351,7 +351,15 @@ public class Catalina {
                             "addLifecycleListener",
                             "org.apache.catalina.LifecycleListener");
 
-        // Add RuleSets for nested elements
+        digester.addObjectCreate("Server/Service/Connector/UpgradeProtocol",
+                                  null, // MUST be specified in the element
+                                  "className");
+        digester.addSetProperties("Server/Service/Connector/UpgradeProtocol");
+        digester.addSetNext("Server/Service/Connector/UpgradeProtocol",
+                            "addUpgradeProtocol",
+                            "org.apache.coyote.UpgradeProtocol");
+
+// Add RuleSets for nested elements
         digester.addRuleSet(new NamingRuleSet("Server/GlobalNamingResources/"));
         digester.addRuleSet(new EngineRuleSet("Server/Service/"));
         digester.addRuleSet(new HostRuleSet("Server/Service/Engine/"));

==================================================
AbstractAjpProtocol.java
index 36486e9491..006fd330ea 100644
--- a/java/org/apache/coyote/ProtocolHandler.java
+++ b/java/org/apache/coyote/ProtocolHandler.java
@@ -99,4 +99,7 @@ public interface ProtocolHandler {
 
 
     public void addSslHostConfig(SSLHostConfig sslHostConfig);
+
+
+    public void addUpgradeProtocol(UpgradeProtocol upgradeProtocol);
 }

==================================================
AbstractHttp11Protocol.java
index 0ba83dcc70..6eb27108c7 100644
--- a/java/org/apache/coyote/ajp/LocalStrings.properties
+++ b/java/org/apache/coyote/ajp/LocalStrings.properties
@@ -13,6 +13,7 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 ajpprotocol.noSSL=SSL is not supported with AJP. The SSL host configuration for [{0}] was ignored
+ajpprotocol.noUpgrade=Upgrade is not supported with AJP. The UpgradeProtocol configuration for [{0}] was ignored
 
 ajpnioprotocol.releaseStart=Iterating through our connections to release a socket channel [{0}]
 ajpnioprotocol.releaseEnd=Done iterating through our connections to release a socket channel [{0}] released [{1}]

==================================================
Http2UpgradeHandler.java
index a3d1669274..c4972aecd3 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -37,7 +37,6 @@ import org.apache.coyote.UpgradeProtocol;
 import org.apache.coyote.http11.upgrade.InternalHttpUpgradeHandler;
 import org.apache.coyote.http11.upgrade.UpgradeProcessorExternal;
 import org.apache.coyote.http11.upgrade.UpgradeProcessorInternal;
-import org.apache.coyote.http2.Http2Protocol;
 import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.SSLHostConfig;
 import org.apache.tomcat.util.net.SocketWrapperBase;
@@ -57,9 +56,9 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
 
     @Override
     public void init() throws Exception {
-        // TODO: Make this configurable via nested UpgradeProtocol elements in
-        //       the Connector.
-        addUpgradeProtocol(new Http2Protocol());
+        for (UpgradeProtocol upgradeProtocol : upgradeProtocols) {
+            configureUpgradeProtocol(upgradeProtocol);
+        }
 
         super.init();
     }
@@ -290,6 +289,14 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     }
 
 
+    /**
+     * The upgrade protocol instances configured.
+     */
+    private final List<UpgradeProtocol> upgradeProtocols = new ArrayList<>();
+    public void addUpgradeProtocol(UpgradeProtocol upgradeProtocol) {
+        upgradeProtocols.add(upgradeProtocol);
+    }
+
     /**
      * The protocols that are available via internal Tomcat support for access
      * via HTTP upgrade.
@@ -300,7 +307,7 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
      * via ALPN negotiation.
      */
     private final Map<String,UpgradeProtocol> negotiatedProtocols = new HashMap<>();
-    public void addUpgradeProtocol(UpgradeProtocol upgradeProtocol) {
+    private void configureUpgradeProtocol(UpgradeProtocol upgradeProtocol) {
         boolean secure = getEndpoint().isSSLEnabled();
         // HTTP Upgrade
         String httpUpgradeName = upgradeProtocol.getHttpUpgradeName(secure);

==================================================
