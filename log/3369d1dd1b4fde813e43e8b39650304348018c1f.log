3369d1dd1b4fde813e43e8b39650304348018c1f
==================================================
Fix generics warnings
==================================================
Mark Thomas
==================================================
Tue Jun 19 09:15:25 2018 +0000
==================================================
BasicDataSource.java
Fix generics warnings

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1833796 13f79535-47bb-0310-9956-ffa450edef68



==================================================
PoolableConnectionFactory.java
index d62cd02f37..165a1ca37f 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSource.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSource.java
@@ -2212,7 +2212,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      */
     protected void createConnectionPool(final PoolableConnectionFactory factory) {
         // Create an object pool to contain our active connections
-        final GenericObjectPoolConfig config = new GenericObjectPoolConfig();
+        final GenericObjectPoolConfig<PoolableConnection> config = new GenericObjectPoolConfig<>();
         updateJmxName(config);
         // Disable JMX on the underlying pool if the DS is not registered:
         config.setJmxEnabled(registeredJmxObjectName != null);
@@ -2247,7 +2247,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
      * @return a non-null instance
      */
     protected GenericObjectPool<PoolableConnection> createObjectPool(final PoolableConnectionFactory factory,
-            final GenericObjectPoolConfig poolConfig, final AbandonedConfig abandonedConfig) {
+            final GenericObjectPoolConfig<PoolableConnection> poolConfig, final AbandonedConfig abandonedConfig) {
         GenericObjectPool<PoolableConnection> gop;
         if (abandonedConfig != null && (abandonedConfig.getRemoveAbandonedOnBorrow()
                 || abandonedConfig.getRemoveAbandonedOnMaintenance())) {
@@ -2411,7 +2411,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
         // NO-OP
     }
 
-    private void updateJmxName(final GenericObjectPoolConfig config) {
+    private void updateJmxName(final GenericObjectPoolConfig<?> config) {
         if (registeredJmxObjectName == null) {
             return;
         }

==================================================
PoolingConnection.java
index ec7d0942c4..469dc7d1eb 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/PoolableConnectionFactory.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/PoolableConnectionFactory.java
@@ -297,7 +297,7 @@ public class PoolableConnectionFactory implements PooledObjectFactory<PoolableCo
 
         if (poolStatements) {
             conn = new PoolingConnection(conn);
-            final GenericKeyedObjectPoolConfig config = new GenericKeyedObjectPoolConfig();
+            final GenericKeyedObjectPoolConfig<DelegatingPreparedStatement> config = new GenericKeyedObjectPoolConfig<>();
             config.setMaxTotalPerKey(-1);
             config.setBlockWhenExhausted(false);
             config.setMaxWaitMillis(0);

==================================================
DriverAdapterCPDS.java
index 04d67fb621..5f9620c83c 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/PoolingConnection.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/PoolingConnection.java
@@ -322,11 +322,11 @@ public class PoolingConnection extends DelegatingConnection<Connection>
             final PreparedStatement statement = (PreparedStatement) key.createStatement(getDelegate());
             @SuppressWarnings({"rawtypes", "unchecked" }) // Unable to find way to avoid this
             final PoolablePreparedStatement pps = new PoolablePreparedStatement(statement, key, pstmtPool, this);
-            return new DefaultPooledObject<DelegatingPreparedStatement>(pps);
+            return new DefaultPooledObject<>(pps);
         }
         final CallableStatement statement = (CallableStatement) key.createStatement(getDelegate());
         final PoolableCallableStatement pcs = new PoolableCallableStatement(statement, key, pstmtPool, this);
-        return new DefaultPooledObject<DelegatingPreparedStatement>(pcs);
+        return new DefaultPooledObject<>(pcs);
     }
 
     /**

==================================================
PooledConnectionImpl.java
index ba9c2c2bc3..af7dbe7abd 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/cpdsadapter/DriverAdapterCPDS.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/cpdsadapter/DriverAdapterCPDS.java
@@ -182,7 +182,7 @@ public class DriverAdapterCPDS implements ConnectionPoolDataSource, Referenceabl
         }
         KeyedObjectPool<PStmtKey, DelegatingPreparedStatement> stmtPool = null;
         if (isPoolPreparedStatements()) {
-            final GenericKeyedObjectPoolConfig config = new GenericKeyedObjectPoolConfig();
+            final GenericKeyedObjectPoolConfig<DelegatingPreparedStatement> config = new GenericKeyedObjectPoolConfig<>();
             config.setMaxTotalPerKey(Integer.MAX_VALUE);
             config.setBlockWhenExhausted(false);
             config.setMaxWaitMillis(0);

==================================================
SharedPoolDataSource.java
index 18c11e3bc2..fa06666346 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/cpdsadapter/PooledConnectionImpl.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/cpdsadapter/PooledConnectionImpl.java
@@ -339,13 +339,13 @@ class PooledConnectionImpl
             @SuppressWarnings({"rawtypes", "unchecked" }) // Unable to find way to avoid this
             final PoolablePreparedStatement pps = new PoolablePreparedStatement(statement, key, pStmtPool,
                     delegatingConnection);
-            return new DefaultPooledObject<DelegatingPreparedStatement>(pps);
+            return new DefaultPooledObject<>(pps);
         }
         final CallableStatement statement = (CallableStatement) key.createStatement(connection);
         @SuppressWarnings("unchecked")
         final PoolableCallableStatement pcs = new PoolableCallableStatement(statement, key, pStmtPool,
                 (DelegatingConnection<Connection>) delegatingConnection);
-        return new DefaultPooledObject<DelegatingPreparedStatement>(pcs);
+        return new DefaultPooledObject<>(pcs);
     }
 
     /**

==================================================
PoolableManagedConnectionFactory.java
index a006f4ac64..40d385113e 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/datasources/SharedPoolDataSource.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/datasources/SharedPoolDataSource.java
@@ -173,7 +173,7 @@ public class SharedPoolDataSource extends InstanceKeyDataSource {
                 isRollbackAfterValidation());
         factory.setMaxConnLifetimeMillis(getMaxConnLifetimeMillis());
 
-        final GenericKeyedObjectPoolConfig config = new GenericKeyedObjectPoolConfig();
+        final GenericKeyedObjectPoolConfig<PooledConnectionAndInfo> config = new GenericKeyedObjectPoolConfig<>();
         config.setBlockWhenExhausted(getDefaultBlockWhenExhausted());
         config.setEvictionPolicyClassName(getDefaultEvictionPolicyClassName());
         config.setLifo(getDefaultLifo());

==================================================
