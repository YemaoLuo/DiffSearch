0379a3a590c3082491062d8d5aeb0bb337299393
==================================================
Ensure correct exception with ImportHandler and Java 9+
==================================================
Mark Thomas
==================================================
Thu Oct 3 23:24:47 2019 +0100
==================================================
ImportHandler.java
Ensure correct exception with ImportHandler and Java 9+


==================================================
Jre9Compat.java
index b222ea538d..eb9e270a3f 100644
--- a/java/javax/el/ImportHandler.java
+++ b/java/javax/el/ImportHandler.java
@@ -464,10 +464,12 @@ public class ImportHandler {
             return null;
         }
 
-        // Class must be public, non-abstract and not an interface
+        // Class must be public, non-abstract, not an interface and (for
+        // Java 9+) in an exported package
+        JreCompat jreCompat = JreCompat.getInstance();
         int modifiers = clazz.getModifiers();
         if (!Modifier.isPublic(modifiers) || Modifier.isAbstract(modifiers) ||
-                Modifier.isInterface(modifiers)) {
+                Modifier.isInterface(modifiers) || !jreCompat.isExported(clazz)) {
             if (throwException) {
                 throw new ELException(Util.message(
                         null, "importHandler.invalidClass", name));

==================================================
JreCompat.java
index 27187132a8..b95f93a999 100644
--- a/java/javax/el/Jre9Compat.java
+++ b/java/javax/el/Jre9Compat.java
@@ -29,16 +29,29 @@ import java.lang.reflect.Method;
 class Jre9Compat extends JreCompat {
 
     private static final Method canAccessMethod;
-
+    private static final Method getModuleMethod;
+    private static final Method isExportedMethod;
 
     static {
         Method m1 = null;
+        Method m2 = null;
+        Method m3 = null;
+
         try {
-            m1 = AccessibleObject.class.getMethod("canAccess", new Class<?>[] { Object.class });
+            m1 = AccessibleObject.class.getMethod("canAccess", Object.class);
+            m2 = Class.class.getMethod("getModule");
+            Class<?> moduleClass = Class.forName("java.lang.Module");
+            m3 = moduleClass.getMethod("isExported", String.class);
         } catch (NoSuchMethodException e) {
             // Expected for Java 8
+        } catch (ClassNotFoundException e) {
+            // Can't log this so...
+            throw new RuntimeException(e);
         }
+
         canAccessMethod = m1;
+        getModuleMethod = m2;
+        isExportedMethod = m3;
     }
 
 
@@ -55,4 +68,16 @@ class Jre9Compat extends JreCompat {
             return false;
         }
     }
+
+
+    @Override
+    public boolean isExported(Class<?> type) {
+        try {
+            String packageName = type.getPackage().getName();
+            Object module = getModuleMethod.invoke(type);
+            return ((Boolean) isExportedMethod.invoke(module, packageName)).booleanValue();
+        } catch (ReflectiveOperationException e) {
+            return false;
+        }
+    }
 }

==================================================
