8568a2ca230f4fb6aee483eb40fc7e3f28bc8b96
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60087
==================================================
Mark Thomas
==================================================
Wed Oct 5 09:50:39 2016 +0000
==================================================
AbstractSingleArchiveResource.java
index 3166def23b..e22fc97c29 100644
--- a/conf/catalina.policy
+++ b/conf/catalina.policy
@@ -245,3 +245,13 @@ grant codeBase "file:${catalina.home}/webapps/manager/-" {
 //      permission java.net.SocketPermission "*.noaa.gov:80", "connect";
 // };
 
+// To grant permissions for web applications using packed WAR files, use the
+// Tomcat specific WAR url scheme.
+//
+// The permissions granted to the entire web application
+// grant codeBase "war:file:${catalina.base}/webapps/examples.war*/-" {
+// };
+//
+// The permissions granted to a specific JAR
+// grant codeBase "war:file:${catalina.base}/webapps/examples.war*/WEB-INF/lib/foo.jar" {
+// };
\ No newline at end of file

==================================================
AbstractSingleArchiveResourceSet.java
new file mode 100644
index 0000000000..ee9b686ee1
--- /dev/null
+++ b/java/org/apache/catalina/webresources/AbstractSingleArchiveResource.java
@@ -0,0 +1,52 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.webresources;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+
+public abstract class AbstractSingleArchiveResource extends AbstractArchiveResource {
+
+    protected AbstractSingleArchiveResource(AbstractArchiveResourceSet archiveResourceSet, String webAppPath,
+            String baseUrl, JarEntry jarEntry, String codeBaseUrl) {
+        super(archiveResourceSet, webAppPath, baseUrl, jarEntry, codeBaseUrl);
+    }
+
+
+    @Override
+    protected JarInputStreamWrapper getJarInputStreamWrapper() {
+        JarFile jarFile = null;
+        try {
+            jarFile = getArchiveResourceSet().openJarFile();
+            // Need to create a new JarEntry so the certificates can be read
+            JarEntry jarEntry = jarFile.getJarEntry(getResource().getName());
+            InputStream is = jarFile.getInputStream(jarEntry);
+            return new JarInputStreamWrapper(jarEntry, is);
+        } catch (IOException e) {
+            if (getLog().isDebugEnabled()) {
+                getLog().debug(sm.getString("jarResource.getInputStreamFail",
+                        getResource().getName(), getBaseUrl()), e);
+            }
+            if (jarFile != null) {
+                getArchiveResourceSet().closeJarFile();
+            }
+            return null;
+        }
+    }
+}

==================================================
JarResource.java
new file mode 100644
index 0000000000..22578033c5
--- /dev/null
+++ b/java/org/apache/catalina/webresources/AbstractSingleArchiveResourceSet.java
@@ -0,0 +1,122 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.webresources;
+
+import java.io.File;
+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+
+import org.apache.catalina.LifecycleException;
+import org.apache.catalina.WebResourceRoot;
+import org.apache.tomcat.util.buf.UriUtil;
+
+/**
+ * Base class for a {@link org.apache.catalina.WebResourceSet} based on a
+ * single, rather than nested, archive.
+ */
+public abstract class AbstractSingleArchiveResourceSet extends AbstractArchiveResourceSet {
+
+    /**
+     * A no argument constructor is required for this to work with the digester.
+     */
+    public AbstractSingleArchiveResourceSet() {
+    }
+
+
+    public AbstractSingleArchiveResourceSet(WebResourceRoot root, String webAppMount, String base,
+            String internalPath) throws IllegalArgumentException {
+        setRoot(root);
+        setWebAppMount(webAppMount);
+        setBase(base);
+        setInternalPath(internalPath);
+
+        if (getRoot().getState().isAvailable()) {
+            try {
+                start();
+            } catch (LifecycleException e) {
+                throw new IllegalStateException(e);
+            }
+        }
+    }
+
+
+    @Override
+    protected HashMap<String,JarEntry> getArchiveEntries(boolean single) {
+        synchronized (archiveLock) {
+            if (archiveEntries == null && !single) {
+                JarFile jarFile = null;
+                archiveEntries = new HashMap<>();
+                try {
+                    jarFile = openJarFile();
+                    Enumeration<JarEntry> entries = jarFile.entries();
+                    while (entries.hasMoreElements()) {
+                        JarEntry entry = entries.nextElement();
+                        archiveEntries.put(entry.getName(), entry);
+                    }
+                } catch (IOException ioe) {
+                    // Should never happen
+                    archiveEntries = null;
+                    throw new IllegalStateException(ioe);
+                } finally {
+                    if (jarFile != null) {
+                        closeJarFile();
+                    }
+                }
+            }
+            return archiveEntries;
+        }
+    }
+
+
+    @Override
+    protected JarEntry getArchiveEntry(String pathInArchive) {
+        JarFile jarFile = null;
+        try {
+            jarFile = openJarFile();
+            return jarFile.getJarEntry(pathInArchive);
+        } catch (IOException ioe) {
+            // Should never happen
+            throw new IllegalStateException(ioe);
+        } finally {
+            if (jarFile != null) {
+                closeJarFile();
+            }
+        }
+    }
+
+
+    //-------------------------------------------------------- Lifecycle methods
+    @Override
+    protected void initInternal() throws LifecycleException {
+
+        try (JarFile jarFile = new JarFile(getBase())) {
+            setManifest(jarFile.getManifest());
+        } catch (IOException ioe) {
+            throw new IllegalArgumentException(ioe);
+        }
+
+        try {
+            setBaseUrl(UriUtil.buildJarSafeUrl(new File(getBase())));
+        } catch (MalformedURLException e) {
+            throw new IllegalArgumentException(e);
+        }
+    }
+}

==================================================
JarResourceSet.java
index c32f43484b..fb59522e0e 100644
--- a/java/org/apache/catalina/webresources/JarResource.java
+++ b/java/org/apache/catalina/webresources/JarResource.java
@@ -16,10 +16,7 @@
  */
 package org.apache.catalina.webresources;
 
-import java.io.IOException;
-import java.io.InputStream;
 import java.util.jar.JarEntry;
-import java.util.jar.JarFile;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -28,35 +25,16 @@ import org.apache.juli.logging.LogFactory;
  * Represents a single resource (file or directory) that is located within a
  * JAR.
  */
-public class JarResource extends AbstractArchiveResource {
+public class JarResource extends AbstractSingleArchiveResource {
 
     private static final Log log = LogFactory.getLog(JarResource.class);
 
+
     public JarResource(AbstractArchiveResourceSet archiveResourceSet, String webAppPath,
             String baseUrl, JarEntry jarEntry) {
         super(archiveResourceSet, webAppPath, "jar:" + baseUrl, jarEntry, baseUrl);
     }
 
-    @Override
-    protected JarInputStreamWrapper getJarInputStreamWrapper() {
-        JarFile jarFile = null;
-        try {
-            jarFile = getArchiveResourceSet().openJarFile();
-            // Need to create a new JarEntry so the certificates can be read
-            JarEntry jarEntry = jarFile.getJarEntry(getResource().getName());
-            InputStream is = jarFile.getInputStream(jarEntry);
-            return new JarInputStreamWrapper(jarEntry, is);
-        } catch (IOException e) {
-            if (log.isDebugEnabled()) {
-                log.debug(sm.getString("jarResource.getInputStreamFail",
-                        getResource().getName(), getBaseUrl()), e);
-            }
-            if (jarFile != null) {
-                getArchiveResourceSet().closeJarFile();
-            }
-            return null;
-        }
-    }
 
     @Override
     protected Log getLog() {

==================================================
JarWarResource.java
index f9478a285e..c39ac745e6 100644
--- a/java/org/apache/catalina/webresources/JarResourceSet.java
+++ b/java/org/apache/catalina/webresources/JarResourceSet.java
@@ -16,24 +16,16 @@
  */
 package org.apache.catalina.webresources;
 
-import java.io.File;
-import java.io.IOException;
-import java.net.MalformedURLException;
-import java.util.Enumeration;
-import java.util.HashMap;
 import java.util.jar.JarEntry;
-import java.util.jar.JarFile;
 import java.util.jar.Manifest;
 
-import org.apache.catalina.LifecycleException;
 import org.apache.catalina.WebResource;
 import org.apache.catalina.WebResourceRoot;
-import org.apache.tomcat.util.buf.UriUtil;
 
 /**
  * Represents a {@link org.apache.catalina.WebResourceSet} based on a JAR file.
  */
-public class JarResourceSet extends AbstractArchiveResourceSet {
+public class JarResourceSet extends AbstractSingleArchiveResourceSet {
 
     /**
      * A no argument constructor is required for this to work with the digester.
@@ -41,6 +33,7 @@ public class JarResourceSet extends AbstractArchiveResourceSet {
     public JarResourceSet() {
     }
 
+
     /**
      * Creates a new {@link org.apache.catalina.WebResourceSet} based on a JAR
      * file.
@@ -63,86 +56,13 @@ public class JarResourceSet extends AbstractArchiveResourceSet {
      */
     public JarResourceSet(WebResourceRoot root, String webAppMount, String base,
             String internalPath) throws IllegalArgumentException {
-        setRoot(root);
-        setWebAppMount(webAppMount);
-        setBase(base);
-        setInternalPath(internalPath);
-
-        if (getRoot().getState().isAvailable()) {
-            try {
-                start();
-            } catch (LifecycleException e) {
-                throw new IllegalStateException(e);
-            }
-        }
+        super(root, webAppMount, base, internalPath);
     }
 
+
     @Override
     protected WebResource createArchiveResource(JarEntry jarEntry,
             String webAppPath, Manifest manifest) {
         return new JarResource(this, webAppPath, getBaseUrlString(), jarEntry);
     }
-
-
-    @Override
-    protected HashMap<String,JarEntry> getArchiveEntries(boolean single) {
-        synchronized (archiveLock) {
-            if (archiveEntries == null && !single) {
-                JarFile jarFile = null;
-                archiveEntries = new HashMap<>();
-                try {
-                    jarFile = openJarFile();
-                    Enumeration<JarEntry> entries = jarFile.entries();
-                    while (entries.hasMoreElements()) {
-                        JarEntry entry = entries.nextElement();
-                        archiveEntries.put(entry.getName(), entry);
-                    }
-                } catch (IOException ioe) {
-                    // Should never happen
-                    archiveEntries = null;
-                    throw new IllegalStateException(ioe);
-                } finally {
-                    if (jarFile != null) {
-                        closeJarFile();
-                    }
-                }
-            }
-            return archiveEntries;
-        }
-    }
-
-
-    @Override
-    protected JarEntry getArchiveEntry(String pathInArchive) {
-        JarFile jarFile = null;
-        try {
-            jarFile = openJarFile();
-            return jarFile.getJarEntry(pathInArchive);
-        } catch (IOException ioe) {
-            // Should never happen
-            throw new IllegalStateException(ioe);
-        } finally {
-            if (jarFile != null) {
-                closeJarFile();
-            }
-        }
-    }
-
-
-    //-------------------------------------------------------- Lifecycle methods
-    @Override
-    protected void initInternal() throws LifecycleException {
-
-        try (JarFile jarFile = new JarFile(getBase())) {
-            setManifest(jarFile.getManifest());
-        } catch (IOException ioe) {
-            throw new IllegalArgumentException(ioe);
-        }
-
-        try {
-            setBaseUrl(UriUtil.buildJarSafeUrl(new File(getBase())));
-        } catch (MalformedURLException e) {
-            throw new IllegalArgumentException(e);
-        }
-    }
 }

==================================================
StandardRoot.java
index 29df484599..036378e04b 100644
--- a/java/org/apache/catalina/webresources/JarWarResource.java
+++ b/java/org/apache/catalina/webresources/JarWarResource.java
@@ -37,8 +37,9 @@ public class JarWarResource extends AbstractArchiveResource {
 
     public JarWarResource(AbstractArchiveResourceSet archiveResourceSet, String webAppPath,
             String baseUrl, JarEntry jarEntry, String archivePath) {
-        super(archiveResourceSet, webAppPath, "jar:war:" + baseUrl + "*/" + archivePath,
-                jarEntry, "jar:" + baseUrl + "!/" + archivePath);
+
+        super(archiveResourceSet, webAppPath, "jar:war:" + baseUrl + "*/" + archivePath + "!/",
+                jarEntry, "war:" + baseUrl + "*/" + archivePath);
         this.archivePath = archivePath;
     }
 

==================================================
WarResource.java
index 509c643166..12999381c3 100644
--- a/java/org/apache/catalina/webresources/StandardRoot.java
+++ b/java/org/apache/catalina/webresources/StandardRoot.java
@@ -727,7 +727,7 @@ public class StandardRoot extends LifecycleMBeanBase implements WebResourceRoot
             if (f.isDirectory()) {
                 mainResourceSet = new DirResourceSet(this, "/", f.getAbsolutePath(), "/");
             } else if(f.isFile() && docBase.endsWith(".war")) {
-                mainResourceSet = new JarResourceSet(this, "/", f.getAbsolutePath(), "/");
+                mainResourceSet = new WarResourceSet(this, "/", f.getAbsolutePath());
             } else {
                 throw new IllegalArgumentException(
                         sm.getString("standardRoot.startInvalidMain",
@@ -800,9 +800,14 @@ public class StandardRoot extends LifecycleMBeanBase implements WebResourceRoot
         BaseLocation(URL url) {
             File f = null;
 
-            if ("jar".equals(url.getProtocol())) {
+            if ("jar".equals(url.getProtocol()) || "war".equals(url.getProtocol())) {
                 String jarUrl = url.toString();
-                int endOfFileUrl = jarUrl.indexOf("!/");
+                int endOfFileUrl = -1;
+                if ("jar".equals(url.getProtocol())) {
+                    endOfFileUrl = jarUrl.indexOf("!/");
+                } else {
+                    endOfFileUrl = jarUrl.indexOf("*/");
+                }
                 String fileUrl = jarUrl.substring(4, endOfFileUrl);
                 try {
                     f = new File(new URL(fileUrl).toURI());

==================================================
WarResourceSet.java
new file mode 100644
index 0000000000..76ff38cae0
--- /dev/null
+++ b/java/org/apache/catalina/webresources/WarResource.java
@@ -0,0 +1,59 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.webresources;
+
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.jar.JarEntry;
+
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+
+/**
+ * Represents a single resource (file or directory) that is located within a
+ * WAR.
+ */
+public class WarResource extends AbstractSingleArchiveResource {
+
+    private static final Log log = LogFactory.getLog(WarResource.class);
+
+
+    public WarResource(AbstractArchiveResourceSet archiveResourceSet, String webAppPath,
+            String baseUrl, JarEntry jarEntry) {
+        super(archiveResourceSet, webAppPath, "war:" + baseUrl, jarEntry, baseUrl);
+    }
+
+
+    @Override
+    public URL getURL() {
+        String url = getBaseUrl() + "*/" + getResource().getName();
+        try {
+            return new URL(url);
+        } catch (MalformedURLException e) {
+            if (getLog().isDebugEnabled()) {
+                getLog().debug(sm.getString("fileResource.getUrlFail", url), e);
+            }
+            return null;
+        }
+    }
+
+
+    @Override
+    protected Log getLog() {
+        return log;
+    }
+}

==================================================
