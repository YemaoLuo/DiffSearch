7bf526a3f6de880aff9715d3f9bd7fef17b679a8
==================================================
Add i18n for the loader package.
==================================================
Remy Maucherat
==================================================
Wed Dec 5 16:37:42 2018 +0000
==================================================
WebappClassLoaderBase.java
index cea4b464fd..9175cb35ce 100644
--- a/java/org/apache/catalina/loader/LocalStrings.properties
+++ b/java/org/apache/catalina/loader/LocalStrings.properties
@@ -46,6 +46,8 @@ webappClassLoader.loadedByThisOrChildFail=Failed to fully check the entries in a
 webappClassLoader.readError=Resource read error: Could not load [{0}].
 webappClassLoader.removeTransformer=Removed class file transformer [{0}] from web application [{1}].
 webappClassLoader.resourceModified=Resource [{0}] has been modified. The last modified time was [{1}] and is now [{2}]
+webappClassLoader.restrictedPackage=Security violation, attempt to use restricted class [{0}]
+webappClassLoader.securityException=Security exception trying to find class [{0}] in findClassInternal [{1}]
 webappClassLoader.stackTrace=The web application [{0}] appears to have started a thread named [{1}] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:{2}
 webappClassLoader.stackTraceRequestThread=The web application [{0}] is still processing a request that has yet to finish. This is very likely to create a memory leak. You can control the time allowed for requests to finish by using the unloadDelay attribute of the standard Context implementation. Stack trace of request processing thread:[{2}]
 webappClassLoader.stopThreadFail=Failed to terminate thread named [{0}] for web application [{1}]
@@ -64,8 +66,12 @@ webappLoader.copyFailure=Failed to copy resources
 webappLoader.deploy=Deploying class repositories to work directory [{0}]
 webappLoader.jarDeploy=Deploy JAR [{0}] to [{1}]
 webappLoader.mkdirFailure=Failed to create destination directory to copy resources
+webappLoader.noResources=No resources found for context [{0}]
 webappLoader.readFailure=Unable to read resource [{0}]
 webappLoader.reloadable=Cannot set reloadable property to [{0}]
 webappLoader.setContext.ise=Setting the Context is not permitted while the loader is started.
+webappLoader.startError=Error starting the loader
 webappLoader.starting=Starting this Loader
+webappLoader.stopError=Error stopping the loader
 webappLoader.stopping=Stopping this Loader
+webappLoader.unknownClassLoader=Unknown class loader [{0}] of class [{1}]

==================================================
WebappLoader.java
index 3c4fcd183e..6c615800f3 100644
--- a/java/org/apache/catalina/loader/WebappClassLoaderBase.java
+++ b/java/org/apache/catalina/loader/WebappClassLoaderBase.java
@@ -850,8 +850,8 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
                     clazz = findClassInternal(name);
                 }
             } catch(AccessControlException ace) {
-                log.warn("WebappClassLoader.findClassInternal(" + name
-                        + ") security exception: " + ace.getMessage(), ace);
+                log.warn(sm.getString("webappClassLoader.securityException", name,
+                        ace.getMessage()), ace);
                 throw new ClassNotFoundException(name, ace);
             } catch (RuntimeException e) {
                 if (log.isTraceEnabled())
@@ -862,8 +862,8 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
                 try {
                     clazz = super.findClass(name);
                 } catch(AccessControlException ace) {
-                    log.warn("WebappClassLoader.findClassInternal(" + name
-                            + ") security exception: " + ace.getMessage(), ace);
+                    log.warn(sm.getString("webappClassLoader.securityException", name,
+                            ace.getMessage()), ace);
                     throw new ClassNotFoundException(name, ace);
                 } catch (RuntimeException e) {
                     if (log.isTraceEnabled())
@@ -1278,8 +1278,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
                     try {
                         securityManager.checkPackageAccess(name.substring(0,i));
                     } catch (SecurityException se) {
-                        String error = "Security Violation, attempt to use " +
-                            "Restricted Class: " + name;
+                        String error = sm.getString("webappClassLoader.restrictedPackage", name);
                         log.info(error, se);
                         throw new ClassNotFoundException(error, se);
                     }

==================================================
