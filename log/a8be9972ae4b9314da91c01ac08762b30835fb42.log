a8be9972ae4b9314da91c01ac08762b30835fb42
==================================================
Remove all usage of GPL or LGPL downloads.
==================================================
Filip Hanik
==================================================
Mon Jun 29 17:38:21 2009 +0000
==================================================
CheckOutThreadTest.java
index a058f36d8c..d60e2bd262 100755
--- a/modules/jdbc-pool/sign.sh
+++ b/modules/jdbc-pool/sign.sh
@@ -15,7 +15,7 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-VERSION=v1.0.5
+VERSION=v1.0.6
 for i in $(find output/release/$VERSION -name "*.zip" -o -name "*.tar.gz"); do
   echo Signing $i
   echo $1|gpg --passphrase-fd 0 -a -b $i

==================================================
ConnectCountTest.java
index 93e7ef1c2b..9b859c61c9 100644
--- a/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/CheckOutThreadTest.java
+++ b/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/CheckOutThreadTest.java
@@ -97,25 +97,25 @@ public class CheckOutThreadTest extends DefaultTestCase {
         tearDown();
     }
 
-    public void testC3P0Threads10Connections10() throws Exception {
-        init();
-        this.datasource.getPoolProperties().setMaxActive(10);
-        this.threadcount = 10;
-        this.transferPropertiesToC3P0();
-        this.c3p0Datasource.getConnection().close();
-        latch = new CountDownLatch(threadcount);
-        long start = System.currentTimeMillis();
-        for (int i=0; i<threadcount; i++) {
-            TestThread t = new TestThread();
-            t.setName("tomcat-pool-"+i);
-            t.d = this.c3p0Datasource;
-            t.start();
-        }
-        latch.await();
-        long delta = System.currentTimeMillis() - start;
-        System.out.println("[testC3P0Threads10Connections10]Test complete:"+delta+" ms. Iterations:"+(threadcount*this.iterations));
-        tearDown();
-    }
+//    public void testC3P0Threads10Connections10() throws Exception {
+//        init();
+//        this.datasource.getPoolProperties().setMaxActive(10);
+//        this.threadcount = 10;
+//        this.transferPropertiesToC3P0();
+//        this.c3p0Datasource.getConnection().close();
+//        latch = new CountDownLatch(threadcount);
+//        long start = System.currentTimeMillis();
+//        for (int i=0; i<threadcount; i++) {
+//            TestThread t = new TestThread();
+//            t.setName("tomcat-pool-"+i);
+//            t.d = this.c3p0Datasource;
+//            t.start();
+//        }
+//        latch.await();
+//        long delta = System.currentTimeMillis() - start;
+//        System.out.println("[testC3P0Threads10Connections10]Test complete:"+delta+" ms. Iterations:"+(threadcount*this.iterations));
+//        tearDown();
+//    }
 
     public void testDBCPThreads20Connections10() throws Exception {
         init();
@@ -179,25 +179,25 @@ public class CheckOutThreadTest extends DefaultTestCase {
         tearDown();
     }
 
-    public void testC3P0Threads20Connections10() throws Exception {
-        init();
-        this.datasource.getPoolProperties().setMaxActive(10);
-        this.threadcount = 20;
-        this.transferPropertiesToC3P0();
-        this.c3p0Datasource.getConnection().close();
-        latch = new CountDownLatch(threadcount);
-        long start = System.currentTimeMillis();
-        for (int i=0; i<threadcount; i++) {
-            TestThread t = new TestThread();
-            t.setName("tomcat-pool-"+i);
-            t.d = this.c3p0Datasource;
-            t.start();
-        }
-        latch.await();
-        long delta = System.currentTimeMillis() - start;
-        System.out.println("[testC3P0Threads20Connections10]Test complete:"+delta+" ms. Iterations:"+(threadcount*this.iterations));
-        tearDown();
-    }
+//    public void testC3P0Threads20Connections10() throws Exception {
+//        init();
+//        this.datasource.getPoolProperties().setMaxActive(10);
+//        this.threadcount = 20;
+//        this.transferPropertiesToC3P0();
+//        this.c3p0Datasource.getConnection().close();
+//        latch = new CountDownLatch(threadcount);
+//        long start = System.currentTimeMillis();
+//        for (int i=0; i<threadcount; i++) {
+//            TestThread t = new TestThread();
+//            t.setName("tomcat-pool-"+i);
+//            t.d = this.c3p0Datasource;
+//            t.start();
+//        }
+//        latch.await();
+//        long delta = System.currentTimeMillis() - start;
+//        System.out.println("[testC3P0Threads20Connections10]Test complete:"+delta+" ms. Iterations:"+(threadcount*this.iterations));
+//        tearDown();
+//    }
     
     public void testDBCPThreads10Connections10Validate() throws Exception {
         init();
@@ -264,26 +264,26 @@ public class CheckOutThreadTest extends DefaultTestCase {
         tearDown();
     }
 
-    public void testC3P0Threads10Connections10Validate() throws Exception {
-        init();
-        this.datasource.getPoolProperties().setMaxActive(10);
-        this.datasource.getPoolProperties().setTestOnBorrow(true);
-        this.threadcount = 10;
-        this.transferPropertiesToC3P0();
-        this.c3p0Datasource.getConnection().close();
-        latch = new CountDownLatch(threadcount);
-        long start = System.currentTimeMillis();
-        for (int i=0; i<threadcount; i++) {
-            TestThread t = new TestThread();
-            t.setName("tomcat-pool-validate-"+i);
-            t.d = this.c3p0Datasource;
-            t.start();
-        }
-        latch.await();
-        long delta = System.currentTimeMillis() - start;
-        System.out.println("[testC3P0Threads10Connections10Validate]Test complete:"+delta+" ms. Iterations:"+(threadcount*this.iterations));
-        tearDown();
-    }
+//    public void testC3P0Threads10Connections10Validate() throws Exception {
+//        init();
+//        this.datasource.getPoolProperties().setMaxActive(10);
+//        this.datasource.getPoolProperties().setTestOnBorrow(true);
+//        this.threadcount = 10;
+//        this.transferPropertiesToC3P0();
+//        this.c3p0Datasource.getConnection().close();
+//        latch = new CountDownLatch(threadcount);
+//        long start = System.currentTimeMillis();
+//        for (int i=0; i<threadcount; i++) {
+//            TestThread t = new TestThread();
+//            t.setName("tomcat-pool-validate-"+i);
+//            t.d = this.c3p0Datasource;
+//            t.start();
+//        }
+//        latch.await();
+//        long delta = System.currentTimeMillis() - start;
+//        System.out.println("[testC3P0Threads10Connections10Validate]Test complete:"+delta+" ms. Iterations:"+(threadcount*this.iterations));
+//        tearDown();
+//    }
 
     public void testDBCPThreads20Connections10Validate() throws Exception {
         init();
@@ -350,26 +350,26 @@ public class CheckOutThreadTest extends DefaultTestCase {
         tearDown();
     }
     
-    public void testC3P0Threads10Connections20Validate() throws Exception {
-        init();
-        this.datasource.getPoolProperties().setMaxActive(10);
-        this.datasource.getPoolProperties().setTestOnBorrow(true);
-        this.threadcount = 20;
-        this.transferPropertiesToC3P0();
-        this.c3p0Datasource.getConnection().close();
-        latch = new CountDownLatch(threadcount);
-        long start = System.currentTimeMillis();
-        for (int i=0; i<threadcount; i++) {
-            TestThread t = new TestThread();
-            t.setName("tomcat-pool-validate-"+i);
-            t.d = this.c3p0Datasource;
-            t.start();
-        }
-        latch.await();
-        long delta = System.currentTimeMillis() - start;
-        System.out.println("[testC3P0Threads10Connections20Validate]Test complete:"+delta+" ms. Iterations:"+(threadcount*this.iterations));
-        tearDown();
-    }
+//    public void testC3P0Threads10Connections20Validate() throws Exception {
+//        init();
+//        this.datasource.getPoolProperties().setMaxActive(10);
+//        this.datasource.getPoolProperties().setTestOnBorrow(true);
+//        this.threadcount = 20;
+//        this.transferPropertiesToC3P0();
+//        this.c3p0Datasource.getConnection().close();
+//        latch = new CountDownLatch(threadcount);
+//        long start = System.currentTimeMillis();
+//        for (int i=0; i<threadcount; i++) {
+//            TestThread t = new TestThread();
+//            t.setName("tomcat-pool-validate-"+i);
+//            t.d = this.c3p0Datasource;
+//            t.start();
+//        }
+//        latch.await();
+//        long delta = System.currentTimeMillis() - start;
+//        System.out.println("[testC3P0Threads10Connections20Validate]Test complete:"+delta+" ms. Iterations:"+(threadcount*this.iterations));
+//        tearDown();
+//    }
 
     public class TestThread extends Thread {
         protected DataSource d;

==================================================
CreateTestTable.java
index 8c2d55240c..61183293b6 100644
--- a/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/ConnectCountTest.java
+++ b/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/ConnectCountTest.java
@@ -204,33 +204,33 @@ public class ConnectCountTest extends DefaultTestCase {
         tearDown();
     }
     
-    public void testC3P0Threads20Connections10() throws Exception {
-        System.out.println("[testC3P0Threads20Connections10] Starting fairness - C3P0");
-        init();
-        this.threadcount = 20;
-        this.transferPropertiesToC3P0();
-        this.datasource.getConnection().close();
-        latch = new CountDownLatch(threadcount);
-        long start = System.currentTimeMillis();
-        TestThread[] threads = new TestThread[threadcount];
-        for (int i=0; i<threadcount; i++) {
-            threads[i] = new TestThread();
-            threads[i].setName("tomcat-pool-"+i);
-            threads[i].d = this.c3p0Datasource;
-            
-        }
-        for (int i=0; i<threadcount; i++) {
-            threads[i].start();
-        }
-        if (!latch.await(complete+1000,TimeUnit.MILLISECONDS)) {
-            System.out.println("Latch timed out.");
-        }
-        this.run = false;
-        long delta = System.currentTimeMillis() - start;
-        printThreadResults(threads,"testC3P0Threads20Connections10",Driver.connectCount.get(),10);
-        tearDown();
-
-    }
+//    public void testC3P0Threads20Connections10() throws Exception {
+//        System.out.println("[testC3P0Threads20Connections10] Starting fairness - C3P0");
+//        init();
+//        this.threadcount = 20;
+//        this.transferPropertiesToC3P0();
+//        this.datasource.getConnection().close();
+//        latch = new CountDownLatch(threadcount);
+//        long start = System.currentTimeMillis();
+//        TestThread[] threads = new TestThread[threadcount];
+//        for (int i=0; i<threadcount; i++) {
+//            threads[i] = new TestThread();
+//            threads[i].setName("tomcat-pool-"+i);
+//            threads[i].d = this.c3p0Datasource;
+//            
+//        }
+//        for (int i=0; i<threadcount; i++) {
+//            threads[i].start();
+//        }
+//        if (!latch.await(complete+1000,TimeUnit.MILLISECONDS)) {
+//            System.out.println("Latch timed out.");
+//        }
+//        this.run = false;
+//        long delta = System.currentTimeMillis() - start;
+//        printThreadResults(threads,"testC3P0Threads20Connections10",Driver.connectCount.get(),10);
+//        tearDown();
+//
+//    }
 
     
     public class TestThread extends Thread {

==================================================
DefaultProperties.java
index 341a34ab37..b59c21196b 100644
--- a/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/CreateTestTable.java
+++ b/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/CreateTestTable.java
@@ -21,27 +21,59 @@ import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.Statement;
 import java.util.Random;
-
-
+import java.sql.ResultSet;
 
 public class CreateTestTable extends DefaultTestCase {
-
+    
+    public static final boolean recreate = Boolean.getBoolean("recreate");
+    
     public CreateTestTable(String name) {
         super(name);
     }
     
-    public void testPopulateData() throws Exception {
-        String insert = "insert into test values (?,?,?,?,?)";
+    public void testCreateTestTable() throws Exception {
         this.init();
         Connection con = datasource.getConnection();
         Statement st = con.createStatement();
         try {
-            st.execute("drop table test");
+            st.execute("create table test(id int not null, val1 varchar(255), val2 varchar(255), val3 varchar(255), val4 varchar(255))");
         }catch (Exception ignore) {}
-        st.execute("create table test(id int not null, val1 varchar(255), val2 varchar(255), val3 varchar(255), val4 varchar(255))");
         st.close();
+        con.close();
+    }
+    
+    public int testCheckData() throws Exception {
+        int count = 0;
+        String check = "select count (*) from test";
+        this.init();
+        Connection con = datasource.getConnection();
+        Statement st = con.createStatement();
+        try {
+            ResultSet rs = st.executeQuery(check);
+            
+            if (rs.next())
+                count = rs.getInt(1);
+            System.out.println("Count:"+count);
+        }catch (Exception ignore) {}
+        return count;
+    }
+    
+    public void testPopulateData() throws Exception {
+        String insert = "insert into test values (?,?,?,?,?)";
+        this.init();
+        this.datasource.setRemoveAbandoned(false);
+        Connection con = datasource.getConnection();
+        if (recreate) {
+            Statement st = con.createStatement();
+            try {
+                st.execute("drop table test");
+            }catch (Exception ignore) {}
+            st.execute("create table test(id int not null, val1 varchar(255), val2 varchar(255), val3 varchar(255), val4 varchar(255))");
+            st.close();
+        }
         PreparedStatement ps = con.prepareStatement(insert);
-        for (int i=0; i<10000000; i++) {
+        ps.setQueryTimeout(0);
+        for (int i=testCheckData(); i<1000000; i++) {
             ps.setInt(1,i);
             String s = getRandom();
             ps.setString(2, s);
@@ -56,7 +88,8 @@ public class CreateTestTable extends DefaultTestCase {
             if ((i+1) % 10000 == 0) {
                 System.out.print("\n"+(i+1));
                 ps.executeBatch();
-                ps.clearBatch();
+                ps.close();
+                ps = con.prepareStatement(insert);
             }
 
         }

==================================================
DefaultTestCase.java
index 61ba2232e2..3158edb746 100644
--- a/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/DefaultProperties.java
+++ b/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/DefaultProperties.java
@@ -29,8 +29,18 @@ public class DefaultProperties extends PoolProperties {
     public DefaultProperties() {
         dbProperties = new Properties();
         
-        url = System.getProperty("url","jdbc:mysql://localhost:3306/mysql?autoReconnect=true");
-        driverClassName = System.getProperty("driverClassName","com.mysql.jdbc.Driver");
+        //mysql
+        //url = System.getProperty("url","jdbc:mysql://localhost:3306/mysql?autoReconnect=true"); 
+        //driverClassName = System.getProperty("driverClassName","com.mysql.jdbc.Driver");
+        
+        //derby
+        //url = System.getProperty("url","jdbc:derby:derbyDB;create=true");
+        //driverClassName = System.getProperty("driverClassName","org.apache.derby.jdbc.EmbeddedDriver");
+        
+        url = System.getProperty("url","jdbc:h2:~/.h2/test;QUERY_TIMEOUT=0;DB_CLOSE_ON_EXIT=FALSE");
+        driverClassName = System.getProperty("driverClassName","org.h2.Driver");
+        System.setProperty("h2.serverCachedObjects", "10000");
+        
         password = System.getProperty("password","password");
         username = System.getProperty("username","root");
         

==================================================
FairnessTest.java
index f24036d68e..67e5e56064 100644
--- a/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/DefaultTestCase.java
+++ b/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/DefaultTestCase.java
@@ -28,9 +28,9 @@ import junit.framework.TestCase;
 import org.apache.tomcat.jdbc.pool.PoolProperties;
 import org.apache.tomcat.jdbc.pool.DataSourceProxy;
 
-import com.mchange.v2.c3p0.ComboPooledDataSource;
-import com.mchange.v2.log.MLevel;
-import com.mchange.v2.log.MLog;
+//import com.mchange.v2.c3p0.ComboPooledDataSource;
+//import com.mchange.v2.log.MLevel;
+//import com.mchange.v2.log.MLog;
 
 /**
  * @author Filip Hanik
@@ -39,7 +39,7 @@ import com.mchange.v2.log.MLog;
 public class DefaultTestCase extends TestCase {
     protected org.apache.tomcat.jdbc.pool.DataSource datasource;
     protected BasicDataSource tDatasource;
-    protected ComboPooledDataSource c3p0Datasource;
+//    protected ComboPooledDataSource c3p0Datasource;
     protected int threadcount = 10;
     protected int iterations = 100000;
     public DefaultTestCase(String name) {
@@ -104,32 +104,32 @@ public class DefaultTestCase extends TestCase {
     }
     
     protected void transferPropertiesToC3P0() throws Exception {
-        System.setProperty("com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL", "WARNING");
-        MLog.getLogger().setLevel(MLevel.WARNING);
-        MLog.getLogger("com").setLevel(MLevel.WARNING);
-        //http://www.mchange.com/projects/c3p0/index.html#automaticTestTable
-        ComboPooledDataSource c3p0 = new ComboPooledDataSource();  
-        c3p0.setAcquireIncrement(1);
-        c3p0.setAcquireRetryAttempts(2);
-        c3p0.setAcquireRetryDelay(datasource.getPoolProperties().getMaxWait());
-        c3p0.setCheckoutTimeout(datasource.getPoolProperties().getMaxWait());
-        c3p0.setDebugUnreturnedConnectionStackTraces(datasource.getPoolProperties().isLogAbandoned());
-        c3p0.setIdleConnectionTestPeriod(datasource.getPoolProperties().getTimeBetweenEvictionRunsMillis()/1000);
-        c3p0.setInitialPoolSize(datasource.getPoolProperties().getInitialSize());
-        c3p0.setMaxIdleTime(datasource.getPoolProperties().getMinEvictableIdleTimeMillis()/1000);
-        c3p0.setMaxIdleTimeExcessConnections(datasource.getPoolProperties().getMaxIdle());
-        c3p0.setMaxPoolSize(datasource.getPoolProperties().getMaxActive());
-        c3p0.setMinPoolSize(datasource.getPoolProperties().getMinIdle());
-        c3p0.setPassword(datasource.getPoolProperties().getPassword());
-        c3p0.setPreferredTestQuery(datasource.getPoolProperties().getValidationQuery());
-        c3p0.setTestConnectionOnCheckin(datasource.getPoolProperties().isTestOnReturn());
-        c3p0.setTestConnectionOnCheckout(datasource.getPoolProperties().isTestOnBorrow());
-        c3p0.setUnreturnedConnectionTimeout(datasource.getPoolProperties().getRemoveAbandonedTimeout());
-        c3p0.setUser(datasource.getPoolProperties().getUsername());
-        c3p0.setUsesTraditionalReflectiveProxies(true);
-        c3p0.setJdbcUrl(datasource.getPoolProperties().getUrl());
-        c3p0.setDriverClass(datasource.getPoolProperties().getDriverClassName());
-        this.c3p0Datasource = c3p0;
+//        System.setProperty("com.mchange.v2.log.FallbackMLog.DEFAULT_CUTOFF_LEVEL", "WARNING");
+//        MLog.getLogger().setLevel(MLevel.WARNING);
+//        MLog.getLogger("com").setLevel(MLevel.WARNING);
+//        //http://www.mchange.com/projects/c3p0/index.html#automaticTestTable
+//        ComboPooledDataSource c3p0 = new ComboPooledDataSource();  
+//        c3p0.setAcquireIncrement(1);
+//        c3p0.setAcquireRetryAttempts(2);
+//        c3p0.setAcquireRetryDelay(datasource.getPoolProperties().getMaxWait());
+//        c3p0.setCheckoutTimeout(datasource.getPoolProperties().getMaxWait());
+//        c3p0.setDebugUnreturnedConnectionStackTraces(datasource.getPoolProperties().isLogAbandoned());
+//        c3p0.setIdleConnectionTestPeriod(datasource.getPoolProperties().getTimeBetweenEvictionRunsMillis()/1000);
+//        c3p0.setInitialPoolSize(datasource.getPoolProperties().getInitialSize());
+//        c3p0.setMaxIdleTime(datasource.getPoolProperties().getMinEvictableIdleTimeMillis()/1000);
+//        c3p0.setMaxIdleTimeExcessConnections(datasource.getPoolProperties().getMaxIdle());
+//        c3p0.setMaxPoolSize(datasource.getPoolProperties().getMaxActive());
+//        c3p0.setMinPoolSize(datasource.getPoolProperties().getMinIdle());
+//        c3p0.setPassword(datasource.getPoolProperties().getPassword());
+//        c3p0.setPreferredTestQuery(datasource.getPoolProperties().getValidationQuery());
+//        c3p0.setTestConnectionOnCheckin(datasource.getPoolProperties().isTestOnReturn());
+//        c3p0.setTestConnectionOnCheckout(datasource.getPoolProperties().isTestOnBorrow());
+//        c3p0.setUnreturnedConnectionTimeout(datasource.getPoolProperties().getRemoveAbandonedTimeout());
+//        c3p0.setUser(datasource.getPoolProperties().getUsername());
+//        c3p0.setUsesTraditionalReflectiveProxies(true);
+//        c3p0.setJdbcUrl(datasource.getPoolProperties().getUrl());
+//        c3p0.setDriverClass(datasource.getPoolProperties().getDriverClassName());
+//        this.c3p0Datasource = c3p0;
         
       /**
         acquireIncrement
@@ -172,10 +172,10 @@ public class DefaultTestCase extends TestCase {
     protected void tearDown() throws Exception {
         try {datasource.close();}catch(Exception ignore){}
         try {tDatasource.close();}catch(Exception ignore){}
-        try {((ComboPooledDataSource)c3p0Datasource).close(true);}catch(Exception ignore){}
+        //try {((ComboPooledDataSource)c3p0Datasource).close(true);}catch(Exception ignore){}
         datasource = null;
         tDatasource = null;
-        c3p0Datasource = null;
+        //c3p0Datasource = null;
         System.gc();
     }
 

==================================================
StarvationTest.java
index 5f87fea897..9f7164e70a 100644
--- a/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/FairnessTest.java
+++ b/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/FairnessTest.java
@@ -181,35 +181,35 @@ public class FairnessTest extends DefaultTestCase {
         tearDown();
     }
     
-    public void testC3P0Threads20Connections10() throws Exception {
-        System.out.println("[testC3P0Threads20Connections10] Starting fairness - C3P0");
-        init();
-        this.datasource.getPoolProperties().setMaxActive(10);
-        this.datasource.getPoolProperties().setFairQueue(false);
-        this.threadcount = 20;
-        this.transferPropertiesToC3P0();
-        this.datasource.getConnection().close();
-        latch = new CountDownLatch(threadcount);
-        long start = System.currentTimeMillis();
-        TestThread[] threads = new TestThread[threadcount];
-        for (int i=0; i<threadcount; i++) {
-            threads[i] = new TestThread();
-            threads[i].setName("tomcat-pool-"+i);
-            threads[i].d = this.c3p0Datasource;
-            
-        }
-        for (int i=0; i<threadcount; i++) {
-            threads[i].start();
-        }
-        if (!latch.await(complete+1000,TimeUnit.MILLISECONDS)) {
-            System.out.println("Latch timed out.");
-        }
-        this.run = false;
-        long delta = System.currentTimeMillis() - start;
-        printThreadResults(threads,"testC3P0Threads20Connections10",c3p0Datasource.getNumConnectionsAllUsers(),10);
-        tearDown();
-
-    }
+//    public void testC3P0Threads20Connections10() throws Exception {
+//        System.out.println("[testC3P0Threads20Connections10] Starting fairness - C3P0");
+//        init();
+//        this.datasource.getPoolProperties().setMaxActive(10);
+//        this.datasource.getPoolProperties().setFairQueue(false);
+//        this.threadcount = 20;
+//        this.transferPropertiesToC3P0();
+//        this.datasource.getConnection().close();
+//        latch = new CountDownLatch(threadcount);
+//        long start = System.currentTimeMillis();
+//        TestThread[] threads = new TestThread[threadcount];
+//        for (int i=0; i<threadcount; i++) {
+//            threads[i] = new TestThread();
+//            threads[i].setName("tomcat-pool-"+i);
+//            threads[i].d = this.c3p0Datasource;
+//            
+//        }
+//        for (int i=0; i<threadcount; i++) {
+//            threads[i].start();
+//        }
+//        if (!latch.await(complete+1000,TimeUnit.MILLISECONDS)) {
+//            System.out.println("Latch timed out.");
+//        }
+//        this.run = false;
+//        long delta = System.currentTimeMillis() - start;
+//        printThreadResults(threads,"testC3P0Threads20Connections10",c3p0Datasource.getNumConnectionsAllUsers(),10);
+//        tearDown();
+//
+//    }
 
     
     public class TestThread extends Thread {

==================================================
