02a8928e1a189f032a3309b12aad869301040d50
==================================================
Tabs to 8 spaces - no functional change
==================================================
Mark Emlyn
==================================================
Sat Mar 6 09:34:08 2010 +0000
==================================================
ClusterSingleSignOn.java
Tabs to 8 spaces - no functional change

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@919724 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ClusterSingleSignOnListener.java
index 3e627c7186..8e82a61e2a 100644
--- a/java/org/apache/catalina/ha/authenticator/ClusterSingleSignOn.java
+++ b/java/org/apache/catalina/ha/authenticator/ClusterSingleSignOn.java
@@ -124,24 +124,24 @@ public class ClusterSingleSignOn
             Cluster cluster = getCluster();
             // stop remove cluster binding
             if(cluster == null) {
-		Container host = getContainer();
-		if(host != null && host instanceof Host) {
-		    cluster = host.getCluster();
-		    if(cluster != null && cluster instanceof CatalinaCluster) {
-			setCluster((CatalinaCluster) cluster);
-			getCluster().addClusterListener(clusterSSOListener);
-		    } else {
-			Container engine = host.getParent();
-			if(engine != null && engine instanceof Engine) {
-			    cluster = engine.getCluster();
-			    if(cluster != null && cluster instanceof CatalinaCluster) {
-				setCluster((CatalinaCluster) cluster);
-				getCluster().addClusterListener(clusterSSOListener);
-			    }
-			} else {
-			    cluster = null;
-			}
-		    }
+                Container host = getContainer();
+                if(host != null && host instanceof Host) {
+                    cluster = host.getCluster();
+                    if(cluster != null && cluster instanceof CatalinaCluster) {
+                        setCluster((CatalinaCluster) cluster);
+                        getCluster().addClusterListener(clusterSSOListener);
+                    } else {
+                        Container engine = host.getParent();
+                        if(engine != null && engine instanceof Engine) {
+                            cluster = engine.getCluster();
+                            if(cluster != null && cluster instanceof CatalinaCluster) {
+                                setCluster((CatalinaCluster) cluster);
+                                getCluster().addClusterListener(clusterSSOListener);
+                            }
+                        } else {
+                            cluster = null;
+                        }
+                    }
                 }
             }
             if (cluster == null) {
@@ -190,31 +190,31 @@ public class ClusterSingleSignOn
     @Override
     protected void associate(String ssoId, Session session) {
 
-	if (cluster != null) {
-	    messageNumber++;
-	    SingleSignOnMessage msg =
-		new SingleSignOnMessage(cluster.getLocalMember(),
-					ssoId, session.getId());
-	    Manager mgr = session.getManager();
-	    if ((mgr != null) && (mgr instanceof ClusterManager))
-		msg.setContextName(((ClusterManager) mgr).getName());
+        if (cluster != null) {
+            messageNumber++;
+            SingleSignOnMessage msg =
+                new SingleSignOnMessage(cluster.getLocalMember(),
+                                        ssoId, session.getId());
+            Manager mgr = session.getManager();
+            if ((mgr != null) && (mgr instanceof ClusterManager))
+                msg.setContextName(((ClusterManager) mgr).getName());
 
-	    msg.setAction(SingleSignOnMessage.ADD_SESSION);
+            msg.setAction(SingleSignOnMessage.ADD_SESSION);
 
-	    cluster.sendClusterDomain(msg);
+            cluster.sendClusterDomain(msg);
 
-	    if (containerLog.isDebugEnabled())
-		containerLog.debug("SingleSignOnMessage Send with action "
-				   + msg.getAction());
-	}
+            if (containerLog.isDebugEnabled())
+                containerLog.debug("SingleSignOnMessage Send with action "
+                                   + msg.getAction());
+        }
 
-	associateLocal(ssoId, session);
+        associateLocal(ssoId, session);
 
     }
 
     protected void associateLocal(String ssoId, Session session) {
 
-	super.associate(ssoId, session);
+        super.associate(ssoId, session);
 
     }
 
@@ -230,30 +230,30 @@ public class ClusterSingleSignOn
     @Override
     protected void deregister(String ssoId, Session session) {
 
-	if (cluster != null) {
-	    messageNumber++;
-	    SingleSignOnMessage msg =
-		new SingleSignOnMessage(cluster.getLocalMember(),
-					ssoId, session.getId());
-	    Manager mgr = session.getManager();
-	    if ((mgr != null) && (mgr instanceof ClusterManager))
-		msg.setContextName(((ClusterManager) mgr).getName());
-
-	    msg.setAction(SingleSignOnMessage.DEREGISTER_SESSION);
-
-	    cluster.sendClusterDomain(msg);
-	    if (containerLog.isDebugEnabled())
-		containerLog.debug("SingleSignOnMessage Send with action "
-				   + msg.getAction());
-	}
+        if (cluster != null) {
+            messageNumber++;
+            SingleSignOnMessage msg =
+                new SingleSignOnMessage(cluster.getLocalMember(),
+                                        ssoId, session.getId());
+            Manager mgr = session.getManager();
+            if ((mgr != null) && (mgr instanceof ClusterManager))
+                msg.setContextName(((ClusterManager) mgr).getName());
+
+            msg.setAction(SingleSignOnMessage.DEREGISTER_SESSION);
+
+            cluster.sendClusterDomain(msg);
+            if (containerLog.isDebugEnabled())
+                containerLog.debug("SingleSignOnMessage Send with action "
+                                   + msg.getAction());
+        }
 
-	deregisterLocal(ssoId, session);
+        deregisterLocal(ssoId, session);
 
     }
 
     protected void deregisterLocal(String ssoId, Session session) {
 
-	super.deregister(ssoId, session);
+        super.deregister(ssoId, session);
 
     }
 
@@ -268,26 +268,26 @@ public class ClusterSingleSignOn
     @Override
     protected void deregister(String ssoId) {
 
-	if (cluster != null) {
-	    messageNumber++;
-	    SingleSignOnMessage msg =
-		new SingleSignOnMessage(cluster.getLocalMember(),
-					ssoId, null);
-	    msg.setAction(SingleSignOnMessage.LOGOUT_SESSION);
-
-	    cluster.sendClusterDomain(msg);
-	    if (containerLog.isDebugEnabled())
-		containerLog.debug("SingleSignOnMessage Send with action "
-				   + msg.getAction());
-	}
+        if (cluster != null) {
+            messageNumber++;
+            SingleSignOnMessage msg =
+                new SingleSignOnMessage(cluster.getLocalMember(),
+                                        ssoId, null);
+            msg.setAction(SingleSignOnMessage.LOGOUT_SESSION);
+
+            cluster.sendClusterDomain(msg);
+            if (containerLog.isDebugEnabled())
+                containerLog.debug("SingleSignOnMessage Send with action "
+                                   + msg.getAction());
+        }
 
-	deregisterLocal(ssoId);
+        deregisterLocal(ssoId);
 
     }
 
     protected void deregisterLocal(String ssoId) {
 
-	super.deregister(ssoId);
+        super.deregister(ssoId);
 
     }
 
@@ -307,30 +307,30 @@ public class ClusterSingleSignOn
     protected void register(String ssoId, Principal principal, String authType,
                   String username, String password) {
 
-	if (cluster != null) {
-	    messageNumber++;
-	    SingleSignOnMessage msg =
-		new SingleSignOnMessage(cluster.getLocalMember(),
-					ssoId, null);
-	    msg.setAction(SingleSignOnMessage.REGISTER_SESSION);
-	    msg.setAuthType(authType);
-	    msg.setUsername(username);
-	    msg.setPassword(password);
-
-	    cluster.sendClusterDomain(msg);
-	    if (containerLog.isDebugEnabled())
-		containerLog.debug("SingleSignOnMessage Send with action "
-				   + msg.getAction());
-	}
+        if (cluster != null) {
+            messageNumber++;
+            SingleSignOnMessage msg =
+                new SingleSignOnMessage(cluster.getLocalMember(),
+                                        ssoId, null);
+            msg.setAction(SingleSignOnMessage.REGISTER_SESSION);
+            msg.setAuthType(authType);
+            msg.setUsername(username);
+            msg.setPassword(password);
+
+            cluster.sendClusterDomain(msg);
+            if (containerLog.isDebugEnabled())
+                containerLog.debug("SingleSignOnMessage Send with action "
+                                   + msg.getAction());
+        }
 
-	registerLocal(ssoId, principal, authType, username, password);
+        registerLocal(ssoId, principal, authType, username, password);
 
     }
 
     protected void registerLocal(String ssoId, Principal principal, String authType,
                   String username, String password) {
 
-	super.register(ssoId, principal, authType, username, password);
+        super.register(ssoId, principal, authType, username, password);
 
     }
 
@@ -365,30 +365,30 @@ public class ClusterSingleSignOn
     protected void update(String ssoId, Principal principal, String authType,
                           String username, String password) {
 
-	if (cluster != null) {
-	    messageNumber++;
-	    SingleSignOnMessage msg =
-		new SingleSignOnMessage(cluster.getLocalMember(),
-					ssoId, null);
-	    msg.setAction(SingleSignOnMessage.UPDATE_SESSION);
-	    msg.setAuthType(authType);
-	    msg.setUsername(username);
-	    msg.setPassword(password);
-
-	    cluster.sendClusterDomain(msg);
-	    if (containerLog.isDebugEnabled())
-		containerLog.debug("SingleSignOnMessage Send with action "
-				   + msg.getAction());
-	}
+        if (cluster != null) {
+            messageNumber++;
+            SingleSignOnMessage msg =
+                new SingleSignOnMessage(cluster.getLocalMember(),
+                                        ssoId, null);
+            msg.setAction(SingleSignOnMessage.UPDATE_SESSION);
+            msg.setAuthType(authType);
+            msg.setUsername(username);
+            msg.setPassword(password);
+
+            cluster.sendClusterDomain(msg);
+            if (containerLog.isDebugEnabled())
+                containerLog.debug("SingleSignOnMessage Send with action "
+                                   + msg.getAction());
+        }
 
-	updateLocal(ssoId, principal, authType, username, password);
+        updateLocal(ssoId, principal, authType, username, password);
 
     }
 
     protected void updateLocal(String ssoId, Principal principal, String authType,
                           String username, String password) {
 
-	super.update(ssoId, principal, authType, username, password);
+        super.update(ssoId, principal, authType, username, password);
 
     }
 
@@ -403,31 +403,31 @@ public class ClusterSingleSignOn
     @Override
     protected void removeSession(String ssoId, Session session) {
 
-	if (cluster != null) {
-	    messageNumber++;
-	    SingleSignOnMessage msg =
-		new SingleSignOnMessage(cluster.getLocalMember(),
-					ssoId, session.getId());
+        if (cluster != null) {
+            messageNumber++;
+            SingleSignOnMessage msg =
+                new SingleSignOnMessage(cluster.getLocalMember(),
+                                        ssoId, session.getId());
 
-	    Manager mgr = session.getManager();
-	    if ((mgr != null) && (mgr instanceof ClusterManager))
-		msg.setContextName(((ClusterManager) mgr).getName());
+            Manager mgr = session.getManager();
+            if ((mgr != null) && (mgr instanceof ClusterManager))
+                msg.setContextName(((ClusterManager) mgr).getName());
 
-	    msg.setAction(SingleSignOnMessage.REMOVE_SESSION);
+            msg.setAction(SingleSignOnMessage.REMOVE_SESSION);
 
-	    cluster.sendClusterDomain(msg);
-	    if (containerLog.isDebugEnabled())
-		containerLog.debug("SingleSignOnMessage Send with action "
-				   + msg.getAction());
-	}
+            cluster.sendClusterDomain(msg);
+            if (containerLog.isDebugEnabled())
+                containerLog.debug("SingleSignOnMessage Send with action "
+                                   + msg.getAction());
+        }
 
-	removeSessionLocal(ssoId, session);
+        removeSessionLocal(ssoId, session);
     }
 
     protected void removeSessionLocal(String ssoId, Session session) {
 
-	super.removeSession(ssoId, session);
-	
+        super.removeSession(ssoId, session);
+        
     }
 
 }

==================================================
SingleSignOnMessage.java
index 01891838f7..a9e09743dc 100644
--- a/java/org/apache/catalina/ha/authenticator/ClusterSingleSignOnListener.java
+++ b/java/org/apache/catalina/ha/authenticator/ClusterSingleSignOnListener.java
@@ -83,44 +83,44 @@ public class ClusterSingleSignOnListener extends ClusterListener {
         if (myobj != null && myobj instanceof SingleSignOnMessage) {
             SingleSignOnMessage msg = (SingleSignOnMessage) myobj;
             int action = msg.getAction();
-	    Session session = null;
-
-	    if (log.isDebugEnabled())
-		log.debug("SingleSignOnMessage Received with action "
-			  + msg.getAction());
-
-	    switch(action) {
-	    case SingleSignOnMessage.ADD_SESSION:
-		session = getSession(msg.getSessionId(),
-				     msg.getContextName());
-		if (session != null)
-		    clusterSSO.associateLocal(msg.getSsoId(), session);
-		break;
-	    case SingleSignOnMessage.DEREGISTER_SESSION:
-		session = getSession(msg.getSessionId(),
-				     msg.getContextName());
-		if (session != null)
-		    clusterSSO.deregisterLocal(msg.getSsoId(), session);
-		break;
-	    case SingleSignOnMessage.LOGOUT_SESSION:
-		clusterSSO.deregisterLocal(msg.getSsoId());
-		break;
-	    case SingleSignOnMessage.REGISTER_SESSION:
-		clusterSSO.registerLocal(msg.getSsoId(), null, msg.getAuthType(),
-					 msg.getUsername(), msg.getPassword());
-		break;
-	    case SingleSignOnMessage.UPDATE_SESSION:
-		clusterSSO.updateLocal(msg.getSsoId(), null, msg.getAuthType(),
-				       msg.getUsername(), msg.getPassword());
-		break;
-	    case SingleSignOnMessage.REMOVE_SESSION:
-		session = getSession(msg.getSessionId(),
-				     msg.getContextName());
-		if (session != null)
-		    clusterSSO.removeSessionLocal(msg.getSsoId(), session);
-		break;
-	    }
-	}
+            Session session = null;
+
+            if (log.isDebugEnabled())
+                log.debug("SingleSignOnMessage Received with action "
+                          + msg.getAction());
+
+            switch(action) {
+            case SingleSignOnMessage.ADD_SESSION:
+                session = getSession(msg.getSessionId(),
+                                     msg.getContextName());
+                if (session != null)
+                    clusterSSO.associateLocal(msg.getSsoId(), session);
+                break;
+            case SingleSignOnMessage.DEREGISTER_SESSION:
+                session = getSession(msg.getSessionId(),
+                                     msg.getContextName());
+                if (session != null)
+                    clusterSSO.deregisterLocal(msg.getSsoId(), session);
+                break;
+            case SingleSignOnMessage.LOGOUT_SESSION:
+                clusterSSO.deregisterLocal(msg.getSsoId());
+                break;
+            case SingleSignOnMessage.REGISTER_SESSION:
+                clusterSSO.registerLocal(msg.getSsoId(), null, msg.getAuthType(),
+                                         msg.getUsername(), msg.getPassword());
+                break;
+            case SingleSignOnMessage.UPDATE_SESSION:
+                clusterSSO.updateLocal(msg.getSsoId(), null, msg.getAuthType(),
+                                       msg.getUsername(), msg.getPassword());
+                break;
+            case SingleSignOnMessage.REMOVE_SESSION:
+                session = getSession(msg.getSessionId(),
+                                     msg.getContextName());
+                if (session != null)
+                    clusterSSO.removeSessionLocal(msg.getSsoId(), session);
+                break;
+            }
+        }
     }
 
     /**
@@ -139,44 +139,44 @@ public class ClusterSingleSignOnListener extends ClusterListener {
 
 
     private Session getSession(String sessionId, String ctxname) {
-	
-	Map<String,ClusterManager> managers = clusterSSO.getCluster().getManagers();
-	Session session = null;
-
-	if (ctxname == null) {
-	    java.util.Iterator<String> i = managers.keySet().iterator();
-	    while (i.hasNext()) {
-		String key = i.next();
-		ClusterManager mgr = managers.get(key);
-		if (mgr != null) {
-		    try {
-			session = mgr.findSession(sessionId);
-		    } catch (IOException io) {
-			log.error("Session doesn't exist:" + io);
-		    }
-		    return session;
-		} else {
-		    //this happens a lot before the system has started
-		    // up
-		    if (log.isDebugEnabled())
-			log.debug("Context manager doesn't exist:"
-				  + key);
-		}
-	    }
-	} else {
-	    ClusterManager mgr = managers.get(ctxname);
-	    if (mgr != null) {
-		try {
-		    session = mgr.findSession(sessionId);
-		} catch (IOException io) {
-		    log.error("Session doesn't exist:" + io);
-		}
-		return session;
-	    } else if (log.isErrorEnabled())
-		log.error("Context manager doesn't exist:" + ctxname);
-	}
-
-	return null;
+        
+        Map<String,ClusterManager> managers = clusterSSO.getCluster().getManagers();
+        Session session = null;
+
+        if (ctxname == null) {
+            java.util.Iterator<String> i = managers.keySet().iterator();
+            while (i.hasNext()) {
+                String key = i.next();
+                ClusterManager mgr = managers.get(key);
+                if (mgr != null) {
+                    try {
+                        session = mgr.findSession(sessionId);
+                    } catch (IOException io) {
+                        log.error("Session doesn't exist:" + io);
+                    }
+                    return session;
+                } else {
+                    //this happens a lot before the system has started
+                    // up
+                    if (log.isDebugEnabled())
+                        log.debug("Context manager doesn't exist:"
+                                  + key);
+                }
+            }
+        } else {
+            ClusterManager mgr = managers.get(ctxname);
+            if (mgr != null) {
+                try {
+                    session = mgr.findSession(sessionId);
+                } catch (IOException io) {
+                    log.error("Session doesn't exist:" + io);
+                }
+                return session;
+            } else if (log.isErrorEnabled())
+                log.error("Context manager doesn't exist:" + ctxname);
+        }
+
+        return null;
     }
 }
 

==================================================
