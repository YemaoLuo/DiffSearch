7d5a2bfa8a062939f6e4490a19994b96b4e50e42
==================================================
Follow-up to r1746649
==================================================
Mark Thomas
==================================================
Tue Jun 7 12:54:23 2016 +0000
==================================================
AsyncContextImpl.java
Follow-up to r1746649
r1746649 triggered the call to Processor.endRequest() in the correct location but failed to remove the call that was in the wrong location. This meant it could be called twice leading to request corruption.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1747210 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ActionCode.java
index 6483a39411..e707374b06 100644
--- a/java/org/apache/catalina/core/LocalStrings.properties
+++ b/java/org/apache/catalina/core/LocalStrings.properties
@@ -78,7 +78,6 @@ aprListener.tooLateForSSLRandomSeed=Cannot setSSLRandomSeed: SSL has already bee
 aprListener.tooLateForFIPSMode=Cannot setFIPSMode: SSL has already been initialized
 aprListener.initializedOpenSSL=OpenSSL successfully initialized ({0})
 
-asyncContextImpl.finishResponseError=Response did not finish cleanly after AsyncContext completed
 asyncContextImpl.request.ise=It is illegal to call getRequest() after complete() or any of the dispatch() methods has been called
 asyncContextImpl.requestEnded=The request associated with the AsyncContext has already completed processing.
 asyncContextImpl.response.ise=It is illegal to call getResponse() after complete() or any of the dispatch() methods has been called

==================================================
AjpProcessor.java
index 830624a928..bf0c4a3891 100644
--- a/java/org/apache/coyote/ActionCode.java
+++ b/java/org/apache/coyote/ActionCode.java
@@ -238,12 +238,6 @@ public enum ActionCode {
      */
     DISPATCH_EXECUTE,
 
-    /**
-     * Trigger end of request processing (remaining input swallowed, write any
-     * remaining parts of the response etc.).
-     */
-    END_REQUEST,
-
     /**
      * Is server push supported and allowed for the current request?
      */

==================================================
Http11InputBuffer.java
index 85d6303e20..8c96c10407 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -432,10 +432,6 @@ public class AjpProcessor extends AbstractProcessor {
             setErrorState(ErrorState.CLOSE_CLEAN, null);
             break;
         }
-        case END_REQUEST: {
-            // NO-OP for AJP
-            break;
-        }
 
         // Request attribute support
         case REQ_HOST_ADDR_ATTRIBUTE: {

==================================================
Http11Processor.java
index 92ca1e713d..a8f4137464 100644
--- a/java/org/apache/coyote/http11/Http11InputBuffer.java
+++ b/java/org/apache/coyote/http11/Http11InputBuffer.java
@@ -321,6 +321,9 @@ public class Http11InputBuffer implements InputBuffer {
 
         lastValid = 0;
         pos = 0;
+
+        System.out.println("Http11InputBuffer.recycle(): pos [" + pos + "], lastValid [" + lastValid + "]");
+
         lastActiveFilter = -1;
         parsingHeader = true;
         swallowInput = true;
@@ -352,6 +355,8 @@ public class Http11InputBuffer implements InputBuffer {
         lastValid = lastValid - pos;
         pos = 0;
 
+        System.out.println("Http11InputBuffer.nextRequest(): pos [" + pos + "], lastValid [" + lastValid + "]");
+
         // Recycle filters
         for (int i = 0; i <= lastActiveFilter; i++) {
             activeFilters[i].recycle();
@@ -412,7 +417,7 @@ public class Http11InputBuffer implements InputBuffer {
                 }
                 if (!keptAlive && pos == 0 && lastValid >= CLIENT_PREFACE_START.length - 1) {
                     boolean prefaceMatch = true;
-                    for (int i = 0; i < CLIENT_PREFACE_START.length; i++) {
+                    for (int i = 0; i < CLIENT_PREFACE_START.length && prefaceMatch; i++) {
                         if (CLIENT_PREFACE_START[i] != buf[i]) {
                             prefaceMatch = false;
                         }
@@ -631,6 +636,8 @@ public class Http11InputBuffer implements InputBuffer {
         if (swallowInput && (lastActiveFilter != -1)) {
             int extraBytes = (int) activeFilters[lastActiveFilter].end();
             pos = pos - extraBytes;
+            System.out.println("Http11InputBuffer.endRequest(): pos [" + pos + "], lastValid [" + lastValid + "]");
+            (new Exception()).printStackTrace();
         }
     }
 
@@ -742,6 +749,7 @@ public class Http11InputBuffer implements InputBuffer {
         int nRead = wrapper.read(block, buf, pos, buf.length - pos);
         if (nRead > 0) {
             lastValid = pos + nRead;
+            System.out.println("Http11InputBuffer.fill(): pos [" + pos + "], lastValid [" + lastValid + "]");
             return true;
         } else if (nRead == -1) {
             throw new EOFException(sm.getString("iib.eof.error"));
@@ -1077,6 +1085,7 @@ public class Http11InputBuffer implements InputBuffer {
             int length = lastValid - pos;
             chunk.setBytes(buf, pos, length);
             pos = lastValid;
+            System.out.println("SocketInputBuffer.doRead(): pos [" + pos + "], lastValid [" + lastValid + "]");
 
             return length;
         }

==================================================
StreamProcessor.java
index 1ebb373f1f..d1d44d713e 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -733,10 +733,6 @@ public class Http11Processor extends AbstractProcessor {
             inputBuffer.setSwallowInput(false);
             break;
         }
-        case END_REQUEST: {
-            endRequest();
-            break;
-        }
 
         // Request attribute support
         case REQ_HOST_ADDR_ATTRIBUTE: {

==================================================
TestHttp11Processor.java
index ad420ec127..45f2c001a8 100644
--- a/java/org/apache/coyote/http2/StreamProcessor.java
+++ b/java/org/apache/coyote/http2/StreamProcessor.java
@@ -169,12 +169,6 @@ public class StreamProcessor extends AbstractProcessor implements Runnable {
             // control windows are correctly tracked.
             break;
         }
-        case END_REQUEST: {
-            // NO-OP
-            // This action is geared towards handling HTTP/1.1 expectations and
-            // keep-alive. Does not apply to HTTP/2 streams.
-            break;
-        }
 
         // Request attribute support
         case REQ_HOST_ADDR_ATTRIBUTE: {

==================================================
