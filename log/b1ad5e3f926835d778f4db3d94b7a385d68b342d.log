b1ad5e3f926835d778f4db3d94b7a385d68b342d
==================================================
Set "reuse" flag of final AJP "END_RESPONSE"
==================================================
Rainer Jung
==================================================
Fri Jul 29 22:08:20 2011 +0000
==================================================
AbstractAjpProcessor.java
Set "reuse" flag of final AJP "END_RESPONSE"
packet to "0" if we plan to close the connection.

mod_jk will respect it and I just committed
the same to mod_proxy_ajp in httpd trunk.

If the web server does not respect it, things do
not get worse by nevertheless setting the flag,
because the patch does not change whether we actually
close the connection or not.


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1152385 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpAprProcessor.java
index 04a0f55777..9ee30e8a88 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
@@ -63,6 +63,7 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
      * End message array.
      */
     protected static final byte[] endMessageArray;
+    protected static final byte[] endAndCloseMessageArray;
 
 
     /**
@@ -88,6 +89,16 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
         System.arraycopy(endMessage.getBuffer(), 0, endMessageArray, 0,
                 endMessage.getLen());
 
+        // Allocate the end and close message array
+        AjpMessage endAndCloseMessage = new AjpMessage(16);
+        endAndCloseMessage.reset();
+        endAndCloseMessage.appendByte(Constants.JK_AJP13_END_RESPONSE);
+        endAndCloseMessage.appendByte(0);
+        endAndCloseMessage.end();
+        endAndCloseMessageArray = new byte[endAndCloseMessage.getLen()];
+        System.arraycopy(endAndCloseMessage.getBuffer(), 0, endAndCloseMessageArray, 0,
+                endAndCloseMessage.getLen());
+
         // Allocate the flush message array
         AjpMessage flushMessage = new AjpMessage(16);
         flushMessage.reset();

==================================================
AjpNioProcessor.java
index 96ded174a2..6efd5945f8 100644
--- a/java/org/apache/coyote/ajp/AjpAprProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpAprProcessor.java
@@ -299,10 +299,16 @@ public class AjpAprProcessor extends AbstractAjpProcessor<Long> {
         finished = true;
 
         // Add the end message
-        if (outputBuffer.position() + endMessageArray.length > outputBuffer.capacity()) {
+        byte[] messageArray;
+        if (error) {
+            messageArray = endAndCloseMessageArray;
+        } else {
+            messageArray = endMessageArray;
+        }
+        if (outputBuffer.position() + messageArray.length > outputBuffer.capacity()) {
             flush(false);
         }
-        outputBuffer.put(endMessageArray);
+        outputBuffer.put(messageArray);
         flush(false);
 
     }

==================================================
AjpProcessor.java
index 4ce2ee8085..84cab1338c 100644
--- a/java/org/apache/coyote/ajp/AjpNioProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpNioProcessor.java
@@ -319,7 +319,13 @@ public class AjpNioProcessor extends AbstractAjpProcessor<NioChannel> {
         finished = true;
 
         // Add the end message
-        output(endMessageArray, 0, endMessageArray.length);
+        byte[] messageArray;
+        if (error) {
+            messageArray = endAndCloseMessageArray;
+        } else {
+            messageArray = endMessageArray;
+        }
+        output(messageArray, 0, messageArray.length);
     }
 
 

==================================================
