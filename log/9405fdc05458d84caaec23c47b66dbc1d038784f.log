9405fdc05458d84caaec23c47b66dbc1d038784f
==================================================
JSSE only supports TLS client authentication as part of the initial handshake. Log a warning if a JSSE connector is configured with TLS 1.3 and optional authentication.
==================================================
Mark Thomas
==================================================
Wed Oct 10 11:56:09 2018 +0000
==================================================
SSLUtilBase.java
index d476ab7d99..49fa8e15e8 100644
--- a/java/org/apache/tomcat/util/net/LocalStrings.properties
+++ b/java/org/apache/tomcat/util/net/LocalStrings.properties
@@ -129,6 +129,7 @@ channel.nio.ssl.foundHttp=Found an plain text HTTP request on what should be an
 jsse.invalid_truststore_password=The provided trust store password could not be used to unlock and/or validate the trust store. Retrying to access the trust store with a null password which will skip validation.
 jsse.keystore_load_failed=Failed to load keystore type [{0}] with path [{1}] due to [{2}]
 jsse.ssl3=SSLv3 has been explicitly enabled. This protocol is known to be insecure.
+jsse.tls13.auth=The JSSE TLS 1.3 implementation does not support authentication after the initial handshake and is therefore incompatible with optional client authentication
 
 sniExtractor.clientHelloInvalid=The ClientHello message was not correctly formatted
 sniExtractor.clientHelloTooBig=The ClientHello was not presented in a single TLS record so no SNI information could be extracted

==================================================
JSSEUtil.java
index 93b2697018..4dbd6f02c1 100644
--- a/java/org/apache/tomcat/util/net/SSLUtilBase.java
+++ b/java/org/apache/tomcat/util/net/SSLUtilBase.java
@@ -31,6 +31,7 @@ import java.util.Set;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.file.ConfigFileLoader;
+import org.apache.tomcat.util.net.SSLHostConfig.CertificateVerification;
 import org.apache.tomcat.util.res.StringManager;
 
 /**
@@ -72,6 +73,13 @@ public abstract class SSLUtilBase implements SSLUtil {
         }
         this.enabledProtocols = enabledProtocols.toArray(new String[enabledProtocols.size()]);
 
+        if (enabledProtocols.contains(Constants.SSL_PROTO_TLSv1_3) &&
+                (sslHostConfig.getCertificateVerification() == CertificateVerification.OPTIONAL ||
+                        sslHostConfig.getCertificateVerification() == CertificateVerification.OPTIONAL) &&
+                !isTls13RenegAuthAvailable() && warnOnSkip) {
+            log.warn(sm.getString("jsse.tls13.auth"));
+        }
+
         // Calculate the enabled ciphers
         List<String> configuredCiphers = sslHostConfig.getJsseCipherNames();
         Set<String> implementedCiphers = getImplementedCiphers();
@@ -209,4 +217,5 @@ public abstract class SSLUtilBase implements SSLUtil {
     protected abstract Set<String> getImplementedCiphers();
     protected abstract Log getLog();
     protected abstract boolean isTls13Available();
+    protected abstract boolean isTls13RenegAuthAvailable();
 }

==================================================
OpenSSLUtil.java
index d926569e43..814f4b6241 100644
--- a/java/org/apache/tomcat/util/net/jsse/JSSEUtil.java
+++ b/java/org/apache/tomcat/util/net/jsse/JSSEUtil.java
@@ -176,6 +176,13 @@ public class JSSEUtil extends SSLUtilBase {
     }
 
 
+    @Override
+    protected boolean isTls13RenegAuthAvailable() {
+        // TLS 1.3 does not support authentication after the initial handshake
+        return false;
+    }
+
+
     @Override
     public SSLContext createSSLContext(List<String> negotiableProtocols) throws NoSuchAlgorithmException {
         return new JSSESSLContext(sslHostConfig.getSslProtocol());

==================================================
