a93b59630202c76216275071e3c112ac0e7aa63e
==================================================
Remove unused code
==================================================
Mark Emlyn
==================================================
Wed Jan 5 07:50:11 2011 +0000
==================================================
AbstractHttp11Processor.java
Remove unused code

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1055341 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractInputBuffer.java
index 190de2446d..5b7d3bf112 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -61,9 +61,6 @@ public abstract class AbstractHttp11Processor implements ActionHook, Processor {
     protected static final StringManager sm =
         StringManager.getManager(Constants.Package);
 
-    protected static boolean isSecurityEnabled = 
-        org.apache.coyote.Constants.IS_SECURITY_ENABLED;
-
     /*
      * Tracks how many internal filters are in the filter library so they
      * are skipped when looking for pluggable filters. 
@@ -359,14 +356,6 @@ public abstract class AbstractHttp11Processor implements ActionHook, Processor {
     }
 
 
-    /**
-     * Return the list of compressable mime-types.
-     */
-    public String[] findCompressableMimeTypes() {
-        return (compressableMimeTypes);
-    }
-
-
     /**
      * Return compression level.
      */
@@ -489,19 +478,6 @@ public abstract class AbstractHttp11Processor implements ActionHook, Processor {
     }
 
 
-    /**
-     * Return the list of restricted user agents.
-     */
-    public String[] findRestrictedUserAgents() {
-        String[] sarr = new String [restrictedUserAgents.length];
-
-        for (int i = 0; i < restrictedUserAgents.length; i++)
-            sarr[i] = restrictedUserAgents[i].toString();
-
-        return (sarr);
-    }
-
-
     /**
      * Set the maximum number of Keep-Alive requests to honor.
      * This is to safeguard from DoS attacks.  Setting to a negative
@@ -795,30 +771,6 @@ public abstract class AbstractHttp11Processor implements ActionHook, Processor {
     }
 
     
-    /**
-     * Add input or output filter.
-     *
-     * @param className class name of the filter
-     */
-    protected void addFilter(String className) {
-        try {
-            Class<?> clazz = Class.forName(className);
-            Object obj = clazz.newInstance();
-            if (obj instanceof InputFilter) {
-                getInputBuffer().addFilter((InputFilter) obj);
-            } else if (obj instanceof OutputFilter) {
-                getOutputBuffer().addFilter((OutputFilter) obj);
-            } else {
-                getLog().warn(sm.getString("http11processor.filter.unknown",
-                        className));
-            }
-        } catch (Exception e) {
-            getLog().error(sm.getString(
-                    "http11processor.filter.error", className), e);
-        }
-    }
-
-
     /**
      * Add an input filter to the current request.
      *

==================================================
AbstractOutputBuffer.java
index c2ac664030..aab5a4db48 100644
--- a/java/org/apache/coyote/http11/AbstractInputBuffer.java
+++ b/java/org/apache/coyote/http11/AbstractInputBuffer.java
@@ -187,17 +187,6 @@ public abstract class AbstractInputBuffer implements InputBuffer{
     }
 
 
-    /**
-     * Clear filters.
-     */
-    public void clearFilters() {
-
-        filterLibrary = new InputFilter[0];
-        lastActiveFilter = -1;
-
-    }
-
-
     /**
      * Add an input filter to the filter library.
      */

==================================================
Constants.java
index d761128d01..e5bef9d6c9 100644
--- a/java/org/apache/coyote/http11/AbstractOutputBuffer.java
+++ b/java/org/apache/coyote/http11/AbstractOutputBuffer.java
@@ -28,7 +28,6 @@ import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.CharChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.http.HttpMessages;
-import org.apache.tomcat.util.http.MimeHeaders;
 import org.apache.tomcat.util.res.StringManager;
 
 public abstract class AbstractOutputBuffer implements OutputBuffer{
@@ -42,12 +41,6 @@ public abstract class AbstractOutputBuffer implements OutputBuffer{
     protected Response response;
 
 
-    /**
-     * Headers of the associated request.
-     */
-    protected MimeHeaders headers;
-
-
     /**
      * Committed flag.
      */
@@ -141,17 +134,6 @@ public abstract class AbstractOutputBuffer implements OutputBuffer{
     }
 
 
-    /**
-     * Clear filters.
-     */
-    public void clearFilters() {
-
-        filterLibrary = new OutputFilter[0];
-        lastActiveFilter = -1;
-
-    }
-
-
     /**
      * Add an output filter to the filter library.
      */
@@ -402,42 +384,6 @@ public abstract class AbstractOutputBuffer implements OutputBuffer{
     }
 
 
-    /**
-     * Send a header.
-     * 
-     * @param name Header name
-     * @param value Header value
-     */
-    public void sendHeader(ByteChunk name, ByteChunk value) {
-
-        write(name);
-        buf[pos++] = Constants.COLON;
-        buf[pos++] = Constants.SP;
-        write(value);
-        buf[pos++] = Constants.CR;
-        buf[pos++] = Constants.LF;
-
-    }
-
-
-    /**
-     * Send a header.
-     * 
-     * @param name Header name
-     * @param value Header value
-     */
-    public void sendHeader(String name, String value) {
-
-        write(name);
-        buf[pos++] = Constants.COLON;
-        buf[pos++] = Constants.SP;
-        write(value);
-        buf[pos++] = Constants.CR;
-        buf[pos++] = Constants.LF;
-
-    }
-
-
     /**
      * End the header block.
      */

==================================================
InternalAprOutputBuffer.java
index 46514b4416..0791c4d044 100644
--- a/java/org/apache/coyote/http11/Constants.java
+++ b/java/org/apache/coyote/http11/Constants.java
@@ -38,8 +38,6 @@ public final class Constants {
 
     public static final int DEFAULT_CONNECTION_LINGER = -1;
     public static final int DEFAULT_CONNECTION_TIMEOUT = 60000;
-    public static final int DEFAULT_CONNECTION_UPLOAD_TIMEOUT = 300000;
-    public static final int DEFAULT_SERVER_SOCKET_TIMEOUT = 0;
     public static final boolean DEFAULT_TCP_NO_DELAY = true;
     
     
@@ -129,8 +127,6 @@ public final class Constants {
 
 
     /* Various constant "strings" */
-    public static final byte[] CRLF_BYTES = ByteChunk.convertToBytes(CRLF);
-    public static final byte[] COLON_BYTES = ByteChunk.convertToBytes(": ");
     public static final String CONNECTION = "Connection";
     public static final String CLOSE = "close";
     public static final byte[] CLOSE_BYTES = 

==================================================
InternalInputBuffer.java
index 84ebbe3b4c..a2918b7123 100644
--- a/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
@@ -35,27 +35,14 @@ import org.apache.tomcat.util.http.HttpMessages;
 public class InternalAprOutputBuffer extends AbstractOutputBuffer {
 
 
-    // -------------------------------------------------------------- Constants
-
-
     // ----------------------------------------------------------- Constructors
 
-
     /**
      * Default constructor.
      */
-    public InternalAprOutputBuffer(Response response) {
-        this(response, Constants.DEFAULT_HTTP_HEADER_BUFFER_SIZE);
-    }
-
-
-    /**
-     * Alternate constructor.
-     */
     public InternalAprOutputBuffer(Response response, int headerBufferSize) {
 
         this.response = response;
-        headers = response.getMimeHeaders();
 
         buf = new byte[headerBufferSize];
         if (headerBufferSize < (8 * 1024)) {

==================================================
InternalNioOutputBuffer.java
index 4ded3b1e72..101a96cc42 100644
--- a/java/org/apache/coyote/http11/InternalInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalInputBuffer.java
@@ -37,14 +37,6 @@ public class InternalInputBuffer extends AbstractInputBuffer {
     /**
      * Default constructor.
      */
-    public InternalInputBuffer(Request request) {
-        this(request, Constants.DEFAULT_HTTP_HEADER_BUFFER_SIZE);
-    }
-
-
-    /**
-     * Alternate constructor.
-     */
     public InternalInputBuffer(Request request, int headerBufferSize) {
 
         this.request = request;

==================================================
InternalOutputBuffer.java
index 4468b0d900..8f2bea2967 100644
--- a/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
@@ -39,26 +39,14 @@ import org.apache.tomcat.util.net.NioSelectorPool;
  */
 public class InternalNioOutputBuffer extends AbstractOutputBuffer {
 
-
-    // -------------------------------------------------------------- Constants
-
-
     // ----------------------------------------------------------- Constructors
-    /**
-     * Default constructor.
-     */
-    public InternalNioOutputBuffer(Response response) {
-        this(response, Constants.DEFAULT_HTTP_HEADER_BUFFER_SIZE);
-    }
-
 
     /**
-     * Alternate constructor.
+     * Default constructor.
      */
     public InternalNioOutputBuffer(Response response, int headerBufferSize) {
 
         this.response = response;
-        headers = response.getMimeHeaders();
 
         buf = new byte[headerBufferSize];
         

==================================================
VoidOutputFilter.java
index 480fab9bca..6780583842 100644
--- a/java/org/apache/coyote/http11/InternalOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalOutputBuffer.java
@@ -32,28 +32,14 @@ import org.apache.tomcat.util.buf.ByteChunk;
 public class InternalOutputBuffer extends AbstractOutputBuffer
     implements ByteChunk.ByteOutputChannel {
 
-    // -------------------------------------------------------------- Constants
-
-
     // ----------------------------------------------------------- Constructors
 
-
     /**
      * Default constructor.
      */
-    public InternalOutputBuffer(Response response) {
-        this(response, Constants.DEFAULT_HTTP_HEADER_BUFFER_SIZE);
-    }
-
-
-    /**
-     * Alternate constructor.
-     */
     public InternalOutputBuffer(Response response, int headerBufferSize) {
 
         this.response = response;
-        
-        headers = response.getMimeHeaders();
 
         buf = new byte[headerBufferSize];
 

==================================================
