2dba790709c46884eb91a5cbd65f0934e23af5c7
==================================================
Refactor to make Connector required when creating a Request.
==================================================
Mark Thomas
==================================================
Tue Jan 3 15:28:08 2017 +0000
==================================================
Connector.java
Refactor to make Connector required when creating a Request.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1777142 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Request.java
index 021b62e5be..7802afaaf0 100644
--- a/java/org/apache/catalina/connector/Connector.java
+++ b/java/org/apache/catalina/connector/Connector.java
@@ -824,11 +824,8 @@ public class Connector extends LifecycleMBeanBase  {
      * @return a new Servlet request object
      */
     public Request createRequest() {
-
-        Request request = new Request();
-        request.setConnector(this);
-        return (request);
-
+        Request request = new Request(this);
+        return request;
     }
 
 

==================================================
TesterDigestAuthenticatorPerformance.java
index 235ea2e8eb..902bc61d04 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -125,10 +125,17 @@ public class Request implements HttpServletRequest {
 
     private static final Log log = LogFactory.getLog(Request.class);
 
-    // ----------------------------------------------------------- Constructors
-
+    /**
+     * Create a new Request object associated with the given Connector.
+     *
+     * @param connector The Connector with which this Request object will always
+     *                  be associated. In normal usage this must be non-null. In
+     *                  some test scenarios, it may be possible to use a null
+     *                  Connector without triggering an NPE.
+     */
+    public Request(Connector connector) {
+        this.connector = connector;
 
-    public Request() {
         formats = new SimpleDateFormat[formatsTemplate.length];
         for(int i = 0; i < formats.length; i++) {
             formats[i] = (SimpleDateFormat) formatsTemplate[i].clone();
@@ -545,7 +552,7 @@ public class Request implements HttpServletRequest {
     /**
      * Associated Catalina connector.
      */
-    protected Connector connector;
+    protected final Connector connector;
 
     /**
      * @return the Connector through which this Request was received.
@@ -554,15 +561,6 @@ public class Request implements HttpServletRequest {
         return this.connector;
     }
 
-    /**
-     * Set the Connector through which this Request was received.
-     *
-     * @param connector The new connector
-     */
-    public void setConnector(Connector connector) {
-        this.connector = connector;
-    }
-
 
     /**
      * Return the Context within which this Request is being processed.

==================================================
TestResponse.java
index 3674fa821e..ace24445b8 100644
--- a/test/org/apache/catalina/authenticator/TesterDigestAuthenticatorPerformance.java
+++ b/test/org/apache/catalina/authenticator/TesterDigestAuthenticatorPerformance.java
@@ -249,6 +249,10 @@ public class TesterDigestAuthenticatorPerformance {
 
         private String authHeader = null;
 
+        public TesterDigestRequest() {
+            super(null);
+        }
+
         @Override
         public String getRemoteAddr() {
             return "127.0.0.1";

==================================================
TestAsyncContextImpl.java
index 204b54ddf1..7e75de3cd5 100644
--- a/test/org/apache/catalina/connector/TestResponse.java
+++ b/test/org/apache/catalina/connector/TestResponse.java
@@ -603,7 +603,7 @@ public class TestResponse extends TomcatBaseTest {
         Response response = new Response();
         response.setConnector(connector);
         response.setCoyoteResponse(cResponse);
-        Request request = new Request();
+        Request request = new Request(connector);
         org.apache.coyote.Request cRequest = new org.apache.coyote.Request();
         request.setCoyoteRequest(cRequest);
         Context context = new TesterContext();

==================================================
TestRemoteIpFilter.java
index 3bd4606452..da13dbdb36 100644
--- a/test/org/apache/catalina/core/TestAsyncContextImpl.java
+++ b/test/org/apache/catalina/core/TestAsyncContextImpl.java
@@ -2470,7 +2470,7 @@ public class TestAsyncContextImpl extends TomcatBaseTest {
         };
         final Context context = new TesterContext();
         final Response response = new Response();
-        final Request request = new Request();
+        final Request request = new Request(null);
         request.setCoyoteRequest(new org.apache.coyote.Request());
         request.getMappingData().context = context;
         final AsyncContextImpl ac = new AsyncContextImpl(request);

==================================================
TestRealmBase.java
index 36eb7867d5..fd807e77ef 100644
--- a/test/org/apache/catalina/filters/TestRemoteIpFilter.java
+++ b/test/org/apache/catalina/filters/TestRemoteIpFilter.java
@@ -115,9 +115,8 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
      */
     public static class MockHttpServletRequest extends Request {
         public MockHttpServletRequest() {
-            super();
+            super(new Connector());
             setCoyoteRequest(new org.apache.coyote.Request());
-            setConnector(new Connector());
         }
 
         public void setHeader(String name, String value) {

==================================================
TestRemoteIpValve.java
index 43b5d7714b..7ef9191dbc 100644
--- a/test/org/apache/catalina/realm/TestRealmBase.java
+++ b/test/org/apache/catalina/realm/TestRealmBase.java
@@ -614,7 +614,7 @@ public class TestRealmBase {
                 new SecurityConstraint[] { constraintOne, constraintTwo };
 
         // Set up the mock request and response
-        Request request = new Request();
+        Request request = new Request(null);
         Response response = new TesterResponse();
         Context context = new TesterContext();
         for (String applicationRole : applicationRoles) {

==================================================
TestRequestFilterValve.java
index 006747b7c2..fbbe17a71d 100644
--- a/test/org/apache/catalina/valves/TestRemoteIpValve.java
+++ b/test/org/apache/catalina/valves/TestRemoteIpValve.java
@@ -92,6 +92,11 @@ public class TestRemoteIpValve {
     }
 
     public static class MockRequest extends Request {
+
+        public MockRequest() {
+            super(null);
+        }
+
         @Override
         public void setAttribute(String name, Object value) {
             getCoyoteRequest().getAttributes().put(name, value);

==================================================
TesterRequest.java
index 3ddcf2f7ac..a167b7e39c 100644
--- a/test/org/apache/catalina/valves/TestRequestFilterValve.java
+++ b/test/org/apache/catalina/valves/TestRequestFilterValve.java
@@ -88,13 +88,12 @@ public class TestRequestFilterValve {
         RequestFilterValve valve = null;
         Connector connector = new Connector();
         Context context = new StandardContext();
-        Request request = new Request();
+        Request request = new Request(connector);
         Response response = new MockResponse();
         StringBuilder msg = new StringBuilder();
         int expected = allowed ? OK : FORBIDDEN;
 
         connector.setPort(PORT);
-        request.setConnector(connector);
         request.getMappingData().context = context;
         request.setCoyoteRequest(new org.apache.coyote.Request());
 

==================================================
