91c0ba66f517f69ef1acf3803ff22a404adee6ff
==================================================
Use client's preferred language for the Server Status page of the Manager web application.
==================================================
Konstantin Kolinko
==================================================
Mon Feb 4 14:02:18 2019 +0000
==================================================
HTMLManagerServlet.java
Use client's preferred language for the Server Status page of the Manager web application.
Review and fix several cases when the client's language preference was not respected in Manager and Host Manager web applications.



git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1852916 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ManagerServlet.java
index 457db97bf6..d70ee7a6cb 100644
--- a/java/org/apache/catalina/manager/HTMLManagerServlet.java
+++ b/java/org/apache/catalina/manager/HTMLManagerServlet.java
@@ -139,11 +139,11 @@ public final class HTMLManagerServlet extends ManagerServlet {
                         e.toString());
             }
         } else if (command.equals("/sslConnectorCiphers")) {
-            sslConnectorCiphers(request, response);
+            sslConnectorCiphers(request, response, smClient);
         } else if (command.equals("/sslConnectorCerts")) {
-            sslConnectorCerts(request, response);
+            sslConnectorCerts(request, response, smClient);
         } else if (command.equals("/sslConnectorTrustedCerts")) {
-            sslConnectorTrustedCerts(request, response);
+            sslConnectorTrustedCerts(request, response, smClient);
         } else if (command.equals("/upload") || command.equals("/deploy") ||
                 command.equals("/reload") || command.equals("/undeploy") ||
                 command.equals("/expire") || command.equals("/start") ||
@@ -764,24 +764,24 @@ public final class HTMLManagerServlet extends ManagerServlet {
 
 
     protected void sslConnectorCiphers(HttpServletRequest request,
-            HttpServletResponse response) throws ServletException, IOException {
-        request.setAttribute("cipherList", getConnectorCiphers());
+            HttpServletResponse response, StringManager smClient) throws ServletException, IOException {
+        request.setAttribute("cipherList", getConnectorCiphers(smClient));
         getServletContext().getRequestDispatcher(
                 connectorCiphersJspPath).forward(request, response);
     }
 
 
     protected void sslConnectorCerts(HttpServletRequest request,
-            HttpServletResponse response) throws ServletException, IOException {
-        request.setAttribute("certList", getConnectorCerts());
+            HttpServletResponse response, StringManager smClient) throws ServletException, IOException {
+        request.setAttribute("certList", getConnectorCerts(smClient));
         getServletContext().getRequestDispatcher(
                 connectorCertsJspPath).forward(request, response);
     }
 
 
     protected void sslConnectorTrustedCerts(HttpServletRequest request,
-            HttpServletResponse response) throws ServletException, IOException {
-        request.setAttribute("trustedCertList", getConnectorTrustedCerts());
+            HttpServletResponse response, StringManager smClient) throws ServletException, IOException {
+        request.setAttribute("trustedCertList", getConnectorTrustedCerts(smClient));
         getServletContext().getRequestDispatcher(
                 connectorTrustedCertsJspPath).forward(request, response);
     }

==================================================
StatusManagerServlet.java
index ae1a0cb4a6..d261873d0a 100644
--- a/java/org/apache/catalina/manager/ManagerServlet.java
+++ b/java/org/apache/catalina/manager/ManagerServlet.java
@@ -627,7 +627,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
 
     protected void sslConnectorCiphers(PrintWriter writer, StringManager smClient) {
         writer.println(smClient.getString("managerServlet.sslConnectorCiphers"));
-        Map<String,List<String>> connectorCiphers = getConnectorCiphers();
+        Map<String,List<String>> connectorCiphers = getConnectorCiphers(smClient);
         for (Map.Entry<String,List<String>> entry : connectorCiphers.entrySet()) {
             writer.println(entry.getKey());
             for (String cipher : entry.getValue()) {
@@ -640,7 +640,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
 
     private void sslConnectorCerts(PrintWriter writer, StringManager smClient) {
         writer.println(smClient.getString("managerServlet.sslConnectorCerts"));
-        Map<String,List<String>> connectorCerts = getConnectorCerts();
+        Map<String,List<String>> connectorCerts = getConnectorCerts(smClient);
         for (Map.Entry<String,List<String>> entry : connectorCerts.entrySet()) {
             writer.println(entry.getKey());
             for (String cert : entry.getValue()) {
@@ -652,7 +652,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
 
     private void sslConnectorTrustedCerts(PrintWriter writer, StringManager smClient) {
         writer.println(smClient.getString("managerServlet.sslConnectorTrustedCerts"));
-        Map<String,List<String>> connectorTrustedCerts = getConnectorTrustedCerts();
+        Map<String,List<String>> connectorTrustedCerts = getConnectorTrustedCerts(smClient);
         for (Map.Entry<String,List<String>> entry : connectorTrustedCerts.entrySet()) {
             writer.println(entry.getKey());
             for (String cert : entry.getValue()) {
@@ -1237,7 +1237,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
         if (debug >= 1)
             log("serverinfo");
         try {
-            writer.println(sm.getString("managerServlet.serverInfo", ServerInfo.getServerInfo(),
+            writer.println(smClient.getString("managerServlet.serverInfo", ServerInfo.getServerInfo(),
                     System.getProperty("os.name"), System.getProperty("os.version"), System.getProperty("os.arch"),
                     System.getProperty("java.runtime.version"), System.getProperty("java.vm.vendor")));
         } catch (Throwable t) {
@@ -1664,7 +1664,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
 
 
     protected static boolean validateContextName(ContextName cn,
-            PrintWriter writer, StringManager sm) {
+            PrintWriter writer, StringManager smClient) {
 
         // ContextName should be non-null with a path that is empty or starts
         // with /
@@ -1677,11 +1677,11 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
         if (cn != null) {
             path = Escape.htmlElementContent(cn.getPath());
         }
-        writer.println(sm.getString("managerServlet.invalidPath", path));
+        writer.println(smClient.getString("managerServlet.invalidPath", path));
         return false;
     }
 
-    protected Map<String,List<String>> getConnectorCiphers() {
+    protected Map<String,List<String>> getConnectorCiphers(StringManager smClient) {
         Map<String,List<String>> result = new HashMap<>();
 
         Connector connectors[] = getConnectors();
@@ -1696,7 +1696,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
                 }
             } else {
                 ArrayList<String> cipherList = new ArrayList<>(1);
-                cipherList.add(sm.getString("managerServlet.notSslConnector"));
+                cipherList.add(smClient.getString("managerServlet.notSslConnector"));
                 result.put(connector.toString(), cipherList);
             }
         }
@@ -1704,7 +1704,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
     }
 
 
-    protected Map<String,List<String>> getConnectorCerts() {
+    protected Map<String,List<String>> getConnectorCerts(StringManager smClient) {
         Map<String,List<String>> result = new HashMap<>();
 
         Connector connectors[] = getConnectors();
@@ -1727,7 +1727,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
                             }
                             X509Certificate[] certs = sslContext.getCertificateChain(alias);
                             if (certs == null) {
-                                certList.add(sm.getString("managerServlet.certsNotAvailable"));
+                                certList.add(smClient.getString("managerServlet.certsNotAvailable"));
                             } else {
                                 for (Certificate cert : certs) {
                                     certList.add(cert.toString());
@@ -1737,14 +1737,14 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
                         }
                     } else {
                         List<String> certList = new ArrayList<>();
-                        certList.add(sm.getString("managerServlet.certsNotAvailable"));
+                        certList.add(smClient.getString("managerServlet.certsNotAvailable"));
                         String name = connector.toString() + "-" + sslHostConfig.getHostName();
                         result.put(name, certList);
                     }
                 }
             } else {
                 List<String> certList = new ArrayList<>(1);
-                certList.add(sm.getString("managerServlet.notSslConnector"));
+                certList.add(smClient.getString("managerServlet.notSslConnector"));
                 result.put(connector.toString(), certList);
             }
         }
@@ -1753,7 +1753,7 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
     }
 
 
-    protected Map<String,List<String>> getConnectorTrustedCerts() {
+    protected Map<String,List<String>> getConnectorTrustedCerts(StringManager smClient) {
         Map<String,List<String>> result = new HashMap<>();
 
         Connector connectors[] = getConnectors();
@@ -1769,22 +1769,22 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
                                 sslHostConfig.getCertificates().iterator().next().getSslContext();
                         X509Certificate[] certs = sslContext.getAcceptedIssuers();
                         if (certs == null) {
-                            certList.add(sm.getString("managerServlet.certsNotAvailable"));
+                            certList.add(smClient.getString("managerServlet.certsNotAvailable"));
                         } else if (certs.length == 0) {
-                            certList.add(sm.getString("managerServlet.trustedCertsNotConfigured"));
+                            certList.add(smClient.getString("managerServlet.trustedCertsNotConfigured"));
                         } else {
                             for (Certificate cert : certs) {
                                 certList.add(cert.toString());
                             }
                         }
                     } else {
-                        certList.add(sm.getString("managerServlet.certsNotAvailable"));
+                        certList.add(smClient.getString("managerServlet.certsNotAvailable"));
                     }
                     result.put(name, certList);
                 }
             } else {
                 List<String> certList = new ArrayList<>(1);
-                certList.add(sm.getString("managerServlet.notSslConnector"));
+                certList.add(smClient.getString("managerServlet.notSslConnector"));
                 result.put(connector.toString(), certList);
             }
         }

==================================================
HTMLHostManagerServlet.java
index b19d780264..84beaca3bd 100644
--- a/java/org/apache/catalina/manager/StatusManagerServlet.java
+++ b/java/org/apache/catalina/manager/StatusManagerServlet.java
@@ -195,6 +195,9 @@ public class StatusManagerServlet
                       HttpServletResponse response)
         throws IOException, ServletException {
 
+        StringManager smClient = StringManager.getManager(
+                Constants.Package, request.getLocales());
+
         // mode is flag for HTML or XML output
         int mode = 0;
         // if ?XML=true, set the mode to XML
@@ -220,49 +223,49 @@ public class StatusManagerServlet
         args = new Object[2];
         args[0] = request.getContextPath();
         if (completeStatus) {
-            args[1] = sm.getString("statusServlet.complete");
+            args[1] = smClient.getString("statusServlet.complete");
         } else {
-            args[1] = sm.getString("statusServlet.title");
+            args[1] = smClient.getString("statusServlet.title");
         }
         // use StatusTransformer to output status
         StatusTransformer.writeBody(writer,args,mode);
 
         // Manager Section
         args = new Object[9];
-        args[0] = sm.getString("htmlManagerServlet.manager");
+        args[0] = smClient.getString("htmlManagerServlet.manager");
         args[1] = response.encodeURL(request.getContextPath() + "/html/list");
-        args[2] = sm.getString("htmlManagerServlet.list");
+        args[2] = smClient.getString("htmlManagerServlet.list");
         args[3] = response.encodeURL
             (request.getContextPath() + "/" +
-             sm.getString("htmlManagerServlet.helpHtmlManagerFile"));
-        args[4] = sm.getString("htmlManagerServlet.helpHtmlManager");
+             smClient.getString("htmlManagerServlet.helpHtmlManagerFile"));
+        args[4] = smClient.getString("htmlManagerServlet.helpHtmlManager");
         args[5] = response.encodeURL
             (request.getContextPath() + "/" +
-             sm.getString("htmlManagerServlet.helpManagerFile"));
-        args[6] = sm.getString("htmlManagerServlet.helpManager");
+             smClient.getString("htmlManagerServlet.helpManagerFile"));
+        args[6] = smClient.getString("htmlManagerServlet.helpManager");
         if (completeStatus) {
             args[7] = response.encodeURL
                 (request.getContextPath() + "/status");
-            args[8] = sm.getString("statusServlet.title");
+            args[8] = smClient.getString("statusServlet.title");
         } else {
             args[7] = response.encodeURL
                 (request.getContextPath() + "/status/all");
-            args[8] = sm.getString("statusServlet.complete");
+            args[8] = smClient.getString("statusServlet.complete");
         }
         // use StatusTransformer to output status
         StatusTransformer.writeManager(writer,args,mode);
 
         // Server Header Section
         args = new Object[9];
-        args[0] = sm.getString("htmlManagerServlet.serverTitle");
-        args[1] = sm.getString("htmlManagerServlet.serverVersion");
-        args[2] = sm.getString("htmlManagerServlet.serverJVMVersion");
-        args[3] = sm.getString("htmlManagerServlet.serverJVMVendor");
-        args[4] = sm.getString("htmlManagerServlet.serverOSName");
-        args[5] = sm.getString("htmlManagerServlet.serverOSVersion");
-        args[6] = sm.getString("htmlManagerServlet.serverOSArch");
-        args[7] = sm.getString("htmlManagerServlet.serverHostname");
-        args[8] = sm.getString("htmlManagerServlet.serverIPAddress");
+        args[0] = smClient.getString("htmlManagerServlet.serverTitle");
+        args[1] = smClient.getString("htmlManagerServlet.serverVersion");
+        args[2] = smClient.getString("htmlManagerServlet.serverJVMVersion");
+        args[3] = smClient.getString("htmlManagerServlet.serverJVMVendor");
+        args[4] = smClient.getString("htmlManagerServlet.serverOSName");
+        args[5] = smClient.getString("htmlManagerServlet.serverOSVersion");
+        args[6] = smClient.getString("htmlManagerServlet.serverOSArch");
+        args[7] = smClient.getString("htmlManagerServlet.serverHostname");
+        args[8] = smClient.getString("htmlManagerServlet.serverIPAddress");
         // use StatusTransformer to output status
         StatusTransformer.writePageHeading(writer,args,mode);
 
@@ -289,26 +292,26 @@ public class StatusManagerServlet
 
             // Display operating system statistics using APR if available
             args = new Object[7];
-            args[0] = sm.getString("htmlManagerServlet.osPhysicalMemory");
-            args[1] = sm.getString("htmlManagerServlet.osAvailableMemory");
-            args[2] = sm.getString("htmlManagerServlet.osTotalPageFile");
-            args[3] = sm.getString("htmlManagerServlet.osFreePageFile");
-            args[4] = sm.getString("htmlManagerServlet.osMemoryLoad");
-            args[5] = sm.getString("htmlManagerServlet.osKernelTime");
-            args[6] = sm.getString("htmlManagerServlet.osUserTime");
+            args[0] = smClient.getString("htmlManagerServlet.osPhysicalMemory");
+            args[1] = smClient.getString("htmlManagerServlet.osAvailableMemory");
+            args[2] = smClient.getString("htmlManagerServlet.osTotalPageFile");
+            args[3] = smClient.getString("htmlManagerServlet.osFreePageFile");
+            args[4] = smClient.getString("htmlManagerServlet.osMemoryLoad");
+            args[5] = smClient.getString("htmlManagerServlet.osKernelTime");
+            args[6] = smClient.getString("htmlManagerServlet.osUserTime");
             StatusTransformer.writeOSState(writer, mode, args);
 
             // Display virtual machine statistics
             args = new Object[9];
-            args[0] = sm.getString("htmlManagerServlet.jvmFreeMemory");
-            args[1] = sm.getString("htmlManagerServlet.jvmTotalMemory");
-            args[2] = sm.getString("htmlManagerServlet.jvmMaxMemory");
-            args[3] = sm.getString("htmlManagerServlet.jvmTableTitleMemoryPool");
-            args[4] = sm.getString("htmlManagerServlet.jvmTableTitleType");
-            args[5] = sm.getString("htmlManagerServlet.jvmTableTitleInitial");
-            args[6] = sm.getString("htmlManagerServlet.jvmTableTitleTotal");
-            args[7] = sm.getString("htmlManagerServlet.jvmTableTitleMaximum");
-            args[8] = sm.getString("htmlManagerServlet.jvmTableTitleUsed");
+            args[0] = smClient.getString("htmlManagerServlet.jvmFreeMemory");
+            args[1] = smClient.getString("htmlManagerServlet.jvmTotalMemory");
+            args[2] = smClient.getString("htmlManagerServlet.jvmMaxMemory");
+            args[3] = smClient.getString("htmlManagerServlet.jvmTableTitleMemoryPool");
+            args[4] = smClient.getString("htmlManagerServlet.jvmTableTitleType");
+            args[5] = smClient.getString("htmlManagerServlet.jvmTableTitleInitial");
+            args[6] = smClient.getString("htmlManagerServlet.jvmTableTitleTotal");
+            args[7] = smClient.getString("htmlManagerServlet.jvmTableTitleMaximum");
+            args[8] = smClient.getString("htmlManagerServlet.jvmTableTitleUsed");
             // use StatusTransformer to output status
             StatusTransformer.writeVMState(writer,mode, args);
 
@@ -317,25 +320,25 @@ public class StatusManagerServlet
                 ObjectName objectName = enumeration.nextElement();
                 String name = objectName.getKeyProperty("name");
                 args = new Object[19];
-                args[0] = sm.getString("htmlManagerServlet.connectorStateMaxThreads");
-                args[1] = sm.getString("htmlManagerServlet.connectorStateThreadCount");
-                args[2] = sm.getString("htmlManagerServlet.connectorStateThreadBusy");
-                args[3] = sm.getString("htmlManagerServlet.connectorStateAliveSocketCount");
-                args[4] = sm.getString("htmlManagerServlet.connectorStateMaxProcessingTime");
-                args[5] = sm.getString("htmlManagerServlet.connectorStateProcessingTime");
-                args[6] = sm.getString("htmlManagerServlet.connectorStateRequestCount");
-                args[7] = sm.getString("htmlManagerServlet.connectorStateErrorCount");
-                args[8] = sm.getString("htmlManagerServlet.connectorStateBytesRecieved");
-                args[9] = sm.getString("htmlManagerServlet.connectorStateBytesSent");
-                args[10] = sm.getString("htmlManagerServlet.connectorStateTableTitleStage");
-                args[11] = sm.getString("htmlManagerServlet.connectorStateTableTitleTime");
-                args[12] = sm.getString("htmlManagerServlet.connectorStateTableTitleBSent");
-                args[13] = sm.getString("htmlManagerServlet.connectorStateTableTitleBRecv");
-                args[14] = sm.getString("htmlManagerServlet.connectorStateTableTitleClientForw");
-                args[15] = sm.getString("htmlManagerServlet.connectorStateTableTitleClientAct");
-                args[16] = sm.getString("htmlManagerServlet.connectorStateTableTitleVHost");
-                args[17] = sm.getString("htmlManagerServlet.connectorStateTableTitleRequest");
-                args[18] = sm.getString("htmlManagerServlet.connectorStateHint");
+                args[0] = smClient.getString("htmlManagerServlet.connectorStateMaxThreads");
+                args[1] = smClient.getString("htmlManagerServlet.connectorStateThreadCount");
+                args[2] = smClient.getString("htmlManagerServlet.connectorStateThreadBusy");
+                args[3] = smClient.getString("htmlManagerServlet.connectorStateAliveSocketCount");
+                args[4] = smClient.getString("htmlManagerServlet.connectorStateMaxProcessingTime");
+                args[5] = smClient.getString("htmlManagerServlet.connectorStateProcessingTime");
+                args[6] = smClient.getString("htmlManagerServlet.connectorStateRequestCount");
+                args[7] = smClient.getString("htmlManagerServlet.connectorStateErrorCount");
+                args[8] = smClient.getString("htmlManagerServlet.connectorStateBytesRecieved");
+                args[9] = smClient.getString("htmlManagerServlet.connectorStateBytesSent");
+                args[10] = smClient.getString("htmlManagerServlet.connectorStateTableTitleStage");
+                args[11] = smClient.getString("htmlManagerServlet.connectorStateTableTitleTime");
+                args[12] = smClient.getString("htmlManagerServlet.connectorStateTableTitleBSent");
+                args[13] = smClient.getString("htmlManagerServlet.connectorStateTableTitleBRecv");
+                args[14] = smClient.getString("htmlManagerServlet.connectorStateTableTitleClientForw");
+                args[15] = smClient.getString("htmlManagerServlet.connectorStateTableTitleClientAct");
+                args[16] = smClient.getString("htmlManagerServlet.connectorStateTableTitleVHost");
+                args[17] = smClient.getString("htmlManagerServlet.connectorStateTableTitleRequest");
+                args[18] = smClient.getString("htmlManagerServlet.connectorStateHint");
                 // use StatusTransformer to output status
                 StatusTransformer.writeConnectorState
                     (writer, objectName,

==================================================
HostManagerServlet.java
index 9bb0d3bc30..5f4027a2ca 100644
--- a/java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java
+++ b/java/org/apache/catalina/manager/host/HTMLHostManagerServlet.java
@@ -330,6 +330,8 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
             smClient.getString("htmlHostManagerServlet.hostsStop");
         String hostsRemove =
             smClient.getString("htmlHostManagerServlet.hostsRemove");
+        String hostThis =
+            smClient.getString("htmlHostManagerServlet.hostThis");
 
         for (Map.Entry<String, String> entry : sortedHostNamesMap.entrySet()) {
             String hostName = entry.getKey();
@@ -357,7 +359,7 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
                 writer.print
                     (MessageFormat.format(HOSTS_ROW_DETAILS_SECTION, args));
 
-                args = new Object[4];
+                args = new Object[5];
                 if (host.getState().isAvailable()) {
                     args[0] = response.encodeURL
                     (request.getContextPath() +
@@ -376,6 +378,7 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
                      "/html/remove?name=" +
                      URLEncoder.encode(hostName, "UTF-8"));
                 args[3] = hostsRemove;
+                args[4] = hostThis;
                 if (host == this.installedHost) {
                     writer.print(MessageFormat.format(
                             MANAGER_HOST_ROW_BUTTON_SECTION, args));
@@ -493,9 +496,7 @@ public final class HTMLHostManagerServlet extends HostManagerServlet {
 
     private static final String MANAGER_HOST_ROW_BUTTON_SECTION =
         " <td class=\"row-left\">\n" +
-        "  <small>\n" +
-        sm.getString("htmlHostManagerServlet.hostThis") +
-        "  </small>\n" +
+        "  <small>{4}</small>\n" +
         " </td>\n" +
         "</tr>\n";
 

==================================================
