1fcd01555914ab4845e1a8f3c05a59d4a8c37977
==================================================
Fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=55285
==================================================
Jeremy Boynes
==================================================
Sat Jul 20 20:22:41 2013 +0000
==================================================
Context.java
Fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=55285
Have JspConfigDescriptor related classes clone collections when returning them to application code.
As ContextConfig can no longer mutate the config stored in StandardContext, 
add a setter to Context to provide a fully configured JspConfigDescriptor

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1505199 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ApplicationContext.java
index 8aa3232f26..c8b1d379dc 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -1277,9 +1277,15 @@ public interface Context extends Container {
 
     /**
      * Obtain the JSP configuration for this context.
+     * Will be null if there is no JSP configuration.
      */
     public JspConfigDescriptor getJspConfigDescriptor();
 
+    /**
+     * Set the JspConfigDescriptor for this context.
+     * A null value indicates there is not JSP configuration.
+     */
+    public void setJspConfigDescriptor(JspConfigDescriptor descriptor);
 
     /**
      * Add a ServletContainerInitializer instance to this web application.

==================================================
StandardContext.java
index 61aa8bd6be..c86e1b0677 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -1399,14 +1399,7 @@ public class ApplicationContext
 
     @Override
     public JspConfigDescriptor getJspConfigDescriptor() {
-        JspConfigDescriptor jspConfigDescriptor = context
-                .getJspConfigDescriptor();
-        if (jspConfigDescriptor.getJspPropertyGroups().isEmpty()
-                && jspConfigDescriptor.getTaglibs().isEmpty()) {
-            return null;
-        } else {
-            return jspConfigDescriptor;
-        }
+        return context.getJspConfigDescriptor();
     }
 
 

==================================================
ContextConfig.java
index c6be998c80..c8f449d49c 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -821,8 +821,7 @@ public class StandardContext extends ContainerBase
 
     private int effectiveMinorVersion = 0;
 
-    private JspConfigDescriptor jspConfigDescriptor =
-        new JspConfigDescriptorImpl();
+    private JspConfigDescriptor jspConfigDescriptor = null;
 
     private Set<String> resourceOnlyServlets = new HashSet<>();
 
@@ -2514,6 +2513,10 @@ public class StandardContext extends ContainerBase
         return jspConfigDescriptor;
     }
 
+    @Override
+    public void setJspConfigDescriptor(JspConfigDescriptor descriptor) {
+        this.jspConfigDescriptor = descriptor;
+    }
 
     // ------------------------------------------------------ Public Properties
 
@@ -5697,7 +5700,7 @@ public class StandardContext extends ContainerBase
         applicationListeners = new ApplicationListener[0];
         applicationEventListenersObjects = new Object[0];
         applicationLifecycleListenersObjects = new Object[0];
-        jspConfigDescriptor = new JspConfigDescriptorImpl();
+        jspConfigDescriptor = null;
 
         initializers.clear();
 

==================================================
FailedContext.java
index 406f13d7fd..79f1506461 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -1275,13 +1275,7 @@ public class ContextConfig implements LifecycleListener {
         for (FilterMap filterMap : webxml.getFilterMappings()) {
             context.addFilterMap(filterMap);
         }
-        for (JspPropertyGroup jspPropertyGroup :
-                webxml.getJspPropertyGroups()) {
-            JspPropertyGroupDescriptor descriptor =
-                new JspPropertyGroupDescriptorImpl(jspPropertyGroup);
-            context.getJspConfigDescriptor().getJspPropertyGroups().add(
-                    descriptor);
-        }
+        context.setJspConfigDescriptor(webxml.getJspConfigDescriptor());
         for (String listener : webxml.getListeners()) {
             context.addApplicationListener(
                     new ApplicationListener(listener, false));
@@ -1409,11 +1403,6 @@ public class ContextConfig implements LifecycleListener {
                         sessionConfig.getSessionTrackingModes());
             }
         }
-        for (Entry<String, String> entry : webxml.getTaglibs().entrySet()) {
-            TaglibDescriptor descriptor = new TaglibDescriptorImpl(
-                    entry.getValue(), entry.getKey());
-            context.getJspConfigDescriptor().getTaglibs().add(descriptor);
-        }
 
         // Context doesn't use version directly
 

==================================================
TldConfig.java
index d654ac97dd..5e87506cb8 100644
--- a/java/org/apache/catalina/startup/FailedContext.java
+++ b/java/org/apache/catalina/startup/FailedContext.java
@@ -639,6 +639,9 @@ public class FailedContext extends LifecycleMBeanBase implements Context {
     @Override
     public JspConfigDescriptor getJspConfigDescriptor() { return null; }
 
+    @Override
+    public void setJspConfigDescriptor(JspConfigDescriptor descriptor) { /* NO-OP */ }
+
     @Override
     public void addServletContainerInitializer(ServletContainerInitializer sci,
             Set<Class<?>> classes) { /* NO-OP */ }

==================================================
JspConfigDescriptorImpl.java
index 575a0938a5..4a76899030 100644
--- a/java/org/apache/catalina/startup/TldConfig.java
+++ b/java/org/apache/catalina/startup/TldConfig.java
@@ -28,6 +28,7 @@ import java.util.Iterator;
 import java.util.Set;
 
 import javax.servlet.ServletContext;
+import javax.servlet.descriptor.JspConfigDescriptor;
 import javax.servlet.descriptor.TaglibDescriptor;
 
 import org.apache.catalina.Context;
@@ -284,9 +285,12 @@ public final class TldConfig  implements LifecycleListener {
             log.trace(sm.getString("tldConfig.webxmlStart"));
         }
 
-        Collection<TaglibDescriptor> descriptors =
-            context.getJspConfigDescriptor().getTaglibs();
+        JspConfigDescriptor jspConfigDescriptor = context.getJspConfigDescriptor();
+        if (jspConfigDescriptor == null) {
+            return;
+        }
 
+        Collection<TaglibDescriptor> descriptors = jspConfigDescriptor.getTaglibs();
         for (TaglibDescriptor descriptor : descriptors) {
             String resourcePath = descriptor.getTaglibLocation();
             // Note: Whilst the Servlet 2.4 DTD implies that the location must

==================================================
JspPropertyGroupDescriptorImpl.java
index 54f2160755..edd1bc16a7 100644
--- a/java/org/apache/tomcat/util/descriptor/web/JspConfigDescriptorImpl.java
+++ b/java/org/apache/tomcat/util/descriptor/web/JspConfigDescriptorImpl.java
@@ -17,29 +17,30 @@
 
 package org.apache.tomcat.util.descriptor.web;
 
+import java.util.ArrayList;
 import java.util.Collection;
-import java.util.HashSet;
-import java.util.LinkedHashSet;
-
 import javax.servlet.descriptor.JspConfigDescriptor;
 import javax.servlet.descriptor.JspPropertyGroupDescriptor;
 import javax.servlet.descriptor.TaglibDescriptor;
 
 public class JspConfigDescriptorImpl implements JspConfigDescriptor {
 
-    private final Collection<JspPropertyGroupDescriptor> jspPropertyGroups =
-        new LinkedHashSet<>();
+    private final Collection<JspPropertyGroupDescriptor> jspPropertyGroups;
+    private final Collection<TaglibDescriptor> taglibs;
 
-    private final Collection<TaglibDescriptor> taglibs = new HashSet<>();
+    public JspConfigDescriptorImpl(Collection<JspPropertyGroupDescriptor> jspPropertyGroups,
+                                   Collection<TaglibDescriptor> taglibs) {
+        this.jspPropertyGroups = jspPropertyGroups;
+        this.taglibs = taglibs;
+    }
 
     @Override
     public Collection<JspPropertyGroupDescriptor> getJspPropertyGroups() {
-        return jspPropertyGroups;
+        return new ArrayList<>(jspPropertyGroups);
     }
 
     @Override
     public Collection<TaglibDescriptor> getTaglibs() {
-        return taglibs;
+        return new ArrayList<>(taglibs);
     }
-
 }

==================================================
WebXml.java
index 509e6b001b..a72502fe3b 100644
--- a/java/org/apache/tomcat/util/descriptor/web/JspPropertyGroupDescriptorImpl.java
+++ b/java/org/apache/tomcat/util/descriptor/web/JspPropertyGroupDescriptorImpl.java
@@ -16,6 +16,7 @@
  */
 package org.apache.tomcat.util.descriptor.web;
 
+import java.util.ArrayList;
 import java.util.Collection;
 
 import javax.servlet.descriptor.JspPropertyGroupDescriptor;
@@ -97,13 +98,13 @@ public class JspPropertyGroupDescriptorImpl
 
     @Override
     public Collection<String> getIncludeCodas() {
-        return jspPropertyGroup.getIncludeCodas();
+        return new ArrayList<>(jspPropertyGroup.getIncludeCodas());
     }
 
 
     @Override
     public Collection<String> getIncludePreludes() {
-        return jspPropertyGroup.getIncludePreludes();
+        return new ArrayList<>(jspPropertyGroup.getIncludePreludes());
     }
 
 
@@ -157,6 +158,6 @@ public class JspPropertyGroupDescriptorImpl
 
     @Override
     public Collection<String> getUrlPatterns() {
-        return jspPropertyGroup.getUrlPatterns();
+        return new ArrayList<>(jspPropertyGroup.getUrlPatterns());
     }
 }

==================================================
TestApplicationContext.java
index 2947e82557..7c59ee6978 100644
--- a/java/org/apache/tomcat/util/descriptor/web/WebXml.java
+++ b/java/org/apache/tomcat/util/descriptor/web/WebXml.java
@@ -18,6 +18,7 @@ package org.apache.tomcat.util.descriptor.web;
 
 import java.net.URL;
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.EnumSet;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -564,19 +565,23 @@ public class WebXml {
         if (jspPropertyGroups.isEmpty() && taglibs.isEmpty()) {
             return null;
         }
-        JspConfigDescriptorImpl jspConfigDescriptor = new JspConfigDescriptorImpl();
+
+        Collection<JspPropertyGroupDescriptor> descriptors =
+                new ArrayList<>(jspPropertyGroups.size());
         for (JspPropertyGroup jspPropertyGroup : jspPropertyGroups) {
             JspPropertyGroupDescriptor descriptor =
                     new JspPropertyGroupDescriptorImpl(jspPropertyGroup);
-            jspConfigDescriptor.getJspPropertyGroups().add(descriptor);
+            descriptors.add(descriptor);
 
         }
+
+        Collection<TaglibDescriptor> tlds = new HashSet<>(taglibs.size());
         for (Entry<String, String> entry : taglibs.entrySet()) {
             TaglibDescriptor descriptor = new TaglibDescriptorImpl(
                     entry.getValue(), entry.getKey());
-            jspConfigDescriptor.getTaglibs().add(descriptor);
+            tlds.add(descriptor);
         }
-        return jspConfigDescriptor;
+        return new JspConfigDescriptorImpl(descriptors, tlds);
     }
 
     // Attributes not defined in web.xml or web-fragment.xml

==================================================
TesterContext.java
index 44dbc4d867..15be55bd16 100644
--- a/test/org/apache/catalina/core/TestApplicationContext.java
+++ b/test/org/apache/catalina/core/TestApplicationContext.java
@@ -121,7 +121,6 @@ public class TestApplicationContext extends TomcatBaseTest {
     }
 
     @Test
-    @Ignore("Bug 55285")
     public void testJspPropertyGroupsAreIsolated() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 

==================================================
TestJspConfigDescriptorImpl.java
index d01a42aaad..4b9e4c26bb 100644
--- a/test/org/apache/catalina/core/TesterContext.java
+++ b/test/org/apache/catalina/core/TesterContext.java
@@ -1010,6 +1010,11 @@ public class TesterContext implements Context {
         return null;
     }
 
+    @Override
+    public void setJspConfigDescriptor(JspConfigDescriptor descriptor) {
+        // NO-OP
+    }
+
     @Override
     public void addServletContainerInitializer(ServletContainerInitializer sci,
             Set<Class<?>> classes) {

==================================================
TestJspPropertyGroupDescriptorImpl.java
new file mode 100644
index 0000000000..b46e25f19d
--- /dev/null
+++ b/test/org/apache/tomcat/util/descriptor/web/TestJspConfigDescriptorImpl.java
@@ -0,0 +1,50 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.util.descriptor.web;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import javax.servlet.descriptor.JspConfigDescriptor;
+import javax.servlet.descriptor.JspPropertyGroupDescriptor;
+import javax.servlet.descriptor.TaglibDescriptor;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class TestJspConfigDescriptorImpl {
+
+    @Test
+    public void testTaglibsAreIsolate() {
+        List<TaglibDescriptor> taglibs = new ArrayList<>();
+        taglibs.add(new TaglibDescriptorImpl("location", "uri"));
+        List<JspPropertyGroupDescriptor> propertyGroups = Collections.emptyList();
+        JspConfigDescriptor descriptor = new JspConfigDescriptorImpl(propertyGroups, taglibs);
+        descriptor.getTaglibs().clear();
+        Assert.assertEquals(taglibs, descriptor.getTaglibs());
+    }
+
+    @Test
+    public void testPropertyGroupsAreIsolate() {
+        List<TaglibDescriptor> taglibs = Collections.emptyList();
+        List<JspPropertyGroupDescriptor> propertyGroups = new ArrayList<>();
+        propertyGroups.add(new JspPropertyGroupDescriptorImpl(new JspPropertyGroup()));
+        JspConfigDescriptor descriptor = new JspConfigDescriptorImpl(propertyGroups, taglibs);
+        descriptor.getJspPropertyGroups().clear();
+        Assert.assertEquals(propertyGroups, descriptor.getJspPropertyGroups());
+    }
+}

==================================================
