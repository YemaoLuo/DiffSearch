3ea791f10e2e067922fd2de49ddc9cf295221e6e
==================================================
- Refactor exception reporting using Throwable.getCause, since TC 6 does not have the restrictions for modifications
==================================================
Remy Maucherat
==================================================
Thu Oct 26 13:08:58 2006 +0000
==================================================
ServletException.java
- Refactor exception reporting using Throwable.getCause, since TC 6 does not have the restrictions for modifications
  to the API implementation classes.
- ServletException.getRootCause now calls getCause.
- Also add some tweaks for robustness to cap recursion.
- Let me know if I did it wrong.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@467989 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StandardWrapper.java
index 59b4044c02..c13e77fd92 100644
--- a/java/javax/servlet/ServletException.java
+++ b/java/javax/servlet/ServletException.java
@@ -23,30 +23,15 @@ package javax.servlet;
  *
  * @author 	Various
  * @version 	$Version$
- *
  */
-
-
 public class ServletException extends Exception {
 
-    private Throwable rootCause;
-
-
-
-
-
     /**
      * Constructs a new servlet exception.
-     *
      */
-
     public ServletException() {
-	super();
+        super();
     }
-    
-   
-
-    
 
     /**
      * Constructs a new servlet exception with the
@@ -56,16 +41,10 @@ public class ServletException extends Exception {
      * @param message 		a <code>String</code> 
      *				specifying the text of 
      *				the exception message
-     *
      */
-
     public ServletException(String message) {
-	super(message);
+        super(message);
     }
-    
-   
-   
-    
 
     /**
      * Constructs a new servlet exception when the servlet 
@@ -73,7 +52,6 @@ public class ServletException extends Exception {
      * about the "root cause" exception that interfered with its 
      * normal operation, including a description message.
      *
-     *
      * @param message 		a <code>String</code> containing 
      *				the text of the exception message
      *
@@ -81,18 +59,11 @@ public class ServletException extends Exception {
      *				that interfered with the servlet's
      *				normal operation, making this servlet
      *				exception necessary
-     *
      */
-    
     public ServletException(String message, Throwable rootCause) {
-	super(message);
-	this.rootCause = rootCause;
+        super(message, rootCause);
     }
 
-
-
-
-
     /**
      * Constructs a new servlet exception when the servlet 
      * needs to throw an exception and include a message
@@ -110,33 +81,18 @@ public class ServletException extends Exception {
      * 				that interfered with the servlet's
      *				normal operation, making the servlet exception
      *				necessary
-     *
      */
-
     public ServletException(Throwable rootCause) {
-	super(rootCause.getLocalizedMessage());
-	this.rootCause = rootCause;
+        this(rootCause.getLocalizedMessage(), rootCause);
     }
-  
-  
- 
- 
-    
+
     /**
      * Returns the exception that caused this servlet exception.
      *
-     *
      * @return			the <code>Throwable</code> 
      *				that caused this servlet exception
-     *
      */
-    
     public Throwable getRootCause() {
-	return rootCause;
+        return getCause();
     }
 }
-
-
-
-
-

==================================================
ErrorReportValve.java
index a08c226206..28e278cf26 100644
--- a/java/org/apache/catalina/core/StandardWrapper.java
+++ b/java/org/apache/catalina/core/StandardWrapper.java
@@ -679,17 +679,13 @@ public class StandardWrapper
         Throwable rootCause = e;
         Throwable rootCauseCheck = null;
         // Extra aggressive rootCause finding
+        int loops = 0;
         do {
-            try {
-                rootCauseCheck = (Throwable)IntrospectionUtils.getProperty
-                                            (rootCause, "rootCause");
-                if (rootCauseCheck!=null)
-                    rootCause = rootCauseCheck;
-
-            } catch (ClassCastException ex) {
-                rootCauseCheck = null;
-            }
-        } while (rootCauseCheck != null);
+            loops++;
+            rootCauseCheck = rootCause.getCause();
+            if (rootCauseCheck != null)
+                rootCause = rootCauseCheck;
+        } while (rootCauseCheck != null && (loops < 20));
         return rootCause;
     }
 

==================================================
