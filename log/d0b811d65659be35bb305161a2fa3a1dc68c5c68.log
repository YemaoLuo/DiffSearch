d0b811d65659be35bb305161a2fa3a1dc68c5c68
==================================================
Remove class_name argument from constructor, as Tomcat does not provide the name.
==================================================
Konstantin Kolinko
==================================================
Fri Sep 12 21:04:36 2014 +0000
==================================================
ContextConfig.java
Remove class_name argument from constructor, as Tomcat does not provide the name.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1624647 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ClassParser.java
index cc636f1e08..d435975af0 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -1982,7 +1982,7 @@ public class ContextConfig implements LifecycleListener {
             boolean handlesTypesOnly)
             throws ClassFormatException, IOException {
 
-        ClassParser parser = new ClassParser(is, null);
+        ClassParser parser = new ClassParser(is);
         JavaClass clazz = parser.parse();
         checkHandlesTypes(clazz);
 
@@ -2142,7 +2142,7 @@ public class ContextConfig implements LifecycleListener {
                 if (is == null) {
                     return;
                 }
-                ClassParser parser = new ClassParser(is, null);
+                ClassParser parser = new ClassParser(is);
                 JavaClass clazz = parser.parse();
                 populateJavaClassCache(clazz.getClassName(), clazz);
             } catch (ClassFormatException e) {

==================================================
TesterPerformance.java
index 1df34cb371..f5cab8939f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
@@ -43,7 +43,6 @@ public final class ClassParser {
     private static final int MAGIC = 0xCAFEBABE;
 
     private final DataInputStream file;
-    private final String file_name;
     private String class_name, superclass_name;
     private int access_flags; // Access rights of parsed class
     private String[] interface_names; // Names of implemented interfaces
@@ -57,10 +56,8 @@ public final class ClassParser {
      * Parse class from the given stream.
      *
      * @param file Input stream
-     * @param file_name File name
      */
-    public ClassParser(InputStream file, String file_name) {
-        this.file_name = file_name;
+    public ClassParser(InputStream file) {
         if (file instanceof DataInputStream) {
             this.file = (DataInputStream) file;
         } else {
@@ -158,7 +155,7 @@ public final class ClassParser {
         }
         if (((access_flags & Constants.ACC_ABSTRACT) != 0)
                 && ((access_flags & Constants.ACC_FINAL) != 0)) {
-            throw new ClassFormatException("Class " + file_name + " can't be both final and abstract");
+            throw new ClassFormatException("Class can't be both final and abstract");
         }
 
         int class_name_index = file.readUnsignedShort();
@@ -206,7 +203,7 @@ public final class ClassParser {
      */
     private void readID() throws IOException, ClassFormatException {
         if (file.readInt() != MAGIC) {
-            throw new ClassFormatException(file_name + " is not a Java .class file");
+            throw new ClassFormatException("It is not a Java .class file");
         }
     }
 

==================================================
