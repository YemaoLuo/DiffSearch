732bca7cd081a0a46ac71c9778e8c869939f95c3
==================================================
Clean-up Java 7 <>
==================================================
Mark Emlyn
==================================================
Tue Sep 11 21:14:27 2012 +0000
==================================================
CheckEol.java
Clean-up Java 7 <>

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1383614 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Txt2Html.java
index 0a1b6ced4b..df39f99e55 100644
--- a/java/org/apache/tomcat/buildutil/CheckEol.java
+++ b/java/org/apache/tomcat/buildutil/CheckEol.java
@@ -44,7 +44,7 @@ public class CheckEol extends Task {
     private static final String eoln = System.getProperty("line.separator");
 
     /** The files to be checked */
-    private final List<FileSet> filesets = new LinkedList<FileSet>();
+    private final List<FileSet> filesets = new LinkedList<>();
 
     /**
      * Sets the files to be checked
@@ -77,7 +77,7 @@ public class CheckEol extends Task {
 
         int count = 0;
 
-        List<CheckFailure> errors = new ArrayList<CheckFailure>();
+        List<CheckFailure> errors = new ArrayList<>();
 
         // Step through each file and check.
         for (FileSet fs : filesets) {

==================================================
AprSocketContext.java
index 593048c8ae..e6e619dd84 100644
--- a/java/org/apache/tomcat/buildutil/Txt2Html.java
+++ b/java/org/apache/tomcat/buildutil/Txt2Html.java
@@ -50,7 +50,7 @@ public class Txt2Html
     private File todir;
 
     /** The file to be converted into HTML */
-    private final List<FileSet> filesets = new LinkedList<FileSet>();
+    private final List<FileSet> filesets = new LinkedList<>();
 
     /**
      * Sets the directory to contain the resulting files

==================================================
SpdyConnection.java
index fa8747fa27..c8a2690278 100644
--- a/java/org/apache/tomcat/jni/socket/AprSocketContext.java
+++ b/java/org/apache/tomcat/jni/socket/AprSocketContext.java
@@ -118,7 +118,7 @@ public class AprSocketContext {
     /**
      * Pollers.
      */
-    List<AprPoller> pollers = new ArrayList<AprPoller>();
+    List<AprPoller> pollers = new ArrayList<>();
     static int pollerCnt = 0;
 
     // Set on all accepted or connected sockets.
@@ -133,7 +133,7 @@ public class AprSocketContext {
     // If false: use executor ( but that may choke the acceptor thread )
     protected boolean nonBlockingAccept = false;
 
-    BlockingQueue<AprSocket> acceptedQueue = new LinkedBlockingQueue<AprSocket>();
+    BlockingQueue<AprSocket> acceptedQueue = new LinkedBlockingQueue<>();
 
     /**
      * Root APR memory pool.
@@ -167,7 +167,7 @@ public class AprSocketContext {
     RawDataHandler rawDataHandler = null;
 
     // TODO: do we need this here ?
-    protected Map<String, HostInfo> hosts = new HashMap<String, HostInfo>();
+    protected Map<String, HostInfo> hosts = new HashMap<>();
 
     String[] enabledCiphers;
 
@@ -963,7 +963,7 @@ public class AprSocketContext {
 
         // Should be replaced with socket data.
         // used only to lookup by socket
-        Map<Long, AprSocket> channels = new HashMap<Long, AprSocket>();
+        Map<Long, AprSocket> channels = new HashMap<>();
 
         // Active + pending, must be < desc.length / 2
         // The channel will also have poller=this when active or pending
@@ -974,7 +974,7 @@ public class AprSocketContext {
 
         protected AtomicInteger pollCount = new AtomicInteger();
 
-        private List<AprSocket> updates = new ArrayList<AprSocket>();
+        private List<AprSocket> updates = new ArrayList<>();
 
         @Override
         public void run() {

==================================================
SpdyStream.java
index ad8c8987ad..62f0904ffd 100644
--- a/java/org/apache/tomcat/spdy/SpdyConnection.java
+++ b/java/org/apache/tomcat/spdy/SpdyConnection.java
@@ -47,7 +47,7 @@ public abstract class SpdyConnection { // implements Runnable {
     protected CompressSupport compressSupport;
 
     // Fields stored for each spdy connection
-    Map<Integer, SpdyStream> channels = new HashMap<Integer, SpdyStream>();
+    Map<Integer, SpdyStream> channels = new HashMap<>();
 
     // --------------
     protected static final Logger log = Logger.getLogger(SpdyConnection.class
@@ -112,9 +112,9 @@ public abstract class SpdyConnection { // implements Runnable {
     int outStreamId = 1;
 
     // TODO: finer handling of priorities
-    LinkedList<SpdyFrame> prioriyQueue = new LinkedList<SpdyFrame>();
+    LinkedList<SpdyFrame> prioriyQueue = new LinkedList<>();
 
-    LinkedList<SpdyFrame> outQueue = new LinkedList<SpdyFrame>();
+    LinkedList<SpdyFrame> outQueue = new LinkedList<>();
 
     // --------------
 
@@ -512,7 +512,7 @@ public abstract class SpdyConnection { // implements Runnable {
         System.err.println(msg);
         inClosed = true;
 
-        List<Integer> ch = new ArrayList<Integer>(channels.keySet());
+        List<Integer> ch = new ArrayList<>(channels.keySet());
         for (Integer i: ch) {
             SpdyStream stream = channels.remove(i);
             if (stream != null) {
@@ -525,7 +525,7 @@ public abstract class SpdyConnection { // implements Runnable {
         System.err.println(msg);
         inClosed = true;
 
-        List<Integer> ch = new ArrayList<Integer>(channels.keySet());
+        List<Integer> ch = new ArrayList<>(channels.keySet());
         for (Integer i: ch) {
             if (i > last) {
                 SpdyStream stream = channels.remove(i);

==================================================
IntrospectionUtils.java
index 65748131fb..17fcec6af2 100644
--- a/java/org/apache/tomcat/spdy/SpdyStream.java
+++ b/java/org/apache/tomcat/spdy/SpdyStream.java
@@ -50,7 +50,7 @@ public class SpdyStream implements Runnable {
     /**
      * For blocking support.
      */
-    protected BlockingQueue<SpdyFrame> inData = new LinkedBlockingQueue<SpdyFrame>();
+    protected BlockingQueue<SpdyFrame> inData = new LinkedBlockingQueue<>();
 
     protected boolean finSent;
 

==================================================
B2CConverter.java
index 84479a93ec..c79cc56773 100644
--- a/java/org/apache/tomcat/util/IntrospectionUtils.java
+++ b/java/org/apache/tomcat/util/IntrospectionUtils.java
@@ -296,8 +296,7 @@ public final class IntrospectionUtils {
         objectMethods.clear();
     }
 
-    static Hashtable<Class<?>,Method[]> objectMethods =
-        new Hashtable<Class<?>,Method[]>();
+    static Hashtable<Class<?>,Method[]> objectMethods = new Hashtable<>();
 
     public static Method[] findMethods(Class<?> c) {
         Method methods[] = objectMethods.get(c);

==================================================
StringCache.java
index 4862f268f9..8a803e5f94 100644
--- a/java/org/apache/tomcat/util/buf/B2CConverter.java
+++ b/java/org/apache/tomcat/util/buf/B2CConverter.java
@@ -48,7 +48,7 @@ public class B2CConverter {
         StringManager.getManager(Constants.Package);
 
     private static final Map<String, Charset> encodingToCharsetCache =
-        new HashMap<String, Charset>();
+            new HashMap<>();
 
     public static final Charset ISO_8859_1;
     public static final Charset UTF_8;

==================================================
ManagedConcurrentWeakHashMap.java
index 420207c4c8..3811b785f6 100644
--- a/java/org/apache/tomcat/util/buf/StringCache.java
+++ b/java/org/apache/tomcat/util/buf/StringCache.java
@@ -65,7 +65,7 @@ public class StringCache {
      * Statistics hash map for byte chunk.
      */
     protected static final HashMap<ByteEntry,int[]> bcStats =
-        new HashMap<ByteEntry,int[]>(cacheSize);
+            new HashMap<>(cacheSize);
 
 
     /**
@@ -84,7 +84,7 @@ public class StringCache {
      * Statistics hash map for char chunk.
      */
     protected static final HashMap<CharEntry,int[]> ccStats =
-        new HashMap<CharEntry,int[]>(cacheSize);
+            new HashMap<>(cacheSize);
 
 
     /**
@@ -233,7 +233,7 @@ public class StringCache {
                         long t1 = System.currentTimeMillis();
                         // Sort the entries according to occurrence
                         TreeMap<Integer,ArrayList<ByteEntry>> tempMap =
-                            new TreeMap<Integer,ArrayList<ByteEntry>>();
+                                new TreeMap<>();
                         for (Entry<ByteEntry,int[]> item : bcStats.entrySet()) {
                             ByteEntry entry = item.getKey();
                             int[] countA = item.getValue();
@@ -242,7 +242,7 @@ public class StringCache {
                             ArrayList<ByteEntry> list = tempMap.get(count);
                             if (list == null) {
                                 // Create list
-                                list = new ArrayList<ByteEntry>();
+                                list = new ArrayList<>();
                                 tempMap.put(count, list);
                             }
                             list.add(entry);
@@ -350,7 +350,7 @@ public class StringCache {
                         long t1 = System.currentTimeMillis();
                         // Sort the entries according to occurrence
                         TreeMap<Integer,ArrayList<CharEntry>> tempMap =
-                            new TreeMap<Integer,ArrayList<CharEntry>>();
+                                new TreeMap<>();
                         for (Entry<CharEntry,int[]> item : ccStats.entrySet()) {
                             CharEntry entry = item.getKey();
                             int[] countA = item.getValue();
@@ -359,7 +359,7 @@ public class StringCache {
                             ArrayList<CharEntry> list = tempMap.get(count);
                             if (list == null) {
                                 // Create list
-                                list = new ArrayList<CharEntry>();
+                                list = new ArrayList<>();
                                 tempMap.put(count, list);
                             }
                             list.add(entry);

==================================================
CallParamRule.java
index bcd229984f..f0ea49cbb9 100644
--- a/java/org/apache/tomcat/util/collections/ManagedConcurrentWeakHashMap.java
+++ b/java/org/apache/tomcat/util/collections/ManagedConcurrentWeakHashMap.java
@@ -37,8 +37,8 @@ import java.util.concurrent.ConcurrentMap;
 public class ManagedConcurrentWeakHashMap<K, V> extends AbstractMap<K, V> implements
         ConcurrentMap<K, V> {
 
-    private final ConcurrentMap<Key, V> map = new ConcurrentHashMap<Key, V>();
-    private final ReferenceQueue<Object> queue = new ReferenceQueue<Object>();
+    private final ConcurrentMap<Key, V> map = new ConcurrentHashMap<>();
+    private final ReferenceQueue<Object> queue = new ReferenceQueue<>();
 
     /**
      * Method, that has to be invoked periodically to clean dead keys from the

==================================================
Digester.java
index 90c9cba268..1615bf5891 100644
--- a/java/org/apache/tomcat/util/digester/CallParamRule.java
+++ b/java/org/apache/tomcat/util/digester/CallParamRule.java
@@ -201,7 +201,7 @@ public class CallParamRule extends Rule {
             // so that we can make sure that the right set of parameters
             // is at the top of the stack
             if (bodyTextStack == null) {
-                bodyTextStack = new ArrayStack<String>();
+                bodyTextStack = new ArrayStack<>();
             }
             bodyTextStack.push(bodyText.trim());
         }

==================================================
FactoryCreateRule.java
index d2e2f050af..280fbbe8f8 100644
--- a/java/org/apache/tomcat/util/digester/Digester.java
+++ b/java/org/apache/tomcat/util/digester/Digester.java
@@ -168,8 +168,7 @@ public class Digester extends DefaultHandler {
     /**
      * The stack of body text string buffers for surrounding elements.
      */
-    protected ArrayStack<StringBuilder> bodyTexts =
-        new ArrayStack<StringBuilder>();
+    protected ArrayStack<StringBuilder> bodyTexts = new ArrayStack<>();
 
 
     /**
@@ -182,7 +181,7 @@ public class Digester extends DefaultHandler {
      *
      * @since 1.6
      */
-    protected ArrayStack<List<Rule>> matches = new ArrayStack<List<Rule>>(10);
+    protected ArrayStack<List<Rule>> matches = new ArrayStack<>(10);
 
     /**
      * The class loader to use for instantiating application objects.
@@ -208,8 +207,7 @@ public class Digester extends DefaultHandler {
      * The URLs of entityValidator that have been registered, keyed by the public
      * identifier that corresponds.
      */
-    protected HashMap<String,String> entityValidator =
-        new HashMap<String,String>();
+    protected HashMap<String,String> entityValidator = new HashMap<>();
 
 
     /**
@@ -250,16 +248,14 @@ public class Digester extends DefaultHandler {
      * is required because documents can declare nested uses of the same
      * prefix for different Namespace URIs).
      */
-    protected HashMap<String,ArrayStack<String>> namespaces =
-        new HashMap<String,ArrayStack<String>>();
+    protected HashMap<String,ArrayStack<String>> namespaces = new HashMap<>();
 
 
     /**
      * The parameters stack being utilized by CallMethodRule and
      * CallParamRule rules.
      */
-    protected ArrayStack<Object> params = new ArrayStack<Object>();
-
+    protected ArrayStack<Object> params = new ArrayStack<>();
 
     /**
      * The SAXParser we will use to parse the input stream.
@@ -298,7 +294,7 @@ public class Digester extends DefaultHandler {
     /**
      * The object stack being constructed.
      */
-    protected ArrayStack<Object> stack = new ArrayStack<Object>();
+    protected ArrayStack<Object> stack = new ArrayStack<>();
 
 
     /**
@@ -340,9 +336,9 @@ public class Digester extends DefaultHandler {
         LogFactory.getLog("org.apache.tomcat.util.digester.Digester.sax");
 
 
-    /** Stacks used for interrule communication, indexed by name String */
+    /** Stacks used for inter-rule communication, indexed by name String */
     private HashMap<String,ArrayStack<Object>> stacksByName =
-        new HashMap<String,ArrayStack<Object>>();
+            new HashMap<>();
 
     // ------------------------------------------------------------- Properties
 
@@ -1310,7 +1306,7 @@ public class Digester extends DefaultHandler {
         // Register this prefix mapping
         ArrayStack<String> stack = namespaces.get(prefix);
         if (stack == null) {
-            stack = new ArrayStack<String>();
+            stack = new ArrayStack<>();
             namespaces.put(prefix, stack);
         }
         stack.push(namespaceURI);
@@ -2406,7 +2402,7 @@ public class Digester extends DefaultHandler {
     public void push(String stackName, Object value) {
         ArrayStack<Object> namedStack = stacksByName.get(stackName);
         if (namedStack == null) {
-            namedStack = new ArrayStack<Object>();
+            namedStack = new ArrayStack<>();
             stacksByName.put(stackName, namedStack);
         }
         namedStack.push(value);

==================================================
RulesBase.java
index 389ca2948c..a9542b1b17 100644
--- a/java/org/apache/tomcat/util/digester/FactoryCreateRule.java
+++ b/java/org/apache/tomcat/util/digester/FactoryCreateRule.java
@@ -262,7 +262,7 @@ public class FactoryCreateRule extends Rule {
         if (ignoreCreateExceptions) {
 
             if (exceptionIgnoredStack == null) {
-                exceptionIgnoredStack = new ArrayStack<Boolean>();
+                exceptionIgnoredStack = new ArrayStack<>();
             }
 
             try {

==================================================
WithDefaultsRulesWrapper.java
index 95268f6f61..cdfba4774a 100644
--- a/java/org/apache/tomcat/util/digester/RulesBase.java
+++ b/java/org/apache/tomcat/util/digester/RulesBase.java
@@ -53,8 +53,7 @@ public class RulesBase implements Rules {
      * Each value is a List containing the Rules for that pattern, in the
      * order that they were originally registered.
      */
-    protected HashMap<String,List<Rule>> cache =
-        new HashMap<String,List<Rule>>();
+    protected HashMap<String,List<Rule>> cache = new HashMap<>();
 
 
     /**
@@ -75,7 +74,7 @@ public class RulesBase implements Rules {
      * The set of registered Rule instances, in the order that they were
      * originally registered.
      */
-    protected ArrayList<Rule> rules = new ArrayList<Rule>();
+    protected ArrayList<Rule> rules = new ArrayList<>();
 
 
     // ------------------------------------------------------------- Properties
@@ -159,7 +158,7 @@ public class RulesBase implements Rules {
 
         List<Rule> list = cache.get(pattern);
         if (list == null) {
-            list = new ArrayList<Rule>();
+            list = new ArrayList<>();
             cache.put(pattern, list);
         }
         list.add(rule);
@@ -221,7 +220,7 @@ public class RulesBase implements Rules {
             }
         }
         if (rulesList == null) {
-            rulesList = new ArrayList<Rule>();
+            rulesList = new ArrayList<>();
         }
         return (rulesList);
 
@@ -267,7 +266,7 @@ public class RulesBase implements Rules {
         }
 
         // Select only Rules that match on the specified namespace URI
-        ArrayList<Rule> results = new ArrayList<Rule>();
+        ArrayList<Rule> results = new ArrayList<>();
         Iterator<Rule> items = list.iterator();
         while (items.hasNext()) {
             Rule item = items.next();

==================================================
FastHttpDateFormat.java
index ae75d3fa92..2ae9016a6d 100644
--- a/java/org/apache/tomcat/util/digester/WithDefaultsRulesWrapper.java
+++ b/java/org/apache/tomcat/util/digester/WithDefaultsRulesWrapper.java
@@ -53,9 +53,9 @@ public class WithDefaultsRulesWrapper implements Rules {
     /** The Rules implementation that this class wraps. */
     private Rules wrappedRules;
     /** Rules to be fired when the wrapped implementations returns none. */
-    private List<Rule> defaultRules = new ArrayList<Rule>();
+    private List<Rule> defaultRules = new ArrayList<>();
     /** All rules (preserves order in which they were originally added) */
-    private List<Rule> allRules = new ArrayList<Rule>();
+    private List<Rule> allRules = new ArrayList<>();
 
     // --------------------------------------------------------- Constructor
 
@@ -120,7 +120,7 @@ public class WithDefaultsRulesWrapper implements Rules {
         List<Rule> matches = wrappedRules.match(namespaceURI, pattern);
         if (matches ==  null || matches.isEmpty()) {
             // a little bit of defensive programming
-            return new ArrayList<Rule>(defaultRules);
+            return new ArrayList<>(defaultRules);
         }
         // otherwise
         return matches;

==================================================
Parameters.java
index b353cad44f..1434976ac8 100644
--- a/java/org/apache/tomcat/util/http/FastHttpDateFormat.java
+++ b/java/org/apache/tomcat/util/http/FastHttpDateFormat.java
@@ -92,14 +92,14 @@ public final class FastHttpDateFormat {
      * Formatter cache.
      */
     private static final ConcurrentHashMap<Long, String> formatCache =
-        new ConcurrentHashMap<Long, String>(CACHE_SIZE);
+            new ConcurrentHashMap<>(CACHE_SIZE);
 
 
     /**
      * Parser cache.
      */
     private static final ConcurrentHashMap<String, Long> parseCache =
-        new ConcurrentHashMap<String, Long>(CACHE_SIZE);
+            new ConcurrentHashMap<>(CACHE_SIZE);
 
 
     // --------------------------------------------------------- Public Methods

==================================================
ByteArrayOutputStream.java
index 228bf0315b..10e5601444 100644
--- a/java/org/apache/tomcat/util/http/Parameters.java
+++ b/java/org/apache/tomcat/util/http/Parameters.java
@@ -50,7 +50,7 @@ public final class Parameters {
         StringManager.getManager("org.apache.tomcat.util.http");
 
     private final HashMap<String,ArrayList<String>> paramHashValues =
-        new HashMap<String,ArrayList<String>>();
+            new HashMap<>();
     private boolean didQueryParameters=false;
 
     MessageBytes queryMB;
@@ -195,7 +195,7 @@ public final class Parameters {
 
         ArrayList<String> values = paramHashValues.get(key);
         if (values == null) {
-            values = new ArrayList<String>(1);
+            values = new ArrayList<>(1);
             paramHashValues.put(key, values);
         }
         values.add(value);

==================================================
FileCleaningTracker.java
index 8554fadbbc..58ff86429e 100644
--- a/java/org/apache/tomcat/util/http/fileupload/ByteArrayOutputStream.java
+++ b/java/org/apache/tomcat/util/http/fileupload/ByteArrayOutputStream.java
@@ -54,7 +54,7 @@ public class ByteArrayOutputStream extends OutputStream {
     private static final byte[] EMPTY_BYTE_ARRAY = new byte[0];
 
     /** The list of buffers, which grows and never reduces. */
-    private List<byte[]> buffers = new ArrayList<byte[]>();
+    private List<byte[]> buffers = new ArrayList<>();
     /** The index of the current buffer. */
     private int currentBufferIndex;
     /** The total count of bytes in all the filled buffers. */

==================================================
FileUploadBase.java
index aa20291fe8..5139bd749f 100644
--- a/java/org/apache/tomcat/util/http/fileupload/FileCleaningTracker.java
+++ b/java/org/apache/tomcat/util/http/fileupload/FileCleaningTracker.java
@@ -48,7 +48,7 @@ public class FileCleaningTracker {
     /**
      * Collection of <code>Tracker</code> instances in existence.
      */
-    final Collection<Tracker> trackers = new Vector<Tracker>();  // synchronized
+    final Collection<Tracker> trackers = new Vector<>();  // synchronized
     /**
      * Whether to terminate the thread when the tracking is complete.
      */

==================================================
ParameterParser.java
index 9bd70f3c6d..2533b2f6ec 100644
--- a/java/org/apache/tomcat/util/http/fileupload/FileUploadBase.java
+++ b/java/org/apache/tomcat/util/http/fileupload/FileUploadBase.java
@@ -298,7 +298,7 @@ public abstract class FileUploadBase {
      */
     public List<FileItem> parseRequest(RequestContext ctx)
             throws FileUploadException {
-        List<FileItem> items = new ArrayList<FileItem>();
+        List<FileItem> items = new ArrayList<>();
         boolean successful = false;
         try {
             FileItemIterator iter = getItemIterator(ctx);

==================================================
FileItemHeadersImpl.java
index 42dadc229f..6dc90e0649 100644
--- a/java/org/apache/tomcat/util/http/fileupload/ParameterParser.java
+++ b/java/org/apache/tomcat/util/http/fileupload/ParameterParser.java
@@ -227,7 +227,7 @@ public class ParameterParser {
      */
     public Map<String,String> parse(final String str, char[] separators) {
         if (separators == null || separators.length == 0) {
-            return new HashMap<String,String>();
+            return new HashMap<>();
         }
         char separator = separators[0];
         if (str != null) {
@@ -256,7 +256,7 @@ public class ParameterParser {
      */
     public Map<String,String> parse(final String str, char separator) {
         if (str == null) {
-            return new HashMap<String,String>();
+            return new HashMap<>();
         }
         return parse(str.toCharArray(), separator);
     }
@@ -273,7 +273,7 @@ public class ParameterParser {
      */
     public Map<String,String> parse(final char[] inputChars, char separator) {
         if (inputChars == null) {
-            return new HashMap<String,String>();
+            return new HashMap<>();
         }
         return parse(inputChars, 0, inputChars.length, separator);
     }
@@ -297,9 +297,9 @@ public class ParameterParser {
         char separator) {
 
         if (inputChars == null) {
-            return new HashMap<String,String>();
+            return new HashMap<>();
         }
-        HashMap<String,String> params = new HashMap<String,String>();
+        HashMap<String,String> params = new HashMap<>();
         this.chars = inputChars;
         this.pos = offset;
         this.len = length;

==================================================
SystemLogHandler.java
index 2e710cee6e..392caf868b 100644
--- a/java/org/apache/tomcat/util/http/fileupload/util/FileItemHeadersImpl.java
+++ b/java/org/apache/tomcat/util/http/fileupload/util/FileItemHeadersImpl.java
@@ -42,14 +42,14 @@ public class FileItemHeadersImpl implements FileItemHeaders, Serializable {
      * <code>String</code> instances.
      */
     private final Map<String,List<String>> headerNameToValueListMap =
-        new HashMap<String,List<String>>();
+            new HashMap<>();
 
     /**
      * List to preserve order of headers as added.  This would not be
      * needed if a <code>LinkedHashMap</code> could be used, but don't
      * want to depend on 1.4.
      */
-    private final List<String> headerNameList = new ArrayList<String>();
+    private final List<String> headerNameList = new ArrayList<>();
 
     @Override
     public String getHeader(String name) {
@@ -86,7 +86,7 @@ public class FileItemHeadersImpl implements FileItemHeaders, Serializable {
         String nameLower = name.toLowerCase();
         List<String> headerValueList = headerNameToValueListMap.get(nameLower);
         if (null == headerValueList) {
-            headerValueList = new ArrayList<String>();
+            headerValueList = new ArrayList<>();
             headerNameToValueListMap.put(nameLower, headerValueList);
             headerNameList.add(nameLower);
         }

==================================================
BaseAttributeFilter.java
index cc41d08c58..2e1d0c1f44 100644
--- a/java/org/apache/tomcat/util/log/SystemLogHandler.java
+++ b/java/org/apache/tomcat/util/log/SystemLogHandler.java
@@ -59,14 +59,13 @@ public class SystemLogHandler extends PrintStream {
     /**
      * Thread <-> CaptureLog associations.
      */
-    protected static ThreadLocal<Stack<CaptureLog>> logs =
-        new ThreadLocal<Stack<CaptureLog>>();
+    protected static ThreadLocal<Stack<CaptureLog>> logs = new ThreadLocal<>();
 
 
     /**
      * Spare CaptureLog ready for reuse.
      */
-    protected static Stack<CaptureLog> reuse = new Stack<CaptureLog>();
+    protected static Stack<CaptureLog> reuse = new Stack<>();
 
 
     // --------------------------------------------------------- Public Methods
@@ -88,7 +87,7 @@ public class SystemLogHandler extends PrintStream {
         }
         Stack<CaptureLog> stack = logs.get();
         if (stack == null) {
-            stack = new Stack<CaptureLog>();
+            stack = new Stack<>();
             logs.set(stack);
         }
         stack.push(log);

==================================================
BaseNotificationBroadcaster.java
index f5601d7e55..63586fa0b6 100644
--- a/java/org/apache/tomcat/util/modeler/BaseAttributeFilter.java
+++ b/java/org/apache/tomcat/util/modeler/BaseAttributeFilter.java
@@ -65,7 +65,7 @@ public class BaseAttributeFilter implements NotificationFilter {
      * The set of attribute names that are accepted by this filter.  If this
      * list is empty, all attribute names are accepted.
      */
-    private HashSet<String> names = new HashSet<String>();
+    private HashSet<String> names = new HashSet<>();
 
 
     // --------------------------------------------------------- Public Methods

==================================================
ManagedBean.java
index 65f7a4bfd5..12d9ccb18d 100644
--- a/java/org/apache/tomcat/util/modeler/BaseNotificationBroadcaster.java
+++ b/java/org/apache/tomcat/util/modeler/BaseNotificationBroadcaster.java
@@ -54,7 +54,7 @@ public class BaseNotificationBroadcaster implements NotificationBroadcaster {
      * entries.
      */
     protected ArrayList<BaseNotificationBroadcasterEntry> entries =
-        new ArrayList<BaseNotificationBroadcasterEntry>();
+            new ArrayList<>();
 
 
     // --------------------------------------------------------- Public Methods

==================================================
Registry.java
index a114d0749b..89cb0ea82a 100644
--- a/java/org/apache/tomcat/util/modeler/ManagedBean.java
+++ b/java/org/apache/tomcat/util/modeler/ManagedBean.java
@@ -61,11 +61,9 @@ public class ManagedBean implements java.io.Serializable {
      */
     transient MBeanInfo info = null;
 
-    private Map<String,AttributeInfo> attributes =
-        new HashMap<String,AttributeInfo>();
+    private Map<String,AttributeInfo> attributes = new HashMap<>();
 
-    private Map<String,OperationInfo> operations =
-        new HashMap<String,OperationInfo>();
+    private Map<String,OperationInfo> operations = new HashMap<>();
 
     protected String className = BASE_MBEAN;
     protected String description = null;

==================================================
MbeansDescriptorsDigesterSource.java
index f89ba05127..eb9a45e5f9 100644
--- a/java/org/apache/tomcat/util/modeler/Registry.java
+++ b/java/org/apache/tomcat/util/modeler/Registry.java
@@ -101,24 +101,22 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
      * The set of ManagedBean instances for the beans this registry
      * knows about, keyed by name.
      */
-    private HashMap<String,ManagedBean> descriptors =
-        new HashMap<String,ManagedBean>();
+    private HashMap<String,ManagedBean> descriptors = new HashMap<>();
 
     /** List of managed beans, keyed by class name
      */
-    private HashMap<String,ManagedBean> descriptorsByClass =
-        new HashMap<String,ManagedBean>();
+    private HashMap<String,ManagedBean> descriptorsByClass = new HashMap<>();
 
     // map to avoid duplicated searching or loading descriptors
-    private HashMap<String,URL> searchedPaths=new HashMap<String,URL>();
+    private HashMap<String,URL> searchedPaths = new HashMap<>();
 
     private Object guard;
 
     // Id - small ints to use array access. No reset on stop()
     // Used for notifications
     private final Hashtable<String,Hashtable<String,Integer>> idDomains =
-        new Hashtable<String,Hashtable<String,Integer>>();
-    private final Hashtable<String,int[]> ids = new Hashtable<String,int[]>();
+        new Hashtable<>();
+    private final Hashtable<String,int[]> ids = new Hashtable<>();
 
 
     // ----------------------------------------------------------- Constructors
@@ -191,9 +189,9 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
      */
     @Override
     public void stop() {
-        descriptorsByClass = new HashMap<String,ManagedBean>();
-        descriptors = new HashMap<String,ManagedBean>();
-        searchedPaths=new HashMap<String,URL>();
+        descriptorsByClass = new HashMap<>();
+        descriptors = new HashMap<>();
+        searchedPaths=new HashMap<>();
     }
 
     /** Register a bean by creating a modeler mbean and adding it to the
@@ -301,7 +299,7 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
         }
         Hashtable<String,Integer> domainTable = idDomains.get(domain);
         if( domainTable == null ) {
-            domainTable = new Hashtable<String,Integer>();
+            domainTable = new Hashtable<>();
             idDomains.put( domain, domainTable);
         }
         if( name==null ) {

==================================================
MbeansDescriptorsIntrospectionSource.java
index 9bbafbc402..15e2f04c6d 100644
--- a/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsDigesterSource.java
+++ b/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsDigesterSource.java
@@ -39,7 +39,7 @@ public class MbeansDescriptorsDigesterSource extends ModelerSource
 
     private Registry registry;
     private String type;
-    private final List<ObjectName> mbeans = new ArrayList<ObjectName>();
+    private final List<ObjectName> mbeans = new ArrayList<>();
     private static volatile Digester digester = null;
 
     private static Digester createDigester() {
@@ -169,7 +169,7 @@ public class MbeansDescriptorsDigesterSource extends ModelerSource
         if (digester == null) {
             digester = createDigester();
         }
-        ArrayList<ManagedBean> loadedMbeans = new ArrayList<ManagedBean>();
+        ArrayList<ManagedBean> loadedMbeans = new ArrayList<>();
 
         synchronized (digester) {
 

==================================================
MbeansDescriptorsSerSource.java
index 22651ebdb9..7efb963c91 100644
--- a/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsIntrospectionSource.java
+++ b/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsIntrospectionSource.java
@@ -42,7 +42,7 @@ public class MbeansDescriptorsIntrospectionSource extends ModelerSource
 
     private Registry registry;
     private String type;
-    private final List<ObjectName> mbeans = new ArrayList<ObjectName>();
+    private final List<ObjectName> mbeans = new ArrayList<>();
 
     public void setRegistry(Registry reg) {
         this.registry=reg;
@@ -90,7 +90,7 @@ public class MbeansDescriptorsIntrospectionSource extends ModelerSource
     // ------------ Implementation for non-declared introspection classes
 
     private static final Hashtable<String,String> specialMethods =
-        new Hashtable<String,String>();
+            new Hashtable<>();
     static {
         specialMethods.put( "preDeregister", "");
         specialMethods.put( "postDeregister", "");
@@ -285,13 +285,13 @@ public class MbeansDescriptorsIntrospectionSource extends ModelerSource
 
         Method methods[]=null;
 
-        Hashtable<String,Method> attMap = new Hashtable<String,Method>();
+        Hashtable<String,Method> attMap = new Hashtable<>();
         // key: attribute val: getter method
-        Hashtable<String,Method> getAttMap = new Hashtable<String,Method>();
+        Hashtable<String,Method> getAttMap = new Hashtable<>();
         // key: attribute val: setter method
-        Hashtable<String,Method> setAttMap = new Hashtable<String,Method>();
+        Hashtable<String,Method> setAttMap = new Hashtable<>();
         // key: operation val: invoke method
-        Hashtable<String,Method> invokeAttMap = new Hashtable<String,Method>();
+        Hashtable<String,Method> invokeAttMap = new Hashtable<>();
 
         methods = realClass.getMethods();
 

==================================================
AbstractEndpoint.java
index 4fe7ffa9a8..46165fe7c8 100644
--- a/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsSerSource.java
+++ b/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsSerSource.java
@@ -35,7 +35,7 @@ public class MbeansDescriptorsSerSource extends ModelerSource
     private static final Log log = LogFactory.getLog(MbeansDescriptorsSerSource.class);
     private Registry registry;
     private String type;
-    private final List<ObjectName> mbeans=new ArrayList<ObjectName>();
+    private final List<ObjectName> mbeans=new ArrayList<>();
 
     public void setRegistry(Registry reg) {
         this.registry=reg;

==================================================
AprEndpoint.java
index 53983e7ead..5bf6af25c5 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -394,8 +394,8 @@ public abstract class AbstractEndpoint {
      * sub-component is the
      * {@link org.apache.tomcat.util.net.ServerSocketFactory}.
      */
-    protected HashMap<String, Object> attributes =
-        new HashMap<String, Object>();
+    protected HashMap<String, Object> attributes = new HashMap<>();
+
     /**
      * Generic property setter called when a property for which a specific
      * setter already exists within the
@@ -901,7 +901,7 @@ public abstract class AbstractEndpoint {
         if (s == null) {
             this.sslEnabledProtocolsarr = new String[0];
         } else {
-            ArrayList<String> sslEnabledProtocols = new ArrayList<String>();
+            ArrayList<String> sslEnabledProtocols = new ArrayList<>();
             StringTokenizer t = new StringTokenizer(s,",");
             while (t.hasMoreTokens()) {
                 String p = t.nextToken().trim();

==================================================
JIoEndpoint.java
index 552f0ac889..1bb16ead4a 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -95,7 +95,7 @@ public class AprEndpoint extends AbstractEndpoint {
 
 
     protected ConcurrentLinkedQueue<SocketWrapper<Long>> waitingRequests =
-        new ConcurrentLinkedQueue<SocketWrapper<Long>>();
+            new ConcurrentLinkedQueue<>();
 
     // ------------------------------------------------------------ Constructor
 
@@ -823,7 +823,7 @@ public class AprEndpoint extends AbstractEndpoint {
             // During shutdown, executor may be null - avoid NPE
             if (running) {
                 SocketWrapper<Long> wrapper =
-                    new SocketWrapper<Long>(Long.valueOf(socket));
+                    new SocketWrapper<>(Long.valueOf(socket));
                 getExecutor().execute(new SocketWithOptionsProcessor(wrapper));
             }
         } catch (RejectedExecutionException x) {
@@ -852,7 +852,7 @@ public class AprEndpoint extends AbstractEndpoint {
                         Long.valueOf(socket), null));
             } else {
                 SocketWrapper<Long> wrapper =
-                    new SocketWrapper<Long>(Long.valueOf(socket));
+                    new SocketWrapper<>(Long.valueOf(socket));
                 executor.execute(new SocketProcessor(wrapper, null));
             }
         } catch (RejectedExecutionException x) {
@@ -880,7 +880,7 @@ public class AprEndpoint extends AbstractEndpoint {
                         Long.valueOf(socket), status));
             } else {
                 SocketWrapper<Long> wrapper =
-                        new SocketWrapper<Long>(Long.valueOf(socket));
+                        new SocketWrapper<>(Long.valueOf(socket));
                 executor.execute(new SocketEventProcessor(wrapper, status));
             }
         } catch (RejectedExecutionException x) {
@@ -1444,8 +1444,8 @@ public class AprEndpoint extends AbstractEndpoint {
                 sendfilePollset = allocatePoller(size, pool, socketProperties.getSoTimeout());
             }
             desc = new long[size * 2];
-            sendfileData = new HashMap<Long, SendfileData>(size);
-            addS = new ArrayList<SendfileData>();
+            sendfileData = new HashMap<>(size);
+            addS = new ArrayList<>();
             addCount = 0;
         }
 

==================================================
NioBlockingSelector.java
index 08353b4700..664337d37f 100644
--- a/java/org/apache/tomcat/util/net/JIoEndpoint.java
+++ b/java/org/apache/tomcat/util/net/JIoEndpoint.java
@@ -517,7 +517,7 @@ public class JIoEndpoint extends AbstractEndpoint {
     protected boolean processSocket(Socket socket) {
         // Process the request from this socket
         try {
-            SocketWrapper<Socket> wrapper = new SocketWrapper<Socket>(socket);
+            SocketWrapper<Socket> wrapper = new SocketWrapper<>(socket);
             wrapper.setKeepAliveLeft(getMaxKeepAliveRequests());
             // During shutdown, executor may be null - avoid NPE
             if (!running) {
@@ -595,7 +595,7 @@ public class JIoEndpoint extends AbstractEndpoint {
     }
 
     protected ConcurrentLinkedQueue<SocketWrapper<Socket>> waitingRequests =
-        new ConcurrentLinkedQueue<SocketWrapper<Socket>>();
+            new ConcurrentLinkedQueue<>();
 
     @Override
     protected Log getLog() {

==================================================
NioEndpoint.java
index a1293a63b7..1b459149fb 100644
--- a/java/org/apache/tomcat/util/net/NioBlockingSelector.java
+++ b/java/org/apache/tomcat/util/net/NioBlockingSelector.java
@@ -203,7 +203,8 @@ public class NioBlockingSelector {
     protected static class BlockPoller extends Thread {
         protected volatile boolean run = true;
         protected Selector selector = null;
-        protected ConcurrentLinkedQueue<Runnable> events = new ConcurrentLinkedQueue<Runnable>();
+        protected ConcurrentLinkedQueue<Runnable> events =
+                new ConcurrentLinkedQueue<>();
         public void disable() { run = false; selector.wakeup();}
         protected AtomicInteger wakeupCounter = new AtomicInteger(0);
         public void cancelKey(final SelectionKey key) {

==================================================
NioSelectorPool.java
index 032721c8c8..0aeb448fac 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -948,7 +948,8 @@ public class NioEndpoint extends AbstractEndpoint {
     public class Poller implements Runnable {
 
         protected Selector selector;
-        protected ConcurrentLinkedQueue<Runnable> events = new ConcurrentLinkedQueue<Runnable>();
+        protected ConcurrentLinkedQueue<Runnable> events =
+                new ConcurrentLinkedQueue<>();
 
         protected volatile boolean close = false;
         protected long nextExpiration = 0;//optimize expiration handling

==================================================
JSSESocketFactory.java
index 3a650e59d5..a0303bf68d 100644
--- a/java/org/apache/tomcat/util/net/NioSelectorPool.java
+++ b/java/org/apache/tomcat/util/net/NioSelectorPool.java
@@ -58,7 +58,7 @@ public class NioSelectorPool {
     protected AtomicInteger active = new AtomicInteger(0);
     protected AtomicInteger spare = new AtomicInteger(0);
     protected ConcurrentLinkedQueue<Selector> selectors =
-        new ConcurrentLinkedQueue<Selector>();
+            new ConcurrentLinkedQueue<>();
 
     protected Selector getSharedSelector() throws IOException {
         if (SHARED && SHARED_SELECTOR == null) {

==================================================
JSSESupport.java
index 3a98775a42..826e41aa25 100644
--- a/java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java
+++ b/java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java
@@ -235,7 +235,7 @@ public class JSSESocketFactory implements ServerSocketFactory, SSLUtil {
                                      && i<supportedCiphers.length; i++) {
                             if (supportedCiphers[i].equals(cipher)) {
                                 if (vec == null) {
-                                    vec = new Vector<String>();
+                                    vec = new Vector<>();
                                 }
                                 vec.addElement(cipher);
                                 break;
@@ -259,7 +259,7 @@ public class JSSESocketFactory implements ServerSocketFactory, SSLUtil {
                                  && i<supportedCiphers.length; i++) {
                         if (supportedCiphers[i].equals(cipher)) {
                             if (vec == null) {
-                                vec = new Vector<String>();
+                                vec = new Vector<>();
                             }
                             vec.addElement(cipher);
                             break;
@@ -748,7 +748,7 @@ public class JSSESocketFactory implements ServerSocketFactory, SSLUtil {
                         i < supportedProtocols.length; i++) {
                     if (supportedProtocols[i].equals(protocol)) {
                         if (vec == null) {
-                            vec = new Vector<String>();
+                            vec = new Vector<>();
                         }
                         vec.addElement(protocol);
                         break;

==================================================
StringManager.java
index 402ad95293..264db9383a 100644
--- a/java/org/apache/tomcat/util/net/jsse/JSSESupport.java
+++ b/java/org/apache/tomcat/util/net/jsse/JSSESupport.java
@@ -61,7 +61,7 @@ class JSSESupport implements SSLSupport, SSLSessionManager {
         StringManager.getManager("org.apache.tomcat.util.net.jsse.res");
 
     private static final Map<SSLSession,Integer> keySizeCache =
-        new WeakHashMap<SSLSession, Integer>();
+            new WeakHashMap<>();
 
     protected SSLSocket ssl;
     protected SSLSession session;

==================================================
