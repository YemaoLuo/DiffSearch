4685bfd9bd5f00c08f097460e9523a4dbaf8dd19
==================================================
Whitespace / import police
==================================================
Mark Emlyn
==================================================
Thu Mar 29 19:55:07 2012 +0000
==================================================
AbstractHttp11Protocol.java
Whitespace / import police

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1307079 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProtocol.java
index 2ea2464adb..257eea0471 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -183,7 +183,7 @@ public abstract class AbstractHttp11Protocol extends AbstractProtocol {
     public void setMaxKeepAliveRequests(int mkar) {
         endpoint.setMaxKeepAliveRequests(mkar);
     }
-    
+
     protected NpnHandler npnHandler;
     public void setNpnHandler(String impl) {
         try {

==================================================
Http11NioProtocol.java
index c3f5e496e6..3ce3dd02bf 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -19,14 +19,12 @@ package org.apache.coyote.http11;
 import java.io.IOException;
 
 import org.apache.coyote.AbstractProtocol;
-import org.apache.coyote.Adapter;
 import org.apache.coyote.Processor;
 import org.apache.coyote.http11.upgrade.UpgradeAprProcessor;
 import org.apache.coyote.http11.upgrade.UpgradeInbound;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.AbstractEndpoint;
-import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.net.AprEndpoint;
 import org.apache.tomcat.util.net.AprEndpoint.Handler;
 import org.apache.tomcat.util.net.SocketStatus;

==================================================
Http11Protocol.java
index 545792b5a3..ecbf3bff68 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -84,7 +84,7 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
             npnHandler.init(getEndpoint(), 0, adapter);
         }
     }
-    
+
     // -------------------- Properties--------------------
 
     private Http11ConnectionHandler cHandler;
@@ -222,7 +222,7 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
             }
             return super.process(socket, status);
         }
-        
+
 
         /**
          * Expected to be used by the handler once the processor is no longer

==================================================
NpnHandler.java
index e8a169f761..8bc05e4da2 100644
--- a/java/org/apache/coyote/http11/Http11Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Protocol.java
@@ -91,7 +91,7 @@ public class Http11Protocol extends AbstractHttp11JsseProtocol {
             this.disableKeepAlivePercentage = disableKeepAlivePercentage;
         }
     }
-    
+
     @Override
     public void start() throws Exception {
         super.start();
@@ -144,7 +144,7 @@ public class Http11Protocol extends AbstractHttp11JsseProtocol {
             }
             return super.process(socket, status);
         }
-        
+
         /**
          * Expected to be used by the handler once the processor is no longer
          * required.

==================================================
SpdyAprNpnHandler.java
index 119f08369c..c2f4d456c3 100644
--- a/java/org/apache/coyote/http11/NpnHandler.java
+++ b/java/org/apache/coyote/http11/NpnHandler.java
@@ -28,30 +28,30 @@ import org.apache.tomcat.util.net.SocketWrapper;
  * SPDY. This is only available for APR, will replace the HTTP framing.
  */
 public interface NpnHandler {
-    
-    /** 
+
+    /**
      * Check if the socket has negotiated the right NPN and process it.
-     *  
+     *
      * @param socket
      * @param status
      * @return OPEN if the socket doesn't have the right npn.
      *    CLOSE if processing is done. LONG to request read polling.
      */
     SocketState process(SocketWrapper<?> socket, SocketStatus status);
-    
+
     /**
      * Initialize the npn handler.
-     * 
+     *
      * @param ep
      * @param sslContext
      * @param adapter
      */
     public void init(final AbstractEndpoint ep, long sslContext, Adapter adapter);
 
-    /** 
-     * Called when a SSLSocket or SSLEngine are first used, to initialize 
+    /**
+     * Called when a SSLSocket or SSLEngine are first used, to initialize
      * NPN extension.
-     * 
+     *
      * @param socket SSLEngine or SSLSocket
      */
     void onCreateEngine(Object socket);

==================================================
SpdyProcessor.java
index a513dc9dfb..0f6a1a6ad6 100644
--- a/java/org/apache/coyote/spdy/SpdyAprNpnHandler.java
+++ b/java/org/apache/coyote/spdy/SpdyAprNpnHandler.java
@@ -19,7 +19,6 @@ package org.apache.coyote.spdy;
 import java.io.IOException;
 
 import org.apache.coyote.Adapter;
-import org.apache.coyote.http11.Http11AprProtocol;
 import org.apache.coyote.http11.NpnHandler;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -95,9 +94,9 @@ public class SpdyAprNpnHandler implements NpnHandler {
 
         SocketWrapper<Long> socketW = (SocketWrapper<Long>) socketO;
         long socket = socketW.getSocket().longValue();
-        
+
         if (! spdyContext.getNetSupport().isSpdy(socketW.getSocket())) {
-            return SocketState.OPEN;            
+            return SocketState.OPEN;
         }
 
         try {

==================================================
CompressDeflater6.java
index d1e0594d8c..a78d8f1c58 100644
--- a/java/org/apache/coyote/spdy/SpdyProcessor.java
+++ b/java/org/apache/coyote/spdy/SpdyProcessor.java
@@ -102,7 +102,7 @@ public class SpdyProcessor extends AbstractProcessor<Object> implements
             if (inFrame.remaining() == 0 && inFrame.isHalfClose()) {
                 return -1;
             }
-            
+
             int rd = Math.min(inFrame.remaining(), bchunk.getBytes().length);
             System.arraycopy(inFrame.data, inFrame.off, bchunk.getBytes(),
                     bchunk.getStart(), rd);

==================================================
NetSupportOpenSSL.java
index 71ba474176..845401b80d 100644
--- a/java/org/apache/tomcat/spdy/CompressDeflater6.java
+++ b/java/org/apache/tomcat/spdy/CompressDeflater6.java
@@ -71,7 +71,7 @@ class CompressDeflater6 implements CompressSupport {
         // TODO: code to plug in v7-specific. It is marginally faster.
         return new CompressDeflater6();
     }
-    
+
     public void recycle() {
         // TODO
     }

==================================================
NetSupportSocket.java
index c60eec2eed..dba08fc86a 100644
--- a/java/org/apache/tomcat/spdy/NetSupportOpenSSL.java
+++ b/java/org/apache/tomcat/spdy/NetSupportOpenSSL.java
@@ -42,16 +42,16 @@ public class NetSupportOpenSSL extends SpdyContext.NetSupport {
             }
         });
         //}
-        con.setNpn("spdy/2");        
+        con.setNpn("spdy/2");
     }
-    
+
     @Override
     public boolean isSpdy(Object socketW) {
         byte[] proto = new byte[32];
         int len = SSLExt.getNPN((Long) socketW, proto);
         return len == 6; // todo: check spdy/2
     }
-    
+
     @Override
     public SpdyConnection getConnection(String host, int port) throws IOException {
         SpdyConnectionAprSocket spdy = new SpdyConnectionAprSocket(ctx);
@@ -78,7 +78,7 @@ public class NetSupportOpenSSL extends SpdyContext.NetSupport {
     public void onAccept(Object socket) throws IOException {
         onAcceptLong((Long) socket);
     }
-    
+
     public void onAcceptLong(long socket) throws IOException {
         SpdyConnectionAprSocket spdy = new SpdyConnectionAprSocket(ctx);
         AprSocket s = con.socket(socket);
@@ -209,5 +209,5 @@ public class NetSupportOpenSSL extends SpdyContext.NetSupport {
         }
     }
 
-    
+
 }

==================================================
SpdyConnection.java
index 7578202b8d..b5c6dccb0b 100644
--- a/java/org/apache/tomcat/spdy/NetSupportSocket.java
+++ b/java/org/apache/tomcat/spdy/NetSupportSocket.java
@@ -30,7 +30,7 @@ public class NetSupportSocket extends SpdyContext.NetSupport {
 
     public void onCreateEngine(Object engine) {
     }
-    
+
     public boolean isSpdy(Object socketW) {
         return false;
     }
@@ -48,9 +48,9 @@ public class NetSupportSocket extends SpdyContext.NetSupport {
             ex.printStackTrace();
             throw ex;
         }
-        
+
     }
-    
+
 
     protected Socket getSocket(String host, int port) throws IOException {
         try {
@@ -61,12 +61,12 @@ public class NetSupportSocket extends SpdyContext.NetSupport {
                 socket.startHandshake();
                 return socket;
             } else {
-                return new Socket(host, port);            
+                return new Socket(host, port);
             }
         } catch (NoSuchAlgorithmException e) {
             throw new IOException(e);
         }
-        
+
     }
 
     boolean running = true;
@@ -84,7 +84,7 @@ public class NetSupportSocket extends SpdyContext.NetSupport {
         ch.onBlockingSocket();
     }
 
-    
+
     @Override
     public void listen(final int port, String cert, String key) throws IOException {
         ctx.getExecutor().execute(new Runnable() {
@@ -167,6 +167,6 @@ public class NetSupportSocket extends SpdyContext.NetSupport {
             }
         }
     }
-    
+
 }
 

==================================================
SpdyContext.java
index 2c066bbe54..c0bc919d34 100644
--- a/java/org/apache/tomcat/spdy/SpdyConnection.java
+++ b/java/org/apache/tomcat/spdy/SpdyConnection.java
@@ -305,7 +305,7 @@ public abstract class SpdyConnection { // implements Runnable {
      *
      * With a nb transport it should call drain directly.
      */
-    public void nonBlockingSend(SpdyFrame oframe, SpdyStream proc) 
+    public void nonBlockingSend(SpdyFrame oframe, SpdyStream proc)
             throws IOException {
         queueFrame(oframe, proc, oframe.pri == 0 ? outQueue : prioriyQueue);
         getSpdyContext().getExecutor().execute(nbDrain);
@@ -322,7 +322,7 @@ public abstract class SpdyConnection { // implements Runnable {
 
     /**
      * Add the frame to the queue and send until the queue is empty.
-     * 
+     *
      */
     public void send(SpdyFrame oframe, SpdyStream proc)
             throws IOException {
@@ -341,7 +341,7 @@ public abstract class SpdyConnection { // implements Runnable {
 
         // all sync for adding/removing is on outQueue
         synchronized (outQueue) {
-            queue.add(oframe);            
+            queue.add(oframe);
         }
     }
 
@@ -537,7 +537,7 @@ public abstract class SpdyConnection { // implements Runnable {
     }
 
     /**
-     * Process a SPDY connection. Called in the input thread, should not 
+     * Process a SPDY connection. Called in the input thread, should not
      * block.
      *
      * @return

==================================================
SpdyFrame.java
index e5214edae0..ea92a87801 100644
--- a/java/org/apache/tomcat/spdy/SpdyContext.java
+++ b/java/org/apache/tomcat/spdy/SpdyContext.java
@@ -57,13 +57,13 @@ public final class SpdyContext {
     private NetSupport netSupport;
 
 
-    public static abstract class NetSupport {
+    public abstract static class NetSupport {
         protected SpdyContext ctx;
-        
+
         public void setSpdyContext(SpdyContext ctx) {
             this.ctx = ctx;
         }
-        
+
         public abstract SpdyConnection getConnection(String host, int port) throws IOException;
 
         public void onCreateEngine(Object engine) {
@@ -83,10 +83,10 @@ public final class SpdyContext {
         public void stop() throws IOException {
         }
     }
-    
+
     public SpdyContext() {
     }
-    
+
     public void setTlsComprression(boolean tls, boolean compress) {
         this.tls = tls;
         this.compression = compress;
@@ -153,11 +153,11 @@ public final class SpdyContext {
             // non-ssl mode must be set explicitly
             throw new RuntimeException("SSL NextProtoclNegotiation no supported.");
         }
-        
+
         return netSupport;
     }
-    
-    
+
+
     /**
      * SPDY is a multiplexed protocol - the SpdyProcessors will be executed on
      * this executor.
@@ -173,7 +173,7 @@ public final class SpdyContext {
     }
 
     SpdyHandler handler;
-    
+
     public SpdyHandler getHandler() {
         return handler;
     }
@@ -184,18 +184,18 @@ public final class SpdyContext {
 
     public static interface SpdyHandler {
         public void onStream(SpdyConnection spdyCon, SpdyStream ch) throws IOException;
-        
+
     }
 
     /**
      * A handler implementing this interface will be called in the 'io' thread - the
-     * thread reading the multiplexed stream, and in the case of non-blocking 
+     * thread reading the multiplexed stream, and in the case of non-blocking
      * transports also handling polling the socket.
-     *  
+     *
      */
     public static interface NonBlockingSpdyHandler extends SpdyHandler {
     }
-    
+
 
     /**
      * Client mode: return a connection for host/port.

==================================================
SpdyStream.java
index 680492dc1d..3448e0e459 100644
--- a/java/org/apache/tomcat/spdy/SpdyFrame.java
+++ b/java/org/apache/tomcat/spdy/SpdyFrame.java
@@ -350,5 +350,4 @@ public class SpdyFrame {
     public boolean isData() {
         return !c;
     }
-    
 }

==================================================
JIoEndpoint.java
index f45a8b0cee..449b7a991b 100644
--- a/java/org/apache/tomcat/spdy/SpdyStream.java
+++ b/java/org/apache/tomcat/spdy/SpdyStream.java
@@ -153,8 +153,8 @@ public class SpdyStream implements Runnable {
     }
 
     /**
-     * Waits and return the next frame. 
-     * 
+     * Waits and return the next frame.
+     *
      * First frame will be the control frame
      */
     public SpdyFrame getFrame(long to) throws IOException {
@@ -262,7 +262,7 @@ public class SpdyStream implements Runnable {
     public InputStream getInputStream() {
         return new SpdyInputStream();
     }
-    
+
     class SpdyInputStream extends InputStream {
         SpdyFrame current = null;
         long to = 10000; // TODO
@@ -276,7 +276,7 @@ public class SpdyStream implements Runnable {
                 current = getFrame(to);
             }
         }
-        
+
         @Override
         public int read() throws IOException {
             fill();
@@ -285,7 +285,7 @@ public class SpdyStream implements Runnable {
             }
             return current.readByte();
         }
-        
+
         public int read(byte b[], int off, int len) throws IOException {
             fill();
             if (current == null) {
@@ -297,15 +297,15 @@ public class SpdyStream implements Runnable {
             current.off += rd;
             return rd;
         }
-     
+
         public int available() throws IOException {
             return 0;
         }
         public void close() throws IOException {
             // send RST if not closed
         }
-        
-        
-        
+
+
+
     }
 }

==================================================
