fc1f4a744a3b0728ce1189631cae27aa6439c3fb
==================================================
Update to DBCP 2.1.1 release
==================================================
Mark Thomas
==================================================
Fri Aug 7 11:01:18 2015 +0000
==================================================
BasicDataSource.java
Update to DBCP 2.1.1 release

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1694658 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BasicDataSourceFactory.java
index 105b95a518..03bcc3aa59 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSource.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSource.java
@@ -1336,7 +1336,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
 
     /**
      * Returns the value of the flag that controls whether or not connections
-     * being returned to the pool will checked and configured with
+     * being returned to the pool will be checked and configured with
      * {@link Connection#setAutoCommit(boolean) Connection.setAutoCommit(true)}
      * if the auto commit setting is {@code false} when the connection
      * is returned. It is <code>true</code> by default.
@@ -1347,7 +1347,7 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
 
     /**
      * Sets the value of the flag that controls whether or not connections
-     * being returned to the pool will checked and configured with
+     * being returned to the pool will be checked and configured with
      * {@link Connection#setAutoCommit(boolean) Connection.setAutoCommit(true)}
      * if the auto commit setting is {@code false} when the connection
      * is returned. It is <code>true</code> by default.

==================================================
DelegatingConnection.java
index 0020d2467f..7625823394 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSourceFactory.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSourceFactory.java
@@ -100,6 +100,7 @@ public class BasicDataSourceFactory implements ObjectFactory {
     private static final String PROP_REMOVEABANDONEDONMAINTENANCE = "removeAbandonedOnMaintenance";
     private static final String PROP_REMOVEABANDONEDTIMEOUT = "removeAbandonedTimeout";
     private static final String PROP_LOGABANDONED = "logAbandoned";
+    private static final String PROP_ABANDONEDUSAGETRACKING = "abandonedUsageTracking";
     private static final String PROP_POOLPREPAREDSTATEMENTS = "poolPreparedStatements";
     private static final String PROP_MAXOPENPREPAREDSTATEMENTS = "maxOpenPreparedStatements";
     private static final String PROP_CONNECTIONPROPERTIES = "connectionProperties";
@@ -166,6 +167,7 @@ public class BasicDataSourceFactory implements ObjectFactory {
         PROP_REMOVEABANDONEDONMAINTENANCE,
         PROP_REMOVEABANDONEDTIMEOUT,
         PROP_LOGABANDONED,
+        PROP_ABANDONEDUSAGETRACKING,
         PROP_POOLPREPAREDSTATEMENTS,
         PROP_MAXOPENPREPAREDSTATEMENTS,
         PROP_CONNECTIONPROPERTIES,
@@ -515,6 +517,11 @@ public class BasicDataSourceFactory implements ObjectFactory {
         if (value != null) {
             dataSource.setLogAbandoned(Boolean.valueOf(value).booleanValue());
         }
+        
+        value = properties.getProperty(PROP_ABANDONEDUSAGETRACKING);
+        if (value != null) {
+            dataSource.setAbandonedUsageTracking(Boolean.valueOf(value).booleanValue());
+        }
 
         value = properties.getProperty(PROP_POOLPREPAREDSTATEMENTS);
         if (value != null) {

==================================================
PooledConnectionImpl.java
index 46ab2728c1..cfda1524af 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/DelegatingConnection.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/DelegatingConnection.java
@@ -230,9 +230,13 @@ public class DelegatingConnection<C extends Connection> extends AbandonedTrace
         try {
             passivate();
         } finally {
-            try {
-                _conn.close();
-            } finally {
+            if (_conn != null) {
+                try {
+                    _conn.close();
+                } finally {
+                    _closed = true;
+                }
+            } else {
                 _closed = true;
             }
         }

==================================================
CPDSConnectionFactory.java
index 88c08d1a44..58d1faf6cd 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/cpdsadapter/PooledConnectionImpl.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/cpdsadapter/PooledConnectionImpl.java
@@ -179,7 +179,7 @@ class PooledConnectionImpl implements PooledConnection,
         if (logicalConnection != null && !logicalConnection.isClosed()) {
             // should notify pool of error so the pooled connection can
             // be removed !FIXME!
-            throw new SQLException("PooledConnection was reused, without"
+            throw new SQLException("PooledConnection was reused, without "
                     + "its previous Connection being closed.");
         }
 

==================================================
KeyedCPDSConnectionFactory.java
index 14768145fa..c4c607d39c 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/datasources/CPDSConnectionFactory.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/datasources/CPDSConnectionFactory.java
@@ -171,18 +171,23 @@ class CPDSConnectionFactory
         }
         boolean valid = false;
         PooledConnection pconn = p.getObject().getPooledConnection();
+        Connection conn = null;
+        validatingSet.add(pconn);
         if (null == _validationQuery) {
             int timeout = _validationQueryTimeout;
             if (timeout < 0) {
                 timeout = 0;
             }
             try {
-                valid = pconn.getConnection().isValid(timeout);
+                conn = pconn.getConnection();
+                valid = conn.isValid(timeout);
             } catch (SQLException e) {
                 valid = false;
+            } finally {
+                Utils.closeQuietly(conn);
+                validatingSet.remove(pconn); 
             }
         } else {
-            Connection conn = null;
             Statement stmt = null;
             ResultSet rset = null;
             // logical Connection from the PooledConnection must be closed

==================================================
