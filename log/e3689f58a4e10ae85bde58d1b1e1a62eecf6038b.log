e3689f58a4e10ae85bde58d1b1e1a62eecf6038b
==================================================
Updating Tomcat's copy of BCEL as far as r1746380 (more to come)
==================================================
Mark Thomas
==================================================
Mon Aug 22 09:17:53 2016 +0000
==================================================
AnnotationElementValue.java
Updating Tomcat's copy of BCEL as far as r1746380 (more to come)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1757123 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AnnotationEntry.java
index c34ec88b5c..58081b1736 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationElementValue.java
@@ -22,8 +22,8 @@ public class AnnotationElementValue extends ElementValue
     // For annotation element values, this is the annotation
     private final AnnotationEntry annotationEntry;
 
-    AnnotationElementValue(int type, AnnotationEntry annotationEntry,
-            ConstantPool cpool)
+    AnnotationElementValue(final int type, final AnnotationEntry annotationEntry,
+            final ConstantPool cpool)
     {
         super(type, cpool);
         if (type != ANNOTATION) {

==================================================
Annotations.java
index 898a593b73..5a5fde8e45 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationEntry.java
@@ -41,12 +41,12 @@ public class AnnotationEntry {
      * @param constant_pool
      * @throws IOException
      */
-    AnnotationEntry(DataInput input, ConstantPool constant_pool) throws IOException {
+    AnnotationEntry(final DataInput input, final ConstantPool constant_pool) throws IOException {
 
         this.constant_pool = constant_pool;
 
         type_index = input.readUnsignedShort();
-        int num_element_value_pairs = input.readUnsignedShort();
+        final int num_element_value_pairs = input.readUnsignedShort();
 
         element_value_pairs = new ArrayList<>(num_element_value_pairs);
         for (int i = 0; i < num_element_value_pairs; i++) {

==================================================
ArrayElementValue.java
index 4d3f405eb7..d363e7e84d 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Annotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Annotations.java
@@ -31,7 +31,7 @@ public class Annotations {
      * @param input Input stream
      * @param constant_pool Array of constants
      */
-    Annotations(DataInput input, ConstantPool constant_pool) throws IOException {
+    Annotations(final DataInput input, final ConstantPool constant_pool) throws IOException {
         final int annotation_table_length = input.readUnsignedShort();
         annotation_table = new AnnotationEntry[annotation_table_length];
         for (int i = 0; i < annotation_table_length; i++) {

==================================================
ClassElementValue.java
index 3256bf5d25..9f0b49bd95 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ArrayElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ArrayElementValue.java
@@ -22,7 +22,7 @@ public class ArrayElementValue extends ElementValue
     // For array types, this is the array
     private final ElementValue[] evalues;
 
-    ArrayElementValue(int type, ElementValue[] datums, ConstantPool cpool)
+    ArrayElementValue(final int type, final ElementValue[] datums, final ConstantPool cpool)
     {
         super(type, cpool);
         if (type != ARRAY) {

==================================================
ClassFormatException.java
index 93e518ea8a..c41a8c9e56 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ClassElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ClassElementValue.java
@@ -26,7 +26,7 @@ public class ClassElementValue extends ElementValue
     // For 'class' this points to the class entry in the cpool
     private final int idx;
 
-    ClassElementValue(int type, int idx, ConstantPool cpool) {
+    ClassElementValue(final int type, final int idx, final ConstantPool cpool) {
         super(type, cpool);
         this.idx = idx;
     }

==================================================
ClassParser.java
index dbdb88764f..86a9e0be51 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ClassFormatException.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ClassFormatException.java
@@ -31,7 +31,7 @@ public class ClassFormatException extends RuntimeException {
     }
 
 
-    public ClassFormatException(String s) {
+    public ClassFormatException(final String s) {
         super(s);
     }
 }

==================================================
Constant.java
index d286c9254c..ba6d72b3e1 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
@@ -56,7 +56,7 @@ public final class ClassParser {
      *
      * @param inputStream Input stream
      */
-    public ClassParser(InputStream inputStream) {
+    public ClassParser(final InputStream inputStream) {
         this.dataInputStream = new DataInputStream(new BufferedInputStream(inputStream, BUFSIZE));
     }
 

==================================================
ConstantClass.java
index fbff82978d..3a7df77f66 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Constant.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Constant.java
@@ -42,7 +42,7 @@ public abstract class Constant {
     protected final byte tag;
 
 
-    Constant(byte tag) {
+    Constant(final byte tag) {
         this.tag = tag;
     }
 
@@ -62,7 +62,7 @@ public abstract class Constant {
      * @param input Input stream
      * @return Constant object
      */
-    static Constant readConstant(DataInput input) throws IOException,
+    static Constant readConstant(final DataInput input) throws IOException,
             ClassFormatException {
         byte b = input.readByte(); // Read tag byte
         int skipSize;

==================================================
ConstantDouble.java
index 767c8d6fc2..0e73f312bb 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantClass.java
@@ -39,7 +39,7 @@ public final class ConstantClass extends Constant {
      * @param file Input stream
      * @throws IOException
      */
-    ConstantClass(DataInput file) throws IOException {
+    ConstantClass(final DataInput file) throws IOException {
         super(Const.CONSTANT_Class);
         this.name_index = file.readUnsignedShort();
     }

==================================================
ConstantFloat.java
index e6b0570570..5ba7fccaf2 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantDouble.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantDouble.java
@@ -39,7 +39,7 @@ public final class ConstantDouble extends Constant {
      * @param file Input stream
      * @throws IOException
      */
-    ConstantDouble(DataInput file) throws IOException {
+    ConstantDouble(final DataInput file) throws IOException {
         super(Const.CONSTANT_Double);
         this.bytes = file.readDouble();
     }

==================================================
ConstantInteger.java
index e6eca42e09..f372bb958e 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantFloat.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantFloat.java
@@ -39,7 +39,7 @@ public final class ConstantFloat extends Constant {
      * @param file Input stream
      * @throws IOException
      */
-    ConstantFloat(DataInput file) throws IOException {
+    ConstantFloat(final DataInput file) throws IOException {
         super(Const.CONSTANT_Float);
         this.bytes = file.readFloat();
     }

==================================================
ConstantLong.java
index f7f11a2f1b..f2c1ba83da 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantInteger.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantInteger.java
@@ -39,7 +39,7 @@ public final class ConstantInteger extends Constant {
      * @param file Input stream
      * @throws IOException
      */
-    ConstantInteger(DataInput file) throws IOException {
+    ConstantInteger(final DataInput file) throws IOException {
         super(Const.CONSTANT_Integer);
         this.bytes = file.readInt();
     }

==================================================
ConstantPool.java
index b2fae5eb66..6bb77e1f3e 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantLong.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantLong.java
@@ -39,7 +39,7 @@ public final class ConstantLong extends Constant {
      * @param file Input stream
      * @throws IOException
      */
-    ConstantLong(DataInput input) throws IOException {
+    ConstantLong(final DataInput input) throws IOException {
         super(Const.CONSTANT_Long);
         this.bytes = input.readLong();
     }

==================================================
ConstantUtf8.java
index 602eeb0c31..246a74d87c 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
@@ -44,7 +44,7 @@ public class ConstantPool {
      * @throws IOException
      * @throws ClassFormatException
      */
-    ConstantPool(DataInput input) throws IOException, ClassFormatException {
+    ConstantPool(final DataInput input) throws IOException, ClassFormatException {
         int constant_pool_count = input.readUnsignedShort();
         constant_pool = new Constant[constant_pool_count];
         /* constant_pool[0] is unused by the compiler and may be used freely
@@ -76,7 +76,7 @@ public class ConstantPool {
      * @return Constant value
      * @see    Constant
      */
-    public Constant getConstant( int index ) {
+    public Constant getConstant( final int index ) {
         if (index >= constant_pool.length || index < 0) {
             throw new ClassFormatException("Invalid constant pool reference: " + index
                     + ". Constant pool size is: " + constant_pool.length);
@@ -95,7 +95,7 @@ public class ConstantPool {
      * @see    Constant
      * @throws  ClassFormatException If the constant is not of the expected type
      */
-    public Constant getConstant( int index, byte tag ) throws ClassFormatException {
+    public Constant getConstant( final int index, final byte tag ) throws ClassFormatException {
         Constant c;
         c = getConstant(index);
         if (c == null) {

==================================================
ElementValue.java
index 5eb552dd3d..e6548049d2 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantUtf8.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantUtf8.java
@@ -33,7 +33,7 @@ public final class ConstantUtf8 extends Constant {
     private final String bytes;
 
 
-    static ConstantUtf8 getInstance(DataInput input) throws IOException {
+    static ConstantUtf8 getInstance(final DataInput input) throws IOException {
         return new ConstantUtf8(input.readUTF());
     }
 
@@ -41,7 +41,7 @@ public final class ConstantUtf8 extends Constant {
     /**
      * @param bytes Data
      */
-    private ConstantUtf8(String bytes) {
+    private ConstantUtf8(final String bytes) {
         super(Const.CONSTANT_Utf8);
         if (bytes == null) {
             throw new IllegalArgumentException("bytes must not be null!");

==================================================
ElementValuePair.java
index e52ba3d916..c3fceeb1de 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ElementValue.java
@@ -26,7 +26,7 @@ public abstract class ElementValue
     private final ConstantPool cpool;
 
 
-    ElementValue(int type, ConstantPool cpool) {
+    ElementValue(final int type, final ConstantPool cpool) {
         this.type = type;
         this.cpool = cpool;
     }
@@ -47,7 +47,7 @@ public abstract class ElementValue
     public static final byte PRIMITIVE_SHORT   = 'S';
     public static final byte PRIMITIVE_BOOLEAN = 'Z';
 
-    public static ElementValue readElementValue(DataInput input, ConstantPool cpool) throws IOException
+    public static ElementValue readElementValue(final DataInput input, final ConstantPool cpool) throws IOException
     {
         byte type = input.readByte();
         switch (type)

==================================================
EnumElementValue.java
index 7496789b7b..ccb4ceea8d 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ElementValuePair.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ElementValuePair.java
@@ -35,7 +35,7 @@ public class ElementValuePair
 
     private final int elementNameIndex;
 
-    ElementValuePair(DataInput file, ConstantPool constantPool) throws IOException {
+    ElementValuePair(final DataInput file, final ConstantPool constantPool) throws IOException {
         this.constantPool = constantPool;
         this.elementNameIndex = file.readUnsignedShort();
         this.elementValue = ElementValue.readElementValue(file, constantPool);

==================================================
JavaClass.java
index 0eb83c0406..5eeb0a399b 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/EnumElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/EnumElementValue.java
@@ -23,7 +23,7 @@ public class EnumElementValue extends ElementValue
 {
     private final int valueIdx;
 
-    EnumElementValue(int type, int valueIdx, ConstantPool cpool) {
+    EnumElementValue(final int type, final int valueIdx, final ConstantPool cpool) {
         super(type, cpool);
         if (type != ENUM_CONSTANT)
             throw new RuntimeException(

==================================================
SimpleElementValue.java
index eae29392a7..67c361f381 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
@@ -43,9 +43,9 @@ public class JavaClass {
      * @param interfaces Implemented interfaces
      * @param runtimeVisibleAnnotations "RuntimeVisibleAnnotations" attribute defined on the Class, or null
      */
-    JavaClass(String class_name, String superclass_name,
-            int access_flags, ConstantPool constant_pool, String[] interface_names,
-            Annotations runtimeVisibleAnnotations) {
+    JavaClass(final String class_name, final String superclass_name,
+            final int access_flags, final ConstantPool constant_pool, final String[] interface_names,
+            final Annotations runtimeVisibleAnnotations) {
         this.access_flags = access_flags;
         this.runtimeVisibleAnnotations = runtimeVisibleAnnotations;
         this.class_name = class_name;

==================================================
Utility.java
index 15acae77df..f3773788b0 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/SimpleElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/SimpleElementValue.java
@@ -23,7 +23,7 @@ public class SimpleElementValue extends ElementValue
 {
     private final int index;
 
-    SimpleElementValue(int type, int index, ConstantPool cpool) {
+    SimpleElementValue(final int type, final int index, final ConstantPool cpool) {
         super(type, cpool);
         this.index = index;
     }

==================================================
