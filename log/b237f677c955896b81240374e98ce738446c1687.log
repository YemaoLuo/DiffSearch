b237f677c955896b81240374e98ce738446c1687
==================================================
Remove usage of ByteChunk. This is in preparation to deprecate and remove doWrite(ByteChunk) method.
==================================================
Violeta Georgieva
==================================================
Sun Sep 25 14:03:14 2016 +0000
==================================================
ChunkedOutputFilter.java
Remove usage of ByteChunk. This is in preparation to deprecate and remove doWrite(ByteChunk) method.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1762201 13f79535-47bb-0310-9956-ffa450edef68



==================================================
GzipOutputFilter.java
index ff37d6ded6..fd91a8fdd7 100644
--- a/java/org/apache/coyote/http11/filters/ChunkedOutputFilter.java
+++ b/java/org/apache/coyote/http11/filters/ChunkedOutputFilter.java
@@ -35,20 +35,8 @@ public class ChunkedOutputFilter implements OutputFilter {
 
 
     // -------------------------------------------------------------- Constants
-    /**
-     * End chunk.
-     */
-    protected static final ByteChunk END_CHUNK = new ByteChunk();
-
-
-    // ----------------------------------------------------- Static Initializer
-
-
-    static {
-        byte[] END_CHUNK_BYTES = {(byte) '0', (byte) '\r', (byte) '\n',
-                                  (byte) '\r', (byte) '\n'};
-        END_CHUNK.setBytes(END_CHUNK_BYTES, 0, END_CHUNK_BYTES.length);
-    }
+    private static final byte[] END_CHUNK_BYTES = {(byte) '0', (byte) '\r', (byte) '\n',
+            (byte) '\r', (byte) '\n'};
 
 
     // ------------------------------------------------------------ Constructor
@@ -58,8 +46,8 @@ public class ChunkedOutputFilter implements OutputFilter {
      * Default constructor.
      */
     public ChunkedOutputFilter() {
-        chunkLength[8] = (byte) '\r';
-        chunkLength[9] = (byte) '\n';
+        chunkHeader.put(8, (byte) '\r');
+        chunkHeader.put(9, (byte) '\n');
     }
 
 
@@ -73,15 +61,15 @@ public class ChunkedOutputFilter implements OutputFilter {
 
 
     /**
-     * Buffer used for chunk length conversion.
+     * Chunk header.
      */
-    protected final byte[] chunkLength = new byte[10];
+    protected final ByteBuffer chunkHeader = ByteBuffer.allocate(10);
 
 
     /**
-     * Chunk header.
+     * End chunk.
      */
-    protected final ByteChunk chunkHeader = new ByteChunk();
+    protected final ByteBuffer endChunk = ByteBuffer.wrap(END_CHUNK_BYTES);
 
 
     // ------------------------------------------------------------- Properties
@@ -100,12 +88,12 @@ public class ChunkedOutputFilter implements OutputFilter {
 
         int pos = calculateChunkHeader(result);
 
-        chunkHeader.setBytes(chunkLength, pos + 1, 9 - pos);
+        chunkHeader.position(pos + 1).limit(chunkHeader.position() + 9 - pos);
         buffer.doWrite(chunkHeader);
 
         buffer.doWrite(chunk);
 
-        chunkHeader.setBytes(chunkLength, 8, 2);
+        chunkHeader.position(8).limit(10);
         buffer.doWrite(chunkHeader);
 
         return result;
@@ -124,12 +112,12 @@ public class ChunkedOutputFilter implements OutputFilter {
 
         int pos = calculateChunkHeader(result);
 
-        chunkHeader.setBytes(chunkLength, pos + 1, 9 - pos);
+        chunkHeader.position(pos + 1).limit(chunkHeader.position() + 9 - pos);
         buffer.doWrite(chunkHeader);
 
         buffer.doWrite(chunk);
 
-        chunkHeader.setBytes(chunkLength, 8, 2);
+        chunkHeader.position(8).limit(10);
         buffer.doWrite(chunkHeader);
 
         return result;
@@ -144,7 +132,7 @@ public class ChunkedOutputFilter implements OutputFilter {
         while (current > 0) {
             int digit = current % 16;
             current = current / 16;
-            chunkLength[pos--] = HexUtils.getHex(digit);
+            chunkHeader.put(pos--, HexUtils.getHex(digit));
         }
         return pos;
     }
@@ -188,7 +176,8 @@ public class ChunkedOutputFilter implements OutputFilter {
         throws IOException {
 
         // Write end chunk
-        buffer.doWrite(END_CHUNK);
+        buffer.doWrite(endChunk);
+        endChunk.flip();
 
         return 0;
 

==================================================
