ca22e193b0d6293b3331ed9478b131897c1c3019
==================================================
Simplify configuration style checks
==================================================
Mark Thomas
==================================================
Thu Feb 28 20:28:19 2019 +0000
==================================================
AbstractEndpoint.java
Simplify configuration style checks

Now all TLS capable connectors support both JSSE and OpenSSL
configuration styles, the code that checks for a compatible
configuration style can be a lot simpler.


==================================================
AbstractJsseEndpoint.java
index c4a4583599..6a6f86e095 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -223,7 +223,6 @@ public abstract class AbstractEndpoint<S,U> {
         }
         if (bindState != BindState.UNBOUND && bindState != BindState.SOCKET_CLOSED_ON_STOP &&
                 isSSLEnabled()) {
-            sslHostConfig.setConfigType(getSslConfigType());
             try {
                 createSSLContext(sslHostConfig);
             } catch (Exception e) {
@@ -302,8 +301,6 @@ public abstract class AbstractEndpoint<S,U> {
         return sslHostConfigs.values().toArray(new SSLHostConfig[0]);
     }
 
-    protected abstract SSLHostConfig.Type getSslConfigType();
-
     /**
      * Create the SSLContextfor the the given SSLHostConfig.
      *

==================================================
AprEndpoint.java
index dba6c4c772..1ebc873586 100644
--- a/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java
@@ -29,8 +29,6 @@ import javax.net.ssl.SSLEngine;
 import javax.net.ssl.SSLParameters;
 
 import org.apache.tomcat.util.compat.JreCompat;
-import org.apache.tomcat.util.net.SSLHostConfig.Type;
-import org.apache.tomcat.util.net.openssl.OpenSSLImplementation;
 import org.apache.tomcat.util.net.openssl.ciphers.Cipher;
 
 public abstract class AbstractJsseEndpoint<S,U> extends AbstractEndpoint<S,U> {
@@ -65,22 +63,11 @@ public abstract class AbstractJsseEndpoint<S,U> extends AbstractEndpoint<S,U> {
     }
 
 
-    @Override
-    protected Type getSslConfigType() {
-        if (OpenSSLImplementation.class.getName().equals(sslImplementationName)) {
-            return SSLHostConfig.Type.EITHER;
-        } else {
-            return SSLHostConfig.Type.JSSE;
-        }
-    }
-
-
     protected void initialiseSsl() throws Exception {
         if (isSSLEnabled()) {
             sslImplementation = SSLImplementation.getInstance(getSslImplementationName());
 
             for (SSLHostConfig sslHostConfig : sslHostConfigs.values()) {
-                sslHostConfig.setConfigType(getSslConfigType());
                 createSSLContext(sslHostConfig);
             }
 

==================================================
SSLHostConfig.java
index 737e8d2797..b9f15d076d 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -55,7 +55,6 @@ import org.apache.tomcat.util.buf.ByteBufferUtils;
 import org.apache.tomcat.util.collections.SynchronizedStack;
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.net.Acceptor.AcceptorState;
-import org.apache.tomcat.util.net.SSLHostConfig.Type;
 import org.apache.tomcat.util.net.openssl.OpenSSLContext;
 import org.apache.tomcat.util.net.openssl.OpenSSLUtil;
 
@@ -191,12 +190,6 @@ public class AprEndpoint extends AbstractEndpoint<Long,Long> implements SNICallB
     }
 
 
-    @Override
-    protected Type getSslConfigType() {
-        return SSLHostConfig.Type.EITHER;
-    }
-
-
     @Override
     public InetSocketAddress getLocalAddress() throws IOException {
         long s = serverSock;
@@ -371,7 +364,6 @@ public class AprEndpoint extends AbstractEndpoint<Long,Long> implements SNICallB
         // Initialize SSL if needed
         if (isSSLEnabled()) {
             for (SSLHostConfig sslHostConfig : sslHostConfigs.values()) {
-                sslHostConfig.setConfigType(getSslConfigType());
                 createSSLContext(sslHostConfig);
             }
             SSLHostConfig defaultSSLHostConfig = sslHostConfigs.get(getDefaultSSLHostConfigName());

==================================================
