04937754d09c7423c326fbeb84048deb9941d74a
==================================================
Make the list of encoders available where they are needed
==================================================
Mark Emlyn
==================================================
Wed Feb 20 21:51:56 2013 +0000
==================================================
WsRemoteEndpointBase.java
Make the list of encoders available where they are needed

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1448432 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WsSession.java
index 4309a90f3d..2920bfb63a 100644
--- a/java/org/apache/tomcat/websocket/WsRemoteEndpointBase.java
+++ b/java/org/apache/tomcat/websocket/WsRemoteEndpointBase.java
@@ -25,6 +25,8 @@ import java.nio.charset.Charset;
 import java.nio.charset.CharsetEncoder;
 import java.nio.charset.CoderResult;
 import java.util.ArrayDeque;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Queue;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutionException;
@@ -34,6 +36,7 @@ import java.util.concurrent.TimeoutException;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import javax.websocket.EncodeException;
+import javax.websocket.Encoder;
 import javax.websocket.RemoteEndpoint;
 import javax.websocket.SendHandler;
 import javax.websocket.SendResult;
@@ -69,6 +72,7 @@ public abstract class WsRemoteEndpointBase implements RemoteEndpoint {
     private final AtomicBoolean batchingAllowed = new AtomicBoolean(false);
     private volatile long asyncSendTimeout = -1;
     private WsSession wsSession;
+    private List<EncoderEntry> encoderEntries = new ArrayList<>();
 
 
     @Override
@@ -447,6 +451,15 @@ public abstract class WsRemoteEndpointBase implements RemoteEndpoint {
     }
 
 
+    protected void setEncoders(List<Encoder> encoders) {
+        encoderEntries.clear();
+        for (Encoder encoder : encoders) {
+            EncoderEntry entry =
+                    new EncoderEntry(Util.getEncoderType(encoder), encoder);
+            encoderEntries.add(entry);
+        }
+    }
+
     protected abstract void doWrite(SendHandler handler, ByteBuffer... data);
     protected abstract boolean isMasked();
     protected abstract void close();
@@ -772,4 +785,24 @@ public abstract class WsRemoteEndpointBase implements RemoteEndpoint {
             buffer.clear();
         }
     }
+
+
+    private static class EncoderEntry {
+
+        private final Class<?> clazz;
+        private final Encoder encoder;
+
+        public EncoderEntry(Class<?> clazz, Encoder encoder) {
+            this.clazz = clazz;
+            this.encoder = encoder;
+        }
+
+        public Class<?> getClazz() {
+            return clazz;
+        }
+
+        public Encoder getEncoder() {
+            return encoder;
+        }
+    }
 }

==================================================
WsWebSocketContainer.java
index 50f5c91411..8e7d91dd65 100644
--- a/java/org/apache/tomcat/websocket/WsSession.java
+++ b/java/org/apache/tomcat/websocket/WsSession.java
@@ -31,6 +31,7 @@ import java.util.concurrent.ConcurrentHashMap;
 
 import javax.websocket.CloseReason;
 import javax.websocket.CloseReason.CloseCodes;
+import javax.websocket.Encoder;
 import javax.websocket.Endpoint;
 import javax.websocket.Extension;
 import javax.websocket.MessageHandler;
@@ -88,7 +89,7 @@ public class WsSession implements Session {
             WsWebSocketContainer wsWebSocketContainer,
             WsRequest request, String subProtocol,
             Map<String,String> pathParameters,
-            boolean secure) {
+            boolean secure, List<Encoder> encoders) {
         this.localEndpoint = localEndpoint;
         this.wsRemoteEndpoint = wsRemoteEndpoint;
         this.wsRemoteEndpoint.setSession(this);
@@ -106,6 +107,7 @@ public class WsSession implements Session {
         this.subProtocol = subProtocol;
         this.pathParameters = pathParameters;
         this.secure = secure;
+        this.wsRemoteEndpoint.setEncoders(encoders);
     }
 
 
@@ -387,6 +389,7 @@ public class WsSession implements Session {
         lastActive = System.currentTimeMillis();
     }
 
+
     protected void expire() {
         long timeout = sessionIdleTimeout;
         if (timeout < 1) {

==================================================
WsProtocolHandler.java
index 7b9bb68345..61a2c8bce9 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -173,7 +173,8 @@ public class WsWebSocketContainer
         }
 
         WsSession wsSession = new WsSession(endpoint, wsRemoteEndpointClient,
-                this, null, subProtocol, Collections.EMPTY_MAP, false);
+                this, null, subProtocol, Collections.EMPTY_MAP, false,
+                clientEndpointConfiguration.getEncoders());
         endpoint.onOpen(wsSession, clientEndpointConfiguration);
         registerSession(clazz, wsSession);
 

==================================================
