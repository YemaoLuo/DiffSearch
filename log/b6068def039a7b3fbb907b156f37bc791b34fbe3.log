b6068def039a7b3fbb907b156f37bc791b34fbe3
==================================================
Code cleanup (format) - no functional change
==================================================
Mark Thomas
==================================================
Wed Feb 15 15:00:24 2023 +0000
==================================================
TestAddCharSetFilter.java
Code cleanup (format) - no functional change


==================================================
TestCorsFilter.java
index 7b069269cb..cb8788658f 100644
--- a/test/org/apache/catalina/filters/TestAddCharSetFilter.java
+++ b/test/org/apache/catalina/filters/TestAddCharSetFilter.java
@@ -88,8 +88,7 @@ public class TestAddCharSetFilter extends TomcatBaseTest {
         doTest(encoding, expected, 1, false);
     }
 
-    private void doTest(String encoding, String expected, int mode, boolean useSetContentType)
-            throws Exception {
+    private void doTest(String encoding, String expected, int mode, boolean useSetContentType) throws Exception {
         // Setup Tomcat instance
         Tomcat tomcat = getTomcatInstance();
 
@@ -136,8 +135,7 @@ public class TestAddCharSetFilter extends TomcatBaseTest {
         }
 
         @Override
-        protected void doGet(HttpServletRequest req, HttpServletResponse resp)
-                throws ServletException, IOException {
+        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
 
             String value;
             switch (mode) {

==================================================
TestCsrfPreventionFilter.java
index 73d1c98627..c5f68b1b81 100644
--- a/test/org/apache/catalina/filters/TestCorsFilter.java
+++ b/test/org/apache/catalina/filters/TestCorsFilter.java
@@ -41,14 +41,15 @@ public class TestCorsFilter {
      * Tests if a GET request is treated as simple request.
      *
      * @See http://www.w3.org/TR/cors/#simple-method
+     *
      * @throws IOException
+     *
      * @throws ServletException
      */
     @Test
     public void testDoFilterSimpleGET() throws IOException, ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
         request.setMethod("GET");
         TesterHttpServletResponse response = new TesterHttpServletResponse();
 
@@ -56,30 +57,28 @@ public class TestCorsFilter {
         corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
         corsFilter.doFilter(request, response, filterChain);
 
-        Assert.assertTrue(response.getHeader(
-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals("*"));
-        Assert.assertTrue(((Boolean) request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN).equals(
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE).equals(
-                CorsFilter.CORSRequestType.SIMPLE.name().toLowerCase(Locale.ENGLISH)));
+        Assert.assertTrue(response.getHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals("*"));
+        Assert.assertTrue(
+                ((Boolean) request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN)
+                .equals(TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE)
+                .equals(CorsFilter.CORSRequestType.SIMPLE.name().toLowerCase(Locale.ENGLISH)));
     }
 
     /*
      * Tests if a POST request is treated as simple request.
      *
      * @See http://www.w3.org/TR/cors/#simple-method
+     *
      * @throws IOException
+     *
      * @throws ServletException
      */
     @Test
     public void testDoFilterSimplePOST() throws IOException, ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
         request.setContentType("text/plain");
         request.setMethod("POST");
         TesterHttpServletResponse response = new TesterHttpServletResponse();
@@ -88,30 +87,28 @@ public class TestCorsFilter {
         corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
         corsFilter.doFilter(request, response, filterChain);
 
-        Assert.assertTrue(response.getHeader(
-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals("*"));
-        Assert.assertTrue(((Boolean) request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN).equals(
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE).equals(
-                CorsFilter.CORSRequestType.SIMPLE.name().toLowerCase(Locale.ENGLISH)));
+        Assert.assertTrue(response.getHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals("*"));
+        Assert.assertTrue(
+                ((Boolean) request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN)
+                .equals(TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE)
+                .equals(CorsFilter.CORSRequestType.SIMPLE.name().toLowerCase(Locale.ENGLISH)));
     }
 
     /*
      * Tests if a HEAD request is treated as simple request.
      *
      * @See http://www.w3.org/TR/cors/#simple-method
+     *
      * @throws IOException
+     *
      * @throws ServletException
      */
     @Test
     public void testDoFilterSimpleHEAD() throws IOException, ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
         request.setMethod("HEAD");
         TesterHttpServletResponse response = new TesterHttpServletResponse();
 
@@ -119,30 +116,26 @@ public class TestCorsFilter {
         corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
         corsFilter.doFilter(request, response, filterChain);
 
-        Assert.assertTrue(response.getHeader(
-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals("*"));
-        Assert.assertTrue(((Boolean) request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN).equals(
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE).equals(
-                CorsFilter.CORSRequestType.SIMPLE.name().toLowerCase(Locale.ENGLISH)));
+        Assert.assertTrue(response.getHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals("*"));
+        Assert.assertTrue(
+                ((Boolean) request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN)
+                .equals(TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE)
+                .equals(CorsFilter.CORSRequestType.SIMPLE.name().toLowerCase(Locale.ENGLISH)));
     }
 
     /*
      * Test the presence of specific origin in response, when '*' is not used.
      *
      * @throws IOException
+     *
      * @throws ServletException
      */
     @Test
-    public void testDoFilterSimpleSpecificHeader() throws IOException,
-            ServletException {
+    public void testDoFilterSimpleSpecificHeader() throws IOException, ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
         request.setMethod("POST");
         request.setContentType("text/plain");
         TesterHttpServletResponse response = new TesterHttpServletResponse();
@@ -151,325 +144,251 @@ public class TestCorsFilter {
         corsFilter.init(TesterFilterConfigs.getSpecificOriginFilterConfig());
         corsFilter.doFilter(request, response, filterChain);
 
-        Assert.assertTrue(response.getHeader(
-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals(
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
-        Assert.assertTrue(((Boolean) request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN).equals(
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE).equals(
-                CorsFilter.CORSRequestType.SIMPLE.name().toLowerCase(Locale.ENGLISH)));
+        Assert.assertTrue(response.getHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN)
+                .equals(TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
+        Assert.assertTrue(
+                ((Boolean) request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN)
+                .equals(TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE)
+                .equals(CorsFilter.CORSRequestType.SIMPLE.name().toLowerCase(Locale.ENGLISH)));
     }
 
     /*
-     * Tests the that supports credentials may not be enabled with any origin,
-     * '*'.
+     * Tests the that supports credentials may not be enabled with any origin, '*'.
      *
      * @throws ServletException
      */
-    @Test(expected=ServletException.class)
+    @Test(expected = ServletException.class)
     public void testDoFilterSimpleAnyOriginAndSupportsCredentials() throws ServletException {
         CorsFilter corsFilter = new CorsFilter();
         corsFilter.init(TesterFilterConfigs.getFilterConfigAnyOriginAndSupportsCredentials());
     }
 
     /*
-     * Tests the presence of the origin (and not '*') in the response, when
-     * supports credentials is enabled alongwith any origin, '*'.
+     * Tests the presence of the origin (and not '*') in the response, when supports credentials is enabled alongwith
+     * any origin, '*'.
      *
      * @throws IOException
+     *
      * @throws ServletException
      */
     @Test
-    public void testDoFilterSimpleAnyOriginAndSupportsCredentialsDisabled()
-            throws IOException, ServletException {
+    public void testDoFilterSimpleAnyOriginAndSupportsCredentialsDisabled() throws IOException, ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
         request.setMethod("GET");
         TesterHttpServletResponse response = new TesterHttpServletResponse();
 
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getFilterConfigAnyOriginAndSupportsCredentialsDisabled());
+        corsFilter.init(TesterFilterConfigs.getFilterConfigAnyOriginAndSupportsCredentialsDisabled());
         corsFilter.doFilter(request, response, filterChain);
 
-        Assert.assertTrue(response.getHeader(
-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals(
-                TesterFilterConfigs.ANY_ORIGIN));
-        Assert.assertNull(response.getHeader(
-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS));
-        Assert.assertTrue(((Boolean) request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN).equals(
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE).equals(
-                CorsFilter.CORSRequestType.SIMPLE.name().toLowerCase(Locale.ENGLISH)));
+        Assert.assertTrue(response.getHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN)
+                .equals(TesterFilterConfigs.ANY_ORIGIN));
+        Assert.assertNull(response.getHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS));
+        Assert.assertTrue(
+                ((Boolean) request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN)
+                .equals(TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE)
+                .equals(CorsFilter.CORSRequestType.SIMPLE.name().toLowerCase(Locale.ENGLISH)));
     }
 
     /*
      * Tests the presence of exposed headers in response, if configured.
      *
      * @throws IOException
+     *
      * @throws ServletException
      */
     @Test
-    public void testDoFilterSimpleWithExposedHeaders() throws IOException,
-            ServletException {
+    public void testDoFilterSimpleWithExposedHeaders() throws IOException, ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
         request.setMethod("POST");
         request.setContentType("text/plain");
         TesterHttpServletResponse response = new TesterHttpServletResponse();
 
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getFilterConfigWithExposedHeaders());
+        corsFilter.init(TesterFilterConfigs.getFilterConfigWithExposedHeaders());
         corsFilter.doFilter(request, response, filterChain);
 
-        Assert.assertTrue(response.getHeader(
-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals("*"));
-        Assert.assertTrue(response.getHeader(
-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_EXPOSE_HEADERS)
+        Assert.assertTrue(response.getHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals("*"));
+        Assert.assertTrue(response.getHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_EXPOSE_HEADERS)
                 .equals(TesterFilterConfigs.EXPOSED_HEADERS));
-        Assert.assertTrue(((Boolean) request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN).equals(
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE).equals(
-                CorsFilter.CORSRequestType.SIMPLE.name().toLowerCase(Locale.ENGLISH)));
+        Assert.assertTrue(
+                ((Boolean) request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN)
+                .equals(TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE)
+                .equals(CorsFilter.CORSRequestType.SIMPLE.name().toLowerCase(Locale.ENGLISH)));
     }
 
     /*
      * Checks if an OPTIONS request is processed as pre-flight.
      *
      * @throws IOException
+     *
      * @throws ServletException
      */
     @Test
     public void testDoFilterPreflight() throws IOException, ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, "PUT");
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS,
-                "Content-Type");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, "PUT");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS, "Content-Type");
         request.setMethod("OPTIONS");
         TesterHttpServletResponse response = new TesterHttpServletResponse();
 
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getSpecificOriginFilterConfig());
+        corsFilter.init(TesterFilterConfigs.getSpecificOriginFilterConfig());
         corsFilter.doFilter(request, response, filterChain);
 
-        Assert.assertTrue(response.getHeader(
-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals(
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
-        Assert.assertTrue(((Boolean) request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN).equals(
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE).equals(
-                CorsFilter.CORSRequestType.PRE_FLIGHT.name().toLowerCase(Locale.ENGLISH)));
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_HEADERS).equals(
-                "Content-Type"));
+        Assert.assertTrue(response.getHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN)
+                .equals(TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
+        Assert.assertTrue(
+                ((Boolean) request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN)
+                .equals(TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE)
+                .equals(CorsFilter.CORSRequestType.PRE_FLIGHT.name().toLowerCase(Locale.ENGLISH)));
+        Assert.assertTrue(
+                request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_HEADERS).equals("Content-Type"));
     }
 
     /*
-     * Checks if an OPTIONS request is processed as pre-flight where any origin
-     * is enabled.
+     * Checks if an OPTIONS request is processed as pre-flight where any origin is enabled.
      *
      * @throws IOException
+     *
      * @throws ServletException
      */
     @Test
-    public void testDoFilterPreflightAnyOrigin() throws IOException,
-            ServletException {
+    public void testDoFilterPreflightAnyOrigin() throws IOException, ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, "PUT");
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS,
-                "Content-Type");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, "PUT");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS, "Content-Type");
         request.setMethod("OPTIONS");
         TesterHttpServletResponse response = new TesterHttpServletResponse();
 
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getSpecificOriginFilterConfig());
+        corsFilter.init(TesterFilterConfigs.getSpecificOriginFilterConfig());
         corsFilter.doFilter(request, response, filterChain);
 
-        Assert.assertTrue(response.getHeader(
-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals(
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
-        Assert.assertTrue(((Boolean) request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN).equals(
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE).equals(
-                CorsFilter.CORSRequestType.PRE_FLIGHT.name().toLowerCase(Locale.ENGLISH)));
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_HEADERS).equals(
-                "Content-Type"));
+        Assert.assertTrue(response.getHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN)
+                .equals(TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
+        Assert.assertTrue(
+                ((Boolean) request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN)
+                .equals(TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE)
+                .equals(CorsFilter.CORSRequestType.PRE_FLIGHT.name().toLowerCase(Locale.ENGLISH)));
+        Assert.assertTrue(
+                request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_HEADERS).equals("Content-Type"));
     }
 
     /*
      * Checks if an OPTIONS request is processed as pre-flight.
      *
      * @throws IOException
+     *
      * @throws ServletException
      */
     @Test
-    public void testDoFilterPreflightInvalidOrigin() throws IOException,
-            ServletException {
+    public void testDoFilterPreflightInvalidOrigin() throws IOException, ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                "http://www.example.com");
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, "PUT");
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS,
-                "Content-Type");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, "http://www.example.com");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, "PUT");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS, "Content-Type");
         request.setMethod("OPTIONS");
         TesterHttpServletResponse response = new TesterHttpServletResponse();
 
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getSpecificOriginFilterConfig());
+        corsFilter.init(TesterFilterConfigs.getSpecificOriginFilterConfig());
         corsFilter.doFilter(request, response, filterChain);
 
-        Assert.assertEquals(response.getStatus(),
-                HttpServletResponse.SC_FORBIDDEN);
+        Assert.assertEquals(response.getStatus(), HttpServletResponse.SC_FORBIDDEN);
     }
 
     @Test
-    public void testDoFilterPreflightNegativeMaxAge() throws IOException,
-            ServletException {
+    public void testDoFilterPreflightNegativeMaxAge() throws IOException, ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, "PUT");
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS,
-                "Content-Type");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, "PUT");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS, "Content-Type");
         request.setMethod("OPTIONS");
         TesterHttpServletResponse response = new TesterHttpServletResponse();
 
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getSpecificOriginFilterConfigNegativeMaxAge());
+        corsFilter.init(TesterFilterConfigs.getSpecificOriginFilterConfigNegativeMaxAge());
         corsFilter.doFilter(request, response, filterChain);
 
-        Assert.assertTrue(response.getHeader(
-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals(
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
-        Assert.assertNull(response.getHeader(
-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_MAX_AGE));
-        Assert.assertTrue(((Boolean) request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN).equals(
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE).equals(
-                CorsFilter.CORSRequestType.PRE_FLIGHT.name().toLowerCase(Locale.ENGLISH)));
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_HEADERS).equals(
-                "Content-Type"));
-    }
-
-    @Test
-    public void testDoFilterPreflightWithCredentials() throws IOException,
-            ServletException {
+        Assert.assertTrue(response.getHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN)
+                .equals(TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
+        Assert.assertNull(response.getHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_MAX_AGE));
+        Assert.assertTrue(
+                ((Boolean) request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN)
+                .equals(TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE)
+                .equals(CorsFilter.CORSRequestType.PRE_FLIGHT.name().toLowerCase(Locale.ENGLISH)));
+        Assert.assertTrue(
+                request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_HEADERS).equals("Content-Type"));
+    }
+
+    @Test
+    public void testDoFilterPreflightWithCredentials() throws IOException, ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, "PUT");
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS,
-                "Content-Type");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, "PUT");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS, "Content-Type");
         request.setMethod("OPTIONS");
         TesterHttpServletResponse response = new TesterHttpServletResponse();
 
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getSecureFilterConfig());
+        corsFilter.init(TesterFilterConfigs.getSecureFilterConfig());
         corsFilter.doFilter(request, response, filterChain);
 
-        Assert.assertTrue(response.getHeader(
-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals(
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
-        Assert.assertTrue(response.getHeader(
-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS)
-                .equals("true"));
-        Assert.assertTrue(((Boolean) request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN).equals(
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE).equals(
-                CorsFilter.CORSRequestType.PRE_FLIGHT.name().toLowerCase(Locale.ENGLISH)));
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_HEADERS).equals(
-                "Content-Type"));
-    }
-
-    @Test
-    public void testDoFilterPreflightWithoutCredentialsAndSpecificOrigin()
-            throws IOException,
-            ServletException {
+        Assert.assertTrue(response.getHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN)
+                .equals(TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
+        Assert.assertTrue(
+                response.getHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS).equals("true"));
+        Assert.assertTrue(
+                ((Boolean) request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN)
+                .equals(TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE)
+                .equals(CorsFilter.CORSRequestType.PRE_FLIGHT.name().toLowerCase(Locale.ENGLISH)));
+        Assert.assertTrue(
+                request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_HEADERS).equals("Content-Type"));
+    }
+
+    @Test
+    public void testDoFilterPreflightWithoutCredentialsAndSpecificOrigin() throws IOException, ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, "PUT");
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS,
-                "Content-Type");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, "PUT");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS, "Content-Type");
         request.setMethod("OPTIONS");
         TesterHttpServletResponse response = new TesterHttpServletResponse();
 
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getFilterConfigSpecificOriginAndSupportsCredentialsDisabled());
+        corsFilter.init(TesterFilterConfigs.getFilterConfigSpecificOriginAndSupportsCredentialsDisabled());
         corsFilter.doFilter(request, response, filterChain);
 
-        Assert.assertTrue(response.getHeader(
-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals(
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
-        Assert.assertNull(response.getHeader(
-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS));
-        Assert.assertTrue(((Boolean) request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN).equals(
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE).equals(
-                CorsFilter.CORSRequestType.PRE_FLIGHT.name().toLowerCase(Locale.ENGLISH)));
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_HEADERS).equals(
-                "Content-Type"));
+        Assert.assertTrue(response.getHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN)
+                .equals(TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
+        Assert.assertNull(response.getHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS));
+        Assert.assertTrue(
+                ((Boolean) request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN)
+                .equals(TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE)
+                .equals(CorsFilter.CORSRequestType.PRE_FLIGHT.name().toLowerCase(Locale.ENGLISH)));
+        Assert.assertTrue(
+                request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_HEADERS).equals("Content-Type"));
     }
 
     /*
@@ -485,14 +404,13 @@ public class TestCorsFilter {
 
         CorsFilter corsFilter = new CorsFilter();
         corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
-        CorsFilter.CORSRequestType requestType =
-                corsFilter.checkRequestType(request);
+        CorsFilter.CORSRequestType requestType = corsFilter.checkRequestType(request);
         Assert.assertEquals(CorsFilter.CORSRequestType.NOT_CORS, requestType);
 
         corsFilter.doFilter(request, response, filterChain);
 
-        Assert.assertFalse(((Boolean) request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
+        Assert.assertFalse(
+                ((Boolean) request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
     }
 
     /*
@@ -500,48 +418,41 @@ public class TestCorsFilter {
      */
     @Test
     public void testDoFilterSameHostWithOrigin01() throws IOException, ServletException {
-        doTestDoFilterSameHostWithOrigin01(
-                "http://localhost:8080", "http", "localhost", 8080, false);
+        doTestDoFilterSameHostWithOrigin01("http://localhost:8080", "http", "localhost", 8080, false);
     }
 
     @Test
     public void testDoFilterSameHostWithOrigin02() throws IOException, ServletException {
-        doTestDoFilterSameHostWithOrigin01(
-                "http://localhost:8080", "https", "localhost", 8080, true);
+        doTestDoFilterSameHostWithOrigin01("http://localhost:8080", "https", "localhost", 8080, true);
     }
 
     @Test
     public void testDoFilterSameHostWithOrigin03() throws IOException, ServletException {
-        doTestDoFilterSameHostWithOrigin01(
-                "http://localhost:8080", "http", "localhost", 8081, true);
+        doTestDoFilterSameHostWithOrigin01("http://localhost:8080", "http", "localhost", 8081, true);
     }
 
     @Test
     public void testDoFilterSameHostWithOrigin04() throws IOException, ServletException {
-        doTestDoFilterSameHostWithOrigin01(
-                "http://localhost:8080", "http", "foo.dev.local", 8080, true);
+        doTestDoFilterSameHostWithOrigin01("http://localhost:8080", "http", "foo.dev.local", 8080, true);
     }
 
     @Test
     public void testDoFilterSameHostWithOrigin05() throws IOException, ServletException {
-        doTestDoFilterSameHostWithOrigin01(
-                "https://localhost:8443", "https", "localhost", 8443, false);
+        doTestDoFilterSameHostWithOrigin01("https://localhost:8443", "https", "localhost", 8443, false);
     }
 
     @Test
     public void testDoFilterSameHostWithOrigin06() throws IOException, ServletException {
-        doTestDoFilterSameHostWithOrigin01(
-                "https://localhost", "https", "localhost", 443, false);
+        doTestDoFilterSameHostWithOrigin01("https://localhost", "https", "localhost", 443, false);
     }
 
     @Test
     public void testDoFilterSameHostWithOrigin07() throws IOException, ServletException {
-        doTestDoFilterSameHostWithOrigin01(
-                "http://localhost", "http", "localhost", 80, false);
+        doTestDoFilterSameHostWithOrigin01("http://localhost", "http", "localhost", 80, false);
     }
 
-    private void doTestDoFilterSameHostWithOrigin01(String origin, String scheme, String host,
-            int port, boolean isCors) throws IOException, ServletException {
+    private void doTestDoFilterSameHostWithOrigin01(String origin, String scheme, String host, int port, boolean isCors)
+            throws IOException, ServletException {
 
         TesterHttpServletRequest request = new TesterHttpServletRequest();
 
@@ -555,8 +466,7 @@ public class TestCorsFilter {
 
         CorsFilter corsFilter = new CorsFilter();
         corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
-        CorsFilter.CORSRequestType requestType =
-                corsFilter.checkRequestType(request);
+        CorsFilter.CORSRequestType requestType = corsFilter.checkRequestType(request);
         if (isCors) {
             Assert.assertNotEquals(CorsFilter.CORSRequestType.NOT_CORS, requestType);
         } else {
@@ -566,20 +476,18 @@ public class TestCorsFilter {
         corsFilter.doFilter(request, response, filterChain);
 
         if (isCors) {
-            Assert.assertTrue(((Boolean) request.getAttribute(
-                    CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
+            Assert.assertTrue(
+                    ((Boolean) request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
         } else {
-            Assert.assertFalse(((Boolean) request.getAttribute(
-                    CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
+            Assert.assertFalse(
+                    ((Boolean) request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
         }
     }
 
     @Test
-    public void testDoFilterInvalidCORSOriginNotAllowed() throws IOException,
-            ServletException {
+    public void testDoFilterInvalidCORSOriginNotAllowed() throws IOException, ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                "www.google.com");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, "www.google.com");
         request.setMethod("POST");
         TesterHttpServletResponse response = new TesterHttpServletResponse();
 
@@ -587,16 +495,14 @@ public class TestCorsFilter {
         corsFilter.init(TesterFilterConfigs.getSpecificOriginFilterConfig());
         corsFilter.doFilter(request, response, filterChain);
 
-        Assert.assertEquals(HttpServletResponse.SC_FORBIDDEN,
-                response.getStatus());
+        Assert.assertEquals(HttpServletResponse.SC_FORBIDDEN, response.getStatus());
     }
 
     /*
      * A CORS request arrives with a "null" origin which is allowed by default.
      */
     @Test
-    public void testDoFilterNullOriginAllowedByDefault() throws IOException,
-            ServletException {
+    public void testDoFilterNullOriginAllowedByDefault() throws IOException, ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
 
         request.setMethod("POST");
@@ -606,23 +512,20 @@ public class TestCorsFilter {
 
         CorsFilter corsFilter = new CorsFilter();
         corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
-        CorsFilter.CORSRequestType requestType =
-                corsFilter.checkRequestType(request);
+        CorsFilter.CORSRequestType requestType = corsFilter.checkRequestType(request);
         Assert.assertEquals(CorsFilter.CORSRequestType.SIMPLE, requestType);
 
         corsFilter.doFilter(request, response, filterChain);
 
-        Assert.assertTrue(((Boolean) request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
+        Assert.assertTrue(
+                ((Boolean) request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
     }
 
     /*
-     * A CORS request arrives with a "null" origin which is explicitly allowed
-     * by configuration.
+     * A CORS request arrives with a "null" origin which is explicitly allowed by configuration.
      */
     @Test
-    public void testDoFilterNullOriginAllowedByConfiguration() throws
-            IOException, ServletException {
+    public void testDoFilterNullOriginAllowedByConfiguration() throws IOException, ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
 
         request.setMethod("POST");
@@ -631,29 +534,25 @@ public class TestCorsFilter {
         TesterHttpServletResponse response = new TesterHttpServletResponse();
 
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(
-                TesterFilterConfigs.getFilterConfigSpecificOriginNullAllowed());
-        CorsFilter.CORSRequestType requestType =
-                corsFilter.checkRequestType(request);
+        corsFilter.init(TesterFilterConfigs.getFilterConfigSpecificOriginNullAllowed());
+        CorsFilter.CORSRequestType requestType = corsFilter.checkRequestType(request);
         Assert.assertEquals(CorsFilter.CORSRequestType.SIMPLE, requestType);
 
         corsFilter.doFilter(request, response, filterChain);
 
-        Assert.assertTrue(((Boolean) request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
+        Assert.assertTrue(
+                ((Boolean) request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
     }
 
     @Test(expected = ServletException.class)
-    public void testDoFilterNullRequestNullResponse() throws IOException,
-            ServletException {
+    public void testDoFilterNullRequestNullResponse() throws IOException, ServletException {
         CorsFilter corsFilter = new CorsFilter();
         corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
         corsFilter.doFilter(null, null, filterChain);
     }
 
     @Test(expected = ServletException.class)
-    public void testDoFilterNullRequestResponse() throws IOException,
-            ServletException {
+    public void testDoFilterNullRequestResponse() throws IOException, ServletException {
         TesterHttpServletResponse response = new TesterHttpServletResponse();
         CorsFilter corsFilter = new CorsFilter();
         corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
@@ -661,8 +560,7 @@ public class TestCorsFilter {
     }
 
     @Test(expected = ServletException.class)
-    public void testDoFilterRequestNullResponse() throws IOException,
-            ServletException {
+    public void testDoFilterRequestNullResponse() throws IOException, ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
         CorsFilter corsFilter = new CorsFilter();
         corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
@@ -670,11 +568,9 @@ public class TestCorsFilter {
     }
 
     @Test
-    public void testInitDefaultFilterConfig() throws IOException,
-            ServletException {
+    public void testInitDefaultFilterConfig() throws IOException, ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
         request.setMethod("GET");
         TesterHttpServletResponse response = new TesterHttpServletResponse();
 
@@ -684,14 +580,17 @@ public class TestCorsFilter {
             public ServletContext getServletContext() {
                 return null;
             }
+
             @Override
             public Enumeration<String> getInitParameterNames() {
                 return null;
             }
+
             @Override
             public String getInitParameter(String name) {
                 return null;
             }
+
             @Override
             public String getFilterName() {
                 return null;
@@ -699,16 +598,13 @@ public class TestCorsFilter {
         });
         corsFilter.doFilter(request, response, filterChain);
 
-        Assert.assertNull(response.getHeader(
-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN));
-        Assert.assertTrue(((Boolean) request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN).equals(
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
-        Assert.assertTrue(request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE).equals(
-                CorsFilter.CORSRequestType.SIMPLE.name().toLowerCase(Locale.ENGLISH)));
+        Assert.assertNull(response.getHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN));
+        Assert.assertTrue(
+                ((Boolean) request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN)
+                .equals(TesterFilterConfigs.HTTPS_WWW_APACHE_ORG));
+        Assert.assertTrue(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE)
+                .equals(CorsFilter.CORSRequestType.SIMPLE.name().toLowerCase(Locale.ENGLISH)));
     }
 
     @Test(expected = ServletException.class)
@@ -723,24 +619,20 @@ public class TestCorsFilter {
      * Tests if a non-simple request is given to simple request handler.
      *
      * @throws IOException
+     *
      * @throws ServletException
      */
     @Test(expected = IllegalArgumentException.class)
     public void testNotSimple() throws IOException, ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, "PUT");
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS,
-                "Content-Type");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, "PUT");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS, "Content-Type");
         request.setMethod("OPTIONS");
         TesterHttpServletResponse response = new TesterHttpServletResponse();
 
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getDefaultFilterConfig());
+        corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
         corsFilter.handleSimpleCORS(request, response, filterChain);
     }
 
@@ -748,13 +640,13 @@ public class TestCorsFilter {
      * When a non-preflight request is given to a pre-flight request handler.
      *
      * @throws IOException
+     *
      * @throws ServletException
      */
     @Test(expected = IllegalArgumentException.class)
     public void testNotPreflight() throws IOException, ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
         request.setMethod("GET");
         TesterHttpServletResponse response = new TesterHttpServletResponse();
 
@@ -770,8 +662,7 @@ public class TestCorsFilter {
 
     @Test(expected = IllegalArgumentException.class)
     public void testDecorateCORSPropertiesNullRequestValidCORSRequestType() {
-        CorsFilter.decorateCORSProperties(null,
-                CorsFilter.CORSRequestType.SIMPLE);
+        CorsFilter.decorateCORSProperties(null, CorsFilter.CORSRequestType.SIMPLE);
     }
 
     @Test(expected = IllegalArgumentException.class)
@@ -783,33 +674,26 @@ public class TestCorsFilter {
     @Test
     public void testDecorateCORSPropertiesCORSRequestTypeNotCORS() {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        CorsFilter.decorateCORSProperties(request,
-                CorsFilter.CORSRequestType.NOT_CORS);
-        Assert.assertFalse(((Boolean) request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
+        CorsFilter.decorateCORSProperties(request, CorsFilter.CORSRequestType.NOT_CORS);
+        Assert.assertFalse(
+                ((Boolean) request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
     }
 
     @Test
     public void testDecorateCORSPropertiesCORSRequestTypeInvalidCORS() {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        CorsFilter
-                .decorateCORSProperties(request,
-                        CorsFilter.CORSRequestType.INVALID_CORS);
-        Assert.assertNull(request
-                .getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST));
+        CorsFilter.decorateCORSProperties(request, CorsFilter.CORSRequestType.INVALID_CORS);
+        Assert.assertNull(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST));
     }
 
     @Test
     public void testCheckSimpleRequestTypeAnyOrigin() throws ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                "http://www.w3.org");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, "http://www.w3.org");
         request.setMethod("GET");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getDefaultFilterConfig());
-        CorsFilter.CORSRequestType requestType =
-                corsFilter.checkRequestType(request);
+        corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
+        CorsFilter.CORSRequestType requestType = corsFilter.checkRequestType(request);
         Assert.assertEquals(CorsFilter.CORSRequestType.SIMPLE, requestType);
     }
 
@@ -821,14 +705,11 @@ public class TestCorsFilter {
     @Test
     public void testCheckSimpleRequestType() throws ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTP_TOMCAT_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTP_TOMCAT_APACHE_ORG);
         request.setMethod("GET");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getDefaultFilterConfig());
-        CorsFilter.CORSRequestType requestType =
-                corsFilter.checkRequestType(request);
+        corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
+        CorsFilter.CORSRequestType requestType = corsFilter.checkRequestType(request);
         Assert.assertEquals(CorsFilter.CORSRequestType.SIMPLE, requestType);
     }
 
@@ -840,14 +721,11 @@ public class TestCorsFilter {
     @Test
     public void testCheckActualRequestType() throws ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTP_TOMCAT_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTP_TOMCAT_APACHE_ORG);
         request.setMethod("PUT");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getDefaultFilterConfig());
-        CorsFilter.CORSRequestType requestType =
-                corsFilter.checkRequestType(request);
+        corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
+        CorsFilter.CORSRequestType requestType = corsFilter.checkRequestType(request);
         Assert.assertEquals(CorsFilter.CORSRequestType.ACTUAL, requestType);
     }
 
@@ -857,18 +735,14 @@ public class TestCorsFilter {
      * @throws ServletException
      */
     @Test
-    public void testCheckActualRequestTypeMethodPOSTNotSimpleHeaders()
-            throws ServletException {
+    public void testCheckActualRequestTypeMethodPOSTNotSimpleHeaders() throws ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTP_TOMCAT_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTP_TOMCAT_APACHE_ORG);
         request.setMethod("POST");
         request.setContentType("application/json");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getDefaultFilterConfig());
-        CorsFilter.CORSRequestType requestType =
-                corsFilter.checkRequestType(request);
+        corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
+        CorsFilter.CORSRequestType requestType = corsFilter.checkRequestType(request);
         Assert.assertEquals(CorsFilter.CORSRequestType.ACTUAL, requestType);
     }
 
@@ -880,63 +754,44 @@ public class TestCorsFilter {
     @Test
     public void testCheckPreFlightRequestType() throws ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTP_TOMCAT_APACHE_ORG);
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD,
-                "PUT");
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS,
-                "Content-Type");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTP_TOMCAT_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, "PUT");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS, "Content-Type");
         request.setMethod("OPTIONS");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getDefaultFilterConfig());
-        CorsFilter.CORSRequestType requestType =
-                corsFilter.checkRequestType(request);
+        corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
+        CorsFilter.CORSRequestType requestType = corsFilter.checkRequestType(request);
         Assert.assertEquals(CorsFilter.CORSRequestType.PRE_FLIGHT, requestType);
     }
 
     /*
-     * when a valid CORS Pre-flight request arrives, with no
-     * Access-Control-Request-Method
+     * when a valid CORS Pre-flight request arrives, with no Access-Control-Request-Method
      */
     @Test
     public void testCheckPreFlightRequestTypeNoACRM() throws ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTP_TOMCAT_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTP_TOMCAT_APACHE_ORG);
 
         request.setMethod("OPTIONS");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getDefaultFilterConfig());
-        CorsFilter.CORSRequestType requestType =
-                corsFilter.checkRequestType(request);
+        corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
+        CorsFilter.CORSRequestType requestType = corsFilter.checkRequestType(request);
         Assert.assertEquals(CorsFilter.CORSRequestType.ACTUAL, requestType);
     }
 
     /*
-     * when a valid CORS Pre-flight request arrives, with empty
-     * Access-Control-Request-Method
+     * when a valid CORS Pre-flight request arrives, with empty Access-Control-Request-Method
      */
     @Test
-    public void testCheckPreFlightRequestTypeEmptyACRM()
-            throws ServletException {
+    public void testCheckPreFlightRequestTypeEmptyACRM() throws ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTP_TOMCAT_APACHE_ORG);
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD,
-                "");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTP_TOMCAT_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, "");
         request.setMethod("OPTIONS");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getDefaultFilterConfig());
-        CorsFilter.CORSRequestType requestType =
-                corsFilter.checkRequestType(request);
-        Assert.assertEquals(CorsFilter.CORSRequestType.INVALID_CORS,
-                requestType);
+        corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
+        CorsFilter.CORSRequestType requestType = corsFilter.checkRequestType(request);
+        Assert.assertEquals(CorsFilter.CORSRequestType.INVALID_CORS, requestType);
     }
 
     /*
@@ -945,20 +800,14 @@ public class TestCorsFilter {
      * @throws ServletException
      */
     @Test
-    public void testCheckPreFlightRequestTypeNoHeaders()
-            throws ServletException {
+    public void testCheckPreFlightRequestTypeNoHeaders() throws ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTP_TOMCAT_APACHE_ORG);
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD,
-                "PUT");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTP_TOMCAT_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, "PUT");
         request.setMethod("OPTIONS");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getDefaultFilterConfig());
-        CorsFilter.CORSRequestType requestType =
-                corsFilter.checkRequestType(request);
+        corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
+        CorsFilter.CORSRequestType requestType = corsFilter.checkRequestType(request);
         Assert.assertEquals(CorsFilter.CORSRequestType.PRE_FLIGHT, requestType);
     }
 
@@ -966,128 +815,96 @@ public class TestCorsFilter {
      * Section 6.2.3
      *
      * @throws ServletException
+     *
      * @throws IOException
      */
     @Test
-    public void testCheckPreFlightRequestTypeInvalidRequestMethod()
-            throws ServletException, IOException {
+    public void testCheckPreFlightRequestTypeInvalidRequestMethod() throws ServletException, IOException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
         TesterHttpServletResponse response = new TesterHttpServletResponse();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTP_TOMCAT_APACHE_ORG);
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD,
-                "POLITE");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTP_TOMCAT_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, "POLITE");
         request.setMethod("OPTIONS");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getDefaultFilterConfig());
+        corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
         corsFilter.doFilter(request, response, filterChain);
-        Assert.assertEquals(HttpServletResponse.SC_FORBIDDEN,
-                response.getStatus());
+        Assert.assertEquals(HttpServletResponse.SC_FORBIDDEN, response.getStatus());
     }
 
     /*
      * Section Section 6.2.5
      *
      * @throws ServletException
+     *
      * @throws IOException
      */
     @Test
-    public void testCheckPreFlightRequestTypeUnsupportedRequestMethod()
-            throws ServletException, IOException {
+    public void testCheckPreFlightRequestTypeUnsupportedRequestMethod() throws ServletException, IOException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
         TesterHttpServletResponse response = new TesterHttpServletResponse();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTP_TOMCAT_APACHE_ORG);
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD,
-                "TRACE");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTP_TOMCAT_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, "TRACE");
         request.setMethod("OPTIONS");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getDefaultFilterConfig());
+        corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
         corsFilter.doFilter(request, response, filterChain);
-        Assert.assertEquals(HttpServletResponse.SC_FORBIDDEN,
-                response.getStatus());
+        Assert.assertEquals(HttpServletResponse.SC_FORBIDDEN, response.getStatus());
     }
 
     /*
      * Section Section 6.2.6
      *
      * @throws ServletException
+     *
      * @throws IOException
      */
     @Test
-    public void testCheckPreFlightRequestTypeUnsupportedRequestHeaders()
-            throws ServletException, IOException {
+    public void testCheckPreFlightRequestTypeUnsupportedRequestHeaders() throws ServletException, IOException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
         TesterHttpServletResponse response = new TesterHttpServletResponse();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD,
-                "PUT");
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS,
-                "X-ANSWER");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, "PUT");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS, "X-ANSWER");
         request.setMethod("OPTIONS");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getSecureFilterConfig());
+        corsFilter.init(TesterFilterConfigs.getSecureFilterConfig());
         corsFilter.doFilter(request, response, filterChain);
-        Assert.assertEquals(HttpServletResponse.SC_FORBIDDEN,
-                response.getStatus());
+        Assert.assertEquals(HttpServletResponse.SC_FORBIDDEN, response.getStatus());
     }
 
     /*
      * Section Section 6.2.7
      *
      * @throws ServletException
+     *
      * @throws IOException
      */
     @Test
-    public void testCheckPreFlightRequestTypeAnyOriginNoWithCredentials()
-            throws ServletException, IOException {
+    public void testCheckPreFlightRequestTypeAnyOriginNoWithCredentials() throws ServletException, IOException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
         TesterHttpServletResponse response = new TesterHttpServletResponse();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTP_TOMCAT_APACHE_ORG);
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD,
-                "PUT");
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS,
-                "Origin");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTP_TOMCAT_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, "PUT");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS, "Origin");
         request.setMethod("OPTIONS");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getFilterConfigAnyOriginAndSupportsCredentialsDisabled());
+        corsFilter.init(TesterFilterConfigs.getFilterConfigAnyOriginAndSupportsCredentialsDisabled());
         corsFilter.doFilter(request, response, filterChain);
-        Assert.assertTrue(response.getHeader(
-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals(
-                "*"));
-        Assert.assertNull(response
-                .getHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS));
+        Assert.assertTrue(response.getHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals("*"));
+        Assert.assertNull(response.getHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS));
     }
 
     @Test
-    public void testCheckPreFlightRequestTypeOriginNotAllowed()
-            throws ServletException, IOException {
+    public void testCheckPreFlightRequestTypeOriginNotAllowed() throws ServletException, IOException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
         TesterHttpServletResponse response = new TesterHttpServletResponse();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                "www.ebay.com");
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD,
-                "PUT");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, "www.ebay.com");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, "PUT");
         request.setMethod("OPTIONS");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getSecureFilterConfig());
+        corsFilter.init(TesterFilterConfigs.getSecureFilterConfig());
         corsFilter.doFilter(request, response, filterChain);
-        Assert.assertEquals(HttpServletResponse.SC_FORBIDDEN,
-                response.getStatus());
+        Assert.assertEquals(HttpServletResponse.SC_FORBIDDEN, response.getStatus());
     }
 
     /*
@@ -1096,23 +913,15 @@ public class TestCorsFilter {
      * @throws ServletException
      */
     @Test
-    public void testCheckPreFlightRequestTypeEmptyHeaders()
-            throws ServletException {
+    public void testCheckPreFlightRequestTypeEmptyHeaders() throws ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTP_TOMCAT_APACHE_ORG);
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD,
-                "PUT");
-        request.setHeader(
-                CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS,
-                "");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTP_TOMCAT_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_METHOD, "PUT");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ACCESS_CONTROL_REQUEST_HEADERS, "");
         request.setMethod("OPTIONS");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getDefaultFilterConfig());
-        CorsFilter.CORSRequestType requestType =
-                corsFilter.checkRequestType(request);
+        corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
+        CorsFilter.CORSRequestType requestType = corsFilter.checkRequestType(request);
         Assert.assertEquals(CorsFilter.CORSRequestType.PRE_FLIGHT, requestType);
     }
 
@@ -1122,50 +931,40 @@ public class TestCorsFilter {
      * @throws ServletException
      */
     @Test
-    public void testCheckNotCORSRequestTypeEmptyOrigin()
-            throws ServletException {
+    public void testCheckNotCORSRequestTypeEmptyOrigin() throws ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                "");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, "");
         request.setMethod("GET");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getDefaultFilterConfig());
-        CorsFilter.CORSRequestType requestType =
-                corsFilter.checkRequestType(request);
-        Assert.assertEquals(CorsFilter.CORSRequestType.INVALID_CORS,
-                requestType);
+        corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
+        CorsFilter.CORSRequestType requestType = corsFilter.checkRequestType(request);
+        Assert.assertEquals(CorsFilter.CORSRequestType.INVALID_CORS, requestType);
     }
 
     /*
-     * Tests for failure, when a different domain is used, that's not in the
-     * allowed list of origins.
+     * Tests for failure, when a different domain is used, that's not in the allowed list of origins.
      *
      * @throws ServletException
+     *
      * @throws IOException
      */
     @Test
     public void testCheckInvalidOrigin() throws ServletException, IOException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
         TesterHttpServletResponse response = new TesterHttpServletResponse();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                "www.example.com");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, "www.example.com");
         request.setMethod("GET");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getSpecificOriginFilterConfig());
+        corsFilter.init(TesterFilterConfigs.getSpecificOriginFilterConfig());
         corsFilter.doFilter(request, response, filterChain);
-        Assert.assertEquals(HttpServletResponse.SC_FORBIDDEN,
-                response.getStatus());
+        Assert.assertEquals(HttpServletResponse.SC_FORBIDDEN, response.getStatus());
     }
 
     /*
-     * Tests for failure, when the 'null' origin is used, and it's not in the
-     * list of allowed origins.
+     * Tests for failure, when the 'null' origin is used, and it's not in the list of allowed origins.
      */
     @Test
-    public void testCheckNullOriginNotAllowed() throws ServletException,
-            IOException {
+    public void testCheckNullOriginNotAllowed() throws ServletException, IOException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
         TesterHttpServletResponse response = new TesterHttpServletResponse();
         request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, "null");
@@ -1173,53 +972,45 @@ public class TestCorsFilter {
         CorsFilter corsFilter = new CorsFilter();
         corsFilter.init(TesterFilterConfigs.getSpecificOriginFilterConfig());
         corsFilter.doFilter(request, response, filterChain);
-        Assert.assertEquals(HttpServletResponse.SC_FORBIDDEN,
-                response.getStatus());
+        Assert.assertEquals(HttpServletResponse.SC_FORBIDDEN, response.getStatus());
     }
 
     /*
-     * Tests for failure, when a different sub-domain is used, that's not in the
-     * allowed list of origins.
+     * Tests for failure, when a different sub-domain is used, that's not in the allowed list of origins.
      *
      * @throws ServletException
+     *
      * @throws IOException
      */
     @Test
-    public void testCheckInvalidOriginNotAllowedSubdomain()
-            throws ServletException, IOException {
+    public void testCheckInvalidOriginNotAllowedSubdomain() throws ServletException, IOException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
         TesterHttpServletResponse response = new TesterHttpServletResponse();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                "http://commons.apache.org");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, "http://commons.apache.org");
         request.setMethod("GET");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getSpecificOriginFilterConfig());
+        corsFilter.init(TesterFilterConfigs.getSpecificOriginFilterConfig());
         corsFilter.doFilter(request, response, filterChain);
-        Assert.assertEquals(HttpServletResponse.SC_FORBIDDEN,
-                response.getStatus());
+        Assert.assertEquals(HttpServletResponse.SC_FORBIDDEN, response.getStatus());
     }
 
     /*
      * PUT is not an allowed request method.
      *
      * @throws ServletException
+     *
      * @throws IOException
      */
     @Test
-    public void testCheckInvalidRequestMethod() throws ServletException,
-            IOException {
+    public void testCheckInvalidRequestMethod() throws ServletException, IOException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
         TesterHttpServletResponse response = new TesterHttpServletResponse();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                "http://tomcat.apache.org");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, "http://tomcat.apache.org");
         request.setMethod("PUT");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getDefaultFilterConfig());
+        corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
         corsFilter.doFilter(request, response, filterChain);
-        Assert.assertEquals(HttpServletResponse.SC_FORBIDDEN,
-                response.getStatus());
+        Assert.assertEquals(HttpServletResponse.SC_FORBIDDEN, response.getStatus());
     }
 
     /*
@@ -1230,64 +1021,53 @@ public class TestCorsFilter {
     @Test
     public void testCheckNullRequestMethod() throws ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                "http://tomcat.apache.org");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, "http://tomcat.apache.org");
         request.setMethod(null);
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getSpecificOriginFilterConfig());
-        CorsFilter.CORSRequestType requestType =
-                corsFilter.checkRequestType(request);
-        Assert.assertEquals(CorsFilter.CORSRequestType.INVALID_CORS,
-                requestType);
+        corsFilter.init(TesterFilterConfigs.getSpecificOriginFilterConfig());
+        CorsFilter.CORSRequestType requestType = corsFilter.checkRequestType(request);
+        Assert.assertEquals(CorsFilter.CORSRequestType.INVALID_CORS, requestType);
     }
 
     /*
-     * "http://tomcat.apache.org" is an allowed origin and
-     * "https://tomcat.apache.org" is not, because scheme doesn't match
+     * "http://tomcat.apache.org" is an allowed origin and "https://tomcat.apache.org" is not, because scheme doesn't
+     * match
      *
      * @throws ServletException
      */
     @Test
     public void testCheckForSchemeVariance() throws ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                "https://tomcat.apache.org");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, "https://tomcat.apache.org");
         request.setMethod("POST");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getSpecificOriginFilterConfig());
-        CorsFilter.CORSRequestType requestType =
-                corsFilter.checkRequestType(request);
-        Assert.assertEquals(CorsFilter.CORSRequestType.INVALID_CORS,
-                requestType);
+        corsFilter.init(TesterFilterConfigs.getSpecificOriginFilterConfig());
+        CorsFilter.CORSRequestType requestType = corsFilter.checkRequestType(request);
+        Assert.assertEquals(CorsFilter.CORSRequestType.INVALID_CORS, requestType);
     }
 
     /*
-     * "http://tomcat.apache.org" is an allowed origin and
-     * "http://tomcat.apache.org:8080" is not, because ports doesn't match
+     * "http://tomcat.apache.org" is an allowed origin and "http://tomcat.apache.org:8080" is not, because ports doesn't
+     * match
      *
      * @throws ServletException
+     *
      * @throws IOException
      */
     @Test
     public void testCheckForPortVariance() throws ServletException, IOException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
         TesterHttpServletResponse response = new TesterHttpServletResponse();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                "http://tomcat.apache.org:8080");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, "http://tomcat.apache.org:8080");
         request.setMethod("GET");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getSpecificOriginFilterConfig());
+        corsFilter.init(TesterFilterConfigs.getSpecificOriginFilterConfig());
         corsFilter.doFilter(request, response, filterChain);
-        Assert.assertEquals(HttpServletResponse.SC_FORBIDDEN,
-                response.getStatus());
+        Assert.assertEquals(HttpServletResponse.SC_FORBIDDEN, response.getStatus());
     }
 
     /*
-     * Tests for failure, when an invalid {@link HttpServletRequest} is
-     * encountered.
+     * Tests for failure, when an invalid {@link HttpServletRequest} is encountered.
      */
     @Test(expected = IllegalArgumentException.class)
     public void testCheckRequestTypeNull() {
@@ -1388,11 +1168,9 @@ public class TestCorsFilter {
     }
 
     @Test(expected = ServletException.class)
-    public void testWithFilterConfigInvalidPreflightAge()
-            throws ServletException {
+    public void testWithFilterConfigInvalidPreflightAge() throws ServletException {
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getFilterConfigInvalidMaxPreflightAge());
+        corsFilter.init(TesterFilterConfigs.getFilterConfigInvalidMaxPreflightAge());
     }
 
     @Test
@@ -1447,76 +1225,57 @@ public class TestCorsFilter {
 
     @Test
     public void testInValidOriginEncodedCRLF3() {
-        Assert.assertFalse(RequestUtil
-                .isValidOrigin("http://www.w3.org%0%0d%0ad%0%0d%0aa"));
+        Assert.assertFalse(RequestUtil.isValidOrigin("http://www.w3.org%0%0d%0ad%0%0d%0aa"));
     }
 
     @Test
     public void testCheckInvalidCRLF1() throws ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                "http://www.w3.org\r\n");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, "http://www.w3.org\r\n");
         request.setMethod("GET");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getDefaultFilterConfig());
-        CorsFilter.CORSRequestType requestType =
-                corsFilter.checkRequestType(request);
-        Assert.assertEquals(CorsFilter.CORSRequestType.INVALID_CORS,
-                requestType);
+        corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
+        CorsFilter.CORSRequestType requestType = corsFilter.checkRequestType(request);
+        Assert.assertEquals(CorsFilter.CORSRequestType.INVALID_CORS, requestType);
     }
 
     @Test
     public void testCheckInvalidCRLF2() throws ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                "http://www.w3.org\r\n");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, "http://www.w3.org\r\n");
         request.setMethod("GET");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getDefaultFilterConfig());
-        CorsFilter.CORSRequestType requestType =
-                corsFilter.checkRequestType(request);
-        Assert.assertEquals(CorsFilter.CORSRequestType.INVALID_CORS,
-                requestType);
+        corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
+        CorsFilter.CORSRequestType requestType = corsFilter.checkRequestType(request);
+        Assert.assertEquals(CorsFilter.CORSRequestType.INVALID_CORS, requestType);
     }
 
     @Test
     public void testCheckInvalidCRLF3() throws ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                "http://www.w3.org%0d%0a");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, "http://www.w3.org%0d%0a");
         request.setMethod("GET");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getDefaultFilterConfig());
-        CorsFilter.CORSRequestType requestType =
-                corsFilter.checkRequestType(request);
-        Assert.assertEquals(CorsFilter.CORSRequestType.INVALID_CORS,
-                requestType);
+        corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
+        CorsFilter.CORSRequestType requestType = corsFilter.checkRequestType(request);
+        Assert.assertEquals(CorsFilter.CORSRequestType.INVALID_CORS, requestType);
     }
 
     @Test
     public void testCheckInvalidCRLF4() throws ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                "http://www.w3.org%0D%0A");
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, "http://www.w3.org%0D%0A");
         request.setMethod("GET");
         CorsFilter corsFilter = new CorsFilter();
-        corsFilter.init(TesterFilterConfigs
-                .getDefaultFilterConfig());
-        CorsFilter.CORSRequestType requestType =
-                corsFilter.checkRequestType(request);
-        Assert.assertEquals(CorsFilter.CORSRequestType.INVALID_CORS,
-                requestType);
+        corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
+        CorsFilter.CORSRequestType requestType = corsFilter.checkRequestType(request);
+        Assert.assertEquals(CorsFilter.CORSRequestType.INVALID_CORS, requestType);
     }
 
     @Test
-    public void testDecorateRequestDisabled() throws IOException,
-            ServletException {
+    public void testDecorateRequestDisabled() throws IOException, ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
-        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN,
-                TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
+        request.setHeader(CorsFilter.REQUEST_HEADER_ORIGIN, TesterFilterConfigs.HTTPS_WWW_APACHE_ORG);
         request.setMethod("GET");
         TesterHttpServletResponse response = new TesterHttpServletResponse();
 
@@ -1524,24 +1283,18 @@ public class TestCorsFilter {
         corsFilter.init(TesterFilterConfigs.getFilterConfigDecorateRequestDisabled());
         corsFilter.doFilter(request, response, filterChain);
 
-        Assert.assertTrue(response.getHeader(
-                CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals("*"));
-        Assert.assertNull(request
-                .getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST));
-        Assert.assertNull(request
-                .getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN));
-        Assert.assertNull(request
-                .getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_HEADERS));
-        Assert.assertNull(request
-                .getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE));
+        Assert.assertTrue(response.getHeader(CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN).equals("*"));
+        Assert.assertNull(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST));
+        Assert.assertNull(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_ORIGIN));
+        Assert.assertNull(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_HEADERS));
+        Assert.assertNull(request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_REQUEST_TYPE));
     }
 
     /*
      * A CORS request arrives with a "null" origin which is allowed by default.
      */
     @Test
-    public void testContentTypeWithParameter() throws IOException,
-            ServletException {
+    public void testContentTypeWithParameter() throws IOException, ServletException {
         TesterHttpServletRequest request = new TesterHttpServletRequest();
 
         request.setMethod("POST");
@@ -1551,13 +1304,12 @@ public class TestCorsFilter {
 
         CorsFilter corsFilter = new CorsFilter();
         corsFilter.init(TesterFilterConfigs.getDefaultFilterConfig());
-        CorsFilter.CORSRequestType requestType =
-                corsFilter.checkRequestType(request);
+        CorsFilter.CORSRequestType requestType = corsFilter.checkRequestType(request);
         Assert.assertEquals(CorsFilter.CORSRequestType.SIMPLE, requestType);
 
         corsFilter.doFilter(request, response, filterChain);
 
-        Assert.assertTrue(((Boolean) request.getAttribute(
-                CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
+        Assert.assertTrue(
+                ((Boolean) request.getAttribute(CorsFilter.HTTP_REQUEST_ATTRIBUTE_IS_CORS_REQUEST)).booleanValue());
     }
 }

==================================================
TestCsrfPreventionFilter2.java
index c625637420..05f0cd2be9 100644
--- a/test/org/apache/catalina/filters/TestCsrfPreventionFilter.java
+++ b/test/org/apache/catalina/filters/TestCsrfPreventionFilter.java
@@ -31,35 +31,29 @@ import org.apache.catalina.startup.TomcatBaseTest;
 
 public class TestCsrfPreventionFilter extends TomcatBaseTest {
 
-    private static final String RESULT_NONCE =
-        Constants.CSRF_NONCE_SESSION_ATTR_NAME + "=TESTNONCE";
+    private static final String RESULT_NONCE = Constants.CSRF_NONCE_SESSION_ATTR_NAME + "=TESTNONCE";
 
-    private final HttpServletResponse wrapper =
-        new CsrfPreventionFilter.CsrfResponseWrapper(
-                new NonEncodingResponse(), Constants.CSRF_NONCE_SESSION_ATTR_NAME, "TESTNONCE");
+    private final HttpServletResponse wrapper = new CsrfPreventionFilter.CsrfResponseWrapper(new NonEncodingResponse(),
+            Constants.CSRF_NONCE_SESSION_ATTR_NAME, "TESTNONCE");
 
     @Test
     public void testAddNonceNoQueryNoAnchor() throws Exception {
-        Assert.assertEquals("/test?" + RESULT_NONCE ,
-                wrapper.encodeRedirectURL("/test"));
+        Assert.assertEquals("/test?" + RESULT_NONCE, wrapper.encodeRedirectURL("/test"));
     }
 
     @Test
     public void testAddNonceQueryNoAnchor() throws Exception {
-        Assert.assertEquals("/test?a=b&" + RESULT_NONCE ,
-                wrapper.encodeRedirectURL("/test?a=b"));
+        Assert.assertEquals("/test?a=b&" + RESULT_NONCE, wrapper.encodeRedirectURL("/test?a=b"));
     }
 
     @Test
     public void testAddNonceNoQueryAnchor() throws Exception {
-        Assert.assertEquals("/test?" + RESULT_NONCE + "#c",
-                wrapper.encodeRedirectURL("/test#c"));
+        Assert.assertEquals("/test?" + RESULT_NONCE + "#c", wrapper.encodeRedirectURL("/test#c"));
     }
 
     @Test
     public void testAddNonceQueryAnchor() throws Exception {
-        Assert.assertEquals("/test?a=b&" + RESULT_NONCE + "#c",
-                wrapper.encodeRedirectURL("/test?a=b#c"));
+        Assert.assertEquals("/test?a=b&" + RESULT_NONCE + "#c", wrapper.encodeRedirectURL("/test?a=b#c"));
     }
 
     @Test
@@ -76,8 +70,7 @@ public class TestCsrfPreventionFilter extends TomcatBaseTest {
         ObjectOutputStream oos = new ObjectOutputStream(baos);
         oos.writeObject(cache);
 
-        ByteArrayInputStream bais =
-            new ByteArrayInputStream(baos.toByteArray());
+        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
         ObjectInputStream ois = new ObjectInputStream(bais);
         @SuppressWarnings("unchecked")
         LruCache<String> cache2 = (LruCache<String>) ois.readObject();

==================================================
TestExpiresFilter.java
index f8a3281428..9560c44bd5 100644
--- a/test/org/apache/catalina/filters/TestCsrfPreventionFilter2.java
+++ b/test/org/apache/catalina/filters/TestCsrfPreventionFilter2.java
@@ -24,8 +24,8 @@ import org.apache.catalina.filters.CsrfPreventionFilter.LruCache;
 public class TestCsrfPreventionFilter2 {
 
     /*
-     * When this test fails, it tends to enter a long running loop but it will
-     * eventually finish (after ~70s on a 8-core Windows box).
+     * When this test fails, it tends to enter a long running loop but it will eventually finish (after ~70s on a 8-core
+     * Windows box).
      */
     @Test
     public void testLruCacheConcurrency() throws Exception {

==================================================
TestRemoteIpFilter.java
index 3217146d32..38acb2eaa2 100644
--- a/test/org/apache/catalina/filters/TestExpiresFilter.java
+++ b/test/org/apache/catalina/filters/TestExpiresFilter.java
@@ -58,14 +58,11 @@ public class TestExpiresFilter extends TomcatBaseTest {
 
         FilterDef filterDef = new FilterDef();
         filterDef.addInitParameter("ExpiresDefault", "access plus 1 month");
-        filterDef.addInitParameter("ExpiresByType text/html",
-                "access plus 1 month 15 days 2 hours");
-        filterDef.addInitParameter("ExpiresByType image/gif",
-                "modification plus 5 hours 3 minutes");
+        filterDef.addInitParameter("ExpiresByType text/html", "access plus 1 month 15 days 2 hours");
+        filterDef.addInitParameter("ExpiresByType image/gif", "modification plus 5 hours 3 minutes");
         filterDef.addInitParameter("ExpiresByType image/jpg", "A10000");
         filterDef.addInitParameter("ExpiresByType video/mpeg", "M20000");
-        filterDef.addInitParameter("ExpiresExcludedResponseStatusCodes",
-                "304, 503");
+        filterDef.addInitParameter("ExpiresExcludedResponseStatusCodes", "304, 503");
 
         ExpiresFilter expiresFilter = new ExpiresFilter();
 
@@ -88,20 +85,16 @@ public class TestExpiresFilter extends TomcatBaseTest {
             Assert.assertEquals(503, excludedResponseStatusCodes[1]);
 
             // VERIFY DEFAULT CONFIGURATION
-            ExpiresConfiguration expiresConfigurationDefault =
-                    expiresFilter.getDefaultExpiresConfiguration();
-            Assert.assertEquals(StartingPoint.ACCESS_TIME,
-                    expiresConfigurationDefault.getStartingPoint());
+            ExpiresConfiguration expiresConfigurationDefault = expiresFilter.getDefaultExpiresConfiguration();
+            Assert.assertEquals(StartingPoint.ACCESS_TIME, expiresConfigurationDefault.getStartingPoint());
             Assert.assertEquals(1, expiresConfigurationDefault.getDurations().size());
-            Assert.assertEquals(DurationUnit.MONTH,
-                    expiresConfigurationDefault.getDurations().get(0).getUnit());
+            Assert.assertEquals(DurationUnit.MONTH, expiresConfigurationDefault.getDurations().get(0).getUnit());
             Assert.assertEquals(1, expiresConfigurationDefault.getDurations().get(0).getAmount());
 
             // VERIFY TEXT/HTML
-            ExpiresConfiguration expiresConfigurationTextHtml =
-                    expiresFilter.getExpiresConfigurationByContentType().get("text/html");
-            Assert.assertEquals(StartingPoint.ACCESS_TIME,
-                    expiresConfigurationTextHtml.getStartingPoint());
+            ExpiresConfiguration expiresConfigurationTextHtml = expiresFilter.getExpiresConfigurationByContentType()
+                    .get("text/html");
+            Assert.assertEquals(StartingPoint.ACCESS_TIME, expiresConfigurationTextHtml.getStartingPoint());
 
             Assert.assertEquals(3, expiresConfigurationTextHtml.getDurations().size());
 
@@ -118,10 +111,9 @@ public class TestExpiresFilter extends TomcatBaseTest {
             Assert.assertEquals(2, twoHours.getAmount());
 
             // VERIFY IMAGE/GIF
-            ExpiresConfiguration expiresConfigurationImageGif =
-                    expiresFilter.getExpiresConfigurationByContentType().get("image/gif");
-            Assert.assertEquals(StartingPoint.LAST_MODIFICATION_TIME,
-                    expiresConfigurationImageGif.getStartingPoint());
+            ExpiresConfiguration expiresConfigurationImageGif = expiresFilter.getExpiresConfigurationByContentType()
+                    .get("image/gif");
+            Assert.assertEquals(StartingPoint.LAST_MODIFICATION_TIME, expiresConfigurationImageGif.getStartingPoint());
 
             Assert.assertEquals(2, expiresConfigurationImageGif.getDurations().size());
 
@@ -134,10 +126,9 @@ public class TestExpiresFilter extends TomcatBaseTest {
             Assert.assertEquals(3, threeMinutes.getAmount());
 
             // VERIFY IMAGE/JPG
-            ExpiresConfiguration expiresConfigurationImageJpg =
-                    expiresFilter.getExpiresConfigurationByContentType().get("image/jpg");
-            Assert.assertEquals(StartingPoint.ACCESS_TIME,
-                    expiresConfigurationImageJpg.getStartingPoint());
+            ExpiresConfiguration expiresConfigurationImageJpg = expiresFilter.getExpiresConfigurationByContentType()
+                    .get("image/jpg");
+            Assert.assertEquals(StartingPoint.ACCESS_TIME, expiresConfigurationImageJpg.getStartingPoint());
 
             Assert.assertEquals(1, expiresConfigurationImageJpg.getDurations().size());
 
@@ -146,10 +137,9 @@ public class TestExpiresFilter extends TomcatBaseTest {
             Assert.assertEquals(10000, tenThousandSeconds.getAmount());
 
             // VERIFY VIDEO/MPEG
-            ExpiresConfiguration expiresConfiguration =
-                    expiresFilter.getExpiresConfigurationByContentType().get("video/mpeg");
-            Assert.assertEquals(StartingPoint.LAST_MODIFICATION_TIME,
-                    expiresConfiguration.getStartingPoint());
+            ExpiresConfiguration expiresConfiguration = expiresFilter.getExpiresConfigurationByContentType()
+                    .get("video/mpeg");
+            Assert.assertEquals(StartingPoint.LAST_MODIFICATION_TIME, expiresConfiguration.getStartingPoint());
 
             Assert.assertEquals(1, expiresConfiguration.getDurations().size());
 
@@ -170,9 +160,8 @@ public class TestExpiresFilter extends TomcatBaseTest {
             private static final long serialVersionUID = 1L;
 
             @Override
-            protected void service(HttpServletRequest request,
-                    HttpServletResponse response) throws ServletException,
-                    IOException {
+            protected void service(HttpServletRequest request, HttpServletResponse response)
+                    throws ServletException, IOException {
                 response.setContentType("text/plain");
                 // no content is written in the response
             }
@@ -184,10 +173,10 @@ public class TestExpiresFilter extends TomcatBaseTest {
     @Test
     public void testParseExpiresConfigurationCombinedDuration() {
         ExpiresFilter expiresFilter = new ExpiresFilter();
-        ExpiresConfiguration actualConfiguration = expiresFilter.parseExpiresConfiguration("access plus 1 month 15 days 2 hours");
+        ExpiresConfiguration actualConfiguration = expiresFilter
+                .parseExpiresConfiguration("access plus 1 month 15 days 2 hours");
 
-        Assert.assertEquals(StartingPoint.ACCESS_TIME,
-                actualConfiguration.getStartingPoint());
+        Assert.assertEquals(StartingPoint.ACCESS_TIME, actualConfiguration.getStartingPoint());
 
         Assert.assertEquals(3, actualConfiguration.getDurations().size());
 
@@ -198,14 +187,11 @@ public class TestExpiresFilter extends TomcatBaseTest {
         ExpiresFilter expiresFilter = new ExpiresFilter();
         ExpiresConfiguration actualConfiguration = expiresFilter.parseExpiresConfiguration("access plus 2 hours");
 
-        Assert.assertEquals(StartingPoint.ACCESS_TIME,
-                actualConfiguration.getStartingPoint());
+        Assert.assertEquals(StartingPoint.ACCESS_TIME, actualConfiguration.getStartingPoint());
 
         Assert.assertEquals(1, actualConfiguration.getDurations().size());
-        Assert.assertEquals(2,
-                actualConfiguration.getDurations().get(0).getAmount());
-        Assert.assertEquals(DurationUnit.HOUR,
-                actualConfiguration.getDurations().get(0).getUnit());
+        Assert.assertEquals(2, actualConfiguration.getDurations().get(0).getAmount());
+        Assert.assertEquals(DurationUnit.HOUR, actualConfiguration.getDurations().get(0).getUnit());
 
     }
 
@@ -215,9 +201,8 @@ public class TestExpiresFilter extends TomcatBaseTest {
             private static final long serialVersionUID = 1L;
 
             @Override
-            protected void service(HttpServletRequest request,
-                    HttpServletResponse response) throws ServletException,
-                    IOException {
+            protected void service(HttpServletRequest request, HttpServletResponse response)
+                    throws ServletException, IOException {
                 response.setContentType("text/xml; charset=utf-8");
                 response.addHeader("Cache-Control", "private, max-age=232");
                 response.getWriter().print("Hello world");
@@ -233,9 +218,8 @@ public class TestExpiresFilter extends TomcatBaseTest {
             private static final long serialVersionUID = 1L;
 
             @Override
-            protected void service(HttpServletRequest request,
-                    HttpServletResponse response) throws ServletException,
-                    IOException {
+            protected void service(HttpServletRequest request, HttpServletResponse response)
+                    throws ServletException, IOException {
                 response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
                 response.addHeader("ETag", "W/\"1934-1269208821000\"");
                 response.addDateHeader("Date", System.currentTimeMillis());
@@ -251,9 +235,8 @@ public class TestExpiresFilter extends TomcatBaseTest {
             private static final long serialVersionUID = 1L;
 
             @Override
-            protected void service(HttpServletRequest request,
-                    HttpServletResponse response) throws ServletException,
-                    IOException {
+            protected void service(HttpServletRequest request, HttpServletResponse response)
+                    throws ServletException, IOException {
                 response.setContentType(null);
             }
         };
@@ -267,9 +250,8 @@ public class TestExpiresFilter extends TomcatBaseTest {
             private static final long serialVersionUID = 1L;
 
             @Override
-            protected void service(HttpServletRequest request,
-                    HttpServletResponse response) throws ServletException,
-                    IOException {
+            protected void service(HttpServletRequest request, HttpServletResponse response)
+                    throws ServletException, IOException {
                 response.setContentType("text/xml; charset=utf-8");
                 response.addDateHeader("Expires", System.currentTimeMillis());
                 response.getWriter().print("Hello world");
@@ -285,9 +267,8 @@ public class TestExpiresFilter extends TomcatBaseTest {
             private static final long serialVersionUID = 1L;
 
             @Override
-            protected void service(HttpServletRequest request,
-                    HttpServletResponse response) throws ServletException,
-                    IOException {
+            protected void service(HttpServletRequest request, HttpServletResponse response)
+                    throws ServletException, IOException {
                 response.setContentType("text/xml; charset=utf-8");
                 response.getWriter().print("Hello world");
             }
@@ -297,15 +278,13 @@ public class TestExpiresFilter extends TomcatBaseTest {
     }
 
     @Test
-    public void testUseContentTypeWithoutCharsetExpiresConfiguration()
-            throws Exception {
+    public void testUseContentTypeWithoutCharsetExpiresConfiguration() throws Exception {
         HttpServlet servlet = new HttpServlet() {
             private static final long serialVersionUID = 1L;
 
             @Override
-            protected void service(HttpServletRequest request,
-                    HttpServletResponse response) throws ServletException,
-                    IOException {
+            protected void service(HttpServletRequest request, HttpServletResponse response)
+                    throws ServletException, IOException {
                 response.setContentType("text/xml; charset=iso-8859-1");
                 response.getWriter().print("Hello world");
             }
@@ -320,9 +299,8 @@ public class TestExpiresFilter extends TomcatBaseTest {
             private static final long serialVersionUID = 1L;
 
             @Override
-            protected void service(HttpServletRequest request,
-                    HttpServletResponse response) throws ServletException,
-                    IOException {
+            protected void service(HttpServletRequest request, HttpServletResponse response)
+                    throws ServletException, IOException {
                 response.setContentType("image/jpeg");
                 response.getWriter().print("Hello world");
             }
@@ -337,9 +315,8 @@ public class TestExpiresFilter extends TomcatBaseTest {
             private static final long serialVersionUID = 1L;
 
             @Override
-            protected void service(HttpServletRequest request,
-                    HttpServletResponse response) throws ServletException,
-                    IOException {
+            protected void service(HttpServletRequest request, HttpServletResponse response)
+                    throws ServletException, IOException {
                 response.setContentType("image/jpeg");
                 response.addHeader("Cache-Control", "private");
 
@@ -356,9 +333,8 @@ public class TestExpiresFilter extends TomcatBaseTest {
             private static final long serialVersionUID = 1L;
 
             @Override
-            protected void service(HttpServletRequest request,
-                    HttpServletResponse response) throws ServletException,
-                    IOException {
+            protected void service(HttpServletRequest request, HttpServletResponse response)
+                    throws ServletException, IOException {
                 response.setContentType("text/json; charset=iso-8859-1");
                 response.getWriter().print("Hello world");
             }
@@ -367,13 +343,11 @@ public class TestExpiresFilter extends TomcatBaseTest {
         validate(servlet, Integer.valueOf(7 * 60));
     }
 
-    protected void validate(HttpServlet servlet, Integer expectedMaxAgeInSeconds)
-            throws Exception {
+    protected void validate(HttpServlet servlet, Integer expectedMaxAgeInSeconds) throws Exception {
         validate(servlet, expectedMaxAgeInSeconds, HttpServletResponse.SC_OK);
     }
 
-    protected void validate(HttpServlet servlet,
-            Integer expectedMaxAgeInSeconds, int expectedResponseStatusCode)
+    protected void validate(HttpServlet servlet, Integer expectedMaxAgeInSeconds, int expectedResponseStatusCode)
             throws Exception {
 
         // SETUP
@@ -383,14 +357,10 @@ public class TestExpiresFilter extends TomcatBaseTest {
 
         FilterDef filterDef = new FilterDef();
         filterDef.addInitParameter("ExpiresDefault", "access plus 1 minute");
-        filterDef.addInitParameter("ExpiresByType text/xml;charset=utf-8",
-                "access plus 3 minutes");
-        filterDef.addInitParameter("ExpiresByType text/xml",
-                "access plus 5 minutes");
-        filterDef.addInitParameter("ExpiresByType text",
-                "access plus 7 minutes");
-        filterDef.addInitParameter("ExpiresExcludedResponseStatusCodes",
-                "304, 503");
+        filterDef.addInitParameter("ExpiresByType text/xml;charset=utf-8", "access plus 3 minutes");
+        filterDef.addInitParameter("ExpiresByType text/xml", "access plus 5 minutes");
+        filterDef.addInitParameter("ExpiresByType text", "access plus 7 minutes");
+        filterDef.addInitParameter("ExpiresExcludedResponseStatusCodes", "304, 503");
 
         filterDef.setFilterClass(ExpiresFilter.class.getName());
         filterDef.setFilterName(ExpiresFilter.class.getName());
@@ -413,7 +383,7 @@ public class TestExpiresFilter extends TomcatBaseTest {
 
             // TEST
             ByteChunk bc = new ByteChunk();
-            Map<String,List<String>> responseHeaders = new HashMap<>();
+            Map<String, List<String>> responseHeaders = new HashMap<>();
             int rc = getUrl("http://localhost:" + getPort() + "/test", bc, responseHeaders);
 
             // VALIDATE
@@ -422,9 +392,7 @@ public class TestExpiresFilter extends TomcatBaseTest {
             StringBuilder msg = new StringBuilder();
             for (Entry<String, List<String>> field : responseHeaders.entrySet()) {
                 for (String value : field.getValue()) {
-                    msg.append((field.getKey() == null ? "" : field.getKey() +
-                            ": ") +
-                            value + "\n");
+                    msg.append((field.getKey() == null ? "" : field.getKey() + ": ") + value + "\n");
                 }
             }
             System.out.println(msg);
@@ -437,13 +405,10 @@ public class TestExpiresFilter extends TomcatBaseTest {
                 actualMaxAgeInSeconds = null;
             } else {
                 actualMaxAgeInSeconds = null;
-                StringTokenizer cacheControlTokenizer = new StringTokenizer(
-                        cacheControlHeader, ",");
-                while (cacheControlTokenizer.hasMoreTokens() &&
-                        actualMaxAgeInSeconds == null) {
+                StringTokenizer cacheControlTokenizer = new StringTokenizer(cacheControlHeader, ",");
+                while (cacheControlTokenizer.hasMoreTokens() && actualMaxAgeInSeconds == null) {
                     String cacheDirective = cacheControlTokenizer.nextToken();
-                    StringTokenizer cacheDirectiveTokenizer = new StringTokenizer(
-                            cacheDirective, "=");
+                    StringTokenizer cacheDirectiveTokenizer = new StringTokenizer(cacheDirective, "=");
                     if (cacheDirectiveTokenizer.countTokens() == 2) {
                         String key = cacheDirectiveTokenizer.nextToken().trim();
                         String value = cacheDirectiveTokenizer.nextToken().trim();
@@ -455,8 +420,7 @@ public class TestExpiresFilter extends TomcatBaseTest {
             }
 
             if (expectedMaxAgeInSeconds == null) {
-                Assert.assertNull("actualMaxAgeInSeconds '" +
-                        actualMaxAgeInSeconds + "' should be null",
+                Assert.assertNull("actualMaxAgeInSeconds '" + actualMaxAgeInSeconds + "' should be null",
                         actualMaxAgeInSeconds);
                 return;
             }
@@ -465,12 +429,9 @@ public class TestExpiresFilter extends TomcatBaseTest {
 
             String contentType = getSingleHeader("Content-Type", responseHeaders);
 
-            int deltaInSeconds = Math.abs(actualMaxAgeInSeconds.intValue() -
-                    expectedMaxAgeInSeconds.intValue());
-            Assert.assertTrue("actualMaxAgeInSeconds: " +
-                    actualMaxAgeInSeconds + ", expectedMaxAgeInSeconds: " +
-                    expectedMaxAgeInSeconds + ", request time: " +
-                    timeBeforeInMillis + " for content type " +
+            int deltaInSeconds = Math.abs(actualMaxAgeInSeconds.intValue() - expectedMaxAgeInSeconds.intValue());
+            Assert.assertTrue("actualMaxAgeInSeconds: " + actualMaxAgeInSeconds + ", expectedMaxAgeInSeconds: " +
+                    expectedMaxAgeInSeconds + ", request time: " + timeBeforeInMillis + " for content type " +
                     contentType, deltaInSeconds < 3);
 
         } finally {
@@ -480,8 +441,7 @@ public class TestExpiresFilter extends TomcatBaseTest {
 
     @Test
     public void testIntsToCommaDelimitedString() {
-        String actual = ExpiresFilter.intsToCommaDelimitedString(new int[] {
-                500, 503 });
+        String actual = ExpiresFilter.intsToCommaDelimitedString(new int[] { 500, 503 });
         String expected = "500, 503";
 
         Assert.assertEquals(expected, actual);
@@ -489,10 +449,8 @@ public class TestExpiresFilter extends TomcatBaseTest {
 
 
     /*
-     * Tests Expires filter with:
-     * - per content type expires
-     * - no default
-     * - Default servlet returning 304s (without content-type)
+     * Tests Expires filter with: - per content type expires - no default - Default servlet returning 304s (without
+     * content-type)
      */
     @Test
     public void testBug63909() throws Exception {
@@ -519,22 +477,21 @@ public class TestExpiresFilter extends TomcatBaseTest {
         tomcat.start();
 
         ByteChunk bc = new ByteChunk();
-        Map<String,List<String>> requestHeaders = new CaseInsensitiveKeyMap<>();
+        Map<String, List<String>> requestHeaders = new CaseInsensitiveKeyMap<>();
         List<String> ifModifiedSinceValues = new ArrayList<>();
         ifModifiedSinceValues.add(FastHttpDateFormat.getCurrentDate());
         requestHeaders.put("If-Modified-Since", ifModifiedSinceValues);
-        Map<String,List<String>> responseHeaders = new CaseInsensitiveKeyMap<>();
+        Map<String, List<String>> responseHeaders = new CaseInsensitiveKeyMap<>();
 
-        int rc = getUrl("http://localhost:" + getPort() + "/test/bug6nnnn/bug69303.txt", bc, requestHeaders, responseHeaders);
+        int rc = getUrl("http://localhost:" + getPort() + "/test/bug6nnnn/bug69303.txt", bc, requestHeaders,
+                responseHeaders);
 
         Assert.assertEquals(HttpServletResponse.SC_NOT_MODIFIED, rc);
 
         StringBuilder msg = new StringBuilder();
         for (Entry<String, List<String>> field : responseHeaders.entrySet()) {
             for (String value : field.getValue()) {
-                msg.append((field.getKey() == null ? "" : field.getKey() +
-                        ": ") +
-                        value + "\n");
+                msg.append((field.getKey() == null ? "" : field.getKey() + ": ") + value + "\n");
             }
         }
         System.out.println(msg);
@@ -547,13 +504,10 @@ public class TestExpiresFilter extends TomcatBaseTest {
             actualMaxAgeInSeconds = null;
         } else {
             actualMaxAgeInSeconds = null;
-            StringTokenizer cacheControlTokenizer = new StringTokenizer(
-                    cacheControlHeader, ",");
-            while (cacheControlTokenizer.hasMoreTokens() &&
-                    actualMaxAgeInSeconds == null) {
+            StringTokenizer cacheControlTokenizer = new StringTokenizer(cacheControlHeader, ",");
+            while (cacheControlTokenizer.hasMoreTokens() && actualMaxAgeInSeconds == null) {
                 String cacheDirective = cacheControlTokenizer.nextToken();
-                StringTokenizer cacheDirectiveTokenizer = new StringTokenizer(
-                        cacheDirective, "=");
+                StringTokenizer cacheDirectiveTokenizer = new StringTokenizer(cacheDirective, "=");
                 if (cacheDirectiveTokenizer.countTokens() == 2) {
                     String key = cacheDirectiveTokenizer.nextToken().trim();
                     String value = cacheDirectiveTokenizer.nextToken().trim();

==================================================
TestRestCsrfPreventionFilter.java
index 2387c3cb98..8e9b2915bd 100644
--- a/test/org/apache/catalina/filters/TestRemoteIpFilter.java
+++ b/test/org/apache/catalina/filters/TestRemoteIpFilter.java
@@ -57,8 +57,7 @@ import org.apache.tomcat.util.descriptor.web.FilterMap;
 public class TestRemoteIpFilter extends TomcatBaseTest {
 
     /**
-     * Mock {@link FilterChain} to keep a handle on the passed
-     * {@link ServletRequest} and (@link ServletResponse}.
+     * Mock {@link FilterChain} to keep a handle on the passed {@link ServletRequest} and (@link ServletResponse}.
      */
     public static class MockFilterChain implements FilterChain {
         private HttpServletRequest request;
@@ -91,7 +90,8 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
         public boolean isSecure;
 
         @Override
-        public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+        public void service(HttpServletRequest request, HttpServletResponse response)
+                throws ServletException, IOException {
             this.isSecure = request.isSecure();
             this.remoteAddr = request.getRemoteAddr();
             this.remoteHost = request.getRemoteHost();
@@ -337,7 +337,8 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
         Assert.assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
 
         String actualXForwardedBy = actualRequest.getHeader("x-forwarded-by");
-        Assert.assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1,proxy2", actualXForwardedBy);
+        Assert.assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1,proxy2",
+                actualXForwardedBy);
 
         String actualRemoteAddr = actualRequest.getRemoteAddr();
         Assert.assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
@@ -372,7 +373,8 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
         Assert.assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
 
         String actualXForwardedBy = actualRequest.getHeader("x-forwarded-by");
-        Assert.assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1,proxy2,proxy3", actualXForwardedBy);
+        Assert.assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1,proxy2,proxy3",
+                actualXForwardedBy);
 
         String actualRemoteAddr = actualRequest.getRemoteAddr();
         Assert.assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
@@ -406,7 +408,8 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
         Assert.assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
 
         String actualXForwardedBy = actualRequest.getHeader("x-forwarded-by");
-        Assert.assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1,proxy2,proxy3", actualXForwardedBy);
+        Assert.assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1,proxy2,proxy3",
+                actualXForwardedBy);
 
         String actualRemoteAddr = actualRequest.getRemoteAddr();
         Assert.assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
@@ -440,7 +443,8 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
         Assert.assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
 
         String actualXForwardedBy = actualRequest.getHeader("x-forwarded-by");
-        Assert.assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1,proxy2", actualXForwardedBy);
+        Assert.assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1,proxy2",
+                actualXForwardedBy);
 
         String actualRemoteAddr = actualRequest.getRemoteAddr();
         Assert.assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
@@ -473,7 +477,8 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
         Assert.assertNull("all proxies are trusted, x-forwarded-for must be null", actualXForwardedFor);
 
         String actualXForwardedBy = actualRequest.getHeader("x-forwarded-by");
-        Assert.assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1,proxy2", actualXForwardedBy);
+        Assert.assertEquals("all proxies are trusted, they must appear in x-forwarded-by", "proxy1,proxy2",
+                actualXForwardedBy);
 
         String actualRemoteAddr = actualRequest.getRemoteAddr();
         Assert.assertEquals("remoteAddr", "140.211.11.130", actualRemoteAddr);
@@ -534,10 +539,12 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
 
         // VERIFY
         String actualXForwardedFor = actualRequest.getHeader("x-forwarded-for");
-        Assert.assertEquals("ip/host before untrusted-proxy must appear in x-forwarded-for", "140.211.11.130,proxy1", actualXForwardedFor);
+        Assert.assertEquals("ip/host before untrusted-proxy must appear in x-forwarded-for", "140.211.11.130,proxy1",
+                actualXForwardedFor);
 
         String actualXForwardedBy = actualRequest.getHeader("x-forwarded-by");
-        Assert.assertEquals("ip/host after untrusted-proxy must appear in  x-forwarded-by", "proxy2", actualXForwardedBy);
+        Assert.assertEquals("ip/host after untrusted-proxy must appear in  x-forwarded-by", "proxy2",
+                actualXForwardedBy);
 
         String actualRemoteAddr = actualRequest.getRemoteAddr();
         Assert.assertEquals("remoteAddr", "untrusted-proxy", actualRemoteAddr);
@@ -689,16 +696,13 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
         HttpServletRequest actualRequest = testRemoteIpFilter(filterDef, request).getRequest();
 
         // VERIFY
-        Assert.assertEquals("org.apache.catalina.AccessLog.ServerPort",
-                Integer.valueOf(8080),
+        Assert.assertEquals("org.apache.catalina.AccessLog.ServerPort", Integer.valueOf(8080),
                 actualRequest.getAttribute(AccessLog.SERVER_PORT_ATTRIBUTE));
 
-        Assert.assertEquals("org.apache.catalina.AccessLog.RemoteAddr",
-                "140.211.11.130",
+        Assert.assertEquals("org.apache.catalina.AccessLog.RemoteAddr", "140.211.11.130",
                 actualRequest.getAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE));
 
-        Assert.assertEquals("org.apache.catalina.AccessLog.RemoteHost",
-                "140.211.11.130",
+        Assert.assertEquals("org.apache.catalina.AccessLog.RemoteHost", "140.211.11.130",
                 actualRequest.getAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE));
     }
 
@@ -719,8 +723,7 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
         HttpServletRequest actualRequest = testRemoteIpFilter(filterDef, request).getRequest();
 
         // VERIFY
-        Assert.assertEquals("org.apache.tomcat.request.forwarded",
-                Boolean.TRUE,
+        Assert.assertEquals("org.apache.tomcat.request.forwarded", Boolean.TRUE,
                 actualRequest.getAttribute(Globals.REQUEST_FORWARDED_ATTRIBUTE));
     }
 
@@ -759,8 +762,7 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
 
         // TEST
         HttpURLConnection httpURLConnection = (HttpURLConnection) new URL(
-                "http://localhost:" + tomcat.getConnector().getLocalPort() +
-                "/test").openConnection();
+                "http://localhost:" + tomcat.getConnector().getLocalPort() + "/test").openConnection();
         String expectedRemoteAddr = "my-remote-addr";
         httpURLConnection.addRequestProperty("x-forwarded-for", expectedRemoteAddr);
         httpURLConnection.addRequestProperty("x-forwarded-proto", "https");
@@ -818,8 +820,7 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
         reqHeaders.put("x-forwarded-for", forwardedFor);
         reqHeaders.put("x-forwarded-proto", forwardedProto);
 
-        getUrl("http://localhost:" + tomcat.getConnector().getLocalPort() +
-            "/test", null, reqHeaders, resHeaders);
+        getUrl("http://localhost:" + tomcat.getConnector().getLocalPort() + "/test", null, reqHeaders, resHeaders);
         String setCookie = resHeaders.get("Set-Cookie").get(0);
         Assert.assertTrue(setCookie.contains("Secure"));
         Assert.assertTrue(bug66471Servlet.isSecure.booleanValue());
@@ -828,6 +829,7 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
     public static class Bug66471Servlet extends HttpServlet {
         private static final long serialVersionUID = 1L;
         public Boolean isSecure;
+
         @Override
         protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
             req.getSession();

==================================================
TestRestCsrfPreventionFilter2.java
index 633e1d533a..9ee91c695a 100644
--- a/test/org/apache/catalina/filters/TestRestCsrfPreventionFilter.java
+++ b/test/org/apache/catalina/filters/TestRestCsrfPreventionFilter.java
@@ -113,8 +113,7 @@ public class TestRestCsrfPreventionFilter {
     @Test
     public void testGetFetchRequestSessionNoNonce() throws Exception {
         setRequestExpectations(GET_METHOD, session, Constants.CSRF_REST_NONCE_HEADER_FETCH_VALUE);
-        EasyMock.expect(session.getAttribute(Constants.CSRF_REST_NONCE_SESSION_ATTR_NAME))
-                .andReturn(null);
+        EasyMock.expect(session.getAttribute(Constants.CSRF_REST_NONCE_SESSION_ATTR_NAME)).andReturn(null);
         session.setAttribute(Constants.CSRF_REST_NONCE_SESSION_ATTR_NAME, NONCE);
         EasyMock.expectLastCall();
         EasyMock.replay(session);
@@ -132,8 +131,7 @@ public class TestRestCsrfPreventionFilter {
     @Test
     public void testGetFetchRequestSessionNonce() throws Exception {
         setRequestExpectations(GET_METHOD, session, Constants.CSRF_REST_NONCE_HEADER_FETCH_VALUE);
-        EasyMock.expect(session.getAttribute(Constants.CSRF_REST_NONCE_SESSION_ATTR_NAME))
-                .andReturn(NONCE);
+        EasyMock.expect(session.getAttribute(Constants.CSRF_REST_NONCE_SESSION_ATTR_NAME)).andReturn(NONCE);
         EasyMock.replay(session);
         filter.doFilter(request, response, filterChain);
         verifyContinueChainNonceAvailable();
@@ -168,15 +166,13 @@ public class TestRestCsrfPreventionFilter {
 
     @Test
     public void testPostRequestInvalidNonceAsParameterValidPath() throws Exception {
-        setRequestExpectations(POST_METHOD, session, null, new String[] { INVALID_NONCE },
-                ACCEPTED_PATH1);
+        setRequestExpectations(POST_METHOD, session, null, new String[] { INVALID_NONCE }, ACCEPTED_PATH1);
         testPostRequestParamsScenarios(NONCE, true, true);
     }
 
     @Test
     public void testPostRequestValidNonceAsParameterInvalidPath() throws Exception {
-        setRequestExpectations(POST_METHOD, session, null, new String[] { NONCE }, ACCEPTED_PATH1
-                + "blah");
+        setRequestExpectations(POST_METHOD, session, null, new String[] { NONCE }, ACCEPTED_PATH1 + "blah");
         testPostRequestParamsScenarios(NONCE, true, true);
     }
 
@@ -194,8 +190,7 @@ public class TestRestCsrfPreventionFilter {
 
     @Test
     public void testPostRequestValidNonceAsParameterInvalidNonceAsHeader() throws Exception {
-        setRequestExpectations(POST_METHOD, session, INVALID_NONCE, new String[] { NONCE },
-                ACCEPTED_PATH1);
+        setRequestExpectations(POST_METHOD, session, INVALID_NONCE, new String[] { NONCE }, ACCEPTED_PATH1);
         testPostRequestParamsScenarios(NONCE, true, true);
     }
 
@@ -207,43 +202,39 @@ public class TestRestCsrfPreventionFilter {
 
     @Test
     public void testPostRequestMultipleValidNoncesAsParameterValidPath() throws Exception {
-        setRequestExpectations(POST_METHOD, session, null, new String[] { NONCE, NONCE },
-                ACCEPTED_PATH1);
+        setRequestExpectations(POST_METHOD, session, null, new String[] { NONCE, NONCE }, ACCEPTED_PATH1);
         testPostRequestParamsScenarios(NONCE, false, true);
     }
 
     @Test
     public void testPostRequestMultipleNoncesAsParameterValidPath() throws Exception {
-        setRequestExpectations(POST_METHOD, session, null, new String[] { NONCE, INVALID_NONCE },
-                ACCEPTED_PATH1);
+        setRequestExpectations(POST_METHOD, session, null, new String[] { NONCE, INVALID_NONCE }, ACCEPTED_PATH1);
         testPostRequestParamsScenarios(NONCE, true, true);
     }
 
     @Test
     public void testPostRequestMultipleInvalidNoncesAsParameterValidPath() throws Exception {
-        setRequestExpectations(POST_METHOD, session, null, new String[] { INVALID_NONCE,
-                INVALID_NONCE }, ACCEPTED_PATH1);
+        setRequestExpectations(POST_METHOD, session, null, new String[] { INVALID_NONCE, INVALID_NONCE },
+                ACCEPTED_PATH1);
         testPostRequestParamsScenarios(NONCE, true, true);
     }
 
     @Test
     public void testGETRequestFetchNonceAsParameter() throws Exception {
-        setRequestExpectations(GET_METHOD, null, null,
-                new String[] { Constants.CSRF_REST_NONCE_HEADER_FETCH_VALUE }, ACCEPTED_PATH1);
+        setRequestExpectations(GET_METHOD, null, null, new String[] { Constants.CSRF_REST_NONCE_HEADER_FETCH_VALUE },
+                ACCEPTED_PATH1);
         filter.setPathsAcceptingParams(ACCEPTED_PATHS);
         filter.doFilter(request, response, filterChain);
         verifyContinueChainNonceNotAvailable();
     }
 
-    private void testPostRequestHeaderScenarios(String sessionAttr, boolean denyResponse)
-            throws Exception {
+    private void testPostRequestHeaderScenarios(String sessionAttr, boolean denyResponse) throws Exception {
         testPostRequestParamsScenarios(sessionAttr, denyResponse, false);
     }
 
-    private void testPostRequestParamsScenarios(String sessionAttr, boolean denyResponse,
-            boolean configurePaths) throws Exception {
-        EasyMock.expect(session.getAttribute(Constants.CSRF_REST_NONCE_SESSION_ATTR_NAME))
-                .andReturn(sessionAttr);
+    private void testPostRequestParamsScenarios(String sessionAttr, boolean denyResponse, boolean configurePaths)
+            throws Exception {
+        EasyMock.expect(session.getAttribute(Constants.CSRF_REST_NONCE_SESSION_ATTR_NAME)).andReturn(sessionAttr);
         EasyMock.replay(session);
         if (configurePaths) {
             filter.setPathsAcceptingParams(ACCEPTED_PATHS);
@@ -261,8 +252,8 @@ public class TestRestCsrfPreventionFilter {
         setRequestExpectations(method, session, headerValue, null, null);
     }
 
-    private void setRequestExpectations(String method, HttpSession session, String headerValue,
-            String[] paramValues, String servletPath) {
+    private void setRequestExpectations(String method, HttpSession session, String headerValue, String[] paramValues,
+            String servletPath) {
         request.setMethod(method);
         request.setSession(session);
         request.setHeader(Constants.CSRF_REST_NONCE_HEADER_NAME, headerValue);
@@ -285,8 +276,8 @@ public class TestRestCsrfPreventionFilter {
     }
 
     private void verifyDenyResponse(int statusCode) {
-        Assert.assertTrue(Constants.CSRF_REST_NONCE_HEADER_REQUIRED_VALUE.equals(response
-                .getHeader(Constants.CSRF_REST_NONCE_HEADER_NAME)));
+        Assert.assertTrue(Constants.CSRF_REST_NONCE_HEADER_REQUIRED_VALUE
+                .equals(response.getHeader(Constants.CSRF_REST_NONCE_HEADER_NAME)));
         Assert.assertTrue(statusCode == response.getStatus());
         Assert.assertTrue(!filterChain.isVisited());
     }
@@ -295,8 +286,7 @@ public class TestRestCsrfPreventionFilter {
         private boolean visited = false;
 
         @Override
-        public void doFilter(ServletRequest request, ServletResponse response) throws IOException,
-                ServletException {
+        public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException {
             visited = true;
         }
 

==================================================
TesterFilterChain.java
index 86e4d2d655..eb74714a71 100644
--- a/test/org/apache/catalina/filters/TestRestCsrfPreventionFilter2.java
+++ b/test/org/apache/catalina/filters/TestRestCsrfPreventionFilter2.java
@@ -121,85 +121,71 @@ public class TestRestCsrfPreventionFilter2 extends TomcatBaseTest {
     }
 
     private void testClearGet() throws Exception {
-        doTest(METHOD_GET, LIST_CUSTOMERS, CREDENTIALS, null, NO_COOKIES,
-                HttpServletResponse.SC_OK, CUSTOMERS_LIST_RESPONSE, null, false, null);
+        doTest(METHOD_GET, LIST_CUSTOMERS, CREDENTIALS, null, NO_COOKIES, HttpServletResponse.SC_OK,
+                CUSTOMERS_LIST_RESPONSE, null, false, null);
     }
 
     private void testClearPost() throws Exception {
-        doTest(METHOD_POST, REMOVE_CUSTOMER, CREDENTIALS, null, NO_COOKIES,
-                HttpServletResponse.SC_FORBIDDEN, null, null, true,
-                Constants.CSRF_REST_NONCE_HEADER_REQUIRED_VALUE);
+        doTest(METHOD_POST, REMOVE_CUSTOMER, CREDENTIALS, null, NO_COOKIES, HttpServletResponse.SC_FORBIDDEN, null,
+                null, true, Constants.CSRF_REST_NONCE_HEADER_REQUIRED_VALUE);
     }
 
     private void testGetFirstFetch() throws Exception {
-        doTest(METHOD_GET, LIST_CUSTOMERS, CREDENTIALS, null, NO_COOKIES,
-                HttpServletResponse.SC_OK, CUSTOMERS_LIST_RESPONSE,
-                Constants.CSRF_REST_NONCE_HEADER_FETCH_VALUE, true, null);
+        doTest(METHOD_GET, LIST_CUSTOMERS, CREDENTIALS, null, NO_COOKIES, HttpServletResponse.SC_OK,
+                CUSTOMERS_LIST_RESPONSE, Constants.CSRF_REST_NONCE_HEADER_FETCH_VALUE, true, null);
     }
 
     private void testValidPost() throws Exception {
-        doTest(METHOD_POST, REMOVE_CUSTOMER, CREDENTIALS, null, USE_COOKIES,
-                HttpServletResponse.SC_OK, CUSTOMER_REMOVED_RESPONSE, validNonce, false, null);
+        doTest(METHOD_POST, REMOVE_CUSTOMER, CREDENTIALS, null, USE_COOKIES, HttpServletResponse.SC_OK,
+                CUSTOMER_REMOVED_RESPONSE, validNonce, false, null);
     }
 
     private void testInvalidPost() throws Exception {
-        doTest(METHOD_POST, REMOVE_CUSTOMER, CREDENTIALS, null, USE_COOKIES,
-                HttpServletResponse.SC_FORBIDDEN, null,
-                Constants.CSRF_REST_NONCE_HEADER_FETCH_VALUE, true,
-                Constants.CSRF_REST_NONCE_HEADER_REQUIRED_VALUE);
-        doTest(METHOD_POST, REMOVE_CUSTOMER, CREDENTIALS, null, USE_COOKIES,
-                HttpServletResponse.SC_FORBIDDEN, null, INVALID_NONCE_1, true,
-                Constants.CSRF_REST_NONCE_HEADER_REQUIRED_VALUE);
-        doTest(METHOD_POST, REMOVE_CUSTOMER, CREDENTIALS, null, USE_COOKIES,
-                HttpServletResponse.SC_FORBIDDEN, null, INVALID_NONCE_2, true,
-                Constants.CSRF_REST_NONCE_HEADER_REQUIRED_VALUE);
-        doTest(METHOD_POST, REMOVE_CUSTOMER, CREDENTIALS, null, USE_COOKIES,
-                HttpServletResponse.SC_FORBIDDEN, null, null, true,
-                Constants.CSRF_REST_NONCE_HEADER_REQUIRED_VALUE);
+        doTest(METHOD_POST, REMOVE_CUSTOMER, CREDENTIALS, null, USE_COOKIES, HttpServletResponse.SC_FORBIDDEN, null,
+                Constants.CSRF_REST_NONCE_HEADER_FETCH_VALUE, true, Constants.CSRF_REST_NONCE_HEADER_REQUIRED_VALUE);
+        doTest(METHOD_POST, REMOVE_CUSTOMER, CREDENTIALS, null, USE_COOKIES, HttpServletResponse.SC_FORBIDDEN, null,
+                INVALID_NONCE_1, true, Constants.CSRF_REST_NONCE_HEADER_REQUIRED_VALUE);
+        doTest(METHOD_POST, REMOVE_CUSTOMER, CREDENTIALS, null, USE_COOKIES, HttpServletResponse.SC_FORBIDDEN, null,
+                INVALID_NONCE_2, true, Constants.CSRF_REST_NONCE_HEADER_REQUIRED_VALUE);
+        doTest(METHOD_POST, REMOVE_CUSTOMER, CREDENTIALS, null, USE_COOKIES, HttpServletResponse.SC_FORBIDDEN, null,
+                null, true, Constants.CSRF_REST_NONCE_HEADER_REQUIRED_VALUE);
     }
 
     private void testGetSecondFetch() throws Exception {
-        doTest(METHOD_GET, LIST_CUSTOMERS, CREDENTIALS, null, USE_COOKIES,
-                HttpServletResponse.SC_OK, CUSTOMERS_LIST_RESPONSE,
-                Constants.CSRF_REST_NONCE_HEADER_FETCH_VALUE, true, validNonce);
+        doTest(METHOD_GET, LIST_CUSTOMERS, CREDENTIALS, null, USE_COOKIES, HttpServletResponse.SC_OK,
+                CUSTOMERS_LIST_RESPONSE, Constants.CSRF_REST_NONCE_HEADER_FETCH_VALUE, true, validNonce);
     }
 
     private void testValidPostWithRequestParams() throws Exception {
         String validBody = Constants.CSRF_REST_NONCE_HEADER_NAME + "=" + validNonce;
         String invalidbody = Constants.CSRF_REST_NONCE_HEADER_NAME + "=" + INVALID_NONCE_1;
-        doTest(METHOD_POST, REMOVE_CUSTOMER, CREDENTIALS,
-                validBody.getBytes(StandardCharsets.ISO_8859_1), USE_COOKIES,
+        doTest(METHOD_POST, REMOVE_CUSTOMER, CREDENTIALS, validBody.getBytes(StandardCharsets.ISO_8859_1), USE_COOKIES,
                 HttpServletResponse.SC_OK, CUSTOMER_REMOVED_RESPONSE, null, false, null);
-        doTest(METHOD_POST, ADD_CUSTOMER, CREDENTIALS,
-                validBody.getBytes(StandardCharsets.ISO_8859_1), USE_COOKIES,
+        doTest(METHOD_POST, ADD_CUSTOMER, CREDENTIALS, validBody.getBytes(StandardCharsets.ISO_8859_1), USE_COOKIES,
                 HttpServletResponse.SC_OK, CUSTOMER_ADDED_RESPONSE, null, false, null);
-        doTest(METHOD_POST, REMOVE_CUSTOMER, CREDENTIALS,
-                invalidbody.getBytes(StandardCharsets.ISO_8859_1), USE_COOKIES,
-                HttpServletResponse.SC_OK, CUSTOMER_REMOVED_RESPONSE, validNonce, false, null);
+        doTest(METHOD_POST, REMOVE_CUSTOMER, CREDENTIALS, invalidbody.getBytes(StandardCharsets.ISO_8859_1),
+                USE_COOKIES, HttpServletResponse.SC_OK, CUSTOMER_REMOVED_RESPONSE, validNonce, false, null);
     }
 
     private void testInvalidPostWithRequestParams() throws Exception {
         String validBody = Constants.CSRF_REST_NONCE_HEADER_NAME + "=" + validNonce;
         String invalidbody1 = Constants.CSRF_REST_NONCE_HEADER_NAME + "=" + INVALID_NONCE_1;
-        String invalidbody2 = Constants.CSRF_REST_NONCE_HEADER_NAME + "="
-                + Constants.CSRF_REST_NONCE_HEADER_FETCH_VALUE;
-        doTest(METHOD_POST, REMOVE_ALL_CUSTOMERS, CREDENTIALS,
-                validBody.getBytes(StandardCharsets.ISO_8859_1), USE_COOKIES,
-                HttpServletResponse.SC_FORBIDDEN, null, null, true,
+        String invalidbody2 = Constants.CSRF_REST_NONCE_HEADER_NAME + "=" +
+                Constants.CSRF_REST_NONCE_HEADER_FETCH_VALUE;
+        doTest(METHOD_POST, REMOVE_ALL_CUSTOMERS, CREDENTIALS, validBody.getBytes(StandardCharsets.ISO_8859_1),
+                USE_COOKIES, HttpServletResponse.SC_FORBIDDEN, null, null, true,
                 Constants.CSRF_REST_NONCE_HEADER_REQUIRED_VALUE);
-        doTest(METHOD_POST, REMOVE_CUSTOMER, CREDENTIALS,
-                invalidbody1.getBytes(StandardCharsets.ISO_8859_1), USE_COOKIES,
-                HttpServletResponse.SC_FORBIDDEN, null, null, true,
+        doTest(METHOD_POST, REMOVE_CUSTOMER, CREDENTIALS, invalidbody1.getBytes(StandardCharsets.ISO_8859_1),
+                USE_COOKIES, HttpServletResponse.SC_FORBIDDEN, null, null, true,
                 Constants.CSRF_REST_NONCE_HEADER_REQUIRED_VALUE);
-        doTest(METHOD_POST, REMOVE_CUSTOMER, CREDENTIALS,
-                invalidbody2.getBytes(StandardCharsets.ISO_8859_1), USE_COOKIES,
-                HttpServletResponse.SC_FORBIDDEN, null, null, true,
+        doTest(METHOD_POST, REMOVE_CUSTOMER, CREDENTIALS, invalidbody2.getBytes(StandardCharsets.ISO_8859_1),
+                USE_COOKIES, HttpServletResponse.SC_FORBIDDEN, null, null, true,
                 Constants.CSRF_REST_NONCE_HEADER_REQUIRED_VALUE);
     }
 
-    private void doTest(String method, String uri, BasicCredentials credentials, byte[] body,
-            boolean useCookie, int expectedRC, String expectedResponse, String nonce,
-            boolean expectCsrfRH, String expectedCsrfRHV) throws Exception {
+    private void doTest(String method, String uri, BasicCredentials credentials, byte[] body, boolean useCookie,
+            int expectedRC, String expectedResponse, String nonce, boolean expectCsrfRH, String expectedCsrfRHV)
+            throws Exception {
         Map<String, List<String>> reqHeaders = new HashMap<>();
         Map<String, List<String>> respHeaders = new HashMap<>();
 
@@ -262,8 +248,7 @@ public class TestRestCsrfPreventionFilter2 extends TomcatBaseTest {
         }
     }
 
-    private void addNonce(Map<String, List<String>> reqHeaders, String nonce,
-            Predicate<String> tester) {
+    private void addNonce(Map<String, List<String>> reqHeaders, String nonce, Predicate<String> tester) {
         if (tester.test(nonce)) {
             addRequestHeader(reqHeaders, Constants.CSRF_REST_NONCE_HEADER_NAME, nonce);
         }
@@ -341,16 +326,14 @@ public class TestRestCsrfPreventionFilter2 extends TomcatBaseTest {
         private static final long serialVersionUID = 1L;
 
         @Override
-        protected void doGet(HttpServletRequest req, HttpServletResponse resp)
-                throws ServletException, IOException {
+        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
             if (Objects.equals(LIST_CUSTOMERS, getRequestedPath(req))) {
                 resp.getWriter().print(CUSTOMERS_LIST_RESPONSE);
             }
         }
 
         @Override
-        protected void doPost(HttpServletRequest req, HttpServletResponse resp)
-                throws ServletException, IOException {
+        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
             if (Objects.equals(REMOVE_CUSTOMER, getRequestedPath(req))) {
                 resp.getWriter().print(CUSTOMER_REMOVED_RESPONSE);
             } else if (Objects.equals(ADD_CUSTOMER, getRequestedPath(req))) {

==================================================
TesterFilterConfigs.java
index 9b3390eaa7..165711d824 100644
--- a/test/org/apache/catalina/filters/TesterFilterChain.java
+++ b/test/org/apache/catalina/filters/TesterFilterChain.java
@@ -26,8 +26,7 @@ import jakarta.servlet.ServletResponse;
 public class TesterFilterChain implements FilterChain {
 
     @Override
-    public void doFilter(ServletRequest request, ServletResponse response)
-            throws IOException, ServletException {
+    public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException {
         // NoOp
     }
 }

==================================================
TesterHttpServletRequest.java
index 43826e0226..bf70c9c509 100644
--- a/test/org/apache/catalina/filters/TesterFilterConfigs.java
+++ b/test/org/apache/catalina/filters/TesterFilterConfigs.java
@@ -25,141 +25,105 @@ import org.apache.tomcat.unittest.TesterServletContext;
 
 public class TesterFilterConfigs {
     public static final String HTTPS_WWW_APACHE_ORG = "https://www.apache.org";
-    public static final String HTTP_TOMCAT_APACHE_ORG =
-            "http://tomcat.apache.org";
+    public static final String HTTP_TOMCAT_APACHE_ORG = "http://tomcat.apache.org";
     public static final String EXPOSED_HEADERS = "X-CUSTOM-HEADER";
     /**
      * Any origin
      */
     public static final String ANY_ORIGIN = "*";
 
-    public static final TesterServletContext mockServletContext =
-            new TesterServletContext();
+    public static final TesterServletContext mockServletContext = new TesterServletContext();
 
     // Default config for the test is to allow any origin
     public static FilterConfig getDefaultFilterConfig() {
-        final String allowedHttpHeaders =
-                CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;
-        final String allowedHttpMethods =
-                CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS;
+        final String allowedHttpHeaders = CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;
+        final String allowedHttpMethods = CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS;
         final String allowedOrigins = ANY_ORIGIN;
         final String exposedHeaders = CorsFilter.DEFAULT_EXPOSED_HEADERS;
-        final String supportCredentials =
-                CorsFilter.DEFAULT_SUPPORTS_CREDENTIALS;
-        final String preflightMaxAge =
-                CorsFilter.DEFAULT_PREFLIGHT_MAXAGE;
+        final String supportCredentials = CorsFilter.DEFAULT_SUPPORTS_CREDENTIALS;
+        final String preflightMaxAge = CorsFilter.DEFAULT_PREFLIGHT_MAXAGE;
         final String decorateRequest = CorsFilter.DEFAULT_DECORATE_REQUEST;
 
-        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods,
-                allowedOrigins, exposedHeaders, supportCredentials,
-                preflightMaxAge, decorateRequest);
+        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods, allowedOrigins, exposedHeaders,
+                supportCredentials, preflightMaxAge, decorateRequest);
     }
 
     public static FilterConfig getFilterConfigAnyOriginAndSupportsCredentials() {
-        final String allowedHttpHeaders =
-                CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;
-        final String allowedHttpMethods =
-                CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS + ",PUT";
+        final String allowedHttpHeaders = CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;
+        final String allowedHttpMethods = CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS + ",PUT";
         final String allowedOrigins = ANY_ORIGIN;
         final String exposedHeaders = CorsFilter.DEFAULT_EXPOSED_HEADERS;
         final String supportCredentials = "true";
-        final String preflightMaxAge =
-                CorsFilter.DEFAULT_PREFLIGHT_MAXAGE;
+        final String preflightMaxAge = CorsFilter.DEFAULT_PREFLIGHT_MAXAGE;
         final String decorateRequest = CorsFilter.DEFAULT_DECORATE_REQUEST;
 
-        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods,
-                allowedOrigins, exposedHeaders, supportCredentials,
-                preflightMaxAge, decorateRequest);
+        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods, allowedOrigins, exposedHeaders,
+                supportCredentials, preflightMaxAge, decorateRequest);
     }
 
-    public static FilterConfig
-            getFilterConfigAnyOriginAndSupportsCredentialsDisabled() {
-        final String allowedHttpHeaders =
-                CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;
-        final String allowedHttpMethods =
-                CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS + ",PUT";
+    public static FilterConfig getFilterConfigAnyOriginAndSupportsCredentialsDisabled() {
+        final String allowedHttpHeaders = CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;
+        final String allowedHttpMethods = CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS + ",PUT";
         final String allowedOrigins = ANY_ORIGIN;
         final String exposedHeaders = CorsFilter.DEFAULT_EXPOSED_HEADERS;
         final String supportCredentials = "false";
-        final String preflightMaxAge =
-                CorsFilter.DEFAULT_PREFLIGHT_MAXAGE;
+        final String preflightMaxAge = CorsFilter.DEFAULT_PREFLIGHT_MAXAGE;
         final String decorateRequest = CorsFilter.DEFAULT_DECORATE_REQUEST;
 
-        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods,
-                allowedOrigins, exposedHeaders, supportCredentials,
-                preflightMaxAge, decorateRequest);
+        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods, allowedOrigins, exposedHeaders,
+                supportCredentials, preflightMaxAge, decorateRequest);
     }
 
-    public static FilterConfig
-            getFilterConfigSpecificOriginAndSupportsCredentialsDisabled() {
-        final String allowedHttpHeaders =
-                CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;
-        final String allowedHttpMethods =
-                CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS + ",PUT";
-        final String allowedOrigins =
-                HTTP_TOMCAT_APACHE_ORG + "," + HTTPS_WWW_APACHE_ORG;
+    public static FilterConfig getFilterConfigSpecificOriginAndSupportsCredentialsDisabled() {
+        final String allowedHttpHeaders = CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;
+        final String allowedHttpMethods = CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS + ",PUT";
+        final String allowedOrigins = HTTP_TOMCAT_APACHE_ORG + "," + HTTPS_WWW_APACHE_ORG;
         final String exposedHeaders = CorsFilter.DEFAULT_EXPOSED_HEADERS;
         final String supportCredentials = "false";
-        final String preflightMaxAge =
-                CorsFilter.DEFAULT_PREFLIGHT_MAXAGE;
+        final String preflightMaxAge = CorsFilter.DEFAULT_PREFLIGHT_MAXAGE;
         final String decorateRequest = CorsFilter.DEFAULT_DECORATE_REQUEST;
 
-        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods,
-                allowedOrigins, exposedHeaders, supportCredentials,
-                preflightMaxAge, decorateRequest);
+        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods, allowedOrigins, exposedHeaders,
+                supportCredentials, preflightMaxAge, decorateRequest);
     }
 
     public static FilterConfig getFilterConfigSpecificOriginNullAllowed() {
-        final String allowedHttpHeaders =
-                CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;
-        final String allowedHttpMethods =
-                CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS;
+        final String allowedHttpHeaders = CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;
+        final String allowedHttpMethods = CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS;
         final String allowedOrigins = HTTP_TOMCAT_APACHE_ORG + ",null";
         final String exposedHeaders = CorsFilter.DEFAULT_EXPOSED_HEADERS;
-        final String supportCredentials =
-                CorsFilter.DEFAULT_SUPPORTS_CREDENTIALS;
-        final String preflightMaxAge =
-                CorsFilter.DEFAULT_PREFLIGHT_MAXAGE;
+        final String supportCredentials = CorsFilter.DEFAULT_SUPPORTS_CREDENTIALS;
+        final String preflightMaxAge = CorsFilter.DEFAULT_PREFLIGHT_MAXAGE;
         final String decorateRequest = CorsFilter.DEFAULT_DECORATE_REQUEST;
 
-        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods,
-                allowedOrigins, exposedHeaders, supportCredentials,
-                preflightMaxAge, decorateRequest);
+        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods, allowedOrigins, exposedHeaders,
+                supportCredentials, preflightMaxAge, decorateRequest);
     }
 
     public static FilterConfig getFilterConfigWithExposedHeaders() {
-        final String allowedHttpHeaders =
-                CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;
-        final String allowedHttpMethods =
-                CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS;
+        final String allowedHttpHeaders = CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;
+        final String allowedHttpMethods = CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS;
         final String allowedOrigins = ANY_ORIGIN;
         final String exposedHeaders = EXPOSED_HEADERS;
-        final String supportCredentials =
-                CorsFilter.DEFAULT_SUPPORTS_CREDENTIALS;
-        final String preflightMaxAge =
-                CorsFilter.DEFAULT_PREFLIGHT_MAXAGE;
+        final String supportCredentials = CorsFilter.DEFAULT_SUPPORTS_CREDENTIALS;
+        final String preflightMaxAge = CorsFilter.DEFAULT_PREFLIGHT_MAXAGE;
         final String decorateRequest = CorsFilter.DEFAULT_DECORATE_REQUEST;
 
-        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods,
-                allowedOrigins, exposedHeaders, supportCredentials,
-                preflightMaxAge, decorateRequest);
+        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods, allowedOrigins, exposedHeaders,
+                supportCredentials, preflightMaxAge, decorateRequest);
     }
 
     public static FilterConfig getSecureFilterConfig() {
-        final String allowedHttpHeaders =
-                CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;
-        final String allowedHttpMethods =
-                CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS + ",PUT";
+        final String allowedHttpHeaders = CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;
+        final String allowedHttpMethods = CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS + ",PUT";
         final String allowedOrigins = HTTPS_WWW_APACHE_ORG;
         final String exposedHeaders = CorsFilter.DEFAULT_EXPOSED_HEADERS;
         final String supportCredentials = "true";
-        final String preflightMaxAge =
-                CorsFilter.DEFAULT_PREFLIGHT_MAXAGE;
+        final String preflightMaxAge = CorsFilter.DEFAULT_PREFLIGHT_MAXAGE;
         final String decorateRequest = CorsFilter.DEFAULT_DECORATE_REQUEST;
 
-        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods,
-                allowedOrigins, exposedHeaders, supportCredentials,
-                preflightMaxAge, decorateRequest);
+        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods, allowedOrigins, exposedHeaders,
+                supportCredentials, preflightMaxAge, decorateRequest);
     }
 
     public static FilterConfig getNullFilterConfig() {
@@ -167,59 +131,44 @@ public class TesterFilterConfigs {
     }
 
     public static FilterConfig getSpecificOriginFilterConfig() {
-        final String allowedOrigins =
-                HTTPS_WWW_APACHE_ORG + "," + HTTP_TOMCAT_APACHE_ORG;
+        final String allowedOrigins = HTTPS_WWW_APACHE_ORG + "," + HTTP_TOMCAT_APACHE_ORG;
 
-        final String allowedHttpHeaders =
-                CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;
-        final String allowedHttpMethods =
-                CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS + ",PUT";
+        final String allowedHttpHeaders = CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;
+        final String allowedHttpMethods = CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS + ",PUT";
         final String exposedHeaders = CorsFilter.DEFAULT_EXPOSED_HEADERS;
-        final String supportCredentials =
-                CorsFilter.DEFAULT_SUPPORTS_CREDENTIALS;
-        final String preflightMaxAge =
-                CorsFilter.DEFAULT_PREFLIGHT_MAXAGE;
+        final String supportCredentials = CorsFilter.DEFAULT_SUPPORTS_CREDENTIALS;
+        final String preflightMaxAge = CorsFilter.DEFAULT_PREFLIGHT_MAXAGE;
         final String decorateRequest = CorsFilter.DEFAULT_DECORATE_REQUEST;
 
-        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods,
-                allowedOrigins, exposedHeaders, supportCredentials,
-                preflightMaxAge, decorateRequest);
+        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods, allowedOrigins, exposedHeaders,
+                supportCredentials, preflightMaxAge, decorateRequest);
     }
 
     public static FilterConfig getSpecificOriginFilterConfigNegativeMaxAge() {
-        final String allowedOrigins =
-                HTTPS_WWW_APACHE_ORG + "," + HTTP_TOMCAT_APACHE_ORG;
+        final String allowedOrigins = HTTPS_WWW_APACHE_ORG + "," + HTTP_TOMCAT_APACHE_ORG;
 
-        final String allowedHttpHeaders =
-                CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;
-        final String allowedHttpMethods =
-                CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS + ",PUT";
+        final String allowedHttpHeaders = CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;
+        final String allowedHttpMethods = CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS + ",PUT";
         final String exposedHeaders = CorsFilter.DEFAULT_EXPOSED_HEADERS;
-        final String supportCredentials =
-                CorsFilter.DEFAULT_SUPPORTS_CREDENTIALS;
+        final String supportCredentials = CorsFilter.DEFAULT_SUPPORTS_CREDENTIALS;
         final String preflightMaxAge = "-1";
         final String decorateRequest = CorsFilter.DEFAULT_DECORATE_REQUEST;
 
-        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods,
-                allowedOrigins, exposedHeaders, supportCredentials,
-                preflightMaxAge, decorateRequest);
+        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods, allowedOrigins, exposedHeaders,
+                supportCredentials, preflightMaxAge, decorateRequest);
     }
 
     public static FilterConfig getFilterConfigInvalidMaxPreflightAge() {
-        final String allowedHttpHeaders =
-                CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;
-        final String allowedHttpMethods =
-                CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS;
+        final String allowedHttpHeaders = CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;
+        final String allowedHttpMethods = CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS;
         final String allowedOrigins = CorsFilter.DEFAULT_ALLOWED_ORIGINS;
         final String exposedHeaders = CorsFilter.DEFAULT_EXPOSED_HEADERS;
-        final String supportCredentials =
-                CorsFilter.DEFAULT_SUPPORTS_CREDENTIALS;
+        final String supportCredentials = CorsFilter.DEFAULT_SUPPORTS_CREDENTIALS;
         final String preflightMaxAge = "abc";
         final String decorateRequest = CorsFilter.DEFAULT_DECORATE_REQUEST;
 
-        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods,
-                allowedOrigins, exposedHeaders, supportCredentials,
-                preflightMaxAge, decorateRequest);
+        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods, allowedOrigins, exposedHeaders,
+                supportCredentials, preflightMaxAge, decorateRequest);
     }
 
     public static FilterConfig getEmptyFilterConfig() {
@@ -231,34 +180,26 @@ public class TesterFilterConfigs {
         final String preflightMaxAge = "";
         final String decorateRequest = "";
 
-        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods,
-                allowedOrigins, exposedHeaders, supportCredentials,
-                preflightMaxAge, decorateRequest);
+        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods, allowedOrigins, exposedHeaders,
+                supportCredentials, preflightMaxAge, decorateRequest);
     }
 
     public static FilterConfig getFilterConfigDecorateRequestDisabled() {
-        final String allowedHttpHeaders =
-                CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;
-        final String allowedHttpMethods =
-                CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS;
+        final String allowedHttpHeaders = CorsFilter.DEFAULT_ALLOWED_HTTP_HEADERS;
+        final String allowedHttpMethods = CorsFilter.DEFAULT_ALLOWED_HTTP_METHODS;
         final String allowedOrigins = ANY_ORIGIN;
         final String exposedHeaders = CorsFilter.DEFAULT_EXPOSED_HEADERS;
-        final String supportCredentials =
-                CorsFilter.DEFAULT_SUPPORTS_CREDENTIALS;
-        final String preflightMaxAge =
-                CorsFilter.DEFAULT_PREFLIGHT_MAXAGE;
+        final String supportCredentials = CorsFilter.DEFAULT_SUPPORTS_CREDENTIALS;
+        final String preflightMaxAge = CorsFilter.DEFAULT_PREFLIGHT_MAXAGE;
         final String decorateRequest = "false";
 
-        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods,
-                allowedOrigins, exposedHeaders, supportCredentials,
-                preflightMaxAge, decorateRequest);
+        return generateFilterConfig(allowedHttpHeaders, allowedHttpMethods, allowedOrigins, exposedHeaders,
+                supportCredentials, preflightMaxAge, decorateRequest);
     }
 
-    private static FilterConfig generateFilterConfig(
-            final String allowedHttpHeaders, final String allowedHttpMethods,
-            final String allowedOrigins, final String exposedHeaders,
-            final String supportCredentials, final String preflightMaxAge,
-            final String decorateRequest) {
+    private static FilterConfig generateFilterConfig(final String allowedHttpHeaders, final String allowedHttpMethods,
+            final String allowedOrigins, final String exposedHeaders, final String supportCredentials,
+            final String preflightMaxAge, final String decorateRequest) {
         FilterConfig filterConfig = new FilterConfig() {
 
             @Override
@@ -273,26 +214,19 @@ public class TesterFilterConfigs {
 
             @Override
             public String getInitParameter(String name) {
-                if (CorsFilter.PARAM_CORS_ALLOWED_HEADERS
-                        .equalsIgnoreCase(name)) {
+                if (CorsFilter.PARAM_CORS_ALLOWED_HEADERS.equalsIgnoreCase(name)) {
                     return allowedHttpHeaders;
-                } else if (CorsFilter.PARAM_CORS_ALLOWED_METHODS
-                        .equalsIgnoreCase(name)) {
+                } else if (CorsFilter.PARAM_CORS_ALLOWED_METHODS.equalsIgnoreCase(name)) {
                     return allowedHttpMethods;
-                } else if (CorsFilter.PARAM_CORS_ALLOWED_ORIGINS
-                        .equalsIgnoreCase(name)) {
+                } else if (CorsFilter.PARAM_CORS_ALLOWED_ORIGINS.equalsIgnoreCase(name)) {
                     return allowedOrigins;
-                } else if (CorsFilter.PARAM_CORS_EXPOSED_HEADERS
-                        .equalsIgnoreCase(name)) {
+                } else if (CorsFilter.PARAM_CORS_EXPOSED_HEADERS.equalsIgnoreCase(name)) {
                     return exposedHeaders;
-                } else if (CorsFilter.PARAM_CORS_SUPPORT_CREDENTIALS
-                        .equalsIgnoreCase(name)) {
+                } else if (CorsFilter.PARAM_CORS_SUPPORT_CREDENTIALS.equalsIgnoreCase(name)) {
                     return supportCredentials;
-                } else if (CorsFilter.PARAM_CORS_PREFLIGHT_MAXAGE
-                        .equalsIgnoreCase(name)) {
+                } else if (CorsFilter.PARAM_CORS_PREFLIGHT_MAXAGE.equalsIgnoreCase(name)) {
                     return preflightMaxAge;
-                } else if (CorsFilter.PARAM_CORS_REQUEST_DECORATE
-                        .equalsIgnoreCase(name)) {
+                } else if (CorsFilter.PARAM_CORS_REQUEST_DECORATE.equalsIgnoreCase(name)) {
                     return decorateRequest;
                 }
                 return null;

==================================================
TesterHttpServletResponse.java
index e4350e1d89..449963e6ec 100644
--- a/test/org/apache/catalina/filters/TesterHttpServletRequest.java
+++ b/test/org/apache/catalina/filters/TesterHttpServletRequest.java
@@ -112,7 +112,7 @@ public class TesterHttpServletRequest implements HttpServletRequest {
     }
 
     @Override
-    public Map<String,String[]> getParameterMap() {
+    public Map<String, String[]> getParameterMap() {
         throw new RuntimeException("Not implemented");
     }
 
@@ -370,8 +370,8 @@ public class TesterHttpServletRequest implements HttpServletRequest {
     }
 
     @Override
-    public AsyncContext startAsync(ServletRequest servletRequest,
-            ServletResponse servletResponse) throws IllegalStateException {
+    public AsyncContext startAsync(ServletRequest servletRequest, ServletResponse servletResponse)
+            throws IllegalStateException {
         throw new RuntimeException("Not implemented");
     }
 
@@ -401,14 +401,12 @@ public class TesterHttpServletRequest implements HttpServletRequest {
     }
 
     @Override
-    public boolean authenticate(HttpServletResponse response)
-            throws IOException, ServletException {
+    public boolean authenticate(HttpServletResponse response) throws IOException, ServletException {
         throw new RuntimeException("Not implemented");
     }
 
     @Override
-    public void login(String username, String password)
-            throws ServletException {
+    public void login(String username, String password) throws ServletException {
         throw new RuntimeException("Not implemented");
     }
 
@@ -428,8 +426,8 @@ public class TesterHttpServletRequest implements HttpServletRequest {
     }
 
     @Override
-    public <T extends HttpUpgradeHandler> T upgrade(
-            Class<T> httpUpgradeHandlerClass) throws IOException, ServletException {
+    public <T extends HttpUpgradeHandler> T upgrade(Class<T> httpUpgradeHandlerClass)
+            throws IOException, ServletException {
         throw new RuntimeException("Not implemented");
     }
 

==================================================
