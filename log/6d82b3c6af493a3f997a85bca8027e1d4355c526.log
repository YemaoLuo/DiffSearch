6d82b3c6af493a3f997a85bca8027e1d4355c526
==================================================
Add various EL test cases, mostly extracted from local test JSPs I have used for individual issues.
==================================================
Mark Emlyn
==================================================
Thu Jan 7 16:06:45 2010 +0000
==================================================
TestELEvaluation.java
Add various EL test cases, mostly extracted from local test JSPs I have used for individual issues.
Thanks to kkolinko and the numerous bug reporters that provided the basis for many of these.
At present, although this is Tomcat 7, the tests only cover JSP 2.1 functionality.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@896913 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestELInJsp.java
index 0c21ff43d1..4246036439 100644
--- a/test/org/apache/el/TestELEvaluation.java
+++ b/test/org/apache/el/TestELEvaluation.java
@@ -137,7 +137,7 @@ public class TestELEvaluation extends TestCase {
             if ("trim".equals(localName)) {
                 Method m;
                 try {
-                    m = this.getClass().getMethod("trim", String.class);
+                    m = TesterFunctions.class.getMethod("trim", String.class);
                     return m;
                 } catch (SecurityException e) {
                     // Ignore
@@ -147,9 +147,5 @@ public class TestELEvaluation extends TestCase {
             }
             return null;
         }
-        
-        public static String trim(String input) {
-            return input.trim();
-        }
     }
 }

==================================================
TesterFunctions.java
new file mode 100644
index 0000000000..c1a721f6b0
--- /dev/null
+++ b/test/org/apache/el/TestELInJsp.java
@@ -0,0 +1,276 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.el;
+
+import java.io.File;
+
+import org.apache.catalina.startup.Tomcat;
+import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.tomcat.util.buf.ByteChunk;
+
+public class TestELInJsp extends TomcatBaseTest {
+    
+    public void testBug42565() throws Exception {
+        Tomcat tomcat = getTomcatInstance();
+
+        File appDir = 
+            new File("test/webapp");
+        // app dir is relative to server home
+        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
+        
+        tomcat.start();
+
+        ByteChunk res = getUrl("http://localhost:" + getPort() +
+                "/test/bug42565.jsp");
+        
+        String result = res.toString();
+        assertTrue(result.indexOf("00-false") > 0);
+        assertTrue(result.indexOf("01-false") > 0);
+        assertTrue(result.indexOf("02-false") > 0);
+        assertTrue(result.indexOf("03-false") > 0);
+        assertTrue(result.indexOf("04-false") > 0);
+        assertTrue(result.indexOf("05-false") > 0);
+        assertTrue(result.indexOf("06-false") > 0);
+        assertTrue(result.indexOf("07-false") > 0);
+        assertTrue(result.indexOf("08-false") > 0);
+        assertTrue(result.indexOf("09-false") > 0);
+        assertTrue(result.indexOf("10-false") > 0);
+        assertTrue(result.indexOf("11-false") > 0);
+        assertTrue(result.indexOf("12-false") > 0);
+        assertTrue(result.indexOf("13-false") > 0);
+        assertTrue(result.indexOf("14-false") > 0);
+        assertTrue(result.indexOf("15-false") > 0);
+    }
+
+    public void testBug44994() throws Exception {
+        Tomcat tomcat = getTomcatInstance();
+
+        File appDir = 
+            new File("test/webapp");
+        // app dir is relative to server home
+        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
+        
+        tomcat.start();
+
+        ByteChunk res = getUrl("http://localhost:" + getPort() +
+                "/test/bug44994.jsp");
+        
+        String result = res.toString();
+        assertTrue(result.indexOf("00-none") > 0);
+        assertTrue(result.indexOf("01-one") > 0);
+        assertTrue(result.indexOf("02-many") > 0);
+    }
+
+    public void testBug45427() throws Exception {
+        Tomcat tomcat = getTomcatInstance();
+
+        File appDir = 
+            new File("test/webapp");
+        // app dir is relative to server home
+        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
+        
+        tomcat.start();
+
+        ByteChunk res = getUrl("http://localhost:" + getPort() +
+                "/test/bug45427.jsp");
+        
+        String result = res.toString();
+        // Warning: JSP attribute escaping != Java String escaping
+        assertTrue(result.indexOf("00-hello world") > 0);
+        assertTrue(result.indexOf("01-hello 'world") > 0);
+        assertTrue(result.indexOf("02-hello \"world") > 0);
+        assertTrue(result.indexOf("03-hello world") > 0);
+        assertTrue(result.indexOf("04-hello 'world") > 0);
+        assertTrue(result.indexOf("05-hello \"world") > 0);
+        assertTrue(result.indexOf("06-hello world") > 0);
+        assertTrue(result.indexOf("07-hello 'world") > 0);
+        assertTrue(result.indexOf("08-hello \"world") > 0);
+        assertTrue(result.indexOf("09-hello world") > 0);
+        assertTrue(result.indexOf("10-hello 'world") > 0);
+        assertTrue(result.indexOf("11-hello \"world") > 0);
+        assertTrue(result.indexOf("12-hello world") > 0);
+        assertTrue(result.indexOf("13-hello 'world") > 0);
+        assertTrue(result.indexOf("14-hello \"world") > 0);
+        assertTrue(result.indexOf("15-hello world") > 0);
+        assertTrue(result.indexOf("16-hello 'world") > 0);
+        assertTrue(result.indexOf("17-hello \"world") > 0);
+    }
+
+    public void testBug45451() throws Exception {
+        Tomcat tomcat = getTomcatInstance();
+
+        File appDir = 
+            new File("test/webapp");
+        // app dir is relative to server home
+        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
+        
+        tomcat.start();
+
+        ByteChunk res = /* getUrl("http://localhost:" + getPort() +
+                "/test/bug45451a.jsp");
+        
+        String result = res.toString();
+        // Warning: JSP attribute escaping != Java String escaping
+        assertTrue(result.indexOf("00-\\'hello world\\'") > 0);
+        assertTrue(result.indexOf("01-\\'hello world\\'") > 0);
+        assertTrue(result.indexOf("02-\\'hello world\\'") > 0);
+        assertTrue(result.indexOf("03-\\'hello world\\'") > 0);
+        
+        res = */ getUrl("http://localhost:" + getPort() + "/test/bug45451b.jsp");
+        String result = res.toString();
+        // Warning: JSP attribute escaping != Java String escaping
+        assertTrue(result.indexOf("00-2") > 0);
+        assertTrue(result.indexOf("01-${1+1}") > 0);
+        assertTrue(result.indexOf("02-\\${1+1}") > 0);
+        assertTrue(result.indexOf("03-\\\\${1+1}") > 0);
+        assertTrue(result.indexOf("04-2") > 0);
+        assertTrue(result.indexOf("05-${1+1}") > 0);
+        assertTrue(result.indexOf("06-\\2") > 0);
+        assertTrue(result.indexOf("07-\\${1+1}") > 0);
+        assertTrue(result.indexOf("08-\\\\2") > 0);
+        
+        res = getUrl("http://localhost:" + getPort() + "/test/bug45451c.jsp");
+        result = res.toString();
+        // Warning: JSP attribute escaping != Java String escaping
+        assertTrue(result.indexOf("00-${1+1}") > 0);
+        assertTrue(result.indexOf("01-\\${1+1}") > 0);
+        assertTrue(result.indexOf("02-\\\\${1+1}") > 0);
+        assertTrue(result.indexOf("03-\\\\\\${1+1}") > 0);
+        assertTrue(result.indexOf("04-${1+1}") > 0);
+        assertTrue(result.indexOf("05-\\${1+1}") > 0);
+        assertTrue(result.indexOf("06-\\\\${1+1}") > 0);
+        assertTrue(result.indexOf("07-\\\\\\${1+1}") > 0);
+        assertTrue(result.indexOf("08-\\\\\\\\${1+1}") > 0);
+
+        res = getUrl("http://localhost:" + getPort() + "/test/bug45451d.jspx");
+        result = res.toString();
+        // Warning: JSP attribute escaping != Java String escaping
+        assertTrue(result.indexOf("00-2") > 0);
+        assertTrue(result.indexOf("01-${1+1}") > 0);
+        assertTrue(result.indexOf("02-\\${1+1}") > 0);
+        assertTrue(result.indexOf("03-\\\\${1+1}") > 0);
+        assertTrue(result.indexOf("04-2") > 0);
+        assertTrue(result.indexOf("05-${1+1}") > 0);
+        assertTrue(result.indexOf("06-\\2") > 0);
+        assertTrue(result.indexOf("07-\\${1+1}") > 0);
+        assertTrue(result.indexOf("08-\\\\2") > 0);
+    }
+
+    public void testBug45511() throws Exception {
+        Tomcat tomcat = getTomcatInstance();
+
+        File appDir = 
+            new File("test/webapp");
+        // app dir is relative to server home
+        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
+        
+        tomcat.start();
+
+        ByteChunk res = getUrl("http://localhost:" + getPort() +
+                "/test/bug45511.jsp");
+        
+        String result = res.toString();
+        assertTrue(result.indexOf("00-true") > 0);
+        assertTrue(result.indexOf("01-false") > 0);
+    }
+
+    public void testBug46596() throws Exception {
+        Tomcat tomcat = getTomcatInstance();
+
+        File appDir = 
+            new File("test/webapp");
+        // app dir is relative to server home
+        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
+        
+        tomcat.start();
+
+        ByteChunk res = getUrl("http://localhost:" + getPort() +
+                "/test/bug46596.jsp");
+        assertTrue(res.toString().indexOf("{OK}") > 0);
+    }
+    
+    public void testBug47413() throws Exception {
+        Tomcat tomcat = getTomcatInstance();
+
+        File appDir = 
+            new File("test/webapp");
+        // app dir is relative to server home
+        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
+        
+        tomcat.start();
+
+        ByteChunk res = getUrl("http://localhost:" + getPort() +
+                "/test/bug47413.jsp");
+        
+        String result = res.toString();
+        assertTrue(result.indexOf("00-hello world") > 0);
+        assertTrue(result.indexOf("01-hello world") > 0);
+        assertTrue(result.indexOf("02-3.22") > 0);
+        assertTrue(result.indexOf("03-3.22") > 0);
+        assertTrue(result.indexOf("04-17") > 0);
+        assertTrue(result.indexOf("05-17") > 0);
+        assertTrue(result.indexOf("06-hello world") > 0);
+        assertTrue(result.indexOf("07-hello world") > 0);
+        assertTrue(result.indexOf("08-0.0") > 0);
+        assertTrue(result.indexOf("09-0.0") > 0);
+        assertTrue(result.indexOf("10-0") > 0);
+        assertTrue(result.indexOf("11-0") > 0);
+    }
+
+    public void testBug48112() throws Exception {
+        Tomcat tomcat = getTomcatInstance();
+
+        File appDir = 
+            new File("test/webapp");
+        // app dir is relative to server home
+        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
+        
+        tomcat.start();
+
+        ByteChunk res = getUrl("http://localhost:" + getPort() +
+                "/test/bug48112.jsp");
+        assertTrue(res.toString().indexOf("{OK}") > 0);
+    }
+    
+    public void testELMisc() throws Exception {
+        Tomcat tomcat = getTomcatInstance();
+
+        File appDir = 
+            new File("test/webapp");
+        // app dir is relative to server home
+        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
+        
+        tomcat.start();
+
+        ByteChunk res = getUrl("http://localhost:" + getPort() +
+                "/test/el-misc.jsp");
+        String result = res.toString();
+        assertTrue(result.indexOf("00-\\\\\\\"${'hello world'}") > 0);
+        assertTrue(result.indexOf("01-\\\\\\\"\\${'hello world'}") > 0);
+        assertTrue(result.indexOf("02-\\\"\\${'hello world'}") > 0);
+        assertTrue(result.indexOf("03-\\\"\\${'hello world'}") > 0);
+        assertTrue(result.indexOf("2az-04") > 0);
+        assertTrue(result.indexOf("05-a2z") > 0);
+        assertTrue(result.indexOf("06-az2") > 0);
+        assertTrue(result.indexOf("2az-07") > 0);
+        assertTrue(result.indexOf("08-a2z") > 0);
+        assertTrue(result.indexOf("09-az2") > 0);
+    }
+
+
+}

==================================================
TestGenerator.java
new file mode 100644
index 0000000000..bb799c1b9c
--- /dev/null
+++ b/test/org/apache/el/TesterFunctions.java
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.el;
+
+public class TesterFunctions {
+    public static String trim(String input) {
+        return input.trim();
+    }
+}

==================================================
TestValidator.java
new file mode 100644
index 0000000000..d02db5c2a9
--- /dev/null
+++ b/test/org/apache/jasper/compiler/TestGenerator.java
@@ -0,0 +1,60 @@
+package org.apache.jasper.compiler;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.apache.catalina.startup.Tomcat;
+import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.tomcat.util.buf.ByteChunk;
+
+public class TestGenerator extends TomcatBaseTest {
+    
+    public void testBug45015a() throws Exception {
+        Tomcat tomcat = getTomcatInstance();
+
+        File appDir = 
+            new File("test/webapp");
+        // app dir is relative to server home
+        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
+        
+        tomcat.start();
+
+        ByteChunk res = getUrl("http://localhost:" + getPort() +
+                "/test/bug45015a.jsp");
+        
+        String result = res.toString();
+        // Beware of the differences between escaping in JSP attributes and
+        // in Java Strings
+        assertTrue(result.indexOf("00-hello 'world'") > 0);
+        assertTrue(result.indexOf("01-hello 'world") > 0);
+        assertTrue(result.indexOf("02-hello world'") > 0);
+        assertTrue(result.indexOf("03-hello world'") > 0);
+        assertTrue(result.indexOf("04-hello world\"") > 0);
+        assertTrue(result.indexOf("05-hello \"world\"") > 0);
+        assertTrue(result.indexOf("06-hello \"world") > 0);
+        assertTrue(result.indexOf("07-hello world\"") > 0);
+        assertTrue(result.indexOf("08-hello world'") > 0);
+        assertTrue(result.indexOf("09-hello world\"") > 0);
+    }
+
+    public void testBug45015b() throws Exception {
+        Tomcat tomcat = getTomcatInstance();
+
+        File appDir = 
+            new File("test/webapp");
+        // app dir is relative to server home
+        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
+        
+        tomcat.start();
+
+        Exception e = null;
+        try {
+            getUrl("http://localhost:" + getPort() + "/test/bug45015b.jsp");
+        } catch (IOException ioe) {
+            e = ioe;
+        }
+
+        // Failure is expected
+        assertNotNull(e);
+    }
+}

==================================================
