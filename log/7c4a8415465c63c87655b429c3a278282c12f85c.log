7c4a8415465c63c87655b429c3a278282c12f85c
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54144
==================================================
Mark Emlyn
==================================================
Fri Nov 16 23:56:12 2012 +0000
==================================================
Util.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54144
Add required behaviour for Reader objects when used with c:out

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1410632 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Out.java
index 6fe83c13d2..ccecfd812a 100644
--- a/java/org/apache/jasper/tagplugins/jstl/Util.java
+++ b/java/org/apache/jasper/tagplugins/jstl/Util.java
@@ -179,11 +179,18 @@ public class Util {
      *
      * taken from org.apache.taglibs.standard.tag.common.core.Util
      */
-    @SuppressWarnings("null") // escapedBuffer cannot be null
     public static String escapeXml(String buffer) {
+        String result = escapeXml(buffer.toCharArray(), buffer.length());
+        if (result == null) {
+            return buffer;
+        } else {
+            return result;
+        }
+    }
+
+    @SuppressWarnings("null") // escapedBuffer cannot be null
+    public static String escapeXml(char[] arrayBuffer, int length) {
         int start = 0;
-        int length = buffer.length();
-        char[] arrayBuffer = buffer.toCharArray();
         StringBuilder escapedBuffer = null;
 
         for (int i = 0; i < length; i++) {
@@ -207,7 +214,7 @@ public class Util {
         }
         // no xml escaping was necessary
         if (start == 0) {
-            return buffer;
+            return null;
         }
         // add rest of unescaped portion
         if (start < length) {

==================================================
TestOut.java
index 3a049cd69f..fcff324364 100644
--- a/java/org/apache/jasper/tagplugins/jstl/core/Out.java
+++ b/java/org/apache/jasper/tagplugins/jstl/core/Out.java
@@ -19,11 +19,13 @@
 package org.apache.jasper.tagplugins.jstl.core;
 
 import java.io.IOException;
+import java.io.Reader;
 
 import javax.servlet.jsp.JspWriter;
 
 import org.apache.jasper.compiler.tagplugin.TagPlugin;
 import org.apache.jasper.compiler.tagplugin.TagPluginContext;
+import org.apache.jasper.tagplugins.jstl.Util;
 
 
 public final class Out implements TagPlugin {
@@ -39,24 +41,26 @@ public final class Out implements TagPlugin {
 
         //strValName, strEscapeXmlName & strDefName are two variables' name
         //standing for value, escapeXml and default attribute
+        String strObjectName = ctxt.getTemporaryVariableName();
         String strValName = ctxt.getTemporaryVariableName();
         String strDefName = ctxt.getTemporaryVariableName();
         String strEscapeXmlName = ctxt.getTemporaryVariableName();
         String strSkipBodyName = ctxt.getTemporaryVariableName();
 
         //according to the tag file, the value attribute is mandatory.
-        ctxt.generateJavaSource("String " + strValName + " = null;");
-        ctxt.generateJavaSource("if(");
+        ctxt.generateJavaSource("Object " + strObjectName + "=");
         ctxt.generateAttribute("value");
-        ctxt.generateJavaSource("!=null){");
-        ctxt.generateJavaSource("    " + strValName + " = (");
-        ctxt.generateAttribute("value");
-        ctxt.generateJavaSource(").toString();");
+        ctxt.generateJavaSource(";");
+        ctxt.generateJavaSource("String " + strValName + "=null;");
+        ctxt.generateJavaSource("if(!(" + strObjectName +
+                " instanceof Reader) && "+ strObjectName + " != null){");
+        ctxt.generateJavaSource(
+                strValName + " = " + strObjectName + ".toString();");
         ctxt.generateJavaSource("}");
 
         //initiate the strDefName with null.
         //if the default has been specified, then assign the value to it;
-        ctxt.generateJavaSource("String " + strDefName + " = null;\n");
+        ctxt.generateJavaSource("String " + strDefName + " = null;");
         if(hasDefault){
             ctxt.generateJavaSource("if(");
             ctxt.generateAttribute("default");
@@ -80,24 +84,45 @@ public final class Out implements TagPlugin {
         ctxt.generateJavaSource(
                 "boolean " + strSkipBodyName + " = " +
                 "org.apache.jasper.tagplugins.jstl.core.Out.output(out, " +
-                strValName + ", " + strDefName + ", " + strEscapeXmlName +
-                ");");
+                strObjectName + ", " + strValName + ", " + strDefName + ", " +
+                strEscapeXmlName + ");");
         ctxt.generateJavaSource("if(!" + strSkipBodyName + ") {");
         ctxt.generateBody();
         ctxt.generateJavaSource("}");
     }
 
-    public static boolean output(JspWriter out, String value, String defaultValue,
-            boolean escapeXml) throws IOException {
-        String v = value != null ? value : defaultValue;
-        if (v != null) {
-            if(escapeXml){
-                v = org.apache.jasper.tagplugins.jstl.Util.escapeXml(v);
+    public static boolean output(JspWriter out, Object input, String value,
+            String defaultValue, boolean escapeXml) throws IOException {
+        if (input instanceof Reader) {
+            char[] buffer = new char[8096];
+            int read = 0;
+            while (read != -1) {
+                read = ((Reader) input).read(buffer);
+                if (read != -1) {
+                    if (escapeXml) {
+                        String escaped = Util.escapeXml(buffer, read);
+                        if (escaped == null) {
+                            out.write(buffer, 0, read);
+                        } else {
+                            out.print(escaped);
+                        }
+                    } else {
+                        out.write(buffer, 0, read);
+                    }
+                }
             }
-            out.write(v);
             return true;
         } else {
-            return false;
+            String v = value != null ? value : defaultValue;
+            if (v != null) {
+                if(escapeXml){
+                    v = Util.escapeXml(v);
+                }
+                out.write(v);
+                return true;
+            } else {
+                return false;
+            }
         }
     }
 }

==================================================
