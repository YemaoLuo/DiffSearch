6ec0a96b54eacdb50987479188a30cadf9be7764
==================================================
UCDetector
==================================================
Mark Emlyn
==================================================
Tue Feb 19 16:48:19 2013 +0000
==================================================
CompressDeflater6.java
UCDetector
 - use final
 - reduce visibility
 - remove unused code

Not all warnings were addressed as this code is a work in progress

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1447807 13f79535-47bb-0310-9956-ffa450edef68



==================================================
NetSupportOpenSSL.java
index 845401b80d..5eb272ef5a 100644
--- a/java/org/apache/tomcat/spdy/CompressDeflater6.java
+++ b/java/org/apache/tomcat/spdy/CompressDeflater6.java
@@ -27,10 +27,11 @@ import org.apache.tomcat.spdy.SpdyConnection.CompressSupport;
  * Java6 Deflater with the workaround from tomcat http filters.
  */
 class CompressDeflater6 implements CompressSupport {
-    public static long DICT_ID = 3751956914L;
+    public static final long DICT_ID = 3751956914L;
 
     // Make sure to use the latest from net/spdy/spdy_framer.cc, not from spec
-    static String SPDY_DICT_S = "optionsgetheadpostputdeletetraceacceptaccept-charsetaccept-encodingaccept-"
+    private static final String SPDY_DICT_S =
+              "optionsgetheadpostputdeletetraceacceptaccept-charsetaccept-encodingaccept-"
             + "languageauthorizationexpectfromhostif-modified-sinceif-matchif-none-matchi"
             + "f-rangeif-unmodifiedsincemax-forwardsproxy-authorizationrangerefererteuser"
             + "-agent10010120020120220320420520630030130230330430530630740040140240340440"
@@ -44,25 +45,19 @@ class CompressDeflater6 implements CompressSupport {
             + "ation/xhtmltext/plainpublicmax-agecharset=iso-8859-1utf-8gzipdeflateHTTP/1"
             + ".1statusversionurl ";
 
-    public static byte[] SPDY_DICT = SPDY_DICT_S.getBytes();
+    private static final byte[] SPDY_DICT = SPDY_DICT_S.getBytes();
     // C code uses this - not in the spec
     static {
         SPDY_DICT[SPDY_DICT.length - 1] = (byte) 0;
     }
 
-    Deflater zipOut;
-    Inflater zipIn;
+    private Deflater zipOut;
+    private Inflater zipIn;
 
-    byte[] dict;
+    private byte[] decompressBuffer;
+    private int decMax;
 
-    long dictId;
-
-    byte[] decompressBuffer;
-    int decOff;
-    int decMax;
-
-    byte[] compressBuffer;
-    int compressOff;
+    private byte[] compressBuffer;
 
     public CompressDeflater6() {
     }
@@ -145,7 +140,6 @@ class CompressDeflater6 implements CompressSupport {
 
         // will read from dec buffer to frame.data
         decMax = frame.endData;
-        decOff = start;
 
         int off = start;
 

==================================================
NetSupportSocket.java
index 9c089bea7a..55de2f8fbc 100644
--- a/java/org/apache/tomcat/spdy/NetSupportOpenSSL.java
+++ b/java/org/apache/tomcat/spdy/NetSupportOpenSSL.java
@@ -17,8 +17,6 @@
 package org.apache.tomcat.spdy;
 
 import java.io.IOException;
-import java.util.Arrays;
-import java.util.List;
 
 import org.apache.tomcat.jni.SSLExt;
 import org.apache.tomcat.jni.Status;
@@ -30,8 +28,7 @@ import org.apache.tomcat.jni.socket.AprSocketContext.TlsCertVerifier;
 
 public class NetSupportOpenSSL extends SpdyContext.NetSupport {
 
-    List<String> protos = Arrays.asList(new String[] {"spdy/2", "http/1.1"});
-    AprSocketContext con;
+    private AprSocketContext con;
 
     public NetSupportOpenSSL() {
         con = new AprSocketContext();
@@ -119,8 +116,8 @@ public class NetSupportOpenSSL extends SpdyContext.NetSupport {
     }
 
     // NB
-    static class SpdySocketHandler implements NonBlockingPollHandler {
-        SpdyConnection con;
+    private static class SpdySocketHandler implements NonBlockingPollHandler {
+        private final SpdyConnection con;
 
         SpdySocketHandler(SpdyConnection con) {
             this.con = con;
@@ -156,8 +153,8 @@ public class NetSupportOpenSSL extends SpdyContext.NetSupport {
 
     }
 
-    public static class SpdyConnectionAprSocket extends SpdyConnection {
-        AprSocket socket;
+    private static class SpdyConnectionAprSocket extends SpdyConnection {
+        private AprSocket socket;
 
         public SpdyConnectionAprSocket(SpdyContext spdyContext) {
             super(spdyContext);

==================================================
SpdyConnection.java
index 84fa65e199..32e537a449 100644
--- a/java/org/apache/tomcat/spdy/NetSupportSocket.java
+++ b/java/org/apache/tomcat/spdy/NetSupportSocket.java
@@ -68,8 +68,8 @@ public class NetSupportSocket extends SpdyContext.NetSupport {
 
     }
 
-    boolean running = true;
-    ServerSocket serverSocket;
+    private boolean running = true;
+    private ServerSocket serverSocket;
 
     @Override
     public void stop() throws IOException {
@@ -121,8 +121,8 @@ public class NetSupportSocket extends SpdyContext.NetSupport {
     }
 
 
-    public static class SpdyConnectionSocket extends SpdyConnection {
-        Socket socket;
+    private static class SpdyConnectionSocket extends SpdyConnection {
+        private Socket socket;
 
 
         Runnable inputThread = new Runnable() {

==================================================
SpdyContext.java
index 440a2a8626..d921b6bab2 100644
--- a/java/org/apache/tomcat/spdy/SpdyConnection.java
+++ b/java/org/apache/tomcat/spdy/SpdyConnection.java
@@ -42,15 +42,15 @@ public abstract class SpdyConnection { // implements Runnable {
     // TODO: this can be pooled, to avoid allocation on idle connections
     // TODO: override socket timeout
 
-    protected volatile SpdyFrame inFrame;
+    private volatile SpdyFrame inFrame;
 
-    protected CompressSupport compressSupport;
+    private CompressSupport compressSupport;
 
     // Fields stored for each spdy connection
-    Map<Integer, SpdyStream> channels = new HashMap<>();
+    private final Map<Integer, SpdyStream> channels = new HashMap<>();
 
     // --------------
-    protected static final Logger log = Logger.getLogger(SpdyConnection.class
+    private static final Logger log = Logger.getLogger(SpdyConnection.class
             .getName());
 
     public static final int TYPE_SYN_STREAM = 1;
@@ -72,9 +72,9 @@ public abstract class SpdyConnection { // implements Runnable {
     public static String[] TYPES = { "SYN_STREAM", "SYN_REPLY", "RST_STREAM",
             "SETTINGS", "5", "PING", "GOAWAY", "HEADERS", "WINDOW_UPDATE" };
 
-    static int FLAG_HALF_CLOSE = 1;
+    static final int FLAG_HALF_CLOSE = 1;
 
-    public static String[] RST_ERRORS = {
+    private final static String[] RST_ERRORS = {
             // This is a generic error, and should only be used if a more
             // specific error is not available.
             "PROTOCOL_ERROR", "INVALID_STREAM",
@@ -103,23 +103,21 @@ public abstract class SpdyConnection { // implements Runnable {
 
     // protected SpdyFrame currentOutFrame = new SpdyFrame();
 
-    protected SpdyContext spdyContext;
+    protected final SpdyContext spdyContext;
 
     protected boolean inClosed;
 
-    int lastChannel;
+    private int lastChannel;
 
-    int outStreamId = 1;
+    private int outStreamId = 1;
 
     // TODO: finer handling of priorities
-    LinkedList<SpdyFrame> prioriyQueue = new LinkedList<>();
+    private final LinkedList<SpdyFrame> prioriyQueue = new LinkedList<>();
 
-    LinkedList<SpdyFrame> outQueue = new LinkedList<>();
+    private final LinkedList<SpdyFrame> outQueue = new LinkedList<>();
 
     // --------------
 
-    public static byte[] NPN = "spdy/2".getBytes();
-
     public static final int LONG = 1;
 
     public static final int CLOSE = -1;
@@ -129,7 +127,7 @@ public abstract class SpdyConnection { // implements Runnable {
     /**
      * Handles the out queue for blocking sockets.
      */
-    SpdyFrame out;
+    private SpdyFrame out;
 
     private int goAway = Integer.MAX_VALUE;
 
@@ -311,9 +309,7 @@ public abstract class SpdyConnection { // implements Runnable {
         getSpdyContext().getExecutor().execute(nbDrain);
     }
 
-    static int drainCnt = 0;
-
-    Runnable nbDrain = new Runnable() {
+    private final Runnable nbDrain = new Runnable() {
         @Override
         public void run() {
             drain();

==================================================
SpdyFrame.java
index f23842034b..613bca0a25 100644
--- a/java/org/apache/tomcat/spdy/SpdyContext.java
+++ b/java/org/apache/tomcat/spdy/SpdyContext.java
@@ -47,9 +47,9 @@ public final class SpdyContext {
 
     private Executor executor;
 
-    int defaultFrameSize = 8192;
+    private int defaultFrameSize = 8192;
 
-    public static boolean debug = false;
+    public static final boolean debug = false;
 
     protected boolean tls = true;
     protected boolean compression = true;

==================================================
SpdyStream.java
index 3448e0e459..9a74d69068 100644
--- a/java/org/apache/tomcat/spdy/SpdyFrame.java
+++ b/java/org/apache/tomcat/spdy/SpdyFrame.java
@@ -19,13 +19,13 @@ package org.apache.tomcat.spdy;
 import java.util.Map;
 
 public class SpdyFrame {
-    public static byte[] STATUS = "status".getBytes();
+    public static final byte[] STATUS = "status".getBytes();
 
-    public static byte[] VERSION = "version".getBytes();
+    public static final byte[] VERSION = "version".getBytes();
 
-    public static byte[] HTTP11 = "HTTP/1.1".getBytes();
+    public static final byte[] HTTP11 = "HTTP/1.1".getBytes();
 
-    public static byte[] OK200 = "200 OK".getBytes();
+    public static final byte[] OK200 = "200 OK".getBytes();
 
 
     // This is a bit more complicated, to avoid multiple reads/writes.

==================================================
