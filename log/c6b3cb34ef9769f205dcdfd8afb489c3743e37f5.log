c6b3cb34ef9769f205dcdfd8afb489c3743e37f5
==================================================
Add harmonized util methods for the five listener events.
==================================================
Remy Maucherat
==================================================
Sat Mar 8 13:45:07 2014 +0000
==================================================
AbstractServletInputStream.java
Add harmonized util methods for the five listener events.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1575545 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractServletOutputStream.java
index aee5c0699b..9e528960e3 100644
--- a/java/org/apache/coyote/http11/upgrade/AbstractServletInputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/AbstractServletInputStream.java
@@ -61,15 +61,7 @@ public abstract class AbstractServletInputStream extends ServletInputStream {
         try {
             ready = Boolean.valueOf(doIsReady());
         } catch (IOException e) {
-            Thread thread = Thread.currentThread();
-            ClassLoader originalClassLoader = thread.getContextClassLoader();
-            try {
-                thread.setContextClassLoader(applicationLoader);
-                listener.onError(e);
-            } finally {
-                thread.setContextClassLoader(originalClassLoader);
-            }
-            ready = Boolean.FALSE;
+            onError(e);
         }
         return ready.booleanValue();
     }
@@ -175,7 +167,25 @@ public abstract class AbstractServletInputStream extends ServletInputStream {
     }
 
 
+    protected final void onAllDataRead() throws IOException {
+        if (listener == null) {
+            return;
+        }
+        Thread thread = Thread.currentThread();
+        ClassLoader originalClassLoader = thread.getContextClassLoader();
+        try {
+            thread.setContextClassLoader(applicationLoader);
+            listener.onAllDataRead();
+        } finally {
+            thread.setContextClassLoader(originalClassLoader);
+        }
+    }
+
+
     protected final void onDataAvailable() throws IOException {
+        if (listener == null) {
+            return;
+        }
         ready = Boolean.TRUE;
         Thread thread = Thread.currentThread();
         ClassLoader originalClassLoader = thread.getContextClassLoader();
@@ -188,6 +198,22 @@ public abstract class AbstractServletInputStream extends ServletInputStream {
     }
 
 
+    protected final void onError(Throwable t) {
+        if (listener == null) {
+            return;
+        }
+        Thread thread = Thread.currentThread();
+        ClassLoader originalClassLoader = thread.getContextClassLoader();
+        try {
+            thread.setContextClassLoader(applicationLoader);
+            listener.onError(t);
+        } finally {
+            thread.setContextClassLoader(originalClassLoader);
+        }
+        ready = Boolean.FALSE;
+    }
+
+
     protected final boolean isCloseRequired() {
         return closeRequired;
     }

==================================================
