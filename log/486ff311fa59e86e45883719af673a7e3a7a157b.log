486ff311fa59e86e45883719af673a7e3a7a157b
==================================================
Refactor Catalina's TLD processing into Jasper's ServletContainerInitializer.
==================================================
Jeremy Boynes
==================================================
Sat Aug 10 21:53:43 2013 +0000
==================================================
Context.java
Refactor Catalina's TLD processing into Jasper's ServletContainerInitializer.
Replaces the TldConfig lifecycle listener with code the SCI to scan for TLDs and register listeners dynamically.
Removes the "processTld" property from StandardContext and deprecates other TLD related properties on Context
Does not yet address refactoring Jasper's own TLD processing into the SCI.


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1512826 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StandardContext.java
index c8b1d379dc..ce31faed3d 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -621,6 +621,7 @@ public interface Context extends Container {
      * parsing tlds files.
      * @param tldValidation true to enable xml instance validation
      */
+    @Deprecated
     public void setTldValidation(boolean tldValidation);
 
 
@@ -629,6 +630,7 @@ public interface Context extends Container {
      * @return true if validation is enabled.
      *
      */
+    @Deprecated
     public boolean getTldValidation();
 
 
@@ -636,6 +638,7 @@ public interface Context extends Container {
      * Get the server.xml &lt;host&gt; attribute's xmlNamespaceAware.
      * @return true if namespace awareness is enabled.
      */
+    @Deprecated
     public boolean getTldNamespaceAware();
 
 
@@ -644,6 +647,7 @@ public interface Context extends Container {
      * parsing xml instances.
      * @param tldNamespaceAware true to enable namespace awareness
      */
+    @Deprecated
     public void setTldNamespaceAware(boolean tldNamespaceAware);
 
     /**

==================================================
TldConfig.java
index 0894feff5e..ed2ceaba9d 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -99,7 +99,6 @@ import org.apache.catalina.Wrapper;
 import org.apache.catalina.deploy.NamingResourcesImpl;
 import org.apache.catalina.loader.WebappLoader;
 import org.apache.catalina.session.StandardManager;
-import org.apache.catalina.startup.TldConfig;
 import org.apache.catalina.util.CharsetMapper;
 import org.apache.catalina.util.ContextName;
 import org.apache.catalina.util.ExtensionValidator;
@@ -706,11 +705,6 @@ public class StandardContext extends ContainerBase
      */
     private boolean webXmlNamespaceAware = Globals.STRICT_SERVLET_COMPLIANCE;
 
-    /**
-     * Attribute value used to turn on/off TLD processing
-     */
-    private boolean processTlds = true;
-
     /**
      * Attribute value used to turn on/off XML validation
      */
@@ -6338,10 +6332,6 @@ public class StandardContext extends ContainerBase
     protected void initInternal() throws LifecycleException {
         super.initInternal();
 
-        if (processTlds) {
-            this.addLifecycleListener(new TldConfig());
-        }
-
         // Register the naming resources
         if (namingResources != null) {
             namingResources.init();
@@ -6517,22 +6507,6 @@ public class StandardContext extends ContainerBase
         return tldValidation;
     }
 
-    /**
-     * Sets the process TLDs attribute.
-     *
-     * @param newProcessTlds The new value
-     */
-    public void setProcessTlds(boolean newProcessTlds) {
-        processTlds = newProcessTlds;
-    }
-
-    /**
-     * Returns the processTlds attribute value.
-     */
-    public boolean getProcessTlds() {
-        return processTlds;
-    }
-
     /**
      * Get the server.xml &lt;host&gt; attribute's xmlNamespaceAware.
      * @return true if namespace awarenes is enabled.

==================================================
TldRuleSet.java
deleted file mode 100644
index 4a76899030..0000000000
--- a/java/org/apache/catalina/startup/TldConfig.java
+++ /dev/null
@@ -1,548 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.catalina.startup;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.JarURLConnection;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.Set;
-
-import javax.servlet.ServletContext;
-import javax.servlet.descriptor.JspConfigDescriptor;
-import javax.servlet.descriptor.TaglibDescriptor;
-
-import org.apache.catalina.Context;
-import org.apache.catalina.Lifecycle;
-import org.apache.catalina.LifecycleEvent;
-import org.apache.catalina.LifecycleListener;
-import org.apache.catalina.core.StandardContext;
-import org.apache.tomcat.JarScanType;
-import org.apache.tomcat.JarScanner;
-import org.apache.tomcat.JarScannerCallback;
-import org.apache.tomcat.util.ExceptionUtils;
-import org.apache.tomcat.util.descriptor.DigesterFactory;
-import org.apache.tomcat.util.descriptor.XmlErrorHandler;
-import org.apache.tomcat.util.descriptor.web.ApplicationListener;
-import org.apache.tomcat.util.digester.Digester;
-import org.apache.tomcat.util.res.StringManager;
-import org.apache.tomcat.util.scan.Jar;
-import org.apache.tomcat.util.scan.JarFactory;
-import org.xml.sax.InputSource;
-import org.xml.sax.SAXException;
-
-
-/**
- * Startup event listener for a <b>Context</b> that configures application
- * listeners configured in any TLD files.
- *
- * @author Craig R. McClanahan
- * @author Jean-Francois Arcand
- * @author Costin Manolache
- */
-public final class TldConfig  implements LifecycleListener {
-
-    private static final String TLD_EXT = ".tld";
-    private static final String WEB_INF = "/WEB-INF/";
-    private static final String WEB_INF_CLASSES = "/WEB-INF/classes/";
-    private static final String WEB_INF_LIB = "/WEB-INF/lib/";
-
-
-    private static final org.apache.juli.logging.Log log=
-        org.apache.juli.logging.LogFactory.getLog( TldConfig.class );
-
-    /**
-     * The string resources for this package.
-     */
-    private static final StringManager sm =
-        StringManager.getManager(Constants.Package);
-
-    /**
-     * The <code>Digester</code>s available to process tld files.
-     */
-    private static final Digester[] tldDigesters = new Digester[4];
-
-    /**
-     * Create (if necessary) and return a Digester configured to process the
-     * tld.
-     */
-    private static Digester createTldDigester(boolean namespaceAware,
-            boolean validation) {
-
-        Digester digester = null;
-        if (!namespaceAware && !validation) {
-            if (tldDigesters[0] == null) {
-                tldDigesters[0] = DigesterFactory.newDigester(validation,
-                        namespaceAware, new TldRuleSet());
-                tldDigesters[0].getParser();
-            }
-            digester = tldDigesters[0];
-        } else if (!namespaceAware && validation) {
-            if (tldDigesters[1] == null) {
-                tldDigesters[1] = DigesterFactory.newDigester(validation,
-                        namespaceAware, new TldRuleSet());
-                tldDigesters[1].getParser();
-            }
-            digester = tldDigesters[1];
-        } else if (namespaceAware && !validation) {
-            if (tldDigesters[2] == null) {
-                tldDigesters[2] = DigesterFactory.newDigester(validation,
-                        namespaceAware, new TldRuleSet());
-                tldDigesters[2].getParser();
-            }
-            digester = tldDigesters[2];
-        } else {
-            if (tldDigesters[3] == null) {
-                tldDigesters[3] = DigesterFactory.newDigester(validation,
-                        namespaceAware, new TldRuleSet());
-                tldDigesters[3].getParser();
-            }
-            digester = tldDigesters[3];
-        }
-        return digester;
-    }
-
-
-    // ----------------------------------------------------- Instance Variables
-
-    /**
-     * The Context we are associated with.
-     */
-    private Context context = null;
-
-
-    /**
-     * The <code>Digester</code> we will use to process tag library
-     * descriptor files.
-     */
-    private Digester tldDigester = null;
-
-
-    /**
-     * Set of URIs discovered for the associated context. Used to enforce the
-     * correct processing priority. Only the TLD associated with the first
-     * instance of any URI will be processed.
-     */
-    private final Set<String> taglibUris = new HashSet<>();
-
-    private final Set<String> webxmlTaglibUris = new HashSet<>();
-
-    private final ArrayList<String> listeners = new ArrayList<>();
-
-    // --------------------------------------------------------- Public Methods
-
-    /**
-     * Adds a taglib URI to the list of known URIs.
-     */
-    public void addTaglibUri(String uri) {
-        taglibUris.add(uri);
-    }
-
-    /**
-     * Determines if the provided URI is a known taglib URI.
-     */
-    public boolean isKnownTaglibUri(String uri) {
-        return taglibUris.contains(uri);
-    }
-
-    /**
-     * Determines if the provided URI is a known taglib URI.
-     */
-    public boolean isKnownWebxmlTaglibUri(String uri) {
-        return webxmlTaglibUris.contains(uri);
-    }
-
-    public void addApplicationListener( String s ) {
-        if(log.isDebugEnabled())
-            log.debug( "Add tld listener " + s);
-        listeners.add(s);
-    }
-
-
-    public String[] getTldListeners() {
-        String result[]=new String[listeners.size()];
-        listeners.toArray(result);
-        return result;
-    }
-
-
-    /**
-     * Scan for and configure all tag library descriptors found in this
-     * web application.
-     *
-     * This supports a Tomcat-specific extension to the TLD search
-     * order defined in the JSP spec. It allows tag libraries packaged as JAR
-     * files to be shared by web applications by simply dropping them in a
-     * location that all web applications have access to (e.g.,
-     * <CATALINA_HOME>/lib). It also supports some of the weird and
-     * wonderful arrangements present when Tomcat gets embedded.
-     *
-     * The set of shared JARs to be scanned for TLDs is narrowed down by
-     * the <tt>noTldJars</tt> class variable, which contains the names of JARs
-     * that are known not to contain any TLDs.
-     */
-    public void execute() {
-        long t1=System.currentTimeMillis();
-
-        /*
-         * Priority order of URIs required by spec is:
-         * 1. J2EE platform taglibs - Tomcat doesn't provide these
-         * 2. web.xml entries
-         * 3. JARS in WEB-INF/lib & TLDs under WEB-INF (equal priority)
-         * 4. Additional entries from the container
-         *
-         * Keep processing order in sync with o.a.j.compiler.TldLocationsCache
-         */
-
-        // Stage 2 - web.xml entries
-        tldScanWebXml();
-
-        // Stage 3a - TLDs under WEB-INF (not lib or classes)
-        tldScanResourcePaths(WEB_INF, false);
-
-        // Stages 3b & 4
-        JarScanner jarScanner = context.getJarScanner();
-        jarScanner.scan(JarScanType.TLD, context.getServletContext(),
-                new TldJarScannerCallback());
-
-        // Now add all the listeners we found to the listeners for this context
-        String list[] = getTldListeners();
-
-        if( log.isDebugEnabled() )
-            log.debug(sm.getString("tldConfig.addListeners",
-                    Integer.valueOf(list.length)));
-
-        for( int i=0; list!=null && i<list.length; i++ ) {
-            context.addApplicationListener(
-                    new ApplicationListener(list[i], true));
-        }
-
-        long t2=System.currentTimeMillis();
-        if( context instanceof StandardContext ) {
-            ((StandardContext)context).setTldScanTime(t2-t1);
-        }
-
-    }
-
-    private class TldJarScannerCallback implements JarScannerCallback {
-
-        @Override
-        public void scan(JarURLConnection urlConn, boolean isWebapp)
-                throws IOException {
-            // Note: TLDs are processed the same way for application and
-            //       container provided JARs.
-            tldScanJar(urlConn);
-        }
-
-        @Override
-        public void scan(File file, boolean isWebapp) {
-            // Note: TLDs are processed the same way for application and
-            //       container provided JARs.
-            File metaInf = new File(file, "META-INF");
-            if (metaInf.isDirectory()) {
-                tldScanDir(metaInf);
-            }
-        }
-
-        @Override
-        public void scanWebInfClasses() throws IOException {
-            tldScanResourcePaths(WEB_INF_CLASSES, true);
-        }
-    }
-
-    // -------------------------------------------------------- Private Methods
-
-
-    /**
-     * Get the taglib entries from web.xml and add them to the map.
-     *
-     * This is not kept in sync with o.a.j.compiler.TldLocationsCache as this
-     * code needs to scan the TLDs listed in web.xml whereas Jasper only needs
-     * the URI to TLD mappings.
-     */
-    private void tldScanWebXml() {
-
-        if (log.isTraceEnabled()) {
-            log.trace(sm.getString("tldConfig.webxmlStart"));
-        }
-
-        JspConfigDescriptor jspConfigDescriptor = context.getJspConfigDescriptor();
-        if (jspConfigDescriptor == null) {
-            return;
-        }
-
-        Collection<TaglibDescriptor> descriptors = jspConfigDescriptor.getTaglibs();
-        for (TaglibDescriptor descriptor : descriptors) {
-            String resourcePath = descriptor.getTaglibLocation();
-            // Note: Whilst the Servlet 2.4 DTD implies that the location must
-            // be a context-relative path starting with '/', JSP.7.3.6.1 states
-            // explicitly how paths that do not start with '/' should be
-            // handled.
-            if (!resourcePath.startsWith("/")) {
-                resourcePath = WEB_INF + resourcePath;
-            }
-            if (taglibUris.contains(descriptor.getTaglibURI())) {
-                log.warn(sm.getString("tldConfig.webxmlSkip", resourcePath,
-                        descriptor.getTaglibURI()));
-            } else {
-                if (log.isTraceEnabled()) {
-                    log.trace(sm.getString("tldConfig.webxmlAdd", resourcePath,
-                            descriptor.getTaglibURI()));
-                }
-                InputStream stream = null;
-                try {
-                    stream = context.getServletContext().getResourceAsStream(
-                            resourcePath);
-                    XmlErrorHandler handler = tldScanStream(stream);
-                    handler.logFindings(log, resourcePath);
-                    taglibUris.add(descriptor.getTaglibURI());
-                    webxmlTaglibUris.add(descriptor.getTaglibURI());
-                } catch (IOException ioe) {
-                    log.warn(sm.getString("tldConfig.webxmlFail", resourcePath,
-                            descriptor.getTaglibURI()), ioe);
-                } finally {
-                    if (stream != null) {
-                        try {
-                            stream.close();
-                        } catch (Throwable t) {
-                            ExceptionUtils.handleThrowable(t);
-                        }
-                    }
-                }
-            }
-        }
-    }
-
-    /*
-     * Scans the web application's sub-directory identified by startPath,
-     * along with its sub-directories, for TLDs.
-     *
-     * Initially, rootPath equals /WEB-INF/. The /WEB-INF/classes and
-     * /WEB-INF/lib sub-directories are excluded from the search, as per the
-     * JSP 2.0 spec unless the JarScanner is configured to treat
-     * /WEB-INF/classes/ as an exploded JAR.
-     *
-     * Keep in sync with o.a.j.comiler.TldLocationsCache
-     */
-    private void tldScanResourcePaths(String startPath, boolean webInfAsJar) {
-
-        if (log.isTraceEnabled()) {
-            log.trace(sm.getString("tldConfig.webinfScan", startPath));
-        }
-
-        ServletContext ctxt = context.getServletContext();
-
-        Set<String> dirList = ctxt.getResourcePaths(startPath);
-        if (dirList != null) {
-            Iterator<String> it = dirList.iterator();
-            while (it.hasNext()) {
-                String path = it.next();
-                if (!path.endsWith(TLD_EXT)
-                        && (path.startsWith(WEB_INF_LIB)
-                                || path.startsWith("/WEB-INF/classes/")
-                                   && !webInfAsJar)) {
-                    continue;
-                }
-                if (path.endsWith(TLD_EXT)) {
-                    if (path.startsWith("/WEB-INF/tags/") &&
-                            !path.endsWith("implicit.tld")) {
-                        continue;
-                    }
-                    InputStream stream = ctxt.getResourceAsStream(path);
-                    try {
-                        XmlErrorHandler handler = tldScanStream(stream);
-                        handler.logFindings(log, path);
-                    } catch (IOException ioe) {
-                        log.warn(sm.getString("tldConfig.webinfFail", path),
-                                ioe);
-                    } finally {
-                        if (stream != null) {
-                            try {
-                                stream.close();
-                            } catch (Throwable t) {
-                                ExceptionUtils.handleThrowable(t);
-                            }
-                        }
-                    }
-                } else {
-                    tldScanResourcePaths(path, false);
-                }
-            }
-        }
-    }
-
-    /*
-     * Scans the directory identified by startPath, along with its
-     * sub-directories, for TLDs.
-     *
-     * Keep in sync with o.a.j.comiler.TldLocationsCache
-     */
-    private void tldScanDir(File start) {
-
-        if (log.isTraceEnabled()) {
-            log.trace(sm.getString("tldConfig.dirScan", start.getAbsolutePath()));
-        }
-
-        File[] fileList = start.listFiles();
-        if (fileList != null) {
-            for (int i = 0; i < fileList.length; i++) {
-                // Scan recursively
-                if (fileList[i].isDirectory()) {
-                    tldScanDir(fileList[i]);
-                } else if (fileList[i].getAbsolutePath().endsWith(TLD_EXT)) {
-                    InputStream stream = null;
-                    try {
-                        stream = new FileInputStream(fileList[i]);
-                        XmlErrorHandler handler = tldScanStream(stream);
-                        handler.logFindings(log, fileList[i].getAbsolutePath());
-                    } catch (IOException ioe) {
-                        log.warn(sm.getString("tldConfig.dirFail",
-                                fileList[i].getAbsolutePath()),
-                                ioe);
-                    } finally {
-                        if (stream != null) {
-                            try {
-                                stream.close();
-                            } catch (Throwable t) {
-                                ExceptionUtils.handleThrowable(t);
-                            }
-                        }
-                    }
-                }
-            }
-        }
-    }
-
-    /*
-     * Scans the given JarURLConnection for TLD files located in META-INF
-     * (or a sub-directory of it).
-     *
-     * @param jarConn The JarURLConnection to the JAR file to scan
-     *
-     * Keep in sync with o.a.j.comiler.TldLocationsCache
-     */
-    private void tldScanJar(JarURLConnection jarConn) {
-
-        Jar jar = null;
-        InputStream is;
-
-        try {
-            jar = JarFactory.newInstance(jarConn.getURL());
-
-            jar.nextEntry();
-            String entryName = jar.getEntryName();
-            while (entryName != null) {
-                if (entryName.startsWith("META-INF/") &&
-                        entryName.endsWith(".tld")) {
-                    is = null;
-                    try {
-                        is = jar.getEntryInputStream();
-                        XmlErrorHandler handler = tldScanStream(is);
-                        handler.logFindings(log, jarConn.getURL() + entryName);
-                    } finally {
-                        if (is != null) {
-                            try {
-                                is.close();
-                            } catch (IOException ioe) {
-                                // Ignore
-                            }
-                        }
-                    }
-                }
-                jar.nextEntry();
-                entryName = jar.getEntryName();
-            }
-        } catch (IOException ioe) {
-            log.warn(sm.getString("tldConfig.jarFail", jarConn.getURL()), ioe);
-        } finally {
-            if (jar != null) {
-                jar.close();
-            }
-        }
-    }
-
-
-    /*
-     * Scan the TLD contents in the specified input stream, and register
-     * any application event listeners found there.  <b>NOTE</b> - This
-     * method ensure that the InputStream is correctly closed.
-     *
-     * @param resourceStream InputStream containing a tag library descriptor
-     *
-     * @throws IOException  If the file cannot be read
-     */
-    private XmlErrorHandler tldScanStream(InputStream resourceStream)
-            throws IOException {
-
-        InputSource source = new InputSource(resourceStream);
-
-        XmlErrorHandler result = new XmlErrorHandler();
-
-        synchronized (tldDigester) {
-            try {
-                tldDigester.setErrorHandler(result);
-                tldDigester.push(this);
-                tldDigester.parse(source);
-            } catch (SAXException s) {
-                // Hack - makes exception handling simpler
-                throw new IOException(s);
-            } finally {
-                tldDigester.reset();
-            }
-            return result;
-        }
-    }
-
-    @Override
-    public void lifecycleEvent(LifecycleEvent event) {
-        // Identify the context we are associated with
-        try {
-            context = (Context) event.getLifecycle();
-        } catch (ClassCastException e) {
-            log.error(sm.getString("tldConfig.cce", event.getLifecycle()), e);
-            return;
-        }
-
-        if (event.getType().equals(Lifecycle.AFTER_INIT_EVENT)) {
-            init();
-        } else if (event.getType().equals(Lifecycle.CONFIGURE_START_EVENT)) {
-            try {
-                execute();
-            } catch (Exception e) {
-                log.error(sm.getString(
-                        "tldConfig.execute", context.getName()), e);
-            }
-        } else if (event.getType().equals(Lifecycle.STOP_EVENT)) {
-            taglibUris.clear();
-            webxmlTaglibUris.clear();
-            listeners.clear();
-        }
-    }
-
-    private void init() {
-        if (tldDigester == null){
-            tldDigester = createTldDigester(context.getTldNamespaceAware(),
-                    context.getTldValidation());
-        }
-    }
-
-}

==================================================
JasperInitializer.java
index 314b1ef2d8..37d8616ff4 100644
--- a/java/org/apache/jasper/resources/LocalStrings.properties
+++ b/java/org/apache/jasper/resources/LocalStrings.properties
@@ -398,3 +398,5 @@ jsp.tldCache.noTldSummary=At least one JAR was scanned for TLDs yet contained no
 jsp.error.el_interpreter_class.instantiation=Failed to load or instantiate ELInterpreter class [{0}]
 
 org.apache.jasper.servlet.JasperInitializer.onStartup=Initializing Jasper for context [{0}]
+org.apache.jasper.servlet.TldScanner.webxmlSkip=Skipping load of TLD for URI {1} from resource path {0} as it has already been defined in <jsp-config>
+org.apache.jasper.servlet.TldScanner.webxmlAdd=Loading TLD for URI {1} from resource path {0}

==================================================
TldScanner.java
index bab4eac579..f55cf4d421 100644
--- a/java/org/apache/jasper/servlet/JasperInitializer.java
+++ b/java/org/apache/jasper/servlet/JasperInitializer.java
@@ -16,6 +16,7 @@
  */
 package org.apache.jasper.servlet;
 
+import java.io.IOException;
 import java.util.Set;
 
 import javax.servlet.ServletContainerInitializer;
@@ -25,11 +26,17 @@ import javax.servlet.ServletException;
 import org.apache.jasper.compiler.Localizer;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
+import org.xml.sax.SAXException;
 
 /**
  * Initializer for the Jasper JSP Engine.
  */
 public class JasperInitializer implements ServletContainerInitializer {
+    /**
+     * Name of ServletContext initParam that determines if descriptor XML
+     * should be validated.
+     */
+    public static final String VALIDATE = "org.apache.jasper.validateDescriptors";
     private static final String MSG = "org.apache.jasper.servlet.JasperInitializer";
     private static final Log LOG = LogFactory.getLog(JasperInitializer.class);
 
@@ -38,5 +45,20 @@ public class JasperInitializer implements ServletContainerInitializer {
         if (LOG.isDebugEnabled()) {
             LOG.debug(Localizer.getMessage(MSG + ".onStartup", context.getServletContextName()));
         }
+
+        boolean validate = Boolean.valueOf(context.getInitParameter(VALIDATE));
+
+        // scan the application for TLDs
+        TldScanner scanner = new TldScanner(context, true, validate);
+        try {
+            scanner.scan();
+        } catch (IOException | SAXException e) {
+            throw new ServletException(e);
+        }
+
+        // add any listeners defined in TLDs
+        for (String listener : scanner.getListeners()) {
+            context.addListener(listener);
+        }
     }
 }

==================================================
TestStandardContext.java
new file mode 100644
index 0000000000..154183e314
--- /dev/null
+++ b/java/org/apache/jasper/servlet/TldScanner.java
@@ -0,0 +1,305 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.jasper.servlet;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.JarURLConnection;
+import java.net.URL;
+import java.nio.file.FileVisitResult;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.SimpleFileVisitor;
+import java.nio.file.attribute.BasicFileAttributes;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import javax.servlet.ServletContext;
+import javax.servlet.descriptor.JspConfigDescriptor;
+import javax.servlet.descriptor.TaglibDescriptor;
+
+import org.apache.jasper.compiler.JarScannerFactory;
+import org.apache.jasper.compiler.Localizer;
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.JarScanType;
+import org.apache.tomcat.JarScanner;
+import org.apache.tomcat.JarScannerCallback;
+import org.apache.tomcat.util.descriptor.tld.TaglibXml;
+import org.apache.tomcat.util.descriptor.tld.TldParser;
+import org.apache.tomcat.util.scan.Jar;
+import org.apache.tomcat.util.scan.JarFactory;
+import org.xml.sax.InputSource;
+import org.xml.sax.SAXException;
+
+/**
+ * Scans for and loads Tag Library Descriptors contained in a web application.
+ */
+public class TldScanner {
+    private static final Log log = LogFactory.getLog(TldScanner.class);
+    private static final String MSG = "org.apache.jasper.servlet.TldScanner";
+    private static final String TLD_EXT = ".tld";
+    private static final String WEB_INF = "/WEB-INF/";
+    private final ServletContext context;
+    private final TldParser tldParser;
+    private final Map<String, TaglibXml> taglibMap = new HashMap<>();
+    private final List<String> listeners = new ArrayList<>();
+
+    /**
+     * Initialize with the application's ServletContext.
+     *
+     * @param context the application's servletContext
+     */
+    public TldScanner(ServletContext context,
+                      boolean namespaceAware,
+                      boolean validation) {
+        this.context = context;
+        this.tldParser = new TldParser(namespaceAware, validation);
+    }
+
+    /**
+     * Scan for TLDs in all places defined by the specification:
+     * <ol>
+     * <li>Tag libraries defined by the platform</li>
+     * <li>Entries from &lt;jsp-config&gt; in web.xml</li>
+     * <li>A resources under /WEB-INF</li>
+     * <li>In jar files from /WEB-INF/lib</li>
+     * <li>Additional entries from the container</li>
+     * </ol>
+     *
+     * @return the taglib map build by this scan
+     * @throws IOException  if there was a problem scanning for or loading a TLD
+     * @throws SAXException if there was a problem parsing a TLD
+     */
+    public Map<String, TaglibXml> scan() throws IOException, SAXException {
+        scanPlatform();
+        scanJspConfig();
+        scanResourcePaths(WEB_INF);
+        scanJars();
+        return taglibMap;
+    }
+
+    /**
+     * Returns the taglib map built by this scanner.
+     *
+     * @return the taglib map
+     */
+    public Map<String, TaglibXml> getTaglibMap() {
+        return taglibMap;
+    }
+
+    /**
+     * Returns a list of all listeners declared by scanned TLDs.
+     *
+     * @return a list of listener class names
+     */
+    public List<String> getListeners() {
+        return listeners;
+    }
+
+    /**
+     * Scan for TLDs required by the platform specification.
+     */
+    protected void scanPlatform() {
+    }
+
+    /**
+     * Scan for TLDs defined in &lt;jsp-config&gt;.
+     */
+    protected void scanJspConfig() throws IOException, SAXException {
+        JspConfigDescriptor jspConfigDescriptor = context.getJspConfigDescriptor();
+        if (jspConfigDescriptor == null) {
+            return;
+        }
+
+        Collection<TaglibDescriptor> descriptors = jspConfigDescriptor.getTaglibs();
+        for (TaglibDescriptor descriptor : descriptors) {
+            String taglibURI = descriptor.getTaglibURI();
+            String resourcePath = descriptor.getTaglibLocation();
+            // Note: Whilst the Servlet 2.4 DTD implies that the location must
+            // be a context-relative path starting with '/', JSP.7.3.6.1 states
+            // explicitly how paths that do not start with '/' should be
+            // handled.
+            if (!resourcePath.startsWith("/")) {
+                resourcePath = WEB_INF + resourcePath;
+            }
+            if (taglibMap.containsKey(taglibURI)) {
+                log.warn(Localizer.getMessage(MSG + ".webxmlSkip",
+                        resourcePath,
+                        taglibURI));
+                continue;
+            }
+
+            if (log.isTraceEnabled()) {
+                log.trace(Localizer.getMessage(MSG + ".webxmlAdd",
+                        resourcePath,
+                        taglibURI));
+            }
+
+            URL url = context.getResource(resourcePath);
+            if (resourcePath.endsWith(".jar")) {
+                // if the path points to a jar file, the TLD is presumed to be
+                // inside at META-INF/taglib.tld
+                url = new URL ("jar:" +
+                        url.toExternalForm() +
+                        "!/META-INF/taglib.tld");
+            }
+
+            TaglibXml tld = tldParser.parse(url);
+            taglibMap.put(taglibURI, tld);
+        }
+    }
+
+    /**
+     * Scan web application resources for TLDs, recursively.
+     *
+     * @param startPath the directory resource to scan
+     * @throws IOException  if there was a problem scanning for or loading a TLD
+     * @throws SAXException if there was a problem parsing a TLD
+     */
+    protected void scanResourcePaths(String startPath)
+            throws IOException, SAXException {
+
+        Set<String> dirList = context.getResourcePaths(startPath);
+        if (dirList != null) {
+            for (String path : dirList) {
+                if (path.endsWith("/")) {
+                    scanResourcePaths(path);
+                } else if (path.startsWith("/WEB-INF/tags/")) {
+                    // JSP 7.3.1: in /WEB-INF/tags only consider implicit.tld
+                    if (path.endsWith("/implicit.tld")) {
+                        parseTld(path);
+                    }
+                } else if (path.endsWith(TLD_EXT)) {
+                    parseTld(path);
+                }
+            }
+        }
+    }
+
+    /**
+     * Scan for TLDs in JARs in /WEB-INF/lib.
+     */
+    public void scanJars() {
+        JarScanner scanner = JarScannerFactory.getJarScanner(context);
+        TldScannerCallback callback = new TldScannerCallback();
+        scanner.scan(JarScanType.TLD, context, callback);
+        if (!callback.tldFound) {
+            log.info(Localizer.getMessage("jsp.tldCache.noTldSummary"));
+        }
+    }
+
+    private void parseTld(String resourcePath) throws IOException, SAXException {
+        parseTld(context.getResource(resourcePath));
+    }
+
+    private void parseTld(URL url) throws IOException, SAXException {
+        TaglibXml tld = tldParser.parse(url);
+        registerTld(tld);
+    }
+
+    private void registerTld(TaglibXml tld) {
+        String uri = tld.getUri();
+        if (uri != null) {
+            if (!taglibMap.containsKey(uri)) {
+                taglibMap.put(uri, tld);
+            }
+        }
+        if (tld.getListeners() != null) {
+            listeners.addAll(tld.getListeners());
+        }
+    }
+
+    private class TldScannerCallback implements JarScannerCallback {
+        private boolean tldFound = false;
+
+        @Override
+        public void scan(JarURLConnection urlConn, boolean isWebapp) throws IOException {
+            boolean found = false;
+            Jar jar = JarFactory.newInstance(urlConn.getURL());
+            StringBuilder base = new StringBuilder(256);
+            base.append("jar:").append(urlConn.getURL()).append("!/");
+            int baseLength = base.length();
+            try {
+                jar.nextEntry();
+                for (String entryName = jar.getEntryName();
+                     entryName != null;
+                     jar.nextEntry(), entryName = jar.getEntryName()) {
+                    if (!(entryName.startsWith("META-INF/") &&
+                            entryName.endsWith(TLD_EXT))) {
+                        continue;
+                    }
+                    found = true;
+                    String location = base.append(entryName).toString();
+                    base.setLength(baseLength);
+                    try (InputStream is = jar.getEntryInputStream()) {
+                        InputSource source = new InputSource(is);
+                        source.setSystemId(location);
+                        TaglibXml tld = tldParser.parse(source);
+                        registerTld(tld);
+                    } catch (SAXException e) {
+                        throw new IOException(e);
+                    }
+                }
+            } finally {
+                jar.close();
+            }
+            if (found) {
+                tldFound = true;
+            } else {
+                if (log.isDebugEnabled()) {
+                    log.debug(Localizer.getMessage("jsp.tldCache.noTldInJar",
+                            urlConn.getJarFileURL().toString()));
+                }
+            }
+        }
+
+        @Override
+        public void scan(File file, boolean isWebapp) throws IOException {
+            File metaInf = new File(file, "META-INF");
+            if (!metaInf.isDirectory()) {
+                return;
+            }
+            Files.walkFileTree(metaInf.toPath(), new SimpleFileVisitor<Path>() {
+                @Override
+                public FileVisitResult visitFile(Path file,
+                                                 BasicFileAttributes attrs)
+                        throws IOException {
+                    if (file.endsWith(TLD_EXT)) {
+                        try {
+                            parseTld(file.toUri().toURL());
+                            tldFound = true;
+                        } catch (SAXException e) {
+                            throw new IOException(e);
+                        }
+                    }
+                    return FileVisitResult.CONTINUE;
+                }
+            });
+        }
+
+        @Override
+        public void scanWebInfClasses() throws IOException {
+            // this is now handled when WEB-INF is scanned for resources
+        }
+    }
+}

==================================================
TestTldScanner.java
index 2b27b921e5..eb94d9a85a 100644
--- a/test/org/apache/catalina/core/TestStandardContext.java
+++ b/test/org/apache/catalina/core/TestStandardContext.java
@@ -64,6 +64,7 @@ import org.apache.catalina.startup.TesterMapRealm;
 import org.apache.catalina.startup.TesterServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.jasper.servlet.JasperInitializer;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.descriptor.web.FilterDef;
 import org.apache.tomcat.util.descriptor.web.FilterMap;
@@ -865,6 +866,7 @@ public class TestStandardContext extends TomcatBaseTest {
 
         File docBase = new File("test/webapp-3.0");
         Context ctx = tomcat.addContext("", docBase.getAbsolutePath());
+        ctx.addServletContainerInitializer(new JasperInitializer(), null);
 
         // Start the context
         tomcat.start();

==================================================
