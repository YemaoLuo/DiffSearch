20d13486635bff315d892b8859dc1b26bc53d774
==================================================
Start to align the request finish code
==================================================
Mark Emlyn
==================================================
Mon Sep 5 12:09:28 2011 +0000
==================================================
Http11AprProcessor.java
Start to align the request finish code

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1165253 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11NioProcessor.java
index 3b19181822..fa6a1f1cc4 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -290,15 +290,20 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
             }
 
             // Finish the handling of the request
-            if (!comet && !isAsync()) {
-                // If we know we are closing the connection, don't drain input.
-                // This way uploading a 100GB file doesn't tie up the thread 
-                // if the servlet has rejected it.
-                if(error)
+            rp.setStage(org.apache.coyote.Constants.STAGE_ENDINPUT);
+
+            if (!isAsync() && !comet) {
+                if (error) {
+                    // If we know we are closing the connection, don't drain
+                    // input. This way uploading a 100GB file doesn't tie up the
+                    // thread if the servlet has rejected it.
                     inputBuffer.setSwallowInput(false);
+                }
                 endRequest();
             }
 
+            rp.setStage(org.apache.coyote.Constants.STAGE_ENDOUTPUT);
+
             // If there was an error, make sure the request is counted as
             // and error, and update the statistics counter
             if (error) {
@@ -336,7 +341,6 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
             }
             
             rp.setStage(org.apache.coyote.Constants.STAGE_KEEPALIVE);
-
         }
 
         rp.setStage(org.apache.coyote.Constants.STAGE_ENDED);

==================================================
Http11Processor.java
index afdddfb60c..6d68bdd2ca 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -351,15 +351,20 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
             }
 
             // Finish the handling of the request
-            if (!comet && !isAsync()) {
-                // If we know we are closing the connection, don't drain input.
-                // This way uploading a 100GB file doesn't tie up the thread 
-                // if the servlet has rejected it.
-                if(error)
+            rp.setStage(org.apache.coyote.Constants.STAGE_ENDINPUT);
+
+            if (!isAsync() && !comet) {
+                if(error) {
+                    // If we know we are closing the connection, don't drain
+                    // input. This way uploading a 100GB file doesn't tie up the
+                    // thread if the servlet has rejected it.
                     inputBuffer.setSwallowInput(false);
+                }
                 endRequest();
             }
 
+            rp.setStage(org.apache.coyote.Constants.STAGE_ENDOUTPUT);
+
             // If there was an error, make sure the request is counted as
             // and error, and update the statistics counter
             if (error) {
@@ -385,10 +390,8 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
                 break;
             }
 
-
             rp.setStage(org.apache.coyote.Constants.STAGE_KEEPALIVE);
-
-        }//while
+        }
 
         rp.setStage(org.apache.coyote.Constants.STAGE_ENDED);
         if (error || endpoint.isPaused()) {

==================================================
