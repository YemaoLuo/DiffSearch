51ae3b5ec69564a6009c11749a046042324803e1
==================================================
Better comments
==================================================
Mark Thomas
==================================================
Tue Jan 27 19:39:42 2015 +0000
==================================================
StandardContext.java
Better comments

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1655133 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractArchiveResource.java
index 08eb41851d..3b4b75d74e 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -5216,7 +5216,11 @@ public class StandardContext extends ContainerBase
             broadcaster.sendNotification(notification);
         }
 
-        // Trigger clean-up of the resources
+        // The WebResources implementation caches references to JAR files. On
+        // some platforms these references may lock the JAR files. The
+        // WebResources implementaion cleans-up unused JAR file references every
+        // run of background processing but since web application start is
+        // likely to have read from lots of JARs, trigger a clean-up now.
         getResources().backgroundProcess();
 
         // Reinitializing if something went wrong

==================================================
AbstractArchiveResourceSet.java
index f84c54058c..d17f60cec6 100644
--- a/java/org/apache/catalina/webresources/AbstractArchiveResource.java
+++ b/java/org/apache/catalina/webresources/AbstractArchiveResource.java
@@ -214,6 +214,12 @@ public abstract class AbstractArchiveResource extends AbstractResource {
 
     protected abstract JarInputStreamWrapper getJarInputStreamWrapper();
 
+    /**
+     * This wrapper assumes that the InputStream was created from a JarFile
+     * obtained from a call to getArchiveResourceSet().getJarFile(). If this is
+     * not the case then the usage counting in AbstractArchiveResourceSet will
+     * break and the JarFile may be unexpectedly closed.
+     */
     protected class JarInputStreamWrapper extends InputStream {
 
         private final JarEntry jarEntry;
@@ -258,8 +264,6 @@ public abstract class AbstractArchiveResource extends AbstractResource {
 
         @Override
         public void close() throws IOException {
-            // Closing the JarFile releases the file lock on the JAR and also
-            // closes all input streams created from the JarFile.
             archiveResourceSet.closeJarFile();
         }
 

==================================================
AbstractFileResourceSet.java
index 99fcb3a3dc..61022eaeb5 100644
--- a/java/org/apache/catalina/webresources/AbstractArchiveResourceSet.java
+++ b/java/org/apache/catalina/webresources/AbstractArchiveResourceSet.java
@@ -42,7 +42,6 @@ public abstract class AbstractArchiveResourceSet extends AbstractResourceSet {
     private JarFile archive = null;
     private final Object archiveLock = new Object();
     private long archiveUseCount = 0;
-    private long archiveLastUsed = 0;
 
 
     protected final void setManifest(Manifest manifest) {
@@ -284,7 +283,6 @@ public abstract class AbstractArchiveResourceSet extends AbstractResourceSet {
                 archive = new JarFile(getBase());
             }
             archiveUseCount++;
-            archiveLastUsed = System.currentTimeMillis();
             return archive;
         }
     }

==================================================
AbstractResourceSet.java
index c8090abfe1..b6e7f580d2 100644
--- a/java/org/apache/catalina/webresources/AbstractFileResourceSet.java
+++ b/java/org/apache/catalina/webresources/AbstractFileResourceSet.java
@@ -126,8 +126,19 @@ public abstract class AbstractFileResourceSet extends AbstractResourceSet {
         }
     }
 
+    /**
+     * {@inheritDoc}
+     * <p>
+     * This is a NO-OP by default for File based resource sets.
+     */
+    @Override
+    public void backgroundProcess() {
+        // NO-OP
+    }
+
 
     //-------------------------------------------------------- Lifecycle methods
+
     @Override
     protected void initInternal() throws LifecycleException {
         fileBase = new File(getBase(), getInternalPath());

==================================================
EmptyResourceSet.java
index 901555a5f0..9b8bcfce4a 100644
--- a/java/org/apache/catalina/webresources/AbstractResourceSet.java
+++ b/java/org/apache/catalina/webresources/AbstractResourceSet.java
@@ -111,11 +111,6 @@ public abstract class AbstractResourceSet extends LifecycleBase
         this.staticOnly = staticOnly;
     }
 
-    @Override
-    public void backgroundProcess() {
-        // NO-OP
-    }
-
 
     //-------------------------------------------------------- Lifecycle methods
     @Override

==================================================
