80a7aff3e20045f428b33727a5277e62da6ba4d2
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=52259
==================================================
Mark Emlyn
==================================================
Tue Nov 29 19:48:04 2011 +0000
==================================================
ContainerBase.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=52259
Regression caused by bug 46264. Prevent deadlock if no Realm is
configured.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1208046 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StandardContext.java
index cf628cb5b1..a5ff61cb62 100644
--- a/java/org/apache/catalina/core/ContainerBase.java
+++ b/java/org/apache/catalina/core/ContainerBase.java
@@ -33,6 +33,9 @@ import java.util.concurrent.Future;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
 
 import javax.management.ObjectName;
 import javax.naming.directory.DirContext;
@@ -234,9 +237,14 @@ public abstract class ContainerBase extends LifecycleMBeanBase
     /**
      * The Realm with which this Container is associated.
      */
-    protected Realm realm = null;
+    private volatile Realm realm = null;
 
 
+    /**
+     * Lock used to control access to the Realm.
+     */
+    private ReadWriteLock realmLock = new ReentrantReadWriteLock();
+
     /**
      * The resources DirContext object with which this Container is associated.
      */
@@ -695,11 +703,17 @@ public abstract class ContainerBase extends LifecycleMBeanBase
     @Override
     public Realm getRealm() {
 
-        if (realm != null)
-            return (realm);
-        if (parent != null)
-            return (parent.getRealm());
-        return (null);
+        Lock l = realmLock.readLock();
+        try {
+            l.lock();
+            if (realm != null)
+                return (realm);
+            if (parent != null)
+                return (parent.getRealm());
+            return (null);
+        } finally {
+            l.unlock();
+        }
 
     }
 
@@ -710,38 +724,46 @@ public abstract class ContainerBase extends LifecycleMBeanBase
      * @param realm The newly associated Realm
      */
     @Override
-    public synchronized void setRealm(Realm realm) {
+    public void setRealm(Realm realm) {
 
-        // Change components if necessary
-        Realm oldRealm = this.realm;
-        if (oldRealm == realm)
-            return;
-        this.realm = realm;
+        Lock l = realmLock.writeLock();
 
-        // Stop the old component if necessary
-        if (getState().isAvailable() && (oldRealm != null) &&
-            (oldRealm instanceof Lifecycle)) {
-            try {
-                ((Lifecycle) oldRealm).stop();
-            } catch (LifecycleException e) {
-                log.error("ContainerBase.setRealm: stop: ", e);
+        try {
+            l.lock();
+
+            // Change components if necessary
+            Realm oldRealm = realm;
+            if (oldRealm == realm)
+                return;
+            this.realm = realm;
+
+            // Stop the old component if necessary
+            if (getState().isAvailable() && (oldRealm != null) &&
+                (oldRealm instanceof Lifecycle)) {
+                try {
+                    ((Lifecycle) oldRealm).stop();
+                } catch (LifecycleException e) {
+                    log.error("ContainerBase.setRealm: stop: ", e);
+                }
             }
-        }
 
-        // Start the new component if necessary
-        if (realm != null)
-            realm.setContainer(this);
-        if (getState().isAvailable() && (realm != null) &&
-            (realm instanceof Lifecycle)) {
-            try {
-                ((Lifecycle) realm).start();
-            } catch (LifecycleException e) {
-                log.error("ContainerBase.setRealm: start: ", e);
+            // Start the new component if necessary
+            if (realm != null)
+                realm.setContainer(this);
+            if (getState().isAvailable() && (realm != null) &&
+                (realm instanceof Lifecycle)) {
+                try {
+                    ((Lifecycle) realm).start();
+                } catch (LifecycleException e) {
+                    log.error("ContainerBase.setRealm: start: ", e);
+                }
             }
-        }
 
-        // Report this property change to interested listeners
-        support.firePropertyChange("realm", oldRealm, this.realm);
+            // Report this property change to interested listeners
+            support.firePropertyChange("realm", oldRealm, this.realm);
+        } finally {
+            l.unlock();
+        }
 
     }
 
@@ -1060,6 +1082,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
             ((Lifecycle) manager).start();
         if ((cluster != null) && (cluster instanceof Lifecycle))
             ((Lifecycle) cluster).start();
+        Realm realm = getRealm();
         if ((realm != null) && (realm instanceof Lifecycle))
             ((Lifecycle) realm).start();
         if ((resources != null) && (resources instanceof Lifecycle))
@@ -1146,6 +1169,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
         if ((resources != null) && (resources instanceof Lifecycle)) {
             ((Lifecycle) resources).stop();
         }
+        Realm realm = getRealm();
         if ((realm != null) && (realm instanceof Lifecycle)) {
             ((Lifecycle) realm).stop();
         }
@@ -1297,6 +1321,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
                 log.warn(sm.getString("containerBase.backgroundProcess.manager", manager), e);
             }
         }
+        Realm realm = getRealm();
         if (realm != null) {
             try {
                 realm.backgroundProcess();

==================================================
