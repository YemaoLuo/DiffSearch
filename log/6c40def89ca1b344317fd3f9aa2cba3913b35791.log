6c40def89ca1b344317fd3f9aa2cba3913b35791
==================================================
Spelling fixes. Patch provided by Josh Soref.
==================================================
Violeta Georgieva
==================================================
Tue Jan 10 15:26:09 2017 +0000
==================================================
ConnectionPool.java
index 39df2a5c60..3f4043c682 100644
--- a/modules/jdbc-pool/doc/jdbc-pool.xml
+++ b/modules/jdbc-pool/doc/jdbc-pool.xml
@@ -407,7 +407,7 @@
       <p>(String) A semicolon separated list of classnames extending
          <code>org.apache.tomcat.jdbc.pool.JdbcInterceptor</code> class.
          See <a href="#Configuring_JDBC_interceptors">Configuring JDBC interceptors</a>
-         below for more detailed description of syntaz and examples.
+         below for more detailed description of syntax and examples.
       </p>
       <p>
          These interceptors will be inserted as an interceptor into the chain
@@ -564,7 +564,7 @@
     </p>
     <p>Further interceptors will be added to the core of the pool as the need arises. Contributions are always welcome!</p>
     <p>Interceptors are of course not limited to just <code>java.sql.Connection</code> but can be used to wrap any
-    of the results from a method invokation as well. You could build query performance analyzer that provides JMX notifications when a
+    of the results from a method invocation as well. You could build query performance analyzer that provides JMX notifications when a
     query is running longer than the expected time.</p>
   </subsection>
   <subsection name="Configuring JDBC interceptors">
@@ -882,7 +882,7 @@
 <source><![CDATA[  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable]]></source>
     <p>
        method to get invoked. The <code>Method method</code> is the actual method invoked, and <code>Object[] args</code> are the arguments.
-       To look at a very simple example, where we demonstrate how to make the invokation to <code>java.sql.Connection.close()</code> a noop
+       To look at a very simple example, where we demonstrate how to make the invocation to <code>java.sql.Connection.close()</code> a noop
        if the connection has been closed
     </p>
 <source><![CDATA[  if (CLOSE_VAL==method.getName()) {

==================================================
DataSourceFactory.java
index 88bbfb5367..856501da42 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -161,7 +161,7 @@ public class ConnectionPool {
      * If a connection is not retrieved, the Future must be cancelled in order for the connection to be returned
      * to the pool.
      * @return a Future containing a reference to the connection or the future connection
-     * @throws SQLException Cannot use asyncronous connect
+     * @throws SQLException Cannot use asynchronous connect
      */
     public Future<Connection> getConnectionAsync() throws SQLException {
         try {
@@ -545,7 +545,7 @@ public class ConnectionPool {
     /**
      * thread safe way to abandon a connection
      * signals a connection to be abandoned.
-     * this will disconnect the connection, and log the stack trace if logAbanded=true
+     * this will disconnect the connection, and log the stack trace if logAbandoned=true
      * @param con PooledConnection
      */
     protected void abandon(PooledConnection con) {

==================================================
JdbcInterceptor.java
index 480ad302b9..945436c511 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java
@@ -562,7 +562,7 @@ public class DataSourceFactory implements ObjectFactory {
             if (context!=null) {
                 jndiDS = context.lookup(poolProperties.getDataSourceJNDI());
             } else {
-                log.warn("dataSourceJNDI property is configued, but local JNDI context is null.");
+                log.warn("dataSourceJNDI property is configured, but local JNDI context is null.");
             }
         } catch (NamingException e) {
             log.debug("The name \""+poolProperties.getDataSourceJNDI()+"\" cannot be found in the local context.");

==================================================
PoolConfiguration.java
index c361735be7..ff9f621ec1 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/JdbcInterceptor.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/JdbcInterceptor.java
@@ -92,7 +92,7 @@ public abstract class JdbcInterceptor implements InvocationHandler {
     private boolean useEquals = true;
 
     /**
-     * Public constructor for instantation through reflection
+     * Public constructor for instantiation through reflection
      */
     public JdbcInterceptor() {
         // NOOP

==================================================
AbstractQueryReport.java
index 374f22cfa7..b8168fca0e 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java
@@ -752,9 +752,9 @@ public interface PoolConfiguration {
     public void setSuspectTimeout(int seconds);
 
     /**
-     * Returns the time in seconds to pass before a connection is marked an abanoned suspect.
+     * Returns the time in seconds to pass before a connection is marked an abandoned suspect.
      * Any value lesser than or equal to 0 means the check is disabled.
-     * @return Returns the time in seconds to pass before a connection is marked an abanoned suspect.
+     * @return Returns the time in seconds to pass before a connection is marked an abandoned suspect.
      */
     public int getSuspectTimeout();
 

==================================================
ConnectionPool.java
index d086daf053..ba34d96d50 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/mbeans-descriptors.xml
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/mbeans-descriptors.xml
@@ -25,7 +25,7 @@
     <attribute description="All the recorded query stats. " name="slowQueriesCD" type="[javax.management.openmbean.CompositeData;" writeable="false"/>
     <operation description="Clears all the query stats" impact="ACTION" name="resetStats" returnType="void"/>
 
-    <notification description="Notification sent out by the slow query report when a query exceeds the threshhold" name="slow-query">
+    <notification description="Notification sent out by the slow query report when a query exceeds the threshold" name="slow-query">
       <notification-type>Slow query</notification-type>
     </notification>
 

==================================================
TestCoyoteAdapter.java
index ecbf5e376a..8873b49dd2 100644
--- a/res/ide-support/netbeans/README.txt
+++ b/res/ide-support/netbeans/README.txt
@@ -74,7 +74,7 @@ achieve a useful level of integration.
             still define this path in the nb-tomcat-project.properties file!
 
    Note: The current support for Tomcat in NetBeans does not include the
-         components in the modules directory (e.g. tomcate-lite).
+         components in the modules directory (e.g. tomcat-lite).
 
 4. Start NetBeans... once it has initialised and scanned your other open
    projects, just open an existing project and select the location of

==================================================
TestRequest.java
index 930d9648b4..3fe7b0e82b 100644
--- a/test/org/apache/catalina/connector/TestCoyoteAdapter.java
+++ b/test/org/apache/catalina/connector/TestCoyoteAdapter.java
@@ -167,20 +167,20 @@ public class TestCoyoteAdapter extends TomcatBaseTest {
 
     @Test
     public void testPathParamExtRootNoParam() throws Exception {
-        pathParamExtenionTest("/testapp/blah.txt", "none");
+        pathParamExtensionTest("/testapp/blah.txt", "none");
     }
 
     @Test
     public void testPathParamExtLevel1NoParam() throws Exception {
-        pathParamExtenionTest("/testapp/blah/blah.txt", "none");
+        pathParamExtensionTest("/testapp/blah/blah.txt", "none");
     }
 
     @Test
     public void testPathParamExtLevel1WithParam() throws Exception {
-        pathParamExtenionTest("/testapp/blah;x=y/blah.txt", "none");
+        pathParamExtensionTest("/testapp/blah;x=y/blah.txt", "none");
     }
 
-    private void pathParamExtenionTest(String path, String expected)
+    private void pathParamExtensionTest(String path, String expected)
             throws Exception {
         // Setup Tomcat instance
         Tomcat tomcat = getTomcatInstance();

==================================================
TestCorsFilter.java
index 13b2d2dc80..65b69753f7 100644
--- a/test/org/apache/catalina/connector/TestRequest.java
+++ b/test/org/apache/catalina/connector/TestRequest.java
@@ -828,7 +828,7 @@ public class TestRequest extends TomcatBaseTest {
         // No file system docBase required
         Context ctx = tomcat.addContext(deployPath, null);
 
-        Tomcat.addServlet(ctx, "servlet", new Bug56501Servelet());
+        Tomcat.addServlet(ctx, "servlet", new Bug56501Servlet());
         ctx.addServletMappingDecoded("/*", "servlet");
 
         tomcat.start();
@@ -841,7 +841,7 @@ public class TestRequest extends TomcatBaseTest {
         assertEquals(expected, resultPath);
     }
 
-    private class Bug56501Servelet extends HttpServlet {
+    private class Bug56501Servlet extends HttpServlet {
 
         private static final long serialVersionUID = 1L;
 

==================================================
TestRemoteIpFilter.java
index f7acfd23ea..9077bbce20 100644
--- a/test/org/apache/catalina/filters/TestCorsFilter.java
+++ b/test/org/apache/catalina/filters/TestCorsFilter.java
@@ -166,7 +166,7 @@ public class TestCorsFilter {
     }
 
     /*
-     * Tests the prsence of the origin (and not '*') in the response, when
+     * Tests the presence of the origin (and not '*') in the response, when
      * supports credentials is enabled alongwith any origin, '*'.
      *
      * @throws IOException

==================================================
TestJarInputStreamWrapper.java
index fd807e77ef..595fdbc58c 100644
--- a/test/org/apache/catalina/filters/TestRemoteIpFilter.java
+++ b/test/org/apache/catalina/filters/TestRemoteIpFilter.java
@@ -605,7 +605,7 @@ public class TestRemoteIpFilter extends TomcatBaseTest {
         HttpServletRequest request = mockServlet.getRequest();
         Assert.assertNotNull(request);
 
-        // VALIDATE X-FOWARDED-FOR
+        // VALIDATE X-FORWARDED-FOR
         Assert.assertEquals(expectedRemoteAddr, request.getRemoteAddr());
         Assert.assertEquals(expectedRemoteAddr, request.getRemoteHost());
 

==================================================
TestAbstractAjpProcessor.java
index 02d5547573..6b1af19c61 100644
--- a/test/org/apache/catalina/webresources/TestJarInputStreamWrapper.java
+++ b/test/org/apache/catalina/webresources/TestJarInputStreamWrapper.java
@@ -73,7 +73,7 @@ public class TestJarInputStreamWrapper {
 
 
     @Test
-    public void testMarkSupprotedAfterClose() throws Exception {
+    public void testMarkSupportedAfterClose() throws Exception {
         Method m = InputStream.class.getMethod("markSupported", (Class<?>[]) null);
         testMethodAfterClose(m, (Object[]) null);
     }

==================================================
TestGzipOutputFilter.java
index 4cf8426eb4..5dcc272c7a 100644
--- a/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java
+++ b/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java
@@ -302,7 +302,7 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
         } else {
             TesterAjpMessage bodyMessage = ajpClient.createBodyMessage(new byte[bodySize]);
             responseHeaders = ajpClient.sendMessage(forwardMessage, bodyMessage);
-            // Expect back a request for more data (which will be emty and
+            // Expect back a request for more data (which will be empty and
             // trigger end of stream in Servlet)
             validateGetBody(responseHeaders);
             bodyMessage = ajpClient.createBodyMessage(new byte[0]);

==================================================
TestHttp2Section_6_5.java
index b1f0c1cee8..153c9f472c 100644
--- a/test/org/apache/coyote/http11/filters/TestGzipOutputFilter.java
+++ b/test/org/apache/coyote/http11/filters/TestGzipOutputFilter.java
@@ -40,7 +40,7 @@ public class TestGzipOutputFilter {
      * be a ByteArrayOutputStream so we can inspect the output bytes 3. write a
      * chunk out using the gzipoutputfilter and invoke a flush on the
      * InternalOutputBuffer 4. read from the ByteArrayOutputStream to find out
-     * what's being written out (flushed) 5. find out what's expected by wrting
+     * what's being written out (flushed) 5. find out what's expected by writing
      * to GZIPOutputStream and close it (to force flushing) 6. Compare the size
      * of the two arrays, they should be close (instead of one being much
      * shorter than the other one)

==================================================
TestELEvaluation.java
index c2b102dd49..c400325ba0 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_6_5.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_6_5.java
@@ -86,7 +86,7 @@ public class TestHttp2Section_6_5 extends Http2TestBase {
     }
 
 
-    // Need to test sending push promise when push promise suport is disabled
+    // Need to test sending push promise when push promise support is disabled
 
     @Test
     public void testSettingsFrameInvalidPushSetting() throws Exception {

==================================================
TestELSupport.java
index 0285338140..c4960603d5 100644
--- a/test/org/apache/el/TestELEvaluation.java
+++ b/test/org/apache/el/TestELEvaluation.java
@@ -103,7 +103,7 @@ public class TestELEvaluation {
         assertEquals("\\\\", evaluateExpression("\\\\"));
 
         /*
-         * LiteralExpresions can only contain ${ or #{ if escaped with \
+         * LiteralExpressions can only contain ${ or #{ if escaped with \
          * \ is not an escape character in any other circumstances including \\
          */
         assertEquals("\\", evaluateExpression("\\"));

==================================================
TestImplicitTldParser.java
index 6a08010d75..d77935ef68 100644
--- a/test/org/apache/el/lang/TestELSupport.java
+++ b/test/org/apache/el/lang/TestELSupport.java
@@ -244,7 +244,7 @@ public class TestELSupport {
     public void testCoerceToNumber01() {
         Object result = ELSupport.coerceToNumber(
                 null, (Object) null, Integer.class);
-        Assert.assertNull("Resut: " + result, result);
+        Assert.assertNull("Result: " + result, result);
     }
 
     @Test
@@ -263,7 +263,7 @@ public class TestELSupport {
     @Test
     public void testCoerceToBoolean02() {
         Object result = ELSupport.coerceToBoolean(null, null, false);
-        Assert.assertNull("Resut: " + result, result);
+        Assert.assertNull("Result: " + result, result);
     }
 
     private static void testIsSame(Object value) {

==================================================
TestMediaType.java
index eca5654244..8d13e73135 100644
--- a/test/org/apache/tomcat/util/descriptor/tld/TestImplicitTldParser.java
+++ b/test/org/apache/tomcat/util/descriptor/tld/TestImplicitTldParser.java
@@ -35,7 +35,7 @@ public class TestImplicitTldParser {
     }
 
     @Test
-    public void testImpicitTldGood() throws Exception {
+    public void testImplicitTldGood() throws Exception {
         TaglibXml xml = parse("test/tld/implicit-good.tld");
         Assert.assertEquals("1.0", xml.getTlibVersion());
         Assert.assertEquals("2.1", xml.getJspVersion());
@@ -43,7 +43,7 @@ public class TestImplicitTldParser {
     }
 
     @Test(expected=SAXParseException.class)
-    public void testImpicitTldBad() throws Exception {
+    public void testImplicitTldBad() throws Exception {
         TaglibXml xml = parse("test/tld/implicit-bad.tld");
         Assert.assertEquals("1.0", xml.getTlibVersion());
         Assert.assertEquals("2.1", xml.getJspVersion());

==================================================
TestClientCert.java
index f01faa8299..f762ffcb3c 100644
--- a/test/org/apache/tomcat/util/http/parser/TestMediaType.java
+++ b/test/org/apache/tomcat/util/http/parser/TestMediaType.java
@@ -92,7 +92,7 @@ public class TestMediaType {
 
 
     @Test
-    public void testSimpleWithComplesQuotedString() throws IOException {
+    public void testSimpleWithComplexQuotedString() throws IOException {
         doTest(PARAM_COMPLEX_QUOTED);
     }
 

==================================================
TestWsWebSocketContainer.java
index a615164c44..2e9086fd84 100644
--- a/test/org/apache/tomcat/util/net/TestClientCert.java
+++ b/test/org/apache/tomcat/util/net/TestClientCert.java
@@ -45,11 +45,11 @@ public class TestClientCert extends TomcatBaseTest {
         doTestClientCertGet(true);
     }
 
-    private void doTestClientCertGet(boolean preemtive) throws Exception {
+    private void doTestClientCertGet(boolean preemptive) throws Exception {
         Assume.assumeTrue("SSL renegotiation has to be supported for this test",
                 TesterSupport.isRenegotiationSupported(getTomcatInstance()));
 
-        if (preemtive) {
+        if (preemptive) {
             Tomcat tomcat = getTomcatInstance();
             // Only one context deployed
             Context c = (Context) tomcat.getHost().findChildren()[0];
@@ -62,7 +62,7 @@ public class TestClientCert extends TomcatBaseTest {
         // Unprotected resource
         ByteChunk res =
                 getUrl("https://localhost:" + getPort() + "/unprotected");
-        if (preemtive) {
+        if (preemptive) {
             assertEquals("OK-" + TesterSupport.ROLE, res.toString());
         } else {
             assertEquals("OK", res.toString());

==================================================
CompressionFilter.java
index a0443d3362..537f1dd766 100644
--- a/webapps/docs/ssl-howto.xml
+++ b/webapps/docs/ssl-howto.xml
@@ -143,7 +143,7 @@ HSTS header. It allows you to communicate to the browser that your site should
 always be accessed over https.</p>
 
 <p>Using name-based virtual hosts on a secured connection requires careful
-configuration of the names specfied in a single certificate or Tomcat 8.5
+configuration of the names specified in a single certificate or Tomcat 8.5
 onwards where Server Name Indication (SNI) support is available. SNI allows
 multiple certificates with different names to be associated with a single TLS
 connector.</p>

==================================================
DrawboardEndpoint.java
index d8e9b2d92b..6d98e7df39 100644
--- a/webapps/examples/WEB-INF/classes/compressionFilters/CompressionFilter.java
+++ b/webapps/examples/WEB-INF/classes/compressionFilters/CompressionFilter.java
@@ -155,7 +155,7 @@ public class CompressionFilter extends GenericFilter {
 
         if (compressionThreshold == 0) {
             if (debug > 0) {
-                System.out.println("doFilter got called, but compressionTreshold is set to 0 - no compression");
+                System.out.println("doFilter got called, but compressionThreshold is set to 0 - no compression");
             }
             chain.doFilter(request, response);
             return;

==================================================
Room.java
index 9939972301..cd99f49576 100644
--- a/webapps/examples/WEB-INF/classes/websocket/drawboard/DrawboardEndpoint.java
+++ b/webapps/examples/WEB-INF/classes/websocket/drawboard/DrawboardEndpoint.java
@@ -201,7 +201,7 @@ public final class DrawboardEndpoint extends Endpoint {
                                 DrawMessage msg = DrawMessage.parseFromString(
                                         messageContent.substring(indexOfChar + 1));
 
-                                // Don't ingore RuntimeExceptions thrown by
+                                // Don't ignore RuntimeExceptions thrown by
                                 // this method
                                 // TODO: Find a better solution than this variable
                                 dontSwallowException = true;

==================================================
