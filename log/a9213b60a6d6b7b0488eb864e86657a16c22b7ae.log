a9213b60a6d6b7b0488eb864e86657a16c22b7ae
==================================================
Lifecycle refactoring
==================================================
Mark Emlyn
==================================================
Thu Mar 4 19:17:32 2010 +0000
==================================================
StandardService.java
index fa2aad1d97..a054a14118 100644
--- a/java/org/apache/catalina/core/LocalStrings_ja.properties
+++ b/java/org/apache/catalina/core/LocalStrings_ja.properties
@@ -148,9 +148,7 @@ standardPipeline.noValve=\u3053\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u51e6\
 standardServer.initialize.initialized=\u3053\u306e\u30b5\u30fc\u30d0\u306f\u65e2\u306b\u521d\u671f\u5316\u3055\u308c\u3066\u3044\u307e\u3059
 standardService.initialize.initialized=\u3053\u306e\u30b5\u30fc\u30d3\u30b9\u306f\u65e2\u306b\u521d\u671f\u5316\u3055\u308c\u3066\u3044\u307e\u3059
 standardService.start.name=\u30b5\u30fc\u30d3\u30b9 {0} \u3092\u8d77\u52d5\u3057\u307e\u3059
-standardService.start.started=\u3053\u306e\u30b5\u30fc\u30d3\u30b9\u306f\u65e2\u306b\u8d77\u52d5\u3055\u308c\u3066\u3044\u307e\u3059
 standardService.stop.name=\u30b5\u30fc\u30d3\u30b9 {0} \u3092\u505c\u6b62\u3057\u307e\u3059
-standardService.stop.notStarted=\u3053\u306e\u30b5\u30fc\u30d3\u30b9\u306f\u307e\u3060\u8d77\u52d5\u3055\u308c\u3066\u3044\u307e\u305b\u3093
 standardWrapper.allocate=\u30b5\u30fc\u30d6\u30ec\u30c3\u30c8\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5272\u308a\u5f53\u3066\u4e2d\u306e\u30a8\u30e9\u30fc\u3067\u3059
 standardWrapper.allocateException=\u30b5\u30fc\u30d6\u30ec\u30c3\u30c8 {0} \u306b\u4f8b\u5916\u3092\u5272\u308a\u5f53\u3066\u307e\u3059
 standardWrapper.containerServlet=\u30b3\u30f3\u30c6\u30ca\u30b5\u30fc\u30d6\u30ec\u30c3\u30c8 {0} \u3092\u30ed\u30fc\u30c9\u3057\u307e\u3059

==================================================
Catalina.java
index db8271b162..a258a8c159 100644
--- a/java/org/apache/catalina/core/StandardService.java
+++ b/java/org/apache/catalina/core/StandardService.java
@@ -28,11 +28,11 @@ import org.apache.catalina.Container;
 import org.apache.catalina.Engine;
 import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleException;
-import org.apache.catalina.LifecycleListener;
+import org.apache.catalina.LifecycleState;
 import org.apache.catalina.Server;
 import org.apache.catalina.Service;
 import org.apache.catalina.connector.Connector;
-import org.apache.catalina.util.LifecycleSupport;
+import org.apache.catalina.util.LifecycleBase;
 import org.apache.tomcat.util.res.StringManager;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -49,7 +49,8 @@ import org.apache.catalina.Executor;
  * @author Craig R. McClanahan
  */
 
-public class StandardService implements Service, MBeanRegistration {
+public class StandardService extends LifecycleBase
+        implements Service, MBeanRegistration {
 
     private static final Log log = LogFactory.getLog(StandardService.class);
    
@@ -70,12 +71,6 @@ public class StandardService implements Service, MBeanRegistration {
     private String name = null;
 
 
-    /**
-     * The lifecycle event support for this component.
-     */
-    private LifecycleSupport lifecycle = new LifecycleSupport(this);
-
-
     /**
      * The string manager for this package.
      */
@@ -87,12 +82,6 @@ public class StandardService implements Service, MBeanRegistration {
      */
     private Server server = null;
 
-    /**
-     * Has this component been started?
-     */
-    private boolean started = false;
-
-
     /**
      * The property change support for this component.
      */
@@ -151,7 +140,7 @@ public class StandardService implements Service, MBeanRegistration {
         this.container = container;
         if ((this.container != null) && (this.container instanceof Engine))
             ((Engine) this.container).setService(this);
-        if (started && (this.container != null)) {
+        if (getState().isAvailable() && (this.container != null)) {
             try {
                 this.container.start();
             } catch (LifecycleException e) {
@@ -162,7 +151,7 @@ public class StandardService implements Service, MBeanRegistration {
             for (int i = 0; i < connectors.length; i++)
                 connectors[i].setContainer(this.container);
         }
-        if (started && (oldContainer != null)) {
+        if (getState().isAvailable() && (oldContainer != null)) {
             try {
                 oldContainer.stop();
             } catch (LifecycleException e) {
@@ -266,7 +255,7 @@ public class StandardService implements Service, MBeanRegistration {
                 }
             }
 
-            if (started) {
+            if (getState().isAvailable()) {
                 try {
                     ((Lifecycle) connector).start();
                 } catch (LifecycleException e) {
@@ -330,7 +319,7 @@ public class StandardService implements Service, MBeanRegistration {
             }
             if (j < 0)
                 return;
-            if (started) {
+            if (getState().isAvailable()) {
                 try {
                     ((Lifecycle) connectors[j]).stop();
                 } catch (LifecycleException e) {
@@ -380,43 +369,6 @@ public class StandardService implements Service, MBeanRegistration {
     }
 
 
-    // ------------------------------------------------------ Lifecycle Methods
-
-
-    /**
-     * Add a LifecycleEvent listener to this component.
-     *
-     * @param listener The listener to add
-     */
-    public void addLifecycleListener(LifecycleListener listener) {
-
-        lifecycle.addLifecycleListener(listener);
-
-    }
-
-
-    /**
-     * Get the lifecycle listeners associated with this lifecycle. If this 
-     * Lifecycle has no listeners registered, a zero-length array is returned.
-     */
-    public LifecycleListener[] findLifecycleListeners() {
-
-        return lifecycle.findLifecycleListeners();
-
-    }
-
-
-    /**
-     * Remove a LifecycleEvent listener from this component.
-     *
-     * @param listener The listener to remove
-     */
-    public void removeLifecycleListener(LifecycleListener listener) {
-
-        lifecycle.removeLifecycleListener(listener);
-
-    }
-    
     /**
      * Adds a named executor to the service
      * @param ex Executor
@@ -425,7 +377,7 @@ public class StandardService implements Service, MBeanRegistration {
         synchronized (executors) {
             if (!executors.contains(ex)) {
                 executors.add(ex);
-                if (started)
+                if (getState().isAvailable())
                     try {
                         ex.start();
                     } catch (LifecycleException x) {
@@ -468,7 +420,7 @@ public class StandardService implements Service, MBeanRegistration {
      */
     public void removeExecutor(Executor ex) {
         synchronized (executors) {
-            if ( executors.remove(ex) && started ) {
+            if ( executors.remove(ex) && getState().isAvailable() ) {
                 try {
                     ex.stop();
                 } catch (LifecycleException e) {
@@ -481,33 +433,21 @@ public class StandardService implements Service, MBeanRegistration {
 
 
     /**
-     * Prepare for the beginning of active use of the public methods of this
-     * component.  This method should be called before any of the public
-     * methods of this component are utilized.  It should also send a
-     * LifecycleEvent of type START_EVENT to any registered listeners.
+     * Start nested components ({@link Executor}s, {@link Connector}s and
+     * {@link Container}s) and implement the requirements of
+     * {@link LifecycleBase#startInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that prevents this component from being used
      */
-    public void start() throws LifecycleException {
+    protected void startInternal() throws LifecycleException {
 
-        // Validate and update our current component state
-        if (started) {
-            if (log.isInfoEnabled()) {
-                log.info(sm.getString("standardService.start.started"));
-            }
-            return;
-        }
-        
         if( ! initialized )
             init(); 
 
-        // Notify our interested LifecycleListeners
-        lifecycle.fireLifecycleEvent(BEFORE_START_EVENT, null);
         if(log.isInfoEnabled())
             log.info(sm.getString("standardService.start.name", this.name));
-        lifecycle.fireLifecycleEvent(START_EVENT, null);
-        started = true;
+        setState(LifecycleState.STARTING);
 
         // Start our defined Container first
         if (container != null) {
@@ -528,31 +468,18 @@ public class StandardService implements Service, MBeanRegistration {
                 ((Lifecycle) connectors[i]).start();
             }
         }
-        
-        // Notify our interested LifecycleListeners
-        lifecycle.fireLifecycleEvent(AFTER_START_EVENT, null);
-
     }
 
 
     /**
-     * Gracefully terminate the active use of the public methods of this
-     * component.  This method should be the last one called on a given
-     * instance of this component.  It should also send a LifecycleEvent
-     * of type STOP_EVENT to any registered listeners.
+     * Stop nested components ({@link Executor}s, {@link Connector}s and
+     * {@link Container}s) and implement the requirements of
+     * {@link LifecycleBase#stopInternal()}.
      *
      * @exception LifecycleException if this component detects a fatal error
      *  that needs to be reported
      */
-    public void stop() throws LifecycleException {
-
-        // Validate and update our current component state
-        if (!started) {
-            return;
-        }
-
-        // Notify our interested LifecycleListeners
-        lifecycle.fireLifecycleEvent(BEFORE_STOP_EVENT, null);
+    protected void stopInternal() throws LifecycleException {
 
         // Stop our defined Connectors first
         synchronized (connectors) {
@@ -568,11 +495,9 @@ public class StandardService implements Service, MBeanRegistration {
             // Ignore
         }
 
-        lifecycle.fireLifecycleEvent(STOP_EVENT, null);
         if(log.isInfoEnabled())
-            log.info
-                (sm.getString("standardService.stop.name", this.name));
-        started = false;
+            log.info(sm.getString("standardService.stop.name", this.name));
+        setState(LifecycleState.STOPPING);
 
         // Stop our defined Container second
         if (container != null) {
@@ -610,11 +535,6 @@ public class StandardService implements Service, MBeanRegistration {
                 }
             }
         }
-        
-
-        // Notify our interested LifecycleListeners
-        lifecycle.fireLifecycleEvent(AFTER_STOP_EVENT, null);
-
     }
 
 
@@ -673,7 +593,7 @@ public class StandardService implements Service, MBeanRegistration {
     }
     
     public void destroy() throws LifecycleException {
-        if( started ) stop();
+        if(getState().isAvailable()) stop();
         // FIXME unregister should be here probably -- stop doing that ?
     }
 

==================================================
Embedded.java
index 4bcdcb1ec5..a0e3d31635 100644
--- a/java/org/apache/catalina/startup/Catalina.java
+++ b/java/org/apache/catalina/startup/Catalina.java
@@ -32,6 +32,7 @@ import java.util.logging.LogManager;
 
 import org.apache.catalina.Container;
 import org.apache.catalina.LifecycleException;
+import org.apache.catalina.LifecycleState;
 import org.apache.catalina.core.StandardServer;
 import org.apache.juli.ClassLoaderLogManager;
 import org.apache.tomcat.util.digester.Digester;
@@ -542,7 +543,7 @@ public class Catalina extends Embedded {
      * Start a new server instance.
      */
     @Override
-    public void start() {
+    protected void startInternal() {
 
         if (getServer() == null) {
             load();
@@ -554,7 +555,10 @@ public class Catalina extends Embedded {
         }
 
         long t1 = System.nanoTime();
-        
+
+        setState(LifecycleState.STARTING);
+        lifecycle.fireLifecycleEvent(START_EVENT, null);
+
         // Start the new server
         try {
             getServer().start();
@@ -589,8 +593,10 @@ public class Catalina extends Embedded {
         }
 
         if (await) {
+            setState(LifecycleState.STARTED);
+            fireLifecycleEvent(AFTER_START_EVENT, null);
             await();
-            stop();
+            setState(LifecycleState.MUST_STOP);
         }
 
     }
@@ -600,7 +606,10 @@ public class Catalina extends Embedded {
      * Stop an existing server instance.
      */
     @Override
-    public void stop() {
+    protected void stopInternal() {
+
+        fireLifecycleEvent(STOP_EVENT, null);
+        setState(LifecycleState.STOPPING);
 
         try {
             // Remove the ShutdownHook first so that server.stop() 
@@ -667,7 +676,11 @@ public class Catalina extends Embedded {
         public void run() {
 
             if (getServer() != null) {
-                Catalina.this.stop();
+                try {
+                    Catalina.this.stop();
+                } catch (LifecycleException e) {
+                    log.error(sm.getString("catalina.shutdownHookFail"), e);
+                }
             }
             
             // If JULI is used, shut JULI down *after* the server shuts down

==================================================
