44e390528e9a02fe94e8a771e05a21ff313fa677
==================================================
update test cases
==================================================
Filip Hanik
==================================================
Fri Jul 24 15:25:17 2009 +0000
==================================================
AbandonPercentageTest.java
update test cases


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@797529 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BorrowWaitTest.java
index a0437f611f..78ef7c0f4b 100644
--- a/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/AbandonPercentageTest.java
+++ b/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/AbandonPercentageTest.java
@@ -38,7 +38,6 @@ public class AbandonPercentageTest extends DefaultTestCase {
         this.datasource.getPoolProperties().setRemoveAbandoned(true);
         this.datasource.getPoolProperties().setRemoveAbandonedTimeout(1);
         Connection con = datasource.getConnection();
-        long start = System.currentTimeMillis();
         assertEquals("Number of connections active/busy should be 1",1,datasource.getPool().getActive());
         Thread.sleep(2000);
         assertEquals("Number of connections active/busy should be 0",0,datasource.getPool().getActive());
@@ -56,7 +55,6 @@ public class AbandonPercentageTest extends DefaultTestCase {
         this.datasource.getPoolProperties().setRemoveAbandoned(true);
         this.datasource.getPoolProperties().setRemoveAbandonedTimeout(1);
         Connection con = datasource.getConnection();
-        long start = System.currentTimeMillis();
         assertEquals("Number of connections active/busy should be 1",1,datasource.getPool().getActive());
         Thread.sleep(2000);
         assertEquals("Number of connections active/busy should be 1",1,datasource.getPool().getActive());
@@ -75,7 +73,6 @@ public class AbandonPercentageTest extends DefaultTestCase {
         this.datasource.getPoolProperties().setRemoveAbandonedTimeout(1);
         this.datasource.getPoolProperties().setJdbcInterceptors(ResetAbandonedTimer.class.getName());
         Connection con = datasource.getConnection();
-        long start = System.currentTimeMillis();
         assertEquals("Number of connections active/busy should be 1",1,datasource.getPool().getActive());
         for (int i=0; i<20; i++) {
             Thread.sleep(200);
@@ -97,7 +94,6 @@ public class AbandonPercentageTest extends DefaultTestCase {
         this.datasource.getPoolProperties().setRemoveAbandonedTimeout(1);
         Connection[] con = new Connection[size];
         con[0] = datasource.getConnection();
-        long start = System.currentTimeMillis();
         assertEquals("Number of connections active/busy should be 1",1,datasource.getPool().getActive());
         for (int i=1; i<25; i++) {
             con[i] = datasource.getConnection();

==================================================
DefaultTestCase.java
index a68d04d44e..979f6e979f 100644
--- a/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/BorrowWaitTest.java
+++ b/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/BorrowWaitTest.java
@@ -32,10 +32,10 @@ public class BorrowWaitTest extends DefaultTestCase {
         this.datasource.setMaxActive(1);
         this.datasource.setMaxWait(wait);
         Connection con = datasource.getConnection();
-        long start = System.currentTimeMillis();
         try {
             Connection con2 = datasource.getConnection();
             assertFalse("This should not happen, connection should be unavailable.",true);
+            con2.close();
         }catch (SQLException x) {
             long delta = System.currentTimeMillis();
             boolean inrange = Math.abs(wait-delta) < 1000;

==================================================
TestConcurrency.java
index 47a85f9b14..47526925fa 100644
--- a/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/DefaultTestCase.java
+++ b/modules/jdbc-pool/test/org/apache/tomcat/jdbc/test/DefaultTestCase.java
@@ -52,6 +52,7 @@ public class DefaultTestCase extends TestCase {
     public org.apache.tomcat.jdbc.pool.DataSource createDefaultDataSource() {
         org.apache.tomcat.jdbc.pool.DataSource datasource = null;
         PoolConfiguration p = new DefaultProperties();
+        p.setFairQueue(false);
         p.setJmxEnabled(false);
         p.setTestWhileIdle(false);
         p.setTestOnBorrow(false);
@@ -77,9 +78,7 @@ public class DefaultTestCase extends TestCase {
 
     protected void transferProperties() {
         try {
-            BasicDataSourceFactory factory = new BasicDataSourceFactory();
             Properties p = new Properties();
-
             for (int i=0; i< ALL_PROPERTIES.length; i++) {
                 String name = "get" + Character.toUpperCase(ALL_PROPERTIES[i].charAt(0)) + ALL_PROPERTIES[i].substring(1);
                 String bname = "is" + name.substring(3);

==================================================
