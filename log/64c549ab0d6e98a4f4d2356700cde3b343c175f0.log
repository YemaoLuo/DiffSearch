64c549ab0d6e98a4f4d2356700cde3b343c175f0
==================================================
Start to expand the diagnostic information available from the Manager web application
==================================================
Mark Emlyn
==================================================
Sat Sep 15 22:18:08 2012 +0000
==================================================
HTMLManagerServlet.java
index 00b5b2a754..f815af5ea4 100644
--- a/java/org/apache/catalina/connector/mbeans-descriptors.xml
+++ b/java/org/apache/catalina/connector/mbeans-descriptors.xml
@@ -44,6 +44,15 @@
           description="Allow disabling TRACE method"
                  type="boolean"/>
 
+    <attribute   name="ciphers"
+          description="Comma-separated list of requested cipher suites"
+                 type="java.lang.String"/>
+
+    <attribute   name="ciphersUsed"
+          description="Array of ciphers suites in use"
+                 type="[Ljava.lang.String;"
+            writeable="false"/>
+
     <attribute   name="className"
           description="Fully qualified class name of the managed object"
                  type="java.lang.String"

==================================================
ManagerServlet.java
index d12b94a072..3245d2e509 100644
--- a/java/org/apache/catalina/manager/LocalStrings.properties
+++ b/java/org/apache/catalina/manager/LocalStrings.properties
@@ -48,6 +48,9 @@ htmlManagerServlet.deployWar=WAR or Directory URL:
 htmlManagerServlet.diagnosticsLeak=Check to see if a web application has caused a memory leak on stop, reload or undeploy
 htmlManagerServlet.diagnosticsLeakButton=Find leaks
 htmlManagerServlet.diagnosticsLeakWarning=This diagnostic check will trigger a full garbage collection. Use it with extreme caution on production systems.
+htmlManagerServlet.diagnosticsSsl=SSL connector configuration diagnostics
+htmlManagerServlet.diagnosticsSslConnectorCipherButton=Connector ciphers
+htmlManagerServlet.diagnosticsSslConnectorCipherText=List the configured ciphers for each connector
 htmlManagerServlet.diagnosticsTitle=Diagnostics
 htmlManagerServlet.findleaksList=\
   The following web applications were stopped (reloaded, undeployed), but their\n\
@@ -88,6 +91,7 @@ managerServlet.noManager=FAIL - No manager exists for path {0}
 managerServlet.noSelf=FAIL - The manager can not reload, undeploy, stop, or undeploy itself
 managerServlet.noWrapper=Container has not called setWrapper() for this servlet
 managerServlet.notDeployed=FAIL - Context {0} is defined in server.xml and may not be undeployed
+managerServlet.notSslConnector=SSL is not enabled for this connector
 managerServlet.objectNameFail=FAIL - Unable to register object name [{0}] for Manager Servlet
 managerServlet.postCommand=FAIL - Tried to use command {0} via a GET request but POST is required
 managerServlet.reloaded=OK - Reloaded application at context path {0}

==================================================
AbstractHttp11JsseProtocol.java
index eb6d089be6..305b23db19 100644
--- a/java/org/apache/catalina/manager/ManagerServlet.java
+++ b/java/org/apache/catalina/manager/ManagerServlet.java
@@ -23,7 +23,11 @@ import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Locale;
+import java.util.Map;
+import java.util.Set;
 
 import javax.management.MBeanServer;
 import javax.management.ObjectName;
@@ -44,8 +48,10 @@ import org.apache.catalina.Engine;
 import org.apache.catalina.Host;
 import org.apache.catalina.Manager;
 import org.apache.catalina.Server;
+import org.apache.catalina.Service;
 import org.apache.catalina.Session;
 import org.apache.catalina.Wrapper;
+import org.apache.catalina.connector.Connector;
 import org.apache.catalina.core.StandardHost;
 import org.apache.catalina.core.StandardServer;
 import org.apache.catalina.util.ContextName;
@@ -360,6 +366,8 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             undeploy(writer, cn, smClient);
         } else if (command.equals("/findleaks")) {
             findleaks(statusLine, writer, smClient);
+        } else if (command.equals("/sslConnectorCiphers")) {
+            sslConnectorCiphers(writer);
         } else {
             writer.println(smClient.getString("managerServlet.unknownCommand",
                     command));
@@ -524,6 +532,19 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
     }
 
 
+    protected void sslConnectorCiphers(PrintWriter writer) {
+        writer.println("OK - Connector / SSL Cipher information");
+        Map<String,Set<String>> connectorCiphers = getConnectorCiphers();
+        for (Map.Entry<String,Set<String>> entry : connectorCiphers.entrySet()) {
+            writer.println(entry.getKey());
+            for (String cipher : entry.getValue()) {
+                writer.print("  ");
+                writer.println(cipher);
+            }
+        }
+    }
+
+
     /**
      * Store server configuration.
      *
@@ -1621,8 +1642,28 @@ public class ManagerServlet extends HttpServlet implements ContainerServlet {
             }
         }
         return result;
-
     }
 
 
+    protected Map<String,Set<String>> getConnectorCiphers() {
+        Map<String,Set<String>> result = new HashMap<>();
+
+        Engine e = (Engine) host.getParent();
+        Service s = e.getService();
+        Connector connectors[] = s.findConnectors();
+        for (Connector connector : connectors) {
+            Set<String> cipherList = new HashSet<>();
+            if (Boolean.TRUE.equals(connector.getProperty("SSLEnabled"))) {
+                String[] ciphersUsed =
+                        (String[]) connector.getProperty("ciphersUsed");
+                for (String cipherUsed : ciphersUsed) {
+                    cipherList.add(cipherUsed);
+                }
+            } else {
+                cipherList.add(sm.getString("managerServlet.notSslConnector"));
+            }
+            result.put(connector.toString(), cipherList);
+        }
+        return result;
+    }
 }

==================================================
Http11AprProtocol.java
index e8a3a505bc..e2f4ac16f2 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11JsseProtocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11JsseProtocol.java
@@ -50,6 +50,7 @@ public abstract class AbstractHttp11JsseProtocol<S>
 
     public String getCiphers() { return endpoint.getCiphers();}
     public void setCiphers(String s) { endpoint.setCiphers(s);}
+    public String[] getCiphersUsed() { return endpoint.getCiphersUsed();}
 
     public String getKeyAlias() { return endpoint.getKeyAlias();}
     public void setKeyAlias(String s ) { endpoint.setKeyAlias(s);}

==================================================
AbstractEndpoint.java
index ca430954d9..62841bcd3b 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -115,7 +115,7 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
      */
     public String getSSLCipherSuite() { return ((AprEndpoint)endpoint).getSSLCipherSuite(); }
     public void setSSLCipherSuite(String SSLCipherSuite) { ((AprEndpoint)endpoint).setSSLCipherSuite(SSLCipherSuite); }
-
+    public String[] getCiphersUsed() { return endpoint.getCiphersUsed();}
 
     /**
      * SSL honor cipher order.

==================================================
AprEndpoint.java
index 5bf6af25c5..68821c592d 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -811,6 +811,10 @@ public abstract class AbstractEndpoint {
             for (int i=0; i<ciphersarr.length; i++ ) ciphersarr[i] = t.nextToken();
         }
     }
+    /**
+     * @return  The ciphers in use by this Endpoint
+     */
+    public abstract String[] getCiphersUsed();
 
     private String keyAlias = null;
     public String getKeyAlias() { return keyAlias;}

==================================================
JIoEndpoint.java
index 1bb16ead4a..c6e230babc 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -349,6 +349,14 @@ public class AprEndpoint extends AbstractEndpoint {
     }
 
 
+    @Override
+    public String[] getCiphersUsed() {
+        // TODO : Investigate if it is possible to extract the current list of
+        //        available ciphers. Native code changes will be required.
+        return new String[] { getSSLCipherSuite() };
+    }
+
+
     // --------------------------------------------------------- Public Methods
 
     /**

==================================================
NioEndpoint.java
index 664337d37f..ca05050f61 100644
--- a/java/org/apache/tomcat/util/net/JIoEndpoint.java
+++ b/java/org/apache/tomcat/util/net/JIoEndpoint.java
@@ -32,6 +32,7 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
+import org.apache.tomcat.util.net.jsse.JSSESocketFactory;
 
 
 /**
@@ -102,6 +103,16 @@ public class JIoEndpoint extends AbstractEndpoint {
         }
     }
 
+
+    @Override
+    public String[] getCiphersUsed() {
+        if (serverSocketFactory instanceof JSSESocketFactory) {
+            return ((JSSESocketFactory) serverSocketFactory).getEnabledCiphers();
+        }
+        return new String[0];
+    }
+
+
     /*
      * Optional feature support.
      */

==================================================
JSSESocketFactory.java
index 04a0db160c..5674024387 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -408,6 +408,21 @@ public class NioEndpoint extends AbstractEndpoint {
     }
 
 
+    @Override
+    public String[] getCiphersUsed() {
+        SSLContext sslContext = getSSLContext();
+        if (sslContext != null) {
+            SSLEngine engine = getSSLContext().createSSLEngine();
+            if (getCiphersArray().length > 0) {
+                engine.setEnabledCipherSuites(getCiphersArray());
+            }
+            return engine.getEnabledCipherSuites();
+        } else {
+            return new String[0];
+        }
+    }
+
+
     // --------------------------------------------------------- OOM Parachute Methods
 
     protected void checkParachute() {

==================================================
