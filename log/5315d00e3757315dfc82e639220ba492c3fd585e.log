5315d00e3757315dfc82e639220ba492c3fd585e
==================================================
Code clean-up - no functional change
==================================================
Mark Thomas
==================================================
Thu Apr 13 17:11:57 2023 +0100
==================================================
ClientAuth.java
Code clean-up - no functional change


==================================================
ServerAuth.java
index 063075f35a..c4bf93ed14 100644
--- a/java/jakarta/security/auth/message/ClientAuth.java
+++ b/java/jakarta/security/auth/message/ClientAuth.java
@@ -24,45 +24,38 @@ public interface ClientAuth {
      * Secure (authenticate) the request.
      *
      * @param messageInfo   The associated request and response
-     * @param clientSubject The subject that represents the source of the
-     *                      request
+     * @param clientSubject The subject that represents the source of the request
      *
-     * @return An AuthStatus instance that represents the result of the
-     *         authentication
+     * @return An AuthStatus instance that represents the result of the authentication
      *
-     * @throws AuthException If the a failure occurred in a manner that
-     *                       prevented the failure from being communicated via
-     *                       messageInfo
+     * @throws AuthException If the a failure occurred in a manner that prevented the failure from being communicated
+     *                           via messageInfo
      */
     AuthStatus secureRequest(MessageInfo messageInfo, Subject clientSubject) throws AuthException;
 
     /**
      * Validate a response.
      *
-     * @param messageInfo       The associated request and response
-     * @param clientSubject     The subject that represents the recipient of the
-     *                          response
-     * @param serviceSubject    The subject that represents the source of the
-     *                          response
+     * @param messageInfo    The associated request and response
+     * @param clientSubject  The subject that represents the recipient of the response
+     * @param serviceSubject The subject that represents the source of the response
      *
-     * @return An AuthStatus instance that represents the result of the
-     *         validation
+     * @return An AuthStatus instance that represents the result of the validation
      *
-     * @throws AuthException If the a failure occurred in a manner that
-     *                       prevented the failure from being communicated via
-     *                       messageInfo
+     * @throws AuthException If the a failure occurred in a manner that prevented the failure from being communicated
+     *                           via messageInfo
      */
-    default AuthStatus validateResponse(MessageInfo messageInfo, Subject clientSubject,
-            Subject serviceSubject) throws AuthException {
+    default AuthStatus validateResponse(MessageInfo messageInfo, Subject clientSubject, Subject serviceSubject)
+            throws AuthException {
         return AuthStatus.SUCCESS;
     }
 
     /**
-     * Remove principals and/or credentials from the subject that were
-     * previously added by this authentication mechanism.
+     * Remove principals and/or credentials from the subject that were previously added by this authentication
+     * mechanism.
      *
-     * @param messageInfo   The associated request and response
-     * @param subject       The subject to clean
+     * @param messageInfo The associated request and response
+     * @param subject     The subject to clean
      *
      * @throws AuthException If the a failure occurred
      */

==================================================
CallerPrincipalCallback.java
index d0777618f5..84141ade22 100644
--- a/java/jakarta/security/auth/message/ServerAuth.java
+++ b/java/jakarta/security/auth/message/ServerAuth.java
@@ -23,46 +23,39 @@ public interface ServerAuth {
     /**
      * Validate the request.
      *
-     * @param messageInfo       The associated request and response
-     * @param clientSubject     The subject that represents the source of the
-     *                          request
-     * @param serviceSubject    The subject that represents the recipient of the
-     *                          request
+     * @param messageInfo    The associated request and response
+     * @param clientSubject  The subject that represents the source of the request
+     * @param serviceSubject The subject that represents the recipient of the request
      *
-     * @return An AuthStatus instance that represents the result of the
-     *         validation
+     * @return An AuthStatus instance that represents the result of the validation
      *
-     * @throws AuthException If the a failure occurred in a manner that
-     *                       prevented the failure from being communicated via
-     *                       messageInfo
+     * @throws AuthException If the a failure occurred in a manner that prevented the failure from being communicated
+     *                           via messageInfo
      */
-    AuthStatus validateRequest(MessageInfo messageInfo, Subject clientSubject,
-            Subject serviceSubject) throws AuthException;
+    AuthStatus validateRequest(MessageInfo messageInfo, Subject clientSubject, Subject serviceSubject)
+            throws AuthException;
 
     /**
      * Secure (authenticate) the response.
      *
-     * @param messageInfo       The associated request and response
-     * @param serviceSubject    The subject that represents the source of the
-     *                          response
+     * @param messageInfo    The associated request and response
+     * @param serviceSubject The subject that represents the source of the response
      *
-     * @return An AuthStatus instance that represents the result of the
-     *         authentication
+     * @return An AuthStatus instance that represents the result of the authentication
      *
-     * @throws AuthException If the a failure occurred in a manner that
-     *                       prevented the failure from being communicated via
-     *                       messageInfo
+     * @throws AuthException If the a failure occurred in a manner that prevented the failure from being communicated
+     *                           via messageInfo
      */
     default AuthStatus secureResponse(MessageInfo messageInfo, Subject serviceSubject) throws AuthException {
         return AuthStatus.SUCCESS;
     }
 
     /**
-     * Remove principals and/or credentials from the subject that were
-     * previously added by this authentication mechanism.
+     * Remove principals and/or credentials from the subject that were previously added by this authentication
+     * mechanism.
      *
-     * @param messageInfo   The associated request and response
-     * @param subject       The subject to clean
+     * @param messageInfo The associated request and response
+     * @param subject     The subject to clean
      *
      * @throws AuthException If the a failure occurred
      */

==================================================
CertStoreCallback.java
index 12ec34d2d0..a7a5f8059c 100644
--- a/java/jakarta/security/auth/message/callback/CallerPrincipalCallback.java
+++ b/java/jakarta/security/auth/message/callback/CallerPrincipalCallback.java
@@ -22,8 +22,8 @@ import javax.security.auth.Subject;
 import javax.security.auth.callback.Callback;
 
 /**
- * Callback that enables an authentication module to inform the runtime of the
- * call principal or name of the caller principal.
+ * Callback that enables an authentication module to inform the runtime of the call principal or name of the caller
+ * principal.
  */
 public class CallerPrincipalCallback implements Callback {
 

==================================================
GroupPrincipalCallback.java
index fde112982f..5a9455b525 100644
--- a/java/jakarta/security/auth/message/callback/CertStoreCallback.java
+++ b/java/jakarta/security/auth/message/callback/CertStoreCallback.java
@@ -21,8 +21,7 @@ import java.security.cert.CertStore;
 import javax.security.auth.callback.Callback;
 
 /**
- * Callback that enables a runtime to inform authentication modules of the
- * CertStore to use.
+ * Callback that enables a runtime to inform authentication modules of the CertStore to use.
  */
 public class CertStoreCallback implements Callback {
 

==================================================
PasswordValidationCallback.java
index 738878abc9..ea5d2eb89f 100644
--- a/java/jakarta/security/auth/message/callback/GroupPrincipalCallback.java
+++ b/java/jakarta/security/auth/message/callback/GroupPrincipalCallback.java
@@ -20,8 +20,7 @@ import javax.security.auth.Subject;
 import javax.security.auth.callback.Callback;
 
 /**
- * Callback that enables an authentication module to inform the runtime of the
- * groups a user is in.
+ * Callback that enables an authentication module to inform the runtime of the groups a user is in.
  */
 public class GroupPrincipalCallback implements Callback {
 

==================================================
PrivateKeyCallback.java
index 5c8fb200bf..9840375acd 100644
--- a/java/jakarta/security/auth/message/callback/PasswordValidationCallback.java
+++ b/java/jakarta/security/auth/message/callback/PasswordValidationCallback.java
@@ -22,8 +22,8 @@ import javax.security.auth.Subject;
 import javax.security.auth.callback.Callback;
 
 /**
- * Callback that enables an authentication module to supply a user name and
- * password (to a runtime?) and determine if the result of validation.
+ * Callback that enables an authentication module to supply a user name and password (to a runtime?) and determine if
+ * the result of validation.
  */
 public class PasswordValidationCallback implements Callback {
 

==================================================
SecretKeyCallback.java
index c489c5166f..dffcb0bed9 100644
--- a/java/jakarta/security/auth/message/callback/PrivateKeyCallback.java
+++ b/java/jakarta/security/auth/message/callback/PrivateKeyCallback.java
@@ -24,9 +24,8 @@ import javax.security.auth.callback.Callback;
 import javax.security.auth.x500.X500Principal;
 
 /**
- * Callback that enables an authentication module to request a certificate chain
- * and private key from the runtime. The information specifying the chain and
- * key may be an alias, a digest, a subject key, or an issuer ID. Other request
+ * Callback that enables an authentication module to request a certificate chain and private key from the runtime. The
+ * information specifying the chain and key may be an alias, a digest, a subject key, or an issuer ID. Other request
  * types may be supported.
  */
 public class PrivateKeyCallback implements Callback {

==================================================
TrustStoreCallback.java
index 7e16ea42da..95dd48851d 100644
--- a/java/jakarta/security/auth/message/callback/SecretKeyCallback.java
+++ b/java/jakarta/security/auth/message/callback/SecretKeyCallback.java
@@ -20,8 +20,8 @@ import javax.crypto.SecretKey;
 import javax.security.auth.callback.Callback;
 
 /**
- * A callback enabling an authentication module to request a secret key from the
- * runtime, by supplying an alias. Other request types may also be supported.
+ * A callback enabling an authentication module to request a secret key from the runtime, by supplying an alias. Other
+ * request types may also be supported.
  */
 public class SecretKeyCallback implements Callback {
 

==================================================
AuthConfigFactory.java
index ca35e37ce7..64ab85678f 100644
--- a/java/jakarta/security/auth/message/callback/TrustStoreCallback.java
+++ b/java/jakarta/security/auth/message/callback/TrustStoreCallback.java
@@ -21,8 +21,7 @@ import java.security.KeyStore;
 import javax.security.auth.callback.Callback;
 
 /**
- * A Callback enabling an authentication module to request a truststore from the
- * runtime.
+ * A Callback enabling an authentication module to request a truststore from the runtime.
  */
 public class TrustStoreCallback implements Callback {
 

==================================================
AuthConfigProvider.java
index c6ccf3cc9f..0fecabc248 100644
--- a/java/jakarta/security/auth/message/config/AuthConfigFactory.java
+++ b/java/jakarta/security/auth/message/config/AuthConfigFactory.java
@@ -72,7 +72,7 @@ public abstract class AuthConfigFactory {
                     // should not be used since that would trigger a memory leak
                     // in container environments.
                     if (className.equals("org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl")) {
-                        factory =  new org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl();
+                        factory = new org.apache.catalina.authenticator.jaspic.AuthConfigFactoryImpl();
                     } else {
                         Class<?> clazz = Class.forName(className);
                         factory = (AuthConfigFactory) clazz.getConstructor().newInstance();
@@ -96,13 +96,12 @@ public abstract class AuthConfigFactory {
     public abstract String registerConfigProvider(String className, Map<String,String> properties, String layer,
             String appContext, String description);
 
-    public abstract String registerConfigProvider(AuthConfigProvider provider, String layer,
-            String appContext, String description);
+    public abstract String registerConfigProvider(AuthConfigProvider provider, String layer, String appContext,
+            String description);
 
     public abstract boolean removeRegistration(String registrationID);
 
-    public abstract String[] detachListener(RegistrationListener listener, String layer,
-            String appContext);
+    public abstract String[] detachListener(RegistrationListener listener, String layer, String appContext);
 
     public abstract String[] getRegistrationIDs(AuthConfigProvider provider);
 
@@ -111,14 +110,12 @@ public abstract class AuthConfigFactory {
     public abstract void refresh();
 
     /**
-     * Convenience method for registering a {@link ServerAuthModule} that should
-     * have the same effect as calling {@link
-     * #registerConfigProvider(AuthConfigProvider, String, String, String)} with
-     * the implementation providing the appropriate {@link AuthConfigProvider}
-     * generated from the provided context.
+     * Convenience method for registering a {@link ServerAuthModule} that should have the same effect as calling
+     * {@link #registerConfigProvider(AuthConfigProvider, String, String, String)} with the implementation providing the
+     * appropriate {@link AuthConfigProvider} generated from the provided context.
      *
-     * @param serverAuthModule  The {@link ServerAuthModule} to register
-     * @param context           The associated application context
+     * @param serverAuthModule The {@link ServerAuthModule} to register
+     * @param context          The associated application context
      *
      * @return A string identifier for the created registration
      *
@@ -127,11 +124,10 @@ public abstract class AuthConfigFactory {
     public abstract String registerServerAuthModule(ServerAuthModule serverAuthModule, Object context);
 
     /**
-     * Convenience method for deregistering a {@link ServerAuthModule} that
-     * should have the same effect as calling
+     * Convenience method for deregistering a {@link ServerAuthModule} that should have the same effect as calling
      * {@link AuthConfigFactory#removeRegistration(String)}.
      *
-     * @param context           The associated application context
+     * @param context The associated application context
      *
      * @since Authentication 3.0
      */

==================================================
ClientAuthModule.java
index 99a47a3dab..3aa912dca6 100644
--- a/java/jakarta/security/auth/message/config/AuthConfigProvider.java
+++ b/java/jakarta/security/auth/message/config/AuthConfigProvider.java
@@ -22,11 +22,9 @@ import jakarta.security.auth.message.AuthException;
 
 public interface AuthConfigProvider {
 
-    ClientAuthConfig getClientAuthConfig(String layer, String appContext, CallbackHandler handler)
-            throws AuthException;
+    ClientAuthConfig getClientAuthConfig(String layer, String appContext, CallbackHandler handler) throws AuthException;
 
-    ServerAuthConfig getServerAuthConfig(String layer, String appContext, CallbackHandler handler)
-            throws AuthException;
+    ServerAuthConfig getServerAuthConfig(String layer, String appContext, CallbackHandler handler) throws AuthException;
 
     void refresh();
 }

==================================================
ServerAuthModule.java
index ab436510e1..b7fa96a006 100644
--- a/java/jakarta/security/auth/message/module/ClientAuthModule.java
+++ b/java/jakarta/security/auth/message/module/ClientAuthModule.java
@@ -26,8 +26,8 @@ import jakarta.security.auth.message.MessagePolicy;
 
 public interface ClientAuthModule extends ClientAuth {
 
-    void initialize(MessagePolicy requestPolicy, MessagePolicy responsePolicy,
-            CallbackHandler handler, Map<String,Object> options) throws AuthException;
+    void initialize(MessagePolicy requestPolicy, MessagePolicy responsePolicy, CallbackHandler handler,
+            Map<String,Object> options) throws AuthException;
 
     Class<?>[] getSupportedMessageTypes();
 }

==================================================
