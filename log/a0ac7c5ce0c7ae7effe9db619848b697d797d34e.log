a0ac7c5ce0c7ae7effe9db619848b697d797d34e
==================================================
Implemented framework for default JASPIC modules registration
==================================================
Mark Thomas
==================================================
Tue Jun 23 09:41:20 2015 +0000
==================================================
TomcatAuthConfig.java
Implemented framework for default JASPIC modules registration
Patch by fjodorver

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1687009 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TomcatAuthConfigProvider.java
new file mode 100644
index 0000000000..018ea5a22f
--- /dev/null
+++ b/java/org/apache/catalina/authenticator/jaspic/provider/TomcatAuthConfig.java
@@ -0,0 +1,93 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.authenticator.jaspic.provider;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Map;
+
+import javax.security.auth.Subject;
+import javax.security.auth.callback.CallbackHandler;
+import javax.security.auth.message.AuthException;
+import javax.security.auth.message.MessageInfo;
+import javax.security.auth.message.config.ServerAuthConfig;
+import javax.security.auth.message.config.ServerAuthContext;
+
+import org.apache.catalina.authenticator.jaspic.provider.modules.TomcatAuthModule;
+
+public class TomcatAuthConfig implements ServerAuthConfig {
+
+    private String messageLayer;
+    private String appContext;
+    private CallbackHandler handler;
+    private TomcatServerAuthContext tomcatServerAuthContext;
+
+
+    public TomcatAuthConfig(String layer, String appContext, CallbackHandler callbackHandler) {
+        this.messageLayer = layer;
+        this.appContext = appContext;
+        this.handler = callbackHandler;
+    }
+
+
+    @Override
+    public String getMessageLayer() {
+        return messageLayer;
+    }
+
+
+    @Override
+    public String getAppContext() {
+        return appContext;
+    }
+
+
+    @Override
+    public String getAuthContextID(MessageInfo messageInfo) {
+        return messageInfo.toString();
+    }
+
+
+    @Override
+    public void refresh() {
+
+    }
+
+
+    @Override
+    public boolean isProtected() {
+        return false;
+    }
+
+
+    @Override
+    @SuppressWarnings("rawtypes")
+    public synchronized ServerAuthContext getAuthContext(String authContextID,
+            Subject serviceSubject, Map properties) throws AuthException {
+        if (this.tomcatServerAuthContext == null) {
+            this.tomcatServerAuthContext = new TomcatServerAuthContext(handler, getModules());
+        }
+        return tomcatServerAuthContext;
+    }
+
+
+    private Collection<TomcatAuthModule> getModules() {
+        List<TomcatAuthModule> modules = new ArrayList<>();
+        return modules;
+    }
+}

==================================================
TomcatServerAuthContext.java
new file mode 100644
index 0000000000..7de3bc43b6
--- /dev/null
+++ b/java/org/apache/catalina/authenticator/jaspic/provider/TomcatAuthConfigProvider.java
@@ -0,0 +1,67 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.authenticator.jaspic.provider;
+
+import java.util.Map;
+
+import javax.security.auth.callback.CallbackHandler;
+import javax.security.auth.message.AuthException;
+import javax.security.auth.message.config.AuthConfigFactory;
+import javax.security.auth.message.config.AuthConfigProvider;
+import javax.security.auth.message.config.ClientAuthConfig;
+import javax.security.auth.message.config.ServerAuthConfig;
+
+public class TomcatAuthConfigProvider implements AuthConfigProvider {
+
+    private Map<String, String> providerProperties;
+    private ServerAuthConfig serverAuthConfig;
+
+
+    public TomcatAuthConfigProvider() {
+    }
+
+
+    public TomcatAuthConfigProvider(Map<String, String> properties, AuthConfigFactory factory) {
+        this.providerProperties = properties;
+        if (factory != null) {
+            factory.registerConfigProvider(this, null, null, "Auto registration");
+        }
+    }
+
+
+    @Override
+    public ClientAuthConfig getClientAuthConfig(String layer, String appContext,
+            CallbackHandler handler) throws AuthException {
+        return null;
+    }
+
+
+    @Override
+    public synchronized ServerAuthConfig getServerAuthConfig(String layer, String appContext,
+            CallbackHandler handler) throws AuthException {
+        if (this.serverAuthConfig == null) {
+            this.serverAuthConfig = new TomcatAuthConfig(layer, appContext, handler);
+        }
+        return this.serverAuthConfig;
+    }
+
+
+    @Override
+    public void refresh() {
+        serverAuthConfig.refresh();
+    }
+}

==================================================
TomcatAuthModule.java
new file mode 100644
index 0000000000..1f02618a10
--- /dev/null
+++ b/java/org/apache/catalina/authenticator/jaspic/provider/TomcatServerAuthContext.java
@@ -0,0 +1,92 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.authenticator.jaspic.provider;
+
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.security.auth.Subject;
+import javax.security.auth.callback.CallbackHandler;
+import javax.security.auth.message.AuthException;
+import javax.security.auth.message.AuthStatus;
+import javax.security.auth.message.MessageInfo;
+import javax.security.auth.message.config.ServerAuthContext;
+import javax.security.auth.message.module.ServerAuthModule;
+
+import org.apache.catalina.authenticator.jaspic.MessageInfoImpl;
+import org.apache.catalina.authenticator.jaspic.provider.modules.TomcatAuthModule;
+
+/**
+ * This class contains references to different JASPIC modules.
+ */
+public class TomcatServerAuthContext implements ServerAuthContext {
+
+    private Map<String, ServerAuthModule> serverAuthModules = new HashMap<>();
+
+
+    public TomcatServerAuthContext(CallbackHandler handler, Collection<TomcatAuthModule> modules)
+            throws AuthException {
+        for (TomcatAuthModule module : modules) {
+            // TODO discuss message policies
+            module.initialize(null, null, handler, Collections.emptyMap());
+            serverAuthModules.put(getAuthType(module), module);
+        }
+    }
+
+
+    private String getAuthType(TomcatAuthModule module) {
+        // TODO temporary workaround. In future JASPIC prefix will be removed
+        return "JASPIC-" + module.getAuthenticationType();
+    }
+
+
+    @Override
+    public AuthStatus validateRequest(MessageInfo messageInfo, Subject clientSubject,
+            Subject serviceSubject) throws AuthException {
+        ServerAuthModule module = getAuthModule(messageInfo);
+        return module.validateRequest(messageInfo, clientSubject, serviceSubject);
+    }
+
+
+    @Override
+    public AuthStatus secureResponse(MessageInfo messageInfo, Subject serviceSubject)
+            throws AuthException {
+        ServerAuthModule module = getAuthModule(messageInfo);
+        return module.secureResponse(messageInfo, serviceSubject);
+    }
+
+
+    @Override
+    public void cleanSubject(MessageInfo messageInfo, Subject subject) throws AuthException {
+        ServerAuthModule module = getAuthModule(messageInfo);
+        module.cleanSubject(messageInfo, subject);
+    }
+
+
+    @SuppressWarnings("rawtypes")
+    private ServerAuthModule getAuthModule(MessageInfo messageInfo) throws AuthException {
+        Map properties = messageInfo.getMap();
+        String authenticationType = (String) properties.get(MessageInfoImpl.AUTH_METHOD);
+        ServerAuthModule module = serverAuthModules.get(authenticationType);
+        if (module == null) {
+            throw new AuthException("Unknown auth module");// TODO message i18n
+        }
+        return module;
+    }
+}

==================================================
ContextConfig.java
new file mode 100644
index 0000000000..6151bca1ba
--- /dev/null
+++ b/java/org/apache/catalina/authenticator/jaspic/provider/modules/TomcatAuthModule.java
@@ -0,0 +1,55 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.authenticator.jaspic.provider.modules;
+
+import javax.security.auth.message.MessageInfo;
+import javax.security.auth.message.module.ServerAuthModule;
+
+import org.apache.catalina.authenticator.jaspic.MessageInfoImpl;
+import org.apache.tomcat.util.res.StringManager;
+
+public abstract class TomcatAuthModule implements ServerAuthModule {
+
+    protected static final String AUTH_HEADER_NAME = "WWW-Authenticate";
+    protected static final String AUTHORIZATION_HEADER = "authorization";
+    /**
+     * Default authentication realm name.
+     */
+    protected static final String REALM_NAME = "Authentication required";
+    /**
+     * The string manager for this package.
+     */
+    protected static final StringManager sm = StringManager.getManager(TomcatAuthModule.class);
+
+
+    public abstract String getAuthenticationType();
+
+
+    protected boolean isMandatory(MessageInfo messageInfo) {
+        String mandatory = (String) messageInfo.getMap().get(MessageInfoImpl.IS_MANDATORY);
+        return Boolean.valueOf(mandatory).booleanValue();
+    }
+
+
+    protected static String getRealmName(MessageInfo messageInfo) {
+        if (messageInfo == null) {
+            return REALM_NAME;
+        }
+        // TODO get realm name from message
+        return REALM_NAME;
+    }
+}

==================================================
