0775e5c926277c912370c026a5cd563f67ab9c65
==================================================
Move code that parses EL expressions within JSP template text from Parser to JspReader class.
==================================================
Konstantin Kolinko
==================================================
Wed Jun 11 15:23:25 2014 +0000
==================================================
JspReader.java
Move code that parses EL expressions within JSP template text from Parser to JspReader class.
This is done to get access to JspReader.nextChar(mark) to avoid calling reader.mark() in a loop, as that method allocates new Mark object on each call.

Also removed duplicate "start = reader.mark();" call, as parseELExpression() does update 'start'.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1601924 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Parser.java
index 09b2e9db3b..c377658f8b 100644
--- a/java/org/apache/jasper/compiler/JspReader.java
+++ b/java/org/apache/jasper/compiler/JspReader.java
@@ -484,6 +484,58 @@ class JspReader {
         return ret;
     }
 
+    /**
+     * Parse ELExpressionBody that is a body of ${} or #{} expression. Initial
+     * reader position is expected to be just after '${' or '#{' characters.
+     * <p>
+     * In case of success, this method returns <code>Mark</code> for the last
+     * character before the terminating '}' and reader is positioned just after
+     * the '}' character. If no terminating '}' is encountered, this method
+     * returns <code>null</code>.
+     * <p>
+     * Starting with EL 3.0, nested paired {}s are supported.
+     *
+     * @return Mark for the last character of EL expression or <code>null</code>
+     */
+    Mark skipELExpression() throws JasperException {
+        // ELExpressionBody.
+        //  Starts with "#{" or "${".  Ends with "}".
+        //  May contain quoted "{", "}", '{', or '}' and nested "{...}"
+        Mark last = mark();
+        boolean singleQuoted = false;
+        boolean doubleQuoted = false;
+        int nesting = 0;
+        int currentChar;
+        do {
+            currentChar = nextChar(last);
+            while (currentChar == '\\' && (singleQuoted || doubleQuoted)) {
+                // skip character following '\' within quotes
+                // No need to update 'last', as neither of these characters
+                // can be the closing '}'.
+                nextChar();
+                currentChar = nextChar();
+            }
+            if (currentChar == -1) {
+                return null;
+            }
+            if (currentChar == '"' && !singleQuoted) {
+                doubleQuoted = !doubleQuoted;
+            } else if (currentChar == '\'' && !doubleQuoted) {
+                singleQuoted = !singleQuoted;
+            } else if (currentChar == '{' && !doubleQuoted && !singleQuoted) {
+                nesting++;
+            } else if (currentChar =='}' && !doubleQuoted && !singleQuoted) {
+                // Note: This also matches the terminating '}' at which point
+                //       nesting will be set to -1 - hence the test for
+                //       while (currentChar != '}' || nesting > -1 ||...) below
+                //       to continue the loop until the final '}' is detected
+                nesting--;
+            }
+        } while (currentChar != '}' || singleQuoted || doubleQuoted || nesting > -1);
+
+        return last;
+    }
+
     final boolean isSpace() throws JasperException {
         // Note: If this logic changes, also update Node.TemplateText.rtrim()
         return peekChar() <= ' ';

==================================================
