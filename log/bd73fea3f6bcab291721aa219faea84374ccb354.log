bd73fea3f6bcab291721aa219faea84374ccb354
==================================================
Remove listener calls optimizations, they skip a lot of things which could be useful and ultimately it doesn't work that well.
==================================================
Remy Maucherat
==================================================
Fri May 30 07:48:34 2014 +0000
==================================================
Nio2ServletInputStream.java
Remove listener calls optimizations, they skip a lot of things which could be useful and ultimately it doesn't work that well.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1598480 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Nio2ServletOutputStream.java
index 597e4876a1..0fffb6f89b 100644
--- a/java/org/apache/coyote/http11/upgrade/Nio2ServletInputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/Nio2ServletInputStream.java
@@ -40,7 +40,7 @@ public class Nio2ServletInputStream extends AbstractServletInputStream {
     private final CompletionHandler<Integer, SocketWrapper<Nio2Channel>> completionHandler;
     private boolean flipped = false;
     private volatile boolean readPending = false;
-    private volatile boolean fireListener = false;
+    private volatile boolean interest = false;
 
     public Nio2ServletInputStream(SocketWrapper<Nio2Channel> wrapper, AbstractEndpoint<Nio2Channel> endpoint0) {
         this.endpoint = endpoint0;
@@ -49,31 +49,21 @@ public class Nio2ServletInputStream extends AbstractServletInputStream {
         this.completionHandler = new CompletionHandler<Integer, SocketWrapper<Nio2Channel>>() {
             @Override
             public void completed(Integer nBytes, SocketWrapper<Nio2Channel> attachment) {
-                boolean fire = false;
+                boolean notify = false;
                 synchronized (completionHandler) {
                     if (nBytes.intValue() < 0) {
                         failed(new EOFException(), attachment);
-                        return;
-                    }
-                    readPending = false;
-                    fire = fireListener;
-                    fireListener = false;
-                }
-                if (nBytes.intValue() > 0) {
-                    if (!Nio2Endpoint.isInline() && fire) {
-                        try {
-                            onDataAvailable();
-                        } catch (IOException e) {
-                            failed(e, attachment);
+                    } else {
+                        readPending = false;
+                        if (interest && !Nio2Endpoint.isInline()) {
+                            interest = false;
+                            notify = true;
                         }
                     }
-                } else {
-                    try {
-                        onAllDataRead();
-                    } catch (IOException e) {
-                        failed(e, attachment);
-                    }
                 }
+                if (notify) {
+                    endpoint.processSocket(attachment, SocketStatus.OPEN_READ, false);
+                } 
             }
             @Override
             public void failed(Throwable exc, SocketWrapper<Nio2Channel> attachment) {
@@ -93,7 +83,7 @@ public class Nio2ServletInputStream extends AbstractServletInputStream {
     protected boolean doIsReady() throws IOException {
         synchronized (completionHandler) {
             if (readPending) {
-                fireListener = true;
+                interest = true;
                 return false;
             }
             ByteBuffer readBuffer = channel.getBufHandler().getReadBuffer();
@@ -116,7 +106,7 @@ public class Nio2ServletInputStream extends AbstractServletInputStream {
                     flipped = true;
                 }
             } else {
-                fireListener = true;
+                interest = true;
             }
             return isReady;
         }

==================================================
