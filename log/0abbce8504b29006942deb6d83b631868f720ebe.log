0abbce8504b29006942deb6d83b631868f720ebe
==================================================
Use Pattern.quote() as suggested by kkolinko
==================================================
Mark Emlyn
==================================================
Mon Dec 3 09:47:56 2012 +0000
==================================================
UriTemplate.java
index c55f32f322..805c3c94f7 100644
--- a/java/org/apache/tomcat/websocket/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/LocalStrings.properties
@@ -17,4 +17,5 @@ serverContainer.endpointDeploy=Endpoint class [{0}] deploying to path [{1}] in S
 serverContainer.missingEndpoint=An Endpoint instance has been request for path [{0}] but no matching Endpoint class was found
 serverContainer.pojoDeploy=POJO class [{0}] deploying to path [{1}] in ServletContext [{2}]
 serverContainer.servletContextMismatch=Attempted to register a POJO annotated for WebSocket at path [{0}] in the ServletContext with context path [{1}] when the WebSocket ServerContainer is allocated to the ServletContext with context path [{2}]
-serverContainer.servletContextMissing=No ServletContext was specified
\ No newline at end of file
+serverContainer.servletContextMissing=No ServletContext was specified
+uriTemplate.noMatch=The input template [{0}] generated the pattern [{1}] which did not match the supplied pathInfo [{2}]
\ No newline at end of file

==================================================
TestUriTemplate.java
index b6c1856c31..d63f0c0488 100644
--- a/java/org/apache/tomcat/websocket/UriTemplate.java
+++ b/java/org/apache/tomcat/websocket/UriTemplate.java
@@ -23,28 +23,36 @@ import java.util.Map;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import org.apache.tomcat.util.res.StringManager;
+
 /**
  * Extracts path parameters from URIs used to create web socket connections
  * using the URI template defined for the associated Endpoint.
  */
 public class UriTemplate {
 
+    private static StringManager sm = StringManager.getManager(
+            Constants.PACKAGE_NAME);
+
+    private final String template;
     private final Pattern pattern;
     private final List<String> names = new ArrayList<>();
 
     public UriTemplate(String template) {
+
+        this.template = template;
+
         // +10 is just a guess at this point
         StringBuilder pattern = new StringBuilder(template.length() + 10);
 
-
         int pos = 0;
         int end = 0;
         int start = template.indexOf('{');
         while (start > -1) {
             end = template.indexOf('}', start);
             pattern.append('(');
-            pattern.append(template.substring(pos, start));
-            pattern.append(")?([^/]*)");
+            pattern.append(Pattern.quote(template.substring(pos, start)));
+            pattern.append(")([^/]*)");
             names.add(template.substring(start + 1, end));
             pos = end + 1;
             start = template.indexOf('{', pos);
@@ -77,7 +85,11 @@ public class UriTemplate {
     public Map<String,String> match(String pathInfo) {
         Map<String,String> result = new HashMap<>();
         Matcher m = pattern.matcher(pathInfo);
-        m.matches();
+
+        if (!m.matches()) {
+            throw new IllegalArgumentException(sm.getString(
+                    "uriTemplate.noMatch", template, pattern, pathInfo));
+        }
 
         int group = 2;
         for (String name : names) {

==================================================
