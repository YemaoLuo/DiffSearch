1f6deab20d35921ca2c65f9b299e4ea6aec0fe6a
==================================================
59295: Add support for using pem encoded certificates with JSSE SSL. Submitted by Emmanuel Bourg with additional tweaks.
==================================================
Remy Maucherat
==================================================
Tue Apr 26 09:02:06 2016 +0000
==================================================
SSLHostConfigCertificate.java
index 13bc5e58c8..2da9274c15 100644
--- a/java/org/apache/tomcat/util/net/LocalStrings.properties
+++ b/java/org/apache/tomcat/util/net/LocalStrings.properties
@@ -121,6 +121,7 @@ sslHostConfig.certificateVerificationInvalid=The certificate verification value
 sslHostConfig.certificate.notype=Multiple certificates were specified and at least one is missing the required attribute type
 sslHostConfig.mismatch=The property [{0}] was set on the SSLHostConfig named [{1}] and is for connectors of type [{2}] but the SSLHostConfig is being used with a connector of type [{3}]
 sslHostConfig.prefix_missing=The protocol [{0}] was added to the list of protocols on the SSLHostConfig named [{1}]. Check if a +/- prefix is missing.
+sslHostConfigCertificate.mismatch=The property [{0}] was set on the SSLHostConfigCertificate named [{1}] and is for certificate storage type [{2}] but the certificate is being used with a storage of type [{3}]
 
 sslImplementation.cnfe= Unable to create SSLImplementation for class [{0}]
 

==================================================
JSSEUtil.java
index 678ce9c810..0b992ad1bd 100644
--- a/java/org/apache/tomcat/util/net/SSLHostConfigCertificate.java
+++ b/java/org/apache/tomcat/util/net/SSLHostConfigCertificate.java
@@ -19,11 +19,17 @@ package org.apache.tomcat.util.net;
 import java.util.HashSet;
 import java.util.Set;
 
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.openssl.ciphers.Authentication;
+import org.apache.tomcat.util.res.StringManager;
 
 
 public class SSLHostConfigCertificate {
 
+    private static final Log log = LogFactory.getLog(SSLHostConfigCertificate.class);
+    private static final StringManager sm = StringManager.getManager(SSLHostConfigCertificate.class);
+
     public static final Type DEFAULT_TYPE = Type.UNDEFINED;
 
     static final String DEFAULT_KEYSTORE_PROVIDER =
@@ -53,6 +59,8 @@ public class SSLHostConfigCertificate {
     private String certificateFile;
     private String certificateKeyFile;
 
+    // Certificate store type
+    private StoreType storeType = null;
 
     public SSLHostConfigCertificate() {
         this(null, Type.UNDEFINED);
@@ -113,6 +121,7 @@ public class SSLHostConfigCertificate {
     public void setCertificateKeystoreFile(String certificateKeystoreFile) {
         sslHostConfig.setProperty(
                 "Certificate.certificateKeystoreFile", SSLHostConfig.Type.JSSE);
+        setStoreType("Certificate.certificateKeystoreFile", StoreType.KEYSTORE);
         this.certificateKeystoreFile = certificateKeystoreFile;
     }
 
@@ -125,6 +134,7 @@ public class SSLHostConfigCertificate {
     public void setCertificateKeystorePassword(String certificateKeystorePassword) {
         sslHostConfig.setProperty(
                 "Certificate.certificateKeystorePassword", SSLHostConfig.Type.JSSE);
+        setStoreType("Certificate.certificateKeystorePassword", StoreType.KEYSTORE);
         this.certificateKeystorePassword = certificateKeystorePassword;
     }
 
@@ -137,6 +147,7 @@ public class SSLHostConfigCertificate {
     public void setCertificateKeystoreProvider(String certificateKeystoreProvider) {
         sslHostConfig.setProperty(
                 "Certificate.certificateKeystoreProvider", SSLHostConfig.Type.JSSE);
+        setStoreType("Certificate.certificateKeystoreProvider", StoreType.KEYSTORE);
         this.certificateKeystoreProvider = certificateKeystoreProvider;
     }
 
@@ -149,6 +160,7 @@ public class SSLHostConfigCertificate {
     public void setCertificateKeystoreType(String certificateKeystoreType) {
         sslHostConfig.setProperty(
                 "Certificate.certificateKeystoreType", SSLHostConfig.Type.JSSE);
+        setStoreType("Certificate.certificateKeystoreType", StoreType.KEYSTORE);
         this.certificateKeystoreType = certificateKeystoreType;
     }
 
@@ -161,8 +173,7 @@ public class SSLHostConfigCertificate {
     // OpenSSL
 
     public void setCertificateChainFile(String certificateChainFile) {
-        sslHostConfig.setProperty(
-                "Certificate.certificateChainFile", SSLHostConfig.Type.OPENSSL);
+        setStoreType("Certificate.certificateChainFile", StoreType.PEM);
         this.certificateChainFile = certificateChainFile;
     }
 
@@ -173,8 +184,7 @@ public class SSLHostConfigCertificate {
 
 
     public void setCertificateFile(String certificateFile) {
-        sslHostConfig.setProperty(
-                "Certificate.certificateFile", SSLHostConfig.Type.OPENSSL);
+        setStoreType("Certificate.certificateFile", StoreType.PEM);
         this.certificateFile = certificateFile;
     }
 
@@ -185,8 +195,7 @@ public class SSLHostConfigCertificate {
 
 
     public void setCertificateKeyFile(String certificateKeyFile) {
-        sslHostConfig.setProperty(
-                "Certificate.certificateKeyFile", SSLHostConfig.Type.OPENSSL);
+        setStoreType("Certificate.certificateKeyFile", StoreType.PEM);
         this.certificateKeyFile = certificateKeyFile;
     }
 
@@ -196,6 +205,15 @@ public class SSLHostConfigCertificate {
     }
 
 
+    private void setStoreType(String name, StoreType type) {
+        if (storeType == null) {
+            storeType = type;
+        } else if (storeType != type) {
+            log.warn(sm.getString("sslHostConfigCertificate.mismatch",
+                    name, sslHostConfig.getHostName(), type, this.storeType));
+        }
+    }
+
     // Nested types
 
     public static enum Type {
@@ -220,4 +238,7 @@ public class SSLHostConfigCertificate {
             return compatibleAuthentications.contains(au);
         }
     }
+
+    private static enum StoreType { KEYSTORE, PEM };
+
 }

==================================================
PEMFile.java
index e53212d9c0..3c78d52a4d 100644
--- a/java/org/apache/tomcat/util/net/jsse/LocalStrings.properties
+++ b/java/org/apache/tomcat/util/net/jsse/LocalStrings.properties
@@ -25,6 +25,9 @@ jsse.excludeDefaultProtocol=The SSL protocol [{0}] which is enabled by default i
 jsse.noDefaultCiphers=Unable to determine a default for ciphers for [{0}]. Set an explicit value to ensure the connector can start.
 jsse.noDefaultProtocols=Unable to determine a default for sslEnabledProtocols. Set an explicit value to ensure the connector can start.
 jsse.exceptionOnClose=Failure to close socket.
+jsse.noPrivateKey=No private key specified for certificate.
+jsse.pemParseError=Unable to parse the private key from [{0}]
+
 jsseSupport.clientCertError=Error trying to obtain a certificate from the client
 jseeSupport.certTranslationError=Error translating certificate [{0}]
 jsseSupport.noCertWant=No client certificate sent for want

==================================================
