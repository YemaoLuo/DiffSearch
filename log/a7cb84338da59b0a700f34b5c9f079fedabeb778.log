a7cb84338da59b0a700f34b5c9f079fedabeb778
==================================================
Pull up common getInputBuffer and getOutputBuffer methods
==================================================
Mark Thomas
==================================================
Sun Nov 23 22:51:44 2014 +0000
==================================================
AbstractHttp11Processor.java
Pull up common getInputBuffer and getOutputBuffer methods

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1641292 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index c38c0966cc..367ce6cfaa 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -72,7 +72,7 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
     /**
      * Input.
      */
-    protected AbstractInputBuffer<S> inputBuffer ;
+    protected AbstractInputBuffer<S> inputBuffer;
 
 
     /**
@@ -629,14 +629,18 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
      * Exposes input buffer to super class to allow better code re-use.
      * @return  The input buffer used by the processor.
      */
-    protected abstract AbstractInputBuffer<S> getInputBuffer();
+    protected AbstractInputBuffer<S> getInputBuffer() {
+        return inputBuffer;
+    }
 
 
     /**
      * Exposes output buffer to super class to allow better code re-use.
      * @return  The output buffer used by the processor.
      */
-    protected abstract AbstractOutputBuffer<S> getOutputBuffer();
+    protected AbstractOutputBuffer<S> getOutputBuffer() {
+        return outputBuffer;
+    }
 
 
     /**
@@ -863,7 +867,7 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
             break;
         }
         case AVAILABLE: {
-            request.setAvailable(inputBuffer.available());
+            request.setAvailable(getInputBuffer().available());
             break;
         }
         case NB_WRITE_INTEREST: {
@@ -1629,7 +1633,7 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
         } else if (status == SocketStatus.OPEN_READ &&
                 request.getReadListener() != null) {
             try {
-                if (inputBuffer.available() > 0) {
+                if (getInputBuffer().available() > 0) {
                     asyncStateMachine.asyncOperation();
                 }
             } catch (IllegalStateException x) {
@@ -1770,7 +1774,7 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
 
     @Override
     public ByteBuffer getLeftoverInput() {
-        return inputBuffer.getLeftover();
+        return getInputBuffer().getLeftover();
     }
 
 }

==================================================
Http11Nio2Processor.java
index 5787f46ea6..df732863aa 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -58,10 +58,10 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
         super(endpoint);
 
         inputBuffer = new InternalAprInputBuffer(request, headerBufferSize);
-        request.setInputBuffer(inputBuffer);
+        request.setInputBuffer(getInputBuffer());
 
         outputBuffer = new InternalAprOutputBuffer(response, headerBufferSize);
-        response.setOutputBuffer(outputBuffer);
+        response.setOutputBuffer(getOutputBuffer());
 
         initializeFilters(maxTrailerSize, maxExtensionSize, maxSwallowSize);
     }
@@ -337,9 +337,9 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
             if (endpoint.isSSLEnabled() && (socketRef != 0)) {
                 // Consume and buffer the request body, so that it does not
                 // interfere with the client's handshake messages
-                InputFilter[] inputFilters = inputBuffer.getFilters();
+                InputFilter[] inputFilters = getInputBuffer().getFilters();
                 ((BufferedInputFilter) inputFilters[Constants.BUFFERED_FILTER]).setLimit(maxSavePostSize);
-                inputBuffer.addActiveFilter(inputFilters[Constants.BUFFERED_FILTER]);
+                getInputBuffer().addActiveFilter(inputFilters[Constants.BUFFERED_FILTER]);
                 try {
                     // Configure connection to require a certificate
                     SSLSocket.setVerify(socketRef, SSL.SSL_CVERIFY_REQUIRE,
@@ -389,7 +389,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
                 org.apache.coyote.Constants.SENDFILE_FILENAME_ATTR);
         if (fileName != null) {
             // No entity body sent here
-            outputBuffer.addActiveFilter(outputFilters[Constants.VOID_FILTER]);
+            getOutputBuffer().addActiveFilter(outputFilters[Constants.VOID_FILTER]);
             contentDelimitation = true;
             sendfileData = new AprEndpoint.SendfileData();
             sendfileData.fileName = fileName;
@@ -401,14 +401,4 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
         }
         return false;
     }
-
-    @Override
-    protected AbstractInputBuffer<Long> getInputBuffer() {
-        return inputBuffer;
-    }
-
-    @Override
-    protected AbstractOutputBuffer<Long> getOutputBuffer() {
-        return outputBuffer;
-    }
 }

==================================================
Http11NioProcessor.java
index 2e26e97713..658412fd63 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Processor.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Processor.java
@@ -62,10 +62,10 @@ public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
         super(endpoint);
 
         inputBuffer = new InternalNio2InputBuffer(request, maxHttpHeaderSize);
-        request.setInputBuffer(inputBuffer);
+        request.setInputBuffer(getInputBuffer());
 
         outputBuffer = new InternalNio2OutputBuffer(response, maxHttpHeaderSize);
-        response.setOutputBuffer(outputBuffer);
+        response.setOutputBuffer(getOutputBuffer());
 
         initializeFilters(maxTrailerSize, maxExtensionSize, maxSwallowSize);
     }
@@ -84,7 +84,7 @@ public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
     @Override
     public SocketState asyncDispatch(SocketStatus status) {
         SocketState state = super.asyncDispatch(status);
-        if (state == SocketState.OPEN && ((InternalNio2InputBuffer) inputBuffer).isPending()) {
+        if (state == SocketState.OPEN && ((InternalNio2InputBuffer) getInputBuffer()).isPending()) {
             // Following async processing, a read is still pending, so
             // keep the processor associated
             return SocketState.LONG;
@@ -96,10 +96,10 @@ public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
     @Override
     protected void registerForEvent(boolean read, boolean write) {
         if (read) {
-            ((InternalNio2InputBuffer) inputBuffer).registerReadInterest();
+            ((InternalNio2InputBuffer) getInputBuffer()).registerReadInterest();
         }
         if (write) {
-            ((InternalNio2OutputBuffer) outputBuffer).registerWriteInterest();
+            ((InternalNio2OutputBuffer) getOutputBuffer()).registerWriteInterest();
         }
     }
 
@@ -127,7 +127,7 @@ public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
         openSocket = true;
         // Check to see if we have read any of the request line yet
         if (((InternalNio2InputBuffer)
-                inputBuffer).getParsingRequestLinePhase() < 1) {
+                getInputBuffer()).getParsingRequestLinePhase() < 1) {
             if (keptAlive) {
                 // Haven't read the request line and have previously processed a
                 // request. Must be keep-alive. Make sure poller uses keepAlive.
@@ -357,10 +357,10 @@ public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
                  * Consume and buffer the request body, so that it does not
                  * interfere with the client's handshake messages
                  */
-                InputFilter[] inputFilters = inputBuffer.getFilters();
+                InputFilter[] inputFilters = getInputBuffer().getFilters();
                 ((BufferedInputFilter) inputFilters[Constants.BUFFERED_FILTER])
                     .setLimit(maxSavePostSize);
-                inputBuffer.addActiveFilter
+                getInputBuffer().addActiveFilter
                     (inputFilters[Constants.BUFFERED_FILTER]);
                 SecureNio2Channel sslChannel = (SecureNio2Channel) socketWrapper.getSocket();
                 SSLEngine engine = sslChannel.getSslEngine();
@@ -409,7 +409,7 @@ public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
                 org.apache.coyote.Constants.SENDFILE_FILENAME_ATTR);
         if (fileName != null) {
             // No entity body sent here
-            outputBuffer.addActiveFilter(outputFilters[Constants.VOID_FILTER]);
+            getOutputBuffer().addActiveFilter(outputFilters[Constants.VOID_FILTER]);
             contentDelimitation = true;
             sendfileData = new Nio2Endpoint.SendfileData();
             sendfileData.fileName = fileName;
@@ -422,16 +422,6 @@ public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
         return false;
     }
 
-    @Override
-    protected AbstractInputBuffer<Nio2Channel> getInputBuffer() {
-        return inputBuffer;
-    }
-
-    @Override
-    protected AbstractOutputBuffer<Nio2Channel> getOutputBuffer() {
-        return outputBuffer;
-    }
-
     /**
      * Set the SSL information for this HTTP connection.
      */

==================================================
