ddfa7e68864d9ad691f4f9eac3bee14290ddd40d
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60381
==================================================
Mark Thomas
==================================================
Fri Nov 25 09:35:20 2016 +0000
==================================================
StandardPipeline.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60381
Provide a standard toString() implementation for components that implement Contained.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1771263 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SimpleTcpCluster.java
index 5280250a29..5bc9e99c97 100644
--- a/java/org/apache/catalina/core/StandardPipeline.java
+++ b/java/org/apache/catalina/core/StandardPipeline.java
@@ -32,6 +32,7 @@ import org.apache.catalina.LifecycleState;
 import org.apache.catalina.Pipeline;
 import org.apache.catalina.Valve;
 import org.apache.catalina.util.LifecycleBase;
+import org.apache.catalina.util.ToStringUtil;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.ExceptionUtils;
@@ -213,10 +214,7 @@ public class StandardPipeline extends LifecycleBase implements Pipeline {
      */
     @Override
     public String toString() {
-        StringBuilder sb = new StringBuilder("Pipeline[");
-        sb.append(container);
-        sb.append(']');
-        return sb.toString();
+        return ToStringUtil.toString(this);
     }
 
 

==================================================
WebappLoader.java
index 8b66625e13..053ec1a65f 100644
--- a/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java
+++ b/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java
@@ -55,6 +55,7 @@ import org.apache.catalina.tribes.group.GroupChannel;
 import org.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor;
 import org.apache.catalina.tribes.group.interceptors.TcpFailureDetector;
 import org.apache.catalina.util.LifecycleMBeanBase;
+import org.apache.catalina.util.ToStringUtil;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.res.StringManager;
@@ -639,15 +640,7 @@ public class SimpleTcpCluster extends LifecycleMBeanBase
      */
     @Override
     public String toString() {
-        StringBuilder sb = new StringBuilder(this.getClass().getName());
-        sb.append('[');
-        if (container == null) {
-            sb.append("Container is null");
-        } else {
-            sb.append(container.getName());
-        }
-        sb.append(']');
-        return sb.toString();
+        return ToStringUtil.toString(this);
     }
 
 

==================================================
RealmBase.java
index 826aa37d4c..91c6dc5e07 100644
--- a/java/org/apache/catalina/loader/WebappLoader.java
+++ b/java/org/apache/catalina/loader/WebappLoader.java
@@ -38,6 +38,7 @@ import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleState;
 import org.apache.catalina.Loader;
 import org.apache.catalina.util.LifecycleMBeanBase;
+import org.apache.catalina.util.ToStringUtil;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.ExceptionUtils;
@@ -360,11 +361,7 @@ public class WebappLoader extends LifecycleMBeanBase
      */
     @Override
     public String toString() {
-        StringBuilder sb = new StringBuilder("WebappLoader[");
-        if (context != null)
-            sb.append(context.getName());
-        sb.append("]");
-        return (sb.toString());
+        return ToStringUtil.toString(this, context);
     }
 
 

==================================================
ManagerBase.java
index 984eabccc2..c6f31f7800 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -49,6 +49,7 @@ import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
 import org.apache.catalina.util.LifecycleMBeanBase;
 import org.apache.catalina.util.SessionConfig;
+import org.apache.catalina.util.ToStringUtil;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.IntrospectionUtils;
@@ -1101,10 +1102,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
      */
     @Override
     public String toString() {
-        StringBuilder sb = new StringBuilder("Realm[");
-        sb.append(getName());
-        sb.append(']');
-        return sb.toString();
+        return ToStringUtil.toString(this);
     }
 
 

==================================================
StoreBase.java
index 5b135a91ef..b8988f915e 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -47,6 +47,7 @@ import org.apache.catalina.SessionIdGenerator;
 import org.apache.catalina.util.LifecycleMBeanBase;
 import org.apache.catalina.util.SessionIdGeneratorBase;
 import org.apache.catalina.util.StandardSessionIdGenerator;
+import org.apache.catalina.util.ToStringUtil;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.res.StringManager;
@@ -1213,15 +1214,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase implements Manager
 
     @Override
     public String toString() {
-        StringBuilder sb = new StringBuilder(this.getClass().getName());
-        sb.append('[');
-        if (context == null) {
-            sb.append("Context is null");
-        } else {
-            sb.append(context.getName());
-        }
-        sb.append(']');
-        return sb.toString();
+        return ToStringUtil.toString(this, context);
     }
 
 

==================================================
Tomcat.java
index 09c88e01db..9ce0fd9564 100644
--- a/java/org/apache/catalina/session/StoreBase.java
+++ b/java/org/apache/catalina/session/StoreBase.java
@@ -30,6 +30,7 @@ import org.apache.catalina.Manager;
 import org.apache.catalina.Store;
 import org.apache.catalina.util.CustomObjectInputStream;
 import org.apache.catalina.util.LifecycleBase;
+import org.apache.catalina.util.ToStringUtil;
 import org.apache.tomcat.util.res.StringManager;
 
 /**
@@ -277,14 +278,6 @@ public abstract class StoreBase extends LifecycleBase implements Store {
      */
     @Override
     public String toString() {
-        StringBuilder sb = new StringBuilder(this.getClass().getName());
-        sb.append('[');
-        if (manager == null) {
-            sb.append("Manager is null");
-        } else {
-            sb.append(manager);
-        }
-        sb.append(']');
-        return sb.toString();
+        return ToStringUtil.toString(this, manager);
     }
 }

==================================================
ToStringUtil.java
index 6d68d00ac4..0b35d2a1a7 100644
--- a/java/org/apache/catalina/startup/Tomcat.java
+++ b/java/org/apache/catalina/startup/Tomcat.java
@@ -643,34 +643,37 @@ public class Tomcat {
      * @return a realm instance
      */
     protected Realm createDefaultRealm() {
-        return new RealmBase() {
-            @Override
-            protected String getName() {
-                return "Simple";
-            }
+        return new SimpleRealm();
+    }
 
-            @Override
-            protected String getPassword(String username) {
-                return userPass.get(username);
-            }
 
-            @Override
-            protected Principal getPrincipal(String username) {
-                Principal p = userPrincipals.get(username);
-                if (p == null) {
-                    String pass = userPass.get(username);
-                    if (pass != null) {
-                        p = new GenericPrincipal(username, pass,
-                                userRoles.get(username));
-                        userPrincipals.put(username, p);
-                    }
+    private class SimpleRealm extends RealmBase {
+        @Override
+        protected String getName() {
+            return "Simple";
+        }
+
+        @Override
+        protected String getPassword(String username) {
+            return userPass.get(username);
+        }
+
+        @Override
+        protected Principal getPrincipal(String username) {
+            Principal p = userPrincipals.get(username);
+            if (p == null) {
+                String pass = userPass.get(username);
+                if (pass != null) {
+                    p = new GenericPrincipal(username, pass,
+                            userRoles.get(username));
+                    userPrincipals.put(username, p);
                 }
-                return p;
             }
-
-        };
+            return p;
+        }
     }
 
+
     protected void initBaseDir() {
         String catalinaHome = System.getProperty(Globals.CATALINA_HOME_PROP);
         if (basedir == null) {

==================================================
ValveBase.java
new file mode 100644
index 0000000000..d87ace8a41
--- /dev/null
+++ b/java/org/apache/catalina/util/ToStringUtil.java
@@ -0,0 +1,62 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.util;
+
+import org.apache.catalina.Contained;
+import org.apache.catalina.Container;
+import org.apache.catalina.Manager;
+
+/**
+ * Utility class used to help generate return values for calls to
+ * {@link Object#toString()}.
+ */
+public class ToStringUtil {
+
+    private ToStringUtil() {
+        // Utility class. Hide default constructor
+    }
+
+
+    public static final String toString(Contained contained) {
+        return toString(contained, contained.getContainer());
+    }
+
+
+    public static final String toString(Object obj, Container container) {
+        return containedToString(obj, container, "Container");
+    }
+
+
+    public static final String toString(Object obj, Manager manager) {
+        return containedToString(obj, manager, "Manager");
+    }
+
+
+    private static final String containedToString(Object contained, Object container,
+            String containerTypeName) {
+        StringBuilder sb = new StringBuilder(contained.getClass().getSimpleName());
+        sb.append('[');
+        if (container == null) {
+            sb.append(containerTypeName);
+            sb.append(" is null");
+        } else {
+            sb.append(container.toString());
+        }
+        sb.append(']');
+        return sb.toString();
+    }
+}

==================================================
