35bd87789017661b599f18ce33529ba544b81a06
==================================================
Add more generics to EL API to align with spec project
==================================================
Mark Thomas
==================================================
Wed Jul 7 16:55:30 2021 +0100
==================================================
ELProcessor.java
Add more generics to EL API to align with spec project


==================================================
TestELProcessor.java
index 98ff6a3212..aea604a567 100644
--- a/java/jakarta/el/ELProcessor.java
+++ b/java/jakarta/el/ELProcessor.java
@@ -50,8 +50,10 @@ public class ELProcessor {
     }
 
 
-    public Object eval(String expression) {
-        return getValue(expression, Object.class);
+    public <T> T eval(String expression) {
+        @SuppressWarnings("unchecked")
+        T result = (T) getValue(expression, Object.class);
+        return result;
     }
 
 

==================================================
TestUtil.java
index 4bf6673bcf..644a5579b8 100644
--- a/test/jakarta/el/TestELProcessor.java
+++ b/test/jakarta/el/TestELProcessor.java
@@ -47,7 +47,7 @@ public class TestELProcessor {
     public void testEval03() {
         ELProcessor elp = new ELProcessor();
         // Note \ is escaped as \\ in Java source code
-        String result = (String) elp.eval("'\\\\'");
+        String result = elp.eval("'\\\\'");
         Assert.assertEquals("\\", result);
     }
 
@@ -200,12 +200,11 @@ public class TestELProcessor {
         elp.defineBean("bean01", bean01);
         elp.defineBean("bean02", new TesterBean("bean02"));
 
-        Object result = elp.eval("bean02.setValueC(bean01.valueB);bean02.valueC");
+        Integer[] result = elp.eval("bean02.setValueC(bean01.valueB);bean02.valueC");
 
-        Integer[] resultArray = (Integer[]) result;
-        Assert.assertEquals(bean01.getValueB().length, resultArray.length);
-        for (int i = 0; i < resultArray.length; i++) {
-            Assert.assertEquals(bean01.getValueB()[i], resultArray[i].intValue());
+        Assert.assertEquals(bean01.getValueB().length, result.length);
+        for (int i = 0; i < result.length; i++) {
+            Assert.assertEquals(bean01.getValueB()[i], result[i].intValue());
         }
     }
 }

==================================================
TestMethodExpressionImpl.java
index dc2a5ed2f1..3ed53f5b6b 100644
--- a/test/jakarta/el/TestUtil.java
+++ b/test/jakarta/el/TestUtil.java
@@ -35,7 +35,7 @@ public class TestUtil {
     public void test02() {
         ELProcessor processor = new ELProcessor();
         processor.getELManager().importClass("java.util.Date");
-        Date result = (Date) processor.eval("Date(86400)");
+        Date result = processor.eval("Date(86400)");
         Assert.assertEquals(86400, result.getTime());
     }
 

==================================================
TestELArithmetic.java
index 103f400295..3339d01e2a 100644
--- a/test/org/apache/el/TestMethodExpressionImpl.java
+++ b/test/org/apache/el/TestMethodExpressionImpl.java
@@ -606,7 +606,7 @@ public class TestMethodExpressionImpl {
         ELProcessor elp = new ELProcessor();
         elp.defineBean("apple", TesterEnum.APPLE);
         elp.defineBean("beanF", new TesterBeanF());
-        String elResult = (String) elp.eval(expression);
+        String elResult = elp.eval(expression);
         String javaResult = func.apply(new TesterBeanF());
         Assert.assertEquals(javaResult, elResult);
     }
@@ -676,7 +676,7 @@ public class TestMethodExpressionImpl {
         ELProcessor elp = new ELProcessor();
         elp.defineBean("apple", TesterEnum.APPLE);
         elp.defineBean("beanG", new TesterBeanG());
-        String elResult = (String) elp.eval(expression);
+        String elResult = elp.eval(expression);
         String javaResult = func.apply(new TesterBeanG());
         Assert.assertEquals(javaResult, elResult);
     }
@@ -745,7 +745,7 @@ public class TestMethodExpressionImpl {
         ELProcessor elp = new ELProcessor();
         elp.defineBean("apple", TesterEnum.APPLE);
         elp.defineBean("beanH", new TesterBeanH());
-        String elResult = (String) elp.eval(expression);
+        String elResult = elp.eval(expression);
         String javaResult = func.apply(new TesterBeanH());
         Assert.assertEquals(javaResult, elResult);
     }

==================================================
TestAstAnd.java
index 6c4e80c108..800d8ea6d4 100644
--- a/test/org/apache/el/lang/TestELArithmetic.java
+++ b/test/org/apache/el/lang/TestELArithmetic.java
@@ -38,7 +38,7 @@ public class TestELArithmetic {
     @Test
     public void testAdd02() {
         ELProcessor processor = new ELProcessor();
-        Object result = processor.eval("null + null");
+        Long result = processor.eval("null + null");
         Assert.assertEquals(Long.valueOf(0), result);
     }
 
@@ -51,7 +51,7 @@ public class TestELArithmetic {
     @Test
     public void testSubtract02() {
         ELProcessor processor = new ELProcessor();
-        Object result = processor.eval("null - null");
+        Long result = processor.eval("null - null");
         Assert.assertEquals(Long.valueOf(0), result);
     }
 
@@ -64,7 +64,7 @@ public class TestELArithmetic {
     @Test
     public void testMultiply02() {
         ELProcessor processor = new ELProcessor();
-        Object result = processor.eval("null * null");
+        Long result = processor.eval("null * null");
         Assert.assertEquals(Long.valueOf(0), result);
     }
 
@@ -77,7 +77,7 @@ public class TestELArithmetic {
     @Test
     public void testDivide02() {
         ELProcessor processor = new ELProcessor();
-        Object result = processor.eval("null / null");
+        Long result = processor.eval("null / null");
         Assert.assertEquals(Long.valueOf(0), result);
     }
 
@@ -90,14 +90,14 @@ public class TestELArithmetic {
     @Test
     public void testMod02() {
         ELProcessor processor = new ELProcessor();
-        Object result = processor.eval("null % null");
+        Long result = processor.eval("null % null");
         Assert.assertEquals(Long.valueOf(0), result);
     }
 
     @Test
     public void testUnaryMinus01() {
         ELProcessor processor = new ELProcessor();
-        Object result = processor.eval("-null");
+        Long result = processor.eval("-null");
         Assert.assertEquals(Long.valueOf(0), result);
     }
 

==================================================
TestAstChoice.java
index 040717f088..8303eaf92e 100644
--- a/test/org/apache/el/parser/TestAstAnd.java
+++ b/test/org/apache/el/parser/TestAstAnd.java
@@ -26,28 +26,28 @@ public class TestAstAnd {
     @Test
     public void test01() {
         ELProcessor processor = new ELProcessor();
-        Object result = processor.eval("true && true");
+        Boolean result = processor.eval("true && true");
         Assert.assertEquals(Boolean.TRUE, result);
     }
 
     @Test
     public void test02() {
         ELProcessor processor = new ELProcessor();
-        Object result = processor.eval("true && null");
+        Boolean result = processor.eval("true && null");
         Assert.assertEquals(Boolean.FALSE, result);
     }
 
     @Test
     public void test03() {
         ELProcessor processor = new ELProcessor();
-        Object result = processor.eval("null && true");
+        Boolean result = processor.eval("null && true");
         Assert.assertEquals(Boolean.FALSE, result);
     }
 
     @Test
     public void test04() {
         ELProcessor processor = new ELProcessor();
-        Object result = processor.eval("null && null");
+        Boolean result = processor.eval("null && null");
         Assert.assertEquals(Boolean.FALSE, result);
     }
 }

==================================================
TestAstNot.java
index 0eaa9f4a2f..23e8fddb82 100644
--- a/test/org/apache/el/parser/TestAstChoice.java
+++ b/test/org/apache/el/parser/TestAstChoice.java
@@ -26,7 +26,7 @@ public class TestAstChoice {
     @Test
     public void test01() {
         ELProcessor processor = new ELProcessor();
-        Object result = processor.eval("null?1:2");
+        Long result = processor.eval("null?1:2");
         Assert.assertEquals(Long.valueOf(2), result);
     }
 }

==================================================
TestAstOr.java
index f6b859d92c..11f53f308b 100644
--- a/test/org/apache/el/parser/TestAstNot.java
+++ b/test/org/apache/el/parser/TestAstNot.java
@@ -26,21 +26,21 @@ public class TestAstNot {
     @Test
     public void test01() {
         ELProcessor processor = new ELProcessor();
-        Object result = processor.eval("!null");
+        Boolean result = processor.eval("!null");
         Assert.assertEquals(Boolean.TRUE, result);
     }
 
     @Test
     public void test02() {
         ELProcessor processor = new ELProcessor();
-        Object result = processor.eval("!true");
+        Boolean result = processor.eval("!true");
         Assert.assertEquals(Boolean.FALSE, result);
     }
 
     @Test
     public void test03() {
         ELProcessor processor = new ELProcessor();
-        Object result = processor.eval("!false");
+        Boolean result = processor.eval("!false");
         Assert.assertEquals(Boolean.TRUE, result);
     }
 }

==================================================
