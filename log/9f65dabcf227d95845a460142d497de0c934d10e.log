9f65dabcf227d95845a460142d497de0c934d10e
==================================================
Refactor the OpenSSLContext implementation so that a reference is
==================================================
Mark Thomas
==================================================
Fri Sep 15 20:11:46 2017 +0000
==================================================
OpenSSLContext.java
Refactor the OpenSSLContext implementation so that a reference is
retained to the instance while a request that is using it is in
progress. This allows destruction to be safely triggered by finalize()

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1808481 13f79535-47bb-0310-9956-ffa450edef68



==================================================
OpenSSLSessionContext.java
index e95f2e4735..bea2d94332 100644
--- a/java/org/apache/tomcat/util/net/openssl/OpenSSLContext.java
+++ b/java/org/apache/tomcat/util/net/openssl/OpenSSLContext.java
@@ -414,7 +414,7 @@ public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
                 sslHostConfig.setEnabledCiphers(SSLContext.getCiphers(ctx));
             }
 
-            sessionContext = new OpenSSLSessionContext(ctx);
+            sessionContext = new OpenSSLSessionContext(this);
             // If client authentication is being used, OpenSSL requires that
             // this is set so always set it in case an app is configured to
             // require it
@@ -480,6 +480,12 @@ public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
         return peerCerts;
     }
 
+
+    long getSSLContextID() {
+        return ctx;
+    }
+
+
     @Override
     public SSLSessionContext getServerSessionContext() {
         return sessionContext;
@@ -501,4 +507,23 @@ public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
         throw new UnsupportedOperationException();
     }
 
+    @Override
+    protected void finalize() throws Throwable {
+        /*
+         * When an SSLHostConfig is replaced at runtime, it is not possible to
+         * call destroy() on the associated OpenSSLContext since it is likely
+         * that there will be in-progress connections using the OpenSSLContext.
+         * A reference chain has been deliberately established (see
+         * OpenSSLSessionContext) to ensure that the OpenSSLContext remains
+         * ineligible for GC while those connections are alive. Once those
+         * connections complete, the OpenSSLContext will become eligible for GC
+         * and this method will ensure that the associated native resources are
+         * cleaned up.
+         */
+        try {
+            destroy();
+        } finally {
+            super.finalize();
+        }
+    }
 }

==================================================
