7cc49cba77c628207c3d91ad4d4e1f6b2186de94
==================================================
A few more of Filip's author tags
==================================================
Mark Emlyn
==================================================
Fri Jan 24 17:39:41 2014 +0000
==================================================
AsyncContextImpl.java
A few more of Filip's author tags

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1561084 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AsyncListenerWrapper.java
index 351ae44961..9441f273b7 100644
--- a/java/org/apache/catalina/core/AsyncContextImpl.java
+++ b/java/org/apache/catalina/core/AsyncContextImpl.java
@@ -50,11 +50,7 @@ import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.InstanceManager;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.res.StringManager;
-/**
- *
- * @author fhanik
- *
- */
+
 public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
 
     private static final Log log = LogFactory.getLog(AsyncContextImpl.class);

==================================================
ExtendedRpcCallback.java
index e90aeb69af..f5e883e5c7 100644
--- a/java/org/apache/catalina/core/AsyncListenerWrapper.java
+++ b/java/org/apache/catalina/core/AsyncListenerWrapper.java
@@ -23,7 +23,6 @@ import javax.servlet.AsyncListener;
 
 /**
  * TODO SERVLET3 - async
- * @author fhanik
  *
  */
 public class AsyncListenerWrapper {

==================================================
Http11Processor.java
index e03d43ddd4..6fb282d2a1 100644
--- a/java/org/apache/catalina/tribes/group/ExtendedRpcCallback.java
+++ b/java/org/apache/catalina/tribes/group/ExtendedRpcCallback.java
@@ -22,7 +22,6 @@ import org.apache.catalina.tribes.Member;
 /**
  * Extension to the {@link RpcCallback} interface. Allows a RPC messenger to get a confirmation if the reply
  * was sent successfully to the original sender.
- * @author fhanik
  *
  */
 public interface ExtendedRpcCallback extends RpcCallback {

==================================================
AbstractEndpoint.java
index d9ce1cccf9..337f3a010d 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -36,7 +36,6 @@ import org.apache.tomcat.util.net.SocketWrapper;
  * Processes HTTP requests.
  *
  * @author Remy Maucherat
- * @author fhanik
  */
 public class Http11Processor extends AbstractHttp11Processor<Socket> {
 

==================================================
TaskQueue.java
index 57245b631d..b8b1249f93 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -40,7 +40,6 @@ import org.apache.tomcat.util.threads.TaskThreadFactory;
 import org.apache.tomcat.util.threads.ThreadPoolExecutor;
 /**
  *
- * @author fhanik
  * @author Mladen Turk
  * @author Remy Maucherat
  */

==================================================
ThreadPoolExecutor.java
index b7e16ab8df..4e2cc0154f 100644
--- a/java/org/apache/tomcat/util/threads/TaskQueue.java
+++ b/java/org/apache/tomcat/util/threads/TaskQueue.java
@@ -26,7 +26,6 @@ import java.util.concurrent.TimeUnit;
  * The task queue is optimised to properly utilize threads within
  * a thread pool executor. If you use a normal queue, the executor will spawn threads
  * when there are idle threads and you wont be able to force items unto the queue itself
- * @author fhanik
  *
  */
 public class TaskQueue extends LinkedBlockingQueue<Runnable> {

==================================================
ConnectionPool.java
index 7b56265a5b..9cd4cc2e4a 100644
--- a/java/org/apache/tomcat/util/threads/ThreadPoolExecutor.java
+++ b/java/org/apache/tomcat/util/threads/ThreadPoolExecutor.java
@@ -34,7 +34,6 @@ import org.apache.tomcat.util.res.StringManager;
  * {@link #getSubmittedCount()} method, to be used to properly handle the work queue.
  * If a RejectedExecutionHandler is not specified a default one will be configured
  * and that one will always throw a RejectedExecutionException
- * @author fhanik
  *
  */
 public class ThreadPoolExecutor extends java.util.concurrent.ThreadPoolExecutor {

==================================================
PoolConfiguration.java
index c20efd837f..ab5e771ab2 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -1161,7 +1161,6 @@ public class ConnectionPool {
      * and performs the initialization according to
      * interceptors and validation rules.
      * This class is thread safe and is cancellable
-     * @author fhanik
      *
      */
     protected class ConnectionFuture implements Future<Connection>, Runnable {

==================================================
PoolUtilities.java
index f38a43b1ef..4ac3891379 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java
@@ -24,7 +24,6 @@ import org.apache.tomcat.jdbc.pool.PoolProperties.InterceptorDefinition;
  * A list of properties that are configurable for a connection pool.
  * The {@link DataSource} object also implements this interface so that it can be easily configured through
  * an IoC container without having to specify a secondary object with a setter method.
- * @author fhanik
  *
  */
 

==================================================
TrapException.java
index ac25cd1bf9..31d2357c9c 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolUtilities.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolUtilities.java
@@ -20,7 +20,6 @@ import java.util.Properties;
 
 /**
  *
- * @author fhanik
  *
  */
 public class PoolUtilities {

==================================================
AbstractQueryReport.java
index 951b8035a0..ccbbbf93a7 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/TrapException.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/TrapException.java
@@ -26,7 +26,6 @@ import java.sql.SQLException;
  * called, or throw a SQLException if it is declared.
  * If the caught exception is not declared, and the method doesn't throw SQLException, then this interceptor will
  * throw a RuntimeException
- * @author fhanik
  *
  */
 public class TrapException extends JdbcInterceptor {

==================================================
ConnectionState.java
index 6c2d489edb..751094577f 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractQueryReport.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractQueryReport.java
@@ -32,7 +32,6 @@ import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.jdbc.pool.JdbcInterceptor;
 /**
  * Abstract class that wraps statements and intercepts query executions.
- * @author fhanik
  *
  */
 public abstract class AbstractQueryReport extends AbstractCreateStatementInterceptor {
@@ -200,7 +199,6 @@ public abstract class AbstractQueryReport extends AbstractCreateStatementInterce
 
     /**
      * Class to measure query execute time
-     * @author fhanik
      *
      */
     protected class StatementProxy implements InvocationHandler {

==================================================
ResetAbandonedTimer.java
index cd886276d8..fae1a8278f 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/ConnectionState.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/ConnectionState.java
@@ -36,7 +36,6 @@ import org.apache.tomcat.jdbc.pool.PooledConnection;
  * these settings have been applied.
  * In the cases where the application code doesn't know or want to keep track of the state, this interceptor helps cache the
  * state, and it also avoids roundtrips to the database asking for it.
- * @author fhanik
  *
  */
 

==================================================
SlowQueryReport.java
index 0384d63e81..676a533624 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/ResetAbandonedTimer.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/ResetAbandonedTimer.java
@@ -29,7 +29,6 @@ import org.apache.tomcat.jdbc.pool.ProxyConnection;
  * This interceptor is useful for when you have a {@link org.apache.tomcat.jdbc.pool.PoolConfiguration#setRemoveAbandonedTimeout(int)}
  * that is fairly low, and you want to reset the abandoned time each time any operation on the connection is performed
  * This is useful for batch processing programs that use connections for extensive amount of times.
- * @author fhanik
  *
  */
 public class ResetAbandonedTimer extends AbstractQueryReport {

==================================================
SlowQueryReportJmx.java
index 1d832693cf..4d35de3642 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
@@ -217,7 +217,6 @@ public class SlowQueryReport extends AbstractQueryReport  {
 
     /**
      *
-     * @author fhanik
      *
      */
     public static class QueryStats {

==================================================
StatementDecoratorInterceptor.java
index 2630768bc3..d0bc42753e 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReportJmx.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReportJmx.java
@@ -51,7 +51,6 @@ import org.apache.tomcat.jdbc.pool.PooledConnection;
 /**
  * Publishes data to JMX and provides notifications
  * when failures happen.
- * @author fhanik
  *
  */
 public class SlowQueryReportJmx extends SlowQueryReport implements NotificationEmitter, SlowQueryReportJmxMBean{

==================================================
StatementFinalizer.java
index 4eea9a2301..4207ee5876 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementDecoratorInterceptor.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementDecoratorInterceptor.java
@@ -164,7 +164,6 @@ public class StatementDecoratorInterceptor extends AbstractCreateStatementInterc
     /**
      * Class to measure query execute time
      *
-     * @author fhanik
      *
      */
     protected class StatementProxy<T extends java.sql.Statement> implements InvocationHandler {

==================================================
InduceSlowQuery.java
index bc210949df..67d45c85a9 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementFinalizer.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementFinalizer.java
@@ -28,7 +28,6 @@ import org.apache.tomcat.jdbc.pool.PooledConnection;
 /**
  * Keeps track of statements associated with a connection and invokes close upon {@link java.sql.Connection#close()}
  * Useful for applications that dont close the associated statements after being done with a connection.
- * @author fhanik
  *
  */
 public class StatementFinalizer extends AbstractCreateStatementInterceptor {

==================================================
ChannelCreator.java
index deecfccb25..21ce42eb25 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/pool/interceptor/InduceSlowQuery.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/pool/interceptor/InduceSlowQuery.java
@@ -21,7 +21,6 @@ import java.lang.reflect.Method;
 import java.security.SecureRandom;
 
 /**
- * @author fhanik
  *
  */
 public class InduceSlowQuery extends AbstractQueryReport {

==================================================
MapDemo.java
index 27df12ccbf..5cfdadf453 100644
--- a/test/org/apache/catalina/tribes/demos/ChannelCreator.java
+++ b/test/org/apache/catalina/tribes/demos/ChannelCreator.java
@@ -47,7 +47,6 @@ import org.apache.catalina.tribes.transport.ReplicationTransmitter;
  *
  * <p>Company: </p>
  *
- * @author fhanik
  * @version 1.0
  */
 public class ChannelCreator {

==================================================
