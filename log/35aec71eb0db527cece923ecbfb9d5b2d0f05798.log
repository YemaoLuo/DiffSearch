35aec71eb0db527cece923ecbfb9d5b2d0f05798
==================================================
Removed unused code from o.a.t.util.buf
==================================================
Mark Emlyn
==================================================
Thu Jan 15 21:47:53 2009 +0000
==================================================
Base64.java
Removed unused code from o.a.t.util.buf

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@734832 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ByteChunk.java
index c1e5e5f9e3..49dc6a15b6 100644
--- a/java/org/apache/tomcat/util/buf/Base64.java
+++ b/java/org/apache/tomcat/util/buf/Base64.java
@@ -42,7 +42,6 @@ public final class Base64 {
     static private final int  TWENTYFOURBITGROUP = 24;
     static private final int  EIGHTBIT           = 8;
     static private final int  SIXTEENBIT         = 16;
-    static private final int  SIXBIT             = 6;
     static private final int  FOURBYTE           = 4;
 
 

==================================================
CharChunk.java
index 257df24ae4..ce3b4df82b 100644
--- a/java/org/apache/tomcat/util/buf/ByteChunk.java
+++ b/java/org/apache/tomcat/util/buf/ByteChunk.java
@@ -112,7 +112,6 @@ public final class ByteChunk implements Cloneable, Serializable {
     private ByteInputChannel in = null;
     private ByteOutputChannel out = null;
 
-    private boolean isOutput=false;
     private boolean optimizedWrite=true;
     
     /**
@@ -156,7 +155,6 @@ public final class ByteChunk implements Cloneable, Serializable {
     // -------------------- Setup --------------------
 
     public void allocate( int initial, int limit  ) {
-	isOutput=true;
 	if( buff==null || buff.length < initial ) {
 	    buff=new byte[initial];
 	}    

==================================================
MessageBytes.java
index e9157fd54e..a2e8ca60b1 100644
--- a/java/org/apache/tomcat/util/buf/CharChunk.java
+++ b/java/org/apache/tomcat/util/buf/CharChunk.java
@@ -64,8 +64,6 @@ public final class CharChunk implements Cloneable, Serializable, CharSequence {
 
     private boolean isSet=false;  // XXX 
 
-    private boolean isOutput=false;
-
     // -1: grow undefinitely
     // maximum amount to be cached
     private int limit=-1;
@@ -117,14 +115,12 @@ public final class CharChunk implements Cloneable, Serializable, CharSequence {
     // -------------------- Setup --------------------
 
     public void allocate( int initial, int limit  ) {
-	isOutput=true;
 	if( buff==null || buff.length < initial ) {
 	    buff=new char[initial];
 	}
 	this.limit=limit;
 	start=0;
 	end=0;
-	isOutput=true;
 	isSet=true;
     }
 

==================================================
