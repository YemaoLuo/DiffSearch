4216fbd6778084c975bcd5b384929c87ec02e2e9
==================================================
Re-factoring in support of https://issues.apache.org/bugzilla/show_bug.cgi?id=50360
==================================================
Mark Emlyn
==================================================
Wed Dec 8 14:19:23 2010 +0000
==================================================
AbstractProtocolHandler.java
Re-factoring in support of https://issues.apache.org/bugzilla/show_bug.cgi?id=50360
Pull up init()

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1043429 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpAprProtocol.java
index 3e376cfa97..8fc5c81ae0 100644
--- a/java/org/apache/coyote/LocalStrings.properties
+++ b/java/org/apache/coyote/LocalStrings.properties
@@ -15,6 +15,8 @@
 
 abstractProtocolHandler.getAttribute=Get attribute [{0}] with value [{1}]
 abstractProtocolHandler.setAttribute=Set attribute [{0}] with value [{1}]
+abstractProtocolHandler.pause=Initializing ProtocolHandler [{0}]
+abstractProtocolHandler.pauseError=Failed to initialize end point associated with ProtocolHandler [{0}]
 abstractProtocolHandler.pause=Pausing ProtocolHandler [{0}]
 abstractProtocolHandler.pauseError=Failed to pause end point associated with ProtocolHandler [{0}]
 abstractProtocolHandler.resume=Resuming ProtocolHandler [{0}]

==================================================
AjpProtocol.java
index 1ff933bc88..d3dca6e3dd 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -86,24 +86,6 @@ public class AjpAprProtocol extends AbstractAjpProtocol {
     // --------------------------------------------------------- Public Methods
 
 
-    /** Start the protocol
-     */
-    @Override
-    public void init() throws Exception {
-        endpoint.setName(getName());
-
-        try {
-            endpoint.init();
-        } catch (Exception ex) {
-            log.error(sm.getString("ajpprotocol.endpoint.initerror"), ex);
-            throw ex;
-        }
-        if (log.isInfoEnabled()) {
-            log.info(sm.getString("ajpprotocol.init", getName()));
-        }
-    }
-
-
     @Override
     public void start() throws Exception {
         if (this.domain != null ) {

==================================================
AbstractHttp11JsseProtocol.java
index 9695d669a8..a32037a2cc 100644
--- a/java/org/apache/coyote/ajp/LocalStrings_es.properties
+++ b/java/org/apache/coyote/ajp/LocalStrings_es.properties
@@ -13,9 +13,7 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-ajpprotocol.endpoint.initerror = Error inicializando punto final
 ajpprotocol.endpoint.starterror = Error arrancando punto final
-ajpprotocol.init = Inicializando Coyote AJP/1.3 en {0}
 ajpprotocol.proto.error = Error leyendo requerimiento, ignorado
 ajpprotocol.start = Arrancando Coyote AJP/1.3 en {0}
 ajpprotocol.failedread = Fallo en lectura de Conector

==================================================
Http11AprProtocol.java
index 42a3a1273b..8786fb4340 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11JsseProtocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11JsseProtocol.java
@@ -17,6 +17,7 @@
 package org.apache.coyote.http11;
 
 import org.apache.tomcat.util.net.SSLImplementation;
+import org.apache.tomcat.util.net.jsse.JSSEImplementation;
 
 public abstract class AbstractHttp11JsseProtocol
         extends AbstractHttp11Protocol {
@@ -102,4 +103,13 @@ public abstract class AbstractHttp11JsseProtocol
     public String getAllowUnsafeLegacyRenegotiation() {
         return endpoint.getAllowUnsafeLegacyRenegotiation();
     }
+
+
+    // ------------------------------------------------------- Lifecycle methods
+
+    @Override
+    public void init() throws Exception {
+        super.init();
+        sslImplementation = new JSSEImplementation();
+    }
 }

==================================================
Http11NioProtocol.java
index 8a5b1d4af7..7f5072eeaa 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -79,23 +79,6 @@ public class Http11AprProtocol extends AbstractHttp11Protocol {
         setProcessorCache(-1);
     }
 
-    /** Start the protocol
-     */
-    @Override
-    public void init() throws Exception {
-        endpoint.setName(getName());
-
-        try {
-            endpoint.init();
-        } catch (Exception ex) {
-            log.error(sm.getString("http11protocol.endpoint.initerror"), ex);
-            throw ex;
-        }
-        if(log.isInfoEnabled())
-            log.info(sm.getString("http11protocol.init", getName()));
-
-    }
-
     @Override
     public void start() throws Exception {
         if( this.domain != null ) {

==================================================
Http11Protocol.java
index 06ce6e15c7..7ff52e6245 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -39,7 +39,6 @@ import org.apache.tomcat.util.net.NioEndpoint;
 import org.apache.tomcat.util.net.NioEndpoint.Handler;
 import org.apache.tomcat.util.net.SecureNioChannel;
 import org.apache.tomcat.util.net.SocketStatus;
-import org.apache.tomcat.util.net.jsse.JSSEImplementation;
 
 
 /**
@@ -82,24 +81,6 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
     }
 
 
-    /** Start the protocol
-     */
-    @Override
-    public void init() throws Exception {
-        endpoint.setName(getName());
-        
-        try {
-            endpoint.init();
-            sslImplementation = new JSSEImplementation();
-        } catch (Exception ex) {
-            log.error(sm.getString("http11protocol.endpoint.initerror"), ex);
-            throw ex;
-        }
-        if(log.isInfoEnabled())
-            log.info(sm.getString("http11protocol.init", getName()));
-
-    }
-
     @Override
     public void start() throws Exception {
         if( this.domain != null ) {

==================================================
