e80a91356b807c036763f8bc092bd02bceb1d311
==================================================
Use constants for SSL/TLS protocol names
==================================================
Rainer Jung
==================================================
Tue May 26 14:59:04 2015 +0000
==================================================
AprEndpoint.java
Use constants for SSL/TLS protocol names
to reduce chances of fatal consequences of
string typos.


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1681770 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Constants.java
index d25f1e13c4..09a9758600 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -378,19 +378,19 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
                     value = SSL.SSL_PROTOCOL_ALL;
                 } else {
                     for (String protocol : sslHostConfig.getProtocols()) {
-                        if ("SSLv2Hello".equalsIgnoreCase(protocol)) {
+                        if (Constants.SSL_PROTO_SSLv2Hello.equalsIgnoreCase(protocol)) {
                             // NO-OP. OpenSSL always supports SSLv2Hello
-                        } else if ("SSLv2".equalsIgnoreCase(protocol)) {
+                        } else if (Constants.SSL_PROTO_SSLv2.equalsIgnoreCase(protocol)) {
                             value |= SSL.SSL_PROTOCOL_SSLV2;
-                        } else if ("SSLv3".equalsIgnoreCase(protocol)) {
+                        } else if (Constants.SSL_PROTO_SSLv3.equalsIgnoreCase(protocol)) {
                             value |= SSL.SSL_PROTOCOL_SSLV3;
-                        } else if ("TLSv1".equalsIgnoreCase(protocol)) {
+                        } else if (Constants.SSL_PROTO_TLSv1.equalsIgnoreCase(protocol)) {
                             value |= SSL.SSL_PROTOCOL_TLSV1;
-                        } else if ("TLSv1.1".equalsIgnoreCase(protocol)) {
+                        } else if (Constants.SSL_PROTO_TLSv1_1.equalsIgnoreCase(protocol)) {
                             value |= SSL.SSL_PROTOCOL_TLSV1_1;
-                        } else if ("TLSv1.2".equalsIgnoreCase(protocol)) {
+                        } else if (Constants.SSL_PROTO_TLSv1_2.equalsIgnoreCase(protocol)) {
                             value |= SSL.SSL_PROTOCOL_TLSV1_2;
-                        } else if ("all".equalsIgnoreCase(protocol)) {
+                        } else if (Constants.SSL_PROTO_ALL.equalsIgnoreCase(protocol)) {
                             value |= SSL.SSL_PROTOCOL_ALL;
                         } else {
                             // Protocol not recognized, fail to start as it is safer than

==================================================
SSLHostConfig.java
index 769e345ef3..f52cac9d39 100644
--- a/java/org/apache/tomcat/util/net/Constants.java
+++ b/java/org/apache/tomcat/util/net/Constants.java
@@ -23,4 +23,16 @@ public class Constants {
      * the tomcat instance installation path
      */
     public static final String CATALINA_BASE_PROP = "catalina.base";
+
+    /**
+     * JSSE and OpenSSL protocol names
+     */
+    public static final String SSL_PROTO_ALL        = "all";
+    public static final String SSL_PROTO_TLS        = "TLS";
+    public static final String SSL_PROTO_TLSv1_2    = "TLSv1.2";
+    public static final String SSL_PROTO_TLSv1_1    = "TLSv1.1";
+    public static final String SSL_PROTO_TLSv1      = "TLSv1";
+    public static final String SSL_PROTO_SSLv3      = "SSLv3";
+    public static final String SSL_PROTO_SSLv2      = "SSLv2";
+    public static final String SSL_PROTO_SSLv2Hello = "SSLv2Hello";
 }

==================================================
OpenSSLCipherConfigurationParser.java
index d790892976..afd3d197f3 100644
--- a/java/org/apache/tomcat/util/net/SSLHostConfig.java
+++ b/java/org/apache/tomcat/util/net/SSLHostConfig.java
@@ -66,7 +66,7 @@ public class SSLHostConfig {
     private String keyManagerAlgorithm = KeyManagerFactory.getDefaultAlgorithm();
     private int sessionCacheSize = 0;
     private int sessionTimeout = 86400;
-    private String sslProtocol = "TLS";
+    private String sslProtocol = Constants.SSL_PROTO_TLS;
     private String trustManagerClassName;
     private String truststoreAlgorithm = TrustManagerFactory.getDefaultAlgorithm();
     private String truststoreFile = System.getProperty("javax.net.ssl.trustStore");
@@ -86,7 +86,7 @@ public class SSLHostConfig {
 
     public SSLHostConfig() {
         // Set defaults that can't be (easily) set when defining the fields.
-        setProtocols("all");
+        setProtocols(Constants.SSL_PROTO_ALL);
         // Configure fall-back defaults if system property is not set.
         if (certificateKeystoreType == null) {
             certificateKeystoreType = "JKS";
@@ -238,11 +238,11 @@ public class SSLHostConfig {
         for (String value: values) {
             String trimmed = value.trim();
             if (trimmed.length() > 0) {
-                if (input.trim().equalsIgnoreCase("all")) {
-                    protocols.add("SSLv2Hello");
-                    protocols.add("TLSv1");
-                    protocols.add("TLSv1.1");
-                    protocols.add("TLSv1.2");
+                if (input.trim().equalsIgnoreCase(Constants.SSL_PROTO_ALL)) {
+                    protocols.add(Constants.SSL_PROTO_SSLv2Hello);
+                    protocols.add(Constants.SSL_PROTO_TLSv1);
+                    protocols.add(Constants.SSL_PROTO_TLSv1_1);
+                    protocols.add(Constants.SSL_PROTO_TLSv1_2);
                 } else {
                     protocols.add(trimmed);
                 }

==================================================
Protocol.java
index 44504f53c3..8a7312c3cf 100644
--- a/java/org/apache/tomcat/util/net/jsse/openssl/OpenSSLCipherConfigurationParser.java
+++ b/java/org/apache/tomcat/util/net/jsse/openssl/OpenSSLCipherConfigurationParser.java
@@ -31,6 +31,7 @@ import java.util.Set;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.net.Constants;
 import org.apache.tomcat.util.res.StringManager;
 
 /**
@@ -226,22 +227,6 @@ public class OpenSSLCipherConfigurationParser {
      * Ciphers suites using all FORTEZZA algorithms.
      */
     private static final String FZA = "FZA";
-    /**
-     * TLS v1.2 cipher suites. Note: there are no cipher suites specific to TLS v1.1.
-     */
-    private static final String TLSv1_2 = "TLSv1.2";
-    /**
-     * TLS v1.0 cipher suites.
-     */
-    private static final String TLSv1 = "TLSv1";
-    /**
-     * SSL v2.0 cipher suites.
-     */
-    private static final String SSLv2 = "SSLv2";
-    /**
-     * SSL v3.0 cipher suites.
-     */
-    private static final String SSLv3 = "SSLv3";
     /**
      * Cipher suites using DH, including anonymous DH, ephemeral DH and fixed DH.
      */
@@ -449,11 +434,11 @@ public class OpenSSLCipherConfigurationParser {
         addListAlias(aFZA, filterByAuthentication(allCiphers, Collections.singleton(Authentication.FZA)));
         addListAlias(eFZA, filterByEncryption(allCiphers, Collections.singleton(Encryption.FZA)));
         addListAlias(FZA, filter(allCiphers, null, Collections.singleton(KeyExchange.FZA), Collections.singleton(Authentication.FZA), Collections.singleton(Encryption.FZA), null, null));
-        addListAlias(TLSv1_2, filterByProtocol(allCiphers, Collections.singleton(Protocol.TLSv1_2)));
-        addListAlias("TLSv1.1", filterByProtocol(allCiphers, Collections.singleton(Protocol.SSLv3)));
-        addListAlias(TLSv1, filterByProtocol(allCiphers, new HashSet<>(Arrays.asList(Protocol.TLSv1, Protocol.SSLv3))));
-        aliases.put(SSLv3, aliases.get(TLSv1));
-        addListAlias(SSLv2, filterByProtocol(allCiphers, Collections.singleton(Protocol.SSLv2)));
+        addListAlias(Constants.SSL_PROTO_TLSv1_2, filterByProtocol(allCiphers, Collections.singleton(Protocol.TLSv1_2)));
+        addListAlias(Constants.SSL_PROTO_TLSv1_1, filterByProtocol(allCiphers, Collections.singleton(Protocol.SSLv3)));
+        addListAlias(Constants.SSL_PROTO_TLSv1, filterByProtocol(allCiphers, new HashSet<>(Arrays.asList(Protocol.TLSv1, Protocol.SSLv3))));
+        aliases.put(Constants.SSL_PROTO_SSLv3, aliases.get(Constants.SSL_PROTO_TLSv1));
+        addListAlias(Constants.SSL_PROTO_SSLv2, filterByProtocol(allCiphers, Collections.singleton(Protocol.SSLv2)));
         addListAlias(DH, filterByKeyExchange(allCiphers, new HashSet<>(Arrays.asList(KeyExchange.DHr, KeyExchange.DHd, KeyExchange.EDH))));
         Set<Cipher> adh = filterByKeyExchange(allCiphers, Collections.singleton(KeyExchange.EDH));
         adh.retainAll(filterByAuthentication(allCiphers, Collections.singleton(Authentication.aNULL)));

==================================================
