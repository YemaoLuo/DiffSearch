079e7dc70760d9d86243f645bea74f89fae0ba2d
==================================================
Move back to original idea, use primitive int instead of enum, extremely inefficient using enums and arrays to hold them. 
==================================================
Filip Hanik
==================================================
Fri Aug 31 20:59:00 2007 +0000
==================================================
CometEvent.java
Move back to original idea, use primitive int instead of enum, extremely inefficient using enums and arrays to hold them. 


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@571578 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CometEventImpl.java
index 520d3b67e2..be954b6a1a 100644
--- a/java/org/apache/catalina/CometEvent.java
+++ b/java/org/apache/catalina/CometEvent.java
@@ -23,6 +23,7 @@ import java.io.IOException;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
+import java.nio.channels.SelectionKey;
 
 /**
  * The CometEvent interface.
@@ -139,7 +140,7 @@ public interface CometEvent {
      * asycnhronously, then issue a 
      * register(OP_CALLBACK) immediately after this method has been invoked.
      * 
-     * @see #register(CometOperation)
+     * @see #register(int)
      */
     public void close() throws IOException;
     
@@ -190,9 +191,14 @@ public interface CometEvent {
      * OP_CALLBACK - receive a CALLBACK event from the container
      * OP_READ - receive a READ event when the connection has data to be read
      * OP_WRITE - receive a WRITE event when the connection is able to receive data to be written
-     * @see #register(CometOperations)
+     * @see #register(int)
      */
-    public enum CometOperation {OP_CALLBACK, OP_READ, OP_WRITE};
+    public static class CometOperation {
+        //currently map these to the same values as org.apache.tomcat.util.net.PollerInterest
+        public static final int OP_CALLBACK = 0x200;
+        public static final int OP_READ = SelectionKey.OP_READ;
+        public static final int OP_WRITE = SelectionKey.OP_WRITE;
+    };
     
     /**
      * Registers the Comet connection with the container for IO and event notifications.
@@ -203,22 +209,22 @@ public interface CometEvent {
      * @see #EventType
      * @see #CometOperation
      */
-    public void register(CometOperation... operations) throws IllegalStateException;
+    public void register(int operations) throws IllegalStateException;
     
     /**
      * Unregisters Comet operations for this CometConnection
      * @param operations CometOperation[]
      * @throws IllegalStateException
      */
-    public void unregister(CometOperation... operations) throws IllegalStateException;
+    public void unregister(int operations) throws IllegalStateException;
 
     /**
      * Returns what the current IO notifications that the Comet
      * connection is registered for.
-     * @return CometOperations[]
-     * @see #register(CometOperations...)
+     * @return integer representing registered operations
+     * @see #register(int)
      */
-    public CometOperation[] getRegisteredOps();
+    public int getRegisteredOps();
     
     /**
      * Returns true if the Comet connection is blocking or non blocking and you can write

==================================================
Request.java
index 89339ab8ea..fe72147fcf 100644
--- a/java/org/apache/catalina/connector/CometEventImpl.java
+++ b/java/org/apache/catalina/connector/CometEventImpl.java
@@ -77,7 +77,7 @@ public class CometEventImpl implements CometEvent {
     /**
      * Current set of operations
      */
-    protected HashSet<CometOperation> cometOperations = new HashSet<CometOperation>(3);
+    protected int cometOperations = 0;
     
     /**
      * Blocking or not blocking
@@ -97,7 +97,7 @@ public class CometEventImpl implements CometEvent {
         request = null;
         response = null;
         blocking = true;
-        cometOperations.clear();
+        cometOperations = 0;
     }
 
     public void setEventType(EventType eventType) {
@@ -148,8 +148,8 @@ public class CometEventImpl implements CometEvent {
         return response.isWriteable();
     }
     
-    public boolean hasOp(CometEvent.CometOperation op) {
-        return cometOperations.contains(op);
+    public boolean hasOp(int op) {
+        return (cometOperations & op ) == op;
     }
     
     public void configureBlocking(boolean blocking) throws IllegalStateException {
@@ -160,24 +160,24 @@ public class CometEventImpl implements CometEvent {
         this.blocking = bool.get();
     }
 
-    public void register(CometEvent.CometOperation... operations) throws IllegalStateException {
+    public void register(int operations) throws IllegalStateException {
         //add it to the registered set
-        cometOperations.addAll(Arrays.asList(operations));
-        request.action(ActionCode.ACTION_COMET_REGISTER, translate(cometOperations.toArray(new CometOperation[0])));
+        cometOperations = cometOperations | operations;
+        request.action(ActionCode.ACTION_COMET_REGISTER, translate(cometOperations));
     }
 
-    public void unregister(CometOperation... operations) throws IllegalStateException {
+    public void unregister(int operations) throws IllegalStateException {
         //remove from the registered set
-        cometOperations.removeAll(Arrays.asList(operations));
-        request.action(ActionCode.ACTION_COMET_REGISTER, translate(cometOperations.toArray(new CometOperation[0])));
+        cometOperations = cometOperations & (~operations);
+        request.action(ActionCode.ACTION_COMET_REGISTER, translate(cometOperations));
     }
     
     public boolean isBlocking() {
         return blocking;
     }
     
-    public CometOperation[] getRegisteredOps() {
-        return (CometOperation[])cometOperations.toArray(new CometOperation[0]);
+    public int getRegisteredOps() {
+        return cometOperations;
     }
     
     public String toString() {
@@ -204,19 +204,8 @@ public class CometEventImpl implements CometEvent {
             throw new IllegalStateException("The operation can only be performed when invoked by a Tomcat worker thread.");
     }
     
-    protected PollerInterest[] translate(CometOperation... op) {
-        PollerInterest[] result = new PollerInterest[op.length];
-        for (int i=0; i<result.length; i++) {
-            if (op[i] == CometEvent.CometOperation.OP_READ)
-                result[i] = PollerInterest.READ;
-            else if (op[i] == CometEvent.CometOperation.OP_WRITE)
-                result[i] = PollerInterest.WRITE;
-            else if (op[i] == CometEvent.CometOperation.OP_CALLBACK)
-                result[i] = PollerInterest.CALLBACK;
-            else
-                throw new IllegalArgumentException(op != null ? op.toString() : "null");
-        }
-        return result;
+    protected Integer translate(int op) {
+        return new Integer(op);
     }
     
     //inner class used to keep track if the current thread is a worker thread.

==================================================
Http11NioProcessor.java
index 9e3dac6846..7fa5685341 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -2268,7 +2268,7 @@ public class Request
         return bool.get();    
     }
 
-    public boolean hasOp(CometEvent.CometOperation op) {
+    public boolean hasOp(int op) {
         if ( !comet || getEvent()==null ) return false;
         return event.hasOp(op);
     }

==================================================
PollerInterest.java
index b2e89082ba..9482095259 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -1233,7 +1233,7 @@ public class Http11NioProcessor implements ActionHook {
         } else if (actionCode == ActionCode.ACTION_COMET_END) {
             comet = false;
         } else if (actionCode == ActionCode.ACTION_COMET_REGISTER) {
-            int interest = getPollerInterest(param);
+            int interest = ((Integer)param).intValue();
             NioEndpoint.KeyAttachment attach = (NioEndpoint.KeyAttachment)socket.getAttachment(false);
             attach.setCometOps(interest);
             //notify poller if not on a tomcat thread
@@ -1248,7 +1248,8 @@ public class Http11NioProcessor implements ActionHook {
             try {
                 bool.set(inputBuffer.isReadable());
             }catch ( IOException x ) {
-                throw new RuntimeException(x);
+                if (log.isDebugEnabled()) log.debug("Unable to check readability on NIO socket.",x);
+                bool.set(false);
             }
         } else if (actionCode == ActionCode.ACTION_COMET_WRITEABLE) {
             MutableBoolean bool = (MutableBoolean)param;
@@ -1257,24 +1258,6 @@ public class Http11NioProcessor implements ActionHook {
 
     }
 
-    private int getPollerInterest(Object param) throws IllegalArgumentException {
-        if ( param == null || (!(param instanceof PollerInterest[])) )
-            throw new IllegalArgumentException("Action parameter must be a PollerInterest[] object.");
-        int interest = 0;
-        PollerInterest[] piarr = (PollerInterest[])param;
-        for ( PollerInterest pi : piarr ) {
-            if (pi == PollerInterest.CALLBACK)
-                interest = interest | NioEndpoint.OP_CALLBACK;
-            else if (pi == PollerInterest.READ)
-                interest = interest | SelectionKey.OP_READ;
-            else if (pi == PollerInterest.WRITE)
-                interest = interest | SelectionKey.OP_WRITE;
-            else
-                throw new IllegalArgumentException(pi != null ? pi.toString() : "null");
-        }
-        return interest;
-    }
-
 
     // ------------------------------------------------------ Connector Methods
 

==================================================
