811450a84ca29e38d42e041be85b2deed4058ebb
==================================================
ThreadLocal leak detection is now hitting Java 9 module issues.
==================================================
Mark Thomas
==================================================
Thu Oct 27 13:59:41 2016 +0000
==================================================
WebappClassLoaderBase.java
index f6bdd85518..86e4065357 100644
--- a/java/org/apache/catalina/loader/LocalStrings.properties
+++ b/java/org/apache/catalina/loader/LocalStrings.properties
@@ -13,7 +13,8 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-webappClassLoader.addExports=When running on Java 9 you need to add "--add-exports java.rmi/sun.rmi.transport=ALL-UNNAMED" to the JVM command line arguments to enable RMI Target memory leak detection. Alternatively, you can suppress this warning by disabling RMI Target memory leak detection.
+webappClassLoader.addExportsRmi=When running on Java 9 you need to add "--add-exports-private=java.rmi/sun.rmi.transport=ALL-UNNAMED" to the JVM command line arguments to enable RMI Target memory leak detection. Alternatively, you can suppress this warning by disabling RMI Target memory leak detection.
+webappClassLoader.addExportsThreadLocal=When running on Java 9 you need to add "--add-exports-private=java.base/java.lang=ALL-UNNAMED" to the JVM command line arguments to enable ThreadLocal memory leak detection. Alternatively, you can suppress this warning by disabling ThreadLocal memory leak detection.
 webappClassLoader.addPermisionNoCanonicalFile=Unable to obtain a canonical file path from the URL [{0}]
 webappClassLoader.addPermisionNoProtocol=The protocol [{0}] in the URL [{1}] is not supported so no read permission was granted for resources located at this URL
 webappClassLoader.illegalJarPath=Illegal JAR entry detected with name {0}

==================================================
Jre9Compat.java
index fcf216f347..780fe923b6 100644
--- a/java/org/apache/catalina/loader/WebappClassLoaderBase.java
+++ b/java/org/apache/catalina/loader/WebappClassLoaderBase.java
@@ -1860,10 +1860,17 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
                 }
             }
         } catch (Throwable t) {
-            ExceptionUtils.handleThrowable(t);
-            log.warn(sm.getString(
-                    "webappClassLoader.checkThreadLocalsForLeaksFail",
-                    getContextName()), t);
+            JreCompat jreCompat = JreCompat.getInstance();
+            if (jreCompat.isInstanceOfInaccessibleObjectException(t)) {
+                // Must be running on Java 9 without the necessary command line
+                // options.
+                log.warn(sm.getString("webappClassLoader.addExportsThreadLocal"));
+            } else {
+                ExceptionUtils.handleThrowable(t);
+                log.warn(sm.getString(
+                        "webappClassLoader.checkThreadLocalsForLeaksFail",
+                        getContextName()), t);
+            }
         }
     }
 
@@ -2116,7 +2123,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
             if (jreCompat.isInstanceOfInaccessibleObjectException(e)) {
                 // Must be running on Java 9 without the necessary command line
                 // options.
-                log.warn(sm.getString("webappClassLoader.addExports"));
+                log.warn(sm.getString("webappClassLoader.addExportsRmi"));
             } else {
                 // Re-throw all other exceptions
                 throw e;

==================================================
JreCompat.java
index 6a0f3d5697..d57f1d3ac6 100644
--- a/java/org/apache/tomcat/util/compat/Jre9Compat.java
+++ b/java/org/apache/tomcat/util/compat/Jre9Compat.java
@@ -40,11 +40,11 @@ class Jre9Compat extends JreCompat {
 
 
     @Override
-    public boolean isInstanceOfInaccessibleObjectException(Exception e) {
-        if (e == null) {
+    public boolean isInstanceOfInaccessibleObjectException(Throwable t) {
+        if (t == null) {
             return false;
         }
 
-        return inaccessibleObjectExceptionClazz.isAssignableFrom(e.getClass());
+        return inaccessibleObjectExceptionClazz.isAssignableFrom(t.getClass());
     }
 }

==================================================
