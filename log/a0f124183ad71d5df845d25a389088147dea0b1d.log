a0f124183ad71d5df845d25a389088147dea0b1d
==================================================
Http11OutputBuffer no longer needs to reference a Socket type
==================================================
Mark Thomas
==================================================
Thu Jan 8 21:00:43 2015 +0000
==================================================
AbstractHttp11Processor.java
Http11OutputBuffer no longer needs to reference a Socket type

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1650376 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index aa90b34a9a..9724099513 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -78,7 +78,7 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
     /**
      * Output.
      */
-    protected Http11OutputBuffer<S> outputBuffer;
+    protected Http11OutputBuffer outputBuffer;
 
 
     /**
@@ -624,7 +624,7 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
      * Exposes output buffer to super class to allow better code re-use.
      * @return  The output buffer used by the processor.
      */
-    protected Http11OutputBuffer<S> getOutputBuffer() {
+    protected Http11OutputBuffer getOutputBuffer() {
         return outputBuffer;
     }
 

==================================================
Http11Nio2Processor.java
index ed12cf0c14..cd3b4d2558 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -60,7 +60,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
         inputBuffer = new InternalAprInputBuffer(request, headerBufferSize);
         request.setInputBuffer(getInputBuffer());
 
-        outputBuffer = new Http11OutputBuffer<>(response, headerBufferSize);
+        outputBuffer = new Http11OutputBuffer(response, headerBufferSize);
         response.setOutputBuffer(getOutputBuffer());
 
         initializeFilters(maxTrailerSize, maxExtensionSize, maxSwallowSize);

==================================================
Http11NioProcessor.java
index 3643002bd9..4d748c4063 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Processor.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Processor.java
@@ -64,7 +64,7 @@ public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
         inputBuffer = new InternalNio2InputBuffer(request, maxHttpHeaderSize);
         request.setInputBuffer(getInputBuffer());
 
-        outputBuffer = new Http11OutputBuffer<>(response, maxHttpHeaderSize);
+        outputBuffer = new Http11OutputBuffer(response, maxHttpHeaderSize);
         response.setOutputBuffer(getOutputBuffer());
 
         initializeFilters(maxTrailerSize, maxExtensionSize, maxSwallowSize);

==================================================
Http11OutputBuffer.java
index 87375ca24d..d4c71fb9c9 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -65,7 +65,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
         inputBuffer = new InternalNioInputBuffer(request, maxHttpHeaderSize);
         request.setInputBuffer(getInputBuffer());
 
-        outputBuffer = new Http11OutputBuffer<>(response, maxHttpHeaderSize);
+        outputBuffer = new Http11OutputBuffer(response, maxHttpHeaderSize);
         response.setOutputBuffer(getOutputBuffer());
 
         initializeFilters(maxTrailerSize, maxExtensionSize, maxSwallowSize);

==================================================
TesterOutputBuffer.java
index e608212399..60cd4b6dbf 100644
--- a/java/org/apache/coyote/http11/Http11OutputBuffer.java
+++ b/java/org/apache/coyote/http11/Http11OutputBuffer.java
@@ -32,7 +32,7 @@ import org.apache.tomcat.util.http.HttpMessages;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 import org.apache.tomcat.util.res.StringManager;
 
-public class Http11OutputBuffer<S> implements OutputBuffer {
+public class Http11OutputBuffer implements OutputBuffer {
 
     // ----------------------------------------------------- Instance Variables
 
@@ -93,7 +93,7 @@ public class Http11OutputBuffer<S> implements OutputBuffer {
     /**
      * Wrapper for socket where data will be written to.
      */
-    protected SocketWrapperBase<S> socketWrapper;
+    protected SocketWrapperBase<?> socketWrapper;
 
 
     /**
@@ -340,7 +340,7 @@ public class Http11OutputBuffer<S> implements OutputBuffer {
     }
 
 
-    public void init(SocketWrapperBase<S> socketWrapper) {
+    public void init(SocketWrapperBase<?> socketWrapper) {
         this.socketWrapper = socketWrapper;
         // TODO: Ensure write buffer is >= header buffer size
     }

==================================================
