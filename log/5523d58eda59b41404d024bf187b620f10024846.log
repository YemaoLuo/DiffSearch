5523d58eda59b41404d024bf187b620f10024846
==================================================
Actual testing with OpenSSL 1.1
==================================================
remm remm@apache.org
==================================================
Mon Jun 20 15:38:04 2022 +0200
==================================================
OpenSSLContext.java
index 32a9816e51..0ee967b515 100644
--- a/modules/openssl-foreign/README.md
+++ b/modules/openssl-foreign/README.md
@@ -30,7 +30,7 @@ Note: The build path for the JDK will be different on other platforms.
 
 The module uses the OpenSSL 3.0 API. It requires an API compatible version of
 OpenSSL or a compatible alternative library, that can be loaded from the JVM
-library path.
+library path. OpenSSL 1.1 is also supported.
 
 Copy `tomcat-coyote-openssl-1.0.jar` to the Apache Tomcat `lib` folder.
 

==================================================
OpenSSLEngine.java
index 5f85266d2c..a16f1dc37c 100644
--- a/modules/openssl-foreign/src/main/java/org/apache/tomcat/util/net/openssl/panama/OpenSSLContext.java
+++ b/modules/openssl-foreign/src/main/java/org/apache/tomcat/util/net/openssl/panama/OpenSSLContext.java
@@ -17,6 +17,7 @@
 package org.apache.tomcat.util.net.openssl.panama;
 
 import static org.apache.tomcat.util.openssl.openssl_h.*;
+import static org.apache.tomcat.util.openssl.openssl_compat_h.*;
 
 import java.io.File;
 import java.lang.foreign.Addressable;
@@ -151,6 +152,8 @@ public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
         }
     }
 
+    static final boolean OPENSSL_3 = (OpenSSL_version_num() >= 0x3000000fL);
+
     private final SSLHostConfig sslHostConfig;
     private final SSLHostConfigCertificate certificate;
     private final boolean alpn;
@@ -760,7 +763,8 @@ public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
     // DH *(*tmp_dh_callback)(SSL *ssl, int is_export, int keylength)
     public static Addressable openSSLCallbackTmpDH(MemoryAddress ssl, int isExport, int keylength) {
         var pkey = SSL_get_privatekey(ssl);
-        int type = (MemoryAddress.NULL.equals(pkey)) ? EVP_PKEY_NONE() : EVP_PKEY_get_base_id(pkey);
+        int type = (MemoryAddress.NULL.equals(pkey)) ? EVP_PKEY_NONE()
+                : (OPENSSL_3 ? EVP_PKEY_get_base_id(pkey) : EVP_PKEY_base_id(pkey));
         /*
          * OpenSSL will call us with either keylen == 512 or keylen == 1024
          * (see the definition of SSL_EXPORT_PKEYLENGTH in ssl_locl.h).
@@ -775,7 +779,7 @@ public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
          */
         int keylen = 0;
         if ((type == EVP_PKEY_RSA()) || (type == EVP_PKEY_DSA())) {
-            keylen = EVP_PKEY_get_bits(pkey);
+            keylen = (OPENSSL_3 ? EVP_PKEY_get_bits(pkey) : EVP_PKEY_bits(pkey));
         }
         for (int i = 0; i < OpenSSLLifecycleListener.dhParameters.length; i++) {
             if (keylen >= OpenSSLLifecycleListener.dhParameters[i].min) {

==================================================
OpenSSLLifecycleListener.java
index c64e8e19c1..c486226ae2 100644
--- a/modules/openssl-foreign/src/main/java/org/apache/tomcat/util/net/openssl/panama/OpenSSLEngine.java
+++ b/modules/openssl-foreign/src/main/java/org/apache/tomcat/util/net/openssl/panama/OpenSSLEngine.java
@@ -56,6 +56,7 @@ import javax.net.ssl.SSLSessionBindingListener;
 import javax.net.ssl.SSLSessionContext;
 
 import static org.apache.tomcat.util.openssl.openssl_h.*;
+import static org.apache.tomcat.util.openssl.openssl_compat_h.*;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -966,7 +967,7 @@ public final class OpenSSLEngine extends SSLEngine implements SSLUtil.ProtocolIn
 
     private byte[] getPeerCertificate() {
         var allocator = SegmentAllocator.newNativeArena(engineMemorySession);
-        MemoryAddress/*(X509*)*/ x509 = SSL_get1_peer_certificate(state.ssl);
+        MemoryAddress/*(X509*)*/ x509 = (OpenSSLContext.OPENSSL_3 ? SSL_get1_peer_certificate(state.ssl) : SSL_get_peer_certificate(state.ssl));
         MemorySegment bufPointer = allocator.allocate(ValueLayout.ADDRESS, MemoryAddress.NULL);
         int length = i2d_X509(x509, bufPointer);
         if (length <= 0) {

==================================================
openssl_compat_h.java
index 5f0359d26d..50882bc3b8 100644
--- a/modules/openssl-foreign/src/main/java/org/apache/tomcat/util/net/openssl/panama/OpenSSLLifecycleListener.java
+++ b/modules/openssl-foreign/src/main/java/org/apache/tomcat/util/net/openssl/panama/OpenSSLLifecycleListener.java
@@ -285,7 +285,7 @@ public class OpenSSLLifecycleListener implements LifecycleListener {
             initDHParameters();
 
             // OpenSSL 3 onwards uses providers
-            boolean usingProviders = (OpenSSL_version_num() & 0xF0000000L) > 2;
+            boolean usingProviders = (OpenSSL_version_num() >= 0x3000000fL);
 
             if (usingProviders || !(null == FIPSMode || "off".equalsIgnoreCase(FIPSMode))) {
                 fipsModeActive = false;

==================================================
OpenSSLContext.java
index 41c638c656..0707ca8039 100644
--- a/modules/openssl-java17/README.md
+++ b/modules/openssl-java17/README.md
@@ -15,7 +15,7 @@ It can be built and run with Apache Tomcat 9.0 or newer.
 
 The module uses the OpenSSL 3.0 API. It requires an API compatible version of
 OpenSSL or a compatible alternative library, that can be loaded from the JVM
-library path.
+library path. OpenSSL 1.1 is also supported.
 
 Copy `tomcat-coyote-openssl-java17-1.0.jar` to the Apache Tomcat `lib` folder.
 

==================================================
OpenSSLEngine.java
index d710cbc1be..5aba20ae5a 100644
--- a/modules/openssl-java17/src/main/java/org/apache/tomcat/util/net/openssl/panama/OpenSSLContext.java
+++ b/modules/openssl-java17/src/main/java/org/apache/tomcat/util/net/openssl/panama/OpenSSLContext.java
@@ -25,6 +25,7 @@ import jdk.incubator.foreign.ResourceScope;
 import jdk.incubator.foreign.SegmentAllocator;
 
 import static org.apache.tomcat.util.openssl.openssl_h.*;
+import static org.apache.tomcat.util.openssl.openssl_compat_h.*;
 
 import java.io.File;
 import java.lang.invoke.MethodHandle;
@@ -151,6 +152,8 @@ public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
         }
     }
 
+    static final boolean OPENSSL_3 = (OpenSSL_version_num() >= 0x3000000fL);
+
     private final int minTlsVersion;
     private final int maxTlsVersion;
 
@@ -757,7 +760,8 @@ public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
     // DH *(*tmp_dh_callback)(SSL *ssl, int is_export, int keylength)
     public static MemoryAddress openSSLCallbackTmpDH(MemoryAddress ssl, int isExport, int keylength) {
         var pkey = SSL_get_privatekey(ssl);
-        int type = (MemoryAddress.NULL.equals(pkey)) ? EVP_PKEY_NONE() : EVP_PKEY_get_base_id(pkey);
+        int type = (MemoryAddress.NULL.equals(pkey)) ? EVP_PKEY_NONE()
+                : (OPENSSL_3 ? EVP_PKEY_get_base_id(pkey) : EVP_PKEY_base_id(pkey));
         /*
          * OpenSSL will call us with either keylen == 512 or keylen == 1024
          * (see the definition of SSL_EXPORT_PKEYLENGTH in ssl_locl.h).
@@ -772,7 +776,7 @@ public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
          */
         int keylen = 0;
         if ((type == EVP_PKEY_RSA()) || (type == EVP_PKEY_DSA())) {
-            keylen = EVP_PKEY_get_bits(pkey);
+            keylen = (OPENSSL_3 ? EVP_PKEY_get_bits(pkey) : EVP_PKEY_bits(pkey));
         }
         for (int i = 0; i < OpenSSLLifecycleListener.dhParameters.length; i++) {
             if (keylen >= OpenSSLLifecycleListener.dhParameters[i].min) {

==================================================
OpenSSLLifecycleListener.java
index 3942e37a3c..6691a14835 100644
--- a/modules/openssl-java17/src/main/java/org/apache/tomcat/util/net/openssl/panama/OpenSSLEngine.java
+++ b/modules/openssl-java17/src/main/java/org/apache/tomcat/util/net/openssl/panama/OpenSSLEngine.java
@@ -57,6 +57,7 @@ import jdk.incubator.foreign.ResourceScope;
 import jdk.incubator.foreign.SegmentAllocator;
 
 import static org.apache.tomcat.util.openssl.openssl_h.*;
+import static org.apache.tomcat.util.openssl.openssl_compat_h.*;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -966,7 +967,7 @@ public final class OpenSSLEngine extends SSLEngine implements SSLUtil.ProtocolIn
 
     private byte[] getPeerCertificate() {
         var allocator = SegmentAllocator.ofScope(engineScope);
-        MemoryAddress/*(X509*)*/ x509 = SSL_get1_peer_certificate(state.ssl);
+        MemoryAddress/*(X509*)*/ x509 = (OpenSSLContext.OPENSSL_3 ? SSL_get1_peer_certificate(state.ssl) : SSL_get_peer_certificate(state.ssl));
         MemorySegment bufPointer = allocator.allocate(CLinker.C_POINTER, MemoryAddress.NULL);
         int length = i2d_X509(x509, bufPointer);
         if (length <= 0) {

==================================================
openssl_compat_h.java
index fdb28bfa77..9da964d8e6 100644
--- a/modules/openssl-java17/src/main/java/org/apache/tomcat/util/net/openssl/panama/OpenSSLLifecycleListener.java
+++ b/modules/openssl-java17/src/main/java/org/apache/tomcat/util/net/openssl/panama/OpenSSLLifecycleListener.java
@@ -285,7 +285,7 @@ public class OpenSSLLifecycleListener implements LifecycleListener {
             initDHParameters();
 
             // OpenSSL 3 onwards uses providers
-            boolean usingProviders = (OpenSSL_version_num() & 0xF0000000L) > 2;
+            boolean usingProviders = (OpenSSL_version_num() >= 0x3000000fL);
 
             if (usingProviders || !(null == FIPSMode || "off".equalsIgnoreCase(FIPSMode))) {
                 fipsModeActive = false;

==================================================
