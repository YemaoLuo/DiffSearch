492a6dfb58d2e4b40a3380858a6244be4203dcf1
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=61171
==================================================
Mark Thomas
==================================================
Thu Nov 1 15:06:53 2018 +0000
==================================================
Server.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=61171
Add the portOffset attribute to the Server element which is added to the configured shutdown and Connector ports.
Based on a patch by Marek Czernek.
THis closes #125

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1845482 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Connector.java
index 9eaa8b3e2d..52e591494d 100644
--- a/java/org/apache/catalina/Server.java
+++ b/java/org/apache/catalina/Server.java
@@ -73,6 +73,9 @@ public interface Server extends Lifecycle {
 
     /**
      * @return the port number we listen to for shutdown commands.
+     *
+     * @see #getPortOffset()
+     * @see #getPortWithOffset()
      */
     public int getPort();
 
@@ -81,9 +84,37 @@ public interface Server extends Lifecycle {
      * Set the port number we listen to for shutdown commands.
      *
      * @param port The new port number
+     *
+     * @see #setPortOffset(int)
      */
     public void setPort(int port);
 
+    /**
+     * Get the number that offsets the port used for shutdown commands.
+     * For example, if port is 8005, and portOffset is 1000,
+     * the server listens at 9005.
+     *
+     * @return the port offset
+     */
+    public int getPortOffset();
+
+    /**
+     * Set the number that offsets the server port used for shutdown commands.
+     * For example, if port is 8005, and you set portOffset to 1000,
+     * connector listens at 9005.
+     *
+     * @param portOffset sets the port offset
+     */
+    public void setPortOffset(int portOffset);
+
+    /**
+     * Get the actual port on which server is listening for the shutdown commands.
+     * If you do not set port offset, port is returned. If you set
+     * port offset, port offset + port is returned.
+     *
+     * @return the port with offset
+     */
+    public int getPortWithOffset();
 
     /**
      * @return the address on which we listen to for shutdown commands.

==================================================
StandardServer.java
index fd15013300..b7ee93fc9e 100644
--- a/java/org/apache/catalina/core/LocalStrings.properties
+++ b/java/org/apache/catalina/core/LocalStrings.properties
@@ -197,6 +197,8 @@ standardHost.nullName=Host name is required
 standardHost.problematicAppBase=Using an empty string for appBase on host [{0}] will set it to CATALINA_BASE, which is a bad idea
 standardHostValue.customStatusFailed=Custom error page [{0}] could not be dispatched correctly
 standardServer.accept.timeout=The socket listening for the shutdown command experienced an unexpected timeout [{0}] milliseconds after the call to accept(). Is this an instance of bug 56684?
+standardServer.awaitSocket.fail=Failed to create server shutdown socket on address [{0}] and port [{1}] (base port [{2}] and offset [{3}])
+standardServer.portOffset.invalid=The value [{0}] for portOffset is not valid as portOffset may not be negative
 standardServer.shutdownViaPort=A valid shutdown command was received via the shutdown port. Stopping the Server instance.
 standardServer.storeConfig.notAvailable=No StoreConfig implementation was registered as an MBean named [{0}] so no configuration could be saved. A suitable MBean is normally registered via the StoreConfigLifecycleListener.
 standardService.engine.startFailed=Failed to start associated Engine

==================================================
MBeanFactory.java
index d606e7cc94..91e5d7f5f9 100644
--- a/java/org/apache/catalina/core/mbeans-descriptors.xml
+++ b/java/org/apache/catalina/core/mbeans-descriptors.xml
@@ -1305,9 +1305,18 @@
                type="java.lang.Object"/>
 
     <attribute name="port"
-               description="TCP port for shutdown messages"
+               description="TCP port (excluding any offset) for shutdown messages"
                type="int"/>
 
+    <attribute name="portOffset"
+               description="The offset applied to port and to the port attributes of any nested connectors"
+               type="int"/>
+
+    <attribute name="portWithOffset"
+               description="Actual TCP port (including any offset) for shutdown messages"
+               type="int"
+               writeable="false"/>
+
     <attribute name="serverInfo"
                description="Tomcat server release identifier"
                type="java.lang.String"

==================================================
RealmBase.java
index 03fedeb39b..253837807b 100644
--- a/java/org/apache/catalina/mbeans/MBeanFactory.java
+++ b/java/org/apache/catalina/mbeans/MBeanFactory.java
@@ -699,7 +699,7 @@ public class MBeanFactory {
             if (objConnAddress != null) {
                 connAddress = ((InetAddress) objConnAddress).getHostAddress();
             }
-            String connPort = ""+conns[i].getPort();
+            String connPort = ""+conns[i].getPortWithOffset();
 
             if (address == null) {
                 // Don't combine this with outer if or we could get an NPE in

==================================================
AddPortOffsetRule.java
index 321697f40b..bd1183bffc 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -1016,7 +1016,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
             return true;
         }
         // Initialize variables we need to determine the appropriate action
-        int redirectPort = request.getConnector().getRedirectPort();
+        int redirectPort = request.getConnector().getRedirectPortWithOffset();
 
         // Is redirecting disabled?
         if (redirectPort <= 0) {

==================================================
Catalina.java
new file mode 100644
index 0000000000..9b961cb807
--- /dev/null
+++ b/java/org/apache/catalina/startup/AddPortOffsetRule.java
@@ -0,0 +1,36 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.startup;
+
+import org.apache.catalina.Server;
+import org.apache.catalina.connector.Connector;
+import org.apache.tomcat.util.digester.Rule;
+import org.xml.sax.Attributes;
+
+public class AddPortOffsetRule extends Rule {
+
+    // Set portOffset on all the connectors based on portOffset in the Server
+    @Override
+    public void begin(String namespace, String name, Attributes attributes) throws Exception {
+
+        Connector conn = (Connector) digester.peek();
+        Server server = (Server) digester.peek(2);
+
+        int portOffset = server.getPortOffset();
+        conn.setPortOffset(portOffset);
+    }
+}
\ No newline at end of file

==================================================
RemoteAddrValve.java
index c073db66d5..0886bd943f 100644
--- a/java/org/apache/catalina/startup/LocalStrings.properties
+++ b/java/org/apache/catalina/startup/LocalStrings.properties
@@ -18,7 +18,7 @@ catalina.noCluster=Cluster RuleSet not found due to [{0}]. Cluster configuration
 catalina.serverStartFail=The required Server component failed to start so Tomcat is unable to start.
 catalina.shutdownHookFail=The shutdown hook experienced an error while trying to stop the server
 catalina.stopServer=No shutdown port configured. Shut down server through OS signal. Server not shut down.
-catalina.stopServer.connectException=Could not contact [{0}:[{1}]]. Tomcat may not be running.
+catalina.stopServer.connectException=Could not contact [{0}:{1}] (base port [{2}] and offset [{3}]). Tomcat may not be running.
 contextConfig.altDDNotFound=alt-dd file [{0}] not found
 contextConfig.annotationsStackOverflow=Unable to complete the scan for annotations for web application [{0}] due to a StackOverflowError. Possible root causes include a too low setting for -Xss and illegal cyclic inheritance dependencies. The class hierarchy being processed was [{1}]
 contextConfig.applicationUrl=Unable to determine URL for application web.xml

==================================================
RemoteHostValve.java
index d8dc2a352f..f34002910a 100644
--- a/java/org/apache/catalina/valves/RemoteAddrValve.java
+++ b/java/org/apache/catalina/valves/RemoteAddrValve.java
@@ -45,7 +45,8 @@ public final class RemoteAddrValve extends RequestFilterValve {
     public void invoke(Request request, Response response) throws IOException, ServletException {
         String property;
         if (getAddConnectorPort()) {
-            property = request.getRequest().getRemoteAddr() + ";" + request.getConnector().getPort();
+            property = request.getRequest().getRemoteAddr() + ";" +
+                    request.getConnector().getPortWithOffset();
         } else {
             property = request.getRequest().getRemoteAddr();
         }

==================================================
AbstractProtocol.java
index d94389bf9f..90c6b8b5a9 100644
--- a/java/org/apache/catalina/valves/RemoteHostValve.java
+++ b/java/org/apache/catalina/valves/RemoteHostValve.java
@@ -43,7 +43,8 @@ public final class RemoteHostValve extends RequestFilterValve {
     public void invoke(Request request, Response response) throws IOException, ServletException {
         String property;
         if (getAddConnectorPort()) {
-            property = request.getRequest().getRemoteHost() + ";" + request.getConnector().getPort();
+            property = request.getRequest().getRemoteHost() + ";" +
+                    request.getConnector().getPortWithOffset();
         } else {
             property = request.getRequest().getRemoteHost();
         }

==================================================
AbstractEndpoint.java
index d0bd9366c1..b02ebc2df6 100644
--- a/java/org/apache/coyote/LocalStrings.properties
+++ b/java/org/apache/coyote/LocalStrings.properties
@@ -36,6 +36,7 @@ abstractProtocol.mbeanDeregistrationFailed=Failed to deregister MBean named [{0}
 abstractProtocolHandler.getAttribute=Get attribute [{0}] with value [{1}]
 abstractProtocolHandler.setAttribute=Set attribute [{0}] with value [{1}]
 abstractProtocolHandler.init=Initializing ProtocolHandler [{0}]
+abstractProtocolHandler.portOffset=ProtocolHandler [{0}] is configured with a base port of [{1}] and a port offset of [{2}]
 abstractProtocolHandler.start=Starting ProtocolHandler [{0}]
 abstractProtocolHandler.pause=Pausing ProtocolHandler [{0}]
 abstractProtocolHandler.resume=Resuming ProtocolHandler [{0}]

==================================================
AprEndpoint.java
index 6982814c9d..d01786cb00 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -456,6 +456,27 @@ public abstract class AbstractEndpoint<S,U> {
     public void setPort(int port ) { this.port=port; }
 
 
+    private int portOffset = 0;
+    public int getPortOffset() { return portOffset; }
+    public void setPortOffset(int portOffset ) {
+        if (portOffset < 0) {
+            throw new IllegalArgumentException(
+                    sm.getString("endpoint.portOffset.invalid", Integer.valueOf(portOffset)));
+        }
+        this.portOffset = portOffset;
+    }
+
+
+    public int getPortWithOffset() {
+        // Zero is a special case and negative values are invalid
+        int port = getPort();
+        if (port > 0) {
+            return port + getPortOffset();
+        }
+        return port;
+    }
+
+
     public final int getLocalPort() {
         try {
             InetSocketAddress localAddress = getLocalAddress();
@@ -922,7 +943,8 @@ public abstract class AbstractEndpoint<S,U> {
         } catch(Throwable t) {
             ExceptionUtils.handleThrowable(t);
             if (getLog().isDebugEnabled()) {
-                getLog().debug(sm.getString("endpoint.debug.unlock.fail", "" + getPort()), t);
+                getLog().debug(sm.getString(
+                        "endpoint.debug.unlock.fail", String.valueOf(getPortWithOffset())), t);
             }
         }
     }

==================================================
Nio2Endpoint.java
index 49fa8e15e8..53dd2e0aaf 100644
--- a/java/org/apache/tomcat/util/net/LocalStrings.properties
+++ b/java/org/apache/tomcat/util/net/LocalStrings.properties
@@ -61,6 +61,7 @@ endpoint.poll.initfail=Poller creation failed
 endpoint.poll.fail=Critical poller failure (restarting poller): [{0}] [{1}]
 endpoint.poll.error=Unexpected poller error
 endpoint.pollerThreadStop=The poller thread failed to stop in a timely manner
+endpoint.portOffset.invalid=The value [{0}] for portOffset is not valid as portOffset may not be negative
 endpoint.process.fail=Error allocating socket processor
 endpoint.processing.fail=Error running socket processor
 endpoint.removeDefaultSslHostConfig=The default SSLHostConfig (named [{0}]) may not be removed

==================================================
NioEndpoint.java
index 1364c455ac..0e5f82dc46 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -142,7 +142,7 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel,AsynchronousS
 
         serverSock = AsynchronousServerSocketChannel.open(threadGroup);
         socketProperties.setProperties(serverSock);
-        InetSocketAddress addr = (getAddress()!=null?new InetSocketAddress(getAddress(),getPort()):new InetSocketAddress(getPort()));
+        InetSocketAddress addr = new InetSocketAddress(getAddress(), getPortWithOffset());
         serverSock.bind(addr,getAcceptCount());
 
         // Initialize thread count defaults for acceptor, poller

==================================================
