a720304a435a16c1dee656ed95c33a1df0b1709f
==================================================
UCDetector: Remove unused classes
==================================================
Mark Emlyn
==================================================
Tue Feb 19 20:31:17 2013 +0000
==================================================
CallParamRule.java
UCDetector: Remove unused classes

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1447905 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ObjectParamRule.java
index fe6cf0d42d..9329a3bf0e 100644
--- a/java/org/apache/tomcat/util/digester/CallParamRule.java
+++ b/java/org/apache/tomcat/util/digester/CallParamRule.java
@@ -35,7 +35,6 @@ import org.xml.sax.Attributes;
  * <li>from the top object on the stack.
  * See {@link #CallParamRule(int paramIndex, boolean fromStack)}
  * <li>the current path being processed (separate <code>Rule</code>).
- * See {@link PathCallParamRule}
  * </ul>
  * </p>
  */

==================================================
PathCallParamRule.java
deleted file mode 100644
index 4dda7553a7..0000000000
--- a/java/org/apache/tomcat/util/digester/ObjectParamRule.java
+++ /dev/null
@@ -1,126 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-
-package org.apache.tomcat.util.digester;
-
-import org.xml.sax.Attributes;
-
-/**
- * <p>Rule implementation that saves a parameter for use by a surrounding
- * <code>CallMethodRule<code>.</p>
- *
- * <p>This parameter may be:
- * <ul>
- * <li>an arbitrary Object defined programatically, assigned when the element pattern associated with the Rule is matched
- * See {@link #ObjectParamRule(int paramIndex, Object param)}
- * <li>an arbitrary Object defined programatically, assigned if the element pattern AND specified attribute name are matched
- * See {@link #ObjectParamRule(int paramIndex, String attributeName, Object param)}
- * </ul>
- * </p>
- *
- * @since 1.4
- */
-
-public class ObjectParamRule extends Rule {
-    // ----------------------------------------------------------- Constructors
-    /**
-     * Construct a "call parameter" rule that will save the given Object as
-     * the parameter value.
-     *
-     * @param paramIndex The zero-relative parameter number
-     * @param param the parameter to pass along
-     */
-    public ObjectParamRule(int paramIndex, Object param) {
-        this(paramIndex, null, param);
-    }
-
-
-    /**
-     * Construct a "call parameter" rule that will save the given Object as
-     * the parameter value, provided that the specified attribute exists.
-     *
-     * @param paramIndex The zero-relative parameter number
-     * @param attributeName The name of the attribute to match
-     * @param param the parameter to pass along
-     */
-    public ObjectParamRule(int paramIndex, String attributeName, Object param) {
-        this.paramIndex = paramIndex;
-        this.attributeName = attributeName;
-        this.param = param;
-    }
-
-
-    // ----------------------------------------------------- Instance Variables
-
-    /**
-     * The attribute which we are attempting to match
-     */
-    protected String attributeName = null;
-
-    /**
-     * The zero-relative index of the parameter we are saving.
-     */
-    protected int paramIndex = 0;
-
-    /**
-     * The parameter we wish to pass to the method call
-     */
-    protected Object param = null;
-
-
-    // --------------------------------------------------------- Public Methods
-
-    /**
-     * Process the start of this element.
-     *
-     * @param attributes The attribute list for this element
-     */
-    @Override
-    public void begin(String namespace, String name,
-                      Attributes attributes) throws Exception {
-        Object anAttribute = null;
-        Object parameters[] = (Object[]) digester.peekParams();
-
-        if (attributeName != null) {
-            anAttribute = attributes.getValue(attributeName);
-            if(anAttribute != null) {
-                parameters[paramIndex] = param;
-            }
-            // note -- if attributeName != null and anAttribute == null, this rule
-            // will pass null as its parameter!
-        }else{
-            parameters[paramIndex] = param;
-        }
-    }
-
-    /**
-     * Render a printable version of this Rule.
-     */
-    @Override
-    public String toString() {
-        StringBuilder sb = new StringBuilder("ObjectParamRule[");
-        sb.append("paramIndex=");
-        sb.append(paramIndex);
-        sb.append(", attributeName=");
-        sb.append(attributeName);
-        sb.append(", param=");
-        sb.append(param);
-        sb.append("]");
-        return (sb.toString());
-    }
-}

==================================================
SetPropertyRule.java
deleted file mode 100644
index e02c5ab254..0000000000
--- a/java/org/apache/tomcat/util/digester/PathCallParamRule.java
+++ /dev/null
@@ -1,95 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-
-package org.apache.tomcat.util.digester;
-
-
-import org.xml.sax.Attributes;
-
-/**
- * <p>Rule implementation that saves a parameter containing the
- * <code>Digester</code> matching path for use by a surrounding
- * <code>CallMethodRule</code>. This Rule is most useful when making
- * extensive use of wildcards in rule patterns.</p>
- *
- * @since 1.6
- */
-
-public class PathCallParamRule extends Rule {
-
-    // ----------------------------------------------------------- Constructors
-
-    /**
-     * Construct a "call parameter" rule that will save the body text of this
-     * element as the parameter value.
-     *
-     * @param paramIndex The zero-relative parameter number
-     */
-    public PathCallParamRule(int paramIndex) {
-
-        this.paramIndex = paramIndex;
-
-    }
-
-    // ----------------------------------------------------- Instance Variables
-
-    /**
-     * The zero-relative index of the parameter we are saving.
-     */
-    protected int paramIndex = 0;
-
-    // --------------------------------------------------------- Public Methods
-
-
-    /**
-     * Process the start of this element.
-     *
-     * @param namespace the namespace URI of the matching element, or an
-     *   empty string if the parser is not namespace aware or the element has
-     *   no namespace
-     * @param name the local name if the parser is namespace aware, or just
-     *   the element name otherwise
-     * @param attributes The attribute list for this element
-
-     */
-    @Override
-    public void begin(String namespace, String name, Attributes attributes) throws Exception {
-
-        String param = getDigester().getMatch();
-
-        if(param != null) {
-            Object parameters[] = (Object[]) digester.peekParams();
-            parameters[paramIndex] = param;
-        }
-
-    }
-
-    /**
-     * Render a printable version of this Rule.
-     */
-    @Override
-    public String toString() {
-
-        StringBuilder sb = new StringBuilder("PathCallParamRule[");
-        sb.append("paramIndex=");
-        sb.append(paramIndex);
-        sb.append("]");
-        return (sb.toString());
-
-    }
-}

==================================================
SetRootRule.java
deleted file mode 100644
index 00e0ca781f..0000000000
--- a/java/org/apache/tomcat/util/digester/SetPropertyRule.java
+++ /dev/null
@@ -1,141 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-
-package org.apache.tomcat.util.digester;
-
-
-import org.apache.tomcat.util.IntrospectionUtils;
-import org.xml.sax.Attributes;
-
-
-/**
- * Rule implementation that sets an individual property on the object at the
- * top of the stack, based on attributes with specified names.
- */
-
-public class SetPropertyRule extends Rule {
-
-    // ----------------------------------------------------------- Constructors
-
-    /**
-     * Construct a "set property" rule with the specified name and value
-     * attributes.
-     *
-     * @param name Name of the attribute that will contain the name of the
-     *  property to be set
-     * @param value Name of the attribute that will contain the value to which
-     *  the property should be set
-     */
-    public SetPropertyRule(String name, String value) {
-
-        this.name = name;
-        this.value = value;
-
-    }
-
-    // ----------------------------------------------------- Instance Variables
-
-
-    /**
-     * The attribute that will contain the property name.
-     */
-    protected String name = null;
-
-
-    /**
-     * The attribute that will contain the property value.
-     */
-    protected String value = null;
-
-
-    // --------------------------------------------------------- Public Methods
-
-
-    /**
-     * Process the beginning of this element.
-     *
-     * @param namespace the namespace URI of the matching element, or an
-     *   empty string if the parser is not namespace aware or the element has
-     *   no namespace
-     * @param theName the local name if the parser is namespace aware, or just
-     *   the element name otherwise
-     * @param attributes The attribute list for this element
-     *
-     * @exception NoSuchMethodException if the bean does not
-     *  have a writable property of the specified name
-     */
-    @Override
-    public void begin(String namespace, String theName, Attributes attributes)
-            throws Exception {
-
-        // Identify the actual property name and value to be used
-        String actualName = null;
-        String actualValue = null;
-        for (int i = 0; i < attributes.getLength(); i++) {
-            String name = attributes.getLocalName(i);
-            if ("".equals(name)) {
-                name = attributes.getQName(i);
-            }
-            String value = attributes.getValue(i);
-            if (name.equals(this.name)) {
-                actualName = value;
-            } else if (name.equals(this.value)) {
-                actualValue = value;
-            }
-        }
-
-        // Get a reference to the top object
-        Object top = digester.peek();
-
-        // Log some debugging information
-        if (digester.log.isDebugEnabled()) {
-            digester.log.debug("[SetPropertyRule]{" + digester.match +
-                    "} Set " + top.getClass().getName() + " property " +
-                    actualName + " to " + actualValue);
-        }
-
-        // Set the property (with conversion as necessary)
-        if (!digester.isFakeAttribute(top, actualName)
-                && !IntrospectionUtils.setProperty(top, actualName, actualValue)
-                && digester.getRulesValidation()) {
-            digester.log.warn("[SetPropertyRule]{" + digester.match +
-                    "} Setting property '" + name + "' to '" +
-                    value + "' did not find a matching property.");
-        }
-
-    }
-
-
-    /**
-     * Render a printable version of this Rule.
-     */
-    @Override
-    public String toString() {
-
-        StringBuilder sb = new StringBuilder("SetPropertyRule[");
-        sb.append("name=");
-        sb.append(name);
-        sb.append(", value=");
-        sb.append(value);
-        sb.append("]");
-        return (sb.toString());
-
-    }
-
-
-}

==================================================
SetTopRule.java
deleted file mode 100644
index 49496e196c..0000000000
--- a/java/org/apache/tomcat/util/digester/SetRootRule.java
+++ /dev/null
@@ -1,183 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-
-package org.apache.tomcat.util.digester;
-
-import org.apache.tomcat.util.IntrospectionUtils;
-
-
-/**
- * <p>Rule implementation that calls a method on the root object on the stack,
- * passing the top object (child) as an argument.
- * It is important to remember that this rule acts on <code>end</code>.</p>
- *
- * <p>This rule now supports more flexible method matching by default.
- * It is possible that this may break (some) code
- * written against release 1.1.1 or earlier.
- * See {@link #isExactMatch()} for more details.</p>
- */
-
-public class SetRootRule extends Rule {
-
-    // ----------------------------------------------------------- Constructors
-
-    /**
-     * Construct a "set root" rule with the specified method name.  The
-     * method's argument type is assumed to be the class of the
-     * child object.
-     *
-     * @param methodName Method name of the parent method to call
-     */
-    public SetRootRule(String methodName) {
-
-        this(methodName, null);
-
-    }
-
-
-    /**
-     * Construct a "set root" rule with the specified method name.
-     *
-     * @param methodName Method name of the parent method to call
-     * @param paramType Java class of the parent method's argument
-     *  (if you wish to use a primitive type, specify the corresponding
-     *  Java wrapper class instead, such as <code>java.lang.Boolean</code>
-     *  for a <code>boolean</code> parameter)
-     */
-    public SetRootRule(String methodName,
-                       String paramType) {
-
-        this.methodName = methodName;
-        this.paramType = paramType;
-
-    }
-
-    // ----------------------------------------------------- Instance Variables
-
-
-    /**
-     * The method name to call on the parent object.
-     */
-    protected String methodName = null;
-
-
-    /**
-     * The Java class name of the parameter type expected by the method.
-     */
-    protected String paramType = null;
-
-    /**
-     * Should we use exact matching. Default is no.
-     */
-    protected boolean useExactMatch = false;
-
-
-    // --------------------------------------------------------- Public Methods
-
-
-    /**
-     * <p>Is exact matching being used.</p>
-     *
-     * <p>This rule uses <code>org.apache.commons.beanutils.MethodUtils</code>
-     * to introspect the relevant objects so that the right method can be called.
-     * Originally, <code>MethodUtils.invokeExactMethod</code> was used.
-     * This matches methods very strictly
-     * and so may not find a matching method when one exists.
-     * This is still the behaviour when exact matching is enabled.</p>
-     *
-     * <p>When exact matching is disabled, <code>MethodUtils.invokeMethod</code> is used.
-     * This method finds more methods but is less precise when there are several methods
-     * with correct signatures.
-     * So, if you want to choose an exact signature you might need to enable this property.</p>
-     *
-     * <p>The default setting is to disable exact matches.</p>
-     *
-     * @return true iff exact matching is enabled
-     * @since Digester Release 1.1.1
-     */
-    public boolean isExactMatch() {
-
-        return useExactMatch;
-    }
-
-
-    /**
-     * <p>Set whether exact matching is enabled.</p>
-     *
-     * <p>See {@link #isExactMatch()}.</p>
-     *
-     * @param useExactMatch should this rule use exact method matching
-     * @since Digester Release 1.1.1
-     */
-    public void setExactMatch(boolean useExactMatch) {
-
-        this.useExactMatch = useExactMatch;
-    }
-
-    /**
-     * Process the end of this element.
-     *
-     * @param namespace the namespace URI of the matching element, or an
-     *   empty string if the parser is not namespace aware or the element has
-     *   no namespace
-     * @param name the local name if the parser is namespace aware, or just
-     *   the element name otherwise
-     */
-    @Override
-    public void end(String namespace, String name) throws Exception {
-
-        // Identify the objects to be used
-        Object child = digester.peek(0);
-        Object parent = digester.root;
-        if (digester.log.isDebugEnabled()) {
-            if (parent == null) {
-                digester.log.debug("[SetRootRule]{" + digester.match +
-                        "} Call [NULL ROOT]." +
-                        methodName + "(" + child + ")");
-            } else {
-                digester.log.debug("[SetRootRule]{" + digester.match +
-                        "} Call " + parent.getClass().getName() + "." +
-                        methodName + "(" + child + ")");
-            }
-        }
-
-        // Call the specified method
-        IntrospectionUtils.callMethod1(parent, methodName,
-                child, paramType, digester.getClassLoader());
-
-    }
-
-
-    /**
-     * Render a printable version of this Rule.
-     */
-    @Override
-    public String toString() {
-
-        StringBuilder sb = new StringBuilder("SetRootRule[");
-        sb.append("methodName=");
-        sb.append(methodName);
-        sb.append(", paramType=");
-        sb.append(paramType);
-        sb.append("]");
-        return (sb.toString());
-
-    }
-
-
-}

==================================================
