f2254a22d77aee55db3d5a4a2280360c871bb207
==================================================
Refactor
==================================================
Mark Thomas
==================================================
Fri Oct 6 09:59:31 2017 +0000
==================================================
ExpressionFactory.java
Refactor
Use ReflectiveOperationException rather than multiple sub-classes

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1811311 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StaticFieldELResolver.java
index fc296549b8..71cd789d93 100644
--- a/java/javax/el/ExpressionFactory.java
+++ b/java/javax/el/ExpressionFactory.java
@@ -175,17 +175,16 @@ public abstract class ExpressionFactory {
                     (ExpressionFactory) constructor.newInstance(properties);
             }
 
-        } catch (InstantiationException | IllegalAccessException | IllegalArgumentException |
-                NoSuchMethodException e) {
-            throw new ELException(
-                    "Unable to create ExpressionFactory of type: " + clazz.getName(),
-                    e);
         } catch (InvocationTargetException e) {
             Throwable cause = e.getCause();
             Util.handleThrowable(cause);
             throw new ELException(
                     "Unable to create ExpressionFactory of type: " + clazz.getName(),
                     e);
+        } catch (ReflectiveOperationException | IllegalArgumentException e) {
+            throw new ELException(
+                    "Unable to create ExpressionFactory of type: " + clazz.getName(),
+                    e);
         }
 
         return result;

==================================================
AuthConfigFactory.java
index 19911dc103..f037f95f61 100644
--- a/java/javax/el/StaticFieldELResolver.java
+++ b/java/javax/el/StaticFieldELResolver.java
@@ -101,13 +101,12 @@ public class StaticFieldELResolver extends ELResolver {
 
                 try {
                     result = match.newInstance(parameters);
-                } catch (IllegalArgumentException | IllegalAccessException |
-                        InstantiationException e) {
-                    throw new ELException(e);
                 } catch (InvocationTargetException e) {
                     Throwable cause = e.getCause();
                     Util.handleThrowable(cause);
                     throw new ELException(cause);
+                } catch (ReflectiveOperationException e) {
+                    throw new ELException(e);
                 }
                 return result;
 

==================================================
ContainerProvider.java
index 1cd117de93..74af7dd807 100644
--- a/java/javax/security/auth/message/config/AuthConfigFactory.java
+++ b/java/javax/security/auth/message/config/AuthConfigFactory.java
@@ -16,7 +16,6 @@
  */
 package javax.security.auth.message.config;
 
-import java.lang.reflect.InvocationTargetException;
 import java.security.AccessController;
 import java.security.Permission;
 import java.security.PrivilegedAction;
@@ -65,9 +64,8 @@ public abstract class AuthConfigFactory {
             factory = AccessController.doPrivileged(
                     new PrivilegedExceptionAction<AuthConfigFactory>() {
                 @Override
-                public AuthConfigFactory run() throws ClassNotFoundException,
-                        InstantiationException, IllegalAccessException, IllegalArgumentException,
-                        InvocationTargetException, NoSuchMethodException, SecurityException {
+                public AuthConfigFactory run() throws ReflectiveOperationException,
+                        IllegalArgumentException, SecurityException {
                     // Load this class with the same class loader as used for
                     // this class. Note that the Thread context class loader
                     // should not be used since that would trigger a memory leak

==================================================
ServerEndpointConfig.java
index 8bad8d1c3b..f95c9ade16 100644
--- a/java/javax/websocket/ContainerProvider.java
+++ b/java/javax/websocket/ContainerProvider.java
@@ -16,7 +16,6 @@
  */
 package javax.websocket;
 
-import java.lang.reflect.InvocationTargetException;
 import java.util.Iterator;
 import java.util.ServiceLoader;
 
@@ -52,8 +51,7 @@ public abstract class ContainerProvider {
                         (Class<WebSocketContainer>) Class.forName(
                                 DEFAULT_PROVIDER_CLASS_NAME);
                 result = clazz.getConstructor().newInstance();
-            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException |
-                    IllegalArgumentException | InvocationTargetException | NoSuchMethodException |
+            } catch (ReflectiveOperationException | IllegalArgumentException |
                     SecurityException e) {
                 // No options left. Just return null.
             }

==================================================
AuthConfigFactoryImpl.java
index c1ce558c61..50b6341f57 100644
--- a/java/javax/websocket/server/ServerEndpointConfig.java
+++ b/java/javax/websocket/server/ServerEndpointConfig.java
@@ -16,7 +16,6 @@
  */
 package javax.websocket.server;
 
-import java.lang.reflect.InvocationTargetException;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
@@ -177,9 +176,8 @@ public interface ServerEndpointConfig extends EndpointConfig {
                             (Class<Configurator>) Class.forName(
                                     DEFAULT_IMPL_CLASSNAME);
                     result = clazz.getConstructor().newInstance();
-                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException |
-                        IllegalArgumentException | InvocationTargetException |
-                        NoSuchMethodException | SecurityException e) {
+                } catch (ReflectiveOperationException | IllegalArgumentException |
+                        SecurityException e) {
                     // No options left. Just return null.
                 }
             }

==================================================
SimpleServerAuthConfig.java
index fa5e9aacc2..94d558e326 100644
--- a/java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java
+++ b/java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java
@@ -18,7 +18,6 @@ package org.apache.catalina.authenticator.jaspic;
 
 import java.io.File;
 import java.lang.reflect.Constructor;
-import java.lang.reflect.InvocationTargetException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -115,8 +114,7 @@ public class AuthConfigFactoryImpl extends AuthConfigFactory {
             clazz = Class.forName(className);
             Constructor<?> constructor = clazz.getConstructor(Map.class, AuthConfigFactory.class);
             provider = (AuthConfigProvider) constructor.newInstance(properties, null);
-        } catch (ClassNotFoundException | NoSuchMethodException | InstantiationException |
-                IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
+        } catch (ReflectiveOperationException | IllegalArgumentException e) {
             throw new SecurityException(e);
         }
 

==================================================
Request.java
index 99b9b45f7c..15d29e109d 100644
--- a/java/org/apache/catalina/authenticator/jaspic/SimpleServerAuthConfig.java
+++ b/java/org/apache/catalina/authenticator/jaspic/SimpleServerAuthConfig.java
@@ -16,7 +16,6 @@
  */
 package org.apache.catalina.authenticator.jaspic;
 
-import java.lang.reflect.InvocationTargetException;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -118,9 +117,7 @@ public class SimpleServerAuthConfig implements ServerAuthConfig {
                                     (ServerAuthModule) clazz.getConstructor().newInstance();
                             module.initialize(null, null, handler, mergedProperties);
                             modules.add(module);
-                        } catch (ClassNotFoundException | InstantiationException |
-                                IllegalAccessException | IllegalArgumentException |
-                                InvocationTargetException | NoSuchMethodException |
+                        } catch (ReflectiveOperationException | IllegalArgumentException |
                                 SecurityException e) {
                             AuthException ae = new AuthException();
                             ae.initCause(e);

==================================================
ApplicationContext.java
index 37b52291cb..eb7a143b33 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -22,7 +22,6 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.StringReader;
 import java.io.UnsupportedEncodingException;
-import java.lang.reflect.InvocationTargetException;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 import java.security.Principal;
@@ -1988,8 +1987,7 @@ public class Request implements HttpServletRequest {
                 instanceManager = getContext().getInstanceManager();
                 handler = (T) instanceManager.newInstance(httpUpgradeHandlerClass);
             }
-        } catch (InstantiationException | IllegalAccessException | InvocationTargetException |
-                NamingException | IllegalArgumentException | NoSuchMethodException |
+        } catch (ReflectiveOperationException | NamingException | IllegalArgumentException |
                 SecurityException e) {
             throw new ServletException(e);
         }

==================================================
ApplicationFilterConfig.java
index 37851043e9..24ab0c9f52 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -825,8 +825,7 @@ public class ApplicationContext implements ServletContext {
         } catch (InvocationTargetException e) {
             ExceptionUtils.handleThrowable(e.getCause());
             throw new ServletException(e);
-        } catch (IllegalAccessException | NamingException | InstantiationException |
-                ClassNotFoundException | NoSuchMethodException e) {
+        } catch (ReflectiveOperationException | NamingException e) {
             throw new ServletException(e);
         }
     }
@@ -959,8 +958,7 @@ public class ApplicationContext implements ServletContext {
         } catch (InvocationTargetException e) {
             ExceptionUtils.handleThrowable(e.getCause());
             throw new ServletException(e);
-        } catch (IllegalAccessException | NamingException | InstantiationException |
-                ClassNotFoundException | NoSuchMethodException e) {
+        } catch (ReflectiveOperationException | NamingException e) {
             throw new ServletException(e);
         }
     }
@@ -1100,8 +1098,7 @@ public class ApplicationContext implements ServletContext {
             throw new IllegalArgumentException(sm.getString(
                     "applicationContext.addListener.iae.cnfe", className),
                     e);
-        } catch (IllegalAccessException | NamingException | InstantiationException |
-                ClassNotFoundException | NoSuchMethodException e) {
+        } catch (ReflectiveOperationException| NamingException e) {
             throw new IllegalArgumentException(sm.getString(
                     "applicationContext.addListener.iae.cnfe", className),
                     e);
@@ -1173,8 +1170,7 @@ public class ApplicationContext implements ServletContext {
         } catch (InvocationTargetException e) {
             ExceptionUtils.handleThrowable(e.getCause());
             throw new ServletException(e);
-        } catch (IllegalAccessException | NamingException | InstantiationException |
-                NoSuchMethodException e) {
+        } catch (ReflectiveOperationException | NamingException e) {
             throw new ServletException(e);
         }
     }

==================================================
AsyncContextImpl.java
index b19d673e29..e8861a2ca5 100644
--- a/java/org/apache/catalina/core/ApplicationFilterConfig.java
+++ b/java/org/apache/catalina/core/ApplicationFilterConfig.java
@@ -20,7 +20,6 @@ package org.apache.catalina.core;
 
 
 import java.io.Serializable;
-import java.lang.reflect.InvocationTargetException;
 import java.util.Collections;
 import java.util.Enumeration;
 import java.util.HashMap;
@@ -89,15 +88,12 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
      *  instantiating the filter object
      * @exception ServletException if thrown by the filter's init() method
      * @throws NamingException
-     * @throws InvocationTargetException
      * @throws SecurityException
-     * @throws NoSuchMethodException
      * @throws IllegalArgumentException
      */
     ApplicationFilterConfig(Context context, FilterDef filterDef)
-            throws ClassCastException, ClassNotFoundException, IllegalAccessException,
-            InstantiationException, ServletException, InvocationTargetException, NamingException,
-            IllegalArgumentException, NoSuchMethodException, SecurityException {
+            throws ClassCastException, ReflectiveOperationException, ServletException,
+            NamingException, IllegalArgumentException, SecurityException {
 
         super();
 
@@ -244,14 +240,12 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
      *  instantiating the filter object
      * @exception ServletException if thrown by the filter's init() method
      * @throws NamingException
-     * @throws InvocationTargetException
+     * @throws ReflectiveOperationException
      * @throws SecurityException
-     * @throws NoSuchMethodException
      * @throws IllegalArgumentException
      */
-    Filter getFilter() throws ClassCastException, ClassNotFoundException, IllegalAccessException,
-            InstantiationException, ServletException, InvocationTargetException, NamingException,
-            IllegalArgumentException, NoSuchMethodException, SecurityException {
+    Filter getFilter() throws ClassCastException, ReflectiveOperationException, ServletException,
+            NamingException, IllegalArgumentException, SecurityException {
 
         // Return the existing filter instance, if any
         if (this.filter != null)

==================================================
JAASRealm.java
index 522768535c..d479648320 100644
--- a/java/org/apache/catalina/core/AsyncContextImpl.java
+++ b/java/org/apache/catalina/core/AsyncContextImpl.java
@@ -268,8 +268,7 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
         try {
              listener = (T) getInstanceManager().newInstance(clazz.getName(),
                      clazz.getClassLoader());
-        } catch (InstantiationException | IllegalAccessException | NamingException |
-                ClassNotFoundException e) {
+        } catch (ReflectiveOperationException | NamingException e) {
             ServletException se = new ServletException(e);
             throw se;
         } catch (Exception e) {

==================================================
Tomcat.java
index 2c7f309ce8..729222f09c 100644
--- a/java/org/apache/catalina/realm/JAASRealm.java
+++ b/java/org/apache/catalina/realm/JAASRealm.java
@@ -628,23 +628,11 @@ public class JAASRealm extends RealmBase {
                 this.jaasConfigurationLoaded = true;
                 return this.jaasConfiguration;
             }
-        } catch (URISyntaxException ex) {
-            throw new RuntimeException(ex);
-        } catch (NoSuchMethodException ex) {
-            throw new RuntimeException(ex);
-        } catch (SecurityException ex) {
-            throw new RuntimeException(ex);
-        } catch (InstantiationException ex) {
-            throw new RuntimeException(ex);
-        } catch (IllegalAccessException ex) {
-            throw new RuntimeException(ex);
-        } catch (IllegalArgumentException ex) {
-            throw new RuntimeException(ex);
         } catch (InvocationTargetException ex) {
             throw new RuntimeException(ex.getCause());
-        } catch (ClassNotFoundException ex) {
+        } catch (SecurityException | URISyntaxException | ReflectiveOperationException |
+                IllegalArgumentException ex) {
             throw new RuntimeException(ex);
         }
-
     }
 }

==================================================
LogFactory.java
index 3afb8a6dae..690953d7b9 100644
--- a/java/org/apache/catalina/startup/Tomcat.java
+++ b/java/org/apache/catalina/startup/Tomcat.java
@@ -18,7 +18,6 @@ package org.apache.catalina.startup;
 
 import java.io.File;
 import java.io.IOException;
-import java.lang.reflect.InvocationTargetException;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.security.Principal;
@@ -853,10 +852,7 @@ public class Tomcat {
         try {
             return (Context) Class.forName(contextClass).getConstructor()
                     .newInstance();
-        } catch (InstantiationException | IllegalAccessException
-                | IllegalArgumentException | InvocationTargetException
-                | NoSuchMethodException | SecurityException
-                | ClassNotFoundException e) {
+        } catch (ReflectiveOperationException  | IllegalArgumentException | SecurityException e) {
             throw new IllegalArgumentException(
                     "Can't instantiate context-class " + contextClass
                             + " for host " + host + " and url "

==================================================
Jre9Compat.java
index 5187c08e6b..3be213fafd 100644
--- a/java/org/apache/juli/logging/LogFactory.java
+++ b/java/org/apache/juli/logging/LogFactory.java
@@ -17,7 +17,6 @@
 package org.apache.juli.logging;
 
 import java.lang.reflect.Constructor;
-import java.lang.reflect.InvocationTargetException;
 import java.util.ServiceLoader;
 import java.util.logging.LogManager;
 
@@ -119,8 +118,7 @@ public class LogFactory {
 
         try {
             return discoveredLogConstructor.newInstance(name);
-        } catch (InstantiationException | IllegalAccessException | IllegalArgumentException |
-                InvocationTargetException e) {
+        } catch (ReflectiveOperationException | IllegalArgumentException e) {
             throw new LogConfigurationException(e);
         }
     }

==================================================
JreCompat.java
index c2e696b31b..e1607d5f4e 100644
--- a/java/org/apache/tomcat/util/compat/Jre9Compat.java
+++ b/java/org/apache/tomcat/util/compat/Jre9Compat.java
@@ -19,7 +19,11 @@ package org.apache.tomcat.util.compat;
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
+import java.net.MalformedURLException;
+import java.net.URL;
 import java.net.URLConnection;
+import java.util.Deque;
+import java.util.Optional;
 
 import javax.net.ssl.SSLEngine;
 import javax.net.ssl.SSLParameters;
@@ -97,4 +101,19 @@ class Jre9Compat extends JreCompat {
             throw new UnsupportedOperationException(e);
         }
     }
+
+
+    @Override
+    public void addClassPath(Deque<URL> classPathUrlsToProcess) {
+        ModuleLayer.boot().configuration().modules().stream().map(
+                rm -> rm.reference().location()).flatMap(Optional::stream).map(u -> {
+                    try {
+                        return u.toURL();
+                    } catch (MalformedURLException e) {
+                        // TODO Auto-generated catch block
+                        e.printStackTrace();
+                        return null;
+                    }
+                }).forEach(classPathUrlsToProcess::add);
+    }
 }

==================================================
