9bbbd66110bb6817dc2f22aff6bf3eaf6017fe8c
==================================================
Fix fair blocking queue for now, we will add back the ability to not have a timeout later
==================================================
Filip Hanik
==================================================
Mon Nov 24 22:04:23 2008 +0000
==================================================
ConnectionPool.java
Fix fair blocking queue for now, we will add back the ability to not have a timeout later


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@720306 13f79535-47bb-0310-9956-ffa450edef68



==================================================
FairBlockingQueue.java
index bcb6cc50fa..91c4d9141e 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -424,8 +424,8 @@ public class ConnectionPool {
             //we didn't get a connection, lets see if we timed out
             if (con == null) {
                 if ((System.currentTimeMillis() - now) >= maxWait) {
-                    throw new SQLException(
-                        "Pool empty. Unable to fetch a connection in " + (maxWait / 1000) +
+                    throw new SQLException("[" + Thread.currentThread().getName()+"] " +
+                        "Timeout: Pool empty. Unable to fetch a connection in " + (maxWait / 1000) +
                         " seconds, none available["+busy.size()+" in use].");
                 } else {
                     //no timeout, lets try again

==================================================
FairnessTest.java
index 4eea64be8c..c25e20716f 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java
@@ -76,7 +76,7 @@ public class FairBlockingQueue<E> implements BlockingQueue<E> {
         lock.lock();
         try {
             result = items.poll();
-            if (result==null && timeout>0) {
+            if (result==null) {
                 ExchangeCountDownLatch<E> c = new ExchangeCountDownLatch<E>(1);
                 waiters.addLast(c);
                 lock.unlock();

==================================================
