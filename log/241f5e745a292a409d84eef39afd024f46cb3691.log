241f5e745a292a409d84eef39afd024f46cb3691
==================================================
String.indexOf(String) -> String.indexOf(char) where possible
==================================================
Mark Thomas
==================================================
Tue Nov 3 09:10:59 2015 +0000
==================================================
JMXAccessorQueryTask.java
String.indexOf(String) -> String.indexOf(char) where possible
More general fix for an issue identified in https://bz.apache.org/bugzilla/show_bug.cgi?id=58541

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1712225 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DigestAuthenticator.java
index 020fdf7367..2138b09993 100644
--- a/java/org/apache/catalina/ant/jmx/JMXAccessorQueryTask.java
+++ b/java/org/apache/catalina/ant/jmx/JMXAccessorQueryTask.java
@@ -162,8 +162,8 @@ public class JMXAccessorQueryTask extends JMXAccessorTask {
                     if (!attrs[i].isReadable())
                         continue;
                     String attName = attrs[i].getName();
-                    if (attName.indexOf("=") >= 0 || attName.indexOf(":") >= 0
-                            || attName.indexOf(" ") >= 0) {
+                    if (attName.indexOf('=') >= 0 || attName.indexOf(':') >= 0
+                            || attName.indexOf(' ') >= 0) {
                         continue;
                     }
 

==================================================
JvmRouteBinderValve.java
index 5537342beb..1954ec2ef7 100644
--- a/java/org/apache/catalina/authenticator/DigestAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/DigestAuthenticator.java
@@ -519,7 +519,7 @@ public class DigestAuthenticator extends AuthenticatorBase {
             }
 
             // Validate nonce
-            int i = nonce.indexOf(":");
+            int i = nonce.indexOf(':');
             if (i < 0 || (i + 1) == nonce.length()) {
                 return false;
             }

==================================================
WebappClassLoaderBase.java
index 23e28c0e10..1104b3b9f4 100644
--- a/java/org/apache/catalina/ha/session/JvmRouteBinderValve.java
+++ b/java/org/apache/catalina/ha/session/JvmRouteBinderValve.java
@@ -284,7 +284,7 @@ public class JvmRouteBinderValve extends ValveBase implements ClusterValve {
             Request request, String sessionId, String localJvmRoute) {
         // get requested jvmRoute.
         String requestJvmRoute = null;
-        int index = sessionId.indexOf(".");
+        int index = sessionId.indexOf('.');
         if (index > 0) {
             requestJvmRoute = sessionId
                     .substring(index + 1, sessionId.length());

==================================================
StatusTransformer.java
index ed7c10642c..11ecbdcb23 100644
--- a/java/org/apache/catalina/loader/WebappClassLoaderBase.java
+++ b/java/org/apache/catalina/loader/WebappClassLoaderBase.java
@@ -1701,7 +1701,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
                         Field field = fields[i];
                         int mods = field.getModifiers();
                         if (field.getType().isPrimitive()
-                                || (field.getName().indexOf("$") != -1)) {
+                                || (field.getName().indexOf('$') != -1)) {
                             continue;
                         }
                         if (Modifier.isStatic(mods)) {
@@ -1749,7 +1749,7 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
             Field field = fields[i];
             int mods = field.getModifiers();
             if (field.getType().isPrimitive()
-                    || (field.getName().indexOf("$") != -1)) {
+                    || (field.getName().indexOf('$') != -1)) {
                 continue;
             }
             try {

==================================================
MBeanDumper.java
index 6d97d148dc..c569bf575a 100644
--- a/java/org/apache/catalina/manager/StatusTransformer.java
+++ b/java/org/apache/catalina/manager/StatusTransformer.java
@@ -614,7 +614,7 @@ public class StatusTransformer {
                 if (webModuleName.startsWith("//")) {
                     webModuleName = webModuleName.substring(2);
                 }
-                int slash = webModuleName.indexOf("/");
+                int slash = webModuleName.indexOf('/');
                 if (slash == -1) {
                     count++;
                     continue;
@@ -667,7 +667,7 @@ public class StatusTransformer {
             if (name.startsWith("//")) {
                 name = name.substring(2);
             }
-            int slash = name.indexOf("/");
+            int slash = name.indexOf('/');
             if (slash != -1) {
                 hostName = name.substring(0, slash);
                 contextName = name.substring(slash);

==================================================
MBeanFactory.java
index a0d5f316ab..ac3be45e06 100644
--- a/java/org/apache/catalina/mbeans/MBeanDumper.java
+++ b/java/org/apache/catalina/mbeans/MBeanDumper.java
@@ -72,9 +72,9 @@ public class MBeanDumper {
                     if (! attrs[i].isReadable()) continue;
                     String attName=attrs[i].getName();
                     if ("modelerType".equals(attName)) continue;
-                    if (attName.indexOf("=") >=0 ||
-                            attName.indexOf(":") >=0 ||
-                            attName.indexOf(" ") >=0 ) {
+                    if (attName.indexOf('=') >=0 ||
+                            attName.indexOf(':') >=0 ||
+                            attName.indexOf(' ') >=0 ) {
                         continue;
                     }
 

==================================================
JNDIRealm.java
index 97d34bd144..850e5e0b58 100644
--- a/java/org/apache/catalina/mbeans/MBeanFactory.java
+++ b/java/org/apache/catalina/mbeans/MBeanFactory.java
@@ -110,7 +110,7 @@ public class MBeanFactory {
         if ((j2eeType!=null) && (j2eeType.equals("WebModule"))) {
             String name = pname.getKeyProperty("name");
             name = name.substring(2);
-            int i = name.indexOf("/");
+            int i = name.indexOf('/');
             String hostName = name.substring(0,i);
             String path = name.substring(i);
             Container host = engine.findChild(hostName);
@@ -743,7 +743,7 @@ public class MBeanFactory {
         Engine engine = (Engine) service.getContainer();
         String name = oname.getKeyProperty("name");
         name = name.substring(2);
-        int i = name.indexOf("/");
+        int i = name.indexOf('/');
         String hostName = name.substring(0,i);
         String path = name.substring(i);
         ObjectName deployer = new ObjectName(domain+":type=Deployer,host="+

==================================================
CGIServlet.java
index ac82841ce1..5e30c833e3 100644
--- a/java/org/apache/catalina/realm/JNDIRealm.java
+++ b/java/org/apache/catalina/realm/JNDIRealm.java
@@ -2599,12 +2599,12 @@ public class JNDIRealm extends RealmBase {
                 // strings: (|(something)(somethingelse))
                 while ( (userPatternString.charAt(startParenLoc + 1) == '|') ||
                         (startParenLoc != 0 && userPatternString.charAt(startParenLoc - 1) == '\\') ) {
-                    startParenLoc = userPatternString.indexOf("(", startParenLoc+1);
+                    startParenLoc = userPatternString.indexOf('(', startParenLoc+1);
                 }
-                endParenLoc = userPatternString.indexOf(")", startParenLoc+1);
+                endParenLoc = userPatternString.indexOf(')', startParenLoc+1);
                 // weed out escaped end-parens
                 while (userPatternString.charAt(endParenLoc - 1) == '\\') {
-                    endParenLoc = userPatternString.indexOf(")", endParenLoc+1);
+                    endParenLoc = userPatternString.indexOf(')', endParenLoc+1);
                 }
                 String nextPathPart = userPatternString.substring
                     (startParenLoc+1, endParenLoc);

==================================================
WebdavServlet.java
index 7b5399ea8c..ac670b6da6 100644
--- a/java/org/apache/catalina/servlets/CGIServlet.java
+++ b/java/org/apache/catalina/servlets/CGIServlet.java
@@ -788,7 +788,7 @@ public final class CGIServlet extends HttpServlet {
                 } else {
                     qs = req.getQueryString();
                 }
-                if (qs != null && qs.indexOf("=") == -1) {
+                if (qs != null && qs.indexOf('=') == -1) {
                     StringTokenizer qsTokens = new StringTokenizer(qs, "+");
                     while ( qsTokens.hasMoreTokens() ) {
                         cmdLineParameters.add(URLDecoder.decode(qsTokens.nextToken(),
@@ -1683,11 +1683,11 @@ public final class CGIServlet extends HttpServlet {
                             }
                             if (line.startsWith("HTTP")) {
                                 skipBody = setStatus(response, getSCFromHttpStatusLine(line));
-                            } else if (line.indexOf(":") >= 0) {
+                            } else if (line.indexOf(':') >= 0) {
                                 String header =
-                                    line.substring(0, line.indexOf(":")).trim();
+                                    line.substring(0, line.indexOf(':')).trim();
                                 String value =
-                                    line.substring(line.indexOf(":") + 1).trim();
+                                    line.substring(line.indexOf(':') + 1).trim();
                                 if (header.equalsIgnoreCase("status")) {
                                     skipBody = setStatus(response, getSCFromCGIStatusHeader(value));
                                 } else {

==================================================
JspServlet.java
index 5941fa1f44..e74d0a4bf4 100644
--- a/java/org/apache/catalina/servlets/WebdavServlet.java
+++ b/java/org/apache/catalina/servlets/WebdavServlet.java
@@ -875,7 +875,7 @@ public class WebdavServlet
         if (lockDurationStr == null) {
             lockDuration = DEFAULT_TIMEOUT;
         } else {
-            int commaPos = lockDurationStr.indexOf(",");
+            int commaPos = lockDurationStr.indexOf(',');
             // If multiple timeouts, just use the first
             if (commaPos != -1) {
                 lockDurationStr = lockDurationStr.substring(0,commaPos);
@@ -1491,7 +1491,7 @@ public class WebdavServlet
             // if the Destination URL contains the protocol, we can safely
             // trim everything upto the first "/" character after "://"
             int firstSeparator =
-                destinationPath.indexOf("/", protocolIndex + 4);
+                destinationPath.indexOf('/', protocolIndex + 4);
             if (firstSeparator < 0) {
                 destinationPath = "/";
             } else {
@@ -1503,13 +1503,13 @@ public class WebdavServlet
                 destinationPath = destinationPath.substring(hostName.length());
             }
 
-            int portIndex = destinationPath.indexOf(":");
+            int portIndex = destinationPath.indexOf(':');
             if (portIndex >= 0) {
                 destinationPath = destinationPath.substring(portIndex);
             }
 
             if (destinationPath.startsWith(":")) {
-                int firstSeparator = destinationPath.indexOf("/");
+                int firstSeparator = destinationPath.indexOf('/');
                 if (firstSeparator < 0) {
                     destinationPath = "/";
                 } else {

==================================================
Util.java
index fbbd824c29..037d100b74 100644
--- a/java/org/apache/jasper/servlet/JspServlet.java
+++ b/java/org/apache/jasper/servlet/JspServlet.java
@@ -253,7 +253,7 @@ public class JspServlet extends HttpServlet implements PeriodicEventListener {
             return false;            // part of some other name or value
         }
         int limit = queryString.length();
-        int ampersand = queryString.indexOf("&");
+        int ampersand = queryString.indexOf('&');
         if (ampersand > 0) {
             limit = ampersand;
         }

==================================================
JdkLoggerFormatter.java
index 38b9b05651..38727744aa 100644
--- a/java/org/apache/jasper/tagplugins/jstl/Util.java
+++ b/java/org/apache/jasper/tagplugins/jstl/Util.java
@@ -99,7 +99,7 @@ public class Util {
             return false;
         }
 
-        int colonPos = url.indexOf(":");
+        int colonPos = url.indexOf(':');
         if(colonPos == -1){
             return false;
         }
@@ -154,10 +154,10 @@ public class Util {
     public static String stripSession(String url) {
         StringBuilder u = new StringBuilder(url);
         int sessionStart;
-        while ((sessionStart = u.toString().indexOf(";" + Constants.SESSION_PARAMETER_NAME + "=")) != -1) {
-            int sessionEnd = u.toString().indexOf(";", sessionStart + 1);
+        while ((sessionStart = u.toString().indexOf(';' + Constants.SESSION_PARAMETER_NAME + "=")) != -1) {
+            int sessionEnd = u.toString().indexOf(';', sessionStart + 1);
             if (sessionEnd == -1)
-                sessionEnd = u.toString().indexOf("?", sessionStart + 1);
+                sessionEnd = u.toString().indexOf('?', sessionStart + 1);
             if (sessionEnd == -1) // still
                 sessionEnd = u.length();
             u.delete(sessionStart, sessionEnd);

==================================================
IntrospectionUtils.java
index 689ef32808..0c99177736 100644
--- a/java/org/apache/juli/JdkLoggerFormatter.java
+++ b/java/org/apache/juli/JdkLoggerFormatter.java
@@ -56,7 +56,7 @@ public class JdkLoggerFormatter extends Formatter {
         String message=formatMessage(record);
 
 
-        if( name.indexOf(".") >= 0 )
+        if( name.indexOf('.') >= 0 )
             name = name.substring(name.lastIndexOf(".") + 1);
 
         // Use a string buffer for better performance

==================================================
URL.java
index 800541af66..aec8506647 100644
--- a/java/org/apache/tomcat/util/IntrospectionUtils.java
+++ b/java/org/apache/tomcat/util/IntrospectionUtils.java
@@ -228,14 +228,14 @@ public final class IntrospectionUtils {
      */
     public static String replaceProperties(String value,
             Hashtable<Object,Object> staticProp, PropertySource dynamicProp[]) {
-        if (value.indexOf("$") < 0) {
+        if (value.indexOf('$') < 0) {
             return value;
         }
         StringBuilder sb = new StringBuilder();
         int prev = 0;
         // assert value!=nil
         int pos;
-        while ((pos = value.indexOf("$", prev)) >= 0) {
+        while ((pos = value.indexOf('$', prev)) >= 0) {
             if (pos > 0) {
                 sb.append(value.substring(prev, pos));
             }

==================================================
OpenSSLContext.java
index b180c80163..addd19a1af 100644
--- a/java/org/apache/tomcat/util/net/URL.java
+++ b/java/org/apache/tomcat/util/net/URL.java
@@ -571,7 +571,7 @@ public final class URL implements Serializable {
 
         // Parse the authority section
         if (spec.indexOf("//", start) == start) {
-            int pathStart = spec.indexOf("/", start + 2);
+            int pathStart = spec.indexOf('/', start + 2);
             if ((pathStart >= 0) && (pathStart < limit)) {
                 authority = spec.substring(start + 2, pathStart);
                 start = pathStart;
@@ -614,7 +614,7 @@ public final class URL implements Serializable {
         }
 
         // Parse the path section
-        if (spec.indexOf("/", start) == start) {     // Absolute path
+        if (spec.indexOf('/', start) == start) {     // Absolute path
             path = spec.substring(start, limit);
             if (query != null)
                 file = path + "?" + query;

==================================================
PoolProperties.java
index 68410814b8..761abc04e5 100644
--- a/java/org/apache/tomcat/util/net/openssl/OpenSSLContext.java
+++ b/java/org/apache/tomcat/util/net/openssl/OpenSSLContext.java
@@ -296,7 +296,7 @@ public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
 
             // List the ciphers that the client is permitted to negotiate
             String ciphers = sslHostConfig.getCiphers();
-            if (!("ALL".equals(ciphers)) && ciphers.indexOf(":") == -1) {
+            if (!("ALL".equals(ciphers)) && ciphers.indexOf(':') == -1) {
                 StringTokenizer tok = new StringTokenizer(ciphers, ",");
                 this.ciphers = new ArrayList<>();
                 while (tok.hasMoreTokens()) {

==================================================
TestDigestAuthenticator.java
index 8ce0a9e288..8a5adb0679 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
@@ -474,8 +474,8 @@ public class PoolProperties implements PoolConfiguration, Cloneable, Serializabl
                 //always add the trap interceptor to the mix
                 definitions[0] = new InterceptorDefinition(TrapException.class);
                 for (int i=0; i<interceptorValues.length; i++) {
-                    int propIndex = interceptorValues[i].indexOf("(");
-                    int endIndex = interceptorValues[i].indexOf(")");
+                    int propIndex = interceptorValues[i].indexOf('(');
+                    int endIndex = interceptorValues[i].indexOf(')');
                     if (propIndex<0 || endIndex<0 || endIndex <= propIndex) {
                         definitions[i+1] = new InterceptorDefinition(interceptorValues[i].trim());
                     } else {
@@ -484,7 +484,7 @@ public class PoolProperties implements PoolConfiguration, Cloneable, Serializabl
                         String propsAsString = interceptorValues[i].substring(propIndex+1, endIndex);
                         String[] props = propsAsString.split(",");
                         for (int j=0; j<props.length; j++) {
-                            int pidx = props[j].indexOf("=");
+                            int pidx = props[j].indexOf('=');
                             String propName = props[j].substring(0,pidx).trim();
                             String propValue = props[j].substring(pidx+1).trim();
                             definitions[i+1].addProperty(new InterceptorProperty(propName,propValue));
@@ -957,7 +957,7 @@ public class PoolProperties implements PoolConfiguration, Cloneable, Serializabl
         @SuppressWarnings("unchecked")
         public Class<? extends JdbcInterceptor> getInterceptorClass() throws ClassNotFoundException {
             if (clazz==null) {
-                if (getClassName().indexOf(".")<0) {
+                if (getClassName().indexOf('.')<0) {
                     if (log.isDebugEnabled()) {
                         log.debug("Loading interceptor class:"+PoolConfiguration.PKG_PREFIX+getClassName());
                     }

==================================================
TestJaspicDigestAuthenticator.java
index e08a37e748..8ef8ef7460 100644
--- a/test/org/apache/catalina/authenticator/TestDigestAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestDigestAuthenticator.java
@@ -302,7 +302,7 @@ public class TestDigestAuthenticator extends TomcatBaseTest {
         String authHeader = authHeaders.iterator().next();
 
         int start = authHeader.indexOf("nonce=\"") + 7;
-        int end = authHeader.indexOf("\"", start);
+        int end = authHeader.indexOf('\'', start);
         return authHeader.substring(start, end);
     }
 
@@ -313,7 +313,7 @@ public class TestDigestAuthenticator extends TomcatBaseTest {
         String authHeader = authHeaders.iterator().next();
 
         int start = authHeader.indexOf("opaque=\"") + 8;
-        int end = authHeader.indexOf("\"", start);
+        int end = authHeader.indexOf('\'', start);
         return authHeader.substring(start, end);
     }
 

==================================================
ChannelCreator.java
index 7a672958a0..3b79dc9b5f 100644
--- a/test/org/apache/catalina/authenticator/TestJaspicDigestAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestJaspicDigestAuthenticator.java
@@ -315,7 +315,7 @@ public class TestJaspicDigestAuthenticator extends TomcatBaseTest {
         String authHeader = authHeaders.iterator().next();
 
         int start = authHeader.indexOf("nonce=\"") + 7;
-        int end = authHeader.indexOf("\"", start);
+        int end = authHeader.indexOf('\'', start);
         return authHeader.substring(start, end);
     }
 
@@ -326,7 +326,7 @@ public class TestJaspicDigestAuthenticator extends TomcatBaseTest {
         String authHeader = authHeaders.iterator().next();
 
         int start = authHeader.indexOf("opaque=\"") + 8;
-        int end = authHeader.indexOf("\"", start);
+        int end = authHeader.indexOf('\'', start);
         return authHeader.substring(start, end);
     }
 

==================================================
