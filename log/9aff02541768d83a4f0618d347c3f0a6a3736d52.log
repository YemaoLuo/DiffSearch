9aff02541768d83a4f0618d347c3f0a6a3736d52
==================================================
Add configuration option <code>ajpFlush</code>
==================================================
Rainer Jung
==================================================
Wed Jan 27 09:16:03 2016 +0000
==================================================
AbstractAjpProtocol.java
index 82ed5aa99c..68ab1567be 100644
--- a/java/org/apache/catalina/connector/mbeans-descriptors.xml
+++ b/java/org/apache/catalina/connector/mbeans-descriptors.xml
@@ -40,6 +40,10 @@
           description="The IP address on which to bind"
                  type="java.lang.String"/>
 
+    <attribute   name="ajpFlush"
+          description="Send AJP flush package for each explicit flush"
+                 type="boolean"/>
+
     <attribute   name="allowTrace"
           description="Allow disabling TRACE method"
                  type="boolean"/>

==================================================
AjpProcessor.java
index 4aee88d05b..58578deafc 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -85,6 +85,20 @@ public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
     // ------------------------------------------------- AJP specific properties
     // ------------------------------------------ managed in the ProtocolHandler
 
+    /**
+     * Ignore explicit flush?
+     * An explicit flush will send a zero byte AJP13 SEND_BODY_CHUNK
+     * package. AJP does flush at the and of the response, so if
+     * it is not important, that the packets get streamed up to
+     * the client, do not use explicit flush.
+     */
+    protected boolean useAJPFlush = true;
+    public boolean getAjpFlush() { return useAJPFlush; }
+    public void setAjpFlush(boolean useAJPFlush) {
+        this.useAJPFlush = useAJPFlush;
+    }
+
+
     /**
      * Should authentication be done in the native web server layer,
      * or in the Servlet container ?
@@ -160,6 +174,7 @@ public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
     protected Processor createProcessor() {
         AjpProcessor processor = new AjpProcessor(getPacketSize(), getEndpoint());
         processor.setAdapter(getAdapter());
+        processor.setAjpFlush(getAjpFlush());
         processor.setTomcatAuthentication(getTomcatAuthentication());
         processor.setTomcatAuthorization(getTomcatAuthorization());
         processor.setRequiredSecret(requiredSecret);

==================================================
