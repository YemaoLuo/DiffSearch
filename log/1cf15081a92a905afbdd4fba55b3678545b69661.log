1cf15081a92a905afbdd4fba55b3678545b69661
==================================================
Start harmonizing exception types (todo: same thing for completion handlers).
==================================================
Remy Maucherat
==================================================
Fri Mar 14 12:09:48 2014 +0000
==================================================
InternalNio2InputBuffer.java
Start harmonizing exception types (todo: same thing for completion handlers).

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1577501 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InternalNio2OutputBuffer.java
index 6a5ad8018e..7bb6f17f67 100644
--- a/java/org/apache/coyote/http11/InternalNio2InputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNio2InputBuffer.java
@@ -18,8 +18,8 @@ package org.apache.coyote.http11;
 
 import java.io.EOFException;
 import java.io.IOException;
+import java.net.SocketTimeoutException;
 import java.nio.ByteBuffer;
-import java.nio.channels.ClosedChannelException;
 import java.nio.channels.CompletionHandler;
 import java.nio.channels.ReadPendingException;
 import java.nio.charset.StandardCharsets;
@@ -754,7 +754,7 @@ public class InternalNio2InputBuffer extends AbstractInputBuffer<Nio2Channel> {
                 boolean notify = false;
                 synchronized (completionHandler) {
                     if (nBytes.intValue() < 0) {
-                        failed(new ClosedChannelException(), attachment);
+                        failed(new EOFException(sm.getString("iib.eof.error")), attachment);
                         return;
                     }
                     readPending = false;
@@ -819,9 +819,10 @@ public class InternalNio2InputBuffer extends AbstractInputBuffer<Nio2Channel> {
                 try {
                     nRead = socket.getSocket().read(byteBuffer)
                             .get(socket.getTimeout(), TimeUnit.MILLISECONDS).intValue();
-                } catch (InterruptedException | ExecutionException
-                        | TimeoutException e) {
-                    throw new EOFException(sm.getString("iib.eof.error"));
+                } catch (InterruptedException | ExecutionException e) {
+                    throw new IOException(e);
+                } catch (TimeoutException e) {
+                    throw new SocketTimeoutException();
                 }
                 if (nRead > 0) {
                     if (!flipped) {

==================================================
Nio2ServletInputStream.java
index c06e6fc12b..29824378ba 100644
--- a/java/org/apache/coyote/http11/InternalNio2OutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNio2OutputBuffer.java
@@ -17,6 +17,7 @@
 
 package org.apache.coyote.http11;
 
+import java.io.EOFException;
 import java.io.IOException;
 import java.net.SocketTimeoutException;
 import java.nio.ByteBuffer;
@@ -116,7 +117,7 @@ public class InternalNio2OutputBuffer extends AbstractOutputBuffer<Nio2Channel>
                 boolean notify = false;
                 synchronized (completionHandler) {
                     if (nBytes.intValue() < 0) {
-                        failed(new IOException(sm.getString("iob.failedwrite")), attachment);
+                        failed(new EOFException(sm.getString("iob.failedwrite")), attachment);
                         return;
                     }
                     if (bufferedWrites.size() > 0) {
@@ -163,7 +164,7 @@ public class InternalNio2OutputBuffer extends AbstractOutputBuffer<Nio2Channel>
                 boolean notify = false;
                 synchronized (completionHandler) {
                     if (nBytes.longValue() < 0) {
-                        failed(new IOException(sm.getString("iob.failedwrite")), attachment);
+                        failed(new EOFException(sm.getString("iob.failedwrite")), attachment);
                         return;
                     }
                     if (bufferedWrites.size() > 0 || arrayHasData(attachment)) {
@@ -381,9 +382,7 @@ public class InternalNio2OutputBuffer extends AbstractOutputBuffer<Nio2Channel>
                         flipped = true;
                     }
                     socket.getSocket().write(byteBuffer).get(socket.getTimeout(), TimeUnit.MILLISECONDS);
-                } catch (InterruptedException e) {
-                    throw new IOException(e);
-                } catch (ExecutionException e) {
+                } catch (InterruptedException | ExecutionException e) {
                     throw new IOException(e);
                 } catch (TimeoutException e) {
                     throw new SocketTimeoutException();

==================================================
Nio2ServletOutputStream.java
index 0edaeb2cec..de08b6c34e 100644
--- a/java/org/apache/coyote/http11/upgrade/Nio2ServletInputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/Nio2ServletInputStream.java
@@ -18,9 +18,9 @@ package org.apache.coyote.http11.upgrade;
 
 import java.io.EOFException;
 import java.io.IOException;
+import java.net.SocketTimeoutException;
 import java.nio.ByteBuffer;
 import java.nio.channels.AsynchronousCloseException;
-import java.nio.channels.ClosedChannelException;
 import java.nio.channels.CompletionHandler;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
@@ -50,7 +50,7 @@ public class Nio2ServletInputStream extends AbstractServletInputStream {
             public void completed(Integer nBytes, SocketWrapper<Nio2Channel> attachment) {
                 synchronized (completionHandler) {
                     if (nBytes.intValue() < 0) {
-                        failed(new ClosedChannelException(), attachment);
+                        failed(new EOFException(), attachment);
                         return;
                     }
                     readPending = false;
@@ -207,10 +207,13 @@ public class Nio2ServletInputStream extends AbstractServletInputStream {
                 nRead = channel.read(readBuffer)
                         .get(wrapper.getTimeout(), TimeUnit.MILLISECONDS).intValue();
                 readPending = false;
-            } catch (InterruptedException | ExecutionException
-                    | TimeoutException e) {
+            } catch (InterruptedException | ExecutionException e) {
                 onError(e);
                 throw new IOException(e);
+            } catch (TimeoutException e) {
+                SocketTimeoutException ex = new SocketTimeoutException();
+                onError(ex);
+                throw ex;
             }
         } else {
             readPending = true;

==================================================
