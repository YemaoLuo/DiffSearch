2d9d4519cea1879209848952832fe194aa8f0257
==================================================
Remove deprecated code.
==================================================
Mark Thomas
==================================================
Fri Nov 20 20:28:37 2015 +0000
==================================================
Service.java
Remove deprecated code.
Service.container Container->Engine

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1715414 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StandardService.java
index 3e50d2a11a..dcb87f6f9f 100644
--- a/java/org/apache/catalina/Service.java
+++ b/java/org/apache/catalina/Service.java
@@ -38,25 +38,10 @@ public interface Service extends Lifecycle {
     // ------------------------------------------------------------- Properties
 
     /**
-     * @return the <code>Container</code> that handles requests for all
+     * @return the <code>Engine</code> that handles requests for all
      * <code>Connectors</code> associated with this Service.
-     *
-     * @deprecated Return value will be narrowed to Engine in Tomcat 9.
-     */
-    @Deprecated
-    public Container getContainer();
-
-    /**
-     * Set the <code>Container</code> that handles requests for all
-     * <code>Connectors</code> associated with this Service.
-     *
-     * @param container The new Container
-     *
-     * @deprecated Use {@link #setContainer(Engine)} Will be removed in Tomcat
-     *             9.
      */
-    @Deprecated
-    public void setContainer(Container container);
+    public Engine getContainer();
 
     /**
      * Set the <code>Engine</code> that handles requests for all

==================================================
ThreadLocalLeakPreventionListener.java
index 2610e91771..9abe9edec5 100644
--- a/java/org/apache/catalina/core/StandardService.java
+++ b/java/org/apache/catalina/core/StandardService.java
@@ -89,13 +89,7 @@ public class StandardService extends LifecycleMBeanBase implements Service {
      */
     protected final ArrayList<Executor> executors = new ArrayList<>();
 
-    /**
-     * The Container associated with this Service.
-     *
-     * @deprecated Will be made private in 9.0.x
-     */
-    @Deprecated
-    protected Container container = null;
+    private Engine engine = null;
 
     private ClassLoader parentClassLoader = null;
 
@@ -119,51 +113,39 @@ public class StandardService extends LifecycleMBeanBase implements Service {
     }
 
 
-    /**
-     * Return the <code>Container</code> that handles requests for all
-     * <code>Connectors</code> associated with this Service.
-     */
     @Override
-    public Container getContainer() {
-
-        return (this.container);
-
-    }
-
-
-    @Override
-    public void setContainer(Container container) {
-        setContainer((Engine) container);
+    public Engine getContainer() {
+        return (this.engine);
     }
 
 
     @Override
     public void setContainer(Engine engine) {
-        Container oldContainer = this.container;
-        if (oldContainer instanceof Engine) {
-            ((Engine) oldContainer).setService(null);
+        Engine oldEngine = this.engine;
+        if (oldEngine != null) {
+            oldEngine.setService(null);
         }
-        this.container = engine;
-        if (this.container instanceof Engine) {
-            ((Engine) this.container).setService(this);
+        this.engine = engine;
+        if (this.engine != null) {
+            this.engine.setService(this);
         }
-        if (getState().isAvailable() && (this.container != null)) {
+        if (getState().isAvailable() && (this.engine != null)) {
             try {
-                this.container.start();
+                this.engine.start();
             } catch (LifecycleException e) {
                 // Ignore
             }
         }
-        if (getState().isAvailable() && (oldContainer != null)) {
+        if (getState().isAvailable() && (oldEngine != null)) {
             try {
-                oldContainer.stop();
+                oldEngine.stop();
             } catch (LifecycleException e) {
                 // Ignore
             }
         }
 
         // Report this property change to interested listeners
-        support.firePropertyChange("container", oldContainer, this.container);
+        support.firePropertyChange("container", oldEngine, this.engine);
 
     }
 
@@ -437,9 +419,9 @@ public class StandardService extends LifecycleMBeanBase implements Service {
         setState(LifecycleState.STARTING);
 
         // Start our defined Container first
-        if (container != null) {
-            synchronized (container) {
-                container.start();
+        if (engine != null) {
+            synchronized (engine) {
+                engine.start();
             }
         }
 
@@ -499,9 +481,9 @@ public class StandardService extends LifecycleMBeanBase implements Service {
         setState(LifecycleState.STOPPING);
 
         // Stop our defined Container second
-        if (container != null) {
-            synchronized (container) {
-                container.stop();
+        if (engine != null) {
+            synchronized (engine) {
+                engine.stop();
             }
         }
 
@@ -548,8 +530,8 @@ public class StandardService extends LifecycleMBeanBase implements Service {
 
         super.initInternal();
 
-        if (container != null) {
-            container.init();
+        if (engine != null) {
+            engine.init();
         }
 
         // Initialize any Executors
@@ -602,8 +584,8 @@ public class StandardService extends LifecycleMBeanBase implements Service {
             executor.destroy();
         }
 
-        if (container != null) {
-            container.destroy();
+        if (engine != null) {
+            engine.destroy();
         }
 
         super.destroyInternal();

==================================================
MapperListener.java
index a7811cf778..d235dcd08f 100644
--- a/java/org/apache/catalina/core/ThreadLocalLeakPreventionListener.java
+++ b/java/org/apache/catalina/core/ThreadLocalLeakPreventionListener.java
@@ -127,7 +127,7 @@ public class ThreadLocalLeakPreventionListener implements LifecycleListener,
 
     private void registerListenersForServer(Server server) {
         for (Service service : server.findServices()) {
-            Engine engine = (Engine) service.getContainer();
+            Engine engine = service.getContainer();
             engine.addContainerListener(this);
             registerListenersForEngine(engine);
         }

==================================================
MBeanFactory.java
index c7bd0a0e74..c0caeaff34 100644
--- a/java/org/apache/catalina/mapper/MapperListener.java
+++ b/java/org/apache/catalina/mapper/MapperListener.java
@@ -101,7 +101,7 @@ public class MapperListener extends LifecycleMBeanBase
         // already registered their MBeans
         findDefaultHost();
 
-        Engine engine = (Engine) service.getContainer();
+        Engine engine = service.getContainer();
         addListeners(engine);
 
         Container[] conHosts = engine.findChildren();
@@ -119,7 +119,7 @@ public class MapperListener extends LifecycleMBeanBase
     public void stopInternal() throws LifecycleException {
         setState(LifecycleState.STOPPING);
 
-        Engine engine = (Engine) service.getContainer();
+        Engine engine = service.getContainer();
         removeListeners(engine);
     }
 
@@ -257,7 +257,7 @@ public class MapperListener extends LifecycleMBeanBase
 
     private void findDefaultHost() {
 
-        Engine engine = (Engine) service.getContainer();
+        Engine engine = service.getContainer();
         String defaultHost = engine.getDefaultHost();
 
         boolean found = false;

==================================================
StandardServiceSF.java
index 850e5e0b58..cdd7074c54 100644
--- a/java/org/apache/catalina/mbeans/MBeanFactory.java
+++ b/java/org/apache/catalina/mbeans/MBeanFactory.java
@@ -469,7 +469,7 @@ public class MBeanFactory {
         } else {
             log.warn("Deployer not found for "+pname.getKeyProperty("host"));
             Service service = getService(pname);
-            Engine engine = (Engine) service.getContainer();
+            Engine engine = service.getContainer();
             Host host = (Host) engine.findChild(pname.getKeyProperty("host"));
             host.addChild(context);
         }
@@ -517,7 +517,7 @@ public class MBeanFactory {
         // Add the new instance to its parent component
         ObjectName pname = new ObjectName(parent);
         Service service = getService(pname);
-        Engine engine = (Engine) service.getContainer();
+        Engine engine = service.getContainer();
         engine.addChild(host);
 
         // Return the corresponding MBean name
@@ -740,7 +740,7 @@ public class MBeanFactory {
         String domain = oname.getDomain();
         StandardService service = (StandardService) getService(oname);
 
-        Engine engine = (Engine) service.getContainer();
+        Engine engine = service.getContainer();
         String name = oname.getKeyProperty("name");
         name = name.substring(2);
         int i = name.indexOf('/');
@@ -790,7 +790,7 @@ public class MBeanFactory {
         ObjectName oname = new ObjectName(name);
         String hostName = oname.getKeyProperty("host");
         Service service = getService(oname);
-        Engine engine = (Engine) service.getContainer();
+        Engine engine = service.getContainer();
         Host host = (Host) engine.findChild(hostName);
 
         // Remove this component from its parent component

==================================================
