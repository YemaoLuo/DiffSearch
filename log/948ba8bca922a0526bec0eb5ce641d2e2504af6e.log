948ba8bca922a0526bec0eb5ce641d2e2504af6e
==================================================
More tests for RFC7540 section 3.2.1
==================================================
Mark Thomas
==================================================
Tue Jun 2 17:06:40 2015 +0000
==================================================
Http11Processor.java
More tests for RFC7540 section 3.2.1
- Ensure HTTP2-Settings appears in the Connection header
- Support the connection header being split across multiple headers
- Refactor the tests to allow custom Connection headers to be injected

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1683141 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http2Protocol.java
index f9f17e7dd9..4391bf849b 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -19,6 +19,7 @@ package org.apache.coyote.http11;
 import java.io.IOException;
 import java.io.InterruptedIOException;
 import java.nio.ByteBuffer;
+import java.util.Enumeration;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
@@ -1028,8 +1029,14 @@ public class Http11Processor extends AbstractProcessor {
             }
 
             // Has an upgrade been requested?
-            String connection = request.getHeader(Constants.CONNECTION);
-            if (connection != null && connection.toLowerCase().contains("upgrade")) {
+            Enumeration<String> connectionValues = request.getMimeHeaders().values("Connection");
+            boolean foundUpgrade = false;
+            while (connectionValues.hasMoreElements() && !foundUpgrade) {
+                foundUpgrade = connectionValues.nextElement().toLowerCase(
+                        Locale.ENGLISH).contains("upgrade");
+            }
+
+            if (foundUpgrade) {
                 // Check the protocol
                 String requestedProtocol = request.getHeader("Upgrade");
 

==================================================
Http2TestBase.java
index 1f323c02d5..aa5cc3ab6d 100644
--- a/java/org/apache/coyote/http2/Http2Protocol.java
+++ b/java/org/apache/coyote/http2/Http2Protocol.java
@@ -81,17 +81,22 @@ public class Http2Protocol implements UpgradeProtocol {
     @Override
     public boolean accept(Request request) {
         // Should only be one HTTP2-Settings header
-        Enumeration<String> headers = request.getMimeHeaders().values("HTTP2-Settings");
+        Enumeration<String> settings = request.getMimeHeaders().values("HTTP2-Settings");
         int count = 0;
-        while (headers.hasMoreElements()) {
+        while (settings.hasMoreElements()) {
             count++;
-            headers.nextElement();
+            settings.nextElement();
         }
         if (count != 1) {
             return false;
         }
 
-        return true;
+        Enumeration<String> connection = request.getMimeHeaders().values("Connection");
+        boolean found = false;
+        while (connection.hasMoreElements() && !found) {
+            found = connection.nextElement().contains("HTTP2-Settings");
+        }
+        return found;
     }
 
 

==================================================
TestHttp2Section_3_2.java
index 179c9211a4..d33ba50e2f 100644
--- a/test/org/apache/coyote/http2/Http2TestBase.java
+++ b/test/org/apache/coyote/http2/Http2TestBase.java
@@ -49,6 +49,7 @@ import org.apache.tomcat.util.codec.binary.Base64;
  */
 public abstract class Http2TestBase extends TomcatBaseTest {
 
+    static final String DEFAULT_CONNECTION_HEADER_VALUE = "Upgrade, HTTP2-Settings";
     private static final byte[] EMPTY_SETTINGS_FRAME =
         { 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00 };
     static final String EMPTY_HTTP2_SETTINGS_HEADER;
@@ -75,6 +76,10 @@ public abstract class Http2TestBase extends TomcatBaseTest {
         openClientConnection();
         doHttpUpgrade();
         sendClientPreface();
+        validateHttp2InitialResponse();
+    }
+
+    protected void validateHttp2InitialResponse() throws Exception {
         // - 101 response acts as acknowledgement of the HTTP2-Settings header
         // Need to read 4 frames
         // - settings (server settings - must be first)
@@ -134,14 +139,14 @@ public abstract class Http2TestBase extends TomcatBaseTest {
 
 
     protected void doHttpUpgrade() throws IOException {
-        doHttpUpgrade("h2c", EMPTY_HTTP2_SETTINGS_HEADER, true);
+        doHttpUpgrade(DEFAULT_CONNECTION_HEADER_VALUE, "h2c", EMPTY_HTTP2_SETTINGS_HEADER, true);
     }
 
-    protected void doHttpUpgrade(String upgrade, String settings, boolean validate)
-            throws IOException {
+    protected void doHttpUpgrade(String connection, String upgrade, String settings,
+            boolean validate) throws IOException {
         byte[] upgradeRequest = ("GET / HTTP/1.1\r\n" +
                 "Host: localhost:" + getPort() + "\r\n" +
-                "Connection: Upgrade, HTTP2-Settings\r\n" +
+                "Connection: "+ connection + "\r\n" +
                 "Upgrade: " + upgrade + "\r\n" +
                 settings +
                 "\r\n").getBytes(StandardCharsets.ISO_8859_1);
@@ -241,7 +246,7 @@ public abstract class Http2TestBase extends TomcatBaseTest {
     }
 
 
-    private void sendClientPreface() throws IOException {
+    void sendClientPreface() throws IOException {
         os.write(Http2Parser.CLIENT_PREFACE_START);
         os.write(EMPTY_SETTINGS_FRAME);
         os.flush();

==================================================
TestHttp2Section_3_2_1.java
index 9ef115fe4b..ca0f02b8df 100644
--- a/test/org/apache/coyote/http2/TestHttp2Section_3_2.java
+++ b/test/org/apache/coyote/http2/TestHttp2Section_3_2.java
@@ -39,7 +39,7 @@ public class TestHttp2Section_3_2 extends Http2TestBase {
     public void testConnectionNoHttp2Support() throws Exception {
         configureAndStartWebApplication();
         openClientConnection();
-        doHttpUpgrade("h2c", EMPTY_HTTP2_SETTINGS_HEADER, false);
+        doHttpUpgrade(DEFAULT_CONNECTION_HEADER_VALUE, "h2c", EMPTY_HTTP2_SETTINGS_HEADER, false);
         parseHttp11Response();
     }
 
@@ -49,7 +49,7 @@ public class TestHttp2Section_3_2 extends Http2TestBase {
         enableHttp2();
         configureAndStartWebApplication();
         openClientConnection();
-        doHttpUpgrade("h2", EMPTY_HTTP2_SETTINGS_HEADER, false);
+        doHttpUpgrade(DEFAULT_CONNECTION_HEADER_VALUE, "h2", EMPTY_HTTP2_SETTINGS_HEADER, false);
         parseHttp11Response();
     }
 

==================================================
