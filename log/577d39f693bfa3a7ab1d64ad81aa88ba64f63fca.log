577d39f693bfa3a7ab1d64ad81aa88ba64f63fca
==================================================
Add a dedicated loader for generated code
==================================================
remm remm@apache.org
==================================================
Tue Jul 21 11:19:07 2020 +0200
==================================================
Catalina.java
Add a dedicated loader for generated code

This avoids dynamic classloading, and calling the classaloder for not
found xml.


==================================================
ContextConfig.java
index 2f83d7e237..003ef17877 100644
--- a/java/org/apache/catalina/startup/Catalina.java
+++ b/java/org/apache/catalina/startup/Catalina.java
@@ -579,8 +579,30 @@ public class Catalina {
         ConfigFileLoader.setSource(new CatalinaBaseConfigurationSource(Bootstrap.getCatalinaBaseFile(), getConfigFile()));
         File file = configFile();
 
+        if (useGeneratedCode && !Digester.isGeneratedCodeLoaderSet()) {
+            // Load loader
+            String loaderClassName = generatedCodePackage + ".DigesterGeneratedCodeLoader";
+            try {
+                Digester.GeneratedCodeLoader loader =
+                        (Digester.GeneratedCodeLoader) Catalina.class.getClassLoader().loadClass(loaderClassName).newInstance();
+                Digester.setGeneratedCodeLoader(loader);
+            } catch (Exception e) {
+                if (log.isDebugEnabled()) {
+                    log.info(sm.getString("catalina.noLoader", loaderClassName), e);
+                } else {
+                    log.info(sm.getString("catalina.noLoader", loaderClassName));
+                }
+                // No loader so don't use generated code
+                useGeneratedCode = false;
+            }
+        }
+
         // Init source location
         File serverXmlLocation = null;
+        String xmlClassName = null;
+        if (generateCode || useGeneratedCode) {
+            xmlClassName = start ? generatedCodePackage + ".ServerXml" : generatedCodePackage + ".ServerXmlStop";
+        }
         if (generateCode) {
             if (generatedCodeLocationParameter != null) {
                 generatedCodeLocation = new File(generatedCodeLocationParameter);
@@ -600,12 +622,7 @@ public class Catalina {
 
         ServerXml serverXml = null;
         if (useGeneratedCode) {
-            String xmlClassName = start ? generatedCodePackage + ".ServerXml" : generatedCodePackage + ".ServerXmlStop";
-            try {
-                serverXml = (ServerXml) Catalina.class.getClassLoader().loadClass(xmlClassName).newInstance();
-            } catch (Exception e) {
-                // Ignore, no generated code found
-            }
+            serverXml = (ServerXml) Digester.loadGeneratedClass(xmlClassName);
         }
 
         if (serverXml != null) {
@@ -630,6 +647,7 @@ public class Catalina {
                         writer.write(digester.getGeneratedCode().toString());
                     }
                     digester.endGeneratingCode();
+                    Digester.addGeneratedClass(xmlClassName);
                 }
             } catch (Exception e) {
                 log.warn(sm.getString("catalina.configFail", file.getAbsolutePath()), e);
@@ -789,6 +807,11 @@ public class Catalina {
             log.info(sm.getString("catalina.startup", Long.toString(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - t1))));
         }
 
+        if (generateCode) {
+            // Generate loader which will load all generated classes
+            generateLoader();
+        }
+
         // Register shutdown hook
         if (useShutdownHook) {
             if (shutdownHook == null) {
@@ -923,6 +946,30 @@ public class Catalina {
     }
 
 
+    protected void generateLoader() {
+        String loaderClassName = "DigesterGeneratedCodeLoader";
+        StringBuilder code = new StringBuilder();
+        code.append("package ").append(generatedCodePackage).append(";").append(System.lineSeparator());
+        code.append("public class ").append(loaderClassName);
+        code.append(" implements org.apache.tomcat.util.digester.Digester.GeneratedCodeLoader {").append(System.lineSeparator());
+        code.append("public Object loadGeneratedCode(String className) {").append(System.lineSeparator());
+        code.append("switch (className) {").append(System.lineSeparator());
+        for (String generatedClassName : Digester.getGeneratedClasses()) {
+            code.append("case \"").append(generatedClassName).append("\" : return new ").append(generatedClassName);
+            code.append("();").append(System.lineSeparator());
+        }
+        code.append("default: return null; }").append(System.lineSeparator());
+        code.append("}}").append(System.lineSeparator());
+        File loaderLocation = new File(generatedCodeLocation, generatedCodePackage);
+        try (FileWriter writer = new FileWriter(new File(loaderLocation, loaderClassName + ".java"))) {
+            writer.write(code.toString());
+        } catch (IOException e) {
+            // Should not happen
+            log.debug("Error writing code loader", e);
+        }
+    }
+
+
     protected void generateClassHeader(Digester digester, boolean start) {
         StringBuilder code = digester.getGeneratedCode();
         code.append("package ").append(generatedCodePackage).append(";").append(System.lineSeparator());

==================================================
Digester.java
index 2d242a0375..92ee562c7c 100644
--- a/java/org/apache/catalina/startup/LocalStrings.properties
+++ b/java/org/apache/catalina/startup/LocalStrings.properties
@@ -19,6 +19,7 @@ catalina.incorrectPermissions=Permissions incorrect, read permission is not allo
 catalina.init=Server initialization in [{0}] milliseconds
 catalina.initError=Error initializing Catalina
 catalina.noCluster=Cluster RuleSet not found due to [{0}]. Cluster configuration disabled.
+catalina.noLoader=Configuration code loader [{0}] was not found, generated code will not be used
 catalina.noNatming=Naming environment is disabled
 catalina.noServer=Cannot start server, server instance is not configured
 catalina.serverStartFail=The required Server component failed to start so Tomcat is unable to start.

==================================================
