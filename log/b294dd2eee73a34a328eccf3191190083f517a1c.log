b294dd2eee73a34a328eccf3191190083f517a1c
==================================================
Add a few additional utility methods to reduce code duplication: get the default config path of a container, unregister bean based on properties and get the Service.
==================================================
Remy Maucherat
==================================================
Thu Nov 8 10:10:00 2018 +0000
==================================================
Container.java
Add a few additional utility methods to reduce code duplication: get the default config path of a container, unregister bean based on properties and get the Service.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1846112 13f79535-47bb-0310-9956-ffa450edef68



==================================================
LifecycleMBeanBase.java
index dc7179b1b1..177b2d24d0 100644
--- a/java/org/apache/catalina/Container.java
+++ b/java/org/apache/catalina/Container.java
@@ -297,6 +297,56 @@ public interface Container extends Lifecycle {
     public void setRealm(Realm realm);
 
 
+    /**
+     * Find the configuration path where a configuration resource
+     * is located.
+     * @param container The container
+     * @param resourceName The resource file name
+     * @return the configuration path
+     */
+    public static String getConfigPath(Container container, String resourceName) {
+        StringBuffer result = new StringBuffer();
+        Container host = null;
+        Container engine = null;
+        while (container != null) {
+            if (container instanceof Host) {
+                host = container;
+            } else if (container instanceof Engine) {
+                engine = container;
+            }
+            container = container.getParent();
+        }
+        if (host != null && ((Host) host).getXmlBase() != null) {
+            result.append(((Host) host).getXmlBase()).append('/');
+        } else {
+            if (engine != null) {
+                result.append(engine.getName()).append('/');
+            }
+            if (host != null) {
+                result.append(host.getName()).append('/');
+            }
+        }
+        result.append(resourceName);
+        return result.toString();
+    }
+
+
+    /**
+     * Return the Service to which this container belongs.
+     * @param container The container to start from
+     * @return the Service, or null if not found
+     */
+    public static Service getService(Container container) {
+        while (container != null && !(container instanceof Engine)) {
+            container = container.getParent();
+        }
+        if (container == null) {
+            return null;
+        }
+        return ((Engine) container).getService();
+    }
+
+
     // --------------------------------------------------------- Public Methods
 
 

==================================================
