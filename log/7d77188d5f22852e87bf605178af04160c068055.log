7d77188d5f22852e87bf605178af04160c068055
==================================================
Java 7. Use StandardCharsets rather than existing constants or Charset.forName()
==================================================
Mark Emlyn
==================================================
Mon Jul 29 22:17:59 2013 +0000
==================================================
AbstractCatalinaTask.java
Java 7. Use StandardCharsets rather than existing constants or Charset.forName()

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1508214 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BasicAuthenticator.java
index cbefc13354..6a325ebd91 100644
--- a/java/org/apache/catalina/ant/AbstractCatalinaTask.java
+++ b/java/org/apache/catalina/ant/AbstractCatalinaTask.java
@@ -26,8 +26,8 @@ import java.io.InputStreamReader;
 import java.net.HttpURLConnection;
 import java.net.URL;
 import java.net.URLConnection;
+import java.nio.charset.StandardCharsets;
 
-import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.codec.binary.Base64;
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.Project;
@@ -202,7 +202,7 @@ public abstract class AbstractCatalinaTask extends BaseRedirectorHelperTask {
             // Set up an authorization header with our credentials
             String input = username + ":" + password;
             String output = Base64.encodeBase64String(
-                    input.getBytes(B2CConverter.ISO_8859_1));
+                    input.getBytes(StandardCharsets.ISO_8859_1));
             hconn.setRequestProperty("Authorization",
                                      "Basic " + output);
 

==================================================
DigestAuthenticator.java
index 522add3e61..80ee322a3c 100644
--- a/java/org/apache/catalina/authenticator/BasicAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/BasicAuthenticator.java
@@ -20,6 +20,7 @@ package org.apache.catalina.authenticator;
 
 
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.security.Principal;
 
 import javax.servlet.http.HttpServletRequest;
@@ -28,7 +29,6 @@ import javax.servlet.http.HttpServletResponse;
 import org.apache.catalina.connector.Request;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.codec.binary.Base64;
@@ -250,15 +250,15 @@ public class BasicAuthenticator extends AuthenticatorBase {
             }
 
             if (colon < 0) {
-                username = new String(decoded, B2CConverter.ISO_8859_1);
+                username = new String(decoded, StandardCharsets.ISO_8859_1);
                 // password will remain null!
             }
             else {
                 username = new String(
-                            decoded, 0, colon, B2CConverter.ISO_8859_1);
+                            decoded, 0, colon, StandardCharsets.ISO_8859_1);
                 password = new String(
                             decoded, colon + 1, decoded.length - colon - 1,
-                            B2CConverter.ISO_8859_1);
+                            StandardCharsets.ISO_8859_1);
                 // tolerate surplus white space around credentials
                 if (password.length() > 1) {
                     password = password.trim();

==================================================
MultiCastSender.java
index de0531c67e..54b04b9a9a 100644
--- a/java/org/apache/catalina/authenticator/DigestAuthenticator.java
+++ b/java/org/apache/catalina/authenticator/DigestAuthenticator.java
@@ -18,6 +18,7 @@ package org.apache.catalina.authenticator;
 
 import java.io.IOException;
 import java.io.StringReader;
+import java.nio.charset.StandardCharsets;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.security.Principal;
@@ -34,7 +35,6 @@ import org.apache.catalina.util.ConcurrentMessageDigest;
 import org.apache.catalina.util.MD5Encoder;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.http.parser.HttpParser;
 
 
@@ -345,7 +345,7 @@ public class DigestAuthenticator extends AuthenticatorBase {
             request.getRemoteAddr() + ":" + currentTime + ":" + getKey();
 
         byte[] buffer = ConcurrentMessageDigest.digestMD5(
-                ipTimeKey.getBytes(B2CConverter.ISO_8859_1));
+                ipTimeKey.getBytes(StandardCharsets.ISO_8859_1));
         String nonce = currentTime + ":" + MD5Encoder.encode(buffer);
 
         NonceInfo info = new NonceInfo(currentTime, getNonceCountWindowSize());
@@ -587,7 +587,7 @@ public class DigestAuthenticator extends AuthenticatorBase {
             String serverIpTimeKey =
                 request.getRemoteAddr() + ":" + nonceTime + ":" + key;
             byte[] buffer = ConcurrentMessageDigest.digestMD5(
-                    serverIpTimeKey.getBytes(B2CConverter.ISO_8859_1));
+                    serverIpTimeKey.getBytes(StandardCharsets.ISO_8859_1));
             String md5ServerIpTimeKey = MD5Encoder.encode(buffer);
             if (!md5ServerIpTimeKey.equals(md5clientIpTimeKey)) {
                 return false;
@@ -646,7 +646,7 @@ public class DigestAuthenticator extends AuthenticatorBase {
             String a2 = method + ":" + uri;
 
             byte[] buffer = ConcurrentMessageDigest.digestMD5(
-                    a2.getBytes(B2CConverter.ISO_8859_1));
+                    a2.getBytes(StandardCharsets.ISO_8859_1));
             String md5a2 = MD5Encoder.encode(buffer);
 
             return realm.authenticate(userName, response, nonce, nc, cnonce,

==================================================
WebappClassLoader.java
index 9aef24b3f4..fd5e6273fd 100644
--- a/java/org/apache/catalina/ha/backend/MultiCastSender.java
+++ b/java/org/apache/catalina/ha/backend/MultiCastSender.java
@@ -22,7 +22,7 @@ import java.net.DatagramPacket;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.MulticastSocket;
-import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -34,7 +34,6 @@ public class MultiCastSender
     implements Sender {
 
     private static final Log log = LogFactory.getLog(HeartbeatListener.class);
-    private static final Charset US_ASCII = Charset.forName("US-ASCII");
 
     HeartbeatListener config = null;
 
@@ -69,7 +68,7 @@ public class MultiCastSender
         }
 
         byte[] buf;
-        buf = mess.getBytes(US_ASCII);
+        buf = mess.getBytes(StandardCharsets.US_ASCII);
         DatagramPacket data = new DatagramPacket(buf, buf.length, group, config.getMultiport());
         try {
             s.send(data);

==================================================
JNDIRealm.java
index f99d0f4d20..e231643b4d 100644
--- a/java/org/apache/catalina/loader/WebappClassLoader.java
+++ b/java/org/apache/catalina/loader/WebappClassLoader.java
@@ -30,7 +30,7 @@ import java.lang.reflect.Modifier;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLClassLoader;
-import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.security.AccessControlException;
 import java.security.AccessController;
 import java.security.CodeSource;
@@ -119,7 +119,6 @@ public class WebappClassLoader
     private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( WebappClassLoader.class );
 
-    private static final Charset CHARSET_UTF8 = Charset.forName("UTF-8");
     /**
      * List of ThreadGroup names to ignore when scanning for web application
      * started threads that need to be shut down.
@@ -2899,7 +2898,7 @@ public class WebappClassLoader
                         // http://svn.apache.org/viewvc?view=revision&revision=303915
                         String str = new String(binaryContent,0,pos);
                         try {
-                            binaryContent = str.getBytes(CHARSET_UTF8);
+                            binaryContent = str.getBytes(StandardCharsets.UTF_8);
                         } catch (Exception e) {
                             return null;
                         }

==================================================
RealmBase.java
index 0494d481b1..0f6ff359e7 100644
--- a/java/org/apache/catalina/realm/JNDIRealm.java
+++ b/java/org/apache/catalina/realm/JNDIRealm.java
@@ -19,6 +19,7 @@ package org.apache.catalina.realm;
 
 import java.net.URI;
 import java.net.URISyntaxException;
+import java.nio.charset.StandardCharsets;
 import java.security.Principal;
 import java.text.MessageFormat;
 import java.util.ArrayList;
@@ -52,7 +53,6 @@ import javax.naming.directory.SearchControls;
 import javax.naming.directory.SearchResult;
 
 import org.apache.catalina.LifecycleException;
-import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.codec.binary.Base64;
 import org.ietf.jgss.GSSCredential;
 
@@ -1552,10 +1552,10 @@ public class JNDIRealm extends RealmBase {
                 synchronized (this) {
                     password = password.substring(5);
                     md.reset();
-                    md.update(credentials.getBytes(B2CConverter.ISO_8859_1));
+                    md.update(credentials.getBytes(StandardCharsets.ISO_8859_1));
                     byte[] encoded = Base64.encodeBase64(md.digest());
                     String digestedPassword =
-                            new String(encoded, B2CConverter.ISO_8859_1);
+                            new String(encoded, StandardCharsets.ISO_8859_1);
                     validated = password.equals(digestedPassword);
                 }
             } else if (password.startsWith("{SSHA}")) {
@@ -1565,7 +1565,7 @@ public class JNDIRealm extends RealmBase {
                     password = password.substring(6);
 
                     md.reset();
-                    md.update(credentials.getBytes(B2CConverter.ISO_8859_1));
+                    md.update(credentials.getBytes(StandardCharsets.ISO_8859_1));
 
                     // Decode stored password.
                     byte[] decoded = Base64.decodeBase64(password);

==================================================
WebdavServlet.java
index bb1b907ccf..9a6328a70f 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -22,6 +22,7 @@ import java.beans.PropertyChangeSupport;
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.security.Principal;
@@ -242,7 +243,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
 
     protected Charset getDigestCharset() throws UnsupportedEncodingException {
         if (digestEncoding == null) {
-            return B2CConverter.ISO_8859_1;
+            return StandardCharsets.ISO_8859_1;
         } else {
             return B2CConverter.getCharset(getDigestEncoding());
         }

==================================================
WebappServiceLoader.java
index 864f1eca4a..123d0f091d 100644
--- a/java/org/apache/catalina/servlets/WebdavServlet.java
+++ b/java/org/apache/catalina/servlets/WebdavServlet.java
@@ -20,6 +20,7 @@ import java.io.IOException;
 import java.io.StringReader;
 import java.io.StringWriter;
 import java.io.Writer;
+import java.nio.charset.StandardCharsets;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.util.Date;
@@ -45,7 +46,6 @@ import org.apache.catalina.util.ConcurrentDateFormat;
 import org.apache.catalina.util.DOMWriter;
 import org.apache.catalina.util.MD5Encoder;
 import org.apache.catalina.util.XMLWriter;
-import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.UDecoder;
 import org.apache.tomcat.util.http.FastHttpDateFormat;
 import org.apache.tomcat.util.http.RequestUtil;
@@ -1077,7 +1077,7 @@ public class WebdavServlet
                 + lock.expiresAt + "-" + System.currentTimeMillis() + "-"
                 + secret;
             String lockToken = MD5Encoder.encode(md5Helper.digest(
-                    lockTokenStr.getBytes(B2CConverter.ISO_8859_1)));
+                    lockTokenStr.getBytes(StandardCharsets.ISO_8859_1)));
 
             if (resource.isDirectory() && lock.depth == maxDepth) {
 

==================================================
AbstractReplicatedMap.java
index 201ae555a3..41fc614f40 100644
--- a/java/org/apache/catalina/startup/WebappServiceLoader.java
+++ b/java/org/apache/catalina/startup/WebappServiceLoader.java
@@ -22,7 +22,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.net.URL;
-import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
@@ -54,7 +54,6 @@ import javax.servlet.ServletContext;
 public class WebappServiceLoader<T> {
     private static final String LIB = "/WEB-INF/lib/";
     private static final String SERVICES = "META-INF/services/";
-    private static final Charset UTF8 = Charset.forName("UTF-8");
 
     private final ServletContext context;
 
@@ -129,7 +128,8 @@ public class WebappServiceLoader<T> {
 
     private void parseConfigFile(Set<String> servicesFound, URL url) throws IOException {
         try (InputStream is = url.openStream()) {
-            BufferedReader reader = new BufferedReader(new InputStreamReader(is, UTF8));
+            BufferedReader reader = new BufferedReader(
+                    new InputStreamReader(is, StandardCharsets.UTF_8));
             String line;
             while ((line = reader.readLine()) != null) {
                 int i = line.indexOf('#');

==================================================
Arrays.java
index 1fcd28ccc9..84c7939366 100644
--- a/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
@@ -19,7 +19,7 @@ package org.apache.catalina.tribes.tipis;
 
 import java.io.IOException;
 import java.io.Serializable;
-import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
@@ -68,11 +68,6 @@ public abstract class AbstractReplicatedMap<K,V>
      **/
     public static final float DEFAULT_LOAD_FACTOR = 0.75f;
 
-    /**
-     * Used to identify the map
-     */
-    private static final Charset CHARSET_ISO_8859_1 =
-        Charset.forName("ISO-8859-1");
 
 //------------------------------------------------------------------------------
 //              INSTANCE VARIABLES
@@ -210,7 +205,7 @@ public abstract class AbstractReplicatedMap<K,V>
 
         this.mapname = mapContextName;
         //unique context is more efficient if it is stored as bytes
-        this.mapContextName = mapContextName.getBytes(CHARSET_ISO_8859_1);
+        this.mapContextName = mapContextName.getBytes(StandardCharsets.ISO_8859_1);
         if ( log.isTraceEnabled() ) log.trace("Created Lazy Map with name:"+mapContextName+", bytes:"+Arrays.toString(this.mapContextName));
 
         //create an rpc channel and add the map as a listener
@@ -945,7 +940,7 @@ public abstract class AbstractReplicatedMap<K,V>
         try {
             System.out.println("\nDEBUG MAP:"+header);
             System.out.println("Map[" +
-                    new String(mapContextName, CHARSET_ISO_8859_1) +
+                    new String(mapContextName, StandardCharsets.ISO_8859_1) +
                     ", Map Size:" + innerMap.size());
             Member[] mbrs = getMapMembers();
             for ( int i=0; i<mbrs.length;i++ ) {

==================================================
AccessLogValve.java
index b7dd26e845..379c5460d7 100644
--- a/java/org/apache/catalina/tribes/util/Arrays.java
+++ b/java/org/apache/catalina/tribes/util/Arrays.java
@@ -16,7 +16,7 @@
  */
 package org.apache.catalina.tribes.util;
 
-import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.StringTokenizer;
@@ -32,8 +32,6 @@ import org.apache.catalina.tribes.membership.Membership;
  * @version 1.0
  */
 public class Arrays {
-    private static final Charset CHARSET_ISO_8859_1 =
-        Charset.forName("ISO-8859-1");
 
     public static boolean contains(byte[] source, int srcoffset, byte[] key, int keyoffset, int length) {
         if ( srcoffset < 0 || srcoffset >= source.length) throw new ArrayIndexOutOfBoundsException("srcoffset is out of bounds.");
@@ -215,6 +213,6 @@ public class Arrays {
 
 
     public static byte[] convert(String s) {
-        return s.getBytes(CHARSET_ISO_8859_1);
+        return s.getBytes(StandardCharsets.ISO_8859_1);
     }
 }
\ No newline at end of file

==================================================
SSLValve.java
index eae9d2be6c..b5d6454dad 100644
--- a/java/org/apache/catalina/valves/AccessLogValve.java
+++ b/java/org/apache/catalina/valves/AccessLogValve.java
@@ -27,6 +27,7 @@ import java.io.PrintWriter;
 import java.io.UnsupportedEncodingException;
 import java.net.InetAddress;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Date;
@@ -1189,7 +1190,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
             }
         }
         if (charset == null) {
-            charset = B2CConverter.ISO_8859_1;
+            charset = StandardCharsets.ISO_8859_1;
         }
 
         try {

==================================================
RewriteValve.java
index d7462b5737..2810c064f7 100644
--- a/java/org/apache/catalina/valves/SSLValve.java
+++ b/java/org/apache/catalina/valves/SSLValve.java
@@ -18,6 +18,7 @@ package org.apache.catalina.valves;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.security.NoSuchProviderException;
 import java.security.cert.CertificateFactory;
 import java.security.cert.X509Certificate;
@@ -29,7 +30,6 @@ import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.util.buf.B2CConverter;
 
 /**
  * When using mod_proxy_http, the client SSL information is not included in the
@@ -97,7 +97,7 @@ public class SSLValve extends ValveBase {
             String strcerts = strcert4.concat("\n-----END CERTIFICATE-----\n");
             // ByteArrayInputStream bais = new ByteArrayInputStream(strcerts.getBytes("UTF-8"));
             ByteArrayInputStream bais = new ByteArrayInputStream(
-                    strcerts.getBytes(B2CConverter.ISO_8859_1));
+                    strcerts.getBytes(StandardCharsets.ISO_8859_1));
             X509Certificate jsseCerts[] = null;
             String providerName = (String) request.getConnector().getProperty(
                     "clientCertProvider");

==================================================
InternalAprInputBuffer.java
index 44c9c7012d..3c564a9410 100644
--- a/java/org/apache/catalina/valves/rewrite/RewriteValve.java
+++ b/java/org/apache/catalina/valves/rewrite/RewriteValve.java
@@ -23,6 +23,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.StringReader;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Hashtable;
 import java.util.Iterator;
@@ -44,7 +45,6 @@ import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
 import org.apache.catalina.util.LifecycleSupport;
 import org.apache.catalina.valves.ValveBase;
-import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.CharChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.net.URL;
@@ -169,7 +169,8 @@ public class RewriteValve extends ValveBase {
             return;
         }
 
-        BufferedReader reader = new BufferedReader(new InputStreamReader(is, B2CConverter.UTF_8));
+        BufferedReader reader = new BufferedReader(
+                new InputStreamReader(is, StandardCharsets.UTF_8));
 
         try {
             parse(reader);

==================================================
InternalInputBuffer.java
index f5fb889498..fb6b43743d 100644
--- a/java/org/apache/coyote/http11/InternalAprInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalAprInputBuffer.java
@@ -20,7 +20,7 @@ import java.io.EOFException;
 import java.io.IOException;
 import java.net.SocketTimeoutException;
 import java.nio.ByteBuffer;
-import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
 
@@ -519,7 +519,7 @@ public class InternalAprInputBuffer extends AbstractInputBuffer<Long> {
 
         if (log.isDebugEnabled()) {
             log.debug(sm.getString("iib.invalidheader", new String(buf, start,
-                    lastRealByte - start + 1, Charset.forName("ISO-8859-1"))));
+                    lastRealByte - start + 1, StandardCharsets.ISO_8859_1)));
         }
     }
 

==================================================
InternalNioInputBuffer.java
index 0c79d237cc..1684686e73 100644
--- a/java/org/apache/coyote/http11/InternalInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalInputBuffer.java
@@ -20,7 +20,7 @@ import java.io.EOFException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.Socket;
-import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.Request;
@@ -499,7 +499,7 @@ public class InternalInputBuffer extends AbstractInputBuffer<Socket> {
 
         if (log.isDebugEnabled()) {
             log.debug(sm.getString("iib.invalidheader", new String(buf, start,
-                    lastRealByte - start + 1, Charset.forName("ISO-8859-1"))));
+                    lastRealByte - start + 1, StandardCharsets.ISO_8859_1)));
         }
     }
 

==================================================
BufferedInputFilter.java
index 9c7c55f7ef..0ba4d38581 100644
--- a/java/org/apache/coyote/http11/InternalNioInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioInputBuffer.java
@@ -19,7 +19,7 @@ package org.apache.coyote.http11;
 import java.io.EOFException;
 import java.io.IOException;
 import java.nio.channels.Selector;
-import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.Request;
@@ -43,9 +43,6 @@ public class InternalNioInputBuffer extends AbstractInputBuffer<NioChannel> {
     private static final org.apache.juli.logging.Log log =
         org.apache.juli.logging.LogFactory.getLog(InternalNioInputBuffer.class);
 
-    private static final Charset DEFAULT_CHARSET =
-        Charset.forName("ISO-8859-1");
-
     // -------------------------------------------------------------- Constants
 
     enum HeaderParseStatus {
@@ -269,7 +266,8 @@ public class InternalNioInputBuffer extends AbstractInputBuffer<NioChannel> {
             parsingRequestLinePhase = 2;
             if (log.isDebugEnabled()) {
                 log.debug("Received ["
-                        + new String(buf, pos, lastValid - pos, DEFAULT_CHARSET)
+                        + new String(buf, pos, lastValid - pos,
+                                StandardCharsets.ISO_8859_1)
                         + "]");
             }
         }
@@ -733,7 +731,7 @@ public class InternalNioInputBuffer extends AbstractInputBuffer<NioChannel> {
             log.debug(sm.getString("iib.invalidheader", new String(buf,
                     headerData.start,
                     headerData.lastSignificantChar - headerData.start + 1,
-                    DEFAULT_CHARSET)));
+                    StandardCharsets.ISO_8859_1)));
         }
 
         headerParsePos = HeaderParsePosition.HEADER_START;

==================================================
ChunkedInputFilter.java
index 2418cadc63..ea2375e641 100644
--- a/java/org/apache/coyote/http11/filters/BufferedInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/BufferedInputFilter.java
@@ -18,11 +18,11 @@
 package org.apache.coyote.http11.filters;
 
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.Request;
 import org.apache.coyote.http11.InputFilter;
-import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 
 /**
@@ -48,8 +48,8 @@ public class BufferedInputFilter implements InputFilter {
     // ----------------------------------------------------- Static Initializer
 
     static {
-        ENCODING.setBytes(ENCODING_NAME.getBytes(B2CConverter.ISO_8859_1), 0,
-                ENCODING_NAME.length());
+        ENCODING.setBytes(ENCODING_NAME.getBytes(StandardCharsets.ISO_8859_1),
+                0, ENCODING_NAME.length());
     }
 
 

==================================================
IdentityInputFilter.java
index a953bd5f9a..3309457cfc 100644
--- a/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java
@@ -19,12 +19,12 @@ package org.apache.coyote.http11.filters;
 
 import java.io.EOFException;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.Request;
 import org.apache.coyote.http11.Constants;
 import org.apache.coyote.http11.InputFilter;
-import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.HexUtils;
 import org.apache.tomcat.util.buf.MessageBytes;
@@ -51,8 +51,8 @@ public class ChunkedInputFilter implements InputFilter {
 
 
     static {
-        ENCODING.setBytes(ENCODING_NAME.getBytes(B2CConverter.ISO_8859_1), 0,
-                ENCODING_NAME.length());
+        ENCODING.setBytes(ENCODING_NAME.getBytes(StandardCharsets.ISO_8859_1),
+                0, ENCODING_NAME.length());
     }
 
 

==================================================
VoidInputFilter.java
index 80e9fd0d61..35846177b8 100644
--- a/java/org/apache/coyote/http11/filters/IdentityInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/IdentityInputFilter.java
@@ -18,11 +18,11 @@
 package org.apache.coyote.http11.filters;
 
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.Request;
 import org.apache.coyote.http11.InputFilter;
-import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 
 /**
@@ -44,8 +44,8 @@ public class IdentityInputFilter implements InputFilter {
 
 
     static {
-        ENCODING.setBytes(ENCODING_NAME.getBytes(B2CConverter.ISO_8859_1), 0,
-                ENCODING_NAME.length());
+        ENCODING.setBytes(ENCODING_NAME.getBytes(StandardCharsets.ISO_8859_1),
+                0, ENCODING_NAME.length());
     }
 
 

==================================================
Constants.java
index 2a0a08753f..a2be102ab4 100644
--- a/java/org/apache/coyote/http11/filters/VoidInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/VoidInputFilter.java
@@ -17,11 +17,11 @@
 package org.apache.coyote.http11.filters;
 
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.Request;
 import org.apache.coyote.http11.InputFilter;
-import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 
 /**
@@ -42,8 +42,8 @@ public class VoidInputFilter implements InputFilter {
     // ----------------------------------------------------- Static Initializer
 
     static {
-        ENCODING.setBytes(ENCODING_NAME.getBytes(B2CConverter.ISO_8859_1), 0,
-                ENCODING_NAME.length());
+        ENCODING.setBytes(ENCODING_NAME.getBytes(StandardCharsets.ISO_8859_1),
+                0, ENCODING_NAME.length());
     }
 
 

==================================================
PageDataImpl.java
index 37c2eeabc5..4f5a26ba9a 100644
--- a/java/org/apache/jasper/Constants.java
+++ b/java/org/apache/jasper/Constants.java
@@ -17,7 +17,6 @@
 
 package org.apache.jasper;
 
-import java.nio.charset.Charset;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
@@ -209,9 +208,4 @@ public class Constants {
      * the tomcat product installation path
      */
     public static final String CATALINA_HOME_PROP = "catalina.home";
-
-    /**
-     * Retain reference to default character set so we don't have to look it up.
-     */
-    public static final Charset ISO_8859_1 = Charset.forName("ISO-8859-1");
 }

==================================================
SmapUtil.java
index 549fbb8f1f..394f60283f 100644
--- a/java/org/apache/jasper/compiler/PageDataImpl.java
+++ b/java/org/apache/jasper/compiler/PageDataImpl.java
@@ -19,7 +19,7 @@ package org.apache.jasper.compiler;
 import java.io.ByteArrayInputStream;
 import java.io.CharArrayWriter;
 import java.io.InputStream;
-import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.ListIterator;
 
 import javax.servlet.jsp.tagext.PageData;
@@ -53,7 +53,6 @@ class PageDataImpl extends PageData implements TagConstants {
     private static final String JSP_VERSION = "2.0";
     private static final String CDATA_START_SECTION = "<![CDATA[\n";
     private static final String CDATA_END_SECTION = "]]>\n";
-    private static final Charset CHARSET_UTF8 = Charset.forName("UTF-8");
 
     // string buffer used to build XML view
     private final StringBuilder buf;
@@ -86,7 +85,8 @@ class PageDataImpl extends PageData implements TagConstants {
      */
     @Override
     public InputStream getInputStream() {
-        return new ByteArrayInputStream(buf.toString().getBytes(CHARSET_UTF8));
+        return new ByteArrayInputStream(
+                buf.toString().getBytes(StandardCharsets.UTF_8));
     }
 
     /*

==================================================
SpdyFrame.java
index 536b01605b..9e8a3987a4 100644
--- a/java/org/apache/jasper/compiler/SmapUtil.java
+++ b/java/org/apache/jasper/compiler/SmapUtil.java
@@ -25,11 +25,11 @@ import java.io.IOException;
 import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
 import java.io.UnsupportedEncodingException;
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
 
-import org.apache.jasper.Constants;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.JspCompilationContext;
 
@@ -161,7 +161,7 @@ public class SmapUtil {
         for (int i = 0; i < smap.length; i += 2) {
             File outServlet = new File(smap[i]);
             SDEInstaller.install(outServlet,
-                    smap[i+1].getBytes(Constants.ISO_8859_1));
+                    smap[i+1].getBytes(StandardCharsets.ISO_8859_1));
         }
     }
 

==================================================
SpdyStream.java
index 9a74d69068..35378c28c7 100644
--- a/java/org/apache/tomcat/spdy/SpdyFrame.java
+++ b/java/org/apache/tomcat/spdy/SpdyFrame.java
@@ -16,6 +16,7 @@
  */
 package org.apache.tomcat.spdy;
 
+import java.nio.charset.StandardCharsets;
 import java.util.Map;
 
 public class SpdyFrame {
@@ -263,10 +264,10 @@ public class SpdyFrame {
     public void getHeaders(Map<String, String> resHeaders) {
         for (int i = 0; i < nvCount; i++) {
             int len = read16();
-            String n = new String(data, off, len, SpdyStream.UTF8);
+            String n = new String(data, off, len, StandardCharsets.UTF_8);
             advance(len);
             len = read16();
-            String v = new String(data, off, len, SpdyStream.UTF8);
+            String v = new String(data, off, len, StandardCharsets.UTF_8);
             advance(len);
             resHeaders.put(n, v);
         }

==================================================
B2CConverter.java
index d1cef45d51..60d643fe0d 100644
--- a/java/org/apache/tomcat/spdy/SpdyStream.java
+++ b/java/org/apache/tomcat/spdy/SpdyStream.java
@@ -19,7 +19,7 @@ package org.apache.tomcat.spdy;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.PrintWriter;
-import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.Map;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.LinkedBlockingQueue;
@@ -39,8 +39,6 @@ import java.util.concurrent.TimeUnit;
  * call is done the frame will be reused.
  */
 public class SpdyStream implements Runnable {
-    public static final Charset UTF8 = Charset.forName("UTF-8");
-
     private final SpdyConnection spdy;
 
     public SpdyFrame reqFrame;
@@ -177,10 +175,10 @@ public class SpdyStream implements Runnable {
         int nvCount = f.nvCount;
         for (int i = 0; i < nvCount; i++) {
             int len = f.read16();
-            String n = new String(f.data, f.off, len, UTF8);
+            String n = new String(f.data, f.off, len, StandardCharsets.UTF_8);
             f.advance(len);
             len = f.read16();
-            String v = new String(f.data, f.off, len, UTF8);
+            String v = new String(f.data, f.off, len, StandardCharsets.UTF_8);
             f.advance(len);
             resHeaders.put(n, v);
         }

==================================================
ByteChunk.java
index c0d09df929..11a0569cc0 100644
--- a/java/org/apache/tomcat/util/buf/B2CConverter.java
+++ b/java/org/apache/tomcat/util/buf/B2CConverter.java
@@ -24,6 +24,7 @@ import java.nio.charset.Charset;
 import java.nio.charset.CharsetDecoder;
 import java.nio.charset.CoderResult;
 import java.nio.charset.CodingErrorAction;
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
@@ -41,9 +42,6 @@ public class B2CConverter {
     private static final Map<String, Charset> encodingToCharsetCache =
             new HashMap<>();
 
-    public static final Charset ISO_8859_1;
-    public static final Charset UTF_8;
-
     // Protected so unit tests can use it
     protected static final int LEFTOVER_SIZE = 9;
 
@@ -56,17 +54,6 @@ public class B2CConverter {
                         alias.toLowerCase(Locale.ENGLISH), charset);
             }
         }
-        Charset iso88591 = null;
-        Charset utf8 = null;
-        try {
-            iso88591 = getCharset("ISO-8859-1");
-            utf8 = getCharset("UTF-8");
-        } catch (UnsupportedEncodingException e) {
-            // Impossible. All JVMs must support these.
-            e.printStackTrace();
-        }
-        ISO_8859_1 = iso88591;
-        UTF_8 = utf8;
     }
 
     public static Charset getCharset(String enc)
@@ -121,7 +108,7 @@ public class B2CConverter {
         // Special case. Use the Apache Harmony based UTF-8 decoder because it
         // - a) rejects invalid sequences that the JVM decoder does not
         // - b) fails faster for some invalid sequences
-        if (charset.equals(UTF_8)) {
+        if (charset.equals(StandardCharsets.UTF_8)) {
             decoder = new Utf8Decoder();
         } else {
             decoder = charset.newDecoder();

==================================================
MessageBytes.java
index e0fe2205ac..f854704e69 100644
--- a/java/org/apache/tomcat/util/buf/ByteChunk.java
+++ b/java/org/apache/tomcat/util/buf/ByteChunk.java
@@ -21,6 +21,7 @@ import java.io.Serializable;
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 
 /*
  * In a server it is very important to be able to operate on
@@ -99,7 +100,7 @@ public final class ByteChunk implements Cloneable, Serializable {
         as most standards seem to converge, but the servlet API requires
         8859_1, and this object is used mostly for servlets.
     */
-    public static final Charset DEFAULT_CHARSET = B2CConverter.ISO_8859_1;
+    public static final Charset DEFAULT_CHARSET = StandardCharsets.ISO_8859_1;
 
     private int hashCode=0;
     // did we compute the hashcode ?

==================================================
UDecoder.java
index e602c3f6e0..0951fed0e0 100644
--- a/java/org/apache/tomcat/util/buf/MessageBytes.java
+++ b/java/org/apache/tomcat/util/buf/MessageBytes.java
@@ -18,6 +18,7 @@ package org.apache.tomcat.util.buf;
 
 import java.io.IOException;
 import java.io.Serializable;
+import java.nio.charset.StandardCharsets;
 import java.util.Locale;
 
 /**
@@ -209,7 +210,7 @@ public final class MessageBytes implements Cloneable, Serializable {
         }
         toString();
         type=T_BYTES;
-        byte bb[] = strValue.getBytes(B2CConverter.ISO_8859_1);
+        byte bb[] = strValue.getBytes(StandardCharsets.ISO_8859_1);
         byteC.setBytes(bb, 0, bb.length);
     }
 

==================================================
Utf8Decoder.java
index fa0d92da35..a6b23e46fc 100644
--- a/java/org/apache/tomcat/util/buf/UDecoder.java
+++ b/java/org/apache/tomcat/util/buf/UDecoder.java
@@ -19,6 +19,7 @@ package org.apache.tomcat.util.buf;
 import java.io.CharConversionException;
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
+import java.nio.charset.StandardCharsets;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -327,7 +328,7 @@ public final class UDecoder {
         byte[] bytes = null;
         try {
             if (enc == null) {
-                bytes = str.getBytes(B2CConverter.ISO_8859_1);
+                bytes = str.getBytes(StandardCharsets.ISO_8859_1);
             } else {
                 bytes = str.getBytes(B2CConverter.getCharset(enc));
             }

==================================================
StringUtils.java
index 3d9a33577c..466a5bfc6b 100644
--- a/java/org/apache/tomcat/util/buf/Utf8Decoder.java
+++ b/java/org/apache/tomcat/util/buf/Utf8Decoder.java
@@ -20,6 +20,7 @@ import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 import java.nio.charset.CharsetDecoder;
 import java.nio.charset.CoderResult;
+import java.nio.charset.StandardCharsets;
 
 /**
  * Decodes bytes to UTF-8. Extracted from Apache Harmony and modified to reject
@@ -67,7 +68,7 @@ public class Utf8Decoder extends CharsetDecoder {
 
 
     public Utf8Decoder() {
-        super(B2CConverter.UTF_8, 1.0f, 1.0f);
+        super(StandardCharsets.UTF_8, 1.0f, 1.0f);
     }
 
 

==================================================
Parameters.java
index 2ad44b2330..d52b9a6f6f 100644
--- a/java/org/apache/tomcat/util/codec/binary/StringUtils.java
+++ b/java/org/apache/tomcat/util/codec/binary/StringUtils.java
@@ -17,8 +17,7 @@
 package org.apache.tomcat.util.codec.binary;
 
 import java.nio.charset.Charset;
-
-import org.apache.tomcat.util.buf.B2CConverter;
+import java.nio.charset.StandardCharsets;
 
 /**
  * Converts String to and from bytes using the encodings required by the Java specification. These encodings are
@@ -59,7 +58,7 @@ public class StringUtils {
      * @see <a href="http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html">Standard charsets</a>
      */
     public static byte[] getBytesUtf8(final String string) {
-        return getBytes(string, B2CConverter.UTF_8);
+        return getBytes(string, StandardCharsets.UTF_8);
     }
 
     /**
@@ -85,7 +84,7 @@ public class StringUtils {
      *         or {@code null} if the input byte array was {@code null}.
      */
     public static String newStringUtf8(final byte[] bytes) {
-        return newString(bytes, B2CConverter.UTF_8);
+        return newString(bytes, StandardCharsets.UTF_8);
     }
 
 }

==================================================
FileUploadBase.java
index 7c9f7a12c1..8720a543f7 100644
--- a/java/org/apache/tomcat/util/http/Parameters.java
+++ b/java/org/apache/tomcat/util/http/Parameters.java
@@ -19,6 +19,7 @@ package org.apache.tomcat.util.http;
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Enumeration;
@@ -213,7 +214,7 @@ public final class Parameters {
     private final ByteChunk origValue=new ByteChunk();
     public static final String DEFAULT_ENCODING = "ISO-8859-1";
     private static final Charset DEFAULT_CHARSET =
-        Charset.forName(DEFAULT_ENCODING);
+            StandardCharsets.ISO_8859_1;
 
 
     public void processParameters( byte bytes[], int start, int len ) {

==================================================
WsRemoteEndpointImplBase.java
index 3db28d2cf7..22e3306338 100644
--- a/java/org/apache/tomcat/util/http/fileupload/FileUploadBase.java
+++ b/java/org/apache/tomcat/util/http/fileupload/FileUploadBase.java
@@ -18,7 +18,7 @@ package org.apache.tomcat.util.http.fileupload;
 
 import java.io.IOException;
 import java.io.InputStream;
-import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -53,9 +53,6 @@ public abstract class FileUploadBase {
 
     // ---------------------------------------------------------- Class methods
 
-    private static final Charset CHARSET_ISO_8859_1 =
-        Charset.forName("ISO-8859-1");
-
     /**
      * <p>Utility method that determines whether the request contains multipart
      * content.</p>
@@ -379,7 +376,7 @@ public abstract class FileUploadBase {
             return null;
         }
         byte[] boundary;
-        boundary = boundaryStr.getBytes(CHARSET_ISO_8859_1);
+        boundary = boundaryStr.getBytes(StandardCharsets.ISO_8859_1);
         return boundary;
     }
 

==================================================
WsSession.java
index aac37bd29a..cf44688041 100644
--- a/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java
+++ b/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java
@@ -21,9 +21,9 @@ import java.io.OutputStream;
 import java.io.Writer;
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
-import java.nio.charset.Charset;
 import java.nio.charset.CharsetEncoder;
 import java.nio.charset.CoderResult;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.List;
@@ -75,7 +75,7 @@ public abstract class WsRemoteEndpointImplBase implements RemoteEndpoint {
     // Max size of WebSocket header is 14 bytes
     private final ByteBuffer headerBuffer = ByteBuffer.allocate(14);
     private final ByteBuffer outputBuffer = ByteBuffer.allocate(8192);
-    private final CharsetEncoder encoder = Charset.forName("UTF8").newEncoder();
+    private final CharsetEncoder encoder = StandardCharsets.UTF_8.newEncoder();
     private final ByteBuffer encoderBuffer = ByteBuffer.allocate(8192);
     private final AtomicBoolean batchingAllowed = new AtomicBoolean(false);
     private volatile long sendTimeout = -1;

==================================================
WsWebSocketContainer.java
index f8e1f64f67..94ca1cc042 100644
--- a/java/org/apache/tomcat/websocket/WsSession.java
+++ b/java/org/apache/tomcat/websocket/WsSession.java
@@ -19,7 +19,7 @@ package org.apache.tomcat.websocket;
 import java.io.IOException;
 import java.net.URI;
 import java.nio.ByteBuffer;
-import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.security.Principal;
 import java.util.Collections;
 import java.util.HashSet;
@@ -47,10 +47,10 @@ import org.apache.tomcat.util.res.StringManager;
 
 public class WsSession implements Session {
 
-    private static final Charset UTF8 = Charset.forName("UTF8");
     // An ellipsis is a single character that looks like three periods in a row
     // and is used to indicate a continuation.
-    private static final byte[] ELLIPSIS_BYTES = "\u2026".getBytes(UTF8);
+    private static final byte[] ELLIPSIS_BYTES =
+            "\u2026".getBytes(StandardCharsets.UTF_8);
     // An ellipsis is three bytes in UTF-8
     private static final int ELLIPSIS_BYTES_LEN = ELLIPSIS_BYTES.length;
 
@@ -486,7 +486,7 @@ public class WsSession implements Session {
         // left for the reason phrase. If it is truncated then care needs to be
         // taken to ensure the bytes are not truncated in the middle of a
         // multi-byte UTF-8 character.
-        byte[] reasonBytes = reason.getBytes(UTF8);
+        byte[] reasonBytes = reason.getBytes(StandardCharsets.UTF_8);
 
         if (reasonBytes.length  <= 123) {
             // No need to truncate
@@ -495,12 +495,14 @@ public class WsSession implements Session {
             // Need to truncate
             int remaining = 123 - ELLIPSIS_BYTES_LEN;
             int pos = 0;
-            byte[] bytesNext = reason.substring(pos, pos + 1).getBytes(UTF8);
+            byte[] bytesNext = reason.substring(pos, pos + 1).getBytes(
+                    StandardCharsets.UTF_8);
             while (remaining >= bytesNext.length) {
                 msg.put(bytesNext);
                 remaining -= bytesNext.length;
                 pos++;
-                bytesNext = reason.substring(pos, pos + 1).getBytes(UTF8);
+                bytesNext = reason.substring(pos, pos + 1).getBytes(
+                        StandardCharsets.UTF_8);
             }
             msg.put(ELLIPSIS_BYTES);
         }

==================================================
WsFilter.java
index 822099f2a8..92fa7816a7 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -27,7 +27,7 @@ import java.net.URI;
 import java.nio.ByteBuffer;
 import java.nio.channels.AsynchronousChannelGroup;
 import java.nio.channels.AsynchronousSocketChannel;
-import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.security.KeyStore;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -88,7 +88,6 @@ public class WsWebSocketContainer
     private static final StringManager sm =
             StringManager.getManager(Constants.PACKAGE_NAME);
     private static final Random random = new Random();
-    private static final Charset iso88591 = Charset.forName("ISO-8859-1");
     private static final byte[] crlf = new byte[] {13, 10};
     private static final AsynchronousChannelGroup asynchronousChannelGroup;
 
@@ -481,14 +480,14 @@ public class WsWebSocketContainer
         ByteBuffer result = ByteBuffer.allocate(4 * 1024);
 
         // Request line
-        result.put("GET ".getBytes(iso88591));
-        result.put(uri.getRawPath().getBytes(iso88591));
+        result.put("GET ".getBytes(StandardCharsets.ISO_8859_1));
+        result.put(uri.getRawPath().getBytes(StandardCharsets.ISO_8859_1));
         String query = uri.getRawQuery();
         if (query != null) {
             result.put((byte) '?');
-            result.put(query.getBytes(iso88591));
+            result.put(query.getBytes(StandardCharsets.ISO_8859_1));
         }
-        result.put(" HTTP/1.1\r\n".getBytes(iso88591));
+        result.put(" HTTP/1.1\r\n".getBytes(StandardCharsets.ISO_8859_1));
 
         // Headers
         Iterator<Entry<String,List<String>>> iter =
@@ -520,9 +519,9 @@ public class WsWebSocketContainer
             sb.append(iter.next());
         }
 
-        result.put(key.getBytes(iso88591));
-        result.put(": ".getBytes(iso88591));
-        result.put(sb.toString().getBytes(iso88591));
+        result.put(key.getBytes(StandardCharsets.ISO_8859_1));
+        result.put(": ".getBytes(StandardCharsets.ISO_8859_1));
+        result.put(sb.toString().getBytes(StandardCharsets.ISO_8859_1));
         result.put(crlf);
     }
 

==================================================
TestBasicAuthParser.java
index 6fa169f1cc..7956f5e521 100644
--- a/java/org/apache/tomcat/websocket/server/WsFilter.java
+++ b/java/org/apache/tomcat/websocket/server/WsFilter.java
@@ -17,7 +17,7 @@
 package org.apache.tomcat.websocket.server;
 
 import java.io.IOException;
-import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.util.ArrayList;
@@ -52,12 +52,9 @@ import org.apache.tomcat.websocket.pojo.PojoEndpointServer;
  */
 public class WsFilter implements Filter {
 
-    private static final Charset ISO_8859_1;
-    static {
-        ISO_8859_1 = Charset.forName("ISO-8859-1");
-    }
     private static final byte[] WS_ACCEPT =
-            "258EAFA5-E914-47DA-95CA-C5AB0DC85B11".getBytes(ISO_8859_1);
+            "258EAFA5-E914-47DA-95CA-C5AB0DC85B11".getBytes(
+                    StandardCharsets.ISO_8859_1);
     private final Queue<MessageDigest> sha1Helpers =
             new ConcurrentLinkedQueue<>();
     private final WsServerContainer sc;
@@ -268,7 +265,7 @@ public class WsFilter implements Filter {
             }
         }
         sha1Helper.reset();
-        sha1Helper.update(key.getBytes(ISO_8859_1));
+        sha1Helper.update(key.getBytes(StandardCharsets.ISO_8859_1));
         String result = Base64.encodeBase64String(sha1Helper.digest(WS_ACCEPT));
         sha1Helpers.add(sha1Helper);
         return result;

==================================================
TestNonLoginAndBasicAuthenticator.java
index 0991dd91f3..2cc7634d40 100644
--- a/test/org/apache/catalina/authenticator/TestBasicAuthParser.java
+++ b/test/org/apache/catalina/authenticator/TestBasicAuthParser.java
@@ -17,11 +17,11 @@
 package org.apache.catalina.authenticator;
 
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 
 import org.junit.Assert;
 import org.junit.Test;
 
-import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.codec.binary.Base64;
 
@@ -467,7 +467,7 @@ public class TestBasicAuthParser {
 
         private  final String HTTP_AUTH = "authorization: ";
         private  final byte[] HEADER =
-                HTTP_AUTH.getBytes(B2CConverter.ISO_8859_1);
+                HTTP_AUTH.getBytes(StandardCharsets.ISO_8859_1);
         private ByteChunk authHeader;
         private int initialOffset = 0;
 
@@ -491,15 +491,15 @@ public class TestBasicAuthParser {
                     ? username
                     : username + ":" + password;
             byte[] credentialsBytes =
-                    userCredentials.getBytes(B2CConverter.ISO_8859_1);
+                    userCredentials.getBytes(StandardCharsets.ISO_8859_1);
             String base64auth = Base64.encodeBase64String(credentialsBytes);
             byte[] base64Bytes =
-                    base64auth.getBytes(B2CConverter.ISO_8859_1);
+                    base64auth.getBytes(StandardCharsets.ISO_8859_1);
 
             byte[] extraBytes =
                     ((extraBlob == null) || (extraBlob.length() < 1))
                     ? null :
-                    extraBlob.getBytes(B2CConverter.ISO_8859_1);
+                    extraBlob.getBytes(StandardCharsets.ISO_8859_1);
 
             try {
                 authHeader.append(base64Bytes, 0, base64Bytes.length);
@@ -522,7 +522,7 @@ public class TestBasicAuthParser {
         private BasicAuthHeader(String method, String fakeBase64) {
             prefix(method);
 
-            byte[] fakeBytes = fakeBase64.getBytes(B2CConverter.ISO_8859_1);
+            byte[] fakeBytes = fakeBase64.getBytes(StandardCharsets.ISO_8859_1);
 
             try {
                 authHeader.append(fakeBytes, 0, fakeBytes.length);
@@ -544,7 +544,7 @@ public class TestBasicAuthParser {
             initialOffset = HEADER.length;
 
             String methodX = method + " ";
-            byte[] methodBytes = methodX.getBytes(B2CConverter.ISO_8859_1);
+            byte[] methodBytes = methodX.getBytes(StandardCharsets.ISO_8859_1);
 
             try {
                 authHeader.append(methodBytes, 0, methodBytes.length);

==================================================
TestSSOnonLoginAndBasicAuthenticator.java
index 0747d26071..3dc4014345 100644
--- a/test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestNonLoginAndBasicAuthenticator.java
@@ -16,6 +16,7 @@
  */
 package org.apache.catalina.authenticator;
 
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -33,7 +34,6 @@ import org.apache.catalina.session.ManagerBase;
 import org.apache.catalina.startup.TesterServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
-import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.codec.binary.Base64;
 import org.apache.tomcat.util.descriptor.web.LoginConfig;
@@ -559,7 +559,7 @@ public class TestNonLoginAndBasicAuthenticator extends TomcatBaseTest {
             password = aPassword;
             String userCredentials = username + ":" + password;
             byte[] credentialsBytes =
-                    userCredentials.getBytes(B2CConverter.ISO_8859_1);
+                    userCredentials.getBytes(StandardCharsets.ISO_8859_1);
             String base64auth = Base64.encodeBase64String(credentialsBytes);
             credentials= method + " " + base64auth;
         }

==================================================
TestCoyoteAdapter.java
index ec550595a7..8910d6af4d 100644
--- a/test/org/apache/catalina/authenticator/TestSSOnonLoginAndBasicAuthenticator.java
+++ b/test/org/apache/catalina/authenticator/TestSSOnonLoginAndBasicAuthenticator.java
@@ -16,6 +16,7 @@
  */
 package org.apache.catalina.authenticator;
 
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -31,7 +32,6 @@ import org.apache.catalina.Context;
 import org.apache.catalina.startup.TesterServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
-import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.codec.binary.Base64;
 import org.apache.tomcat.util.descriptor.web.LoginConfig;
@@ -237,7 +237,7 @@ public class TestSSOnonLoginAndBasicAuthenticator extends TomcatBaseTest {
         String credentials = user + ":" + pwd;
 
         String base64auth = Base64.encodeBase64String(
-                credentials.getBytes(B2CConverter.ISO_8859_1));
+                credentials.getBytes(StandardCharsets.ISO_8859_1));
         String authLine = "Basic " + base64auth;
 
         List<String> auth = new ArrayList<>();

==================================================
TestCoyoteOutputStream.java
index 72a2f696b8..779e16501e 100644
--- a/test/org/apache/catalina/connector/TestCoyoteAdapter.java
+++ b/test/org/apache/catalina/connector/TestCoyoteAdapter.java
@@ -20,6 +20,7 @@ import java.io.File;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.PrintWriter;
+import java.nio.charset.StandardCharsets;
 
 import javax.servlet.AsyncContext;
 import javax.servlet.ServletException;
@@ -35,7 +36,6 @@ import org.apache.catalina.Wrapper;
 import org.apache.catalina.startup.SimpleHttpClient;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
-import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 
 public class TestCoyoteAdapter extends TomcatBaseTest {
@@ -331,7 +331,7 @@ public class TestCoyoteAdapter extends TomcatBaseTest {
                 public void run() {
                     while (true) {
                         try {
-                            os.write("TEST".getBytes(B2CConverter.UTF_8));
+                            os.write("TEST".getBytes(StandardCharsets.UTF_8));
                             os.flush();
                             Thread.sleep(1000);
                         } catch (Exception e) {

==================================================
TestInputBuffer.java
index 42d76def2a..2eff63b084 100644
--- a/test/org/apache/catalina/connector/TestCoyoteOutputStream.java
+++ b/test/org/apache/catalina/connector/TestCoyoteOutputStream.java
@@ -17,6 +17,7 @@
 package org.apache.catalina.connector;
 
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import javax.servlet.AsyncContext;
@@ -34,7 +35,6 @@ import org.apache.catalina.Context;
 import org.apache.catalina.Wrapper;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
-import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 
 public class TestCoyoteOutputStream extends TomcatBaseTest {
@@ -137,7 +137,7 @@ public class TestCoyoteOutputStream extends TomcatBaseTest {
                 if (next < asyncWriteTarget) {
                     sos.write(
                             ("OK - " + next + System.lineSeparator()).getBytes(
-                                    B2CConverter.UTF_8));
+                                    StandardCharsets.UTF_8));
                     sos.flush();
                 } else {
                     asyncCtxt.dispatch("/write");
@@ -212,7 +212,7 @@ public class TestCoyoteOutputStream extends TomcatBaseTest {
 
             for (int i = start; i < start + len; i++) {
                 sos.write(("OK - " + i + System.lineSeparator()).getBytes(
-                        B2CConverter.UTF_8));
+                        StandardCharsets.UTF_8));
             }
         }
     }

==================================================
TestNonBlockingAPI.java
index c3d88675a7..4ef9819dee 100644
--- a/test/org/apache/catalina/connector/TestInputBuffer.java
+++ b/test/org/apache/catalina/connector/TestInputBuffer.java
@@ -20,6 +20,7 @@ import java.io.IOException;
 import java.io.Reader;
 import java.io.Writer;
 import java.nio.charset.MalformedInputException;
+import java.nio.charset.StandardCharsets;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
@@ -32,7 +33,6 @@ import org.junit.Test;
 import org.apache.catalina.Context;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
-import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.TestUtf8;
 import org.apache.tomcat.util.buf.TestUtf8.Utf8TestCase;
@@ -77,7 +77,7 @@ public class TestInputBuffer extends TomcatBaseTest {
         } else if (expected.length() == 0) {
             Assert.assertNull(description, bc.toString());
         } else {
-            bc.setCharset(B2CConverter.UTF_8);
+            bc.setCharset(StandardCharsets.UTF_8);
             Assert.assertEquals(description, expected, bc.toString());
         }
     }

==================================================
TestHostConfigAutomaticDeployment.java
index 4889cf5922..7b7dc046f8 100644
--- a/test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java
+++ b/test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java
@@ -22,6 +22,7 @@ import java.io.OutputStream;
 import java.net.HttpURLConnection;
 import java.net.Socket;
 import java.net.URL;
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -47,7 +48,6 @@ import org.apache.catalina.startup.BytesStreamer;
 import org.apache.catalina.startup.TesterServlet;
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
-import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.ByteChunk.ByteOutputChannel;
 
@@ -110,7 +110,7 @@ public class TestNonBlockingAPI extends TomcatBaseTest {
         os.write(("GET / HTTP/1.1\r\n" +
                 "Host: localhost:" + getPort() + "\r\n" +
                 "Connection: close\r\n" +
-                "\r\n").getBytes(B2CConverter.ISO_8859_1));
+                "\r\n").getBytes(StandardCharsets.ISO_8859_1));
         os.flush();
 
         InputStream is = s.getInputStream();

==================================================
TestUtf8.java
index 02bd717616..6958f8308f 100644
--- a/test/org/apache/catalina/startup/TestHostConfigAutomaticDeployment.java
+++ b/test/org/apache/catalina/startup/TestHostConfigAutomaticDeployment.java
@@ -19,6 +19,7 @@ package org.apache.catalina.startup;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.FileVisitResult;
 import java.nio.file.FileVisitor;
 import java.nio.file.Files;
@@ -36,7 +37,6 @@ import org.apache.catalina.LifecycleListener;
 import org.apache.catalina.LifecycleState;
 import org.apache.catalina.core.StandardHost;
 import org.apache.catalina.util.ContextName;
-import org.apache.tomcat.util.buf.B2CConverter;
 
 /**
  * The purpose of this class is to test the automatic deployment features of the
@@ -1671,7 +1671,7 @@ public class TestHostConfigAutomaticDeployment extends TomcatBaseTest {
                 context.append("\" antiResourceLocking=\"true");
             }
             context.append("\" />");
-            fos.write(context.toString().getBytes(B2CConverter.ISO_8859_1));
+            fos.write(context.toString().getBytes(StandardCharsets.ISO_8859_1));
         }
         return xml;
     }

==================================================
TesterParametersPerformance.java
index 20ff9272c7..f1adcf26b2 100644
--- a/test/org/apache/tomcat/util/buf/TestUtf8.java
+++ b/test/org/apache/tomcat/util/buf/TestUtf8.java
@@ -18,10 +18,10 @@ package org.apache.tomcat.util.buf;
 
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
-import java.nio.charset.Charset;
 import java.nio.charset.CharsetDecoder;
 import java.nio.charset.CoderResult;
 import java.nio.charset.CodingErrorAction;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -362,7 +362,7 @@ public class TestUtf8 {
 
     @Test
     public void testJvmDecoder() {
-        CharsetDecoder decoder = Charset.forName("UTF-8").newDecoder();
+        CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder();
         for (Utf8TestCase testCase : TEST_CASES) {
             doTest(decoder, testCase, testCase.flagsJvm);
         }

==================================================
