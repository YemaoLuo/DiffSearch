168342e67d905156249d6614242304b7100cf898
==================================================
Implement some simple rewrite fixmes.
==================================================
Remy Maucherat
==================================================
Thu Sep 20 09:03:05 2018 +0000
==================================================
RewriteCond.java
Implement some simple rewrite fixmes.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1841445 13f79535-47bb-0310-9956-ffa450edef68



==================================================
RewriteRule.java
index 9bccb230d2..47a904c1e0 100644
--- a/java/org/apache/catalina/valves/rewrite/RewriteCond.java
+++ b/java/org/apache/catalina/valves/rewrite/RewriteCond.java
@@ -88,6 +88,7 @@ public class RewriteCond {
 
     protected String testString = null;
     protected String condPattern = null;
+    protected String flagsString = null;
 
     public String getCondPattern() {
         return condPattern;
@@ -105,6 +106,14 @@ public class RewriteCond {
         this.testString = testString;
     }
 
+    public final String getFlagsString() {
+        return flagsString;
+    }
+
+    public final void setFlagsString(String flagsString) {
+        this.flagsString = flagsString;
+    }
+
     public void parse(Map<String, RewriteMap> maps) {
         test = new Substitution();
         test.setSub(testString);
@@ -163,8 +172,8 @@ public class RewriteCond {
      */
     @Override
     public String toString() {
-        // FIXME: Add flags if possible
-        return "RewriteCond " + testString + " " + condPattern;
+        return "RewriteCond " + testString + " " + condPattern
+                + ((flagsString != null) ? (" " + flagsString) : "");
     }
 
 

==================================================
RewriteValve.java
index bdaabe8f96..0bee31f380 100644
--- a/java/org/apache/catalina/valves/rewrite/RewriteRule.java
+++ b/java/org/apache/catalina/valves/rewrite/RewriteRule.java
@@ -31,6 +31,7 @@ public class RewriteRule {
 
     protected String patternString = null;
     protected String substitutionString = null;
+    protected String flagsString = null;
 
     public void parse(Map<String, RewriteMap> maps) {
         // Parse the substitution
@@ -145,8 +146,8 @@ public class RewriteRule {
      */
     @Override
     public String toString() {
-        // FIXME: Add flags if possible
-        return "RewriteRule " + patternString + " " + substitutionString;
+        return "RewriteRule " + patternString + " " + substitutionString
+                + ((flagsString != null) ? (" " + flagsString) : "");
     }
 
 
@@ -281,6 +282,15 @@ public class RewriteRule {
      */
     protected boolean qsappend = false;
 
+    /**
+     *  When the requested URI contains a query string, and the target URI does
+     *  not, the default behavior of RewriteRule is to copy that query string
+     *  to the target URI. Using the [QSD] flag causes the query string
+     *  to be discarded.
+     *  Using [QSD] and [QSA] together will result in [QSD] taking precedence.
+     */
+    protected boolean qsdiscard = false;
+
     /**
      *  Prefix Substitution with http://thishost[:thisport]/ (which makes the
      *  new URL a URI) to force a external redirection. If no code is given
@@ -430,6 +440,12 @@ public class RewriteRule {
     public void setQsappend(boolean qsappend) {
         this.qsappend = qsappend;
     }
+    public final boolean isQsdiscard() {
+        return qsdiscard;
+    }
+    public final void setQsdiscard(boolean qsdiscard) {
+        this.qsdiscard = qsdiscard;
+    }
     public boolean isRedirect() {
         return redirect;
     }
@@ -483,6 +499,14 @@ public class RewriteRule {
         this.substitutionString = substitutionString;
     }
 
+    public final String getFlagsString() {
+        return flagsString;
+    }
+
+    public final void setFlagsString(String flagsString) {
+        this.flagsString = flagsString;
+    }
+
     public boolean isHost() {
         return host;
     }

==================================================
TestRewriteValve.java
index ad74bd1d14..99b3d300e3 100644
--- a/java/org/apache/catalina/valves/rewrite/RewriteValve.java
+++ b/java/org/apache/catalina/valves/rewrite/RewriteValve.java
@@ -93,6 +93,12 @@ public class RewriteValve extends ValveBase {
     protected Map<String, RewriteMap> maps = new Hashtable<>();
 
 
+    /**
+     * Maps configuration.
+     */
+    protected ArrayList<String> mapsConfiguration = new ArrayList<>();
+
+
     public RewriteValve() {
         super(true);
     }
@@ -190,7 +196,12 @@ public class RewriteValve extends ValveBase {
 
     public String getConfiguration() {
         StringBuffer buffer = new StringBuffer();
-        // FIXME: Output maps if possible
+        for (String mapConfiguration : mapsConfiguration) {
+            buffer.append(mapConfiguration).append("\r\n");
+        }
+        if (mapsConfiguration.size() > 0) {
+            buffer.append("\r\n");
+        }
         for (int i = 0; i < rules.length; i++) {
             for (int j = 0; j < rules[i].getConditions().length; j++) {
                 buffer.append(rules[i].getConditions()[j].toString()).append("\r\n");
@@ -240,6 +251,9 @@ public class RewriteValve extends ValveBase {
                     String mapName = (String) ((Object[]) result)[0];
                     RewriteMap map = (RewriteMap) ((Object[]) result)[1];
                     maps.put(mapName, map);
+                    // Keep the original configuration line as it is not possible to get
+                    // the parameters back without an API change
+                    mapsConfiguration.add(line);
                     if (map instanceof Lifecycle) {
                         ((Lifecycle) map).start();
                     }
@@ -305,6 +319,7 @@ public class RewriteValve extends ValveBase {
             boolean rewritten = false;
             boolean done = false;
             boolean qsa = false;
+            boolean qsd = false;
             for (int i = 0; i < rules.length; i++) {
                 RewriteRule rule = rules[i];
                 CharSequence test = (rule.isHost()) ? host : urlDecoded;
@@ -324,11 +339,13 @@ public class RewriteValve extends ValveBase {
 
                 // Check QSA before the final reply
                 if (!qsa && newtest != null && rule.isQsappend()) {
-                    // TODO: This logic will need some tweaks if we add QSD
-                    //       support
                     qsa = true;
                 }
 
+                if (!qsa && newtest != null && rule.isQsdiscard()) {
+                    qsd = true;
+                }
+
                 // Final reply
 
                 // - forbidden
@@ -360,8 +377,8 @@ public class RewriteValve extends ValveBase {
 
                     StringBuffer urlStringEncoded =
                             new StringBuffer(URLEncoder.DEFAULT.encode(urlStringDecoded, uriCharset));
-                    if (originalQueryStringEncoded != null &&
-                            originalQueryStringEncoded.length() > 0) {
+                    if (!qsd && originalQueryStringEncoded != null
+                            && originalQueryStringEncoded.length() > 0) {
                         if (rewrittenQueryStringDecoded == null) {
                             urlStringEncoded.append('?');
                             urlStringEncoded.append(originalQueryStringEncoded);
@@ -613,6 +630,7 @@ public class RewriteValve extends ValveBase {
                 condition.setCondPattern(tokenizer.nextToken());
                 if (tokenizer.hasMoreTokens()) {
                     String flags = tokenizer.nextToken();
+                    condition.setFlagsString(flags);
                     if (flags.startsWith("[") && flags.endsWith("]")) {
                         flags = flags.substring(1, flags.length() - 1);
                     }
@@ -632,6 +650,7 @@ public class RewriteValve extends ValveBase {
                 rule.setSubstitutionString(tokenizer.nextToken());
                 if (tokenizer.hasMoreTokens()) {
                     String flags = tokenizer.nextToken();
+                    rule.setFlagsString(flags);
                     if (flags.startsWith("[") && flags.endsWith("]")) {
                         flags = flags.substring(1, flags.length() - 1);
                     }
@@ -763,6 +782,8 @@ public class RewriteValve extends ValveBase {
         //       capabilities
         } else if (flag.startsWith("qsappend") || flag.startsWith("QSA")) {
             rule.setQsappend(true);
+        } else if (flag.startsWith("qsdiscard") || flag.startsWith("QSD")) {
+            rule.setQsappend(true);
         } else if (flag.startsWith("redirect") || flag.startsWith("R")) {
             rule.setRedirect(true);
             int redirectCode = HttpServletResponse.SC_FOUND;

==================================================
