fafa6adcf8cbbf73faf9a74dd25df5e7690c2643
==================================================
Name change in preparation of pluggable Executors and thread fairness
==================================================
Filip Hanik
==================================================
Fri Dec 15 00:30:53 2006 +0000
==================================================
BioReceiver.java
Name change in preparation of pluggable Executors and thread fairness


git-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@487409 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BioReplicationTask.java
index 561d9f414d..7bdec3a1e5 100644
--- a/java/org/apache/catalina/tribes/transport/bio/BioReceiver.java
+++ b/java/org/apache/catalina/tribes/transport/bio/BioReceiver.java
@@ -77,8 +77,8 @@ public class BioReceiver extends ReceiverBase implements Runnable, ChannelReceiv
         return getReplicationThread();
     }
     
-    protected BioReplicationThread getReplicationThread() {
-        BioReplicationThread result = new BioReplicationThread(this);
+    protected BioReplicationTask getReplicationThread() {
+        BioReplicationTask result = new BioReplicationTask(this);
         result.setOptions(getWorkerThreadOptions());
         result.setUseBufferPool(this.getUseBufferPool());
         return result;
@@ -129,7 +129,7 @@ public class BioReceiver extends ReceiverBase implements Runnable, ChannelReceiv
                 if ( log.isWarnEnabled() )
                     log.warn("All BIO server replication threads are busy, unable to handle more requests until a thread is freed up.");
             }
-            BioReplicationThread thread = (BioReplicationThread)getPool().getWorker();
+            BioReplicationTask thread = (BioReplicationTask)getPool().getWorker();
             if ( thread == null ) continue; //should never happen
             try {
                 socket = serverSocket.accept();

==================================================
NioReceiver.java
similarity index 97%
rename from java/org/apache/catalina/tribes/transport/bio/BioReplicationThread.java
rename to java/org/apache/catalina/tribes/transport/bio/BioReplicationTask.java
index 38cf967844..9e4583031c 100644
--- a/java/org/apache/catalina/tribes/transport/bio/BioReplicationThread.java
+++ b/java/org/apache/catalina/tribes/transport/bio/BioReplicationTask.java
@@ -44,15 +44,15 @@ import org.apache.catalina.tribes.io.BufferPool;
  * 
  * @version $Revision$, $Date$
  */
-public class BioReplicationThread extends AbstractRxTask {
+public class BioReplicationTask extends AbstractRxTask {
 
 
-    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( BioReplicationThread.class );
+    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( BioReplicationTask.class );
     
     protected Socket socket;
     protected ObjectReader reader;
     
-    public BioReplicationThread (ListenCallback callback) {
+    public BioReplicationTask (ListenCallback callback) {
         super(callback);
     }
 

==================================================
NioReplicationTask.java
index 0c547764ba..1c0b99803f 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java
@@ -110,7 +110,7 @@ public class NioReceiver extends ReceiverBase implements Runnable, ChannelReceiv
     }
     
     public AbstractRxTask getWorkerThread() {
-        NioReplicationThread thread = new NioReplicationThread(this,this);
+        NioReplicationTask thread = new NioReplicationTask(this,this);
         thread.setUseBufferPool(this.getUseBufferPool());
         thread.setRxBufSize(getRxBufSize());
         thread.setOptions(getWorkerThreadOptions());
@@ -365,7 +365,7 @@ public class NioReceiver extends ReceiverBase implements Runnable, ChannelReceiv
      *  will then de-register the channel on the next select call.
      */
     protected void readDataFromSocket(SelectionKey key) throws Exception {
-        NioReplicationThread worker = (NioReplicationThread) getPool().getWorker();
+        NioReplicationTask worker = (NioReplicationTask) getPool().getWorker();
         if (worker == null) {
             // No threads available, do nothing, the selection
             // loop will keep calling this method until a

==================================================
