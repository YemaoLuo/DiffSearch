f4da7dc88e8d1e9736dd8bce2a822b1638efd0c2
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55811
==================================================
Mark Emlyn
==================================================
Sat Dec 7 20:43:46 2013 +0000
==================================================
ContextConfig.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55811
Do not parse web-fragment.xml files when an empty absolute-ordering element is present.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1548966 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JspCServletContext.java
index 46a5798f63..b4cf935907 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -1115,7 +1115,7 @@ public class ContextConfig implements LifecycleListener {
         // provided by the container. If any of the application JARs have a
         // web-fragment.xml it will be parsed at this point. web-fragment.xml
         // files are ignored for container provided JARs.
-        Map<String,WebXml> fragments = processJarsForWebFragments();
+        Map<String,WebXml> fragments = processJarsForWebFragments(webXml);
 
         // Step 2. Order the fragments.
         Set<WebXml> orderedFragments = null;
@@ -1840,15 +1840,23 @@ public class ContextConfig implements LifecycleListener {
      *
      * @return A map of JAR name to processed web fragment (if any)
      */
-    protected Map<String,WebXml> processJarsForWebFragments() {
+    protected Map<String,WebXml> processJarsForWebFragments(WebXml application) {
 
         JarScanner jarScanner = context.getJarScanner();
         boolean delegate = false;
         if (context instanceof StandardContext) {
             delegate = ((StandardContext) context).getDelegate();
         }
+        boolean parseRequired = true;
+        Set<String> absoluteOrder = application.getAbsoluteOrdering();
+        if (absoluteOrder != null && absoluteOrder.isEmpty() &&
+                !context.getXmlValidation()) {
+            // Skip parsing when there is an empty absolute ordering and
+            // validation is not enabled
+            parseRequired = false;
+        }
         FragmentJarScannerCallback callback =
-                new FragmentJarScannerCallback(webXmlParser, delegate);
+                new FragmentJarScannerCallback(webXmlParser, delegate, parseRequired);
 
         jarScanner.scan(JarScanType.PLUGGABILITY,
                 context.getServletContext(), callback);

==================================================
FragmentJarScannerCallback.java
index be070ac787..5071c83d8f 100644
--- a/java/org/apache/jasper/servlet/JspCServletContext.java
+++ b/java/org/apache/jasper/servlet/JspCServletContext.java
@@ -143,6 +143,13 @@ public class JspCServletContext implements ServletContext {
             return webXml;
         }
 
+        // If an empty absolute ordering element is present, fragment processing
+        // may be skipped.
+        Set<String> absoluteOrdering = webXml.getAbsoluteOrdering();
+        if (absoluteOrdering != null && absoluteOrdering.isEmpty()) {
+            return webXml;
+        }
+
         Map<String, WebXml> fragments = scanForFragments(webXmlParser);
         Set<WebXml> orderedFragments = WebXml.orderWebFragments(webXml, fragments, this);
 
@@ -158,7 +165,8 @@ public class JspCServletContext implements ServletContext {
         // TODO - configure filter rules from Ant rather then system properties
         scanner.setJarScanFilter(new StandardJarScanFilter());
 
-        FragmentJarScannerCallback callback = new FragmentJarScannerCallback(webXmlParser, false);
+        FragmentJarScannerCallback callback =
+                new FragmentJarScannerCallback(webXmlParser, false, true);
         scanner.scan(JarScanType.PLUGGABILITY, this, callback);
         if (!callback.isOk()) {
             throw new JasperException(Localizer.getMessage("jspc.error.invalidFragment"));

==================================================
