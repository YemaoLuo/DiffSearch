e95ba04eaf787bf7bb295d20a978f6579ea39308
==================================================
Ensure that when multiple dispatches are requested (e.g. one for write and one for read) if the first calls AsyncContext.complete() that the second dispatch is not processed.
==================================================
Mark Emlyn
==================================================
Mon Sep 2 19:47:14 2013 +0000
==================================================
AbstractAjpProcessor.java
Ensure that when multiple dispatches are requested (e.g. one for write and one for read) if the first calls AsyncContext.complete() that the second dispatch is not processed.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1519508 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpAprProcessor.java
index bf86b27726..becef18724 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
@@ -525,14 +525,13 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
             }
 
         } else if (actionCode == ActionCode.NB_WRITE_INTEREST) {
-            // Assume it is always possible write data.
-            // TODO Investigate 'true' non-blocking IO for AJP.
+            // Until 'true' non-blocking IO is implemented, assume it is always
+            // possible write data.
             AtomicBoolean isReady = (AtomicBoolean)param;
             isReady.set(true);
 
         } else if (actionCode == ActionCode.NB_READ_INTEREST) {
-            // TODO
-            System.out.println("AJP Non-blocking IO TODO: NB_READ_INTEREST");
+            // NO-OP. Not required until 'true' non-blocking IO is implemented.
 
         } else if (actionCode == ActionCode.REQUEST_BODY_FULLY_READ) {
             AtomicBoolean result = (AtomicBoolean) param;

==================================================
AjpNioProcessor.java
index 5a970bd707..47fc808033 100644
--- a/java/org/apache/coyote/ajp/AjpAprProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpAprProcessor.java
@@ -84,6 +84,7 @@ public class AjpAprProcessor extends AbstractAjpProcessor<Long> {
     protected void actionInternal(ActionCode actionCode, Object param) {
 
         if (actionCode == ActionCode.ASYNC_COMPLETE) {
+            socketWrapper.clearDispatches();
             if (asyncStateMachine.asyncComplete()) {
                 ((AprEndpoint)endpoint).processSocketAsync(this.socketWrapper,
                         SocketStatus.OPEN_READ);

==================================================
AjpProcessor.java
index ddaf84ba9a..64acf5a5ea 100644
--- a/java/org/apache/coyote/ajp/AjpNioProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpNioProcessor.java
@@ -69,9 +69,10 @@ public class AjpNioProcessor extends AbstractAjpProcessor<NioChannel> {
     protected void actionInternal(ActionCode actionCode, Object param) {
 
         if (actionCode == ActionCode.ASYNC_COMPLETE) {
+            socketWrapper.clearDispatches();
             if (asyncStateMachine.asyncComplete()) {
                 ((NioEndpoint)endpoint).dispatchForEvent(
-                        socketWrapper.getSocket(), SocketStatus.OPEN_READ, false);
+                        socketWrapper.getSocket(), SocketStatus.OPEN_READ, true);
             }
         } else if (actionCode == ActionCode.ASYNC_SETTIMEOUT) {
             if (param == null) return;

==================================================
Http11AprProcessor.java
index fe95e86cee..1ea902f549 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -81,6 +81,7 @@ public class AjpProcessor extends AbstractAjpProcessor<Socket> {
     protected void actionInternal(ActionCode actionCode, Object param) {
 
         if (actionCode == ActionCode.ASYNC_COMPLETE) {
+            socketWrapper.clearDispatches();
             if (asyncStateMachine.asyncComplete()) {
                 ((JIoEndpoint)endpoint).processSocketAsync(this.socketWrapper,
                         SocketStatus.OPEN_READ);

==================================================
Http11NioProcessor.java
index 4051c75d6f..c26496b207 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -468,6 +468,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
         } else if (actionCode == ActionCode.COMET_SETTIMEOUT) {
             //no op
         } else if (actionCode == ActionCode.ASYNC_COMPLETE) {
+            socketWrapper.clearDispatches();
             if (asyncStateMachine.asyncComplete()) {
                 ((AprEndpoint)endpoint).processSocketAsync(this.socketWrapper,
                         SocketStatus.OPEN_READ);

==================================================
Http11Processor.java
index 47cab852a9..d62e66deed 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -496,6 +496,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
                 attach.setTimeout(timeout);
             }
         } else if (actionCode == ActionCode.ASYNC_COMPLETE) {
+            socketWrapper.clearDispatches();
             if (asyncStateMachine.asyncComplete()) {
                 ((NioEndpoint)endpoint).dispatchForEvent(this.socketWrapper.getSocket(),SocketStatus.OPEN_READ, true);
             }

==================================================
SocketWrapper.java
index 9010a82899..1544fcc130 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -369,6 +369,7 @@ public class Http11Processor extends AbstractHttp11Processor<Socket> {
                 }
             }
         } else if (actionCode == ActionCode.ASYNC_COMPLETE) {
+            socketWrapper.clearDispatches();
             if (asyncStateMachine.asyncComplete()) {
                 ((JIoEndpoint) endpoint).processSocketAsync(this.socketWrapper,
                         SocketStatus.OPEN_READ);

==================================================
