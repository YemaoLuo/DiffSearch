e9e9db27dbfb138a663c27a131146d16e6e9bc36
==================================================
Align ActionCode.CLIENT_FLUSH
==================================================
Mark Thomas
==================================================
Fri Aug 12 07:45:55 2016 +0000
==================================================
AjpProcessor.java
Align ActionCode.CLIENT_FLUSH

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1756086 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11Processor.java
index 44c4849ec9..c1dd0e1a91 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -387,6 +387,7 @@ public class AjpProcessor extends AbstractProcessor {
                 flush();
             } catch (IOException e) {
                 setErrorState(ErrorState.CLOSE_CONNECTION_NOW, e);
+                response.setErrorException(e);
             }
             break;
         }

==================================================
StreamProcessor.java
index bb5cf1a8a1..6dd3b9237b 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -677,7 +677,7 @@ public class Http11Processor extends AbstractProcessor {
         case CLIENT_FLUSH: {
             action(ActionCode.COMMIT, null);
             try {
-                outputBuffer.flush();
+                flush();
             } catch (IOException e) {
                 setErrorState(ErrorState.CLOSE_CONNECTION_NOW, e);
                 response.setErrorException(e);
@@ -1807,6 +1807,11 @@ public class Http11Processor extends AbstractProcessor {
     }
 
 
+    private void flush() throws IOException {
+        outputBuffer.flush();
+    }
+
+
     /**
      * Checks to see if the keep-alive loop should be broken, performing any
      * processing (e.g. sendfile handling) that may have an impact on whether

==================================================
