9b8b5f3f5f462b5750ec01acd66d5be9fd37baf1
==================================================
Refactor array of server cookies into separate class.
==================================================
Mark Emlyn
==================================================
Mon Sep 1 18:25:06 2014 +0000
==================================================
Cookies.java
Refactor array of server cookies into separate class.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1621862 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ServerCookies.java
index 9a68c15fc2..821ee38c1a 100644
--- a/java/org/apache/tomcat/util/http/Cookies.java
+++ b/java/org/apache/tomcat/util/http/Cookies.java
@@ -46,8 +46,7 @@ public final class Cookies {
 
     // expected average number of cookies per request
     public static final int INITIAL_SIZE = 4;
-    private ServerCookie scookies[] = new ServerCookie[INITIAL_SIZE];
-    private int cookieCount = 0;
+    private ServerCookies scookies = new ServerCookies(INITIAL_SIZE);
     private boolean unprocessed = true;
 
     private final MimeHeaders headers;
@@ -66,12 +65,7 @@ public final class Cookies {
 
 
     public void recycle() {
-        for (int i = 0; i < cookieCount; i++) {
-            if (scookies[i] != null) {
-                scookies[i].recycle();
-            }
-        }
-        cookieCount = 0;
+        scookies.recycle();
         unprocessed = true;
     }
 
@@ -100,7 +94,7 @@ public final class Cookies {
             // This will trigger cookie processing
             getCookieCount();
         }
-        return scookies[idx];
+        return scookies.getCookie(idx);
     }
 
 
@@ -109,29 +103,7 @@ public final class Cookies {
             unprocessed = false;
             processCookies(headers);
         }
-        return cookieCount;
-    }
-
-
-    /**
-     * Register a new, initialized cookie. Cookies are recycled, and most of the
-     * time an existing ServerCookie object is returned. The caller can set the
-     * name/value and attributes for the cookie.
-     */
-    private ServerCookie addCookie() {
-        if (cookieCount >= scookies.length) {
-            ServerCookie scookiesTmp[] = new ServerCookie[2*cookieCount];
-            System.arraycopy(scookies, 0, scookiesTmp, 0, cookieCount);
-            scookies = scookiesTmp;
-        }
-
-        ServerCookie c = scookies[cookieCount];
-        if (c == null) {
-            c = new ServerCookie();
-            scookies[cookieCount] = c;
-        }
-        cookieCount++;
-        return c;
+        return scookies.getCookieCount();
     }
 
 
@@ -471,7 +443,7 @@ public final class Cookies {
                     continue;
                 }
 
-                sc = addCookie();
+                sc = scookies.addCookie();
                 sc.setVersion( version );
                 sc.getName().setBytes( bytes, nameStart,
                                        nameEnd-nameStart);

==================================================
