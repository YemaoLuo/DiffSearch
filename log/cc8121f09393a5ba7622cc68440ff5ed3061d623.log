cc8121f09393a5ba7622cc68440ff5ed3061d623
==================================================
EL 3.0
==================================================
Mark Emlyn
==================================================
Wed Jul 3 19:51:36 2013 +0000
==================================================
ListELResolver.java
EL 3.0
More cosmetic changes to make API diff smaller

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1499538 13f79535-47bb-0310-9956-ffa450edef68



==================================================
MapELResolver.java
index 11b2bd360a..eee12088d0 100644
--- a/java/javax/el/ListELResolver.java
+++ b/java/javax/el/ListELResolver.java
@@ -40,7 +40,7 @@ public class ListELResolver extends ELResolver {
     }
 
     @Override
-    public Object getValue(ELContext context, Object base, Object property) {
+    public Class<?> getType(ELContext context, Object base, Object property) {
         if (context == null) {
             throw new NullPointerException();
         }
@@ -50,16 +50,17 @@ public class ListELResolver extends ELResolver {
             List<?> list = (List<?>) base;
             int idx = coerce(property);
             if (idx < 0 || idx >= list.size()) {
-                return null;
+                throw new PropertyNotFoundException(
+                        new ArrayIndexOutOfBoundsException(idx).getMessage());
             }
-            return list.get(idx);
+            return Object.class;
         }
 
         return null;
     }
 
     @Override
-    public Class<?> getType(ELContext context, Object base, Object property) {
+    public Object getValue(ELContext context, Object base, Object property) {
         if (context == null) {
             throw new NullPointerException();
         }
@@ -69,10 +70,9 @@ public class ListELResolver extends ELResolver {
             List<?> list = (List<?>) base;
             int idx = coerce(property);
             if (idx < 0 || idx >= list.size()) {
-                throw new PropertyNotFoundException(
-                        new ArrayIndexOutOfBoundsException(idx).getMessage());
+                return null;
             }
-            return Object.class;
+            return list.get(idx);
         }
 
         return null;

==================================================
MethodExpression.java
index 9174e07271..f4f1058b77 100644
--- a/java/javax/el/MapELResolver.java
+++ b/java/javax/el/MapELResolver.java
@@ -41,28 +41,28 @@ public class MapELResolver extends ELResolver {
     }
 
     @Override
-    public Object getValue(ELContext context, Object base, Object property) {
+    public Class<?> getType(ELContext context, Object base, Object property) {
         if (context == null) {
             throw new NullPointerException();
         }
 
         if (base instanceof Map<?,?>) {
             context.setPropertyResolved(true);
-            return ((Map<?,?>) base).get(property);
+            return Object.class;
         }
 
         return null;
     }
 
     @Override
-    public Class<?> getType(ELContext context, Object base, Object property) {
+    public Object getValue(ELContext context, Object base, Object property) {
         if (context == null) {
             throw new NullPointerException();
         }
 
         if (base instanceof Map<?,?>) {
             context.setPropertyResolved(true);
-            return Object.class;
+            return ((Map<?,?>) base).get(property);
         }
 
         return null;

==================================================
ValueExpression.java
index fa0e6967de..b249fc6d5e 100644
--- a/java/javax/el/MethodExpression.java
+++ b/java/javax/el/MethodExpression.java
@@ -20,9 +20,32 @@ public abstract class MethodExpression extends Expression {
 
     private static final long serialVersionUID = 8163925562047324656L;
 
-    public abstract MethodInfo getMethodInfo(ELContext context) throws NullPointerException, PropertyNotFoundException, MethodNotFoundException, ELException;
+    /**
+     * @throws NullPointerException
+     *              If the supplied context is <code>null</code>
+     * @throws PropertyNotFoundException
+     *              If a property/variable resolution failed because no match
+     *              was found or a match was found but was not readable
+     * @throws MethodNotFoundException
+     *              If no matching method can be found
+     * @throws ELException
+     *              Wraps any exception throw whilst resolving the property
+     */
+    public abstract MethodInfo getMethodInfo(ELContext context);
 
-    public abstract Object invoke(ELContext context, Object[] params) throws NullPointerException, PropertyNotFoundException, MethodNotFoundException, ELException;
+    /**
+     * @throws NullPointerException
+     *              If the supplied context is <code>null</code>
+     * @throws PropertyNotFoundException
+     *              If a property/variable resolution failed because no match
+     *              was found or a match was found but was not readable
+     * @throws MethodNotFoundException
+     *              If no matching method can be found
+     * @throws ELException
+     *              Wraps any exception throw whilst resolving the property or
+     *              coercion of the result to the expected return type fails
+     */
+    public abstract Object invoke(ELContext context, Object[] params);
 
     /**
      * @since EL 3.0

==================================================
