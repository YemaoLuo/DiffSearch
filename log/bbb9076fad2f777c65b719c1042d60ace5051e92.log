bbb9076fad2f777c65b719c1042d60ace5051e92
==================================================
Refactor for consistency
==================================================
Mark Thomas
==================================================
Wed Oct 26 12:37:27 2016 +0000
==================================================
Connector.java
Refactor for consistency
Limits applied after the request/response has been passed to the Adaptor are configured on the Connector and obtained via the Adaptor when required.
Limits applied during initial parsing are configured on the ProtocolHandler and may be obtained from the Protocol or may be passed to the Processor etc. as required.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1766675 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Request.java
index 8599fac9a6..9589955344 100644
--- a/java/org/apache/catalina/connector/Connector.java
+++ b/java/org/apache/catalina/connector/Connector.java
@@ -195,6 +195,12 @@ public class Connector extends LifecycleMBeanBase  {
     protected static final StringManager sm = StringManager.getManager(Connector.class);
 
 
+    /**
+     * The maximum number of cookies permitted for a request. Use a value less
+     * than zero for no limit. Defaults to 200.
+     */
+    private int maxCookieCount = 200;
+
     /**
      * The maximum number of parameters (GET plus POST) which will be
      * automatically parsed by the container. 10000 by default. A value of less
@@ -411,6 +417,16 @@ public class Connector extends LifecycleMBeanBase  {
     }
 
 
+    public int getMaxCookieCount() {
+        return maxCookieCount;
+    }
+
+
+    public void setMaxCookieCount(int maxCookieCount) {
+        this.maxCookieCount = maxCookieCount;
+    }
+
+
     /**
      * @return the maximum number of parameters (GET plus POST) that will be
      * automatically parsed by the container. A value of less than 0 means no

==================================================
AbstractProcessor.java
index 99a319a732..9d988d60a3 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -3051,6 +3051,7 @@ public class Request implements HttpServletRequest {
         cookiesParsed = true;
 
         ServerCookies serverCookies = coyoteRequest.getCookies();
+        serverCookies.setLimit(connector.getMaxCookieCount());
         CookieProcessor cookieProcessor = getContext().getCookieProcessor();
         cookieProcessor.parseCookieHeader(coyoteRequest.getMimeHeaders(), serverCookies);
     }

==================================================
AbstractProtocol.java
index f4c70139e8..92b224e7d7 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -50,7 +50,6 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
     protected final Response response;
     protected volatile SocketWrapperBase<?> socketWrapper = null;
     protected volatile SSLSupport sslSupport;
-    private int maxCookieCount = 200;
 
 
     /**
@@ -533,16 +532,6 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
     }
 
 
-    public int getMaxCookieCount() {
-        return maxCookieCount;
-    }
-
-
-    public void setMaxCookieCount(int maxCookieCount) {
-        this.maxCookieCount = maxCookieCount;
-    }
-
-
     @Override
     public void recycle() {
         errorState = ErrorState.NONE;

==================================================
AbstractAjpProtocol.java
index a1f12c9f0a..4df34b543b 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -103,13 +103,6 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
     private AsyncTimeout asyncTimeout = null;
 
 
-    /**
-     * The maximum number of cookies permitted for a request. Use a value less
-     * than zero for no limit. Defaults to 200.
-     */
-    private int maxCookieCount = 200;
-
-
     public AbstractProtocol(AbstractEndpoint<S> endpoint) {
         this.endpoint = endpoint;
         setSoLinger(Constants.DEFAULT_CONNECTION_LINGER);
@@ -208,16 +201,6 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
     }
 
 
-    public int getMaxCookieCount() {
-        return maxCookieCount;
-    }
-
-
-    public void setMaxCookieCount(int maxCookieCount) {
-        this.maxCookieCount = maxCookieCount;
-    }
-
-
     // ---------------------- Properties that are passed through to the EndPoint
 
     @Override

==================================================
AjpProcessor.java
index cf47673e31..8eac1b77ba 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -192,7 +192,6 @@ public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
         processor.setRequiredSecret(requiredSecret);
         processor.setKeepAliveTimeout(getKeepAliveTimeout());
         processor.setClientCertProvider(getClientCertProvider());
-        processor.setMaxCookieCount(getMaxCookieCount());
         return processor;
     }
 

==================================================
AbstractHttp11Protocol.java
index 0b05e8c284..8a6ece6b62 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -722,7 +722,6 @@ public class AjpProcessor extends AbstractProcessor {
 
         // Set this every time in case limit has been changed via JMX
         headers.setLimit(endpoint.getMaxHeaderCount());
-        request.getCookies().setLimit(getMaxCookieCount());
 
         boolean contentLengthSet = false;
         int hCount = requestHeaderMessage.getInt();

==================================================
Http11Processor.java
index cb988ee630..b7717e8e0b 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -648,7 +648,6 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
         processor.setMaxSavePostSize(getMaxSavePostSize());
         processor.setServer(getServer());
         processor.setServerRemoveAppProvidedValues(getServerRemoveAppProvidedValues());
-        processor.setMaxCookieCount(getMaxCookieCount());
         return processor;
     }
 

==================================================
Http2Protocol.java
index 1868380712..c890d4bfbc 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -680,7 +680,6 @@ public class Http11Processor extends AbstractProcessor {
                     keptAlive = true;
                     // Set this every time in case limit has been changed via JMX
                     request.getMimeHeaders().setLimit(endpoint.getMaxHeaderCount());
-                    request.getCookies().setLimit(getMaxCookieCount());
                     if (!inputBuffer.parseHeaders()) {
                         // We've read part of the request, don't recycle it
                         // instead associate it with the socket

==================================================
Http2UpgradeHandler.java
index 58b78a8fd4..988b2d1850 100644
--- a/java/org/apache/coyote/http2/Http2Protocol.java
+++ b/java/org/apache/coyote/http2/Http2Protocol.java
@@ -64,7 +64,6 @@ public class Http2Protocol implements UpgradeProtocol {
     // Limits
     private Set<String> allowedTrailerHeaders =
             Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());
-    private int maxCookieCount = Constants.DEFAULT_MAX_COOKIE_COUNT;
     private int maxHeaderCount = Constants.DEFAULT_MAX_HEADER_COUNT;
     private int maxHeaderSize = Constants.DEFAULT_MAX_HEADER_SIZE;
     private int maxTrailerCount = Constants.DEFAULT_MAX_TRAILER_COUNT;
@@ -110,7 +109,6 @@ public class Http2Protocol implements UpgradeProtocol {
         result.setMaxConcurrentStreamExecution(getMaxConcurrentStreamExecution());
         result.setInitialWindowSize(getInitialWindowSize());
         result.setAllowedTrailerHeaders(allowedTrailerHeaders);
-        result.setMaxCookieCount(getMaxCookieCount());
         result.setMaxHeaderCount(getMaxHeaderCount());
         result.setMaxHeaderSize(getMaxHeaderSize());
         result.setMaxTrailerCount(getMaxTrailerCount());
@@ -240,16 +238,6 @@ public class Http2Protocol implements UpgradeProtocol {
     }
 
 
-    public void setMaxCookieCount(int maxCookieCount) {
-        this.maxCookieCount = maxCookieCount;
-    }
-
-
-    public int getMaxCookieCount() {
-        return maxCookieCount;
-    }
-
-
     public void setMaxHeaderCount(int maxHeaderCount) {
         this.maxHeaderCount = maxHeaderCount;
     }

==================================================
Stream.java
index eeddd232e2..c17e35c5a8 100644
--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java
@@ -148,7 +148,6 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
 
     // Limits
     private Set<String> allowedTrailerHeaders = Collections.emptySet();
-    private int maxCookieCount = Constants.DEFAULT_MAX_COOKIE_COUNT;
     private int maxHeaderCount = Constants.DEFAULT_MAX_HEADER_COUNT;
     private int maxHeaderSize = Constants.DEFAULT_MAX_HEADER_SIZE;
     private int maxTrailerCount = Constants.DEFAULT_MAX_TRAILER_COUNT;
@@ -1131,16 +1130,6 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
     }
 
 
-    public void setMaxCookieCount(int maxCookieCount) {
-        this.maxCookieCount = maxCookieCount;
-    }
-
-
-    public int getMaxCookieCount() {
-        return maxCookieCount;
-    }
-
-
     public void setMaxHeaderCount(int maxHeaderCount) {
         this.maxHeaderCount = maxHeaderCount;
     }

==================================================
TestHttp2Limits.java
index ab65aefb08..6e266dafd6 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -97,8 +97,6 @@ class Stream extends AbstractStream implements HeaderEmitter {
         this.coyoteResponse.setOutputBuffer(outputBuffer);
         this.coyoteRequest.setResponse(coyoteResponse);
         this.coyoteRequest.protocol().setString("HTTP/2.0");
-        // Configure HTTP/2 limits
-        this.coyoteRequest.getCookies().setLimit(handler.getMaxCookieCount());
     }
 
 

==================================================
