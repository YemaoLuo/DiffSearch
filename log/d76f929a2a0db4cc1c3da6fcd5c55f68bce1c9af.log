d76f929a2a0db4cc1c3da6fcd5c55f68bce1c9af
==================================================
Clean-up.
==================================================
Mark Emlyn
==================================================
Mon Sep 2 13:02:03 2013 +0000
==================================================
AjpAprProcessor.java
Clean-up.
Remove comments that add zero value.
Make spacing more consistent.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1519424 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpNioProcessor.java
index 4c17b01546..d8904c3911 100644
--- a/java/org/apache/coyote/ajp/AjpAprProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpAprProcessor.java
@@ -29,7 +29,6 @@ import org.apache.tomcat.util.net.AprEndpoint;
 import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapper;
 
-
 /**
  * Processes AJP requests.
  *
@@ -43,18 +42,12 @@ import org.apache.tomcat.util.net.SocketWrapper;
  */
 public class AjpAprProcessor extends AbstractAjpProcessor<Long> {
 
-
-    /**
-     * Logger.
-     */
     private static final Log log = LogFactory.getLog(AjpAprProcessor.class);
     @Override
     protected Log getLog() {
         return log;
     }
 
-    // ----------------------------------------------------------- Constructors
-
 
     public AjpAprProcessor(int packetSize, AprEndpoint endpoint) {
 
@@ -69,8 +62,6 @@ public class AjpAprProcessor extends AbstractAjpProcessor<Long> {
     }
 
 
-    // ----------------------------------------------------- Instance Variables
-
     /**
      * Direct buffer used for input.
      */
@@ -83,8 +74,6 @@ public class AjpAprProcessor extends AbstractAjpProcessor<Long> {
     protected final ByteBuffer outputBuffer;
 
 
-    // ----------------------------------------------------- ActionHook Methods
-
     /**
      * Send an action to the connector.
      *
@@ -112,8 +101,6 @@ public class AjpAprProcessor extends AbstractAjpProcessor<Long> {
     }
 
 
-    // ------------------------------------------------------ Protected Methods
-
     @Override
     protected void setupSocket(SocketWrapper<Long> socketWrapper) {
         long socketRef = socketWrapper.getSocket().longValue();
@@ -330,7 +317,6 @@ public class AjpAprProcessor extends AbstractAjpProcessor<Long> {
             inputBuffer.get(message.getBuffer(), headerLength, messageLength);
             return true;
         }
-
     }
 
 

==================================================
AjpProcessor.java
index 07ab17f37a..5da4fc85d6 100644
--- a/java/org/apache/coyote/ajp/AjpNioProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpNioProcessor.java
@@ -31,24 +31,17 @@ import org.apache.tomcat.util.net.NioSelectorPool;
 import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapper;
 
-
 /**
  * Processes AJP requests using NIO.
  */
 public class AjpNioProcessor extends AbstractAjpProcessor<NioChannel> {
 
-
-    /**
-     * Logger.
-     */
     private static final Log log = LogFactory.getLog(AjpNioProcessor.class);
     @Override
     protected Log getLog() {
         return log;
     }
 
-    // ----------------------------------------------------------- Constructors
-
 
     public AjpNioProcessor(int packetSize, NioEndpoint endpoint) {
 
@@ -60,16 +53,12 @@ public class AjpNioProcessor extends AbstractAjpProcessor<NioChannel> {
     }
 
 
-    // ----------------------------------------------------- Instance Variables
-
     /**
      * Selector pool for the associated endpoint.
      */
     protected final NioSelectorPool pool;
 
 
-    // ----------------------------------------------------- ActionHook Methods
-
     /**
      * Send an action to the connector.
      *
@@ -95,13 +84,12 @@ public class AjpNioProcessor extends AbstractAjpProcessor<NioChannel> {
         } else if (actionCode == ActionCode.ASYNC_DISPATCH) {
             if (asyncStateMachine.asyncDispatch()) {
                 ((NioEndpoint)endpoint).dispatchForEvent(
-                        socketWrapper.getSocket(), SocketStatus.OPEN_READ, true);            }
+                        socketWrapper.getSocket(), SocketStatus.OPEN_READ, true);
             }
         }
+    }
 
 
-    // ------------------------------------------------------ Protected Methods
-
     @Override
     protected void setupSocket(SocketWrapper<NioChannel> socketWrapper)
             throws IOException {
@@ -135,15 +123,17 @@ public class AjpNioProcessor extends AbstractAjpProcessor<NioChannel> {
         Selector selector = null;
         try {
             selector = pool.get();
-        } catch ( IOException x ) {
+        } catch (IOException x) {
             //ignore
         }
         try {
             pool.write(writeBuffer, socketWrapper.getSocket(), selector,
                     writeTimeout, true);
-        }finally {
+        } finally {
             writeBuffer.clear();
-            if ( selector != null ) pool.put(selector);
+            if (selector != null) {
+                pool.put(selector);
+            }
         }
     }
 
@@ -172,6 +162,7 @@ public class AjpNioProcessor extends AbstractAjpProcessor<NioChannel> {
         return read;
     }
 
+
     private int readSocket(byte[] buf, int pos, int n, boolean block)
             throws IOException {
         int nRead = 0;
@@ -257,6 +248,4 @@ public class AjpNioProcessor extends AbstractAjpProcessor<NioChannel> {
             return true;
         }
     }
-
-
 }

==================================================
