6fe2d55f19df843ab8ac1be336aa769d6a996af2
==================================================
Review Javadoc for Manager hierarchy. Remove unnecessary duplication.
==================================================
asf-sync-process asf-sync-process@unknown
==================================================
Sat Jan 16 15:45:12 2016 +0000
==================================================
ClusterManager.java
Review Javadoc for Manager hierarchy. Remove unnecessary duplication.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1724997 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ClusterManagerBase.java
index 09353d0802..f4d2c30acc 100644
--- a/java/org/apache/catalina/ha/ClusterManager.java
+++ b/java/org/apache/catalina/ha/ClusterManager.java
@@ -79,6 +79,14 @@ public interface ClusterManager extends Manager {
 
    public void setCluster(CatalinaCluster cluster);
 
+   /**
+    * Open stream and use correct ClassLoader (Container), switching thread
+    * context class loader.
+    *
+    * @param data The data
+    * @return The object input stream
+    * @throws IOException An error occurred
+    */
    public ReplicationStream getReplicationStream(byte[] data) throws IOException;
 
    public ReplicationStream getReplicationStream(byte[] data, int offset, int length) throws IOException;

==================================================
DeltaManager.java
index 13f248e6f8..731c967fc3 100644
--- a/java/org/apache/catalina/ha/session/ClusterManagerBase.java
+++ b/java/org/apache/catalina/ha/session/ClusterManagerBase.java
@@ -72,9 +72,6 @@ public abstract class ClusterManagerBase extends ManagerBase implements ClusterM
      */
     private boolean recordAllActions = false;
 
-    /*
-     * @see org.apache.catalina.ha.ClusterManager#getCluster()
-     */
     @Override
     public CatalinaCluster getCluster() {
         return cluster;
@@ -179,14 +176,6 @@ public abstract class ClusterManagerBase extends ManagerBase implements ClusterM
         return getClassLoaders(getContext());
     }
 
-    /**
-     * Open Stream and use correct ClassLoader (Container) Switch
-     * ThreadClassLoader
-     *
-     * @param data The data
-     * @return The object input stream
-     * @throws IOException An error occurred
-     */
     @Override
     public ReplicationStream getReplicationStream(byte[] data) throws IOException {
         return getReplicationStream(data,0,data.length);
@@ -210,6 +199,10 @@ public abstract class ClusterManagerBase extends ManagerBase implements ClusterM
         // NOOP
     }
 
+    /**
+     * {@link org.apache.catalina.Manager} implementations that also implement
+     * {@link ClusterManager} do not support local session persistence.
+     */
     @Override
     public void unload() {
         // NOOP

==================================================
ManagerBase.java
index e0e5a569e1..05ccf6eae8 100644
--- a/java/org/apache/catalina/ha/session/DeltaManager.java
+++ b/java/org/apache/catalina/ha/session/DeltaManager.java
@@ -128,9 +128,6 @@ public class DeltaManager extends ClusterManagerBase{
         this.name = name;
     }
 
-    /**
-     * Return the descriptive short name of this Manager implementation.
-     */
     @Override
     public String getName() {
         return name;
@@ -409,35 +406,16 @@ public class DeltaManager extends ClusterManagerBase{
         this.notifyContainerListenersOnReplication = notifyContainerListenersOnReplication;
     }
 
+
     // --------------------------------------------------------- Public Methods
 
-    /**
-     * Construct and return a new session object, based on the default settings
-     * specified by this Manager's properties. The session id will be assigned
-     * by this method, and available via the getId() method of the returned
-     * session. If a new session cannot be created for any reason, return
-     * <code>null</code>.
-     *
-     * @param sessionId The session id that should be used for the session
-     * @exception IllegalStateException
-     *                if a new session cannot be instantiated for any reason
-     *
-     * Construct and return a new session object, based on the default settings
-     * specified by this Manager's properties. The session id will be assigned
-     * by this method, and available via the getId() method of the returned
-     * session. If a new session cannot be created for any reason, return
-     * <code>null</code>.
-     *
-     * @exception IllegalStateException
-     *                if a new session cannot be instantiated for any reason
-     */
     @Override
     public Session createSession(String sessionId) {
         return createSession(sessionId, true);
     }
 
     /**
-     * create new session with check maxActiveSessions and send session creation
+     * Create new session with check maxActiveSessions and send session creation
      * to other cluster nodes.
      *
      * @param sessionId The session id that should be used for the session
@@ -488,8 +466,9 @@ public class DeltaManager extends ClusterManagerBase{
     }
 
     /**
-     * Create DeltaSession
-     * @see org.apache.catalina.Manager#createEmptySession()
+     * {@inheritDoc}
+     * <p>
+     * Creates new DeltaSession instance.
      */
     @Override
     public Session createEmptySession() {
@@ -504,23 +483,11 @@ public class DeltaManager extends ClusterManagerBase{
         return new DeltaSession(this);
     }
 
-    /**
-     * Change the session ID of the current session to a new randomly generated
-     * session ID.
-     *
-     * @param session   The session to change the session ID for
-     */
     @Override
     public void changeSessionId(Session session) {
         changeSessionId(session, true);
     }
 
-    /**
-     * Change the session ID of the current session to a specified session ID.
-     *
-     * @param session   The session to change the session ID for
-     * @param newId   new session ID
-     */
     @Override
     public void changeSessionId(Session session, String newId) {
         changeSessionId(session, newId, true);
@@ -1168,13 +1135,6 @@ public class DeltaManager extends ClusterManagerBase{
 
     }
 
-    /**
-     * When the manager expires session not tied to a request. The cluster will
-     * periodically ask for a list of sessions that should expire and that
-     * should be sent across the wire.
-     *
-     * @return The invalidated sessions array
-     */
     @Override
     public String[] getInvalidatedSessions() {
         return new String[0];

==================================================
PersistentManager.java
index 19e571908f..589b5f5bf8 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -235,25 +235,12 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
-    /**
-     * Return the distributable flag for the sessions supported by
-     * this Manager.
-     */
     @Override
     public boolean getDistributable() {
-
-        return (this.distributable);
-
+        return this.distributable;
     }
 
 
-    /**
-     * Set the distributable flag for the sessions supported by this
-     * Manager.  If this flag is set, all user data objects added to
-     * sessions associated with this manager must implement Serializable.
-     *
-     * @param distributable The new distributable flag
-     */
     @Override
     public void setDistributable(boolean distributable) {
 
@@ -265,41 +252,22 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
-    /**
-     * Return the default maximum inactive interval (in seconds)
-     * for Sessions created by this Manager.
-     */
     @Override
     public int getMaxInactiveInterval() {
-
-        return (this.maxInactiveInterval);
-
+        return this.maxInactiveInterval;
     }
 
 
-    /**
-     * Set the default maximum inactive interval (in seconds)
-     * for Sessions created by this Manager.
-     *
-     * @param interval The new default value
-     */
     @Override
     public void setMaxInactiveInterval(int interval) {
-
         int oldMaxInactiveInterval = this.maxInactiveInterval;
         this.maxInactiveInterval = interval;
         support.firePropertyChange("maxInactiveInterval",
                                    Integer.valueOf(oldMaxInactiveInterval),
                                    Integer.valueOf(this.maxInactiveInterval));
-
     }
 
 
-    /**
-     * Gets the session id generator.
-     *
-     * @return The session id generator
-     */
     @Override
     public SessionIdGenerator getSessionIdGenerator() {
         if (sessionIdGenerator != null) {
@@ -318,11 +286,6 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
-    /**
-     * Sets the session id generator
-     *
-     * @param sessionIdGenerator The session id generator
-     */
     @Override
     public void setSessionIdGenerator(SessionIdGenerator sessionIdGenerator) {
         this.sessionIdGenerator = sessionIdGenerator;
@@ -403,32 +366,18 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
-    /**
-     * Number of session creations that failed due to maxActiveSessions
-     *
-     * @return The count
-     */
     @Override
     public int getRejectedSessions() {
         return rejectedSessions;
     }
 
-    /**
-     * Gets the number of sessions that have expired.
-     *
-     * @return Number of sessions that have expired
-     */
+
     @Override
     public long getExpiredSessions() {
         return expiredSessions.get();
     }
 
 
-    /**
-     * Sets the number of sessions that have expired.
-     *
-     * @param expiredSessions Number of sessions that have expired
-     */
     @Override
     public void setExpiredSessions(long expiredSessions) {
         this.expiredSessions.set(expiredSessions);
@@ -474,7 +423,9 @@ public abstract class ManagerBase extends LifecycleMBeanBase
 
 
     /**
-     * Implements the Manager interface, direct call to processExpires
+     * {@inheritDoc}
+     * <p>
+     * Direct call to {@link #processExpires()}
      */
     @Override
     public void backgroundProcess() {
@@ -561,14 +512,8 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
-    /**
-     * Add this Session to the set of active Sessions for this Manager.
-     *
-     * @param session Session to be added
-     */
     @Override
     public void add(Session session) {
-
         sessions.put(session.getIdInternal(), session);
         int size = getActiveSessions();
         if( size > maxActive ) {
@@ -581,32 +526,12 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
-    /**
-     * Add a property change listener to this component.
-     *
-     * @param listener The listener to add
-     */
     @Override
     public void addPropertyChangeListener(PropertyChangeListener listener) {
-
         support.addPropertyChangeListener(listener);
-
     }
 
 
-    /**
-     * Construct and return a new session object, based on the default
-     * settings specified by this Manager's properties.  The session
-     * id specified will be used as the session id.
-     * If a new session cannot be created for any reason, return
-     * <code>null</code>.
-     *
-     * @param sessionId The session id which should be used to create the
-     *  new session; if <code>null</code>, a new session id will be
-     *  generated
-     * @exception IllegalStateException if a new session cannot be
-     *  instantiated for any reason
-     */
     @Override
     public Session createSession(String sessionId) {
 
@@ -643,69 +568,35 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
-    /**
-     * Get a session from the recycled ones or create a new empty one.
-     * The PersistentManager manager does not need to create session data
-     * because it reads it from the Store.
-     */
     @Override
     public Session createEmptySession() {
         return (getNewSession());
     }
 
 
-    /**
-     * Return the active Session, associated with this Manager, with the
-     * specified session id (if any); otherwise return <code>null</code>.
-     *
-     * @param id The session id for the session to be returned
-     *
-     * @exception IllegalStateException if a new session cannot be
-     *  instantiated for any reason
-     * @exception IOException if an input/output error occurs while
-     *  processing this request
-     */
     @Override
     public Session findSession(String id) throws IOException {
-
-        if (id == null)
-            return (null);
+        if (id == null) {
+            return null;
+        }
         return sessions.get(id);
-
     }
 
 
-    /**
-     * Return the set of active Sessions associated with this Manager.
-     * If this Manager has no active Sessions, a zero-length array is returned.
-     */
     @Override
     public Session[] findSessions() {
-
         return sessions.values().toArray(new Session[0]);
-
     }
 
 
-    /**
-     * Remove this Session from the active Sessions for this Manager.
-     *
-     * @param session Session to be removed
-     */
     @Override
     public void remove(Session session) {
         remove(session, false);
     }
 
-    /**
-     * Remove this Session from the active Sessions for this Manager.
-     *
-     * @param session   Session to be removed
-     * @param update    Should the expiration statistics be updated
-     */
+
     @Override
     public void remove(Session session, boolean update) {
-
         // If the session has expired - as opposed to just being removed from
         // the manager because it is being persisted - update the expired stats
         if (update) {
@@ -727,42 +618,25 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
-    /**
-     * Remove a property change listener from this component.
-     *
-     * @param listener The listener to remove
-     */
     @Override
     public void removePropertyChangeListener(PropertyChangeListener listener) {
-
         support.removePropertyChangeListener(listener);
-
     }
 
 
-    /**
-     * Change the session ID of the current session to a new randomly generated
-     * session ID.
-     *
-     * @param session   The session to change the session ID for
-     */
     @Override
     public void changeSessionId(Session session) {
         String newId = generateSessionId();
         changeSessionId(session, newId, true, true);
     }
 
-    /**
-     * Change the session ID of the current session to a specified session ID.
-     *
-     * @param session   The session to change the session ID for
-     * @param newId   new session ID
-     */
+
     @Override
     public void changeSessionId(Session session, String newId) {
         changeSessionId(session, newId, true, true);
     }
 
+
     protected void changeSessionId(Session session, String newId,
             boolean notifySessionListeners, boolean notifyContainerListeners) {
         String oldId = session.getIdInternal();
@@ -857,11 +731,6 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
-    /**
-     * Total sessions created by this manager.
-     *
-     * @return sessions created
-     */
     @Override
     public long getSessionCounter() {
         return sessionCounter;
@@ -884,22 +753,12 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
-    /**
-     * Returns the number of active sessions
-     *
-     * @return number of sessions active
-     */
     @Override
     public int getActiveSessions() {
         return sessions.size();
     }
 
 
-    /**
-     * Max number of concurrent active sessions
-     *
-     * @return The highest number of concurrent active sessions
-     */
     @Override
     public int getMaxActive() {
         return maxActive;
@@ -942,26 +801,12 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
-    /**
-     * Gets the longest time (in seconds) that an expired session had been
-     * alive.
-     *
-     * @return Longest time (in seconds) that an expired session had been
-     * alive.
-     */
     @Override
     public int getSessionMaxAliveTime() {
         return sessionMaxAliveTime;
     }
 
 
-    /**
-     * Sets the longest time (in seconds) that an expired session had been
-     * alive. Typically used for resetting the current value.
-     *
-     * @param sessionMaxAliveTime Longest time (in seconds) that an expired
-     * session had been alive.
-     */
     @Override
     public void setSessionMaxAliveTime(int sessionMaxAliveTime) {
         synchronized (sessionMaxAliveTimeUpdateLock) {
@@ -988,12 +833,10 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
     /**
-     * Gets the average time (in seconds) that expired sessions had been
-     * alive based on the last 100 sessions to expire. If less than
-     * 100 sessions have expired then all available data is used.
-     *
-     * @return Average time (in seconds) that expired sessions had been
-     * alive.
+     * {@inheritDoc}
+     * <p>
+     * Based on the last 100 sessions to expire. If less than 100 sessions have
+     * expired then all available data is used.
      */
     @Override
     public int getSessionAverageAliveTime() {
@@ -1024,11 +867,9 @@ public abstract class ManagerBase extends LifecycleMBeanBase
 
 
     /**
-     * Gets the current rate of session creation (in session per minute) based
-     * on the creation time of the previous 100 sessions created. If less than
-     * 100 sessions have been created then all available data is used.
-     *
-     * @return  The current rate (in sessions per minute) of session creation
+     * {@inheritDoc}<p>
+     * Based on the creation time of the previous 100 sessions created. If less
+     * than 100 sessions have been created then all available data is used.
      */
     @Override
     public int getSessionCreateRate() {
@@ -1067,9 +908,10 @@ public abstract class ManagerBase extends LifecycleMBeanBase
 
 
     /**
-     * Gets the current rate of session expiration (in session per minute) based
-     * on the expiry time of the previous 100 sessions expired. If less than
-     * 100 sessions have expired then all available data is used.
+     * {@inheritDoc}
+     * <p>
+     * Based on the expiry time of the previous 100 sessions expired. If less
+     * than 100 sessions have expired then all available data is used.
      *
      * @return  The current rate (in sessions per minute) of session expiration
      */
@@ -1245,9 +1087,6 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
-    /**
-     * Return a String rendering of this object.
-     */
     @Override
     public String toString() {
         StringBuilder sb = new StringBuilder(this.getClass().getName());
@@ -1286,14 +1125,9 @@ public abstract class ManagerBase extends LifecycleMBeanBase
         return context.getDomain();
     }
 
+
     // ----------------------------------------- PropertyChangeListener Methods
 
-    /**
-     * Process property change events from our associated Context.
-     *
-     * @param event
-     *            The property change event that has occurred
-     */
     @Override
     public void propertyChange(PropertyChangeEvent event) {
 
@@ -1313,6 +1147,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
         }
     }
 
+
     // ----------------------------------------------------------- Inner classes
 
     protected static final class SessionTiming {

==================================================
PersistentManagerBase.java
index 47b35d173e..09f9a43424 100644
--- a/java/org/apache/catalina/session/PersistentManager.java
+++ b/java/org/apache/catalina/session/PersistentManager.java
@@ -14,8 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-
 package org.apache.catalina.session;
 
 /**
@@ -40,17 +38,14 @@ public final class PersistentManager extends PersistentManagerBase {
     /**
      * The descriptive name of this Manager implementation (for logging).
      */
-    static final String name = "PersistentManager";
+    private static final String name = "PersistentManager";
 
 
     // ------------------------------------------------------------- Properties
 
-    /**
-     * Return the descriptive short name of this Manager implementation.
-     */
     @Override
     public String getName() {
-        return (name);
+        return name;
     }
  }
 

==================================================
StandardManager.java
index 50ea73a4a1..cf84068f53 100644
--- a/java/org/apache/catalina/session/PersistentManagerBase.java
+++ b/java/org/apache/catalina/session/PersistentManagerBase.java
@@ -312,14 +312,9 @@ public abstract class PersistentManagerBase extends ManagerBase
     }
 
 
-    /**
-     * @return the descriptive short name of this Manager implementation.
-     */
     @Override
     public String getName() {
-
         return name;
-
     }
 
 
@@ -332,7 +327,6 @@ public abstract class PersistentManagerBase extends ManagerBase
     public void setStore(Store store) {
         this.store = store;
         store.setManager(this);
-
     }
 
 
@@ -342,9 +336,7 @@ public abstract class PersistentManagerBase extends ManagerBase
      */
     @Override
     public Store getStore() {
-
         return this.store;
-
     }
 
 
@@ -416,8 +408,9 @@ public abstract class PersistentManagerBase extends ManagerBase
 
 
     /**
-     * Implements the {@link org.apache.catalina.Manager Manager} interface,
-     * direct call to processExpires and processPersistenceChecks
+     * {@inheritDoc}
+     * <p>
+     * Direct call to processExpires and processPersistenceChecks
      */
     @Override
     public void processExpires() {
@@ -460,17 +453,10 @@ public abstract class PersistentManagerBase extends ManagerBase
 
 
     /**
-     * Return the active Session, associated with this Manager, with the
-     * specified session id (if any); otherwise return <code>null</code>.
+     * {@inheritDoc}
+     * <p>
      * This method checks the persistence store if persistence is enabled,
      * otherwise just uses the functionality from ManagerBase.
-     *
-     * @param id The session id for the session to be returned
-     *
-     * @exception IllegalStateException if a new session cannot be
-     *  instantiated for any reason
-     * @exception IOException if an input/output error occurs while
-     *  processing this request
      */
     @Override
     public Session findSession(String id) throws IOException {
@@ -499,7 +485,6 @@ public abstract class PersistentManagerBase extends ManagerBase
         // See if the Session is in the Store
         session = swapIn(id);
         return session;
-
     }
 
     /**
@@ -570,10 +555,9 @@ public abstract class PersistentManagerBase extends ManagerBase
 
 
     /**
-     * Remove this Session from the active Sessions for this Manager,
-     * and from the Store.
-     *
-     * @param session Session to be removed
+     * {@inheritDoc}
+     * <p>
+     * Remove this Session from the Store.
      */
     @Override
     public void remove(Session session, boolean update) {

==================================================
