fcc7bfa4e48eacb6ae46560806720a083ba580c8
==================================================
Code clean-up and a little preparatory re-factoring prior to large async changes
==================================================
Mark Emlyn
==================================================
Tue Sep 14 11:43:22 2010 +0000
==================================================
CoyoteAdapter.java
Code clean-up and a little preparatory re-factoring prior to large async changes

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@996850 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Request.java
index 5627d8cafd..15409203e8 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -138,6 +138,7 @@ public class CoyoteAdapter implements Adapter {
      * 
      * @return false to indicate an error, expected or not
      */
+    @Override
     public boolean event(org.apache.coyote.Request req, 
             org.apache.coyote.Response res, SocketStatus status) {
 
@@ -248,12 +249,15 @@ public class CoyoteAdapter implements Adapter {
         }
     }
     
-    public boolean asyncDispatch(org.apache.coyote.Request req,org.apache.coyote.Response res, SocketStatus status) throws Exception {
+    @Override
+    public boolean asyncDispatch(org.apache.coyote.Request req,
+            org.apache.coyote.Response res, SocketStatus status) throws Exception {
         Request request = (Request) req.getNote(ADAPTER_NOTES);
         Response response = (Response) res.getNote(ADAPTER_NOTES);
 
         if (request == null) {
-            throw new IllegalStateException("Dispatch may only happen on an existing request.");
+            throw new IllegalStateException(
+                    "Dispatch may only happen on an existing request.");
         }
         boolean comet = false;
         boolean async = false;
@@ -353,6 +357,7 @@ public class CoyoteAdapter implements Adapter {
     /**
      * Service method.
      */
+    @Override
     public void service(org.apache.coyote.Request req, 
                         org.apache.coyote.Response res)
         throws Exception {
@@ -456,6 +461,7 @@ public class CoyoteAdapter implements Adapter {
     }
 
 
+    @Override
     public void log(org.apache.coyote.Request req,
             org.apache.coyote.Response res, long time) {
 

==================================================
RequestFacade.java
index a8949bc274..f891be05ab 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -897,6 +897,7 @@ public class Request
      *
      * @param name Name of the request attribute to return
      */
+    @Override
     public Object getAttribute(String name) {
 
         if (name.equals(Globals.DISPATCHER_TYPE_ATTR)) {
@@ -989,6 +990,7 @@ public class Request
      * Connector implementations may return some, all or none of these
      * attributes and may also support additional attributes.
      */
+    @Override
     public Enumeration<String> getAttributeNames() {
         if (isSecure() && !sslAttributesParsed) {
             getAttribute(Globals.CERTIFICATES_ATTR);
@@ -1000,6 +1002,7 @@ public class Request
     /**
      * Return the character encoding for this Request.
      */
+    @Override
     public String getCharacterEncoding() {
       return coyoteRequest.getCharacterEncoding();
     }
@@ -1008,6 +1011,7 @@ public class Request
     /**
      * Return the content length for this Request.
      */
+    @Override
     public int getContentLength() {
         return coyoteRequest.getContentLength();
     }
@@ -1016,6 +1020,7 @@ public class Request
     /**
      * Return the content type for this Request.
      */
+    @Override
     public String getContentType() {
         return coyoteRequest.getContentType();
     }
@@ -1030,6 +1035,7 @@ public class Request
      *  already been called for this request
      * @exception IOException if an input/output error occurs
      */
+    @Override
     public ServletInputStream getInputStream() throws IOException {
 
         if (usingReader)
@@ -1051,6 +1057,7 @@ public class Request
      * that was encountered.  If the request did not specify a preferred
      * language, the server's default Locale is returned.
      */
+    @Override
     public Locale getLocale() {
 
         if (!localesParsed)
@@ -1070,6 +1077,7 @@ public class Request
      * headers that were encountered.  If the request did not specify a
      * preferred language, the server's default Locale is returned.
      */
+    @Override
     public Enumeration<Locale> getLocales() {
 
         if (!localesParsed)
@@ -1091,6 +1099,7 @@ public class Request
      *
      * @param name Name of the desired request parameter
      */
+    @Override
     public String getParameter(String name) {
 
         if (!parametersParsed)
@@ -1111,6 +1120,7 @@ public class Request
      * @return A <code>Map</code> containing parameter names as keys
      *  and parameter values as map values.
      */
+    @Override
     public Map<String, String[]> getParameterMap() {
 
         if (parameterMap.isLocked())
@@ -1133,6 +1143,7 @@ public class Request
     /**
      * Return the names of all defined request parameters for this request.
      */
+    @Override
     public Enumeration<String> getParameterNames() {
 
         if (!parametersParsed)
@@ -1149,6 +1160,7 @@ public class Request
      *
      * @param name Name of the desired request parameter
      */
+    @Override
     public String[] getParameterValues(String name) {
 
         if (!parametersParsed)
@@ -1162,6 +1174,7 @@ public class Request
     /**
      * Return the protocol and version used to make this Request.
      */
+    @Override
     public String getProtocol() {
         return coyoteRequest.protocol().toString();
     }
@@ -1176,6 +1189,7 @@ public class Request
      *  has already been called for this request
      * @exception IOException if an input/output error occurs
      */
+    @Override
     public BufferedReader getReader() throws IOException {
 
         if (usingInputStream)
@@ -1200,6 +1214,7 @@ public class Request
      * @deprecated As of version 2.1 of the Java Servlet API, use
      *  <code>ServletContext.getRealPath()</code>.
      */
+    @Override
     @Deprecated
     public String getRealPath(String path) {
 
@@ -1221,6 +1236,7 @@ public class Request
     /**
      * Return the remote IP address making this Request.
      */
+    @Override
     public String getRemoteAddr() {
         if (remoteAddr == null) {
             coyoteRequest.action
@@ -1234,6 +1250,7 @@ public class Request
     /**
      * Return the remote host name making this Request.
      */
+    @Override
     public String getRemoteHost() {
         if (remoteHost == null) {
             if (!connector.getEnableLookups()) {
@@ -1251,6 +1268,7 @@ public class Request
      * Returns the Internet Protocol (IP) source port of the client
      * or last proxy that sent the request.
      */    
+    @Override
     public int getRemotePort(){
         if (remotePort == -1) {
             coyoteRequest.action
@@ -1264,6 +1282,7 @@ public class Request
      * Returns the host name of the Internet Protocol (IP) interface on
      * which the request was received.
      */
+    @Override
     public String getLocalName(){
         if (localName == null) {
             coyoteRequest.action
@@ -1277,6 +1296,7 @@ public class Request
      * Returns the Internet Protocol (IP) address of the interface on
      * which the request  was received.
      */       
+    @Override
     public String getLocalAddr(){
         if (localAddr == null) {
             coyoteRequest.action
@@ -1291,6 +1311,7 @@ public class Request
      * Returns the Internet Protocol (IP) port number of the interface
      * on which the request was received.
      */
+    @Override
     public int getLocalPort(){
         if (localPort == -1){
             coyoteRequest.action
@@ -1306,6 +1327,7 @@ public class Request
      *
      * @param path Path of the resource to be wrapped
      */
+    @Override
     public RequestDispatcher getRequestDispatcher(String path) {
 
         if (context == null)
@@ -1348,6 +1370,7 @@ public class Request
     /**
      * Return the scheme used to make this Request.
      */
+    @Override
     public String getScheme() {
         return coyoteRequest.scheme().toString();
     }
@@ -1356,6 +1379,7 @@ public class Request
     /**
      * Return the server name responding to this Request.
      */
+    @Override
     public String getServerName() {
         return coyoteRequest.serverName().toString();
     }
@@ -1364,6 +1388,7 @@ public class Request
     /**
      * Return the server port responding to this Request.
      */
+    @Override
     public int getServerPort() {
         return coyoteRequest.getServerPort();
     }
@@ -1372,6 +1397,7 @@ public class Request
     /**
      * Was this request received on a secure connection?
      */
+    @Override
     public boolean isSecure() {
         return secure;
     }
@@ -1382,6 +1408,7 @@ public class Request
      *
      * @param name Name of the request attribute to remove
      */
+    @Override
     public void removeAttribute(String name) {
         Object value = null;
         boolean found = false;
@@ -1435,6 +1462,7 @@ public class Request
      * @param name Name of the request attribute to set
      * @param value The associated value
      */
+    @Override
     public void setAttribute(String name, Object value) {
 
         // Name cannot be null
@@ -1526,6 +1554,7 @@ public class Request
      *
      * @since Servlet 2.3
      */
+    @Override
     public void setCharacterEncoding(String enc)
         throws UnsupportedEncodingException {
 
@@ -1543,14 +1572,17 @@ public class Request
     }
 
 
+    @Override
     public ServletContext getServletContext() {
         return context.getServletContext();
      }
 
+    @Override
     public AsyncContext startAsync() {
         return startAsync(getRequest(),response.getResponse());
     }
 
+    @Override
     public AsyncContext startAsync(ServletRequest request,
             ServletResponse response) {
         if (!isAsyncSupported()) {
@@ -1563,16 +1595,14 @@ public class Request
             throw new IllegalStateException("Already started.");
         }
         
-        asyncContext.setStarted(getContext());
-        asyncContext.init(request,response);
-        asyncContext.setHasOriginalRequestAndResponse(request==getRequest() &&
-                response==getResponse().getResponse());
-        
+        asyncContext.setStarted(getContext(), request, response,
+                request==getRequest() && response==getResponse().getResponse());
         asyncContext.setTimeout(getConnector().getAsyncTimeout());
         
         return asyncContext;
     }
 
+    @Override
     public boolean isAsyncStarted() {
         if (asyncContext == null) {
             return false;
@@ -1593,6 +1623,7 @@ public class Request
                 asyncContext.getState()==AsyncContextImpl.AsyncState.COMPLETING);
     }
 
+    @Override
     public boolean isAsyncSupported() {
         if (this.asyncSupported == null) { 
             return true;
@@ -1601,10 +1632,12 @@ public class Request
         return asyncSupported.booleanValue();
     }
 
+    @Override
     public AsyncContext getAsyncContext() {
         return this.asyncContext;
     }
 
+    @Override
     public DispatcherType getDispatcherType() {
         if (internalDispatcherType == null) { 
             return DispatcherType.REQUEST;
@@ -1863,6 +1896,7 @@ public class Request
     /**
      * Return the authentication type used for this Request.
      */
+    @Override
     public String getAuthType() {
         return authType;
     }
@@ -1872,6 +1906,7 @@ public class Request
      * Return the portion of the request URI used to select the Context
      * of the Request.
      */
+    @Override
     public String getContextPath() {
         return mappingData.contextPath.toString();
     }
@@ -1890,6 +1925,7 @@ public class Request
     /**
      * Return the set of Cookies received with this Request.
      */
+    @Override
     public Cookie[] getCookies() {
 
         if (!cookiesParsed)
@@ -1919,6 +1955,7 @@ public class Request
      * @exception IllegalArgumentException if the specified header value
      *  cannot be converted to a date
      */
+    @Override
     public long getDateHeader(String name) {
 
         String value = getHeader(name);
@@ -1941,6 +1978,7 @@ public class Request
      *
      * @param name Name of the requested header
      */
+    @Override
     public String getHeader(String name) {
         return coyoteRequest.getHeader(name);
     }
@@ -1952,6 +1990,7 @@ public class Request
      *
      * @param name Name of the requested header
      */
+    @Override
     public Enumeration<String> getHeaders(String name) {
         return coyoteRequest.getMimeHeaders().values(name);
     }
@@ -1960,6 +1999,7 @@ public class Request
     /**
      * Return the names of all headers received with this request.
      */
+    @Override
     public Enumeration<String> getHeaderNames() {
         return coyoteRequest.getMimeHeaders().names();
     }
@@ -1974,6 +2014,7 @@ public class Request
      * @exception IllegalArgumentException if the specified header value
      *  cannot be converted to an integer
      */
+    @Override
     public int getIntHeader(String name) {
 
         String value = getHeader(name);
@@ -1988,6 +2029,7 @@ public class Request
     /**
      * Return the HTTP request method used in this Request.
      */
+    @Override
     public String getMethod() {
         return coyoteRequest.method().toString();
     }
@@ -1996,6 +2038,7 @@ public class Request
     /**
      * Return the path information associated with this Request.
      */
+    @Override
     public String getPathInfo() {
         return mappingData.pathInfo.toString();
     }
@@ -2015,6 +2058,7 @@ public class Request
      * Return the extra path information for this request, translated
      * to a real path.
      */
+    @Override
     public String getPathTranslated() {
 
         if (context == null)
@@ -2031,6 +2075,7 @@ public class Request
     /**
      * Return the query string associated with this request.
      */
+    @Override
     public String getQueryString() {
         return coyoteRequest.queryString().toString();
     }
@@ -2040,6 +2085,7 @@ public class Request
      * Return the name of the remote user that has been authenticated
      * for this Request.
      */
+    @Override
     public String getRemoteUser() {
 
         if (userPrincipal == null) {
@@ -2063,6 +2109,7 @@ public class Request
     /**
      * Return the session identifier included in this request, if any.
      */
+    @Override
     public String getRequestedSessionId() {
         return requestedSessionId;
     }
@@ -2071,6 +2118,7 @@ public class Request
     /**
      * Return the request URI for this request.
      */
+    @Override
     public String getRequestURI() {
         return coyoteRequest.requestURI().toString();
     }
@@ -2092,6 +2140,7 @@ public class Request
      * @return A <code>StringBuffer</code> object containing the
      *  reconstructed URL
      */
+    @Override
     public StringBuffer getRequestURL() {
 
         StringBuffer url = new StringBuffer();
@@ -2118,6 +2167,7 @@ public class Request
      * Return the portion of the request URI used to select the servlet
      * that will process this request.
      */
+    @Override
     public String getServletPath() {
         return (mappingData.wrapperPath.toString());
     }
@@ -2137,6 +2187,7 @@ public class Request
      * Return the session associated with this Request, creating one
      * if necessary.
      */
+    @Override
     public HttpSession getSession() {
         Session session = doGetSession(true);
         if (session == null) {
@@ -2153,6 +2204,7 @@ public class Request
      *
      * @param create Create a new session if one does not exist
      */
+    @Override
     public HttpSession getSession(boolean create) {
         Session session = doGetSession(create);
         if (session == null) {
@@ -2167,6 +2219,7 @@ public class Request
      * Return <code>true</code> if the session identifier included in this
      * request came from a cookie.
      */
+    @Override
     public boolean isRequestedSessionIdFromCookie() {
 
         if (requestedSessionId == null) {
@@ -2181,6 +2234,7 @@ public class Request
      * Return <code>true</code> if the session identifier included in this
      * request came from the request URI.
      */
+    @Override
     public boolean isRequestedSessionIdFromURL() {
 
         if (requestedSessionId == null) {
@@ -2198,6 +2252,7 @@ public class Request
      * @deprecated As of Version 2.1 of the Java Servlet API, use
      *  <code>isRequestedSessionIdFromURL()</code> instead.
      */
+    @Override
     @Deprecated
     public boolean isRequestedSessionIdFromUrl() {
         return (isRequestedSessionIdFromURL());
@@ -2208,6 +2263,7 @@ public class Request
      * Return <code>true</code> if the session identifier included in this
      * request identifies a valid session.
      */
+    @Override
     public boolean isRequestedSessionIdValid() {
 
         if (requestedSessionId == null) {
@@ -2244,6 +2300,7 @@ public class Request
      *
      * @param role Role name to be validated
      */
+    @Override
     public boolean isUserInRole(String role) {
 
         // Have we got an authenticated principal at all?
@@ -2281,6 +2338,7 @@ public class Request
     /**
      * Return the principal that has been authenticated for this Request.
      */
+    @Override
     public Principal getUserPrincipal() {
         if (userPrincipal instanceof GenericPrincipal) {
             return ((GenericPrincipal) userPrincipal).getUserPrincipal();
@@ -2402,6 +2460,7 @@ public class Request
      * @throws ServletException If the caller is responsible for handling the
      *         error and the container has NOT set the HTTP response code etc.
      */
+    @Override
     public boolean authenticate(HttpServletResponse response) 
     throws IOException, ServletException {
         if (response.isCommitted()) {
@@ -2421,6 +2480,7 @@ public class Request
     /**
      * {@inheritDoc}
      */
+    @Override
     public void login(String username, String password)
     throws ServletException {
         if (getAuthType() != null || getRemoteUser() != null ||
@@ -2459,6 +2519,7 @@ public class Request
     /**
      * {@inheritDoc}
      */
+    @Override
     public void logout() throws ServletException {
         context.getAuthenticator().register(this, getResponse(), null,
                 null, null, null);
@@ -2467,6 +2528,7 @@ public class Request
     /**
      * {@inheritDoc}
      */
+    @Override
     public Collection<Part> getParts() throws IOException, IllegalStateException,
             ServletException {
         
@@ -2571,6 +2633,7 @@ public class Request
     /**
      * {@inheritDoc}
      */
+    @Override
     public Part getPart(String name) throws IOException, IllegalStateException,
             ServletException {
         Collection<Part> c = getParts();

==================================================
Response.java
index f99f2e9270..b49d04a596 100644
--- a/java/org/apache/catalina/connector/RequestFacade.java
+++ b/java/org/apache/catalina/connector/RequestFacade.java
@@ -64,6 +64,7 @@ public class RequestFacade implements HttpServletRequest {
     private final class GetAttributePrivilegedAction
             implements PrivilegedAction<Enumeration<String>> {
         
+        @Override
         public Enumeration<String> run() {
             return request.getAttributeNames();
         }            
@@ -73,6 +74,7 @@ public class RequestFacade implements HttpServletRequest {
     private final class GetParameterMapPrivilegedAction
             implements PrivilegedAction<Map<String,String[]>> {
         
+        @Override
         public Map<String,String[]> run() {
             return request.getParameterMap();
         }        
@@ -88,6 +90,7 @@ public class RequestFacade implements HttpServletRequest {
             this.path = path;
         }
         
+        @Override
         public RequestDispatcher run() {   
             return request.getRequestDispatcher(path);
         }           
@@ -103,6 +106,7 @@ public class RequestFacade implements HttpServletRequest {
             this.name = name;
         }
 
+        @Override
         public String run() {       
             return request.getParameter(name);
         }           
@@ -112,6 +116,7 @@ public class RequestFacade implements HttpServletRequest {
     private final class GetParameterNamesPrivilegedAction
             implements PrivilegedAction<Enumeration<String>> {
         
+        @Override
         public Enumeration<String> run() {          
             return request.getParameterNames();
         }           
@@ -127,6 +132,7 @@ public class RequestFacade implements HttpServletRequest {
             this.name = name;
         }
 
+        @Override
         public String[] run() {       
             return request.getParameterValues(name);
         }           
@@ -136,6 +142,7 @@ public class RequestFacade implements HttpServletRequest {
     private final class GetCookiesPrivilegedAction
             implements PrivilegedAction<Cookie[]> {
         
+        @Override
         public Cookie[] run() {       
             return request.getCookies();
         }           
@@ -145,6 +152,7 @@ public class RequestFacade implements HttpServletRequest {
     private final class GetCharacterEncodingPrivilegedAction
             implements PrivilegedAction<String> {
         
+        @Override
         public String run() {       
             return request.getCharacterEncoding();
         }           
@@ -160,6 +168,7 @@ public class RequestFacade implements HttpServletRequest {
             this.name = name;
         }
         
+        @Override
         public Enumeration<String> run() {       
             return request.getHeaders(name);
         }           
@@ -169,6 +178,7 @@ public class RequestFacade implements HttpServletRequest {
     private final class GetHeaderNamesPrivilegedAction
             implements PrivilegedAction<Enumeration<String>> {
 
+        @Override
         public Enumeration<String> run() {       
             return request.getHeaderNames();
         }           
@@ -178,6 +188,7 @@ public class RequestFacade implements HttpServletRequest {
     private final class GetLocalePrivilegedAction
             implements PrivilegedAction<Locale> {
 
+        @Override
         public Locale run() {       
             return request.getLocale();
         }           
@@ -187,6 +198,7 @@ public class RequestFacade implements HttpServletRequest {
     private final class GetLocalesPrivilegedAction
             implements PrivilegedAction<Enumeration<Locale>> {
 
+        @Override
         public Enumeration<Locale> run() {       
             return request.getLocales();
         }           
@@ -201,6 +213,7 @@ public class RequestFacade implements HttpServletRequest {
             this.create = create;
         }
                 
+        @Override
         public HttpSession run() {  
             return request.getSession(create);
         }           
@@ -261,6 +274,7 @@ public class RequestFacade implements HttpServletRequest {
     // ------------------------------------------------- ServletRequest Methods
 
 
+    @Override
     public Object getAttribute(String name) {
 
         if (request == null) {
@@ -272,6 +286,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public Enumeration<String> getAttributeNames() {
 
         if (request == null) {
@@ -288,6 +303,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public String getCharacterEncoding() {
 
         if (request == null) {
@@ -304,6 +320,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public void setCharacterEncoding(String env)
             throws java.io.UnsupportedEncodingException {
 
@@ -316,6 +333,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public int getContentLength() {
 
         if (request == null) {
@@ -327,6 +345,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public String getContentType() {
 
         if (request == null) {
@@ -338,6 +357,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public ServletInputStream getInputStream() throws IOException {
 
         if (request == null) {
@@ -349,6 +369,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public String getParameter(String name) {
 
         if (request == null) {
@@ -365,6 +386,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public Enumeration<String> getParameterNames() {
 
         if (request == null) {
@@ -381,6 +403,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public String[] getParameterValues(String name) {
 
         if (request == null) {
@@ -408,6 +431,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public Map<String,String[]> getParameterMap() {
 
         if (request == null) {
@@ -424,6 +448,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public String getProtocol() {
 
         if (request == null) {
@@ -435,6 +460,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public String getScheme() {
 
         if (request == null) {
@@ -446,6 +472,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public String getServerName() {
 
         if (request == null) {
@@ -457,6 +484,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public int getServerPort() {
 
         if (request == null) {
@@ -468,6 +496,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public BufferedReader getReader() throws IOException {
 
         if (request == null) {
@@ -479,6 +508,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public String getRemoteAddr() {
 
         if (request == null) {
@@ -490,6 +520,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public String getRemoteHost() {
 
         if (request == null) {
@@ -501,6 +532,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public void setAttribute(String name, Object o) {
 
         if (request == null) {
@@ -512,6 +544,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public void removeAttribute(String name) {
 
         if (request == null) {
@@ -523,6 +556,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public Locale getLocale() {
 
         if (request == null) {
@@ -539,6 +573,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public Enumeration<Locale> getLocales() {
 
         if (request == null) {
@@ -555,6 +590,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public boolean isSecure() {
 
         if (request == null) {
@@ -566,6 +602,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public RequestDispatcher getRequestDispatcher(String path) {
 
         if (request == null) {
@@ -581,6 +618,7 @@ public class RequestFacade implements HttpServletRequest {
         }
     }
 
+    @Override
     public String getRealPath(String path) {
 
         if (request == null) {
@@ -592,6 +630,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public String getAuthType() {
 
         if (request == null) {
@@ -603,6 +642,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public Cookie[] getCookies() {
 
         if (request == null) {
@@ -630,6 +670,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public long getDateHeader(String name) {
 
         if (request == null) {
@@ -641,6 +682,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public String getHeader(String name) {
 
         if (request == null) {
@@ -652,6 +694,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public Enumeration<String> getHeaders(String name) {
 
         if (request == null) {
@@ -668,6 +711,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public Enumeration<String> getHeaderNames() {
 
         if (request == null) {
@@ -684,6 +728,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public int getIntHeader(String name) {
 
         if (request == null) {
@@ -695,6 +740,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public String getMethod() {
 
         if (request == null) {
@@ -706,6 +752,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public String getPathInfo() {
 
         if (request == null) {
@@ -717,6 +764,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public String getPathTranslated() {
 
         if (request == null) {
@@ -728,6 +776,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public String getContextPath() {
 
         if (request == null) {
@@ -739,6 +788,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public String getQueryString() {
 
         if (request == null) {
@@ -750,6 +800,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public String getRemoteUser() {
 
         if (request == null) {
@@ -761,6 +812,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public boolean isUserInRole(String role) {
 
         if (request == null) {
@@ -772,6 +824,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public java.security.Principal getUserPrincipal() {
 
         if (request == null) {
@@ -783,6 +836,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public String getRequestedSessionId() {
 
         if (request == null) {
@@ -794,6 +848,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public String getRequestURI() {
 
         if (request == null) {
@@ -805,6 +860,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public StringBuffer getRequestURL() {
 
         if (request == null) {
@@ -816,6 +872,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public String getServletPath() {
 
         if (request == null) {
@@ -827,6 +884,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public HttpSession getSession(boolean create) {
 
         if (request == null) {
@@ -842,6 +900,7 @@ public class RequestFacade implements HttpServletRequest {
         }
     }
 
+    @Override
     public HttpSession getSession() {
 
         if (request == null) {
@@ -853,6 +912,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public boolean isRequestedSessionIdValid() {
 
         if (request == null) {
@@ -864,6 +924,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public boolean isRequestedSessionIdFromCookie() {
 
         if (request == null) {
@@ -875,6 +936,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public boolean isRequestedSessionIdFromURL() {
 
         if (request == null) {
@@ -886,6 +948,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public boolean isRequestedSessionIdFromUrl() {
 
         if (request == null) {
@@ -897,6 +960,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public String getLocalAddr() {
 
         if (request == null) {
@@ -908,6 +972,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public String getLocalName() {
 
         if (request == null) {
@@ -919,6 +984,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public int getLocalPort() {
 
         if (request == null) {
@@ -930,6 +996,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public int getRemotePort() {
 
         if (request == null) {
@@ -941,6 +1008,7 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public ServletContext getServletContext() {
         if (request == null) {
             throw new IllegalStateException(
@@ -951,54 +1019,65 @@ public class RequestFacade implements HttpServletRequest {
     }
 
 
+    @Override
     public AsyncContext startAsync() throws IllegalStateException {
         return request.startAsync();
     }
 
 
+    @Override
     public AsyncContext startAsync(ServletRequest request, ServletResponse response)
     throws IllegalStateException {
         return request.startAsync(request, response);
     }
 
 
+    @Override
     public boolean isAsyncStarted() {
         return request.isAsyncStarted();
     }
 
 
+    @Override
     public boolean isAsyncSupported() {
         return request.isAsyncSupported();
     }
 
     
+    @Override
     public AsyncContext getAsyncContext() {
         return request.getAsyncContext();
     }
 
+    @Override
     public DispatcherType getDispatcherType() {
         return request.getDispatcherType();
     }
     
+    @Override
     public boolean authenticate(HttpServletResponse response)
     throws IOException, ServletException {
         return request.authenticate(response);
     }
 
+    @Override
     public void login(String username, String password)
     throws ServletException {
         request.login(username, password);
     }
     
+    @Override
     public void logout() throws ServletException {
         request.logout();
     }
     
+    @Override
     public Collection<Part> getParts() throws IllegalStateException,
             IOException, ServletException {
         return request.getParts();
     }
     
+    @Override
     public Part getPart(String name) throws IllegalStateException, IOException,
             ServletException {
         return request.getPart(name);

==================================================
ResponseFacade.java
index 1ff0327db3..6b1a7dba06 100644
--- a/java/org/apache/catalina/connector/Response.java
+++ b/java/org/apache/catalina/connector/Response.java
@@ -503,6 +503,7 @@ public class Response
      * Return the content type that was set or calculated for this response,
      * or <code>null</code> if no content type was set.
      */
+    @Override
     public String getContentType() {
         return (coyoteResponse.getContentType());
     }
@@ -541,6 +542,7 @@ public class Response
      *
      * @exception IOException if an input/output error occurs
      */
+    @Override
     public void flushBuffer() 
         throws IOException {
         outputBuffer.flush();
@@ -550,6 +552,7 @@ public class Response
     /**
      * Return the actual buffer size used for this Response.
      */
+    @Override
     public int getBufferSize() {
         return outputBuffer.getBufferSize();
     }
@@ -558,6 +561,7 @@ public class Response
     /**
      * Return the character encoding used for this Response.
      */
+    @Override
     public String getCharacterEncoding() {
         return (coyoteResponse.getCharacterEncoding());
     }
@@ -570,6 +574,7 @@ public class Response
      *  already been called for this response
      * @exception IOException if an input/output error occurs
      */
+    @Override
     public ServletOutputStream getOutputStream() 
         throws IOException {
 
@@ -589,6 +594,7 @@ public class Response
     /**
      * Return the Locale assigned to this response.
      */
+    @Override
     public Locale getLocale() {
         return (coyoteResponse.getLocale());
     }
@@ -601,6 +607,7 @@ public class Response
      *  already been called for this response
      * @exception IOException if an input/output error occurs
      */
+    @Override
     public PrintWriter getWriter() 
         throws IOException {
 
@@ -637,6 +644,7 @@ public class Response
     /**
      * Has the output of this response already been committed?
      */
+    @Override
     public boolean isCommitted() {
         return (coyoteResponse.isCommitted());
     }
@@ -648,6 +656,7 @@ public class Response
      * @exception IllegalStateException if this response has already
      *  been committed
      */
+    @Override
     public void reset() {
 
         if (included)
@@ -667,6 +676,7 @@ public class Response
      * @exception IllegalStateException if the response has already
      *  been committed
      */
+    @Override
     public void resetBuffer() {
         resetBuffer(false);
     }
@@ -708,6 +718,7 @@ public class Response
      * @exception IllegalStateException if this method is called after
      *  output has been committed for this response
      */
+    @Override
     public void setBufferSize(int size) {
 
         if (isCommitted() || !outputBuffer.isNew())
@@ -724,6 +735,7 @@ public class Response
      *
      * @param length The new content length
      */
+    @Override
     public void setContentLength(int length) {
 
         if (isCommitted())
@@ -746,6 +758,7 @@ public class Response
      *
      * @param type The new content type
      */
+    @Override
     @SuppressWarnings("deprecation") // isSpace (deprecated) cannot be replaced by isWhiteSpace
     public void setContentType(String type) {
 
@@ -801,6 +814,7 @@ public class Response
      *
      * @param charset String containing the name of the character encoding.
      */
+    @Override
     public void setCharacterEncoding(String charset) {
 
         if (isCommitted())
@@ -826,6 +840,7 @@ public class Response
      *
      * @param locale The new locale
      */
+    @Override
     public void setLocale(Locale locale) {
 
         if (isCommitted())
@@ -866,6 +881,7 @@ public class Response
      *
      * @param name Header name to look up
      */
+    @Override
     public String getHeader(String name) {
         return coyoteResponse.getMimeHeaders().getHeader(name);
     }
@@ -874,6 +890,7 @@ public class Response
     /**
      * Return an Iterable of all the header names set for this response.
      */
+    @Override
     public Collection<String> getHeaderNames() {
 
         MimeHeaders headers = coyoteResponse.getMimeHeaders();
@@ -893,6 +910,7 @@ public class Response
      *
      * @param name Header name to look up
      */
+    @Override
     public Collection<String> getHeaders(String name) {
 
         Enumeration<String> enumeration =
@@ -917,6 +935,7 @@ public class Response
     /**
      * Return the HTTP status code associated with this Response.
      */
+    @Override
     public int getStatus() {
         return coyoteResponse.getStatus();
     }
@@ -944,6 +963,7 @@ public class Response
      *
      * @param cookie Cookie to be added
      */
+    @Override
     public void addCookie(final Cookie cookie) {
 
         // Ignore any call from an included servlet
@@ -995,6 +1015,7 @@ public class Response
         //from the appendCookieValue invocation
         if (SecurityUtil.isPackageProtectionEnabled()) {
             AccessController.doPrivileged(new PrivilegedAction<Void>() {
+                @Override
                 public Void run(){
                     ServerCookie.appendCookieValue
                         (sb, cookie.getVersion(), cookie.getName(), 
@@ -1022,6 +1043,7 @@ public class Response
      * @param name Name of the header to set
      * @param value Date value to be set
      */
+    @Override
     public void addDateHeader(String name, long value) {
 
         if (name == null || name.length() == 0) {
@@ -1053,6 +1075,7 @@ public class Response
      * @param name Name of the header to set
      * @param value Value to be set
      */
+    @Override
     public void addHeader(String name, String value) {
 
         if (name == null || name.length() == 0 || value == null) {
@@ -1077,6 +1100,7 @@ public class Response
      * @param name Name of the header to set
      * @param value Integer value to be set
      */
+    @Override
     public void addIntHeader(String name, int value) {
 
         if (name == null || name.length() == 0) {
@@ -1100,6 +1124,7 @@ public class Response
      *
      * @param name Name of the header to check
      */
+    @Override
     public boolean containsHeader(String name) {
         // Need special handling for Content-Type and Content-Length due to
         // special handling of these in coyoteResponse
@@ -1125,6 +1150,7 @@ public class Response
      *
      * @param url URL to be encoded
      */
+    @Override
     public String encodeRedirectURL(String url) {
 
         if (isEncodeable(toAbsolute(url))) {
@@ -1145,6 +1171,7 @@ public class Response
      * @deprecated As of Version 2.1 of the Java Servlet API, use
      *  <code>encodeRedirectURL()</code> instead.
      */
+    @Override
     @Deprecated
     public String encodeRedirectUrl(String url) {
         return (encodeRedirectURL(url));
@@ -1157,6 +1184,7 @@ public class Response
      *
      * @param url URL to be encoded
      */
+    @Override
     public String encodeURL(String url) {
         
         String absolute = toAbsolute(url);
@@ -1182,6 +1210,7 @@ public class Response
      * @deprecated As of Version 2.1 of the Java Servlet API, use
      *  <code>encodeURL()</code> instead.
      */
+    @Override
     @Deprecated
     public String encodeUrl(String url) {
         return (encodeURL(url));
@@ -1218,6 +1247,7 @@ public class Response
      *  already been committed
      * @exception IOException if an input/output error occurs
      */
+    @Override
     public void sendError(int status) 
         throws IOException {
         sendError(status, null);
@@ -1234,6 +1264,7 @@ public class Response
      *  already been committed
      * @exception IOException if an input/output error occurs
      */
+    @Override
     public void sendError(int status, String message) 
         throws IOException {
 
@@ -1273,6 +1304,7 @@ public class Response
      *  already been committed
      * @exception IOException if an input/output error occurs
      */
+    @Override
     public void sendRedirect(String location) 
         throws IOException {
 
@@ -1308,6 +1340,7 @@ public class Response
      * @param name Name of the header to set
      * @param value Date value to be set
      */
+    @Override
     public void setDateHeader(String name, long value) {
 
         if (name == null || name.length() == 0) {
@@ -1339,6 +1372,7 @@ public class Response
      * @param name Name of the header to set
      * @param value Value to be set
      */
+    @Override
     public void setHeader(String name, String value) {
 
         if (name == null || name.length() == 0 || value == null) {
@@ -1363,6 +1397,7 @@ public class Response
      * @param name Name of the header to set
      * @param value Integer value to be set
      */
+    @Override
     public void setIntHeader(String name, int value) {
 
         if (name == null || name.length() == 0) {
@@ -1386,6 +1421,7 @@ public class Response
      *
      * @param status The new HTTP status
      */
+    @Override
     public void setStatus(int status) {
         setStatus(status, null);
     }
@@ -1401,6 +1437,7 @@ public class Response
      *  has been deprecated due to the ambiguous meaning of the message
      *  parameter.
      */
+    @Override
     @Deprecated
     public void setStatus(int status, String message) {
 
@@ -1459,6 +1496,7 @@ public class Response
             return (
                 AccessController.doPrivileged(new PrivilegedAction<Boolean>() {
 
+                @Override
                 public Boolean run(){
                     return new Boolean(doIsEncodeable(hreq, session, location));
                 }
@@ -1565,6 +1603,7 @@ public class Response
                         try{
                             encodedURI = AccessController.doPrivileged( 
                                 new PrivilegedExceptionAction<String>(){                                
+                                    @Override
                                     public String run() throws IOException{
                                         return urlEncoder.encodeURL(frelativePath);
                                     }

==================================================
AsyncContextImpl.java
index 723b02a0f3..989ebb358f 100644
--- a/java/org/apache/catalina/connector/ResponseFacade.java
+++ b/java/org/apache/catalina/connector/ResponseFacade.java
@@ -59,6 +59,7 @@ public class ResponseFacade
             this.contentType = contentType;
         }
         
+        @Override
         public Void run() {
             response.setContentType(contentType);
             return null;
@@ -78,6 +79,7 @@ public class ResponseFacade
             this.add = add;
         }
 
+        @Override
         public Void run() {
             if(add) {
                 response.addDateHeader(name, value);
@@ -164,6 +166,7 @@ public class ResponseFacade
     // ------------------------------------------------ ServletResponse Methods
 
 
+    @Override
     public String getCharacterEncoding() {
 
         if (response == null) {
@@ -175,6 +178,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public ServletOutputStream getOutputStream()
         throws IOException {
 
@@ -190,6 +194,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public PrintWriter getWriter()
         throws IOException {
 
@@ -205,6 +210,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public void setContentLength(int len) {
 
         if (isCommitted())
@@ -215,6 +221,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public void setContentType(String type) {
 
         if (isCommitted())
@@ -228,6 +235,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public void setBufferSize(int size) {
 
         if (isCommitted())
@@ -239,6 +247,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public int getBufferSize() {
 
         if (response == null) {
@@ -250,6 +259,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public void flushBuffer()
         throws IOException {
 
@@ -263,6 +273,7 @@ public class ResponseFacade
                 AccessController.doPrivileged(
                         new PrivilegedExceptionAction<Void>(){
 
+                    @Override
                     public Void run() throws IOException{
                         response.setAppCommitted(true);
 
@@ -285,6 +296,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public void resetBuffer() {
 
         if (isCommitted())
@@ -296,6 +308,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public boolean isCommitted() {
 
         if (response == null) {
@@ -307,6 +320,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public void reset() {
 
         if (isCommitted())
@@ -318,6 +332,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public void setLocale(Locale loc) {
 
         if (isCommitted())
@@ -327,6 +342,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public Locale getLocale() {
 
         if (response == null) {
@@ -338,6 +354,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public void addCookie(Cookie cookie) {
 
         if (isCommitted())
@@ -348,6 +365,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public boolean containsHeader(String name) {
 
         if (response == null) {
@@ -359,6 +377,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public String encodeURL(String url) {
 
         if (response == null) {
@@ -370,6 +389,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public String encodeRedirectURL(String url) {
 
         if (response == null) {
@@ -381,6 +401,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public String encodeUrl(String url) {
 
         if (response == null) {
@@ -392,6 +413,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public String encodeRedirectUrl(String url) {
 
         if (response == null) {
@@ -403,6 +425,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public void sendError(int sc, String msg)
         throws IOException {
 
@@ -417,6 +440,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public void sendError(int sc)
         throws IOException {
 
@@ -431,6 +455,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public void sendRedirect(String location)
         throws IOException {
 
@@ -445,6 +470,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public void setDateHeader(String name, long date) {
 
         if (isCommitted())
@@ -460,6 +486,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public void addDateHeader(String name, long date) {
 
         if (isCommitted())
@@ -475,6 +502,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public void setHeader(String name, String value) {
 
         if (isCommitted())
@@ -485,6 +513,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public void addHeader(String name, String value) {
 
         if (isCommitted())
@@ -495,6 +524,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public void setIntHeader(String name, int value) {
 
         if (isCommitted())
@@ -505,6 +535,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public void addIntHeader(String name, int value) {
 
         if (isCommitted())
@@ -515,6 +546,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public void setStatus(int sc) {
 
         if (isCommitted())
@@ -525,6 +557,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public void setStatus(int sc, String sm) {
 
         if (isCommitted())
@@ -534,6 +567,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public String getContentType() {
 
         if (response == null) {
@@ -545,6 +579,7 @@ public class ResponseFacade
     }
 
 
+    @Override
     public void setCharacterEncoding(String arg0) {
 
         if (response == null) {
@@ -555,18 +590,22 @@ public class ResponseFacade
         response.setCharacterEncoding(arg0);
     }
 
+    @Override
     public int getStatus() {
         return response.getStatus();
     }
     
+    @Override
     public String getHeader(String name) {
         return response.getHeader(name);
     }
     
+    @Override
     public Collection<String> getHeaderNames() {
         return response.getHeaderNames();
     }
     
+    @Override
     public Collection<String> getHeaders(String name) {
         return response.getHeaders(name);
     }

==================================================
