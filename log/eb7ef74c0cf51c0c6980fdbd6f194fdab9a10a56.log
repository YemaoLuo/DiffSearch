eb7ef74c0cf51c0c6980fdbd6f194fdab9a10a56
==================================================
Remove MutableInteger that was unused since r1086203 removed the once
==================================================
Mark Emlyn
==================================================
Mon Jan 30 20:46:11 2012 +0000
==================================================
AjpNioProcessor.java
Remove MutableInteger that was unused since r1086203 removed the once
place where it was read.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1237995 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InternalNioOutputBuffer.java
index ff537dddae..efa4072197 100644
--- a/java/org/apache/coyote/ajp/AjpNioProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpNioProcessor.java
@@ -292,8 +292,7 @@ public class AjpNioProcessor extends AbstractAjpProcessor<NioChannel> {
             //ignore
         }
         try {
-            pool.write(writeBuffer, socket, selector, writeTimeout, true,
-                    null);
+            pool.write(writeBuffer, socket, selector, writeTimeout, true);
         }finally {
             if ( selector != null ) pool.put(selector);
         }

==================================================
MutableInteger.java
index 1571db79f3..fcc2045fe9 100644
--- a/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
@@ -24,7 +24,6 @@ import java.nio.channels.Selector;
 
 import org.apache.coyote.OutputBuffer;
 import org.apache.coyote.Response;
-import org.apache.tomcat.util.MutableInteger;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.http.HttpMessages;
 import org.apache.tomcat.util.net.AbstractEndpoint;
@@ -67,11 +66,6 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer<NioChannel> {
     }
 
 
-    /**
-     * Number of bytes last written
-     */
-    private MutableInteger lastWrite = new MutableInteger(1);
-
     /**
      * Underlying socket.
      */
@@ -113,7 +107,6 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer<NioChannel> {
             socket.getBufHandler().getWriteBuffer().clear();
             socket = null;
         }
-        lastWrite.set(1);
     }
 
 
@@ -167,10 +160,10 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer<NioChannel> {
             //ignore
         }
         try {
-            written = pool.write(bytebuffer, socket, selector, writeTimeout, block,lastWrite);
+            written = pool.write(bytebuffer, socket, selector, writeTimeout, block);
             //make sure we are flushed
             do {
-                if (socket.flush(true,selector,writeTimeout,lastWrite)) break;
+                if (socket.flush(true,selector,writeTimeout)) break;
             }while ( true );
         }finally {
             if ( selector != null ) pool.put(selector);

==================================================
NioBlockingSelector.java
deleted file mode 100644
index 17bd96a9d8..0000000000
--- a/java/org/apache/tomcat/util/MutableInteger.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package org.apache.tomcat.util;
-
-public class MutableInteger {
-    protected int value = 0;
-    public MutableInteger() {}
-    public MutableInteger(int val) {
-        this.value = val;
-    }
-
-    public int get() { return value;}
-    public void set(int val) {this.value = val;}
-}

==================================================
NioChannel.java
index ce20b4e9cd..f1af65e1f1 100644
--- a/java/org/apache/tomcat/util/net/NioBlockingSelector.java
+++ b/java/org/apache/tomcat/util/net/NioBlockingSelector.java
@@ -34,7 +34,6 @@ import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.ExceptionUtils;
-import org.apache.tomcat.util.MutableInteger;
 import org.apache.tomcat.util.net.NioEndpoint.KeyAttachment;
 
 public class NioBlockingSelector {
@@ -79,7 +78,8 @@ public class NioBlockingSelector {
      * @throws SocketTimeoutException if the write times out
      * @throws IOException if an IO Exception occurs in the underlying socket logic
      */
-    public int write(ByteBuffer buf, NioChannel socket, long writeTimeout,MutableInteger lastWrite) throws IOException {
+    public int write(ByteBuffer buf, NioChannel socket, long writeTimeout)
+            throws IOException {
         SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector());
         if ( key == null ) throw new IOException("Key no longer registered");
         KeyReference reference = new KeyReference();
@@ -92,7 +92,6 @@ public class NioBlockingSelector {
             while ( (!timedout) && buf.hasRemaining()) {
                 if (keycount > 0) { //only write if we were registered for a write
                     int cnt = socket.write(buf); //write the data
-                    if (lastWrite != null) lastWrite.set(cnt);
                     if (cnt == -1)
                         throw new EOFException();
                     written += cnt;

==================================================
NioSelectorPool.java
index 3b799a0af6..8a184c9bd3 100644
--- a/java/org/apache/tomcat/util/net/NioChannel.java
+++ b/java/org/apache/tomcat/util/net/NioChannel.java
@@ -23,7 +23,6 @@ import java.nio.channels.SelectionKey;
 import java.nio.channels.Selector;
 import java.nio.channels.SocketChannel;
 
-import org.apache.tomcat.util.MutableInteger;
 import org.apache.tomcat.util.net.NioEndpoint.Poller;
 import org.apache.tomcat.util.net.SecureNioChannel.ApplicationBufferHandler;
 
@@ -78,14 +77,12 @@ public class NioChannel implements ByteChannel {
      * @param block     Unused. May be used when overridden
      * @param s         Unused. May be used when overridden
      * @param timeout   Unused. May be used when overridden
-     * @param lastWrite
      * @return Always returns <code>true</code> since there is no network buffer
      *         in the regular channel
      * @throws IOException
      */
-    public boolean flush(boolean block, Selector s, long timeout,
-            MutableInteger lastWrite) throws IOException {
-        if (lastWrite!=null) lastWrite.set(1);
+    public boolean flush(boolean block, Selector s, long timeout)
+            throws IOException {
         return true;
     }
 

==================================================
SecureNioChannel.java
index 69445e8dfe..0e4682200d 100644
--- a/java/org/apache/tomcat/util/net/NioSelectorPool.java
+++ b/java/org/apache/tomcat/util/net/NioSelectorPool.java
@@ -28,7 +28,6 @@ import java.util.concurrent.atomic.AtomicInteger;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.util.MutableInteger;
 
 /**
  *
@@ -166,13 +165,13 @@ public class NioSelectorPool {
      * @throws IOException if an IO Exception occurs in the underlying socket logic
      */
     public int write(ByteBuffer buf, NioChannel socket, Selector selector, long writeTimeout) throws IOException {
-        return write(buf,socket,selector,writeTimeout,true,null);
+        return write(buf,socket,selector,writeTimeout,true);
     }
 
     public int write(ByteBuffer buf, NioChannel socket, Selector selector,
-                     long writeTimeout, boolean block,MutableInteger lastWrite) throws IOException {
+                     long writeTimeout, boolean block) throws IOException {
         if ( SHARED && block ) {
-            return blockingSelector.write(buf,socket,writeTimeout,lastWrite);
+            return blockingSelector.write(buf,socket,writeTimeout);
         }
         SelectionKey key = null;
         int written = 0;
@@ -184,7 +183,6 @@ public class NioSelectorPool {
                 int cnt = 0;
                 if ( keycount > 0 ) { //only write if we were registered for a write
                     cnt = socket.write(buf); //write the data
-                    if (lastWrite!=null) lastWrite.set(cnt);
                     if (cnt == -1) throw new EOFException();
 
                     written += cnt;

==================================================
