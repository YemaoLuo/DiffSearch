e934388558cfccb35a454f3ea6a8bd44f1862840
==================================================
Update the Servlet 4.0 implementation to add support for obtaining trailer fields from chunked HTTP requests.
==================================================
Mark Thomas
==================================================
Tue May 2 18:48:20 2017 +0000
==================================================
HttpServletRequest.java
Update the Servlet 4.0 implementation to add support for obtaining trailer fields from chunked HTTP requests.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1793573 13f79535-47bb-0310-9956-ffa450edef68



==================================================
HttpServletRequestWrapper.java
index e81b1a9610..969550133a 100644
--- a/java/javax/servlet/http/HttpServletRequest.java
+++ b/java/javax/servlet/http/HttpServletRequest.java
@@ -20,6 +20,7 @@ package javax.servlet.http;
 import java.io.IOException;
 import java.util.Collection;
 import java.util.Enumeration;
+import java.util.Map;
 
 import javax.servlet.ServletException;
 import javax.servlet.ServletRequest;
@@ -575,4 +576,13 @@ public interface HttpServletRequest extends ServletRequest {
      */
     public <T extends HttpUpgradeHandler> T upgrade(
             Class<T> httpUpgradeHandlerClass) throws java.io.IOException, ServletException;
+
+    /**
+     * Obtain a Map of the trailer fields that is not backed by the request
+     * object.
+     *
+     * @return A Map of the received trailer fields with all keys lower case
+     *         or an empty Map if no trailers are present
+     */
+    public Map<String,String> getTrailerFields();
 }

==================================================
Request.java
index fdff779ff0..cee90070d4 100644
--- a/java/javax/servlet/http/HttpServletRequestWrapper.java
+++ b/java/javax/servlet/http/HttpServletRequestWrapper.java
@@ -19,6 +19,7 @@ package javax.servlet.http;
 import java.io.IOException;
 import java.util.Collection;
 import java.util.Enumeration;
+import java.util.Map;
 
 import javax.servlet.ServletException;
 import javax.servlet.ServletRequestWrapper;
@@ -396,4 +397,17 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
     public PushBuilder newPushBuilder() {
         return this._getHttpServletRequest().newPushBuilder();
     }
+
+    /**
+     * {@inheritDoc}
+     * <p>
+     * The default behavior of this method is to return
+     * {@link HttpServletRequest#newPushBuilder()} on the wrapped request object.
+     *
+     * @since Servlet 4.0
+     */
+    @Override
+    public Map<String,String> getTrailerFields() {
+        return this._getHttpServletRequest().getTrailerFields();
+    }
 }

==================================================
RequestFacade.java
index 27e7c776a8..77169b279d 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -1930,6 +1930,14 @@ public class Request implements HttpServletRequest {
 
     // --------------------------------------------- HttpServletRequest Methods
 
+    @Override
+    public Map<String, String> getTrailerFields() {
+        Map<String,String> result = new HashMap<>();
+        result.putAll(coyoteRequest.getTrailerFields());
+        return result;
+    }
+
+
     /**
      * {@inheritDoc}
      *

==================================================
Request.java
index 6977949ad8..b9fdc16e03 100644
--- a/java/org/apache/catalina/connector/RequestFacade.java
+++ b/java/org/apache/catalina/connector/RequestFacade.java
@@ -1137,4 +1137,15 @@ public class RequestFacade implements HttpServletRequest {
     public PushBuilder newPushBuilder() {
         return request.newPushBuilder();
     }
+
+
+    /**
+     * {@inheritDoc}
+     *
+     * @since Servlet 4.0
+     */
+    @Override
+    public Map<String, String> getTrailerFields() {
+        return request.getTrailerFields();
+    }
 }

==================================================
ChunkedInputFilter.java
index fdc34e476c..b6c7386f86 100644
--- a/java/org/apache/coyote/Request.java
+++ b/java/org/apache/coyote/Request.java
@@ -96,6 +96,7 @@ public final class Request {
     private final MessageBytes localAddrMB = MessageBytes.newInstance();
 
     private final MimeHeaders headers = new MimeHeaders();
+    private final Map<String,String> trailerFields = new HashMap<>();
 
 
     /**
@@ -193,12 +194,17 @@ public final class Request {
     }
 
 
+    public Map<String,String> getTrailerFields() {
+        return trailerFields;
+    }
+
+
     public UDecoder getURLDecoder() {
         return urlDecoder;
     }
 
-    // -------------------- Request data --------------------
 
+    // -------------------- Request data --------------------
 
     public MessageBytes scheme() {
         return schemeMB;

==================================================
Stream.java
index 9378d00c4f..c806ead457 100644
--- a/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java
@@ -21,6 +21,7 @@ import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.nio.charset.StandardCharsets;
 import java.util.Locale;
+import java.util.Map;
 import java.util.Set;
 
 import org.apache.coyote.InputBuffer;
@@ -29,8 +30,6 @@ import org.apache.coyote.http11.Constants;
 import org.apache.coyote.http11.InputFilter;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.HexUtils;
-import org.apache.tomcat.util.buf.MessageBytes;
-import org.apache.tomcat.util.http.MimeHeaders;
 import org.apache.tomcat.util.net.ApplicationBufferHandler;
 import org.apache.tomcat.util.res.StringManager;
 
@@ -435,7 +434,7 @@ public class ChunkedInputFilter implements InputFilter, ApplicationBufferHandler
 
     private boolean parseHeader() throws IOException {
 
-        MimeHeaders headers = request.getMimeHeaders();
+        Map<String,String> headers = request.getTrailerFields();
 
         byte chr = 0;
 
@@ -579,12 +578,14 @@ public class ChunkedInputFilter implements InputFilter, ApplicationBufferHandler
         String headerName = new String(trailingHeaders.getBytes(), startPos,
                 colonPos - startPos, StandardCharsets.ISO_8859_1);
 
-        if (allowedTrailerHeaders.contains(headerName.toLowerCase(Locale.ENGLISH))) {
-            MessageBytes headerValue = headers.addValue(headerName);
+        headerName = headerName.toLowerCase(Locale.ENGLISH);
 
-            // Set the header value
-            headerValue.setBytes(trailingHeaders.getBytes(), colonPos,
-                    lastSignificantChar - colonPos);
+        if (allowedTrailerHeaders.contains(headerName)) {
+
+            String value = new String(trailingHeaders.getBytes(), colonPos,
+                    lastSignificantChar - colonPos, StandardCharsets.ISO_8859_1);
+
+            headers.put(headerName, value);
         }
 
         return true;

==================================================
TesterHttpServletRequest.java
index 43d69ca264..1cad6c994c 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -345,8 +345,13 @@ class Stream extends AbstractStream implements HeaderEmitter {
                 headerStateErrorMsg = sm.getString("stream.header.unknownPseudoHeader",
                         getConnectionId(), getIdentifier(), name);
             }
-            // Assume other HTTP header
-            coyoteRequest.getMimeHeaders().addValue(name).setString(value);
+
+            if (headerState == HEADER_STATE_TRAILER) {
+                // HTTP/2 headers are already always lower case
+                coyoteRequest.getTrailerFields().put(name, value);
+            } else {
+                coyoteRequest.getMimeHeaders().addValue(name).setString(value);
+            }
         }
         }
     }

==================================================
TestChunkedInputFilter.java
index 7bffd7a16a..e7d002710f 100644
--- a/test/org/apache/catalina/filters/TesterHttpServletRequest.java
+++ b/test/org/apache/catalina/filters/TesterHttpServletRequest.java
@@ -446,4 +446,9 @@ public class TesterHttpServletRequest implements HttpServletRequest {
     public PushBuilder newPushBuilder() {
         throw new RuntimeException("Not implemented");
     }
+
+    @Override
+    public Map<String, String> getTrailerFields() {
+        throw new RuntimeException("Not implemented");
+    }
 }

==================================================
Http2TestBase.java
index 09d9917de8..f90dfa0425 100644
--- a/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java
+++ b/test/org/apache/coyote/http11/filters/TestChunkedInputFilter.java
@@ -105,7 +105,7 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
         Context ctx = tomcat.addContext("", null);
 
         // Configure allowed trailer headers
-        tomcat.getConnector().setProperty("allowedTrailerHeaders", "X-Trailer1,X-Trailer2");
+        tomcat.getConnector().setProperty("allowedTrailerHeaders", "x-trailer1,x-trailer2");
 
         EchoHeaderServlet servlet = new EchoHeaderServlet(expectPass);
         Tomcat.addServlet(ctx, "servlet", servlet);
@@ -478,7 +478,7 @@ public class TestChunkedInputFilter extends TomcatBaseTest {
 
         private void dumpHeader(String headerName, HttpServletRequest req,
                 PrintWriter pw) {
-            String value = req.getHeader(headerName);
+            String value = req.getTrailerFields().get(headerName);
             if (value == null) {
                 value = "null";
             }

==================================================
