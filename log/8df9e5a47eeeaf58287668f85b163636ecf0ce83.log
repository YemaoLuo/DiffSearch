8df9e5a47eeeaf58287668f85b163636ecf0ce83
==================================================
Align ActionCode.ACK
==================================================
Mark Thomas
==================================================
Fri Aug 12 07:45:50 2016 +0000
==================================================
AjpProcessor.java
Align ActionCode.ACK

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1756085 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11Processor.java
index fb4f8010c0..44c4849ec9 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -378,7 +378,7 @@ public class AjpProcessor extends AbstractProcessor {
             break;
         }
         case ACK: {
-            // NO_OP for AJP
+            ack();
             break;
         }
         case CLIENT_FLUSH: {
@@ -1444,6 +1444,11 @@ public class AjpProcessor extends AbstractProcessor {
     }
 
 
+    private void ack() {
+        // NO-OP for AJP
+    }
+
+
     private boolean available() {
         if (endOfStream) {
             return false;

==================================================
StreamProcessor.java
index 7b160aa315..bb5cf1a8a1 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -671,17 +671,7 @@ public class Http11Processor extends AbstractProcessor {
             break;
         }
         case ACK: {
-            // Acknowledge request
-            // Send a 100 status back if it makes sense (response not committed
-            // yet, and client specified an expectation for 100-continue)
-            if (!response.isCommitted() && request.hasExpectation()) {
-                inputBuffer.setSwallowInput(true);
-                try {
-                    outputBuffer.sendAck();
-                } catch (IOException e) {
-                    setErrorState(ErrorState.CLOSE_CONNECTION_NOW, e);
-                }
-            }
+            ack();
             break;
         }
         case CLIENT_FLUSH: {
@@ -1802,6 +1792,21 @@ public class Http11Processor extends AbstractProcessor {
     }
 
 
+    private void ack() {
+        // Acknowledge request
+        // Send a 100 status back if it makes sense (response not committed
+        // yet, and client specified an expectation for 100-continue)
+        if (!response.isCommitted() && request.hasExpectation()) {
+            inputBuffer.setSwallowInput(true);
+            try {
+                outputBuffer.sendAck();
+            } catch (IOException e) {
+                setErrorState(ErrorState.CLOSE_CONNECTION_NOW, e);
+            }
+        }
+    }
+
+
     /**
      * Checks to see if the keep-alive loop should be broken, performing any
      * processing (e.g. sendfile handling) that may have an impact on whether

==================================================
