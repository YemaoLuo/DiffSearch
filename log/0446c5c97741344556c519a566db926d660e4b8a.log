0446c5c97741344556c519a566db926d660e4b8a
==================================================
Add the default internal rewrite maps
==================================================
remm remm@apache.org
==================================================
Wed May 20 13:22:40 2020 +0200
==================================================
InternalRewriteMap.java
Add the default internal rewrite maps

After looking at the httpd docs, integrate more parts of PR #221 with
some additions.


==================================================
RewriteValve.java
new file mode 100644
index 0000000000..b556e4cf3b
--- /dev/null
+++ b/java/org/apache/catalina/valves/rewrite/InternalRewriteMap.java
@@ -0,0 +1,122 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.valves.rewrite;
+
+import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
+import java.util.Locale;
+
+import org.apache.catalina.util.URLEncoder;
+import org.apache.tomcat.util.buf.UDecoder;
+
+public class InternalRewriteMap {
+
+    public static RewriteMap toMap(String name) {
+        if ("toupper".equals(name)) {
+            return new UpperCase();
+        } else if ("tolower".equals(name)) {
+            return new LowerCase();
+        } else if ("escape".equals(name)) {
+            return new Escape();
+        } else if ("unescape".equals(name)) {
+            return new Unescape();
+        } else {
+            return null;
+        }
+    }
+
+    public static class LowerCase implements RewriteMap {
+
+        private Locale locale = Locale.getDefault();
+
+        @Override
+        public String setParameters(String params) {
+            this.locale = Locale.forLanguageTag(params);
+            return null;
+        }
+
+        @Override
+        public String lookup(String key) {
+            if (key != null) {
+                return key.toLowerCase(locale);
+            }
+            return null;
+        }
+
+    }
+
+    public static class UpperCase implements RewriteMap {
+
+        private Locale locale = Locale.getDefault();
+
+        @Override
+        public String setParameters(String params) {
+            this.locale = Locale.forLanguageTag(params);
+            return null;
+        }
+
+        @Override
+        public String lookup(String key) {
+            if (key != null) {
+                return key.toUpperCase(locale);
+            }
+            return null;
+        }
+
+    }
+
+    public static class Escape implements RewriteMap {
+
+        private Charset charset = StandardCharsets.UTF_8;
+
+        @Override
+        public String setParameters(String params) {
+            this.charset = Charset.forName(params);
+            return null;
+        }
+
+        @Override
+        public String lookup(String key) {
+            if (key != null) {
+                return URLEncoder.DEFAULT.encode(key, charset);
+            }
+            return null;
+        }
+
+    }
+
+    public static class Unescape implements RewriteMap {
+
+        private Charset charset = StandardCharsets.UTF_8;
+
+        @Override
+        public String setParameters(String params) {
+            this.charset = Charset.forName(params);
+            return null;
+        }
+
+        @Override
+        public String lookup(String key) {
+            if (key != null) {
+                return UDecoder.URLDecode(key, charset);
+            }
+            return null;
+        }
+
+    }
+
+}

==================================================
TestRewriteValve.java
index d2c40a69e9..98ba57a235 100644
--- a/java/org/apache/catalina/valves/rewrite/RewriteValve.java
+++ b/java/org/apache/catalina/valves/rewrite/RewriteValve.java
@@ -617,17 +617,25 @@ public class RewriteValve extends ValveBase {
                 return rule;
             } else if (token.equals("RewriteMap")) {
                 // RewriteMap name rewriteMapClassName whateverOptionalParameterInWhateverFormat
+                // FIXME: Possibly implement more special maps from https://httpd.apache.org/docs/2.4/rewrite/rewritemap.html
                 if (tokenizer.countTokens() < 2) {
                     throw new IllegalArgumentException(sm.getString("rewriteValve.invalidLine", line));
                 }
                 String name = tokenizer.nextToken();
                 String rewriteMapClassName = tokenizer.nextToken();
                 RewriteMap map = null;
-                try {
-                    map = (RewriteMap) (Class.forName(
-                            rewriteMapClassName).getConstructor().newInstance());
-                } catch (Exception e) {
-                    throw new IllegalArgumentException(sm.getString("rewriteValve.invalidMapClassName", line));
+                if (rewriteMapClassName.startsWith("int:")) {
+                    map = InternalRewriteMap.toMap(rewriteMapClassName.substring("int:".length()));
+                } else if (rewriteMapClassName.startsWith("prg:")) {
+                    rewriteMapClassName = rewriteMapClassName.substring("prg:".length());
+                }
+                if (map == null) {
+                    try {
+                        map = (RewriteMap) (Class.forName(
+                                rewriteMapClassName).getConstructor().newInstance());
+                    } catch (Exception e) {
+                        throw new IllegalArgumentException(sm.getString("rewriteValve.invalidMapClassName", line));
+                    }
                 }
                 if (tokenizer.hasMoreTokens()) {
                     if (tokenizer.countTokens() == 1) {

==================================================
