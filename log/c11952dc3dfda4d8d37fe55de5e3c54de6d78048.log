c11952dc3dfda4d8d37fe55de5e3c54de6d78048
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54552
==================================================
Mark Emlyn
==================================================
Wed Feb 13 09:28:58 2013 +0000
==================================================
HttpServletRequest.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54552
Servlet 3.1
Implement HttpSessionIdListener and HttpServletRequest#changeSessionId()
Patch provided by Nick Williams. 

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1445517 13f79535-47bb-0310-9956-ffa450edef68



==================================================
HttpServletRequestWrapper.java
index 7c0947ab63..bb541e2292 100644
--- a/java/javax/servlet/http/HttpServletRequest.java
+++ b/java/javax/servlet/http/HttpServletRequest.java
@@ -382,6 +382,17 @@ public interface HttpServletRequest extends ServletRequest {
      */
     public HttpSession getSession();
 
+    /**
+     * Changes the session ID of the session associated with this request. This
+     * method does not create a new session object it only changes the ID of the
+     * current session.
+     *
+     * @return the new session ID allocated to the session
+     * @see HttpSessionIdListener
+     * @since Servlet 3.1
+     */
+    public String changeSessionId();
+
     /**
      * Checks whether the requested session ID is still valid.
      *

==================================================
HttpSessionIdListener.java
index 3de21426e1..9abc33bd32 100644
--- a/java/javax/servlet/http/HttpServletRequestWrapper.java
+++ b/java/javax/servlet/http/HttpServletRequestWrapper.java
@@ -238,6 +238,15 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
         return this._getHttpServletRequest().getSession();
     }
 
+    /**
+     * The default behavior of this method is to call changeSessionId() on the
+     * wrapped request object.
+     */
+    @Override
+    public String changeSessionId() {
+        return this._getHttpServletRequest().changeSessionId();
+    }
+
     /**
      * The default behavior of this method is to return
      * isRequestedSessionIdValid() on the wrapped request object.

==================================================
Request.java
index 62de099fb5..debbbcf7b4 100644
--- a/java/org/apache/catalina/connector/LocalStrings.properties
+++ b/java/org/apache/catalina/connector/LocalStrings.properties
@@ -52,6 +52,7 @@ coyoteResponse.setBufferSize.ise=Cannot change buffer size after data has been w
 coyoteRequest.getInputStream.ise=getReader() has already been called for this request
 coyoteRequest.getReader.ise=getInputStream() has already been called for this request
 coyoteRequest.sessionCreateCommitted=Cannot create a session after the response has been committed
+coyoteRequest.changeSessionId=Cannot change session ID. There is no session associated with this request.
 coyoteRequest.setAttribute.namenull=Cannot call setAttribute with a null name
 coyoteRequest.attributeEvent=Exception thrown by attributes event listener
 coyoteRequest.parseParameters=Exception thrown whilst processing POSTed parameters

==================================================
RequestFacade.java
index 4bcf6ecc84..800081cd2d 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -2362,6 +2362,30 @@ public class Request
         }
     }
 
+    /**
+     * Changes the session ID of the session associated with this request.
+     *
+     * @return the old session ID before it was changed
+     * @see javax.servlet.http.HttpSessionIdListener
+     * @since Servlet 3.1
+     */
+    @Override
+    public String changeSessionId() {
+
+        Session session = this.getSessionInternal(false);
+        if (session == null) {
+            throw new IllegalStateException(
+                sm.getString("coyoteRequest.changeSessionId"));
+        }
+
+        Manager manager = this.getContext().getManager();
+        manager.changeSessionId(session);
+
+        String newSessionId = session.getId();
+        this.changeSessionId(newSessionId);
+
+        return newSessionId;
+    }
 
     /**
      * Return the session associated with this Request, creating one

==================================================
ApplicationContext.java
index 5692befed5..2695d41c34 100644
--- a/java/org/apache/catalina/connector/RequestFacade.java
+++ b/java/org/apache/catalina/connector/RequestFacade.java
@@ -910,6 +910,16 @@ public class RequestFacade implements HttpServletRequest {
         return getSession(true);
     }
 
+    @Override
+    public String changeSessionId() {
+
+        if (request == null) {
+            throw new IllegalStateException(
+                            sm.getString("requestFacade.nullRequest"));
+        }
+
+        return request.changeSessionId();
+    }
 
     @Override
     public boolean isRequestedSessionIdValid() {

==================================================
StandardContext.java
index af0d478799..382ed21460 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -50,6 +50,7 @@ import javax.servlet.SessionCookieConfig;
 import javax.servlet.SessionTrackingMode;
 import javax.servlet.descriptor.JspConfigDescriptor;
 import javax.servlet.http.HttpSessionAttributeListener;
+import javax.servlet.http.HttpSessionIdListener;
 import javax.servlet.http.HttpSessionListener;
 
 import org.apache.catalina.Container;
@@ -1282,6 +1283,7 @@ public class ApplicationContext
         if (t instanceof ServletContextAttributeListener ||
                 t instanceof ServletRequestListener ||
                 t instanceof ServletRequestAttributeListener ||
+                t instanceof HttpSessionIdListener ||
                 t instanceof HttpSessionAttributeListener) {
             context.addApplicationEventListener(t);
             match = true;
@@ -1319,6 +1321,7 @@ public class ApplicationContext
                     listener instanceof ServletRequestListener ||
                     listener instanceof ServletRequestAttributeListener ||
                     listener instanceof HttpSessionListener ||
+                    listener instanceof HttpSessionIdListener ||
                     listener instanceof HttpSessionAttributeListener) {
                 return listener;
             }

==================================================
DeltaManager.java
index 64338948a9..1a0c6cb99c 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -65,6 +65,7 @@ import javax.servlet.ServletRequestListener;
 import javax.servlet.ServletSecurityElement;
 import javax.servlet.descriptor.JspConfigDescriptor;
 import javax.servlet.http.HttpSessionAttributeListener;
+import javax.servlet.http.HttpSessionIdListener;
 import javax.servlet.http.HttpSessionListener;
 
 import org.apache.catalina.Authenticator;
@@ -4632,6 +4633,7 @@ public class StandardContext extends ContainerBase
             if ((results[i] instanceof ServletContextAttributeListener)
                 || (results[i] instanceof ServletRequestAttributeListener)
                 || (results[i] instanceof ServletRequestListener)
+                || (results[i] instanceof HttpSessionIdListener)
                 || (results[i] instanceof HttpSessionAttributeListener)) {
                 eventListeners.add(results[i]);
             }

==================================================
ManagerBase.java
index ef947d4073..6fc91ae519 100644
--- a/java/org/apache/catalina/ha/session/DeltaManager.java
+++ b/java/org/apache/catalina/ha/session/DeltaManager.java
@@ -26,6 +26,9 @@ import java.util.ArrayList;
 import java.util.Date;
 import java.util.Iterator;
 
+import javax.servlet.http.HttpSessionEvent;
+import javax.servlet.http.HttpSessionIdListener;
+
 import org.apache.catalina.Cluster;
 import org.apache.catalina.Container;
 import org.apache.catalina.Context;
@@ -1471,6 +1474,30 @@ public class DeltaManager extends ClusterManagerBase{
                 getContext().fireContainerEvent(Context.CHANGE_SESSION_ID_EVENT,
                         new String[] {msg.getSessionID(), newSessionID});
             }
+
+            if (notifySessionListenersOnReplication) {
+                Object listeners[] = getContext().
+                    getApplicationEventListeners();
+                if (listeners != null && listeners.length > 0) {
+                    HttpSessionEvent event =
+                        new HttpSessionEvent(session.getSession());
+
+                    for(Object listener : listeners) {
+                        if (!(listener instanceof HttpSessionIdListener))
+                            continue;
+
+                        HttpSessionIdListener idListener =
+                            (HttpSessionIdListener)listener;
+                        try {
+                            idListener.
+                                sessionIdChanged(event, msg.getSessionID());
+                        } catch (Throwable t) {
+                            log.error(sm.getString(
+                                "standardSession.sessionEvent"), t);
+                        }
+                    }
+                }
+            }
         }
     }
 

==================================================
WsHttpServletRequestWrapper.java
index 27beeb3178..1126334add 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -33,6 +33,9 @@ import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicLong;
 
+import javax.servlet.http.HttpSessionEvent;
+import javax.servlet.http.HttpSessionIdListener;
+
 import org.apache.catalina.Container;
 import org.apache.catalina.Context;
 import org.apache.catalina.Engine;
@@ -762,6 +765,25 @@ public abstract class ManagerBase extends LifecycleMBeanBase
         String newId = session.getIdInternal();
         context.fireContainerEvent(Context.CHANGE_SESSION_ID_EVENT,
                 new String[] {oldId, newId});
+
+        Object listeners[] = context.getApplicationEventListeners();
+        if (listeners != null && listeners.length > 0) {
+            HttpSessionEvent event =
+                new HttpSessionEvent(session.getSession());
+
+            for(Object listener : listeners) {
+                if (!(listener instanceof HttpSessionIdListener))
+                    continue;
+
+                HttpSessionIdListener idListener =
+                    (HttpSessionIdListener)listener;
+                try {
+                    idListener.sessionIdChanged(event, oldId);
+                } catch (Throwable t) {
+                    log.error(sm.getString("standardSession.sessionEvent"), t);
+                }
+            }
+        }
     }
 
 

==================================================
