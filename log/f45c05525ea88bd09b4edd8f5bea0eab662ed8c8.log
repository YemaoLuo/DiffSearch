f45c05525ea88bd09b4edd8f5bea0eab662ed8c8
==================================================
Refactor to use a serializable session listener to do the removal from
==================================================
Mark Thomas
==================================================
Fri Dec 19 13:56:00 2014 +0000
==================================================
ClusterSingleSignOn.java
Refactor to use a serializable session listener to do the removal from
the SSO cache when the session expires.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1646722 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ClusterSingleSignOnListener.java
index 7038e372c4..e7e1f42100 100644
--- a/java/org/apache/catalina/ha/authenticator/ClusterSingleSignOn.java
+++ b/java/org/apache/catalina/ha/authenticator/ClusterSingleSignOn.java
@@ -22,6 +22,7 @@ import org.apache.catalina.Container;
 import org.apache.catalina.Host;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.Session;
+import org.apache.catalina.SessionListener;
 import org.apache.catalina.authenticator.SingleSignOn;
 import org.apache.catalina.authenticator.SingleSignOnEntry;
 import org.apache.catalina.ha.CatalinaCluster;
@@ -113,6 +114,11 @@ public class ClusterSingleSignOn extends SingleSignOn implements ClusterValve, M
         return result;
     }
 
+    @Override
+    protected SessionListener getSessionListener(String ssoId) {
+        return new ClusterSingleSignOnListener(ssoId);
+    }
+
 
     // -------------------------------------------------------- MapOwner Methods
 

==================================================
DeltaRequest.java
new file mode 100644
index 0000000000..e62e6493bd
--- /dev/null
+++ b/java/org/apache/catalina/ha/authenticator/ClusterSingleSignOnListener.java
@@ -0,0 +1,35 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.ha.authenticator;
+
+import org.apache.catalina.authenticator.SingleSignOnListener;
+import org.apache.catalina.ha.session.ReplicatedSessionListener;
+
+/**
+ * Cluster extension of {@link SingleSignOnListener} that simply adds the marker
+ * interface {@link ReplicatedSessionListener} which allows the listener to be
+ * replicated across the cluster along with the session.
+ */
+public class ClusterSingleSignOnListener extends SingleSignOnListener implements
+        ReplicatedSessionListener {
+
+    private static final long serialVersionUID = 1L;
+
+    public ClusterSingleSignOnListener(String ssoId) {
+        super(ssoId);
+    }
+}

==================================================
DeltaSession.java
index 0f3208e65c..1ccd999e54 100644
--- a/java/org/apache/catalina/ha/session/DeltaRequest.java
+++ b/java/org/apache/catalina/ha/session/DeltaRequest.java
@@ -31,6 +31,7 @@ import java.io.ObjectOutputStream;
 import java.security.Principal;
 import java.util.LinkedList;
 
+import org.apache.catalina.SessionListener;
 import org.apache.catalina.realm.GenericPrincipal;
 import org.apache.tomcat.util.res.StringManager;
 
@@ -51,6 +52,7 @@ public class DeltaRequest implements Externalizable {
     public static final int TYPE_ISNEW = 2;
     public static final int TYPE_MAXINTERVAL = 3;
     public static final int TYPE_AUTHTYPE = 4;
+    public static final int TYPE_LISTENER = 5;
 
     public static final int ACTION_SET = 0;
     public static final int ACTION_REMOVE = 1;
@@ -59,6 +61,7 @@ public class DeltaRequest implements Externalizable {
     public static final String NAME_MAXINTERVAL = "__SET__MAXINTERVAL__";
     public static final String NAME_ISNEW = "__SET__ISNEW__";
     public static final String NAME_AUTHTYPE = "__SET__AUTHTYPE__";
+    public static final String NAME_LISTENER = "__SET__LISTENER__";
 
     private String sessionId;
     private LinkedList<AttributeInfo> actions = new LinkedList<>();
@@ -122,6 +125,14 @@ public class DeltaRequest implements Externalizable {
         addAction(TYPE_AUTHTYPE,action,NAME_AUTHTYPE, authType);
     }
 
+    public void addSessionListener(SessionListener listener) {
+        addAction(TYPE_LISTENER, ACTION_SET, NAME_LISTENER ,listener);
+    }
+
+    public void removeSessionListener(SessionListener listener) {
+        addAction(TYPE_LISTENER, ACTION_REMOVE, NAME_LISTENER ,listener);
+    }
+
     protected void addAction(int type,
                              int action,
                              String name,
@@ -190,6 +201,14 @@ public class DeltaRequest implements Externalizable {
                     }
                     session.setAuthType(authType,false);
                     break;
+                case TYPE_LISTENER:
+                    SessionListener listener = (SessionListener) info.getValue();
+                    if (info.getAction() == ACTION_SET) {
+                        session.addSessionListener(listener);
+                    } else {
+                        session.removeSessionListener(listener);
+                    }
+                    break;
                 default :
                     throw new java.lang.IllegalArgumentException("Invalid attribute info type="+info);
             }//switch

==================================================
ReplicatedSessionListener.java
index ba37be35be..0b29b0e929 100644
--- a/java/org/apache/catalina/ha/session/DeltaSession.java
+++ b/java/org/apache/catalina/ha/session/DeltaSession.java
@@ -500,6 +500,33 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
         return (sb.toString());
     }
 
+    @Override
+    public void addSessionListener(SessionListener listener) {
+        lock();
+        try {
+            super.addSessionListener(listener);
+            if (deltaRequest != null && listener instanceof ReplicatedSessionListener) {
+                deltaRequest.addSessionListener(listener);
+            }
+        } finally {
+            unlock();
+        }
+    }
+
+    @Override
+    public void removeSessionListener(SessionListener listener) {
+        lock();
+        try {
+            super.removeSessionListener(listener);
+            if (deltaRequest != null && listener instanceof ReplicatedSessionListener) {
+                deltaRequest.removeSessionListener(listener);
+            }
+        } finally {
+            unlock();
+        }
+    }
+
+
     // ------------------------------------------------ Session Package Methods
 
     @Override
@@ -741,9 +768,14 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
         }
         isValid = isValidSave;
 
-        if (listeners == null) {
-            ArrayList<SessionListener> arrayList = new ArrayList<>();
-            listeners = arrayList;
+        // Session listeners
+        n = ((Integer) stream.readObject()).intValue();
+        if (listeners == null || n > 0) {
+            listeners = new ArrayList<>();
+        }
+        for (int i = 0; i < n; i++) {
+            SessionListener listener = (SessionListener) stream.readObject();
+            listeners.add(listener);
         }
 
         if (notes == null) {
@@ -835,6 +867,17 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
             }
         }
 
+        // Serializable listeners
+        ArrayList<SessionListener> saveListeners = new ArrayList<>();
+        for (SessionListener listener : listeners) {
+            if (listener instanceof ReplicatedSessionListener) {
+                saveListeners.add(listener);
+            }
+        }
+        stream.writeObject(Integer.valueOf(saveListeners.size()));
+        for (SessionListener listener : saveListeners) {
+            stream.writeObject(listener);
+        }
     }
 
 

==================================================
