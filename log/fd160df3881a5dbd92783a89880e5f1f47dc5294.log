fd160df3881a5dbd92783a89880e5f1f47dc5294
==================================================
For https://bz.apache.org/bugzilla/show_bug.cgi?id=58547
==================================================
Konstantin Kolinko
==================================================
Wed Oct 28 05:36:20 2015 +0000
==================================================
BeanELResolver.java
For https://bz.apache.org/bugzilla/show_bug.cgi?id=58547
Replace Integer.valueOf(String).intValue() with simple parseInt(), and similar methods.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1710945 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ExpressionBuilder.java
index 032662ac2c..39eb6cedaf 100644
--- a/java/javax/el/BeanELResolver.java
+++ b/java/javax/el/BeanELResolver.java
@@ -40,20 +40,20 @@ public class BeanELResolver extends ELResolver {
         "org.apache.el.BeanELResolver.CACHE_SIZE";
 
     static {
+        String cacheSizeStr;
         if (System.getSecurityManager() == null) {
-            CACHE_SIZE = Integer.parseInt(
-                    System.getProperty(CACHE_SIZE_PROP, "1000"));
+            cacheSizeStr = System.getProperty(CACHE_SIZE_PROP, "1000");
         } else {
-            CACHE_SIZE = AccessController.doPrivileged(
-                    new PrivilegedAction<Integer>() {
+            cacheSizeStr = AccessController.doPrivileged(
+                    new PrivilegedAction<String>() {
 
                     @Override
-                    public Integer run() {
-                        return Integer.valueOf(
-                                System.getProperty(CACHE_SIZE_PROP, "1000"));
+                    public String run() {
+                        return System.getProperty(CACHE_SIZE_PROP, "1000");
                     }
-                }).intValue();
+                });
         }
+        CACHE_SIZE = Integer.parseInt(cacheSizeStr);
     }
 
     private final boolean readOnly;

==================================================
JspFactoryImpl.java
index df95573694..cde34a6735 100644
--- a/java/org/apache/el/lang/ExpressionBuilder.java
+++ b/java/org/apache/el/lang/ExpressionBuilder.java
@@ -55,20 +55,20 @@ public final class ExpressionBuilder implements NodeVisitor {
         "org.apache.el.ExpressionBuilder.CACHE_SIZE";
 
     static {
+        String cacheSizeStr;
         if (System.getSecurityManager() == null) {
-            CACHE_SIZE = Integer.parseInt(
-                    System.getProperty(CACHE_SIZE_PROP, "5000"));
+            cacheSizeStr = System.getProperty(CACHE_SIZE_PROP, "5000");
         } else {
-            CACHE_SIZE = AccessController.doPrivileged(
-                    new PrivilegedAction<Integer>() {
+            cacheSizeStr = AccessController.doPrivileged(
+                    new PrivilegedAction<String>() {
 
                     @Override
-                    public Integer run() {
-                        return Integer.valueOf(
-                                System.getProperty(CACHE_SIZE_PROP, "5000"));
+                    public String run() {
+                        return System.getProperty(CACHE_SIZE_PROP, "5000");
                     }
-                }).intValue();
+                });
         }
+        CACHE_SIZE = Integer.parseInt(cacheSizeStr);
     }
 
     private static final ConcurrentCache<String, Node> expressionCache =

==================================================
JspRuntimeLibrary.java
index 2904d3bae0..c2a73d4153 100644
--- a/java/org/apache/jasper/runtime/JspFactoryImpl.java
+++ b/java/org/apache/jasper/runtime/JspFactoryImpl.java
@@ -42,7 +42,7 @@ public class JspFactoryImpl extends JspFactory {
     private static final boolean USE_POOL =
         Boolean.parseBoolean(System.getProperty("org.apache.jasper.runtime.JspFactoryImpl.USE_POOL", "true"));
     private static final int POOL_SIZE =
-        Integer.valueOf(System.getProperty("org.apache.jasper.runtime.JspFactoryImpl.POOL_SIZE", "8")).intValue();
+        Integer.parseInt(System.getProperty("org.apache.jasper.runtime.JspFactoryImpl.POOL_SIZE", "8"));
 
     private final ThreadLocal<PageContextPool> localPool = new ThreadLocal<>();
 

==================================================
TestAbstractAjpProcessor.java
index da9be4acde..6e86a2d4c7 100644
--- a/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
+++ b/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
@@ -509,12 +509,12 @@ public class JspRuntimeLibrary {
             } else if (t.equals(double.class)) {
                 double[] tmpval = new double[values.length];
                 for (int i = 0 ; i < values.length; i++)
-                    tmpval[i] = Double.valueOf(values[i]).doubleValue();
+                    tmpval[i] = Double.parseDouble(values[i]);
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(float.class)) {
                 float[] tmpval = new float[values.length];
                 for (int i = 0 ; i < values.length; i++)
-                    tmpval[i] = Float.valueOf(values[i]).floatValue();
+                    tmpval[i] = Float.parseFloat(values[i]);
                 method.invoke (bean, new Object[] {tmpval});
             } else if (t.equals(char.class)) {
                 char[] tmpval = new char[values.length];

==================================================
TesterWsClientAutobahn.java
index f07de4eca6..6f2a438a98 100644
--- a/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java
+++ b/test/org/apache/coyote/ajp/TestAbstractAjpProcessor.java
@@ -121,7 +121,7 @@ public class TestAbstractAjpProcessor extends TomcatBaseTest {
                     ajpClient.setServerName(value);
                     break;
                 case "REQUEST-SERVER-PORT":
-                    ajpClient.setServerPort(Integer.valueOf(value).intValue());
+                    ajpClient.setServerPort(Integer.parseInt(value));
                     break;
                 case "REQUEST-IS-SECURE":
                     ajpClient.setSsl(Boolean.parseBoolean(value));

==================================================
