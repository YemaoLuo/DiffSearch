6ce70323d050df5d28661a7177709621076ac512
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48148
==================================================
Mark Emlyn
==================================================
Tue Nov 17 22:31:47 2009 +0000
==================================================
Constants.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48148
Correct JavaDoc typos. Patch provided by gingyang.xu

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@881577 13f79535-47bb-0310-9956-ffa450edef68



==================================================
EmbeddedServletOptions.java
index d93e7b2263..e1da650722 100644
--- a/java/org/apache/jasper/Constants.java
+++ b/java/org/apache/jasper/Constants.java
@@ -178,7 +178,7 @@ public class Constants {
                 Arrays.asList(PRIVATE_CACHED_DTD_RESOURCE_PATHS));
     
     /**
-     * Default URLs to download the pluging for Netscape and IE.
+     * Default URLs to download the plugin for Netscape and IE.
      */
     public static final String NS_PLUGIN_URL = 
         "http://java.sun.com/products/plugin/";

==================================================
JasperException.java
index 138b1229cf..18e241b057 100644
--- a/java/org/apache/jasper/EmbeddedServletOptions.java
+++ b/java/org/apache/jasper/EmbeddedServletOptions.java
@@ -89,7 +89,7 @@ public final class EmbeddedServletOptions implements Options {
     private int checkInterval = 0;
     
     /**
-     * Is the generation of SMAP info for JSR45 debuggin suppressed?
+     * Is the generation of SMAP info for JSR45 debugging suppressed?
      */
     private boolean isSmapSuppressed = false;
     
@@ -224,7 +224,7 @@ public final class EmbeddedServletOptions implements Options {
     }
     
     /**
-     * Background JSP compile thread check intervall
+     * Background JSP compile thread check interval
      */
     public int getCheckInterval() {
         return checkInterval;
@@ -245,7 +245,7 @@ public final class EmbeddedServletOptions implements Options {
     }
     
     /**
-     * Is the generation of SMAP info for JSR45 debuggin suppressed?
+     * Is the generation of SMAP info for JSR45 debugging suppressed?
      */
     public boolean isSmapSuppressed() {
         return isSmapSuppressed;

==================================================
JspC.java
index cc06a2bf21..0e2eddf23b 100644
--- a/java/org/apache/jasper/JasperException.java
+++ b/java/org/apache/jasper/JasperException.java
@@ -19,7 +19,7 @@ package org.apache.jasper;
 
 /**
  * Base class for all exceptions generated by the JSP engine. Makes it
- * convienient to catch just this at the top-level. 
+ * convenient to catch just this at the top-level. 
  *
  * @author Anil K. Vijendran
  */

==================================================
JspCompilationContext.java
index 69cbe412dc..7c886a6bca 100644
--- a/java/org/apache/jasper/JspC.java
+++ b/java/org/apache/jasper/JspC.java
@@ -469,7 +469,7 @@ public class JspC implements Options {
     }
 
     /**
-     * Is the generation of SMAP info for JSR45 debuggin suppressed?
+     * Is the generation of SMAP info for JSR45 debugging suppressed?
      */
     public boolean isSmapSuppressed() {
         return smapSuppressed;
@@ -800,7 +800,7 @@ public class JspC implements Options {
     }
 
     /**
-     * Obtain JSP configuration informantion specified in web.xml.
+     * Obtain JSP configuration information specified in web.xml.
      */
     public JspConfig getJspConfig() {
         return jspConfig;
@@ -1381,7 +1381,7 @@ public class JspC implements Options {
                         f = new File(fParent);
                     }
 
-                    // If there is no acceptible candidate, uriRoot will
+                    // If there is no acceptable candidate, uriRoot will
                     // remain null to indicate to the CompilerContext to
                     // use the current working/user dir.
                 }

==================================================
Options.java
index 6fac09ab3e..9bf67f150c 100644
--- a/java/org/apache/jasper/JspCompilationContext.java
+++ b/java/org/apache/jasper/JspCompilationContext.java
@@ -111,7 +111,7 @@ public class JspCompilationContext {
         if (baseURI == null) {
             baseURI = "/";
         } else if (baseURI.charAt(0) != '/') {
-            // strip the basde slash since it will be combined with the
+            // strip the base slash since it will be combined with the
             // uriBase to generate a file
             baseURI = "/" + baseURI;
         }
@@ -263,7 +263,7 @@ public class JspCompilationContext {
      */
     public String resolveRelativeUri(String uri) {
         // sometimes we get uri's massaged from File(String), so check for
-        // a root directory deperator char
+        // a root directory separator char
         if (uri.startsWith("/") || uri.startsWith(File.separator)) {
             return uri;
         } else {
@@ -424,7 +424,7 @@ public class JspCompilationContext {
     /**
      * Package name for the generated class is make up of the base package
      * name, which is user settable, and the derived package name.  The
-     * derived package name directly mirrors the file heirachy of the JSP page.
+     * derived package name directly mirrors the file hierarchy of the JSP page.
      */
     public String getServletPackageName() {
         if (isTagFile()) {

==================================================
Collector.java
index 3b3341e9ed..3571fee9f0 100644
--- a/java/org/apache/jasper/Options.java
+++ b/java/org/apache/jasper/Options.java
@@ -135,8 +135,8 @@ public interface Options {
      * The cache for the location of the TLD's
      * for the various tag libraries 'exposed'
      * by the web application.
-     * A tag library is 'exposed' either explicitely in 
-     * web.xml or implicitely via the uri tag in the TLD 
+     * A tag library is 'exposed' either explicitly in 
+     * web.xml or implicitly via the uri tag in the TLD 
      * of a taglib deployed in a jar file (WEB-INF/lib).
      *
      * @return the instance of the TldLocationsCache
@@ -156,7 +156,7 @@ public interface Options {
     public boolean getFork();
 
     /**
-     * Obtain JSP configuration informantion specified in web.xml.  
+     * Obtain JSP configuration information specified in web.xml.  
      */
     public JspConfig getJspConfig();
 

==================================================
Compiler.java
index 9fa4e4aa08..e42e04acfd 100644
--- a/java/org/apache/jasper/compiler/Collector.java
+++ b/java/org/apache/jasper/compiler/Collector.java
@@ -20,7 +20,7 @@ package org.apache.jasper.compiler;
 import org.apache.jasper.JasperException;
 
 /**
- * Collect info about the page and nodes, and make them availabe through
+ * Collect info about the page and nodes, and make them available through
  * the PageInfo object.
  *
  * @author Kin-man Chung

==================================================
ELFunctionMapper.java
index 808d240137..2e1c613cd7 100644
--- a/java/org/apache/jasper/compiler/Compiler.java
+++ b/java/org/apache/jasper/compiler/Compiler.java
@@ -380,8 +380,8 @@ public abstract class Compiler {
     /**
      * Determine if a compilation is necessary by checking the time stamp of the
      * JSP page with that of the corresponding .class or .java file. If the page
-     * has dependencies, the check is also extended to its dependeants, and so
-     * on. This method can by overidden by a subclasses of Compiler.
+     * has dependencies, the check is also extended to its dependents, and so
+     * on. This method can by overridden by a subclasses of Compiler.
      * 
      * @param checkClass
      *            If true, check against .class file, if false, check against

==================================================
Generator.java
index 252c2e4e64..f12ffc0231 100644
--- a/java/org/apache/jasper/compiler/ELFunctionMapper.java
+++ b/java/org/apache/jasper/compiler/ELFunctionMapper.java
@@ -23,7 +23,7 @@ import org.apache.jasper.JasperException;
 
 /**
  * This class generates functions mappers for the EL expressions in the page.
- * Instead of a global mapper, a mapper is used for ecah call to EL
+ * Instead of a global mapper, a mapper is used for each call to EL
  * evaluator, thus avoiding the prefix overlapping and redefinition
  * issues.
  *

==================================================
JarScannerFactory.java
index 40002dbf9a..1930a51ae0 100644
--- a/java/org/apache/jasper/compiler/Generator.java
+++ b/java/org/apache/jasper/compiler/Generator.java
@@ -490,7 +490,7 @@ class Generator {
     }
 
     /**
-     * Generation of static initializers in preamble. For example, dependant
+     * Generation of static initializers in preamble. For example, dependent
      * list, el function map, prefix map. (shared by servlet and tag handler
      * preamble generation)
      */
@@ -1335,7 +1335,7 @@ class Generator {
 
             // Create bean
             /*
-             * Check if bean is alredy there
+             * Check if bean is already there
              */
             out.printin("if (");
             out.print(name);
@@ -1756,7 +1756,7 @@ class Generator {
                 out.printil("        throws Throwable {");
                 out.pushIndent();
 
-                // Initilaize local variables used in this method.
+                // Initialize local variables used in this method.
                 if (!isTagFile) {
                     out
                             .printil("PageContext pageContext = _jspx_page_context;");
@@ -2020,7 +2020,7 @@ class Generator {
             StringBuilder sb = new StringBuilder("out.write(\"");
             int initLength = sb.length();
             int count = JspUtil.CHUNKSIZE;
-            int srcLine = 0; // relative to starting srouce line
+            int srcLine = 0; // relative to starting source line
             for (int i = 0; i < text.length(); i++) {
                 char ch = text.charAt(i);
                 --count;
@@ -2779,7 +2779,7 @@ class Generator {
 
         /*
          * Creates a tag variable name by concatenating the given prefix and
-         * shortName and endcoded to make the resultant string a valid Java
+         * shortName and encoded to make the resultant string a valid Java
          * Identifier.
          */
         private String createTagVarName(String fullName, String prefix,

==================================================
JspConfig.java
index d7f1664fac..dee4cf0d56 100644
--- a/java/org/apache/jasper/compiler/JarScannerFactory.java
+++ b/java/org/apache/jasper/compiler/JarScannerFactory.java
@@ -26,7 +26,7 @@ import org.apache.tomcat.JarScanner;
 
 /**
  * Provide a mechanism for Jasper to obtain a reference to the JarScanner
- * impementation.
+ * implementation.
  */
 public class JarScannerFactory {
 
@@ -37,7 +37,7 @@ public class JarScannerFactory {
     }
 
     /**
-     * Obtain the {@link JarScanner} associated with the specificed {@link
+     * Obtain the {@link JarScanner} associated with the specified {@link
      * ServletContext}. It is obtained via a context parameter.
      */
     public static JarScanner getJarScanner(ServletContext ctxt) {

==================================================
JspDocumentParser.java
index 21eab7ae6c..e16148d2b7 100644
--- a/java/org/apache/jasper/compiler/JspConfig.java
+++ b/java/org/apache/jasper/compiler/JspConfig.java
@@ -174,7 +174,7 @@ public class JspConfig {
                             extension = file.substring(file.indexOf('.')+1);
                         }
 
-                        // The url patterns are reconstructed as the follwoing:
+                        // The url patterns are reconstructed as the following:
                         // path != null, extension == null:  / or /foo/bar.ext
                         // path == null, extension != null:  *.ext
                         // path != null, extension == "*":   /foo/*

==================================================
JspReader.java
index 9feb10bb8a..c2dd6fb285 100644
--- a/java/org/apache/jasper/compiler/JspDocumentParser.java
+++ b/java/org/apache/jasper/compiler/JspDocumentParser.java
@@ -106,7 +106,7 @@ class JspDocumentParser
 
     // Nesting level of Tag dependent bodies
     private int tagDependentNesting = 0;
-    // Flag set to delay incrmenting tagDependentNesting until jsp:body
+    // Flag set to delay incrementing tagDependentNesting until jsp:body
     // is first encountered
     private boolean tagDependentPending = false;
 

==================================================
JspRuntimeContext.java
index b88e22e9b8..6113d8589a 100644
--- a/java/org/apache/jasper/compiler/JspReader.java
+++ b/java/org/apache/jasper/compiler/JspReader.java
@@ -512,7 +512,7 @@ class JspReader {
     /**
      * Unregister the source file.
      * This method is used to implement file inclusion. Each included file
-     * gets a uniq identifier (which is the index in the array of source
+     * gets a unique identifier (which is the index in the array of source
      * files).
      *
      * @return The index of the now registered file.
@@ -617,7 +617,7 @@ class JspReader {
             return true;
         }
         // Note that although the current file is undefined here, "current"
-        // is not set to null just for convience, for it maybe used to
+        // is not set to null just for convenience, for it maybe used to
         // set the current (undefined) position.
         return false;
     }

==================================================
JspUtil.java
index c52955c1ee..458e03ecfc 100644
--- a/java/org/apache/jasper/compiler/JspRuntimeContext.java
+++ b/java/org/apache/jasper/compiler/JspRuntimeContext.java
@@ -47,7 +47,7 @@ import org.apache.juli.logging.LogFactory;
  * &060;%@include file="..."%&062; directive is used.
  *
  * A background thread periodically checks the files a JSP page
- * is dependent upon.  If a dpendent file changes the JSP page
+ * is dependent upon.  If a dependent file changes the JSP page
  * which included it is recompiled.
  *
  * Only used if a web application context is a directory.
@@ -207,7 +207,7 @@ public final class JspRuntimeContext {
 
     /**
      * Get the SecurityManager Policy CodeSource for this web
-     * applicaiton context.
+     * application context.
      *
      * @return CodeSource for JSP
      */
@@ -235,7 +235,7 @@ public final class JspRuntimeContext {
     }
 
     /**
-     * Process a "destory" event for this web application context.
+     * Process a "destroy" event for this web application context.
      */                                                        
     public void destroy() {
         Iterator<JspServletWrapper> servlets = jsps.values().iterator();

==================================================
Node.java
index 59080897e1..31ced2234f 100644
--- a/java/org/apache/jasper/compiler/JspUtil.java
+++ b/java/org/apache/jasper/compiler/JspUtil.java
@@ -947,7 +947,7 @@ public class JspUtil {
 
     /**
      * Compute the canonical name from a Class instance. Note that a simple
-     * replacment of '$' with '.' of a binary name would not work, as '$' is a
+     * replacement of '$' with '.' of a binary name would not work, as '$' is a
      * legal Java Identifier character.
      * 
      * @param c

==================================================
TagFileProcessor.java
index 2d4ea9f06f..2388815603 100644
--- a/java/org/apache/jasper/compiler/Node.java
+++ b/java/org/apache/jasper/compiler/Node.java
@@ -44,8 +44,8 @@ import org.apache.jasper.compiler.tagplugin.TagPluginContext;
 import org.xml.sax.Attributes;
 
 /**
- * An internal data representation of a JSP page or a JSP docuement (XML). Also
- * included here is a visitor class for tranversing nodes.
+ * An internal data representation of a JSP page or a JSP document (XML). Also
+ * included here is a visitor class for traversing nodes.
  * 
  * @author Kin-man Chung
  * @author Jan Luehe
@@ -445,7 +445,7 @@ abstract class Node implements TagConstants {
 
         /*
          * Indicates whether an encoding has been explicitly specified in the
-         * page's bom.
+         * page's dom.
          */
         private boolean isBomPresent;
 
@@ -1889,7 +1889,7 @@ abstract class Node implements TagConstants {
             childInfo = new ChildInfo();
             name = this.getAttributeValue("name");
             if (name != null) {
-                // Mandatary attribute "name" will be checked in Validator
+                // Mandatory attribute "name" will be checked in Validator
                 localName = name;
                 int index = name.indexOf(':');
                 if (index != -1) {
@@ -2062,7 +2062,7 @@ abstract class Node implements TagConstants {
          * Add a source to Java line mapping
          * 
          * @param srcLine
-         *            The postion of the source line, relative to the line at
+         *            The position of the source line, relative to the line at
          *            the start of this node. The corresponding java line is
          *            assumed to be consecutive, i.e. one more than the last.
          */
@@ -2079,7 +2079,7 @@ abstract class Node implements TagConstants {
     }
 
     /***************************************************************************
-     * Auxillary classes used in Node
+     * Auxiliary classes used in Node
      */
 
     /**

==================================================
TagLibraryInfoImpl.java
index 7bb00c72c1..8652cbd0d5 100644
--- a/java/org/apache/jasper/compiler/TagFileProcessor.java
+++ b/java/org/apache/jasper/compiler/TagFileProcessor.java
@@ -463,7 +463,7 @@ class TagFileProcessor {
         }
 
         /**
-         * Perform miscellean checks after the nodes are visited.
+         * Perform miscellaneous checks after the nodes are visited.
          */
         void postCheck() throws JasperException {
             // Check that var.name-from-attributes has valid values.
@@ -505,7 +505,7 @@ class TagFileProcessor {
      * @param path
      *            the path for the tagfile
      * @param tagFileJarUrl
-     *            the url for the Jar containign the tag file 
+     *            the url for the Jar containing the tag file 
      * @param tagLibInfo
      *            the TagLibraryInfo object associated with this TagInfo
      * @return a TagInfo object assembled from the directives in the tag file.
@@ -586,7 +586,7 @@ class TagFileProcessor {
             try {
                 if (tripCount > 0) {
                     // When tripCount is greater than zero, a circular
-                    // dependency exists. The circularily dependant tag
+                    // dependency exists. The circularly dependent tag
                     // file is compiled in prototype mode, to avoid infinite
                     // recursion.
 
@@ -604,8 +604,8 @@ class TagFileProcessor {
                 wrapper.decTripCount();
             }
 
-            // Add the dependants for this tag file to its parent's
-            // dependant list. The only reliable dependency information
+            // Add the dependents for this tag file to its parent's
+            // Dependent list. The only reliable dependency information
             // can only be obtained from the tag instance.
             try {
                 Object tagIns = tagClazz.newInstance();
@@ -670,7 +670,7 @@ class TagFileProcessor {
     /**
      * Implements a phase of the translation that compiles (if necessary) the
      * tag files used in a JSP files. The directives in the tag files are
-     * assumed to have been proccessed and encapsulated as TagFileInfo in the
+     * assumed to have been processed and encapsulated as TagFileInfo in the
      * CustomTag nodes.
      */
     public void loadTagFiles(Compiler compiler, Node.Nodes page)

==================================================
TextOptimizer.java
index 0946e81bb1..067787e419 100644
--- a/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java
+++ b/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java
@@ -451,7 +451,7 @@ class TagLibraryInfoImpl extends TagLibraryInfo implements TagConstants {
      * the TLD, in case the tag file is specified relative to it @param jarFile
      * The JAR file, in case the tag file is packaged in a JAR
      * 
-     * @return TagInfo correspoding to tag file directives
+     * @return TagInfo corresponding to tag file directives
      */
     private TagFileInfo createTagFileInfo(TreeNode elem, URL jarFileUrl)
             throws JasperException {

==================================================
TldLocationsCache.java
index 8221fbca4f..e106f2ce77 100644
--- a/java/org/apache/jasper/compiler/TextOptimizer.java
+++ b/java/org/apache/jasper/compiler/TextOptimizer.java
@@ -46,7 +46,7 @@ public class TextOptimizer {
         }
 
 	/*
-         * The following directis are ignored in text concatenation
+         * The following directives are ignored in text concatenation
          */
 
         @Override

==================================================
Validator.java
index dc9171deaa..e6aff91a50 100644
--- a/java/org/apache/jasper/compiler/TldLocationsCache.java
+++ b/java/org/apache/jasper/compiler/TldLocationsCache.java
@@ -113,7 +113,7 @@ public class TldLocationsCache {
     private ServletContext ctxt;
 
     //*********************************************************************
-    // Constructor and Initilizations
+    // Constructor and Initializations
 
     /*
      * Initializes the set of JARs that are known not to contain any TLDs

==================================================
TagPluginContext.java
index 81a0f5e0ad..7f20017cf3 100644
--- a/java/org/apache/jasper/compiler/Validator.java
+++ b/java/org/apache/jasper/compiler/Validator.java
@@ -43,7 +43,7 @@ import org.xml.sax.Attributes;
 /**
  * Performs validation on the page elements. Attributes are checked for
  * mandatory presence, entry value validity, and consistency. As a side effect,
- * some page global value (such as those from page direcitves) are stored, for
+ * some page global value (such as those from page directives) are stored, for
  * later use.
  * 
  * @author Kin-man Chung
@@ -805,7 +805,7 @@ class Validator {
             }
 
             /*
-             * The bodyconet of a SimpleTag cannot be JSP.
+             * The bodycontent of a SimpleTag cannot be JSP.
              */
             if (n.implementsSimpleTag()
                     && tagInfo.getBodyContent().equalsIgnoreCase(
@@ -1136,7 +1136,7 @@ class Validator {
                                     }
                                 }
                                 if (tldAttrs[j].isDeferredValue()) {
-                                    // The String litteral must be castable to what is declared as type
+                                    // The String literal must be castable to what is declared as type
                                     // for the attribute
                                     expectedType = tldAttrs[j].getExpectedTypeName();
                                 }

==================================================
BodyContentImpl.java
index 8d1c558d1e..f9d1db508e 100644
--- a/java/org/apache/jasper/compiler/tagplugin/TagPluginContext.java
+++ b/java/org/apache/jasper/compiler/tagplugin/TagPluginContext.java
@@ -19,7 +19,7 @@ package org.apache.jasper.compiler.tagplugin;
 
 
 /**
- * This interface allows the plugin author to make inqueries about the
+ * This interface allows the plugin author to make inquiries about the
  * properties of the current tag, and to use Jasper resources to generate
  * direct Java codes in place of tag handler invocations.
  */
@@ -49,7 +49,7 @@ public interface TagPluginContext {
 
     /**
      * Generate a declaration in the of the generated class.  This can be
-     * used to declare an innter class, a method, or a class variable.
+     * used to declare an inner class, a method, or a class variable.
      * @param id An unique ID identifying the declaration.  It is not
      *           part of the declaration, and is used to ensure that the
      *           declaration will only appear once.  If this method is
@@ -78,7 +78,7 @@ public interface TagPluginContext {
     String getConstantAttribute(String attribute);
 
     /**
-     * Generate codesto evaluate value of a attribute in the custom tag
+     * Generate codes to evaluate value of a attribute in the custom tag
      * The codes is a Java expression.
      * NOTE: Currently cannot handle attributes that are fragments.
      * @param attribute The specified attribute
@@ -94,7 +94,7 @@ public interface TagPluginContext {
      * Abandon optimization for this tag handler, and instruct
      * Jasper to generate the tag handler calls, as usual.
      * Should be invoked if errors are detected, or when the tag body
-     * is deemed too compilicated for optimization.
+     * is deemed too complicated for optimization.
      */
     void dontUseTagPlugin();
 

==================================================
JspContextWrapper.java
index d99a4f7932..153ee0ddeb 100644
--- a/java/org/apache/jasper/runtime/BodyContentImpl.java
+++ b/java/org/apache/jasper/runtime/BodyContentImpl.java
@@ -503,7 +503,7 @@ public class BodyContentImpl extends BodyContent {
     
     /**
      * Clears the current contents of the buffer. Unlike clear(), this
-     * mehtod will not throw an IOException if the buffer has already been
+     * method will not throw an IOException if the buffer has already been
      * flushed. It merely clears the current content of the buffer and
      * returns.
      *

==================================================
JspServlet.java
index 81ef9a4273..705a9dab10 100644
--- a/java/org/apache/jasper/runtime/JspContextWrapper.java
+++ b/java/org/apache/jasper/runtime/JspContextWrapper.java
@@ -357,7 +357,7 @@ public class JspContextWrapper extends PageContext implements VariableResolver {
 	}
 
 	/**
-	 * Synchronize variables before fragment invokation
+	 * Synchronize variables before fragment invocation
 	 */
 	public void syncBeforeInvoke() {
 		copyTagToPageScope(VariableInfo.NESTED);

==================================================
JspServletWrapper.java
index 5500f51345..6c36333e57 100644
--- a/java/org/apache/jasper/servlet/JspServlet.java
+++ b/java/org/apache/jasper/servlet/JspServlet.java
@@ -159,7 +159,7 @@ public class JspServlet extends HttpServlet implements PeriodicEventListener {
      * a servlet the opportunity to call
      * <code>request.setCharacterEncoding()</code> first.</p>
      *
-     * @param request The servlet requset we are processing
+     * @param request The servlet request we are processing
      *
      * @exception ServletException if an invalid parameter value for the
      *  <code>jsp_precompile</code> parameter name is specified

==================================================
Import.java
index c421fbebcb..7b0ee4a9b9 100644
--- a/java/org/apache/jasper/servlet/JspServletWrapper.java
+++ b/java/org/apache/jasper/servlet/JspServletWrapper.java
@@ -228,7 +228,7 @@ public class JspServletWrapper {
 
     /**
      * Compile and load a prototype for the Tag file.  This is needed
-     * when compiling tag files with circular dependencies.  A prototpe
+     * when compiling tag files with circular dependencies.  A prototype
      * (skeleton) with no dependencies on other other tag files is
      * generated and compiled.
      */

==================================================
Enumerator.java
index e994f433f8..aaaae4c36e 100644
--- a/java/org/apache/jasper/tagplugins/jstl/core/Import.java
+++ b/java/org/apache/jasper/tagplugins/jstl/core/Import.java
@@ -100,7 +100,7 @@ public class Import implements TagPlugin {
             ctxt.generateAttribute("charEncoding");
             ctxt.generateJavaSource(";");
             
-            //assign appropriate value tp the charset
+            //assign appropriate value to the charset
             ctxt.generateJavaSource("if(null != " + charEncodingName + " " +
                     "&& !" + charEncodingName + ".equals(\"\")){");
             ctxt.generateJavaSource("    " + charSetName + " = " 

==================================================
UTF8Reader.java
index 912a9bca4e..7492a7dde1 100644
--- a/java/org/apache/jasper/util/Enumerator.java
+++ b/java/org/apache/jasper/util/Enumerator.java
@@ -32,7 +32,7 @@ import java.util.NoSuchElementException;
  * Adapter class that wraps an <code>Enumeration</code> around a Java2
  * collection classes object <code>Iterator</code> so that existing APIs
  * returning Enumerations can easily run on top of the new collections.
- * Constructors are provided to easliy create such wrappers.
+ * Constructors are provided to easily create such wrappers.
  *
  * @author Craig R. McClanahan
  * @version $Revision$ $Date$

==================================================
XMLEncodingDetector.java
index b92287d9ec..ccbec219b8 100644
--- a/java/org/apache/jasper/xmlparser/UTF8Reader.java
+++ b/java/org/apache/jasper/xmlparser/UTF8Reader.java
@@ -263,7 +263,7 @@ public class UTF8Reader
         // NOTE: Having an offset value other than zero means that there was
         //       an error in the last character read. In this case, we have
         //       skipped the read so we don't consume any bytes past the 
-        //       error. By signalling the error on the next block read we
+        //       error. By signaling the error on the next block read we
         //       allow the method to return the most valid characters that
         //       it can on the previous block read. -Ac
         else {

==================================================
ClassLoaderLogManager.java
index 19911c535b..b0b8ce769c 100644
--- a/java/org/apache/jasper/xmlparser/XMLEncodingDetector.java
+++ b/java/org/apache/jasper/xmlparser/XMLEncodingDetector.java
@@ -1057,7 +1057,7 @@ public class XMLEncodingDetector {
      * This class allows rewinding an inputStream by allowing a mark
      * to be set, and the stream reset to that position.  <strong>The
      * class assumes that it needs to read one character per
-     * invocation when it's read() method is inovked, but uses the
+     * invocation when it's read() method is invoked, but uses the
      * underlying InputStream's read(char[], offset length) method--it
      * won't buffer data read this way!</strong>
      *

==================================================
OneLineFormatter.java
index 31a4136b7b..6fb2f14439 100644
--- a/java/org/apache/juli/ClassLoaderLogManager.java
+++ b/java/org/apache/juli/ClassLoaderLogManager.java
@@ -293,7 +293,7 @@ public class ClassLoaderLogManager extends LogManager {
      * Read configuration for the specified classloader.
      * 
      * @param classLoader 
-     * @throws IOException Errot
+     * @throws IOException Error
      */
     protected void readConfiguration(ClassLoader classLoader)
         throws IOException {

==================================================
DirectJDKLog.java
index 7f50b4a576..cbbaac50ce 100644
--- a/java/org/apache/juli/OneLineFormatter.java
+++ b/java/org/apache/juli/OneLineFormatter.java
@@ -26,8 +26,8 @@ import java.util.logging.LogRecord;
 
 /**
  * Provides same information as default log format but on a single line to make
- * it easier to grep the logs. The only excpetion is stacktraces which are
- * always preceeded by whitespace to make it simple to skip them.
+ * it easier to grep the logs. The only exception is stacktraces which are
+ * always preceded by whitespace to make it simple to skip them.
  */
 /*
  * Date processing based on AccessLogValve.

==================================================
Log.java
index 1b082d784f..71d3784338 100644
--- a/java/org/apache/juli/logging/DirectJDKLog.java
+++ b/java/org/apache/juli/logging/DirectJDKLog.java
@@ -50,7 +50,7 @@ class DirectJDKLog implements Log {
             }
             try {
                 Formatter fmt=(Formatter)Class.forName(SIMPLE_FMT).newInstance();
-                // it is also possible that the user modifed jre/lib/logging.properties - 
+                // it is also possible that the user modified jre/lib/logging.properties - 
                 // but that's really stupid in most cases
                 Logger root=Logger.getLogger("");
                 Handler handlers[]=root.getHandlers();
@@ -144,7 +144,7 @@ class DirectJDKLog implements Log {
     }    
 
     // from commons logging. This would be my number one reason why java.util.logging
-    // is bad - design by comitee can be really bad ! The impact on performance of 
+    // is bad - design by committee can be really bad ! The impact on performance of 
     // using java.util.logging - and the ugliness if you need to wrap it - is far
     // worse than the unfriendly and uncommon default format for logs. 
     

==================================================
LogFactory.java
index 9264a15b14..47c79af1f9 100644
--- a/java/org/apache/juli/logging/Log.java
+++ b/java/org/apache/juli/logging/Log.java
@@ -35,7 +35,7 @@ package org.apache.juli.logging;
  * </ol>
  * The mapping of these log levels to the concepts used by the underlying
  * logging system is implementation dependent.
- * The implemention should ensure, though, that this ordering behaves
+ * The implementation should ensure, though, that this ordering behaves
  * as expected.</p>
  *
  * <p>Performance is often a logging concern.

==================================================
