337ee1d975016215c31334c5f7e30e9d2ecddc79
==================================================
Handle arrays of generic types in encoders, decoders and MessageHandlers.
==================================================
Mark Emlyn
==================================================
Sun Oct 20 20:23:57 2013 +0000
==================================================
Util.java
Handle arrays of generic types in encoders, decoders and MessageHandlers.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1533962 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestUtil.java
index 8323ce75b0..a6281f703c 100644
--- a/java/org/apache/tomcat/websocket/Util.java
+++ b/java/org/apache/tomcat/websocket/Util.java
@@ -18,6 +18,7 @@ package org.apache.tomcat.websocket;
 
 import java.io.InputStream;
 import java.io.Reader;
+import java.lang.reflect.GenericArrayType;
 import java.lang.reflect.Method;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
@@ -159,22 +160,22 @@ public class Util {
 
 
     static Class<?> getMessageType(MessageHandler listener) {
-        return (Class<?>) Util.getGenericType(MessageHandler.class,
-                listener.getClass());
+        return Util.getGenericType(MessageHandler.class,
+                listener.getClass()).getClazz();
     }
 
 
     public static Class<?> getDecoderType(Class<? extends Decoder> decoder) {
-        return (Class<?>) Util.getGenericType(Decoder.class, decoder);
+        return Util.getGenericType(Decoder.class, decoder).getClazz();
     }
 
 
     static Class<?> getEncoderType(Class<? extends Encoder> encoder) {
-        return (Class<?>) Util.getGenericType(Encoder.class, encoder);
+        return Util.getGenericType(Encoder.class, encoder).getClazz();
     }
 
 
-    private static <T> Object getGenericType(Class<T> type,
+    private static <T> TypeResult getGenericType(Class<T> type,
             Class<? extends T> clazz) {
 
         // Look to see if this class implements the interface of interest
@@ -200,24 +201,52 @@ public class Util {
         Class<? extends T> superClazz =
                 (Class<? extends T>) clazz.getSuperclass();
 
-        Object result = getGenericType(type, superClazz);
-        if (result instanceof Class<?>) {
+        TypeResult superClassTypeResult = getGenericType(type, superClazz);
+        int dimension = superClassTypeResult.getDimension();
+        if (superClassTypeResult.getIndex() == -1 && dimension == 0) {
             // Superclass implements interface and defines explicit type for
             // the interface of interest
-            return result;
-        } else if (result instanceof Integer) {
+            return superClassTypeResult;
+        }
+
+        if (superClassTypeResult.getIndex() > -1) {
             // Superclass implements interface and defines unknown type for
             // the interface of interest
             // Map that unknown type to the generic types defined in this class
             ParameterizedType superClassType =
                     (ParameterizedType) clazz.getGenericSuperclass();
-            return getTypeParameter(clazz,
+            TypeResult result = getTypeParameter(clazz,
                     superClassType.getActualTypeArguments()[
-                            ((Integer) result).intValue()]);
-        } else {
-            // Error will be logged further up the call stack
-            return null;
+                            superClassTypeResult.getIndex()]);
+            result.incrementDimension(superClassTypeResult.getDimension());
+            if (result.getClazz() != null && result.getDimension() > 0) {
+                superClassTypeResult = result;
+            } else {
+                return result;
+            }
         }
+
+        if (superClassTypeResult.getDimension() > 0) {
+            StringBuilder className = new StringBuilder();
+            for (int i = 0; i < dimension; i++) {
+                className.append('[');
+            }
+            className.append('L');
+            className.append(superClassTypeResult.getClazz().getCanonicalName());
+            className.append(';');
+
+            Class<?> arrayClazz;
+            try {
+                arrayClazz = Class.forName(className.toString());
+            } catch (ClassNotFoundException e) {
+                throw new IllegalArgumentException(e);
+            }
+
+            return new TypeResult(arrayClazz, -1, 0);
+        }
+
+        // Error will be logged further up the call stack
+        return null;
     }
 
 
@@ -225,16 +254,21 @@ public class Util {
      * For a generic parameter, return either the Class used or if the type
      * is unknown, the index for the type in definition of the class
      */
-    private static Object getTypeParameter(Class<?> clazz, Type argType) {
+    private static TypeResult getTypeParameter(Class<?> clazz, Type argType) {
         if (argType instanceof Class<?>) {
-            return argType;
+            return new TypeResult((Class<?>) argType, -1, 0);
         } else if (argType instanceof ParameterizedType) {
-            return ((ParameterizedType) argType).getRawType();
+            return new TypeResult((Class<?>)((ParameterizedType) argType).getRawType(), -1, 0);
+        } else if (argType instanceof GenericArrayType) {
+            Type arrayElementType = ((GenericArrayType) argType).getGenericComponentType();
+            TypeResult result = getTypeParameter(clazz, arrayElementType);
+            result.incrementDimension(1);
+            return result;
         } else {
             TypeVariable<?>[] tvs = clazz.getTypeParameters();
             for (int i = 0; i < tvs.length; i++) {
                 if (tvs[i].equals(argType)) {
-                    return Integer.valueOf(i);
+                    return new TypeResult(null, i, 0);
                 }
             }
             return null;
@@ -474,4 +508,33 @@ public class Util {
             return (textDecoders.size() > 0) || (binaryDecoders.size() > 0);
         }
     }
+
+
+    private static class TypeResult {
+        private final Class<?> clazz;
+        private final int index;
+        private int dimension;
+
+        public TypeResult(Class<?> clazz, int index, int dimension) {
+            this.clazz= clazz;
+            this.index = index;
+            this.dimension = dimension;
+        }
+
+        public Class<?> getClazz() {
+            return clazz;
+        }
+
+        public int getIndex() {
+            return index;
+        }
+
+        public int getDimension() {
+            return dimension;
+        }
+
+        public void incrementDimension(int inc) {
+            dimension += inc;
+        }
+    }
 }

==================================================
