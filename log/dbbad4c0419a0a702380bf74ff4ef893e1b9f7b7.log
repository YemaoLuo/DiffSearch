dbbad4c0419a0a702380bf74ff4ef893e1b9f7b7
==================================================
Further preparation for fixing BZ 60087.
==================================================
Mark Thomas
==================================================
Mon Oct 3 15:57:07 2016 +0000
==================================================
WarURLConnection.java
Further preparation for fixing BZ 60087.
With the war->jar conversion taking place in the WarURLStreamHandler, a URL constructed from a String would have an external form that was not that same as the original String.
Resolve this by moving the conversion of the war URL to a jar URL to the WarURLConnection and add some unit tests to confirm the behavior is now as expected. 

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1763179 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WarURLStreamHandler.java
index 9f247ddfce..00577388b9 100644
--- a/java/org/apache/catalina/webresources/WarURLConnection.java
+++ b/java/org/apache/catalina/webresources/WarURLConnection.java
@@ -25,31 +25,45 @@ import java.security.Permission;
 
 public class WarURLConnection extends URLConnection {
 
-    private final URLConnection innerJarUrlConnection;
+    private final URLConnection wrappedJarUrlConnection;
     private boolean connected;
 
     protected WarURLConnection(URL url) throws IOException {
         super(url);
-        URL innerJarUrl = new URL(url.getFile());
-        innerJarUrlConnection = innerJarUrl.openConnection();
+
+        // Need to make this look like a JAR URL for the WAR file
+        // Assumes that the spec is absolute and starts war:file:/...
+        String file = url.getFile();
+        if (file.contains("*/")) {
+            file = file.replaceFirst("\\*/", "!/");
+        } else {
+            file = file.replaceFirst("\\^/", "!/");
+        }
+
+        URL innerJarUrl = new URL("jar", url.getHost(), url.getPort(), file);
+
+        wrappedJarUrlConnection = innerJarUrl.openConnection();
     }
 
+
     @Override
     public void connect() throws IOException {
         if (!connected) {
-            innerJarUrlConnection.connect();
+            wrappedJarUrlConnection.connect();
             connected = true;
         }
     }
 
+
     @Override
     public InputStream getInputStream() throws IOException {
         connect();
-        return innerJarUrlConnection.getInputStream();
+        return wrappedJarUrlConnection.getInputStream();
     }
 
+
     @Override
     public Permission getPermission() throws IOException {
-        return innerJarUrlConnection.getPermission();
+        return wrappedJarUrlConnection.getPermission();
     }
 }

==================================================
TestWarURLStreamHandler.java
index 09e118f1d3..9f551d64ae 100644
--- a/java/org/apache/catalina/webresources/WarURLStreamHandler.java
+++ b/java/org/apache/catalina/webresources/WarURLStreamHandler.java
@@ -23,23 +23,6 @@ import java.net.URLStreamHandler;
 
 public class WarURLStreamHandler extends URLStreamHandler {
 
-    @Override
-    protected void parseURL(URL u, String spec, int start, int limit) {
-        // Need to make this look like a JAR URL for the WAR file
-        // Assumes that the spec is absolute and starts war:file:/...
-
-        // Only the path needs to be changed
-        String path = "jar:" + spec.substring(4);
-        if (path.contains("*/")) {
-            path = path.replaceFirst("\\*/", "!/");
-        } else {
-            path = path.replaceFirst("\\^/", "!/");
-        }
-
-        setURL(u, u.getProtocol(), "", -1, null, null,
-                path, null, null);
-    }
-
     @Override
     protected URLConnection openConnection(URL u) throws IOException {
         return new WarURLConnection(u);

==================================================
