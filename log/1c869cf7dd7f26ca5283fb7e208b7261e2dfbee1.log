1c869cf7dd7f26ca5283fb7e208b7261e2dfbee1
==================================================
Update the upgrade API to support non-blocking reads.
==================================================
Mark Emlyn
==================================================
Tue Feb 28 21:20:55 2012 +0000
==================================================
WsFrame.java
Update the upgrade API to support non-blocking reads.
Neither NIO nor APR implements them yet.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1294837 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WsInputStream.java
index 51bf22f10e..93f2b7398b 100644
--- a/java/org/apache/catalina/websocket/WsFrame.java
+++ b/java/org/apache/catalina/websocket/WsFrame.java
@@ -155,7 +155,7 @@ public class WsFrame {
         int read = 0;
         int last = 0;
         while (read < bytes.length) {
-            last = processor.read(bytes, read, bytes.length - read);
+            last = processor.read(true, bytes, read, bytes.length - read);
             if (last == -1) {
                 throw new IOException(sm.getString("frame.eos"));
             }

==================================================
UpgradeAprProcessor.java
index 580b0c2e70..6462b04463 100644
--- a/java/org/apache/catalina/websocket/WsInputStream.java
+++ b/java/org/apache/catalina/websocket/WsInputStream.java
@@ -98,7 +98,7 @@ public class WsInputStream extends java.io.InputStream {
         if (len > remaining) {
             len = (int) remaining;
         }
-        int result = processor.read(b, off, len);
+        int result = processor.read(true, b, off, len);
         if(result == -1) {
             return -1;
         }

==================================================
UpgradeBioProcessor.java
index 40bc7381df..2ff8eadb2c 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeAprProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeAprProcessor.java
@@ -71,7 +71,9 @@ public class UpgradeAprProcessor extends UpgradeProcessor<Long> {
 
 
     @Override
-    public int read(byte[] bytes, int off, int len) throws IOException {
+    public int read(boolean block, byte[] bytes, int off, int len)
+            throws IOException {
+        // TODO support non-blocking reads
         return Socket.recv(socket, bytes, off, len);
     }
 }

==================================================
UpgradeNioProcessor.java
index 5a1d9fe486..6611a9bc30 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeBioProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeBioProcessor.java
@@ -68,7 +68,10 @@ public class UpgradeBioProcessor extends UpgradeProcessor<Socket> {
 
 
     @Override
-    public int read(byte[] bytes, int off, int len) throws IOException {
+    public int read(boolean block, byte[] bytes, int off, int len)
+            throws IOException {
+        // The BIO endpoint always uses blocking IO so the block parameter is
+        // ignored and a blocking read is performed.
         return inputStream.read(bytes, off, len);
     }
 }

==================================================
UpgradeProcessor.java
index 37e9adad36..41e231f5ec 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeNioProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeNioProcessor.java
@@ -102,7 +102,10 @@ public class UpgradeNioProcessor extends UpgradeProcessor<NioChannel> {
     }
 
     @Override
-    public int read(byte[] bytes, int off, int len) throws IOException {
+    public int read(boolean block, byte[] bytes, int off, int len)
+            throws IOException {
+        // TODO Implement non-blocking reads. Should be as simple as replacing
+        // true with block in the two lines below
         if (len > maxRead) {
             return readSocket(true, bytes, off, maxRead);
         } else {

==================================================
