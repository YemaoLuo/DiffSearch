6b44dd99441a47955b6b18abc9d5346e16778a49
==================================================
Add code to do a clean close of all current connections.
==================================================
Remy Maucherat
==================================================
Mon Mar 10 16:22:07 2014 +0000
==================================================
AjpNio2Protocol.java
Add code to do a clean close of all current connections.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1575994 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11Nio2Protocol.java
index c61a559c88..67ef1e2fd2 100644
--- a/java/org/apache/coyote/ajp/AjpNio2Protocol.java
+++ b/java/org/apache/coyote/ajp/AjpNio2Protocol.java
@@ -25,6 +25,7 @@ import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.Nio2Channel;
 import org.apache.tomcat.util.net.Nio2Endpoint;
+import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.Nio2Endpoint.Handler;
 import org.apache.tomcat.util.net.SSLImplementation;
 import org.apache.tomcat.util.net.SocketWrapper;
@@ -154,5 +155,12 @@ public class AjpNio2Protocol extends AbstractAjpProtocol<Nio2Channel> {
         @Override
         public void onCreateSSLEngine(SSLEngine engine) {
         }
+
+        @Override
+        public void closeAll() {
+            for (Nio2Channel channel : connections.keySet()) {
+                ((Nio2Endpoint) proto.endpoint).closeSocket(channel.getSocket(), SocketStatus.STOP);
+            }
+        }
     }
 }

==================================================
Nio2Channel.java
index 2e327ac981..a5ef7f917a 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Protocol.java
@@ -274,5 +274,12 @@ public class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel>
                 proto.npnHandler.onCreateEngine(engine);
             }
         }
+
+        @Override
+        public void closeAll() {
+            for (Nio2Channel channel : connections.keySet()) {
+                ((Nio2Endpoint) proto.endpoint).closeSocket(channel.getSocket(), SocketStatus.STOP);
+            }
+        }
     }
 }

==================================================
Nio2Endpoint.java
index fd9ce7de2e..9a2a92b28d 100644
--- a/java/org/apache/tomcat/util/net/Nio2Channel.java
+++ b/java/org/apache/tomcat/util/net/Nio2Channel.java
@@ -38,6 +38,7 @@ public class Nio2Channel implements AsynchronousByteChannel {
     protected static ByteBuffer emptyBuf = ByteBuffer.allocate(0);
 
     protected AsynchronousSocketChannel sc = null;
+    protected SocketWrapper<Nio2Channel> socket = null;
 
     protected ApplicationBufferHandler bufHandler;
 
@@ -56,7 +57,16 @@ public class Nio2Channel implements AsynchronousByteChannel {
     public void reset() throws IOException {
         bufHandler.getReadBuffer().clear();
         bufHandler.getWriteBuffer().clear();
-        this.sendFile = false;
+        sendFile = false;
+        socket = null;
+    }
+
+    void setSocket(SocketWrapper<Nio2Channel> socket) {
+        this.socket = socket;
+    }
+
+    public SocketWrapper<Nio2Channel> getSocket() {
+        return socket;
     }
 
     public int getBufferSize() {

==================================================
SecureNio2Channel.java
index bbefe77143..319c4ca9cd 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -383,6 +383,11 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
             running = false;
             unlockAccept();
         }
+        try {
+            handler.closeAll();
+        } catch (Throwable t) {
+            ExceptionUtils.handleThrowable(t);
+        }
         if (useCaches) {
             socketWrapperCache.clear();
             nioChannels.clear();
@@ -488,9 +493,7 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
             socketWrapper.reset(channel, getSocketProperties().getSoTimeout());
             socketWrapper.setKeepAliveLeft(Nio2Endpoint.this.getMaxKeepAliveRequests());
             socketWrapper.setSecure(isSSLEnabled());
-            if (sslContext != null) {
-                ((SecureNio2Channel) channel).setSocket(socketWrapper);
-            }
+            channel.setSocket(socketWrapper);
             processSocket(socketWrapper, SocketStatus.OPEN_READ, true);
             // FIXME: In theory, awaitBytes is better, but the SSL handshake is done by processSocket
             //awaitBytes(socketWrapper);
@@ -898,6 +901,7 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
         public SocketState process(SocketWrapper<Nio2Channel> socket,
                 SocketStatus status);
         public void release(SocketWrapper<Nio2Channel> socket);
+        public void closeAll();
         public SSLImplementation getSslImplementation();
         public void onCreateSSLEngine(SSLEngine engine);
     }

==================================================
