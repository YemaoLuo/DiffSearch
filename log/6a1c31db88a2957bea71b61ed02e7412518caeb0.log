6a1c31db88a2957bea71b61ed02e7412518caeb0
==================================================
Javadoc fixes.
==================================================
Remy Maucherat
==================================================
Tue Jan 19 10:28:10 2016 +0000
==================================================
AttributeInfo.java
Javadoc fixes.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1725466 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BaseAttributeFilter.java
index 89586d29bb..b932fa007c 100644
--- a/java/org/apache/tomcat/util/modeler/AttributeInfo.java
+++ b/java/org/apache/tomcat/util/modeler/AttributeInfo.java
@@ -42,7 +42,7 @@ public class AttributeInfo extends FeatureInfo {
     // ------------------------------------------------------------- Properties
 
     /**
-     * The display name of this attribute.
+     * @return the display name of this attribute.
      */
     public String getDisplayName() {
         return (this.displayName);
@@ -53,7 +53,7 @@ public class AttributeInfo extends FeatureInfo {
     }
 
     /**
-     * The name of the property getter method, if non-standard.
+     * @return the name of the property getter method, if non-standard.
      */
     public String getGetMethod() {
         if(getMethod == null)
@@ -67,6 +67,8 @@ public class AttributeInfo extends FeatureInfo {
 
     /**
      * Is this a boolean attribute with an "is" getter?
+     * @return <code>true</code> if this is a boolean attribute
+     *  with an "is" getter
      */
     public boolean isIs() {
         return (this.is);
@@ -79,6 +81,7 @@ public class AttributeInfo extends FeatureInfo {
 
     /**
      * Is this attribute readable by management applications?
+     * @return <code>true</code> if readable
      */
     public boolean isReadable() {
         return (this.readable);
@@ -90,7 +93,7 @@ public class AttributeInfo extends FeatureInfo {
 
 
     /**
-     * The name of the property setter method, if non-standard.
+     * @return the name of the property setter method, if non-standard.
      */
     public String getSetMethod() {
         if( setMethod == null )
@@ -104,6 +107,7 @@ public class AttributeInfo extends FeatureInfo {
 
     /**
      * Is this attribute writable by management applications?
+     * @return <code>true</code> if writable
      */
     public boolean isWriteable() {
         return (this.writeable);
@@ -119,6 +123,7 @@ public class AttributeInfo extends FeatureInfo {
     /**
      * Create and return a <code>ModelMBeanAttributeInfo</code> object that
      * corresponds to the attribute described by this instance.
+     * @return the attribute info
      */
     MBeanAttributeInfo createAttributeInfo() {
         // Return our cached information (if any)
@@ -139,6 +144,7 @@ public class AttributeInfo extends FeatureInfo {
      * @param name Name of the property itself
      * @param getter Do we want a get method (versus a set method)?
      * @param is If returning a getter, do we want the "is" form?
+     * @return the method name
      */
     private String getMethodName(String name, boolean getter, boolean is) {
 

==================================================
FeatureInfo.java
index 2d82c0d057..befe287c18 100644
--- a/java/org/apache/tomcat/util/modeler/BaseAttributeFilter.java
+++ b/java/org/apache/tomcat/util/modeler/BaseAttributeFilter.java
@@ -100,6 +100,7 @@ public class BaseAttributeFilter implements NotificationFilter {
      * Return the set of names that are accepted by this filter.  If this
      * filter accepts all attribute names, a zero length array will be
      * returned.
+     * @return the array of names
      */
     public String[] getNames() {
 

==================================================
ManagedBean.java
index 54330caeff..c463a2f4d2 100644
--- a/java/org/apache/tomcat/util/modeler/FeatureInfo.java
+++ b/java/org/apache/tomcat/util/modeler/FeatureInfo.java
@@ -45,7 +45,7 @@ public class FeatureInfo implements Serializable {
     // ------------------------------------------------------------- Properties
 
     /**
-     * The human-readable description of this feature.
+     * @return the human-readable description of this feature.
      */
     public String getDescription() {
         return (this.description);
@@ -57,8 +57,8 @@ public class FeatureInfo implements Serializable {
 
 
     /**
-     * The name of this feature, which must be unique among features in the
-     * same collection.
+     * @return the name of this feature, which must be unique among features
+     *  in the same collection.
      */
     public String getName() {
         return (this.name);
@@ -69,7 +69,7 @@ public class FeatureInfo implements Serializable {
     }
 
     /**
-     * The fully qualified Java class name of this element.
+     * @return the fully qualified Java class name of this element.
      */
     public String getType() {
         return (this.type);

==================================================
NotificationInfo.java
index d4ac071870..f56132700a 100644
--- a/java/org/apache/tomcat/util/modeler/ManagedBean.java
+++ b/java/org/apache/tomcat/util/modeler/ManagedBean.java
@@ -90,7 +90,7 @@ public class ManagedBean implements java.io.Serializable {
 
 
     /**
-     * The collection of attributes for this MBean.
+     * @return the collection of attributes for this MBean.
      */
     public AttributeInfo[] getAttributes() {
         AttributeInfo result[] = new AttributeInfo[attributes.size()];
@@ -104,6 +104,7 @@ public class ManagedBean implements java.io.Serializable {
      * described by this descriptor.  If not specified, the standard JMX
      * class (<code>javax.management.modelmbean.RequiredModeLMBean</code>)
      * will be utilized.
+     * @return the class name
      */
     public String getClassName() {
         return this.className;
@@ -121,7 +122,7 @@ public class ManagedBean implements java.io.Serializable {
 
 
     /**
-     * The human-readable description of this MBean.
+     * @return the human-readable description of this MBean.
      */
     public String getDescription() {
         return this.description;
@@ -139,8 +140,8 @@ public class ManagedBean implements java.io.Serializable {
 
 
     /**
-     * The (optional) <code>ObjectName</code> domain in which this MBean
-     * should be registered in the MBeanServer.
+     * @return the (optional) <code>ObjectName</code> domain in which
+     *  this MBean should be registered in the MBeanServer.
      */
     public String getDomain() {
         return this.domain;
@@ -152,7 +153,7 @@ public class ManagedBean implements java.io.Serializable {
 
 
     /**
-     * The (optional) group to which this MBean belongs.
+     * @return the (optional) group to which this MBean belongs.
      */
     public String getGroup() {
         return this.group;
@@ -164,8 +165,8 @@ public class ManagedBean implements java.io.Serializable {
 
 
     /**
-     * The name of this managed bean, which must be unique among all
-     * MBeans managed by a particular MBeans server.
+     * @return the name of this managed bean, which must be unique
+     *  among all MBeans managed by a particular MBeans server.
      */
     public String getName() {
         return this.name;
@@ -183,7 +184,7 @@ public class ManagedBean implements java.io.Serializable {
 
 
     /**
-     * The collection of notifications for this MBean.
+     * @return the collection of notifications for this MBean.
      */
     public NotificationInfo[] getNotifications() {
         return this.notifications;
@@ -191,7 +192,7 @@ public class ManagedBean implements java.io.Serializable {
 
 
     /**
-     * The collection of operations for this MBean.
+     * @return the collection of operations for this MBean.
      */
     public OperationInfo[] getOperations() {
         OperationInfo[] result = new OperationInfo[operations.size()];
@@ -201,7 +202,7 @@ public class ManagedBean implements java.io.Serializable {
 
 
     /**
-     * The fully qualified name of the Java class of the resource
+     * @return the fully qualified name of the Java class of the resource
      * implementation class described by the managed bean described
      * by this descriptor.
      */
@@ -274,7 +275,7 @@ public class ManagedBean implements java.io.Serializable {
      *
      * @param instance Instanced of the managed object, or <code>null</code>
      *  for no associated instance
-     *
+     * @return the MBean
      * @exception InstanceNotFoundException if the managed resource
      *  object cannot be found
      * @exception MBeanException if a problem occurs instantiating the
@@ -342,6 +343,7 @@ public class ManagedBean implements java.io.Serializable {
     /**
      * Create and return a <code>ModelMBeanInfo</code> object that
      * describes this entire managed bean.
+     * @return the MBean info
      */
     MBeanInfo getMBeanInfo() {
 

==================================================
OperationInfo.java
index 4929b83c45..098ccf5cde 100644
--- a/java/org/apache/tomcat/util/modeler/NotificationInfo.java
+++ b/java/org/apache/tomcat/util/modeler/NotificationInfo.java
@@ -71,7 +71,7 @@ public class NotificationInfo extends FeatureInfo {
 
 
     /**
-     * The set of notification types for this MBean.
+     * @return the set of notification types for this MBean.
      */
     public String[] getNotifTypes() {
         Lock readLock = notifTypesLock.readLock();
@@ -112,6 +112,7 @@ public class NotificationInfo extends FeatureInfo {
     /**
      * Create and return a <code>ModelMBeanNotificationInfo</code> object that
      * corresponds to the attribute described by this instance.
+     * @return the notification info
      */
     public MBeanNotificationInfo createNotificationInfo() {
 

==================================================
ParameterInfo.java
index 9197d642f5..55f4883e08 100644
--- a/java/org/apache/tomcat/util/modeler/OperationInfo.java
+++ b/java/org/apache/tomcat/util/modeler/OperationInfo.java
@@ -55,8 +55,9 @@ public class OperationInfo extends FeatureInfo {
     // ------------------------------------------------------------- Properties
 
     /**
-     * The "impact" of this operation, which should be a (case-insensitive)
-     * string value "ACTION", "ACTION_INFO", "INFO", or "UNKNOWN".
+     * @return the "impact" of this operation, which should be
+     *  a (case-insensitive) string value "ACTION", "ACTION_INFO",
+     *  "INFO", or "UNKNOWN".
      */
     public String getImpact() {
         return this.impact;
@@ -71,7 +72,7 @@ public class OperationInfo extends FeatureInfo {
 
 
     /**
-     * The role of this operation ("getter", "setter", "operation", or
+     * @return the role of this operation ("getter", "setter", "operation", or
      * "constructor").
      */
     public String getRole() {
@@ -84,7 +85,7 @@ public class OperationInfo extends FeatureInfo {
 
 
     /**
-     * The fully qualified Java class name of the return type for this
+     * @return the fully qualified Java class name of the return type for this
      * operation.
      */
     public String getReturnType() {
@@ -99,7 +100,7 @@ public class OperationInfo extends FeatureInfo {
     }
 
     /**
-     * The set of parameters for this operation.
+     * @return the set of parameters for this operation.
      */
     public ParameterInfo[] getSignature() {
         Lock readLock = parametersLock.readLock();
@@ -138,6 +139,7 @@ public class OperationInfo extends FeatureInfo {
     /**
      * Create and return a <code>ModelMBeanOperationInfo</code> object that
      * corresponds to the attribute described by this instance.
+     * @return the operation info
      */
     MBeanOperationInfo createOperationInfo() {
 

==================================================
Registry.java
index a6f4edc77d..758d9436e5 100644
--- a/java/org/apache/tomcat/util/modeler/ParameterInfo.java
+++ b/java/org/apache/tomcat/util/modeler/ParameterInfo.java
@@ -43,6 +43,7 @@ public class ParameterInfo extends FeatureInfo {
     /**
      * Create and return a <code>MBeanParameterInfo</code> object that
      * corresponds to the parameter described by this instance.
+     * @return a parameter info
      */
     public MBeanParameterInfo createParameterInfo() {
 

==================================================
RegistryMBean.java
index 54113905ab..c6dcda63bc 100644
--- a/java/org/apache/tomcat/util/modeler/Registry.java
+++ b/java/org/apache/tomcat/util/modeler/Registry.java
@@ -137,7 +137,7 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
      * loader will be used ( if setUseContextClassLoader is called ) or the
      * default registry is returned.
      * @param guard Prevent access to the registry by untrusted components
-     *
+     * @return the registry
      * @since 1.1
      */
     public static synchronized Registry getRegistry(Object key, Object guard) {
@@ -187,7 +187,8 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
         searchedPaths=new HashMap<>();
     }
 
-    /** Register a bean by creating a modeler mbean and adding it to the
+    /**
+     * Register a bean by creating a modeler mbean and adding it to the
      * MBeanServer.
      *
      * If metadata is not loaded, we'll look up and read a file named
@@ -213,7 +214,7 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
      * @param type The type of the mbean, as declared in mbeans-descriptors. If
      * null, the name of the class will be used. This can be used as a hint or
      * by subclasses.
-     *
+     * @throws Exception if a registration error occurred
      * @since 1.1
      */
     @Override
@@ -223,10 +224,11 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
         registerComponent(bean, new ObjectName(oname), type);
     }
 
-    /** Unregister a component. We'll first check if it is registered,
+    /**
+     * Unregister a component. We'll first check if it is registered,
      * and mask all errors. This is mostly a helper.
      *
-     * @param oname
+     * @param oname Name used for unregistration
      *
      * @since 1.1
      */
@@ -240,13 +242,14 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
     }
 
 
-    /** Invoke a operation on a list of mbeans. Can be used to implement
+    /**
+     * Invoke a operation on a list of mbeans. Can be used to implement
      * lifecycle operations.
      *
      * @param mbeans list of ObjectName on which we'll invoke the operations
      * @param operation  Name of the operation ( init, start, stop, etc)
      * @param failFirst  If false, exceptions will be ignored
-     * @throws Exception
+     * @throws Exception Error invoking operation
      * @since 1.1
      */
     @Override
@@ -277,12 +280,13 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
 
     // -------------------- ID registry --------------------
 
-    /** Return an int ID for faster access. Will be used for notifications
+    /**
+     * Return an int ID for faster access. Will be used for notifications
      * and for other operations we want to optimize.
      *
      * @param domain Namespace
-     * @param name  Type of the notification
-     * @return  An unique id for the domain:name combination
+     * @param name Type of the notification
+     * @return An unique id for the domain:name combination
      * @since 1.1
      */
     @Override
@@ -339,6 +343,7 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
      *
      * @param name Name of the managed bean to be returned. Since 1.1, both
      *   short names or the full name of the class can be used.
+     * @return the managed bean
      * @since 1.0
      */
     public ManagedBean findManagedBean(String name) {
@@ -351,10 +356,11 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
 
     // -------------------- Helpers  --------------------
 
-    /** Get the type of an attribute of the object, from the metadata.
+    /**
+     * Get the type of an attribute of the object, from the metadata.
      *
-     * @param oname
-     * @param attName
+     * @param oname The bean name
+     * @param attName The attribute name
      * @return null if metadata about the attribute is not found
      * @since 1.1
      */
@@ -379,10 +385,11 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
         return null;
     }
 
-    /** Find the operation info for a method
+    /**
+     * Find the operation info for a method
      *
-     * @param oname
-     * @param opName
+     * @param oname The bean name
+     * @param opName The operation name
      * @return the operation info for the specified operation
      */
     public MBeanOperationInfo getMethodInfo( ObjectName oname, String opName )
@@ -403,10 +410,11 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
         return null;
     }
 
-    /** Unregister a component. This is just a helper that
+    /**
+     * Unregister a component. This is just a helper that
      * avoids exceptions by checking if the mbean is already registered
      *
-     * @param oname
+     * @param oname The bean name
      */
     public void unregisterComponent( ObjectName oname ) {
         try {
@@ -421,6 +429,7 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
     /**
      * Factory method to create (if necessary) and return our
      * <code>MBeanServer</code> instance.
+     * @return the MBean server
      */
     public synchronized MBeanServer getMBeanServer() {
         if (server == null) {
@@ -440,7 +449,13 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
         return server;
     }
 
-    /** Find or load metadata.
+    /**
+     * Find or load metadata.
+     * @param bean The bean
+     * @param beanClass The bean class
+     * @param type The registry type
+     * @return the managed bean
+     * @throws Exception An error occurred
      */
     public ManagedBean findManagedBean(Object bean, Class<?> beanClass,
             String type) throws Exception {
@@ -487,7 +502,8 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
     }
 
 
-    /** EXPERIMENTAL Convert a string to object, based on type. Used by several
+    /**
+     * EXPERIMENTAL Convert a string to object, based on type. Used by several
      * components. We could provide some pluggability. It is here to keep
      * things consistent and avoid duplication in other tasks
      *
@@ -522,13 +538,14 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
         return objValue;
     }
 
-    /** Experimental.
+    /**
+     * Experimental. Load descriptors.
      *
-     * @param sourceType
-     * @param source
-     * @param param
+     * @param sourceType The source type
+     * @param source The bean
+     * @param param A type to load
      * @return List of descriptors
-     * @throws Exception
+     * @throws Exception Error loading descriptors
      */
     public List<ObjectName> load( String sourceType, Object source,
             String param) throws Exception {
@@ -577,13 +594,13 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
     }
 
 
-    /** Register a component
-     * XXX make it private
+    /**
+     * Register a component
      *
-     * @param bean
-     * @param oname
-     * @param type
-     * @throws Exception
+     * @param bean The bean
+     * @param oname The object name
+     * @param type The registry type
+     * @throws Exception Error registering component
      */
     public void registerComponent(Object bean, ObjectName oname, String type)
            throws Exception
@@ -621,10 +638,12 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
         }
     }
 
-    /** Lookup the component descriptor in the package and
+    /**
+     * Lookup the component descriptor in the package and
      * in the parent packages.
      *
-     * @param packageName
+     * @param packageName The package name
+     * @param classLoader The class loader
      */
     public void loadDescriptors( String packageName, ClassLoader classLoader  ) {
         String res=packageName.replace( '.', '/');
@@ -653,11 +672,9 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
         }
     }
 
-    /** Lookup the component descriptor in the package and
+    /**
+     * Lookup the component descriptor in the package and
      * in the parent packages.
-     *
-     * @param beanClass
-     * @param type
      */
     private void findDescriptor(Class<?> beanClass, String type) {
         if( type==null ) {

==================================================
MbeansDescriptorsIntrospectionSource.java
index 3a7c66f89c..17317eaec9 100644
--- a/java/org/apache/tomcat/util/modeler/RegistryMBean.java
+++ b/java/org/apache/tomcat/util/modeler/RegistryMBean.java
@@ -40,18 +40,20 @@ import javax.management.ObjectName;
  */
 public interface RegistryMBean {
 
-    /** Invoke an operation on a set of mbeans.
+    /**
+     * Invoke an operation on a set of mbeans.
      *
      * @param mbeans List of ObjectNames
      * @param operation Operation to perform. Typically "init" "start" "stop" or "destroy"
      * @param failFirst Behavior in case of exceptions - if false we'll ignore
      *      errors
-     * @throws Exception
+     * @throws Exception Error invoking operation
      */
-    public void invoke( List<ObjectName> mbeans, String operation, boolean failFirst )
+    public void invoke(List<ObjectName> mbeans, String operation, boolean failFirst)
             throws Exception;
 
-    /** Register a bean by creating a modeler mbean and adding it to the
+    /**
+     * Register a bean by creating a modeler mbean and adding it to the
      * MBeanServer.
      *
      * If metadata is not loaded, we'll look up and read a file named
@@ -77,23 +79,26 @@ public interface RegistryMBean {
      * @param type The type of the mbean, as declared in mbeans-descriptors. If
      * null, the name of the class will be used. This can be used as a hint or
      * by subclasses.
+     * @throws Exception Error registering MBean
      *
      * @since 1.1
      */
     public void registerComponent(Object bean, String oname, String type)
            throws Exception;
 
-    /** Unregister a component. We'll first check if it is registered,
+    /**
+     * Unregister a component. We'll first check if it is registered,
      * and mask all errors. This is mostly a helper.
      *
-     * @param oname
+     * @param oname The name used by the bean
      *
      * @since 1.1
      */
-    public void unregisterComponent( String oname );
+    public void unregisterComponent(String oname);
 
 
-     /** Return an int ID for faster access. Will be used for notifications
+     /**
+      * Return an int ID for faster access. Will be used for notifications
       * and for other operations we want to optimize.
       *
       * @param domain Namespace
@@ -101,10 +106,11 @@ public interface RegistryMBean {
       * @return  An unique id for the domain:name combination
       * @since 1.1
       */
-    public int getId( String domain, String name);
+    public int getId(String domain, String name);
 
 
-    /** Reset all metadata cached by this registry. Should be called
+    /**
+     * Reset all metadata cached by this registry. Should be called
      * to support reloading. Existing mbeans will not be affected or modified.
      *
      * It will be called automatically if the Registry is unregistered.

==================================================
ModelerSource.java
index 788eac012d..f3637f404d 100644
--- a/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsIntrospectionSource.java
+++ b/java/org/apache/tomcat/util/modeler/modules/MbeansDescriptorsIntrospectionSource.java
@@ -49,9 +49,10 @@ public class MbeansDescriptorsIntrospectionSource extends ModelerSource
         this.registry=reg;
     }
 
-    /** Used if a single component is loaded
+    /**
+     * Used if a single component is loaded
      *
-     * @param type
+     * @param type The type
      */
     public void setType( String type ) {
        this.type=type;

==================================================
ConnectionPool.java
index 582b2f1751..d2699b8337 100644
--- a/java/org/apache/tomcat/util/modeler/modules/ModelerSource.java
+++ b/java/org/apache/tomcat/util/modeler/modules/ModelerSource.java
@@ -31,10 +31,11 @@ public abstract class ModelerSource {
     /**
      * Load data, returns a list of items.
      *
-     * @param registry
-     * @param type
+     * @param registry The registry
+     * @param type The bean registry type
      * @param source Introspected object or some other source
-     * @throws Exception
+     * @return a list of object names
+     * @throws Exception Error loading descriptors
      */
     public abstract List<ObjectName> loadDescriptors(Registry registry,
             String type, Object source) throws Exception;

==================================================
DataSource.java
index 7077cc595e..46c9333384 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -134,7 +134,7 @@ public class ConnectionPool {
      * Instantiate a connection pool. This will create connections if initialSize is larger than 0.
      * The {@link PoolProperties} should not be reused for another connection pool.
      * @param prop PoolProperties - all the properties for this connection pool
-     * @throws SQLException
+     * @throws SQLException Pool initialization error
      */
     public ConnectionPool(PoolConfiguration prop) throws SQLException {
         //setup quick access variables and pools
@@ -148,7 +148,7 @@ public class ConnectionPool {
      * If a connection is not retrieved, the Future must be cancelled in order for the connection to be returned
      * to the pool.
      * @return a Future containing a reference to the connection or the future connection
-     * @throws SQLException
+     * @throws SQLException Cannot use asyncronous connect
      */
     public Future<Connection> getConnectionAsync() throws SQLException {
         try {
@@ -193,7 +193,8 @@ public class ConnectionPool {
      * maxActive} connections a connection is returned immediately. If no
      * connection is available, the pool will attempt to fetch a connection for
      * {@link PoolProperties#maxWait maxWait} milliseconds.
-     *
+     * @param username The user name to use for the connection
+     * @param password The password for the connection
      * @return Connection - a java.sql.Connection/javax.sql.PooledConnection
      *         reflection proxy, wrapping the underlying object.
      * @throws SQLException
@@ -337,8 +338,9 @@ public class ConnectionPool {
     /**
      * Creates and caches a {@link java.lang.reflect.Constructor} used to instantiate the proxy object.
      * We cache this, since the creation of a constructor is fairly slow.
+     * @param xa Use a XA connection
      * @return constructor used to instantiate the wrapper object
-     * @throws NoSuchMethodException
+     * @throws NoSuchMethodException Failed to get a constructor
      */
     public Constructor<?> getProxyConstructor(boolean xa) throws NoSuchMethodException {
         //cache the constructor
@@ -607,8 +609,10 @@ public class ConnectionPool {
      * Thread safe way to retrieve a connection from the pool
      * @param wait - time to wait, overrides the maxWait from the properties,
      * set to -1 if you wish to use maxWait, 0 if you wish no wait time.
-     * @return PooledConnection
-     * @throws SQLException
+     * @param username The user name to use for the connection
+     * @param password The password for the connection
+     * @return a connection
+     * @throws SQLException Failed to get a connection
      */
     private PooledConnection borrowConnection(int wait, String username, String password) throws SQLException {
 
@@ -694,8 +698,10 @@ public class ConnectionPool {
      * Creates a JDBC connection and tries to connect to the database.
      * @param now timestamp of when this was called
      * @param notUsed Argument not used
+     * @param username The user name to use for the connection
+     * @param password The password for the connection
      * @return a PooledConnection that has been connected
-     * @throws SQLException
+     * @throws SQLException Failed to get a connection
      */
     protected PooledConnection createConnection(long now, PooledConnection notUsed, String username, String password) throws SQLException {
         //no connections where available we'll create one
@@ -746,7 +752,9 @@ public class ConnectionPool {
      * Validates and configures a previously idle connection
      * @param now - timestamp
      * @param con - the connection to validate and configure
-     * @return con
+     * @param username The user name to use for the connection
+     * @param password The password for the connection
+     * @return a connection
      * @throws SQLException if a validation error happens
      */
     protected PooledConnection borrowConnection(long now, PooledConnection con, String username, String password) throws SQLException {
@@ -831,7 +839,7 @@ public class ConnectionPool {
     }
     /**
      * Terminate the current transaction for the given connection.
-     * @param con
+     * @param con The connection
      * @return <code>true</code> if the connection TX termination succeeded
      *         otherwise <code>false</code>
      */
@@ -858,7 +866,7 @@ public class ConnectionPool {
      * Determines if a connection should be closed upon return to the pool.
      * @param con - the connection
      * @param action - the validation action that should be performed
-     * @return true if the connection should be closed
+     * @return <code>true</code> if the connection should be closed
      */
     protected boolean shouldClose(PooledConnection con, int action) {
         if (con.getConnectionVersion() < getPoolVersion()) return true;
@@ -921,7 +929,7 @@ public class ConnectionPool {
     /**
      * Determines if a connection should be abandoned based on
      * {@link PoolProperties#abandonWhenPercentageFull} setting.
-     * @return true if the connection should be abandoned
+     * @return <code>true</code> if the connection should be abandoned
      */
     protected boolean shouldAbandon() {
         if (poolProperties.getAbandonWhenPercentageFull()==0) return true;
@@ -1083,6 +1091,7 @@ public class ConnectionPool {
 
     /**
      * Create a new pooled connection object. Not connected nor validated.
+     * @param incrementCounter <code>true</code> to increment the connection count
      * @return a pooled connection object
      */
     protected PooledConnection create(boolean incrementCounter) {
@@ -1114,7 +1123,7 @@ public class ConnectionPool {
 
     /**
      * Hook to perform final actions on a pooled connection object once it has been disconnected and will be discarded
-     * @param con
+     * @param con The connection
      */
     protected void finalize(PooledConnection con) {
         JdbcInterceptor handler = con.getHandler();
@@ -1126,7 +1135,8 @@ public class ConnectionPool {
 
     /**
      * Hook to perform final actions on a pooled connection object once it has been disconnected and will be discarded
-     * @param con
+     * @param con The connection
+     * @param finalizing <code>true</code> if finalizing the connection
      */
     protected void disconnectEvent(PooledConnection con, boolean finalizing) {
         JdbcInterceptor handler = con.getHandler();

==================================================
DataSourceFactory.java
index b002fbcbe9..28beb7afb2 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSource.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSource.java
@@ -47,7 +47,7 @@ public class DataSource extends DataSourceProxy implements javax.sql.DataSource,
 
     /**
      * Constructs a DataSource object wrapping a connection
-     * @param poolProperties
+     * @param poolProperties The pool properties
      */
     public DataSource(PoolConfiguration poolProperties) {
         super(poolProperties);
@@ -111,7 +111,7 @@ public class DataSource extends DataSourceProxy implements javax.sql.DataSource,
      * Creates the ObjectName for the ConnectionPoolMBean object to be registered
      * @param original the ObjectName for the DataSource
      * @return the ObjectName for the ConnectionPoolMBean
-     * @throws MalformedObjectNameException
+     * @throws MalformedObjectNameException Invalid object name
      */
     public ObjectName createObjectName(ObjectName original) throws MalformedObjectNameException {
         String domain = ConnectionPool.POOL_JMX_DOMAIN;

==================================================
DataSourceProxy.java
index 4989be5c6c..480ad302b9 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java
@@ -536,6 +536,7 @@ public class DataSourceFactory implements ObjectFactory {
      * given properties.
      *
      * @param properties the datasource configuration properties
+     * @return the datasource
      * @throws Exception if an error occurs creating the data source
      */
     public DataSource createDataSource(Properties properties) throws Exception {
@@ -580,9 +581,9 @@ public class DataSourceFactory implements ObjectFactory {
     }
 
     /**
-     * <p>Parse properties from the string. Format of the string must be [propertyName=property;]*<p>
-     * @param propText
-     * @return Properties
+     * Parse properties from the string. Format of the string must be [propertyName=property;]*.
+     * @param propText The properties string
+     * @return the properties
      */
     protected static Properties getProperties(String propText) {
         return PoolProperties.getProperties(propText,null);

==================================================
JdbcInterceptor.java
index 2d7f7dba29..d4d6fd170e 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
@@ -74,7 +74,12 @@ public class DataSourceProxy implements PoolConfiguration {
     }
 
     /**
+     * Get a database connection.
      * {@link javax.sql.DataSource#getConnection()}
+     * @param username The user name
+     * @param password The password
+     * @return the connection
+     * @throws SQLException Connection error
      */
     public Connection getConnection(String username, String password) throws SQLException {
         if (this.getPoolProperties().isAlternateUsernameAllowed()) {
@@ -92,8 +97,8 @@ public class DataSourceProxy implements PoolConfiguration {
 
     /**
      * Sets up the connection pool, by creating a pooling driver.
-     * @return Driver
-     * @throws SQLException
+     * @return the connection pool
+     * @throws SQLException Error creating pool
      */
     public ConnectionPool createPool() throws SQLException {
         if (pool != null) {
@@ -105,8 +110,6 @@ public class DataSourceProxy implements PoolConfiguration {
 
     /**
      * Sets up the connection pool, by creating a pooling driver.
-     * @return Driver
-     * @throws SQLException
      */
     private synchronized ConnectionPool pCreatePool() throws SQLException {
         if (pool != null) {
@@ -118,9 +121,11 @@ public class DataSourceProxy implements PoolConfiguration {
     }
 
     /**
+     * Get a database connection.
      * {@link javax.sql.DataSource#getConnection()}
+     * @return the connection
+     * @throws SQLException Connection error
      */
-
     public Connection getConnection() throws SQLException {
         if (pool == null)
             return createPool().getConnection();
@@ -130,7 +135,7 @@ public class DataSourceProxy implements PoolConfiguration {
     /**
      * Invokes an sync operation to retrieve the connection.
      * @return a Future containing a reference to the connection when it becomes available
-     * @throws SQLException
+     * @throws SQLException Connection error
      */
     public Future<Connection> getConnectionAsync() throws SQLException {
         if (pool == null)
@@ -139,7 +144,10 @@ public class DataSourceProxy implements PoolConfiguration {
     }
 
     /**
+     * Get a database connection.
      * {@link javax.sql.XADataSource#getXAConnection()}
+     * @return the connection
+     * @throws SQLException Connection error
      */
     public XAConnection getXAConnection() throws SQLException {
         Connection con = getConnection();
@@ -156,7 +164,12 @@ public class DataSourceProxy implements PoolConfiguration {
     }
 
     /**
+     * Get a database connection.
      * {@link javax.sql.XADataSource#getXAConnection(String, String)}
+     * @param username The user name
+     * @param password The password
+     * @return the connection
+     * @throws SQLException Connection error
      */
     public XAConnection getXAConnection(String username, String password) throws SQLException {
         Connection con = getConnection(username, password);
@@ -174,16 +187,22 @@ public class DataSourceProxy implements PoolConfiguration {
 
 
     /**
+     * Get a database connection.
      * {@link javax.sql.DataSource#getConnection()}
+     * @return the connection
+     * @throws SQLException Connection error
      */
     public javax.sql.PooledConnection getPooledConnection() throws SQLException {
         return (javax.sql.PooledConnection) getConnection();
     }
 
     /**
+     * Get a database connection.
      * {@link javax.sql.DataSource#getConnection()}
      * @param username unused
      * @param password unused
+     * @return the connection
+     * @throws SQLException Connection error
      */
     public javax.sql.PooledConnection getPooledConnection(String username,
             String password) throws SQLException {
@@ -563,6 +582,8 @@ public class DataSourceProxy implements PoolConfiguration {
     /**
      * no-op
      * {@link javax.sql.DataSource#getParentLogger}
+     * @return no reaturn value
+     * @throws SQLFeatureNotSupportedException Unsupported
      */
     public Logger getParentLogger() throws SQLFeatureNotSupportedException {
         throw new SQLFeatureNotSupportedException();
@@ -571,6 +592,8 @@ public class DataSourceProxy implements PoolConfiguration {
     /**
      * no-op
      * {@link javax.sql.DataSource#getLogWriter}
+     * @return null
+     * @throws SQLException No exception
      */
     @SuppressWarnings("unused") // Has to match signature in DataSource
     public PrintWriter getLogWriter() throws SQLException {
@@ -581,6 +604,8 @@ public class DataSourceProxy implements PoolConfiguration {
     /**
      * no-op
      * {@link javax.sql.DataSource#setLogWriter(PrintWriter)}
+     * @param out Ignored
+     * @throws SQLException No exception
      */
     @SuppressWarnings("unused") // Has to match signature in DataSource
     public void setLogWriter(PrintWriter out) throws SQLException {
@@ -590,6 +615,7 @@ public class DataSourceProxy implements PoolConfiguration {
     /**
      * no-op
      * {@link javax.sql.DataSource#getLoginTimeout}
+     * @return the timeout
      */
     public int getLoginTimeout() {
         if (poolProperties == null) {
@@ -601,6 +627,7 @@ public class DataSourceProxy implements PoolConfiguration {
 
     /**
      * {@link javax.sql.DataSource#setLoginTimeout(int)}
+     * @param i The timeout value
      */
     public void setLoginTimeout(int i) {
         if (poolProperties == null) {
@@ -647,6 +674,7 @@ public class DataSourceProxy implements PoolConfiguration {
 
     /**
      * {@link #getIdle()}
+     * @return the number of established but idle connections
      */
     public int getNumIdle() {
         return getIdle();

==================================================
PoolConfiguration.java
index e4a693566d..c361735be7 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/JdbcInterceptor.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/JdbcInterceptor.java
@@ -119,7 +119,7 @@ public abstract class JdbcInterceptor implements InvocationHandler {
 
     /**
      * configures the next interceptor in the chain
-     * @param next
+     * @param next The next chain item
      */
     public void setNext(JdbcInterceptor next) {
         this.next = next;
@@ -127,8 +127,8 @@ public abstract class JdbcInterceptor implements InvocationHandler {
 
     /**
      * Performs a string comparison, using references unless the useEquals property is set to true.
-     * @param name1
-     * @param name2
+     * @param name1 The first name
+     * @param name2 The second name
      * @return true if name1 is equal to name2 based on {@link #useEquals}
      */
     public boolean compare(String name1, String name2) {
@@ -143,9 +143,9 @@ public abstract class JdbcInterceptor implements InvocationHandler {
      * Compares a method name (String) to a method (Method)
      * {@link #compare(String,String)}
      * Uses reference comparison unless the useEquals property is set to true
-     * @param methodName
-     * @param method
-     * @return true if the name matches
+     * @param methodName The method name
+     * @param method The method
+     * @return <code>true</code> if the name matches
      */
     public boolean compare(String methodName, Method method) {
         return compare(methodName, method.getName());
@@ -186,7 +186,7 @@ public abstract class JdbcInterceptor implements InvocationHandler {
      * Called during the creation of an interceptor
      * The properties can be set during the configuration of an interceptor
      * Override this method to perform type casts between string values and object properties
-     * @param properties
+     * @param properties The properties
      */
     public void setProperties(Map<String,InterceptorProperty> properties) {
         this.properties = properties;
@@ -208,7 +208,7 @@ public abstract class JdbcInterceptor implements InvocationHandler {
     /**
      * Set to true if string comparisons (for the {@link #compare(String, Method)} and {@link #compare(String, String)} methods) should use the Object.equals(Object) method
      * The default is false
-     * @param useEquals
+     * @param useEquals <code>true</code> if equals will be used for comparisons
      */
     public void setUseEquals(boolean useEquals) {
         this.useEquals = useEquals;

==================================================
PooledConnection.java
index 4799eb7989..3151ada83f 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java
@@ -55,8 +55,8 @@ public interface PoolConfiguration {
     public int getAbandonWhenPercentageFull();
 
     /**
-     * Returns true if a fair queue is being used by the connection pool
-     * @return true if a fair waiting queue is being used
+     * Returns <code>true</code> if a fair queue is being used by the connection pool
+     * @return <code>true</code> if a fair waiting queue is being used
      */
     public boolean isFairQueue();
 
@@ -66,7 +66,7 @@ public interface PoolConfiguration {
      * This uses the {@link FairBlockingQueue} implementation for the list of the idle connections.
      * The default value is true.
      * This flag is required when you want to use asynchronous connection retrieval.
-     * @param fairQueue
+     * @param fairQueue <code>true</code> to use a fair queue
      */
     public void setFairQueue(boolean fairQueue);
 
@@ -74,7 +74,7 @@ public interface PoolConfiguration {
      * Property not used. Access is always allowed.
      * Access can be achieved by calling unwrap on the pooled connection. see {@link javax.sql.DataSource} interface
      * or call getConnection through reflection or cast the object as {@link javax.sql.PooledConnection}
-     * @return true
+     * @return <code>true</code>
      */
     public boolean isAccessToUnderlyingConnectionAllowed();
 
@@ -89,6 +89,7 @@ public interface PoolConfiguration {
      * Format of the string is [propertyName=property;] <br>
      * NOTE - The "user" and "password" properties will be passed explicitly, so they do not need to be included here.
      * The default value is null.
+     * @return the connection properties
      */
     public String getConnectionProperties();
 
@@ -108,7 +109,7 @@ public interface PoolConfiguration {
 
     /**
      * Overrides the database properties passed into the  {@link java.sql.Driver#connect(String, Properties)} method.
-     * @param dbProperties
+     * @param dbProperties The database properties
      */
     public void setDbProperties(Properties dbProperties);
 
@@ -341,14 +342,14 @@ public interface PoolConfiguration {
     /**
      * Sets the password to establish the connection with.
      * The password will be included as a database property with the name 'password'.
-     * @param password
+     * @param password The password
      * @see #getDbProperties()
      */
     public void setPassword(String password);
 
     /**
      * @see #getName()
-     * @return name
+     * @return the pool name
      */
     public String getPoolName();
 
@@ -361,7 +362,7 @@ public interface PoolConfiguration {
     /**
      * Sets the username used to establish the connection with
      * It will also be a property called 'user' in the database properties.
-     * @param username
+     * @param username The user name
      * @see #getDbProperties()
      */
     public void setUsername(String username);
@@ -532,6 +533,7 @@ public interface PoolConfiguration {
     /**
      * The timeout in seconds before a connection validation queries fail.
      * A value less than or equal to zero will disable this feature.  Defaults to -1.
+     * @param validationQueryTimeout The timeout value
      */
     public void setValidationQueryTimeout(int validationQueryTimeout);
 
@@ -559,6 +561,7 @@ public interface PoolConfiguration {
      * Sets the validator object
      * If this is a non null object, it will be used as a validator instead of the validationQuery
      * If this is null, remove the usage of the validator.
+     * @param validator The validator object
      */
     public void setValidator(Validator validator);
 
@@ -816,6 +819,7 @@ public interface PoolConfiguration {
 
     /**
      * @see PoolConfiguration#setCommitOnReturn(boolean)
+     * @return <code>true</code> if the pool should commit when a connection is returned to it
      */
     public boolean getCommitOnReturn();
 
@@ -830,20 +834,21 @@ public interface PoolConfiguration {
 
     /**
      * @see PoolConfiguration#setRollbackOnReturn(boolean)
+     * @return <code>true</code> if the pool should rollback when a connection is returned to it
      */
     public boolean getRollbackOnReturn();
 
     /**
-     * If set to true, the connection will be wrapped with facade that will disallow the connection to be used after
-     * {@link java.sql.Connection#close()} is called. If set to true, after {@link java.sql.Connection#close()} all calls except
+     * If set to <code>true</code>, the connection will be wrapped with facade that will disallow the connection to be used after
+     * {@link java.sql.Connection#close()} is called. If set to <code>true</code>, after {@link java.sql.Connection#close()} all calls except
      * {@link java.sql.Connection#close()} and {@link java.sql.Connection#isClosed()} will throw an exception.
-     * @param useDisposableConnectionFacade
+     * @param useDisposableConnectionFacade <code>true</code> to use a facade
      */
     public void setUseDisposableConnectionFacade(boolean useDisposableConnectionFacade);
     /**
-     * Returns true if this connection pool is configured to use a connection facade to prevent re-use of connection after
+     * Returns <code>true</code> if this connection pool is configured to use a connection facade to prevent re-use of connection after
      * {@link java.sql.Connection#close()} has been invoked
-     * @return true if {@link java.sql.Connection#close()} has been invoked.
+     * @return <code>true</code> if {@link java.sql.Connection#close()} has been invoked.
      */
     public boolean getUseDisposableConnectionFacade();
 
@@ -884,6 +889,7 @@ public interface PoolConfiguration {
     public void setIgnoreExceptionOnPreLoad(boolean ignoreExceptionOnPreLoad);
 
     /**
+     * @return <code>true</code> to ignore exceptions
      * @see PoolConfiguration#setIgnoreExceptionOnPreLoad(boolean)
      */
     public boolean isIgnoreExceptionOnPreLoad();

==================================================
XADataSource.java
index 9f3040cc97..75cb43a403 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java
@@ -136,7 +136,10 @@ public class PooledConnection {
 
     /**
      * @deprecated use {@link #shouldForceReconnect(String, String)}
-     * method kept since it was public, to avoid changing interface. name was pooo
+     * method kept since it was public, to avoid changing interface.
+     * @param username The user name
+     * @param password The password
+     * @return <code>true</code>if the pool does not need to reconnect
      */
     @Deprecated
     public boolean checkUser(String username, String password) {
@@ -405,9 +408,9 @@ public class PooledConnection {
     }
 
     /**
-     * Returns true if the connection pool is configured
+     * Returns <code>true</code> if the connection pool is configured
      * to do validation for a certain action.
-     * @param action
+     * @param action The validation action
      */
     private boolean doValidate(int action) {
         if (action == PooledConnection.VALIDATE_BORROW &&
@@ -429,9 +432,12 @@ public class PooledConnection {
             return false;
     }
 
-    /**Returns true if the object is still valid. if not
+    /**
+     * Returns <code>true</code> if the object is still valid. if not
      * the pool will call the getExpiredAction() and follow up with one
      * of the four expired methods
+     * @param validateAction The value
+     * @return <code>true</code> if the connection is valid
      */
     public boolean validate(int validateAction) {
         return validate(validateAction,null);
@@ -604,7 +610,7 @@ public class PooledConnection {
     /**
      * Sets the pool configuration for this connection and connection pool.
      * Object is shared with the {@link ConnectionPool}
-     * @param poolProperties
+     * @param poolProperties The pool properties
      */
     public void setPoolProperties(PoolConfiguration poolProperties) {
         this.poolProperties = poolProperties;

==================================================
AbstractCreateStatementInterceptor.java
index ce829d3a68..2a2f3740e9 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/XADataSource.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/XADataSource.java
@@ -28,7 +28,7 @@ public class XADataSource extends DataSource implements javax.sql.XADataSource {
 
     /**
      * Constructs a DataSource object wrapping a connection
-     * @param poolProperties
+     * @param poolProperties The pool configuration
      */
     public XADataSource(PoolConfiguration poolProperties) {
         super(poolProperties);

==================================================
AbstractQueryReport.java
index 98b4dc429e..11fc655d58 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractCreateStatementInterceptor.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractCreateStatementInterceptor.java
@@ -81,6 +81,7 @@ public abstract class  AbstractCreateStatementInterceptor extends JdbcIntercepto
      * @param method the method that was called. It will be one of the methods defined in {@link #STATEMENT_TYPES}
      * @param args the arguments to the method
      * @param statement the statement that the underlying connection created
+     * @param time Elapsed time
      * @return a {@link java.sql.Statement} object
      */
     public abstract Object createStatement(Object proxy, Method method, Object[] args, Object statement, long time);

==================================================
SlowQueryReport.java
index 751094577f..499839f05d 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractQueryReport.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractQueryReport.java
@@ -148,7 +148,7 @@ public abstract class AbstractQueryReport extends AbstractCreateStatementInterce
      * @param idx - the index of the constructor
      * @param clazz - the interface that the proxy will implement
      * @return - returns a constructor used to create new instances
-     * @throws NoSuchMethodException
+     * @throws NoSuchMethodException Constructor not found
      */
     protected Constructor<?> getConstructor(int idx, Class<?> clazz) throws NoSuchMethodException {
         if (constructors[idx]==null) {

==================================================
StatementDecoratorInterceptor.java
index 12685f4e5d..1ea1ca666c 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
@@ -215,7 +215,7 @@ public class SlowQueryReport extends AbstractQueryReport  {
 
     /**
      * Sort QueryStats by last invocation time
-     * @param queries
+     * @param queries The queries map
      */
     protected void removeOldest(ConcurrentHashMap<String,QueryStats> queries) {
         ArrayList<QueryStats> list = new ArrayList<>(queries.values());

==================================================
ConnectionPool.java
index e5036b254e..f48b1b840e 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementDecoratorInterceptor.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementDecoratorInterceptor.java
@@ -65,7 +65,7 @@ public class StatementDecoratorInterceptor extends AbstractCreateStatementInterc
      * @param clazz
      *            - the interface that the proxy will implement
      * @return - returns a constructor used to create new instances
-     * @throws NoSuchMethodException
+     * @throws NoSuchMethodException Constructor not found
      */
     protected Constructor<?> getConstructor(int idx, Class<?> clazz) throws NoSuchMethodException {
         if (constructors[idx] == null) {
@@ -139,6 +139,9 @@ public class StatementDecoratorInterceptor extends AbstractCreateStatementInterc
      * @param sql           The sql of of the statement
      *
      * @return  A new proxy for the Statement
+     * @throws InstantiationException Couldn't instantiate object
+     * @throws IllegalAccessException Inaccessible constructor
+     * @throws InvocationTargetException Exception thrown from constructor
      */
     protected Object createDecorator(Object proxy, Method method, Object[] args,
                                      Object statement, Constructor<?> constructor, String sql)

==================================================
