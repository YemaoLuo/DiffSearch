498f83d600b62b323a9bcd8b6d4868b67ecec504
==================================================
Fix some edge cases in the NIO connector when handling requests that are not received all at the same time and the socket needs to be returned to the poller.
==================================================
Mark Emlyn
==================================================
Tue Aug 24 18:12:51 2010 +0000
==================================================
Http11NioProcessor.java
Fix some edge cases in the NIO connector when handling requests that are not received all at the same time and the socket needs to be returned to the poller.
This should fix the current Gump failures in the NIO tests.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@988645 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11NioProtocol.java
index 8421173e83..d86758bd9f 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -308,13 +308,18 @@ public class Http11NioProcessor extends AbstractHttp11Processor implements Actio
                     socket.getIOChannel().socket().setSoTimeout((int)soTimeout);
                 }
                 if (!inputBuffer.parseRequestLine(keptAlive)) {
-                    //no data available yet, since we might have read part
-                    //of the request line, we can't recycle the processor
+                    // Haven't finished reading the request so keep the socket
+                    // open
                     openSocket = true;
-                    recycle = false;
+                    // Check to see if we have read any of the request line yet
                     if (inputBuffer.getParsingRequestLinePhase()<2) {
-                        //keep alive timeout here
+                        // No data read, OK to recycle the processor
+                        // Continue to use keep alive timeout
                         if (keepAliveTimeout>0) ka.setTimeout(keepAliveTimeout);
+                    } else {
+                        // Started to read request line. Need to keep processor
+                        // associated with socket
+                        recycle = false;
                     }
                     break;
                 }

==================================================
