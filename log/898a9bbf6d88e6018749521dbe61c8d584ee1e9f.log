898a9bbf6d88e6018749521dbe61c8d584ee1e9f
==================================================
Review of all calls to user code prior to calling InstanceManager.destroy()
==================================================
Mark Thomas
==================================================
Fri Jul 1 19:28:42 2016 +0000
==================================================
ApplicationFilterConfig.java
Review of all calls to user code prior to calling InstanceManager.destroy()

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1750995 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StandardWrapper.java
index e707374b06..0bbaf2656d 100644
--- a/java/org/apache/catalina/core/LocalStrings.properties
+++ b/java/org/apache/catalina/core/LocalStrings.properties
@@ -204,6 +204,7 @@ standardWrapper.allocate=Error allocating a servlet instance
 standardWrapper.allocateException=Allocate exception for servlet {0}
 standardWrapper.deallocateException=Deallocate exception for servlet {0}
 standardWrapper.destroyException=Servlet.destroy() for servlet {0} threw exception
+standardWrapper.destroyInstance=InstanceManager.destroy() for servlet [{0}] threw exception
 standardWrapper.initException=Servlet.init() for servlet {0} threw exception
 standardWrapper.instantiate=Error instantiating servlet class {0}
 standardWrapper.isUnavailable=Servlet {0} is currently unavailable

==================================================
AbstractProtocol.java
index 13d462e038..75999dcaad 100644
--- a/java/org/apache/catalina/core/StandardWrapper.java
+++ b/java/org/apache/catalina/core/StandardWrapper.java
@@ -1370,10 +1370,6 @@ public class StandardWrapper extends ContainerBase
                     instance.destroy();
                 }
 
-                // Annotation processing
-                if (!((Context) getParent()).getIgnoreAnnotations()) {
-                   ((StandardContext)getParent()).getInstanceManager().destroyInstance(instance);
-                }
             } catch (Throwable t) {
                 t = ExceptionUtils.unwrapInvocationTargetException(t);
                 ExceptionUtils.handleThrowable(t);
@@ -1386,6 +1382,15 @@ public class StandardWrapper extends ContainerBase
                     (sm.getString("standardWrapper.destroyException", getName()),
                      t);
             } finally {
+                // Annotation processing
+                if (!((Context) getParent()).getIgnoreAnnotations()) {
+                    try {
+                        ((Context)getParent()).getInstanceManager().destroyInstance(instance);
+                    } catch (Throwable t) {
+                        ExceptionUtils.handleThrowable(t);
+                        log.error(sm.getString("standardWrapper.destroyInstance", getName()), t);
+                    }
+                }
                 // Write captured output
                 if (swallowOutput) {
                     String log = SystemLogHandler.stopCapture();

==================================================
TagHandlerPool.java
index 10de2f8e3b..ebd3890b93 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -880,8 +880,13 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
                             ClassLoader oldCL = upgradeToken.getContextBind().bind(false, null);
                             try {
                                 httpUpgradeHandler.destroy();
-                                instanceManager.destroyInstance(httpUpgradeHandler);
                             } finally {
+                                try {
+                                    instanceManager.destroyInstance(httpUpgradeHandler);
+                                } catch (Throwable e) {
+                                    ExceptionUtils.handleThrowable(e);
+                                    getLog().error(sm.getString("abstractConnectionHandler.error"), e);
+                                }
                                 upgradeToken.getContextBind().unbind(false, oldCL);
                             }
                         }

==================================================
WsSession.java
index 5d2c9f9f74..bef2f265ac 100644
--- a/java/org/apache/jasper/runtime/TagHandlerPool.java
+++ b/java/org/apache/jasper/runtime/TagHandlerPool.java
@@ -144,15 +144,7 @@ public class TagHandlerPool {
             }
         }
         // There is no need for other threads to wait for us to release
-        handler.release();
-        try {
-            instanceManager.destroyInstance(handler);
-        } catch (Exception e) {
-            Throwable t = ExceptionUtils.unwrapInvocationTargetException(e);
-            ExceptionUtils.handleThrowable(t);
-            log.warn("Error processing preDestroy on tag instance of " +
-                    handler.getClass().getName(), t);
-        }
+        doRelease(handler);
     }
 
     /**
@@ -161,19 +153,30 @@ public class TagHandlerPool {
      */
     public synchronized void release() {
         for (int i = current; i >= 0; i--) {
-            Tag handler = handlers[i];
+            doRelease(handlers[i]);
+        }
+    }
+
+
+    private void doRelease(Tag handler) {
+        try {
             handler.release();
-            try {
-                instanceManager.destroyInstance(handler);
-            } catch (Exception e) {
-                Throwable t = ExceptionUtils.unwrapInvocationTargetException(e);
-                ExceptionUtils.handleThrowable(t);
-                log.warn("Error processing preDestroy on tag instance of "
-                        + handler.getClass().getName(), t);
-            }
+        } catch (Throwable t) {
+            ExceptionUtils.handleThrowable(t);
+            log.warn("Error processing release on tag instance of "
+                    + handler.getClass().getName(), t);
+        }
+        try {
+            instanceManager.destroyInstance(handler);
+        } catch (Exception e) {
+            Throwable t = ExceptionUtils.unwrapInvocationTargetException(e);
+            ExceptionUtils.handleThrowable(t);
+            log.warn("Error processing preDestroy on tag instance of "
+                    + handler.getClass().getName(), t);
         }
     }
 
+
     protected static String getOption(ServletConfig config, String name,
             String defaultV) {
         if (config == null)

==================================================
