623b2c9d0997481f1c5229135fa2f92e24303e47
==================================================
Expose the HttpServletRequest to CookieProcessor.generateHeader()
==================================================
Mark Thomas
==================================================
Thu Apr 2 12:36:55 2020 +0100
==================================================
Response.java
Expose the HttpServletRequest to CookieProcessor.generateHeader()



==================================================
ApplicationPushBuilder.java
index 17d086bc95..9e4b77ebf9 100644
--- a/java/org/apache/catalina/connector/Response.java
+++ b/java/org/apache/catalina/connector/Response.java
@@ -41,6 +41,7 @@ import jakarta.servlet.ServletOutputStream;
 import jakarta.servlet.ServletResponse;
 import jakarta.servlet.SessionTrackingMode;
 import jakarta.servlet.http.Cookie;
+import jakarta.servlet.http.HttpServletRequest;
 import jakarta.servlet.http.HttpServletResponse;
 import jakarta.servlet.http.HttpServletResponseWrapper;
 
@@ -943,9 +944,9 @@ public class Response implements HttpServletResponse {
         // from the generateHeader() invocation
         if (SecurityUtil.isPackageProtectionEnabled()) {
             return AccessController.doPrivileged(
-                    new PrivilegedGenerateCookieString(getContext(), cookie));
+                    new PrivilegedGenerateCookieString(getContext(), cookie, request.getRequest()));
         } else {
-            return getContext().getCookieProcessor().generateHeader(cookie);
+            return getContext().getCookieProcessor().generateHeader(cookie, request.getRequest());
         }
     }
 
@@ -1804,15 +1805,17 @@ public class Response implements HttpServletResponse {
 
         private final Context context;
         private final Cookie cookie;
+        private final HttpServletRequest request;
 
-        public PrivilegedGenerateCookieString(Context context, Cookie cookie) {
+        public PrivilegedGenerateCookieString(Context context, Cookie cookie, HttpServletRequest request) {
             this.context = context;
             this.cookie = cookie;
+            this.request = request;
         }
 
         @Override
         public String run(){
-            return context.getCookieProcessor().generateHeader(cookie);
+            return context.getCookieProcessor().generateHeader(cookie, request);
         }
     }
 

==================================================
CookieProcessor.java
index 3dbf66ed71..f3f7a6837b 100644
--- a/java/org/apache/catalina/core/ApplicationPushBuilder.java
+++ b/java/org/apache/catalina/core/ApplicationPushBuilder.java
@@ -439,7 +439,7 @@ public class ApplicationPushBuilder implements PushBuilder {
             // However, if passed a Cookie with just a name and value set it
             // will generate an appropriate header for the Cookie header on the
             // pushed request.
-            result.append(cookieProcessor.generateHeader(cookie));
+            result.append(cookieProcessor.generateHeader(cookie, null));
         }
         return result.toString();
     }

==================================================
LegacyCookieProcessor.java
index 22f44c2b43..c230d4f01d 100644
--- a/java/org/apache/tomcat/util/http/CookieProcessor.java
+++ b/java/org/apache/tomcat/util/http/CookieProcessor.java
@@ -19,6 +19,7 @@ package org.apache.tomcat.util.http;
 import java.nio.charset.Charset;
 
 import jakarta.servlet.http.Cookie;
+import jakarta.servlet.http.HttpServletRequest;
 
 public interface CookieProcessor {
 
@@ -38,9 +39,41 @@ public interface CookieProcessor {
      *
      * @return The header value in a form that can be added directly to the
      *         response
+     *
+     * @deprecated This method has been replaced with
+     *             {@link #generateHeader(Cookie, HttpServletRequest)} and will
+     *             be removed from Tomcat 10 onwards.
      */
+    @Deprecated
     String generateHeader(Cookie cookie);
 
+    /**
+     * Generate the {@code Set-Cookie} HTTP header value for the given Cookie.
+     * This method receives as parameter the servlet request so that it can make
+     * decisions based on request properties. One such use-case is decide if the
+     * SameSite attribute should be added to the cookie based on the User-Agent
+     * or other request header because there are browser versions incompatible
+     * with the SameSite attribute. This is described by <a
+     * href="https://www.chromium.org/updates/same-site/incompatible-clients">the
+     * Chromium project</a>.
+     * <p>
+     * The default implementation calls the deprecated
+     * {@link #generateHeader(Cookie)} method. Implementors should not rely on
+     * this default method as it is present only for transitional compatibility
+     * and will be removed in Tomcat 10 at the same time as the
+     * {@link #generateHeader(Cookie)} method.
+     *
+     * @param request The servlet request
+     *
+     * @param cookie The cookie for which the header will be generated
+     *
+     * @return The header value in a form that can be added directly to the
+     *         response
+     */
+    default String generateHeader(Cookie cookie, HttpServletRequest request) {
+        return generateHeader(cookie);
+    }
+
     /**
      * Obtain the character set that will be used when converting between bytes
      * and characters when parsing and/or generating HTTP headers for cookies.

==================================================
Rfc6265CookieProcessor.java
index 8702cec764..ea223852f1 100644
--- a/java/org/apache/tomcat/util/http/LegacyCookieProcessor.java
+++ b/java/org/apache/tomcat/util/http/LegacyCookieProcessor.java
@@ -23,6 +23,7 @@ import java.util.BitSet;
 import java.util.Date;
 
 import jakarta.servlet.http.Cookie;
+import jakarta.servlet.http.HttpServletRequest;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -234,6 +235,13 @@ public final class LegacyCookieProcessor extends CookieProcessorBase {
 
     @Override
     public String generateHeader(Cookie cookie) {
+        return generateHeader(cookie, null);
+    }
+
+
+    @Override
+    public String generateHeader(Cookie cookie, HttpServletRequest request) {
+
         /*
          * The spec allows some latitude on when to send the version attribute
          * with a Set-Cookie header. To be nice to clients, we'll make sure the

==================================================
TestCookieProcessorGeneration.java
index 0ed4687568..2f0c874539 100644
--- a/java/org/apache/tomcat/util/http/Rfc6265CookieProcessor.java
+++ b/java/org/apache/tomcat/util/http/Rfc6265CookieProcessor.java
@@ -29,6 +29,8 @@ import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.http.parser.Cookie;
 import org.apache.tomcat.util.res.StringManager;
 
+import jakarta.servlet.http.HttpServletRequest;
+
 public class Rfc6265CookieProcessor extends CookieProcessorBase {
 
     private static final Log log = LogFactory.getLog(Rfc6265CookieProcessor.class);
@@ -99,6 +101,12 @@ public class Rfc6265CookieProcessor extends CookieProcessorBase {
 
     @Override
     public String generateHeader(jakarta.servlet.http.Cookie cookie) {
+        return generateHeader(cookie, null);
+    }
+
+
+    @Override
+    public String generateHeader(jakarta.servlet.http.Cookie cookie, HttpServletRequest request) {
 
         // Can't use StringBuilder due to DateFormat
         StringBuffer header = new StringBuffer();

==================================================
