a871063b0c6fd82628c1563cc7baa550c003e723
==================================================
Add TLSv1.3 to the default protocols and to the
==================================================
Rainer Jung
==================================================
Tue Oct 2 21:34:11 2018 +0000
==================================================
TLS.java
Add TLSv1.3 to the default protocols and to the
"all" alias for JSSE based TLS connectors when
running on a JVM that supports TLS version 1.3.
One such JVM is OpenJDK version 11.
This line, and those below, will be ignored--

M    webapps/docs/changelog.xml
AM   java/org/apache/tomcat/util/compat/TLS.java
M    java/org/apache/tomcat/util/net/SSLHostConfig.java


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1842656 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SSLHostConfig.java
new file mode 100644
index 0000000000..e9526b02c0
--- /dev/null
+++ b/java/org/apache/tomcat/util/compat/TLS.java
@@ -0,0 +1,46 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.tomcat.util.compat;
+
+import java.security.NoSuchAlgorithmException;
+
+import javax.net.ssl.SSLContext;
+
+import org.apache.tomcat.util.net.Constants;
+
+/**
+ * This class checks for the availability of TLS features.
+ */
+public class TLS {
+
+    private static final boolean tlsv13Available;
+
+    static {
+        boolean ok = false;
+        try {
+            SSLContext sc = SSLContext.getInstance(Constants.SSL_PROTO_TLSv1_3);
+            ok = true;
+        } catch (NoSuchAlgorithmException ex) {
+        }
+        tlsv13Available = ok;
+    }
+
+    public static boolean isTlsv13Available() {
+        return tlsv13Available;
+    }
+
+}

==================================================
