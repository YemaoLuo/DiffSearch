15d88a9c3ddd3a3cd8a9172b2cb3c8b9c5e05bf2
==================================================
Make sure we use an unbounded thread pool until we have implemented some sort of rejection policy.
==================================================
Filip Hanik
==================================================
Fri Dec 15 01:58:56 2006 +0000
==================================================
ReceiverBase.java
Make sure we use an unbounded thread pool until we have implemented some sort of rejection policy.
No need to wake up the selector more than once, it is only serviced by one thread


git-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@487423 13f79535-47bb-0310-9956-ffa450edef68



==================================================
NioReceiver.java
index 330d654231..4463a0193b 100644
--- a/java/org/apache/catalina/tribes/transport/ReceiverBase.java
+++ b/java/org/apache/catalina/tribes/transport/ReceiverBase.java
@@ -19,7 +19,6 @@ import java.io.IOException;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.ServerSocket;
-import java.util.concurrent.Executor;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.ThreadPoolExecutor;
@@ -63,7 +62,7 @@ public abstract class ReceiverBase implements ChannelReceiver, ListenCallback, R
     private long tcpSelectorTimeout = 5000;
     //how many times to search for an available socket
     private int autoBind = 100;
-    private int maxThreads = 15;
+    private int maxThreads = Integer.MAX_VALUE;
     private int minThreads = 6;
     private int maxTasks = 100;
     private int minTasks = 10;
@@ -77,7 +76,7 @@ public abstract class ReceiverBase implements ChannelReceiver, ListenCallback, R
     private int timeout = 3000; //3 seconds
     private boolean useBufferPool = true;
     
-    private Executor executor;
+    private ExecutorService executor;
 
 
     public ReceiverBase() {
@@ -90,7 +89,8 @@ public abstract class ReceiverBase implements ChannelReceiver, ListenCallback, R
     }
     
     public void stop() {
-        if ( executor instanceof ExecutorService ) ((ExecutorService)executor).shutdown();
+        if ( executor != null ) executor.shutdownNow();//ignore left overs
+        executor = null;
     }
     
     /**
@@ -362,7 +362,7 @@ public abstract class ReceiverBase implements ChannelReceiver, ListenCallback, R
         return maxTasks;
     }
 
-    public Executor getExecutor() {
+    public ExecutorService getExecutor() {
         return executor;
     }
 
@@ -472,7 +472,7 @@ public abstract class ReceiverBase implements ChannelReceiver, ListenCallback, R
         this.maxTasks = maxTasks;
     }
 
-    public void setExecutor(Executor executor) {
+    public void setExecutor(ExecutorService executor) {
         this.executor = executor;
     }
 

==================================================
