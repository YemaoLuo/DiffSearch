2c26c09ae8342547745d470fbe45261f0f4712f3
==================================================
Refactor to remove some circular dependencies
==================================================
Mark Emlyn
==================================================
Fri Feb 3 12:08:09 2012 +0000
==================================================
Container.java
Refactor to remove some circular dependencies

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1240105 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ContainerBase.java
index 615781269b..a0796b218d 100644
--- a/java/org/apache/catalina/Container.java
+++ b/java/org/apache/catalina/Container.java
@@ -159,6 +159,17 @@ public interface Container extends Lifecycle {
      */
     public ObjectName getObjectName();
 
+
+    /**
+     * Calculate the key properties string to be added to an object's
+     * {@link ObjectName} to indicate that it is associated with this container.
+     *
+     * @return          A string suitable for appending to the ObjectName
+     *
+     */
+    public String getMBeanKeyProperties();
+
+
     /**
      * Return the Pipeline object that manages the Valves associated with
      * this Container.

==================================================
StandardHost.java
index 26a3dd4c43..69556729fa 100644
--- a/java/org/apache/catalina/core/ContainerBase.java
+++ b/java/org/apache/catalina/core/ContainerBase.java
@@ -45,7 +45,10 @@ import org.apache.catalina.Cluster;
 import org.apache.catalina.Container;
 import org.apache.catalina.ContainerEvent;
 import org.apache.catalina.ContainerListener;
+import org.apache.catalina.Context;
+import org.apache.catalina.Engine;
 import org.apache.catalina.Globals;
+import org.apache.catalina.Host;
 import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleState;
@@ -54,9 +57,11 @@ import org.apache.catalina.Manager;
 import org.apache.catalina.Pipeline;
 import org.apache.catalina.Realm;
 import org.apache.catalina.Valve;
+import org.apache.catalina.Wrapper;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
 import org.apache.catalina.mbeans.MBeanUtils;
+import org.apache.catalina.util.ContextName;
 import org.apache.catalina.util.LifecycleMBeanBase;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -1405,6 +1410,44 @@ public abstract class ContainerBase extends LifecycleMBeanBase
         return MBeanUtils.getDomain(this);
     }
 
+
+    @Override
+    public String getMBeanKeyProperties() {
+        Container c = this;
+        StringBuilder keyProperties = new StringBuilder();
+        int containerCount = 0;
+
+        // Work up container hierarchy, add a component to the name for
+        // each container
+        while (!(c instanceof Engine)) {
+            if (c instanceof Wrapper) {
+                keyProperties.append(",servlet=");
+                keyProperties.append(c.getName());
+            } else if (c instanceof Context) {
+                keyProperties.append(",context=");
+                ContextName cn = new ContextName(c.getName());
+                keyProperties.append(cn.getDisplayName());
+            } else if (c instanceof Host) {
+                keyProperties.append(",host=");
+                keyProperties.append(c.getName());
+            } else if (c == null) {
+                // May happen in unit testing and/or some embedding scenarios
+                keyProperties.append(",container");
+                keyProperties.append(containerCount++);
+                keyProperties.append("=null");
+                break;
+            } else {
+                // Should never happen...
+                keyProperties.append(",container");
+                keyProperties.append(containerCount++);
+                keyProperties.append('=');
+                keyProperties.append(c.getName());
+            }
+            c = c.getParent();
+        }
+        return keyProperties.toString();
+    }
+
     public ObjectName[] getChildren() {
         ObjectName result[]=new ObjectName[children.size()];
         Iterator<Container> it=children.values().iterator();

==================================================
NamingResources.java
index db02147a59..c779fd0196 100644
--- a/java/org/apache/catalina/core/StandardHost.java
+++ b/java/org/apache/catalina/core/StandardHost.java
@@ -35,7 +35,6 @@ import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleListener;
 import org.apache.catalina.Valve;
 import org.apache.catalina.loader.WebappClassLoader;
-import org.apache.catalina.mbeans.MBeanUtils;
 import org.apache.catalina.valves.ValveBase;
 import org.apache.tomcat.util.ExceptionUtils;
 
@@ -825,7 +824,7 @@ public class StandardHost extends ContainerBase implements Host {
     protected String getObjectNameKeyProperties() {
 
         StringBuilder keyProperties = new StringBuilder("type=Host");
-        keyProperties.append(MBeanUtils.getContainerKeyProperties(this));
+        keyProperties.append(getMBeanKeyProperties());
 
         return keyProperties.toString();
     }

==================================================
MBeanUtils.java
index 39e79a44fe..a729488918 100644
--- a/java/org/apache/catalina/deploy/NamingResources.java
+++ b/java/org/apache/catalina/deploy/NamingResources.java
@@ -1088,7 +1088,7 @@ public class NamingResources extends LifecycleMBeanBase implements Serializable
         Object c = getContainer();
         if (c instanceof Container) {
             return "type=NamingResources" +
-                    MBeanUtils.getContainerKeyProperties((Container) c);
+                    ((Container) c).getMBeanKeyProperties();
         }
         // Server or just unknown
         return "type=NamingResources";

==================================================
RealmBase.java
index cf49f8e2c8..8b3b4dc80e 100644
--- a/java/org/apache/catalina/mbeans/MBeanUtils.java
+++ b/java/org/apache/catalina/mbeans/MBeanUtils.java
@@ -1562,6 +1562,7 @@ public class MBeanUtils {
      *
      * @param container The container the object is associated with
      * @return          A string suitable for appending to the ObjectName
+     *
      */
     public static String getContainerKeyProperties(Container container) {
 

==================================================
FailedContext.java
index 2d9152cd0b..31fdbac9cb 100644
--- a/java/org/apache/catalina/realm/RealmBase.java
+++ b/java/org/apache/catalina/realm/RealmBase.java
@@ -1313,7 +1313,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm {
 
         StringBuilder keyProperties = new StringBuilder("type=Realm");
         keyProperties.append(getRealmSuffix());
-        keyProperties.append(MBeanUtils.getContainerKeyProperties(container));
+        keyProperties.append(container.getMBeanKeyProperties());
 
         return keyProperties.toString();
     }

==================================================
ValveBase.java
index 040aa6aa8c..a31ccf7aec 100644
--- a/java/org/apache/catalina/startup/FailedContext.java
+++ b/java/org/apache/catalina/startup/FailedContext.java
@@ -35,6 +35,8 @@ import org.apache.catalina.Cluster;
 import org.apache.catalina.Container;
 import org.apache.catalina.ContainerListener;
 import org.apache.catalina.Context;
+import org.apache.catalina.Engine;
+import org.apache.catalina.Host;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.Loader;
 import org.apache.catalina.Manager;
@@ -53,6 +55,7 @@ import org.apache.catalina.deploy.NamingResources;
 import org.apache.catalina.deploy.SecurityConstraint;
 import org.apache.catalina.mbeans.MBeanUtils;
 import org.apache.catalina.util.CharsetMapper;
+import org.apache.catalina.util.ContextName;
 import org.apache.catalina.util.LifecycleMBeanBase;
 import org.apache.juli.logging.Log;
 import org.apache.tomcat.JarScanner;
@@ -122,6 +125,41 @@ public class FailedContext extends LifecycleMBeanBase implements Context {
     protected String getDomainInternal() { return MBeanUtils.getDomain(this); }
 
 
+    @Override
+    public String getMBeanKeyProperties() {
+        Container c = this;
+        StringBuilder keyProperties = new StringBuilder();
+        int containerCount = 0;
+
+        // Work up container hierarchy, add a component to the name for
+        // each container
+        while (!(c instanceof Engine)) {
+            if (c instanceof Context) {
+                keyProperties.append(",context=");
+                ContextName cn = new ContextName(c.getName());
+                keyProperties.append(cn.getDisplayName());
+            } else if (c instanceof Host) {
+                keyProperties.append(",host=");
+                keyProperties.append(c.getName());
+            } else if (c == null) {
+                // May happen in unit testing and/or some embedding scenarios
+                keyProperties.append(",container");
+                keyProperties.append(containerCount++);
+                keyProperties.append("=null");
+                break;
+            } else {
+                // Should never happen...
+                keyProperties.append(",container");
+                keyProperties.append(containerCount++);
+                keyProperties.append('=');
+                keyProperties.append(c.getName());
+            }
+            c = c.getParent();
+        }
+        return keyProperties.toString();
+    }
+
+
     @Override
     protected String getObjectNameKeyProperties() {
 

==================================================
