e9fbf3f06a62110447b524c7a537945f7065bce3
==================================================
- Fix SSL output with blocking writes when a handshake occurs during the flow.
==================================================
Remy Maucherat
==================================================
Tue Mar 11 15:41:02 2014 +0000
==================================================
SecureNio2Channel.java
- Fix SSL output with blocking writes when a handshake occurs during the flow.
- Fix relevant test as pointed out by Konstantin.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1576385 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestSsl.java
index 8563f83ec6..61c34b6131 100644
--- a/java/org/apache/tomcat/util/net/SecureNio2Channel.java
+++ b/java/org/apache/tomcat/util/net/SecureNio2Channel.java
@@ -581,22 +581,6 @@ public class SecureNio2Channel extends Nio2Channel  {
                 t = new IOException("Channel is in closing state.");
                 return;
             }
-            //The data buffer should be empty, we can reuse the entire buffer.
-            netOutBuffer.clear();
-            try {
-                SSLEngineResult result = sslEngine.wrap(bufHandler.getWriteBuffer(), netOutBuffer);
-                written = result.bytesConsumed();
-                netOutBuffer.flip();
-                if (result.getStatus() == Status.OK) {
-                    if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK)
-                        tasks();
-                } else {
-                    t = new IOException("Unable to wrap data, invalid engine state: " +result.getStatus());
-                }
-                integer = sc.write(netOutBuffer);
-            } catch (SSLException e) {
-                t = e;
-            }
         }
         @Override
         public boolean cancel(boolean mayInterruptIfRunning) {
@@ -612,21 +596,49 @@ public class SecureNio2Channel extends Nio2Channel  {
         }
         @Override
         public Integer get() throws InterruptedException, ExecutionException {
+            wrap();
             if (t != null) {
                 throw new ExecutionException(t);
             }
             integer.get();
-            return Integer.valueOf(written);
+            if (written == 0) {
+                return get();
+            } else {
+                return Integer.valueOf(written);
+            }
         }
         @Override
         public Integer get(long timeout, TimeUnit unit)
                 throws InterruptedException, ExecutionException,
                 TimeoutException {
+            wrap();
             if (t != null) {
                 throw new ExecutionException(t);
             }
             integer.get(timeout, unit);
-            return Integer.valueOf(written);
+            if (written == 0) {
+                return get(timeout, unit);
+            } else {
+                return Integer.valueOf(written);
+            }
+        }
+        protected void wrap() {
+            //The data buffer should be empty, we can reuse the entire buffer.
+            netOutBuffer.clear();
+            try {
+                SSLEngineResult result = sslEngine.wrap(bufHandler.getWriteBuffer(), netOutBuffer);
+                written = result.bytesConsumed();
+                netOutBuffer.flip();
+                if (result.getStatus() == Status.OK) {
+                    if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK)
+                        tasks();
+                } else {
+                    t = new IOException("Unable to wrap data, invalid engine state: " +result.getStatus());
+                }
+                integer = sc.write(netOutBuffer);
+            } catch (SSLException e) {
+                t = e;
+            }
         }
     }
 

==================================================
