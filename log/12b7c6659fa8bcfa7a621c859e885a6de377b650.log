12b7c6659fa8bcfa7a621c859e885a6de377b650
==================================================
Remove endpoint specific Handler interfaces since they are no longer
==================================================
asf-sync-process asf-sync-process@unknown
==================================================
Sun Nov 8 16:52:58 2015 +0000
==================================================
AbstractAjpProtocol.java
Remove endpoint specific Handler interfaces since they are no longer
required.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1713250 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpAprProtocol.java
index 57cfdcf80b..f6950e5159 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -21,6 +21,7 @@ import java.nio.ByteBuffer;
 import org.apache.coyote.AbstractProtocol;
 import org.apache.coyote.UpgradeProtocol;
 import org.apache.coyote.UpgradeToken;
+import org.apache.juli.logging.Log;
 import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.SSLHostConfig;
 import org.apache.tomcat.util.net.SocketWrapperBase;
@@ -161,12 +162,12 @@ public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
         processor.setClientCertProvider(getClientCertProvider());
     }
 
-    protected abstract static class AbstractAjpConnectionHandler<S>
+    protected static class AjpConnectionHandler<S>
             extends AbstractConnectionHandler<S,AjpProcessor> {
 
         private final AbstractAjpProtocol<S> proto;
 
-        public AbstractAjpConnectionHandler(AbstractAjpProtocol<S> proto) {
+        public AjpConnectionHandler(AbstractAjpProtocol<S> proto) {
             this.proto = proto;
         }
 
@@ -191,5 +192,10 @@ public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
             // TODO should fail - throw IOE
             return null;
         }
+
+        @Override
+        protected Log getLog() {
+            return proto.getLog();
+        }
     }
 }

==================================================
AjpNio2Protocol.java
index bc53cb386e..a0848badda 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -44,7 +44,7 @@ public class AjpAprProtocol extends AbstractAjpProtocol<Long> {
 
     public AjpAprProtocol() {
         super(new AprEndpoint());
-        AjpConnectionHandler cHandler = new AjpConnectionHandler(this);
+        AjpConnectionHandler<Long> cHandler = new AjpConnectionHandler<>(this);
         setHandler(cHandler);
         ((AprEndpoint) getEndpoint()).setHandler(cHandler);
     }
@@ -62,20 +62,4 @@ public class AjpAprProtocol extends AbstractAjpProtocol<Long> {
     protected String getNamePrefix() {
         return ("ajp-apr");
     }
-
-
-    // --------------------------------------  AjpConnectionHandler Inner Class
-
-    protected static class AjpConnectionHandler
-            extends AbstractAjpConnectionHandler<Long> {
-
-        public AjpConnectionHandler(AjpAprProtocol proto) {
-            super(proto);
-        }
-
-        @Override
-        protected Log getLog() {
-            return log;
-        }
-    }
 }

==================================================
AjpNioProtocol.java
index 1961f6ac2d..17268de08a 100644
--- a/java/org/apache/coyote/ajp/AjpNio2Protocol.java
+++ b/java/org/apache/coyote/ajp/AjpNio2Protocol.java
@@ -20,7 +20,6 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.Nio2Channel;
 import org.apache.tomcat.util.net.Nio2Endpoint;
-import org.apache.tomcat.util.net.Nio2Endpoint.Handler;
 
 
 /**
@@ -38,7 +37,7 @@ public class AjpNio2Protocol extends AbstractAjpProtocol<Nio2Channel> {
 
     public AjpNio2Protocol() {
         super(new Nio2Endpoint());
-        AjpConnectionHandler cHandler = new AjpConnectionHandler(this);
+        AjpConnectionHandler<Nio2Channel> cHandler = new AjpConnectionHandler<>(this);
         setHandler(cHandler);
         ((Nio2Endpoint) getEndpoint()).setHandler(cHandler);
     }
@@ -50,22 +49,4 @@ public class AjpNio2Protocol extends AbstractAjpProtocol<Nio2Channel> {
     protected String getNamePrefix() {
         return ("ajp-nio2");
     }
-
-
-    // --------------------------------------  AjpConnectionHandler Inner Class
-
-    protected static class AjpConnectionHandler
-            extends AbstractAjpConnectionHandler<Nio2Channel>
-            implements Handler {
-
-        public AjpConnectionHandler(AjpNio2Protocol proto) {
-            super(proto);
-        }
-
-
-        @Override
-        protected Log getLog() {
-            return log;
-        }
-    }
 }

==================================================
AbstractHttp11Protocol.java
index ea13d2c653..0dafa4504d 100644
--- a/java/org/apache/coyote/ajp/AjpNioProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpNioProtocol.java
@@ -20,7 +20,6 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.NioChannel;
 import org.apache.tomcat.util.net.NioEndpoint;
-import org.apache.tomcat.util.net.NioEndpoint.Handler;
 
 /**
  * This the NIO based protocol handler implementation for AJP.
@@ -37,7 +36,7 @@ public class AjpNioProtocol extends AbstractAjpProtocol<NioChannel> {
 
     public AjpNioProtocol() {
         super(new NioEndpoint());
-        AjpConnectionHandler cHandler = new AjpConnectionHandler(this);
+        AjpConnectionHandler<NioChannel> cHandler = new AjpConnectionHandler<>(this);
         setHandler(cHandler);
         ((NioEndpoint) getEndpoint()).setHandler(cHandler);
     }
@@ -49,21 +48,4 @@ public class AjpNioProtocol extends AbstractAjpProtocol<NioChannel> {
     protected String getNamePrefix() {
         return ("ajp-nio");
     }
-
-
-    // --------------------------------------  AjpConnectionHandler Inner Class
-
-    protected static class AjpConnectionHandler
-            extends AbstractAjpConnectionHandler<NioChannel>
-            implements Handler {
-
-        public AjpConnectionHandler(AjpNioProtocol proto) {
-            super(proto);
-        }
-
-        @Override
-        protected Log getLog() {
-            return log;
-        }
-    }
 }

==================================================
Http11AprProtocol.java
index 8837b74507..42c8dc13ca 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -38,6 +38,7 @@ import org.apache.coyote.UpgradeToken;
 import org.apache.coyote.http11.upgrade.InternalHttpUpgradeHandler;
 import org.apache.coyote.http11.upgrade.UpgradeProcessorExternal;
 import org.apache.coyote.http11.upgrade.UpgradeProcessorInternal;
+import org.apache.juli.logging.Log;
 import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.SSLHostConfig;
 import org.apache.tomcat.util.net.SocketWrapperBase;
@@ -631,13 +632,13 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     }
 
 
-    protected abstract static class AbstractHttp11ConnectionHandler<S>
+    protected static class Http11ConnectionHandler<S>
             extends AbstractConnectionHandler<S,Http11Processor> {
 
         private final AbstractHttp11Protocol<S> proto;
 
 
-        protected AbstractHttp11ConnectionHandler(AbstractHttp11Protocol<S> proto) {
+        protected Http11ConnectionHandler(AbstractHttp11Protocol<S> proto) {
             this.proto = proto;
         }
 
@@ -672,5 +673,11 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
                 return new UpgradeProcessorExternal(socket, leftoverInput, upgradeToken);
             }
         }
+
+
+        @Override
+        protected Log getLog() {
+            return proto.getLog();
+        }
     }
 }

==================================================
Http11Nio2Protocol.java
index e7738cce82..6e63fd71db 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -35,7 +35,7 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
 
     public Http11AprProtocol() {
         super(new AprEndpoint());
-        Http11ConnectionHandler cHandler = new Http11ConnectionHandler(this);
+        Http11ConnectionHandler<Long> cHandler = new Http11ConnectionHandler<>(this);
         setHandler(cHandler);
         ((AprEndpoint) getEndpoint()).setHandler(cHandler);
     }
@@ -71,20 +71,4 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
             return ("http-apr");
         }
     }
-
-
-    // --------------------  Connection handler --------------------
-
-    protected static class Http11ConnectionHandler
-            extends AbstractHttp11ConnectionHandler<Long> {
-
-        Http11ConnectionHandler(Http11AprProtocol proto) {
-            super(proto);
-        }
-
-        @Override
-        protected Log getLog() {
-            return log;
-        }
-    }
 }

==================================================
Http11NioProtocol.java
index aa59a13f76..cb1fd15e6e 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Protocol.java
@@ -20,7 +20,6 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.Nio2Channel;
 import org.apache.tomcat.util.net.Nio2Endpoint;
-import org.apache.tomcat.util.net.Nio2Endpoint.Handler;
 
 
 /**
@@ -33,7 +32,7 @@ public class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel>
 
     public Http11Nio2Protocol() {
         super(new Nio2Endpoint());
-        Http11ConnectionHandler cHandler = new Http11ConnectionHandler(this);
+        Http11ConnectionHandler<Nio2Channel> cHandler = new Http11ConnectionHandler<>(this);
         setHandler(cHandler);
         ((Nio2Endpoint) getEndpoint()).setHandler(cHandler);
     }
@@ -53,21 +52,4 @@ public class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel>
             return ("http-nio2");
         }
     }
-
-
-    // --------------------  Connection handler --------------------
-
-    protected static class Http11ConnectionHandler
-            extends AbstractHttp11ConnectionHandler<Nio2Channel>
-            implements Handler {
-
-        Http11ConnectionHandler(Http11Nio2Protocol proto) {
-            super(proto);
-        }
-
-        @Override
-        protected Log getLog() {
-            return log;
-        }
-    }
 }

==================================================
Nio2Endpoint.java
index 59a0b51397..88e4dfec93 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -20,7 +20,6 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.NioChannel;
 import org.apache.tomcat.util.net.NioEndpoint;
-import org.apache.tomcat.util.net.NioEndpoint.Handler;
 
 
 /**
@@ -38,7 +37,7 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
 
     public Http11NioProtocol() {
         super(new NioEndpoint());
-        Http11ConnectionHandler cHandler = new Http11ConnectionHandler(this);
+        Http11ConnectionHandler<NioChannel> cHandler = new Http11ConnectionHandler<>(this);
         setHandler(cHandler);
         ((NioEndpoint) getEndpoint()).setHandler(cHandler);
     }
@@ -85,21 +84,4 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
             return ("http-nio");
         }
     }
-
-
-    // --------------------  Connection handler --------------------
-
-    protected static class Http11ConnectionHandler
-            extends AbstractHttp11ConnectionHandler<NioChannel>
-            implements Handler {
-
-        Http11ConnectionHandler(Http11NioProtocol proto) {
-            super(proto);
-        }
-
-        @Override
-        protected Log getLog() {
-            return log;
-        }
-    }
 }

==================================================
NioEndpoint.java
index 1445cc050e..16b21cf3cf 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -109,10 +109,10 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
     /**
      * Handling of accepted sockets.
      */
-    private Handler handler = null;
-    public void setHandler(Handler handler ) { this.handler = handler; }
+    private Handler<Nio2Channel> handler = null;
+    public void setHandler(Handler<Nio2Channel> handler ) { this.handler = handler; }
     @Override
-    public Handler getHandler() { return handler; }
+    public Handler<Nio2Channel> getHandler() { return handler; }
 
 
     public void setSocketProperties(SocketProperties socketProperties) {
@@ -1590,16 +1590,6 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
     }
 
 
-    // ------------------------------------------------ Handler Inner Interface
-
-    /**
-     * Bare bones interface used for socket processing. Per thread data is to be
-     * stored in the ThreadWithAttributes extra folders, or alternately in
-     * thread local fields.
-     */
-    public interface Handler extends AbstractEndpoint.Handler<Nio2Channel> {
-    }
-
     public static void startInline() {
         inlineCompletion.set(Boolean.TRUE);
     }

==================================================
