619f096c5ad9f8eb45218e7005226bc98c048da4
==================================================
Push methods down where they are not required in the Processor interface
==================================================
Mark Thomas
==================================================
Tue Oct 20 09:01:34 2015 +0000
==================================================
AbstractProcessorLight.java
Push methods down where they are not required in the Processor interface

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1709547 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Processor.java
index 82001db283..501a545854 100644
--- a/java/org/apache/coyote/AbstractProcessorLight.java
+++ b/java/org/apache/coyote/AbstractProcessorLight.java
@@ -131,6 +131,33 @@ public abstract class AbstractProcessorLight implements Processor {
         }
     }
 
+    /**
+     * Service a 'standard' HTTP request. This method is called for both new
+     * requests and for requests that have partially read the HTTP request line
+     * or HTTP headers. Once the headers have been fully read this method is not
+     * called again until there is a new HTTP request to process. Note that the
+     * request type may change during processing which may result in one or more
+     * calls to {@link #dispatch(SocketStatus)}.
+     *
+     * @param socketWrapper The connection to process
+     *
+     * @return The state the caller should put the socket in when this method
+     *         returns
+     *
+     * @throws IOException If an I/O error occurs during the processing of the
+     *         request
+     */
+    protected abstract SocketState service(SocketWrapperBase<?> socketWrapper) throws IOException;
+
+    /**
+     * Process an in-progress request that is not longer in standard HTTP mode.
+     * Uses currently include Servlet 3.0 Async and HTTP upgrade connections.
+     * Further uses may be added in the future. These will typically start as
+     * HTTP requests.
+     */
+    protected abstract SocketState dispatch(SocketStatus status);
+
+    protected abstract SocketState asyncPostProcess();
 
     protected abstract Log getLog();
 }

==================================================
