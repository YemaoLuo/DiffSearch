53b9434b80781cbf63d7f42c93ea15cdf45548be
==================================================
Modify the grammar for function to permit multiple sets of parameters for lambda expressions. Implementing that handling is still a TODO.
==================================================
Mark Emlyn
==================================================
Thu Jul 18 11:40:26 2013 +0000
==================================================
ExpressionBuilder.java
index af0dd0a3b3..7324402bc7 100644
--- a/java/org/apache/el/Messages.properties
+++ b/java/org/apache/el/Messages.properties
@@ -51,6 +51,7 @@ error.fnMapper.paramcount=Function ''{0}'' specifies {1} params, but {2} were de
 error.context.null=ELContext was null
 
 # Parser
+error.funciton.tooManyMethodParameterSets=There are multiple sets of parameters specified for function [{0}]
 error.identifier.notjava=The identifier [{0}] is not a valid Java identifier as required by section 1.19 of the EL specification (Identifier ::= Java language identifier). This check can be disabled by setting the system property org.apache.el.parser.SKIP_IDENTIFIER_CHECK to true.
 error.lambda.tooManyMethodParameterSets=There are more sets of method parameters specified than there are nested lambda expressions
 

==================================================
AstFunction.java
index 1c707e094a..e498d45f62 100644
--- a/java/org/apache/el/lang/ExpressionBuilder.java
+++ b/java/org/apache/el/lang/ExpressionBuilder.java
@@ -212,7 +212,8 @@ public final class ExpressionBuilder implements NodeVisitor {
             }
 
             int pcnt = m.getParameterTypes().length;
-            if (node.jjtGetNumChildren() != pcnt) {
+            // AstFunction->MethodParameters->Parameters()
+            if (node.jjtGetChild(0).jjtGetNumChildren() != pcnt) {
                 throw new ELException(MessageFactory.get(
                         "error.fnMapper.paramcount", funcNode.getOutputName(),
                         "" + pcnt, "" + node.jjtGetNumChildren()));

==================================================
ELParser.java
index 401e2ba08b..09481ab334 100644
--- a/java/org/apache/el/parser/AstFunction.java
+++ b/java/org/apache/el/parser/AstFunction.java
@@ -97,10 +97,11 @@ public final class AstFunction extends SimpleNode {
             if (obj instanceof LambdaExpression) {
                 LambdaExpression le = (LambdaExpression) obj;
                 // Build arguments
-                int numArgs = this.jjtGetNumChildren();
+                // TODO handle multiple sets of arguments
+                int numArgs = this.jjtGetChild(0).jjtGetNumChildren();
                 Object[] args = new Object[numArgs];
                 for (int i = 0; i < numArgs; i++) {
-                    args[i] = children[i].getValue(ctx);
+                    args[i] = jjtGetChild(0).jjtGetChild(i).getValue(ctx);
                 }
                 return le.invoke(ctx, args);
             }
@@ -111,15 +112,24 @@ public final class AstFunction extends SimpleNode {
                     this.getOutputName()));
         }
 
+        // Not a lambda expression so must be a function. Check there is just a
+        // single set of method parameters
+        if (this.jjtGetNumChildren() != 1) {
+            throw new ELException(MessageFactory.get(
+                    "error.funciton.tooManyMethodParameterSets",
+                    getOutputName()));
+        }
+
+        Node parameters = jjtGetChild(0);
         Class<?>[] paramTypes = m.getParameterTypes();
         Object[] params = null;
         Object result = null;
-        int numParams = this.jjtGetNumChildren();
+        int numParams = parameters.jjtGetNumChildren();
         if (numParams > 0) {
             params = new Object[numParams];
             try {
                 for (int i = 0; i < numParams; i++) {
-                    params[i] = this.children[i].getValue(ctx);
+                    params[i] = parameters.jjtGetChild(i).getValue(ctx);
                     params[i] = coerceToType(params[i], paramTypes[i]);
                 }
             } catch (ELException ele) {

==================================================
