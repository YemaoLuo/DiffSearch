5b4e3d5d9516c480a90a611c4a40e3e6ffdf6247
==================================================
Add i18n for the core package.
==================================================
Remy Maucherat
==================================================
Wed Dec 5 13:07:06 2018 +0000
==================================================
ApplicationDispatcher.java
Add i18n for the core package.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1848208 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AprLifecycleListener.java
index a1062ae153..cbaa8088d6 100644
--- a/java/org/apache/catalina/core/ApplicationDispatcher.java
+++ b/java/org/apache/catalina/core/ApplicationDispatcher.java
@@ -1043,6 +1043,7 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
 
     private void recycleRequestWrapper(State state) {
         if (state.wrapRequest instanceof ApplicationHttpRequest) {
-            ((ApplicationHttpRequest) state.wrapRequest).recycle();        }
+            ((ApplicationHttpRequest) state.wrapRequest).recycle();
+        }
     }
 }

==================================================
AsyncContextImpl.java
index 324b4d02a3..76a0ff64f7 100644
--- a/java/org/apache/catalina/core/AprLifecycleListener.java
+++ b/java/org/apache/catalina/core/AprLifecycleListener.java
@@ -142,10 +142,10 @@ public class AprLifecycleListener
                 }
                 // Failure to initialize FIPS mode is fatal
                 if (!(null == FIPSMode || "off".equalsIgnoreCase(FIPSMode)) && !isFIPSModeActive()) {
-                    Error e = new Error(
-                            sm.getString("aprListener.initializeFIPSFailed"));
+                    String errorMessage = sm.getString("aprListener.initializeFIPSFailed");
+                    Error e = new Error(errorMessage);
                     // Log here, because thrown error might be not logged
-                    log.fatal(e.getMessage(), e);
+                    log.fatal(errorMessage, e);
                     throw e;
                 }
             }

==================================================
ContainerBase.java
index af273dcd1c..ff8fc80c6c 100644
--- a/java/org/apache/catalina/core/AsyncContextImpl.java
+++ b/java/org/apache/catalina/core/AsyncContextImpl.java
@@ -104,8 +104,8 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
                     listener.fireOnComplete(event);
                 } catch (Throwable t) {
                     ExceptionUtils.handleThrowable(t);
-                    log.warn("onComplete() failed for listener of type [" +
-                            listener.getClass().getName() + "]", t);
+                    log.warn(sm.getString("asyncContextImpl.onCompleteError",
+                            listener.getClass().getName()), t);
                 }
             }
         } finally {
@@ -132,8 +132,8 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
                         listener.fireOnTimeout(event);
                     } catch (Throwable t) {
                         ExceptionUtils.handleThrowable(t);
-                        log.warn("onTimeout() failed for listener of type [" +
-                                listener.getClass().getName() + "]", t);
+                        log.warn(sm.getString("asyncContextImpl.onTimeoutError",
+                                listener.getClass().getName()), t);
                     }
                 }
                 request.getCoyoteRequest().action(
@@ -324,8 +324,8 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
                     listener.fireOnStartAsync(event);
                 } catch (Throwable t) {
                     ExceptionUtils.handleThrowable(t);
-                    log.warn("onStartAsync() failed for listener of type [" +
-                            listener.getClass().getName() + "]", t);
+                    log.warn(sm.getString("asyncContextImpl.onStartAsyncError",
+                            listener.getClass().getName()), t);
                 }
             }
         }
@@ -391,8 +391,8 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
                     listener.fireOnError(errorEvent);
                 } catch (Throwable t2) {
                     ExceptionUtils.handleThrowable(t2);
-                    log.warn("onError() failed for listener of type [" +
-                            listener.getClass().getName() + "]", t2);
+                    log.warn(sm.getString("asyncContextImpl.onErrorError",
+                            listener.getClass().getName()), t2);
                 }
             }
         }
@@ -545,9 +545,8 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback {
             request.getCoyoteRequest().action(ActionCode.ASYNC_DISPATCHED, null);
             try {
                 applicationDispatcher.dispatch(servletRequest, servletResponse);
-            }catch (Exception x) {
-                //log.error("Async.dispatch",x);
-                throw new RuntimeException(x);
+            } catch (Exception e) {
+                throw new RuntimeException(sm.getString("asyncContextImpl.asyncDispachError"), e);
             }
         }
 

==================================================
DefaultInstanceManager.java
index c87a63214b..63e44f9601 100644
--- a/java/org/apache/catalina/core/ContainerBase.java
+++ b/java/org/apache/catalina/core/ContainerBase.java
@@ -421,7 +421,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
                 try {
                     ((Lifecycle) oldCluster).stop();
                 } catch (LifecycleException e) {
-                    log.error("ContainerBase.setCluster: stop: ", e);
+                    log.error(sm.getString("containerbase.cluster.stop"), e);
                 }
             }
 
@@ -434,7 +434,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
                 try {
                     ((Lifecycle) cluster).start();
                 } catch (LifecycleException e) {
-                    log.error("ContainerBase.setCluster: start: ", e);
+                    log.error(sm.getString("containerbase.cluster.start"), e);
                 }
             }
         } finally {
@@ -635,7 +635,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
                 try {
                     ((Lifecycle) oldRealm).stop();
                 } catch (LifecycleException e) {
-                    log.error("ContainerBase.setRealm: stop: ", e);
+                    log.error(sm.getString("containerbase.realm.stop"), e);
                 }
             }
 
@@ -647,7 +647,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
                 try {
                     ((Lifecycle) realm).start();
                 } catch (LifecycleException e) {
-                    log.error("ContainerBase.setRealm: start: ", e);
+                    log.error(sm.getString("containerbase.realm.start"), e);
                 }
             }
 
@@ -697,9 +697,8 @@ public abstract class ContainerBase extends LifecycleMBeanBase
             log.debug("Add child " + child + " " + this);
         synchronized(children) {
             if (children.get(child.getName()) != null)
-                throw new IllegalArgumentException("addChild:  Child name '" +
-                                                   child.getName() +
-                                                   "' is not unique");
+                throw new IllegalArgumentException(
+                        sm.getString("containerbase.child.notUnique", child.getName()));
             child.setParent(this);  // May throw IAE
             children.put(child.getName(), child);
         }
@@ -714,8 +713,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
                 child.start();
             }
         } catch (LifecycleException e) {
-            log.error("ContainerBase.addChild: start: ", e);
-            throw new IllegalStateException("ContainerBase.addChild: start: " + e);
+            throw new IllegalStateException(sm.getString("containerbase.child.start"), e);
         } finally {
             fireContainerEvent(ADD_CHILD_EVENT, child);
         }
@@ -805,7 +803,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
                 child.stop();
             }
         } catch (LifecycleException e) {
-            log.error("ContainerBase.removeChild: stop: ", e);
+            log.error(sm.getString("containerbase.child.stop"), e);
         }
 
         try {
@@ -816,7 +814,7 @@ public abstract class ContainerBase extends LifecycleMBeanBase
                 child.destroy();
             }
         } catch (LifecycleException e) {
-            log.error("ContainerBase.removeChild: destroy: ", e);
+            log.error(sm.getString("containerbase.child.destroy"), e);
         }
 
         synchronized(children) {

==================================================
JniLifecycleListener.java
index 14b70aa72a..cd47c023bb 100644
--- a/java/org/apache/catalina/core/DefaultInstanceManager.java
+++ b/java/org/apache/catalina/core/DefaultInstanceManager.java
@@ -383,9 +383,8 @@ public class DefaultInstanceManager implements InstanceManager {
                             postConstruct.getParameterTypes(), null,
                             AnnotationCacheEntryType.POST_CONSTRUCT));
                 } else if (postConstructFromXml != null) {
-                    throw new IllegalArgumentException("Post construct method "
-                        + postConstructFromXml + " for class " + clazz.getName()
-                        + " is declared in deployment descriptor but cannot be found.");
+                    throw new IllegalArgumentException(sm.getString("defaultInstanceManager.postConstructNotFound",
+                        postConstructFromXml, clazz.getName()));
                 }
                 if (preDestroy != null) {
                     annotations.add(new AnnotationCacheEntry(
@@ -393,9 +392,8 @@ public class DefaultInstanceManager implements InstanceManager {
                             preDestroy.getParameterTypes(), null,
                             AnnotationCacheEntryType.PRE_DESTROY));
                 } else if (preDestroyFromXml != null) {
-                    throw new IllegalArgumentException("Pre destroy method "
-                        + preDestroyFromXml + " for class " + clazz.getName()
-                        + " is declared in deployment descriptor but cannot be found.");
+                    throw new IllegalArgumentException(sm.getString("defaultInstanceManager.preDestroyNotFound",
+                        preDestroyFromXml, clazz.getName()));
                 }
 
                 if (context != null) {

==================================================
StandardContext.java
index 8da8299287..993f3fccb4 100644
--- a/java/org/apache/catalina/core/LocalStrings.properties
+++ b/java/org/apache/catalina/core/LocalStrings.properties
@@ -89,8 +89,13 @@ aprListener.tooLateForSSLEngine=Cannot setSSLEngine: SSL has already been initia
 aprListener.tooLateForSSLRandomSeed=Cannot setSSLRandomSeed: SSL has already been initialized
 aprListener.wrongFIPSMode=Unexpected value of FIPSMode option of AprLifecycleListener: [{0}]
 
+asyncContextImpl.asyncDispachError=Error during asynchronous dispatch
 asyncContextImpl.dispatchingStarted=Asynchronous dispatch operation has already been called. Additional asynchronous dispatch operation within the same asynchronous cycle is not allowed.
 asyncContextImpl.noAsyncDispatcher=The dispatcher returned from the ServletContext does not support asynchronous dispatching
+asyncContextImpl.onCompleteError=onComplete() call failed for listener of type [{0}]
+asyncContextImpl.onErrorError=onError() call failed for listener of type [{0}]
+asyncContextImpl.onStartAsyncError=onStartAsync() call failed for listener of type [{0}]
+asyncContextImpl.onTimeoutError=onTimeout() call failed for listener of type [{0}]
 asyncContextImpl.request.ise=It is illegal to call getRequest() after complete() or any of the dispatch() methods has been called
 asyncContextImpl.requestEnded=The request associated with the AsyncContext has already completed processing.
 asyncContextImpl.response.ise=It is illegal to call getResponse() after complete() or any of the dispatch() methods has been called
@@ -100,11 +105,21 @@ containerBase.backgroundProcess.error=Exception processing background thread
 containerBase.backgroundProcess.realm=Exception processing realm [{0}] background process
 containerBase.backgroundProcess.unexpectedThreadDeath=Unexpected death of background thread [{0}]
 containerBase.backgroundProcess.valve=Exception processing valve [{0}] background process
+containerbase.child.destroy=Error destroying child
+containerbase.child.notUnique=Child name [{0}] is not unique
+containerbase.child.start=Error starting child
+containerbase.child.stop=Error stopping child
+containerbase.cluster.start=Error starting new cluster
+containerbase.cluster.stop=Error stopping old cluster
 containerBase.nullName=Container name cannot be null
+containerbase.realm.start=Error starting new realm
+containerbase.realm.stop=Error stopping old realm
 containerBase.threadedStartFailed=A child container failed during start
 containerBase.threadedStopFailed=A child container failed during stop
 
 defaultInstanceManager.invalidInjection=Invalid method resource injection annotation
+defaultInstanceManager.postConstructNotFound=Post construct method [{0}] for class [{1}] is declared in deployment descriptor but cannot be found
+defaultInstanceManager.preDestroyNotFound=Pre destroy method [{0}] for class [{1}] is declared in deployment descriptor but cannot be found
 defaultInstanceManager.restrictedClass=Access to class [{0}] is forbidden. It is a restricted class. A web application must be configured as privileged to be able to load it
 defaultInstanceManager.restrictedContainerServlet=Access to class [{0}] is forbidden. It is a restricted class (implements ContainerServlet interface). A web application must be configured as privileged to be able to load it
 defaultInstanceManager.restrictedFiltersResource=Restricted filters property file not found [{0}]
@@ -115,6 +130,11 @@ defaultInstanceManager.restrictedWrongValue=Wrong value in restricted classes pr
 filterChain.filter=Filter execution threw an exception
 filterChain.servlet=Servlet execution threw an exception
 
+jniLifecycleListener.bothPathAndName=Either libraryName or libraryPath may be set, not both
+jniLifecycleListener.load.name=Loaded native library [{0}]
+jniLifecycleListener.load.path=Loaded native library from [{0}]
+jniLifecycleListener.missingPathOrName=One of libraryName or libraryPath must be set
+
 jreLeakListener.authPolicyFail=Error whilst attempting to prevent memory leak in javax.security.auth.Policy class
 jreLeakListener.classToInitializeFail=Failed to load class [{0}] during Tomcat start to prevent possible memory leaks.
 jreLeakListener.gcDaemonFail=Failed to trigger creation of the GC Daemon thread during Tomcat start to prevent possible memory leaks. This is expected on non-Sun JVMs.
@@ -142,9 +162,13 @@ standardContext.backgroundProcess.instanceManager=Exception processing instance
 standardContext.backgroundProcess.loader=Exception processing loader [{0}] background process
 standardContext.backgroundProcess.manager=Exception processing manager [{0}] background process
 standardContext.backgroundProcess.resources=Exception processing resources [{0}] background process
+standardContext.cluster.managerError=Error creating new cluster session manager
 standardContext.cluster.noManager=No manager found. Checking if cluster manager should be used. Cluster configured: [{0}], Application distributable: [{1}]
 standardContext.configurationFail=One or more components marked the context as not correctly configured
 standardContext.cookieProcessor.null=It is not permitted to set the CookieProcessor for a Context to null
+standardContext.createWrapper.error=Error creating new wrapper
+standardContext.createWrapper.containerListenerError=Error creating container listener for the wrapper
+standardContext.createWrapper.listenerError=Error creating lifecycle listener for the wrapper
 standardContext.duplicateListener=The listener [{0}] is already configured for this context. The duplicate definition has been ignored.
 standardContext.errorPage.error=Error page location [{0}] must start with a ''/''
 standardContext.errorPage.required=ErrorPage cannot be null
@@ -192,9 +216,14 @@ standardContext.securityConstraint.pattern=Invalid <url-pattern> [{0}] in securi
 standardContext.servletFail=One or more Servlets failed to load on startup. Full details will be found in the appropriate container log file
 standardContext.servletMap.name=Servlet mapping specifies an unknown servlet name [{0}]
 standardContext.servletMap.pattern=Invalid <url-pattern> [{0}] in servlet mapping
+standardContext.setLoader.start=Error starting new loader
+standardContext.setLoader.stop=Error stopping old loader
+standardContext.setManager.start=Error starting new manager
+standardContext.setManager.stop=Error stopping old manager
 standardContext.startFailed=Context [{0}] startup failed due to previous errors
 standardContext.startingContext=Exception starting Context with name [{0}]
 standardContext.stoppingContext=Exception stopping Context with name [{0}]
+standardContext.suspiciousUrl=Suspicious URL pattern: [{0}] in context [{1}], see sections 12.1 and 12.2 of the Servlet specification
 standardContext.threadBindingListenerError=An error occurred in the thread binding listener configured for Context [{0}]
 standardContext.unknownCookieEncoding=The unknown encoding [{0}] was specified for setCookieEncoding(String) so the default of UTF-8 will be used instead
 standardContext.urlPattern.patternWarning=WARNING: URL pattern [{0}] must start with a ''/'' in Servlet 2.4
@@ -219,20 +248,37 @@ standardHost.problematicAppBase=Using an empty string for appBase on host [{0}]
 
 standardHostValue.customStatusFailed=Custom error page [{0}] could not be dispatched correctly
 
+standardPipeline.basic.start=Error starting new basic Valve
+standardPipeline.basic.stop=Error stopping old basic Valve
+standardPipeline.valve.destroy=Error destroying Valve
+standardPipeline.valve.start=Error starting Valve
+standardPipeline.valve.stop=Error stopping Valve
+
+standardServer.accept.error=An IO exception occurred trying to accept on the socket listening for the shutdown command
+standardServer.accept.readError=An IO exception occurred trying to read the shutdown command
+standardServer.accept.security=A security error occurred trying to accept on the socket listening for the shutdown command
 standardServer.accept.timeout=The socket listening for the shutdown command experienced an unexpected timeout [{0}] milliseconds after the call to accept(). Is this an instance of bug 56684?
 standardServer.awaitSocket.fail=Failed to create server shutdown socket on address [{0}] and port [{1}] (base port [{2}] and offset [{3}])
+standardServer.invalidShutdownCommand=Invalid shutdown command [{0}] received
 standardServer.periodicEventError=Error sending periodic event
 standardServer.portOffset.invalid=The value [{0}] for portOffset is not valid as portOffset may not be negative
 standardServer.shutdownViaPort=A valid shutdown command was received via the shutdown port. Stopping the Server instance.
+standardServer.storeConfig.contextError=Error storing context [{0}] configuration
+standardServer.storeConfig.error=Error storing server configuration
 standardServer.storeConfig.notAvailable=No StoreConfig implementation was registered as an MBean named [{0}] so no configuration could be saved. A suitable MBean is normally registered via the StoreConfigLifecycleListener.
 
 standardService.engine.startFailed=Failed to start associated Engine
 standardService.engine.stopFailed=Failed to stop associated Engine
+standardService.executor.start=Error starting new executor
+standardService.executor.stop=Error stopping old executor
 standardService.mapperListener.startFailed=Failed to start associated MapperListener
 standardService.mapperListener.stopFailed=Failed to stop associated MapperListener
 standardService.start.name=Starting service [{0}]
 standardService.stop.name=Stopping service [{0}]
 
+standardThreadExecutor.notStarted=The executor has not been started
+standardThreadExecutor.queueFull=The executor's work queue is full
+
 standardWrapper.allocate=Error allocating a servlet instance
 standardWrapper.allocateException=Allocate exception for servlet [{0}]
 standardWrapper.deallocateException=Deallocate exception for servlet [{0}]
@@ -241,6 +287,7 @@ standardWrapper.destroyInstance=InstanceManager.destroy() for servlet [{0}] thre
 standardWrapper.initException=Servlet.init() for servlet [{0}] threw exception
 standardWrapper.instantiate=Error instantiating servlet class [{0}]
 standardWrapper.isUnavailable=Servlet [{0}] is currently unavailable
+standardWrapper.jspMonitorError=Error registering JSP monitor Mbean [{0}]
 standardWrapper.notChild=Wrapper container may not have child containers
 standardWrapper.notClass=No servlet class has been specified for servlet [{0}]
 standardWrapper.notContext=Parent container of a Wrapper must be a Context

==================================================
StandardPipeline.java
index 5d2e6b25a8..ff598eafa3 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -1822,7 +1822,7 @@ public class StandardContext extends ContainerBase
                 try {
                     ((Lifecycle) oldLoader).stop();
                 } catch (LifecycleException e) {
-                    log.error("StandardContext.setLoader: stop: ", e);
+                    log.error(sm.getString("standardContext.setLoader.stop"), e);
                 }
             }
 
@@ -1834,7 +1834,7 @@ public class StandardContext extends ContainerBase
                 try {
                     ((Lifecycle) loader).start();
                 } catch (LifecycleException e) {
-                    log.error("StandardContext.setLoader: start: ", e);
+                    log.error(sm.getString("standardContext.setLoader.start"), e);
                 }
             }
         } finally {
@@ -1877,7 +1877,7 @@ public class StandardContext extends ContainerBase
                     ((Lifecycle) oldManager).stop();
                     ((Lifecycle) oldManager).destroy();
                 } catch (LifecycleException e) {
-                    log.error("StandardContext.setManager: stop-destroy: ", e);
+                    log.error(sm.getString("standardContext.setManager.stop"), e);
                 }
             }
 
@@ -1889,7 +1889,7 @@ public class StandardContext extends ContainerBase
                 try {
                     ((Lifecycle) manager).start();
                 } catch (LifecycleException e) {
-                    log.error("StandardContext.setManager: start: ", e);
+                    log.error(sm.getString("standardContext.setManager.start"), e);
                 }
             }
         } finally {
@@ -3267,7 +3267,7 @@ public class StandardContext extends ContainerBase
                 wrapper = (Wrapper) wrapperClass.getConstructor().newInstance();
             } catch (Throwable t) {
                 ExceptionUtils.handleThrowable(t);
-                log.error("createWrapper", t);
+                log.error(sm.getString("standardContext.createWrapper.error"), t);
                 return null;
             }
         } else {
@@ -3283,7 +3283,7 @@ public class StandardContext extends ContainerBase
                     wrapper.addLifecycleListener(listener);
                 } catch (Throwable t) {
                     ExceptionUtils.handleThrowable(t);
-                    log.error("createWrapper", t);
+                    log.error(sm.getString("standardContext.createWrapper.listenerError"), t);
                     return null;
                 }
             }
@@ -3298,7 +3298,7 @@ public class StandardContext extends ContainerBase
                     wrapper.addContainerListener(listener);
                 } catch (Throwable t) {
                     ExceptionUtils.handleThrowable(t);
-                    log.error("createWrapper", t);
+                    log.error(sm.getString("standardContext.createWrapper.containerListenerError"), t);
                     return null;
                 }
             }
@@ -5050,11 +5050,11 @@ public class StandardContext extends ContainerBase
                                 Boolean.valueOf((getCluster() != null)),
                                 Boolean.valueOf(distributable)));
                     }
-                    if ( (getCluster() != null) && distributable) {
+                    if ((getCluster() != null) && distributable) {
                         try {
                             contextManager = getCluster().createManager(getName());
                         } catch (Exception ex) {
-                            log.error("standardContext.clusterFail", ex);
+                            log.error(sm.getString("standardContext.cluster.managerError"), ex);
                             ok = false;
                         }
                     } else {
@@ -6100,9 +6100,7 @@ public class StandardContext extends ContainerBase
                         urlPattern.charAt(urlPattern.length()-2) != '/')) ||
                     urlPattern.startsWith("*.") && urlPattern.length() > 2 &&
                         urlPattern.lastIndexOf('.') > 1) {
-                log.info("Suspicious url pattern: \"" + urlPattern + "\"" +
-                        " in context [" + getName() + "] - see" +
-                        " sections 12.1 and 12.2 of the Servlet specification");
+                log.info(sm.getString("standardContext.suspiciousUrl", urlPattern, getName()));
             }
         }
     }

==================================================
StandardServer.java
index 1c3354f299..212cc8a3e7 100644
--- a/java/org/apache/catalina/core/StandardPipeline.java
+++ b/java/org/apache/catalina/core/StandardPipeline.java
@@ -38,6 +38,7 @@ import org.apache.catalina.util.ToStringUtil;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.ExceptionUtils;
+import org.apache.tomcat.util.res.StringManager;
 
 
 /**
@@ -56,6 +57,7 @@ import org.apache.tomcat.util.ExceptionUtils;
 public class StandardPipeline extends LifecycleBase implements Pipeline {
 
     private static final Log log = LogFactory.getLog(StandardPipeline.class);
+    private static final StringManager sm = StringManager.getManager(Constants.Package);
 
     // ----------------------------------------------------------- Constructors
 
@@ -266,7 +268,7 @@ public class StandardPipeline extends LifecycleBase implements Pipeline {
                 try {
                     ((Lifecycle) oldBasic).stop();
                 } catch (LifecycleException e) {
-                    log.error("StandardPipeline.setBasic: stop", e);
+                    log.error(sm.getString("standardPipeline.basic.stop"), e);
                 }
             }
             if (oldBasic instanceof Contained) {
@@ -288,7 +290,7 @@ public class StandardPipeline extends LifecycleBase implements Pipeline {
             try {
                 ((Lifecycle) valve).start();
             } catch (LifecycleException e) {
-                log.error("StandardPipeline.setBasic: start", e);
+                log.error(sm.getString("standardPipeline.basic.start"), e);
                 return;
             }
         }
@@ -340,7 +342,7 @@ public class StandardPipeline extends LifecycleBase implements Pipeline {
                 try {
                     ((Lifecycle) valve).start();
                 } catch (LifecycleException e) {
-                    log.error("StandardPipeline.addValve: start: ", e);
+                    log.error(sm.getString("standardPipeline.valve.start"), e);
                 }
             }
         }
@@ -442,13 +444,13 @@ public class StandardPipeline extends LifecycleBase implements Pipeline {
                 try {
                     ((Lifecycle) valve).stop();
                 } catch (LifecycleException e) {
-                    log.error("StandardPipeline.removeValve: stop: ", e);
+                    log.error(sm.getString("standardPipeline.valve.stop"), e);
                 }
             }
             try {
                 ((Lifecycle) valve).destroy();
             } catch (LifecycleException e) {
-                log.error("StandardPipeline.removeValve: destroy: ", e);
+                log.error(sm.getString("standardPipeline.valve.destroy"), e);
             }
         }
 

==================================================
StandardService.java
index 9694e3db84..f06364262f 100644
--- a/java/org/apache/catalina/core/StandardServer.java
+++ b/java/org/apache/catalina/core/StandardServer.java
@@ -619,15 +619,14 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
                                 Long.valueOf(System.currentTimeMillis() - acceptStartTime)), ste);
                         continue;
                     } catch (AccessControlException ace) {
-                        log.warn("StandardServer.accept security exception: "
-                                + ace.getMessage(), ace);
+                        log.warn(sm.getString("standardServer.accept.security"), ace);
                         continue;
                     } catch (IOException e) {
                         if (stopAwait) {
                             // Wait was aborted with socket.close()
                             break;
                         }
-                        log.error("StandardServer.await: accept: ", e);
+                        log.error(sm.getString("standardServer.accept.error"), e);
                         break;
                     }
 
@@ -643,7 +642,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
                         try {
                             ch = stream.read();
                         } catch (IOException e) {
-                            log.warn("StandardServer.await: read: ", e);
+                            log.warn(sm.getString("standardServer.accept.readError"), e);
                             ch = -1;
                         }
                         // Control character or EOF (-1) terminates loop
@@ -670,8 +669,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
                     log.info(sm.getString("standardServer.shutdownViaPort"));
                     break;
                 } else
-                    log.warn("StandardServer.await: Invalid command '"
-                            + command.toString() + "' received");
+                    log.warn(sm.getString("standardServer.invalidShutdownCommand", command.toString()));
             }
         } finally {
             ServerSocket serverSocket = awaitSocket;
@@ -863,7 +861,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
             }
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
-            log.error(t);
+            log.error(sm.getString("standardServer.storeConfig.error"), t);
         }
     }
 
@@ -894,7 +892,7 @@ public final class StandardServer extends LifecycleMBeanBase implements Server {
             }
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
-            log.error(t);
+            log.error(sm.getString("standardServer.storeConfig.contextError", context.getName()), t);
         }
     }
 

==================================================
StandardThreadExecutor.java
index a0d55c02d3..4ed923da13 100644
--- a/java/org/apache/catalina/core/StandardService.java
+++ b/java/org/apache/catalina/core/StandardService.java
@@ -345,7 +345,7 @@ public class StandardService extends LifecycleMBeanBase implements Service {
                     try {
                         ex.start();
                     } catch (LifecycleException x) {
-                        log.error("Executor.start", x);
+                        log.error(sm.getString("standardService.executor.start"), x);
                     }
                 }
             }
@@ -395,7 +395,7 @@ public class StandardService extends LifecycleMBeanBase implements Service {
                 try {
                     ex.stop();
                 } catch (LifecycleException e) {
-                    log.error("Executor.stop", e);
+                    log.error(sm.getString("standardService.executor.stop"), e);
                 }
             }
         }

==================================================
StandardWrapper.java
index 9abf8e8060..caed2d393b 100644
--- a/java/org/apache/catalina/core/StandardThreadExecutor.java
+++ b/java/org/apache/catalina/core/StandardThreadExecutor.java
@@ -24,6 +24,7 @@ import org.apache.catalina.Executor;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleState;
 import org.apache.catalina.util.LifecycleMBeanBase;
+import org.apache.tomcat.util.res.StringManager;
 import org.apache.tomcat.util.threads.ResizableExecutor;
 import org.apache.tomcat.util.threads.TaskQueue;
 import org.apache.tomcat.util.threads.TaskThreadFactory;
@@ -32,6 +33,9 @@ import org.apache.tomcat.util.threads.ThreadPoolExecutor;
 public class StandardThreadExecutor extends LifecycleMBeanBase
         implements Executor, ResizableExecutor {
 
+    protected static final StringManager sm =
+            StringManager.getManager(Constants.Package);
+
     // ---------------------------------------------- Properties
     /**
      * Default thread priority
@@ -140,7 +144,9 @@ public class StandardThreadExecutor extends LifecycleMBeanBase
     protected void stopInternal() throws LifecycleException {
 
         setState(LifecycleState.STOPPING);
-        if ( executor != null ) executor.shutdownNow();
+        if (executor != null) {
+            executor.shutdownNow();
+        }
         executor = null;
         taskqueue = null;
     }
@@ -154,24 +160,28 @@ public class StandardThreadExecutor extends LifecycleMBeanBase
 
     @Override
     public void execute(Runnable command, long timeout, TimeUnit unit) {
-        if ( executor != null ) {
+        if (executor != null) {
             executor.execute(command,timeout,unit);
         } else {
-            throw new IllegalStateException("StandardThreadExecutor not started.");
+            throw new IllegalStateException(sm.getString("standardThreadExecutor.notStarted"));
         }
     }
 
 
     @Override
     public void execute(Runnable command) {
-        if ( executor != null ) {
+        if (executor != null) {
             try {
                 executor.execute(command);
             } catch (RejectedExecutionException rx) {
                 //there could have been contention around the queue
-                if ( !( (TaskQueue) executor.getQueue()).force(command) ) throw new RejectedExecutionException("Work queue full.");
+                if (!((TaskQueue) executor.getQueue()).force(command)) {
+                    throw new RejectedExecutionException(sm.getString("standardThreadExecutor.queueFull"));
+                }
             }
-        } else throw new IllegalStateException("StandardThreadPool not started.");
+        } else {
+            throw new IllegalStateException(sm.getString("standardThreadExecutor.notStarted"));
+        }
     }
 
     public void contextStopping() {

==================================================
