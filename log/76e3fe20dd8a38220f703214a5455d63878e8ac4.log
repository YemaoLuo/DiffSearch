76e3fe20dd8a38220f703214a5455d63878e8ac4
==================================================
Refactor CoyoteRequest to only use CharsetHolder
==================================================
Mark Thomas
==================================================
Wed Jan 18 19:15:52 2023 +0000
==================================================
InputBuffer.java
Refactor CoyoteRequest to only use CharsetHolder


==================================================
Request.java
index d193775a2b..4512a8c0be 100644
--- a/java/org/apache/catalina/connector/InputBuffer.java
+++ b/java/org/apache/catalina/connector/InputBuffer.java
@@ -536,7 +536,7 @@ public class InputBuffer extends Reader
 
         Charset charset = null;
         if (coyoteRequest != null) {
-            charset = coyoteRequest.getCharset();
+            charset = coyoteRequest.getCharsetHolder().getValidatedCharset();
         }
 
         if (charset == null) {

==================================================
SSIServletExternalResolver.java
index bb3d1897d9..b943bfe0e8 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -95,6 +95,7 @@ import org.apache.tomcat.InstanceManager;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
+import org.apache.tomcat.util.buf.CharsetHolder;
 import org.apache.tomcat.util.buf.EncodedSolidusHandling;
 import org.apache.tomcat.util.buf.MessageBytes;
 import org.apache.tomcat.util.buf.StringUtils;
@@ -958,44 +959,34 @@ public class Request implements HttpServletRequest {
      */
     @Override
     public String getCharacterEncoding() {
-        String characterEncoding = coyoteRequest.getCharacterEncoding();
-        if (characterEncoding != null) {
-            return characterEncoding;
-        }
+        String characterEncoding = coyoteRequest.getCharsetHolder().getName();
 
-        Context context = getContext();
-        if (context != null) {
-            return context.getRequestCharacterEncoding();
+        if (characterEncoding == null) {
+            Context context = getContext();
+            if (context != null) {
+                characterEncoding = context.getRequestCharacterEncoding();
+            }
         }
 
-        return null;
+        return characterEncoding;
     }
 
 
     private Charset getCharset() {
-        Charset charset = null;
-        try {
-            charset = coyoteRequest.getCharset();
-        } catch (UnsupportedEncodingException e) {
-            // Ignore
-        }
-        if (charset != null) {
-            return charset;
-        }
+        Charset charset = coyoteRequest.getCharsetHolder().getCharset();
 
-        Context context = getContext();
-        if (context != null) {
-            String encoding = context.getRequestCharacterEncoding();
-            if (encoding != null) {
-                try {
-                    return B2CConverter.getCharset(encoding);
-                } catch (UnsupportedEncodingException e) {
-                    // Ignore
-                }
+        if (charset == null) {
+            Context context = getContext();
+            if (context != null) {
+                charset = CharsetHolder.getInstance(context.getRequestCharacterEncoding()).getCharset() ;
             }
         }
 
-        return org.apache.coyote.Constants.DEFAULT_BODY_CHARSET;
+        if (charset == null) {
+            charset = org.apache.coyote.Constants.DEFAULT_BODY_CHARSET;
+        }
+
+        return charset;
     }
 
 
@@ -1209,7 +1200,7 @@ public class Request implements HttpServletRequest {
         // to check for a default request character encoding at the Context.
         // Therefore, if a Context default should be used, it is set explicitly
         // here. Need to do this before setting usingReader.
-        if (coyoteRequest.getCharacterEncoding() == null) {
+        if (coyoteRequest.getCharsetHolder().getName() == null) {
             // Nothing currently set explicitly.
             // Check the context
             Context context = getContext();
@@ -1612,11 +1603,11 @@ public class Request implements HttpServletRequest {
             return;
         }
 
-        // Confirm that the encoding name is valid
-        Charset charset = B2CConverter.getCharset(enc);
+        CharsetHolder charsetHolder = CharsetHolder.getInstance(enc);
+        charsetHolder.validate();
 
         // Save the validated encoding
-        coyoteRequest.setCharset(charset);
+        coyoteRequest.setCharsetHolder(charsetHolder);
     }
 
 
@@ -1628,7 +1619,7 @@ public class Request implements HttpServletRequest {
         }
 
         // Save the validated encoding
-        coyoteRequest.setCharset(charset);
+        coyoteRequest.setCharsetHolder(CharsetHolder.getInstance(charset));
     }
 
 

==================================================
Request.java
index b601c9c3b0..12cc6ad2dd 100644
--- a/java/org/apache/catalina/ssi/SSIServletExternalResolver.java
+++ b/java/org/apache/catalina/ssi/SSIServletExternalResolver.java
@@ -18,7 +18,6 @@ package org.apache.catalina.ssi;
 
 
 import java.io.IOException;
-import java.io.UnsupportedEncodingException;
 import java.net.URL;
 import java.net.URLConnection;
 import java.nio.charset.Charset;
@@ -256,11 +255,7 @@ public class SSIServletExternalResolver implements SSIExternalResolver {
                         // Get encoding settings from request / connector if
                         // possible
                         if (req instanceof Request) {
-                            try {
-                                requestCharset = ((Request)req).getCoyoteRequest().getCharset();
-                            } catch (UnsupportedEncodingException e) {
-                                // Ignore
-                            }
+                            requestCharset = ((Request)req).getCoyoteRequest().getCharsetHolder().getCharset();
                             Connector connector =  ((Request)req).getConnector();
                             uriCharset = connector.getURICharset();
                             useBodyEncodingForURI = connector.getUseBodyEncodingForURI();

==================================================
