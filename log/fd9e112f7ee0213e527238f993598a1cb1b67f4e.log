fd9e112f7ee0213e527238f993598a1cb1b67f4e
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50158
==================================================
Mark Emlyn
==================================================
Sat Apr 16 23:41:32 2011 +0000
==================================================
AprEndpoint.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50158
Ensure the asynchronous requests never timeout if the timeout is set to zero or less.
Based on a patch provided by Chris.


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1094088 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JIoEndpoint.java
index 53dd024492..194e18ce09 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -1024,7 +1024,8 @@ public class AprEndpoint extends AbstractEndpoint {
                     SocketWrapper<Long> socket = sockets.next();
                     if (socket.async) {
                         long access = socket.getLastAccess();
-                        if ((now-access)>socket.getTimeout()) {
+                        if (socket.getTimeout() > 0 &&
+                                (now-access)>socket.getTimeout()) {
                             processSocketAsync(socket,SocketStatus.TIMEOUT);
                         }
                     }

==================================================
NioEndpoint.java
index 3e97b4e440..4507430f6f 100644
--- a/java/org/apache/tomcat/util/net/JIoEndpoint.java
+++ b/java/org/apache/tomcat/util/net/JIoEndpoint.java
@@ -150,7 +150,8 @@ public class JIoEndpoint extends AbstractEndpoint {
                 while (sockets.hasNext()) {
                     SocketWrapper<Socket> socket = sockets.next();
                     long access = socket.getLastAccess();
-                    if ((now-access)>socket.getTimeout()) {
+                    if (socket.getTimeout() > 0 &&
+                            (now-access)>socket.getTimeout()) {
                         processSocketAsync(socket,SocketStatus.TIMEOUT);
                     }
                 }

==================================================
SocketProperties.java
index 0d751e75fd..775b8bb4ec 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -1344,13 +1344,16 @@ public class NioEndpoint extends AbstractEndpoint {
                             nextExpiration = (nextTime < nextExpiration)?nextTime:nextExpiration;
                         }
                     } else if (ka.isAsync() || ka.getComet()) {
-                        long delta = now - ka.getLastAccess();
-                        long timeout = (ka.getTimeout()==-1)?((long) socketProperties.getSoTimeout()):(ka.getTimeout());
-                        boolean isTimedout = delta > timeout;
-                        if (isTimedout) {
-                            // Prevent subsequent timeouts if the timeout event takes a while to process
-                            ka.access(Long.MAX_VALUE);
-                            processSocket(ka.getChannel(), SocketStatus.TIMEOUT, true);
+                        // Async requests with a timeout of 0 or less never timeout
+                        if (!ka.isAsync() || ka.getTimeout() > 0) {
+                            long delta = now - ka.getLastAccess();
+                            long timeout = (ka.getTimeout()==-1)?((long) socketProperties.getSoTimeout()):(ka.getTimeout());
+                            boolean isTimedout = delta > timeout;
+                            if (isTimedout) {
+                                // Prevent subsequent timeouts if the timeout event takes a while to process
+                                ka.access(Long.MAX_VALUE);
+                                processSocket(ka.getChannel(), SocketStatus.TIMEOUT, true);
+                            }
                         }
                     }//end if
                 }catch ( CancelledKeyException ckx ) {

==================================================
