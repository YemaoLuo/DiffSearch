0c122fc2a3ed0fe8a1e3e96e3ff193bec730e4d2
==================================================
Removed ssl attribute from NIO and APR to align with BIO
==================================================
Mark Emlyn
==================================================
Sun Jun 5 10:03:50 2011 +0000
==================================================
Http11AprProcessor.java
Removed ssl attribute from NIO and APR to align with BIO

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1132360 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11NioProcessor.java
index 5e0c52c86d..47580cf632 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -79,8 +79,6 @@ public class Http11AprProcessor extends AbstractHttp11Processor {
         outputBuffer = new InternalAprOutputBuffer(response, headerBufferSize);
         response.setOutputBuffer(outputBuffer);
         request.setResponse(response);
-        
-        ssl = endpoint.isSSLEnabled();
 
         initializeFilters(maxTrailerSize);
 
@@ -116,12 +114,6 @@ public class Http11AprProcessor extends AbstractHttp11Processor {
     protected boolean comet = false;
 
 
-    /**
-     * SSL enabled ?
-     */
-    protected boolean ssl = false;
-    
-
     /**
      * Socket associated with the current connection.
      */
@@ -524,7 +516,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor {
 
         } else if (actionCode == ActionCode.REQ_SSL_ATTRIBUTE ) {
 
-            if (ssl && (socketRef != 0)) {
+            if (endpoint.isSSLEnabled() && (socketRef != 0)) {
                 try {
                     // Cipher suite
                     Object sslO = SSLSocket.getInfoS(socketRef, SSL.SSL_INFO_CIPHER);
@@ -573,7 +565,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor {
 
         } else if (actionCode == ActionCode.REQ_SSL_CERTIFICATE) {
 
-            if (ssl && (socketRef != 0)) {
+            if (endpoint.isSSLEnabled() && (socketRef != 0)) {
                 // Consume and buffer the request body, so that it does not
                 // interfere with the client's handshake messages
                 InputFilter[] inputFilters = inputBuffer.getFilters();
@@ -653,7 +645,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor {
         contentDelimitation = false;
         expectation = false;
         sendfileData = null;
-        if (ssl) {
+        if (endpoint.isSSLEnabled()) {
             request.scheme().setString("https");
         }
         MessageBytes protocolMB = request.protocol();
@@ -865,7 +857,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor {
         }
 
         if (colonPos < 0) {
-            if (!ssl) {
+            if (!endpoint.isSSLEnabled()) {
                 // 80 - Default HTTP port
                 request.setServerPort(80);
             } else {

==================================================
