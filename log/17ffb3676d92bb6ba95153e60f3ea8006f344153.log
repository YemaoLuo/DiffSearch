17ffb3676d92bb6ba95153e60f3ea8006f344153
==================================================
Fix resource leak in annotations cache that prevented unloading of resources that used annotations
==================================================
Mark Emlyn
==================================================
Mon Sep 19 15:31:43 2011 +0000
==================================================
DefaultInstanceManager.java
Fix resource leak in annotations cache that prevented unloading of resources that used annotations

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1172664 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestDefaultInstanceManager.java
index 9a5972c548..537606d571 100644
--- a/java/org/apache/catalina/core/DefaultInstanceManager.java
+++ b/java/org/apache/catalina/core/DefaultInstanceManager.java
@@ -21,6 +21,7 @@ package org.apache.catalina.core;
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.lang.ref.WeakReference;
 import java.lang.reflect.AccessibleObject;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
@@ -35,7 +36,7 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
-import java.util.concurrent.ConcurrentHashMap;
+import java.util.WeakHashMap;
 
 import javax.annotation.PostConstruct;
 import javax.annotation.PreDestroy;
@@ -70,8 +71,8 @@ public class DefaultInstanceManager implements InstanceManager {
     private Properties restrictedFilters = new Properties();
     private Properties restrictedListeners = new Properties();
     private Properties restrictedServlets = new Properties();
-    private Map<Class<?>,List<AnnotationCacheEntry>> annotationCache =
-        new ConcurrentHashMap<Class<?>, List<AnnotationCacheEntry>>();
+    private final Map<Class<?>,WeakReference<List<AnnotationCacheEntry>>> annotationCache =
+        new WeakHashMap<Class<?>, WeakReference<List<AnnotationCacheEntry>>>();
 
     public DefaultInstanceManager(Context context, Map<String, Map<String, String>> injectionMap, org.apache.catalina.Context catalinaContext, ClassLoader containerClassLoader) {
         classLoader = catalinaContext.getLoader().getClassLoader();
@@ -178,7 +179,10 @@ public class DefaultInstanceManager implements InstanceManager {
 
         // At the end the postconstruct annotated
         // method is invoked
-        List<AnnotationCacheEntry> annotations = annotationCache.get(clazz);
+        List<AnnotationCacheEntry> annotations;
+        synchronized (annotationCache) {
+            annotations = annotationCache.get(clazz).get();
+        }
         for (AnnotationCacheEntry entry : annotations) {
             if (entry.getType() == AnnotationCacheEntryType.POST_CONSTRUCT) {
                 Method postConstruct = (Method) entry.getAccessibleObject();
@@ -209,7 +213,14 @@ public class DefaultInstanceManager implements InstanceManager {
 
         // At the end the postconstruct annotated
         // method is invoked
-        List<AnnotationCacheEntry> annotations = annotationCache.get(clazz);
+        List<AnnotationCacheEntry> annotations = null;
+        synchronized (annotationCache) {
+            WeakReference<List<AnnotationCacheEntry>> ref =
+                annotationCache.get(clazz);
+            if (ref != null) {
+                annotations = ref.get();
+            }
+        }
         if (annotations == null) {
             // instance not created through the instance manager
             return;
@@ -243,7 +254,14 @@ public class DefaultInstanceManager implements InstanceManager {
             InvocationTargetException, NamingException {
 
         while (clazz != null) {
-            List<AnnotationCacheEntry> annotations = annotationCache.get(clazz);
+            List<AnnotationCacheEntry> annotations = null;
+            synchronized (annotationCache) {
+                WeakReference<List<AnnotationCacheEntry>> ref =
+                    annotationCache.get(clazz);
+                if (ref != null) {
+                    annotations = ref.get();
+                }
+            }
             if (annotations == null) {
                 annotations = new ArrayList<AnnotationCacheEntry>();
                 
@@ -396,7 +414,11 @@ public class DefaultInstanceManager implements InstanceManager {
                     // Use common empty list to save memory 
                     annotations = Collections.emptyList();
                 }
-                annotationCache.put(clazz, annotations);
+                synchronized (annotationCache) {
+                    annotationCache.put(clazz,
+                            new WeakReference<List<AnnotationCacheEntry>>(
+                                    annotations));
+                }
             } else {
                 // If the annotations for this class have been cached, the
                 // annotations for all the super classes will have been cachced
@@ -429,7 +451,10 @@ public class DefaultInstanceManager implements InstanceManager {
         Class<?> clazz = instance.getClass();
         
         while (clazz != null) {
-            List<AnnotationCacheEntry> annotations = annotationCache.get(clazz);
+            List<AnnotationCacheEntry> annotations;
+            synchronized (annotationCache) {
+                annotations = annotationCache.get(clazz).get();
+            }
             for (AnnotationCacheEntry entry : annotations) {
                 if (entry.getType() == AnnotationCacheEntryType.FIELD) {
                     if (entry.getAccessibleObject() instanceof Method) {
@@ -448,6 +473,16 @@ public class DefaultInstanceManager implements InstanceManager {
     }
 
 
+    /**
+     * Makes cache size available to unit tests.
+     */
+    protected int getAnnotationCacheSize() {
+        synchronized (annotationCache) {
+            return annotationCache.size();
+        }
+    }
+
+
     protected Class<?> loadClassMaybePrivileged(final String className, final ClassLoader classLoader) throws ClassNotFoundException {
         Class<?> clazz;
         if (SecurityUtil.isPackageProtectionEnabled()) {

==================================================
