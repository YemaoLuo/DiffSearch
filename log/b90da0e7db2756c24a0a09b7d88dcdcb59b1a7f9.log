b90da0e7db2756c24a0a09b7d88dcdcb59b1a7f9
==================================================
Re-factoring in support of https://issues.apache.org/bugzilla/show_bug.cgi?id=50360
==================================================
Mark Emlyn
==================================================
Wed Dec 8 17:15:50 2010 +0000
==================================================
Connector.java
index 325d24f077..024bf91e67 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -27,6 +27,11 @@
   <module name="FileTabCharacter"/>
 
   <module name="TreeWalker">
+    <!-- Block Checks -->
+    <!--  ~60 errors
+    <module name="AvoidNestedBlocks"/>
+    -->
+
     <!-- Coding -->
     <module name="IllegalInstantiation"/>
     
@@ -54,12 +59,12 @@
     https://sourceforge.net/tracker/?func=detail&aid=3039718&group_id=29721&atid=397078
     <module name="GenericWhitespace"/>
     -->
+    <module name="EmptyForInitializerPad"/>
+    <module name="EmptyForIteratorPad"/>
     <!--  ~ 1000 errors
     <module name="OperatorWrap">
       <property name="option" value="oel"/>
     </module>
     -->
-    <module name="EmptyForInitializerPad"/>
-    <module name="EmptyForIteratorPad"/>
   </module>
 </module>
\ No newline at end of file

==================================================
CoyoteAdapter.java
index b65250ec52..609bbc8adb 100644
--- a/java/org/apache/catalina/connector/Connector.java
+++ b/java/org/apache/catalina/connector/Connector.java
@@ -907,9 +907,6 @@ public class Connector extends LifecycleMBeanBase  {
                  ("coyoteConnector.protocolHandlerInitializationFailed"), e);
         }
 
-        onameProtocolHandler = register(protocolHandler,
-                createObjectNameKeyProperties("ProtocolHandler"));
-
         // Initialize mapper listener
         mapperListener.init();
     }
@@ -967,7 +964,6 @@ public class Connector extends LifecycleMBeanBase  {
     @Override
     protected void destroyInternal() throws LifecycleException {
         mapperListener.destroy();
-        unregister(onameProtocolHandler);
         
         try {
             protocolHandler.destroy();

==================================================
AbstractProtocolHandler.java
index 082b9c4d07..0cb736eee8 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -464,6 +464,12 @@ public class CoyoteAdapter implements Adapter {
     }
     
     
+    @Override
+    public String getDomain() {
+        return connector.getDomain();
+    }
+
+
     // ------------------------------------------------------ Protected Methods
 
 

==================================================
Adapter.java
index 43eaf90422..a8040eb966 100644
--- a/java/org/apache/coyote/AbstractProtocolHandler.java
+++ b/java/org/apache/coyote/AbstractProtocolHandler.java
@@ -23,6 +23,7 @@ import java.util.concurrent.Executor;
 
 import javax.management.MBeanRegistration;
 import javax.management.MBeanServer;
+import javax.management.MalformedObjectNameException;
 import javax.management.ObjectName;
 
 import org.apache.juli.logging.Log;
@@ -334,6 +335,24 @@ public abstract class AbstractProtocolHandler implements ProtocolHandler,
         // NOOP
     }
 
+    private ObjectName createObjectName() throws MalformedObjectNameException {
+        // Use the same domain as the connector
+        domain = adapter.getDomain();
+        
+        if (domain == null) {
+            return null;
+        }
+
+        StringBuilder name = new StringBuilder(getDomain());
+        name.append(":type=ProtocolHandler,port=");
+        name.append(getPort());
+        InetAddress address = getAddress();
+        if (address != null) {
+            name.append(",address=");
+            name.append(ObjectName.quote(address.toString()));
+        }
+        return new ObjectName(name.toString());
+    }
 
     // ------------------------------------------------------- Lifecycle methods
 
@@ -349,6 +368,15 @@ public abstract class AbstractProtocolHandler implements ProtocolHandler,
             getLog().info(sm.getString("abstractProtocolHandler.init",
                     getName()));
 
+        if (oname == null) {
+            // Component not pre-registered so register it
+            oname = createObjectName();
+            if (oname != null) {
+                Registry.getRegistry(null, null).registerComponent(this, oname,
+                    null);
+            }
+        }
+
         if (this.domain != null) {
             try {
                 tpOname = new ObjectName(domain + ":" +
@@ -450,6 +478,12 @@ public abstract class AbstractProtocolHandler implements ProtocolHandler,
                     getName()), e);
         }
         
+        // If object was pre-registered (mserver != null) what ever registered
+        // the ProtocolHandler should de-register it
+        if (oname != null && mserver == null) {
+                Registry.getRegistry(null, null).unregisterComponent(oname);
+        }
+
         if (tpOname != null)
             Registry.getRegistry(null, null).unregisterComponent(tpOname);
         if (rgOname != null)

==================================================
