0726d8ba4d08d361dda08a8b9969663b3ecbba96
==================================================
Correctly handle an invalid quality value in an Accept-Language header.
==================================================
Mark Thomas
==================================================
Wed May 30 15:38:35 2018 +0000
==================================================
HttpParser.java
Correctly handle an invalid quality value in an Accept-Language header.
Expand unit tests to cover this issue and improve coverage.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1832554 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestAcceptLanguage.java
index b4c5c92e36..4e054cf98f 100644
--- a/java/org/apache/tomcat/util/http/parser/HttpParser.java
+++ b/java/org/apache/tomcat/util/http/parser/HttpParser.java
@@ -580,30 +580,25 @@ public class HttpParser {
 
         // Should be no more than 3 decimal places
         StringBuilder value = new StringBuilder(5);
-        int decimalPlacesRead = 0;
+        int decimalPlacesRead = -1;
+
         if (c == '0' || c == '1') {
             value.append((char) c);
             c = input.read();
-            if (c == '.') {
-                value.append('.');
-            } else if (c < '0' || c > '9') {
-                decimalPlacesRead = 3;
-            }
+
             while (true) {
-                c = input.read();
-                if (c >= '0' && c <= '9') {
+                if (decimalPlacesRead == -1 && c == '.') {
+                    value.append('.');
+                    decimalPlacesRead = 0;
+                } else if (decimalPlacesRead > -1 && c >= '0' && c <= '9') {
                     if (decimalPlacesRead < 3) {
                         value.append((char) c);
                         decimalPlacesRead++;
                     }
-                } else if (c == delimiter || c == 9 || c == 32 || c == -1) {
-                    break;
                 } else {
-                    // Malformed. Use quality of zero so it is dropped and skip until
-                    // EOF or the next delimiter
-                    skipUntil(input, c, delimiter);
-                    return 0;
+                    break;
                 }
+                c = input.read();
             }
         } else {
             // Malformed. Use quality of zero so it is dropped and skip until
@@ -612,6 +607,19 @@ public class HttpParser {
             return 0;
         }
 
+        if (c == 9 || c == 32) {
+            skipLws(input);
+            c = input.read();
+        }
+
+        // Must be at delimiter or EOF
+        if (c != delimiter && c != -1) {
+            // Malformed. Use quality of zero so it is dropped and skip until
+            // EOF or the next delimiter
+            skipUntil(input, c, delimiter);
+            return 0;
+        }
+
         double result = Double.parseDouble(value.toString());
         if (result > 1) {
             return 0;

==================================================
