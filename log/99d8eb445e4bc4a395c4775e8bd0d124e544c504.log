99d8eb445e4bc4a395c4775e8bd0d124e544c504
==================================================
Rename process() -> service()
==================================================
Mark Thomas
==================================================
Tue Oct 20 09:00:45 2015 +0000
==================================================
AbstractProcessor.java
Rename process() -> service()
Create a new process() method to hold code pulled up from
StreamProcessor and AbstractConnectionHandler

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1709545 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractProcessorLight.java
index b9d296566a..df6064e8d3 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -204,12 +204,6 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
     }
 
 
-    /**
-     * Process an in-progress request that is not longer in standard HTTP mode.
-     * Uses currently include Servlet 3.0 Async and HTTP upgrade connections.
-     * Further uses may be added in the future. These will typically start as
-     * HTTP requests.
-     */
     @Override
     public final SocketState dispatch(SocketStatus status) {
 

==================================================
AbstractProtocol.java
index e4f6d13ff7..388b776e5b 100644
--- a/java/org/apache/coyote/AbstractProcessorLight.java
+++ b/java/org/apache/coyote/AbstractProcessorLight.java
@@ -16,11 +16,14 @@
  */
 package org.apache.coyote;
 
+import java.io.IOException;
 import java.util.Iterator;
 import java.util.Set;
 import java.util.concurrent.CopyOnWriteArraySet;
 
+import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState;
 import org.apache.tomcat.util.net.DispatchType;
+import org.apache.tomcat.util.net.SocketWrapperBase;
 
 /**
  * This is a light-weight abstract processor implementation that is intended as
@@ -32,6 +35,13 @@ public abstract class AbstractProcessorLight implements Processor {
     private Set<DispatchType> dispatches = new CopyOnWriteArraySet<>();
 
 
+    @Override
+    public SocketState process(SocketWrapperBase<?> socketWrapper) throws IOException {
+        // TODO Auto-generated method stub
+        return null;
+    }
+
+
     @Override
     public void addDispatch(DispatchType dispatchType) {
         synchronized (dispatches) {

==================================================
Processor.java
index 671f2a9c46..367ccc85d3 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -714,13 +714,13 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
                             // loop and call release() which will recycle the
                             // processor (and input buffer) deleting any
                             // pipe-lined data. To avoid this, process it now.
-                            state = processor.process(wrapper);
+                            state = processor.service(wrapper);
                         }
                     } else if (status == SocketStatus.OPEN_WRITE) {
                         // Extra write event likely after async, ignore
                         state = SocketState.LONG;
                     } else {
-                        state = processor.process(wrapper);
+                        state = processor.service(wrapper);
                     }
 
                     if (state != SocketState.CLOSED && processor.isAsync()) {

==================================================
AjpProcessor.java
index ffabcc917a..3d9d2412bb 100644
--- a/java/org/apache/coyote/Processor.java
+++ b/java/org/apache/coyote/Processor.java
@@ -34,11 +34,13 @@ import org.apache.tomcat.util.net.SocketWrapperBase;
  * Common interface for processors of all protocols.
  */
 public interface Processor {
+
     Executor getExecutor();
 
     /**
-     * Process HTTP requests. All requests are treated as HTTP requests to start
-     * with although they may change type during processing.
+     * Process a connection. This is called whenever an event occurs (e.g. more
+     * data arrives) that allows processing to continue for a connection that is
+     * not currently being processed.
      *
      * @param socketWrapper The connection to process
      *
@@ -50,6 +52,30 @@ public interface Processor {
      */
     SocketState process(SocketWrapperBase<?> socketWrapper) throws IOException;
 
+    /**
+     * Service a 'standard' HTTP request. This method is called for both new
+     * requests and for requests that have partially read the HTTP request line
+     * or HTTP headers. Once the headers have been fully read this method is not
+     * called again until there is a new HTTP request to process. Note that the
+     * request type may change during processing which may result in one or more
+     * calls to {@link #dispatch(SocketStatus)}.
+     *
+     * @param socketWrapper The connection to process
+     *
+     * @return The state the caller should put the socket in when this method
+     *         returns
+     *
+     * @throws IOException If an I/O error occurs during the processing of the
+     *         request
+     */
+    SocketState service(SocketWrapperBase<?> socketWrapper) throws IOException;
+
+    /**
+     * Process an in-progress request that is not longer in standard HTTP mode.
+     * Uses currently include Servlet 3.0 Async and HTTP upgrade connections.
+     * Further uses may be added in the future. These will typically start as
+     * HTTP requests.
+     */
     SocketState dispatch(SocketStatus status);
 
     SocketState asyncPostProcess();

==================================================
Http11Processor.java
index 60f4aff32a..103803781b 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -645,7 +645,7 @@ public class AjpProcessor extends AbstractProcessor {
      * @throws IOException error during an I/O operation
      */
     @Override
-    public SocketState process(SocketWrapperBase<?> socket) throws IOException {
+    public SocketState service(SocketWrapperBase<?> socket) throws IOException {
 
         RequestInfo rp = request.getRequestProcessor();
         rp.setStage(org.apache.coyote.Constants.STAGE_PARSE);

==================================================
UpgradeProcessorBase.java
index 2bfe798278..4f48730593 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -925,7 +925,7 @@ public class Http11Processor extends AbstractProcessor {
      * @throws IOException error during an I/O operation
      */
     @Override
-    public SocketState process(SocketWrapperBase<?> socketWrapper)
+    public SocketState service(SocketWrapperBase<?> socketWrapper)
         throws IOException {
         RequestInfo rp = request.getRequestProcessor();
         rp.setStage(org.apache.coyote.Constants.STAGE_PARSE);

==================================================
StreamProcessor.java
index f9ca717bdd..5af65096b3 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeProcessorBase.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeProcessorBase.java
@@ -70,7 +70,7 @@ public abstract class UpgradeProcessorBase extends AbstractProcessorLight implem
 
 
     @Override
-    public final SocketState process(SocketWrapperBase<?> socketWrapper) throws IOException {
+    public final SocketState service(SocketWrapperBase<?> socketWrapper) throws IOException {
         return null;
     }
 

==================================================
