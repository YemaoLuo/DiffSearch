96b44321b81830455df4bdb20d474678b689fe6d
==================================================
Move configuration of trailer header size limit to the connector
==================================================
Mark Emlyn
==================================================
Tue Nov 23 21:45:56 2010 +0000
==================================================
Constants.java
Move configuration of trailer header size limit to the connector

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1038351 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractHttp11Processor.java
index a610e3bc22..2d87e06d55 100644
--- a/java/org/apache/coyote/Constants.java
+++ b/java/org/apache/coyote/Constants.java
@@ -67,14 +67,5 @@ public final class Constants {
     public static final boolean USE_CUSTOM_STATUS_MSG_IN_HEADER =
         Boolean.valueOf(System.getProperty(
                 "org.apache.coyote.USE_CUSTOM_STATUS_MSG_IN_HEADER",
-                "false")).booleanValue(); 
-
-    /**
-     * Limit on the total length of the trailer headers in
-     * a chunked HTTP request.
-     */
-    public static final int MAX_TRAILER_SIZE =
-        Integer.parseInt(System.getProperty(
-                "org.apache.coyote.MAX_TRAILER_SIZE",
-                "8192"));
+                "false")).booleanValue();
 }

==================================================
AbstractHttp11Protocol.java
index 22be365193..34598a930a 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -771,13 +771,13 @@ public abstract class AbstractHttp11Processor implements ActionHook, Processor {
     /**
      * Initialize standard input and output filters.
      */
-    protected void initializeFilters() {
+    protected void initializeFilters(int maxTrailerSize) {
         // Create and add the identity filters.
         getInputBuffer().addFilter(new IdentityInputFilter());
         getOutputBuffer().addFilter(new IdentityOutputFilter());
 
         // Create and add the chunked filters.
-        getInputBuffer().addFilter(new ChunkedInputFilter());
+        getInputBuffer().addFilter(new ChunkedInputFilter(maxTrailerSize));
         getOutputBuffer().addFilter(new ChunkedOutputFilter());
 
         // Create and add the void filters.

==================================================
Http11AprProcessor.java
index 1cd32a99f0..717e4d3376 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -332,6 +332,16 @@ public abstract class AbstractHttp11Protocol implements ProtocolHandler, MBeanRe
     public void setServer( String server ) { this.server = server; }
     public String getServer() { return server; }
     
+    // HTTP
+    /**
+     * Maximum size of trailing headers in bytes
+     */
+    private int maxTrailerSize = 8192;
+    public int getMaxTrailerSize() { return maxTrailerSize; }
+    public void setMaxTrailerSize(int maxTrailerSize) {
+        this.maxTrailerSize = maxTrailerSize;
+    }
+
     @Override
     public Executor getExecutor() { return endpoint.getExecutor(); }
     public void setExecutor(Executor executor) { endpoint.setExecutor(executor); }

==================================================
Http11AprProtocol.java
index a5b374bd8e..c13c46ed98 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -66,7 +66,8 @@ public class Http11AprProcessor extends AbstractHttp11Processor {
     // ----------------------------------------------------------- Constructors
 
 
-    public Http11AprProcessor(int headerBufferSize, AprEndpoint endpoint) {
+    public Http11AprProcessor(int headerBufferSize, AprEndpoint endpoint,
+            int maxTrailerSize) {
 
         this.endpoint = endpoint;
         
@@ -82,7 +83,7 @@ public class Http11AprProcessor extends AbstractHttp11Processor {
         
         ssl = endpoint.isSSLEnabled();
 
-        initializeFilters();
+        initializeFilters(maxTrailerSize);
 
         // Cause loading of HexUtils
         HexUtils.load();

==================================================
Http11NioProcessor.java
index 05edd52f04..13756f1b8c 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -433,7 +433,8 @@ public class Http11AprProtocol extends AbstractHttp11Protocol {
 
         protected Http11AprProcessor createProcessor() {
             Http11AprProcessor processor = new Http11AprProcessor(
-                    proto.getMaxHttpHeaderSize(), (AprEndpoint)proto.endpoint);
+                    proto.getMaxHttpHeaderSize(), (AprEndpoint)proto.endpoint,
+                    proto.getMaxTrailerSize());
             processor.setAdapter(proto.adapter);
             processor.setMaxKeepAliveRequests(proto.getMaxKeepAliveRequests());
             processor.setTimeout(proto.timeout);

==================================================
Http11NioProtocol.java
index a48ecf2433..3d5ff2ce81 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -68,7 +68,8 @@ public class Http11NioProcessor extends AbstractHttp11Processor {
     // ----------------------------------------------------------- Constructors
 
 
-    public Http11NioProcessor(int maxHttpHeaderSize, NioEndpoint endpoint) {
+    public Http11NioProcessor(int maxHttpHeaderSize, NioEndpoint endpoint,
+            int maxTrailerSize) {
 
         this.endpoint = endpoint;
 
@@ -84,7 +85,7 @@ public class Http11NioProcessor extends AbstractHttp11Processor {
 
         ssl = endpoint.isSSLEnabled();
 
-        initializeFilters();
+        initializeFilters(maxTrailerSize);
 
         // Cause loading of HexUtils
         HexUtils.load();

==================================================
Http11Processor.java
index 2d36591fe0..c92f0f6589 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -433,8 +433,8 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
 
         public Http11NioProcessor createProcessor() {
             Http11NioProcessor processor = new Http11NioProcessor(
-              proto.getMaxHttpHeaderSize(),
-              (NioEndpoint)proto.endpoint);
+                    proto.getMaxHttpHeaderSize(), (NioEndpoint)proto.endpoint,
+                    proto.getMaxTrailerSize());
             processor.setAdapter(proto.adapter);
             processor.setMaxKeepAliveRequests(proto.getMaxKeepAliveRequests());
             processor.setTimeout(proto.getTimeout());

==================================================
Http11Protocol.java
index dd223a84d7..59f7909236 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -61,7 +61,8 @@ public class Http11Processor extends AbstractHttp11Processor {
    // ------------------------------------------------------------ Constructor
 
 
-    public Http11Processor(int headerBufferSize, JIoEndpoint endpoint) {
+    public Http11Processor(int headerBufferSize, JIoEndpoint endpoint,
+            int maxTrailerSize) {
 
         this.endpoint = endpoint;
         
@@ -75,7 +76,7 @@ public class Http11Processor extends AbstractHttp11Processor {
         response.setOutputBuffer(outputBuffer);
         request.setResponse(response);
 
-        initializeFilters();
+        initializeFilters(maxTrailerSize);
 
         // Cause loading of HexUtils
         HexUtils.load();

==================================================
ChunkedInputFilter.java
index 7cd7b26d4c..e4ed1e111a 100644
--- a/java/org/apache/coyote/http11/Http11Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Protocol.java
@@ -293,8 +293,9 @@ public class Http11Protocol extends AbstractHttp11JsseProtocol {
         }
         
         protected Http11Processor createProcessor() {
-            Http11Processor processor =
-                new Http11Processor(proto.getMaxHttpHeaderSize(), (JIoEndpoint)proto.endpoint);
+            Http11Processor processor = new Http11Processor(
+                    proto.getMaxHttpHeaderSize(), (JIoEndpoint)proto.endpoint,
+                    proto.getMaxTrailerSize());
             processor.setAdapter(proto.adapter);
             processor.setMaxKeepAliveRequests(proto.getMaxKeepAliveRequests());
             processor.setKeepAliveTimeout(proto.getKeepAliveTimeout());

==================================================
TestChunkedInputFilter.java
index ab91acf062..a48ae35553 100644
--- a/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java
@@ -102,15 +102,7 @@ public class ChunkedInputFilter implements InputFilter {
     /**
      * Byte chunk used to store trailing headers.
      */
-    protected ByteChunk trailingHeaders;
-
-    {
-        trailingHeaders = new ByteChunk();
-        if (org.apache.coyote.Constants.MAX_TRAILER_SIZE > 0) {
-            trailingHeaders.setLimit(org.apache.coyote.Constants.MAX_TRAILER_SIZE);
-        }
-    }
-
+    protected ByteChunk trailingHeaders = new ByteChunk();
 
     /**
      * Flag set to true if the next call to doRead() must parse a CRLF pair
@@ -124,8 +116,10 @@ public class ChunkedInputFilter implements InputFilter {
      */
     private Request request;
     
-    // ------------------------------------------------------------- Properties
-
+    // ----------------------------------------------------------- Constructors
+    public ChunkedInputFilter(int maxTrailerSize) {
+        this.trailingHeaders.setLimit(maxTrailerSize);
+    }
 
     // ---------------------------------------------------- InputBuffer Methods
 

==================================================
