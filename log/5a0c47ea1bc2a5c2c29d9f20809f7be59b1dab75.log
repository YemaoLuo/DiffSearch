5a0c47ea1bc2a5c2c29d9f20809f7be59b1dab75
==================================================
Partial fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=48132
==================================================
Mark Emlyn
==================================================
Thu Nov 5 01:13:12 2009 +0000
==================================================
ExpressionFactoryImpl.java
Partial fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=48132
Patch provided by sebb with some additional issues reported by Eclispe

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@832950 13f79535-47bb-0310-9956-ffa450edef68



==================================================
MethodExpressionImpl.java
index 02263dfef2..8260ab62bf 100644
--- a/java/org/apache/el/ExpressionFactoryImpl.java
+++ b/java/org/apache/el/ExpressionFactoryImpl.java
@@ -42,10 +42,12 @@ public class ExpressionFactoryImpl extends ExpressionFactory {
         super();
     }
 
+    @Override
     public Object coerceToType(Object obj, Class<?> type) {
         return ELSupport.coerceToType(obj, type);
     }
 
+    @Override
     public MethodExpression createMethodExpression(ELContext context,
             String expression, Class<?> expectedReturnType,
             Class<?>[] expectedParamTypes) {
@@ -58,6 +60,7 @@ public class ExpressionFactoryImpl extends ExpressionFactory {
                 expectedParamTypes);
     }
 
+    @Override
     public ValueExpression createValueExpression(ELContext context,
             String expression, Class<?> expectedType) {
         if (expectedType == null) {
@@ -68,6 +71,7 @@ public class ExpressionFactoryImpl extends ExpressionFactory {
         return builder.createValueExpression(expectedType);
     }
 
+    @Override
     public ValueExpression createValueExpression(Object instance,
             Class<?> expectedType) {
         if (expectedType == null) {

==================================================
MethodExpressionLiteral.java
index ce0c044020..f0819af9a2 100644
--- a/java/org/apache/el/MethodExpressionImpl.java
+++ b/java/org/apache/el/MethodExpressionImpl.java
@@ -145,6 +145,7 @@ public final class MethodExpressionImpl extends MethodExpression implements
      * @see java.util.Hashtable
      * @see java.lang.Object#equals(java.lang.Object)
      */
+    @Override
     public boolean equals(Object obj) {
         return (obj instanceof MethodExpressionImpl && obj.hashCode() == this
                 .hashCode());
@@ -171,6 +172,7 @@ public final class MethodExpressionImpl extends MethodExpression implements
      * 
      * @see javax.el.Expression#getExpressionString()
      */
+    @Override
     public String getExpressionString() {
         return this.expr;
     }
@@ -197,6 +199,7 @@ public final class MethodExpressionImpl extends MethodExpression implements
      *             the cause property of this exception, if available.
      * @see javax.el.MethodExpression#getMethodInfo(javax.el.ELContext)
      */
+    @Override
     public MethodInfo getMethodInfo(ELContext context)
             throws PropertyNotFoundException, MethodNotFoundException,
             ELException {
@@ -234,6 +237,7 @@ public final class MethodExpressionImpl extends MethodExpression implements
      * @see java.util.Hashtable
      * @see java.lang.Object#hashCode()
      */
+    @Override
     public int hashCode() {
         return this.expr.hashCode();
     }
@@ -268,6 +272,7 @@ public final class MethodExpressionImpl extends MethodExpression implements
      * @see javax.el.MethodExpression#invoke(javax.el.ELContext,
      *      java.lang.Object[])
      */
+    @Override
     public Object invoke(ELContext context, Object[] params)
             throws PropertyNotFoundException, MethodNotFoundException,
             ELException {
@@ -308,6 +313,7 @@ public final class MethodExpressionImpl extends MethodExpression implements
         out.writeObject(this.varMapper);
     }
 
+    @Override
     public boolean isLiteralText() {
         return false;
     }

==================================================
ValueExpressionImpl.java
index 5e3ed0facc..dc771e42da 100644
--- a/java/org/apache/el/MethodExpressionLiteral.java
+++ b/java/org/apache/el/MethodExpressionLiteral.java
@@ -50,10 +50,12 @@ public class MethodExpressionLiteral extends MethodExpression implements Externa
         this.paramTypes = paramTypes;
     }
 
+    @Override
     public MethodInfo getMethodInfo(ELContext context) throws ELException {
         return new MethodInfo(this.expr, this.expectedType, this.paramTypes);
     }
 
+    @Override
     public Object invoke(ELContext context, Object[] params) throws ELException {
         if (this.expectedType != null) {
             return ELSupport.coerceToType(this.expr, this.expectedType);
@@ -62,18 +64,22 @@ public class MethodExpressionLiteral extends MethodExpression implements Externa
         }
     }
 
+    @Override
     public String getExpressionString() {
         return this.expr;
     }
 
+    @Override
     public boolean equals(Object obj) {
         return (obj instanceof MethodExpressionLiteral && this.hashCode() == obj.hashCode());
     }
 
+    @Override
     public int hashCode() {
         return this.expr.hashCode();
     }
 
+    @Override
     public boolean isLiteralText() {
         return true;
     }

==================================================
ValueExpressionLiteral.java
index b8f343039b..74d84a878d 100644
--- a/java/org/apache/el/ValueExpressionImpl.java
+++ b/java/org/apache/el/ValueExpressionImpl.java
@@ -123,6 +123,7 @@ public final class ValueExpressionImpl extends ValueExpression implements
      * 
      * @see java.lang.Object#equals(java.lang.Object)
      */
+    @Override
     public boolean equals(Object obj) {
         return (obj instanceof ValueExpressionImpl && obj.hashCode() == this
                 .hashCode());
@@ -133,6 +134,7 @@ public final class ValueExpressionImpl extends ValueExpression implements
      * 
      * @see javax.el.ValueExpression#getExpectedType()
      */
+    @Override
     public Class<?> getExpectedType() {
         return this.expectedType;
     }
@@ -147,6 +149,7 @@ public final class ValueExpressionImpl extends ValueExpression implements
      * 
      * @see javax.el.Expression#getExpressionString()
      */
+    @Override
     public String getExpressionString() {
         return this.expr;
     }
@@ -167,6 +170,7 @@ public final class ValueExpressionImpl extends ValueExpression implements
      * 
      * @see javax.el.ValueExpression#getType(javax.el.ELContext)
      */
+    @Override
     public Class<?> getType(ELContext context) throws PropertyNotFoundException,
             ELException {
         EvaluationContext ctx = new EvaluationContext(context, this.fnMapper,
@@ -179,6 +183,7 @@ public final class ValueExpressionImpl extends ValueExpression implements
      * 
      * @see javax.el.ValueExpression#getValue(javax.el.ELContext)
      */
+    @Override
     public Object getValue(ELContext context) throws PropertyNotFoundException,
             ELException {
         EvaluationContext ctx = new EvaluationContext(context, this.fnMapper,
@@ -195,6 +200,7 @@ public final class ValueExpressionImpl extends ValueExpression implements
      * 
      * @see java.lang.Object#hashCode()
      */
+    @Override
     public int hashCode() {
         return this.expr.hashCode();
     }
@@ -204,6 +210,7 @@ public final class ValueExpressionImpl extends ValueExpression implements
      * 
      * @see javax.el.ValueExpression#isLiteralText()
      */
+    @Override
     public boolean isLiteralText() {
         try {
             return this.getNode() instanceof AstLiteralExpression;
@@ -217,6 +224,7 @@ public final class ValueExpressionImpl extends ValueExpression implements
      * 
      * @see javax.el.ValueExpression#isReadOnly(javax.el.ELContext)
      */
+    @Override
     public boolean isReadOnly(ELContext context)
             throws PropertyNotFoundException, ELException {
         EvaluationContext ctx = new EvaluationContext(context, this.fnMapper,
@@ -241,6 +249,7 @@ public final class ValueExpressionImpl extends ValueExpression implements
      * @see javax.el.ValueExpression#setValue(javax.el.ELContext,
      *      java.lang.Object)
      */
+    @Override
     public void setValue(ELContext context, Object value)
             throws PropertyNotFoundException, PropertyNotWritableException,
             ELException {
@@ -257,6 +266,7 @@ public final class ValueExpressionImpl extends ValueExpression implements
         out.writeObject(this.varMapper);
     }
 
+    @Override
     public String toString() {
         return "ValueExpression["+this.expr+"]";
     }

==================================================
ELArithmetic.java
index 0dd615896b..72d88e355f 100644
--- a/java/org/apache/el/ValueExpressionLiteral.java
+++ b/java/org/apache/el/ValueExpressionLiteral.java
@@ -50,6 +50,7 @@ public final class ValueExpressionLiteral extends ValueExpression implements
         this.expectedType = expectedType;
     }
 
+    @Override
     public Object getValue(ELContext context) {
         if (this.expectedType != null) {
             return ELSupport.coerceToType(this.value, this.expectedType);
@@ -57,27 +58,33 @@ public final class ValueExpressionLiteral extends ValueExpression implements
         return this.value;
     }
 
+    @Override
     public void setValue(ELContext context, Object value) {
         throw new PropertyNotWritableException(MessageFactory.get(
                 "error.value.literal.write", this.value));
     }
 
+    @Override
     public boolean isReadOnly(ELContext context) {
         return true;
     }
 
+    @Override
     public Class<?> getType(ELContext context) {
         return (this.value != null) ? this.value.getClass() : null;
     }
 
+    @Override
     public Class<?> getExpectedType() {
         return this.expectedType;
     }
 
+    @Override
     public String getExpressionString() {
         return (this.value != null) ? this.value.toString() : null;
     }
 
+    @Override
     public boolean equals(Object obj) {
         return (obj instanceof ValueExpressionLiteral && this
                 .equals((ValueExpressionLiteral) obj));
@@ -88,10 +95,12 @@ public final class ValueExpressionLiteral extends ValueExpression implements
                 .equals(ve.value))));
     }
 
+    @Override
     public int hashCode() {
         return (this.value != null) ? this.value.hashCode() : 0;
     }
 
+    @Override
     public boolean isLiteralText() {
         return true;
     }

==================================================
EvaluationContext.java
index 02139933e7..5fb19c8eb8 100644
--- a/java/org/apache/el/lang/ELArithmetic.java
+++ b/java/org/apache/el/lang/ELArithmetic.java
@@ -32,10 +32,12 @@ public abstract class ELArithmetic {
 
     public final static class BigDecimalDelegate extends ELArithmetic {
 
+        @Override
         protected Number add(Number num0, Number num1) {
             return ((BigDecimal) num0).add((BigDecimal) num1);
         }
 
+        @Override
         protected Number coerce(Number num) {
             if (num instanceof BigDecimal)
                 return num;
@@ -44,27 +46,33 @@ public abstract class ELArithmetic {
             return new BigDecimal(num.doubleValue());
         }
 
+        @Override
         protected Number coerce(String str) {
             return new BigDecimal(str);
         }
 
+        @Override
         protected Number divide(Number num0, Number num1) {
             return ((BigDecimal) num0).divide((BigDecimal) num1,
                     BigDecimal.ROUND_HALF_UP);
         }
 
+        @Override
         protected Number subtract(Number num0, Number num1) {
             return ((BigDecimal) num0).subtract((BigDecimal) num1);
         }
 
+        @Override
         protected Number mod(Number num0, Number num1) {
             return new Double(num0.doubleValue() % num1.doubleValue());
         }
 
+        @Override
         protected Number multiply(Number num0, Number num1) {
             return ((BigDecimal) num0).multiply((BigDecimal) num1);
         }
 
+        @Override
         public boolean matches(Object obj0, Object obj1) {
             return (obj0 instanceof BigDecimal || obj1 instanceof BigDecimal);
         }
@@ -72,36 +80,44 @@ public abstract class ELArithmetic {
 
     public final static class BigIntegerDelegate extends ELArithmetic {
 
+        @Override
         protected Number add(Number num0, Number num1) {
             return ((BigInteger) num0).add((BigInteger) num1);
         }
 
+        @Override
         protected Number coerce(Number num) {
             if (num instanceof BigInteger)
                 return num;
             return new BigInteger(num.toString());
         }
 
+        @Override
         protected Number coerce(String str) {
             return new BigInteger(str);
         }
 
+        @Override
         protected Number divide(Number num0, Number num1) {
             return (new BigDecimal((BigInteger) num0)).divide(new BigDecimal((BigInteger) num1), BigDecimal.ROUND_HALF_UP);
         }
 
+        @Override
         protected Number multiply(Number num0, Number num1) {
             return ((BigInteger) num0).multiply((BigInteger) num1);
         }
 
+        @Override
         protected Number mod(Number num0, Number num1) {
             return ((BigInteger) num0).mod((BigInteger) num1);
         }
 
+        @Override
         protected Number subtract(Number num0, Number num1) {
             return ((BigInteger) num0).subtract((BigInteger) num1);
         }
 
+        @Override
         public boolean matches(Object obj0, Object obj1) {
             return (obj0 instanceof BigInteger || obj1 instanceof BigInteger);
         }
@@ -109,6 +125,7 @@ public abstract class ELArithmetic {
 
     public final static class DoubleDelegate extends ELArithmetic {
 
+        @Override
         protected Number add(Number num0, Number num1) {
             // could only be one of these
             if (num0 instanceof BigDecimal) {
@@ -119,6 +136,7 @@ public abstract class ELArithmetic {
             return new Double(num0.doubleValue() + num1.doubleValue());
         }
 
+        @Override
         protected Number coerce(Number num) {
             if (num instanceof Double)
                 return num;
@@ -127,18 +145,22 @@ public abstract class ELArithmetic {
             return new Double(num.doubleValue());
         }
 
+        @Override
         protected Number coerce(String str) {
             return new Double(str);
         }
 
+        @Override
         protected Number divide(Number num0, Number num1) {
             return new Double(num0.doubleValue() / num1.doubleValue());
         }
 
+        @Override
         protected Number mod(Number num0, Number num1) {
             return new Double(num0.doubleValue() % num1.doubleValue());
         }
 
+        @Override
         protected Number subtract(Number num0, Number num1) {
             // could only be one of these
             if (num0 instanceof BigDecimal) {
@@ -149,6 +171,7 @@ public abstract class ELArithmetic {
             return new Double(num0.doubleValue() - num1.doubleValue());
         }
 
+        @Override
         protected Number multiply(Number num0, Number num1) {
             // could only be one of these
             if (num0 instanceof BigDecimal) {
@@ -159,6 +182,7 @@ public abstract class ELArithmetic {
             return new Double(num0.doubleValue() * num1.doubleValue());
         }
 
+        @Override
         public boolean matches(Object obj0, Object obj1) {
             return (obj0 instanceof Double
                     || obj1 instanceof Double
@@ -172,36 +196,44 @@ public abstract class ELArithmetic {
 
     public final static class LongDelegate extends ELArithmetic {
 
+        @Override
         protected Number add(Number num0, Number num1) {
             return new Long(num0.longValue() + num1.longValue());
         }
 
+        @Override
         protected Number coerce(Number num) {
             if (num instanceof Long)
                 return num;
             return new Long(num.longValue());
         }
 
+        @Override
         protected Number coerce(String str) {
             return new Long(str);
         }
 
+        @Override
         protected Number divide(Number num0, Number num1) {
             return new Long(num0.longValue() / num1.longValue());
         }
 
+        @Override
         protected Number mod(Number num0, Number num1) {
             return new Long(num0.longValue() % num1.longValue());
         }
 
+        @Override
         protected Number subtract(Number num0, Number num1) {
             return new Long(num0.longValue() - num1.longValue());
         }
 
+        @Override
         protected Number multiply(Number num0, Number num1) {
             return new Long(num0.longValue() * num1.longValue());
         }
 
+        @Override
         public boolean matches(Object obj0, Object obj1) {
             return (obj0 instanceof Long || obj1 instanceof Long);
         }

==================================================
FunctionMapperFactory.java
index 94b698045c..6924703540 100644
--- a/java/org/apache/el/lang/EvaluationContext.java
+++ b/java/org/apache/el/lang/EvaluationContext.java
@@ -43,38 +43,47 @@ public final class EvaluationContext extends ELContext {
         return this.elContext;
     }
 
+    @Override
     public FunctionMapper getFunctionMapper() {
         return this.fnMapper;
     }
 
+    @Override
     public VariableMapper getVariableMapper() {
         return this.varMapper;
     }
 
+    @Override
     public Object getContext(Class key) {
         return this.elContext.getContext(key);
     }
 
+    @Override
     public ELResolver getELResolver() {
         return this.elContext.getELResolver();
     }
 
+    @Override
     public boolean isPropertyResolved() {
         return this.elContext.isPropertyResolved();
     }
 
+    @Override
     public void putContext(Class key, Object contextObject) {
         this.elContext.putContext(key, contextObject);
     }
 
+    @Override
     public void setPropertyResolved(boolean resolved) {
         this.elContext.setPropertyResolved(resolved);
     }
 
+    @Override
     public Locale getLocale() {
         return this.elContext.getLocale();
         }
 
+    @Override
     public void setLocale(Locale locale) {
         this.elContext.setLocale(locale);
     }

==================================================
FunctionMapperImpl.java
index b75ec67776..37048ffdd3 100644
--- a/java/org/apache/el/lang/FunctionMapperFactory.java
+++ b/java/org/apache/el/lang/FunctionMapperFactory.java
@@ -41,6 +41,7 @@ public class FunctionMapperFactory extends FunctionMapper {
     /* (non-Javadoc)
      * @see javax.el.FunctionMapper#resolveFunction(java.lang.String, java.lang.String)
      */
+    @Override
     public Method resolveFunction(String prefix, String localName) {
         if (this.memento == null) {
             this.memento = new FunctionMapperImpl();

==================================================
VariableMapperFactory.java
index 33d271e88e..8a6bf394c4 100644
--- a/java/org/apache/el/lang/FunctionMapperImpl.java
+++ b/java/org/apache/el/lang/FunctionMapperImpl.java
@@ -47,6 +47,7 @@ public class FunctionMapperImpl extends FunctionMapper implements
      * @see javax.el.FunctionMapper#resolveFunction(java.lang.String,
      *      java.lang.String)
      */
+    @Override
     public Method resolveFunction(String prefix, String localName) {
         if (this.functions != null) {
             Function f = this.functions.get(prefix + ":" + localName);
@@ -174,6 +175,7 @@ public class FunctionMapperImpl extends FunctionMapper implements
         /* (non-Javadoc)
          * @see java.lang.Object#equals(java.lang.Object)
          */
+        @Override
         public boolean equals(Object obj) {
             if (obj instanceof Function) {
                 return this.hashCode() == obj.hashCode();
@@ -184,6 +186,7 @@ public class FunctionMapperImpl extends FunctionMapper implements
         /* (non-Javadoc)
          * @see java.lang.Object#hashCode()
          */
+        @Override
         public int hashCode() {
             return (this.prefix + this.localName).hashCode();
         }

==================================================
VariableMapperImpl.java
index d511ac5480..6a937ea081 100644
--- a/java/org/apache/el/lang/VariableMapperFactory.java
+++ b/java/org/apache/el/lang/VariableMapperFactory.java
@@ -36,6 +36,7 @@ public class VariableMapperFactory extends VariableMapper {
         return this.momento;
     }
 
+    @Override
     public ValueExpression resolveVariable(String variable) {
         ValueExpression expr = this.target.resolveVariable(variable);
         if (expr != null) {
@@ -47,6 +48,7 @@ public class VariableMapperFactory extends VariableMapper {
         return expr;
     }
 
+    @Override
     public ValueExpression setVariable(String variable, ValueExpression expression) {
         throw new UnsupportedOperationException("Cannot Set Variables on Factory");
     }

==================================================
ArithmeticNode.java
index 765c60ab88..f0454e34f8 100644
--- a/java/org/apache/el/lang/VariableMapperImpl.java
+++ b/java/org/apache/el/lang/VariableMapperImpl.java
@@ -37,10 +37,12 @@ public class VariableMapperImpl extends VariableMapper implements Externalizable
         super();
     }
 
+    @Override
     public ValueExpression resolveVariable(String variable) {
         return this.vars.get(variable);
     }
 
+    @Override
     public ValueExpression setVariable(String variable,
             ValueExpression expression) {
         return this.vars.put(variable, expression);

==================================================
AstAnd.java
index 57fa080c97..9515271030 100644
--- a/java/org/apache/el/parser/ArithmeticNode.java
+++ b/java/org/apache/el/parser/ArithmeticNode.java
@@ -35,6 +35,7 @@ public class ArithmeticNode extends SimpleNode {
         super(i);
     }
 
+    @Override
     public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return Number.class;

==================================================
AstBracketSuffix.java
index fb52375f32..d91e7b7810 100644
--- a/java/org/apache/el/parser/AstAnd.java
+++ b/java/org/apache/el/parser/AstAnd.java
@@ -32,6 +32,7 @@ public final class AstAnd extends BooleanNode {
         super(id);
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj = children[0].getValue(ctx);

==================================================
AstChoice.java
index c29852dfbc..93216a0122 100644
--- a/java/org/apache/el/parser/AstBracketSuffix.java
+++ b/java/org/apache/el/parser/AstBracketSuffix.java
@@ -32,6 +32,7 @@ public final class AstBracketSuffix extends SimpleNode {
         super(id);
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         return this.children[0].getValue(ctx);

==================================================
AstCompositeExpression.java
index 5dc10e9c71..9b3024f2bc 100644
--- a/java/org/apache/el/parser/AstChoice.java
+++ b/java/org/apache/el/parser/AstChoice.java
@@ -32,12 +32,14 @@ public final class AstChoice extends SimpleNode {
         super(id);
     }
 
+    @Override
     public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         Object val = this.getValue(ctx);
         return (val != null) ? val.getClass() : null;
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj0 = this.children[0].getValue(ctx);

==================================================
AstDeferredExpression.java
index 8d3537380b..9fde3175a0 100644
--- a/java/org/apache/el/parser/AstCompositeExpression.java
+++ b/java/org/apache/el/parser/AstCompositeExpression.java
@@ -33,11 +33,13 @@ public final class AstCompositeExpression extends SimpleNode {
         super(id);
     }
 
+    @Override
     public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return String.class;
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         StringBuilder sb = new StringBuilder(16);

==================================================
AstDiv.java
index 93c3d42824..641f3b0a79 100644
--- a/java/org/apache/el/parser/AstDeferredExpression.java
+++ b/java/org/apache/el/parser/AstDeferredExpression.java
@@ -32,21 +32,25 @@ public final class AstDeferredExpression extends SimpleNode {
         super(id);
     }
 
+    @Override
     public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return this.children[0].getType(ctx);
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         return this.children[0].getValue(ctx);
     }
 
+    @Override
     public boolean isReadOnly(EvaluationContext ctx)
             throws ELException {
         return this.children[0].isReadOnly(ctx);
     }
 
+    @Override
     public void setValue(EvaluationContext ctx, Object value)
             throws ELException {
         this.children[0].setValue(ctx, value);

==================================================
AstDotSuffix.java
index 5b0b45a4f1..967e008cbb 100644
--- a/java/org/apache/el/parser/AstDiv.java
+++ b/java/org/apache/el/parser/AstDiv.java
@@ -33,6 +33,7 @@ public final class AstDiv extends ArithmeticNode {
         super(id);
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj0 = this.children[0].getValue(ctx);

==================================================
AstDynamicExpression.java
index f08721ebb0..ea64fec019 100644
--- a/java/org/apache/el/parser/AstDotSuffix.java
+++ b/java/org/apache/el/parser/AstDotSuffix.java
@@ -32,6 +32,7 @@ public final class AstDotSuffix extends SimpleNode {
         super(id);
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         return this.image;

==================================================
AstEmpty.java
index 01787cca50..9e6bad8082 100644
--- a/java/org/apache/el/parser/AstDynamicExpression.java
+++ b/java/org/apache/el/parser/AstDynamicExpression.java
@@ -32,21 +32,25 @@ public final class AstDynamicExpression extends SimpleNode {
         super(id);
     }
 
+    @Override
     public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return this.children[0].getType(ctx);
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         return this.children[0].getValue(ctx);
     }
 
+    @Override
     public boolean isReadOnly(EvaluationContext ctx)
             throws ELException {
         return this.children[0].isReadOnly(ctx);
     }
 
+    @Override
     public void setValue(EvaluationContext ctx, Object value)
             throws ELException {
         this.children[0].setValue(ctx, value);

==================================================
AstEqual.java
index a5732ff4b4..8b188d538d 100644
--- a/java/org/apache/el/parser/AstEmpty.java
+++ b/java/org/apache/el/parser/AstEmpty.java
@@ -35,11 +35,13 @@ public final class AstEmpty extends SimpleNode {
         super(id);
     }
 
+    @Override
     public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return Boolean.class;
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj = this.children[0].getValue(ctx);

==================================================
AstFalse.java
index 812a85ec86..c0fbcecd4e 100644
--- a/java/org/apache/el/parser/AstEqual.java
+++ b/java/org/apache/el/parser/AstEqual.java
@@ -32,6 +32,7 @@ public final class AstEqual extends BooleanNode {
         super(id);
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj0 = this.children[0].getValue(ctx);

==================================================
AstFloatingPoint.java
index 66e28d3485..2bd7d7dc64 100644
--- a/java/org/apache/el/parser/AstFalse.java
+++ b/java/org/apache/el/parser/AstFalse.java
@@ -32,6 +32,7 @@ public final class AstFalse extends BooleanNode {
         super(id);
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         return Boolean.FALSE;

==================================================
AstFunction.java
index 3979a082c7..d4c5165305 100644
--- a/java/org/apache/el/parser/AstFloatingPoint.java
+++ b/java/org/apache/el/parser/AstFloatingPoint.java
@@ -47,11 +47,13 @@ public final class AstFloatingPoint extends SimpleNode {
         return this.number;
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         return this.getFloatingPoint();
     }
 
+    @Override
     public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return this.getFloatingPoint().getClass();

==================================================
AstGreaterThan.java
index fee5dffdbe..25cd2d2f57 100644
--- a/java/org/apache/el/parser/AstFunction.java
+++ b/java/org/apache/el/parser/AstFunction.java
@@ -58,6 +58,7 @@ public final class AstFunction extends SimpleNode {
         return prefix;
     }
 
+    @Override
     public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         
@@ -75,6 +76,7 @@ public final class AstFunction extends SimpleNode {
         return m.getReturnType();
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         
@@ -127,6 +129,7 @@ public final class AstFunction extends SimpleNode {
     }
     
     
+    @Override
     public String toString()
     {
         return ELParserTreeConstants.jjtNodeName[id] + "[" + this.getOutputName() + "]";

==================================================
AstGreaterThanEqual.java
index ff36d84bdb..8869ed9b4e 100644
--- a/java/org/apache/el/parser/AstGreaterThan.java
+++ b/java/org/apache/el/parser/AstGreaterThan.java
@@ -32,6 +32,7 @@ public final class AstGreaterThan extends BooleanNode {
         super(id);
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj0 = this.children[0].getValue(ctx);

==================================================
AstIdentifier.java
index 67743f8da9..2ffcfe5579 100644
--- a/java/org/apache/el/parser/AstGreaterThanEqual.java
+++ b/java/org/apache/el/parser/AstGreaterThanEqual.java
@@ -32,6 +32,7 @@ public final class AstGreaterThanEqual extends BooleanNode {
         super(id);
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj0 = this.children[0].getValue(ctx);

==================================================
AstInteger.java
index ce95043b37..5cefbb3a7d 100644
--- a/java/org/apache/el/parser/AstIdentifier.java
+++ b/java/org/apache/el/parser/AstIdentifier.java
@@ -37,6 +37,7 @@ public final class AstIdentifier extends SimpleNode {
         super(id);
     }
 
+    @Override
     public Class<?> getType(EvaluationContext ctx) throws ELException {
         VariableMapper varMapper = ctx.getVariableMapper();
         if (varMapper != null) {
@@ -49,6 +50,7 @@ public final class AstIdentifier extends SimpleNode {
         return ctx.getELResolver().getType(ctx, null, this.image);
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx) throws ELException {
         VariableMapper varMapper = ctx.getVariableMapper();
         if (varMapper != null) {
@@ -61,6 +63,7 @@ public final class AstIdentifier extends SimpleNode {
         return ctx.getELResolver().getValue(ctx, null, this.image);
     }
 
+    @Override
     public boolean isReadOnly(EvaluationContext ctx) throws ELException {
         VariableMapper varMapper = ctx.getVariableMapper();
         if (varMapper != null) {
@@ -73,6 +76,7 @@ public final class AstIdentifier extends SimpleNode {
         return ctx.getELResolver().isReadOnly(ctx, null, this.image);
     }
 
+    @Override
     public void setValue(EvaluationContext ctx, Object value)
             throws ELException {
         VariableMapper varMapper = ctx.getVariableMapper();
@@ -87,12 +91,14 @@ public final class AstIdentifier extends SimpleNode {
         ctx.getELResolver().setValue(ctx, null, this.image, value);
     }
 
+    @Override
     public Object invoke(EvaluationContext ctx, Class[] paramTypes,
             Object[] paramValues) throws ELException {
         return this.getMethodExpression(ctx).invoke(ctx.getELContext(), paramValues);
     }
     
 
+    @Override
     public MethodInfo getMethodInfo(EvaluationContext ctx, Class[] paramTypes)
             throws ELException {
         return this.getMethodExpression(ctx).getMethodInfo(ctx.getELContext());

==================================================
AstLessThan.java
index 6162c67c73..b2859eb968 100644
--- a/java/org/apache/el/parser/AstInteger.java
+++ b/java/org/apache/el/parser/AstInteger.java
@@ -47,11 +47,13 @@ public final class AstInteger extends SimpleNode {
         return number;
     }
 
+    @Override
     public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return this.getInteger().getClass();
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         return this.getInteger();

==================================================
AstLessThanEqual.java
index 163fe18e49..8ff781e167 100644
--- a/java/org/apache/el/parser/AstLessThan.java
+++ b/java/org/apache/el/parser/AstLessThan.java
@@ -32,6 +32,7 @@ public final class AstLessThan extends BooleanNode {
         super(id);
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj0 = this.children[0].getValue(ctx);

==================================================
AstLiteralExpression.java
index c71152604b..8d41b1f8fd 100644
--- a/java/org/apache/el/parser/AstLessThanEqual.java
+++ b/java/org/apache/el/parser/AstLessThanEqual.java
@@ -32,6 +32,7 @@ public final class AstLessThanEqual extends BooleanNode {
         super(id);
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj0 = this.children[0].getValue(ctx);

==================================================
AstMinus.java
index 1bc6e9593b..b28a253a07 100644
--- a/java/org/apache/el/parser/AstLiteralExpression.java
+++ b/java/org/apache/el/parser/AstLiteralExpression.java
@@ -32,14 +32,17 @@ public final class AstLiteralExpression extends SimpleNode {
         super(id);
     }
 
+    @Override
     public Class<?> getType(EvaluationContext ctx) throws ELException {
         return String.class;
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx) throws ELException {
         return this.image;
     }
 
+    @Override
     public void setImage(String image) {
         if (image.indexOf('\\') == -1) {
             this.image = image;

==================================================
AstMod.java
index 0c58cdc7a4..c64d5f6e85 100644
--- a/java/org/apache/el/parser/AstMinus.java
+++ b/java/org/apache/el/parser/AstMinus.java
@@ -33,6 +33,7 @@ public final class AstMinus extends ArithmeticNode {
         super(id);
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj0 = this.children[0].getValue(ctx);

==================================================
AstMult.java
index a0ba73517c..dcaa851b53 100644
--- a/java/org/apache/el/parser/AstMod.java
+++ b/java/org/apache/el/parser/AstMod.java
@@ -33,6 +33,7 @@ public final class AstMod extends ArithmeticNode {
         super(id);
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj0 = this.children[0].getValue(ctx);

==================================================
AstNegative.java
index 4c84a4fc22..8bd9f5bc92 100644
--- a/java/org/apache/el/parser/AstMult.java
+++ b/java/org/apache/el/parser/AstMult.java
@@ -33,6 +33,7 @@ public final class AstMult extends ArithmeticNode {
         super(id);
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj0 = this.children[0].getValue(ctx);

==================================================
AstNot.java
index 2b1faa0bb0..0e49b90eb8 100644
--- a/java/org/apache/el/parser/AstNegative.java
+++ b/java/org/apache/el/parser/AstNegative.java
@@ -35,11 +35,13 @@ public final class AstNegative extends SimpleNode {
         super(id);
     }
 
+    @Override
     public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return Number.class;
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj = this.children[0].getValue(ctx);

==================================================
AstNotEqual.java
index 6d60e13f39..63f1bacdd5 100644
--- a/java/org/apache/el/parser/AstNot.java
+++ b/java/org/apache/el/parser/AstNot.java
@@ -32,11 +32,13 @@ public final class AstNot extends SimpleNode {
         super(id);
     }
 
+    @Override
     public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return Boolean.class;
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj = this.children[0].getValue(ctx);

==================================================
AstNull.java
index 2d6a0a8d68..b752e99970 100644
--- a/java/org/apache/el/parser/AstNotEqual.java
+++ b/java/org/apache/el/parser/AstNotEqual.java
@@ -32,6 +32,7 @@ public final class AstNotEqual extends BooleanNode {
         super(id);
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj0 = this.children[0].getValue(ctx);

==================================================
AstOr.java
index df7f825b69..b13fe83ff5 100644
--- a/java/org/apache/el/parser/AstNull.java
+++ b/java/org/apache/el/parser/AstNull.java
@@ -32,11 +32,13 @@ public final class AstNull extends SimpleNode {
         super(id);
     }
 
+    @Override
     public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return null;
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         return null;

==================================================
AstPlus.java
index db5d351327..d9d40ac31d 100644
--- a/java/org/apache/el/parser/AstOr.java
+++ b/java/org/apache/el/parser/AstOr.java
@@ -32,6 +32,7 @@ public final class AstOr extends BooleanNode {
         super(id);
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj = this.children[0].getValue(ctx);

==================================================
AstString.java
index 61ecf6e23a..8b34681cfd 100644
--- a/java/org/apache/el/parser/AstPlus.java
+++ b/java/org/apache/el/parser/AstPlus.java
@@ -33,6 +33,7 @@ public final class AstPlus extends ArithmeticNode {
         super(id);
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         Object obj0 = this.children[0].getValue(ctx);

==================================================
AstTrue.java
index 707a6977f8..ee94bf7dac 100644
--- a/java/org/apache/el/parser/AstString.java
+++ b/java/org/apache/el/parser/AstString.java
@@ -41,16 +41,19 @@ public final class AstString extends SimpleNode {
         return this.string;
     }
 
+    @Override
     public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return String.class;
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         return this.getString();
     }
 
+    @Override
     public void setImage(String image) {
         if (image.indexOf('\\') == -1) {
             this.image = image;

==================================================
AstValue.java
index 1f61e17f09..a344d9f2a9 100644
--- a/java/org/apache/el/parser/AstTrue.java
+++ b/java/org/apache/el/parser/AstTrue.java
@@ -32,6 +32,7 @@ public final class AstTrue extends BooleanNode {
         super(id);
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx)
             throws ELException {
         return Boolean.TRUE;

==================================================
BooleanNode.java
index b27e16dc1a..6291a95e61 100644
--- a/java/org/apache/el/parser/AstValue.java
+++ b/java/org/apache/el/parser/AstValue.java
@@ -52,6 +52,7 @@ public final class AstValue extends SimpleNode {
         super(id);
     }
 
+    @Override
     public Class<?> getType(EvaluationContext ctx) throws ELException {
         Target t = getTarget(ctx);
         ctx.setPropertyResolved(false);
@@ -103,6 +104,7 @@ public final class AstValue extends SimpleNode {
         return t;
     }
 
+    @Override
     public Object getValue(EvaluationContext ctx) throws ELException {
         Object base = this.children[0].getValue(ctx);
         int propCount = this.jjtGetNumChildren();
@@ -122,12 +124,14 @@ public final class AstValue extends SimpleNode {
         return base;
     }
 
+    @Override
     public boolean isReadOnly(EvaluationContext ctx) throws ELException {
         Target t = getTarget(ctx);
         ctx.setPropertyResolved(false);
         return ctx.getELResolver().isReadOnly(ctx, t.base, t.property);
     }
 
+    @Override
     public void setValue(EvaluationContext ctx, Object value)
             throws ELException {
         Target t = getTarget(ctx);
@@ -155,6 +159,7 @@ public final class AstValue extends SimpleNode {
     }
 
 
+    @Override
     public MethodInfo getMethodInfo(EvaluationContext ctx, Class[] paramTypes)
             throws ELException {
         Target t = getTarget(ctx);
@@ -163,6 +168,7 @@ public final class AstValue extends SimpleNode {
                 .getParameterTypes());
     }
 
+    @Override
     public Object invoke(EvaluationContext ctx, Class[] paramTypes,
             Object[] paramValues) throws ELException {
         Target t = getTarget(ctx);

==================================================
ParseException.java
index e6fd6c89a5..1191f75ffc 100644
--- a/java/org/apache/el/parser/BooleanNode.java
+++ b/java/org/apache/el/parser/BooleanNode.java
@@ -32,6 +32,7 @@ public class BooleanNode extends SimpleNode {
     public BooleanNode(int i) {
         super(i);
     }
+    @Override
     public Class<?> getType(EvaluationContext ctx)
             throws ELException {
         return Boolean.class;

==================================================
SimpleNode.java
index 66eb58a8f9..c92858f309 100644
--- a/java/org/apache/el/parser/ParseException.java
+++ b/java/org/apache/el/parser/ParseException.java
@@ -96,6 +96,7 @@ public class ParseException extends Exception {
    * of the final stack trace, and hence the correct error message
    * gets displayed.
    */
+  @Override
   public String getMessage() {
     if (!specialConstructor) {
       return super.getMessage();

==================================================
Token.java
index 737dc2c5f8..79bef0b008 100644
--- a/java/org/apache/el/parser/SimpleNode.java
+++ b/java/org/apache/el/parser/SimpleNode.java
@@ -84,6 +84,7 @@ public abstract class SimpleNode extends ELSupport implements Node {
      * otherwise overriding toString() is probably all you need to do.
      */
 
+    @Override
     public String toString() {
         if (this.image != null) {
             return ELParserTreeConstants.jjtNodeName[id] + "[" + this.image

==================================================
TokenMgrError.java
index 001732d9d8..d139c14b11 100644
--- a/java/org/apache/el/parser/Token.java
+++ b/java/org/apache/el/parser/Token.java
@@ -90,6 +90,7 @@ public class Token {
   /**
    * Returns the image.
    */
+  @Override
   public String toString()
   {
      return image;

==================================================
