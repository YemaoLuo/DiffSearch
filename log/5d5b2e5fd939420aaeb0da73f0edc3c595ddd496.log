5d5b2e5fd939420aaeb0da73f0edc3c595ddd496
==================================================
Set svn:eol-style=native on 5 files,
==================================================
Konstantin Kolinko
==================================================
Thu Feb 16 10:58:21 2012 +0000
==================================================
Bug51582.java
Set svn:eol-style=native on 5 files,
as detected by validate-eoln target run on Gump

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1244927 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InduceSlowQuery.java
index 904374e217..5108e54b32 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/bugs/Bug51582.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/bugs/Bug51582.java
@@ -1,136 +1,136 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.tomcat.jdbc.bugs;
-
-import java.sql.CallableStatement;
-import java.sql.Connection;
-import java.sql.SQLException;
-import java.sql.Statement;
-import java.util.ArrayList;
-import java.util.List;
-
-import org.apache.tomcat.jdbc.pool.ConnectionPool;
-import org.apache.tomcat.jdbc.pool.PoolConfiguration;
-import org.apache.tomcat.jdbc.test.DefaultProperties;
-
-
-public class Bug51582
-{
-
-  /**
-   * @param args
-   * @throws SQLException
-   */
-  public static void main(String[] args) throws SQLException
-  {
-    org.apache.tomcat.jdbc.pool.DataSource datasource = null;
-    PoolConfiguration p = new DefaultProperties();
-
-    p.setJmxEnabled(true);
-    p.setTestOnBorrow(false);
-    p.setTestOnReturn(false);
-    p.setValidationInterval(1000);
-    p.setTimeBetweenEvictionRunsMillis(2000);
-
-    p.setMaxWait(2000);
-    p.setMinEvictableIdleTimeMillis(1000);
-
-    datasource = new org.apache.tomcat.jdbc.pool.DataSource();
-    datasource.setPoolProperties(p);
-    datasource.setJdbcInterceptors("org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReportJmx(threshold=200)");
-    ConnectionPool pool = datasource.createPool();
-
-
-    Connection con = pool.getConnection();
-    Statement st = con.createStatement();
-    try {
-        st.execute("DROP ALIAS SLEEP");
-    }catch (Exception ignore) {}
-    st.execute("CREATE ALIAS SLEEP AS $$\nboolean sleep() {\n        try {\n            Thread.sleep(10000);\n            return true;        } catch (Exception x) {\n            return false;\n        }\n}\n$$;");
-    st.close();
-    con.close();
-    int iter = 0;
-    while ((iter++) < 10)
-    {
-      final Connection connection = pool.getConnection();
-      final CallableStatement s = connection.prepareCall("{CALL SLEEP()}");
-
-      List<Thread> threadList = new ArrayList<Thread>();
-
-      for (int l = 0; l < 3; l++)
-      {
-        final int i = l;
-
-        Thread thread = new Thread()
-        {
-          @Override
-          public void run()
-          {
-            try
-            {
-              if (i == 0)
-              {
-                Thread.sleep(1000);
-                s.cancel();
-              }
-              else if (i == 1)
-              {
-                //or use some other statement which will block for a longer time
-                long start = System.currentTimeMillis();
-                System.out.println("["+getName()+"] Calling SP SLEEP");
-                s.execute();
-                System.out.println("["+getName()+"] Executed SP SLEEP ["+(System.currentTimeMillis()-start)+"]");
-              }
-              else
-              {
-                Thread.sleep(1000);
-                connection.close();
-              }
-            }
-            catch (InterruptedException e)
-            {
-
-            }
-            catch (SQLException e)
-            {
-              e.printStackTrace();
-            }
-
-          };
-
-        };
-        threadList.add(thread);
-        thread.start();
-      }
-      for (Thread t : threadList)
-      {
-        try
-        {
-          t.join();
-        }
-        catch (InterruptedException e)
-        {
-          // TODO Auto-generated catch block
-          e.printStackTrace();
-        }
-      }
-
-    }
-
-
-  }
-}
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.jdbc.bugs;
+
+import java.sql.CallableStatement;
+import java.sql.Connection;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.tomcat.jdbc.pool.ConnectionPool;
+import org.apache.tomcat.jdbc.pool.PoolConfiguration;
+import org.apache.tomcat.jdbc.test.DefaultProperties;
+
+
+public class Bug51582
+{
+
+  /**
+   * @param args
+   * @throws SQLException
+   */
+  public static void main(String[] args) throws SQLException
+  {
+    org.apache.tomcat.jdbc.pool.DataSource datasource = null;
+    PoolConfiguration p = new DefaultProperties();
+
+    p.setJmxEnabled(true);
+    p.setTestOnBorrow(false);
+    p.setTestOnReturn(false);
+    p.setValidationInterval(1000);
+    p.setTimeBetweenEvictionRunsMillis(2000);
+
+    p.setMaxWait(2000);
+    p.setMinEvictableIdleTimeMillis(1000);
+
+    datasource = new org.apache.tomcat.jdbc.pool.DataSource();
+    datasource.setPoolProperties(p);
+    datasource.setJdbcInterceptors("org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReportJmx(threshold=200)");
+    ConnectionPool pool = datasource.createPool();
+
+
+    Connection con = pool.getConnection();
+    Statement st = con.createStatement();
+    try {
+        st.execute("DROP ALIAS SLEEP");
+    }catch (Exception ignore) {}
+    st.execute("CREATE ALIAS SLEEP AS $$\nboolean sleep() {\n        try {\n            Thread.sleep(10000);\n            return true;        } catch (Exception x) {\n            return false;\n        }\n}\n$$;");
+    st.close();
+    con.close();
+    int iter = 0;
+    while ((iter++) < 10)
+    {
+      final Connection connection = pool.getConnection();
+      final CallableStatement s = connection.prepareCall("{CALL SLEEP()}");
+
+      List<Thread> threadList = new ArrayList<Thread>();
+
+      for (int l = 0; l < 3; l++)
+      {
+        final int i = l;
+
+        Thread thread = new Thread()
+        {
+          @Override
+          public void run()
+          {
+            try
+            {
+              if (i == 0)
+              {
+                Thread.sleep(1000);
+                s.cancel();
+              }
+              else if (i == 1)
+              {
+                //or use some other statement which will block for a longer time
+                long start = System.currentTimeMillis();
+                System.out.println("["+getName()+"] Calling SP SLEEP");
+                s.execute();
+                System.out.println("["+getName()+"] Executed SP SLEEP ["+(System.currentTimeMillis()-start)+"]");
+              }
+              else
+              {
+                Thread.sleep(1000);
+                connection.close();
+              }
+            }
+            catch (InterruptedException e)
+            {
+
+            }
+            catch (SQLException e)
+            {
+              e.printStackTrace();
+            }
+
+          };
+
+        };
+        threadList.add(thread);
+        thread.start();
+      }
+      for (Thread t : threadList)
+      {
+        try
+        {
+          t.join();
+        }
+        catch (InterruptedException e)
+        {
+          // TODO Auto-generated catch block
+          e.printStackTrace();
+        }
+      }
+
+    }
+
+
+  }
+}

==================================================
TestWebSocket.java
index d795bfcf9e..deecfccb25 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/pool/interceptor/InduceSlowQuery.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/pool/interceptor/InduceSlowQuery.java
@@ -1,76 +1,76 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package org.apache.tomcat.jdbc.pool.interceptor;
-
-import java.lang.reflect.Method;
-import java.security.SecureRandom;
-
-/**
- * @author fhanik
- *
- */
-public class InduceSlowQuery extends AbstractQueryReport {
-    public static SecureRandom random = new SecureRandom();
-
-    public InduceSlowQuery() {
-        // TODO Auto-generated constructor stub
-    }
-
-    public void doWait() {
-        try {
-            int b = random.nextInt(10);
-            if (b == 0) {
-                Thread.sleep(random.nextInt(2000));
-            }
-        } catch (InterruptedException x) {
-
-        }
-
-    }
-
-    @Override
-    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
-        // TODO Auto-generated method stub
-        Object result = super.invoke(proxy, method, args);
-        return result;
-    }
-
-    @Override
-    protected void prepareCall(String query, long time) {
-    }
-
-    @Override
-    protected void prepareStatement(String sql, long time) {
-    }
-
-    @Override
-    public void closeInvoked() {
-    }
-
-    @Override
-    protected String reportQuery(String query, Object[] args, String name, long start, long delta) {
-        doWait();
-        return super.reportQuery(query, args, name, start, delta);
-    }
-
-    @Override
-    protected String reportSlowQuery(String query, Object[] args, String name, long start, long delta) {
-        doWait();
-        return super.reportSlowQuery(query, args, name, start, delta);
-    }
-}
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package org.apache.tomcat.jdbc.pool.interceptor;
+
+import java.lang.reflect.Method;
+import java.security.SecureRandom;
+
+/**
+ * @author fhanik
+ *
+ */
+public class InduceSlowQuery extends AbstractQueryReport {
+    public static SecureRandom random = new SecureRandom();
+
+    public InduceSlowQuery() {
+        // TODO Auto-generated constructor stub
+    }
+
+    public void doWait() {
+        try {
+            int b = random.nextInt(10);
+            if (b == 0) {
+                Thread.sleep(random.nextInt(2000));
+            }
+        } catch (InterruptedException x) {
+
+        }
+
+    }
+
+    @Override
+    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
+        // TODO Auto-generated method stub
+        Object result = super.invoke(proxy, method, args);
+        return result;
+    }
+
+    @Override
+    protected void prepareCall(String query, long time) {
+    }
+
+    @Override
+    protected void prepareStatement(String sql, long time) {
+    }
+
+    @Override
+    public void closeInvoked() {
+    }
+
+    @Override
+    protected String reportQuery(String query, Object[] args, String name, long start, long delta) {
+        doWait();
+        return super.reportQuery(query, args, name, start, delta);
+    }
+
+    @Override
+    protected String reportSlowQuery(String query, Object[] args, String name, long start, long delta) {
+        doWait();
+        return super.reportSlowQuery(query, args, name, start, delta);
+    }
+}

==================================================
EchoMessage.java
index 9a5ca1ae41..f47735cfa4 100644
--- a/test/org/apache/catalina/websocket/TestWebSocket.java
+++ b/test/org/apache/catalina/websocket/TestWebSocket.java
@@ -1,83 +1,83 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.catalina.websocket;
-
-import java.io.InputStream;
-import java.io.Reader;
-import java.nio.ByteBuffer;
-import java.nio.CharBuffer;
-
-import org.junit.Test;
-
-import org.apache.catalina.startup.TomcatBaseTest;
-
-public class TestWebSocket extends TomcatBaseTest {
-
-    @Test
-    public void testSimple() {
-        // TODO: Write a test
-    }
-
-    private static final class StreamingWebSocketServlet
-            extends WebSocketServlet {
-
-        private static final long serialVersionUID = 1L;
-
-        @Override
-        protected StreamInbound createWebSocketInbound() {
-            return new SimpleStreamInbound();
-        }
-    }
-
-    private static final class SimpleStreamInbound extends StreamInbound {
-
-        @Override
-        protected void onBinaryData(InputStream is) {
-            // TODO Auto-generated method stub
-        }
-
-        @Override
-        protected void onTextData(Reader r) {
-            // TODO Auto-generated method stub
-        }
-    }
-
-
-    private static final class MessageWebSocketServlet
-            extends WebSocketServlet {
-
-        private static final long serialVersionUID = 1L;
-
-        @Override
-        protected StreamInbound createWebSocketInbound() {
-            return new SimpleMessageInbound();
-        }
-    }
-
-    private static final class SimpleMessageInbound extends MessageInbound {
-
-        @Override
-        protected void onBinaryMessage(ByteBuffer message) {
-            // TODO Auto-generated method stub
-        }
-
-        @Override
-        protected void onTextMessage(CharBuffer message) {
-            // TODO Auto-generated method stub
-        }
-    }
-}
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.websocket;
+
+import java.io.InputStream;
+import java.io.Reader;
+import java.nio.ByteBuffer;
+import java.nio.CharBuffer;
+
+import org.junit.Test;
+
+import org.apache.catalina.startup.TomcatBaseTest;
+
+public class TestWebSocket extends TomcatBaseTest {
+
+    @Test
+    public void testSimple() {
+        // TODO: Write a test
+    }
+
+    private static final class StreamingWebSocketServlet
+            extends WebSocketServlet {
+
+        private static final long serialVersionUID = 1L;
+
+        @Override
+        protected StreamInbound createWebSocketInbound() {
+            return new SimpleStreamInbound();
+        }
+    }
+
+    private static final class SimpleStreamInbound extends StreamInbound {
+
+        @Override
+        protected void onBinaryData(InputStream is) {
+            // TODO Auto-generated method stub
+        }
+
+        @Override
+        protected void onTextData(Reader r) {
+            // TODO Auto-generated method stub
+        }
+    }
+
+
+    private static final class MessageWebSocketServlet
+            extends WebSocketServlet {
+
+        private static final long serialVersionUID = 1L;
+
+        @Override
+        protected StreamInbound createWebSocketInbound() {
+            return new SimpleMessageInbound();
+        }
+    }
+
+    private static final class SimpleMessageInbound extends MessageInbound {
+
+        @Override
+        protected void onBinaryMessage(ByteBuffer message) {
+            // TODO Auto-generated method stub
+        }
+
+        @Override
+        protected void onTextMessage(CharBuffer message) {
+            // TODO Auto-generated method stub
+        }
+    }
+}

==================================================
EchoStream.java
index 729d06811c..c9eb2d893a 100644
--- a/webapps/examples/WEB-INF/classes/websocket/EchoMessage.java
+++ b/webapps/examples/WEB-INF/classes/websocket/EchoMessage.java
@@ -1,50 +1,50 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package websocket;
-
-import java.io.IOException;
-import java.nio.ByteBuffer;
-import java.nio.CharBuffer;
-
-import org.apache.catalina.websocket.MessageInbound;
-import org.apache.catalina.websocket.StreamInbound;
-import org.apache.catalina.websocket.WebSocketServlet;
-
-
-public class EchoMessage extends WebSocketServlet {
-
-    private static final long serialVersionUID = 1L;
-
-    @Override
-    protected StreamInbound createWebSocketInbound() {
-        return new EchoMessageInbound();
-    }
-
-    private static final class EchoMessageInbound extends MessageInbound {
-
-        @Override
-        protected void onBinaryMessage(ByteBuffer message) throws IOException {
-            System.out.write(message.array(), 0, message.limit());
-            System.out.print('\n');
-        }
-
-        @Override
-        protected void onTextMessage(CharBuffer message) throws IOException {
-            System.out.println(message);
-        }
-    }
-}
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package websocket;
+
+import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.nio.CharBuffer;
+
+import org.apache.catalina.websocket.MessageInbound;
+import org.apache.catalina.websocket.StreamInbound;
+import org.apache.catalina.websocket.WebSocketServlet;
+
+
+public class EchoMessage extends WebSocketServlet {
+
+    private static final long serialVersionUID = 1L;
+
+    @Override
+    protected StreamInbound createWebSocketInbound() {
+        return new EchoMessageInbound();
+    }
+
+    private static final class EchoMessageInbound extends MessageInbound {
+
+        @Override
+        protected void onBinaryMessage(ByteBuffer message) throws IOException {
+            System.out.write(message.array(), 0, message.limit());
+            System.out.print('\n');
+        }
+
+        @Override
+        protected void onTextMessage(CharBuffer message) throws IOException {
+            System.out.println(message);
+        }
+    }
+}

==================================================
