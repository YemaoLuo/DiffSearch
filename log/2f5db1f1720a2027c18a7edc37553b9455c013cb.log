2f5db1f1720a2027c18a7edc37553b9455c013cb
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49297
==================================================
Mark Emlyn
==================================================
Tue Oct 19 13:21:05 2010 +0000
==================================================
Parser.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49297
Enforce the rules in the JSP specification for parsing the attributes of custom and standard actions that require that the attribute names are unique within an element and that there is whitespace before the attribute name. The whitespace test can be disabled by setting the system property <code>org.apache.jasper.compiler.Parser.STRICT_WHITESPACE</code> to <code>false</code>

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1024229 13f79535-47bb-0310-9956-ffa450edef68



==================================================
UniqueAttributesImpl.java
index eb0273bb4a..11e07ec0a4 100644
--- a/java/org/apache/jasper/resources/LocalStrings.properties
+++ b/java/org/apache/jasper/resources/LocalStrings.properties
@@ -347,6 +347,8 @@ jsp.error.attribute.noequal=equal symbol expected
 jsp.error.attribute.noquote=quote symbol expected
 jsp.error.attribute.unterminated=attribute for {0} is not properly terminated
 jsp.error.attribute.noescape=Attribute value {0} is quoted with {1} which must be escaped when used within the value
+jsp.error.attribute.nowhitespace=The JSP specification requires that an attribute name is preceded by whitespace
+jsp.error.attribute.duplicate=Attribute qualified names must be unique within an element
 jsp.error.missing.tagInfo=TagInfo object for {0} is missing from TLD
 jsp.error.deferredmethodsignaturewithoutdeferredmethod=Cannot specify a method signature if 'deferredMethod' is not 'true'
 jsp.error.deferredvaluetypewithoutdeferredvalue=Cannot specify a value type if 'deferredValue' is not 'true'
@@ -466,3 +468,6 @@ jsp.warning.noJarScanner=Warning: No org.apache.tomcat.JarScanner set in Servlet
 
 # JavacErrorDetail
 jsp.error.bug48498=Unable to display JSP extract. Probably due to an XML parser bug (see Tomcat bug 48498 for details).
+
+# UniqueAttributesImpl
+jsp.error.duplicateqname=An attribute with duplicate qualified name [{0}] was found. Attribute qualified names must be unique within an element.
\ No newline at end of file

==================================================
TestParser.java
new file mode 100644
index 0000000000..ce3809901d
--- /dev/null
+++ b/java/org/apache/jasper/util/UniqueAttributesImpl.java
@@ -0,0 +1,87 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.jasper.util;
+
+import java.util.HashSet;
+import java.util.Set;
+
+import org.apache.jasper.compiler.Localizer;
+import org.xml.sax.Attributes;
+import org.xml.sax.helpers.AttributesImpl;
+
+/**
+ * Wraps the default attributes implementation and ensures that each attribute
+ * has a unique qname as required by the JSP specification.
+ */
+public class UniqueAttributesImpl extends AttributesImpl {
+
+    private Set<String> qNames = new HashSet<String>();
+
+    @Override
+    public void clear() {
+        qNames.clear();
+        super.clear();
+    }
+
+    @Override
+    public void setAttributes(Attributes atts) {
+        for (int i = 0; i < atts.getLength(); i++) {
+            if (!qNames.add(atts.getQName(i))) {
+                handleDuplicate(atts.getQName(i));
+            }
+        }
+        super.setAttributes(atts);
+    }
+
+    @Override
+    public void addAttribute(String uri, String localName, String qName,
+            String type, String value) {
+        if (qNames.add(qName)) {
+            super.addAttribute(uri, localName, qName, type, value);
+        } else {
+            handleDuplicate(qName);
+        }
+    }
+
+    @Override
+    public void setAttribute(int index, String uri, String localName,
+            String qName, String type, String value) {
+        qNames.remove(super.getQName(index));
+        if (qNames.add(qName)) {
+            super.setAttribute(index, uri, localName, qName, type, value);
+        } else {
+            handleDuplicate(qName);
+        }
+    }
+
+    @Override
+    public void removeAttribute(int index) {
+        qNames.remove(super.getQName(index));
+        super.removeAttribute(index);
+    }
+
+    @Override
+    public void setQName(int index, String qName) {
+        qNames.remove(super.getQName(index));
+        super.setQName(index, qName);
+    }
+
+    private void handleDuplicate(String qName) {
+        throw new IllegalArgumentException(
+                Localizer.getMessage("jsp.error.duplicateqname", qName));
+    }
+}

==================================================
TestParserNoStrictWhitespace.java
index 4675fe2a76..145c2609f0 100644
--- a/test/org/apache/jasper/compiler/TestParser.java
+++ b/test/org/apache/jasper/compiler/TestParser.java
@@ -18,11 +18,17 @@
 package org.apache.jasper.compiler;
 
 import java.io.File;
+import java.util.HashMap;
+import java.util.List;
 
 import org.apache.catalina.startup.Tomcat;
 import org.apache.catalina.startup.TomcatBaseTest;
 import org.apache.tomcat.util.buf.ByteChunk;
 
+/**
+ * Tests are duplicated in {@link TestParserNoStrictWhitespace} with the strict
+ * whitespace parsing disabled.
+ */
 public class TestParser extends TomcatBaseTest {
     
     public void testBug48627() throws Exception {
@@ -93,8 +99,7 @@ public class TestParser extends TomcatBaseTest {
     public void testBug48668b() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        File appDir = 
-            new File("test/webapp-3.0");
+        File appDir = new File("test/webapp-3.0");
         // app dir is relative to server home
         tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
         
@@ -107,6 +112,38 @@ public class TestParser extends TomcatBaseTest {
         assertEcho(result, "01-Hello world</p>#{foo2");
     }
 
+    public void testBug49297NoSpaceStrict() throws Exception {
+        Tomcat tomcat = getTomcatInstance();
+
+        File appDir = new File("test/webapp-3.0");
+        // app dir is relative to server home
+        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
+        
+        tomcat.start();
+
+        int sc = getUrl("http://localhost:" + getPort() +
+                "/test/bug49297NoSpace.jsp", new ByteChunk(),
+                new HashMap<String,List<String>>());
+
+        assertEquals(500, sc);
+    }
+    
+    public void testBug49297DuplicateAttr() throws Exception {
+        Tomcat tomcat = getTomcatInstance();
+
+        File appDir = new File("test/webapp-3.0");
+        // app dir is relative to server home
+        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
+        
+        tomcat.start();
+
+        int sc = getUrl("http://localhost:" + getPort() +
+                "/test/bug49297DuplicateAttr.jsp", new ByteChunk(),
+                new HashMap<String,List<String>>());
+
+        assertEquals(500, sc);
+    }
+    
     /** Assertion for text printed by tags:echo */
     private static void assertEcho(String result, String expected) {
         assertTrue(result.indexOf("<p>" + expected + "</p>") > 0);

==================================================
