92032f3772ea7e26a0f9aff0b44c9594e4b883da
==================================================
Added an interceptor that keeps track of statements, and if they are not closed, then they will be closed automatically
==================================================
Filip Hanik
==================================================
Sun Nov 16 03:26:29 2008 +0000
==================================================
AbstractCreateStatementInterceptor.java
Added an interceptor that keeps track of statements, and if they are not closed, then they will be closed automatically


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@717972 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StatementFinalizer.java
index bf5fcf1f11..80f04b65f8 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractCreateStatementInterceptor.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractCreateStatementInterceptor.java
@@ -37,15 +37,21 @@ public abstract class  AbstractCreateStatementInterceptor extends JdbcIntercepto
     public  AbstractCreateStatementInterceptor() {
         super();
     }
-
+    
+    @Override
     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
-        boolean process = false;
-        process = process(statements, method, process);
-        if (process) {
-            Object statement = super.invoke(proxy,method,args);
-            return createStatement(proxy,method,args,statement);
+        if (CLOSE_VAL==method.getName()) {
+            closeInvoked();
+            return super.invoke(proxy, method, args);
         } else {
-            return super.invoke(proxy,method,args);
+            boolean process = false;
+            process = process(statements, method, process);
+            if (process) {
+                Object statement = super.invoke(proxy,method,args);
+                return createStatement(proxy,method,args,statement);
+            } else {
+                return super.invoke(proxy,method,args);
+            }
         }
     }
     
@@ -59,6 +65,8 @@ public abstract class  AbstractCreateStatementInterceptor extends JdbcIntercepto
      * @return
      */
     public abstract Object createStatement(Object proxy, Method method, Object[] args, Object statement);
+    
+    public abstract void closeInvoked();
 
     protected boolean process(String[] names, Method method, boolean process) {
         for (int i=0; (!process) && i<names.length; i++) {

==================================================
StatementFinalizerTest.java
new file mode 100644
index 0000000000..30447f0b2e
--- /dev/null
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/interceptor/StatementFinalizer.java
@@ -0,0 +1,66 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.jdbc.pool.interceptor;
+
+import java.lang.ref.WeakReference;
+import java.lang.reflect.Method;
+import java.sql.Statement;
+import java.util.ArrayList;
+
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+/**
+ * Keeps track of statements associated with a connection and invokes close upon connection.close()
+ * @author fhanik
+ *
+ */
+public class StatementFinalizer extends AbstractCreateStatementInterceptor {
+    protected static Log log = LogFactory.getLog(StatementFinalizer.class);
+    
+    protected ArrayList<WeakReference<Statement>> statements = new ArrayList<WeakReference<Statement>>();
+    
+    @Override
+    public Object createStatement(Object proxy, Method method, Object[] args, Object statement) {
+        // TODO Auto-generated method stub
+        try {
+            statements.add(new WeakReference((Statement)statement));
+        }catch (ClassCastException x) {
+            //ignore this one
+        }
+        return statement;
+    }
+    
+    @Override
+    public void closeInvoked() {
+        while (statements.size()>0) {
+            WeakReference<Statement> ws = statements.remove(0);
+            Statement st = ws.get();
+            if (st!=null) {
+                try {
+                    if (!st.isClosed()) {
+                        st.close();
+                    }
+                } catch (Exception ignore) {
+                    if (log.isDebugEnabled()) {
+                        log.debug("Unable to closed statement upon connection close.",ignore);
+                    }
+                }
+            }
+        }
+    }
+
+}

==================================================
