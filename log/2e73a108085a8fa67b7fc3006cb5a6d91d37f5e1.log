2e73a108085a8fa67b7fc3006cb5a6d91d37f5e1
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60411
==================================================
Mark Thomas
==================================================
Mon Nov 28 11:54:23 2016 +0000
==================================================
RewriteRule.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60411
Implement support in the RewriteValve for symbolic names to specify the redirect code to use when returning a redirect response to the user agent.
Patch provided by Michael Osipov.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1771718 13f79535-47bb-0310-9956-ffa450edef68



==================================================
RewriteValve.java
index 96bc84189c..8349f9ae81 100644
--- a/java/org/apache/catalina/valves/rewrite/RewriteRule.java
+++ b/java/org/apache/catalina/valves/rewrite/RewriteRule.java
@@ -294,18 +294,18 @@ public class RewriteRule {
     /**
      *  Prefix Substitution with http://thishost[:thisport]/ (which makes the
      *  new URL a URI) to force a external redirection. If no code is given
-     *  a HTTP response of 302 (MOVED TEMPORARILY) is used. If you want to
-     *  use other response codes in the range 300-400 just specify them as
-     *  a number or use one of the following symbolic names: temp (default),
-     *  permanent, seeother. Use it for rules which should canonicalize the
-     *  URL and give it back to the client, e.g., translate ``/~'' into ``/u/''
-     *  or always append a slash to /u/user, etc. Note: When you use this flag,
-     *  make sure that the substitution field is a valid URL! If not, you are
-     *  redirecting to an invalid location! And remember that this flag itself
-     *  only prefixes the URL with http://thishost[:thisport]/, rewriting
-     *  continues. Usually you also want to stop and do the redirection
-     *  immediately. To stop the rewriting you also have to provide the
-     *  'L' flag.
+     *  an HTTP response of 302 (FOUND, previously MOVED TEMPORARILY) is used.
+     *  If you want to  use other response codes in the range 300-399 just
+     *  specify them as a number or use one of the following symbolic names:
+     *  temp (default), permanent, seeother. Use it for rules which should
+     *  canonicalize the URL and give it back to the client, e.g., translate
+     *  ``/~'' into ``/u/'' or always append a slash to /u/user, etc. Note:
+     *  When you use this flag, make sure that the substitution field is a
+     *  valid URL! If not, you are redirecting to an invalid location!
+     *  And remember that this flag itself only prefixes the URL with
+     *  http://thishost[:thisport]/, rewriting continues. Usually you also
+     *  want to stop and do the redirection immediately. To stop the
+     *  rewriting you also have to provide the 'L' flag.
      */
     protected boolean redirect = false;
     protected int redirectCode = 0;

==================================================
TestRewriteValve.java
index ce4527d5f7..b789ccdd25 100644
--- a/java/org/apache/catalina/valves/rewrite/RewriteValve.java
+++ b/java/org/apache/catalina/valves/rewrite/RewriteValve.java
@@ -804,18 +804,30 @@ public class RewriteValve extends ValveBase {
         } else if (flag.startsWith("qsappend") || flag.startsWith("QSA")) {
             rule.setQsappend(true);
         } else if (flag.startsWith("redirect") || flag.startsWith("R")) {
-            if (flag.startsWith("redirect=")) {
-                flag = flag.substring("redirect=".length());
-                rule.setRedirect(true);
-                rule.setRedirectCode(Integer.parseInt(flag));
-            } else if (flag.startsWith("R=")) {
-                flag = flag.substring("R=".length());
-                rule.setRedirect(true);
-                rule.setRedirectCode(Integer.parseInt(flag));
-            } else {
-                rule.setRedirect(true);
-                rule.setRedirectCode(HttpServletResponse.SC_FOUND);
+            rule.setRedirect(true);
+            int redirectCode = HttpServletResponse.SC_FOUND;
+            if (flag.startsWith("redirect=") || flag.startsWith("R=")) {
+                if (flag.startsWith("redirect=")) {
+                    flag = flag.substring("redirect=".length());
+                } else if (flag.startsWith("R=")) {
+                    flag = flag.substring("R=".length());
+                }
+                switch(flag) {
+                    case "temp":
+                        redirectCode = HttpServletResponse.SC_FOUND;
+                        break;
+                    case "permanent":
+                        redirectCode = HttpServletResponse.SC_MOVED_PERMANENTLY;
+                        break;
+                    case "seeother":
+                        redirectCode = HttpServletResponse.SC_SEE_OTHER;
+                        break;
+                    default:
+                        redirectCode = Integer.parseInt(flag);
+                        break;
+                }
             }
+            rule.setRedirectCode(redirectCode);
         } else if (flag.startsWith("skip") || flag.startsWith("S")) {
             if (flag.startsWith("skip=")) {
                 flag = flag.substring("skip=".length());

==================================================
