911c3ab9df18ea735f643a03a134fa5f221c71e1
==================================================
Minimize the input sync in a way that still works for me
==================================================
remm remm@apache.org
==================================================
Fri Jun 7 10:15:48 2019 +0200
==================================================
Http2AsyncParser.java
Minimize the input sync in a way that still works for me

Note: Output or input are both the upgrade handler.
Note2: Http2AsyncUpgradeHandler.writeHeaders needs at least the same sync (on this).


==================================================
Http2Parser.java
index 55d97eb41b..827105aba9 100644
--- a/java/org/apache/coyote/http2/Http2AsyncParser.java
+++ b/java/org/apache/coyote/http2/Http2AsyncParser.java
@@ -240,41 +240,39 @@ class Http2AsyncParser extends Http2Parser {
                         if (streamException) {
                             swallow(streamId, payloadSize, false, payload);
                         } else {
-                            synchronized (socketWrapper) {
-                                switch (frameType) {
-                                case DATA:
-                                    readDataFrame(streamId, flags, payloadSize, payload);
-                                    break;
-                                case HEADERS:
-                                    readHeadersFrame(streamId, flags, payloadSize, payload);
-                                    break;
-                                case PRIORITY:
-                                    readPriorityFrame(streamId, payload);
-                                    break;
-                                case RST:
-                                    readRstFrame(streamId, payload);
-                                    break;
-                                case SETTINGS:
-                                    readSettingsFrame(flags, payloadSize, payload);
-                                    break;
-                                case PUSH_PROMISE:
-                                    readPushPromiseFrame(streamId, payload);
-                                    break;
-                                case PING:
-                                    readPingFrame(flags, payload);
-                                    break;
-                                case GOAWAY:
-                                    readGoawayFrame(payloadSize, payload);
-                                    break;
-                                case WINDOW_UPDATE:
-                                    readWindowUpdateFrame(streamId, payload);
-                                    break;
-                                case CONTINUATION:
-                                    readContinuationFrame(streamId, flags, payloadSize, payload);
-                                    break;
-                                case UNKNOWN:
-                                    readUnknownFrame(streamId, frameType, flags, payloadSize, payload);
-                                }
+                            switch (frameType) {
+                            case DATA:
+                                readDataFrame(streamId, flags, payloadSize, payload);
+                                break;
+                            case HEADERS:
+                                readHeadersFrame(streamId, flags, payloadSize, payload);
+                                break;
+                            case PRIORITY:
+                                readPriorityFrame(streamId, payload);
+                                break;
+                            case RST:
+                                readRstFrame(streamId, payload);
+                                break;
+                            case SETTINGS:
+                                readSettingsFrame(flags, payloadSize, payload);
+                                break;
+                            case PUSH_PROMISE:
+                                readPushPromiseFrame(streamId, payload);
+                                break;
+                            case PING:
+                                readPingFrame(flags, payload);
+                                break;
+                            case GOAWAY:
+                                readGoawayFrame(payloadSize, payload);
+                                break;
+                            case WINDOW_UPDATE:
+                                readWindowUpdateFrame(streamId, payload);
+                                break;
+                            case CONTINUATION:
+                                readContinuationFrame(streamId, flags, payloadSize, payload);
+                                break;
+                            case UNKNOWN:
+                                readUnknownFrame(streamId, frameType, flags, payloadSize, payload);
                             }
                         }
                         // See if there is a new 9 byte header and continue parsing if possible

==================================================
