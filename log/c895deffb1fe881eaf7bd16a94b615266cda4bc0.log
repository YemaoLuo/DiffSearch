c895deffb1fe881eaf7bd16a94b615266cda4bc0
==================================================
Further ETag fixes
==================================================
Mark Thomas
==================================================
Wed Aug 12 12:46:00 2020 +0100
==================================================
DefaultServlet.java
index b5e0b30c9f..a6859476a7 100644
--- a/conf/web.xml
+++ b/conf/web.xml
@@ -114,14 +114,6 @@
   <!--                       with a Range header as a partial PUT? Note     -->
   <!--                       that RFC 7233 clarified that Range headers are -->
   <!--                       only valid for GET requests. [true]            -->
-  <!--                                                                      -->
-  <!--   useWeakComparisonWithIfMatch                                       -->
-  <!--                       When comparing entity tags for If-Match        -->
-  <!--                       headers should a weak comparison be used       -->
-  <!--                       rather than the strong comparison required by  -->
-  <!--                       RFC 7232? A weak comparison is used by default -->
-  <!--                       since the default resources implementation     -->
-  <!--                       generates weak entity tags. [true]             -->
 
     <servlet>
         <servlet-name>default</servlet-name>

==================================================
TestDefaultServletIfMatchRequests.java
index 513353f1e4..fac8907ff5 100644
--- a/java/org/apache/catalina/servlets/DefaultServlet.java
+++ b/java/org/apache/catalina/servlets/DefaultServlet.java
@@ -280,8 +280,6 @@ public class DefaultServlet extends HttpServlet {
      */
     private boolean allowPartialPut = true;
 
-    protected boolean useWeakComparisonWithIfMatch = true;
-
 
     // --------------------------------------------------------- Public Methods
 
@@ -351,11 +349,6 @@ public class DefaultServlet extends HttpServlet {
             useAcceptRanges = Boolean.parseBoolean(getServletConfig().getInitParameter("useAcceptRanges"));
         }
 
-        if (getServletConfig().getInitParameter("useWeakComparisonWithIfMatch") != null) {
-            useWeakComparisonWithIfMatch = Boolean.parseBoolean(
-                    getServletConfig().getInitParameter("useWeakComparisonWithIfMatch"));
-        }
-
         // Sanity check on the specified buffer sizes
         if (input < 256) {
             input = 256;
@@ -2171,31 +2164,32 @@ public class DefaultServlet extends HttpServlet {
      *  request processing is stopped
      * @throws IOException an IO error occurred
      */
-    protected boolean checkIfMatch(HttpServletRequest request,
-            HttpServletResponse response, WebResource resource)
+    protected boolean checkIfMatch(HttpServletRequest request, HttpServletResponse response, WebResource resource)
             throws IOException {
 
-        String eTag = generateETag(resource);
-        // Default servlet uses weak matching so we strip any leading "W/" and
-        // then compare using equals
-        if (eTag.startsWith("W/")) {
-            eTag = eTag.substring(2);
-        }
         String headerValue = request.getHeader("If-Match");
-        if (headerValue != null && !headerValue.equals("*")) {
+        if (headerValue != null) {
 
-            Set<String> eTags = EntityTag.parseEntityTag(new StringReader(headerValue), useWeakComparisonWithIfMatch);
-            if (eTags == null) {
-                if (debug > 10) {
-                    log("DefaultServlet.checkIfMatch:  Invalid header value [" + headerValue + "]");
+            boolean conditionSatisfied = false;
+
+            if (!headerValue.equals("*")) {
+                String resourceETag = generateETag(resource);
+
+                // RFC 7232 requires strong comparison for If-Match headers
+                Set<String> headerETags = EntityTag.parseEntityTag(new StringReader(headerValue), false);
+                if (headerETags == null) {
+                    if (debug > 10) {
+                        log("DefaultServlet.checkIfMatch:  Invalid header value [" + headerValue + "]");
+                    }
+                    response.sendError(HttpServletResponse.SC_BAD_REQUEST);
+                    return false;
                 }
-                response.sendError(HttpServletResponse.SC_BAD_REQUEST);
-                return false;
+                conditionSatisfied = headerETags.contains(resourceETag);
+            } else {
+                conditionSatisfied = true;
             }
 
-            // If none of the given ETags match, 412 Precondition failed is
-            // sent back
-            if (!eTags.contains(eTag)) {
+            if (!conditionSatisfied) {
                 response.sendError(HttpServletResponse.SC_PRECONDITION_FAILED);
                 return false;
             }
@@ -2251,31 +2245,35 @@ public class DefaultServlet extends HttpServlet {
      *  request processing is stopped
      * @throws IOException an IO error occurred
      */
-    protected boolean checkIfNoneMatch(HttpServletRequest request,
-            HttpServletResponse response, WebResource resource)
+    protected boolean checkIfNoneMatch(HttpServletRequest request, HttpServletResponse response, WebResource resource)
             throws IOException {
 
-        String eTag = generateETag(resource);
-        // If-None-Match uses weak comparison so strip the weak indicator if
-        // present
-        if (eTag.startsWith("W/")) {
-            eTag = eTag.substring(2);
-        }
         String headerValue = request.getHeader("If-None-Match");
         if (headerValue != null) {
 
             boolean conditionSatisfied = false;
 
+            String resourceETag = generateETag(resource);
             if (!headerValue.equals("*")) {
-                Set<String> eTags = EntityTag.parseEntityTag(new StringReader(headerValue), true);
-                if (eTags == null) {
+
+                // RFC 7232 requires weak comparison for If-None-Match headers
+                // This is done by removing any weak markers before comparison
+                String comparisonETag;
+                if (resourceETag.startsWith("W/")) {
+                    comparisonETag = resourceETag.substring(2);
+                } else {
+                    comparisonETag = resourceETag;
+                }
+
+                Set<String> headerETags = EntityTag.parseEntityTag(new StringReader(headerValue), true);
+                if (headerETags == null) {
                     if (debug > 10) {
                         log("DefaultServlet.checkIfNoneMatch:  Invalid header value [" + headerValue + "]");
                     }
                     response.sendError(HttpServletResponse.SC_BAD_REQUEST);
                     return false;
                 }
-                conditionSatisfied = eTags.contains(eTag);
+                conditionSatisfied = headerETags.contains(comparisonETag);
             } else {
                 conditionSatisfied = true;
             }
@@ -2287,7 +2285,7 @@ public class DefaultServlet extends HttpServlet {
                 // back.
                 if ("GET".equals(request.getMethod()) || "HEAD".equals(request.getMethod())) {
                     response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
-                    response.setHeader("ETag", eTag);
+                    response.setHeader("ETag", resourceETag);
                 } else {
                     response.sendError(HttpServletResponse.SC_PRECONDITION_FAILED);
                 }
@@ -2333,9 +2331,7 @@ public class DefaultServlet extends HttpServlet {
     /**
      * Provides the entity tag (the ETag header) for the given resource.
      * Intended to be over-ridden by custom DefaultServlet implementations that
-     * wish to use an alternative format for the entity tag. Such custom
-     * implementations that generate strong entity tags may also want to change
-     * the default value of {@link #useWeakComparisonWithIfMatch}.
+     * wish to use an alternative format for the entity tag.
      *
      * @param resource  The resource for which an entity tag is required.
      *

==================================================
