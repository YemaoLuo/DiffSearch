b723ef12b5a8b56f75a88bb19491a6c04ffd15ae
==================================================
Refactoring towards v014 API (not yet complete)
==================================================
Mark Emlyn
==================================================
Tue Mar 5 14:55:56 2013 +0000
==================================================
ClientEndpointConfig.java
Refactoring towards v014 API (not yet complete)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1452824 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ClientEndpointConfigurationBuilder.java
similarity index 92%
rename from java/javax/websocket/ClientEndpointConfiguration.java
rename to java/javax/websocket/ClientEndpointConfig.java
index edcf59a0bf..46ebda4844 100644
--- a/java/javax/websocket/ClientEndpointConfiguration.java
+++ b/java/javax/websocket/ClientEndpointConfig.java
@@ -18,7 +18,7 @@ package javax.websocket;
 
 import java.util.List;
 
-public interface ClientEndpointConfiguration extends EndpointConfiguration {
+public interface ClientEndpointConfig extends EndpointConfig {
 
     List<String> getPreferredSubprotocols();
 

==================================================
DefaultClientEndpointConfig.java
index 6a2d575d4f..0dac6ecbef 100644
--- a/java/javax/websocket/ClientEndpointConfigurationBuilder.java
+++ b/java/javax/websocket/ClientEndpointConfigurationBuilder.java
@@ -37,8 +37,8 @@ public class ClientEndpointConfigurationBuilder {
     private List<Decoder> decoders = Collections.EMPTY_LIST;
 
 
-    public ClientEndpointConfiguration build() {
-        return new DefaultClientEndpointConfiguration(preferredSubprotocols,
+    public ClientEndpointConfig build() {
+        return new DefaultClientEndpointConfig(preferredSubprotocols,
                 extensions, encoders, decoders, configurator);
     }
 

==================================================
Endpoint.java
similarity index 90%
rename from java/javax/websocket/DefaultClientEndpointConfiguration.java
rename to java/javax/websocket/DefaultClientEndpointConfig.java
index 3c4cdf0104..14881fdc31 100644
--- a/java/javax/websocket/DefaultClientEndpointConfiguration.java
+++ b/java/javax/websocket/DefaultClientEndpointConfig.java
@@ -20,8 +20,7 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-public class DefaultClientEndpointConfiguration
-        implements ClientEndpointConfiguration {
+final class DefaultClientEndpointConfig implements ClientEndpointConfig {
 
     private final List<String> preferredSubprotocols;
     private final List<Extension> extensions;
@@ -31,7 +30,7 @@ public class DefaultClientEndpointConfiguration
     private final ClientEndpointConfigurator configurator;
 
 
-    DefaultClientEndpointConfiguration(List<String> preferredSubprotocols,
+    DefaultClientEndpointConfig(List<String> preferredSubprotocols,
             List<Extension> extensions, List<Encoder> encoders,
             List<Decoder> decoders, ClientEndpointConfigurator configurator) {
         this.preferredSubprotocols = preferredSubprotocols;
@@ -67,7 +66,7 @@ public class DefaultClientEndpointConfiguration
 
 
     @Override
-    public Map<String, Object> getUserProperties() {
+    public final Map<String, Object> getUserProperties() {
         return userProperties;
     }
 

==================================================
EndpointConfig.java
index 553c7bd265..7ed2a1dd9d 100644
--- a/java/javax/websocket/Endpoint.java
+++ b/java/javax/websocket/Endpoint.java
@@ -23,7 +23,7 @@ public abstract class Endpoint {
      *
      * @param session   The new session.
      */
-    public abstract void onOpen(Session session, EndpointConfiguration config);
+    public abstract void onOpen(Session session, EndpointConfig config);
 
     /**
      * Event that is triggered when a session has closed.

==================================================
MessageHandler.java
similarity index 96%
rename from java/javax/websocket/EndpointConfiguration.java
rename to java/javax/websocket/EndpointConfig.java
index 758f5ceb14..edefe3d508 100644
--- a/java/javax/websocket/EndpointConfiguration.java
+++ b/java/javax/websocket/EndpointConfig.java
@@ -19,7 +19,7 @@ package javax.websocket;
 import java.util.List;
 import java.util.Map;
 
-public interface EndpointConfiguration {
+public interface EndpointConfig {
 
     List<Encoder> getEncoders();
 

==================================================
SendResult.java
index 6cb9ab9187..2c30d99779 100644
--- a/java/javax/websocket/MessageHandler.java
+++ b/java/javax/websocket/MessageHandler.java
@@ -18,7 +18,7 @@ package javax.websocket;
 
 public interface MessageHandler {
 
-    interface Async<T> extends MessageHandler {
+    interface Partial<T> extends MessageHandler {
 
         /**
          * Called when part of a message is available to be processed.
@@ -30,7 +30,7 @@ public interface MessageHandler {
         void onMessage(T messagePart, boolean last);
     }
 
-    interface Basic<T> extends MessageHandler {
+    interface Whole<T> extends MessageHandler {
 
         /**
          * Called when a whole message is available to be processed.

==================================================
WebSocketContainer.java
index 8330b2bf99..2fb6176c1a 100644
--- a/java/javax/websocket/SendResult.java
+++ b/java/javax/websocket/SendResult.java
@@ -16,7 +16,7 @@
  */
 package javax.websocket;
 
-public class SendResult {
+public final class SendResult {
     private Throwable exception;
     private boolean ok = true;
 

==================================================
ServerEndpointConfiguration.java
index 5614ec6581..d116da2cf6 100644
--- a/java/javax/websocket/WebSocketContainer.java
+++ b/java/javax/websocket/WebSocketContainer.java
@@ -53,7 +53,7 @@ public interface WebSocketContainer {
      * @throws DeploymentException  If the connection can not be established
      */
     Session connectToServer(Class<? extends Endpoint> endpoint,
-            ClientEndpointConfiguration clientEndpointConfiguration, URI path)
+            ClientEndpointConfig clientEndpointConfiguration, URI path)
             throws DeploymentException, IOException;
 
     /**

==================================================
WsFrameBase.java
index 3098face9b..999f95dcaf 100644
--- a/java/javax/websocket/server/ServerEndpointConfiguration.java
+++ b/java/javax/websocket/server/ServerEndpointConfiguration.java
@@ -18,7 +18,7 @@ package javax.websocket.server;
 
 import java.util.List;
 
-import javax.websocket.EndpointConfiguration;
+import javax.websocket.EndpointConfig;
 import javax.websocket.Extension;
 
 /**
@@ -26,7 +26,7 @@ import javax.websocket.Extension;
  * server. Applications may provide their own implementation or use
  * {@link ServerEndpointConfigurationBuilder}.
  */
-public interface ServerEndpointConfiguration extends EndpointConfiguration {
+public interface ServerEndpointConfiguration extends EndpointConfig {
 
     Class<?> getEndpointClass();
 

==================================================
WsSession.java
index f44e476d83..9b153e1b58 100644
--- a/java/org/apache/tomcat/websocket/WsFrameBase.java
+++ b/java/org/apache/tomcat/websocket/WsFrameBase.java
@@ -290,7 +290,7 @@ public abstract class WsFrameBase {
                 wsSession.getBasicRemote().sendPong(controlBufferBinary);
             }
         } else if (opCode == Constants.OPCODE_PONG) {
-            MessageHandler.Basic<PongMessage> mhPong =
+            MessageHandler.Whole<PongMessage> mhPong =
                     wsSession.getPongMessageHandler();
             if (mhPong != null) {
                 mhPong.onMessage(new WsPongMessage(controlBufferBinary));
@@ -313,11 +313,11 @@ public abstract class WsFrameBase {
     private void sendMessageText(boolean last) {
         MessageHandler mh = wsSession.getTextMessageHandler();
         if (mh != null) {
-            if (mh instanceof MessageHandler.Async<?>) {
-                ((MessageHandler.Async<String>) mh).onMessage(
+            if (mh instanceof MessageHandler.Partial<?>) {
+                ((MessageHandler.Partial<String>) mh).onMessage(
                         messageBufferText.toString(), last);
             } else {
-                ((MessageHandler.Basic<String>) mh).onMessage(
+                ((MessageHandler.Whole<String>) mh).onMessage(
                         messageBufferText.toString());
             }
             messageBufferText.clear();
@@ -464,10 +464,10 @@ public abstract class WsFrameBase {
     private void sendMessageBinary(ByteBuffer msg, boolean last) {
         MessageHandler mh = wsSession.getBinaryMessageHandler();
         if (mh != null) {
-            if (mh instanceof MessageHandler.Async<?>) {
-                ((MessageHandler.Async<ByteBuffer>) mh).onMessage(msg, last);
+            if (mh instanceof MessageHandler.Partial<?>) {
+                ((MessageHandler.Partial<ByteBuffer>) mh).onMessage(msg, last);
             } else {
-                ((MessageHandler.Basic<ByteBuffer>) mh).onMessage(msg);
+                ((MessageHandler.Whole<ByteBuffer>) mh).onMessage(msg);
             }
         }
     }
@@ -530,14 +530,14 @@ public abstract class WsFrameBase {
         } else if (textMessage) {
             MessageHandler mh = wsSession.getTextMessageHandler();
             if (mh != null) {
-                return mh instanceof MessageHandler.Async<?>;
+                return mh instanceof MessageHandler.Partial<?>;
             }
             return false;
         } else {
             // Must be binary
             MessageHandler mh = wsSession.getBinaryMessageHandler();
             if (mh != null) {
-                return mh instanceof MessageHandler.Async<?>;
+                return mh instanceof MessageHandler.Partial<?>;
             }
             return false;
         }

==================================================
WsWebSocketContainer.java
index 36bd8125f4..93d75fc56d 100644
--- a/java/org/apache/tomcat/websocket/WsSession.java
+++ b/java/org/apache/tomcat/websocket/WsSession.java
@@ -65,7 +65,7 @@ public class WsSession implements Session {
 
     private MessageHandler textMessageHandler = null;
     private MessageHandler binaryMessageHandler = null;
-    private MessageHandler.Basic<PongMessage> pongMessageHandler = null;
+    private MessageHandler.Whole<PongMessage> pongMessageHandler = null;
     private volatile boolean open = true;
     private final Object closeLock = new Object();
     private final Map<String,Object> userProperties = new ConcurrentHashMap<>();
@@ -143,9 +143,9 @@ public class WsSession implements Session {
                 throw new IllegalStateException(
                         sm.getString("wsSession.duplicateHandlerPong"));
             }
-            if (listener instanceof MessageHandler.Basic<?>) {
+            if (listener instanceof MessageHandler.Whole<?>) {
                 pongMessageHandler =
-                        (MessageHandler.Basic<PongMessage>) listener;
+                        (MessageHandler.Whole<PongMessage>) listener;
             } else {
                 throw new IllegalStateException(
                         sm.getString("wsSession.invalidHandlerTypePong"));
@@ -390,7 +390,7 @@ public class WsSession implements Session {
     }
 
 
-    protected MessageHandler.Basic<PongMessage> getPongMessageHandler() {
+    protected MessageHandler.Whole<PongMessage> getPongMessageHandler() {
         return pongMessageHandler;
     }
 

==================================================
PojoEndpoint.java
index 281c167df6..2249809ec5 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -37,7 +37,7 @@ import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
 
-import javax.websocket.ClientEndpointConfiguration;
+import javax.websocket.ClientEndpointConfig;
 import javax.websocket.DeploymentException;
 import javax.websocket.Endpoint;
 import javax.websocket.Extension;
@@ -79,7 +79,7 @@ public class WsWebSocketContainer
 
     @Override
     public Session connectToServer(Class<? extends Endpoint> clazz,
-            ClientEndpointConfiguration clientEndpointConfiguration, URI path)
+            ClientEndpointConfig clientEndpointConfiguration, URI path)
             throws DeploymentException {
 
         String scheme = path.getScheme();

==================================================
PojoMessageHandlerAsyncBase.java
index 904c01ea0b..e26e1d8942 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoEndpoint.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoEndpoint.java
@@ -21,7 +21,7 @@ import java.util.Map;
 
 import javax.websocket.CloseReason;
 import javax.websocket.Endpoint;
-import javax.websocket.EndpointConfiguration;
+import javax.websocket.EndpointConfig;
 import javax.websocket.MessageHandler;
 import javax.websocket.Session;
 import javax.websocket.server.ServerEndpointConfiguration;
@@ -45,7 +45,7 @@ public class PojoEndpoint extends Endpoint {
 
     @Override
     public void onOpen(Session session,
-            EndpointConfiguration endpointConfiguration) {
+            EndpointConfig endpointConfiguration) {
 
         ServerEndpointConfiguration sec =
                 (ServerEndpointConfiguration) endpointConfiguration;

==================================================
PojoMessageHandlerBasicBase.java
index 1031a07038..e929efe94b 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerAsyncBase.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerAsyncBase.java
@@ -30,7 +30,7 @@ import javax.websocket.Session;
  * @param <T>   The type of message to handle
  */
 public abstract class PojoMessageHandlerAsyncBase<T>
-        extends PojoMessageHandlerBase<T> implements MessageHandler.Async<T> {
+        extends PojoMessageHandlerBase<T> implements MessageHandler.Partial<T> {
 
     private final int indexBoolean;
 

==================================================
WsProtocolHandler.java
index 0d59ab14a1..978b121bd0 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerBasicBase.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerBasicBase.java
@@ -30,7 +30,7 @@ import javax.websocket.Session;
  * @param <T>   The type of message to handle
  */
 public abstract class PojoMessageHandlerBasicBase<T>
-        extends PojoMessageHandlerBase<T> implements MessageHandler.Basic<T> {
+        extends PojoMessageHandlerBase<T> implements MessageHandler.Whole<T> {
 
     public PojoMessageHandlerBasicBase(Object pojo, Method method,
             Session session, Object[] params, int indexPayload,

==================================================
TestUtil.java
index c601688f92..751fbd8e97 100644
--- a/java/org/apache/tomcat/websocket/server/WsProtocolHandler.java
+++ b/java/org/apache/tomcat/websocket/server/WsProtocolHandler.java
@@ -29,7 +29,7 @@ import javax.servlet.http.WebConnection;
 import javax.websocket.CloseReason;
 import javax.websocket.CloseReason.CloseCodes;
 import javax.websocket.Endpoint;
-import javax.websocket.EndpointConfiguration;
+import javax.websocket.EndpointConfig;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -49,7 +49,7 @@ public class WsProtocolHandler implements HttpUpgradeHandler {
             LogFactory.getLog(WsProtocolHandler.class);
 
     private final Endpoint ep;
-    private final EndpointConfiguration endpointConfig;
+    private final EndpointConfig endpointConfig;
     private final ClassLoader applicationClassLoader;
     private final ServerContainerImpl webSocketContainer;
     private final WsRequest request;
@@ -60,7 +60,7 @@ public class WsProtocolHandler implements HttpUpgradeHandler {
     private WsSession wsSession;
 
 
-    public WsProtocolHandler(Endpoint ep, EndpointConfiguration endpointConfig,
+    public WsProtocolHandler(Endpoint ep, EndpointConfig endpointConfig,
             ServerContainerImpl wsc, WsRequest request, String subProtocol,
             Map<String,String> pathParameters, boolean secure) {
         this.ep = ep;

==================================================
TestWsWebSocketContainer.java
index 4080dcd953..f253048e46 100644
--- a/test/org/apache/tomcat/websocket/TestUtil.java
+++ b/test/org/apache/tomcat/websocket/TestUtil.java
@@ -96,7 +96,7 @@ public class TestUtil {
 
 
     private static class SimpleMessageHandler
-            implements MessageHandler.Basic<String> {
+            implements MessageHandler.Whole<String> {
         @Override
         public void onMessage(String message) {
             // NO-OP
@@ -109,7 +109,7 @@ public class TestUtil {
 
 
     private abstract static class GenericMessageHandler<T>
-            implements MessageHandler.Basic<T> {
+            implements MessageHandler.Whole<T> {
     }
 
 
@@ -129,7 +129,7 @@ public class TestUtil {
 
 
     private abstract static class GenericMultipleMessageHandler<A,B>
-            implements MessageHandler.Basic<A>, Foo<B> {
+            implements MessageHandler.Whole<A>, Foo<B> {
     }
 
 

==================================================
TesterSingleMessageClient.java
index 613c196dc2..19562edcab 100644
--- a/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
+++ b/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
@@ -31,7 +31,7 @@ import javax.websocket.ClientEndpointConfigurationBuilder;
 import javax.websocket.ContainerProvider;
 import javax.websocket.DeploymentException;
 import javax.websocket.Endpoint;
-import javax.websocket.EndpointConfiguration;
+import javax.websocket.EndpointConfig;
 import javax.websocket.MessageHandler;
 import javax.websocket.OnMessage;
 import javax.websocket.Session;
@@ -450,7 +450,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
 
 
     public static class BlockingBinaryHandler
-            implements MessageHandler.Async<ByteBuffer> {
+            implements MessageHandler.Partial<ByteBuffer> {
 
         @Override
         public void onMessage(ByteBuffer messagePart, boolean last) {
@@ -472,7 +472,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
 
 
         @Override
-        public void onOpen(Session session, EndpointConfiguration config) {
+        public void onOpen(Session session, EndpointConfig config) {
 
             // Reset everything
             timeout = -1;
@@ -676,7 +676,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
     public static final class EndpointA extends Endpoint {
 
         @Override
-        public void onOpen(Session session, EndpointConfiguration config) {
+        public void onOpen(Session session, EndpointConfig config) {
             // NO-OP
         }
     }
@@ -685,7 +685,7 @@ public class TestWsWebSocketContainer extends TomcatBaseTest {
     public static final class EndpointB extends Endpoint {
 
         @Override
-        public void onOpen(Session session, EndpointConfiguration config) {
+        public void onOpen(Session session, EndpointConfig config) {
             // NO-OP
         }
     }

==================================================
EchoEndpoint.java
index f6346f7230..133daaa40d 100644
--- a/test/org/apache/tomcat/websocket/TesterSingleMessageClient.java
+++ b/test/org/apache/tomcat/websocket/TesterSingleMessageClient.java
@@ -23,7 +23,7 @@ import java.util.concurrent.CountDownLatch;
 
 import javax.websocket.CloseReason;
 import javax.websocket.Endpoint;
-import javax.websocket.EndpointConfiguration;
+import javax.websocket.EndpointConfig;
 import javax.websocket.MessageHandler;
 import javax.websocket.Session;
 
@@ -52,14 +52,14 @@ public class TesterSingleMessageClient {
         }
 
         @Override
-        public void onOpen(Session session, EndpointConfiguration config) {
+        public void onOpen(Session session, EndpointConfig config) {
             // NO-OP
         }
     }
 
 
     public abstract static class BasicHandler<T>
-            implements MessageHandler.Basic<T> {
+            implements MessageHandler.Whole<T> {
 
         private final CountDownLatch latch;
 
@@ -110,7 +110,7 @@ public class TesterSingleMessageClient {
     }
 
     public abstract static class AsyncHandler<T>
-            implements MessageHandler.Async<T> {
+            implements MessageHandler.Partial<T> {
 
         private final CountDownLatch latch;
 

==================================================
