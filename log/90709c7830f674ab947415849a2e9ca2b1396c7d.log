90709c7830f674ab947415849a2e9ca2b1396c7d
==================================================
Pull up receive
==================================================
Mark Emlyn
==================================================
Fri Aug 30 21:57:45 2013 +0000
==================================================
AbstractAjpProcessor.java
Pull up receive

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1519097 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpAprProcessor.java
index f529945368..c4aec55783 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
@@ -649,8 +649,47 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
             throws IOException;
 
     // Methods used by SocketInputBuffer
-    protected abstract boolean receive() throws IOException;
+    /** Receive a chunk of data. Called to implement the
+     *  'special' packet in ajp13 and to receive the data
+     *  after we send a GET_BODY packet
+     */
+    protected boolean receive() throws IOException {
+
+        first = false;
+        bodyMessage.reset();
+
+        readMessage(bodyMessage, true);
+
+        // No data received.
+        if (bodyMessage.getLen() == 0) {
+            // just the header
+            // Don't mark 'end of stream' for the first chunk.
+            return false;
+        }
+        int blen = bodyMessage.peekInt();
+        if (blen == 0) {
+            return false;
+        }
 
+        bodyMessage.getBodyBytes(bodyBytes);
+        empty = false;
+        return true;
+    }
+
+
+    /**
+     * Read an AJP message.
+     *
+     * @param message   The message to populate
+     * @param block If there is no data available to read when this method is
+     *              called, should this call block until data becomes available?
+
+     * @return true if the message has been read, false if no data was read
+     *
+     * @throws IOException any other failure, including incomplete reads
+     */
+    protected abstract boolean readMessage(AjpMessage message,
+            boolean blockOnFirstRead) throws IOException;
 
     @Override
     public final boolean isComet() {

==================================================
AjpNioProcessor.java
index f205c09bcc..1e563c1b8a 100644
--- a/java/org/apache/coyote/ajp/AjpAprProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpAprProcessor.java
@@ -429,35 +429,6 @@ public class AjpAprProcessor extends AbstractAjpProcessor<Long> {
     }
 
 
-    /** Receive a chunk of data. Called to implement the
-     *  'special' packet in ajp13 and to receive the data
-     *  after we send a GET_BODY packet
-     */
-    @Override
-    public boolean receive() throws IOException {
-
-        first = false;
-        bodyMessage.reset();
-
-        readMessage(bodyMessage, true);
-
-        // No data received.
-        if (bodyMessage.getLen() == 0) {
-            // just the header
-            // Don't mark 'end of stream' for the first chunk.
-            return false;
-        }
-        int blen = bodyMessage.peekInt();
-        if (blen == 0) {
-            return false;
-        }
-
-        bodyMessage.getBodyBytes(bodyBytes);
-        empty = false;
-        return true;
-    }
-
-
     /**
      * Read an AJP message.
      *
@@ -468,6 +439,7 @@ public class AjpAprProcessor extends AbstractAjpProcessor<Long> {
      *
      * @throws IOException any other failure, including incomplete reads
      */
+    @Override
     protected boolean readMessage(AjpMessage message, boolean block)
         throws IOException {
 

==================================================
AjpProcessor.java
index 16a29740d1..1102765e3d 100644
--- a/java/org/apache/coyote/ajp/AjpNioProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpNioProcessor.java
@@ -363,35 +363,6 @@ public class AjpNioProcessor extends AbstractAjpProcessor<NioChannel> {
     }
 
 
-    /** Receive a chunk of data. Called to implement the
-     *  'special' packet in ajp13 and to receive the data
-     *  after we send a GET_BODY packet
-     */
-    @Override
-    public boolean receive() throws IOException {
-
-        first = false;
-        bodyMessage.reset();
-
-        readMessage(bodyMessage, true);
-
-        // No data received.
-        if (bodyMessage.getLen() == 0) {
-            // just the header
-            // Don't mark 'end of stream' for the first chunk.
-            return false;
-        }
-        int blen = bodyMessage.peekInt();
-        if (blen == 0) {
-            return false;
-        }
-
-        bodyMessage.getBodyBytes(bodyBytes);
-        empty = false;
-        return true;
-    }
-
-
     /**
      * Read an AJP message.
      *
@@ -399,6 +370,7 @@ public class AjpNioProcessor extends AbstractAjpProcessor<NioChannel> {
      *
      * @throws IOException any other failure, including incomplete reads
      */
+    @Override
     protected boolean readMessage(AjpMessage message, boolean blockFirstRead)
         throws IOException {
 
@@ -430,7 +402,7 @@ public class AjpNioProcessor extends AbstractAjpProcessor<NioChannel> {
                         Integer.valueOf(messageLength),
                         Integer.valueOf(buf.length)));
             }
-            bytesRead += read(buf, headerLength, messageLength, true);
+            read(buf, headerLength, messageLength, true);
             return true;
         }
     }

==================================================
