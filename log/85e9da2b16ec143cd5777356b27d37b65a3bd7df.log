85e9da2b16ec143cd5777356b27d37b65a3bd7df
==================================================
Implemented closure notification. Turns out generics only work on an instance level, so you cant use static methods without having to use reflection.
==================================================
Filip Hanik
==================================================
Thu Dec 11 05:49:10 2008 +0000
==================================================
ConnectionPool.java
Implemented closure notification. Turns out generics only work on an instance level, so you cant use static methods without having to use reflection.



git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@725586 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JdbcInterceptor.java
index b74dfee510..6e41ed7cfb 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -291,7 +291,14 @@ public class ConnectionPool {
         }
         size.set(0);
         if (this.getPoolProperties().isJmxEnabled()) stopJmx();
-        
+        PoolProperties.InterceptorDefinition[] proxies = getPoolProperties().getJdbcInterceptorsAsArray();
+        for (int i=0; i<proxies.length; i++) {
+            try {
+                proxies[i].getInterceptorClass().newInstance().poolClosed(this);
+            }catch (Exception x) {
+                log.debug("Unable to inform interceptor of pool closure.",x);
+            }
+        }
     } //closePool
 
 

==================================================
PoolProperties.java
index f28e95ec04..176a1f30af 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/JdbcInterceptor.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/JdbcInterceptor.java
@@ -90,4 +90,14 @@ public abstract class JdbcInterceptor implements InvocationHandler {
     public void setUseEquals(boolean useEquals) {
         this.useEquals = useEquals;
     }
+    
+    /**
+     * This method is invoked by a connection pool when the pool is closed.
+     * Interceptor classes can override this method if they keep static
+     * variables or other tracking means around.
+     * <b>This method is only invoked on a single instance of the interceptor, and not on every instance created.</b>
+     * @param pool - the pool that is being closed.
+     */
+    public void poolClosed(ConnectionPool pool) {
+    }
 }

==================================================
SlowQueryReport.java
index 7c04f8a728..d0dc7b33c0 100644
--- a/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
+++ b/modules/jdbc-pool/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
@@ -454,9 +454,9 @@ public class PoolProperties {
         
         public Class<? extends JdbcInterceptor> getInterceptorClass() throws ClassNotFoundException {
             if (clazz==null) {
-                clazz = Class.forName(getClassName(), true, JdbcInterceptor.class.getClassLoader());
+                clazz = Class.forName(getClassName(), true, this.getClass().getClassLoader());
             }
-            return clazz;
+            return (Class<? extends JdbcInterceptor>)clazz;
         }
     } 
     

==================================================
