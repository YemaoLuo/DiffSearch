fd3c9e4cecedfeb79148b5470a01688c27236ece
==================================================
Refactor various operations performed in tribes using a scheduled executor.
==================================================
Remy Maucherat
==================================================
Thu Nov 8 10:43:00 2018 +0000
==================================================
Channel.java
Refactor various operations performed in tribes using a scheduled executor.
When tribes is not running standalone, it will use the executor from the Catalina Service.
If running independently (like in the testsuite), the Channel will provide the executor.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1846119 13f79535-47bb-0310-9956-ffa450edef68



==================================================
GroupChannel.java
index 8fe50ede22..a5f6c9cb06 100644
--- a/java/org/apache/catalina/tribes/Channel.java
+++ b/java/org/apache/catalina/tribes/Channel.java
@@ -18,6 +18,7 @@ package org.apache.catalina.tribes;
 
 import java.io.Serializable;
 import java.util.StringJoiner;
+import java.util.concurrent.ScheduledExecutorService;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -373,6 +374,18 @@ public interface Channel {
      */
     public void setName(String name);
 
+    /**
+     * Return executor that can be used for utility tasks.
+     * @return the executor
+     */
+    public ScheduledExecutorService getUtilityExecutor();
+
+    /**
+     * Set the executor that can be used for utility tasks.
+     * @param utilityExecutor the executor
+     */
+    public void setUtilityExecutor(ScheduledExecutorService utilityExecutor);
+
     /**
      * Translates the name of an option to its integer value.  Valid option names are "asynchronous" (alias "async"),
      * "byte_message" (alias "byte"), "multicast", "secure", "synchronized_ack" (alias "sync"), "udp", "use_ack"

==================================================
StaticMembershipInterceptor.java
index 7d2e0fb5bd..5fa942bcee 100644
--- a/java/org/apache/catalina/tribes/group/LocalStrings.properties
+++ b/java/org/apache/catalina/tribes/group/LocalStrings.properties
@@ -23,4 +23,5 @@ groupChannel.sendFail.noRpcChannelReply=Unable to find rpc channel, failed to se
 groupChannel.optionFlag.conflict=Interceptor option flag conflict: [{0}]
 groupChannel.listener.alreadyExist=Listener already exists:[{0}][{1}]
 groupChannel.unable.sendHeartbeat=Unable to send heartbeat through Tribes interceptor stack. Will try to sleep again.
+groupChannel.warn.noUtilityExecutor=No utility executor was set, creating one
 rpcChannel.replyFailed=Unable to send back reply in RpcChannel.

==================================================
MembershipProviderBase.java
index c120e1ce44..cd8e9e2f6f 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/StaticMembershipInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/StaticMembershipInterceptor.java
@@ -18,6 +18,7 @@ package org.apache.catalina.tribes.group.interceptors;
 
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.concurrent.ScheduledExecutorService;
 
 import org.apache.catalina.tribes.Channel;
 import org.apache.catalina.tribes.ChannelException;
@@ -156,8 +157,9 @@ public class StaticMembershipInterceptor extends ChannelInterceptorBase
         if ( (Channel.SND_RX_SEQ&svc)==Channel.SND_RX_SEQ ) super.start(Channel.SND_RX_SEQ);
         if ( (Channel.SND_TX_SEQ&svc)==Channel.SND_TX_SEQ ) super.start(Channel.SND_TX_SEQ);
         final ChannelInterceptorBase base = this;
+        ScheduledExecutorService executor = getChannel().getUtilityExecutor();
         for (final Member member : members) {
-            Thread t = new Thread() {
+            Runnable r = new Runnable() {
                 @Override
                 public void run() {
                     base.memberAdded(member);
@@ -166,7 +168,7 @@ public class StaticMembershipInterceptor extends ChannelInterceptorBase
                     }
                 }
             };
-            t.start();
+            executor.execute(r);
         }
         super.start(svc & (~Channel.SND_RX_SEQ) & (~Channel.SND_TX_SEQ));
 

==================================================
