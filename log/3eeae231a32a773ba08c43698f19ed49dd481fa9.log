3eeae231a32a773ba08c43698f19ed49dd481fa9
==================================================
Simplify interface to SetCookieSupport.
==================================================
Jeremy Boynes
==================================================
Wed Jan 8 01:10:34 2014 +0000
==================================================
Response.java
Simplify interface to SetCookieSupport.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1556418 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SetCookieSupport.java
index 2fd8dc4392..20c08935d3 100644
--- a/java/org/apache/catalina/connector/Response.java
+++ b/java/org/apache/catalina/connector/Response.java
@@ -865,12 +865,12 @@ public class Response
             return;
         }
 
-        final StringBuffer sb = generateCookieString(cookie);
+        String header = generateCookieString(cookie);
         //if we reached here, no exception, cookie is valid
         // the header name is Set-Cookie for both "old" and v.1 ( RFC2109 )
         // RFC2965 is not supported by browsers and the Servlet spec
         // asks for 2109.
-        addHeader("Set-Cookie", sb.toString());
+        addHeader("Set-Cookie", header);
     }
 
     /**
@@ -886,50 +886,38 @@ public class Response
         String name = cookie.getName();
         final String headername = "Set-Cookie";
         final String startsWith = name + "=";
-        final StringBuffer sb = generateCookieString(cookie);
+        String header = generateCookieString(cookie);
         boolean set = false;
         MimeHeaders headers = coyoteResponse.getMimeHeaders();
         int n = headers.size();
         for (int i = 0; i < n; i++) {
             if (headers.getName(i).toString().equals(headername)) {
                 if (headers.getValue(i).toString().startsWith(startsWith)) {
-                    headers.getValue(i).setString(sb.toString());
+                    headers.getValue(i).setString(header);
                     set = true;
                 }
             }
         }
         if (!set) {
-            addHeader(headername, sb.toString());
+            addHeader(headername, header);
         }
 
 
     }
 
-    public StringBuffer generateCookieString(final Cookie cookie) {
-        final StringBuffer sb = new StringBuffer();
+    public String generateCookieString(final Cookie cookie) {
         //web application code can receive a IllegalArgumentException
         //from the appendCookieValue invocation
         if (SecurityUtil.isPackageProtectionEnabled()) {
-            AccessController.doPrivileged(new PrivilegedAction<Void>() {
+            return AccessController.doPrivileged(new PrivilegedAction<String>() {
                 @Override
-                public Void run(){
-                    SetCookieSupport.appendCookieValue
-                            (sb, cookie.getVersion(), cookie.getName(),
-                                    cookie.getValue(), cookie.getPath(),
-                                    cookie.getDomain(), cookie.getComment(),
-                                    cookie.getMaxAge(), cookie.getSecure(),
-                                    cookie.isHttpOnly());
-                    return null;
+                public String run(){
+                    return SetCookieSupport.generateHeader(cookie);
                 }
             });
         } else {
-            SetCookieSupport.appendCookieValue
-                    (sb, cookie.getVersion(), cookie.getName(), cookie.getValue(),
-                            cookie.getPath(), cookie.getDomain(), cookie.getComment(),
-                            cookie.getMaxAge(), cookie.getSecure(),
-                            cookie.isHttpOnly());
+            return SetCookieSupport.generateHeader(cookie);
         }
-        return sb;
     }
 
 

==================================================
