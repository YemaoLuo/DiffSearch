94844961e76ccee6fcfb829dfeb842beaa5ea8ab
==================================================
Add extended option to trimSpaces
==================================================
Mark Thomas
==================================================
Tue Mar 16 17:47:23 2021 +0000
==================================================
Options.java
Add extended option to trimSpaces


==================================================
TrimSpacesOption.java
index 19f394749e..5f8d6dab54 100644
--- a/java/org/apache/jasper/Options.java
+++ b/java/org/apache/jasper/Options.java
@@ -101,8 +101,11 @@ public interface Options {
      * @return {@link TrimSpacesOption#TRUE} to remove template text that
      *         consists only of whitespace from the output completely,
      *         {@link TrimSpacesOption#SINGLE} to replace such template text
-     *         with a single space or {@link TrimSpacesOption#FALSE} to leave
-     *         such template text unchanged
+     *         with a single space, {@link TrimSpacesOption#FALSE} to leave
+     *         such template text unchanged or {@link TrimSpacesOption#EXTENDED}
+     *         to remove template text that consists only of whitespace and to
+     *         replace any sequence of whitespace and new lines within template
+     *         text with a single new line.
      */
     public TrimSpacesOption getTrimSpaces();
 

==================================================
Compiler.java
index faf7476006..2890aa378f 100644
--- a/java/org/apache/jasper/TrimSpacesOption.java
+++ b/java/org/apache/jasper/TrimSpacesOption.java
@@ -19,5 +19,6 @@ package org.apache.jasper;
 public enum TrimSpacesOption {
     FALSE,
     TRUE,
-    SINGLE
+    SINGLE,
+    EXTENDED
 }

==================================================
Generator.java
index 2d5cda8690..e2a2fcdb48 100644
--- a/java/org/apache/jasper/compiler/Compiler.java
+++ b/java/org/apache/jasper/compiler/Compiler.java
@@ -32,6 +32,7 @@ import java.util.Map.Entry;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.JspCompilationContext;
 import org.apache.jasper.Options;
+import org.apache.jasper.TrimSpacesOption;
 import org.apache.jasper.servlet.JspServletWrapper;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -316,7 +317,12 @@ public abstract class Compiler {
                     javaEncoding);
         }
 
-        writer = new ServletWriter(new PrintWriter(osw));
+        if ((ctxt!=null) && ctxt.getOptions().getTrimSpaces().equals(TrimSpacesOption.EXTENDED)) {
+            writer = new NewlineReductionServletWriter(new PrintWriter(osw));
+        } else {
+            writer = new ServletWriter(new PrintWriter(osw));
+        }
+
         ctxt.setWriter(writer);
         return writer;
     }

==================================================
NewlineReductionServletWriter.java
index efd54856cb..8d0af63f30 100644
--- a/java/org/apache/jasper/compiler/Generator.java
+++ b/java/org/apache/jasper/compiler/Generator.java
@@ -40,6 +40,8 @@ import java.util.Map.Entry;
 import java.util.Set;
 import java.util.TimeZone;
 import java.util.Vector;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 import jakarta.el.MethodExpression;
 import jakarta.el.ValueExpression;
@@ -52,6 +54,7 @@ import org.apache.el.util.JreCompat;
 import org.apache.jasper.Constants;
 import org.apache.jasper.JasperException;
 import org.apache.jasper.JspCompilationContext;
+import org.apache.jasper.TrimSpacesOption;
 import org.apache.jasper.compiler.Node.NamedAttribute;
 import org.apache.jasper.runtime.JspRuntimeLibrary;
 import org.xml.sax.Attributes;
@@ -81,6 +84,10 @@ class Generator {
 
     private static final Class<?>[] OBJECT_CLASS = { Object.class };
 
+    private static final Pattern PRE_TAG_PATTERN = Pattern.compile("(?s).*(<pre>|</pre>).*");
+
+    private static final Pattern BLANK_LINE_PATTERN = Pattern.compile("(\\s*(\\n|\\r)+\\s*)");
+
     private final ServletWriter out;
 
     private final ArrayList<GenBuffer> methodsBuffered;
@@ -2097,6 +2104,21 @@ class Generator {
         public void visit(Node.TemplateText n) throws JasperException {
 
             String text = n.getText();
+            // If the extended option is being used attempt to minimize the
+            // frequency of regex operations.
+            if ((ctxt != null) && ctxt.getOptions().getTrimSpaces().equals(TrimSpacesOption.EXTENDED) &&
+                    text.contains("\n")) {
+                // Ensure there are no <pre> or </pre> tags embedded in this
+                // text - if there are, we want to NOT modify the whitespace.
+                Matcher preMatcher = PRE_TAG_PATTERN.matcher(text);
+                if (!preMatcher.matches()) {
+                    Matcher matcher = BLANK_LINE_PATTERN.matcher(text);
+                    String revisedText = matcher.replaceAll("\n");
+                    // Leading and trailing whitespace can be trimmed so remove
+                    // it here as the regex won't remove it.
+                    text = revisedText.trim();
+                }
+            }
 
             int textSize = text.length();
             if (textSize == 0) {

==================================================
TestGenerator.java
new file mode 100644
index 0000000000..ed6fbfe44b
--- /dev/null
+++ b/java/org/apache/jasper/compiler/NewlineReductionServletWriter.java
@@ -0,0 +1,54 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.jasper.compiler;
+
+import java.io.PrintWriter;
+
+/**
+ * This class filters duplicate newlines instructions from the compiler output,
+ * and therefore from the runtime JSP. The duplicates typically happen because
+ * the compiler has multiple branches that write them, but they operate
+ * independently and don't realize that the previous output was identical.
+ *
+ * Removing these lines makes the JSP more efficient by executing fewer
+ * operations during runtime.
+ */
+public class NewlineReductionServletWriter extends ServletWriter {
+
+    private static final String NEWLINE_WRITE_TEXT = "out.write('\\n');";
+
+    private boolean lastWriteWasNewline;
+
+    public NewlineReductionServletWriter(PrintWriter writer) {
+        super(writer);
+    }
+
+    @Override
+    public void printil(String s) {
+        if (s.equals(NEWLINE_WRITE_TEXT)) {
+            if (lastWriteWasNewline) {
+                // do nothing
+                return;
+            } else {
+                lastWriteWasNewline = true;
+            }
+        } else {
+            lastWriteWasNewline = false;
+        }
+        super.printil(s);
+    }
+}
\ No newline at end of file

==================================================
