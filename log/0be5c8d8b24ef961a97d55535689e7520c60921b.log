0be5c8d8b24ef961a97d55535689e7520c60921b
==================================================
Improved fix for BZ 65714
==================================================
Mark Thomas
==================================================
Fri Dec 10 15:24:51 2021 +0000
==================================================
SecurityClassLoad.java
Improved fix for BZ 65714

https://bz.apache.org/bugzilla/show_bug.cgi?id=65714
When running under a SecurityManager, ensure that newly created threads
inherit an appropriate AccessControlContext


==================================================
PrivilegedSetAccessControlContext.java
index 577cd38463..39e92df46d 100644
--- a/java/org/apache/tomcat/util/security/LocalStrings.properties
+++ b/java/org/apache/tomcat/util/security/LocalStrings.properties
@@ -14,3 +14,6 @@
 # limitations under the License.
 
 concurrentMessageDigest.noDigest=Digest algorithm unavailable
+
+privilegedSetAccessControlContext.lookupFailed=Unable to obtain reference to field Thread.inheritedAccessControlContext
+privilegedSetAccessControlContext.setFailed=Unable to set field Thread.inheritedAccessControlContext

==================================================
TaskThreadFactory.java
new file mode 100644
index 0000000000..2f53480087
--- /dev/null
+++ b/java/org/apache/tomcat/util/security/PrivilegedSetAccessControlContext.java
@@ -0,0 +1,67 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.util.security;
+
+import java.lang.reflect.Field;
+import java.security.AccessControlContext;
+import java.security.AccessController;
+import java.security.PrivilegedAction;
+
+import org.apache.juli.logging.Log;
+import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.res.StringManager;
+
+public class PrivilegedSetAccessControlContext implements PrivilegedAction<Void> {
+
+    private static final Log log = LogFactory.getLog(PrivilegedSetAccessControlContext.class);
+    private static final StringManager sm = StringManager.getManager(PrivilegedSetAccessControlContext.class);
+
+    private static final AccessControlContext acc;
+    private static final Field field;
+
+    static {
+        acc = AccessController.getContext();
+        Field f = null;
+        try {
+            f = Thread.class.getDeclaredField("inheritedAccessControlContext");
+            f.trySetAccessible();
+        } catch (NoSuchFieldException | SecurityException e) {
+            log.warn(sm.getString("privilegedSetAccessControlContext.lookupFailed"), e);
+        }
+        field = f;
+    }
+
+    private final Thread t;
+
+
+    public PrivilegedSetAccessControlContext(Thread t) {
+        this.t = t;
+    }
+
+
+    @Override
+    public Void run() {
+        try {
+            if (field != null) {
+                field.set(t,  acc);
+            }
+        } catch (IllegalArgumentException | IllegalAccessException e) {
+            log.warn(sm.getString("privilegedSetAccessControlContext.setFailed"), e);
+        }
+        return null;
+    }
+}
\ No newline at end of file

==================================================
