39a61f97d45636de0be8cd8b4c5289a4ed1e5bbd
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=58585
==================================================
Mark Thomas
==================================================
Thu Nov 5 21:06:00 2015 +0000
==================================================
OutputBuffer.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=58585
Fix security exceptions when starting with a security manager.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1712866 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SecurityClassLoad.java
index df30177bf5..5f2ffd7baa 100644
--- a/java/org/apache/catalina/connector/OutputBuffer.java
+++ b/java/org/apache/catalina/connector/OutputBuffer.java
@@ -558,7 +558,7 @@ public class OutputBuffer extends Writer
             enc = org.apache.coyote.Constants.DEFAULT_CHARACTER_ENCODING;
         }
 
-        final Charset charset = B2CConverter.getCharset(enc);
+        final Charset charset = getCharset(enc);
         SynchronizedStack<C2BConverter> stack = encoders.get(charset);
         if (stack == null) {
             stack = new SynchronizedStack<>();
@@ -573,6 +573,30 @@ public class OutputBuffer extends Writer
     }
 
 
+    private static Charset getCharset(String encoding) throws IOException {
+        if (Globals.IS_SECURITY_ENABLED) {
+            try {
+                return AccessController.doPrivileged(
+                        new PrivilegedExceptionAction<Charset>() {
+                            @Override
+                            public Charset run() throws IOException {
+                                return B2CConverter.getCharset(encoding);
+                            }
+                        });
+            } catch (PrivilegedActionException ex) {
+                Exception e = ex.getException();
+                if (e instanceof IOException) {
+                    throw (IOException) e;
+                } else {
+                    throw new IOException(ex);
+                }
+            }
+        } else {
+            return B2CConverter.getCharset(encoding);
+        }
+    }
+
+
     private static C2BConverter createConverter(Charset charset) throws IOException {
         if (Globals.IS_SECURITY_ENABLED){
             try {

==================================================
Stream.java
index 6ef06311ce..7982004e4b 100644
--- a/java/org/apache/catalina/security/SecurityClassLoad.java
+++ b/java/org/apache/catalina/security/SecurityClassLoad.java
@@ -68,6 +68,9 @@ public final class SecurityClassLoad {
         loader.loadClass
             (basePackage +
              "ApplicationDispatcher$PrivilegedInclude");
+        loader.loadClass
+            (basePackage +
+             "ApplicationPushBuilder");
         loader.loadClass
             (basePackage +
             "AsyncContextImpl");
@@ -167,6 +170,7 @@ public final class SecurityClassLoad {
         // Make sure system property is read at this point
         Class<?> clazz = loader.loadClass(basePackage + "Constants");
         clazz.newInstance();
+        loader.loadClass(basePackage + "http2.Stream$1");
     }
 
 
@@ -230,6 +234,9 @@ public final class SecurityClassLoad {
         loader.loadClass
             (basePackage +
              "OutputBuffer$1");
+        loader.loadClass
+            (basePackage +
+             "OutputBuffer$2");
         loader.loadClass
             (basePackage +
              "CoyoteInputStream$1");
@@ -268,10 +275,17 @@ public final class SecurityClassLoad {
         loader.loadClass(basePackage + "util.buf.StringCache");
         loader.loadClass(basePackage + "util.buf.StringCache$ByteEntry");
         loader.loadClass(basePackage + "util.buf.StringCache$CharEntry");
+        // collections
+        loader.loadClass(basePackage + "util.collections.CaseInsensitiveKeyMap");
+        loader.loadClass(basePackage + "util.collections.CaseInsensitiveKeyMap$EntryImpl");
+        loader.loadClass(basePackage + "util.collections.CaseInsensitiveKeyMap$EntryIterator");
+        loader.loadClass(basePackage + "util.collections.CaseInsensitiveKeyMap$EntrySet");
+        loader.loadClass(basePackage + "util.collections.CaseInsensitiveKeyMap$Key");
         // http
+        loader.loadClass(basePackage + "util.http.CookieProcessor");
+        loader.loadClass(basePackage + "util.http.NamesEnumerator");
         // Make sure system property is read at this point
-        Class<?> clazz = loader.loadClass(
-                basePackage + "util.http.FastHttpDateFormat");
+        Class<?> clazz = loader.loadClass(basePackage + "util.http.FastHttpDateFormat");
         clazz.newInstance();
         loader.loadClass(basePackage + "util.http.parser.HttpParser");
         loader.loadClass(basePackage + "util.http.parser.MediaType");

==================================================
