491693d1ae2e4422bc2323d99509e9c15630c1d2
==================================================
Fix the remaining Java 8 Javadoc warnings for the Servlet API packages
==================================================
Mark Emlyn
==================================================
Tue Oct 14 08:28:57 2014 +0000
==================================================
HttpConstraintElement.java
Fix the remaining Java 8 Javadoc warnings for the Servlet API packages

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1631679 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ReadListener.java
index c7a4f93f14..82af497841 100644
--- a/java/javax/servlet/HttpConstraintElement.java
+++ b/java/javax/servlet/HttpConstraintElement.java
@@ -22,8 +22,10 @@ import javax.servlet.annotation.ServletSecurity.EmptyRoleSemantic;
 import javax.servlet.annotation.ServletSecurity.TransportGuarantee;
 
 /**
+ * Equivalent of {@link javax.servlet.annotation.HttpConstraint} for
+ * programmatic configuration of security constraints.
+ *
  * @since Servlet 3.0
- * TODO SERVLET3 - Add comments
  */
 public class HttpConstraintElement {
 
@@ -46,8 +48,11 @@ public class HttpConstraintElement {
     }
 
     /**
-     * Convenience constructor for {@link EmptyRoleSemantic#DENY}.
+     * Construct a constraint with an empty role semantic. Typically used with
+     * {@link EmptyRoleSemantic#DENY}.
      *
+     * @param emptyRoleSemantic The empty role semantic to apply to the newly
+     *                          created constraint
      */
     public HttpConstraintElement(EmptyRoleSemantic emptyRoleSemantic) {
         this.emptyRoleSemantic = emptyRoleSemantic;
@@ -56,7 +61,12 @@ public class HttpConstraintElement {
     }
 
     /**
-     * Convenience constructor to specify transport guarantee and/or roles.
+     * Construct a constraint with a transport guarantee and roles.
+     *
+     * @param transportGuarantee The transport guarantee to apply to the newly
+     *                           created constraint
+     * @param rolesAllowed       The roles to associate with the newly created
+     *                           constraint
      */
     public HttpConstraintElement(TransportGuarantee transportGuarantee,
             String... rolesAllowed) {
@@ -66,10 +76,15 @@ public class HttpConstraintElement {
     }
 
     /**
+     * Construct a constraint with an empty role semantic, a transport guarantee
+     * and roles.
      *
-     * @param emptyRoleSemantic
-     * @param transportGuarantee
-     * @param rolesAllowed
+     * @param emptyRoleSemantic The empty role semantic to apply to the newly
+     *                          created constraint
+     * @param transportGuarantee The transport guarantee to apply to the newly
+     *                           created constraint
+     * @param rolesAllowed       The roles to associate with the newly created
+     *                           constraint
      * @throws IllegalArgumentException if roles are specified when DENY is used
      */
     public HttpConstraintElement(EmptyRoleSemantic emptyRoleSemantic,
@@ -84,14 +99,26 @@ public class HttpConstraintElement {
         this.rolesAllowed = rolesAllowed;
     }
 
+    /**
+     * TODO
+     * @return TODO
+     */
     public EmptyRoleSemantic getEmptyRoleSemantic() {
         return emptyRoleSemantic;
     }
 
+    /**
+     * TODO
+     * @return TODO
+     */
     public TransportGuarantee getTransportGuarantee() {
         return transportGuarantee;
     }
 
+    /**
+     * TODO
+     * @return TODO
+     */
     public String[] getRolesAllowed() {
         return rolesAllowed;
     }

==================================================
Registration.java
index 1d51c6c9db..bb2ed18c3e 100644
--- a/java/javax/servlet/ReadListener.java
+++ b/java/javax/servlet/ReadListener.java
@@ -32,14 +32,14 @@ public interface ReadListener extends java.util.EventListener{
      * {@link ServletInputStream#isReady()} has returned false and data has
      * subsequently become available to read.
      *
-     * @throws IOException
+     * @throws IOException id an I/O error occurs while processing the event
      */
     public abstract void onDataAvailable() throws IOException;
 
     /**
      * Invoked when the request body has been fully read.
      *
-     * @throws IOException
+     * @throws IOException id an I/O error occurs while processing the event
      */
     public abstract void onAllDataRead() throws IOException;
 

==================================================
ServletContext.java
index fa9f4ec84d..3eebca5db5 100644
--- a/java/javax/servlet/Registration.java
+++ b/java/javax/servlet/Registration.java
@@ -20,7 +20,7 @@ import java.util.Map;
 import java.util.Set;
 
 /**
- * TODO SERVLET3 - Add comments
+ * Common interface for the registration of Filters and Servlets.
  * @since Servlet 3.0
  */
 public interface Registration {
@@ -30,34 +30,64 @@ public interface Registration {
     public String getClassName();
 
     /**
+     * Add an initialisation parameter if not already added.
      *
-     * @param name
-     * @param value
-     * @return TODO
-     * @throws IllegalArgumentException
-     * @throws IllegalStateException
+     * @param name  Name of initialisation parameter
+     * @param value Value of initialisation parameter
+     * @return <code>true</code> if the initialisation parameter was set,
+     *         <code>false</code> if the initialisation parameter was not set
+     *         because an initialisation parameter of the same name already
+     *         existed
+     * @throws IllegalArgumentException if name or value is <code>null</code>
+     * @throws IllegalStateException if the ServletContext associated with this
+     *         registration has already been initialised
      */
     public boolean setInitParameter(String name, String value);
 
+    /**
+     * Get the value of an initialisation parameter.
+     *
+     * @param name  The initialisation parameter whose value is required
+     *
+     * @return The value of the named initialisation parameter
+     */
     public String getInitParameter(String name);
 
     /**
+     * Add multiple initialisation parameters. If any of the supplied
+     * initialisation parameter conflicts with an existing initialisation
+     * parameter, no updates will be performed.
+     *
+     * @param initParameters The initialisation parameters to add
      *
-     * @param initParameters
-     * @return TODO
-     * @throws IllegalArgumentException
-     * @throws IllegalStateException
+     * @return The set of initialisation parameter names that conflicted with
+     *         existing initialisation parameter. If there are no conflicts,
+     *         this Set will be empty.
+     * @throws IllegalArgumentException if any of the supplied initialisation
+     *         parameters have a null name or value
+     * @throws IllegalStateException if the ServletContext associated with this
+     *         registration has already been initialised
      */
     public Set<String> setInitParameters(Map<String,String> initParameters);
 
+    /**
+     * Get the names and values of all the initialisation parameters.
+     *
+     * @return A Map of initialisation parameter names and associated values
+     *         keyed by name
+     */
     public Map<String, String> getInitParameters();
 
     public interface Dynamic extends Registration {
 
         /**
+         * Mark this Servlet/Filter as supported asynchronous processing.
+         *
+         * @param isAsyncSupported  Should this Servlet/Filter support
+         *                          asynchronous processing
          *
-         * @param isAsyncSupported
-         * @throws IllegalStateException
+         * @throws IllegalStateException if the ServletContext associated with
+         *         this registration has already been initialised
          */
         public void setAsyncSupported(boolean isAsyncSupported);
     }

==================================================
ServletContextAttributeEvent.java
index 208b96e232..62eeca2ed8 100644
--- a/java/javax/servlet/ServletContext.java
+++ b/java/javax/servlet/ServletContext.java
@@ -285,46 +285,54 @@ public interface ServletContext {
     public RequestDispatcher getNamedDispatcher(String name);
 
     /**
+     * Do not use. This method was originally defined to retrieve a servlet from
+     * a <code>ServletContext</code>. In this version, this method always
+     * returns <code>null</code> and remains only to preserve binary
+     * compatibility. This method will be permanently removed in a future
+     * version of the Java Servlet API.
+     * <p>
+     * In lieu of this method, servlets can share information using the
+     * <code>ServletContext</code> class and can perform shared business logic
+     * by invoking methods on common non-servlet classes.
+     *
+     * @param name Not used
+     *
+     * @return Always <code>null</code>
+     *
+     * @throws ServletException never
+     *
      * @deprecated As of Java Servlet API 2.1, with no direct replacement.
-     *             <p>
-     *             This method was originally defined to retrieve a servlet from
-     *             a <code>ServletContext</code>. In this version, this method
-     *             always returns <code>null</code> and remains only to preserve
-     *             binary compatibility. This method will be permanently removed
-     *             in a future version of the Java Servlet API.
-     *             <p>
-     *             In lieu of this method, servlets can share information using
-     *             the <code>ServletContext</code> class and can perform shared
-     *             business logic by invoking methods on common non-servlet
-     *             classes.
      */
     @SuppressWarnings("dep-ann")
     // Spec API does not use @Deprecated
     public Servlet getServlet(String name) throws ServletException;
 
     /**
+     * Do not use. This method was originally defined to return an
+     * <code>Enumeration</code> of all the servlets known to this servlet
+     * context. In this version, this method always returns an empty enumeration
+     * and remains only to preserve binary compatibility. This method will be
+     * permanently removed in a future version of the Java Servlet API.
+     *
+     * @return Always and empty Enumeration
+     *
      * @deprecated As of Java Servlet API 2.0, with no replacement.
-     *             <p>
-     *             This method was originally defined to return an
-     *             <code>Enumeration</code> of all the servlets known to this
-     *             servlet context. In this version, this method always returns
-     *             an empty enumeration and remains only to preserve binary
-     *             compatibility. This method will be permanently removed in a
-     *             future version of the Java Servlet API.
      */
     @SuppressWarnings("dep-ann")
     // Spec API does not use @Deprecated
     public Enumeration<Servlet> getServlets();
 
     /**
+     * Do not use. This method was originally defined to return an
+     * <code>Enumeration</code> of all the servlet names known to this context.
+     * In this version, this method always returns an empty
+     * <code>Enumeration</code> and remains only to preserve binary
+     * compatibility. This method will be permanently removed in a future
+     * version of the Java Servlet API.
+     *
+     * @return Always and empty Enumeration
+     *
      * @deprecated As of Java Servlet API 2.1, with no replacement.
-     *             <p>
-     *             This method was originally defined to return an
-     *             <code>Enumeration</code> of all the servlet names known to
-     *             this context. In this version, this method always returns an
-     *             empty <code>Enumeration</code> and remains only to preserve
-     *             binary compatibility. This method will be permanently removed
-     *             in a future version of the Java Servlet API.
      */
     @SuppressWarnings("dep-ann")
     // Spec API does not use @Deprecated
@@ -342,6 +350,9 @@ public interface ServletContext {
     public void log(String msg);
 
     /**
+     * Do not use.
+     * @param exception The exception to log
+     * @param msg       The message to log with the exception
      * @deprecated As of Java Servlet API 2.1, use
      *             {@link #log(String message, Throwable throwable)} instead.
      *             <p>
@@ -572,8 +583,9 @@ public interface ServletContext {
             Servlet servlet);
 
     /**
-     * @param servletName
-     * @param servletClass
+     * TODO SERVLET3 - Add comments
+     * @param servletName  TODO
+     * @param servletClass TODO
      * @return TODO
      * @throws IllegalStateException
      *             If the context has already been initialised
@@ -584,15 +596,17 @@ public interface ServletContext {
      *    {@link javax.servlet.annotation.WebListener}. For example, a
      *    {@link ServletContextListener} defined in a TLD would not be able to
      *    use this method.
-     * @since Servlet 3.0 TODO SERVLET3 - Add comments
+     * @since Servlet 3.0
      */
     public ServletRegistration.Dynamic addServlet(String servletName,
             Class<? extends Servlet> servletClass);
 
     /**
-     * @param c
+     * TODO SERVLET3 - Add comments
+     * @param <T> TODO
+     * @param c   TODO
      * @return TODO
-     * @throws ServletException
+     * @throws ServletException TODO
      * @throws UnsupportedOperationException    If called from a
      *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
      *    method of a {@link ServletContextListener} that was not defined in a
@@ -600,7 +614,7 @@ public interface ServletContext {
      *    {@link javax.servlet.annotation.WebListener}. For example, a
      *    {@link ServletContextListener} defined in a TLD would not be able to
      *    use this method.
-     * @since Servlet 3.0 TODO SERVLET3 - Add comments
+     * @since Servlet 3.0
      */
     public <T extends Servlet> T createServlet(Class<T> c)
             throws ServletException;
@@ -627,6 +641,7 @@ public interface ServletContext {
     public ServletRegistration getServletRegistration(String servletName);
 
     /**
+     * TODO SERVLET3 - Add comments
      * @return TODO
      * @throws UnsupportedOperationException    If called from a
      *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
@@ -635,13 +650,14 @@ public interface ServletContext {
      *    {@link javax.servlet.annotation.WebListener}. For example, a
      *    {@link ServletContextListener} defined in a TLD would not be able to
      *    use this method.
-     * @since Servlet 3.0 TODO SERVLET3 - Add comments
+     * @since Servlet 3.0
      */
     public Map<String, ? extends ServletRegistration> getServletRegistrations();
 
     /**
-     * @param filterName
-     * @param className
+     * TODO SERVLET3 - Add comments
+     * @param filterName TODO
+     * @param className  TODO
      * @return TODO
      * @throws UnsupportedOperationException    If called from a
      *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
@@ -652,14 +668,15 @@ public interface ServletContext {
      *    use this method.
      * @throws IllegalStateException
      *             If the context has already been initialised
-     * @since Servlet 3.0 TODO SERVLET3 - Add comments
+     * @since Servlet 3.0
      */
     public FilterRegistration.Dynamic addFilter(String filterName,
             String className);
 
     /**
-     * @param filterName
-     * @param filter
+     * TODO SERVLET3 - Add comments
+     * @param filterName TODO
+     * @param filter     TODO
      * @return TODO
      * @throws UnsupportedOperationException    If called from a
      *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
@@ -670,13 +687,14 @@ public interface ServletContext {
      *    use this method.
      * @throws IllegalStateException
      *             If the context has already been initialised
-     * @since Servlet 3.0 TODO SERVLET3 - Add comments
+     * @since Servlet 3.0
      */
     public FilterRegistration.Dynamic addFilter(String filterName, Filter filter);
 
     /**
-     * @param filterName
-     * @param filterClass
+     * TODO SERVLET3 - Add comments
+     * @param filterName  TODO
+     * @param filterClass TODO
      * @return TODO
      * @throws UnsupportedOperationException    If called from a
      *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
@@ -687,13 +705,15 @@ public interface ServletContext {
      *    use this method.
      * @throws IllegalStateException
      *             If the context has already been initialised
-     * @since Servlet 3.0 TODO SERVLET3 - Add comments
+     * @since Servlet 3.0
      */
     public FilterRegistration.Dynamic addFilter(String filterName,
             Class<? extends Filter> filterClass);
 
     /**
-     * @param c
+     * TODO SERVLET3 - Add comments
+     * @param <T> TODO
+     * @param c   TODO
      * @return TODO
      * @throws UnsupportedOperationException    If called from a
      *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
@@ -702,14 +722,15 @@ public interface ServletContext {
      *    {@link javax.servlet.annotation.WebListener}. For example, a
      *    {@link ServletContextListener} defined in a TLD would not be able to
      *    use this method.
-     * @throws ServletException
-     * @since Servlet 3.0 TODO SERVLET3 - Add comments
+     * @throws ServletException TODO
+     * @since Servlet 3.
      */
     public <T extends Filter> T createFilter(Class<T> c)
             throws ServletException;
 
     /**
-     * @param filterName
+     * TODO SERVLET3 - Add comments
+     * @param filterName TODO
      * @return TODO
      * @throws UnsupportedOperationException    If called from a
      *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
@@ -718,7 +739,7 @@ public interface ServletContext {
      *    {@link javax.servlet.annotation.WebListener}. For example, a
      *    {@link ServletContextListener} defined in a TLD would not be able to
      *    use this method.
-     * @since Servlet 3.0 TODO SERVLET3 - Add comments
+     * @since Servlet 3.0
      */
     public FilterRegistration getFilterRegistration(String filterName);
 
@@ -749,7 +770,8 @@ public interface ServletContext {
     public SessionCookieConfig getSessionCookieConfig();
 
     /**
-     * @param sessionTrackingModes
+     * TODO SERVLET3 - Add comments
+     * @param sessionTrackingModes TODO
      * @throws IllegalArgumentException
      *             If sessionTrackingModes specifies
      *             {@link SessionTrackingMode#SSL} in combination with any other
@@ -763,12 +785,13 @@ public interface ServletContext {
      *    {@link javax.servlet.annotation.WebListener}. For example, a
      *    {@link ServletContextListener} defined in a TLD would not be able to
      *    use this method.
-     * @since Servlet 3.0 TODO SERVLET3 - Add comments
+     * @since Servlet 3.0
      */
     public void setSessionTrackingModes(
             Set<SessionTrackingMode> sessionTrackingModes);
 
     /**
+     * TODO SERVLET3 - Add comments
      * @return TODO
      * @throws UnsupportedOperationException    If called from a
      *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
@@ -777,11 +800,12 @@ public interface ServletContext {
      *    {@link javax.servlet.annotation.WebListener}. For example, a
      *    {@link ServletContextListener} defined in a TLD would not be able to
      *    use this method.
-     * @since Servlet 3.0 TODO SERVLET3 - Add comments
+     * @since Servlet 3.0
      */
     public Set<SessionTrackingMode> getDefaultSessionTrackingModes();
 
     /**
+     * TODO SERVLET3 - Add comments
      * @return TODO
      * @throws UnsupportedOperationException    If called from a
      *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
@@ -790,12 +814,13 @@ public interface ServletContext {
      *    {@link javax.servlet.annotation.WebListener}. For example, a
      *    {@link ServletContextListener} defined in a TLD would not be able to
      *    use this method.
-     * @since Servlet 3.0 TODO SERVLET3 - Add comments
+     * @since Servlet 3.0
      */
     public Set<SessionTrackingMode> getEffectiveSessionTrackingModes();
 
     /**
-     * @param className
+     * TODO SERVLET3 - Add comments
+     * @param className TODO
      * @throws UnsupportedOperationException    If called from a
      *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
      *    method of a {@link ServletContextListener} that was not defined in a
@@ -803,13 +828,14 @@ public interface ServletContext {
      *    {@link javax.servlet.annotation.WebListener}. For example, a
      *    {@link ServletContextListener} defined in a TLD would not be able to
      *    use this method.
-     * @since Servlet 3.0 TODO SERVLET3 - Add comments
+     * @since Servlet 3.0
      */
     public void addListener(String className);
 
     /**
-     * @param <T>
-     * @param t
+     * TODO SERVLET3 - Add comments
+     * @param <T> TODO
+     * @param t   TODO
      * @throws UnsupportedOperationException    If called from a
      *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
      *    method of a {@link ServletContextListener} that was not defined in a
@@ -817,12 +843,13 @@ public interface ServletContext {
      *    {@link javax.servlet.annotation.WebListener}. For example, a
      *    {@link ServletContextListener} defined in a TLD would not be able to
      *    use this method.
-     * @since Servlet 3.0 TODO SERVLET3 - Add comments
+     * @since Servlet 3.0
      */
     public <T extends EventListener> void addListener(T t);
 
     /**
-     * @param listenerClass
+     * TODO SERVLET3 - Add comments
+     * @param listenerClass TODO
      * @throws UnsupportedOperationException    If called from a
      *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
      *    method of a {@link ServletContextListener} that was not defined in a
@@ -830,15 +857,16 @@ public interface ServletContext {
      *    {@link javax.servlet.annotation.WebListener}. For example, a
      *    {@link ServletContextListener} defined in a TLD would not be able to
      *    use this method.
-     * @since Servlet 3.0 TODO SERVLET3 - Add comments
+     * @since Servlet 3.0
      */
     public void addListener(Class<? extends EventListener> listenerClass);
 
     /**
-     * @param <T>
-     * @param c
+     * TODO SERVLET3 - Add comments
+     * @param <T> TODO
+     * @param c TODO
      * @return TODO
-     * @throws ServletException
+     * @throws ServletException TODO
      * @throws UnsupportedOperationException    If called from a
      *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
      *    method of a {@link ServletContextListener} that was not defined in a
@@ -846,7 +874,7 @@ public interface ServletContext {
      *    {@link javax.servlet.annotation.WebListener}. For example, a
      *    {@link ServletContextListener} defined in a TLD would not be able to
      *    use this method.
-     * @since Servlet 3.0 TODO SERVLET3 - Add comments
+     * @since Servlet 3.0
      */
     public <T extends EventListener> T createListener(Class<T> c)
             throws ServletException;
@@ -865,7 +893,10 @@ public interface ServletContext {
     public JspConfigDescriptor getJspConfigDescriptor();
 
     /**
-     * @return TODO
+     * Get the web application class loader associated with this ServletContext.
+     *
+     * @return The associated web application class loader
+     *
      * @throws UnsupportedOperationException    If called from a
      *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
      *    method of a {@link ServletContextListener} that was not defined in a
@@ -873,13 +904,15 @@ public interface ServletContext {
      *    {@link javax.servlet.annotation.WebListener}. For example, a
      *    {@link ServletContextListener} defined in a TLD would not be able to
      *    use this method.
-     * @throws SecurityException
-     * @since Servlet 3.0 TODO SERVLET3 - Add comments
+     * @throws SecurityException if access to the class loader is prevented by a
+     *         SecurityManager
+     * @since Servlet 3.0
      */
     public ClassLoader getClassLoader();
 
     /**
-     * @param roleNames
+     * Add to the declared roles for this ServletContext.
+     * @param roleNames The roles to add
      * @throws UnsupportedOperationException    If called from a
      *    {@link ServletContextListener#contextInitialized(ServletContextEvent)}
      *    method of a {@link ServletContextListener} that was not defined in a
@@ -887,15 +920,20 @@ public interface ServletContext {
      *    {@link javax.servlet.annotation.WebListener}. For example, a
      *    {@link ServletContextListener} defined in a TLD would not be able to
      *    use this method.
-     * @throws IllegalArgumentException
-     * @throws IllegalStateException
-     * @since Servlet 3.0 TODO SERVLET3 - Add comments
+     * @throws IllegalArgumentException If the list of roleNames is null or
+     *         empty
+     * @throws IllegalStateException If the ServletContext has already been
+     *         initialised
+     * @since Servlet 3.0
      */
     public void declareRoles(String... roleNames);
 
     /**
-     * Returns the primary name of the virtual host on which this context is
+     * Get the primary name of the virtual host on which this context is
      * deployed. The name may or may not be a valid host name.
+     *
+     * @return The primary name of the virtual host on which this context is
+     *         deployed
      */
     public String getVirtualServerName();
 }

==================================================
ServletRequestWrapper.java
index b1bf727afd..9373b819da 100644
--- a/java/javax/servlet/ServletContextAttributeEvent.java
+++ b/java/javax/servlet/ServletContextAttributeEvent.java
@@ -32,6 +32,10 @@ public class ServletContextAttributeEvent extends ServletContextEvent {
     /**
      * Construct a ServletContextAttributeEvent from the given context for the
      * given attribute name and attribute value.
+     *
+     * @param source The ServletContext associated with this attribute event
+     * @param name   The name of the servlet context attribute
+     * @param value  The value of the servlet context attribute
      */
     public ServletContextAttributeEvent(ServletContext source, String name,
             Object value) {
@@ -42,6 +46,8 @@ public class ServletContextAttributeEvent extends ServletContextEvent {
 
     /**
      * Return the name of the attribute that changed on the ServletContext.
+     *
+     * @return The name of the attribute that changed
      */
     public String getName() {
         return this.name;
@@ -49,9 +55,12 @@ public class ServletContextAttributeEvent extends ServletContextEvent {
 
     /**
      * Returns the value of the attribute that has been added, removed, or
-     * replaced. If the attribute was added, this is the value of the attribute.
-     * If the attribute was removed, this is the value of the removed attribute.
-     * If the attribute was replaced, this is the old value of the attribute.
+     * replaced.
+     *
+     * @return If the attribute was added, this is the value of the attribute.
+     *         If the attribute was removed, this is the value of the removed
+     *         attribute. If the attribute was replaced, this is the old value
+     *         of the attribute.
      */
     public Object getValue() {
         return this.value;

==================================================
ServletResponse.java
index f2fc028ab3..32cee2f6d5 100644
--- a/java/javax/servlet/ServletRequestWrapper.java
+++ b/java/javax/servlet/ServletRequestWrapper.java
@@ -37,6 +37,8 @@ public class ServletRequestWrapper implements ServletRequest {
     /**
      * Creates a ServletRequest adaptor wrapping the given request object.
      *
+     * @param request The request to wrap
+     *
      * @throws IllegalArgumentException if the request is null
      */
     public ServletRequestWrapper(ServletRequest request) {

==================================================
ServletResponseWrapper.java
index f96e24e721..2dfe95ff59 100644
--- a/java/javax/servlet/ServletResponse.java
+++ b/java/javax/servlet/ServletResponse.java
@@ -173,7 +173,12 @@ public interface ServletResponse {
     public void setContentLength(int len);
 
     /**
-     * TODO SERVLET 3.1
+     * Sets the length of the content body in the response In HTTP servlets,
+     * this method sets the HTTP Content-Length header.
+     *
+     * @param length
+     *            an integer specifying the length of the content being returned
+     *            to the client; sets the Content-Length header
      */
     public void setContentLengthLong(long length);
 
@@ -247,6 +252,8 @@ public interface ServletResponse {
      * this method automatically commits the response, meaning the status code
      * and headers will be written.
      *
+     * @throws IOException if an I/O occurs during the flushing of the response
+     *
      * @see #setBufferSize
      * @see #getBufferSize
      * @see #isCommitted
@@ -332,8 +339,11 @@ public interface ServletResponse {
     /**
      * Returns the locale specified for this response using the
      * {@link #setLocale} method. Calls made to <code>setLocale</code> after the
-     * response is committed have no effect. If no locale has been specified,
-     * the container's default locale is returned.
+     * response is committed have no effect.
+     *
+     * @return The locale specified for this response using the
+     *          {@link #setLocale} method. If no locale has been specified, the
+     *          container's default locale is returned.
      *
      * @see #setLocale
      */

==================================================
ServletSecurityElement.java
index 9b440ddfd0..3b244fd556 100644
--- a/java/javax/servlet/ServletResponseWrapper.java
+++ b/java/javax/servlet/ServletResponseWrapper.java
@@ -35,6 +35,8 @@ public class ServletResponseWrapper implements ServletResponse {
     /**
      * Creates a ServletResponse adaptor wrapping the given response object.
      *
+     * @param response The response to wrap
+     *
      * @throws java.lang.IllegalArgumentException
      *             if the response is null.
      */
@@ -47,6 +49,8 @@ public class ServletResponseWrapper implements ServletResponse {
 
     /**
      * Return the wrapped ServletResponse object.
+     *
+     * @return The wrapped ServletResponse object.
      */
     public ServletResponse getResponse() {
         return this.response;
@@ -55,6 +59,8 @@ public class ServletResponseWrapper implements ServletResponse {
     /**
      * Sets the response being wrapped.
      *
+     * @param response The new response to wrap
+     *
      * @throws java.lang.IllegalArgumentException
      *             if the response is null.
      */
@@ -214,8 +220,12 @@ public class ServletResponseWrapper implements ServletResponse {
     }
 
     /**
-     * @param wrapped
-     * @since Servlet 3.0 TODO SERVLET3 - Add comments
+     * TODO SERVLET3 - Add comments
+     * @param wrapped The response to compare to the wrapped response
+     * @return <code>true</code> if the response wrapped by this wrapper (or
+     *         series of wrappers) is the same as the supplied response,
+     *         otherwise <code>false</code>
+     * @since Servlet 3.0
      */
     public boolean isWrapperFor(ServletResponse wrapped) {
         if (response == wrapped) {
@@ -228,8 +238,13 @@ public class ServletResponseWrapper implements ServletResponse {
     }
 
     /**
-     * @param wrappedType
-     * @since Servlet 3.0 TODO SERVLET3 - Add comments
+     * TODO SERVLET3 - Add comments
+     * @param wrappedType The class to compare to the class of the wrapped
+     *                    response
+     * @return <code>true</code> if the response wrapped by this wrapper (or
+     *         series of wrappers) is the same type as the supplied type,
+     *         otherwise <code>false</code>
+     * @since Servlet 3.0
      */
     public boolean isWrapperFor(Class<?> wrappedType) {
         if (wrappedType.isAssignableFrom(response.getClass())) {

==================================================
SessionCookieConfig.java
index cf2832f063..199779eb07 100644
--- a/java/javax/servlet/ServletSecurityElement.java
+++ b/java/javax/servlet/ServletSecurityElement.java
@@ -45,7 +45,7 @@ public class ServletSecurityElement extends HttpConstraintElement {
 
     /**
      * Use specified HttpConstraintElement.
-     * @param httpConstraintElement
+     * @param httpConstraintElement The constraint
      */
     public ServletSecurityElement(HttpConstraintElement httpConstraintElement) {
         this (httpConstraintElement, null);
@@ -54,7 +54,7 @@ public class ServletSecurityElement extends HttpConstraintElement {
     /**
      * Use specific constraints for specified methods and default
      * HttpConstraintElement for all other methods.
-     * @param httpMethodConstraints
+     * @param httpMethodConstraints Method constraints
      * @throws IllegalArgumentException if a method name is specified more than
      * once
      */
@@ -68,8 +68,8 @@ public class ServletSecurityElement extends HttpConstraintElement {
     /**
      * Use specified HttpConstraintElement as default and specific constraints
      * for specified methods.
-     * @param httpConstraintElement
-     * @param httpMethodConstraints
+     * @param httpConstraintElement Default constraint
+     * @param httpMethodConstraints Method constraints
      * @throws IllegalArgumentException if a method name is specified more than
      */
     public ServletSecurityElement(HttpConstraintElement httpConstraintElement,
@@ -82,7 +82,7 @@ public class ServletSecurityElement extends HttpConstraintElement {
 
     /**
      * Create from an annotation.
-     * @param annotation
+     * @param annotation Annotation to use as the basis for the new instance
      * @throws IllegalArgumentException if a method name is specified more than
      */
     public ServletSecurityElement(ServletSecurity annotation) {

==================================================
WriteListener.java
index 11567c0d4f..564a4edfb4 100644
--- a/java/javax/servlet/SessionCookieConfig.java
+++ b/java/javax/servlet/SessionCookieConfig.java
@@ -17,61 +17,80 @@
 package javax.servlet;
 
 /**
+ * Configures the session cookies used by the web application associated with
+ * the ServletContext from which this SessionCookieConfig was obtained.
  *
- * TODO SERVLET3 - Add comments
  * @since Servlet 3.0
  */
 public interface SessionCookieConfig {
 
     /**
+     * Sets the session cookie name.
      *
-     * @param name
-     * @throws IllegalStateException
+     * @param name The name of the session cookie
+     *
+     * @throws IllegalStateException if the associated ServletContext has
+     *         already been initialised
      */
     public void setName(String name);
 
     public String getName();
 
     /**
+     * Sets the domain for the session cookie
+     *
+     * @param domain The session cookie domain
      *
-     * @param domain
-     * @throws IllegalStateException
+     * @throws IllegalStateException if the associated ServletContext has
+     *         already been initialised
      */
     public void setDomain(String domain);
 
     public String getDomain();
 
     /**
+     * Sets the path of the session cookie.
+     *
+     * @param path The session cookie path
      *
-     * @param path
-     * @throws IllegalStateException
+     * @throws IllegalStateException if the associated ServletContext has
+     *         already been initialised
      */
     public void setPath(String path);
 
     public String getPath();
 
     /**
+     * Sets the comment for the session cookie
      *
-     * @param comment
-     * @throws IllegalStateException
+     * @param comment The session cookie comment
+     *
+     * @throws IllegalStateException if the associated ServletContext has
+     *         already been initialised
      */
     public void setComment(String comment);
 
     public String getComment();
 
     /**
+     * Sets the httpOnly flag for the session cookie.
+     *
+     * @param httpOnly The httpOnly setting to use for session cookies
      *
-     * @param httpOnly
-     * @throws IllegalStateException
+     * @throws IllegalStateException if the associated ServletContext has
+     *         already been initialised
      */
     public void setHttpOnly(boolean httpOnly);
 
     public boolean isHttpOnly();
 
     /**
+     * Sets the secure flag for the session cookie.
+     *
+     * @param secure The secure setting to use for session cookies
      *
-     * @param secure
-     * @throws IllegalStateException
+     * @throws IllegalStateException if the associated ServletContext has
+     *         already been initialised
      */
     public void setSecure(boolean secure);
 
@@ -81,7 +100,8 @@ public interface SessionCookieConfig {
      * Sets the maximum age.
      *
      * @param MaxAge the maximum age to set
-     * @throws IllegalStateException
+     * @throws IllegalStateException if the associated ServletContext has
+     *         already been initialised
      */
     public void setMaxAge(int MaxAge);
 

==================================================
HttpServletRequest.java
index 488111f1d3..2ce42ee5e4 100644
--- a/java/javax/servlet/WriteListener.java
+++ b/java/javax/servlet/WriteListener.java
@@ -32,14 +32,14 @@ public interface WriteListener extends java.util.EventListener{
      * {@link ServletOutputStream#isReady()} has returned false and it has since
      * become possible to write data.
      *
-     * @throws IOException
+     * @throws IOException if an I/O error occurs while processing this event
      */
     public void onWritePossible() throws IOException;
 
     /**
      * Invoked if an error occurs while writing the response.
      *
-     * @param throwable
+     * @param throwable The throwable that represents the error that occurred
      */
     public void onError(java.lang.Throwable throwable);
 }
\ No newline at end of file

==================================================
HttpServletRequestWrapper.java
index 3c1f6a14df..1314645fdc 100644
--- a/java/javax/servlet/http/HttpServletRequest.java
+++ b/java/javax/servlet/http/HttpServletRequest.java
@@ -423,6 +423,7 @@ public interface HttpServletRequest extends ServletRequest {
     public boolean isRequestedSessionIdFromURL();
 
     /**
+     * @return {@link #isRequestedSessionIdFromURL()}
      * @deprecated As of Version 2.1 of the Java Servlet API, use
      *             {@link #isRequestedSessionIdFromURL} instead.
      */
@@ -439,6 +440,12 @@ public interface HttpServletRequest extends ServletRequest {
      * @return <code>true</code> if the user is successfully authenticated and
      *         <code>false</code> if not
      *
+     * @throws IOException if the authentication process attempted to read from
+     *         the request or write to the response and an I/O error occurred
+     * @throws IllegalStateException if the authentication process attempted to
+     *         write to the response after it had been committed
+     * @throws ServletException if the authentication failed and the caller is
+     *         expected to handle the failure
      * @since Servlet 3.0
      */
     public boolean authenticate(HttpServletResponse response)
@@ -490,7 +497,8 @@ public interface HttpServletRequest extends ServletRequest {
      * Gets the named Part or null if the Part does not exist. Triggers upload
      * of all Parts.
      *
-     * @param name
+     * @param name The name of the Part to obtain
+     *
      * @return The named Part or null if the Part does not exist
      * @throws IOException
      *             if an I/O error occurs
@@ -511,6 +519,12 @@ public interface HttpServletRequest extends ServletRequest {
      * Protocol specific headers must have already been set before this method
      * is called.
      *
+     * @param <T>                     The type of the upgrade handler
+     * @param httpUpgradeHandlerClass The class that implements the upgrade
+     *                                handler
+     *
+     * @return A newly created instance of the specified upgrade handler type
+     *
      * @throws IOException
      *             if an I/O error occurred during the upgrade
      * @throws ServletException

==================================================
HttpServletResponse.java
index a72a244047..5ddb5ac005 100644
--- a/java/javax/servlet/http/HttpServletRequestWrapper.java
+++ b/java/javax/servlet/http/HttpServletRequestWrapper.java
@@ -38,6 +38,8 @@ public class HttpServletRequestWrapper extends ServletRequestWrapper implements
     /**
      * Constructs a request object wrapping the given request.
      *
+     * @param request The request to wrap
+     *
      * @throws java.lang.IllegalArgumentException
      *             if the request is null
      */

==================================================
HttpServletResponseWrapper.java
index c5c6f82457..0d48e7f30a 100644
--- a/java/javax/servlet/http/HttpServletResponse.java
+++ b/java/javax/servlet/http/HttpServletResponse.java
@@ -296,7 +296,9 @@ public interface HttpServletResponse extends ServletResponse {
     public void setStatus(int sc, String sm);
 
     /**
-     * Return the HTTP status code associated with this Response.
+     * Get the HTTP status code for this Response.
+     *
+     * @return The HTTP status code for this Response
      *
      * @since Servlet 3.0
      */
@@ -310,6 +312,10 @@ public interface HttpServletResponse extends ServletResponse {
      *
      * @param name Header name to look up
      *
+     * @return The first value for the specified header. This is the raw value
+     *         so if multiple values are specified in the first header then they
+     *         will be returned as a single header value .
+     *
      * @since Servlet 3.0
      */
     public String getHeader(String name);
@@ -320,12 +326,18 @@ public interface HttpServletResponse extends ServletResponse {
      *
      * @param name Header name to look up
      *
+     * @return The values for the specified header. These are the raw values so
+     *         if multiple values are specified in a single header that will be
+     *         returned as a single header value.
+     *
      * @since Servlet 3.0
      */
     public Collection<String> getHeaders(String name);
 
     /**
-     * Return an Iterable of all the header names set for this response.
+     * Get the header names set for this HTTP response.
+     *
+     * @return The header names set for this HTTP response.
      *
      * @since Servlet 3.0
      */

==================================================
HttpSession.java
index aafc95fbd3..dfb2a7cdb1 100644
--- a/java/javax/servlet/http/HttpServletResponseWrapper.java
+++ b/java/javax/servlet/http/HttpServletResponseWrapper.java
@@ -36,6 +36,8 @@ public class HttpServletResponseWrapper extends ServletResponseWrapper
     /**
      * Constructs a response adaptor wrapping the given response.
      *
+     * @param response The response to be wrapped
+     *
      * @throws java.lang.IllegalArgumentException
      *             if the response is null
      */

==================================================
HttpSessionActivationListener.java
index d15b97c179..2a731f5e10 100644
--- a/java/javax/servlet/http/HttpSession.java
+++ b/java/javax/servlet/http/HttpSession.java
@@ -135,6 +135,8 @@ public interface HttpSession {
     public int getMaxInactiveInterval();
 
     /**
+     * Do not use.
+     * @return A dummy implementation of HttpSessionContext
      * @deprecated As of Version 2.1, this method is deprecated and has no
      *             replacement. It will be removed in a future version of the
      *             Java Servlet API.

==================================================
HttpSessionAttributeListener.java
index eace111e74..6caa070bf3 100644
--- a/java/javax/servlet/http/HttpSessionActivationListener.java
+++ b/java/javax/servlet/http/HttpSessionActivationListener.java
@@ -18,20 +18,29 @@ package javax.servlet.http;
 
 import java.util.EventListener;
 
-    /** Objects that are bound to a session may listen to container
-    ** events notifying them that sessions will be passivated and that
-    ** session will be activated. A container that migrates session between VMs
-    ** or persists sessions is required to notify all attributes bound to sessions
-    ** implementing HttpSessionActivationListener.
-    **
-    * @since 2.3
-    */
-
+/**
+ * Objects that are bound to a session may listen to container events notifying
+ * them that sessions will be passivated and that session will be activated. A
+ * container that migrates session between VMs or persists sessions is required
+ * to notify all attributes bound to sessions implementing
+ * HttpSessionActivationListener.
+ *
+ * @since 2.3
+ */
 public interface HttpSessionActivationListener extends EventListener {
 
-    /** Notification that the session is about to be passivated.*/
+    /**
+     * Notification that the session is about to be passivated.
+     *
+     * @param se Information about the session this is about to be passivated
+     */
     public void sessionWillPassivate(HttpSessionEvent se);
-    /** Notification that the session has just been activated.*/
+
+    /**
+     * Notification that the session has just been activated.
+     *
+     * @param se Information about the session this has just been activated
+     */
     public void sessionDidActivate(HttpSessionEvent se);
 }
 

==================================================
HttpSessionBindingEvent.java
index 0c8f9caa6a..a44dd0de58 100644
--- a/java/javax/servlet/http/HttpSessionAttributeListener.java
+++ b/java/javax/servlet/http/HttpSessionAttributeListener.java
@@ -29,18 +29,24 @@ public interface HttpSessionAttributeListener extends EventListener {
     /**
      * Notification that an attribute has been added to a session. Called after
      * the attribute is added.
+     *
+     * @param se Information about the added attribute
      */
     public void attributeAdded(HttpSessionBindingEvent se);
 
     /**
      * Notification that an attribute has been removed from a session. Called
      * after the attribute is removed.
+     *
+     * @param se Information about the removed attribute
      */
     public void attributeRemoved(HttpSessionBindingEvent se);
 
     /**
      * Notification that an attribute has been replaced in a session. Called
      * after the attribute is replaced.
+     *
+     * @param se Information about the replaced attribute
      */
     public void attributeReplaced(HttpSessionBindingEvent se);
 }

==================================================
HttpSessionContext.java
index a921719afc..91e5167b45 100644
--- a/java/javax/servlet/http/HttpSessionBindingEvent.java
+++ b/java/javax/servlet/http/HttpSessionBindingEvent.java
@@ -51,8 +51,8 @@ public class HttpSessionBindingEvent extends HttpSessionEvent {
      *            the session to which the object is bound or unbound
      * @param name
      *            the name with which the object is bound or unbound
-     * @see #getName
-     * @see #getSession
+     * @see #getName()
+     * @see #getSession()
      */
     public HttpSessionBindingEvent(HttpSession session, String name) {
         super(session);
@@ -69,8 +69,11 @@ public class HttpSessionBindingEvent extends HttpSessionEvent {
      *            the session to which the object is bound or unbound
      * @param name
      *            the name with which the object is bound or unbound
-     * @see #getName
-     * @see #getSession
+     * @param value
+     *            the object that is bound or unbound
+     * @see #getName()
+     * @see #getSession()
+     * @see #getValue()
      */
     public HttpSessionBindingEvent(HttpSession session, String name,
             Object value) {
@@ -79,7 +82,10 @@ public class HttpSessionBindingEvent extends HttpSessionEvent {
         this.value = value;
     }
 
-    /** Return the session that changed. */
+    /**
+     * Get the session that changed.
+     * @return The session that changed
+     */
     @Override
     public HttpSession getSession() {
         return super.getSession();
@@ -98,10 +104,12 @@ public class HttpSessionBindingEvent extends HttpSessionEvent {
 
     /**
      * Returns the value of the attribute that has been added, removed or
-     * replaced. If the attribute was added (or bound), this is the value of the
-     * attribute. If the attribute was removed (or unbound), this is the value
-     * of the removed attribute. If the attribute was replaced, this is the old
-     * value of the attribute.
+     * replaced.
+     *
+     * @return If the attribute was added (or bound), this is the value of the
+     *         attribute. If the attribute was removed (or unbound), this is the
+     *         value of the removed attribute. If the attribute was replaced,
+     *         this is the old value of the attribute.
      *
      * @since 2.3
      */

==================================================
HttpSessionEvent.java
index 2a7e18b127..f1bab21e25 100644
--- a/java/javax/servlet/http/HttpSessionContext.java
+++ b/java/javax/servlet/http/HttpSessionContext.java
@@ -20,6 +20,7 @@ package javax.servlet.http;
 import java.util.Enumeration;
 
 /**
+ * Do not use.
  * @deprecated As of Java(tm) Servlet API 2.1 for security reasons, with no
  *             replacement. This interface will be removed in a future version
  *             of this API.
@@ -32,6 +33,9 @@ import java.util.Enumeration;
 public interface HttpSessionContext {
 
     /**
+     * Do not use.
+     * @param sessionId Ignored
+     * @return Always <code>null</code>
      * @deprecated As of Java Servlet API 2.1 with no replacement. This method
      *             must return null and will be removed in a future version of
      *             this API.
@@ -40,6 +44,8 @@ public interface HttpSessionContext {
     public HttpSession getSession(String sessionId);
 
     /**
+     * Do not use.
+     * @return Always an empty Enumeration
      * @deprecated As of Java Servlet API 2.1 with no replacement. This method
      *             must return an empty <code>Enumeration</code> and will be
      *             removed in a future version of this API.

==================================================
Part.java
index ef83877ffd..3a6ffcfd13 100644
--- a/java/javax/servlet/http/HttpSessionEvent.java
+++ b/java/javax/servlet/http/HttpSessionEvent.java
@@ -25,12 +25,20 @@ package javax.servlet.http;
 public class HttpSessionEvent extends java.util.EventObject {
     private static final long serialVersionUID = 1L;
 
-    /** Construct a session event from the given source. */
+    /**
+     * Construct a session event from the given source.
+     *
+     * @param source    The HTTP session where the change took place
+     */
     public HttpSessionEvent(HttpSession source) {
         super(source);
     }
 
-    /** Return the session that changed. */
+    /**
+     * Get the session that changed.
+     *
+     * @return The session that changed
+     */
     public HttpSession getSession() {
         return (HttpSession) super.getSource();
     }

==================================================
WebConnection.java
index 6d08de4d0a..5326054c9a 100644
--- a/java/javax/servlet/http/Part.java
+++ b/java/javax/servlet/http/Part.java
@@ -32,18 +32,27 @@ public interface Part {
     /**
      * Obtain an <code>InputStream</code> that can be used to retrieve the
      * contents of the file.
+     *
+     * @return An InputStream for the contents of the file
+     *
+     * @throws IOException if an I/O occurs while obtaining the stream
      */
     public InputStream getInputStream() throws IOException;
 
     /**
-     * Obtain the content type passed by the browser or <code>null</code> if not
-     * defined.
+     * Obtain the content type passed by the browser.
+     *
+     * @return The content type passed by the browser or <code>null</code> if
+     *         not defined.
      */
     public String getContentType();
 
     /**
      * Obtain the name of the field in the multipart form corresponding to this
      * part.
+     *
+     * @return The name of the field in the multipart form corresponding to this
+     *         part.
      */
     public String getName();
 
@@ -60,6 +69,8 @@ public interface Part {
 
     /**
      * Obtain the size of this part.
+     *
+     * @return The size of the part if bytes
      */
     public long getSize();
 
@@ -77,6 +88,8 @@ public interface Part {
      * @param fileName  The location into which the uploaded part should be
      *                  stored. Relative locations are relative to {@link
      *                  javax.servlet.MultipartConfigElement#getLocation()}
+     *
+     * @throws IOException if an I/O occurs while attempting to write the part
      */
     public void write(String fileName) throws IOException;
 
@@ -90,6 +103,8 @@ public interface Part {
      * Part instance is garbage collected. Apache Tomcat will delete the
      * associated storage when the associated request has finished processing.
      * Behaviour of other containers may be different.
+     *
+     * @throws IOException if an I/O occurs while attempting to delete the part
      */
     public void delete() throws IOException;
 
@@ -105,14 +120,18 @@ public interface Part {
     public String getHeader(String name);
 
     /**
-     * Obtain all the values of the specified part header. If the part did not
-     * include any headers of the specified name, this method returns an empty
-     * Collection. The header name is case insensitive.
+     * Obtain all the values of the specified part header.
+     * @param name The name of the header of interest. The header name is case
+     *             insensitive.
+     * @return All the values of the specified part header. If the part did not
+     *         include any headers of the specified name, this method returns an
+     *         empty Collection.
      */
     public Collection<String> getHeaders(String name);
 
     /**
-     * Returns a Collection of all the header names provided for this part.
+     * Get the header names provided for this part.
+     * @return a Collection of all the header names provided for this part.
      */
     public Collection<String> getHeaderNames();
 }

==================================================
