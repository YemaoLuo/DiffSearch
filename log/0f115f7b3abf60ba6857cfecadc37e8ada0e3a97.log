0f115f7b3abf60ba6857cfecadc37e8ada0e3a97
==================================================
No need for an upgrade specific poll method. Delete some more code :)
==================================================
Mark Emlyn
==================================================
Fri Mar 2 12:41:54 2012 +0000
==================================================
AbstractProtocol.java
No need for an upgrade specific poll method. Delete some more code :)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1296172 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractAjpProtocol.java
index 86847c8c81..54aa6bf5ad 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -591,7 +591,7 @@ public abstract class AbstractProtocol implements ProtocolHandler,
                     release(socket, processor, false, false);
                 } else if (state == SocketState.UPGRADED) {
                     // Need to keep the connection associated with the processor
-                    upgradePoll(socket, processor);
+                    longPoll(socket, processor);
                 } else {
                     // Connection closed. OK to recycle the processor.
                     if (!(processor instanceof UpgradeProcessor)) {
@@ -630,8 +630,6 @@ public abstract class AbstractProtocol implements ProtocolHandler,
                 Processor<S> processor);
         protected abstract void longPoll(SocketWrapper<S> socket,
                 Processor<S> processor);
-        protected abstract void upgradePoll(SocketWrapper<S> socket,
-                Processor<S> processor);
         protected abstract void release(SocketWrapper<S> socket,
                 Processor<S> processor, boolean socketClosing,
                 boolean addToPoller);

==================================================
Http11AprProtocol.java
index e8ee43f41b..b3e1d77158 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -90,12 +90,6 @@ public abstract class AbstractAjpProtocol extends AbstractProtocol {
             socket.setAsync(true);
         }
 
-        @Override
-        protected void upgradePoll(SocketWrapper<S> socket,
-                Processor<S> processor) {
-            // TODO Should never happen. ISE?
-        }
-
         @Override
         protected P createUpgradeProcessor(SocketWrapper<S> socket,
                 UpgradeInbound inbound) {

==================================================
Http11NioProtocol.java
index 32ae242177..8dc2c27b82 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -293,21 +293,19 @@ public class Http11AprProtocol extends AbstractHttp11Protocol {
             connections.put(socket.getSocket(), processor);
 
             if (processor.isAsync()) {
+                // Async
                 socket.setAsync(true);
             } else if (processor.isComet() && proto.endpoint.isRunning()) {
+                // Comet
                 ((AprEndpoint) proto.endpoint).getCometPoller().add(
                         socket.getSocket().longValue(), false);
+            } else {
+                // Upgraded
+                ((AprEndpoint) proto.endpoint).getPoller().add(
+                        socket.getSocket().longValue(), false);
             }
         }
 
-        @Override
-        protected void upgradePoll(SocketWrapper<Long> socket,
-                Processor<Long> processor) {
-            connections.put(socket.getSocket(), processor);
-            ((AprEndpoint) proto.endpoint).getPoller().add(
-                    socket.getSocket().longValue(), false);
-        }
-
         @Override
         protected Http11AprProcessor createProcessor() {
             Http11AprProcessor processor = new Http11AprProcessor(

==================================================
Http11Protocol.java
index 991361c16d..5196c91bd5 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -249,6 +249,7 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
             } else {
                 // Either:
                 //  - this is comet request
+                //  - this is an upgraded connection
                 //  - the request line/headers have not been completely
                 //    read
                 socket.getSocket().getPoller().add(socket.getSocket());
@@ -285,12 +286,5 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
             return new UpgradeNioProcessor(socket, inbound,
                     ((Http11NioProtocol) getProtocol()).getEndpoint().getSelectorPool());
         }
-
-        @Override
-        protected void upgradePoll(SocketWrapper<NioChannel> socket,
-                Processor<NioChannel> processor) {
-            connections.put(socket.getSocket(), processor);
-            socket.getSocket().getPoller().add(socket.getSocket());
-        }
     }
 }

==================================================
