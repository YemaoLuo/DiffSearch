dee5f2c1f744e789ab3a422de79385222d07ba6e
==================================================
Refactor allocations for the connection flow control window
==================================================
Mark Thomas
==================================================
Wed Sep 15 14:12:26 2021 +0100
==================================================
AbstractStream.java
Refactor allocations for the connection flow control window

There are multiple related changes in this commit
- The BackLog tracker object is removed and replaced with fields on
  AbstractStream.
- If an incomplete allocation is made for a stream as a result of a
  WINDOW_UPDATE frame the remainder of the request is now discarded
- The connection flow control window is, effectively, reduced as soon as
  an allocation is made rather than waiting until after the Stream is
  released. This is an improvement over the previous approach where over
  allocation was possible.
- The loop in reserveWindowSize is removed


==================================================
Http2UpgradeHandler.java
index c7374b6fa9..6a825c28fd 100644
--- a/java/org/apache/coyote/http2/AbstractStream.java
+++ b/java/org/apache/coyote/http2/AbstractStream.java
@@ -40,6 +40,9 @@ abstract class AbstractStream {
     private final Set<AbstractNonZeroStream> childStreams = Collections.newSetFromMap(new ConcurrentHashMap<>());
     private long windowSize = ConnectionSettingsBase.DEFAULT_INITIAL_WINDOW_SIZE;
 
+    private volatile int connectionAllocationRequested = 0;
+    private volatile int connectionAllocationMade = 0;
+
 
     AbstractStream(Integer identifier) {
         this.identifier = identifier;
@@ -154,6 +157,30 @@ abstract class AbstractStream {
     }
 
 
+    final int getConnectionAllocationRequested() {
+        return connectionAllocationRequested;
+    }
+
+
+    final void setConnectionAllocationRequested(int connectionAllocationRequested) {
+        log.debug(sm.getString("abstractStream.setConnectionAllocationRequested", getConnectionId(), getIdAsString(),
+                Integer.toString(this.connectionAllocationRequested), Integer.toString(connectionAllocationRequested)));
+        this.connectionAllocationRequested = connectionAllocationRequested;
+    }
+
+
+    final int getConnectionAllocationMade() {
+        return connectionAllocationMade;
+    }
+
+
+    final void setConnectionAllocationMade(int connectionAllocationMade) {
+        log.debug(sm.getString("abstractStream.setConnectionAllocationMade", getConnectionId(), getIdAsString(),
+                Integer.toString(this.connectionAllocationMade), Integer.toString(connectionAllocationMade)));
+        this.connectionAllocationMade = connectionAllocationMade;
+    }
+
+
     abstract String getConnectionId();
 
     abstract int getWeight();

==================================================
WindowAllocationManager.java
index cf36ded340..02f7abecbb 100644
--- a/java/org/apache/coyote/http2/LocalStrings.properties
+++ b/java/org/apache/coyote/http2/LocalStrings.properties
@@ -13,6 +13,8 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
+abstractStream.setConnectionAllocationRequested=Connection [{0}], Stream [{1}], connection allocation requested changed from [{2}] to [{3}]
+abstractStream.setConnectionAllocationMade=Connection [{0}], Stream [{1}], connection allocation made changed from [{2}] to [{3}]
 abstractStream.windowSizeDec=Connection [{0}], Stream [{1}], reduce flow control window by [{2}] to [{3}]
 abstractStream.windowSizeInc=Connection [{0}], Stream [{1}], increase flow control window by [{2}] to [{3}]
 abstractStream.windowSizeTooBig=Connection [{0}], Stream [{1}], increased window size by [{2}] to [{3}] which exceeded permitted maximum
@@ -169,7 +171,7 @@ upgradeHandler.writePushHeaders=Connection [{0}], Stream [{1}], Pushed stream [{
 windowAllocationManager.dispatched=Connection [{0}], Stream [{1}], Dispatched
 windowAllocationManager.notified=Connection [{0}], Stream [{1}], Notified
 windowAllocationManager.notify=Connection [{0}], Stream [{1}], Waiting type [{2}], Notify type [{3}]
-windowAllocationManager.waitFor.connection=Connection [{0}], Stream [{1}], Waiting for Connection flow control window (blocking) with timeout [{2}]
+windowAllocationManager.waitFor.connection=Connection [{0}], Stream [{1}], Waiting for [{2}] bytes from connection flow control window (blocking) with timeout [{3}]
 windowAllocationManager.waitFor.ise=Connection [{0}], Stream [{1}], Already waiting
 windowAllocationManager.waitFor.stream=Connection [{0}], Stream [{1}], Waiting for Stream flow control window (blocking) with timeout [{2}]
 windowAllocationManager.waitForNonBlocking.connection=Connection [{0}], Stream [{1}], Waiting for Connection flow control window (non-blocking)

==================================================
