2d9c8ad56df5800c4800bea58de7e3f232cda673
==================================================
Sync with Commons BCEL (moved from Jakarta)
==================================================
Mark Emlyn
==================================================
Mon Oct 10 18:37:14 2011 +0000
==================================================
AnnotationElementValue.java
Sync with Commons BCEL (moved from Jakarta)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1181123 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AnnotationEntry.java
index 0965ea0eed..d9888c042c 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationElementValue.java
@@ -45,9 +45,7 @@ public class AnnotationElementValue extends ElementValue
     @Override
     public String stringifyValue()
     {
-        StringBuffer sb = new StringBuffer();
-        sb.append(annotationEntry.toString());
-        return sb.toString();
+        return annotationEntry.toString();
     }
 
     @Override

==================================================
Annotations.java
index b633bc21b1..9ec1a8503e 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationEntry.java
@@ -37,8 +37,8 @@ public class AnnotationEntry implements Constants, Serializable {
 
     private static final long serialVersionUID = 1L;
     
-    private int type_index;
-    private ConstantPool constant_pool;
+    private final int type_index;
+    private final ConstantPool constant_pool;
 
     private List<ElementValuePair> element_value_pairs;
     
@@ -47,6 +47,7 @@ public class AnnotationEntry implements Constants, Serializable {
      * 
      * @param file
      * @param constant_pool
+     * @return the entry
      * @throws IOException
      */
     public static AnnotationEntry read(DataInputStream file, ConstantPool constant_pool) throws IOException {
@@ -78,19 +79,17 @@ public class AnnotationEntry implements Constants, Serializable {
      * @return the element value pairs in this annotation entry
      */
     public ElementValuePair[] getElementValuePairs() {
-        // TOFO return List
+        // TODO return List
         return element_value_pairs.toArray(new ElementValuePair[element_value_pairs.size()]);
     }
 
-
-    public void dump(DataOutputStream dos) throws IOException
-    {
-        dos.writeShort(type_index);    // u2 index of type name in cpool
-        dos.writeShort(element_value_pairs.size()); // u2 element_value pair count
-        for (int i = 0 ; i<element_value_pairs.size();i++) {
-            ElementValuePair envp = element_value_pairs.get(i);
+    public void dump(DataOutputStream dos) throws IOException {
+        dos.writeShort(type_index); // u2 index of type name in cpool
+        dos.writeShort(element_value_pairs.size()); // u2 element_value pair
+        // count
+        for (int i = 0; i < element_value_pairs.size(); i++) {
+            final ElementValuePair envp = element_value_pairs.get(i);
             envp.dump(dos);
         }
     }
-
 }

==================================================
ArrayElementValue.java
index 7a38f6a40a..7558c5790b 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Annotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Annotations.java
@@ -82,7 +82,8 @@ public abstract class Annotations extends Attribute {
             return;
         }
         dos.writeShort(annotation_table.length);
-        for (int i = 0; i < annotation_table.length; i++)
+        for (int i = 0; i < annotation_table.length; i++) {
             annotation_table[i].dump(dos);
+        }
     }
 }

==================================================
AttributeReader.java
index c4c5639e17..0c3804dc22 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ArrayElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ArrayElementValue.java
@@ -28,7 +28,7 @@ public class ArrayElementValue extends ElementValue
     @Override
     public String toString()
     {
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         sb.append("{");
         for (int i = 0; i < evalues.length; i++)
         {
@@ -63,7 +63,7 @@ public class ArrayElementValue extends ElementValue
     @Override
     public String stringifyValue()
     {
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         sb.append("[");
         for (int i = 0; i < evalues.length; i++)
         {
@@ -79,6 +79,4 @@ public class ArrayElementValue extends ElementValue
     {
         return evalues;
     }
-
-    
 }

==================================================
Code.java
index e596ebbafb..527ca32981 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AttributeReader.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AttributeReader.java
@@ -52,6 +52,6 @@ public interface AttributeReader {
      it to construct an attribute.  In the case of errors, a null can be
      returned which will cause the parsing of the class file to fail.
      */
-    public Attribute createAttribute( int name_index, int length, java.io.DataInputStream file,
+    Attribute createAttribute( int name_index, int length, java.io.DataInputStream file,
             ConstantPool constant_pool );
 }

==================================================
ConstantFieldref.java
index 80b7a31358..e4cd5dc79b 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Code.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Code.java
@@ -193,6 +193,7 @@ public final class Code extends Attribute {
     public final void setCode( byte[] code ) {
         this.code = code;
         code_length = (code == null) ? 0 : code.length;
+        length = calculateLength(); // Adjust length
     }
 
 
@@ -202,6 +203,7 @@ public final class Code extends Attribute {
     public final void setExceptionTable( CodeException[] exception_table ) {
         this.exception_table = exception_table;
         exception_table_length = (exception_table == null) ? 0 : exception_table.length;
+        length = calculateLength(); // Adjust length
     }
 
 
@@ -209,8 +211,7 @@ public final class Code extends Attribute {
      * @return String representation of code chunk.
      */
     public final String toString( boolean verbose ) {
-        StringBuffer buf;
-        buf = new StringBuffer(100);
+        StringBuilder buf = new StringBuilder(100);
         buf.append("Code(max_stack = ").append(max_stack).append(", max_locals = ").append(
                 max_locals).append(", code_length = ").append(code_length).append(")\n").append(
                 Utility.codeToString(code, constant_pool, 0, -1, verbose));

==================================================
ConstantFloat.java
index 58e03deae1..fb946a906c 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantFieldref.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantFieldref.java
@@ -42,6 +42,4 @@ public final class ConstantFieldref extends ConstantCP {
     ConstantFieldref(DataInputStream file) throws IOException {
         super(Constants.CONSTANT_Fieldref, file);
     }
-
-
 }

==================================================
ConstantInteger.java
index 23650af54e..66614d3ba5 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantFloat.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantFloat.java
@@ -86,6 +86,4 @@ public final class ConstantFloat extends Constant implements ConstantObject {
     public final String toString() {
         return super.toString() + "(bytes = " + bytes + ")";
     }
-
-
 }

==================================================
ConstantInterfaceMethodref.java
index 64a403e9e7..7cc87d0c39 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantInteger.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantInteger.java
@@ -86,6 +86,4 @@ public final class ConstantInteger extends Constant implements ConstantObject {
     public final String toString() {
         return super.toString() + "(bytes = " + bytes + ")";
     }
-
-
 }

==================================================
ConstantLong.java
index b9acf71a6b..5dbe87d207 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantInterfaceMethodref.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantInterfaceMethodref.java
@@ -42,6 +42,4 @@ public final class ConstantInterfaceMethodref extends ConstantCP {
     ConstantInterfaceMethodref(DataInputStream file) throws IOException {
         super(Constants.CONSTANT_InterfaceMethodref, file);
     }
-
-
 }

==================================================
ConstantMethodref.java
index 1161852d6f..1ba3bab0ac 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantLong.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantLong.java
@@ -86,6 +86,4 @@ public final class ConstantLong extends Constant implements ConstantObject {
     public final String toString() {
         return super.toString() + "(bytes = " + bytes + ")";
     }
-
-
 }

==================================================
ConstantObject.java
index 58419ac97b..a83c41bf61 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantMethodref.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantMethodref.java
@@ -42,6 +42,4 @@ public final class ConstantMethodref extends ConstantCP {
     ConstantMethodref(DataInputStream file) throws IOException {
         super(Constants.CONSTANT_Methodref, file);
     }
-
-
 }

==================================================
ConstantPool.java
index 1302931d03..cc3413b496 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantObject.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantObject.java
@@ -27,5 +27,4 @@ package org.apache.tomcat.util.bcel.classfile;
  */
 public interface ConstantObject {
 
-    
 }

==================================================
ConstantString.java
index 673b299b57..00d4bd8ea5 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantPool.java
@@ -131,7 +131,7 @@ public class ConstantPool implements Cloneable, Serializable {
 
     private static final String escape( String str ) {
         int len = str.length();
-        StringBuffer buf = new StringBuffer(len + 5);
+        StringBuilder buf = new StringBuilder(len + 5);
         char[] ch = str.toCharArray();
         for (int i = 0; i < len; i++) {
             switch (ch[i]) {
@@ -265,7 +265,7 @@ public class ConstantPool implements Cloneable, Serializable {
      */
     @Override
     public String toString() {
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         for (int i = 1; i < constant_pool_count; i++) {
             buf.append(i).append(")").append(constant_pool[i]).append("\n");
         }

==================================================
ElementValue.java
index 2b861fa91c..0ffdb5ac8d 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantString.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantString.java
@@ -86,6 +86,4 @@ public final class ConstantString extends Constant implements ConstantObject {
     public final String toString() {
         return super.toString() + "(string_index = " + string_index + ")";
     }
-
-
 }

==================================================
EnumElementValue.java
index cdd4d7ec93..3934fdcd7e 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ElementValue.java
@@ -130,6 +130,4 @@ public abstract class ElementValue
                     "Unexpected element value kind in annotation: " + type);
         }
     }
-
-    
 }

==================================================
ExceptionTable.java
index 3837e2ab10..d91561c4f9 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/EnumElementValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/EnumElementValue.java
@@ -55,5 +55,4 @@ public class EnumElementValue extends ElementValue
                 Constants.CONSTANT_Utf8);
         return cu8.getBytes();
     }
-
 }

==================================================
Field.java
index c401ae7f20..5f04ae5df4 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ExceptionTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ExceptionTable.java
@@ -105,7 +105,7 @@ public final class ExceptionTable extends Attribute {
      */
     @Override
     public final String toString() {
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         String str;
         for (int i = 0; i < number_of_exceptions; i++) {
             str = constant_pool.getConstantString(exception_index_table[i],

==================================================
InnerClasses.java
index 788466b5c5..3a436254af 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Field.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Field.java
@@ -89,7 +89,7 @@ public final class Field extends FieldOrMethod {
         access = access.equals("") ? "" : (access + " ");
         signature = Utility.signatureToString(getSignature());
         name = getName();
-        StringBuffer buf = new StringBuffer(64);
+        StringBuilder buf = new StringBuilder(64);
         buf.append(access).append(signature).append(" ").append(name);
         ConstantValue cv = getConstantValue();
         if (cv != null) {

==================================================
JavaClass.java
index 87b5e05b36..f69f815d91 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/InnerClasses.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/InnerClasses.java
@@ -103,7 +103,7 @@ public final class InnerClasses extends Attribute {
      */
     @Override
     public final String toString() {
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         for (int i = 0; i < number_of_classes; i++) {
             buf.append(inner_classes[i].toString(constant_pool)).append("\n");
         }

==================================================
LineNumberTable.java
index 818af8f8d7..70cb11da67 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/JavaClass.java
@@ -186,7 +186,7 @@ public class JavaClass extends AccessFlags
     public String toString() {
         String access = Utility.accessToString(access_flags, true);
         access = access.equals("") ? "" : (access + " ");
-        StringBuffer buf = new StringBuffer(128);
+        StringBuilder buf = new StringBuilder(128);
         buf.append(access).append(Utility.classOrInterface(access_flags)).append(" ").append(
                 class_name).append(" extends ").append(
                 Utility.compactClassName(superclass_name, false)).append('\n');
@@ -237,7 +237,7 @@ public class JavaClass extends AccessFlags
 
     private static final String indent( Object obj ) {
         StringTokenizer tok = new StringTokenizer(obj.toString(), "\n");
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         while (tok.hasMoreTokens()) {
             buf.append("\t").append(tok.nextToken()).append("\n");
         }

==================================================
LocalVariableTable.java
index ca28667046..5feaa9751c 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LineNumberTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LineNumberTable.java
@@ -102,8 +102,8 @@ public final class LineNumberTable extends Attribute {
      */
     @Override
     public final String toString() {
-        StringBuffer buf = new StringBuffer();
-        StringBuffer line = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
+        StringBuilder line = new StringBuilder();
         String newLine = System.getProperty("line.separator", "\n");
         for (int i = 0; i < line_number_table_length; i++) {
             line.append(line_number_table[i].toString());
@@ -134,6 +134,4 @@ public final class LineNumberTable extends Attribute {
         c.constant_pool = _constant_pool;
         return c;
     }
-
-
 }

==================================================
LocalVariableTypeTable.java
index 67243df7b8..3127ff050a 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTable.java
@@ -119,7 +119,7 @@ public class LocalVariableTable extends Attribute {
      */
     @Override
     public final String toString() {
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         for (int i = 0; i < local_variable_table_length; i++) {
             buf.append(local_variable_table[i].toString());
             if (i < local_variable_table_length - 1) {
@@ -143,6 +143,4 @@ public class LocalVariableTable extends Attribute {
         c.constant_pool = _constant_pool;
         return c;
     }
-
-
 }

==================================================
Method.java
index 445be647e0..afa213369d 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTypeTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTypeTable.java
@@ -93,7 +93,7 @@ private int             local_variable_type_table_length; // Table of local
    */ 
   @Override
   public final String toString() {
-    StringBuffer buf = new StringBuffer("");
+      StringBuilder buf = new StringBuilder();
 
     for(int i=0; i < local_variable_type_table_length; i++) {
       buf.append(local_variable_type_table[i].toString());

==================================================
ParameterAnnotations.java
index 058ba7461e..eb322672ac 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Method.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Method.java
@@ -122,7 +122,7 @@ public final class Method extends FieldOrMethod {
     public final String toString() {
         ConstantUtf8 c;
         String name, signature, access; // Short cuts to constant pool
-        StringBuffer buf;
+        StringBuilder buf;
         access = Utility.accessToString(access_flags);
         // Get name and signature from constant pool
         c = (ConstantUtf8) constant_pool.getConstant(signature_index, Constants.CONSTANT_Utf8);
@@ -131,7 +131,7 @@ public final class Method extends FieldOrMethod {
         name = c.getBytes();
         signature = Utility.methodSignatureToString(signature, name, access, true,
                 getLocalVariableTable());
-        buf = new StringBuffer(signature);
+        buf = new StringBuilder(signature);
         for (int i = 0; i < attributes_count; i++) {
             Attribute a = attributes[i];
             if (!((a instanceof Code) || (a instanceof ExceptionTable))) {

==================================================
StackMap.java
index 2947bf48dd..bb5cadbcc8 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ParameterAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ParameterAnnotations.java
@@ -77,5 +77,4 @@ public abstract class ParameterAnnotations extends Attribute {
                 ? 0
                 : parameter_annotation_table.length;
     }
-    
 }

==================================================
StackMapEntry.java
index 1971490da2..68918cd16f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMap.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMap.java
@@ -106,7 +106,7 @@ public final class StackMap extends Attribute {
      */
     @Override
     public final String toString() {
-        StringBuffer buf = new StringBuffer("StackMap(");
+        StringBuilder buf = new StringBuilder("StackMap(");
         for (int i = 0; i < map_length; i++) {
             buf.append(map[i].toString());
             if (i < map_length - 1) {

==================================================
StackMapTable.java
index fcdf120350..2608470de3 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapEntry.java
@@ -97,7 +97,7 @@ public final class StackMapEntry implements Cloneable, Serializable {
      */
     @Override
     public final String toString() {
-        StringBuffer buf = new StringBuffer(64);
+        StringBuilder buf = new StringBuilder(64);
         buf.append("(offset=").append(byte_code_offset);
         if (number_of_locals > 0) {
             buf.append(", locals={");

==================================================
StackMapTableEntry.java
index 35a7325bba..938943328a 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapTable.java
@@ -106,7 +106,7 @@ public final class StackMapTable extends Attribute {
      */
     @Override
     public final String toString() {
-        StringBuffer buf = new StringBuffer("StackMapTable(");
+        StringBuilder buf = new StringBuilder("StackMapTable(");
         for (int i = 0; i < map_length; i++) {
             buf.append(map[i].toString());
             if (i < map_length - 1) {

==================================================
Synthetic.java
index 314afd3535..4f710a73ab 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapTableEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapTableEntry.java
@@ -154,7 +154,7 @@ public final class StackMapTableEntry implements Cloneable, Serializable {
      */
     @Override
     public final String toString() {
-        StringBuffer buf = new StringBuffer(64);
+        StringBuilder buf = new StringBuilder(64);
         buf.append("(");
         if (frame_type >= Constants.SAME_FRAME && frame_type <= Constants.SAME_FRAME_MAX) {
             buf.append("SAME");
@@ -209,6 +209,4 @@ public final class StackMapTableEntry implements Cloneable, Serializable {
         }
         return null;
     }
-
-
 }

==================================================
Utility.java
index 89b4d2632f..71066ac913 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Synthetic.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Synthetic.java
@@ -95,7 +95,7 @@ public final class Synthetic extends Attribute {
      */
     @Override
     public final String toString() {
-        StringBuffer buf = new StringBuffer("Synthetic");
+        StringBuilder buf = new StringBuilder("Synthetic");
         if (length > 0) {
             buf.append(" ").append(Utility.toHexString(bytes));
         }

==================================================
BCELComparator.java
index 5525763cc5..f83b04aa86 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Utility.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Utility.java
@@ -36,14 +36,14 @@ public abstract class Utility {
 
 
     private static void wrap( ThreadLocal<Integer> tl, int value ) {
-        tl.set(new Integer(value));
+        tl.set(Integer.valueOf(value));
     }
 
     private static ThreadLocal<Integer> consumed_chars =
             new ThreadLocal<Integer>() {
         @Override
         protected Integer initialValue() {
-            return new Integer(0);
+            return Integer.valueOf(0);
         }
     };/* How many chars have been consumed
      * during parsing in signatureToString().
@@ -85,7 +85,7 @@ public abstract class Utility {
      * @return String representation of flags
      */
     public static final String accessToString( int access_flags, boolean for_class ) {
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         int p = 0;
         for (int i = 0; p < Constants.MAX_ACC_FLAG; i++) { // Loop through known flags
             p = pow2(i);
@@ -131,7 +131,7 @@ public abstract class Utility {
      */
     public static final String codeToString( byte[] code, ConstantPool constant_pool, int index,
             int length, boolean verbose ) {
-        StringBuffer buf = new StringBuffer(code.length * 20); // Should be sufficient
+        StringBuilder buf = new StringBuilder(code.length * 20); // Should be sufficient
         ByteSequence stream = new ByteSequence(code);
         try {
             for (int i = 0; i < index; i++) {
@@ -171,7 +171,7 @@ public abstract class Utility {
         int index, vindex, constant;
         int[] match, jump_table;
         int no_pad_bytes = 0, offset;
-        StringBuffer buf = new StringBuffer(Constants.OPCODE_NAMES[opcode]);
+        StringBuilder buf = new StringBuilder(Constants.OPCODE_NAMES[opcode]);
         /* Special case: Skip (0-3) padding bytes, i.e., the
          * following bytes are 4-byte-aligned
          */
@@ -489,7 +489,7 @@ public abstract class Utility {
      */
     public static final String methodSignatureToString( String signature, String name,
             String access, boolean chopit, LocalVariableTable vars ) throws ClassFormatException {
-        StringBuffer buf = new StringBuffer("(");
+        StringBuilder buf = new StringBuilder("(");
         String type;
         int index;
         int var_index = (access.indexOf("static") >= 0) ? 0 : 1;
@@ -646,10 +646,10 @@ public abstract class Utility {
                     return "boolean";
                 case '[': { // Array declaration
                     int n;
-                    StringBuffer brackets;
+                    StringBuilder brackets;
                     String type;
                     int consumed_chars; // Shadows global var
-                    brackets = new StringBuffer(); // Accumulate []'s
+                    brackets = new StringBuilder(); // Accumulate []'s
                     // Count opening brackets and look for optional size argument
                     for (n = 0; signature.charAt(n) == '['; n++) {
                         brackets.append("[]");
@@ -689,7 +689,7 @@ public abstract class Utility {
      * @return bytes as hexadecimal string, e.g. 00 FA 12 ...
      */
     public static final String toHexString( byte[] bytes ) {
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         for (int i = 0; i < bytes.length; i++) {
             short b = byteToShort(bytes[i]);
             String hex = Integer.toString(b, 0x10);
@@ -753,7 +753,7 @@ public abstract class Utility {
      */
     public static final String convertString( String label ) {
         char[] ch = label.toCharArray();
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         for (int i = 0; i < ch.length; i++) {
             switch (ch[i]) {
                 case '\n':
@@ -778,6 +778,4 @@ public abstract class Utility {
         }
         return buf.toString();
     }
-
-
 }

==================================================
