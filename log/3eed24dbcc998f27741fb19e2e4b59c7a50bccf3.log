3eed24dbcc998f27741fb19e2e4b59c7a50bccf3
==================================================
Only need FieldOrMethod, not individual classes
==================================================
Mark Emlyn
==================================================
Sun Oct 14 00:53:23 2012 +0000
==================================================
ClassParser.java
Only need FieldOrMethod, not individual classes

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1397985 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Field.java
index 779ce44207..ecef2e6a79 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
@@ -47,8 +47,8 @@ public final class ClassParser {
     private int access_flags; // Access rights of parsed class
     private int[] interfaces; // Names of implemented interfaces
     private ConstantPool constant_pool; // collection of constants
-    private Field[] fields; // class fields, i.e., its variables
-    private Method[] methods; // methods defined in the class
+    private FieldOrMethod[] fields; // class fields, i.e., its variables
+    private FieldOrMethod[] methods; // methods defined in the class
     private Attribute[] attributes; // attributes defined in the class
     private static final int BUFSIZE = 8192;
 
@@ -176,9 +176,9 @@ public final class ClassParser {
     private final void readFields() throws IOException, ClassFormatException {
         int fields_count;
         fields_count = file.readUnsignedShort();
-        fields = new Field[fields_count];
+        fields = new FieldOrMethod[fields_count];
         for (int i = 0; i < fields_count; i++) {
-            fields[i] = new Field(file, constant_pool);
+            fields[i] = new FieldOrMethod(file, constant_pool);
         }
     }
 
@@ -221,9 +221,9 @@ public final class ClassParser {
     private final void readMethods() throws IOException, ClassFormatException {
         int methods_count;
         methods_count = file.readUnsignedShort();
-        methods = new Method[methods_count];
+        methods = new FieldOrMethod[methods_count];
         for (int i = 0; i < methods_count; i++) {
-            methods[i] = new Method(file, constant_pool);
+            methods[i] = new FieldOrMethod(file, constant_pool);
         }
     }
 

==================================================
FieldOrMethod.java
deleted file mode 100644
index 268171096e..0000000000
--- a/java/org/apache/tomcat/util/bcel/classfile/Field.java
+++ /dev/null
@@ -1,87 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- *
- */
-package org.apache.tomcat.util.bcel.classfile;
-
-import java.io.DataInputStream;
-import java.io.IOException;
-
-import org.apache.tomcat.util.bcel.util.BCELComparator;
-
-/**
- * This class represents the field info structure, i.e., the representation
- * for a variable in the class. See JVM specification for details.
- *
- * @version $Id$
- * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
- */
-public final class Field extends FieldOrMethod {
-
-    private static final long serialVersionUID = 2646214544240375238L;
-    private static BCELComparator _cmp = new BCELComparator() {
-
-        @Override
-        public boolean equals( Object o1, Object o2 ) {
-            Field THIS = (Field) o1;
-            Field THAT = (Field) o2;
-            return THIS.getName().equals(THAT.getName())
-                    && THIS.getSignature().equals(THAT.getSignature());
-        }
-
-
-        @Override
-        public int hashCode( Object o ) {
-            Field THIS = (Field) o;
-            return THIS.getSignature().hashCode() ^ THIS.getName().hashCode();
-        }
-    };
-
-
-    /**
-     * Construct object from file stream.
-     * @param file Input stream
-     */
-    Field(DataInputStream file, ConstantPool constant_pool) throws IOException,
-            ClassFormatException {
-        super(file, constant_pool);
-    }
-
-
-    /**
-     * Return value as defined by given BCELComparator strategy.
-     * By default two Field objects are said to be equal when
-     * their names and signatures are equal.
-     *
-     * @see java.lang.Object#equals(java.lang.Object)
-     */
-    @Override
-    public boolean equals( Object obj ) {
-        return _cmp.equals(this, obj);
-    }
-
-
-    /**
-     * Return value as defined by given BCELComparator strategy.
-     * By default return the hashcode of the field's name XOR signature.
-     *
-     * @see java.lang.Object#hashCode()
-     */
-    @Override
-    public int hashCode() {
-        return _cmp.hashCode(this);
-    }
-}

==================================================
Method.java
index e891238894..2752a13407 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/FieldOrMethod.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/FieldOrMethod.java
@@ -21,16 +21,35 @@ import java.io.DataInputStream;
 import java.io.IOException;
 
 import org.apache.tomcat.util.bcel.Constants;
+import org.apache.tomcat.util.bcel.util.BCELComparator;
 
 /**
- * Abstract super class for fields and methods.
+ * Class for fields and methods.
  *
  * @version $Id$
  * @author  <A HREF="mailto:m.dahm@gmx.de">M. Dahm</A>
  */
-public abstract class FieldOrMethod extends AccessFlags implements Cloneable {
+public class FieldOrMethod extends AccessFlags implements Cloneable {
 
     private static final long serialVersionUID = -3383525930205542157L;
+    private static BCELComparator _cmp = new BCELComparator() {
+
+        @Override
+        public boolean equals( Object o1, Object o2 ) {
+            FieldOrMethod THIS = (FieldOrMethod) o1;
+            FieldOrMethod THAT = (FieldOrMethod) o2;
+            return THIS.getName().equals(THAT.getName())
+                    && THIS.getSignature().equals(THAT.getSignature());
+        }
+
+
+        @Override
+        public int hashCode( Object o ) {
+            FieldOrMethod THIS = (FieldOrMethod) o;
+            return THIS.getSignature().hashCode() ^ THIS.getName().hashCode();
+        }
+    };
+
     protected int name_index; // Points to field name in constant pool
     protected int signature_index; // Points to encoded signature
     protected int attributes_count; // No. of attributes
@@ -104,4 +123,28 @@ public abstract class FieldOrMethod extends AccessFlags implements Cloneable {
         c = (ConstantUtf8) constant_pool.getConstant(signature_index, Constants.CONSTANT_Utf8);
         return c.getBytes();
     }
+
+    /**
+     * Return value as defined by given BCELComparator strategy.
+     * By default two FieldOrMethod objects are said to be equal when
+     * their names and signatures are equal.
+     *
+     * @see java.lang.Object#equals(java.lang.Object)
+     */
+    @Override
+    public boolean equals( Object obj ) {
+        return _cmp.equals(this, obj);
+    }
+
+
+    /**
+     * Return value as defined by given BCELComparator strategy.
+     * By default return the hashcode of the FieldOrMethod's name XOR signature.
+     *
+     * @see java.lang.Object#hashCode()
+     */
+    @Override
+    public int hashCode() {
+        return _cmp.hashCode(this);
+    }
 }

==================================================
