e7847ab4b67fdbfafa27169f04c4b1db53dc8c9a
==================================================
Add ALPN to NIO2 with JSSE and OpenSSL. No NIO yet since it would need a refactoring to pass the socket wrapper to NioChannel to be able to set the negotiated protocol (?).
==================================================
Remy Maucherat
==================================================
Wed Jul 15 15:50:12 2015 +0000
==================================================
AbstractEndpoint.java
Add ALPN to NIO2 with JSSE and OpenSSL. No NIO yet since it would need a refactoring to pass the socket wrapper to NioChannel to be able to set the negotiated protocol (?).

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1691237 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SSLUtil.java
index 13f70e45bc..fafb1a7920 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -575,6 +575,9 @@ public abstract class AbstractEndpoint<S> {
     public void addNegotiatedProtocol(String negotiableProtocol) {
         negotiableProtocols.add(negotiableProtocol);
     }
+    public boolean hasNegotiableProtocols() {
+        return (negotiableProtocols.size() > 0);
+    }
 
     /**
      * Attributes provide a way for configuration to be passed to sub-components

==================================================
SecureNio2Channel.java
index 6a4183624a..c2673937f3 100644
--- a/java/org/apache/tomcat/util/net/SSLUtil.java
+++ b/java/org/apache/tomcat/util/net/SSLUtil.java
@@ -60,4 +60,11 @@ public interface SSLUtil {
      */
     public String[] getEnableableProtocols(SSLContext context);
 
+    public interface ProtocolInfo {
+        /**
+         * ALPN information.
+         * @return the protocol selected using ALPN
+         */
+        public String getNegotiatedProtocol();
+    }
 }

==================================================
OpenSSLContext.java
index 5e6135b091..3ecda0cea1 100644
--- a/java/org/apache/tomcat/util/net/SecureNio2Channel.java
+++ b/java/org/apache/tomcat/util/net/SecureNio2Channel.java
@@ -216,6 +216,9 @@ public class SecureNio2Channel extends Nio2Channel  {
                     throw new IOException(sm.getString("channel.nio.ssl.notHandshaking"));
                 }
                 case FINISHED: {
+                    if (endpoint.hasNegotiableProtocols() && sslEngine instanceof SSLUtil.ProtocolInfo) {
+                        socket.setNegotiatedProtocol(((SSLUtil.ProtocolInfo) sslEngine).getNegotiatedProtocol());
+                    }
                     //we are complete if we have delivered the last package
                     handshakeComplete = !netOutBuffer.hasRemaining();
                     //return 0 if we are complete, otherwise we still have data to write

==================================================
OpenSSLEngine.java
index 9abc118dea..3d0ab6307e 100644
--- a/java/org/apache/tomcat/util/net/openssl/OpenSSLContext.java
+++ b/java/org/apache/tomcat/util/net/openssl/OpenSSLContext.java
@@ -449,7 +449,8 @@ public class OpenSSLContext implements org.apache.tomcat.util.net.SSLContext {
 
     @Override
     public SSLEngine createSSLEngine() {
-        return new OpenSSLEngine(ctx, defaultProtocol, false, sessionContext);
+        return new OpenSSLEngine(ctx, defaultProtocol, false, sessionContext,
+                (negotiableProtocols != null && negotiableProtocols.size() > 0));
     }
 
     @Override

==================================================
