23a587a507ff03a414c5baedc31c7e6835c9bf06
==================================================
Remove unused copy() method
==================================================
Mark Emlyn
==================================================
Sun Oct 14 01:00:48 2012 +0000
==================================================
AnnotationDefault.java
Remove unused copy() method

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1397988 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Attribute.java
index 15c5b92165..7f8badc945 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationDefault.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationDefault.java
@@ -66,11 +66,4 @@ public class AnnotationDefault extends Attribute
     {
         super(name_index, length, constant_pool);
     }
-
-
-    @Override
-    public Attribute copy(ConstantPool _constant_pool)
-    {
-        throw new RuntimeException("Not implemented yet!");
-    }
 }

==================================================
Code.java
index ceffa0b133..0ae5d1df3c 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
@@ -197,9 +197,4 @@ public abstract class Attribute implements Cloneable, Serializable
         }
         return o;
     }
-
-    /**
-     * @return deep copy of this attribute
-     */
-    public abstract Attribute copy(ConstantPool _constant_pool);
 }

==================================================
CodeException.java
index 88612c316b..5787ccd31b 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Code.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Code.java
@@ -161,29 +161,4 @@ public final class Code extends Attribute {
         exception_table_length = (exception_table == null) ? 0 : exception_table.length;
         length = calculateLength(); // Adjust length
     }
-
-
-    /**
-     * @return deep copy of this attribute
-     *
-     * @param _constant_pool the constant pool to duplicate
-     */
-    @Override
-    public Attribute copy( ConstantPool _constant_pool ) {
-        Code c = (Code) clone();
-        if (code != null) {
-            c.code = new byte[code.length];
-            System.arraycopy(code, 0, c.code, 0, code.length);
-        }
-        c.constant_pool = _constant_pool;
-        c.exception_table = new CodeException[exception_table_length];
-        for (int i = 0; i < exception_table_length; i++) {
-            c.exception_table[i] = exception_table[i].copy();
-        }
-        c.attributes = new Attribute[attributes_count];
-        for (int i = 0; i < attributes_count; i++) {
-            c.attributes[i] = attributes[i].copy(_constant_pool);
-        }
-        return c;
-    }
 }

==================================================
ConstantValue.java
index 0544609da7..a17d84437f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/CodeException.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/CodeException.java
@@ -48,16 +48,4 @@ public final class CodeException implements Cloneable, Constants, Serializable {
         file.readUnsignedShort();   // Unused handler_pc
         file.readUnsignedShort();   // Unused catch_type
     }
-
-
-    /**
-     * @return deep copy of this object
-     */
-    public CodeException copy() {
-        try {
-            return (CodeException) clone();
-        } catch (CloneNotSupportedException e) {
-        }
-        return null;
-    }
 }

==================================================
Deprecated.java
index fe6639a52a..c77ca2f97f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ConstantValue.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ConstantValue.java
@@ -46,15 +46,4 @@ public final class ConstantValue extends Attribute {
         super(name_index, length, constant_pool);
         file.readUnsignedShort();   // Unused constantvalue_index
     }
-
-
-    /**
-     * @return deep copy of this attribute
-     */
-    @Override
-    public Attribute copy( ConstantPool _constant_pool ) {
-        ConstantValue c = (ConstantValue) clone();
-        c.constant_pool = _constant_pool;
-        return c;
-    }
 }

==================================================
EnclosingMethod.java
index d874734ba1..f9149854b1 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Deprecated.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Deprecated.java
@@ -64,19 +64,4 @@ public final class Deprecated extends Attribute {
             System.err.println("Deprecated attribute with length > 0");
         }
     }
-
-
-    /**
-     * @return deep copy of this attribute
-     */
-    @Override
-    public Attribute copy( ConstantPool _constant_pool ) {
-        Deprecated c = (Deprecated) clone();
-        if (bytes != null) {
-            c.bytes = new byte[bytes.length];
-            System.arraycopy(bytes, 0, c.bytes, 0, bytes.length);
-        }
-        c.constant_pool = _constant_pool;
-        return c;
-    }
 }

==================================================
ExceptionTable.java
index 1695db0f67..ce09648db1 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/EnclosingMethod.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/EnclosingMethod.java
@@ -36,9 +36,4 @@ public class EnclosingMethod extends Attribute {
         // Unused method index
         dis.readUnsignedShort();
     }
-
-    @Override
-    public Attribute copy(ConstantPool constant_pool) {
-        throw new RuntimeException("Not implemented yet!");
-    }
 }

==================================================
InnerClass.java
index 288cab2463..2f7d3c113e 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ExceptionTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ExceptionTable.java
@@ -79,20 +79,4 @@ public final class ExceptionTable extends Attribute {
         this.exception_index_table = exception_index_table;
         number_of_exceptions = (exception_index_table == null) ? 0 : exception_index_table.length;
     }
-
-
-    /**
-     * @return deep copy of this attribute
-     */
-    @Override
-    public Attribute copy( ConstantPool _constant_pool ) {
-        ExceptionTable c = (ExceptionTable) clone();
-        if (exception_index_table != null) {
-            c.exception_index_table = new int[exception_index_table.length];
-            System.arraycopy(exception_index_table, 0, c.exception_index_table, 0,
-                    exception_index_table.length);
-        }
-        c.constant_pool = _constant_pool;
-        return c;
-    }
 }

==================================================
InnerClasses.java
index 0f15e923ae..1897d25ff6 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/InnerClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/InnerClass.java
@@ -45,16 +45,4 @@ public final class InnerClass implements Cloneable, Serializable {
         file.readUnsignedShort();   // Unused inner_name_index
         file.readUnsignedShort();   // Unused inner_access_flags
     }
-
-
-    /**
-     * @return deep copy of this object
-     */
-    public InnerClass copy() {
-        try {
-            return (InnerClass) clone();
-        } catch (CloneNotSupportedException e) {
-        }
-        return null;
-    }
 }

==================================================
LineNumber.java
index 7faa049d6f..ff04bb266e 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/InnerClasses.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/InnerClasses.java
@@ -77,19 +77,4 @@ public final class InnerClasses extends Attribute {
         this.inner_classes = inner_classes;
         number_of_classes = (inner_classes == null) ? 0 : inner_classes.length;
     }
-
-
-    /**
-     * @return deep copy of this attribute
-     */
-    @Override
-    public Attribute copy( ConstantPool _constant_pool ) {
-        InnerClasses c = (InnerClasses) clone();
-        c.inner_classes = new InnerClass[number_of_classes];
-        for (int i = 0; i < number_of_classes; i++) {
-            c.inner_classes[i] = inner_classes[i].copy();
-        }
-        c.constant_pool = _constant_pool;
-        return c;
-    }
 }

==================================================
LineNumberTable.java
index 546baed892..e15db52523 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LineNumber.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LineNumber.java
@@ -44,16 +44,4 @@ public final class LineNumber implements Cloneable, Serializable {
         file.readUnsignedShort();   // Unused start_pc
         file.readUnsignedShort();   // Unused line_number
     }
-
-
-    /**
-     * @return deep copy of this object
-     */
-    public LineNumber copy() {
-        try {
-            return (LineNumber) clone();
-        } catch (CloneNotSupportedException e) {
-        }
-        return null;
-    }
 }

==================================================
LocalVariable.java
index 224e8b3b82..e6807e51b6 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LineNumberTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LineNumberTable.java
@@ -76,19 +76,4 @@ public final class LineNumberTable extends Attribute {
         this.line_number_table = line_number_table;
         line_number_table_length = (line_number_table == null) ? 0 : line_number_table.length;
     }
-
-
-    /**
-     * @return deep copy of this attribute
-     */
-    @Override
-    public Attribute copy( ConstantPool _constant_pool ) {
-        LineNumberTable c = (LineNumberTable) clone();
-        c.line_number_table = new LineNumber[line_number_table_length];
-        for (int i = 0; i < line_number_table_length; i++) {
-            c.line_number_table[i] = line_number_table[i].copy();
-        }
-        c.constant_pool = _constant_pool;
-        return c;
-    }
 }

==================================================
LocalVariableTable.java
index d31cd65e59..596875c219 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariable.java
@@ -48,16 +48,4 @@ public final class LocalVariable implements Constants, Cloneable, Serializable {
         file.readUnsignedShort();   // Unused signature_index
         file.readUnsignedShort();   // Unused index
     }
-
-
-    /**
-     * @return deep copy of this object
-     */
-    public LocalVariable copy() {
-        try {
-            return (LocalVariable) clone();
-        } catch (CloneNotSupportedException e) {
-        }
-        return null;
-    }
 }

==================================================
LocalVariableTypeTable.java
index d1d793405e..dd45fde9f9 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTable.java
@@ -74,19 +74,4 @@ public class LocalVariableTable extends Attribute {
                 ? 0
                 : local_variable_table.length;
     }
-
-
-    /**
-     * @return deep copy of this attribute
-     */
-    @Override
-    public Attribute copy( ConstantPool _constant_pool ) {
-        LocalVariableTable c = (LocalVariableTable) clone();
-        c.local_variable_table = new LocalVariable[local_variable_table_length];
-        for (int i = 0; i < local_variable_table_length; i++) {
-            c.local_variable_table[i] = local_variable_table[i].copy();
-        }
-        c.constant_pool = _constant_pool;
-        return c;
-    }
 }

==================================================
PMGClass.java
index c0cc719c87..ac94c5f6c0 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTypeTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTypeTable.java
@@ -75,20 +75,4 @@ private int             local_variable_type_table_length; // Table of local
     local_variable_type_table_length = (local_variable_table == null)? 0 :
       local_variable_table.length;
   }
-
-
-  /**
-   * @return deep copy of this attribute
-   */
-  @Override
-  public Attribute copy(ConstantPool constant_pool) {
-    LocalVariableTypeTable c = (LocalVariableTypeTable)clone();
-
-    c.local_variable_type_table = new LocalVariable[local_variable_type_table_length];
-    for(int i=0; i < local_variable_type_table_length; i++)
-      c.local_variable_type_table[i] = local_variable_type_table[i].copy();
-
-    c.constant_pool = constant_pool;
-    return c;
-  }
 }

==================================================
RuntimeInvisibleAnnotations.java
index 380049a9e1..0b89a5c7b2 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/PMGClass.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/PMGClass.java
@@ -47,13 +47,4 @@ public final class PMGClass extends Attribute {
         file.readUnsignedShort();   // Unused pmg_index
         file.readUnsignedShort();   // Unused pmg_class_index
     }
-
-
-    /**
-     * @return deep copy of this attribute
-     */
-    @Override
-    public Attribute copy( ConstantPool _constant_pool ) {
-        return (PMGClass) clone();
-    }
 }

==================================================
RuntimeInvisibleParameterAnnotations.java
index 54771a2448..614a6f5884 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/RuntimeInvisibleAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/RuntimeInvisibleAnnotations.java
@@ -48,14 +48,4 @@ public class RuntimeInvisibleAnnotations extends Annotations
     {
         super(name_index, length, file, constant_pool);
     }
-
-    /**
-     * @return deep copy of this attribute
-     */
-    @Override
-    public Attribute copy(ConstantPool constant_pool)
-    {
-        Annotations c = (Annotations) clone();
-        return c;
-    }
 }

==================================================
RuntimeVisibleAnnotations.java
index 18e7b8be04..896cfc8794 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/RuntimeInvisibleParameterAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/RuntimeInvisibleParameterAnnotations.java
@@ -43,14 +43,4 @@ public class RuntimeInvisibleParameterAnnotations extends ParameterAnnotations {
             ConstantPool constant_pool) throws IOException {
         super(name_index, length, file, constant_pool);
     }
-
-
-    /**
-     * @return deep copy of this attribute
-     */
-    @Override
-    public Attribute copy( ConstantPool constant_pool ) {
-        Annotations c = (Annotations) clone();
-        return c;
-    }
 }

==================================================
RuntimeVisibleParameterAnnotations.java
index 2009ed927e..2d0868049f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/RuntimeVisibleAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/RuntimeVisibleAnnotations.java
@@ -48,14 +48,4 @@ public class RuntimeVisibleAnnotations extends Annotations
     {
         super(name_index, length, file, constant_pool);
     }
-
-    /**
-     * @return deep copy of this attribute
-     */
-    @Override
-    public Attribute copy(ConstantPool constant_pool)
-    {
-        Annotations c = (Annotations) clone();
-        return c;
-    }
 }

==================================================
Signature.java
index 0ea2ec1028..f7482b6ad0 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/RuntimeVisibleParameterAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/RuntimeVisibleParameterAnnotations.java
@@ -43,14 +43,4 @@ public class RuntimeVisibleParameterAnnotations extends ParameterAnnotations {
             ConstantPool constant_pool) throws IOException {
         super(name_index, length, file, constant_pool);
     }
-
-
-    /**
-     * @return deep copy of this attribute
-     */
-    @Override
-    public Attribute copy( ConstantPool constant_pool ) {
-        Annotations c = (Annotations) clone();
-        return c;
-    }
 }

==================================================
SourceFile.java
index 0516db2794..f8c4c49c5b 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Signature.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Signature.java
@@ -46,13 +46,4 @@ public final class Signature extends Attribute {
         super(name_index, length, constant_pool);
         file.readUnsignedShort();   // Unused signature_index
     }
-
-
-    /**
-     * @return deep copy of this attribute
-     */
-    @Override
-    public Attribute copy( ConstantPool _constant_pool ) {
-        return (Signature) clone();
-    }
 }

==================================================
StackMap.java
index f719507f4d..e1a4004e1f 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/SourceFile.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/SourceFile.java
@@ -48,13 +48,4 @@ public final class SourceFile extends Attribute {
         super(name_index, length, constant_pool);
         file.readUnsignedShort();   // Unused sourcefile_index
     }
-
-
-    /**
-     * @return deep copy of this attribute
-     */
-    @Override
-    public Attribute copy( ConstantPool _constant_pool ) {
-        return (SourceFile) clone();
-    }
 }

==================================================
StackMapEntry.java
index 4f08aa25a7..0591ffc2ce 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMap.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMap.java
@@ -80,19 +80,4 @@ public final class StackMap extends Attribute {
         this.map = map;
         map_length = (map == null) ? 0 : map.length;
     }
-
-
-    /**
-     * @return deep copy of this attribute
-     */
-    @Override
-    public Attribute copy( ConstantPool _constant_pool ) {
-        StackMap c = (StackMap) clone();
-        c.map = new StackMapEntry[map_length];
-        for (int i = 0; i < map_length; i++) {
-            c.map[i] = map[i].copy();
-        }
-        c.constant_pool = _constant_pool;
-        return c;
-    }
 }

==================================================
StackMapTable.java
index 157abc7f01..9aba39f642 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapEntry.java
@@ -61,16 +61,4 @@ public final class StackMapEntry implements Cloneable, Serializable {
             types_of_stack_items[i] = new StackMapType(file);
         }
     }
-
-
-    /**
-     * @return deep copy of this object
-     */
-    public StackMapEntry copy() {
-        try {
-            return (StackMapEntry) clone();
-        } catch (CloneNotSupportedException e) {
-        }
-        return null;
-    }
 }

==================================================
StackMapTableEntry.java
index 4af4567e45..0df6e315d4 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapTable.java
@@ -80,19 +80,4 @@ public final class StackMapTable extends Attribute {
         this.map = map;
         map_length = (map == null) ? 0 : map.length;
     }
-
-
-    /**
-     * @return deep copy of this attribute
-     */
-    @Override
-    public Attribute copy( ConstantPool _constant_pool ) {
-        StackMapTable c = (StackMapTable) clone();
-        c.map = new StackMapTableEntry[map_length];
-        for (int i = 0; i < map_length; i++) {
-            c.map[i] = map[i].copy();
-        }
-        c.constant_pool = _constant_pool;
-        return c;
-    }
 }

==================================================
Synthetic.java
index 4dfa05456c..e81bca61ce 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapTableEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapTableEntry.java
@@ -102,16 +102,4 @@ public final class StackMapTableEntry implements Cloneable, Serializable {
         this.number_of_stack_items = number_of_stack_items;
         this.types_of_stack_items = types_of_stack_items;
     }
-
-
-    /**
-     * @return deep copy of this object
-     */
-    public StackMapTableEntry copy() {
-        try {
-            return (StackMapTableEntry) clone();
-        } catch (CloneNotSupportedException e) {
-        }
-        return null;
-    }
 }

==================================================
Unknown.java
index 801e4c91a5..d0c5403904 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Synthetic.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Synthetic.java
@@ -70,19 +70,4 @@ public final class Synthetic extends Attribute {
             System.err.println("Synthetic attribute with length > 0");
         }
     }
-
-
-    /**
-     * @return deep copy of this attribute
-     */
-    @Override
-    public Attribute copy( ConstantPool _constant_pool ) {
-        Synthetic c = (Synthetic) clone();
-        if (bytes != null) {
-            c.bytes = new byte[bytes.length];
-            System.arraycopy(bytes, 0, c.bytes, 0, bytes.length);
-        }
-        c.constant_pool = _constant_pool;
-        return c;
-    }
 }

==================================================
