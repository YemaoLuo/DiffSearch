799b9346635b150d54ff333a915e84650edbc722
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48175
==================================================
Mark Emlyn
==================================================
Tue Nov 17 22:59:34 2009 +0000
==================================================
ApplicationFilterConfig.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48175
Make loggers final. Patch by sebb with minor modification as original patch broke compilation

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@881599 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ContainerBase.java
index fabeaec71d..0ede505483 100644
--- a/java/org/apache/catalina/core/ApplicationFilterConfig.java
+++ b/java/org/apache/catalina/core/ApplicationFilterConfig.java
@@ -61,7 +61,7 @@ public final class ApplicationFilterConfig implements FilterConfig, Serializable
     protected static final StringManager sm =
         StringManager.getManager(Constants.Package);
 
-    private static org.apache.juli.logging.Log log =
+    private static final org.apache.juli.logging.Log log =
         LogFactory.getLog(ApplicationFilterConfig.class);
 
     // ----------------------------------------------------------- Constructors

==================================================
StandardHost.java
index 6353e08cb8..89d20fce86 100644
--- a/java/org/apache/catalina/core/ContainerBase.java
+++ b/java/org/apache/catalina/core/ContainerBase.java
@@ -124,7 +124,7 @@ import org.apache.tomcat.util.modeler.Registry;
 public abstract class ContainerBase
     implements Container, Lifecycle, Pipeline, MBeanRegistration {
 
-    private static org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( ContainerBase.class );
 
     /**

==================================================
StandardWrapper.java
index 6093f7e5a3..5194a79501 100644
--- a/java/org/apache/catalina/core/StandardHost.java
+++ b/java/org/apache/catalina/core/StandardHost.java
@@ -48,7 +48,7 @@ public class StandardHost
  {
     /* Why do we implement deployer and delegate to deployer ??? */
 
-    private static org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( StandardHost.class );
     
     // ----------------------------------------------------------- Constructors

==================================================
ClusterListener.java
index 91f1b8f34a..5a2f8142ef 100644
--- a/java/org/apache/catalina/core/StandardWrapper.java
+++ b/java/org/apache/catalina/core/StandardWrapper.java
@@ -73,7 +73,7 @@ public class StandardWrapper
     extends ContainerBase
     implements ServletConfig, Wrapper, NotificationEmitter {
 
-    protected static org.apache.juli.logging.Log log=
+    protected static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( StandardWrapper.class );
 
     protected static final String[] DEFAULT_SERVLET_METHODS = new String[] {

==================================================
ReplicatedContext.java
index bc4740fce4..89e75d6356 100644
--- a/java/org/apache/catalina/ha/ClusterListener.java
+++ b/java/org/apache/catalina/ha/ClusterListener.java
@@ -37,7 +37,7 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public abstract class ClusterListener implements ChannelListener {
 
-    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ClusterListener.class);
+    public static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ClusterListener.class);
 
 
     //--Instance Variables--------------------------------------

==================================================
FarmWarDeployer.java
index 73f6ae7086..6ffa506400 100644
--- a/java/org/apache/catalina/ha/context/ReplicatedContext.java
+++ b/java/org/apache/catalina/ha/context/ReplicatedContext.java
@@ -39,7 +39,7 @@ import org.apache.catalina.tribes.tipis.AbstractReplicatedMap.MapOwner;
  */
 public class ReplicatedContext extends StandardContext implements LifecycleListener,MapOwner {
     private int mapSendOptions = Channel.SEND_OPTIONS_DEFAULT;
-    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( ReplicatedContext.class );
+    public static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( ReplicatedContext.class );
     protected boolean startComplete = false;
     protected static long DEFAULT_REPL_TIMEOUT = 15000;//15 seconds
     

==================================================
FileMessageFactory.java
index 7d0cd278c0..e1ae79e4fa 100644
--- a/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
+++ b/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
@@ -59,7 +59,7 @@ import org.apache.tomcat.util.modeler.Registry;
  */
 public class FarmWarDeployer extends ClusterListener implements ClusterDeployer, FileChangeListener {
     /*--Static Variables----------------------------------------*/
-    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory
+    public static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory
             .getLog(FarmWarDeployer.class);
     /**
      * The descriptive information about this implementation.

==================================================
WarWatcher.java
index 7e33ca8c08..3ae86756c7 100644
--- a/java/org/apache/catalina/ha/deploy/FileMessageFactory.java
+++ b/java/org/apache/catalina/ha/deploy/FileMessageFactory.java
@@ -42,7 +42,7 @@ import java.util.concurrent.atomic.AtomicLong;
  */
 public class FileMessageFactory {
     /*--Static Variables----------------------------------------*/
-    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory
+    public static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory
             .getLog(FileMessageFactory.class);
 
     /**

==================================================
BackupManager.java
index a40683b5ee..859467bc0f 100644
--- a/java/org/apache/catalina/ha/deploy/WarWatcher.java
+++ b/java/org/apache/catalina/ha/deploy/WarWatcher.java
@@ -37,7 +37,7 @@ import java.util.Iterator;
 public class WarWatcher {
 
     /*--Static Variables----------------------------------------*/
-    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory
+    public static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory
             .getLog(WarWatcher.class);
 
     /*--Instance Variables--------------------------------------*/

==================================================
DeltaManager.java
index e2d41ed3b5..42ff18d19f 100644
--- a/java/org/apache/catalina/ha/session/BackupManager.java
+++ b/java/org/apache/catalina/ha/session/BackupManager.java
@@ -37,7 +37,7 @@ import org.apache.catalina.tribes.tipis.AbstractReplicatedMap.MapOwner;
  */
 public class BackupManager extends StandardManager implements ClusterManager, MapOwner
 {
-    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( BackupManager.class );
+    public static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( BackupManager.class );
 
     protected static long DEFAULT_REPL_TIMEOUT = 15000;//15 seconds
 

==================================================
DeltaRequest.java
index 7de03b8eee..b6899cc173 100644
--- a/java/org/apache/catalina/ha/session/DeltaManager.java
+++ b/java/org/apache/catalina/ha/session/DeltaManager.java
@@ -68,7 +68,7 @@ import org.apache.catalina.ha.ClusterManager;
 public class DeltaManager extends ClusterManagerBase{
 
     // ---------------------------------------------------- Security Classes
-    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(DeltaManager.class);
+    public static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(DeltaManager.class);
 
     /**
      * The string manager for this package.

==================================================
DeltaSession.java
index 3fa274e7f2..1b2c9e48b4 100644
--- a/java/org/apache/catalina/ha/session/DeltaRequest.java
+++ b/java/org/apache/catalina/ha/session/DeltaRequest.java
@@ -40,7 +40,7 @@ import java.io.ObjectOutputStream;
 
 public class DeltaRequest implements Externalizable {
 
-    public static org.apache.juli.logging.Log log =
+    public static final org.apache.juli.logging.Log log =
         org.apache.juli.logging.LogFactory.getLog( DeltaRequest.class );
 
     /**

==================================================
JvmRouteBinderValve.java
index fe9b2857cf..07864caa20 100644
--- a/java/org/apache/catalina/ha/session/DeltaSession.java
+++ b/java/org/apache/catalina/ha/session/DeltaSession.java
@@ -62,7 +62,7 @@ import java.util.concurrent.atomic.AtomicInteger;
 
 public class DeltaSession extends StandardSession implements Externalizable,ClusterSession,ReplicatedMapEntry {
 
-    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(DeltaSession.class);
+    public static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(DeltaSession.class);
 
     /**
      * The string manager for this package.

==================================================
SerializablePrincipal.java
index c53ad12be4..80c2c2197d 100644
--- a/java/org/apache/catalina/ha/session/JvmRouteBinderValve.java
+++ b/java/org/apache/catalina/ha/session/JvmRouteBinderValve.java
@@ -100,7 +100,7 @@ import org.apache.catalina.valves.ValveBase;
 public class JvmRouteBinderValve extends ValveBase implements ClusterValve, Lifecycle {
 
     /*--Static Variables----------------------------------------*/
-    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory
+    public static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory
             .getLog(JvmRouteBinderValve.class);
 
     /**

==================================================
SimpleTcpReplicationManager.java
index a7be80ab65..b21eae12e1 100644
--- a/java/org/apache/catalina/ha/session/SerializablePrincipal.java
+++ b/java/org/apache/catalina/ha/session/SerializablePrincipal.java
@@ -44,7 +44,7 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public class SerializablePrincipal  implements java.io.Serializable {
 
-    protected static org.apache.juli.logging.Log log =
+    protected static final org.apache.juli.logging.Log log =
         org.apache.juli.logging.LogFactory.getLog(SerializablePrincipal.class);
     
     /**

==================================================
ReplicationValve.java
index bd8cc89a8a..477e1e36c9 100644
--- a/java/org/apache/catalina/ha/session/SimpleTcpReplicationManager.java
+++ b/java/org/apache/catalina/ha/session/SimpleTcpReplicationManager.java
@@ -59,7 +59,7 @@ import org.apache.catalina.Loader;
  */
 public class SimpleTcpReplicationManager extends StandardManager implements ClusterManager
 {
-    public static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( SimpleTcpReplicationManager.class );
+    public static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( SimpleTcpReplicationManager.class );
 
     //the channel configuration
     protected String mChannelConfig = null;

==================================================
WebappClassLoader.java
index f3491b5f90..632f0a5ec8 100644
--- a/java/org/apache/catalina/ha/tcp/ReplicationValve.java
+++ b/java/org/apache/catalina/ha/tcp/ReplicationValve.java
@@ -63,7 +63,7 @@ import org.apache.catalina.valves.ValveBase;
 public class ReplicationValve
     extends ValveBase implements ClusterValve {
     
-    private static org.apache.juli.logging.Log log =
+    private static final org.apache.juli.logging.Log log =
         org.apache.juli.logging.LogFactory.getLog( ReplicationValve.class );
 
     // ----------------------------------------------------- Instance Variables

==================================================
WebappLoader.java
index 61ed417c61..8673d51b5a 100644
--- a/java/org/apache/catalina/loader/WebappClassLoader.java
+++ b/java/org/apache/catalina/loader/WebappClassLoader.java
@@ -108,7 +108,7 @@ public class WebappClassLoader
     implements Lifecycle
  {
 
-    protected static org.apache.juli.logging.Log log=
+    protected static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( WebappClassLoader.class );
 
     public static final boolean ENABLE_CLEAR_REFERENCES = 

==================================================
MBeanFactory.java
index 371d628401..6d1d595446 100644
--- a/java/org/apache/catalina/loader/WebappLoader.java
+++ b/java/org/apache/catalina/loader/WebappLoader.java
@@ -1205,7 +1205,7 @@ public class WebappLoader
     }
 
 
-    private static org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( WebappLoader.class );
 
     private ObjectName oname;

==================================================
SecurityConfig.java
index 2fdd0b9402..d7da2da78c 100644
--- a/java/org/apache/catalina/mbeans/MBeanFactory.java
+++ b/java/org/apache/catalina/mbeans/MBeanFactory.java
@@ -63,7 +63,7 @@ import org.apache.tomcat.util.modeler.BaseModelMBean;
 
 public class MBeanFactory extends BaseModelMBean {
 
-    private static org.apache.juli.logging.Log log = 
+    private static final org.apache.juli.logging.Log log = 
         org.apache.juli.logging.LogFactory.getLog(MBeanFactory.class);
 
     /**

==================================================
SecurityUtil.java
index 12102ea351..206c27bfe9 100644
--- a/java/org/apache/catalina/security/SecurityConfig.java
+++ b/java/org/apache/catalina/security/SecurityConfig.java
@@ -28,7 +28,7 @@ import org.apache.catalina.startup.CatalinaProperties;
 public final class SecurityConfig{
     private static SecurityConfig singleton = null;
 
-    private static org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( SecurityConfig.class );
 
     

==================================================
Catalina.java
index f640218a48..fff9e5c53b 100644
--- a/java/org/apache/catalina/security/SecurityUtil.java
+++ b/java/org/apache/catalina/security/SecurityUtil.java
@@ -69,7 +69,7 @@ public final class SecurityUtil{
     private static HashMap<Object,Method[]> objectCache =
         new HashMap<Object,Method[]>();
         
-    private static org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( SecurityUtil.class );
     
     private static String PACKAGE = "org.apache.catalina.security";

==================================================
CatalinaProperties.java
index b284866e7c..bc2e5d4b1d 100644
--- a/java/org/apache/catalina/startup/Catalina.java
+++ b/java/org/apache/catalina/startup/Catalina.java
@@ -702,7 +702,7 @@ public class Catalina extends Embedded {
     }
     
     
-    private static org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( Catalina.class );
 
 }

==================================================
ContextConfig.java
index 4fd66f69d2..b93bc9847b 100644
--- a/java/org/apache/catalina/startup/CatalinaProperties.java
+++ b/java/org/apache/catalina/startup/CatalinaProperties.java
@@ -38,7 +38,7 @@ public class CatalinaProperties {
 
     // ------------------------------------------------------- Static Variables
 
-    private static org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( CatalinaProperties.class );
 
     private static Properties properties = null;

==================================================
DefaultJarScanner.java
index f5fdc346f2..b41b9c7cc6 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -79,7 +79,7 @@ import org.xml.sax.SAXParseException;
 public class ContextConfig
     implements LifecycleListener {
 
-    protected static org.apache.juli.logging.Log log=
+    protected static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( ContextConfig.class );
 
     // ----------------------------------------------------- Instance Variables

==================================================
DigesterFactory.java
index d2825abcee..fee90e2a1f 100644
--- a/java/org/apache/catalina/startup/DefaultJarScanner.java
+++ b/java/org/apache/catalina/startup/DefaultJarScanner.java
@@ -52,7 +52,7 @@ public class DefaultJarScanner implements JarScanner {
     private static final String JAR_EXT = ".jar";
     private static final String WEB_INF_LIB = "/WEB-INF/lib/";
 
-    private static org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( TldConfig.class );
 
     /**

==================================================
EngineConfig.java
index 46e0e79f1e..7cc2d2f8b9 100644
--- a/java/org/apache/catalina/startup/DigesterFactory.java
+++ b/java/org/apache/catalina/startup/DigesterFactory.java
@@ -33,7 +33,7 @@ public class DigesterFactory {
     /**
      * The log.
      */
-   protected static org.apache.juli.logging.Log log = 
+   protected static final org.apache.juli.logging.Log log = 
        org.apache.juli.logging.LogFactory.getLog(DigesterFactory.class);
 
     /**

==================================================
HostConfig.java
index d351ff6aa0..21f5a41f65 100644
--- a/java/org/apache/catalina/startup/EngineConfig.java
+++ b/java/org/apache/catalina/startup/EngineConfig.java
@@ -38,7 +38,7 @@ public class EngineConfig
     implements LifecycleListener {
 
 
-    protected static org.apache.juli.logging.Log log=
+    protected static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( EngineConfig.class );
 
     // ----------------------------------------------------- Instance Variables

==================================================
TldConfig.java
index 8c9ddfff98..ea75728cbe 100644
--- a/java/org/apache/catalina/startup/HostConfig.java
+++ b/java/org/apache/catalina/startup/HostConfig.java
@@ -60,7 +60,7 @@ import org.apache.tomcat.util.modeler.Registry;
 public class HostConfig
     implements LifecycleListener {
     
-    protected static org.apache.juli.logging.Log log=
+    protected static final org.apache.juli.logging.Log log=
          org.apache.juli.logging.LogFactory.getLog( HostConfig.class );
 
     // ----------------------------------------------------- Instance Variables

==================================================
UserConfig.java
index b73c8629d5..fcce5930db 100644
--- a/java/org/apache/catalina/startup/TldConfig.java
+++ b/java/org/apache/catalina/startup/TldConfig.java
@@ -66,7 +66,7 @@ public final class TldConfig  implements LifecycleListener {
     // Names of JARs that are known not to contain any TLDs
     private static HashSet<String> noTldJars;
 
-    private static org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( TldConfig.class );
 
     /**

==================================================
WebXml.java
index ed8355c3bb..5e302e08b0 100644
--- a/java/org/apache/catalina/startup/UserConfig.java
+++ b/java/org/apache/catalina/startup/UserConfig.java
@@ -45,7 +45,7 @@ public final class UserConfig
     implements LifecycleListener {
 
 
-    private static org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( UserConfig.class );
 
     

==================================================
ChannelInterceptorBase.java
index 41c1591250..c49a85f0d3 100644
--- a/java/org/apache/catalina/startup/WebXml.java
+++ b/java/org/apache/catalina/startup/WebXml.java
@@ -66,7 +66,7 @@ public class WebXml {
     protected static final StringManager sm =
         StringManager.getManager(Constants.Package);
 
-    private static org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog(WebXml.class);
     
     // web.xml only elements

==================================================
GroupChannel.java
index 53596664a2..7ff544f01b 100644
--- a/java/org/apache/catalina/tribes/group/ChannelInterceptorBase.java
+++ b/java/org/apache/catalina/tribes/group/ChannelInterceptorBase.java
@@ -29,7 +29,7 @@ import org.apache.catalina.tribes.Member;
 
 public abstract class ChannelInterceptorBase implements ChannelInterceptor {
 
-    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(
+    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(
         ChannelInterceptorBase.class);
 
     private ChannelInterceptor next;

==================================================
RpcChannel.java
index 72c56a469a..1665c0efad 100644
--- a/java/org/apache/catalina/tribes/group/GroupChannel.java
+++ b/java/org/apache/catalina/tribes/group/GroupChannel.java
@@ -638,7 +638,7 @@ public class GroupChannel extends ChannelInterceptorBase implements ManagedChann
      * @version 1.0
      */
     public static class HeartbeatThread extends Thread {
-        protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(HeartbeatThread.class);
+        protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(HeartbeatThread.class);
         protected static int counter = 1;
         protected static synchronized int inc() {
             return counter++;

==================================================
FragmentationInterceptor.java
index 099a07eb06..601d3ac36a 100644
--- a/java/org/apache/catalina/tribes/group/RpcChannel.java
+++ b/java/org/apache/catalina/tribes/group/RpcChannel.java
@@ -32,7 +32,7 @@ import org.apache.catalina.tribes.util.UUIDGenerator;
  * @author Filip Hanik
  */
 public class RpcChannel implements ChannelListener{
-    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(RpcChannel.class);
+    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(RpcChannel.class);
     
     public static final int FIRST_REPLY = 1;
     public static final int MAJORITY_REPLY = 2;

==================================================
MessageDispatchInterceptor.java
index 259cad3d19..c64837fc24 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/FragmentationInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/FragmentationInterceptor.java
@@ -41,7 +41,7 @@ import org.apache.catalina.tribes.io.XByteBuffer;
  * @version 1.0
  */
 public class FragmentationInterceptor extends ChannelInterceptorBase {
-    private static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( FragmentationInterceptor.class );
+    private static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( FragmentationInterceptor.class );
     
     protected HashMap<FragKey, FragCollection> fragpieces = new HashMap<FragKey, FragCollection>();
     private int maxSize = 1024*100;

==================================================
TcpFailureDetector.java
index d31265151d..13051e59cd 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/MessageDispatchInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/MessageDispatchInterceptor.java
@@ -38,7 +38,7 @@ import org.apache.catalina.tribes.UniqueId;
  * @version 1.0
  */
 public class MessageDispatchInterceptor extends ChannelInterceptorBase implements Runnable {
-    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(MessageDispatchInterceptor.class);
+    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(MessageDispatchInterceptor.class);
 
     protected long maxQueueSize = 1024*1024*64; //64MB
     protected FastQueue queue = new FastQueue();

==================================================
TcpPingInterceptor.java
index ce43435276..5d8b3540a8 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/TcpFailureDetector.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/TcpFailureDetector.java
@@ -58,7 +58,7 @@ import org.apache.catalina.tribes.membership.Membership;
  */
 public class TcpFailureDetector extends ChannelInterceptorBase {
     
-    private static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( TcpFailureDetector.class );
+    private static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( TcpFailureDetector.class );
     
     protected static byte[] TCP_FAIL_DETECT = new byte[] {
         79, -89, 115, 72, 121, -126, 67, -55, -97, 111, -119, -128, -95, 91, 7, 20,

==================================================
ThroughputInterceptor.java
index 7418b1755c..2a314340e2 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java
@@ -39,7 +39,7 @@ import org.apache.catalina.tribes.io.ChannelData;
 
 public class TcpPingInterceptor extends ChannelInterceptorBase {
     
-    protected static org.apache.juli.logging.Log log = 
+    protected static final org.apache.juli.logging.Log log = 
         org.apache.juli.logging.LogFactory.getLog(TcpPingInterceptor.class);
     
     protected static byte[] TCP_PING_DATA = new byte[] {

==================================================
TwoPhaseCommitInterceptor.java
index d1bb074523..5afc846168 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/ThroughputInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/ThroughputInterceptor.java
@@ -37,7 +37,7 @@ import org.apache.catalina.tribes.io.XByteBuffer;
  * @version 1.0
  */
 public class ThroughputInterceptor extends ChannelInterceptorBase {
-    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ThroughputInterceptor.class);
+    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ThroughputInterceptor.class);
 
     double mbTx = 0;
     double mbAppTx = 0;

==================================================
ObjectReader.java
index e693abccbf..5f8476fde6 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/TwoPhaseCommitInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/TwoPhaseCommitInterceptor.java
@@ -42,7 +42,7 @@ public class TwoPhaseCommitInterceptor extends ChannelInterceptorBase {
 
     public static final byte[] START_DATA = new byte[] {113, 1, -58, 2, -34, -60, 75, -78, -101, -12, 32, -29, 32, 111, -40, 4};
     public static final byte[] END_DATA = new byte[] {54, -13, 90, 110, 47, -31, 75, -24, -81, -29, 36, 52, -58, 77, -110, 56};
-    private static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(TwoPhaseCommitInterceptor.class);
+    private static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(TwoPhaseCommitInterceptor.class);
 
     protected HashMap<UniqueId, MapEntry> messages = new HashMap<UniqueId, MapEntry>();
     protected long expire = 1000 * 60; //one minute expiration

==================================================
XByteBuffer.java
index 2ced30a235..cb251692fc 100644
--- a/java/org/apache/catalina/tribes/io/ObjectReader.java
+++ b/java/org/apache/catalina/tribes/io/ObjectReader.java
@@ -37,7 +37,7 @@ import org.apache.catalina.tribes.ChannelMessage;
  */
 public class ObjectReader {
 
-    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ObjectReader.class);
+    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ObjectReader.class);
 
     private XByteBuffer buffer;
 

==================================================
McastService.java
index 6cf853cd90..70e6bf2c79 100644
--- a/java/org/apache/catalina/tribes/io/XByteBuffer.java
+++ b/java/org/apache/catalina/tribes/io/XByteBuffer.java
@@ -48,7 +48,7 @@ import java.util.concurrent.atomic.AtomicInteger;
 public class XByteBuffer
 {
     
-    public static org.apache.juli.logging.Log log =
+    public static final org.apache.juli.logging.Log log =
         org.apache.juli.logging.LogFactory.getLog( XByteBuffer.class );
     
     /**

==================================================
McastServiceImpl.java
index 3b23603644..8f8f83006c 100644
--- a/java/org/apache/catalina/tribes/membership/McastService.java
+++ b/java/org/apache/catalina/tribes/membership/McastService.java
@@ -46,7 +46,7 @@ import org.apache.catalina.tribes.util.UUIDGenerator;
 
 public class McastService implements MembershipService,MembershipListener,MessageListener {
 
-    private static org.apache.juli.logging.Log log =
+    private static final org.apache.juli.logging.Log log =
         org.apache.juli.logging.LogFactory.getLog( McastService.class );
 
     /**

==================================================
LazyReplicatedMap.java
index 437985413e..f090f1339a 100644
--- a/java/org/apache/catalina/tribes/membership/McastServiceImpl.java
+++ b/java/org/apache/catalina/tribes/membership/McastServiceImpl.java
@@ -50,7 +50,7 @@ import org.apache.catalina.tribes.util.ExecutorFactory;
  */
 public class McastServiceImpl
 {
-    private static org.apache.juli.logging.Log log =
+    private static final org.apache.juli.logging.Log log =
         org.apache.juli.logging.LogFactory.getLog( McastService.class );
     
     protected static int MAX_PACKET_SIZE = 65535;

==================================================
ReplicatedMap.java
index de45749b7c..fd713c5916 100644
--- a/java/org/apache/catalina/tribes/tipis/LazyReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/LazyReplicatedMap.java
@@ -66,7 +66,7 @@ import org.apache.catalina.tribes.UniqueId;
  */
 public class LazyReplicatedMap extends AbstractReplicatedMap 
     implements RpcCallback, ChannelListener, MembershipListener {
-    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(LazyReplicatedMap.class);
+    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(LazyReplicatedMap.class);
     
 
     

==================================================
BioReceiver.java
index d6e55e7be7..e2cf910ff7 100644
--- a/java/org/apache/catalina/tribes/tipis/ReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/ReplicatedMap.java
@@ -51,7 +51,7 @@ import org.apache.catalina.tribes.group.RpcCallback;
  */
 public class ReplicatedMap extends AbstractReplicatedMap implements RpcCallback, ChannelListener, MembershipListener {
 
-    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ReplicatedMap.class);
+    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ReplicatedMap.class);
 
 //------------------------------------------------------------------------------
 //              CONSTRUCTORS / DESTRUCTORS

==================================================
BioReplicationTask.java
index 681aa7f2e7..6790fa813b 100644
--- a/java/org/apache/catalina/tribes/transport/bio/BioReceiver.java
+++ b/java/org/apache/catalina/tribes/transport/bio/BioReceiver.java
@@ -34,7 +34,7 @@ import org.apache.catalina.tribes.transport.AbstractRxTask;
  */
 public class BioReceiver extends ReceiverBase implements Runnable, ChannelReceiver, ListenCallback {
 
-    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(BioReceiver.class);
+    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(BioReceiver.class);
 
     protected ServerSocket serverSocket;
 

==================================================
BioSender.java
index 87d73eda6b..2e89973258 100644
--- a/java/org/apache/catalina/tribes/transport/bio/BioReplicationTask.java
+++ b/java/org/apache/catalina/tribes/transport/bio/BioReplicationTask.java
@@ -45,7 +45,7 @@ import org.apache.catalina.tribes.io.BufferPool;
 public class BioReplicationTask extends AbstractRxTask {
 
 
-    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( BioReplicationTask.class );
+    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( BioReplicationTask.class );
     
     protected Socket socket;
     protected ObjectReader reader;

==================================================
FastQueue.java
index f4b897fc86..240b920b81 100644
--- a/java/org/apache/catalina/tribes/transport/bio/BioSender.java
+++ b/java/org/apache/catalina/tribes/transport/bio/BioSender.java
@@ -43,7 +43,7 @@ import org.apache.catalina.tribes.util.StringManager;
  */
 public class BioSender extends AbstractSender implements DataSender {
 
-    private static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(BioSender.class);
+    private static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(BioSender.class);
 
     /**
      * The string manager for this package.

==================================================
NioReceiver.java
index 7adc575154..77c74e0c2d 100644
--- a/java/org/apache/catalina/tribes/transport/bio/util/FastQueue.java
+++ b/java/org/apache/catalina/tribes/transport/bio/util/FastQueue.java
@@ -34,7 +34,7 @@ import org.apache.catalina.tribes.group.InterceptorPayload;
  */
 public class FastQueue {
 
-    private static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(FastQueue.class);
+    private static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(FastQueue.class);
 
     /**
      * This is the actual queue

==================================================
NioReplicationTask.java
index 9ab899d581..96b0c50863 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java
@@ -46,7 +46,7 @@ import java.nio.channels.ClosedSelectorException;
  */
 public class NioReceiver extends ReceiverBase implements Runnable, ChannelReceiver, ListenCallback {
 
-    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(NioReceiver.class);
+    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(NioReceiver.class);
 
     /**
      * The string manager for this package.

==================================================
NioSender.java
index 54e482c3ed..e16d12af43 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioReplicationTask.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioReplicationTask.java
@@ -55,7 +55,7 @@ import org.apache.catalina.tribes.util.Logs;
  */
 public class NioReplicationTask extends AbstractRxTask {
 
-    private static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( NioReplicationTask.class );
+    private static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog( NioReplicationTask.class );
 
     private ByteBuffer buffer = null;
     private SelectionKey key;

==================================================
ParallelNioSender.java
index 43129ae132..a90c46d4e6 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioSender.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioSender.java
@@ -49,7 +49,7 @@ import java.net.*;
  */
 public class NioSender extends AbstractSender implements DataSender{
 
-    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(NioSender.class);
+    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(NioSender.class);
 
 
 

==================================================
Logs.java
index d743fb7756..e44442dbb0 100644
--- a/java/org/apache/catalina/tribes/transport/nio/ParallelNioSender.java
+++ b/java/org/apache/catalina/tribes/transport/nio/ParallelNioSender.java
@@ -50,7 +50,7 @@ import org.apache.catalina.tribes.UniqueId;
  */
 public class ParallelNioSender extends AbstractSender implements MultiPointSender {
 
-    protected static org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ParallelNioSender.class);
+    protected static final org.apache.juli.logging.Log log = org.apache.juli.logging.LogFactory.getLog(ParallelNioSender.class);
     protected long selectTimeout = 5000; //default 5 seconds, same as send timeout
     protected Selector selector;
     protected HashMap<Member, NioSender> nioSenders =

==================================================
ExtensionValidator.java
index 23b1d34590..1655f45f98 100644
--- a/java/org/apache/catalina/tribes/util/Logs.java
+++ b/java/org/apache/catalina/tribes/util/Logs.java
@@ -25,5 +25,5 @@ import org.apache.juli.logging.LogFactory;
  * @version 1.0
  */
 public class Logs {
-    public static Log MESSAGES = LogFactory.getLog( "org.apache.catalina.tribes.MESSAGES" );
+    public static final Log MESSAGES = LogFactory.getLog( "org.apache.catalina.tribes.MESSAGES" );
 }

==================================================
AjpAprProcessor.java
index 0368fba395..5fed5ac292 100644
--- a/java/org/apache/catalina/util/ExtensionValidator.java
+++ b/java/org/apache/catalina/util/ExtensionValidator.java
@@ -53,7 +53,7 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public final class ExtensionValidator {
 
-    private static org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog(ExtensionValidator.class);
 
     /**

==================================================
AjpAprProtocol.java
index e3924e5e3c..002f30286b 100644
--- a/java/org/apache/coyote/ajp/AjpAprProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpAprProcessor.java
@@ -61,7 +61,7 @@ public class AjpAprProcessor implements ActionHook {
     /**
      * Logger.
      */
-    protected static org.apache.juli.logging.Log log
+    protected static final org.apache.juli.logging.Log log
         = org.apache.juli.logging.LogFactory.getLog(AjpAprProcessor.class);
 
     /**

==================================================
AjpMessage.java
index 5f4e80dbe1..68e47fedcd 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -54,7 +54,7 @@ public class AjpAprProtocol
     implements ProtocolHandler, MBeanRegistration {
     
     
-    protected static org.apache.juli.logging.Log log =
+    protected static final org.apache.juli.logging.Log log =
         org.apache.juli.logging.LogFactory.getLog(AjpAprProtocol.class);
 
     /**

==================================================
AjpProcessor.java
index 86196bb7e7..a66d6c92d2 100644
--- a/java/org/apache/coyote/ajp/AjpMessage.java
+++ b/java/org/apache/coyote/ajp/AjpMessage.java
@@ -38,7 +38,7 @@ import org.apache.tomcat.util.res.StringManager;
 public class AjpMessage {
 
 
-    protected static org.apache.juli.logging.Log log =
+    protected static final org.apache.juli.logging.Log log =
         org.apache.juli.logging.LogFactory.getLog(AjpMessage.class);
 
     /**

==================================================
AjpProtocol.java
index 198522fd54..dd5ffaf5ec 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -61,7 +61,7 @@ public class AjpProcessor implements ActionHook {
     /**
      * Logger.
      */
-    protected static org.apache.juli.logging.Log log
+    protected static final org.apache.juli.logging.Log log
         = org.apache.juli.logging.LogFactory.getLog(AjpProcessor.class);
 
     /**

==================================================
AbstractHttp11Processor.java
index 1f2df99f25..91e62408c9 100644
--- a/java/org/apache/coyote/ajp/AjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpProtocol.java
@@ -55,7 +55,7 @@ public class AjpProtocol
     implements ProtocolHandler, MBeanRegistration {
     
     
-    protected static org.apache.juli.logging.Log log =
+    protected static final org.apache.juli.logging.Log log =
         org.apache.juli.logging.LogFactory.getLog(AjpProtocol.class);
 
     /**

==================================================
Http11AprProcessor.java
index e3592926e8..641e412ea7 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -33,7 +33,7 @@ public class AbstractHttp11Processor {
     /**
      * Logger.
      */
-    protected static org.apache.juli.logging.Log log
+    protected static final org.apache.juli.logging.Log log
         = org.apache.juli.logging.LogFactory.getLog(AbstractHttp11Processor.class);
 
     /**

==================================================
Http11AprProtocol.java
index 4a2c42080c..51df03842b 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -69,7 +69,7 @@ public class Http11AprProcessor implements ActionHook {
     /**
      * Logger.
      */
-    protected static org.apache.juli.logging.Log log
+    protected static final org.apache.juli.logging.Log log
         = org.apache.juli.logging.LogFactory.getLog(Http11AprProcessor.class);
 
     /**

==================================================
Http11NioProtocol.java
index 86b73fc324..143ff104a6 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -53,7 +53,7 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration {
 
-    protected static org.apache.juli.logging.Log log = 
+    protected static final org.apache.juli.logging.Log log = 
         org.apache.juli.logging.LogFactory.getLog(Http11AprProtocol.class);
 
     /**

==================================================
Http11Protocol.java
index 55550ebe1c..00dfe5b93a 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -465,7 +465,7 @@ public class Http11NioProtocol extends AbstractHttp11Protocol {
     
 
 
-    protected static org.apache.juli.logging.Log log
+    protected static final org.apache.juli.logging.Log log
         = org.apache.juli.logging.LogFactory.getLog(Http11NioProtocol.class);
 
 }

==================================================
JspCompilationContext.java
index ac54e302d1..12ac2c8b10 100644
--- a/java/org/apache/coyote/http11/Http11Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Protocol.java
@@ -47,7 +47,7 @@ import org.apache.tomcat.util.net.JIoEndpoint.Handler;
 public class Http11Protocol extends AbstractHttp11Protocol {
 
 
-    protected static org.apache.juli.logging.Log log
+    protected static final org.apache.juli.logging.Log log
         = org.apache.juli.logging.LogFactory.getLog(Http11Protocol.class);
 
 

==================================================
SmapUtil.java
index 9bf67f150c..4c8d3c31dc 100644
--- a/java/org/apache/jasper/JspCompilationContext.java
+++ b/java/org/apache/jasper/JspCompilationContext.java
@@ -53,7 +53,7 @@ import org.apache.jasper.servlet.JspServletWrapper;
  */
 public class JspCompilationContext {
 
-    protected org.apache.juli.logging.Log log =
+    protected final org.apache.juli.logging.Log log =
         org.apache.juli.logging.LogFactory.getLog(JspCompilationContext.class);
 
     protected Map<String, URL> tagFileJarUrls;

==================================================
SecurityClassLoad.java
index 6f5ff343ba..ebaf02c2ba 100644
--- a/java/org/apache/jasper/compiler/SmapUtil.java
+++ b/java/org/apache/jasper/compiler/SmapUtil.java
@@ -178,7 +178,7 @@ public class SmapUtil {
     // Installation logic (from Robert Field, JSR-045 spec lead)
     private static class SDEInstaller {
 
-        private org.apache.juli.logging.Log log=
+        private final org.apache.juli.logging.Log log=
             org.apache.juli.logging.LogFactory.getLog( SDEInstaller.class );
 
         static final String nameSDE = "SourceDebugExtension";

==================================================
UCSReader.java
index 6c7cfc347c..00912035dc 100644
--- a/java/org/apache/jasper/security/SecurityClassLoad.java
+++ b/java/org/apache/jasper/security/SecurityClassLoad.java
@@ -28,7 +28,7 @@ package org.apache.jasper.security;
 
 public final class SecurityClassLoad {
 
-    private static org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( SecurityClassLoad.class );
 
     public static void securityClassLoad(ClassLoader loader){

==================================================
UTF8Reader.java
index d989b99bbd..d0de96528e 100644
--- a/java/org/apache/jasper/xmlparser/UCSReader.java
+++ b/java/org/apache/jasper/xmlparser/UCSReader.java
@@ -31,7 +31,7 @@ import java.io.Reader;
  */
 public class UCSReader extends Reader {
 
-    private org.apache.juli.logging.Log log=
+    private final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( UCSReader.class );
     
     //

==================================================
NamingContext.java
index ccbec219b8..d68b9f1e1a 100644
--- a/java/org/apache/jasper/xmlparser/UTF8Reader.java
+++ b/java/org/apache/jasper/xmlparser/UTF8Reader.java
@@ -31,7 +31,7 @@ import org.apache.jasper.compiler.Localizer;
 public class UTF8Reader
     extends Reader {
 
-    private org.apache.juli.logging.Log log=
+    private final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( UTF8Reader.class );
     
     //

==================================================
SelectorContext.java
index 8a5060c83b..7ca63e2b74 100644
--- a/java/org/apache/naming/NamingContext.java
+++ b/java/org/apache/naming/NamingContext.java
@@ -58,7 +58,7 @@ public class NamingContext implements Context {
     protected static final NameParser nameParser = new NameParserImpl();
 
 
-    private static org.apache.juli.logging.Log log =
+    private static final org.apache.juli.logging.Log log =
         org.apache.juli.logging.LogFactory.getLog(NamingContext.class);
 
 

==================================================
FileDirContext.java
index 1fa5c0b01f..eaff03f2c4 100644
--- a/java/org/apache/naming/SelectorContext.java
+++ b/java/org/apache/naming/SelectorContext.java
@@ -59,7 +59,7 @@ public class SelectorContext implements Context {
     public static final String IC_PREFIX = "IC_";
 
 
-    private static org.apache.juli.logging.Log log =
+    private static final org.apache.juli.logging.Log log =
         org.apache.juli.logging.LogFactory.getLog(SelectorContext.class);
 
     // ----------------------------------------------------------- Constructors

==================================================
WARDirContext.java
index 4da3169aa0..9b556fe4e9 100644
--- a/java/org/apache/naming/resources/FileDirContext.java
+++ b/java/org/apache/naming/resources/FileDirContext.java
@@ -54,7 +54,7 @@ import org.apache.naming.NamingEntry;
 
 public class FileDirContext extends BaseDirContext {
 
-    private static org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( FileDirContext.class );
 
     // -------------------------------------------------------------- Constants

==================================================
DomUtil.java
index 1aef0eda88..1c975b70dc 100644
--- a/java/org/apache/naming/resources/WARDirContext.java
+++ b/java/org/apache/naming/resources/WARDirContext.java
@@ -56,7 +56,7 @@ import org.apache.naming.NamingEntry;
 
 public class WARDirContext extends BaseDirContext {
 
-    private static org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( WARDirContext.class );
     
     // ----------------------------------------------------------- Constructors

==================================================
IntrospectionUtils.java
index 900b3344b8..059353ee80 100644
--- a/java/org/apache/tomcat/util/DomUtil.java
+++ b/java/org/apache/tomcat/util/DomUtil.java
@@ -45,7 +45,7 @@ import org.xml.sax.SAXException;
  * @author Costin Manolache
  */
 public class DomUtil {
-    private static org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( DomUtil.class );
 
     // -------------------- DOM utils --------------------

==================================================
B2CConverter.java
index 225969e1cc..9d750a61f1 100644
--- a/java/org/apache/tomcat/util/IntrospectionUtils.java
+++ b/java/org/apache/tomcat/util/IntrospectionUtils.java
@@ -38,7 +38,7 @@ import java.util.Vector;
 public final class IntrospectionUtils {
 
     
-    private static org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( IntrospectionUtils.class );
     
     /**

==================================================
C2BConverter.java
index 18c77affa5..1b40f4a385 100644
--- a/java/org/apache/tomcat/util/buf/B2CConverter.java
+++ b/java/org/apache/tomcat/util/buf/B2CConverter.java
@@ -37,7 +37,7 @@ import java.io.UnsupportedEncodingException;
 public class B2CConverter {
     
     
-    private static org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( B2CConverter.class );
     
     private IntermediateInputStream iis;

==================================================
StringCache.java
index eec29e7226..35ab8c0289 100644
--- a/java/org/apache/tomcat/util/buf/C2BConverter.java
+++ b/java/org/apache/tomcat/util/buf/C2BConverter.java
@@ -31,7 +31,7 @@ import java.io.UnsupportedEncodingException;
  */
 public final class C2BConverter {
     
-    private static org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog(C2BConverter.class );
     
     private IntermediateOutputStream ios;

==================================================
UEncoder.java
index 57a64f501f..e6d650e86a 100644
--- a/java/org/apache/tomcat/util/buf/StringCache.java
+++ b/java/org/apache/tomcat/util/buf/StringCache.java
@@ -30,7 +30,7 @@ import java.util.TreeMap;
 public class StringCache {
 
 
-    private static org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog( StringCache.class );
     
     

==================================================
Cookies.java
index bbb9f1794f..ba30b7f32f 100644
--- a/java/org/apache/tomcat/util/buf/UEncoder.java
+++ b/java/org/apache/tomcat/util/buf/UEncoder.java
@@ -34,7 +34,7 @@ import java.util.BitSet;
  */
 public final class UEncoder {
 
-    private static org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog(UEncoder.class );
     
     // Not static - the set may differ ( it's better than adding

==================================================
Parameters.java
index 290422bcc4..01d5bae6c4 100644
--- a/java/org/apache/tomcat/util/http/Cookies.java
+++ b/java/org/apache/tomcat/util/http/Cookies.java
@@ -34,7 +34,7 @@ import org.apache.tomcat.util.buf.MessageBytes;
  */
 public final class Cookies { // extends MultiMap {
 
-    private static org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog(Cookies.class );
     
     // expected average number of cookies per request

==================================================
Mapper.java
index 37bf2f36b7..2566da18d8 100644
--- a/java/org/apache/tomcat/util/http/Parameters.java
+++ b/java/org/apache/tomcat/util/http/Parameters.java
@@ -35,7 +35,7 @@ import org.apache.tomcat.util.collections.MultiMap;
 public final class Parameters extends MultiMap {
 
     
-    private static org.apache.juli.logging.Log log=
+    private static final org.apache.juli.logging.Log log=
         org.apache.juli.logging.LogFactory.getLog(Parameters.class );
     
     // Transition: we'll use the same Hashtable( String->String[] )

==================================================
SSLImplementation.java
index fe8dd68159..773fcc4e08 100644
--- a/java/org/apache/tomcat/util/http/mapper/Mapper.java
+++ b/java/org/apache/tomcat/util/http/mapper/Mapper.java
@@ -35,7 +35,7 @@ import java.util.ArrayList;
 public final class Mapper {
 
 
-    private static org.apache.juli.logging.Log logger =
+    private static final org.apache.juli.logging.Log logger =
         org.apache.juli.logging.LogFactory.getLog(Mapper.class);
     // ----------------------------------------------------- Instance Variables
 

==================================================
JSSEImplementation.java
index 8df514fad4..0627ef77bf 100644
--- a/java/org/apache/tomcat/util/net/SSLImplementation.java
+++ b/java/org/apache/tomcat/util/net/SSLImplementation.java
@@ -28,7 +28,7 @@ import javax.net.ssl.SSLSession;
    @author EKR
 */
 abstract public class SSLImplementation {
-    private static org.apache.juli.logging.Log logger =
+    private static final org.apache.juli.logging.Log logger =
         org.apache.juli.logging.LogFactory.getLog(SSLImplementation.class);
 
     // The default implementations in our search path

==================================================
JSSESocketFactory.java
index b8687b3f34..64e4011a20 100644
--- a/java/org/apache/tomcat/util/net/jsse/JSSEImplementation.java
+++ b/java/org/apache/tomcat/util/net/jsse/JSSEImplementation.java
@@ -35,7 +35,7 @@ public class JSSEImplementation extends SSLImplementation
 {
     static final String SSLSocketClass = "javax.net.ssl.SSLSocket";
 
-    static org.apache.juli.logging.Log logger = 
+    static final org.apache.juli.logging.Log logger = 
         org.apache.juli.logging.LogFactory.getLog(JSSEImplementation.class);
 
     private JSSEFactory factory = null;

==================================================
JSSESupport.java
index 6eb614135e..1f2dee2728 100644
--- a/java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java
+++ b/java/org/apache/tomcat/util/net/jsse/JSSESocketFactory.java
@@ -95,7 +95,7 @@ public class JSSESocketFactory
     private static final int defaultSessionCacheSize = 0;
     private static final int defaultSessionTimeout = 86400;
     
-    static org.apache.juli.logging.Log log =
+    static final org.apache.juli.logging.Log log =
         org.apache.juli.logging.LogFactory.getLog(JSSESocketFactory.class);
 
     protected boolean initialized;

==================================================
BaseMapper.java
index a3562b5050..89247486d3 100644
--- a/java/org/apache/tomcat/util/net/jsse/JSSESupport.java
+++ b/java/org/apache/tomcat/util/net/jsse/JSSESupport.java
@@ -51,7 +51,7 @@ import org.apache.tomcat.util.net.SSLSupport;
 
 class JSSESupport implements SSLSupport, SSLSessionManager {
     
-    private static org.apache.juli.logging.Log log =
+    private static final org.apache.juli.logging.Log log =
         org.apache.juli.logging.LogFactory.getLog(JSSESupport.class);
 
     protected SSLSocket ssl;

==================================================
IntrospectionUtils.java
index 201c3c31f3..c9c9f671d4 100644
--- a/modules/tomcat-lite/java/org/apache/tomcat/util/http/mapper/BaseMapper.java
+++ b/modules/tomcat-lite/java/org/apache/tomcat/util/http/mapper/BaseMapper.java
@@ -39,7 +39,7 @@ public class BaseMapper {
 
 
 
-    private static org.apache.juli.logging.Log logger =
+    private static final org.apache.juli.logging.Log logger =
         org.apache.juli.logging.LogFactory.getLog(Mapper.class);
     // ----------------------------------------------------- Instance Variables
 

==================================================
