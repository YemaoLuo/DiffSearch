7d73f7fec46e422befb90cc504df0e9f0571cfaa
==================================================
- Pull default "unsupported" async methods implementation up, since it looks unlikely it ever makes sense to use them with APR or NIO.
==================================================
Remy Maucherat
==================================================
Wed Feb 3 10:23:33 2016 +0000
==================================================
AprEndpoint.java
- Pull default "unsupported" async methods implementation up, since it looks unlikely it ever makes sense to use them with APR or NIO.
- Add some new helpers. It is possible that I'll add some sync oriented helpers, but unsure yet.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1728292 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Nio2Endpoint.java
index 1b179575a9..6bee7b32ab 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -20,7 +20,6 @@ import java.io.EOFException;
 import java.io.IOException;
 import java.net.SocketTimeoutException;
 import java.nio.ByteBuffer;
-import java.nio.channels.CompletionHandler;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -30,7 +29,6 @@ import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Executor;
 import java.util.concurrent.RejectedExecutionException;
-import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
@@ -2634,12 +2632,6 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
         }
 
 
-        @Override
-        public boolean isReadPending() {
-            return false;
-        }
-
-
         @Override
         public void registerReadInterest() {
             // Make sure an already closed socket is not added to the poller
@@ -2793,30 +2785,5 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
             SSLSocket.setVerify(socket, SSL.SSL_CVERIFY_REQUIRE, -1);
             SSLSocket.renegotiate(socket);
         }
-
-
-        @Override
-        public boolean isWritePending() {
-            return false;
-        }
-
-
-        @Override
-        public <A> CompletionState read(ByteBuffer[] dsts, int offset,
-                int length, boolean block, long timeout, TimeUnit unit,
-                A attachment, CompletionCheck check,
-                CompletionHandler<Long, ? super A> handler) {
-            // TODO Auto-generated method stub
-            throw new UnsupportedOperationException();
-        }
-
-        @Override
-        public <A> CompletionState write(ByteBuffer[] srcs, int offset,
-                int length, boolean block, long timeout, TimeUnit unit,
-                A attachment, CompletionCheck check,
-                CompletionHandler<Long, ? super A> handler) {
-            // TODO Auto-generated method stub
-            throw new UnsupportedOperationException();
-        }
     }
 }

==================================================
NioEndpoint.java
index eea9e47174..5d65784c65 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -1107,6 +1107,9 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
                 } else {
                     throw new ReadPendingException();
                 }
+                if (block && state.state == CompletionState.PENDING && readPending.tryAcquire(timeout, unit)) {
+                    readPending.release();
+                }
             } catch (InterruptedException e) {
                 handler.failed(e, attachment);
             }
@@ -1337,6 +1340,32 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
             }
         }
 
+
+        @Override
+        public boolean awaitReadComplete(long timeout, TimeUnit unit) {
+            try {
+                if (readPending.tryAcquire(timeout, unit)) {
+                    readPending.release();
+                }
+            } catch (InterruptedException e) {
+                return false;
+            }
+            return true;
+        }
+
+
+        @Override
+        public boolean awaitWriteComplete(long timeout, TimeUnit unit) {
+            try {
+                if (writePending.tryAcquire(timeout, unit)) {
+                    writePending.release();
+                }
+            } catch (InterruptedException e) {
+                return false;
+            }
+            return true;
+        }
+
         /*
          * This should only be called from a thread that currently holds a lock
          * on the socket. This prevents a race condition between a pending read

==================================================
SocketWrapperBase.java
index 116476ad43..773cd421e3 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -27,7 +27,6 @@ import java.net.Socket;
 import java.net.SocketTimeoutException;
 import java.nio.ByteBuffer;
 import java.nio.channels.CancelledKeyException;
-import java.nio.channels.CompletionHandler;
 import java.nio.channels.FileChannel;
 import java.nio.channels.SelectionKey;
 import java.nio.channels.Selector;
@@ -1314,12 +1313,6 @@ public class NioEndpoint extends AbstractJsseEndpoint<NioChannel> {
         }
 
 
-        @Override
-        public boolean isReadPending() {
-            return false;
-        }
-
-
         @Override
         public void registerReadInterest() {
             getPoller().add(getSocket(), SelectionKey.OP_READ);
@@ -1430,29 +1423,6 @@ public class NioEndpoint extends AbstractJsseEndpoint<NioChannel> {
                 }
             }
         }
-
-        @Override
-        public boolean isWritePending() {
-            return false;
-        }
-
-        @Override
-        public <A> CompletionState read(ByteBuffer[] dsts, int offset,
-                int length, boolean block, long timeout, TimeUnit unit,
-                A attachment, CompletionCheck check,
-                CompletionHandler<Long, ? super A> handler) {
-            // TODO Auto-generated method stub
-            throw new UnsupportedOperationException();
-        }
-
-        @Override
-        public <A> CompletionState write(ByteBuffer[] srcs, int offset,
-                int length, boolean block, long timeout, TimeUnit unit,
-                A attachment, CompletionCheck check,
-                CompletionHandler<Long, ? super A> handler) {
-            // TODO Auto-generated method stub
-            throw new UnsupportedOperationException();
-        }
     }
 
 

==================================================
