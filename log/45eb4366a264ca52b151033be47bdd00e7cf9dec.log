45eb4366a264ca52b151033be47bdd00e7cf9dec
==================================================
Make the Context available to the auth modules.
==================================================
Mark Thomas
==================================================
Fri Jul 3 18:54:29 2015 +0000
==================================================
TomcatAuthConfig.java
Make the Context available to the auth modules.
Patch by fjodorver

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1689058 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TomcatAuthConfigProvider.java
index 7099288de6..7bb7bee4a7 100644
--- a/java/org/apache/catalina/authenticator/jaspic/provider/TomcatAuthConfig.java
+++ b/java/org/apache/catalina/authenticator/jaspic/provider/TomcatAuthConfig.java
@@ -26,6 +26,7 @@ import javax.security.auth.message.MessageInfo;
 import javax.security.auth.message.config.ServerAuthConfig;
 import javax.security.auth.message.config.ServerAuthContext;
 
+import org.apache.catalina.Context;
 import org.apache.catalina.Realm;
 import org.apache.catalina.authenticator.jaspic.provider.modules.BasicAuthModule;
 import org.apache.catalina.authenticator.jaspic.provider.modules.DigestAuthModule;
@@ -41,17 +42,20 @@ public class TomcatAuthConfig implements ServerAuthConfig {
     private String appContext;
     private CallbackHandler handler;
     private TomcatServerAuthContext tomcatServerAuthContext;
-    private Realm realm;
+
+    private Context context;
     private LoginConfig loginConfig;
+    private Realm realm;
 
 
     public TomcatAuthConfig(String layer, String appContext, CallbackHandler callbackHandler,
-            Realm realm, LoginConfig loginConfig) {
+            Context context) {
         this.messageLayer = layer;
         this.appContext = appContext;
         this.handler = callbackHandler;
-        this.realm = realm;
-        this.loginConfig = loginConfig;
+        this.context = context;
+        this.realm = context.getRealm();
+        this.loginConfig = context.getLoginConfig();
     }
 
 
@@ -108,13 +112,13 @@ public class TomcatAuthConfig implements ServerAuthConfig {
         String authMethod = getAuthMethod();
         switch (authMethod) {
         case "BASIC": {
-            return new BasicAuthModule();
+            return new BasicAuthModule(context);
         }
         case "DIGEST": {
-            return new DigestAuthModule(realm);
+            return new DigestAuthModule(context);
         }
         case "FORM": {
-            return new FormAuthModule();
+            return new FormAuthModule(context);
         }
         default: {
             throw new AuthException(

==================================================
BasicAuthModule.java
index 130a594454..1780d2ce00 100644
--- a/java/org/apache/catalina/authenticator/jaspic/provider/TomcatAuthConfigProvider.java
+++ b/java/org/apache/catalina/authenticator/jaspic/provider/TomcatAuthConfigProvider.java
@@ -26,24 +26,20 @@ import javax.security.auth.message.config.ClientAuthConfig;
 import javax.security.auth.message.config.ServerAuthConfig;
 
 import org.apache.catalina.Context;
-import org.apache.catalina.Realm;
-import org.apache.tomcat.util.descriptor.web.LoginConfig;
 
 /**
- * Tomcat's context based JASPIC authentication provider. It returns authentication
- * modules depending on context login-config setup.
+ * Tomcat's context based JASPIC authentication provider. It returns
+ * authentication modules depending on context login-config setup.
  */
 public class TomcatAuthConfigProvider implements AuthConfigProvider {
 
     private Map<String, String> providerProperties;
     private ServerAuthConfig serverAuthConfig;
-    private Realm realm;
-    private LoginConfig loginConfig;
+    private Context context;
 
 
     public TomcatAuthConfigProvider(Context context) {
-        this.realm = context.getRealm();
-        this.loginConfig = context.getLoginConfig();
+        this.context = context;
     }
 
 
@@ -66,7 +62,7 @@ public class TomcatAuthConfigProvider implements AuthConfigProvider {
     public synchronized ServerAuthConfig getServerAuthConfig(String layer, String appContext,
             CallbackHandler handler) throws AuthException {
         if (this.serverAuthConfig == null) {
-            this.serverAuthConfig = new TomcatAuthConfig(layer, appContext, handler, realm, loginConfig);
+            this.serverAuthConfig = new TomcatAuthConfig(layer, appContext, handler, context);
         }
         return this.serverAuthConfig;
     }

==================================================
DigestAuthModule.java
index 5626a268b2..f044fdbbd0 100644
--- a/java/org/apache/catalina/authenticator/jaspic/provider/modules/BasicAuthModule.java
+++ b/java/org/apache/catalina/authenticator/jaspic/provider/modules/BasicAuthModule.java
@@ -35,6 +35,7 @@ import javax.security.auth.message.callback.PasswordValidationCallback;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import org.apache.catalina.Context;
 import org.apache.catalina.realm.GenericPrincipal;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
@@ -48,6 +49,12 @@ public class BasicAuthModule extends TomcatAuthModule {
     private Class<?>[] supportedMessageTypes = new Class[] { HttpServletRequest.class,
             HttpServletResponse.class };
 
+
+    public BasicAuthModule(Context context) {
+        super(context);
+    }
+
+
     @SuppressWarnings("rawtypes")
     @Override
     public void initializeModule(MessagePolicy requestPolicy, MessagePolicy responsePolicy,
@@ -114,8 +121,8 @@ public class BasicAuthModule extends TomcatAuthModule {
 
 
     private GenericPrincipal getPrincipal(PasswordValidationCallback passwordCallback) {
-        Iterator<Object> credentials =
-                passwordCallback.getSubject().getPrivateCredentials().iterator();
+        Iterator<Object> credentials = passwordCallback.getSubject().getPrivateCredentials()
+                .iterator();
         return (GenericPrincipal) credentials.next();
     }
 
@@ -147,7 +154,6 @@ public class BasicAuthModule extends TomcatAuthModule {
         return supportedMessageTypes;
     }
 
-
     /**
      * Parser for an HTTP Authorization header for BASIC authentication as per
      * RFC 2617 section 2, and the Base64 encoded credentials as per RFC 2045
@@ -167,14 +173,15 @@ public class BasicAuthModule extends TomcatAuthModule {
         private String username = null;
         private String password = null;
 
+
         /**
          * Parse the HTTP Authorization header for BASIC authentication as per
          * RFC 2617 section 2, and the Base64 encoded credentials as per RFC
          * 2045 section 6.8.
          *
          * @param input The header value to parse in-place
-         * @throws IllegalArgumentException If the header does not conform to RFC
-         *             2617
+         * @throws IllegalArgumentException If the header does not conform to
+         *             RFC 2617
          */
         public BasicCredentials(ByteChunk input) throws IllegalArgumentException {
             authorization = input;
@@ -184,6 +191,7 @@ public class BasicAuthModule extends TomcatAuthModule {
             parseCredentials(decoded);
         }
 
+
         /**
          * Trivial accessor.
          *
@@ -194,6 +202,7 @@ public class BasicAuthModule extends TomcatAuthModule {
             return username;
         }
 
+
         /**
          * Trivial accessor.
          *
@@ -204,6 +213,7 @@ public class BasicAuthModule extends TomcatAuthModule {
             return password;
         }
 
+
         /*
          * The authorization method string is case-insensitive and must have at
          * least one space character as a delimiter.
@@ -219,6 +229,7 @@ public class BasicAuthModule extends TomcatAuthModule {
             }
         }
 
+
         /*
          * Decode the base64-user-pass token, which RFC 2617 states can be
          * longer than the 76 characters per line limit defined in RFC 2045. The
@@ -236,6 +247,7 @@ public class BasicAuthModule extends TomcatAuthModule {
             return decoded;
         }
 
+
         /*
          * Extract the mandatory username token and separate it from the
          * optional password token. Tolerate surplus surrounding white space.

==================================================
FormAuthModule.java
index 202dbf7cc4..7d78db7d88 100644
--- a/java/org/apache/catalina/authenticator/jaspic/provider/modules/DigestAuthModule.java
+++ b/java/org/apache/catalina/authenticator/jaspic/provider/modules/DigestAuthModule.java
@@ -37,6 +37,7 @@ import javax.security.auth.message.callback.GroupPrincipalCallback;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import org.apache.catalina.Context;
 import org.apache.catalina.Realm;
 import org.apache.catalina.util.StandardSessionIdGenerator;
 import org.apache.juli.logging.Log;
@@ -109,8 +110,9 @@ public class DigestAuthModule extends TomcatAuthModule {
 
     // ------------------------------------------------------------- Properties
 
-    public DigestAuthModule(Realm realm) {
-        this.realm = realm;
+    public DigestAuthModule(Context context) {
+        super(context);
+        this.realm = context.getRealm();
     }
 
 

==================================================
TomcatAuthModule.java
index 5aaf8f366c..4f5fe1dbae 100644
--- a/java/org/apache/catalina/authenticator/jaspic/provider/modules/FormAuthModule.java
+++ b/java/org/apache/catalina/authenticator/jaspic/provider/modules/FormAuthModule.java
@@ -27,6 +27,7 @@ import javax.security.auth.message.MessagePolicy;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import org.apache.catalina.Context;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
@@ -42,12 +43,8 @@ public class FormAuthModule extends TomcatAuthModule {
     private String landingPage;
 
 
-    public FormAuthModule() {
-    }
-
-
-    public FormAuthModule(String landingPage) {
-        this.landingPage = landingPage;
+    public FormAuthModule(Context context) {
+        super(context);
     }
 
 

==================================================
