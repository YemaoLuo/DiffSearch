c03b9118ad4b92be727e59a3e33ad9bb3b9d6bea
==================================================
Address some TODOs
==================================================
Mark Emlyn
==================================================
Thu Jan 24 09:37:17 2013 +0000
==================================================
WsFrameBase.java
index ef812e4f5e..a70f269d23 100644
--- a/java/org/apache/tomcat/websocket/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/LocalStrings.properties
@@ -20,6 +20,7 @@ messageSendStateMachine.inProgress=Message will not be sent because the WebSocke
 # frames and therefore must be 123 bytes (not characters) or less in length.
 # Messages are encoded using UTF-8 where a single character may be encoded in
 # as many as 4 bytes.
+wsFrame.bufferToSmall=No async message support and buffer too small. Buffer size: [{0}], Message size: [{1}]
 wsFrame.byteToLongFail=Too many bytes ([{0}]) were provided to be converted into a long
 wsFrame.controlFragmented=A fragmented control frame was received but control frames may not be fragmented
 wsFrame.controlPayloadTooBig=A control frame was sent with a payload of size [{0}] which is larger than the maximum permitted of 125 bytes

==================================================
WsFrameClient.java
index ece2cdddc3..1fe031ffe1 100644
--- a/java/org/apache/tomcat/websocket/WsFrameBase.java
+++ b/java/org/apache/tomcat/websocket/WsFrameBase.java
@@ -41,7 +41,7 @@ public abstract class WsFrameBase {
             StringManager.getManager(Constants.PACKAGE_NAME);
 
     // Connection level attributes
-    private final WsSession wsSession;
+    protected final WsSession wsSession;
     protected final byte[] inputBuffer;
 
     // Attributes for control messages
@@ -493,10 +493,10 @@ public abstract class WsFrameBase {
                 return;
             }
             if (!usePartial() && (inputBuffer.length < payloadLength)) {
-                // TODO i18n - buffer too small
                 CloseReason cr = new CloseReason(CloseCodes.TOO_BIG,
-                        "Buffer size: [" + inputBuffer.length +
-                        "], payload size: [" + payloadLength + "]");
+                        sm.getString("wsFrame.bufferToSmall",
+                                Integer.valueOf(inputBuffer.length),
+                                Long.valueOf(payloadLength)));
                 wsSession.close(cr);
                 wsSession.onClose(cr);
                 throw new IOException(cr.getReasonPhrase());

==================================================
WsRemoteEndpointClient.java
index faca0f80be..827ccdc4ca 100644
--- a/java/org/apache/tomcat/websocket/WsFrameClient.java
+++ b/java/org/apache/tomcat/websocket/WsFrameClient.java
@@ -21,6 +21,9 @@ import java.nio.ByteBuffer;
 import java.nio.channels.AsynchronousSocketChannel;
 import java.nio.channels.CompletionHandler;
 
+import javax.websocket.CloseReason;
+import javax.websocket.CloseReason.CloseCodes;
+
 public class WsFrameClient extends WsFrameBase {
 
     private ByteBuffer response;
@@ -34,11 +37,11 @@ public class WsFrameClient extends WsFrameBase {
         this.channel = channel;
         this.handler = new WsFrameClientCompletionHandler();
 
-        tbd();
+        processSocketRead();
     }
 
 
-    private void tbd() throws IOException {
+    private void processSocketRead() throws IOException {
 
         while (response.hasRemaining()) {
             int remaining = response.remaining();
@@ -74,16 +77,25 @@ public class WsFrameClient extends WsFrameBase {
         public void completed(Integer result, Void attachment) {
             response.flip();
             try {
-                tbd();
+                processSocketRead();
             } catch (IOException e) {
-                // TODO Auto-generated catch block
-                e.printStackTrace();
+                close(e);
             }
         }
 
         @Override
         public void failed(Throwable exc, Void attachment) {
-            // TODO Auto-generated method stub
+            close(exc);
+        }
+
+        private final void close(Throwable t) {
+            CloseReason cr = new CloseReason(
+                    CloseCodes.CLOSED_ABNORMALLY, t.getMessage());
+            try {
+                wsSession.close(cr);
+            } catch (IOException ignore) {
+                // Ignore
+            }
         }
     }
 }

==================================================
