0a85a9fc0fc42835902bc66541ed887a26b636f6
==================================================
Copy JASPIC 1.0 API from Geronimo
==================================================
Mark Thomas
==================================================
Mon Jun 8 11:00:19 2015 +0000
==================================================
AuthException.java
Copy JASPIC 1.0 API from Geronimo
This copy is unchanged so there are numerous Checkstyle issues that need to be fixed

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1684144 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AuthStatus.java
new file mode 100644
index 0000000000..d52086c0c7
--- /dev/null
+++ b/java/javax/security/auth/message/AuthException.java
@@ -0,0 +1,33 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package javax.security.auth.message;
+
+import javax.security.auth.login.LoginException;
+
+/**
+ * @version $Rev$ $Date$
+ */
+public class AuthException extends LoginException {
+    private static final long serialVersionUID = -1156951780670243758L;
+    
+    public AuthException() {
+    }
+
+    public AuthException(String msg) {
+        super(msg);
+    }
+}

==================================================
ClientAuth.java
new file mode 100644
index 0000000000..b329f7a992
--- /dev/null
+++ b/java/javax/security/auth/message/AuthStatus.java
@@ -0,0 +1,39 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package javax.security.auth.message;
+
+/**
+ * @version $Rev$ $Date$
+ */
+public class AuthStatus {
+
+    public static final AuthStatus FAILURE = new AuthStatus("FAILURE");
+    public static final AuthStatus SEND_CONTINUE = new AuthStatus("SEND_CONTINUE");
+    public static final AuthStatus SEND_FAILURE = new AuthStatus("SEND_FAILURE");
+    public static final AuthStatus SEND_SUCCESS = new AuthStatus("SEND_SUCCESS");
+    public static final AuthStatus SUCCESS = new AuthStatus("SUCCESS");
+
+    private final String name;
+
+    private AuthStatus(String name) {
+        this.name = name;
+    }
+
+    public String toString() {
+        return name;
+    }
+}

==================================================
MessageInfo.java
new file mode 100644
index 0000000000..3537262a0f
--- /dev/null
+++ b/java/javax/security/auth/message/ClientAuth.java
@@ -0,0 +1,31 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package javax.security.auth.message;
+
+import javax.security.auth.Subject;
+
+/**
+ * @version $Rev$ $Date$
+ */
+public interface ClientAuth {
+
+    void cleanSubject(MessageInfo messageInfo, Subject subject) throws AuthException;
+
+    AuthStatus secureRequest(MessageInfo messageInfo, Subject clientSubject) throws AuthException;
+
+    AuthStatus validateResponse(MessageInfo messageInfo, Subject clientSubject, Subject serviceSubject) throws AuthException;
+}

==================================================
MessagePolicy.java
new file mode 100644
index 0000000000..d17fddc0d3
--- /dev/null
+++ b/java/javax/security/auth/message/MessageInfo.java
@@ -0,0 +1,35 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package javax.security.auth.message;
+
+import java.util.Map;
+
+/**
+ * @version $Rev$ $Date: $
+ */
+public interface MessageInfo {
+
+    Map getMap();
+
+    Object getRequestMessage();
+
+    Object getResponseMessage();
+
+    void setRequestMessage(Object request);
+
+    void setResponseMessage(Object response);
+}

==================================================
ServerAuth.java
new file mode 100644
index 0000000000..baca224280
--- /dev/null
+++ b/java/javax/security/auth/message/MessagePolicy.java
@@ -0,0 +1,88 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package javax.security.auth.message;
+
+/**
+ * @version $Rev$ $Date$
+ */
+public class MessagePolicy {
+
+    private final TargetPolicy[] targetPolicies;
+    private final boolean mandatory;
+
+    public MessagePolicy(TargetPolicy[] targetPolicies, boolean mandatory) throws IllegalArgumentException {
+        if (targetPolicies == null) {
+            throw new IllegalArgumentException("targetPolicies is null");
+        }
+        this.targetPolicies = targetPolicies;
+        this.mandatory = mandatory;
+    }
+
+    public TargetPolicy[] getTargetPolicies() {
+        if (targetPolicies.length == 0) {
+            return null;
+        }
+        return targetPolicies;
+    }
+
+    public boolean isMandatory() {
+        return mandatory;
+    }
+
+    public static interface ProtectionPolicy {
+
+        static String AUTHENTICATE_CONTENT = "#authenticateContent";
+        static String AUTHENTICATE_RECIPIENT = "#authenticateRecipient";
+        static String AUTHENTICATE_SENDER = "#authenticateSender";
+
+        String getID();
+    }
+
+    public static interface Target {
+
+        Object get(MessageInfo messageInfo);
+
+        void put(MessageInfo messageInfo, Object data);
+
+        void remove(MessageInfo messageInfo);
+    }
+
+    public static class TargetPolicy {
+
+        private final Target[] targets;
+        private final ProtectionPolicy protectionPolicy;
+
+        public TargetPolicy(Target[] targets, ProtectionPolicy protectionPolicy) throws IllegalArgumentException {
+            if (protectionPolicy == null) {
+                throw new IllegalArgumentException("protectionPolicy is null");
+            }
+            this.targets = targets;
+            this.protectionPolicy = protectionPolicy;
+        }
+
+        public Target[] getTargets() {
+            if (targets == null || targets.length == 0) {
+                return null;
+            }
+            return targets;
+        }
+
+        public ProtectionPolicy getProtectionPolicy() {
+            return protectionPolicy;
+        }
+    }
+}

==================================================
CallerPrincipalCallback.java
new file mode 100644
index 0000000000..f0795719c6
--- /dev/null
+++ b/java/javax/security/auth/message/ServerAuth.java
@@ -0,0 +1,31 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package javax.security.auth.message;
+
+import javax.security.auth.Subject;
+
+/**
+ * @version $Rev$ $Date$
+ */
+public interface ServerAuth {
+
+    void cleanSubject(MessageInfo messageInfo, Subject subject) throws AuthException;
+
+    AuthStatus secureResponse(MessageInfo messageInfo, Subject serviceSubject) throws AuthException;
+
+    AuthStatus validateRequest(MessageInfo messageInfo, Subject clientSubject, Subject serviceSubject) throws AuthException;
+}

==================================================
CertStoreCallback.java
new file mode 100644
index 0000000000..fe9fbdeab4
--- /dev/null
+++ b/java/javax/security/auth/message/callback/CallerPrincipalCallback.java
@@ -0,0 +1,57 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package javax.security.auth.message.callback;
+
+import javax.security.auth.Subject;
+import javax.security.auth.callback.Callback;
+import java.security.Principal;
+
+/**
+ * Callback that enables an authentication module to inform the runtime of the call principal or name of the caller principal.
+ *
+ * @version $Rev$ $Date$
+ */
+public class CallerPrincipalCallback implements Callback {
+
+    private final Subject subject;
+    private final Principal principal;
+    private final String name;
+
+    public CallerPrincipalCallback(Subject subject, Principal principal) {
+        this.subject = subject;
+        this.principal = principal;
+        this.name = null;
+    }
+
+    public CallerPrincipalCallback(Subject subject, String name) {
+        this.subject = subject;
+        this.principal = null;
+        this.name = name;
+    }
+
+    public Subject getSubject() {
+        return subject;
+    }
+
+    public Principal getPrincipal() {
+        return principal;
+    }
+
+    public String getName() {
+        return name;
+    }
+}

==================================================
GroupPrincipalCallback.java
new file mode 100644
index 0000000000..272e026971
--- /dev/null
+++ b/java/javax/security/auth/message/callback/CertStoreCallback.java
@@ -0,0 +1,38 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package javax.security.auth.message.callback;
+
+import javax.security.auth.callback.Callback;
+import java.security.cert.CertStore;
+
+/**
+ * Callback that enables a runtime to inform authentication modules of the CertStore to use.
+ * 
+ * @version $Rev$ $Date$
+ */
+public class CertStoreCallback implements Callback {
+
+    private CertStore certStore;
+
+    public CertStore getCertStore() {
+        return certStore;
+    }
+
+    public void setCertStore(CertStore certStore) {
+        this.certStore = certStore;
+    }
+}

==================================================
PasswordValidationCallback.java
new file mode 100644
index 0000000000..96e4e3c097
--- /dev/null
+++ b/java/javax/security/auth/message/callback/GroupPrincipalCallback.java
@@ -0,0 +1,44 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package javax.security.auth.message.callback;
+
+import javax.security.auth.Subject;
+import javax.security.auth.callback.Callback;
+
+/**
+ * Callback that enables an authentication module to inform the runtime of the groups a user is in.
+ * 
+ * @version $Rev$ $Date$
+ */
+public class GroupPrincipalCallback implements Callback {
+
+    private final Subject subject;
+    private final String[] groups;
+
+    public GroupPrincipalCallback(Subject subject, String[] groups) {
+        this.subject = subject;
+        this.groups = groups;
+    }
+
+    public Subject getSubject() {
+        return subject;
+    }
+
+    public String[] getGroups() {
+        return groups;
+    }
+}

==================================================
PrivateKeyCallback.java
new file mode 100644
index 0000000000..4de1194121
--- /dev/null
+++ b/java/javax/security/auth/message/callback/PasswordValidationCallback.java
@@ -0,0 +1,67 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package javax.security.auth.message.callback;
+
+import javax.security.auth.callback.Callback;
+import javax.security.auth.Subject;
+
+import java.util.Arrays;
+
+/**
+ * Callback that enables an authentication module to supply a username and password (to a runtime?) and determine if
+ * the result of validation.
+ * 
+ * @version $Rev$ $Date$
+ */
+public class PasswordValidationCallback implements Callback {
+
+    private final Subject subject;
+    private final String username;
+    private char[] password;
+    private boolean result;
+
+    public PasswordValidationCallback(Subject subject, String username, char[] password) {
+        this.subject = subject;
+        this.username = username;
+        this.password = password;
+    }
+
+    public Subject getSubject() {
+        return subject;
+    }
+
+    public String getUsername() {
+        return username;
+    }
+
+    public char[] getPassword() {
+        return password;
+    }
+
+    public void clearPassword() {
+        Arrays.fill(password, (char) 0);
+        password = new char[0];
+    }
+
+    public boolean getResult() {
+        return result;
+    }
+
+    public void setResult(boolean result) {
+        this.result = result;
+    }
+}

==================================================
SecretKeyCallback.java
new file mode 100644
index 0000000000..6874d539ae
--- /dev/null
+++ b/java/javax/security/auth/message/callback/PrivateKeyCallback.java
@@ -0,0 +1,125 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package javax.security.auth.message.callback;
+
+import javax.security.auth.callback.Callback;
+import javax.security.auth.x500.X500Principal;
+
+import java.math.BigInteger;
+import java.security.PrivateKey;
+import java.security.cert.Certificate;
+
+/**
+ * Callback that enables an authentication module to request a certificate chain and private key from the runtime.
+ * The information specifying the chain and key may be an alias, a digest, a subject key, or an issuer ID.
+ * Other request types may be supported.
+ *
+ * @version $Rev$ $Date$
+ */
+public class PrivateKeyCallback implements Callback {
+
+    private final Request request;
+    private Certificate[] chain;
+    private PrivateKey key;
+
+    public PrivateKeyCallback(Request request) {
+        this.request = request;
+    }
+
+    public Request getRequest() {
+        return request;
+    }
+
+    public Certificate[] getChain() {
+        return chain;
+    }
+
+    public PrivateKey getKey() {
+        return key;
+    }
+
+    public void setKey(PrivateKey key, Certificate[] chain) {
+        this.key = key;
+        this.chain = chain;
+    }
+
+    public static interface Request {
+    }
+
+    public static class AliasRequest implements Request {
+
+        private final String alias;
+
+        public AliasRequest(String alias) {
+            this.alias = alias;
+        }
+
+        public String getAlias() {
+            return alias;
+        }
+    }
+
+    public static class DigestRequest implements Request {
+        private final byte[] digest;
+        private final String algorithm;
+
+
+        public DigestRequest(byte[] digest, String algorithm) {
+            this.digest = digest;
+            this.algorithm = algorithm;
+        }
+
+        public byte[] getDigest() {
+            return digest;
+        }
+
+        public String getAlgorithm() {
+            return algorithm;
+        }
+    }
+
+    public static class SubjectKeyIDRequest implements Request {
+
+        private final byte[] subjectKeyID;
+
+        public SubjectKeyIDRequest(byte[] subjectKeyID) {
+            this.subjectKeyID = subjectKeyID;
+        }
+
+        public byte[] getSubjectKeyID() {
+            return subjectKeyID;
+        }
+    }
+
+    public static class IssuerSerialNumRequest implements Request {
+        private final X500Principal issuer;
+        private final BigInteger serialNum;
+
+        public IssuerSerialNumRequest(X500Principal issuer, BigInteger serialNum) {
+            this.issuer = issuer;
+            this.serialNum = serialNum;
+        }
+
+        public X500Principal getIssuer() {
+            return issuer;
+        }
+
+        public BigInteger getSerialNum() {
+            return serialNum;
+        }
+    }
+}

==================================================
TrustStoreCallback.java
new file mode 100644
index 0000000000..35312fdd4b
--- /dev/null
+++ b/java/javax/security/auth/message/callback/SecretKeyCallback.java
@@ -0,0 +1,64 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package javax.security.auth.message.callback;
+
+import javax.security.auth.callback.Callback;
+import javax.crypto.SecretKey;
+
+/**
+ * A callback enabling an authentication module to request a secret key from the runtime, by supplying an alias.
+ * Other request types may also be supported.
+ *
+ * @version $Rev$ $Date$
+ */
+public class SecretKeyCallback implements Callback {
+
+    private final Request request;
+    private SecretKey key;
+
+    public SecretKeyCallback(Request request) {
+        this.request = request;
+    }
+
+    public Request getRequest() {
+        return request;
+    }
+
+    public SecretKey getKey() {
+        return key;
+    }
+
+    public void setKey(SecretKey key) {
+        this.key = key;
+    }
+
+    public static interface Request {
+    }
+
+    public static class AliasRequest implements Request {
+
+        private final String alias;
+
+        public AliasRequest(String alias) {
+            this.alias = alias;
+        }
+
+        public String getAlias() {
+            return alias;
+        }
+    }
+}

==================================================
AuthConfig.java
new file mode 100644
index 0000000000..7f923e7f0c
--- /dev/null
+++ b/java/javax/security/auth/message/callback/TrustStoreCallback.java
@@ -0,0 +1,38 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package javax.security.auth.message.callback;
+
+import javax.security.auth.callback.Callback;
+import java.security.KeyStore;
+
+/**
+ * A Callback enabling an authentication module to request a truststore from the runtime.
+ *
+ * @version $Rev$ $Date$
+ */
+public class TrustStoreCallback implements Callback {
+
+    private KeyStore trustStore;
+
+    public KeyStore getTrustStore() {
+        return trustStore;
+    }
+
+    public void setTrustStore(KeyStore trustStore) {
+        this.trustStore = trustStore;
+    }
+}

==================================================
AuthConfigFactory.java
new file mode 100644
index 0000000000..976cadbc83
--- /dev/null
+++ b/java/javax/security/auth/message/config/AuthConfig.java
@@ -0,0 +1,36 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package javax.security.auth.message.config;
+
+import javax.security.auth.message.AuthException;
+import javax.security.auth.message.MessageInfo;
+
+/**
+ * @version $Rev$ $Date: $
+ */
+public interface AuthConfig {
+
+    String getAppContext();
+
+    String getAuthContextID(MessageInfo messageInfo) throws IllegalArgumentException;
+
+    String getMessageLayer();
+
+    boolean isProtected();
+
+    void refresh();
+}

==================================================
AuthConfigProvider.java
new file mode 100644
index 0000000000..60f75c4772
--- /dev/null
+++ b/java/javax/security/auth/message/config/AuthConfigFactory.java
@@ -0,0 +1,124 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package javax.security.auth.message.config;
+
+import java.security.PrivilegedActionException;
+import java.util.Map;
+
+import javax.security.auth.AuthPermission;
+import javax.security.auth.message.AuthException;
+
+import org.apache.geronimo.osgi.locator.ProviderLocator;
+
+/**
+ * @version $Rev$ $Date$
+ */
+public abstract class AuthConfigFactory {
+
+    public static final String DEFAULT_FACTORY_SECURITY_PROPERTY = "authconfigprovider.factory";
+    private static final String DEFAULT_JASPI_AUTHCONFIGFACTORYIMPL = "org.apache.geronimo.components.jaspi.AuthConfigFactoryImpl";
+
+    private static AuthConfigFactory factory;
+    private static ClassLoader contextClassLoader;
+
+    static {
+        contextClassLoader = (ClassLoader) java.security.AccessController
+                .doPrivileged(new java.security.PrivilegedAction() {
+                    public Object run() {
+                        return Thread.currentThread().getContextClassLoader();
+                    }
+                });
+    }
+
+    public static AuthConfigFactory getFactory() {
+        SecurityManager sm = System.getSecurityManager();
+        if (sm != null) {
+            sm.checkPermission(new AuthPermission("getAuthConfigFactory"));
+        }
+        if (factory == null) {
+            String className = (String) java.security.AccessController
+                    .doPrivileged(new java.security.PrivilegedAction() {
+                        public Object run() {
+                            return java.security.Security.getProperty(DEFAULT_FACTORY_SECURITY_PROPERTY);
+                        }
+                    });
+            if (className == null) {
+                className = DEFAULT_JASPI_AUTHCONFIGFACTORYIMPL;
+            }
+            try {
+                final String finalClassName = className;
+                factory = (AuthConfigFactory) java.security.AccessController
+                        .doPrivileged(new java.security.PrivilegedExceptionAction() {
+                            public Object run() throws ClassNotFoundException, InstantiationException,
+                                    IllegalAccessException {
+                                return ProviderLocator.loadClass(finalClassName, this.getClass(), contextClassLoader).newInstance();
+                            }
+                        });
+            } catch (PrivilegedActionException e) {
+                Exception inner = e.getException();
+                if (inner instanceof InstantiationException) {
+                    throw (SecurityException) new SecurityException("AuthConfigFactory error:"
+                            + inner.getCause().getMessage()).initCause(inner.getCause());
+                } else {
+                    throw (SecurityException) new SecurityException("AuthConfigFactory error: " + inner).initCause(inner);
+                }
+            }
+        }
+        return factory;
+    }
+
+    public static void setFactory(AuthConfigFactory factory) {
+        SecurityManager sm = System.getSecurityManager();
+        if (sm != null) {
+            sm.checkPermission(new AuthPermission("setAuthConfigFactory"));
+        }
+        AuthConfigFactory.factory = factory;
+    }
+
+
+    public AuthConfigFactory() {
+    }
+
+    public abstract String[] detachListener(RegistrationListener listener, String layer, String appContext);
+
+    public abstract AuthConfigProvider getConfigProvider(String layer, String appContext, RegistrationListener listener);
+
+    public abstract RegistrationContext getRegistrationContext(String registrationID);
+
+    public abstract String[] getRegistrationIDs(AuthConfigProvider provider);
+
+    public abstract void refresh();
+
+    public abstract String registerConfigProvider(AuthConfigProvider provider, String layer, String appContext, String description);
+
+    public abstract String registerConfigProvider(String className, Map properties, String layer, String appContext, String description);
+
+    public abstract boolean removeRegistration(String registrationID);
+
+    public static interface RegistrationContext {
+
+        String getAppContext();
+
+        String getDescription();
+
+        String getMessageLayer();
+
+        boolean isPersistent();
+
+    }
+
+}

==================================================
ClientAuthConfig.java
new file mode 100644
index 0000000000..c4c58ae2ab
--- /dev/null
+++ b/java/javax/security/auth/message/config/AuthConfigProvider.java
@@ -0,0 +1,33 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package javax.security.auth.message.config;
+
+import javax.security.auth.callback.CallbackHandler;
+import javax.security.auth.message.AuthException;
+
+/**
+ * @version $Rev$ $Date$
+ */
+public interface AuthConfigProvider {
+
+    ClientAuthConfig getClientAuthConfig(String layer, String appContext, CallbackHandler handler) throws AuthException, SecurityException;
+
+    ServerAuthConfig getServerAuthConfig(String layer, String appContext, CallbackHandler handler) throws AuthException, SecurityException;
+
+    void refresh();
+}
+

==================================================
ClientAuthContext.java
new file mode 100644
index 0000000000..10bd3cab3e
--- /dev/null
+++ b/java/javax/security/auth/message/config/ClientAuthConfig.java
@@ -0,0 +1,30 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package javax.security.auth.message.config;
+
+import javax.security.auth.Subject;
+import javax.security.auth.message.AuthException;
+
+import java.util.Map;
+
+/**
+ * @version $Rev$ $Date$
+ */
+public interface ClientAuthConfig extends AuthConfig {
+
+    ClientAuthContext getAuthContext(String authContextID, Subject clientSubject, Map properties) throws AuthException;
+}

==================================================
RegistrationListener.java
new file mode 100644
index 0000000000..f83d0bb3e6
--- /dev/null
+++ b/java/javax/security/auth/message/config/ClientAuthContext.java
@@ -0,0 +1,25 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package javax.security.auth.message.config;
+
+import javax.security.auth.message.ClientAuth;
+
+/**
+ * @version $Rev$ $Date$
+ */
+public interface ClientAuthContext extends ClientAuth {
+}

==================================================
ServerAuthConfig.java
new file mode 100644
index 0000000000..64bfd670a2
--- /dev/null
+++ b/java/javax/security/auth/message/config/RegistrationListener.java
@@ -0,0 +1,25 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package javax.security.auth.message.config;
+
+/**
+ * @version $Rev$ $Date$
+ */
+public interface RegistrationListener {
+
+    void notify(String layer, String appContext);
+}

==================================================
ServerAuthContext.java
new file mode 100644
index 0000000000..c45aa00ee7
--- /dev/null
+++ b/java/javax/security/auth/message/config/ServerAuthConfig.java
@@ -0,0 +1,30 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package javax.security.auth.message.config;
+
+import javax.security.auth.Subject;
+import javax.security.auth.message.AuthException;
+
+import java.util.Map;
+
+/**
+ * @version $Rev$ $Date$
+ */
+public interface ServerAuthConfig extends AuthConfig {
+
+    ServerAuthContext getAuthContext(String authContextID, Subject serviceSubject, Map properties) throws AuthException;
+}

==================================================
ClientAuthModule.java
new file mode 100644
index 0000000000..52ab897e2a
--- /dev/null
+++ b/java/javax/security/auth/message/config/ServerAuthContext.java
@@ -0,0 +1,25 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package javax.security.auth.message.config;
+
+import javax.security.auth.message.ServerAuth;
+
+/**
+ * @version $Rev$ $Date$
+ */
+public interface ServerAuthContext extends ServerAuth {
+}

==================================================
ServerAuthModule.java
new file mode 100644
index 0000000000..445f6a4696
--- /dev/null
+++ b/java/javax/security/auth/message/module/ClientAuthModule.java
@@ -0,0 +1,33 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package javax.security.auth.message.module;
+
+import javax.security.auth.message.AuthException;
+import javax.security.auth.message.ClientAuth;
+import javax.security.auth.message.MessagePolicy;
+import javax.security.auth.callback.CallbackHandler;
+import java.util.Map;
+
+/**
+ * @version $Rev$ $Date$
+ */
+public interface ClientAuthModule extends ClientAuth {
+
+    Class[] getSupportedMessageTypes();
+
+    void initialize(MessagePolicy requestPolicy, MessagePolicy responsePolicy, CallbackHandler handler, Map options) throws AuthException;
+}

==================================================
