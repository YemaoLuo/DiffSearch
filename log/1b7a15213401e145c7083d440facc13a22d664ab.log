1b7a15213401e145c7083d440facc13a22d664ab
==================================================
When searching for SCIs use Context.getParentClassLoader instead of ClassLoader.getParent. 
==================================================
Violeta Georgieva
==================================================
Mon Mar 23 11:37:28 2015 +0000
==================================================
ContextConfig.java
When searching for SCIs use Context.getParentClassLoader instead of ClassLoader.getParent. 
Thus one can provide the correct parent class loader when running embedded Tomcat in other environments such as OSGi.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1668596 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WebappServiceLoader.java
index c379582f86..ba51164511 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -1124,7 +1124,7 @@ public class ContextConfig implements LifecycleListener {
 
         // Step 3. Look for ServletContainerInitializer implementations
         if (ok) {
-            processServletContainerInitializers(sContext);
+            processServletContainerInitializers();
         }
 
         if  (!webXml.isMetadataComplete() || typeInitializerMap.size() > 0) {
@@ -1607,12 +1607,11 @@ public class ContextConfig implements LifecycleListener {
     /**
      * Scan JARs for ServletContainerInitializer implementations.
      */
-    protected void processServletContainerInitializers(ServletContext servletContext) {
+    protected void processServletContainerInitializers() {
 
         List<ServletContainerInitializer> detectedScis;
         try {
-            WebappServiceLoader<ServletContainerInitializer> loader =
-                    new WebappServiceLoader<>(servletContext, context.getContainerSciFilter());
+            WebappServiceLoader<ServletContainerInitializer> loader = new WebappServiceLoader<>(context);
             detectedScis = loader.load(ServletContainerInitializer.class);
         } catch (IOException e) {
             log.error(sm.getString(

==================================================
TestWebappServiceLoader.java
index 52ce64ff48..8835959d91 100644
--- a/java/org/apache/catalina/startup/WebappServiceLoader.java
+++ b/java/org/apache/catalina/startup/WebappServiceLoader.java
@@ -33,6 +33,8 @@ import java.util.regex.Pattern;
 
 import javax.servlet.ServletContext;
 
+import org.apache.catalina.Context;
+
 /**
  * A variation of Java's JAR ServiceLoader that respects exclusion rules for
  * web applications.
@@ -56,7 +58,8 @@ public class WebappServiceLoader<T> {
     private static final String LIB = "/WEB-INF/lib/";
     private static final String SERVICES = "META-INF/services/";
 
-    private final ServletContext context;
+    private final Context context;
+    private final ServletContext servletContext;
     private final Pattern containerSciFilterPattern;
 
     /**
@@ -64,8 +67,10 @@ public class WebappServiceLoader<T> {
      *
      * @param context the context to use
      */
-    public WebappServiceLoader(ServletContext context, String containerSciFilter) {
+    public WebappServiceLoader(Context context) {
         this.context = context;
+        this.servletContext = context.getServletContext();
+        String containerSciFilter = context.getContainerSciFilter();
         if (containerSciFilter != null && containerSciFilter.length() > 0) {
             containerSciFilterPattern = Pattern.compile(containerSciFilter);
         } else {
@@ -86,17 +91,17 @@ public class WebappServiceLoader<T> {
         LinkedHashSet<String> applicationServicesFound = new LinkedHashSet<>();
         LinkedHashSet<String> containerServicesFound = new LinkedHashSet<>();
 
-        ClassLoader loader = context.getClassLoader();
+        ClassLoader loader = servletContext.getClassLoader();
 
         // if the ServletContext has ORDERED_LIBS, then use that to specify the
         // set of JARs from WEB-INF/lib that should be used for loading services
         @SuppressWarnings("unchecked")
         List<String> orderedLibs =
-                (List<String>) context.getAttribute(ServletContext.ORDERED_LIBS);
+                (List<String>) servletContext.getAttribute(ServletContext.ORDERED_LIBS);
         if (orderedLibs != null) {
             // handle ordered libs directly, ...
             for (String lib : orderedLibs) {
-                URL jarUrl = context.getResource(LIB + lib);
+                URL jarUrl = servletContext.getResource(LIB + lib);
                 if (jarUrl == null) {
                     // should not happen, just ignore
                     continue;
@@ -117,7 +122,7 @@ public class WebappServiceLoader<T> {
             }
 
             // and the parent ClassLoader for all others
-            loader = loader.getParent();
+            loader = context.getParentClassLoader();
         }
 
         Enumeration<URL> resources;
@@ -174,7 +179,7 @@ public class WebappServiceLoader<T> {
 
     List<T> loadServices(Class<T> serviceType, LinkedHashSet<String> servicesFound)
             throws IOException {
-        ClassLoader loader = context.getClassLoader();
+        ClassLoader loader = servletContext.getClassLoader();
         List<T> services = new ArrayList<>(servicesFound.size());
         for (String serviceClass : servicesFound) {
             try {

==================================================
