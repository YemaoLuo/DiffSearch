097b470a56099a9d7e7836d963945582255977c9
==================================================
Add a configurable limit to the size of client hello that Tomcat parses looking for SNI data.
==================================================
Mark Thomas
==================================================
Thu May 7 14:31:16 2015 +0000
==================================================
AbstractHttp11JsseProtocol.java
Add a configurable limit to the size of client hello that Tomcat parses looking for SNI data.
Fallback to the default if the limit is not enough

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1678218 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractJsseEndpoint.java
index 435d14e1bc..7813b55735 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11JsseProtocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11JsseProtocol.java
@@ -35,4 +35,10 @@ public abstract class AbstractHttp11JsseProtocol<S>
 
     public String getSslImplementationName() { return getEndpoint().getSslImplementationName(); }
     public void setSslImplementationName(String s) { getEndpoint().setSslImplementationName(s); }
+
+
+    public int getSniParseLimit() { return getEndpoint().getSniParseLimit(); }
+    public void setSniParseLimit(int sniParseLimit) {
+        getEndpoint().setSniParseLimit(sniParseLimit);
+    }
 }

==================================================
SecureNio2Channel.java
index 3743569aa1..943670453c 100644
--- a/java/org/apache/tomcat/util/net/LocalStrings.properties
+++ b/java/org/apache/tomcat/util/net/LocalStrings.properties
@@ -99,6 +99,7 @@ channel.nio.ssl.closing=Channel is in closing state.
 channel.nio.ssl.invalidBuffer=You can only read using the application read buffer provided by the handler.
 channel.nio.ssl.expandNetInBuffer=Expanding network input buffer to [{0}] bytes
 channel.nio.ssl.expandNetOutBuffer=Expanding network output buffer to [{0}] bytes
+channel.nio.ssl.sniDefault=Unable to buffer enough data to determine requested SNI host name. Using default
 channel.nio.ssl.sniHostName=The SNI host name extracted for this connection was [{0}]
 
 sniExtractor.clientHelloTooBig=The ClientHello was not presented in a single TLS record so no SNI information could be extracted

==================================================
SecureNioChannel.java
index 2bd44ebfd8..ea588eeb4a 100644
--- a/java/org/apache/tomcat/util/net/SecureNio2Channel.java
+++ b/java/org/apache/tomcat/util/net/SecureNio2Channel.java
@@ -299,13 +299,15 @@ public class SecureNio2Channel extends Nio2Channel  {
 
         SNIExtractor extractor = new SNIExtractor(netInBuffer);
 
-        while (extractor.getResult() == SNIResult.UNDERFLOW) {
+        while (extractor.getResult() == SNIResult.UNDERFLOW &&
+                netInBuffer.capacity() < endpoint.getSniParseLimit()) {
             // extractor needed more data to process but netInBuffer was full so
-            // double the size of the buffer and read some more data.
+            // expand the buffer and read some more data.
+            int newLimit = Math.min(netInBuffer.capacity() * 2, endpoint.getSniParseLimit());
             log.info(sm.getString("channel.nio.ssl.expandNetInBuffer",
-                    Integer.toString(netInBuffer.capacity() * 2)));
+                    Integer.toString(newLimit)));
 
-            netInBuffer = ByteBufferUtils.expand(netInBuffer);
+            netInBuffer = ByteBufferUtils.expand(netInBuffer, newLimit);
             sc.read(netInBuffer);
             extractor = new SNIExtractor(netInBuffer);
         }
@@ -322,7 +324,11 @@ public class SecureNio2Channel extends Nio2Channel  {
             sc.read(netInBuffer, socket, handshakeReadCompletionHandler);
             return 1;
         case UNDERFLOW:
-            // Can't happen. Buffer would have been expanded above.
+            // Unable to buffer enough data to read SNI extension data
+            if (log.isDebugEnabled()) {
+                log.debug(sm.getString("channel.nio.ssl.sniDefault"));
+            }
+            hostName = endpoint.getDefaultSSLHostConfigName();
             break;
         }
 

==================================================
