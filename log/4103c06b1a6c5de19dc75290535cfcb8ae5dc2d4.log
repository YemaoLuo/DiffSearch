4103c06b1a6c5de19dc75290535cfcb8ae5dc2d4
==================================================
Update packaged re-named Jakarta BCEL
==================================================
Mark Emlyn
==================================================
Sun Aug 1 11:13:10 2010 +0000
==================================================
AccessFlags.java
Update packaged re-named Jakarta BCEL

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@981203 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AnnotationDefault.java
index 81725dc3c8..bc6dc68aab 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AccessFlags.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AccessFlags.java
@@ -32,105 +32,4 @@ public abstract class AccessFlags implements java.io.Serializable {
     public AccessFlags() {
     }
 
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
-
-
-    
 }

==================================================
AnnotationEntry.java
index f1099a9e29..b6d44614ed 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationDefault.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationDefault.java
@@ -34,8 +34,6 @@ public class AnnotationDefault extends Attribute
     ElementValue default_value;
 
     /**
-     * @param annotation_type
-     *            the subclass type of the annotation
      * @param name_index
      *            Index pointing to the name <em>Code</em>
      * @param length
@@ -55,8 +53,6 @@ public class AnnotationDefault extends Attribute
     }
 
     /**
-     * @param annotation_type
-     *            the subclass type of the annotation
      * @param name_index
      *            Index pointing to the name <em>Code</em>
      * @param length

==================================================
Annotations.java
index ad8137ba4c..8c096c7ea7 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/AnnotationEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/AnnotationEntry.java
@@ -35,41 +35,46 @@ import org.apache.tomcat.util.bcel.Constants;
  */
 public class AnnotationEntry implements Constants, Serializable {
 
+    private static final long serialVersionUID = 1L;
+    
     private int type_index;
-    private int num_element_value_pairs;
-    private List element_value_pairs;
     private ConstantPool constant_pool;
     private boolean isRuntimeVisible;
 
-
+    private List element_value_pairs;
+    
     /**
-     * Construct object from file stream.
-     * @param file Input stream
+     * Factory method to create an AnnotionEntry from a DataInputStream
+     * 
+     * @param file
+     * @param constant_pool
+     * @param isRuntimeVisible
+     * @return
+     * @throws IOException
      */
-    public AnnotationEntry(int type_index, ConstantPool constant_pool, boolean isRuntimeVisible) {
-        this.type_index = type_index;
+    public static AnnotationEntry read(DataInputStream file, ConstantPool constant_pool, boolean isRuntimeVisible) throws IOException {
         
-        this.constant_pool = constant_pool;
-        this.isRuntimeVisible = isRuntimeVisible;
-    }
-    
-    public static AnnotationEntry read(DataInputStream file, ConstantPool constant_pool, boolean isRuntimeVisible) throws IOException 
-    {
-        AnnotationEntry annotationEntry = new AnnotationEntry(file.readUnsignedShort(), constant_pool, isRuntimeVisible);
-        annotationEntry.num_element_value_pairs = (file.readUnsignedShort());
+        final AnnotationEntry annotationEntry = new AnnotationEntry(file.readUnsignedShort(), constant_pool, isRuntimeVisible);
+        final int num_element_value_pairs = (file.readUnsignedShort());
         annotationEntry.element_value_pairs = new ArrayList();
-        for (int i = 0; i < annotationEntry.num_element_value_pairs; i++) {
-            annotationEntry.element_value_pairs.add(new ElementValuePair(file.readUnsignedShort(), ElementValue.readElementValue(file, constant_pool), constant_pool));
+        for (int i = 0; i < num_element_value_pairs; i++) {
+            annotationEntry.element_value_pairs.add(new ElementValuePair(file.readUnsignedShort(), ElementValue.readElementValue(file, constant_pool),
+                    constant_pool));
         }
         return annotationEntry;
     }
 
+    public AnnotationEntry(int type_index, ConstantPool constant_pool, boolean isRuntimeVisible) {
+        this.type_index = type_index;
+        this.constant_pool = constant_pool;
+        this.isRuntimeVisible = isRuntimeVisible;
+    }
+    
     /**
      * @return the annotation type name
      */
     public String getAnnotationType() {
-        ConstantUtf8 c;
-        c = (ConstantUtf8) constant_pool.getConstant(type_index, CONSTANT_Utf8);
+        final ConstantUtf8 c = (ConstantUtf8) constant_pool.getConstant(type_index, CONSTANT_Utf8);
         return c.getBytes();
     }
 

==================================================
Attribute.java
index 6cba6edbfc..5073c5c144 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Annotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Annotations.java
@@ -30,10 +30,10 @@ import java.io.IOException;
  */
 public abstract class Annotations extends Attribute {
 
-    private int annotation_table_length;
-    private AnnotationEntry[] annotation_table; // Table of annotations
-
-
+    private static final long serialVersionUID = 1L;
+    
+    private AnnotationEntry[] annotation_table;
+    
     /**
      * @param annotation_type the subclass type of the annotation
      * @param name_index Index pointing to the name <em>Code</em>
@@ -41,10 +41,9 @@ public abstract class Annotations extends Attribute {
      * @param file Input stream
      * @param constant_pool Array of constants
      */
-    public Annotations(byte annotation_type, int name_index, int length, DataInputStream file,
-            ConstantPool constant_pool, boolean isRuntimeVisible) throws IOException {
+    public Annotations(byte annotation_type, int name_index, int length, DataInputStream file, ConstantPool constant_pool, boolean isRuntimeVisible) throws IOException {
         this(annotation_type, name_index, length, (AnnotationEntry[]) null, constant_pool);
-        annotation_table_length = (file.readUnsignedShort());
+        final int annotation_table_length = (file.readUnsignedShort());
         annotation_table = new AnnotationEntry[annotation_table_length];
         for (int i = 0; i < annotation_table_length; i++) {
             annotation_table[i] = AnnotationEntry.read(file, constant_pool, isRuntimeVisible);
@@ -59,32 +58,18 @@ public abstract class Annotations extends Attribute {
      * @param annotation_table the actual annotations
      * @param constant_pool Array of constants
      */
-    public Annotations(byte annotation_type, int name_index, int length,
-            AnnotationEntry[] annotation_table, ConstantPool constant_pool) {
+    public Annotations(byte annotation_type, int name_index, int length, AnnotationEntry[] annotation_table, ConstantPool constant_pool) {
         super(annotation_type, name_index, length, constant_pool);
         setAnnotationTable(annotation_table);
     }
 
-
     /**
      * @param annotation_table the entries to set in this annotation
      */
     public final void setAnnotationTable( AnnotationEntry[] annotation_table ) {
         this.annotation_table = annotation_table;
-        annotation_table_length = (annotation_table == null) ? 0 : annotation_table.length;
     }
 
-
-    // TODO: update method names
-    /**
-     * @return the annotation entry table
-     */
-    /*
-    public final AnnotationEntry[] getAnnotationTable() {
-        return annotation_table;
-    }*/
-
-
     /**
      * returns the array of annotation entries in this annotation
      */
@@ -92,15 +77,12 @@ public abstract class Annotations extends Attribute {
         return annotation_table;
     }
 
-
-    
-    
-    
-    
-    protected void writeAnnotations(DataOutputStream dos) throws IOException
-    {
-        dos.writeShort(annotation_table_length);
-        for (int i = 0; i < annotation_table_length; i++)
+    protected void writeAnnotations(DataOutputStream dos) throws IOException {
+        if (annotation_table == null) {
+            return;
+        }
+        dos.writeShort(annotation_table.length);
+        for (int i = 0; i < annotation_table.length; i++)
             annotation_table[i].dump(dos);
     }
 }

==================================================
ClassParser.java
index 6677bb56ff..df7a1b19b8 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Attribute.java
@@ -80,11 +80,7 @@ public abstract class Attribute implements Cloneable, Serializable
         file.writeInt(length);
     }
 
-    private static Map readers = new HashMap();
-
-    
-
-    
+	private static final Map readers = new HashMap();
 
     /*
      * Class method reads one attribute from the input data stream. This method

==================================================
ElementValuePair.java
index a1e0ddc9be..6015ab71d6 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ClassParser.java
@@ -103,6 +103,11 @@ public final class ClassParser {
                 if (is_zip) {
                     zip = new ZipFile(zip_file);
                     ZipEntry entry = zip.getEntry(file_name);
+                    
+                    if (entry == null) {
+                        throw new IOException("File " + file_name + " not found");
+                    }
+                    
                     file = new DataInputStream(new BufferedInputStream(zip.getInputStream(entry),
                             BUFSIZE));
                 } else {

==================================================
LocalVariableTable.java
index f8e5a33878..18a4d045ad 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ElementValuePair.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ElementValuePair.java
@@ -55,10 +55,6 @@ public class ElementValuePair
     {
         return elementValue;
     }
-
-    
-
-    
     
     protected void dump(DataOutputStream dos) throws IOException {
         dos.writeShort(elementNameIndex); // u2 name of the element

==================================================
ParameterAnnotationEntry.java
index e2c17d4d8d..e748f6653a 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTable.java
@@ -91,7 +91,6 @@ public class LocalVariableTable extends Attribute {
 
 
     /** 
-     * @return first matching variable using index
      * 
      * @param index the variable slot
      * 
@@ -109,10 +108,6 @@ public class LocalVariableTable extends Attribute {
         return null;
     }
 
-
-    
-
-
     public final void setLocalVariableTable( LocalVariable[] local_variable_table ) {
         this.local_variable_table = local_variable_table;
         local_variable_table_length = (local_variable_table == null)

==================================================
ParameterAnnotations.java
index 4a1c63cf87..9ef0257380 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ParameterAnnotationEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ParameterAnnotationEntry.java
@@ -47,13 +47,5 @@ public class ParameterAnnotationEntry implements Constants {
             annotation_table[i] = AnnotationEntry.read(file, constant_pool, false);
         }
     }
-
-
-    
-
-
-    
-
-
     
 }

==================================================
StackMapTableEntry.java
index 0c7949179b..c5d002b63b 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/ParameterAnnotations.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/ParameterAnnotations.java
@@ -76,13 +76,5 @@ public abstract class ParameterAnnotations extends Attribute {
                 ? 0
                 : parameter_annotation_table.length;
     }
-
-
-    
-
-
-    
-
-
     
 }

==================================================
Unknown.java
index bf65638102..99942c28c9 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/StackMapTableEntry.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/StackMapTableEntry.java
@@ -113,20 +113,22 @@ public final class StackMapTableEntry implements Cloneable {
      */
     public final void dump( DataOutputStream file ) throws IOException {
         file.write(frame_type);
-        if (frame_type >= Constants.SAME_LOCALS_1_STACK_ITEM_FRAME && frame_type <= Constants.SAME_LOCALS_1_STACK_ITEM_FRAME_MAX) {
+        if (frame_type >= Constants.SAME_FRAME && frame_type <= Constants.SAME_FRAME_MAX) {
+            // nothing to be done
+        } else if (frame_type >= Constants.SAME_LOCALS_1_STACK_ITEM_FRAME && frame_type <= Constants.SAME_LOCALS_1_STACK_ITEM_FRAME_MAX) {
             types_of_stack_items[0].dump(file);
         } else if (frame_type == Constants.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {
-            file.write(byte_code_offset_delta);
+            file.writeShort(byte_code_offset_delta);
             types_of_stack_items[0].dump(file);
         } else if (frame_type >= Constants.CHOP_FRAME && frame_type <= Constants.CHOP_FRAME_MAX) {
-            file.write(byte_code_offset_delta);
+            file.writeShort(byte_code_offset_delta);
         } else if (frame_type == Constants.SAME_FRAME_EXTENDED) {
-            file.write(byte_code_offset_delta);
+            file.writeShort(byte_code_offset_delta);
         } else if (frame_type >= Constants.APPEND_FRAME && frame_type <= Constants.APPEND_FRAME_MAX) {
-            file.write(byte_code_offset_delta);
+            file.writeShort(byte_code_offset_delta);
             for (int i = 0; i < number_of_locals; i++) {
                 types_of_locals[i].dump(file);
-            }            
+            }
         } else if (frame_type == Constants.FULL_FRAME) {        
             file.writeShort(byte_code_offset_delta);
             file.writeShort(number_of_locals);

==================================================
Utility.java
index fce6d63328..6ce524a1fb 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/Unknown.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/Unknown.java
@@ -44,7 +44,7 @@ public final class Unknown extends Attribute {
 
     private byte[] bytes;
     private String name;
-    private static Map unknown_attributes = new HashMap();
+    private static final Map unknown_attributes = new HashMap();
 
 
     

==================================================
