261d55749adada056aeb8f20fbef359e55dd8a5e
==================================================
Update Tomcat's fork of DBCP2 to dbcp2/trunk
==================================================
Mark Thomas
==================================================
Wed Jan 20 14:47:31 2016 +0000
==================================================
BasicDataSource.java
Update Tomcat's fork of DBCP2 to dbcp2/trunk

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1725731 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BasicDataSourceFactory.java
index 5a05823647..9d58ec66f8 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSource.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSource.java
@@ -1998,13 +1998,6 @@ public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBean
             throw new IllegalStateException("Cannot invalidate connection: Unwrapping poolable connection failed.", e);
         }
 
-        // attempt to close the connection for good measure
-        try {
-            connection.close();
-        } catch (Exception e) {
-            // ignore any exceptions here
-        }
-
         try {
             connectionPool.invalidateObject(poolableConnection);
         } catch (Exception e) {

==================================================
DelegatingCallableStatement.java
index 6d73bbccf6..c3b0f49d87 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSourceFactory.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/BasicDataSourceFactory.java
@@ -177,7 +177,8 @@ public class BasicDataSourceFactory implements ObjectFactory {
         PROP_ENABLE_AUTOCOMMIT_ON_RETURN,
         PROP_DEFAULT_QUERYTIMEOUT,
         PROP_FASTFAIL_VALIDATION,
-        PROP_DISCONNECTION_SQL_CODES
+        PROP_DISCONNECTION_SQL_CODES,
+        PROP_JMX_NAME
     };
 
     /**

==================================================
DelegatingPreparedStatement.java
index 6a140f699a..ea34a34191 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/DelegatingCallableStatement.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/DelegatingCallableStatement.java
@@ -113,7 +113,7 @@ public class DelegatingCallableStatement extends DelegatingPreparedStatement
     public double getDouble(int parameterIndex) throws SQLException
     { checkOpen(); try { return ((CallableStatement)getDelegate()).getDouble( parameterIndex); } catch (SQLException e) { handleException(e); return 0; } }
 
-    /** @deprecated */
+    /** @deprecated Use {@link #getBigDecimal(int)} or {@link #getBigDecimal(String)} */
     @Override
     @Deprecated
     public BigDecimal getBigDecimal(int parameterIndex, int scale) throws SQLException

==================================================
DelegatingResultSet.java
index 0bdab45469..cb0b058077 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/DelegatingPreparedStatement.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/DelegatingPreparedStatement.java
@@ -161,7 +161,7 @@ public class DelegatingPreparedStatement extends DelegatingStatement
     public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException
     { checkOpen(); try { ((PreparedStatement)getDelegate()).setAsciiStream(parameterIndex,x,length); } catch (SQLException e) { handleException(e); } }
 
-    /** @deprecated */
+    /** @deprecated Use setAsciiStream(), setCharacterStream() or setNCharacterStream() */
     @Deprecated
     @Override
     public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException

==================================================
DriverManagerConnectionFactory.java
index 851d07aa32..09ff9083ed 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/DelegatingResultSet.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/DelegatingResultSet.java
@@ -226,7 +226,7 @@ public final class DelegatingResultSet extends AbandonedTrace implements ResultS
     public double getDouble(int columnIndex) throws SQLException
     { try { return _res.getDouble(columnIndex); } catch (SQLException e) { handleException(e); return 0; } }
 
-    /** @deprecated */
+    /** @deprecated Use {@link #getBigDecimal(int)} */
     @Deprecated
     @Override
     public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException
@@ -252,7 +252,7 @@ public final class DelegatingResultSet extends AbandonedTrace implements ResultS
     public InputStream getAsciiStream(int columnIndex) throws SQLException
     { try { return _res.getAsciiStream(columnIndex); } catch (SQLException e) { handleException(e); return null; } }
 
-    /** @deprecated */
+    /** @deprecated Use {@link #getCharacterStream(int)} */
     @Deprecated
     @Override
     public InputStream getUnicodeStream(int columnIndex) throws SQLException
@@ -294,7 +294,7 @@ public final class DelegatingResultSet extends AbandonedTrace implements ResultS
     public double getDouble(String columnName) throws SQLException
     { try { return _res.getDouble(columnName); } catch (SQLException e) { handleException(e); return 0; } }
 
-    /** @deprecated */
+    /** @deprecated Use {@link #getBigDecimal(String)} */
     @Deprecated
     @Override
     public BigDecimal getBigDecimal(String columnName, int scale) throws SQLException
@@ -320,7 +320,7 @@ public final class DelegatingResultSet extends AbandonedTrace implements ResultS
     public InputStream getAsciiStream(String columnName) throws SQLException
     { try { return _res.getAsciiStream(columnName); } catch (SQLException e) { handleException(e); return null; } }
 
-    /** @deprecated */
+    /** @deprecated Use {@link #getCharacterStream(String)} */
     @Deprecated
     @Override
     public InputStream getUnicodeStream(String columnName) throws SQLException

==================================================
LifetimeExceededException.java
index 70bc0fcafd..b6a73b496c 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/DriverManagerConnectionFactory.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/DriverManagerConnectionFactory.java
@@ -41,6 +41,17 @@ public class DriverManagerConnectionFactory implements ConnectionFactory {
     }
 
 
+    /**
+     * Constructor for DriverManagerConnectionFactory.
+     * @param connectUri a database url of the form
+     * <code> jdbc:<em>subprotocol</em>:<em>subname</em></code>
+     * @since 2.2
+     */
+    public DriverManagerConnectionFactory(String connectUri) {
+        _connectUri = connectUri;
+        _props = new Properties();
+    }
+
     /**
      * Constructor for DriverManagerConnectionFactory.
      * @param connectUri a database url of the form

==================================================
PoolableConnection.java
index d4b9753da8..a170199179 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/LifetimeExceededException.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/LifetimeExceededException.java
@@ -34,9 +34,10 @@ package org.apache.tomcat.dbcp.dbcp2;
 
     /**
      * Create a LifetimeExceededException with the given message.
+     *
+     * @param message The message with which to create the exception
      */
     public LifetimeExceededException(String message) {
         super(message);
     }
-
 }

==================================================
CPDSConnectionFactory.java
index 6b31902964..b4ce65b219 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/PoolableConnection.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/PoolableConnection.java
@@ -50,7 +50,7 @@ public class PoolableConnection extends DelegatingConnection<Connection>
     static {
         try {
             MBEAN_SERVER = ManagementFactory.getPlatformMBeanServer();
-        } catch (Exception ex) {
+        } catch (NoClassDefFoundError | Exception ex) {
             // ignore - JMX not available
         }
     }

==================================================
KeyedCPDSConnectionFactory.java
index f75d0e930a..f3a6ad93cd 100644
--- a/java/org/apache/tomcat/dbcp/dbcp2/datasources/CPDSConnectionFactory.java
+++ b/java/org/apache/tomcat/dbcp/dbcp2/datasources/CPDSConnectionFactory.java
@@ -86,8 +86,8 @@ class CPDSConnectionFactory
      * @param validationQueryTimeout Timeout in seconds before validation fails
      * @param rollbackAfterValidation whether a rollback should be issued
      * after {@link #validateObject validating} {@link Connection}s.
-     * @param username
-     * @param password
+     * @param username The user name to use to create connections
+     * @param password The password to use to create connections
      */
     public CPDSConnectionFactory(ConnectionPoolDataSource cpds,
                                  String validationQuery,
@@ -331,9 +331,10 @@ class CPDSConnectionFactory
 
     /**
      * Sets the maximum lifetime in milliseconds of a connection after which the
-     * connection will always fail activation, passivation and validation. A
-     * value of zero or less indicates an infinite lifetime. The default value
-     * is -1.
+     * connection will always fail activation, passivation and validation.
+     *
+     * @param maxConnLifetimeMillis A value of zero or less indicates an
+     *        infinite lifetime. The default value is -1.
      */
     public void setMaxConnLifetimeMillis(long maxConnLifetimeMillis) {
         this.maxConnLifetimeMillis = maxConnLifetimeMillis;

==================================================
