b85c761618bfe5b8e0fb180dc1d5d7a203cda29d
==================================================
Auto-boxing warnings
==================================================
Mark Thomas
==================================================
Tue May 26 07:46:17 2015 +0000
==================================================
ChannelCoordinator.java
Auto-boxing warnings

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1681697 13f79535-47bb-0310-9956-ffa450edef68



==================================================
MessageDispatchInterceptor.java
index 8b112d1fc1..e6baaec5f4 100644
--- a/java/org/apache/catalina/tribes/group/ChannelCoordinator.java
+++ b/java/org/apache/catalina/tribes/group/ChannelCoordinator.java
@@ -142,7 +142,8 @@ public class ChannelCoordinator extends ChannelInterceptorBase implements Messag
             if (svc == 0 ) return;//nothing to start
 
             if (svc == (svc & startLevel)) {
-                throw new ChannelException(sm.getString("channelCoordinator.alreadyStarted", svc));
+                throw new ChannelException(sm.getString("channelCoordinator.alreadyStarted",
+                        Integer.toString(svc)));
             }
 
             //must start the receiver first so that we can coordinate the port it

==================================================
BufferPool.java
index 2172602bd8..5c5952c116 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/MessageDispatchInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/MessageDispatchInterceptor.java
@@ -66,7 +66,7 @@ public class MessageDispatchInterceptor extends ChannelInterceptorBase implement
                     return;
                 } else {
                     throw new ChannelException(sm.getString("messageDispatchInterceptor.queue.full",
-                            maxQueueSize, getCurrentSize()));
+                            Long.toString(maxQueueSize), Long.toString(getCurrentSize())));
                 }//end if
             }//end if
             //add to queue

==================================================
XByteBuffer.java
index b06df648c4..a44a1daa86 100644
--- a/java/org/apache/catalina/tribes/io/BufferPool.java
+++ b/java/org/apache/catalina/tribes/io/BufferPool.java
@@ -62,7 +62,8 @@ public class BufferPool {
                 if (instance == null) {
                    BufferPoolAPI pool = new BufferPool15Impl();
                    pool.setMaxSize(DEFAULT_POOL_SIZE);
-                   log.info(sm.getString("bufferPool.created", DEFAULT_POOL_SIZE, pool.getClass().getName()));
+                   log.info(sm.getString("bufferPool.created",
+                           Integer.toString(DEFAULT_POOL_SIZE), pool.getClass().getName()));
                    instance = new BufferPool(pool);
                 }
             }

==================================================
McastService.java
index 92b0192684..f1224aa4f7 100644
--- a/java/org/apache/catalina/tribes/io/XByteBuffer.java
+++ b/java/org/apache/catalina/tribes/io/XByteBuffer.java
@@ -114,7 +114,8 @@ public class XByteBuffer {
 
     public void trim(int length) {
         if ( (bufSize - length) < 0 )
-            throw new ArrayIndexOutOfBoundsException(sm.getString("xByteBuffer.unableTrim", bufSize, length));
+            throw new ArrayIndexOutOfBoundsException(sm.getString("xByteBuffer.unableTrim",
+                    Integer.toString(bufSize), Integer.toString(length)));
         bufSize -= length;
     }
 

==================================================
McastServiceImpl.java
index a6f6914591..60b35348e7 100644
--- a/java/org/apache/catalina/tribes/membership/McastService.java
+++ b/java/org/apache/catalina/tribes/membership/McastService.java
@@ -488,7 +488,9 @@ public class McastService implements MembershipService,MembershipListener,Messag
 
         byte[] data = XByteBuffer.createDataPackage((ChannelData)message);
         if (data.length>McastServiceImpl.MAX_PACKET_SIZE) {
-            throw new ChannelException(sm.getString("mcastService.exceed.maxPacketSize", data.length,McastServiceImpl.MAX_PACKET_SIZE));
+            throw new ChannelException(sm.getString("mcastService.exceed.maxPacketSize",
+                    Integer.toString(data.length) ,
+                    Integer.toString(McastServiceImpl.MAX_PACKET_SIZE)));
         }
         DatagramPacket packet = new DatagramPacket(data,0,data.length);
         try {

==================================================
AbstractReplicatedMap.java
index 8a472d0a5b..677c7e45b1 100644
--- a/java/org/apache/catalina/tribes/membership/McastServiceImpl.java
+++ b/java/org/apache/catalina/tribes/membership/McastServiceImpl.java
@@ -210,7 +210,7 @@ public class McastServiceImpl {
     protected void setupSocket() throws IOException {
         if (mcastBindAddress != null) {
             try {
-                log.info(sm.getString("mcastServiceImpl.bind", address, port));
+                log.info(sm.getString("mcastServiceImpl.bind", address, Integer.toString(port)));
                 socket = new MulticastSocket(new InetSocketAddress(address,port));
             } catch (BindException e) {
                 /*
@@ -231,14 +231,16 @@ public class McastServiceImpl {
             socket.setInterface(mcastBindAddress);
         } //end if
         //force a so timeout so that we don't block forever
-        if ( mcastSoTimeout <= 0 ) mcastSoTimeout = (int)sendFrequency;
-        if(log.isInfoEnabled())
-            log.info(sm.getString("mcastServiceImpl.setSoTimeout", mcastSoTimeout));
+        if (mcastSoTimeout <= 0) mcastSoTimeout = (int)sendFrequency;
+        if (log.isInfoEnabled()) {
+            log.info(sm.getString("mcastServiceImpl.setSoTimeout",
+                    Integer.toString(mcastSoTimeout)));
+        }
         socket.setSoTimeout(mcastSoTimeout);
 
         if ( mcastTTL >= 0 ) {
             if(log.isInfoEnabled())
-                log.info(sm.getString("mcastServiceImpl.setTTL", mcastTTL));
+                log.info(sm.getString("mcastServiceImpl.setTTL", Integer.toString(mcastTTL)));
             socket.setTimeToLive(mcastTTL);
         }
     }
@@ -289,10 +291,11 @@ public class McastServiceImpl {
     private void waitForMembers(int level) {
         long memberwait = sendFrequency*2;
         if(log.isInfoEnabled())
-            log.info(sm.getString("mcastServiceImpl.waitForMembers.start", memberwait, level));
+            log.info(sm.getString("mcastServiceImpl.waitForMembers.start",
+                    Long.toString(memberwait), Integer.toString(level)));
         try {Thread.sleep(memberwait);}catch (InterruptedException ignore){}
         if(log.isInfoEnabled())
-            log.info(sm.getString("mcastServiceImpl.waitForMembers.done", level));
+            log.info(sm.getString("mcastServiceImpl.waitForMembers.done", Integer.toString(level)));
     }
 
     /**
@@ -343,7 +346,8 @@ public class McastServiceImpl {
 
             socket.receive(receivePacket);
             if(receivePacket.getLength() > MAX_PACKET_SIZE) {
-                log.error(sm.getString("mcastServiceImpl.packet.tooLong", receivePacket.getLength()));
+                log.error(sm.getString("mcastServiceImpl.packet.tooLong",
+                        Integer.toString(receivePacket.getLength())));
             } else {
                 byte[] data = new byte[receivePacket.getLength()];
                 System.arraycopy(receivePacket.getData(), receivePacket.getOffset(), data, 0, data.length);
@@ -644,7 +648,9 @@ public class McastServiceImpl {
                     try {
                         if (!success) {
                             if(log.isInfoEnabled())
-                                log.info(sm.getString("mcastServiceImpl.recovery.failed", ++attempt, parent.recoverySleepTime));
+                                log.info(sm.getString("mcastServiceImpl.recovery.failed",
+                                        Integer.toString(++attempt),
+                                        Long.toString(parent.recoverySleepTime)));
                             Thread.sleep(parent.recoverySleepTime);
                         }
                     }catch (InterruptedException ignore) {

==================================================
ReplicatedMap.java
index 07df223b9e..bf7634ac2a 100644
--- a/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
@@ -239,7 +239,8 @@ public abstract class AbstractReplicatedMap<K,V>
         }
         long complete = System.currentTimeMillis() - start;
         if (log.isInfoEnabled())
-            log.info(sm.getString("abstractReplicatedMap.init.completed", mapContextName, complete));
+            log.info(sm.getString("abstractReplicatedMap.init.completed",
+                    mapContextName, Long.toString(complete)));
     }
 
 
@@ -845,7 +846,8 @@ public abstract class AbstractReplicatedMap<K,V>
 
         } //while
         long complete = System.currentTimeMillis() - start;
-        if (log.isInfoEnabled()) log.info(sm.getString("abstractReplicatedMap.relocate.complete", complete));
+        if (log.isInfoEnabled()) log.info(sm.getString("abstractReplicatedMap.relocate.complete",
+                Long.toString(complete)));
     }
 
     public int getNextBackupIndex() {

==================================================
PooledMultiSender.java
index 231c96ba5e..2b090ca070 100644
--- a/java/org/apache/catalina/tribes/tipis/ReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/ReplicatedMap.java
@@ -201,7 +201,8 @@ public class ReplicatedMap<K,V> extends AbstractReplicatedMap<K,V> {
 
         } //while
         long complete = System.currentTimeMillis() - start;
-        if (log.isInfoEnabled()) log.info(sm.getString("replicatedMap.relocate.complete", complete));
+        if (log.isInfoEnabled()) log.info(sm.getString("replicatedMap.relocate.complete",
+                Long.toString(complete)));
     }
 
     @Override

==================================================
FastQueue.java
index d261d282c4..bccc7026b2 100644
--- a/java/org/apache/catalina/tribes/transport/bio/PooledMultiSender.java
+++ b/java/org/apache/catalina/tribes/transport/bio/PooledMultiSender.java
@@ -39,7 +39,8 @@ public class PooledMultiSender extends PooledSender {
         try {
             sender = (MultiPointSender)getSender();
             if (sender == null) {
-                ChannelException cx = new ChannelException(sm.getString("pooledMultiSender.unable.retrieve.sender", getMaxWait()));
+                ChannelException cx = new ChannelException(sm.getString(
+                        "pooledMultiSender.unable.retrieve.sender", Long.toString(getMaxWait())));
                 for (int i = 0; i < destination.length; i++)
                     cx.addFaultyMember(destination[i], new NullPointerException(sm.getString("pooledMultiSender.retrieve.fail")));
                 throw cx;

==================================================
NioSender.java
index 124b9d5099..6d32024141 100644
--- a/java/org/apache/catalina/tribes/transport/bio/util/FastQueue.java
+++ b/java/org/apache/catalina/tribes/transport/bio/util/FastQueue.java
@@ -221,7 +221,8 @@ public class FastQueue {
                 } else {
                     if (last == null) {
                         ok = false;
-                        log.error(sm.getString("fastQueue.last.null", size.get()));
+                        log.error(sm.getString("fastQueue.last.null",
+                                Integer.toString(size.get())));
                     } else {
                         last.append(element);
                         last = element;
@@ -231,10 +232,10 @@ public class FastQueue {
             }
 
             if (first == null) {
-                log.error(sm.getString("fastQueue.first.null", size.get()));
+                log.error(sm.getString("fastQueue.first.null", Integer.toString(size.get())));
             }
             if (last == null) {
-                log.error(sm.getString("fastQueue.last.null.end", size.get()));
+                log.error(sm.getString("fastQueue.last.null.end", Integer.toString(size.get())));
             }
 
             if (log.isTraceEnabled()) log.trace("FastQueue.add: add ending with size " + size.get());

==================================================
ParallelNioSender.java
index 713710e47a..cffa92be9a 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioSender.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioSender.java
@@ -125,8 +125,8 @@ public class NioSender extends AbstractSender {
             }//end if
         } else {
             //unknown state, should never happen
-            log.warn(sm.getString("nioSender.unknown.state", ops));
-            throw new IOException(sm.getString("nioSender.unknown.state", ops));
+            log.warn(sm.getString("nioSender.unknown.state", Integer.toString(ops)));
+            throw new IOException(sm.getString("nioSender.unknown.state", Integer.toString(ops)));
         }//end if
         return false;
     }

==================================================
PooledParallelSender.java
index d2e28607d4..e9fd89111a 100644
--- a/java/org/apache/catalina/tribes/transport/nio/ParallelNioSender.java
+++ b/java/org/apache/catalina/tribes/transport/nio/ParallelNioSender.java
@@ -96,8 +96,12 @@ public class ParallelNioSender extends AbstractSender implements MultiPointSende
             }
             if ( remaining > 0 ) {
                 //timeout has occurred
-                ChannelException cxtimeout = new ChannelException(sm.getString("parallelNioSender.operation.timedout", getTimeout()));
-                if ( cx==null ) cx = new ChannelException(sm.getString("parallelNioSender.operation.timedout", getTimeout()));
+                ChannelException cxtimeout = new ChannelException(sm.getString(
+                        "parallelNioSender.operation.timedout", Long.toString(getTimeout())));
+                if (cx == null) {
+                    cx = new ChannelException(sm.getString("parallelNioSender.operation.timedout",
+                            Long.toString(getTimeout())));
+                }
                 for (int i=0; i<senders.length; i++ ) {
                     if (!senders[i].isComplete()) {
                         cx.addFaultyMember(senders[i].getDestination(),cxtimeout);
@@ -183,8 +187,9 @@ public class ParallelNioSender extends AbstractSender implements MultiPointSende
                     }
                 } else {
                     ChannelException cx = new ChannelException(
-                            sm.getString("parallelNioSender.sendFailed.attempt", sender.getAttempt(), maxAttempts),
-                            x);
+                            sm.getString("parallelNioSender.sendFailed.attempt",
+                                    Integer.toString(sender.getAttempt()),
+                                    Integer.toString(maxAttempts)), x);
                     cx.addFaultyMember(sender.getDestination(),x);
                     throw cx;
                 }//end if

==================================================
UUIDGenerator.java
index b01bdfd7ab..ad3099608f 100644
--- a/java/org/apache/catalina/tribes/transport/nio/PooledParallelSender.java
+++ b/java/org/apache/catalina/tribes/transport/nio/PooledParallelSender.java
@@ -39,7 +39,9 @@ public class PooledParallelSender extends PooledSender {
         if ( !connected ) throw new ChannelException(sm.getString("pooledParallelSender.sender.disconnected"));
         ParallelNioSender sender = (ParallelNioSender)getSender();
         if (sender == null) {
-            ChannelException cx = new ChannelException(sm.getString("pooledParallelSender.unable.retrieveSender.timeout", getMaxWait()));
+            ChannelException cx = new ChannelException(sm.getString(
+                    "pooledParallelSender.unable.retrieveSender.timeout",
+                    Long.toString(getMaxWait())));
             for (int i = 0; i < destination.length; i++)
                 cx.addFaultyMember(destination[i], new NullPointerException(sm.getString("pooledParallelSender.unable.retrieveSender")));
             throw cx;

==================================================
