9191a18624a8327b47f7455e2149d4cb11df8e10
==================================================
simplify API a bit based on feedback
==================================================
Filip Hanik
==================================================
Wed Jun 13 18:51:38 2007 +0000
==================================================
CometEvent.java
simplify API a bit based on feedback


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@546999 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CometEventImpl.java
index 2d180a87a4..520d3b67e2 100644
--- a/java/org/apache/catalina/CometEvent.java
+++ b/java/org/apache/catalina/CometEvent.java
@@ -163,44 +163,28 @@ public interface CometEvent {
     public void setTimeout(int timeout)
         throws ServletException, UnsupportedOperationException;
     
-    
-
-    /**
-     * Enumeration for a comet connection state.
-     * A comet session can be blocking or non blocking.
-     * COMET_NON_BLOCKING<br/>
-     * Option bit set for allowing non blocking IO
-     * when reading from the request or writing to the response<br/>
-     * COMET_BLOCKING<br/>
-     * Configure the comet connection for blocking IO, this is the default setting
-     * 
-     * @see #configure(int)
-     */
-    public enum CometConfiguration {COMET_BLOCKING, COMET_NON_BLOCKING};
-        
+            
     /**
      * Configures the connection for desired IO options.
      * By default a Comet connection is configured for <br/>
      * a) Blocking IO - standard servlet usage<br/>
      * b) Register for READ events when data arrives<br/>
      * Tomcat Comet allows you to configure for additional options:<br/>
-     * the <code>COMET_NON_BLOCKING</code> bit signals whether writing and reading from the request 
+     * the <code>configureBlocking(false)</code> bit signals whether writing and reading from the request 
      * or writing to the response will be non blocking.<br/>
-     * the <code>COMET_BLOCKING</code> bit signals the container you wish for read and write to be done in a blocking fashion
-     * @param cometOptions int - the option bit set
+     * the <code>configureBlocking(true)</code> bit signals the container you wish for read and write to be done in a blocking fashion
+     * @param blocking - true to make read and writes blocking
      * @throws IllegalStateException - if this method is invoked outside of the BEGIN event
-     * @see #CometConfiguration
      * @see #isReadable()
      * @see #isWriteable()
      */
-    public void configure(CometConfiguration... options) throws IllegalStateException;
+    public void configureBlocking(boolean blocking) throws IllegalStateException;
     
     /**
      * Returns the configuration for this Comet connection
-     * @return CometConfiguration[]
-     * @see #configure(CometConfiguration...)
+     * @return true if the connection is configured to be blocking, false for non blocing
      */
-    public CometConfiguration[] getConfiguration();
+    public boolean isBlocking();
     
     /**
      * OP_CALLBACK - receive a CALLBACK event from the container

==================================================
ActionCode.java
index ea279d54f1..89339ab8ea 100644
--- a/java/org/apache/catalina/connector/CometEventImpl.java
+++ b/java/org/apache/catalina/connector/CometEventImpl.java
@@ -29,6 +29,7 @@ import org.apache.catalina.CometEvent;
 import org.apache.catalina.util.StringManager;
 import org.apache.coyote.ActionCode;
 import org.apache.tomcat.util.net.PollerInterest;
+import org.apache.tomcat.util.MutableBoolean;
 
 public class CometEventImpl implements CometEvent {
 
@@ -79,9 +80,9 @@ public class CometEventImpl implements CometEvent {
     protected HashSet<CometOperation> cometOperations = new HashSet<CometOperation>(3);
     
     /**
-     * Current set of configurations
+     * Blocking or not blocking
      */
-    protected HashSet<CometConfiguration> cometConfigurations = new HashSet<CometConfiguration>(3);
+    protected boolean blocking = true;
 
     protected WorkerThreadCheck threadCheck = new WorkerThreadCheck();
 
@@ -95,7 +96,7 @@ public class CometEventImpl implements CometEvent {
     public void clear() {
         request = null;
         response = null;
-        cometConfigurations.clear();
+        blocking = true;
         cometOperations.clear();
     }
 
@@ -151,13 +152,12 @@ public class CometEventImpl implements CometEvent {
         return cometOperations.contains(op);
     }
     
-    public void configure(CometEvent.CometConfiguration... options) throws IllegalStateException {
+    public void configureBlocking(boolean blocking) throws IllegalStateException {
         checkWorkerThread();
-        cometConfigurations.clear();
-        for (CometEvent.CometConfiguration cc : options) {
-            cometConfigurations.add(cc);
-        }
-        request.action(ActionCode.ACTION_COMET_CONFIGURE,options);
+        if ( getEventType() != EventType.BEGIN ) throw new IllegalStateException("Can only be configured during the BEGIN event.");
+        MutableBoolean bool = new MutableBoolean(blocking);
+        request.action(ActionCode.ACTION_COMET_CONFIGURE_BLOCKING,bool);
+        this.blocking = bool.get();
     }
 
     public void register(CometEvent.CometOperation... operations) throws IllegalStateException {
@@ -172,8 +172,8 @@ public class CometEventImpl implements CometEvent {
         request.action(ActionCode.ACTION_COMET_REGISTER, translate(cometOperations.toArray(new CometOperation[0])));
     }
     
-    public CometConfiguration[] getConfiguration() {
-        return (CometConfiguration[])cometConfigurations.toArray(new CometConfiguration[0]);
+    public boolean isBlocking() {
+        return blocking;
     }
     
     public CometOperation[] getRegisteredOps() {

==================================================
Http11NioProcessor.java
index d46f8ad55a..3f809bcd3e 100644
--- a/java/org/apache/coyote/ActionCode.java
+++ b/java/org/apache/coyote/ActionCode.java
@@ -159,7 +159,7 @@ public final class ActionCode {
     /**
      * Configure a Comet connection
      */
-    public static final ActionCode ACTION_COMET_CONFIGURE = new ActionCode(25);
+    public static final ActionCode ACTION_COMET_CONFIGURE_BLOCKING = new ActionCode(25);
     
     /**
      * Register notifications for events for a certain comet connection

==================================================
