324e2c8d8f291ea0cc5b6258e26c340e07bc9837
==================================================
Some clean up in o.a.c.util
==================================================
Mark Emlyn
==================================================
Sun Sep 14 19:45:08 2008 +0000
==================================================
Base64.java
Some clean up in o.a.c.util
Use generics, remove unused code, fix various Eclipse warnings.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@695273 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CustomObjectInputStream.java
index 3148a848fe..4dfc538e66 100644
--- a/java/org/apache/catalina/util/Base64.java
+++ b/java/org/apache/catalina/util/Base64.java
@@ -37,7 +37,6 @@ public final class  Base64
     static private final int  TWENTYFOURBITGROUP = 24;
     static private final int  EIGHTBIT           = 8;
     static private final int  SIXTEENBIT         = 16;
-    static private final int  SIXBIT             = 6;
     static private final int  FOURBYTE           = 4;
     static private final int  SIGN               = -128;
     static private final byte PAD                = (byte) '=';

==================================================
DOMWriter.java
index f5f7e11bc8..ec76335c25 100644
--- a/java/org/apache/catalina/util/CustomObjectInputStream.java
+++ b/java/org/apache/catalina/util/CustomObjectInputStream.java
@@ -69,7 +69,7 @@ public final class CustomObjectInputStream
      * @exception ClassNotFoundException if this class cannot be found
      * @exception IOException if an input/output error occurs
      */
-    public Class resolveClass(ObjectStreamClass classDesc)
+    public Class<?> resolveClass(ObjectStreamClass classDesc)
         throws ClassNotFoundException, IOException {
         try {
             return Class.forName(classDesc.getName(), false, classLoader);
@@ -85,10 +85,10 @@ public final class CustomObjectInputStream
      * class descriptor. Do this using the class loader assigned to this
      * Context.
      */
-    protected Class resolveProxyClass(String[] interfaces)
+    protected Class<?> resolveProxyClass(String[] interfaces)
         throws IOException, ClassNotFoundException {
 
-        Class[] cinterfaces = new Class[interfaces.length];
+        Class<?>[] cinterfaces = new Class[interfaces.length];
         for (int i = 0; i < interfaces.length; i++)
             cinterfaces[i] = classLoader.loadClass(interfaces[i]);
 

==================================================
DateTool.java
index 0d68481d2e..73efe1b45f 100644
--- a/java/org/apache/catalina/util/DOMWriter.java
+++ b/java/org/apache/catalina/util/DOMWriter.java
@@ -332,18 +332,4 @@ public class DOMWriter {
 
    } // normalize(String):String
 
-   private static void printValidJavaEncoding() {
-      System.err.println( "    ENCODINGS:" );
-      System.err.print( "   " );
-      for( int i = 0;
-                     i < MIME2JAVA_ENCODINGS.length; i++) {
-         System.err.print( MIME2JAVA_ENCODINGS[i] + " " );
-      if( (i % 7 ) == 0 ){
-         System.err.println();
-         System.err.print( "   " );
-         }
-      }
-
-   } // printJavaEncoding()
-
 }

==================================================
ExtensionValidator.java
index f8b3df84ee..ad2d1f3dd0 100644
--- a/java/org/apache/catalina/util/DateTool.java
+++ b/java/org/apache/catalina/util/DateTool.java
@@ -33,9 +33,6 @@ import java.util.TimeZone;
  */
 public class DateTool {
 
-    private static StringManager sm =
-        StringManager.getManager("org.apache.catalina.util");
-
     /**
      * US locale - all HTTP dates are in english
      */

==================================================
HexUtils.java
index a476501ce0..a4763d34df 100644
--- a/java/org/apache/catalina/util/ExtensionValidator.java
+++ b/java/org/apache/catalina/util/ExtensionValidator.java
@@ -61,8 +61,9 @@ public final class ExtensionValidator {
     private static StringManager sm =
         StringManager.getManager("org.apache.catalina.util");
     
-    private static ArrayList containerAvailableExtensions = null;
-    private static ArrayList containerManifestResources = new ArrayList();
+    private static ArrayList<Extension> containerAvailableExtensions = null;
+    private static ArrayList<ManifestResource> containerManifestResources =
+        new ArrayList<ManifestResource>();
 
 
     // ----------------------------------------------------- Static Initializer
@@ -133,15 +134,17 @@ public final class ExtensionValidator {
                     throws IOException {
 
         String appName = context.getPath();
-        ArrayList appManifestResources = new ArrayList();
+        ArrayList<ManifestResource> appManifestResources =
+            new ArrayList<ManifestResource>();
         // If the application context is null it does not exist and 
         // therefore is not valid
         if (dirContext == null) return false;
         // Find the Manifest for the Web Applicaiton
         InputStream inputStream = null;
         try {
-            NamingEnumeration wne = dirContext.listBindings("/META-INF/");
-            Binding binding = (Binding) wne.nextElement();
+            NamingEnumeration<Binding> wne =
+                dirContext.listBindings("/META-INF/");
+            Binding binding = wne.nextElement();
             if (binding.getName().toUpperCase().equals("MANIFEST.MF")) {
                 Resource resource = (Resource)dirContext.lookup
                                     ("/META-INF/" + binding.getName());
@@ -169,13 +172,11 @@ public final class ExtensionValidator {
         }
 
         // Locate the Manifests for all bundled JARs
-        NamingEnumeration ne = null;
+        NamingEnumeration<Binding> ne = null;
         try {
-            if (dirContext != null) {
-                ne = dirContext.listBindings("WEB-INF/lib/");
-            }
+            ne = dirContext.listBindings("WEB-INF/lib/");
             while ((ne != null) && ne.hasMoreElements()) {
-                Binding binding = (Binding)ne.nextElement();
+                Binding binding = ne.nextElement();
                 if (!binding.getName().toLowerCase().endsWith(".jar")) {
                     continue;
                 }
@@ -239,16 +240,16 @@ public final class ExtensionValidator {
      *
      * @return true if manifest resource file requirements are met
      */
-    private static boolean validateManifestResources(String appName, 
-                                                     ArrayList resources) {
+    private static boolean validateManifestResources(String appName,
+            ArrayList<ManifestResource> resources) {
         boolean passes = true;
         int failureCount = 0;        
-        ArrayList availableExtensions = null;
+        ArrayList<Extension> availableExtensions = null;
 
-        Iterator it = resources.iterator();
+        Iterator<ManifestResource> it = resources.iterator();
         while (it.hasNext()) {
-            ManifestResource mre = (ManifestResource)it.next();
-            ArrayList requiredList = mre.getRequiredExtensions();
+            ManifestResource mre = it.next();
+            ArrayList<Extension> requiredList = mre.getRequiredExtensions();
             if (requiredList == null) {
                 continue;
             }
@@ -266,15 +267,15 @@ public final class ExtensionValidator {
             }
 
             // iterate through the list of required extensions
-            Iterator rit = requiredList.iterator();
+            Iterator<Extension> rit = requiredList.iterator();
             while (rit.hasNext()) {
                 boolean found = false;
-                Extension requiredExt = (Extension)rit.next();
+                Extension requiredExt = rit.next();
                 // check the applicaion itself for the extension
                 if (availableExtensions != null) {
-                    Iterator ait = availableExtensions.iterator();
+                    Iterator<Extension> ait = availableExtensions.iterator();
                     while (ait.hasNext()) {
-                        Extension targetExt = (Extension) ait.next();
+                        Extension targetExt = ait.next();
                         if (targetExt.isCompatibleWith(requiredExt)) {
                             requiredExt.setFulfilled(true);
                             found = true;
@@ -284,9 +285,10 @@ public final class ExtensionValidator {
                 }
                 // check the container level list for the extension
                 if (!found && containerAvailableExtensions != null) {
-                    Iterator cit = containerAvailableExtensions.iterator();
+                    Iterator<Extension> cit =
+                        containerAvailableExtensions.iterator();
                     while (cit.hasNext()) {
-                        Extension targetExt = (Extension) cit.next();
+                        Extension targetExt = cit.next();
                         if (targetExt.isCompatibleWith(requiredExt)) {
                             requiredExt.setFulfilled(true);
                             found = true;
@@ -332,20 +334,21 @@ public final class ExtensionValidator {
     *
     * @return HashMap Map of available extensions
     */
-    private static ArrayList buildAvailableExtensionsList(ArrayList resources) {
+    private static ArrayList<Extension> buildAvailableExtensionsList(
+            ArrayList<ManifestResource> resources) {
 
-        ArrayList availableList = null;
+        ArrayList<Extension> availableList = null;
 
-        Iterator it = resources.iterator();
+        Iterator<ManifestResource> it = resources.iterator();
         while (it.hasNext()) {
-            ManifestResource mre = (ManifestResource)it.next();
-            ArrayList list = mre.getAvailableExtensions();
+            ManifestResource mre = it.next();
+            ArrayList<Extension> list = mre.getAvailableExtensions();
             if (list != null) {
-                Iterator values = list.iterator();
+                Iterator<Extension> values = list.iterator();
                 while (values.hasNext()) {
-                    Extension ext = (Extension) values.next();
+                    Extension ext = values.next();
                     if (availableList == null) {
-                        availableList = new ArrayList();
+                        availableList = new ArrayList<Extension>();
                         availableList.add(ext);
                     } else {
                         availableList.add(ext);

==================================================
MD5Encoder.java
index 685e63babe..cb6747e38b 100644
--- a/java/org/apache/catalina/util/HexUtils.java
+++ b/java/org/apache/catalina/util/HexUtils.java
@@ -114,8 +114,8 @@ public final class HexUtils {
 
         StringBuffer sb = new StringBuffer(bytes.length * 2);
         for (int i = 0; i < bytes.length; i++) {
-            sb.append(convertDigit((int) (bytes[i] >> 4)));
-            sb.append(convertDigit((int) (bytes[i] & 0x0f)));
+            sb.append(convertDigit(bytes[i] >> 4));
+            sb.append(convertDigit(bytes[i] & 0x0f));
         }
         return (sb.toString());
 

==================================================
MIME2Java.java
index 3643168d0a..ee2415b192 100644
--- a/java/org/apache/catalina/util/MD5Encoder.java
+++ b/java/org/apache/catalina/util/MD5Encoder.java
@@ -58,8 +58,8 @@ public final class MD5Encoder {
         char[] buffer = new char[32];
 
         for (int i=0; i<16; i++) {
-            int low = (int) (binaryData[i] & 0x0f);
-            int high = (int) ((binaryData[i] & 0xf0) >> 4);
+            int low = binaryData[i] & 0x0f;
+            int high = (binaryData[i] & 0xf0) >> 4;
             buffer[i*2] = hexadecimal[high];
             buffer[i*2 + 1] = hexadecimal[low];
         }

==================================================
ManifestResource.java
index 831c177e5c..2d0c81cf6e 100644
--- a/java/org/apache/catalina/util/MIME2Java.java
+++ b/java/org/apache/catalina/util/MIME2Java.java
@@ -471,11 +471,11 @@ import java.util.*;
  */
 public class MIME2Java {
 
-    static private Hashtable s_enchash;
-    static private Hashtable s_revhash;
+    static private Hashtable<String,String> s_enchash;
+    static private Hashtable<String,String> s_revhash;
 
     static {
-        s_enchash = new Hashtable();
+        s_enchash = new Hashtable<String,String>();
         //    <preferred MIME name>, <Java encoding name>
         s_enchash.put("UTF-8", "UTF8");
         s_enchash.put("US-ASCII",        "8859_1");    // ?
@@ -519,7 +519,7 @@ public class MIME2Java {
                                                 // j:CNS11643 -> EUC-TW?
                                                 // ISO-2022-CN? ISO-2022-CN-EXT?
 
-        s_revhash = new Hashtable();
+        s_revhash = new Hashtable<String,String>();
         //    <Java encoding name>, <preferred MIME name>
         s_revhash.put("UTF8", "UTF-8");
         //s_revhash.put("8859_1", "US-ASCII");    // ?
@@ -580,7 +580,7 @@ public class MIME2Java {
      * @see #reverse
      */
     public static String convert(String mimeCharsetName) {
-        return (String)s_enchash.get(mimeCharsetName.toUpperCase());
+        return s_enchash.get(mimeCharsetName.toUpperCase());
     }
 
     /**
@@ -598,6 +598,6 @@ public class MIME2Java {
      * @see #convert
      */
     public static String reverse(String encoding) {
-        return (String)s_revhash.get(encoding.toUpperCase());
+        return s_revhash.get(encoding.toUpperCase());
     }
 }

==================================================
Queue.java
index 13c179a792..f22425e37e 100644
--- a/java/org/apache/catalina/util/ManifestResource.java
+++ b/java/org/apache/catalina/util/ManifestResource.java
@@ -39,8 +39,8 @@ public class ManifestResource {
     public static final int WAR = 2;
     public static final int APPLICATION = 3;
     
-    private ArrayList availableExtensions = null;
-    private ArrayList requiredExtensions = null;
+    private ArrayList<Extension> availableExtensions = null;
+    private ArrayList<Extension> requiredExtensions = null;
     
     private String resourceName = null;
     private int resourceType = -1;
@@ -66,7 +66,7 @@ public class ManifestResource {
      *
      * @return List of available extensions
      */
-    public ArrayList getAvailableExtensions() {
+    public ArrayList<Extension> getAvailableExtensions() {
         return availableExtensions;
     }
     
@@ -75,7 +75,7 @@ public class ManifestResource {
      *
      * @return List of required extensions
      */
-    public ArrayList getRequiredExtensions() {
+    public ArrayList<Extension> getRequiredExtensions() {
         return requiredExtensions;   
     }
     
@@ -119,9 +119,9 @@ public class ManifestResource {
         if (requiredExtensions == null) {
             return true;
         }
-        Iterator it = requiredExtensions.iterator();
+        Iterator<Extension> it = requiredExtensions.iterator();
         while (it.hasNext()) {
-            Extension ext = (Extension)it.next();
+            Extension ext = it.next();
             if (!ext.isFulfilled()) return false;            
         }
         return true;
@@ -165,14 +165,14 @@ public class ManifestResource {
      * @return List of required extensions, or null if the application
      * does not require any extensions
      */
-    private ArrayList getRequiredExtensions(Manifest manifest) {
+    private ArrayList<Extension> getRequiredExtensions(Manifest manifest) {
 
         Attributes attributes = manifest.getMainAttributes();
         String names = attributes.getValue("Extension-List");
         if (names == null)
             return null;
 
-        ArrayList extensionList = new ArrayList();
+        ArrayList<Extension> extensionList = new ArrayList<Extension>();
         names += " ";
 
         while (true) {
@@ -212,14 +212,14 @@ public class ManifestResource {
      * @return List of available extensions, or null if the web application
      * does not bundle any extensions
      */
-    private ArrayList getAvailableExtensions(Manifest manifest) {
+    private ArrayList<Extension> getAvailableExtensions(Manifest manifest) {
 
         Attributes attributes = manifest.getMainAttributes();
         String name = attributes.getValue("Extension-Name");
         if (name == null)
             return null;
 
-        ArrayList extensionList = new ArrayList();
+        ArrayList<Extension> extensionList = new ArrayList<Extension>();
 
         Extension extension = new Extension();
         extension.setExtensionName(name);

==================================================
SchemaResolver.java
deleted file mode 100644
index 9f69c60f61..0000000000
--- a/java/org/apache/catalina/util/Queue.java
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.catalina.util;
-
-import java.util.Vector;
-
-/**
- * A simple FIFO queue class which causes the calling thread to wait
- * if the queue is empty and notifies threads that are waiting when it
- * is not empty.
- *
- * @author Anil V (akv@eng.sun.com)
- */
-public class Queue {
-    private Vector vector = new Vector();
-
-    /**
-     * Put the object into the queue.
-     *
-     * @param   object          the object to be appended to the
-     *                          queue.
-     */
-    public synchronized void put(Object object) {
-        vector.addElement(object);
-        notify();
-    }
-
-    /**
-     * Pull the first object out of the queue. Wait if the queue is
-     * empty.
-     */
-    public synchronized Object pull() {
-        while (isEmpty())
-            try {
-                wait();
-            } catch (InterruptedException ex) {
-            }
-        return get();
-    }
-
-    /**
-     * Get the first object out of the queue. Return null if the queue
-     * is empty.
-     */
-    public synchronized Object get() {
-        Object object = peek();
-        if (object != null)
-            vector.removeElementAt(0);
-        return object;
-    }
-
-    /**
-     * Peek to see if something is available.
-     */
-    public Object peek() {
-        if (isEmpty())
-            return null;
-        return vector.elementAt(0);
-    }
-
-    /**
-     * Is the queue empty?
-     */
-    public boolean isEmpty() {
-        return vector.isEmpty();
-    }
-
-    /**
-     * How many elements are there in this queue?
-     */
-    public int size() {
-        return vector.size();
-    }
-}

==================================================
ServerInfo.java
index e0a18781f2..cafaf27de6 100644
--- a/java/org/apache/catalina/util/SchemaResolver.java
+++ b/java/org/apache/catalina/util/SchemaResolver.java
@@ -43,7 +43,8 @@ public class SchemaResolver implements EntityResolver {
      * The URLs of dtds and schemas that have been registered, keyed by the
      * public identifier that corresponds.
      */
-    protected HashMap entityValidator = new HashMap();
+    protected HashMap<String,String> entityValidator =
+        new HashMap<String,String>();
 
 
     /**
@@ -109,14 +110,14 @@ public class SchemaResolver implements EntityResolver {
         // Has this system identifier been registered?
         String entityURL = null;
         if (publicId != null) {
-            entityURL = (String) entityValidator.get(publicId);
+            entityURL = entityValidator.get(publicId);
         }
 
         // Redirect the schema location to a local destination
         String key = null;
         if (entityURL == null && systemId != null) {
             key = systemId.substring(systemId.lastIndexOf('/')+1);
-            entityURL = (String)entityValidator.get(key);
+            entityURL = entityValidator.get(key);
         }
 
         if (entityURL == null) {

==================================================
StringManager.java
index 18aadf2af4..1bf254a7bf 100644
--- a/java/org/apache/catalina/util/ServerInfo.java
+++ b/java/org/apache/catalina/util/ServerInfo.java
@@ -64,7 +64,7 @@ public class ServerInfo {
             serverBuilt = props.getProperty("server.built");
             serverNumber = props.getProperty("server.number");
         } catch (Throwable t) {
-            ;
+            //Ignore
         }
         if (serverInfo == null)
             serverInfo = "Apache Tomcat";

==================================================
URLEncoder.java
index b7fbb9133f..10cc907e76 100644
--- a/java/org/apache/catalina/util/StringManager.java
+++ b/java/org/apache/catalina/util/StringManager.java
@@ -147,7 +147,7 @@ public class StringManager {
             Object nonNullArgs[] = args;
             for (int i=0; i<args.length; i++) {
                 if (args[i] == null) {
-                    if (nonNullArgs==args) nonNullArgs=(Object[])args.clone();
+                    if (nonNullArgs==args) nonNullArgs = args.clone();
                     nonNullArgs[i] = "null";
                 }
             }
@@ -231,7 +231,8 @@ public class StringManager {
     // STATIC SUPPORT METHODS
     // --------------------------------------------------------------
 
-    private static Hashtable managers = new Hashtable();
+    private static Hashtable<String,StringManager> managers =
+        new Hashtable<String,StringManager>();
 
     /**
      * Get the StringManager for a particular package. If a manager for
@@ -242,7 +243,7 @@ public class StringManager {
      */
 
     public synchronized static StringManager getManager(String packageName) {
-        StringManager mgr = (StringManager)managers.get(packageName);
+        StringManager mgr = managers.get(packageName);
 
         if (mgr == null) {
             mgr = new StringManager(packageName);

==================================================
