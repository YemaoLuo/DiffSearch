e476e2f0e2fe48029603b125892b2a527d5c4507
==================================================
Add plumbing to parse SSLHostConfig from server.xml
==================================================
Mark Thomas
==================================================
Tue Apr 14 20:27:58 2015 +0000
==================================================
Connector.java
Add plumbing to parse SSLHostConfig from server.xml

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1673552 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Catalina.java
index 8de63d2fa3..42b6593fa7 100644
--- a/java/org/apache/catalina/connector/Connector.java
+++ b/java/org/apache/catalina/connector/Connector.java
@@ -35,6 +35,7 @@ import org.apache.coyote.ProtocolHandler;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.IntrospectionUtils;
+import org.apache.tomcat.util.net.SSLHostConfig;
 import org.apache.tomcat.util.res.StringManager;
 
 
@@ -851,6 +852,10 @@ public class Connector extends LifecycleMBeanBase  {
         return "Internal";
     }
 
+
+    public void addSslHostConfig(SSLHostConfig sslHostConfig) {
+        protocolHandler.addSslHostConfig(sslHostConfig);
+    }
     // --------------------------------------------------------- Public Methods
 
 

==================================================
ProtocolHandler.java
index 134fd8bcfd..da0c02746e 100644
--- a/java/org/apache/catalina/startup/Catalina.java
+++ b/java/org/apache/catalina/startup/Catalina.java
@@ -336,6 +336,12 @@ public class Catalina {
                             "addConnector",
                             "org.apache.catalina.connector.Connector");
 
+        digester.addObjectCreate("Server/Service/Connector/SSLHostConfig",
+                                 "org.apache.tomcat.util.net.SSLHostConfig");
+        digester.addSetProperties("Server/Service/Connector/SSLHostConfig");
+        digester.addSetNext("Server/Service/Connector/SSLHostConfig",
+                            "addSslHostConfig",
+                            "org.apache.tomcat.util.net.SSLHostConfig");
 
         digester.addObjectCreate("Server/Service/Connector/Listener",
                                  null, // MUST be specified in the element

==================================================
AbstractAjpProtocol.java
index 757c044c4e..36486e9491 100644
--- a/java/org/apache/coyote/ProtocolHandler.java
+++ b/java/org/apache/coyote/ProtocolHandler.java
@@ -19,6 +19,8 @@ package org.apache.coyote;
 
 import java.util.concurrent.Executor;
 
+import org.apache.tomcat.util.net.SSLHostConfig;
+
 
 /**
  * Abstract the protocol implementation, including threading, etc.
@@ -94,4 +96,7 @@ public interface ProtocolHandler {
      * Does this ProtocolHandler support sendfile?
      */
     public boolean isSendfileSupported();
+
+
+    public void addSslHostConfig(SSLHostConfig sslHostConfig);
 }

==================================================
AbstractHttp11Protocol.java
index d16033401b..0ba83dcc70 100644
--- a/java/org/apache/coyote/ajp/LocalStrings.properties
+++ b/java/org/apache/coyote/ajp/LocalStrings.properties
@@ -12,6 +12,8 @@
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 # See the License for the specific language governing permissions and
 # limitations under the License.
+ajpprotocol.noSSL=SSL is not supported with AJP. The SSL host configuration for [{0}] was ignored
+
 ajpnioprotocol.releaseStart=Iterating through our connections to release a socket channel [{0}]
 ajpnioprotocol.releaseEnd=Done iterating through our connections to release a socket channel [{0}] released [{1}]
 

==================================================
SpdyProxyProtocol.java
index 9f52466169..3e60f2dc24 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -327,12 +327,18 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     // ----------------------------------------------- HTTPS specific properties
     // -------------------------------------------- Handled via an SSLHostConfig
 
+    @Override
+    public void addSslHostConfig(SSLHostConfig sslHostConfig) {
+        getEndpoint().addSslHostConfig(sslHostConfig);
+    }
+
+
     private SSLHostConfig defaultSSLHostConfig = null;
     private void registerDefaultSSLHostConfig() {
         if (defaultSSLHostConfig == null) {
             defaultSSLHostConfig = new SSLHostConfig();
             defaultSSLHostConfig.setHostName(SSLHostConfig.DEFAULT_SSL_HOST_NAME);
-            getEndpoint().addHostConfig(defaultSSLHostConfig);
+            getEndpoint().addSslHostConfig(defaultSSLHostConfig);
         }
     }
 

==================================================
AbstractEndpoint.java
index 6d28733483..4bd8b5e536 100644
--- a/java/org/apache/coyote/spdy/SpdyProxyProtocol.java
+++ b/java/org/apache/coyote/spdy/SpdyProxyProtocol.java
@@ -31,6 +31,7 @@ import org.apache.tomcat.spdy.SpdyContext.SpdyHandler;
 import org.apache.tomcat.spdy.SpdyStream;
 import org.apache.tomcat.util.net.NioChannel;
 import org.apache.tomcat.util.net.NioEndpoint;
+import org.apache.tomcat.util.net.SSLHostConfig;
 import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 
@@ -143,4 +144,9 @@ public class SpdyProxyProtocol extends AbstractProtocol<NioChannel> {
         // TODO Auto-generated method stub
         return null;
     }
+
+    @Override
+    public void addSslHostConfig(SSLHostConfig sslHostConfig) {
+        // TODO Auto-generated method stub
+    }
 }

==================================================
AprEndpoint.java
index d1392b8604..b1c1f7b828 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -216,7 +216,7 @@ public abstract class AbstractEndpoint<S> {
     // ----------------------------------------------------------------- Properties
 
     protected Map<String,SSLHostConfig> sslHostConfigs = new ConcurrentHashMap<>();
-    public void addHostConfig(SSLHostConfig sslHostConfig) {
+    public void addSslHostConfig(SSLHostConfig sslHostConfig) {
         String key = sslHostConfig.getHostName();
         if (key == null || key.length() == 0) {
             // TODO i18n

==================================================
SSLHostConfig.java
index 14d7681195..6fdc054768 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -493,10 +493,10 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
 
                 // SSL protocol
                 int value = SSL.SSL_PROTOCOL_NONE;
-                if (sslHostConfig.getSslProtocols().size() == 0) {
+                if (sslHostConfig.getProtocols().size() == 0) {
                     value = SSL.SSL_PROTOCOL_ALL;
                 } else {
-                    for (String protocol : sslHostConfig.getSslProtocols()) {
+                    for (String protocol : sslHostConfig.getProtocols()) {
                         if ("SSLv2".equalsIgnoreCase(protocol)) {
                             value |= SSL.SSL_PROTOCOL_SSLV2;
                         } else if ("SSLv3".equalsIgnoreCase(protocol)) {

==================================================
JSSESocketFactory.java
index ae9d3f3072..39ced15238 100644
--- a/java/org/apache/tomcat/util/net/SSLHostConfig.java
+++ b/java/org/apache/tomcat/util/net/SSLHostConfig.java
@@ -25,7 +25,7 @@ public class SSLHostConfig {
 
     private String hostName;
 
-    private Set<String> sslProtocols = new HashSet<>();
+    private Set<String> protocols = new HashSet<>();
 
 
     public void setHostName(String hostName) {
@@ -38,24 +38,24 @@ public class SSLHostConfig {
     }
 
 
-    public void setProtocols(String protocols) {
+    public void setProtocols(String input) {
         // OpenSSL and JSSE use the same names.
-        if (protocols.trim().equalsIgnoreCase("all")) {
-            protocols = "TLSv1+TLSv1.1+TLSv1.2";
+        if (input.trim().equalsIgnoreCase("all")) {
+            input = "TLSv1+TLSv1.1+TLSv1.2";
         }
 
-        String[] values = protocols.split(",|\\+");
+        String[] values = input.split(",|\\+");
 
         for (String value: values) {
             String trimmed = value.trim();
             if (trimmed.length() > 0) {
-                sslProtocols.add(trimmed);
+                protocols.add(trimmed);
             }
         }
     }
 
 
-    public Set<String> getSslProtocols() {
-        return sslProtocols;
+    public Set<String> getProtocols() {
+        return protocols;
     }
 }

==================================================
