a9974c3e90bcc94f587b9ed8ec48c0e61968e76b
==================================================
Change method name so it is easier to distinguish between async and comet processing. No so important here since comet isn't supported, but need to change it to align with changes to be made in NIO and APR
==================================================
Mark Emlyn
==================================================
Mon Sep 27 00:17:26 2010 +0000
==================================================
AjpProcessor.java
Change method name so it is easier to distinguish between async and comet processing. No so important here since comet isn't supported, but need to change it to align with changes to be made in NIO and APR

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1001564 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11Processor.java
index 02ec3ee2ce..70d0609070 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -660,7 +660,7 @@ public class AjpProcessor implements ActionHook {
             RequestInfo rp = request.getRequestProcessor();
             if ( rp.getStage() != org.apache.coyote.Constants.STAGE_SERVICE ) { //async handling
                 dispatch.set(true);
-                endpoint.processSocket(this.socket, SocketStatus.OPEN);
+                endpoint.processSocketAsync(this.socket, SocketStatus.OPEN);
             } else {
                 dispatch.set(false);
             }
@@ -674,7 +674,7 @@ public class AjpProcessor implements ActionHook {
             RequestInfo rp = request.getRequestProcessor();
             AtomicBoolean dispatch = (AtomicBoolean)param;
             if ( rp.getStage() != org.apache.coyote.Constants.STAGE_SERVICE ) {//async handling
-                endpoint.processSocket(this.socket, SocketStatus.OPEN);
+                endpoint.processSocketAsync(this.socket, SocketStatus.OPEN);
                 dispatch.set(true);
             } else { 
                 dispatch.set(true);

==================================================
JIoEndpoint.java
index 1a88f84142..6e59e1a35f 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -502,7 +502,7 @@ public class Http11Processor extends AbstractHttp11Processor implements ActionHo
             RequestInfo rp = request.getRequestProcessor();
             if ( rp.getStage() != org.apache.coyote.Constants.STAGE_SERVICE ) { //async handling
                 dispatch.set(true);
-                endpoint.processSocket(this.socket, SocketStatus.OPEN);
+                endpoint.processSocketAsync(this.socket, SocketStatus.OPEN);
             } else {
                 dispatch.set(false);
             }
@@ -516,7 +516,7 @@ public class Http11Processor extends AbstractHttp11Processor implements ActionHo
             RequestInfo rp = request.getRequestProcessor();
             AtomicBoolean dispatch = (AtomicBoolean)param;
             if ( rp.getStage() != org.apache.coyote.Constants.STAGE_SERVICE ) {//async handling
-                endpoint.processSocket(this.socket, SocketStatus.OPEN);
+                endpoint.processSocketAsync(this.socket, SocketStatus.OPEN);
                 dispatch.set(true);
             } else { 
                 dispatch.set(true);

==================================================
