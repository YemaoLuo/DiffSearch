9ef5fe6c192584f11bebfdddccc9934c51168efb
==================================================
Push obtaining the remote port and local host/address/port down to the SocketWrapper
==================================================
Mark Thomas
==================================================
Thu Jan 29 16:56:30 2015 +0000
==================================================
AbstractHttp11Processor.java
Push obtaining the remote port and local host/address/port down to the SocketWrapper

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1655739 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index bbbf209f77..54950965fd 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -902,6 +902,38 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
             }
             break;
         }
+        case REQ_REMOTEPORT_ATTRIBUTE: {
+            if (socketWrapper == null) {
+                request.setRemotePort(0);
+            } else {
+                request.setRemotePort(socketWrapper.getRemotePort());
+            }
+            break;
+        }
+        case REQ_LOCAL_NAME_ATTRIBUTE: {
+            if (socketWrapper == null) {
+                request.localName().recycle();
+            } else {
+                request.localName().setString(socketWrapper.getLocalName());
+            }
+            break;
+        }
+        case REQ_LOCAL_ADDR_ATTRIBUTE: {
+            if (socketWrapper == null) {
+                request.localAddr().recycle();
+            } else {
+                request.localAddr().setString(socketWrapper.getLocalAddr());
+            }
+            break;
+        }
+        case REQ_LOCALPORT_ATTRIBUTE: {
+            if (socketWrapper == null) {
+                request.setLocalPort(0);
+            } else {
+                request.setLocalPort(socketWrapper.getLocalPort());
+            }
+            break;
+        }
         default: {
             actionInternal(actionCode, param);
             break;

==================================================
Http11Nio2Processor.java
index f0e02e1de5..1d8fe369a8 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -24,10 +24,8 @@ import org.apache.coyote.ActionCode;
 import org.apache.coyote.http11.filters.BufferedInputFilter;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.jni.Address;
 import org.apache.tomcat.jni.SSL;
 import org.apache.tomcat.jni.SSLSocket;
-import org.apache.tomcat.jni.Sockaddr;
 import org.apache.tomcat.jni.Socket;
 import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.AprEndpoint;
@@ -109,72 +107,6 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
         long socketRef = socketWrapper.getSocket().longValue();
 
         switch (actionCode) {
-        case REQ_LOCAL_NAME_ATTRIBUTE: {
-            if (socketRef == 0) {
-                request.localName().recycle();
-            } else {
-                if (socketWrapper.getLocalName() == null) {
-                    try {
-                        long sa = Address.get(Socket.APR_LOCAL, socketRef);
-                        socketWrapper.setLocalName(Address.getnameinfo(sa, 0));
-                    } catch (Exception e) {
-                        log.warn(sm.getString("http11processor.socket.info"), e);
-                    }
-                }
-                request.localName().setString(socketWrapper.getLocalName());
-            }
-            break;
-        }
-        case REQ_LOCAL_ADDR_ATTRIBUTE: {
-            if (socketRef == 0) {
-                request.localAddr().recycle();
-            } else {
-                if (socketWrapper.getLocalAddr() == null) {
-                    try {
-                        long sa = Address.get(Socket.APR_LOCAL, socketRef);
-                        socketWrapper.setLocalAddr(Address.getip(sa));
-                    } catch (Exception e) {
-                        log.warn(sm.getString("http11processor.socket.info"), e);
-                    }
-                }
-                request.localAddr().setString(socketWrapper.getLocalAddr());
-            }
-            break;
-        }
-        case REQ_REMOTEPORT_ATTRIBUTE: {
-            if (socketRef == 0) {
-                request.setRemotePort(0);
-            } else {
-                if (socketWrapper.getRemotePort() == -1) {
-                    try {
-                        long sa = Address.get(Socket.APR_REMOTE, socketRef);
-                        Sockaddr addr = Address.getInfo(sa);
-                        socketWrapper.setRemotePort(addr.port);
-                    } catch (Exception e) {
-                        log.warn(sm.getString("http11processor.socket.info"), e);
-                    }
-                }
-                request.setRemotePort(socketWrapper.getRemotePort());
-            }
-            break;
-        }
-        case REQ_LOCALPORT_ATTRIBUTE: {
-            if (socketRef == 0) {
-                request.setLocalPort(0);
-            } else {
-                if (socketWrapper.getLocalPort() == -1) {
-                    try {
-                        long sa = Address.get(Socket.APR_LOCAL, socketRef);
-                        Sockaddr addr = Address.getInfo(sa);
-                        socketWrapper.setLocalPort(addr.port);
-                    } catch (Exception e) {
-                        log.warn(sm.getString("http11processor.socket.info"), e);
-                    }
-                }
-                request.setLocalPort(socketWrapper.getLocalPort());
-            }
-            break;
-        }
         case REQ_SSL_ATTRIBUTE: {
             if (endpoint.isSSLEnabled() && (socketRef != 0)) {
                 try {

==================================================
Http11NioProcessor.java
index 233b14a592..2e14909c27 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Processor.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Processor.java
@@ -17,8 +17,6 @@
 package org.apache.coyote.http11;
 
 import java.io.IOException;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
 
 import javax.net.ssl.SSLEngine;
 
@@ -111,71 +109,6 @@ public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
     public void actionInternal(ActionCode actionCode, Object param) {
 
         switch (actionCode) {
-        case REQ_LOCAL_NAME_ATTRIBUTE: {
-            if (socketWrapper == null || socketWrapper.getSocket() == null) {
-                request.localName().recycle();
-            } else {
-                if (socketWrapper.getLocalName() == null) {
-                    InetAddress inetAddr = null;
-                    try {
-                        inetAddr = ((InetSocketAddress) socketWrapper.getSocket().getIOChannel().getLocalAddress()).getAddress();
-                    } catch (IOException e) {
-                        // Ignore
-                    }
-                    if (inetAddr != null) {
-                        socketWrapper.setLocalName(inetAddr.getHostName());
-                    }
-                }
-                request.localName().setString(socketWrapper.getLocalName());
-            }
-            break;
-        }
-        case REQ_LOCAL_ADDR_ATTRIBUTE: {
-            if (socketWrapper == null || socketWrapper.getSocket() == null) {
-                request.localAddr().recycle();
-            } else {
-                if (socketWrapper.getLocalAddr() == null) {
-                    try {
-                        socketWrapper.setLocalAddr(
-                                ((InetSocketAddress) socketWrapper.getSocket().getIOChannel().getLocalAddress()).getAddress().getHostAddress());
-                    } catch (IOException e) {
-                        // Ignore
-                    }
-                }
-                request.localAddr().setString(socketWrapper.getLocalAddr());
-            }
-            break;
-        }
-        case REQ_REMOTEPORT_ATTRIBUTE: {
-            if (socketWrapper == null || socketWrapper.getSocket() == null) {
-                request.setRemotePort(0);
-            } else {
-                if (socketWrapper.getRemotePort() == -1) {
-                    try {
-                        socketWrapper.setRemotePort(((InetSocketAddress) socketWrapper.getSocket().getIOChannel().getRemoteAddress()).getPort());
-                    } catch (IOException e) {
-                        // Ignore
-                    }
-                }
-                request.setRemotePort(socketWrapper.getRemotePort());
-            }
-            break;
-        }
-        case REQ_LOCALPORT_ATTRIBUTE: {
-            if (socketWrapper == null || socketWrapper.getSocket() == null) {
-                request.setLocalPort(0);
-            } else {
-                if (socketWrapper.getLocalPort() == -1) {
-                    try {
-                        socketWrapper.setLocalPort(((InetSocketAddress) socketWrapper.getSocket().getIOChannel().getLocalAddress()).getPort());
-                    } catch (IOException e) {
-                        // Ignore
-                    }
-                }
-                request.setLocalPort(socketWrapper.getLocalPort());
-            }
-            break;
-        }
         case REQ_SSL_ATTRIBUTE: {
             try {
                 if (sslSupport != null) {

==================================================
AprEndpoint.java
index 7616e83813..76e3f0f0b4 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -17,7 +17,6 @@
 package org.apache.coyote.http11;
 
 import java.io.IOException;
-import java.net.InetAddress;
 
 import javax.net.ssl.SSLEngine;
 
@@ -98,54 +97,6 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
     public void actionInternal(ActionCode actionCode, Object param) {
 
         switch (actionCode) {
-        case REQ_LOCAL_NAME_ATTRIBUTE: {
-            if (socketWrapper == null) {
-                request.localName().recycle();
-            } else {
-                if (socketWrapper.getLocalName() == null) {
-                    InetAddress inetAddr = socketWrapper.getSocket().getIOChannel().socket().getLocalAddress();
-                    if (inetAddr != null) {
-                        socketWrapper.setLocalName(inetAddr.getHostName());
-                    }
-                }
-                request.localName().setString(socketWrapper.getLocalName());
-            }
-            break;
-        }
-        case REQ_LOCAL_ADDR_ATTRIBUTE: {
-            if (socketWrapper == null) {
-                request.localAddr().recycle();
-            } else {
-                if (socketWrapper.getLocalAddr() == null) {
-                    socketWrapper.setLocalAddr(
-                            socketWrapper.getSocket().getIOChannel().socket().getLocalAddress().getHostAddress());
-                }
-                request.localAddr().setString(socketWrapper.getLocalAddr());
-            }
-            break;
-        }
-        case REQ_REMOTEPORT_ATTRIBUTE: {
-            if (socketWrapper == null) {
-                request.setRemotePort(0);
-            } else {
-                if (socketWrapper.getRemotePort() == -1) {
-                    socketWrapper.setRemotePort(socketWrapper.getSocket().getIOChannel().socket().getPort());
-                }
-                request.setRemotePort(socketWrapper.getRemotePort());
-            }
-            break;
-        }
-        case REQ_LOCALPORT_ATTRIBUTE: {
-            if (socketWrapper == null) {
-                request.setLocalPort(0);
-            } else {
-                if (socketWrapper.getLocalPort() == -1) {
-                    socketWrapper.setLocalPort(socketWrapper.getSocket().getIOChannel().socket().getLocalPort());
-                }
-                request.setLocalPort(socketWrapper.getLocalPort());
-            }
-            break;
-        }
         case REQ_SSL_ATTRIBUTE: {
             try {
                 if (sslSupport != null) {

==================================================
Nio2Endpoint.java
index 9bd0d800ec..08a8ee654e 100644
--- a/java/org/apache/tomcat/util/net/LocalStrings.properties
+++ b/java/org/apache/tomcat/util/net/LocalStrings.properties
@@ -25,7 +25,11 @@ endpoint.warn.noInsecureReneg=Secure re-negotiation is not supported by the SSL
 endpoint.warn.unlockAcceptorFailed=Acceptor thread [{0}] failed to unlock. Forcing hard socket shutdown.
 endpoint.warn.executorShutdown=The executor associated with thread pool [{0}] has not fully shutdown. Some application threads may still be running.
 endpoint.warn.noRemoteAddr=Unable to determine remote address for socket [{0}]
-endpoint.warn.noRemoteHost=Unable to determine remote host for socket [{0}]
+endpoint.warn.noRemoteHost=Unable to determine remote host name for socket [{0}]
+endpoint.warn.noRemotePort=Unable to determine remote port for socket [{0}]
+endpoint.warn.noLocalAddr=Unable to determine local address for socket [{0}]
+endpoint.warn.noLocalName=Unable to determine local host name for socket [{0}]
+endpoint.warn.noLocalPort=Unable to determine local port for socket [{0}]
 endpoint.debug.channelCloseFail=Failed to close channel
 endpoint.debug.destroySocket=Destroying socket [{0}]
 endpoint.debug.pollerAdd=Add to addList socket [{0}], timeout [{1}], flags [{2}]

==================================================
NioEndpoint.java
index 611645500f..046037eb30 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -237,7 +237,9 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
     // --------------------------------------------------------- Public Methods
 
     /**
-     * Number of keepalive sockets.
+     * Number of keep-alive sockets.
+     *
+     * @return Always returns -1.
      */
     public int getKeepAliveCount() {
         // For this connector, only the overall connection count is relevant
@@ -1340,6 +1342,62 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
                 }
             }
         }
+
+
+        @Override
+        protected void populateRemotePort() {
+            SocketAddress socketAddress = null;
+            try {
+                socketAddress = getSocket().getIOChannel().getRemoteAddress();
+            } catch (IOException e) {
+                log.warn(sm.getString("endpoint.warn.noRemotePort", getSocket()), e);
+            }
+            if (socketAddress instanceof InetSocketAddress) {
+                remotePort = ((InetSocketAddress) socketAddress).getPort();
+            }
+        }
+
+
+        @Override
+        protected void populateLocalName() {
+            SocketAddress socketAddress = null;
+            try {
+                socketAddress = getSocket().getIOChannel().getLocalAddress();
+            } catch (IOException e) {
+                log.warn(sm.getString("endpoint.warn.noLocalName", getSocket()), e);
+            }
+            if (socketAddress instanceof InetSocketAddress) {
+                localName = ((InetSocketAddress) socketAddress).getHostName();
+            }
+        }
+
+
+        @Override
+        protected void populateLocalAddr() {
+            SocketAddress socketAddress = null;
+            try {
+                socketAddress = getSocket().getIOChannel().getLocalAddress();
+            } catch (IOException e) {
+                log.warn(sm.getString("endpoint.warn.noLocalAddr", getSocket()), e);
+            }
+            if (socketAddress instanceof InetSocketAddress) {
+                localAddr = ((InetSocketAddress) socketAddress).getAddress().getHostAddress();
+            }
+        }
+
+
+        @Override
+        protected void populateLocalPort() {
+            SocketAddress socketAddress = null;
+            try {
+                socketAddress = getSocket().getIOChannel().getLocalAddress();
+            } catch (IOException e) {
+                log.warn(sm.getString("endpoint.warn.noLocalPort", getSocket()), e);
+            }
+            if (socketAddress instanceof InetSocketAddress) {
+                localPort = ((InetSocketAddress) socketAddress).getPort();
+            }
+        }
     }
 
 

==================================================
SocketWrapperBase.java
index 8933b6fb6f..17c9f45c4e 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -193,7 +193,9 @@ public class NioEndpoint extends AbstractEndpoint<NioChannel> {
     private Poller[] pollers = null;
     private AtomicInteger pollerRotater = new AtomicInteger(0);
     /**
-     * Return an available poller in true round robin fashion
+     * Return an available poller in true round robin fashion.
+     *
+     * @return The next poller in sequence
      */
     public Poller getPoller0() {
         int idx = Math.abs(pollerRotater.incrementAndGet()) % pollers.length;
@@ -290,7 +292,10 @@ public class NioEndpoint extends AbstractEndpoint<NioChannel> {
 
     // --------------------------------------------------------- Public Methods
     /**
-     * Number of keepalive sockets.
+     * Number of keep-alive sockets.
+     *
+     * @return The number of sockets currently in the keep-alive state waiting
+     *         for the next request to be received on the socket
      */
     public int getKeepAliveCount() {
         if (pollers == null) {
@@ -1566,6 +1571,36 @@ public class NioEndpoint extends AbstractEndpoint<NioChannel> {
                 }
             }
         }
+
+
+        @Override
+        protected void populateRemotePort() {
+            remotePort = getSocket().getIOChannel().socket().getPort();
+        }
+
+
+        @Override
+        protected void populateLocalName() {
+            InetAddress inetAddr = getSocket().getIOChannel().socket().getLocalAddress();
+            if (inetAddr != null) {
+                localName = inetAddr.getHostName();
+            }
+        }
+
+
+        @Override
+        protected void populateLocalAddr() {
+            InetAddress inetAddr = getSocket().getIOChannel().socket().getLocalAddress();
+            if (inetAddr != null) {
+                localAddr = inetAddr.getHostAddress();
+            }
+        }
+
+
+        @Override
+        protected void populateLocalPort() {
+            localPort = getSocket().getIOChannel().socket().getLocalPort();
+        }
     }
 
 

==================================================
