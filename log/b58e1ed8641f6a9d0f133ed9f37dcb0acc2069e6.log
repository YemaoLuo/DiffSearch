b58e1ed8641f6a9d0f133ed9f37dcb0acc2069e6
==================================================
Remove nbRead(). Calls to available() now trigger a call of fill(false) (i.e. non-blocking). This avoids a problem observed on the users list where repeated calls to available() in turn triggered calls to nbRead() that resulted in the buffer being expanded as nbRead() didn't reset pos and lastValid when adding data to what was essentially an empty buffer.
==================================================
Mark Emlyn
==================================================
Wed Aug 28 10:58:05 2013 +0000
==================================================
AbstractInputBuffer.java
Remove nbRead(). Calls to available() now trigger a call of fill(false) (i.e. non-blocking). This avoids a problem observed on the users list where repeated calls to available() in turn triggered calls to nbRead() that resulted in the buffer being expanded as nbRead() didn't reset pos and lastValid when adding data to what was essentially an empty buffer.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1518158 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InternalAprInputBuffer.java
index 3765af4d67..3bec7c294c 100644
--- a/java/org/apache/coyote/http11/AbstractInputBuffer.java
+++ b/java/org/apache/coyote/http11/AbstractInputBuffer.java
@@ -244,12 +244,6 @@ public abstract class AbstractInputBuffer<S> implements InputBuffer{
     protected abstract void init(SocketWrapper<S> socketWrapper,
             AbstractEndpoint endpoint) throws IOException;
 
-    /**
-     * Issues a non blocking read.
-     * @return int  Number of bytes read
-     */
-    protected abstract int nbRead() throws IOException;
-
     protected abstract Log getLog();
 
 
@@ -348,7 +342,8 @@ public abstract class AbstractInputBuffer<S> implements InputBuffer{
         }
 
         try {
-            available = nbRead();
+            fill(false);
+            available = lastValid - pos;
         } catch (IOException ioe) {
             if (getLog().isDebugEnabled()) {
                 getLog().debug(sm.getString("iib.available.readFail"), ioe);

==================================================
InternalInputBuffer.java
index b50e97f095..c8d7d364ed 100644
--- a/java/org/apache/coyote/http11/InternalAprInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalAprInputBuffer.java
@@ -626,32 +626,6 @@ public class InternalAprInputBuffer extends AbstractInputBuffer<Long> {
     }
 
 
-    @Override
-    protected int nbRead() throws IOException {
-        bbuf.clear();
-        int nRead = doReadSocket(false);
-
-        if (nRead > 0) {
-            bbuf.limit(nRead);
-            bbuf.get(buf, pos, nRead);
-            lastValid = pos + nRead;
-            return nRead;
-        } else if (-nRead == Status.EAGAIN) {
-            return 0;
-        } else if (-nRead == Status.TIMEUP) {
-            // Attempting to read from the socket when the poller has not
-            // signalled that there is data to read appears to behave like a
-            // blocking read with a short timeout on OSX rather than like a
-            // non-blocking read. If no data is read, treat the resulting
-            // timeout like a non-blocking read that returned no data.
-            return 0;
-        } else {
-            throw new IOException(sm.getString("iib.failedread.apr",
-                    Integer.valueOf(-nRead)));
-        }
-    }
-
-
     @Override
     protected final Log getLog() {
         return log;

==================================================
InternalNioInputBuffer.java
index c07bab43c4..33a4a24297 100644
--- a/java/org/apache/coyote/http11/InternalInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalInputBuffer.java
@@ -552,15 +552,6 @@ public class InternalInputBuffer extends AbstractInputBuffer<Socket> {
     }
 
 
-    @Override
-    protected int nbRead() throws IOException {
-        // If this gets called for BIO need to make caller think there is data
-        // to read as BIO always reads whether there is data or not (and blocks
-        // until there is data to read).
-        return 1;
-    }
-
-
     @Override
     protected final Log getLog() {
         return log;

==================================================
