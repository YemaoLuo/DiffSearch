58d66563624026cc96cbc03045a649fedf440a9f
==================================================
Fix a regression that caused a  nuance in refactoring for ErrorReportValve
==================================================
lihan lihan@apache.org
==================================================
Mon Nov 7 10:18:24 2022 +0800
==================================================
ErrorReportValve.java
Fix a regression that caused a  nuance in refactoring for ErrorReportValve

revert 64573401.
https://bz.apache.org/bugzilla/show_bug.cgi?id=66338



==================================================
JsonErrorReportValve.java
index 1048985d32..365109ebf9 100644
--- a/java/org/apache/catalina/valves/ErrorReportValve.java
+++ b/java/org/apache/catalina/valves/ErrorReportValve.java
@@ -141,23 +141,6 @@ public class ErrorReportValve extends ValveBase {
         response.setSuspended(false);
 
         try {
-            int statusCode = response.getStatus();
-
-            // Do nothing on a 1xx, 2xx and 3xx status
-            // Do nothing if anything has been written already
-            // Do nothing if the response hasn't been explicitly marked as in error
-            //    and that error has not been reported.
-            if (statusCode < 400 || response.getContentWritten() > 0 || !response.setErrorReported()) {
-                return;
-            }
-
-            // If an error has occurred that prevents further I/O, don't waste time
-            // producing an error report that will never be read
-            AtomicBoolean result = new AtomicBoolean(false);
-            response.getCoyoteResponse().action(ActionCode.IS_IO_ALLOWED, result);
-            if (!result.get()) {
-                return;
-            }
             report(request, response, throwable);
         } catch (Throwable tt) {
             ExceptionUtils.handleThrowable(tt);
@@ -177,7 +160,25 @@ public class ErrorReportValve extends ValveBase {
      *  a root cause exception
      */
     protected void report(Request request, Response response, Throwable throwable) {
+
         int statusCode = response.getStatus();
+
+        // Do nothing on a 1xx, 2xx and 3xx status
+        // Do nothing if anything has been written already
+        // Do nothing if the response hasn't been explicitly marked as in error
+        //    and that error has not been reported.
+        if (statusCode < 400 || response.getContentWritten() > 0 || !response.setErrorReported()) {
+            return;
+        }
+
+        // If an error has occurred that prevents further I/O, don't waste time
+        // producing an error report that will never be read
+        AtomicBoolean result = new AtomicBoolean(false);
+        response.getCoyoteResponse().action(ActionCode.IS_IO_ALLOWED, result);
+        if (!result.get()) {
+            return;
+        }
+
         ErrorPage errorPage = null;
         if (throwable != null) {
             errorPage = errorPageSupport.find(throwable);

==================================================
