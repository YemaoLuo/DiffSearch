a041e4e477c957343aa25ce06798c8e538cb0b22
==================================================
- Expose executors in JMX (shouldn't hurt).
==================================================
Remy Maucherat
==================================================
Thu Mar 22 13:29:30 2007 +0000
==================================================
StandardService.java
- Expose executors in JMX (shouldn't hurt).

git-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@521257 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StandardThreadExecutor.java
index 0764c1e326..42ac3cc1c4 100644
--- a/java/org/apache/catalina/core/StandardService.java
+++ b/java/org/apache/catalina/core/StandardService.java
@@ -518,6 +518,12 @@ public class StandardService
             }
         }
 
+        synchronized (executors) {
+            for ( int i=0; i<executors.size(); i++ ) {
+                executors.get(i).start();
+            }
+        }
+
         // Start our defined Connectors second
         synchronized (connectors) {
             for (int i = 0; i < connectors.length; i++) {
@@ -526,12 +532,6 @@ public class StandardService
             }
         }
         
-        synchronized (executors) {
-            for ( int i=0; i<executors.size(); i++ ) {
-                executors.get(i).start();
-            }
-        }
-
         // Notify our interested LifecycleListeners
         lifecycle.fireLifecycleEvent(AFTER_START_EVENT, null);
 
@@ -594,11 +594,27 @@ public class StandardService
             }
         }
 
+        synchronized (executors) {
+            for ( int i=0; i<executors.size(); i++ ) {
+                executors.get(i).stop();
+            }
+        }
+
         if( oname==controller ) {
             // we registered ourself on init().
             // That should be the typical case - this object is just for
             // backward compat, nobody should bother to load it explicitely
             Registry.getRegistry(null, null).unregisterComponent(oname);
+            Executor[] executors = findExecutors();
+            for (int i = 0; i < executors.length; i++) {
+                try {
+                    ObjectName executorObjectName = 
+                        new ObjectName(domain + ":type=Executor,name=" + executors[i].getName());
+                    Registry.getRegistry(null, null).unregisterComponent(executorObjectName);
+                } catch (Exception e) {
+                    // Ignore (invalid ON, which cannot happen)
+                }
+            }
         }
         
 
@@ -632,6 +648,15 @@ public class StandardService
                 this.controller=oname;
                 Registry.getRegistry(null, null)
                     .registerComponent(this, oname, null);
+                
+                Executor[] executors = findExecutors();
+                for (int i = 0; i < executors.length; i++) {
+                    ObjectName executorObjectName = 
+                        new ObjectName(domain + ":type=Executor,name=" + executors[i].getName());
+                    Registry.getRegistry(null, null)
+                        .registerComponent(executors[i], executorObjectName, null);
+                }
+                
             } catch (Exception e) {
                 log.error(sm.getString("standardService.register.failed",domain),e);
             }

==================================================
