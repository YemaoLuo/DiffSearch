e2ec4115d6dbf44bcd315fc719205f1d0a097223
==================================================
UCDetector: use final
==================================================
Mark Emlyn
==================================================
Wed Feb 20 12:58:46 2013 +0000
==================================================
WsFrameBase.java
UCDetector: use final

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1448141 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WsFrameClient.java
index 2402771bfd..b7ca9a6a85 100644
--- a/java/org/apache/tomcat/websocket/WsFrameBase.java
+++ b/java/org/apache/tomcat/websocket/WsFrameBase.java
@@ -67,7 +67,7 @@ public abstract class WsFrameBase {
     private boolean fin = false;
     private int rsv = 0;
     private byte opCode = 0;
-    private byte[] mask = new byte[4];
+    private final byte[] mask = new byte[4];
     private int maskIndex = 0;
     private long payloadLength = 0;
     private long payloadWritten = 0;

==================================================
ServerContainerImpl.java
index 18441435be..ce61a39f0a 100644
--- a/java/org/apache/tomcat/websocket/WsFrameClient.java
+++ b/java/org/apache/tomcat/websocket/WsFrameClient.java
@@ -26,8 +26,8 @@ import javax.websocket.CloseReason.CloseCodes;
 
 public class WsFrameClient extends WsFrameBase {
 
-    private ByteBuffer response;
-    private AsynchronousSocketChannel channel;
+    private final ByteBuffer response;
+    private final AsynchronousSocketChannel channel;
     private final CompletionHandler<Integer,Void> handler;
 
     public WsFrameClient(ByteBuffer response, AsynchronousSocketChannel channel,

==================================================
UriTemplate.java
index b0f2ef4b0a..39abf7bd7f 100644
--- a/java/org/apache/tomcat/websocket/server/ServerContainerImpl.java
+++ b/java/org/apache/tomcat/websocket/server/ServerContainerImpl.java
@@ -51,12 +51,12 @@ public class ServerContainerImpl extends WsWebSocketContainer {
 
     // Needs to be a WeakHashMap to prevent memory leaks when a context is
     // stopped
-    private static Map<ClassLoader,ServerContainerImpl> classLoaderContainerMap =
-            new WeakHashMap<>();
-    private static Object classLoaderContainerMapLock = new Object();
-    private static StringManager sm =
+    private static final Map<ClassLoader,ServerContainerImpl>
+            classLoaderContainerMap = new WeakHashMap<>();
+    private static final Object classLoaderContainerMapLock = new Object();
+    private static final StringManager sm =
             StringManager.getManager(Constants.PACKAGE_NAME);
-    protected final Log log = LogFactory.getLog(ServerContainerImpl.class);
+    private final Log log = LogFactory.getLog(ServerContainerImpl.class);
 
 
     public static ServerContainerImpl getServerContainer() {
@@ -75,12 +75,12 @@ public class ServerContainerImpl extends WsWebSocketContainer {
     private final WsWriteTimeout wsWriteTimeout = new WsWriteTimeout();
 
     private volatile ServletContext servletContext = null;
-    private Map<String,ServerEndpointConfiguration> configMap =
+    private final Map<String,ServerEndpointConfiguration> configMap =
             new ConcurrentHashMap<>();
-    private Map<String,UriTemplate> templateMap =
+    private final Map<String,UriTemplate> templateMap =
             new ConcurrentHashMap<>();
-    private Map<String,Class<?>> pojoMap = new ConcurrentHashMap<>();
-    private Map<Class<?>,PojoMethodMapping> pojoMethodMap =
+    private final Map<String,Class<?>> pojoMap = new ConcurrentHashMap<>();
+    private final Map<Class<?>,PojoMethodMapping> pojoMethodMap =
             new ConcurrentHashMap<>();
 
 

==================================================
WsRemoteEndpointServer.java
index 439b58fc78..16517d7d67 100644
--- a/java/org/apache/tomcat/websocket/server/UriTemplate.java
+++ b/java/org/apache/tomcat/websocket/server/UriTemplate.java
@@ -32,7 +32,7 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public class UriTemplate {
 
-    private static StringManager sm =
+    private static final StringManager sm =
             StringManager.getManager(Constants.PACKAGE_NAME);
 
     private final String template;

==================================================
