b6fc4aa6110ebb1dce2a0c9469a0b2f590deec31
==================================================
Allow using SSLImplementationName configuration option with JSSE, since it turns out SSLContext cannot be extended except by using JCE. In practical terms, this allows using an alternate SSL engine implementation without having to change additional things in Tomcat.
==================================================
Remy Maucherat
==================================================
Wed Apr 29 11:58:09 2015 +0000
==================================================
AbstractJsseEndpoint.java
Allow using SSLImplementationName configuration option with JSSE, since it turns out SSLContext cannot be extended except by using JCE. In practical terms, this allows using an alternate SSL engine implementation without having to change additional things in Tomcat.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1676722 13f79535-47bb-0310-9956-ffa450edef68



==================================================
SSLContext.java
index 9606e521fd..d5e18a36a2 100644
--- a/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java
@@ -21,7 +21,6 @@ import java.util.Locale;
 import java.util.Map;
 
 import javax.net.ssl.KeyManager;
-import javax.net.ssl.SSLContext;
 import javax.net.ssl.SSLEngine;
 import javax.net.ssl.SSLParameters;
 import javax.net.ssl.SSLSessionContext;

==================================================
SSLUtil.java
new file mode 100644
index 0000000000..c2ddad2cb7
--- /dev/null
+++ b/java/org/apache/tomcat/util/net/SSLContext.java
@@ -0,0 +1,48 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package org.apache.tomcat.util.net;
+
+import java.security.KeyManagementException;
+import java.security.SecureRandom;
+
+import javax.net.ssl.KeyManager;
+import javax.net.ssl.SSLEngine;
+import javax.net.ssl.SSLParameters;
+import javax.net.ssl.SSLServerSocketFactory;
+import javax.net.ssl.SSLSessionContext;
+import javax.net.ssl.TrustManager;
+
+/**
+ * This interface is needed to override the default SSLContext class
+ * to allow SSL implementation pluggability without having to use JCE. With
+ * regular JSSE it will do nothing but delegate to the SSLContext.
+ */
+public interface SSLContext {
+
+    public abstract void init(KeyManager[] kms, TrustManager[] tms,
+            SecureRandom sr) throws KeyManagementException;
+
+    public abstract SSLSessionContext getServerSessionContext();
+
+    public abstract SSLEngine createSSLEngine();
+
+    public abstract SSLServerSocketFactory getServerSocketFactory();
+
+    public abstract SSLParameters getSupportedSSLParameters();
+
+}

==================================================
JSSESSLContext.java
index daa76c7667..8ba0e86a45 100644
--- a/java/org/apache/tomcat/util/net/SSLUtil.java
+++ b/java/org/apache/tomcat/util/net/SSLUtil.java
@@ -17,7 +17,6 @@
 package org.apache.tomcat.util.net;
 
 import javax.net.ssl.KeyManager;
-import javax.net.ssl.SSLContext;
 import javax.net.ssl.SSLSessionContext;
 import javax.net.ssl.TrustManager;
 

==================================================
JSSESocketFactory.java
new file mode 100644
index 0000000000..39abb85250
--- /dev/null
+++ b/java/org/apache/tomcat/util/net/jsse/JSSESSLContext.java
@@ -0,0 +1,66 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package org.apache.tomcat.util.net.jsse;
+
+import java.security.KeyManagementException;
+import java.security.NoSuchAlgorithmException;
+import java.security.SecureRandom;
+
+import javax.net.ssl.KeyManager;
+import javax.net.ssl.SSLEngine;
+import javax.net.ssl.SSLParameters;
+import javax.net.ssl.SSLServerSocketFactory;
+import javax.net.ssl.SSLSessionContext;
+import javax.net.ssl.TrustManager;
+
+import org.apache.tomcat.util.net.SSLContext;
+
+class JSSESSLContext implements SSLContext {
+
+    private javax.net.ssl.SSLContext context;
+    JSSESSLContext(String protocol) throws NoSuchAlgorithmException {
+        context = javax.net.ssl.SSLContext.getInstance(protocol);
+    }
+
+    @Override
+    public void init(KeyManager[] kms, TrustManager[] tms, SecureRandom sr)
+            throws KeyManagementException {
+        context.init(kms, tms, sr);
+    }
+
+    @Override
+    public SSLSessionContext getServerSessionContext() {
+        return context.getServerSessionContext();
+    }
+
+    @Override
+    public SSLEngine createSSLEngine() {
+        return context.createSSLEngine();
+    }
+
+    @Override
+    public SSLServerSocketFactory getServerSocketFactory() {
+        return context.getServerSocketFactory();
+    }
+
+    @Override
+    public SSLParameters getSupportedSSLParameters() {
+        return context.getSupportedSSLParameters();
+    }
+
+}

==================================================
