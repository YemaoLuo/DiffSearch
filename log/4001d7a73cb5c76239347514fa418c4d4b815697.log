4001d7a73cb5c76239347514fa418c4d4b815697
==================================================
More plumbing for Decoders. Still more work to do to get this working end to end.
==================================================
Mark Emlyn
==================================================
Fri Mar 8 14:24:19 2013 +0000
==================================================
WsSession.java
More plumbing for Decoders. Still more work to do to get this working end to end.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1454400 13f79535-47bb-0310-9956-ffa450edef68



==================================================
PojoMessageHandlerWholeBase.java
index e15124ba2b..d3cee079c3 100644
--- a/java/org/apache/tomcat/websocket/pojo/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/pojo/LocalStrings.properties
@@ -16,4 +16,6 @@
 pojoEndpointBase.onCloseFail=Failed to call onClose method of POJO end point for POJO of type [{0}]
 pojoEndpointBase.onErrorFail=Failed to call onError method of POJO end point for POJO of type [{0}]
 pojoEndpointBase.onOpenFail=Failed to call onOpen method of POJO end point for POJO of type [{0}]
-pojoEndpointServer.getPojoInstanceFail=Failed to create instance of POJO of type [{0}]
\ No newline at end of file
+pojoEndpointServer.getPojoInstanceFail=Failed to create instance of POJO of type [{0}]
+pojoMessageHandlerWhole.decodeFail=Failed to decode received message with first matching Decoder instance
+pojoMessageHandlerWhole.decodeIoFail=IO error while decoding message
\ No newline at end of file

==================================================
PojoMessageHandlerWholeBinary.java
index 4637e289e0..a63ee209c2 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeBase.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeBase.java
@@ -20,8 +20,13 @@ import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.nio.ByteBuffer;
 
+import javax.websocket.DecodeException;
 import javax.websocket.MessageHandler;
 import javax.websocket.Session;
+import javax.websocket.SessionException;
+
+import org.apache.tomcat.util.res.StringManager;
+import org.apache.tomcat.websocket.WsSession;
 
 /**
  * Common implementation code for the POJO whole message handlers. All the real
@@ -32,6 +37,9 @@ import javax.websocket.Session;
 public abstract class PojoMessageHandlerWholeBase<T>
         extends PojoMessageHandlerBase<T> implements MessageHandler.Whole<T> {
 
+    private static final StringManager sm =
+            StringManager.getManager(Constants.PACKAGE_NAME);
+
     public PojoMessageHandlerWholeBase(Object pojo, Method method,
             Session session, Object[] params, int indexPayload,
             boolean unwrap, int indexSession) {
@@ -44,7 +52,15 @@ public abstract class PojoMessageHandlerWholeBase<T>
     public final void onMessage(T message) {
 
         // Can this message be decoded?
-        Object payload = decode(message);
+        Object payload;
+        try {
+            payload = decode(message);
+        } catch (DecodeException de) {
+            SessionException se = new SessionException(sm.getString(
+                    "pojoMessageHandlerWhole.decodeFail"), de, session);
+            ((WsSession) session).getLocal().onError(session, se);
+            return;
+        }
 
         if (payload == null) {
             // Not decoded. Unwrap if required. Unwrap only ever applies to
@@ -75,6 +91,6 @@ public abstract class PojoMessageHandlerWholeBase<T>
     }
 
 
-    protected abstract Object decode(T message);
+    protected abstract Object decode(T message) throws DecodeException;
     protected abstract void onClose();
 }

==================================================
PojoMessageHandlerWholeText.java
index 3047282ead..d1a68638ad 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeBinary.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoMessageHandlerWholeBinary.java
@@ -16,23 +16,31 @@
  */
 package org.apache.tomcat.websocket.pojo;
 
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
 import java.lang.reflect.Method;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.List;
 
+import javax.websocket.DecodeException;
 import javax.websocket.Decoder;
 import javax.websocket.Decoder.Binary;
 import javax.websocket.Decoder.BinaryStream;
 import javax.websocket.EndpointConfig;
 import javax.websocket.Session;
 
+import org.apache.tomcat.util.res.StringManager;
+
 /**
  * ByteBuffer specific concrete whole message implementation.
  */
 public class PojoMessageHandlerWholeBinary
         extends PojoMessageHandlerWholeBase<ByteBuffer> {
 
+    private static final StringManager sm =
+            StringManager.getManager(Constants.PACKAGE_NAME);
+
     private final List<Decoder> decoders = new ArrayList<>();
 
     public PojoMessageHandlerWholeBinary(Object pojo, Method method,
@@ -52,7 +60,7 @@ public class PojoMessageHandlerWholeBinary
                     decoder.init(config);
                     decoders.add(decoder);
                 } else {
-                    // Text decoder - ignore is
+                    // Text decoder - ignore it
                 }
             }
         } catch (IllegalAccessException | InstantiationException e) {
@@ -62,8 +70,24 @@ public class PojoMessageHandlerWholeBinary
 
 
     @Override
-    protected Object decode(ByteBuffer message) {
-        // TODO Not implemented
+    protected Object decode(ByteBuffer message) throws DecodeException {
+        for (Decoder decoder : decoders) {
+            if (decoder instanceof Binary) {
+                if (((Binary<?>) decoder).willDecode(message)) {
+                    return ((Binary<?>) decoder).decode(message);
+                }
+            } else {
+                byte[] array = new byte[message.limit() - message.position()];
+                message.get(array);
+                ByteArrayInputStream bais = new ByteArrayInputStream(array);
+                try {
+                    return ((BinaryStream<?>) decoder).decode(bais);
+                } catch (IOException ioe) {
+                    throw new DecodeException(message, sm.getString(
+                            "pojoMessageHandlerWhole.decodeIoFail"), ioe);
+                }
+            }
+        }
         return null;
     }
 

==================================================
