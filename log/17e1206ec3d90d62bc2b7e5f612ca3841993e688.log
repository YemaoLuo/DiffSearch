17e1206ec3d90d62bc2b7e5f612ca3841993e688
==================================================
Completely align process methods
==================================================
Mark Emlyn
==================================================
Fri Jul 8 11:56:33 2011 +0000
==================================================
AjpAprProtocol.java
Completely align process methods

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1144276 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpNioProtocol.java
index b0266358ef..50b25add2b 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -134,9 +134,14 @@ public class AjpAprProtocol extends AbstractAjpProtocol {
          * required.
          */
         public void release(SocketWrapper<Long> socket,
-                AjpAprProcessor processor, boolean isSocketClosing) {
+                AjpAprProcessor processor, boolean isSocketClosing,
+                boolean addToPoller) {
             processor.recycle(isSocketClosing);
             recycledProcessors.offer(processor);
+            if (addToPoller) {
+                ((AprEndpoint)proto.endpoint).getPoller().add(
+                        socket.getSocket().longValue());
+            }
         }
 
 
@@ -176,12 +181,10 @@ public class AjpAprProtocol extends AbstractAjpProtocol {
                 } else if (state == SocketState.OPEN){
                     // In keep-alive but between requests. OK to recycle
                     // processor. Continue to poll for the next request.
-                    release(socket, processor, false);
-                    ((AprEndpoint)proto.endpoint).getPoller().add(
-                            socket.getSocket().longValue());
+                    release(socket, processor, false, true);
                 } else {
                     // Connection closed. OK to recycle the processor.
-                    release(socket, processor, true);
+                    release(socket, processor, true, false);
                 }
                 return state;
             } catch(java.net.SocketException e) {
@@ -203,7 +206,7 @@ public class AjpAprProtocol extends AbstractAjpProtocol {
                 // less-than-verbose logs.
                 log.error(sm.getString("ajpprotocol.proto.error"), e);
             }
-            release(socket, processor, true);
+            release(socket, processor, true, false);
             return SocketState.CLOSED;
         }
 

==================================================
AjpProtocol.java
index 1a04b666d5..baeaf5c3c4 100644
--- a/java/org/apache/coyote/ajp/AjpNioProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpNioProtocol.java
@@ -163,17 +163,21 @@ public class AjpNioProtocol extends AbstractAjpProtocol {
             }
         }
 
-
         /**
          * Expected to be used by the handler once the processor is no longer
          * required.
          */
         public void release(SocketWrapper<NioChannel> socket,
-                AjpNioProcessor processor, boolean isSocketClosing) {
+                AjpNioProcessor processor, boolean isSocketClosing,
+                boolean addToPoller) {
             processor.recycle(isSocketClosing);
             recycledProcessors.offer(processor);
+            if (addToPoller) {
+                socket.getSocket().getPoller().add(socket.getSocket());
+            }
         }
 
+
         @Override
         public SocketState process(SocketWrapper<NioChannel> socket,
                 SocketStatus status) {
@@ -210,11 +214,10 @@ public class AjpNioProtocol extends AbstractAjpProtocol {
                 } else if (state == SocketState.OPEN){
                     // In keep-alive but between requests. OK to recycle
                     // processor. Continue to poll for the next request.
-                    release(socket, processor, false);
-                    socket.getSocket().getPoller().add(socket.getSocket());
+                    release(socket, processor, false, true);
                 } else {
                     // Connection closed. OK to recycle the processor.
-                    release(socket, processor, true);
+                    release(socket, processor, true, false);
                 }
                 return state;
             } catch(java.net.SocketException e) {
@@ -236,7 +239,7 @@ public class AjpNioProtocol extends AbstractAjpProtocol {
                 // less-than-verbose logs.
                 log.error(sm.getString("ajpprotocol.proto.error"), e);
             }
-            release(socket, processor, true);
+            release(socket, processor, true, false);
             return SocketState.CLOSED;
         }
 

==================================================
