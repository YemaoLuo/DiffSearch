0e1892b0859abbe5275504cd181c86dd74834d83
==================================================
Provide configuration option to work around new welcome file mapping requirements of section 10.10 Servlet 3.0 that break a lot of existing apps. The default configuration retains the current Tomcat 6.0.x behaviour. Enabling STRICT_SERVLET_COMPLILANCE enforces the new requirements by default. Includes test cases.
==================================================
Mark Emlyn
==================================================
Thu Oct 28 22:29:25 2010 +0000
==================================================
Context.java
Provide configuration option to work around new welcome file mapping requirements of section 10.10 Servlet 3.0 that break a lot of existing apps. The default configuration retains the current Tomcat 6.0.x behaviour. Enabling STRICT_SERVLET_COMPLILANCE enforces the new requirements by default. Includes test cases.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1028521 13f79535-47bb-0310-9956-ffa450edef68



==================================================
MapperListener.java
index c12d7b50ec..cfb77bb80b 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -1252,5 +1252,28 @@ public interface Context extends Container {
      */
     Set<String> addServletSecurity(ApplicationServletRegistration registration,
             ServletSecurityElement servletSecurityElement);
+    
+    /**
+     * Sets the (comma separated) list of Servlets that expect a resource to be
+     * present. Used to ensure that welcome files associated with Servlets that
+     * expect a resource to be present are not mapped when there is no resource. 
+     */
+    public void setResourceOnlyServlets(String resourceOnlyServlets);
+    
+    /**
+     * Obtains the list of Servlets that expect a resource to be present.
+     * 
+     * @return  A comma separated list of Servlet names as used in web.xml
+     */
+    public String getResourceOnlyServlets();
+
+    /**
+     * Checks the named Servlet to see if it expects a resource to be present.
+     * 
+     * @param servletName   Name of the Servlet (as per web.xml) to check
+     * @return              <code>true</code> if the Servlet expects a resource,
+     *                      otherwise <code>false</code>
+     */
+    public boolean isResourceOnlyServlet(String servletName);
 }
 

==================================================
StandardContext.java
index 27650ec18f..6fc53675bf 100644
--- a/java/org/apache/catalina/connector/MapperListener.java
+++ b/java/org/apache/catalina/connector/MapperListener.java
@@ -156,18 +156,18 @@ public class MapperListener implements ContainerListener, LifecycleListener {
         } else if (event.getType() == Wrapper.ADD_MAPPING_EVENT) {
             // Handle dynamically adding wrappers
             Wrapper wrapper = (Wrapper) event.getSource();
-
-            String contextName = wrapper.getParent().getName();
+            Context context = (Context) wrapper.getParent();
+            String contextName = context.getName();
             if ("/".equals(contextName)) {
                 contextName = "";
             }
-            String hostName = wrapper.getParent().getParent().getName();
-
+            String hostName = context.getParent().getName();
+            String wrapperName = wrapper.getName();
             String mapping = (String) event.getData();
-            boolean jspWildCard = ("jsp".equals(wrapper.getName())
+            boolean jspWildCard = ("jsp".equals(wrapperName)
                     && mapping.endsWith("/*"));
             mapper.addWrapper(hostName, contextName, mapping, wrapper,
-                    jspWildCard);
+                    jspWildCard, context.isResourceOnlyServlet(wrapperName));
         } else if (event.getType() == Wrapper.REMOVE_MAPPING_EVENT) {
             // Handle dynamically removing wrappers
             Wrapper wrapper = (Wrapper) event.getSource();
@@ -380,11 +380,12 @@ public class MapperListener implements ContainerListener, LifecycleListener {
     private void registerWrapper(Wrapper wrapper) {
 
         String wrapperName = wrapper.getName();
-        String contextName = wrapper.getParent().getName();
+        Context context = (Context) wrapper.getParent();
+        String contextName = context.getName();
         if ("/".equals(contextName)) {
             contextName = "";
         }
-        String hostName = wrapper.getParent().getParent().getName();
+        String hostName = context.getParent().getName();
         
         String[] mappings = wrapper.findMappings();
 
@@ -392,7 +393,8 @@ public class MapperListener implements ContainerListener, LifecycleListener {
             boolean jspWildCard = (wrapperName.equals("jsp")
                                    && mapping.endsWith("/*"));
             mapper.addWrapper(hostName, contextName, mapping, wrapper,
-                              jspWildCard);
+                              jspWildCard,
+                              context.isResourceOnlyServlet(wrapperName));
         }
 
         if(log.isDebugEnabled()) {

==================================================
Mapper.java
index 5433c3dcbe..099795c088 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -144,7 +144,12 @@ public class StandardContext extends ContainerBase
         super();
         pipeline.setBasic(new StandardContextValve());
         broadcaster = new NotificationBroadcasterSupport();
-
+        // Set defaults
+        if (!Globals.STRICT_SERVLET_COMPLIANCE) {
+            // Strict servlet compliance requires all extension mapped servlets
+            // to be checked against welcome files
+            resourceOnlyServlets.add("jsp");
+        }
     }
 
 
@@ -799,8 +804,45 @@ public class StandardContext extends ContainerBase
     private JspConfigDescriptor jspConfigDescriptor =
         new ApplicationJspConfigDescriptor();
 
+    private Set<String> resourceOnlyServlets = new HashSet<String>();
+
+
     // ----------------------------------------------------- Context Properties
 
+    @Override
+    public String getResourceOnlyServlets() {
+        StringBuilder result = new StringBuilder();
+        boolean first = true;
+        for (String servletName : resourceOnlyServlets) {
+            if (!first) {
+                result.append(',');
+            }
+            result.append(servletName);
+        }
+        return result.toString();
+    }
+
+
+    @Override
+    public void setResourceOnlyServlets(String resourceOnlyServlets) {
+        this.resourceOnlyServlets.clear();
+        if (resourceOnlyServlets == null ||
+                resourceOnlyServlets.length() == 0) {
+            return;
+        }
+        String[] servletNames = resourceOnlyServlets.split(",");
+        for (String servletName : servletNames) {
+            this.resourceOnlyServlets.add(servletName);
+        }
+    }
+
+
+    @Override
+    public boolean isResourceOnlyServlet(String servletName) {
+        return resourceOnlyServlets.contains(servletName);
+    }
+
+
     @Override
     public int getEffectiveMajorVersion() {
         return effectiveMajorVersion;
@@ -2921,7 +2963,8 @@ public class StandardContext extends ContainerBase
         wrapper.addMapping(pattern);
 
         // Update context mapper
-        mapper.addWrapper(pattern, wrapper, jspWildCard);
+        mapper.addWrapper(pattern, wrapper, jspWildCard,
+                resourceOnlyServlets.contains(name));
 
         fireContainerEvent("addServletMapping", pattern);
 

==================================================
TestMapper.java
index b95be5bf88..0565814c94 100644
--- a/java/org/apache/tomcat/util/http/mapper/Mapper.java
+++ b/java/org/apache/tomcat/util/http/mapper/Mapper.java
@@ -279,22 +279,9 @@ public final class Mapper {
     }
 
 
-    /**
-     * Add a new Wrapper to an existing Context.
-     *
-     * @param hostName Virtual host name this wrapper belongs to
-     * @param contextPath Context path this wrapper belongs to
-     * @param path Wrapper mapping
-     * @param wrapper Wrapper object
-     */
     public void addWrapper(String hostName, String contextPath, String path,
-                           Object wrapper) {
-        addWrapper(hostName, contextPath, path, wrapper, false);
-    }
-
-
-    public void addWrapper(String hostName, String contextPath, String path,
-                           Object wrapper, boolean jspWildCard) {
+                           Object wrapper, boolean jspWildCard,
+                           boolean resourceOnly) {
         Host[] hosts = this.hosts;
         int pos = find(hosts, hostName);
         if (pos < 0) {
@@ -310,30 +297,15 @@ public final class Mapper {
             }
             Context context = contexts[pos2];
             if (context.name.equals(contextPath)) {
-                addWrapper(context, path, wrapper, jspWildCard);
+                addWrapper(context, path, wrapper, jspWildCard, resourceOnly);
             }
         }
     }
 
 
-    /**
-     * Add a wrapper to the context associated with this wrapper.
-     *
-     * @param path Wrapper mapping
-     * @param wrapper The Wrapper object
-     */
-    public void addWrapper(String path, Object wrapper) {
-        addWrapper(context, path, wrapper);
-    }
-
-
-    public void addWrapper(String path, Object wrapper, boolean jspWildCard) {
-        addWrapper(context, path, wrapper, jspWildCard);
-    }
-
-
-    protected void addWrapper(Context context, String path, Object wrapper) {
-        addWrapper(context, path, wrapper, false);
+    public void addWrapper(String path, Object wrapper, boolean jspWildCard,
+            boolean resourceOnly) {
+        addWrapper(context, path, wrapper, jspWildCard, resourceOnly);
     }
 
 
@@ -344,15 +316,18 @@ public final class Mapper {
      * @param path Wrapper mapping
      * @param wrapper The Wrapper object
      * @param jspWildCard true if the wrapper corresponds to the JspServlet
+     * @param resourceOnly true if this wrapper always expects a physical
+     *                     resource to be present (such as a JSP)
      * and the mapping path contains a wildcard; false otherwise
      */
     protected void addWrapper(Context context, String path, Object wrapper,
-                              boolean jspWildCard) {
+                              boolean jspWildCard, boolean resourceOnly) {
 
         synchronized (context) {
             Wrapper newWrapper = new Wrapper();
             newWrapper.object = wrapper;
             newWrapper.jspWildCard = jspWildCard;
+            newWrapper.resourceOnly = resourceOnly;
             if (path.endsWith("/*")) {
                 // Wildcard wrapper
                 newWrapper.name = path.substring(0, path.length() - 2);
@@ -801,7 +776,8 @@ public final class Mapper {
         // Rule 3 -- Extension Match
         Wrapper[] extensionWrappers = context.extensionWrappers;
         if (mappingData.wrapper == null && !checkJspWelcomeFiles) {
-            internalMapExtensionWrapper(extensionWrappers, path, mappingData);
+            internalMapExtensionWrapper(extensionWrappers, path, mappingData,
+                    true);
         }
 
         // Rule 4 -- Welcome resources processing for servlets
@@ -842,8 +818,8 @@ public final class Mapper {
                             // Swallow not found, since this is normal
                         }
                         if (file != null && !(file instanceof DirContext) ) {
-                            internalMapExtensionWrapper(extensionWrappers,
-                                                        path, mappingData);
+                            internalMapExtensionWrapper(extensionWrappers, path,
+                                                        mappingData, true);
                             if (mappingData.wrapper == null
                                 && context.defaultWrapper != null) {
                                 mappingData.wrapper =
@@ -888,8 +864,8 @@ public final class Mapper {
                     path.append(context.welcomeResources[i], 0,
                                 context.welcomeResources[i].length());
                     path.setOffset(servletPath);
-                    internalMapExtensionWrapper(extensionWrappers,
-                                                path, mappingData);
+                    internalMapExtensionWrapper(extensionWrappers, path,
+                                                mappingData, false);
                 }
 
                 path.setOffset(servletPath);
@@ -1005,9 +981,14 @@ public final class Mapper {
 
     /**
      * Extension mappings.
+     * 
+     * @param wrappers          Set of wrappers to check for matches
+     * @param path              Path to map
+     * @param mappingData       Mapping data for result
+     * @param resourceExpected  Is this mapping expecting to find a resource
      */
-    private final void internalMapExtensionWrapper
-        (Wrapper[] wrappers, CharChunk path, MappingData mappingData) {
+    private final void internalMapExtensionWrapper(Wrapper[] wrappers,
+            CharChunk path, MappingData mappingData, boolean resourceExpected) {
         char[] buf = path.getBuffer();
         int pathEnd = path.getEnd();
         int servletPath = path.getOffset();
@@ -1030,8 +1011,8 @@ public final class Mapper {
                 path.setOffset(period + 1);
                 path.setEnd(pathEnd);
                 int pos = find(wrappers, path);
-                if ((pos != -1)
-                    && (path.equals(wrappers[pos].name))) {
+                if ((pos != -1) && (path.equals(wrappers[pos].name)) &&
+                        (resourceExpected || !wrappers[pos].resourceOnly)) {
                     mappingData.wrapperPath.setChars
                         (buf, servletPath, pathEnd - servletPath);
                     mappingData.requestPath.setChars
@@ -1412,5 +1393,6 @@ public final class Mapper {
 
         public String path = null;
         public boolean jspWildCard = false;
+        public boolean resourceOnly = false;
     }
 }

==================================================
TestMapperWelcomeFiles.java
index 6785cb008b..db5347d2f3 100644
--- a/test/org/apache/tomcat/util/http/mapper/TestMapper.java
+++ b/test/org/apache/tomcat/util/http/mapper/TestMapper.java
@@ -60,14 +60,22 @@ public class TestMapper extends TestCase {
         mapper.addContext("iowejoiejfoiew", "blah7", "/foo/bar/bla",
                 "context3", new String[0], null);
 
-        mapper.addWrapper("iowejoiejfoiew", "/foo/bar", "/fo/*", "wrapper0");
-        mapper.addWrapper("iowejoiejfoiew", "/foo/bar", "/", "wrapper1");
-        mapper.addWrapper("iowejoiejfoiew", "/foo/bar", "/blh", "wrapper2");
-        mapper.addWrapper("iowejoiejfoiew", "/foo/bar", "*.jsp", "wrapper3");
-        mapper.addWrapper("iowejoiejfoiew", "/foo/bar", "/blah/bou/*", "wrapper4");
-        mapper.addWrapper("iowejoiejfoiew", "/foo/bar", "/blah/bobou/*", "wrapper5");
-        mapper.addWrapper("iowejoiejfoiew", "/foo/bar", "*.htm", "wrapper6");
-        mapper.addWrapper("iowejoiejfoiew", "/foo/bar/bla", "/bobou/*", "wrapper7");
+        mapper.addWrapper("iowejoiejfoiew", "/foo/bar", "/fo/*",
+                "wrapper0", false, false);
+        mapper.addWrapper("iowejoiejfoiew", "/foo/bar", "/",
+                "wrapper1", false, false);
+        mapper.addWrapper("iowejoiejfoiew", "/foo/bar", "/blh",
+                "wrapper2", false, false);
+        mapper.addWrapper("iowejoiejfoiew", "/foo/bar", "*.jsp",
+                "wrapper3", false, false);
+        mapper.addWrapper("iowejoiejfoiew", "/foo/bar", "/blah/bou/*",
+                "wrapper4", false, false);
+        mapper.addWrapper("iowejoiejfoiew", "/foo/bar", "/blah/bobou/*",
+                "wrapper5", false, false);
+        mapper.addWrapper("iowejoiejfoiew", "/foo/bar", "*.htm",
+                "wrapper6", false, false);
+        mapper.addWrapper("iowejoiejfoiew", "/foo/bar/bla", "/bobou/*",
+                "wrapper7", false, false);
     }
     
 

==================================================
