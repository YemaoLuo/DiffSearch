e1c15a2388415002c31d4b5fc91a00fe1c81fffe
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55233
==================================================
Mark Emlyn
==================================================
Thu Jul 11 10:11:56 2013 +0000
==================================================
AsyncChannelWrapperSecure.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55233
Fixed buffer overflow error when a client needs to unwrap more encrypted data than the read buffer has space for.
The fix is to increase the read buffer to the current maximum size of output expected by the SSL engine.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1502176 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ReadBufferOverflowException.java
index d320cc9b04..83fe10c64f 100644
--- a/java/org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java
+++ b/java/org/apache/tomcat/websocket/AsyncChannelWrapperSecure.java
@@ -293,13 +293,17 @@ public class AsyncChannelWrapperSecure implements AsyncChannelWrapper {
                             // partial data on the next read
                         } else if (s == Status.BUFFER_OVERFLOW) {
                             // Not enough space in the destination buffer to
-                            // store all of the data
-                            throw new IOException(sm.getString(
-                                    "asyncChannelWrapperSecure.readOverflow",
-                                    Integer.valueOf( sslEngine.getSession().
-                                            getApplicationBufferSize()),
-                                    Integer.valueOf(dest.limit()),
-                                    Integer.valueOf(dest.position())));
+                            // store all of the data. We could use a bytes read
+                            // value of -bufferSizeRequired to signal the new
+                            // buffer size required but an explicit exception is
+                            // clearer.
+                            if (reading.compareAndSet(true, false)) {
+                                throw new ReadBufferOverflowException(sslEngine.
+                                        getSession().getApplicationBufferSize());
+                            } else {
+                                future.fail(new IllegalStateException(sm.getString(
+                                        "asyncChannelWrapperSecure.wrongStateRead")));
+                            }
                         } else {
                             // Status.CLOSED - unexpected
                             throw new IllegalStateException(sm.getString(

==================================================
WsFrameClient.java
new file mode 100644
index 0000000000..5ad6f4f5a5
--- /dev/null
+++ b/java/org/apache/tomcat/websocket/ReadBufferOverflowException.java
@@ -0,0 +1,34 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.websocket;
+
+import java.io.IOException;
+
+public class ReadBufferOverflowException extends IOException {
+
+    private static final long serialVersionUID = 1L;
+
+    private final int minBufferSize;
+
+    public ReadBufferOverflowException(int minBufferSize) {
+        this.minBufferSize = minBufferSize;
+    }
+
+    public int getMinBufferSize() {
+        return minBufferSize;
+    }
+}

==================================================
