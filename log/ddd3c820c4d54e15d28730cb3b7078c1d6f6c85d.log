ddd3c820c4d54e15d28730cb3b7078c1d6f6c85d
==================================================
Align ActionCode.AVAILABLE
==================================================
Mark Thomas
==================================================
Fri Aug 12 07:46:01 2016 +0000
==================================================
AjpProcessor.java
Align ActionCode.AVAILABLE

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1756087 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11Processor.java
index c1dd0e1a91..9be1e9a363 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -392,11 +392,7 @@ public class AjpProcessor extends AbstractProcessor {
             break;
         }
         case AVAILABLE: {
-            if (available()) {
-                request.setAvailable(1);
-            } else {
-                request.setAvailable(0);
-            }
+            request.setAvailable(available(Boolean.TRUE.equals(param)));
             break;
         }
         case REQ_SET_BODY_REPLAY: {
@@ -669,7 +665,7 @@ public class AjpProcessor extends AbstractProcessor {
 
     @Override
     protected void dispatchNonBlockingRead() {
-        if (available()) {
+        if (available(true) > 0) {
             super.dispatchNonBlockingRead();
         }
     }
@@ -1450,21 +1446,25 @@ public class AjpProcessor extends AbstractProcessor {
     }
 
 
-    private boolean available() {
+    private int available(boolean doRead) {
         if (endOfStream) {
-            return false;
+            return 0;
         }
-        if (empty) {
+        if (empty && doRead) {
             try {
                 refillReadBuffer(false);
             } catch (IOException timeout) {
                 // Not ideal. This will indicate that data is available
                 // which should trigger a read which in turn will trigger
                 // another IOException and that one can be thrown.
-                return true;
+                return 1;
             }
         }
-        return !empty;
+        if (empty) {
+            return 0;
+        } else {
+            return bodyBytes.getByteChunk().getLength();
+        }
     }
 
 

==================================================
StreamProcessor.java
index 6dd3b9237b..4439578170 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -685,7 +685,7 @@ public class Http11Processor extends AbstractProcessor {
             break;
         }
         case AVAILABLE: {
-            request.setAvailable(inputBuffer.available(Boolean.TRUE.equals(param)));
+            request.setAvailable(available(Boolean.TRUE.equals(param)));
             break;
         }
         case REQ_SET_BODY_REPLAY: {
@@ -1812,6 +1812,11 @@ public class Http11Processor extends AbstractProcessor {
     }
 
 
+    private int available(boolean doRead) {
+        return inputBuffer.available(doRead);
+    }
+    
+    
     /**
      * Checks to see if the keep-alive loop should be broken, performing any
      * processing (e.g. sendfile handling) that may have an impact on whether

==================================================
