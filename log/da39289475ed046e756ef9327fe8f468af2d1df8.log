da39289475ed046e756ef9327fe8f468af2d1df8
==================================================
Code clean-up. Add braces to improve readability.
==================================================
Mark Thomas
==================================================
Wed May 26 21:53:09 2021 +0100
==================================================
IntrospectionUtils.java
Code clean-up. Add braces to improve readability.

Another test of the CI.


==================================================
MD5Encoder.java
index dba613b2c6..a1f718d529 100644
--- a/java/org/apache/tomcat/util/IntrospectionUtils.java
+++ b/java/org/apache/tomcat/util/IntrospectionUtils.java
@@ -56,9 +56,10 @@ public final class IntrospectionUtils {
     @SuppressWarnings("null") // setPropertyMethodVoid is not null when used
     public static boolean setProperty(Object o, String name, String value,
             boolean invokeSetProperty, StringBuilder actualMethod) {
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug("IntrospectionUtils: setProperty(" +
                     o.getClass() + " " + name + "=" + value + ")");
+        }
 
         if (actualMethod == null && XReflectionIntrospectionUtils.isEnabled()) {
             return XReflectionIntrospectionUtils.setPropertyInternal(o, name, value, invokeSetProperty);
@@ -129,8 +130,9 @@ public final class IntrospectionUtils {
                         try {
                             params[0] = InetAddress.getByName(value);
                         } catch (UnknownHostException exc) {
-                            if (log.isDebugEnabled())
+                            if (log.isDebugEnabled()) {
                                 log.debug("IntrospectionUtils: Unable to resolve host name:" + value);
+                            }
                             ok = false;
                         }
                         if (actualMethod != null) {
@@ -138,9 +140,10 @@ public final class IntrospectionUtils {
                         }
                         // Unknown type
                     } else {
-                        if (log.isDebugEnabled())
+                        if (log.isDebugEnabled()) {
                             log.debug("IntrospectionUtils: Unknown type " +
                                     paramType.getName());
+                        }
                     }
 
                     if (ok) {
@@ -205,22 +208,24 @@ public final class IntrospectionUtils {
      */
     public static String escape(String s) {
 
-        if (s == null)
+        if (s == null) {
             return "";
+        }
 
         StringBuilder b = new StringBuilder();
         for (int i = 0; i < s.length(); i++) {
             char c = s.charAt(i);
-            if (c == '"')
+            if (c == '"') {
                 b.append('\\').append('"');
-            else if (c == '\\')
+            } else if (c == '\\') {
                 b.append('\\').append('\\');
-            else if (c == '\n')
+            } else if (c == '\n') {
                 b.append('\\').append('n');
-            else if (c == '\r')
+            } else if (c == '\r') {
                 b.append('\\').append('r');
-            else
+            } else {
                 b.append(c);
+            }
         }
         return b.toString();
     }
@@ -346,16 +351,19 @@ public final class IntrospectionUtils {
                 prev = endName + 1;
             }
         }
-        if (prev < value.length())
+        if (prev < value.length()) {
             sb.append(value.substring(prev));
+        }
         String newval = sb.toString();
         if (newval.indexOf("${") < 0) {
             return newval;
         }
-        if (newval.equals(value))
+        if (newval.equals(value)) {
             return value;
-        if (log.isDebugEnabled())
+        }
+        if (log.isDebugEnabled()) {
             log.debug("IntrospectionUtils.replaceProperties iter on: " + newval);
+        }
         return replaceProperties(newval, staticProp, dynamicProp, classLoader, iterationCount+1);
     }
 
@@ -403,8 +411,9 @@ public final class IntrospectionUtils {
 
     public static Method[] findMethods(Class<?> c) {
         Method methods[] = objectMethods.get(c);
-        if (methods != null)
+        if (methods != null) {
             return methods;
+        }
 
         methods = c.getMethods();
         objectMethods.put(c, methods);
@@ -444,20 +453,23 @@ public final class IntrospectionUtils {
         if (target == null || methodN == null || param1 == null) {
             throw new IllegalArgumentException(sm.getString("introspectionUtils.nullParameter"));
         }
-        if (log.isDebugEnabled())
+        if (log.isDebugEnabled()) {
             log.debug("IntrospectionUtils: callMethod1 " +
                     target.getClass().getName() + " " +
                     param1.getClass().getName() + " " + typeParam1);
+        }
 
         Class<?> params[] = new Class[1];
-        if (typeParam1 == null)
+        if (typeParam1 == null) {
             params[0] = param1.getClass();
-        else
+        } else {
             params[0] = cl.loadClass(typeParam1);
+        }
         Method m = findMethod(target.getClass(), methodN, params);
-        if (m == null)
+        if (m == null) {
             throw new NoSuchMethodException(target.getClass().getName() + " "
                     + methodN);
+        }
         try {
             return m.invoke(target, new Object[] { param1 });
         } catch (InvocationTargetException ie) {
@@ -471,9 +483,10 @@ public final class IntrospectionUtils {
         Method m = null;
         m = findMethod(target.getClass(), methodN, typeParams);
         if (m == null) {
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("IntrospectionUtils: Can't find method " + methodN +
                         " in " + target + " CLASS " + target.getClass());
+            }
             return null;
         }
         try {
@@ -485,8 +498,9 @@ public final class IntrospectionUtils {
                 sb.append(target.getClass().getName()).append('.')
                         .append(methodN).append("( ");
                 for (int i = 0; i < params.length; i++) {
-                    if (i > 0)
+                    if (i > 0) {
                         sb.append(", ");
+                    }
                     sb.append(params[i]);
                 }
                 sb.append(")");
@@ -520,16 +534,18 @@ public final class IntrospectionUtils {
             try {
                 result = InetAddress.getByName(object);
             } catch (UnknownHostException exc) {
-                if (log.isDebugEnabled())
+                if (log.isDebugEnabled()) {
                     log.debug("IntrospectionUtils: Unable to resolve host name:" +
                             object);
+                }
             }
 
             // Unknown type
         } else {
-            if (log.isDebugEnabled())
+            if (log.isDebugEnabled()) {
                 log.debug("IntrospectionUtils: Unknown type " +
                         paramType.getName());
+            }
         }
         if (result == null) {
             throw new IllegalArgumentException(sm.getString("introspectionUtils.conversionError", object, paramType.getName()));

==================================================
TaskQueue.java
index 8f5df40c48..542dfd2010 100644
--- a/java/org/apache/tomcat/util/security/MD5Encoder.java
+++ b/java/org/apache/tomcat/util/security/MD5Encoder.java
@@ -46,8 +46,9 @@ public final class MD5Encoder {
      */
     public static String encode(byte[] binaryData) {
 
-        if (binaryData.length != 16)
+        if (binaryData.length != 16) {
             return null;
+        }
 
         char[] buffer = new char[32];
 

==================================================
ReflectionProperty.java
index 35f1d89e10..268035e5bc 100644
--- a/java/org/apache/tomcat/util/threads/TaskQueue.java
+++ b/java/org/apache/tomcat/util/threads/TaskQueue.java
@@ -60,25 +60,37 @@ public class TaskQueue extends LinkedBlockingQueue<Runnable> {
     }
 
     public boolean force(Runnable o) {
-        if (parent == null || parent.isShutdown()) throw new RejectedExecutionException(sm.getString("taskQueue.notRunning"));
+        if (parent == null || parent.isShutdown()) {
+            throw new RejectedExecutionException(sm.getString("taskQueue.notRunning"));
+        }
         return super.offer(o); //forces the item onto the queue, to be used if the task is rejected
     }
 
     public boolean force(Runnable o, long timeout, TimeUnit unit) throws InterruptedException {
-        if (parent == null || parent.isShutdown()) throw new RejectedExecutionException(sm.getString("taskQueue.notRunning"));
+        if (parent == null || parent.isShutdown()) {
+            throw new RejectedExecutionException(sm.getString("taskQueue.notRunning"));
+        }
         return super.offer(o,timeout,unit); //forces the item onto the queue, to be used if the task is rejected
     }
 
     @Override
     public boolean offer(Runnable o) {
       //we can't do any checks
-        if (parent==null) return super.offer(o);
+        if (parent==null) {
+            return super.offer(o);
+        }
         //we are maxed out on threads, simply queue the object
-        if (parent.getPoolSize() == parent.getMaximumPoolSize()) return super.offer(o);
+        if (parent.getPoolSize() == parent.getMaximumPoolSize()) {
+            return super.offer(o);
+        }
         //we have idle threads, just add it to the queue
-        if (parent.getSubmittedCount()<=(parent.getPoolSize())) return super.offer(o);
+        if (parent.getSubmittedCount()<=(parent.getPoolSize())) {
+            return super.offer(o);
+        }
         //if we have less threads than maximum force creation of a new thread
-        if (parent.getPoolSize()<parent.getMaximumPoolSize()) return false;
+        if (parent.getPoolSize()<parent.getMaximumPoolSize()) {
+            return false;
+        }
         //if we reached here, we need to add it to the queue
         return super.offer(o);
     }

==================================================
SetPropertyClass.java
index 46d4447c01..f6b94ef71c 100644
--- a/java/org/apache/tomcat/util/xreflection/ReflectionProperty.java
+++ b/java/org/apache/tomcat/util/xreflection/ReflectionProperty.java
@@ -52,12 +52,18 @@ final class ReflectionProperty implements Comparable<ReflectionProperty> {
 
     @Override
     public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
 
         ReflectionProperty property1 = (ReflectionProperty) o;
 
-        if (!clazz.equals(property1.clazz)) return false;
+        if (!clazz.equals(property1.clazz)) {
+            return false;
+        }
         return propertyName.equals(property1.propertyName);
     }
 

==================================================
AuthenticatorFactory.java
index 389a48305b..a0a0146048 100644
--- a/java/org/apache/tomcat/util/xreflection/SetPropertyClass.java
+++ b/java/org/apache/tomcat/util/xreflection/SetPropertyClass.java
@@ -91,8 +91,12 @@ final class SetPropertyClass implements Comparable<SetPropertyClass> {
 
     @Override
     public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
 
         SetPropertyClass that = (SetPropertyClass) o;
 

==================================================
DigestAuthenticator.java
index 0bc5e6b973..1480d6229c 100644
--- a/java/org/apache/tomcat/websocket/AuthenticatorFactory.java
+++ b/java/org/apache/tomcat/websocket/AuthenticatorFactory.java
@@ -55,8 +55,9 @@ public class AuthenticatorFactory {
         ServiceLoader<Authenticator> serviceLoader = ServiceLoader.load(Authenticator.class);
 
         for (Authenticator auth : serviceLoader) {
-            if (auth.getSchemeName().equalsIgnoreCase(authScheme))
+            if (auth.getSchemeName().equalsIgnoreCase(authScheme)) {
                 return auth;
+            }
         }
 
         return null;

==================================================
GenericNamingResourcesFactory.java
index a3431599cf..1670fb0d9e 100644
--- a/java/org/apache/tomcat/websocket/DigestAuthenticator.java
+++ b/java/org/apache/tomcat/websocket/DigestAuthenticator.java
@@ -102,11 +102,11 @@ public class DigestAuthenticator extends Authenticator {
         StringBuilder preDigest = new StringBuilder();
         String A1;
 
-        if (algorithm.equalsIgnoreCase("MD5"))
+        if (algorithm.equalsIgnoreCase("MD5")) {
             A1 = userName + ":" + realm + ":" + password;
-
-        else
+        } else {
             A1 = encodeMD5(userName + ":" + realm + ":" + password) + ":" + nonce + ":" + cNonce;
+        }
 
         /*
          * If the "qop" value is "auth-int", then A2 is: A2 = Method ":"

==================================================
Stockticker.java
index 3d0b24a57e..ebdfc4646e 100644
--- a/res/checkstyle/checkstyle.xml
+++ b/res/checkstyle/checkstyle.xml
@@ -53,7 +53,7 @@
     <module name="AvoidNestedBlocks">
       <property name="allowInSwitchCase" value="true"/>
     </module>
-    <!-- ~400 errors
+    <!-- ~300 errors
     <module name="NeedBraces"/>
     -->
 

==================================================
Entries.java
index 49744b8b3e..07a100090a 100644
--- a/webapps/examples/WEB-INF/classes/async/Stockticker.java
+++ b/webapps/examples/WEB-INF/classes/async/Stockticker.java
@@ -66,14 +66,18 @@ public class Stockticker implements Runnable {
 
         public void addTickListener(TickListener listener) {
             if (listeners.add(listener)) {
-                if (counter.incrementAndGet()==1) start();
+                if (counter.incrementAndGet()==1) {
+                    start();
+                }
             }
 
         }
 
         public void removeTickListener(TickListener listener) {
             if (listeners.remove(listener)) {
-                if (counter.decrementAndGet()==0) stop();
+                if (counter.decrementAndGet()==0) {
+                    stop();
+                }
             }
         }
 
@@ -87,8 +91,9 @@ public class Stockticker implements Runnable {
                 while (run) {
                     for (int j = 0; j < 1; j++) {
                         int i = r.nextInt() % 3;
-                        if (i < 0)
+                        if (i < 0) {
                             i = i * (-1);
+                        }
                         Stock stock = stocks[i];
                         double change = r.nextDouble();
                         boolean plus = r.nextBoolean();

==================================================
JspCalendar.java
index 8534a852b2..f34f957a2f 100644
--- a/webapps/examples/WEB-INF/classes/cal/Entries.java
+++ b/webapps/examples/WEB-INF/classes/cal/Entries.java
@@ -43,9 +43,11 @@ public class Entries {
     }
 
     public int getIndex(String tm) {
-        for (int i = 0; i < rows; i++)
-            if (tm.equals(time[i]))
+        for (int i = 0; i < rows; i++) {
+            if (tm.equals(time[i])) {
                 return i;
+            }
+        }
         return -1;
     }
 

==================================================
TableBean.java
index f9cf20f05c..d8c75de3d4 100644
--- a/webapps/examples/WEB-INF/classes/cal/JspCalendar.java
+++ b/webapps/examples/WEB-INF/classes/cal/JspCalendar.java
@@ -40,8 +40,9 @@ public class JspCalendar {
                                         "April", "May", "June",
                                         "July", "August", "September",
                                         "October", "November", "December" };
-        if (m > 12)
+        if (m > 12) {
             return "Unknown to Man";
+        }
 
         return months[m - 1];
 
@@ -52,8 +53,9 @@ public class JspCalendar {
         String[] days = new String[] {"Sunday", "Monday", "Tuesday", "Wednesday",
                                       "Thursday", "Friday", "Saturday"};
 
-        if (x > 7)
+        if (x > 7) {
             return "Unknown to Man";
+        }
 
         return days[x - 1];
 

==================================================
ColorGameBean.java
index e734e1f23d..6e855e11bf 100644
--- a/webapps/examples/WEB-INF/classes/cal/TableBean.java
+++ b/webapps/examples/WEB-INF/classes/cal/TableBean.java
@@ -64,10 +64,12 @@ public class TableBean {
 
         // Get the name and e-mail.
         this.processError = false;
-        if (name == null || name.equals(""))
+        if (name == null || name.equals("")) {
             setName(request.getParameter("name"));
-        if (email == null || email.equals(""))
+        }
+        if (email == null || email.equals("")) {
             setEmail(request.getParameter("email"));
+        }
         if (name == null || email == null || name.equals("")
                 || email.equals("")) {
             this.processError = true;
@@ -76,12 +78,13 @@ public class TableBean {
 
         // Get the date.
         String dateR = request.getParameter("date");
-        if (dateR == null)
+        if (dateR == null) {
             date = JspCal.getCurrentDate();
-        else if (dateR.equalsIgnoreCase("next"))
+        } else if (dateR.equalsIgnoreCase("next")) {
             date = JspCal.getNextDate();
-        else if (dateR.equalsIgnoreCase("prev"))
+        } else if (dateR.equalsIgnoreCase("prev")) {
             date = JspCal.getPrevDate();
+        }
 
         entries = table.get(date);
         if (entries == null) {
@@ -91,8 +94,9 @@ public class TableBean {
 
         // If time is provided add the event.
         String time = request.getParameter("time");
-        if (time != null)
+        if (time != null) {
             entries.processRequest(request, time);
+        }
     }
 
     public boolean getProcessError() {

==================================================
CompressionResponseStream.java
index 7c64d94c3b..f8f0118a6a 100644
--- a/webapps/examples/WEB-INF/classes/colors/ColorGameBean.java
+++ b/webapps/examples/WEB-INF/classes/colors/ColorGameBean.java
@@ -58,8 +58,9 @@ public class ColorGameBean {
     }
 
     public void setAction(String x) {
-        if (!tookHints)
+        if (!tookHints) {
             tookHints = x.equalsIgnoreCase("Hint");
+        }
         hint = x;
     }
 

==================================================
CompressionServletResponseWrapper.java
index 1479e34c81..76d14ed8ae 100644
--- a/webapps/examples/WEB-INF/classes/compressionFilters/CompressionResponseStream.java
+++ b/webapps/examples/WEB-INF/classes/compressionFilters/CompressionResponseStream.java
@@ -164,8 +164,9 @@ public class CompressionResponseStream extends ServletOutputStream {
         if (debug > 1) {
             System.out.println("close() @ CompressionResponseStream");
         }
-        if (closed)
+        if (closed) {
             throw new IOException("This output stream has already been closed");
+        }
 
         if (gzipstream != null) {
             flushToGZip();
@@ -237,8 +238,9 @@ public class CompressionResponseStream extends ServletOutputStream {
         if (debug > 1) {
             System.out.println("write "+b+" in CompressionResponseStream ");
         }
-        if (closed)
+        if (closed) {
             throw new IOException("Cannot write to a closed output stream");
+        }
 
         if (bufferCount >= buffer.length) {
             flushToGZip();
@@ -308,11 +310,13 @@ public class CompressionResponseStream extends ServletOutputStream {
             System.out.println(")");
         }
 
-        if (closed)
+        if (closed) {
             throw new IOException("Cannot write to a closed output stream");
+        }
 
-        if (len == 0)
+        if (len == 0) {
             return;
+        }
 
         // Can we write into buffer ?
         if (len <= (buffer.length - bufferCount)) {
@@ -381,16 +385,19 @@ public class CompressionResponseStream extends ServletOutputStream {
             }
 
             if (response.isCommitted()) {
-                if (debug > 1)
+                if (debug > 1) {
                     System.out.print("Response already committed. Using original output stream");
+                }
                 gzipstream = output;
             } else if (alreadyCompressed) {
-                if (debug > 1)
+                if (debug > 1) {
                     System.out.print("Response already compressed. Using original output stream");
+                }
                 gzipstream = output;
             } else if (!compressibleMimeType) {
-                if (debug > 1)
+                if (debug > 1) {
                     System.out.print("Response mime type is not compressible. Using original output stream");
+                }
                 gzipstream = output;
             } else {
                 response.addHeader("Content-Encoding", "gzip");
@@ -423,8 +430,9 @@ public class CompressionResponseStream extends ServletOutputStream {
      * @param value string
      */
     private boolean startsWithStringArray(String sArray[], String value) {
-        if (value == null)
-           return false;
+        if (value == null) {
+            return false;
+        }
         for (String s : sArray) {
             if (value.startsWith(s)) {
                 return true;

==================================================
JspCalendar.java
index 5631e8d028..8a7f61d089 100644
--- a/webapps/examples/WEB-INF/classes/compressionFilters/CompressionServletResponseWrapper.java
+++ b/webapps/examples/WEB-INF/classes/compressionFilters/CompressionServletResponseWrapper.java
@@ -184,8 +184,9 @@ public class CompressionServletResponseWrapper
             if (writer != null) {
                 writer.close();
             } else {
-                if (stream != null)
+                if (stream != null) {
                     stream.close();
+                }
             }
         } catch (IOException e) {
             // Ignore
@@ -220,11 +221,13 @@ public class CompressionServletResponseWrapper
     @Override
     public ServletOutputStream getOutputStream() throws IOException {
 
-        if (writer != null)
+        if (writer != null) {
             throw new IllegalStateException("getWriter() has already been called for this response");
+        }
 
-        if (stream == null)
+        if (stream == null) {
             stream = createOutputStream();
+        }
         if (debug > 1) {
             System.out.println("stream is set to "+stream+" in getOutputStream");
         }
@@ -242,11 +245,13 @@ public class CompressionServletResponseWrapper
     @Override
     public PrintWriter getWriter() throws IOException {
 
-        if (writer != null)
+        if (writer != null) {
             return writer;
+        }
 
-        if (stream != null)
+        if (stream != null) {
             throw new IllegalStateException("getOutputStream() has already been called for this response");
+        }
 
         stream = createOutputStream();
         if (debug > 1) {
@@ -270,9 +275,14 @@ public class CompressionServletResponseWrapper
     public void addHeader(String name, String value) {
         if (headerCopies.containsKey(name)) {
             String existingValue = headerCopies.get(name);
-            if ((existingValue != null) && (existingValue.length() > 0)) headerCopies.put(name, existingValue + "," + value);
-            else headerCopies.put(name, value);
-        } else headerCopies.put(name, value);
+            if ((existingValue != null) && (existingValue.length() > 0)) {
+                headerCopies.put(name, existingValue + "," + value);
+            } else {
+                headerCopies.put(name, value);
+            }
+        } else {
+            headerCopies.put(name, value);
+        }
         super.addHeader(name, value);
     }
 

==================================================
LogTag.java
index 759edee10f..d6165ba59e 100644
--- a/webapps/examples/WEB-INF/classes/dates/JspCalendar.java
+++ b/webapps/examples/WEB-INF/classes/dates/JspCalendar.java
@@ -38,8 +38,9 @@ public class JspCalendar {
                                         "April", "May", "June",
                                         "July", "August", "September",
                                         "October", "November", "December" };
-        if (m > 12)
+        if (m > 12) {
             return "Unknown to Man";
+        }
 
         return months[m - 1];
 
@@ -50,8 +51,9 @@ public class JspCalendar {
         String[] days = new String[] {"Sunday", "Monday", "Tuesday", "Wednesday",
                                       "Thursday", "Friday", "Saturday"};
 
-        if (x > 7)
+        if (x > 7) {
             return "Unknown to Man";
+        }
 
         return days[x - 1];
 

==================================================
ExampleFilter.java
index f5d74c0b49..59524c3c8b 100644
--- a/webapps/examples/WEB-INF/classes/examples/LogTag.java
+++ b/webapps/examples/WEB-INF/classes/examples/LogTag.java
@@ -31,12 +31,13 @@ public class LogTag extends ExampleTagBase {
     boolean toBrowser = false;
 
     public void setToBrowser(String value) {
-        if (value == null)
+        if (value == null) {
             toBrowser = false;
-        else if (value.equalsIgnoreCase("true"))
+        } else if (value.equalsIgnoreCase("true")) {
             toBrowser = true;
-        else
+        } else {
             toBrowser = false;
+        }
     }
 
     @Override
@@ -49,8 +50,9 @@ public class LogTag extends ExampleTagBase {
         try {
             String s = bodyOut.getString();
             System.err.println(s);
-            if (toBrowser)
+            if (toBrowser) {
                 bodyOut.writeOut(bodyOut.getEnclosingWriter());
+            }
             return SKIP_BODY;
         } catch (IOException ex) {
             throw new JspTagException(ex.toString());

==================================================
ContextListener.java
index 6091196e60..318622c703 100644
--- a/webapps/examples/WEB-INF/classes/filters/ExampleFilter.java
+++ b/webapps/examples/WEB-INF/classes/filters/ExampleFilter.java
@@ -70,8 +70,9 @@ public final class ExampleFilter extends GenericFilter {
             throws IOException, ServletException {
 
         // Store ourselves as a request attribute (if requested)
-        if (attribute != null)
+        if (attribute != null) {
             request.setAttribute(attribute, this);
+        }
 
         // Time and log the subsequent processing
         long startTime = System.currentTimeMillis();

==================================================
SessionListener.java
index 272e3dcbc5..3026e325e6 100644
--- a/webapps/examples/WEB-INF/classes/listeners/ContextListener.java
+++ b/webapps/examples/WEB-INF/classes/listeners/ContextListener.java
@@ -128,10 +128,11 @@ public final class ContextListener
      */
     private void log(String message) {
 
-        if (context != null)
+        if (context != null) {
             context.log("ContextListener: " + message);
-        else
+        } else {
             System.out.println("ContextListener: " + message);
+        }
 
     }
 

==================================================
DummyCart.java
index f8cad8fc3e..573a769c4c 100644
--- a/webapps/examples/WEB-INF/classes/listeners/SessionListener.java
+++ b/webapps/examples/WEB-INF/classes/listeners/SessionListener.java
@@ -150,10 +150,11 @@ public final class SessionListener implements ServletContextListener,
      */
     private void log(String message) {
 
-        if (context != null)
+        if (context != null) {
             context.log("SessionListener: " + message);
-        else
+        } else {
             System.out.println("SessionListener: " + message);
+        }
 
     }
 

==================================================
HTMLFilter.java
index bad0cb9c2b..28846bdbdf 100644
--- a/webapps/examples/WEB-INF/classes/sessions/DummyCart.java
+++ b/webapps/examples/WEB-INF/classes/sessions/DummyCart.java
@@ -48,10 +48,11 @@ public class DummyCart {
     public void processRequest() {
         // null value for submit - user hit enter instead of clicking on
         // "add" or "remove"
-        if (submit == null || submit.equals("add"))
+        if (submit == null || submit.equals("add")) {
             addItem(item);
-        else if (submit.equals("remove"))
+        } else if (submit.equals("remove")) {
             removeItem(item);
+        }
 
         // reset at the end of the request
         reset();

==================================================
DebugValidator.java
index 938bb5aa0d..88f3d166f5 100644
--- a/webapps/examples/WEB-INF/classes/util/HTMLFilter.java
+++ b/webapps/examples/WEB-INF/classes/util/HTMLFilter.java
@@ -36,8 +36,9 @@ public final class HTMLFilter {
      */
     public static String filter(String message) {
 
-        if (message == null)
+        if (message == null) {
             return null;
+        }
 
         char content[] = new char[message.length()];
         message.getChars(0, message.length(), content, 0);

==================================================
DrawMessage.java
index 8b02e643cb..932c936f62 100644
--- a/webapps/examples/WEB-INF/classes/validators/DebugValidator.java
+++ b/webapps/examples/WEB-INF/classes/validators/DebugValidator.java
@@ -67,8 +67,9 @@ public class DebugValidator extends TagLibraryValidator {
         while (true) {
             try {
                 int ch = is.read();
-                if (ch < 0)
+                if (ch < 0) {
                     break;
+                }
                 System.out.print((char) ch);
             } catch (IOException e) {
                 break;

==================================================
Room.java
index 8dceabae07..33de5572ee 100644
--- a/webapps/examples/WEB-INF/classes/websocket/drawboard/DrawMessage.java
+++ b/webapps/examples/WEB-INF/classes/websocket/drawboard/DrawMessage.java
@@ -204,22 +204,25 @@ public final class DrawMessage {
             String[] elements = str.split(",");
 
             type = Integer.parseInt(elements[0]);
-            if (!(type >= 1 && type <= 4))
+            if (!(type >= 1 && type <= 4)) {
                 throw new ParseException("Invalid type: " + type);
+            }
 
             for (int i = 0; i < colors.length; i++) {
                 colors[i] = (byte) Integer.parseInt(elements[1 + i]);
             }
 
             thickness = Double.parseDouble(elements[5]);
-            if (Double.isNaN(thickness) || thickness < 0 || thickness > 100)
+            if (Double.isNaN(thickness) || thickness < 0 || thickness > 100) {
                 throw new ParseException("Invalid thickness: " + thickness);
+            }
 
             for (int i = 0; i < coords.length; i++) {
                 coords[i] = Double.parseDouble(elements[6 + i]);
-                if (Double.isNaN(coords[i]))
+                if (Double.isNaN(coords[i])) {
                     throw new ParseException("Invalid coordinate: "
                             + coords[i]);
+                }
             }
 
         } catch (RuntimeException ex) {

==================================================
Location.java
index c7e966f4ab..00c013f1d2 100644
--- a/webapps/examples/WEB-INF/classes/websocket/drawboard/Room.java
+++ b/webapps/examples/WEB-INF/classes/websocket/drawboard/Room.java
@@ -315,8 +315,9 @@ public final class Room {
 
                     String s = String.valueOf(p.getLastReceivedMessageId())
                             + "," + msg.toString();
-                    if (i > 0)
+                    if (i > 0) {
                         sb.append("|");
+                    }
 
                     sb.append(s);
                 }

==================================================
