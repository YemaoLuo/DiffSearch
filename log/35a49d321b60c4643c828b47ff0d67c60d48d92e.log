35a49d321b60c4643c828b47ff0d67c60d48d92e
==================================================
Filip confirmed it was OK to remove his @author tags
==================================================
Mark Emlyn
==================================================
Fri Jan 24 17:35:15 2014 +0000
==================================================
Cluster.java
Filip confirmed it was OK to remove his @author tags

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1561082 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CometEvent.java
index 1f6699a2f2..c985d8f8c3 100644
--- a/java/org/apache/catalina/Cluster.java
+++ b/java/org/apache/catalina/Cluster.java
@@ -28,7 +28,6 @@ package org.apache.catalina;
  *
  * @author Bip Thelin
  * @author Remy Maucherat
- * @author Filip Hanik
  * @version $Id$
  */
 

==================================================
CometFilter.java
index 3f734ca2df..129873686c 100644
--- a/java/org/apache/catalina/comet/CometEvent.java
+++ b/java/org/apache/catalina/comet/CometEvent.java
@@ -27,7 +27,6 @@ import javax.servlet.http.HttpServletResponse;
 /**
  * The CometEvent interface.
  *
- * @author Filip Hanik
  * @author Remy Maucherat
  */
 public interface CometEvent {

==================================================
CometFilterChain.java
index f5bcfa6f4b..ffb0d1c2ce 100644
--- a/java/org/apache/catalina/comet/CometFilter.java
+++ b/java/org/apache/catalina/comet/CometFilter.java
@@ -47,7 +47,6 @@ import javax.servlet.ServletException;
  * <br>
  *
  * @author Remy Maucherat
- * @author Filip Hanik
  */
 public interface CometFilter extends Filter {
 

==================================================
AprLifecycleListener.java
index 2b27d7b037..68ff5f1ccb 100644
--- a/java/org/apache/catalina/comet/CometFilterChain.java
+++ b/java/org/apache/catalina/comet/CometFilterChain.java
@@ -29,7 +29,6 @@ import javax.servlet.ServletException;
  * is the last filter in the chain, to invoke the resource at the end of the chain.
  *
  * @author Remy Maucherat
- * @author Filip Hanik
  */
 public interface CometFilterChain {
 

==================================================
CatalinaCluster.java
index 82a7a91b62..5f7f7c4ee2 100644
--- a/java/org/apache/catalina/core/AprLifecycleListener.java
+++ b/java/org/apache/catalina/core/AprLifecycleListener.java
@@ -38,7 +38,6 @@ import org.apache.tomcat.util.res.StringManager;
  * and destroy APR.
  *
  * @author Remy Maucherat
- * @author Filip Hanik
  * @version $Id$
  * @since 4.1
  */

==================================================
ClusterDeployer.java
index a883aa65e3..8df44e6747 100644
--- a/java/org/apache/catalina/ha/CatalinaCluster.java
+++ b/java/org/apache/catalina/ha/CatalinaCluster.java
@@ -30,7 +30,6 @@ import org.apache.catalina.tribes.Member;
  * A <b>CatalinaCluster</b> interface allows to plug in and out the
  * different cluster implementations
  *
- * @author Filip Hanik
  * @version $Id$
  */
 

==================================================
ClusterListener.java
index 3eacb9019c..a6b3238a68 100644
--- a/java/org/apache/catalina/ha/ClusterDeployer.java
+++ b/java/org/apache/catalina/ha/ClusterDeployer.java
@@ -21,7 +21,6 @@ package org.apache.catalina.ha;
  * A <b>ClusterDeployer</b> interface allows to plug in and out the
  * different deployment implementations
  *
- * @author Filip Hanik
  * @version $Id$
  */
 import java.io.File;

==================================================
ClusterManager.java
index 6013f9ac47..d4f93a083e 100644
--- a/java/org/apache/catalina/ha/ClusterListener.java
+++ b/java/org/apache/catalina/ha/ClusterListener.java
@@ -28,7 +28,6 @@ import org.apache.catalina.tribes.Member;
  * node is failed.
  *
  * @author Peter Rossbach
- * @author Filip Hanik
  * @version $Id$
  */
 public abstract class ClusterListener implements ChannelListener {

==================================================
ClusterMessage.java
index 558700495a..1cac8ea997 100644
--- a/java/org/apache/catalina/ha/ClusterManager.java
+++ b/java/org/apache/catalina/ha/ClusterManager.java
@@ -29,7 +29,6 @@ import org.apache.catalina.tribes.io.ReplicationStream;
  * This is so that we can have a more pluggable way
  * of swapping session managers for different algorithms.
  *
- * @author Filip Hanik
  * @author Peter Rossbach
  */
 public interface ClusterManager extends Manager {

==================================================
ClusterRuleSet.java
index fbc23b3874..2de8a73d07 100644
--- a/java/org/apache/catalina/ha/ClusterMessage.java
+++ b/java/org/apache/catalina/ha/ClusterMessage.java
@@ -22,7 +22,6 @@ import org.apache.catalina.tribes.Member;
 
 
 /**
- * @author Filip Hanik
  *
  */
 public interface ClusterMessage extends Serializable {

==================================================
ClusterValve.java
index dbb527edd0..61c8c5e428 100644
--- a/java/org/apache/catalina/ha/ClusterRuleSet.java
+++ b/java/org/apache/catalina/ha/ClusterRuleSet.java
@@ -27,7 +27,6 @@ import org.apache.tomcat.util.digester.RuleSetBase;
  * <p><strong>RuleSet</strong> for processing the contents of a
  * Cluster definition element.  </p>
  *
- * @author Filip Hanik
  * @author Peter Rossbach
  * @version $Id$
  */

==================================================
ReplicatedContext.java
index 178ba6fc64..681e239ca4 100644
--- a/java/org/apache/catalina/ha/ClusterValve.java
+++ b/java/org/apache/catalina/ha/ClusterValve.java
@@ -21,7 +21,6 @@ import org.apache.catalina.Valve;
 /**
  * Cluster valves are a simple extension to the Tomcat valve architecture
  * with a small addition of being able to reference the cluster component in the container it sits in.
- * @author Filip Hanik
  * @author Peter Rossbach
  * @version $Id$
  */

==================================================
FarmWarDeployer.java
index fe8eba95c0..fb1b9b6447 100644
--- a/java/org/apache/catalina/ha/context/ReplicatedContext.java
+++ b/java/org/apache/catalina/ha/context/ReplicatedContext.java
@@ -38,7 +38,6 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
 /**
- * @author Filip Hanik
  * @version 1.0
  */
 public class ReplicatedContext extends StandardContext implements MapOwner {

==================================================
FileMessage.java
index 3070702a90..c638133667 100644
--- a/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
+++ b/java/org/apache/catalina/ha/deploy/FarmWarDeployer.java
@@ -55,7 +55,6 @@ import org.apache.tomcat.util.res.StringManager;
  * Currently we only support deployment of WAR files since they are easier to
  * send across the wire.
  *
- * @author Filip Hanik
  * @author Peter Rossbach
  * @version $Revision$
  */

==================================================
FileMessageFactory.java
index bdce4eb74b..572bfe9f27 100644
--- a/java/org/apache/catalina/ha/deploy/FileMessage.java
+++ b/java/org/apache/catalina/ha/deploy/FileMessage.java
@@ -23,7 +23,6 @@ import org.apache.catalina.tribes.Member;
 /**
  * Contains the data for a file being transferred over TCP, this is
  * essentially a fragment of a file, read and written by the FileMessageFactory
- * @author Filip Hanik
  * @version 1.0
  */
 

==================================================
WarWatcher.java
index 36eb7152d3..0e3ded0aef 100644
--- a/java/org/apache/catalina/ha/deploy/FileMessageFactory.java
+++ b/java/org/apache/catalina/ha/deploy/FileMessageFactory.java
@@ -42,7 +42,6 @@ import org.apache.tomcat.util.res.StringManager;
  * To force a cleanup, call cleanup() from the calling object. <BR>
  * This class is not thread safe.
  *
- * @author Filip Hanik
  * @version 1.0
  */
 public class FileMessageFactory {

==================================================
BackupManager.java
index d6e38b3256..d06f421e36 100644
--- a/java/org/apache/catalina/ha/deploy/WarWatcher.java
+++ b/java/org/apache/catalina/ha/deploy/WarWatcher.java
@@ -32,7 +32,6 @@ import org.apache.juli.logging.LogFactory;
  * notifies a listener of the changes made
  * </p>
  *
- * @author Filip Hanik
  * @author Peter Rossbach
  * @version 1.1
  */

==================================================
ClusterManagerBase.java
index 5af3c866df..3eb4faf88a 100644
--- a/java/org/apache/catalina/ha/session/BackupManager.java
+++ b/java/org/apache/catalina/ha/session/BackupManager.java
@@ -36,7 +36,6 @@ import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.res.StringManager;
 
 /**
- *@author Filip Hanik
  *@version 1.0
  */
 public class BackupManager extends ClusterManagerBase

==================================================
ClusterSessionListener.java
index 395429d9af..a6239d1bfe 100644
--- a/java/org/apache/catalina/ha/session/ClusterManagerBase.java
+++ b/java/org/apache/catalina/ha/session/ClusterManagerBase.java
@@ -29,7 +29,6 @@ import org.apache.catalina.tribes.io.ReplicationStream;
 
 /**
  *
- * @author Filip Hanik
  * @version $Id$
  */
 public abstract class ClusterManagerBase extends ManagerBase implements ClusterManager {

==================================================
DeltaManager.java
index 71f7fec06c..c3806826a3 100644
--- a/java/org/apache/catalina/ha/session/ClusterSessionListener.java
+++ b/java/org/apache/catalina/ha/session/ClusterSessionListener.java
@@ -27,7 +27,6 @@ import org.apache.juli.logging.LogFactory;
 
 /**
  * Receive replicated SessionMessage form other cluster node.
- * @author Filip Hanik
  * @author Peter Rossbach
  * @version $Id$
  */

==================================================
DeltaRequest.java
index 14451f561e..f889668905 100644
--- a/java/org/apache/catalina/ha/session/DeltaManager.java
+++ b/java/org/apache/catalina/ha/session/DeltaManager.java
@@ -57,7 +57,6 @@ import org.apache.tomcat.util.res.StringManager;
  * reloading depends upon external calls to the <code>start()</code> and
  * <code>stop()</code> methods of this class at the correct times.
  *
- * @author Filip Hanik
  * @author Craig R. McClanahan
  * @author Peter Rossbach
  * @version $Id$

==================================================
DeltaSession.java
index bcd667fc93..7a789cc4b3 100644
--- a/java/org/apache/catalina/ha/session/DeltaRequest.java
+++ b/java/org/apache/catalina/ha/session/DeltaRequest.java
@@ -14,8 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-
 package org.apache.catalina.ha.session;
 
 /**
@@ -23,7 +21,6 @@ package org.apache.catalina.ha.session;
  * a request is executed. These actions will then translate into invocations of methods
  * on the actual session.
  * This class is NOT thread safe. One DeltaRequest per session
- * @author <a href="mailto:fhanik@apache.org">Filip Hanik</a>
  * @version 1.0
  */
 

==================================================
SerializablePrincipal.java
index 96936d8f4f..73bdd25567 100644
--- a/java/org/apache/catalina/ha/session/DeltaSession.java
+++ b/java/org/apache/catalina/ha/session/DeltaSession.java
@@ -50,7 +50,6 @@ import org.apache.tomcat.util.res.StringManager;
  * Similar to the StandardSession except that this session will keep
  * track of deltas during a request.
  *
- * @author Filip Hanik
  * @version $Id$
  */
 

==================================================
SessionMessageImpl.java
index 99981d74e0..aed35153d2 100644
--- a/java/org/apache/catalina/ha/session/SerializablePrincipal.java
+++ b/java/org/apache/catalina/ha/session/SerializablePrincipal.java
@@ -37,7 +37,6 @@ import org.apache.tomcat.util.res.StringManager;
  * is available for use by <code>Realm</code> implementations.
  * The GenericPrincipal does NOT implement serializable and I didn't want to
  * change that implementation hence I implemented this one instead.
- * @author Filip Hanik
  * @version $Id$
  */
 public class SerializablePrincipal  implements java.io.Serializable {

==================================================
ReplicationValve.java
index 1f1c11e34c..a54f5ff7e0 100644
--- a/java/org/apache/catalina/ha/session/SessionMessageImpl.java
+++ b/java/org/apache/catalina/ha/session/SessionMessageImpl.java
@@ -22,7 +22,6 @@ import org.apache.catalina.ha.ClusterMessageBase;
 /**
  * Session cluster message
  *
- * @author Filip Hanik
  * @author Peter Rossbach
  *
  * @version $Id$

==================================================
SimpleTcpCluster.java
index ef2523a227..898e1225f1 100644
--- a/java/org/apache/catalina/ha/tcp/ReplicationValve.java
+++ b/java/org/apache/catalina/ha/tcp/ReplicationValve.java
@@ -58,7 +58,6 @@ import org.apache.tomcat.util.res.StringManager;
  * </p>
  *
  * @author Craig R. McClanahan
- * @author Filip Hanik
  * @author Peter Rossbach
  * @version $Id$
  */

==================================================
SetAllPropertiesRule.java
index 4cfc67f535..9b961d9d28 100644
--- a/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java
+++ b/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java
@@ -68,7 +68,6 @@ import org.apache.tomcat.util.res.StringManager;
  *
  * FIXME wrote testcases
  *
- * @author Filip Hanik
  * @author Remy Maucherat
  * @author Peter Rossbach
  * @version $Id$

==================================================
ByteMessage.java
index 5168aa841f..d32f2688d8 100644
--- a/java/org/apache/catalina/startup/SetAllPropertiesRule.java
+++ b/java/org/apache/catalina/startup/SetAllPropertiesRule.java
@@ -28,7 +28,6 @@ import org.xml.sax.Attributes;
  * Rule that uses the introspection utils to set properties.
  *
  * @author Remy Maucherat
- * @author Filip Hanik
  */
 public class SetAllPropertiesRule extends Rule {
 

==================================================
Channel.java
index 02ca87659e..89f7b64f5a 100644
--- a/java/org/apache/catalina/tribes/ByteMessage.java
+++ b/java/org/apache/catalina/tribes/ByteMessage.java
@@ -35,7 +35,6 @@ import java.io.ObjectOutput;
  * If you are using multiple applications on top of Tribes you should add some sort of header
  * so that you can decide with the <code>ChannelListener.accept()</code> whether this message was intended
  * for you.
- * @author Filip Hanik
  * @version $Id$
  */
 

==================================================
ChannelException.java
index 1dbbccc427..0a81a8002d 100644
--- a/java/org/apache/catalina/tribes/Channel.java
+++ b/java/org/apache/catalina/tribes/Channel.java
@@ -65,7 +65,6 @@ import java.io.Serializable;
  * </code></pre>
  *
  * For example usage @see org.apache.catalina.tribes.group.GroupChannel
- * @author Filip Hanik
  * @version $Id$
  */
 public interface Channel {

==================================================
ChannelInterceptor.java
index 0fa845f5e5..6ce202f044 100644
--- a/java/org/apache/catalina/tribes/ChannelException.java
+++ b/java/org/apache/catalina/tribes/ChannelException.java
@@ -26,7 +26,6 @@ import java.util.ArrayList;
  * If an application is sending a message and some of the recipients fail to receive it,
  * the application can retrieve what recipients failed by using the <code>getFaultyMembers()</code>
  * method. This way, an application will always know if a message was delivered successfully or not.
- * @author Filip Hanik
  * @version $Id$
  */
 
@@ -144,7 +143,6 @@ public class ChannelException extends Exception {
      * <p>Description: Represent a failure to a specific member when a message was sent
      * to more than one member</p>
      *
-     * @author Filip Hanik
      * @version 1.0
      */
     public static class FaultyMember {

==================================================
ChannelListener.java
index 36d591fbb7..021ff64e02 100644
--- a/java/org/apache/catalina/tribes/ChannelInterceptor.java
+++ b/java/org/apache/catalina/tribes/ChannelInterceptor.java
@@ -25,7 +25,6 @@ import org.apache.catalina.tribes.group.InterceptorPayload;
  * other actions when a message is sent or received.<br>
  * Interceptors are tied together in a linked list.
  * @see org.apache.catalina.tribes.group.ChannelInterceptorBase
- * @author Filip Hanik
  * @version $Id$
  */
 

==================================================
ChannelMessage.java
index 8af0437805..2428268cd5 100644
--- a/java/org/apache/catalina/tribes/ChannelListener.java
+++ b/java/org/apache/catalina/tribes/ChannelListener.java
@@ -29,7 +29,6 @@ import java.io.Serializable;
  * was processed by an above application or if it was just received and forgot about, a feature required
  * to support message-response(RPC) calls<br>
  *
- * @author Filip Hanik
  * @version 1.0
  */
 

==================================================
ChannelReceiver.java
index fb19f400f8..8ee41b3a17 100644
--- a/java/org/apache/catalina/tribes/ChannelMessage.java
+++ b/java/org/apache/catalina/tribes/ChannelMessage.java
@@ -24,7 +24,6 @@ import org.apache.catalina.tribes.io.XByteBuffer;
  * Message that is passed through the interceptor stack after the
  * data serialized in the Channel object and then passed down to the
  * interceptor and eventually down to the ChannelSender component
- * @author Filip Hanik
  *
  */
 public interface ChannelMessage extends Serializable {

==================================================
ChannelSender.java
index d084ea0747..5410f961e9 100644
--- a/java/org/apache/catalina/tribes/ChannelReceiver.java
+++ b/java/org/apache/catalina/tribes/ChannelReceiver.java
@@ -23,7 +23,6 @@ package org.apache.catalina.tribes;
  * The <code>ChannelReceiver</code> interface is the data receiver component
  * at the bottom layer, the IO layer (for layers see the javadoc for the {@link Channel} interface).
  * This class may optionally implement a thread pool for parallel processing of incoming messages.
- * @author Filip Hanik
  * @version $Id$
  */
 public interface ChannelReceiver extends Heartbeat {

==================================================
ErrorHandler.java
index 4e5135fc21..c23156774d 100644
--- a/java/org/apache/catalina/tribes/ChannelSender.java
+++ b/java/org/apache/catalina/tribes/ChannelSender.java
@@ -26,7 +26,6 @@ import java.io.IOException;
  * at the bottom layer, the IO layer (for layers see the javadoc for the {@link Channel} interface).<br>
  * The channel sender must support "silent" members, ie, be able to send a message to a member
  * that is not in the membership, but is part of the destination parameter
- * @author Filip Hanik
  * @version $Id$
  */
 public interface ChannelSender extends Heartbeat

==================================================
Heartbeat.java
index c5e80fe892..2dc88ce29a 100644
--- a/java/org/apache/catalina/tribes/ErrorHandler.java
+++ b/java/org/apache/catalina/tribes/ErrorHandler.java
@@ -23,7 +23,6 @@ package org.apache.catalina.tribes;
  * The <code>ErrorHandler</code> class is used when sending messages
  * that are sent asynchronously and the application still needs to get
  * confirmation when the message was sent successfully or when a message errored out.
- * @author Filip Hanik
  * @version 1.0
  */
 public interface ErrorHandler {

==================================================
ManagedChannel.java
index 37b2d2f46b..75c8244e08 100644
--- a/java/org/apache/catalina/tribes/Heartbeat.java
+++ b/java/org/apache/catalina/tribes/Heartbeat.java
@@ -19,7 +19,6 @@ package org.apache.catalina.tribes;
 /**
  * Can be implemented by the ChannelListener and Membership listeners to receive heartbeat
  * notifications from the Channel
- * @author Filip Hanik
  * @version 1.0
  * @see Channel
  * @see Channel#heartbeat()

==================================================
Member.java
index 27745c96aa..1742ba9f22 100644
--- a/java/org/apache/catalina/tribes/ManagedChannel.java
+++ b/java/org/apache/catalina/tribes/ManagedChannel.java
@@ -22,7 +22,6 @@ import java.util.Iterator;
  * Channel interface
  * A managed channel interface gives you access to the components of the channels
  * such as senders, receivers, interceptors etc for configurations purposes
- * @author Filip Hanik
  * @version $Id$
  */
 public interface ManagedChannel extends Channel {

==================================================
MembershipListener.java
index bfdcda2a9e..b59d7f9b45 100644
--- a/java/org/apache/catalina/tribes/Member.java
+++ b/java/org/apache/catalina/tribes/Member.java
@@ -26,7 +26,6 @@ package org.apache.catalina.tribes;
  * The uniqueId defines the session id for the member. This is an important feature
  * since a member that has crashed and the starts up again on the same port/host is
  * not guaranteed to be the same member, so no state transfers will ever be confused
- * @author Filip Hanik
  * @version $Id$
  */
 public interface Member {

==================================================
MembershipService.java
index 8a4d637a22..e73e9f1382 100644
--- a/java/org/apache/catalina/tribes/MembershipListener.java
+++ b/java/org/apache/catalina/tribes/MembershipListener.java
@@ -22,7 +22,6 @@ package org.apache.catalina.tribes;
  * membership service. It has two methods that will notify the listener
  * when a member has joined the group and when a member has disappeared (crashed)
  *
- * @author Filip Hanik
  * @version $Id$
  */
 

==================================================
MessageListener.java
index bd10cc9612..9f4dd430bf 100644
--- a/java/org/apache/catalina/tribes/MembershipService.java
+++ b/java/org/apache/catalina/tribes/MembershipService.java
@@ -22,7 +22,6 @@ package org.apache.catalina.tribes;
  * MembershipService Interface<br>
  * The <code>MembershipService</code> interface is the membership component
  * at the bottom layer, the IO layer (for layers see the javadoc for the {@link Channel} interface).<br>
- * @author Filip Hanik
  * @version $Id$
  */
 

==================================================
RemoteProcessException.java
index ce64f70ab1..303529fec4 100644
--- a/java/org/apache/catalina/tribes/MessageListener.java
+++ b/java/org/apache/catalina/tribes/MessageListener.java
@@ -22,7 +22,6 @@ package org.apache.catalina.tribes;
  *
  * <p>Description: The listener to be registered with the ChannelReceiver, internal Tribes component</p>
  *
- * @author Filip Hanik
  * @version 1.0
  */
 

==================================================
UniqueId.java
index 51885a1ddd..75003d1bb5 100644
--- a/java/org/apache/catalina/tribes/RemoteProcessException.java
+++ b/java/org/apache/catalina/tribes/RemoteProcessException.java
@@ -24,7 +24,6 @@ package org.apache.catalina.tribes;
  * This message will be embedded in a ChannelException.FaultyMember
  * </p>
  * @see ChannelException
- * @author Filip Hanik
  * @version 1.0
  */
 public class RemoteProcessException extends RuntimeException {

==================================================
AbsoluteOrder.java
index 4e842011d1..c34ddf8a34 100644
--- a/java/org/apache/catalina/tribes/UniqueId.java
+++ b/java/org/apache/catalina/tribes/UniqueId.java
@@ -25,7 +25,6 @@ import org.apache.catalina.tribes.util.Arrays;
  *
  * <p>Company: </p>
  *
- * @author Filip Hanik
  * @version 1.0
  */
 public final class UniqueId implements Serializable{

==================================================
ChannelCoordinator.java
index 9dfb66b7b4..b6d4fb460d 100644
--- a/java/org/apache/catalina/tribes/group/AbsoluteOrder.java
+++ b/java/org/apache/catalina/tribes/group/AbsoluteOrder.java
@@ -41,7 +41,6 @@ import org.apache.catalina.tribes.Member;
  *
  * </p>
  *
- * @author Filip Hanik
  * @version 1.0
  * @see org.apache.catalina.tribes.Member
  */

==================================================
ChannelInterceptorBase.java
index 4b4b6b27df..095c3f2d03 100644
--- a/java/org/apache/catalina/tribes/group/ChannelCoordinator.java
+++ b/java/org/apache/catalina/tribes/group/ChannelCoordinator.java
@@ -37,7 +37,6 @@ import org.apache.catalina.tribes.util.Logs;
  * The channel coordinator object coordinates the membership service,
  * the sender and the receiver.
  * This is the last interceptor in the chain.
- * @author Filip Hanik
  * @version $Id$
  */
 public class ChannelCoordinator extends ChannelInterceptorBase implements MessageListener {

==================================================
GroupChannel.java
index f2e34feefd..8559c49e5e 100644
--- a/java/org/apache/catalina/tribes/group/ChannelInterceptorBase.java
+++ b/java/org/apache/catalina/tribes/group/ChannelInterceptorBase.java
@@ -23,7 +23,6 @@ import org.apache.catalina.tribes.Member;
 
 /**
  * Abstract class for the interceptor base class.
- * @author Filip Hanik
  * @version $Id$
  */
 

==================================================
InterceptorPayload.java
index 47ba809ef6..408cee2e55 100644
--- a/java/org/apache/catalina/tribes/group/GroupChannel.java
+++ b/java/org/apache/catalina/tribes/group/GroupChannel.java
@@ -53,7 +53,6 @@ import org.apache.juli.logging.LogFactory;
  * message being sent and received with membership announcements.
  * The channel has an chain of interceptors that can modify the message or perform other logic.<br>
  * It manages a complete group, both membership and replication.
- * @author Filip Hanik
  * @version $Id$
  */
 public class GroupChannel extends ChannelInterceptorBase implements ManagedChannel {

==================================================
Response.java
index 7d7124f0e6..c665b56a21 100644
--- a/java/org/apache/catalina/tribes/group/InterceptorPayload.java
+++ b/java/org/apache/catalina/tribes/group/InterceptorPayload.java
@@ -19,7 +19,6 @@ package org.apache.catalina.tribes.group;
 import org.apache.catalina.tribes.ErrorHandler;
 
 /**
- * @author Filip Hanik
  * @version 1.0
  */
 public class InterceptorPayload  {

==================================================
RpcChannel.java
index 587bd97160..8f700e0018 100644
--- a/java/org/apache/catalina/tribes/group/Response.java
+++ b/java/org/apache/catalina/tribes/group/Response.java
@@ -22,7 +22,6 @@ import org.apache.catalina.tribes.Member;
 
 /**
  * A response object holds a message from a responding partner.
- * @author Filip Hanik
  * @version 1.0
  */
 public class Response {

==================================================
DomainFilterInterceptor.java
index a15a1c0670..803f17180d 100644
--- a/java/org/apache/catalina/tribes/group/RpcChannel.java
+++ b/java/org/apache/catalina/tribes/group/RpcChannel.java
@@ -33,7 +33,6 @@ import org.apache.juli.logging.LogFactory;
 
 /**
  * A channel to handle RPC messaging
- * @author Filip Hanik
  */
 public class RpcChannel implements ChannelListener{
     private static final Log log = LogFactory.getLog(RpcChannel.class);

==================================================
FragmentationInterceptor.java
index bbad0c8ef3..38bff44c9e 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/DomainFilterInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/DomainFilterInterceptor.java
@@ -31,7 +31,6 @@ import org.apache.juli.logging.LogFactory;
  * <p>Description: Filters membership based on domain.
  * </p>
  *
- * @author Filip Hanik
  * @version 1.0
  */
 public class DomainFilterInterceptor extends ChannelInterceptorBase {

==================================================
GzipInterceptor.java
index e951401d51..1ca278796a 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/FragmentationInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/FragmentationInterceptor.java
@@ -38,7 +38,6 @@ import org.apache.catalina.tribes.io.XByteBuffer;
  * OrderInteceptor.expire=<milliseconds> - how long do we keep the fragments in memory and wait for the rest to arrive<b>default=60,000ms -> 60seconds</b>
  * This setting is useful to avoid OutOfMemoryErrors<br>
  * OrderInteceptor.maxSize=<max message size> - message size in bytes <b>default=1024*100 (around a tenth of a MB)</b><br>
- * @author Filip Hanik
  * @version 1.0
  */
 public class FragmentationInterceptor extends ChannelInterceptorBase {

==================================================
MessageDispatch15Interceptor.java
index 06170bd296..6d1d7c9575 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/GzipInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/GzipInterceptor.java
@@ -33,7 +33,6 @@ import org.apache.juli.logging.LogFactory;
 
 
 /**
- * @author Filip Hanik
  * @version 1.0
  */
 public class GzipInterceptor extends ChannelInterceptorBase {

==================================================
MessageDispatchInterceptor.java
index b7d1b097bc..8f1b3a4f14 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/MessageDispatch15Interceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/MessageDispatch15Interceptor.java
@@ -33,7 +33,6 @@ import org.apache.catalina.tribes.util.TcclThreadFactory;
  * except it uses an atomic long for the currentSize calculation
  * and uses a thread pool for message sending.
  *
- * @author Filip Hanik
  * @version 1.0
  */
 

==================================================
NonBlockingCoordinator.java
index 390417d0bd..ee15b2718d 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/MessageDispatchInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/MessageDispatchInterceptor.java
@@ -35,7 +35,6 @@ import org.apache.juli.logging.LogFactory;
  * <code>Channel.SEND_OPTIONS_ASYNCHRONOUS</code> flag to be set, if it is, it
  * will queue the message for delivery and immediately return to the sender.
  *
- * @author Filip Hanik
  * @version 1.0
  */
 public class MessageDispatchInterceptor extends ChannelInterceptorBase implements Runnable {

==================================================
OrderInterceptor.java
index 17bb5a1ee6..74b88d9023 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/NonBlockingCoordinator.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/NonBlockingCoordinator.java
@@ -115,7 +115,6 @@ import org.apache.juli.logging.LogFactory;
  * <a href="http://people.apache.org/~fhanik/tribes/docs/leader-election-initiate-election.jpg">Initiate an election</a><br><br>
  * <a href="http://people.apache.org/~fhanik/tribes/docs/leader-election-message-arrives.jpg">Receive an election message</a><br><br>
  *
- * @author Filip Hanik
  * @version 1.0
  *
  *

==================================================
TcpFailureDetector.java
index 680c1d0ff6..0ccee101e3 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/OrderInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/OrderInterceptor.java
@@ -50,7 +50,6 @@ import org.apache.catalina.tribes.io.XByteBuffer;
  * false means, forget the message and reset the message counter. <b>default=true</b>
  *
  *
- * @author Filip Hanik
  * @version 1.1
  */
 public class OrderInterceptor extends ChannelInterceptorBase {

==================================================
TcpPingInterceptor.java
index cd76b7dcdd..badc183368 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/TcpFailureDetector.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/TcpFailureDetector.java
@@ -54,7 +54,6 @@ import org.apache.catalina.tribes.membership.StaticMember;
  * 2. It catches send errors
  * </p>
  *
- * @author Filip Hanik
  * @version 1.0
  */
 public class TcpFailureDetector extends ChannelInterceptorBase {

==================================================
ThroughputInterceptor.java
index 790286c475..1643875d43 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/TcpPingInterceptor.java
@@ -36,7 +36,6 @@ import org.apache.juli.logging.LogFactory;
  * Sends a ping to all members.
  * Configure this interceptor with the TcpFailureDetector below it,
  * and the TcpFailureDetector will act as the membership guide.
- * @author Filip Hanik
  * @version 1.0
  */
 

==================================================
BufferPool.java
index e6711a8d53..19f7ea5104 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/ThroughputInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/ThroughputInterceptor.java
@@ -35,7 +35,6 @@ import org.apache.juli.logging.LogFactory;
 /**
  *
  *
- * @author Filip Hanik
  * @version 1.0
  */
 public class ThroughputInterceptor extends ChannelInterceptorBase {

==================================================
BufferPool15Impl.java
index 0b0b6e77e8..cdd770d50f 100644
--- a/java/org/apache/catalina/tribes/io/BufferPool.java
+++ b/java/org/apache/catalina/tribes/io/BufferPool.java
@@ -22,7 +22,6 @@ import org.apache.juli.logging.LogFactory;
 
 /**
  *
- * @author Filip Hanik
  *
  * @version 1.0
  */

==================================================
ChannelData.java
index 27273d72eb..57bc22736b 100644
--- a/java/org/apache/catalina/tribes/io/BufferPool15Impl.java
+++ b/java/org/apache/catalina/tribes/io/BufferPool15Impl.java
@@ -21,7 +21,6 @@ import java.util.concurrent.atomic.AtomicInteger;
 
 /**
  *
- * @author Filip Hanik
  * @version 1.0
  */
 class BufferPool15Impl implements BufferPool.BufferPoolAPI {

==================================================
ListenCallback.java
index 80f0ed7153..fb3dc5805c 100644
--- a/java/org/apache/catalina/tribes/io/ChannelData.java
+++ b/java/org/apache/catalina/tribes/io/ChannelData.java
@@ -31,7 +31,6 @@ import org.apache.catalina.tribes.util.UUIDGenerator;
  * to another node. While the message is being processed by the different
  * interceptors, the message data can be manipulated as each interceptor seems appropriate.
  * @author Peter Rossbach
- * @author Filip Hanik
  * @version $Id$
  *
  */

==================================================
ObjectReader.java
index 55cb454767..14bb627671 100644
--- a/java/org/apache/catalina/tribes/io/ListenCallback.java
+++ b/java/org/apache/catalina/tribes/io/ListenCallback.java
@@ -27,7 +27,6 @@ import org.apache.catalina.tribes.ChannelMessage;
  * The listen callback interface is used by the replication system
  * when data has been received. The interface does not care about
  * objects and marshalling and just passes the bytes straight through.
- * @author Filip Hanik
  * @version $Id$
  */
 public interface ListenCallback

==================================================
ReplicationStream.java
index 7120a4857d..9daeab25b1 100644
--- a/java/org/apache/catalina/tribes/io/ObjectReader.java
+++ b/java/org/apache/catalina/tribes/io/ObjectReader.java
@@ -34,7 +34,6 @@ import org.apache.juli.logging.LogFactory;
  * This object uses an XByteBuffer which is an extendable object buffer that also allows
  * for message encoding and decoding.
  *
- * @author Filip Hanik
  * @version $Id$
  */
 public class ObjectReader {

==================================================
XByteBuffer.java
index 3ce3f04137..dbe8ee6c0b 100644
--- a/java/org/apache/catalina/tribes/io/ReplicationStream.java
+++ b/java/org/apache/catalina/tribes/io/ReplicationStream.java
@@ -32,7 +32,6 @@ import java.lang.reflect.Proxy;
  *
  * @author Craig R. McClanahan
  * @author Bip Thelin
- * @author Filip Hanik
  * @version $Id$
  */
 

==================================================
Constants.java
index 83733345f0..5fe37cdcd0 100644
--- a/java/org/apache/catalina/tribes/io/XByteBuffer.java
+++ b/java/org/apache/catalina/tribes/io/XByteBuffer.java
@@ -42,7 +42,6 @@ import java.util.concurrent.atomic.AtomicInteger;
  * <li><b>DATA</b>      - should be as many bytes as the prev SIZE</li>
  * <li><b>END_DATA</b>  - 7 bytes - <i>TLF2003</i></lI>
  * </ul>
- * @author Filip Hanik
  * @version $Id$
  */
 public class XByteBuffer

==================================================
McastService.java
index 6cf710f2f0..29e3f05b08 100644
--- a/java/org/apache/catalina/tribes/membership/Constants.java
+++ b/java/org/apache/catalina/tribes/membership/Constants.java
@@ -24,7 +24,6 @@ import org.apache.catalina.tribes.util.Arrays;
  *
  * @author Peter Rossbach
  * @version $Id$
- * @author Filip Hanik
  */
 public class Constants {
 

==================================================
McastServiceImpl.java
index a4a71dbf99..59ac89893a 100644
--- a/java/org/apache/catalina/tribes/membership/McastService.java
+++ b/java/org/apache/catalina/tribes/membership/McastService.java
@@ -40,7 +40,6 @@ import org.apache.catalina.tribes.util.UUIDGenerator;
  * This class is responsible for maintaining a list of active cluster nodes in the cluster.
  * If a node fails to send out a heartbeat, the node will be dismissed.
  *
- * @author Filip Hanik
  * @version $Id$
  */
 

==================================================
MemberImpl.java
index 27d9608fd9..2f82be78a8 100644
--- a/java/org/apache/catalina/tribes/membership/McastServiceImpl.java
+++ b/java/org/apache/catalina/tribes/membership/McastServiceImpl.java
@@ -46,7 +46,6 @@ import org.apache.catalina.tribes.util.ExecutorFactory;
  * This is the low level implementation that handles the multicasting sockets.
  * Need to fix this, could use java.nio and only need one thread to send and receive, or
  * just use a timeout on the receive
- * @author Filip Hanik
  * @version $Id$
  */
 public class McastServiceImpl

==================================================
Membership.java
index 62ce8ed095..480223f9de 100644
--- a/java/org/apache/catalina/tribes/membership/MemberImpl.java
+++ b/java/org/apache/catalina/tribes/membership/MemberImpl.java
@@ -31,7 +31,6 @@ import org.apache.catalina.tribes.transport.SenderState;
  * This is the representation of a multicast member.
  * Carries the host, and port of the this or other cluster nodes.
  *
- * @author Filip Hanik
  * @version $Id$
  */
 public class MemberImpl implements Member, java.io.Externalizable {

==================================================
AbstractReplicatedMap.java
index 79652f1292..baa51185c0 100644
--- a/java/org/apache/catalina/tribes/membership/Membership.java
+++ b/java/org/apache/catalina/tribes/membership/Membership.java
@@ -34,7 +34,6 @@ import org.apache.catalina.tribes.Member;
  * This class is responsible for maintaining a list of active cluster nodes in the cluster.
  * If a node fails to send out a heartbeat, the node will be dismissed.
  *
- * @author Filip Hanik
  * @author Peter Rossbach
  * @version $Id$
  */

==================================================
LazyReplicatedMap.java
index 7c6506c196..6381ad915e 100644
--- a/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/AbstractReplicatedMap.java
@@ -47,7 +47,6 @@ import org.apache.juli.logging.LogFactory;
 
 /**
  *
- * @author Filip Hanik
  * @version 1.0
  */
 public abstract class AbstractReplicatedMap<K,V>

==================================================
ReplicatedMap.java
index 7d1d99d3d5..aa48d4f219 100644
--- a/java/org/apache/catalina/tribes/tipis/LazyReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/LazyReplicatedMap.java
@@ -60,7 +60,6 @@ import org.apache.juli.logging.LogFactory;
  * <br><br><b>REMBER TO CALL <code>breakdown()</code> or <code>finalize()</code> when you are done with the map to
  * avoid memory leaks.<br><br>
  * TODO implement periodic sync/transfer thread
- * @author Filip Hanik
  * @version 1.0
  */
 public class LazyReplicatedMap<K,V> extends AbstractReplicatedMap<K,V> {

==================================================
ReplicatedMapEntry.java
index 492aad50fb..b6114f58c9 100644
--- a/java/org/apache/catalina/tribes/tipis/ReplicatedMap.java
+++ b/java/org/apache/catalina/tribes/tipis/ReplicatedMap.java
@@ -40,7 +40,6 @@ import org.apache.catalina.tribes.Member;
  * <br><br><b>REMBER TO CALL <code>breakdown()</code> or <code>finalize()</code> when you are done with the map to
  * avoid memory leaks.<br><br>
  * TODO implement periodic sync/transfer thread
- * @author Filip Hanik
  * @version 1.0
  *
  * TODO memberDisappeared, should do nothing except change map membership

==================================================
AbstractRxTask.java
index 91694a4a7f..d717c9991e 100644
--- a/java/org/apache/catalina/tribes/tipis/ReplicatedMapEntry.java
+++ b/java/org/apache/catalina/tribes/tipis/ReplicatedMapEntry.java
@@ -44,7 +44,6 @@ import java.io.Serializable;
  * <br>
  *
  *
- * @author Filip Hanik
  * @version 1.0
  */
 public interface ReplicatedMapEntry extends Serializable {

==================================================
Constants.java
index 613a28df79..f4f10e4553 100644
--- a/java/org/apache/catalina/tribes/transport/AbstractRxTask.java
+++ b/java/org/apache/catalina/tribes/transport/AbstractRxTask.java
@@ -21,7 +21,6 @@ import org.apache.catalina.tribes.io.ListenCallback;
 
 
 /**
- * @author Filip Hanik
  * @version $Id$
  */
 public abstract class AbstractRxTask implements Runnable

==================================================
MultiPointSender.java
index bbcb7e34d7..9696b0b441 100644
--- a/java/org/apache/catalina/tribes/transport/Constants.java
+++ b/java/org/apache/catalina/tribes/transport/Constants.java
@@ -23,7 +23,6 @@ import org.apache.catalina.tribes.io.XByteBuffer;
 /**
  * Manifest constants for the <code>org.apache.catalina.tribes.transport</code>
  * package.
- * @author Filip Hanik
  * @author Peter Rossbach
  * @version $Id$
  */

==================================================
ReplicationTransmitter.java
index c45460d396..40f0d7979b 100644
--- a/java/org/apache/catalina/tribes/transport/MultiPointSender.java
+++ b/java/org/apache/catalina/tribes/transport/MultiPointSender.java
@@ -21,7 +21,6 @@ import org.apache.catalina.tribes.ChannelMessage;
 import org.apache.catalina.tribes.Member;
 
 /**
- * @author Filip Hanik
  * @version $Id$
  * @since 5.5.16
  */

==================================================
SenderState.java
index de49fbca3a..8b36a51705 100644
--- a/java/org/apache/catalina/tribes/transport/ReplicationTransmitter.java
+++ b/java/org/apache/catalina/tribes/transport/ReplicationTransmitter.java
@@ -27,7 +27,6 @@ import org.apache.catalina.tribes.transport.nio.PooledParallelSender;
  * Actual senders are created based on the replicationMode
  * type
  *
- * @author Filip Hanik
  * @version $Id$
  */
 public class ReplicationTransmitter implements ChannelSender {

==================================================
BioReceiver.java
index 7a0cb30352..c01e2fc76d 100644
--- a/java/org/apache/catalina/tribes/transport/SenderState.java
+++ b/java/org/apache/catalina/tribes/transport/SenderState.java
@@ -24,7 +24,6 @@ import org.apache.catalina.tribes.Member;
 
 /**
  *
- * @author Filip Hanik
  * @version 1.0
  * @since 5.5.16
  */

==================================================
BioReplicationTask.java
index e8c0106229..a449170789 100644
--- a/java/org/apache/catalina/tribes/transport/bio/BioReceiver.java
+++ b/java/org/apache/catalina/tribes/transport/bio/BioReceiver.java
@@ -29,7 +29,6 @@ import org.apache.juli.logging.LogFactory;
 
 /**
  *
- * @author Filip Hanik
  * @version $Id$
  */
 public class BioReceiver extends ReceiverBase implements Runnable {

==================================================
BioSender.java
index 112c990444..a3cbe99e21 100644
--- a/java/org/apache/catalina/tribes/transport/bio/BioReplicationTask.java
+++ b/java/org/apache/catalina/tribes/transport/bio/BioReplicationTask.java
@@ -41,7 +41,6 @@ import org.apache.juli.logging.LogFactory;
  * calls notify() to wake it up. When the channel has been drained, the worker
  * thread returns itself to its parent pool.
  *
- * @author Filip Hanik
  *
  * @version $Id$
  */

==================================================
MultipointBioSender.java
index a0c53ace8b..9e80e7e524 100644
--- a/java/org/apache/catalina/tribes/transport/bio/BioSender.java
+++ b/java/org/apache/catalina/tribes/transport/bio/BioSender.java
@@ -36,7 +36,6 @@ import org.apache.catalina.tribes.util.StringManager;
  * supported
  *
  * @author Peter Rossbach
- * @author Filip Hanik
  * @version $Id$
  * @since 5.5.16
  */

==================================================
LinkObject.java
index 0a610bc22f..b06c0f1f19 100644
--- a/java/org/apache/catalina/tribes/transport/bio/MultipointBioSender.java
+++ b/java/org/apache/catalina/tribes/transport/bio/MultipointBioSender.java
@@ -32,7 +32,6 @@ import org.apache.catalina.tribes.transport.MultiPointSender;
 
 /**
  *
- * @author Filip Hanik
  * @version $Id$
  *
  */

==================================================
NioReceiver.java
index 6fa40dd290..509b36f714 100644
--- a/java/org/apache/catalina/tribes/transport/bio/util/LinkObject.java
+++ b/java/org/apache/catalina/tribes/transport/bio/util/LinkObject.java
@@ -28,7 +28,6 @@ import org.apache.catalina.tribes.group.InterceptorPayload;
  * data object and a pointer to the next element.
  *
  * @author Peter Rossbach
- * @author Filip Hanik
  * @version $Id$
 
  */

==================================================
NioReplicationTask.java
index 9995563fee..1443325769 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioReceiver.java
@@ -42,7 +42,6 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
 /**
- * @author Filip Hanik
  * @version $Id$
  */
 public class NioReceiver extends ReceiverBase implements Runnable {

==================================================
NioSender.java
index 7d51d79c09..520670e409 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioReplicationTask.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioReplicationTask.java
@@ -48,7 +48,6 @@ import org.apache.catalina.tribes.util.Logs;
  * calls notify() to wake it up. When the channel has been drained, the worker
  * thread returns itself to its parent pool.
  *
- * @author Filip Hanik
  *
  * @version $Id$
  */

==================================================
Arrays.java
index 46d802f207..9dbb449d4b 100644
--- a/java/org/apache/catalina/tribes/transport/nio/NioSender.java
+++ b/java/org/apache/catalina/tribes/transport/nio/NioSender.java
@@ -44,7 +44,6 @@ import org.apache.juli.logging.LogFactory;
  * - READY_TO_READ -> read() -> READY_TO_READ | TRANSFER_COMPLETE
  * - TRANSFER_COMPLETE -> CONNECTED
  *
- * @author Filip Hanik
  * @version 1.0
  */
 public class NioSender extends AbstractSender {

==================================================
Logs.java
index 379c5460d7..7c6e078bf7 100644
--- a/java/org/apache/catalina/tribes/util/Arrays.java
+++ b/java/org/apache/catalina/tribes/util/Arrays.java
@@ -28,7 +28,6 @@ import org.apache.catalina.tribes.group.AbsoluteOrder;
 import org.apache.catalina.tribes.membership.Membership;
 
 /**
- * @author Filip Hanik
  * @version 1.0
  */
 public class Arrays {

==================================================
UUIDGenerator.java
index f55cf6d2aa..8d0e5bd23e 100644
--- a/java/org/apache/catalina/tribes/util/Logs.java
+++ b/java/org/apache/catalina/tribes/util/Logs.java
@@ -21,7 +21,6 @@ import org.apache.juli.logging.LogFactory;
 /**
  *
  * Simple class that holds references to global loggers
- * @author Filip Hanik
  * @version 1.0
  */
 public class Logs {

==================================================
Http11NioProcessor.java
index cf52a4d7fb..dbc3459c97 100644
--- a/java/org/apache/catalina/tribes/util/UUIDGenerator.java
+++ b/java/org/apache/catalina/tribes/util/UUIDGenerator.java
@@ -24,7 +24,6 @@ import org.apache.juli.logging.LogFactory;
 
 /**
  * simple generation of a UUID
- * @author Filip Hanik
  * @version 1.0
  */
 public class UUIDGenerator {

==================================================
Http11NioProtocol.java
index 39e01e530a..9ecff60359 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -43,7 +43,6 @@ import org.apache.tomcat.util.net.SocketWrapper;
  * Processes HTTP requests.
  *
  * @author Remy Maucherat
- * @author Filip Hanik
  */
 public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
 

==================================================
InternalNioInputBuffer.java
index 9eb03e07fb..fb7149b992 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -45,7 +45,6 @@ import org.apache.tomcat.util.net.SocketWrapper;
  *
  * @author Remy Maucherat
  * @author Costin Manolache
- * @author Filip Hanik
  */
 public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
 

==================================================
InternalNioOutputBuffer.java
index 76f23c6bd1..49b65e4c17 100644
--- a/java/org/apache/coyote/http11/InternalNioInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioInputBuffer.java
@@ -38,7 +38,6 @@ import org.apache.tomcat.util.net.SocketWrapper;
  * well as transfer decoding.
  *
  * @author <a href="mailto:remm@apache.org">Remy Maucherat</a>
- * @author Filip Hanik
  */
 public class InternalNioInputBuffer extends AbstractInputBuffer<NioChannel> {
 

==================================================
ChunkedInputFilter.java
index 4f994dc527..8c7980a2a4 100644
--- a/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
@@ -37,7 +37,6 @@ import org.apache.tomcat.util.net.SocketWrapper;
  * Output buffer.
  *
  * @author <a href="mailto:remm@apache.org">Remy Maucherat</a>
- * @author Filip Hanik
  */
 public class InternalNioOutputBuffer extends AbstractOutputBuffer<NioChannel> {
 

==================================================
AsyncFileHandler.java
index a5b5ecbee2..3833556dac 100644
--- a/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java
+++ b/java/org/apache/coyote/http11/filters/ChunkedInputFilter.java
@@ -35,7 +35,6 @@ import org.apache.tomcat.util.http.MimeHeaders;
  * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.6.1">http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.6.1</a><br>
  *
  * @author Remy Maucherat
- * @author Filip Hanik
  */
 public class ChunkedInputFilter implements InputFilter {
 

==================================================
DataSourceLinkFactory.java
index dcae386046..df7c11c320 100644
--- a/java/org/apache/juli/AsyncFileHandler.java
+++ b/java/org/apache/juli/AsyncFileHandler.java
@@ -38,7 +38,6 @@ import java.util.logging.LogRecord;
  *
  * <p>See the System Properties page in the configuration reference of Tomcat.</p>
  *
- * @author Filip Hanik
  *
  */
 public class AsyncFileHandler extends FileHandler {

==================================================
NioChannel.java
index 904c482053..09a83efd77 100644
--- a/java/org/apache/naming/factory/DataSourceLinkFactory.java
+++ b/java/org/apache/naming/factory/DataSourceLinkFactory.java
@@ -38,7 +38,6 @@ import javax.sql.DataSource;
 /**
  * <p>Object factory for resource links for shared data sources.</p>
  *
- * @author Filip Hanik
  */
 public class DataSourceLinkFactory extends ResourceLinkFactory {
 

==================================================
NioEndpoint.java
index 33dd55bdd4..4e31ea1c0e 100644
--- a/java/org/apache/tomcat/util/net/NioChannel.java
+++ b/java/org/apache/tomcat/util/net/NioChannel.java
@@ -32,7 +32,6 @@ import org.apache.tomcat.util.net.SecureNioChannel.ApplicationBufferHandler;
  * This way, logic for a SSL socket channel remains the same as for
  * a non SSL, making sure we don't need to code for any exception cases.
  *
- * @author Filip Hanik
  * @version 1.0
  */
 public class NioChannel implements ByteChannel {

==================================================
NioSelectorPool.java
index f9c38d8f3c..8b333d3a02 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -70,7 +70,6 @@ import org.apache.tomcat.util.net.jsse.NioX509KeyManager;
  *
  * @author Mladen Turk
  * @author Remy Maucherat
- * @author Filip Hanik
  */
 public class NioEndpoint extends AbstractEndpoint<NioChannel> {
 

==================================================
SecureNioChannel.java
index 48fc58d14a..6cad1112dd 100644
--- a/java/org/apache/tomcat/util/net/NioSelectorPool.java
+++ b/java/org/apache/tomcat/util/net/NioSelectorPool.java
@@ -32,7 +32,6 @@ import org.apache.juli.logging.LogFactory;
 /**
  *
  * Thread safe non blocking selector pool
- * @author Filip Hanik
  * @version 1.0
  * @since 6.0
  */

==================================================
SocketProperties.java
index 42eb2252ca..d3d67735b2 100644
--- a/java/org/apache/tomcat/util/net/SecureNioChannel.java
+++ b/java/org/apache/tomcat/util/net/SecureNioChannel.java
@@ -32,7 +32,6 @@ import javax.net.ssl.SSLEngineResult.Status;
 /**
  *
  * Implementation of a secure socket channel
- * @author Filip Hanik
  * @version 1.0
  */
 

==================================================
JSSESupport.java
index f937ff2a79..27b364b12d 100644
--- a/java/org/apache/tomcat/util/net/SocketProperties.java
+++ b/java/org/apache/tomcat/util/net/SocketProperties.java
@@ -25,7 +25,6 @@ import java.net.SocketException;
  * in server.xml. All properties are prefixed with &quot;socket.&quot;
  * and are currently only working for the Nio connector
  *
- * @author Filip Hanik
  */
 public class SocketProperties {
     /**

==================================================
Bayeux.java
index 264db9383a..88393beba7 100644
--- a/java/org/apache/tomcat/util/net/jsse/JSSESupport.java
+++ b/java/org/apache/tomcat/util/net/jsse/JSSESupport.java
@@ -47,7 +47,6 @@ import org.apache.tomcat.util.res.StringManager;
 
    @author EKR
    @author Craig R. McClanahan
-   @author Filip Hanik
    Parts cribbed from JSSECertCompat
    Parts cribbed from CertificatesValve
 */

==================================================
Channel.java
index 178d01f49d..a4706341c8 100644
--- a/modules/bayeux/java/org/apache/cometd/bayeux/Bayeux.java
+++ b/modules/bayeux/java/org/apache/cometd/bayeux/Bayeux.java
@@ -42,7 +42,6 @@ import java.util.List;
  * When the webapplication shuts down, the Bayeux object will unsubscribe all clients and remove all the active channels.
  *
  * @author Greg Wilkins
- * @author Filip Hanik
  */
 public interface Bayeux {
 

==================================================
Client.java
index 43e09ee2f8..e5e45f92e9 100644
--- a/modules/bayeux/java/org/apache/cometd/bayeux/Channel.java
+++ b/modules/bayeux/java/org/apache/cometd/bayeux/Channel.java
@@ -26,7 +26,6 @@ import java.util.List;
  * A channel can be created either server side by invoking the getChannel, or client side
  * by using the /meta/subscribe message without a wildcard.
  * @author Greg Wilkins
- * @author Filip Hanik
  */
 public interface Channel
 {

==================================================
DataFilter.java
index dd77d6840d..36da967fdf 100644
--- a/modules/bayeux/java/org/apache/cometd/bayeux/Client.java
+++ b/modules/bayeux/java/org/apache/cometd/bayeux/Client.java
@@ -34,7 +34,6 @@ package org.apache.cometd.bayeux;
  * <li>A java client connected to a remote Bayeux server - not implemented</li>
  * </nl>
  * @author Greg Wilkins
- * @author Filip Hanik
  */
 public interface Client
 {

==================================================
Listener.java
index d8844bbdce..bd04b01334 100644
--- a/modules/bayeux/java/org/apache/cometd/bayeux/DataFilter.java
+++ b/modules/bayeux/java/org/apache/cometd/bayeux/DataFilter.java
@@ -25,7 +25,6 @@ package org.apache.cometd.bayeux;
  * a remote client, and the Bayeux implementation invokes the publish method directly.
  * The second scenario is when a local client invokes {@link Channel#publish(Message)} directly in the local JVM.
  * @author Greg Wilkins
- * @author Filip Hanik
  *
  */
 public interface DataFilter

==================================================
Message.java
index 712603efd0..50e5651477 100644
--- a/modules/bayeux/java/org/apache/cometd/bayeux/Listener.java
+++ b/modules/bayeux/java/org/apache/cometd/bayeux/Listener.java
@@ -22,7 +22,6 @@ package org.apache.cometd.bayeux;
  * when the local client is created using the {@link Bayeux#newClient(String,Listener)} method.
  * This callback object, implementing the Listener interface, is used to deliver messages to local, in JVM, clients.
  * @author Greg Wilkins
- * @author Filip Hanik
  *
  */
 public interface Listener

==================================================
BayeuxException.java
index ef98f8b3bd..7dc7d07a39 100644
--- a/modules/bayeux/java/org/apache/cometd/bayeux/Message.java
+++ b/modules/bayeux/java/org/apache/cometd/bayeux/Message.java
@@ -24,7 +24,6 @@ import java.util.Map;
  * The message contains information about the channel it was published through and who the sender was
  *
  * @author Greg Wilkins
- * @author Filip Hanik
  */
 public interface Message extends Map<String,Object>
 {

==================================================
BayeuxRequest.java
index 124d1762f1..8794e01e82 100644
--- a/modules/bayeux/java/org/apache/tomcat/bayeux/BayeuxException.java
+++ b/modules/bayeux/java/org/apache/tomcat/bayeux/BayeuxException.java
@@ -17,7 +17,6 @@
 package org.apache.tomcat.bayeux;
 /**
  *
- * @author Filip Hanik
  * @version 1.0
  */
 public class BayeuxException extends Exception {

==================================================
BayeuxServlet.java
index 88f602aaa8..d08b713d02 100644
--- a/modules/bayeux/java/org/apache/tomcat/bayeux/BayeuxRequest.java
+++ b/modules/bayeux/java/org/apache/tomcat/bayeux/BayeuxRequest.java
@@ -23,7 +23,6 @@ import org.apache.tomcat.bayeux.HttpError;
  * messages.
  *
  * @author Guy A. Molinari
- * @author Filip Hanik
  * @version 0.9
  */
 public interface BayeuxRequest {

==================================================
ChannelImpl.java
index cc8e4387fa..36fd065483 100644
--- a/modules/bayeux/java/org/apache/tomcat/bayeux/BayeuxServlet.java
+++ b/modules/bayeux/java/org/apache/tomcat/bayeux/BayeuxServlet.java
@@ -35,7 +35,6 @@ import org.apache.cometd.bayeux.Bayeux;
 
 /**
  *
- * @author Filip Hanik
  * @author Guy Molinari
  * @version 1.0
  */

==================================================
RequestBase.java
index 1427467086..f8c1a6982e 100644
--- a/modules/bayeux/java/org/apache/tomcat/bayeux/ChannelImpl.java
+++ b/modules/bayeux/java/org/apache/tomcat/bayeux/ChannelImpl.java
@@ -29,7 +29,6 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 /**
  *
- * @author Filip Hanik
  * @version 1.0
  */
 public class ChannelImpl implements Channel {

==================================================
TomcatBayeux.java
index 1d9721b60f..f2ccfb11b6 100644
--- a/modules/bayeux/java/org/apache/tomcat/bayeux/RequestBase.java
+++ b/modules/bayeux/java/org/apache/tomcat/bayeux/RequestBase.java
@@ -43,7 +43,6 @@ import org.apache.cometd.bayeux.Message;
  * Common functionality and member variables for all Bayeux requests.
  *
  * @author Guy A. Molinari
- * @author Filip Hanik
  * @version 0.9
  *
  */

==================================================
MetaConnectRequest.java
index 3c44951d8e..3ea636ee2a 100644
--- a/modules/bayeux/java/org/apache/tomcat/bayeux/TomcatBayeux.java
+++ b/modules/bayeux/java/org/apache/tomcat/bayeux/TomcatBayeux.java
@@ -31,7 +31,6 @@ import org.apache.cometd.bayeux.Message;
 import org.apache.cometd.bayeux.SecurityPolicy;
 /**
  *
- * @author Filip Hanik
  * @version 1.0
  */
 public class TomcatBayeux implements Bayeux {

==================================================
MetaDisconnectRequest.java
index 3178c9c447..9fcd397f17 100644
--- a/modules/bayeux/java/org/apache/tomcat/bayeux/request/MetaConnectRequest.java
+++ b/modules/bayeux/java/org/apache/tomcat/bayeux/request/MetaConnectRequest.java
@@ -35,7 +35,6 @@ import org.apache.tomcat.bayeux.*;
  * Handshake request Bayeux message.
  *
  * @author Guy A. Molinari
- * @author Filip Hanik
  * @version 1.0
  *
  */

==================================================
MetaHandshakeRequest.java
index b7979601bd..3a7b76e565 100644
--- a/modules/bayeux/java/org/apache/tomcat/bayeux/request/MetaDisconnectRequest.java
+++ b/modules/bayeux/java/org/apache/tomcat/bayeux/request/MetaDisconnectRequest.java
@@ -36,7 +36,6 @@ import org.apache.cometd.bayeux.Channel;
  * Handshake request Bayeux message.
  *
  * @author Guy A. Molinari
- * @author Filip Hanik
  * @version 1.0
  *
  */

==================================================
MetaSubscribeRequest.java
index 8eafe64c48..5ce2566298 100644
--- a/modules/bayeux/java/org/apache/tomcat/bayeux/request/MetaHandshakeRequest.java
+++ b/modules/bayeux/java/org/apache/tomcat/bayeux/request/MetaHandshakeRequest.java
@@ -35,7 +35,6 @@ import org.apache.tomcat.bayeux.*;
  * Handshake request Bayeux message.
  *
  * @author Guy A. Molinari
- * @author Filip Hanik
  * @version 1.0
  *
  */

==================================================
MetaUnsubscribeRequest.java
index 252c50df2a..b37a46f966 100644
--- a/modules/bayeux/java/org/apache/tomcat/bayeux/request/MetaSubscribeRequest.java
+++ b/modules/bayeux/java/org/apache/tomcat/bayeux/request/MetaSubscribeRequest.java
@@ -39,7 +39,6 @@ import org.apache.tomcat.bayeux.*;
  * Handshake request Bayeux message.
  *
  * @author Guy A. Molinari
- * @author Filip Hanik
  * @version 1.0
  */
 public class MetaSubscribeRequest extends RequestBase implements BayeuxRequest {

==================================================
PublishRequest.java
index dd0a34dbd6..38401ed79d 100644
--- a/modules/bayeux/java/org/apache/tomcat/bayeux/request/MetaUnsubscribeRequest.java
+++ b/modules/bayeux/java/org/apache/tomcat/bayeux/request/MetaUnsubscribeRequest.java
@@ -39,7 +39,6 @@ import org.apache.tomcat.bayeux.*;
  * Handshake request Bayeux message.
  *
  * @author Guy A. Molinari
- * @author Filip Hanik
  * @version 1.0
  *
  */

==================================================
ConnectionPool.java
index 962036358f..afb5343cb4 100644
--- a/modules/bayeux/java/org/apache/tomcat/bayeux/request/PublishRequest.java
+++ b/modules/bayeux/java/org/apache/tomcat/bayeux/request/PublishRequest.java
@@ -38,7 +38,6 @@ import org.apache.juli.logging.LogFactory;
  * Handshake request Bayeux message.
  *
  * @author Guy A. Molinari
- * @author Filip Hanik
  * @version 1.0
  *
  */

==================================================
DataSource.java
index 0b2dcdb4b3..c20efd837f 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java
@@ -50,7 +50,6 @@ import org.apache.juli.logging.LogFactory;
  * The ConnectionPool uses a {@link PoolProperties} object for storing all the meta information about the connection pool.
  * As the underlying implementation, the connection pool uses {@link java.util.concurrent.BlockingQueue} to store active and idle connections.
  * A custom implementation of a fair {@link FairBlockingQueue} blocking queue is provided with the connection pool itself.
- * @author Filip Hanik
  * @version 1.0
  */
 

==================================================
DataSourceFactory.java
index b38a4ba14c..ad2ac0aa01 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSource.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSource.java
@@ -33,7 +33,6 @@ import org.apache.juli.logging.LogFactory;
  * A DataSource that can be instantiated through IoC and implements the DataSource interface
  * since the DataSourceProxy is used as a generic proxy.
  * The DataSource simply wraps a {@link ConnectionPool} in order to provide a standard interface to the user.
- * @author Filip Hanik
  * @version 1.0
  */
 public class DataSource extends DataSourceProxy implements javax.sql.DataSource,MBeanRegistration, org.apache.tomcat.jdbc.pool.jmx.ConnectionPoolMBean, javax.sql.ConnectionPoolDataSource {

==================================================
DataSourceProxy.java
index 4db76e2645..bd12438547 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java
@@ -53,7 +53,6 @@ import org.apache.juli.logging.LogFactory;
  *</ol>
  * @author Craig R. McClanahan
  * @author Dirk Verbeeck
- * @author Filip Hanik
  */
 public class DataSourceFactory implements ObjectFactory {
     private static final Log log = LogFactory.getLog(DataSourceFactory.class);

==================================================
FairBlockingQueue.java
index 6f14a2027e..5d12af34ca 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java
@@ -40,7 +40,6 @@ import org.apache.tomcat.jdbc.pool.PoolProperties.InterceptorDefinition;
  * I could put in Java 6 methods of javax.sql.DataSource here, and compile it with JDK 1.5
  * and still be able to run under Java 6 without getting NoSuchMethodException.
  *
- * @author Filip Hanik
  * @version 1.0
  */
 

==================================================
JdbcInterceptor.java
index a84a6728d6..9e553b348f 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/FairBlockingQueue.java
@@ -36,7 +36,6 @@ import java.util.concurrent.locks.ReentrantLock;
  * lock per thread basis so that order is guaranteed once the thread goes into a suspended monitor state.
  * <br/>
  * Not all of the methods of the {@link java.util.concurrent.BlockingQueue} are implemented.
- * @author Filip Hanik
  *
  */
 

==================================================
MultiLockFairBlockingQueue.java
index 6505a7a0d2..18e6d544d9 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/JdbcInterceptor.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/JdbcInterceptor.java
@@ -32,7 +32,6 @@ import org.apache.tomcat.jdbc.pool.PoolProperties.InterceptorProperty;
  * Properties arrive in a key-value pair of Strings as they were received through the configuration.
  * This method is called once per cached connection object when the object is first configured.
  *
- * @author Filip Hanik
  * @version 1.0
  */
 public abstract class JdbcInterceptor implements InvocationHandler {

==================================================
PoolProperties.java
index 7e6443ccb5..6f37da68b9 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/MultiLockFairBlockingQueue.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/MultiLockFairBlockingQueue.java
@@ -40,7 +40,6 @@ import java.util.concurrent.locks.ReentrantLock;
  * lock per thread basis so that order is guaranteed once the thread goes into a suspended monitor state.
  * <br/>
  * Not all of the methods of the {@link java.util.concurrent.BlockingQueue} are implemented.
- * @author Filip Hanik
  *
  */
 

==================================================
PooledConnection.java
index 9c024c1ffc..293fda3c99 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java
@@ -32,7 +32,6 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 
 /**
- * @author Filip Hanik
  *
  */
 public class PoolProperties implements PoolConfiguration, Cloneable, Serializable {

==================================================
ProxyConnection.java
index a53d06962b..b3ab8185f4 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java
@@ -31,7 +31,6 @@ import org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;
 /**
  * Represents a pooled connection
  * and holds a reference to the {@link java.sql.Connection} object
- * @author Filip Hanik
  * @version 1.0
  */
 public class PooledConnection {

==================================================
AbstractCreateStatementInterceptor.java
index 4361aef569..b6c0cc3ab6 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ProxyConnection.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ProxyConnection.java
@@ -31,7 +31,6 @@ import javax.sql.XAConnection;
  * </ul>
  * By default method comparisons is done on a String reference level, unless the {@link PoolConfiguration#setUseEquals(boolean)} has been called
  * with a <code>true</code> argument.
- * @author Filip Hanik
  */
 public class ProxyConnection extends JdbcInterceptor {
 

==================================================
SlowQueryReport.java
index 60fc7515da..98b4dc429e 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractCreateStatementInterceptor.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/AbstractCreateStatementInterceptor.java
@@ -26,7 +26,6 @@ import org.apache.tomcat.jdbc.pool.PooledConnection;
  * Abstraction interceptor. This component intercepts all calls to create some type of SQL statement.
  * By extending this class, one can intercept queries and update statements by overriding the {@link #createStatement(Object, Method, Object[], Object, long)}
  * method.
- * @author Filip Hanik
  * @version 1.0
  */
 public abstract class  AbstractCreateStatementInterceptor extends JdbcInterceptor {

==================================================
ConnectionPool.java
index 5747014802..1d832693cf 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java
@@ -37,7 +37,6 @@ import org.apache.tomcat.jdbc.pool.PooledConnection;
 
 /**
  * Slow query report interceptor. Tracks timing of query executions.
- * @author Filip Hanik
  * @version 1.0
  */
 public class SlowQueryReport extends AbstractQueryReport  {

==================================================
DefaultProperties.java
index b9364c9e8d..e830e1c550 100644
--- a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java
+++ b/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java
@@ -15,7 +15,6 @@
  */
 package org.apache.tomcat.jdbc.pool.jmx;
 /**
- * @author Filip Hanik
  */
 import java.util.Properties;
 import java.util.concurrent.ConcurrentLinkedQueue;

==================================================
DefaultTestCase.java
index 21a3080976..17b85ccb47 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/DefaultProperties.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/DefaultProperties.java
@@ -22,7 +22,6 @@ import org.apache.tomcat.jdbc.pool.DataSourceFactory;
 import org.apache.tomcat.jdbc.pool.PoolProperties;
 
 /**
- * @author Filip Hanik
  * @version 1.0
  */
 public class DefaultProperties extends PoolProperties {

==================================================
TestGroupChannelStartStop.java
index eacf6e1c50..1a8ec9c499 100644
--- a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/DefaultTestCase.java
+++ b/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/DefaultTestCase.java
@@ -32,7 +32,6 @@ import org.apache.tomcat.jdbc.pool.PoolProperties;
 //import com.mchange.v2.log.MLog;
 
 /**
- * @author Filip Hanik
  * @version 1.0
  */
 public abstract class DefaultTestCase {

==================================================
