37bc60c9efed390f662afe0a1d12d2ba0d91ada8
==================================================
Implement the new page/tag directive errorOnELNotFound
==================================================
Mark Thomas
==================================================
Thu Sep 23 21:09:52 2021 +0100
==================================================
Compiler.java
index 0e5eba0b36..4cad6bb2bc 100644
--- a/java/jakarta/servlet/jsp/resources/jspxml.xsd
+++ b/java/jakarta/servlet/jsp/resources/jspxml.xsd
@@ -333,6 +333,7 @@
       <xsd:attribute name = "errorPage" type = "RelativeURL"/>
       <xsd:attribute name = "isErrorPage" default = "false" type = "Bool"/>
       <xsd:attribute name = "isELIgnored" type = "Bool"/>
+      <xsd:attribute name = "errorOnELNotFound" default = "false" type = "Bool"/>
     </xsd:complexType>
   </xsd:element>
 

==================================================
Generator.java
index 7da6055460..b38edae2be 100644
--- a/java/org/apache/jasper/compiler/Compiler.java
+++ b/java/org/apache/jasper/compiler/Compiler.java
@@ -132,6 +132,10 @@ public abstract class Compiler {
             pageInfo.setELIgnored(JspUtil.booleanValue(jspProperty
                     .isELIgnored()));
         }
+        if (jspProperty.getErrorOnELNotFound() != null) {
+            pageInfo.setErrorOnELNotFound(JspUtil.booleanValue(jspProperty
+                    .getErrorOnELNotFound()));
+        }
         if (jspProperty.isScriptingInvalid() != null) {
             pageInfo.setScriptingInvalid(JspUtil.booleanValue(jspProperty
                     .isScriptingInvalid()));

==================================================
JspConfig.java
index 61eec0c52f..2872e016c2 100644
--- a/java/org/apache/jasper/compiler/Generator.java
+++ b/java/org/apache/jasper/compiler/Generator.java
@@ -700,6 +700,17 @@ class Generator {
         out.printil("}");
         out.println();
 
+        // Implement JspSourceDirectives
+        out.printil("public boolean getErrorOnELNotFound() {");
+        out.pushIndent();
+        if (pageInfo.isErrorOnELNotFound()) {
+            out.printil("return true;");
+        } else {
+            out.printil("return false;");
+        }
+        out.popIndent();
+        out.printil("}");
+        out.println();
 
         generateGetters();
         generateInit();
@@ -733,6 +744,8 @@ class Generator {
             out.println(",");
             out.printin("                 jakarta.servlet.SingleThreadModel");
         }
+        out.println(",");
+        out.printin("                 org.apache.jasper.runtime.JspSourceDirectives");
         out.println(" {");
         out.pushIndent();
 
@@ -3652,6 +3665,8 @@ class Generator {
             out.println(",");
             out.printin("               jakarta.servlet.jsp.tagext.DynamicAttributes");
         }
+        out.println(",");
+        out.printin("                 org.apache.jasper.runtime.JspSourceDirectives");
         out.println(" {");
         out.pushIndent();
 

==================================================
PageInfo.java
index f63109ae8e..7cb3b644e6 100644
--- a/java/org/apache/jasper/compiler/JspConfig.java
+++ b/java/org/apache/jasper/compiler/JspConfig.java
@@ -46,6 +46,7 @@ public class JspConfig {
 
     private static final String defaultIsXml = null;    // unspecified
     private String defaultIsELIgnored = null;           // unspecified
+    private String defaultErrorOnELNotFound = "false";
     private static final String defaultIsScriptingInvalid = null;
     private String defaultDeferedSyntaxAllowedAsLiteral = null;
     private static final String defaultTrimDirectiveWhitespaces = null;
@@ -96,6 +97,7 @@ public class JspConfig {
 
             JspProperty property = new JspProperty(jspPropertyGroup.getIsXml(),
                     jspPropertyGroup.getElIgnored(),
+                    jspPropertyGroup.getErrorOnELNotFound(),
                     jspPropertyGroup.getScriptingInvalid(),
                     jspPropertyGroup.getPageEncoding(),
                     jspPropertyGroup.getIncludePreludes(),
@@ -164,6 +166,7 @@ public class JspConfig {
                     processWebDotXml();
                     defaultJspProperty = new JspProperty(defaultIsXml,
                             defaultIsELIgnored,
+                            defaultErrorOnELNotFound,
                             defaultIsScriptingInvalid,
                             null, null, null,
                             defaultDeferedSyntaxAllowedAsLiteral,
@@ -245,6 +248,7 @@ public class JspConfig {
 
         JspPropertyGroup isXmlMatch = null;
         JspPropertyGroup elIgnoredMatch = null;
+        JspPropertyGroup errorOnELNotFoundMatch = null;
         JspPropertyGroup scriptingInvalidMatch = null;
         JspPropertyGroup pageEncodingMatch = null;
         JspPropertyGroup deferedSyntaxAllowedAsLiteralMatch = null;
@@ -296,6 +300,9 @@ public class JspConfig {
             if (jp.isELIgnored() != null) {
                 elIgnoredMatch = selectProperty(elIgnoredMatch, jpg);
             }
+            if (jp.getErrorOnELNotFound() != null) {
+                errorOnELNotFoundMatch = selectProperty(errorOnELNotFoundMatch, jpg);
+            }
             if (jp.isScriptingInvalid() != null) {
                 scriptingInvalidMatch =
                     selectProperty(scriptingInvalidMatch, jpg);
@@ -327,6 +334,7 @@ public class JspConfig {
 
         String isXml = defaultIsXml;
         String isELIgnored = defaultIsELIgnored;
+        String errorOnELNotFound = defaultErrorOnELNotFound;
         String isScriptingInvalid = defaultIsScriptingInvalid;
         String pageEncoding = null;
         String isDeferedSyntaxAllowedAsLiteral = defaultDeferedSyntaxAllowedAsLiteral;
@@ -338,6 +346,9 @@ public class JspConfig {
         if (isXmlMatch != null) {
             isXml = isXmlMatch.getJspProperty().isXml();
         }
+        if (errorOnELNotFoundMatch != null) {
+            errorOnELNotFound = errorOnELNotFoundMatch.getJspProperty().getErrorOnELNotFound();
+        }
         if (elIgnoredMatch != null) {
             isELIgnored = elIgnoredMatch.getJspProperty().isELIgnored();
         }
@@ -368,7 +379,7 @@ public class JspConfig {
                 errorOnUndeclaredNamespaceMatch.getJspProperty().isErrorOnUndeclaredNamespace();
         }
 
-        return new JspProperty(isXml, isELIgnored, isScriptingInvalid,
+        return new JspProperty(isXml, isELIgnored, errorOnELNotFound, isScriptingInvalid,
                 pageEncoding, includePreludes, includeCodas,
                 isDeferedSyntaxAllowedAsLiteral, isTrimDirectiveWhitespaces,
                 defaultContentType, buffer, errorOnUndeclaredNamespace);
@@ -448,6 +459,7 @@ public class JspConfig {
 
         private final String isXml;
         private final String elIgnored;
+        private final String errorOnELNotFound;
         private final String scriptingInvalid;
         private final String pageEncoding;
         private final Collection<String> includePrelude;
@@ -458,7 +470,7 @@ public class JspConfig {
         private final String buffer;
         private final String errorOnUndeclaredNamespace;
 
-        public JspProperty(String isXml, String elIgnored,
+        public JspProperty(String isXml, String elIgnored, String errorOnELNotFound,
                 String scriptingInvalid, String pageEncoding,
                 Collection<String> includePrelude, Collection<String> includeCoda,
                 String deferedSyntaxAllowedAsLiteral,
@@ -469,6 +481,7 @@ public class JspConfig {
 
             this.isXml = isXml;
             this.elIgnored = elIgnored;
+            this.errorOnELNotFound = errorOnELNotFound;
             this.scriptingInvalid = scriptingInvalid;
             this.pageEncoding = pageEncoding;
             this.includePrelude = includePrelude;
@@ -488,6 +501,10 @@ public class JspConfig {
             return elIgnored;
         }
 
+        public String getErrorOnELNotFound() {
+            return errorOnELNotFound;
+        }
+
         public String isScriptingInvalid() {
             return scriptingInvalid;
         }

==================================================
TagFileProcessor.java
index 464a5c91c1..5c0a2c0f68 100644
--- a/java/org/apache/jasper/compiler/PageInfo.java
+++ b/java/org/apache/jasper/compiler/PageInfo.java
@@ -100,6 +100,10 @@ class PageInfo {
     // JSP 2.2
     private boolean errorOnUndeclaredNamespace = false;
 
+    // JSP 3.1
+    private String errorOnELNotFoundValue;
+    private boolean errorOnELNotFound = false;
+
     private final boolean isTagFile;
 
     PageInfo(BeanRepository beanRepository, JspCompilationContext ctxt) {
@@ -635,6 +639,30 @@ class PageInfo {
         isELIgnoredValue = value;
     }
 
+
+    /*
+     * errorOnELNotFound
+     */
+    public void setErrorOnELNotFound(String value, Node n, ErrorDispatcher err,
+                   boolean pagedir)
+        throws JasperException {
+
+        if ("true".equalsIgnoreCase(value)) {
+            errorOnELNotFound = true;
+        } else if ("false".equalsIgnoreCase(value)) {
+            errorOnELNotFound = false;
+        } else {
+            if (pagedir) {
+                err.jspError(n, "jsp.error.page.invalid.errorOnELNotFound");
+            } else {
+                err.jspError(n, "jsp.error.tag.invalid.errorOnELNotFound");
+            }
+        }
+
+        errorOnELNotFoundValue = value;
+    }
+
+
     /*
      * deferredSyntaxAllowedAsLiteral
      */
@@ -691,6 +719,18 @@ class PageInfo {
         return isELIgnored;
     }
 
+    public void setErrorOnELNotFound(boolean s) {
+        errorOnELNotFound = s;
+    }
+
+    public String getErrorOnELNotFound() {
+        return errorOnELNotFoundValue;
+    }
+
+    public boolean isErrorOnELNotFound() {
+        return errorOnELNotFound;
+    }
+
     public void putNonCustomTagPrefix(String prefix, Mark where) {
         nonCustomTagPrefixMap.put(prefix, where);
     }

==================================================
Validator.java
index e6a1773c6f..e1ed7c13f7 100644
--- a/java/org/apache/jasper/compiler/TagFileProcessor.java
+++ b/java/org/apache/jasper/compiler/TagFileProcessor.java
@@ -68,7 +68,8 @@ class TagFileProcessor {
                 new JspUtil.ValidAttribute("import"),
                 new JspUtil.ValidAttribute("deferredSyntaxAllowedAsLiteral"), // JSP 2.1
                 new JspUtil.ValidAttribute("trimDirectiveWhitespaces"), // JSP 2.1
-                new JspUtil.ValidAttribute("isELIgnored") };
+                new JspUtil.ValidAttribute("isELIgnored"),
+                new JspUtil.ValidAttribute("errorOnELNotFound") };
 
         private static final JspUtil.ValidAttribute[] attributeDirectiveAttrs = {
                 new JspUtil.ValidAttribute("name", true),

==================================================
JspContextWrapper.java
index 898e173b60..3a0f990976 100644
--- a/java/org/apache/jasper/resources/LocalStrings.properties
+++ b/java/org/apache/jasper/resources/LocalStrings.properties
@@ -143,6 +143,7 @@ jsp.error.page.conflict.autoflush=Page directive: illegal to have multiple occur
 jsp.error.page.conflict.buffer=Page directive: illegal to have multiple occurrences of ''buffer'' with different values (old: [{0}], new: [{1}])
 jsp.error.page.conflict.contenttype=Page directive: illegal to have multiple occurrences of ''contentType'' with different values (old: [{0}], new: [{1}])
 jsp.error.page.conflict.deferredsyntaxallowedasliteral=Page directive: illegal to have multiple occurrences of ''deferredSyntaxAllowedAsLiteral'' with different values (old: [{0}], new: [{1}])
+jsp.error.page.conflict.errorOnELNotFound=Page directive: illegal to have multiple occurrences of ''errorOnELNotFound'' with different values (old: [{0}], new: [{1}])
 jsp.error.page.conflict.errorpage=Page directive: illegal to have multiple occurrences of ''errorPage'' with different values (old: [{0}], new: [{1}])
 jsp.error.page.conflict.extends=Page directive: illegal to have multiple occurrences of ''extends'' with different values (old: [{0}], new: [{1}])
 jsp.error.page.conflict.info=Page directive: illegal to have multiple occurrences of ''info'' with different values (old: [{0}], new: [{1}])
@@ -154,6 +155,7 @@ jsp.error.page.conflict.session=Page directive: illegal to have multiple occurre
 jsp.error.page.conflict.trimdirectivewhitespaces=Page directive: illegal to have multiple occurrences of ''trimDirectiveWhitespaces'' with different values (old: [{0}], new: [{1}])
 jsp.error.page.invalid.buffer=Page directive: invalid value for buffer
 jsp.error.page.invalid.deferredsyntaxallowedasliteral=Page directive: invalid value for deferredSyntaxAllowedAsLiteral
+jsp.error.page.invalid.errorOnELNotFound=Page directive: invalid value for errorOnELNotFound
 jsp.error.page.invalid.import=Page directive: invalid value for import
 jsp.error.page.invalid.iselignored=Page directive: invalid value for isELIgnored
 jsp.error.page.invalid.iserrorpage=Page directive: invalid value for isErrorPage
@@ -200,10 +202,12 @@ jsp.error.stream.closed=Stream closed
 jsp.error.string_interpreter_class.instantiation=Failed to load or instantiate StringInterpreter class [{0}]
 jsp.error.tag.conflict.attr=Tag directive: illegal to have multiple occurrences of the attribute [{0}] with different values (old: [{1}], new: [{2}])
 jsp.error.tag.conflict.deferredsyntaxallowedasliteral=Tag directive: illegal to have multiple occurrences of ''deferredSyntaxAllowedAsLiteral'' with different values (old: [{0}], new: [{1}])
+jsp.error.tag.conflict.errorOnELNotFound=Tag directive: illegal to have multiple occurrences of ''errorOnELNotFound'' with different values (old: [{0}], new: [{1}])
 jsp.error.tag.conflict.iselignored=Tag directive: illegal to have multiple occurrences of ''isELIgnored'' with different values (old: [{0}], new: [{1}])
 jsp.error.tag.conflict.language=Tag directive: illegal to have multiple occurrences of ''language'' with different values (old: [{0}], new: [{1}])
 jsp.error.tag.conflict.trimdirectivewhitespaces=Tag directive: illegal to have multiple occurrences of ''trimDirectiveWhitespaces'' with different values (old: [{0}], new: [{1}])
 jsp.error.tag.invalid.deferredsyntaxallowedasliteral=Tag directive: invalid value for deferredSyntaxAllowedAsLiteral
+jsp.error.tag.invalid.errorOnELNotFound=Tag directive: invalid value for errorOnELNotFound
 jsp.error.tag.invalid.iselignored=Tag directive: invalid value for isELIgnored
 jsp.error.tag.invalid.trimdirectivewhitespaces=Tag directive: invalid value for trimDirectiveWhitespaces
 jsp.error.tag.language.nonjava=Tag directive: invalid language attribute

==================================================
JspSourceDirectives.java
index 718c8032af..a7820a76e2 100644
--- a/java/org/apache/jasper/runtime/JspContextWrapper.java
+++ b/java/org/apache/jasper/runtime/JspContextWrapper.java
@@ -48,6 +48,7 @@ import jakarta.servlet.jsp.JspWriter;
 import jakarta.servlet.jsp.PageContext;
 import jakarta.servlet.jsp.el.ELException;
 import jakarta.servlet.jsp.el.ExpressionEvaluator;
+import jakarta.servlet.jsp.el.NotFoundELResolver;
 import jakarta.servlet.jsp.el.VariableResolver;
 import jakarta.servlet.jsp.tagext.BodyContent;
 import jakarta.servlet.jsp.tagext.JspTag;
@@ -563,6 +564,14 @@ public class JspContextWrapper extends PageContext implements VariableResolver {
             if (key == JspContext.class) {
                 return pageContext;
             }
+            if (key == NotFoundELResolver.class) {
+                if (jspTag instanceof JspSourceDirectives) {
+                    return Boolean.valueOf(((JspSourceDirectives) jspTag).getErrorOnELNotFound());
+                } else {
+                    // returning Boolean.FALSE would have the same effect
+                    return null;
+                }
+            }
             return wrapped.getContext(key);
         }
 

==================================================
PageContextImpl.java
new file mode 100644
index 0000000000..cb531ac8d2
--- /dev/null
+++ b/java/org/apache/jasper/runtime/JspSourceDirectives.java
@@ -0,0 +1,27 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.jasper.runtime;
+
+/**
+ * Provides runtime access to selected compile time directives. Page directives
+ * are not added to this interface until there is a requirement to access them
+ *  at runtime.
+ */
+public interface JspSourceDirectives {
+
+    boolean getErrorOnELNotFound();
+}

==================================================
JspPropertyGroup.java
index 1477013788..3000439ada 100644
--- a/java/org/apache/jasper/runtime/PageContextImpl.java
+++ b/java/org/apache/jasper/runtime/PageContextImpl.java
@@ -43,6 +43,7 @@ import jakarta.servlet.jsp.JspException;
 import jakarta.servlet.jsp.JspFactory;
 import jakarta.servlet.jsp.JspWriter;
 import jakarta.servlet.jsp.PageContext;
+import jakarta.servlet.jsp.el.NotFoundELResolver;
 import jakarta.servlet.jsp.tagext.BodyContent;
 
 import org.apache.jasper.Constants;
@@ -721,6 +722,11 @@ public class PageContextImpl extends PageContext {
                     }
                 }
             }
+            if (servlet instanceof JspSourceDirectives) {
+                if (((JspSourceDirectives) servlet).getErrorOnELNotFound()) {
+                    elContext.putContext(NotFoundELResolver.class, Boolean.TRUE);
+                }
+            }
         }
         return this.elContext;
     }

==================================================
JspPropertyGroupDescriptorImpl.java
index 9246c6091e..07f3dd3697 100644
--- a/java/org/apache/tomcat/util/descriptor/web/JspPropertyGroup.java
+++ b/java/org/apache/tomcat/util/descriptor/web/JspPropertyGroup.java
@@ -34,6 +34,12 @@ public class JspPropertyGroup extends XmlEncodingBase {
     }
     public Boolean getDeferredSyntax() { return deferredSyntax; }
 
+    private Boolean errorOnELNotFound = null;
+    public void setErrorOnELNotFound(String errorOnELNotFound) {
+        this.errorOnELNotFound = Boolean.valueOf(errorOnELNotFound);
+    }
+    public Boolean getErrorOnELNotFound() { return errorOnELNotFound; }
+
     private Boolean elIgnored = null;
     public void setElIgnored(String elIgnored) {
         this.elIgnored = Boolean.valueOf(elIgnored);

==================================================
WebRuleSet.java
index 4785ee21c8..0f67f613b8 100644
--- a/java/org/apache/tomcat/util/descriptor/web/JspPropertyGroupDescriptorImpl.java
+++ b/java/org/apache/tomcat/util/descriptor/web/JspPropertyGroupDescriptorImpl.java
@@ -71,6 +71,18 @@ public class JspPropertyGroupDescriptorImpl
     }
 
 
+    @Override
+    public String getErrorOnELNotFound() {
+        String result = null;
+
+        if (jspPropertyGroup.getErrorOnELNotFound() != null) {
+            result = jspPropertyGroup.getErrorOnELNotFound().toString();
+        }
+
+        return result;
+    }
+
+
     @Override
     public String getErrorOnUndeclaredNamespace() {
         String result = null;

==================================================
TestJspConfig.java
index 2472aae417..ba3bd5313b 100644
--- a/java/org/apache/tomcat/util/descriptor/web/WebRuleSet.java
+++ b/java/org/apache/tomcat/util/descriptor/web/WebRuleSet.java
@@ -283,6 +283,8 @@ public class WebRuleSet implements RuleSet {
                                "setDeferredSyntax", 0);
         digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/el-ignored",
                                "setElIgnored", 0);
+        digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/error-on-el-not-found",
+                               "setErrorOnELNotFound", 0);
         digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/include-coda",
                                "addIncludeCoda", 0);
         digester.addCallMethod(fullPrefix + "/jsp-config/jsp-property-group/include-prelude",

==================================================
TestJspCServletContext.java
index 9389c2cf03..64f6d0c092 100644
--- a/test/org/apache/jasper/compiler/TestJspConfig.java
+++ b/test/org/apache/jasper/compiler/TestJspConfig.java
@@ -18,6 +18,8 @@ package org.apache.jasper.compiler;
 
 import java.io.File;
 
+import jakarta.servlet.http.HttpServletResponse;
+
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -192,4 +194,147 @@ public class TestJspConfig extends TomcatBaseTest {
 
         Assert.assertTrue(result.indexOf("<p>00-hello world</p>") > 0);
     }
+
+    @Test
+    public void testErrorOnELNotFound01() throws Exception {
+        // Defaults
+
+        Tomcat tomcat = getTomcatInstance();
+
+        File appDir = new File("test/webapp");
+        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
+
+        tomcat.start();
+
+        ByteChunk res = new ByteChunk();
+        int rc = getUrl("http://localhost:" + getPort() + "/test/jsp/errorOnELNotFound/default.jsp", res, null);
+
+        Assert.assertEquals(HttpServletResponse.SC_OK, rc);
+
+        String result = res.toString();
+        Assert.assertTrue(result, result.indexOf("<p>00-OK</p>") > 0);
+    }
+
+    @Test
+    public void testErrorOnELNotFound02() throws Exception {
+        // Page directive true
+
+        Tomcat tomcat = getTomcatInstance();
+
+        File appDir = new File("test/webapp");
+        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
+
+        tomcat.start();
+
+        ByteChunk res = new ByteChunk();
+        int rc = getUrl("http://localhost:" + getPort() + "/test/jsp/errorOnELNotFound/page-directive-true.jsp", res, null);
+
+        Assert.assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, rc);
+
+        // Look for the non-i18n part of the Exception message
+        String result = res.toString();
+        Assert.assertTrue(result, result.indexOf("[unknown]") > 0);
+    }
+
+    @Test
+    public void testErrorOnELNotFound03() throws Exception {
+        // Page directive false
+
+        Tomcat tomcat = getTomcatInstance();
+
+        File appDir = new File("test/webapp");
+        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
+
+        tomcat.start();
+
+        ByteChunk res = new ByteChunk();
+        int rc = getUrl("http://localhost:" + getPort() + "/test/jsp/errorOnELNotFound/page-directive-false.jsp", res, null);
+
+        Assert.assertEquals(HttpServletResponse.SC_OK, rc);
+
+        String result = res.toString();
+        Assert.assertTrue(result, result.indexOf("<p>00-OK</p>") > 0);
+    }
+
+    @Test
+    public void testErrorOnELNotFound04() throws Exception {
+        // web.xml true
+
+        Tomcat tomcat = getTomcatInstance();
+
+        File appDir = new File("test/webapp");
+        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
+
+        tomcat.start();
+
+        ByteChunk res = new ByteChunk();
+        int rc = getUrl("http://localhost:" + getPort() + "/test/jsp/errorOnELNotFound/web-xml-true.jsp", res, null);
+
+        Assert.assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, rc);
+
+        // Look for the non-i18n part of the Exception message
+        String result = res.toString();
+        Assert.assertTrue(result, result.indexOf("[unknown]") > 0);
+    }
+
+    @Test
+    public void testErrorOnELNotFound05() throws Exception {
+        // web.xml false
+
+        Tomcat tomcat = getTomcatInstance();
+
+        File appDir = new File("test/webapp");
+        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
+
+        tomcat.start();
+
+        ByteChunk res = new ByteChunk();
+        int rc = getUrl("http://localhost:" + getPort() + "/test/jsp/errorOnELNotFound/web-xml-false.jsp", res, null);
+
+        Assert.assertEquals(HttpServletResponse.SC_OK, rc);
+
+        String result = res.toString();
+        Assert.assertTrue(result, result.indexOf("<p>00-OK</p>") > 0);
+    }
+
+    @Test
+    public void testErrorOnELNotFound06() throws Exception {
+        // tag file true
+
+        Tomcat tomcat = getTomcatInstance();
+
+        File appDir = new File("test/webapp");
+        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
+
+        tomcat.start();
+
+        ByteChunk res = new ByteChunk();
+        int rc = getUrl("http://localhost:" + getPort() + "/test/jsp/errorOnELNotFound/tag-file-true.jsp", res, null);
+
+        Assert.assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, rc);
+
+        // Look for the non-i18n part of the Exception message
+        String result = res.toString();
+        Assert.assertTrue(result, result.indexOf("[unknown]") > 0);
+    }
+
+    @Test
+    public void testErrorOnELNotFound07() throws Exception {
+        // tag file false
+
+        Tomcat tomcat = getTomcatInstance();
+
+        File appDir = new File("test/webapp");
+        tomcat.addWebapp(null, "/test", appDir.getAbsolutePath());
+
+        tomcat.start();
+
+        ByteChunk res = new ByteChunk();
+        int rc = getUrl("http://localhost:" + getPort() + "/test/jsp/errorOnELNotFound/tag-file-false.jsp", res, null);
+
+        Assert.assertEquals(HttpServletResponse.SC_OK, rc);
+
+        String result = res.toString();
+        Assert.assertTrue(result, result.indexOf("<p>00-OK</p>") > 0);
+    }
 }

==================================================
