4f023037b6d9549a54b07ad5a9a5c1ec64675893
==================================================
Implement a very basic (you can only specify the path at the moment) server push mechanism.
==================================================
Mark Thomas
==================================================
Wed Oct 14 14:29:31 2015 +0000
==================================================
PushBuilder.java
Implement a very basic (you can only specify the path at the moment) server push mechanism.
Add an example to the examples web app that shows how to use it.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1708605 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ApplicationPushBuilder.java
index c4c49895e8..58639dd47e 100644
--- a/java/javax/servlet/http/PushBuilder.java
+++ b/java/javax/servlet/http/PushBuilder.java
@@ -18,9 +18,32 @@ package javax.servlet.http;
 
 /**
  * Builds a push request based on the {@link HttpServletRequest} from which this
- * builder was obtained.
+ * builder was obtained. The push request will be constructed on the following
+ * basis:
+ * <ul>
+ * <li>The request method is set to <code>GET</code></li>
+ * <li>The path will not be set. This must be set explicitly via a call to
+ *     {@link #setPath(String)}</li>
+ * </ul>
  *
  * @since Servlet 4.0
  */
 public interface PushBuilder {
+
+    /**
+     * Sets the URI path to be used for the push request. This must be called
+     * before every call to {@link #push()}. If the path includes a query
+     * string, the query string will be appended to the existing query string
+     * (if any) and no de-duplication will occur.
+     *
+     * @param path Paths beginning with '/' are treated as absolute paths. All
+     *             other paths are treated as relative to the context path of
+     *             the request used to create this builder instance. The path
+     *             may include a query string.
+     *
+     * @return This builder instance
+     */
+    PushBuilder setPath(String path);
+
+    void push();
 }

==================================================
ActionCode.java
index d05db25bc1..6a49bc4cea 100644
--- a/java/org/apache/catalina/core/LocalStrings.properties
+++ b/java/org/apache/catalina/core/LocalStrings.properties
@@ -48,6 +48,9 @@ applicationFilterConfig.jmxUnregisterFail=JMX de-registration failed for filter
 applicationFilterConfig.release=Failed to destroy the filter named [{0}] of type [{1}]
 applicationFilterRegistration.nullInitParam=Unable to set initialisation parameter for filter due to null name and/or value. Name [{0}], Value [{1}]
 applicationFilterRegistration.nullInitParams=Unable to set initialisation parameters for filter due to null name and/or value. Name [{0}], Value [{1}]
+
+applicationPushBuilder.noCoyoteRequest=Unable to find the underlying Coyote request object (which is required to create a push request) from the request of type [{0}]
+
 applicationServletRegistration.setServletSecurity.iae=Null constraint specified for servlet [{0}] deployed to context with name [{1}]
 applicationServletRegistration.setServletSecurity.ise=Security constraints can't be added to servlet [{0}] deployed to context with name [{1}] as the context has already been initialised
 applicationSessionCookieConfig.ise=Property {0} cannot be added to SessionCookieConfig for context {1} as the context has been initialised

==================================================
AjpProcessor.java
index a4b3c946c1..165e61f5ea 100644
--- a/java/org/apache/coyote/ActionCode.java
+++ b/java/org/apache/coyote/ActionCode.java
@@ -236,5 +236,10 @@ public enum ActionCode {
      * Trigger end of request processing (remaining input swallowed, write any
      * remaining parts of the response etc.).
      */
-    END_REQUEST
+    END_REQUEST,
+
+    /**
+     * Push a request on behalf of the client of the current request.
+     */
+    PUSH_REQUEST
 }

==================================================
Http11Processor.java
index 331d7b2583..1faea78ce9 100644
--- a/java/org/apache/coyote/ajp/LocalStrings.properties
+++ b/java/org/apache/coyote/ajp/LocalStrings.properties
@@ -27,6 +27,7 @@ ajpprocessor.request.prepare=Error preparing request
 ajpprocessor.request.process=Error processing request
 ajpprocessor.certs.fail=Certificate conversion failed
 ajpprocessor.httpupgrade.notsupported=HTTP upgrade is not supported by the AJP protocol
+ajpprocessor.pushrequest.notsupported=Server push requests are not supported by the AJP protocol
 
 ajpmessage.null=Cannot append null value
 ajpmessage.overflow=Overflow error for buffer adding {0} bytes at position {1}

==================================================
Http2UpgradeHandler.java
index 3a4e630f37..d04c13101e 100644
--- a/java/org/apache/coyote/http11/LocalStrings.properties
+++ b/java/org/apache/coyote/http11/LocalStrings.properties
@@ -20,6 +20,7 @@ abstractHttp11Protocol.httpUpgradeConfigured=The [{0}] connector has been config
 http11processor.fallToDebug=\n Note: further occurrences of HTTP header parsing errors will be logged at DEBUG level.
 http11processor.header.parse=Error parsing HTTP request header
 http11processor.neverused=This method should never be used
+http11processor.pushrequest.notsupported=Server push requests are not supported by the HTTP/1.1 protocol
 http11processor.request.prepare=Error preparing request
 http11processor.request.process=Error processing request
 http11processor.request.finish=Error finishing request

==================================================
Stream.java
index 0fa93c9bbd..1c18f863c7 100644
--- a/java/org/apache/coyote/http2/LocalStrings.properties
+++ b/java/org/apache/coyote/http2/LocalStrings.properties
@@ -117,6 +117,7 @@ upgradeHandler.windowSizeTooBig=Connection [{0}], Stream [{1}], Window size too
 upgradeHandler.windowSizeReservationInterrupted=Connection [{0}], Stream [{1}], reservation for [{2}] bytes
 upgradeHandler.writeBody=Connection [{0}], Stream [{1}], Data length [{2}]
 upgradeHandler.writeHeaders=Connection [{0}], Stream [{1}]
+upgradeHandler.writePushHeaders=Connection [{0}], Stream [{1}]
 
 writeStateMachine.endWrite.ise=It is illegal to specify [{0}] for the new state once a write has completed
 writeStateMachine.ise=It is illegal to call [{0}()] in state [{1}]
\ No newline at end of file

==================================================
StreamProcessor.java
index 067f90a4b9..e8bd44c0b1 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -145,6 +145,9 @@ public class Stream extends AbstractStream implements HeaderEmitter {
     private synchronized int reserveWindowSize(int reservation, boolean block) throws IOException {
         long windowSize = getWindowSize();
         while (windowSize < 1) {
+            if (!canWrite()) {
+                throw new IOException("TODO i18n: Stream not writeable");
+            }
             try {
                 if (block) {
                     wait();
@@ -329,11 +332,21 @@ public class Stream extends AbstractStream implements HeaderEmitter {
     }
 
 
+    void sentPushPromise() {
+        state.sentPushPromise();
+    }
+
+
     boolean isActive() {
         return state.isActive();
     }
 
 
+    boolean canWrite() {
+        return state.canWrite();
+    }
+
+
     boolean isClosedFinal() {
         return state.isClosedFinal();
     }
@@ -365,6 +378,19 @@ public class Stream extends AbstractStream implements HeaderEmitter {
     }
 
 
+    void push(Request request) throws IOException {
+        // Set the special HTTP/2 headers
+        request.getMimeHeaders().addValue(":method").duplicate(request.method());
+        request.getMimeHeaders().addValue(":scheme").duplicate(request.scheme());
+        // TODO: Query string
+        request.getMimeHeaders().addValue(":path").duplicate(request.decodedURI());
+        // TODO: Handle default ports
+        request.getMimeHeaders().addValue(":authority").setString(
+                request.serverName().getString() + ":" + request.getServerPort());
+        handler.push(request, this);
+    }
+
+
     class StreamOutputBuffer implements OutputBuffer {
 
         private final ByteBuffer buffer = ByteBuffer.allocate(8 * 1024);

==================================================
SimpleImagePush.java
index d81dcbd83b..989df2d7da 100644
--- a/java/org/apache/coyote/http2/StreamProcessor.java
+++ b/java/org/apache/coyote/http2/StreamProcessor.java
@@ -31,6 +31,7 @@ import org.apache.coyote.Adapter;
 import org.apache.coyote.AsyncContextCallback;
 import org.apache.coyote.ContainerThreadMarker;
 import org.apache.coyote.ErrorState;
+import org.apache.coyote.Request;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.buf.ByteChunk;
@@ -385,6 +386,17 @@ public class StreamProcessor extends AbstractProcessor implements Runnable {
             break;
         }
 
+        // Servlet 4.0 Push requests
+        case PUSH_REQUEST: {
+            try {
+                stream.push((Request) param);
+            } catch (IOException ioe) {
+                response.setErrorException(ioe);
+                setErrorState(ErrorState.CLOSE_CONNECTION_NOW, ioe);
+            }
+            break;
+        }
+
         // Unsupported / illegal under HTTP/2
         case UPGRADE:
             throw new UnsupportedOperationException(

==================================================
