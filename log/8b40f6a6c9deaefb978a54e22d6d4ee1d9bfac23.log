8b40f6a6c9deaefb978a54e22d6d4ee1d9bfac23
==================================================
Update HttpProtocol implementations to the Servlet 3.1 upgrade API
==================================================
Mark Emlyn
==================================================
Sat Nov 24 17:18:14 2012 +0000
==================================================
AbstractProtocol.java
Update HttpProtocol implementations to the Servlet 3.1 upgrade API

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1413207 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractAjpProtocol.java
index 991a9f524b..05d6d6632a 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -30,7 +30,6 @@ import javax.management.MBeanServer;
 import javax.management.MalformedObjectNameException;
 import javax.management.ObjectName;
 
-import org.apache.coyote.http11.upgrade.UpgradeInbound;
 import org.apache.juli.logging.Log;
 import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.collections.SynchronizedStack;
@@ -625,13 +624,14 @@ public abstract class AbstractProtocol implements ProtocolHandler,
                     }
 
                     if (state == SocketState.UPGRADING) {
-                        // Get the UpgradeInbound handler
-                        UpgradeInbound inbound = processor.getUpgradeInbound();
+                        // Get the HTTP upgrade handler
+                        javax.servlet.http.ProtocolHandler httpUpgradeHandler =
+                                processor.getHttpUpgradeHandler();
                         // Release the Http11 processor to be re-used
                         release(socket, processor, false, false);
                         // Create the light-weight upgrade processor
-                        processor = createUpgradeProcessor(socket, inbound);
-                        inbound.onUpgradeComplete();
+                        processor = createUpgradeProcessor(
+                                socket, httpUpgradeHandler);
                     }
                 } while (state == SocketState.ASYNC_END ||
                         state == SocketState.UPGRADING);
@@ -698,7 +698,8 @@ public abstract class AbstractProtocol implements ProtocolHandler,
                 boolean addToPoller);
         protected abstract Processor<S> createUpgradeProcessor(
                 SocketWrapper<S> socket,
-                UpgradeInbound inbound) throws IOException;
+                javax.servlet.http.ProtocolHandler httpUpgradeProcessor)
+                        throws IOException;
 
         protected void register(AbstractProcessor<S> processor) {
             if (getProtocol().getDomain() != null) {

==================================================
Http11AprProtocol.java
index a29670a1c4..e7b3bbf38e 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -16,9 +16,10 @@
  */
 package org.apache.coyote.ajp;
 
+import javax.servlet.http.ProtocolHandler;
+
 import org.apache.coyote.AbstractProtocol;
 import org.apache.coyote.Processor;
-import org.apache.coyote.http11.upgrade.UpgradeInbound;
 import org.apache.tomcat.util.net.SocketWrapper;
 import org.apache.tomcat.util.res.StringManager;
 
@@ -92,7 +93,7 @@ public abstract class AbstractAjpProtocol extends AbstractProtocol {
 
         @Override
         protected P createUpgradeProcessor(SocketWrapper<S> socket,
-                UpgradeInbound inbound) {
+                ProtocolHandler httpUpgradeHandler) {
             // TODO should fail - throw IOE
             return null;
         }

==================================================
Http11NioProtocol.java
index 03c93d9771..676a5c9fa0 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -18,10 +18,11 @@ package org.apache.coyote.http11;
 
 import java.io.IOException;
 
+import javax.servlet.http.ProtocolHandler;
+
 import org.apache.coyote.AbstractProtocol;
 import org.apache.coyote.Processor;
 import org.apache.coyote.http11.upgrade.UpgradeAprProcessor;
-import org.apache.coyote.http11.upgrade.UpgradeInbound;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.net.AbstractEndpoint;
@@ -308,8 +309,7 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
             } else {
                 // Upgraded
                 ((AprEndpoint) proto.endpoint).getPoller().add(
-                        socket.getSocket().longValue(),
-                        processor.getUpgradeInbound().getReadTimeout(),
+                        socket.getSocket().longValue(), -1,
                         AprEndpoint.Poller.FLAGS_READ);
             }
         }
@@ -340,9 +340,10 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
 
         @Override
         protected Processor<Long> createUpgradeProcessor(
-                SocketWrapper<Long> socket, UpgradeInbound inbound)
+                SocketWrapper<Long> socket,
+                ProtocolHandler httpUpgradeProcessor)
                 throws IOException {
-            return new UpgradeAprProcessor(socket, inbound);
+            return new UpgradeAprProcessor(socket, httpUpgradeProcessor);
         }
     }
 }

==================================================
Http11Protocol.java
index d93390554d..94bdfbb3cd 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -21,10 +21,10 @@ import java.nio.channels.SocketChannel;
 import java.util.Iterator;
 
 import javax.net.ssl.SSLEngine;
+import javax.servlet.http.ProtocolHandler;
 
 import org.apache.coyote.AbstractProtocol;
 import org.apache.coyote.Processor;
-import org.apache.coyote.http11.upgrade.UpgradeInbound;
 import org.apache.coyote.http11.upgrade.UpgradeNioProcessor;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -303,9 +303,10 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
 
         @Override
         protected Processor<NioChannel> createUpgradeProcessor(
-                SocketWrapper<NioChannel> socket, UpgradeInbound inbound)
+                SocketWrapper<NioChannel> socket,
+                ProtocolHandler httpUpgradeProcessor)
                 throws IOException {
-            return new UpgradeNioProcessor(socket, inbound,
+            return new UpgradeNioProcessor(socket, httpUpgradeProcessor,
                     ((Http11NioProtocol) getProtocol()).getEndpoint().getSelectorPool());
         }
 

==================================================
UpgradeAprProcessor.java
index e95557217a..b60918cba2 100644
--- a/java/org/apache/coyote/http11/Http11Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Protocol.java
@@ -19,10 +19,11 @@ package org.apache.coyote.http11;
 import java.io.IOException;
 import java.net.Socket;
 
+import javax.servlet.http.ProtocolHandler;
+
 import org.apache.coyote.AbstractProtocol;
 import org.apache.coyote.Processor;
 import org.apache.coyote.http11.upgrade.UpgradeBioProcessor;
-import org.apache.coyote.http11.upgrade.UpgradeInbound;
 import org.apache.juli.logging.Log;
 import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.JIoEndpoint;
@@ -208,9 +209,10 @@ public class Http11Protocol extends AbstractHttp11JsseProtocol<Socket> {
 
         @Override
         protected Processor<Socket> createUpgradeProcessor(
-                SocketWrapper<Socket> socket, UpgradeInbound inbound)
+                SocketWrapper<Socket> socket,
+                ProtocolHandler httpUpgradeProcessor)
                 throws IOException {
-            return new UpgradeBioProcessor(socket, inbound);
+            return new UpgradeBioProcessor(socket, httpUpgradeProcessor);
         }
 
         @Override

==================================================
UpgradeBioProcessor.java
index 2376a43390..1275d32ff9 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeAprProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeAprProcessor.java
@@ -18,6 +18,8 @@ package org.apache.coyote.http11.upgrade;
 
 import java.io.IOException;
 
+import javax.servlet.http.ProtocolHandler;
+
 import org.apache.tomcat.jni.Socket;
 import org.apache.tomcat.jni.Status;
 import org.apache.tomcat.util.net.SocketWrapper;
@@ -28,7 +30,7 @@ public class UpgradeAprProcessor extends UpgradeProcessor<Long> {
 
 
     public UpgradeAprProcessor(SocketWrapper<Long> wrapper,
-            UpgradeInbound upgradeInbound) {
+            ProtocolHandler httpUpgradeProcessor) {
         super(upgradeInbound);
 
         Socket.timeoutSet(wrapper.getSocket().longValue(),

==================================================
UpgradeNioProcessor.java
index 2a7a10beeb..7768ac604b 100644
--- a/java/org/apache/coyote/http11/upgrade/UpgradeBioProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/UpgradeBioProcessor.java
@@ -21,6 +21,8 @@ import java.io.InputStream;
 import java.io.OutputStream;
 import java.net.Socket;
 
+import javax.servlet.http.ProtocolHandler;
+
 import org.apache.tomcat.util.net.SocketWrapper;
 
 public class UpgradeBioProcessor extends UpgradeProcessor<Socket> {
@@ -29,7 +31,7 @@ public class UpgradeBioProcessor extends UpgradeProcessor<Socket> {
     private final OutputStream outputStream;
 
     public UpgradeBioProcessor(SocketWrapper<Socket> wrapper,
-            UpgradeInbound upgradeInbound) throws IOException {
+            ProtocolHandler httpUpgradeProcessor) throws IOException {
         super(upgradeInbound);
 
         int timeout = upgradeInbound.getReadTimeout();

==================================================
