d71140268e3a7b66d8dd89f12673a1da329df628
==================================================
When a TrustManager is configured that does not support certificateVerificationDepth only log a warning about that lack of support when certificateVerificationDepth has been explicitly set.
==================================================
Mark Thomas
==================================================
Tue May 2 10:34:37 2017 +0000
==================================================
SSLHostConfig.java
When a TrustManager is configured that does not support certificateVerificationDepth only log a warning about that lack of support when certificateVerificationDepth has been explicitly set.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1793460 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JSSEUtil.java
index f6eaa6798d..85d39464fd 100644
--- a/java/org/apache/tomcat/util/net/SSLHostConfig.java
+++ b/java/org/apache/tomcat/util/net/SSLHostConfig.java
@@ -86,6 +86,8 @@ public class SSLHostConfig implements Serializable {
     private String certificateRevocationListFile;
     private CertificateVerification certificateVerification = CertificateVerification.NONE;
     private int certificateVerificationDepth = 10;
+    // Used to track if certificateVerificationDepth has been explicitly set
+    private boolean certificateVerificationDepthConfigured = false;
     private String ciphers = "HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!kRSA";
     private LinkedHashSet<Cipher> cipherList = null;
     private List<String> jsseCipherNames = null;
@@ -286,6 +288,7 @@ public class SSLHostConfig implements Serializable {
 
     public void setCertificateVerificationDepth(int certificateVerificationDepth) {
         this.certificateVerificationDepth = certificateVerificationDepth;
+        certificateVerificationDepthConfigured = true;
     }
 
 
@@ -294,6 +297,11 @@ public class SSLHostConfig implements Serializable {
     }
 
 
+    public boolean isCertificateVerificationDepthConfigured() {
+        return certificateVerificationDepthConfigured;
+    }
+
+
     /**
      * Set the new cipher configuration. Note: Regardless of the format used to
      * set the configuration, it is always stored in OpenSSL format.

==================================================
