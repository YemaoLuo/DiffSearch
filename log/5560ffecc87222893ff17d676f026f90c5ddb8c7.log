5560ffecc87222893ff17d676f026f90c5ddb8c7
==================================================
Better solution to multiple calls to Thread.getName()
==================================================
Mark Emlyn
==================================================
Mon Sep 24 17:44:31 2012 +0000
==================================================
CoyoteAdapter.java
Better solution to multiple calls to Thread.getName()
- ThreadLocal is cleaner
- ConcurrentWeakHashMap wasn't concurrent (as per kkolinko's review)

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1389493 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ConcurrentWeakHashMap.java
index e889e8f511..b8ae07e4f9 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -42,7 +42,6 @@ import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.CharChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
-import org.apache.tomcat.util.collections.ConcurrentWeakHashMap;
 import org.apache.tomcat.util.http.Cookies;
 import org.apache.tomcat.util.http.ServerCookie;
 import org.apache.tomcat.util.net.SSLSupport;
@@ -79,6 +78,16 @@ public class CoyoteAdapter implements Adapter {
         Boolean.valueOf(System.getProperty("org.apache.catalina.connector.CoyoteAdapter.ALLOW_BACKSLASH", "false")).booleanValue();
 
 
+    private static final ThreadLocal<String> THREAD_NAME =
+            new ThreadLocal<String>() {
+
+                @Override
+                protected String initialValue() {
+                    return Thread.currentThread().getName();
+                }
+
+    };
+
     // ----------------------------------------------------------- Constructors
 
 
@@ -104,9 +113,6 @@ public class CoyoteAdapter implements Adapter {
     private final Connector connector;
 
 
-    private final ConcurrentWeakHashMap<Thread,String> threadNames =
-            new ConcurrentWeakHashMap<>();
-
     /**
      * The string manager for this package.
      */
@@ -431,13 +437,7 @@ public class CoyoteAdapter implements Adapter {
 
             // Parse and set Catalina and configuration specific
             // request parameters
-            Thread t = Thread.currentThread();
-            String threadName = threadNames.get(t);
-            if (threadName == null) {
-                threadName = t.getName();
-                threadNames.put(t, threadName);
-            }
-            req.getRequestProcessor().setWorkerThreadName(threadName);
+            req.getRequestProcessor().setWorkerThreadName(THREAD_NAME.get());
             boolean postParseSuccess = postParseRequest(req, request, res, response);
             if (postParseSuccess) {
                 //check valves if we support async

==================================================
TesterPerformanceSynchronizedStack.java
deleted file mode 100644
index 8280dbd284..0000000000
--- a/java/org/apache/tomcat/util/collections/ConcurrentWeakHashMap.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.tomcat.util.collections;
-
-import java.util.WeakHashMap;
-import java.util.concurrent.locks.Lock;
-import java.util.concurrent.locks.ReadWriteLock;
-import java.util.concurrent.locks.ReentrantReadWriteLock;
-
-/**
- * Wraps a WeakHashMap and makes it thread safe when the typical usage is few
- * writes and many reads. This class deliberately does not provide access to the
- * full Map interface. It only exposes the methods required by Tomcat.
- */
-public class ConcurrentWeakHashMap<K,V> {
-
-    private final ReadWriteLock lock = new ReentrantReadWriteLock();
-    private final Lock readLock = lock.readLock();
-    private final Lock writeLock = lock.writeLock();
-    private final WeakHashMap<K,V> map = new WeakHashMap<>();
-
-    public V get(K k) {
-        readLock.lock();
-        try {
-            return map.get(k);
-        } finally {
-            readLock.unlock();
-        }
-    }
-
-    public V put(K k, V v) {
-        writeLock.lock();
-        try {
-            return map.put(k, v);
-        } finally {
-            writeLock.unlock();
-        }
-    }
-}

==================================================
