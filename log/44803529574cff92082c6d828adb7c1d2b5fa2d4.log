44803529574cff92082c6d828adb7c1d2b5fa2d4
==================================================
Type-safety for the Mapper - Part 2/2
==================================================
Rainer Jung
==================================================
Sun Nov 18 15:27:56 2012 +0000
==================================================
AuthenticatorBase.java
Type-safety for the Mapper - Part 2/2

Use generics for MapElement and specialize MappedHost,
MapedContext and MappedWrapper to host, Context and Wrapper.

Remove unneeded casts in all code using the Mapper.

Use real Host, Context and Wrapper objects in TestMapper.

Future possible work: restrict Context parents to Host.
Otherwise MapperListener can't register a new Context.


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1410896 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CoyoteAdapter.java
index 0b6fe05c06..e00452301b 100644
--- a/java/org/apache/catalina/authenticator/AuthenticatorBase.java
+++ b/java/org/apache/catalina/authenticator/AuthenticatorBase.java
@@ -457,7 +457,7 @@ public abstract class AuthenticatorBase extends ValveBase
 
         // The Servlet may specify security constraints through annotations.
         // Ensure that they have been processed before constraints are checked
-        Wrapper wrapper = (Wrapper) request.getMappingData().wrapper;
+        Wrapper wrapper = request.getMappingData().wrapper;
         if (wrapper != null) {
             wrapper.servletSecurityAnnotationScan();
         }

==================================================
Request.java
index e3989dcf07..3ec9baa3fb 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -257,7 +257,7 @@ public class CoyoteAdapter implements Adapter {
             req.getRequestProcessor().setWorkerThreadName(null);
             // Recycle the wrapper request and response
             if (error || response.isClosed() || !request.isComet()) {
-                ((Context) request.getMappingData().context).logAccess(
+                request.getMappingData().context.logAccess(
                         request, response,
                         System.currentTimeMillis() - req.getStartTime(),
                         false);
@@ -288,7 +288,7 @@ public class CoyoteAdapter implements Adapter {
                 // Have to test this first since state may change while in this
                 // method and this is only required if entering this method in
                 // this state
-                Context ctxt = (Context) request.getMappingData().context;
+                Context ctxt = request.getMappingData().context;
                 if (ctxt != null) {
                     ctxt.fireRequestDestroyEvent(request);
                 }
@@ -364,7 +364,7 @@ public class CoyoteAdapter implements Adapter {
                 request.finishRequest();
                 response.finishResponse();
                 req.action(ActionCode.POST_REQUEST , null);
-                ((Context) request.getMappingData().context).logAccess(
+                request.getMappingData().context.logAccess(
                         request, response,
                         System.currentTimeMillis() - req.getStartTime(),
                         false);
@@ -477,7 +477,7 @@ public class CoyoteAdapter implements Adapter {
                     // If postParseRequest() failed, it has already logged it.
                     // If context is null this was the start of a comet request
                     // that failed and has already been logged.
-                    ((Context) request.getMappingData().context).logAccess(
+                    request.getMappingData().context.logAccess(
                             request, response,
                             System.currentTimeMillis() - req.getStartTime(),
                             false);
@@ -538,11 +538,11 @@ public class CoyoteAdapter implements Adapter {
             if (request.mappingData != null) {
                 if (request.mappingData.context != null) {
                     logged = true;
-                    ((Context) request.mappingData.context).logAccess(
+                    request.mappingData.context.logAccess(
                             request, response, time, true);
                 } else if (request.mappingData.host != null) {
                     logged = true;
-                    ((Host) request.mappingData.host).logAccess(
+                    request.mappingData.host.logAccess(
                             request, response, time, true);
                 }
             }
@@ -684,8 +684,8 @@ public class CoyoteAdapter implements Adapter {
             // This will map the the latest version by default
             connector.getService().getMapper().map(serverName, decodedURI,
                     version, request.getMappingData());
-            request.setContext((Context) request.getMappingData().context);
-            request.setWrapper((Wrapper) request.getMappingData().wrapper);
+            request.setContext(request.getMappingData().context);
+            request.setWrapper(request.getMappingData().wrapper);
 
             // Single contextVersion therefore no possibility of remap
             if (request.getMappingData().contexts == null) {
@@ -735,9 +735,9 @@ public class CoyoteAdapter implements Adapter {
                     mapRequired = false;
                 } else {
                     // Find the context associated with the session
-                    Object[] objs = request.getMappingData().contexts;
-                    for (int i = (objs.length); i > 0; i--) {
-                        Context ctxt = (Context) objs[i - 1];
+                    Context[] contexts = request.getMappingData().contexts;
+                    for (int i = (contexts.length); i > 0; i--) {
+                        Context ctxt = contexts[i - 1];
                         if (ctxt.getManager().findSession(sessionID) != null) {
                             // Was the correct context already mapped?
                             if (ctxt.equals(request.getMappingData().context)) {
@@ -958,7 +958,7 @@ public class CoyoteAdapter implements Adapter {
         // context, don't go looking for a session ID in a cookie as a cookie
         // from a parent context with a session ID may be present which would
         // overwrite the valid session ID encoded in the URL
-        Context context = (Context) request.getMappingData().context;
+        Context context = request.getMappingData().context;
         if (context != null && !context.getServletContext()
                 .getEffectiveSessionTrackingModes().contains(
                         SessionTrackingMode.COOKIE)) {

==================================================
ApplicationContext.java
index 9303f95fc9..f26d3d0b5e 100644
--- a/java/org/apache/catalina/connector/Request.java
+++ b/java/org/apache/catalina/connector/Request.java
@@ -628,7 +628,7 @@ public class Request
      * Return the Host within which this Request is being processed.
      */
     public Host getHost() {
-        return ((Host) mappingData.host);
+        return mappingData.host;
     }
 
 
@@ -2233,7 +2233,7 @@ public class Request
                 return false;
             } else {
                 for (int i = (getMappingData().contexts.length); i > 0; i--) {
-                    Context ctxt = (Context) getMappingData().contexts[i - 1];
+                    Context ctxt = getMappingData().contexts[i - 1];
                     try {
                         if (ctxt.getManager().findSession(requestedSessionId) !=
                                 null) {

==================================================
Mapper.java
index fb6ba1cdaf..fb73695d8d 100644
--- a/java/org/apache/catalina/core/ApplicationContext.java
+++ b/java/org/apache/catalina/core/ApplicationContext.java
@@ -475,7 +475,7 @@ public class ApplicationContext
             return (null);
         }
 
-        Wrapper wrapper = (Wrapper) mappingData.wrapper;
+        Wrapper wrapper = mappingData.wrapper;
         String wrapperPath = mappingData.wrapperPath.toString();
         String pathInfo = mappingData.pathInfo.toString();
 

==================================================
MapperListener.java
index fef97f8ade..92324034de 100644
--- a/java/org/apache/catalina/mapper/Mapper.java
+++ b/java/org/apache/catalina/mapper/Mapper.java
@@ -19,8 +19,11 @@ package org.apache.catalina.mapper;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
+import org.apache.catalina.Context;
+import org.apache.catalina.Host;
 import org.apache.catalina.WebResource;
 import org.apache.catalina.WebResourceRoot;
+import org.apache.catalina.Wrapper;
 import org.apache.tomcat.util.buf.Ascii;
 import org.apache.tomcat.util.buf.CharChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
@@ -60,7 +63,7 @@ public final class Mapper {
      * Mapping from Context object to Context version to support
      * RequestDispatcher mappings.
      */
-    protected Map<Object, ContextVersion> contextObjectToContextVersionMap =
+    protected Map<Context, ContextVersion> contextObjectToContextVersionMap =
             new ConcurrentHashMap<>();
 
 
@@ -82,7 +85,7 @@ public final class Mapper {
      * @param host Host object
      */
     public synchronized void addHost(String name, String[] aliases,
-                                     Object host) {
+                                     Host host) {
         MappedHost[] newHosts = new MappedHost[hosts.length + 1];
         MappedHost newHost = new MappedHost();
         ContextList contextList = new ContextList();
@@ -116,7 +119,7 @@ public final class Mapper {
         if (pos < 0) {
             return;
         }
-        Object host = hosts[pos].object;
+        Host host = hosts[pos].object;
         MappedHost[] newHosts = new MappedHost[hosts.length - 1];
         if (removeMap(hosts, newHosts, name)) {
             hosts = newHosts;
@@ -185,8 +188,8 @@ public final class Mapper {
      * @param welcomeResources Welcome files defined for this context
      * @param resources Static resources of the context
      */
-    public void addContextVersion(String hostName, Object host, String path,
-            String version, Object context, String[] welcomeResources,
+    public void addContextVersion(String hostName, Host host, String path,
+            String version, Context context, String[] welcomeResources,
             WebResourceRoot resources) {
 
         MappedHost[] hosts = this.hosts;
@@ -244,15 +247,15 @@ public final class Mapper {
     /**
      * Remove a context from an existing host.
      *
-     * @param object    The actual context
+     * @param ctxt      The actual context
      * @param hostName  Virtual host name this context belongs to
      * @param path      Context path
      * @param version   Context version
      */
-    public void removeContextVersion(Object object, String hostName,
+    public void removeContextVersion(Context ctxt, String hostName,
             String path, String version) {
 
-        contextObjectToContextVersionMap.remove(object);
+        contextObjectToContextVersionMap.remove(ctxt);
 
         MappedHost[] hosts = this.hosts;
         int pos = find(hosts, hostName);
@@ -301,7 +304,7 @@ public final class Mapper {
 
 
     public void addWrapper(String hostName, String contextPath, String version,
-                           String path, Object wrapper, boolean jspWildCard,
+                           String path, Wrapper wrapper, boolean jspWildCard,
                            boolean resourceOnly) {
         MappedHost[] hosts = this.hosts;
         int pos = find(hosts, hostName);
@@ -347,7 +350,7 @@ public final class Mapper {
      * and the mapping path contains a wildcard; false otherwise
      */
     protected void addWrapper(ContextVersion context, String path,
-            Object wrapper, boolean jspWildCard, boolean resourceOnly) {
+            Wrapper wrapper, boolean jspWildCard, boolean resourceOnly) {
 
         synchronized (context) {
             MappedWrapper newWrapper = new MappedWrapper();
@@ -663,11 +666,12 @@ public final class Mapper {
      * Map the specified URI relative to the context,
      * mutating the given mapping data.
      *
+     * @param context The actual context
      * @param uri URI
      * @param mappingData This structure will contain the result of the mapping
      *                    operation
      */
-    public void map(Object context, MessageBytes uri,
+    public void map(Context context, MessageBytes uri,
             MappingData mappingData) throws Exception {
 
         ContextVersion contextVersion =
@@ -768,7 +772,7 @@ public final class Mapper {
             ContextVersion[] contextVersions = context.versions;
             int versionCount = contextVersions.length;
             if (versionCount > 1) {
-                Object[] contextObjects = new Object[contextVersions.length];
+                Context[] contextObjects = new Context[contextVersions.length];
                 for (int i = 0; i < contextObjects.length; i++) {
                     contextObjects[i] = contextVersions[i].object;
                 }
@@ -1122,7 +1126,7 @@ public final class Mapper {
      * This will return the index for the closest inferior or equal item in the
      * given array.
      */
-    private static final int find(MapElement[] map, CharChunk name) {
+    private static final <T> int find(MapElement<T>[] map, CharChunk name) {
         return find(map, name, name.getStart(), name.getEnd());
     }
 
@@ -1132,7 +1136,7 @@ public final class Mapper {
      * This will return the index for the closest inferior or equal item in the
      * given array.
      */
-    private static final int find(MapElement[] map, CharChunk name,
+    private static final <T> int find(MapElement<T>[] map, CharChunk name,
                                   int start, int end) {
 
         int a = 0;
@@ -1178,7 +1182,7 @@ public final class Mapper {
      * This will return the index for the closest inferior or equal item in the
      * given array.
      */
-    private static final int findIgnoreCase(MapElement[] map, CharChunk name) {
+    private static final <T> int findIgnoreCase(MapElement<T>[] map, CharChunk name) {
         return findIgnoreCase(map, name, name.getStart(), name.getEnd());
     }
 
@@ -1188,7 +1192,7 @@ public final class Mapper {
      * This will return the index for the closest inferior or equal item in the
      * given array.
      */
-    private static final int findIgnoreCase(MapElement[] map, CharChunk name,
+    private static final <T> int findIgnoreCase(MapElement<T>[] map, CharChunk name,
                                   int start, int end) {
 
         int a = 0;
@@ -1234,7 +1238,7 @@ public final class Mapper {
      * This will return the index for the closest inferior or equal item in the
      * given array.
      */
-    private static final int find(MapElement[] map, String name) {
+    private static final <T> int find(MapElement<T>[] map, String name) {
 
         int a = 0;
         int b = map.length - 1;
@@ -1396,8 +1400,8 @@ public final class Mapper {
      * Insert into the right place in a sorted MapElement array, and prevent
      * duplicates.
      */
-    private static final boolean insertMap
-        (MapElement[] oldMap, MapElement[] newMap, MapElement newElement) {
+    private static final <T> boolean insertMap
+        (MapElement<T>[] oldMap, MapElement<T>[] newMap, MapElement<T> newElement) {
         int pos = find(oldMap, newElement.name);
         if ((pos != -1) && (newElement.name.equals(oldMap[pos].name))) {
             return false;
@@ -1413,8 +1417,8 @@ public final class Mapper {
     /**
      * Insert into the right place in a sorted MapElement array.
      */
-    private static final boolean removeMap
-        (MapElement[] oldMap, MapElement[] newMap, String name) {
+    private static final <T> boolean removeMap
+        (MapElement<T>[] oldMap, MapElement<T>[] newMap, String name) {
         int pos = find(oldMap, name);
         if ((pos != -1) && (name.equals(oldMap[pos].name))) {
             System.arraycopy(oldMap, 0, newMap, 0, pos);
@@ -1429,10 +1433,10 @@ public final class Mapper {
     // ------------------------------------------------- MapElement Inner Class
 
 
-    protected abstract static class MapElement {
+    protected abstract static class MapElement<T> {
 
         public String name = null;
-        public Object object = null;
+        public T object = null;
 
     }
 
@@ -1441,7 +1445,7 @@ public final class Mapper {
 
 
     protected static final class MappedHost
-        extends MapElement {
+        extends MapElement<Host> {
 
         public ContextList contextList = null;
 
@@ -1462,12 +1466,12 @@ public final class Mapper {
     // ---------------------------------------------------- Context Inner Class
 
 
-    protected static final class MappedContext extends MapElement {
+    protected static final class MappedContext extends MapElement<Context> {
         public ContextVersion[] versions = new ContextVersion[0];
     }
 
 
-    protected static final class ContextVersion extends MapElement {
+    protected static final class ContextVersion extends MapElement<Context> {
         public String path = null;
         public String[] welcomeResources = new String[0];
         public WebResourceRoot resources = null;
@@ -1484,7 +1488,7 @@ public final class Mapper {
 
 
     protected static class MappedWrapper
-        extends MapElement {
+        extends MapElement<Wrapper> {
 
         public boolean jspWildCard = false;
         public boolean resourceOnly = false;

==================================================
MappingData.java
index 81cbbc3d5e..94c2f5cd7a 100644
--- a/java/org/apache/catalina/mapper/MapperListener.java
+++ b/java/org/apache/catalina/mapper/MapperListener.java
@@ -350,7 +350,7 @@ public class MapperListener extends LifecycleMBeanBase
         if ("/".equals(contextPath)) {
             contextPath = "";
         }
-        Container host = context.getParent();
+        Host host = (Host)context.getParent();
 
         WebResourceRoot resources = context.getResources();
         String[] welcomeFiles = context.findWelcomeFiles();

==================================================
TestMapper.java
index f055f22927..bf1a8180bb 100644
--- a/java/org/apache/catalina/mapper/MappingData.java
+++ b/java/org/apache/catalina/mapper/MappingData.java
@@ -17,6 +17,9 @@
 
 package org.apache.catalina.mapper;
 
+import org.apache.catalina.Context;
+import org.apache.catalina.Host;
+import org.apache.catalina.Wrapper;
 import org.apache.tomcat.util.buf.MessageBytes;
 
 /**
@@ -26,10 +29,10 @@ import org.apache.tomcat.util.buf.MessageBytes;
  */
 public class MappingData {
 
-    public Object host = null;
-    public Object context = null;
-    public Object[] contexts = null;
-    public Object wrapper = null;
+    public Host host = null;
+    public Context context = null;
+    public Context[] contexts = null;
+    public Wrapper wrapper = null;
     public boolean jspWildCard = false;
 
     public final MessageBytes contextPath = MessageBytes.newInstance();

==================================================
