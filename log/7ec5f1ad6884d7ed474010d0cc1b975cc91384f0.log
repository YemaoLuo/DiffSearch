7ec5f1ad6884d7ed474010d0cc1b975cc91384f0
==================================================
Remove unnecessary calls to unlockAccept()
==================================================
Mark Thomas
==================================================
Thu Apr 13 13:37:08 2017 +0000
==================================================
AbstractEndpoint.java
Remove unnecessary calls to unlockAccept()
The prior call to pause() will take care of this.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1791252 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Nio2Endpoint.java
index 8232a4d0c7..279213614c 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -756,9 +756,9 @@ public abstract class AbstractEndpoint<S,U> {
     }
 
     /**
-     * Unlock the server socket accept using a bogus connection.
+     * Unlock the server socket acceptor threads using bogus connections.
      */
-    protected void unlockAccept() {
+    private void unlockAccept() {
         // Only try to unlock the acceptor if it is necessary
         int unlocksRequired = 0;
         for (Acceptor<U> acceptor : acceptors) {
@@ -980,7 +980,8 @@ public abstract class AbstractEndpoint<S,U> {
 
 
     /**
-     * Pause the endpoint, which will stop it accepting new connections.
+     * Pause the endpoint, which will stop it accepting new connections and
+     * unlock the acceptor.
      */
     public void pause() {
         if (running && !paused) {

==================================================
NioEndpoint.java
index 916a6715b5..a80739fa27 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -196,7 +196,6 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel,AsynchronousS
         }
         if (running) {
             running = false;
-            unlockAccept();
             // Use the executor to avoid binding the main thread if something bad
             // occurs and unbind will also wait for a bit for it to complete
             getExecutor().execute(new Runnable() {

==================================================
