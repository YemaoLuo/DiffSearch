fe8452437560c2c7bc7f3190be7c123188961a06
==================================================
Align code across the Processors
==================================================
Mark Emlyn
==================================================
Tue May 13 21:05:33 2014 +0000
==================================================
Http11AprProcessor.java
Align code across the Processors
Note for NIO that the socketWrapper is the KeyAttachment which allows the NIO code to be simplified

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1594382 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11Nio2Processor.java
index e51f181ae8..6e2e6a0c70 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -473,18 +473,17 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
                 endpoint.processSocket(this.socketWrapper, SocketStatus.OPEN_READ, true);
             }
         } else if (actionCode == ActionCode.ASYNC_SETTIMEOUT) {
-            if (param==null) {
+            if (param == null || socketWrapper == null) {
                 return;
             }
             long timeout = ((Long)param).longValue();
+            // If we are not piggy backing on a worker thread, set the timeout
             socketWrapper.setTimeout(timeout);
         } else if (actionCode == ActionCode.ASYNC_DISPATCH) {
             if (asyncStateMachine.asyncDispatch()) {
                 endpoint.processSocket(this.socketWrapper, SocketStatus.OPEN_READ, true);
             }
         }
-
-
     }
 
 

==================================================
Http11NioProcessor.java
index 06f90310c0..a55ff51589 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Processor.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Processor.java
@@ -524,14 +524,11 @@ public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
                 endpoint.processSocket(this.socketWrapper, SocketStatus.OPEN_READ, true);
             }
         } else if (actionCode == ActionCode.ASYNC_SETTIMEOUT) {
-            if (param == null) {
-                return;
-            }
-            if (socketWrapper == null) {
+            if (param == null || socketWrapper == null) {
                 return;
             }
             long timeout = ((Long)param).longValue();
-            //if we are not piggy backing on a worker thread, set the timeout
+            // If we are not piggy backing on a worker thread, set the timeout
             socketWrapper.setTimeout(timeout);
         } else if (actionCode == ActionCode.ASYNC_DISPATCH) {
             if (asyncStateMachine.asyncDispatch()) {

==================================================
Http11Processor.java
index 337c33a044..5b464170c1 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -507,16 +507,12 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
                 endpoint.processSocket(this.socketWrapper, SocketStatus.OPEN_READ, true);
             }
         } else if (actionCode == ActionCode.ASYNC_SETTIMEOUT) {
-            if (param==null) {
-                return;
-            }
-            if (socketWrapper==null || socketWrapper.getSocket().getAttachment(false)==null) {
+            if (param == null || socketWrapper == null) {
                 return;
             }
-            NioEndpoint.KeyAttachment attach = (NioEndpoint.KeyAttachment)socketWrapper.getSocket().getAttachment(false);
             long timeout = ((Long)param).longValue();
-            //if we are not piggy backing on a worker thread, set the timeout
-            attach.setTimeout(timeout);
+            // If we are not piggy backing on a worker thread, set the timeout
+            socketWrapper.setTimeout(timeout);
         } else if (actionCode == ActionCode.ASYNC_DISPATCH) {
             if (asyncStateMachine.asyncDispatch()) {
                 endpoint.processSocket(this.socketWrapper, SocketStatus.OPEN_READ, true);

==================================================
