a353f2ee503d88786b57fb63922563f020c14ef0
==================================================
Remove references to DefaultContext from code
==================================================
Mark Emlyn
==================================================
Tue Oct 28 11:52:12 2008 +0000
==================================================
StandardContext.java
Remove references to DefaultContext from code

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@708541 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DefaultContextMBean.java
index 34ddce36a8..f06ad74e95 100644
--- a/java/org/apache/catalina/core/mbeans-descriptors.xml
+++ b/java/org/apache/catalina/core/mbeans-descriptors.xml
@@ -158,7 +158,7 @@
                type="java.lang.String"/>
       
     <attribute name="override"
-               description="The DefaultContext override flag for this web application"
+               description="The default context.xml override flag for this web application"
                type="boolean"/>
       
     <attribute name="parentClassLoader"

==================================================
ServerLifecycleListener.java
deleted file mode 100644
index 303105e11e..0000000000
--- a/java/org/apache/catalina/mbeans/DefaultContextMBean.java
+++ /dev/null
@@ -1,329 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- * 
- *      http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.catalina.mbeans;
-
-import java.util.ArrayList;
-
-import javax.management.MBeanException;
-import javax.management.MalformedObjectNameException;
-import javax.management.ObjectName;
-import javax.management.RuntimeOperationsException;
-
-import org.apache.catalina.Context;
-import org.apache.catalina.deploy.ContextEnvironment;
-import org.apache.catalina.deploy.ContextResource;
-import org.apache.catalina.deploy.ContextResourceLink;
-import org.apache.catalina.deploy.NamingResources;
-import org.apache.tomcat.util.modeler.BaseModelMBean;
-import org.apache.tomcat.util.modeler.ManagedBean;
-import org.apache.tomcat.util.modeler.Registry;
-
-/**
- * <p>A <strong>ModelMBean</strong> implementation for the
- * <code>org.apache.catalina.core.StandardDefaultContext</code> component.</p>
- *
- * @author Amy Roh
- * @version $Revision$ $Date$
- */
-
-public class DefaultContextMBean extends BaseModelMBean {
-
-
-    // ----------------------------------------------------------- Constructors
-
-
-    /**
-     * Construct a <code>ModelMBean</code> with default
-     * <code>ModelMBeanInfo</code> information.
-     *
-     * @exception MBeanException if the initializer of an object
-     *  throws an exception
-     * @exception RuntimeOperationsException if an IllegalArgumentException
-     *  occurs
-     */
-    public DefaultContextMBean()
-        throws MBeanException, RuntimeOperationsException {
-
-        super();
-
-    }
-    
-
-    // ----------------------------------------------------- Instance Variables
-    
-    
-    /**
-     * The configuration information registry for our managed beans.
-     */
-    protected Registry registry = MBeanUtils.createRegistry();
-
-    /**
-     * The <code>ManagedBean</code> information describing this MBean.
-     */
-    protected ManagedBean managed =
-        registry.findManagedBean("DefaultContext");
-
-    
-    // ------------------------------------------------------------- Attributes
-
-    
-    /**
-     * Return the naming resources associated with this web application.
-     */
-    private NamingResources getNamingResources() {
-        
-        return ((Context)this.resource).getNamingResources();
-    
-    }
-    
-    
-    /**
-     * Return the MBean Names of the set of defined environment entries for  
-     * this web application
-     */
-    public String[] getEnvironments() {
-        ContextEnvironment[] envs = getNamingResources().findEnvironments();
-        ArrayList results = new ArrayList();
-        for (int i = 0; i < envs.length; i++) {
-            try {
-                ObjectName oname =
-                    MBeanUtils.createObjectName(managed.getDomain(), envs[i]);
-                results.add(oname.toString());
-            } catch (MalformedObjectNameException e) {
-                IllegalArgumentException iae = new IllegalArgumentException
-                    ("Cannot create object name for environment " + envs[i]);
-                iae.initCause(e);
-                throw iae;
-            }
-        }
-        return ((String[]) results.toArray(new String[results.size()]));
-
-    }
-    
-    
-    /**
-     * Return the MBean Names of all the defined resource references for this
-     * application.
-     */
-    public String[] getResources() {
-        
-        ContextResource[] resources = getNamingResources().findResources();
-        ArrayList results = new ArrayList();
-        for (int i = 0; i < resources.length; i++) {
-            try {
-                ObjectName oname =
-                    MBeanUtils.createObjectName(managed.getDomain(), resources[i]);
-                results.add(oname.toString());
-            } catch (MalformedObjectNameException e) {
-                IllegalArgumentException iae = new IllegalArgumentException
-                    ("Cannot create object name for resource " + resources[i]);
-                iae.initCause(e);
-                throw iae;
-            }
-        }
-        return ((String[]) results.toArray(new String[results.size()]));
-
-    }
-
-      
-    /**
-     * Return the MBean Names of all the defined resource links for this 
-     * application
-     */
-    public String[] getResourceLinks() {
-        
-        ContextResourceLink[] links = getNamingResources().findResourceLinks();
-        ArrayList results = new ArrayList();
-        for (int i = 0; i < links.length; i++) {
-            try {
-                ObjectName oname =
-                    MBeanUtils.createObjectName(managed.getDomain(), links[i]);
-                results.add(oname.toString());
-            } catch (MalformedObjectNameException e) {
-                IllegalArgumentException iae = new IllegalArgumentException
-                    ("Cannot create object name for resource " + links[i]);
-                iae.initCause(e);
-                throw iae;
-            }
-        }
-        return ((String[]) results.toArray(new String[results.size()]));
-
-    }
-
-    // ------------------------------------------------------------- Operations
-
-
-    /**
-     * Add an environment entry for this web application.
-     *
-     * @param envName New environment entry name
-     */
-    public String addEnvironment(String envName, String type) 
-        throws MalformedObjectNameException {
-
-        NamingResources nresources = getNamingResources();
-        if (nresources == null) {
-            return null;
-        }
-        ContextEnvironment env = nresources.findEnvironment(envName);
-        if (env != null) {
-            throw new IllegalArgumentException
-                ("Invalid environment name - already exists '" + envName + "'");
-        }
-        env = new ContextEnvironment();
-        env.setName(envName);
-        env.setType(type);
-        nresources.addEnvironment(env);
-        
-        // Return the corresponding MBean name
-        ManagedBean managed = registry.findManagedBean("ContextEnvironment");
-        ObjectName oname =
-            MBeanUtils.createObjectName(managed.getDomain(), env);
-        return (oname.toString());
-        
-    }
-
-    
-    /**
-     * Add a resource reference for this web application.
-     *
-     * @param resourceName New resource reference name
-     */
-    public String addResource(String resourceName, String type) 
-        throws MalformedObjectNameException {
-        
-        NamingResources nresources = getNamingResources();
-        if (nresources == null) {
-            return null;
-        }
-        ContextResource resource = nresources.findResource(resourceName);
-        if (resource != null) {
-            throw new IllegalArgumentException
-                ("Invalid resource name - already exists'" + resourceName + "'");
-        }
-        resource = new ContextResource();
-        resource.setName(resourceName);
-        resource.setType(type);
-        nresources.addResource(resource);
-        
-        // Return the corresponding MBean name
-        ManagedBean managed = registry.findManagedBean("ContextResource");
-        ObjectName oname =
-            MBeanUtils.createObjectName(managed.getDomain(), resource);
-        
-        return (oname.toString());
-    }
-
-    
-    /**
-     * Add a resource link for this web application.
-     *
-     * @param resourceLinkName New resource link name
-     */
-    public String addResourceLink(String resourceLinkName, String global, 
-                String name, String type) throws MalformedObjectNameException {
-        
-        NamingResources nresources = getNamingResources();
-        if (nresources == null) {
-            return null;
-        }
-        ContextResourceLink resourceLink = 
-                                nresources.findResourceLink(resourceLinkName);
-        if (resourceLink != null) {
-            throw new IllegalArgumentException
-                ("Invalid resource link name - already exists'" + 
-                                                        resourceLinkName + "'");
-        }
-        resourceLink = new ContextResourceLink();
-        resourceLink.setGlobal(global);
-        resourceLink.setName(resourceLinkName);
-        resourceLink.setType(type);
-        nresources.addResourceLink(resourceLink);
-        
-        // Return the corresponding MBean name
-        ManagedBean managed = registry.findManagedBean("ContextResourceLink");
-        ObjectName oname =
-            MBeanUtils.createObjectName(managed.getDomain(), resourceLink);
-        return (oname.toString());
-    }    
-    
-    
-    /**
-     * Remove any environment entry with the specified name.
-     *
-     * @param envName Name of the environment entry to remove
-     */
-    public void removeEnvironment(String envName) {
-
-        NamingResources nresources = getNamingResources();
-        if (nresources == null) {
-            return;
-        }
-        ContextEnvironment env = nresources.findEnvironment(envName);
-        if (env == null) {
-            throw new IllegalArgumentException
-                ("Invalid environment name '" + envName + "'");
-        }
-        nresources.removeEnvironment(envName);
-
-    }
-    
-    
-    /**
-     * Remove any resource reference with the specified name.
-     *
-     * @param resourceName Name of the resource reference to remove
-     */
-    public void removeResource(String resourceName) {
-
-        resourceName = ObjectName.unquote(resourceName);
-        NamingResources nresources = getNamingResources();
-        if (nresources == null) {
-            return;
-        }
-        ContextResource resource = nresources.findResource(resourceName);
-        if (resource == null) {
-            throw new IllegalArgumentException
-                ("Invalid resource name '" + resourceName + "'");
-        }
-        nresources.removeResource(resourceName);
-    }
-    
-    
-    /**
-     * Remove any resource link with the specified name.
-     *
-     * @param resourceLinkName Name of the resource reference to remove
-     */
-    public void removeResourceLink(String resourceLinkName) {
-
-        resourceLinkName = ObjectName.unquote(resourceLinkName);
-        NamingResources nresources = getNamingResources();
-        if (nresources == null) {
-            return;
-        }
-        ContextResourceLink resource = nresources.findResourceLink(resourceLinkName);
-        if (resource == null) {
-            throw new IllegalArgumentException
-                ("Invalid resource name '" + resourceLinkName + "'");
-        }
-        nresources.removeResourceLink(resourceLinkName);
-    }
- 
-    
-}

==================================================
ContextConfig.java
index 1a2d7614a5..7c79d69be4 100644
--- a/java/org/apache/catalina/mbeans/ServerLifecycleListener.java
+++ b/java/org/apache/catalina/mbeans/ServerLifecycleListener.java
@@ -220,17 +220,7 @@ public class ServerLifecycleListener
             } catch (Exception e) {
                 log.error("Exception handling Container property change", e);
             }
-        }/* else if (event.getSource() instanceof DefaultContext) {
-            try {
-                processDefaultContextPropertyChange
-                    ((DefaultContext) event.getSource(),
-                     event.getPropertyName(),
-                     event.getOldValue(),
-                     event.getNewValue());
-            } catch (Exception e) {
-                log.error("Exception handling DefaultContext property change", e);
-            }
-        }*/ else if (event.getSource() instanceof NamingResources) {
+        } else if (event.getSource() instanceof NamingResources) {
             try {
                 processNamingResourcesPropertyChange
                     ((NamingResources) event.getSource(),
@@ -425,46 +415,6 @@ public class ServerLifecycleListener
     }
 
 
-    /**
-     * Create the MBeans for the specified DefaultContext and its nested components.
-     *
-     * @param dcontext DefaultContext for which to create MBeans
-     *
-     * @exception Exception if an exception is thrown during MBean creation
-     */
-    /*
-    protected void createMBeans(DefaultContext dcontext) throws Exception {
-
-        // Create the MBean for the DefaultContext itself
-        if (log.isDebugEnabled())
-            log.debug("Creating MBean for DefaultContext " + dcontext);
-        MBeanUtils.createMBean(dcontext);
-
-        dcontext.addPropertyChangeListener(this);
-
-        // Create the MBeans for the associated nested components
-        Loader dLoader = dcontext.getLoader();
-        if (dLoader != null) {
-            if (log.isDebugEnabled())
-                log.debug("Creating MBean for Loader " + dLoader);
-            //MBeanUtils.createMBean(dLoader);
-        }
-
-        Manager dManager = dcontext.getManager();
-        if (dManager != null) {
-            if (log.isDebugEnabled())
-                log.debug("Creating MBean for Manager " + dManager);
-            //MBeanUtils.createMBean(dManager);
-        }
-
-        // Create the MBeans for the NamingResources (if any)
-        NamingResources resources = dcontext.getNamingResources();
-        createMBeans(resources);
-
-    }
-    */
-
-
     /**
      * Create the MBeans for the specified Engine and its nested components.
      *
@@ -793,47 +743,6 @@ public class ServerLifecycleListener
     }
 
 
-    /**
-     * Deregister the MBeans for the specified DefaultContext and its nested
-     * components.
-     *
-     * @param dcontext DefaultContext for which to deregister MBeans
-     *
-     * @exception Exception if an exception is thrown during MBean destruction
-     */
-    /*
-    protected void destroyMBeans(DefaultContext dcontext) throws Exception {
-
-        Manager dManager = dcontext.getManager();
-        if (dManager != null) {
-            if (log.isDebugEnabled())
-                log.debug("Destroying MBean for Manager " + dManager);
-            //MBeanUtils.destroyMBean(dManager);
-        }
-
-        Loader dLoader = dcontext.getLoader();
-        if (dLoader != null) {
-            if (log.isDebugEnabled())
-                log.debug("Destroying MBean for Loader " + dLoader);
-            //MBeanUtils.destroyMBean(dLoader);
-        }
-
-        // Destroy the MBeans for the NamingResources (if any)
-        NamingResources resources = dcontext.getNamingResources();
-        if (resources != null) {
-            destroyMBeans(resources);
-        }
-
-        // deregister the MBean for the DefaultContext itself
-        if (log.isDebugEnabled())
-            log.debug("Destroying MBean for Context " + dcontext);
-        MBeanUtils.destroyMBean(dcontext);
-        dcontext.removePropertyChangeListener(this);
-
-    }
-    */
-
-
     /**
      * Deregister the MBeans for the specified Engine and its nested
      * components.
@@ -1141,93 +1050,6 @@ public class ServerLifecycleListener
     }
 
 
-    /**
-     * Process a property change event on a DefaultContext.
-     *
-     * @param defaultContext The DefaultContext on which this event occurred
-     * @param propertyName The name of the property that changed
-     * @param oldValue The previous value (may be <code>null</code>)
-     * @param newValue The new value (may be <code>null</code>)
-     *
-     * @exception Exception if an exception is thrown
-     */
-    /*
-    protected void processDefaultContextPropertyChange(DefaultContext defaultContext,
-                                                  String propertyName,
-                                                  Object oldValue,
-                                                  Object newValue)
-        throws Exception {
-
-        if (log.isTraceEnabled()) {
-            log.trace("propertyChange[defaultContext=" + defaultContext +
-                ",propertyName=" + propertyName +
-                ",oldValue=" + oldValue +
-                ",newValue=" + newValue + "]");
-        }
-        if ("loader".equals(propertyName)) {
-            if (oldValue != null) {
-                if (log.isDebugEnabled()) {
-                    log.debug("Removing MBean for Loader " + oldValue);
-                }
-                MBeanUtils.destroyMBean((Loader) oldValue);
-            }
-            if (newValue != null) {
-                if (log.isDebugEnabled()) {
-                    log.debug("Creating MBean for Loader " + newValue);
-                }
-                MBeanUtils.createMBean((Loader) newValue);
-            }
-        } else if ("logger".equals(propertyName)) {
-            if (oldValue != null) {
-                if (log.isDebugEnabled()) {
-                    log.debug("Removing MBean for Logger " + oldValue);
-                }
-                //MBeanUtils.destroyMBean((Logger) oldValue);
-            }
-            if (newValue != null) {
-                if (log.isDebugEnabled()) {
-                    log.debug("Creating MBean for Logger " + newValue);
-                }
-                //MBeanUtils.createMBean((Logger) newValue);
-            }
-        } else if ("manager".equals(propertyName)) {
-            if (oldValue != null) {
-                if (log.isDebugEnabled()) {
-                    log.debug("Removing MBean for Manager " + oldValue);
-                }
-                MBeanUtils.destroyMBean((Manager) oldValue);
-            }
-            if (newValue != null) {
-                if (log.isDebugEnabled()) {
-                    log.debug("Creating MBean for Manager " + newValue);
-                }
-                MBeanUtils.createMBean((Manager) newValue);
-            }
-        } else if ("realm".equals(propertyName)) {
-            if (oldValue != null) {
-//                if (log.isDebugEnabled()) {
-//                    log.debug("Removing MBean for Realm " + oldValue);
-//                }
-//                //MBeanUtils.destroyMBean((Realm) oldValue);
-            }
-            if (newValue != null) {
-//                if (log.isDebugEnabled()) {
-//                    log.debug("Creating MBean for Realm " + newValue);
-//                }
-//                //MBeanUtils.createMBean((Realm) newValue);
-            }
-        } else if ("service".equals(propertyName)) {
-            if (oldValue != null) {
-                destroyMBeans((Service) oldValue);
-            }
-            if (newValue != null) {
-                createMBeans((Service) newValue);
-            }
-        }
-
-    }*/
-
-
     /**
      * Process the removal of a child Container from a parent Container.
      *

==================================================
ContextRuleSet.java
index 78c91afe0f..11fd2db476 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -1040,7 +1040,7 @@ public class ContextConfig
         if (log.isDebugEnabled())
             log.debug(sm.getString("contextConfig.start"));
 
-        // Set properties based on DefaultContext
+        // Set properties based on default context
         Container container = context.getParent();
         if( !context.getOverride() ) {
             if( container instanceof Host ) {

==================================================
EngineRuleSet.java
index 88a6abbda0..9f176e9c34 100644
--- a/java/org/apache/catalina/startup/ContextRuleSet.java
+++ b/java/org/apache/catalina/startup/ContextRuleSet.java
@@ -25,8 +25,7 @@ import org.apache.tomcat.util.digester.RuleSetBase;
 
 /**
  * <p><strong>RuleSet</strong> for processing the contents of a
- * Context or DefaultContext definition element.  To enable parsing of a
- * DefaultContext, be sure to specify a prefix that ends with "/Default".</p>
+ * Context definition element.</p>
  *
  * @author Craig R. McClanahan
  * @version $Revision$ $Date$

==================================================
HostRuleSet.java
index 315716bcb3..c33cc1dad7 100644
--- a/java/org/apache/catalina/startup/EngineRuleSet.java
+++ b/java/org/apache/catalina/startup/EngineRuleSet.java
@@ -26,9 +26,8 @@ import org.apache.tomcat.util.digester.RuleSetBase;
 /**
  * <p><strong>RuleSet</strong> for processing the contents of a
  * Engine definition element.  This <code>RuleSet</code> does NOT include
- * any rules for nested Host or DefaultContext elements, which should
- * be added via instances of <code>HostRuleSet</code> or
- * <code>ContextRuleSet</code>, respectively.</p>
+ * any rules for nested Host elements, which should be added via instances of
+ * <code>HostRuleSet</code>.</p>
  *
  * @author Craig R. McClanahan
  * @version $Revision$ $Date$

==================================================
BeanFactory.java
index 042f1c41c5..542e8c46e8 100644
--- a/java/org/apache/catalina/startup/HostRuleSet.java
+++ b/java/org/apache/catalina/startup/HostRuleSet.java
@@ -26,8 +26,8 @@ import org.apache.tomcat.util.digester.RuleSetBase;
 /**
  * <p><strong>RuleSet</strong> for processing the contents of a
  * Host definition element.  This <code>RuleSet</code> does NOT include
- * any rules for nested Context or DefaultContext elements, which should
- * be added via instances of <code>ContextRuleSet</code>.</p>
+ * any rules for nested Context which should be added via instances of
+ * <code>ContextRuleSet</code>.</p>
  *
  * @author Craig R. McClanahan
  * @version $Revision$ $Date$

==================================================
MailSessionFactory.java
index 9bc0e4137b..e85c195f81 100644
--- a/java/org/apache/naming/factory/BeanFactory.java
+++ b/java/org/apache/naming/factory/BeanFactory.java
@@ -36,8 +36,8 @@ import java.lang.reflect.Method;
 /**
  * Object factory for any Resource conforming to the JavaBean spec.
  * 
- * <p>This factory can be configured in a <code>&lt;DefaultContext&gt;</code>
- * or <code>&lt;Context&gt;</code> element in your <code>conf/server.xml</code>
+ * <p>This factory can be configured in a <code>&lt;Context&gt;</code> element
+ * in your <code>conf/server.xml</code>
  * configuration file.  An example of factory configuration is:</p>
  * <pre>
  * &lt;Resource name="jdbc/myDataSource" auth="SERVLET"

==================================================
SendMailFactory.java
index eefcf085b9..1261eb9dc9 100644
--- a/java/org/apache/naming/factory/MailSessionFactory.java
+++ b/java/org/apache/naming/factory/MailSessionFactory.java
@@ -43,8 +43,8 @@ import javax.naming.spi.ObjectFactory;
  *     connections.  Defaults to <code>localhost</code> if not specified.</li>
  * </ul>
  *
- * <p>This factory can be configured in a <code>&lt;DefaultContext&gt;</code>
- * or <code>&lt;Context&gt;</code> element in your <code>conf/server.xml</code>
+ * <p>This factory can be configured in a 
+ * <code>&lt;Context&gt;</code> element in your <code>conf/server.xml</code>
  * configuration file.  An example of factory configuration is:</p>
  * <pre>
  * &lt;Resource name="mail/smtp" auth="CONTAINER"

==================================================
