ed7bc9110220bb620da4a16c599d4e6b5fb6bc97
==================================================
More refactoring in preparation for the BZ 62312 fix
==================================================
Mark Thomas
==================================================
Fri Sep 9 09:27:33 2022 +0100
==================================================
AuthenticationType.java
More refactoring in preparation for the BZ 62312 fix


==================================================
Constants.java
new file mode 100644
index 0000000000..c3a9fa5736
--- /dev/null
+++ b/java/org/apache/tomcat/websocket/AuthenticationType.java
@@ -0,0 +1,61 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.tomcat.websocket;
+
+public enum AuthenticationType {
+
+    WWW(Constants.AUTHORIZATION_HEADER_NAME,
+            Constants.WWW_AUTHENTICATE_HEADER_NAME,
+            Constants.WS_AUTHENTICATION_USER_NAME,
+            Constants.WS_AUTHENTICATION_PASSWORD,
+            Constants.WS_AUTHENTICATION_REALM);
+
+    private final String authorizationHeaderName;
+    private final String authenticateHeaderName;
+    private final String userNameProperty;
+    private final String userPasswordProperty;
+    private final String userRealmProperty;
+
+    private AuthenticationType(String authorizationHeaderName, String authenticateHeaderName, String userNameProperty,
+            String userPasswordProperty, String userRealmProperty) {
+        this.authorizationHeaderName = authorizationHeaderName;
+        this.authenticateHeaderName = authenticateHeaderName;
+        this.userNameProperty = userNameProperty;
+        this.userPasswordProperty = userPasswordProperty;
+        this.userRealmProperty = userRealmProperty;
+    }
+
+    public String getAuthorizationHeaderName() {
+        return authorizationHeaderName;
+    }
+
+    public String getAuthenticateHeaderName() {
+        return authenticateHeaderName;
+    }
+
+    public String getUserNameProperty() {
+        return userNameProperty;
+    }
+
+    public String getUserPasswordProperty() {
+        return userPasswordProperty;
+    }
+
+    public String getUserRealmProperty() {
+        return userRealmProperty;
+    }
+}

==================================================
WsWebSocketContainer.java
index 030d43b7fb..41b1e1efa2 100644
--- a/java/org/apache/tomcat/websocket/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/LocalStrings.properties
@@ -139,7 +139,7 @@ wsWebSocketContainer.asynchronousSocketChannelFail=Unable to open a connection t
 wsWebSocketContainer.connect.entry=Connecting endpoint instance of type [{0}] to [{1}]
 wsWebSocketContainer.connect.write=Writing the HTTP upgrade request from buffer starting at [{0}] with a limit of [{1}] from local address [{2}]
 wsWebSocketContainer.defaultConfiguratorFail=Failed to create the default configurator
-wsWebSocketContainer.failedAuthentication=Failed to handle HTTP response code [{0}]. Authentication header was not accepted by server.
+wsWebSocketContainer.failedAuthentication=Failed to handle HTTP response code [{0}]. [{1}] header was not accepted by server.
 wsWebSocketContainer.httpRequestFailed=The HTTP request to initiate the WebSocket connection to [{0}] failed
 wsWebSocketContainer.invalidExtensionParameters=The server responded with extension parameters the client is unable to support
 wsWebSocketContainer.invalidHeader=Unable to parse HTTP header as no colon is present to delimit header name and header value in [{0}]. The header has been skipped.
@@ -147,8 +147,8 @@ wsWebSocketContainer.invalidStatus=The HTTP response from the server [{0}] did n
 wsWebSocketContainer.invalidSubProtocol=The WebSocket server returned multiple values for the Sec-WebSocket-Protocol header
 wsWebSocketContainer.maxBuffer=This implementation limits the maximum size of a buffer to Integer.MAX_VALUE
 wsWebSocketContainer.missingAnnotation=Cannot use POJO class [{0}] as it is not annotated with @ClientEndpoint
+wsWebSocketContainer.missingAuthenticateHeader=Failed to handle HTTP response code [{0}]. Missing [{1}] header in response
 wsWebSocketContainer.missingLocationHeader=Failed to handle HTTP response code [{0}]. Missing Location header in response
-wsWebSocketContainer.missingWWWAuthenticateHeader=Failed to handle HTTP response code [{0}]. Missing WWW-Authenticate header in response
 wsWebSocketContainer.pathNoHost=No host was specified in URI
 wsWebSocketContainer.pathWrongScheme=The scheme [{0}] is not supported. The supported schemes are ws and wss
 wsWebSocketContainer.proxyConnectFail=Failed to connect to the configured Proxy [{0}]. The HTTP response code was [{1}]

==================================================
