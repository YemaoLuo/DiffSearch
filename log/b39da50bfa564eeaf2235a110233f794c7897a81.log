b39da50bfa564eeaf2235a110233f794c7897a81
==================================================
Replace explicit types with <>
==================================================
Emmanuel Bourg
==================================================
Thu Dec 3 23:43:49 2020 +0100
==================================================
ReplicationValve.java
Replace explicit types with <>



==================================================
DefaultServlet.java
index 144dbbb304..4e3fca1c03 100644
--- a/java/org/apache/catalina/ha/tcp/ReplicationValve.java
+++ b/java/org/apache/catalina/ha/tcp/ReplicationValve.java
@@ -325,7 +325,7 @@ public class ReplicationValve
                     log.debug(sm.getString("ReplicationValve.crossContext.add"));
                 }
                 //FIXME add Pool of Arraylists
-                crossContextSessions.set(new ArrayList<DeltaSession>());
+                crossContextSessions.set(new ArrayList<>());
             }
             getNext().invoke(request, response);
             if(context != null && cluster != null

==================================================
ContextConfig.java
index 44032aa843..6c133d9e7f 100644
--- a/java/org/apache/catalina/servlets/DefaultServlet.java
+++ b/java/org/apache/catalina/servlets/DefaultServlet.java
@@ -150,7 +150,7 @@ public class DefaultServlet extends HttpServlet {
     /**
      * Full range marker.
      */
-    protected static final Ranges FULL = new Ranges(null, new ArrayList<Ranges.Entry>());
+    protected static final Ranges FULL = new Ranges(null, new ArrayList<>());
 
     private static final ContentRange IGNORE = new ContentRange(null, 0, 0, 0);
 

==================================================
RewriteRule.java
index f47a8bdecd..60adf679da 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -1847,7 +1847,7 @@ public class ContextConfig implements LifecycleListener {
         }
 
         for (ServletContainerInitializer sci : detectedScis) {
-            initializerClassMap.put(sci, new HashSet<Class<?>>());
+            initializerClassMap.put(sci, new HashSet<>());
 
             HandlesTypes ht;
             try {

==================================================
StandardRoot.java
index 833a12c177..ca29223deb 100644
--- a/java/org/apache/catalina/valves/rewrite/RewriteRule.java
+++ b/java/org/apache/catalina/valves/rewrite/RewriteRule.java
@@ -63,7 +63,7 @@ public class RewriteRule {
                 newEnvSubstitution.setSub(s);
                 newEnvSubstitution.parse(maps);
                 envSubstitution.add(newEnvSubstitution);
-                envResult.add(new ThreadLocal<String>());
+                envResult.add(new ThreadLocal<>());
             }
         }
         if (isCookie()) {

==================================================
AbstractProtocol.java
index cc401f2637..0aad50e327 100644
--- a/java/org/apache/catalina/webresources/StandardRoot.java
+++ b/java/org/apache/catalina/webresources/StandardRoot.java
@@ -81,7 +81,7 @@ public class StandardRoot extends LifecycleMBeanBase implements WebResourceRoot
 
     private boolean trackLockedFiles = false;
     private final Set<TrackedWebResource> trackedResources =
-            Collections.newSetFromMap(new ConcurrentHashMap<TrackedWebResource,Boolean>());
+            Collections.newSetFromMap(new ConcurrentHashMap<>());
 
     // Constructs to make iteration over all WebResourceSets simpler
     private final List<WebResourceSet> mainResources = new ArrayList<>();

==================================================
AbstractHttp11Protocol.java
index 06c2f5e81f..239ae2c293 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -87,7 +87,7 @@ public abstract class AbstractProtocol<S> implements ProtocolHandler,
 
 
     private final Set<Processor> waitingProcessors =
-            Collections.newSetFromMap(new ConcurrentHashMap<Processor, Boolean>());
+            Collections.newSetFromMap(new ConcurrentHashMap<>());
 
     /**
      * Controller for the timeout scheduling.

==================================================
NamingContext.java
index 95b602851e..abcec73eef 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -437,7 +437,7 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
      * chunked encoding. They are stored in lower case.
      */
     private Set<String> allowedTrailerHeaders =
-            Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());
+            Collections.newSetFromMap(new ConcurrentHashMap<>());
     public void setAllowedTrailerHeaders(String commaSeparatedHeaders) {
         // Jump through some hoops so we don't end up with an empty set while
         // doing updates.

==================================================
AsyncChannelGroupUtil.java
index a064421b8e..e1ddeffab0 100644
--- a/java/org/apache/naming/NamingContext.java
+++ b/java/org/apache/naming/NamingContext.java
@@ -74,7 +74,7 @@ public class NamingContext implements Context {
      * @param name The name of the associated Catalina Context
      */
     public NamingContext(Hashtable<String,Object> env, String name) {
-        this(env, name, new HashMap<String,NamingEntry>());
+        this(env, name, new HashMap<>());
     }
 
 

==================================================
Constants.java
index fe0136e7f0..6d1413bdaa 100644
--- a/java/org/apache/tomcat/websocket/AsyncChannelGroupUtil.java
+++ b/java/org/apache/tomcat/websocket/AsyncChannelGroupUtil.java
@@ -87,7 +87,7 @@ public class AsyncChannelGroupUtil {
                     0,
                     Integer.MAX_VALUE,
                     Long.MAX_VALUE, TimeUnit.MILLISECONDS,
-                    new SynchronousQueue<Runnable>(),
+                    new SynchronousQueue<>(),
                     new AsyncIOThreadFactory());
 
             try {

==================================================
WsServerContainer.java
index 482a7248b0..5e1d1242ae 100644
--- a/java/org/apache/tomcat/websocket/Constants.java
+++ b/java/org/apache/tomcat/websocket/Constants.java
@@ -146,7 +146,7 @@ public class Constants {
 
     static {
         if (DISABLE_BUILTIN_EXTENSIONS) {
-            INSTALLED_EXTENSIONS = Collections.unmodifiableList(new ArrayList<Extension>());
+            INSTALLED_EXTENSIONS = Collections.unmodifiableList(new ArrayList<>());
         } else {
             List<Extension> installed = new ArrayList<>(1);
             installed.add(new WsExtension("permessage-deflate"));

==================================================
TestWebappClassLoaderExecutorMemoryLeak.java
index e0f7c4f222..40d52cc0e5 100644
--- a/java/org/apache/tomcat/websocket/server/WsServerContainer.java
+++ b/java/org/apache/tomcat/websocket/server/WsServerContainer.java
@@ -429,7 +429,7 @@ public class WsServerContainer extends WsWebSocketContainer
         Set<WsSession> wsSessions = authenticatedSessions.get(httpSessionId);
         if (wsSessions == null) {
             wsSessions = Collections.newSetFromMap(
-                     new ConcurrentHashMap<WsSession,Boolean>());
+                     new ConcurrentHashMap<>());
              authenticatedSessions.putIfAbsent(httpSessionId, wsSessions);
              wsSessions = authenticatedSessions.get(httpSessionId);
         }

==================================================
TestContextConfigAnnotation.java
index ff03a0238c..0f861b7db0 100644
--- a/test/org/apache/catalina/loader/TestWebappClassLoaderExecutorMemoryLeak.java
+++ b/test/org/apache/catalina/loader/TestWebappClassLoaderExecutorMemoryLeak.java
@@ -92,7 +92,7 @@ public class TestWebappClassLoaderExecutorMemoryLeak extends TomcatBaseTest {
             resp.getWriter().println(
                     "The current thread served " + this + " servlet");
             tpe = new ThreadPoolExecutor(tpSize, tpSize, 50000L,
-                    TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());
+                    TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
 
             Task[] tasks = new Task[nTasks];
             for (int i = 0; i < nTasks; i++) {

==================================================
TestUtil.java
index d20af63deb..bf82b93642 100644
--- a/test/org/apache/catalina/startup/TestContextConfigAnnotation.java
+++ b/test/org/apache/catalina/startup/TestContextConfigAnnotation.java
@@ -284,20 +284,18 @@ public class TestContextConfigAnnotation {
 
         // Add an SCI that has no interest in any type
         SCI sciNone = new SCI();
-        config.initializerClassMap.put(sciNone, new HashSet<Class<?>>());
+        config.initializerClassMap.put(sciNone, new HashSet<>());
 
         // Add an SCI with an interest in Servlets
         SCI sciServlet = new SCI();
-        config.initializerClassMap.put(sciServlet, new HashSet<Class<?>>());
-        config.typeInitializerMap.put(Servlet.class,
-                new HashSet<ServletContainerInitializer>());
+        config.initializerClassMap.put(sciServlet, new HashSet<>());
+        config.typeInitializerMap.put(Servlet.class, new HashSet<>());
         config.typeInitializerMap.get(Servlet.class).add(sciServlet);
 
         // Add an SCI with an interest in Objects - i.e. everything
         SCI sciObject = new SCI();
-        config.initializerClassMap.put(sciObject, new HashSet<Class<?>>());
-        config.typeInitializerMap.put(Object.class,
-                new HashSet<ServletContainerInitializer>());
+        config.initializerClassMap.put(sciObject, new HashSet<>());
+        config.typeInitializerMap.put(Object.class, new HashSet<>());
         config.typeInitializerMap.get(Object.class).add(sciObject);
 
         // Scan Servlet, Filter, Servlet, Listener

==================================================
