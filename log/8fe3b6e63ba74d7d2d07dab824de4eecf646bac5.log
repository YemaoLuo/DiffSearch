8fe3b6e63ba74d7d2d07dab824de4eecf646bac5
==================================================
Improvement on header write sync.
==================================================
Remy Maucherat
==================================================
Thu Nov 16 14:11:53 2017 +0000
==================================================
Http2AsyncUpgradeHandler.java
Improvement on header write sync.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1815456 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http2UpgradeHandler.java
index 764c034887..c9e96f9009 100644
--- a/java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2AsyncUpgradeHandler.java
@@ -31,6 +31,7 @@ import java.util.concurrent.TimeUnit;
 import org.apache.coyote.Adapter;
 import org.apache.coyote.ProtocolException;
 import org.apache.coyote.Request;
+import org.apache.tomcat.util.http.MimeHeaders;
 import org.apache.tomcat.util.net.SendfileState;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 import org.apache.tomcat.util.net.SocketWrapperBase.BlockingMode;
@@ -148,6 +149,28 @@ public class Http2AsyncUpgradeHandler extends Http2UpgradeHandler {
     }
 
 
+    @Override
+    void writeHeaders(Stream stream, int pushedStreamId, MimeHeaders mimeHeaders,
+            boolean endOfStream, int payloadSize) throws IOException {
+        // This ensures the Stream processing thread has control of the socket.
+        ByteBuffer[] bufs = null;
+        synchronized (socketWrapper) {
+            AsyncHeaderFrameBuffers headerFrameBuffers = (AsyncHeaderFrameBuffers)
+                    doWriteHeaders(stream, pushedStreamId, mimeHeaders, endOfStream, payloadSize);
+            bufs = headerFrameBuffers.bufs.toArray(BYTEBUFFER_ARRAY);
+        }
+        if (bufs != null) {
+            socketWrapper.write(BlockingMode.SEMI_BLOCK, protocol.getWriteTimeout(),
+                    TimeUnit.MILLISECONDS, null, SocketWrapperBase.COMPLETE_WRITE,
+                    applicationErrorCompletion, bufs);
+            handleAsyncException();
+        }
+        if (endOfStream) {
+            stream.sentEndOfStream();
+        }
+    }
+
+
     @Override
     protected HeaderFrameBuffers getHeaderFrameBuffers(int initialPayloadSize) {
         return new AsyncHeaderFrameBuffers(initialPayloadSize);
@@ -451,10 +474,6 @@ public class Http2AsyncUpgradeHandler extends Http2UpgradeHandler {
 
         @Override
         public void endHeaders() throws IOException {
-            socketWrapper.write(BlockingMode.SEMI_BLOCK, protocol.getWriteTimeout(),
-                    TimeUnit.MILLISECONDS, null, SocketWrapperBase.COMPLETE_WRITE,
-                    applicationErrorCompletion, bufs.toArray(BYTEBUFFER_ARRAY));
-            handleAsyncException();
         }
 
         @Override
@@ -470,6 +489,7 @@ public class Http2AsyncUpgradeHandler extends Http2UpgradeHandler {
         @Override
         public void expandPayload() {
             payloadSize = payloadSize * 2;
+            payload = ByteBuffer.allocate(payloadSize);
         }
     }
 }

==================================================
