7c525a2a03e896a08a471438f3de732c089eaf47
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=57736
==================================================
Mark Thomas
==================================================
Tue Mar 24 10:58:14 2015 +0000
==================================================
JarWarResource.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=57736
Switch to */ in Tomcat's custom format for URLs for resources in JARs packed in WARs rather than ^/ since ^ is not a valid character for URLs as per RFC 2396.
The ^/ format remains support in case apps are using that format directly

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1668843 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WarURLStreamHandler.java
index d6cb1a29d0..0e8c979b79 100644
--- a/java/org/apache/catalina/webresources/JarWarResource.java
+++ b/java/org/apache/catalina/webresources/JarWarResource.java
@@ -37,7 +37,7 @@ public class JarWarResource extends AbstractArchiveResource {
 
     public JarWarResource(AbstractArchiveResourceSet archiveResourceSet, String webAppPath,
             String baseUrl, JarEntry jarEntry, String archivePath) {
-        super(archiveResourceSet, webAppPath, "jar:war:" + baseUrl + "^/" + archivePath,
+        super(archiveResourceSet, webAppPath, "jar:war:" + baseUrl + "*/" + archivePath,
                 jarEntry, "jar:" + baseUrl + "!/" + archivePath);
         this.archivePath = archivePath;
     }

==================================================
JarFactory.java
index 3f012a00f8..09e118f1d3 100644
--- a/java/org/apache/catalina/webresources/WarURLStreamHandler.java
+++ b/java/org/apache/catalina/webresources/WarURLStreamHandler.java
@@ -30,7 +30,11 @@ public class WarURLStreamHandler extends URLStreamHandler {
 
         // Only the path needs to be changed
         String path = "jar:" + spec.substring(4);
-        path = path.replaceFirst("\\^/", "!/");
+        if (path.contains("*/")) {
+            path = path.replaceFirst("\\*/", "!/");
+        } else {
+            path = path.replaceFirst("\\^/", "!/");
+        }
 
         setURL(u, u.getProtocol(), "", -1, null, null,
                 path, null, null);

==================================================
TestWarURLConnection.java
index ab6fda303b..09ccc94b5f 100644
--- a/java/org/apache/tomcat/util/scan/JarFactory.java
+++ b/java/org/apache/tomcat/util/scan/JarFactory.java
@@ -53,7 +53,7 @@ public class JarFactory {
             // Assume this is pointing to a JAR file within a WAR. Java doesn't
             // support jar:jar:file:... so switch to Tomcat's war:file:...
             baseExternal = baseExternal.replaceFirst("^jar:", "war:");
-            baseExternal = baseExternal.replaceFirst("!/", "^/");
+            baseExternal = baseExternal.replaceFirst("!/", "*/");
         }
 
         return new URL("jar:" + baseExternal + "!/" + entryName);

==================================================
TestWarURLStreamHandler.java
index 986318d6c2..6d96afb8de 100644
--- a/test/org/apache/catalina/webresources/TestWarURLConnection.java
+++ b/test/org/apache/catalina/webresources/TestWarURLConnection.java
@@ -38,7 +38,7 @@ public class TestWarURLConnection {
         String fileUrl = f.toURI().toURL().toString();
 
         URL indexHtmlUrl = new URL("jar:war:" + fileUrl +
-                "^/WEB-INF/lib/test.jar!/META-INF/resources/index.html");
+                "*/WEB-INF/lib/test.jar!/META-INF/resources/index.html");
 
         URLConnection urlConn = indexHtmlUrl.openConnection();
         urlConn.connect();

==================================================
TestWarURLStreamHandlerIntegration.java
new file mode 100644
index 0000000000..a4fd036476
--- /dev/null
+++ b/test/org/apache/catalina/webresources/TestWarURLStreamHandler.java
@@ -0,0 +1,50 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.webresources;
+
+import java.io.File;
+import java.net.URL;
+import java.net.URLConnection;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+public class TestWarURLStreamHandler {
+
+    @Before
+    public void register() {
+        TomcatURLStreamHandlerFactory.register();
+    }
+
+
+    @Test
+    public void testOldFormat() throws Exception {
+        File f = new File("test/webresources/war-url-connection.war");
+        String fileUrl = f.toURI().toURL().toString();
+
+        URL indexHtmlUrl = new URL("jar:war:" + fileUrl +
+                "^/WEB-INF/lib/test.jar!/META-INF/resources/index.html");
+
+        URLConnection urlConn = indexHtmlUrl.openConnection();
+        urlConn.connect();
+
+        int size = urlConn.getContentLength();
+
+        Assert.assertEquals(137, size);
+    }
+}

==================================================
