5903fc342dee2b514c60f2476aa17d594b87dc4e
==================================================
Pull up finish() so output() is used consistently to wrote closing message
==================================================
Mark Emlyn
==================================================
Tue Aug 23 12:19:20 2011 +0000
==================================================
AbstractAjpProcessor.java
Pull up finish() so output() is used consistently to wrote closing message

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1160652 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AjpAprProcessor.java
index 0acc719c57..9ed4df0d08 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
@@ -537,7 +537,6 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
 
     // Methods called by action()
     protected abstract void actionInternal(ActionCode actionCode, Object param);
-    protected abstract void finish() throws IOException;
 
     // Methods called by prepareResponse()
     protected abstract void output(byte[] src, int offset, int length)
@@ -939,6 +938,35 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
     }
 
 
+    /**
+     * Finish AJP response.
+     */
+    protected void finish() throws IOException {
+
+        if (!response.isCommitted()) {
+            // Validate and write response headers
+            try {
+                prepareResponse();
+            } catch (IOException e) {
+                // Set error flag
+                error = true;
+            }
+        }
+
+        if (finished)
+            return;
+
+        finished = true;
+
+        // Add the end message
+        if (error) {
+            output(endAndCloseMessageArray, 0, endAndCloseMessageArray.length);
+        } else {
+            output(endMessageArray, 0, endMessageArray.length);
+        }
+    }
+
+
     // ------------------------------------- InputStreamInputBuffer Inner Class
 
 

==================================================
AjpNioProcessor.java
index 70c6fb8387..7db138a91c 100644
--- a/java/org/apache/coyote/ajp/AjpAprProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpAprProcessor.java
@@ -281,43 +281,6 @@ public class AjpAprProcessor extends AbstractAjpProcessor<Long> {
     }
 
 
-    /**
-     * Finish AJP response.
-     */
-    @Override
-    protected void finish() throws IOException {
-
-        if (!response.isCommitted()) {
-            // Validate and write response headers
-            try {
-                prepareResponse();
-            } catch (IOException e) {
-                // Set error flag
-                error = true;
-            }
-        }
-
-        if (finished)
-            return;
-
-        finished = true;
-
-        // Add the end message
-        byte[] messageArray;
-        if (error) {
-            messageArray = endAndCloseMessageArray;
-        } else {
-            messageArray = endMessageArray;
-        }
-        if (outputBuffer.position() + messageArray.length > outputBuffer.capacity()) {
-            flush(false);
-        }
-        outputBuffer.put(messageArray);
-        flush(false);
-
-    }
-
-
     /**
      * Read at least the specified amount of bytes, and place them
      * in the input buffer.

==================================================
AjpProcessor.java
index 48f1d9b652..de98eb6680 100644
--- a/java/org/apache/coyote/ajp/AjpNioProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpNioProcessor.java
@@ -292,37 +292,6 @@ public class AjpNioProcessor extends AbstractAjpProcessor<NioChannel> {
         writeBuffer.clear();
     }
 
-    /**
-     * Finish AJP response.
-     */
-    @Override
-    protected void finish() throws IOException {
-
-        if (!response.isCommitted()) {
-            // Validate and write response headers
-            try {
-                prepareResponse();
-            } catch (IOException e) {
-                // Set error flag
-                error = true;
-            }
-        }
-
-        if (finished)
-            return;
-
-        finished = true;
-
-        // Add the end message
-        byte[] messageArray;
-        if (error) {
-            messageArray = endAndCloseMessageArray;
-        } else {
-            messageArray = endMessageArray;
-        }
-        output(messageArray, 0, messageArray.length);
-    }
-
 
     /**
      * Read the specified amount of bytes, and place them in the input buffer.

==================================================
