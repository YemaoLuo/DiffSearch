1ea52cb790652fa16f664224ab0e62de457ce3cf
==================================================
Whitespace removal from /java/org/apache/catalina/session
==================================================
Mark Emlyn
==================================================
Sat Oct 22 21:13:48 2011 +0000
==================================================
Constants.java
Whitespace removal from /java/org/apache/catalina/session

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1187795 13f79535-47bb-0310-9956-ffa450edef68



==================================================
FileStore.java
index 24546879e5..3350345702 100644
--- a/java/org/apache/catalina/session/Constants.java
+++ b/java/org/apache/catalina/session/Constants.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
JDBCStore.java
index 79f87296a7..ab8e382d50 100644
--- a/java/org/apache/catalina/session/FileStore.java
+++ b/java/org/apache/catalina/session/FileStore.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -199,7 +199,7 @@ public final class FileStore extends StoreBase {
         }
 
         String files[] = file.list();
-        
+
         // Bugzilla 32130
         if((files == null) || (files.length < 1)) {
             return (new String[0]);

==================================================
ManagerBase.java
index 6037ed0d53..c9ad121cde 100644
--- a/java/org/apache/catalina/session/LocalStrings.properties
+++ b/java/org/apache/catalina/session/LocalStrings.properties
@@ -19,7 +19,7 @@ fileStore.saving=Saving Session {0} to file {1}
 fileStore.loading=Loading Session {0} from file {1}
 fileStore.removing=Removing Session {0} at file {1}
 fileStore.deleteFailed=Unable to delete file [{0}] which is preventing the creation of the session storage location
-fileStore.createFailed=Unable to create directory [{0}] for the storage of session data 
+fileStore.createFailed=Unable to create directory [{0}] for the storage of session data
 JDBCStore.close=Exception closing database connection {0}
 JDBCStore.saving=Saving Session {0} to database {1}
 JDBCStore.loading=Loading Session {0} from database {1}
@@ -58,7 +58,7 @@ standardSession.getLastAccessedTime.ise=getLastAccessedTime: Session already inv
 standardSession.getId.ise=getId: Session already invalidated
 standardSession.getMaxInactiveInterval.ise=getMaxInactiveInterval: Session already invalidated
 standardSession.getValueNames.ise=getValueNames: Session already invalidated
-standardSession.logoutfail=Exception logging out user when expiring session 
+standardSession.logoutfail=Exception logging out user when expiring session
 standardSession.notSerializable=Cannot serialize session attribute {0} for session {1}
 standardSession.removeAttribute.ise=removeAttribute: Session already invalidated
 standardSession.sessionEvent=Session event listener threw exception

==================================================
PersistentManager.java
index a73e911f3c..c57ee26cb2 100644
--- a/java/org/apache/catalina/session/ManagerBase.java
+++ b/java/org/apache/catalina/session/ManagerBase.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -120,7 +120,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
 
     /**
      * The name of the provider to use to create instances of
-     * {@link java.security.SecureRandom} which are used to generate session IDs. 
+     * {@link java.security.SecureRandom} which are used to generate session IDs.
      * If no algorithm is specified the of SHA1PRNG default is used. If an
      * invalid algorithm and/or provider is specified the SecureRandom instances
      * will be created using the defaults. If that fails, the SecureRandom
@@ -206,7 +206,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
      * The property change support for this component.
      */
     protected PropertyChangeSupport support = new PropertyChangeSupport(this);
-    
+
 
     // ------------------------------------------------------------- Properties
 
@@ -421,7 +421,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
 
     /**
      * Number of session creations that failed due to maxActiveSessions
-     * 
+     *
      * @return The count
      */
     @Override
@@ -458,7 +458,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     public void setProcessingTime(long processingTime) {
         this.processingTime = processingTime;
     }
-    
+
     /**
      * Return the frequency of manager checks.
      */
@@ -507,7 +507,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
         long timeNow = System.currentTimeMillis();
         Session sessions[] = findSessions();
         int expireHere = 0 ;
-        
+
         if(log.isDebugEnabled())
             log.debug("Start expire sessions " + getName() + " at " + timeNow + " sessioncount " + sessions.length);
         for (int i = 0; i < sessions.length; i++) {
@@ -524,9 +524,9 @@ public abstract class ManagerBase extends LifecycleMBeanBase
 
     @Override
     protected void initInternal() throws LifecycleException {
-        
+
         super.initInternal();
-        
+
         setDistributable(((Context) getContainer()).getDistributable());
     }
 
@@ -599,10 +599,10 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     /**
      * Construct and return a new session object, based on the default
      * settings specified by this Manager's properties.  The session
-     * id specified will be used as the session id.  
-     * If a new session cannot be created for any reason, return 
+     * id specified will be used as the session id.
+     * If a new session cannot be created for any reason, return
      * <code>null</code>.
-     * 
+     *
      * @param sessionId The session id which should be used to create the
      *  new session; if <code>null</code>, a new session id will be
      *  generated
@@ -611,14 +611,14 @@ public abstract class ManagerBase extends LifecycleMBeanBase
      */
     @Override
     public Session createSession(String sessionId) {
-        
+
         if ((maxActiveSessions >= 0) &&
                 (getActiveSessions() >= maxActiveSessions)) {
             rejectedSessions++;
             throw new IllegalStateException(
                     sm.getString("managerBase.createSession.ise"));
         }
-        
+
         // Recycle or create a Session instance
         Session session = createEmptySession();
 
@@ -642,8 +642,8 @@ public abstract class ManagerBase extends LifecycleMBeanBase
         return (session);
 
     }
-    
-    
+
+
     /**
      * Get a session from the recycled ones or create a new empty one.
      * The PersistentManager manager does not need to create session data
@@ -697,7 +697,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     public void remove(Session session) {
         remove(session, false);
     }
-    
+
     /**
      * Remove this Session from the active Sessions for this Manager.
      *
@@ -706,7 +706,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
      */
     @Override
     public void remove(Session session, boolean update) {
-        
+
         // If the session has expired - as opposed to just being removed from
         // the manager because it is being persisted - update the expired stats
         if (update) {
@@ -744,7 +744,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     /**
      * Change the session ID of the current session to a new randomly generated
      * session ID.
-     * 
+     *
      * @param session   The session to change the session ID for
      */
     @Override
@@ -755,8 +755,8 @@ public abstract class ManagerBase extends LifecycleMBeanBase
         container.fireContainerEvent(Context.CHANGE_SESSION_ID_EVENT,
                 new String[] {oldId, newId});
     }
-    
-    
+
+
     // ------------------------------------------------------ Protected Methods
 
 
@@ -781,9 +781,9 @@ public abstract class ManagerBase extends LifecycleMBeanBase
             }
 
             result = sessionIdGenerator.generateSessionId();
-            
+
         } while (sessions.containsKey(result));
-        
+
         return result;
     }
 
@@ -826,7 +826,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
-    /** 
+    /**
      * Total sessions created by this manager.
      *
      * @return sessions created
@@ -837,7 +837,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
-    /** 
+    /**
      * Number of duplicated session IDs generated by the random source.
      * Anything bigger than 0 means problems.
      *
@@ -853,7 +853,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
-    /** 
+    /**
      * Returns the number of active sessions
      *
      * @return number of sessions active
@@ -942,8 +942,8 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     /**
      * Updates the sessionMaxAliveTime attribute if the candidate value is
      * larger than the current value.
-     * 
-     * @param sessionAliveTime  The candidate value (in seconds) for the new 
+     *
+     * @param sessionAliveTime  The candidate value (in seconds) for the new
      *                          sessionMaxAliveTime value.
      */
     public void updateSessionMaxAliveTime(int sessionAliveTime) {
@@ -960,7 +960,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
      * Gets the average time (in seconds) that expired sessions had been
      * alive based on the last 100 sessions to expire. If less than
      * 100 sessions have expired then all available data is used.
-     * 
+     *
      * @return Average time (in seconds) that expired sessions had been
      * alive.
      */
@@ -971,12 +971,12 @@ public abstract class ManagerBase extends LifecycleMBeanBase
         synchronized (sessionExpirationTiming) {
             copy.addAll(sessionExpirationTiming);
         }
-        
+
         // Init
         int counter = 0;
         int result = 0;
         Iterator<SessionTiming> iter = copy.iterator();
-        
+
         // Calculate average
         while (iter.hasNext()) {
             SessionTiming timing = iter.next();
@@ -991,12 +991,12 @@ public abstract class ManagerBase extends LifecycleMBeanBase
         return result;
     }
 
-    
+
     /**
      * Gets the current rate of session creation (in session per minute) based
      * on the creation time of the previous 100 sessions created. If less than
      * 100 sessions have been created then all available data is used.
-     * 
+     *
      * @return  The current rate (in sessions per minute) of session creation
      */
     @Override
@@ -1007,13 +1007,13 @@ public abstract class ManagerBase extends LifecycleMBeanBase
         synchronized (sessionCreationTiming) {
             copy.addAll(sessionCreationTiming);
         }
-        
+
         // Init
         long oldest = now;
         int counter = 0;
         int result = 0;
         Iterator<SessionTiming> iter = copy.iterator();
-        
+
         // Calculate rate
         while (iter.hasNext()) {
             SessionTiming timing = iter.next();
@@ -1033,13 +1033,13 @@ public abstract class ManagerBase extends LifecycleMBeanBase
         }
         return result;
     }
-    
+
 
     /**
      * Gets the current rate of session expiration (in session per minute) based
      * on the expiry time of the previous 100 sessions expired. If less than
      * 100 sessions have expired then all available data is used.
-     * 
+     *
      * @return  The current rate (in sessions per minute) of session expiration
      */
     @Override
@@ -1050,13 +1050,13 @@ public abstract class ManagerBase extends LifecycleMBeanBase
         synchronized (sessionExpirationTiming) {
             copy.addAll(sessionExpirationTiming);
         }
-        
+
         // Init
         long oldest = now;
         int counter = 0;
         int result = 0;
         Iterator<SessionTiming> iter = copy.iterator();
-        
+
         // Calculate rate
         while (iter.hasNext()) {
             SessionTiming timing = iter.next();
@@ -1079,7 +1079,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
-    /** 
+    /**
      * For debugging: return a list of all session ids currently active
      *
      */
@@ -1093,7 +1093,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
     }
 
 
-    /** 
+    /**
      * For debugging: get a session attribute
      *
      * @param sessionId
@@ -1115,12 +1115,12 @@ public abstract class ManagerBase extends LifecycleMBeanBase
 
     /**
      * Returns information about the session with the given session id.
-     * 
-     * <p>The session information is organized as a HashMap, mapping 
+     *
+     * <p>The session information is organized as a HashMap, mapping
      * session attribute names to the String representation of their values.
      *
      * @param sessionId Session id
-     * 
+     *
      * @return HashMap mapping session attribute names to the String
      * representation of their values, or null if no session with the
      * specified id exists, or if the session does not have any attributes
@@ -1210,7 +1210,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
         return s.getCreationTime();
     }
 
-    
+
     /**
      * Return a String rendering of this object.
      */
@@ -1226,14 +1226,14 @@ public abstract class ManagerBase extends LifecycleMBeanBase
         sb.append(']');
         return sb.toString();
     }
-    
-    
+
+
     // -------------------- JMX and Registration  --------------------
     @Override
     public String getObjectNameKeyProperties() {
-        
+
         StringBuilder name = new StringBuilder("type=Manager");
-        
+
         if (container instanceof Context) {
             name.append(",context=");
             String contextName = container.getName();
@@ -1241,7 +1241,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
                 name.append('/');
             }
             name.append(contextName);
-            
+
             Context context = (Context) container;
             name.append(",host=");
             name.append(context.getParent().getName());
@@ -1263,7 +1263,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
 
     /**
      * Process property change events from our associated Context.
-     * 
+     *
      * @param event
      *            The property change event that has occurred
      */
@@ -1273,7 +1273,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
         // Validate the source of this event
         if (!(event.getSource() instanceof Context))
             return;
-        
+
         // Process a relevant property change
         if (event.getPropertyName().equals("sessionTimeout")) {
             try {
@@ -1285,18 +1285,18 @@ public abstract class ManagerBase extends LifecycleMBeanBase
             }
         }
     }
-    
+
     // ----------------------------------------------------------- Inner classes
-    
+
     protected static final class SessionTiming {
         private long timestamp;
         private int duration;
-        
+
         public SessionTiming(long timestamp, int duration) {
             this.timestamp = timestamp;
             this.duration = duration;
         }
-        
+
         /**
          * Time stamp associated with this piece of timing information in
          * milliseconds.
@@ -1304,7 +1304,7 @@ public abstract class ManagerBase extends LifecycleMBeanBase
         public long getTimestamp() {
             return timestamp;
         }
-        
+
         /**
          * Duration associated with this piece of timing information in seconds.
          */

==================================================
PersistentManagerBase.java
index e94e7e97b2..f3047487dd 100644
--- a/java/org/apache/catalina/session/PersistentManager.java
+++ b/java/org/apache/catalina/session/PersistentManager.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
StandardManager.java
index db0120e018..041bdcac66 100644
--- a/java/org/apache/catalina/session/PersistentManagerBase.java
+++ b/java/org/apache/catalina/session/PersistentManagerBase.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -64,15 +64,15 @@ public abstract class PersistentManagerBase extends ManagerBase {
         public Void run() throws Exception{
            store.clear();
            return null;
-        }                       
-    }   
-     
+        }
+    }
+
     private class PrivilegedStoreRemove
         implements PrivilegedExceptionAction<Void> {
 
-        private String id;    
-            
-        PrivilegedStoreRemove(String id) {     
+        private String id;
+
+        PrivilegedStoreRemove(String id) {
             this.id = id;
         }
 
@@ -80,30 +80,30 @@ public abstract class PersistentManagerBase extends ManagerBase {
         public Void run() throws Exception{
            store.remove(id);
            return null;
-        }                       
-    }   
-     
+        }
+    }
+
     private class PrivilegedStoreLoad
         implements PrivilegedExceptionAction<Session> {
 
-        private String id;    
-            
-        PrivilegedStoreLoad(String id) {     
+        private String id;
+
+        PrivilegedStoreLoad(String id) {
             this.id = id;
         }
 
         @Override
         public Session run() throws Exception{
            return store.load(id);
-        }                       
-    }   
-          
+        }
+    }
+
     private class PrivilegedStoreSave
         implements PrivilegedExceptionAction<Void> {
 
-        private Session session;    
-            
-        PrivilegedStoreSave(Session session) {     
+        private Session session;
+
+        PrivilegedStoreSave(Session session) {
             this.session = session;
         }
 
@@ -111,9 +111,9 @@ public abstract class PersistentManagerBase extends ManagerBase {
         public Void run() throws Exception{
            store.save(session);
            return null;
-        }                       
-    }   
-     
+        }
+    }
+
     private class PrivilegedStoreKeys
         implements PrivilegedExceptionAction<String[]> {
 
@@ -124,7 +124,7 @@ public abstract class PersistentManagerBase extends ManagerBase {
         @Override
         public String[] run() throws Exception{
            return store.keys();
-        }                       
+        }
     }
 
     // ----------------------------------------------------- Instance Variables
@@ -380,7 +380,7 @@ public abstract class PersistentManagerBase extends ManagerBase {
         if (store == null)
             return;
 
-        try {     
+        try {
             if (SecurityUtil.isPackageProtectionEnabled()){
                 try{
                     AccessController.doPrivileged(new PrivilegedStoreClear());
@@ -404,7 +404,7 @@ public abstract class PersistentManagerBase extends ManagerBase {
      */
     @Override
     public void processExpires() {
-        
+
         long timeNow = System.currentTimeMillis();
         Session sessions[] = findSessions();
         int expireHere = 0 ;
@@ -420,12 +420,12 @@ public abstract class PersistentManagerBase extends ManagerBase {
         if ((getStore() != null) && (getStore() instanceof StoreBase)) {
             ((StoreBase) getStore()).processExpires();
         }
-        
+
         long timeEnd = System.currentTimeMillis();
         if(log.isDebugEnabled())
              log.debug("End expire sessions " + getName() + " processingTime " + (timeEnd - timeNow) + " expired sessions: " + expireHere);
         processingTime += (timeEnd - timeNow);
-         
+
     }
 
 
@@ -567,13 +567,13 @@ public abstract class PersistentManagerBase extends ManagerBase {
         }
     }
 
-    
+
     /**
      * Remove this Session from the active Sessions for this Manager,
      * and from the Store.
      *
      * @param id Session's id to be removed
-     */    
+     */
     protected void removeSession(String id){
         try {
             if (SecurityUtil.isPackageProtectionEnabled()){
@@ -586,10 +586,10 @@ public abstract class PersistentManagerBase extends ManagerBase {
                 }
             } else {
                  store.remove(id);
-            }               
+            }
         } catch (IOException e) {
             log.error("Exception removing session  " + e.getMessage(), e);
-        }        
+        }
     }
 
     /**
@@ -776,7 +776,7 @@ public abstract class PersistentManagerBase extends ManagerBase {
                 }
             } else {
                  store.save(session);
-            }   
+            }
         } catch (IOException e) {
             log.error(sm.getString
                 ("persistentManager.serializeError", session.getIdInternal(), e));
@@ -821,7 +821,7 @@ public abstract class PersistentManagerBase extends ManagerBase {
             log.debug("Stopping");
 
         setState(LifecycleState.STOPPING);
-        
+
         if (getStore() != null && saveOnRestart) {
             unload();
         } else {
@@ -967,7 +967,7 @@ public abstract class PersistentManagerBase extends ManagerBase {
                                 ("persistentManager.backupMaxIdle",
                                 session.getIdInternal(),
                                 Integer.valueOf(timeIdle)));
-    
+
                         try {
                             writeSession(session);
                         } catch (IOException e) {

==================================================
StandardSession.java
index 9c2b209ae5..26d0cfcf6b 100644
--- a/java/org/apache/catalina/session/StandardManager.java
+++ b/java/org/apache/catalina/session/StandardManager.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -470,7 +470,7 @@ public class StandardManager extends ManagerBase {
             log.debug("Stopping");
 
         setState(LifecycleState.STOPPING);
-        
+
         // Write out sessions
         try {
             unload();

==================================================
StandardSessionFacade.java
index 523d0f31fd..ddb068cc0c 100644
--- a/java/org/apache/catalina/session/StandardSession.java
+++ b/java/org/apache/catalina/session/StandardSession.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -92,7 +92,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
 
     static {
         STRICT_SERVLET_COMPLIANCE = Globals.STRICT_SERVLET_COMPLIANCE;
-        
+
         String activityCheck = System.getProperty(
                 "org.apache.catalina.session.StandardSession.ACTIVITY_CHECK");
         if (activityCheck == null) {
@@ -111,7 +111,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
                 Boolean.valueOf(lastAccessAtStart).booleanValue();
         }
     }
-    
+
 
     // ----------------------------------------------------------- Constructors
 
@@ -240,7 +240,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
      */
     protected volatile boolean isValid = false;
 
-    
+
     /**
      * Internal notes associated with this session by Catalina components
      * and event listeners.  <b>IMPLEMENTATION NOTE:</b> This object is
@@ -291,7 +291,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
      */
     protected transient AtomicInteger accessCount = null;
 
-    
+
     // ----------------------------------------------------- Session Properties
 
 
@@ -385,7 +385,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
 
         if (manager != null)
             manager.add(this);
-        
+
         if (notify) {
             tellNew();
         }
@@ -637,7 +637,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
             return true;
         }
 
-        if (maxInactiveInterval >= 0) { 
+        if (maxInactiveInterval >= 0) {
             long timeNow = System.currentTimeMillis();
             int timeIdle;
             if (LAST_ACCESS_AT_START) {
@@ -759,11 +759,11 @@ public class StandardSession implements HttpSession, Session, Serializable {
 
             // Mark this session as "being expired"
             expiring = true;
-        
+
             // Notify interested application event listeners
             // FIXME - Assumes we call listeners in reverse order
             Context context = (Context) manager.getContainer();
-            
+
             // The call to expire() may not have been triggered by the webapp.
             // Make sure the webapp's class loader is set when calling the
             // listeners
@@ -904,7 +904,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
         if (ACTIVITY_CHECK) {
             accessCount = new AtomicInteger();
         }
-        
+
         // Notify interested session event listeners
         fireSessionEvent(Session.SESSION_ACTIVATED_EVENT, null);
 
@@ -1446,7 +1446,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
                     ((HttpSessionBindingListener) value).valueBound(event);
                 } catch (Throwable t){
                     manager.getContainer().getLogger().error
-                    (sm.getString("standardSession.bindingEvent"), t); 
+                    (sm.getString("standardSession.bindingEvent"), t);
                 }
             }
         }
@@ -1466,9 +1466,9 @@ public class StandardSession implements HttpSession, Session, Serializable {
                     (sm.getString("standardSession.bindingEvent"), t);
             }
         }
-        
+
         if ( !notify ) return;
-        
+
         // Notify interested application event listeners
         Context context = (Context) manager.getContainer();
         Object listeners[] = context.getApplicationEventListeners();
@@ -1652,7 +1652,7 @@ public class StandardSession implements HttpSession, Session, Serializable {
             Object value = attributes.get(keys[i]);
             if (value == null)
                 continue;
-            else if ( (value instanceof Serializable) 
+            else if ( (value instanceof Serializable)
                     && (!exclude(keys[i]) )) {
                 saveNames.add(keys[i]);
                 saveValues.add(value);

==================================================
StoreBase.java
index e2ddc3e3fb..a2f2e6fb8f 100644
--- a/java/org/apache/catalina/session/StandardSessionFacade.java
+++ b/java/org/apache/catalina/session/StandardSessionFacade.java
@@ -5,9 +5,9 @@
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
- * 
+ *
  *      http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

==================================================
