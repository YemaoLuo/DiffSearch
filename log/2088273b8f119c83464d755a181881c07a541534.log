2088273b8f119c83464d755a181881c07a541534
==================================================
Refactoring.
==================================================
Mark Emlyn
==================================================
Wed Aug 28 10:20:21 2013 +0000
==================================================
AbstractInputBuffer.java
Refactoring.
Pull up code from NIO that also does a non-blocking read in the available() call. This makes NIO and APR consistent. BIO is unaffected as it overrides available() and always returns 1.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1518144 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InternalNioInputBuffer.java
index b84d4093ac..3765af4d67 100644
--- a/java/org/apache/coyote/http11/AbstractInputBuffer.java
+++ b/java/org/apache/coyote/http11/AbstractInputBuffer.java
@@ -343,6 +343,21 @@ public abstract class AbstractInputBuffer<S> implements InputBuffer{
                 available = activeFilters[i].available();
             }
         }
+        if (available > 0) {
+            return available;
+        }
+
+        try {
+            available = nbRead();
+        } catch (IOException ioe) {
+            if (getLog().isDebugEnabled()) {
+                getLog().debug(sm.getString("iib.available.readFail"), ioe);
+            }
+            // Not ideal. This will indicate that data is available which should
+            // trigger a read which in turn will trigger another IOException and
+            // that one can be thrown.
+            available = 1;
+        }
         return available;
     }
 

==================================================
