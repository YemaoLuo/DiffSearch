4215642b4880616d60684c5c62a99bda8445e69d
==================================================
Revert the parallel ByteBuffer idea
==================================================
Mark Thomas
==================================================
Thu Jan 15 09:20:42 2015 +0000
==================================================
AbstractInputBuffer.java
Revert the parallel ByteBuffer idea

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1651998 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InternalAprInputBuffer.java
index 1053ef1fce..c4a30b5bdc 100644
--- a/java/org/apache/coyote/http11/AbstractInputBuffer.java
+++ b/java/org/apache/coyote/http11/AbstractInputBuffer.java
@@ -118,26 +118,10 @@ public abstract class AbstractInputBuffer<S> implements InputBuffer{
 
 
     /**
-     * The read buffer represented as a byte[].
-     * <p>
-     * SocketWrapper uses ByteBuffer (since reading from socket to ByteBuffer is
-     * the only API common to all current I/O implementations) but this class
-     * uses byte[] since that is more efficient for parsing. readByteBuffer
-     * therefore wraps buf. The byte[] representation is only used for reading.
-     * The ByteBuffer representation is only used for writing.
+     * The read buffer.
      */
     protected byte[] buf;
 
-    /**
-     * The read buffer represented as a ByteBuffer.
-     * <p>
-     * SocketWrapper uses ByteBuffer (since reading from socket to ByteBuffer is
-     * the only API common to all current I/O implementations) but this class
-     * uses byte[] since that is more efficient for parsing. readByteBuffer
-     * therefore wraps buf. The byte[] representation is only used for reading.
-     * The ByteBuffer representation is only used for writing.
-     */
-    protected ByteBuffer readByteBuffer;
 
     /**
      * Last valid byte.
@@ -387,7 +371,6 @@ public abstract class AbstractInputBuffer<S> implements InputBuffer{
 
         // Reset pointers
         lastValid = lastValid - pos;
-        readByteBuffer.position(lastValid);
         pos = 0;
         lastActiveFilter = -1;
         parsingHeader = true;
@@ -648,8 +631,6 @@ public abstract class AbstractInputBuffer<S> implements InputBuffer{
             byte[] tmp = new byte[newsize];
             System.arraycopy(buf,0,tmp,0,buf.length);
             buf = tmp;
-            readByteBuffer = ByteBuffer.wrap(buf);
-            readByteBuffer.position(lastValid);
         }
     }
 

==================================================
InternalNio2InputBuffer.java
index 4a64599760..f3425a9ad9 100644
--- a/java/org/apache/coyote/http11/InternalAprInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalAprInputBuffer.java
@@ -17,7 +17,6 @@
 package org.apache.coyote.http11;
 
 import java.io.IOException;
-import java.nio.ByteBuffer;
 
 import org.apache.coyote.InputBuffer;
 import org.apache.coyote.Request;
@@ -85,7 +84,6 @@ public class InternalAprInputBuffer extends AbstractInputBuffer<Long> {
         int bufLength = Math.max(headerBufferSize, 8192);
         if (buf == null || buf.length < bufLength) {
             buf = new byte[bufLength];
-            readByteBuffer = ByteBuffer.wrap(buf);
         }
     }
 

==================================================
InternalNioInputBuffer.java
index c6e5ea2aa7..ae205ab9f2 100644
--- a/java/org/apache/coyote/http11/InternalNio2InputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNio2InputBuffer.java
@@ -146,7 +146,6 @@ public class InternalNio2InputBuffer extends AbstractInputBuffer<Nio2Channel> {
         int bufLength = headerBufferSize + socketReadBufferSize;
         if (buf == null || buf.length < bufLength) {
             buf = new byte[bufLength];
-            readByteBuffer = ByteBuffer.wrap(buf);
         }
 
         // Initialize the completion handler

==================================================
