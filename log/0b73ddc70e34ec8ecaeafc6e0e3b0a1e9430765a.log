0b73ddc70e34ec8ecaeafc6e0e3b0a1e9430765a
==================================================
No need to return value from doWrite so remove it allowing slightly
==================================================
Mark Thomas
==================================================
Mon Jan 12 08:59:59 2015 +0000
==================================================
AprEndpoint.java
No need to return value from doWrite so remove it allowing slightly
simpler code.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1651046 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Nio2Endpoint.java
index 05c63b69af..da980163d3 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -2509,7 +2509,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
 
 
         @Override
-        protected int doWrite(boolean block) throws IOException {
+        protected void doWrite(boolean block) throws IOException {
             if (closed) {
                 throw new IOException(sm.getString("apr.closed", getSocket()));
             }
@@ -2520,7 +2520,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
             readLock.lock();
             try {
                 if (getBlockingStatus() == block) {
-                    return doWriteInternal();
+                    doWriteInternal();
                 }
             } finally {
                 readLock.unlock();
@@ -2540,7 +2540,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
                 readLock.lock();
                 try {
                     writeLock.unlock();
-                    return doWriteInternal();
+                    doWriteInternal();
                 } finally {
                     readLock.unlock();
                 }
@@ -2554,13 +2554,12 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
         }
 
 
-        private int doWriteInternal() throws IOException {
+        private void doWriteInternal() throws IOException {
             if (!writeBufferFlipped) {
                 socketWriteBuffer.flip();
                 writeBufferFlipped = true;
             }
 
-            int written = 0;
             int thisTime;
 
             do {
@@ -2599,7 +2598,6 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
                     throw new IOException(sm.getString("socket.apr.write.error",
                             Integer.valueOf(-thisTime), getSocket(), this));
                 }
-                written += thisTime;
                 socketWriteBuffer.position(socketWriteBuffer.position() + thisTime);
             } while ((thisTime > 0 || getBlockingStatus()) && socketWriteBuffer.hasRemaining());
 
@@ -2611,8 +2609,6 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
             // write further up the stack. This is to ensure the socket is only
             // registered for write once as both container and user code can trigger
             // write registration.
-
-            return written;
         }
 
 

==================================================
NioEndpoint.java
index f263217745..878741cb24 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -1153,18 +1153,15 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
          *              blocking case
          */
         @Override
-        protected int doWrite(boolean block) throws IOException {
-            int result = -1;
+        protected void doWrite(boolean block) throws IOException {
             try {
                 socketWriteBuffer.flip();
-                result = socketWriteBuffer.remaining();
                 while (socketWriteBuffer.hasRemaining()) {
                     if (getSocket().write(socketWriteBuffer).get(getTimeout(), TimeUnit.MILLISECONDS).intValue() < 0) {
                         throw new EOFException(sm.getString("iob.failedwrite"));
                     }
                 }
                 socketWriteBuffer.clear();
-                return result;
             } catch (ExecutionException e) {
                 if (e.getCause() instanceof IOException) {
                     throw (IOException) e.getCause();

==================================================
SocketWrapperBase.java
index 0c91af0507..eec85b2e0f 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -1512,14 +1512,12 @@ public class NioEndpoint extends AbstractEndpoint<NioChannel> {
 
 
         @Override
-        protected synchronized int doWrite(boolean block)
-                throws IOException {
+        protected synchronized void doWrite(boolean block) throws IOException {
             if (!writeBufferFlipped) {
                 socketWriteBuffer.flip();
                 writeBufferFlipped = true;
             }
 
-            int written = 0;
             long writeTimeout = getWriteTimeout();
             Selector selector = null;
             try {
@@ -1528,7 +1526,7 @@ public class NioEndpoint extends AbstractEndpoint<NioChannel> {
                 // Ignore
             }
             try {
-                written = pool.write(socketWriteBuffer, getSocket(), selector, writeTimeout, block);
+                pool.write(socketWriteBuffer, getSocket(), selector, writeTimeout, block);
                 // Make sure we are flushed
                 do {
                     if (getSocket().flush(true, selector, writeTimeout)) break;
@@ -1546,8 +1544,6 @@ public class NioEndpoint extends AbstractEndpoint<NioChannel> {
             // write further up the stack. This is to ensure the socket is only
             // registered for write once as both container and user code can trigger
             // write registration.
-
-            return written;
         }
 
 

==================================================
