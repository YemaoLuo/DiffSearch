9621e6d46ae3de3f80d599d5fc70871b5ab208ad
==================================================
Use some existing constants instead of inline numbers
==================================================
Rainer Jung
==================================================
Tue Mar 24 10:35:53 2009 +0000
==================================================
ChannelNioSocket.java
Use some existing constants instead of inline numbers
in AJP connectors.


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@757706 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ChannelSocket.java
index db93c10f1f..93c3f26387 100644
--- a/java/org/apache/jk/common/ChannelNioSocket.java
+++ b/java/org/apache/jk/common/ChannelNioSocket.java
@@ -100,8 +100,8 @@ public class ChannelNioSocket extends JkHandler
     private int socketTimeout = 0;
     private boolean nioIsBroken = false;
     private Selector selector = null;
-    private int bufferSize = 8*1024;
-    private int packetSize = 8*1024;
+    private int bufferSize = AjpConstants.MAX_PACKET_SIZE;
+    private int packetSize = AjpConstants.MAX_PACKET_SIZE;
 
     private long requestCount=0;
     
@@ -154,7 +154,7 @@ public class ChannelNioSocket extends JkHandler
     }
 
     public void setBufferSize(int bs) {
-        if(bs > 8*1024) {
+        if(bs > AjpConstants.MAX_PACKET_SIZE) {
             bufferSize = bs;
         }
     }
@@ -164,8 +164,8 @@ public class ChannelNioSocket extends JkHandler
     }
 
     public void setPacketSize(int ps) {
-        if(ps < 8*1024) {
-            ps = 8*1024;
+        if(ps < AjpConstants.MAX_PACKET_SIZE) {
+            ps = AjpConstants.MAX_PACKET_SIZE;
         }
         packetSize = ps;
     }

==================================================
MsgAjp.java
index bf49904976..3d38e9d1ac 100644
--- a/java/org/apache/jk/common/ChannelSocket.java
+++ b/java/org/apache/jk/common/ChannelSocket.java
@@ -89,7 +89,7 @@ public class ChannelSocket extends JkHandler
     private int linger=100;
     private int socketTimeout;
     private int bufferSize = -1;
-    private int packetSize = 8*1024;
+    private int packetSize = AjpConstants.MAX_PACKET_SIZE;
 
     private long requestCount=0;
     
@@ -208,8 +208,8 @@ public class ChannelSocket extends JkHandler
     }
 
     public void setPacketSize(int ps) {
-        if(ps < 8*1024) {
-            ps = 8*1024;
+        if(ps < AjpConstants.MAX_PACKET_SIZE) {
+            ps = AjpConstants.MAX_PACKET_SIZE;
         }
         packetSize = ps;
     }

==================================================
