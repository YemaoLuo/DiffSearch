87bb2e0f0c2d97d4be050702c06aff45eaf9bee6
==================================================
Expose the actual frameTypeId for unknown frames
==================================================
Mark Thomas
==================================================
Mon Mar 15 18:57:37 2021 +0000
==================================================
Http2AsyncParser.java
Expose the actual frameTypeId for unknown frames


==================================================
Http2Parser.java
index 754cc96c13..f1b1f2dc58 100644
--- a/java/org/apache/coyote/http2/Http2AsyncParser.java
+++ b/java/org/apache/coyote/http2/Http2AsyncParser.java
@@ -275,7 +275,7 @@ class Http2AsyncParser extends Http2Parser {
                                 readContinuationFrame(streamId, flags, payloadSize, payload);
                                 break;
                             case UNKNOWN:
-                                readUnknownFrame(streamId, frameType, flags, payloadSize, payload);
+                                readUnknownFrame(streamId, frameTypeId, flags, payloadSize, payload);
                             }
                         }
                         // See if there is a new 9 byte header and continue parsing if possible

==================================================
Http2UpgradeHandler.java
index b1c8e15b3b..7e3a86ddfd 100644
--- a/java/org/apache/coyote/http2/Http2Parser.java
+++ b/java/org/apache/coyote/http2/Http2Parser.java
@@ -124,7 +124,7 @@ class Http2Parser {
             readContinuationFrame(streamId, flags, payloadSize, null);
             break;
         case UNKNOWN:
-            readUnknownFrame(streamId, frameType, flags, payloadSize, null);
+            readUnknownFrame(streamId, frameTypeId, flags, payloadSize, null);
         }
 
         return true;
@@ -516,15 +516,15 @@ class Http2Parser {
     }
 
 
-    protected void readUnknownFrame(int streamId, FrameType frameType, int flags, int payloadSize, ByteBuffer buffer)
+    protected void readUnknownFrame(int streamId, int frameTypeId, int flags, int payloadSize, ByteBuffer buffer)
             throws IOException {
         try {
-            swallowPayload(streamId, frameType.getId(), payloadSize, false, buffer);
+            swallowPayload(streamId, frameTypeId, payloadSize, false, buffer);
         } catch (ConnectionException e) {
             // Will never happen because swallow() is called with mustBeZero set
             // to false
         }
-        output.swallowed(streamId, frameType, flags, payloadSize);
+        output.onSwallowedUnknownFrame(streamId, frameTypeId, flags, payloadSize);
     }
 
 
@@ -776,7 +776,19 @@ class Http2Parser {
         // Window size
         void incrementWindowSize(int streamId, int increment) throws Http2Exception;
 
-        // Testing
-        void swallowed(int streamId, FrameType frameType, int flags, int size) throws IOException;
+        /**
+         * Notification triggered when the parser swallows the payload of an
+         * unknown frame.
+         *
+         * @param streamId      The stream on which the swallowed frame was
+         *                      received
+         * @param frameTypeId   The (unrecognised) type of swallowed frame
+         * @param flags         The flags set in the header of the swallowed
+         *                      frame
+         * @param size          The payload size of the swallowed frame
+         *
+         * @throws IOException
+         */
+        void onSwallowedUnknownFrame(int streamId, int frameTypeId, int flags, int size) throws IOException;
     }
 }

==================================================
Http2TestBase.java
index f39c3c1fc7..1a38f4d486 100644
--- a/java/org/apache/coyote/http2/Http2UpgradeHandler.java
+++ b/java/org/apache/coyote/http2/Http2UpgradeHandler.java
@@ -1768,7 +1768,7 @@ class Http2UpgradeHandler extends AbstractStream implements InternalHttpUpgradeH
 
 
     @Override
-    public void swallowed(int streamId, FrameType frameType, int flags, int size)
+    public void onSwallowedUnknownFrame(int streamId, int frameTypeId, int flags, int size)
             throws IOException {
         // NO-OP.
     }

==================================================
