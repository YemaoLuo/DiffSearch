2714aaee79573fb358b5a91c68ba4c664d2d4d85
==================================================
Correct spelling
==================================================
Mark Thomas
==================================================
Wed Sep 16 14:24:44 2020 +0100
==================================================
ELProcessor.java
Correct spelling

Based on a PR provided by John Bampton
Internal, non-public API so changes are low risk



==================================================
Jre9Compat.java
index 6499f497d6..7abf7fcdab 100644
--- a/java/jakarta/el/ELProcessor.java
+++ b/java/jakarta/el/ELProcessor.java
@@ -117,7 +117,7 @@ public class ELProcessor {
             if (!Modifier.isStatic(method.getModifiers())) {
                 continue;
             }
-            if (!jreCompat.canAcccess(null, method)) {
+            if (!jreCompat.canAccess(null, method)) {
                 continue;
             }
             if (method.getName().equals(sig.getName())) {
@@ -192,7 +192,7 @@ public class ELProcessor {
 
         // Check for static, public method and module access for Java 9+
         JreCompat jreCompat = JreCompat.getInstance();
-        if (!Modifier.isStatic(modifiers) || !jreCompat.canAcccess(null, method)) {
+        if (!Modifier.isStatic(modifiers) || !jreCompat.canAccess(null, method)) {
             throw new NoSuchMethodException(Util.message(context,
                     "elProcessor.defineFunctionInvalidMethod", method.getName(),
                     method.getDeclaringClass().getName()));

==================================================
JreCompat.java
index d6ff069414..a4451ffeb9 100644
--- a/java/jakarta/el/Jre9Compat.java
+++ b/java/jakarta/el/Jre9Compat.java
@@ -61,7 +61,7 @@ class Jre9Compat extends JreCompat {
 
 
     @Override
-    public boolean canAcccess(Object base, AccessibleObject accessibleObject) {
+    public boolean canAccess(Object base, AccessibleObject accessibleObject) {
         try {
             return ((Boolean) canAccessMethod.invoke(accessibleObject, base)).booleanValue();
         } catch (ReflectiveOperationException | IllegalArgumentException e) {

==================================================
StaticFieldELResolver.java
index 9cd5816137..1bfb934db1 100644
--- a/java/jakarta/el/JreCompat.java
+++ b/java/jakarta/el/JreCompat.java
@@ -53,7 +53,7 @@ class JreCompat {
      * @return {code true} if the AccessibleObject can be accessed otherwise
      *         {code false}
      */
-    public boolean canAcccess(Object base, AccessibleObject accessibleObject) {
+    public boolean canAccess(Object base, AccessibleObject accessibleObject) {
         // Java 8 doesn't support modules so default to true
         return true;
     }

==================================================
Util.java
index c31501d512..473c414bb9 100644
--- a/java/jakarta/el/StaticFieldELResolver.java
+++ b/java/jakarta/el/StaticFieldELResolver.java
@@ -46,7 +46,7 @@ public class StaticFieldELResolver extends ELResolver {
                 JreCompat jreCompat = JreCompat.getInstance();
                 if (Modifier.isStatic(modifiers) &&
                         Modifier.isPublic(modifiers) &&
-                        jreCompat.canAcccess(null, field)) {
+                        jreCompat.canAccess(null, field)) {
                     return field.get(null);
                 }
             } catch (IllegalArgumentException | IllegalAccessException |
@@ -160,7 +160,7 @@ public class StaticFieldELResolver extends ELResolver {
                 JreCompat jreCompat = JreCompat.getInstance();
                 if (Modifier.isStatic(modifiers) &&
                         Modifier.isPublic(modifiers) &&
-                        jreCompat.canAcccess(null, field)) {
+                        jreCompat.canAccess(null, field)) {
                     return field.getType();
                 }
             } catch (IllegalArgumentException | NoSuchFieldException |

==================================================
