dcb32b15f1b762fcf067dc5332d7b7daca92e2f0
==================================================
- Use the ignore annotation flag.
==================================================
Remy Maucherat
==================================================
Tue May 9 14:05:23 2006 +0000
==================================================
EmbeddedServletOptions.java
- Use the ignore annotation flag.
- It needs recompilation in case the value is changed. It could do without, but would need 
  additional code in the generated servlets (a field, read a servlet context param), so 
  it would generally be (even) more intrusive :(

git-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@405437 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JspC.java
index 1ddf066556..8059b33a1c 100644
--- a/java/org/apache/jasper/EmbeddedServletOptions.java
+++ b/java/org/apache/jasper/EmbeddedServletOptions.java
@@ -174,6 +174,11 @@ public final class EmbeddedServletOptions implements Options {
      */
     private boolean xpoweredBy;
     
+    /**
+     * Should annotations be ignored?
+     */
+    private boolean ignoreAnnotations = false;
+    
     public String getProperty(String name ) {
         return settings.getProperty( name );
     }
@@ -244,6 +249,13 @@ public final class EmbeddedServletOptions implements Options {
         return development;
     }
     
+    /**
+     * Should annotations on tags be ignored?
+     */
+    public boolean getIgnoreAnnotations() {
+        return ignoreAnnotations;
+    }
+
     /**
      * Is the generation of SMAP info for JSR45 debuggin suppressed?
      */
@@ -384,6 +396,11 @@ public final class EmbeddedServletOptions implements Options {
         String validating=config.getInitParameter( "validating");
         if( "false".equals( validating )) ParserUtils.validating=false;
         
+        String annotations = config.getInitParameter("org.apache.jasper.IGNORE_ANNOTATIONS");
+        if ("true".equals(annotations)) {
+            ignoreAnnotations = true;
+        }
+
         String keepgen = config.getInitParameter("keepgenerated");
         if (keepgen != null) {
             if (keepgen.equalsIgnoreCase("true")) {

==================================================
Options.java
index a073e321ba..cede8b4c60 100644
--- a/java/org/apache/jasper/JspC.java
+++ b/java/org/apache/jasper/JspC.java
@@ -159,6 +159,7 @@ public class JspC implements Options {
     private boolean smapSuppressed = true;
     private boolean smapDumped = false;
     private boolean caching = true;
+    private boolean ignoreAnnotations = false;
     private Map cache = new HashMap();
 
     private String compiler = null;
@@ -590,6 +591,20 @@ public class JspC implements Options {
         compilerSourceVM = vm;
     }
 
+    /**
+     * Should annotations on tags be ignored?
+     */
+    public boolean getIgnoreAnnotations() {
+        return ignoreAnnotations;
+    }
+
+    /**
+     * Should annotations on tags be ignored?
+     */
+    public void setIgnoreAnnotations(boolean ignoreAnnotations) {
+        this.ignoreAnnotations = ignoreAnnotations;
+    }
+
     public TldLocationsCache getTldLocationsCache() {
         return tldLocationsCache;
     }

==================================================
Generator.java
index 9eef4d6835..56e48dc3de 100644
--- a/java/org/apache/jasper/Options.java
+++ b/java/org/apache/jasper/Options.java
@@ -91,6 +91,11 @@ public interface Options {
      */
     public boolean getTrimSpaces();
 
+    /**
+     * Should annotations on tags be ignored?
+     */
+    public boolean getIgnoreAnnotations();
+
     /**
      * Class ID for use in the plugin tag when the browser is IE. 
      */

==================================================
TagHandlerPool.java
index 744b9d9ce1..dfd6a5267c 100644
--- a/java/org/apache/jasper/compiler/Generator.java
+++ b/java/org/apache/jasper/compiler/Generator.java
@@ -2143,9 +2143,11 @@ class Generator {
                 out.print("new ");
                 out.print(tagHandlerClassName);
                 out.println("();");
-                out.printin("org.apache.jasper.runtime.AnnotationProcessor.postConstruct(");
-                out.print(tagHandlerVar);
-                out.println(");");
+                if (!ctxt.getOptions().getIgnoreAnnotations()) {
+                    out.printin("org.apache.jasper.runtime.AnnotationProcessor.postConstruct(");
+                    out.print(tagHandlerVar);
+                    out.println(");");
+                }
             }
 
             // includes setting the context
@@ -2291,19 +2293,21 @@ class Generator {
                 } else {
                     out.printin(tagHandlerVar);
                     out.println(".release();");
-                    out.printil("try {");
-                    out.pushIndent();
-                    out.printin("org.apache.jasper.runtime.AnnotationProcessor.preDestroy(");
-                    out.print(tagHandlerVar);
-                    out.println(");");
-                    out.popIndent();
-                    out.printil("} catch (Exception e) {");
-                    out.pushIndent();
-                    out.printin("log(\"Error processing preDestroy on tag instance of \" +");
-                    out.print(tagHandlerVar);
-                    out.println(".getClass().getName());");
-                    out.popIndent();
-                    out.printil("}");
+                    if (!ctxt.getOptions().getIgnoreAnnotations()) {
+                        out.printil("try {");
+                        out.pushIndent();
+                        out.printin("org.apache.jasper.runtime.AnnotationProcessor.preDestroy(");
+                        out.print(tagHandlerVar);
+                        out.println(");");
+                        out.popIndent();
+                        out.printil("} catch (Exception e) {");
+                        out.pushIndent();
+                        out.printin("log(\"Error processing preDestroy on tag instance of \" +");
+                        out.print(tagHandlerVar);
+                        out.println(".getClass().getName());");
+                        out.popIndent();
+                        out.printil("}");
+                    }
                 }
             }
             if (isTagFile || isFragment) {
@@ -2346,19 +2350,21 @@ class Generator {
             } else {
                 out.printin(tagHandlerVar);
                 out.println(".release();");
-                out.printil("try {");
-                out.pushIndent();
-                out.printin("org.apache.jasper.runtime.AnnotationProcessor.preDestroy(");
-                out.print(tagHandlerVar);
-                out.println(");");
-                out.popIndent();
-                out.printil("} catch (Exception e) {");
-                out.pushIndent();
-                out.printin("log(\"Error processing preDestroy on tag instance of \" +");
-                out.print(tagHandlerVar);
-                out.println(".getClass().getName());");
-                out.popIndent();
-                out.printil("}");
+                if (!ctxt.getOptions().getIgnoreAnnotations()) {
+                    out.printil("try {");
+                    out.pushIndent();
+                    out.printin("org.apache.jasper.runtime.AnnotationProcessor.preDestroy(");
+                    out.print(tagHandlerVar);
+                    out.println(");");
+                    out.popIndent();
+                    out.printil("} catch (Exception e) {");
+                    out.pushIndent();
+                    out.printin("log(\"Error processing preDestroy on tag instance of \" +");
+                    out.print(tagHandlerVar);
+                    out.println(".getClass().getName());");
+                    out.popIndent();
+                    out.printil("}");
+                }
             }
 
             if (n.implementsTryCatchFinally()) {
@@ -2399,9 +2405,11 @@ class Generator {
             out.println("();");
 
             // Resource injection
-            out.printin("org.apache.jasper.runtime.AnnotationProcessor.postConstruct(");
-            out.print(tagHandlerVar);
-            out.println(");");
+            if (!ctxt.getOptions().getIgnoreAnnotations()) {
+                out.printin("org.apache.jasper.runtime.AnnotationProcessor.postConstruct(");
+                out.print(tagHandlerVar);
+                out.println(");");
+            }
             
             generateSetters(n, tagHandlerVar, handlerInfo, true);
 
@@ -2447,9 +2455,11 @@ class Generator {
             syncScriptingVars(n, VariableInfo.AT_END);
 
             // Resource injection
-            out.printin("org.apache.jasper.runtime.AnnotationProcessor.preDestroy(");
-            out.print(tagHandlerVar);
-            out.println(");");
+            if (!ctxt.getOptions().getIgnoreAnnotations()) {
+                out.printin("org.apache.jasper.runtime.AnnotationProcessor.preDestroy(");
+                out.print(tagHandlerVar);
+                out.println(");");
+            }
 
             n.setEndJavaLine(out.getJavaLine());
         }

==================================================
