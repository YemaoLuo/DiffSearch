8e6eac6f99a42f3108f94525beeeb1cf47841e40
==================================================
bug 49159: Improve ThreadLocal memory leak clean-up 
==================================================
Sylvain Laurent
==================================================
Mon Dec 6 20:49:14 2010 +0000
==================================================
StandardContext.java
index 463bb93cfe..51472faa90 100644
--- a/java/org/apache/catalina/core/LocalStrings.properties
+++ b/java/org/apache/catalina/core/LocalStrings.properties
@@ -238,6 +238,8 @@ standardWrapper.unavailable=Marking servlet {0} as unavailable
 standardWrapper.unloadException=Servlet {0} threw unload() exception
 standardWrapper.unloading=Cannot allocate servlet {0} because it is being unloaded
 standardWrapper.waiting=Waiting for {0} instance(s) to be deallocated
+threadLocalLeakPreventionListener.lifecycleEvent.error=Exception processing lifecycle event {0}
+threadLocalLeakPreventionListener.containerEvent.error=Exception processing container event {0}
 
 defaultInstanceManager.restrictedServletsResource=Restricted servlets property file not found
 defaultInstanceManager.privilegedServlet=Servlet of class {0} is privileged and cannot be loaded by this web application

==================================================
StandardThreadExecutor.java
index 7f8adebe64..d6be6309ff 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -2489,9 +2489,10 @@ public class StandardContext extends ContainerBase
         return this.renewThreadsWhenStoppingContext;
     }
 
-    public void setRenewThreadsWhenStoppingContext(boolean renewThreadsWhenStoppingContext) {
+    public void setRenewThreadsWhenStoppingContext(
+            boolean renewThreadsWhenStoppingContext) {
         boolean oldRenewThreadsWhenStoppingContext =
-            this.renewThreadsWhenStoppingContext;
+                this.renewThreadsWhenStoppingContext;
         this.renewThreadsWhenStoppingContext = renewThreadsWhenStoppingContext;
         support.firePropertyChange("renewThreadsWhenStoppingContext",
                 oldRenewThreadsWhenStoppingContext,

==================================================
ThreadLocalLeakPreventionListener.java
index 6c6581f1fb..e203680ef2 100644
--- a/java/org/apache/catalina/core/StandardThreadExecutor.java
+++ b/java/org/apache/catalina/core/StandardThreadExecutor.java
@@ -88,7 +88,8 @@ public class StandardThreadExecutor extends LifecycleMBeanBase
      * renewing all threads at the same time, this delay is observed between 2
      * threads being renewed.
      */
-    protected long threadRenewalDelay = 1000L;
+    protected long threadRenewalDelay = 
+        org.apache.tomcat.util.threads.Constants.DEFAULT_THREAD_RENEWAL_DELAY;
     
     private TaskQueue taskqueue = null;
     // ---------------------------------------------- Constructors

==================================================
WebappClassLoader.java
index 7aca97581e..f26ad339b1 100644
--- a/java/org/apache/catalina/core/ThreadLocalLeakPreventionListener.java
+++ b/java/org/apache/catalina/core/ThreadLocalLeakPreventionListener.java
@@ -34,25 +34,34 @@ import org.apache.catalina.connector.Connector;
 import org.apache.coyote.ProtocolHandler;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
+import org.apache.tomcat.util.res.StringManager;
 import org.apache.tomcat.util.threads.ThreadPoolExecutor;
 
 /**
+ * <p>
  * A {@link LifecycleListener} that triggers the renewal of threads in Executor
  * pools when a {@link Context} is being stopped to avoid thread-local related
- * memory leaks.<br/>
+ * memory leaks.
+ * </p>
+ * <p>
  * Note : active threads will be renewed one by one when they come back to the
  * pool after executing their task, see
- * {@link org.apache.tomcat.util.threads.ThreadPoolExecutor}.afterExecute().<br/>
+ * {@link org.apache.tomcat.util.threads.ThreadPoolExecutor}.afterExecute().
+ * </p>
  * 
  * This listener must be declared in server.xml to be active.
  * 
- * @author slaurent
- * 
  */
 public class ThreadLocalLeakPreventionListener implements LifecycleListener,
-        ContainerListener {
-    private static final Log log = LogFactory
-            .getLog(ThreadLocalLeakPreventionListener.class);
+    ContainerListener {
+    private static final Log log =
+        LogFactory.getLog(ThreadLocalLeakPreventionListener.class);
+
+    /**
+     * The string manager for this package.
+     */
+    protected static final StringManager sm =
+        StringManager.getManager(Constants.Package);
 
     /**
      * Listens for {@link LifecycleEvent} for the start of the {@link Server} to
@@ -63,7 +72,7 @@ public class ThreadLocalLeakPreventionListener implements LifecycleListener,
         try {
             Lifecycle lifecycle = event.getLifecycle();
             if (Lifecycle.AFTER_START_EVENT.equals(event.getType())
-                    && lifecycle instanceof Server) {
+                && lifecycle instanceof Server) {
                 // when the server starts, we register ourself as listener for
                 // all context
                 // as well as container event listener so that we know when new
@@ -73,11 +82,15 @@ public class ThreadLocalLeakPreventionListener implements LifecycleListener,
             }
 
             if (Lifecycle.AFTER_STOP_EVENT.equals(event.getType())
-                    && lifecycle instanceof Context) {
+                && lifecycle instanceof Context) {
                 stopIdleThreads((Context) lifecycle);
             }
         } catch (Exception e) {
-            log.error("Exception processing event " + event, e);
+            String msg =
+                sm.getString(
+                    "threadLocalLeakPreventionListener.lifecycleEvent.error",
+                    event);
+            log.error(msg, e);
         }
     }
 
@@ -87,13 +100,17 @@ public class ThreadLocalLeakPreventionListener implements LifecycleListener,
             String type = event.getType();
             if (Container.ADD_CHILD_EVENT.equals(type)) {
                 processContainerAddChild(event.getContainer(),
-                        (Container) event.getData());
+                    (Container) event.getData());
             } else if (Container.REMOVE_CHILD_EVENT.equals(type)) {
                 processContainerRemoveChild(event.getContainer(),
-                        (Container) event.getData());
+                    (Container) event.getData());
             }
         } catch (Exception e) {
-            log.error("Exception processing event " + event, e);
+            String msg =
+                sm.getString(
+                    "threadLocalLeakPreventionListener.containerEvent.error",
+                    event);
+            log.error(msg, e);
         }
 
     }
@@ -129,43 +146,35 @@ public class ThreadLocalLeakPreventionListener implements LifecycleListener,
     protected void processContainerAddChild(Container parent, Container child) {
         if (log.isDebugEnabled())
             log.debug("Process addChild[parent=" + parent + ",child=" + child
-                    + "]");
-
-        try {
-            if (child instanceof Context) {
-                registerContextListener((Context) child);
-            } else if (child instanceof Engine) {
-                registerListenersForEngine((Engine) child);
-            } else if (child instanceof Host) {
-                registerListenersForHost((Host) child);
-            }
-        } catch (Throwable t) {
-            log.error("processContainerAddChild: Throwable", t);
+                + "]");
+
+        if (child instanceof Context) {
+            registerContextListener((Context) child);
+        } else if (child instanceof Engine) {
+            registerListenersForEngine((Engine) child);
+        } else if (child instanceof Host) {
+            registerListenersForHost((Host) child);
         }
 
     }
 
-    protected void processContainerRemoveChild(Container parent, Container child) {
+    protected void processContainerRemoveChild(Container parent, 
+        Container child) {
 
         if (log.isDebugEnabled())
             log.debug("Process removeChild[parent=" + parent + ",child="
-                    + child + "]");
-
-        try {
-            if (child instanceof Context) {
-                Context context = (Context) child;
-                context.removeLifecycleListener(this);
-            } else if (child instanceof Host) {
-                Host host = (Host) child;
-                host.removeContainerListener(this);
-            } else if (child instanceof Engine) {
-                Engine engine = (Engine) child;
-                engine.removeContainerListener(this);
-            }
-        } catch (Throwable t) {
-            log.error("processContainerRemoveChild: Throwable", t);
+                + child + "]");
+
+        if (child instanceof Context) {
+            Context context = (Context) child;
+            context.removeLifecycleListener(this);
+        } else if (child instanceof Host) {
+            Host host = (Host) child;
+            host.removeContainerListener(this);
+        } else if (child instanceof Engine) {
+            Engine engine = (Engine) child;
+            engine.removeContainerListener(this);
         }
-
     }
 
     /**
@@ -177,9 +186,8 @@ public class ThreadLocalLeakPreventionListener implements LifecycleListener,
      *            of its parent Service.
      */
     private void stopIdleThreads(Context context) {
-        if (context instanceof StandardContext
-                && !((StandardContext) context)
-                        .getRenewThreadsWhenStoppingContext()) {
+        if (context instanceof StandardContext && 
+            !((StandardContext) context).getRenewThreadsWhenStoppingContext()) {
             log.debug("Not renewing threads when the context is stopping, it is configured not to do it.");
             return;
         }
@@ -196,10 +204,12 @@ public class ThreadLocalLeakPreventionListener implements LifecycleListener,
                 }
 
                 if (executor instanceof ThreadPoolExecutor) {
-                    ThreadPoolExecutor threadPoolExecutor = (ThreadPoolExecutor) executor;
+                    ThreadPoolExecutor threadPoolExecutor =
+                        (ThreadPoolExecutor) executor;
                     threadPoolExecutor.contextStopping();
                 } else if (executor instanceof StandardThreadExecutor) {
-                    StandardThreadExecutor stdThreadExecutor = (StandardThreadExecutor) executor;
+                    StandardThreadExecutor stdThreadExecutor =
+                        (StandardThreadExecutor) executor;
                     stdThreadExecutor.contextStopping();
                 }
 

==================================================
Constants.java
index 7ed7f58cfd..f427bb5aa9 100644
--- a/java/org/apache/catalina/loader/WebappClassLoader.java
+++ b/java/org/apache/catalina/loader/WebappClassLoader.java
@@ -2365,24 +2365,18 @@ public class WebappClassLoader
         } catch (IllegalAccessException e) {
             log.warn(sm.getString("webappClassLoader.checkThreadLocalsForLeaksFail",
                     contextName), e);
-        } catch (NoSuchMethodException e) {
-            log.warn(sm.getString("webappClassLoader.checkThreadLocalsForLeaksFail",
-                    contextName), e);
-        } catch (InvocationTargetException e) {
-            log.warn(sm.getString("webappClassLoader.checkThreadLocalsForLeaksFail",
-                    contextName), e);
         }       
     }
 
 
-    /*
+    /**
      * Analyzes the given thread local map object. Also pass in the field that
      * points to the internal table to save re-calculating it on every
      * call to this method.
      */
-    private void checkThreadLocalMapForLeaks(Object map, Field internalTableField)
-            throws NoSuchMethodException, IllegalAccessException,
-            NoSuchFieldException, InvocationTargetException {
+    private void checkThreadLocalMapForLeaks(Object map,
+            Field internalTableField) throws IllegalAccessException,
+            NoSuchFieldException {
         if (map != null) {
             Object[] table = (Object[]) internalTableField.get(map);
             if (table != null) {

==================================================
TaskQueue.java
index 352da4586b..9578ac22d8 100644
--- a/java/org/apache/tomcat/util/threads/Constants.java
+++ b/java/org/apache/tomcat/util/threads/Constants.java
@@ -23,4 +23,5 @@ public final class Constants {
 
     public static final String Package = "org.apache.tomcat.util.threads";
 
+    public static final long DEFAULT_THREAD_RENEWAL_DELAY = 1000L;
 }

==================================================
TaskThread.java
index 8ffd8b6980..eb606f4f23 100644
--- a/java/org/apache/tomcat/util/threads/TaskQueue.java
+++ b/java/org/apache/tomcat/util/threads/TaskQueue.java
@@ -81,7 +81,8 @@ public class TaskQueue extends LinkedBlockingQueue<Runnable> {
 
 
     @Override
-    public Runnable poll(long timeout, TimeUnit unit) throws InterruptedException {
+    public Runnable poll(long timeout, TimeUnit unit)
+            throws InterruptedException {
         Runnable runnable = super.poll(timeout, unit);
         if (runnable == null && parent != null) {
             // the poll timed out, it gives an opportunity to stop the current
@@ -90,21 +91,22 @@ public class TaskQueue extends LinkedBlockingQueue<Runnable> {
         }
         return runnable;
     }
-    
 
     @Override
     public Runnable take() throws InterruptedException {
         if (parent != null && parent.currentThreadShouldBeStopped()) {
-            return poll(parent.getKeepAliveTime(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);
-            //yes, this may return null (in case of timeout) which normally does not occur with take()
-            //but the ThreadPoolExecutor implementation allows this
+            return poll(parent.getKeepAliveTime(TimeUnit.MILLISECONDS),
+                    TimeUnit.MILLISECONDS);
+            // yes, this may return null (in case of timeout) which normally
+            // does not occur with take()
+            // but the ThreadPoolExecutor implementation allows this
         }
         return super.take();
     }
 
     @Override
     public int remainingCapacity() {
-        if(forcedRemainingCapacity != null) {
+        if (forcedRemainingCapacity != null) {
             // ThreadPoolExecutor.setCorePoolSize checks that
             // remainingCapacity==0 to allow to interrupt idle threads
             // I don't see why, but this hack allows to conform to this

==================================================
ThreadPoolExecutor.java
index 84dc37530e..6038d9df47 100644
--- a/java/org/apache/tomcat/util/threads/TaskThread.java
+++ b/java/org/apache/tomcat/util/threads/TaskThread.java
@@ -19,8 +19,6 @@ package org.apache.tomcat.util.threads;
 /**
  * A Thread implementation that records the time at which it was created.
  * 
- * @author slaurent
- * 
  */
 public class TaskThread extends Thread {
 

==================================================
