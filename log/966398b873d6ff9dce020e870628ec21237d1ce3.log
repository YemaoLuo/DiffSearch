966398b873d6ff9dce020e870628ec21237d1ce3
==================================================
Add a standard method for returning input to the SocketWrapper.
==================================================
Mark Emlyn
==================================================
Mon Nov 10 16:47:56 2014 +0000
==================================================
AprProcessor.java
Add a standard method for returning input to the SocketWrapper.
Use this to make the code consistent between upgrade processor
implementations.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1637940 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Nio2Processor.java
index 764694d99e..f023ab5d4d 100644
--- a/java/org/apache/coyote/http11/upgrade/AprProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/AprProcessor.java
@@ -22,8 +22,6 @@ import javax.servlet.http.HttpUpgradeHandler;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
-import org.apache.tomcat.jni.Socket;
-import org.apache.tomcat.util.net.AprEndpoint.AprSocketWrapper;
 import org.apache.tomcat.util.net.SocketWrapperBase;
 
 public class AprProcessor extends AbstractProcessor<Long> {
@@ -39,7 +37,7 @@ public class AprProcessor extends AbstractProcessor<Long> {
         super(httpUpgradeHandler,
                 new UpgradeServletInputStream(wrapper),
                 new UpgradeServletOutputStream(wrapper, asyncWriteBufferSize));
-        ((AprSocketWrapper) wrapper).setLeftOverInput(leftOverInput);
-        Socket.timeoutSet(wrapper.getSocket().longValue(), INFINITE_TIMEOUT);
+        wrapper.unRead(leftOverInput);
+        wrapper.setTimeout(INFINITE_TIMEOUT);
     }
 }

==================================================
NioProcessor.java
index 04f85b0ba4..0aa9c22fbe 100644
--- a/java/org/apache/coyote/http11/upgrade/Nio2Processor.java
+++ b/java/org/apache/coyote/http11/upgrade/Nio2Processor.java
@@ -38,10 +38,7 @@ public class Nio2Processor extends AbstractProcessor<Nio2Channel> {
         super(httpUpgradeHandler,
                 new UpgradeServletInputStream(wrapper),
                 new UpgradeServletOutputStream(wrapper, asyncWriteBufferSize));
-
+        wrapper.unRead(leftoverInput);
         wrapper.setTimeout(INFINITE_TIMEOUT);
-        if (leftoverInput != null) {
-            wrapper.getSocket().getBufHandler().getReadBuffer().put(leftoverInput);
-        }
     }
 }

==================================================
AprEndpoint.java
index 1f8e1cf74c..60c8140d9e 100644
--- a/java/org/apache/coyote/http11/upgrade/NioProcessor.java
+++ b/java/org/apache/coyote/http11/upgrade/NioProcessor.java
@@ -38,17 +38,7 @@ public class NioProcessor extends AbstractProcessor<NioChannel> {
         super(httpUpgradeHandler,
                 new UpgradeServletInputStream(wrapper),
                 new UpgradeServletOutputStream(wrapper, asyncWriteBufferSize));
-
+        wrapper.unRead(leftoverInput);
         wrapper.setTimeout(INFINITE_TIMEOUT);
-        if (leftoverInput != null) {
-            ByteBuffer readBuffer = wrapper.getSocket().getBufHandler().getReadBuffer();
-            if (readBuffer.remaining() > 0) {
-                readBuffer.flip();
-            } else {
-                readBuffer.clear();
-            }
-            readBuffer.put(leftoverInput);
-            readBuffer.flip();
-        }
     }
 }

==================================================
Nio2Endpoint.java
index ea022e9878..be32f2b220 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -2357,7 +2357,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
 
         private final ByteBuffer sslOutputBuffer;
 
-        private volatile ByteBuffer leftOverInput;
+        private volatile ByteBuffer returnedInput;
         private volatile boolean eagain = false;
         private volatile boolean closed = false;
 
@@ -2377,14 +2377,6 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
         }
 
 
-        public void setLeftOverInput(ByteBuffer leftOverInput) {
-            if (leftOverInput != null) {
-                this.leftOverInput = ByteBuffer.allocate(leftOverInput.remaining());
-                this.leftOverInput.put(leftOverInput);
-            }
-        }
-
-
         @Override
         public int read(boolean block, byte[] b, int off, int len) throws IOException {
 
@@ -2392,13 +2384,13 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
                 throw new IOException(sm.getString("socket.apr.closed", getSocket()));
             }
 
-            if (leftOverInput != null) {
-                if (leftOverInput.remaining() < len) {
-                    len = leftOverInput.remaining();
+            if (returnedInput != null) {
+                if (returnedInput.remaining() < len) {
+                    len = returnedInput.remaining();
                 }
-                leftOverInput.get(b, off, len);
-                if (leftOverInput.remaining() == 0) {
-                    leftOverInput = null;
+                returnedInput.get(b, off, len);
+                if (returnedInput.remaining() == 0) {
+                    returnedInput = null;
                 }
                 return len;
             }
@@ -2475,6 +2467,16 @@ public class AprEndpoint extends AbstractEndpoint<Long> {
         }
 
 
+
+        @Override
+        public void unRead(ByteBuffer input) {
+            if (returnedInput != null) {
+                this.returnedInput = ByteBuffer.allocate(returnedInput.remaining());
+                this.returnedInput.put(returnedInput);
+            }
+        }
+
+
         @Override
         public void close() {
             closed = true;

==================================================
NioEndpoint.java
index f1a84be5a0..41c38df070 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -941,6 +941,14 @@ public class Nio2Endpoint extends AbstractEndpoint<Nio2Channel> {
         }
 
 
+        @Override
+        public void unRead(ByteBuffer returnedInput) {
+            if (returnedInput != null) {
+                getSocket().getBufHandler().getReadBuffer().put(returnedInput);
+            }
+        }
+
+
         @Override
         public void close() throws IOException {
             getSocket().close();

==================================================
SocketWrapperBase.java
index f1fb79f2f5..c890cb3219 100644
--- a/java/org/apache/tomcat/util/net/NioEndpoint.java
+++ b/java/org/apache/tomcat/util/net/NioEndpoint.java
@@ -1478,6 +1478,21 @@ public class NioEndpoint extends AbstractEndpoint<NioChannel> {
         }
 
 
+        @Override
+        public void unRead(ByteBuffer returnedInput) {
+            if (returnedInput != null) {
+                ByteBuffer readBuffer = getSocket().getBufHandler().getReadBuffer();
+                if (readBuffer.remaining() > 0) {
+                    readBuffer.flip();
+                } else {
+                    readBuffer.clear();
+                }
+                readBuffer.put(returnedInput);
+                readBuffer.flip();
+            }
+        }
+
+
         @Override
         public void close() throws IOException {
             getSocket().close();

==================================================
