70c52d1f7c5645b725e46ea1335f199c18be7082
==================================================
Remove unused JarFiles - class loader resources in JARs are obtained via
==================================================
Mark Emlyn
==================================================
Mon Nov 4 23:59:24 2013 +0000
==================================================
StandardContext.java
Remove unused JarFiles - class loader resources in JARs are obtained via
WebResources

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1538820 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WebappClassLoader.java
index a21ca6ece0..b4a5ce7726 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -5335,12 +5335,6 @@ public class StandardContext extends ContainerBase
             broadcaster.sendNotification(notification);
         }
 
-        // Close all JARs right away to avoid always opening a peak number
-        // of files on startup
-        if (getLoader() instanceof WebappLoader) {
-            ((WebappLoader) getLoader()).closeJARs(true);
-        }
-
         // Reinitializing if something went wrong
         if (!ok) {
             setState(LifecycleState.FAILED);

==================================================
WebappLoader.java
index f1e3c83458..4f86aacd98 100644
--- a/java/org/apache/catalina/loader/WebappClassLoader.java
+++ b/java/org/apache/catalina/loader/WebappClassLoader.java
@@ -289,13 +289,6 @@ public class WebappClassLoader extends URLClassLoader
     protected URL[] repositoryURLs = null;
 
 
-    /**
-     * The list of JARs, in the order they should be searched
-     * for locally loaded classes or resources.
-     */
-    protected JarFile[] jarFiles = new JarFile[0];
-
-
     /**
      * The list of JARs, in the order they should be searched
      * for locally loaded classes or resources.
@@ -753,7 +746,6 @@ public class WebappClassLoader extends URLClassLoader
         loader.clearReferencesHttpClientKeepAliveThread = this.clearReferencesHttpClientKeepAliveThread;
 
         loader.repositoryURLs = this.repositoryURLs.clone();
-        loader.jarFiles = this.jarFiles.clone();
         loader.jarRealFiles = this.jarRealFiles.clone();
         loader.jarNames = this.jarNames.clone();
         loader.lastModifiedDates = this.lastModifiedDates.clone();
@@ -819,13 +811,6 @@ public class WebappClassLoader extends URLClassLoader
         if (!validateJarFile(file))
             return;
 
-        JarFile[] result2 = new JarFile[jarFiles.length + 1];
-        for (i = 0; i < jarFiles.length; i++) {
-            result2[i] = jarFiles[i];
-        }
-        result2[jarFiles.length] = jarFile;
-        jarFiles = result2;
-
         // Add the file to the list
         File[] result4 = new File[jarRealFiles.length + 1];
         for (i = 0; i < jarRealFiles.length; i++) {
@@ -1597,22 +1582,9 @@ public class WebappClassLoader extends URLClassLoader
 
         started = false;
 
-        int length = jarFiles.length;
-        for (int i = 0; i < length; i++) {
-            try {
-                if (jarFiles[i] != null) {
-                    jarFiles[i].close();
-                }
-            } catch (IOException e) {
-                // Ignore
-            }
-            jarFiles[i] = null;
-        }
-
         resourceEntries.clear();
         resources = null;
         repositoryURLs = null;
-        jarFiles = null;
         jarRealFiles = null;
         jarPath = null;
         jarNames = null;
@@ -1631,36 +1603,8 @@ public class WebappClassLoader extends URLClassLoader
     }
 
 
-    /**
-     * Used to periodically signal to the classloader to release
-     * JAR resources.
-     */
-    public void closeJARs(boolean force) {
-        if (jarFiles.length > 0) {
-                synchronized (jarFiles) {
-                    if (force || (System.currentTimeMillis()
-                                  > (lastJarAccessed + 90000))) {
-                        for (int i = 0; i < jarFiles.length; i++) {
-                            try {
-                                if (jarFiles[i] != null) {
-                                    jarFiles[i].close();
-                                    jarFiles[i] = null;
-                                }
-                            } catch (IOException e) {
-                                if (log.isDebugEnabled()) {
-                                    log.debug("Failed to close JAR", e);
-                                }
-                            }
-                        }
-                    }
-                }
-        }
-    }
-
-
     // ------------------------------------------------------ Protected Methods
 
-
     /**
      * Clear references.
      */
@@ -2510,29 +2454,6 @@ public class WebappClassLoader extends URLClassLoader
     }
 
 
-    /**
-     * Used to periodically signal to the classloader to release JAR resources.
-     */
-    protected boolean openJARs() {
-        if (started && (jarFiles.length > 0)) {
-            lastJarAccessed = System.currentTimeMillis();
-            if (jarFiles[0] == null) {
-                for (int i = 0; i < jarFiles.length; i++) {
-                    try {
-                        jarFiles[i] = new JarFile(jarRealFiles[i]);
-                    } catch (IOException e) {
-                        if (log.isDebugEnabled()) {
-                            log.debug("Failed to open JAR", e);
-                        }
-                        return false;
-                    }
-                }
-            }
-        }
-        return true;
-    }
-
-
     /**
      * Find specified class in local repositories.
      *

==================================================
