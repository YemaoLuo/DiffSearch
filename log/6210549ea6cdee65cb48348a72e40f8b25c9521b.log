6210549ea6cdee65cb48348a72e40f8b25c9521b
==================================================
Make UTF-8 test cases public so they can be used for other tests.
==================================================
Mark Emlyn
==================================================
Mon Mar 4 20:40:39 2013 +0000
==================================================
InputBuffer.java
Make UTF-8 test cases public so they can be used for other tests.
Add tests for request bodies using UTF-8.
Fix failures for UTF-8 request bodies where incomplete sequences at the end of the stream were ignored. They now throw an exception as they do if they appear in the middle of the stream.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1452501 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestInputBuffer.java
index f967c65b2a..eed9c95f3a 100644
--- a/java/org/apache/catalina/connector/InputBuffer.java
+++ b/java/org/apache/catalina/connector/InputBuffer.java
@@ -363,10 +363,12 @@ public class InputBuffer extends Reader
             setConverter();
         }
 
+        boolean eof = false;
+
         if (bb.getLength() <= 0) {
             int nRead = realReadBytes(bb.getBytes(), 0, bb.getBytes().length);
             if (nRead < 0) {
-                return -1;
+                eof = true;
             }
         }
 
@@ -385,10 +387,13 @@ public class InputBuffer extends Reader
         }
 
         state = CHAR_STATE;
-        conv.convert(bb, cb);
-
-        return cb.getLength();
+        conv.convert(bb, cb, eof);
 
+        if (cb.getLength() == 0 && eof) {
+            return -1;
+        } else {
+            return cb.getLength();
+        }
     }
 
 

==================================================
TestUtf8Extended.java
new file mode 100644
index 0000000000..2d22868d90
--- /dev/null
+++ b/test/org/apache/catalina/connector/TestInputBuffer.java
@@ -0,0 +1,117 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina.connector;
+
+import java.io.IOException;
+import java.io.Reader;
+import java.io.Writer;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+import org.apache.catalina.Context;
+import org.apache.catalina.startup.Tomcat;
+import org.apache.catalina.startup.TomcatBaseTest;
+import org.apache.tomcat.util.buf.B2CConverter;
+import org.apache.tomcat.util.buf.ByteChunk;
+import org.apache.tomcat.util.buf.TestUtf8Extended;
+import org.apache.tomcat.util.buf.TestUtf8Extended.Utf8TestCase;
+
+public class TestInputBuffer extends TomcatBaseTest {
+
+    @Test
+    public void testUtf8Body() throws Exception {
+        Tomcat tomcat = getTomcatInstance();
+        Context root = tomcat.addContext("", TEMP_DIR);
+        Tomcat.addServlet(root, "Echo", new Utf8Echo());
+        root.addServletMapping("/test", "Echo");
+
+        tomcat.getConnector().setProperty("soTimeout", "300000");
+        tomcat.start();
+
+        for (Utf8TestCase testCase : TestUtf8Extended.TEST_CASES) {
+            String expected = null;
+            if (testCase.invalidIndex == -1) {
+                expected = testCase.outputReplaced;
+            }
+            doUtf8BodyTest(testCase.description, testCase.input, expected);
+        }
+    }
+
+
+    private void doUtf8BodyTest(String description, int[] input,
+            String expected) throws Exception {
+
+        System.out.println(description);
+
+        byte[] bytes = new byte[input.length];
+        for (int i = 0; i < input.length; i++) {
+            bytes[i] = (byte) input[i];
+        }
+
+        ByteChunk bc = new ByteChunk();
+        int rc = postUrl(bytes, "http://localhost:" + getPort() + "/test", bc,
+                null);
+
+        if (expected == null) {
+            Assert.assertEquals(description,
+                    HttpServletResponse.SC_INTERNAL_SERVER_ERROR, rc);
+        } else if (expected.length() == 0) {
+            Assert.assertNull(description, bc.toString());
+        } else {
+            bc.setCharset(B2CConverter.UTF_8);
+            Assert.assertEquals(description, expected, bc.toString());
+        }
+    }
+
+
+    private static class Utf8Echo extends HttpServlet {
+
+        private static final long serialVersionUID = 1L;
+
+        @Override
+        protected void doGet(HttpServletRequest req, HttpServletResponse resp)
+                throws ServletException, IOException {
+            // Should use POST
+            resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
+        }
+
+        @Override
+        protected void doPost(HttpServletRequest req, HttpServletResponse resp)
+                throws ServletException, IOException {
+            req.setCharacterEncoding("UTF-8");
+            Reader r = req.getReader();
+
+            resp.setCharacterEncoding("UTF-8");
+            resp.setContentType("text/plain");
+            Writer w = resp.getWriter();
+
+            // Copy one character at a time
+            int c = r.read();
+            while (c != -1) {
+                w.write(c);
+                c = r.read();
+            }
+            w.close();
+        }
+    }
+}

==================================================
