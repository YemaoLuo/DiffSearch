60f047787c623250bee662dd0fdd4b4e40a1047f
==================================================
Pull up common async code
==================================================
Mark Emlyn
==================================================
Tue May 13 21:07:35 2014 +0000
==================================================
AbstractHttp11Processor.java
Pull up common async code

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1594383 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProcessor.java
index ce7a955b1a..4dbc571d68 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -816,6 +816,22 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
             ((AtomicBoolean) param).set(asyncStateMachine.isAsyncTimingOut());
         } else if (actionCode == ActionCode.ASYNC_IS_ERROR) {
             ((AtomicBoolean) param).set(asyncStateMachine.isAsyncError());
+        } else if (actionCode == ActionCode.ASYNC_COMPLETE) {
+            socketWrapper.clearDispatches();
+            if (asyncStateMachine.asyncComplete()) {
+                endpoint.processSocket(this.socketWrapper, SocketStatus.OPEN_READ, true);
+            }
+        } else if (actionCode == ActionCode.ASYNC_SETTIMEOUT) {
+            if (param == null || socketWrapper == null) {
+                return;
+            }
+            long timeout = ((Long)param).longValue();
+            // If we are not piggy backing on a worker thread, set the timeout
+            socketWrapper.setTimeout(timeout);
+        } else if (actionCode == ActionCode.ASYNC_DISPATCH) {
+            if (asyncStateMachine.asyncDispatch()) {
+                endpoint.processSocket(this.socketWrapper, SocketStatus.OPEN_READ, true);
+            }
         } else if (actionCode == ActionCode.UPGRADE) {
             httpUpgradeHandler = (HttpUpgradeHandler) param;
             // Stop further HTTP output

==================================================
Http11Nio2Processor.java
index 6e2e6a0c70..256f511c60 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -467,22 +467,6 @@ public class Http11AprProcessor extends AbstractHttp11Processor<Long> {
                     SocketStatus.OPEN_READ, true);
         } else if (actionCode == ActionCode.COMET_SETTIMEOUT) {
             //no op
-        } else if (actionCode == ActionCode.ASYNC_COMPLETE) {
-            socketWrapper.clearDispatches();
-            if (asyncStateMachine.asyncComplete()) {
-                endpoint.processSocket(this.socketWrapper, SocketStatus.OPEN_READ, true);
-            }
-        } else if (actionCode == ActionCode.ASYNC_SETTIMEOUT) {
-            if (param == null || socketWrapper == null) {
-                return;
-            }
-            long timeout = ((Long)param).longValue();
-            // If we are not piggy backing on a worker thread, set the timeout
-            socketWrapper.setTimeout(timeout);
-        } else if (actionCode == ActionCode.ASYNC_DISPATCH) {
-            if (asyncStateMachine.asyncDispatch()) {
-                endpoint.processSocket(this.socketWrapper, SocketStatus.OPEN_READ, true);
-            }
         }
     }
 

==================================================
Http11NioProcessor.java
index a55ff51589..c00a4c719d 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Processor.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Processor.java
@@ -518,22 +518,6 @@ public class Http11Nio2Processor extends AbstractHttp11Processor<Nio2Channel> {
             if ( rp.getStage() != org.apache.coyote.Constants.STAGE_SERVICE ) {
                 socketWrapper.setTimeout(timeout);
             }
-        } else if (actionCode == ActionCode.ASYNC_COMPLETE) {
-            socketWrapper.clearDispatches();
-            if (asyncStateMachine.asyncComplete()) {
-                endpoint.processSocket(this.socketWrapper, SocketStatus.OPEN_READ, true);
-            }
-        } else if (actionCode == ActionCode.ASYNC_SETTIMEOUT) {
-            if (param == null || socketWrapper == null) {
-                return;
-            }
-            long timeout = ((Long)param).longValue();
-            // If we are not piggy backing on a worker thread, set the timeout
-            socketWrapper.setTimeout(timeout);
-        } else if (actionCode == ActionCode.ASYNC_DISPATCH) {
-            if (asyncStateMachine.asyncDispatch()) {
-                endpoint.processSocket(this.socketWrapper, SocketStatus.OPEN_READ, true);
-            }
         }
     }
 

==================================================
Http11Processor.java
index 5b464170c1..95aee1bdfc 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -501,22 +501,6 @@ public class Http11NioProcessor extends AbstractHttp11Processor<NioChannel> {
             if ( rp.getStage() != org.apache.coyote.Constants.STAGE_SERVICE ) {
                 attach.setTimeout(timeout);
             }
-        } else if (actionCode == ActionCode.ASYNC_COMPLETE) {
-            socketWrapper.clearDispatches();
-            if (asyncStateMachine.asyncComplete()) {
-                endpoint.processSocket(this.socketWrapper, SocketStatus.OPEN_READ, true);
-            }
-        } else if (actionCode == ActionCode.ASYNC_SETTIMEOUT) {
-            if (param == null || socketWrapper == null) {
-                return;
-            }
-            long timeout = ((Long)param).longValue();
-            // If we are not piggy backing on a worker thread, set the timeout
-            socketWrapper.setTimeout(timeout);
-        } else if (actionCode == ActionCode.ASYNC_DISPATCH) {
-            if (asyncStateMachine.asyncDispatch()) {
-                endpoint.processSocket(this.socketWrapper, SocketStatus.OPEN_READ, true);
-            }
         }
     }
 

==================================================
