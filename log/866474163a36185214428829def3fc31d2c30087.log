866474163a36185214428829def3fc31d2c30087
==================================================
- Ok, it seems to work at least a little bit (hopefully, nobody tried it before this). Overall, the
==================================================
Remy Maucherat
==================================================
Thu May 18 18:29:07 2006 +0000
==================================================
CometProcessor.java
- Ok, it seems to work at least a little bit (hopefully, nobody tried it before this). Overall, the
  changes are fairly limited.
- In the end, I prefer adding a new method in Adapter, although it is easy to change back.
- I'll try to add the examples webapp back, and add the obligatory chat servlet (so lame ...).

git-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@407605 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CoyoteAdapter.java
index 1c219ddb22..ded67f9165 100644
--- a/java/org/apache/catalina/CometProcessor.java
+++ b/java/org/apache/catalina/CometProcessor.java
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2006 The Apache Software Foundation.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
 package org.apache.catalina;
 
 import java.io.IOException;
@@ -8,13 +25,56 @@ import javax.servlet.http.HttpServletResponse;
 
 public interface CometProcessor {
 
+    /**
+     * Begin will be called by the main service method of the servlet at the beginning 
+     * of the processing of the connection. It can be used to initialize any relevant 
+     * fields using the request and response objects.
+     * 
+     * @param request
+     * @param response
+     * @throws IOException
+     * @throws ServletException
+     */
     public void begin(HttpServletRequest request, HttpServletResponse response)
         throws IOException, ServletException;
+
+    /**
+     * End may be called to end the processing of the request. Fields that have
+     * been initialized in the begin method should be reset.
+     * 
+     * @param request
+     * @param response
+     * @throws IOException
+     * @throws ServletException
+     */
     public void end(HttpServletRequest request, HttpServletResponse response)
         throws IOException, ServletException;
 
+    /**
+     * Error will be called by the container in the case where an IO exception
+     * or a similar unrecoverable error occurs on the connection. Fields that have
+     * been initialized in the begin method should be reset.
+     * 
+     * @param request
+     * @param response
+     * @throws IOException
+     * @throws ServletException
+     */
     public void error(HttpServletRequest request, HttpServletResponse response)
         throws IOException, ServletException;
+    
+    /**
+     * This indicates that input data is available, and that one read can be made
+     * without blocking. The available and ready methods of the InputStream or
+     * Reader may be used to determine if there is a risk of blocking: the servlet
+     * should read while data is reported available, and can make one additional read
+     * without blocking.
+     * 
+     * @param request
+     * @param response
+     * @throws IOException
+     * @throws ServletException
+     */
     public void read(HttpServletRequest request, HttpServletResponse response)
         throws IOException, ServletException;
 

==================================================
CometServlet.java
index ace2985c3f..85779f70c6 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -103,6 +103,56 @@ public class CoyoteAdapter
 
     // -------------------------------------------------------- Adapter Methods
 
+    
+    /**
+     * Event method.
+     * 
+     * @return false to indicate an error, expected or not
+     */
+    public boolean event(org.apache.coyote.Request req, 
+            org.apache.coyote.Response res, boolean error) {
+
+        Request request = (Request) req.getNote(ADAPTER_NOTES);
+        Response response = (Response) res.getNote(ADAPTER_NOTES);
+
+        if (request.getWrapper() != null) {
+            CometProcessor servlet = null;
+            try {
+                servlet = (CometProcessor) request.getWrapper().allocate();
+            } catch (Throwable t) {
+                log.error(sm.getString("coyoteAdapter.service"), t);
+                request.removeAttribute("org.apache.tomcat.comet");
+                return false;
+            }
+            try {
+                if (error) {
+                    servlet.error(request.getRequest(), response.getResponse());
+                } else {
+                    servlet.read(request.getRequest(), response.getResponse());
+                }
+                return (!error);
+            } catch (Throwable t) {
+                if (!(t instanceof IOException)) {
+                    log.error(sm.getString("coyoteAdapter.service"), t);
+                }
+                request.removeAttribute("org.apache.tomcat.comet");
+                try {
+                    servlet.error(request.getRequest(), response.getResponse());
+                } catch (Throwable th) {
+                    log.error(sm.getString("coyoteAdapter.service"), th);
+                }
+                return false;
+            } finally {
+                // Recycle the wrapper request and response
+                if (request.getAttribute("org.apache.tomcat.comet") == null) {
+                    request.recycle();
+                    response.recycle();
+                }
+            }
+        }
+        return true;
+    }
+    
 
     /**
      * Service method.
@@ -136,29 +186,6 @@ public class CoyoteAdapter
 
         }
 
-        // Comet processing
-        if (request.getWrapper() != null 
-                && request.getWrapper() instanceof CometProcessor) {
-            try {
-                if (request.getAttribute("org.apache.tomcat.comet.error") != null) {
-                    ((CometProcessor) request.getWrapper()).error(request.getRequest(), response.getResponse());
-                } else {
-                    ((CometProcessor) request.getWrapper()).read(request.getRequest(), response.getResponse());
-                }
-            } catch (IOException e) {
-                ;
-            } catch (Throwable t) {
-                log.error(sm.getString("coyoteAdapter.service"), t);
-            } finally {
-                // Recycle the wrapper request and response
-                if (request.getAttribute("org.apache.tomcat.comet") == null) {
-                    request.recycle();
-                    response.recycle();
-                }
-            }
-            return;
-        }
-        
         if (connector.getXpoweredBy()) {
             response.addHeader("X-Powered-By", "Servlet/2.5");
         }
@@ -174,9 +201,8 @@ public class CoyoteAdapter
                 connector.getContainer().getPipeline().getFirst().invoke(request, response);
             }
 
-            if (request.getAttribute("org.apache.tomcat.comet.support") == Boolean.TRUE 
-                    && request.getWrapper() instanceof CometProcessor) {
-                request.setAttribute("org.apache.tomcat.comet", Boolean.TRUE);
+            if (request.getAttribute("org.apache.tomcat.comet") == Boolean.TRUE
+                    && request.getWrapper().allocate() instanceof CometProcessor) {
                 comet = true;
             }
 

==================================================
Adapter.java
index 066eb4a365..75369777b7 100644
--- a/java/org/apache/catalina/servlets/CometServlet.java
+++ b/java/org/apache/catalina/servlets/CometServlet.java
@@ -21,8 +21,6 @@ package org.apache.catalina.servlets;
 import java.io.IOException;
 
 import javax.servlet.ServletException;
-import javax.servlet.ServletRequest;
-import javax.servlet.ServletResponse;
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
@@ -38,7 +36,7 @@ public abstract class CometServlet
 
     public void begin(HttpServletRequest request, HttpServletResponse response)
         throws IOException, ServletException {
-        
+        request.setAttribute("org.apache.tomcat.comet", Boolean.TRUE);
     }
     
     public void end(HttpServletRequest request, HttpServletResponse response)

==================================================
Http11AprProcessor.java
index 3aedca1578..e5a78a3419 100644
--- a/java/org/apache/coyote/Adapter.java
+++ b/java/org/apache/coyote/Adapter.java
@@ -45,5 +45,7 @@ public interface Adapter {
     public void service(Request req, Response res)
 	throws Exception;
 
+    public boolean event(Request req, Response res, boolean error)
+    throws Exception;
 
 }

==================================================
Http11AprProtocol.java
index b6d5194f8d..841e81fc96 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -743,15 +743,9 @@ public class Http11AprProcessor implements ActionHook {
         
         try {
             rp.setStage(org.apache.coyote.Constants.STAGE_SERVICE);
-            if (error) {
-                request.setAttribute("org.apache.tomcat.comet.error", Boolean.TRUE);
-            }
-            // FIXME: It is also possible to add a new "event" method in the adapter
-            // or something similar
-            adapter.service(request, response);
+            error = !adapter.event(request, response, error);
             if (request.getAttribute("org.apache.tomcat.comet") == null) {
                 comet = false;
-                endpoint.getCometPoller().remove(socket);
             }
         } catch (InterruptedIOException e) {
             error = true;
@@ -772,6 +766,7 @@ public class Http11AprProcessor implements ActionHook {
             endpoint.getPoller().add(socket);
             return SocketState.OPEN;
         } else {
+            endpoint.getCometPoller().add(socket);
             return SocketState.LONG;
         }
     }
@@ -815,7 +810,7 @@ public class Http11AprProcessor implements ActionHook {
         boolean keptAlive = false;
         boolean openSocket = false;
 
-        while (!error && keepAlive) {
+        while (!error && keepAlive && !comet) {
 
             // Parsing the request header
             try {
@@ -927,7 +922,6 @@ public class Http11AprProcessor implements ActionHook {
                 recycle();
                 return SocketState.CLOSED;
             } else {
-                endpoint.getCometPoller().add(socket);
                 return SocketState.LONG;
             }
         } else {

==================================================
AprEndpoint.java
index dd10203162..86d8b0f2b2 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -617,6 +617,7 @@ public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration
 
         public SocketState event(long socket, boolean error) {
             Http11AprProcessor result = connections.get(socket);
+            
             SocketState state = SocketState.CLOSED; 
             if (result != null) {
                 boolean recycle = error;
@@ -708,10 +709,11 @@ public class Http11AprProtocol implements ProtocolHandler, MBeanRegistration
                     // processor.
                     connections.put(socket, processor);
                     localProcessor.set(null);
+                    proto.ep.getCometPoller().add(socket);
                 }
                 return state;
 
-            } catch(java.net.SocketException e) {
+            } catch (java.net.SocketException e) {
                 // SocketExceptions are normal
                 Http11AprProtocol.log.debug
                     (sm.getString

==================================================
