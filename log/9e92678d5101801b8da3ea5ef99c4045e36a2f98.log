9e92678d5101801b8da3ea5ef99c4045e36a2f98
==================================================
Improve implementation of Lifecycle for WebappClassLoader. State is now correctly reported rather than always reporting as NEW.
==================================================
Mark Emlyn
==================================================
Wed Apr 16 14:11:13 2014 +0000
==================================================
StandardHost.java
Improve implementation of Lifecycle for WebappClassLoader. State is now correctly reported rather than always reporting as NEW.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1587911 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WebappClassLoader.java
index ebc5aa37f7..5b6b7466dd 100644
--- a/java/org/apache/catalina/core/StandardHost.java
+++ b/java/org/apache/catalina/core/StandardHost.java
@@ -733,7 +733,7 @@ public class StandardHost extends ContainerBase implements Host {
                 childClassLoaders.entrySet()) {
             ClassLoader cl = entry.getKey();
             if (cl instanceof WebappClassLoader) {
-                if (!((WebappClassLoader) cl).isStarted()) {
+                if (!((WebappClassLoader) cl).getState().isAvailable()) {
                     result.add(entry.getValue());
                 }
             }

==================================================
WebappLoader.java
index 8db7a9ca78..42b18be4bc 100644
--- a/java/org/apache/catalina/loader/WebappClassLoader.java
+++ b/java/org/apache/catalina/loader/WebappClassLoader.java
@@ -344,12 +344,6 @@ public class WebappClassLoader extends URLClassLoader
     private ClassLoader javaseClassLoader;
 
 
-    /**
-     * Has this component been started?
-     */
-    protected boolean started = false;
-
-
     /**
      * need conversion for properties files
      */
@@ -426,6 +420,9 @@ public class WebappClassLoader extends URLClassLoader
      */
     private boolean hasExternalRepositories = false;
 
+    private volatile LifecycleState state = LifecycleState.NEW;
+
+
     // ------------------------------------------------------------- Properties
 
     /**
@@ -714,7 +711,7 @@ public class WebappClassLoader extends URLClassLoader
 
         result.resources = this.resources;
         result.delegate = this.delegate;
-        result.started = this.started;
+        result.state = this.state;
         result.needConvert = this.needConvert;
         result.clearReferencesStatic = this.clearReferencesStatic;
         result.clearReferencesStopThreads = this.clearReferencesStopThreads;
@@ -848,7 +845,7 @@ public class WebappClassLoader extends URLClassLoader
             log.debug("    findClass(" + name + ")");
 
         // Cannot load anything from local repositories if class loader is stopped
-        if (!started) {
+        if (!state.isAvailable()) {
             throw new ClassNotFoundException(name);
         }
 
@@ -1211,7 +1208,7 @@ public class WebappClassLoader extends URLClassLoader
         Class<?> clazz = null;
 
         // Log access to stopped classloader
-        if (!started) {
+        if (!state.isAvailable()) {
             try {
                 throw new IllegalStateException();
             } catch (IllegalStateException e) {
@@ -1419,7 +1416,7 @@ public class WebappClassLoader extends URLClassLoader
      */
     @Override
     public LifecycleState getState() {
-        return LifecycleState.NEW;
+        return state;
     }
 
 
@@ -1434,7 +1431,7 @@ public class WebappClassLoader extends URLClassLoader
 
     @Override
     public void init() {
-        // NOOP
+        state = LifecycleState.INITIALIZED;
     }
 
 
@@ -1446,6 +1443,8 @@ public class WebappClassLoader extends URLClassLoader
     @Override
     public void start() throws LifecycleException {
 
+        state = LifecycleState.STARTING_PREP;
+
         WebResource classes = resources.getResource("/WEB-INF/classes");
         if (classes.isDirectory() && classes.canRead()) {
             addURL(classes.getURL());
@@ -1459,7 +1458,8 @@ public class WebappClassLoader extends URLClassLoader
             }
         }
 
-        started = true;
+        state = LifecycleState.STARTING;
+
         String encoding = null;
         try {
             encoding = System.getProperty("file.encoding");
@@ -1470,13 +1470,10 @@ public class WebappClassLoader extends URLClassLoader
             needConvert = true;
         }
 
+        state = LifecycleState.STARTED;
     }
 
 
-    public boolean isStarted() {
-        return started;
-    }
-
     /**
      * Stop the class loader.
      *
@@ -1485,11 +1482,13 @@ public class WebappClassLoader extends URLClassLoader
     @Override
     public void stop() throws LifecycleException {
 
+        state = LifecycleState.STOPPING_PREP;
+
         // Clearing references should be done before setting started to
         // false, due to possible side effects
         clearReferences();
 
-        started = false;
+        state = LifecycleState.STOPPING;
 
         resourceEntries.clear();
         jarModificationTimes.clear();
@@ -1497,12 +1496,14 @@ public class WebappClassLoader extends URLClassLoader
 
         permissionList.clear();
         loaderPC.clear();
+
+        state = LifecycleState.STOPPED;
     }
 
 
     @Override
     public void destroy() {
-        // NOOP
+        state = LifecycleState.DESTROYED;
     }
 
 
@@ -2512,7 +2513,7 @@ public class WebappClassLoader extends URLClassLoader
      */
     protected ResourceEntry findResourceInternal(final String name, final String path) {
 
-        if (!started) {
+        if (!state.isAvailable()) {
             log.info(sm.getString("webappClassLoader.stopped", name));
             return null;
         }

==================================================
