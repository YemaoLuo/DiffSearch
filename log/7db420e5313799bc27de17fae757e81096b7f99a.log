7db420e5313799bc27de17fae757e81096b7f99a
==================================================
- Add dedicated listener for framework and EE integration.
==================================================
Remy Maucherat
==================================================
Thu Jan 16 22:07:28 2014 +0000
==================================================
Context.java
- Add dedicated listener for framework and EE integration.
- Fix context classloader with SSO session expiration.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1558930 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ThreadBindingListener.java
index 50f2c1c655..8699dbde51 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -1068,6 +1068,18 @@ public interface Context extends Container {
     public int[] findStatusPages();
 
 
+    /**
+     * Get the associated ThreadBindingListener.
+     */
+    public ThreadBindingListener getThreadBindingListener();
+
+
+    /**
+     * Get the associated ThreadBindingListener.
+     */
+    public void setThreadBindingListener(ThreadBindingListener threadBindingListener);
+
+
     /**
      * Return the set of watched resources for this Context. If none are
      * defined, a zero length array will be returned.

==================================================
SingleSignOn.java
new file mode 100644
index 0000000000..4dbf138b4b
--- /dev/null
+++ b/java/org/apache/catalina/ThreadBindingListener.java
@@ -0,0 +1,29 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.catalina;
+
+
+/**
+ * Callback for establishing naming association when entering the application
+ * scope. This corresponds to setting the context classloader.
+ */
+public interface ThreadBindingListener {
+
+    public void bind();
+    public void unbind();
+
+}

==================================================
ApplicationDispatcher.java
index f6b333bebe..2dd8abd805 100644
--- a/java/org/apache/catalina/authenticator/SingleSignOn.java
+++ b/java/org/apache/catalina/authenticator/SingleSignOn.java
@@ -20,17 +20,23 @@ package org.apache.catalina.authenticator;
 
 
 import java.io.IOException;
+import java.security.AccessController;
 import java.security.Principal;
+import java.security.PrivilegedAction;
 import java.util.HashMap;
 import java.util.Map;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.Cookie;
 
+import org.apache.catalina.Context;
+import org.apache.catalina.Globals;
+import org.apache.catalina.Manager;
 import org.apache.catalina.Realm;
 import org.apache.catalina.Session;
 import org.apache.catalina.SessionEvent;
 import org.apache.catalina.SessionListener;
+import org.apache.catalina.ThreadBindingListener;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.connector.Response;
 import org.apache.catalina.valves.ValveBase;
@@ -415,7 +421,15 @@ public class SingleSignOn extends ValveBase implements SessionListener {
                 reverse.remove(sessions[i]);
             }
             // Invalidate this session
-            sessions[i].expire();
+            ClassLoader oldContextClassLoader = null;
+            try {
+                oldContextClassLoader = bindThread(sessions[i]);
+                sessions[i].expire();
+            } finally {
+                if (oldContextClassLoader != null) {
+                    unbindThread(sessions[i], oldContextClassLoader);
+                }
+            }
         }
 
         // NOTE:  Clients may still possess the old single sign on cookie,
@@ -424,6 +438,94 @@ public class SingleSignOn extends ValveBase implements SessionListener {
 
     }
 
+    protected ClassLoader bindThread(Session session) {
+
+        Manager manager = session.getManager();
+        Context context = null;
+        ClassLoader contextClassLoader = null;
+        ThreadBindingListener threadBindingListener = null;
+        if (manager != null) {
+            context = manager.getContext();
+        }
+        if (context != null) {
+            if (context.getLoader() != null && context.getLoader().getClassLoader() != null) {
+                contextClassLoader = context.getLoader().getClassLoader();
+            }
+            threadBindingListener = context.getThreadBindingListener();
+        }
+        if (threadBindingListener == null || contextClassLoader == null) {
+            return null;
+        }
+
+        if (Globals.IS_SECURITY_ENABLED) {
+            return AccessController.doPrivileged(new PrivilegedBind(contextClassLoader, threadBindingListener));
+        } else {
+            ClassLoader oldContextClassLoader =
+                    Thread.currentThread().getContextClassLoader();
+            Thread.currentThread().setContextClassLoader(contextClassLoader);
+            threadBindingListener.bind();
+            return oldContextClassLoader;
+        }
+
+    }
+
+    protected class PrivilegedBind implements PrivilegedAction<ClassLoader> {
+        private ClassLoader contextClassLoader;
+        private ThreadBindingListener threadBindingListener;
+
+        PrivilegedBind(ClassLoader contextClassLoader, ThreadBindingListener threadBindingListener) {
+            this.contextClassLoader = contextClassLoader;
+            this.threadBindingListener = threadBindingListener;
+        }
+
+        public ClassLoader run() {
+            ClassLoader oldContextClassLoader =
+                    Thread.currentThread().getContextClassLoader();
+            Thread.currentThread().setContextClassLoader(contextClassLoader);
+            threadBindingListener.bind();
+            return oldContextClassLoader;
+        }
+    }
+
+    protected void unbindThread(Session session, ClassLoader oldContextClassLoader) {
+
+        Manager manager = session.getManager();
+        Context context = null;
+        ThreadBindingListener threadBindingListener = null;
+        if (manager != null) {
+            context = manager.getContext();
+        }
+        if (context != null) {
+            threadBindingListener = context.getThreadBindingListener();
+        }
+        if (threadBindingListener == null) {
+            return;
+        }
+
+        if (Globals.IS_SECURITY_ENABLED) {
+            AccessController.doPrivileged(new PrivilegedUnbind(oldContextClassLoader, threadBindingListener));
+        } else {
+            threadBindingListener.unbind();
+            Thread.currentThread().setContextClassLoader(oldContextClassLoader);
+        }
+
+    }
+
+    protected class PrivilegedUnbind implements PrivilegedAction<Void> {
+        private ClassLoader oldContextClassLoader;
+        private ThreadBindingListener threadBindingListener;
+
+        PrivilegedUnbind(ClassLoader oldContextClassLoader, ThreadBindingListener threadBindingListener) {
+            this.oldContextClassLoader = oldContextClassLoader;
+            this.threadBindingListener = threadBindingListener;
+        }
+
+        public Void run() {
+            threadBindingListener.unbind();
+            Thread.currentThread().setContextClassLoader(oldContextClassLoader);
+            return null;
+        }
+    }
 
     /**
      * Attempts reauthentication to the given <code>Realm</code> using

==================================================
ContainerBase.java
index 15c2f2c5be..351acda394 100644
--- a/java/org/apache/catalina/core/ApplicationDispatcher.java
+++ b/java/org/apache/catalina/core/ApplicationDispatcher.java
@@ -670,6 +670,7 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
 
         if (oldCCL != contextClassLoader) {
             Thread.currentThread().setContextClassLoader(contextClassLoader);
+            context.getThreadBindingListener().bind();
         } else {
             oldCCL = null;
         }
@@ -795,8 +796,10 @@ final class ApplicationDispatcher implements AsyncDispatcher, RequestDispatcher
         }
 
         // Reset the old context class loader
-        if (oldCCL != null)
+        if (oldCCL != null) {
+            context.getThreadBindingListener().unbind();
             Thread.currentThread().setContextClassLoader(oldCCL);
+        }
 
         // Unwrap request/response if needed
         // See Bugzilla 30949

==================================================
StandardContext.java
index 6534e67f00..2124ea8088 100644
--- a/java/org/apache/catalina/core/ContainerBase.java
+++ b/java/org/apache/catalina/core/ContainerBase.java
@@ -55,6 +55,7 @@ import org.apache.catalina.LifecycleState;
 import org.apache.catalina.Loader;
 import org.apache.catalina.Pipeline;
 import org.apache.catalina.Realm;
+import org.apache.catalina.ThreadBindingListener;
 import org.apache.catalina.Valve;
 import org.apache.catalina.Wrapper;
 import org.apache.catalina.connector.Request;
@@ -1354,6 +1355,10 @@ public abstract class ContainerBase extends LifecycleMBeanBase
                             Thread.currentThread().getContextClassLoader();
                     Thread.currentThread().setContextClassLoader(
                             loader.getClassLoader());
+                    ThreadBindingListener tbl = ((Context) container).getThreadBindingListener();
+                    if (tbl != null) {
+                        tbl.bind();
+                    }
                 }
                 container.backgroundProcess();
                 Container[] children = container.findChildren();
@@ -1367,9 +1372,15 @@ public abstract class ContainerBase extends LifecycleMBeanBase
                 log.error("Exception invoking periodic operation: ", t);
             } finally {
                 if (originalClassLoader != null) {
+                    if (container instanceof Context) {
+                        ThreadBindingListener tbl = ((Context) container).getThreadBindingListener();
+                        if (tbl != null) {
+                            tbl.unbind();
+                        }
+                    }
                     Thread.currentThread().setContextClassLoader(
                             originalClassLoader);
-                }
+               }
             }
         }
     }

==================================================
StandardHostValve.java
index f8988299c8..5a67ecfb1b 100644
--- a/java/org/apache/catalina/core/StandardContext.java
+++ b/java/org/apache/catalina/core/StandardContext.java
@@ -92,6 +92,7 @@ import org.apache.catalina.Loader;
 import org.apache.catalina.Manager;
 import org.apache.catalina.Pipeline;
 import org.apache.catalina.Realm;
+import org.apache.catalina.ThreadBindingListener;
 import org.apache.catalina.Valve;
 import org.apache.catalina.WebResource;
 import org.apache.catalina.WebResourceRoot;
@@ -807,6 +808,11 @@ public class StandardContext extends ContainerBase
 
     private String containerSciFilter;
 
+    protected static final ThreadBindingListener DEFAULT_NAMING_LISTENER = (new ThreadBindingListener() {
+        public void bind() {}
+        public void unbind() {}
+    });
+    protected ThreadBindingListener threadBindingListener = DEFAULT_NAMING_LISTENER;
 
     // ----------------------------------------------------- Context Properties
 
@@ -2386,6 +2392,17 @@ public class StandardContext extends ContainerBase
         this.jspConfigDescriptor = descriptor;
     }
 
+    @Override
+    public ThreadBindingListener getThreadBindingListener() {
+        return threadBindingListener;
+    }
+
+    @Override
+    public void setThreadBindingListener(ThreadBindingListener threadBindingListener) {
+        this.threadBindingListener = threadBindingListener;
+    }
+
+
     // ------------------------------------------------------ Public Properties
 
     /**
@@ -5712,6 +5729,9 @@ public class StandardContext extends ContainerBase
             Thread.currentThread().setContextClassLoader
                 (getLoader().getClassLoader());
         }
+        if (getThreadBindingListener() != null) {
+            getThreadBindingListener().bind();
+        }
 
         if (isUseNaming()) {
             try {
@@ -5735,6 +5755,9 @@ public class StandardContext extends ContainerBase
             ContextBindings.unbindThread(this, this);
         }
 
+        if (getThreadBindingListener() != null) {
+            getThreadBindingListener().unbind();
+        }
         Thread.currentThread().setContextClassLoader(oldContextClassLoader);
     }
 

==================================================
SecurityClassLoad.java
index c33f1c880a..2d1c306f8f 100644
--- a/java/org/apache/catalina/core/StandardHostValve.java
+++ b/java/org/apache/catalina/core/StandardHostValve.java
@@ -31,6 +31,7 @@ import javax.servlet.http.HttpServletResponse;
 
 import org.apache.catalina.Context;
 import org.apache.catalina.Globals;
+import org.apache.catalina.ThreadBindingListener;
 import org.apache.catalina.Wrapper;
 import org.apache.catalina.comet.CometEvent;
 import org.apache.catalina.connector.ClientAbortException;
@@ -130,11 +131,14 @@ final class StandardHostValve extends ValveBase {
             // This should eventually move to Engine, it's generic.
             if (Globals.IS_SECURITY_ENABLED) {
                 PrivilegedAction<Void> pa = new PrivilegedSetTccl(
-                        context.getLoader().getClassLoader());
+                        context.getLoader().getClassLoader(), 
+                        context.getThreadBindingListener(),
+                        true);
                 AccessController.doPrivileged(pa);
             } else {
                 Thread.currentThread().setContextClassLoader
                         (context.getLoader().getClassLoader());
+                context.getThreadBindingListener().bind();
             }
         }
         if (request.isAsyncSupported()) {
@@ -201,9 +205,11 @@ final class StandardHostValve extends ValveBase {
 
         // Restore the context classloader
         if (Globals.IS_SECURITY_ENABLED) {
-            PrivilegedAction<Void> pa = new PrivilegedSetTccl(MY_CLASSLOADER);
+            PrivilegedAction<Void> pa = new PrivilegedSetTccl(MY_CLASSLOADER, 
+                    context.getThreadBindingListener(), false);
             AccessController.doPrivileged(pa);
         } else {
+            context.getThreadBindingListener().unbind();
             Thread.currentThread().setContextClassLoader(MY_CLASSLOADER);
         }
     }
@@ -232,6 +238,7 @@ final class StandardHostValve extends ValveBase {
             // This should eventually move to Engine, it's generic.
             Thread.currentThread().setContextClassLoader
                     (context.getLoader().getClassLoader());
+            context.getThreadBindingListener().bind();
         }
 
         // Ask this Context to process this request
@@ -257,6 +264,7 @@ final class StandardHostValve extends ValveBase {
         }
 
         // Restore the context classloader
+        context.getThreadBindingListener().unbind();
         Thread.currentThread().setContextClassLoader
             (StandardHostValve.class.getClassLoader());
 
@@ -508,14 +516,23 @@ final class StandardHostValve extends ValveBase {
     private static class PrivilegedSetTccl implements PrivilegedAction<Void> {
 
         private final ClassLoader cl;
+        private final ThreadBindingListener tbl;
+        private final boolean bind;
 
-        PrivilegedSetTccl(ClassLoader cl) {
+        PrivilegedSetTccl(ClassLoader cl, ThreadBindingListener tbl, boolean bind) {
             this.cl = cl;
+            this.bind = bind;
+            this.tbl = tbl;
         }
 
         @Override
         public Void run() {
             Thread.currentThread().setContextClassLoader(cl);
+            if (bind) {
+                tbl.bind();
+            } else {
+                tbl.unbind();
+            }
             return null;
         }
     }

==================================================
FailedContext.java
index 8c221954b6..3aebab9f08 100644
--- a/java/org/apache/catalina/security/SecurityClassLoad.java
+++ b/java/org/apache/catalina/security/SecurityClassLoad.java
@@ -42,6 +42,7 @@ public final class SecurityClassLoad {
             return;
         }
 
+        loadAuthenticatorPackage(loader);
         loadCorePackage(loader);
         loadCoyotePackage(loader);
         loadLoaderPackage(loader);
@@ -55,6 +56,18 @@ public final class SecurityClassLoad {
     }
 
 
+    private static final void loadAuthenticatorPackage(ClassLoader loader)
+            throws Exception {
+        final String basePackage = "org.apache.catalina.authenticator.";
+        loader.loadClass
+            (basePackage +
+             "SingleSignOn$PrivilegedBind");
+        loader.loadClass
+            (basePackage +
+             "SingleSignOn$PrivilegedUnbind");
+   }
+
+
     private static final void loadCorePackage(ClassLoader loader)
             throws Exception {
         final String basePackage = "org.apache.catalina.core.";

==================================================
