6bd965a52ebe47947ba0570a7d1c70ce0cb7205a
==================================================
Revert the changes in 1635524 apart from some of the unit test changes that extend the coverage of the existing unit tests
==================================================
Mark Emlyn
==================================================
Sat Nov 1 17:38:56 2014 +0000
==================================================
AbstractHttp11Processor.java
Revert the changes in 1635524 apart from some of the unit test changes that extend the coverage of the existing unit tests

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1635994 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractHttp11Protocol.java
index 1237a49261..75efc923f1 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -1478,8 +1478,7 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
             // HTTP 1.1 and we are using keep-alive then we chunk unless we have
             // a Connection: close header
             connectionClosePresent = isConnectionClose(headers);
-            if (entityBody && http11 && (keepAlive || !endpoint.getDisableChunkingOnClose()) &&
-                    !connectionClosePresent) {
+            if (entityBody && http11 && keepAlive && !connectionClosePresent) {
                 getOutputBuffer().addActiveFilter
                     (outputFilters[Constants.CHUNKED_FILTER]);
                 contentDelimitation = true;

==================================================
AbstractEndpoint.java
index ee89416ffa..866472e536 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -207,13 +207,6 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
         endpoint.setMaxKeepAliveRequests(mkar);
     }
 
-    public boolean getDisableChunkingOnClose() {
-        return endpoint.getDisableChunkingOnClose();
-    }
-    public void setDisableChunkingOnClose(boolean disableChunkingOnClose) {
-        endpoint.setDisableChunkingOnClose(disableChunkingOnClose);
-    }
-
     protected NpnHandler<S> npnHandler;
     @SuppressWarnings("unchecked")
     public void setNpnHandler(String impl) {

==================================================
TestAbstractHttp11Processor.java
index 442fd09c92..31ce4f08d1 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -45,7 +45,6 @@ import org.apache.tomcat.util.threads.ThreadPoolExecutor;
  *
  * @author Mladen Turk
  * @author Remy Maucherat
- * @param <S> The type of socket the endpoint is associated with.
  */
 public abstract class AbstractEndpoint<S> {
 
@@ -423,21 +422,6 @@ public abstract class AbstractEndpoint<S> {
         this.maxKeepAliveRequests = maxKeepAliveRequests;
     }
 
-    /**
-     * Should the option of using chunked transfer encoding be disabled when it
-     * is known that the connection is going to be closed at the end of the
-     * response. Disabling chunking in this case is marginally more efficient
-     * but makes it impossible for the user agent to determine if the whole
-     * response was received or if it was truncated due to an error.
-     */
-    private boolean disableChunkingOnClose = false;
-    public boolean getDisableChunkingOnClose() {
-        return disableChunkingOnClose;
-    }
-    public void setDisableChunkingOnClose(boolean disableChunkingOnClose) {
-        this.disableChunkingOnClose = disableChunkingOnClose;
-    }
-
     /**
      * The maximum number of headers in a request that are allowed.
      * 100 by default. A value of less than 0 means no limit.

==================================================
