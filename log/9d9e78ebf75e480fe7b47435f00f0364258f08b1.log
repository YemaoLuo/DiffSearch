9d9e78ebf75e480fe7b47435f00f0364258f08b1
==================================================
UCDetector clean-up
==================================================
Mark Emlyn
==================================================
Fri Jul 13 22:04:25 2012 +0000
==================================================
BackupManager.java
UCDetector clean-up
 - Remove unused code
 - Use final where appropriate

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1361416 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DeltaManager.java
index 52e50c1026..65204f12a2 100644
--- a/java/org/apache/catalina/ha/session/BackupManager.java
+++ b/java/org/apache/catalina/ha/session/BackupManager.java
@@ -49,7 +49,7 @@ public class BackupManager extends ClusterManagerBase
      */
     protected static final StringManager sm = StringManager.getManager(Constants.Package);
 
-    protected static long DEFAULT_REPL_TIMEOUT = 15000;//15 seconds
+    protected static final long DEFAULT_REPL_TIMEOUT = 15000;//15 seconds
 
     /** Set to true if we don't want the sessions to expire on shutdown */
     protected boolean mExpireSessionsOnShutdown = true;
@@ -161,10 +161,9 @@ public class BackupManager extends ClusterManagerBase
                 }
             }
             cluster.registerManager(this);
-            LazyReplicatedMap<String,Session> map =
-                    new LazyReplicatedMap<String,Session>(this,
-                            cluster.getChannel(), rpcTimeout, getMapName(),
-                            getClassLoaders());
+            LazyReplicatedMap<String,Session> map = new LazyReplicatedMap<>(
+                    this, cluster.getChannel(), rpcTimeout, getMapName(),
+                    getClassLoaders());
             map.setChannelSendOptions(mapSendOptions);
             this.sessions = map;
         }  catch ( Exception x ) {
@@ -259,7 +258,7 @@ public class BackupManager extends ClusterManagerBase
 
     @Override
     public Set<String> getSessionIdsFull() {
-        Set<String> sessionIds = new HashSet<String>();
+        Set<String> sessionIds = new HashSet<>();
         LazyReplicatedMap<String,Session> map =
                 (LazyReplicatedMap<String,Session>)sessions;
         Iterator<String> keys = map.keySetFull().iterator();

==================================================
DeltaRequest.java
index e580b34eef..c830d2423e 100644
--- a/java/org/apache/catalina/ha/session/DeltaManager.java
+++ b/java/org/apache/catalina/ha/session/DeltaManager.java
@@ -80,7 +80,7 @@ public class DeltaManager extends ClusterManagerBase{
     /**
      * The descriptive name of this Manager implementation (for logging).
      */
-    protected static String managerName = "DeltaManager";
+    protected static final String managerName = "DeltaManager";
     protected String name = null;
 
     /**
@@ -101,8 +101,8 @@ public class DeltaManager extends ClusterManagerBase{
      * wait time between send session block (default 2 sec)
      */
     private int sendAllSessionsWaitTime = 2 * 1000 ;
-    private ArrayList<SessionMessage> receivedMessageQueue =
-        new ArrayList<SessionMessage>() ;
+    private final ArrayList<SessionMessage> receivedMessageQueue =
+            new ArrayList<>();
     private boolean receiverQueue = false ;
     private boolean stateTimestampDrop = true ;
     private long stateTransferCreateSendTime;

==================================================
DeltaSession.java
index 1ecd3efabf..63af2eea94 100644
--- a/java/org/apache/catalina/ha/session/DeltaRequest.java
+++ b/java/org/apache/catalina/ha/session/DeltaRequest.java
@@ -64,9 +64,8 @@ public class DeltaRequest implements Externalizable {
     public static final String NAME_AUTHTYPE = "__SET__AUTHTYPE__";
 
     private String sessionId;
-    private LinkedList<AttributeInfo> actions = new LinkedList<AttributeInfo>();
-    private LinkedList<AttributeInfo> actionPool =
-        new LinkedList<AttributeInfo>();
+    private LinkedList<AttributeInfo> actions = new LinkedList<>();
+    private final LinkedList<AttributeInfo> actionPool = new LinkedList<>();
 
     private boolean recordAllActions = false;
 
@@ -249,7 +248,7 @@ public class DeltaRequest implements Externalizable {
         recordAllActions = in.readBoolean();
         int cnt = in.readInt();
         if (actions == null)
-            actions = new LinkedList<AttributeInfo>();
+            actions = new LinkedList<>();
         else
             actions.clear();
         for (int i = 0; i < cnt; i++) {

==================================================
JvmRouteSessionIDBinderListener.java
index 3ad193a587..aa032927e5 100644
--- a/java/org/apache/catalina/ha/session/DeltaSession.java
+++ b/java/org/apache/catalina/ha/session/DeltaSession.java
@@ -729,7 +729,7 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
         if (log.isDebugEnabled()) log.debug(sm.getString("deltaSession.readSession", id));
 
         // Deserialize the attribute count and attribute values
-        if (attributes == null) attributes = new ConcurrentHashMap<String, Object>();
+        if (attributes == null) attributes = new ConcurrentHashMap<>();
         int n = ( (Integer) stream.readObject()).intValue();
         boolean isValidSave = isValid;
         isValid = true;
@@ -743,13 +743,12 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
         isValid = isValidSave;
 
         if (listeners == null) {
-            ArrayList<SessionListener> arrayList =
-                new ArrayList<SessionListener>();
+            ArrayList<SessionListener> arrayList = new ArrayList<>();
             listeners = arrayList;
         }
 
         if (notes == null) {
-            notes = new Hashtable<String,Object>();
+            notes = new Hashtable<>();
         }
         activate();
     }
@@ -810,8 +809,8 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
 
         // Accumulate the names of serializable and non-serializable attributes
         String keys[] = keys();
-        ArrayList<String> saveNames = new ArrayList<String>();
-        ArrayList<Object> saveValues = new ArrayList<Object>();
+        ArrayList<String> saveNames = new ArrayList<>();
+        ArrayList<Object> saveValues = new ArrayList<>();
         for (int i = 0; i < keys.length; i++) {
             Object value = null;
             value = attributes.get(keys[i]);
@@ -839,15 +838,8 @@ public class DeltaSession extends StandardSession implements Externalizable,Clus
 
     }
 
-    // -------------------------------------------------------- Private Methods
-
 
-    /**
-     * Return the value of an attribute without a check for validity.
-     */
-    protected Object getAttributeInternal(String name) {
-        return (attributes.get(name));
-    }
+    // -------------------------------------------------------- Private Methods
 
     protected void removeAttributeInternal(String name, boolean notify,
                                            boolean addDeltaRequest) {

==================================================
SerializablePrincipal.java
index db9b541954..a506721766 100644
--- a/java/org/apache/catalina/ha/session/JvmRouteSessionIDBinderListener.java
+++ b/java/org/apache/catalina/ha/session/JvmRouteSessionIDBinderListener.java
@@ -51,11 +51,6 @@ public class JvmRouteSessionIDBinderListener extends ClusterListener {
 
     protected boolean started = false;
 
-    /**
-     * number of session that goes to this cluster node
-     */
-    private long numberOfSessions = 0;
-
     //--Constructor---------------------------------------------
 
     public JvmRouteSessionIDBinderListener() {
@@ -64,13 +59,6 @@ public class JvmRouteSessionIDBinderListener extends ClusterListener {
 
     //--Logic---------------------------------------------------
 
-    /**
-     * @return Returns the numberOfSessions.
-     */
-    public long getNumberOfSessions() {
-        return numberOfSessions;
-    }
-
     /**
      * Add this Mover as Cluster Listener ( receiver)
      *

==================================================
SessionIDMessage.java
index 28c3e673c6..99981d74e0 100644
--- a/java/org/apache/catalina/ha/session/SerializablePrincipal.java
+++ b/java/org/apache/catalina/ha/session/SerializablePrincipal.java
@@ -55,40 +55,6 @@ public class SerializablePrincipal  implements java.io.Serializable {
 
     // ----------------------------------------------------------- Constructors
 
-    public SerializablePrincipal() {
-        super();
-    }
-
-
-    /**
-     * Construct a new Principal, associated with the specified Realm, for the
-     * specified username and password.
-     *
-     * @param name The username of the user represented by this Principal
-     * @param password Credentials used to authenticate this user
-     */
-    public SerializablePrincipal(String name, String password) {
-
-        this(name, password, null);
-
-    }
-
-
-    /**
-     * Construct a new Principal, associated with the specified Realm, for the
-     * specified username and password, with the specified role names
-     * (as Strings).
-     *
-     * @param name The username of the user represented by this Principal
-     * @param password Credentials used to authenticate this user
-     * @param roles List of roles (must be Strings) possessed by this user
-     */
-    public SerializablePrincipal(String name, String password,
-                            List<String> roles) {
-        this(name, password, roles, null);
-    }
-
-
     /**
      * Construct a new Principal, associated with the specified Realm, for the
      * specified username and password, with the specified role names
@@ -105,14 +71,17 @@ public class SerializablePrincipal  implements java.io.Serializable {
         super();
         this.name = name;
         this.password = password;
-        if (roles != null) {
-            this.roles = new String[roles.size()];
-            this.roles = roles.toArray(this.roles);
+        if (roles == null) {
+            this.roles = new String[0];
+        } else {
+            this.roles = roles.toArray(new String[roles.size()]);
             if (this.roles.length > 1)
                 Arrays.sort(this.roles);
         }
         if (userPrincipal instanceof Serializable) {
             this.userPrincipal = userPrincipal;
+        } else {
+            this.userPrincipal = null;
         }
     }
 
@@ -123,7 +92,7 @@ public class SerializablePrincipal  implements java.io.Serializable {
     /**
      * The username of the user represented by this Principal.
      */
-    protected String name = null;
+    protected final String name;
 
     public String getName() {
         return (this.name);
@@ -134,7 +103,7 @@ public class SerializablePrincipal  implements java.io.Serializable {
      * The authentication credentials for the user represented by
      * this Principal.
      */
-    protected String password = null;
+    protected final String password;
 
     public String getPassword() {
         return (this.password);
@@ -158,7 +127,7 @@ public class SerializablePrincipal  implements java.io.Serializable {
     /**
      * The set of roles associated with this user.
      */
-    protected String roles[] = new String[0];
+    protected final String roles[];
 
     public String[] getRoles() {
         return (this.roles);
@@ -168,7 +137,7 @@ public class SerializablePrincipal  implements java.io.Serializable {
     /**
      * The user principal, if present.
      */
-    protected Principal userPrincipal = null;
+    protected final Principal userPrincipal;
 
     // --------------------------------------------------------- Public Methods
 

==================================================
SessionMessageImpl.java
index a7314b1290..51791e691b 100644
--- a/java/org/apache/catalina/ha/session/SessionIDMessage.java
+++ b/java/org/apache/catalina/ha/session/SessionIDMessage.java
@@ -27,9 +27,7 @@ import org.apache.catalina.ha.ClusterMessageBase;
  */
 public class SessionIDMessage extends ClusterMessageBase {
 
-    private static final long serialVersionUID = 1L;
-
-    private int messageNumber;
+    private static final long serialVersionUID = 2L;
 
     private String orignalSessionID;
 
@@ -46,8 +44,6 @@ public class SessionIDMessage extends ClusterMessageBase {
                 result.append("#-#");
                 result.append(getContextName());
         result.append("#-#");
-        result.append(getMessageNumber());
-        result.append("#-#");
         result.append(System.currentTimeMillis());
         return result.toString();
     }
@@ -78,20 +74,6 @@ public class SessionIDMessage extends ClusterMessageBase {
     public void setContextName(String contextName) {
         this.contextName = contextName;
     }
-    /**
-     * @return Returns the messageNumber.
-     */
-    public int getMessageNumber() {
-        return messageNumber;
-    }
-
-    /**
-     * @param messageNumber
-     *            The messageNumber to set.
-     */
-    public void setMessageNumber(int messageNumber) {
-        this.messageNumber = messageNumber;
-    }
 
 
     /**

==================================================
