ece6db03fe1d776019ba302b8723642be8330099
==================================================
StringBuffer -> StringBuilder for o.a.jasper
==================================================
Mark Emlyn
==================================================
Mon Nov 2 18:45:17 2009 +0000
==================================================
JspCompilationContext.java
StringBuffer -> StringBuilder for o.a.jasper

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@832036 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AntCompiler.java
index bc5e948fda..6fac09ab3e 100644
--- a/java/org/apache/jasper/JspCompilationContext.java
+++ b/java/org/apache/jasper/JspCompilationContext.java
@@ -685,7 +685,7 @@ public class JspCompilationContext {
 
     protected static final String canonicalURI(String s) {
        if (s == null) return null;
-       StringBuffer result = new StringBuffer();
+       StringBuilder result = new StringBuilder();
        final int len = s.length();
        int pos = 0;
        while (pos < len) {

==================================================
DefaultErrorHandler.java
index 9579fb2f6e..9146a19675 100644
--- a/java/org/apache/jasper/compiler/AntCompiler.java
+++ b/java/org/apache/jasper/compiler/AntCompiler.java
@@ -85,7 +85,7 @@ public class AntCompiler extends Compiler {
     
     public class JasperAntLogger extends DefaultLogger {
         
-        protected StringBuffer reportBuf = new StringBuffer();
+        protected StringBuilder reportBuf = new StringBuilder();
         
         protected void printMessage(final String message,
                 final PrintStream stream,
@@ -124,9 +124,9 @@ public class AntCompiler extends Compiler {
         
         String sep = System.getProperty("path.separator");
         
-        StringBuffer errorReport = new StringBuffer();
+        StringBuilder errorReport = new StringBuilder();
         
-        StringBuffer info=new StringBuffer();
+        StringBuilder info=new StringBuilder();
         info.append("Compile: javaFileName=" + javaFileName + "\n" );
         info.append("    classpath=" + classpath + "\n" );
         
@@ -278,7 +278,7 @@ public class AntCompiler extends Compiler {
     }
 
     private String quotePathList(String list) {
-        StringBuffer result = new StringBuffer(list.length() + 10);
+        StringBuilder result = new StringBuilder(list.length() + 10);
         StringTokenizer st = new StringTokenizer(list, File.pathSeparator);
         while (st.hasMoreTokens()) {
             String token = st.nextToken();

==================================================
Dumper.java
index 97d543c02a..a8a6e59b1d 100644
--- a/java/org/apache/jasper/compiler/DefaultErrorHandler.java
+++ b/java/org/apache/jasper/compiler/DefaultErrorHandler.java
@@ -64,7 +64,7 @@ class DefaultErrorHandler implements ErrorHandler {
         }
         
         Object[] args = null;
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         
         for (int i=0; i < details.length; i++) {
             if (details[i].getJspBeginLineNumber() >= 0) {

==================================================
ELFunctionMapper.java
index e43e8083aa..04f453f483 100644
--- a/java/org/apache/jasper/compiler/Dumper.java
+++ b/java/org/apache/jasper/compiler/Dumper.java
@@ -29,7 +29,7 @@ class Dumper {
 	    if (attrs == null)
 		return "";
 
-	    StringBuffer buf = new StringBuffer();
+	    StringBuilder buf = new StringBuilder();
 	    for (int i=0; i < attrs.getLength(); i++) {
 		buf.append(" " + attrs.getQName(i) + "=\""
 			   + attrs.getValue(i) + "\"");

==================================================
ELParser.java
index 3d6077bf23..dd65bc5c01 100644
--- a/java/org/apache/jasper/compiler/ELFunctionMapper.java
+++ b/java/org/apache/jasper/compiler/ELFunctionMapper.java
@@ -32,8 +32,8 @@ import org.apache.jasper.JasperException;
 
 public class ELFunctionMapper {
     private int currFunc = 0;
-    StringBuffer ds;  // Contains codes to initialize the functions mappers.
-    StringBuffer ss;  // Contains declarations of the functions mappers.
+    StringBuilder ds;  // Contains codes to initialize the functions mappers.
+    StringBuilder ss;  // Contains declarations of the functions mappers.
 
     /**
      * Creates the functions mappers for all EL expressions in the JSP page.
@@ -44,8 +44,8 @@ public class ELFunctionMapper {
                 throws JasperException {
 
         ELFunctionMapper map = new ELFunctionMapper();
-        map.ds = new StringBuffer();
-        map.ss = new StringBuffer();
+        map.ds = new StringBuilder();
+        map.ss = new StringBuilder();
 
         page.visit(map.new ELFunctionVisitor());
 

==================================================
ErrorDispatcher.java
index e8cba0221a..045e9ab02a 100644
--- a/java/org/apache/jasper/compiler/ELParser.java
+++ b/java/org/apache/jasper/compiler/ELParser.java
@@ -86,7 +86,7 @@ public class ELParser {
      */
     private ELNode.Nodes parseEL() {
 
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         ELexpr = new ELNode.Nodes();
         while (hasNext()) {
             curToken = nextToken();
@@ -176,7 +176,7 @@ public class ELParser {
      */
     private String skipUntilEL() {
         char prev = 0;
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         while (hasNextChar()) {
             char ch = nextChar();
             if (prev == '\\') {
@@ -227,7 +227,7 @@ public class ELParser {
         if (hasNextChar()) {
             char ch = nextChar();
             if (Character.isJavaIdentifierStart(ch)) {
-                StringBuffer buf = new StringBuffer();
+                StringBuilder buf = new StringBuilder();
                 buf.append(ch);
                 while ((ch = peekChar()) != -1
                         && Character.isJavaIdentifierPart(ch)) {
@@ -252,7 +252,7 @@ public class ELParser {
      * '\\', and ('\"', or "\'")
      */
     private Token parseQuotedChars(char quote) {
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         buf.append(quote);
         while (hasNextChar()) {
             char ch = nextChar();

==================================================
Generator.java
index b4872c4d3f..ae9ee80c0f 100644
--- a/java/org/apache/jasper/compiler/ErrorDispatcher.java
+++ b/java/org/apache/jasper/compiler/ErrorDispatcher.java
@@ -431,7 +431,7 @@ public class ErrorDispatcher {
 	        throws IOException, JasperException {
 
         ArrayList<JavacErrorDetail> errors = new ArrayList<JavacErrorDetail>();
-        StringBuffer errMsgBuf = null;
+        StringBuilder errMsgBuf = null;
         int lineNum = -1;
         JavacErrorDetail javacError = null;
         
@@ -465,7 +465,7 @@ public class ErrorDispatcher {
                     lineNum = -1;
                 }
                 
-                errMsgBuf = new StringBuffer();
+                errMsgBuf = new StringBuilder();
                 
                 javacError = createJavacError(fname, page, errMsgBuf, lineNum);
             }
@@ -503,7 +503,7 @@ public class ErrorDispatcher {
      * @throws JasperException
      */
     public static JavacErrorDetail createJavacError(String fname,
-            Node.Nodes page, StringBuffer errMsgBuf, int lineNum)
+            Node.Nodes page, StringBuilder errMsgBuf, int lineNum)
     throws JasperException {
         return createJavacError(fname, page, errMsgBuf, lineNum, null);
     }
@@ -519,7 +519,7 @@ public class ErrorDispatcher {
      * @throws JasperException
      */
     public static JavacErrorDetail createJavacError(String fname,
-            Node.Nodes page, StringBuffer errMsgBuf, int lineNum,
+            Node.Nodes page, StringBuilder errMsgBuf, int lineNum,
             JspCompilationContext ctxt) throws JasperException {
         JavacErrorDetail javacError;
         // Attempt to map javac error line number to line in JSP page

==================================================
JDTCompiler.java
index 8ec6665c67..4e11d40f75 100644
--- a/java/org/apache/jasper/compiler/Generator.java
+++ b/java/org/apache/jasper/compiler/Generator.java
@@ -129,7 +129,7 @@ class Generator {
         if (s == null)
             return "";
 
-        StringBuffer b = new StringBuffer();
+        StringBuilder b = new StringBuilder();
         for (int i = 0; i < s.length(); i++) {
             char c = s.charAt(i);
             if (c == '"')
@@ -151,7 +151,7 @@ class Generator {
      */
     static String quote(char c) {
 
-        StringBuffer b = new StringBuffer();
+        StringBuilder b = new StringBuilder();
         b.append('\'');
         if (c == '\'')
             b.append('\\').append('\'');
@@ -169,7 +169,7 @@ class Generator {
 
     private String createJspId() {
         if (this.jspIdPrefix == null) {
-            StringBuffer sb = new StringBuffer(32);
+            StringBuilder sb = new StringBuilder(32);
             String name = ctxt.getServletJavaFileName();
             sb.append("jsp_").append(Math.abs(name.hashCode())).append('_');
             this.jspIdPrefix = sb.toString();
@@ -829,7 +829,7 @@ class Generator {
             if (tx==null) return null;
             Class<?> type = expectedType;
             int size = tx.length();
-            StringBuffer output = new StringBuffer(size);
+            StringBuilder output = new StringBuilder(size);
             boolean el = false;
             int i = 0;
             int mark = 0;
@@ -1996,7 +1996,7 @@ class Generator {
             n.setBeginJavaLine(out.getJavaLine());
 
             out.printin();
-            StringBuffer sb = new StringBuffer("out.write(\"");
+            StringBuilder sb = new StringBuilder("out.write(\"");
             int initLength = sb.length();
             int count = JspUtil.CHUNKSIZE;
             int srcLine = 0; // relative to starting srouce line
@@ -2822,7 +2822,7 @@ class Generator {
             } else if (attr.isELInterpreterInput()) {
 
                 // results buffer
-                StringBuffer sb = new StringBuffer(64);
+                StringBuilder sb = new StringBuilder(64);
 
                 TagAttributeInfo tai = attr.getTagAttributeInfo();
 

==================================================
JavacErrorDetail.java
index ccb8bed6ea..13a0c4f674 100644
--- a/java/org/apache/jasper/compiler/JDTCompiler.java
+++ b/java/org/apache/jasper/compiler/JDTCompiler.java
@@ -106,7 +106,7 @@ public class JDTCompiler extends org.apache.jasper.compiler.Compiler {
                     Reader reader = 
                         new BufferedReader(new InputStreamReader(is, ctxt.getOptions().getJavaEncoding()));
                     char[] chars = new char[8192];
-                    StringBuffer buf = new StringBuffer();
+                    StringBuilder buf = new StringBuilder();
                     int count;
                     while ((count = reader.read(chars, 0, 
                                                 chars.length)) > 0) {
@@ -374,7 +374,7 @@ public class JDTCompiler extends org.apache.jasper.compiler.Compiler {
                                         new String(problems[i].getOriginatingFileName());
                                     try {
                                         problemList.add(ErrorDispatcher.createJavacError
-                                                (name, pageNodes, new StringBuffer(problem.getMessage()), 
+                                                (name, pageNodes, new StringBuilder(problem.getMessage()), 
                                                         problem.getSourceLineNumber(), ctxt));
                                     } catch (JasperException e) {
                                         log.error("Error visiting node", e);

==================================================
JspDocumentParser.java
index 7318885d28..40711813ab 100644
--- a/java/org/apache/jasper/compiler/JavacErrorDetail.java
+++ b/java/org/apache/jasper/compiler/JavacErrorDetail.java
@@ -39,7 +39,7 @@ public class JavacErrorDetail {
     private int javaLineNum;
     private String jspFileName;
     private int jspBeginLineNum;
-    private StringBuffer errMsg;
+    private StringBuilder errMsg;
     private String jspExtract = null;
 
     /**
@@ -52,7 +52,7 @@ public class JavacErrorDetail {
      */
     public JavacErrorDetail(String javaFileName,
                             int javaLineNum,
-                            StringBuffer errMsg) {
+                            StringBuilder errMsg) {
 
         this.javaFileName = javaFileName;
         this.javaLineNum = javaLineNum;
@@ -77,7 +77,7 @@ public class JavacErrorDetail {
             int javaLineNum,
             String jspFileName,
             int jspBeginLineNum,
-            StringBuffer errMsg,
+            StringBuilder errMsg,
             JspCompilationContext ctxt) {
         
         this(javaFileName, javaLineNum, errMsg);
@@ -113,7 +113,7 @@ public class JavacErrorDetail {
                 }
     
                 // copy out a fragment of JSP to display to the user
-                StringBuffer fragment = new StringBuffer(1024);
+                StringBuilder fragment = new StringBuilder(1024);
                 int startIndex = Math.max(0, this.jspBeginLineNum-1-3);
                 int endIndex = Math.min(
                         jspLines.length-1, this.jspBeginLineNum-1+3);

==================================================
JspReader.java
index 3cd6fbb776..8379e428ed 100644
--- a/java/org/apache/jasper/compiler/JspDocumentParser.java
+++ b/java/org/apache/jasper/compiler/JspDocumentParser.java
@@ -68,7 +68,7 @@ class JspDocumentParser
     private JspCompilationContext ctxt;
     private PageInfo pageInfo;
     private String path;
-    private StringBuffer charBuffer;
+    private StringBuilder charBuffer;
 
     // Node representing the XML element currently being parsed
     private Node current;
@@ -454,7 +454,7 @@ class JspDocumentParser
     public void characters(char[] buf, int offset, int len) {
 
         if (charBuffer == null) {
-            charBuffer = new StringBuffer();
+            charBuffer = new StringBuilder();
         }
         charBuffer.append(buf, offset, len);
     }

==================================================
JspRuntimeContext.java
index 87cd6ed98b..64d2f8d7bc 100644
--- a/java/org/apache/jasper/compiler/JspReader.java
+++ b/java/org/apache/jasper/compiler/JspReader.java
@@ -403,9 +403,9 @@ class JspReader {
      * @param quoted If <strong>true</strong> accept quoted strings.
      */
     String parseToken(boolean quoted) throws JasperException {
-        StringBuffer stringBuffer = new StringBuffer();
+        StringBuilder StringBuilder = new StringBuilder();
         skipSpaces();
-        stringBuffer.setLength(0);
+        StringBuilder.setLength(0);
         
         if (!hasMoreInput()) {
             return "";
@@ -423,7 +423,7 @@ class JspReader {
                          ch = nextChar()) {
                     if (ch == '\\') 
                         ch = nextChar();
-                    stringBuffer.append((char) ch);
+                    StringBuilder.append((char) ch);
                 }
                 // Check end of quote, skip closing quote:
                 if (ch == -1) {
@@ -443,12 +443,12 @@ class JspReader {
                                peekChar() == '>' || peekChar() == '%')
                             ch = nextChar();
                     }
-                    stringBuffer.append((char) ch);
+                    StringBuilder.append((char) ch);
                 } while (!isDelimiter());
             }
         }
 
-        return stringBuffer.toString();
+        return StringBuilder.toString();
     }
 
     void setSingleFile(boolean val) {

==================================================
JspUtil.java
index af728b7854..5978ef52e3 100644
--- a/java/org/apache/jasper/compiler/JspRuntimeContext.java
+++ b/java/org/apache/jasper/compiler/JspRuntimeContext.java
@@ -323,7 +323,7 @@ public final class JspRuntimeContext {
      */
     private void initClassPath() {
 
-        StringBuffer cpath = new StringBuffer();
+        StringBuilder cpath = new StringBuilder();
         String sep = System.getProperty("path.separator");
 
         if (parentClassLoader instanceof URLClassLoader) {

==================================================
Node.java
index ed46e7d195..59080897e1 100644
--- a/java/org/apache/jasper/compiler/JspUtil.java
+++ b/java/org/apache/jasper/compiler/JspUtil.java
@@ -207,7 +207,7 @@ public class JspUtil {
     public static String escapeXml(String s) {
         if (s == null)
             return null;
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         for (int i = 0; i < s.length(); i++) {
             char c = s.charAt(i);
             if (c == '<') {
@@ -232,7 +232,7 @@ public class JspUtil {
      * string <tt>with</tt>.
      */
     public static String replace(String name, char replace, String with) {
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         int begin = 0;
         int end;
         int last = name.length();
@@ -428,7 +428,7 @@ public class JspUtil {
         // the generated Servlet/SimpleTag implements FunctionMapper, so
         // that machinery is already in place (mroth).
         targetType = toJavaSourceType(targetType);
-        StringBuffer call = new StringBuffer(
+        StringBuilder call = new StringBuilder(
                 "("
                         + targetType
                         + ") "
@@ -745,7 +745,7 @@ public class JspUtil {
     }
 
     private static String getClassNameBase(String urn) {
-        StringBuffer base = new StringBuffer("org.apache.jsp.tag.meta.");
+        StringBuilder base = new StringBuilder("org.apache.jsp.tag.meta.");
         if (urn != null) {
             base.append(makeJavaPackage(urn));
             base.append('.');
@@ -763,7 +763,7 @@ public class JspUtil {
      */
     public static final String makeJavaPackage(String path) {
         String classNameComponents[] = split(path, "/");
-        StringBuffer legalClassNames = new StringBuffer();
+        StringBuilder legalClassNames = new StringBuilder();
         for (int i = 0; i < classNameComponents.length; i++) {
             legalClassNames.append(makeJavaIdentifier(classNameComponents[i]));
             if (i < classNameComponents.length - 1) {
@@ -813,7 +813,7 @@ public class JspUtil {
      * @return Legal Java identifier corresponding to the given identifier
      */
     public static final String makeJavaIdentifier(String identifier) {
-        StringBuffer modifiedIdentifier = new StringBuffer(identifier.length());
+        StringBuilder modifiedIdentifier = new StringBuilder(identifier.length());
         if (!Character.isJavaIdentifierStart(identifier.charAt(0))) {
             modifiedIdentifier.append('_');
         }
@@ -938,7 +938,7 @@ public class JspUtil {
                 break;
             }
         }
-        StringBuffer resultType = new StringBuffer(t);
+        StringBuilder resultType = new StringBuilder(t);
         for (; dims > 0; dims--) {
             resultType.append("[]");
         }
@@ -963,7 +963,7 @@ public class JspUtil {
             return binaryName;
         }
 
-        StringBuffer buf = new StringBuffer(binaryName);
+        StringBuilder buf = new StringBuilder(binaryName);
         do {
             buf.setCharAt(c.getName().length(), '.');
             c = c.getDeclaringClass();

==================================================
PageDataImpl.java
index e4b3b3dd38..a241a0f6b2 100644
--- a/java/org/apache/jasper/compiler/Node.java
+++ b/java/org/apache/jasper/compiler/Node.java
@@ -830,7 +830,7 @@ abstract class Node implements TagConstants {
             String ret = text;
             if (ret == null) {
                 if (body != null) {
-                    StringBuffer buf = new StringBuffer();
+                    StringBuilder buf = new StringBuilder();
                     for (int i = 0; i < body.size(); i++) {
                         buf.append(body.getNode(i).getText());
                     }

==================================================
Parser.java
index 9022d31e31..5aa9b8a69d 100644
--- a/java/org/apache/jasper/compiler/PageDataImpl.java
+++ b/java/org/apache/jasper/compiler/PageDataImpl.java
@@ -53,7 +53,7 @@ class PageDataImpl extends PageData implements TagConstants {
     private static final String CDATA_END_SECTION = "]]>\n";
 
     // string buffer used to build XML view
-    private StringBuffer buf;
+    private StringBuilder buf;
 
     /**
      * Constructor.
@@ -69,7 +69,7 @@ class PageDataImpl extends PageData implements TagConstants {
 	page.visit(firstPass);
 
 	// Second pass
-	buf = new StringBuffer();
+	buf = new StringBuilder();
 	SecondPassVisitor secondPass
 	    = new SecondPassVisitor(page.getRoot(), buf, compiler,
 				    firstPass.getJspIdPrefix());
@@ -82,7 +82,7 @@ class PageDataImpl extends PageData implements TagConstants {
      * @return the input stream of the XML view
      */
     public InputStream getInputStream() {
-	// Turn StringBuffer into InputStream
+	// Turn StringBuilder into InputStream
         try {
             return new ByteArrayInputStream(buf.toString().getBytes("UTF-8"));
         } catch (UnsupportedEncodingException uee) {
@@ -234,7 +234,7 @@ class PageDataImpl extends PageData implements TagConstants {
         	implements TagConstants {
 
 	private Node.Root root;
-	private StringBuffer buf;
+	private StringBuilder buf;
 	private Compiler compiler;
 	private String jspIdPrefix;
 	private boolean resetDefaultNS = false;
@@ -245,7 +245,7 @@ class PageDataImpl extends PageData implements TagConstants {
 	/*
 	 * Constructor
 	 */
-	public SecondPassVisitor(Node.Root root, StringBuffer buf,
+	public SecondPassVisitor(Node.Root root, StringBuilder buf,
 				 Compiler compiler, String jspIdPrefix) {
 	    this.root = root;
 	    this.buf = buf;

==================================================
SmapGenerator.java
index b4d9029e91..dcc6b4f0fe 100644
--- a/java/org/apache/jasper/compiler/Parser.java
+++ b/java/org/apache/jasper/compiler/Parser.java
@@ -220,7 +220,7 @@ class Parser implements TagConstants {
     private String parseName() throws JasperException {
         char ch = (char) reader.peekChar();
         if (Character.isLetter(ch) || ch == '_' || ch == ':') {
-            StringBuffer buf = new StringBuffer();
+            StringBuilder buf = new StringBuilder();
             buf.append(ch);
             reader.nextChar();
             ch = (char) reader.peekChar();
@@ -263,7 +263,7 @@ class Parser implements TagConstants {
      */
     private String parseQuoted(Mark start, String tx, char quote)
             throws JasperException {
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         int size = tx.length();
         int i = 0;
         while (i < size) {

==================================================
SmapStratum.java
index 99a7b48cc6..21b559c6d6 100644
--- a/java/org/apache/jasper/compiler/SmapGenerator.java
+++ b/java/org/apache/jasper/compiler/SmapGenerator.java
@@ -111,7 +111,7 @@ public class SmapGenerator {
 	// check state and initialize buffer
 	if (outputFileName == null)
 	    throw new IllegalStateException();
-        StringBuffer out = new StringBuffer();
+        StringBuilder out = new StringBuilder();
 
 	// start the SMAP
 	out.append("SMAP\n");

==================================================
TextOptimizer.java
index aa0fbcb63b..74942a90b6 100644
--- a/java/org/apache/jasper/compiler/SmapStratum.java
+++ b/java/org/apache/jasper/compiler/SmapStratum.java
@@ -93,7 +93,7 @@ public class SmapStratum {
         public String getString() {
             if (inputStartLine == -1 || outputStartLine == -1)
                 throw new IllegalStateException();
-            StringBuffer out = new StringBuffer();
+            StringBuilder out = new StringBuilder();
             out.append(inputStartLine);
             if (lineFileIDSet)
                 out.append("#" + lineFileID);
@@ -295,7 +295,7 @@ public class SmapStratum {
         if (fileNameList.size() == 0 || lineData.size() == 0)
             return null;
 
-        StringBuffer out = new StringBuffer();
+        StringBuilder out = new StringBuilder();
 
         // print StratumSection
         out.append("*S " + stratumName + "\n");

==================================================
Validator.java
index 82df5216f8..380cdff128 100644
--- a/java/org/apache/jasper/compiler/TextOptimizer.java
+++ b/java/org/apache/jasper/compiler/TextOptimizer.java
@@ -32,7 +32,7 @@ public class TextOptimizer {
         private PageInfo pageInfo;
         private int textNodeCount = 0;
         private Node.TemplateText firstTextNode = null;
-        private StringBuffer textBuffer;
+        private StringBuilder textBuffer;
         private final String emptyText = new String("");
 
         public TextCatVisitor(Compiler compiler) {
@@ -80,7 +80,7 @@ public class TextOptimizer {
 
             if (textNodeCount++ == 0) {
                 firstTextNode = n;
-                textBuffer = new StringBuffer(n.getText());
+                textBuffer = new StringBuilder(n.getText());
             } else {
                 // Append text to text buffer
                 textBuffer.append(n.getText());

==================================================
JspRuntimeLibrary.java
index 1d5ddfbd4d..55973553e8 100644
--- a/java/org/apache/jasper/compiler/Validator.java
+++ b/java/org/apache/jasper/compiler/Validator.java
@@ -418,7 +418,7 @@ class Validator {
 
         private ClassLoader loader;
 
-        private final StringBuffer buf = new StringBuffer(32);
+        private final StringBuilder buf = new StringBuilder(32);
 
         private static final JspUtil.ValidAttribute[] jspRootAttrs = {
                 new JspUtil.ValidAttribute("xsi:schemaLocation"),
@@ -709,7 +709,7 @@ class Validator {
             }
 
             // build expression
-            StringBuffer expr = this.getBuffer();
+            StringBuilder expr = this.getBuffer();
             expr.append(n.getType()).append('{').append(n.getText())
                     .append('}');
             ELNode.Nodes el = ELParser.parse(expr.toString());
@@ -1363,9 +1363,9 @@ class Validator {
         }
 
         /*
-         * Return an empty StringBuffer [not thread-safe]
+         * Return an empty StringBuilder [not thread-safe]
          */
-        private StringBuffer getBuffer() {
+        private StringBuilder getBuffer() {
             this.buf.setLength(0);
             return this.buf;
         }
@@ -1674,7 +1674,7 @@ class Validator {
 
             ValidationMessage[] errors = tagInfo.validate(n.getTagData());
             if (errors != null && errors.length != 0) {
-                StringBuffer errMsg = new StringBuffer();
+                StringBuilder errMsg = new StringBuilder();
                 errMsg.append("<h3>");
                 errMsg.append(Localizer.getMessage(
                         "jsp.error.tei.invalid.attributes", n.getQName()));
@@ -1764,7 +1764,7 @@ class Validator {
     private static void validateXmlView(PageData xmlView, Compiler compiler)
             throws JasperException {
 
-        StringBuffer errMsg = null;
+        StringBuilder errMsg = null;
         ErrorDispatcher errDisp = compiler.getErrorDispatcher();
 
         for (Iterator<TagLibraryInfo> iter =
@@ -1778,7 +1778,7 @@ class Validator {
             ValidationMessage[] errors = tli.validate(xmlView);
             if ((errors != null) && (errors.length != 0)) {
                 if (errMsg == null) {
-                    errMsg = new StringBuffer();
+                    errMsg = new StringBuilder();
                 }
                 errMsg.append("<h3>");
                 errMsg.append(Localizer.getMessage(

==================================================
PageContextImpl.java
index af1a50125f..40b490b412 100644
--- a/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
+++ b/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
@@ -951,7 +951,7 @@ public class JspRuntimeLibrary {
             enc = "ISO-8859-1";        // The default request encoding 
         }
 
-        StringBuffer out = new StringBuffer(s.length());
+        StringBuilder out = new StringBuilder(s.length());
         ByteArrayOutputStream buf = new ByteArrayOutputStream();
         OutputStreamWriter writer = null;
         try {

==================================================
SecurityUtil.java
index 3b47494f9f..6e01523a14 100644
--- a/java/org/apache/jasper/runtime/PageContextImpl.java
+++ b/java/org/apache/jasper/runtime/PageContextImpl.java
@@ -872,7 +872,7 @@ public class PageContextImpl extends PageContext {
 	private static String XmlEscape(String s) {
 		if (s == null)
 			return null;
-		StringBuffer sb = new StringBuffer();
+		StringBuilder sb = new StringBuilder();
 		for (int i = 0; i < s.length(); i++) {
 			char c = s.charAt(i);
 			if (c == '<') {

==================================================
Util.java
index 22d0668e49..fc3a4a6ab1 100644
--- a/java/org/apache/jasper/security/SecurityUtil.java
+++ b/java/org/apache/jasper/security/SecurityUtil.java
@@ -55,7 +55,7 @@ public final class SecurityUtil{
 
         char content[] = new char[message.length()];
         message.getChars(0, message.length(), content, 0);
-        StringBuffer result = new StringBuffer(content.length + 50);
+        StringBuilder result = new StringBuilder(content.length + 50);
         for (int i = 0; i < content.length; i++) {
             switch (content[i]) {
             case '<':

==================================================
Import.java
index dfe0f2f5ac..1e4e287a75 100644
--- a/java/org/apache/jasper/tagplugins/jstl/Util.java
+++ b/java/org/apache/jasper/tagplugins/jstl/Util.java
@@ -150,7 +150,7 @@ public class Util {
      * taken from org.apache.taglibs.standard.tag.common.core.ImportSupport
      */
     public static String stripSession(String url) {
-        StringBuffer u = new StringBuffer(url);
+        StringBuilder u = new StringBuilder(url);
         int sessionStart;
         while ((sessionStart = u.toString().indexOf(";" + Constants.SESSION_PARAMETER_NAME + "=")) != -1) {
             int sessionEnd = u.toString().indexOf(";", sessionStart + 1);
@@ -182,16 +182,16 @@ public class Util {
         int start = 0;
         int length = buffer.length();
         char[] arrayBuffer = buffer.toCharArray();
-        StringBuffer escapedBuffer = null;
+        StringBuilder escapedBuffer = null;
         
         for (int i = 0; i < length; i++) {
             char c = arrayBuffer[i];
             if (c <= HIGHEST_SPECIAL) {
                 char[] escaped = specialCharactersRepresentation[c];
                 if (escaped != null) {
-                    // create StringBuffer to hold escaped xml string
+                    // create StringBuilder to hold escaped xml string
                     if (start == 0) {
-                        escapedBuffer = new StringBuffer(length + 5);
+                        escapedBuffer = new StringBuilder(length + 5);
                     }
                     // add unescaped portion
                     if (start < i) {

==================================================
TreeNode.java
index 0803429322..e994f433f8 100644
--- a/java/org/apache/jasper/tagplugins/jstl/core/Import.java
+++ b/java/org/apache/jasper/tagplugins/jstl/core/Import.java
@@ -52,7 +52,7 @@ public class Import implements TagPlugin {
         String requestDispatcherName = ctxt.getTemporaryVariableName();
         String irwName = ctxt.getTemporaryVariableName();           //ImportResponseWrapper name
         String brName = ctxt.getTemporaryVariableName();            //BufferedReader name
-        String sbName = ctxt.getTemporaryVariableName();            //StringBuffer name
+        String sbName = ctxt.getTemporaryVariableName();            //StringBuilder name
         String tempStringName = ctxt.getTemporaryVariableName();
         
         //is absolute url
@@ -300,7 +300,7 @@ public class Import implements TagPlugin {
             ctxt.generateJavaSource("    }");
             
             ctxt.generateJavaSource("    java.io.BufferedReader " + brName + " =  new java.io.BufferedReader(" + tempReaderName + ");");
-            ctxt.generateJavaSource("    StringBuffer " + sbName + " = new StringBuffer();");
+            ctxt.generateJavaSource("    StringBuilder " + sbName + " = new StringBuilder();");
             String index = ctxt.getTemporaryVariableName();
             ctxt.generateJavaSource("    int " + index + ";");
             ctxt.generateJavaSource("    while(("+index+" = "+brName+".read()) != -1) "+sbName+".append((char)"+index+");");

==================================================
