9b4cf40aebf95dbc984958cb68eda493b638bf4a
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=59017
==================================================
Mark Thomas
==================================================
Tue Mar 8 20:45:57 2016 +0000
==================================================
DefaultServlet.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=59017
Make the pre-compressed file support in the Default Servlet generic so any compression may be used rather than just gzip.
Patch provided by Mikko Tiihonen.
This closes #28

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1734150 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestDefaultServlet.java
index ebb9fa8e56..d967ad366c 100644
--- a/java/org/apache/catalina/servlets/DefaultServlet.java
+++ b/java/org/apache/catalina/servlets/DefaultServlet.java
@@ -36,6 +36,7 @@ import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Enumeration;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Locale;
 import java.util.StringTokenizer;
 
@@ -193,9 +194,9 @@ public class DefaultServlet extends HttpServlet {
     protected boolean readOnly = true;
 
     /**
-     * Should be serve gzip versions of files. By default, it's set to false.
+     * List of compression formats to serve and their preference order.
      */
-    protected boolean gzip = false;
+    protected CompressionFormat[] compressionFormats;
 
     /**
      * The output buffer size to use when serving resources.
@@ -280,8 +281,8 @@ public class DefaultServlet extends HttpServlet {
         if (getServletConfig().getInitParameter("readonly") != null)
             readOnly = Boolean.parseBoolean(getServletConfig().getInitParameter("readonly"));
 
-        if (getServletConfig().getInitParameter("gzip") != null)
-            gzip = Boolean.parseBoolean(getServletConfig().getInitParameter("gzip"));
+        compressionFormats = parseCompressionFormats(getServletConfig().getInitParameter("precompressed"),
+                getServletConfig().getInitParameter("gzip"));
 
         if (getServletConfig().getInitParameter("sendfileSize") != null)
             sendfileSize =
@@ -321,6 +322,27 @@ public class DefaultServlet extends HttpServlet {
         }
     }
 
+    private CompressionFormat[] parseCompressionFormats(String precompressed, String gzip) {
+        List<CompressionFormat> ret = new ArrayList<>();
+        if (precompressed != null && precompressed.indexOf('=') > 0) {
+            for (String pair : precompressed.split(",")) {
+                String[] setting = pair.split("=");
+                String encoding = setting[0];
+                String extension = setting[1];
+                ret.add(new CompressionFormat(extension, encoding));
+            }
+        } else if (precompressed != null) {
+            if (Boolean.parseBoolean(precompressed)) {
+                ret.add(new CompressionFormat(".br", "br"));
+                ret.add(new CompressionFormat(".gz", "gzip"));
+            }
+        } else if (Boolean.parseBoolean(gzip)) {
+            // gzip handling is for backwards compatibility with Tomcat 8.x
+            ret.add(new CompressionFormat(".gz", "gzip"));
+        }
+        return ret.toArray(new CompressionFormat[ret.size()]);
+    }
+
 
     // ------------------------------------------------------ Protected Methods
 
@@ -790,7 +812,7 @@ public class DefaultServlet extends HttpServlet {
         }
 
         // These need to reflect the original resource, not the potentially
-        // gzip'd version of the resource so get them now if they are going to
+        // precompressed version of the resource so get them now if they are going to
         // be needed later
         String eTag = null;
         String lastModifiedHttp = null;
@@ -800,11 +822,11 @@ public class DefaultServlet extends HttpServlet {
         }
 
 
-        // Serve a gzipped version of the file if present
-        boolean usingGzippedVersion = false;
-        if (gzip && !included && resource.isFile() && !path.endsWith(".gz")) {
-            WebResource gzipResource = resources.getResource(path + ".gz");
-            if (gzipResource.exists() && gzipResource.isFile()) {
+        // Serve a precompressed version of the file if present
+        boolean usingPrecompressedVersion = false;
+        if (compressionFormats.length > 0 && !included && resource.isFile() && !pathEndsWithCompressedExtension(path)) {
+            List<PrecompressedResource> precompressedResources = getAvailablePrecompressedResources(path);
+            if (!precompressedResources.isEmpty()) {
                 Collection<String> varyHeaders = response.getHeaders("Vary");
                 boolean addRequired = true;
                 for (String varyHeader : varyHeaders) {
@@ -817,10 +839,11 @@ public class DefaultServlet extends HttpServlet {
                 if (addRequired) {
                     response.addHeader("Vary", "accept-encoding");
                 }
-                if (checkIfGzip(request)) {
-                    response.addHeader("Content-Encoding", "gzip");
-                    resource = gzipResource;
-                    usingGzippedVersion = true;
+                PrecompressedResource bestResource = getBestPrecompressedResource(request, precompressedResources);
+                if (bestResource != null) {
+                    response.addHeader("Content-Encoding", bestResource.format.encoding);
+                    resource = bestResource.resource;
+                    usingPrecompressedVersion = true;
                 }
             }
         }
@@ -878,7 +901,7 @@ public class DefaultServlet extends HttpServlet {
             } catch (IllegalStateException e) {
                 // If it fails, we try to get a Writer instead if we're
                 // trying to serve a text file
-                if (!usingGzippedVersion &&
+                if (!usingPrecompressedVersion &&
                         ((contentType == null) ||
                                 (contentType.startsWith("text")) ||
                                 (contentType.endsWith("xml")) ||
@@ -1039,6 +1062,81 @@ public class DefaultServlet extends HttpServlet {
         }
     }
 
+    private boolean pathEndsWithCompressedExtension(String path) {
+        for (CompressionFormat format : compressionFormats) {
+            if (path.endsWith(format.extension)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private List<PrecompressedResource> getAvailablePrecompressedResources(String path) {
+        List<PrecompressedResource> ret = new ArrayList<>(compressionFormats.length);
+        for (CompressionFormat format : compressionFormats) {
+            WebResource precompressedResource = resources.getResource(path + format.extension);
+            if (precompressedResource.exists() && precompressedResource.isFile()) {
+                ret.add(new PrecompressedResource(precompressedResource, format));
+            }
+        }
+        return ret;
+    }
+
+    /**
+     * Match the client preferred encoding formts to the available precompressed resources.
+     *
+     * @param request   The servlet request we are processing
+     * @param precompressedResources   List of available precompressed resources.
+     * @return The best matching precompressed resource or null if no match was found.
+     */
+    private PrecompressedResource getBestPrecompressedResource(HttpServletRequest request, List<PrecompressedResource> precompressedResources) {
+        Enumeration<String> headers = request.getHeaders("Accept-Encoding");
+        PrecompressedResource bestResource = null;
+        double bestResourceQuality = 0;
+        while (headers.hasMoreElements()) {
+            String header = headers.nextElement();
+            for (String preference : header.split(",")) {
+                if (bestResourceQuality >= 1) {
+                    return bestResource;
+                }
+                double quality = 1;
+                int qualityIdx = preference.indexOf(';');
+                if (qualityIdx > 0) {
+                    int equalsIdx = preference.indexOf('=', qualityIdx + 1);
+                    if (equalsIdx == -1) {
+                        continue;
+                    }
+                    quality = Double.parseDouble(preference.substring(equalsIdx + 1).trim());
+                }
+                if (quality > bestResourceQuality) {
+                    String encoding = preference;
+                    if (qualityIdx > 0) {
+                        encoding = encoding.substring(0, qualityIdx);
+                    }
+                    encoding = encoding.trim();
+                    if ("identity".equals(encoding)) {
+                        bestResource = null;
+                        bestResourceQuality = quality;
+                        continue;
+                    }
+                    if ("*".equals(encoding)) {
+                        bestResource = precompressedResources.get(0);
+                        bestResourceQuality = quality;
+                        continue;
+                    }
+                    for (PrecompressedResource resource : precompressedResources) {
+                        if (encoding.equals(resource.format.encoding)) {
+                            bestResource = resource;
+                            bestResourceQuality = quality;
+                            break;
+                        }
+                    }
+                }
+            }
+        }
+        return bestResource;
+    }
+
     private void doDirectoryRedirect(HttpServletRequest request, HttpServletResponse response)
             throws IOException {
         StringBuilder location = new StringBuilder(request.getRequestURI());
@@ -1944,25 +2042,6 @@ public class DefaultServlet extends HttpServlet {
         return true;
     }
 
-    /**
-     * Check if the user agent supports gzip encoding.
-     *
-     * @param request   The servlet request we are processing
-     * @return <code>true</code> if the user agent supports gzip encoding,
-     * and <code>false</code> if the user agent does not support gzip encoding.
-     */
-    protected boolean checkIfGzip(HttpServletRequest request) {
-        Enumeration<String> headers = request.getHeaders("Accept-Encoding");
-        while (headers.hasMoreElements()) {
-            String header = headers.nextElement();
-            if (header.indexOf("gzip") != -1) {
-                return true;
-            }
-        }
-        return false;
-    }
-
-
     /**
      * Check if the if-unmodified-since condition is satisfied.
      *
@@ -2290,6 +2369,25 @@ public class DefaultServlet extends HttpServlet {
         }
     }
 
+    protected static class CompressionFormat {
+        public final String extension;
+        public final String encoding;
+
+        public CompressionFormat(String extension, String encoding) {
+            this.extension = extension;
+            this.encoding = encoding;
+        }
+    }
+
+    private static class PrecompressedResource {
+        public final WebResource resource;
+        public final CompressionFormat format;
+
+        private PrecompressedResource(WebResource resource, CompressionFormat format) {
+            this.resource = resource;
+            this.format = format;
+        }
+    }
 
     /**
      * This is secure in the sense that any attempt to use an external entity

==================================================
