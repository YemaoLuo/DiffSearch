389231bccaa28d9a4142b91bfcdecec9d2fa9764
==================================================
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63932 ETag & gzip
==================================================
Mark Thomas
==================================================
Thu Nov 28 14:44:20 2019 +0000
==================================================
CompressionConfig.java
Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63932 ETag & gzip

By default, do not compress content that has a strong ETag. This
behaviour is configuration for the HTTP/1.1 and HTTP/2 connectors via
the new Connector attribute noCompressionStrongETag


==================================================
AbstractHttp11Protocol.java
index 520ed2ea9b..8bb11f9350 100644
--- a/java/org/apache/coyote/CompressionConfig.java
+++ b/java/org/apache/coyote/CompressionConfig.java
@@ -46,6 +46,7 @@ public class CompressionConfig {
             "text/javascript,application/javascript,application/json,application/xml";
     private String[] compressibleMimeTypes = null;
     private int compressionMinSize = 2048;
+    private boolean noCompressionStrongETag = true;
 
 
     /**
@@ -182,6 +183,35 @@ public class CompressionConfig {
     }
 
 
+    /**
+     * Determine if compression is disabled if the resource has a strong ETag.
+     *
+     * @return {@code true} if compression is disabled, otherwise {@code false}
+     *
+     * @deprecated Will be removed in Tomcat 10 where it will be hard-coded to
+     *             {@code true}
+     */
+    @Deprecated
+    public boolean getNoCompressionStrongETag() {
+        return noCompressionStrongETag;
+    }
+
+
+    /**
+     * Set whether compression is disabled for resources with a strong ETag.
+     *
+     * @param noCompressionStrongETag {@code true} if compression is disabled,
+     *                                otherwise {@code false}
+     *
+     * @deprecated Will be removed in Tomcat 10 where it will be hard-coded to
+     *             {@code true}
+     */
+    @Deprecated
+    public void setNoCompressionStrongEtag(boolean noCompressionStrongETag) {
+        this.noCompressionStrongETag = noCompressionStrongETag;
+    }
+
+
     /**
      * Determines if compression should be enabled for the given response and if
      * it is, sets any necessary headers to mark it as such.
@@ -235,6 +265,16 @@ public class CompressionConfig {
             }
         }
 
+        // Check if the resource has a strong ETag
+        if (noCompressionStrongETag) {
+            String eTag = responseHeaders.getHeader("ETag");
+            if (eTag != null && !eTag.trim().startsWith("W/")) {
+                // Has an ETag that doesn't start with "W/..." so it must be a
+                // strong ETag
+                return false;
+            }
+        }
+
         // If processing reaches this far, the response might be compressed.
         // Therefore, set the Vary header to keep proxies happy
         ResponseUtil.addVaryFieldName(responseHeaders, "accept-encoding");

==================================================
Http2Protocol.java
index 61d9a0ceb0..70387b9864 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -279,6 +279,16 @@ public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
     }
 
 
+    @Deprecated
+    public boolean getNoCompressionStrongETag() {
+        return compressionConfig.getNoCompressionStrongETag();
+    }
+    @Deprecated
+    public void setNoCompressionStrongEtag(boolean noCompressionStrongETag) {
+        compressionConfig.setNoCompressionStrongEtag(noCompressionStrongETag);
+    }
+
+
     public boolean useCompression(Request request, Response response) {
         return compressionConfig.useCompression(request, response);
     }

==================================================
TestCompressionConfig.java
index 9597b792d7..1f3dfe0996 100644
--- a/java/org/apache/coyote/http2/Http2Protocol.java
+++ b/java/org/apache/coyote/http2/Http2Protocol.java
@@ -405,6 +405,16 @@ public class Http2Protocol implements UpgradeProtocol {
     }
 
 
+    @Deprecated
+    public boolean getNoCompressionStrongETag() {
+        return compressionConfig.getNoCompressionStrongETag();
+    }
+    @Deprecated
+    public void setNoCompressionStrongEtag(boolean noCompressionStrongETag) {
+        compressionConfig.setNoCompressionStrongEtag(noCompressionStrongETag);
+    }
+
+
     public boolean useCompression(Request request, Response response) {
         return compressionConfig.useCompression(request, response);
     }

==================================================
