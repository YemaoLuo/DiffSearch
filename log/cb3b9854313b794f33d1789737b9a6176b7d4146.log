cb3b9854313b794f33d1789737b9a6176b7d4146
==================================================
Make the read buffer size configurable
==================================================
Mark Emlyn
==================================================
Mon Dec 24 11:19:05 2012 +0000
==================================================
ServerContainerImpl.java
Make the read buffer size configurable

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1425635 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WsFrame.java
index 905e2b0fd5..b4fcd2dbc9 100644
--- a/java/org/apache/tomcat/websocket/ServerContainerImpl.java
+++ b/java/org/apache/tomcat/websocket/ServerContainerImpl.java
@@ -62,6 +62,7 @@ public class ServerContainerImpl extends WebSocketContainerImpl {
     private Map<String,ServerEndpointConfiguration> configMap = new ConcurrentHashMap<>();
     private Map<String,Class<?>> pojoMap = new ConcurrentHashMap<>();
     private Map<Class<?>,PojoMethodMapping> pojoMethodMap = new ConcurrentHashMap<>();
+    private volatile int readBufferSize = 8192;
 
 
     private ServerContainerImpl() {
@@ -165,4 +166,16 @@ public class ServerContainerImpl extends WebSocketContainerImpl {
         throw new IllegalStateException(sm.getString(
                 "serverContainer.missingEndpoint", servletPath));
     }
+
+
+
+    public int getReadBufferSize() {
+        return readBufferSize;
+    }
+
+
+
+    public void setReadBufferSize(int readBufferSize) {
+        this.readBufferSize = readBufferSize;
+    }
 }

==================================================
WsProtocolHandler.java
index 94e399c49b..6e2c85dd4c 100644
--- a/java/org/apache/tomcat/websocket/WsFrame.java
+++ b/java/org/apache/tomcat/websocket/WsFrame.java
@@ -66,8 +66,12 @@ public class WsFrame {
     public WsFrame(ServletInputStream sis, WsSession wsSession) {
         this.sis = sis;
         this.wsSession = wsSession;
-        inputBuffer = new byte[8192];
-        messageBuffer = ByteBuffer.allocate(8192);
+
+        int readBufferSize =
+                ServerContainerImpl.getServerContainer().getReadBufferSize();
+
+        inputBuffer = new byte[readBufferSize];
+        messageBuffer = ByteBuffer.allocate(readBufferSize);
     }
 
 

==================================================
WsConfigListener.java
index d1b008db28..7b5fd2fc83 100644
--- a/java/org/apache/tomcat/websocket/WsProtocolHandler.java
+++ b/java/org/apache/tomcat/websocket/WsProtocolHandler.java
@@ -59,18 +59,20 @@ public class WsProtocolHandler implements ProtocolHandler {
         } catch (IOException e) {
             throw new IllegalStateException(e);
         }
-        WsFrame wsFrame = new WsFrame(sis, wsSession);
-        sis.setReadListener(new WsReadListener(this, wsFrame, wsSession));
-        WsRemoteEndpoint wsRemoteEndpoint =
-                new WsRemoteEndpoint(wsSession, sos);
-        wsSession.setRemote(wsRemoteEndpoint);
-        sos.setWriteListener(new WsWriteListener(this, wsRemoteEndpoint));
 
         // Need to call onOpen using the web application's class loader
+        // Create the frame using the application's class loader so it can pick
+        // up application specific config from the ServerContainerImpl
         Thread t = Thread.currentThread();
         ClassLoader cl = t.getContextClassLoader();
         t.setContextClassLoader(applicationClassLoader);
         try {
+            WsFrame wsFrame = new WsFrame(sis, wsSession);
+            sis.setReadListener(new WsReadListener(this, wsFrame, wsSession));
+            WsRemoteEndpoint wsRemoteEndpoint =
+                    new WsRemoteEndpoint(wsSession, sos);
+            wsSession.setRemote(wsRemoteEndpoint);
+            sos.setWriteListener(new WsWriteListener(this, wsRemoteEndpoint));
             ep.onOpen(wsSession, endpointConfig);
         } finally {
             t.setContextClassLoader(cl);

==================================================
