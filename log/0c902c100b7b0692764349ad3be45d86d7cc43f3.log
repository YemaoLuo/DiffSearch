0c902c100b7b0692764349ad3be45d86d7cc43f3
==================================================
Fix the remaining Eclipse warnings in the non-generated classes
==================================================
Mark Emlyn
==================================================
Sun Jan 10 13:11:52 2010 +0000
==================================================
AstIdentifier.java
Fix the remaining Eclipse warnings in the non-generated classes

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@897635 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AstValue.java
index 5cefbb3a7d..540bee8bea 100644
--- a/java/org/apache/el/parser/AstIdentifier.java
+++ b/java/org/apache/el/parser/AstIdentifier.java
@@ -91,6 +91,7 @@ public final class AstIdentifier extends SimpleNode {
         ctx.getELResolver().setValue(ctx, null, this.image, value);
     }
 
+    @SuppressWarnings("unchecked")
     @Override
     public Object invoke(EvaluationContext ctx, Class[] paramTypes,
             Object[] paramValues) throws ELException {
@@ -98,6 +99,7 @@ public final class AstIdentifier extends SimpleNode {
     }
     
 
+    @SuppressWarnings("unchecked")
     @Override
     public MethodInfo getMethodInfo(EvaluationContext ctx, Class[] paramTypes)
             throws ELException {

==================================================
SimpleNode.java
index 03715229a7..9a5cb5d3d7 100644
--- a/java/org/apache/el/parser/AstValue.java
+++ b/java/org/apache/el/parser/AstValue.java
@@ -142,9 +142,11 @@ public final class AstValue extends SimpleNode {
         Class<?> targetClass = resolver.getType(ctx, t.base, t.property);
         if (COERCE_TO_ZERO == true
                 || !isAssignable(value, targetClass)) {
-            value = ELSupport.coerceToType(value, targetClass);
+            resolver.setValue(ctx, t.base, t.property,
+                    ELSupport.coerceToType(value, targetClass));
+        } else {
+            resolver.setValue(ctx, t.base, t.property, value);
         }
-        resolver.setValue(ctx, t.base, t.property, value);
     }
 
     private boolean isAssignable(Object value, Class<?> targetClass) {
@@ -159,6 +161,7 @@ public final class AstValue extends SimpleNode {
     }
 
 
+    @SuppressWarnings("unchecked")
     @Override
     public MethodInfo getMethodInfo(EvaluationContext ctx, Class[] paramTypes)
             throws ELException {
@@ -168,6 +171,7 @@ public final class AstValue extends SimpleNode {
                 .getParameterTypes());
     }
 
+    @SuppressWarnings("unchecked")
     @Override
     public Object invoke(EvaluationContext ctx, Class[] paramTypes,
             Object[] paramValues) throws ELException {

==================================================
