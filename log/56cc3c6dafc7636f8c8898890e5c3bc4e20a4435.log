56cc3c6dafc7636f8c8898890e5c3bc4e20a4435
==================================================
Further fix for https://bz.apache.org/bugzilla/show_bug.cgi?id=57855
==================================================
Mark Thomas
==================================================
Mon Apr 27 21:43:22 2015 +0000
==================================================
AstValue.java
Further fix for https://bz.apache.org/bugzilla/show_bug.cgi?id=57855
Follow-up to r1676231
Handle case where null is passed to a method with a single varargs parameter

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1676381 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestMethodExpressionImpl.java
index f20b170200..a4f02be179 100644
--- a/java/org/apache/el/parser/AstValue.java
+++ b/java/org/apache/el/parser/AstValue.java
@@ -268,9 +268,9 @@ public final class AstValue extends SimpleNode {
 
         int paramCount = types.length;
 
-        if (paramCount > 0 && src == null ||
-                m.isVarArgs() && src.length < paramCount ||
-                !m.isVarArgs() && src.length != paramCount) {
+        if (m.isVarArgs() && paramCount > 1 && (src == null || paramCount > src.length) ||
+                !m.isVarArgs() && (paramCount > 0 && src == null ||
+                        src != null && src.length != paramCount)) {
             String inputParamCount = null;
             if (src != null) {
                 inputParamCount = Integer.toString(src.length);
@@ -286,6 +286,10 @@ public final class AstValue extends SimpleNode {
             throw new IllegalArgumentException(msg);
         }
 
+        if (src == null) {
+            return new Object[1];
+        }
+
         Object[] dest = new Object[paramCount];
 
         for (int i = 0; i < paramCount - 1; i++) {

==================================================
TesterBeanB.java
index 1ddea069db..dfdfb391d8 100644
--- a/test/org/apache/el/TestMethodExpressionImpl.java
+++ b/test/org/apache/el/TestMethodExpressionImpl.java
@@ -498,4 +498,28 @@ public class TestMethodExpressionImpl {
                 "${beanAA.echo2}", null , new Class[]{String.class});
         me.invoke(context, null);
     }
+
+    @Test
+    public void testBug57855c() {
+        MethodExpression me = factory.createMethodExpression(context,
+                "${beanB.echo}", null , new Class[]{String.class});
+        me.invoke(context, null);
+    }
+
+
+    @Test
+    public void testBug57855d() {
+        MethodExpression me = factory.createMethodExpression(context,
+                "${beanB.echo}", null , new Class[]{String.class});
+        Object r = me.invoke(context, new String[] { "aaa" });
+        assertEquals("aaa", r.toString());
+    }
+    @Test
+    public void testBug57855e() {
+        MethodExpression me = factory.createMethodExpression(context,
+                "${beanB.echo}", null , new Class[]{String.class});
+        Object r = me.invoke(context, new String[] { "aaa", "bbb" });
+        assertEquals("aaa, bbb", r.toString());
+    }
+
 }

==================================================
