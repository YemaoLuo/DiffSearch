efdd8e90f5ef4606ab550417c1d381cdb1979c54
==================================================
Partial fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=48132
==================================================
Mark Emlyn
==================================================
Thu Nov 5 01:19:20 2009 +0000
==================================================
ArrayELResolver.java
Partial fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=48132
Patch provided by sebb

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@832955 13f79535-47bb-0310-9956-ffa450edef68



==================================================
BeanELResolver.java
index 944349d3b1..8165bec40a 100644
--- a/java/javax/el/ArrayELResolver.java
+++ b/java/javax/el/ArrayELResolver.java
@@ -34,7 +34,8 @@ public class ArrayELResolver extends ELResolver {
 		this.readOnly = readOnly;
 	}
 
-	public Object getValue(ELContext context, Object base, Object property)
+	@Override
+    public Object getValue(ELContext context, Object base, Object property)
 			throws NullPointerException, PropertyNotFoundException, ELException {
 		if (context == null) {
 			throw new NullPointerException();
@@ -52,7 +53,8 @@ public class ArrayELResolver extends ELResolver {
 		return null;
 	}
 
-	public Class<?> getType(ELContext context, Object base, Object property)
+	@Override
+    public Class<?> getType(ELContext context, Object base, Object property)
 			throws NullPointerException, PropertyNotFoundException, ELException {
 		if (context == null) {
 			throw new NullPointerException();
@@ -68,7 +70,8 @@ public class ArrayELResolver extends ELResolver {
 		return null;
 	}
 
-	public void setValue(ELContext context, Object base, Object property,
+	@Override
+    public void setValue(ELContext context, Object base, Object property,
 			Object value) throws NullPointerException,
 			PropertyNotFoundException, PropertyNotWritableException,
 			ELException {
@@ -91,7 +94,8 @@ public class ArrayELResolver extends ELResolver {
 		}
 	}
 
-	public boolean isReadOnly(ELContext context, Object base, Object property)
+	@Override
+    public boolean isReadOnly(ELContext context, Object base, Object property)
 			throws NullPointerException, PropertyNotFoundException, ELException {
 		if (context == null) {
 			throw new NullPointerException();
@@ -106,7 +110,8 @@ public class ArrayELResolver extends ELResolver {
 		return this.readOnly;
 	}
 
-	public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
+	@Override
+    public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
 		if (base != null && base.getClass().isArray()) {
 			FeatureDescriptor[] descs = new FeatureDescriptor[Array.getLength(base)];
 			for (int i = 0; i < descs.length; i++) {
@@ -124,7 +129,8 @@ public class ArrayELResolver extends ELResolver {
 		return null;
 	}
 
-	public Class<?> getCommonPropertyType(ELContext context, Object base) {
+	@Override
+    public Class<?> getCommonPropertyType(ELContext context, Object base) {
 		if (base != null && base.getClass().isArray()) {
 			return Integer.class;
 		}

==================================================
CompositeELResolver.java
index 30db458ff3..ea21be5579 100644
--- a/java/javax/el/BeanELResolver.java
+++ b/java/javax/el/BeanELResolver.java
@@ -47,7 +47,8 @@ public class BeanELResolver extends ELResolver {
 		this.readOnly = readOnly;
 	}
 
-	public Object getValue(ELContext context, Object base, Object property)
+	@Override
+    public Object getValue(ELContext context, Object base, Object property)
 			throws NullPointerException, PropertyNotFoundException, ELException {
 		if (context == null) {
 			throw new NullPointerException();
@@ -71,7 +72,8 @@ public class BeanELResolver extends ELResolver {
 		}
 	}
 
-	public Class<?> getType(ELContext context, Object base, Object property)
+	@Override
+    public Class<?> getType(ELContext context, Object base, Object property)
 			throws NullPointerException, PropertyNotFoundException, ELException {
 		if (context == null) {
 			throw new NullPointerException();
@@ -84,7 +86,8 @@ public class BeanELResolver extends ELResolver {
 		return this.property(context, base, property).getPropertyType();
 	}
 
-	public void setValue(ELContext context, Object base, Object property,
+	@Override
+    public void setValue(ELContext context, Object base, Object property,
 			Object value) throws NullPointerException,
 			PropertyNotFoundException, PropertyNotWritableException,
 			ELException {
@@ -117,7 +120,8 @@ public class BeanELResolver extends ELResolver {
 		}
 	}
 
-	public boolean isReadOnly(ELContext context, Object base, Object property)
+	@Override
+    public boolean isReadOnly(ELContext context, Object base, Object property)
 			throws NullPointerException, PropertyNotFoundException, ELException {
 		if (context == null) {
 			throw new NullPointerException();
@@ -131,7 +135,8 @@ public class BeanELResolver extends ELResolver {
 				|| this.property(context, base, property).isReadOnly();
 	}
 
-	public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
+	@Override
+    public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
 		if (context == null) {
 			throw new NullPointerException();
 		}
@@ -155,7 +160,8 @@ public class BeanELResolver extends ELResolver {
 		return null;
 	}
 
-	public Class<?> getCommonPropertyType(ELContext context, Object base) {
+	@Override
+    public Class<?> getCommonPropertyType(ELContext context, Object base) {
 		if (context == null) {
 			throw new NullPointerException();
 		}

==================================================
Expression.java
index d4e3652ca5..b731c7a4ba 100644
--- a/java/javax/el/CompositeELResolver.java
+++ b/java/javax/el/CompositeELResolver.java
@@ -45,6 +45,7 @@ public class CompositeELResolver extends ELResolver {
         this.resolvers[this.size++] = elResolver;
     }
 
+    @Override
     public Object getValue(ELContext context, Object base, Object property)
             throws NullPointerException, PropertyNotFoundException, ELException {
         context.setPropertyResolved(false);
@@ -59,6 +60,7 @@ public class CompositeELResolver extends ELResolver {
         return null;
     }
 
+    @Override
     public void setValue(ELContext context, Object base, Object property,
             Object value) throws NullPointerException,
             PropertyNotFoundException, PropertyNotWritableException,
@@ -73,6 +75,7 @@ public class CompositeELResolver extends ELResolver {
         }
     }
 
+    @Override
     public boolean isReadOnly(ELContext context, Object base, Object property)
             throws NullPointerException, PropertyNotFoundException, ELException {
         context.setPropertyResolved(false);
@@ -87,10 +90,12 @@ public class CompositeELResolver extends ELResolver {
         return false;
     }
 
+    @Override
     public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
         return new FeatureIterator(context, base, this.resolvers, this.size);
     }
 
+    @Override
     public Class<?> getCommonPropertyType(ELContext context, Object base) {
         int sz = this.size;
         Class<?> commonType = null, type = null;
@@ -104,6 +109,7 @@ public class CompositeELResolver extends ELResolver {
         return commonType;
     }
 
+    @Override
     public Class<?> getType(ELContext context, Object base, Object property)
             throws NullPointerException, PropertyNotFoundException, ELException {
         context.setPropertyResolved(false);

==================================================
ListELResolver.java
index 8d9d7ec83c..a7694ef400 100644
--- a/java/javax/el/Expression.java
+++ b/java/javax/el/Expression.java
@@ -24,8 +24,10 @@ import java.io.Serializable;
  */
 public abstract class Expression implements Serializable {
 
+    @Override
     public abstract boolean equals(Object obj);
 
+    @Override
     public abstract int hashCode();
     
     public abstract String getExpressionString();

==================================================
MapELResolver.java
index ff0259b95c..712e69de71 100644
--- a/java/javax/el/ListELResolver.java
+++ b/java/javax/el/ListELResolver.java
@@ -39,7 +39,8 @@ public class ListELResolver extends ELResolver {
 		this.readOnly = readOnly;
 	}
 
-	public Object getValue(ELContext context, Object base, Object property)
+	@Override
+    public Object getValue(ELContext context, Object base, Object property)
 			throws NullPointerException, PropertyNotFoundException, ELException {
 		if (context == null) {
 			throw new NullPointerException();
@@ -58,7 +59,8 @@ public class ListELResolver extends ELResolver {
 		return null;
 	}
 
-	public Class<?> getType(ELContext context, Object base, Object property)
+	@Override
+    public Class<?> getType(ELContext context, Object base, Object property)
 			throws NullPointerException, PropertyNotFoundException, ELException {
 		if (context == null) {
 			throw new NullPointerException();
@@ -78,7 +80,8 @@ public class ListELResolver extends ELResolver {
 		return null;
 	}
 
-	public void setValue(ELContext context, Object base, Object property,
+	@Override
+    public void setValue(ELContext context, Object base, Object property,
 			Object value) throws NullPointerException,
 			PropertyNotFoundException, PropertyNotWritableException,
 			ELException {
@@ -107,7 +110,8 @@ public class ListELResolver extends ELResolver {
 		}
 	}
 
-	public boolean isReadOnly(ELContext context, Object base, Object property)
+	@Override
+    public boolean isReadOnly(ELContext context, Object base, Object property)
 			throws NullPointerException, PropertyNotFoundException, ELException {
 		if (context == null) {
 			throw new NullPointerException();
@@ -127,7 +131,8 @@ public class ListELResolver extends ELResolver {
 		return this.readOnly;
 	}
 
-	public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
+	@Override
+    public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
 		if (base instanceof List) {
 			FeatureDescriptor[] descs = new FeatureDescriptor[((List) base).size()];
 			for (int i = 0; i < descs.length; i++) {
@@ -145,7 +150,8 @@ public class ListELResolver extends ELResolver {
 		return null;
 	}
 
-	public Class<?> getCommonPropertyType(ELContext context, Object base) {
+	@Override
+    public Class<?> getCommonPropertyType(ELContext context, Object base) {
 		if (base != null && base instanceof List) {
 			return Integer.class;
 		}

==================================================
ResourceBundleELResolver.java
index 5f83474283..7238fc3b06 100644
--- a/java/javax/el/MapELResolver.java
+++ b/java/javax/el/MapELResolver.java
@@ -40,7 +40,8 @@ public class MapELResolver extends ELResolver {
 		this.readOnly = readOnly;
 	}
 
-	public Object getValue(ELContext context, Object base, Object property)
+	@Override
+    public Object getValue(ELContext context, Object base, Object property)
 			throws NullPointerException, PropertyNotFoundException, ELException {
 		if (context == null) {
 			throw new NullPointerException();
@@ -54,7 +55,8 @@ public class MapELResolver extends ELResolver {
 		return null;
 	}
 
-	public Class<?> getType(ELContext context, Object base, Object property)
+	@Override
+    public Class<?> getType(ELContext context, Object base, Object property)
 			throws NullPointerException, PropertyNotFoundException, ELException {
 		if (context == null) {
 			throw new NullPointerException();
@@ -69,7 +71,8 @@ public class MapELResolver extends ELResolver {
 		return null;
 	}
 
-	public void setValue(ELContext context, Object base, Object property,
+	@Override
+    public void setValue(ELContext context, Object base, Object property,
 			Object value) throws NullPointerException,
 			PropertyNotFoundException, PropertyNotWritableException,
 			ELException {
@@ -94,7 +97,8 @@ public class MapELResolver extends ELResolver {
 		}
 	}
 
-	public boolean isReadOnly(ELContext context, Object base, Object property)
+	@Override
+    public boolean isReadOnly(ELContext context, Object base, Object property)
 			throws NullPointerException, PropertyNotFoundException, ELException {
 		if (context == null) {
 			throw new NullPointerException();
@@ -108,7 +112,8 @@ public class MapELResolver extends ELResolver {
 		return this.readOnly;
 	}
 
-	public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
+	@Override
+    public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
 		if (base instanceof Map) {
 			Iterator itr = ((Map) base).keySet().iterator();
 			List<FeatureDescriptor> feats = new ArrayList<FeatureDescriptor>();
@@ -131,7 +136,8 @@ public class MapELResolver extends ELResolver {
 		return null;
 	}
 
-	public Class<?> getCommonPropertyType(ELContext context, Object base) {
+	@Override
+    public Class<?> getCommonPropertyType(ELContext context, Object base) {
 		if (base instanceof Map) {
 			return Object.class;
 		}

==================================================
Cookie.java
index 733aec9593..c37c2cae38 100644
--- a/java/javax/el/ResourceBundleELResolver.java
+++ b/java/javax/el/ResourceBundleELResolver.java
@@ -31,7 +31,8 @@ public class ResourceBundleELResolver extends ELResolver {
 		super();
 	}
 
-	public Object getValue(ELContext context, Object base, Object property)
+	@Override
+    public Object getValue(ELContext context, Object base, Object property)
 			throws NullPointerException, PropertyNotFoundException, ELException {
 		if (context == null) {
 			throw new NullPointerException();
@@ -53,7 +54,8 @@ public class ResourceBundleELResolver extends ELResolver {
 		return null;
 	}
 
-	public Class<?> getType(ELContext context, Object base, Object property)
+	@Override
+    public Class<?> getType(ELContext context, Object base, Object property)
 			throws NullPointerException, PropertyNotFoundException, ELException {
 		if (context == null) {
 			throw new NullPointerException();
@@ -66,7 +68,8 @@ public class ResourceBundleELResolver extends ELResolver {
 		return null;
 	}
 
-	public void setValue(ELContext context, Object base, Object property,
+	@Override
+    public void setValue(ELContext context, Object base, Object property,
 			Object value) throws NullPointerException,
 			PropertyNotFoundException, PropertyNotWritableException,
 			ELException {
@@ -82,7 +85,8 @@ public class ResourceBundleELResolver extends ELResolver {
 		}
 	}
 
-	public boolean isReadOnly(ELContext context, Object base, Object property)
+	@Override
+    public boolean isReadOnly(ELContext context, Object base, Object property)
 			throws NullPointerException, PropertyNotFoundException, ELException {
 		if (context == null) {
 			throw new NullPointerException();
@@ -95,7 +99,8 @@ public class ResourceBundleELResolver extends ELResolver {
 		return true;
 	}
 
-	public Iterator getFeatureDescriptors(ELContext context, Object base) {
+	@Override
+    public Iterator getFeatureDescriptors(ELContext context, Object base) {
 		if (base instanceof ResourceBundle) {
 			List<FeatureDescriptor> feats = new ArrayList<FeatureDescriptor>();
 			Enumeration e = ((ResourceBundle) base).getKeys();
@@ -118,7 +123,8 @@ public class ResourceBundleELResolver extends ELResolver {
 		return null;
 	}
 
-	public Class<?> getCommonPropertyType(ELContext context, Object base) {
+	@Override
+    public Class<?> getCommonPropertyType(ELContext context, Object base) {
 		if (base instanceof ResourceBundle) {
 			return String.class;
 		}

==================================================
HttpServlet.java
index f20414ae83..ac4b5ff752 100644
--- a/java/javax/servlet/http/Cookie.java
+++ b/java/javax/servlet/http/Cookie.java
@@ -584,6 +584,7 @@ public class Cookie implements Cloneable {
      *
      */
 
+    @Override
     public Object clone() {
 	try {
 	    return super.clone();

==================================================
HttpSessionBindingEvent.java
index 96f699ee89..b363a567f4 100644
--- a/java/javax/servlet/http/HttpServlet.java
+++ b/java/javax/servlet/http/HttpServlet.java
@@ -706,6 +706,7 @@ public abstract class HttpServlet extends GenericServlet {
      * 
      * @see javax.servlet.Servlet#service
      */
+    @Override
     public void service(ServletRequest req, ServletResponse res)
         throws ServletException, IOException {
 
@@ -750,15 +751,18 @@ class NoBodyResponse extends HttpServletResponseWrapper {
 
     // SERVLET RESPONSE interface methods
 
+    @Override
     public void setContentLength(int len) {
         super.setContentLength(len);
         didSetContentLength = true;
     }
 
+    @Override
     public ServletOutputStream getOutputStream() throws IOException {
         return noBody;
     }
 
+    @Override
     public PrintWriter getWriter() throws UnsupportedEncodingException {
 
         if (writer == null) {
@@ -796,10 +800,12 @@ class NoBodyOutputStream extends ServletOutputStream {
         return contentLength;
     }
 
+    @Override
     public void write(int b) {
         contentLength++;
     }
 
+    @Override
     public void write(byte buf[], int offset, int len)
         throws IOException
     {

==================================================
JspWriter.java
index 36c2fd2dce..c796832b44 100644
--- a/java/javax/servlet/http/HttpSessionBindingEvent.java
+++ b/java/javax/servlet/http/HttpSessionBindingEvent.java
@@ -105,6 +105,7 @@ public class HttpSessionBindingEvent extends HttpSessionEvent {
     
     
    	/** Return the session that changed. */
+    @Override
     public HttpSession getSession () { 
 	return super.getSession();
     }

==================================================
ImplicitObjectELResolver.java
index b001c4e2b8..1f25043e29 100644
--- a/java/javax/servlet/jsp/JspWriter.java
+++ b/java/javax/servlet/jsp/JspWriter.java
@@ -386,6 +386,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @exception  IOException  If an I/O error occurs
      */
 
+    @Override
     abstract public void flush() throws IOException;
 
     /**
@@ -400,6 +401,7 @@ abstract public class JspWriter extends java.io.Writer {
      * @exception  IOException  If an I/O error occurs
      */
 
+    @Override
     abstract public void close() throws IOException;
 
     /**

==================================================
ScopedAttributeELResolver.java
index 0418561a03..d8b50ca70d 100644
--- a/java/javax/servlet/jsp/el/ImplicitObjectELResolver.java
+++ b/java/javax/servlet/jsp/el/ImplicitObjectELResolver.java
@@ -77,6 +77,7 @@ public class ImplicitObjectELResolver extends ELResolver {
         super();
     }
 
+    @Override
     public Object getValue(ELContext context, Object base, Object property)
             throws NullPointerException, PropertyNotFoundException, ELException {
         if (context == null) {
@@ -119,6 +120,7 @@ public class ImplicitObjectELResolver extends ELResolver {
         return null;
     }
 
+    @Override
     public Class<?> getType(ELContext context, Object base, Object property)
             throws NullPointerException, PropertyNotFoundException, ELException {
         if (context == null) {
@@ -134,6 +136,7 @@ public class ImplicitObjectELResolver extends ELResolver {
         return null;
     }
 
+    @Override
     public void setValue(ELContext context, Object base, Object property,
             Object value) throws NullPointerException,
             PropertyNotFoundException, PropertyNotWritableException,
@@ -151,6 +154,7 @@ public class ImplicitObjectELResolver extends ELResolver {
         }
     }
 
+    @Override
     public boolean isReadOnly(ELContext context, Object base, Object property)
             throws NullPointerException, PropertyNotFoundException, ELException {
         if (context == null) {
@@ -167,6 +171,7 @@ public class ImplicitObjectELResolver extends ELResolver {
         return false;
     }
 
+    @Override
     public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
         List<FeatureDescriptor> feats = new ArrayList<FeatureDescriptor>(
                 SCOPE_NAMES.length);
@@ -185,6 +190,7 @@ public class ImplicitObjectELResolver extends ELResolver {
         return feats.iterator();
     }
 
+    @Override
     public Class<String> getCommonPropertyType(ELContext context, Object base) {
         if (base == null) {
             return String.class;
@@ -233,18 +239,22 @@ public class ImplicitObjectELResolver extends ELResolver {
         public Map<String,Object> getApplicationScope() {
             if (this.applicationScope == null) {
                 this.applicationScope = new ScopeMap<Object>() {
+                    @Override
                     protected void setAttribute(String name, Object value) {
                         page.getServletContext().setAttribute(name, value);
                     }
 
+                    @Override
                     protected void removeAttribute(String name) {
                         page.getServletContext().removeAttribute(name);
                     }
 
+                    @Override
                     protected Enumeration<String> getAttributeNames() {
                         return page.getServletContext().getAttributeNames();
                     }
 
+                    @Override
                     protected Object getAttribute(String name) {
                         return page.getServletContext().getAttribute(name);
                     }
@@ -256,6 +266,7 @@ public class ImplicitObjectELResolver extends ELResolver {
         public Map<String,Cookie> getCookie() {
             if (this.cookie == null) {
                 this.cookie = new ScopeMap<Cookie>() {
+                    @Override
                     protected Enumeration<String> getAttributeNames() {
                         Cookie[] c = ((HttpServletRequest) page.getRequest())
                                 .getCookies();
@@ -269,6 +280,7 @@ public class ImplicitObjectELResolver extends ELResolver {
                         return null;
                     }
 
+                    @Override
                     protected Cookie getAttribute(String name) {
                         Cookie[] c = ((HttpServletRequest) page.getRequest())
                                 .getCookies();
@@ -290,11 +302,13 @@ public class ImplicitObjectELResolver extends ELResolver {
         public Map<String,String> getHeader() {
             if (this.header == null) {
                 this.header = new ScopeMap<String>() {
+                    @Override
                     protected Enumeration<String> getAttributeNames() {
                         return ((HttpServletRequest) page.getRequest())
                                 .getHeaderNames();
                     }
 
+                    @Override
                     protected String getAttribute(String name) {
                         return ((HttpServletRequest) page.getRequest())
                                 .getHeader(name);
@@ -307,11 +321,13 @@ public class ImplicitObjectELResolver extends ELResolver {
         public Map<String,String[]> getHeaderValues() {
             if (this.headerValues == null) {
                 this.headerValues = new ScopeMap<String[]>() {
+                    @Override
                     protected Enumeration<String> getAttributeNames() {
                         return ((HttpServletRequest) page.getRequest())
                                 .getHeaderNames();
                     }
 
+                    @Override
                     protected String[] getAttribute(String name) {
                         Enumeration<String> e =
                             ((HttpServletRequest) page.getRequest())
@@ -334,10 +350,12 @@ public class ImplicitObjectELResolver extends ELResolver {
         public Map<String,String> getInitParam() {
             if (this.initParam == null) {
                 this.initParam = new ScopeMap<String>() {
+                    @Override
                     protected Enumeration<String> getAttributeNames() {
                         return page.getServletContext().getInitParameterNames();
                     }
 
+                    @Override
                     protected String getAttribute(String name) {
                         return page.getServletContext().getInitParameter(name);
                     }
@@ -353,19 +371,23 @@ public class ImplicitObjectELResolver extends ELResolver {
         public Map<String,Object> getPageScope() {
             if (this.pageScope == null) {
                 this.pageScope = new ScopeMap<Object>() {
+                    @Override
                     protected void setAttribute(String name, Object value) {
                         page.setAttribute(name, value);
                     }
 
+                    @Override
                     protected void removeAttribute(String name) {
                         page.removeAttribute(name);
                     }
 
+                    @Override
                     protected Enumeration<String> getAttributeNames() {
                         return page.getAttributeNamesInScope(
                                 PageContext.PAGE_SCOPE);
                     }
 
+                    @Override
                     protected Object getAttribute(String name) {
                         return page.getAttribute(name);
                     }
@@ -377,10 +399,12 @@ public class ImplicitObjectELResolver extends ELResolver {
         public Map<String,String> getParam() {
             if (this.param == null) {
                 this.param = new ScopeMap<String>() {
+                    @Override
                     protected Enumeration<String> getAttributeNames() {
                         return page.getRequest().getParameterNames();
                     }
 
+                    @Override
                     protected String getAttribute(String name) {
                         return page.getRequest().getParameter(name);
                     }
@@ -392,10 +416,12 @@ public class ImplicitObjectELResolver extends ELResolver {
         public Map<String,String[]> getParamValues() {
             if (this.paramValues == null) {
                 this.paramValues = new ScopeMap<String[]>() {
+                    @Override
                     protected String[] getAttribute(String name) {
                         return page.getRequest().getParameterValues(name);
                     }
 
+                    @Override
                     protected Enumeration<String> getAttributeNames() {
                         return page.getRequest().getParameterNames();
                     }
@@ -407,18 +433,22 @@ public class ImplicitObjectELResolver extends ELResolver {
         public Map<String,Object> getRequestScope() {
             if (this.requestScope == null) {
                 this.requestScope = new ScopeMap<Object>() {
+                    @Override
                     protected void setAttribute(String name, Object value) {
                         page.getRequest().setAttribute(name, value);
                     }
 
+                    @Override
                     protected void removeAttribute(String name) {
                         page.getRequest().removeAttribute(name);
                     }
 
+                    @Override
                     protected Enumeration<String> getAttributeNames() {
                         return page.getRequest().getAttributeNames();
                     }
 
+                    @Override
                     protected Object getAttribute(String name) {
                         return page.getRequest().getAttribute(name);
                     }
@@ -430,11 +460,13 @@ public class ImplicitObjectELResolver extends ELResolver {
         public Map<String,Object> getSessionScope() {
             if (this.sessionScope == null) {
                 this.sessionScope = new ScopeMap<Object>() {
+                    @Override
                     protected void setAttribute(String name, Object value) {
                         ((HttpServletRequest) page.getRequest()).getSession()
                                 .setAttribute(name, value);
                     }
 
+                    @Override
                     protected void removeAttribute(String name) {
                         HttpSession session = page.getSession();
                         if (session != null) {
@@ -442,6 +474,7 @@ public class ImplicitObjectELResolver extends ELResolver {
                         }
                     }
 
+                    @Override
                     protected Enumeration<String> getAttributeNames() {
                         HttpSession session = page.getSession();
                         if (session != null) {
@@ -450,6 +483,7 @@ public class ImplicitObjectELResolver extends ELResolver {
                         return null;
                     }
 
+                    @Override
                     protected Object getAttribute(String name) {
                         HttpSession session = page.getSession();
                         if (session != null) {
@@ -477,6 +511,7 @@ public class ImplicitObjectELResolver extends ELResolver {
             throw new UnsupportedOperationException();
         }
 
+        @Override
         public final Set<Map.Entry<String,V>> entrySet() {
             Enumeration<String> e = getAttributeNames();
             Set<Map.Entry<String, V>> set = new HashSet<Map.Entry<String, V>>();
@@ -513,10 +548,12 @@ public class ImplicitObjectELResolver extends ELResolver {
                 return null;
             }
 
+            @Override
             public boolean equals(Object obj) {
                 return (obj != null && this.hashCode() == obj.hashCode());
             }
 
+            @Override
             public int hashCode() {
                 return this.key.hashCode();
             }
@@ -530,6 +567,7 @@ public class ImplicitObjectELResolver extends ELResolver {
             return null;
         }
 
+        @Override
         public final V put(String key, V value) {
             if (key == null) {
                 throw new NullPointerException();

==================================================
BodyContent.java
index a802f33b44..d2d38ecdcc 100644
--- a/java/javax/servlet/jsp/el/ScopedAttributeELResolver.java
+++ b/java/javax/servlet/jsp/el/ScopedAttributeELResolver.java
@@ -37,7 +37,8 @@ public class ScopedAttributeELResolver extends ELResolver {
 		super();
 	}
 
-	public Object getValue(ELContext context, Object base, Object property)
+	@Override
+    public Object getValue(ELContext context, Object base, Object property)
 			throws NullPointerException, PropertyNotFoundException, ELException {
 		if (context == null) {
 			throw new NullPointerException();
@@ -56,7 +57,8 @@ public class ScopedAttributeELResolver extends ELResolver {
 		return null;
 	}
 
-	public Class<Object> getType(ELContext context, Object base, Object property)
+	@Override
+    public Class<Object> getType(ELContext context, Object base, Object property)
 			throws NullPointerException, PropertyNotFoundException, ELException {
 		if (context == null) {
 			throw new NullPointerException();
@@ -70,7 +72,8 @@ public class ScopedAttributeELResolver extends ELResolver {
 		return null;
 	}
 
-	public void setValue(ELContext context, Object base, Object property,
+	@Override
+    public void setValue(ELContext context, Object base, Object property,
 			Object value) throws NullPointerException,
 			PropertyNotFoundException, PropertyNotWritableException,
 			ELException {
@@ -94,7 +97,8 @@ public class ScopedAttributeELResolver extends ELResolver {
 		}
 	}
 
-	public boolean isReadOnly(ELContext context, Object base, Object property)
+	@Override
+    public boolean isReadOnly(ELContext context, Object base, Object property)
 			throws NullPointerException, PropertyNotFoundException, ELException {
 		if (context == null) {
 			throw new NullPointerException();
@@ -107,7 +111,8 @@ public class ScopedAttributeELResolver extends ELResolver {
 		return false;
 	}
 
-	public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
+	@Override
+    public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {
 
 		PageContext ctxt = (PageContext) context.getContext(JspContext.class);
 		List<FeatureDescriptor> list = new ArrayList<FeatureDescriptor>();
@@ -183,7 +188,8 @@ public class ScopedAttributeELResolver extends ELResolver {
 		return list.iterator();
 	}
 
-	public Class<String> getCommonPropertyType(ELContext context, Object base) {
+	@Override
+    public Class<String> getCommonPropertyType(ELContext context, Object base) {
 		if (base == null) {
 			return String.class;
 		}

==================================================
BodyTagSupport.java
index a8375b8b40..4b55e5ad45 100644
--- a/java/javax/servlet/jsp/tagext/BodyContent.java
+++ b/java/javax/servlet/jsp/tagext/BodyContent.java
@@ -76,6 +76,7 @@ public abstract class BodyContent extends JspWriter {
      * @throws IOException always thrown
      */
 
+    @Override
     public void flush() throws IOException {
 	throw new IOException("Illegal to flush within a custom tag");
     }

==================================================
TagAttributeInfo.java
index 0797831fe4..2399b9b3ff 100644
--- a/java/javax/servlet/jsp/tagext/BodyTagSupport.java
+++ b/java/javax/servlet/jsp/tagext/BodyTagSupport.java
@@ -55,6 +55,7 @@ public class BodyTagSupport extends TagSupport implements BodyTag {
      * @see BodyTag#doStartTag
      */
  
+    @Override
     public int doStartTag() throws JspException {
         return EVAL_BODY_BUFFERED;
     }
@@ -68,6 +69,7 @@ public class BodyTagSupport extends TagSupport implements BodyTag {
      * @see Tag#doEndTag
      */
 
+    @Override
     public int doEndTag() throws JspException {
 	return super.doEndTag();
     }
@@ -114,6 +116,7 @@ public class BodyTagSupport extends TagSupport implements BodyTag {
      * @see BodyTag#doAfterBody
      */
 
+    @Override
     public int doAfterBody() throws JspException {
  	return SKIP_BODY;
     }
@@ -125,6 +128,7 @@ public class BodyTagSupport extends TagSupport implements BodyTag {
      * @see Tag#release
      */
 
+    @Override
     public void release() {
 	bodyContent = null;
 

==================================================
