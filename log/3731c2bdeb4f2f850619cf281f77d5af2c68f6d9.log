3731c2bdeb4f2f850619cf281f77d5af2c68f6d9
==================================================
Use java.beans.Expression to simplify method and constructor matching/execution. Approach suggested by Esmond Pitt.
==================================================
Mark Emlyn
==================================================
Tue Sep 17 11:33:26 2013 +0000
==================================================
BeanELResolver.java
Use java.beans.Expression to simplify method and constructor matching/execution. Approach suggested by Esmond Pitt.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1523988 13f79535-47bb-0310-9956-ffa450edef68



==================================================
StaticFieldELResolver.java
index 8a6c02f132..2add4b6b1e 100644
--- a/java/javax/el/BeanELResolver.java
+++ b/java/javax/el/BeanELResolver.java
@@ -166,16 +166,16 @@ public class BeanELResolver extends ELResolver {
 
         String methodName = (String) factory.coerceToType(method, String.class);
 
-        // Find the matching method
-        Method matchingMethod =
-                Util.findMethod(base.getClass(), methodName, paramTypes, params);
+        java.beans.Expression beanExpression =
+                new java.beans.Expression(base, methodName, params);
 
-        Object[] parameters = Util.buildParameters(
-                matchingMethod.getParameterTypes(), matchingMethod.isVarArgs(),
-                params);
-
-        Object result = null;
+        Object result;
         try {
+            result = beanExpression.getValue();
+        } catch (Exception e) {
+            throw new ELException(e);
+        }
+/*        try {
             result = matchingMethod.invoke(base, parameters);
         } catch (IllegalArgumentException | IllegalAccessException e) {
             throw new ELException(e);
@@ -184,7 +184,7 @@ public class BeanELResolver extends ELResolver {
             Util.handleThrowable(cause);
             throw new ELException(cause);
         }
-
+*/
         context.setPropertyResolved(base, method);
         return result;
     }

==================================================
Util.java
index bf761b160b..9482679a1a 100644
--- a/java/javax/el/StaticFieldELResolver.java
+++ b/java/javax/el/StaticFieldELResolver.java
@@ -17,10 +17,7 @@
 package javax.el;
 
 import java.beans.FeatureDescriptor;
-import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.Iterator;
 
@@ -92,61 +89,29 @@ public class StaticFieldELResolver extends ELResolver {
             throw new NullPointerException();
         }
 
+        Object result = null;
+
         if (base instanceof ELClass && method instanceof String) {
             context.setPropertyResolved(base, method);
 
-            Class<?> clazz = ((ELClass) base).getKlass();
             String methodName = (String) method;
-
             if ("<init>".equals(methodName)) {
-                Constructor<?> match =
-                        Util.findConstructor(clazz, paramTypes, params);
-
-                Object[] parameters = Util.buildParameters(
-                        match.getParameterTypes(), match.isVarArgs(), params);
-
-                Object result = null;
-
-                try {
-                    result = match.newInstance(parameters);
-                } catch (IllegalArgumentException | IllegalAccessException |
-                        InstantiationException e) {
-                    throw new ELException(e);
-                } catch (InvocationTargetException e) {
-                    Throwable cause = e.getCause();
-                    Util.handleThrowable(cause);
-                    throw new ELException(cause);
-                }
-                return result;
+                // java.beans.Expression uses 'new' for constructors
+                methodName = "new";
+            }
+            Class<?> clazz = ((ELClass) base).getKlass();
 
-            } else {
-                Method match =
-                        Util.findMethod(clazz, methodName, paramTypes, params);
-
-                int modifiers = match.getModifiers();
-                if (!Modifier.isStatic(modifiers)) {
-                    throw new MethodNotFoundException(Util.message(context,
-                            "staticFieldELResolver.methodNotFound", methodName,
-                            clazz.getName()));
-                }
+            java.beans.Expression beanExpression =
+                    new java.beans.Expression(clazz, methodName, params);
 
-                Object[] parameters = Util.buildParameters(
-                        match.getParameterTypes(), match.isVarArgs(), params);
-
-                Object result = null;
-                try {
-                    result = match.invoke(null, parameters);
-                } catch (IllegalArgumentException | IllegalAccessException e) {
-                    throw new ELException(e);
-                } catch (InvocationTargetException e) {
-                    Throwable cause = e.getCause();
-                    Util.handleThrowable(cause);
-                    throw new ELException(cause);
-                }
-                return result;
+            try {
+                result = beanExpression.getValue();
+            } catch (Exception e) {
+                throw new ELException(e);
             }
         }
-        return null;
+
+        return result;
     }
 
     @Override

==================================================
