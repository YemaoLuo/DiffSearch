9193995072fadb963c2681fbf204314e6b37f930
==================================================
Add new JSP init parameter "jspIdleTimeout".
==================================================
Rainer Jung
==================================================
Fri Oct 29 23:22:35 2010 +0000
==================================================
EmbeddedServletOptions.java
Add new JSP init parameter "jspIdleTimeout".

If set > 0 (default -1), a background task
will unload all JSPs being idle longer than this
time in seconds.


git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1028940 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JspC.java
index 72d41d83e3..f1fdaa9aa3 100644
--- a/java/org/apache/jasper/EmbeddedServletOptions.java
+++ b/java/org/apache/jasper/EmbeddedServletOptions.java
@@ -189,11 +189,17 @@ public final class EmbeddedServletOptions implements Options {
 
     
     /**
-     * The maxim number of loaded jsps per web-application. If there are more
+     * The maximum number of loaded jsps per web-application. If there are more
      * jsps loaded, they will be unloaded.
      */
     private int maxLoadedJsps = -1;
 
+    /**
+     * The idle time after which a JSP is unloaded.
+     * If unset or less or equal than 0, no jsps are unloaded.
+     */
+    private int jspIdleTimeout = -1;
+
     public String getProperty(String name ) {
         return settings.getProperty( name );
     }
@@ -391,13 +397,21 @@ public final class EmbeddedServletOptions implements Options {
     }
 
     /**
-     * Should any jsps be unloaded? If set to a value greater than 0 eviction of jsps
-     * is started. Default: -1
-     * */
+     * Should jsps be unloaded if to many are loaded?
+     * If set to a value greater than 0 eviction of jsps is started. Default: -1
+     */
     public int getMaxLoadedJsps() {
         return maxLoadedJsps;
     }
 
+    /**
+     * Should any jsps be unloaded when being idle for to long?
+     * If set to a value greater than 0 eviction of jsps is started. Default: -1
+     */
+    public int getJspIdleTimeout() {
+        return jspIdleTimeout;
+    }
+
     /**
      * Create an EmbeddedServletOptions object using data available from
      * ServletConfig and ServletContext. 
@@ -689,6 +703,17 @@ public final class EmbeddedServletOptions implements Options {
                 }
             }
         }
+        
+        String jspIdleTimeout = config.getInitParameter("jspIdleTimeout");
+        if (jspIdleTimeout != null) {
+            try {
+                this.jspIdleTimeout = Integer.parseInt(jspIdleTimeout);
+            } catch(NumberFormatException ex) {
+                if (log.isWarnEnabled()) {
+                    log.warn(Localizer.getMessage("jsp.warning.jspIdleTimeout", ""+this.jspIdleTimeout));
+                }
+            }
+        }
 
         // Setup the global Tag Libraries location cache for this
         // web-application.

==================================================
Options.java
index 150eb4483b..a1e03c5f3d 100644
--- a/java/org/apache/jasper/JspC.java
+++ b/java/org/apache/jasper/JspC.java
@@ -447,6 +447,10 @@ public class JspC implements Options {
         return -1;
     }
 
+    public int getJspIdleTimeout() {
+        return -1;
+    }
+
     /**
      * {@inheritDoc}
      */

==================================================
JspRuntimeContext.java
index f7372feb5e..b30d04607c 100644
--- a/java/org/apache/jasper/Options.java
+++ b/java/org/apache/jasper/Options.java
@@ -222,9 +222,15 @@ public interface Options {
     public Map<String, TagLibraryInfo> getCache();
     
     /**
-     * The maxim number of loaded jsps per web-application. If there are more
+     * The maximum number of loaded jsps per web-application. If there are more
      * jsps loaded, they will be unloaded. If unset or less than 0, no jsps
      * are unloaded.
      */
     public int getMaxLoadedJsps();
+    
+    /**
+     * The idle time after which a JSP is unloaded.
+     * If unset or less or equal than 0, no jsps are unloaded.
+     */
+    public int getJspIdleTimeout();
 }

==================================================
JspServletWrapper.java
index 11e07ec0a4..616eea5733 100644
--- a/java/org/apache/jasper/resources/LocalStrings.properties
+++ b/java/org/apache/jasper/resources/LocalStrings.properties
@@ -177,6 +177,7 @@ jsp.warning.genchararray=Warning: Invalid value for the initParam genStrAsCharAr
 jsp.warning.suppressSmap=Warning: Invalid value for the initParam suppressSmap. Will use the default value of \"false\"
 jsp.warning.displaySourceFragment=Warning: Invalid value for the initParam displaySourceFragment. Will use the default value of \"true\"
 jsp.warning.maxLoadedJsps=Warning: Invalid value for the initParam maxLoadedJsps. Will use the default value of \"-1\"
+jsp.warning.jspIdleTimeout=Warning: Invalid value for the initParam jspIdleTimeout. Will use the default value of \"-1\"
 jsp.error.badtaglib=Unable to open taglibrary {0} : {1}
 jsp.error.badGetReader=Cannot create a reader when the stream is not buffered
 jsp.warning.unknown.element.in.taglib=Unknown element ({0}) in taglib
@@ -470,4 +471,4 @@ jsp.warning.noJarScanner=Warning: No org.apache.tomcat.JarScanner set in Servlet
 jsp.error.bug48498=Unable to display JSP extract. Probably due to an XML parser bug (see Tomcat bug 48498 for details).
 
 # UniqueAttributesImpl
-jsp.error.duplicateqname=An attribute with duplicate qualified name [{0}] was found. Attribute qualified names must be unique within an element.
\ No newline at end of file
+jsp.error.duplicateqname=An attribute with duplicate qualified name [{0}] was found. Attribute qualified names must be unique within an element.

==================================================
