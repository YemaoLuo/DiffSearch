2fe82d9ff7602aa3cf79d2be8af8327b240a53c1
==================================================
Add a per context option to select the cookie parser to use and add the
==================================================
Mark Emlyn
==================================================
Tue Sep 2 13:40:53 2014 +0000
==================================================
Context.java
Add a per context option to select the cookie parser to use and add the
necessary plumbing to pass that choice to the cookie parser.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1621983 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CoyoteAdapter.java
index 005587d498..a871b997f2 100644
--- a/java/org/apache/catalina/Context.java
+++ b/java/org/apache/catalina/Context.java
@@ -17,6 +17,7 @@
 package org.apache.catalina;
 
 import java.net.URL;
+import java.nio.charset.Charset;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
@@ -1637,4 +1638,40 @@ public interface Context extends Container {
      * context.
      */
     public Object getNamingToken();
+
+    /**
+     * Should this context use the new RFC6265 based cookie parser for
+     * processing HTTP cookies? The default value is currently false but that
+     * may change in a future point release.
+     */
+    public void setUseRfc6265(boolean useRfc6265);
+
+    /**
+     * Does this context use the new RFC6265 based cookie parser for
+     * processing HTTP cookies? The default value is currently false but that
+     * may change in a future point release.
+     */
+    public boolean getUseRfc6265();
+
+    /**
+     * Specifies the name of the character encoding to use to convert bytes into
+     * characters when processing cookies using the RFC6265 based cookie parser.
+     * It has no effect if the RFC6265 parser is not used.
+     * If an unrecognised character encoding is specified, a warning will be
+     * logged and the default value of UTF-8 will be used.
+     */
+    public void setCookieEncoding(String encoding);
+
+    /**
+     * Returns the name of the character encoding used to convert bytes into
+     * characters when processing cookies using the RFC6265 based cookie parser.
+     * The default value is UTF-8.
+     */
+    public String getCookieEncoding();
+
+    /**
+     * Returns the character set used to convert bytes into characters when
+     * processing cookies using the RFC6265 based cookie parser.
+     */
+    public Charset getCookieEncodingCharset();
 }

==================================================
Request.java
index ad2f59d207..137e92bba5 100644
--- a/java/org/apache/catalina/connector/CoyoteAdapter.java
+++ b/java/org/apache/catalina/connector/CoyoteAdapter.java
@@ -900,6 +900,13 @@ public class CoyoteAdapter implements Adapter {
                 }
             }
 
+            if (request.getContext().getUseRfc6265()) {
+                req.getCookies().setUseRfc6265(true);
+            } else {
+                req.getCookies().setUseRfc6265(false);
+            }
+
+
             // Look for session ID in cookies and SSL session
             parseSessionCookiesId(req, request);
             parseSessionSslId(request);
@@ -931,6 +938,9 @@ public class CoyoteAdapter implements Adapter {
                                 // Reset mapping
                                 request.getMappingData().recycle();
                                 mapRequired = true;
+                                // Recycle cookies in case correct context is
+                                // configured with different settings
+                                req.getCookies().recycle();
                             }
                             break;
                         }

==================================================
StandardContext.java
index 63a5a9a261..11851ed376 100644
--- a/java/org/apache/catalina/core/LocalStrings.properties
+++ b/java/org/apache/catalina/core/LocalStrings.properties
@@ -148,6 +148,7 @@ standardContext.startFailed=Context [{0}] startup failed due to previous errors
 standardContext.startingContext=Exception starting Context with name [{0}]
 standardContext.stoppingContext=Exception stopping Context with name [{0}]
 standardContext.threadBindingListenerError=An error occurred in the thread binding listener configured for Context [{0}]
+standardContext.unknownCookieEncoding=The unknown encoding [{0}] was specified for setCookieEncoding(String) so the default of UTF-8 will be used instead
 standardContext.urlPattern.patternWarning=WARNING: URL pattern {0} must start with a ''/'' in Servlet 2.4
 standardContext.webappClassLoader.missingProperty=Unable to set the web application class loader property [{0}] to [{1}] as the property does not exist.
 standardContext.workPath=Exception obtaining work path for context [{0}]

==================================================
FailedContext.java
index bafd270e59..64fe28522d 100644
--- a/java/org/apache/catalina/core/mbeans-descriptors.xml
+++ b/java/org/apache/catalina/core/mbeans-descriptors.xml
@@ -103,6 +103,10 @@
                type="boolean"
                writeable="false" />
 
+    <attribute name="cookieEncoding"
+               description="If the new cookie parser is used, which encoding should be used to decode the cookie values?"
+               type="java.lang.String"/>
+
     <attribute name="cookies"
                description="Should we attempt to use cookies for session id communication?"
                type="boolean"/>
@@ -331,6 +335,11 @@
                is="true"
                type="boolean"/>
 
+    <attribute name="useNewCookieParser"
+               description="Use the new RFC6265 based cookie parser"
+               is="false"
+               type="boolean"/>
+
     <attribute name="webappVersion"
                description="The version of this web application - used in parallel deployment to differentiate different versions of the same web application"
                type="java.lang.String"

==================================================
Cookies.java
index b2227f9559..73c6bf48d3 100644
--- a/java/org/apache/catalina/startup/FailedContext.java
+++ b/java/org/apache/catalina/startup/FailedContext.java
@@ -19,6 +19,8 @@ package org.apache.catalina.startup;
 import java.beans.PropertyChangeListener;
 import java.io.File;
 import java.net.URL;
+import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
@@ -753,7 +755,20 @@ public class FailedContext extends LifecycleMBeanBase implements Context {
     }
 
     @Override
-    public Object getNamingToken() {
-        return null;
-    }
+    public Object getNamingToken() { return null; }
+
+    @Override
+    public void setUseRfc6265(boolean useRfc6265) { /* NO-OP */ }
+
+    @Override
+    public boolean getUseRfc6265() {return false; }
+
+    @Override
+    public void setCookieEncoding(String encoding) { /* NO-OP */ }
+
+    @Override
+    public String getCookieEncoding() { return "UTF-8"; }
+
+    @Override
+    public Charset getCookieEncodingCharset() { return StandardCharsets.UTF_8; }
 }
\ No newline at end of file

==================================================
TesterContext.java
index 821ee38c1a..fcc5f5bf8f 100644
--- a/java/org/apache/tomcat/util/http/Cookies.java
+++ b/java/org/apache/tomcat/util/http/Cookies.java
@@ -23,12 +23,13 @@ import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
 import org.apache.tomcat.util.buf.ByteChunk;
 import org.apache.tomcat.util.buf.MessageBytes;
+import org.apache.tomcat.util.http.parser.Cookie;
 import org.apache.tomcat.util.log.UserDataHelper;
 import org.apache.tomcat.util.res.StringManager;
 
 /**
  * A collection of cookies - reusable and tuned for server side performance.
- * Based on RFC2965 (and 2109).
+ * Based on RFC6265 and RFC2109.
  *
  * This class is not thread-safe.
  *
@@ -48,6 +49,7 @@ public final class Cookies {
     public static final int INITIAL_SIZE = 4;
     private ServerCookies scookies = new ServerCookies(INITIAL_SIZE);
     private boolean unprocessed = true;
+    private boolean useRfc6265 = false;
 
     private final MimeHeaders headers;
 
@@ -67,6 +69,7 @@ public final class Cookies {
     public void recycle() {
         scookies.recycle();
         unprocessed = true;
+        useRfc6265 = false;
     }
 
 
@@ -145,6 +148,11 @@ public final class Cookies {
     }
 
 
+    public void setUseRfc6265(boolean useRfc6265) {
+        this.useRfc6265 = useRfc6265;
+    }
+
+
     // XXX will be refactored soon!
     private static boolean equals(String s, byte b[], int start, int end) {
         int blen = end-start;
@@ -218,13 +226,22 @@ public final class Cookies {
     }
 
 
+    final void processCookieHeader(byte bytes[], int off, int len) {
+        if (useRfc6265) {
+            Cookie.parseCookie(bytes, off, len, scookies);
+        } else {
+            doProcessCookieHeaderOriginal(bytes, off, len);
+        }
+    }
+
+
     /**
      * Parses a cookie header after the initial "Cookie:"
      * [WS][$]token[WS]=[WS](token|QV)[;|,]
-     * RFC 2965
+     * RFC 2965 / RFC 2109
      * JVK
      */
-    final void processCookieHeader(byte bytes[], int off, int len){
+    private void doProcessCookieHeaderOriginal(byte bytes[], int off, int len){
         if (len <= 0 || bytes == null) {
             return;
         }

==================================================
