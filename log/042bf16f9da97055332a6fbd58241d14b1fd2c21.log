042bf16f9da97055332a6fbd58241d14b1fd2c21
==================================================
Move JVM vendor detection to a global constant.
==================================================
Mark Emlyn
==================================================
Sun Jan 19 19:22:24 2014 +0000
==================================================
Globals.java
Move JVM vendor detection to a global constant.
Fix detection of Sun/Oracle JVM that only worked for older Sun branded JVMs.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1559561 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JreMemoryLeakPreventionListener.java
index 7705cf73d0..98a36c35ab 100644
--- a/java/org/apache/catalina/Globals.java
+++ b/java/org/apache/catalina/Globals.java
@@ -16,6 +16,8 @@
  */
 package org.apache.catalina;
 
+import java.util.Locale;
+
 /**
  * Global constants that are applicable to multiple packages within Catalina.
  *
@@ -290,4 +292,31 @@ public final class Globals {
      */
     public static final String JASPER_XML_BLOCK_EXTERNAL_INIT_PARAM =
             "org.apache.jasper.XML_BLOCK_EXTERNAL";
+
+    static {
+        /**
+         * There are a few places where Tomcat either accesses JVM internals
+         * (e.g. the memory leak protection) or where feature support varies
+         * between JVMs (e.g. SPNEGO). These flags exist to enable Tomcat to
+         * adjust its behaviour based on the vendor of the JVM. In an ideal
+         * world this code would not exist.
+         */
+        String vendor = System.getProperty("java.vendor", "");
+        vendor = vendor.toLowerCase(Locale.ENGLISH);
+
+        if (vendor.startsWith("oracle") || vendor.startsWith("sun")) {
+            IS_ORACLE_JVM = true;
+            IS_IBM_JVM = false;
+        } else if (vendor.contains("ibm")) {
+            IS_ORACLE_JVM = false;
+            IS_IBM_JVM = true;
+        } else {
+            IS_ORACLE_JVM = false;
+            IS_IBM_JVM = false;
+        }
+    }
+
+    public static final boolean IS_ORACLE_JVM;
+
+    public static final boolean IS_IBM_JVM;
 }

==================================================
WebappClassLoader.java
index 70ecdca729..84d8e583da 100644
--- a/java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java
+++ b/java/org/apache/catalina/core/JreMemoryLeakPreventionListener.java
@@ -30,6 +30,7 @@ import javax.imageio.ImageIO;
 import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.parsers.ParserConfigurationException;
 
+import org.apache.catalina.Globals;
 import org.apache.catalina.Lifecycle;
 import org.apache.catalina.LifecycleEvent;
 import org.apache.catalina.LifecycleListener;
@@ -309,8 +310,7 @@ public class JreMemoryLeakPreventionListener implements LifecycleListener {
                                 new Class[] {long.class});
                         method.invoke(null, Long.valueOf(Long.MAX_VALUE - 1));
                     } catch (ClassNotFoundException e) {
-                        if (System.getProperty("java.vendor").startsWith(
-                                "Sun")) {
+                        if (Globals.IS_ORACLE_JVM) {
                             log.error(sm.getString(
                                     "jreLeakListener.gcDaemonFail"), e);
                         } else {
@@ -442,8 +442,7 @@ public class JreMemoryLeakPreventionListener implements LifecycleListener {
                     try {
                         Class.forName("com.sun.jndi.ldap.LdapPoolManager");
                     } catch (ClassNotFoundException e) {
-                        if (System.getProperty("java.vendor").startsWith(
-                                "Sun")) {
+                        if (Globals.IS_ORACLE_JVM) {
                             log.error(sm.getString(
                                     "jreLeakListener.ldapPoolManagerFail"), e);
                         } else {

==================================================
