687a838221ebedead5dd4be46d9fde20ae0ce81f
==================================================
Implement chat example
==================================================
Mark Emlyn
==================================================
Thu Mar 15 23:53:01 2012 +0000
==================================================
ChatWebSocketServlet.java
Implement chat example
Plus some minor clean-up.
Patch provided by Johno Crawford

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1301280 13f79535-47bb-0310-9956-ffa450edef68



==================================================
EchoMessage.java
new file mode 100644
index 0000000000..c87b95892f
--- /dev/null
+++ b/webapps/examples/WEB-INF/classes/websocket/chat/ChatWebSocketServlet.java
@@ -0,0 +1,100 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package websocket.chat;
+
+import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.nio.CharBuffer;
+import java.util.Set;
+import java.util.concurrent.CopyOnWriteArraySet;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import org.apache.catalina.websocket.MessageInbound;
+import org.apache.catalina.websocket.StreamInbound;
+import org.apache.catalina.websocket.WebSocketServlet;
+import org.apache.catalina.websocket.WsOutbound;
+
+import util.HTMLFilter;
+
+/**
+ * Example web socket servlet for chat.
+ */
+public class ChatWebSocketServlet extends WebSocketServlet {
+
+    private static final long serialVersionUID = 1L;
+
+    private static final String GUEST_PREFIX = "Guest";
+
+    private final AtomicInteger connectionIds = new AtomicInteger(0);
+    private final Set<ChatMessageInbound> connections =
+            new CopyOnWriteArraySet<ChatMessageInbound>();
+
+    @Override
+    protected StreamInbound createWebSocketInbound(String subProtocol) {
+        return new ChatMessageInbound(connectionIds.incrementAndGet());
+    }
+
+    private final class ChatMessageInbound extends MessageInbound {
+
+        private final String nickname;
+
+        private ChatMessageInbound(int id) {
+            this.nickname = GUEST_PREFIX + id;
+        }
+
+        @Override
+        protected void onOpen(WsOutbound outbound) {
+            connections.add(this);
+            String message = String.format("* %s %s",
+                    nickname, "has joined.");
+            broadcast(message);
+        }
+
+        @Override
+        protected void onClose(int status) {
+            connections.remove(this);
+            String message = String.format("* %s %s",
+                    nickname, "has disconnected.");
+            broadcast(message);
+        }
+
+        @Override
+        protected void onBinaryMessage(ByteBuffer message) throws IOException {
+            throw new UnsupportedOperationException(
+                    "Binary message not supported.");
+        }
+
+        @Override
+        protected void onTextMessage(CharBuffer message) throws IOException {
+            // Never trust the client
+            String filteredMessage = String.format("%s: %s",
+                    nickname, HTMLFilter.filter(message.toString()));
+            broadcast(filteredMessage);
+        }
+
+        private void broadcast(String message) {
+            for (ChatMessageInbound connection : connections) {
+                try {
+                    CharBuffer buffer = CharBuffer.wrap(message);
+                    connection.getWsOutbound().writeTextMessage(buffer);
+                } catch (IOException ignore) {
+                    // Ignore
+                }
+            }
+        }
+    }
+}
\ No newline at end of file

==================================================
EchoStream.java
similarity index 99%
rename from webapps/examples/WEB-INF/classes/websocket/EchoMessage.java
rename to webapps/examples/WEB-INF/classes/websocket/echo/EchoMessage.java
index 86cfc301f2..2fa9068642 100644
--- a/webapps/examples/WEB-INF/classes/websocket/EchoMessage.java
+++ b/webapps/examples/WEB-INF/classes/websocket/echo/EchoMessage.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package websocket;
+package websocket.echo;
 
 import java.io.IOException;
 import java.nio.ByteBuffer;

==================================================
Snake.java
similarity index 98%
rename from webapps/examples/WEB-INF/classes/websocket/EchoStream.java
rename to webapps/examples/WEB-INF/classes/websocket/echo/EchoStream.java
index c03e8d7d4f..d6e7a57ef2 100644
--- a/webapps/examples/WEB-INF/classes/websocket/EchoStream.java
+++ b/webapps/examples/WEB-INF/classes/websocket/echo/EchoStream.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package websocket;
+package websocket.echo;
 
 import java.io.IOException;
 import java.io.InputStream;

==================================================
SnakeWebSocketServlet.java
index 3f54ced7ce..e9f3b9791b 100644
--- a/webapps/examples/WEB-INF/classes/websocket/snake/Snake.java
+++ b/webapps/examples/WEB-INF/classes/websocket/snake/Snake.java
@@ -93,8 +93,14 @@ public class Snake {
             head = nextLocation;
         }
 
+        handleCollisions(snakes);
+    }
+
+    private void handleCollisions(Collection<Snake> snakes) {
         for (Snake snake : snakes) {
-            if (snake.getTail().contains(head)) {
+            boolean headCollision = id != snake.id && snake.getHead().equals(head);
+            boolean tailCollision = snake.getTail().contains(head);
+            if (headCollision || tailCollision) {
                 kill();
                 if (id != snake.id) {
                     snake.reward();
@@ -103,6 +109,10 @@ public class Snake {
         }
     }
 
+    public synchronized Location getHead() {
+        return head;
+    }
+
     public synchronized Collection<Location> getTail() {
         return tail;
     }

==================================================
