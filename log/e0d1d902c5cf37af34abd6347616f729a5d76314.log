e0d1d902c5cf37af34abd6347616f729a5d76314
==================================================
EL 3.0 collections operations.
==================================================
Mark Emlyn
==================================================
Tue Jul 16 13:45:47 2013 +0000
==================================================
Stream.java
EL 3.0 collections operations.
Implement average, sum and count.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1503715 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestCollectionOperations.java
index 820753f20a..129fa5c3d4 100644
--- a/java/org/apache/el/stream/Stream.java
+++ b/java/org/apache/el/stream/Stream.java
@@ -28,6 +28,7 @@ import java.util.Set;
 import javax.el.ELException;
 import javax.el.LambdaExpression;
 
+import org.apache.el.lang.ELArithmetic;
 import org.apache.el.lang.ELSupport;
 
 public class Stream {
@@ -308,6 +309,46 @@ public class Stream {
     }
 
 
+    public Optional average() {
+        long count = 0;
+        Number sum = Long.valueOf(0);
+
+        while (iterator.hasNext()) {
+            count++;
+            sum = ELArithmetic.add(sum, iterator.next());
+        }
+
+        if (count == 0) {
+            return Optional.EMPTY;
+        } else {
+            return new Optional(ELArithmetic.divide(sum, Long.valueOf(count)));
+        }
+    }
+
+
+    public Number sum() {
+        Number sum = Long.valueOf(0);
+
+        while (iterator.hasNext()) {
+            sum = ELArithmetic.add(sum, iterator.next());
+        }
+
+        return sum;
+    }
+
+
+    public Long count() {
+        long count = 0;
+
+        while (iterator.hasNext()) {
+            iterator.next();
+            count ++;
+        }
+
+        return Long.valueOf(count);
+    }
+
+
     @SuppressWarnings({ "rawtypes", "unchecked" })
     private Optional compare(boolean isMax) {
         Comparable result = null;

==================================================
