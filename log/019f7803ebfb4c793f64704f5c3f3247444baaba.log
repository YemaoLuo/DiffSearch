019f7803ebfb4c793f64704f5c3f3247444baaba
==================================================
Generics for o.a.c.users and o.a.c.util
==================================================
Mark Emlyn
==================================================
Tue Dec 2 21:34:37 2008 +0000
==================================================
AbstractGroup.java
Generics for o.a.c.users and o.a.c.util

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@722621 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractUser.java
index e41c3a7fd6..a45a55b5c0 100644
--- a/java/org/apache/catalina/users/AbstractGroup.java
+++ b/java/org/apache/catalina/users/AbstractGroup.java
@@ -23,6 +23,7 @@ import java.util.Iterator;
 
 import org.apache.catalina.Group;
 import org.apache.catalina.Role;
+import org.apache.catalina.User;
 import org.apache.catalina.UserDatabase;
 
 
@@ -104,7 +105,7 @@ public abstract class AbstractGroup implements Group {
     /**
      * Return the set of {@link Role}s assigned specifically to this group.
      */
-    public abstract Iterator getRoles();
+    public abstract Iterator<Role> getRoles();
 
 
     /**
@@ -117,7 +118,7 @@ public abstract class AbstractGroup implements Group {
      * Return an Iterator over the set of {@link org.apache.catalina.User}s that 
      * are members of this group.
      */
-    public abstract Iterator getUsers();
+    public abstract Iterator<User> getUsers();
 
 
     // --------------------------------------------------------- Public Methods

==================================================
MemoryGroup.java
index 46c4d09fe3..de19f3622d 100644
--- a/java/org/apache/catalina/users/AbstractUser.java
+++ b/java/org/apache/catalina/users/AbstractUser.java
@@ -85,7 +85,7 @@ public abstract class AbstractUser implements User {
     /**
      * Return the set of {@link Group}s to which this user belongs.
      */
-    public abstract Iterator getGroups();
+    public abstract Iterator<Group> getGroups();
 
 
     /**
@@ -117,7 +117,7 @@ public abstract class AbstractUser implements User {
     /**
      * Return the set of {@link Role}s assigned specifically to this user.
      */
-    public abstract Iterator getRoles();
+    public abstract Iterator<Role> getRoles();
 
 
     /**

==================================================
MemoryUser.java
index 94d7c463a7..17010b8a9f 100644
--- a/java/org/apache/catalina/users/MemoryGroup.java
+++ b/java/org/apache/catalina/users/MemoryGroup.java
@@ -23,6 +23,7 @@ import java.util.ArrayList;
 import java.util.Iterator;
 
 import org.apache.catalina.Role;
+import org.apache.catalina.User;
 import org.apache.catalina.UserDatabase;
 
 
@@ -72,7 +73,7 @@ public class MemoryGroup extends AbstractGroup {
     /**
      * The set of {@link Role}s associated with this group.
      */
-    protected ArrayList roles = new ArrayList();
+    protected ArrayList<Role> roles = new ArrayList<Role>();
 
 
     // ------------------------------------------------------------- Properties
@@ -81,7 +82,7 @@ public class MemoryGroup extends AbstractGroup {
     /**
      * Return the set of {@link Role}s assigned specifically to this group.
      */
-    public Iterator getRoles() {
+    public Iterator<Role> getRoles() {
 
         synchronized (roles) {
             return (roles.iterator());
@@ -103,12 +104,12 @@ public class MemoryGroup extends AbstractGroup {
     /**
      * Return the set of {@link org.apache.catalina.User}s that are members of this group.
      */
-    public Iterator getUsers() {
+    public Iterator<User> getUsers() {
 
-        ArrayList results = new ArrayList();
-        Iterator users = database.getUsers();
+        ArrayList<User> results = new ArrayList<User>();
+        Iterator<User> users = database.getUsers();
         while (users.hasNext()) {
-            MemoryUser user = (MemoryUser) users.next();
+            User user = users.next();
             if (user.isInGroup(this)) {
                 results.add(user);
             }
@@ -194,13 +195,13 @@ public class MemoryGroup extends AbstractGroup {
             if (roles.size() > 0) {
                 sb.append(" roles=\"");
                 int n = 0;
-                Iterator values = roles.iterator();
+                Iterator<Role> values = roles.iterator();
                 while (values.hasNext()) {
                     if (n > 0) {
                         sb.append(',');
                     }
                     n++;
-                    sb.append((String) ((Role) values.next()).getRolename());
+                    sb.append((values.next()).getRolename());
                 }
                 sb.append("\"");
             }

==================================================
MemoryUserDatabase.java
index 02703509a7..1908e47095 100644
--- a/java/org/apache/catalina/users/MemoryUser.java
+++ b/java/org/apache/catalina/users/MemoryUser.java
@@ -75,13 +75,13 @@ public class MemoryUser extends AbstractUser {
     /**
      * The set of {@link Group}s that this user is a member of.
      */
-    protected ArrayList groups = new ArrayList();
+    protected ArrayList<Group> groups = new ArrayList<Group>();
 
 
     /**
      * The set of {@link Role}s associated with this user.
      */
-    protected ArrayList roles = new ArrayList();
+    protected ArrayList<Role> roles = new ArrayList<Role>();
 
 
     // ------------------------------------------------------------- Properties
@@ -90,7 +90,7 @@ public class MemoryUser extends AbstractUser {
     /**
      * Return the set of {@link Group}s to which this user belongs.
      */
-    public Iterator getGroups() {
+    public Iterator<Group> getGroups() {
 
         synchronized (groups) {
             return (groups.iterator());
@@ -102,7 +102,7 @@ public class MemoryUser extends AbstractUser {
     /**
      * Return the set of {@link Role}s assigned specifically to this user.
      */
-    public Iterator getRoles() {
+    public Iterator<Role> getRoles() {
 
         synchronized (roles) {
             return (roles.iterator());
@@ -262,13 +262,13 @@ public class MemoryUser extends AbstractUser {
             if (groups.size() > 0) {
                 sb.append(" groups=\"");
                 int n = 0;
-                Iterator values = groups.iterator();
+                Iterator<Group> values = groups.iterator();
                 while (values.hasNext()) {
                     if (n > 0) {
                         sb.append(',');
                     }
                     n++;
-                    sb.append(RequestUtil.filter(((Group) values.next()).getGroupname()));
+                    sb.append(RequestUtil.filter(values.next().getGroupname()));
                 }
                 sb.append("\"");
             }
@@ -277,13 +277,13 @@ public class MemoryUser extends AbstractUser {
             if (roles.size() > 0) {
                 sb.append(" roles=\"");
                 int n = 0;
-                Iterator values = roles.iterator();
+                Iterator<Role> values = roles.iterator();
                 while (values.hasNext()) {
                     if (n > 0) {
                         sb.append(',');
                     }
                     n++;
-                    sb.append(RequestUtil.filter(((Role) values.next()).getRolename()));
+                    sb.append(RequestUtil.filter(values.next().getRolename()));
                 }
                 sb.append("\"");
             }

==================================================
MemoryUserDatabaseFactory.java
index 6533d18e61..8f441cd921 100644
--- a/java/org/apache/catalina/users/MemoryUserDatabase.java
+++ b/java/org/apache/catalina/users/MemoryUserDatabase.java
@@ -87,7 +87,7 @@ public class MemoryUserDatabase implements UserDatabase {
      * The set of {@link Group}s defined in this database, keyed by
      * group name.
      */
-    protected HashMap groups = new HashMap();
+    protected HashMap<String,Group> groups = new HashMap<String,Group>();
 
 
     /**
@@ -126,7 +126,7 @@ public class MemoryUserDatabase implements UserDatabase {
      * The set of {@link Role}s defined in this database, keyed by
      * role name.
      */
-    protected HashMap roles = new HashMap();
+    protected HashMap<String,Role> roles = new HashMap<String,Role>();
 
 
     /**
@@ -140,7 +140,7 @@ public class MemoryUserDatabase implements UserDatabase {
      * The set of {@link User}s defined in this database, keyed by
      * user name.
      */
-    protected HashMap users = new HashMap();
+    protected HashMap<String,User> users = new HashMap<String,User>();
 
 
     // ------------------------------------------------------------- Properties
@@ -149,7 +149,7 @@ public class MemoryUserDatabase implements UserDatabase {
     /**
      * Return the set of {@link Group}s defined in this user database.
      */
-    public Iterator getGroups() {
+    public Iterator<Group> getGroups() {
 
         synchronized (groups) {
             return (groups.values().iterator());
@@ -217,7 +217,7 @@ public class MemoryUserDatabase implements UserDatabase {
     /**
      * Return the set of {@link Role}s defined in this user database.
      */
-    public Iterator getRoles() {
+    public Iterator<Role> getRoles() {
 
         synchronized (roles) {
             return (roles.values().iterator());
@@ -229,7 +229,7 @@ public class MemoryUserDatabase implements UserDatabase {
     /**
      * Return the set of {@link User}s defined in this user database.
      */
-    public Iterator getUsers() {
+    public Iterator<User> getUsers() {
 
         synchronized (users) {
             return (users.values().iterator());
@@ -323,7 +323,7 @@ public class MemoryUserDatabase implements UserDatabase {
     public Group findGroup(String groupname) {
 
         synchronized (groups) {
-            return ((Group) groups.get(groupname));
+            return groups.get(groupname);
         }
 
     }
@@ -338,7 +338,7 @@ public class MemoryUserDatabase implements UserDatabase {
     public Role findRole(String rolename) {
 
         synchronized (roles) {
-            return ((Role) roles.get(rolename));
+            return roles.get(rolename);
         }
 
     }
@@ -353,7 +353,7 @@ public class MemoryUserDatabase implements UserDatabase {
     public User findUser(String username) {
 
         synchronized (users) {
-            return ((User) users.get(username));
+            return users.get(username);
         }
 
     }
@@ -405,7 +405,7 @@ public class MemoryUserDatabase implements UserDatabase {
                     try {
                         fis.close();
                     } catch (Throwable t) {
-                        ;
+                        // Ignore
                     }
                     throw e;
                 }
@@ -424,9 +424,9 @@ public class MemoryUserDatabase implements UserDatabase {
     public void removeGroup(Group group) {
 
         synchronized (groups) {
-            Iterator users = getUsers();
+            Iterator<User> users = getUsers();
             while (users.hasNext()) {
-                User user = (User) users.next();
+                User user = users.next();
                 user.removeGroup(group);
             }
             groups.remove(group.getGroupname());
@@ -443,14 +443,14 @@ public class MemoryUserDatabase implements UserDatabase {
     public void removeRole(Role role) {
 
         synchronized (roles) {
-            Iterator groups = getGroups();
+            Iterator<Group> groups = getGroups();
             while (groups.hasNext()) {
-                Group group = (Group) groups.next();
+                Group group = groups.next();
                 group.removeRole(role);
             }
-            Iterator users = getUsers();
+            Iterator<User> users = getUsers();
             while (users.hasNext()) {
-                User user = (User) users.next();
+                User user = users.next();
                 user.removeRole(role);
             }
             roles.remove(role.getRolename());
@@ -527,7 +527,7 @@ public class MemoryUserDatabase implements UserDatabase {
             writer.println("<tomcat-users>");
 
             // Print entries for each defined role, group, and user
-            Iterator values = null;
+            Iterator<?> values = null;
             values = getRoles();
             while (values.hasNext()) {
                 writer.print("  ");

==================================================
Enumerator.java
index 00f6733efc..10145fd059 100644
--- a/java/org/apache/catalina/users/MemoryUserDatabaseFactory.java
+++ b/java/org/apache/catalina/users/MemoryUserDatabaseFactory.java
@@ -71,7 +71,7 @@ public class MemoryUserDatabaseFactory implements ObjectFactory {
      *  creating this object
      */
     public Object getObjectInstance(Object obj, Name name, Context nameCtx,
-                                    Hashtable environment)
+                                    Hashtable<?,?> environment)
         throws Exception {
 
         // We only know how to deal with <code>javax.naming.Reference</code>s

==================================================
ParameterMap.java
index d04b4f1667..c379bf37b9 100644
--- a/java/org/apache/catalina/util/Enumerator.java
+++ b/java/org/apache/catalina/util/Enumerator.java
@@ -38,7 +38,7 @@ import java.util.NoSuchElementException;
  * @version $Revision$ $Date$
  */
 
-public final class Enumerator implements Enumeration {
+public final class Enumerator<T> implements Enumeration<T> {
 
 
     // ----------------------------------------------------------- Constructors
@@ -49,7 +49,7 @@ public final class Enumerator implements Enumeration {
      *
      * @param collection Collection whose values should be enumerated
      */
-    public Enumerator(Collection collection) {
+    public Enumerator(Collection<T> collection) {
 
         this(collection.iterator());
 
@@ -62,7 +62,7 @@ public final class Enumerator implements Enumeration {
      * @param collection Collection whose values should be enumerated
      * @param clone true to clone iterator
      */
-    public Enumerator(Collection collection, boolean clone) {
+    public Enumerator(Collection<T> collection, boolean clone) {
 
         this(collection.iterator(), clone);
 
@@ -75,7 +75,7 @@ public final class Enumerator implements Enumeration {
      *
      * @param iterator Iterator to be wrapped
      */
-    public Enumerator(Iterator iterator) {
+    public Enumerator(Iterator<T> iterator) {
 
         super();
         this.iterator = iterator;
@@ -90,13 +90,13 @@ public final class Enumerator implements Enumeration {
      * @param iterator Iterator to be wrapped
      * @param clone true to clone iterator
      */
-    public Enumerator(Iterator iterator, boolean clone) {
+    public Enumerator(Iterator<T> iterator, boolean clone) {
 
         super();
         if (!clone) {
             this.iterator = iterator;
         } else {
-            List list = new ArrayList();
+            List<T> list = new ArrayList<T>();
             while (iterator.hasNext()) {
                 list.add(iterator.next());
             }
@@ -111,7 +111,7 @@ public final class Enumerator implements Enumeration {
      *
      * @param map Map whose values should be enumerated
      */
-    public Enumerator(Map map) {
+    public Enumerator(Map<?,T> map) {
 
         this(map.values().iterator());
 
@@ -124,7 +124,7 @@ public final class Enumerator implements Enumeration {
      * @param map Map whose values should be enumerated
      * @param clone true to clone iterator
      */
-    public Enumerator(Map map, boolean clone) {
+    public Enumerator(Map<?,T> map, boolean clone) {
 
         this(map.values().iterator(), clone);
 
@@ -138,7 +138,7 @@ public final class Enumerator implements Enumeration {
      * The <code>Iterator</code> over which the <code>Enumeration</code>
      * represented by this class actually operates.
      */
-    private Iterator iterator = null;
+    private Iterator<T> iterator = null;
 
 
     // --------------------------------------------------------- Public Methods
@@ -166,7 +166,7 @@ public final class Enumerator implements Enumeration {
      *
      * @exception NoSuchElementException if no more elements exist
      */
-    public Object nextElement() throws NoSuchElementException {
+    public T nextElement() throws NoSuchElementException {
 
         return (iterator.next());
 

==================================================
RequestUtil.java
index c56243c771..ced1e8224b 100644
--- a/java/org/apache/catalina/util/ParameterMap.java
+++ b/java/org/apache/catalina/util/ParameterMap.java
@@ -34,7 +34,7 @@ import java.util.Map;
  * @version $Revision$ $Date$
  */
 
-public final class ParameterMap extends HashMap {
+public final class ParameterMap<K,V> extends HashMap<K,V> {
 
 
     // ----------------------------------------------------------- Constructors
@@ -83,7 +83,7 @@ public final class ParameterMap extends HashMap {
      *
      * @param map Map whose contents are dupliated in the new map
      */
-    public ParameterMap(Map map) {
+    public ParameterMap(Map<K,V> map) {
 
         super(map);
 
@@ -160,7 +160,7 @@ public final class ParameterMap extends HashMap {
      *
      * @exception IllegalStateException if this map is currently locked
      */
-    public Object put(Object key, Object value) {
+    public V put(K key, V value) {
 
         if (locked)
             throw new IllegalStateException
@@ -179,7 +179,7 @@ public final class ParameterMap extends HashMap {
      *
      * @exception IllegalStateException if this map is currently locked
      */
-    public void putAll(Map map) {
+    public void putAll(Map<? extends K,? extends V> map) {
 
         if (locked)
             throw new IllegalStateException
@@ -199,7 +199,7 @@ public final class ParameterMap extends HashMap {
      *
      * @exception IllegalStateException if this map is currently locked
      */
-    public Object remove(Object key) {
+    public V remove(Object key) {
 
         if (locked)
             throw new IllegalStateException

==================================================
ResourceSet.java
index bce1df2419..d5d9364e93 100644
--- a/java/org/apache/catalina/util/RequestUtil.java
+++ b/java/org/apache/catalina/util/RequestUtil.java
@@ -159,8 +159,8 @@ public final class RequestUtil {
      *
      * @exception IllegalArgumentException if the data is malformed
      */
-    public static void parseParameters(Map map, String data, String encoding)
-        throws UnsupportedEncodingException {
+    public static void parseParameters(Map<String,String[]> map, String data,
+            String encoding) throws UnsupportedEncodingException {
 
         if ((data != null) && (data.length() > 0)) {
 
@@ -328,9 +328,10 @@ public final class RequestUtil {
      * @param name The parameter name
      * @param value The parameter value
      */
-    private static void putMapEntry( Map map, String name, String value) {
+    private static void putMapEntry( Map<String,String[]> map, String name,
+            String value) {
         String[] newValues = null;
-        String[] oldValues = (String[]) map.get(name);
+        String[] oldValues = map.get(name);
         if (oldValues == null) {
             newValues = new String[1];
             newValues[0] = value;
@@ -362,8 +363,8 @@ public final class RequestUtil {
      *
      * @exception UnsupportedEncodingException if the data is malformed
      */
-    public static void parseParameters(Map map, byte[] data, String encoding)
-        throws UnsupportedEncodingException {
+    public static void parseParameters(Map<String,String[]> map, byte[] data,
+            String encoding) throws UnsupportedEncodingException {
 
         if (data != null && data.length > 0) {
             int    ix = 0;

==================================================
