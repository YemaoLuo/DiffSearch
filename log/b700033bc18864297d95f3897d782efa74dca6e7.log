b700033bc18864297d95f3897d782efa74dca6e7
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56797
==================================================
Mark Emlyn
==================================================
Tue Aug 5 11:20:52 2014 +0000
==================================================
Util.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56797
When matching a method in an EL expression, do not treat bridge methods as duplicates of the method they bridge to. In this case always call the target of the bridge method.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1615911 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ReflectionUtil.java
index dfd8fc705e..256f331f18 100644
--- a/java/javax/el/Util.java
+++ b/java/javax/el/Util.java
@@ -310,12 +310,13 @@ class Util {
                 return w;
             }
 
-            candidates.put(w, new MatchResult(exactMatch, assignableMatch, coercibleMatch));
+            candidates.put(w, new MatchResult(
+                    exactMatch, assignableMatch, coercibleMatch, w.isBridge()));
         }
 
         // Look for the method that has the highest number of parameters where
         // the type matches exactly
-        MatchResult bestMatch = new MatchResult(0, 0, 0);
+        MatchResult bestMatch = new MatchResult(0, 0, 0, false);
         Wrapper match = null;
         boolean multiple = false;
         for (Map.Entry<Wrapper, MatchResult> entry : candidates.entrySet()) {
@@ -662,6 +663,7 @@ class Util {
         public abstract Object unWrap();
         public abstract Class<?>[] getParameterTypes();
         public abstract boolean isVarArgs();
+        public abstract boolean isBridge();
     }
 
 
@@ -686,6 +688,11 @@ class Util {
         public boolean isVarArgs() {
             return m.isVarArgs();
         }
+
+        @Override
+        public boolean isBridge() {
+            return m.isBridge();
+        }
     }
 
     private static class ConstructorWrapper extends Wrapper {
@@ -709,6 +716,11 @@ class Util {
         public boolean isVarArgs() {
             return c.isVarArgs();
         }
+
+        @Override
+        public boolean isBridge() {
+            return false;
+        }
     }
 
     /*
@@ -720,11 +732,13 @@ class Util {
         private final int exact;
         private final int assignable;
         private final int coercible;
+        private final boolean bridge;
 
-        public MatchResult(int exact, int assignable, int coercible) {
+        public MatchResult(int exact, int assignable, int coercible, boolean bridge) {
             this.exact = exact;
             this.assignable = assignable;
             this.coercible = coercible;
+            this.bridge = bridge;
         }
 
         public int getExact() {
@@ -739,6 +753,10 @@ class Util {
             return coercible;
         }
 
+        public boolean isBridge() {
+            return bridge;
+        }
+
         @Override
         public int compareTo(MatchResult o) {
             int cmp = Integer.compare(this.getExact(), o.getExact());
@@ -746,6 +764,13 @@ class Util {
                 cmp = Integer.compare(this.getAssignable(), o.getAssignable());
                 if (cmp == 0) {
                     cmp = Integer.compare(this.getCoercible(), o.getCoercible());
+                    if (cmp == 0) {
+                        // The nature of bridge methods is such that it actually
+                        // doesn't matter which one we pick as long as we pick
+                        // one. That said, pick the 'right' one (the non-bridge
+                        // one) anyway.
+                        cmp = Boolean.compare(o.isBridge(), this.isBridge());
+                    }
                 }
             }
             return cmp;

==================================================
TestMethodExpressionImpl.java
index 22036957ea..6c9e107055 100644
--- a/java/org/apache/el/util/ReflectionUtil.java
+++ b/java/org/apache/el/util/ReflectionUtil.java
@@ -218,12 +218,13 @@ public class ReflectionUtil {
                 return getMethod(base.getClass(), m);
             }
 
-            candidates.put(m, new MatchResult(exactMatch, assignableMatch, coercibleMatch));
+            candidates.put(m, new MatchResult(
+                    exactMatch, assignableMatch, coercibleMatch, m.isBridge()));
         }
 
         // Look for the method that has the highest number of parameters where
         // the type matches exactly
-        MatchResult bestMatch = new MatchResult(0, 0, 0);
+        MatchResult bestMatch = new MatchResult(0, 0, 0, false);
         Method match = null;
         boolean multiple = false;
         for (Map.Entry<Method, MatchResult> entry : candidates.entrySet()) {
@@ -450,11 +451,13 @@ public class ReflectionUtil {
         private final int exact;
         private final int assignable;
         private final int coercible;
+        private final boolean bridge;
 
-        public MatchResult(int exact, int assignable, int coercible) {
+        public MatchResult(int exact, int assignable, int coercible, boolean bridge) {
             this.exact = exact;
             this.assignable = assignable;
             this.coercible = coercible;
+            this.bridge = bridge;
         }
 
         public int getExact() {
@@ -469,6 +472,10 @@ public class ReflectionUtil {
             return coercible;
         }
 
+        public boolean isBridge() {
+            return bridge;
+        }
+
         @Override
         public int compareTo(MatchResult o) {
             int cmp = Integer.compare(this.getExact(), o.getExact());
@@ -476,6 +483,13 @@ public class ReflectionUtil {
                 cmp = Integer.compare(this.getAssignable(), o.getAssignable());
                 if (cmp == 0) {
                     cmp = Integer.compare(this.getCoercible(), o.getCoercible());
+                    if (cmp == 0) {
+                        // The nature of bridge methods is such that it actually
+                        // doesn't matter which one we pick as long as we pick
+                        // one. That said, pick the 'right' one (the non-bridge
+                        // one) anyway.
+                        cmp = Boolean.compare(o.isBridge(), this.isBridge());
+                    }
                 }
             }
             return cmp;

==================================================
TesterBeanA.java
index e4bf70a8f7..29cfddeeb9 100644
--- a/test/org/apache/el/TestMethodExpressionImpl.java
+++ b/test/org/apache/el/TestMethodExpressionImpl.java
@@ -464,4 +464,22 @@ public class TestMethodExpressionImpl {
         Integer result = (Integer) me.invoke(context, null);
         assertEquals(beanB.sayHello().length(), result.intValue());
     }
+
+
+    @Test
+    public void testBug56797a() {
+        MethodExpression me = factory.createMethodExpression(context,
+                "${beanAA.echo1('Hello World!')}", null , null);
+        Object r = me.invoke(context, null);
+        assertEquals("AA1Hello World!", r.toString());
+    }
+
+
+    @Test
+    public void testBug56797b() {
+        MethodExpression me = factory.createMethodExpression(context,
+                "${beanAA.echo2('Hello World!')}", null , null);
+        Object r = me.invoke(context, null);
+        assertEquals("AA2Hello World!", r.toString());
+    }
 }

==================================================
TesterBeanAA.java
index 9b636a4335..7fd2cd2d57 100644
--- a/test/org/apache/el/TesterBeanA.java
+++ b/test/org/apache/el/TesterBeanA.java
@@ -56,4 +56,12 @@ public class TesterBeanA {
     public void setValList(List<?> valList) {
         this.valList = valList;
     }
+
+    public CharSequence echo1(CharSequence cs) {
+        return "A1" + cs;
+    }
+
+    public CharSequence echo2(String s) {
+        return "A2" + s;
+    }
 }

==================================================
