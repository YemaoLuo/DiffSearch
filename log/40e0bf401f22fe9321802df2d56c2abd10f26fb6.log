40e0bf401f22fe9321802df2d56c2abd10f26fb6
==================================================
Fix my IDE and use spaces. - No functional change
==================================================
Peter Rossbach
==================================================
Thu Apr 29 06:37:20 2010 +0000
==================================================
ContextConfig.java
Fix my IDE and use spaces. - No functional change

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@939212 13f79535-47bb-0310-9956-ffa450edef68



==================================================
DuplicateMappingParamServlet.java
index 6d69385285..b2b4cf76e5 100644
--- a/java/org/apache/catalina/startup/ContextConfig.java
+++ b/java/org/apache/catalina/startup/ContextConfig.java
@@ -1900,13 +1900,13 @@ public class ContextConfig
                 break;
             }
         }
-        if(servletName == null) {
-        	// classname is default servletName as annotation has no name!
+        if (servletName == null) {
+            // classname is default servletName as annotation has no name!
             servletName = className;
         }
         ServletDef servletDef = fragment.getServlets().get(servletName);
         boolean isWebXMLservletDef = servletDef != null;
-        if(!isWebXMLservletDef) {
+        if (!isWebXMLservletDef) {
             servletDef = new ServletDef();
             servletDef.setServletName(servletName);
             servletDef.setServletClass(className);
@@ -1914,7 +1914,7 @@ public class ContextConfig
         boolean urlPatternsSet = false;
         String[] urlPatterns = null;
 
-        //ElementValuePair[] evps = ae.getElementValuePairs();
+        // ElementValuePair[] evps = ae.getElementValuePairs();
         for (ElementValuePair evp : evps) {
             String name = evp.getNameString();
             if ("value".equals(name) || "urlPatterns".equals(name)) {
@@ -1925,62 +1925,65 @@ public class ContextConfig
                 urlPatternsSet = true;
                 urlPatterns = processAnnotationsStringArray(evp.getValue());
             } else if ("description".equals(name)) {
-            	if(servletDef.getDescription() == null) {
-            		servletDef.setDescription(evp.getValue().stringifyValue());
-            	}
+                if (servletDef.getDescription() == null) {
+                    servletDef.setDescription(evp.getValue().stringifyValue());
+                }
             } else if ("displayName".equals(name)) {
-            	if(servletDef.getDisplayName() == null) {
-            		servletDef.setDisplayName(evp.getValue().stringifyValue());
-            	}
+                if (servletDef.getDisplayName() == null) {
+                    servletDef.setDisplayName(evp.getValue().stringifyValue());
+                }
             } else if ("largeIcon".equals(name)) {
-            	if(servletDef.getLargeIcon() == null) {
-            		servletDef.setLargeIcon(evp.getValue().stringifyValue());
-            	}
+                if (servletDef.getLargeIcon() == null) {
+                    servletDef.setLargeIcon(evp.getValue().stringifyValue());
+                }
             } else if ("smallIcon".equals(name)) {
-            	if(servletDef.getSmallIcon() == null) {
-            		servletDef.setSmallIcon(evp.getValue().stringifyValue());
-            	}
+                if (servletDef.getSmallIcon() == null) {
+                    servletDef.setSmallIcon(evp.getValue().stringifyValue());
+                }
             } else if ("asyncSupported".equals(name)) {
-            	if(servletDef.getAsyncSupported() == null) {
-            		servletDef.setAsyncSupported(evp.getValue().stringifyValue());
-            	}
-           } else if ("loadOnStartup".equals(name)) {
-            	if(servletDef.getLoadOnStartup() == null) {
-            		servletDef.setLoadOnStartup(evp.getValue().stringifyValue());
-            	}
+                if (servletDef.getAsyncSupported() == null) {
+                    servletDef.setAsyncSupported(evp.getValue()
+                            .stringifyValue());
+                }
+            } else if ("loadOnStartup".equals(name)) {
+                if (servletDef.getLoadOnStartup() == null) {
+                    servletDef
+                            .setLoadOnStartup(evp.getValue().stringifyValue());
+                }
             } else if ("initParams".equals(name)) {
-                Map<String,String> initParams =
-                    processAnnotationWebInitParams(evp.getValue());
-                if(isWebXMLservletDef) {
-	                Map<String,String> webXMLInitParams = servletDef.getParameterMap();
-	                for (Map.Entry<String, String> entry : initParams.entrySet()) {
-	                	if (webXMLInitParams.get(entry.getKey()) == null) {
-	                		servletDef.addInitParameter(entry.getKey(),
-	                            entry.getValue());
-	                	}
-	                }
-                } 
-                else {
-					for (Map.Entry<String, String> entry : initParams
-					        .entrySet()) {
-						servletDef.addInitParameter(entry.getKey(), entry
-						        .getValue());
-	                }
+                Map<String, String> initParams = processAnnotationWebInitParams(evp
+                        .getValue());
+                if (isWebXMLservletDef) {
+                    Map<String, String> webXMLInitParams = servletDef
+                            .getParameterMap();
+                    for (Map.Entry<String, String> entry : initParams
+                            .entrySet()) {
+                        if (webXMLInitParams.get(entry.getKey()) == null) {
+                            servletDef.addInitParameter(entry.getKey(), entry
+                                    .getValue());
+                        }
+                    }
+                } else {
+                    for (Map.Entry<String, String> entry : initParams
+                            .entrySet()) {
+                        servletDef.addInitParameter(entry.getKey(), entry
+                                .getValue());
+                    }
                 }
             } else {
                 // Ignore
             }
         }
-       	if(!isWebXMLservletDef && urlPatterns != null) {
-        	fragment.addServlet(servletDef);
-       	}
-       	if(urlPatternsSet) {
-       		if (!fragment.getServletMappings().containsValue(servletName)) {
-       			for (String urlPattern : urlPatterns) {
-       				fragment.addServletMapping(urlPattern, servletName);
-       			}
-       		}
-       	}
+        if (!isWebXMLservletDef && urlPatterns != null) {
+            fragment.addServlet(servletDef);
+        }
+        if (urlPatternsSet) {
+            if (!fragment.getServletMappings().containsValue(servletName)) {
+                for (String urlPattern : urlPatterns) {
+                    fragment.addServletMapping(urlPattern, servletName);
+                }
+            }
+        }
 
     }
 

==================================================
NoMappingParamServlet.java
index 6ed1d33c12..3bf634d92b 100644
--- a/test/org/apache/catalina/startup/DuplicateMappingParamServlet.java
+++ b/test/org/apache/catalina/startup/DuplicateMappingParamServlet.java
@@ -27,19 +27,20 @@ import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
 /**
-*
-* @author Peter Rossbach
-* @version $Revision$ $Date$
-*/
-@WebServlet(value = "/annotation/overwrite", urlPatterns = {"/param2"}, name= "param", initParams = {
+ * 
+ * @author Peter Rossbach
+ * @version $Revision$ $Date: 2010-04-29 00:16:49 +0200 (Thu, 29 Apr
+ *          2010) $
+ */
+@WebServlet(value = "/annotation/overwrite", urlPatterns = { "/param2" }, name = "param", initParams = {
         @WebInitParam(name = "foo", value = "Hello"),
         @WebInitParam(name = "bar", value = "World!") })
 public class DuplicateMappingParamServlet extends HttpServlet {
 
-	public void doGet(HttpServletRequest req, HttpServletResponse res)
-	    throws IOException, ServletException
-	  {
-	    PrintWriter out = res.getWriter();
-	    out.print("<p>" + getInitParameter("foo") + " " + getInitParameter("bar") + "</p>");
-	  }
+    public void doGet(HttpServletRequest req, HttpServletResponse res)
+            throws IOException, ServletException {
+        PrintWriter out = res.getWriter();
+        out.print("<p>" + getInitParameter("foo") + " "
+                + getInitParameter("bar") + "</p>");
+    }
 }

==================================================
ParamServlet.java
index 19a4d22b23..1a5e09054b 100644
--- a/test/org/apache/catalina/startup/NoMappingParamServlet.java
+++ b/test/org/apache/catalina/startup/NoMappingParamServlet.java
@@ -27,19 +27,20 @@ import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
 /**
-*
-* @author Peter Rossbach
-* @version $Revision$ $Date$
-*/
-@WebServlet(name= "param1", initParams = {
+ * 
+ * @author Peter Rossbach
+ * @version $Revision$ $Date: 2010-04-29 00:16:49 +0200 (Thu, 29 Apr
+ *          2010) $
+ */
+@WebServlet(name = "param1", initParams = {
         @WebInitParam(name = "foo", value = "Hello"),
         @WebInitParam(name = "bar", value = "World!") })
 public class NoMappingParamServlet extends HttpServlet {
 
-	public void doGet(HttpServletRequest req, HttpServletResponse res)
-	    throws IOException, ServletException
-	  {
-	    PrintWriter out = res.getWriter();
-	    out.print("<p>" + getInitParameter("foo") + " " + getInitParameter("bar") + "</p>");
-	  }
+    public void doGet(HttpServletRequest req, HttpServletResponse res)
+            throws IOException, ServletException {
+        PrintWriter out = res.getWriter();
+        out.print("<p>" + getInitParameter("foo") + " "
+                + getInitParameter("bar") + "</p>");
+    }
 }

==================================================
TestContextConfigAnnotation.java
index b9f168c79d..4942d4ec15 100644
--- a/test/org/apache/catalina/startup/ParamServlet.java
+++ b/test/org/apache/catalina/startup/ParamServlet.java
@@ -27,22 +27,20 @@ import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
 /**
- *
+ * 
  * @author Peter Rossbach
- * @version $Revision$ $Date$
+ * @version $Revision$ $Date: 2010-04-29 00:16:49 +0200 (Thu, 29 Apr
+ *          2010) $
  */
-@WebServlet(value = "/annotation/overwrite", name= "param", initParams = {
+@WebServlet(value = "/annotation/overwrite", name = "param", initParams = {
         @WebInitParam(name = "foo", value = "Hello"),
-        @WebInitParam(name = "bar", value = "World!") },
-        displayName="param", description="param", 
-        largeIcon="paramLarge.png",smallIcon="paramSmall.png",
-        loadOnStartup= 0, asyncSupported= false)
+        @WebInitParam(name = "bar", value = "World!") }, displayName = "param", description = "param", largeIcon = "paramLarge.png", smallIcon = "paramSmall.png", loadOnStartup = 0, asyncSupported = false)
 public class ParamServlet extends HttpServlet {
 
-	public void doGet(HttpServletRequest req, HttpServletResponse res)
-	    throws IOException, ServletException
-	  {
-	    PrintWriter out = res.getWriter();
-	    out.print("<p>" + getInitParameter("foo") + " " + getInitParameter("bar") + "</p>");
-	  }
+    public void doGet(HttpServletRequest req, HttpServletResponse res)
+            throws IOException, ServletException {
+        PrintWriter out = res.getWriter();
+        out.print("<p>" + getInitParameter("foo") + " "
+                + getInitParameter("bar") + "</p>");
+    }
 }

==================================================
