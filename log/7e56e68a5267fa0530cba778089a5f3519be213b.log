7e56e68a5267fa0530cba778089a5f3519be213b
==================================================
Get encoding and decoding working end to end with an associated unit test
==================================================
Mark Emlyn
==================================================
Sat Mar 9 19:14:18 2013 +0000
==================================================
Util.java
index 6ebf734294..bea2a56742 100644
--- a/java/org/apache/tomcat/websocket/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/LocalStrings.properties
@@ -62,5 +62,6 @@ wsWebSocketContainer.invalidHeader=Unable to parse HTTP header as no colon is pr
 wsWebSocketContainer.invalidStatus=The HTTP response from the server [{0}] did not permit the HTTP upgrade to WebSocket
 wsWebSocketContainer.invalidSubProtocol=The WebSocket server returned multiple values for the Sec-WebSocket-Protocol header
 wsWebSocketContainer.maxBuffer=This implementation limits the maximum size of a buffer to Integer.MAX_VALUE
+wsWebSocketContainer.missingAnnotation=Cannot use POJO class [{0}] as it is not annotated with @ClientEndpoint
 wsWebSocketContainer.pathNoHost=No host was specified in URI
 wsWebSocketContainer.pathWrongScheme=The scheme [{0}] is not supported
\ No newline at end of file

==================================================
WsWebSocketContainer.java
index 2e34c87d27..f856e0a2de 100644
--- a/java/org/apache/tomcat/websocket/Util.java
+++ b/java/org/apache/tomcat/websocket/Util.java
@@ -26,6 +26,7 @@ import java.util.concurrent.ConcurrentLinkedQueue;
 
 import javax.websocket.CloseReason.CloseCode;
 import javax.websocket.CloseReason.CloseCodes;
+import javax.websocket.Decoder;
 import javax.websocket.Encoder;
 import javax.websocket.MessageHandler;
 
@@ -33,7 +34,7 @@ import javax.websocket.MessageHandler;
  * Utility class for internal use only within the
  * {@link org.apache.tomcat.websocket} package.
  */
-class Util {
+public class Util {
 
     private static final Queue<SecureRandom> randoms =
             new ConcurrentLinkedQueue<>();
@@ -142,6 +143,11 @@ class Util {
     }
 
 
+    public static Class<?> getDecoderType(Class<? extends Decoder> Decoder) {
+        return (Class<?>) Util.getGenericType(Decoder.class, Decoder);
+    }
+
+
     static Class<?> getEncoderType(Class<? extends Encoder> encoder) {
         return (Class<?>) Util.getGenericType(Encoder.class, encoder);
     }

==================================================
PojoEndpointClient.java
index b75a944c2d..a626b162f0 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -24,6 +24,7 @@ import java.nio.ByteBuffer;
 import java.nio.channels.AsynchronousSocketChannel;
 import java.nio.charset.Charset;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -80,7 +81,15 @@ public class WsWebSocketContainer
     public Session connectToServer(Object pojo, URI path)
             throws DeploymentException {
 
-        Endpoint ep = new PojoEndpointClient(pojo);
+        ClientEndpoint annotation =
+                pojo.getClass().getAnnotation(ClientEndpoint.class);
+        if (annotation == null) {
+            throw new DeploymentException(
+                    sm.getString("wsWebSocketContainer.missingAnnotation",
+                            pojo.getClass().getName()));
+        }
+
+        Endpoint ep = new PojoEndpointClient(pojo, annotation.decoders());
 
         Class<? extends ClientEndpointConfig.Configurator> configuratorClazz =
                 pojo.getClass().getAnnotation(
@@ -97,9 +106,11 @@ public class WsWebSocketContainer
             }
         }
 
-        ClientEndpointConfig config =
-                ClientEndpointConfig.Builder.create().configurator(
-                        configurator).build();
+        ClientEndpointConfig config = ClientEndpointConfig.Builder.create().
+                configurator(configurator).
+                decoders(Arrays.asList(annotation.decoders())).
+                encoders(Arrays.asList(annotation.encoders())).
+                build();
         return connectToServer(ep, config, path);
     }
 

==================================================
PojoMethodMapping.java
index 1284de55fc..ba6128a11a 100644
--- a/java/org/apache/tomcat/websocket/pojo/PojoEndpointClient.java
+++ b/java/org/apache/tomcat/websocket/pojo/PojoEndpointClient.java
@@ -18,15 +18,19 @@ package org.apache.tomcat.websocket.pojo;
 
 import java.util.Collections;
 
+import javax.websocket.Decoder;
+import javax.websocket.DeploymentException;
 import javax.websocket.EndpointConfig;
 import javax.websocket.Session;
 
 
 public class PojoEndpointClient extends PojoEndpointBase {
 
-    public PojoEndpointClient(Object pojo) {
+    public PojoEndpointClient(Object pojo,
+            Class<? extends Decoder>[] decoders) throws DeploymentException {
         setPojo(pojo);
-        setMethodMapping(new PojoMethodMapping(pojo.getClass(), null));
+        setMethodMapping(
+                new PojoMethodMapping(pojo.getClass(), decoders, null));
         setPathParameters(Collections.EMPTY_MAP);
     }
 

==================================================
WsServerContainer.java
index 197e6106ef..4ce1381b2b 100644
--- a/java/org/apache/tomcat/websocket/server/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/server/LocalStrings.properties
@@ -13,12 +13,17 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 sci.newInstance.fail=Failed to create an Endpoint instance of type [{0}]
+
+serverContainer.configuratorFail=Failed to create configurator of type [{0}] for POJO of type [{1}]
 serverContainer.endpointDeploy=Endpoint class [{0}] deploying to path [{1}] in ServletContext [{2}]
 serverContainer.missingAnnotation=Cannot deploy POJO class [{0}] as it is not annotated with @ServerEndpoint
 serverContainer.missingEndpoint=An Endpoint instance has been request for path [{0}] but no matching Endpoint class was found
 serverContainer.pojoDeploy=POJO class [{0}] deploying to path [{1}] in ServletContext [{2}]
 serverContainer.servletContextMismatch=Attempted to register a POJO annotated for WebSocket at path [{0}] in the ServletContext with context path [{1}] when the WebSocket ServerContainer is allocated to the ServletContext with context path [{2}]
 serverContainer.servletContextMissing=No ServletContext was specified
+
 uriTemplate.noMatch=The input template [{0}] generated the pattern [{1}] which did not match the supplied pathInfo [{2}]
+
 wsProtocolHandler.closeFailed=Failed to close the WebSocket connection cleanly
+
 wsRemoteEndpointServer.closeFailed=Failed to close the ServletOutputStream connection cleanly
\ No newline at end of file

==================================================
TestEncodingDecoding.java
index 1b10ea0cff..8682adadde 100644
--- a/java/org/apache/tomcat/websocket/server/WsServerContainer.java
+++ b/java/org/apache/tomcat/websocket/server/WsServerContainer.java
@@ -16,6 +16,7 @@
  */
 package org.apache.tomcat.websocket.server;
 
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.Map;
 import java.util.WeakHashMap;
@@ -27,6 +28,7 @@ import javax.websocket.DeploymentException;
 import javax.websocket.server.ServerContainer;
 import javax.websocket.server.ServerEndpoint;
 import javax.websocket.server.ServerEndpointConfig;
+import javax.websocket.server.ServerEndpointConfig.Configurator;
 
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -181,7 +183,8 @@ public class WsServerContainer extends WsWebSocketContainer
         }
 
         pojoMap.put(mapPath, pojo);
-        pojoMethodMap.put(pojo, new PojoMethodMapping(pojo, wsPath));
+        pojoMethodMap.put(pojo,
+                new PojoMethodMapping(pojo, annotation.decoders(), wsPath));
         addWsServletMapping(servletPath);
     }
 
@@ -205,14 +208,31 @@ public class WsServerContainer extends WsWebSocketContainer
         }
         Class<?> pojo = pojoMap.get(servletPath);
         if (pojo != null) {
+            ServerEndpoint annotation =
+                    pojo.getAnnotation(ServerEndpoint.class);
             PojoMethodMapping methodMapping = pojoMethodMap.get(pojo);
             if (methodMapping != null) {
+                Configurator configurator;
+                try {
+                    configurator = annotation.configurator().newInstance();
+                } catch (InstantiationException | IllegalAccessException e) {
+                    throw new IllegalStateException(sm.getString(
+                            "serverContainer.configuratorFail",
+                            annotation.configurator().getName(),
+                            pojo.getClass().getName()), e);
+                }
                 sec = ServerEndpointConfig.Builder.create(
-                        pojo, methodMapping.getWsPath()).build();
+                        pojo, methodMapping.getWsPath()).
+                        decoders(Arrays.asList(annotation.decoders())).
+                        encoders(Arrays.asList(annotation.encoders())).
+                        configurator(configurator).
+                        build();
                 sec.getUserProperties().put(
-                        PojoEndpointServer.POJO_PATH_PARAM_KEY, pathParameters);
+                        PojoEndpointServer.POJO_PATH_PARAM_KEY,
+                        pathParameters);
                 sec.getUserProperties().put(
-                        PojoEndpointServer.POJO_METHOD_MAPPING_KEY, methodMapping);
+                        PojoEndpointServer.POJO_METHOD_MAPPING_KEY,
+                        methodMapping);
                 return sec;
             }
         }

==================================================
