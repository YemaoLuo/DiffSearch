58a040cdedfd77827a3fbf1d251e53dd36d24c2d
==================================================
Use CharBuffer rather than StringBuilder to build the access log message to:
==================================================
Mark Emlyn
==================================================
Sun Sep 23 09:43:43 2012 +0000
==================================================
AccessLogValve.java
Use CharBuffer rather than StringBuilder to build the access log message to:
- save a char[] to String conversion and the associated garbage
- allow buffers to be recycled also saving garbage
Reduces allocations due to the AccessLog from 43% to 27% of the overall allocations

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1388991 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ExtendedAccessLogValve.java
index 2960058120..c142f9d2fa 100644
--- a/java/org/apache/catalina/valves/AccessLogValve.java
+++ b/java/org/apache/catalina/valves/AccessLogValve.java
@@ -25,6 +25,7 @@ import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
 import java.io.UnsupportedEncodingException;
 import java.net.InetAddress;
+import java.nio.CharBuffer;
 import java.nio.charset.Charset;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -34,7 +35,9 @@ import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
+import java.util.Queue;
 import java.util.TimeZone;
+import java.util.concurrent.ConcurrentLinkedQueue;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.Cookie;
@@ -570,13 +573,28 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      */
     protected boolean requestAttributesEnabled = false;
 
-    // ------------------------------------------------------------- Properties
+    /**
+     * Buffer pool used for log message generation. Pool used to reduce garbage
+     * generation.
+     */
+    private Queue<CharBuffer> charBuffers = new ConcurrentLinkedQueue<>();
 
     /**
-     * @return Returns the enabled.
+     * Log message buffers are usually recycled and re-used. To prevent
+     * excessive memory usage, if a buffer grows beyond this size it will be
+     * discarded. The default is 256 characters. This should be set to larger
+     * than the typical access log message size.
      */
-    public boolean getEnabled() {
-        return enabled;
+    private int maxLogMessageBufferSize = 256;
+
+    // ------------------------------------------------------------- Properties
+
+    public int getMaxLogMessageBufferSize() {
+        return maxLogMessageBufferSize;
+    }
+
+    public void setMaxLogMessageBufferSize(int maxLogMessageBufferSize) {
+        this.maxLogMessageBufferSize = maxLogMessageBufferSize;
     }
 
     /**
@@ -595,6 +613,13 @@ public class AccessLogValve extends ValveBase implements AccessLog {
         return requestAttributesEnabled;
     }
 
+    /**
+     * @return Returns the enabled.
+     */
+    public boolean getEnabled() {
+        return enabled;
+    }
+
     /**
      * @param enabled
      *            The enabled to set.
@@ -933,13 +958,23 @@ public class AccessLogValve extends ValveBase implements AccessLog {
         long start = request.getCoyoteRequest().getStartTime();
         Date date = getDate(start + time);
 
-        StringBuilder result = new StringBuilder(128);
+        CharBuffer result = charBuffers.poll();
+        if (result == null) {
+            result = CharBuffer.allocate(128);
+        }
 
         for (int i = 0; i < logElements.length; i++) {
             logElements[i].addElement(result, date, request, response, time);
         }
 
-        log(result.toString());
+        result.flip();
+        log(result);
+
+        // TODO - Make this configurable
+        if (result.length() < 256) {
+            result.clear();
+            charBuffers.add(result);
+        }
     }
 
 
@@ -1000,7 +1035,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      *
      * @param message Message to be logged
      */
-    public void log(String message) {
+    public void log(CharBuffer message) {
         if (rotatable) {
             // Only do a logfile switch check once a second, max.
             long systime = System.currentTimeMillis();
@@ -1047,7 +1082,9 @@ public class AccessLogValve extends ValveBase implements AccessLog {
         // Log this message
         synchronized(this) {
             if (writer != null) {
-                writer.println(message);
+                writer.write(message.array(), message.arrayOffset(),
+                        message.arrayOffset() + message.limit());
+                writer.println("");
                 if (!buffered) {
                     writer.flush();
                 }
@@ -1229,7 +1266,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      * AccessLogElement writes the partial message into the buffer.
      */
     protected interface AccessLogElement {
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time);
 
     }
@@ -1239,7 +1276,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      */
     protected static class ThreadNameElement implements AccessLogElement {
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             RequestInfo info = request.getCoyoteRequest().getRequestProcessor();
             if(info != null) {
@@ -1269,7 +1306,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
         }
 
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             buf.append(LOCAL_ADDR_VALUE);
         }
@@ -1280,14 +1317,14 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      */
     protected class RemoteAddrElement implements AccessLogElement {
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             if (requestAttributesEnabled) {
                 Object addr = request.getAttribute(REMOTE_ADDR_ATTRIBUTE);
                 if (addr == null) {
                     buf.append(request.getRemoteAddr());
                 } else {
-                    buf.append(addr);
+                    buf.append(addr.toString());
                 }
             } else {
                 buf.append(request.getRemoteAddr());
@@ -1300,7 +1337,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      */
     protected class HostElement implements AccessLogElement {
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             String value = null;
             if (requestAttributesEnabled) {
@@ -1324,7 +1361,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      */
     protected static class LogicalUserNameElement implements AccessLogElement {
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             buf.append('-');
         }
@@ -1335,14 +1372,14 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      */
     protected class ProtocolElement implements AccessLogElement {
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             if (requestAttributesEnabled) {
                 Object proto = request.getAttribute(PROTOCOL_ATTRIBUTE);
                 if (proto == null) {
                     buf.append(request.getProtocol());
                 } else {
-                    buf.append(proto);
+                    buf.append(proto.toString());
                 }
             } else {
                 buf.append(request.getProtocol());
@@ -1355,7 +1392,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      */
     protected static class UserElement implements AccessLogElement {
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             if (request != null) {
                 String value = request.getRemoteUser();
@@ -1491,7 +1528,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
         }
 
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             long timestamp = date.getTime();
             long frac;
@@ -1503,10 +1540,10 @@ public class AccessLogValve extends ValveBase implements AccessLog {
                 buf.append(localDateCache.get().getFormat(timestamp));
                 break;
             case SEC:
-                buf.append(timestamp / 1000);
+                buf.append(Long.toString(timestamp / 1000));
                 break;
             case MSEC:
-                buf.append(timestamp);
+                buf.append(Long.toString(timestamp));
                 break;
             case MSEC_FRAC:
                 frac = timestamp % 1000;
@@ -1518,7 +1555,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
                         buf.append('0');
                     }
                 }
-                buf.append(frac);
+                buf.append(Long.toString(frac));
                 break;
             case SDF:
                 String temp = localDateCache.get().getFormat(format, locale, timestamp);
@@ -1548,7 +1585,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      */
     protected static class RequestElement implements AccessLogElement {
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             if (request != null) {
                 String method = request.getMethod();
@@ -1577,10 +1614,10 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      */
     protected static class HttpStatusCodeElement implements AccessLogElement {
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             if (response != null) {
-                buf.append(response.getStatus());
+                buf.append(Integer.toString(response.getStatus()));
             } else {
                 buf.append('-');
             }
@@ -1592,17 +1629,17 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      */
     protected class LocalPortElement implements AccessLogElement {
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             if (requestAttributesEnabled) {
                 Object port = request.getAttribute(SERVER_PORT_ATTRIBUTE);
                 if (port == null) {
-                    buf.append(request.getServerPort());
+                    buf.append(Integer.toString(request.getServerPort()));
                 } else {
-                    buf.append(port);
+                    buf.append(port.toString());
                 }
             } else {
-                buf.append(request.getServerPort());
+                buf.append(Integer.toString(request.getServerPort()));
             }
         }
     }
@@ -1621,7 +1658,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
         }
 
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             // Don't need to flush since trigger for log message is after the
             // response has been committed
@@ -1643,7 +1680,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
             if (length <= 0 && conversion) {
                 buf.append('-');
             } else {
-                buf.append(length);
+                buf.append(Long.toString(length));
             }
         }
     }
@@ -1653,7 +1690,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      */
     protected static class MethodElement implements AccessLogElement {
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             if (request != null) {
                 buf.append(request.getMethod());
@@ -1676,19 +1713,19 @@ public class AccessLogValve extends ValveBase implements AccessLog {
         }
 
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             if (millis) {
-                buf.append(time);
+                buf.append(Long.toString(time));
             } else {
                 // second
-                buf.append(time / 1000);
+                buf.append(Long.toString(time / 1000));
                 buf.append('.');
                 int remains = (int) (time % 1000);
-                buf.append(remains / 100);
+                buf.append(Long.toString(remains / 100));
                 remains = remains % 100;
-                buf.append(remains / 10);
-                buf.append(remains % 10);
+                buf.append(Long.toString(remains / 10));
+                buf.append(Long.toString(remains % 10));
             }
         }
     }
@@ -1698,7 +1735,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      */
     protected static class QueryElement implements AccessLogElement {
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             String query = null;
             if (request != null) {
@@ -1716,7 +1753,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      */
     protected static class SessionIdElement implements AccessLogElement {
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             if (request != null) {
                 if (request.getSession(false) != null) {
@@ -1736,7 +1773,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      */
     protected static class RequestURIElement implements AccessLogElement {
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             if (request != null) {
                 buf.append(request.getRequestURI());
@@ -1751,7 +1788,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
      */
     protected static class LocalServerNameElement implements AccessLogElement {
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             buf.append(request.getServerName());
         }
@@ -1768,7 +1805,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
         }
 
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             buf.append(str);
         }
@@ -1785,7 +1822,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
         }
 
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             Enumeration<String> iter = request.getHeaders(header);
             if (iter.hasMoreElements()) {
@@ -1810,7 +1847,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
         }
 
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             String value = "-";
             Cookie[] c = request.getCookies();
@@ -1837,7 +1874,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
         }
 
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             if (null != response) {
                 Iterator<String> iter = response.getHeaders(header).iterator();
@@ -1864,7 +1901,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
         }
 
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             Object value = null;
             if (request != null) {
@@ -1895,7 +1932,7 @@ public class AccessLogValve extends ValveBase implements AccessLog {
         }
 
         @Override
-        public void addElement(StringBuilder buf, Date date, Request request,
+        public void addElement(CharBuffer buf, Date date, Request request,
                 Response response, long time) {
             Object value = null;
             if (null != request) {

==================================================
