84e0c81d56fb3c1aa049bd326078275aefbe1415
==================================================
Fix various Eclipse warnings in o.a.jasper.compiler. Remove unused and unnecessary code, correct use of deprecated methods.
==================================================
Mark Emlyn
==================================================
Fri Jan 9 11:17:13 2009 +0000
==================================================
Dumper.java
Fix various Eclipse warnings in o.a.jasper.compiler. Remove unused and unnecessary code, correct use of deprecated methods.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@733008 13f79535-47bb-0310-9956-ffa450edef68



==================================================
JDTCompiler.java
index 1925f55d37..e43e8083aa 100644
--- a/java/org/apache/jasper/compiler/Dumper.java
+++ b/java/org/apache/jasper/compiler/Dumper.java
@@ -42,14 +42,6 @@ class Dumper {
 	    System.out.print(str);
 	}
 
-	private void printString(String prefix, char[] chars, String suffix) {
-	    String str = null;
-	    if (chars != null) {
-		str = new String(chars);
-	    }
-	    printString(prefix, str, suffix);
-	}
-	     
 	private void printString(String prefix, String str, String suffix) {
 	    printIndent();
 	    if (str != null) {

==================================================
JspConfig.java
index 797704228a..ccb8bed6ea 100644
--- a/java/org/apache/jasper/compiler/JDTCompiler.java
+++ b/java/org/apache/jasper/compiler/JDTCompiler.java
@@ -105,17 +105,15 @@ public class JDTCompiler extends org.apache.jasper.compiler.Compiler {
                     is = new FileInputStream(sourceFile);
                     Reader reader = 
                         new BufferedReader(new InputStreamReader(is, ctxt.getOptions().getJavaEncoding()));
-                    if (reader != null) {
-                        char[] chars = new char[8192];
-                        StringBuffer buf = new StringBuffer();
-                        int count;
-                        while ((count = reader.read(chars, 0, 
-                                                    chars.length)) > 0) {
-                            buf.append(chars, 0, count);
-                        }
-                        result = new char[buf.length()];
-                        buf.getChars(0, result.length, result, 0);
+                    char[] chars = new char[8192];
+                    StringBuffer buf = new StringBuffer();
+                    int count;
+                    while ((count = reader.read(chars, 0, 
+                                                chars.length)) > 0) {
+                        buf.append(chars, 0, count);
                     }
+                    result = new char[buf.length()];
+                    buf.getChars(0, result.length, result, 0);
                 } catch (IOException e) {
                     log.error("Compilation error", e);
                 } finally {
@@ -421,12 +419,13 @@ public class JDTCompiler extends org.apache.jasper.compiler.Compiler {
             String className = classNames[i];
             compilationUnits[i] = new CompilationUnit(fileNames[i], className);
         }
+        CompilerOptions cOptions = new CompilerOptions(settings);
+        cOptions.parseLiteralExpressionsAsConstants = true;
         Compiler compiler = new Compiler(env,
                                          policy,
-                                         settings,
+                                         cOptions,
                                          requestor,
-                                         problemFactory,
-                                         true);
+                                         problemFactory);
         compiler.compile(compilationUnits);
 
         if (!ctxt.keepGenerated()) {

==================================================
JspDocumentParser.java
index 6b9d382081..5dd3e2bc28 100644
--- a/java/org/apache/jasper/compiler/JspConfig.java
+++ b/java/org/apache/jasper/compiler/JspConfig.java
@@ -424,7 +424,6 @@ public class JspConfig {
         while (iter.hasNext()) {
 
             JspPropertyGroup jpg = iter.next();
-            JspProperty jp = jpg.getJspProperty();
 
             String extension = jpg.getExtension();
             String path = jpg.getPath();

==================================================
JspRuntimeContext.java
index e51008556b..686d6b5dfa 100644
--- a/java/org/apache/jasper/compiler/JspDocumentParser.java
+++ b/java/org/apache/jasper/compiler/JspDocumentParser.java
@@ -25,7 +25,6 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.jar.JarFile;
 
-import javax.servlet.jsp.tagext.Tag;
 import javax.servlet.jsp.tagext.TagFileInfo;
 import javax.servlet.jsp.tagext.TagInfo;
 import javax.servlet.jsp.tagext.TagLibraryInfo;
@@ -56,7 +55,6 @@ class JspDocumentParser
     extends DefaultHandler
     implements LexicalHandler, TagConstants {
 
-    private static final String JSP_VERSION = "version";
     private static final String LEXICAL_HANDLER_PROPERTY =
         "http://xml.org/sax/properties/lexical-handler";
     private static final String JSP_URI = "http://java.sun.com/JSP/Page";

==================================================
Node.java
index 797559e6cf..d5c13c9383 100644
--- a/java/org/apache/jasper/compiler/JspRuntimeContext.java
+++ b/java/org/apache/jasper/compiler/JspRuntimeContext.java
@@ -376,7 +376,7 @@ public final class JspRuntimeContext {
                     codeBase = codeBase + File.separator;
                 }
                 File contextDir = new File(codeBase);
-                URL url = contextDir.getCanonicalFile().toURL();
+                URL url = contextDir.getCanonicalFile().toURI().toURL();
                 codeSource = new CodeSource(url,(Certificate[])null);
                 permissionCollection = policy.getPermissions(codeSource);
 
@@ -408,34 +408,32 @@ public final class JspRuntimeContext {
                 permissionCollection.add( new RuntimePermission(
                     "accessClassInPackage.org.apache.jasper.runtime") );
 
-                if (parentClassLoader instanceof URLClassLoader) {
-                    URL [] urls = parentClassLoader.getURLs();
-                    String jarUrl = null;
-                    String jndiUrl = null;
-                    for (int i=0; i<urls.length; i++) {
-                        if (jndiUrl == null
-                                && urls[i].toString().startsWith("jndi:") ) {
-                            jndiUrl = urls[i].toString() + "-";
-                        }
-                        if (jarUrl == null
-                                && urls[i].toString().startsWith("jar:jndi:")
-                                ) {
-                            jarUrl = urls[i].toString();
-                            jarUrl = jarUrl.substring(0,jarUrl.length() - 2);
-                            jarUrl = jarUrl.substring(0,
-                                     jarUrl.lastIndexOf('/')) + "/-";
-                        }
+                URL [] urls = parentClassLoader.getURLs();
+                String jarUrl = null;
+                String jndiUrl = null;
+                for (int i=0; i<urls.length; i++) {
+                    if (jndiUrl == null
+                            && urls[i].toString().startsWith("jndi:") ) {
+                        jndiUrl = urls[i].toString() + "-";
                     }
-                    if (jarUrl != null) {
-                        permissionCollection.add(
-                                new FilePermission(jarUrl,"read"));
-                        permissionCollection.add(
-                                new FilePermission(jarUrl.substring(4),"read"));
+                    if (jarUrl == null
+                            && urls[i].toString().startsWith("jar:jndi:")
+                            ) {
+                        jarUrl = urls[i].toString();
+                        jarUrl = jarUrl.substring(0,jarUrl.length() - 2);
+                        jarUrl = jarUrl.substring(0,
+                                 jarUrl.lastIndexOf('/')) + "/-";
                     }
-                    if (jndiUrl != null)
-                        permissionCollection.add(
-                                new FilePermission(jndiUrl,"read") );
                 }
+                if (jarUrl != null) {
+                    permissionCollection.add(
+                            new FilePermission(jarUrl,"read"));
+                    permissionCollection.add(
+                            new FilePermission(jarUrl.substring(4),"read"));
+                }
+                if (jndiUrl != null)
+                    permissionCollection.add(
+                            new FilePermission(jndiUrl,"read") );
             } catch(Exception e) {
                 context.log("Security Init for context failed",e);
             }

==================================================
SmapUtil.java
index 86df9b7f5c..ba79b43fb3 100644
--- a/java/org/apache/jasper/compiler/Node.java
+++ b/java/org/apache/jasper/compiler/Node.java
@@ -25,13 +25,11 @@ import java.util.ArrayList;
 import javax.el.ELContext;
 import javax.el.ELException;
 import javax.el.ExpressionFactory;
-import javax.el.ValueExpression;
 import javax.servlet.jsp.tagext.BodyTag;
 import javax.servlet.jsp.tagext.DynamicAttributes;
 import javax.servlet.jsp.tagext.IterationTag;
 import javax.servlet.jsp.tagext.JspIdConsumer;
 import javax.servlet.jsp.tagext.SimpleTag;
-import javax.servlet.jsp.tagext.Tag;
 import javax.servlet.jsp.tagext.TagAttributeInfo;
 import javax.servlet.jsp.tagext.TagData;
 import javax.servlet.jsp.tagext.TagFileInfo;
@@ -2137,8 +2135,7 @@ abstract class Node implements TagConstants {
                 throws ELException {
             if (this.el != null) {
                 // determine exact type
-                ValueExpression ve = ef.createValueExpression(ctx, this.value,
-                        String.class);
+                ef.createValueExpression(ctx, this.value, String.class);
             }
         }
 

==================================================
TagLibraryInfoImpl.java
index 8c3910c0b4..767e3dce53 100644
--- a/java/org/apache/jasper/compiler/SmapUtil.java
+++ b/java/org/apache/jasper/compiler/SmapUtil.java
@@ -44,9 +44,6 @@ import org.apache.jasper.JspCompilationContext;
  */
 public class SmapUtil {
 
-    private org.apache.juli.logging.Log log=
-        org.apache.juli.logging.LogFactory.getLog( SmapUtil.class );
-
     //*********************************************************************
     // Constants
 
@@ -177,14 +174,6 @@ public class SmapUtil {
         return path.substring(path.lastIndexOf('/') + 1);
     }
 
-    /**
-     * Returns a file path corresponding to a potential SMAP input
-     * for the given compilation input (JSP file).
-     */
-    private static String inputSmapPath(String path) {
-        return path.substring(0, path.lastIndexOf('.') + 1) + "smap";
-    }
-
     //*********************************************************************
     // Installation logic (from Robert Field, JSR-045 spec lead)
     private static class SDEInstaller {
@@ -284,7 +273,6 @@ public class SmapUtil {
         }
 
         void addSDE() throws UnsupportedEncodingException, IOException {
-            int i;
             copy(4 + 2 + 2); // magic min/maj version
             int constantPoolCountPos = genPos;
             int constantPoolCount = readU2();

==================================================
Validator.java
index ad67f4c410..a40aa8b427 100644
--- a/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java
+++ b/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java
@@ -261,10 +261,10 @@ class TagLibraryInfoImpl extends TagLibraryInfo implements TagConstants {
 
                 }
                 functionTable.put(funcName, funcInfo);
-            } else if ("display-name".equals(tname) || // Ignored elements
+            } else if ("display-name".equals(tname) ||
                     "small-icon".equals(tname) || "large-icon".equals(tname)
                     || "listener".equals(tname)) {
-                ;
+                // Ignored elements
             } else if ("taglib-extension".equals(tname)) {
                 // Recognized but ignored
             } else {
@@ -496,7 +496,7 @@ class TagLibraryInfoImpl extends TagLibraryInfo implements TagConstants {
         String type = null;
         String expectedType = null;
         String methodSignature = null;
-        boolean required = false, rtexprvalue = false, reqTime = false, isFragment = false, deferredValue = false, deferredMethod = false;
+        boolean required = false, rtexprvalue = false, isFragment = false, deferredValue = false, deferredMethod = false;
 
         Iterator<TreeNode> list = elem.findChildren();
         while (list.hasNext()) {
@@ -555,9 +555,8 @@ class TagLibraryInfoImpl extends TagLibraryInfo implements TagConstants {
                 } else {
                     methodSignature = "java.lang.Object method()";
                 }
-            } else if ("description".equals(tname) || // Ignored elements
-            false) {
-                ;
+            } else if ("description".equals(tname) || false) {
+                // Ignored elements
             } else {
                 if (log.isWarnEnabled()) {
                     log.warn(Localizer.getMessage(

==================================================
