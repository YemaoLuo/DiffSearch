0be661c9d14ca0cfe6e54145795118dd4953ec28
==================================================
Code clean-up for o.a.catalina.util
==================================================
Mark Emlyn
==================================================
Tue Aug 7 22:13:00 2012 +0000
==================================================
Base64.java
Code clean-up for o.a.catalina.util
 - Add final prompted by UCDetector
 - Java 7 use of <>

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1370569 13f79535-47bb-0310-9956-ffa450edef68



==================================================
CustomObjectInputStream.java
index 2e2d392b60..4af280bf5d 100644
--- a/java/org/apache/catalina/util/Base64.java
+++ b/java/org/apache/catalina/util/Base64.java
@@ -33,16 +33,16 @@ import org.apache.tomcat.util.buf.CharChunk;
  */
 public final class  Base64
 {
-    private static final int  BASELENGTH         = 255;
-    private static final int  LOOKUPLENGTH       = 64;
-    private static final int  TWENTYFOURBITGROUP = 24;
-    private static final int  EIGHTBIT           = 8;
-    private static final int  SIXTEENBIT         = 16;
-    private static final int  FOURBYTE           = 4;
-    private static final int  SIGN               = -128;
-    private static final byte PAD                = (byte) '=';
-    private static byte [] base64Alphabet       = new byte[BASELENGTH];
-    private static byte [] lookUpBase64Alphabet = new byte[LOOKUPLENGTH];
+    private static final int  BASELENGTH              = 255;
+    private static final int  LOOKUPLENGTH            = 64;
+    private static final int  TWENTYFOURBITGROUP      = 24;
+    private static final int  EIGHTBIT                = 8;
+    private static final int  SIXTEENBIT              = 16;
+    private static final int  FOURBYTE                = 4;
+    private static final int  SIGN                    = -128;
+    private static final byte PAD                     = (byte) '=';
+    private static final byte [] base64Alphabet       = new byte[BASELENGTH];
+    private static final byte [] lookUpBase64Alphabet = new byte[LOOKUPLENGTH];
 
     static
     {

==================================================
DOMWriter.java
index a9ee35d9d4..db173a6ae0 100644
--- a/java/org/apache/catalina/util/CustomObjectInputStream.java
+++ b/java/org/apache/catalina/util/CustomObjectInputStream.java
@@ -40,7 +40,7 @@ public final class CustomObjectInputStream
     /**
      * The class loader we will use to resolve classes.
      */
-    private ClassLoader classLoader = null;
+    private final ClassLoader classLoader;
 
 
     /**

==================================================
ExtensionValidator.java
index 3ab58be30b..b4b2a37716 100644
--- a/java/org/apache/catalina/util/DOMWriter.java
+++ b/java/org/apache/catalina/util/DOMWriter.java
@@ -42,7 +42,7 @@ public class DOMWriter {
    private static  String
    PRINTWRITER_ENCODING = "UTF8";
 
-   private static String MIME2JAVA_ENCODINGS[] =
+   private static final String MIME2JAVA_ENCODINGS[] =
     { "Default", "UTF-8", "US-ASCII", "ISO-8859-1", "ISO-8859-2", "ISO-8859-3", "ISO-8859-4",
       "ISO-8859-5", "ISO-8859-6", "ISO-8859-7", "ISO-8859-8", "ISO-8859-9", "ISO-2022-JP",
       "SHIFT_JIS", "EUC-JP","GB2312", "BIG5", "EUC-KR", "ISO-2022-KR", "KOI8-R", "EBCDIC-CP-US",
@@ -56,10 +56,10 @@ public class DOMWriter {
    private boolean qualifiedNames = true;
 
    /** Print writer. */
-   protected PrintWriter out;
+   protected final PrintWriter out;
 
    /** Canonical output. */
-   protected boolean canonical;
+   protected final boolean canonical;
 
 
    public DOMWriter(String encoding, boolean canonical)

==================================================
InstanceSupport.java
index 68a46a5cdc..24fd352932 100644
--- a/java/org/apache/catalina/util/ExtensionValidator.java
+++ b/java/org/apache/catalina/util/ExtensionValidator.java
@@ -62,12 +62,12 @@ public final class ExtensionValidator {
      * The string resources for this package.
      */
     private static final StringManager sm =
-        StringManager.getManager("org.apache.catalina.util");
+            StringManager.getManager("org.apache.catalina.util");
 
     private static volatile ArrayList<Extension> containerAvailableExtensions =
-        null;
-    private static ArrayList<ManifestResource> containerManifestResources =
-        new ArrayList<ManifestResource>();
+            null;
+    private static final ArrayList<ManifestResource> containerManifestResources =
+            new ArrayList<>();
 
 
     // ----------------------------------------------------- Static Initializer
@@ -136,8 +136,7 @@ public final class ExtensionValidator {
                     throws IOException {
 
         String appName = context.getName();
-        ArrayList<ManifestResource> appManifestResources =
-            new ArrayList<ManifestResource>();
+        ArrayList<ManifestResource> appManifestResources = new ArrayList<>();
         // If the application context is null it does not exist and
         // therefore is not valid
         if (dirContext == null) return false;
@@ -364,7 +363,7 @@ public final class ExtensionValidator {
                 while (values.hasNext()) {
                     Extension ext = values.next();
                     if (availableList == null) {
-                        availableList = new ArrayList<Extension>();
+                        availableList = new ArrayList<>();
                         availableList.add(ext);
                     } else {
                         availableList.add(ext);

==================================================
Introspection.java
index d7dcc825e3..d21cee647a 100644
--- a/java/org/apache/catalina/util/InstanceSupport.java
+++ b/java/org/apache/catalina/util/InstanceSupport.java
@@ -72,7 +72,7 @@ public final class InstanceSupport {
     /**
      * The source component for instance events that we will fire.
      */
-    private Wrapper wrapper = null;
+    private final Wrapper wrapper;
 
 
     // ------------------------------------------------------------- Properties

==================================================
LifecycleBase.java
index ffbcc82584..1f096bbcdf 100644
--- a/java/org/apache/catalina/util/Introspection.java
+++ b/java/org/apache/catalina/util/Introspection.java
@@ -34,7 +34,7 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public class Introspection {
 
-    private static StringManager sm =
+    private static final StringManager sm =
             StringManager.getManager("org.apache.catalina.util");
 
 

==================================================
LifecycleMBeanBase.java
index 663aa1f388..c06a0009c7 100644
--- a/java/org/apache/catalina/util/LifecycleBase.java
+++ b/java/org/apache/catalina/util/LifecycleBase.java
@@ -34,9 +34,9 @@ import org.apache.tomcat.util.res.StringManager;
  */
 public abstract class LifecycleBase implements Lifecycle {
 
-    private static Log log = LogFactory.getLog(LifecycleBase.class);
+    private static final Log log = LogFactory.getLog(LifecycleBase.class);
 
-    private static StringManager sm =
+    private static final StringManager sm =
         StringManager.getManager("org.apache.catalina.util");
 
 
@@ -44,7 +44,7 @@ public abstract class LifecycleBase implements Lifecycle {
      * Used to handle firing lifecycle events.
      * TODO: Consider merging LifecycleSupport into this class.
      */
-    private LifecycleSupport lifecycle = new LifecycleSupport(this);
+    private final LifecycleSupport lifecycle = new LifecycleSupport(this);
 
 
     /**

==================================================
LifecycleSupport.java
index cf61c6d985..7759f82de6 100644
--- a/java/org/apache/catalina/util/LifecycleMBeanBase.java
+++ b/java/org/apache/catalina/util/LifecycleMBeanBase.java
@@ -34,9 +34,9 @@ import org.apache.tomcat.util.res.StringManager;
 public abstract class LifecycleMBeanBase extends LifecycleBase
         implements JmxEnabled {
 
-    private static Log log = LogFactory.getLog(LifecycleMBeanBase.class);
+    private static final Log log = LogFactory.getLog(LifecycleMBeanBase.class);
 
-    private static StringManager sm =
+    private static final StringManager sm =
         StringManager.getManager("org.apache.catalina.util");
 
 

==================================================
MIME2Java.java
index 47f2323aac..313450203a 100644
--- a/java/org/apache/catalina/util/LifecycleSupport.java
+++ b/java/org/apache/catalina/util/LifecycleSupport.java
@@ -59,7 +59,7 @@ public final class LifecycleSupport {
     /**
      * The source component for lifecycle events that we will fire.
      */
-    private Lifecycle lifecycle = null;
+    private final Lifecycle lifecycle;
 
 
     /**

==================================================
ManifestResource.java
index c47c4778c8..a38130e840 100644
--- a/java/org/apache/catalina/util/MIME2Java.java
+++ b/java/org/apache/catalina/util/MIME2Java.java
@@ -472,11 +472,11 @@ import java.util.Locale;
  */
 public class MIME2Java {
 
-    private static Hashtable<String,String> s_enchash;
-    private static Hashtable<String,String> s_revhash;
+    private static final Hashtable<String,String> s_enchash;
+    private static final Hashtable<String,String> s_revhash;
 
     static {
-        s_enchash = new Hashtable<String,String>();
+        s_enchash = new Hashtable<>();
         //    <preferred MIME name>, <Java encoding name>
         s_enchash.put("UTF-8", "UTF8");
         s_enchash.put("US-ASCII",        "8859_1");    // ?
@@ -520,7 +520,7 @@ public class MIME2Java {
                                                 // j:CNS11643 -> EUC-TW?
                                                 // ISO-2022-CN? ISO-2022-CN-EXT?
 
-        s_revhash = new Hashtable<String,String>();
+        s_revhash = new Hashtable<>();
         //    <Java encoding name>, <preferred MIME name>
         s_revhash.put("UTF8", "UTF-8");
         //s_revhash.put("8859_1", "US-ASCII");    // ?

==================================================
SchemaResolver.java
index 55934d33ca..daaa9381f9 100644
--- a/java/org/apache/catalina/util/ManifestResource.java
+++ b/java/org/apache/catalina/util/ManifestResource.java
@@ -42,8 +42,8 @@ public class ManifestResource {
     private ArrayList<Extension> availableExtensions = null;
     private ArrayList<Extension> requiredExtensions = null;
 
-    private String resourceName = null;
-    private int resourceType = -1;
+    private final String resourceName;
+    private final int resourceType;
 
     public ManifestResource(String resourceName, Manifest manifest,
                             int resourceType) {
@@ -173,7 +173,7 @@ public class ManifestResource {
         if (names == null)
             return null;
 
-        ArrayList<Extension> extensionList = new ArrayList<Extension>();
+        ArrayList<Extension> extensionList = new ArrayList<>();
         names += " ";
 
         while (true) {
@@ -220,7 +220,7 @@ public class ManifestResource {
         if (name == null)
             return null;
 
-        ArrayList<Extension> extensionList = new ArrayList<Extension>();
+        ArrayList<Extension> extensionList = new ArrayList<>();
 
         Extension extension = new Extension();
         extension.setExtensionName(name);

==================================================
ServerInfo.java
index 2134355fa9..3351fa4735 100644
--- a/java/org/apache/catalina/util/SchemaResolver.java
+++ b/java/org/apache/catalina/util/SchemaResolver.java
@@ -36,21 +36,20 @@ public class SchemaResolver implements EntityResolver {
     /**
      * The digester instance for which this class is the entity resolver.
      */
-    protected Digester digester;
+    protected final Digester digester;
 
 
     /**
      * The URLs of dtds and schemas that have been registered, keyed by the
      * public identifier that corresponds.
      */
-    protected HashMap<String,String> entityValidator =
-        new HashMap<String,String>();
+    protected final HashMap<String,String> entityValidator = new HashMap<>();
 
 
     /**
      * Extension to make the difference between DTD and Schema.
      */
-    protected String schemaExtension = "xsd";
+    protected final String schemaExtension = "xsd";
 
 
     /**

==================================================
SessionIdGenerator.java
index 2f3d4d8c48..df86dc671b 100644
--- a/java/org/apache/catalina/util/ServerInfo.java
+++ b/java/org/apache/catalina/util/ServerInfo.java
@@ -42,39 +42,46 @@ public class ServerInfo {
     /**
      * The server information String with which we identify ourselves.
      */
-    private static String serverInfo = null;
+    private static final String serverInfo;
 
     /**
      * The server built String.
      */
-    private static String serverBuilt = null;
+    private static final String serverBuilt;
 
     /**
      * The server's version number String.
      */
-    private static String serverNumber = null;
+    private static final String serverNumber;
 
     static {
 
+        String info = null;
+        String built = null;
+        String number = null;
+
         try {
             InputStream is = ServerInfo.class.getResourceAsStream
                 ("/org/apache/catalina/util/ServerInfo.properties");
             Properties props = new Properties();
             props.load(is);
             is.close();
-            serverInfo = props.getProperty("server.info");
-            serverBuilt = props.getProperty("server.built");
-            serverNumber = props.getProperty("server.number");
+            info = props.getProperty("server.info");
+            built = props.getProperty("server.built");
+            number = props.getProperty("server.number");
         } catch (Throwable t) {
             ExceptionUtils.handleThrowable(t);
         }
-        if (serverInfo == null)
-            serverInfo = "Apache Tomcat 7.0.x-dev";
-        if (serverBuilt == null)
-            serverBuilt = "unknown";
-        if (serverNumber == null)
-            serverNumber = "7.0.x";
-
+        if (info == null)
+            info = "Apache Tomcat 7.0.x-dev";
+        if (built == null)
+            built = "unknown";
+        if (number == null)
+            number = "7.0.x";
+
+        serverInfo = info;
+        serverBuilt = built;
+        serverNumber = number;
     }
 
 

==================================================
Strftime.java
index 22a470278b..8c11df1137 100644
--- a/java/org/apache/catalina/util/SessionIdGenerator.java
+++ b/java/org/apache/catalina/util/SessionIdGenerator.java
@@ -28,10 +28,10 @@ import org.apache.tomcat.util.res.StringManager;
 
 public class SessionIdGenerator {
 
-    private static Log log = LogFactory.getLog(SessionIdGenerator.class);
+    private static final Log log = LogFactory.getLog(SessionIdGenerator.class);
 
 
-    private static StringManager sm =
+    private static final StringManager sm =
         StringManager.getManager("org.apache.catalina.util");
 
 
@@ -42,8 +42,7 @@ public class SessionIdGenerator {
      * designed this way since random number generators use a sync to make them
      * thread-safe and the sync makes using a a single object slow(er).
      */
-    private Queue<SecureRandom> randoms =
-        new ConcurrentLinkedQueue<SecureRandom>();
+    private final Queue<SecureRandom> randoms = new ConcurrentLinkedQueue<>();
 
 
     /**

==================================================
URLEncoder.java
index f5acb6cd0e..55f9a7ce9c 100644
--- a/java/org/apache/catalina/util/Strftime.java
+++ b/java/org/apache/catalina/util/Strftime.java
@@ -43,8 +43,8 @@ import java.util.TimeZone;
  * @version $Id$
  */
 public class Strftime {
-    protected static Properties translate;
-    protected SimpleDateFormat simpleDateFormat;
+    protected static final Properties translate;
+    protected final SimpleDateFormat simpleDateFormat;
 
     /**
      * Initialize our pattern translation

==================================================
XMLWriter.java
index 304b28b809..dfa7833a58 100644
--- a/java/org/apache/catalina/util/URLEncoder.java
+++ b/java/org/apache/catalina/util/URLEncoder.java
@@ -39,7 +39,7 @@ public class URLEncoder {
      'A', 'B', 'C', 'D', 'E', 'F'};
 
     //Array containing the safe characters set.
-    protected BitSet safeCharacters = new BitSet(256);
+    protected final BitSet safeCharacters = new BitSet(256);
 
     public URLEncoder() {
         for (char i = 'a'; i <= 'z'; i++) {

==================================================
