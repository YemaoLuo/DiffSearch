7be73e4ea17e68bb455177c9a1c1f32844c0feb7
==================================================
Missing @Override markers
==================================================
Mark Emlyn
==================================================
Sat Aug 6 20:19:29 2011 +0000
==================================================
MessageListener.java
Missing @Override markers

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1154575 13f79535-47bb-0310-9956-ffa450edef68



==================================================
MultiPointSender.java
index 02adf5a329..d57968ecdd 100644
--- a/java/org/apache/catalina/tribes/MessageListener.java
+++ b/java/org/apache/catalina/tribes/MessageListener.java
@@ -36,8 +36,10 @@ public interface MessageListener {
     
     public boolean accept(ChannelMessage msg);
     
+    @Override
     public boolean equals(Object listener);
     
+    @Override
     public int hashCode();
 
 }

==================================================
IntrospectionUtils.java
index fe56a5099d..cbddf6fe60 100644
--- a/java/org/apache/catalina/tribes/transport/MultiPointSender.java
+++ b/java/org/apache/catalina/tribes/transport/MultiPointSender.java
@@ -29,8 +29,6 @@ import org.apache.catalina.tribes.Member;
 public interface MultiPointSender extends DataSender
 {
     public void sendMessage(Member[] destination, ChannelMessage data) throws ChannelException;
-    public void setRxBufSize(int size);
-    public void setTxBufSize(int size);
     public void setMaxRetryAttempts(int attempts);
     public void setDirectBuffer(boolean directBuf);
     public void add(Member member);

==================================================
LocalVariableTable.java
index 1c4b313452..07923fa286 100644
--- a/java/org/apache/tomcat/util/IntrospectionUtils.java
+++ b/java/org/apache/tomcat/util/IntrospectionUtils.java
@@ -594,6 +594,7 @@ public final class IntrospectionUtils {
         final String lext = ext;
         if (dir.isDirectory()) {
             names = dir.list(new FilenameFilter() {
+                @Override
                 public boolean accept(File d, String name) {
                     if (name.endsWith(lext)) {
                         return true;

==================================================
RuleSetBase.java
index 3ccedef1c7..67243df7b8 100644
--- a/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTable.java
+++ b/java/org/apache/tomcat/util/bcel/classfile/LocalVariableTable.java
@@ -96,6 +96,7 @@ public class LocalVariableTable extends Attribute {
      * @deprecated since 5.2 because multiple variables can share the
      *             same slot, use getLocalVariable(int index, int pc) instead.
      */
+    @java.lang.Deprecated
     public final LocalVariable getLocalVariable( int index ) {
         for (int i = 0; i < local_variable_table_length; i++) {
             if (local_variable_table[i].getIndex() == index) {

==================================================
RulesBase.java
index c8adaab070..93ebffd1c4 100644
--- a/java/org/apache/tomcat/util/digester/RuleSetBase.java
+++ b/java/org/apache/tomcat/util/digester/RuleSetBase.java
@@ -45,6 +45,7 @@ public abstract class RuleSetBase implements RuleSet {
      * Return the namespace URI that will be applied to all Rule instances
      * created from this RuleSet.
      */
+    @Override
     public String getNamespaceURI() {
 
         return (this.namespaceURI);
@@ -64,6 +65,7 @@ public abstract class RuleSetBase implements RuleSet {
      * @param digester Digester instance to which the new Rule instances
      *  should be added.
      */
+    @Override
     public abstract void addRuleInstances(Digester digester);
 
 

==================================================
WithDefaultsRulesWrapper.java
index e04c2846ed..5cc047b11c 100644
--- a/java/org/apache/tomcat/util/digester/RulesBase.java
+++ b/java/org/apache/tomcat/util/digester/RulesBase.java
@@ -85,6 +85,7 @@ public class RulesBase implements Rules {
      * Return the Digester instance with which this Rules instance is
      * associated.
      */
+    @Override
     public Digester getDigester() {
 
         return (this.digester);
@@ -97,6 +98,7 @@ public class RulesBase implements Rules {
      *
      * @param digester The newly associated Digester instance
      */
+    @Override
     public void setDigester(Digester digester) {
 
         this.digester = digester;
@@ -113,6 +115,7 @@ public class RulesBase implements Rules {
      * Return the namespace URI that will be applied to all subsequently
      * added <code>Rule</code> objects.
      */
+    @Override
     public String getNamespaceURI() {
 
         return (this.namespaceURI);
@@ -128,6 +131,7 @@ public class RulesBase implements Rules {
      *  subsequently added rules, or <code>null</code> for matching
      *  regardless of the current namespace URI
      */
+    @Override
     public void setNamespaceURI(String namespaceURI) {
 
         this.namespaceURI = namespaceURI;
@@ -144,6 +148,7 @@ public class RulesBase implements Rules {
      * @param pattern Nesting pattern to be matched for this Rule
      * @param rule Rule instance to be registered
      */
+    @Override
     public void add(String pattern, Rule rule) {
         // to help users who accidently add '/' to the end of their patterns
         int patternLength = pattern.length();
@@ -172,6 +177,7 @@ public class RulesBase implements Rules {
     /**
      * Clear all existing Rule instance registrations.
      */
+    @Override
     public void clear() {
 
         cache.clear();
@@ -191,6 +197,7 @@ public class RulesBase implements Rules {
      *  or <code>null</code> to match regardless of namespace URI
      * @param pattern Nesting pattern to be matched
      */
+    @Override
     public List<Rule> match(String namespaceURI, String pattern) {
 
         // List rulesList = (List) this.cache.get(pattern);
@@ -228,6 +235,7 @@ public class RulesBase implements Rules {
      * in the order originally registered through the <code>add()</code>
      * method.
      */
+    @Override
     public List<Rule> rules() {
 
         return (this.rules);

==================================================
FileUploadBase.java
index 95cd123227..f42d14c41e 100644
--- a/java/org/apache/tomcat/util/digester/WithDefaultsRulesWrapper.java
+++ b/java/org/apache/tomcat/util/digester/WithDefaultsRulesWrapper.java
@@ -75,11 +75,13 @@ public class WithDefaultsRulesWrapper implements Rules {
     // --------------------------------------------------------- Properties
     
     /** Gets digester using these Rules */
+    @Override
     public Digester getDigester() {
         return wrappedRules.getDigester();
     }
     
     /** Sets digester using these Rules */
+    @Override
     public void setDigester(Digester digester) {
         wrappedRules.setDigester(digester);
         Iterator<Rule> it = defaultRules.iterator();
@@ -90,11 +92,13 @@ public class WithDefaultsRulesWrapper implements Rules {
     }
     
     /** Gets namespace to apply to Rule's added */
+    @Override
     public String getNamespaceURI() {
         return wrappedRules.getNamespaceURI();
     }
     
     /** Sets namespace to apply to Rule's added subsequently */
+    @Override
     public void setNamespaceURI(String namespaceURI) {
         wrappedRules.setNamespaceURI(namespaceURI);
     }
@@ -111,6 +115,7 @@ public class WithDefaultsRulesWrapper implements Rules {
      * If wrapped implementation returns any matches return those.
      * Otherwise, return default matches.
      */
+    @Override
     public List<Rule> match(String namespaceURI, String pattern) {
         List<Rule> matches = wrappedRules.match(namespaceURI, pattern);
         if (matches ==  null || matches.isEmpty()) {
@@ -137,11 +142,13 @@ public class WithDefaultsRulesWrapper implements Rules {
     }
     
     /** Gets all rules */
+    @Override
     public List<Rule> rules() {
         return allRules;
     }
     
     /** Clears all Rule's */
+    @Override
     public void clear() {
         wrappedRules.clear();
         allRules.clear();
@@ -152,6 +159,7 @@ public class WithDefaultsRulesWrapper implements Rules {
      * Adds a Rule to be fired on given pattern.
      * Pattern matching is delegated to wrapped implementation.
      */
+    @Override
     public void add(String pattern, Rule rule) {
         wrappedRules.add(pattern, rule);
         allRules.add(rule);

==================================================
MultipartStream.java
index 89945affea..9bd70f3c6d 100644
--- a/java/org/apache/tomcat/util/http/fileupload/FileUploadBase.java
+++ b/java/org/apache/tomcat/util/http/fileupload/FileUploadBase.java
@@ -639,6 +639,7 @@ public abstract class FileUploadBase {
              * Returns the items content type, or null.
              * @return Content type, if known, or null.
              */
+            @Override
             public String getContentType() {
                 return contentType;
             }
@@ -647,6 +648,7 @@ public abstract class FileUploadBase {
              * Returns the items field name.
              * @return Field name.
              */
+            @Override
             public String getFieldName() {
                 return fieldName;
             }
@@ -659,6 +661,7 @@ public abstract class FileUploadBase {
              *   use the file name anyways, catch the exception and use
              *   InvalidFileNameException#getName().
              */
+            @Override
             public String getName() {
                 return Streams.checkFileName(name);
             }
@@ -668,6 +671,7 @@ public abstract class FileUploadBase {
              * @return True, if the item is a form field,
              *   otherwise false.
              */
+            @Override
             public boolean isFormField() {
                 return formField;
             }
@@ -678,6 +682,7 @@ public abstract class FileUploadBase {
              * @return Opened input stream.
              * @throws IOException An I/O error occurred.
              */
+            @Override
             public InputStream openStream() throws IOException {
                 if (opened) {
                     throw new IllegalStateException(
@@ -701,6 +706,7 @@ public abstract class FileUploadBase {
              * Returns the file item headers.
              * @return The items header object
              */
+            @Override
             public FileItemHeaders getHeaders() {
                 return headers;
             }
@@ -709,6 +715,7 @@ public abstract class FileUploadBase {
              * Sets the file item headers.
              * @param pHeaders The items header object
              */
+            @Override
             public void setHeaders(FileItemHeaders pHeaders) {
                 headers = pHeaders;
             }
@@ -915,6 +922,7 @@ public abstract class FileUploadBase {
          * @return True, if one or more additional file items
          *   are available, otherwise false.
          */
+        @Override
         public boolean hasNext() throws FileUploadException, IOException {
             if (eof) {
                 return false;
@@ -935,6 +943,7 @@ public abstract class FileUploadBase {
          * @return FileItemStream instance, which provides
          *   access to the next file item.
          */
+        @Override
         public FileItemStream next() throws FileUploadException, IOException {
             if (eof  ||  (!itemValid && !hasNext())) {
                 throw new NoSuchElementException();

==================================================
DiskFileItem.java
index 688524e08b..62da3d84a1 100644
--- a/java/org/apache/tomcat/util/http/fileupload/MultipartStream.java
+++ b/java/org/apache/tomcat/util/http/fileupload/MultipartStream.java
@@ -960,6 +960,7 @@ public class MultipartStream {
          * Returns, whether the stream is closed.
          * @return True, if the stream is closed, otherwise false.
          */
+        @Override
         public boolean isClosed() {
             return closed;
         }

==================================================
DiskFileItemFactory.java
index 3f87e1a611..a3fa87dbfd 100644
--- a/java/org/apache/tomcat/util/http/fileupload/disk/DiskFileItem.java
+++ b/java/org/apache/tomcat/util/http/fileupload/disk/DiskFileItem.java
@@ -229,6 +229,7 @@ public class DiskFileItem
      *
      * @throws IOException if an error occurs.
      */
+    @Override
     public InputStream getInputStream()
         throws IOException {
         if (!isInMemory()) {
@@ -249,6 +250,7 @@ public class DiskFileItem
      * @return The content type passed by the agent or <code>null</code> if
      *         not defined.
      */
+    @Override
     public String getContentType() {
         return contentType;
     }
@@ -279,6 +281,7 @@ public class DiskFileItem
      *   a security attack. If you intend to use the file name anyways, catch
      *   the exception and use InvalidFileNameException#getName().
      */
+    @Override
     public String getName() {
         return Streams.checkFileName(fileName);
     }
@@ -294,6 +297,7 @@ public class DiskFileItem
      * @return <code>true</code> if the file contents will be read
      *         from memory; <code>false</code> otherwise.
      */
+    @Override
     public boolean isInMemory() {
         if (cachedContent != null) {
             return true;
@@ -307,6 +311,7 @@ public class DiskFileItem
      *
      * @return The size of the file, in bytes.
      */
+    @Override
     public long getSize() {
         if (size >= 0) {
             return size;
@@ -327,6 +332,7 @@ public class DiskFileItem
      *
      * @return The contents of the file as an array of bytes.
      */
+    @Override
     public byte[] get() {
         if (isInMemory()) {
             if (cachedContent == null) {
@@ -369,6 +375,7 @@ public class DiskFileItem
      * @throws UnsupportedEncodingException if the requested character
      *                                      encoding is not available.
      */
+    @Override
     public String getString(final String charset)
         throws UnsupportedEncodingException {
         return new String(get(), charset);
@@ -384,6 +391,7 @@ public class DiskFileItem
      *
      * TODO Consider making this method throw UnsupportedEncodingException.
      */
+    @Override
     public String getString() {
         byte[] rawdata = get();
         String charset = getCharSet();
@@ -418,6 +426,7 @@ public class DiskFileItem
      *
      * @throws Exception if an error occurs.
      */
+    @Override
     public void write(File file) throws Exception {
         if (isInMemory()) {
             FileOutputStream fout = null;
@@ -484,6 +493,7 @@ public class DiskFileItem
      * collected, this method can be used to ensure that this is done at an
      * earlier time, thus preserving system resources.
      */
+    @Override
     public void delete() {
         cachedContent = null;
         File outputFile = getStoreLocation();
@@ -502,6 +512,7 @@ public class DiskFileItem
      * @see #setFieldName(java.lang.String)
      *
      */
+    @Override
     public String getFieldName() {
         return fieldName;
     }
@@ -515,6 +526,7 @@ public class DiskFileItem
      * @see #getFieldName()
      *
      */
+    @Override
     public void setFieldName(String fieldName) {
         this.fieldName = fieldName;
     }
@@ -530,6 +542,7 @@ public class DiskFileItem
      * @see #setFormField(boolean)
      *
      */
+    @Override
     public boolean isFormField() {
         return isFormField;
     }
@@ -545,6 +558,7 @@ public class DiskFileItem
      * @see #isFormField()
      *
      */
+    @Override
     public void setFormField(boolean state) {
         isFormField = state;
     }
@@ -559,6 +573,7 @@ public class DiskFileItem
      *
      * @throws IOException if an error occurs.
      */
+    @Override
     public OutputStream getOutputStream()
         throws IOException {
         if (dfos == null) {
@@ -729,6 +744,7 @@ public class DiskFileItem
      * Returns the file item headers.
      * @return The file items headers.
      */
+    @Override
     public FileItemHeaders getHeaders() {
         return headers;
     }
@@ -737,6 +753,7 @@ public class DiskFileItem
      * Sets the file item headers.
      * @param pHeaders The file items headers.
      */
+    @Override
     public void setHeaders(FileItemHeaders pHeaders) {
         headers = pHeaders;
     }

==================================================
ServletRequestContext.java
index 0e236f2247..99b80078f1 100644
--- a/java/org/apache/tomcat/util/http/fileupload/disk/DiskFileItemFactory.java
+++ b/java/org/apache/tomcat/util/http/fileupload/disk/DiskFileItemFactory.java
@@ -195,6 +195,7 @@ public class DiskFileItemFactory implements FileItemFactory {
      *
      * @return The newly created file item.
      */
+    @Override
     public FileItem createItem(String fieldName, String contentType,
             boolean isFormField, String fileName) {
         DiskFileItem result = new DiskFileItem(fieldName, contentType,

==================================================
FileItemHeadersImpl.java
index e97ef6d0cf..ffd511061a 100644
--- a/java/org/apache/tomcat/util/http/fileupload/servlet/ServletRequestContext.java
+++ b/java/org/apache/tomcat/util/http/fileupload/servlet/ServletRequestContext.java
@@ -63,6 +63,7 @@ public class ServletRequestContext implements RequestContext {
      *
      * @return The character encoding for the request.
      */
+    @Override
     public String getCharacterEncoding() {
         return request.getCharacterEncoding();
     }
@@ -72,6 +73,7 @@ public class ServletRequestContext implements RequestContext {
      *
      * @return The content type of the request.
      */
+    @Override
     public String getContentType() {
         return request.getContentType();
     }
@@ -81,6 +83,7 @@ public class ServletRequestContext implements RequestContext {
      *
      * @return The content length of the request.
      */
+    @Override
     public int getContentLength() {
         return request.getContentLength();
     }
@@ -92,6 +95,7 @@ public class ServletRequestContext implements RequestContext {
      *
      * @throws IOException if a problem occurs.
      */
+    @Override
     public InputStream getInputStream() throws IOException {
         return request.getInputStream();
     }

==================================================
LimitedInputStream.java
index 72c8563b73..2e710cee6e 100644
--- a/java/org/apache/tomcat/util/http/fileupload/util/FileItemHeadersImpl.java
+++ b/java/org/apache/tomcat/util/http/fileupload/util/FileItemHeadersImpl.java
@@ -51,6 +51,7 @@ public class FileItemHeadersImpl implements FileItemHeaders, Serializable {
      */
     private final List<String> headerNameList = new ArrayList<String>();
 
+    @Override
     public String getHeader(String name) {
         String nameLower = name.toLowerCase(Locale.ENGLISH);
         List<String> headerValueList = headerNameToValueListMap.get(nameLower);
@@ -60,10 +61,12 @@ public class FileItemHeadersImpl implements FileItemHeaders, Serializable {
         return headerValueList.get(0);
     }
 
+    @Override
     public Iterator<String> getHeaderNames() {
         return headerNameList.iterator();
     }
 
+    @Override
     public Iterator<String> getHeaders(String name) {
         String nameLower = name.toLowerCase(Locale.ENGLISH);
         List<String> headerValueList = headerNameToValueListMap.get(nameLower);

==================================================
FixedNotificationFilter.java
index 0f4a40eca6..be6046a4c0 100644
--- a/java/org/apache/tomcat/util/http/fileupload/util/LimitedInputStream.java
+++ b/java/org/apache/tomcat/util/http/fileupload/util/LimitedInputStream.java
@@ -137,6 +137,7 @@ public abstract class LimitedInputStream
      * @return True, if the stream is closed, otherwise false.
      * @throws IOException An I/O error occurred.
      */
+    @Override
     public boolean isClosed() throws IOException {
         return closed;
     }

==================================================
Registry.java
index 882c85b71a..0757356872 100644
--- a/java/org/apache/tomcat/util/modeler/FixedNotificationFilter.java
+++ b/java/org/apache/tomcat/util/modeler/FixedNotificationFilter.java
@@ -79,6 +79,7 @@ public class FixedNotificationFilter implements NotificationFilter {
      *     includes the name of the attribute in this notification</li>
      * </ul>
      */
+    @Override
     public boolean isNotificationEnabled(Notification notification) {
 
         if (notification == null)

==================================================
MbeansSource.java
index b0d485670c..2af6c2d917 100644
--- a/java/org/apache/tomcat/util/modeler/Registry.java
+++ b/java/org/apache/tomcat/util/modeler/Registry.java
@@ -204,6 +204,7 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
      * 
      * @since 1.1
      */ 
+    @Override
     public void stop() {
         descriptorsByClass = new HashMap<String,ManagedBean>();
         descriptors = new HashMap<String,ManagedBean>();
@@ -225,6 +226,7 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
      * 
      * @since 1.1
      */ 
+    @Override
     public List<ObjectName> loadMBeans( Object source, ClassLoader cl )
             throws Exception
     {
@@ -242,6 +244,7 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
      * 
      * @param source
      */ 
+    @Override
     public void loadMetadata(Object source ) throws Exception {
         loadDescriptors( null, source, null );
     }
@@ -275,6 +278,7 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
      *
      * @since 1.1
      */ 
+    @Override
     public void registerComponent(Object bean, String oname, String type)
            throws Exception
     {
@@ -288,6 +292,7 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
      * 
      * @since 1.1
      */ 
+    @Override
     public void unregisterComponent( String oname ) {
         try {
             unregisterComponent(new ObjectName(oname));
@@ -306,6 +311,7 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
      * @throws Exception
      * @since 1.1
      */
+    @Override
     public void invoke(List<ObjectName> mbeans, String operation,
             boolean failFirst ) throws Exception {
         if( mbeans==null ) {
@@ -341,6 +347,7 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
      * @return  An unique id for the domain:name combination
      * @since 1.1
      */
+    @Override
     public synchronized int getId( String domain, String name) {
         if( domain==null) {
             domain="";
@@ -858,6 +865,7 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
 
     // -------------------- Registration  --------------------
     
+    @Override
     public ObjectName preRegister(MBeanServer server,
                                   ObjectName name) throws Exception 
     {
@@ -865,12 +873,15 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
         return name;
     }
 
+    @Override
     public void postRegister(Boolean registrationDone) {
     }
 
+    @Override
     public void preDeregister() throws Exception {
     }
 
+    @Override
     public void postDeregister() {
     }
 

==================================================
