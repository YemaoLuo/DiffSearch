48502b7c8c4d542c48cec5e5d5def863a7afc31f
==================================================
- Use the extensions specified by the configuration (and ignore if there are no associated transformations).
==================================================
Remy Maucherat
==================================================
Fri Nov 28 20:33:20 2014 +0000
==================================================
Constants.java
- Use the extensions specified by the configuration (and ignore if there are no associated transformations).
- Add an origin header on the client.
- Add path params as params too.
- Use the case insensitive map for all headers.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1642360 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TransformationFactory.java
index a3e18abd42..23848942cc 100644
--- a/java/org/apache/tomcat/websocket/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/LocalStrings.properties
@@ -35,8 +35,6 @@ perMessageDeflate.duplicateParameter=Duplicate definition of the [{0}] extension
 perMessageDeflate.invalidWindowSize=An invalid windows of [{1}] size was specified for [{0}]. Valid values are whole numbers from 8 to 15 inclusive.
 perMessageDeflate.unknownParameter=An unknown extension parameter [{0}] was defined
 
-transformerFactory.unsupportedExtension=The extension [{0}] is not supported
-
 util.notToken=An illegal extension parameter was specified with name [{0}] and value [{1}]
 util.invalidMessageHandler=The message handler provided does not have an onMessage(Object) method
 util.invalidType=Unable to coerce value [{0}] to type [{1}]. That type is not supported.

==================================================
WsWebSocketContainer.java
index 5d5dda8585..43d63804bc 100644
--- a/java/org/apache/tomcat/websocket/TransformationFactory.java
+++ b/java/org/apache/tomcat/websocket/TransformationFactory.java
@@ -20,12 +20,8 @@ import java.util.List;
 
 import javax.websocket.Extension;
 
-import org.apache.tomcat.util.res.StringManager;
-
 public class TransformationFactory {
 
-    private static final StringManager sm = StringManager.getManager(Constants.PACKAGE_NAME);
-
     private static final TransformationFactory factory = new TransformationFactory();
 
     private TransformationFactory() {
@@ -41,7 +37,6 @@ public class TransformationFactory {
         if (PerMessageDeflate.NAME.equals(name)) {
             return PerMessageDeflate.negotiate(preferences, isServer);
         }
-        throw new IllegalArgumentException(
-                sm.getString("transformerFactory.unsupportedExtension", name));
+        return null;
     }
 }

==================================================
UpgradeUtil.java
index 53f0c74c3a..56a8ebb526 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -218,7 +218,7 @@ public class WsWebSocketContainer
                     sm.getString("wsWebSocketContainer.pathNoHost"));
         }
         int port = path.getPort();
-        Map<String,List<String>> reqHeaders = createRequestHeaders(host, port,
+        Map<String,List<String>> reqHeaders = createRequestHeaders(path, host, port,
                 clientEndpointConfiguration.getPreferredSubprotocols(),
                 clientEndpointConfiguration.getExtensions());
         clientEndpointConfiguration.getConfigurator().
@@ -430,7 +430,7 @@ public class WsWebSocketContainer
         return result;
     }
 
-    private Map<String,List<String>> createRequestHeaders(String host,
+    private Map<String,List<String>> createRequestHeaders(URI path, String host,
             int port, List<String> subProtocols, List<Extension> extensions) {
 
         Map<String,List<String>> headers = new HashMap<>();
@@ -476,6 +476,11 @@ public class WsWebSocketContainer
                     generateExtensionHeaders(extensions));
         }
 
+        // Origin header
+        List<String> originValues = new ArrayList<>(1);
+        originValues.add(path.toString());
+        headers.put(Constants.ORIGIN_HEADER_NAME, originValues);
+
         return headers;
     }
 
@@ -571,7 +576,7 @@ public class WsWebSocketContainer
             ExecutionException, DeploymentException, EOFException,
             TimeoutException {
 
-        Map<String,List<String>> headers = new HashMap<>();
+        Map<String,List<String>> headers = new CaseInsensitiveKeyMap<>();
 
         boolean readStatus = false;
         boolean readHeaders = false;
@@ -606,7 +611,7 @@ public class WsWebSocketContainer
                 }
             }
         }
-
+System.out.println("Headers: " + headers);
         return new WsHandshakeResponse(headers);
     }
 

==================================================
WsHandshakeRequest.java
index ee333319b4..fbb7324dce 100644
--- a/java/org/apache/tomcat/websocket/server/UpgradeUtil.java
+++ b/java/org/apache/tomcat/websocket/server/UpgradeUtil.java
@@ -112,7 +112,7 @@ public class UpgradeUtil {
 
 
         // Origin check
-        String origin = req.getHeader("Origin");
+        String origin = req.getHeader(Constants.ORIGIN_HEADER_NAME);
         if (!sec.getConfigurator().checkOrigin(origin)) {
             resp.sendError(HttpServletResponse.SC_FORBIDDEN);
             return;
@@ -134,8 +134,16 @@ public class UpgradeUtil {
         // Negotiation phase 1. By default this simply filters out the
         // extensions that the server does not support but applications could
         // use a custom configurator to do more than this.
+        List<Extension> installedExtensions = null;
+        if (sec.getExtensions().size() == 0) {
+            installedExtensions = Constants.INSTALLED_EXTENSIONS;
+        } else {
+            installedExtensions = new ArrayList<>();
+            installedExtensions.addAll(sec.getExtensions());
+            installedExtensions.addAll(Constants.INSTALLED_EXTENSIONS);
+        }
         List<Extension> negotiatedExtensionsPhase1 = sec.getConfigurator().getNegotiatedExtensions(
-                Constants.INSTALLED_EXTENSIONS, extensionsRequested);
+                installedExtensions, extensionsRequested);
 
         // Negotiation phase 2. Create the Transformations that will be applied
         // to this connection. Note than an extension may be dropped at this
@@ -191,7 +199,7 @@ public class UpgradeUtil {
             resp.setHeader(Constants.WS_EXTENSIONS_HEADER_NAME, responseHeaderExtensions.toString());
         }
 
-        WsHandshakeRequest wsRequest = new WsHandshakeRequest(req);
+        WsHandshakeRequest wsRequest = new WsHandshakeRequest(req, pathParams);
         WsHandshakeResponse wsResponse = new WsHandshakeResponse();
         WsPerSessionServerEndpointConfig perSessionServerEndpointConfig =
                 new WsPerSessionServerEndpointConfig(sec);

==================================================
