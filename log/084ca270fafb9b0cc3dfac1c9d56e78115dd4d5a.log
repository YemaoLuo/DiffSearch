084ca270fafb9b0cc3dfac1c9d56e78115dd4d5a
==================================================
Correct a regression in the fix for BZ 65454
==================================================
Mark Thomas
==================================================
Wed Feb 2 19:34:39 2022 +0000
==================================================
WebappClassLoaderBase.java
Correct a regression in the fix for BZ 65454

Additional updates for new package for ThreadPoolExecutor
https://bz.apache.org/bugzilla/show_bug.cgi?id=65454


==================================================
AbstractEndpoint.java
index 8649c5c0d6..85710d8593 100644
--- a/java/org/apache/catalina/loader/WebappClassLoaderBase.java
+++ b/java/org/apache/catalina/loader/WebappClassLoaderBase.java
@@ -57,7 +57,6 @@ import java.util.Map.Entry;
 import java.util.NoSuchElementException;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CopyOnWriteArrayList;
-import java.util.concurrent.ThreadPoolExecutor;
 import java.util.jar.Attributes;
 import java.util.jar.Attributes.Name;
 import java.util.jar.Manifest;
@@ -80,6 +79,7 @@ import org.apache.tomcat.util.IntrospectionUtils;
 import org.apache.tomcat.util.compat.JreCompat;
 import org.apache.tomcat.util.res.StringManager;
 import org.apache.tomcat.util.security.PermissionCheck;
+import org.apache.tomcat.util.threads.ThreadPoolExecutor;
 
 /**
  * Specialized web application class loader.
@@ -1871,16 +1871,22 @@ public abstract class WebappClassLoaderBase extends URLClassLoader
                         }
 
                         // "java.util.concurrent" code is in public domain,
-                        // so all implementations are similar
+                        // so all implementations are similar including our
+                        // internal fork.
                         if (target != null && target.getClass().getCanonicalName() != null &&
-                                target.getClass().getCanonicalName().equals(
-                                        "java.util.concurrent.ThreadPoolExecutor.Worker")) {
+                                (target.getClass().getCanonicalName().equals(
+                                        "org.apache.tomcat.util.threads.ThreadPoolExecutor.Worker") ||
+                                        target.getClass().getCanonicalName().equals(
+                                                "java.util.concurrent.ThreadPoolExecutor.Worker"))) {
                             Field executorField = target.getClass().getDeclaredField("this$0");
                             executorField.setAccessible(true);
                             Object executor = executorField.get(target);
                             if (executor instanceof ThreadPoolExecutor) {
                                 ((ThreadPoolExecutor) executor).shutdownNow();
                                 usingExecutor = true;
+                            } else if (executor instanceof java.util.concurrent.ThreadPoolExecutor) {
+                                ((java.util.concurrent.ThreadPoolExecutor) executor).shutdownNow();
+                                usingExecutor = true;
                             }
                         }
                     } catch (SecurityException | NoSuchFieldException | IllegalArgumentException |

==================================================
