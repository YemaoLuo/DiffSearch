e3c54fb114a502bb794dd800dc7154987c8b022d
==================================================
Remove unused variables identified by Eclipse
==================================================
Mark Emlyn
==================================================
Thu Jan 15 14:55:46 2009 +0000
==================================================
SimpleTcpReplicationManager.java
Remove unused variables identified by Eclipse

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@734728 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ConnectorCreateRule.java
index 07cc3fcbe6..d659abe819 100644
--- a/java/org/apache/catalina/ha/session/SimpleTcpReplicationManager.java
+++ b/java/org/apache/catalina/ha/session/SimpleTcpReplicationManager.java
@@ -604,7 +604,7 @@ public class SimpleTcpReplicationManager extends StandardManager implements Clus
                     for ( int i=0; i<size; i++) {
                         String id = oin.readUTF();
                         byte[] data = (byte[])oin.readObject();
-                        Session session = readSession(data,id);
+                        readSession(data,id);
                     }//for
                     stateTransferred=true;
                     break;

==================================================
WebRuleSet.java
index 58f971cd33..936ee46101 100644
--- a/java/org/apache/catalina/startup/ConnectorCreateRule.java
+++ b/java/org/apache/catalina/startup/ConnectorCreateRule.java
@@ -84,7 +84,7 @@ public class ConnectorCreateRule extends Rule {
      *   the element name otherwise
      */
     public void end(String namespace, String name) throws Exception {
-        Object top = digester.pop();
+        digester.pop();
     }
 
 

==================================================
GzipInterceptor.java
index 7323bcd48d..16c1423922 100644
--- a/java/org/apache/catalina/startup/WebRuleSet.java
+++ b/java/org/apache/catalina/startup/WebRuleSet.java
@@ -808,8 +808,8 @@ final class CallMethodMultiRule extends CallMethodRule {
         
         if (multiParams == null) {
             paramValues[multiParamIndex] = null;
-            Object result = IntrospectionUtils.callMethodN(target, methodName,
-                    paramValues, paramTypes);   
+            IntrospectionUtils.callMethodN(target, methodName, paramValues,
+                    paramTypes);   
             return;
         }
         
@@ -822,8 +822,8 @@ final class CallMethodMultiRule extends CallMethodRule {
             } else {
                 paramValues[multiParamIndex] = param;
             }
-            Object result = IntrospectionUtils.callMethodN(target, methodName,
-                    paramValues, paramTypes);   
+            IntrospectionUtils.callMethodN(target, methodName, paramValues,
+                    paramTypes);   
         }
         
     }

==================================================
AjpAprProcessor.java
index 2515d5913f..3dd4129722 100644
--- a/java/org/apache/catalina/tribes/group/interceptors/GzipInterceptor.java
+++ b/java/org/apache/catalina/tribes/group/interceptors/GzipInterceptor.java
@@ -92,7 +92,7 @@ public class GzipInterceptor extends ChannelInterceptorBase {
         byte[] data = new byte[1024];
         Arrays.fill(data,(byte)1);
         byte[] compress = compress(data);
-        byte[] decompress = decompress(compress);
+        decompress(compress);
         System.out.println("Debug test");
         
     }

==================================================
AjpProcessor.java
index baff66381e..5e977127fa 100644
--- a/java/org/apache/coyote/ajp/AjpAprProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpAprProcessor.java
@@ -96,7 +96,7 @@ public class AjpAprProcessor implements ActionHook {
         outputBuffer = ByteBuffer.allocateDirect(packetSize * 2);
 
         // Cause loading of HexUtils
-        int foo = HexUtils.DEC[0];
+        HexUtils.load();
 
         // Cause loading of HttpMessages
         HttpMessages.getMessage(200);
@@ -1142,7 +1142,6 @@ public class AjpAprProcessor implements ActionHook {
             boolean useAvailableData)
         throws IOException {
 
-        byte[] buf = message.getBuffer();
         int headerLength = message.getHeaderLength();
 
         if (first) {

==================================================
Http11AprProcessor.java
index ae07711db1..32346b42c0 100644
--- a/java/org/apache/coyote/ajp/AjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AjpProcessor.java
@@ -91,7 +91,7 @@ public class AjpProcessor implements ActionHook {
         bodyMessage = new AjpMessage(packetSize);
         
         // Cause loading of HexUtils
-        int foo = HexUtils.DEC[0];
+        HexUtils.load();
 
         // Cause loading of HttpMessages
         HttpMessages.getMessage(200);

==================================================
Http11NioProcessor.java
index 3a57faead6..626367bf1f 100644
--- a/java/org/apache/coyote/http11/Http11AprProcessor.java
+++ b/java/org/apache/coyote/http11/Http11AprProcessor.java
@@ -101,7 +101,7 @@ public class Http11AprProcessor implements ActionHook {
         initializeFilters();
 
         // Cause loading of HexUtils
-        int foo = HexUtils.DEC[0];
+        HexUtils.load();
 
         // Cause loading of FastHttpDateFormat
         FastHttpDateFormat.getCurrentDate();

==================================================
Http11Processor.java
index 38523b927c..3de3453690 100644
--- a/java/org/apache/coyote/http11/Http11NioProcessor.java
+++ b/java/org/apache/coyote/http11/Http11NioProcessor.java
@@ -103,7 +103,7 @@ public class Http11NioProcessor implements ActionHook {
         initializeFilters();
 
         // Cause loading of HexUtils
-        int foo = HexUtils.DEC[0];
+        HexUtils.load();
 
         // Cause loading of FastHttpDateFormat
         FastHttpDateFormat.getCurrentDate();

==================================================
JspRuntimeLibrary.java
index d593d55eca..5abe42eae7 100644
--- a/java/org/apache/coyote/http11/Http11Processor.java
+++ b/java/org/apache/coyote/http11/Http11Processor.java
@@ -96,7 +96,7 @@ public class Http11Processor implements ActionHook {
         initializeFilters();
 
         // Cause loading of HexUtils
-        int foo = HexUtils.DEC[0];
+        HexUtils.load();
 
     }
 

==================================================
ParserUtils.java
index 09b1ae7a2f..e7e45bed62 100644
--- a/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
+++ b/java/org/apache/jasper/runtime/JspRuntimeLibrary.java
@@ -346,7 +346,6 @@ public class JspRuntimeLibrary {
                     if(t.equals(String.class)) {
                         method.invoke(bean, new Object[] { values });
                     } else {
-                        Object tmpval = null;
                         createTypedArray (prop, bean, method, values, t,
                                           propertyEditorClass); 
                     }
@@ -573,7 +572,6 @@ public class JspRuntimeLibrary {
     //allocate the buffer - use byte[] to avoid calls to new.
         byte holdbuffer[] = new byte[encoded.length()];
 
-        char holdchar;
         int bufcount = 0;
 
         for (int count = 0; count < encoded.length(); count++) {

==================================================
ChannelJni.java
index e73f9e4f90..7f9a71fa0b 100644
--- a/java/org/apache/jasper/xmlparser/ParserUtils.java
+++ b/java/org/apache/jasper/xmlparser/ParserUtils.java
@@ -176,7 +176,7 @@ public class ParserUtils {
                             treeNode.setBody(body);
                     }
                 } else {
-                    TreeNode treeChild = convert(treeNode, child);
+                    convert(treeNode, child);
                 }
             }
         }

==================================================
ChannelUn.java
index 673643a91c..6a323fec6b 100644
--- a/java/org/apache/jk/common/ChannelJni.java
+++ b/java/org/apache/jk/common/ChannelJni.java
@@ -147,7 +147,6 @@ public class ChannelJni extends JniHandler implements JkChannel {
         if( apr==null ) return -1;
         
         long xEnv=ep.getJniEnv();
-        long cEndpointP=ep.getJniContext();
 
         int type=ep.getType();
         if( log.isDebugEnabled() ) log.debug("ChannelJni.invoke: "  + ep + " " + type);

==================================================
NSConfig.java
index d9f2899a15..ceab769d1a 100644
--- a/java/org/apache/jk/common/ChannelUn.java
+++ b/java/org/apache/jk/common/ChannelUn.java
@@ -305,7 +305,7 @@ public class ChannelUn extends JniHandler implements JkChannel {
                 }
                 ep.setType(0);
                 log.debug( "Process msg ");
-                int status=next.invoke( recv, ep );
+                next.invoke( recv, ep );
             }
             if( log.isDebugEnabled() )
                 log.debug( "Closing un channel");

==================================================
ResourceLinkFactory.java
index 6b9105d439..f1203efe60 100644
--- a/java/org/apache/jk/config/NSConfig.java
+++ b/java/org/apache/jk/config/NSConfig.java
@@ -246,7 +246,6 @@ public class NSConfig  extends BaseJkConfig {
     protected void generateStupidMappings(Context context, PrintWriter objfile )
     {
         String ctxPath  = context.getPath();
-	String nPath=("".equals(ctxPath)) ? "/" : ctxPath;
 
         if( noRoot &&  "".equals(ctxPath) ) {
             log.debug("Ignoring root context in forward-all mode  ");

==================================================
IntrospectionUtils.java
index 9e23716265..b0c4a10c55 100644
--- a/java/org/apache/naming/factory/ResourceLinkFactory.java
+++ b/java/org/apache/naming/factory/ResourceLinkFactory.java
@@ -86,8 +86,6 @@ public class ResourceLinkFactory
         // Can we process this request?
         Reference ref = (Reference) obj;
 
-        String type = ref.getClassName();
-
         // Read the global ref addr
         String globalName = null;
         RefAddr refAddr = ref.get(ResourceLinkRef.GLOBALNAME);

==================================================
HexUtils.java
index 2a46bcbfff..83bdfdf741 100644
--- a/java/org/apache/tomcat/util/IntrospectionUtils.java
+++ b/java/org/apache/tomcat/util/IntrospectionUtils.java
@@ -451,7 +451,6 @@ public final class IntrospectionUtils {
         String setter = "set" + capitalize(name);
         try {
             Method methods[] = findMethods(o.getClass());
-            Method setPropertyMethod = null;
             // find setFoo() method
             for (int i = 0; i < methods.length; i++) {
                 Class<?> paramT[] = methods[i].getParameterTypes();
@@ -644,7 +643,6 @@ public final class IntrospectionUtils {
     public static void addJarsFromClassPath(Vector<URL> jars, String cp)
             throws IOException, MalformedURLException {
         String sep = System.getProperty("path.separator");
-        String token;
         StringTokenizer st;
         if (cp != null) {
             st = new StringTokenizer(cp, sep);

==================================================
NodeCreateRule.java
index 00499616bb..991578a1f1 100644
--- a/java/org/apache/tomcat/util/buf/HexUtils.java
+++ b/java/org/apache/tomcat/util/buf/HexUtils.java
@@ -174,6 +174,13 @@ public final class HexUtils {
 
 
 
+    /**
+     * Provide a mechanism for ensuring this class is loaded. 
+     */
+    public static void load() {
+        // Nothing to do
+    }
+
     /**
      * [Private] Convert the specified value (0 .. 15) to the corresponding
      * hexadecimal digit.
@@ -191,4 +198,4 @@ public final class HexUtils {
     }
 
 
-}
+}
\ No newline at end of file

==================================================
Mapper.java
index 293a51ea2f..4465576414 100644
--- a/java/org/apache/tomcat/util/digester/NodeCreateRule.java
+++ b/java/org/apache/tomcat/util/digester/NodeCreateRule.java
@@ -427,7 +427,7 @@ public class NodeCreateRule extends Rule {
      */
     public void end(String namespace, String name) throws Exception {
 
-        Object top = digester.pop();
+        digester.pop();
 
     }
 

==================================================
Registry.java
index f5316b2f8c..1d34bbb4df 100644
--- a/java/org/apache/tomcat/util/http/mapper/Mapper.java
+++ b/java/org/apache/tomcat/util/http/mapper/Mapper.java
@@ -867,7 +867,6 @@ public final class Mapper {
          MappingData mappingData) {
 
         int pathEnd = path.getEnd();
-        int pathOffset = path.getOffset();
 
         int lastSlash = -1;
         int length = -1;

==================================================
MbeansSource.java
index 75697f1987..584640d715 100644
--- a/java/org/apache/tomcat/util/modeler/Registry.java
+++ b/java/org/apache/tomcat/util/modeler/Registry.java
@@ -491,7 +491,6 @@ public class Registry implements RegistryMBean, MBeanRegistration  {
      */ 
     public MBeanOperationInfo getMethodInfo( ObjectName oname, String opName )
     {
-        String type=null;
         MBeanInfo info=null;
         try {
             info=server.getMBeanInfo(oname);

==================================================
