a653c2b8cd906e72c01ffe6936350fd9d9808c7b
==================================================
Align connector implementations with documented default for processorCache
==================================================
Mark Emlyn
==================================================
Mon Apr 18 15:38:07 2011 +0000
==================================================
AbstractProtocolHandler.java
Align connector implementations with documented default for processorCache

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1094621 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11AprProtocol.java
index c5284908ea..50d4e853b4 100644
--- a/java/org/apache/coyote/AbstractProtocolHandler.java
+++ b/java/org/apache/coyote/AbstractProtocolHandler.java
@@ -98,11 +98,12 @@ public abstract class AbstractProtocolHandler implements ProtocolHandler,
 
     /**
      * The maximum number of idle processors that will be retained in the cache
-     * and re-used with a subsequent request. The default is -1, unlimited,
-     * although in that case there will never be more Processor objects than
-     * there are threads in the associated thread pool.
+     * and re-used with a subsequent request. The default is 200. A value of -1
+     * means unlimited. In the unlimited case, the theoretical maximum number of
+     * cached Processor objects is {@link #getMaxConnections()} although it will
+     * usually be closer to {@link #getMaxThreads()}.
      */
-    protected int processorCache = -1;
+    protected int processorCache = 200;
     public int getProcessorCache() { return this.processorCache; }
     public void setProcessorCache(int processorCache) {
         this.processorCache = processorCache;

==================================================
Http11NioProtocol.java
index a112b9ddd0..93a18d2e7d 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -76,7 +76,6 @@ public class Http11AprProtocol extends AbstractHttp11Protocol {
         setSoLinger(Constants.DEFAULT_CONNECTION_LINGER);
         setSoTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);
         setTcpNoDelay(Constants.DEFAULT_TCP_NO_DELAY);
-        setProcessorCache(-1);
     }
 
     private final Http11ConnectionHandler cHandler;

==================================================
Http11Protocol.java
index 0cd5d7fafe..195df7fff4 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -74,7 +74,6 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol {
         setSoLinger(Constants.DEFAULT_CONNECTION_LINGER);
         setSoTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);
         setTcpNoDelay(Constants.DEFAULT_TCP_NO_DELAY);
-        setProcessorCache(200);
     }
 
 

==================================================
