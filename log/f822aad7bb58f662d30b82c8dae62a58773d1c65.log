f822aad7bb58f662d30b82c8dae62a58773d1c65
==================================================
57761: Avoid using an empty path in the HTTP request when the websocket client connects to a server root.
==================================================
Remy Maucherat
==================================================
Thu Mar 26 15:28:55 2015 +0000
==================================================
WsWebSocketContainer.java
57761: Avoid using an empty path in the HTTP request when the websocket client connects to a server root.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1669353 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TestWebSocketFrameClient.java
index 7b6098d0e0..89d343a424 100644
--- a/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
+++ b/java/org/apache/tomcat/websocket/WsWebSocketContainer.java
@@ -501,7 +501,10 @@ public class WsWebSocketContainer implements WebSocketContainer, BackgroundProce
 
         // Request line
         result.put("GET ".getBytes(StandardCharsets.ISO_8859_1));
-        result.put(uri.getRawPath().getBytes(StandardCharsets.ISO_8859_1));
+        byte[] path = (null == uri.getPath() || "".equals(uri.getPath()))
+                ? "/".getBytes(StandardCharsets.ISO_8859_1)
+                : uri.getRawPath().getBytes(StandardCharsets.ISO_8859_1);
+        result.put(path);
         String query = uri.getRawQuery();
         if (query != null) {
             result.put((byte) '?');

==================================================
TesterEchoServer.java
index 025ac8c555..00bc92c5cb 100644
--- a/test/org/apache/tomcat/websocket/TestWebSocketFrameClient.java
+++ b/test/org/apache/tomcat/websocket/TestWebSocketFrameClient.java
@@ -80,4 +80,55 @@ public class TestWebSocketFrameClient extends TomcatBaseTest {
         }
     }
 
+    @Test
+    public void testConnectToRootEndpoint() throws Exception {
+
+        Tomcat tomcat = getTomcatInstance();
+        // No file system docBase required
+        Context ctx = tomcat.addContext("", null);
+        ctx.addApplicationListener(TesterEchoServer.Config.class.getName());
+        Tomcat.addServlet(ctx, "default", new DefaultServlet());
+        ctx.addServletMapping("/", "default");
+        Context ctx2 = tomcat.addContext("/foo", null);
+        ctx2.addApplicationListener(TesterEchoServer.Config.class.getName());
+        Tomcat.addServlet(ctx2, "default", new DefaultServlet());
+        ctx2.addServletMapping("/", "default");
+
+        tomcat.start();
+
+        echoTester("");
+        echoTester("/");
+        // FIXME: The ws client doesn't handle any response other than the upgrade,
+        // which may or may not be allowed. In that case, the server will return
+        // a redirect to the root of the webapp to avoid possible broken relative
+        // paths.
+        // echoTester("/foo");
+        echoTester("/foo/");
+    }
+
+    public void echoTester(String path) throws Exception {
+        WebSocketContainer wsContainer =
+                ContainerProvider.getWebSocketContainer();
+        ClientEndpointConfig clientEndpointConfig =
+                ClientEndpointConfig.Builder.create().build();
+        Session wsSession = wsContainer.connectToServer(
+                TesterProgrammaticEndpoint.class,
+                clientEndpointConfig,
+                new URI("ws://localhost:" + getPort() + path));
+        CountDownLatch latch =
+                new CountDownLatch(1);
+        BasicText handler = new BasicText(latch);
+        wsSession.addMessageHandler(handler);
+        wsSession.getBasicRemote().sendText("Hello");
+
+        handler.getLatch().await(100, TimeUnit.MILLISECONDS);
+
+        Queue<String> messages = handler.getMessages();
+        Assert.assertEquals(1, messages.size());
+        for (String message : messages) {
+            Assert.assertEquals("Hello", message);
+        }
+        wsSession.close();
+    }
+
 }

==================================================
