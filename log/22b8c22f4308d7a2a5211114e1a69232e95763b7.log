22b8c22f4308d7a2a5211114e1a69232e95763b7
==================================================
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55171
==================================================
Mark Emlyn
==================================================
Tue Jul 2 13:27:46 2013 +0000
==================================================
AbstractServletOutputStream.java
Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55171
If the client closed the connection, the write of any remainign data in the buffer in AbstractServletOutputStream would fail but the remote endpoint was not notified. This meant that blocking writes would block for ever eventually locking up the entire server.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1498929 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WsRemoteEndpointImplBase.java
index f1ec9cedcd..e57a065446 100644
--- a/java/org/apache/coyote/http11/upgrade/AbstractServletOutputStream.java
+++ b/java/org/apache/coyote/http11/upgrade/AbstractServletOutputStream.java
@@ -21,6 +21,7 @@ import java.io.IOException;
 import javax.servlet.ServletOutputStream;
 import javax.servlet.WriteListener;
 
+import org.apache.tomcat.util.ExceptionUtils;
 import org.apache.tomcat.util.res.StringManager;
 
 public abstract class AbstractServletOutputStream extends ServletOutputStream {
@@ -127,7 +128,17 @@ public abstract class AbstractServletOutputStream extends ServletOutputStream {
 
     protected final void onWritePossible() throws IOException {
         synchronized (writeLock) {
-            writeInternal(buffer, 0, buffer.length);
+            try {
+                writeInternal(buffer, 0, buffer.length);
+            } catch (Throwable t) {
+                ExceptionUtils.handleThrowable(t);
+                listener.onError(t);
+                if (t instanceof IOException) {
+                    throw t;
+                } else {
+                    throw new IOException(t);
+                }
+            }
 
            // Make sure isReady() and onWritePossible() have a consistent view of
             // buffer and fireListener when determining if the listener should fire

==================================================
WsHttpUpgradeHandler.java
index 854331afb7..8d3271c487 100644
--- a/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java
+++ b/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java
@@ -492,7 +492,7 @@ public abstract class WsRemoteEndpointImplBase implements RemoteEndpoint {
     }
 
 
-    protected final void close() {
+    public final void close() {
         for (EncoderEntry entry : encoderEntries) {
             entry.getEncoder().destroy();
         }

==================================================
WsRemoteEndpointImplServer.java
index e3dc3d530d..932e4cb392 100644
--- a/java/org/apache/tomcat/websocket/server/WsHttpUpgradeHandler.java
+++ b/java/org/apache/tomcat/websocket/server/WsHttpUpgradeHandler.java
@@ -237,6 +237,7 @@ public class WsHttpUpgradeHandler implements HttpUpgradeHandler {
         @Override
         public void onError(Throwable throwable) {
             wsProtocolHandler.onError(throwable);
+            wsRemoteEndpointServer.close();
         }
     }
 }

==================================================
