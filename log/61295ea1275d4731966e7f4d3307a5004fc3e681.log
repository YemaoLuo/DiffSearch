61295ea1275d4731966e7f4d3307a5004fc3e681
==================================================
Pull up handler field to AbstractEndpoint
==================================================
Mark Thomas
==================================================
Sun Nov 8 16:53:00 2015 +0000
==================================================
Http11AprProtocol.java
Pull up handler field to AbstractEndpoint

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1713251 13f79535-47bb-0310-9956-ffa450edef68



==================================================
Http11Nio2Protocol.java
index 6e63fd71db..bac73c1535 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -37,7 +37,7 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
         super(new AprEndpoint());
         Http11ConnectionHandler<Long> cHandler = new Http11ConnectionHandler<>(this);
         setHandler(cHandler);
-        ((AprEndpoint) getEndpoint()).setHandler(cHandler);
+        getEndpoint().setHandler(cHandler);
     }
 
 

==================================================
Http11NioProtocol.java
index cb1fd15e6e..7a5fad072a 100644
--- a/java/org/apache/coyote/http11/Http11Nio2Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Nio2Protocol.java
@@ -34,7 +34,7 @@ public class Http11Nio2Protocol extends AbstractHttp11JsseProtocol<Nio2Channel>
         super(new Nio2Endpoint());
         Http11ConnectionHandler<Nio2Channel> cHandler = new Http11ConnectionHandler<>(this);
         setHandler(cHandler);
-        ((Nio2Endpoint) getEndpoint()).setHandler(cHandler);
+        getEndpoint().setHandler(cHandler);
     }
 
 

==================================================
AbstractEndpoint.java
index 88e4dfec93..d24aeea6d0 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -39,7 +39,7 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
         super(new NioEndpoint());
         Http11ConnectionHandler<NioChannel> cHandler = new Http11ConnectionHandler<>(this);
         setHandler(cHandler);
-        ((NioEndpoint) getEndpoint()).setHandler(cHandler);
+        getEndpoint().setHandler(cHandler);
     }
 
 

==================================================
AprEndpoint.java
index 9c023480a4..3904d311b0 100644
--- a/java/org/apache/tomcat/util/net/AbstractEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AbstractEndpoint.java
@@ -533,6 +533,15 @@ public abstract class AbstractEndpoint<S> {
         return (negotiableProtocols.size() > 0);
     }
 
+
+    /**
+     * Handling of accepted sockets.
+     */
+    private Handler<S> handler = null;
+    public void setHandler(Handler<S> handler ) { this.handler = handler; }
+    public Handler<S> getHandler() { return handler; }
+
+
     /**
      * Attributes provide a way for configuration to be passed to sub-components
      * without the {@link org.apache.coyote.ProtocolHandler} being aware of the
@@ -849,9 +858,6 @@ public abstract class AbstractEndpoint<S> {
         }
     }
 
-
-    protected abstract Handler<S> getHandler();
-
     protected abstract Log getLog();
 
     protected LimitLatch initializeConnectionLatch() {

==================================================
Nio2Endpoint.java
index 4eee8a0c83..e3dd9adb8f 100644
--- a/java/org/apache/tomcat/util/net/AprEndpoint.java
+++ b/java/org/apache/tomcat/util/net/AprEndpoint.java
@@ -133,15 +133,6 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
     public int getSendfileSize() { return sendfileSize; }
 
 
-    /**
-     * Handling of accepted sockets.
-     */
-    protected Handler<Long> handler = null;
-    public void setHandler(Handler<Long> handler ) { this.handler = handler; }
-    @Override
-    public Handler<Long> getHandler() { return handler; }
-
-
     /**
      * Poll interval, in microseconds. The smaller the value, the more CPU the poller
      * will use, but the more responsive to activity it will be.
@@ -617,7 +608,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
             for (SocketWrapperBase<Long> socketWrapper : connections.values()) {
                 try {
                     socketWrapper.close();
-                    handler.release(socketWrapper);
+                    getHandler().release(socketWrapper);
                 } catch (IOException e) {
                     // Ignore
                 }
@@ -701,7 +692,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
             rootPool = 0;
         }
 
-        handler.recycle();
+        getHandler().recycle();
     }
 
 
@@ -2250,7 +2241,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
                         return;
                     }
                     // Process the request from this socket
-                    Handler.SocketState state = handler.process(socket,
+                    Handler.SocketState state = getHandler().process(socket,
                             SocketStatus.OPEN_READ);
                     if (state == Handler.SocketState.CLOSED) {
                         // Close socket and pool
@@ -2293,7 +2284,7 @@ public class AprEndpoint extends AbstractEndpoint<Long> implements SNICallBack {
                     // Closed in another thread
                     return;
                 }
-                SocketState state = handler.process(socket, status);
+                SocketState state = getHandler().process(socket, status);
                 if (state == Handler.SocketState.CLOSED) {
                     // Close socket and pool
                     closeSocket(socket.getSocket().longValue());

==================================================
NioEndpoint.java
index 16b21cf3cf..1f62e31db9 100644
--- a/java/org/apache/tomcat/util/net/Nio2Endpoint.java
+++ b/java/org/apache/tomcat/util/net/Nio2Endpoint.java
@@ -106,15 +106,6 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
 
     // ------------------------------------------------------------- Properties
 
-    /**
-     * Handling of accepted sockets.
-     */
-    private Handler<Nio2Channel> handler = null;
-    public void setHandler(Handler<Nio2Channel> handler ) { this.handler = handler; }
-    @Override
-    public Handler<Nio2Channel> getHandler() { return handler; }
-
-
     public void setSocketProperties(SocketProperties socketProperties) {
         this.socketProperties = socketProperties;
     }
@@ -155,9 +146,12 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
     protected void releaseCaches() {
         this.nioChannels.clear();
         this.processorCache.clear();
-        if ( handler != null ) handler.recycle();
+        if (getHandler() != null) {
+            getHandler().recycle();
+        }
     }
 
+
     // --------------------------------------------------------- Public Methods
 
     /**
@@ -254,7 +248,7 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
                 public void run() {
                     // Then close all active connections if any remain
                     try {
-                        for (Nio2Channel channel : handler.getOpenSockets()) {
+                        for (Nio2Channel channel : getHandler().getOpenSockets()) {
                             closeSocket(channel.getSocket());
                         }
                     } catch (Throwable t) {
@@ -419,7 +413,7 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
             return;
         }
         try {
-            handler.release(socket);
+            getHandler().release(socket);
         } catch (Throwable e) {
             ExceptionUtils.handleThrowable(e);
             if (log.isDebugEnabled()) log.error("",e);
@@ -1670,9 +1664,9 @@ public class Nio2Endpoint extends AbstractJsseEndpoint<Nio2Channel> {
                         SocketState state = SocketState.OPEN;
                         // Process the request from this socket
                         if (status == null) {
-                            state = handler.process(socket, SocketStatus.OPEN_READ);
+                            state = getHandler().process(socket, SocketStatus.OPEN_READ);
                         } else {
-                            state = handler.process(socket, status);
+                            state = getHandler().process(socket, status);
                         }
                         if (state == SocketState.CLOSED) {
                             // Close socket and pool

==================================================
