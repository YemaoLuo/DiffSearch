77c3b8565c1f0ebf4c001b4da1e1b73819c7f3ac
==================================================
Pull up common constructor code
==================================================
Mark Emlyn
==================================================
Sun Jun 16 16:20:24 2013 +0000
==================================================
AbstractOutputBuffer.java
Pull up common constructor code

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1493526 13f79535-47bb-0310-9956-ffa450edef68



==================================================
InternalAprOutputBuffer.java
index 805654f4ac..4b88c85759 100644
--- a/java/org/apache/coyote/http11/AbstractOutputBuffer.java
+++ b/java/org/apache/coyote/http11/AbstractOutputBuffer.java
@@ -119,6 +119,24 @@ public abstract class AbstractOutputBuffer<S> implements OutputBuffer {
     protected int bufferedWriteSize = 64*1024; //64k default write buffer
 
 
+    protected AbstractOutputBuffer(Response response, int headerBufferSize) {
+
+        this.response = response;
+
+        headerBuffer = new byte[headerBufferSize];
+
+        filterLibrary = new OutputFilter[0];
+        activeFilters = new OutputFilter[0];
+        lastActiveFilter = -1;
+
+        committed = false;
+        finished = false;
+
+        // Cause loading of HttpMessages
+        HttpMessages.getMessage(200);
+    }
+
+
     // -------------------------------------------------------------- Variables
 
     /**

==================================================
InternalNioOutputBuffer.java
index 39a48cf032..42a400f942 100644
--- a/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
@@ -28,7 +28,6 @@ import org.apache.coyote.Response;
 import org.apache.tomcat.jni.Socket;
 import org.apache.tomcat.jni.Status;
 import org.apache.tomcat.util.buf.ByteChunk;
-import org.apache.tomcat.util.http.HttpMessages;
 import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.AprEndpoint;
 import org.apache.tomcat.util.net.SocketWrapper;
@@ -47,9 +46,8 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
      */
     public InternalAprOutputBuffer(Response response, int headerBufferSize) {
 
-        this.response = response;
+        super(response, headerBufferSize);
 
-        headerBuffer = new byte[headerBufferSize];
         if (headerBufferSize < (8 * 1024)) {
             bbuf = ByteBuffer.allocateDirect(6 * 1500);
         } else {
@@ -57,17 +55,6 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
         }
 
         outputStreamOutputBuffer = new SocketOutputBuffer();
-
-        filterLibrary = new OutputFilter[0];
-        activeFilters = new OutputFilter[0];
-        lastActiveFilter = -1;
-
-        committed = false;
-        finished = false;
-
-        // Cause loading of HttpMessages
-        HttpMessages.getMessage(200);
-
     }
 
 
@@ -362,7 +349,7 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
             int len = chunk.getLength();
             int start = chunk.getStart();
             byte[] b = chunk.getBuffer();
-            addToBB(b, start,len);
+            addToBB(b, start, len);
             byteCount += chunk.getLength();
             return chunk.getLength();
         }

==================================================
InternalOutputBuffer.java
index aa07d8471f..e23e628435 100644
--- a/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
@@ -27,7 +27,6 @@ import java.util.concurrent.atomic.AtomicLong;
 import org.apache.coyote.OutputBuffer;
 import org.apache.coyote.Response;
 import org.apache.tomcat.util.buf.ByteChunk;
-import org.apache.tomcat.util.http.HttpMessages;
 import org.apache.tomcat.util.net.AbstractEndpoint;
 import org.apache.tomcat.util.net.NioChannel;
 import org.apache.tomcat.util.net.NioEndpoint;
@@ -49,22 +48,9 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer<NioChannel> {
      */
     public InternalNioOutputBuffer(Response response, int headerBufferSize) {
 
-        this.response = response;
-
-        headerBuffer = new byte[headerBufferSize];
+        super(response, headerBufferSize);
 
         outputStreamOutputBuffer = new SocketOutputBuffer();
-
-        filterLibrary = new OutputFilter[0];
-        activeFilters = new OutputFilter[0];
-        lastActiveFilter = -1;
-
-        committed = false;
-        finished = false;
-
-        // Cause loading of HttpMessages
-        HttpMessages.getMessage(200);
-
     }
 
 

==================================================
