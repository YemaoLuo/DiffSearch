781411fd1ef1d15490129dd3314989bf9b945d8a
==================================================
More side-effects from making endpoints generic
==================================================
Mark Emlyn
==================================================
Tue Sep 3 10:03:22 2013 +0000
==================================================
AbstractProcessor.java
More side-effects from making endpoints generic

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1519627 13f79535-47bb-0310-9956-ffa450edef68



==================================================
AbstractProtocol.java
index e5c98ea242..90400e76d8 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -34,7 +34,7 @@ public abstract class AbstractProcessor<S> implements ActionHook, Processor<S> {
 
     protected Adapter adapter;
     protected final AsyncStateMachine<S> asyncStateMachine;
-    protected final AbstractEndpoint endpoint;
+    protected final AbstractEndpoint<S> endpoint;
     protected final Request request;
     protected final Response response;
     protected SocketWrapper<S> socketWrapper = null;
@@ -51,7 +51,7 @@ public abstract class AbstractProcessor<S> implements ActionHook, Processor<S> {
         response = null;
     }
 
-    public AbstractProcessor(AbstractEndpoint endpoint) {
+    public AbstractProcessor(AbstractEndpoint<S> endpoint) {
         this.endpoint = endpoint;
         asyncStateMachine = new AsyncStateMachine<>(this);
 
@@ -66,7 +66,7 @@ public abstract class AbstractProcessor<S> implements ActionHook, Processor<S> {
     /**
      * The endpoint receiving connections that are handled by this processor.
      */
-    protected AbstractEndpoint getEndpoint() {
+    protected AbstractEndpoint<S> getEndpoint() {
         return endpoint;
     }
 

==================================================
AbstractAjpProcessor.java
index a66d48d114..beac2b97c9 100644
--- a/java/org/apache/coyote/AbstractProtocol.java
+++ b/java/org/apache/coyote/AbstractProtocol.java
@@ -43,7 +43,7 @@ import org.apache.tomcat.util.net.SocketStatus;
 import org.apache.tomcat.util.net.SocketWrapper;
 import org.apache.tomcat.util.res.StringManager;
 
-public abstract class AbstractProtocol implements ProtocolHandler,
+public abstract class AbstractProtocol<S> implements ProtocolHandler,
         MBeanRegistration {
 
     /**
@@ -85,7 +85,7 @@ public abstract class AbstractProtocol implements ProtocolHandler,
      * ProtocolHandler implementation (ProtocolHandler using BIO, requires BIO
      * Endpoint etc.).
      */
-    protected AbstractEndpoint endpoint = null;
+    protected AbstractEndpoint<S> endpoint = null;
 
 
     // ----------------------------------------------- Generic property handling
@@ -573,7 +573,7 @@ public abstract class AbstractProtocol implements ProtocolHandler,
                 new RecycledProcessors<>(this);
 
 
-        protected abstract AbstractProtocol getProtocol();
+        protected abstract AbstractProtocol<S> getProtocol();
 
 
         @Override

==================================================
AbstractAjpProtocol.java
index f756c8658d..75cdb37590 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProcessor.java
@@ -237,7 +237,7 @@ public abstract class AbstractAjpProcessor<S> extends AbstractProcessor<S> {
 
     // ------------------------------------------------------------ Constructor
 
-    public AbstractAjpProcessor(int packetSize, AbstractEndpoint endpoint) {
+    public AbstractAjpProcessor(int packetSize, AbstractEndpoint<S> endpoint) {
 
         super(endpoint);
 

==================================================
AjpAprProtocol.java
index 88f94f5dfa..3ae3b963e8 100644
--- a/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AbstractAjpProtocol.java
@@ -23,7 +23,7 @@ import org.apache.coyote.Processor;
 import org.apache.tomcat.util.net.SocketWrapper;
 import org.apache.tomcat.util.res.StringManager;
 
-public abstract class AbstractAjpProtocol extends AbstractProtocol {
+public abstract class AbstractAjpProtocol<S> extends AbstractProtocol<S> {
 
     /**
      * The string manager for this package.

==================================================
AjpNioProtocol.java
index c181dc97d6..2e79cadd93 100644
--- a/java/org/apache/coyote/ajp/AjpAprProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpAprProtocol.java
@@ -34,7 +34,7 @@ import org.apache.tomcat.util.net.SocketWrapper;
  * @author Remy Maucherat
  * @author Costin Manolache
  */
-public class AjpAprProtocol extends AbstractAjpProtocol {
+public class AjpAprProtocol extends AbstractAjpProtocol<Long> {
 
 
     private static final Log log = LogFactory.getLog(AjpAprProtocol.class);
@@ -113,7 +113,7 @@ public class AjpAprProtocol extends AbstractAjpProtocol {
         }
 
         @Override
-        protected AbstractProtocol getProtocol() {
+        protected AbstractProtocol<Long> getProtocol() {
             return proto;
         }
 

==================================================
AjpProtocol.java
index 91b951db8c..8b521ff936 100644
--- a/java/org/apache/coyote/ajp/AjpNioProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpNioProtocol.java
@@ -38,7 +38,7 @@ import org.apache.tomcat.util.net.SocketWrapper;
  * Processor is single threaded and specific to stream-based protocols,
  * will not fit Jk protocols like JNI.
  */
-public class AjpNioProtocol extends AbstractAjpProtocol {
+public class AjpNioProtocol extends AbstractAjpProtocol<NioChannel> {
 
 
     private static final Log log = LogFactory.getLog(AjpNioProtocol.class);
@@ -99,7 +99,7 @@ public class AjpNioProtocol extends AbstractAjpProtocol {
         }
 
         @Override
-        protected AbstractProtocol getProtocol() {
+        protected AbstractProtocol<NioChannel> getProtocol() {
             return proto;
         }
 

==================================================
AbstractHttp11Processor.java
index c7aa38f65b..3a3cc0d2c0 100644
--- a/java/org/apache/coyote/ajp/AjpProtocol.java
+++ b/java/org/apache/coyote/ajp/AjpProtocol.java
@@ -37,7 +37,7 @@ import org.apache.tomcat.util.net.SocketWrapper;
  * @author Remy Maucherat
  * @author Costin Manolache
  */
-public class AjpProtocol extends AbstractAjpProtocol {
+public class AjpProtocol extends AbstractAjpProtocol<Socket> {
 
 
     private static final Log log = LogFactory.getLog(AjpProtocol.class);
@@ -96,7 +96,7 @@ public class AjpProtocol extends AbstractAjpProtocol {
         }
 
         @Override
-        protected AbstractProtocol getProtocol() {
+        protected AbstractProtocol<Socket> getProtocol() {
             return proto;
         }
 

==================================================
AbstractHttp11Protocol.java
index b6437f63a9..d261404b3c 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Processor.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Processor.java
@@ -239,7 +239,7 @@ public abstract class AbstractHttp11Processor<S> extends AbstractProcessor<S> {
     protected HttpUpgradeHandler httpUpgradeHandler = null;
 
 
-    public AbstractHttp11Processor(AbstractEndpoint endpoint) {
+    public AbstractHttp11Processor(AbstractEndpoint<S> endpoint) {
         super(endpoint);
         userDataHelper = new UserDataHelper(getLog());
     }

==================================================
AbstractInputBuffer.java
index 62cf74bc0d..de35c95e4d 100644
--- a/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
+++ b/java/org/apache/coyote/http11/AbstractHttp11Protocol.java
@@ -19,7 +19,7 @@ package org.apache.coyote.http11;
 
 import org.apache.coyote.AbstractProtocol;
 
-public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol {
+public abstract class AbstractHttp11Protocol<S> extends AbstractProtocol<S> {
 
     @Override
     protected String getProtocolName() {

==================================================
AbstractOutputBuffer.java
index 3bec7c294c..37ba71f629 100644
--- a/java/org/apache/coyote/http11/AbstractInputBuffer.java
+++ b/java/org/apache/coyote/http11/AbstractInputBuffer.java
@@ -242,7 +242,7 @@ public abstract class AbstractInputBuffer<S> implements InputBuffer{
     protected abstract boolean fill(boolean block) throws IOException;
 
     protected abstract void init(SocketWrapper<S> socketWrapper,
-            AbstractEndpoint endpoint) throws IOException;
+            AbstractEndpoint<S> endpoint) throws IOException;
 
     protected abstract Log getLog();
 

==================================================
Http11AprProtocol.java
index ee259cd384..b39db98f1f 100644
--- a/java/org/apache/coyote/http11/AbstractOutputBuffer.java
+++ b/java/org/apache/coyote/http11/AbstractOutputBuffer.java
@@ -386,7 +386,7 @@ public abstract class AbstractOutputBuffer<S> implements OutputBuffer {
 
 
     public abstract void init(SocketWrapper<S> socketWrapper,
-            AbstractEndpoint endpoint) throws IOException;
+            AbstractEndpoint<S> endpoint) throws IOException;
 
     public abstract void sendAck() throws IOException;
 

==================================================
Http11NioProtocol.java
index deac0f0f10..de843a0f05 100644
--- a/java/org/apache/coyote/http11/Http11AprProtocol.java
+++ b/java/org/apache/coyote/http11/Http11AprProtocol.java
@@ -223,7 +223,7 @@ public class Http11AprProtocol extends AbstractHttp11Protocol<Long> {
         }
 
         @Override
-        protected AbstractProtocol getProtocol() {
+        protected AbstractProtocol<Long> getProtocol() {
             return proto;
         }
 

==================================================
Http11Protocol.java
index 93a0c7ec96..50e1c9ba6e 100644
--- a/java/org/apache/coyote/http11/Http11NioProtocol.java
+++ b/java/org/apache/coyote/http11/Http11NioProtocol.java
@@ -157,7 +157,7 @@ public class Http11NioProtocol extends AbstractHttp11JsseProtocol<NioChannel> {
         }
 
         @Override
-        protected AbstractProtocol getProtocol() {
+        protected AbstractProtocol<NioChannel> getProtocol() {
             return proto;
         }
 

==================================================
InternalAprInputBuffer.java
index 363d0f340b..de5dea4865 100644
--- a/java/org/apache/coyote/http11/Http11Protocol.java
+++ b/java/org/apache/coyote/http11/Http11Protocol.java
@@ -120,7 +120,7 @@ public class Http11Protocol extends AbstractHttp11JsseProtocol<Socket> {
         }
 
         @Override
-        protected AbstractProtocol getProtocol() {
+        protected AbstractProtocol<Socket> getProtocol() {
             return proto;
         }
 

==================================================
InternalAprOutputBuffer.java
index c8d7d364ed..de6054d67a 100644
--- a/java/org/apache/coyote/http11/InternalAprInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalAprInputBuffer.java
@@ -546,7 +546,7 @@ public class InternalAprInputBuffer extends AbstractInputBuffer<Long> {
 
     @Override
     protected void init(SocketWrapper<Long> socketWrapper,
-            AbstractEndpoint endpoint) throws IOException {
+            AbstractEndpoint<Long> endpoint) throws IOException {
 
         socket = socketWrapper.getSocket().longValue();
         wrapper = socketWrapper;

==================================================
InternalInputBuffer.java
index 4e239a74dc..c7c4111df2 100644
--- a/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalAprOutputBuffer.java
@@ -83,14 +83,14 @@ public class InternalAprOutputBuffer extends AbstractOutputBuffer<Long> {
     private volatile boolean flipped = false;
 
 
-    private AbstractEndpoint endpoint;
+    private AbstractEndpoint<Long> endpoint;
 
 
     // --------------------------------------------------------- Public Methods
 
     @Override
     public void init(SocketWrapper<Long> socketWrapper,
-            AbstractEndpoint endpoint) throws IOException {
+            AbstractEndpoint<Long> endpoint) throws IOException {
 
         wrapper = socketWrapper;
         socket = socketWrapper.getSocket().longValue();

==================================================
InternalNioInputBuffer.java
index 33a4a24297..0ebad14fc2 100644
--- a/java/org/apache/coyote/http11/InternalInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalInputBuffer.java
@@ -466,7 +466,7 @@ public class InternalInputBuffer extends AbstractInputBuffer<Socket> {
 
     @Override
     protected void init(SocketWrapper<Socket> socketWrapper,
-            AbstractEndpoint endpoint) throws IOException {
+            AbstractEndpoint<Socket> endpoint) throws IOException {
         inputStream = socketWrapper.getSocket().getInputStream();
     }
 

==================================================
InternalNioOutputBuffer.java
index cc891574c4..76f23c6bd1 100644
--- a/java/org/apache/coyote/http11/InternalNioInputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioInputBuffer.java
@@ -755,7 +755,7 @@ public class InternalNioInputBuffer extends AbstractInputBuffer<NioChannel> {
 
     @Override
     protected void init(SocketWrapper<NioChannel> socketWrapper,
-            AbstractEndpoint endpoint) throws IOException {
+            AbstractEndpoint<NioChannel> endpoint) throws IOException {
 
         socket = socketWrapper.getSocket();
         if (socket == null) {

==================================================
InternalOutputBuffer.java
index ba82b451d7..b91bec0ebc 100644
--- a/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalNioOutputBuffer.java
@@ -73,7 +73,7 @@ public class InternalNioOutputBuffer extends AbstractOutputBuffer<NioChannel> {
 
     @Override
     public void init(SocketWrapper<NioChannel> socketWrapper,
-            AbstractEndpoint endpoint) throws IOException {
+            AbstractEndpoint<NioChannel> endpoint) throws IOException {
 
         socket = socketWrapper.getSocket();
         pool = ((NioEndpoint)endpoint).getSelectorPool();

==================================================
NpnHandler.java
index a31094df38..429326dddc 100644
--- a/java/org/apache/coyote/http11/InternalOutputBuffer.java
+++ b/java/org/apache/coyote/http11/InternalOutputBuffer.java
@@ -87,7 +87,7 @@ public class InternalOutputBuffer extends AbstractOutputBuffer<Socket>
 
     @Override
     public void init(SocketWrapper<Socket> socketWrapper,
-            AbstractEndpoint endpoint) throws IOException {
+            AbstractEndpoint<Socket> endpoint) throws IOException {
 
         outputStream = socketWrapper.getSocket().getOutputStream();
     }

==================================================
SpdyAprNpnHandler.java
index 78cb1bf220..5c002990b4 100644
--- a/java/org/apache/coyote/http11/NpnHandler.java
+++ b/java/org/apache/coyote/http11/NpnHandler.java
@@ -46,7 +46,7 @@ public interface NpnHandler<S> {
      * @param sslContext
      * @param adapter
      */
-    public void init(final AbstractEndpoint ep, long sslContext, Adapter adapter);
+    public void init(final AbstractEndpoint<S> ep, long sslContext, Adapter adapter);
 
     /**
      * Called when a SSLSocket or SSLEngine are first used, to initialize

==================================================
SpdyProcessor.java
index 1ce353018e..f96ae291d4 100644
--- a/java/org/apache/coyote/spdy/SpdyAprNpnHandler.java
+++ b/java/org/apache/coyote/spdy/SpdyAprNpnHandler.java
@@ -65,7 +65,7 @@ public class SpdyAprNpnHandler implements NpnHandler<Long> {
     private SpdyContext spdyContext;
 
     @Override
-    public void init(final AbstractEndpoint ep, long sslContext,
+    public void init(final AbstractEndpoint<Long> ep, long sslContext,
             final Adapter adapter) {
         spdyContext = new SpdyContext();
         if (sslContext == 0) {
@@ -82,7 +82,7 @@ public class SpdyAprNpnHandler implements NpnHandler<Long> {
             @Override
             public void onStream(SpdyConnection con, SpdyStream ch)
                     throws IOException {
-                SpdyProcessor sp = new SpdyProcessor(con, ep);
+                SpdyProcessor<Long> sp = new SpdyProcessor<>(con, ep);
                 sp.setAdapter(adapter);
                 sp.onSynStream(ch);
             }

==================================================
SpdyProxyProtocol.java
index d9b3a236dd..59b1f53a99 100644
--- a/java/org/apache/coyote/spdy/SpdyProcessor.java
+++ b/java/org/apache/coyote/spdy/SpdyProcessor.java
@@ -54,7 +54,7 @@ import org.apache.tomcat.util.net.SocketWrapper;
  *
  * Based on the AJP processor.
  */
-public class SpdyProcessor extends AbstractProcessor<Object> implements
+public class SpdyProcessor<S> extends AbstractProcessor<S> implements
         Runnable {
 
     // TODO: handle input
@@ -80,7 +80,7 @@ public class SpdyProcessor extends AbstractProcessor<Object> implements
 
     private boolean outCommit = false;
 
-    public SpdyProcessor(SpdyConnection spdy, AbstractEndpoint endpoint) {
+    public SpdyProcessor(SpdyConnection spdy, AbstractEndpoint<S> endpoint) {
         super(endpoint);
 
         this.spdy = spdy;
@@ -469,7 +469,7 @@ public class SpdyProcessor extends AbstractProcessor<Object> implements
     }
 
     @Override
-    public SocketState process(SocketWrapper<Object> socket)
+    public SocketState process(SocketWrapper<S> socket)
             throws IOException {
         throw new IOException("Unimplemented");
     }

==================================================
