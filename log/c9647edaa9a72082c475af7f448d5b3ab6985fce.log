c9647edaa9a72082c475af7f448d5b3ab6985fce
==================================================
Servlet 4 EG made the following changes
==================================================
Mark Thomas
==================================================
Tue Feb 28 20:34:43 2017 +0000
==================================================
PushBuilder.java
Servlet 4 EG made the following changes
- etag -> eTag
- change return of push() from boolean to void

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1784806 13f79535-47bb-0310-9956-ffa450edef68



==================================================
ApplicationPushBuilder.java
index aff92d8657..c698c307f6 100644
--- a/java/javax/servlet/http/PushBuilder.java
+++ b/java/javax/servlet/http/PushBuilder.java
@@ -82,7 +82,7 @@ public interface PushBuilder {
 
     /**
      * Sets if the request will be conditional. If {@code true} the values from
-     * {@link #getEtag()} and {@link #getLastModified()} will be used to
+     * {@link #getETag()} and {@link #getLastModified()} will be used to
      * construct appropriate headers.
      *
      * @param conditional Should generated push requests be conditional
@@ -137,15 +137,15 @@ public interface PushBuilder {
     PushBuilder path(String path);
 
     /**
-     * Sets the etag to be used for conditional push requests. This will be
+     * Sets the eTag to be used for conditional push requests. This will be
      * set to {@code null} after a call to {@link #push()} so it must be
      * explicitly set for every push request that requires it.
      *
-     * @param etag The etag use for the push request
+     * @param eTag The eTag use for the push request
      *
      * @return This builder instance
      */
-    PushBuilder etag(String etag);
+    PushBuilder eTag(String eTag);
 
     /**
      * Sets the last modified to be used for conditional push requests. This
@@ -168,14 +168,11 @@ public interface PushBuilder {
      * <li>{@code lastModified}</li>
      * </ul>
      *
-     * @return {@code true} if the push request was sent to the client,
-     *         otherwise {@code false}
-     *
      * @throws IllegalStateException If this method is called when {@code path}
      *         is {@code null}
      * @throws IllegalArgumentException If the request to push requires a body
      */
-    boolean push();
+    void push();
 
     /**
      * Obtain the name of the HTTP method that will be used for push requests
@@ -236,12 +233,12 @@ public interface PushBuilder {
     String getPath();
 
     /**
-     * Obtain the etag that will be used for the push request that will be
+     * Obtain the eTag that will be used for the push request that will be
      * generated by the next call to {@code push()}.
      *
-     * @return The etag value that will be associated with the next push request
+     * @return The eTag value that will be associated with the next push request
      */
-    String getEtag();
+    String getETag();
 
     /**
      * Obtain the last modified that will be used for the push request that will

==================================================
AbstractProcessor.java
index 76b0ee6822..670f2a6e81 100644
--- a/java/org/apache/catalina/core/ApplicationPushBuilder.java
+++ b/java/org/apache/catalina/core/ApplicationPushBuilder.java
@@ -38,7 +38,6 @@ import org.apache.catalina.Context;
 import org.apache.catalina.connector.Request;
 import org.apache.catalina.util.SessionConfig;
 import org.apache.coyote.ActionCode;
-import org.apache.coyote.PushToken;
 import org.apache.tomcat.util.buf.B2CConverter;
 import org.apache.tomcat.util.buf.HexUtils;
 import org.apache.tomcat.util.collections.CaseInsensitiveKeyMap;
@@ -61,7 +60,7 @@ public class ApplicationPushBuilder implements PushBuilder {
     private final List<Cookie> cookies = new ArrayList<>();
     private String method = "GET";
     private String path;
-    private String etag;
+    private String eTag;
     private String lastModified;
     private String queryString;
     private String sessionId;
@@ -205,15 +204,15 @@ public class ApplicationPushBuilder implements PushBuilder {
 
 
     @Override
-    public PushBuilder etag(String etag) {
-        this.etag = etag;
+    public PushBuilder eTag(String eTag) {
+        this.eTag = eTag;
         return this;
     }
 
 
     @Override
-    public String getEtag() {
-        return etag;
+    public String getETag() {
+        return eTag;
     }
 
 
@@ -323,7 +322,7 @@ public class ApplicationPushBuilder implements PushBuilder {
 
 
     @Override
-    public boolean push() {
+    public void push() {
         if (path == null) {
             throw new IllegalStateException(sm.getString("pushBuilder.noPath"));
         }
@@ -382,8 +381,8 @@ public class ApplicationPushBuilder implements PushBuilder {
         }
 
         if (conditional) {
-            if (etag != null) {
-                setHeader("if-none-match", etag);
+            if (eTag != null) {
+                setHeader("if-none-match", eTag);
             } else if (lastModified != null) {
                 setHeader("if-modified-since", lastModified);
             }
@@ -393,18 +392,15 @@ public class ApplicationPushBuilder implements PushBuilder {
         setHeader("cookie", generateCookieHeader(cookies,
                 catalinaRequest.getContext().getCookieProcessor()));
 
-        PushToken pushToken = new PushToken(pushTarget);
-        coyoteRequest.action(ActionCode.PUSH_REQUEST, pushToken);
+        coyoteRequest.action(ActionCode.PUSH_REQUEST, pushTarget);
 
         // Reset for next call to this method
         pushTarget = null;
         path = null;
-        etag = null;
+        eTag = null;
         lastModified = null;
         headers.remove("if-none-match");
         headers.remove("if-modified-since");
-
-        return pushToken.getResult();
     }
 
 

==================================================
PushToken.java
index aab5322194..e2a3ca6eb3 100644
--- a/java/org/apache/coyote/AbstractProcessor.java
+++ b/java/org/apache/coyote/AbstractProcessor.java
@@ -482,7 +482,7 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
             break;
         }
         case PUSH_REQUEST: {
-            doPush((PushToken) param);
+            doPush((Request) param);
             break;
         }
         }
@@ -747,13 +747,13 @@ public abstract class AbstractProcessor extends AbstractProcessorLight implement
      * Process a push. Processors that support push should override this method
      * and process the provided token.
      *
-     * @param pushToken Contains all the information necessary for the Processor
-     *                  to process the push request
+     * @param pushTarget Contains all the information necessary for the Processor
+     *                   to process the push request
      *
      * @throws UnsupportedOperationException if the protocol does not support
      *         push
      */
-    protected void doPush(PushToken pushToken) {
+    protected void doPush(Request pushTarget) {
         throw new UnsupportedOperationException(
                 sm.getString("abstractProcessor.pushrequest.notsupported"));
     }

==================================================
Stream.java
deleted file mode 100644
index 83b5ba557e..0000000000
--- a/java/org/apache/coyote/PushToken.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.apache.coyote;
-
-import java.util.concurrent.atomic.AtomicBoolean;
-
-/**
- * Token used during the HTTP/2 server push process.
- */
-public class PushToken {
-
-    private final AtomicBoolean result = new AtomicBoolean(false);
-    private final Request pushTarget;
-
-    public PushToken(Request pushTarget) {
-        this.pushTarget = pushTarget;
-    }
-
-    public Request getPushTarget() {
-        return pushTarget;
-    }
-
-    public void setResult(boolean result) {
-        this.result.set(result);
-    }
-
-    public boolean getResult() {
-        return result.get();
-    }
-}

==================================================
StreamProcessor.java
index 7e63528e5c..f95c75a1ef 100644
--- a/java/org/apache/coyote/http2/Stream.java
+++ b/java/org/apache/coyote/http2/Stream.java
@@ -478,9 +478,9 @@ class Stream extends AbstractStream implements HeaderEmitter {
     }
 
 
-    final boolean push(Request request) throws IOException {
+    final void push(Request request) throws IOException {
         if (!isPushSupported()) {
-            return false;
+            return;
         }
         // Set the special HTTP/2 headers
         request.getMimeHeaders().addValue(":method").duplicate(request.method());
@@ -503,8 +503,6 @@ class Stream extends AbstractStream implements HeaderEmitter {
         }
 
         push(handler, request, this);
-
-        return true;
     }
 
 

==================================================
