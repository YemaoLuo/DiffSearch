f1230d3a6b69b7ee457e77ba4d1a2a2dea9b52c4
==================================================
Add configuration options for extensions, the origin header, periodic check and buffer size. This restores the previous behavior, but adds some flexibility.
==================================================
Remy Maucherat
==================================================
Fri Dec 5 08:42:50 2014 +0000
==================================================
Constants.java
Add configuration options for extensions, the origin header, periodic check and buffer size. This restores the previous behavior, but adds some flexibility.

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1643194 13f79535-47bb-0310-9956-ffa450edef68



==================================================
TransformationFactory.java
index 16198d145d..8603632dbf 100644
--- a/java/org/apache/tomcat/websocket/LocalStrings.properties
+++ b/java/org/apache/tomcat/websocket/LocalStrings.properties
@@ -35,6 +35,8 @@ perMessageDeflate.duplicateParameter=Duplicate definition of the [{0}] extension
 perMessageDeflate.invalidWindowSize=An invalid windows of [{1}] size was specified for [{0}]. Valid values are whole numbers from 8 to 15 inclusive.
 perMessageDeflate.unknownParameter=An unknown extension parameter [{0}] was defined
 
+transformerFactory.unsupportedExtension=The extension [{0}] is not supported
+
 util.notToken=An illegal extension parameter was specified with name [{0}] and value [{1}]
 util.invalidMessageHandler=The message handler provided does not have an onMessage(Object) method
 util.invalidType=Unable to coerce value [{0}] to type [{1}]. That type is not supported.

==================================================
Util.java
index 43d63804bc..fed13f9977 100644
--- a/java/org/apache/tomcat/websocket/TransformationFactory.java
+++ b/java/org/apache/tomcat/websocket/TransformationFactory.java
@@ -20,8 +20,12 @@ import java.util.List;
 
 import javax.websocket.Extension;
 
+import org.apache.tomcat.util.res.StringManager;
+
 public class TransformationFactory {
 
+    private static final StringManager sm = StringManager.getManager(Constants.PACKAGE_NAME);
+
     private static final TransformationFactory factory = new TransformationFactory();
 
     private TransformationFactory() {
@@ -37,6 +41,11 @@ public class TransformationFactory {
         if (PerMessageDeflate.NAME.equals(name)) {
             return PerMessageDeflate.negotiate(preferences, isServer);
         }
-        return null;
+        if (Constants.ALLOW_UNSUPPORTED_EXTENSIONS) {
+            return null;
+        } else {
+            throw new IllegalArgumentException(
+                    sm.getString("transformerFactory.unsupportedExtension", name));
+        }
     }
 }

==================================================
WsWebSocketContainer.java
index 0526206777..2090f19ed2 100644
--- a/java/org/apache/tomcat/websocket/Util.java
+++ b/java/org/apache/tomcat/websocket/Util.java
@@ -308,8 +308,7 @@ public class Util {
             return Boolean.valueOf(value);
         } else if (type.equals(byte.class) || type.equals(Byte.class)) {
             return Byte.valueOf(value);
-        } else if (value.length() == 1 &&
-                (type.equals(char.class) || type.equals(Character.class))) {
+        } else if (type.equals(char.class) || type.equals(Character.class)) {
             return Character.valueOf(value.charAt(0));
         } else if (type.equals(double.class) || type.equals(Double.class)) {
             return Double.valueOf(value);

==================================================
