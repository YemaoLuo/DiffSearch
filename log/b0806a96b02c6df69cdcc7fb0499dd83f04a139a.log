b0806a96b02c6df69cdcc7fb0499dd83f04a139a
==================================================
Rename trace[d] -> track[ed]
==================================================
Mark Emlyn
==================================================
Sat Dec 28 14:22:57 2013 +0000
==================================================
TrackedWebResource.java
Rename trace[d] -> track[ed]

git-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1553833 13f79535-47bb-0310-9956-ffa450edef68



==================================================
WebResourceRoot.java
similarity index 93%
rename from java/org/apache/catalina/WebResourceTraceWrapper.java
rename to java/org/apache/catalina/TrackedWebResource.java
index 5dffaf8f9a..b6576e403d 100644
--- a/java/org/apache/catalina/WebResourceTraceWrapper.java
+++ b/java/org/apache/catalina/TrackedWebResource.java
@@ -18,7 +18,7 @@ package org.apache.catalina;
 
 import java.io.Closeable;
 
-public interface WebResourceTraceWrapper extends Closeable {
+public interface TrackedWebResource extends Closeable {
     Exception getCreatedBy();
     String getName();
 }

==================================================
AbstractResource.java
index 5ace0b65ff..8c2c6c1c98 100644
--- a/java/org/apache/catalina/WebResourceRoot.java
+++ b/java/org/apache/catalina/WebResourceRoot.java
@@ -363,7 +363,7 @@ public interface WebResourceRoot extends Lifecycle {
     int getCacheObjectMaxSize();
 
     /**
-     * Controls whether the trace locked files feature is enabled. If enabled,
+     * Controls whether the track locked files feature is enabled. If enabled,
      * all calls to methods that return objects that lock a file and need to be
      * closed to release that lock (e.g. {@link WebResource#getInputStream()}
      * will perform a number of additional tasks.
@@ -378,16 +378,16 @@ public interface WebResourceRoot extends Lifecycle {
      *       logged and then closed.</li>
      * </ul>
      *
-     * @param traceLockedFiles @true to enable it, @false to disable it
+     * @param trackLockedFiles @true to enable it, @false to disable it
      */
-    void setTraceLockedFiles(boolean traceLockedFiles);
+    void setTrackLockedFiles(boolean trackLockedFiles);
 
     /**
-     * Has the trace locked files feature been enabled?
+     * Has the track locked files feature been enabled?
      *
      * @return @true if it has been enabled, otherwise @false
      */
-    boolean getTraceLockedFiles();
+    boolean getTrackLockedFiles();
 
     /**
      * This method will be invoked by the context on a periodic basis and allows
@@ -396,9 +396,9 @@ public interface WebResourceRoot extends Lifecycle {
      */
     void backgroundProcess();
 
-    void registerTracedResource(WebResourceTraceWrapper traceWrapper);
+    void registerTrackedResource(TrackedWebResource traceWrapper);
 
-    void deregisterTracedResource(WebResourceTraceWrapper traceWrapperInputStream);
+    void deregisterTrackedResource(TrackedWebResource traceWrapperInputStream);
 
     /**
      * Obtain the set of {@link WebResourceSet#getBaseUrl()} for all

==================================================
StandardRoot.java
index 8415cb1f59..4ed3ffd2df 100644
--- a/java/org/apache/catalina/webresources/AbstractResource.java
+++ b/java/org/apache/catalina/webresources/AbstractResource.java
@@ -93,11 +93,11 @@ public abstract class AbstractResource implements WebResource {
     public final InputStream getInputStream() {
         InputStream is = doGetInputStream();
 
-        if (is == null || !root.getTraceLockedFiles()) {
+        if (is == null || !root.getTrackLockedFiles()) {
             return is;
         }
 
-        return new TraceWrapperInputStream(root, getName(), is);
+        return new TrackedInputStream(root, getName(), is);
     }
 
     protected abstract InputStream doGetInputStream();

==================================================
TrackedInputStream.java
index 43e39b3c19..748e3269dc 100644
--- a/java/org/apache/catalina/webresources/StandardRoot.java
+++ b/java/org/apache/catalina/webresources/StandardRoot.java
@@ -37,10 +37,10 @@ import org.apache.catalina.Context;
 import org.apache.catalina.Host;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleState;
+import org.apache.catalina.TrackedWebResource;
 import org.apache.catalina.WebResource;
 import org.apache.catalina.WebResourceRoot;
 import org.apache.catalina.WebResourceSet;
-import org.apache.catalina.WebResourceTraceWrapper;
 import org.apache.catalina.util.LifecycleMBeanBase;
 import org.apache.juli.logging.Log;
 import org.apache.juli.logging.LogFactory;
@@ -59,8 +59,7 @@ import org.apache.tomcat.util.res.StringManager;
  * String)} represents the absolute path to a file.
  * </p>
  */
-public class StandardRoot extends LifecycleMBeanBase
-        implements WebResourceRoot {
+public class StandardRoot extends LifecycleMBeanBase implements WebResourceRoot {
 
     private static final Log log = LogFactory.getLog(Cache.class);
     protected static final StringManager sm =
@@ -78,9 +77,9 @@ public class StandardRoot extends LifecycleMBeanBase
     private boolean cachingAllowed = true;
     private ObjectName cacheJmxName = null;
 
-    private boolean traceLockedFiles = false;
-    private final Set<WebResourceTraceWrapper> tracedResources =
-            Collections.newSetFromMap(new ConcurrentHashMap<WebResourceTraceWrapper,Boolean>());
+    private boolean trackLockedFiles = false;
+    private final Set<TrackedWebResource> trackedResources =
+            Collections.newSetFromMap(new ConcurrentHashMap<TrackedWebResource,Boolean>());
 
     // Constructs to make iteration over all WebResourceSets simpler
     private final ArrayList<WebResourceSet> mainResources = new ArrayList<>();
@@ -479,21 +478,21 @@ public class StandardRoot extends LifecycleMBeanBase
     }
 
     @Override
-    public void setTraceLockedFiles(boolean traceLockedFiles) {
-        this.traceLockedFiles = traceLockedFiles;
-        if (!traceLockedFiles) {
-            tracedResources.clear();
+    public void setTrackLockedFiles(boolean trackLockedFiles) {
+        this.trackLockedFiles = trackLockedFiles;
+        if (!trackLockedFiles) {
+            trackedResources.clear();
         }
     }
 
     @Override
-    public boolean getTraceLockedFiles() {
-        return traceLockedFiles;
+    public boolean getTrackLockedFiles() {
+        return trackLockedFiles;
     }
 
-    public List<String> getTraceResources() {
-        List<String> result = new ArrayList<>(tracedResources.size());
-        for (WebResourceTraceWrapper traceWrapper : tracedResources) {
+    public List<String> getTrackedResources() {
+        List<String> result = new ArrayList<>(trackedResources.size());
+        for (TrackedWebResource traceWrapper : trackedResources) {
             result.add(traceWrapper.toString());
         }
         return result;
@@ -547,14 +546,14 @@ public class StandardRoot extends LifecycleMBeanBase
 
 
     @Override
-    public void registerTracedResource(WebResourceTraceWrapper traceResource) {
-        tracedResources.add(traceResource);
+    public void registerTrackedResource(TrackedWebResource trackedResource) {
+        trackedResources.add(trackedResource);
     }
 
 
     @Override
-    public void deregisterTracedResource(WebResourceTraceWrapper traceResource) {
-        tracedResources.remove(traceResource);
+    public void deregisterTrackedResource(TrackedWebResource trackedResource) {
+        trackedResources.remove(trackedResource);
     }
 
 
@@ -675,13 +674,13 @@ public class StandardRoot extends LifecycleMBeanBase
         }
         classResources.clear();
 
-        for (WebResourceTraceWrapper tracedResource : tracedResources) {
+        for (TrackedWebResource trackedResource : trackedResources) {
             log.error(sm.getString("standardRoot.lockedFile",
                     context.getName(),
-                    tracedResource.getName()),
-                    tracedResource.getCreatedBy());
+                    trackedResource.getName()),
+                    trackedResource.getCreatedBy());
             try {
-                tracedResource.close();
+                trackedResource.close();
             } catch (IOException e) {
                 // Ignore
             }

==================================================
